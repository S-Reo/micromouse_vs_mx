
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         000135f0  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000005dc  0801b5f0  0801b5f0  0002b5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0801bbcc  0801bbcc  000301fc  2**0
                  CONTENTS
  6 .ARM          00000008  0801bbcc  0801bbcc  0002bbcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0801bbd4  0801bbd4  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0801bbd4  0801bbd4  0002bbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0801bbd8  0801bbd8  0002bbd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001fc  20000000  0801bbdc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008ac  200001fc  0801bdd8  000301fc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000aa8  0801bdd8  00030aa8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025218  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004f69  00000000  00000000  00055444  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001730  00000000  00000000  0005a3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000014e0  00000000  00000000  0005bae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00026ceb  00000000  00000000  0005cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00017644  00000000  00000000  00083cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c98ef  00000000  00000000  0009b2ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00164bde  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007310  00000000  00000000  00164c5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001fc 	.word	0x200001fc
 800801c:	00000000 	.word	0x00000000
 8008020:	0801b5d8 	.word	0x0801b5d8

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000200 	.word	0x20000200
 800803c:	0801b5d8 	.word	0x0801b5d8

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <InitPosition>:
//
//
//
//}
void InitPosition()
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
	Pos.X = 0;
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <InitPosition+0x34>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	701a      	strb	r2, [r3, #0]
	Pos.Y = 0;
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <InitPosition+0x34>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	705a      	strb	r2, [r3, #1]
	Pos.Car = north;
 8008e08:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <InitPosition+0x34>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	715a      	strb	r2, [r3, #5]
	Pos.Dir = front;
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <InitPosition+0x34>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	711a      	strb	r2, [r3, #4]
	Pos.Act = Wait;
 8008e14:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <InitPosition+0x34>)
 8008e16:	2204      	movs	r2, #4
 8008e18:	719a      	strb	r2, [r3, #6]
	Pos.WallSaf = wall_warn;//どっちにするか
 8008e1a:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <InitPosition+0x34>)
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	71da      	strb	r2, [r3, #7]

}
 8008e20:	bf00      	nop
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	20000000 	.word	0x20000000

08008e30 <GetWallCtrlDirection>:

int GetWallCtrlDirection()
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0

	switch(Pos.Car)
 8008e34:	4ba7      	ldr	r3, [pc, #668]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008e36:	795b      	ldrb	r3, [r3, #5]
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	f200 819f 	bhi.w	800917c <GetWallCtrlDirection+0x34c>
 8008e3e:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <GetWallCtrlDirection+0x14>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e55 	.word	0x08008e55
 8008e48:	08008f1d 	.word	0x08008f1d
 8008e4c:	08008fe5 	.word	0x08008fe5
 8008e50:	080090ad 	.word	0x080090ad
	{
	case north:
		if(Wall[Pos.X][Pos.Y].north == wall)
 8008e54:	4b9f      	ldr	r3, [pc, #636]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4b9e      	ldr	r3, [pc, #632]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	4a9d      	ldr	r2, [pc, #628]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008e62:	460b      	mov	r3, r1
 8008e64:	00db      	lsls	r3, r3, #3
 8008e66:	440b      	add	r3, r1
 8008e68:	4403      	add	r3, r0
 8008e6a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008e6e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d101      	bne.n	8008e7c <GetWallCtrlDirection+0x4c>
		{
			return F_WALL_PID;
 8008e78:	2308      	movs	r3, #8
 8008e7a:	e180      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall && Wall[Pos.X][Pos.Y].west == wall)
 8008e7c:	4b95      	ldr	r3, [pc, #596]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	4619      	mov	r1, r3
 8008e82:	4b94      	ldr	r3, [pc, #592]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008e84:	785b      	ldrb	r3, [r3, #1]
 8008e86:	4618      	mov	r0, r3
 8008e88:	4a93      	ldr	r2, [pc, #588]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	00db      	lsls	r3, r3, #3
 8008e8e:	440b      	add	r3, r1
 8008e90:	4403      	add	r3, r0
 8008e92:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008e96:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d113      	bne.n	8008ec8 <GetWallCtrlDirection+0x98>
 8008ea0:	4b8c      	ldr	r3, [pc, #560]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	4b8b      	ldr	r3, [pc, #556]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008ea8:	785b      	ldrb	r3, [r3, #1]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	4a8a      	ldr	r2, [pc, #552]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008eae:	460b      	mov	r3, r1
 8008eb0:	00db      	lsls	r3, r3, #3
 8008eb2:	440b      	add	r3, r1
 8008eb4:	4403      	add	r3, r0
 8008eb6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008eba:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <GetWallCtrlDirection+0x98>
		{
			return D_WALL_PID;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e15a      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall)
 8008ec8:	4b82      	ldr	r3, [pc, #520]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4b81      	ldr	r3, [pc, #516]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	4a80      	ldr	r2, [pc, #512]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	00db      	lsls	r3, r3, #3
 8008eda:	440b      	add	r3, r1
 8008edc:	4403      	add	r3, r0
 8008ede:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008ee2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d101      	bne.n	8008ef0 <GetWallCtrlDirection+0xc0>
		{
			return R_WALL_PID;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e146      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].west == wall)
 8008ef0:	4b78      	ldr	r3, [pc, #480]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4b77      	ldr	r3, [pc, #476]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008ef8:	785b      	ldrb	r3, [r3, #1]
 8008efa:	4618      	mov	r0, r3
 8008efc:	4a76      	ldr	r2, [pc, #472]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008efe:	460b      	mov	r3, r1
 8008f00:	00db      	lsls	r3, r3, #3
 8008f02:	440b      	add	r3, r1
 8008f04:	4403      	add	r3, r0
 8008f06:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f0a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d101      	bne.n	8008f18 <GetWallCtrlDirection+0xe8>
		{
			return L_WALL_PID;
 8008f14:	2302      	movs	r3, #2
 8008f16:	e132      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else
		{
			return N_WALL_PID;
 8008f18:	2306      	movs	r3, #6
 8008f1a:	e130      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		break;

	case east:
		if(Wall[Pos.X][Pos.Y].east == wall)
 8008f1c:	4b6d      	ldr	r3, [pc, #436]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	4619      	mov	r1, r3
 8008f22:	4b6c      	ldr	r3, [pc, #432]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f24:	785b      	ldrb	r3, [r3, #1]
 8008f26:	4618      	mov	r0, r3
 8008f28:	4a6b      	ldr	r2, [pc, #428]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	00db      	lsls	r3, r3, #3
 8008f2e:	440b      	add	r3, r1
 8008f30:	4403      	add	r3, r0
 8008f32:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f36:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d101      	bne.n	8008f44 <GetWallCtrlDirection+0x114>
		{
			return F_WALL_PID;
 8008f40:	2308      	movs	r3, #8
 8008f42:	e11c      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].north == wall && Wall[Pos.X][Pos.Y].south == wall)//south)
 8008f44:	4b63      	ldr	r3, [pc, #396]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4b62      	ldr	r3, [pc, #392]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f4c:	785b      	ldrb	r3, [r3, #1]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	4a61      	ldr	r2, [pc, #388]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008f52:	460b      	mov	r3, r1
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	440b      	add	r3, r1
 8008f58:	4403      	add	r3, r0
 8008f5a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f5e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d113      	bne.n	8008f90 <GetWallCtrlDirection+0x160>
 8008f68:	4b5a      	ldr	r3, [pc, #360]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4b59      	ldr	r3, [pc, #356]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f70:	785b      	ldrb	r3, [r3, #1]
 8008f72:	4618      	mov	r0, r3
 8008f74:	4a58      	ldr	r2, [pc, #352]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008f76:	460b      	mov	r3, r1
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	440b      	add	r3, r1
 8008f7c:	4403      	add	r3, r0
 8008f7e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f82:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d101      	bne.n	8008f90 <GetWallCtrlDirection+0x160>
		{
			return D_WALL_PID;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e0f6      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].north == wall)
 8008f90:	4b50      	ldr	r3, [pc, #320]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	4619      	mov	r1, r3
 8008f96:	4b4f      	ldr	r3, [pc, #316]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f98:	785b      	ldrb	r3, [r3, #1]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	4a4e      	ldr	r2, [pc, #312]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	440b      	add	r3, r1
 8008fa4:	4403      	add	r3, r0
 8008fa6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008faa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d101      	bne.n	8008fb8 <GetWallCtrlDirection+0x188>
		{
			return L_WALL_PID;
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	e0e2      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].south == wall)
 8008fb8:	4b46      	ldr	r3, [pc, #280]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4b45      	ldr	r3, [pc, #276]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008fc0:	785b      	ldrb	r3, [r3, #1]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	4a44      	ldr	r2, [pc, #272]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	00db      	lsls	r3, r3, #3
 8008fca:	440b      	add	r3, r1
 8008fcc:	4403      	add	r3, r0
 8008fce:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008fd2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d101      	bne.n	8008fe0 <GetWallCtrlDirection+0x1b0>
		{
			return R_WALL_PID;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e0ce      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else
		{
			return N_WALL_PID;
 8008fe0:	2306      	movs	r3, #6
 8008fe2:	e0cc      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		break;
	case south:
		if(Wall[Pos.X][Pos.Y].south == wall)
 8008fe4:	4b3b      	ldr	r3, [pc, #236]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4b3a      	ldr	r3, [pc, #232]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008fec:	785b      	ldrb	r3, [r3, #1]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	4a39      	ldr	r2, [pc, #228]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	00db      	lsls	r3, r3, #3
 8008ff6:	440b      	add	r3, r1
 8008ff8:	4403      	add	r3, r0
 8008ffa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008ffe:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b01      	cmp	r3, #1
 8009006:	d101      	bne.n	800900c <GetWallCtrlDirection+0x1dc>
		{
			return F_WALL_PID;
 8009008:	2308      	movs	r3, #8
 800900a:	e0b8      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall && Wall[Pos.X][Pos.Y].west == wall)
 800900c:	4b31      	ldr	r3, [pc, #196]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	4619      	mov	r1, r3
 8009012:	4b30      	ldr	r3, [pc, #192]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8009014:	785b      	ldrb	r3, [r3, #1]
 8009016:	4618      	mov	r0, r3
 8009018:	4a2f      	ldr	r2, [pc, #188]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 800901a:	460b      	mov	r3, r1
 800901c:	00db      	lsls	r3, r3, #3
 800901e:	440b      	add	r3, r1
 8009020:	4403      	add	r3, r0
 8009022:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009026:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b01      	cmp	r3, #1
 800902e:	d113      	bne.n	8009058 <GetWallCtrlDirection+0x228>
 8009030:	4b28      	ldr	r3, [pc, #160]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	4619      	mov	r1, r3
 8009036:	4b27      	ldr	r3, [pc, #156]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8009038:	785b      	ldrb	r3, [r3, #1]
 800903a:	4618      	mov	r0, r3
 800903c:	4a26      	ldr	r2, [pc, #152]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 800903e:	460b      	mov	r3, r1
 8009040:	00db      	lsls	r3, r3, #3
 8009042:	440b      	add	r3, r1
 8009044:	4403      	add	r3, r0
 8009046:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800904a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <GetWallCtrlDirection+0x228>
		{
			return D_WALL_PID;
 8009054:	2301      	movs	r3, #1
 8009056:	e092      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall)
 8009058:	4b1e      	ldr	r3, [pc, #120]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	4619      	mov	r1, r3
 800905e:	4b1d      	ldr	r3, [pc, #116]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	4618      	mov	r0, r3
 8009064:	4a1c      	ldr	r2, [pc, #112]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8009066:	460b      	mov	r3, r1
 8009068:	00db      	lsls	r3, r3, #3
 800906a:	440b      	add	r3, r1
 800906c:	4403      	add	r3, r0
 800906e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009072:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009076:	b2db      	uxtb	r3, r3
 8009078:	2b01      	cmp	r3, #1
 800907a:	d101      	bne.n	8009080 <GetWallCtrlDirection+0x250>
		{
			return L_WALL_PID;
 800907c:	2302      	movs	r3, #2
 800907e:	e07e      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].west == wall)
 8009080:	4b14      	ldr	r3, [pc, #80]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	4619      	mov	r1, r3
 8009086:	4b13      	ldr	r3, [pc, #76]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8009088:	785b      	ldrb	r3, [r3, #1]
 800908a:	4618      	mov	r0, r3
 800908c:	4a12      	ldr	r2, [pc, #72]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 800908e:	460b      	mov	r3, r1
 8009090:	00db      	lsls	r3, r3, #3
 8009092:	440b      	add	r3, r1
 8009094:	4403      	add	r3, r0
 8009096:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800909a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d101      	bne.n	80090a8 <GetWallCtrlDirection+0x278>
		{
			return R_WALL_PID;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e06a      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else
		{
			return N_WALL_PID;
 80090a8:	2306      	movs	r3, #6
 80090aa:	e068      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		break;
	case west:
		if(Wall[Pos.X][Pos.Y].west == wall)
 80090ac:	4b09      	ldr	r3, [pc, #36]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	4619      	mov	r1, r3
 80090b2:	4b08      	ldr	r3, [pc, #32]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 80090b4:	785b      	ldrb	r3, [r3, #1]
 80090b6:	4618      	mov	r0, r3
 80090b8:	4a07      	ldr	r2, [pc, #28]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 80090ba:	460b      	mov	r3, r1
 80090bc:	00db      	lsls	r3, r3, #3
 80090be:	440b      	add	r3, r1
 80090c0:	4403      	add	r3, r0
 80090c2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80090c6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d105      	bne.n	80090dc <GetWallCtrlDirection+0x2ac>
		{
			return F_WALL_PID;
 80090d0:	2308      	movs	r3, #8
 80090d2:	e054      	b.n	800917e <GetWallCtrlDirection+0x34e>
 80090d4:	20000000 	.word	0x20000000
 80090d8:	200006ec 	.word	0x200006ec
		}
		else if ( Wall[Pos.X][Pos.Y].north == wall && Wall[Pos.X][Pos.Y].south == wall)//.westになってた。あと == south )で意味わからない処理に。
 80090dc:	4b2a      	ldr	r3, [pc, #168]	; (8009188 <GetWallCtrlDirection+0x358>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	4619      	mov	r1, r3
 80090e2:	4b29      	ldr	r3, [pc, #164]	; (8009188 <GetWallCtrlDirection+0x358>)
 80090e4:	785b      	ldrb	r3, [r3, #1]
 80090e6:	4618      	mov	r0, r3
 80090e8:	4a28      	ldr	r2, [pc, #160]	; (800918c <GetWallCtrlDirection+0x35c>)
 80090ea:	460b      	mov	r3, r1
 80090ec:	00db      	lsls	r3, r3, #3
 80090ee:	440b      	add	r3, r1
 80090f0:	4403      	add	r3, r0
 80090f2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80090f6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d113      	bne.n	8009128 <GetWallCtrlDirection+0x2f8>
 8009100:	4b21      	ldr	r3, [pc, #132]	; (8009188 <GetWallCtrlDirection+0x358>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	4619      	mov	r1, r3
 8009106:	4b20      	ldr	r3, [pc, #128]	; (8009188 <GetWallCtrlDirection+0x358>)
 8009108:	785b      	ldrb	r3, [r3, #1]
 800910a:	4618      	mov	r0, r3
 800910c:	4a1f      	ldr	r2, [pc, #124]	; (800918c <GetWallCtrlDirection+0x35c>)
 800910e:	460b      	mov	r3, r1
 8009110:	00db      	lsls	r3, r3, #3
 8009112:	440b      	add	r3, r1
 8009114:	4403      	add	r3, r0
 8009116:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800911a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b01      	cmp	r3, #1
 8009122:	d101      	bne.n	8009128 <GetWallCtrlDirection+0x2f8>
		{
			return D_WALL_PID;
 8009124:	2301      	movs	r3, #1
 8009126:	e02a      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if ( Wall[Pos.X][Pos.Y].north == wall )
 8009128:	4b17      	ldr	r3, [pc, #92]	; (8009188 <GetWallCtrlDirection+0x358>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	4619      	mov	r1, r3
 800912e:	4b16      	ldr	r3, [pc, #88]	; (8009188 <GetWallCtrlDirection+0x358>)
 8009130:	785b      	ldrb	r3, [r3, #1]
 8009132:	4618      	mov	r0, r3
 8009134:	4a15      	ldr	r2, [pc, #84]	; (800918c <GetWallCtrlDirection+0x35c>)
 8009136:	460b      	mov	r3, r1
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	440b      	add	r3, r1
 800913c:	4403      	add	r3, r0
 800913e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009142:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b01      	cmp	r3, #1
 800914a:	d101      	bne.n	8009150 <GetWallCtrlDirection+0x320>
		{
			return R_WALL_PID;
 800914c:	2303      	movs	r3, #3
 800914e:	e016      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if ( Wall[Pos.X][Pos.Y].south == wall )
 8009150:	4b0d      	ldr	r3, [pc, #52]	; (8009188 <GetWallCtrlDirection+0x358>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	4619      	mov	r1, r3
 8009156:	4b0c      	ldr	r3, [pc, #48]	; (8009188 <GetWallCtrlDirection+0x358>)
 8009158:	785b      	ldrb	r3, [r3, #1]
 800915a:	4618      	mov	r0, r3
 800915c:	4a0b      	ldr	r2, [pc, #44]	; (800918c <GetWallCtrlDirection+0x35c>)
 800915e:	460b      	mov	r3, r1
 8009160:	00db      	lsls	r3, r3, #3
 8009162:	440b      	add	r3, r1
 8009164:	4403      	add	r3, r0
 8009166:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800916a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b01      	cmp	r3, #1
 8009172:	d101      	bne.n	8009178 <GetWallCtrlDirection+0x348>
		{
			return L_WALL_PID;
 8009174:	2302      	movs	r3, #2
 8009176:	e002      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else
		{
			return N_WALL_PID;
 8009178:	2306      	movs	r3, #6
 800917a:	e000      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		break;

	default:
		//斜め方向
		return N_WALL_PID;
 800917c:	2306      	movs	r3, #6
		break;
	}

}
 800917e:	4618      	mov	r0, r3
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	20000000 	.word	0x20000000
 800918c:	200006ec 	.word	0x200006ec

08009190 <ChangeCardinal>:

void ChangeCardinal()
{
 8009190:	b480      	push	{r7}
 8009192:	af00      	add	r7, sp, #0
	switch(Pos.Dir)
 8009194:	4b11      	ldr	r3, [pc, #68]	; (80091dc <ChangeCardinal+0x4c>)
 8009196:	791b      	ldrb	r3, [r3, #4]
 8009198:	2b02      	cmp	r3, #2
 800919a:	d012      	beq.n	80091c2 <ChangeCardinal+0x32>
 800919c:	2b03      	cmp	r3, #3
 800919e:	d009      	beq.n	80091b4 <ChangeCardinal+0x24>
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d000      	beq.n	80091a6 <ChangeCardinal+0x16>
		break;
	case back:
		Pos.Car += 2;
		break;
	default:
		break;
 80091a4:	e014      	b.n	80091d0 <ChangeCardinal+0x40>
		Pos.Car ++;
 80091a6:	4b0d      	ldr	r3, [pc, #52]	; (80091dc <ChangeCardinal+0x4c>)
 80091a8:	795b      	ldrb	r3, [r3, #5]
 80091aa:	3301      	adds	r3, #1
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	4b0b      	ldr	r3, [pc, #44]	; (80091dc <ChangeCardinal+0x4c>)
 80091b0:	715a      	strb	r2, [r3, #5]
		break;
 80091b2:	e00d      	b.n	80091d0 <ChangeCardinal+0x40>
		Pos.Car --;
 80091b4:	4b09      	ldr	r3, [pc, #36]	; (80091dc <ChangeCardinal+0x4c>)
 80091b6:	795b      	ldrb	r3, [r3, #5]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	4b07      	ldr	r3, [pc, #28]	; (80091dc <ChangeCardinal+0x4c>)
 80091be:	715a      	strb	r2, [r3, #5]
		break;
 80091c0:	e006      	b.n	80091d0 <ChangeCardinal+0x40>
		Pos.Car += 2;
 80091c2:	4b06      	ldr	r3, [pc, #24]	; (80091dc <ChangeCardinal+0x4c>)
 80091c4:	795b      	ldrb	r3, [r3, #5]
 80091c6:	3302      	adds	r3, #2
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	4b04      	ldr	r3, [pc, #16]	; (80091dc <ChangeCardinal+0x4c>)
 80091cc:	715a      	strb	r2, [r3, #5]
		break;
 80091ce:	bf00      	nop
	}

}
 80091d0:	bf00      	nop
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	20000000 	.word	0x20000000

080091e0 <WallSafe>:
	Pos.Car = car;
	Pos.Dir = dir;
	Pos.WallSaf = safe_or_warn;
}
void WallSafe()
{
 80091e0:	b480      	push	{r7}
 80091e2:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_safe;
 80091e4:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <WallSafe+0x14>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	71da      	strb	r2, [r3, #7]
}
 80091ea:	bf00      	nop
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	20000000 	.word	0x20000000

080091f8 <WallWarn>:
void WallWarn()
{
 80091f8:	b480      	push	{r7}
 80091fa:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_warn;
 80091fc:	4b03      	ldr	r3, [pc, #12]	; (800920c <WallWarn+0x14>)
 80091fe:	2201      	movs	r2, #1
 8009200:	71da      	strb	r2, [r3, #7]
}
 8009202:	bf00      	nop
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	20000000 	.word	0x20000000

08009210 <ControlWall>:
void ControlWall()
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
	//直進中で
		//端の座標なら確実に型壁制御
	//斜め走行は別でアクションを定義

	//横壁制御
	int wall_ctrl_dir = GetWallCtrlDirection();	//次の座標のも返してみて、できれば連続で制御をする。
 8009216:	f7ff fe0b 	bl	8008e30 <GetWallCtrlDirection>
 800921a:	6078      	str	r0, [r7, #4]
	//割り込み中に呼ぶかアクション中に呼ぶか。アクション中の方が座標と壁の状態が確実。いや、判定が遅れると嫌だからやっぱり割り込み。移動量はflagで。

	//PIDChangeFlagStraight(N_WALL_PID);//直進flagはどれでも無い状態。制御なし。
	PIDChangeFlag(L_WALL_PID, 0);
 800921c:	2100      	movs	r1, #0
 800921e:	2002      	movs	r0, #2
 8009220:	f007 fe56 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 8009224:	2100      	movs	r1, #0
 8009226:	2003      	movs	r0, #3
 8009228:	f007 fe52 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800922c:	2100      	movs	r1, #0
 800922e:	2001      	movs	r0, #1
 8009230:	f007 fe4e 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag( A_VELO_PID, 0);
 8009234:	2100      	movs	r1, #0
 8009236:	2000      	movs	r0, #0
 8009238:	f007 fe4a 	bl	8010ed0 <PIDChangeFlag>
	//アクションごとに壁制御を記述した方がいいかも

	//アクション、方向、壁安全。

	//減速の時、壁の状態
	if(Pos.Dir == front)		//区画の区切りで前方に進むと決めたあと、動作としては加速か、straight。初期状態はwaitから加速へ
 800923c:	4b7c      	ldr	r3, [pc, #496]	; (8009430 <ControlWall+0x220>)
 800923e:	791b      	ldrb	r3, [r3, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d13f      	bne.n	80092c4 <ControlWall+0xb4>
	{
		switch(Pos.Act)
 8009244:	4b7a      	ldr	r3, [pc, #488]	; (8009430 <ControlWall+0x220>)
 8009246:	799b      	ldrb	r3, [r3, #6]
 8009248:	2b05      	cmp	r3, #5
 800924a:	f200 80ec 	bhi.w	8009426 <ControlWall+0x216>
 800924e:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <ControlWall+0x44>)
 8009250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009254:	0800926d 	.word	0x0800926d
 8009258:	08009427 	.word	0x08009427
 800925c:	08009427 	.word	0x08009427
 8009260:	08009427 	.word	0x08009427
 8009264:	08009427 	.word	0x08009427
 8009268:	08009277 	.word	0x08009277
		{
		case accel:
			PIDChangeFlag( A_VELO_PID , 1);
 800926c:	2101      	movs	r1, #1
 800926e:	2000      	movs	r0, #0
 8009270:	f007 fe2e 	bl	8010ed0 <PIDChangeFlag>
			//一つ先の区画がわかっていて加速したいときに
			break;
 8009274:	e0d8      	b.n	8009428 <ControlWall+0x218>
		case decel:
			//減速はないけど一応今後のため。
			break;
		case straight:
			//3/3おっけーかも
			if( (wall_ctrl_dir != N_WALL_PID)  && (AddVelocity == 0) )	//左右どちらかに壁があるとき
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b06      	cmp	r3, #6
 800927a:	d01d      	beq.n	80092b8 <ControlWall+0xa8>
 800927c:	4b6d      	ldr	r3, [pc, #436]	; (8009434 <ControlWall+0x224>)
 800927e:	edd3 7a00 	vldr	s15, [r3]
 8009282:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800928a:	d115      	bne.n	80092b8 <ControlWall+0xa8>
			{
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 800928c:	4b68      	ldr	r3, [pc, #416]	; (8009430 <ControlWall+0x220>)
 800928e:	79db      	ldrb	r3, [r3, #7]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d108      	bne.n	80092a6 <ControlWall+0x96>
				{
					PIDChangeFlag(wall_ctrl_dir, 1);
 8009294:	2101      	movs	r1, #1
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f007 fe1a 	bl	8010ed0 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 800929c:	2100      	movs	r1, #0
 800929e:	2000      	movs	r0, #0
 80092a0:	f007 fe16 	bl	8010ed0 <PIDChangeFlag>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80092a4:	e00d      	b.n	80092c2 <ControlWall+0xb2>
				}
				else
				{
					PIDChangeFlag(wall_ctrl_dir, 0);
 80092a6:	2100      	movs	r1, #0
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f007 fe11 	bl	8010ed0 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 80092ae:	2101      	movs	r1, #1
 80092b0:	2000      	movs	r0, #0
 80092b2:	f007 fe0d 	bl	8010ed0 <PIDChangeFlag>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80092b6:	e004      	b.n	80092c2 <ControlWall+0xb2>
				}
			}
			else
			{
				PIDChangeFlag( A_VELO_PID , 1);
 80092b8:	2101      	movs	r1, #1
 80092ba:	2000      	movs	r0, #0
 80092bc:	f007 fe08 	bl	8010ed0 <PIDChangeFlag>
			}
			break;
 80092c0:	e0b2      	b.n	8009428 <ControlWall+0x218>
 80092c2:	e0b1      	b.n	8009428 <ControlWall+0x218>
		//移動量がN割りのフラグ。直進は、Uターンの加減速を含まない、ただの一区画直進なので、移動量判定でできる。と思ったら分けてた?
		//Actはstraight


	}
	else if(Pos.Dir == left)	//左に行くとき
 80092c4:	4b5a      	ldr	r3, [pc, #360]	; (8009430 <ControlWall+0x220>)
 80092c6:	791b      	ldrb	r3, [r3, #4]
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	d140      	bne.n	800934e <ControlWall+0x13e>
	{
		if(Pos.Act == slalom)
 80092cc:	4b58      	ldr	r3, [pc, #352]	; (8009430 <ControlWall+0x220>)
 80092ce:	799b      	ldrb	r3, [r3, #6]
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d108      	bne.n	80092e6 <ControlWall+0xd6>
		{
//			PIDChangeFlag(L_WALL_PID, 0);
//			PIDChangeFlag(R_WALL_PID, 0);
//			PIDChangeFlag(D_WALL_PID, 0);
//			PIDChangeFlag( A_VELO_PID, 0);
			TargetAngularV = 0;
 80092d4:	4b58      	ldr	r3, [pc, #352]	; (8009438 <ControlWall+0x228>)
 80092d6:	f04f 0200 	mov.w	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 80092dc:	4b57      	ldr	r3, [pc, #348]	; (800943c <ControlWall+0x22c>)
 80092de:	f04f 0200 	mov.w	r2, #0
 80092e2:	601a      	str	r2, [r3, #0]





}
 80092e4:	e0a0      	b.n	8009428 <ControlWall+0x218>
		else if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 80092e6:	4b52      	ldr	r3, [pc, #328]	; (8009430 <ControlWall+0x220>)
 80092e8:	799b      	ldrb	r3, [r3, #6]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d11d      	bne.n	800932a <ControlWall+0x11a>
			if( wall_ctrl_dir != N_WALL_PID )	//左右どちらかに壁があるとき
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b06      	cmp	r3, #6
 80092f2:	d015      	beq.n	8009320 <ControlWall+0x110>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80092f4:	4b4e      	ldr	r3, [pc, #312]	; (8009430 <ControlWall+0x220>)
 80092f6:	79db      	ldrb	r3, [r3, #7]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d108      	bne.n	800930e <ControlWall+0xfe>
					PIDChangeFlag(wall_ctrl_dir, 1);
 80092fc:	2101      	movs	r1, #1
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f007 fde6 	bl	8010ed0 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 8009304:	2100      	movs	r1, #0
 8009306:	2000      	movs	r0, #0
 8009308:	f007 fde2 	bl	8010ed0 <PIDChangeFlag>
}
 800930c:	e08c      	b.n	8009428 <ControlWall+0x218>
					PIDChangeFlag(wall_ctrl_dir, 0);
 800930e:	2100      	movs	r1, #0
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f007 fddd 	bl	8010ed0 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 8009316:	2101      	movs	r1, #1
 8009318:	2000      	movs	r0, #0
 800931a:	f007 fdd9 	bl	8010ed0 <PIDChangeFlag>
}
 800931e:	e083      	b.n	8009428 <ControlWall+0x218>
				PIDChangeFlag( A_VELO_PID , 1);
 8009320:	2101      	movs	r1, #1
 8009322:	2000      	movs	r0, #0
 8009324:	f007 fdd4 	bl	8010ed0 <PIDChangeFlag>
}
 8009328:	e07e      	b.n	8009428 <ControlWall+0x218>
		else if(Pos.Act == accel)
 800932a:	4b41      	ldr	r3, [pc, #260]	; (8009430 <ControlWall+0x220>)
 800932c:	799b      	ldrb	r3, [r3, #6]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d104      	bne.n	800933c <ControlWall+0x12c>
			PIDChangeFlag( A_VELO_PID , 1);
 8009332:	2101      	movs	r1, #1
 8009334:	2000      	movs	r0, #0
 8009336:	f007 fdcb 	bl	8010ed0 <PIDChangeFlag>
}
 800933a:	e075      	b.n	8009428 <ControlWall+0x218>
		else if(Pos.Act == rotate)
 800933c:	4b3c      	ldr	r3, [pc, #240]	; (8009430 <ControlWall+0x220>)
 800933e:	799b      	ldrb	r3, [r3, #6]
 8009340:	2b03      	cmp	r3, #3
 8009342:	d171      	bne.n	8009428 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 0);
 8009344:	2100      	movs	r1, #0
 8009346:	2000      	movs	r0, #0
 8009348:	f007 fdc2 	bl	8010ed0 <PIDChangeFlag>
}
 800934c:	e06c      	b.n	8009428 <ControlWall+0x218>
	else if(Pos.Dir == right)
 800934e:	4b38      	ldr	r3, [pc, #224]	; (8009430 <ControlWall+0x220>)
 8009350:	791b      	ldrb	r3, [r3, #4]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d140      	bne.n	80093d8 <ControlWall+0x1c8>
		if(Pos.Act == slalom)
 8009356:	4b36      	ldr	r3, [pc, #216]	; (8009430 <ControlWall+0x220>)
 8009358:	799b      	ldrb	r3, [r3, #6]
 800935a:	2b02      	cmp	r3, #2
 800935c:	d108      	bne.n	8009370 <ControlWall+0x160>
			TargetAngularV = 0;
 800935e:	4b36      	ldr	r3, [pc, #216]	; (8009438 <ControlWall+0x228>)
 8009360:	f04f 0200 	mov.w	r2, #0
 8009364:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009366:	4b35      	ldr	r3, [pc, #212]	; (800943c <ControlWall+0x22c>)
 8009368:	f04f 0200 	mov.w	r2, #0
 800936c:	601a      	str	r2, [r3, #0]
}
 800936e:	e05b      	b.n	8009428 <ControlWall+0x218>
		else if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 8009370:	4b2f      	ldr	r3, [pc, #188]	; (8009430 <ControlWall+0x220>)
 8009372:	799b      	ldrb	r3, [r3, #6]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d11d      	bne.n	80093b4 <ControlWall+0x1a4>
			if( wall_ctrl_dir != N_WALL_PID )	//左右どちらかに壁があるとき
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b06      	cmp	r3, #6
 800937c:	d015      	beq.n	80093aa <ControlWall+0x19a>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 800937e:	4b2c      	ldr	r3, [pc, #176]	; (8009430 <ControlWall+0x220>)
 8009380:	79db      	ldrb	r3, [r3, #7]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d108      	bne.n	8009398 <ControlWall+0x188>
					PIDChangeFlag(wall_ctrl_dir, 1);
 8009386:	2101      	movs	r1, #1
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f007 fda1 	bl	8010ed0 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 800938e:	2100      	movs	r1, #0
 8009390:	2000      	movs	r0, #0
 8009392:	f007 fd9d 	bl	8010ed0 <PIDChangeFlag>
}
 8009396:	e047      	b.n	8009428 <ControlWall+0x218>
					PIDChangeFlag(wall_ctrl_dir, 0);
 8009398:	2100      	movs	r1, #0
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f007 fd98 	bl	8010ed0 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 80093a0:	2101      	movs	r1, #1
 80093a2:	2000      	movs	r0, #0
 80093a4:	f007 fd94 	bl	8010ed0 <PIDChangeFlag>
}
 80093a8:	e03e      	b.n	8009428 <ControlWall+0x218>
				PIDChangeFlag( A_VELO_PID , 1);
 80093aa:	2101      	movs	r1, #1
 80093ac:	2000      	movs	r0, #0
 80093ae:	f007 fd8f 	bl	8010ed0 <PIDChangeFlag>
}
 80093b2:	e039      	b.n	8009428 <ControlWall+0x218>
		else if(Pos.Act == accel)
 80093b4:	4b1e      	ldr	r3, [pc, #120]	; (8009430 <ControlWall+0x220>)
 80093b6:	799b      	ldrb	r3, [r3, #6]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d104      	bne.n	80093c6 <ControlWall+0x1b6>
			PIDChangeFlag( A_VELO_PID , 1);
 80093bc:	2101      	movs	r1, #1
 80093be:	2000      	movs	r0, #0
 80093c0:	f007 fd86 	bl	8010ed0 <PIDChangeFlag>
}
 80093c4:	e030      	b.n	8009428 <ControlWall+0x218>
		else if(Pos.Act == rotate)
 80093c6:	4b1a      	ldr	r3, [pc, #104]	; (8009430 <ControlWall+0x220>)
 80093c8:	799b      	ldrb	r3, [r3, #6]
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d12c      	bne.n	8009428 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 0);
 80093ce:	2100      	movs	r1, #0
 80093d0:	2000      	movs	r0, #0
 80093d2:	f007 fd7d 	bl	8010ed0 <PIDChangeFlag>
}
 80093d6:	e027      	b.n	8009428 <ControlWall+0x218>
	else if(Pos.Dir == back)
 80093d8:	4b15      	ldr	r3, [pc, #84]	; (8009430 <ControlWall+0x220>)
 80093da:	791b      	ldrb	r3, [r3, #4]
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d123      	bne.n	8009428 <ControlWall+0x218>
		if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 80093e0:	4b13      	ldr	r3, [pc, #76]	; (8009430 <ControlWall+0x220>)
 80093e2:	799b      	ldrb	r3, [r3, #6]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d115      	bne.n	8009414 <ControlWall+0x204>
			if(Pos.WallSaf == wall_safe)	//フラグ作る。前に壁が無いパターンの減速は、後半の壁の状態の影響を受けることがある。35*0.5mmが目安か。
 80093e8:	4b11      	ldr	r3, [pc, #68]	; (8009430 <ControlWall+0x220>)
 80093ea:	79db      	ldrb	r3, [r3, #7]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d108      	bne.n	8009402 <ControlWall+0x1f2>
				PIDChangeFlag(wall_ctrl_dir , 1);
 80093f0:	2101      	movs	r1, #1
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f007 fd6c 	bl	8010ed0 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID, 0);
 80093f8:	2100      	movs	r1, #0
 80093fa:	2000      	movs	r0, #0
 80093fc:	f007 fd68 	bl	8010ed0 <PIDChangeFlag>
}
 8009400:	e012      	b.n	8009428 <ControlWall+0x218>
				PIDChangeFlag(wall_ctrl_dir, 0);
 8009402:	2100      	movs	r1, #0
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f007 fd63 	bl	8010ed0 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID , 1);
 800940a:	2101      	movs	r1, #1
 800940c:	2000      	movs	r0, #0
 800940e:	f007 fd5f 	bl	8010ed0 <PIDChangeFlag>
}
 8009412:	e009      	b.n	8009428 <ControlWall+0x218>
		else if(Pos.Act == accel)
 8009414:	4b06      	ldr	r3, [pc, #24]	; (8009430 <ControlWall+0x220>)
 8009416:	799b      	ldrb	r3, [r3, #6]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d105      	bne.n	8009428 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 1);
 800941c:	2101      	movs	r1, #1
 800941e:	2000      	movs	r0, #0
 8009420:	f007 fd56 	bl	8010ed0 <PIDChangeFlag>
}
 8009424:	e000      	b.n	8009428 <ControlWall+0x218>
			break;
 8009426:	bf00      	nop
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	20000000 	.word	0x20000000
 8009434:	200004fc 	.word	0x200004fc
 8009438:	20000500 	.word	0x20000500
 800943c:	20000230 	.word	0x20000230

08009440 <WaitStopAndReset>:
//	KeepCounter[LEFT] = INITIAL_PULSE;
//	KeepCounter[RIGHT] = INITIAL_PULSE;
//}

void WaitStopAndReset()
{
 8009440:	b580      	push	{r7, lr}
 8009442:	af00      	add	r7, sp, #0
	Pos.Act = Wait;
 8009444:	4b17      	ldr	r3, [pc, #92]	; (80094a4 <WaitStopAndReset+0x64>)
 8009446:	2204      	movs	r2, #4
 8009448:	719a      	strb	r2, [r3, #6]
	ControlWall();//ベイブレード対策
 800944a:	f7ff fee1 	bl	8009210 <ControlWall>
	do
	{

		//壁制御の更新
		TargetVelocity[BODY] = 0;
 800944e:	4b16      	ldr	r3, [pc, #88]	; (80094a8 <WaitStopAndReset+0x68>)
 8009450:	f04f 0200 	mov.w	r2, #0
 8009454:	609a      	str	r2, [r3, #8]
		Acceleration = 0;
 8009456:	4b15      	ldr	r3, [pc, #84]	; (80094ac <WaitStopAndReset+0x6c>)
 8009458:	f04f 0200 	mov.w	r2, #0
 800945c:	601a      	str	r2, [r3, #0]
		//PIDChangeFlag( D_, 0);
		TargetAngularV = 0;
 800945e:	4b14      	ldr	r3, [pc, #80]	; (80094b0 <WaitStopAndReset+0x70>)
 8009460:	f04f 0200 	mov.w	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
		AngularAcceleration = 0;
 8009466:	4b13      	ldr	r3, [pc, #76]	; (80094b4 <WaitStopAndReset+0x74>)
 8009468:	f04f 0200 	mov.w	r2, #0
 800946c:	601a      	str	r2, [r3, #0]
		//AngularV = 0;
		if(CurrentVelocity[LEFT] > 500)
 800946e:	4b12      	ldr	r3, [pc, #72]	; (80094b8 <WaitStopAndReset+0x78>)
 8009470:	edd3 7a00 	vldr	s15, [r3]
 8009474:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80094bc <WaitStopAndReset+0x7c>
 8009478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800947c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009480:	dd02      	ble.n	8009488 <WaitStopAndReset+0x48>
			printf("回転停止中\r\n");
 8009482:	480f      	ldr	r0, [pc, #60]	; (80094c0 <WaitStopAndReset+0x80>)
 8009484:	f00d ff4a 	bl	801731c <puts>

	}while(CurrentVelocity[BODY] != 0);
 8009488:	4b0b      	ldr	r3, [pc, #44]	; (80094b8 <WaitStopAndReset+0x78>)
 800948a:	edd3 7a02 	vldr	s15, [r3, #8]
 800948e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009496:	d1da      	bne.n	800944e <WaitStopAndReset+0xe>
	HAL_Delay(100);
 8009498:	2064      	movs	r0, #100	; 0x64
 800949a:	f008 f85d 	bl	8011558 <HAL_Delay>
}
 800949e:	bf00      	nop
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20000000 	.word	0x20000000
 80094a8:	200004f0 	.word	0x200004f0
 80094ac:	2000022c 	.word	0x2000022c
 80094b0:	20000500 	.word	0x20000500
 80094b4:	20000230 	.word	0x20000230
 80094b8:	20000530 	.word	0x20000530
 80094bc:	43fa0000 	.word	0x43fa0000
 80094c0:	0801b5f0 	.word	0x0801b5f0
 80094c4:	00000000 	.word	0x00000000

080094c8 <Rotate>:
	//向いた方角を変える
	ChangeCardinal();
	//printf("回転終了\r\n");
}
void Rotate(float deg, float ang_v)
{
 80094c8:	b590      	push	{r4, r7, lr}
 80094ca:	b08d      	sub	sp, #52	; 0x34
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80094d2:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = rotate;
 80094d6:	4bb2      	ldr	r3, [pc, #712]	; (80097a0 <Rotate+0x2d8>)
 80094d8:	2203      	movs	r2, #3
 80094da:	719a      	strb	r2, [r3, #6]
	WallWarn();
 80094dc:	f7ff fe8c 	bl	80091f8 <WallWarn>
	ControlWall(); //壁の読み間違いによる制御方式選択ミスで角加速から抜け出せないか、角度がリセットされている。
 80094e0:	f7ff fe96 	bl	8009210 <ControlWall>
	TargetAngularV = 0;
 80094e4:	4baf      	ldr	r3, [pc, #700]	; (80097a4 <Rotate+0x2dc>)
 80094e6:	f04f 0200 	mov.w	r2, #0
 80094ea:	601a      	str	r2, [r3, #0]
	//加速度が一定。角速度が増加。角速度を積分して角度。角速度の式を作り、角速度を積分して角度を求める等式を立てる。
	//Angle = インテグラル(ang_v(t))dt
	//v = v0+at	|	t=v/a	||		ang_v = ang_v0 + ang_accel *t		||	t = ang_v/ang_accel
	//x=0.5*v*v/a	|	a = 0.5*v*v*/x		||		θ=ang_v0*t+0.5*ang_v^2/ang_accel	||	ang_accel =
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)
	float accel_deg = deg*30/90;
 80094ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80094f0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80094f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80094f8:	eddf 6aab 	vldr	s13, [pc, #684]	; 80097a8 <Rotate+0x2e0>
 80094fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009500:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float const_deg = deg*30/90;
 8009504:	edd7 7a01 	vldr	s15, [r7, #4]
 8009508:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800950c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009510:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80097a8 <Rotate+0x2e0>
 8009514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009518:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float decel_deg = deg*30/90;
 800951c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009520:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8009524:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009528:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80097a8 <Rotate+0x2e0>
 800952c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009530:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float angular_acceleration[3] = {
			64*T1*ang_v*ang_v / (2*accel_deg),
 8009534:	edd7 7a00 	vldr	s15, [r7]
 8009538:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80097ac <Rotate+0x2e4>
 800953c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009540:	edd7 7a00 	vldr	s15, [r7]
 8009544:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009548:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800954c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009550:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float angular_acceleration[3] = {
 8009554:	edc7 7a05 	vstr	s15, [r7, #20]
 8009558:	f04f 0300 	mov.w	r3, #0
 800955c:	61bb      	str	r3, [r7, #24]
			0,
			64*T1*ang_v*ang_v / (2*decel_deg)
 800955e:	edd7 7a00 	vldr	s15, [r7]
 8009562:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80097ac <Rotate+0x2e4>
 8009566:	ee27 7a87 	vmul.f32	s14, s15, s14
 800956a:	edd7 7a00 	vldr	s15, [r7]
 800956e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009572:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009576:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800957a:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float angular_acceleration[3] = {
 800957e:	edc7 7a07 	vstr	s15, [r7, #28]
	};
	float move_angle[3] = {
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8009582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009584:	f7fe ff18 	bl	80083b8 <__aeabi_f2d>
 8009588:	a383      	add	r3, pc, #524	; (adr r3, 8009798 <Rotate+0x2d0>)
 800958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958e:	f7fe ff6b 	bl	8008468 <__aeabi_dmul>
 8009592:	4603      	mov	r3, r0
 8009594:	460c      	mov	r4, r1
 8009596:	4618      	mov	r0, r3
 8009598:	4621      	mov	r1, r4
 800959a:	f04f 0200 	mov.w	r2, #0
 800959e:	4b84      	ldr	r3, [pc, #528]	; (80097b0 <Rotate+0x2e8>)
 80095a0:	f7ff f88c 	bl	80086bc <__aeabi_ddiv>
 80095a4:	4603      	mov	r3, r0
 80095a6:	460c      	mov	r4, r1
 80095a8:	4618      	mov	r0, r3
 80095aa:	4621      	mov	r1, r4
 80095ac:	f7ff fa54 	bl	8008a58 <__aeabi_d2f>
 80095b0:	4603      	mov	r3, r0
	float move_angle[3] = {
 80095b2:	60bb      	str	r3, [r7, #8]
			const_deg * M_PI/ 180,
 80095b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095b6:	f7fe feff 	bl	80083b8 <__aeabi_f2d>
 80095ba:	a377      	add	r3, pc, #476	; (adr r3, 8009798 <Rotate+0x2d0>)
 80095bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c0:	f7fe ff52 	bl	8008468 <__aeabi_dmul>
 80095c4:	4603      	mov	r3, r0
 80095c6:	460c      	mov	r4, r1
 80095c8:	4618      	mov	r0, r3
 80095ca:	4621      	mov	r1, r4
 80095cc:	f04f 0200 	mov.w	r2, #0
 80095d0:	4b77      	ldr	r3, [pc, #476]	; (80097b0 <Rotate+0x2e8>)
 80095d2:	f7ff f873 	bl	80086bc <__aeabi_ddiv>
 80095d6:	4603      	mov	r3, r0
 80095d8:	460c      	mov	r4, r1
 80095da:	4618      	mov	r0, r3
 80095dc:	4621      	mov	r1, r4
 80095de:	f7ff fa3b 	bl	8008a58 <__aeabi_d2f>
 80095e2:	4603      	mov	r3, r0
	float move_angle[3] = {
 80095e4:	60fb      	str	r3, [r7, #12]
			decel_deg * M_PI/ 180,
 80095e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095e8:	f7fe fee6 	bl	80083b8 <__aeabi_f2d>
 80095ec:	a36a      	add	r3, pc, #424	; (adr r3, 8009798 <Rotate+0x2d0>)
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	f7fe ff39 	bl	8008468 <__aeabi_dmul>
 80095f6:	4603      	mov	r3, r0
 80095f8:	460c      	mov	r4, r1
 80095fa:	4618      	mov	r0, r3
 80095fc:	4621      	mov	r1, r4
 80095fe:	f04f 0200 	mov.w	r2, #0
 8009602:	4b6b      	ldr	r3, [pc, #428]	; (80097b0 <Rotate+0x2e8>)
 8009604:	f7ff f85a 	bl	80086bc <__aeabi_ddiv>
 8009608:	4603      	mov	r3, r0
 800960a:	460c      	mov	r4, r1
 800960c:	4618      	mov	r0, r3
 800960e:	4621      	mov	r1, r4
 8009610:	f7ff fa22 	bl	8008a58 <__aeabi_d2f>
 8009614:	4603      	mov	r3, r0
	float move_angle[3] = {
 8009616:	613b      	str	r3, [r7, #16]
		}

	}
#endif

	if( ang_v > 0)	//右回転
 8009618:	edd7 7a00 	vldr	s15, [r7]
 800961c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009624:	dd57      	ble.n	80096d6 <Rotate+0x20e>
	{
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009626:	ed97 7a02 	vldr	s14, [r7, #8]
 800962a:	4b62      	ldr	r3, [pc, #392]	; (80097b4 <Rotate+0x2ec>)
 800962c:	edd3 7a00 	vldr	s15, [r3]
 8009630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009634:	4b5f      	ldr	r3, [pc, #380]	; (80097b4 <Rotate+0x2ec>)
 8009636:	edc3 7a00 	vstr	s15, [r3]

		//ここのwhileが抜けないことがある
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800963a:	e002      	b.n	8009642 <Rotate+0x17a>
		{
			AngularAcceleration = angular_acceleration[0]; //ここまで
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	4a5e      	ldr	r2, [pc, #376]	; (80097b8 <Rotate+0x2f0>)
 8009640:	6013      	str	r3, [r2, #0]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009642:	4b5c      	ldr	r3, [pc, #368]	; (80097b4 <Rotate+0x2ec>)
 8009644:	ed93 7a00 	vldr	s14, [r3]
 8009648:	4b5c      	ldr	r3, [pc, #368]	; (80097bc <Rotate+0x2f4>)
 800964a:	edd3 7a00 	vldr	s15, [r3]
 800964e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009656:	dcf1      	bgt.n	800963c <Rotate+0x174>
		}
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009658:	ed97 7a03 	vldr	s14, [r7, #12]
 800965c:	4b55      	ldr	r3, [pc, #340]	; (80097b4 <Rotate+0x2ec>)
 800965e:	edd3 7a00 	vldr	s15, [r3]
 8009662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009666:	4b53      	ldr	r3, [pc, #332]	; (80097b4 <Rotate+0x2ec>)
 8009668:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle > Angle)
 800966c:	e002      	b.n	8009674 <Rotate+0x1ac>
		{
			AngularAcceleration = angular_acceleration[1];//0
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	4a51      	ldr	r2, [pc, #324]	; (80097b8 <Rotate+0x2f0>)
 8009672:	6013      	str	r3, [r2, #0]
		while(TargetAngle > Angle)
 8009674:	4b4f      	ldr	r3, [pc, #316]	; (80097b4 <Rotate+0x2ec>)
 8009676:	ed93 7a00 	vldr	s14, [r3]
 800967a:	4b50      	ldr	r3, [pc, #320]	; (80097bc <Rotate+0x2f4>)
 800967c:	edd3 7a00 	vldr	s15, [r3]
 8009680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009688:	dcf1      	bgt.n	800966e <Rotate+0x1a6>
		}
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800968a:	ed97 7a04 	vldr	s14, [r7, #16]
 800968e:	4b49      	ldr	r3, [pc, #292]	; (80097b4 <Rotate+0x2ec>)
 8009690:	edd3 7a00 	vldr	s15, [r3]
 8009694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009698:	4b46      	ldr	r3, [pc, #280]	; (80097b4 <Rotate+0x2ec>)
 800969a:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle > Angle)
 800969e:	e00e      	b.n	80096be <Rotate+0x1f6>
		{
			 AngularAcceleration = -angular_acceleration[2];
 80096a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80096a4:	eef1 7a67 	vneg.f32	s15, s15
 80096a8:	4b43      	ldr	r3, [pc, #268]	; (80097b8 <Rotate+0x2f0>)
 80096aa:	edc3 7a00 	vstr	s15, [r3]
			 if( AngularV <= 0)
 80096ae:	4b44      	ldr	r3, [pc, #272]	; (80097c0 <Rotate+0x2f8>)
 80096b0:	edd3 7a00 	vldr	s15, [r3]
 80096b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096bc:	d96a      	bls.n	8009794 <Rotate+0x2cc>
		while(TargetAngle > Angle)
 80096be:	4b3d      	ldr	r3, [pc, #244]	; (80097b4 <Rotate+0x2ec>)
 80096c0:	ed93 7a00 	vldr	s14, [r3]
 80096c4:	4b3d      	ldr	r3, [pc, #244]	; (80097bc <Rotate+0x2f4>)
 80096c6:	edd3 7a00 	vldr	s15, [r3]
 80096ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80096ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d2:	dce5      	bgt.n	80096a0 <Rotate+0x1d8>
 80096d4:	e077      	b.n	80097c6 <Rotate+0x2fe>
				 break;
			 }
		}

	}
	else if( ang_v < 0)
 80096d6:	edd7 7a00 	vldr	s15, [r7]
 80096da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e2:	d570      	bpl.n	80097c6 <Rotate+0x2fe>
	{
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80096e4:	4b33      	ldr	r3, [pc, #204]	; (80097b4 <Rotate+0x2ec>)
 80096e6:	ed93 7a00 	vldr	s14, [r3]
 80096ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80096ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096f2:	4b30      	ldr	r3, [pc, #192]	; (80097b4 <Rotate+0x2ec>)
 80096f4:	edc3 7a00 	vstr	s15, [r3]

		//ここのwhileが抜けないことがある
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 80096f8:	e006      	b.n	8009708 <Rotate+0x240>
		{
			AngularAcceleration = -angular_acceleration[0]; //ここまで
 80096fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80096fe:	eef1 7a67 	vneg.f32	s15, s15
 8009702:	4b2d      	ldr	r3, [pc, #180]	; (80097b8 <Rotate+0x2f0>)
 8009704:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009708:	4b2a      	ldr	r3, [pc, #168]	; (80097b4 <Rotate+0x2ec>)
 800970a:	ed93 7a00 	vldr	s14, [r3]
 800970e:	4b2b      	ldr	r3, [pc, #172]	; (80097bc <Rotate+0x2f4>)
 8009710:	edd3 7a00 	vldr	s15, [r3]
 8009714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971c:	d4ed      	bmi.n	80096fa <Rotate+0x232>
		}
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800971e:	4b25      	ldr	r3, [pc, #148]	; (80097b4 <Rotate+0x2ec>)
 8009720:	ed93 7a00 	vldr	s14, [r3]
 8009724:	edd7 7a03 	vldr	s15, [r7, #12]
 8009728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800972c:	4b21      	ldr	r3, [pc, #132]	; (80097b4 <Rotate+0x2ec>)
 800972e:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle < Angle)
 8009732:	e002      	b.n	800973a <Rotate+0x272>
		{
			AngularAcceleration = angular_acceleration[1];//0
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	4a20      	ldr	r2, [pc, #128]	; (80097b8 <Rotate+0x2f0>)
 8009738:	6013      	str	r3, [r2, #0]
		while(TargetAngle < Angle)
 800973a:	4b1e      	ldr	r3, [pc, #120]	; (80097b4 <Rotate+0x2ec>)
 800973c:	ed93 7a00 	vldr	s14, [r3]
 8009740:	4b1e      	ldr	r3, [pc, #120]	; (80097bc <Rotate+0x2f4>)
 8009742:	edd3 7a00 	vldr	s15, [r3]
 8009746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800974a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800974e:	d4f1      	bmi.n	8009734 <Rotate+0x26c>
		}
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009750:	4b18      	ldr	r3, [pc, #96]	; (80097b4 <Rotate+0x2ec>)
 8009752:	ed93 7a00 	vldr	s14, [r3]
 8009756:	edd7 7a04 	vldr	s15, [r7, #16]
 800975a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800975e:	4b15      	ldr	r3, [pc, #84]	; (80097b4 <Rotate+0x2ec>)
 8009760:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle < Angle)
 8009764:	e00a      	b.n	800977c <Rotate+0x2b4>
		{
			 AngularAcceleration = angular_acceleration[2];
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	4a13      	ldr	r2, [pc, #76]	; (80097b8 <Rotate+0x2f0>)
 800976a:	6013      	str	r3, [r2, #0]
			 if( AngularV >= 0)
 800976c:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <Rotate+0x2f8>)
 800976e:	edd3 7a00 	vldr	s15, [r3]
 8009772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800977a:	da23      	bge.n	80097c4 <Rotate+0x2fc>
		while(TargetAngle < Angle)
 800977c:	4b0d      	ldr	r3, [pc, #52]	; (80097b4 <Rotate+0x2ec>)
 800977e:	ed93 7a00 	vldr	s14, [r3]
 8009782:	4b0e      	ldr	r3, [pc, #56]	; (80097bc <Rotate+0x2f4>)
 8009784:	edd3 7a00 	vldr	s15, [r3]
 8009788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800978c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009790:	d4e9      	bmi.n	8009766 <Rotate+0x29e>
 8009792:	e018      	b.n	80097c6 <Rotate+0x2fe>
				 break;
 8009794:	bf00      	nop
 8009796:	e016      	b.n	80097c6 <Rotate+0x2fe>
 8009798:	54442d18 	.word	0x54442d18
 800979c:	400921fb 	.word	0x400921fb
 80097a0:	20000000 	.word	0x20000000
 80097a4:	20000500 	.word	0x20000500
 80097a8:	42b40000 	.word	0x42b40000
 80097ac:	3d83126f 	.word	0x3d83126f
 80097b0:	40668000 	.word	0x40668000
 80097b4:	2000051c 	.word	0x2000051c
 80097b8:	20000230 	.word	0x20000230
 80097bc:	20000228 	.word	0x20000228
 80097c0:	20000224 	.word	0x20000224
			 {
			 		break;
 80097c4:	bf00      	nop
			 }
		}

	}
	AngularAcceleration = 0;
 80097c6:	4b32      	ldr	r3, [pc, #200]	; (8009890 <Rotate+0x3c8>)
 80097c8:	f04f 0200 	mov.w	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]
	//TargetAngularV = 0;
	//printf("加速後の角速度 : %f\r\n",AngularV);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",AngularAcceleration);

	WaitStopAndReset();
 80097ce:	f7ff fe37 	bl	8009440 <WaitStopAndReset>
	ControlWall();
 80097d2:	f7ff fd1d 	bl	8009210 <ControlWall>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 80097d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80097da:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8009894 <Rotate+0x3cc>
 80097de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80097e2:	ee16 0a90 	vmov	r0, s13
 80097e6:	f7fe fde7 	bl	80083b8 <__aeabi_f2d>
 80097ea:	a327      	add	r3, pc, #156	; (adr r3, 8009888 <Rotate+0x3c0>)
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	f7fe fe3a 	bl	8008468 <__aeabi_dmul>
 80097f4:	4603      	mov	r3, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	4618      	mov	r0, r3
 80097fa:	4621      	mov	r1, r4
 80097fc:	f7ff f8e4 	bl	80089c8 <__aeabi_d2iz>
 8009800:	4603      	mov	r3, r0
 8009802:	623b      	str	r3, [r7, #32]
	if(ang_v < 0)
 8009804:	edd7 7a00 	vldr	s15, [r7]
 8009808:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800980c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009810:	d513      	bpl.n	800983a <Rotate+0x372>
	{
		KeepPulse[LEFT] -= target_pulse/2;
 8009812:	4b21      	ldr	r3, [pc, #132]	; (8009898 <Rotate+0x3d0>)
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	6a3b      	ldr	r3, [r7, #32]
 8009818:	0fd9      	lsrs	r1, r3, #31
 800981a:	440b      	add	r3, r1
 800981c:	105b      	asrs	r3, r3, #1
 800981e:	425b      	negs	r3, r3
 8009820:	4413      	add	r3, r2
 8009822:	4a1d      	ldr	r2, [pc, #116]	; (8009898 <Rotate+0x3d0>)
 8009824:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 8009826:	4b1c      	ldr	r3, [pc, #112]	; (8009898 <Rotate+0x3d0>)
 8009828:	685a      	ldr	r2, [r3, #4]
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	0fd9      	lsrs	r1, r3, #31
 800982e:	440b      	add	r3, r1
 8009830:	105b      	asrs	r3, r3, #1
 8009832:	4413      	add	r3, r2
 8009834:	4a18      	ldr	r2, [pc, #96]	; (8009898 <Rotate+0x3d0>)
 8009836:	6053      	str	r3, [r2, #4]
 8009838:	e019      	b.n	800986e <Rotate+0x3a6>
	}
	else 	if(ang_v > 0)
 800983a:	edd7 7a00 	vldr	s15, [r7]
 800983e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009846:	dd12      	ble.n	800986e <Rotate+0x3a6>
	{
		KeepPulse[LEFT] += target_pulse/2;
 8009848:	4b13      	ldr	r3, [pc, #76]	; (8009898 <Rotate+0x3d0>)
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	6a3b      	ldr	r3, [r7, #32]
 800984e:	0fd9      	lsrs	r1, r3, #31
 8009850:	440b      	add	r3, r1
 8009852:	105b      	asrs	r3, r3, #1
 8009854:	4413      	add	r3, r2
 8009856:	4a10      	ldr	r2, [pc, #64]	; (8009898 <Rotate+0x3d0>)
 8009858:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 800985a:	4b0f      	ldr	r3, [pc, #60]	; (8009898 <Rotate+0x3d0>)
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	0fd9      	lsrs	r1, r3, #31
 8009862:	440b      	add	r3, r1
 8009864:	105b      	asrs	r3, r3, #1
 8009866:	425b      	negs	r3, r3
 8009868:	4413      	add	r3, r2
 800986a:	4a0b      	ldr	r2, [pc, #44]	; (8009898 <Rotate+0x3d0>)
 800986c:	6053      	str	r3, [r2, #4]
	}
	KeepPulse[BODY] = KeepPulse[BODY];
 800986e:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <Rotate+0x3d0>)
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	4a09      	ldr	r2, [pc, #36]	; (8009898 <Rotate+0x3d0>)
 8009874:	6093      	str	r3, [r2, #8]

	//向いた方角を変える
	ChangeCardinal();
 8009876:	f7ff fc8b 	bl	8009190 <ChangeCardinal>
	//printf("回転終了\r\n");
}
 800987a:	bf00      	nop
 800987c:	3734      	adds	r7, #52	; 0x34
 800987e:	46bd      	mov	sp, r7
 8009880:	bd90      	pop	{r4, r7, pc}
 8009882:	bf00      	nop
 8009884:	f3af 8000 	nop.w
 8009888:	cb326649 	.word	0xcb326649
 800988c:	40fa15d6 	.word	0x40fa15d6
 8009890:	20000230 	.word	0x20000230
 8009894:	43b40000 	.word	0x43b40000
 8009898:	20000558 	.word	0x20000558

0800989c <getFrontWall>:
{

}

int getFrontWall()
{
 800989c:	b480      	push	{r7}
 800989e:	af00      	add	r7, sp, #0

	switch(Pos.Car)//方角に合わせて、
 80098a0:	4b2d      	ldr	r3, [pc, #180]	; (8009958 <getFrontWall+0xbc>)
 80098a2:	795b      	ldrb	r3, [r3, #5]
 80098a4:	2b03      	cmp	r3, #3
 80098a6:	d84f      	bhi.n	8009948 <getFrontWall+0xac>
 80098a8:	a201      	add	r2, pc, #4	; (adr r2, 80098b0 <getFrontWall+0x14>)
 80098aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ae:	bf00      	nop
 80098b0:	080098c1 	.word	0x080098c1
 80098b4:	080098e3 	.word	0x080098e3
 80098b8:	08009905 	.word	0x08009905
 80098bc:	08009927 	.word	0x08009927
	{

	case north:

	return Wall[Pos.X][Pos.Y].north;
 80098c0:	4b25      	ldr	r3, [pc, #148]	; (8009958 <getFrontWall+0xbc>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	4619      	mov	r1, r3
 80098c6:	4b24      	ldr	r3, [pc, #144]	; (8009958 <getFrontWall+0xbc>)
 80098c8:	785b      	ldrb	r3, [r3, #1]
 80098ca:	4618      	mov	r0, r3
 80098cc:	4a23      	ldr	r2, [pc, #140]	; (800995c <getFrontWall+0xc0>)
 80098ce:	460b      	mov	r3, r1
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	440b      	add	r3, r1
 80098d4:	4403      	add	r3, r0
 80098d6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80098da:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	e034      	b.n	800994c <getFrontWall+0xb0>

	break;

	case east:

	return Wall[Pos.X][Pos.Y].east;
 80098e2:	4b1d      	ldr	r3, [pc, #116]	; (8009958 <getFrontWall+0xbc>)
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	4619      	mov	r1, r3
 80098e8:	4b1b      	ldr	r3, [pc, #108]	; (8009958 <getFrontWall+0xbc>)
 80098ea:	785b      	ldrb	r3, [r3, #1]
 80098ec:	4618      	mov	r0, r3
 80098ee:	4a1b      	ldr	r2, [pc, #108]	; (800995c <getFrontWall+0xc0>)
 80098f0:	460b      	mov	r3, r1
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	440b      	add	r3, r1
 80098f6:	4403      	add	r3, r0
 80098f8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80098fc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009900:	b2db      	uxtb	r3, r3
 8009902:	e023      	b.n	800994c <getFrontWall+0xb0>

	break;

	case south:

	return Wall[Pos.X][Pos.Y].south;
 8009904:	4b14      	ldr	r3, [pc, #80]	; (8009958 <getFrontWall+0xbc>)
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	4619      	mov	r1, r3
 800990a:	4b13      	ldr	r3, [pc, #76]	; (8009958 <getFrontWall+0xbc>)
 800990c:	785b      	ldrb	r3, [r3, #1]
 800990e:	4618      	mov	r0, r3
 8009910:	4a12      	ldr	r2, [pc, #72]	; (800995c <getFrontWall+0xc0>)
 8009912:	460b      	mov	r3, r1
 8009914:	00db      	lsls	r3, r3, #3
 8009916:	440b      	add	r3, r1
 8009918:	4403      	add	r3, r0
 800991a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800991e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009922:	b2db      	uxtb	r3, r3
 8009924:	e012      	b.n	800994c <getFrontWall+0xb0>

	break;

	case west:

	return Wall[Pos.X][Pos.Y].west;
 8009926:	4b0c      	ldr	r3, [pc, #48]	; (8009958 <getFrontWall+0xbc>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	4619      	mov	r1, r3
 800992c:	4b0a      	ldr	r3, [pc, #40]	; (8009958 <getFrontWall+0xbc>)
 800992e:	785b      	ldrb	r3, [r3, #1]
 8009930:	4618      	mov	r0, r3
 8009932:	4a0a      	ldr	r2, [pc, #40]	; (800995c <getFrontWall+0xc0>)
 8009934:	460b      	mov	r3, r1
 8009936:	00db      	lsls	r3, r3, #3
 8009938:	440b      	add	r3, r1
 800993a:	4403      	add	r3, r0
 800993c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009940:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009944:	b2db      	uxtb	r3, r3
 8009946:	e001      	b.n	800994c <getFrontWall+0xb0>

	break;

	default:
		return 999;
 8009948:	f240 33e7 	movw	r3, #999	; 0x3e7
	break;

	}

}
 800994c:	4618      	mov	r0, r3
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	20000000 	.word	0x20000000
 800995c:	200006ec 	.word	0x200006ec

08009960 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009960:	b5b0      	push	{r4, r5, r7, lr}
 8009962:	b08a      	sub	sp, #40	; 0x28
 8009964:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 8009966:	4baa      	ldr	r3, [pc, #680]	; (8009c10 <SlalomRight+0x2b0>)
 8009968:	2202      	movs	r2, #2
 800996a:	719a      	strb	r2, [r3, #6]
	ControlWall();
 800996c:	f7ff fc50 	bl	8009210 <ControlWall>
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009970:	4ba8      	ldr	r3, [pc, #672]	; (8009c14 <SlalomRight+0x2b4>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = Sla.Pre;         //スラローム前距離
 8009976:	4ba8      	ldr	r3, [pc, #672]	; (8009c18 <SlalomRight+0x2b8>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	623b      	str	r3, [r7, #32]
	float fol = Sla.Fol;         //スラローム後距離
 800997c:	4ba6      	ldr	r3, [pc, #664]	; (8009c18 <SlalomRight+0x2b8>)
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	61fb      	str	r3, [r7, #28]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 8009982:	4ba5      	ldr	r3, [pc, #660]	; (8009c18 <SlalomRight+0x2b8>)
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	61bb      	str	r3, [r7, #24]
	//float alalpha_turn = Sla.Alalpha;
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009988:	4ba3      	ldr	r3, [pc, #652]	; (8009c18 <SlalomRight+0x2b8>)
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	4618      	mov	r0, r3
 800998e:	f7fe fd13 	bl	80083b8 <__aeabi_f2d>
 8009992:	a39b      	add	r3, pc, #620	; (adr r3, 8009c00 <SlalomRight+0x2a0>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f7fe fd66 	bl	8008468 <__aeabi_dmul>
 800999c:	4603      	mov	r3, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	4618      	mov	r0, r3
 80099a2:	4621      	mov	r1, r4
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	4b9c      	ldr	r3, [pc, #624]	; (8009c1c <SlalomRight+0x2bc>)
 80099aa:	f7fe fe87 	bl	80086bc <__aeabi_ddiv>
 80099ae:	4603      	mov	r3, r0
 80099b0:	460c      	mov	r4, r1
 80099b2:	4618      	mov	r0, r3
 80099b4:	4621      	mov	r1, r4
 80099b6:	f7ff f84f 	bl	8008a58 <__aeabi_d2f>
 80099ba:	4603      	mov	r3, r0
 80099bc:	617b      	str	r3, [r7, #20]
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 80099be:	4b96      	ldr	r3, [pc, #600]	; (8009c18 <SlalomRight+0x2b8>)
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fe fcf8 	bl	80083b8 <__aeabi_f2d>
 80099c8:	a38d      	add	r3, pc, #564	; (adr r3, 8009c00 <SlalomRight+0x2a0>)
 80099ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ce:	f7fe fd4b 	bl	8008468 <__aeabi_dmul>
 80099d2:	4603      	mov	r3, r0
 80099d4:	460c      	mov	r4, r1
 80099d6:	4618      	mov	r0, r3
 80099d8:	4621      	mov	r1, r4
 80099da:	f04f 0200 	mov.w	r2, #0
 80099de:	4b8f      	ldr	r3, [pc, #572]	; (8009c1c <SlalomRight+0x2bc>)
 80099e0:	f7fe fe6c 	bl	80086bc <__aeabi_ddiv>
 80099e4:	4603      	mov	r3, r0
 80099e6:	460c      	mov	r4, r1
 80099e8:	4618      	mov	r0, r3
 80099ea:	4621      	mov	r1, r4
 80099ec:	f7ff f834 	bl	8008a58 <__aeabi_d2f>
 80099f0:	4603      	mov	r3, r0
 80099f2:	613b      	str	r3, [r7, #16]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 80099f4:	4b88      	ldr	r3, [pc, #544]	; (8009c18 <SlalomRight+0x2b8>)
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fe fcdd 	bl	80083b8 <__aeabi_f2d>
 80099fe:	a380      	add	r3, pc, #512	; (adr r3, 8009c00 <SlalomRight+0x2a0>)
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f7fe fd30 	bl	8008468 <__aeabi_dmul>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	4621      	mov	r1, r4
 8009a10:	f04f 0200 	mov.w	r2, #0
 8009a14:	4b81      	ldr	r3, [pc, #516]	; (8009c1c <SlalomRight+0x2bc>)
 8009a16:	f7fe fe51 	bl	80086bc <__aeabi_ddiv>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	4618      	mov	r0, r3
 8009a20:	4621      	mov	r1, r4
 8009a22:	f7ff f819 	bl	8008a58 <__aeabi_d2f>
 8009a26:	4603      	mov	r3, r0
 8009a28:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
 8009a2a:	4b7d      	ldr	r3, [pc, #500]	; (8009c20 <SlalomRight+0x2c0>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	60bb      	str	r3, [r7, #8]
	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009a30:	4b7c      	ldr	r3, [pc, #496]	; (8009c24 <SlalomRight+0x2c4>)
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	4b7b      	ldr	r3, [pc, #492]	; (8009c24 <SlalomRight+0x2c4>)
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	4413      	add	r3, r2
 8009a3a:	607b      	str	r3, [r7, #4]
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 8009a3c:	f7ff ff2e 	bl	800989c <getFrontWall>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d133      	bne.n	8009aae <SlalomRight+0x14e>
	{
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009a46:	e00e      	b.n	8009a66 <SlalomRight+0x106>
		{
			TargetAngularV = 0;
 8009a48:	4b77      	ldr	r3, [pc, #476]	; (8009c28 <SlalomRight+0x2c8>)
 8009a4a:	f04f 0200 	mov.w	r2, #0
 8009a4e:	601a      	str	r2, [r3, #0]
			AngularLeapsity = 0;
 8009a50:	4b76      	ldr	r3, [pc, #472]	; (8009c2c <SlalomRight+0x2cc>)
 8009a52:	f04f 0200 	mov.w	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009a58:	4b75      	ldr	r3, [pc, #468]	; (8009c30 <SlalomRight+0x2d0>)
 8009a5a:	f04f 0200 	mov.w	r2, #0
 8009a5e:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009a60:	4a74      	ldr	r2, [pc, #464]	; (8009c34 <SlalomRight+0x2d4>)
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	6093      	str	r3, [r2, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009a66:	4b74      	ldr	r3, [pc, #464]	; (8009c38 <SlalomRight+0x2d8>)
 8009a68:	edd3 7a00 	vldr	s15, [r3]
 8009a6c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009c3c <SlalomRight+0x2dc>
 8009a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a78:	d4e6      	bmi.n	8009a48 <SlalomRight+0xe8>
 8009a7a:	4b6f      	ldr	r3, [pc, #444]	; (8009c38 <SlalomRight+0x2d8>)
 8009a7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8009a80:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8009c40 <SlalomRight+0x2e0>
 8009a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a8c:	d4dc      	bmi.n	8009a48 <SlalomRight+0xe8>
 8009a8e:	e03b      	b.n	8009b08 <SlalomRight+0x1a8>
	else//なければ
	{
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 8009a90:	4b65      	ldr	r3, [pc, #404]	; (8009c28 <SlalomRight+0x2c8>)
 8009a92:	f04f 0200 	mov.w	r2, #0
 8009a96:	601a      	str	r2, [r3, #0]
				AngularLeapsity = 0;
 8009a98:	4b64      	ldr	r3, [pc, #400]	; (8009c2c <SlalomRight+0x2cc>)
 8009a9a:	f04f 0200 	mov.w	r2, #0
 8009a9e:	601a      	str	r2, [r3, #0]
				AngularAcceleration = 0;
 8009aa0:	4b63      	ldr	r3, [pc, #396]	; (8009c30 <SlalomRight+0x2d0>)
 8009aa2:	f04f 0200 	mov.w	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]
				TargetVelocity[BODY] = v_turn;
 8009aa8:	4a62      	ldr	r2, [pc, #392]	; (8009c34 <SlalomRight+0x2d4>)
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aac:	6093      	str	r3, [r2, #8]
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7fe fc70 	bl	8008394 <__aeabi_i2d>
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	460d      	mov	r5, r1
 8009ab8:	edd7 7a08 	vldr	s15, [r7, #32]
 8009abc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009ac0:	ee17 0a90 	vmov	r0, s15
 8009ac4:	f7fe fc78 	bl	80083b8 <__aeabi_f2d>
 8009ac8:	a34f      	add	r3, pc, #316	; (adr r3, 8009c08 <SlalomRight+0x2a8>)
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f7fe fdf5 	bl	80086bc <__aeabi_ddiv>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	4629      	mov	r1, r5
 8009ada:	f7fe fb0f 	bl	80080fc <__adddf3>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	4625      	mov	r5, r4
 8009ae4:	461c      	mov	r4, r3
 8009ae6:	4b4f      	ldr	r3, [pc, #316]	; (8009c24 <SlalomRight+0x2c4>)
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	4b4e      	ldr	r3, [pc, #312]	; (8009c24 <SlalomRight+0x2c4>)
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	4413      	add	r3, r2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fe fc4f 	bl	8008394 <__aeabi_i2d>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	4620      	mov	r0, r4
 8009afc:	4629      	mov	r1, r5
 8009afe:	f7fe ff43 	bl	8008988 <__aeabi_dcmpgt>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1c3      	bne.n	8009a90 <SlalomRight+0x130>

				////printf("直進1\r\n");
		}
	}
	now_angv = AngularV;
 8009b08:	4b45      	ldr	r3, [pc, #276]	; (8009c20 <SlalomRight+0x2c0>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	60bb      	str	r3, [r7, #8]

	float start_angle = Angle;
 8009b0e:	4b4d      	ldr	r3, [pc, #308]	; (8009c44 <SlalomRight+0x2e4>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	603b      	str	r3, [r7, #0]

	while(start_angle + ang1 > Angle)
 8009b14:	e005      	b.n	8009b22 <SlalomRight+0x1c2>

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
		//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009b16:	4a46      	ldr	r2, [pc, #280]	; (8009c30 <SlalomRight+0x2d0>)
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009b1c:	4a45      	ldr	r2, [pc, #276]	; (8009c34 <SlalomRight+0x2d4>)
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	6093      	str	r3, [r2, #8]
	while(start_angle + ang1 > Angle)
 8009b22:	ed97 7a00 	vldr	s14, [r7]
 8009b26:	edd7 7a05 	vldr	s15, [r7, #20]
 8009b2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b2e:	4b45      	ldr	r3, [pc, #276]	; (8009c44 <SlalomRight+0x2e4>)
 8009b30:	edd3 7a00 	vldr	s15, [r3]
 8009b34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b3c:	dceb      	bgt.n	8009b16 <SlalomRight+0x1b6>
			}
#endif

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009b3e:	4b3c      	ldr	r3, [pc, #240]	; (8009c30 <SlalomRight+0x2d0>)
 8009b40:	f04f 0200 	mov.w	r2, #0
 8009b44:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009b46:	4b39      	ldr	r3, [pc, #228]	; (8009c2c <SlalomRight+0x2cc>)
 8009b48:	f04f 0200 	mov.w	r2, #0
 8009b4c:	601a      	str	r2, [r3, #0]
	now_angv = AngularV;
 8009b4e:	4b34      	ldr	r3, [pc, #208]	; (8009c20 <SlalomRight+0x2c0>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	60bb      	str	r3, [r7, #8]
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 8009b54:	e006      	b.n	8009b64 <SlalomRight+0x204>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009b56:	4b34      	ldr	r3, [pc, #208]	; (8009c28 <SlalomRight+0x2c8>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a33      	ldr	r2, [pc, #204]	; (8009c28 <SlalomRight+0x2c8>)
 8009b5c:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009b5e:	4a35      	ldr	r2, [pc, #212]	; (8009c34 <SlalomRight+0x2d4>)
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	6093      	str	r3, [r2, #8]
	while(start_angle + ang2 > Angle)
 8009b64:	ed97 7a00 	vldr	s14, [r7]
 8009b68:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b70:	4b34      	ldr	r3, [pc, #208]	; (8009c44 <SlalomRight+0x2e4>)
 8009b72:	edd3 7a00 	vldr	s15, [r3]
 8009b76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b7e:	dcea      	bgt.n	8009b56 <SlalomRight+0x1f6>

			}
#endif
	}

	now_angv = AngularV;
 8009b80:	4b27      	ldr	r3, [pc, #156]	; (8009c20 <SlalomRight+0x2c0>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	60bb      	str	r3, [r7, #8]
	while( start_angle + ang3 > Angle)
 8009b86:	e016      	b.n	8009bb6 <SlalomRight+0x256>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 8009b88:	edd7 7a06 	vldr	s15, [r7, #24]
 8009b8c:	eef1 7a67 	vneg.f32	s15, s15
 8009b90:	4b27      	ldr	r3, [pc, #156]	; (8009c30 <SlalomRight+0x2d0>)
 8009b92:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV < 0)
 8009b96:	4b24      	ldr	r3, [pc, #144]	; (8009c28 <SlalomRight+0x2c8>)
 8009b98:	edd3 7a00 	vldr	s15, [r3]
 8009b9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba4:	d504      	bpl.n	8009bb0 <SlalomRight+0x250>
			{
				TargetAngularV = 0;
 8009ba6:	4b20      	ldr	r3, [pc, #128]	; (8009c28 <SlalomRight+0x2c8>)
 8009ba8:	f04f 0200 	mov.w	r2, #0
 8009bac:	601a      	str	r2, [r3, #0]
				break;
 8009bae:	e010      	b.n	8009bd2 <SlalomRight+0x272>
			}
			TargetVelocity[BODY] = v_turn;
 8009bb0:	4a20      	ldr	r2, [pc, #128]	; (8009c34 <SlalomRight+0x2d4>)
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	6093      	str	r3, [r2, #8]
	while( start_angle + ang3 > Angle)
 8009bb6:	ed97 7a00 	vldr	s14, [r7]
 8009bba:	edd7 7a03 	vldr	s15, [r7, #12]
 8009bbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bc2:	4b20      	ldr	r3, [pc, #128]	; (8009c44 <SlalomRight+0x2e4>)
 8009bc4:	edd3 7a00 	vldr	s15, [r3]
 8009bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd0:	dcda      	bgt.n	8009b88 <SlalomRight+0x228>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009bd2:	4b17      	ldr	r3, [pc, #92]	; (8009c30 <SlalomRight+0x2d0>)
 8009bd4:	f04f 0200 	mov.w	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009bda:	4b14      	ldr	r3, [pc, #80]	; (8009c2c <SlalomRight+0x2cc>)
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009be2:	4b11      	ldr	r3, [pc, #68]	; (8009c28 <SlalomRight+0x2c8>)
 8009be4:	f04f 0200 	mov.w	r2, #0
 8009be8:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 8009bea:	4b17      	ldr	r3, [pc, #92]	; (8009c48 <SlalomRight+0x2e8>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a17      	ldr	r2, [pc, #92]	; (8009c4c <SlalomRight+0x2ec>)
 8009bf0:	6013      	str	r3, [r2, #0]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009bf2:	4b0c      	ldr	r3, [pc, #48]	; (8009c24 <SlalomRight+0x2c4>)
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	4b0b      	ldr	r3, [pc, #44]	; (8009c24 <SlalomRight+0x2c4>)
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	607b      	str	r3, [r7, #4]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009bfe:	e03c      	b.n	8009c7a <SlalomRight+0x31a>
 8009c00:	54442d18 	.word	0x54442d18
 8009c04:	400921fb 	.word	0x400921fb
 8009c08:	23ca2666 	.word	0x23ca2666
 8009c0c:	3f509268 	.word	0x3f509268
 8009c10:	20000000 	.word	0x20000000
 8009c14:	20000618 	.word	0x20000618
 8009c18:	2000053c 	.word	0x2000053c
 8009c1c:	40668000 	.word	0x40668000
 8009c20:	20000224 	.word	0x20000224
 8009c24:	20000524 	.word	0x20000524
 8009c28:	20000500 	.word	0x20000500
 8009c2c:	20000234 	.word	0x20000234
 8009c30:	20000230 	.word	0x20000230
 8009c34:	200004f0 	.word	0x200004f0
 8009c38:	20000564 	.word	0x20000564
 8009c3c:	43480000 	.word	0x43480000
 8009c40:	437a0000 	.word	0x437a0000
 8009c44:	20000228 	.word	0x20000228
 8009c48:	20000790 	.word	0x20000790
 8009c4c:	20000794 	.word	0x20000794
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009c50:	4b33      	ldr	r3, [pc, #204]	; (8009d20 <SlalomRight+0x3c0>)
 8009c52:	f04f 0200 	mov.w	r2, #0
 8009c56:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009c58:	4a32      	ldr	r2, [pc, #200]	; (8009d24 <SlalomRight+0x3c4>)
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");

			//後半の直線に入ったら計算する。
			if(Calc == 0)
 8009c5e:	4b32      	ldr	r3, [pc, #200]	; (8009d28 <SlalomRight+0x3c8>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d109      	bne.n	8009c7a <SlalomRight+0x31a>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009c66:	f001 fed9 	bl	800ba1c <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	2107      	movs	r1, #7
 8009c6e:	2007      	movs	r0, #7
 8009c70:	f002 f864 	bl	800bd3c <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 8009c74:	4b2c      	ldr	r3, [pc, #176]	; (8009d28 <SlalomRight+0x3c8>)
 8009c76:	2201      	movs	r2, #1
 8009c78:	601a      	str	r2, [r3, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7fe fb8a 	bl	8008394 <__aeabi_i2d>
 8009c80:	4604      	mov	r4, r0
 8009c82:	460d      	mov	r5, r1
 8009c84:	edd7 7a07 	vldr	s15, [r7, #28]
 8009c88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009c8c:	ee17 0a90 	vmov	r0, s15
 8009c90:	f7fe fb92 	bl	80083b8 <__aeabi_f2d>
 8009c94:	a31e      	add	r3, pc, #120	; (adr r3, 8009d10 <SlalomRight+0x3b0>)
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	f7fe fd0f 	bl	80086bc <__aeabi_ddiv>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	f7fe fa29 	bl	80080fc <__adddf3>
 8009caa:	4603      	mov	r3, r0
 8009cac:	460c      	mov	r4, r1
 8009cae:	4625      	mov	r5, r4
 8009cb0:	461c      	mov	r4, r3
 8009cb2:	4b1e      	ldr	r3, [pc, #120]	; (8009d2c <SlalomRight+0x3cc>)
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	4b1d      	ldr	r3, [pc, #116]	; (8009d2c <SlalomRight+0x3cc>)
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	4413      	add	r3, r2
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fe fb69 	bl	8008394 <__aeabi_i2d>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	4629      	mov	r1, r5
 8009cca:	f7fe fe5d 	bl	8008988 <__aeabi_dcmpgt>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1bd      	bne.n	8009c50 <SlalomRight+0x2f0>
			}
	}
	TargetAngle += 90*M_PI/180;
 8009cd4:	4b16      	ldr	r3, [pc, #88]	; (8009d30 <SlalomRight+0x3d0>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fe fb6d 	bl	80083b8 <__aeabi_f2d>
 8009cde:	a30e      	add	r3, pc, #56	; (adr r3, 8009d18 <SlalomRight+0x3b8>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f7fe fa0a 	bl	80080fc <__adddf3>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	4618      	mov	r0, r3
 8009cee:	4621      	mov	r1, r4
 8009cf0:	f7fe feb2 	bl	8008a58 <__aeabi_d2f>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <SlalomRight+0x3d0>)
 8009cf8:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009cfa:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <SlalomRight+0x3cc>)
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	4a0d      	ldr	r2, [pc, #52]	; (8009d34 <SlalomRight+0x3d4>)
 8009d00:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009d02:	bf00      	nop
 8009d04:	3728      	adds	r7, #40	; 0x28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bdb0      	pop	{r4, r5, r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	f3af 8000 	nop.w
 8009d10:	23ca2666 	.word	0x23ca2666
 8009d14:	3f509268 	.word	0x3f509268
 8009d18:	54442d18 	.word	0x54442d18
 8009d1c:	3ff921fb 	.word	0x3ff921fb
 8009d20:	20000500 	.word	0x20000500
 8009d24:	200004f0 	.word	0x200004f0
 8009d28:	20000794 	.word	0x20000794
 8009d2c:	20000524 	.word	0x20000524
 8009d30:	2000051c 	.word	0x2000051c
 8009d34:	20000558 	.word	0x20000558

08009d38 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009d38:	b5b0      	push	{r4, r5, r7, lr}
 8009d3a:	b08a      	sub	sp, #40	; 0x28
 8009d3c:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 8009d3e:	4ba4      	ldr	r3, [pc, #656]	; (8009fd0 <SlalomLeft+0x298>)
 8009d40:	2202      	movs	r2, #2
 8009d42:	719a      	strb	r2, [r3, #6]
	ControlWall();
 8009d44:	f7ff fa64 	bl	8009210 <ControlWall>
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009d48:	4ba2      	ldr	r3, [pc, #648]	; (8009fd4 <SlalomLeft+0x29c>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = Sla.Pre;         //スラローム前距離
 8009d4e:	4ba2      	ldr	r3, [pc, #648]	; (8009fd8 <SlalomLeft+0x2a0>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	623b      	str	r3, [r7, #32]
	float fol = Sla.Fol;         //スラローム後距離
 8009d54:	4ba0      	ldr	r3, [pc, #640]	; (8009fd8 <SlalomLeft+0x2a0>)
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	61fb      	str	r3, [r7, #28]
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 8009d5a:	4b9f      	ldr	r3, [pc, #636]	; (8009fd8 <SlalomLeft+0x2a0>)
 8009d5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8009d60:	eef1 7a67 	vneg.f32	s15, s15
 8009d64:	edc7 7a06 	vstr	s15, [r7, #24]
	//float alalpha_turn = -Sla.Alalpha;
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009d68:	4b9b      	ldr	r3, [pc, #620]	; (8009fd8 <SlalomLeft+0x2a0>)
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fe fb23 	bl	80083b8 <__aeabi_f2d>
 8009d72:	a393      	add	r3, pc, #588	; (adr r3, 8009fc0 <SlalomLeft+0x288>)
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	f7fe fb76 	bl	8008468 <__aeabi_dmul>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	4618      	mov	r0, r3
 8009d82:	4621      	mov	r1, r4
 8009d84:	f04f 0200 	mov.w	r2, #0
 8009d88:	4b94      	ldr	r3, [pc, #592]	; (8009fdc <SlalomLeft+0x2a4>)
 8009d8a:	f7fe fc97 	bl	80086bc <__aeabi_ddiv>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	460c      	mov	r4, r1
 8009d92:	4618      	mov	r0, r3
 8009d94:	4621      	mov	r1, r4
 8009d96:	f7fe fe5f 	bl	8008a58 <__aeabi_d2f>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	617b      	str	r3, [r7, #20]
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 8009d9e:	4b8e      	ldr	r3, [pc, #568]	; (8009fd8 <SlalomLeft+0x2a0>)
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fe fb08 	bl	80083b8 <__aeabi_f2d>
 8009da8:	a385      	add	r3, pc, #532	; (adr r3, 8009fc0 <SlalomLeft+0x288>)
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	f7fe fb5b 	bl	8008468 <__aeabi_dmul>
 8009db2:	4603      	mov	r3, r0
 8009db4:	460c      	mov	r4, r1
 8009db6:	4618      	mov	r0, r3
 8009db8:	4621      	mov	r1, r4
 8009dba:	f04f 0200 	mov.w	r2, #0
 8009dbe:	4b87      	ldr	r3, [pc, #540]	; (8009fdc <SlalomLeft+0x2a4>)
 8009dc0:	f7fe fc7c 	bl	80086bc <__aeabi_ddiv>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	4618      	mov	r0, r3
 8009dca:	4621      	mov	r1, r4
 8009dcc:	f7fe fe44 	bl	8008a58 <__aeabi_d2f>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	613b      	str	r3, [r7, #16]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009dd4:	4b80      	ldr	r3, [pc, #512]	; (8009fd8 <SlalomLeft+0x2a0>)
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fe faed 	bl	80083b8 <__aeabi_f2d>
 8009dde:	a378      	add	r3, pc, #480	; (adr r3, 8009fc0 <SlalomLeft+0x288>)
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	f7fe fb40 	bl	8008468 <__aeabi_dmul>
 8009de8:	4603      	mov	r3, r0
 8009dea:	460c      	mov	r4, r1
 8009dec:	4618      	mov	r0, r3
 8009dee:	4621      	mov	r1, r4
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	4b79      	ldr	r3, [pc, #484]	; (8009fdc <SlalomLeft+0x2a4>)
 8009df6:	f7fe fc61 	bl	80086bc <__aeabi_ddiv>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	4618      	mov	r0, r3
 8009e00:	4621      	mov	r1, r4
 8009e02:	f7fe fe29 	bl	8008a58 <__aeabi_d2f>
 8009e06:	4603      	mov	r3, r0
 8009e08:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009e0a:	4b75      	ldr	r3, [pc, #468]	; (8009fe0 <SlalomLeft+0x2a8>)
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	4b74      	ldr	r3, [pc, #464]	; (8009fe0 <SlalomLeft+0x2a8>)
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	4413      	add	r3, r2
 8009e14:	60bb      	str	r3, [r7, #8]
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 8009e16:	f7ff fd41 	bl	800989c <getFrontWall>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d12f      	bne.n	8009e80 <SlalomLeft+0x148>
	{
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009e20:	e00e      	b.n	8009e40 <SlalomLeft+0x108>
		{
			TargetAngularV = 0;
 8009e22:	4b70      	ldr	r3, [pc, #448]	; (8009fe4 <SlalomLeft+0x2ac>)
 8009e24:	f04f 0200 	mov.w	r2, #0
 8009e28:	601a      	str	r2, [r3, #0]
			AngularLeapsity = 0;
 8009e2a:	4b6f      	ldr	r3, [pc, #444]	; (8009fe8 <SlalomLeft+0x2b0>)
 8009e2c:	f04f 0200 	mov.w	r2, #0
 8009e30:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009e32:	4b6e      	ldr	r3, [pc, #440]	; (8009fec <SlalomLeft+0x2b4>)
 8009e34:	f04f 0200 	mov.w	r2, #0
 8009e38:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009e3a:	4a6d      	ldr	r2, [pc, #436]	; (8009ff0 <SlalomLeft+0x2b8>)
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	6093      	str	r3, [r2, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009e40:	4b6c      	ldr	r3, [pc, #432]	; (8009ff4 <SlalomLeft+0x2bc>)
 8009e42:	edd3 7a00 	vldr	s15, [r3]
 8009e46:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8009ff8 <SlalomLeft+0x2c0>
 8009e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e52:	d4e6      	bmi.n	8009e22 <SlalomLeft+0xea>
 8009e54:	4b67      	ldr	r3, [pc, #412]	; (8009ff4 <SlalomLeft+0x2bc>)
 8009e56:	edd3 7a03 	vldr	s15, [r3, #12]
 8009e5a:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8009ffc <SlalomLeft+0x2c4>
 8009e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e66:	d4dc      	bmi.n	8009e22 <SlalomLeft+0xea>
 8009e68:	e037      	b.n	8009eda <SlalomLeft+0x1a2>
	else//なければ
	{
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 8009e6a:	4b5e      	ldr	r3, [pc, #376]	; (8009fe4 <SlalomLeft+0x2ac>)
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]
				AngularAcceleration = 0;
 8009e72:	4b5e      	ldr	r3, [pc, #376]	; (8009fec <SlalomLeft+0x2b4>)
 8009e74:	f04f 0200 	mov.w	r2, #0
 8009e78:	601a      	str	r2, [r3, #0]
				TargetVelocity[BODY] = v_turn;
 8009e7a:	4a5d      	ldr	r2, [pc, #372]	; (8009ff0 <SlalomLeft+0x2b8>)
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	6093      	str	r3, [r2, #8]
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009e80:	68b8      	ldr	r0, [r7, #8]
 8009e82:	f7fe fa87 	bl	8008394 <__aeabi_i2d>
 8009e86:	4604      	mov	r4, r0
 8009e88:	460d      	mov	r5, r1
 8009e8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8009e8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009e92:	ee17 0a90 	vmov	r0, s15
 8009e96:	f7fe fa8f 	bl	80083b8 <__aeabi_f2d>
 8009e9a:	a34b      	add	r3, pc, #300	; (adr r3, 8009fc8 <SlalomLeft+0x290>)
 8009e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea0:	f7fe fc0c 	bl	80086bc <__aeabi_ddiv>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	4629      	mov	r1, r5
 8009eac:	f7fe f926 	bl	80080fc <__adddf3>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	4625      	mov	r5, r4
 8009eb6:	461c      	mov	r4, r3
 8009eb8:	4b49      	ldr	r3, [pc, #292]	; (8009fe0 <SlalomLeft+0x2a8>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	4b48      	ldr	r3, [pc, #288]	; (8009fe0 <SlalomLeft+0x2a8>)
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fe fa66 	bl	8008394 <__aeabi_i2d>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4620      	mov	r0, r4
 8009ece:	4629      	mov	r1, r5
 8009ed0:	f7fe fd5a 	bl	8008988 <__aeabi_dcmpgt>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1c7      	bne.n	8009e6a <SlalomLeft+0x132>
				////printf("直進1\r\n");
		}
	}


	float start_angle = Angle;
 8009eda:	4b49      	ldr	r3, [pc, #292]	; (800a000 <SlalomLeft+0x2c8>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	607b      	str	r3, [r7, #4]
	while(start_angle - ang1 < Angle)
 8009ee0:	e005      	b.n	8009eee <SlalomLeft+0x1b6>

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009ee2:	4a42      	ldr	r2, [pc, #264]	; (8009fec <SlalomLeft+0x2b4>)
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009ee8:	4a41      	ldr	r2, [pc, #260]	; (8009ff0 <SlalomLeft+0x2b8>)
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	6093      	str	r3, [r2, #8]
	while(start_angle - ang1 < Angle)
 8009eee:	ed97 7a01 	vldr	s14, [r7, #4]
 8009ef2:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ef6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009efa:	4b41      	ldr	r3, [pc, #260]	; (800a000 <SlalomLeft+0x2c8>)
 8009efc:	edd3 7a00 	vldr	s15, [r3]
 8009f00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f08:	d4eb      	bmi.n	8009ee2 <SlalomLeft+0x1aa>

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009f0a:	4b38      	ldr	r3, [pc, #224]	; (8009fec <SlalomLeft+0x2b4>)
 8009f0c:	f04f 0200 	mov.w	r2, #0
 8009f10:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009f12:	4b35      	ldr	r3, [pc, #212]	; (8009fe8 <SlalomLeft+0x2b0>)
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle - ang2 < Angle)
 8009f1a:	e006      	b.n	8009f2a <SlalomLeft+0x1f2>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009f1c:	4b31      	ldr	r3, [pc, #196]	; (8009fe4 <SlalomLeft+0x2ac>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a30      	ldr	r2, [pc, #192]	; (8009fe4 <SlalomLeft+0x2ac>)
 8009f22:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009f24:	4a32      	ldr	r2, [pc, #200]	; (8009ff0 <SlalomLeft+0x2b8>)
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f28:	6093      	str	r3, [r2, #8]
	while(start_angle - ang2 < Angle)
 8009f2a:	ed97 7a01 	vldr	s14, [r7, #4]
 8009f2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009f32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f36:	4b32      	ldr	r3, [pc, #200]	; (800a000 <SlalomLeft+0x2c8>)
 8009f38:	edd3 7a00 	vldr	s15, [r3]
 8009f3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f44:	d4ea      	bmi.n	8009f1c <SlalomLeft+0x1e4>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < Angle)
 8009f46:	e016      	b.n	8009f76 <SlalomLeft+0x23e>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 8009f48:	edd7 7a06 	vldr	s15, [r7, #24]
 8009f4c:	eef1 7a67 	vneg.f32	s15, s15
 8009f50:	4b26      	ldr	r3, [pc, #152]	; (8009fec <SlalomLeft+0x2b4>)
 8009f52:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV > 0)
 8009f56:	4b23      	ldr	r3, [pc, #140]	; (8009fe4 <SlalomLeft+0x2ac>)
 8009f58:	edd3 7a00 	vldr	s15, [r3]
 8009f5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f64:	dd04      	ble.n	8009f70 <SlalomLeft+0x238>
			{
				TargetAngularV = 0;
 8009f66:	4b1f      	ldr	r3, [pc, #124]	; (8009fe4 <SlalomLeft+0x2ac>)
 8009f68:	f04f 0200 	mov.w	r2, #0
 8009f6c:	601a      	str	r2, [r3, #0]
				break;
 8009f6e:	e010      	b.n	8009f92 <SlalomLeft+0x25a>
			}
			TargetVelocity[BODY] = v_turn;
 8009f70:	4a1f      	ldr	r2, [pc, #124]	; (8009ff0 <SlalomLeft+0x2b8>)
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	6093      	str	r3, [r2, #8]
	while( start_angle - ang3 < Angle)
 8009f76:	ed97 7a01 	vldr	s14, [r7, #4]
 8009f7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f82:	4b1f      	ldr	r3, [pc, #124]	; (800a000 <SlalomLeft+0x2c8>)
 8009f84:	edd3 7a00 	vldr	s15, [r3]
 8009f88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f90:	d4da      	bmi.n	8009f48 <SlalomLeft+0x210>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009f92:	4b16      	ldr	r3, [pc, #88]	; (8009fec <SlalomLeft+0x2b4>)
 8009f94:	f04f 0200 	mov.w	r2, #0
 8009f98:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009f9a:	4b13      	ldr	r3, [pc, #76]	; (8009fe8 <SlalomLeft+0x2b0>)
 8009f9c:	f04f 0200 	mov.w	r2, #0
 8009fa0:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009fa2:	4b10      	ldr	r3, [pc, #64]	; (8009fe4 <SlalomLeft+0x2ac>)
 8009fa4:	f04f 0200 	mov.w	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 8009faa:	4b16      	ldr	r3, [pc, #88]	; (800a004 <SlalomLeft+0x2cc>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a16      	ldr	r2, [pc, #88]	; (800a008 <SlalomLeft+0x2d0>)
 8009fb0:	6013      	str	r3, [r2, #0]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009fb2:	4b0b      	ldr	r3, [pc, #44]	; (8009fe0 <SlalomLeft+0x2a8>)
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	4b0a      	ldr	r3, [pc, #40]	; (8009fe0 <SlalomLeft+0x2a8>)
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	4413      	add	r3, r2
 8009fbc:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009fbe:	e03a      	b.n	800a036 <SlalomLeft+0x2fe>
 8009fc0:	54442d18 	.word	0x54442d18
 8009fc4:	400921fb 	.word	0x400921fb
 8009fc8:	23ca2666 	.word	0x23ca2666
 8009fcc:	3f509268 	.word	0x3f509268
 8009fd0:	20000000 	.word	0x20000000
 8009fd4:	20000618 	.word	0x20000618
 8009fd8:	2000053c 	.word	0x2000053c
 8009fdc:	40668000 	.word	0x40668000
 8009fe0:	20000524 	.word	0x20000524
 8009fe4:	20000500 	.word	0x20000500
 8009fe8:	20000234 	.word	0x20000234
 8009fec:	20000230 	.word	0x20000230
 8009ff0:	200004f0 	.word	0x200004f0
 8009ff4:	20000564 	.word	0x20000564
 8009ff8:	43480000 	.word	0x43480000
 8009ffc:	437a0000 	.word	0x437a0000
 800a000:	20000228 	.word	0x20000228
 800a004:	20000790 	.word	0x20000790
 800a008:	20000794 	.word	0x20000794
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 800a00c:	4b32      	ldr	r3, [pc, #200]	; (800a0d8 <SlalomLeft+0x3a0>)
 800a00e:	f04f 0200 	mov.w	r2, #0
 800a012:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 800a014:	4a31      	ldr	r2, [pc, #196]	; (800a0dc <SlalomLeft+0x3a4>)
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");
			if(Calc == 0)
 800a01a:	4b31      	ldr	r3, [pc, #196]	; (800a0e0 <SlalomLeft+0x3a8>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d109      	bne.n	800a036 <SlalomLeft+0x2fe>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 800a022:	f001 fcfb 	bl	800ba1c <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 800a026:	2201      	movs	r2, #1
 800a028:	2107      	movs	r1, #7
 800a02a:	2007      	movs	r0, #7
 800a02c:	f001 fe86 	bl	800bd3c <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 800a030:	4b2b      	ldr	r3, [pc, #172]	; (800a0e0 <SlalomLeft+0x3a8>)
 800a032:	2201      	movs	r2, #1
 800a034:	601a      	str	r2, [r3, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800a036:	68b8      	ldr	r0, [r7, #8]
 800a038:	f7fe f9ac 	bl	8008394 <__aeabi_i2d>
 800a03c:	4604      	mov	r4, r0
 800a03e:	460d      	mov	r5, r1
 800a040:	edd7 7a07 	vldr	s15, [r7, #28]
 800a044:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a048:	ee17 0a90 	vmov	r0, s15
 800a04c:	f7fe f9b4 	bl	80083b8 <__aeabi_f2d>
 800a050:	a31d      	add	r3, pc, #116	; (adr r3, 800a0c8 <SlalomLeft+0x390>)
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	f7fe fb31 	bl	80086bc <__aeabi_ddiv>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	4620      	mov	r0, r4
 800a060:	4629      	mov	r1, r5
 800a062:	f7fe f84b 	bl	80080fc <__adddf3>
 800a066:	4603      	mov	r3, r0
 800a068:	460c      	mov	r4, r1
 800a06a:	4625      	mov	r5, r4
 800a06c:	461c      	mov	r4, r3
 800a06e:	4b1d      	ldr	r3, [pc, #116]	; (800a0e4 <SlalomLeft+0x3ac>)
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	4b1c      	ldr	r3, [pc, #112]	; (800a0e4 <SlalomLeft+0x3ac>)
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	4413      	add	r3, r2
 800a078:	4618      	mov	r0, r3
 800a07a:	f7fe f98b 	bl	8008394 <__aeabi_i2d>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	4620      	mov	r0, r4
 800a084:	4629      	mov	r1, r5
 800a086:	f7fe fc7f 	bl	8008988 <__aeabi_dcmpgt>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1bd      	bne.n	800a00c <SlalomLeft+0x2d4>
			}
	}
	TargetAngle += -90*M_PI/180;
 800a090:	4b15      	ldr	r3, [pc, #84]	; (800a0e8 <SlalomLeft+0x3b0>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4618      	mov	r0, r3
 800a096:	f7fe f98f 	bl	80083b8 <__aeabi_f2d>
 800a09a:	a30d      	add	r3, pc, #52	; (adr r3, 800a0d0 <SlalomLeft+0x398>)
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	f7fe f82a 	bl	80080f8 <__aeabi_dsub>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	f7fe fcd4 	bl	8008a58 <__aeabi_d2f>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	4b0d      	ldr	r3, [pc, #52]	; (800a0e8 <SlalomLeft+0x3b0>)
 800a0b4:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 800a0b6:	4b0b      	ldr	r3, [pc, #44]	; (800a0e4 <SlalomLeft+0x3ac>)
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	4a0c      	ldr	r2, [pc, #48]	; (800a0ec <SlalomLeft+0x3b4>)
 800a0bc:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 800a0be:	bf00      	nop
 800a0c0:	3728      	adds	r7, #40	; 0x28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bdb0      	pop	{r4, r5, r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	23ca2666 	.word	0x23ca2666
 800a0cc:	3f509268 	.word	0x3f509268
 800a0d0:	54442d18 	.word	0x54442d18
 800a0d4:	3ff921fb 	.word	0x3ff921fb
 800a0d8:	20000500 	.word	0x20000500
 800a0dc:	200004f0 	.word	0x200004f0
 800a0e0:	20000794 	.word	0x20000794
 800a0e4:	20000524 	.word	0x20000524
 800a0e8:	2000051c 	.word	0x2000051c
 800a0ec:	20000558 	.word	0x20000558

0800a0f0 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
 800a0f0:	b5b0      	push	{r4, r5, r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	ed87 0a01 	vstr	s0, [r7, #4]
 800a0fa:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = accel;
 800a0fe:	4b76      	ldr	r3, [pc, #472]	; (800a2d8 <Accel+0x1e8>)
 800a100:	2200      	movs	r2, #0
 800a102:	719a      	strb	r2, [r3, #6]
	ControlWall();
 800a104:	f7ff f884 	bl	8009210 <ControlWall>
	TargetAngularV = 0;
 800a108:	4b74      	ldr	r3, [pc, #464]	; (800a2dc <Accel+0x1ec>)
 800a10a:	f04f 0200 	mov.w	r2, #0
 800a10e:	601a      	str	r2, [r3, #0]
	float additional_speed=0;
 800a110:	f04f 0300 	mov.w	r3, #0
 800a114:	613b      	str	r3, [r7, #16]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 800a116:	4b72      	ldr	r3, [pc, #456]	; (800a2e0 <Accel+0x1f0>)
 800a118:	edd3 7a02 	vldr	s15, [r3, #8]
 800a11c:	ed97 7a00 	vldr	s14, [r7]
 800a120:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a124:	edc7 7a04 	vstr	s15, [r7, #16]
	//printf("%f,%f,%f\r\n",additional_speed,explore_speed,CurrentVelocity[BODY]);
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulse[BODY];
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 800a128:	edd7 7a04 	vldr	s15, [r7, #16]
 800a12c:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a2e4 <Accel+0x1f4>
 800a130:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a134:	edd7 7a04 	vldr	s15, [r7, #16]
 800a138:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a13c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a140:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a148:	4b67      	ldr	r3, [pc, #412]	; (800a2e8 <Accel+0x1f8>)
 800a14a:	edc3 7a00 	vstr	s15, [r3]
	WallWarn();
 800a14e:	f7ff f853 	bl	80091f8 <WallWarn>
	//printf("%d, %d\r\n",VelocityLeftOut,VelocityRightOut);
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 800a152:	edd7 7a01 	vldr	s15, [r7, #4]
 800a156:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a15a:	ee17 0a90 	vmov	r0, s15
 800a15e:	f7fe f92b 	bl	80083b8 <__aeabi_f2d>
 800a162:	a359      	add	r3, pc, #356	; (adr r3, 800a2c8 <Accel+0x1d8>)
 800a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a168:	f7fe faa8 	bl	80086bc <__aeabi_ddiv>
 800a16c:	4603      	mov	r3, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	4618      	mov	r0, r3
 800a172:	4621      	mov	r1, r4
 800a174:	f7fe fc28 	bl	80089c8 <__aeabi_d2iz>
 800a178:	4603      	mov	r3, r0
 800a17a:	60fb      	str	r3, [r7, #12]
	//printf("target_pulse : %d",target_pulse);
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	Calc = SearchOrFast;//Fastでは1を代入。
 800a17c:	4b5b      	ldr	r3, [pc, #364]	; (800a2ec <Accel+0x1fc>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a5b      	ldr	r2, [pc, #364]	; (800a2f0 <Accel+0x200>)
 800a182:	6013      	str	r3, [r2, #0]
	_Bool wall_cut = false;
 800a184:	2300      	movs	r3, #0
 800a186:	75fb      	strb	r3, [r7, #23]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800a188:	e06e      	b.n	800a268 <Accel+0x178>
	{
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800a18a:	4b5a      	ldr	r3, [pc, #360]	; (800a2f4 <Accel+0x204>)
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe f900 	bl	8008394 <__aeabi_i2d>
 800a194:	4604      	mov	r4, r0
 800a196:	460d      	mov	r5, r1
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f7fe f8fb 	bl	8008394 <__aeabi_i2d>
 800a19e:	a34c      	add	r3, pc, #304	; (adr r3, 800a2d0 <Accel+0x1e0>)
 800a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a4:	f7fe f960 	bl	8008468 <__aeabi_dmul>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	f7fd ffa4 	bl	80080fc <__adddf3>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	4625      	mov	r5, r4
 800a1ba:	461c      	mov	r4, r3
 800a1bc:	4b4e      	ldr	r3, [pc, #312]	; (800a2f8 <Accel+0x208>)
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fe f8e7 	bl	8008394 <__aeabi_i2d>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	f7fe fbbd 	bl	800894c <__aeabi_dcmplt>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d010      	beq.n	800a1fa <Accel+0x10a>
 800a1d8:	4b45      	ldr	r3, [pc, #276]	; (800a2f0 <Accel+0x200>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10c      	bne.n	800a1fa <Accel+0x10a>
		{
			wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 800a1e0:	f001 fc1c 	bl	800ba1c <wall_set>
			//計算して
			make_map(Pos.TargetX, Pos.TargetY, 0x01);
 800a1e4:	4b3c      	ldr	r3, [pc, #240]	; (800a2d8 <Accel+0x1e8>)
 800a1e6:	7898      	ldrb	r0, [r3, #2]
 800a1e8:	4b3b      	ldr	r3, [pc, #236]	; (800a2d8 <Accel+0x1e8>)
 800a1ea:	78db      	ldrb	r3, [r3, #3]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	f001 fda4 	bl	800bd3c <make_map>
			//UpdateWalkMap();
			//次のアクションを渡すのは別のところで。
			Calc = 1;
 800a1f4:	4b3e      	ldr	r3, [pc, #248]	; (800a2f0 <Accel+0x200>)
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	601a      	str	r2, [r3, #0]
		}
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	f083 0301 	eor.w	r3, r3, #1
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b00      	cmp	r3, #0
 800a204:	d030      	beq.n	800a268 <Accel+0x178>
 800a206:	4b3d      	ldr	r3, [pc, #244]	; (800a2fc <Accel+0x20c>)
 800a208:	edd3 7a02 	vldr	s15, [r3, #8]
 800a20c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800a300 <Accel+0x210>
 800a210:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a218:	d40a      	bmi.n	800a230 <Accel+0x140>
 800a21a:	4b38      	ldr	r3, [pc, #224]	; (800a2fc <Accel+0x20c>)
 800a21c:	edd3 7a01 	vldr	s15, [r3, #4]
 800a220:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800a300 <Accel+0x210>
 800a224:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a22c:	d400      	bmi.n	800a230 <Accel+0x140>
 800a22e:	e01b      	b.n	800a268 <Accel+0x178>
		{
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 800a230:	4b30      	ldr	r3, [pc, #192]	; (800a2f4 <Accel+0x204>)
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	ee07 3a90 	vmov	s15, r3
 800a238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	ee07 3a90 	vmov	s15, r3
 800a242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a246:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800a304 <Accel+0x214>
 800a24a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a24e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a256:	ee17 2a90 	vmov	r2, s15
 800a25a:	4b27      	ldr	r3, [pc, #156]	; (800a2f8 <Accel+0x208>)
 800a25c:	609a      	str	r2, [r3, #8]
			//target_pulse = TotalPulse[BODY] -KeepPulse[BODY] + Wall_Cut_Val;
			wall_cut = true;
 800a25e:	2301      	movs	r3, #1
 800a260:	75fb      	strb	r3, [r7, #23]
			ChangeLED(3);
 800a262:	2003      	movs	r0, #3
 800a264:	f006 f89e 	bl	80103a4 <ChangeLED>
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800a268:	4b22      	ldr	r3, [pc, #136]	; (800a2f4 <Accel+0x204>)
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	441a      	add	r2, r3
 800a270:	4b21      	ldr	r3, [pc, #132]	; (800a2f8 <Accel+0x208>)
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	429a      	cmp	r2, r3
 800a276:	dc88      	bgt.n	800a18a <Accel+0x9a>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 800a278:	4b1b      	ldr	r3, [pc, #108]	; (800a2e8 <Accel+0x1f8>)
 800a27a:	f04f 0200 	mov.w	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]
	//壁読んで、
	wall_cut = false;
 800a280:	2300      	movs	r3, #0
 800a282:	75fb      	strb	r3, [r7, #23]
	ChangeLED(0);
 800a284:	2000      	movs	r0, #0
 800a286:	f006 f88d 	bl	80103a4 <ChangeLED>
	KeepPulse[BODY] += target_pulse;
 800a28a:	4b1a      	ldr	r3, [pc, #104]	; (800a2f4 <Accel+0x204>)
 800a28c:	689a      	ldr	r2, [r3, #8]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	4413      	add	r3, r2
 800a292:	4a18      	ldr	r2, [pc, #96]	; (800a2f4 <Accel+0x204>)
 800a294:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a296:	4b17      	ldr	r3, [pc, #92]	; (800a2f4 <Accel+0x204>)
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	0fd9      	lsrs	r1, r3, #31
 800a29e:	440b      	add	r3, r1
 800a2a0:	105b      	asrs	r3, r3, #1
 800a2a2:	4413      	add	r3, r2
 800a2a4:	4a13      	ldr	r2, [pc, #76]	; (800a2f4 <Accel+0x204>)
 800a2a6:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a2a8:	4b12      	ldr	r3, [pc, #72]	; (800a2f4 <Accel+0x204>)
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	0fd9      	lsrs	r1, r3, #31
 800a2b0:	440b      	add	r3, r1
 800a2b2:	105b      	asrs	r3, r3, #1
 800a2b4:	4413      	add	r3, r2
 800a2b6:	4a0f      	ldr	r2, [pc, #60]	; (800a2f4 <Accel+0x204>)
 800a2b8:	6053      	str	r3, [r2, #4]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 800a2ba:	bf00      	nop
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bdb0      	pop	{r4, r5, r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	f3af 8000 	nop.w
 800a2c8:	23ca2666 	.word	0x23ca2666
 800a2cc:	3f509268 	.word	0x3f509268
 800a2d0:	9999999a 	.word	0x9999999a
 800a2d4:	3fe99999 	.word	0x3fe99999
 800a2d8:	20000000 	.word	0x20000000
 800a2dc:	20000500 	.word	0x20000500
 800a2e0:	20000530 	.word	0x20000530
 800a2e4:	3a83126f 	.word	0x3a83126f
 800a2e8:	2000022c 	.word	0x2000022c
 800a2ec:	20000790 	.word	0x20000790
 800a2f0:	20000794 	.word	0x20000794
 800a2f4:	20000558 	.word	0x20000558
 800a2f8:	20000524 	.word	0x20000524
 800a2fc:	20000564 	.word	0x20000564
 800a300:	42480000 	.word	0x42480000
 800a304:	4792c122 	.word	0x4792c122

0800a308 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 800a308:	b5b0      	push	{r4, r5, r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	ed87 0a01 	vstr	s0, [r7, #4]
 800a312:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = decel;
 800a316:	4b68      	ldr	r3, [pc, #416]	; (800a4b8 <Decel+0x1b0>)
 800a318:	2201      	movs	r2, #1
 800a31a:	719a      	strb	r2, [r3, #6]
	//int keep_pulse = TotalPulse[BODY];
	float down_speed=0;
 800a31c:	f04f 0300 	mov.w	r3, #0
 800a320:	60fb      	str	r3, [r7, #12]
	down_speed = CurrentVelocity[BODY] - end_speed;
 800a322:	4b66      	ldr	r3, [pc, #408]	; (800a4bc <Decel+0x1b4>)
 800a324:	ed93 7a02 	vldr	s14, [r3, #8]
 800a328:	edd7 7a00 	vldr	s15, [r7]
 800a32c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a330:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 800a334:	edd7 7a03 	vldr	s15, [r7, #12]
 800a338:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800a4c0 <Decel+0x1b8>
 800a33c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a340:	edd7 7a03 	vldr	s15, [r7, #12]
 800a344:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a348:	edd7 7a01 	vldr	s15, [r7, #4]
 800a34c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a354:	eef1 7a67 	vneg.f32	s15, s15
 800a358:	4b5a      	ldr	r3, [pc, #360]	; (800a4c4 <Decel+0x1bc>)
 800a35a:	edc3 7a00 	vstr	s15, [r3]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	WallSafe();
 800a35e:	f7fe ff3f 	bl	80091e0 <WallSafe>
	ControlWall();
 800a362:	f7fe ff55 	bl	8009210 <ControlWall>
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 800a366:	edd7 7a01 	vldr	s15, [r7, #4]
 800a36a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a36e:	ee17 0a90 	vmov	r0, s15
 800a372:	f7fe f821 	bl	80083b8 <__aeabi_f2d>
 800a376:	a34c      	add	r3, pc, #304	; (adr r3, 800a4a8 <Decel+0x1a0>)
 800a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37c:	f7fe f99e 	bl	80086bc <__aeabi_ddiv>
 800a380:	4603      	mov	r3, r0
 800a382:	460c      	mov	r4, r1
 800a384:	4618      	mov	r0, r3
 800a386:	4621      	mov	r1, r4
 800a388:	f7fe fb1e 	bl	80089c8 <__aeabi_d2iz>
 800a38c:	4603      	mov	r3, r0
 800a38e:	60bb      	str	r3, [r7, #8]
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800a390:	e052      	b.n	800a438 <Decel+0x130>
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocity[BODY] <= 0)
 800a392:	4b4d      	ldr	r3, [pc, #308]	; (800a4c8 <Decel+0x1c0>)
 800a394:	edd3 7a02 	vldr	s15, [r3, #8]
 800a398:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3a0:	d810      	bhi.n	800a3c4 <Decel+0xbc>
		{
			TargetVelocity[BODY] = 0;
 800a3a2:	4b49      	ldr	r3, [pc, #292]	; (800a4c8 <Decel+0x1c0>)
 800a3a4:	f04f 0200 	mov.w	r2, #0
 800a3a8:	609a      	str	r2, [r3, #8]
			Acceleration = 0;
 800a3aa:	4b46      	ldr	r3, [pc, #280]	; (800a4c4 <Decel+0x1bc>)
 800a3ac:	f04f 0200 	mov.w	r2, #0
 800a3b0:	601a      	str	r2, [r3, #0]
			TargetAngularV = 0;
 800a3b2:	4b46      	ldr	r3, [pc, #280]	; (800a4cc <Decel+0x1c4>)
 800a3b4:	f04f 0200 	mov.w	r2, #0
 800a3b8:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 800a3ba:	4b45      	ldr	r3, [pc, #276]	; (800a4d0 <Decel+0x1c8>)
 800a3bc:	f04f 0200 	mov.w	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]
			break;
 800a3c2:	e050      	b.n	800a466 <Decel+0x15e>
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 800a3c4:	4b43      	ldr	r3, [pc, #268]	; (800a4d4 <Decel+0x1cc>)
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fd ffe3 	bl	8008394 <__aeabi_i2d>
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	460d      	mov	r5, r1
 800a3d2:	68b8      	ldr	r0, [r7, #8]
 800a3d4:	f7fd ffde 	bl	8008394 <__aeabi_i2d>
 800a3d8:	a335      	add	r3, pc, #212	; (adr r3, 800a4b0 <Decel+0x1a8>)
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	f7fe f843 	bl	8008468 <__aeabi_dmul>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	f7fd fe87 	bl	80080fc <__adddf3>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	4625      	mov	r5, r4
 800a3f4:	461c      	mov	r4, r3
 800a3f6:	4b38      	ldr	r3, [pc, #224]	; (800a4d8 <Decel+0x1d0>)
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fd ffca 	bl	8008394 <__aeabi_i2d>
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	4620      	mov	r0, r4
 800a406:	4629      	mov	r1, r5
 800a408:	f7fe faa0 	bl	800894c <__aeabi_dcmplt>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d100      	bne.n	800a414 <Decel+0x10c>
 800a412:	e011      	b.n	800a438 <Decel+0x130>
		{
			WallWarn();
 800a414:	f7fe fef0 	bl	80091f8 <WallWarn>
			//ControlWall();
			PIDChangeFlag(L_WALL_PID, 0);
 800a418:	2100      	movs	r1, #0
 800a41a:	2002      	movs	r0, #2
 800a41c:	f006 fd58 	bl	8010ed0 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800a420:	2100      	movs	r1, #0
 800a422:	2003      	movs	r0, #3
 800a424:	f006 fd54 	bl	8010ed0 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800a428:	2100      	movs	r1, #0
 800a42a:	2001      	movs	r0, #1
 800a42c:	f006 fd50 	bl	8010ed0 <PIDChangeFlag>
			PIDChangeFlag( A_VELO_PID , 1);
 800a430:	2101      	movs	r1, #1
 800a432:	2000      	movs	r0, #0
 800a434:	f006 fd4c 	bl	8010ed0 <PIDChangeFlag>
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800a438:	4b28      	ldr	r3, [pc, #160]	; (800a4dc <Decel+0x1d4>)
 800a43a:	ed93 7a03 	vldr	s14, [r3, #12]
 800a43e:	4b27      	ldr	r3, [pc, #156]	; (800a4dc <Decel+0x1d4>)
 800a440:	edd3 7a00 	vldr	s15, [r3]
 800a444:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a448:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800a4e0 <Decel+0x1d8>
 800a44c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a454:	d507      	bpl.n	800a466 <Decel+0x15e>
 800a456:	4b1f      	ldr	r3, [pc, #124]	; (800a4d4 <Decel+0x1cc>)
 800a458:	689a      	ldr	r2, [r3, #8]
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	441a      	add	r2, r3
 800a45e:	4b1e      	ldr	r3, [pc, #120]	; (800a4d8 <Decel+0x1d0>)
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	429a      	cmp	r2, r3
 800a464:	dc95      	bgt.n	800a392 <Decel+0x8a>

		}


	}
	WaitStopAndReset();
 800a466:	f7fe ffeb 	bl	8009440 <WaitStopAndReset>
	KeepPulse[BODY] += target_pulse;
 800a46a:	4b1a      	ldr	r3, [pc, #104]	; (800a4d4 <Decel+0x1cc>)
 800a46c:	689a      	ldr	r2, [r3, #8]
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	4413      	add	r3, r2
 800a472:	4a18      	ldr	r2, [pc, #96]	; (800a4d4 <Decel+0x1cc>)
 800a474:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a476:	4b17      	ldr	r3, [pc, #92]	; (800a4d4 <Decel+0x1cc>)
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	0fd9      	lsrs	r1, r3, #31
 800a47e:	440b      	add	r3, r1
 800a480:	105b      	asrs	r3, r3, #1
 800a482:	4413      	add	r3, r2
 800a484:	4a13      	ldr	r2, [pc, #76]	; (800a4d4 <Decel+0x1cc>)
 800a486:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a488:	4b12      	ldr	r3, [pc, #72]	; (800a4d4 <Decel+0x1cc>)
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	0fd9      	lsrs	r1, r3, #31
 800a490:	440b      	add	r3, r1
 800a492:	105b      	asrs	r3, r3, #1
 800a494:	4413      	add	r3, r2
 800a496:	4a0f      	ldr	r2, [pc, #60]	; (800a4d4 <Decel+0x1cc>)
 800a498:	6053      	str	r3, [r2, #4]


}
 800a49a:	bf00      	nop
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bdb0      	pop	{r4, r5, r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	f3af 8000 	nop.w
 800a4a8:	23ca2666 	.word	0x23ca2666
 800a4ac:	3f509268 	.word	0x3f509268
 800a4b0:	cccccccd 	.word	0xcccccccd
 800a4b4:	3fe4cccc 	.word	0x3fe4cccc
 800a4b8:	20000000 	.word	0x20000000
 800a4bc:	20000530 	.word	0x20000530
 800a4c0:	3a83126f 	.word	0x3a83126f
 800a4c4:	2000022c 	.word	0x2000022c
 800a4c8:	200004f0 	.word	0x200004f0
 800a4cc:	20000500 	.word	0x20000500
 800a4d0:	20000230 	.word	0x20000230
 800a4d4:	20000558 	.word	0x20000558
 800a4d8:	20000524 	.word	0x20000524
 800a4dc:	20000564 	.word	0x20000564
 800a4e0:	456d8000 	.word	0x456d8000
 800a4e4:	00000000 	.word	0x00000000

0800a4e8 <Calib>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。
void Calib(int distance)
{
 800a4e8:	b590      	push	{r4, r7, lr}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
	//Pos.を考え中
	int target_pulse = (int)(2*distance/MM_PER_PULSE);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	005b      	lsls	r3, r3, #1
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fd ff4d 	bl	8008394 <__aeabi_i2d>
 800a4fa:	a32b      	add	r3, pc, #172	; (adr r3, 800a5a8 <Calib+0xc0>)
 800a4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a500:	f7fe f8dc 	bl	80086bc <__aeabi_ddiv>
 800a504:	4603      	mov	r3, r0
 800a506:	460c      	mov	r4, r1
 800a508:	4618      	mov	r0, r3
 800a50a:	4621      	mov	r1, r4
 800a50c:	f7fe fa5c 	bl	80089c8 <__aeabi_d2iz>
 800a510:	4603      	mov	r3, r0
 800a512:	60fb      	str	r3, [r7, #12]
	//int keep_pulse = TotalPulse[BODY]+target_pulse;
	if(target_pulse > 0)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	dd15      	ble.n	800a546 <Calib+0x5e>
	{
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 800a51a:	e006      	b.n	800a52a <Calib+0x42>
		{
			Acceleration = 0;
 800a51c:	4b1c      	ldr	r3, [pc, #112]	; (800a590 <Calib+0xa8>)
 800a51e:	f04f 0200 	mov.w	r2, #0
 800a522:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = 70;
 800a524:	4b1b      	ldr	r3, [pc, #108]	; (800a594 <Calib+0xac>)
 800a526:	4a1c      	ldr	r2, [pc, #112]	; (800a598 <Calib+0xb0>)
 800a528:	609a      	str	r2, [r3, #8]
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 800a52a:	4b1c      	ldr	r3, [pc, #112]	; (800a59c <Calib+0xb4>)
 800a52c:	689a      	ldr	r2, [r3, #8]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	441a      	add	r2, r3
 800a532:	4b1b      	ldr	r3, [pc, #108]	; (800a5a0 <Calib+0xb8>)
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	429a      	cmp	r2, r3
 800a538:	dcf0      	bgt.n	800a51c <Calib+0x34>
		}
		KeepPulse[BODY] += target_pulse;
 800a53a:	4b18      	ldr	r3, [pc, #96]	; (800a59c <Calib+0xb4>)
 800a53c:	689a      	ldr	r2, [r3, #8]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	4413      	add	r3, r2
 800a542:	4a16      	ldr	r2, [pc, #88]	; (800a59c <Calib+0xb4>)
 800a544:	6093      	str	r3, [r2, #8]

	}
	if(target_pulse < 0 )
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	da15      	bge.n	800a578 <Calib+0x90>
	{
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 800a54c:	e006      	b.n	800a55c <Calib+0x74>
		{
			Acceleration = 0;
 800a54e:	4b10      	ldr	r3, [pc, #64]	; (800a590 <Calib+0xa8>)
 800a550:	f04f 0200 	mov.w	r2, #0
 800a554:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = -100;
 800a556:	4b0f      	ldr	r3, [pc, #60]	; (800a594 <Calib+0xac>)
 800a558:	4a12      	ldr	r2, [pc, #72]	; (800a5a4 <Calib+0xbc>)
 800a55a:	609a      	str	r2, [r3, #8]
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 800a55c:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <Calib+0xb4>)
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	441a      	add	r2, r3
 800a564:	4b0e      	ldr	r3, [pc, #56]	; (800a5a0 <Calib+0xb8>)
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	429a      	cmp	r2, r3
 800a56a:	dbf0      	blt.n	800a54e <Calib+0x66>
		}
		KeepPulse[BODY] += target_pulse;
 800a56c:	4b0b      	ldr	r3, [pc, #44]	; (800a59c <Calib+0xb4>)
 800a56e:	689a      	ldr	r2, [r3, #8]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	4413      	add	r3, r2
 800a574:	4a09      	ldr	r2, [pc, #36]	; (800a59c <Calib+0xb4>)
 800a576:	6093      	str	r3, [r2, #8]
	}
	TargetVelocity[BODY] = 0;
 800a578:	4b06      	ldr	r3, [pc, #24]	; (800a594 <Calib+0xac>)
 800a57a:	f04f 0200 	mov.w	r2, #0
 800a57e:	609a      	str	r2, [r3, #8]
	Acceleration = 0;
 800a580:	4b03      	ldr	r3, [pc, #12]	; (800a590 <Calib+0xa8>)
 800a582:	f04f 0200 	mov.w	r2, #0
 800a586:	601a      	str	r2, [r3, #0]
}
 800a588:	bf00      	nop
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd90      	pop	{r4, r7, pc}
 800a590:	2000022c 	.word	0x2000022c
 800a594:	200004f0 	.word	0x200004f0
 800a598:	428c0000 	.word	0x428c0000
 800a59c:	20000558 	.word	0x20000558
 800a5a0:	20000524 	.word	0x20000524
 800a5a4:	c2c80000 	.word	0xc2c80000
 800a5a8:	23ca2666 	.word	0x23ca2666
 800a5ac:	3f509268 	.word	0x3f509268

0800a5b0 <Compensate>:
void Compensate()
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	af00      	add	r7, sp, #0
	//誤差補正する
	//Pos.を考え中
	Pos.Act = compensate;
 800a5b4:	4b04      	ldr	r3, [pc, #16]	; (800a5c8 <Compensate+0x18>)
 800a5b6:	2206      	movs	r2, #6
 800a5b8:	719a      	strb	r2, [r3, #6]
	TargetPhoto[FL];

#else
	//バック補正
	//ControlWall();
	Calib(-50);
 800a5ba:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800a5be:	f7ff ff93 	bl	800a4e8 <Calib>

//	Accel(7,-70);
//	Decel(7,0);
#endif

}
 800a5c2:	bf00      	nop
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	20000000 	.word	0x20000000

0800a5cc <AjustCenter>:
float AjustCenter(){
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
	//x,y,lrfb
	PIDChangeFlag(L_WALL_PID, 0);
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	2002      	movs	r0, #2
 800a5d6:	f006 fc7b 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800a5da:	2100      	movs	r1, #0
 800a5dc:	2003      	movs	r0, #3
 800a5de:	f006 fc77 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	2001      	movs	r0, #1
 800a5e6:	f006 fc73 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag( A_VELO_PID, 0);
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	f006 fc6f 	bl	8010ed0 <PIDChangeFlag>
	Pos.Act = compensate;
 800a5f2:	4bba      	ldr	r3, [pc, #744]	; (800a8dc <AjustCenter+0x310>)
 800a5f4:	2206      	movs	r2, #6
 800a5f6:	719a      	strb	r2, [r3, #6]
	int wall_ctrl = GetWallCtrlDirection();
 800a5f8:	f7fe fc1a 	bl	8008e30 <GetWallCtrlDirection>
 800a5fc:	6078      	str	r0, [r7, #4]
	PIDChangeFlag(wall_ctrl, 1);
 800a5fe:	2101      	movs	r1, #1
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f006 fc65 	bl	8010ed0 <PIDChangeFlag>
	//HAL_Delay(100);
	switch(Pos.Car%4)
 800a606:	4bb5      	ldr	r3, [pc, #724]	; (800a8dc <AjustCenter+0x310>)
 800a608:	795b      	ldrb	r3, [r3, #5]
 800a60a:	f003 0303 	and.w	r3, r3, #3
 800a60e:	2b03      	cmp	r3, #3
 800a610:	f200 81cc 	bhi.w	800a9ac <AjustCenter+0x3e0>
 800a614:	a201      	add	r2, pc, #4	; (adr r2, 800a61c <AjustCenter+0x50>)
 800a616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61a:	bf00      	nop
 800a61c:	0800a62d 	.word	0x0800a62d
 800a620:	0800a705 	.word	0x0800a705
 800a624:	0800a7dd 	.word	0x0800a7dd
 800a628:	0800a8b5 	.word	0x0800a8b5
	{
	case north: //use west or north wall
			if (Wall[Pos.X][Pos.Y].north == wall) //前に壁があれば前で調整
 800a62c:	4bab      	ldr	r3, [pc, #684]	; (800a8dc <AjustCenter+0x310>)
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	4619      	mov	r1, r3
 800a632:	4baa      	ldr	r3, [pc, #680]	; (800a8dc <AjustCenter+0x310>)
 800a634:	785b      	ldrb	r3, [r3, #1]
 800a636:	4618      	mov	r0, r3
 800a638:	4aa9      	ldr	r2, [pc, #676]	; (800a8e0 <AjustCenter+0x314>)
 800a63a:	460b      	mov	r3, r1
 800a63c:	00db      	lsls	r3, r3, #3
 800a63e:	440b      	add	r3, r1
 800a640:	4403      	add	r3, r0
 800a642:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a646:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d135      	bne.n	800a6bc <AjustCenter+0xf0>
			{
				//前壁調整
				while( !( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100)) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))//(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )
 800a650:	e005      	b.n	800a65e <AjustCenter+0x92>
				{
					ChangeLED(Pid[F_WALL_PID].flag);
 800a652:	4ba4      	ldr	r3, [pc, #656]	; (800a8e4 <AjustCenter+0x318>)
 800a654:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a658:	4618      	mov	r0, r3
 800a65a:	f005 fea3 	bl	80103a4 <ChangeLED>
				while( !( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100)) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))//(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )
 800a65e:	4ba2      	ldr	r3, [pc, #648]	; (800a8e8 <AjustCenter+0x31c>)
 800a660:	ed93 7a00 	vldr	s14, [r3]
 800a664:	4ba0      	ldr	r3, [pc, #640]	; (800a8e8 <AjustCenter+0x31c>)
 800a666:	edd3 7a03 	vldr	s15, [r3, #12]
 800a66a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a66e:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800a8ec <AjustCenter+0x320>
 800a672:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67a:	bfcc      	ite	gt
 800a67c:	2301      	movgt	r3, #1
 800a67e:	2300      	movle	r3, #0
 800a680:	b2db      	uxtb	r3, r3
 800a682:	f083 0301 	eor.w	r3, r3, #1
 800a686:	b2db      	uxtb	r3, r3
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1e2      	bne.n	800a652 <AjustCenter+0x86>
 800a68c:	4b96      	ldr	r3, [pc, #600]	; (800a8e8 <AjustCenter+0x31c>)
 800a68e:	ed93 7a00 	vldr	s14, [r3]
 800a692:	4b95      	ldr	r3, [pc, #596]	; (800a8e8 <AjustCenter+0x31c>)
 800a694:	edd3 7a03 	vldr	s15, [r3, #12]
 800a698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a69c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800a8f0 <AjustCenter+0x324>
 800a6a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a8:	bf4c      	ite	mi
 800a6aa:	2301      	movmi	r3, #1
 800a6ac:	2300      	movpl	r3, #0
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	f083 0301 	eor.w	r3, r3, #1
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1cb      	bne.n	800a652 <AjustCenter+0x86>

				Pid[wall_ctrl].flag = 0;
				TargetAngularV = 0;
				return 61.5;
			}
		break;
 800a6ba:	e179      	b.n	800a9b0 <AjustCenter+0x3e4>
			else if (Wall[Pos.X][Pos.Y].south == wall) //後ろに壁があるときはバック
 800a6bc:	4b87      	ldr	r3, [pc, #540]	; (800a8dc <AjustCenter+0x310>)
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	4b86      	ldr	r3, [pc, #536]	; (800a8dc <AjustCenter+0x310>)
 800a6c4:	785b      	ldrb	r3, [r3, #1]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	4a85      	ldr	r2, [pc, #532]	; (800a8e0 <AjustCenter+0x314>)
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	00db      	lsls	r3, r3, #3
 800a6ce:	440b      	add	r3, r1
 800a6d0:	4403      	add	r3, r0
 800a6d2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a6d6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	f040 8167 	bne.w	800a9b0 <AjustCenter+0x3e4>
				Compensate();	//後ろ壁調整
 800a6e2:	f7ff ff65 	bl	800a5b0 <Compensate>
				Pid[wall_ctrl].flag = 0;
 800a6e6:	4a7f      	ldr	r2, [pc, #508]	; (800a8e4 <AjustCenter+0x318>)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	212c      	movs	r1, #44	; 0x2c
 800a6ec:	fb01 f303 	mul.w	r3, r1, r3
 800a6f0:	4413      	add	r3, r2
 800a6f2:	3328      	adds	r3, #40	; 0x28
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a6f8:	4b7e      	ldr	r3, [pc, #504]	; (800a8f4 <AjustCenter+0x328>)
 800a6fa:	f04f 0200 	mov.w	r2, #0
 800a6fe:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a700:	4b7d      	ldr	r3, [pc, #500]	; (800a8f8 <AjustCenter+0x32c>)
 800a702:	e168      	b.n	800a9d6 <AjustCenter+0x40a>
	case east:
			if (Wall[Pos.X][Pos.Y].east == wall) //前に壁があれば前で調整
 800a704:	4b75      	ldr	r3, [pc, #468]	; (800a8dc <AjustCenter+0x310>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	4619      	mov	r1, r3
 800a70a:	4b74      	ldr	r3, [pc, #464]	; (800a8dc <AjustCenter+0x310>)
 800a70c:	785b      	ldrb	r3, [r3, #1]
 800a70e:	4618      	mov	r0, r3
 800a710:	4a73      	ldr	r2, [pc, #460]	; (800a8e0 <AjustCenter+0x314>)
 800a712:	460b      	mov	r3, r1
 800a714:	00db      	lsls	r3, r3, #3
 800a716:	440b      	add	r3, r1
 800a718:	4403      	add	r3, r0
 800a71a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a71e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b01      	cmp	r3, #1
 800a726:	d135      	bne.n	800a794 <AjustCenter+0x1c8>
			{
				//前壁調整
				while( !(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 800a728:	e005      	b.n	800a736 <AjustCenter+0x16a>
					{
					ChangeLED(Pid[F_WALL_PID].flag);
 800a72a:	4b6e      	ldr	r3, [pc, #440]	; (800a8e4 <AjustCenter+0x318>)
 800a72c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a730:	4618      	mov	r0, r3
 800a732:	f005 fe37 	bl	80103a4 <ChangeLED>
				while( !(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 800a736:	4b6c      	ldr	r3, [pc, #432]	; (800a8e8 <AjustCenter+0x31c>)
 800a738:	ed93 7a00 	vldr	s14, [r3]
 800a73c:	4b6a      	ldr	r3, [pc, #424]	; (800a8e8 <AjustCenter+0x31c>)
 800a73e:	edd3 7a03 	vldr	s15, [r3, #12]
 800a742:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a746:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800a8ec <AjustCenter+0x320>
 800a74a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a752:	bfcc      	ite	gt
 800a754:	2301      	movgt	r3, #1
 800a756:	2300      	movle	r3, #0
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	f083 0301 	eor.w	r3, r3, #1
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1e2      	bne.n	800a72a <AjustCenter+0x15e>
 800a764:	4b60      	ldr	r3, [pc, #384]	; (800a8e8 <AjustCenter+0x31c>)
 800a766:	ed93 7a00 	vldr	s14, [r3]
 800a76a:	4b5f      	ldr	r3, [pc, #380]	; (800a8e8 <AjustCenter+0x31c>)
 800a76c:	edd3 7a03 	vldr	s15, [r3, #12]
 800a770:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a774:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800a8f0 <AjustCenter+0x324>
 800a778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a780:	bf4c      	ite	mi
 800a782:	2301      	movmi	r3, #1
 800a784:	2300      	movpl	r3, #0
 800a786:	b2db      	uxtb	r3, r3
 800a788:	f083 0301 	eor.w	r3, r3, #1
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1cb      	bne.n	800a72a <AjustCenter+0x15e>
				Compensate();//後ろ壁調整
				Pid[wall_ctrl].flag = 0;
				TargetAngularV = 0;
				return 61.5;
			}
		break;
 800a792:	e10f      	b.n	800a9b4 <AjustCenter+0x3e8>
			else if (Wall[Pos.X][Pos.Y].west == wall) //後ろに壁があるときはバック
 800a794:	4b51      	ldr	r3, [pc, #324]	; (800a8dc <AjustCenter+0x310>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	4619      	mov	r1, r3
 800a79a:	4b50      	ldr	r3, [pc, #320]	; (800a8dc <AjustCenter+0x310>)
 800a79c:	785b      	ldrb	r3, [r3, #1]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	4a4f      	ldr	r2, [pc, #316]	; (800a8e0 <AjustCenter+0x314>)
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	00db      	lsls	r3, r3, #3
 800a7a6:	440b      	add	r3, r1
 800a7a8:	4403      	add	r3, r0
 800a7aa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a7ae:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	f040 80fd 	bne.w	800a9b4 <AjustCenter+0x3e8>
				Compensate();//後ろ壁調整
 800a7ba:	f7ff fef9 	bl	800a5b0 <Compensate>
				Pid[wall_ctrl].flag = 0;
 800a7be:	4a49      	ldr	r2, [pc, #292]	; (800a8e4 <AjustCenter+0x318>)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	212c      	movs	r1, #44	; 0x2c
 800a7c4:	fb01 f303 	mul.w	r3, r1, r3
 800a7c8:	4413      	add	r3, r2
 800a7ca:	3328      	adds	r3, #40	; 0x28
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a7d0:	4b48      	ldr	r3, [pc, #288]	; (800a8f4 <AjustCenter+0x328>)
 800a7d2:	f04f 0200 	mov.w	r2, #0
 800a7d6:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a7d8:	4b47      	ldr	r3, [pc, #284]	; (800a8f8 <AjustCenter+0x32c>)
 800a7da:	e0fc      	b.n	800a9d6 <AjustCenter+0x40a>
	case south:
			if (Wall[Pos.X][Pos.Y].south == wall) //前に壁があれば前で調整
 800a7dc:	4b3f      	ldr	r3, [pc, #252]	; (800a8dc <AjustCenter+0x310>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4b3e      	ldr	r3, [pc, #248]	; (800a8dc <AjustCenter+0x310>)
 800a7e4:	785b      	ldrb	r3, [r3, #1]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	4a3d      	ldr	r2, [pc, #244]	; (800a8e0 <AjustCenter+0x314>)
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	00db      	lsls	r3, r3, #3
 800a7ee:	440b      	add	r3, r1
 800a7f0:	4403      	add	r3, r0
 800a7f2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a7f6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d135      	bne.n	800a86c <AjustCenter+0x2a0>
			{
				//前壁調整
				while( !(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 800a800:	e005      	b.n	800a80e <AjustCenter+0x242>
					{
						ChangeLED(Pid[F_WALL_PID].flag);
 800a802:	4b38      	ldr	r3, [pc, #224]	; (800a8e4 <AjustCenter+0x318>)
 800a804:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a808:	4618      	mov	r0, r3
 800a80a:	f005 fdcb 	bl	80103a4 <ChangeLED>
				while( !(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 800a80e:	4b36      	ldr	r3, [pc, #216]	; (800a8e8 <AjustCenter+0x31c>)
 800a810:	ed93 7a00 	vldr	s14, [r3]
 800a814:	4b34      	ldr	r3, [pc, #208]	; (800a8e8 <AjustCenter+0x31c>)
 800a816:	edd3 7a03 	vldr	s15, [r3, #12]
 800a81a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a81e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800a8ec <AjustCenter+0x320>
 800a822:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a82a:	bfcc      	ite	gt
 800a82c:	2301      	movgt	r3, #1
 800a82e:	2300      	movle	r3, #0
 800a830:	b2db      	uxtb	r3, r3
 800a832:	f083 0301 	eor.w	r3, r3, #1
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1e2      	bne.n	800a802 <AjustCenter+0x236>
 800a83c:	4b2a      	ldr	r3, [pc, #168]	; (800a8e8 <AjustCenter+0x31c>)
 800a83e:	ed93 7a00 	vldr	s14, [r3]
 800a842:	4b29      	ldr	r3, [pc, #164]	; (800a8e8 <AjustCenter+0x31c>)
 800a844:	edd3 7a03 	vldr	s15, [r3, #12]
 800a848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a84c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a8f0 <AjustCenter+0x324>
 800a850:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a858:	bf4c      	ite	mi
 800a85a:	2301      	movmi	r3, #1
 800a85c:	2300      	movpl	r3, #0
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	f083 0301 	eor.w	r3, r3, #1
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1cb      	bne.n	800a802 <AjustCenter+0x236>
				Compensate();//後ろ壁調整
				Pid[wall_ctrl].flag = 0;
				TargetAngularV = 0;
				return 61.5;
			}
		break;
 800a86a:	e0a5      	b.n	800a9b8 <AjustCenter+0x3ec>
			else if (Wall[Pos.X][Pos.Y].north == wall) //後ろに壁があるときはバック
 800a86c:	4b1b      	ldr	r3, [pc, #108]	; (800a8dc <AjustCenter+0x310>)
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	4619      	mov	r1, r3
 800a872:	4b1a      	ldr	r3, [pc, #104]	; (800a8dc <AjustCenter+0x310>)
 800a874:	785b      	ldrb	r3, [r3, #1]
 800a876:	4618      	mov	r0, r3
 800a878:	4a19      	ldr	r2, [pc, #100]	; (800a8e0 <AjustCenter+0x314>)
 800a87a:	460b      	mov	r3, r1
 800a87c:	00db      	lsls	r3, r3, #3
 800a87e:	440b      	add	r3, r1
 800a880:	4403      	add	r3, r0
 800a882:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a886:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	f040 8093 	bne.w	800a9b8 <AjustCenter+0x3ec>
				Compensate();//後ろ壁調整
 800a892:	f7ff fe8d 	bl	800a5b0 <Compensate>
				Pid[wall_ctrl].flag = 0;
 800a896:	4a13      	ldr	r2, [pc, #76]	; (800a8e4 <AjustCenter+0x318>)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	212c      	movs	r1, #44	; 0x2c
 800a89c:	fb01 f303 	mul.w	r3, r1, r3
 800a8a0:	4413      	add	r3, r2
 800a8a2:	3328      	adds	r3, #40	; 0x28
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a8a8:	4b12      	ldr	r3, [pc, #72]	; (800a8f4 <AjustCenter+0x328>)
 800a8aa:	f04f 0200 	mov.w	r2, #0
 800a8ae:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a8b0:	4b11      	ldr	r3, [pc, #68]	; (800a8f8 <AjustCenter+0x32c>)
 800a8b2:	e090      	b.n	800a9d6 <AjustCenter+0x40a>
	case west:
			if (Wall[Pos.X][Pos.Y].west == wall) //前に壁があれば前で調整
 800a8b4:	4b09      	ldr	r3, [pc, #36]	; (800a8dc <AjustCenter+0x310>)
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4b08      	ldr	r3, [pc, #32]	; (800a8dc <AjustCenter+0x310>)
 800a8bc:	785b      	ldrb	r3, [r3, #1]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	4a07      	ldr	r2, [pc, #28]	; (800a8e0 <AjustCenter+0x314>)
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	00db      	lsls	r3, r3, #3
 800a8c6:	440b      	add	r3, r1
 800a8c8:	4403      	add	r3, r0
 800a8ca:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a8ce:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d146      	bne.n	800a966 <AjustCenter+0x39a>
			{
				//前壁調整
				while( !(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 800a8d8:	e016      	b.n	800a908 <AjustCenter+0x33c>
 800a8da:	bf00      	nop
 800a8dc:	20000000 	.word	0x20000000
 800a8e0:	200006ec 	.word	0x200006ec
 800a8e4:	2000031c 	.word	0x2000031c
 800a8e8:	20000564 	.word	0x20000564
 800a8ec:	4573c000 	.word	0x4573c000
 800a8f0:	45802000 	.word	0x45802000
 800a8f4:	20000500 	.word	0x20000500
 800a8f8:	42760000 	.word	0x42760000
					{
					ChangeLED(Pid[F_WALL_PID].flag);
 800a8fc:	4b39      	ldr	r3, [pc, #228]	; (800a9e4 <AjustCenter+0x418>)
 800a8fe:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a902:	4618      	mov	r0, r3
 800a904:	f005 fd4e 	bl	80103a4 <ChangeLED>
				while( !(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 800a908:	4b37      	ldr	r3, [pc, #220]	; (800a9e8 <AjustCenter+0x41c>)
 800a90a:	ed93 7a00 	vldr	s14, [r3]
 800a90e:	4b36      	ldr	r3, [pc, #216]	; (800a9e8 <AjustCenter+0x41c>)
 800a910:	edd3 7a03 	vldr	s15, [r3, #12]
 800a914:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a918:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a9ec <AjustCenter+0x420>
 800a91c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a924:	bfcc      	ite	gt
 800a926:	2301      	movgt	r3, #1
 800a928:	2300      	movle	r3, #0
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	f083 0301 	eor.w	r3, r3, #1
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1e2      	bne.n	800a8fc <AjustCenter+0x330>
 800a936:	4b2c      	ldr	r3, [pc, #176]	; (800a9e8 <AjustCenter+0x41c>)
 800a938:	ed93 7a00 	vldr	s14, [r3]
 800a93c:	4b2a      	ldr	r3, [pc, #168]	; (800a9e8 <AjustCenter+0x41c>)
 800a93e:	edd3 7a03 	vldr	s15, [r3, #12]
 800a942:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a946:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800a9f0 <AjustCenter+0x424>
 800a94a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a952:	bf4c      	ite	mi
 800a954:	2301      	movmi	r3, #1
 800a956:	2300      	movpl	r3, #0
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	f083 0301 	eor.w	r3, r3, #1
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1cb      	bne.n	800a8fc <AjustCenter+0x330>
				Pid[wall_ctrl].flag = 0;
				TargetAngularV = 0;
				return 61.5;
			}
	default:
		break;
 800a964:	e022      	b.n	800a9ac <AjustCenter+0x3e0>
			else if (Wall[Pos.X][Pos.Y].east == wall) //後ろに壁があるときはバック
 800a966:	4b23      	ldr	r3, [pc, #140]	; (800a9f4 <AjustCenter+0x428>)
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	4619      	mov	r1, r3
 800a96c:	4b21      	ldr	r3, [pc, #132]	; (800a9f4 <AjustCenter+0x428>)
 800a96e:	785b      	ldrb	r3, [r3, #1]
 800a970:	4618      	mov	r0, r3
 800a972:	4a21      	ldr	r2, [pc, #132]	; (800a9f8 <AjustCenter+0x42c>)
 800a974:	460b      	mov	r3, r1
 800a976:	00db      	lsls	r3, r3, #3
 800a978:	440b      	add	r3, r1
 800a97a:	4403      	add	r3, r0
 800a97c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a980:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b01      	cmp	r3, #1
 800a988:	d110      	bne.n	800a9ac <AjustCenter+0x3e0>
				Compensate();//後ろ壁調整
 800a98a:	f7ff fe11 	bl	800a5b0 <Compensate>
				Pid[wall_ctrl].flag = 0;
 800a98e:	4a15      	ldr	r2, [pc, #84]	; (800a9e4 <AjustCenter+0x418>)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	212c      	movs	r1, #44	; 0x2c
 800a994:	fb01 f303 	mul.w	r3, r1, r3
 800a998:	4413      	add	r3, r2
 800a99a:	3328      	adds	r3, #40	; 0x28
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a9a0:	4b16      	ldr	r3, [pc, #88]	; (800a9fc <AjustCenter+0x430>)
 800a9a2:	f04f 0200 	mov.w	r2, #0
 800a9a6:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a9a8:	4b15      	ldr	r3, [pc, #84]	; (800aa00 <AjustCenter+0x434>)
 800a9aa:	e014      	b.n	800a9d6 <AjustCenter+0x40a>
		break;
 800a9ac:	bf00      	nop
 800a9ae:	e004      	b.n	800a9ba <AjustCenter+0x3ee>
		break;
 800a9b0:	bf00      	nop
 800a9b2:	e002      	b.n	800a9ba <AjustCenter+0x3ee>
		break;
 800a9b4:	bf00      	nop
 800a9b6:	e000      	b.n	800a9ba <AjustCenter+0x3ee>
		break;
 800a9b8:	bf00      	nop
	}
	Pid[wall_ctrl].flag = 0;
 800a9ba:	4a0a      	ldr	r2, [pc, #40]	; (800a9e4 <AjustCenter+0x418>)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	212c      	movs	r1, #44	; 0x2c
 800a9c0:	fb01 f303 	mul.w	r3, r1, r3
 800a9c4:	4413      	add	r3, r2
 800a9c6:	3328      	adds	r3, #40	; 0x28
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 800a9cc:	4b0b      	ldr	r3, [pc, #44]	; (800a9fc <AjustCenter+0x430>)
 800a9ce:	f04f 0200 	mov.w	r2, #0
 800a9d2:	601a      	str	r2, [r3, #0]
	return 45;
 800a9d4:	4b0b      	ldr	r3, [pc, #44]	; (800aa04 <AjustCenter+0x438>)
 800a9d6:	ee07 3a90 	vmov	s15, r3
}
 800a9da:	eeb0 0a67 	vmov.f32	s0, s15
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	2000031c 	.word	0x2000031c
 800a9e8:	20000564 	.word	0x20000564
 800a9ec:	4573c000 	.word	0x4573c000
 800a9f0:	45802000 	.word	0x45802000
 800a9f4:	20000000 	.word	0x20000000
 800a9f8:	200006ec 	.word	0x200006ec
 800a9fc:	20000500 	.word	0x20000500
 800aa00:	42760000 	.word	0x42760000
 800aa04:	42340000 	.word	0x42340000

0800aa08 <GoStraight>:
void GoStraight(float move_distance,  float explore_speed, float accel)
{
 800aa08:	b5b0      	push	{r4, r5, r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	ed87 0a03 	vstr	s0, [r7, #12]
 800aa12:	edc7 0a02 	vstr	s1, [r7, #8]
 800aa16:	ed87 1a01 	vstr	s2, [r7, #4]
	//explore_speed += accel;

	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	//int keep_pulse = TotalPulse[BODY];
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 800aa1a:	edd7 7a03 	vldr	s15, [r7, #12]
 800aa1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aa22:	ee17 0a90 	vmov	r0, s15
 800aa26:	f7fd fcc7 	bl	80083b8 <__aeabi_f2d>
 800aa2a:	a39a      	add	r3, pc, #616	; (adr r3, 800ac94 <GoStraight+0x28c>)
 800aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa30:	f7fd fe44 	bl	80086bc <__aeabi_ddiv>
 800aa34:	4603      	mov	r3, r0
 800aa36:	460c      	mov	r4, r1
 800aa38:	4618      	mov	r0, r3
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	f7fd ffc4 	bl	80089c8 <__aeabi_d2iz>
 800aa40:	4603      	mov	r3, r0
 800aa42:	613b      	str	r3, [r7, #16]

	if(accel != 0) //加速するとき
 800aa44:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa48:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aa4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa50:	d022      	beq.n	800aa98 <GoStraight+0x90>
	{
		//移動後は今の方角が維持される、
		WallWarn();
 800aa52:	f7fe fbd1 	bl	80091f8 <WallWarn>
		ControlWall();
 800aa56:	f7fe fbdb 	bl	8009210 <ControlWall>
		Accel( move_distance/2 , explore_speed+accel);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 800aa5a:	edd7 7a03 	vldr	s15, [r7, #12]
 800aa5e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800aa66:	ed97 7a02 	vldr	s14, [r7, #8]
 800aa6a:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa72:	eef0 0a67 	vmov.f32	s1, s15
 800aa76:	eeb0 0a66 	vmov.f32	s0, s13
 800aa7a:	f7ff fb39 	bl	800a0f0 <Accel>
		while( ( KeepPulse[BODY] + (target_pulse/2)) > ( TotalPulse[BODY]) )
 800aa7e:	bf00      	nop
 800aa80:	4b7b      	ldr	r3, [pc, #492]	; (800ac70 <GoStraight+0x268>)
 800aa82:	689a      	ldr	r2, [r3, #8]
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	0fd9      	lsrs	r1, r3, #31
 800aa88:	440b      	add	r3, r1
 800aa8a:	105b      	asrs	r3, r3, #1
 800aa8c:	441a      	add	r2, r3
 800aa8e:	4b79      	ldr	r3, [pc, #484]	; (800ac74 <GoStraight+0x26c>)
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	dcf4      	bgt.n	800aa80 <GoStraight+0x78>
 800aa96:	e0c0      	b.n	800ac1a <GoStraight+0x212>
	//		}
		}
	}
	else
	{
		Pos.Act = straight;
 800aa98:	4b77      	ldr	r3, [pc, #476]	; (800ac78 <GoStraight+0x270>)
 800aa9a:	2205      	movs	r2, #5
 800aa9c:	719a      	strb	r2, [r3, #6]
		WallSafe();
 800aa9e:	f7fe fb9f 	bl	80091e0 <WallSafe>
		ControlWall();
 800aaa2:	f7fe fbb5 	bl	8009210 <ControlWall>
		Calc = SearchOrFast;
 800aaa6:	4b75      	ldr	r3, [pc, #468]	; (800ac7c <GoStraight+0x274>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a75      	ldr	r2, [pc, #468]	; (800ac80 <GoStraight+0x278>)
 800aaac:	6013      	str	r3, [r2, #0]
		_Bool wall_cut=false;
 800aaae:	2300      	movs	r3, #0
 800aab0:	75fb      	strb	r3, [r7, #23]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800aab2:	e0a7      	b.n	800ac04 <GoStraight+0x1fc>
		{
			//最初の45mmで加速をストップ
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 800aab4:	4b6e      	ldr	r3, [pc, #440]	; (800ac70 <GoStraight+0x268>)
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fd fc6b 	bl	8008394 <__aeabi_i2d>
 800aabe:	4604      	mov	r4, r0
 800aac0:	460d      	mov	r5, r1
 800aac2:	6938      	ldr	r0, [r7, #16]
 800aac4:	f7fd fc66 	bl	8008394 <__aeabi_i2d>
 800aac8:	a365      	add	r3, pc, #404	; (adr r3, 800ac60 <GoStraight+0x258>)
 800aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aace:	f7fd fccb 	bl	8008468 <__aeabi_dmul>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	4620      	mov	r0, r4
 800aad8:	4629      	mov	r1, r5
 800aada:	f7fd fb0f 	bl	80080fc <__adddf3>
 800aade:	4603      	mov	r3, r0
 800aae0:	460c      	mov	r4, r1
 800aae2:	4625      	mov	r5, r4
 800aae4:	461c      	mov	r4, r3
 800aae6:	4b63      	ldr	r3, [pc, #396]	; (800ac74 <GoStraight+0x26c>)
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fd fc52 	bl	8008394 <__aeabi_i2d>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	f7fd ff28 	bl	800894c <__aeabi_dcmplt>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d011      	beq.n	800ab26 <GoStraight+0x11e>
			{
				WallWarn();
 800ab02:	f7fe fb79 	bl	80091f8 <WallWarn>
				PIDChangeFlag(L_WALL_PID, 0);
 800ab06:	2100      	movs	r1, #0
 800ab08:	2002      	movs	r0, #2
 800ab0a:	f006 f9e1 	bl	8010ed0 <PIDChangeFlag>
				PIDChangeFlag(R_WALL_PID, 0);
 800ab0e:	2100      	movs	r1, #0
 800ab10:	2003      	movs	r0, #3
 800ab12:	f006 f9dd 	bl	8010ed0 <PIDChangeFlag>
				PIDChangeFlag(D_WALL_PID, 0);
 800ab16:	2100      	movs	r1, #0
 800ab18:	2001      	movs	r0, #1
 800ab1a:	f006 f9d9 	bl	8010ed0 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID , 1);
 800ab1e:	2101      	movs	r1, #1
 800ab20:	2000      	movs	r0, #0
 800ab22:	f006 f9d5 	bl	8010ed0 <PIDChangeFlag>
				//右か左の壁のセンサ値を見て、閾値を下回ったら、TotalPulseかKeepPulseを補正する
			}

			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800ab26:	4b52      	ldr	r3, [pc, #328]	; (800ac70 <GoStraight+0x268>)
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fd fc32 	bl	8008394 <__aeabi_i2d>
 800ab30:	4604      	mov	r4, r0
 800ab32:	460d      	mov	r5, r1
 800ab34:	6938      	ldr	r0, [r7, #16]
 800ab36:	f7fd fc2d 	bl	8008394 <__aeabi_i2d>
 800ab3a:	a34b      	add	r3, pc, #300	; (adr r3, 800ac68 <GoStraight+0x260>)
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f7fd fc92 	bl	8008468 <__aeabi_dmul>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4620      	mov	r0, r4
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f7fd fad6 	bl	80080fc <__adddf3>
 800ab50:	4603      	mov	r3, r0
 800ab52:	460c      	mov	r4, r1
 800ab54:	4625      	mov	r5, r4
 800ab56:	461c      	mov	r4, r3
 800ab58:	4b46      	ldr	r3, [pc, #280]	; (800ac74 <GoStraight+0x26c>)
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fd fc19 	bl	8008394 <__aeabi_i2d>
 800ab62:	4602      	mov	r2, r0
 800ab64:	460b      	mov	r3, r1
 800ab66:	4620      	mov	r0, r4
 800ab68:	4629      	mov	r1, r5
 800ab6a:	f7fd feef 	bl	800894c <__aeabi_dcmplt>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d010      	beq.n	800ab96 <GoStraight+0x18e>
 800ab74:	4b42      	ldr	r3, [pc, #264]	; (800ac80 <GoStraight+0x278>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10c      	bne.n	800ab96 <GoStraight+0x18e>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 800ab7c:	f000 ff4e 	bl	800ba1c <wall_set>
				//計算して
				make_map(Pos.TargetX, Pos.TargetY, 0x01);
 800ab80:	4b3d      	ldr	r3, [pc, #244]	; (800ac78 <GoStraight+0x270>)
 800ab82:	7898      	ldrb	r0, [r3, #2]
 800ab84:	4b3c      	ldr	r3, [pc, #240]	; (800ac78 <GoStraight+0x270>)
 800ab86:	78db      	ldrb	r3, [r3, #3]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	f001 f8d6 	bl	800bd3c <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 800ab90:	4b3b      	ldr	r3, [pc, #236]	; (800ac80 <GoStraight+0x278>)
 800ab92:	2201      	movs	r2, #1
 800ab94:	601a      	str	r2, [r3, #0]
			}
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 800ab96:	7dfb      	ldrb	r3, [r7, #23]
 800ab98:	f083 0301 	eor.w	r3, r3, #1
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d030      	beq.n	800ac04 <GoStraight+0x1fc>
 800aba2:	4b38      	ldr	r3, [pc, #224]	; (800ac84 <GoStraight+0x27c>)
 800aba4:	edd3 7a02 	vldr	s15, [r3, #8]
 800aba8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800ac88 <GoStraight+0x280>
 800abac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb4:	d40a      	bmi.n	800abcc <GoStraight+0x1c4>
 800abb6:	4b33      	ldr	r3, [pc, #204]	; (800ac84 <GoStraight+0x27c>)
 800abb8:	edd3 7a01 	vldr	s15, [r3, #4]
 800abbc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ac88 <GoStraight+0x280>
 800abc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc8:	d400      	bmi.n	800abcc <GoStraight+0x1c4>
 800abca:	e01b      	b.n	800ac04 <GoStraight+0x1fc>
			{//
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 800abcc:	4b28      	ldr	r3, [pc, #160]	; (800ac70 <GoStraight+0x268>)
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	ee07 3a90 	vmov	s15, r3
 800abd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	ee07 3a90 	vmov	s15, r3
 800abde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abe2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800ac8c <GoStraight+0x284>
 800abe6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800abea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abf2:	ee17 2a90 	vmov	r2, s15
 800abf6:	4b1f      	ldr	r3, [pc, #124]	; (800ac74 <GoStraight+0x26c>)
 800abf8:	609a      	str	r2, [r3, #8]
				//target_pulse = TotalPulse[BODY] -KeepPulse[BODY] + Wall_Cut_Val;
				wall_cut = true;
 800abfa:	2301      	movs	r3, #1
 800abfc:	75fb      	strb	r3, [r7, #23]
				ChangeLED(3);
 800abfe:	2003      	movs	r0, #3
 800ac00:	f005 fbd0 	bl	80103a4 <ChangeLED>
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800ac04:	4b1a      	ldr	r3, [pc, #104]	; (800ac70 <GoStraight+0x268>)
 800ac06:	689a      	ldr	r2, [r3, #8]
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	441a      	add	r2, r3
 800ac0c:	4b19      	ldr	r3, [pc, #100]	; (800ac74 <GoStraight+0x26c>)
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	f73f af4f 	bgt.w	800aab4 <GoStraight+0xac>
	//		if( ( keep_pulse + (target_pulse/2) )  <= ( TotalPulse[BODY]) )	//移動量に応じて処理を変える。
	//		{
	//			Acceleration = 0;
	//		}
		}
		wall_cut = false;
 800ac16:	2300      	movs	r3, #0
 800ac18:	75fb      	strb	r3, [r7, #23]

	}
	ChangeLED(0);
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	f005 fbc2 	bl	80103a4 <ChangeLED>
	//余分に加速した場合、あとの減速で速度を落としきれないことになっていたので、減速時にその時の速度を使うようにした。
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
//	int target_pulse = (int)(2*(move_distance/2)/MM_PER_PULSE);
//	int keep_pulse = TotalPulse[BODY];
	//WallWarn();
	Acceleration = 0;
 800ac20:	4b1b      	ldr	r3, [pc, #108]	; (800ac90 <GoStraight+0x288>)
 800ac22:	f04f 0200 	mov.w	r2, #0
 800ac26:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += target_pulse;
 800ac28:	4b11      	ldr	r3, [pc, #68]	; (800ac70 <GoStraight+0x268>)
 800ac2a:	689a      	ldr	r2, [r3, #8]
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	4413      	add	r3, r2
 800ac30:	4a0f      	ldr	r2, [pc, #60]	; (800ac70 <GoStraight+0x268>)
 800ac32:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800ac34:	4b0e      	ldr	r3, [pc, #56]	; (800ac70 <GoStraight+0x268>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	0fd9      	lsrs	r1, r3, #31
 800ac3c:	440b      	add	r3, r1
 800ac3e:	105b      	asrs	r3, r3, #1
 800ac40:	4413      	add	r3, r2
 800ac42:	4a0b      	ldr	r2, [pc, #44]	; (800ac70 <GoStraight+0x268>)
 800ac44:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800ac46:	4b0a      	ldr	r3, [pc, #40]	; (800ac70 <GoStraight+0x268>)
 800ac48:	685a      	ldr	r2, [r3, #4]
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	0fd9      	lsrs	r1, r3, #31
 800ac4e:	440b      	add	r3, r1
 800ac50:	105b      	asrs	r3, r3, #1
 800ac52:	4413      	add	r3, r2
 800ac54:	4a06      	ldr	r2, [pc, #24]	; (800ac70 <GoStraight+0x268>)
 800ac56:	6053      	str	r3, [r2, #4]

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 800ac58:	bf00      	nop
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bdb0      	pop	{r4, r5, r7, pc}
 800ac60:	9999999a 	.word	0x9999999a
 800ac64:	3fd99999 	.word	0x3fd99999
 800ac68:	9999999a 	.word	0x9999999a
 800ac6c:	3fe99999 	.word	0x3fe99999
 800ac70:	20000558 	.word	0x20000558
 800ac74:	20000524 	.word	0x20000524
 800ac78:	20000000 	.word	0x20000000
 800ac7c:	20000790 	.word	0x20000790
 800ac80:	20000794 	.word	0x20000794
 800ac84:	20000564 	.word	0x20000564
 800ac88:	42480000 	.word	0x42480000
 800ac8c:	4792c122 	.word	0x4792c122
 800ac90:	2000022c 	.word	0x2000022c
 800ac94:	23ca2666 	.word	0x23ca2666
 800ac98:	3f509268 	.word	0x3f509268

0800ac9c <TurnRight>:
void TurnRight(char mode)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	4603      	mov	r3, r0
 800aca4:	71fb      	strb	r3, [r7, #7]
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800aca6:	79fb      	ldrb	r3, [r7, #7]
 800aca8:	2b53      	cmp	r3, #83	; 0x53
 800acaa:	d027      	beq.n	800acfc <TurnRight+0x60>
 800acac:	2b54      	cmp	r3, #84	; 0x54
 800acae:	d000      	beq.n	800acb2 <TurnRight+0x16>
	case 'S':
		//スラローム
		SlalomRight();
		break;
	default :
		break;
 800acb0:	e027      	b.n	800ad02 <TurnRight+0x66>
		Decel(45, 0);
 800acb2:	eddf 0a16 	vldr	s1, [pc, #88]	; 800ad0c <TurnRight+0x70>
 800acb6:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800ad10 <TurnRight+0x74>
 800acba:	f7ff fb25 	bl	800a308 <Decel>
		EmitterOFF();
 800acbe:	f005 fb63 	bl	8010388 <EmitterOFF>
		Rotate( 90 , 2*M_PI);//1.5
 800acc2:	eddf 0a14 	vldr	s1, [pc, #80]	; 800ad14 <TurnRight+0x78>
 800acc6:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800ad18 <TurnRight+0x7c>
 800acca:	f7fe fbfd 	bl	80094c8 <Rotate>
		float acc = AjustCenter();
 800acce:	f7ff fc7d 	bl	800a5cc <AjustCenter>
 800acd2:	ed87 0a03 	vstr	s0, [r7, #12]
		EmitterON();
 800acd6:	f005 fb49 	bl	801036c <EmitterON>
		HAL_Delay(100);
 800acda:	2064      	movs	r0, #100	; 0x64
 800acdc:	f006 fc3c 	bl	8011558 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800ace0:	2101      	movs	r1, #1
 800ace2:	2000      	movs	r0, #0
 800ace4:	f006 f8f4 	bl	8010ed0 <PIDChangeFlag>
		Accel(acc, ExploreVelocity);
 800ace8:	4b0c      	ldr	r3, [pc, #48]	; (800ad1c <TurnRight+0x80>)
 800acea:	edd3 7a00 	vldr	s15, [r3]
 800acee:	eef0 0a67 	vmov.f32	s1, s15
 800acf2:	ed97 0a03 	vldr	s0, [r7, #12]
 800acf6:	f7ff f9fb 	bl	800a0f0 <Accel>
		break;
 800acfa:	e002      	b.n	800ad02 <TurnRight+0x66>
		SlalomRight();
 800acfc:	f7fe fe30 	bl	8009960 <SlalomRight>
		break;
 800ad00:	bf00      	nop
	}


}
 800ad02:	bf00      	nop
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	00000000 	.word	0x00000000
 800ad10:	42340000 	.word	0x42340000
 800ad14:	40c90fdb 	.word	0x40c90fdb
 800ad18:	42b40000 	.word	0x42b40000
 800ad1c:	20000618 	.word	0x20000618

0800ad20 <TurnLeft>:
void TurnLeft(char mode)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	4603      	mov	r3, r0
 800ad28:	71fb      	strb	r3, [r7, #7]
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800ad2a:	79fb      	ldrb	r3, [r7, #7]
 800ad2c:	2b53      	cmp	r3, #83	; 0x53
 800ad2e:	d02a      	beq.n	800ad86 <TurnLeft+0x66>
 800ad30:	2b54      	cmp	r3, #84	; 0x54
 800ad32:	d000      	beq.n	800ad36 <TurnLeft+0x16>
	case 'S':
		//スラローム
		SlalomLeft();
		break;
	default :
		break;
 800ad34:	e02a      	b.n	800ad8c <TurnLeft+0x6c>
		Decel(45, 0);
 800ad36:	eddf 0a17 	vldr	s1, [pc, #92]	; 800ad94 <TurnLeft+0x74>
 800ad3a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800ad98 <TurnLeft+0x78>
 800ad3e:	f7ff fae3 	bl	800a308 <Decel>
		EmitterOFF();
 800ad42:	f005 fb21 	bl	8010388 <EmitterOFF>
		Rotate( 90 , -2*M_PI);//-1.5
 800ad46:	eddf 0a15 	vldr	s1, [pc, #84]	; 800ad9c <TurnLeft+0x7c>
 800ad4a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800ada0 <TurnLeft+0x80>
 800ad4e:	f7fe fbbb 	bl	80094c8 <Rotate>
		EmitterON();
 800ad52:	f005 fb0b 	bl	801036c <EmitterON>
		HAL_Delay(100);
 800ad56:	2064      	movs	r0, #100	; 0x64
 800ad58:	f006 fbfe 	bl	8011558 <HAL_Delay>
		float acc = AjustCenter();
 800ad5c:	f7ff fc36 	bl	800a5cc <AjustCenter>
 800ad60:	ed87 0a03 	vstr	s0, [r7, #12]
		HAL_Delay(100);
 800ad64:	2064      	movs	r0, #100	; 0x64
 800ad66:	f006 fbf7 	bl	8011558 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	f006 f8af 	bl	8010ed0 <PIDChangeFlag>
		Accel(acc, ExploreVelocity);
 800ad72:	4b0c      	ldr	r3, [pc, #48]	; (800ada4 <TurnLeft+0x84>)
 800ad74:	edd3 7a00 	vldr	s15, [r3]
 800ad78:	eef0 0a67 	vmov.f32	s1, s15
 800ad7c:	ed97 0a03 	vldr	s0, [r7, #12]
 800ad80:	f7ff f9b6 	bl	800a0f0 <Accel>
		break;
 800ad84:	e002      	b.n	800ad8c <TurnLeft+0x6c>
		SlalomLeft();
 800ad86:	f7fe ffd7 	bl	8009d38 <SlalomLeft>
		break;
 800ad8a:	bf00      	nop
	}

}
 800ad8c:	bf00      	nop
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	00000000 	.word	0x00000000
 800ad98:	42340000 	.word	0x42340000
 800ad9c:	c0c90fdb 	.word	0xc0c90fdb
 800ada0:	42b40000 	.word	0x42b40000
 800ada4:	20000618 	.word	0x20000618

0800ada8 <GoBack>:
void GoBack()
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
	//減速して
	Decel(45, 0);
 800adae:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ae24 <GoBack+0x7c>
 800adb2:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800ae28 <GoBack+0x80>
 800adb6:	f7ff faa7 	bl	800a308 <Decel>
	float acc = AjustCenter();
 800adba:	f7ff fc07 	bl	800a5cc <AjustCenter>
 800adbe:	ed87 0a01 	vstr	s0, [r7, #4]

	Rotate(180, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
	EmitterON();

#else
	Pos.Dir = right;
 800adc2:	4b1a      	ldr	r3, [pc, #104]	; (800ae2c <GoBack+0x84>)
 800adc4:	2201      	movs	r2, #1
 800adc6:	711a      	strb	r2, [r3, #4]
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800adc8:	eddf 0a19 	vldr	s1, [pc, #100]	; 800ae30 <GoBack+0x88>
 800adcc:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800ae34 <GoBack+0x8c>
 800add0:	f7fe fb7a 	bl	80094c8 <Rotate>
	acc = AjustCenter();
 800add4:	f7ff fbfa 	bl	800a5cc <AjustCenter>
 800add8:	ed87 0a01 	vstr	s0, [r7, #4]
	Pos.Dir = right;
 800addc:	4b13      	ldr	r3, [pc, #76]	; (800ae2c <GoBack+0x84>)
 800adde:	2201      	movs	r2, #1
 800ade0:	711a      	strb	r2, [r3, #4]
	Rotate(90, 2*M_PI);
 800ade2:	eddf 0a13 	vldr	s1, [pc, #76]	; 800ae30 <GoBack+0x88>
 800ade6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800ae34 <GoBack+0x8c>
 800adea:	f7fe fb6d 	bl	80094c8 <Rotate>
	Pos.Dir = back;
 800adee:	4b0f      	ldr	r3, [pc, #60]	; (800ae2c <GoBack+0x84>)
 800adf0:	2202      	movs	r2, #2
 800adf2:	711a      	strb	r2, [r3, #4]

#endif

	acc = AjustCenter();
 800adf4:	f7ff fbea 	bl	800a5cc <AjustCenter>
 800adf8:	ed87 0a01 	vstr	s0, [r7, #4]
	Angle = TargetAngle;
 800adfc:	4b0e      	ldr	r3, [pc, #56]	; (800ae38 <GoBack+0x90>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a0e      	ldr	r2, [pc, #56]	; (800ae3c <GoBack+0x94>)
 800ae02:	6013      	str	r3, [r2, #0]

	HAL_Delay(200);
 800ae04:	20c8      	movs	r0, #200	; 0xc8
 800ae06:	f006 fba7 	bl	8011558 <HAL_Delay>

	Accel(acc, ExploreVelocity);
 800ae0a:	4b0d      	ldr	r3, [pc, #52]	; (800ae40 <GoBack+0x98>)
 800ae0c:	edd3 7a00 	vldr	s15, [r3]
 800ae10:	eef0 0a67 	vmov.f32	s1, s15
 800ae14:	ed97 0a01 	vldr	s0, [r7, #4]
 800ae18:	f7ff f96a 	bl	800a0f0 <Accel>
	//ここまでで目標走行距離を完了する

}
 800ae1c:	bf00      	nop
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	00000000 	.word	0x00000000
 800ae28:	42340000 	.word	0x42340000
 800ae2c:	20000000 	.word	0x20000000
 800ae30:	40c90fdb 	.word	0x40c90fdb
 800ae34:	42b40000 	.word	0x42b40000
 800ae38:	2000051c 	.word	0x2000051c
 800ae3c:	20000228 	.word	0x20000228
 800ae40:	20000618 	.word	0x20000618

0800ae44 <changeDirection>:

void changeDirection()
{
 800ae44:	b480      	push	{r7}
 800ae46:	af00      	add	r7, sp, #0
	//停止状態から、次の座標がわかっているときに使う
	//次に向かうべき座標と今の座標から、向くべき方向に回転する（停止状態からの挙動）
		//差はxyが±どちらかに1違うだけ

	if(Pos.X + 1 == Pos.NextX)
 800ae48:	4b17      	ldr	r3, [pc, #92]	; (800aea8 <changeDirection+0x64>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	4a16      	ldr	r2, [pc, #88]	; (800aea8 <changeDirection+0x64>)
 800ae50:	7a12      	ldrb	r2, [r2, #8]
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d103      	bne.n	800ae5e <changeDirection+0x1a>
	{
		Pos.NextCar = east;
 800ae56:	4b14      	ldr	r3, [pc, #80]	; (800aea8 <changeDirection+0x64>)
 800ae58:	2201      	movs	r2, #1
 800ae5a:	72da      	strb	r2, [r3, #11]
	else if(Pos.Y - 1 == Pos.NextY)
	{
		Pos.NextCar = south;
	}

}
 800ae5c:	e01f      	b.n	800ae9e <changeDirection+0x5a>
	else if(Pos.X - 1 == Pos.NextX)
 800ae5e:	4b12      	ldr	r3, [pc, #72]	; (800aea8 <changeDirection+0x64>)
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	3b01      	subs	r3, #1
 800ae64:	4a10      	ldr	r2, [pc, #64]	; (800aea8 <changeDirection+0x64>)
 800ae66:	7a12      	ldrb	r2, [r2, #8]
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d103      	bne.n	800ae74 <changeDirection+0x30>
		Pos.NextCar = west;
 800ae6c:	4b0e      	ldr	r3, [pc, #56]	; (800aea8 <changeDirection+0x64>)
 800ae6e:	2203      	movs	r2, #3
 800ae70:	72da      	strb	r2, [r3, #11]
}
 800ae72:	e014      	b.n	800ae9e <changeDirection+0x5a>
	else if(Pos.Y + 1 == Pos.NextY)
 800ae74:	4b0c      	ldr	r3, [pc, #48]	; (800aea8 <changeDirection+0x64>)
 800ae76:	785b      	ldrb	r3, [r3, #1]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	4a0b      	ldr	r2, [pc, #44]	; (800aea8 <changeDirection+0x64>)
 800ae7c:	7a52      	ldrb	r2, [r2, #9]
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d103      	bne.n	800ae8a <changeDirection+0x46>
		Pos.NextCar = north;
 800ae82:	4b09      	ldr	r3, [pc, #36]	; (800aea8 <changeDirection+0x64>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	72da      	strb	r2, [r3, #11]
}
 800ae88:	e009      	b.n	800ae9e <changeDirection+0x5a>
	else if(Pos.Y - 1 == Pos.NextY)
 800ae8a:	4b07      	ldr	r3, [pc, #28]	; (800aea8 <changeDirection+0x64>)
 800ae8c:	785b      	ldrb	r3, [r3, #1]
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	4a05      	ldr	r2, [pc, #20]	; (800aea8 <changeDirection+0x64>)
 800ae92:	7a52      	ldrb	r2, [r2, #9]
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d102      	bne.n	800ae9e <changeDirection+0x5a>
		Pos.NextCar = south;
 800ae98:	4b03      	ldr	r3, [pc, #12]	; (800aea8 <changeDirection+0x64>)
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	72da      	strb	r2, [r3, #11]
}
 800ae9e:	bf00      	nop
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	20000000 	.word	0x20000000

0800aeac <Aim>:
void Aim()
{	//次の座標の方向を向く
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0

	//次の座標と現在の座標から向くべき方角を取得
	changeDirection();
 800aeb2:	f7ff ffc7 	bl	800ae44 <changeDirection>

	//次に向くべき方角と今の方角のギャップを埋める旋回をする
	int now = Pos.Car % 4;
 800aeb6:	4b27      	ldr	r3, [pc, #156]	; (800af54 <Aim+0xa8>)
 800aeb8:	795b      	ldrb	r3, [r3, #5]
 800aeba:	f003 0303 	and.w	r3, r3, #3
 800aebe:	607b      	str	r3, [r7, #4]
	int next = Pos.NextCar % 4;
 800aec0:	4b24      	ldr	r3, [pc, #144]	; (800af54 <Aim+0xa8>)
 800aec2:	7adb      	ldrb	r3, [r3, #11]
 800aec4:	f003 0303 	and.w	r3, r3, #3
 800aec8:	603b      	str	r3, [r7, #0]

	//差が正なら右回転
	switch(next-now)
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	3302      	adds	r3, #2
 800aed2:	2b04      	cmp	r3, #4
 800aed4:	d834      	bhi.n	800af40 <Aim+0x94>
 800aed6:	a201      	add	r2, pc, #4	; (adr r2, 800aedc <Aim+0x30>)
 800aed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aedc:	0800af2d 	.word	0x0800af2d
 800aee0:	0800af05 	.word	0x0800af05
 800aee4:	0800af41 	.word	0x0800af41
 800aee8:	0800aef1 	.word	0x0800aef1
 800aeec:	0800af19 	.word	0x0800af19
	{
	case 0:
		break;
	case 1:
		Pos.Dir = right;
 800aef0:	4b18      	ldr	r3, [pc, #96]	; (800af54 <Aim+0xa8>)
 800aef2:	2201      	movs	r2, #1
 800aef4:	711a      	strb	r2, [r3, #4]
		Rotate( 90 , 2*M_PI);
 800aef6:	eddf 0a18 	vldr	s1, [pc, #96]	; 800af58 <Aim+0xac>
 800aefa:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800af5c <Aim+0xb0>
 800aefe:	f7fe fae3 	bl	80094c8 <Rotate>
		break;
 800af02:	e01e      	b.n	800af42 <Aim+0x96>
	case -1:
		Pos.Dir = left;
 800af04:	4b13      	ldr	r3, [pc, #76]	; (800af54 <Aim+0xa8>)
 800af06:	2203      	movs	r2, #3
 800af08:	711a      	strb	r2, [r3, #4]
		Rotate( 90 , -2*M_PI);
 800af0a:	eddf 0a15 	vldr	s1, [pc, #84]	; 800af60 <Aim+0xb4>
 800af0e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800af5c <Aim+0xb0>
 800af12:	f7fe fad9 	bl	80094c8 <Rotate>
		break;
 800af16:	e014      	b.n	800af42 <Aim+0x96>
	case 2:
		Pos.Dir = back;
 800af18:	4b0e      	ldr	r3, [pc, #56]	; (800af54 <Aim+0xa8>)
 800af1a:	2202      	movs	r2, #2
 800af1c:	711a      	strb	r2, [r3, #4]
		Rotate( 180 , 2*M_PI);
 800af1e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800af58 <Aim+0xac>
 800af22:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800af64 <Aim+0xb8>
 800af26:	f7fe facf 	bl	80094c8 <Rotate>
		break;
 800af2a:	e00a      	b.n	800af42 <Aim+0x96>
	case -2:
		Pos.Dir = back;
 800af2c:	4b09      	ldr	r3, [pc, #36]	; (800af54 <Aim+0xa8>)
 800af2e:	2202      	movs	r2, #2
 800af30:	711a      	strb	r2, [r3, #4]
		Rotate( 180 , -2*M_PI);
 800af32:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800af60 <Aim+0xb4>
 800af36:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800af64 <Aim+0xb8>
 800af3a:	f7fe fac5 	bl	80094c8 <Rotate>
		break;
 800af3e:	e000      	b.n	800af42 <Aim+0x96>
	default:
		break;
 800af40:	bf00      	nop
	}
	Pos.Car = Pos.NextCar;
 800af42:	4b04      	ldr	r3, [pc, #16]	; (800af54 <Aim+0xa8>)
 800af44:	7ada      	ldrb	r2, [r3, #11]
 800af46:	4b03      	ldr	r3, [pc, #12]	; (800af54 <Aim+0xa8>)
 800af48:	715a      	strb	r2, [r3, #5]
}
 800af4a:	bf00      	nop
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	20000000 	.word	0x20000000
 800af58:	40c90fdb 	.word	0x40c90fdb
 800af5c:	42b40000 	.word	0x42b40000
 800af60:	c0c90fdb 	.word	0xc0c90fdb
 800af64:	43340000 	.word	0x43340000

0800af68 <SelectAction>:
//{
//
//}
//進行方向決定の処理をどうするかで書き方が変わる。フラグを使うとか。
 void SelectAction(char turn_mode)	//前後左右であらわす
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	71fb      	strb	r3, [r7, #7]
	//現在の座標から次の座標に行くまでの処理を一つのアクションとする
	switch(Pos.Dir%4) //条件を増やす場合は割る数字に注意
 800af72:	4b1b      	ldr	r3, [pc, #108]	; (800afe0 <SelectAction+0x78>)
 800af74:	791b      	ldrb	r3, [r3, #4]
 800af76:	f003 0303 	and.w	r3, r3, #3
 800af7a:	2b03      	cmp	r3, #3
 800af7c:	d82a      	bhi.n	800afd4 <SelectAction+0x6c>
 800af7e:	a201      	add	r2, pc, #4	; (adr r2, 800af84 <SelectAction+0x1c>)
 800af80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af84:	0800af95 	.word	0x0800af95
 800af88:	0800afbb 	.word	0x0800afbb
 800af8c:	0800afcf 	.word	0x0800afcf
 800af90:	0800afc5 	.word	0x0800afc5
	{
	//直進
	case front:
		//直進flagオン
		//PIDChangeFlag( A_VELO_PID, 1);
		AddVelocity = 0;
 800af94:	4b13      	ldr	r3, [pc, #76]	; (800afe4 <SelectAction+0x7c>)
 800af96:	f04f 0200 	mov.w	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800af9c:	4b12      	ldr	r3, [pc, #72]	; (800afe8 <SelectAction+0x80>)
 800af9e:	edd3 7a00 	vldr	s15, [r3]
 800afa2:	4b10      	ldr	r3, [pc, #64]	; (800afe4 <SelectAction+0x7c>)
 800afa4:	ed93 7a00 	vldr	s14, [r3]
 800afa8:	eeb0 1a47 	vmov.f32	s2, s14
 800afac:	eef0 0a67 	vmov.f32	s1, s15
 800afb0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800afec <SelectAction+0x84>
 800afb4:	f7ff fd28 	bl	800aa08 <GoStraight>

		break;
 800afb8:	e00d      	b.n	800afd6 <SelectAction+0x6e>
	//右方向
	case right:	//左右の違いは目標値がそれぞれ入れ替わるだけだから、上手く書けば一つの関数でできる
		//スラロームターンと減速プラスターンetc
		TurnRight(turn_mode);
 800afba:	79fb      	ldrb	r3, [r7, #7]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff fe6d 	bl	800ac9c <TurnRight>
		break;
 800afc2:	e008      	b.n	800afd6 <SelectAction+0x6e>
	//左方向
	case left:
		TurnLeft(turn_mode);
 800afc4:	79fb      	ldrb	r3, [r7, #7]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7ff feaa 	bl	800ad20 <TurnLeft>
		break;
 800afcc:	e003      	b.n	800afd6 <SelectAction+0x6e>
	case back:
		GoBack();	//Uターン
 800afce:	f7ff feeb 	bl	800ada8 <GoBack>
		break;
 800afd2:	e000      	b.n	800afd6 <SelectAction+0x6e>


	default :
		break;
 800afd4:	bf00      	nop

	}
}
 800afd6:	bf00      	nop
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	20000000 	.word	0x20000000
 800afe4:	200004fc 	.word	0x200004fc
 800afe8:	20000618 	.word	0x20000618
 800afec:	42b40000 	.word	0x42b40000

0800aff0 <Explore_IT>:
	//4つめが終わる前に0.5msが過ぎる説。
}


void Explore_IT()
{
 800aff0:	b5b0      	push	{r4, r5, r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0

//*-----------------*/

	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800aff6:	4bb6      	ldr	r3, [pc, #728]	; (800b2d0 <Explore_IT+0x2e0>)
 800aff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affa:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800affe:	332f      	adds	r3, #47	; 0x2f
 800b000:	461a      	mov	r2, r3
 800b002:	4bb4      	ldr	r3, [pc, #720]	; (800b2d4 <Explore_IT+0x2e4>)
 800b004:	601a      	str	r2, [r3, #0]
	TIM3->CNT = INITIAL_PULSE;
 800b006:	4bb2      	ldr	r3, [pc, #712]	; (800b2d0 <Explore_IT+0x2e0>)
 800b008:	f247 522f 	movw	r2, #29999	; 0x752f
 800b00c:	625a      	str	r2, [r3, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800b00e:	4bb2      	ldr	r3, [pc, #712]	; (800b2d8 <Explore_IT+0x2e8>)
 800b010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b012:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800b016:	332f      	adds	r3, #47	; 0x2f
 800b018:	461a      	mov	r2, r3
 800b01a:	4bae      	ldr	r3, [pc, #696]	; (800b2d4 <Explore_IT+0x2e4>)
 800b01c:	605a      	str	r2, [r3, #4]
	TIM4->CNT = INITIAL_PULSE;
 800b01e:	4bae      	ldr	r3, [pc, #696]	; (800b2d8 <Explore_IT+0x2e8>)
 800b020:	f247 522f 	movw	r2, #29999	; 0x752f
 800b024:	625a      	str	r2, [r3, #36]	; 0x24

	//速度 mm/s
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800b026:	4bab      	ldr	r3, [pc, #684]	; (800b2d4 <Explore_IT+0x2e4>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	ee07 3a90 	vmov	s15, r3
 800b02e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b032:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 800b2dc <Explore_IT+0x2ec>
 800b036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b03a:	4ba9      	ldr	r3, [pc, #676]	; (800b2e0 <Explore_IT+0x2f0>)
 800b03c:	edc3 7a00 	vstr	s15, [r3]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800b040:	4ba4      	ldr	r3, [pc, #656]	; (800b2d4 <Explore_IT+0x2e4>)
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	ee07 3a90 	vmov	s15, r3
 800b048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b04c:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800b2dc <Explore_IT+0x2ec>
 800b050:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b054:	4ba2      	ldr	r3, [pc, #648]	; (800b2e0 <Explore_IT+0x2f0>)
 800b056:	edc3 7a01 	vstr	s15, [r3, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800b05a:	4ba1      	ldr	r3, [pc, #644]	; (800b2e0 <Explore_IT+0x2f0>)
 800b05c:	ed93 7a00 	vldr	s14, [r3]
 800b060:	4b9f      	ldr	r3, [pc, #636]	; (800b2e0 <Explore_IT+0x2f0>)
 800b062:	edd3 7a01 	vldr	s15, [r3, #4]
 800b066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b06a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b06e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b072:	4b9b      	ldr	r3, [pc, #620]	; (800b2e0 <Explore_IT+0x2f0>)
 800b074:	edc3 7a02 	vstr	s15, [r3, #8]
//	}


	//移動量 mm/msを積算

	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800b078:	4b9a      	ldr	r3, [pc, #616]	; (800b2e4 <Explore_IT+0x2f4>)
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	4b95      	ldr	r3, [pc, #596]	; (800b2d4 <Explore_IT+0x2e4>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4413      	add	r3, r2
 800b082:	4a98      	ldr	r2, [pc, #608]	; (800b2e4 <Explore_IT+0x2f4>)
 800b084:	6013      	str	r3, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800b086:	4b97      	ldr	r3, [pc, #604]	; (800b2e4 <Explore_IT+0x2f4>)
 800b088:	685a      	ldr	r2, [r3, #4]
 800b08a:	4b92      	ldr	r3, [pc, #584]	; (800b2d4 <Explore_IT+0x2e4>)
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	4413      	add	r3, r2
 800b090:	4a94      	ldr	r2, [pc, #592]	; (800b2e4 <Explore_IT+0x2f4>)
 800b092:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800b094:	4b93      	ldr	r3, [pc, #588]	; (800b2e4 <Explore_IT+0x2f4>)
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	4b92      	ldr	r3, [pc, #584]	; (800b2e4 <Explore_IT+0x2f4>)
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	4413      	add	r3, r2
 800b09e:	4a91      	ldr	r2, [pc, #580]	; (800b2e4 <Explore_IT+0x2f4>)
 800b0a0:	6093      	str	r3, [r2, #8]
#if 1
	//static float angle=0;
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
 800b0a2:	2138      	movs	r1, #56	; 0x38
 800b0a4:	2037      	movs	r0, #55	; 0x37
 800b0a6:	f005 f817 	bl	80100d8 <ReadIMU>
 800b0aa:	eef0 7a40 	vmov.f32	s15, s0
 800b0ae:	4b8e      	ldr	r3, [pc, #568]	; (800b2e8 <Explore_IT+0x2f8>)
 800b0b0:	edc3 7a00 	vstr	s15, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800b0b4:	4b8c      	ldr	r3, [pc, #560]	; (800b2e8 <Explore_IT+0x2f8>)
 800b0b6:	ed93 7a00 	vldr	s14, [r3]
 800b0ba:	4b8c      	ldr	r3, [pc, #560]	; (800b2ec <Explore_IT+0x2fc>)
 800b0bc:	edd3 7a00 	vldr	s15, [r3]
 800b0c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0c4:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800b2f0 <Explore_IT+0x300>
 800b0c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b0cc:	edc7 7a05 	vstr	s15, [r7, #20]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800b0d0:	6978      	ldr	r0, [r7, #20]
 800b0d2:	f7fd f971 	bl	80083b8 <__aeabi_f2d>
 800b0d6:	a378      	add	r3, pc, #480	; (adr r3, 800b2b8 <Explore_IT+0x2c8>)
 800b0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0dc:	f7fd f9c4 	bl	8008468 <__aeabi_dmul>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	4625      	mov	r5, r4
 800b0e6:	461c      	mov	r4, r3
 800b0e8:	4b82      	ldr	r3, [pc, #520]	; (800b2f4 <Explore_IT+0x304>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fd f963 	bl	80083b8 <__aeabi_f2d>
 800b0f2:	a373      	add	r3, pc, #460	; (adr r3, 800b2c0 <Explore_IT+0x2d0>)
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	f7fd f9b6 	bl	8008468 <__aeabi_dmul>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	4620      	mov	r0, r4
 800b102:	4629      	mov	r1, r5
 800b104:	f7fc fffa 	bl	80080fc <__adddf3>
 800b108:	4603      	mov	r3, r0
 800b10a:	460c      	mov	r4, r1
 800b10c:	4618      	mov	r0, r3
 800b10e:	4621      	mov	r1, r4
 800b110:	f7fd fca2 	bl	8008a58 <__aeabi_d2f>
 800b114:	4603      	mov	r3, r0
 800b116:	ee07 3a90 	vmov	s15, r3
 800b11a:	eef1 7a67 	vneg.f32	s15, s15
 800b11e:	4b76      	ldr	r3, [pc, #472]	; (800b2f8 <Explore_IT+0x308>)
 800b120:	edc3 7a00 	vstr	s15, [r3]
    zg_last = zg_law;
 800b124:	4a73      	ldr	r2, [pc, #460]	; (800b2f4 <Explore_IT+0x304>)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	6013      	str	r3, [r2, #0]
	Angle += AngularV * T1;
 800b12a:	4b73      	ldr	r3, [pc, #460]	; (800b2f8 <Explore_IT+0x308>)
 800b12c:	edd3 7a00 	vldr	s15, [r3]
 800b130:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800b2fc <Explore_IT+0x30c>
 800b134:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b138:	4b71      	ldr	r3, [pc, #452]	; (800b300 <Explore_IT+0x310>)
 800b13a:	edd3 7a00 	vldr	s15, [r3]
 800b13e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b142:	4b6f      	ldr	r3, [pc, #444]	; (800b300 <Explore_IT+0x310>)
 800b144:	edc3 7a00 	vstr	s15, [r3]
	AngularV = ( CurrentVelocity[LEFT] - CurrentVelocity[RIGHT] ) *convert_to_angularv;
	Angle += AngularV * T1;

#endif

	int wall_d =0,wall_l =0,wall_r =0,wall_f=0;
 800b148:	2300      	movs	r3, #0
 800b14a:	613b      	str	r3, [r7, #16]
 800b14c:	2300      	movs	r3, #0
 800b14e:	60fb      	str	r3, [r7, #12]
 800b150:	2300      	movs	r3, #0
 800b152:	60bb      	str	r3, [r7, #8]
 800b154:	2300      	movs	r3, #0
 800b156:	607b      	str	r3, [r7, #4]
		int ang_out=0;
 800b158:	2300      	movs	r3, #0
 800b15a:	603b      	str	r3, [r7, #0]

		if( Pos.Dir == front || Pos.Act == compensate || Pos.Act == rotate)
 800b15c:	4b69      	ldr	r3, [pc, #420]	; (800b304 <Explore_IT+0x314>)
 800b15e:	791b      	ldrb	r3, [r3, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d008      	beq.n	800b176 <Explore_IT+0x186>
 800b164:	4b67      	ldr	r3, [pc, #412]	; (800b304 <Explore_IT+0x314>)
 800b166:	799b      	ldrb	r3, [r3, #6]
 800b168:	2b06      	cmp	r3, #6
 800b16a:	d004      	beq.n	800b176 <Explore_IT+0x186>
 800b16c:	4b65      	ldr	r3, [pc, #404]	; (800b304 <Explore_IT+0x314>)
 800b16e:	799b      	ldrb	r3, [r3, #6]
 800b170:	2b03      	cmp	r3, #3
 800b172:	f040 8117 	bne.w	800b3a4 <Explore_IT+0x3b4>
		{
			if( Pid[A_VELO_PID].flag == 1 )
 800b176:	4b64      	ldr	r3, [pc, #400]	; (800b308 <Explore_IT+0x318>)
 800b178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d116      	bne.n	800b1ac <Explore_IT+0x1bc>
			{
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800b17e:	4b63      	ldr	r3, [pc, #396]	; (800b30c <Explore_IT+0x31c>)
 800b180:	edd3 7a00 	vldr	s15, [r3]
 800b184:	4b5e      	ldr	r3, [pc, #376]	; (800b300 <Explore_IT+0x310>)
 800b186:	ed93 7a00 	vldr	s14, [r3]
 800b18a:	eef0 0a47 	vmov.f32	s1, s14
 800b18e:	eeb0 0a67 	vmov.f32	s0, s15
 800b192:	2000      	movs	r0, #0
 800b194:	f005 fef0 	bl	8010f78 <PIDControl>
 800b198:	6038      	str	r0, [r7, #0]
				TargetAngularV = (float)ang_out;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	ee07 3a90 	vmov	s15, r3
 800b1a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1a4:	4b5a      	ldr	r3, [pc, #360]	; (800b310 <Explore_IT+0x320>)
 800b1a6:	edc3 7a00 	vstr	s15, [r3]
 800b1aa:	e0fb      	b.n	800b3a4 <Explore_IT+0x3b4>
			}
			else if( Pid[D_WALL_PID].flag == 1 )
 800b1ac:	4b56      	ldr	r3, [pc, #344]	; (800b308 <Explore_IT+0x318>)
 800b1ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d12a      	bne.n	800b20a <Explore_IT+0x21a>
			{
				wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800b1b4:	4b57      	ldr	r3, [pc, #348]	; (800b314 <Explore_IT+0x324>)
 800b1b6:	edd3 6a02 	vldr	s13, [r3, #8]
 800b1ba:	4b56      	ldr	r3, [pc, #344]	; (800b314 <Explore_IT+0x324>)
 800b1bc:	ed93 7a01 	vldr	s14, [r3, #4]
 800b1c0:	4b55      	ldr	r3, [pc, #340]	; (800b318 <Explore_IT+0x328>)
 800b1c2:	edd3 7a00 	vldr	s15, [r3]
 800b1c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1ca:	eef0 0a67 	vmov.f32	s1, s15
 800b1ce:	eeb0 0a66 	vmov.f32	s0, s13
 800b1d2:	2001      	movs	r0, #1
 800b1d4:	f005 fed0 	bl	8010f78 <PIDControl>
 800b1d8:	6138      	str	r0, [r7, #16]
				TargetAngularV = (float)wall_d*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	ee07 3a90 	vmov	s15, r3
 800b1e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1e4:	ee17 0a90 	vmov	r0, s15
 800b1e8:	f7fd f8e6 	bl	80083b8 <__aeabi_f2d>
 800b1ec:	a336      	add	r3, pc, #216	; (adr r3, 800b2c8 <Explore_IT+0x2d8>)
 800b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f2:	f7fd f939 	bl	8008468 <__aeabi_dmul>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	4621      	mov	r1, r4
 800b1fe:	f7fd fc2b 	bl	8008a58 <__aeabi_d2f>
 800b202:	4602      	mov	r2, r0
 800b204:	4b42      	ldr	r3, [pc, #264]	; (800b310 <Explore_IT+0x320>)
 800b206:	601a      	str	r2, [r3, #0]
 800b208:	e0cc      	b.n	800b3a4 <Explore_IT+0x3b4>
			}
			else if( Pid[L_WALL_PID].flag == 1 )
 800b20a:	4b3f      	ldr	r3, [pc, #252]	; (800b308 <Explore_IT+0x318>)
 800b20c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b210:	2b01      	cmp	r3, #1
 800b212:	d125      	bne.n	800b260 <Explore_IT+0x270>
			{
				wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
 800b214:	4b3f      	ldr	r3, [pc, #252]	; (800b314 <Explore_IT+0x324>)
 800b216:	edd3 7a02 	vldr	s15, [r3, #8]
 800b21a:	4b40      	ldr	r3, [pc, #256]	; (800b31c <Explore_IT+0x32c>)
 800b21c:	ed93 7a02 	vldr	s14, [r3, #8]
 800b220:	eef0 0a47 	vmov.f32	s1, s14
 800b224:	eeb0 0a67 	vmov.f32	s0, s15
 800b228:	2002      	movs	r0, #2
 800b22a:	f005 fea5 	bl	8010f78 <PIDControl>
 800b22e:	60f8      	str	r0, [r7, #12]
				TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	ee07 3a90 	vmov	s15, r3
 800b236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b23a:	ee17 0a90 	vmov	r0, s15
 800b23e:	f7fd f8bb 	bl	80083b8 <__aeabi_f2d>
 800b242:	a321      	add	r3, pc, #132	; (adr r3, 800b2c8 <Explore_IT+0x2d8>)
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	f7fd f90e 	bl	8008468 <__aeabi_dmul>
 800b24c:	4603      	mov	r3, r0
 800b24e:	460c      	mov	r4, r1
 800b250:	4618      	mov	r0, r3
 800b252:	4621      	mov	r1, r4
 800b254:	f7fd fc00 	bl	8008a58 <__aeabi_d2f>
 800b258:	4602      	mov	r2, r0
 800b25a:	4b2d      	ldr	r3, [pc, #180]	; (800b310 <Explore_IT+0x320>)
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	e0a1      	b.n	800b3a4 <Explore_IT+0x3b4>

			}
			else if( Pid[R_WALL_PID].flag == 1 )
 800b260:	4b29      	ldr	r3, [pc, #164]	; (800b308 <Explore_IT+0x318>)
 800b262:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b266:	2b01      	cmp	r3, #1
 800b268:	d15a      	bne.n	800b320 <Explore_IT+0x330>
			{
				wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800b26a:	4b2c      	ldr	r3, [pc, #176]	; (800b31c <Explore_IT+0x32c>)
 800b26c:	edd3 7a01 	vldr	s15, [r3, #4]
 800b270:	4b28      	ldr	r3, [pc, #160]	; (800b314 <Explore_IT+0x324>)
 800b272:	ed93 7a01 	vldr	s14, [r3, #4]
 800b276:	eef0 0a47 	vmov.f32	s1, s14
 800b27a:	eeb0 0a67 	vmov.f32	s0, s15
 800b27e:	2003      	movs	r0, #3
 800b280:	f005 fe7a 	bl	8010f78 <PIDControl>
 800b284:	60b8      	str	r0, [r7, #8]
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	ee07 3a90 	vmov	s15, r3
 800b28c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b290:	ee17 0a90 	vmov	r0, s15
 800b294:	f7fd f890 	bl	80083b8 <__aeabi_f2d>
 800b298:	a30b      	add	r3, pc, #44	; (adr r3, 800b2c8 <Explore_IT+0x2d8>)
 800b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29e:	f7fd f8e3 	bl	8008468 <__aeabi_dmul>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	460c      	mov	r4, r1
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	f7fd fbd5 	bl	8008a58 <__aeabi_d2f>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	4b17      	ldr	r3, [pc, #92]	; (800b310 <Explore_IT+0x320>)
 800b2b2:	601a      	str	r2, [r3, #0]
 800b2b4:	e076      	b.n	800b3a4 <Explore_IT+0x3b4>
 800b2b6:	bf00      	nop
 800b2b8:	47ae147b 	.word	0x47ae147b
 800b2bc:	3f847ae1 	.word	0x3f847ae1
 800b2c0:	7ae147ae 	.word	0x7ae147ae
 800b2c4:	3fefae14 	.word	0x3fefae14
 800b2c8:	d2f1a9fc 	.word	0xd2f1a9fc
 800b2cc:	3f50624d 	.word	0x3f50624d
 800b2d0:	40000400 	.word	0x40000400
 800b2d4:	200006e0 	.word	0x200006e0
 800b2d8:	40000800 	.word	0x40000800
 800b2dc:	3f8177cd 	.word	0x3f8177cd
 800b2e0:	20000530 	.word	0x20000530
 800b2e4:	20000524 	.word	0x20000524
 800b2e8:	200002d8 	.word	0x200002d8
 800b2ec:	200002d4 	.word	0x200002d4
 800b2f0:	3a8b7d78 	.word	0x3a8b7d78
 800b2f4:	2000021c 	.word	0x2000021c
 800b2f8:	20000224 	.word	0x20000224
 800b2fc:	3a83126f 	.word	0x3a83126f
 800b300:	20000228 	.word	0x20000228
 800b304:	20000000 	.word	0x20000000
 800b308:	2000031c 	.word	0x2000031c
 800b30c:	2000051c 	.word	0x2000051c
 800b310:	20000500 	.word	0x20000500
 800b314:	20000564 	.word	0x20000564
 800b318:	20000514 	.word	0x20000514
 800b31c:	20000624 	.word	0x20000624
			}
			else if( Pid[F_WALL_PID].flag == 1)
 800b320:	4b55      	ldr	r3, [pc, #340]	; (800b478 <Explore_IT+0x488>)
 800b322:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800b326:	2b01      	cmp	r3, #1
 800b328:	d13c      	bne.n	800b3a4 <Explore_IT+0x3b4>
			{
				wall_f = PIDControl( F_WALL_PID,   4000, (	(Photo[FR]+Photo[FL])));
 800b32a:	4b54      	ldr	r3, [pc, #336]	; (800b47c <Explore_IT+0x48c>)
 800b32c:	ed93 7a03 	vldr	s14, [r3, #12]
 800b330:	4b52      	ldr	r3, [pc, #328]	; (800b47c <Explore_IT+0x48c>)
 800b332:	edd3 7a00 	vldr	s15, [r3]
 800b336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b33a:	eef0 0a67 	vmov.f32	s1, s15
 800b33e:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800b480 <Explore_IT+0x490>
 800b342:	2008      	movs	r0, #8
 800b344:	f005 fe18 	bl	8010f78 <PIDControl>
 800b348:	6078      	str	r0, [r7, #4]
				TargetVelocity[BODY] = (float)wall_f*0.001;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	ee07 3a90 	vmov	s15, r3
 800b350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b354:	ee17 0a90 	vmov	r0, s15
 800b358:	f7fd f82e 	bl	80083b8 <__aeabi_f2d>
 800b35c:	a344      	add	r3, pc, #272	; (adr r3, 800b470 <Explore_IT+0x480>)
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f7fd f881 	bl	8008468 <__aeabi_dmul>
 800b366:	4603      	mov	r3, r0
 800b368:	460c      	mov	r4, r1
 800b36a:	4618      	mov	r0, r3
 800b36c:	4621      	mov	r1, r4
 800b36e:	f7fd fb73 	bl	8008a58 <__aeabi_d2f>
 800b372:	4602      	mov	r2, r0
 800b374:	4b43      	ldr	r3, [pc, #268]	; (800b484 <Explore_IT+0x494>)
 800b376:	609a      	str	r2, [r3, #8]
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800b378:	4b43      	ldr	r3, [pc, #268]	; (800b488 <Explore_IT+0x498>)
 800b37a:	edd3 7a00 	vldr	s15, [r3]
 800b37e:	4b43      	ldr	r3, [pc, #268]	; (800b48c <Explore_IT+0x49c>)
 800b380:	ed93 7a00 	vldr	s14, [r3]
 800b384:	eef0 0a47 	vmov.f32	s1, s14
 800b388:	eeb0 0a67 	vmov.f32	s0, s15
 800b38c:	2000      	movs	r0, #0
 800b38e:	f005 fdf3 	bl	8010f78 <PIDControl>
 800b392:	6038      	str	r0, [r7, #0]
				TargetAngularV = (float)ang_out;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	ee07 3a90 	vmov	s15, r3
 800b39a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b39e:	4b3c      	ldr	r3, [pc, #240]	; (800b490 <Explore_IT+0x4a0>)
 800b3a0:	edc3 7a00 	vstr	s15, [r3]

				//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
			}
		}

	TargetVelocity[BODY] += Acceleration;
 800b3a4:	4b37      	ldr	r3, [pc, #220]	; (800b484 <Explore_IT+0x494>)
 800b3a6:	ed93 7a02 	vldr	s14, [r3, #8]
 800b3aa:	4b3a      	ldr	r3, [pc, #232]	; (800b494 <Explore_IT+0x4a4>)
 800b3ac:	edd3 7a00 	vldr	s15, [r3]
 800b3b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3b4:	4b33      	ldr	r3, [pc, #204]	; (800b484 <Explore_IT+0x494>)
 800b3b6:	edc3 7a02 	vstr	s15, [r3, #8]
	//AngularAcceleration += AngularLeapsity;
	TargetAngularV += AngularAcceleration;
 800b3ba:	4b35      	ldr	r3, [pc, #212]	; (800b490 <Explore_IT+0x4a0>)
 800b3bc:	ed93 7a00 	vldr	s14, [r3]
 800b3c0:	4b35      	ldr	r3, [pc, #212]	; (800b498 <Explore_IT+0x4a8>)
 800b3c2:	edd3 7a00 	vldr	s15, [r3]
 800b3c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3ca:	4b31      	ldr	r3, [pc, #196]	; (800b490 <Explore_IT+0x4a0>)
 800b3cc:	edc3 7a00 	vstr	s15, [r3]
	//TargetAngularV += AngularAcceleration;
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800b3d0:	4b2c      	ldr	r3, [pc, #176]	; (800b484 <Explore_IT+0x494>)
 800b3d2:	ed93 7a02 	vldr	s14, [r3, #8]
 800b3d6:	4b2e      	ldr	r3, [pc, #184]	; (800b490 <Explore_IT+0x4a0>)
 800b3d8:	edd3 7a00 	vldr	s15, [r3]
 800b3dc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800b49c <Explore_IT+0x4ac>
 800b3e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b3e4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b3e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b3ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3f0:	4b24      	ldr	r3, [pc, #144]	; (800b484 <Explore_IT+0x494>)
 800b3f2:	edc3 7a01 	vstr	s15, [r3, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800b3f6:	4b26      	ldr	r3, [pc, #152]	; (800b490 <Explore_IT+0x4a0>)
 800b3f8:	edd3 7a00 	vldr	s15, [r3]
 800b3fc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b49c <Explore_IT+0x4ac>
 800b400:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b404:	4b1f      	ldr	r3, [pc, #124]	; (800b484 <Explore_IT+0x494>)
 800b406:	edd3 7a01 	vldr	s15, [r3, #4]
 800b40a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b40e:	4b1d      	ldr	r3, [pc, #116]	; (800b484 <Explore_IT+0x494>)
 800b410:	edc3 7a00 	vstr	s15, [r3]

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800b414:	4b1b      	ldr	r3, [pc, #108]	; (800b484 <Explore_IT+0x494>)
 800b416:	edd3 7a00 	vldr	s15, [r3]
 800b41a:	4b21      	ldr	r3, [pc, #132]	; (800b4a0 <Explore_IT+0x4b0>)
 800b41c:	ed93 7a00 	vldr	s14, [r3]
 800b420:	eef0 0a47 	vmov.f32	s1, s14
 800b424:	eeb0 0a67 	vmov.f32	s0, s15
 800b428:	2004      	movs	r0, #4
 800b42a:	f005 fda5 	bl	8010f78 <PIDControl>
 800b42e:	4602      	mov	r2, r0
 800b430:	4b1c      	ldr	r3, [pc, #112]	; (800b4a4 <Explore_IT+0x4b4>)
 800b432:	601a      	str	r2, [r3, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800b434:	4b13      	ldr	r3, [pc, #76]	; (800b484 <Explore_IT+0x494>)
 800b436:	edd3 7a01 	vldr	s15, [r3, #4]
 800b43a:	4b19      	ldr	r3, [pc, #100]	; (800b4a0 <Explore_IT+0x4b0>)
 800b43c:	ed93 7a01 	vldr	s14, [r3, #4]
 800b440:	eef0 0a47 	vmov.f32	s1, s14
 800b444:	eeb0 0a67 	vmov.f32	s0, s15
 800b448:	2005      	movs	r0, #5
 800b44a:	f005 fd95 	bl	8010f78 <PIDControl>
 800b44e:	4602      	mov	r2, r0
 800b450:	4b15      	ldr	r3, [pc, #84]	; (800b4a8 <Explore_IT+0x4b8>)
 800b452:	601a      	str	r2, [r3, #0]

	//モータに出力
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800b454:	4b13      	ldr	r3, [pc, #76]	; (800b4a4 <Explore_IT+0x4b4>)
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	4b13      	ldr	r3, [pc, #76]	; (800b4a8 <Explore_IT+0x4b8>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4619      	mov	r1, r3
 800b45e:	4610      	mov	r0, r2
 800b460:	f005 f892 	bl	8010588 <Motor_Switch>

}
 800b464:	bf00      	nop
 800b466:	3718      	adds	r7, #24
 800b468:	46bd      	mov	sp, r7
 800b46a:	bdb0      	pop	{r4, r5, r7, pc}
 800b46c:	f3af 8000 	nop.w
 800b470:	d2f1a9fc 	.word	0xd2f1a9fc
 800b474:	3f50624d 	.word	0x3f50624d
 800b478:	2000031c 	.word	0x2000031c
 800b47c:	20000564 	.word	0x20000564
 800b480:	457a0000 	.word	0x457a0000
 800b484:	200004f0 	.word	0x200004f0
 800b488:	2000051c 	.word	0x2000051c
 800b48c:	20000228 	.word	0x20000228
 800b490:	20000500 	.word	0x20000500
 800b494:	2000022c 	.word	0x2000022c
 800b498:	20000230 	.word	0x20000230
 800b49c:	4209999a 	.word	0x4209999a
 800b4a0:	20000530 	.word	0x20000530
 800b4a4:	2000061c 	.word	0x2000061c
 800b4a8:	20000638 	.word	0x20000638
 800b4ac:	00000000 	.word	0x00000000

0800b4b0 <WritingFree_IT>:
void WritingFree_IT()
{
 800b4b0:	b5b0      	push	{r4, r5, r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800b4b6:	4b90      	ldr	r3, [pc, #576]	; (800b6f8 <WritingFree_IT+0x248>)
 800b4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ba:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800b4be:	332f      	adds	r3, #47	; 0x2f
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	4b8e      	ldr	r3, [pc, #568]	; (800b6fc <WritingFree_IT+0x24c>)
 800b4c4:	601a      	str	r2, [r3, #0]
	TIM3->CNT = INITIAL_PULSE;
 800b4c6:	4b8c      	ldr	r3, [pc, #560]	; (800b6f8 <WritingFree_IT+0x248>)
 800b4c8:	f247 522f 	movw	r2, #29999	; 0x752f
 800b4cc:	625a      	str	r2, [r3, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800b4ce:	4b8c      	ldr	r3, [pc, #560]	; (800b700 <WritingFree_IT+0x250>)
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d2:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800b4d6:	332f      	adds	r3, #47	; 0x2f
 800b4d8:	461a      	mov	r2, r3
 800b4da:	4b88      	ldr	r3, [pc, #544]	; (800b6fc <WritingFree_IT+0x24c>)
 800b4dc:	605a      	str	r2, [r3, #4]
	TIM4->CNT = INITIAL_PULSE;
 800b4de:	4b88      	ldr	r3, [pc, #544]	; (800b700 <WritingFree_IT+0x250>)
 800b4e0:	f247 522f 	movw	r2, #29999	; 0x752f
 800b4e4:	625a      	str	r2, [r3, #36]	; 0x24

	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800b4e6:	4b85      	ldr	r3, [pc, #532]	; (800b6fc <WritingFree_IT+0x24c>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	ee07 3a90 	vmov	s15, r3
 800b4ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4f2:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800b704 <WritingFree_IT+0x254>
 800b4f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4fa:	4b83      	ldr	r3, [pc, #524]	; (800b708 <WritingFree_IT+0x258>)
 800b4fc:	edc3 7a00 	vstr	s15, [r3]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800b500:	4b7e      	ldr	r3, [pc, #504]	; (800b6fc <WritingFree_IT+0x24c>)
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	ee07 3a90 	vmov	s15, r3
 800b508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b50c:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b704 <WritingFree_IT+0x254>
 800b510:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b514:	4b7c      	ldr	r3, [pc, #496]	; (800b708 <WritingFree_IT+0x258>)
 800b516:	edc3 7a01 	vstr	s15, [r3, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800b51a:	4b7b      	ldr	r3, [pc, #492]	; (800b708 <WritingFree_IT+0x258>)
 800b51c:	ed93 7a00 	vldr	s14, [r3]
 800b520:	4b79      	ldr	r3, [pc, #484]	; (800b708 <WritingFree_IT+0x258>)
 800b522:	edd3 7a01 	vldr	s15, [r3, #4]
 800b526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b52a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b52e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b532:	4b75      	ldr	r3, [pc, #468]	; (800b708 <WritingFree_IT+0x258>)
 800b534:	edc3 7a02 	vstr	s15, [r3, #8]
//			velodebug_flag = 0;
//		}
//
//	}
	//移動量 mm/msを積算
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800b538:	4b74      	ldr	r3, [pc, #464]	; (800b70c <WritingFree_IT+0x25c>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	4b6f      	ldr	r3, [pc, #444]	; (800b6fc <WritingFree_IT+0x24c>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4413      	add	r3, r2
 800b542:	4a72      	ldr	r2, [pc, #456]	; (800b70c <WritingFree_IT+0x25c>)
 800b544:	6013      	str	r3, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800b546:	4b71      	ldr	r3, [pc, #452]	; (800b70c <WritingFree_IT+0x25c>)
 800b548:	685a      	ldr	r2, [r3, #4]
 800b54a:	4b6c      	ldr	r3, [pc, #432]	; (800b6fc <WritingFree_IT+0x24c>)
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	4413      	add	r3, r2
 800b550:	4a6e      	ldr	r2, [pc, #440]	; (800b70c <WritingFree_IT+0x25c>)
 800b552:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800b554:	4b6d      	ldr	r3, [pc, #436]	; (800b70c <WritingFree_IT+0x25c>)
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	4b6c      	ldr	r3, [pc, #432]	; (800b70c <WritingFree_IT+0x25c>)
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	4413      	add	r3, r2
 800b55e:	4a6b      	ldr	r2, [pc, #428]	; (800b70c <WritingFree_IT+0x25c>)
 800b560:	6093      	str	r3, [r2, #8]
#if 1

	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
 800b562:	2138      	movs	r1, #56	; 0x38
 800b564:	2037      	movs	r0, #55	; 0x37
 800b566:	f004 fdb7 	bl	80100d8 <ReadIMU>
 800b56a:	eef0 7a40 	vmov.f32	s15, s0
 800b56e:	4b68      	ldr	r3, [pc, #416]	; (800b710 <WritingFree_IT+0x260>)
 800b570:	edc3 7a00 	vstr	s15, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800b574:	4b66      	ldr	r3, [pc, #408]	; (800b710 <WritingFree_IT+0x260>)
 800b576:	ed93 7a00 	vldr	s14, [r3]
 800b57a:	4b66      	ldr	r3, [pc, #408]	; (800b714 <WritingFree_IT+0x264>)
 800b57c:	edd3 7a00 	vldr	s15, [r3]
 800b580:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b584:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800b718 <WritingFree_IT+0x268>
 800b588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b58c:	edc7 7a01 	vstr	s15, [r7, #4]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f7fc ff11 	bl	80083b8 <__aeabi_f2d>
 800b596:	a354      	add	r3, pc, #336	; (adr r3, 800b6e8 <WritingFree_IT+0x238>)
 800b598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59c:	f7fc ff64 	bl	8008468 <__aeabi_dmul>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	460c      	mov	r4, r1
 800b5a4:	4625      	mov	r5, r4
 800b5a6:	461c      	mov	r4, r3
 800b5a8:	4b5c      	ldr	r3, [pc, #368]	; (800b71c <WritingFree_IT+0x26c>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fc ff03 	bl	80083b8 <__aeabi_f2d>
 800b5b2:	a34f      	add	r3, pc, #316	; (adr r3, 800b6f0 <WritingFree_IT+0x240>)
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	f7fc ff56 	bl	8008468 <__aeabi_dmul>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	f7fc fd9a 	bl	80080fc <__adddf3>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	4621      	mov	r1, r4
 800b5d0:	f7fd fa42 	bl	8008a58 <__aeabi_d2f>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	ee07 3a90 	vmov	s15, r3
 800b5da:	eef1 7a67 	vneg.f32	s15, s15
 800b5de:	4b50      	ldr	r3, [pc, #320]	; (800b720 <WritingFree_IT+0x270>)
 800b5e0:	edc3 7a00 	vstr	s15, [r3]
    zg_last = zg_law;
 800b5e4:	4a4d      	ldr	r2, [pc, #308]	; (800b71c <WritingFree_IT+0x26c>)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6013      	str	r3, [r2, #0]
	Angle += AngularV * T1;
 800b5ea:	4b4d      	ldr	r3, [pc, #308]	; (800b720 <WritingFree_IT+0x270>)
 800b5ec:	edd3 7a00 	vldr	s15, [r3]
 800b5f0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800b724 <WritingFree_IT+0x274>
 800b5f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b5f8:	4b4b      	ldr	r3, [pc, #300]	; (800b728 <WritingFree_IT+0x278>)
 800b5fa:	edd3 7a00 	vldr	s15, [r3]
 800b5fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b602:	4b49      	ldr	r3, [pc, #292]	; (800b728 <WritingFree_IT+0x278>)
 800b604:	edc3 7a00 	vstr	s15, [r3]
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
			}
		}
#endif

	AngularAcceleration += AngularLeapsity;
 800b608:	4b48      	ldr	r3, [pc, #288]	; (800b72c <WritingFree_IT+0x27c>)
 800b60a:	ed93 7a00 	vldr	s14, [r3]
 800b60e:	4b48      	ldr	r3, [pc, #288]	; (800b730 <WritingFree_IT+0x280>)
 800b610:	edd3 7a00 	vldr	s15, [r3]
 800b614:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b618:	4b44      	ldr	r3, [pc, #272]	; (800b72c <WritingFree_IT+0x27c>)
 800b61a:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[BODY] += Acceleration;
 800b61e:	4b45      	ldr	r3, [pc, #276]	; (800b734 <WritingFree_IT+0x284>)
 800b620:	ed93 7a02 	vldr	s14, [r3, #8]
 800b624:	4b44      	ldr	r3, [pc, #272]	; (800b738 <WritingFree_IT+0x288>)
 800b626:	edd3 7a00 	vldr	s15, [r3]
 800b62a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b62e:	4b41      	ldr	r3, [pc, #260]	; (800b734 <WritingFree_IT+0x284>)
 800b630:	edc3 7a02 	vstr	s15, [r3, #8]
	TargetAngularV += AngularAcceleration;
 800b634:	4b41      	ldr	r3, [pc, #260]	; (800b73c <WritingFree_IT+0x28c>)
 800b636:	ed93 7a00 	vldr	s14, [r3]
 800b63a:	4b3c      	ldr	r3, [pc, #240]	; (800b72c <WritingFree_IT+0x27c>)
 800b63c:	edd3 7a00 	vldr	s15, [r3]
 800b640:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b644:	4b3d      	ldr	r3, [pc, #244]	; (800b73c <WritingFree_IT+0x28c>)
 800b646:	edc3 7a00 	vstr	s15, [r3]

	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800b64a:	4b3a      	ldr	r3, [pc, #232]	; (800b734 <WritingFree_IT+0x284>)
 800b64c:	ed93 7a02 	vldr	s14, [r3, #8]
 800b650:	4b3a      	ldr	r3, [pc, #232]	; (800b73c <WritingFree_IT+0x28c>)
 800b652:	edd3 7a00 	vldr	s15, [r3]
 800b656:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800b740 <WritingFree_IT+0x290>
 800b65a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b65e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b662:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b66a:	4b32      	ldr	r3, [pc, #200]	; (800b734 <WritingFree_IT+0x284>)
 800b66c:	edc3 7a01 	vstr	s15, [r3, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800b670:	4b32      	ldr	r3, [pc, #200]	; (800b73c <WritingFree_IT+0x28c>)
 800b672:	edd3 7a00 	vldr	s15, [r3]
 800b676:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b740 <WritingFree_IT+0x290>
 800b67a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b67e:	4b2d      	ldr	r3, [pc, #180]	; (800b734 <WritingFree_IT+0x284>)
 800b680:	edd3 7a01 	vldr	s15, [r3, #4]
 800b684:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b688:	4b2a      	ldr	r3, [pc, #168]	; (800b734 <WritingFree_IT+0x284>)
 800b68a:	edc3 7a00 	vstr	s15, [r3]

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800b68e:	4b29      	ldr	r3, [pc, #164]	; (800b734 <WritingFree_IT+0x284>)
 800b690:	edd3 7a00 	vldr	s15, [r3]
 800b694:	4b1c      	ldr	r3, [pc, #112]	; (800b708 <WritingFree_IT+0x258>)
 800b696:	ed93 7a00 	vldr	s14, [r3]
 800b69a:	eef0 0a47 	vmov.f32	s1, s14
 800b69e:	eeb0 0a67 	vmov.f32	s0, s15
 800b6a2:	2004      	movs	r0, #4
 800b6a4:	f005 fc68 	bl	8010f78 <PIDControl>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	4b26      	ldr	r3, [pc, #152]	; (800b744 <WritingFree_IT+0x294>)
 800b6ac:	601a      	str	r2, [r3, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800b6ae:	4b21      	ldr	r3, [pc, #132]	; (800b734 <WritingFree_IT+0x284>)
 800b6b0:	edd3 7a01 	vldr	s15, [r3, #4]
 800b6b4:	4b14      	ldr	r3, [pc, #80]	; (800b708 <WritingFree_IT+0x258>)
 800b6b6:	ed93 7a01 	vldr	s14, [r3, #4]
 800b6ba:	eef0 0a47 	vmov.f32	s1, s14
 800b6be:	eeb0 0a67 	vmov.f32	s0, s15
 800b6c2:	2005      	movs	r0, #5
 800b6c4:	f005 fc58 	bl	8010f78 <PIDControl>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	4b1f      	ldr	r3, [pc, #124]	; (800b748 <WritingFree_IT+0x298>)
 800b6cc:	601a      	str	r2, [r3, #0]

	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800b6ce:	4b1d      	ldr	r3, [pc, #116]	; (800b744 <WritingFree_IT+0x294>)
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	4b1d      	ldr	r3, [pc, #116]	; (800b748 <WritingFree_IT+0x298>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	4610      	mov	r0, r2
 800b6da:	f004 ff55 	bl	8010588 <Motor_Switch>


}
 800b6de:	bf00      	nop
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bdb0      	pop	{r4, r5, r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	47ae147b 	.word	0x47ae147b
 800b6ec:	3f847ae1 	.word	0x3f847ae1
 800b6f0:	7ae147ae 	.word	0x7ae147ae
 800b6f4:	3fefae14 	.word	0x3fefae14
 800b6f8:	40000400 	.word	0x40000400
 800b6fc:	200006e0 	.word	0x200006e0
 800b700:	40000800 	.word	0x40000800
 800b704:	3f8177cd 	.word	0x3f8177cd
 800b708:	20000530 	.word	0x20000530
 800b70c:	20000524 	.word	0x20000524
 800b710:	200002d8 	.word	0x200002d8
 800b714:	200002d4 	.word	0x200002d4
 800b718:	3a8b7d78 	.word	0x3a8b7d78
 800b71c:	20000220 	.word	0x20000220
 800b720:	20000224 	.word	0x20000224
 800b724:	3a83126f 	.word	0x3a83126f
 800b728:	20000228 	.word	0x20000228
 800b72c:	20000230 	.word	0x20000230
 800b730:	20000234 	.word	0x20000234
 800b734:	200004f0 	.word	0x200004f0
 800b738:	2000022c 	.word	0x2000022c
 800b73c:	20000500 	.word	0x20000500
 800b740:	4209999a 	.word	0x4209999a
 800b744:	2000061c 	.word	0x2000061c
 800b748:	20000638 	.word	0x20000638

0800b74c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a26      	ldr	r2, [pc, #152]	; (800b7f0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d10e      	bne.n	800b77a <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		switch(IT_mode){
 800b75c:	4b25      	ldr	r3, [pc, #148]	; (800b7f4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b06      	cmp	r3, #6
 800b762:	d004      	beq.n	800b76e <HAL_TIM_PeriodElapsedCallback+0x22>
 800b764:	2b07      	cmp	r3, #7
 800b766:	d005      	beq.n	800b774 <HAL_TIM_PeriodElapsedCallback+0x28>
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d008      	beq.n	800b77e <HAL_TIM_PeriodElapsedCallback+0x32>
			break;
		case 2:

			break;
		default :
			break;
 800b76c:	e008      	b.n	800b780 <HAL_TIM_PeriodElapsedCallback+0x34>
			Explore_IT();
 800b76e:	f7ff fc3f 	bl	800aff0 <Explore_IT>
			break;
 800b772:	e005      	b.n	800b780 <HAL_TIM_PeriodElapsedCallback+0x34>
			WritingFree_IT();
 800b774:	f7ff fe9c 	bl	800b4b0 <WritingFree_IT>
			break;
 800b778:	e002      	b.n	800b780 <HAL_TIM_PeriodElapsedCallback+0x34>
		}
	}
 800b77a:	bf00      	nop
 800b77c:	e000      	b.n	800b780 <HAL_TIM_PeriodElapsedCallback+0x34>
			break;
 800b77e:	bf00      	nop

	if( htim == &htim8)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a1d      	ldr	r2, [pc, #116]	; (800b7f8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d12f      	bne.n	800b7e8 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		//timer8 += t;

		//壁センサデータの更新
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800b788:	4b1c      	ldr	r3, [pc, #112]	; (800b7fc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2200      	movs	r2, #0
 800b78e:	4619      	mov	r1, r3
 800b790:	200a      	movs	r0, #10
 800b792:	f004 ff69 	bl	8010668 <GetWallDataAverage>
 800b796:	eef0 7a40 	vmov.f32	s15, s0
 800b79a:	4b19      	ldr	r3, [pc, #100]	; (800b800 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b79c:	edc3 7a00 	vstr	s15, [r3]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800b7a0:	4b16      	ldr	r3, [pc, #88]	; (800b7fc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	200a      	movs	r0, #10
 800b7aa:	f004 ff5d 	bl	8010668 <GetWallDataAverage>
 800b7ae:	eef0 7a40 	vmov.f32	s15, s0
 800b7b2:	4b13      	ldr	r3, [pc, #76]	; (800b800 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b7b4:	edc3 7a01 	vstr	s15, [r3, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800b7b8:	4b12      	ldr	r3, [pc, #72]	; (800b804 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2202      	movs	r2, #2
 800b7be:	4619      	mov	r1, r3
 800b7c0:	200a      	movs	r0, #10
 800b7c2:	f004 ff51 	bl	8010668 <GetWallDataAverage>
 800b7c6:	eef0 7a40 	vmov.f32	s15, s0
 800b7ca:	4b0d      	ldr	r3, [pc, #52]	; (800b800 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b7cc:	edc3 7a02 	vstr	s15, [r3, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800b7d0:	4b0c      	ldr	r3, [pc, #48]	; (800b804 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	2203      	movs	r2, #3
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	200a      	movs	r0, #10
 800b7da:	f004 ff45 	bl	8010668 <GetWallDataAverage>
 800b7de:	eef0 7a40 	vmov.f32	s15, s0
 800b7e2:	4b07      	ldr	r3, [pc, #28]	; (800b800 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b7e4:	edc3 7a03 	vstr	s15, [r3, #12]
	}
}
 800b7e8:	bf00      	nop
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	200009e0 	.word	0x200009e0
 800b7f4:	200004e4 	.word	0x200004e4
 800b7f8:	20000798 	.word	0x20000798
 800b7fc:	200002c0 	.word	0x200002c0
 800b800:	20000564 	.word	0x20000564
 800b804:	200002cc 	.word	0x200002cc

0800b808 <flash_store_init>:
//{
//
//}
//壁データの初期化
void flash_store_init()
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800b80e:	4b30      	ldr	r3, [pc, #192]	; (800b8d0 <flash_store_init+0xc8>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	60fb      	str	r3, [r7, #12]

	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b814:	2300      	movs	r3, #0
 800b816:	60bb      	str	r3, [r7, #8]
 800b818:	e053      	b.n	800b8c2 <flash_store_init+0xba>
	{
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b81a:	2300      	movs	r3, #0
 800b81c:	607b      	str	r3, [r7, #4]
 800b81e:	e04a      	b.n	800b8b6 <flash_store_init+0xae>
			{
				FLASH_Write_Word(address+0, Wall[i][j].north);
 800b820:	492c      	ldr	r1, [pc, #176]	; (800b8d4 <flash_store_init+0xcc>)
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	4613      	mov	r3, r2
 800b826:	00db      	lsls	r3, r3, #3
 800b828:	4413      	add	r3, r2
 800b82a:	68ba      	ldr	r2, [r7, #8]
 800b82c:	4413      	add	r3, r2
 800b82e:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b832:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b836:	b2db      	uxtb	r3, r3
 800b838:	4619      	mov	r1, r3
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f004 fb28 	bl	800fe90 <FLASH_Write_Word>
				FLASH_Write_Word(address+4, Wall[i][j].east);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	1d18      	adds	r0, r3, #4
 800b844:	4923      	ldr	r1, [pc, #140]	; (800b8d4 <flash_store_init+0xcc>)
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	4613      	mov	r3, r2
 800b84a:	00db      	lsls	r3, r3, #3
 800b84c:	4413      	add	r3, r2
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	4413      	add	r3, r2
 800b852:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b856:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	4619      	mov	r1, r3
 800b85e:	f004 fb17 	bl	800fe90 <FLASH_Write_Word>
				FLASH_Write_Word(address+8, Wall[i][j].south);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f103 0008 	add.w	r0, r3, #8
 800b868:	491a      	ldr	r1, [pc, #104]	; (800b8d4 <flash_store_init+0xcc>)
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	4613      	mov	r3, r2
 800b86e:	00db      	lsls	r3, r3, #3
 800b870:	4413      	add	r3, r2
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	4413      	add	r3, r2
 800b876:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b87a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	4619      	mov	r1, r3
 800b882:	f004 fb05 	bl	800fe90 <FLASH_Write_Word>
				FLASH_Write_Word(address+12, Wall[i][j].west);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f103 000c 	add.w	r0, r3, #12
 800b88c:	4911      	ldr	r1, [pc, #68]	; (800b8d4 <flash_store_init+0xcc>)
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	4613      	mov	r3, r2
 800b892:	00db      	lsls	r3, r3, #3
 800b894:	4413      	add	r3, r2
 800b896:	68ba      	ldr	r2, [r7, #8]
 800b898:	4413      	add	r3, r2
 800b89a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b89e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	f004 faf3 	bl	800fe90 <FLASH_Write_Word>
				address += 16;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3310      	adds	r3, #16
 800b8ae:	60fb      	str	r3, [r7, #12]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	607b      	str	r3, [r7, #4]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b08      	cmp	r3, #8
 800b8ba:	ddb1      	ble.n	800b820 <flash_store_init+0x18>
	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	60bb      	str	r3, [r7, #8]
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	2b08      	cmp	r3, #8
 800b8c6:	dda8      	ble.n	800b81a <flash_store_init+0x12>
			}
	}
}
 800b8c8:	bf00      	nop
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	0801b880 	.word	0x0801b880
 800b8d4:	200006ec 	.word	0x200006ec

0800b8d8 <wall_init>:
void wall_init(){
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b8de:	2300      	movs	r3, #0
 800b8e0:	60fb      	str	r3, [r7, #12]
 800b8e2:	e043      	b.n	800b96c <wall_init+0x94>
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	60bb      	str	r3, [r7, #8]
 800b8e8:	e03a      	b.n	800b960 <wall_init+0x88>
				Wall[i][j].north = UNKNOWN;
 800b8ea:	494b      	ldr	r1, [pc, #300]	; (800ba18 <wall_init+0x140>)
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	00db      	lsls	r3, r3, #3
 800b8f2:	4413      	add	r3, r2
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	441a      	add	r2, r3
 800b8f8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b8fc:	2002      	movs	r0, #2
 800b8fe:	f360 0301 	bfi	r3, r0, #0, #2
 800b902:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = UNKNOWN;
 800b906:	4944      	ldr	r1, [pc, #272]	; (800ba18 <wall_init+0x140>)
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	4613      	mov	r3, r2
 800b90c:	00db      	lsls	r3, r3, #3
 800b90e:	4413      	add	r3, r2
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	441a      	add	r2, r3
 800b914:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b918:	2002      	movs	r0, #2
 800b91a:	f360 0383 	bfi	r3, r0, #2, #2
 800b91e:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = UNKNOWN;
 800b922:	493d      	ldr	r1, [pc, #244]	; (800ba18 <wall_init+0x140>)
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	4613      	mov	r3, r2
 800b928:	00db      	lsls	r3, r3, #3
 800b92a:	4413      	add	r3, r2
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	441a      	add	r2, r3
 800b930:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b934:	2002      	movs	r0, #2
 800b936:	f360 1305 	bfi	r3, r0, #4, #2
 800b93a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = UNKNOWN;
 800b93e:	4936      	ldr	r1, [pc, #216]	; (800ba18 <wall_init+0x140>)
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	4613      	mov	r3, r2
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	4413      	add	r3, r2
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	441a      	add	r2, r3
 800b94c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b950:	2002      	movs	r0, #2
 800b952:	f360 1387 	bfi	r3, r0, #6, #2
 800b956:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	3301      	adds	r3, #1
 800b95e:	60bb      	str	r3, [r7, #8]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	2b08      	cmp	r3, #8
 800b964:	ddc1      	ble.n	800b8ea <wall_init+0x12>
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	3301      	adds	r3, #1
 800b96a:	60fb      	str	r3, [r7, #12]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b08      	cmp	r3, #8
 800b970:	ddb8      	ble.n	800b8e4 <wall_init+0xc>

			}
	}

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800b972:	2300      	movs	r3, #0
 800b974:	607b      	str	r3, [r7, #4]
 800b976:	e030      	b.n	800b9da <wall_init+0x102>
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800b978:	4927      	ldr	r1, [pc, #156]	; (800ba18 <wall_init+0x140>)
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	4613      	mov	r3, r2
 800b97e:	00db      	lsls	r3, r3, #3
 800b980:	4413      	add	r3, r2
 800b982:	005b      	lsls	r3, r3, #1
 800b984:	440b      	add	r3, r1
 800b986:	f103 0210 	add.w	r2, r3, #16
 800b98a:	7813      	ldrb	r3, [r2, #0]
 800b98c:	2101      	movs	r1, #1
 800b98e:	f361 0301 	bfi	r3, r1, #0, #2
 800b992:	7013      	strb	r3, [r2, #0]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800b994:	4920      	ldr	r1, [pc, #128]	; (800ba18 <wall_init+0x140>)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b99c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	f360 0383 	bfi	r3, r0, #2, #2
 800b9a6:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		Wall[n][0].south = WALL;
 800b9aa:	491b      	ldr	r1, [pc, #108]	; (800ba18 <wall_init+0x140>)
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	00db      	lsls	r3, r3, #3
 800b9b2:	4413      	add	r3, r2
 800b9b4:	005b      	lsls	r3, r3, #1
 800b9b6:	18ca      	adds	r2, r1, r3
 800b9b8:	7813      	ldrb	r3, [r2, #0]
 800b9ba:	2101      	movs	r1, #1
 800b9bc:	f361 1305 	bfi	r3, r1, #4, #2
 800b9c0:	7013      	strb	r3, [r2, #0]
		Wall[0][n].west = WALL;
 800b9c2:	4915      	ldr	r1, [pc, #84]	; (800ba18 <wall_init+0x140>)
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b9ca:	2001      	movs	r0, #1
 800b9cc:	f360 1387 	bfi	r3, r0, #6, #2
 800b9d0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	607b      	str	r3, [r7, #4]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2b08      	cmp	r3, #8
 800b9de:	ddcb      	ble.n	800b978 <wall_init+0xa0>
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
 800b9e0:	4a0d      	ldr	r2, [pc, #52]	; (800ba18 <wall_init+0x140>)
 800b9e2:	7813      	ldrb	r3, [r2, #0]
 800b9e4:	2101      	movs	r1, #1
 800b9e6:	f361 0383 	bfi	r3, r1, #2, #2
 800b9ea:	7013      	strb	r3, [r2, #0]
	Wall[0][0].north = NOWALL;
 800b9ec:	4a0a      	ldr	r2, [pc, #40]	; (800ba18 <wall_init+0x140>)
 800b9ee:	7813      	ldrb	r3, [r2, #0]
 800b9f0:	f36f 0301 	bfc	r3, #0, #2
 800b9f4:	7013      	strb	r3, [r2, #0]
	Wall[1][0].west = WALL;
 800b9f6:	4a08      	ldr	r2, [pc, #32]	; (800ba18 <wall_init+0x140>)
 800b9f8:	7c93      	ldrb	r3, [r2, #18]
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	f361 1387 	bfi	r3, r1, #6, #2
 800ba00:	7493      	strb	r3, [r2, #18]
	Wall[0][1].south = NOWALL;
 800ba02:	4a05      	ldr	r2, [pc, #20]	; (800ba18 <wall_init+0x140>)
 800ba04:	7893      	ldrb	r3, [r2, #2]
 800ba06:	f36f 1305 	bfc	r3, #4, #2
 800ba0a:	7093      	strb	r3, [r2, #2]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800ba0c:	bf00      	nop
 800ba0e:	3714      	adds	r7, #20
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr
 800ba18:	200006ec 	.word	0x200006ec

0800ba1c <wall_set>:
	FLASH_Write_Word(address+8, Wall[x][y].south);
	FLASH_Write_Word(address+12, Wall[x][y].west);

}
//壁の更新xyグローバル
void wall_set(){
 800ba1c:	b490      	push	{r4, r7}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	//壁センサ値を読んで、各方角の壁の有無を判定
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ba22:	4b96      	ldr	r3, [pc, #600]	; (800bc7c <wall_set+0x260>)
 800ba24:	ed93 7a00 	vldr	s14, [r3]
 800ba28:	4b94      	ldr	r3, [pc, #592]	; (800bc7c <wall_set+0x260>)
 800ba2a:	edd3 7a03 	vldr	s15, [r3, #12]
 800ba2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba32:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ba36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba3a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800bc80 <wall_set+0x264>
 800ba3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba46:	bfcc      	ite	gt
 800ba48:	2301      	movgt	r3, #1
 800ba4a:	2300      	movle	r3, #0
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	4b8d      	ldr	r3, [pc, #564]	; (800bc84 <wall_set+0x268>)
 800ba50:	7adb      	ldrb	r3, [r3, #11]
 800ba52:	f107 0108 	add.w	r1, r7, #8
 800ba56:	440b      	add	r3, r1
 800ba58:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800ba5c:	4b87      	ldr	r3, [pc, #540]	; (800bc7c <wall_set+0x260>)
 800ba5e:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba62:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800bc88 <wall_set+0x26c>
 800ba66:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6e:	bfcc      	ite	gt
 800ba70:	2301      	movgt	r3, #1
 800ba72:	2300      	movle	r3, #0
 800ba74:	b2d9      	uxtb	r1, r3
 800ba76:	4b83      	ldr	r3, [pc, #524]	; (800bc84 <wall_set+0x268>)
 800ba78:	7adb      	ldrb	r3, [r3, #11]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	425a      	negs	r2, r3
 800ba7e:	f003 0303 	and.w	r3, r3, #3
 800ba82:	f002 0203 	and.w	r2, r2, #3
 800ba86:	bf58      	it	pl
 800ba88:	4253      	negpl	r3, r2
 800ba8a:	460a      	mov	r2, r1
 800ba8c:	f107 0108 	add.w	r1, r7, #8
 800ba90:	440b      	add	r3, r1
 800ba92:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800ba96:	4b7b      	ldr	r3, [pc, #492]	; (800bc84 <wall_set+0x268>)
 800ba98:	7adb      	ldrb	r3, [r3, #11]
 800ba9a:	3302      	adds	r3, #2
 800ba9c:	425a      	negs	r2, r3
 800ba9e:	f003 0303 	and.w	r3, r3, #3
 800baa2:	f002 0203 	and.w	r2, r2, #3
 800baa6:	bf58      	it	pl
 800baa8:	4253      	negpl	r3, r2
 800baaa:	f107 0208 	add.w	r2, r7, #8
 800baae:	4413      	add	r3, r2
 800bab0:	2200      	movs	r2, #0
 800bab2:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800bab6:	4b71      	ldr	r3, [pc, #452]	; (800bc7c <wall_set+0x260>)
 800bab8:	edd3 7a02 	vldr	s15, [r3, #8]
 800babc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bc8c <wall_set+0x270>
 800bac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac8:	bfcc      	ite	gt
 800baca:	2301      	movgt	r3, #1
 800bacc:	2300      	movle	r3, #0
 800bace:	b2d9      	uxtb	r1, r3
 800bad0:	4b6c      	ldr	r3, [pc, #432]	; (800bc84 <wall_set+0x268>)
 800bad2:	7adb      	ldrb	r3, [r3, #11]
 800bad4:	3303      	adds	r3, #3
 800bad6:	425a      	negs	r2, r3
 800bad8:	f003 0303 	and.w	r3, r3, #3
 800badc:	f002 0203 	and.w	r2, r2, #3
 800bae0:	bf58      	it	pl
 800bae2:	4253      	negpl	r3, r2
 800bae4:	460a      	mov	r2, r1
 800bae6:	f107 0108 	add.w	r1, r7, #8
 800baea:	440b      	add	r3, r1
 800baec:	f803 2c04 	strb.w	r2, [r3, #-4]

	  //各方角の壁に壁の有無を代入
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800baf0:	7939      	ldrb	r1, [r7, #4]
 800baf2:	4b64      	ldr	r3, [pc, #400]	; (800bc84 <wall_set+0x268>)
 800baf4:	7a1b      	ldrb	r3, [r3, #8]
 800baf6:	461a      	mov	r2, r3
 800baf8:	4b62      	ldr	r3, [pc, #392]	; (800bc84 <wall_set+0x268>)
 800bafa:	7a5b      	ldrb	r3, [r3, #9]
 800bafc:	461c      	mov	r4, r3
 800bafe:	460b      	mov	r3, r1
 800bb00:	f003 0303 	and.w	r3, r3, #3
 800bb04:	b2d8      	uxtb	r0, r3
 800bb06:	4962      	ldr	r1, [pc, #392]	; (800bc90 <wall_set+0x274>)
 800bb08:	4613      	mov	r3, r2
 800bb0a:	00db      	lsls	r3, r3, #3
 800bb0c:	4413      	add	r3, r2
 800bb0e:	191a      	adds	r2, r3, r4
 800bb10:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb14:	f360 0301 	bfi	r3, r0, #0, #2
 800bb18:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
 800bb1c:	7979      	ldrb	r1, [r7, #5]
 800bb1e:	4b59      	ldr	r3, [pc, #356]	; (800bc84 <wall_set+0x268>)
 800bb20:	7a1b      	ldrb	r3, [r3, #8]
 800bb22:	461a      	mov	r2, r3
 800bb24:	4b57      	ldr	r3, [pc, #348]	; (800bc84 <wall_set+0x268>)
 800bb26:	7a5b      	ldrb	r3, [r3, #9]
 800bb28:	461c      	mov	r4, r3
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	f003 0303 	and.w	r3, r3, #3
 800bb30:	b2d8      	uxtb	r0, r3
 800bb32:	4957      	ldr	r1, [pc, #348]	; (800bc90 <wall_set+0x274>)
 800bb34:	4613      	mov	r3, r2
 800bb36:	00db      	lsls	r3, r3, #3
 800bb38:	4413      	add	r3, r2
 800bb3a:	191a      	adds	r2, r3, r4
 800bb3c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb40:	f360 0383 	bfi	r3, r0, #2, #2
 800bb44:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
 800bb48:	79b9      	ldrb	r1, [r7, #6]
 800bb4a:	4b4e      	ldr	r3, [pc, #312]	; (800bc84 <wall_set+0x268>)
 800bb4c:	7a1b      	ldrb	r3, [r3, #8]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	4b4c      	ldr	r3, [pc, #304]	; (800bc84 <wall_set+0x268>)
 800bb52:	7a5b      	ldrb	r3, [r3, #9]
 800bb54:	461c      	mov	r4, r3
 800bb56:	460b      	mov	r3, r1
 800bb58:	f003 0303 	and.w	r3, r3, #3
 800bb5c:	b2d8      	uxtb	r0, r3
 800bb5e:	494c      	ldr	r1, [pc, #304]	; (800bc90 <wall_set+0x274>)
 800bb60:	4613      	mov	r3, r2
 800bb62:	00db      	lsls	r3, r3, #3
 800bb64:	4413      	add	r3, r2
 800bb66:	191a      	adds	r2, r3, r4
 800bb68:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb6c:	f360 1305 	bfi	r3, r0, #4, #2
 800bb70:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
 800bb74:	79f9      	ldrb	r1, [r7, #7]
 800bb76:	4b43      	ldr	r3, [pc, #268]	; (800bc84 <wall_set+0x268>)
 800bb78:	7a1b      	ldrb	r3, [r3, #8]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	4b41      	ldr	r3, [pc, #260]	; (800bc84 <wall_set+0x268>)
 800bb7e:	7a5b      	ldrb	r3, [r3, #9]
 800bb80:	461c      	mov	r4, r3
 800bb82:	460b      	mov	r3, r1
 800bb84:	f003 0303 	and.w	r3, r3, #3
 800bb88:	b2d8      	uxtb	r0, r3
 800bb8a:	4941      	ldr	r1, [pc, #260]	; (800bc90 <wall_set+0x274>)
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	00db      	lsls	r3, r3, #3
 800bb90:	4413      	add	r3, r2
 800bb92:	191a      	adds	r2, r3, r4
 800bb94:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb98:	f360 1387 	bfi	r3, r0, #6, #2
 800bb9c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  //端の座標でなければ反対の壁も記入
	  //uint32_t address;
	  if(Pos.NextY < (NUMBER_OF_SQUARES-1) )
 800bba0:	4b38      	ldr	r3, [pc, #224]	; (800bc84 <wall_set+0x268>)
 800bba2:	7a5b      	ldrb	r3, [r3, #9]
 800bba4:	2b07      	cmp	r3, #7
 800bba6:	d815      	bhi.n	800bbd4 <wall_set+0x1b8>
	  {
		  Wall[Pos.NextX][Pos.NextY+1].south = wall_dir[0];//北端でなければ
 800bba8:	7939      	ldrb	r1, [r7, #4]
 800bbaa:	4b36      	ldr	r3, [pc, #216]	; (800bc84 <wall_set+0x268>)
 800bbac:	7a1b      	ldrb	r3, [r3, #8]
 800bbae:	461c      	mov	r4, r3
 800bbb0:	4b34      	ldr	r3, [pc, #208]	; (800bc84 <wall_set+0x268>)
 800bbb2:	7a5b      	ldrb	r3, [r3, #9]
 800bbb4:	1c5a      	adds	r2, r3, #1
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	f003 0303 	and.w	r3, r3, #3
 800bbbc:	b2d8      	uxtb	r0, r3
 800bbbe:	4934      	ldr	r1, [pc, #208]	; (800bc90 <wall_set+0x274>)
 800bbc0:	4623      	mov	r3, r4
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	4423      	add	r3, r4
 800bbc6:	441a      	add	r2, r3
 800bbc8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bbcc:	f360 1305 	bfi	r3, r0, #4, #2
 800bbd0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  //address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY+1)*16*(NUMBER_OF_SQUARES) );
		  //FLASH_Write_Word(address+8, Wall[Pos.NextX][Pos.NextY+1].south);
	  }
	  if(Pos.NextX < (NUMBER_OF_SQUARES-1) )
 800bbd4:	4b2b      	ldr	r3, [pc, #172]	; (800bc84 <wall_set+0x268>)
 800bbd6:	7a1b      	ldrb	r3, [r3, #8]
 800bbd8:	2b07      	cmp	r3, #7
 800bbda:	d815      	bhi.n	800bc08 <wall_set+0x1ec>
	  {
		  Wall[Pos.NextX+1][Pos.NextY].west = wall_dir[1];//東端でなければ
 800bbdc:	7979      	ldrb	r1, [r7, #5]
 800bbde:	4b29      	ldr	r3, [pc, #164]	; (800bc84 <wall_set+0x268>)
 800bbe0:	7a1b      	ldrb	r3, [r3, #8]
 800bbe2:	1c5a      	adds	r2, r3, #1
 800bbe4:	4b27      	ldr	r3, [pc, #156]	; (800bc84 <wall_set+0x268>)
 800bbe6:	7a5b      	ldrb	r3, [r3, #9]
 800bbe8:	461c      	mov	r4, r3
 800bbea:	460b      	mov	r3, r1
 800bbec:	f003 0303 	and.w	r3, r3, #3
 800bbf0:	b2d8      	uxtb	r0, r3
 800bbf2:	4927      	ldr	r1, [pc, #156]	; (800bc90 <wall_set+0x274>)
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	00db      	lsls	r3, r3, #3
 800bbf8:	4413      	add	r3, r2
 800bbfa:	191a      	adds	r2, r3, r4
 800bbfc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bc00:	f360 1387 	bfi	r3, r0, #6, #2
 800bc04:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( (Pos.NextX+1)*16) + ( (Pos.NextY)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+12, Wall[Pos.NextX+1][Pos.NextY].west);
	  }
	  if(Pos.NextY > 0 )
 800bc08:	4b1e      	ldr	r3, [pc, #120]	; (800bc84 <wall_set+0x268>)
 800bc0a:	7a5b      	ldrb	r3, [r3, #9]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d015      	beq.n	800bc3c <wall_set+0x220>
	  {
		  Wall[Pos.NextX][Pos.NextY-1].north = wall_dir[2];//南端でなければ
 800bc10:	79b9      	ldrb	r1, [r7, #6]
 800bc12:	4b1c      	ldr	r3, [pc, #112]	; (800bc84 <wall_set+0x268>)
 800bc14:	7a1b      	ldrb	r3, [r3, #8]
 800bc16:	461c      	mov	r4, r3
 800bc18:	4b1a      	ldr	r3, [pc, #104]	; (800bc84 <wall_set+0x268>)
 800bc1a:	7a5b      	ldrb	r3, [r3, #9]
 800bc1c:	1e5a      	subs	r2, r3, #1
 800bc1e:	460b      	mov	r3, r1
 800bc20:	f003 0303 	and.w	r3, r3, #3
 800bc24:	b2d8      	uxtb	r0, r3
 800bc26:	491a      	ldr	r1, [pc, #104]	; (800bc90 <wall_set+0x274>)
 800bc28:	4623      	mov	r3, r4
 800bc2a:	00db      	lsls	r3, r3, #3
 800bc2c:	4423      	add	r3, r4
 800bc2e:	441a      	add	r2, r3
 800bc30:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bc34:	f360 0301 	bfi	r3, r0, #0, #2
 800bc38:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY-1)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+0, Wall[Pos.NextX][Pos.NextY-1].north);
	  }
	  if(Pos.NextX > 0 )
 800bc3c:	4b11      	ldr	r3, [pc, #68]	; (800bc84 <wall_set+0x268>)
 800bc3e:	7a1b      	ldrb	r3, [r3, #8]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d015      	beq.n	800bc70 <wall_set+0x254>
	  {
		  Wall[Pos.NextX-1][Pos.NextY].east = wall_dir[3];//西端でなければ
 800bc44:	79f9      	ldrb	r1, [r7, #7]
 800bc46:	4b0f      	ldr	r3, [pc, #60]	; (800bc84 <wall_set+0x268>)
 800bc48:	7a1b      	ldrb	r3, [r3, #8]
 800bc4a:	1e5a      	subs	r2, r3, #1
 800bc4c:	4b0d      	ldr	r3, [pc, #52]	; (800bc84 <wall_set+0x268>)
 800bc4e:	7a5b      	ldrb	r3, [r3, #9]
 800bc50:	461c      	mov	r4, r3
 800bc52:	460b      	mov	r3, r1
 800bc54:	f003 0303 	and.w	r3, r3, #3
 800bc58:	b2d8      	uxtb	r0, r3
 800bc5a:	490d      	ldr	r1, [pc, #52]	; (800bc90 <wall_set+0x274>)
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	00db      	lsls	r3, r3, #3
 800bc60:	4413      	add	r3, r2
 800bc62:	191a      	adds	r2, r3, r4
 800bc64:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bc68:	f360 0383 	bfi	r3, r0, #2, #2
 800bc6c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]


	  //一旦flashお休み。
	  //flashに書き込む
//	  wall_store_running(Pos.X,Pos.Y);
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bc90      	pop	{r4, r7}
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	20000564 	.word	0x20000564
 800bc80:	42340000 	.word	0x42340000
 800bc84:	20000000 	.word	0x20000000
 800bc88:	42b40000 	.word	0x42b40000
 800bc8c:	42c80000 	.word	0x42c80000
 800bc90:	200006ec 	.word	0x200006ec

0800bc94 <init_map>:

void init_map(uint8_t goal_x, uint8_t goal_y)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b087      	sub	sp, #28
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	460a      	mov	r2, r1
 800bc9e:	71fb      	strb	r3, [r7, #7]
 800bca0:	4613      	mov	r3, r2
 800bca2:	71bb      	strb	r3, [r7, #6]
//迷路の歩数Mapを初期化する。全体を0xff、引数の座標x,yは0で初期化する

	int i,j;

	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800bca4:	2300      	movs	r3, #0
 800bca6:	617b      	str	r3, [r7, #20]
 800bca8:	e015      	b.n	800bcd6 <init_map+0x42>
	{
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800bcaa:	2300      	movs	r3, #0
 800bcac:	613b      	str	r3, [r7, #16]
 800bcae:	e00c      	b.n	800bcca <init_map+0x36>
		{
			walk_map[i][j] = 255;	//すべて255で埋める
 800bcb0:	4920      	ldr	r1, [pc, #128]	; (800bd34 <init_map+0xa0>)
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	4413      	add	r3, r2
 800bcba:	693a      	ldr	r2, [r7, #16]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	22ff      	movs	r2, #255	; 0xff
 800bcc0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	613b      	str	r3, [r7, #16]
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	2b08      	cmp	r3, #8
 800bcce:	ddef      	ble.n	800bcb0 <init_map+0x1c>
	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	617b      	str	r3, [r7, #20]
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	2b08      	cmp	r3, #8
 800bcda:	dde6      	ble.n	800bcaa <init_map+0x16>
		}
	}
	uint8_t n[2] =
	{
			goal_x + goal_edge_num,
 800bcdc:	4b16      	ldr	r3, [pc, #88]	; (800bd38 <init_map+0xa4>)
 800bcde:	781a      	ldrb	r2, [r3, #0]
 800bce0:	79fb      	ldrb	r3, [r7, #7]
 800bce2:	4413      	add	r3, r2
 800bce4:	b2db      	uxtb	r3, r3
	uint8_t n[2] =
 800bce6:	733b      	strb	r3, [r7, #12]
			goal_y + goal_edge_num
 800bce8:	4b13      	ldr	r3, [pc, #76]	; (800bd38 <init_map+0xa4>)
 800bcea:	781a      	ldrb	r2, [r3, #0]
 800bcec:	79bb      	ldrb	r3, [r7, #6]
 800bcee:	4413      	add	r3, r2
 800bcf0:	b2db      	uxtb	r3, r3
	uint8_t n[2] =
 800bcf2:	737b      	strb	r3, [r7, #13]
	};
	for(; goal_x < n[0]; goal_x++)
 800bcf4:	e013      	b.n	800bd1e <init_map+0x8a>
	{
		for(; goal_y < n[1]; goal_y++)
		{
			walk_map[goal_x][goal_y] = 0;
 800bcf6:	79fa      	ldrb	r2, [r7, #7]
 800bcf8:	79b9      	ldrb	r1, [r7, #6]
 800bcfa:	480e      	ldr	r0, [pc, #56]	; (800bd34 <init_map+0xa0>)
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	4413      	add	r3, r2
 800bd02:	440b      	add	r3, r1
 800bd04:	2200      	movs	r2, #0
 800bd06:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for(; goal_y < n[1]; goal_y++)
 800bd0a:	79bb      	ldrb	r3, [r7, #6]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	71bb      	strb	r3, [r7, #6]
 800bd10:	7b7b      	ldrb	r3, [r7, #13]
 800bd12:	79ba      	ldrb	r2, [r7, #6]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d3ee      	bcc.n	800bcf6 <init_map+0x62>
	for(; goal_x < n[0]; goal_x++)
 800bd18:	79fb      	ldrb	r3, [r7, #7]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	71fb      	strb	r3, [r7, #7]
 800bd1e:	7b3b      	ldrb	r3, [r7, #12]
 800bd20:	79fa      	ldrb	r2, [r7, #7]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d3f4      	bcc.n	800bd10 <init_map+0x7c>
		}
	}
	//set_walk_val_goal(x, y,2);			//ゴール座標の歩数を０に設定
}
 800bd26:	bf00      	nop
 800bd28:	371c      	adds	r7, #28
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop
 800bd34:	20000574 	.word	0x20000574
 800bd38:	20000520 	.word	0x20000520

0800bd3c <make_map>:


void make_map(uint8_t x, uint8_t y, int mask)	//歩数マップを作成する
{
 800bd3c:	b590      	push	{r4, r7, lr}
 800bd3e:	b087      	sub	sp, #28
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	4603      	mov	r3, r0
 800bd44:	603a      	str	r2, [r7, #0]
 800bd46:	71fb      	strb	r3, [r7, #7]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	71bb      	strb	r3, [r7, #6]
//maskの値(MASK_SEARCH or MASK_SECOND)によって、
//探索用の歩数Mapを作るか、最短走行の歩数Mapを作るかが切り替わる
	int i,j;
	_Bool change_flag;			//Map作成終了を見極めるためのフラグ

	init_map(x,y);				//Mapを初期化する
 800bd4c:	79ba      	ldrb	r2, [r7, #6]
 800bd4e:	79fb      	ldrb	r3, [r7, #7]
 800bd50:	4611      	mov	r1, r2
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff ff9e 	bl	800bc94 <init_map>

	do //(6,9)(7,10)に対して、7,11がおかしい。
	{
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73fb      	strb	r3, [r7, #15]
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	e0fa      	b.n	800bf58 <make_map+0x21c>
		{
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800bd62:	2300      	movs	r3, #0
 800bd64:	613b      	str	r3, [r7, #16]
 800bd66:	e0f0      	b.n	800bf4a <make_map+0x20e>
			{
				if(walk_map[i][j] == 255)		//255の場合は次へ
 800bd68:	4981      	ldr	r1, [pc, #516]	; (800bf70 <make_map+0x234>)
 800bd6a:	697a      	ldr	r2, [r7, #20]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	00db      	lsls	r3, r3, #3
 800bd70:	4413      	add	r3, r2
 800bd72:	693a      	ldr	r2, [r7, #16]
 800bd74:	4413      	add	r3, r2
 800bd76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bd7a:	2bff      	cmp	r3, #255	; 0xff
 800bd7c:	f000 80e1 	beq.w	800bf42 <make_map+0x206>
				{
					continue;
				}

				if(j < NUMBER_OF_SQUARES-1)					//範囲チェック
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	2b07      	cmp	r3, #7
 800bd84:	dc34      	bgt.n	800bdf0 <make_map+0xb4>
				{
					if( (Wall[i][j].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800bd86:	497b      	ldr	r1, [pc, #492]	; (800bf74 <make_map+0x238>)
 800bd88:	697a      	ldr	r2, [r7, #20]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	00db      	lsls	r3, r3, #3
 800bd8e:	4413      	add	r3, r2
 800bd90:	693a      	ldr	r2, [r7, #16]
 800bd92:	4413      	add	r3, r2
 800bd94:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bd98:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	461a      	mov	r2, r3
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	4013      	ands	r3, r2
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d123      	bne.n	800bdf0 <make_map+0xb4>
					{
						if(walk_map[i][j+1] == 255)			//まだ値が入っていなければ
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	1c59      	adds	r1, r3, #1
 800bdac:	4870      	ldr	r0, [pc, #448]	; (800bf70 <make_map+0x234>)
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	00db      	lsls	r3, r3, #3
 800bdb4:	4413      	add	r3, r2
 800bdb6:	440b      	add	r3, r1
 800bdb8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800bdbc:	2bff      	cmp	r3, #255	; 0xff
 800bdbe:	d117      	bne.n	800bdf0 <make_map+0xb4>
						{
							walk_map[i][j+1] = walk_map[i][j] + 1;	//値を代入
 800bdc0:	496b      	ldr	r1, [pc, #428]	; (800bf70 <make_map+0x234>)
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	00db      	lsls	r3, r3, #3
 800bdc8:	4413      	add	r3, r2
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	4413      	add	r3, r2
 800bdce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bdd2:	693a      	ldr	r2, [r7, #16]
 800bdd4:	1c51      	adds	r1, r2, #1
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	b29c      	uxth	r4, r3
 800bdda:	4865      	ldr	r0, [pc, #404]	; (800bf70 <make_map+0x234>)
 800bddc:	697a      	ldr	r2, [r7, #20]
 800bdde:	4613      	mov	r3, r2
 800bde0:	00db      	lsls	r3, r3, #3
 800bde2:	4413      	add	r3, r2
 800bde4:	440b      	add	r3, r1
 800bde6:	4622      	mov	r2, r4
 800bde8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800bdec:	2301      	movs	r3, #1
 800bdee:	73fb      	strb	r3, [r7, #15]
						}
					}
				}

				if(i < NUMBER_OF_SQUARES-1)					//範囲チェック
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	2b07      	cmp	r3, #7
 800bdf4:	dc34      	bgt.n	800be60 <make_map+0x124>
				{
					if( (Wall[i][j].east & mask) == NOWALL)		//壁がなければ
 800bdf6:	495f      	ldr	r1, [pc, #380]	; (800bf74 <make_map+0x238>)
 800bdf8:	697a      	ldr	r2, [r7, #20]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	00db      	lsls	r3, r3, #3
 800bdfe:	4413      	add	r3, r2
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	4413      	add	r3, r2
 800be04:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800be08:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	461a      	mov	r2, r3
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	4013      	ands	r3, r2
 800be14:	2b00      	cmp	r3, #0
 800be16:	d123      	bne.n	800be60 <make_map+0x124>
					{
						if(walk_map[i+1][j] == 255)			//値が入っていなければ
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	4954      	ldr	r1, [pc, #336]	; (800bf70 <make_map+0x234>)
 800be1e:	4613      	mov	r3, r2
 800be20:	00db      	lsls	r3, r3, #3
 800be22:	4413      	add	r3, r2
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	4413      	add	r3, r2
 800be28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800be2c:	2bff      	cmp	r3, #255	; 0xff
 800be2e:	d117      	bne.n	800be60 <make_map+0x124>
						{
							walk_map[i+1][j] = walk_map[i][j] + 1;	//値を代入
 800be30:	494f      	ldr	r1, [pc, #316]	; (800bf70 <make_map+0x234>)
 800be32:	697a      	ldr	r2, [r7, #20]
 800be34:	4613      	mov	r3, r2
 800be36:	00db      	lsls	r3, r3, #3
 800be38:	4413      	add	r3, r2
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	4413      	add	r3, r2
 800be3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800be42:	697a      	ldr	r2, [r7, #20]
 800be44:	3201      	adds	r2, #1
 800be46:	3301      	adds	r3, #1
 800be48:	b298      	uxth	r0, r3
 800be4a:	4949      	ldr	r1, [pc, #292]	; (800bf70 <make_map+0x234>)
 800be4c:	4613      	mov	r3, r2
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	4413      	add	r3, r2
 800be52:	693a      	ldr	r2, [r7, #16]
 800be54:	4413      	add	r3, r2
 800be56:	4602      	mov	r2, r0
 800be58:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800be5c:	2301      	movs	r3, #1
 800be5e:	73fb      	strb	r3, [r7, #15]
						}
					}
				}

				if(j > 0)						//範囲チェック
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	2b00      	cmp	r3, #0
 800be64:	dd34      	ble.n	800bed0 <make_map+0x194>
				{
					if( (Wall[i][j].south & mask) == NOWALL)	//壁がなければ
 800be66:	4943      	ldr	r1, [pc, #268]	; (800bf74 <make_map+0x238>)
 800be68:	697a      	ldr	r2, [r7, #20]
 800be6a:	4613      	mov	r3, r2
 800be6c:	00db      	lsls	r3, r3, #3
 800be6e:	4413      	add	r3, r2
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	4413      	add	r3, r2
 800be74:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800be78:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	461a      	mov	r2, r3
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	4013      	ands	r3, r2
 800be84:	2b00      	cmp	r3, #0
 800be86:	d123      	bne.n	800bed0 <make_map+0x194>
					{
						if(walk_map[i][j-1] == 255)			//値が入っていなければ
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	1e59      	subs	r1, r3, #1
 800be8c:	4838      	ldr	r0, [pc, #224]	; (800bf70 <make_map+0x234>)
 800be8e:	697a      	ldr	r2, [r7, #20]
 800be90:	4613      	mov	r3, r2
 800be92:	00db      	lsls	r3, r3, #3
 800be94:	4413      	add	r3, r2
 800be96:	440b      	add	r3, r1
 800be98:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800be9c:	2bff      	cmp	r3, #255	; 0xff
 800be9e:	d117      	bne.n	800bed0 <make_map+0x194>
						{
							walk_map[i][j-1] = walk_map[i][j] + 1;	//値を代入
 800bea0:	4933      	ldr	r1, [pc, #204]	; (800bf70 <make_map+0x234>)
 800bea2:	697a      	ldr	r2, [r7, #20]
 800bea4:	4613      	mov	r3, r2
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	4413      	add	r3, r2
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	4413      	add	r3, r2
 800beae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	1e51      	subs	r1, r2, #1
 800beb6:	3301      	adds	r3, #1
 800beb8:	b29c      	uxth	r4, r3
 800beba:	482d      	ldr	r0, [pc, #180]	; (800bf70 <make_map+0x234>)
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	4613      	mov	r3, r2
 800bec0:	00db      	lsls	r3, r3, #3
 800bec2:	4413      	add	r3, r2
 800bec4:	440b      	add	r3, r1
 800bec6:	4622      	mov	r2, r4
 800bec8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800becc:	2301      	movs	r3, #1
 800bece:	73fb      	strb	r3, [r7, #15]
						}
					}
				}

				if(i > 0)						//範囲チェック
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	dd36      	ble.n	800bf44 <make_map+0x208>
				{
					if( (Wall[i][j].west & mask) == NOWALL)		//壁がなければ
 800bed6:	4927      	ldr	r1, [pc, #156]	; (800bf74 <make_map+0x238>)
 800bed8:	697a      	ldr	r2, [r7, #20]
 800beda:	4613      	mov	r3, r2
 800bedc:	00db      	lsls	r3, r3, #3
 800bede:	4413      	add	r3, r2
 800bee0:	693a      	ldr	r2, [r7, #16]
 800bee2:	4413      	add	r3, r2
 800bee4:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bee8:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800beec:	b2db      	uxtb	r3, r3
 800beee:	461a      	mov	r2, r3
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	4013      	ands	r3, r2
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d125      	bne.n	800bf44 <make_map+0x208>
					{
						if(walk_map[i-1][j] == 255)			//値が入っていなければ
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	1e5a      	subs	r2, r3, #1
 800befc:	491c      	ldr	r1, [pc, #112]	; (800bf70 <make_map+0x234>)
 800befe:	4613      	mov	r3, r2
 800bf00:	00db      	lsls	r3, r3, #3
 800bf02:	4413      	add	r3, r2
 800bf04:	693a      	ldr	r2, [r7, #16]
 800bf06:	4413      	add	r3, r2
 800bf08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bf0c:	2bff      	cmp	r3, #255	; 0xff
 800bf0e:	d119      	bne.n	800bf44 <make_map+0x208>
						{
							walk_map[i-1][j] = walk_map[i][j] + 1;	//値を代入
 800bf10:	4917      	ldr	r1, [pc, #92]	; (800bf70 <make_map+0x234>)
 800bf12:	697a      	ldr	r2, [r7, #20]
 800bf14:	4613      	mov	r3, r2
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	4413      	add	r3, r2
 800bf1a:	693a      	ldr	r2, [r7, #16]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	3a01      	subs	r2, #1
 800bf26:	3301      	adds	r3, #1
 800bf28:	b298      	uxth	r0, r3
 800bf2a:	4911      	ldr	r1, [pc, #68]	; (800bf70 <make_map+0x234>)
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	00db      	lsls	r3, r3, #3
 800bf30:	4413      	add	r3, r2
 800bf32:	693a      	ldr	r2, [r7, #16]
 800bf34:	4413      	add	r3, r2
 800bf36:	4602      	mov	r2, r0
 800bf38:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	73fb      	strb	r3, [r7, #15]
 800bf40:	e000      	b.n	800bf44 <make_map+0x208>
					continue;
 800bf42:	bf00      	nop
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	3301      	adds	r3, #1
 800bf48:	613b      	str	r3, [r7, #16]
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	2b08      	cmp	r3, #8
 800bf4e:	f77f af0b 	ble.w	800bd68 <make_map+0x2c>
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	3301      	adds	r3, #1
 800bf56:	617b      	str	r3, [r7, #20]
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	2b08      	cmp	r3, #8
 800bf5c:	f77f af01 	ble.w	800bd62 <make_map+0x26>

			}

		}

	}while(change_flag == true);	//全体を作り終わるまで待つ
 800bf60:	7bfb      	ldrb	r3, [r7, #15]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f47f aef8 	bne.w	800bd58 <make_map+0x1c>

}
 800bf68:	bf00      	nop
 800bf6a:	371c      	adds	r7, #28
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd90      	pop	{r4, r7, pc}
 800bf70:	20000574 	.word	0x20000574
 800bf74:	200006ec 	.word	0x200006ec

0800bf78 <map_print>:
//		GoalAreaFlag = (Wall[ X_GOAL_LESSER+i][Y_GOAL_LESSER].west == UNKNOWN) ? 0 : 1;
//	}

}
void map_print()
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
	int i,j;
	for(j = NUMBER_OF_SQUARES-1; 0 <= j  ; j--)
 800bf7e:	2308      	movs	r3, #8
 800bf80:	603b      	str	r3, [r7, #0]
 800bf82:	e01b      	b.n	800bfbc <map_print+0x44>
	{
		for(i = 0; i < NUMBER_OF_SQUARES ; i++)
 800bf84:	2300      	movs	r3, #0
 800bf86:	607b      	str	r3, [r7, #4]
 800bf88:	e00f      	b.n	800bfaa <map_print+0x32>
		{
			printf("%d ",walk_map[i][j]);
 800bf8a:	4910      	ldr	r1, [pc, #64]	; (800bfcc <map_print+0x54>)
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	00db      	lsls	r3, r3, #3
 800bf92:	4413      	add	r3, r2
 800bf94:	683a      	ldr	r2, [r7, #0]
 800bf96:	4413      	add	r3, r2
 800bf98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	480c      	ldr	r0, [pc, #48]	; (800bfd0 <map_print+0x58>)
 800bfa0:	f00b f948 	bl	8017234 <iprintf>
		for(i = 0; i < NUMBER_OF_SQUARES ; i++)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	607b      	str	r3, [r7, #4]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2b08      	cmp	r3, #8
 800bfae:	ddec      	ble.n	800bf8a <map_print+0x12>
//			if(j == NUMBER_OF_SQUARES)
//			{
//				printf("\r\n");
//			}
		}
		printf("\r\n");
 800bfb0:	4808      	ldr	r0, [pc, #32]	; (800bfd4 <map_print+0x5c>)
 800bfb2:	f00b f9b3 	bl	801731c <puts>
	for(j = NUMBER_OF_SQUARES-1; 0 <= j  ; j--)
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	603b      	str	r3, [r7, #0]
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	dae0      	bge.n	800bf84 <map_print+0xc>
	}
}
 800bfc2:	bf00      	nop
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	20000574 	.word	0x20000574
 800bfd0:	0801b604 	.word	0x0801b604
 800bfd4:	0801b608 	.word	0x0801b608

0800bfd8 <wall_ram_print>:
	flash_store_init();

}
//壁データの表示
//北から時計回り
void wall_ram_print(){
 800bfd8:	b5b0      	push	{r4, r5, r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af02      	add	r7, sp, #8

	//迷路
	for(int j=NUMBER_OF_SQUARES-1; j >= 0 ; j--){
 800bfde:	2308      	movs	r3, #8
 800bfe0:	607b      	str	r3, [r7, #4]
 800bfe2:	e048      	b.n	800c076 <wall_ram_print+0x9e>
		for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	603b      	str	r3, [r7, #0]
 800bfe8:	e03c      	b.n	800c064 <wall_ram_print+0x8c>
			//メモリの読み出し
			//北東南西の順に表示
			//北東南西 北東南西 ...
			//4回毎にスペース
		    printf("%d%d%d%d ",Wall[i][j].north, Wall[i][j].east, Wall[i][j].south, Wall[i][j].west);
 800bfea:	4929      	ldr	r1, [pc, #164]	; (800c090 <wall_ram_print+0xb8>)
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	4613      	mov	r3, r2
 800bff0:	00db      	lsls	r3, r3, #3
 800bff2:	4413      	add	r3, r2
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	4413      	add	r3, r2
 800bff8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bffc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c000:	b2db      	uxtb	r3, r3
 800c002:	4618      	mov	r0, r3
 800c004:	4922      	ldr	r1, [pc, #136]	; (800c090 <wall_ram_print+0xb8>)
 800c006:	683a      	ldr	r2, [r7, #0]
 800c008:	4613      	mov	r3, r2
 800c00a:	00db      	lsls	r3, r3, #3
 800c00c:	4413      	add	r3, r2
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	4413      	add	r3, r2
 800c012:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c016:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	461c      	mov	r4, r3
 800c01e:	491c      	ldr	r1, [pc, #112]	; (800c090 <wall_ram_print+0xb8>)
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	4613      	mov	r3, r2
 800c024:	00db      	lsls	r3, r3, #3
 800c026:	4413      	add	r3, r2
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	4413      	add	r3, r2
 800c02c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c030:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c034:	b2db      	uxtb	r3, r3
 800c036:	461d      	mov	r5, r3
 800c038:	4915      	ldr	r1, [pc, #84]	; (800c090 <wall_ram_print+0xb8>)
 800c03a:	683a      	ldr	r2, [r7, #0]
 800c03c:	4613      	mov	r3, r2
 800c03e:	00db      	lsls	r3, r3, #3
 800c040:	4413      	add	r3, r2
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	4413      	add	r3, r2
 800c046:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c04a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	462b      	mov	r3, r5
 800c054:	4622      	mov	r2, r4
 800c056:	4601      	mov	r1, r0
 800c058:	480e      	ldr	r0, [pc, #56]	; (800c094 <wall_ram_print+0xbc>)
 800c05a:	f00b f8eb 	bl	8017234 <iprintf>
		for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	3301      	adds	r3, #1
 800c062:	603b      	str	r3, [r7, #0]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	2b08      	cmp	r3, #8
 800c068:	ddbf      	ble.n	800bfea <wall_ram_print+0x12>

		}
		printf("\r\n");
 800c06a:	480b      	ldr	r0, [pc, #44]	; (800c098 <wall_ram_print+0xc0>)
 800c06c:	f00b f956 	bl	801731c <puts>
	for(int j=NUMBER_OF_SQUARES-1; j >= 0 ; j--){
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	3b01      	subs	r3, #1
 800c074:	607b      	str	r3, [r7, #4]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	dab3      	bge.n	800bfe4 <wall_ram_print+0xc>
	}

	printf("\r\n");
 800c07c:	4806      	ldr	r0, [pc, #24]	; (800c098 <wall_ram_print+0xc0>)
 800c07e:	f00b f94d 	bl	801731c <puts>
	printf("\r\n");
 800c082:	4805      	ldr	r0, [pc, #20]	; (800c098 <wall_ram_print+0xc0>)
 800c084:	f00b f94a 	bl	801731c <puts>
}
 800c088:	bf00      	nop
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bdb0      	pop	{r4, r5, r7, pc}
 800c090:	200006ec 	.word	0x200006ec
 800c094:	0801b61c 	.word	0x0801b61c
 800c098:	0801b608 	.word	0x0801b608

0800c09c <flash_copy_to_ram>:
//	}

}

void flash_copy_to_ram()
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b088      	sub	sp, #32
 800c0a0:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800c0a2:	4b42      	ldr	r3, [pc, #264]	; (800c1ac <flash_copy_to_ram+0x110>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	61fb      	str	r3, [r7, #28]

	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	61bb      	str	r3, [r7, #24]
 800c0ac:	e077      	b.n	800c19e <flash_copy_to_ram+0x102>
	{
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	617b      	str	r3, [r7, #20]
 800c0b2:	e06e      	b.n	800c192 <flash_copy_to_ram+0xf6>
			{
				uint32_t wall_data[4]={0};
 800c0b4:	1d3b      	adds	r3, r7, #4
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	601a      	str	r2, [r3, #0]
 800c0ba:	605a      	str	r2, [r3, #4]
 800c0bc:	609a      	str	r2, [r3, #8]
 800c0be:	60da      	str	r2, [r3, #12]
				FLASH_Read_Word(address+0, &wall_data[0]);
 800c0c0:	1d3b      	adds	r3, r7, #4
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	69f8      	ldr	r0, [r7, #28]
 800c0c6:	f003 ff0b 	bl	800fee0 <FLASH_Read_Word>
				FLASH_Read_Word(address+4, &wall_data[1]);
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	1d1a      	adds	r2, r3, #4
 800c0ce:	1d3b      	adds	r3, r7, #4
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	4610      	mov	r0, r2
 800c0d6:	f003 ff03 	bl	800fee0 <FLASH_Read_Word>
				FLASH_Read_Word(address+8, &wall_data[2]);
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	f103 0208 	add.w	r2, r3, #8
 800c0e0:	1d3b      	adds	r3, r7, #4
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	f003 fefa 	bl	800fee0 <FLASH_Read_Word>
				FLASH_Read_Word(address+12, &wall_data[3]);
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	f103 020c 	add.w	r2, r3, #12
 800c0f2:	1d3b      	adds	r3, r7, #4
 800c0f4:	330c      	adds	r3, #12
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	4610      	mov	r0, r2
 800c0fa:	f003 fef1 	bl	800fee0 <FLASH_Read_Word>
				Wall[i][j].north = wall_data[0];
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f003 0303 	and.w	r3, r3, #3
 800c104:	b2d8      	uxtb	r0, r3
 800c106:	492a      	ldr	r1, [pc, #168]	; (800c1b0 <flash_copy_to_ram+0x114>)
 800c108:	697a      	ldr	r2, [r7, #20]
 800c10a:	4613      	mov	r3, r2
 800c10c:	00db      	lsls	r3, r3, #3
 800c10e:	4413      	add	r3, r2
 800c110:	69ba      	ldr	r2, [r7, #24]
 800c112:	441a      	add	r2, r3
 800c114:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c118:	f360 0301 	bfi	r3, r0, #0, #2
 800c11c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = wall_data[1];
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	f003 0303 	and.w	r3, r3, #3
 800c126:	b2d8      	uxtb	r0, r3
 800c128:	4921      	ldr	r1, [pc, #132]	; (800c1b0 <flash_copy_to_ram+0x114>)
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	4613      	mov	r3, r2
 800c12e:	00db      	lsls	r3, r3, #3
 800c130:	4413      	add	r3, r2
 800c132:	69ba      	ldr	r2, [r7, #24]
 800c134:	441a      	add	r2, r3
 800c136:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c13a:	f360 0383 	bfi	r3, r0, #2, #2
 800c13e:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = wall_data[2];
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f003 0303 	and.w	r3, r3, #3
 800c148:	b2d8      	uxtb	r0, r3
 800c14a:	4919      	ldr	r1, [pc, #100]	; (800c1b0 <flash_copy_to_ram+0x114>)
 800c14c:	697a      	ldr	r2, [r7, #20]
 800c14e:	4613      	mov	r3, r2
 800c150:	00db      	lsls	r3, r3, #3
 800c152:	4413      	add	r3, r2
 800c154:	69ba      	ldr	r2, [r7, #24]
 800c156:	441a      	add	r2, r3
 800c158:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c15c:	f360 1305 	bfi	r3, r0, #4, #2
 800c160:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = wall_data[3];
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	f003 0303 	and.w	r3, r3, #3
 800c16a:	b2d8      	uxtb	r0, r3
 800c16c:	4910      	ldr	r1, [pc, #64]	; (800c1b0 <flash_copy_to_ram+0x114>)
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	4613      	mov	r3, r2
 800c172:	00db      	lsls	r3, r3, #3
 800c174:	4413      	add	r3, r2
 800c176:	69ba      	ldr	r2, [r7, #24]
 800c178:	441a      	add	r2, r3
 800c17a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c17e:	f360 1387 	bfi	r3, r0, #6, #2
 800c182:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				address += 16;
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	3310      	adds	r3, #16
 800c18a:	61fb      	str	r3, [r7, #28]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	3301      	adds	r3, #1
 800c190:	617b      	str	r3, [r7, #20]
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	2b08      	cmp	r3, #8
 800c196:	dd8d      	ble.n	800c0b4 <flash_copy_to_ram+0x18>
	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	3301      	adds	r3, #1
 800c19c:	61bb      	str	r3, [r7, #24]
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	2b08      	cmp	r3, #8
 800c1a2:	dd84      	ble.n	800c0ae <flash_copy_to_ram+0x12>
			}
	}

}
 800c1a4:	bf00      	nop
 800c1a6:	3720      	adds	r7, #32
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	0801b880 	.word	0x0801b880
 800c1b0:	200006ec 	.word	0x200006ec

0800c1b4 <setNotExploredArea>:
	}while(flag);

}

int setNotExploredArea(uint8_t *target_x,uint8_t *target_y, uint16_t *walk_val)
{
 800c1b4:	b590      	push	{r4, r7, lr}
 800c1b6:	b0a5      	sub	sp, #148	; 0x94
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
	int not_explored_area_number=0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	_Bool not_explored_area[NUMBER_OF_SQUARES][NUMBER_OF_SQUARES]={0};
 800c1c6:	f107 0310 	add.w	r3, r7, #16
 800c1ca:	2251      	movs	r2, #81	; 0x51
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f00a f9e9 	bl	80165a6 <memset>
	for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c1da:	e163      	b.n	800c4a4 <setNotExploredArea+0x2f0>
	{
		for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c1e2:	e155      	b.n	800c490 <setNotExploredArea+0x2dc>
		{
			//三つ壁があるところは除外する

			if(Wall[i][j].north == UNKNOWN)
 800c1e4:	49bd      	ldr	r1, [pc, #756]	; (800c4dc <setNotExploredArea+0x328>)
 800c1e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	00db      	lsls	r3, r3, #3
 800c1ee:	4413      	add	r3, r2
 800c1f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c1f4:	4413      	add	r3, r2
 800c1f6:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c1fa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b02      	cmp	r3, #2
 800c202:	d144      	bne.n	800c28e <setNotExploredArea+0xda>
			{
				//三つとも壁があるとき以外は見に行く必要がある
				if(!(Wall[i][j].east == WALL && Wall[i][j].south == WALL && Wall[i][j].west == WALL) )
 800c204:	49b5      	ldr	r1, [pc, #724]	; (800c4dc <setNotExploredArea+0x328>)
 800c206:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c20a:	4613      	mov	r3, r2
 800c20c:	00db      	lsls	r3, r3, #3
 800c20e:	4413      	add	r3, r2
 800c210:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c214:	4413      	add	r3, r2
 800c216:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c21a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b01      	cmp	r3, #1
 800c222:	d120      	bne.n	800c266 <setNotExploredArea+0xb2>
 800c224:	49ad      	ldr	r1, [pc, #692]	; (800c4dc <setNotExploredArea+0x328>)
 800c226:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c22a:	4613      	mov	r3, r2
 800c22c:	00db      	lsls	r3, r3, #3
 800c22e:	4413      	add	r3, r2
 800c230:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c234:	4413      	add	r3, r2
 800c236:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c23a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	2b01      	cmp	r3, #1
 800c242:	d110      	bne.n	800c266 <setNotExploredArea+0xb2>
 800c244:	49a5      	ldr	r1, [pc, #660]	; (800c4dc <setNotExploredArea+0x328>)
 800c246:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c24a:	4613      	mov	r3, r2
 800c24c:	00db      	lsls	r3, r3, #3
 800c24e:	4413      	add	r3, r2
 800c250:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c254:	4413      	add	r3, r2
 800c256:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c25a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c25e:	b2db      	uxtb	r3, r3
 800c260:	2b01      	cmp	r3, #1
 800c262:	f000 8110 	beq.w	800c486 <setNotExploredArea+0x2d2>
				{
					not_explored_area_number ++;
 800c266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c26a:	3301      	adds	r3, #1
 800c26c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					not_explored_area[i][j] = 1;
 800c270:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c274:	4613      	mov	r3, r2
 800c276:	00db      	lsls	r3, r3, #3
 800c278:	4413      	add	r3, r2
 800c27a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800c27e:	441a      	add	r2, r3
 800c280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c284:	4413      	add	r3, r2
 800c286:	3b80      	subs	r3, #128	; 0x80
 800c288:	2201      	movs	r2, #1
 800c28a:	701a      	strb	r2, [r3, #0]
 800c28c:	e0fb      	b.n	800c486 <setNotExploredArea+0x2d2>
				}
			}
			else if(Wall[i][j].east == UNKNOWN)
 800c28e:	4993      	ldr	r1, [pc, #588]	; (800c4dc <setNotExploredArea+0x328>)
 800c290:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c294:	4613      	mov	r3, r2
 800c296:	00db      	lsls	r3, r3, #3
 800c298:	4413      	add	r3, r2
 800c29a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c29e:	4413      	add	r3, r2
 800c2a0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c2a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d144      	bne.n	800c338 <setNotExploredArea+0x184>
			{
				if(!(Wall[i][j].south == WALL && Wall[i][j].west == WALL && Wall[i][j].north == WALL) )
 800c2ae:	498b      	ldr	r1, [pc, #556]	; (800c4dc <setNotExploredArea+0x328>)
 800c2b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	00db      	lsls	r3, r3, #3
 800c2b8:	4413      	add	r3, r2
 800c2ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c2be:	4413      	add	r3, r2
 800c2c0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c2c4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d120      	bne.n	800c310 <setNotExploredArea+0x15c>
 800c2ce:	4983      	ldr	r1, [pc, #524]	; (800c4dc <setNotExploredArea+0x328>)
 800c2d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	4413      	add	r3, r2
 800c2da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c2de:	4413      	add	r3, r2
 800c2e0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c2e4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d110      	bne.n	800c310 <setNotExploredArea+0x15c>
 800c2ee:	497b      	ldr	r1, [pc, #492]	; (800c4dc <setNotExploredArea+0x328>)
 800c2f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c2fe:	4413      	add	r3, r2
 800c300:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c304:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	f000 80bb 	beq.w	800c486 <setNotExploredArea+0x2d2>
				{
					not_explored_area_number ++;
 800c310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c314:	3301      	adds	r3, #1
 800c316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					not_explored_area[i][j] = 1;
 800c31a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c31e:	4613      	mov	r3, r2
 800c320:	00db      	lsls	r3, r3, #3
 800c322:	4413      	add	r3, r2
 800c324:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800c328:	441a      	add	r2, r3
 800c32a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c32e:	4413      	add	r3, r2
 800c330:	3b80      	subs	r3, #128	; 0x80
 800c332:	2201      	movs	r2, #1
 800c334:	701a      	strb	r2, [r3, #0]
 800c336:	e0a6      	b.n	800c486 <setNotExploredArea+0x2d2>
				}
			}
			else if(Wall[i][j].south == UNKNOWN)
 800c338:	4968      	ldr	r1, [pc, #416]	; (800c4dc <setNotExploredArea+0x328>)
 800c33a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c33e:	4613      	mov	r3, r2
 800c340:	00db      	lsls	r3, r3, #3
 800c342:	4413      	add	r3, r2
 800c344:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c348:	4413      	add	r3, r2
 800c34a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c34e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c352:	b2db      	uxtb	r3, r3
 800c354:	2b02      	cmp	r3, #2
 800c356:	d143      	bne.n	800c3e0 <setNotExploredArea+0x22c>
			{
				if(!(Wall[i][j].west == WALL && Wall[i][j].north == WALL && Wall[i][j].east == WALL) )
 800c358:	4960      	ldr	r1, [pc, #384]	; (800c4dc <setNotExploredArea+0x328>)
 800c35a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c35e:	4613      	mov	r3, r2
 800c360:	00db      	lsls	r3, r3, #3
 800c362:	4413      	add	r3, r2
 800c364:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c368:	4413      	add	r3, r2
 800c36a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c36e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b01      	cmp	r3, #1
 800c376:	d11f      	bne.n	800c3b8 <setNotExploredArea+0x204>
 800c378:	4958      	ldr	r1, [pc, #352]	; (800c4dc <setNotExploredArea+0x328>)
 800c37a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c37e:	4613      	mov	r3, r2
 800c380:	00db      	lsls	r3, r3, #3
 800c382:	4413      	add	r3, r2
 800c384:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c388:	4413      	add	r3, r2
 800c38a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c38e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c392:	b2db      	uxtb	r3, r3
 800c394:	2b01      	cmp	r3, #1
 800c396:	d10f      	bne.n	800c3b8 <setNotExploredArea+0x204>
 800c398:	4950      	ldr	r1, [pc, #320]	; (800c4dc <setNotExploredArea+0x328>)
 800c39a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c39e:	4613      	mov	r3, r2
 800c3a0:	00db      	lsls	r3, r3, #3
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c3a8:	4413      	add	r3, r2
 800c3aa:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c3ae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d066      	beq.n	800c486 <setNotExploredArea+0x2d2>
				{
					not_explored_area_number ++;
 800c3b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3bc:	3301      	adds	r3, #1
 800c3be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					not_explored_area[i][j] = 1;
 800c3c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	4413      	add	r3, r2
 800c3cc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800c3d0:	441a      	add	r2, r3
 800c3d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3d6:	4413      	add	r3, r2
 800c3d8:	3b80      	subs	r3, #128	; 0x80
 800c3da:	2201      	movs	r2, #1
 800c3dc:	701a      	strb	r2, [r3, #0]
 800c3de:	e052      	b.n	800c486 <setNotExploredArea+0x2d2>
				}
			}
			else if(Wall[i][j].west == UNKNOWN)
 800c3e0:	493e      	ldr	r1, [pc, #248]	; (800c4dc <setNotExploredArea+0x328>)
 800c3e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	00db      	lsls	r3, r3, #3
 800c3ea:	4413      	add	r3, r2
 800c3ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c3f0:	4413      	add	r3, r2
 800c3f2:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c3f6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	2b02      	cmp	r3, #2
 800c3fe:	d142      	bne.n	800c486 <setNotExploredArea+0x2d2>
			{
				if(!(Wall[i][j].north == WALL && Wall[i][j].east == WALL && Wall[i][j].south == WALL) )
 800c400:	4936      	ldr	r1, [pc, #216]	; (800c4dc <setNotExploredArea+0x328>)
 800c402:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c406:	4613      	mov	r3, r2
 800c408:	00db      	lsls	r3, r3, #3
 800c40a:	4413      	add	r3, r2
 800c40c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c410:	4413      	add	r3, r2
 800c412:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c416:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d11f      	bne.n	800c460 <setNotExploredArea+0x2ac>
 800c420:	492e      	ldr	r1, [pc, #184]	; (800c4dc <setNotExploredArea+0x328>)
 800c422:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c426:	4613      	mov	r3, r2
 800c428:	00db      	lsls	r3, r3, #3
 800c42a:	4413      	add	r3, r2
 800c42c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c430:	4413      	add	r3, r2
 800c432:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c436:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d10f      	bne.n	800c460 <setNotExploredArea+0x2ac>
 800c440:	4926      	ldr	r1, [pc, #152]	; (800c4dc <setNotExploredArea+0x328>)
 800c442:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c446:	4613      	mov	r3, r2
 800c448:	00db      	lsls	r3, r3, #3
 800c44a:	4413      	add	r3, r2
 800c44c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c450:	4413      	add	r3, r2
 800c452:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c456:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d012      	beq.n	800c486 <setNotExploredArea+0x2d2>
				{
					not_explored_area_number ++;
 800c460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c464:	3301      	adds	r3, #1
 800c466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					not_explored_area[i][j] = 1;
 800c46a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c46e:	4613      	mov	r3, r2
 800c470:	00db      	lsls	r3, r3, #3
 800c472:	4413      	add	r3, r2
 800c474:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800c478:	441a      	add	r2, r3
 800c47a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c47e:	4413      	add	r3, r2
 800c480:	3b80      	subs	r3, #128	; 0x80
 800c482:	2201      	movs	r2, #1
 800c484:	701a      	strb	r2, [r3, #0]
		for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800c486:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c48a:	3301      	adds	r3, #1
 800c48c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c494:	2b08      	cmp	r3, #8
 800c496:	f77f aea5 	ble.w	800c1e4 <setNotExploredArea+0x30>
	for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800c49a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c49e:	3301      	adds	r3, #1
 800c4a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c4a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c4a8:	2b08      	cmp	r3, #8
 800c4aa:	f77f ae97 	ble.w	800c1dc <setNotExploredArea+0x28>
			}
		}
	}
#endif
	//行くべき座標に1が入った
	int num = not_explored_area_number;
 800c4ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4b2:	66bb      	str	r3, [r7, #104]	; 0x68
	ChangeLED(7);
 800c4b4:	2007      	movs	r0, #7
 800c4b6:	f003 ff75 	bl	80103a4 <ChangeLED>
	HAL_Delay(1000);
 800c4ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c4be:	f005 f84b 	bl	8011558 <HAL_Delay>
	//行くべき座標のxyを取得
	//ここまで合ってる
	ChangeLED(2);
 800c4c2:	2002      	movs	r0, #2
 800c4c4:	f003 ff6e 	bl	80103a4 <ChangeLED>

	int n = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c4d2:	e02e      	b.n	800c532 <setNotExploredArea+0x37e>
		{
			for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	67bb      	str	r3, [r7, #120]	; 0x78
 800c4d8:	e025      	b.n	800c526 <setNotExploredArea+0x372>
 800c4da:	bf00      	nop
 800c4dc:	200006ec 	.word	0x200006ec
			{
				if(not_explored_area[i][j] == 1)
 800c4e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	00db      	lsls	r3, r3, #3
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800c4ec:	441a      	add	r2, r3
 800c4ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4f0:	4413      	add	r3, r2
 800c4f2:	3b80      	subs	r3, #128	; 0x80
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d012      	beq.n	800c520 <setNotExploredArea+0x36c>
					*target_x = (uint8_t)i;
					*target_y = (uint8_t)j;
					target_x += sizeof(*target_x);
					target_y += sizeof(*target_y);
#else
					target_x[n] = (uint8_t)i;
 800c4fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	4413      	add	r3, r2
 800c502:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c504:	b2d2      	uxtb	r2, r2
 800c506:	701a      	strb	r2, [r3, #0]
					target_y[n] = (uint8_t)j;
 800c508:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c50c:	68ba      	ldr	r2, [r7, #8]
 800c50e:	4413      	add	r3, r2
 800c510:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c512:	b2d2      	uxtb	r2, r2
 800c514:	701a      	strb	r2, [r3, #0]
#endif
					n++;
 800c516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c51a:	3301      	adds	r3, #1
 800c51c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800c520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c522:	3301      	adds	r3, #1
 800c524:	67bb      	str	r3, [r7, #120]	; 0x78
 800c526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c528:	2b08      	cmp	r3, #8
 800c52a:	ddd9      	ble.n	800c4e0 <setNotExploredArea+0x32c>
		for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800c52c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c52e:	3301      	adds	r3, #1
 800c530:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c532:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c534:	2b08      	cmp	r3, #8
 800c536:	ddcd      	ble.n	800c4d4 <setNotExploredArea+0x320>
		}
		target_x = pTx;
		target_y = pTy;
	}
#endif
	ChangeLED(3);
 800c538:	2003      	movs	r0, #3
 800c53a:	f003 ff33 	bl	80103a4 <ChangeLED>
	if(n == 0)
 800c53e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c542:	2b00      	cmp	r3, #0
 800c544:	d109      	bne.n	800c55a <setNotExploredArea+0x3a6>
	{
		Pos.TargetX = 0;
 800c546:	4b64      	ldr	r3, [pc, #400]	; (800c6d8 <setNotExploredArea+0x524>)
 800c548:	2200      	movs	r2, #0
 800c54a:	709a      	strb	r2, [r3, #2]
		Pos.TargetY = 0;
 800c54c:	4b62      	ldr	r3, [pc, #392]	; (800c6d8 <setNotExploredArea+0x524>)
 800c54e:	2200      	movs	r2, #0
 800c550:	70da      	strb	r2, [r3, #3]
		ChangeLED(4);
 800c552:	2004      	movs	r0, #4
 800c554:	f003 ff26 	bl	80103a4 <ChangeLED>
 800c558:	e0b7      	b.n	800c6ca <setNotExploredArea+0x516>
	else
	{
		//目標座標を設定したときの現在座標の重みが小さい順に、walk_valをソートしたい
		//walk_valをソートするときは一緒にxyをソートする
		//ソートの準備
		goal_edge_num = one;
 800c55a:	4b60      	ldr	r3, [pc, #384]	; (800c6dc <setNotExploredArea+0x528>)
 800c55c:	2201      	movs	r2, #1
 800c55e:	701a      	strb	r2, [r3, #0]

		ChangeLED(5);
 800c560:	2005      	movs	r0, #5
 800c562:	f003 ff1f 	bl	80103a4 <ChangeLED>
		//HAL_Delay(15000);
		for(int i = 0; i < n; i ++)
 800c566:	2300      	movs	r3, #0
 800c568:	677b      	str	r3, [r7, #116]	; 0x74
 800c56a:	e036      	b.n	800c5da <setNotExploredArea+0x426>
			walk_val += sizeof(*walk_val);
			target_x += sizeof(*target_x);
			target_y += sizeof(*target_y);
#else
			//HAL_Delay(1000);
			ChangeLED(i%8);
 800c56c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c56e:	425a      	negs	r2, r3
 800c570:	f003 0307 	and.w	r3, r3, #7
 800c574:	f002 0207 	and.w	r2, r2, #7
 800c578:	bf58      	it	pl
 800c57a:	4253      	negpl	r3, r2
 800c57c:	4618      	mov	r0, r3
 800c57e:	f003 ff11 	bl	80103a4 <ChangeLED>
			init_map(target_x[i], target_y[i]);
 800c582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	4413      	add	r3, r2
 800c588:	7818      	ldrb	r0, [r3, #0]
 800c58a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	4413      	add	r3, r2
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	4619      	mov	r1, r3
 800c594:	f7ff fb7e 	bl	800bc94 <init_map>
			make_map(target_x[i], target_y[i],0x01);
 800c598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	4413      	add	r3, r2
 800c59e:	7818      	ldrb	r0, [r3, #0]
 800c5a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	f7ff fbc6 	bl	800bd3c <make_map>
			walk_val[i] = walk_map[Pos.X][Pos.Y];
 800c5b0:	4b49      	ldr	r3, [pc, #292]	; (800c6d8 <setNotExploredArea+0x524>)
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	4b48      	ldr	r3, [pc, #288]	; (800c6d8 <setNotExploredArea+0x524>)
 800c5b8:	785b      	ldrb	r3, [r3, #1]
 800c5ba:	461c      	mov	r4, r3
 800c5bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5be:	005b      	lsls	r3, r3, #1
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	441a      	add	r2, r3
 800c5c4:	4946      	ldr	r1, [pc, #280]	; (800c6e0 <setNotExploredArea+0x52c>)
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	00db      	lsls	r3, r3, #3
 800c5ca:	4403      	add	r3, r0
 800c5cc:	4423      	add	r3, r4
 800c5ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c5d2:	8013      	strh	r3, [r2, #0]
		for(int i = 0; i < n; i ++)
 800c5d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	677b      	str	r3, [r7, #116]	; 0x74
 800c5da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c5dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	dbc3      	blt.n	800c56c <setNotExploredArea+0x3b8>

//		walk_val = pWv;
//		target_x = pTx;
//		target_y = pTy;

		ChangeLED(4);
 800c5e4:	2004      	movs	r0, #4
 800c5e6:	f003 fedd 	bl	80103a4 <ChangeLED>
//		pTx = target_x;
//		uint8_t *pTy;
//		pTy = target_y;
//		uint16_t *pWv;
//		pWv = walk_val;
		uint16_t tmp_w = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		uint8_t tmp_x = 0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
		uint8_t tmp_y = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
		for(int i=0; i < n-1; i++)
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	673b      	str	r3, [r7, #112]	; 0x70
 800c600:	e05a      	b.n	800c6b8 <setNotExploredArea+0x504>
		{
			for(int j=i+1; j < n; j++)
 800c602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c604:	3301      	adds	r3, #1
 800c606:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c608:	e04e      	b.n	800c6a8 <setNotExploredArea+0x4f4>
			{
				if( walk_val[i]  > walk_val[j] )
 800c60a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c60c:	005b      	lsls	r3, r3, #1
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	4413      	add	r3, r2
 800c612:	881a      	ldrh	r2, [r3, #0]
 800c614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c616:	005b      	lsls	r3, r3, #1
 800c618:	6879      	ldr	r1, [r7, #4]
 800c61a:	440b      	add	r3, r1
 800c61c:	881b      	ldrh	r3, [r3, #0]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d93f      	bls.n	800c6a2 <setNotExploredArea+0x4ee>
				{
					tmp_w = walk_val[i];
 800c622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c624:	005b      	lsls	r3, r3, #1
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	4413      	add	r3, r2
 800c62a:	881b      	ldrh	r3, [r3, #0]
 800c62c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
					walk_val[i] = walk_val[j];
 800c630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c632:	005b      	lsls	r3, r3, #1
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	441a      	add	r2, r3
 800c638:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c63a:	005b      	lsls	r3, r3, #1
 800c63c:	6879      	ldr	r1, [r7, #4]
 800c63e:	440b      	add	r3, r1
 800c640:	8812      	ldrh	r2, [r2, #0]
 800c642:	801a      	strh	r2, [r3, #0]
					walk_val[j] = tmp_w;
 800c644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c646:	005b      	lsls	r3, r3, #1
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	4413      	add	r3, r2
 800c64c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800c650:	801a      	strh	r2, [r3, #0]

					tmp_x = target_x[i];
 800c652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	4413      	add	r3, r2
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
					target_x[i] = target_x[j];
 800c65e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	441a      	add	r2, r3
 800c664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c666:	68f9      	ldr	r1, [r7, #12]
 800c668:	440b      	add	r3, r1
 800c66a:	7812      	ldrb	r2, [r2, #0]
 800c66c:	701a      	strb	r2, [r3, #0]
					target_x[j] = tmp_x;
 800c66e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	4413      	add	r3, r2
 800c674:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800c678:	701a      	strb	r2, [r3, #0]

					tmp_y = target_y[i];
 800c67a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c67c:	68ba      	ldr	r2, [r7, #8]
 800c67e:	4413      	add	r3, r2
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
					target_y[i] = target_y[j];
 800c686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	441a      	add	r2, r3
 800c68c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c68e:	68b9      	ldr	r1, [r7, #8]
 800c690:	440b      	add	r3, r1
 800c692:	7812      	ldrb	r2, [r2, #0]
 800c694:	701a      	strb	r2, [r3, #0]
					target_y[j] = tmp_y;
 800c696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c698:	68ba      	ldr	r2, [r7, #8]
 800c69a:	4413      	add	r3, r2
 800c69c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800c6a0:	701a      	strb	r2, [r3, #0]
			for(int j=i+1; j < n; j++)
 800c6a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c6a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c6aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	dbab      	blt.n	800c60a <setNotExploredArea+0x456>
		for(int i=0; i < n-1; i++)
 800c6b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	673b      	str	r3, [r7, #112]	; 0x70
 800c6b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c6bc:	3b01      	subs	r3, #1
 800c6be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	db9e      	blt.n	800c602 <setNotExploredArea+0x44e>
			//最小歩数じゃなくて、小さい順にソート
			//座標と歩数を一緒に並べ替える
			//ポインタでxyを渡し、渡し先で代入


		ChangeLED(6);
 800c6c4:	2006      	movs	r0, #6
 800c6c6:	f003 fe6d 	bl	80103a4 <ChangeLED>
	}
	return n;
 800c6ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
	//一番近い未探索マスのxyが出る

}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3794      	adds	r7, #148	; 0x94
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd90      	pop	{r4, r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20000000 	.word	0x20000000
 800c6dc:	20000520 	.word	0x20000520
 800c6e0:	20000574 	.word	0x20000574

0800c6e4 <InitExplore>:
#include "Interrupt.h"
#include "Debug.h"

#include <main.h>
void InitExplore()
{
 800c6e4:	b590      	push	{r4, r7, lr}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	2004      	movs	r0, #4
 800c6ee:	f004 fbef 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	2005      	movs	r0, #5
 800c6f6:	f004 fbeb 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	2002      	movs	r0, #2
 800c6fe:	f004 fbe7 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c702:	2100      	movs	r1, #0
 800c704:	2003      	movs	r0, #3
 800c706:	f004 fbe3 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800c70a:	2100      	movs	r1, #0
 800c70c:	2001      	movs	r0, #1
 800c70e:	f004 fbdf 	bl	8010ed0 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800c712:	2100      	movs	r1, #0
 800c714:	2000      	movs	r0, #0
 800c716:	f004 fbdb 	bl	8010ed0 <PIDChangeFlag>


	Load_Gain();
 800c71a:	f004 f91d 	bl	8010958 <Load_Gain>
	uint8_t imu_check;
	imu_check = IMU_init();
 800c71e:	f003 fd69 	bl	80101f4 <IMU_init>
 800c722:	4603      	mov	r3, r0
 800c724:	71fb      	strb	r3, [r7, #7]
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c726:	79fb      	ldrb	r3, [r7, #7]
 800c728:	4619      	mov	r1, r3
 800c72a:	4840      	ldr	r0, [pc, #256]	; (800c82c <InitExplore+0x148>)
 800c72c:	f00a fd82 	bl	8017234 <iprintf>
#if 1 //IMUから値が来なくなる現象の対策
	imu_check =IMU_init();
 800c730:	f003 fd60 	bl	80101f4 <IMU_init>
 800c734:	4603      	mov	r3, r0
 800c736:	71fb      	strb	r3, [r7, #7]
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c738:	79fb      	ldrb	r3, [r7, #7]
 800c73a:	4619      	mov	r1, r3
 800c73c:	483b      	ldr	r0, [pc, #236]	; (800c82c <InitExplore+0x148>)
 800c73e:	f00a fd79 	bl	8017234 <iprintf>
#endif
	HAL_Delay(100);
 800c742:	2064      	movs	r0, #100	; 0x64
 800c744:	f004 ff08 	bl	8011558 <HAL_Delay>

	ZGyro = ReadIMU(0x37, 0x38);
 800c748:	2138      	movs	r1, #56	; 0x38
 800c74a:	2037      	movs	r0, #55	; 0x37
 800c74c:	f003 fcc4 	bl	80100d8 <ReadIMU>
 800c750:	eef0 7a40 	vmov.f32	s15, s0
 800c754:	4b36      	ldr	r3, [pc, #216]	; (800c830 <InitExplore+0x14c>)
 800c756:	edc3 7a00 	vstr	s15, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800c75a:	4b35      	ldr	r3, [pc, #212]	; (800c830 <InitExplore+0x14c>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4618      	mov	r0, r3
 800c760:	f7fb fe2a 	bl	80083b8 <__aeabi_f2d>
 800c764:	4603      	mov	r3, r0
 800c766:	460c      	mov	r4, r1
 800c768:	461a      	mov	r2, r3
 800c76a:	4623      	mov	r3, r4
 800c76c:	4831      	ldr	r0, [pc, #196]	; (800c834 <InitExplore+0x150>)
 800c76e:	f00a fd61 	bl	8017234 <iprintf>
//	  }

  }
#endif
	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800c772:	f003 fed5 	bl	8010520 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800c776:	f003 fde9 	bl	801034c <EncoderStart>
	EmitterON();
 800c77a:	f003 fdf7 	bl	801036c <EmitterON>
	ADCStart();
 800c77e:	f003 fb07 	bl	800fd90 <ADCStart>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800c782:	f247 512f 	movw	r1, #29999	; 0x752f
 800c786:	482c      	ldr	r0, [pc, #176]	; (800c838 <InitExplore+0x154>)
 800c788:	f003 ff60 	bl	801064c <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800c78c:	f247 512f 	movw	r1, #29999	; 0x752f
 800c790:	482a      	ldr	r0, [pc, #168]	; (800c83c <InitExplore+0x158>)
 800c792:	f003 ff5b 	bl	801064c <InitPulse>
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800c796:	482a      	ldr	r0, [pc, #168]	; (800c840 <InitExplore+0x15c>)
 800c798:	f007 fdc5 	bl	8014326 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800c79c:	4829      	ldr	r0, [pc, #164]	; (800c844 <InitExplore+0x160>)
 800c79e:	f007 fdc2 	bl	8014326 <HAL_TIM_Base_Start_IT>
		printf("生値%f, 角速度%f ang/s, %f rad/s\r\n",ZGyro,ZGyro/16.4f, AngularV);
	}

#endif

	TargetVelocity[BODY] = 0;
 800c7a2:	4b29      	ldr	r3, [pc, #164]	; (800c848 <InitExplore+0x164>)
 800c7a4:	f04f 0200 	mov.w	r2, #0
 800c7a8:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800c7aa:	4b28      	ldr	r3, [pc, #160]	; (800c84c <InitExplore+0x168>)
 800c7ac:	f04f 0200 	mov.w	r2, #0
 800c7b0:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800c7b2:	4b27      	ldr	r3, [pc, #156]	; (800c850 <InitExplore+0x16c>)
 800c7b4:	f04f 0200 	mov.w	r2, #0
 800c7b8:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800c7ba:	4b26      	ldr	r3, [pc, #152]	; (800c854 <InitExplore+0x170>)
 800c7bc:	f04f 0200 	mov.w	r2, #0
 800c7c0:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800c7c2:	4b25      	ldr	r3, [pc, #148]	; (800c858 <InitExplore+0x174>)
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800c7c8:	4b23      	ldr	r3, [pc, #140]	; (800c858 <InitExplore+0x174>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800c7ce:	4b22      	ldr	r3, [pc, #136]	; (800c858 <InitExplore+0x174>)
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800c7d4:	f003 fd38 	bl	8010248 <IMU_Calib>
	TargetPhoto[SR] = Photo[SR];
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
#else


	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800c7d8:	4b20      	ldr	r3, [pc, #128]	; (800c85c <InitExplore+0x178>)
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	4a20      	ldr	r2, [pc, #128]	; (800c860 <InitExplore+0x17c>)
 800c7de:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800c7e0:	4b1e      	ldr	r3, [pc, #120]	; (800c85c <InitExplore+0x178>)
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	4a1e      	ldr	r2, [pc, #120]	; (800c860 <InitExplore+0x17c>)
 800c7e6:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800c7e8:	4b1d      	ldr	r3, [pc, #116]	; (800c860 <InitExplore+0x17c>)
 800c7ea:	ed93 7a02 	vldr	s14, [r3, #8]
 800c7ee:	4b1c      	ldr	r3, [pc, #112]	; (800c860 <InitExplore+0x17c>)
 800c7f0:	edd3 7a01 	vldr	s15, [r3, #4]
 800c7f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7f8:	4b1a      	ldr	r3, [pc, #104]	; (800c864 <InitExplore+0x180>)
 800c7fa:	edc3 7a00 	vstr	s15, [r3]

#endif
	PIDReset(L_VELO_PID);
 800c7fe:	2004      	movs	r0, #4
 800c800:	f004 fb7c 	bl	8010efc <PIDReset>
	PIDReset(R_VELO_PID);
 800c804:	2005      	movs	r0, #5
 800c806:	f004 fb79 	bl	8010efc <PIDReset>

	PIDReset(A_VELO_PID);
 800c80a:	2000      	movs	r0, #0
 800c80c:	f004 fb76 	bl	8010efc <PIDReset>
	PIDReset(L_WALL_PID);
 800c810:	2002      	movs	r0, #2
 800c812:	f004 fb73 	bl	8010efc <PIDReset>
	PIDReset(R_WALL_PID);
 800c816:	2003      	movs	r0, #3
 800c818:	f004 fb70 	bl	8010efc <PIDReset>
	PIDReset(D_WALL_PID);
 800c81c:	2001      	movs	r0, #1
 800c81e:	f004 fb6d 	bl	8010efc <PIDReset>

#endif
}
 800c822:	bf00      	nop
 800c824:	370c      	adds	r7, #12
 800c826:	46bd      	mov	sp, r7
 800c828:	bd90      	pop	{r4, r7, pc}
 800c82a:	bf00      	nop
 800c82c:	0801b62c 	.word	0x0801b62c
 800c830:	200002d8 	.word	0x200002d8
 800c834:	0801b648 	.word	0x0801b648
 800c838:	40000424 	.word	0x40000424
 800c83c:	40000824 	.word	0x40000824
 800c840:	200009e0 	.word	0x200009e0
 800c844:	20000798 	.word	0x20000798
 800c848:	200004f0 	.word	0x200004f0
 800c84c:	20000500 	.word	0x20000500
 800c850:	2000022c 	.word	0x2000022c
 800c854:	20000230 	.word	0x20000230
 800c858:	20000524 	.word	0x20000524
 800c85c:	20000564 	.word	0x20000564
 800c860:	20000624 	.word	0x20000624
 800c864:	20000514 	.word	0x20000514

0800c868 <InitFastest>:

void InitFastest()
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
	Motor_PWM_Start();
 800c86e:	f003 fe57 	bl	8010520 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800c872:	f003 fd6b 	bl	801034c <EncoderStart>
	EmitterON();
 800c876:	f003 fd79 	bl	801036c <EmitterON>
	ADCStart();
 800c87a:	f003 fa89 	bl	800fd90 <ADCStart>

	uint8_t imu_check;
	imu_check =IMU_init();
 800c87e:	f003 fcb9 	bl	80101f4 <IMU_init>
 800c882:	4603      	mov	r3, r0
 800c884:	71fb      	strb	r3, [r7, #7]

	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c886:	79fb      	ldrb	r3, [r7, #7]
 800c888:	4619      	mov	r1, r3
 800c88a:	4838      	ldr	r0, [pc, #224]	; (800c96c <InitFastest+0x104>)
 800c88c:	f00a fcd2 	bl	8017234 <iprintf>
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800c890:	2100      	movs	r1, #0
 800c892:	2004      	movs	r0, #4
 800c894:	f004 fb1c 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800c898:	2100      	movs	r1, #0
 800c89a:	2005      	movs	r0, #5
 800c89c:	f004 fb18 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	2002      	movs	r0, #2
 800c8a4:	f004 fb14 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c8a8:	2100      	movs	r1, #0
 800c8aa:	2003      	movs	r0, #3
 800c8ac:	f004 fb10 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	2001      	movs	r0, #1
 800c8b4:	f004 fb0c 	bl	8010ed0 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	2000      	movs	r0, #0
 800c8bc:	f004 fb08 	bl	8010ed0 <PIDChangeFlag>


	Load_Gain();
 800c8c0:	f004 f84a 	bl	8010958 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800c8c4:	f247 512f 	movw	r1, #29999	; 0x752f
 800c8c8:	4829      	ldr	r0, [pc, #164]	; (800c970 <InitFastest+0x108>)
 800c8ca:	f003 febf 	bl	801064c <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800c8ce:	f247 512f 	movw	r1, #29999	; 0x752f
 800c8d2:	4828      	ldr	r0, [pc, #160]	; (800c974 <InitFastest+0x10c>)
 800c8d4:	f003 feba 	bl	801064c <InitPulse>
//	  }

  }
#endif
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800c8d8:	4827      	ldr	r0, [pc, #156]	; (800c978 <InitFastest+0x110>)
 800c8da:	f007 fd24 	bl	8014326 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800c8de:	4827      	ldr	r0, [pc, #156]	; (800c97c <InitFastest+0x114>)
 800c8e0:	f007 fd21 	bl	8014326 <HAL_TIM_Base_Start_IT>


	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
 800c8e4:	4b26      	ldr	r3, [pc, #152]	; (800c980 <InitFastest+0x118>)
 800c8e6:	f04f 0200 	mov.w	r2, #0
 800c8ea:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800c8ec:	4b25      	ldr	r3, [pc, #148]	; (800c984 <InitFastest+0x11c>)
 800c8ee:	f04f 0200 	mov.w	r2, #0
 800c8f2:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800c8f4:	4b24      	ldr	r3, [pc, #144]	; (800c988 <InitFastest+0x120>)
 800c8f6:	f04f 0200 	mov.w	r2, #0
 800c8fa:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800c8fc:	4b23      	ldr	r3, [pc, #140]	; (800c98c <InitFastest+0x124>)
 800c8fe:	f04f 0200 	mov.w	r2, #0
 800c902:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800c904:	4b22      	ldr	r3, [pc, #136]	; (800c990 <InitFastest+0x128>)
 800c906:	2200      	movs	r2, #0
 800c908:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800c90a:	4b21      	ldr	r3, [pc, #132]	; (800c990 <InitFastest+0x128>)
 800c90c:	2200      	movs	r2, #0
 800c90e:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800c910:	4b1f      	ldr	r3, [pc, #124]	; (800c990 <InitFastest+0x128>)
 800c912:	2200      	movs	r2, #0
 800c914:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800c916:	f003 fc97 	bl	8010248 <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800c91a:	4b1e      	ldr	r3, [pc, #120]	; (800c994 <InitFastest+0x12c>)
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	4a1e      	ldr	r2, [pc, #120]	; (800c998 <InitFastest+0x130>)
 800c920:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];
 800c922:	4b1c      	ldr	r3, [pc, #112]	; (800c994 <InitFastest+0x12c>)
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	4a1c      	ldr	r2, [pc, #112]	; (800c998 <InitFastest+0x130>)
 800c928:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800c92a:	4b1b      	ldr	r3, [pc, #108]	; (800c998 <InitFastest+0x130>)
 800c92c:	ed93 7a02 	vldr	s14, [r3, #8]
 800c930:	4b19      	ldr	r3, [pc, #100]	; (800c998 <InitFastest+0x130>)
 800c932:	edd3 7a01 	vldr	s15, [r3, #4]
 800c936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c93a:	4b18      	ldr	r3, [pc, #96]	; (800c99c <InitFastest+0x134>)
 800c93c:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO_PID);
 800c940:	2004      	movs	r0, #4
 800c942:	f004 fadb 	bl	8010efc <PIDReset>
	PIDReset(R_VELO_PID);
 800c946:	2005      	movs	r0, #5
 800c948:	f004 fad8 	bl	8010efc <PIDReset>
	PIDReset(A_VELO_PID);
 800c94c:	2000      	movs	r0, #0
 800c94e:	f004 fad5 	bl	8010efc <PIDReset>
	PIDReset(L_WALL_PID);
 800c952:	2002      	movs	r0, #2
 800c954:	f004 fad2 	bl	8010efc <PIDReset>
	PIDReset(R_WALL_PID);
 800c958:	2003      	movs	r0, #3
 800c95a:	f004 facf 	bl	8010efc <PIDReset>
	PIDReset(D_WALL_PID);
 800c95e:	2001      	movs	r0, #1
 800c960:	f004 facc 	bl	8010efc <PIDReset>


}
 800c964:	bf00      	nop
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	0801b62c 	.word	0x0801b62c
 800c970:	40000424 	.word	0x40000424
 800c974:	40000824 	.word	0x40000824
 800c978:	200009e0 	.word	0x200009e0
 800c97c:	20000798 	.word	0x20000798
 800c980:	200004f0 	.word	0x200004f0
 800c984:	20000500 	.word	0x20000500
 800c988:	2000022c 	.word	0x2000022c
 800c98c:	20000230 	.word	0x20000230
 800c990:	20000524 	.word	0x20000524
 800c994:	20000564 	.word	0x20000564
 800c998:	20000624 	.word	0x20000624
 800c99c:	20000514 	.word	0x20000514

0800c9a0 <Debug>:
void Debug()
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
//	while(1)
//	{
//
//	}
#if 1
	InitExplore();
 800c9a6:	f7ff fe9d 	bl	800c6e4 <InitExplore>
	InitPosition();
 800c9aa:	f7fc fa25 	bl	8008df8 <InitPosition>
	wall_init();
 800c9ae:	f7fe ff93 	bl	800b8d8 <wall_init>

	TotalPulse[RIGHT] = 0;
 800c9b2:	4b37      	ldr	r3, [pc, #220]	; (800ca90 <Debug+0xf0>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c9b8:	4b35      	ldr	r3, [pc, #212]	; (800ca90 <Debug+0xf0>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c9be:	4b34      	ldr	r3, [pc, #208]	; (800ca90 <Debug+0xf0>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	2004      	movs	r0, #4
 800c9c8:	f004 fa82 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c9cc:	2101      	movs	r1, #1
 800c9ce:	2005      	movs	r0, #5
 800c9d0:	f004 fa7e 	bl	8010ed0 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800c9d4:	4b2e      	ldr	r3, [pc, #184]	; (800ca90 <Debug+0xf0>)
 800c9d6:	6899      	ldr	r1, [r3, #8]
 800c9d8:	4b2d      	ldr	r3, [pc, #180]	; (800ca90 <Debug+0xf0>)
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	4b2c      	ldr	r3, [pc, #176]	; (800ca90 <Debug+0xf0>)
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	482c      	ldr	r0, [pc, #176]	; (800ca94 <Debug+0xf4>)
 800c9e2:	f00a fc27 	bl	8017234 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	2001      	movs	r0, #1
 800c9ea:	f004 fa71 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	2002      	movs	r0, #2
 800c9f2:	f004 fa6d 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	2003      	movs	r0, #3
 800c9fa:	f004 fa69 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800c9fe:	2101      	movs	r1, #1
 800ca00:	2000      	movs	r0, #0
 800ca02:	f004 fa65 	bl	8010ed0 <PIDChangeFlag>
	ExploreVelocity=0;
 800ca06:	4b24      	ldr	r3, [pc, #144]	; (800ca98 <Debug+0xf8>)
 800ca08:	f04f 0200 	mov.w	r2, #0
 800ca0c:	601a      	str	r2, [r3, #0]
	ChangeLED(3);
 800ca0e:	2003      	movs	r0, #3
 800ca10:	f003 fcc8 	bl	80103a4 <ChangeLED>
	//HAL_Delay(500);

	//IT_mode = WRITINGFREE;
	IT_mode = EXPLORE;
 800ca14:	4b21      	ldr	r3, [pc, #132]	; (800ca9c <Debug+0xfc>)
 800ca16:	2206      	movs	r2, #6
 800ca18:	601a      	str	r2, [r3, #0]
		printf("%f, %f, %f, %f\r\n", Photo[FL], Photo[FR], Photo[FL] - Photo[FR],Photo[FL] + Photo[FR] );
	}
	PIDChangeFlag(F_WALL_PID, 0);
#endif
#if 1 //直進テスト
	ExploreVelocity = 135;
 800ca1a:	4b1f      	ldr	r3, [pc, #124]	; (800ca98 <Debug+0xf8>)
 800ca1c:	4a20      	ldr	r2, [pc, #128]	; (800caa0 <Debug+0x100>)
 800ca1e:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800ca20:	4b20      	ldr	r3, [pc, #128]	; (800caa4 <Debug+0x104>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	711a      	strb	r2, [r3, #4]
	Accel(61.75,ExploreVelocity);
 800ca26:	4b1c      	ldr	r3, [pc, #112]	; (800ca98 <Debug+0xf8>)
 800ca28:	edd3 7a00 	vldr	s15, [r3]
 800ca2c:	eef0 0a67 	vmov.f32	s1, s15
 800ca30:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800caa8 <Debug+0x108>
 800ca34:	f7fd fb5c 	bl	800a0f0 <Accel>
	for(int i=0; i < 1; i++)
 800ca38:	2300      	movs	r3, #0
 800ca3a:	607b      	str	r3, [r7, #4]
 800ca3c:	e015      	b.n	800ca6a <Debug+0xca>
	{
		Pos.Dir = front;
 800ca3e:	4b19      	ldr	r3, [pc, #100]	; (800caa4 <Debug+0x104>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	711a      	strb	r2, [r3, #4]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800ca44:	4b14      	ldr	r3, [pc, #80]	; (800ca98 <Debug+0xf8>)
 800ca46:	edd3 7a00 	vldr	s15, [r3]
 800ca4a:	4b18      	ldr	r3, [pc, #96]	; (800caac <Debug+0x10c>)
 800ca4c:	ed93 7a00 	vldr	s14, [r3]
 800ca50:	eeb0 1a47 	vmov.f32	s2, s14
 800ca54:	eef0 0a67 	vmov.f32	s1, s15
 800ca58:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800cab0 <Debug+0x110>
 800ca5c:	f7fd ffd4 	bl	800aa08 <GoStraight>
		//Pos.Dir = right;
		SlalomRight();
 800ca60:	f7fc ff7e 	bl	8009960 <SlalomRight>
	for(int i=0; i < 1; i++)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	3301      	adds	r3, #1
 800ca68:	607b      	str	r3, [r7, #4]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	dde6      	ble.n	800ca3e <Debug+0x9e>

	}
	Pos.Dir = front;
 800ca70:	4b0c      	ldr	r3, [pc, #48]	; (800caa4 <Debug+0x104>)
 800ca72:	2200      	movs	r2, #0
 800ca74:	711a      	strb	r2, [r3, #4]
	//Decel(45,0);
	TargetVelocity[BODY] = 0;
 800ca76:	4b0f      	ldr	r3, [pc, #60]	; (800cab4 <Debug+0x114>)
 800ca78:	f04f 0200 	mov.w	r2, #0
 800ca7c:	609a      	str	r2, [r3, #8]
	HAL_Delay(1000);
 800ca7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ca82:	f004 fd69 	bl	8011558 <HAL_Delay>
	while(1)
	{
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
 800ca86:	bf00      	nop
 800ca88:	3708      	adds	r7, #8
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	20000524 	.word	0x20000524
 800ca94:	0801b654 	.word	0x0801b654
 800ca98:	20000618 	.word	0x20000618
 800ca9c:	200004e4 	.word	0x200004e4
 800caa0:	43070000 	.word	0x43070000
 800caa4:	20000000 	.word	0x20000000
 800caa8:	42770000 	.word	0x42770000
 800caac:	200004fc 	.word	0x200004fc
 800cab0:	42b40000 	.word	0x42b40000
 800cab4:	200004f0 	.word	0x200004f0

0800cab8 <ParameterSetting>:
void ParameterSetting()
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	af00      	add	r7, sp, #0
	Load_Gain();
 800cabc:	f003 ff4c 	bl	8010958 <Load_Gain>
	Change_Gain();
 800cac0:	f004 f806 	bl	8010ad0 <Change_Gain>

}
 800cac4:	bf00      	nop
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <GainTestRWall>:
	{
		TargetVelocity[BODY] = 300;
	}
}
void GainTestRWall()
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800cacc:	4b18      	ldr	r3, [pc, #96]	; (800cb30 <GainTestRWall+0x68>)
 800cace:	2206      	movs	r2, #6
 800cad0:	601a      	str	r2, [r3, #0]
	InitExplore();
 800cad2:	f7ff fe07 	bl	800c6e4 <InitExplore>
	InitPosition();
 800cad6:	f7fc f98f 	bl	8008df8 <InitPosition>
	wall_init();
 800cada:	f7fe fefd 	bl	800b8d8 <wall_init>
	TotalPulse[RIGHT] = 0;
 800cade:	4b15      	ldr	r3, [pc, #84]	; (800cb34 <GainTestRWall+0x6c>)
 800cae0:	2200      	movs	r2, #0
 800cae2:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800cae4:	4b13      	ldr	r3, [pc, #76]	; (800cb34 <GainTestRWall+0x6c>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800caea:	4b12      	ldr	r3, [pc, #72]	; (800cb34 <GainTestRWall+0x6c>)
 800caec:	2200      	movs	r2, #0
 800caee:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800caf0:	2101      	movs	r1, #1
 800caf2:	2004      	movs	r0, #4
 800caf4:	f004 f9ec 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800caf8:	2101      	movs	r1, #1
 800cafa:	2005      	movs	r0, #5
 800cafc:	f004 f9e8 	bl	8010ed0 <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800cb00:	2100      	movs	r1, #0
 800cb02:	2001      	movs	r0, #1
 800cb04:	f004 f9e4 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cb08:	2100      	movs	r1, #0
 800cb0a:	2002      	movs	r0, #2
 800cb0c:	f004 f9e0 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800cb10:	2101      	movs	r1, #1
 800cb12:	2003      	movs	r0, #3
 800cb14:	f004 f9dc 	bl	8010ed0 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800cb18:	4b07      	ldr	r3, [pc, #28]	; (800cb38 <GainTestRWall+0x70>)
 800cb1a:	f04f 0200 	mov.w	r2, #0
 800cb1e:	601a      	str	r2, [r3, #0]
	ChangeLED(1);
 800cb20:	2001      	movs	r0, #1
 800cb22:	f003 fc3f 	bl	80103a4 <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800cb26:	4b05      	ldr	r3, [pc, #20]	; (800cb3c <GainTestRWall+0x74>)
 800cb28:	f04f 0200 	mov.w	r2, #0
 800cb2c:	609a      	str	r2, [r3, #8]
 800cb2e:	e7fa      	b.n	800cb26 <GainTestRWall+0x5e>
 800cb30:	200004e4 	.word	0x200004e4
 800cb34:	20000524 	.word	0x20000524
 800cb38:	20000618 	.word	0x20000618
 800cb3c:	200004f0 	.word	0x200004f0

0800cb40 <GainTestDWall>:

	}
}
void GainTestDWall()
{
 800cb40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb44:	b086      	sub	sp, #24
 800cb46:	af06      	add	r7, sp, #24
	IT_mode = EXPLORE;
 800cb48:	4b2c      	ldr	r3, [pc, #176]	; (800cbfc <GainTestDWall+0xbc>)
 800cb4a:	2206      	movs	r2, #6
 800cb4c:	601a      	str	r2, [r3, #0]
	InitExplore();
 800cb4e:	f7ff fdc9 	bl	800c6e4 <InitExplore>
	InitPosition();
 800cb52:	f7fc f951 	bl	8008df8 <InitPosition>
	wall_init();
 800cb56:	f7fe febf 	bl	800b8d8 <wall_init>
	TotalPulse[RIGHT] = 0;
 800cb5a:	4b29      	ldr	r3, [pc, #164]	; (800cc00 <GainTestDWall+0xc0>)
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800cb60:	4b27      	ldr	r3, [pc, #156]	; (800cc00 <GainTestDWall+0xc0>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800cb66:	4b26      	ldr	r3, [pc, #152]	; (800cc00 <GainTestDWall+0xc0>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800cb6c:	2101      	movs	r1, #1
 800cb6e:	2004      	movs	r0, #4
 800cb70:	f004 f9ae 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800cb74:	2101      	movs	r1, #1
 800cb76:	2005      	movs	r0, #5
 800cb78:	f004 f9aa 	bl	8010ed0 <PIDChangeFlag>
	//PIDChangeFlagStraight(D_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 1);
 800cb7c:	2101      	movs	r1, #1
 800cb7e:	2001      	movs	r0, #1
 800cb80:	f004 f9a6 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cb84:	2100      	movs	r1, #0
 800cb86:	2002      	movs	r0, #2
 800cb88:	f004 f9a2 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	2003      	movs	r0, #3
 800cb90:	f004 f99e 	bl	8010ed0 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800cb94:	4b1b      	ldr	r3, [pc, #108]	; (800cc04 <GainTestDWall+0xc4>)
 800cb96:	f04f 0200 	mov.w	r2, #0
 800cb9a:	601a      	str	r2, [r3, #0]
	ChangeLED(2);
 800cb9c:	2002      	movs	r0, #2
 800cb9e:	f003 fc01 	bl	80103a4 <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800cba2:	4b19      	ldr	r3, [pc, #100]	; (800cc08 <GainTestDWall+0xc8>)
 800cba4:	f04f 0200 	mov.w	r2, #0
 800cba8:	609a      	str	r2, [r3, #8]
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800cbaa:	4b18      	ldr	r3, [pc, #96]	; (800cc0c <GainTestDWall+0xcc>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fb fc02 	bl	80083b8 <__aeabi_f2d>
 800cbb4:	4682      	mov	sl, r0
 800cbb6:	468b      	mov	fp, r1
 800cbb8:	4b14      	ldr	r3, [pc, #80]	; (800cc0c <GainTestDWall+0xcc>)
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7fb fbfb 	bl	80083b8 <__aeabi_f2d>
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	460d      	mov	r5, r1
 800cbc6:	4b11      	ldr	r3, [pc, #68]	; (800cc0c <GainTestDWall+0xcc>)
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fb fbf4 	bl	80083b8 <__aeabi_f2d>
 800cbd0:	4680      	mov	r8, r0
 800cbd2:	4689      	mov	r9, r1
 800cbd4:	4b0d      	ldr	r3, [pc, #52]	; (800cc0c <GainTestDWall+0xcc>)
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fb fbed 	bl	80083b8 <__aeabi_f2d>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cbe6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cbea:	e9cd 4500 	strd	r4, r5, [sp]
 800cbee:	4652      	mov	r2, sl
 800cbf0:	465b      	mov	r3, fp
 800cbf2:	4807      	ldr	r0, [pc, #28]	; (800cc10 <GainTestDWall+0xd0>)
 800cbf4:	f00a fb1e 	bl	8017234 <iprintf>
		TargetVelocity[BODY] = 0;
 800cbf8:	e7d3      	b.n	800cba2 <GainTestDWall+0x62>
 800cbfa:	bf00      	nop
 800cbfc:	200004e4 	.word	0x200004e4
 800cc00:	20000524 	.word	0x20000524
 800cc04:	20000618 	.word	0x20000618
 800cc08:	200004f0 	.word	0x200004f0
 800cc0c:	20000564 	.word	0x20000564
 800cc10:	0801b688 	.word	0x0801b688

0800cc14 <GainTestAVelo>:
	}
}

void GainTestAVelo()
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800cc18:	4b1a      	ldr	r3, [pc, #104]	; (800cc84 <GainTestAVelo+0x70>)
 800cc1a:	2206      	movs	r2, #6
 800cc1c:	601a      	str	r2, [r3, #0]
	InitExplore();
 800cc1e:	f7ff fd61 	bl	800c6e4 <InitExplore>
	InitPosition();
 800cc22:	f7fc f8e9 	bl	8008df8 <InitPosition>
	wall_init();
 800cc26:	f7fe fe57 	bl	800b8d8 <wall_init>
	TotalPulse[RIGHT] = 0;
 800cc2a:	4b17      	ldr	r3, [pc, #92]	; (800cc88 <GainTestAVelo+0x74>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800cc30:	4b15      	ldr	r3, [pc, #84]	; (800cc88 <GainTestAVelo+0x74>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800cc36:	4b14      	ldr	r3, [pc, #80]	; (800cc88 <GainTestAVelo+0x74>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800cc3c:	2101      	movs	r1, #1
 800cc3e:	2004      	movs	r0, #4
 800cc40:	f004 f946 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800cc44:	2101      	movs	r1, #1
 800cc46:	2005      	movs	r0, #5
 800cc48:	f004 f942 	bl	8010ed0 <PIDChangeFlag>
	//PIDChangeFlagStraight(A_VELO_PID);
	PIDChangeFlag(A_VELO_PID, 1);
 800cc4c:	2101      	movs	r1, #1
 800cc4e:	2000      	movs	r0, #0
 800cc50:	f004 f93e 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800cc54:	2100      	movs	r1, #0
 800cc56:	2001      	movs	r0, #1
 800cc58:	f004 f93a 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	2002      	movs	r0, #2
 800cc60:	f004 f936 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800cc64:	2100      	movs	r1, #0
 800cc66:	2003      	movs	r0, #3
 800cc68:	f004 f932 	bl	8010ed0 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800cc6c:	4b07      	ldr	r3, [pc, #28]	; (800cc8c <GainTestAVelo+0x78>)
 800cc6e:	f04f 0200 	mov.w	r2, #0
 800cc72:	601a      	str	r2, [r3, #0]
	ChangeLED(5);
 800cc74:	2005      	movs	r0, #5
 800cc76:	f003 fb95 	bl	80103a4 <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800cc7a:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <GainTestAVelo+0x7c>)
 800cc7c:	f04f 0200 	mov.w	r2, #0
 800cc80:	609a      	str	r2, [r3, #8]
 800cc82:	e7fa      	b.n	800cc7a <GainTestAVelo+0x66>
 800cc84:	200004e4 	.word	0x200004e4
 800cc88:	20000524 	.word	0x20000524
 800cc8c:	20000618 	.word	0x20000618
 800cc90:	200004f0 	.word	0x200004f0

0800cc94 <WritingFree>:
		//printf("%f, %f\r\n", AngularV, Angle);

	}
}
void WritingFree()
{
 800cc94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc98:	b08a      	sub	sp, #40	; 0x28
 800cc9a:	af08      	add	r7, sp, #32
	IT_mode = WRITINGFREE;
 800cc9c:	4b3d      	ldr	r3, [pc, #244]	; (800cd94 <WritingFree+0x100>)
 800cc9e:	2207      	movs	r2, #7
 800cca0:	601a      	str	r2, [r3, #0]

	InitExplore();
 800cca2:	f7ff fd1f 	bl	800c6e4 <InitExplore>

	printf("3\r\n");
 800cca6:	483c      	ldr	r0, [pc, #240]	; (800cd98 <WritingFree+0x104>)
 800cca8:	f00a fb38 	bl	801731c <puts>

	InitPosition();
 800ccac:	f7fc f8a4 	bl	8008df8 <InitPosition>

	wall_init();
 800ccb0:	f7fe fe12 	bl	800b8d8 <wall_init>
	printf("4\r\n");
 800ccb4:	4839      	ldr	r0, [pc, #228]	; (800cd9c <WritingFree+0x108>)
 800ccb6:	f00a fb31 	bl	801731c <puts>

	TotalPulse[RIGHT] = 0;
 800ccba:	4b39      	ldr	r3, [pc, #228]	; (800cda0 <WritingFree+0x10c>)
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800ccc0:	4b37      	ldr	r3, [pc, #220]	; (800cda0 <WritingFree+0x10c>)
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800ccc6:	4b36      	ldr	r3, [pc, #216]	; (800cda0 <WritingFree+0x10c>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800cccc:	2101      	movs	r1, #1
 800ccce:	2004      	movs	r0, #4
 800ccd0:	f004 f8fe 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800ccd4:	2101      	movs	r1, #1
 800ccd6:	2005      	movs	r0, #5
 800ccd8:	f004 f8fa 	bl	8010ed0 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800ccdc:	2100      	movs	r1, #0
 800ccde:	2001      	movs	r0, #1
 800cce0:	f004 f8f6 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cce4:	2100      	movs	r1, #0
 800cce6:	2002      	movs	r0, #2
 800cce8:	f004 f8f2 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800ccec:	2100      	movs	r1, #0
 800ccee:	2003      	movs	r0, #3
 800ccf0:	f004 f8ee 	bl	8010ed0 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800ccf4:	4b2b      	ldr	r3, [pc, #172]	; (800cda4 <WritingFree+0x110>)
 800ccf6:	f04f 0200 	mov.w	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]
	ChangeLED(7);
 800ccfc:	2007      	movs	r0, #7
 800ccfe:	f003 fb51 	bl	80103a4 <ChangeLED>


#else

	//目標座標だけ
	Aim();
 800cd02:	f7fe f8d3 	bl	800aeac <Aim>
	//shiftPos();
	while(1)
	{
//		ExploreVelocity=300;
//		GoStraight(9000, ExploreVelocity, 0);
		TargetVelocity[BODY] = 0;
 800cd06:	4b28      	ldr	r3, [pc, #160]	; (800cda8 <WritingFree+0x114>)
 800cd08:	f04f 0200 	mov.w	r2, #0
 800cd0c:	609a      	str	r2, [r3, #8]


		printf("%f, %f, %f, %f, %f\r\n",ZGyro, Photo[FL],Photo[FR],Photo[FL]+Photo[FR],(Photo[FL]+Photo[FR])/2);//壁センサ前のチェック。
 800cd0e:	4b27      	ldr	r3, [pc, #156]	; (800cdac <WritingFree+0x118>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fb fb50 	bl	80083b8 <__aeabi_f2d>
 800cd18:	e9c7 0100 	strd	r0, r1, [r7]
 800cd1c:	4b24      	ldr	r3, [pc, #144]	; (800cdb0 <WritingFree+0x11c>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fb fb49 	bl	80083b8 <__aeabi_f2d>
 800cd26:	4604      	mov	r4, r0
 800cd28:	460d      	mov	r5, r1
 800cd2a:	4b21      	ldr	r3, [pc, #132]	; (800cdb0 <WritingFree+0x11c>)
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fb fb42 	bl	80083b8 <__aeabi_f2d>
 800cd34:	4680      	mov	r8, r0
 800cd36:	4689      	mov	r9, r1
 800cd38:	4b1d      	ldr	r3, [pc, #116]	; (800cdb0 <WritingFree+0x11c>)
 800cd3a:	ed93 7a00 	vldr	s14, [r3]
 800cd3e:	4b1c      	ldr	r3, [pc, #112]	; (800cdb0 <WritingFree+0x11c>)
 800cd40:	edd3 7a03 	vldr	s15, [r3, #12]
 800cd44:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd48:	ee17 0a90 	vmov	r0, s15
 800cd4c:	f7fb fb34 	bl	80083b8 <__aeabi_f2d>
 800cd50:	4682      	mov	sl, r0
 800cd52:	468b      	mov	fp, r1
 800cd54:	4b16      	ldr	r3, [pc, #88]	; (800cdb0 <WritingFree+0x11c>)
 800cd56:	ed93 7a00 	vldr	s14, [r3]
 800cd5a:	4b15      	ldr	r3, [pc, #84]	; (800cdb0 <WritingFree+0x11c>)
 800cd5c:	edd3 7a03 	vldr	s15, [r3, #12]
 800cd60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd64:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800cd68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cd6c:	ee16 0a90 	vmov	r0, s13
 800cd70:	f7fb fb22 	bl	80083b8 <__aeabi_f2d>
 800cd74:	4602      	mov	r2, r0
 800cd76:	460b      	mov	r3, r1
 800cd78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cd7c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800cd80:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cd84:	e9cd 4500 	strd	r4, r5, [sp]
 800cd88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd8c:	4809      	ldr	r0, [pc, #36]	; (800cdb4 <WritingFree+0x120>)
 800cd8e:	f00a fa51 	bl	8017234 <iprintf>
		TargetVelocity[BODY] = 0;
 800cd92:	e7b8      	b.n	800cd06 <WritingFree+0x72>
 800cd94:	200004e4 	.word	0x200004e4
 800cd98:	0801b6b8 	.word	0x0801b6b8
 800cd9c:	0801b6bc 	.word	0x0801b6bc
 800cda0:	20000524 	.word	0x20000524
 800cda4:	20000618 	.word	0x20000618
 800cda8:	200004f0 	.word	0x200004f0
 800cdac:	200002d8 	.word	0x200002d8
 800cdb0:	20000564 	.word	0x20000564
 800cdb4:	0801b6c0 	.word	0x0801b6c0

0800cdb8 <FastestRun>:
	}
	//探索の場合は迷路とステータスの準備
}

void FastestRun()
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af02      	add	r7, sp, #8
	IT_mode = EXPLORE;
 800cdbe:	4b98      	ldr	r3, [pc, #608]	; (800d020 <FastestRun+0x268>)
 800cdc0:	2206      	movs	r2, #6
 800cdc2:	601a      	str	r2, [r3, #0]
	//IT_mode = WRITINGFREE;
	//諸々の初期化
	HAL_Delay(100);
 800cdc4:	2064      	movs	r0, #100	; 0x64
 800cdc6:	f004 fbc7 	bl	8011558 <HAL_Delay>
	int8_t mode=1;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	71bb      	strb	r3, [r7, #6]
	  ModeSelect( 1, 2, &mode);
 800cdce:	1dbb      	adds	r3, r7, #6
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	2102      	movs	r1, #2
 800cdd4:	2001      	movs	r0, #1
 800cdd6:	f004 fa95 	bl	8011304 <ModeSelect>
	  Signal( mode );
 800cdda:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f004 fa18 	bl	8011214 <Signal>

		HAL_Delay(100);
 800cde4:	2064      	movs	r0, #100	; 0x64
 800cde6:	f004 fbb7 	bl	8011558 <HAL_Delay>
		  int8_t mode2=1;
 800cdea:	2301      	movs	r3, #1
 800cdec:	717b      	strb	r3, [r7, #5]
		  ModeSelect( 1, 4, &mode2);
 800cdee:	1d7b      	adds	r3, r7, #5
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	2104      	movs	r1, #4
 800cdf4:	2001      	movs	r0, #1
 800cdf6:	f004 fa85 	bl	8011304 <ModeSelect>
		  Signal( mode2 );
 800cdfa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f004 fa08 	bl	8011214 <Signal>

		  PhotoSwitch();
 800ce04:	f004 fa5c 	bl	80112c0 <PhotoSwitch>
	InitFastest();
 800ce08:	f7ff fd2e 	bl	800c868 <InitFastest>
	InitPosition();
 800ce0c:	f7fb fff4 	bl	8008df8 <InitPosition>


	wall_init();
 800ce10:	f7fe fd62 	bl	800b8d8 <wall_init>

	TotalPulse[RIGHT] = 0;
 800ce14:	4b83      	ldr	r3, [pc, #524]	; (800d024 <FastestRun+0x26c>)
 800ce16:	2200      	movs	r2, #0
 800ce18:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800ce1a:	4b82      	ldr	r3, [pc, #520]	; (800d024 <FastestRun+0x26c>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800ce20:	4b80      	ldr	r3, [pc, #512]	; (800d024 <FastestRun+0x26c>)
 800ce22:	2200      	movs	r2, #0
 800ce24:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800ce26:	2101      	movs	r1, #1
 800ce28:	2004      	movs	r0, #4
 800ce2a:	f004 f851 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800ce2e:	2101      	movs	r1, #1
 800ce30:	2005      	movs	r0, #5
 800ce32:	f004 f84d 	bl	8010ed0 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800ce36:	4b7b      	ldr	r3, [pc, #492]	; (800d024 <FastestRun+0x26c>)
 800ce38:	6899      	ldr	r1, [r3, #8]
 800ce3a:	4b7a      	ldr	r3, [pc, #488]	; (800d024 <FastestRun+0x26c>)
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	4b79      	ldr	r3, [pc, #484]	; (800d024 <FastestRun+0x26c>)
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	4879      	ldr	r0, [pc, #484]	; (800d028 <FastestRun+0x270>)
 800ce44:	f00a f9f6 	bl	8017234 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800ce48:	2100      	movs	r1, #0
 800ce4a:	2001      	movs	r0, #1
 800ce4c:	f004 f840 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800ce50:	2100      	movs	r1, #0
 800ce52:	2002      	movs	r0, #2
 800ce54:	f004 f83c 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800ce58:	2100      	movs	r1, #0
 800ce5a:	2003      	movs	r0, #3
 800ce5c:	f004 f838 	bl	8010ed0 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode;
	if(mode == 1)
 800ce60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d105      	bne.n	800ce74 <FastestRun+0xbc>
	{
		ExploreVelocity = 400;
 800ce68:	4b70      	ldr	r3, [pc, #448]	; (800d02c <FastestRun+0x274>)
 800ce6a:	4a71      	ldr	r2, [pc, #452]	; (800d030 <FastestRun+0x278>)
 800ce6c:	601a      	str	r2, [r3, #0]
		turn_mode = 'T';
 800ce6e:	2354      	movs	r3, #84	; 0x54
 800ce70:	71fb      	strb	r3, [r7, #7]
 800ce72:	e005      	b.n	800ce80 <FastestRun+0xc8>
	}
	else if(mode == 2)
 800ce74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ce78:	2b02      	cmp	r3, #2
 800ce7a:	d101      	bne.n	800ce80 <FastestRun+0xc8>
	{
		turn_mode = 'S';
 800ce7c:	2353      	movs	r3, #83	; 0x53
 800ce7e:	71fb      	strb	r3, [r7, #7]
	}

	switch(mode2)
 800ce80:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800ce84:	3b01      	subs	r3, #1
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d863      	bhi.n	800cf52 <FastestRun+0x19a>
 800ce8a:	a201      	add	r2, pc, #4	; (adr r2, 800ce90 <FastestRun+0xd8>)
 800ce8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce90:	0800cea1 	.word	0x0800cea1
 800ce94:	0800cecd 	.word	0x0800cecd
 800ce98:	0800cef9 	.word	0x0800cef9
 800ce9c:	0800cf27 	.word	0x0800cf27
	{
	case 1:
		ExploreVelocity=90;
 800cea0:	4b62      	ldr	r3, [pc, #392]	; (800d02c <FastestRun+0x274>)
 800cea2:	4a64      	ldr	r2, [pc, #400]	; (800d034 <FastestRun+0x27c>)
 800cea4:	601a      	str	r2, [r3, #0]
		//未
		Sla.Pre = 7;//9;
 800cea6:	4b64      	ldr	r3, [pc, #400]	; (800d038 <FastestRun+0x280>)
 800cea8:	4a64      	ldr	r2, [pc, #400]	; (800d03c <FastestRun+0x284>)
 800ceaa:	601a      	str	r2, [r3, #0]
		Sla.Fol = 11;//13;
 800ceac:	4b62      	ldr	r3, [pc, #392]	; (800d038 <FastestRun+0x280>)
 800ceae:	4a64      	ldr	r2, [pc, #400]	; (800d040 <FastestRun+0x288>)
 800ceb0:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.014;
 800ceb2:	4b61      	ldr	r3, [pc, #388]	; (800d038 <FastestRun+0x280>)
 800ceb4:	4a63      	ldr	r2, [pc, #396]	; (800d044 <FastestRun+0x28c>)
 800ceb6:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800ceb8:	4b5f      	ldr	r3, [pc, #380]	; (800d038 <FastestRun+0x280>)
 800ceba:	4a63      	ldr	r2, [pc, #396]	; (800d048 <FastestRun+0x290>)
 800cebc:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800cebe:	4b5e      	ldr	r3, [pc, #376]	; (800d038 <FastestRun+0x280>)
 800cec0:	4a62      	ldr	r2, [pc, #392]	; (800d04c <FastestRun+0x294>)
 800cec2:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800cec4:	4b5c      	ldr	r3, [pc, #368]	; (800d038 <FastestRun+0x280>)
 800cec6:	4a5b      	ldr	r2, [pc, #364]	; (800d034 <FastestRun+0x27c>)
 800cec8:	619a      	str	r2, [r3, #24]
		break;
 800ceca:	e042      	b.n	800cf52 <FastestRun+0x19a>
	case 2:
		//完
		ExploreVelocity=135;
 800cecc:	4b57      	ldr	r3, [pc, #348]	; (800d02c <FastestRun+0x274>)
 800cece:	4a60      	ldr	r2, [pc, #384]	; (800d050 <FastestRun+0x298>)
 800ced0:	601a      	str	r2, [r3, #0]
		Sla.Pre = 5;
 800ced2:	4b59      	ldr	r3, [pc, #356]	; (800d038 <FastestRun+0x280>)
 800ced4:	4a5f      	ldr	r2, [pc, #380]	; (800d054 <FastestRun+0x29c>)
 800ced6:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800ced8:	4b57      	ldr	r3, [pc, #348]	; (800d038 <FastestRun+0x280>)
 800ceda:	4a5e      	ldr	r2, [pc, #376]	; (800d054 <FastestRun+0x29c>)
 800cedc:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.0273;
 800cede:	4b56      	ldr	r3, [pc, #344]	; (800d038 <FastestRun+0x280>)
 800cee0:	4a5d      	ldr	r2, [pc, #372]	; (800d058 <FastestRun+0x2a0>)
 800cee2:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800cee4:	4b54      	ldr	r3, [pc, #336]	; (800d038 <FastestRun+0x280>)
 800cee6:	4a58      	ldr	r2, [pc, #352]	; (800d048 <FastestRun+0x290>)
 800cee8:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800ceea:	4b53      	ldr	r3, [pc, #332]	; (800d038 <FastestRun+0x280>)
 800ceec:	4a57      	ldr	r2, [pc, #348]	; (800d04c <FastestRun+0x294>)
 800ceee:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800cef0:	4b51      	ldr	r3, [pc, #324]	; (800d038 <FastestRun+0x280>)
 800cef2:	4a50      	ldr	r2, [pc, #320]	; (800d034 <FastestRun+0x27c>)
 800cef4:	619a      	str	r2, [r3, #24]
		break;
 800cef6:	e02c      	b.n	800cf52 <FastestRun+0x19a>
//		Sla.Fol = 10;
//		Sla.Alpha = 0.04478;
//		Sla.Theta1 = 30;
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;
		ExploreVelocity=180;
 800cef8:	4b4c      	ldr	r3, [pc, #304]	; (800d02c <FastestRun+0x274>)
 800cefa:	4a58      	ldr	r2, [pc, #352]	; (800d05c <FastestRun+0x2a4>)
 800cefc:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800cefe:	4b4e      	ldr	r3, [pc, #312]	; (800d038 <FastestRun+0x280>)
 800cf00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cf04:	601a      	str	r2, [r3, #0]
		Sla.Fol = 3.5;
 800cf06:	4b4c      	ldr	r3, [pc, #304]	; (800d038 <FastestRun+0x280>)
 800cf08:	4a55      	ldr	r2, [pc, #340]	; (800d060 <FastestRun+0x2a8>)
 800cf0a:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.04;
 800cf0c:	4b4a      	ldr	r3, [pc, #296]	; (800d038 <FastestRun+0x280>)
 800cf0e:	4a55      	ldr	r2, [pc, #340]	; (800d064 <FastestRun+0x2ac>)
 800cf10:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800cf12:	4b49      	ldr	r3, [pc, #292]	; (800d038 <FastestRun+0x280>)
 800cf14:	4a4c      	ldr	r2, [pc, #304]	; (800d048 <FastestRun+0x290>)
 800cf16:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800cf18:	4b47      	ldr	r3, [pc, #284]	; (800d038 <FastestRun+0x280>)
 800cf1a:	4a4c      	ldr	r2, [pc, #304]	; (800d04c <FastestRun+0x294>)
 800cf1c:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800cf1e:	4b46      	ldr	r3, [pc, #280]	; (800d038 <FastestRun+0x280>)
 800cf20:	4a44      	ldr	r2, [pc, #272]	; (800d034 <FastestRun+0x27c>)
 800cf22:	619a      	str	r2, [r3, #24]
		break;
 800cf24:	e015      	b.n	800cf52 <FastestRun+0x19a>
	case 4:
		ExploreVelocity=300;
 800cf26:	4b41      	ldr	r3, [pc, #260]	; (800d02c <FastestRun+0x274>)
 800cf28:	4a4f      	ldr	r2, [pc, #316]	; (800d068 <FastestRun+0x2b0>)
 800cf2a:	601a      	str	r2, [r3, #0]
		Sla.Pre = 3;
 800cf2c:	4b42      	ldr	r3, [pc, #264]	; (800d038 <FastestRun+0x280>)
 800cf2e:	4a4f      	ldr	r2, [pc, #316]	; (800d06c <FastestRun+0x2b4>)
 800cf30:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800cf32:	4b41      	ldr	r3, [pc, #260]	; (800d038 <FastestRun+0x280>)
 800cf34:	4a47      	ldr	r2, [pc, #284]	; (800d054 <FastestRun+0x29c>)
 800cf36:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.117;
 800cf38:	4b3f      	ldr	r3, [pc, #252]	; (800d038 <FastestRun+0x280>)
 800cf3a:	4a4d      	ldr	r2, [pc, #308]	; (800d070 <FastestRun+0x2b8>)
 800cf3c:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800cf3e:	4b3e      	ldr	r3, [pc, #248]	; (800d038 <FastestRun+0x280>)
 800cf40:	4a41      	ldr	r2, [pc, #260]	; (800d048 <FastestRun+0x290>)
 800cf42:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800cf44:	4b3c      	ldr	r3, [pc, #240]	; (800d038 <FastestRun+0x280>)
 800cf46:	4a41      	ldr	r2, [pc, #260]	; (800d04c <FastestRun+0x294>)
 800cf48:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800cf4a:	4b3b      	ldr	r3, [pc, #236]	; (800d038 <FastestRun+0x280>)
 800cf4c:	4a39      	ldr	r2, [pc, #228]	; (800d034 <FastestRun+0x27c>)
 800cf4e:	619a      	str	r2, [r3, #24]
		break;
 800cf50:	bf00      	nop

	}

	ChangeLED(4);
 800cf52:	2004      	movs	r0, #4
 800cf54:	f003 fa26 	bl	80103a4 <ChangeLED>

	//マップデータの取得。flashから壁データを取得。
	flash_copy_to_ram();
 800cf58:	f7ff f8a0 	bl	800c09c <flash_copy_to_ram>

	SearchOrFast = 1;
 800cf5c:	4b45      	ldr	r3, [pc, #276]	; (800d074 <FastestRun+0x2bc>)
 800cf5e:	2201      	movs	r2, #1
 800cf60:	601a      	str	r2, [r3, #0]
	//走る
	goal_edge_num = two;
 800cf62:	4b45      	ldr	r3, [pc, #276]	; (800d078 <FastestRun+0x2c0>)
 800cf64:	2202      	movs	r2, #2
 800cf66:	701a      	strb	r2, [r3, #0]
//			HAL_Delay(300);
//			break;
//	}
	//shiftPos();

	TargetVelocity[BODY] = 0;
 800cf68:	4b44      	ldr	r3, [pc, #272]	; (800d07c <FastestRun+0x2c4>)
 800cf6a:	f04f 0200 	mov.w	r2, #0
 800cf6e:	609a      	str	r2, [r3, #8]
	Acceleration = 0;
 800cf70:	4b43      	ldr	r3, [pc, #268]	; (800d080 <FastestRun+0x2c8>)
 800cf72:	f04f 0200 	mov.w	r2, #0
 800cf76:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 800cf78:	4b42      	ldr	r3, [pc, #264]	; (800d084 <FastestRun+0x2cc>)
 800cf7a:	f04f 0200 	mov.w	r2, #0
 800cf7e:	601a      	str	r2, [r3, #0]
	PIDReset(L_VELO_PID);
 800cf80:	2004      	movs	r0, #4
 800cf82:	f003 ffbb 	bl	8010efc <PIDReset>
	PIDReset(R_VELO_PID);
 800cf86:	2005      	movs	r0, #5
 800cf88:	f003 ffb8 	bl	8010efc <PIDReset>
	PIDReset(A_VELO_PID);
 800cf8c:	2000      	movs	r0, #0
 800cf8e:	f003 ffb5 	bl	8010efc <PIDReset>
	PIDReset(L_WALL_PID);
 800cf92:	2002      	movs	r0, #2
 800cf94:	f003 ffb2 	bl	8010efc <PIDReset>
	PIDReset(R_WALL_PID);
 800cf98:	2003      	movs	r0, #3
 800cf9a:	f003 ffaf 	bl	8010efc <PIDReset>
	HAL_Delay(200);
 800cf9e:	20c8      	movs	r0, #200	; 0xc8
 800cfa0:	f004 fada 	bl	8011558 <HAL_Delay>
	//加速
	Pos.Dir = front;
 800cfa4:	4b38      	ldr	r3, [pc, #224]	; (800d088 <FastestRun+0x2d0>)
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	711a      	strb	r2, [r3, #4]
	switch(Pos.Car%4)
 800cfaa:	4b37      	ldr	r3, [pc, #220]	; (800d088 <FastestRun+0x2d0>)
 800cfac:	795b      	ldrb	r3, [r3, #5]
 800cfae:	f003 0303 	and.w	r3, r3, #3
 800cfb2:	2b03      	cmp	r3, #3
 800cfb4:	d878      	bhi.n	800d0a8 <FastestRun+0x2f0>
 800cfb6:	a201      	add	r2, pc, #4	; (adr r2, 800cfbc <FastestRun+0x204>)
 800cfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfbc:	0800cfcd 	.word	0x0800cfcd
 800cfc0:	0800cfe9 	.word	0x0800cfe9
 800cfc4:	0800d005 	.word	0x0800d005
 800cfc8:	0800d08d 	.word	0x0800d08d
	{
	case north:
		Pos.NextX = Pos.X;
 800cfcc:	4b2e      	ldr	r3, [pc, #184]	; (800d088 <FastestRun+0x2d0>)
 800cfce:	781a      	ldrb	r2, [r3, #0]
 800cfd0:	4b2d      	ldr	r3, [pc, #180]	; (800d088 <FastestRun+0x2d0>)
 800cfd2:	721a      	strb	r2, [r3, #8]
		Pos.NextY = Pos.Y + 1;
 800cfd4:	4b2c      	ldr	r3, [pc, #176]	; (800d088 <FastestRun+0x2d0>)
 800cfd6:	785b      	ldrb	r3, [r3, #1]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	4b2a      	ldr	r3, [pc, #168]	; (800d088 <FastestRun+0x2d0>)
 800cfde:	725a      	strb	r2, [r3, #9]
		Pos.NextCar = north;
 800cfe0:	4b29      	ldr	r3, [pc, #164]	; (800d088 <FastestRun+0x2d0>)
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	72da      	strb	r2, [r3, #11]
		break;
 800cfe6:	e05f      	b.n	800d0a8 <FastestRun+0x2f0>
	case east:
		Pos.NextX = Pos.X + 1;
 800cfe8:	4b27      	ldr	r3, [pc, #156]	; (800d088 <FastestRun+0x2d0>)
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	3301      	adds	r3, #1
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	4b25      	ldr	r3, [pc, #148]	; (800d088 <FastestRun+0x2d0>)
 800cff2:	721a      	strb	r2, [r3, #8]
		Pos.NextY = Pos.Y;
 800cff4:	4b24      	ldr	r3, [pc, #144]	; (800d088 <FastestRun+0x2d0>)
 800cff6:	785a      	ldrb	r2, [r3, #1]
 800cff8:	4b23      	ldr	r3, [pc, #140]	; (800d088 <FastestRun+0x2d0>)
 800cffa:	725a      	strb	r2, [r3, #9]
		Pos.NextCar = east;
 800cffc:	4b22      	ldr	r3, [pc, #136]	; (800d088 <FastestRun+0x2d0>)
 800cffe:	2201      	movs	r2, #1
 800d000:	72da      	strb	r2, [r3, #11]
		break;
 800d002:	e051      	b.n	800d0a8 <FastestRun+0x2f0>
	case south:
		Pos.NextX = Pos.X;
 800d004:	4b20      	ldr	r3, [pc, #128]	; (800d088 <FastestRun+0x2d0>)
 800d006:	781a      	ldrb	r2, [r3, #0]
 800d008:	4b1f      	ldr	r3, [pc, #124]	; (800d088 <FastestRun+0x2d0>)
 800d00a:	721a      	strb	r2, [r3, #8]
		Pos.NextY = Pos.Y - 1;
 800d00c:	4b1e      	ldr	r3, [pc, #120]	; (800d088 <FastestRun+0x2d0>)
 800d00e:	785b      	ldrb	r3, [r3, #1]
 800d010:	3b01      	subs	r3, #1
 800d012:	b2da      	uxtb	r2, r3
 800d014:	4b1c      	ldr	r3, [pc, #112]	; (800d088 <FastestRun+0x2d0>)
 800d016:	725a      	strb	r2, [r3, #9]
		Pos.NextCar = south;
 800d018:	4b1b      	ldr	r3, [pc, #108]	; (800d088 <FastestRun+0x2d0>)
 800d01a:	2202      	movs	r2, #2
 800d01c:	72da      	strb	r2, [r3, #11]
		break;
 800d01e:	e043      	b.n	800d0a8 <FastestRun+0x2f0>
 800d020:	200004e4 	.word	0x200004e4
 800d024:	20000524 	.word	0x20000524
 800d028:	0801b654 	.word	0x0801b654
 800d02c:	20000618 	.word	0x20000618
 800d030:	43c80000 	.word	0x43c80000
 800d034:	42b40000 	.word	0x42b40000
 800d038:	2000053c 	.word	0x2000053c
 800d03c:	40e00000 	.word	0x40e00000
 800d040:	41300000 	.word	0x41300000
 800d044:	3c656042 	.word	0x3c656042
 800d048:	41f00000 	.word	0x41f00000
 800d04c:	42700000 	.word	0x42700000
 800d050:	43070000 	.word	0x43070000
 800d054:	40a00000 	.word	0x40a00000
 800d058:	3cdfa440 	.word	0x3cdfa440
 800d05c:	43340000 	.word	0x43340000
 800d060:	40600000 	.word	0x40600000
 800d064:	3d23d70a 	.word	0x3d23d70a
 800d068:	43960000 	.word	0x43960000
 800d06c:	40400000 	.word	0x40400000
 800d070:	3def9db2 	.word	0x3def9db2
 800d074:	20000790 	.word	0x20000790
 800d078:	20000520 	.word	0x20000520
 800d07c:	200004f0 	.word	0x200004f0
 800d080:	2000022c 	.word	0x2000022c
 800d084:	20000500 	.word	0x20000500
 800d088:	20000000 	.word	0x20000000
	case west:
		Pos.NextX = Pos.X - 1;
 800d08c:	4b19      	ldr	r3, [pc, #100]	; (800d0f4 <FastestRun+0x33c>)
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	3b01      	subs	r3, #1
 800d092:	b2da      	uxtb	r2, r3
 800d094:	4b17      	ldr	r3, [pc, #92]	; (800d0f4 <FastestRun+0x33c>)
 800d096:	721a      	strb	r2, [r3, #8]
		Pos.NextY = Pos.Y;
 800d098:	4b16      	ldr	r3, [pc, #88]	; (800d0f4 <FastestRun+0x33c>)
 800d09a:	785a      	ldrb	r2, [r3, #1]
 800d09c:	4b15      	ldr	r3, [pc, #84]	; (800d0f4 <FastestRun+0x33c>)
 800d09e:	725a      	strb	r2, [r3, #9]
		Pos.NextCar = west;
 800d0a0:	4b14      	ldr	r3, [pc, #80]	; (800d0f4 <FastestRun+0x33c>)
 800d0a2:	2203      	movs	r2, #3
 800d0a4:	72da      	strb	r2, [r3, #11]
		break;
 800d0a6:	bf00      	nop
	}
	Accel(61.5, ExploreVelocity);
 800d0a8:	4b13      	ldr	r3, [pc, #76]	; (800d0f8 <FastestRun+0x340>)
 800d0aa:	edd3 7a00 	vldr	s15, [r3]
 800d0ae:	eef0 0a67 	vmov.f32	s1, s15
 800d0b2:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800d0fc <FastestRun+0x344>
 800d0b6:	f7fd f81b 	bl	800a0f0 <Accel>
	shiftPos();
 800d0ba:	f000 fc9f 	bl	800d9fc <shiftPos>
	fast_run( X_GOAL_LESSER, Y_GOAL_LESSER,X_GOAL_LARGER,Y_GOAL_LARGER, turn_mode,0x03);
 800d0be:	2303      	movs	r3, #3
 800d0c0:	9301      	str	r3, [sp, #4]
 800d0c2:	79fb      	ldrb	r3, [r7, #7]
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	2308      	movs	r3, #8
 800d0c8:	2208      	movs	r2, #8
 800d0ca:	2107      	movs	r1, #7
 800d0cc:	2007      	movs	r0, #7
 800d0ce:	f001 fb97 	bl	800e800 <fast_run>

	//ゴールしたら減速して、停止。
	Decel(45,0);
 800d0d2:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800d100 <FastestRun+0x348>
 800d0d6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800d104 <FastestRun+0x34c>
 800d0da:	f7fd f915 	bl	800a308 <Decel>
	//終了合図
	Signal(7);
 800d0de:	2007      	movs	r0, #7
 800d0e0:	f004 f898 	bl	8011214 <Signal>

	while(1)
	{
		HAL_Delay(10*1000);
 800d0e4:	f242 7010 	movw	r0, #10000	; 0x2710
 800d0e8:	f004 fa36 	bl	8011558 <HAL_Delay>
		printf("ログ出力\r\n");
 800d0ec:	4806      	ldr	r0, [pc, #24]	; (800d108 <FastestRun+0x350>)
 800d0ee:	f00a f915 	bl	801731c <puts>
		HAL_Delay(10*1000);
 800d0f2:	e7f7      	b.n	800d0e4 <FastestRun+0x32c>
 800d0f4:	20000000 	.word	0x20000000
 800d0f8:	20000618 	.word	0x20000618
 800d0fc:	42760000 	.word	0x42760000
 800d100:	00000000 	.word	0x00000000
 800d104:	42340000 	.word	0x42340000
 800d108:	0801b6d8 	.word	0x0801b6d8

0800d10c <Explore>:
	}
}
void Explore()
{
 800d10c:	b590      	push	{r4, r7, lr}
 800d10e:	b0db      	sub	sp, #364	; 0x16c
 800d110:	af02      	add	r7, sp, #8
	IT_mode = EXPLORE;
 800d112:	4b7d      	ldr	r3, [pc, #500]	; (800d308 <Explore+0x1fc>)
 800d114:	2206      	movs	r2, #6
 800d116:	601a      	str	r2, [r3, #0]
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800d118:	2064      	movs	r0, #100	; 0x64
 800d11a:	f004 fa1d 	bl	8011558 <HAL_Delay>
	int8_t mode=1;
 800d11e:	2301      	movs	r3, #1
 800d120:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	ModeSelect( 1, 2, &mode);
 800d124:	f207 134f 	addw	r3, r7, #335	; 0x14f
 800d128:	461a      	mov	r2, r3
 800d12a:	2102      	movs	r1, #2
 800d12c:	2001      	movs	r0, #1
 800d12e:	f004 f8e9 	bl	8011304 <ModeSelect>
	Signal( mode );
 800d132:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 800d136:	4618      	mov	r0, r3
 800d138:	f004 f86c 	bl	8011214 <Signal>
	HAL_Delay(100);
 800d13c:	2064      	movs	r0, #100	; 0x64
 800d13e:	f004 fa0b 	bl	8011558 <HAL_Delay>

	int8_t mode2=1;
 800d142:	2301      	movs	r3, #1
 800d144:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
	ModeSelect( 1, 4, &mode2);
 800d148:	f507 73a7 	add.w	r3, r7, #334	; 0x14e
 800d14c:	461a      	mov	r2, r3
 800d14e:	2104      	movs	r1, #4
 800d150:	2001      	movs	r0, #1
 800d152:	f004 f8d7 	bl	8011304 <ModeSelect>
	Signal( mode2 );
 800d156:	f997 314e 	ldrsb.w	r3, [r7, #334]	; 0x14e
 800d15a:	4618      	mov	r0, r3
 800d15c:	f004 f85a 	bl	8011214 <Signal>
	PhotoSwitch();
 800d160:	f004 f8ae 	bl	80112c0 <PhotoSwitch>
	InitExplore();
 800d164:	f7ff fabe 	bl	800c6e4 <InitExplore>
	InitPosition();
 800d168:	f7fb fe46 	bl	8008df8 <InitPosition>
	wall_init();
 800d16c:	f7fe fbb4 	bl	800b8d8 <wall_init>

	TotalPulse[RIGHT] = 0;
 800d170:	4b66      	ldr	r3, [pc, #408]	; (800d30c <Explore+0x200>)
 800d172:	2200      	movs	r2, #0
 800d174:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800d176:	4b65      	ldr	r3, [pc, #404]	; (800d30c <Explore+0x200>)
 800d178:	2200      	movs	r2, #0
 800d17a:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800d17c:	4b63      	ldr	r3, [pc, #396]	; (800d30c <Explore+0x200>)
 800d17e:	2200      	movs	r2, #0
 800d180:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800d182:	2101      	movs	r1, #1
 800d184:	2004      	movs	r0, #4
 800d186:	f003 fea3 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800d18a:	2101      	movs	r1, #1
 800d18c:	2005      	movs	r0, #5
 800d18e:	f003 fe9f 	bl	8010ed0 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800d192:	2100      	movs	r1, #0
 800d194:	2001      	movs	r0, #1
 800d196:	f003 fe9b 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800d19a:	2100      	movs	r1, #0
 800d19c:	2002      	movs	r0, #2
 800d19e:	f003 fe97 	bl	8010ed0 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	2003      	movs	r0, #3
 800d1a6:	f003 fe93 	bl	8010ed0 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	ChangeLED(2);
 800d1aa:	2002      	movs	r0, #2
 800d1ac:	f003 f8fa 	bl	80103a4 <ChangeLED>

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode;
	if(mode == 1)
 800d1b0:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d106      	bne.n	800d1c6 <Explore+0xba>
	{
		turn_mode = 'T';
 800d1b8:	2354      	movs	r3, #84	; 0x54
 800d1ba:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		ExploreVelocity=300;
 800d1be:	4b54      	ldr	r3, [pc, #336]	; (800d310 <Explore+0x204>)
 800d1c0:	4a54      	ldr	r2, [pc, #336]	; (800d314 <Explore+0x208>)
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	e006      	b.n	800d1d4 <Explore+0xc8>
	}
	else if(mode == 2)
 800d1c6:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d102      	bne.n	800d1d4 <Explore+0xc8>
	{
		turn_mode = 'S';
 800d1ce:	2353      	movs	r3, #83	; 0x53
 800d1d0:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
	}

	switch(mode2)
 800d1d4:	f997 314e 	ldrsb.w	r3, [r7, #334]	; 0x14e
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	2b03      	cmp	r3, #3
 800d1dc:	d865      	bhi.n	800d2aa <Explore+0x19e>
 800d1de:	a201      	add	r2, pc, #4	; (adr r2, 800d1e4 <Explore+0xd8>)
 800d1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e4:	0800d1f5 	.word	0x0800d1f5
 800d1e8:	0800d221 	.word	0x0800d221
 800d1ec:	0800d24f 	.word	0x0800d24f
 800d1f0:	0800d27f 	.word	0x0800d27f
	{
	case 1:
		ExploreVelocity=90;
 800d1f4:	4b46      	ldr	r3, [pc, #280]	; (800d310 <Explore+0x204>)
 800d1f6:	4a48      	ldr	r2, [pc, #288]	; (800d318 <Explore+0x20c>)
 800d1f8:	601a      	str	r2, [r3, #0]
		//未
		Sla.Pre = 9;
 800d1fa:	4b48      	ldr	r3, [pc, #288]	; (800d31c <Explore+0x210>)
 800d1fc:	4a48      	ldr	r2, [pc, #288]	; (800d320 <Explore+0x214>)
 800d1fe:	601a      	str	r2, [r3, #0]
		Sla.Fol = 20;
 800d200:	4b46      	ldr	r3, [pc, #280]	; (800d31c <Explore+0x210>)
 800d202:	4a48      	ldr	r2, [pc, #288]	; (800d324 <Explore+0x218>)
 800d204:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.014;
 800d206:	4b45      	ldr	r3, [pc, #276]	; (800d31c <Explore+0x210>)
 800d208:	4a47      	ldr	r2, [pc, #284]	; (800d328 <Explore+0x21c>)
 800d20a:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d20c:	4b43      	ldr	r3, [pc, #268]	; (800d31c <Explore+0x210>)
 800d20e:	4a47      	ldr	r2, [pc, #284]	; (800d32c <Explore+0x220>)
 800d210:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800d212:	4b42      	ldr	r3, [pc, #264]	; (800d31c <Explore+0x210>)
 800d214:	4a46      	ldr	r2, [pc, #280]	; (800d330 <Explore+0x224>)
 800d216:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800d218:	4b40      	ldr	r3, [pc, #256]	; (800d31c <Explore+0x210>)
 800d21a:	4a3f      	ldr	r2, [pc, #252]	; (800d318 <Explore+0x20c>)
 800d21c:	619a      	str	r2, [r3, #24]
//		Sla.Fol = 12;
//		Sla.Alalpha = 0.0007;
//		Sla.Theta1 = 30;
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;
		break;
 800d21e:	e044      	b.n	800d2aa <Explore+0x19e>
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;



		ExploreVelocity=180;
 800d220:	4b3b      	ldr	r3, [pc, #236]	; (800d310 <Explore+0x204>)
 800d222:	4a44      	ldr	r2, [pc, #272]	; (800d334 <Explore+0x228>)
 800d224:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800d226:	4b3d      	ldr	r3, [pc, #244]	; (800d31c <Explore+0x210>)
 800d228:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d22c:	601a      	str	r2, [r3, #0]
		Sla.Fol = 16.5;
 800d22e:	4b3b      	ldr	r3, [pc, #236]	; (800d31c <Explore+0x210>)
 800d230:	4a41      	ldr	r2, [pc, #260]	; (800d338 <Explore+0x22c>)
 800d232:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.043;
 800d234:	4b39      	ldr	r3, [pc, #228]	; (800d31c <Explore+0x210>)
 800d236:	4a41      	ldr	r2, [pc, #260]	; (800d33c <Explore+0x230>)
 800d238:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d23a:	4b38      	ldr	r3, [pc, #224]	; (800d31c <Explore+0x210>)
 800d23c:	4a3b      	ldr	r2, [pc, #236]	; (800d32c <Explore+0x220>)
 800d23e:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800d240:	4b36      	ldr	r3, [pc, #216]	; (800d31c <Explore+0x210>)
 800d242:	4a3b      	ldr	r2, [pc, #236]	; (800d330 <Explore+0x224>)
 800d244:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800d246:	4b35      	ldr	r3, [pc, #212]	; (800d31c <Explore+0x210>)
 800d248:	4a33      	ldr	r2, [pc, #204]	; (800d318 <Explore+0x20c>)
 800d24a:	619a      	str	r2, [r3, #24]
		break;
 800d24c:	e02d      	b.n	800d2aa <Explore+0x19e>
	case 3:
		ExploreVelocity=240;
 800d24e:	4b30      	ldr	r3, [pc, #192]	; (800d310 <Explore+0x204>)
 800d250:	4a3b      	ldr	r2, [pc, #236]	; (800d340 <Explore+0x234>)
 800d252:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800d254:	4b31      	ldr	r3, [pc, #196]	; (800d31c <Explore+0x210>)
 800d256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d25a:	601a      	str	r2, [r3, #0]
		Sla.Fol = 16;
 800d25c:	4b2f      	ldr	r3, [pc, #188]	; (800d31c <Explore+0x210>)
 800d25e:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800d262:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.078;
 800d264:	4b2d      	ldr	r3, [pc, #180]	; (800d31c <Explore+0x210>)
 800d266:	4a37      	ldr	r2, [pc, #220]	; (800d344 <Explore+0x238>)
 800d268:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d26a:	4b2c      	ldr	r3, [pc, #176]	; (800d31c <Explore+0x210>)
 800d26c:	4a2f      	ldr	r2, [pc, #188]	; (800d32c <Explore+0x220>)
 800d26e:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800d270:	4b2a      	ldr	r3, [pc, #168]	; (800d31c <Explore+0x210>)
 800d272:	4a2f      	ldr	r2, [pc, #188]	; (800d330 <Explore+0x224>)
 800d274:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800d276:	4b29      	ldr	r3, [pc, #164]	; (800d31c <Explore+0x210>)
 800d278:	4a27      	ldr	r2, [pc, #156]	; (800d318 <Explore+0x20c>)
 800d27a:	619a      	str	r2, [r3, #24]
		break;
 800d27c:	e015      	b.n	800d2aa <Explore+0x19e>
	case 4:
		ExploreVelocity=300;
 800d27e:	4b24      	ldr	r3, [pc, #144]	; (800d310 <Explore+0x204>)
 800d280:	4a24      	ldr	r2, [pc, #144]	; (800d314 <Explore+0x208>)
 800d282:	601a      	str	r2, [r3, #0]
		Sla.Pre = 3;
 800d284:	4b25      	ldr	r3, [pc, #148]	; (800d31c <Explore+0x210>)
 800d286:	4a30      	ldr	r2, [pc, #192]	; (800d348 <Explore+0x23c>)
 800d288:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800d28a:	4b24      	ldr	r3, [pc, #144]	; (800d31c <Explore+0x210>)
 800d28c:	4a2f      	ldr	r2, [pc, #188]	; (800d34c <Explore+0x240>)
 800d28e:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.117;
 800d290:	4b22      	ldr	r3, [pc, #136]	; (800d31c <Explore+0x210>)
 800d292:	4a2f      	ldr	r2, [pc, #188]	; (800d350 <Explore+0x244>)
 800d294:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d296:	4b21      	ldr	r3, [pc, #132]	; (800d31c <Explore+0x210>)
 800d298:	4a24      	ldr	r2, [pc, #144]	; (800d32c <Explore+0x220>)
 800d29a:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800d29c:	4b1f      	ldr	r3, [pc, #124]	; (800d31c <Explore+0x210>)
 800d29e:	4a24      	ldr	r2, [pc, #144]	; (800d330 <Explore+0x224>)
 800d2a0:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800d2a2:	4b1e      	ldr	r3, [pc, #120]	; (800d31c <Explore+0x210>)
 800d2a4:	4a1c      	ldr	r2, [pc, #112]	; (800d318 <Explore+0x20c>)
 800d2a6:	619a      	str	r2, [r3, #24]
		//		//未

		break;
 800d2a8:	bf00      	nop

	}
	Pos.TargetX = X_GOAL_LESSER;
 800d2aa:	4b2a      	ldr	r3, [pc, #168]	; (800d354 <Explore+0x248>)
 800d2ac:	2207      	movs	r2, #7
 800d2ae:	709a      	strb	r2, [r3, #2]
	Pos.TargetY = Y_GOAL_LESSER;
 800d2b0:	4b28      	ldr	r3, [pc, #160]	; (800d354 <Explore+0x248>)
 800d2b2:	2207      	movs	r2, #7
 800d2b4:	70da      	strb	r2, [r3, #3]
	goal_edge_num = two;
 800d2b6:	4b28      	ldr	r3, [pc, #160]	; (800d358 <Explore+0x24c>)
 800d2b8:	2202      	movs	r2, #2
 800d2ba:	701a      	strb	r2, [r3, #0]
	SearchOrFast = 0;
 800d2bc:	4b27      	ldr	r3, [pc, #156]	; (800d35c <Explore+0x250>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800d2c2:	4b24      	ldr	r3, [pc, #144]	; (800d354 <Explore+0x248>)
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	711a      	strb	r2, [r3, #4]
	Pos.Car = north;
 800d2c8:	4b22      	ldr	r3, [pc, #136]	; (800d354 <Explore+0x248>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	715a      	strb	r2, [r3, #5]
	Pos.NextX = Pos.X;
 800d2ce:	4b21      	ldr	r3, [pc, #132]	; (800d354 <Explore+0x248>)
 800d2d0:	781a      	ldrb	r2, [r3, #0]
 800d2d2:	4b20      	ldr	r3, [pc, #128]	; (800d354 <Explore+0x248>)
 800d2d4:	721a      	strb	r2, [r3, #8]
	Pos.NextY = Pos.Y + 1;
 800d2d6:	4b1f      	ldr	r3, [pc, #124]	; (800d354 <Explore+0x248>)
 800d2d8:	785b      	ldrb	r3, [r3, #1]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	b2da      	uxtb	r2, r3
 800d2de:	4b1d      	ldr	r3, [pc, #116]	; (800d354 <Explore+0x248>)
 800d2e0:	725a      	strb	r2, [r3, #9]
	Pos.NextCar = north;
 800d2e2:	4b1c      	ldr	r3, [pc, #112]	; (800d354 <Explore+0x248>)
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	72da      	strb	r2, [r3, #11]
	dbc = 1;
 800d2e8:	4b1d      	ldr	r3, [pc, #116]	; (800d360 <Explore+0x254>)
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	601a      	str	r2, [r3, #0]
	Accel(61.5, ExploreVelocity);
 800d2ee:	4b08      	ldr	r3, [pc, #32]	; (800d310 <Explore+0x204>)
 800d2f0:	edd3 7a00 	vldr	s15, [r3]
 800d2f4:	eef0 0a67 	vmov.f32	s1, s15
 800d2f8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800d364 <Explore+0x258>
 800d2fc:	f7fc fef8 	bl	800a0f0 <Accel>
	shiftPos();
 800d300:	f000 fb7c 	bl	800d9fc <shiftPos>
//	{
//		ChangeLED(7);
//		TargetVelocity[BODY] = 0;
//	}

	while( !( (X_GOAL_LESSER <= Pos.X) && (Pos.X <= X_GOAL_LARGER) ) ||  !( ( Y_GOAL_LESSER <= Pos.Y) && (Pos.Y <= Y_GOAL_LARGER)) ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800d304:	e039      	b.n	800d37a <Explore+0x26e>
 800d306:	bf00      	nop
 800d308:	200004e4 	.word	0x200004e4
 800d30c:	20000524 	.word	0x20000524
 800d310:	20000618 	.word	0x20000618
 800d314:	43960000 	.word	0x43960000
 800d318:	42b40000 	.word	0x42b40000
 800d31c:	2000053c 	.word	0x2000053c
 800d320:	41100000 	.word	0x41100000
 800d324:	41a00000 	.word	0x41a00000
 800d328:	3c656042 	.word	0x3c656042
 800d32c:	41f00000 	.word	0x41f00000
 800d330:	42700000 	.word	0x42700000
 800d334:	43340000 	.word	0x43340000
 800d338:	41840000 	.word	0x41840000
 800d33c:	3d3020c5 	.word	0x3d3020c5
 800d340:	43700000 	.word	0x43700000
 800d344:	3d9fbe77 	.word	0x3d9fbe77
 800d348:	40400000 	.word	0x40400000
 800d34c:	40a00000 	.word	0x40a00000
 800d350:	3def9db2 	.word	0x3def9db2
 800d354:	20000000 	.word	0x20000000
 800d358:	20000520 	.word	0x20000520
 800d35c:	20000790 	.word	0x20000790
 800d360:	20000218 	.word	0x20000218
 800d364:	42760000 	.word	0x42760000
	{

		//ChangeLED(Pos.Car);
		KyushinJudge();
 800d368:	f000 fc8e 	bl	800dc88 <KyushinJudge>
		SelectAction(turn_mode);
 800d36c:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800d370:	4618      	mov	r0, r3
 800d372:	f7fd fdf9 	bl	800af68 <SelectAction>
		shiftPos();
 800d376:	f000 fb41 	bl	800d9fc <shiftPos>
	while( !( (X_GOAL_LESSER <= Pos.X) && (Pos.X <= X_GOAL_LARGER) ) ||  !( ( Y_GOAL_LESSER <= Pos.Y) && (Pos.Y <= Y_GOAL_LARGER)) ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800d37a:	4baa      	ldr	r3, [pc, #680]	; (800d624 <Explore+0x518>)
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	2b06      	cmp	r3, #6
 800d380:	d9f2      	bls.n	800d368 <Explore+0x25c>
 800d382:	4ba8      	ldr	r3, [pc, #672]	; (800d624 <Explore+0x518>)
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	2b08      	cmp	r3, #8
 800d388:	d8ee      	bhi.n	800d368 <Explore+0x25c>
 800d38a:	4ba6      	ldr	r3, [pc, #664]	; (800d624 <Explore+0x518>)
 800d38c:	785b      	ldrb	r3, [r3, #1]
 800d38e:	2b06      	cmp	r3, #6
 800d390:	d9ea      	bls.n	800d368 <Explore+0x25c>
 800d392:	4ba4      	ldr	r3, [pc, #656]	; (800d624 <Explore+0x518>)
 800d394:	785b      	ldrb	r3, [r3, #1]
 800d396:	2b08      	cmp	r3, #8
 800d398:	d8e6      	bhi.n	800d368 <Explore+0x25c>
	}
//	while(1)
//	{
//		TargetVelocity[BODY] = 0;
//	}
	Decel(45, 0);
 800d39a:	eddf 0aa3 	vldr	s1, [pc, #652]	; 800d628 <Explore+0x51c>
 800d39e:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 800d62c <Explore+0x520>
 800d3a2:	f7fc ffb1 	bl	800a308 <Decel>
	shiftPos();
 800d3a6:	f000 fb29 	bl	800d9fc <shiftPos>
//		printf("total L: %d, total R: %d\r\n",TotalPulse[LEFT],TotalPulse[RIGHT]);
//		HAL_Delay(1000);


	//flashのクリア。
	Flash_clear_sector1();
 800d3aa:	f002 fe17 	bl	800ffdc <Flash_clear_sector1>
	//マップ書き込み
	flash_store_init();
 800d3ae:	f7fe fa2b 	bl	800b808 <flash_store_init>
	//完了の合図
	Signal(7);
 800d3b2:	2007      	movs	r0, #7
 800d3b4:	f003 ff2e 	bl	8011214 <Signal>
//	}
	//未知壁の座標を確認
	//未知壁がなくなるまで、歩数が最も近い座標を目標座標にして走行
	//未知壁を消すごとに歩数マップを更新（現在座標からの歩数が最も小さい座標へ）
	//未探索座標を設定
	uint8_t target_x[NUMBER_OF_SQUARES*NUMBER_OF_SQUARES]={0};
 800d3b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800d3bc:	2251      	movs	r2, #81	; 0x51
 800d3be:	2100      	movs	r1, #0
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f009 f8f0 	bl	80165a6 <memset>
	uint8_t target_y[NUMBER_OF_SQUARES*NUMBER_OF_SQUARES]={0};
 800d3c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d3ca:	2251      	movs	r2, #81	; 0x51
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f009 f8e9 	bl	80165a6 <memset>
	uint16_t walk_val[NUMBER_OF_SQUARES*NUMBER_OF_SQUARES]={0};
 800d3d4:	1d3b      	adds	r3, r7, #4
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	23a2      	movs	r3, #162	; 0xa2
 800d3da:	461a      	mov	r2, r3
 800d3dc:	2100      	movs	r1, #0
 800d3de:	f009 f8e2 	bl	80165a6 <memset>
	goal_edge_num = one;
 800d3e2:	4b93      	ldr	r3, [pc, #588]	; (800d630 <Explore+0x524>)
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	701a      	strb	r2, [r3, #0]
	SearchOrFast = 0;
 800d3e8:	4b92      	ldr	r3, [pc, #584]	; (800d634 <Explore+0x528>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	601a      	str	r2, [r3, #0]

	int area_num = 	setNotExploredArea((uint8_t *)target_x, (uint8_t *)target_y, (uint16_t *)walk_val);
 800d3ee:	1d3a      	adds	r2, r7, #4
 800d3f0:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800d3f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fe fedb 	bl	800c1b4 <setNotExploredArea>
 800d3fe:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
	ChangeLED(3);
 800d402:	2003      	movs	r0, #3
 800d404:	f002 ffce 	bl	80103a4 <ChangeLED>
//		{
//			printf("%d, %u, %u, %u\r\n",i,target_x[i],target_y[i],walk_val[i]);
//		}
//	}

	if(area_num != 0)
 800d408:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f000 82e4 	beq.w	800d9da <Explore+0x8ce>
	{
		//目標座標の配列を得たので、
		float acc;// = AjustCenter();
		//現在の向きから、次に行くべき方向へ向く
		Pos.Dir = get_nextdir(target_x[0],target_y[0],0x01);
 800d412:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800d416:	4618      	mov	r0, r3
 800d418:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800d41c:	2201      	movs	r2, #1
 800d41e:	4619      	mov	r1, r3
 800d420:	f001 f848 	bl	800e4b4 <get_nextdir>
 800d424:	4603      	mov	r3, r0
 800d426:	b2da      	uxtb	r2, r3
 800d428:	4b7e      	ldr	r3, [pc, #504]	; (800d624 <Explore+0x518>)
 800d42a:	711a      	strb	r2, [r3, #4]
		ChangeLED(2);
 800d42c:	2002      	movs	r0, #2
 800d42e:	f002 ffb9 	bl	80103a4 <ChangeLED>
		switch(Pos.Dir%4)	//次に行く方向を戻り値とする関数を呼ぶ
 800d432:	4b7c      	ldr	r3, [pc, #496]	; (800d624 <Explore+0x518>)
 800d434:	791b      	ldrb	r3, [r3, #4]
 800d436:	f003 0303 	and.w	r3, r3, #3
 800d43a:	2b03      	cmp	r3, #3
 800d43c:	d870      	bhi.n	800d520 <Explore+0x414>
 800d43e:	a201      	add	r2, pc, #4	; (adr r2, 800d444 <Explore+0x338>)
 800d440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d444:	0800d455 	.word	0x0800d455
 800d448:	0800d475 	.word	0x0800d475
 800d44c:	0800d4cd 	.word	0x0800d4cd
 800d450:	0800d4a1 	.word	0x0800d4a1
		{
			case front:
					//前向きだった場合はそのまま加速
				if(Pos.X == 0 && Pos.Y == 0)
 800d454:	4b73      	ldr	r3, [pc, #460]	; (800d624 <Explore+0x518>)
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d107      	bne.n	800d46c <Explore+0x360>
 800d45c:	4b71      	ldr	r3, [pc, #452]	; (800d624 <Explore+0x518>)
 800d45e:	785b      	ldrb	r3, [r3, #1]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d103      	bne.n	800d46c <Explore+0x360>
				{
					acc = 61.75;
 800d464:	4b74      	ldr	r3, [pc, #464]	; (800d638 <Explore+0x52c>)
 800d466:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
				else
				{
					acc = 45;
				}

				break;
 800d46a:	e059      	b.n	800d520 <Explore+0x414>
					acc = 45;
 800d46c:	4b73      	ldr	r3, [pc, #460]	; (800d63c <Explore+0x530>)
 800d46e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
				break;
 800d472:	e055      	b.n	800d520 <Explore+0x414>

			case right:					//右に向く
				acc = AjustCenter();
 800d474:	f7fd f8aa 	bl	800a5cc <AjustCenter>
 800d478:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
				Rotate( 90 , 2*M_PI);
 800d47c:	eddf 0a70 	vldr	s1, [pc, #448]	; 800d640 <Explore+0x534>
 800d480:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800d644 <Explore+0x538>
 800d484:	f7fc f820 	bl	80094c8 <Rotate>
				acc = AjustCenter();
 800d488:	f7fd f8a0 	bl	800a5cc <AjustCenter>
 800d48c:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
				HAL_Delay(100);
 800d490:	2064      	movs	r0, #100	; 0x64
 800d492:	f004 f861 	bl	8011558 <HAL_Delay>
				PIDChangeFlag( A_VELO_PID , 1);
 800d496:	2101      	movs	r1, #1
 800d498:	2000      	movs	r0, #0
 800d49a:	f003 fd19 	bl	8010ed0 <PIDChangeFlag>
				break;
 800d49e:	e03f      	b.n	800d520 <Explore+0x414>

			case left:					//左に向く
				acc = AjustCenter();
 800d4a0:	f7fd f894 	bl	800a5cc <AjustCenter>
 800d4a4:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
				Rotate( 90 , -2*M_PI);			//左に曲がって
 800d4a8:	eddf 0a67 	vldr	s1, [pc, #412]	; 800d648 <Explore+0x53c>
 800d4ac:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800d644 <Explore+0x538>
 800d4b0:	f7fc f80a 	bl	80094c8 <Rotate>
				acc = AjustCenter();
 800d4b4:	f7fd f88a 	bl	800a5cc <AjustCenter>
 800d4b8:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
				HAL_Delay(100);
 800d4bc:	2064      	movs	r0, #100	; 0x64
 800d4be:	f004 f84b 	bl	8011558 <HAL_Delay>
				PIDChangeFlag( A_VELO_PID , 1);
 800d4c2:	2101      	movs	r1, #1
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	f003 fd03 	bl	8010ed0 <PIDChangeFlag>
				break;
 800d4ca:	e029      	b.n	800d520 <Explore+0x414>

			case back:					//後ろに向く
				acc = AjustCenter();
 800d4cc:	f7fd f87e 	bl	800a5cc <AjustCenter>
 800d4d0:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
				Pos.Dir = right;
 800d4d4:	4b53      	ldr	r3, [pc, #332]	; (800d624 <Explore+0x518>)
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	711a      	strb	r2, [r3, #4]
				Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800d4da:	eddf 0a59 	vldr	s1, [pc, #356]	; 800d640 <Explore+0x534>
 800d4de:	ed9f 0a59 	vldr	s0, [pc, #356]	; 800d644 <Explore+0x538>
 800d4e2:	f7fb fff1 	bl	80094c8 <Rotate>
				acc = AjustCenter();
 800d4e6:	f7fd f871 	bl	800a5cc <AjustCenter>
 800d4ea:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
				Pos.Dir = right;
 800d4ee:	4b4d      	ldr	r3, [pc, #308]	; (800d624 <Explore+0x518>)
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	711a      	strb	r2, [r3, #4]
				Rotate(90, 2*M_PI);
 800d4f4:	eddf 0a52 	vldr	s1, [pc, #328]	; 800d640 <Explore+0x534>
 800d4f8:	ed9f 0a52 	vldr	s0, [pc, #328]	; 800d644 <Explore+0x538>
 800d4fc:	f7fb ffe4 	bl	80094c8 <Rotate>
				Pos.Dir = back;
 800d500:	4b48      	ldr	r3, [pc, #288]	; (800d624 <Explore+0x518>)
 800d502:	2202      	movs	r2, #2
 800d504:	711a      	strb	r2, [r3, #4]
				acc = AjustCenter();
 800d506:	f7fd f861 	bl	800a5cc <AjustCenter>
 800d50a:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
				Angle = TargetAngle;
 800d50e:	4b4f      	ldr	r3, [pc, #316]	; (800d64c <Explore+0x540>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a4f      	ldr	r2, [pc, #316]	; (800d650 <Explore+0x544>)
 800d514:	6013      	str	r3, [r2, #0]
				HAL_Delay(300);
 800d516:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d51a:	f004 f81d 	bl	8011558 <HAL_Delay>
				break;
 800d51e:	bf00      	nop
		}
			//shiftPos();

			TargetVelocity[BODY] = 0;
 800d520:	4b4c      	ldr	r3, [pc, #304]	; (800d654 <Explore+0x548>)
 800d522:	f04f 0200 	mov.w	r2, #0
 800d526:	609a      	str	r2, [r3, #8]
			Acceleration = 0;
 800d528:	4b4b      	ldr	r3, [pc, #300]	; (800d658 <Explore+0x54c>)
 800d52a:	f04f 0200 	mov.w	r2, #0
 800d52e:	601a      	str	r2, [r3, #0]
			TargetAngularV = 0;
 800d530:	4b4a      	ldr	r3, [pc, #296]	; (800d65c <Explore+0x550>)
 800d532:	f04f 0200 	mov.w	r2, #0
 800d536:	601a      	str	r2, [r3, #0]
			PIDReset(L_VELO_PID);
 800d538:	2004      	movs	r0, #4
 800d53a:	f003 fcdf 	bl	8010efc <PIDReset>
			PIDReset(R_VELO_PID);
 800d53e:	2005      	movs	r0, #5
 800d540:	f003 fcdc 	bl	8010efc <PIDReset>
			PIDReset(A_VELO_PID);
 800d544:	2000      	movs	r0, #0
 800d546:	f003 fcd9 	bl	8010efc <PIDReset>
			PIDReset(L_WALL_PID);
 800d54a:	2002      	movs	r0, #2
 800d54c:	f003 fcd6 	bl	8010efc <PIDReset>
			PIDReset(R_WALL_PID);
 800d550:	2003      	movs	r0, #3
 800d552:	f003 fcd3 	bl	8010efc <PIDReset>
			HAL_Delay(200);
 800d556:	20c8      	movs	r0, #200	; 0xc8
 800d558:	f003 fffe 	bl	8011558 <HAL_Delay>
			ChangeLED(1);
 800d55c:	2001      	movs	r0, #1
 800d55e:	f002 ff21 	bl	80103a4 <ChangeLED>
			//加速
			Pos.Dir = front;
 800d562:	4b30      	ldr	r3, [pc, #192]	; (800d624 <Explore+0x518>)
 800d564:	2200      	movs	r2, #0
 800d566:	711a      	strb	r2, [r3, #4]
			switch(Pos.Car%4)
 800d568:	4b2e      	ldr	r3, [pc, #184]	; (800d624 <Explore+0x518>)
 800d56a:	795b      	ldrb	r3, [r3, #5]
 800d56c:	f003 0303 	and.w	r3, r3, #3
 800d570:	2b03      	cmp	r3, #3
 800d572:	d843      	bhi.n	800d5fc <Explore+0x4f0>
 800d574:	a201      	add	r2, pc, #4	; (adr r2, 800d57c <Explore+0x470>)
 800d576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d57a:	bf00      	nop
 800d57c:	0800d58d 	.word	0x0800d58d
 800d580:	0800d5a9 	.word	0x0800d5a9
 800d584:	0800d5c5 	.word	0x0800d5c5
 800d588:	0800d5e1 	.word	0x0800d5e1
			{
			case north:
				Pos.NextX = Pos.X;
 800d58c:	4b25      	ldr	r3, [pc, #148]	; (800d624 <Explore+0x518>)
 800d58e:	781a      	ldrb	r2, [r3, #0]
 800d590:	4b24      	ldr	r3, [pc, #144]	; (800d624 <Explore+0x518>)
 800d592:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y + 1;
 800d594:	4b23      	ldr	r3, [pc, #140]	; (800d624 <Explore+0x518>)
 800d596:	785b      	ldrb	r3, [r3, #1]
 800d598:	3301      	adds	r3, #1
 800d59a:	b2da      	uxtb	r2, r3
 800d59c:	4b21      	ldr	r3, [pc, #132]	; (800d624 <Explore+0x518>)
 800d59e:	725a      	strb	r2, [r3, #9]
				Pos.NextCar = north;
 800d5a0:	4b20      	ldr	r3, [pc, #128]	; (800d624 <Explore+0x518>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	72da      	strb	r2, [r3, #11]
				break;
 800d5a6:	e029      	b.n	800d5fc <Explore+0x4f0>
			case east:
				Pos.NextX = Pos.X + 1;
 800d5a8:	4b1e      	ldr	r3, [pc, #120]	; (800d624 <Explore+0x518>)
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	4b1c      	ldr	r3, [pc, #112]	; (800d624 <Explore+0x518>)
 800d5b2:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y;
 800d5b4:	4b1b      	ldr	r3, [pc, #108]	; (800d624 <Explore+0x518>)
 800d5b6:	785a      	ldrb	r2, [r3, #1]
 800d5b8:	4b1a      	ldr	r3, [pc, #104]	; (800d624 <Explore+0x518>)
 800d5ba:	725a      	strb	r2, [r3, #9]
				Pos.NextCar = east;
 800d5bc:	4b19      	ldr	r3, [pc, #100]	; (800d624 <Explore+0x518>)
 800d5be:	2201      	movs	r2, #1
 800d5c0:	72da      	strb	r2, [r3, #11]
				break;
 800d5c2:	e01b      	b.n	800d5fc <Explore+0x4f0>
			case south:
				Pos.NextX = Pos.X;
 800d5c4:	4b17      	ldr	r3, [pc, #92]	; (800d624 <Explore+0x518>)
 800d5c6:	781a      	ldrb	r2, [r3, #0]
 800d5c8:	4b16      	ldr	r3, [pc, #88]	; (800d624 <Explore+0x518>)
 800d5ca:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y - 1;
 800d5cc:	4b15      	ldr	r3, [pc, #84]	; (800d624 <Explore+0x518>)
 800d5ce:	785b      	ldrb	r3, [r3, #1]
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	4b13      	ldr	r3, [pc, #76]	; (800d624 <Explore+0x518>)
 800d5d6:	725a      	strb	r2, [r3, #9]
				Pos.NextCar = south;
 800d5d8:	4b12      	ldr	r3, [pc, #72]	; (800d624 <Explore+0x518>)
 800d5da:	2202      	movs	r2, #2
 800d5dc:	72da      	strb	r2, [r3, #11]
				break;
 800d5de:	e00d      	b.n	800d5fc <Explore+0x4f0>
			case west:
				Pos.NextX = Pos.X - 1;
 800d5e0:	4b10      	ldr	r3, [pc, #64]	; (800d624 <Explore+0x518>)
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	b2da      	uxtb	r2, r3
 800d5e8:	4b0e      	ldr	r3, [pc, #56]	; (800d624 <Explore+0x518>)
 800d5ea:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y;
 800d5ec:	4b0d      	ldr	r3, [pc, #52]	; (800d624 <Explore+0x518>)
 800d5ee:	785a      	ldrb	r2, [r3, #1]
 800d5f0:	4b0c      	ldr	r3, [pc, #48]	; (800d624 <Explore+0x518>)
 800d5f2:	725a      	strb	r2, [r3, #9]
				Pos.NextCar = west;
 800d5f4:	4b0b      	ldr	r3, [pc, #44]	; (800d624 <Explore+0x518>)
 800d5f6:	2203      	movs	r2, #3
 800d5f8:	72da      	strb	r2, [r3, #11]
				break;
 800d5fa:	bf00      	nop
			}
			ChangeLED(0);
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	f002 fed1 	bl	80103a4 <ChangeLED>
			Accel(acc, ExploreVelocity);
 800d602:	4b17      	ldr	r3, [pc, #92]	; (800d660 <Explore+0x554>)
 800d604:	edd3 7a00 	vldr	s15, [r3]
 800d608:	eef0 0a67 	vmov.f32	s1, s15
 800d60c:	ed97 0a55 	vldr	s0, [r7, #340]	; 0x154
 800d610:	f7fc fd6e 	bl	800a0f0 <Accel>
			shiftPos();
 800d614:	f000 f9f2 	bl	800d9fc <shiftPos>
		while(!(Pos.X == 0 && Pos.Y == 0))
 800d618:	e1c7      	b.n	800d9aa <Explore+0x89e>
		{
			for(int i=0; i < area_num; i++)
 800d61a:	2300      	movs	r3, #0
 800d61c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800d620:	e1bc      	b.n	800d99c <Explore+0x890>
 800d622:	bf00      	nop
 800d624:	20000000 	.word	0x20000000
 800d628:	00000000 	.word	0x00000000
 800d62c:	42340000 	.word	0x42340000
 800d630:	20000520 	.word	0x20000520
 800d634:	20000790 	.word	0x20000790
 800d638:	42770000 	.word	0x42770000
 800d63c:	42340000 	.word	0x42340000
 800d640:	40c90fdb 	.word	0x40c90fdb
 800d644:	42b40000 	.word	0x42b40000
 800d648:	c0c90fdb 	.word	0xc0c90fdb
 800d64c:	2000051c 	.word	0x2000051c
 800d650:	20000228 	.word	0x20000228
 800d654:	200004f0 	.word	0x200004f0
 800d658:	2000022c 	.word	0x2000022c
 800d65c:	20000500 	.word	0x20000500
 800d660:	20000618 	.word	0x20000618
			{
				static int reset_cnt = 0;
				if(reset_cnt == 1)
 800d664:	4bbb      	ldr	r3, [pc, #748]	; (800d954 <Explore+0x848>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d105      	bne.n	800d678 <Explore+0x56c>
				{
					i = 0;
 800d66c:	2300      	movs	r3, #0
 800d66e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
					reset_cnt = 0;
 800d672:	4bb8      	ldr	r3, [pc, #736]	; (800d954 <Explore+0x848>)
 800d674:	2200      	movs	r2, #0
 800d676:	601a      	str	r2, [r3, #0]
				}
				Pos.TargetX = target_x[i];
 800d678:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800d67c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d680:	4413      	add	r3, r2
 800d682:	781a      	ldrb	r2, [r3, #0]
 800d684:	4bb4      	ldr	r3, [pc, #720]	; (800d958 <Explore+0x84c>)
 800d686:	709a      	strb	r2, [r3, #2]
				Pos.TargetY = target_y[i];
 800d688:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800d68c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d690:	4413      	add	r3, r2
 800d692:	781a      	ldrb	r2, [r3, #0]
 800d694:	4bb0      	ldr	r3, [pc, #704]	; (800d958 <Explore+0x84c>)
 800d696:	70da      	strb	r2, [r3, #3]
				if(judgeImpasse(Pos.TargetX, Pos.TargetY) == 1)
 800d698:	4baf      	ldr	r3, [pc, #700]	; (800d958 <Explore+0x84c>)
 800d69a:	789a      	ldrb	r2, [r3, #2]
 800d69c:	4bae      	ldr	r3, [pc, #696]	; (800d958 <Explore+0x84c>)
 800d69e:	78db      	ldrb	r3, [r3, #3]
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	4610      	mov	r0, r2
 800d6a4:	f000 f9f4 	bl	800da90 <judgeImpasse>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	f040 8170 	bne.w	800d990 <Explore+0x884>
					//目標座標が袋小路なら次の座標を目標座標にする
					continue;
				}

				//向くべき方を向いて加速して、あとは未探索の配列が終了するまで繰り返し
				fast_run( Pos.TargetX, Pos.TargetY,Pos.TargetX,Pos.TargetY, turn_mode,0x01);
 800d6b0:	4ba9      	ldr	r3, [pc, #676]	; (800d958 <Explore+0x84c>)
 800d6b2:	789b      	ldrb	r3, [r3, #2]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	4ba8      	ldr	r3, [pc, #672]	; (800d958 <Explore+0x84c>)
 800d6b8:	78db      	ldrb	r3, [r3, #3]
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	4ba6      	ldr	r3, [pc, #664]	; (800d958 <Explore+0x84c>)
 800d6be:	789b      	ldrb	r3, [r3, #2]
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	4ba5      	ldr	r3, [pc, #660]	; (800d958 <Explore+0x84c>)
 800d6c4:	78db      	ldrb	r3, [r3, #3]
 800d6c6:	461c      	mov	r4, r3
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	9301      	str	r3, [sp, #4]
 800d6cc:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	4623      	mov	r3, r4
 800d6d4:	f001 f894 	bl	800e800 <fast_run>
				//袋小路が来たら、停止、再計算、補正して加速
				if(judgeImpasse(Pos.X, Pos.Y) == 1 || judgeAdjacency(target_x[i+1], target_y[i+1]) == 0/*現在座標と次の目標座標が隣り合っていなければ、*/)
 800d6d8:	4b9f      	ldr	r3, [pc, #636]	; (800d958 <Explore+0x84c>)
 800d6da:	781a      	ldrb	r2, [r3, #0]
 800d6dc:	4b9e      	ldr	r3, [pc, #632]	; (800d958 <Explore+0x84c>)
 800d6de:	785b      	ldrb	r3, [r3, #1]
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	4610      	mov	r0, r2
 800d6e4:	f000 f9d4 	bl	800da90 <judgeImpasse>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d11a      	bne.n	800d724 <Explore+0x618>
 800d6ee:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800d6f8:	4413      	add	r3, r2
 800d6fa:	f813 2c64 	ldrb.w	r2, [r3, #-100]
 800d6fe:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d702:	3301      	adds	r3, #1
 800d704:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 800d708:	440b      	add	r3, r1
 800d70a:	f813 3cb8 	ldrb.w	r3, [r3, #-184]
 800d70e:	4619      	mov	r1, r3
 800d710:	4610      	mov	r0, r2
 800d712:	f000 f989 	bl	800da28 <judgeAdjacency>
 800d716:	4603      	mov	r3, r0
 800d718:	f083 0301 	eor.w	r3, r3, #1
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f000 8137 	beq.w	800d992 <Explore+0x886>
				{
					Decel(45, 0);
 800d724:	eddf 0a8d 	vldr	s1, [pc, #564]	; 800d95c <Explore+0x850>
 800d728:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 800d960 <Explore+0x854>
 800d72c:	f7fc fdec 	bl	800a308 <Decel>
					area_num = 	setNotExploredArea((uint8_t *)target_x, (uint8_t *)target_y, (uint16_t *)walk_val);
 800d730:	1d3a      	adds	r2, r7, #4
 800d732:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800d736:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fe fd3a 	bl	800c1b4 <setNotExploredArea>
 800d740:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
					reset_cnt = 1;
 800d744:	4b83      	ldr	r3, [pc, #524]	; (800d954 <Explore+0x848>)
 800d746:	2201      	movs	r2, #1
 800d748:	601a      	str	r2, [r3, #0]
					Pos.Dir = get_nextdir(target_x[0],target_y[0],0x01);
 800d74a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800d74e:	4618      	mov	r0, r3
 800d750:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800d754:	2201      	movs	r2, #1
 800d756:	4619      	mov	r1, r3
 800d758:	f000 feac 	bl	800e4b4 <get_nextdir>
 800d75c:	4603      	mov	r3, r0
 800d75e:	b2da      	uxtb	r2, r3
 800d760:	4b7d      	ldr	r3, [pc, #500]	; (800d958 <Explore+0x84c>)
 800d762:	711a      	strb	r2, [r3, #4]
					ChangeLED(2);
 800d764:	2002      	movs	r0, #2
 800d766:	f002 fe1d 	bl	80103a4 <ChangeLED>
					switch(Pos.Dir%4)	//次に行く方向を戻り値とする関数を呼ぶ
 800d76a:	4b7b      	ldr	r3, [pc, #492]	; (800d958 <Explore+0x84c>)
 800d76c:	791b      	ldrb	r3, [r3, #4]
 800d76e:	f003 0303 	and.w	r3, r3, #3
 800d772:	2b03      	cmp	r3, #3
 800d774:	d870      	bhi.n	800d858 <Explore+0x74c>
 800d776:	a201      	add	r2, pc, #4	; (adr r2, 800d77c <Explore+0x670>)
 800d778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d77c:	0800d78d 	.word	0x0800d78d
 800d780:	0800d7ad 	.word	0x0800d7ad
 800d784:	0800d805 	.word	0x0800d805
 800d788:	0800d7d9 	.word	0x0800d7d9
					{
						case front:
								//前向きだった場合はそのまま加速
							if(Pos.X == 0 && Pos.Y == 0)
 800d78c:	4b72      	ldr	r3, [pc, #456]	; (800d958 <Explore+0x84c>)
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d107      	bne.n	800d7a4 <Explore+0x698>
 800d794:	4b70      	ldr	r3, [pc, #448]	; (800d958 <Explore+0x84c>)
 800d796:	785b      	ldrb	r3, [r3, #1]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d103      	bne.n	800d7a4 <Explore+0x698>
							{
								acc = 61.75;
 800d79c:	4b71      	ldr	r3, [pc, #452]	; (800d964 <Explore+0x858>)
 800d79e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
							else
							{
								acc = 45;
							}

							break;
 800d7a2:	e059      	b.n	800d858 <Explore+0x74c>
								acc = 45;
 800d7a4:	4b70      	ldr	r3, [pc, #448]	; (800d968 <Explore+0x85c>)
 800d7a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
							break;
 800d7aa:	e055      	b.n	800d858 <Explore+0x74c>

						case right:					//右に向く
							acc = AjustCenter();
 800d7ac:	f7fc ff0e 	bl	800a5cc <AjustCenter>
 800d7b0:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
							Rotate( 90 , 2*M_PI);
 800d7b4:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800d96c <Explore+0x860>
 800d7b8:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800d970 <Explore+0x864>
 800d7bc:	f7fb fe84 	bl	80094c8 <Rotate>
							acc = AjustCenter();
 800d7c0:	f7fc ff04 	bl	800a5cc <AjustCenter>
 800d7c4:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
							HAL_Delay(100);
 800d7c8:	2064      	movs	r0, #100	; 0x64
 800d7ca:	f003 fec5 	bl	8011558 <HAL_Delay>
							PIDChangeFlag( A_VELO_PID , 1);
 800d7ce:	2101      	movs	r1, #1
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	f003 fb7d 	bl	8010ed0 <PIDChangeFlag>
							break;
 800d7d6:	e03f      	b.n	800d858 <Explore+0x74c>

						case left:					//左に向く
							acc = AjustCenter();
 800d7d8:	f7fc fef8 	bl	800a5cc <AjustCenter>
 800d7dc:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
							Rotate( 90 , -2*M_PI);			//左に曲がって
 800d7e0:	eddf 0a64 	vldr	s1, [pc, #400]	; 800d974 <Explore+0x868>
 800d7e4:	ed9f 0a62 	vldr	s0, [pc, #392]	; 800d970 <Explore+0x864>
 800d7e8:	f7fb fe6e 	bl	80094c8 <Rotate>
							acc = AjustCenter();
 800d7ec:	f7fc feee 	bl	800a5cc <AjustCenter>
 800d7f0:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
							HAL_Delay(100);
 800d7f4:	2064      	movs	r0, #100	; 0x64
 800d7f6:	f003 feaf 	bl	8011558 <HAL_Delay>
							PIDChangeFlag( A_VELO_PID , 1);
 800d7fa:	2101      	movs	r1, #1
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	f003 fb67 	bl	8010ed0 <PIDChangeFlag>
							break;
 800d802:	e029      	b.n	800d858 <Explore+0x74c>

						case back:					//後ろに向く
							acc = AjustCenter();
 800d804:	f7fc fee2 	bl	800a5cc <AjustCenter>
 800d808:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
							Pos.Dir = right;
 800d80c:	4b52      	ldr	r3, [pc, #328]	; (800d958 <Explore+0x84c>)
 800d80e:	2201      	movs	r2, #1
 800d810:	711a      	strb	r2, [r3, #4]
							Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800d812:	eddf 0a56 	vldr	s1, [pc, #344]	; 800d96c <Explore+0x860>
 800d816:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800d970 <Explore+0x864>
 800d81a:	f7fb fe55 	bl	80094c8 <Rotate>
							acc = AjustCenter();
 800d81e:	f7fc fed5 	bl	800a5cc <AjustCenter>
 800d822:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
							Pos.Dir = right;
 800d826:	4b4c      	ldr	r3, [pc, #304]	; (800d958 <Explore+0x84c>)
 800d828:	2201      	movs	r2, #1
 800d82a:	711a      	strb	r2, [r3, #4]
							Rotate(90, 2*M_PI);
 800d82c:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800d96c <Explore+0x860>
 800d830:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800d970 <Explore+0x864>
 800d834:	f7fb fe48 	bl	80094c8 <Rotate>
							Pos.Dir = back;
 800d838:	4b47      	ldr	r3, [pc, #284]	; (800d958 <Explore+0x84c>)
 800d83a:	2202      	movs	r2, #2
 800d83c:	711a      	strb	r2, [r3, #4]
							acc = AjustCenter();
 800d83e:	f7fc fec5 	bl	800a5cc <AjustCenter>
 800d842:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
							Angle = TargetAngle;
 800d846:	4b4c      	ldr	r3, [pc, #304]	; (800d978 <Explore+0x86c>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4a4c      	ldr	r2, [pc, #304]	; (800d97c <Explore+0x870>)
 800d84c:	6013      	str	r3, [r2, #0]
							HAL_Delay(300);
 800d84e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d852:	f003 fe81 	bl	8011558 <HAL_Delay>
							break;
 800d856:	bf00      	nop
					}

						TargetVelocity[BODY] = 0;
 800d858:	4b49      	ldr	r3, [pc, #292]	; (800d980 <Explore+0x874>)
 800d85a:	f04f 0200 	mov.w	r2, #0
 800d85e:	609a      	str	r2, [r3, #8]
						Acceleration = 0;
 800d860:	4b48      	ldr	r3, [pc, #288]	; (800d984 <Explore+0x878>)
 800d862:	f04f 0200 	mov.w	r2, #0
 800d866:	601a      	str	r2, [r3, #0]
						TargetAngularV = 0;
 800d868:	4b47      	ldr	r3, [pc, #284]	; (800d988 <Explore+0x87c>)
 800d86a:	f04f 0200 	mov.w	r2, #0
 800d86e:	601a      	str	r2, [r3, #0]
						PIDReset(L_VELO_PID);
 800d870:	2004      	movs	r0, #4
 800d872:	f003 fb43 	bl	8010efc <PIDReset>
						PIDReset(R_VELO_PID);
 800d876:	2005      	movs	r0, #5
 800d878:	f003 fb40 	bl	8010efc <PIDReset>
						PIDReset(A_VELO_PID);
 800d87c:	2000      	movs	r0, #0
 800d87e:	f003 fb3d 	bl	8010efc <PIDReset>
						PIDReset(L_WALL_PID);
 800d882:	2002      	movs	r0, #2
 800d884:	f003 fb3a 	bl	8010efc <PIDReset>
						PIDReset(R_WALL_PID);
 800d888:	2003      	movs	r0, #3
 800d88a:	f003 fb37 	bl	8010efc <PIDReset>
						HAL_Delay(200);
 800d88e:	20c8      	movs	r0, #200	; 0xc8
 800d890:	f003 fe62 	bl	8011558 <HAL_Delay>
						ChangeLED(1);
 800d894:	2001      	movs	r0, #1
 800d896:	f002 fd85 	bl	80103a4 <ChangeLED>
						//加速
						Pos.Dir = front;
 800d89a:	4b2f      	ldr	r3, [pc, #188]	; (800d958 <Explore+0x84c>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	711a      	strb	r2, [r3, #4]
						switch(Pos.Car%4)
 800d8a0:	4b2d      	ldr	r3, [pc, #180]	; (800d958 <Explore+0x84c>)
 800d8a2:	795b      	ldrb	r3, [r3, #5]
 800d8a4:	f003 0303 	and.w	r3, r3, #3
 800d8a8:	2b03      	cmp	r3, #3
 800d8aa:	d843      	bhi.n	800d934 <Explore+0x828>
 800d8ac:	a201      	add	r2, pc, #4	; (adr r2, 800d8b4 <Explore+0x7a8>)
 800d8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b2:	bf00      	nop
 800d8b4:	0800d8c5 	.word	0x0800d8c5
 800d8b8:	0800d8e1 	.word	0x0800d8e1
 800d8bc:	0800d8fd 	.word	0x0800d8fd
 800d8c0:	0800d919 	.word	0x0800d919
						{
						case north:
							Pos.NextX = Pos.X;
 800d8c4:	4b24      	ldr	r3, [pc, #144]	; (800d958 <Explore+0x84c>)
 800d8c6:	781a      	ldrb	r2, [r3, #0]
 800d8c8:	4b23      	ldr	r3, [pc, #140]	; (800d958 <Explore+0x84c>)
 800d8ca:	721a      	strb	r2, [r3, #8]
							Pos.NextY = Pos.Y + 1;
 800d8cc:	4b22      	ldr	r3, [pc, #136]	; (800d958 <Explore+0x84c>)
 800d8ce:	785b      	ldrb	r3, [r3, #1]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	b2da      	uxtb	r2, r3
 800d8d4:	4b20      	ldr	r3, [pc, #128]	; (800d958 <Explore+0x84c>)
 800d8d6:	725a      	strb	r2, [r3, #9]
							Pos.NextCar = north;
 800d8d8:	4b1f      	ldr	r3, [pc, #124]	; (800d958 <Explore+0x84c>)
 800d8da:	2200      	movs	r2, #0
 800d8dc:	72da      	strb	r2, [r3, #11]
							break;
 800d8de:	e029      	b.n	800d934 <Explore+0x828>
						case east:
							Pos.NextX = Pos.X + 1;
 800d8e0:	4b1d      	ldr	r3, [pc, #116]	; (800d958 <Explore+0x84c>)
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	4b1b      	ldr	r3, [pc, #108]	; (800d958 <Explore+0x84c>)
 800d8ea:	721a      	strb	r2, [r3, #8]
							Pos.NextY = Pos.Y;
 800d8ec:	4b1a      	ldr	r3, [pc, #104]	; (800d958 <Explore+0x84c>)
 800d8ee:	785a      	ldrb	r2, [r3, #1]
 800d8f0:	4b19      	ldr	r3, [pc, #100]	; (800d958 <Explore+0x84c>)
 800d8f2:	725a      	strb	r2, [r3, #9]
							Pos.NextCar = east;
 800d8f4:	4b18      	ldr	r3, [pc, #96]	; (800d958 <Explore+0x84c>)
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	72da      	strb	r2, [r3, #11]
							break;
 800d8fa:	e01b      	b.n	800d934 <Explore+0x828>
						case south:
							Pos.NextX = Pos.X;
 800d8fc:	4b16      	ldr	r3, [pc, #88]	; (800d958 <Explore+0x84c>)
 800d8fe:	781a      	ldrb	r2, [r3, #0]
 800d900:	4b15      	ldr	r3, [pc, #84]	; (800d958 <Explore+0x84c>)
 800d902:	721a      	strb	r2, [r3, #8]
							Pos.NextY = Pos.Y - 1;
 800d904:	4b14      	ldr	r3, [pc, #80]	; (800d958 <Explore+0x84c>)
 800d906:	785b      	ldrb	r3, [r3, #1]
 800d908:	3b01      	subs	r3, #1
 800d90a:	b2da      	uxtb	r2, r3
 800d90c:	4b12      	ldr	r3, [pc, #72]	; (800d958 <Explore+0x84c>)
 800d90e:	725a      	strb	r2, [r3, #9]
							Pos.NextCar = south;
 800d910:	4b11      	ldr	r3, [pc, #68]	; (800d958 <Explore+0x84c>)
 800d912:	2202      	movs	r2, #2
 800d914:	72da      	strb	r2, [r3, #11]
							break;
 800d916:	e00d      	b.n	800d934 <Explore+0x828>
						case west:
							Pos.NextX = Pos.X - 1;
 800d918:	4b0f      	ldr	r3, [pc, #60]	; (800d958 <Explore+0x84c>)
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	3b01      	subs	r3, #1
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	4b0d      	ldr	r3, [pc, #52]	; (800d958 <Explore+0x84c>)
 800d922:	721a      	strb	r2, [r3, #8]
							Pos.NextY = Pos.Y;
 800d924:	4b0c      	ldr	r3, [pc, #48]	; (800d958 <Explore+0x84c>)
 800d926:	785a      	ldrb	r2, [r3, #1]
 800d928:	4b0b      	ldr	r3, [pc, #44]	; (800d958 <Explore+0x84c>)
 800d92a:	725a      	strb	r2, [r3, #9]
							Pos.NextCar = west;
 800d92c:	4b0a      	ldr	r3, [pc, #40]	; (800d958 <Explore+0x84c>)
 800d92e:	2203      	movs	r2, #3
 800d930:	72da      	strb	r2, [r3, #11]
							break;
 800d932:	bf00      	nop
						}
						ChangeLED(0);
 800d934:	2000      	movs	r0, #0
 800d936:	f002 fd35 	bl	80103a4 <ChangeLED>

						Accel(acc, ExploreVelocity);
 800d93a:	4b14      	ldr	r3, [pc, #80]	; (800d98c <Explore+0x880>)
 800d93c:	edd3 7a00 	vldr	s15, [r3]
 800d940:	eef0 0a67 	vmov.f32	s1, s15
 800d944:	ed97 0a55 	vldr	s0, [r7, #340]	; 0x154
 800d948:	f7fc fbd2 	bl	800a0f0 <Accel>
						shiftPos();
 800d94c:	f000 f856 	bl	800d9fc <shiftPos>
 800d950:	e01f      	b.n	800d992 <Explore+0x886>
 800d952:	bf00      	nop
 800d954:	20000238 	.word	0x20000238
 800d958:	20000000 	.word	0x20000000
 800d95c:	00000000 	.word	0x00000000
 800d960:	42340000 	.word	0x42340000
 800d964:	42770000 	.word	0x42770000
 800d968:	42340000 	.word	0x42340000
 800d96c:	40c90fdb 	.word	0x40c90fdb
 800d970:	42b40000 	.word	0x42b40000
 800d974:	c0c90fdb 	.word	0xc0c90fdb
 800d978:	2000051c 	.word	0x2000051c
 800d97c:	20000228 	.word	0x20000228
 800d980:	200004f0 	.word	0x200004f0
 800d984:	2000022c 	.word	0x2000022c
 800d988:	20000500 	.word	0x20000500
 800d98c:	20000618 	.word	0x20000618
					continue;
 800d990:	bf00      	nop
			for(int i=0; i < area_num; i++)
 800d992:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d996:	3301      	adds	r3, #1
 800d998:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800d99c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800d9a0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	f6ff ae5d 	blt.w	800d664 <Explore+0x558>
		while(!(Pos.X == 0 && Pos.Y == 0))
 800d9aa:	4b11      	ldr	r3, [pc, #68]	; (800d9f0 <Explore+0x8e4>)
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f47f ae33 	bne.w	800d61a <Explore+0x50e>
 800d9b4:	4b0e      	ldr	r3, [pc, #56]	; (800d9f0 <Explore+0x8e4>)
 800d9b6:	785b      	ldrb	r3, [r3, #1]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	f47f ae2e 	bne.w	800d61a <Explore+0x50e>
				}
			}
		}
		Decel(45,0);
 800d9be:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d9f4 <Explore+0x8e8>
 800d9c2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800d9f8 <Explore+0x8ec>
 800d9c6:	f7fc fc9f 	bl	800a308 <Decel>
		//flashに保存
		//flashのクリア。
		Flash_clear_sector1();
 800d9ca:	f002 fb07 	bl	800ffdc <Flash_clear_sector1>
		//マップ書き込み
		flash_store_init();
 800d9ce:	f7fd ff1b 	bl	800b808 <flash_store_init>
		//完了の合図
		Signal(7);
 800d9d2:	2007      	movs	r0, #7
 800d9d4:	f003 fc1e 	bl	8011214 <Signal>
 800d9d8:	e002      	b.n	800d9e0 <Explore+0x8d4>
	}
	else//未探索がなければ、LEDで知らせる
	{
		Signal(1);
 800d9da:	2001      	movs	r0, #1
 800d9dc:	f003 fc1a 	bl	8011214 <Signal>

	//未探索が終わったら
	//00に帰ってくる
	while(1)
	{
		ChangeLED(2);
 800d9e0:	2002      	movs	r0, #2
 800d9e2:	f002 fcdf 	bl	80103a4 <ChangeLED>
		wall_ram_print();
 800d9e6:	f7fe faf7 	bl	800bfd8 <wall_ram_print>
		map_print();
 800d9ea:	f7fe fac5 	bl	800bf78 <map_print>
		ChangeLED(2);
 800d9ee:	e7f7      	b.n	800d9e0 <Explore+0x8d4>
 800d9f0:	20000000 	.word	0x20000000
 800d9f4:	00000000 	.word	0x00000000
 800d9f8:	42340000 	.word	0x42340000

0800d9fc <shiftPos>:
#include "PID_Control.h"
#include "Action.h"
int Calc;
int SearchOrFast;
void shiftPos()
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	af00      	add	r7, sp, #0
	Pos.Car = Pos.NextCar;
 800da00:	4b08      	ldr	r3, [pc, #32]	; (800da24 <shiftPos+0x28>)
 800da02:	7ada      	ldrb	r2, [r3, #11]
 800da04:	4b07      	ldr	r3, [pc, #28]	; (800da24 <shiftPos+0x28>)
 800da06:	715a      	strb	r2, [r3, #5]
	Pos.X = Pos.NextX;
 800da08:	4b06      	ldr	r3, [pc, #24]	; (800da24 <shiftPos+0x28>)
 800da0a:	7a1a      	ldrb	r2, [r3, #8]
 800da0c:	4b05      	ldr	r3, [pc, #20]	; (800da24 <shiftPos+0x28>)
 800da0e:	701a      	strb	r2, [r3, #0]
	Pos.Y = Pos.NextY;
 800da10:	4b04      	ldr	r3, [pc, #16]	; (800da24 <shiftPos+0x28>)
 800da12:	7a5a      	ldrb	r2, [r3, #9]
 800da14:	4b03      	ldr	r3, [pc, #12]	; (800da24 <shiftPos+0x28>)
 800da16:	705a      	strb	r2, [r3, #1]
}
 800da18:	bf00      	nop
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	20000000 	.word	0x20000000

0800da28 <judgeAdjacency>:
_Bool judgeAdjacency(uint8_t x, uint8_t y)
{
 800da28:	b480      	push	{r7}
 800da2a:	b085      	sub	sp, #20
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	4603      	mov	r3, r0
 800da30:	460a      	mov	r2, r1
 800da32:	71fb      	strb	r3, [r7, #7]
 800da34:	4613      	mov	r3, r2
 800da36:	71bb      	strb	r3, [r7, #6]
	//xyが、今いる座標に隣接しているかどうか

	int abstract_x = abs((int)Pos.X - (int)x);
 800da38:	4b14      	ldr	r3, [pc, #80]	; (800da8c <judgeAdjacency+0x64>)
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	461a      	mov	r2, r3
 800da3e:	79fb      	ldrb	r3, [r7, #7]
 800da40:	1ad3      	subs	r3, r2, r3
 800da42:	2b00      	cmp	r3, #0
 800da44:	bfb8      	it	lt
 800da46:	425b      	neglt	r3, r3
 800da48:	60fb      	str	r3, [r7, #12]
	int abstract_y = abs((int)Pos.Y - (int)y);
 800da4a:	4b10      	ldr	r3, [pc, #64]	; (800da8c <judgeAdjacency+0x64>)
 800da4c:	785b      	ldrb	r3, [r3, #1]
 800da4e:	461a      	mov	r2, r3
 800da50:	79bb      	ldrb	r3, [r7, #6]
 800da52:	1ad3      	subs	r3, r2, r3
 800da54:	2b00      	cmp	r3, #0
 800da56:	bfb8      	it	lt
 800da58:	425b      	neglt	r3, r3
 800da5a:	60bb      	str	r3, [r7, #8]
	if( abstract_x == 1 && abstract_y == 0)
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d104      	bne.n	800da6c <judgeAdjacency+0x44>
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d101      	bne.n	800da6c <judgeAdjacency+0x44>
		return true;
 800da68:	2301      	movs	r3, #1
 800da6a:	e008      	b.n	800da7e <judgeAdjacency+0x56>
	if( abstract_x == 0 && abstract_y == 1)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d104      	bne.n	800da7c <judgeAdjacency+0x54>
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	2b01      	cmp	r3, #1
 800da76:	d101      	bne.n	800da7c <judgeAdjacency+0x54>
		return true;
 800da78:	2301      	movs	r3, #1
 800da7a:	e000      	b.n	800da7e <judgeAdjacency+0x56>

	return false;
 800da7c:	2300      	movs	r3, #0
	//隣接している場合、共に差は2以上にならない
	//少なくとも片方の差が0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3714      	adds	r7, #20
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop
 800da8c:	20000000 	.word	0x20000000

0800da90 <judgeImpasse>:
_Bool judgeImpasse(uint8_t x, uint8_t y)
{
 800da90:	b480      	push	{r7}
 800da92:	b083      	sub	sp, #12
 800da94:	af00      	add	r7, sp, #0
 800da96:	4603      	mov	r3, r0
 800da98:	460a      	mov	r2, r1
 800da9a:	71fb      	strb	r3, [r7, #7]
 800da9c:	4613      	mov	r3, r2
 800da9e:	71bb      	strb	r3, [r7, #6]

		//袋小路かどうかの判定
	//全て壁があったら0
	if(Wall[x][y].east == WALL && Wall[x][y].south == WALL && Wall[x][y].west == WALL && Wall[x][y].north == WALL)
 800daa0:	79fa      	ldrb	r2, [r7, #7]
 800daa2:	79b9      	ldrb	r1, [r7, #6]
 800daa4:	4877      	ldr	r0, [pc, #476]	; (800dc84 <judgeImpasse+0x1f4>)
 800daa6:	4613      	mov	r3, r2
 800daa8:	00db      	lsls	r3, r3, #3
 800daaa:	4413      	add	r3, r2
 800daac:	440b      	add	r3, r1
 800daae:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800dab2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d12b      	bne.n	800db14 <judgeImpasse+0x84>
 800dabc:	79fa      	ldrb	r2, [r7, #7]
 800dabe:	79b9      	ldrb	r1, [r7, #6]
 800dac0:	4870      	ldr	r0, [pc, #448]	; (800dc84 <judgeImpasse+0x1f4>)
 800dac2:	4613      	mov	r3, r2
 800dac4:	00db      	lsls	r3, r3, #3
 800dac6:	4413      	add	r3, r2
 800dac8:	440b      	add	r3, r1
 800daca:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800dace:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d11d      	bne.n	800db14 <judgeImpasse+0x84>
 800dad8:	79fa      	ldrb	r2, [r7, #7]
 800dada:	79b9      	ldrb	r1, [r7, #6]
 800dadc:	4869      	ldr	r0, [pc, #420]	; (800dc84 <judgeImpasse+0x1f4>)
 800dade:	4613      	mov	r3, r2
 800dae0:	00db      	lsls	r3, r3, #3
 800dae2:	4413      	add	r3, r2
 800dae4:	440b      	add	r3, r1
 800dae6:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800daea:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d10f      	bne.n	800db14 <judgeImpasse+0x84>
 800daf4:	79fa      	ldrb	r2, [r7, #7]
 800daf6:	79b9      	ldrb	r1, [r7, #6]
 800daf8:	4862      	ldr	r0, [pc, #392]	; (800dc84 <judgeImpasse+0x1f4>)
 800dafa:	4613      	mov	r3, r2
 800dafc:	00db      	lsls	r3, r3, #3
 800dafe:	4413      	add	r3, r2
 800db00:	440b      	add	r3, r1
 800db02:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800db06:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d101      	bne.n	800db14 <judgeImpasse+0x84>
	{
		return 0;
 800db10:	2300      	movs	r3, #0
 800db12:	e0b0      	b.n	800dc76 <judgeImpasse+0x1e6>
	}
	else if(Wall[x][y].east == WALL && Wall[x][y].south == WALL && Wall[x][y].west == WALL)
 800db14:	79fa      	ldrb	r2, [r7, #7]
 800db16:	79b9      	ldrb	r1, [r7, #6]
 800db18:	485a      	ldr	r0, [pc, #360]	; (800dc84 <judgeImpasse+0x1f4>)
 800db1a:	4613      	mov	r3, r2
 800db1c:	00db      	lsls	r3, r3, #3
 800db1e:	4413      	add	r3, r2
 800db20:	440b      	add	r3, r1
 800db22:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800db26:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d11d      	bne.n	800db6c <judgeImpasse+0xdc>
 800db30:	79fa      	ldrb	r2, [r7, #7]
 800db32:	79b9      	ldrb	r1, [r7, #6]
 800db34:	4853      	ldr	r0, [pc, #332]	; (800dc84 <judgeImpasse+0x1f4>)
 800db36:	4613      	mov	r3, r2
 800db38:	00db      	lsls	r3, r3, #3
 800db3a:	4413      	add	r3, r2
 800db3c:	440b      	add	r3, r1
 800db3e:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800db42:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800db46:	b2db      	uxtb	r3, r3
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d10f      	bne.n	800db6c <judgeImpasse+0xdc>
 800db4c:	79fa      	ldrb	r2, [r7, #7]
 800db4e:	79b9      	ldrb	r1, [r7, #6]
 800db50:	484c      	ldr	r0, [pc, #304]	; (800dc84 <judgeImpasse+0x1f4>)
 800db52:	4613      	mov	r3, r2
 800db54:	00db      	lsls	r3, r3, #3
 800db56:	4413      	add	r3, r2
 800db58:	440b      	add	r3, r1
 800db5a:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800db5e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800db62:	b2db      	uxtb	r3, r3
 800db64:	2b01      	cmp	r3, #1
 800db66:	d101      	bne.n	800db6c <judgeImpasse+0xdc>
	{
		return 1;
 800db68:	2301      	movs	r3, #1
 800db6a:	e084      	b.n	800dc76 <judgeImpasse+0x1e6>
	}
	else if(Wall[x][y].south == WALL && Wall[x][y].west == WALL && Wall[x][y].north == WALL)
 800db6c:	79fa      	ldrb	r2, [r7, #7]
 800db6e:	79b9      	ldrb	r1, [r7, #6]
 800db70:	4844      	ldr	r0, [pc, #272]	; (800dc84 <judgeImpasse+0x1f4>)
 800db72:	4613      	mov	r3, r2
 800db74:	00db      	lsls	r3, r3, #3
 800db76:	4413      	add	r3, r2
 800db78:	440b      	add	r3, r1
 800db7a:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800db7e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800db82:	b2db      	uxtb	r3, r3
 800db84:	2b01      	cmp	r3, #1
 800db86:	d11d      	bne.n	800dbc4 <judgeImpasse+0x134>
 800db88:	79fa      	ldrb	r2, [r7, #7]
 800db8a:	79b9      	ldrb	r1, [r7, #6]
 800db8c:	483d      	ldr	r0, [pc, #244]	; (800dc84 <judgeImpasse+0x1f4>)
 800db8e:	4613      	mov	r3, r2
 800db90:	00db      	lsls	r3, r3, #3
 800db92:	4413      	add	r3, r2
 800db94:	440b      	add	r3, r1
 800db96:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800db9a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d10f      	bne.n	800dbc4 <judgeImpasse+0x134>
 800dba4:	79fa      	ldrb	r2, [r7, #7]
 800dba6:	79b9      	ldrb	r1, [r7, #6]
 800dba8:	4836      	ldr	r0, [pc, #216]	; (800dc84 <judgeImpasse+0x1f4>)
 800dbaa:	4613      	mov	r3, r2
 800dbac:	00db      	lsls	r3, r3, #3
 800dbae:	4413      	add	r3, r2
 800dbb0:	440b      	add	r3, r1
 800dbb2:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800dbb6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d101      	bne.n	800dbc4 <judgeImpasse+0x134>
	{
		return 1;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	e058      	b.n	800dc76 <judgeImpasse+0x1e6>
	}
	else if(Wall[x][y].west == WALL && Wall[x][y].north == WALL && Wall[x][y].east == WALL)
 800dbc4:	79fa      	ldrb	r2, [r7, #7]
 800dbc6:	79b9      	ldrb	r1, [r7, #6]
 800dbc8:	482e      	ldr	r0, [pc, #184]	; (800dc84 <judgeImpasse+0x1f4>)
 800dbca:	4613      	mov	r3, r2
 800dbcc:	00db      	lsls	r3, r3, #3
 800dbce:	4413      	add	r3, r2
 800dbd0:	440b      	add	r3, r1
 800dbd2:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800dbd6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d11d      	bne.n	800dc1c <judgeImpasse+0x18c>
 800dbe0:	79fa      	ldrb	r2, [r7, #7]
 800dbe2:	79b9      	ldrb	r1, [r7, #6]
 800dbe4:	4827      	ldr	r0, [pc, #156]	; (800dc84 <judgeImpasse+0x1f4>)
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	00db      	lsls	r3, r3, #3
 800dbea:	4413      	add	r3, r2
 800dbec:	440b      	add	r3, r1
 800dbee:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800dbf2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d10f      	bne.n	800dc1c <judgeImpasse+0x18c>
 800dbfc:	79fa      	ldrb	r2, [r7, #7]
 800dbfe:	79b9      	ldrb	r1, [r7, #6]
 800dc00:	4820      	ldr	r0, [pc, #128]	; (800dc84 <judgeImpasse+0x1f4>)
 800dc02:	4613      	mov	r3, r2
 800dc04:	00db      	lsls	r3, r3, #3
 800dc06:	4413      	add	r3, r2
 800dc08:	440b      	add	r3, r1
 800dc0a:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800dc0e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d101      	bne.n	800dc1c <judgeImpasse+0x18c>
	{
		return 1;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	e02c      	b.n	800dc76 <judgeImpasse+0x1e6>
	}
	else if(Wall[x][y].north == WALL && Wall[x][y].east == WALL && Wall[x][y].south == WALL )
 800dc1c:	79fa      	ldrb	r2, [r7, #7]
 800dc1e:	79b9      	ldrb	r1, [r7, #6]
 800dc20:	4818      	ldr	r0, [pc, #96]	; (800dc84 <judgeImpasse+0x1f4>)
 800dc22:	4613      	mov	r3, r2
 800dc24:	00db      	lsls	r3, r3, #3
 800dc26:	4413      	add	r3, r2
 800dc28:	440b      	add	r3, r1
 800dc2a:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800dc2e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d11d      	bne.n	800dc74 <judgeImpasse+0x1e4>
 800dc38:	79fa      	ldrb	r2, [r7, #7]
 800dc3a:	79b9      	ldrb	r1, [r7, #6]
 800dc3c:	4811      	ldr	r0, [pc, #68]	; (800dc84 <judgeImpasse+0x1f4>)
 800dc3e:	4613      	mov	r3, r2
 800dc40:	00db      	lsls	r3, r3, #3
 800dc42:	4413      	add	r3, r2
 800dc44:	440b      	add	r3, r1
 800dc46:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800dc4a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d10f      	bne.n	800dc74 <judgeImpasse+0x1e4>
 800dc54:	79fa      	ldrb	r2, [r7, #7]
 800dc56:	79b9      	ldrb	r1, [r7, #6]
 800dc58:	480a      	ldr	r0, [pc, #40]	; (800dc84 <judgeImpasse+0x1f4>)
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	00db      	lsls	r3, r3, #3
 800dc5e:	4413      	add	r3, r2
 800dc60:	440b      	add	r3, r1
 800dc62:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800dc66:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d101      	bne.n	800dc74 <judgeImpasse+0x1e4>
	{
		return 1;
 800dc70:	2301      	movs	r3, #1
 800dc72:	e000      	b.n	800dc76 <judgeImpasse+0x1e6>
	}
	else
	{
		return 0;
 800dc74:	2300      	movs	r3, #0
	}
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	370c      	adds	r7, #12
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	200006ec 	.word	0x200006ec

0800dc88 <KyushinJudge>:
void AdachiJudge(){
}
void KyushinJudge()
{
 800dc88:	b490      	push	{r4, r7}
 800dc8a:	af00      	add	r7, sp, #0
	//歩数マップから進行方向を導き出すのは、アクションが終わった後、座標と方角が更新されてから。
	switch(Pos.Car%4)
 800dc8c:	4b97      	ldr	r3, [pc, #604]	; (800deec <KyushinJudge+0x264>)
 800dc8e:	795b      	ldrb	r3, [r3, #5]
 800dc90:	f003 0303 	and.w	r3, r3, #3
 800dc94:	2b03      	cmp	r3, #3
 800dc96:	f200 8383 	bhi.w	800e3a0 <KyushinJudge+0x718>
 800dc9a:	a201      	add	r2, pc, #4	; (adr r2, 800dca0 <KyushinJudge+0x18>)
 800dc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca0:	0800dcb1 	.word	0x0800dcb1
 800dca4:	0800de67 	.word	0x0800de67
 800dca8:	0800e029 	.word	0x0800e029
 800dcac:	0800e1eb 	.word	0x0800e1eb
	{
		  case north:
			  if(Wall[Pos.X][Pos.Y].north == NOWALL && walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800dcb0:	4b8e      	ldr	r3, [pc, #568]	; (800deec <KyushinJudge+0x264>)
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	4b8d      	ldr	r3, [pc, #564]	; (800deec <KyushinJudge+0x264>)
 800dcb8:	785b      	ldrb	r3, [r3, #1]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	4a8c      	ldr	r2, [pc, #560]	; (800def0 <KyushinJudge+0x268>)
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	00db      	lsls	r3, r3, #3
 800dcc2:	440b      	add	r3, r1
 800dcc4:	4403      	add	r3, r0
 800dcc6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dcca:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d130      	bne.n	800dd36 <KyushinJudge+0xae>
 800dcd4:	4b85      	ldr	r3, [pc, #532]	; (800deec <KyushinJudge+0x264>)
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	4b84      	ldr	r3, [pc, #528]	; (800deec <KyushinJudge+0x264>)
 800dcdc:	785b      	ldrb	r3, [r3, #1]
 800dcde:	1c5a      	adds	r2, r3, #1
 800dce0:	4984      	ldr	r1, [pc, #528]	; (800def4 <KyushinJudge+0x26c>)
 800dce2:	4603      	mov	r3, r0
 800dce4:	00db      	lsls	r3, r3, #3
 800dce6:	4403      	add	r3, r0
 800dce8:	4413      	add	r3, r2
 800dcea:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800dcee:	4b7f      	ldr	r3, [pc, #508]	; (800deec <KyushinJudge+0x264>)
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	4b7d      	ldr	r3, [pc, #500]	; (800deec <KyushinJudge+0x264>)
 800dcf6:	785b      	ldrb	r3, [r3, #1]
 800dcf8:	461c      	mov	r4, r3
 800dcfa:	497e      	ldr	r1, [pc, #504]	; (800def4 <KyushinJudge+0x26c>)
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	00db      	lsls	r3, r3, #3
 800dd00:	4403      	add	r3, r0
 800dd02:	4423      	add	r3, r4
 800dd04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d214      	bcs.n	800dd36 <KyushinJudge+0xae>
 800dd0c:	4b77      	ldr	r3, [pc, #476]	; (800deec <KyushinJudge+0x264>)
 800dd0e:	785b      	ldrb	r3, [r3, #1]
 800dd10:	2b07      	cmp	r3, #7
 800dd12:	d810      	bhi.n	800dd36 <KyushinJudge+0xae>
				  //前北
				  Pos.Dir = front;
 800dd14:	4b75      	ldr	r3, [pc, #468]	; (800deec <KyushinJudge+0x264>)
 800dd16:	2200      	movs	r2, #0
 800dd18:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X;
 800dd1a:	4b74      	ldr	r3, [pc, #464]	; (800deec <KyushinJudge+0x264>)
 800dd1c:	781a      	ldrb	r2, [r3, #0]
 800dd1e:	4b73      	ldr	r3, [pc, #460]	; (800deec <KyushinJudge+0x264>)
 800dd20:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y+1;
 800dd22:	4b72      	ldr	r3, [pc, #456]	; (800deec <KyushinJudge+0x264>)
 800dd24:	785b      	ldrb	r3, [r3, #1]
 800dd26:	3301      	adds	r3, #1
 800dd28:	b2da      	uxtb	r2, r3
 800dd2a:	4b70      	ldr	r3, [pc, #448]	; (800deec <KyushinJudge+0x264>)
 800dd2c:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = north;
 800dd2e:	4b6f      	ldr	r3, [pc, #444]	; (800deec <KyushinJudge+0x264>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	72da      	strb	r2, [r3, #11]
 800dd34:	e096      	b.n	800de64 <KyushinJudge+0x1dc>
			  }
			  else if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800dd36:	4b6d      	ldr	r3, [pc, #436]	; (800deec <KyushinJudge+0x264>)
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	4b6b      	ldr	r3, [pc, #428]	; (800deec <KyushinJudge+0x264>)
 800dd3e:	785b      	ldrb	r3, [r3, #1]
 800dd40:	4618      	mov	r0, r3
 800dd42:	4a6b      	ldr	r2, [pc, #428]	; (800def0 <KyushinJudge+0x268>)
 800dd44:	460b      	mov	r3, r1
 800dd46:	00db      	lsls	r3, r3, #3
 800dd48:	440b      	add	r3, r1
 800dd4a:	4403      	add	r3, r0
 800dd4c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dd50:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d130      	bne.n	800ddbc <KyushinJudge+0x134>
 800dd5a:	4b64      	ldr	r3, [pc, #400]	; (800deec <KyushinJudge+0x264>)
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	1e5a      	subs	r2, r3, #1
 800dd60:	4b62      	ldr	r3, [pc, #392]	; (800deec <KyushinJudge+0x264>)
 800dd62:	785b      	ldrb	r3, [r3, #1]
 800dd64:	4618      	mov	r0, r3
 800dd66:	4963      	ldr	r1, [pc, #396]	; (800def4 <KyushinJudge+0x26c>)
 800dd68:	4613      	mov	r3, r2
 800dd6a:	00db      	lsls	r3, r3, #3
 800dd6c:	4413      	add	r3, r2
 800dd6e:	4403      	add	r3, r0
 800dd70:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800dd74:	4b5d      	ldr	r3, [pc, #372]	; (800deec <KyushinJudge+0x264>)
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	4618      	mov	r0, r3
 800dd7a:	4b5c      	ldr	r3, [pc, #368]	; (800deec <KyushinJudge+0x264>)
 800dd7c:	785b      	ldrb	r3, [r3, #1]
 800dd7e:	461c      	mov	r4, r3
 800dd80:	495c      	ldr	r1, [pc, #368]	; (800def4 <KyushinJudge+0x26c>)
 800dd82:	4603      	mov	r3, r0
 800dd84:	00db      	lsls	r3, r3, #3
 800dd86:	4403      	add	r3, r0
 800dd88:	4423      	add	r3, r4
 800dd8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d214      	bcs.n	800ddbc <KyushinJudge+0x134>
 800dd92:	4b56      	ldr	r3, [pc, #344]	; (800deec <KyushinJudge+0x264>)
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d010      	beq.n	800ddbc <KyushinJudge+0x134>
				  //左西
    			  Pos.Dir = left;
 800dd9a:	4b54      	ldr	r3, [pc, #336]	; (800deec <KyushinJudge+0x264>)
 800dd9c:	2203      	movs	r2, #3
 800dd9e:	711a      	strb	r2, [r3, #4]
    			  Pos.NextX = Pos.X - 1;
 800dda0:	4b52      	ldr	r3, [pc, #328]	; (800deec <KyushinJudge+0x264>)
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	3b01      	subs	r3, #1
 800dda6:	b2da      	uxtb	r2, r3
 800dda8:	4b50      	ldr	r3, [pc, #320]	; (800deec <KyushinJudge+0x264>)
 800ddaa:	721a      	strb	r2, [r3, #8]
    			  Pos.NextY = Pos.Y;
 800ddac:	4b4f      	ldr	r3, [pc, #316]	; (800deec <KyushinJudge+0x264>)
 800ddae:	785a      	ldrb	r2, [r3, #1]
 800ddb0:	4b4e      	ldr	r3, [pc, #312]	; (800deec <KyushinJudge+0x264>)
 800ddb2:	725a      	strb	r2, [r3, #9]
    			  Pos.NextCar = west;
 800ddb4:	4b4d      	ldr	r3, [pc, #308]	; (800deec <KyushinJudge+0x264>)
 800ddb6:	2203      	movs	r2, #3
 800ddb8:	72da      	strb	r2, [r3, #11]
 800ddba:	e053      	b.n	800de64 <KyushinJudge+0x1dc>
			  }
			  else if(Wall[Pos.X][Pos.Y].east == NOWALL &&walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X <  NUMBER_OF_SQUARES-1){
 800ddbc:	4b4b      	ldr	r3, [pc, #300]	; (800deec <KyushinJudge+0x264>)
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	4b4a      	ldr	r3, [pc, #296]	; (800deec <KyushinJudge+0x264>)
 800ddc4:	785b      	ldrb	r3, [r3, #1]
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	4a49      	ldr	r2, [pc, #292]	; (800def0 <KyushinJudge+0x268>)
 800ddca:	460b      	mov	r3, r1
 800ddcc:	00db      	lsls	r3, r3, #3
 800ddce:	440b      	add	r3, r1
 800ddd0:	4403      	add	r3, r0
 800ddd2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ddd6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d130      	bne.n	800de42 <KyushinJudge+0x1ba>
 800dde0:	4b42      	ldr	r3, [pc, #264]	; (800deec <KyushinJudge+0x264>)
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	1c5a      	adds	r2, r3, #1
 800dde6:	4b41      	ldr	r3, [pc, #260]	; (800deec <KyushinJudge+0x264>)
 800dde8:	785b      	ldrb	r3, [r3, #1]
 800ddea:	4618      	mov	r0, r3
 800ddec:	4941      	ldr	r1, [pc, #260]	; (800def4 <KyushinJudge+0x26c>)
 800ddee:	4613      	mov	r3, r2
 800ddf0:	00db      	lsls	r3, r3, #3
 800ddf2:	4413      	add	r3, r2
 800ddf4:	4403      	add	r3, r0
 800ddf6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ddfa:	4b3c      	ldr	r3, [pc, #240]	; (800deec <KyushinJudge+0x264>)
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	4618      	mov	r0, r3
 800de00:	4b3a      	ldr	r3, [pc, #232]	; (800deec <KyushinJudge+0x264>)
 800de02:	785b      	ldrb	r3, [r3, #1]
 800de04:	461c      	mov	r4, r3
 800de06:	493b      	ldr	r1, [pc, #236]	; (800def4 <KyushinJudge+0x26c>)
 800de08:	4603      	mov	r3, r0
 800de0a:	00db      	lsls	r3, r3, #3
 800de0c:	4403      	add	r3, r0
 800de0e:	4423      	add	r3, r4
 800de10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800de14:	429a      	cmp	r2, r3
 800de16:	d214      	bcs.n	800de42 <KyushinJudge+0x1ba>
 800de18:	4b34      	ldr	r3, [pc, #208]	; (800deec <KyushinJudge+0x264>)
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	2b07      	cmp	r3, #7
 800de1e:	d810      	bhi.n	800de42 <KyushinJudge+0x1ba>
				  //右東
				  Pos.Dir = right;//この方角で右と決まった時点で次の座標が決まっている
 800de20:	4b32      	ldr	r3, [pc, #200]	; (800deec <KyushinJudge+0x264>)
 800de22:	2201      	movs	r2, #1
 800de24:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X + 1;
 800de26:	4b31      	ldr	r3, [pc, #196]	; (800deec <KyushinJudge+0x264>)
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	3301      	adds	r3, #1
 800de2c:	b2da      	uxtb	r2, r3
 800de2e:	4b2f      	ldr	r3, [pc, #188]	; (800deec <KyushinJudge+0x264>)
 800de30:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y;
 800de32:	4b2e      	ldr	r3, [pc, #184]	; (800deec <KyushinJudge+0x264>)
 800de34:	785a      	ldrb	r2, [r3, #1]
 800de36:	4b2d      	ldr	r3, [pc, #180]	; (800deec <KyushinJudge+0x264>)
 800de38:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = east;
 800de3a:	4b2c      	ldr	r3, [pc, #176]	; (800deec <KyushinJudge+0x264>)
 800de3c:	2201      	movs	r2, #1
 800de3e:	72da      	strb	r2, [r3, #11]
 800de40:	e010      	b.n	800de64 <KyushinJudge+0x1dc>
			  }
			  else {
				  Pos.Dir = back;
 800de42:	4b2a      	ldr	r3, [pc, #168]	; (800deec <KyushinJudge+0x264>)
 800de44:	2202      	movs	r2, #2
 800de46:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X;
 800de48:	4b28      	ldr	r3, [pc, #160]	; (800deec <KyushinJudge+0x264>)
 800de4a:	781a      	ldrb	r2, [r3, #0]
 800de4c:	4b27      	ldr	r3, [pc, #156]	; (800deec <KyushinJudge+0x264>)
 800de4e:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y - 1;
 800de50:	4b26      	ldr	r3, [pc, #152]	; (800deec <KyushinJudge+0x264>)
 800de52:	785b      	ldrb	r3, [r3, #1]
 800de54:	3b01      	subs	r3, #1
 800de56:	b2da      	uxtb	r2, r3
 800de58:	4b24      	ldr	r3, [pc, #144]	; (800deec <KyushinJudge+0x264>)
 800de5a:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = south;
 800de5c:	4b23      	ldr	r3, [pc, #140]	; (800deec <KyushinJudge+0x264>)
 800de5e:	2202      	movs	r2, #2
 800de60:	72da      	strb	r2, [r3, #11]
				  //後南
			  }
			  break;
 800de62:	e29e      	b.n	800e3a2 <KyushinJudge+0x71a>
 800de64:	e29d      	b.n	800e3a2 <KyushinJudge+0x71a>

		  case east:

			  if(Wall[Pos.X][Pos.Y].east == NOWALL && walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X < NUMBER_OF_SQUARES-1){
 800de66:	4b21      	ldr	r3, [pc, #132]	; (800deec <KyushinJudge+0x264>)
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	4619      	mov	r1, r3
 800de6c:	4b1f      	ldr	r3, [pc, #124]	; (800deec <KyushinJudge+0x264>)
 800de6e:	785b      	ldrb	r3, [r3, #1]
 800de70:	4618      	mov	r0, r3
 800de72:	4a1f      	ldr	r2, [pc, #124]	; (800def0 <KyushinJudge+0x268>)
 800de74:	460b      	mov	r3, r1
 800de76:	00db      	lsls	r3, r3, #3
 800de78:	440b      	add	r3, r1
 800de7a:	4403      	add	r3, r0
 800de7c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800de80:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800de84:	b2db      	uxtb	r3, r3
 800de86:	2b00      	cmp	r3, #0
 800de88:	d136      	bne.n	800def8 <KyushinJudge+0x270>
 800de8a:	4b18      	ldr	r3, [pc, #96]	; (800deec <KyushinJudge+0x264>)
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	1c5a      	adds	r2, r3, #1
 800de90:	4b16      	ldr	r3, [pc, #88]	; (800deec <KyushinJudge+0x264>)
 800de92:	785b      	ldrb	r3, [r3, #1]
 800de94:	4618      	mov	r0, r3
 800de96:	4917      	ldr	r1, [pc, #92]	; (800def4 <KyushinJudge+0x26c>)
 800de98:	4613      	mov	r3, r2
 800de9a:	00db      	lsls	r3, r3, #3
 800de9c:	4413      	add	r3, r2
 800de9e:	4403      	add	r3, r0
 800dea0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800dea4:	4b11      	ldr	r3, [pc, #68]	; (800deec <KyushinJudge+0x264>)
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	4618      	mov	r0, r3
 800deaa:	4b10      	ldr	r3, [pc, #64]	; (800deec <KyushinJudge+0x264>)
 800deac:	785b      	ldrb	r3, [r3, #1]
 800deae:	461c      	mov	r4, r3
 800deb0:	4910      	ldr	r1, [pc, #64]	; (800def4 <KyushinJudge+0x26c>)
 800deb2:	4603      	mov	r3, r0
 800deb4:	00db      	lsls	r3, r3, #3
 800deb6:	4403      	add	r3, r0
 800deb8:	4423      	add	r3, r4
 800deba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d21a      	bcs.n	800def8 <KyushinJudge+0x270>
 800dec2:	4b0a      	ldr	r3, [pc, #40]	; (800deec <KyushinJudge+0x264>)
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	2b07      	cmp	r3, #7
 800dec8:	d816      	bhi.n	800def8 <KyushinJudge+0x270>
				  //前東
				  Pos.Dir = front;
 800deca:	4b08      	ldr	r3, [pc, #32]	; (800deec <KyushinJudge+0x264>)
 800decc:	2200      	movs	r2, #0
 800dece:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X + 1;
 800ded0:	4b06      	ldr	r3, [pc, #24]	; (800deec <KyushinJudge+0x264>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	3301      	adds	r3, #1
 800ded6:	b2da      	uxtb	r2, r3
 800ded8:	4b04      	ldr	r3, [pc, #16]	; (800deec <KyushinJudge+0x264>)
 800deda:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y;
 800dedc:	4b03      	ldr	r3, [pc, #12]	; (800deec <KyushinJudge+0x264>)
 800dede:	785a      	ldrb	r2, [r3, #1]
 800dee0:	4b02      	ldr	r3, [pc, #8]	; (800deec <KyushinJudge+0x264>)
 800dee2:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = east;
 800dee4:	4b01      	ldr	r3, [pc, #4]	; (800deec <KyushinJudge+0x264>)
 800dee6:	2201      	movs	r2, #1
 800dee8:	72da      	strb	r2, [r3, #11]
 800deea:	e09c      	b.n	800e026 <KyushinJudge+0x39e>
 800deec:	20000000 	.word	0x20000000
 800def0:	200006ec 	.word	0x200006ec
 800def4:	20000574 	.word	0x20000574
			  }
			  else if(Wall[Pos.X][Pos.Y].north == NOWALL && walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800def8:	4b8e      	ldr	r3, [pc, #568]	; (800e134 <KyushinJudge+0x4ac>)
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	4619      	mov	r1, r3
 800defe:	4b8d      	ldr	r3, [pc, #564]	; (800e134 <KyushinJudge+0x4ac>)
 800df00:	785b      	ldrb	r3, [r3, #1]
 800df02:	4618      	mov	r0, r3
 800df04:	4a8c      	ldr	r2, [pc, #560]	; (800e138 <KyushinJudge+0x4b0>)
 800df06:	460b      	mov	r3, r1
 800df08:	00db      	lsls	r3, r3, #3
 800df0a:	440b      	add	r3, r1
 800df0c:	4403      	add	r3, r0
 800df0e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800df12:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800df16:	b2db      	uxtb	r3, r3
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d130      	bne.n	800df7e <KyushinJudge+0x2f6>
 800df1c:	4b85      	ldr	r3, [pc, #532]	; (800e134 <KyushinJudge+0x4ac>)
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	4618      	mov	r0, r3
 800df22:	4b84      	ldr	r3, [pc, #528]	; (800e134 <KyushinJudge+0x4ac>)
 800df24:	785b      	ldrb	r3, [r3, #1]
 800df26:	1c5a      	adds	r2, r3, #1
 800df28:	4984      	ldr	r1, [pc, #528]	; (800e13c <KyushinJudge+0x4b4>)
 800df2a:	4603      	mov	r3, r0
 800df2c:	00db      	lsls	r3, r3, #3
 800df2e:	4403      	add	r3, r0
 800df30:	4413      	add	r3, r2
 800df32:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800df36:	4b7f      	ldr	r3, [pc, #508]	; (800e134 <KyushinJudge+0x4ac>)
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	4618      	mov	r0, r3
 800df3c:	4b7d      	ldr	r3, [pc, #500]	; (800e134 <KyushinJudge+0x4ac>)
 800df3e:	785b      	ldrb	r3, [r3, #1]
 800df40:	461c      	mov	r4, r3
 800df42:	497e      	ldr	r1, [pc, #504]	; (800e13c <KyushinJudge+0x4b4>)
 800df44:	4603      	mov	r3, r0
 800df46:	00db      	lsls	r3, r3, #3
 800df48:	4403      	add	r3, r0
 800df4a:	4423      	add	r3, r4
 800df4c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800df50:	429a      	cmp	r2, r3
 800df52:	d214      	bcs.n	800df7e <KyushinJudge+0x2f6>
 800df54:	4b77      	ldr	r3, [pc, #476]	; (800e134 <KyushinJudge+0x4ac>)
 800df56:	785b      	ldrb	r3, [r3, #1]
 800df58:	2b07      	cmp	r3, #7
 800df5a:	d810      	bhi.n	800df7e <KyushinJudge+0x2f6>
				  //左?��?

    			  Pos.Dir = left;
 800df5c:	4b75      	ldr	r3, [pc, #468]	; (800e134 <KyushinJudge+0x4ac>)
 800df5e:	2203      	movs	r2, #3
 800df60:	711a      	strb	r2, [r3, #4]
    			  Pos.NextX = Pos.X;
 800df62:	4b74      	ldr	r3, [pc, #464]	; (800e134 <KyushinJudge+0x4ac>)
 800df64:	781a      	ldrb	r2, [r3, #0]
 800df66:	4b73      	ldr	r3, [pc, #460]	; (800e134 <KyushinJudge+0x4ac>)
 800df68:	721a      	strb	r2, [r3, #8]
    			  Pos.NextY = Pos.Y+1;
 800df6a:	4b72      	ldr	r3, [pc, #456]	; (800e134 <KyushinJudge+0x4ac>)
 800df6c:	785b      	ldrb	r3, [r3, #1]
 800df6e:	3301      	adds	r3, #1
 800df70:	b2da      	uxtb	r2, r3
 800df72:	4b70      	ldr	r3, [pc, #448]	; (800e134 <KyushinJudge+0x4ac>)
 800df74:	725a      	strb	r2, [r3, #9]
    			  Pos.NextCar = north;
 800df76:	4b6f      	ldr	r3, [pc, #444]	; (800e134 <KyushinJudge+0x4ac>)
 800df78:	2200      	movs	r2, #0
 800df7a:	72da      	strb	r2, [r3, #11]
 800df7c:	e053      	b.n	800e026 <KyushinJudge+0x39e>
			  }
			  else if(Wall[Pos.X][Pos.Y].south == NOWALL && walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800df7e:	4b6d      	ldr	r3, [pc, #436]	; (800e134 <KyushinJudge+0x4ac>)
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	4619      	mov	r1, r3
 800df84:	4b6b      	ldr	r3, [pc, #428]	; (800e134 <KyushinJudge+0x4ac>)
 800df86:	785b      	ldrb	r3, [r3, #1]
 800df88:	4618      	mov	r0, r3
 800df8a:	4a6b      	ldr	r2, [pc, #428]	; (800e138 <KyushinJudge+0x4b0>)
 800df8c:	460b      	mov	r3, r1
 800df8e:	00db      	lsls	r3, r3, #3
 800df90:	440b      	add	r3, r1
 800df92:	4403      	add	r3, r0
 800df94:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800df98:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d130      	bne.n	800e004 <KyushinJudge+0x37c>
 800dfa2:	4b64      	ldr	r3, [pc, #400]	; (800e134 <KyushinJudge+0x4ac>)
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	4b62      	ldr	r3, [pc, #392]	; (800e134 <KyushinJudge+0x4ac>)
 800dfaa:	785b      	ldrb	r3, [r3, #1]
 800dfac:	1e5a      	subs	r2, r3, #1
 800dfae:	4963      	ldr	r1, [pc, #396]	; (800e13c <KyushinJudge+0x4b4>)
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	00db      	lsls	r3, r3, #3
 800dfb4:	4403      	add	r3, r0
 800dfb6:	4413      	add	r3, r2
 800dfb8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800dfbc:	4b5d      	ldr	r3, [pc, #372]	; (800e134 <KyushinJudge+0x4ac>)
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	4b5c      	ldr	r3, [pc, #368]	; (800e134 <KyushinJudge+0x4ac>)
 800dfc4:	785b      	ldrb	r3, [r3, #1]
 800dfc6:	461c      	mov	r4, r3
 800dfc8:	495c      	ldr	r1, [pc, #368]	; (800e13c <KyushinJudge+0x4b4>)
 800dfca:	4603      	mov	r3, r0
 800dfcc:	00db      	lsls	r3, r3, #3
 800dfce:	4403      	add	r3, r0
 800dfd0:	4423      	add	r3, r4
 800dfd2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d214      	bcs.n	800e004 <KyushinJudge+0x37c>
 800dfda:	4b56      	ldr	r3, [pc, #344]	; (800e134 <KyushinJudge+0x4ac>)
 800dfdc:	785b      	ldrb	r3, [r3, #1]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d010      	beq.n	800e004 <KyushinJudge+0x37c>
				  //右?��?
				  Pos.Dir = right;
 800dfe2:	4b54      	ldr	r3, [pc, #336]	; (800e134 <KyushinJudge+0x4ac>)
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X;
 800dfe8:	4b52      	ldr	r3, [pc, #328]	; (800e134 <KyushinJudge+0x4ac>)
 800dfea:	781a      	ldrb	r2, [r3, #0]
 800dfec:	4b51      	ldr	r3, [pc, #324]	; (800e134 <KyushinJudge+0x4ac>)
 800dfee:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y - 1;
 800dff0:	4b50      	ldr	r3, [pc, #320]	; (800e134 <KyushinJudge+0x4ac>)
 800dff2:	785b      	ldrb	r3, [r3, #1]
 800dff4:	3b01      	subs	r3, #1
 800dff6:	b2da      	uxtb	r2, r3
 800dff8:	4b4e      	ldr	r3, [pc, #312]	; (800e134 <KyushinJudge+0x4ac>)
 800dffa:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = south;
 800dffc:	4b4d      	ldr	r3, [pc, #308]	; (800e134 <KyushinJudge+0x4ac>)
 800dffe:	2202      	movs	r2, #2
 800e000:	72da      	strb	r2, [r3, #11]
 800e002:	e010      	b.n	800e026 <KyushinJudge+0x39e>
			  }
			  else {
				  //後西
				  Pos.Dir = back;
 800e004:	4b4b      	ldr	r3, [pc, #300]	; (800e134 <KyushinJudge+0x4ac>)
 800e006:	2202      	movs	r2, #2
 800e008:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X - 1;
 800e00a:	4b4a      	ldr	r3, [pc, #296]	; (800e134 <KyushinJudge+0x4ac>)
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	3b01      	subs	r3, #1
 800e010:	b2da      	uxtb	r2, r3
 800e012:	4b48      	ldr	r3, [pc, #288]	; (800e134 <KyushinJudge+0x4ac>)
 800e014:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y;
 800e016:	4b47      	ldr	r3, [pc, #284]	; (800e134 <KyushinJudge+0x4ac>)
 800e018:	785a      	ldrb	r2, [r3, #1]
 800e01a:	4b46      	ldr	r3, [pc, #280]	; (800e134 <KyushinJudge+0x4ac>)
 800e01c:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = west;
 800e01e:	4b45      	ldr	r3, [pc, #276]	; (800e134 <KyushinJudge+0x4ac>)
 800e020:	2203      	movs	r2, #3
 800e022:	72da      	strb	r2, [r3, #11]
			  }
			  break;
 800e024:	e1bd      	b.n	800e3a2 <KyushinJudge+0x71a>
 800e026:	e1bc      	b.n	800e3a2 <KyushinJudge+0x71a>

		  case south:

			  if(Wall[Pos.X][Pos.Y].south == NOWALL &&walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800e028:	4b42      	ldr	r3, [pc, #264]	; (800e134 <KyushinJudge+0x4ac>)
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	4619      	mov	r1, r3
 800e02e:	4b41      	ldr	r3, [pc, #260]	; (800e134 <KyushinJudge+0x4ac>)
 800e030:	785b      	ldrb	r3, [r3, #1]
 800e032:	4618      	mov	r0, r3
 800e034:	4a40      	ldr	r2, [pc, #256]	; (800e138 <KyushinJudge+0x4b0>)
 800e036:	460b      	mov	r3, r1
 800e038:	00db      	lsls	r3, r3, #3
 800e03a:	440b      	add	r3, r1
 800e03c:	4403      	add	r3, r0
 800e03e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e042:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e046:	b2db      	uxtb	r3, r3
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d130      	bne.n	800e0ae <KyushinJudge+0x426>
 800e04c:	4b39      	ldr	r3, [pc, #228]	; (800e134 <KyushinJudge+0x4ac>)
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	4618      	mov	r0, r3
 800e052:	4b38      	ldr	r3, [pc, #224]	; (800e134 <KyushinJudge+0x4ac>)
 800e054:	785b      	ldrb	r3, [r3, #1]
 800e056:	1e5a      	subs	r2, r3, #1
 800e058:	4938      	ldr	r1, [pc, #224]	; (800e13c <KyushinJudge+0x4b4>)
 800e05a:	4603      	mov	r3, r0
 800e05c:	00db      	lsls	r3, r3, #3
 800e05e:	4403      	add	r3, r0
 800e060:	4413      	add	r3, r2
 800e062:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e066:	4b33      	ldr	r3, [pc, #204]	; (800e134 <KyushinJudge+0x4ac>)
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	4618      	mov	r0, r3
 800e06c:	4b31      	ldr	r3, [pc, #196]	; (800e134 <KyushinJudge+0x4ac>)
 800e06e:	785b      	ldrb	r3, [r3, #1]
 800e070:	461c      	mov	r4, r3
 800e072:	4932      	ldr	r1, [pc, #200]	; (800e13c <KyushinJudge+0x4b4>)
 800e074:	4603      	mov	r3, r0
 800e076:	00db      	lsls	r3, r3, #3
 800e078:	4403      	add	r3, r0
 800e07a:	4423      	add	r3, r4
 800e07c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e080:	429a      	cmp	r2, r3
 800e082:	d214      	bcs.n	800e0ae <KyushinJudge+0x426>
 800e084:	4b2b      	ldr	r3, [pc, #172]	; (800e134 <KyushinJudge+0x4ac>)
 800e086:	785b      	ldrb	r3, [r3, #1]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d010      	beq.n	800e0ae <KyushinJudge+0x426>
				  //前南
				  Pos.Dir = front;
 800e08c:	4b29      	ldr	r3, [pc, #164]	; (800e134 <KyushinJudge+0x4ac>)
 800e08e:	2200      	movs	r2, #0
 800e090:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X;
 800e092:	4b28      	ldr	r3, [pc, #160]	; (800e134 <KyushinJudge+0x4ac>)
 800e094:	781a      	ldrb	r2, [r3, #0]
 800e096:	4b27      	ldr	r3, [pc, #156]	; (800e134 <KyushinJudge+0x4ac>)
 800e098:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y - 1;
 800e09a:	4b26      	ldr	r3, [pc, #152]	; (800e134 <KyushinJudge+0x4ac>)
 800e09c:	785b      	ldrb	r3, [r3, #1]
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	b2da      	uxtb	r2, r3
 800e0a2:	4b24      	ldr	r3, [pc, #144]	; (800e134 <KyushinJudge+0x4ac>)
 800e0a4:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = south;
 800e0a6:	4b23      	ldr	r3, [pc, #140]	; (800e134 <KyushinJudge+0x4ac>)
 800e0a8:	2202      	movs	r2, #2
 800e0aa:	72da      	strb	r2, [r3, #11]
 800e0ac:	e09c      	b.n	800e1e8 <KyushinJudge+0x560>
			  }
			  else if(Wall[Pos.X][Pos.Y].east == NOWALL &&walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X < NUMBER_OF_SQUARES-1){
 800e0ae:	4b21      	ldr	r3, [pc, #132]	; (800e134 <KyushinJudge+0x4ac>)
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	4b1f      	ldr	r3, [pc, #124]	; (800e134 <KyushinJudge+0x4ac>)
 800e0b6:	785b      	ldrb	r3, [r3, #1]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	4a1f      	ldr	r2, [pc, #124]	; (800e138 <KyushinJudge+0x4b0>)
 800e0bc:	460b      	mov	r3, r1
 800e0be:	00db      	lsls	r3, r3, #3
 800e0c0:	440b      	add	r3, r1
 800e0c2:	4403      	add	r3, r0
 800e0c4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e0c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d136      	bne.n	800e140 <KyushinJudge+0x4b8>
 800e0d2:	4b18      	ldr	r3, [pc, #96]	; (800e134 <KyushinJudge+0x4ac>)
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	1c5a      	adds	r2, r3, #1
 800e0d8:	4b16      	ldr	r3, [pc, #88]	; (800e134 <KyushinJudge+0x4ac>)
 800e0da:	785b      	ldrb	r3, [r3, #1]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	4917      	ldr	r1, [pc, #92]	; (800e13c <KyushinJudge+0x4b4>)
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	00db      	lsls	r3, r3, #3
 800e0e4:	4413      	add	r3, r2
 800e0e6:	4403      	add	r3, r0
 800e0e8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e0ec:	4b11      	ldr	r3, [pc, #68]	; (800e134 <KyushinJudge+0x4ac>)
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	4b10      	ldr	r3, [pc, #64]	; (800e134 <KyushinJudge+0x4ac>)
 800e0f4:	785b      	ldrb	r3, [r3, #1]
 800e0f6:	461c      	mov	r4, r3
 800e0f8:	4910      	ldr	r1, [pc, #64]	; (800e13c <KyushinJudge+0x4b4>)
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	00db      	lsls	r3, r3, #3
 800e0fe:	4403      	add	r3, r0
 800e100:	4423      	add	r3, r4
 800e102:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e106:	429a      	cmp	r2, r3
 800e108:	d21a      	bcs.n	800e140 <KyushinJudge+0x4b8>
 800e10a:	4b0a      	ldr	r3, [pc, #40]	; (800e134 <KyushinJudge+0x4ac>)
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	2b07      	cmp	r3, #7
 800e110:	d816      	bhi.n	800e140 <KyushinJudge+0x4b8>
				  //左東
    			  Pos.Dir = left;
 800e112:	4b08      	ldr	r3, [pc, #32]	; (800e134 <KyushinJudge+0x4ac>)
 800e114:	2203      	movs	r2, #3
 800e116:	711a      	strb	r2, [r3, #4]
    			  Pos.NextX = Pos.X + 1;
 800e118:	4b06      	ldr	r3, [pc, #24]	; (800e134 <KyushinJudge+0x4ac>)
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	3301      	adds	r3, #1
 800e11e:	b2da      	uxtb	r2, r3
 800e120:	4b04      	ldr	r3, [pc, #16]	; (800e134 <KyushinJudge+0x4ac>)
 800e122:	721a      	strb	r2, [r3, #8]
    			  Pos.NextY = Pos.Y;
 800e124:	4b03      	ldr	r3, [pc, #12]	; (800e134 <KyushinJudge+0x4ac>)
 800e126:	785a      	ldrb	r2, [r3, #1]
 800e128:	4b02      	ldr	r3, [pc, #8]	; (800e134 <KyushinJudge+0x4ac>)
 800e12a:	725a      	strb	r2, [r3, #9]
    			  Pos.NextCar = east;
 800e12c:	4b01      	ldr	r3, [pc, #4]	; (800e134 <KyushinJudge+0x4ac>)
 800e12e:	2201      	movs	r2, #1
 800e130:	72da      	strb	r2, [r3, #11]
 800e132:	e059      	b.n	800e1e8 <KyushinJudge+0x560>
 800e134:	20000000 	.word	0x20000000
 800e138:	200006ec 	.word	0x200006ec
 800e13c:	20000574 	.word	0x20000574
			  }
			  else if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800e140:	4b9a      	ldr	r3, [pc, #616]	; (800e3ac <KyushinJudge+0x724>)
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	4619      	mov	r1, r3
 800e146:	4b99      	ldr	r3, [pc, #612]	; (800e3ac <KyushinJudge+0x724>)
 800e148:	785b      	ldrb	r3, [r3, #1]
 800e14a:	4618      	mov	r0, r3
 800e14c:	4a98      	ldr	r2, [pc, #608]	; (800e3b0 <KyushinJudge+0x728>)
 800e14e:	460b      	mov	r3, r1
 800e150:	00db      	lsls	r3, r3, #3
 800e152:	440b      	add	r3, r1
 800e154:	4403      	add	r3, r0
 800e156:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e15a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	2b00      	cmp	r3, #0
 800e162:	d130      	bne.n	800e1c6 <KyushinJudge+0x53e>
 800e164:	4b91      	ldr	r3, [pc, #580]	; (800e3ac <KyushinJudge+0x724>)
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	1e5a      	subs	r2, r3, #1
 800e16a:	4b90      	ldr	r3, [pc, #576]	; (800e3ac <KyushinJudge+0x724>)
 800e16c:	785b      	ldrb	r3, [r3, #1]
 800e16e:	4618      	mov	r0, r3
 800e170:	4990      	ldr	r1, [pc, #576]	; (800e3b4 <KyushinJudge+0x72c>)
 800e172:	4613      	mov	r3, r2
 800e174:	00db      	lsls	r3, r3, #3
 800e176:	4413      	add	r3, r2
 800e178:	4403      	add	r3, r0
 800e17a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e17e:	4b8b      	ldr	r3, [pc, #556]	; (800e3ac <KyushinJudge+0x724>)
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	4618      	mov	r0, r3
 800e184:	4b89      	ldr	r3, [pc, #548]	; (800e3ac <KyushinJudge+0x724>)
 800e186:	785b      	ldrb	r3, [r3, #1]
 800e188:	461c      	mov	r4, r3
 800e18a:	498a      	ldr	r1, [pc, #552]	; (800e3b4 <KyushinJudge+0x72c>)
 800e18c:	4603      	mov	r3, r0
 800e18e:	00db      	lsls	r3, r3, #3
 800e190:	4403      	add	r3, r0
 800e192:	4423      	add	r3, r4
 800e194:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d214      	bcs.n	800e1c6 <KyushinJudge+0x53e>
 800e19c:	4b83      	ldr	r3, [pc, #524]	; (800e3ac <KyushinJudge+0x724>)
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d010      	beq.n	800e1c6 <KyushinJudge+0x53e>
				  //右西
				  Pos.Dir = right;
 800e1a4:	4b81      	ldr	r3, [pc, #516]	; (800e3ac <KyushinJudge+0x724>)
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X - 1;
 800e1aa:	4b80      	ldr	r3, [pc, #512]	; (800e3ac <KyushinJudge+0x724>)
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	3b01      	subs	r3, #1
 800e1b0:	b2da      	uxtb	r2, r3
 800e1b2:	4b7e      	ldr	r3, [pc, #504]	; (800e3ac <KyushinJudge+0x724>)
 800e1b4:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y;
 800e1b6:	4b7d      	ldr	r3, [pc, #500]	; (800e3ac <KyushinJudge+0x724>)
 800e1b8:	785a      	ldrb	r2, [r3, #1]
 800e1ba:	4b7c      	ldr	r3, [pc, #496]	; (800e3ac <KyushinJudge+0x724>)
 800e1bc:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = west;
 800e1be:	4b7b      	ldr	r3, [pc, #492]	; (800e3ac <KyushinJudge+0x724>)
 800e1c0:	2203      	movs	r2, #3
 800e1c2:	72da      	strb	r2, [r3, #11]
 800e1c4:	e010      	b.n	800e1e8 <KyushinJudge+0x560>
			  }
			  else {
				  //後北
				  Pos.Dir = back;
 800e1c6:	4b79      	ldr	r3, [pc, #484]	; (800e3ac <KyushinJudge+0x724>)
 800e1c8:	2202      	movs	r2, #2
 800e1ca:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X;
 800e1cc:	4b77      	ldr	r3, [pc, #476]	; (800e3ac <KyushinJudge+0x724>)
 800e1ce:	781a      	ldrb	r2, [r3, #0]
 800e1d0:	4b76      	ldr	r3, [pc, #472]	; (800e3ac <KyushinJudge+0x724>)
 800e1d2:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y+1;
 800e1d4:	4b75      	ldr	r3, [pc, #468]	; (800e3ac <KyushinJudge+0x724>)
 800e1d6:	785b      	ldrb	r3, [r3, #1]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	b2da      	uxtb	r2, r3
 800e1dc:	4b73      	ldr	r3, [pc, #460]	; (800e3ac <KyushinJudge+0x724>)
 800e1de:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = north;
 800e1e0:	4b72      	ldr	r3, [pc, #456]	; (800e3ac <KyushinJudge+0x724>)
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	72da      	strb	r2, [r3, #11]
			  }
			  break;
 800e1e6:	e0dc      	b.n	800e3a2 <KyushinJudge+0x71a>
 800e1e8:	e0db      	b.n	800e3a2 <KyushinJudge+0x71a>

		  case west:

			  if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800e1ea:	4b70      	ldr	r3, [pc, #448]	; (800e3ac <KyushinJudge+0x724>)
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	4b6e      	ldr	r3, [pc, #440]	; (800e3ac <KyushinJudge+0x724>)
 800e1f2:	785b      	ldrb	r3, [r3, #1]
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	4a6e      	ldr	r2, [pc, #440]	; (800e3b0 <KyushinJudge+0x728>)
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	00db      	lsls	r3, r3, #3
 800e1fc:	440b      	add	r3, r1
 800e1fe:	4403      	add	r3, r0
 800e200:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e204:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d130      	bne.n	800e270 <KyushinJudge+0x5e8>
 800e20e:	4b67      	ldr	r3, [pc, #412]	; (800e3ac <KyushinJudge+0x724>)
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	1e5a      	subs	r2, r3, #1
 800e214:	4b65      	ldr	r3, [pc, #404]	; (800e3ac <KyushinJudge+0x724>)
 800e216:	785b      	ldrb	r3, [r3, #1]
 800e218:	4618      	mov	r0, r3
 800e21a:	4966      	ldr	r1, [pc, #408]	; (800e3b4 <KyushinJudge+0x72c>)
 800e21c:	4613      	mov	r3, r2
 800e21e:	00db      	lsls	r3, r3, #3
 800e220:	4413      	add	r3, r2
 800e222:	4403      	add	r3, r0
 800e224:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e228:	4b60      	ldr	r3, [pc, #384]	; (800e3ac <KyushinJudge+0x724>)
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	4618      	mov	r0, r3
 800e22e:	4b5f      	ldr	r3, [pc, #380]	; (800e3ac <KyushinJudge+0x724>)
 800e230:	785b      	ldrb	r3, [r3, #1]
 800e232:	461c      	mov	r4, r3
 800e234:	495f      	ldr	r1, [pc, #380]	; (800e3b4 <KyushinJudge+0x72c>)
 800e236:	4603      	mov	r3, r0
 800e238:	00db      	lsls	r3, r3, #3
 800e23a:	4403      	add	r3, r0
 800e23c:	4423      	add	r3, r4
 800e23e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e242:	429a      	cmp	r2, r3
 800e244:	d214      	bcs.n	800e270 <KyushinJudge+0x5e8>
 800e246:	4b59      	ldr	r3, [pc, #356]	; (800e3ac <KyushinJudge+0x724>)
 800e248:	781b      	ldrb	r3, [r3, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d010      	beq.n	800e270 <KyushinJudge+0x5e8>
				  //前西
				  Pos.Dir = front;
 800e24e:	4b57      	ldr	r3, [pc, #348]	; (800e3ac <KyushinJudge+0x724>)
 800e250:	2200      	movs	r2, #0
 800e252:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X - 1;
 800e254:	4b55      	ldr	r3, [pc, #340]	; (800e3ac <KyushinJudge+0x724>)
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	3b01      	subs	r3, #1
 800e25a:	b2da      	uxtb	r2, r3
 800e25c:	4b53      	ldr	r3, [pc, #332]	; (800e3ac <KyushinJudge+0x724>)
 800e25e:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y;
 800e260:	4b52      	ldr	r3, [pc, #328]	; (800e3ac <KyushinJudge+0x724>)
 800e262:	785a      	ldrb	r2, [r3, #1]
 800e264:	4b51      	ldr	r3, [pc, #324]	; (800e3ac <KyushinJudge+0x724>)
 800e266:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = west;
 800e268:	4b50      	ldr	r3, [pc, #320]	; (800e3ac <KyushinJudge+0x724>)
 800e26a:	2203      	movs	r2, #3
 800e26c:	72da      	strb	r2, [r3, #11]
 800e26e:	e096      	b.n	800e39e <KyushinJudge+0x716>
			  }
			  else if(Wall[Pos.X][Pos.Y].south == NOWALL &&walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800e270:	4b4e      	ldr	r3, [pc, #312]	; (800e3ac <KyushinJudge+0x724>)
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	4619      	mov	r1, r3
 800e276:	4b4d      	ldr	r3, [pc, #308]	; (800e3ac <KyushinJudge+0x724>)
 800e278:	785b      	ldrb	r3, [r3, #1]
 800e27a:	4618      	mov	r0, r3
 800e27c:	4a4c      	ldr	r2, [pc, #304]	; (800e3b0 <KyushinJudge+0x728>)
 800e27e:	460b      	mov	r3, r1
 800e280:	00db      	lsls	r3, r3, #3
 800e282:	440b      	add	r3, r1
 800e284:	4403      	add	r3, r0
 800e286:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e28a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	2b00      	cmp	r3, #0
 800e292:	d130      	bne.n	800e2f6 <KyushinJudge+0x66e>
 800e294:	4b45      	ldr	r3, [pc, #276]	; (800e3ac <KyushinJudge+0x724>)
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	4618      	mov	r0, r3
 800e29a:	4b44      	ldr	r3, [pc, #272]	; (800e3ac <KyushinJudge+0x724>)
 800e29c:	785b      	ldrb	r3, [r3, #1]
 800e29e:	1e5a      	subs	r2, r3, #1
 800e2a0:	4944      	ldr	r1, [pc, #272]	; (800e3b4 <KyushinJudge+0x72c>)
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	00db      	lsls	r3, r3, #3
 800e2a6:	4403      	add	r3, r0
 800e2a8:	4413      	add	r3, r2
 800e2aa:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e2ae:	4b3f      	ldr	r3, [pc, #252]	; (800e3ac <KyushinJudge+0x724>)
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	4b3d      	ldr	r3, [pc, #244]	; (800e3ac <KyushinJudge+0x724>)
 800e2b6:	785b      	ldrb	r3, [r3, #1]
 800e2b8:	461c      	mov	r4, r3
 800e2ba:	493e      	ldr	r1, [pc, #248]	; (800e3b4 <KyushinJudge+0x72c>)
 800e2bc:	4603      	mov	r3, r0
 800e2be:	00db      	lsls	r3, r3, #3
 800e2c0:	4403      	add	r3, r0
 800e2c2:	4423      	add	r3, r4
 800e2c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d214      	bcs.n	800e2f6 <KyushinJudge+0x66e>
 800e2cc:	4b37      	ldr	r3, [pc, #220]	; (800e3ac <KyushinJudge+0x724>)
 800e2ce:	785b      	ldrb	r3, [r3, #1]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d010      	beq.n	800e2f6 <KyushinJudge+0x66e>
				  //左?��?
    			  Pos.Dir = left;
 800e2d4:	4b35      	ldr	r3, [pc, #212]	; (800e3ac <KyushinJudge+0x724>)
 800e2d6:	2203      	movs	r2, #3
 800e2d8:	711a      	strb	r2, [r3, #4]
    			  Pos.NextX = Pos.X;
 800e2da:	4b34      	ldr	r3, [pc, #208]	; (800e3ac <KyushinJudge+0x724>)
 800e2dc:	781a      	ldrb	r2, [r3, #0]
 800e2de:	4b33      	ldr	r3, [pc, #204]	; (800e3ac <KyushinJudge+0x724>)
 800e2e0:	721a      	strb	r2, [r3, #8]
    			  Pos.NextY = Pos.Y - 1;
 800e2e2:	4b32      	ldr	r3, [pc, #200]	; (800e3ac <KyushinJudge+0x724>)
 800e2e4:	785b      	ldrb	r3, [r3, #1]
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	4b30      	ldr	r3, [pc, #192]	; (800e3ac <KyushinJudge+0x724>)
 800e2ec:	725a      	strb	r2, [r3, #9]
    			  Pos.NextCar = south;
 800e2ee:	4b2f      	ldr	r3, [pc, #188]	; (800e3ac <KyushinJudge+0x724>)
 800e2f0:	2202      	movs	r2, #2
 800e2f2:	72da      	strb	r2, [r3, #11]
 800e2f4:	e053      	b.n	800e39e <KyushinJudge+0x716>
			  }
			  else if(Wall[Pos.X][Pos.Y].north == NOWALL &&walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800e2f6:	4b2d      	ldr	r3, [pc, #180]	; (800e3ac <KyushinJudge+0x724>)
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	4b2b      	ldr	r3, [pc, #172]	; (800e3ac <KyushinJudge+0x724>)
 800e2fe:	785b      	ldrb	r3, [r3, #1]
 800e300:	4618      	mov	r0, r3
 800e302:	4a2b      	ldr	r2, [pc, #172]	; (800e3b0 <KyushinJudge+0x728>)
 800e304:	460b      	mov	r3, r1
 800e306:	00db      	lsls	r3, r3, #3
 800e308:	440b      	add	r3, r1
 800e30a:	4403      	add	r3, r0
 800e30c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e310:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e314:	b2db      	uxtb	r3, r3
 800e316:	2b00      	cmp	r3, #0
 800e318:	d130      	bne.n	800e37c <KyushinJudge+0x6f4>
 800e31a:	4b24      	ldr	r3, [pc, #144]	; (800e3ac <KyushinJudge+0x724>)
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	4618      	mov	r0, r3
 800e320:	4b22      	ldr	r3, [pc, #136]	; (800e3ac <KyushinJudge+0x724>)
 800e322:	785b      	ldrb	r3, [r3, #1]
 800e324:	1c5a      	adds	r2, r3, #1
 800e326:	4923      	ldr	r1, [pc, #140]	; (800e3b4 <KyushinJudge+0x72c>)
 800e328:	4603      	mov	r3, r0
 800e32a:	00db      	lsls	r3, r3, #3
 800e32c:	4403      	add	r3, r0
 800e32e:	4413      	add	r3, r2
 800e330:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e334:	4b1d      	ldr	r3, [pc, #116]	; (800e3ac <KyushinJudge+0x724>)
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	4618      	mov	r0, r3
 800e33a:	4b1c      	ldr	r3, [pc, #112]	; (800e3ac <KyushinJudge+0x724>)
 800e33c:	785b      	ldrb	r3, [r3, #1]
 800e33e:	461c      	mov	r4, r3
 800e340:	491c      	ldr	r1, [pc, #112]	; (800e3b4 <KyushinJudge+0x72c>)
 800e342:	4603      	mov	r3, r0
 800e344:	00db      	lsls	r3, r3, #3
 800e346:	4403      	add	r3, r0
 800e348:	4423      	add	r3, r4
 800e34a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d214      	bcs.n	800e37c <KyushinJudge+0x6f4>
 800e352:	4b16      	ldr	r3, [pc, #88]	; (800e3ac <KyushinJudge+0x724>)
 800e354:	785b      	ldrb	r3, [r3, #1]
 800e356:	2b07      	cmp	r3, #7
 800e358:	d810      	bhi.n	800e37c <KyushinJudge+0x6f4>
				  //右?��?
				  Pos.Dir = right;
 800e35a:	4b14      	ldr	r3, [pc, #80]	; (800e3ac <KyushinJudge+0x724>)
 800e35c:	2201      	movs	r2, #1
 800e35e:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X;
 800e360:	4b12      	ldr	r3, [pc, #72]	; (800e3ac <KyushinJudge+0x724>)
 800e362:	781a      	ldrb	r2, [r3, #0]
 800e364:	4b11      	ldr	r3, [pc, #68]	; (800e3ac <KyushinJudge+0x724>)
 800e366:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y+1;
 800e368:	4b10      	ldr	r3, [pc, #64]	; (800e3ac <KyushinJudge+0x724>)
 800e36a:	785b      	ldrb	r3, [r3, #1]
 800e36c:	3301      	adds	r3, #1
 800e36e:	b2da      	uxtb	r2, r3
 800e370:	4b0e      	ldr	r3, [pc, #56]	; (800e3ac <KyushinJudge+0x724>)
 800e372:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = north;
 800e374:	4b0d      	ldr	r3, [pc, #52]	; (800e3ac <KyushinJudge+0x724>)
 800e376:	2200      	movs	r2, #0
 800e378:	72da      	strb	r2, [r3, #11]
 800e37a:	e010      	b.n	800e39e <KyushinJudge+0x716>
			  }
			  else {
				  //後東
				  Pos.Dir = back;
 800e37c:	4b0b      	ldr	r3, [pc, #44]	; (800e3ac <KyushinJudge+0x724>)
 800e37e:	2202      	movs	r2, #2
 800e380:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X + 1;
 800e382:	4b0a      	ldr	r3, [pc, #40]	; (800e3ac <KyushinJudge+0x724>)
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	3301      	adds	r3, #1
 800e388:	b2da      	uxtb	r2, r3
 800e38a:	4b08      	ldr	r3, [pc, #32]	; (800e3ac <KyushinJudge+0x724>)
 800e38c:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y;
 800e38e:	4b07      	ldr	r3, [pc, #28]	; (800e3ac <KyushinJudge+0x724>)
 800e390:	785a      	ldrb	r2, [r3, #1]
 800e392:	4b06      	ldr	r3, [pc, #24]	; (800e3ac <KyushinJudge+0x724>)
 800e394:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = east;
 800e396:	4b05      	ldr	r3, [pc, #20]	; (800e3ac <KyushinJudge+0x724>)
 800e398:	2201      	movs	r2, #1
 800e39a:	72da      	strb	r2, [r3, #11]
			  }
			  break;
 800e39c:	e001      	b.n	800e3a2 <KyushinJudge+0x71a>
 800e39e:	e000      	b.n	800e3a2 <KyushinJudge+0x71a>

		  default:
			  break;
 800e3a0:	bf00      	nop
		  //swtich end
	}


}
 800e3a2:	bf00      	nop
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bc90      	pop	{r4, r7}
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	20000000 	.word	0x20000000
 800e3b0:	200006ec 	.word	0x200006ec
 800e3b4:	20000574 	.word	0x20000574

0800e3b8 <is_unknown>:
    	  default:
    		  break;
    	  }//swtich end
}
_Bool is_unknown(int x, int y)	//指定された区画が未探索か否かを判断する関数 未探索:true　探索済:false
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]
	//座標x,yが未探索区間か否かを調べる

	if((Wall[x][y].north == UNKNOWN) || (Wall[x][y].east == UNKNOWN) || (Wall[x][y].south == UNKNOWN) || (Wall[x][y].west == UNKNOWN))
 800e3c2:	4920      	ldr	r1, [pc, #128]	; (800e444 <is_unknown+0x8c>)
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	4613      	mov	r3, r2
 800e3c8:	00db      	lsls	r3, r3, #3
 800e3ca:	4413      	add	r3, r2
 800e3cc:	683a      	ldr	r2, [r7, #0]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800e3d4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e3d8:	b2db      	uxtb	r3, r3
 800e3da:	2b02      	cmp	r3, #2
 800e3dc:	d029      	beq.n	800e432 <is_unknown+0x7a>
 800e3de:	4919      	ldr	r1, [pc, #100]	; (800e444 <is_unknown+0x8c>)
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	00db      	lsls	r3, r3, #3
 800e3e6:	4413      	add	r3, r2
 800e3e8:	683a      	ldr	r2, [r7, #0]
 800e3ea:	4413      	add	r3, r2
 800e3ec:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800e3f0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	2b02      	cmp	r3, #2
 800e3f8:	d01b      	beq.n	800e432 <is_unknown+0x7a>
 800e3fa:	4912      	ldr	r1, [pc, #72]	; (800e444 <is_unknown+0x8c>)
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	4613      	mov	r3, r2
 800e400:	00db      	lsls	r3, r3, #3
 800e402:	4413      	add	r3, r2
 800e404:	683a      	ldr	r2, [r7, #0]
 800e406:	4413      	add	r3, r2
 800e408:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800e40c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e410:	b2db      	uxtb	r3, r3
 800e412:	2b02      	cmp	r3, #2
 800e414:	d00d      	beq.n	800e432 <is_unknown+0x7a>
 800e416:	490b      	ldr	r1, [pc, #44]	; (800e444 <is_unknown+0x8c>)
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	4613      	mov	r3, r2
 800e41c:	00db      	lsls	r3, r3, #3
 800e41e:	4413      	add	r3, r2
 800e420:	683a      	ldr	r2, [r7, #0]
 800e422:	4413      	add	r3, r2
 800e424:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800e428:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	2b02      	cmp	r3, #2
 800e430:	d101      	bne.n	800e436 <is_unknown+0x7e>
	{			//どこかの壁情報が不明のままであれば
		return true;	//未探索
 800e432:	2301      	movs	r3, #1
 800e434:	e000      	b.n	800e438 <is_unknown+0x80>
	}
	else
	{
		return false;	//探索済
 800e436:	2300      	movs	r3, #0
	}
}
 800e438:	4618      	mov	r0, r3
 800e43a:	370c      	adds	r7, #12
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr
 800e444:	200006ec 	.word	0x200006ec

0800e448 <get_priority>:
int get_priority(int x, int y, cardinal car)	//そのマスの情報から、優先度を算出する
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b086      	sub	sp, #24
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	4613      	mov	r3, r2
 800e454:	71fb      	strb	r3, [r7, #7]
	//それに加え、自分の向きと、行きたい方向から、
	//前(2)横(1)後(0)の優先度を付加する。

	int priority;	//優先度を記録する変数

	priority = 0;
 800e456:	2300      	movs	r3, #0
 800e458:	617b      	str	r3, [r7, #20]

	if(Pos.Car == car)				//行きたい方向が現在の進行方向と同じ場合
 800e45a:	4b15      	ldr	r3, [pc, #84]	; (800e4b0 <get_priority+0x68>)
 800e45c:	795b      	ldrb	r3, [r3, #5]
 800e45e:	79fa      	ldrb	r2, [r7, #7]
 800e460:	429a      	cmp	r2, r3
 800e462:	d102      	bne.n	800e46a <get_priority+0x22>
	{
		priority = 2;
 800e464:	2302      	movs	r3, #2
 800e466:	617b      	str	r3, [r7, #20]
 800e468:	e012      	b.n	800e490 <get_priority+0x48>
	}
	else if( ((4+Pos.Car-car)%4) == 2)		//行きたい方向が現在の進行方向と逆の場合
 800e46a:	4b11      	ldr	r3, [pc, #68]	; (800e4b0 <get_priority+0x68>)
 800e46c:	795b      	ldrb	r3, [r3, #5]
 800e46e:	1d1a      	adds	r2, r3, #4
 800e470:	79fb      	ldrb	r3, [r7, #7]
 800e472:	1ad3      	subs	r3, r2, r3
 800e474:	425a      	negs	r2, r3
 800e476:	f003 0303 	and.w	r3, r3, #3
 800e47a:	f002 0203 	and.w	r2, r2, #3
 800e47e:	bf58      	it	pl
 800e480:	4253      	negpl	r3, r2
 800e482:	2b02      	cmp	r3, #2
 800e484:	d102      	bne.n	800e48c <get_priority+0x44>
	{
		priority = 0;
 800e486:	2300      	movs	r3, #0
 800e488:	617b      	str	r3, [r7, #20]
 800e48a:	e001      	b.n	800e490 <get_priority+0x48>
	}
	else						//それ以外(左右どちらか)の場合
	{
		priority = 1;
 800e48c:	2301      	movs	r3, #1
 800e48e:	617b      	str	r3, [r7, #20]
	}


	if(is_unknown(x,y) == true)
 800e490:	68b9      	ldr	r1, [r7, #8]
 800e492:	68f8      	ldr	r0, [r7, #12]
 800e494:	f7ff ff90 	bl	800e3b8 <is_unknown>
 800e498:	4603      	mov	r3, r0
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d002      	beq.n	800e4a4 <get_priority+0x5c>
	{
		priority += 4;				//未探索の場合優先度をさらに付加
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	3304      	adds	r3, #4
 800e4a2:	617b      	str	r3, [r7, #20]
	}

	return priority;				//優先度を返す
 800e4a4:	697b      	ldr	r3, [r7, #20]

}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3718      	adds	r7, #24
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	20000000 	.word	0x20000000

0800e4b4 <get_nextdir>:
int get_nextdir(int x, int y, int mask)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b088      	sub	sp, #32
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	607a      	str	r2, [r7, #4]
	//ゴール座標x,yに向かう場合、今どちらに行くべきかを判断する。
	//探索、最短の切り替えのためのmaskを指定、dirは方角を示す
	int little,priority,tmp_priority;		//最小の値を探すために使用する変数


	make_map(x,y,mask);				//歩数Map生成
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	68ba      	ldr	r2, [r7, #8]
 800e4c6:	b2d1      	uxtb	r1, r2
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fd fc36 	bl	800bd3c <make_map>
	little = 255;					//最小歩数を255歩(mapがunsigned char型なので)に設定
 800e4d0:	23ff      	movs	r3, #255	; 0xff
 800e4d2:	61fb      	str	r3, [r7, #28]

	priority = 0;					//優先度の初期値は0
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	61bb      	str	r3, [r7, #24]

		//maskの意味はstatic_parameter.hを参照
	if( (Wall[Pos.X][Pos.Y].north & mask) == NOWALL)			//北に壁がなければ
 800e4d8:	4b80      	ldr	r3, [pc, #512]	; (800e6dc <get_nextdir+0x228>)
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	4619      	mov	r1, r3
 800e4de:	4b7f      	ldr	r3, [pc, #508]	; (800e6dc <get_nextdir+0x228>)
 800e4e0:	785b      	ldrb	r3, [r3, #1]
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	4a7e      	ldr	r2, [pc, #504]	; (800e6e0 <get_nextdir+0x22c>)
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	00db      	lsls	r3, r3, #3
 800e4ea:	440b      	add	r3, r1
 800e4ec:	4403      	add	r3, r0
 800e4ee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e4f2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4013      	ands	r3, r2
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d149      	bne.n	800e596 <get_nextdir+0xe2>
	{
		tmp_priority = get_priority(Pos.X, Pos.Y + 1, north);	//優先度を算出
 800e502:	4b76      	ldr	r3, [pc, #472]	; (800e6dc <get_nextdir+0x228>)
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	4618      	mov	r0, r3
 800e508:	4b74      	ldr	r3, [pc, #464]	; (800e6dc <get_nextdir+0x228>)
 800e50a:	785b      	ldrb	r3, [r3, #1]
 800e50c:	3301      	adds	r3, #1
 800e50e:	2200      	movs	r2, #0
 800e510:	4619      	mov	r1, r3
 800e512:	f7ff ff99 	bl	800e448 <get_priority>
 800e516:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X][Pos.Y+1] < little)				//一番歩数が小さい方向を見つける
 800e518:	4b70      	ldr	r3, [pc, #448]	; (800e6dc <get_nextdir+0x228>)
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	4618      	mov	r0, r3
 800e51e:	4b6f      	ldr	r3, [pc, #444]	; (800e6dc <get_nextdir+0x228>)
 800e520:	785b      	ldrb	r3, [r3, #1]
 800e522:	1c5a      	adds	r2, r3, #1
 800e524:	496f      	ldr	r1, [pc, #444]	; (800e6e4 <get_nextdir+0x230>)
 800e526:	4603      	mov	r3, r0
 800e528:	00db      	lsls	r3, r3, #3
 800e52a:	4403      	add	r3, r0
 800e52c:	4413      	add	r3, r2
 800e52e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e532:	461a      	mov	r2, r3
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	4293      	cmp	r3, r2
 800e538:	dd13      	ble.n	800e562 <get_nextdir+0xae>
		{
			little = walk_map[Pos.X][Pos.Y+1];			//ひとまず北が歩数が小さい事にする
 800e53a:	4b68      	ldr	r3, [pc, #416]	; (800e6dc <get_nextdir+0x228>)
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	4618      	mov	r0, r3
 800e540:	4b66      	ldr	r3, [pc, #408]	; (800e6dc <get_nextdir+0x228>)
 800e542:	785b      	ldrb	r3, [r3, #1]
 800e544:	1c5a      	adds	r2, r3, #1
 800e546:	4967      	ldr	r1, [pc, #412]	; (800e6e4 <get_nextdir+0x230>)
 800e548:	4603      	mov	r3, r0
 800e54a:	00db      	lsls	r3, r3, #3
 800e54c:	4403      	add	r3, r0
 800e54e:	4413      	add	r3, r2
 800e550:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e554:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = north;						//方向を保存
 800e556:	4b61      	ldr	r3, [pc, #388]	; (800e6dc <get_nextdir+0x228>)
 800e558:	2200      	movs	r2, #0
 800e55a:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	61bb      	str	r3, [r7, #24]
 800e560:	e019      	b.n	800e596 <get_nextdir+0xe2>
		}
		else if(walk_map[Pos.X][Pos.Y+1] == little)			//歩数が同じ場合は優先度から判断する
 800e562:	4b5e      	ldr	r3, [pc, #376]	; (800e6dc <get_nextdir+0x228>)
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	4618      	mov	r0, r3
 800e568:	4b5c      	ldr	r3, [pc, #368]	; (800e6dc <get_nextdir+0x228>)
 800e56a:	785b      	ldrb	r3, [r3, #1]
 800e56c:	1c5a      	adds	r2, r3, #1
 800e56e:	495d      	ldr	r1, [pc, #372]	; (800e6e4 <get_nextdir+0x230>)
 800e570:	4603      	mov	r3, r0
 800e572:	00db      	lsls	r3, r3, #3
 800e574:	4403      	add	r3, r0
 800e576:	4413      	add	r3, r2
 800e578:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e57c:	461a      	mov	r2, r3
 800e57e:	69fb      	ldr	r3, [r7, #28]
 800e580:	4293      	cmp	r3, r2
 800e582:	d108      	bne.n	800e596 <get_nextdir+0xe2>
		{
			if(priority < tmp_priority )				//優先度を評価
 800e584:	69ba      	ldr	r2, [r7, #24]
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	429a      	cmp	r2, r3
 800e58a:	da04      	bge.n	800e596 <get_nextdir+0xe2>
			{
				Pos.NextCar = north;					//方向を更新
 800e58c:	4b53      	ldr	r3, [pc, #332]	; (800e6dc <get_nextdir+0x228>)
 800e58e:	2200      	movs	r2, #0
 800e590:	72da      	strb	r2, [r3, #11]
				priority = tmp_priority;			//優先度を保存
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].east & mask) == NOWALL)			//東に壁がなければ
 800e596:	4b51      	ldr	r3, [pc, #324]	; (800e6dc <get_nextdir+0x228>)
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	4619      	mov	r1, r3
 800e59c:	4b4f      	ldr	r3, [pc, #316]	; (800e6dc <get_nextdir+0x228>)
 800e59e:	785b      	ldrb	r3, [r3, #1]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	4a4f      	ldr	r2, [pc, #316]	; (800e6e0 <get_nextdir+0x22c>)
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	00db      	lsls	r3, r3, #3
 800e5a8:	440b      	add	r3, r1
 800e5aa:	4403      	add	r3, r0
 800e5ac:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e5b0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	4013      	ands	r3, r2
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d148      	bne.n	800e652 <get_nextdir+0x19e>
	{
		tmp_priority = get_priority(Pos.X + 1, Pos.Y, east);	//優先度を算出
 800e5c0:	4b46      	ldr	r3, [pc, #280]	; (800e6dc <get_nextdir+0x228>)
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	1c58      	adds	r0, r3, #1
 800e5c6:	4b45      	ldr	r3, [pc, #276]	; (800e6dc <get_nextdir+0x228>)
 800e5c8:	785b      	ldrb	r3, [r3, #1]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	f7ff ff3b 	bl	800e448 <get_priority>
 800e5d2:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X + 1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800e5d4:	4b41      	ldr	r3, [pc, #260]	; (800e6dc <get_nextdir+0x228>)
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	1c5a      	adds	r2, r3, #1
 800e5da:	4b40      	ldr	r3, [pc, #256]	; (800e6dc <get_nextdir+0x228>)
 800e5dc:	785b      	ldrb	r3, [r3, #1]
 800e5de:	4618      	mov	r0, r3
 800e5e0:	4940      	ldr	r1, [pc, #256]	; (800e6e4 <get_nextdir+0x230>)
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	00db      	lsls	r3, r3, #3
 800e5e6:	4413      	add	r3, r2
 800e5e8:	4403      	add	r3, r0
 800e5ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	dd13      	ble.n	800e61e <get_nextdir+0x16a>
		{
			little = walk_map[Pos.X+1][Pos.Y];			//ひとまず東が歩数が小さい事にする
 800e5f6:	4b39      	ldr	r3, [pc, #228]	; (800e6dc <get_nextdir+0x228>)
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	1c5a      	adds	r2, r3, #1
 800e5fc:	4b37      	ldr	r3, [pc, #220]	; (800e6dc <get_nextdir+0x228>)
 800e5fe:	785b      	ldrb	r3, [r3, #1]
 800e600:	4618      	mov	r0, r3
 800e602:	4938      	ldr	r1, [pc, #224]	; (800e6e4 <get_nextdir+0x230>)
 800e604:	4613      	mov	r3, r2
 800e606:	00db      	lsls	r3, r3, #3
 800e608:	4413      	add	r3, r2
 800e60a:	4403      	add	r3, r0
 800e60c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e610:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = east;						//方向を保存
 800e612:	4b32      	ldr	r3, [pc, #200]	; (800e6dc <get_nextdir+0x228>)
 800e614:	2201      	movs	r2, #1
 800e616:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	61bb      	str	r3, [r7, #24]
 800e61c:	e019      	b.n	800e652 <get_nextdir+0x19e>
		}
		else if(walk_map[Pos.X + 1][Pos.Y] == little)			//歩数が同じ場合、優先度から判断
 800e61e:	4b2f      	ldr	r3, [pc, #188]	; (800e6dc <get_nextdir+0x228>)
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	1c5a      	adds	r2, r3, #1
 800e624:	4b2d      	ldr	r3, [pc, #180]	; (800e6dc <get_nextdir+0x228>)
 800e626:	785b      	ldrb	r3, [r3, #1]
 800e628:	4618      	mov	r0, r3
 800e62a:	492e      	ldr	r1, [pc, #184]	; (800e6e4 <get_nextdir+0x230>)
 800e62c:	4613      	mov	r3, r2
 800e62e:	00db      	lsls	r3, r3, #3
 800e630:	4413      	add	r3, r2
 800e632:	4403      	add	r3, r0
 800e634:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e638:	461a      	mov	r2, r3
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d108      	bne.n	800e652 <get_nextdir+0x19e>
		{
			if(priority < tmp_priority)				//優先度を評価
 800e640:	69ba      	ldr	r2, [r7, #24]
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	429a      	cmp	r2, r3
 800e646:	da04      	bge.n	800e652 <get_nextdir+0x19e>
			{
				Pos.NextCar = east;					//方向を保存
 800e648:	4b24      	ldr	r3, [pc, #144]	; (800e6dc <get_nextdir+0x228>)
 800e64a:	2201      	movs	r2, #1
 800e64c:	72da      	strb	r2, [r3, #11]
				priority = tmp_priority;			//優先度を保存
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].south & mask) == NOWALL)			//南に壁がなければ
 800e652:	4b22      	ldr	r3, [pc, #136]	; (800e6dc <get_nextdir+0x228>)
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	4619      	mov	r1, r3
 800e658:	4b20      	ldr	r3, [pc, #128]	; (800e6dc <get_nextdir+0x228>)
 800e65a:	785b      	ldrb	r3, [r3, #1]
 800e65c:	4618      	mov	r0, r3
 800e65e:	4a20      	ldr	r2, [pc, #128]	; (800e6e0 <get_nextdir+0x22c>)
 800e660:	460b      	mov	r3, r1
 800e662:	00db      	lsls	r3, r3, #3
 800e664:	440b      	add	r3, r1
 800e666:	4403      	add	r3, r0
 800e668:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e66c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e670:	b2db      	uxtb	r3, r3
 800e672:	461a      	mov	r2, r3
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	4013      	ands	r3, r2
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d14f      	bne.n	800e71c <get_nextdir+0x268>
	{
		tmp_priority = get_priority(Pos.X, Pos.Y - 1, south);	//優先度を算出
 800e67c:	4b17      	ldr	r3, [pc, #92]	; (800e6dc <get_nextdir+0x228>)
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	4618      	mov	r0, r3
 800e682:	4b16      	ldr	r3, [pc, #88]	; (800e6dc <get_nextdir+0x228>)
 800e684:	785b      	ldrb	r3, [r3, #1]
 800e686:	3b01      	subs	r3, #1
 800e688:	2202      	movs	r2, #2
 800e68a:	4619      	mov	r1, r3
 800e68c:	f7ff fedc 	bl	800e448 <get_priority>
 800e690:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X][Pos.Y - 1] < little)				//一番歩数が小さい方向を見つける
 800e692:	4b12      	ldr	r3, [pc, #72]	; (800e6dc <get_nextdir+0x228>)
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	4618      	mov	r0, r3
 800e698:	4b10      	ldr	r3, [pc, #64]	; (800e6dc <get_nextdir+0x228>)
 800e69a:	785b      	ldrb	r3, [r3, #1]
 800e69c:	1e5a      	subs	r2, r3, #1
 800e69e:	4911      	ldr	r1, [pc, #68]	; (800e6e4 <get_nextdir+0x230>)
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	00db      	lsls	r3, r3, #3
 800e6a4:	4403      	add	r3, r0
 800e6a6:	4413      	add	r3, r2
 800e6a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	dd19      	ble.n	800e6e8 <get_nextdir+0x234>
		{
			little = walk_map[Pos.X][Pos.Y-1];			//ひとまず南が歩数が小さい事にする
 800e6b4:	4b09      	ldr	r3, [pc, #36]	; (800e6dc <get_nextdir+0x228>)
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	4b08      	ldr	r3, [pc, #32]	; (800e6dc <get_nextdir+0x228>)
 800e6bc:	785b      	ldrb	r3, [r3, #1]
 800e6be:	1e5a      	subs	r2, r3, #1
 800e6c0:	4908      	ldr	r1, [pc, #32]	; (800e6e4 <get_nextdir+0x230>)
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	00db      	lsls	r3, r3, #3
 800e6c6:	4403      	add	r3, r0
 800e6c8:	4413      	add	r3, r2
 800e6ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e6ce:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = south;						//方向を保存
 800e6d0:	4b02      	ldr	r3, [pc, #8]	; (800e6dc <get_nextdir+0x228>)
 800e6d2:	2202      	movs	r2, #2
 800e6d4:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	61bb      	str	r3, [r7, #24]
 800e6da:	e01f      	b.n	800e71c <get_nextdir+0x268>
 800e6dc:	20000000 	.word	0x20000000
 800e6e0:	200006ec 	.word	0x200006ec
 800e6e4:	20000574 	.word	0x20000574
		}
		else if(walk_map[Pos.X][Pos.Y - 1] == little)			//歩数が同じ場合、優先度で評価
 800e6e8:	4b42      	ldr	r3, [pc, #264]	; (800e7f4 <get_nextdir+0x340>)
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	4b41      	ldr	r3, [pc, #260]	; (800e7f4 <get_nextdir+0x340>)
 800e6f0:	785b      	ldrb	r3, [r3, #1]
 800e6f2:	1e5a      	subs	r2, r3, #1
 800e6f4:	4940      	ldr	r1, [pc, #256]	; (800e7f8 <get_nextdir+0x344>)
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	00db      	lsls	r3, r3, #3
 800e6fa:	4403      	add	r3, r0
 800e6fc:	4413      	add	r3, r2
 800e6fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e702:	461a      	mov	r2, r3
 800e704:	69fb      	ldr	r3, [r7, #28]
 800e706:	4293      	cmp	r3, r2
 800e708:	d108      	bne.n	800e71c <get_nextdir+0x268>
		{
			if(priority < tmp_priority)				//優先度を評価
 800e70a:	69ba      	ldr	r2, [r7, #24]
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	429a      	cmp	r2, r3
 800e710:	da04      	bge.n	800e71c <get_nextdir+0x268>
			{
				Pos.NextCar = south;					//方向を保存
 800e712:	4b38      	ldr	r3, [pc, #224]	; (800e7f4 <get_nextdir+0x340>)
 800e714:	2202      	movs	r2, #2
 800e716:	72da      	strb	r2, [r3, #11]
				priority = tmp_priority;			//優先度を保存
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].west & mask) == NOWALL)			//西に壁がなければ
 800e71c:	4b35      	ldr	r3, [pc, #212]	; (800e7f4 <get_nextdir+0x340>)
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	4619      	mov	r1, r3
 800e722:	4b34      	ldr	r3, [pc, #208]	; (800e7f4 <get_nextdir+0x340>)
 800e724:	785b      	ldrb	r3, [r3, #1]
 800e726:	4618      	mov	r0, r3
 800e728:	4a34      	ldr	r2, [pc, #208]	; (800e7fc <get_nextdir+0x348>)
 800e72a:	460b      	mov	r3, r1
 800e72c:	00db      	lsls	r3, r3, #3
 800e72e:	440b      	add	r3, r1
 800e730:	4403      	add	r3, r0
 800e732:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e736:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	461a      	mov	r2, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4013      	ands	r3, r2
 800e742:	2b00      	cmp	r3, #0
 800e744:	d144      	bne.n	800e7d0 <get_nextdir+0x31c>
	{
		tmp_priority = get_priority(Pos.X - 1, Pos.Y, west);	//優先度を算出
 800e746:	4b2b      	ldr	r3, [pc, #172]	; (800e7f4 <get_nextdir+0x340>)
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	1e58      	subs	r0, r3, #1
 800e74c:	4b29      	ldr	r3, [pc, #164]	; (800e7f4 <get_nextdir+0x340>)
 800e74e:	785b      	ldrb	r3, [r3, #1]
 800e750:	2203      	movs	r2, #3
 800e752:	4619      	mov	r1, r3
 800e754:	f7ff fe78 	bl	800e448 <get_priority>
 800e758:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X-1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800e75a:	4b26      	ldr	r3, [pc, #152]	; (800e7f4 <get_nextdir+0x340>)
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	1e5a      	subs	r2, r3, #1
 800e760:	4b24      	ldr	r3, [pc, #144]	; (800e7f4 <get_nextdir+0x340>)
 800e762:	785b      	ldrb	r3, [r3, #1]
 800e764:	4618      	mov	r0, r3
 800e766:	4924      	ldr	r1, [pc, #144]	; (800e7f8 <get_nextdir+0x344>)
 800e768:	4613      	mov	r3, r2
 800e76a:	00db      	lsls	r3, r3, #3
 800e76c:	4413      	add	r3, r2
 800e76e:	4403      	add	r3, r0
 800e770:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e774:	461a      	mov	r2, r3
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	4293      	cmp	r3, r2
 800e77a:	dd13      	ble.n	800e7a4 <get_nextdir+0x2f0>
		{
			little = walk_map[Pos.X-1][Pos.Y];			//西が歩数が小さい
 800e77c:	4b1d      	ldr	r3, [pc, #116]	; (800e7f4 <get_nextdir+0x340>)
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	1e5a      	subs	r2, r3, #1
 800e782:	4b1c      	ldr	r3, [pc, #112]	; (800e7f4 <get_nextdir+0x340>)
 800e784:	785b      	ldrb	r3, [r3, #1]
 800e786:	4618      	mov	r0, r3
 800e788:	491b      	ldr	r1, [pc, #108]	; (800e7f8 <get_nextdir+0x344>)
 800e78a:	4613      	mov	r3, r2
 800e78c:	00db      	lsls	r3, r3, #3
 800e78e:	4413      	add	r3, r2
 800e790:	4403      	add	r3, r0
 800e792:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e796:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = west;						//方向を保存
 800e798:	4b16      	ldr	r3, [pc, #88]	; (800e7f4 <get_nextdir+0x340>)
 800e79a:	2203      	movs	r2, #3
 800e79c:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	61bb      	str	r3, [r7, #24]
 800e7a2:	e015      	b.n	800e7d0 <get_nextdir+0x31c>
		}
		else if(walk_map[Pos.X - 1][Pos.Y] == little)			//歩数が同じ場合、優先度で評価
 800e7a4:	4b13      	ldr	r3, [pc, #76]	; (800e7f4 <get_nextdir+0x340>)
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	1e5a      	subs	r2, r3, #1
 800e7aa:	4b12      	ldr	r3, [pc, #72]	; (800e7f4 <get_nextdir+0x340>)
 800e7ac:	785b      	ldrb	r3, [r3, #1]
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	4911      	ldr	r1, [pc, #68]	; (800e7f8 <get_nextdir+0x344>)
 800e7b2:	4613      	mov	r3, r2
 800e7b4:	00db      	lsls	r3, r3, #3
 800e7b6:	4413      	add	r3, r2
 800e7b8:	4403      	add	r3, r0
 800e7ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d104      	bne.n	800e7d0 <get_nextdir+0x31c>
		{
			Pos.NextCar = west;						//方向を保存
 800e7c6:	4b0b      	ldr	r3, [pc, #44]	; (800e7f4 <get_nextdir+0x340>)
 800e7c8:	2203      	movs	r2, #3
 800e7ca:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	61bb      	str	r3, [r7, #24]
		}
	}


	return ( (int)( ( 4 + Pos.NextCar - Pos.Car) % 4 ) );			//どっちに向かうべきかを返す。
 800e7d0:	4b08      	ldr	r3, [pc, #32]	; (800e7f4 <get_nextdir+0x340>)
 800e7d2:	7adb      	ldrb	r3, [r3, #11]
 800e7d4:	3304      	adds	r3, #4
 800e7d6:	4a07      	ldr	r2, [pc, #28]	; (800e7f4 <get_nextdir+0x340>)
 800e7d8:	7952      	ldrb	r2, [r2, #5]
 800e7da:	1a9b      	subs	r3, r3, r2
 800e7dc:	425a      	negs	r2, r3
 800e7de:	f003 0303 	and.w	r3, r3, #3
 800e7e2:	f002 0203 	and.w	r2, r2, #3
 800e7e6:	bf58      	it	pl
 800e7e8:	4253      	negpl	r3, r2
										//演算の意味はmytyedef.h内のenum宣言から。

}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3720      	adds	r7, #32
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	20000000 	.word	0x20000000
 800e7f8:	20000574 	.word	0x20000574
 800e7fc:	200006ec 	.word	0x200006ec

0800e800 <fast_run>:
void fast_run(int x, int y,int x2, int y2, char turn_mode, int mask)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	607a      	str	r2, [r7, #4]
 800e80c:	603b      	str	r3, [r7, #0]
//			Pos.X--;	//西を向いたときはX座標を減らす
//			break;
//
//	}

	while( !((x <= Pos.X && Pos.X <= x2) && (y <= Pos.Y && Pos.Y <= y2)) ){			//ゴールするまで繰り返す
 800e80e:	e053      	b.n	800e8b8 <fast_run+0xb8>
		Pos.Dir = get_nextdir(x,y,mask);//新しい区画に入ったところで、次の方向を求める。方向と方角がわかる。
 800e810:	69fa      	ldr	r2, [r7, #28]
 800e812:	68b9      	ldr	r1, [r7, #8]
 800e814:	68f8      	ldr	r0, [r7, #12]
 800e816:	f7ff fe4d 	bl	800e4b4 <get_nextdir>
 800e81a:	4603      	mov	r3, r0
 800e81c:	b2da      	uxtb	r2, r3
 800e81e:	4b34      	ldr	r3, [pc, #208]	; (800e8f0 <fast_run+0xf0>)
 800e820:	711a      	strb	r2, [r3, #4]
		//向いた方向によって自分の座標を更新する
		//printf("%d,%d\r\n",Pos.X,Pos.Y);
		switch(Pos.NextCar)//
 800e822:	4b33      	ldr	r3, [pc, #204]	; (800e8f0 <fast_run+0xf0>)
 800e824:	7adb      	ldrb	r3, [r3, #11]
 800e826:	2b03      	cmp	r3, #3
 800e828:	d836      	bhi.n	800e898 <fast_run+0x98>
 800e82a:	a201      	add	r2, pc, #4	; (adr r2, 800e830 <fast_run+0x30>)
 800e82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e830:	0800e841 	.word	0x0800e841
 800e834:	0800e857 	.word	0x0800e857
 800e838:	0800e86d 	.word	0x0800e86d
 800e83c:	0800e883 	.word	0x0800e883
		{
			case north:
				Pos.NextX = Pos.X;
 800e840:	4b2b      	ldr	r3, [pc, #172]	; (800e8f0 <fast_run+0xf0>)
 800e842:	781a      	ldrb	r2, [r3, #0]
 800e844:	4b2a      	ldr	r3, [pc, #168]	; (800e8f0 <fast_run+0xf0>)
 800e846:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y + 1;	//北を向いた時はY座標を増やす
 800e848:	4b29      	ldr	r3, [pc, #164]	; (800e8f0 <fast_run+0xf0>)
 800e84a:	785b      	ldrb	r3, [r3, #1]
 800e84c:	3301      	adds	r3, #1
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	4b27      	ldr	r3, [pc, #156]	; (800e8f0 <fast_run+0xf0>)
 800e852:	725a      	strb	r2, [r3, #9]
				break;
 800e854:	e020      	b.n	800e898 <fast_run+0x98>

			case east:
				Pos.NextX = Pos.X + 1;	//東を向いた時はX座標を増やす
 800e856:	4b26      	ldr	r3, [pc, #152]	; (800e8f0 <fast_run+0xf0>)
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	3301      	adds	r3, #1
 800e85c:	b2da      	uxtb	r2, r3
 800e85e:	4b24      	ldr	r3, [pc, #144]	; (800e8f0 <fast_run+0xf0>)
 800e860:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y;
 800e862:	4b23      	ldr	r3, [pc, #140]	; (800e8f0 <fast_run+0xf0>)
 800e864:	785a      	ldrb	r2, [r3, #1]
 800e866:	4b22      	ldr	r3, [pc, #136]	; (800e8f0 <fast_run+0xf0>)
 800e868:	725a      	strb	r2, [r3, #9]
				break;
 800e86a:	e015      	b.n	800e898 <fast_run+0x98>

			case south:
				Pos.NextX = Pos.X;
 800e86c:	4b20      	ldr	r3, [pc, #128]	; (800e8f0 <fast_run+0xf0>)
 800e86e:	781a      	ldrb	r2, [r3, #0]
 800e870:	4b1f      	ldr	r3, [pc, #124]	; (800e8f0 <fast_run+0xf0>)
 800e872:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y - 1;	//南を向いた時はY座標を減らす
 800e874:	4b1e      	ldr	r3, [pc, #120]	; (800e8f0 <fast_run+0xf0>)
 800e876:	785b      	ldrb	r3, [r3, #1]
 800e878:	3b01      	subs	r3, #1
 800e87a:	b2da      	uxtb	r2, r3
 800e87c:	4b1c      	ldr	r3, [pc, #112]	; (800e8f0 <fast_run+0xf0>)
 800e87e:	725a      	strb	r2, [r3, #9]
				break;
 800e880:	e00a      	b.n	800e898 <fast_run+0x98>

			case west:
				Pos.NextX = Pos.X - 1;	//西を向いたときはX座標を減らす
 800e882:	4b1b      	ldr	r3, [pc, #108]	; (800e8f0 <fast_run+0xf0>)
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	3b01      	subs	r3, #1
 800e888:	b2da      	uxtb	r2, r3
 800e88a:	4b19      	ldr	r3, [pc, #100]	; (800e8f0 <fast_run+0xf0>)
 800e88c:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y;
 800e88e:	4b18      	ldr	r3, [pc, #96]	; (800e8f0 <fast_run+0xf0>)
 800e890:	785a      	ldrb	r2, [r3, #1]
 800e892:	4b17      	ldr	r3, [pc, #92]	; (800e8f0 <fast_run+0xf0>)
 800e894:	725a      	strb	r2, [r3, #9]
				break;
 800e896:	bf00      	nop

		}
		SelectAction(turn_mode);
 800e898:	7e3b      	ldrb	r3, [r7, #24]
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7fc fb64 	bl	800af68 <SelectAction>
	 	Pos.X = Pos.NextX;
 800e8a0:	4b13      	ldr	r3, [pc, #76]	; (800e8f0 <fast_run+0xf0>)
 800e8a2:	7a1a      	ldrb	r2, [r3, #8]
 800e8a4:	4b12      	ldr	r3, [pc, #72]	; (800e8f0 <fast_run+0xf0>)
 800e8a6:	701a      	strb	r2, [r3, #0]
	    Pos.Y = Pos.NextY;
 800e8a8:	4b11      	ldr	r3, [pc, #68]	; (800e8f0 <fast_run+0xf0>)
 800e8aa:	7a5a      	ldrb	r2, [r3, #9]
 800e8ac:	4b10      	ldr	r3, [pc, #64]	; (800e8f0 <fast_run+0xf0>)
 800e8ae:	705a      	strb	r2, [r3, #1]
		Pos.Car = Pos.NextCar;	//自分の向きを修正
 800e8b0:	4b0f      	ldr	r3, [pc, #60]	; (800e8f0 <fast_run+0xf0>)
 800e8b2:	7ada      	ldrb	r2, [r3, #11]
 800e8b4:	4b0e      	ldr	r3, [pc, #56]	; (800e8f0 <fast_run+0xf0>)
 800e8b6:	715a      	strb	r2, [r3, #5]
	while( !((x <= Pos.X && Pos.X <= x2) && (y <= Pos.Y && Pos.Y <= y2)) ){			//ゴールするまで繰り返す
 800e8b8:	4b0d      	ldr	r3, [pc, #52]	; (800e8f0 <fast_run+0xf0>)
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	461a      	mov	r2, r3
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	dca5      	bgt.n	800e810 <fast_run+0x10>
 800e8c4:	4b0a      	ldr	r3, [pc, #40]	; (800e8f0 <fast_run+0xf0>)
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	db9f      	blt.n	800e810 <fast_run+0x10>
 800e8d0:	4b07      	ldr	r3, [pc, #28]	; (800e8f0 <fast_run+0xf0>)
 800e8d2:	785b      	ldrb	r3, [r3, #1]
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	dc99      	bgt.n	800e810 <fast_run+0x10>
 800e8dc:	4b04      	ldr	r3, [pc, #16]	; (800e8f0 <fast_run+0xf0>)
 800e8de:	785b      	ldrb	r3, [r3, #1]
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	db93      	blt.n	800e810 <fast_run+0x10>
//		Pos.Car = Pos.NextCar;	//自分の向きを修正
//
//
	}
//	straight(SECTION*straight_count,FAST_ACCEL,FAST_SPEED,0.0);
}
 800e8e8:	bf00      	nop
 800e8ea:	3710      	adds	r7, #16
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	20000000 	.word	0x20000000

0800e8f4 <__io_putchar>:
	#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#define GETCHAR_PROTOTYPE int f getc(FILE* f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800e8fc:	1d39      	adds	r1, r7, #4
 800e8fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e902:	2201      	movs	r2, #1
 800e904:	4803      	ldr	r0, [pc, #12]	; (800e914 <__io_putchar+0x20>)
 800e906:	f007 f8c9 	bl	8015a9c <HAL_UART_Transmit>
	return ch;
 800e90a:	687b      	ldr	r3, [r7, #4]
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3708      	adds	r7, #8
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}
 800e914:	20000940 	.word	0x20000940

0800e918 <__io_getchar>:
int __io_getchar(void) {
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
HAL_StatusTypeDef Status = HAL_BUSY;
 800e91e:	2302      	movs	r3, #2
 800e920:	71fb      	strb	r3, [r7, #7]
uint8_t Data;

while(Status != HAL_OK)
 800e922:	e007      	b.n	800e934 <__io_getchar+0x1c>
{
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800e924:	1db9      	adds	r1, r7, #6
 800e926:	230a      	movs	r3, #10
 800e928:	2201      	movs	r2, #1
 800e92a:	4806      	ldr	r0, [pc, #24]	; (800e944 <__io_getchar+0x2c>)
 800e92c:	f007 f94f 	bl	8015bce <HAL_UART_Receive>
 800e930:	4603      	mov	r3, r0
 800e932:	71fb      	strb	r3, [r7, #7]
while(Status != HAL_OK)
 800e934:	79fb      	ldrb	r3, [r7, #7]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1f4      	bne.n	800e924 <__io_getchar+0xc>
//{
//	return 0;
//	break;
//}
}
return(Data);
 800e93a:	79bb      	ldrb	r3, [r7, #6]
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	20000940 	.word	0x20000940

0800e948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e94e:	f002 fd91 	bl	8011474 <HAL_Init>

  /* USER CODE BEGIN Init */

  //バッ�?リチェ�?ク
  MX_GPIO_Init();
 800e952:	f000 fcfd 	bl	800f350 <MX_GPIO_Init>
  MX_DMA_Init();
 800e956:	f000 fcd3 	bl	800f300 <MX_DMA_Init>
  MX_ADC1_Init();
 800e95a:	f000 f917 	bl	800eb8c <MX_ADC1_Init>
  MX_ADC2_Init();
 800e95e:	f000 f983 	bl	800ec68 <MX_ADC2_Init>

  ADCStart();
 800e962:	f001 fa15 	bl	800fd90 <ADCStart>
  BatteryCheck( (int)adc1[2] );
 800e966:	4b4f      	ldr	r3, [pc, #316]	; (800eaa4 <main+0x15c>)
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	4618      	mov	r0, r3
 800e96c:	f002 fc72 	bl	8011254 <BatteryCheck>
  ADCStop();
 800e970:	f001 fa2e 	bl	800fdd0 <ADCStop>

  //モード選�? //スイ�?チが押されるまでエンコー�?の処�?を受け付け�?
  MX_TIM3_Init();
 800e974:	f000 fad4 	bl	800ef20 <MX_TIM3_Init>

  int8_t startup_mode;
  ModeSelect(0, 7, &startup_mode);
 800e978:	1dfb      	adds	r3, r7, #7
 800e97a:	461a      	mov	r2, r3
 800e97c:	2107      	movs	r1, #7
 800e97e:	2000      	movs	r0, #0
 800e980:	f002 fcc0 	bl	8011304 <ModeSelect>
  Signal( startup_mode );
 800e984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e988:	4618      	mov	r0, r3
 800e98a:	f002 fc43 	bl	8011214 <Signal>
  //MAX45mAでモード選択できる

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e98e:	f000 f893 	bl	800eab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e992:	f000 fcdd 	bl	800f350 <MX_GPIO_Init>
  MX_DMA_Init();
 800e996:	f000 fcb3 	bl	800f300 <MX_DMA_Init>
  MX_ADC1_Init();
 800e99a:	f000 f8f7 	bl	800eb8c <MX_ADC1_Init>
  MX_ADC2_Init();
 800e99e:	f000 f963 	bl	800ec68 <MX_ADC2_Init>
  MX_TIM3_Init();
 800e9a2:	f000 fabd 	bl	800ef20 <MX_TIM3_Init>
  MX_TIM2_Init();
 800e9a6:	f000 fa45 	bl	800ee34 <MX_TIM2_Init>
  MX_SPI3_Init();
 800e9aa:	f000 f9bd 	bl	800ed28 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800e9ae:	f000 fc7d 	bl	800f2ac <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800e9b2:	f000 fb5d 	bl	800f070 <MX_TIM5_Init>
  MX_TIM4_Init();
 800e9b6:	f000 fb07 	bl	800efc8 <MX_TIM4_Init>
  MX_TIM8_Init();
 800e9ba:	f000 fbcf 	bl	800f15c <MX_TIM8_Init>
  MX_TIM1_Init();
 800e9be:	f000 f9e9 	bl	800ed94 <MX_TIM1_Init>

  }

#endif

  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);//1200,0);//2430,0);//7.3,1215,0);//40kHzの//14.6, 2430,0);//(20khzのと??��?��?);//1200,0.0);//2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);////D0.0036 //I2430くら 36.6*0.6=18+3.96
 800e9c2:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800eaa8 <main+0x160>
 800e9c6:	eddf 0a39 	vldr	s1, [pc, #228]	; 800eaac <main+0x164>
 800e9ca:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800eab0 <main+0x168>
 800e9ce:	2004      	movs	r0, #4
 800e9d0:	f002 fa52 	bl	8010e78 <PIDSetGain>
  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);// 1200,0);//2430,0);//7.3,1215,0);//14.6, 2430,0);//1200,0.0);//, 2430,0);//17.5//2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);//I150,
 800e9d4:	ed9f 1a34 	vldr	s2, [pc, #208]	; 800eaa8 <main+0x160>
 800e9d8:	eddf 0a34 	vldr	s1, [pc, #208]	; 800eaac <main+0x164>
 800e9dc:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800eab0 <main+0x168>
 800e9e0:	2005      	movs	r0, #5
 800e9e2:	f002 fa49 	bl	8010e78 <PIDSetGain>
  //PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
  PIDSetGain(A_VELO_PID, 12,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800e9e6:	ed9f 1a33 	vldr	s2, [pc, #204]	; 800eab4 <main+0x16c>
 800e9ea:	eddf 0a32 	vldr	s1, [pc, #200]	; 800eab4 <main+0x16c>
 800e9ee:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e9f2:	2000      	movs	r0, #0
 800e9f4:	f002 fa40 	bl	8010e78 <PIDSetGain>
  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800e9f8:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 800eab4 <main+0x16c>
 800e9fc:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800eab4 <main+0x16c>
 800ea00:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800eab0 <main+0x168>
 800ea04:	2008      	movs	r0, #8
 800ea06:	f002 fa37 	bl	8010e78 <PIDSetGain>
  PIDSetGain(D_WALL_PID, 6, 0, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800ea0a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800eab4 <main+0x16c>
 800ea0e:	eddf 0a29 	vldr	s1, [pc, #164]	; 800eab4 <main+0x16c>
 800ea12:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800ea16:	2001      	movs	r0, #1
 800ea18:	f002 fa2e 	bl	8010e78 <PIDSetGain>
  PIDSetGain(L_WALL_PID, 12,0,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800ea1c:	ed9f 1a25 	vldr	s2, [pc, #148]	; 800eab4 <main+0x16c>
 800ea20:	eddf 0a24 	vldr	s1, [pc, #144]	; 800eab4 <main+0x16c>
 800ea24:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800ea28:	2002      	movs	r0, #2
 800ea2a:	f002 fa25 	bl	8010e78 <PIDSetGain>
  PIDSetGain(R_WALL_PID, 12,0,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800ea2e:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800eab4 <main+0x16c>
 800ea32:	eddf 0a20 	vldr	s1, [pc, #128]	; 800eab4 <main+0x16c>
 800ea36:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800ea3a:	2003      	movs	r0, #3
 800ea3c:	f002 fa1c 	bl	8010e78 <PIDSetGain>

  while (1)
  {
	  switch( startup_mode )
 800ea40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ea44:	2b07      	cmp	r3, #7
 800ea46:	d82b      	bhi.n	800eaa0 <main+0x158>
 800ea48:	a201      	add	r2, pc, #4	; (adr r2, 800ea50 <main+0x108>)
 800ea4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea4e:	bf00      	nop
 800ea50:	0800ea71 	.word	0x0800ea71
 800ea54:	0800ea77 	.word	0x0800ea77
 800ea58:	0800ea7d 	.word	0x0800ea7d
 800ea5c:	0800ea83 	.word	0x0800ea83
 800ea60:	0800ea89 	.word	0x0800ea89
 800ea64:	0800ea8f 	.word	0x0800ea8f
 800ea68:	0800ea95 	.word	0x0800ea95
 800ea6c:	0800ea9b 	.word	0x0800ea9b
	  {
	  case PARAMETERSETTING:

		  ParameterSetting();
 800ea70:	f7fe f822 	bl	800cab8 <ParameterSetting>
		//wall_flash_print();
		  break;
 800ea74:	e015      	b.n	800eaa2 <main+0x15a>
	  case 1:
		  GainTestRWall();
 800ea76:	f7fe f827 	bl	800cac8 <GainTestRWall>
		  break;
 800ea7a:	e012      	b.n	800eaa2 <main+0x15a>
	  case GAINTEST:
		  GainTestDWall();
 800ea7c:	f7fe f860 	bl	800cb40 <GainTestDWall>
		  break;
 800ea80:	e00f      	b.n	800eaa2 <main+0x15a>
	  case DEBUGGER:
		  Debug();
 800ea82:	f7fd ff8d 	bl	800c9a0 <Debug>
		  break;
 800ea86:	e00c      	b.n	800eaa2 <main+0x15a>
	  case FASTEST_RUN:
		  //GainTestLWall();
		  FastestRun();
 800ea88:	f7fe f996 	bl	800cdb8 <FastestRun>
		  break;
 800ea8c:	e009      	b.n	800eaa2 <main+0x15a>
	  case 5:
		  GainTestAVelo();
 800ea8e:	f7fe f8c1 	bl	800cc14 <GainTestAVelo>
		  break;
 800ea92:	e006      	b.n	800eaa2 <main+0x15a>
	  case EXPLORE:
		  Explore();
 800ea94:	f7fe fb3a 	bl	800d10c <Explore>
		  break;
 800ea98:	e003      	b.n	800eaa2 <main+0x15a>
	  case WRITINGFREE:
		  WritingFree();
 800ea9a:	f7fe f8fb 	bl	800cc94 <WritingFree>
		  break;
 800ea9e:	e000      	b.n	800eaa2 <main+0x15a>
	  default :
		  break;
 800eaa0:	bf00      	nop
	  switch( startup_mode )
 800eaa2:	e7cd      	b.n	800ea40 <main+0xf8>
 800eaa4:	200002c0 	.word	0x200002c0
 800eaa8:	3a83126f 	.word	0x3a83126f
 800eaac:	452f0000 	.word	0x452f0000
 800eab0:	4169999a 	.word	0x4169999a
 800eab4:	00000000 	.word	0x00000000

0800eab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b094      	sub	sp, #80	; 0x50
 800eabc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800eabe:	f107 0320 	add.w	r3, r7, #32
 800eac2:	2230      	movs	r2, #48	; 0x30
 800eac4:	2100      	movs	r1, #0
 800eac6:	4618      	mov	r0, r3
 800eac8:	f007 fd6d 	bl	80165a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800eacc:	f107 030c 	add.w	r3, r7, #12
 800ead0:	2200      	movs	r2, #0
 800ead2:	601a      	str	r2, [r3, #0]
 800ead4:	605a      	str	r2, [r3, #4]
 800ead6:	609a      	str	r2, [r3, #8]
 800ead8:	60da      	str	r2, [r3, #12]
 800eada:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800eadc:	2300      	movs	r3, #0
 800eade:	60bb      	str	r3, [r7, #8]
 800eae0:	4b28      	ldr	r3, [pc, #160]	; (800eb84 <SystemClock_Config+0xcc>)
 800eae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eae4:	4a27      	ldr	r2, [pc, #156]	; (800eb84 <SystemClock_Config+0xcc>)
 800eae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eaea:	6413      	str	r3, [r2, #64]	; 0x40
 800eaec:	4b25      	ldr	r3, [pc, #148]	; (800eb84 <SystemClock_Config+0xcc>)
 800eaee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eaf4:	60bb      	str	r3, [r7, #8]
 800eaf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800eaf8:	2300      	movs	r3, #0
 800eafa:	607b      	str	r3, [r7, #4]
 800eafc:	4b22      	ldr	r3, [pc, #136]	; (800eb88 <SystemClock_Config+0xd0>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4a21      	ldr	r2, [pc, #132]	; (800eb88 <SystemClock_Config+0xd0>)
 800eb02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eb06:	6013      	str	r3, [r2, #0]
 800eb08:	4b1f      	ldr	r3, [pc, #124]	; (800eb88 <SystemClock_Config+0xd0>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb10:	607b      	str	r3, [r7, #4]
 800eb12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800eb14:	2301      	movs	r3, #1
 800eb16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800eb18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800eb1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800eb1e:	2302      	movs	r3, #2
 800eb20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800eb22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800eb26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800eb28:	2304      	movs	r3, #4
 800eb2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800eb2c:	23a8      	movs	r3, #168	; 0xa8
 800eb2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800eb30:	2302      	movs	r3, #2
 800eb32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800eb34:	2304      	movs	r3, #4
 800eb36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800eb38:	f107 0320 	add.w	r3, r7, #32
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f004 fa11 	bl	8012f64 <HAL_RCC_OscConfig>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d001      	beq.n	800eb4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800eb48:	f000 fcc8 	bl	800f4dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800eb4c:	230f      	movs	r3, #15
 800eb4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800eb50:	2302      	movs	r3, #2
 800eb52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800eb54:	2300      	movs	r3, #0
 800eb56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800eb58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800eb5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800eb5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800eb64:	f107 030c 	add.w	r3, r7, #12
 800eb68:	2105      	movs	r1, #5
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f004 fc6a 	bl	8013444 <HAL_RCC_ClockConfig>
 800eb70:	4603      	mov	r3, r0
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d001      	beq.n	800eb7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800eb76:	f000 fcb1 	bl	800f4dc <Error_Handler>
  }
}
 800eb7a:	bf00      	nop
 800eb7c:	3750      	adds	r7, #80	; 0x50
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	40023800 	.word	0x40023800
 800eb88:	40007000 	.word	0x40007000

0800eb8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800eb92:	463b      	mov	r3, r7
 800eb94:	2200      	movs	r2, #0
 800eb96:	601a      	str	r2, [r3, #0]
 800eb98:	605a      	str	r2, [r3, #4]
 800eb9a:	609a      	str	r2, [r3, #8]
 800eb9c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800eb9e:	4b2f      	ldr	r3, [pc, #188]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800eba0:	4a2f      	ldr	r2, [pc, #188]	; (800ec60 <MX_ADC1_Init+0xd4>)
 800eba2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800eba4:	4b2d      	ldr	r3, [pc, #180]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800eba6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ebaa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ebac:	4b2b      	ldr	r3, [pc, #172]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800ebae:	2200      	movs	r2, #0
 800ebb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800ebb2:	4b2a      	ldr	r3, [pc, #168]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800ebb8:	4b28      	ldr	r3, [pc, #160]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800ebba:	2201      	movs	r2, #1
 800ebbc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ebbe:	4b27      	ldr	r3, [pc, #156]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ebc6:	4b25      	ldr	r3, [pc, #148]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800ebc8:	2200      	movs	r2, #0
 800ebca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ebcc:	4b23      	ldr	r3, [pc, #140]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800ebce:	4a25      	ldr	r2, [pc, #148]	; (800ec64 <MX_ADC1_Init+0xd8>)
 800ebd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ebd2:	4b22      	ldr	r3, [pc, #136]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800ebd8:	4b20      	ldr	r3, [pc, #128]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800ebda:	2203      	movs	r2, #3
 800ebdc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800ebde:	4b1f      	ldr	r3, [pc, #124]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ebe6:	4b1d      	ldr	r3, [pc, #116]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800ebe8:	2201      	movs	r2, #1
 800ebea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ebec:	481b      	ldr	r0, [pc, #108]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800ebee:	f002 fcd5 	bl	801159c <HAL_ADC_Init>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d001      	beq.n	800ebfc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800ebf8:	f000 fc70 	bl	800f4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800ebfc:	230a      	movs	r3, #10
 800ebfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ec00:	2301      	movs	r3, #1
 800ec02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800ec04:	2303      	movs	r3, #3
 800ec06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ec08:	463b      	mov	r3, r7
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	4813      	ldr	r0, [pc, #76]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800ec0e:	f002 fe63 	bl	80118d8 <HAL_ADC_ConfigChannel>
 800ec12:	4603      	mov	r3, r0
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d001      	beq.n	800ec1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800ec18:	f000 fc60 	bl	800f4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800ec1c:	230e      	movs	r3, #14
 800ec1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800ec20:	2302      	movs	r3, #2
 800ec22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ec24:	463b      	mov	r3, r7
 800ec26:	4619      	mov	r1, r3
 800ec28:	480c      	ldr	r0, [pc, #48]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800ec2a:	f002 fe55 	bl	80118d8 <HAL_ADC_ConfigChannel>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d001      	beq.n	800ec38 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800ec34:	f000 fc52 	bl	800f4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800ec38:	2309      	movs	r3, #9
 800ec3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800ec3c:	2303      	movs	r3, #3
 800ec3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ec40:	463b      	mov	r3, r7
 800ec42:	4619      	mov	r1, r3
 800ec44:	4805      	ldr	r0, [pc, #20]	; (800ec5c <MX_ADC1_Init+0xd0>)
 800ec46:	f002 fe47 	bl	80118d8 <HAL_ADC_ConfigChannel>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d001      	beq.n	800ec54 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800ec50:	f000 fc44 	bl	800f4dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800ec54:	bf00      	nop
 800ec56:	3710      	adds	r7, #16
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	200008f8 	.word	0x200008f8
 800ec60:	40012000 	.word	0x40012000
 800ec64:	0f000001 	.word	0x0f000001

0800ec68 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ec6e:	463b      	mov	r3, r7
 800ec70:	2200      	movs	r2, #0
 800ec72:	601a      	str	r2, [r3, #0]
 800ec74:	605a      	str	r2, [r3, #4]
 800ec76:	609a      	str	r2, [r3, #8]
 800ec78:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800ec7a:	4b28      	ldr	r3, [pc, #160]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800ec7c:	4a28      	ldr	r2, [pc, #160]	; (800ed20 <MX_ADC2_Init+0xb8>)
 800ec7e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800ec80:	4b26      	ldr	r3, [pc, #152]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800ec82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ec86:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800ec88:	4b24      	ldr	r3, [pc, #144]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800ec8e:	4b23      	ldr	r3, [pc, #140]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800ec90:	2201      	movs	r2, #1
 800ec92:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800ec94:	4b21      	ldr	r3, [pc, #132]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800ec96:	2201      	movs	r2, #1
 800ec98:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800ec9a:	4b20      	ldr	r3, [pc, #128]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800eca2:	4b1e      	ldr	r3, [pc, #120]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800eca4:	2200      	movs	r2, #0
 800eca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800eca8:	4b1c      	ldr	r3, [pc, #112]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800ecaa:	4a1e      	ldr	r2, [pc, #120]	; (800ed24 <MX_ADC2_Init+0xbc>)
 800ecac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ecae:	4b1b      	ldr	r3, [pc, #108]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800ecb4:	4b19      	ldr	r3, [pc, #100]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800ecb6:	2202      	movs	r2, #2
 800ecb8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800ecba:	4b18      	ldr	r3, [pc, #96]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ecc2:	4b16      	ldr	r3, [pc, #88]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800ecc8:	4814      	ldr	r0, [pc, #80]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800ecca:	f002 fc67 	bl	801159c <HAL_ADC_Init>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d001      	beq.n	800ecd8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800ecd4:	f000 fc02 	bl	800f4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800ecd8:	230b      	movs	r3, #11
 800ecda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800ece0:	2303      	movs	r3, #3
 800ece2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ece4:	463b      	mov	r3, r7
 800ece6:	4619      	mov	r1, r3
 800ece8:	480c      	ldr	r0, [pc, #48]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800ecea:	f002 fdf5 	bl	80118d8 <HAL_ADC_ConfigChannel>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d001      	beq.n	800ecf8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800ecf4:	f000 fbf2 	bl	800f4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800ecf8:	230f      	movs	r3, #15
 800ecfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800ecfc:	2302      	movs	r3, #2
 800ecfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ed00:	463b      	mov	r3, r7
 800ed02:	4619      	mov	r1, r3
 800ed04:	4805      	ldr	r0, [pc, #20]	; (800ed1c <MX_ADC2_Init+0xb4>)
 800ed06:	f002 fde7 	bl	80118d8 <HAL_ADC_ConfigChannel>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d001      	beq.n	800ed14 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800ed10:	f000 fbe4 	bl	800f4dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800ed14:	bf00      	nop
 800ed16:	3710      	adds	r7, #16
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}
 800ed1c:	20000818 	.word	0x20000818
 800ed20:	40012100 	.word	0x40012100
 800ed24:	0f000001 	.word	0x0f000001

0800ed28 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800ed2c:	4b17      	ldr	r3, [pc, #92]	; (800ed8c <MX_SPI3_Init+0x64>)
 800ed2e:	4a18      	ldr	r2, [pc, #96]	; (800ed90 <MX_SPI3_Init+0x68>)
 800ed30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800ed32:	4b16      	ldr	r3, [pc, #88]	; (800ed8c <MX_SPI3_Init+0x64>)
 800ed34:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ed38:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800ed3a:	4b14      	ldr	r3, [pc, #80]	; (800ed8c <MX_SPI3_Init+0x64>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800ed40:	4b12      	ldr	r3, [pc, #72]	; (800ed8c <MX_SPI3_Init+0x64>)
 800ed42:	2200      	movs	r2, #0
 800ed44:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800ed46:	4b11      	ldr	r3, [pc, #68]	; (800ed8c <MX_SPI3_Init+0x64>)
 800ed48:	2202      	movs	r2, #2
 800ed4a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800ed4c:	4b0f      	ldr	r3, [pc, #60]	; (800ed8c <MX_SPI3_Init+0x64>)
 800ed4e:	2201      	movs	r2, #1
 800ed50:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800ed52:	4b0e      	ldr	r3, [pc, #56]	; (800ed8c <MX_SPI3_Init+0x64>)
 800ed54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed58:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800ed5a:	4b0c      	ldr	r3, [pc, #48]	; (800ed8c <MX_SPI3_Init+0x64>)
 800ed5c:	2228      	movs	r2, #40	; 0x28
 800ed5e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ed60:	4b0a      	ldr	r3, [pc, #40]	; (800ed8c <MX_SPI3_Init+0x64>)
 800ed62:	2200      	movs	r2, #0
 800ed64:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800ed66:	4b09      	ldr	r3, [pc, #36]	; (800ed8c <MX_SPI3_Init+0x64>)
 800ed68:	2200      	movs	r2, #0
 800ed6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ed6c:	4b07      	ldr	r3, [pc, #28]	; (800ed8c <MX_SPI3_Init+0x64>)
 800ed6e:	2200      	movs	r2, #0
 800ed70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800ed72:	4b06      	ldr	r3, [pc, #24]	; (800ed8c <MX_SPI3_Init+0x64>)
 800ed74:	220a      	movs	r2, #10
 800ed76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800ed78:	4804      	ldr	r0, [pc, #16]	; (800ed8c <MX_SPI3_Init+0x64>)
 800ed7a:	f004 fd55 	bl	8013828 <HAL_SPI_Init>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d001      	beq.n	800ed88 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800ed84:	f000 fbaa 	bl	800f4dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800ed88:	bf00      	nop
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	200008a0 	.word	0x200008a0
 800ed90:	40003c00 	.word	0x40003c00

0800ed94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b086      	sub	sp, #24
 800ed98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ed9a:	f107 0308 	add.w	r3, r7, #8
 800ed9e:	2200      	movs	r2, #0
 800eda0:	601a      	str	r2, [r3, #0]
 800eda2:	605a      	str	r2, [r3, #4]
 800eda4:	609a      	str	r2, [r3, #8]
 800eda6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eda8:	463b      	mov	r3, r7
 800edaa:	2200      	movs	r2, #0
 800edac:	601a      	str	r2, [r3, #0]
 800edae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800edb0:	4b1e      	ldr	r3, [pc, #120]	; (800ee2c <MX_TIM1_Init+0x98>)
 800edb2:	4a1f      	ldr	r2, [pc, #124]	; (800ee30 <MX_TIM1_Init+0x9c>)
 800edb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800edb6:	4b1d      	ldr	r3, [pc, #116]	; (800ee2c <MX_TIM1_Init+0x98>)
 800edb8:	22a7      	movs	r2, #167	; 0xa7
 800edba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800edbc:	4b1b      	ldr	r3, [pc, #108]	; (800ee2c <MX_TIM1_Init+0x98>)
 800edbe:	2200      	movs	r2, #0
 800edc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800edc2:	4b1a      	ldr	r3, [pc, #104]	; (800ee2c <MX_TIM1_Init+0x98>)
 800edc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800edc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800edca:	4b18      	ldr	r3, [pc, #96]	; (800ee2c <MX_TIM1_Init+0x98>)
 800edcc:	2200      	movs	r2, #0
 800edce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800edd0:	4b16      	ldr	r3, [pc, #88]	; (800ee2c <MX_TIM1_Init+0x98>)
 800edd2:	2200      	movs	r2, #0
 800edd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800edd6:	4b15      	ldr	r3, [pc, #84]	; (800ee2c <MX_TIM1_Init+0x98>)
 800edd8:	2200      	movs	r2, #0
 800edda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800eddc:	4813      	ldr	r0, [pc, #76]	; (800ee2c <MX_TIM1_Init+0x98>)
 800edde:	f005 fa77 	bl	80142d0 <HAL_TIM_Base_Init>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d001      	beq.n	800edec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800ede8:	f000 fb78 	bl	800f4dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800edec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800edf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800edf2:	f107 0308 	add.w	r3, r7, #8
 800edf6:	4619      	mov	r1, r3
 800edf8:	480c      	ldr	r0, [pc, #48]	; (800ee2c <MX_TIM1_Init+0x98>)
 800edfa:	f006 f841 	bl	8014e80 <HAL_TIM_ConfigClockSource>
 800edfe:	4603      	mov	r3, r0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d001      	beq.n	800ee08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800ee04:	f000 fb6a 	bl	800f4dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ee10:	463b      	mov	r3, r7
 800ee12:	4619      	mov	r1, r3
 800ee14:	4805      	ldr	r0, [pc, #20]	; (800ee2c <MX_TIM1_Init+0x98>)
 800ee16:	f006 fced 	bl	80157f4 <HAL_TIMEx_MasterConfigSynchronization>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d001      	beq.n	800ee24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800ee20:	f000 fb5c 	bl	800f4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800ee24:	bf00      	nop
 800ee26:	3718      	adds	r7, #24
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	200009e0 	.word	0x200009e0
 800ee30:	40010000 	.word	0x40010000

0800ee34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b08e      	sub	sp, #56	; 0x38
 800ee38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ee3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee3e:	2200      	movs	r2, #0
 800ee40:	601a      	str	r2, [r3, #0]
 800ee42:	605a      	str	r2, [r3, #4]
 800ee44:	609a      	str	r2, [r3, #8]
 800ee46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ee48:	f107 0320 	add.w	r3, r7, #32
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	601a      	str	r2, [r3, #0]
 800ee50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ee52:	1d3b      	adds	r3, r7, #4
 800ee54:	2200      	movs	r2, #0
 800ee56:	601a      	str	r2, [r3, #0]
 800ee58:	605a      	str	r2, [r3, #4]
 800ee5a:	609a      	str	r2, [r3, #8]
 800ee5c:	60da      	str	r2, [r3, #12]
 800ee5e:	611a      	str	r2, [r3, #16]
 800ee60:	615a      	str	r2, [r3, #20]
 800ee62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ee64:	4b2d      	ldr	r3, [pc, #180]	; (800ef1c <MX_TIM2_Init+0xe8>)
 800ee66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ee6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800ee6c:	4b2b      	ldr	r3, [pc, #172]	; (800ef1c <MX_TIM2_Init+0xe8>)
 800ee6e:	2200      	movs	r2, #0
 800ee70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ee72:	4b2a      	ldr	r3, [pc, #168]	; (800ef1c <MX_TIM2_Init+0xe8>)
 800ee74:	2200      	movs	r2, #0
 800ee76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800ee78:	4b28      	ldr	r3, [pc, #160]	; (800ef1c <MX_TIM2_Init+0xe8>)
 800ee7a:	f241 0267 	movw	r2, #4199	; 0x1067
 800ee7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ee80:	4b26      	ldr	r3, [pc, #152]	; (800ef1c <MX_TIM2_Init+0xe8>)
 800ee82:	2200      	movs	r2, #0
 800ee84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ee86:	4b25      	ldr	r3, [pc, #148]	; (800ef1c <MX_TIM2_Init+0xe8>)
 800ee88:	2200      	movs	r2, #0
 800ee8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800ee8c:	4823      	ldr	r0, [pc, #140]	; (800ef1c <MX_TIM2_Init+0xe8>)
 800ee8e:	f005 fa1f 	bl	80142d0 <HAL_TIM_Base_Init>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d001      	beq.n	800ee9c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800ee98:	f000 fb20 	bl	800f4dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ee9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eea0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800eea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eea6:	4619      	mov	r1, r3
 800eea8:	481c      	ldr	r0, [pc, #112]	; (800ef1c <MX_TIM2_Init+0xe8>)
 800eeaa:	f005 ffe9 	bl	8014e80 <HAL_TIM_ConfigClockSource>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d001      	beq.n	800eeb8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800eeb4:	f000 fb12 	bl	800f4dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800eeb8:	4818      	ldr	r0, [pc, #96]	; (800ef1c <MX_TIM2_Init+0xe8>)
 800eeba:	f005 fbd7 	bl	801466c <HAL_TIM_PWM_Init>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d001      	beq.n	800eec8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800eec4:	f000 fb0a 	bl	800f4dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800eec8:	2300      	movs	r3, #0
 800eeca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800eecc:	2300      	movs	r3, #0
 800eece:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800eed0:	f107 0320 	add.w	r3, r7, #32
 800eed4:	4619      	mov	r1, r3
 800eed6:	4811      	ldr	r0, [pc, #68]	; (800ef1c <MX_TIM2_Init+0xe8>)
 800eed8:	f006 fc8c 	bl	80157f4 <HAL_TIMEx_MasterConfigSynchronization>
 800eedc:	4603      	mov	r3, r0
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d001      	beq.n	800eee6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800eee2:	f000 fafb 	bl	800f4dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800eee6:	2360      	movs	r3, #96	; 0x60
 800eee8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800eeea:	2300      	movs	r3, #0
 800eeec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800eeee:	2300      	movs	r3, #0
 800eef0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800eef2:	2300      	movs	r3, #0
 800eef4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800eef6:	1d3b      	adds	r3, r7, #4
 800eef8:	220c      	movs	r2, #12
 800eefa:	4619      	mov	r1, r3
 800eefc:	4807      	ldr	r0, [pc, #28]	; (800ef1c <MX_TIM2_Init+0xe8>)
 800eefe:	f005 fef9 	bl	8014cf4 <HAL_TIM_PWM_ConfigChannel>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d001      	beq.n	800ef0c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800ef08:	f000 fae8 	bl	800f4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800ef0c:	4803      	ldr	r0, [pc, #12]	; (800ef1c <MX_TIM2_Init+0xe8>)
 800ef0e:	f000 fd3f 	bl	800f990 <HAL_TIM_MspPostInit>

}
 800ef12:	bf00      	nop
 800ef14:	3738      	adds	r7, #56	; 0x38
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	20000240 	.word	0x20000240

0800ef20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b08c      	sub	sp, #48	; 0x30
 800ef24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ef26:	f107 030c 	add.w	r3, r7, #12
 800ef2a:	2224      	movs	r2, #36	; 0x24
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f007 fb39 	bl	80165a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ef34:	1d3b      	adds	r3, r7, #4
 800ef36:	2200      	movs	r2, #0
 800ef38:	601a      	str	r2, [r3, #0]
 800ef3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ef3c:	4b20      	ldr	r3, [pc, #128]	; (800efc0 <MX_TIM3_Init+0xa0>)
 800ef3e:	4a21      	ldr	r2, [pc, #132]	; (800efc4 <MX_TIM3_Init+0xa4>)
 800ef40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ef42:	4b1f      	ldr	r3, [pc, #124]	; (800efc0 <MX_TIM3_Init+0xa0>)
 800ef44:	2200      	movs	r2, #0
 800ef46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ef48:	4b1d      	ldr	r3, [pc, #116]	; (800efc0 <MX_TIM3_Init+0xa0>)
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800ef4e:	4b1c      	ldr	r3, [pc, #112]	; (800efc0 <MX_TIM3_Init+0xa0>)
 800ef50:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800ef54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ef56:	4b1a      	ldr	r3, [pc, #104]	; (800efc0 <MX_TIM3_Init+0xa0>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ef5c:	4b18      	ldr	r3, [pc, #96]	; (800efc0 <MX_TIM3_Init+0xa0>)
 800ef5e:	2200      	movs	r2, #0
 800ef60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800ef62:	2303      	movs	r3, #3
 800ef64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ef66:	2300      	movs	r3, #0
 800ef68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ef72:	2300      	movs	r3, #0
 800ef74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ef76:	2300      	movs	r3, #0
 800ef78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ef82:	2300      	movs	r3, #0
 800ef84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800ef86:	f107 030c 	add.w	r3, r7, #12
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	480c      	ldr	r0, [pc, #48]	; (800efc0 <MX_TIM3_Init+0xa0>)
 800ef8e:	f005 fc39 	bl	8014804 <HAL_TIM_Encoder_Init>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d001      	beq.n	800ef9c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800ef98:	f000 faa0 	bl	800f4dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800efa0:	2300      	movs	r3, #0
 800efa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800efa4:	1d3b      	adds	r3, r7, #4
 800efa6:	4619      	mov	r1, r3
 800efa8:	4805      	ldr	r0, [pc, #20]	; (800efc0 <MX_TIM3_Init+0xa0>)
 800efaa:	f006 fc23 	bl	80157f4 <HAL_TIMEx_MasterConfigSynchronization>
 800efae:	4603      	mov	r3, r0
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d001      	beq.n	800efb8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800efb4:	f000 fa92 	bl	800f4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800efb8:	bf00      	nop
 800efba:	3730      	adds	r7, #48	; 0x30
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	20000860 	.word	0x20000860
 800efc4:	40000400 	.word	0x40000400

0800efc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b08c      	sub	sp, #48	; 0x30
 800efcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800efce:	f107 030c 	add.w	r3, r7, #12
 800efd2:	2224      	movs	r2, #36	; 0x24
 800efd4:	2100      	movs	r1, #0
 800efd6:	4618      	mov	r0, r3
 800efd8:	f007 fae5 	bl	80165a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800efdc:	1d3b      	adds	r3, r7, #4
 800efde:	2200      	movs	r2, #0
 800efe0:	601a      	str	r2, [r3, #0]
 800efe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800efe4:	4b20      	ldr	r3, [pc, #128]	; (800f068 <MX_TIM4_Init+0xa0>)
 800efe6:	4a21      	ldr	r2, [pc, #132]	; (800f06c <MX_TIM4_Init+0xa4>)
 800efe8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800efea:	4b1f      	ldr	r3, [pc, #124]	; (800f068 <MX_TIM4_Init+0xa0>)
 800efec:	2200      	movs	r2, #0
 800efee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eff0:	4b1d      	ldr	r3, [pc, #116]	; (800f068 <MX_TIM4_Init+0xa0>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800eff6:	4b1c      	ldr	r3, [pc, #112]	; (800f068 <MX_TIM4_Init+0xa0>)
 800eff8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800effc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800effe:	4b1a      	ldr	r3, [pc, #104]	; (800f068 <MX_TIM4_Init+0xa0>)
 800f000:	2200      	movs	r2, #0
 800f002:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f004:	4b18      	ldr	r3, [pc, #96]	; (800f068 <MX_TIM4_Init+0xa0>)
 800f006:	2200      	movs	r2, #0
 800f008:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800f00a:	2303      	movs	r3, #3
 800f00c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800f00e:	2300      	movs	r3, #0
 800f010:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800f012:	2301      	movs	r3, #1
 800f014:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800f016:	2300      	movs	r3, #0
 800f018:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800f01a:	2300      	movs	r3, #0
 800f01c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800f01e:	2300      	movs	r3, #0
 800f020:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800f022:	2301      	movs	r3, #1
 800f024:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800f026:	2300      	movs	r3, #0
 800f028:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800f02a:	2300      	movs	r3, #0
 800f02c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800f02e:	f107 030c 	add.w	r3, r7, #12
 800f032:	4619      	mov	r1, r3
 800f034:	480c      	ldr	r0, [pc, #48]	; (800f068 <MX_TIM4_Init+0xa0>)
 800f036:	f005 fbe5 	bl	8014804 <HAL_TIM_Encoder_Init>
 800f03a:	4603      	mov	r3, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d001      	beq.n	800f044 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800f040:	f000 fa4c 	bl	800f4dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f044:	2300      	movs	r3, #0
 800f046:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f048:	2300      	movs	r3, #0
 800f04a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800f04c:	1d3b      	adds	r3, r7, #4
 800f04e:	4619      	mov	r1, r3
 800f050:	4805      	ldr	r0, [pc, #20]	; (800f068 <MX_TIM4_Init+0xa0>)
 800f052:	f006 fbcf 	bl	80157f4 <HAL_TIMEx_MasterConfigSynchronization>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d001      	beq.n	800f060 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800f05c:	f000 fa3e 	bl	800f4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800f060:	bf00      	nop
 800f062:	3730      	adds	r7, #48	; 0x30
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	200007d8 	.word	0x200007d8
 800f06c:	40000800 	.word	0x40000800

0800f070 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b08e      	sub	sp, #56	; 0x38
 800f074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f07a:	2200      	movs	r2, #0
 800f07c:	601a      	str	r2, [r3, #0]
 800f07e:	605a      	str	r2, [r3, #4]
 800f080:	609a      	str	r2, [r3, #8]
 800f082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f084:	f107 0320 	add.w	r3, r7, #32
 800f088:	2200      	movs	r2, #0
 800f08a:	601a      	str	r2, [r3, #0]
 800f08c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f08e:	1d3b      	adds	r3, r7, #4
 800f090:	2200      	movs	r2, #0
 800f092:	601a      	str	r2, [r3, #0]
 800f094:	605a      	str	r2, [r3, #4]
 800f096:	609a      	str	r2, [r3, #8]
 800f098:	60da      	str	r2, [r3, #12]
 800f09a:	611a      	str	r2, [r3, #16]
 800f09c:	615a      	str	r2, [r3, #20]
 800f09e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800f0a0:	4b2c      	ldr	r3, [pc, #176]	; (800f154 <MX_TIM5_Init+0xe4>)
 800f0a2:	4a2d      	ldr	r2, [pc, #180]	; (800f158 <MX_TIM5_Init+0xe8>)
 800f0a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800f0a6:	4b2b      	ldr	r3, [pc, #172]	; (800f154 <MX_TIM5_Init+0xe4>)
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f0ac:	4b29      	ldr	r3, [pc, #164]	; (800f154 <MX_TIM5_Init+0xe4>)
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800f0b2:	4b28      	ldr	r3, [pc, #160]	; (800f154 <MX_TIM5_Init+0xe4>)
 800f0b4:	f241 0267 	movw	r2, #4199	; 0x1067
 800f0b8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f0ba:	4b26      	ldr	r3, [pc, #152]	; (800f154 <MX_TIM5_Init+0xe4>)
 800f0bc:	2200      	movs	r2, #0
 800f0be:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f0c0:	4b24      	ldr	r3, [pc, #144]	; (800f154 <MX_TIM5_Init+0xe4>)
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800f0c6:	4823      	ldr	r0, [pc, #140]	; (800f154 <MX_TIM5_Init+0xe4>)
 800f0c8:	f005 f902 	bl	80142d0 <HAL_TIM_Base_Init>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d001      	beq.n	800f0d6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800f0d2:	f000 fa03 	bl	800f4dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f0d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f0da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800f0dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	481c      	ldr	r0, [pc, #112]	; (800f154 <MX_TIM5_Init+0xe4>)
 800f0e4:	f005 fecc 	bl	8014e80 <HAL_TIM_ConfigClockSource>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d001      	beq.n	800f0f2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800f0ee:	f000 f9f5 	bl	800f4dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800f0f2:	4818      	ldr	r0, [pc, #96]	; (800f154 <MX_TIM5_Init+0xe4>)
 800f0f4:	f005 faba 	bl	801466c <HAL_TIM_PWM_Init>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d001      	beq.n	800f102 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800f0fe:	f000 f9ed 	bl	800f4dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f102:	2300      	movs	r3, #0
 800f104:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f106:	2300      	movs	r3, #0
 800f108:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800f10a:	f107 0320 	add.w	r3, r7, #32
 800f10e:	4619      	mov	r1, r3
 800f110:	4810      	ldr	r0, [pc, #64]	; (800f154 <MX_TIM5_Init+0xe4>)
 800f112:	f006 fb6f 	bl	80157f4 <HAL_TIMEx_MasterConfigSynchronization>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d001      	beq.n	800f120 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800f11c:	f000 f9de 	bl	800f4dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f120:	2360      	movs	r3, #96	; 0x60
 800f122:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f124:	2300      	movs	r3, #0
 800f126:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f128:	2300      	movs	r3, #0
 800f12a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f12c:	2300      	movs	r3, #0
 800f12e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f130:	1d3b      	adds	r3, r7, #4
 800f132:	2204      	movs	r2, #4
 800f134:	4619      	mov	r1, r3
 800f136:	4807      	ldr	r0, [pc, #28]	; (800f154 <MX_TIM5_Init+0xe4>)
 800f138:	f005 fddc 	bl	8014cf4 <HAL_TIM_PWM_ConfigChannel>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d001      	beq.n	800f146 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800f142:	f000 f9cb 	bl	800f4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800f146:	4803      	ldr	r0, [pc, #12]	; (800f154 <MX_TIM5_Init+0xe4>)
 800f148:	f000 fc22 	bl	800f990 <HAL_TIM_MspPostInit>

}
 800f14c:	bf00      	nop
 800f14e:	3738      	adds	r7, #56	; 0x38
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	20000280 	.word	0x20000280
 800f158:	40000c00 	.word	0x40000c00

0800f15c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b096      	sub	sp, #88	; 0x58
 800f160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f162:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f166:	2200      	movs	r2, #0
 800f168:	601a      	str	r2, [r3, #0]
 800f16a:	605a      	str	r2, [r3, #4]
 800f16c:	609a      	str	r2, [r3, #8]
 800f16e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f170:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f174:	2200      	movs	r2, #0
 800f176:	601a      	str	r2, [r3, #0]
 800f178:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f17a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f17e:	2200      	movs	r2, #0
 800f180:	601a      	str	r2, [r3, #0]
 800f182:	605a      	str	r2, [r3, #4]
 800f184:	609a      	str	r2, [r3, #8]
 800f186:	60da      	str	r2, [r3, #12]
 800f188:	611a      	str	r2, [r3, #16]
 800f18a:	615a      	str	r2, [r3, #20]
 800f18c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f18e:	1d3b      	adds	r3, r7, #4
 800f190:	2220      	movs	r2, #32
 800f192:	2100      	movs	r1, #0
 800f194:	4618      	mov	r0, r3
 800f196:	f007 fa06 	bl	80165a6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800f19a:	4b42      	ldr	r3, [pc, #264]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f19c:	4a42      	ldr	r2, [pc, #264]	; (800f2a8 <MX_TIM8_Init+0x14c>)
 800f19e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800f1a0:	4b40      	ldr	r3, [pc, #256]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f1a2:	22a7      	movs	r2, #167	; 0xa7
 800f1a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f1a6:	4b3f      	ldr	r3, [pc, #252]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800f1ac:	4b3d      	ldr	r3, [pc, #244]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f1ae:	2231      	movs	r2, #49	; 0x31
 800f1b0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f1b2:	4b3c      	ldr	r3, [pc, #240]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800f1b8:	4b3a      	ldr	r3, [pc, #232]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800f1be:	4b39      	ldr	r3, [pc, #228]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f1c0:	2280      	movs	r2, #128	; 0x80
 800f1c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800f1c4:	4837      	ldr	r0, [pc, #220]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f1c6:	f005 f883 	bl	80142d0 <HAL_TIM_Base_Init>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d001      	beq.n	800f1d4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800f1d0:	f000 f984 	bl	800f4dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f1d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f1d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800f1da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f1de:	4619      	mov	r1, r3
 800f1e0:	4830      	ldr	r0, [pc, #192]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f1e2:	f005 fe4d 	bl	8014e80 <HAL_TIM_ConfigClockSource>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d001      	beq.n	800f1f0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800f1ec:	f000 f976 	bl	800f4dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800f1f0:	482c      	ldr	r0, [pc, #176]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f1f2:	f005 f8e7 	bl	80143c4 <HAL_TIM_OC_Init>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d001      	beq.n	800f200 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800f1fc:	f000 f96e 	bl	800f4dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f200:	2300      	movs	r3, #0
 800f202:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f204:	2300      	movs	r3, #0
 800f206:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800f208:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f20c:	4619      	mov	r1, r3
 800f20e:	4825      	ldr	r0, [pc, #148]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f210:	f006 faf0 	bl	80157f4 <HAL_TIMEx_MasterConfigSynchronization>
 800f214:	4603      	mov	r3, r0
 800f216:	2b00      	cmp	r3, #0
 800f218:	d001      	beq.n	800f21e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800f21a:	f000 f95f 	bl	800f4dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800f21e:	2330      	movs	r3, #48	; 0x30
 800f220:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800f222:	2318      	movs	r3, #24
 800f224:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f226:	2300      	movs	r3, #0
 800f228:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f22a:	2300      	movs	r3, #0
 800f22c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f22e:	2300      	movs	r3, #0
 800f230:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f232:	2300      	movs	r3, #0
 800f234:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f236:	2300      	movs	r3, #0
 800f238:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f23a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f23e:	2200      	movs	r2, #0
 800f240:	4619      	mov	r1, r3
 800f242:	4818      	ldr	r0, [pc, #96]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f244:	f005 fcf6 	bl	8014c34 <HAL_TIM_OC_ConfigChannel>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d001      	beq.n	800f252 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800f24e:	f000 f945 	bl	800f4dc <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800f252:	4b14      	ldr	r3, [pc, #80]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	699a      	ldr	r2, [r3, #24]
 800f258:	4b12      	ldr	r3, [pc, #72]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f042 0208 	orr.w	r2, r2, #8
 800f260:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f262:	2300      	movs	r3, #0
 800f264:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f266:	2300      	movs	r3, #0
 800f268:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f26a:	2300      	movs	r3, #0
 800f26c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f26e:	2300      	movs	r3, #0
 800f270:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f272:	2300      	movs	r3, #0
 800f274:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f27a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f27c:	2300      	movs	r3, #0
 800f27e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800f280:	1d3b      	adds	r3, r7, #4
 800f282:	4619      	mov	r1, r3
 800f284:	4807      	ldr	r0, [pc, #28]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f286:	f006 fb31 	bl	80158ec <HAL_TIMEx_ConfigBreakDeadTime>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d001      	beq.n	800f294 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800f290:	f000 f924 	bl	800f4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800f294:	4803      	ldr	r0, [pc, #12]	; (800f2a4 <MX_TIM8_Init+0x148>)
 800f296:	f000 fb7b 	bl	800f990 <HAL_TIM_MspPostInit>

}
 800f29a:	bf00      	nop
 800f29c:	3758      	adds	r7, #88	; 0x58
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	20000798 	.word	0x20000798
 800f2a8:	40010400 	.word	0x40010400

0800f2ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800f2b0:	4b11      	ldr	r3, [pc, #68]	; (800f2f8 <MX_USART1_UART_Init+0x4c>)
 800f2b2:	4a12      	ldr	r2, [pc, #72]	; (800f2fc <MX_USART1_UART_Init+0x50>)
 800f2b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800f2b6:	4b10      	ldr	r3, [pc, #64]	; (800f2f8 <MX_USART1_UART_Init+0x4c>)
 800f2b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800f2bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800f2be:	4b0e      	ldr	r3, [pc, #56]	; (800f2f8 <MX_USART1_UART_Init+0x4c>)
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800f2c4:	4b0c      	ldr	r3, [pc, #48]	; (800f2f8 <MX_USART1_UART_Init+0x4c>)
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800f2ca:	4b0b      	ldr	r3, [pc, #44]	; (800f2f8 <MX_USART1_UART_Init+0x4c>)
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800f2d0:	4b09      	ldr	r3, [pc, #36]	; (800f2f8 <MX_USART1_UART_Init+0x4c>)
 800f2d2:	220c      	movs	r2, #12
 800f2d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f2d6:	4b08      	ldr	r3, [pc, #32]	; (800f2f8 <MX_USART1_UART_Init+0x4c>)
 800f2d8:	2200      	movs	r2, #0
 800f2da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800f2dc:	4b06      	ldr	r3, [pc, #24]	; (800f2f8 <MX_USART1_UART_Init+0x4c>)
 800f2de:	2200      	movs	r2, #0
 800f2e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800f2e2:	4805      	ldr	r0, [pc, #20]	; (800f2f8 <MX_USART1_UART_Init+0x4c>)
 800f2e4:	f006 fb8d 	bl	8015a02 <HAL_UART_Init>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d001      	beq.n	800f2f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800f2ee:	f000 f8f5 	bl	800f4dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800f2f2:	bf00      	nop
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	20000940 	.word	0x20000940
 800f2fc:	40011000 	.word	0x40011000

0800f300 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b082      	sub	sp, #8
 800f304:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800f306:	2300      	movs	r3, #0
 800f308:	607b      	str	r3, [r7, #4]
 800f30a:	4b10      	ldr	r3, [pc, #64]	; (800f34c <MX_DMA_Init+0x4c>)
 800f30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f30e:	4a0f      	ldr	r2, [pc, #60]	; (800f34c <MX_DMA_Init+0x4c>)
 800f310:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f314:	6313      	str	r3, [r2, #48]	; 0x30
 800f316:	4b0d      	ldr	r3, [pc, #52]	; (800f34c <MX_DMA_Init+0x4c>)
 800f318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f31a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f31e:	607b      	str	r3, [r7, #4]
 800f320:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800f322:	2200      	movs	r2, #0
 800f324:	2100      	movs	r1, #0
 800f326:	2038      	movs	r0, #56	; 0x38
 800f328:	f002 fe51 	bl	8011fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800f32c:	2038      	movs	r0, #56	; 0x38
 800f32e:	f002 fe6a 	bl	8012006 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800f332:	2200      	movs	r2, #0
 800f334:	2100      	movs	r1, #0
 800f336:	203a      	movs	r0, #58	; 0x3a
 800f338:	f002 fe49 	bl	8011fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800f33c:	203a      	movs	r0, #58	; 0x3a
 800f33e:	f002 fe62 	bl	8012006 <HAL_NVIC_EnableIRQ>

}
 800f342:	bf00      	nop
 800f344:	3708      	adds	r7, #8
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	40023800 	.word	0x40023800

0800f350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b08a      	sub	sp, #40	; 0x28
 800f354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f356:	f107 0314 	add.w	r3, r7, #20
 800f35a:	2200      	movs	r2, #0
 800f35c:	601a      	str	r2, [r3, #0]
 800f35e:	605a      	str	r2, [r3, #4]
 800f360:	609a      	str	r2, [r3, #8]
 800f362:	60da      	str	r2, [r3, #12]
 800f364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f366:	2300      	movs	r3, #0
 800f368:	613b      	str	r3, [r7, #16]
 800f36a:	4b56      	ldr	r3, [pc, #344]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f36e:	4a55      	ldr	r2, [pc, #340]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f374:	6313      	str	r3, [r2, #48]	; 0x30
 800f376:	4b53      	ldr	r3, [pc, #332]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f37e:	613b      	str	r3, [r7, #16]
 800f380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f382:	2300      	movs	r3, #0
 800f384:	60fb      	str	r3, [r7, #12]
 800f386:	4b4f      	ldr	r3, [pc, #316]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f38a:	4a4e      	ldr	r2, [pc, #312]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f38c:	f043 0304 	orr.w	r3, r3, #4
 800f390:	6313      	str	r3, [r2, #48]	; 0x30
 800f392:	4b4c      	ldr	r3, [pc, #304]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f396:	f003 0304 	and.w	r3, r3, #4
 800f39a:	60fb      	str	r3, [r7, #12]
 800f39c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f39e:	2300      	movs	r3, #0
 800f3a0:	60bb      	str	r3, [r7, #8]
 800f3a2:	4b48      	ldr	r3, [pc, #288]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3a6:	4a47      	ldr	r2, [pc, #284]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f3a8:	f043 0301 	orr.w	r3, r3, #1
 800f3ac:	6313      	str	r3, [r2, #48]	; 0x30
 800f3ae:	4b45      	ldr	r3, [pc, #276]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3b2:	f003 0301 	and.w	r3, r3, #1
 800f3b6:	60bb      	str	r3, [r7, #8]
 800f3b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	607b      	str	r3, [r7, #4]
 800f3be:	4b41      	ldr	r3, [pc, #260]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3c2:	4a40      	ldr	r2, [pc, #256]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f3c4:	f043 0302 	orr.w	r3, r3, #2
 800f3c8:	6313      	str	r3, [r2, #48]	; 0x30
 800f3ca:	4b3e      	ldr	r3, [pc, #248]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ce:	f003 0302 	and.w	r3, r3, #2
 800f3d2:	607b      	str	r3, [r7, #4]
 800f3d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	603b      	str	r3, [r7, #0]
 800f3da:	4b3a      	ldr	r3, [pc, #232]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3de:	4a39      	ldr	r2, [pc, #228]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f3e0:	f043 0308 	orr.w	r3, r3, #8
 800f3e4:	6313      	str	r3, [r2, #48]	; 0x30
 800f3e6:	4b37      	ldr	r3, [pc, #220]	; (800f4c4 <MX_GPIO_Init+0x174>)
 800f3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ea:	f003 0308 	and.w	r3, r3, #8
 800f3ee:	603b      	str	r3, [r7, #0]
 800f3f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	2105      	movs	r1, #5
 800f3f6:	4834      	ldr	r0, [pc, #208]	; (800f4c8 <MX_GPIO_Init+0x178>)
 800f3f8:	f003 fd82 	bl	8012f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f44f 7140 	mov.w	r1, #768	; 0x300
 800f402:	4832      	ldr	r0, [pc, #200]	; (800f4cc <MX_GPIO_Init+0x17c>)
 800f404:	f003 fd7c 	bl	8012f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800f408:	2200      	movs	r2, #0
 800f40a:	2104      	movs	r1, #4
 800f40c:	4830      	ldr	r0, [pc, #192]	; (800f4d0 <MX_GPIO_Init+0x180>)
 800f40e:	f003 fd77 	bl	8012f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f412:	2200      	movs	r2, #0
 800f414:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f418:	482e      	ldr	r0, [pc, #184]	; (800f4d4 <MX_GPIO_Init+0x184>)
 800f41a:	f003 fd71 	bl	8012f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800f41e:	2305      	movs	r3, #5
 800f420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f422:	2301      	movs	r3, #1
 800f424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f426:	2300      	movs	r3, #0
 800f428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f42a:	2300      	movs	r3, #0
 800f42c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f42e:	f107 0314 	add.w	r3, r7, #20
 800f432:	4619      	mov	r1, r3
 800f434:	4824      	ldr	r0, [pc, #144]	; (800f4c8 <MX_GPIO_Init+0x178>)
 800f436:	f003 fbc9 	bl	8012bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800f43a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f43e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f440:	4b25      	ldr	r3, [pc, #148]	; (800f4d8 <MX_GPIO_Init+0x188>)
 800f442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f444:	2300      	movs	r3, #0
 800f446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f448:	f107 0314 	add.w	r3, r7, #20
 800f44c:	4619      	mov	r1, r3
 800f44e:	4821      	ldr	r0, [pc, #132]	; (800f4d4 <MX_GPIO_Init+0x184>)
 800f450:	f003 fbbc 	bl	8012bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800f454:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f45a:	2301      	movs	r3, #1
 800f45c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f45e:	2300      	movs	r3, #0
 800f460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f462:	2300      	movs	r3, #0
 800f464:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f466:	f107 0314 	add.w	r3, r7, #20
 800f46a:	4619      	mov	r1, r3
 800f46c:	4817      	ldr	r0, [pc, #92]	; (800f4cc <MX_GPIO_Init+0x17c>)
 800f46e:	f003 fbad 	bl	8012bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f472:	2304      	movs	r3, #4
 800f474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f476:	2301      	movs	r3, #1
 800f478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f47a:	2300      	movs	r3, #0
 800f47c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f47e:	2300      	movs	r3, #0
 800f480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f482:	f107 0314 	add.w	r3, r7, #20
 800f486:	4619      	mov	r1, r3
 800f488:	4811      	ldr	r0, [pc, #68]	; (800f4d0 <MX_GPIO_Init+0x180>)
 800f48a:	f003 fb9f 	bl	8012bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f48e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f494:	2301      	movs	r3, #1
 800f496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f498:	2300      	movs	r3, #0
 800f49a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f49c:	2300      	movs	r3, #0
 800f49e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f4a0:	f107 0314 	add.w	r3, r7, #20
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	480b      	ldr	r0, [pc, #44]	; (800f4d4 <MX_GPIO_Init+0x184>)
 800f4a8:	f003 fb90 	bl	8012bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	2028      	movs	r0, #40	; 0x28
 800f4b2:	f002 fd8c 	bl	8011fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800f4b6:	2028      	movs	r0, #40	; 0x28
 800f4b8:	f002 fda5 	bl	8012006 <HAL_NVIC_EnableIRQ>

}
 800f4bc:	bf00      	nop
 800f4be:	3728      	adds	r7, #40	; 0x28
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	40023800 	.word	0x40023800
 800f4c8:	40020000 	.word	0x40020000
 800f4cc:	40020800 	.word	0x40020800
 800f4d0:	40020c00 	.word	0x40020c00
 800f4d4:	40020400 	.word	0x40020400
 800f4d8:	10110000 	.word	0x10110000

0800f4dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800f4e0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800f4e2:	e7fe      	b.n	800f4e2 <Error_Handler+0x6>

0800f4e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b083      	sub	sp, #12
 800f4e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	607b      	str	r3, [r7, #4]
 800f4ee:	4b10      	ldr	r3, [pc, #64]	; (800f530 <HAL_MspInit+0x4c>)
 800f4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4f2:	4a0f      	ldr	r2, [pc, #60]	; (800f530 <HAL_MspInit+0x4c>)
 800f4f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f4f8:	6453      	str	r3, [r2, #68]	; 0x44
 800f4fa:	4b0d      	ldr	r3, [pc, #52]	; (800f530 <HAL_MspInit+0x4c>)
 800f4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f502:	607b      	str	r3, [r7, #4]
 800f504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f506:	2300      	movs	r3, #0
 800f508:	603b      	str	r3, [r7, #0]
 800f50a:	4b09      	ldr	r3, [pc, #36]	; (800f530 <HAL_MspInit+0x4c>)
 800f50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f50e:	4a08      	ldr	r2, [pc, #32]	; (800f530 <HAL_MspInit+0x4c>)
 800f510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f514:	6413      	str	r3, [r2, #64]	; 0x40
 800f516:	4b06      	ldr	r3, [pc, #24]	; (800f530 <HAL_MspInit+0x4c>)
 800f518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f51a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f51e:	603b      	str	r3, [r7, #0]
 800f520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f522:	bf00      	nop
 800f524:	370c      	adds	r7, #12
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr
 800f52e:	bf00      	nop
 800f530:	40023800 	.word	0x40023800

0800f534 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b08c      	sub	sp, #48	; 0x30
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f53c:	f107 031c 	add.w	r3, r7, #28
 800f540:	2200      	movs	r2, #0
 800f542:	601a      	str	r2, [r3, #0]
 800f544:	605a      	str	r2, [r3, #4]
 800f546:	609a      	str	r2, [r3, #8]
 800f548:	60da      	str	r2, [r3, #12]
 800f54a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a6b      	ldr	r2, [pc, #428]	; (800f700 <HAL_ADC_MspInit+0x1cc>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d172      	bne.n	800f63c <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f556:	2300      	movs	r3, #0
 800f558:	61bb      	str	r3, [r7, #24]
 800f55a:	4b6a      	ldr	r3, [pc, #424]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f55e:	4a69      	ldr	r2, [pc, #420]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f564:	6453      	str	r3, [r2, #68]	; 0x44
 800f566:	4b67      	ldr	r3, [pc, #412]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f56a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f56e:	61bb      	str	r3, [r7, #24]
 800f570:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f572:	2300      	movs	r3, #0
 800f574:	617b      	str	r3, [r7, #20]
 800f576:	4b63      	ldr	r3, [pc, #396]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f57a:	4a62      	ldr	r2, [pc, #392]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f57c:	f043 0304 	orr.w	r3, r3, #4
 800f580:	6313      	str	r3, [r2, #48]	; 0x30
 800f582:	4b60      	ldr	r3, [pc, #384]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f586:	f003 0304 	and.w	r3, r3, #4
 800f58a:	617b      	str	r3, [r7, #20]
 800f58c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f58e:	2300      	movs	r3, #0
 800f590:	613b      	str	r3, [r7, #16]
 800f592:	4b5c      	ldr	r3, [pc, #368]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f596:	4a5b      	ldr	r2, [pc, #364]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f598:	f043 0302 	orr.w	r3, r3, #2
 800f59c:	6313      	str	r3, [r2, #48]	; 0x30
 800f59e:	4b59      	ldr	r3, [pc, #356]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5a2:	f003 0302 	and.w	r3, r3, #2
 800f5a6:	613b      	str	r3, [r7, #16]
 800f5a8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800f5aa:	2311      	movs	r3, #17
 800f5ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f5ae:	2303      	movs	r3, #3
 800f5b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f5b6:	f107 031c 	add.w	r3, r7, #28
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	4852      	ldr	r0, [pc, #328]	; (800f708 <HAL_ADC_MspInit+0x1d4>)
 800f5be:	f003 fb05 	bl	8012bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800f5c2:	2302      	movs	r3, #2
 800f5c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f5c6:	2303      	movs	r3, #3
 800f5c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f5ce:	f107 031c 	add.w	r3, r7, #28
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	484d      	ldr	r0, [pc, #308]	; (800f70c <HAL_ADC_MspInit+0x1d8>)
 800f5d6:	f003 faf9 	bl	8012bcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800f5da:	4b4d      	ldr	r3, [pc, #308]	; (800f710 <HAL_ADC_MspInit+0x1dc>)
 800f5dc:	4a4d      	ldr	r2, [pc, #308]	; (800f714 <HAL_ADC_MspInit+0x1e0>)
 800f5de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800f5e0:	4b4b      	ldr	r3, [pc, #300]	; (800f710 <HAL_ADC_MspInit+0x1dc>)
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f5e6:	4b4a      	ldr	r3, [pc, #296]	; (800f710 <HAL_ADC_MspInit+0x1dc>)
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f5ec:	4b48      	ldr	r3, [pc, #288]	; (800f710 <HAL_ADC_MspInit+0x1dc>)
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800f5f2:	4b47      	ldr	r3, [pc, #284]	; (800f710 <HAL_ADC_MspInit+0x1dc>)
 800f5f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f5f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f5fa:	4b45      	ldr	r3, [pc, #276]	; (800f710 <HAL_ADC_MspInit+0x1dc>)
 800f5fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f600:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f602:	4b43      	ldr	r3, [pc, #268]	; (800f710 <HAL_ADC_MspInit+0x1dc>)
 800f604:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f608:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800f60a:	4b41      	ldr	r3, [pc, #260]	; (800f710 <HAL_ADC_MspInit+0x1dc>)
 800f60c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f610:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800f612:	4b3f      	ldr	r3, [pc, #252]	; (800f710 <HAL_ADC_MspInit+0x1dc>)
 800f614:	2200      	movs	r2, #0
 800f616:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f618:	4b3d      	ldr	r3, [pc, #244]	; (800f710 <HAL_ADC_MspInit+0x1dc>)
 800f61a:	2200      	movs	r2, #0
 800f61c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800f61e:	483c      	ldr	r0, [pc, #240]	; (800f710 <HAL_ADC_MspInit+0x1dc>)
 800f620:	f002 fd0c 	bl	801203c <HAL_DMA_Init>
 800f624:	4603      	mov	r3, r0
 800f626:	2b00      	cmp	r3, #0
 800f628:	d001      	beq.n	800f62e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800f62a:	f7ff ff57 	bl	800f4dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4a37      	ldr	r2, [pc, #220]	; (800f710 <HAL_ADC_MspInit+0x1dc>)
 800f632:	639a      	str	r2, [r3, #56]	; 0x38
 800f634:	4a36      	ldr	r2, [pc, #216]	; (800f710 <HAL_ADC_MspInit+0x1dc>)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800f63a:	e05d      	b.n	800f6f8 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4a35      	ldr	r2, [pc, #212]	; (800f718 <HAL_ADC_MspInit+0x1e4>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d158      	bne.n	800f6f8 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800f646:	2300      	movs	r3, #0
 800f648:	60fb      	str	r3, [r7, #12]
 800f64a:	4b2e      	ldr	r3, [pc, #184]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f64c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f64e:	4a2d      	ldr	r2, [pc, #180]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f654:	6453      	str	r3, [r2, #68]	; 0x44
 800f656:	4b2b      	ldr	r3, [pc, #172]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f65a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f65e:	60fb      	str	r3, [r7, #12]
 800f660:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f662:	2300      	movs	r3, #0
 800f664:	60bb      	str	r3, [r7, #8]
 800f666:	4b27      	ldr	r3, [pc, #156]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f66a:	4a26      	ldr	r2, [pc, #152]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f66c:	f043 0304 	orr.w	r3, r3, #4
 800f670:	6313      	str	r3, [r2, #48]	; 0x30
 800f672:	4b24      	ldr	r3, [pc, #144]	; (800f704 <HAL_ADC_MspInit+0x1d0>)
 800f674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f676:	f003 0304 	and.w	r3, r3, #4
 800f67a:	60bb      	str	r3, [r7, #8]
 800f67c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800f67e:	2322      	movs	r3, #34	; 0x22
 800f680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f682:	2303      	movs	r3, #3
 800f684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f686:	2300      	movs	r3, #0
 800f688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f68a:	f107 031c 	add.w	r3, r7, #28
 800f68e:	4619      	mov	r1, r3
 800f690:	481d      	ldr	r0, [pc, #116]	; (800f708 <HAL_ADC_MspInit+0x1d4>)
 800f692:	f003 fa9b 	bl	8012bcc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800f696:	4b21      	ldr	r3, [pc, #132]	; (800f71c <HAL_ADC_MspInit+0x1e8>)
 800f698:	4a21      	ldr	r2, [pc, #132]	; (800f720 <HAL_ADC_MspInit+0x1ec>)
 800f69a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800f69c:	4b1f      	ldr	r3, [pc, #124]	; (800f71c <HAL_ADC_MspInit+0x1e8>)
 800f69e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f6a2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f6a4:	4b1d      	ldr	r3, [pc, #116]	; (800f71c <HAL_ADC_MspInit+0x1e8>)
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800f6aa:	4b1c      	ldr	r3, [pc, #112]	; (800f71c <HAL_ADC_MspInit+0x1e8>)
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800f6b0:	4b1a      	ldr	r3, [pc, #104]	; (800f71c <HAL_ADC_MspInit+0x1e8>)
 800f6b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f6b6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f6b8:	4b18      	ldr	r3, [pc, #96]	; (800f71c <HAL_ADC_MspInit+0x1e8>)
 800f6ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f6be:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f6c0:	4b16      	ldr	r3, [pc, #88]	; (800f71c <HAL_ADC_MspInit+0x1e8>)
 800f6c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f6c6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800f6c8:	4b14      	ldr	r3, [pc, #80]	; (800f71c <HAL_ADC_MspInit+0x1e8>)
 800f6ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f6ce:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800f6d0:	4b12      	ldr	r3, [pc, #72]	; (800f71c <HAL_ADC_MspInit+0x1e8>)
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f6d6:	4b11      	ldr	r3, [pc, #68]	; (800f71c <HAL_ADC_MspInit+0x1e8>)
 800f6d8:	2200      	movs	r2, #0
 800f6da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800f6dc:	480f      	ldr	r0, [pc, #60]	; (800f71c <HAL_ADC_MspInit+0x1e8>)
 800f6de:	f002 fcad 	bl	801203c <HAL_DMA_Init>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d001      	beq.n	800f6ec <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800f6e8:	f7ff fef8 	bl	800f4dc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4a0b      	ldr	r2, [pc, #44]	; (800f71c <HAL_ADC_MspInit+0x1e8>)
 800f6f0:	639a      	str	r2, [r3, #56]	; 0x38
 800f6f2:	4a0a      	ldr	r2, [pc, #40]	; (800f71c <HAL_ADC_MspInit+0x1e8>)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6393      	str	r3, [r2, #56]	; 0x38
}
 800f6f8:	bf00      	nop
 800f6fa:	3730      	adds	r7, #48	; 0x30
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	40012000 	.word	0x40012000
 800f704:	40023800 	.word	0x40023800
 800f708:	40020800 	.word	0x40020800
 800f70c:	40020400 	.word	0x40020400
 800f710:	20000980 	.word	0x20000980
 800f714:	40026410 	.word	0x40026410
 800f718:	40012100 	.word	0x40012100
 800f71c:	20000a20 	.word	0x20000a20
 800f720:	40026440 	.word	0x40026440

0800f724 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b08a      	sub	sp, #40	; 0x28
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f72c:	f107 0314 	add.w	r3, r7, #20
 800f730:	2200      	movs	r2, #0
 800f732:	601a      	str	r2, [r3, #0]
 800f734:	605a      	str	r2, [r3, #4]
 800f736:	609a      	str	r2, [r3, #8]
 800f738:	60da      	str	r2, [r3, #12]
 800f73a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	4a19      	ldr	r2, [pc, #100]	; (800f7a8 <HAL_SPI_MspInit+0x84>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d12c      	bne.n	800f7a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800f746:	2300      	movs	r3, #0
 800f748:	613b      	str	r3, [r7, #16]
 800f74a:	4b18      	ldr	r3, [pc, #96]	; (800f7ac <HAL_SPI_MspInit+0x88>)
 800f74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f74e:	4a17      	ldr	r2, [pc, #92]	; (800f7ac <HAL_SPI_MspInit+0x88>)
 800f750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f754:	6413      	str	r3, [r2, #64]	; 0x40
 800f756:	4b15      	ldr	r3, [pc, #84]	; (800f7ac <HAL_SPI_MspInit+0x88>)
 800f758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f75a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f75e:	613b      	str	r3, [r7, #16]
 800f760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f762:	2300      	movs	r3, #0
 800f764:	60fb      	str	r3, [r7, #12]
 800f766:	4b11      	ldr	r3, [pc, #68]	; (800f7ac <HAL_SPI_MspInit+0x88>)
 800f768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f76a:	4a10      	ldr	r2, [pc, #64]	; (800f7ac <HAL_SPI_MspInit+0x88>)
 800f76c:	f043 0304 	orr.w	r3, r3, #4
 800f770:	6313      	str	r3, [r2, #48]	; 0x30
 800f772:	4b0e      	ldr	r3, [pc, #56]	; (800f7ac <HAL_SPI_MspInit+0x88>)
 800f774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f776:	f003 0304 	and.w	r3, r3, #4
 800f77a:	60fb      	str	r3, [r7, #12]
 800f77c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800f77e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f784:	2302      	movs	r3, #2
 800f786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f788:	2300      	movs	r3, #0
 800f78a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f78c:	2303      	movs	r3, #3
 800f78e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800f790:	2306      	movs	r3, #6
 800f792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f794:	f107 0314 	add.w	r3, r7, #20
 800f798:	4619      	mov	r1, r3
 800f79a:	4805      	ldr	r0, [pc, #20]	; (800f7b0 <HAL_SPI_MspInit+0x8c>)
 800f79c:	f003 fa16 	bl	8012bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800f7a0:	bf00      	nop
 800f7a2:	3728      	adds	r7, #40	; 0x28
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	40003c00 	.word	0x40003c00
 800f7ac:	40023800 	.word	0x40023800
 800f7b0:	40020800 	.word	0x40020800

0800f7b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b086      	sub	sp, #24
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4a30      	ldr	r2, [pc, #192]	; (800f884 <HAL_TIM_Base_MspInit+0xd0>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d116      	bne.n	800f7f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	617b      	str	r3, [r7, #20]
 800f7ca:	4b2f      	ldr	r3, [pc, #188]	; (800f888 <HAL_TIM_Base_MspInit+0xd4>)
 800f7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7ce:	4a2e      	ldr	r2, [pc, #184]	; (800f888 <HAL_TIM_Base_MspInit+0xd4>)
 800f7d0:	f043 0301 	orr.w	r3, r3, #1
 800f7d4:	6453      	str	r3, [r2, #68]	; 0x44
 800f7d6:	4b2c      	ldr	r3, [pc, #176]	; (800f888 <HAL_TIM_Base_MspInit+0xd4>)
 800f7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7da:	f003 0301 	and.w	r3, r3, #1
 800f7de:	617b      	str	r3, [r7, #20]
 800f7e0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	2100      	movs	r1, #0
 800f7e6:	2019      	movs	r0, #25
 800f7e8:	f002 fbf1 	bl	8011fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800f7ec:	2019      	movs	r0, #25
 800f7ee:	f002 fc0a 	bl	8012006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800f7f2:	e042      	b.n	800f87a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7fc:	d10e      	bne.n	800f81c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800f7fe:	2300      	movs	r3, #0
 800f800:	613b      	str	r3, [r7, #16]
 800f802:	4b21      	ldr	r3, [pc, #132]	; (800f888 <HAL_TIM_Base_MspInit+0xd4>)
 800f804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f806:	4a20      	ldr	r2, [pc, #128]	; (800f888 <HAL_TIM_Base_MspInit+0xd4>)
 800f808:	f043 0301 	orr.w	r3, r3, #1
 800f80c:	6413      	str	r3, [r2, #64]	; 0x40
 800f80e:	4b1e      	ldr	r3, [pc, #120]	; (800f888 <HAL_TIM_Base_MspInit+0xd4>)
 800f810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f812:	f003 0301 	and.w	r3, r3, #1
 800f816:	613b      	str	r3, [r7, #16]
 800f818:	693b      	ldr	r3, [r7, #16]
}
 800f81a:	e02e      	b.n	800f87a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	4a1a      	ldr	r2, [pc, #104]	; (800f88c <HAL_TIM_Base_MspInit+0xd8>)
 800f822:	4293      	cmp	r3, r2
 800f824:	d10e      	bne.n	800f844 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800f826:	2300      	movs	r3, #0
 800f828:	60fb      	str	r3, [r7, #12]
 800f82a:	4b17      	ldr	r3, [pc, #92]	; (800f888 <HAL_TIM_Base_MspInit+0xd4>)
 800f82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f82e:	4a16      	ldr	r2, [pc, #88]	; (800f888 <HAL_TIM_Base_MspInit+0xd4>)
 800f830:	f043 0308 	orr.w	r3, r3, #8
 800f834:	6413      	str	r3, [r2, #64]	; 0x40
 800f836:	4b14      	ldr	r3, [pc, #80]	; (800f888 <HAL_TIM_Base_MspInit+0xd4>)
 800f838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f83a:	f003 0308 	and.w	r3, r3, #8
 800f83e:	60fb      	str	r3, [r7, #12]
 800f840:	68fb      	ldr	r3, [r7, #12]
}
 800f842:	e01a      	b.n	800f87a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4a11      	ldr	r2, [pc, #68]	; (800f890 <HAL_TIM_Base_MspInit+0xdc>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d115      	bne.n	800f87a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800f84e:	2300      	movs	r3, #0
 800f850:	60bb      	str	r3, [r7, #8]
 800f852:	4b0d      	ldr	r3, [pc, #52]	; (800f888 <HAL_TIM_Base_MspInit+0xd4>)
 800f854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f856:	4a0c      	ldr	r2, [pc, #48]	; (800f888 <HAL_TIM_Base_MspInit+0xd4>)
 800f858:	f043 0302 	orr.w	r3, r3, #2
 800f85c:	6453      	str	r3, [r2, #68]	; 0x44
 800f85e:	4b0a      	ldr	r3, [pc, #40]	; (800f888 <HAL_TIM_Base_MspInit+0xd4>)
 800f860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f862:	f003 0302 	and.w	r3, r3, #2
 800f866:	60bb      	str	r3, [r7, #8]
 800f868:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800f86a:	2200      	movs	r2, #0
 800f86c:	2101      	movs	r1, #1
 800f86e:	202c      	movs	r0, #44	; 0x2c
 800f870:	f002 fbad 	bl	8011fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800f874:	202c      	movs	r0, #44	; 0x2c
 800f876:	f002 fbc6 	bl	8012006 <HAL_NVIC_EnableIRQ>
}
 800f87a:	bf00      	nop
 800f87c:	3718      	adds	r7, #24
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	40010000 	.word	0x40010000
 800f888:	40023800 	.word	0x40023800
 800f88c:	40000c00 	.word	0x40000c00
 800f890:	40010400 	.word	0x40010400

0800f894 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b08c      	sub	sp, #48	; 0x30
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f89c:	f107 031c 	add.w	r3, r7, #28
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	601a      	str	r2, [r3, #0]
 800f8a4:	605a      	str	r2, [r3, #4]
 800f8a6:	609a      	str	r2, [r3, #8]
 800f8a8:	60da      	str	r2, [r3, #12]
 800f8aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	4a32      	ldr	r2, [pc, #200]	; (800f97c <HAL_TIM_Encoder_MspInit+0xe8>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d12c      	bne.n	800f910 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	61bb      	str	r3, [r7, #24]
 800f8ba:	4b31      	ldr	r3, [pc, #196]	; (800f980 <HAL_TIM_Encoder_MspInit+0xec>)
 800f8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8be:	4a30      	ldr	r2, [pc, #192]	; (800f980 <HAL_TIM_Encoder_MspInit+0xec>)
 800f8c0:	f043 0302 	orr.w	r3, r3, #2
 800f8c4:	6413      	str	r3, [r2, #64]	; 0x40
 800f8c6:	4b2e      	ldr	r3, [pc, #184]	; (800f980 <HAL_TIM_Encoder_MspInit+0xec>)
 800f8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ca:	f003 0302 	and.w	r3, r3, #2
 800f8ce:	61bb      	str	r3, [r7, #24]
 800f8d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	617b      	str	r3, [r7, #20]
 800f8d6:	4b2a      	ldr	r3, [pc, #168]	; (800f980 <HAL_TIM_Encoder_MspInit+0xec>)
 800f8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8da:	4a29      	ldr	r2, [pc, #164]	; (800f980 <HAL_TIM_Encoder_MspInit+0xec>)
 800f8dc:	f043 0301 	orr.w	r3, r3, #1
 800f8e0:	6313      	str	r3, [r2, #48]	; 0x30
 800f8e2:	4b27      	ldr	r3, [pc, #156]	; (800f980 <HAL_TIM_Encoder_MspInit+0xec>)
 800f8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8e6:	f003 0301 	and.w	r3, r3, #1
 800f8ea:	617b      	str	r3, [r7, #20]
 800f8ec:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f8ee:	23c0      	movs	r3, #192	; 0xc0
 800f8f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8f2:	2302      	movs	r3, #2
 800f8f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800f8fe:	2302      	movs	r3, #2
 800f900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f902:	f107 031c 	add.w	r3, r7, #28
 800f906:	4619      	mov	r1, r3
 800f908:	481e      	ldr	r0, [pc, #120]	; (800f984 <HAL_TIM_Encoder_MspInit+0xf0>)
 800f90a:	f003 f95f 	bl	8012bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800f90e:	e030      	b.n	800f972 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	4a1c      	ldr	r2, [pc, #112]	; (800f988 <HAL_TIM_Encoder_MspInit+0xf4>)
 800f916:	4293      	cmp	r3, r2
 800f918:	d12b      	bne.n	800f972 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800f91a:	2300      	movs	r3, #0
 800f91c:	613b      	str	r3, [r7, #16]
 800f91e:	4b18      	ldr	r3, [pc, #96]	; (800f980 <HAL_TIM_Encoder_MspInit+0xec>)
 800f920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f922:	4a17      	ldr	r2, [pc, #92]	; (800f980 <HAL_TIM_Encoder_MspInit+0xec>)
 800f924:	f043 0304 	orr.w	r3, r3, #4
 800f928:	6413      	str	r3, [r2, #64]	; 0x40
 800f92a:	4b15      	ldr	r3, [pc, #84]	; (800f980 <HAL_TIM_Encoder_MspInit+0xec>)
 800f92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f92e:	f003 0304 	and.w	r3, r3, #4
 800f932:	613b      	str	r3, [r7, #16]
 800f934:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f936:	2300      	movs	r3, #0
 800f938:	60fb      	str	r3, [r7, #12]
 800f93a:	4b11      	ldr	r3, [pc, #68]	; (800f980 <HAL_TIM_Encoder_MspInit+0xec>)
 800f93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f93e:	4a10      	ldr	r2, [pc, #64]	; (800f980 <HAL_TIM_Encoder_MspInit+0xec>)
 800f940:	f043 0302 	orr.w	r3, r3, #2
 800f944:	6313      	str	r3, [r2, #48]	; 0x30
 800f946:	4b0e      	ldr	r3, [pc, #56]	; (800f980 <HAL_TIM_Encoder_MspInit+0xec>)
 800f948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f94a:	f003 0302 	and.w	r3, r3, #2
 800f94e:	60fb      	str	r3, [r7, #12]
 800f950:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f952:	23c0      	movs	r3, #192	; 0xc0
 800f954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f956:	2302      	movs	r3, #2
 800f958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f95a:	2300      	movs	r3, #0
 800f95c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f95e:	2300      	movs	r3, #0
 800f960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800f962:	2302      	movs	r3, #2
 800f964:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f966:	f107 031c 	add.w	r3, r7, #28
 800f96a:	4619      	mov	r1, r3
 800f96c:	4807      	ldr	r0, [pc, #28]	; (800f98c <HAL_TIM_Encoder_MspInit+0xf8>)
 800f96e:	f003 f92d 	bl	8012bcc <HAL_GPIO_Init>
}
 800f972:	bf00      	nop
 800f974:	3730      	adds	r7, #48	; 0x30
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	40000400 	.word	0x40000400
 800f980:	40023800 	.word	0x40023800
 800f984:	40020000 	.word	0x40020000
 800f988:	40000800 	.word	0x40000800
 800f98c:	40020400 	.word	0x40020400

0800f990 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b08c      	sub	sp, #48	; 0x30
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f998:	f107 031c 	add.w	r3, r7, #28
 800f99c:	2200      	movs	r2, #0
 800f99e:	601a      	str	r2, [r3, #0]
 800f9a0:	605a      	str	r2, [r3, #4]
 800f9a2:	609a      	str	r2, [r3, #8]
 800f9a4:	60da      	str	r2, [r3, #12]
 800f9a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9b0:	d11e      	bne.n	800f9f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	61bb      	str	r3, [r7, #24]
 800f9b6:	4b43      	ldr	r3, [pc, #268]	; (800fac4 <HAL_TIM_MspPostInit+0x134>)
 800f9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9ba:	4a42      	ldr	r2, [pc, #264]	; (800fac4 <HAL_TIM_MspPostInit+0x134>)
 800f9bc:	f043 0301 	orr.w	r3, r3, #1
 800f9c0:	6313      	str	r3, [r2, #48]	; 0x30
 800f9c2:	4b40      	ldr	r3, [pc, #256]	; (800fac4 <HAL_TIM_MspPostInit+0x134>)
 800f9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9c6:	f003 0301 	and.w	r3, r3, #1
 800f9ca:	61bb      	str	r3, [r7, #24]
 800f9cc:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f9ce:	2308      	movs	r3, #8
 800f9d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9d2:	2302      	movs	r3, #2
 800f9d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f9da:	2303      	movs	r3, #3
 800f9dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800f9de:	2301      	movs	r3, #1
 800f9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f9e2:	f107 031c 	add.w	r3, r7, #28
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	4837      	ldr	r0, [pc, #220]	; (800fac8 <HAL_TIM_MspPostInit+0x138>)
 800f9ea:	f003 f8ef 	bl	8012bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800f9ee:	e064      	b.n	800faba <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a35      	ldr	r2, [pc, #212]	; (800facc <HAL_TIM_MspPostInit+0x13c>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d11e      	bne.n	800fa38 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	617b      	str	r3, [r7, #20]
 800f9fe:	4b31      	ldr	r3, [pc, #196]	; (800fac4 <HAL_TIM_MspPostInit+0x134>)
 800fa00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa02:	4a30      	ldr	r2, [pc, #192]	; (800fac4 <HAL_TIM_MspPostInit+0x134>)
 800fa04:	f043 0301 	orr.w	r3, r3, #1
 800fa08:	6313      	str	r3, [r2, #48]	; 0x30
 800fa0a:	4b2e      	ldr	r3, [pc, #184]	; (800fac4 <HAL_TIM_MspPostInit+0x134>)
 800fa0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa0e:	f003 0301 	and.w	r3, r3, #1
 800fa12:	617b      	str	r3, [r7, #20]
 800fa14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800fa16:	2302      	movs	r3, #2
 800fa18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa1a:	2302      	movs	r3, #2
 800fa1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fa22:	2300      	movs	r3, #0
 800fa24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800fa26:	2302      	movs	r3, #2
 800fa28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa2a:	f107 031c 	add.w	r3, r7, #28
 800fa2e:	4619      	mov	r1, r3
 800fa30:	4825      	ldr	r0, [pc, #148]	; (800fac8 <HAL_TIM_MspPostInit+0x138>)
 800fa32:	f003 f8cb 	bl	8012bcc <HAL_GPIO_Init>
}
 800fa36:	e040      	b.n	800faba <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4a24      	ldr	r2, [pc, #144]	; (800fad0 <HAL_TIM_MspPostInit+0x140>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d13b      	bne.n	800faba <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fa42:	2300      	movs	r3, #0
 800fa44:	613b      	str	r3, [r7, #16]
 800fa46:	4b1f      	ldr	r3, [pc, #124]	; (800fac4 <HAL_TIM_MspPostInit+0x134>)
 800fa48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa4a:	4a1e      	ldr	r2, [pc, #120]	; (800fac4 <HAL_TIM_MspPostInit+0x134>)
 800fa4c:	f043 0301 	orr.w	r3, r3, #1
 800fa50:	6313      	str	r3, [r2, #48]	; 0x30
 800fa52:	4b1c      	ldr	r3, [pc, #112]	; (800fac4 <HAL_TIM_MspPostInit+0x134>)
 800fa54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa56:	f003 0301 	and.w	r3, r3, #1
 800fa5a:	613b      	str	r3, [r7, #16]
 800fa5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fa5e:	2300      	movs	r3, #0
 800fa60:	60fb      	str	r3, [r7, #12]
 800fa62:	4b18      	ldr	r3, [pc, #96]	; (800fac4 <HAL_TIM_MspPostInit+0x134>)
 800fa64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa66:	4a17      	ldr	r2, [pc, #92]	; (800fac4 <HAL_TIM_MspPostInit+0x134>)
 800fa68:	f043 0304 	orr.w	r3, r3, #4
 800fa6c:	6313      	str	r3, [r2, #48]	; 0x30
 800fa6e:	4b15      	ldr	r3, [pc, #84]	; (800fac4 <HAL_TIM_MspPostInit+0x134>)
 800fa70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa72:	f003 0304 	and.w	r3, r3, #4
 800fa76:	60fb      	str	r3, [r7, #12]
 800fa78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800fa7a:	2320      	movs	r3, #32
 800fa7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa7e:	2302      	movs	r3, #2
 800fa80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa82:	2300      	movs	r3, #0
 800fa84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fa86:	2300      	movs	r3, #0
 800fa88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800fa8a:	2303      	movs	r3, #3
 800fa8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa8e:	f107 031c 	add.w	r3, r7, #28
 800fa92:	4619      	mov	r1, r3
 800fa94:	480c      	ldr	r0, [pc, #48]	; (800fac8 <HAL_TIM_MspPostInit+0x138>)
 800fa96:	f003 f899 	bl	8012bcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800fa9a:	2340      	movs	r3, #64	; 0x40
 800fa9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa9e:	2302      	movs	r3, #2
 800faa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800faa2:	2300      	movs	r3, #0
 800faa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800faa6:	2300      	movs	r3, #0
 800faa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800faaa:	2303      	movs	r3, #3
 800faac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800faae:	f107 031c 	add.w	r3, r7, #28
 800fab2:	4619      	mov	r1, r3
 800fab4:	4807      	ldr	r0, [pc, #28]	; (800fad4 <HAL_TIM_MspPostInit+0x144>)
 800fab6:	f003 f889 	bl	8012bcc <HAL_GPIO_Init>
}
 800faba:	bf00      	nop
 800fabc:	3730      	adds	r7, #48	; 0x30
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	40023800 	.word	0x40023800
 800fac8:	40020000 	.word	0x40020000
 800facc:	40000c00 	.word	0x40000c00
 800fad0:	40010400 	.word	0x40010400
 800fad4:	40020800 	.word	0x40020800

0800fad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b08a      	sub	sp, #40	; 0x28
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fae0:	f107 0314 	add.w	r3, r7, #20
 800fae4:	2200      	movs	r2, #0
 800fae6:	601a      	str	r2, [r3, #0]
 800fae8:	605a      	str	r2, [r3, #4]
 800faea:	609a      	str	r2, [r3, #8]
 800faec:	60da      	str	r2, [r3, #12]
 800faee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4a19      	ldr	r2, [pc, #100]	; (800fb5c <HAL_UART_MspInit+0x84>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d12c      	bne.n	800fb54 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800fafa:	2300      	movs	r3, #0
 800fafc:	613b      	str	r3, [r7, #16]
 800fafe:	4b18      	ldr	r3, [pc, #96]	; (800fb60 <HAL_UART_MspInit+0x88>)
 800fb00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb02:	4a17      	ldr	r2, [pc, #92]	; (800fb60 <HAL_UART_MspInit+0x88>)
 800fb04:	f043 0310 	orr.w	r3, r3, #16
 800fb08:	6453      	str	r3, [r2, #68]	; 0x44
 800fb0a:	4b15      	ldr	r3, [pc, #84]	; (800fb60 <HAL_UART_MspInit+0x88>)
 800fb0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb0e:	f003 0310 	and.w	r3, r3, #16
 800fb12:	613b      	str	r3, [r7, #16]
 800fb14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fb16:	2300      	movs	r3, #0
 800fb18:	60fb      	str	r3, [r7, #12]
 800fb1a:	4b11      	ldr	r3, [pc, #68]	; (800fb60 <HAL_UART_MspInit+0x88>)
 800fb1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb1e:	4a10      	ldr	r2, [pc, #64]	; (800fb60 <HAL_UART_MspInit+0x88>)
 800fb20:	f043 0301 	orr.w	r3, r3, #1
 800fb24:	6313      	str	r3, [r2, #48]	; 0x30
 800fb26:	4b0e      	ldr	r3, [pc, #56]	; (800fb60 <HAL_UART_MspInit+0x88>)
 800fb28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb2a:	f003 0301 	and.w	r3, r3, #1
 800fb2e:	60fb      	str	r3, [r7, #12]
 800fb30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800fb32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800fb36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb38:	2302      	movs	r3, #2
 800fb3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fb40:	2303      	movs	r3, #3
 800fb42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800fb44:	2307      	movs	r3, #7
 800fb46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fb48:	f107 0314 	add.w	r3, r7, #20
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	4805      	ldr	r0, [pc, #20]	; (800fb64 <HAL_UART_MspInit+0x8c>)
 800fb50:	f003 f83c 	bl	8012bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800fb54:	bf00      	nop
 800fb56:	3728      	adds	r7, #40	; 0x28
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	40011000 	.word	0x40011000
 800fb60:	40023800 	.word	0x40023800
 800fb64:	40020000 	.word	0x40020000

0800fb68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800fb6c:	e7fe      	b.n	800fb6c <NMI_Handler+0x4>

0800fb6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800fb6e:	b480      	push	{r7}
 800fb70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800fb72:	e7fe      	b.n	800fb72 <HardFault_Handler+0x4>

0800fb74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800fb74:	b480      	push	{r7}
 800fb76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800fb78:	e7fe      	b.n	800fb78 <MemManage_Handler+0x4>

0800fb7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800fb7a:	b480      	push	{r7}
 800fb7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800fb7e:	e7fe      	b.n	800fb7e <BusFault_Handler+0x4>

0800fb80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800fb80:	b480      	push	{r7}
 800fb82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800fb84:	e7fe      	b.n	800fb84 <UsageFault_Handler+0x4>

0800fb86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800fb86:	b480      	push	{r7}
 800fb88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800fb8a:	bf00      	nop
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr

0800fb94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800fb94:	b480      	push	{r7}
 800fb96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800fb98:	bf00      	nop
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba0:	4770      	bx	lr

0800fba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800fba2:	b480      	push	{r7}
 800fba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800fba6:	bf00      	nop
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbae:	4770      	bx	lr

0800fbb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800fbb4:	f001 fcb0 	bl	8011518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800fbb8:	bf00      	nop
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800fbc0:	4802      	ldr	r0, [pc, #8]	; (800fbcc <TIM1_UP_TIM10_IRQHandler+0x10>)
 800fbc2:	f004 ff2f 	bl	8014a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800fbc6:	bf00      	nop
 800fbc8:	bd80      	pop	{r7, pc}
 800fbca:	bf00      	nop
 800fbcc:	200009e0 	.word	0x200009e0

0800fbd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800fbd4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800fbd8:	f003 f9ac 	bl	8012f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800fbdc:	bf00      	nop
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800fbe4:	4802      	ldr	r0, [pc, #8]	; (800fbf0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800fbe6:	f004 ff1d 	bl	8014a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800fbea:	bf00      	nop
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	20000798 	.word	0x20000798

0800fbf4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800fbf8:	4802      	ldr	r0, [pc, #8]	; (800fc04 <DMA2_Stream0_IRQHandler+0x10>)
 800fbfa:	f002 fb95 	bl	8012328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800fbfe:	bf00      	nop
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	20000980 	.word	0x20000980

0800fc08 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800fc0c:	4802      	ldr	r0, [pc, #8]	; (800fc18 <DMA2_Stream2_IRQHandler+0x10>)
 800fc0e:	f002 fb8b 	bl	8012328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800fc12:	bf00      	nop
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	20000a20 	.word	0x20000a20

0800fc1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800fc20:	4b08      	ldr	r3, [pc, #32]	; (800fc44 <SystemInit+0x28>)
 800fc22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc26:	4a07      	ldr	r2, [pc, #28]	; (800fc44 <SystemInit+0x28>)
 800fc28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fc2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800fc30:	4b04      	ldr	r3, [pc, #16]	; (800fc44 <SystemInit+0x28>)
 800fc32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fc36:	609a      	str	r2, [r3, #8]
#endif
}
 800fc38:	bf00      	nop
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop
 800fc44:	e000ed00 	.word	0xe000ed00

0800fc48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b086      	sub	sp, #24
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fc54:	2300      	movs	r3, #0
 800fc56:	617b      	str	r3, [r7, #20]
 800fc58:	e00a      	b.n	800fc70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800fc5a:	f7fe fe5d 	bl	800e918 <__io_getchar>
 800fc5e:	4601      	mov	r1, r0
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	1c5a      	adds	r2, r3, #1
 800fc64:	60ba      	str	r2, [r7, #8]
 800fc66:	b2ca      	uxtb	r2, r1
 800fc68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	3301      	adds	r3, #1
 800fc6e:	617b      	str	r3, [r7, #20]
 800fc70:	697a      	ldr	r2, [r7, #20]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	dbf0      	blt.n	800fc5a <_read+0x12>
	}

return len;
 800fc78:	687b      	ldr	r3, [r7, #4]
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3718      	adds	r7, #24
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b086      	sub	sp, #24
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	60f8      	str	r0, [r7, #12]
 800fc8a:	60b9      	str	r1, [r7, #8]
 800fc8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fc8e:	2300      	movs	r3, #0
 800fc90:	617b      	str	r3, [r7, #20]
 800fc92:	e009      	b.n	800fca8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	1c5a      	adds	r2, r3, #1
 800fc98:	60ba      	str	r2, [r7, #8]
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7fe fe29 	bl	800e8f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	3301      	adds	r3, #1
 800fca6:	617b      	str	r3, [r7, #20]
 800fca8:	697a      	ldr	r2, [r7, #20]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	dbf1      	blt.n	800fc94 <_write+0x12>
	}
	return len;
 800fcb0:	687b      	ldr	r3, [r7, #4]
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3718      	adds	r7, #24
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}

0800fcba <_close>:

int _close(int file)
{
 800fcba:	b480      	push	{r7}
 800fcbc:	b083      	sub	sp, #12
 800fcbe:	af00      	add	r7, sp, #0
 800fcc0:	6078      	str	r0, [r7, #4]
	return -1;
 800fcc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	370c      	adds	r7, #12
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr

0800fcd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800fcd2:	b480      	push	{r7}
 800fcd4:	b083      	sub	sp, #12
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	6078      	str	r0, [r7, #4]
 800fcda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fce2:	605a      	str	r2, [r3, #4]
	return 0;
 800fce4:	2300      	movs	r3, #0
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	370c      	adds	r7, #12
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr

0800fcf2 <_isatty>:

int _isatty(int file)
{
 800fcf2:	b480      	push	{r7}
 800fcf4:	b083      	sub	sp, #12
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]
	return 1;
 800fcfa:	2301      	movs	r3, #1
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	370c      	adds	r7, #12
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	60f8      	str	r0, [r7, #12]
 800fd10:	60b9      	str	r1, [r7, #8]
 800fd12:	607a      	str	r2, [r7, #4]
	return 0;
 800fd14:	2300      	movs	r3, #0
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3714      	adds	r7, #20
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr
	...

0800fd24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b086      	sub	sp, #24
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800fd2c:	4a14      	ldr	r2, [pc, #80]	; (800fd80 <_sbrk+0x5c>)
 800fd2e:	4b15      	ldr	r3, [pc, #84]	; (800fd84 <_sbrk+0x60>)
 800fd30:	1ad3      	subs	r3, r2, r3
 800fd32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800fd38:	4b13      	ldr	r3, [pc, #76]	; (800fd88 <_sbrk+0x64>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d102      	bne.n	800fd46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800fd40:	4b11      	ldr	r3, [pc, #68]	; (800fd88 <_sbrk+0x64>)
 800fd42:	4a12      	ldr	r2, [pc, #72]	; (800fd8c <_sbrk+0x68>)
 800fd44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800fd46:	4b10      	ldr	r3, [pc, #64]	; (800fd88 <_sbrk+0x64>)
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	693a      	ldr	r2, [r7, #16]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d207      	bcs.n	800fd64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800fd54:	f006 fbf2 	bl	801653c <__errno>
 800fd58:	4602      	mov	r2, r0
 800fd5a:	230c      	movs	r3, #12
 800fd5c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800fd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd62:	e009      	b.n	800fd78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800fd64:	4b08      	ldr	r3, [pc, #32]	; (800fd88 <_sbrk+0x64>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800fd6a:	4b07      	ldr	r3, [pc, #28]	; (800fd88 <_sbrk+0x64>)
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4413      	add	r3, r2
 800fd72:	4a05      	ldr	r2, [pc, #20]	; (800fd88 <_sbrk+0x64>)
 800fd74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800fd76:	68fb      	ldr	r3, [r7, #12]
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3718      	adds	r7, #24
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	20020000 	.word	0x20020000
 800fd84:	00000400 	.word	0x00000400
 800fd88:	2000023c 	.word	0x2000023c
 800fd8c:	20000aa8 	.word	0x20000aa8

0800fd90 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800fd90:	b580      	push	{r7, lr}
 800fd92:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800fd94:	2203      	movs	r2, #3
 800fd96:	490a      	ldr	r1, [pc, #40]	; (800fdc0 <ADCStart+0x30>)
 800fd98:	480a      	ldr	r0, [pc, #40]	; (800fdc4 <ADCStart+0x34>)
 800fd9a:	f001 fc43 	bl	8011624 <HAL_ADC_Start_DMA>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d001      	beq.n	800fda8 <ADCStart+0x18>
	{
		Error_Handler();
 800fda4:	f7ff fb9a 	bl	800f4dc <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800fda8:	2202      	movs	r2, #2
 800fdaa:	4907      	ldr	r1, [pc, #28]	; (800fdc8 <ADCStart+0x38>)
 800fdac:	4807      	ldr	r0, [pc, #28]	; (800fdcc <ADCStart+0x3c>)
 800fdae:	f001 fc39 	bl	8011624 <HAL_ADC_Start_DMA>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d001      	beq.n	800fdbc <ADCStart+0x2c>
	{
		Error_Handler();
 800fdb8:	f7ff fb90 	bl	800f4dc <Error_Handler>
	}

}
 800fdbc:	bf00      	nop
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	200002c0 	.word	0x200002c0
 800fdc4:	200008f8 	.word	0x200008f8
 800fdc8:	200002cc 	.word	0x200002cc
 800fdcc:	20000818 	.word	0x20000818

0800fdd0 <ADCStop>:
void ADCStop()
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800fdd4:	480e      	ldr	r0, [pc, #56]	; (800fe10 <ADCStop+0x40>)
 800fdd6:	f001 fd17 	bl	8011808 <HAL_ADC_Stop_DMA>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d007      	beq.n	800fdf0 <ADCStop+0x20>
	{
		printf("な\r\n");
 800fde0:	480c      	ldr	r0, [pc, #48]	; (800fe14 <ADCStop+0x44>)
 800fde2:	f007 fa9b 	bl	801731c <puts>
		Error_Handler();
 800fde6:	f7ff fb79 	bl	800f4dc <Error_Handler>
		printf("に\r\n");
 800fdea:	480b      	ldr	r0, [pc, #44]	; (800fe18 <ADCStop+0x48>)
 800fdec:	f007 fa96 	bl	801731c <puts>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800fdf0:	480a      	ldr	r0, [pc, #40]	; (800fe1c <ADCStop+0x4c>)
 800fdf2:	f001 fd09 	bl	8011808 <HAL_ADC_Stop_DMA>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d007      	beq.n	800fe0c <ADCStop+0x3c>
	{
		printf("ぬ\r\n");
 800fdfc:	4808      	ldr	r0, [pc, #32]	; (800fe20 <ADCStop+0x50>)
 800fdfe:	f007 fa8d 	bl	801731c <puts>
		Error_Handler();
 800fe02:	f7ff fb6b 	bl	800f4dc <Error_Handler>
		printf("ね\r\n");
 800fe06:	4807      	ldr	r0, [pc, #28]	; (800fe24 <ADCStop+0x54>)
 800fe08:	f007 fa88 	bl	801731c <puts>
	}
}
 800fe0c:	bf00      	nop
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	200008f8 	.word	0x200008f8
 800fe14:	0801b6e8 	.word	0x0801b6e8
 800fe18:	0801b6f0 	.word	0x0801b6f0
 800fe1c:	20000818 	.word	0x20000818
 800fe20:	0801b6f8 	.word	0x0801b6f8
 800fe24:	0801b700 	.word	0x0801b700

0800fe28 <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 800fe28:	b480      	push	{r7}
 800fe2a:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800fe2c:	4b05      	ldr	r3, [pc, #20]	; (800fe44 <FLASH_Unlock+0x1c>)
 800fe2e:	4a06      	ldr	r2, [pc, #24]	; (800fe48 <FLASH_Unlock+0x20>)
 800fe30:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800fe32:	4b04      	ldr	r3, [pc, #16]	; (800fe44 <FLASH_Unlock+0x1c>)
 800fe34:	4a05      	ldr	r2, [pc, #20]	; (800fe4c <FLASH_Unlock+0x24>)
 800fe36:	605a      	str	r2, [r3, #4]
}
 800fe38:	bf00      	nop
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr
 800fe42:	bf00      	nop
 800fe44:	40023c00 	.word	0x40023c00
 800fe48:	45670123 	.word	0x45670123
 800fe4c:	cdef89ab 	.word	0xcdef89ab

0800fe50 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800fe50:	b480      	push	{r7}
 800fe52:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800fe54:	4b05      	ldr	r3, [pc, #20]	; (800fe6c <FLASH_Lock+0x1c>)
 800fe56:	691b      	ldr	r3, [r3, #16]
 800fe58:	4a04      	ldr	r2, [pc, #16]	; (800fe6c <FLASH_Lock+0x1c>)
 800fe5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fe5e:	6113      	str	r3, [r2, #16]

}
 800fe60:	bf00      	nop
 800fe62:	46bd      	mov	sp, r7
 800fe64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	40023c00 	.word	0x40023c00

0800fe70 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800fe70:	b480      	push	{r7}
 800fe72:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800fe74:	bf00      	nop
 800fe76:	4b05      	ldr	r3, [pc, #20]	; (800fe8c <FLASH_WaitBusy+0x1c>)
 800fe78:	68db      	ldr	r3, [r3, #12]
 800fe7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d1f9      	bne.n	800fe76 <FLASH_WaitBusy+0x6>
}
 800fe82:	bf00      	nop
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr
 800fe8c:	40023c00 	.word	0x40023c00

0800fe90 <FLASH_Write_Word>:

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800fe9a:	f7ff ffc5 	bl	800fe28 <FLASH_Unlock>

	FLASH_WaitBusy();
 800fe9e:	f7ff ffe7 	bl	800fe70 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800fea2:	4b0e      	ldr	r3, [pc, #56]	; (800fedc <FLASH_Write_Word+0x4c>)
 800fea4:	691b      	ldr	r3, [r3, #16]
 800fea6:	4a0d      	ldr	r2, [pc, #52]	; (800fedc <FLASH_Write_Word+0x4c>)
 800fea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800feac:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800feae:	4b0b      	ldr	r3, [pc, #44]	; (800fedc <FLASH_Write_Word+0x4c>)
 800feb0:	691b      	ldr	r3, [r3, #16]
 800feb2:	4a0a      	ldr	r2, [pc, #40]	; (800fedc <FLASH_Write_Word+0x4c>)
 800feb4:	f043 0301 	orr.w	r3, r3, #1
 800feb8:	6113      	str	r3, [r2, #16]

	*(__IO uint32_t*)address = data;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	683a      	ldr	r2, [r7, #0]
 800febe:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800fec0:	f7ff ffd6 	bl	800fe70 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800fec4:	4b05      	ldr	r3, [pc, #20]	; (800fedc <FLASH_Write_Word+0x4c>)
 800fec6:	691b      	ldr	r3, [r3, #16]
 800fec8:	4a04      	ldr	r2, [pc, #16]	; (800fedc <FLASH_Write_Word+0x4c>)
 800feca:	f023 0301 	bic.w	r3, r3, #1
 800fece:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800fed0:	f7ff ffbe 	bl	800fe50 <FLASH_Lock>
}
 800fed4:	bf00      	nop
 800fed6:	3708      	adds	r7, #8
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	40023c00 	.word	0x40023c00

0800fee0 <FLASH_Read_Word>:
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800feea:	f7ff ff9d 	bl	800fe28 <FLASH_Unlock>

	FLASH_WaitBusy();
 800feee:	f7ff ffbf 	bl	800fe70 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800fef2:	4b0f      	ldr	r3, [pc, #60]	; (800ff30 <FLASH_Read_Word+0x50>)
 800fef4:	691b      	ldr	r3, [r3, #16]
 800fef6:	4a0e      	ldr	r2, [pc, #56]	; (800ff30 <FLASH_Read_Word+0x50>)
 800fef8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fefc:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800fefe:	4b0c      	ldr	r3, [pc, #48]	; (800ff30 <FLASH_Read_Word+0x50>)
 800ff00:	691b      	ldr	r3, [r3, #16]
 800ff02:	4a0b      	ldr	r2, [pc, #44]	; (800ff30 <FLASH_Read_Word+0x50>)
 800ff04:	f043 0301 	orr.w	r3, r3, #1
 800ff08:	6113      	str	r3, [r2, #16]

	* data = *(__IO uint32_t*)address;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ff12:	f7ff ffad 	bl	800fe70 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ff16:	4b06      	ldr	r3, [pc, #24]	; (800ff30 <FLASH_Read_Word+0x50>)
 800ff18:	691b      	ldr	r3, [r3, #16]
 800ff1a:	4a05      	ldr	r2, [pc, #20]	; (800ff30 <FLASH_Read_Word+0x50>)
 800ff1c:	f023 0301 	bic.w	r3, r3, #1
 800ff20:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ff22:	f7ff ff95 	bl	800fe50 <FLASH_Lock>
}
 800ff26:	bf00      	nop
 800ff28:	3708      	adds	r7, #8
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	40023c00 	.word	0x40023c00

0800ff34 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 800ff40:	f7ff ff72 	bl	800fe28 <FLASH_Unlock>

	FLASH_WaitBusy();
 800ff44:	f7ff ff94 	bl	800fe70 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ff48:	4b0e      	ldr	r3, [pc, #56]	; (800ff84 <FLASH_Write_Word_F+0x50>)
 800ff4a:	691b      	ldr	r3, [r3, #16]
 800ff4c:	4a0d      	ldr	r2, [pc, #52]	; (800ff84 <FLASH_Write_Word_F+0x50>)
 800ff4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ff52:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ff54:	4b0b      	ldr	r3, [pc, #44]	; (800ff84 <FLASH_Write_Word_F+0x50>)
 800ff56:	691b      	ldr	r3, [r3, #16]
 800ff58:	4a0a      	ldr	r2, [pc, #40]	; (800ff84 <FLASH_Write_Word_F+0x50>)
 800ff5a:	f043 0301 	orr.w	r3, r3, #1
 800ff5e:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	683a      	ldr	r2, [r7, #0]
 800ff64:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ff66:	f7ff ff83 	bl	800fe70 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ff6a:	4b06      	ldr	r3, [pc, #24]	; (800ff84 <FLASH_Write_Word_F+0x50>)
 800ff6c:	691b      	ldr	r3, [r3, #16]
 800ff6e:	4a05      	ldr	r2, [pc, #20]	; (800ff84 <FLASH_Write_Word_F+0x50>)
 800ff70:	f023 0301 	bic.w	r3, r3, #1
 800ff74:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ff76:	f7ff ff6b 	bl	800fe50 <FLASH_Lock>
}
 800ff7a:	bf00      	nop
 800ff7c:	3708      	adds	r7, #8
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	bf00      	nop
 800ff84:	40023c00 	.word	0x40023c00

0800ff88 <FLASH_Read_Word_F>:
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
 800ff90:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800ff92:	f7ff ff49 	bl	800fe28 <FLASH_Unlock>

	FLASH_WaitBusy();
 800ff96:	f7ff ff6b 	bl	800fe70 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ff9a:	4b0f      	ldr	r3, [pc, #60]	; (800ffd8 <FLASH_Read_Word_F+0x50>)
 800ff9c:	691b      	ldr	r3, [r3, #16]
 800ff9e:	4a0e      	ldr	r2, [pc, #56]	; (800ffd8 <FLASH_Read_Word_F+0x50>)
 800ffa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ffa4:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ffa6:	4b0c      	ldr	r3, [pc, #48]	; (800ffd8 <FLASH_Read_Word_F+0x50>)
 800ffa8:	691b      	ldr	r3, [r3, #16]
 800ffaa:	4a0b      	ldr	r2, [pc, #44]	; (800ffd8 <FLASH_Read_Word_F+0x50>)
 800ffac:	f043 0301 	orr.w	r3, r3, #1
 800ffb0:	6113      	str	r3, [r2, #16]

	* data = *(__IO float*)address;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ffba:	f7ff ff59 	bl	800fe70 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ffbe:	4b06      	ldr	r3, [pc, #24]	; (800ffd8 <FLASH_Read_Word_F+0x50>)
 800ffc0:	691b      	ldr	r3, [r3, #16]
 800ffc2:	4a05      	ldr	r2, [pc, #20]	; (800ffd8 <FLASH_Read_Word_F+0x50>)
 800ffc4:	f023 0301 	bic.w	r3, r3, #1
 800ffc8:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ffca:	f7ff ff41 	bl	800fe50 <FLASH_Lock>
}
 800ffce:	bf00      	nop
 800ffd0:	3708      	adds	r7, #8
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop
 800ffd8:	40023c00 	.word	0x40023c00

0800ffdc <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b088      	sub	sp, #32
 800ffe0:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800ffe2:	f002 fc09 	bl	80127f8 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800ffea:	2301      	movs	r3, #1
 800ffec:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800ffee:	2302      	movs	r3, #2
 800fff0:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800fff2:	2301      	movs	r3, #1
 800fff4:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800fff6:	1d3a      	adds	r2, r7, #4
 800fff8:	f107 0308 	add.w	r3, r7, #8
 800fffc:	4611      	mov	r1, r2
 800fffe:	4618      	mov	r0, r3
 8010000:	f002 fcc2 	bl	8012988 <HAL_FLASHEx_Erase>
 8010004:	4603      	mov	r3, r0
 8010006:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 8010008:	f002 fc18 	bl	801283c <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 801000c:	7ffb      	ldrb	r3, [r7, #31]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d105      	bne.n	801001e <Flash_clear_sector1+0x42>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010018:	d101      	bne.n	801001e <Flash_clear_sector1+0x42>
 801001a:	2301      	movs	r3, #1
 801001c:	e000      	b.n	8010020 <Flash_clear_sector1+0x44>
 801001e:	2300      	movs	r3, #0
 8010020:	f003 0301 	and.w	r3, r3, #1
 8010024:	b2db      	uxtb	r3, r3
}
 8010026:	4618      	mov	r0, r3
 8010028:	3720      	adds	r7, #32
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}

0801002e <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 801002e:	b580      	push	{r7, lr}
 8010030:	b088      	sub	sp, #32
 8010032:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8010034:	f002 fbe0 	bl	80127f8 <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8010038:	2300      	movs	r3, #0
 801003a:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 801003c:	2309      	movs	r3, #9
 801003e:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8010040:	2302      	movs	r3, #2
 8010042:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 8010044:	2301      	movs	r3, #1
 8010046:	617b      	str	r3, [r7, #20]

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 8010048:	1d3a      	adds	r2, r7, #4
 801004a:	f107 0308 	add.w	r3, r7, #8
 801004e:	4611      	mov	r1, r2
 8010050:	4618      	mov	r0, r3
 8010052:	f002 fc99 	bl	8012988 <HAL_FLASHEx_Erase>
 8010056:	4603      	mov	r3, r0
 8010058:	77fb      	strb	r3, [r7, #31]

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 801005a:	f002 fbef 	bl	801283c <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 801005e:	7ffb      	ldrb	r3, [r7, #31]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d105      	bne.n	8010070 <Flash_clear_sector9+0x42>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801006a:	d101      	bne.n	8010070 <Flash_clear_sector9+0x42>
 801006c:	2301      	movs	r3, #1
 801006e:	e000      	b.n	8010072 <Flash_clear_sector9+0x44>
 8010070:	2300      	movs	r3, #0
 8010072:	f003 0301 	and.w	r3, r3, #1
 8010076:	b2db      	uxtb	r3, r3
}
 8010078:	4618      	mov	r0, r3
 801007a:	3720      	adds	r7, #32
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <read_byte>:
//		Error_Handler();
//		printf("エラー2\r\n");
//	}
//	printf("ok\r\n");
//}
inline uint8_t read_byte( uint8_t reg ) {
 8010080:	b580      	push	{r7, lr}
 8010082:	b084      	sub	sp, #16
 8010084:	af00      	add	r7, sp, #0
 8010086:	4603      	mov	r3, r0
 8010088:	71fb      	strb	r3, [r7, #7]

	uint8_t ret,val;

	ret = reg | 0x80;
 801008a:	79fb      	ldrb	r3, [r7, #7]
 801008c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010090:	b2db      	uxtb	r3, r3
 8010092:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8010094:	2200      	movs	r2, #0
 8010096:	2104      	movs	r1, #4
 8010098:	480d      	ldr	r0, [pc, #52]	; (80100d0 <read_byte+0x50>)
 801009a:	f002 ff31 	bl	8012f00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 801009e:	f107 010f 	add.w	r1, r7, #15
 80100a2:	2364      	movs	r3, #100	; 0x64
 80100a4:	2201      	movs	r2, #1
 80100a6:	480b      	ldr	r0, [pc, #44]	; (80100d4 <read_byte+0x54>)
 80100a8:	f003 fc22 	bl	80138f0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 80100ac:	f107 010e 	add.w	r1, r7, #14
 80100b0:	2364      	movs	r3, #100	; 0x64
 80100b2:	2201      	movs	r2, #1
 80100b4:	4807      	ldr	r0, [pc, #28]	; (80100d4 <read_byte+0x54>)
 80100b6:	f003 fd4f 	bl	8013b58 <HAL_SPI_Receive>
	CS_SET;
 80100ba:	2201      	movs	r2, #1
 80100bc:	2104      	movs	r1, #4
 80100be:	4804      	ldr	r0, [pc, #16]	; (80100d0 <read_byte+0x50>)
 80100c0:	f002 ff1e 	bl	8012f00 <HAL_GPIO_WritePin>
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return val;
 80100c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3710      	adds	r7, #16
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	40020c00 	.word	0x40020c00
 80100d4:	200008a0 	.word	0x200008a0

080100d8 <ReadIMU>:
inline float ReadIMU(uint8_t a, uint8_t b) {
 80100d8:	b580      	push	{r7, lr}
 80100da:	b086      	sub	sp, #24
 80100dc:	af00      	add	r7, sp, #0
 80100de:	4603      	mov	r3, r0
 80100e0:	460a      	mov	r2, r1
 80100e2:	71fb      	strb	r3, [r7, #7]
 80100e4:	4613      	mov	r3, r2
 80100e6:	71bb      	strb	r3, [r7, #6]

	uint8_t ret1, ret2,val1,val2;
	uint8_t ret[2] = {
 80100e8:	79fb      	ldrb	r3, [r7, #7]
 80100ea:	723b      	strb	r3, [r7, #8]
 80100ec:	79bb      	ldrb	r3, [r7, #6]
 80100ee:	727b      	strb	r3, [r7, #9]
			a,//0x37,
			b//0x38,
	};
	int16_t law_data;
	float res;
	ret1 = ret[0] | 0x80;
 80100f0:	7a3b      	ldrb	r3, [r7, #8]
 80100f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80100f6:	b2db      	uxtb	r3, r3
 80100f8:	73fb      	strb	r3, [r7, #15]
	ret2 = ret[1] | 0x80;
 80100fa:	7a7b      	ldrb	r3, [r7, #9]
 80100fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010100:	b2db      	uxtb	r3, r3
 8010102:	73bb      	strb	r3, [r7, #14]
//	reg[0] = 0x37;
//	reg[1] = 0x38;
//
//	ret = reg[0] | 0x80;
	CS_RESET;
 8010104:	2200      	movs	r2, #0
 8010106:	2104      	movs	r1, #4
 8010108:	4822      	ldr	r0, [pc, #136]	; (8010194 <ReadIMU+0xbc>)
 801010a:	f002 fef9 	bl	8012f00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 801010e:	f107 010f 	add.w	r1, r7, #15
 8010112:	2364      	movs	r3, #100	; 0x64
 8010114:	2201      	movs	r2, #1
 8010116:	4820      	ldr	r0, [pc, #128]	; (8010198 <ReadIMU+0xc0>)
 8010118:	f003 fbea 	bl	80138f0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 801011c:	f107 010d 	add.w	r1, r7, #13
 8010120:	2364      	movs	r3, #100	; 0x64
 8010122:	2201      	movs	r2, #1
 8010124:	481c      	ldr	r0, [pc, #112]	; (8010198 <ReadIMU+0xc0>)
 8010126:	f003 fd17 	bl	8013b58 <HAL_SPI_Receive>
	CS_SET;
 801012a:	2201      	movs	r2, #1
 801012c:	2104      	movs	r1, #4
 801012e:	4819      	ldr	r0, [pc, #100]	; (8010194 <ReadIMU+0xbc>)
 8010130:	f002 fee6 	bl	8012f00 <HAL_GPIO_WritePin>

//	ret = reg[1] | 0x80;
	CS_RESET;
 8010134:	2200      	movs	r2, #0
 8010136:	2104      	movs	r1, #4
 8010138:	4816      	ldr	r0, [pc, #88]	; (8010194 <ReadIMU+0xbc>)
 801013a:	f002 fee1 	bl	8012f00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 801013e:	f107 010e 	add.w	r1, r7, #14
 8010142:	2364      	movs	r3, #100	; 0x64
 8010144:	2201      	movs	r2, #1
 8010146:	4814      	ldr	r0, [pc, #80]	; (8010198 <ReadIMU+0xc0>)
 8010148:	f003 fbd2 	bl	80138f0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 801014c:	f107 010c 	add.w	r1, r7, #12
 8010150:	2364      	movs	r3, #100	; 0x64
 8010152:	2201      	movs	r2, #1
 8010154:	4810      	ldr	r0, [pc, #64]	; (8010198 <ReadIMU+0xc0>)
 8010156:	f003 fcff 	bl	8013b58 <HAL_SPI_Receive>
	CS_SET;
 801015a:	2201      	movs	r2, #1
 801015c:	2104      	movs	r1, #4
 801015e:	480d      	ldr	r0, [pc, #52]	; (8010194 <ReadIMU+0xbc>)
 8010160:	f002 fece 	bl	8012f00 <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 8010164:	7b7b      	ldrb	r3, [r7, #13]
 8010166:	021b      	lsls	r3, r3, #8
 8010168:	b21a      	sxth	r2, r3
 801016a:	7b3b      	ldrb	r3, [r7, #12]
 801016c:	b21b      	sxth	r3, r3
 801016e:	4313      	orrs	r3, r2
 8010170:	82fb      	strh	r3, [r7, #22]
	res = (float)law_data;
 8010172:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010176:	ee07 3a90 	vmov	s15, r3
 801017a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801017e:	edc7 7a04 	vstr	s15, [r7, #16]
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return res;
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	ee07 3a90 	vmov	s15, r3
}
 8010188:	eeb0 0a67 	vmov.f32	s0, s15
 801018c:	3718      	adds	r7, #24
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
 8010192:	bf00      	nop
 8010194:	40020c00 	.word	0x40020c00
 8010198:	200008a0 	.word	0x200008a0

0801019c <write_byte>:
void write_byte( uint8_t reg, uint8_t val )  {
 801019c:	b580      	push	{r7, lr}
 801019e:	b084      	sub	sp, #16
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	4603      	mov	r3, r0
 80101a4:	460a      	mov	r2, r1
 80101a6:	71fb      	strb	r3, [r7, #7]
 80101a8:	4613      	mov	r3, r2
 80101aa:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80101ac:	79fb      	ldrb	r3, [r7, #7]
 80101ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80101b6:	2200      	movs	r2, #0
 80101b8:	2104      	movs	r1, #4
 80101ba:	480c      	ldr	r0, [pc, #48]	; (80101ec <write_byte+0x50>)
 80101bc:	f002 fea0 	bl	8012f00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 80101c0:	f107 010f 	add.w	r1, r7, #15
 80101c4:	2364      	movs	r3, #100	; 0x64
 80101c6:	2201      	movs	r2, #1
 80101c8:	4809      	ldr	r0, [pc, #36]	; (80101f0 <write_byte+0x54>)
 80101ca:	f003 fb91 	bl	80138f0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 80101ce:	1db9      	adds	r1, r7, #6
 80101d0:	2364      	movs	r3, #100	; 0x64
 80101d2:	2201      	movs	r2, #1
 80101d4:	4806      	ldr	r0, [pc, #24]	; (80101f0 <write_byte+0x54>)
 80101d6:	f003 fb8b 	bl	80138f0 <HAL_SPI_Transmit>
	CS_SET;
 80101da:	2201      	movs	r2, #1
 80101dc:	2104      	movs	r1, #4
 80101de:	4803      	ldr	r0, [pc, #12]	; (80101ec <write_byte+0x50>)
 80101e0:	f002 fe8e 	bl	8012f00 <HAL_GPIO_WritePin>
}
 80101e4:	bf00      	nop
 80101e6:	3710      	adds	r7, #16
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	40020c00 	.word	0x40020c00
 80101f0:	200008a0 	.word	0x200008a0

080101f4 <IMU_init>:

uint8_t IMU_init() {
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b082      	sub	sp, #8
 80101f8:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80101fa:	2000      	movs	r0, #0
 80101fc:	f7ff ff40 	bl	8010080 <read_byte>
 8010200:	4603      	mov	r3, r0
 8010202:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 8010204:	79bb      	ldrb	r3, [r7, #6]
 8010206:	2be0      	cmp	r3, #224	; 0xe0
 8010208:	d119      	bne.n	801023e <IMU_init+0x4a>
		ret = 1;
 801020a:	2301      	movs	r3, #1
 801020c:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 801020e:	2101      	movs	r1, #1
 8010210:	2006      	movs	r0, #6
 8010212:	f7ff ffc3 	bl	801019c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8010216:	2110      	movs	r1, #16
 8010218:	2003      	movs	r0, #3
 801021a:	f7ff ffbf 	bl	801019c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 801021e:	2120      	movs	r1, #32
 8010220:	207f      	movs	r0, #127	; 0x7f
 8010222:	f7ff ffbb 	bl	801019c <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 8010226:	2117      	movs	r1, #23
 8010228:	2001      	movs	r0, #1
 801022a:	f7ff ffb7 	bl	801019c <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000

		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 801022e:	2117      	movs	r1, #23
 8010230:	2014      	movs	r0, #20
 8010232:	f7ff ffb3 	bl	801019c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16

		write_byte(0x7F,0x00);	//USER_BANK0
 8010236:	2100      	movs	r1, #0
 8010238:	207f      	movs	r0, #127	; 0x7f
 801023a:	f7ff ffaf 	bl	801019c <write_byte>
	}
	return ret;
 801023e:	79fb      	ldrb	r3, [r7, #7]
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 8010240:	4618      	mov	r0, r3
 8010242:	3708      	adds	r7, #8
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <IMU_Calib>:
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
}

void IMU_Calib(){
 8010248:	b580      	push	{r7, lr}
 801024a:	f5ad 5dfa 	sub.w	sp, sp, #8000	; 0x1f40
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0


	HAL_Delay(100);
 8010252:	2064      	movs	r0, #100	; 0x64
 8010254:	f001 f980 	bl	8011558 <HAL_Delay>

	int num = 2000;
 8010258:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801025c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8010260:	f102 0204 	add.w	r2, r2, #4
 8010264:	6013      	str	r3, [r2, #0]
	float zg_vals[2000]={0.0f};
 8010266:	f107 0310 	add.w	r3, r7, #16
 801026a:	3b0c      	subs	r3, #12
 801026c:	4618      	mov	r0, r3
 801026e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8010272:	461a      	mov	r2, r3
 8010274:	2100      	movs	r1, #0
 8010276:	f006 f996 	bl	80165a6 <memset>
	float sum=0;
 801027a:	f04f 0300 	mov.w	r3, #0
 801027e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8010282:	f102 020c 	add.w	r2, r2, #12
 8010286:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < num; i++){
 8010288:	2300      	movs	r3, #0
 801028a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801028e:	f102 0208 	add.w	r2, r2, #8
 8010292:	6013      	str	r3, [r2, #0]
 8010294:	e034      	b.n	8010300 <IMU_Calib+0xb8>
		zg_vals[i] = ZGyro;
 8010296:	4b2a      	ldr	r3, [pc, #168]	; (8010340 <IMU_Calib+0xf8>)
 8010298:	681a      	ldr	r2, [r3, #0]
 801029a:	f107 0310 	add.w	r3, r7, #16
 801029e:	3b0c      	subs	r3, #12
 80102a0:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 80102a4:	f101 0108 	add.w	r1, r1, #8
 80102a8:	6809      	ldr	r1, [r1, #0]
 80102aa:	0089      	lsls	r1, r1, #2
 80102ac:	440b      	add	r3, r1
 80102ae:	601a      	str	r2, [r3, #0]
		sum += zg_vals[i];
 80102b0:	f107 0310 	add.w	r3, r7, #16
 80102b4:	3b0c      	subs	r3, #12
 80102b6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80102ba:	f102 0208 	add.w	r2, r2, #8
 80102be:	6812      	ldr	r2, [r2, #0]
 80102c0:	0092      	lsls	r2, r2, #2
 80102c2:	4413      	add	r3, r2
 80102c4:	edd3 7a00 	vldr	s15, [r3]
 80102c8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80102cc:	f103 030c 	add.w	r3, r3, #12
 80102d0:	ed93 7a00 	vldr	s14, [r3]
 80102d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102d8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80102dc:	f103 030c 	add.w	r3, r3, #12
 80102e0:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 80102e4:	2002      	movs	r0, #2
 80102e6:	f001 f937 	bl	8011558 <HAL_Delay>
	for(int i = 0; i < num; i++){
 80102ea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80102ee:	f103 0308 	add.w	r3, r3, #8
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	3301      	adds	r3, #1
 80102f6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80102fa:	f102 0208 	add.w	r2, r2, #8
 80102fe:	6013      	str	r3, [r2, #0]
 8010300:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8010304:	f103 0308 	add.w	r3, r3, #8
 8010308:	681a      	ldr	r2, [r3, #0]
 801030a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801030e:	f103 0304 	add.w	r3, r3, #4
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	429a      	cmp	r2, r3
 8010316:	dbbe      	blt.n	8010296 <IMU_Calib+0x4e>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / 2000.0f;
 8010318:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801031c:	f103 030c 	add.w	r3, r3, #12
 8010320:	ed93 7a00 	vldr	s14, [r3]
 8010324:	eddf 6a07 	vldr	s13, [pc, #28]	; 8010344 <IMU_Calib+0xfc>
 8010328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801032c:	4b06      	ldr	r3, [pc, #24]	; (8010348 <IMU_Calib+0x100>)
 801032e:	edc3 7a00 	vstr	s15, [r3]
}
 8010332:	bf00      	nop
 8010334:	f507 57fa 	add.w	r7, r7, #8000	; 0x1f40
 8010338:	3710      	adds	r7, #16
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	200002d8 	.word	0x200002d8
 8010344:	44fa0000 	.word	0x44fa0000
 8010348:	200002d4 	.word	0x200002d4

0801034c <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 801034c:	b580      	push	{r7, lr}
 801034e:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8010350:	213c      	movs	r1, #60	; 0x3c
 8010352:	4804      	ldr	r0, [pc, #16]	; (8010364 <EncoderStart+0x18>)
 8010354:	f004 fae8 	bl	8014928 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8010358:	213c      	movs	r1, #60	; 0x3c
 801035a:	4803      	ldr	r0, [pc, #12]	; (8010368 <EncoderStart+0x1c>)
 801035c:	f004 fae4 	bl	8014928 <HAL_TIM_Encoder_Start>
}
 8010360:	bf00      	nop
 8010362:	bd80      	pop	{r7, pc}
 8010364:	20000860 	.word	0x20000860
 8010368:	200007d8 	.word	0x200007d8

0801036c <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 801036c:	b580      	push	{r7, lr}
 801036e:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 8010370:	2100      	movs	r1, #0
 8010372:	4804      	ldr	r0, [pc, #16]	; (8010384 <EmitterON+0x18>)
 8010374:	f004 f85c 	bl	8014430 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 8010378:	2100      	movs	r1, #0
 801037a:	4802      	ldr	r0, [pc, #8]	; (8010384 <EmitterON+0x18>)
 801037c:	f005 f96f 	bl	801565e <HAL_TIMEx_OCN_Start_IT>

}
 8010380:	bf00      	nop
 8010382:	bd80      	pop	{r7, pc}
 8010384:	20000798 	.word	0x20000798

08010388 <EmitterOFF>:
void EmitterOFF()
{
 8010388:	b580      	push	{r7, lr}
 801038a:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 801038c:	2100      	movs	r1, #0
 801038e:	4804      	ldr	r0, [pc, #16]	; (80103a0 <EmitterOFF+0x18>)
 8010390:	f004 f8d2 	bl	8014538 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 8010394:	2100      	movs	r1, #0
 8010396:	4802      	ldr	r0, [pc, #8]	; (80103a0 <EmitterOFF+0x18>)
 8010398:	f005 f9b6 	bl	8015708 <HAL_TIMEx_OCN_Stop_IT>

}
 801039c:	bf00      	nop
 801039e:	bd80      	pop	{r7, pc}
 80103a0:	20000798 	.word	0x20000798

080103a4 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2b07      	cmp	r3, #7
 80103b0:	f200 80ac 	bhi.w	801050c <ChangeLED+0x168>
 80103b4:	a201      	add	r2, pc, #4	; (adr r2, 80103bc <ChangeLED+0x18>)
 80103b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ba:	bf00      	nop
 80103bc:	080103dd 	.word	0x080103dd
 80103c0:	08010403 	.word	0x08010403
 80103c4:	08010429 	.word	0x08010429
 80103c8:	0801044f 	.word	0x0801044f
 80103cc:	08010475 	.word	0x08010475
 80103d0:	0801049b 	.word	0x0801049b
 80103d4:	080104c1 	.word	0x080104c1
 80103d8:	080104e7 	.word	0x080104e7
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80103dc:	2200      	movs	r2, #0
 80103de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80103e2:	484d      	ldr	r0, [pc, #308]	; (8010518 <ChangeLED+0x174>)
 80103e4:	f002 fd8c 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80103e8:	2200      	movs	r2, #0
 80103ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80103ee:	484a      	ldr	r0, [pc, #296]	; (8010518 <ChangeLED+0x174>)
 80103f0:	f002 fd86 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80103f4:	2200      	movs	r2, #0
 80103f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80103fa:	4848      	ldr	r0, [pc, #288]	; (801051c <ChangeLED+0x178>)
 80103fc:	f002 fd80 	bl	8012f00 <HAL_GPIO_WritePin>
		break;
 8010400:	e085      	b.n	801050e <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8010402:	2201      	movs	r2, #1
 8010404:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010408:	4843      	ldr	r0, [pc, #268]	; (8010518 <ChangeLED+0x174>)
 801040a:	f002 fd79 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 801040e:	2200      	movs	r2, #0
 8010410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010414:	4840      	ldr	r0, [pc, #256]	; (8010518 <ChangeLED+0x174>)
 8010416:	f002 fd73 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 801041a:	2200      	movs	r2, #0
 801041c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010420:	483e      	ldr	r0, [pc, #248]	; (801051c <ChangeLED+0x178>)
 8010422:	f002 fd6d 	bl	8012f00 <HAL_GPIO_WritePin>
		break;
 8010426:	e072      	b.n	801050e <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8010428:	2200      	movs	r2, #0
 801042a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801042e:	483a      	ldr	r0, [pc, #232]	; (8010518 <ChangeLED+0x174>)
 8010430:	f002 fd66 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8010434:	2201      	movs	r2, #1
 8010436:	f44f 7180 	mov.w	r1, #256	; 0x100
 801043a:	4837      	ldr	r0, [pc, #220]	; (8010518 <ChangeLED+0x174>)
 801043c:	f002 fd60 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010440:	2200      	movs	r2, #0
 8010442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010446:	4835      	ldr	r0, [pc, #212]	; (801051c <ChangeLED+0x178>)
 8010448:	f002 fd5a 	bl	8012f00 <HAL_GPIO_WritePin>

		break;
 801044c:	e05f      	b.n	801050e <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 801044e:	2201      	movs	r2, #1
 8010450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010454:	4830      	ldr	r0, [pc, #192]	; (8010518 <ChangeLED+0x174>)
 8010456:	f002 fd53 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 801045a:	2201      	movs	r2, #1
 801045c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010460:	482d      	ldr	r0, [pc, #180]	; (8010518 <ChangeLED+0x174>)
 8010462:	f002 fd4d 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010466:	2200      	movs	r2, #0
 8010468:	f44f 7100 	mov.w	r1, #512	; 0x200
 801046c:	482b      	ldr	r0, [pc, #172]	; (801051c <ChangeLED+0x178>)
 801046e:	f002 fd47 	bl	8012f00 <HAL_GPIO_WritePin>
		break;
 8010472:	e04c      	b.n	801050e <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8010474:	2200      	movs	r2, #0
 8010476:	f44f 7100 	mov.w	r1, #512	; 0x200
 801047a:	4827      	ldr	r0, [pc, #156]	; (8010518 <ChangeLED+0x174>)
 801047c:	f002 fd40 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8010480:	2200      	movs	r2, #0
 8010482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010486:	4824      	ldr	r0, [pc, #144]	; (8010518 <ChangeLED+0x174>)
 8010488:	f002 fd3a 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 801048c:	2201      	movs	r2, #1
 801048e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010492:	4822      	ldr	r0, [pc, #136]	; (801051c <ChangeLED+0x178>)
 8010494:	f002 fd34 	bl	8012f00 <HAL_GPIO_WritePin>
		break;
 8010498:	e039      	b.n	801050e <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 801049a:	2201      	movs	r2, #1
 801049c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80104a0:	481d      	ldr	r0, [pc, #116]	; (8010518 <ChangeLED+0x174>)
 80104a2:	f002 fd2d 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80104a6:	2200      	movs	r2, #0
 80104a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80104ac:	481a      	ldr	r0, [pc, #104]	; (8010518 <ChangeLED+0x174>)
 80104ae:	f002 fd27 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80104b2:	2201      	movs	r2, #1
 80104b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80104b8:	4818      	ldr	r0, [pc, #96]	; (801051c <ChangeLED+0x178>)
 80104ba:	f002 fd21 	bl	8012f00 <HAL_GPIO_WritePin>
		break;
 80104be:	e026      	b.n	801050e <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80104c0:	2200      	movs	r2, #0
 80104c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80104c6:	4814      	ldr	r0, [pc, #80]	; (8010518 <ChangeLED+0x174>)
 80104c8:	f002 fd1a 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80104cc:	2201      	movs	r2, #1
 80104ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80104d2:	4811      	ldr	r0, [pc, #68]	; (8010518 <ChangeLED+0x174>)
 80104d4:	f002 fd14 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80104d8:	2201      	movs	r2, #1
 80104da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80104de:	480f      	ldr	r0, [pc, #60]	; (801051c <ChangeLED+0x178>)
 80104e0:	f002 fd0e 	bl	8012f00 <HAL_GPIO_WritePin>

		break;
 80104e4:	e013      	b.n	801050e <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80104e6:	2201      	movs	r2, #1
 80104e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80104ec:	480a      	ldr	r0, [pc, #40]	; (8010518 <ChangeLED+0x174>)
 80104ee:	f002 fd07 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80104f2:	2201      	movs	r2, #1
 80104f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80104f8:	4807      	ldr	r0, [pc, #28]	; (8010518 <ChangeLED+0x174>)
 80104fa:	f002 fd01 	bl	8012f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80104fe:	2201      	movs	r2, #1
 8010500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010504:	4805      	ldr	r0, [pc, #20]	; (801051c <ChangeLED+0x178>)
 8010506:	f002 fcfb 	bl	8012f00 <HAL_GPIO_WritePin>

		break;
 801050a:	e000      	b.n	801050e <ChangeLED+0x16a>
	default: break;
 801050c:	bf00      	nop

	}
}
 801050e:	bf00      	nop
 8010510:	3708      	adds	r7, #8
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	40020800 	.word	0x40020800
 801051c:	40020400 	.word	0x40020400

08010520 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 8010520:	b580      	push	{r7, lr}
 8010522:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 8010524:	210c      	movs	r1, #12
 8010526:	4809      	ldr	r0, [pc, #36]	; (801054c <Motor_PWM_Start+0x2c>)
 8010528:	f004 f8d6 	bl	80146d8 <HAL_TIM_PWM_Start>
 801052c:	4603      	mov	r3, r0
 801052e:	2b00      	cmp	r3, #0
 8010530:	d001      	beq.n	8010536 <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 8010532:	f7fe ffd3 	bl	800f4dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 8010536:	2104      	movs	r1, #4
 8010538:	4805      	ldr	r0, [pc, #20]	; (8010550 <Motor_PWM_Start+0x30>)
 801053a:	f004 f8cd 	bl	80146d8 <HAL_TIM_PWM_Start>
 801053e:	4603      	mov	r3, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	d001      	beq.n	8010548 <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 8010544:	f7fe ffca 	bl	800f4dc <Error_Handler>
  }
#endif
}
 8010548:	bf00      	nop
 801054a:	bd80      	pop	{r7, pc}
 801054c:	20000240 	.word	0x20000240
 8010550:	20000280 	.word	0x20000280

08010554 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 8010554:	b580      	push	{r7, lr}
 8010556:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 8010558:	210c      	movs	r1, #12
 801055a:	4809      	ldr	r0, [pc, #36]	; (8010580 <Motor_PWM_Stop+0x2c>)
 801055c:	f004 f8fa 	bl	8014754 <HAL_TIM_PWM_Stop>
 8010560:	4603      	mov	r3, r0
 8010562:	2b00      	cmp	r3, #0
 8010564:	d001      	beq.n	801056a <Motor_PWM_Stop+0x16>
  {
	  Error_Handler();
 8010566:	f7fe ffb9 	bl	800f4dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 801056a:	2104      	movs	r1, #4
 801056c:	4805      	ldr	r0, [pc, #20]	; (8010584 <Motor_PWM_Stop+0x30>)
 801056e:	f004 f8f1 	bl	8014754 <HAL_TIM_PWM_Stop>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d001      	beq.n	801057c <Motor_PWM_Stop+0x28>
  {
	  Error_Handler();
 8010578:	f7fe ffb0 	bl	800f4dc <Error_Handler>
  }
#endif
}
 801057c:	bf00      	nop
 801057e:	bd80      	pop	{r7, pc}
 8010580:	20000240 	.word	0x20000240
 8010584:	20000280 	.word	0x20000280

08010588 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2b00      	cmp	r3, #0
 8010596:	dd05      	ble.n	80105a4 <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 8010598:	2201      	movs	r2, #1
 801059a:	2104      	movs	r1, #4
 801059c:	4828      	ldr	r0, [pc, #160]	; (8010640 <Motor_Switch+0xb8>)
 801059e:	f002 fcaf 	bl	8012f00 <HAL_GPIO_WritePin>
 80105a2:	e00a      	b.n	80105ba <Motor_Switch+0x32>

	}
	else  if (left < 0){
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	da07      	bge.n	80105ba <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 80105aa:	2200      	movs	r2, #0
 80105ac:	2104      	movs	r1, #4
 80105ae:	4824      	ldr	r0, [pc, #144]	; (8010640 <Motor_Switch+0xb8>)
 80105b0:	f002 fca6 	bl	8012f00 <HAL_GPIO_WritePin>
		left = -left;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	425b      	negs	r3, r3
 80105b8:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	dd05      	ble.n	80105cc <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 80105c0:	2200      	movs	r2, #0
 80105c2:	2101      	movs	r1, #1
 80105c4:	481e      	ldr	r0, [pc, #120]	; (8010640 <Motor_Switch+0xb8>)
 80105c6:	f002 fc9b 	bl	8012f00 <HAL_GPIO_WritePin>
 80105ca:	e00a      	b.n	80105e2 <Motor_Switch+0x5a>

	}

	else if (right < 0){
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	da07      	bge.n	80105e2 <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 80105d2:	2201      	movs	r2, #1
 80105d4:	2101      	movs	r1, #1
 80105d6:	481a      	ldr	r0, [pc, #104]	; (8010640 <Motor_Switch+0xb8>)
 80105d8:	f002 fc92 	bl	8012f00 <HAL_GPIO_WritePin>
	  	right = -right;
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	425b      	negs	r3, r3
 80105e0:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f7f7 fed6 	bl	8008394 <__aeabi_i2d>
 80105e8:	a313      	add	r3, pc, #76	; (adr r3, 8010638 <Motor_Switch+0xb0>)
 80105ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ee:	f7f8 f9cb 	bl	8008988 <__aeabi_dcmpgt>
 80105f2:	4603      	mov	r3, r0
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d002      	beq.n	80105fe <Motor_Switch+0x76>
 80105f8:	f640 13d8 	movw	r3, #2520	; 0x9d8
 80105fc:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 80105fe:	6838      	ldr	r0, [r7, #0]
 8010600:	f7f7 fec8 	bl	8008394 <__aeabi_i2d>
 8010604:	a30c      	add	r3, pc, #48	; (adr r3, 8010638 <Motor_Switch+0xb0>)
 8010606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801060a:	f7f8 f9bd 	bl	8008988 <__aeabi_dcmpgt>
 801060e:	4603      	mov	r3, r0
 8010610:	2b00      	cmp	r3, #0
 8010612:	d002      	beq.n	801061a <Motor_Switch+0x92>
 8010614:	f640 13d8 	movw	r3, #2520	; 0x9d8
 8010618:	603b      	str	r3, [r7, #0]


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 801061a:	4b0a      	ldr	r3, [pc, #40]	; (8010644 <Motor_Switch+0xbc>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	683a      	ldr	r2, [r7, #0]
 8010620:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 8010622:	4b09      	ldr	r3, [pc, #36]	; (8010648 <Motor_Switch+0xc0>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	687a      	ldr	r2, [r7, #4]
 8010628:	641a      	str	r2, [r3, #64]	; 0x40
}
 801062a:	bf00      	nop
 801062c:	3708      	adds	r7, #8
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	f3af 8000 	nop.w
 8010638:	00000000 	.word	0x00000000
 801063c:	40a3b000 	.word	0x40a3b000
 8010640:	40020000 	.word	0x40020000
 8010644:	20000280 	.word	0x20000280
 8010648:	20000240 	.word	0x20000240

0801064c <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 801064c:	b480      	push	{r7}
 801064e:	b083      	sub	sp, #12
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	683a      	ldr	r2, [r7, #0]
 801065a:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 801065c:	bf00      	nop
 801065e:	370c      	adds	r7, #12
 8010660:	46bd      	mov	sp, r7
 8010662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010666:	4770      	bx	lr

08010668 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 8010668:	b480      	push	{r7}
 801066a:	b087      	sub	sp, #28
 801066c:	af00      	add	r7, sp, #0
 801066e:	60f8      	str	r0, [r7, #12]
 8010670:	60b9      	str	r1, [r7, #8]
 8010672:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 8010678:	4a2c      	ldr	r2, [pc, #176]	; (801072c <GetWallDataAverage+0xc4>)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	1ad3      	subs	r3, r2, r3
 8010684:	2b00      	cmp	r3, #0
 8010686:	bfb8      	it	lt
 8010688:	425b      	neglt	r3, r3
 801068a:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 801068c:	4927      	ldr	r1, [pc, #156]	; (801072c <GetWallDataAverage+0xc4>)
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	697a      	ldr	r2, [r7, #20]
 8010692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 8010696:	4a26      	ldr	r2, [pc, #152]	; (8010730 <GetWallDataAverage+0xc8>)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801069e:	693b      	ldr	r3, [r7, #16]
 80106a0:	441a      	add	r2, r3
 80106a2:	4923      	ldr	r1, [pc, #140]	; (8010730 <GetWallDataAverage+0xc8>)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 80106aa:	4a22      	ldr	r2, [pc, #136]	; (8010734 <GetWallDataAverage+0xcc>)
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106b2:	1c5a      	adds	r2, r3, #1
 80106b4:	491f      	ldr	r1, [pc, #124]	; (8010734 <GetWallDataAverage+0xcc>)
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 80106bc:	4a1d      	ldr	r2, [pc, #116]	; (8010734 <GetWallDataAverage+0xcc>)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106c4:	68fa      	ldr	r2, [r7, #12]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d121      	bne.n	801070e <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 80106ca:	4a19      	ldr	r2, [pc, #100]	; (8010730 <GetWallDataAverage+0xc8>)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106d2:	ee07 3a90 	vmov	s15, r3
 80106d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80106da:	4a16      	ldr	r2, [pc, #88]	; (8010734 <GetWallDataAverage+0xcc>)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106e2:	ee07 3a90 	vmov	s15, r3
 80106e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80106ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80106ee:	4a12      	ldr	r2, [pc, #72]	; (8010738 <GetWallDataAverage+0xd0>)
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	4413      	add	r3, r2
 80106f6:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 80106fa:	4a0d      	ldr	r2, [pc, #52]	; (8010730 <GetWallDataAverage+0xc8>)
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2100      	movs	r1, #0
 8010700:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 8010704:	4a0b      	ldr	r2, [pc, #44]	; (8010734 <GetWallDataAverage+0xcc>)
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2100      	movs	r1, #0
 801070a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 801070e:	4a0a      	ldr	r2, [pc, #40]	; (8010738 <GetWallDataAverage+0xd0>)
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	009b      	lsls	r3, r3, #2
 8010714:	4413      	add	r3, r2
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	ee07 3a90 	vmov	s15, r3
}
 801071c:	eeb0 0a67 	vmov.f32	s0, s15
 8010720:	371c      	adds	r7, #28
 8010722:	46bd      	mov	sp, r7
 8010724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	200002dc 	.word	0x200002dc
 8010730:	200002ec 	.word	0x200002ec
 8010734:	200002fc 	.word	0x200002fc
 8010738:	2000030c 	.word	0x2000030c

0801073c <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 801073c:	b480      	push	{r7}
 801073e:	b087      	sub	sp, #28
 8010740:	af00      	add	r7, sp, #0
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	ed87 0a02 	vstr	s0, [r7, #8]
 8010748:	edc7 0a01 	vstr	s1, [r7, #4]
 801074c:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 8010750:	f04f 0300 	mov.w	r3, #0
 8010754:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	ee07 3a90 	vmov	s15, r3
 801075c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010760:	edd7 7a02 	vldr	s15, [r7, #8]
 8010764:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010768:	edd7 7a01 	vldr	s15, [r7, #4]
 801076c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010770:	ed97 7a00 	vldr	s14, [r7]
 8010774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010778:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	ee07 3a90 	vmov	s15, r3
}
 8010782:	eeb0 0a67 	vmov.f32	s0, s15
 8010786:	371c      	adds	r7, #28
 8010788:	46bd      	mov	sp, r7
 801078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078e:	4770      	bx	lr

08010790 <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 8010790:	b480      	push	{r7}
 8010792:	b085      	sub	sp, #20
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 801079a:	2301      	movs	r3, #1
 801079c:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 801079e:	2300      	movs	r3, #0
 80107a0:	60bb      	str	r3, [r7, #8]
 80107a2:	e007      	b.n	80107b4 <IntegerPower+0x24>
	{
		pattern_num *= integer;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	687a      	ldr	r2, [r7, #4]
 80107a8:	fb02 f303 	mul.w	r3, r2, r3
 80107ac:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	3301      	adds	r3, #1
 80107b2:	60bb      	str	r3, [r7, #8]
 80107b4:	68ba      	ldr	r2, [r7, #8]
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	dbf3      	blt.n	80107a4 <IntegerPower+0x14>
	}
	return pattern_num;
 80107bc:	68fb      	ldr	r3, [r7, #12]
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3714      	adds	r7, #20
 80107c2:	46bd      	mov	sp, r7
 80107c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c8:	4770      	bx	lr

080107ca <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 80107ca:	b480      	push	{r7}
 80107cc:	b08b      	sub	sp, #44	; 0x2c
 80107ce:	af00      	add	r7, sp, #0
 80107d0:	ed87 0a03 	vstr	s0, [r7, #12]
 80107d4:	edc7 0a02 	vstr	s1, [r7, #8]
 80107d8:	ed87 1a01 	vstr	s2, [r7, #4]
 80107dc:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 80107de:	edd7 6a03 	vldr	s13, [r7, #12]
 80107e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80107e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80107ea:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 80107ee:	edd7 6a02 	vldr	s13, [r7, #8]
 80107f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80107f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80107fa:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 80107fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010802:	edd7 7a06 	vldr	s15, [r7, #24]
 8010806:	ee77 6a67 	vsub.f32	s13, s14, s15
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	ee07 3a90 	vmov	s15, r3
 8010810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010818:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 801081c:	2300      	movs	r3, #0
 801081e:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 8010820:	2300      	movs	r3, #0
 8010822:	623b      	str	r3, [r7, #32]
 8010824:	e018      	b.n	8010858 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 8010826:	6a3b      	ldr	r3, [r7, #32]
 8010828:	ee07 3a90 	vmov	s15, r3
 801082c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010830:	edd7 7a05 	vldr	s15, [r7, #20]
 8010834:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010838:	edd7 7a06 	vldr	s15, [r7, #24]
 801083c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010840:	ed97 7a07 	vldr	s14, [r7, #28]
 8010844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801084c:	db01      	blt.n	8010852 <GetBatteryLevel+0x88>
		{
			pattern = i;
 801084e:	6a3b      	ldr	r3, [r7, #32]
 8010850:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 8010852:	6a3b      	ldr	r3, [r7, #32]
 8010854:	3301      	adds	r3, #1
 8010856:	623b      	str	r3, [r7, #32]
 8010858:	6a3a      	ldr	r2, [r7, #32]
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	429a      	cmp	r2, r3
 801085e:	dbe2      	blt.n	8010826 <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 8010860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010862:	4618      	mov	r0, r3
 8010864:	372c      	adds	r7, #44	; 0x2c
 8010866:	46bd      	mov	sp, r7
 8010868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086c:	4770      	bx	lr
	...

08010870 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 8010870:	b580      	push	{r7, lr}
 8010872:	af00      	add	r7, sp, #0
	  setbuf(stdout,NULL);
 8010874:	4b07      	ldr	r3, [pc, #28]	; (8010894 <Buffering+0x24>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	689b      	ldr	r3, [r3, #8]
 801087a:	2100      	movs	r1, #0
 801087c:	4618      	mov	r0, r3
 801087e:	f006 fd6d 	bl	801735c <setbuf>
	  setbuf(stdin,NULL);
 8010882:	4b04      	ldr	r3, [pc, #16]	; (8010894 <Buffering+0x24>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	685b      	ldr	r3, [r3, #4]
 8010888:	2100      	movs	r1, #0
 801088a:	4618      	mov	r0, r3
 801088c:	f006 fd66 	bl	801735c <setbuf>
}
 8010890:	bf00      	nop
 8010892:	bd80      	pop	{r7, pc}
 8010894:	2000002c 	.word	0x2000002c

08010898 <Copy_Gain>:
void Copy_Gain()
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b092      	sub	sp, #72	; 0x48
 801089c:	af00      	add	r7, sp, #0
	//コピーしなくても、単品で書き込める。
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
 801089e:	4b2c      	ldr	r3, [pc, #176]	; (8010950 <Copy_Gain+0xb8>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	647b      	str	r3, [r7, #68]	; 0x44
	float data[16]={0};
 80108a4:	463b      	mov	r3, r7
 80108a6:	2240      	movs	r2, #64	; 0x40
 80108a8:	2100      	movs	r1, #0
 80108aa:	4618      	mov	r0, r3
 80108ac:	f005 fe7b 	bl	80165a6 <memset>
	data[0] = Pid[L_VELO_PID].KP;
 80108b0:	4b28      	ldr	r3, [pc, #160]	; (8010954 <Copy_Gain+0xbc>)
 80108b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80108b6:	603b      	str	r3, [r7, #0]
	data[1] = Pid[L_VELO_PID].KI;
 80108b8:	4b26      	ldr	r3, [pc, #152]	; (8010954 <Copy_Gain+0xbc>)
 80108ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80108be:	607b      	str	r3, [r7, #4]
	data[2] = Pid[L_VELO_PID].KD;
 80108c0:	4b24      	ldr	r3, [pc, #144]	; (8010954 <Copy_Gain+0xbc>)
 80108c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80108c6:	60bb      	str	r3, [r7, #8]

	data[3] = Pid[A_VELO_PID].KP;
 80108c8:	4b22      	ldr	r3, [pc, #136]	; (8010954 <Copy_Gain+0xbc>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	60fb      	str	r3, [r7, #12]
	data[4] = Pid[A_VELO_PID].KI;
 80108ce:	4b21      	ldr	r3, [pc, #132]	; (8010954 <Copy_Gain+0xbc>)
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	613b      	str	r3, [r7, #16]
	data[5] = Pid[A_VELO_PID].KD;
 80108d4:	4b1f      	ldr	r3, [pc, #124]	; (8010954 <Copy_Gain+0xbc>)
 80108d6:	689b      	ldr	r3, [r3, #8]
 80108d8:	617b      	str	r3, [r7, #20]

	data[6] = Pid[L_WALL_PID].KP;
 80108da:	4b1e      	ldr	r3, [pc, #120]	; (8010954 <Copy_Gain+0xbc>)
 80108dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108de:	61bb      	str	r3, [r7, #24]
	data[7] = Pid[L_WALL_PID].KI;
 80108e0:	4b1c      	ldr	r3, [pc, #112]	; (8010954 <Copy_Gain+0xbc>)
 80108e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108e4:	61fb      	str	r3, [r7, #28]
	data[8] = Pid[L_WALL_PID].KD;
 80108e6:	4b1b      	ldr	r3, [pc, #108]	; (8010954 <Copy_Gain+0xbc>)
 80108e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80108ea:	623b      	str	r3, [r7, #32]

	data[9] = Pid[R_WALL_PID].KP;
 80108ec:	4b19      	ldr	r3, [pc, #100]	; (8010954 <Copy_Gain+0xbc>)
 80108ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80108f2:	627b      	str	r3, [r7, #36]	; 0x24
	data[10] = Pid[R_WALL_PID].KI;
 80108f4:	4b17      	ldr	r3, [pc, #92]	; (8010954 <Copy_Gain+0xbc>)
 80108f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108fa:	62bb      	str	r3, [r7, #40]	; 0x28
	data[11] = Pid[R_WALL_PID].KD;
 80108fc:	4b15      	ldr	r3, [pc, #84]	; (8010954 <Copy_Gain+0xbc>)
 80108fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010902:	62fb      	str	r3, [r7, #44]	; 0x2c

	data[12] = Pid[D_WALL_PID].KP;
 8010904:	4b13      	ldr	r3, [pc, #76]	; (8010954 <Copy_Gain+0xbc>)
 8010906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010908:	633b      	str	r3, [r7, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 801090a:	4b12      	ldr	r3, [pc, #72]	; (8010954 <Copy_Gain+0xbc>)
 801090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801090e:	637b      	str	r3, [r7, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 8010910:	4b10      	ldr	r3, [pc, #64]	; (8010954 <Copy_Gain+0xbc>)
 8010912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010914:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int i=0; i < 15; i++)
 8010916:	2300      	movs	r3, #0
 8010918:	643b      	str	r3, [r7, #64]	; 0x40
 801091a:	e012      	b.n	8010942 <Copy_Gain+0xaa>
	{

		FLASH_Write_Word_F( address, data[i]);
 801091c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801091e:	009b      	lsls	r3, r3, #2
 8010920:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010924:	4413      	add	r3, r2
 8010926:	3b48      	subs	r3, #72	; 0x48
 8010928:	edd3 7a00 	vldr	s15, [r3]
 801092c:	eeb0 0a67 	vmov.f32	s0, s15
 8010930:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010932:	f7ff faff 	bl	800ff34 <FLASH_Write_Word_F>
		address += 0x04;
 8010936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010938:	3304      	adds	r3, #4
 801093a:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i < 15; i++)
 801093c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801093e:	3301      	adds	r3, #1
 8010940:	643b      	str	r3, [r7, #64]	; 0x40
 8010942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010944:	2b0e      	cmp	r3, #14
 8010946:	dde9      	ble.n	801091c <Copy_Gain+0x84>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 8010948:	bf00      	nop
 801094a:	3748      	adds	r7, #72	; 0x48
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}
 8010950:	0801b884 	.word	0x0801b884
 8010954:	2000031c 	.word	0x2000031c

08010958 <Load_Gain>:
void Load_Gain()
{
 8010958:	b590      	push	{r4, r7, lr}
 801095a:	b095      	sub	sp, #84	; 0x54
 801095c:	af00      	add	r7, sp, #0
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 801095e:	4b59      	ldr	r3, [pc, #356]	; (8010ac4 <Load_Gain+0x16c>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	64fb      	str	r3, [r7, #76]	; 0x4c
	float data[16]={0};//1個多く要素を作る。
 8010964:	463b      	mov	r3, r7
 8010966:	2240      	movs	r2, #64	; 0x40
 8010968:	2100      	movs	r1, #0
 801096a:	4618      	mov	r0, r3
 801096c:	f005 fe1b 	bl	80165a6 <memset>

	//チェック
	int judge;
	uint8_t j=0;
 8010970:	2300      	movs	r3, #0
 8010972:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 8010976:	2300      	movs	r3, #0
 8010978:	647b      	str	r3, [r7, #68]	; 0x44
 801097a:	e038      	b.n	80109ee <Load_Gain+0x96>
	{
		FLASH_Read_Word_F( address, &data[i]);//かこれ
 801097c:	463a      	mov	r2, r7
 801097e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010980:	009b      	lsls	r3, r3, #2
 8010982:	4413      	add	r3, r2
 8010984:	4619      	mov	r1, r3
 8010986:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010988:	f7ff fafe 	bl	800ff88 <FLASH_Read_Word_F>
		address += 0x04;
 801098c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801098e:	3304      	adds	r3, #4
 8010990:	64fb      	str	r3, [r7, #76]	; 0x4c
		printf("%d, %f\r\n",i,data[i]);
 8010992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801099a:	4413      	add	r3, r2
 801099c:	3b50      	subs	r3, #80	; 0x50
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7f7 fd09 	bl	80083b8 <__aeabi_f2d>
 80109a6:	4603      	mov	r3, r0
 80109a8:	460c      	mov	r4, r1
 80109aa:	461a      	mov	r2, r3
 80109ac:	4623      	mov	r3, r4
 80109ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109b0:	4845      	ldr	r0, [pc, #276]	; (8010ac8 <Load_Gain+0x170>)
 80109b2:	f006 fc3f 	bl	8017234 <iprintf>
		//work_ram[]がデフォ値なら、そのまま
		judge = isnanf(data[i]);
 80109b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80109be:	4413      	add	r3, r2
 80109c0:	3b50      	subs	r3, #80	; 0x50
 80109c2:	edd3 7a00 	vldr	s15, [r3]
 80109c6:	eef4 7a67 	vcmp.f32	s15, s15
 80109ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ce:	bf6c      	ite	vs
 80109d0:	2301      	movvs	r3, #1
 80109d2:	2300      	movvc	r3, #0
 80109d4:	b2db      	uxtb	r3, r3
 80109d6:	643b      	str	r3, [r7, #64]	; 0x40
		if(judge != 0)
 80109d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d004      	beq.n	80109e8 <Load_Gain+0x90>
		{
			j++;
 80109de:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80109e2:	3301      	adds	r3, #1
 80109e4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 80109e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109ea:	3301      	adds	r3, #1
 80109ec:	647b      	str	r3, [r7, #68]	; 0x44
 80109ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109f0:	2b0e      	cmp	r3, #14
 80109f2:	ddc3      	ble.n	801097c <Load_Gain+0x24>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 80109f4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80109f8:	4619      	mov	r1, r3
 80109fa:	4834      	ldr	r0, [pc, #208]	; (8010acc <Load_Gain+0x174>)
 80109fc:	f006 fc1a 	bl	8017234 <iprintf>
		if(j == 15)//全てnan0であれば
 8010a00:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010a04:	2b0f      	cmp	r3, #15
 8010a06:	d059      	beq.n	8010abc <Load_Gain+0x164>
//			Pid[A_VELO_PID].KD = data[5];
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 8010a08:	edd7 7a00 	vldr	s15, [r7]
 8010a0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8010a10:	edd7 6a02 	vldr	s13, [r7, #8]
 8010a14:	eeb0 1a66 	vmov.f32	s2, s13
 8010a18:	eef0 0a47 	vmov.f32	s1, s14
 8010a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8010a20:	2004      	movs	r0, #4
 8010a22:	f000 fa29 	bl	8010e78 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 8010a26:	edd7 7a00 	vldr	s15, [r7]
 8010a2a:	ed97 7a01 	vldr	s14, [r7, #4]
 8010a2e:	edd7 6a02 	vldr	s13, [r7, #8]
 8010a32:	eeb0 1a66 	vmov.f32	s2, s13
 8010a36:	eef0 0a47 	vmov.f32	s1, s14
 8010a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8010a3e:	2005      	movs	r0, #5
 8010a40:	f000 fa1a 	bl	8010e78 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 8010a44:	edd7 7a03 	vldr	s15, [r7, #12]
 8010a48:	ed97 7a04 	vldr	s14, [r7, #16]
 8010a4c:	edd7 6a05 	vldr	s13, [r7, #20]
 8010a50:	eeb0 1a66 	vmov.f32	s2, s13
 8010a54:	eef0 0a47 	vmov.f32	s1, s14
 8010a58:	eeb0 0a67 	vmov.f32	s0, s15
 8010a5c:	2000      	movs	r0, #0
 8010a5e:	f000 fa0b 	bl	8010e78 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 8010a62:	edd7 7a06 	vldr	s15, [r7, #24]
 8010a66:	ed97 7a07 	vldr	s14, [r7, #28]
 8010a6a:	edd7 6a08 	vldr	s13, [r7, #32]
 8010a6e:	eeb0 1a66 	vmov.f32	s2, s13
 8010a72:	eef0 0a47 	vmov.f32	s1, s14
 8010a76:	eeb0 0a67 	vmov.f32	s0, s15
 8010a7a:	2002      	movs	r0, #2
 8010a7c:	f000 f9fc 	bl	8010e78 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 8010a80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010a84:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010a88:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8010a8c:	eeb0 1a66 	vmov.f32	s2, s13
 8010a90:	eef0 0a47 	vmov.f32	s1, s14
 8010a94:	eeb0 0a67 	vmov.f32	s0, s15
 8010a98:	2003      	movs	r0, #3
 8010a9a:	f000 f9ed 	bl	8010e78 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 8010a9e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010aa2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8010aa6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8010aaa:	eeb0 1a66 	vmov.f32	s2, s13
 8010aae:	eef0 0a47 	vmov.f32	s1, s14
 8010ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8010ab6:	2001      	movs	r0, #1
 8010ab8:	f000 f9de 	bl	8010e78 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 8010abc:	bf00      	nop
 8010abe:	3754      	adds	r7, #84	; 0x54
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd90      	pop	{r4, r7, pc}
 8010ac4:	0801b884 	.word	0x0801b884
 8010ac8:	0801b708 	.word	0x0801b708
 8010acc:	0801b714 	.word	0x0801b714

08010ad0 <Change_Gain>:
void Change_Gain()
{
 8010ad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010ad4:	b086      	sub	sp, #24
 8010ad6:	af04      	add	r7, sp, #16
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 8010ad8:	48af      	ldr	r0, [pc, #700]	; (8010d98 <Change_Gain+0x2c8>)
 8010ada:	f003 fc48 	bl	801436e <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 8010ade:	48af      	ldr	r0, [pc, #700]	; (8010d9c <Change_Gain+0x2cc>)
 8010ae0:	f003 fc45 	bl	801436e <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 8010ae4:	f7ff fd36 	bl	8010554 <Motor_PWM_Stop>
	EmitterOFF();
 8010ae8:	f7ff fc4e 	bl	8010388 <EmitterOFF>
//	ADCStart();
//	printf("start\r\n");
	//ADCStop();//ここ
	HAL_Delay(200);
 8010aec:	20c8      	movs	r0, #200	; 0xc8
 8010aee:	f000 fd33 	bl	8011558 <HAL_Delay>

	//ゲイン調整する
	char change_mode='0';
 8010af2:	2330      	movs	r3, #48	; 0x30
 8010af4:	71fb      	strb	r3, [r7, #7]
	char pid = '0';
 8010af6:	2330      	movs	r3, #48	; 0x30
 8010af8:	71bb      	strb	r3, [r7, #6]
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 8010afa:	48a9      	ldr	r0, [pc, #676]	; (8010da0 <Change_Gain+0x2d0>)
 8010afc:	f006 fc0e 	bl	801731c <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 8010b00:	4ba8      	ldr	r3, [pc, #672]	; (8010da4 <Change_Gain+0x2d4>)
 8010b02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010b06:	4618      	mov	r0, r3
 8010b08:	f7f7 fc56 	bl	80083b8 <__aeabi_f2d>
 8010b0c:	4680      	mov	r8, r0
 8010b0e:	4689      	mov	r9, r1
 8010b10:	4ba4      	ldr	r3, [pc, #656]	; (8010da4 <Change_Gain+0x2d4>)
 8010b12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7f7 fc4e 	bl	80083b8 <__aeabi_f2d>
 8010b1c:	4604      	mov	r4, r0
 8010b1e:	460d      	mov	r5, r1
 8010b20:	4ba0      	ldr	r3, [pc, #640]	; (8010da4 <Change_Gain+0x2d4>)
 8010b22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7f7 fc46 	bl	80083b8 <__aeabi_f2d>
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	460b      	mov	r3, r1
 8010b30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010b34:	e9cd 4500 	strd	r4, r5, [sp]
 8010b38:	4642      	mov	r2, r8
 8010b3a:	464b      	mov	r3, r9
 8010b3c:	489a      	ldr	r0, [pc, #616]	; (8010da8 <Change_Gain+0x2d8>)
 8010b3e:	f006 fb79 	bl	8017234 <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 8010b42:	4b98      	ldr	r3, [pc, #608]	; (8010da4 <Change_Gain+0x2d4>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7f7 fc36 	bl	80083b8 <__aeabi_f2d>
 8010b4c:	4680      	mov	r8, r0
 8010b4e:	4689      	mov	r9, r1
 8010b50:	4b94      	ldr	r3, [pc, #592]	; (8010da4 <Change_Gain+0x2d4>)
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7f7 fc2f 	bl	80083b8 <__aeabi_f2d>
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	460d      	mov	r5, r1
 8010b5e:	4b91      	ldr	r3, [pc, #580]	; (8010da4 <Change_Gain+0x2d4>)
 8010b60:	689b      	ldr	r3, [r3, #8]
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7f7 fc28 	bl	80083b8 <__aeabi_f2d>
 8010b68:	4602      	mov	r2, r0
 8010b6a:	460b      	mov	r3, r1
 8010b6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010b70:	e9cd 4500 	strd	r4, r5, [sp]
 8010b74:	4642      	mov	r2, r8
 8010b76:	464b      	mov	r3, r9
 8010b78:	488c      	ldr	r0, [pc, #560]	; (8010dac <Change_Gain+0x2dc>)
 8010b7a:	f006 fb5b 	bl	8017234 <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 8010b7e:	4b89      	ldr	r3, [pc, #548]	; (8010da4 <Change_Gain+0x2d4>)
 8010b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7f7 fc18 	bl	80083b8 <__aeabi_f2d>
 8010b88:	4680      	mov	r8, r0
 8010b8a:	4689      	mov	r9, r1
 8010b8c:	4b85      	ldr	r3, [pc, #532]	; (8010da4 <Change_Gain+0x2d4>)
 8010b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b90:	4618      	mov	r0, r3
 8010b92:	f7f7 fc11 	bl	80083b8 <__aeabi_f2d>
 8010b96:	4604      	mov	r4, r0
 8010b98:	460d      	mov	r5, r1
 8010b9a:	4b82      	ldr	r3, [pc, #520]	; (8010da4 <Change_Gain+0x2d4>)
 8010b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7f7 fc0a 	bl	80083b8 <__aeabi_f2d>
 8010ba4:	4602      	mov	r2, r0
 8010ba6:	460b      	mov	r3, r1
 8010ba8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010bac:	e9cd 4500 	strd	r4, r5, [sp]
 8010bb0:	4642      	mov	r2, r8
 8010bb2:	464b      	mov	r3, r9
 8010bb4:	487e      	ldr	r0, [pc, #504]	; (8010db0 <Change_Gain+0x2e0>)
 8010bb6:	f006 fb3d 	bl	8017234 <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 8010bba:	4b7a      	ldr	r3, [pc, #488]	; (8010da4 <Change_Gain+0x2d4>)
 8010bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7f7 fbf9 	bl	80083b8 <__aeabi_f2d>
 8010bc6:	4680      	mov	r8, r0
 8010bc8:	4689      	mov	r9, r1
 8010bca:	4b76      	ldr	r3, [pc, #472]	; (8010da4 <Change_Gain+0x2d4>)
 8010bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7f7 fbf1 	bl	80083b8 <__aeabi_f2d>
 8010bd6:	4604      	mov	r4, r0
 8010bd8:	460d      	mov	r5, r1
 8010bda:	4b72      	ldr	r3, [pc, #456]	; (8010da4 <Change_Gain+0x2d4>)
 8010bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7f7 fbe9 	bl	80083b8 <__aeabi_f2d>
 8010be6:	4602      	mov	r2, r0
 8010be8:	460b      	mov	r3, r1
 8010bea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010bee:	e9cd 4500 	strd	r4, r5, [sp]
 8010bf2:	4642      	mov	r2, r8
 8010bf4:	464b      	mov	r3, r9
 8010bf6:	486f      	ldr	r0, [pc, #444]	; (8010db4 <Change_Gain+0x2e4>)
 8010bf8:	f006 fb1c 	bl	8017234 <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 8010bfc:	4b69      	ldr	r3, [pc, #420]	; (8010da4 <Change_Gain+0x2d4>)
 8010bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7f7 fbd9 	bl	80083b8 <__aeabi_f2d>
 8010c06:	4680      	mov	r8, r0
 8010c08:	4689      	mov	r9, r1
 8010c0a:	4b66      	ldr	r3, [pc, #408]	; (8010da4 <Change_Gain+0x2d4>)
 8010c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7f7 fbd2 	bl	80083b8 <__aeabi_f2d>
 8010c14:	4604      	mov	r4, r0
 8010c16:	460d      	mov	r5, r1
 8010c18:	4b62      	ldr	r3, [pc, #392]	; (8010da4 <Change_Gain+0x2d4>)
 8010c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7f7 fbcb 	bl	80083b8 <__aeabi_f2d>
 8010c22:	4602      	mov	r2, r0
 8010c24:	460b      	mov	r3, r1
 8010c26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c2a:	e9cd 4500 	strd	r4, r5, [sp]
 8010c2e:	4642      	mov	r2, r8
 8010c30:	464b      	mov	r3, r9
 8010c32:	4861      	ldr	r0, [pc, #388]	; (8010db8 <Change_Gain+0x2e8>)
 8010c34:	f006 fafe 	bl	8017234 <iprintf>

		Buffering();
 8010c38:	f7ff fe1a 	bl	8010870 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 8010c3c:	485f      	ldr	r0, [pc, #380]	; (8010dbc <Change_Gain+0x2ec>)
 8010c3e:	f006 faf9 	bl	8017234 <iprintf>
 8010c42:	1dfb      	adds	r3, r7, #7
 8010c44:	4619      	mov	r1, r3
 8010c46:	485e      	ldr	r0, [pc, #376]	; (8010dc0 <Change_Gain+0x2f0>)
 8010c48:	f006 fb70 	bl	801732c <iscanf>
		if(change_mode == '0')
 8010c4c:	79fb      	ldrb	r3, [r7, #7]
 8010c4e:	2b30      	cmp	r3, #48	; 0x30
 8010c50:	f000 80f4 	beq.w	8010e3c <Change_Gain+0x36c>
			break;
		}
		else
		{

			Buffering();
 8010c54:	f7ff fe0c 	bl	8010870 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 8010c58:	485a      	ldr	r0, [pc, #360]	; (8010dc4 <Change_Gain+0x2f4>)
 8010c5a:	f006 faeb 	bl	8017234 <iprintf>
 8010c5e:	1dbb      	adds	r3, r7, #6
 8010c60:	4619      	mov	r1, r3
 8010c62:	4857      	ldr	r0, [pc, #348]	; (8010dc0 <Change_Gain+0x2f0>)
 8010c64:	f006 fb62 	bl	801732c <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 8010c68:	79fb      	ldrb	r3, [r7, #7]
 8010c6a:	4619      	mov	r1, r3
 8010c6c:	79bb      	ldrb	r3, [r7, #6]
 8010c6e:	461a      	mov	r2, r3
 8010c70:	4855      	ldr	r0, [pc, #340]	; (8010dc8 <Change_Gain+0x2f8>)
 8010c72:	f006 fadf 	bl	8017234 <iprintf>

			Buffering();
 8010c76:	f7ff fdfb 	bl	8010870 <Buffering>
			printf("\r\n値を入力 : ");
 8010c7a:	4854      	ldr	r0, [pc, #336]	; (8010dcc <Change_Gain+0x2fc>)
 8010c7c:	f006 fada 	bl	8017234 <iprintf>

			switch(change_mode)
 8010c80:	79fb      	ldrb	r3, [r7, #7]
 8010c82:	3b31      	subs	r3, #49	; 0x31
 8010c84:	2b04      	cmp	r3, #4
 8010c86:	f200 80c1 	bhi.w	8010e0c <Change_Gain+0x33c>
 8010c8a:	a201      	add	r2, pc, #4	; (adr r2, 8010c90 <Change_Gain+0x1c0>)
 8010c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c90:	08010ca5 	.word	0x08010ca5
 8010c94:	08010cd7 	.word	0x08010cd7
 8010c98:	08010d09 	.word	0x08010d09
 8010c9c:	08010d39 	.word	0x08010d39
 8010ca0:	08010d69 	.word	0x08010d69
			{
			case '1'://並進速度制御ゲイン
				//printf("p , i or d ?");scanf("%c",pid);

				if(pid == 'p')
 8010ca4:	79bb      	ldrb	r3, [r7, #6]
 8010ca6:	2b70      	cmp	r3, #112	; 0x70
 8010ca8:	d104      	bne.n	8010cb4 <Change_Gain+0x1e4>
				{
					scanf("%f",&Pid[L_VELO_PID].KP);
 8010caa:	4949      	ldr	r1, [pc, #292]	; (8010dd0 <Change_Gain+0x300>)
 8010cac:	4849      	ldr	r0, [pc, #292]	; (8010dd4 <Change_Gain+0x304>)
 8010cae:	f006 fb3d 	bl	801732c <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_VELO_PID].KD);
				}
				break;
 8010cb2:	e0af      	b.n	8010e14 <Change_Gain+0x344>
				else if(pid == 'i')
 8010cb4:	79bb      	ldrb	r3, [r7, #6]
 8010cb6:	2b69      	cmp	r3, #105	; 0x69
 8010cb8:	d104      	bne.n	8010cc4 <Change_Gain+0x1f4>
					scanf("%f",&Pid[L_VELO_PID].KI);
 8010cba:	4947      	ldr	r1, [pc, #284]	; (8010dd8 <Change_Gain+0x308>)
 8010cbc:	4845      	ldr	r0, [pc, #276]	; (8010dd4 <Change_Gain+0x304>)
 8010cbe:	f006 fb35 	bl	801732c <iscanf>
				break;
 8010cc2:	e0a7      	b.n	8010e14 <Change_Gain+0x344>
				else if(pid == 'd')
 8010cc4:	79bb      	ldrb	r3, [r7, #6]
 8010cc6:	2b64      	cmp	r3, #100	; 0x64
 8010cc8:	f040 80a4 	bne.w	8010e14 <Change_Gain+0x344>
					scanf("%f",&Pid[L_VELO_PID].KD);
 8010ccc:	4943      	ldr	r1, [pc, #268]	; (8010ddc <Change_Gain+0x30c>)
 8010cce:	4841      	ldr	r0, [pc, #260]	; (8010dd4 <Change_Gain+0x304>)
 8010cd0:	f006 fb2c 	bl	801732c <iscanf>
				break;
 8010cd4:	e09e      	b.n	8010e14 <Change_Gain+0x344>

			case '2'://回転角速度制御ゲイン
				if(pid == 'p')
 8010cd6:	79bb      	ldrb	r3, [r7, #6]
 8010cd8:	2b70      	cmp	r3, #112	; 0x70
 8010cda:	d104      	bne.n	8010ce6 <Change_Gain+0x216>
				{
					scanf("%f",&Pid[A_VELO_PID].KP);
 8010cdc:	4931      	ldr	r1, [pc, #196]	; (8010da4 <Change_Gain+0x2d4>)
 8010cde:	483d      	ldr	r0, [pc, #244]	; (8010dd4 <Change_Gain+0x304>)
 8010ce0:	f006 fb24 	bl	801732c <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[A_VELO_PID].KD);
				}
				break;
 8010ce4:	e098      	b.n	8010e18 <Change_Gain+0x348>
				else if(pid == 'i')
 8010ce6:	79bb      	ldrb	r3, [r7, #6]
 8010ce8:	2b69      	cmp	r3, #105	; 0x69
 8010cea:	d104      	bne.n	8010cf6 <Change_Gain+0x226>
					scanf("%f",&Pid[A_VELO_PID].KI);
 8010cec:	493c      	ldr	r1, [pc, #240]	; (8010de0 <Change_Gain+0x310>)
 8010cee:	4839      	ldr	r0, [pc, #228]	; (8010dd4 <Change_Gain+0x304>)
 8010cf0:	f006 fb1c 	bl	801732c <iscanf>
				break;
 8010cf4:	e090      	b.n	8010e18 <Change_Gain+0x348>
				else if(pid == 'd')
 8010cf6:	79bb      	ldrb	r3, [r7, #6]
 8010cf8:	2b64      	cmp	r3, #100	; 0x64
 8010cfa:	f040 808d 	bne.w	8010e18 <Change_Gain+0x348>
					scanf("%f",&Pid[A_VELO_PID].KD);
 8010cfe:	4939      	ldr	r1, [pc, #228]	; (8010de4 <Change_Gain+0x314>)
 8010d00:	4834      	ldr	r0, [pc, #208]	; (8010dd4 <Change_Gain+0x304>)
 8010d02:	f006 fb13 	bl	801732c <iscanf>
				break;
 8010d06:	e087      	b.n	8010e18 <Change_Gain+0x348>

			case '3'://壁制御ゲイン
				if(pid == 'p')
 8010d08:	79bb      	ldrb	r3, [r7, #6]
 8010d0a:	2b70      	cmp	r3, #112	; 0x70
 8010d0c:	d104      	bne.n	8010d18 <Change_Gain+0x248>
				{
					scanf("%f",&Pid[L_WALL_PID].KP);
 8010d0e:	4936      	ldr	r1, [pc, #216]	; (8010de8 <Change_Gain+0x318>)
 8010d10:	4830      	ldr	r0, [pc, #192]	; (8010dd4 <Change_Gain+0x304>)
 8010d12:	f006 fb0b 	bl	801732c <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_WALL_PID].KD);
				}
				break;
 8010d16:	e081      	b.n	8010e1c <Change_Gain+0x34c>
				else if(pid == 'i')
 8010d18:	79bb      	ldrb	r3, [r7, #6]
 8010d1a:	2b69      	cmp	r3, #105	; 0x69
 8010d1c:	d104      	bne.n	8010d28 <Change_Gain+0x258>
					scanf("%f",&Pid[L_WALL_PID].KI);
 8010d1e:	4933      	ldr	r1, [pc, #204]	; (8010dec <Change_Gain+0x31c>)
 8010d20:	482c      	ldr	r0, [pc, #176]	; (8010dd4 <Change_Gain+0x304>)
 8010d22:	f006 fb03 	bl	801732c <iscanf>
				break;
 8010d26:	e079      	b.n	8010e1c <Change_Gain+0x34c>
				else if(pid == 'd')
 8010d28:	79bb      	ldrb	r3, [r7, #6]
 8010d2a:	2b64      	cmp	r3, #100	; 0x64
 8010d2c:	d176      	bne.n	8010e1c <Change_Gain+0x34c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 8010d2e:	4930      	ldr	r1, [pc, #192]	; (8010df0 <Change_Gain+0x320>)
 8010d30:	4828      	ldr	r0, [pc, #160]	; (8010dd4 <Change_Gain+0x304>)
 8010d32:	f006 fafb 	bl	801732c <iscanf>
				break;
 8010d36:	e071      	b.n	8010e1c <Change_Gain+0x34c>
			case '4'://壁制御ゲイン
				if(pid == 'p')
 8010d38:	79bb      	ldrb	r3, [r7, #6]
 8010d3a:	2b70      	cmp	r3, #112	; 0x70
 8010d3c:	d104      	bne.n	8010d48 <Change_Gain+0x278>
				{
					scanf("%f",&Pid[R_WALL_PID].KP);
 8010d3e:	492d      	ldr	r1, [pc, #180]	; (8010df4 <Change_Gain+0x324>)
 8010d40:	4824      	ldr	r0, [pc, #144]	; (8010dd4 <Change_Gain+0x304>)
 8010d42:	f006 faf3 	bl	801732c <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
 8010d46:	e06b      	b.n	8010e20 <Change_Gain+0x350>
				else if(pid == 'i')
 8010d48:	79bb      	ldrb	r3, [r7, #6]
 8010d4a:	2b69      	cmp	r3, #105	; 0x69
 8010d4c:	d104      	bne.n	8010d58 <Change_Gain+0x288>
					scanf("%f",&Pid[R_WALL_PID].KI);
 8010d4e:	492a      	ldr	r1, [pc, #168]	; (8010df8 <Change_Gain+0x328>)
 8010d50:	4820      	ldr	r0, [pc, #128]	; (8010dd4 <Change_Gain+0x304>)
 8010d52:	f006 faeb 	bl	801732c <iscanf>
				break;
 8010d56:	e063      	b.n	8010e20 <Change_Gain+0x350>
				else if(pid == 'd')
 8010d58:	79bb      	ldrb	r3, [r7, #6]
 8010d5a:	2b64      	cmp	r3, #100	; 0x64
 8010d5c:	d160      	bne.n	8010e20 <Change_Gain+0x350>
					scanf("%f",&Pid[R_WALL_PID].KD);
 8010d5e:	4927      	ldr	r1, [pc, #156]	; (8010dfc <Change_Gain+0x32c>)
 8010d60:	481c      	ldr	r0, [pc, #112]	; (8010dd4 <Change_Gain+0x304>)
 8010d62:	f006 fae3 	bl	801732c <iscanf>
				break;
 8010d66:	e05b      	b.n	8010e20 <Change_Gain+0x350>
			case '5'://壁制御ゲイン
				if(pid == 'p')
 8010d68:	79bb      	ldrb	r3, [r7, #6]
 8010d6a:	2b70      	cmp	r3, #112	; 0x70
 8010d6c:	d104      	bne.n	8010d78 <Change_Gain+0x2a8>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
 8010d6e:	4924      	ldr	r1, [pc, #144]	; (8010e00 <Change_Gain+0x330>)
 8010d70:	4818      	ldr	r0, [pc, #96]	; (8010dd4 <Change_Gain+0x304>)
 8010d72:	f006 fadb 	bl	801732c <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[D_WALL_PID].KD);
				}
				break;
 8010d76:	e055      	b.n	8010e24 <Change_Gain+0x354>
				else if(pid == 'i')
 8010d78:	79bb      	ldrb	r3, [r7, #6]
 8010d7a:	2b69      	cmp	r3, #105	; 0x69
 8010d7c:	d104      	bne.n	8010d88 <Change_Gain+0x2b8>
					scanf("%f",&Pid[D_WALL_PID].KI);
 8010d7e:	4921      	ldr	r1, [pc, #132]	; (8010e04 <Change_Gain+0x334>)
 8010d80:	4814      	ldr	r0, [pc, #80]	; (8010dd4 <Change_Gain+0x304>)
 8010d82:	f006 fad3 	bl	801732c <iscanf>
				break;
 8010d86:	e04d      	b.n	8010e24 <Change_Gain+0x354>
				else if(pid == 'd')
 8010d88:	79bb      	ldrb	r3, [r7, #6]
 8010d8a:	2b64      	cmp	r3, #100	; 0x64
 8010d8c:	d14a      	bne.n	8010e24 <Change_Gain+0x354>
					scanf("%f",&Pid[D_WALL_PID].KD);
 8010d8e:	491e      	ldr	r1, [pc, #120]	; (8010e08 <Change_Gain+0x338>)
 8010d90:	4810      	ldr	r0, [pc, #64]	; (8010dd4 <Change_Gain+0x304>)
 8010d92:	f006 facb 	bl	801732c <iscanf>
				break;
 8010d96:	e045      	b.n	8010e24 <Change_Gain+0x354>
 8010d98:	200009e0 	.word	0x200009e0
 8010d9c:	20000798 	.word	0x20000798
 8010da0:	0801b71c 	.word	0x0801b71c
 8010da4:	2000031c 	.word	0x2000031c
 8010da8:	0801b734 	.word	0x0801b734
 8010dac:	0801b754 	.word	0x0801b754
 8010db0:	0801b770 	.word	0x0801b770
 8010db4:	0801b78c 	.word	0x0801b78c
 8010db8:	0801b7a8 	.word	0x0801b7a8
 8010dbc:	0801b7c4 	.word	0x0801b7c4
 8010dc0:	0801b7dc 	.word	0x0801b7dc
 8010dc4:	0801b7e0 	.word	0x0801b7e0
 8010dc8:	0801b7f4 	.word	0x0801b7f4
 8010dcc:	0801b818 	.word	0x0801b818
 8010dd0:	200003cc 	.word	0x200003cc
 8010dd4:	0801b82c 	.word	0x0801b82c
 8010dd8:	200003d0 	.word	0x200003d0
 8010ddc:	200003d4 	.word	0x200003d4
 8010de0:	20000320 	.word	0x20000320
 8010de4:	20000324 	.word	0x20000324
 8010de8:	20000374 	.word	0x20000374
 8010dec:	20000378 	.word	0x20000378
 8010df0:	2000037c 	.word	0x2000037c
 8010df4:	200003a0 	.word	0x200003a0
 8010df8:	200003a4 	.word	0x200003a4
 8010dfc:	200003a8 	.word	0x200003a8
 8010e00:	20000348 	.word	0x20000348
 8010e04:	2000034c 	.word	0x2000034c
 8010e08:	20000350 	.word	0x20000350
			default :
				printf("該当しません\r\n");
 8010e0c:	4816      	ldr	r0, [pc, #88]	; (8010e68 <Change_Gain+0x398>)
 8010e0e:	f006 fa85 	bl	801731c <puts>
				break;
 8010e12:	e008      	b.n	8010e26 <Change_Gain+0x356>
				break;
 8010e14:	bf00      	nop
 8010e16:	e006      	b.n	8010e26 <Change_Gain+0x356>
				break;
 8010e18:	bf00      	nop
 8010e1a:	e004      	b.n	8010e26 <Change_Gain+0x356>
				break;
 8010e1c:	bf00      	nop
 8010e1e:	e002      	b.n	8010e26 <Change_Gain+0x356>
				break;
 8010e20:	bf00      	nop
 8010e22:	e000      	b.n	8010e26 <Change_Gain+0x356>
				break;
 8010e24:	bf00      	nop
			}
			Buffering();
 8010e26:	f7ff fd23 	bl	8010870 <Buffering>
			scanf("%c",&nl);
 8010e2a:	1d7b      	adds	r3, r7, #5
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	480f      	ldr	r0, [pc, #60]	; (8010e6c <Change_Gain+0x39c>)
 8010e30:	f006 fa7c 	bl	801732c <iscanf>
			printf("\r\n");
 8010e34:	480e      	ldr	r0, [pc, #56]	; (8010e70 <Change_Gain+0x3a0>)
 8010e36:	f006 fa71 	bl	801731c <puts>
		printf("現在のPIDゲイン\r\n");
 8010e3a:	e65e      	b.n	8010afa <Change_Gain+0x2a>
			break;
 8010e3c:	bf00      	nop
		}

	}
	printf("\r\n完了\r\n");
 8010e3e:	480d      	ldr	r0, [pc, #52]	; (8010e74 <Change_Gain+0x3a4>)
 8010e40:	f006 fa6c 	bl	801731c <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 8010e44:	f7ff f8f3 	bl	801002e <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 8010e48:	f7ff fd26 	bl	8010898 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 8010e4c:	2007      	movs	r0, #7
 8010e4e:	f7ff faa9 	bl	80103a4 <ChangeLED>
	HAL_Delay(200);
 8010e52:	20c8      	movs	r0, #200	; 0xc8
 8010e54:	f000 fb80 	bl	8011558 <HAL_Delay>
	ChangeLED(0);
 8010e58:	2000      	movs	r0, #0
 8010e5a:	f7ff faa3 	bl	80103a4 <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 8010e5e:	bf00      	nop
 8010e60:	3708      	adds	r7, #8
 8010e62:	46bd      	mov	sp, r7
 8010e64:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010e68:	0801b830 	.word	0x0801b830
 8010e6c:	0801b7dc 	.word	0x0801b7dc
 8010e70:	0801b844 	.word	0x0801b844
 8010e74:	0801b848 	.word	0x0801b848

08010e78 <PIDSetGain>:
//		elast[i] = 0;
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b085      	sub	sp, #20
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	ed87 0a02 	vstr	s0, [r7, #8]
 8010e84:	edc7 0a01 	vstr	s1, [r7, #4]
 8010e88:	ed87 1a00 	vstr	s2, [r7]
	Pid[n].KP = kp;
 8010e8c:	4a0f      	ldr	r2, [pc, #60]	; (8010ecc <PIDSetGain+0x54>)
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	212c      	movs	r1, #44	; 0x2c
 8010e92:	fb01 f303 	mul.w	r3, r1, r3
 8010e96:	4413      	add	r3, r2
 8010e98:	68ba      	ldr	r2, [r7, #8]
 8010e9a:	601a      	str	r2, [r3, #0]
	Pid[n].KI = ki;
 8010e9c:	4a0b      	ldr	r2, [pc, #44]	; (8010ecc <PIDSetGain+0x54>)
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	212c      	movs	r1, #44	; 0x2c
 8010ea2:	fb01 f303 	mul.w	r3, r1, r3
 8010ea6:	4413      	add	r3, r2
 8010ea8:	3304      	adds	r3, #4
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	601a      	str	r2, [r3, #0]
	Pid[n].KD = kd;
 8010eae:	4a07      	ldr	r2, [pc, #28]	; (8010ecc <PIDSetGain+0x54>)
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	212c      	movs	r1, #44	; 0x2c
 8010eb4:	fb01 f303 	mul.w	r3, r1, r3
 8010eb8:	4413      	add	r3, r2
 8010eba:	3308      	adds	r3, #8
 8010ebc:	683a      	ldr	r2, [r7, #0]
 8010ebe:	601a      	str	r2, [r3, #0]

}
 8010ec0:	bf00      	nop
 8010ec2:	3714      	adds	r7, #20
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr
 8010ecc:	2000031c 	.word	0x2000031c

08010ed0 <PIDChangeFlag>:
//	ei[n] = 0;
//	elast[n] = 0;
//}

void PIDChangeFlag(int n, int on_or_off)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b083      	sub	sp, #12
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
 8010ed8:	6039      	str	r1, [r7, #0]
	Pid[n].flag = on_or_off;
 8010eda:	4a07      	ldr	r2, [pc, #28]	; (8010ef8 <PIDChangeFlag+0x28>)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	212c      	movs	r1, #44	; 0x2c
 8010ee0:	fb01 f303 	mul.w	r3, r1, r3
 8010ee4:	4413      	add	r3, r2
 8010ee6:	3328      	adds	r3, #40	; 0x28
 8010ee8:	683a      	ldr	r2, [r7, #0]
 8010eea:	601a      	str	r2, [r3, #0]
}
 8010eec:	bf00      	nop
 8010eee:	370c      	adds	r7, #12
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef6:	4770      	bx	lr
 8010ef8:	2000031c 	.word	0x2000031c

08010efc <PIDReset>:
int PIDGetFlag(int n)
{
	return Pid[n].flag;
}
void PIDReset(int n)
{
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 8010f04:	4a1b      	ldr	r2, [pc, #108]	; (8010f74 <PIDReset+0x78>)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	212c      	movs	r1, #44	; 0x2c
 8010f0a:	fb01 f303 	mul.w	r3, r1, r3
 8010f0e:	4413      	add	r3, r2
 8010f10:	330c      	adds	r3, #12
 8010f12:	f04f 0200 	mov.w	r2, #0
 8010f16:	601a      	str	r2, [r3, #0]
	Pid[n].ei = 0;
 8010f18:	4a16      	ldr	r2, [pc, #88]	; (8010f74 <PIDReset+0x78>)
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	212c      	movs	r1, #44	; 0x2c
 8010f1e:	fb01 f303 	mul.w	r3, r1, r3
 8010f22:	4413      	add	r3, r2
 8010f24:	3310      	adds	r3, #16
 8010f26:	f04f 0200 	mov.w	r2, #0
 8010f2a:	601a      	str	r2, [r3, #0]
	Pid[n].ed = 0;
 8010f2c:	4a11      	ldr	r2, [pc, #68]	; (8010f74 <PIDReset+0x78>)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	212c      	movs	r1, #44	; 0x2c
 8010f32:	fb01 f303 	mul.w	r3, r1, r3
 8010f36:	4413      	add	r3, r2
 8010f38:	3314      	adds	r3, #20
 8010f3a:	f04f 0200 	mov.w	r2, #0
 8010f3e:	601a      	str	r2, [r3, #0]
	Pid[n].elast = 0;
 8010f40:	4a0c      	ldr	r2, [pc, #48]	; (8010f74 <PIDReset+0x78>)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	212c      	movs	r1, #44	; 0x2c
 8010f46:	fb01 f303 	mul.w	r3, r1, r3
 8010f4a:	4413      	add	r3, r2
 8010f4c:	3318      	adds	r3, #24
 8010f4e:	f04f 0200 	mov.w	r2, #0
 8010f52:	601a      	str	r2, [r3, #0]
	Pid[n].out = 0;
 8010f54:	4a07      	ldr	r2, [pc, #28]	; (8010f74 <PIDReset+0x78>)
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	212c      	movs	r1, #44	; 0x2c
 8010f5a:	fb01 f303 	mul.w	r3, r1, r3
 8010f5e:	4413      	add	r3, r2
 8010f60:	3324      	adds	r3, #36	; 0x24
 8010f62:	2200      	movs	r2, #0
 8010f64:	601a      	str	r2, [r3, #0]
}
 8010f66:	bf00      	nop
 8010f68:	370c      	adds	r7, #12
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop
 8010f74:	2000031c 	.word	0x2000031c

08010f78 <PIDControl>:
//{
//	Pid[n].target = target;
//	Pid[n].current = current;
//}
inline int PIDControl(int n, float target, float current)
{
 8010f78:	b590      	push	{r4, r7, lr}
 8010f7a:	b085      	sub	sp, #20
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	60f8      	str	r0, [r7, #12]
 8010f80:	ed87 0a02 	vstr	s0, [r7, #8]
 8010f84:	edc7 0a01 	vstr	s1, [r7, #4]
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 8010f88:	4a90      	ldr	r2, [pc, #576]	; (80111cc <PIDControl+0x254>)
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	212c      	movs	r1, #44	; 0x2c
 8010f8e:	fb01 f303 	mul.w	r3, r1, r3
 8010f92:	4413      	add	r3, r2
 8010f94:	3328      	adds	r3, #40	; 0x28
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d132      	bne.n	8011002 <PIDControl+0x8a>
	{
		Pid[n].e = 0.0f;
 8010f9c:	4a8b      	ldr	r2, [pc, #556]	; (80111cc <PIDControl+0x254>)
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	212c      	movs	r1, #44	; 0x2c
 8010fa2:	fb01 f303 	mul.w	r3, r1, r3
 8010fa6:	4413      	add	r3, r2
 8010fa8:	330c      	adds	r3, #12
 8010faa:	f04f 0200 	mov.w	r2, #0
 8010fae:	601a      	str	r2, [r3, #0]
		Pid[n].ei = 0.0f;
 8010fb0:	4a86      	ldr	r2, [pc, #536]	; (80111cc <PIDControl+0x254>)
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	212c      	movs	r1, #44	; 0x2c
 8010fb6:	fb01 f303 	mul.w	r3, r1, r3
 8010fba:	4413      	add	r3, r2
 8010fbc:	3310      	adds	r3, #16
 8010fbe:	f04f 0200 	mov.w	r2, #0
 8010fc2:	601a      	str	r2, [r3, #0]
		Pid[n].ed = 0.0f;
 8010fc4:	4a81      	ldr	r2, [pc, #516]	; (80111cc <PIDControl+0x254>)
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	212c      	movs	r1, #44	; 0x2c
 8010fca:	fb01 f303 	mul.w	r3, r1, r3
 8010fce:	4413      	add	r3, r2
 8010fd0:	3314      	adds	r3, #20
 8010fd2:	f04f 0200 	mov.w	r2, #0
 8010fd6:	601a      	str	r2, [r3, #0]
		Pid[n].elast = 0.0f;
 8010fd8:	4a7c      	ldr	r2, [pc, #496]	; (80111cc <PIDControl+0x254>)
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	212c      	movs	r1, #44	; 0x2c
 8010fde:	fb01 f303 	mul.w	r3, r1, r3
 8010fe2:	4413      	add	r3, r2
 8010fe4:	3318      	adds	r3, #24
 8010fe6:	f04f 0200 	mov.w	r2, #0
 8010fea:	601a      	str	r2, [r3, #0]
		Pid[n].out = 0;
 8010fec:	4a77      	ldr	r2, [pc, #476]	; (80111cc <PIDControl+0x254>)
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	212c      	movs	r1, #44	; 0x2c
 8010ff2:	fb01 f303 	mul.w	r3, r1, r3
 8010ff6:	4413      	add	r3, r2
 8010ff8:	3324      	adds	r3, #36	; 0x24
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	601a      	str	r2, [r3, #0]
		return 0;
 8010ffe:	2300      	movs	r3, #0
 8011000:	e0df      	b.n	80111c2 <PIDControl+0x24a>
		//PIDReset(n);
	}
	else
	{
		Pid[n].target = target;
 8011002:	4a72      	ldr	r2, [pc, #456]	; (80111cc <PIDControl+0x254>)
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	212c      	movs	r1, #44	; 0x2c
 8011008:	fb01 f303 	mul.w	r3, r1, r3
 801100c:	4413      	add	r3, r2
 801100e:	3320      	adds	r3, #32
 8011010:	68ba      	ldr	r2, [r7, #8]
 8011012:	601a      	str	r2, [r3, #0]
		Pid[n].current = current;
 8011014:	4a6d      	ldr	r2, [pc, #436]	; (80111cc <PIDControl+0x254>)
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	212c      	movs	r1, #44	; 0x2c
 801101a:	fb01 f303 	mul.w	r3, r1, r3
 801101e:	4413      	add	r3, r2
 8011020:	331c      	adds	r3, #28
 8011022:	687a      	ldr	r2, [r7, #4]
 8011024:	601a      	str	r2, [r3, #0]

		Pid[n].e = Pid[n].target - Pid[n].current;
 8011026:	4a69      	ldr	r2, [pc, #420]	; (80111cc <PIDControl+0x254>)
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	212c      	movs	r1, #44	; 0x2c
 801102c:	fb01 f303 	mul.w	r3, r1, r3
 8011030:	4413      	add	r3, r2
 8011032:	3320      	adds	r3, #32
 8011034:	ed93 7a00 	vldr	s14, [r3]
 8011038:	4a64      	ldr	r2, [pc, #400]	; (80111cc <PIDControl+0x254>)
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	212c      	movs	r1, #44	; 0x2c
 801103e:	fb01 f303 	mul.w	r3, r1, r3
 8011042:	4413      	add	r3, r2
 8011044:	331c      	adds	r3, #28
 8011046:	edd3 7a00 	vldr	s15, [r3]
 801104a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801104e:	4a5f      	ldr	r2, [pc, #380]	; (80111cc <PIDControl+0x254>)
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	212c      	movs	r1, #44	; 0x2c
 8011054:	fb01 f303 	mul.w	r3, r1, r3
 8011058:	4413      	add	r3, r2
 801105a:	330c      	adds	r3, #12
 801105c:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ei += Pid[n].e * pid_T;
 8011060:	4a5a      	ldr	r2, [pc, #360]	; (80111cc <PIDControl+0x254>)
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	212c      	movs	r1, #44	; 0x2c
 8011066:	fb01 f303 	mul.w	r3, r1, r3
 801106a:	4413      	add	r3, r2
 801106c:	3310      	adds	r3, #16
 801106e:	ed93 7a00 	vldr	s14, [r3]
 8011072:	4a56      	ldr	r2, [pc, #344]	; (80111cc <PIDControl+0x254>)
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	212c      	movs	r1, #44	; 0x2c
 8011078:	fb01 f303 	mul.w	r3, r1, r3
 801107c:	4413      	add	r3, r2
 801107e:	330c      	adds	r3, #12
 8011080:	edd3 7a00 	vldr	s15, [r3]
 8011084:	eddf 6a52 	vldr	s13, [pc, #328]	; 80111d0 <PIDControl+0x258>
 8011088:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801108c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011090:	4a4e      	ldr	r2, [pc, #312]	; (80111cc <PIDControl+0x254>)
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	212c      	movs	r1, #44	; 0x2c
 8011096:	fb01 f303 	mul.w	r3, r1, r3
 801109a:	4413      	add	r3, r2
 801109c:	3310      	adds	r3, #16
 801109e:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 80110a2:	4a4a      	ldr	r2, [pc, #296]	; (80111cc <PIDControl+0x254>)
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	212c      	movs	r1, #44	; 0x2c
 80110a8:	fb01 f303 	mul.w	r3, r1, r3
 80110ac:	4413      	add	r3, r2
 80110ae:	330c      	adds	r3, #12
 80110b0:	ed93 7a00 	vldr	s14, [r3]
 80110b4:	4a45      	ldr	r2, [pc, #276]	; (80111cc <PIDControl+0x254>)
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	212c      	movs	r1, #44	; 0x2c
 80110ba:	fb01 f303 	mul.w	r3, r1, r3
 80110be:	4413      	add	r3, r2
 80110c0:	3318      	adds	r3, #24
 80110c2:	edd3 7a00 	vldr	s15, [r3]
 80110c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110ca:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80111d4 <PIDControl+0x25c>
 80110ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80110d2:	4a3e      	ldr	r2, [pc, #248]	; (80111cc <PIDControl+0x254>)
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	212c      	movs	r1, #44	; 0x2c
 80110d8:	fb01 f303 	mul.w	r3, r1, r3
 80110dc:	4413      	add	r3, r2
 80110de:	3314      	adds	r3, #20
 80110e0:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].elast = Pid[n].e;
 80110e4:	4a39      	ldr	r2, [pc, #228]	; (80111cc <PIDControl+0x254>)
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	212c      	movs	r1, #44	; 0x2c
 80110ea:	fb01 f303 	mul.w	r3, r1, r3
 80110ee:	4413      	add	r3, r2
 80110f0:	330c      	adds	r3, #12
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	4935      	ldr	r1, [pc, #212]	; (80111cc <PIDControl+0x254>)
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	202c      	movs	r0, #44	; 0x2c
 80110fa:	fb00 f303 	mul.w	r3, r0, r3
 80110fe:	440b      	add	r3, r1
 8011100:	3318      	adds	r3, #24
 8011102:	601a      	str	r2, [r3, #0]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 8011104:	4a31      	ldr	r2, [pc, #196]	; (80111cc <PIDControl+0x254>)
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	212c      	movs	r1, #44	; 0x2c
 801110a:	fb01 f303 	mul.w	r3, r1, r3
 801110e:	4413      	add	r3, r2
 8011110:	ed93 7a00 	vldr	s14, [r3]
 8011114:	4a2d      	ldr	r2, [pc, #180]	; (80111cc <PIDControl+0x254>)
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	212c      	movs	r1, #44	; 0x2c
 801111a:	fb01 f303 	mul.w	r3, r1, r3
 801111e:	4413      	add	r3, r2
 8011120:	330c      	adds	r3, #12
 8011122:	edd3 7a00 	vldr	s15, [r3]
 8011126:	ee27 7a27 	vmul.f32	s14, s14, s15
 801112a:	4a28      	ldr	r2, [pc, #160]	; (80111cc <PIDControl+0x254>)
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	212c      	movs	r1, #44	; 0x2c
 8011130:	fb01 f303 	mul.w	r3, r1, r3
 8011134:	4413      	add	r3, r2
 8011136:	3304      	adds	r3, #4
 8011138:	edd3 6a00 	vldr	s13, [r3]
 801113c:	4a23      	ldr	r2, [pc, #140]	; (80111cc <PIDControl+0x254>)
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	212c      	movs	r1, #44	; 0x2c
 8011142:	fb01 f303 	mul.w	r3, r1, r3
 8011146:	4413      	add	r3, r2
 8011148:	3310      	adds	r3, #16
 801114a:	edd3 7a00 	vldr	s15, [r3]
 801114e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011152:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011156:	4a1d      	ldr	r2, [pc, #116]	; (80111cc <PIDControl+0x254>)
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	212c      	movs	r1, #44	; 0x2c
 801115c:	fb01 f303 	mul.w	r3, r1, r3
 8011160:	4413      	add	r3, r2
 8011162:	3308      	adds	r3, #8
 8011164:	edd3 6a00 	vldr	s13, [r3]
 8011168:	4a18      	ldr	r2, [pc, #96]	; (80111cc <PIDControl+0x254>)
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	212c      	movs	r1, #44	; 0x2c
 801116e:	fb01 f303 	mul.w	r3, r1, r3
 8011172:	4413      	add	r3, r2
 8011174:	3314      	adds	r3, #20
 8011176:	edd3 7a00 	vldr	s15, [r3]
 801117a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801117e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011182:	ee17 0a90 	vmov	r0, s15
 8011186:	f7f7 f917 	bl	80083b8 <__aeabi_f2d>
 801118a:	4603      	mov	r3, r0
 801118c:	460c      	mov	r4, r1
 801118e:	ec44 3b10 	vmov	d0, r3, r4
 8011192:	f005 f989 	bl	80164a8 <round>
 8011196:	ec54 3b10 	vmov	r3, r4, d0
 801119a:	4618      	mov	r0, r3
 801119c:	4621      	mov	r1, r4
 801119e:	f7f7 fc13 	bl	80089c8 <__aeabi_d2iz>
 80111a2:	4a0a      	ldr	r2, [pc, #40]	; (80111cc <PIDControl+0x254>)
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	212c      	movs	r1, #44	; 0x2c
 80111a8:	fb01 f303 	mul.w	r3, r1, r3
 80111ac:	4413      	add	r3, r2
 80111ae:	3324      	adds	r3, #36	; 0x24
 80111b0:	6018      	str	r0, [r3, #0]
		return Pid[n].out;
 80111b2:	4a06      	ldr	r2, [pc, #24]	; (80111cc <PIDControl+0x254>)
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	212c      	movs	r1, #44	; 0x2c
 80111b8:	fb01 f303 	mul.w	r3, r1, r3
 80111bc:	4413      	add	r3, r2
 80111be:	3324      	adds	r3, #36	; 0x24
 80111c0:	681b      	ldr	r3, [r3, #0]
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3714      	adds	r7, #20
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd90      	pop	{r4, r7, pc}
 80111ca:	bf00      	nop
 80111cc:	2000031c 	.word	0x2000031c
 80111d0:	3a83126f 	.word	0x3a83126f
 80111d4:	4479ffff 	.word	0x4479ffff

080111d8 <HAL_GPIO_EXTI_Callback>:

#include <stdio.h>
#include <math.h>
//中間モジュール。
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80111d8:	b480      	push	{r7}
 80111da:	b083      	sub	sp, #12
 80111dc:	af00      	add	r7, sp, #0
 80111de:	4603      	mov	r3, r0
 80111e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12)
 80111e2:	88fb      	ldrh	r3, [r7, #6]
 80111e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80111e8:	d10b      	bne.n	8011202 <HAL_GPIO_EXTI_Callback+0x2a>
	{
	  gpio_callback_count++;
 80111ea:	4b09      	ldr	r3, [pc, #36]	; (8011210 <HAL_GPIO_EXTI_Callback+0x38>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	3301      	adds	r3, #1
 80111f0:	4a07      	ldr	r2, [pc, #28]	; (8011210 <HAL_GPIO_EXTI_Callback+0x38>)
 80111f2:	6013      	str	r3, [r2, #0]
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 80111f4:	4b06      	ldr	r3, [pc, #24]	; (8011210 <HAL_GPIO_EXTI_Callback+0x38>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	2b01      	cmp	r3, #1
 80111fa:	dd02      	ble.n	8011202 <HAL_GPIO_EXTI_Callback+0x2a>
 80111fc:	4b04      	ldr	r3, [pc, #16]	; (8011210 <HAL_GPIO_EXTI_Callback+0x38>)
 80111fe:	2200      	movs	r2, #0
 8011200:	601a      	str	r2, [r3, #0]
	}
}
 8011202:	bf00      	nop
 8011204:	370c      	adds	r7, #12
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop
 8011210:	200004d4 	.word	0x200004d4

08011214 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int8_t mode)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b084      	sub	sp, #16
 8011218:	af00      	add	r7, sp, #0
 801121a:	4603      	mov	r3, r0
 801121c:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i < 5; i++)
 801121e:	2300      	movs	r3, #0
 8011220:	60fb      	str	r3, [r7, #12]
 8011222:	e010      	b.n	8011246 <Signal+0x32>
	{
		ChangeLED(mode);
 8011224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011228:	4618      	mov	r0, r3
 801122a:	f7ff f8bb 	bl	80103a4 <ChangeLED>
		HAL_Delay(100);
 801122e:	2064      	movs	r0, #100	; 0x64
 8011230:	f000 f992 	bl	8011558 <HAL_Delay>
		ChangeLED(0);
 8011234:	2000      	movs	r0, #0
 8011236:	f7ff f8b5 	bl	80103a4 <ChangeLED>
		HAL_Delay(100);
 801123a:	2064      	movs	r0, #100	; 0x64
 801123c:	f000 f98c 	bl	8011558 <HAL_Delay>
	for(int i=0; i < 5; i++)
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	3301      	adds	r3, #1
 8011244:	60fb      	str	r3, [r7, #12]
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	2b04      	cmp	r3, #4
 801124a:	ddeb      	ble.n	8011224 <Signal+0x10>
	}
}
 801124c:	bf00      	nop
 801124e:	3710      	adds	r7, #16
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}

08011254 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b086      	sub	sp, #24
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 801125c:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80112ac <BatteryCheck+0x58>
 8011260:	eddf 0a13 	vldr	s1, [pc, #76]	; 80112b0 <BatteryCheck+0x5c>
 8011264:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f7ff fa67 	bl	801073c <ADCToBatteryVoltage>
 801126e:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 8011272:	2103      	movs	r1, #3
 8011274:	2002      	movs	r0, #2
 8011276:	f7ff fa8b 	bl	8010790 <IntegerPower>
 801127a:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 801127c:	6938      	ldr	r0, [r7, #16]
 801127e:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 80112b4 <BatteryCheck+0x60>
 8011282:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80112b8 <BatteryCheck+0x64>
 8011286:	ed97 0a05 	vldr	s0, [r7, #20]
 801128a:	f7ff fa9e 	bl	80107ca <GetBatteryLevel>
 801128e:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 8011290:	68f9      	ldr	r1, [r7, #12]
 8011292:	480a      	ldr	r0, [pc, #40]	; (80112bc <BatteryCheck+0x68>)
 8011294:	f005 ffce 	bl	8017234 <iprintf>
	Signal( battery_level );
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	b25b      	sxtb	r3, r3
 801129c:	4618      	mov	r0, r3
 801129e:	f7ff ffb9 	bl	8011214 <Signal>
}
 80112a2:	bf00      	nop
 80112a4:	3718      	adds	r7, #24
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}
 80112aa:	bf00      	nop
 80112ac:	45800000 	.word	0x45800000
 80112b0:	40533333 	.word	0x40533333
 80112b4:	41066666 	.word	0x41066666
 80112b8:	40e66666 	.word	0x40e66666
 80112bc:	0801b854 	.word	0x0801b854

080112c0 <PhotoSwitch>:

//ここ書いたら大事な処理を書き始められる
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。
void PhotoSwitch()
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2);
 80112c4:	2202      	movs	r2, #2
 80112c6:	490c      	ldr	r1, [pc, #48]	; (80112f8 <PhotoSwitch+0x38>)
 80112c8:	480c      	ldr	r0, [pc, #48]	; (80112fc <PhotoSwitch+0x3c>)
 80112ca:	f000 f9ab 	bl	8011624 <HAL_ADC_Start_DMA>
	//tim8のduty比を下げて電流消費を削減
	HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1);
 80112ce:	2100      	movs	r1, #0
 80112d0:	480b      	ldr	r0, [pc, #44]	; (8011300 <PhotoSwitch+0x40>)
 80112d2:	f004 f9c4 	bl	801565e <HAL_TIMEx_OCN_Start_IT>

	while(adc2[1] < 200)
 80112d6:	bf00      	nop
 80112d8:	4b07      	ldr	r3, [pc, #28]	; (80112f8 <PhotoSwitch+0x38>)
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	2bc7      	cmp	r3, #199	; 0xc7
 80112de:	d9fb      	bls.n	80112d8 <PhotoSwitch+0x18>
	{

	}
	HAL_ADC_Stop_DMA(&hadc2);
 80112e0:	4806      	ldr	r0, [pc, #24]	; (80112fc <PhotoSwitch+0x3c>)
 80112e2:	f000 fa91 	bl	8011808 <HAL_ADC_Stop_DMA>
	HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1);
 80112e6:	2100      	movs	r1, #0
 80112e8:	4805      	ldr	r0, [pc, #20]	; (8011300 <PhotoSwitch+0x40>)
 80112ea:	f004 fa0d 	bl	8015708 <HAL_TIMEx_OCN_Stop_IT>
	Signal( 7 );
 80112ee:	2007      	movs	r0, #7
 80112f0:	f7ff ff90 	bl	8011214 <Signal>
}
 80112f4:	bf00      	nop
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	200002cc 	.word	0x200002cc
 80112fc:	20000818 	.word	0x20000818
 8011300:	20000798 	.word	0x20000798

08011304 <ModeSelect>:

void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	4603      	mov	r3, r0
 801130c:	603a      	str	r2, [r7, #0]
 801130e:	71fb      	strb	r3, [r7, #7]
 8011310:	460b      	mov	r3, r1
 8011312:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ

	//エンコーダ開始。初期値セット込み
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 8011314:	2100      	movs	r1, #0
 8011316:	483d      	ldr	r0, [pc, #244]	; (801140c <ModeSelect+0x108>)
 8011318:	f003 fb06 	bl	8014928 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 801131c:	2104      	movs	r1, #4
 801131e:	483b      	ldr	r0, [pc, #236]	; (801140c <ModeSelect+0x108>)
 8011320:	f003 fb02 	bl	8014928 <HAL_TIM_Encoder_Start>
	//while中で選択
	*pMode=min;
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	79fa      	ldrb	r2, [r7, #7]
 8011328:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	TIM3->CNT = INITIAL_PULSE;
 801132a:	4b39      	ldr	r3, [pc, #228]	; (8011410 <ModeSelect+0x10c>)
 801132c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011330:	625a      	str	r2, [r3, #36]	; 0x24
	gpio_callback_count = 0;
 8011332:	4b38      	ldr	r3, [pc, #224]	; (8011414 <ModeSelect+0x110>)
 8011334:	2200      	movs	r2, #0
 8011336:	601a      	str	r2, [r3, #0]
	int ENC3_LEFT;
	while(gpio_callback_count == 0/**/) //前向きの
 8011338:	e055      	b.n	80113e6 <ModeSelect+0xe2>
	{
		//printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 801133a:	4b35      	ldr	r3, [pc, #212]	; (8011410 <ModeSelect+0x10c>)
 801133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801133e:	60fb      	str	r3, [r7, #12]

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	ee07 3a90 	vmov	s15, r3
 8011346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801134a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011418 <ModeSelect+0x114>
 801134e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011356:	db1c      	blt.n	8011392 <ModeSelect+0x8e>
		  {
		  	  *pMode += 1;
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	f993 3000 	ldrsb.w	r3, [r3]
 801135e:	b2db      	uxtb	r3, r3
 8011360:	3301      	adds	r3, #1
 8011362:	b2db      	uxtb	r3, r3
 8011364:	b25a      	sxtb	r2, r3
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	f993 3000 	ldrsb.w	r3, [r3]
 8011370:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8011374:	429a      	cmp	r2, r3
 8011376:	da02      	bge.n	801137e <ModeSelect+0x7a>
		  	  {
		  		  *pMode = min;
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	79fa      	ldrb	r2, [r7, #7]
 801137c:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	f993 3000 	ldrsb.w	r3, [r3]
 8011384:	4618      	mov	r0, r3
 8011386:	f7ff f80d 	bl	80103a4 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 801138a:	4b21      	ldr	r3, [pc, #132]	; (8011410 <ModeSelect+0x10c>)
 801138c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011390:	625a      	str	r2, [r3, #36]	; 0x24

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	ee07 3a90 	vmov	s15, r3
 8011398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801139c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801141c <ModeSelect+0x118>
 80113a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80113a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a8:	d900      	bls.n	80113ac <ModeSelect+0xa8>
 80113aa:	e01c      	b.n	80113e6 <ModeSelect+0xe2>
		  {
		  	  *pMode -= 1;
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	f993 3000 	ldrsb.w	r3, [r3]
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	3b01      	subs	r3, #1
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	b25a      	sxtb	r2, r3
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	f993 3000 	ldrsb.w	r3, [r3]
 80113c4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80113c8:	429a      	cmp	r2, r3
 80113ca:	dd02      	ble.n	80113d2 <ModeSelect+0xce>
		  	  {
		  	  		  *pMode = max;
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	79ba      	ldrb	r2, [r7, #6]
 80113d0:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	f993 3000 	ldrsb.w	r3, [r3]
 80113d8:	4618      	mov	r0, r3
 80113da:	f7fe ffe3 	bl	80103a4 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 80113de:	4b0c      	ldr	r3, [pc, #48]	; (8011410 <ModeSelect+0x10c>)
 80113e0:	f247 522f 	movw	r2, #29999	; 0x752f
 80113e4:	625a      	str	r2, [r3, #36]	; 0x24
	while(gpio_callback_count == 0/**/) //前向きの
 80113e6:	4b0b      	ldr	r3, [pc, #44]	; (8011414 <ModeSelect+0x110>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d0a5      	beq.n	801133a <ModeSelect+0x36>
		  }
	}
	gpio_callback_count = 0;
 80113ee:	4b09      	ldr	r3, [pc, #36]	; (8011414 <ModeSelect+0x110>)
 80113f0:	2200      	movs	r2, #0
 80113f2:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 80113f4:	2100      	movs	r1, #0
 80113f6:	4805      	ldr	r0, [pc, #20]	; (801140c <ModeSelect+0x108>)
 80113f8:	f003 facd 	bl	8014996 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 80113fc:	2104      	movs	r1, #4
 80113fe:	4803      	ldr	r0, [pc, #12]	; (801140c <ModeSelect+0x108>)
 8011400:	f003 fac9 	bl	8014996 <HAL_TIM_Encoder_Stop>
}
 8011404:	bf00      	nop
 8011406:	3710      	adds	r7, #16
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}
 801140c:	20000860 	.word	0x20000860
 8011410:	40000400 	.word	0x40000400
 8011414:	200004d4 	.word	0x200004d4
 8011418:	47352f00 	.word	0x47352f00
 801141c:	4654bc00 	.word	0x4654bc00

08011420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8011420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011458 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011426:	e003      	b.n	8011430 <LoopCopyDataInit>

08011428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011428:	4b0c      	ldr	r3, [pc, #48]	; (801145c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801142a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801142c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801142e:	3104      	adds	r1, #4

08011430 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011430:	480b      	ldr	r0, [pc, #44]	; (8011460 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011432:	4b0c      	ldr	r3, [pc, #48]	; (8011464 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011438:	d3f6      	bcc.n	8011428 <CopyDataInit>
  ldr  r2, =_sbss
 801143a:	4a0b      	ldr	r2, [pc, #44]	; (8011468 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801143c:	e002      	b.n	8011444 <LoopFillZerobss>

0801143e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801143e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011440:	f842 3b04 	str.w	r3, [r2], #4

08011444 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011444:	4b09      	ldr	r3, [pc, #36]	; (801146c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011446:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011448:	d3f9      	bcc.n	801143e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801144a:	f7fe fbe7 	bl	800fc1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801144e:	f005 f87b 	bl	8016548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011452:	f7fd fa79 	bl	800e948 <main>
  bx  lr    
 8011456:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8011458:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 801145c:	0801bbdc 	.word	0x0801bbdc
  ldr  r0, =_sdata
 8011460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8011464:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8011468:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 801146c:	20000aa8 	.word	0x20000aa8

08011470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011470:	e7fe      	b.n	8011470 <ADC_IRQHandler>
	...

08011474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011478:	4b0e      	ldr	r3, [pc, #56]	; (80114b4 <HAL_Init+0x40>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	4a0d      	ldr	r2, [pc, #52]	; (80114b4 <HAL_Init+0x40>)
 801147e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8011484:	4b0b      	ldr	r3, [pc, #44]	; (80114b4 <HAL_Init+0x40>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	4a0a      	ldr	r2, [pc, #40]	; (80114b4 <HAL_Init+0x40>)
 801148a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801148e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011490:	4b08      	ldr	r3, [pc, #32]	; (80114b4 <HAL_Init+0x40>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	4a07      	ldr	r2, [pc, #28]	; (80114b4 <HAL_Init+0x40>)
 8011496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801149a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801149c:	2003      	movs	r0, #3
 801149e:	f000 fd8b 	bl	8011fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80114a2:	2000      	movs	r0, #0
 80114a4:	f000 f808 	bl	80114b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80114a8:	f7fe f81c 	bl	800f4e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80114ac:	2300      	movs	r3, #0
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop
 80114b4:	40023c00 	.word	0x40023c00

080114b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80114c0:	4b12      	ldr	r3, [pc, #72]	; (801150c <HAL_InitTick+0x54>)
 80114c2:	681a      	ldr	r2, [r3, #0]
 80114c4:	4b12      	ldr	r3, [pc, #72]	; (8011510 <HAL_InitTick+0x58>)
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	4619      	mov	r1, r3
 80114ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80114ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80114d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80114d6:	4618      	mov	r0, r3
 80114d8:	f000 fda3 	bl	8012022 <HAL_SYSTICK_Config>
 80114dc:	4603      	mov	r3, r0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d001      	beq.n	80114e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80114e2:	2301      	movs	r3, #1
 80114e4:	e00e      	b.n	8011504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2b0f      	cmp	r3, #15
 80114ea:	d80a      	bhi.n	8011502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80114ec:	2200      	movs	r2, #0
 80114ee:	6879      	ldr	r1, [r7, #4]
 80114f0:	f04f 30ff 	mov.w	r0, #4294967295
 80114f4:	f000 fd6b 	bl	8011fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80114f8:	4a06      	ldr	r2, [pc, #24]	; (8011514 <HAL_InitTick+0x5c>)
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80114fe:	2300      	movs	r3, #0
 8011500:	e000      	b.n	8011504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8011502:	2301      	movs	r3, #1
}
 8011504:	4618      	mov	r0, r3
 8011506:	3708      	adds	r7, #8
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}
 801150c:	20000020 	.word	0x20000020
 8011510:	20000028 	.word	0x20000028
 8011514:	20000024 	.word	0x20000024

08011518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011518:	b480      	push	{r7}
 801151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801151c:	4b06      	ldr	r3, [pc, #24]	; (8011538 <HAL_IncTick+0x20>)
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	461a      	mov	r2, r3
 8011522:	4b06      	ldr	r3, [pc, #24]	; (801153c <HAL_IncTick+0x24>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	4413      	add	r3, r2
 8011528:	4a04      	ldr	r2, [pc, #16]	; (801153c <HAL_IncTick+0x24>)
 801152a:	6013      	str	r3, [r2, #0]
}
 801152c:	bf00      	nop
 801152e:	46bd      	mov	sp, r7
 8011530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop
 8011538:	20000028 	.word	0x20000028
 801153c:	20000a80 	.word	0x20000a80

08011540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011540:	b480      	push	{r7}
 8011542:	af00      	add	r7, sp, #0
  return uwTick;
 8011544:	4b03      	ldr	r3, [pc, #12]	; (8011554 <HAL_GetTick+0x14>)
 8011546:	681b      	ldr	r3, [r3, #0]
}
 8011548:	4618      	mov	r0, r3
 801154a:	46bd      	mov	sp, r7
 801154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011550:	4770      	bx	lr
 8011552:	bf00      	nop
 8011554:	20000a80 	.word	0x20000a80

08011558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b084      	sub	sp, #16
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011560:	f7ff ffee 	bl	8011540 <HAL_GetTick>
 8011564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011570:	d005      	beq.n	801157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011572:	4b09      	ldr	r3, [pc, #36]	; (8011598 <HAL_Delay+0x40>)
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	461a      	mov	r2, r3
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	4413      	add	r3, r2
 801157c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801157e:	bf00      	nop
 8011580:	f7ff ffde 	bl	8011540 <HAL_GetTick>
 8011584:	4602      	mov	r2, r0
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	68fa      	ldr	r2, [r7, #12]
 801158c:	429a      	cmp	r2, r3
 801158e:	d8f7      	bhi.n	8011580 <HAL_Delay+0x28>
  {
  }
}
 8011590:	bf00      	nop
 8011592:	3710      	adds	r7, #16
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}
 8011598:	20000028 	.word	0x20000028

0801159c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b084      	sub	sp, #16
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80115a4:	2300      	movs	r3, #0
 80115a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d101      	bne.n	80115b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80115ae:	2301      	movs	r3, #1
 80115b0:	e033      	b.n	801161a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d109      	bne.n	80115ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f7fd ffba 	bl	800f534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2200      	movs	r2, #0
 80115c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2200      	movs	r2, #0
 80115ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115d2:	f003 0310 	and.w	r3, r3, #16
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d118      	bne.n	801160c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80115e2:	f023 0302 	bic.w	r3, r3, #2
 80115e6:	f043 0202 	orr.w	r2, r3, #2
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f000 fa94 	bl	8011b1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	2200      	movs	r2, #0
 80115f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115fe:	f023 0303 	bic.w	r3, r3, #3
 8011602:	f043 0201 	orr.w	r2, r3, #1
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	641a      	str	r2, [r3, #64]	; 0x40
 801160a:	e001      	b.n	8011610 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801160c:	2301      	movs	r3, #1
 801160e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2200      	movs	r2, #0
 8011614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8011618:	7bfb      	ldrb	r3, [r7, #15]
}
 801161a:	4618      	mov	r0, r3
 801161c:	3710      	adds	r7, #16
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}
	...

08011624 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b086      	sub	sp, #24
 8011628:	af00      	add	r7, sp, #0
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8011630:	2300      	movs	r3, #0
 8011632:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801163a:	2b01      	cmp	r3, #1
 801163c:	d101      	bne.n	8011642 <HAL_ADC_Start_DMA+0x1e>
 801163e:	2302      	movs	r3, #2
 8011640:	e0cc      	b.n	80117dc <HAL_ADC_Start_DMA+0x1b8>
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	2201      	movs	r2, #1
 8011646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	689b      	ldr	r3, [r3, #8]
 8011650:	f003 0301 	and.w	r3, r3, #1
 8011654:	2b01      	cmp	r3, #1
 8011656:	d018      	beq.n	801168a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	689a      	ldr	r2, [r3, #8]
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	f042 0201 	orr.w	r2, r2, #1
 8011666:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8011668:	4b5e      	ldr	r3, [pc, #376]	; (80117e4 <HAL_ADC_Start_DMA+0x1c0>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	4a5e      	ldr	r2, [pc, #376]	; (80117e8 <HAL_ADC_Start_DMA+0x1c4>)
 801166e:	fba2 2303 	umull	r2, r3, r2, r3
 8011672:	0c9a      	lsrs	r2, r3, #18
 8011674:	4613      	mov	r3, r2
 8011676:	005b      	lsls	r3, r3, #1
 8011678:	4413      	add	r3, r2
 801167a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801167c:	e002      	b.n	8011684 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	3b01      	subs	r3, #1
 8011682:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d1f9      	bne.n	801167e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	689b      	ldr	r3, [r3, #8]
 8011690:	f003 0301 	and.w	r3, r3, #1
 8011694:	2b01      	cmp	r3, #1
 8011696:	f040 80a0 	bne.w	80117da <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801169e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80116a2:	f023 0301 	bic.w	r3, r3, #1
 80116a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d007      	beq.n	80116cc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80116c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80116d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80116d8:	d106      	bne.n	80116e8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116de:	f023 0206 	bic.w	r2, r3, #6
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	645a      	str	r2, [r3, #68]	; 0x44
 80116e6:	e002      	b.n	80116ee <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	2200      	movs	r2, #0
 80116ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2200      	movs	r2, #0
 80116f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80116f6:	4b3d      	ldr	r3, [pc, #244]	; (80117ec <HAL_ADC_Start_DMA+0x1c8>)
 80116f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116fe:	4a3c      	ldr	r2, [pc, #240]	; (80117f0 <HAL_ADC_Start_DMA+0x1cc>)
 8011700:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011706:	4a3b      	ldr	r2, [pc, #236]	; (80117f4 <HAL_ADC_Start_DMA+0x1d0>)
 8011708:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801170e:	4a3a      	ldr	r2, [pc, #232]	; (80117f8 <HAL_ADC_Start_DMA+0x1d4>)
 8011710:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801171a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	685a      	ldr	r2, [r3, #4]
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801172a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	689a      	ldr	r2, [r3, #8]
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801173a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	334c      	adds	r3, #76	; 0x4c
 8011746:	4619      	mov	r1, r3
 8011748:	68ba      	ldr	r2, [r7, #8]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	f000 fd24 	bl	8012198 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	685b      	ldr	r3, [r3, #4]
 8011754:	f003 031f 	and.w	r3, r3, #31
 8011758:	2b00      	cmp	r3, #0
 801175a:	d12a      	bne.n	80117b2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	4a26      	ldr	r2, [pc, #152]	; (80117fc <HAL_ADC_Start_DMA+0x1d8>)
 8011762:	4293      	cmp	r3, r2
 8011764:	d015      	beq.n	8011792 <HAL_ADC_Start_DMA+0x16e>
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	4a25      	ldr	r2, [pc, #148]	; (8011800 <HAL_ADC_Start_DMA+0x1dc>)
 801176c:	4293      	cmp	r3, r2
 801176e:	d105      	bne.n	801177c <HAL_ADC_Start_DMA+0x158>
 8011770:	4b1e      	ldr	r3, [pc, #120]	; (80117ec <HAL_ADC_Start_DMA+0x1c8>)
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	f003 031f 	and.w	r3, r3, #31
 8011778:	2b00      	cmp	r3, #0
 801177a:	d00a      	beq.n	8011792 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	4a20      	ldr	r2, [pc, #128]	; (8011804 <HAL_ADC_Start_DMA+0x1e0>)
 8011782:	4293      	cmp	r3, r2
 8011784:	d129      	bne.n	80117da <HAL_ADC_Start_DMA+0x1b6>
 8011786:	4b19      	ldr	r3, [pc, #100]	; (80117ec <HAL_ADC_Start_DMA+0x1c8>)
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	f003 031f 	and.w	r3, r3, #31
 801178e:	2b0f      	cmp	r3, #15
 8011790:	d823      	bhi.n	80117da <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	689b      	ldr	r3, [r3, #8]
 8011798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801179c:	2b00      	cmp	r3, #0
 801179e:	d11c      	bne.n	80117da <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	689a      	ldr	r2, [r3, #8]
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80117ae:	609a      	str	r2, [r3, #8]
 80117b0:	e013      	b.n	80117da <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	4a11      	ldr	r2, [pc, #68]	; (80117fc <HAL_ADC_Start_DMA+0x1d8>)
 80117b8:	4293      	cmp	r3, r2
 80117ba:	d10e      	bne.n	80117da <HAL_ADC_Start_DMA+0x1b6>
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	689b      	ldr	r3, [r3, #8]
 80117c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d107      	bne.n	80117da <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	689a      	ldr	r2, [r3, #8]
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80117d8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80117da:	2300      	movs	r3, #0
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3718      	adds	r7, #24
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	20000020 	.word	0x20000020
 80117e8:	431bde83 	.word	0x431bde83
 80117ec:	40012300 	.word	0x40012300
 80117f0:	08011d15 	.word	0x08011d15
 80117f4:	08011dcf 	.word	0x08011dcf
 80117f8:	08011deb 	.word	0x08011deb
 80117fc:	40012000 	.word	0x40012000
 8011800:	40012100 	.word	0x40012100
 8011804:	40012200 	.word	0x40012200

08011808 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b084      	sub	sp, #16
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011810:	2300      	movs	r3, #0
 8011812:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801181a:	2b01      	cmp	r3, #1
 801181c:	d101      	bne.n	8011822 <HAL_ADC_Stop_DMA+0x1a>
 801181e:	2302      	movs	r3, #2
 8011820:	e038      	b.n	8011894 <HAL_ADC_Stop_DMA+0x8c>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	2201      	movs	r2, #1
 8011826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	689a      	ldr	r2, [r3, #8]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	f022 0201 	bic.w	r2, r2, #1
 8011838:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	689b      	ldr	r3, [r3, #8]
 8011840:	f003 0301 	and.w	r3, r3, #1
 8011844:	2b00      	cmp	r3, #0
 8011846:	d120      	bne.n	801188a <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	689a      	ldr	r2, [r3, #8]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011856:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801185c:	4618      	mov	r0, r3
 801185e:	f000 fcf3 	bl	8012248 <HAL_DMA_Abort>
 8011862:	4603      	mov	r3, r0
 8011864:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	685a      	ldr	r2, [r3, #4]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8011874:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801187a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801187e:	f023 0301 	bic.w	r3, r3, #1
 8011882:	f043 0201 	orr.w	r2, r3, #1
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2200      	movs	r2, #0
 801188e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8011892:	7bfb      	ldrb	r3, [r7, #15]
}
 8011894:	4618      	mov	r0, r3
 8011896:	3710      	adds	r7, #16
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801189c:	b480      	push	{r7}
 801189e:	b083      	sub	sp, #12
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80118a4:	bf00      	nop
 80118a6:	370c      	adds	r7, #12
 80118a8:	46bd      	mov	sp, r7
 80118aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ae:	4770      	bx	lr

080118b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b083      	sub	sp, #12
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80118b8:	bf00      	nop
 80118ba:	370c      	adds	r7, #12
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr

080118c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80118c4:	b480      	push	{r7}
 80118c6:	b083      	sub	sp, #12
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80118cc:	bf00      	nop
 80118ce:	370c      	adds	r7, #12
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80118d8:	b480      	push	{r7}
 80118da:	b085      	sub	sp, #20
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80118e2:	2300      	movs	r3, #0
 80118e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80118ec:	2b01      	cmp	r3, #1
 80118ee:	d101      	bne.n	80118f4 <HAL_ADC_ConfigChannel+0x1c>
 80118f0:	2302      	movs	r3, #2
 80118f2:	e105      	b.n	8011b00 <HAL_ADC_ConfigChannel+0x228>
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2201      	movs	r2, #1
 80118f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	2b09      	cmp	r3, #9
 8011902:	d925      	bls.n	8011950 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	68d9      	ldr	r1, [r3, #12]
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	b29b      	uxth	r3, r3
 8011910:	461a      	mov	r2, r3
 8011912:	4613      	mov	r3, r2
 8011914:	005b      	lsls	r3, r3, #1
 8011916:	4413      	add	r3, r2
 8011918:	3b1e      	subs	r3, #30
 801191a:	2207      	movs	r2, #7
 801191c:	fa02 f303 	lsl.w	r3, r2, r3
 8011920:	43da      	mvns	r2, r3
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	400a      	ands	r2, r1
 8011928:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	68d9      	ldr	r1, [r3, #12]
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	689a      	ldr	r2, [r3, #8]
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	b29b      	uxth	r3, r3
 801193a:	4618      	mov	r0, r3
 801193c:	4603      	mov	r3, r0
 801193e:	005b      	lsls	r3, r3, #1
 8011940:	4403      	add	r3, r0
 8011942:	3b1e      	subs	r3, #30
 8011944:	409a      	lsls	r2, r3
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	430a      	orrs	r2, r1
 801194c:	60da      	str	r2, [r3, #12]
 801194e:	e022      	b.n	8011996 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	6919      	ldr	r1, [r3, #16]
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	b29b      	uxth	r3, r3
 801195c:	461a      	mov	r2, r3
 801195e:	4613      	mov	r3, r2
 8011960:	005b      	lsls	r3, r3, #1
 8011962:	4413      	add	r3, r2
 8011964:	2207      	movs	r2, #7
 8011966:	fa02 f303 	lsl.w	r3, r2, r3
 801196a:	43da      	mvns	r2, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	400a      	ands	r2, r1
 8011972:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	6919      	ldr	r1, [r3, #16]
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	689a      	ldr	r2, [r3, #8]
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	b29b      	uxth	r3, r3
 8011984:	4618      	mov	r0, r3
 8011986:	4603      	mov	r3, r0
 8011988:	005b      	lsls	r3, r3, #1
 801198a:	4403      	add	r3, r0
 801198c:	409a      	lsls	r2, r3
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	430a      	orrs	r2, r1
 8011994:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	685b      	ldr	r3, [r3, #4]
 801199a:	2b06      	cmp	r3, #6
 801199c:	d824      	bhi.n	80119e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	685a      	ldr	r2, [r3, #4]
 80119a8:	4613      	mov	r3, r2
 80119aa:	009b      	lsls	r3, r3, #2
 80119ac:	4413      	add	r3, r2
 80119ae:	3b05      	subs	r3, #5
 80119b0:	221f      	movs	r2, #31
 80119b2:	fa02 f303 	lsl.w	r3, r2, r3
 80119b6:	43da      	mvns	r2, r3
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	400a      	ands	r2, r1
 80119be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	4618      	mov	r0, r3
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	685a      	ldr	r2, [r3, #4]
 80119d2:	4613      	mov	r3, r2
 80119d4:	009b      	lsls	r3, r3, #2
 80119d6:	4413      	add	r3, r2
 80119d8:	3b05      	subs	r3, #5
 80119da:	fa00 f203 	lsl.w	r2, r0, r3
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	430a      	orrs	r2, r1
 80119e4:	635a      	str	r2, [r3, #52]	; 0x34
 80119e6:	e04c      	b.n	8011a82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	685b      	ldr	r3, [r3, #4]
 80119ec:	2b0c      	cmp	r3, #12
 80119ee:	d824      	bhi.n	8011a3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	685a      	ldr	r2, [r3, #4]
 80119fa:	4613      	mov	r3, r2
 80119fc:	009b      	lsls	r3, r3, #2
 80119fe:	4413      	add	r3, r2
 8011a00:	3b23      	subs	r3, #35	; 0x23
 8011a02:	221f      	movs	r2, #31
 8011a04:	fa02 f303 	lsl.w	r3, r2, r3
 8011a08:	43da      	mvns	r2, r3
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	400a      	ands	r2, r1
 8011a10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	4618      	mov	r0, r3
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	685a      	ldr	r2, [r3, #4]
 8011a24:	4613      	mov	r3, r2
 8011a26:	009b      	lsls	r3, r3, #2
 8011a28:	4413      	add	r3, r2
 8011a2a:	3b23      	subs	r3, #35	; 0x23
 8011a2c:	fa00 f203 	lsl.w	r2, r0, r3
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	430a      	orrs	r2, r1
 8011a36:	631a      	str	r2, [r3, #48]	; 0x30
 8011a38:	e023      	b.n	8011a82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	685a      	ldr	r2, [r3, #4]
 8011a44:	4613      	mov	r3, r2
 8011a46:	009b      	lsls	r3, r3, #2
 8011a48:	4413      	add	r3, r2
 8011a4a:	3b41      	subs	r3, #65	; 0x41
 8011a4c:	221f      	movs	r2, #31
 8011a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8011a52:	43da      	mvns	r2, r3
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	400a      	ands	r2, r1
 8011a5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	4618      	mov	r0, r3
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	685a      	ldr	r2, [r3, #4]
 8011a6e:	4613      	mov	r3, r2
 8011a70:	009b      	lsls	r3, r3, #2
 8011a72:	4413      	add	r3, r2
 8011a74:	3b41      	subs	r3, #65	; 0x41
 8011a76:	fa00 f203 	lsl.w	r2, r0, r3
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	430a      	orrs	r2, r1
 8011a80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011a82:	4b22      	ldr	r3, [pc, #136]	; (8011b0c <HAL_ADC_ConfigChannel+0x234>)
 8011a84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	4a21      	ldr	r2, [pc, #132]	; (8011b10 <HAL_ADC_ConfigChannel+0x238>)
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	d109      	bne.n	8011aa4 <HAL_ADC_ConfigChannel+0x1cc>
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	2b12      	cmp	r3, #18
 8011a96:	d105      	bne.n	8011aa4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	685b      	ldr	r3, [r3, #4]
 8011a9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	4a19      	ldr	r2, [pc, #100]	; (8011b10 <HAL_ADC_ConfigChannel+0x238>)
 8011aaa:	4293      	cmp	r3, r2
 8011aac:	d123      	bne.n	8011af6 <HAL_ADC_ConfigChannel+0x21e>
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	2b10      	cmp	r3, #16
 8011ab4:	d003      	beq.n	8011abe <HAL_ADC_ConfigChannel+0x1e6>
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	2b11      	cmp	r3, #17
 8011abc:	d11b      	bne.n	8011af6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	685b      	ldr	r3, [r3, #4]
 8011ac2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	2b10      	cmp	r3, #16
 8011ad0:	d111      	bne.n	8011af6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8011ad2:	4b10      	ldr	r3, [pc, #64]	; (8011b14 <HAL_ADC_ConfigChannel+0x23c>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	4a10      	ldr	r2, [pc, #64]	; (8011b18 <HAL_ADC_ConfigChannel+0x240>)
 8011ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8011adc:	0c9a      	lsrs	r2, r3, #18
 8011ade:	4613      	mov	r3, r2
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	4413      	add	r3, r2
 8011ae4:	005b      	lsls	r3, r3, #1
 8011ae6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8011ae8:	e002      	b.n	8011af0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	3b01      	subs	r3, #1
 8011aee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d1f9      	bne.n	8011aea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2200      	movs	r2, #0
 8011afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8011afe:	2300      	movs	r3, #0
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	3714      	adds	r7, #20
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr
 8011b0c:	40012300 	.word	0x40012300
 8011b10:	40012000 	.word	0x40012000
 8011b14:	20000020 	.word	0x20000020
 8011b18:	431bde83 	.word	0x431bde83

08011b1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b085      	sub	sp, #20
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011b24:	4b79      	ldr	r3, [pc, #484]	; (8011d0c <ADC_Init+0x1f0>)
 8011b26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	685a      	ldr	r2, [r3, #4]
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	431a      	orrs	r2, r3
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	685a      	ldr	r2, [r3, #4]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011b50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	6859      	ldr	r1, [r3, #4]
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	691b      	ldr	r3, [r3, #16]
 8011b5c:	021a      	lsls	r2, r3, #8
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	430a      	orrs	r2, r1
 8011b64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	685a      	ldr	r2, [r3, #4]
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8011b74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	6859      	ldr	r1, [r3, #4]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	689a      	ldr	r2, [r3, #8]
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	430a      	orrs	r2, r1
 8011b86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	689a      	ldr	r2, [r3, #8]
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011b96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	6899      	ldr	r1, [r3, #8]
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	68da      	ldr	r2, [r3, #12]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	430a      	orrs	r2, r1
 8011ba8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bae:	4a58      	ldr	r2, [pc, #352]	; (8011d10 <ADC_Init+0x1f4>)
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	d022      	beq.n	8011bfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	689a      	ldr	r2, [r3, #8]
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011bc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	6899      	ldr	r1, [r3, #8]
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	430a      	orrs	r2, r1
 8011bd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	689a      	ldr	r2, [r3, #8]
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011be4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	6899      	ldr	r1, [r3, #8]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	430a      	orrs	r2, r1
 8011bf6:	609a      	str	r2, [r3, #8]
 8011bf8:	e00f      	b.n	8011c1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	689a      	ldr	r2, [r3, #8]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011c08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	689a      	ldr	r2, [r3, #8]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011c18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	689a      	ldr	r2, [r3, #8]
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	f022 0202 	bic.w	r2, r2, #2
 8011c28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	6899      	ldr	r1, [r3, #8]
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	7e1b      	ldrb	r3, [r3, #24]
 8011c34:	005a      	lsls	r2, r3, #1
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	430a      	orrs	r2, r1
 8011c3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d01b      	beq.n	8011c80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	685a      	ldr	r2, [r3, #4]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011c56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	685a      	ldr	r2, [r3, #4]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8011c66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	6859      	ldr	r1, [r3, #4]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c72:	3b01      	subs	r3, #1
 8011c74:	035a      	lsls	r2, r3, #13
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	430a      	orrs	r2, r1
 8011c7c:	605a      	str	r2, [r3, #4]
 8011c7e:	e007      	b.n	8011c90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	685a      	ldr	r2, [r3, #4]
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011c8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8011c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	69db      	ldr	r3, [r3, #28]
 8011caa:	3b01      	subs	r3, #1
 8011cac:	051a      	lsls	r2, r3, #20
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	430a      	orrs	r2, r1
 8011cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	689a      	ldr	r2, [r3, #8]
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8011cc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	6899      	ldr	r1, [r3, #8]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011cd2:	025a      	lsls	r2, r3, #9
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	430a      	orrs	r2, r1
 8011cda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	689a      	ldr	r2, [r3, #8]
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011cea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	6899      	ldr	r1, [r3, #8]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	695b      	ldr	r3, [r3, #20]
 8011cf6:	029a      	lsls	r2, r3, #10
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	430a      	orrs	r2, r1
 8011cfe:	609a      	str	r2, [r3, #8]
}
 8011d00:	bf00      	nop
 8011d02:	3714      	adds	r7, #20
 8011d04:	46bd      	mov	sp, r7
 8011d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0a:	4770      	bx	lr
 8011d0c:	40012300 	.word	0x40012300
 8011d10:	0f000001 	.word	0x0f000001

08011d14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b084      	sub	sp, #16
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d20:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d13c      	bne.n	8011da8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	689b      	ldr	r3, [r3, #8]
 8011d40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d12b      	bne.n	8011da0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d127      	bne.n	8011da0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d006      	beq.n	8011d6c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	689b      	ldr	r3, [r3, #8]
 8011d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d119      	bne.n	8011da0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	685a      	ldr	r2, [r3, #4]
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	f022 0220 	bic.w	r2, r2, #32
 8011d7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d105      	bne.n	8011da0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d98:	f043 0201 	orr.w	r2, r3, #1
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8011da0:	68f8      	ldr	r0, [r7, #12]
 8011da2:	f7ff fd7b 	bl	801189c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8011da6:	e00e      	b.n	8011dc6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dac:	f003 0310 	and.w	r3, r3, #16
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d003      	beq.n	8011dbc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8011db4:	68f8      	ldr	r0, [r7, #12]
 8011db6:	f7ff fd85 	bl	80118c4 <HAL_ADC_ErrorCallback>
}
 8011dba:	e004      	b.n	8011dc6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	4798      	blx	r3
}
 8011dc6:	bf00      	nop
 8011dc8:	3710      	adds	r7, #16
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}

08011dce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8011dce:	b580      	push	{r7, lr}
 8011dd0:	b084      	sub	sp, #16
 8011dd2:	af00      	add	r7, sp, #0
 8011dd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dda:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8011ddc:	68f8      	ldr	r0, [r7, #12]
 8011dde:	f7ff fd67 	bl	80118b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8011de2:	bf00      	nop
 8011de4:	3710      	adds	r7, #16
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}

08011dea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8011dea:	b580      	push	{r7, lr}
 8011dec:	b084      	sub	sp, #16
 8011dee:	af00      	add	r7, sp, #0
 8011df0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011df6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	2240      	movs	r2, #64	; 0x40
 8011dfc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e02:	f043 0204 	orr.w	r2, r3, #4
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8011e0a:	68f8      	ldr	r0, [r7, #12]
 8011e0c:	f7ff fd5a 	bl	80118c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8011e10:	bf00      	nop
 8011e12:	3710      	adds	r7, #16
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}

08011e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011e18:	b480      	push	{r7}
 8011e1a:	b085      	sub	sp, #20
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f003 0307 	and.w	r3, r3, #7
 8011e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011e28:	4b0c      	ldr	r3, [pc, #48]	; (8011e5c <__NVIC_SetPriorityGrouping+0x44>)
 8011e2a:	68db      	ldr	r3, [r3, #12]
 8011e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011e2e:	68ba      	ldr	r2, [r7, #8]
 8011e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011e34:	4013      	ands	r3, r2
 8011e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011e4a:	4a04      	ldr	r2, [pc, #16]	; (8011e5c <__NVIC_SetPriorityGrouping+0x44>)
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	60d3      	str	r3, [r2, #12]
}
 8011e50:	bf00      	nop
 8011e52:	3714      	adds	r7, #20
 8011e54:	46bd      	mov	sp, r7
 8011e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5a:	4770      	bx	lr
 8011e5c:	e000ed00 	.word	0xe000ed00

08011e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011e60:	b480      	push	{r7}
 8011e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011e64:	4b04      	ldr	r3, [pc, #16]	; (8011e78 <__NVIC_GetPriorityGrouping+0x18>)
 8011e66:	68db      	ldr	r3, [r3, #12]
 8011e68:	0a1b      	lsrs	r3, r3, #8
 8011e6a:	f003 0307 	and.w	r3, r3, #7
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr
 8011e78:	e000ed00 	.word	0xe000ed00

08011e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011e7c:	b480      	push	{r7}
 8011e7e:	b083      	sub	sp, #12
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	4603      	mov	r3, r0
 8011e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	db0b      	blt.n	8011ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011e8e:	79fb      	ldrb	r3, [r7, #7]
 8011e90:	f003 021f 	and.w	r2, r3, #31
 8011e94:	4907      	ldr	r1, [pc, #28]	; (8011eb4 <__NVIC_EnableIRQ+0x38>)
 8011e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e9a:	095b      	lsrs	r3, r3, #5
 8011e9c:	2001      	movs	r0, #1
 8011e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8011ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8011ea6:	bf00      	nop
 8011ea8:	370c      	adds	r7, #12
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb0:	4770      	bx	lr
 8011eb2:	bf00      	nop
 8011eb4:	e000e100 	.word	0xe000e100

08011eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b083      	sub	sp, #12
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	6039      	str	r1, [r7, #0]
 8011ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	db0a      	blt.n	8011ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	b2da      	uxtb	r2, r3
 8011ed0:	490c      	ldr	r1, [pc, #48]	; (8011f04 <__NVIC_SetPriority+0x4c>)
 8011ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ed6:	0112      	lsls	r2, r2, #4
 8011ed8:	b2d2      	uxtb	r2, r2
 8011eda:	440b      	add	r3, r1
 8011edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011ee0:	e00a      	b.n	8011ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	b2da      	uxtb	r2, r3
 8011ee6:	4908      	ldr	r1, [pc, #32]	; (8011f08 <__NVIC_SetPriority+0x50>)
 8011ee8:	79fb      	ldrb	r3, [r7, #7]
 8011eea:	f003 030f 	and.w	r3, r3, #15
 8011eee:	3b04      	subs	r3, #4
 8011ef0:	0112      	lsls	r2, r2, #4
 8011ef2:	b2d2      	uxtb	r2, r2
 8011ef4:	440b      	add	r3, r1
 8011ef6:	761a      	strb	r2, [r3, #24]
}
 8011ef8:	bf00      	nop
 8011efa:	370c      	adds	r7, #12
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr
 8011f04:	e000e100 	.word	0xe000e100
 8011f08:	e000ed00 	.word	0xe000ed00

08011f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	b089      	sub	sp, #36	; 0x24
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	60f8      	str	r0, [r7, #12]
 8011f14:	60b9      	str	r1, [r7, #8]
 8011f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	f003 0307 	and.w	r3, r3, #7
 8011f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011f20:	69fb      	ldr	r3, [r7, #28]
 8011f22:	f1c3 0307 	rsb	r3, r3, #7
 8011f26:	2b04      	cmp	r3, #4
 8011f28:	bf28      	it	cs
 8011f2a:	2304      	movcs	r3, #4
 8011f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011f2e:	69fb      	ldr	r3, [r7, #28]
 8011f30:	3304      	adds	r3, #4
 8011f32:	2b06      	cmp	r3, #6
 8011f34:	d902      	bls.n	8011f3c <NVIC_EncodePriority+0x30>
 8011f36:	69fb      	ldr	r3, [r7, #28]
 8011f38:	3b03      	subs	r3, #3
 8011f3a:	e000      	b.n	8011f3e <NVIC_EncodePriority+0x32>
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011f40:	f04f 32ff 	mov.w	r2, #4294967295
 8011f44:	69bb      	ldr	r3, [r7, #24]
 8011f46:	fa02 f303 	lsl.w	r3, r2, r3
 8011f4a:	43da      	mvns	r2, r3
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	401a      	ands	r2, r3
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011f54:	f04f 31ff 	mov.w	r1, #4294967295
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8011f5e:	43d9      	mvns	r1, r3
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011f64:	4313      	orrs	r3, r2
         );
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3724      	adds	r7, #36	; 0x24
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f70:	4770      	bx	lr
	...

08011f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	3b01      	subs	r3, #1
 8011f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011f84:	d301      	bcc.n	8011f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011f86:	2301      	movs	r3, #1
 8011f88:	e00f      	b.n	8011faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011f8a:	4a0a      	ldr	r2, [pc, #40]	; (8011fb4 <SysTick_Config+0x40>)
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	3b01      	subs	r3, #1
 8011f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011f92:	210f      	movs	r1, #15
 8011f94:	f04f 30ff 	mov.w	r0, #4294967295
 8011f98:	f7ff ff8e 	bl	8011eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011f9c:	4b05      	ldr	r3, [pc, #20]	; (8011fb4 <SysTick_Config+0x40>)
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011fa2:	4b04      	ldr	r3, [pc, #16]	; (8011fb4 <SysTick_Config+0x40>)
 8011fa4:	2207      	movs	r2, #7
 8011fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011fa8:	2300      	movs	r3, #0
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3708      	adds	r7, #8
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	e000e010 	.word	0xe000e010

08011fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b082      	sub	sp, #8
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f7ff ff29 	bl	8011e18 <__NVIC_SetPriorityGrouping>
}
 8011fc6:	bf00      	nop
 8011fc8:	3708      	adds	r7, #8
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}

08011fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011fce:	b580      	push	{r7, lr}
 8011fd0:	b086      	sub	sp, #24
 8011fd2:	af00      	add	r7, sp, #0
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	60b9      	str	r1, [r7, #8]
 8011fd8:	607a      	str	r2, [r7, #4]
 8011fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011fe0:	f7ff ff3e 	bl	8011e60 <__NVIC_GetPriorityGrouping>
 8011fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	68b9      	ldr	r1, [r7, #8]
 8011fea:	6978      	ldr	r0, [r7, #20]
 8011fec:	f7ff ff8e 	bl	8011f0c <NVIC_EncodePriority>
 8011ff0:	4602      	mov	r2, r0
 8011ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ff6:	4611      	mov	r1, r2
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7ff ff5d 	bl	8011eb8 <__NVIC_SetPriority>
}
 8011ffe:	bf00      	nop
 8012000:	3718      	adds	r7, #24
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}

08012006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012006:	b580      	push	{r7, lr}
 8012008:	b082      	sub	sp, #8
 801200a:	af00      	add	r7, sp, #0
 801200c:	4603      	mov	r3, r0
 801200e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012014:	4618      	mov	r0, r3
 8012016:	f7ff ff31 	bl	8011e7c <__NVIC_EnableIRQ>
}
 801201a:	bf00      	nop
 801201c:	3708      	adds	r7, #8
 801201e:	46bd      	mov	sp, r7
 8012020:	bd80      	pop	{r7, pc}

08012022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012022:	b580      	push	{r7, lr}
 8012024:	b082      	sub	sp, #8
 8012026:	af00      	add	r7, sp, #0
 8012028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801202a:	6878      	ldr	r0, [r7, #4]
 801202c:	f7ff ffa2 	bl	8011f74 <SysTick_Config>
 8012030:	4603      	mov	r3, r0
}
 8012032:	4618      	mov	r0, r3
 8012034:	3708      	adds	r7, #8
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
	...

0801203c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b086      	sub	sp, #24
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8012044:	2300      	movs	r3, #0
 8012046:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8012048:	f7ff fa7a 	bl	8011540 <HAL_GetTick>
 801204c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d101      	bne.n	8012058 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8012054:	2301      	movs	r3, #1
 8012056:	e099      	b.n	801218c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2200      	movs	r2, #0
 801205c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2202      	movs	r2, #2
 8012064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	681a      	ldr	r2, [r3, #0]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	f022 0201 	bic.w	r2, r2, #1
 8012076:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012078:	e00f      	b.n	801209a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801207a:	f7ff fa61 	bl	8011540 <HAL_GetTick>
 801207e:	4602      	mov	r2, r0
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	1ad3      	subs	r3, r2, r3
 8012084:	2b05      	cmp	r3, #5
 8012086:	d908      	bls.n	801209a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2220      	movs	r2, #32
 801208c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2203      	movs	r2, #3
 8012092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8012096:	2303      	movs	r3, #3
 8012098:	e078      	b.n	801218c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	f003 0301 	and.w	r3, r3, #1
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d1e8      	bne.n	801207a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80120b0:	697a      	ldr	r2, [r7, #20]
 80120b2:	4b38      	ldr	r3, [pc, #224]	; (8012194 <HAL_DMA_Init+0x158>)
 80120b4:	4013      	ands	r3, r2
 80120b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	685a      	ldr	r2, [r3, #4]
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	689b      	ldr	r3, [r3, #8]
 80120c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80120c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	691b      	ldr	r3, [r3, #16]
 80120cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80120d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	699b      	ldr	r3, [r3, #24]
 80120d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80120de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6a1b      	ldr	r3, [r3, #32]
 80120e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80120e6:	697a      	ldr	r2, [r7, #20]
 80120e8:	4313      	orrs	r3, r2
 80120ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120f0:	2b04      	cmp	r3, #4
 80120f2:	d107      	bne.n	8012104 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120fc:	4313      	orrs	r3, r2
 80120fe:	697a      	ldr	r2, [r7, #20]
 8012100:	4313      	orrs	r3, r2
 8012102:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	697a      	ldr	r2, [r7, #20]
 801210a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	695b      	ldr	r3, [r3, #20]
 8012112:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	f023 0307 	bic.w	r3, r3, #7
 801211a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012120:	697a      	ldr	r2, [r7, #20]
 8012122:	4313      	orrs	r3, r2
 8012124:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801212a:	2b04      	cmp	r3, #4
 801212c:	d117      	bne.n	801215e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012132:	697a      	ldr	r2, [r7, #20]
 8012134:	4313      	orrs	r3, r2
 8012136:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801213c:	2b00      	cmp	r3, #0
 801213e:	d00e      	beq.n	801215e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f000 fadf 	bl	8012704 <DMA_CheckFifoParam>
 8012146:	4603      	mov	r3, r0
 8012148:	2b00      	cmp	r3, #0
 801214a:	d008      	beq.n	801215e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2240      	movs	r2, #64	; 0x40
 8012150:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2201      	movs	r2, #1
 8012156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801215a:	2301      	movs	r3, #1
 801215c:	e016      	b.n	801218c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	697a      	ldr	r2, [r7, #20]
 8012164:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f000 fa96 	bl	8012698 <DMA_CalcBaseAndBitshift>
 801216c:	4603      	mov	r3, r0
 801216e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012174:	223f      	movs	r2, #63	; 0x3f
 8012176:	409a      	lsls	r2, r3
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2200      	movs	r2, #0
 8012180:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2201      	movs	r2, #1
 8012186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801218a:	2300      	movs	r3, #0
}
 801218c:	4618      	mov	r0, r3
 801218e:	3718      	adds	r7, #24
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}
 8012194:	f010803f 	.word	0xf010803f

08012198 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b086      	sub	sp, #24
 801219c:	af00      	add	r7, sp, #0
 801219e:	60f8      	str	r0, [r7, #12]
 80121a0:	60b9      	str	r1, [r7, #8]
 80121a2:	607a      	str	r2, [r7, #4]
 80121a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80121a6:	2300      	movs	r3, #0
 80121a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80121b6:	2b01      	cmp	r3, #1
 80121b8:	d101      	bne.n	80121be <HAL_DMA_Start_IT+0x26>
 80121ba:	2302      	movs	r3, #2
 80121bc:	e040      	b.n	8012240 <HAL_DMA_Start_IT+0xa8>
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2201      	movs	r2, #1
 80121c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80121cc:	b2db      	uxtb	r3, r3
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d12f      	bne.n	8012232 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	2202      	movs	r2, #2
 80121d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2200      	movs	r2, #0
 80121de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	687a      	ldr	r2, [r7, #4]
 80121e4:	68b9      	ldr	r1, [r7, #8]
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	f000 fa28 	bl	801263c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121f0:	223f      	movs	r2, #63	; 0x3f
 80121f2:	409a      	lsls	r2, r3
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	681a      	ldr	r2, [r3, #0]
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	f042 0216 	orr.w	r2, r2, #22
 8012206:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801220c:	2b00      	cmp	r3, #0
 801220e:	d007      	beq.n	8012220 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	681a      	ldr	r2, [r3, #0]
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	f042 0208 	orr.w	r2, r2, #8
 801221e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	681a      	ldr	r2, [r3, #0]
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	f042 0201 	orr.w	r2, r2, #1
 801222e:	601a      	str	r2, [r3, #0]
 8012230:	e005      	b.n	801223e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	2200      	movs	r2, #0
 8012236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801223a:	2302      	movs	r3, #2
 801223c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801223e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012240:	4618      	mov	r0, r3
 8012242:	3718      	adds	r7, #24
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012254:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8012256:	f7ff f973 	bl	8011540 <HAL_GetTick>
 801225a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012262:	b2db      	uxtb	r3, r3
 8012264:	2b02      	cmp	r3, #2
 8012266:	d008      	beq.n	801227a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2280      	movs	r2, #128	; 0x80
 801226c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	2200      	movs	r2, #0
 8012272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8012276:	2301      	movs	r3, #1
 8012278:	e052      	b.n	8012320 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	681a      	ldr	r2, [r3, #0]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	f022 0216 	bic.w	r2, r2, #22
 8012288:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	695a      	ldr	r2, [r3, #20]
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012298:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d103      	bne.n	80122aa <HAL_DMA_Abort+0x62>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d007      	beq.n	80122ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	681a      	ldr	r2, [r3, #0]
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	f022 0208 	bic.w	r2, r2, #8
 80122b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	681a      	ldr	r2, [r3, #0]
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	f022 0201 	bic.w	r2, r2, #1
 80122c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80122ca:	e013      	b.n	80122f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80122cc:	f7ff f938 	bl	8011540 <HAL_GetTick>
 80122d0:	4602      	mov	r2, r0
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	1ad3      	subs	r3, r2, r3
 80122d6:	2b05      	cmp	r3, #5
 80122d8:	d90c      	bls.n	80122f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2220      	movs	r2, #32
 80122de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2200      	movs	r2, #0
 80122e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2203      	movs	r2, #3
 80122ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80122f0:	2303      	movs	r3, #3
 80122f2:	e015      	b.n	8012320 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	f003 0301 	and.w	r3, r3, #1
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d1e4      	bne.n	80122cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012306:	223f      	movs	r2, #63	; 0x3f
 8012308:	409a      	lsls	r2, r3
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2200      	movs	r2, #0
 8012312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2201      	movs	r2, #1
 801231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 801231e:	2300      	movs	r3, #0
}
 8012320:	4618      	mov	r0, r3
 8012322:	3710      	adds	r7, #16
 8012324:	46bd      	mov	sp, r7
 8012326:	bd80      	pop	{r7, pc}

08012328 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b086      	sub	sp, #24
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8012330:	2300      	movs	r3, #0
 8012332:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8012334:	4b92      	ldr	r3, [pc, #584]	; (8012580 <HAL_DMA_IRQHandler+0x258>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	4a92      	ldr	r2, [pc, #584]	; (8012584 <HAL_DMA_IRQHandler+0x25c>)
 801233a:	fba2 2303 	umull	r2, r3, r2, r3
 801233e:	0a9b      	lsrs	r3, r3, #10
 8012340:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012346:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8012348:	693b      	ldr	r3, [r7, #16]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012352:	2208      	movs	r2, #8
 8012354:	409a      	lsls	r2, r3
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	4013      	ands	r3, r2
 801235a:	2b00      	cmp	r3, #0
 801235c:	d01a      	beq.n	8012394 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	f003 0304 	and.w	r3, r3, #4
 8012368:	2b00      	cmp	r3, #0
 801236a:	d013      	beq.n	8012394 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	f022 0204 	bic.w	r2, r2, #4
 801237a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012380:	2208      	movs	r2, #8
 8012382:	409a      	lsls	r2, r3
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801238c:	f043 0201 	orr.w	r2, r3, #1
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012398:	2201      	movs	r2, #1
 801239a:	409a      	lsls	r2, r3
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	4013      	ands	r3, r2
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d012      	beq.n	80123ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	695b      	ldr	r3, [r3, #20]
 80123aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d00b      	beq.n	80123ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80123b6:	2201      	movs	r2, #1
 80123b8:	409a      	lsls	r2, r3
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123c2:	f043 0202 	orr.w	r2, r3, #2
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80123ce:	2204      	movs	r2, #4
 80123d0:	409a      	lsls	r2, r3
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	4013      	ands	r3, r2
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d012      	beq.n	8012400 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	f003 0302 	and.w	r3, r3, #2
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d00b      	beq.n	8012400 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80123ec:	2204      	movs	r2, #4
 80123ee:	409a      	lsls	r2, r3
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123f8:	f043 0204 	orr.w	r2, r3, #4
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012404:	2210      	movs	r2, #16
 8012406:	409a      	lsls	r2, r3
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	4013      	ands	r3, r2
 801240c:	2b00      	cmp	r3, #0
 801240e:	d043      	beq.n	8012498 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	f003 0308 	and.w	r3, r3, #8
 801241a:	2b00      	cmp	r3, #0
 801241c:	d03c      	beq.n	8012498 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012422:	2210      	movs	r2, #16
 8012424:	409a      	lsls	r2, r3
 8012426:	693b      	ldr	r3, [r7, #16]
 8012428:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012434:	2b00      	cmp	r3, #0
 8012436:	d018      	beq.n	801246a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012442:	2b00      	cmp	r3, #0
 8012444:	d108      	bne.n	8012458 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801244a:	2b00      	cmp	r3, #0
 801244c:	d024      	beq.n	8012498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	4798      	blx	r3
 8012456:	e01f      	b.n	8012498 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801245c:	2b00      	cmp	r3, #0
 801245e:	d01b      	beq.n	8012498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	4798      	blx	r3
 8012468:	e016      	b.n	8012498 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012474:	2b00      	cmp	r3, #0
 8012476:	d107      	bne.n	8012488 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	f022 0208 	bic.w	r2, r2, #8
 8012486:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801248c:	2b00      	cmp	r3, #0
 801248e:	d003      	beq.n	8012498 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801249c:	2220      	movs	r2, #32
 801249e:	409a      	lsls	r2, r3
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	4013      	ands	r3, r2
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	f000 808e 	beq.w	80125c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	f003 0310 	and.w	r3, r3, #16
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	f000 8086 	beq.w	80125c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80124be:	2220      	movs	r2, #32
 80124c0:	409a      	lsls	r2, r3
 80124c2:	693b      	ldr	r3, [r7, #16]
 80124c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80124cc:	b2db      	uxtb	r3, r3
 80124ce:	2b05      	cmp	r3, #5
 80124d0:	d136      	bne.n	8012540 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	681a      	ldr	r2, [r3, #0]
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	f022 0216 	bic.w	r2, r2, #22
 80124e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	695a      	ldr	r2, [r3, #20]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80124f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d103      	bne.n	8012502 <HAL_DMA_IRQHandler+0x1da>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d007      	beq.n	8012512 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	681a      	ldr	r2, [r3, #0]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f022 0208 	bic.w	r2, r2, #8
 8012510:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012516:	223f      	movs	r2, #63	; 0x3f
 8012518:	409a      	lsls	r2, r3
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2200      	movs	r2, #0
 8012522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2201      	movs	r2, #1
 801252a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012532:	2b00      	cmp	r3, #0
 8012534:	d07d      	beq.n	8012632 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	4798      	blx	r3
        }
        return;
 801253e:	e078      	b.n	8012632 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801254a:	2b00      	cmp	r3, #0
 801254c:	d01c      	beq.n	8012588 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012558:	2b00      	cmp	r3, #0
 801255a:	d108      	bne.n	801256e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012560:	2b00      	cmp	r3, #0
 8012562:	d030      	beq.n	80125c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	4798      	blx	r3
 801256c:	e02b      	b.n	80125c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012572:	2b00      	cmp	r3, #0
 8012574:	d027      	beq.n	80125c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	4798      	blx	r3
 801257e:	e022      	b.n	80125c6 <HAL_DMA_IRQHandler+0x29e>
 8012580:	20000020 	.word	0x20000020
 8012584:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012592:	2b00      	cmp	r3, #0
 8012594:	d10f      	bne.n	80125b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	681a      	ldr	r2, [r3, #0]
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	f022 0210 	bic.w	r2, r2, #16
 80125a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2200      	movs	r2, #0
 80125aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2201      	movs	r2, #1
 80125b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d003      	beq.n	80125c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d032      	beq.n	8012634 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125d2:	f003 0301 	and.w	r3, r3, #1
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d022      	beq.n	8012620 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2205      	movs	r2, #5
 80125de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	681a      	ldr	r2, [r3, #0]
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	f022 0201 	bic.w	r2, r2, #1
 80125f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	3301      	adds	r3, #1
 80125f6:	60bb      	str	r3, [r7, #8]
 80125f8:	697a      	ldr	r2, [r7, #20]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d307      	bcc.n	801260e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	f003 0301 	and.w	r3, r3, #1
 8012608:	2b00      	cmp	r3, #0
 801260a:	d1f2      	bne.n	80125f2 <HAL_DMA_IRQHandler+0x2ca>
 801260c:	e000      	b.n	8012610 <HAL_DMA_IRQHandler+0x2e8>
          break;
 801260e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2200      	movs	r2, #0
 8012614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2201      	movs	r2, #1
 801261c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012624:	2b00      	cmp	r3, #0
 8012626:	d005      	beq.n	8012634 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801262c:	6878      	ldr	r0, [r7, #4]
 801262e:	4798      	blx	r3
 8012630:	e000      	b.n	8012634 <HAL_DMA_IRQHandler+0x30c>
        return;
 8012632:	bf00      	nop
    }
  }
}
 8012634:	3718      	adds	r7, #24
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}
 801263a:	bf00      	nop

0801263c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801263c:	b480      	push	{r7}
 801263e:	b085      	sub	sp, #20
 8012640:	af00      	add	r7, sp, #0
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	60b9      	str	r1, [r7, #8]
 8012646:	607a      	str	r2, [r7, #4]
 8012648:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	681a      	ldr	r2, [r3, #0]
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012658:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	683a      	ldr	r2, [r7, #0]
 8012660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	689b      	ldr	r3, [r3, #8]
 8012666:	2b40      	cmp	r3, #64	; 0x40
 8012668:	d108      	bne.n	801267c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	687a      	ldr	r2, [r7, #4]
 8012670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	68ba      	ldr	r2, [r7, #8]
 8012678:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801267a:	e007      	b.n	801268c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	68ba      	ldr	r2, [r7, #8]
 8012682:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	687a      	ldr	r2, [r7, #4]
 801268a:	60da      	str	r2, [r3, #12]
}
 801268c:	bf00      	nop
 801268e:	3714      	adds	r7, #20
 8012690:	46bd      	mov	sp, r7
 8012692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012696:	4770      	bx	lr

08012698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8012698:	b480      	push	{r7}
 801269a:	b085      	sub	sp, #20
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	b2db      	uxtb	r3, r3
 80126a6:	3b10      	subs	r3, #16
 80126a8:	4a14      	ldr	r2, [pc, #80]	; (80126fc <DMA_CalcBaseAndBitshift+0x64>)
 80126aa:	fba2 2303 	umull	r2, r3, r2, r3
 80126ae:	091b      	lsrs	r3, r3, #4
 80126b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80126b2:	4a13      	ldr	r2, [pc, #76]	; (8012700 <DMA_CalcBaseAndBitshift+0x68>)
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	4413      	add	r3, r2
 80126b8:	781b      	ldrb	r3, [r3, #0]
 80126ba:	461a      	mov	r2, r3
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	2b03      	cmp	r3, #3
 80126c4:	d909      	bls.n	80126da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80126ce:	f023 0303 	bic.w	r3, r3, #3
 80126d2:	1d1a      	adds	r2, r3, #4
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	659a      	str	r2, [r3, #88]	; 0x58
 80126d8:	e007      	b.n	80126ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80126e2:	f023 0303 	bic.w	r3, r3, #3
 80126e6:	687a      	ldr	r2, [r7, #4]
 80126e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3714      	adds	r7, #20
 80126f2:	46bd      	mov	sp, r7
 80126f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f8:	4770      	bx	lr
 80126fa:	bf00      	nop
 80126fc:	aaaaaaab 	.word	0xaaaaaaab
 8012700:	0801b888 	.word	0x0801b888

08012704 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8012704:	b480      	push	{r7}
 8012706:	b085      	sub	sp, #20
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801270c:	2300      	movs	r3, #0
 801270e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	699b      	ldr	r3, [r3, #24]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d11f      	bne.n	801275e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	2b03      	cmp	r3, #3
 8012722:	d855      	bhi.n	80127d0 <DMA_CheckFifoParam+0xcc>
 8012724:	a201      	add	r2, pc, #4	; (adr r2, 801272c <DMA_CheckFifoParam+0x28>)
 8012726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801272a:	bf00      	nop
 801272c:	0801273d 	.word	0x0801273d
 8012730:	0801274f 	.word	0x0801274f
 8012734:	0801273d 	.word	0x0801273d
 8012738:	080127d1 	.word	0x080127d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012744:	2b00      	cmp	r3, #0
 8012746:	d045      	beq.n	80127d4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8012748:	2301      	movs	r3, #1
 801274a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801274c:	e042      	b.n	80127d4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012752:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012756:	d13f      	bne.n	80127d8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8012758:	2301      	movs	r3, #1
 801275a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801275c:	e03c      	b.n	80127d8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	699b      	ldr	r3, [r3, #24]
 8012762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012766:	d121      	bne.n	80127ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	2b03      	cmp	r3, #3
 801276c:	d836      	bhi.n	80127dc <DMA_CheckFifoParam+0xd8>
 801276e:	a201      	add	r2, pc, #4	; (adr r2, 8012774 <DMA_CheckFifoParam+0x70>)
 8012770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012774:	08012785 	.word	0x08012785
 8012778:	0801278b 	.word	0x0801278b
 801277c:	08012785 	.word	0x08012785
 8012780:	0801279d 	.word	0x0801279d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8012784:	2301      	movs	r3, #1
 8012786:	73fb      	strb	r3, [r7, #15]
      break;
 8012788:	e02f      	b.n	80127ea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801278e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012792:	2b00      	cmp	r3, #0
 8012794:	d024      	beq.n	80127e0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8012796:	2301      	movs	r3, #1
 8012798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801279a:	e021      	b.n	80127e0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80127a4:	d11e      	bne.n	80127e4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80127a6:	2301      	movs	r3, #1
 80127a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80127aa:	e01b      	b.n	80127e4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	2b02      	cmp	r3, #2
 80127b0:	d902      	bls.n	80127b8 <DMA_CheckFifoParam+0xb4>
 80127b2:	2b03      	cmp	r3, #3
 80127b4:	d003      	beq.n	80127be <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80127b6:	e018      	b.n	80127ea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80127b8:	2301      	movs	r3, #1
 80127ba:	73fb      	strb	r3, [r7, #15]
      break;
 80127bc:	e015      	b.n	80127ea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d00e      	beq.n	80127e8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80127ca:	2301      	movs	r3, #1
 80127cc:	73fb      	strb	r3, [r7, #15]
      break;
 80127ce:	e00b      	b.n	80127e8 <DMA_CheckFifoParam+0xe4>
      break;
 80127d0:	bf00      	nop
 80127d2:	e00a      	b.n	80127ea <DMA_CheckFifoParam+0xe6>
      break;
 80127d4:	bf00      	nop
 80127d6:	e008      	b.n	80127ea <DMA_CheckFifoParam+0xe6>
      break;
 80127d8:	bf00      	nop
 80127da:	e006      	b.n	80127ea <DMA_CheckFifoParam+0xe6>
      break;
 80127dc:	bf00      	nop
 80127de:	e004      	b.n	80127ea <DMA_CheckFifoParam+0xe6>
      break;
 80127e0:	bf00      	nop
 80127e2:	e002      	b.n	80127ea <DMA_CheckFifoParam+0xe6>
      break;   
 80127e4:	bf00      	nop
 80127e6:	e000      	b.n	80127ea <DMA_CheckFifoParam+0xe6>
      break;
 80127e8:	bf00      	nop
    }
  } 
  
  return status; 
 80127ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	3714      	adds	r7, #20
 80127f0:	46bd      	mov	sp, r7
 80127f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f6:	4770      	bx	lr

080127f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80127f8:	b480      	push	{r7}
 80127fa:	b083      	sub	sp, #12
 80127fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80127fe:	2300      	movs	r3, #0
 8012800:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8012802:	4b0b      	ldr	r3, [pc, #44]	; (8012830 <HAL_FLASH_Unlock+0x38>)
 8012804:	691b      	ldr	r3, [r3, #16]
 8012806:	2b00      	cmp	r3, #0
 8012808:	da0b      	bge.n	8012822 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801280a:	4b09      	ldr	r3, [pc, #36]	; (8012830 <HAL_FLASH_Unlock+0x38>)
 801280c:	4a09      	ldr	r2, [pc, #36]	; (8012834 <HAL_FLASH_Unlock+0x3c>)
 801280e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8012810:	4b07      	ldr	r3, [pc, #28]	; (8012830 <HAL_FLASH_Unlock+0x38>)
 8012812:	4a09      	ldr	r2, [pc, #36]	; (8012838 <HAL_FLASH_Unlock+0x40>)
 8012814:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8012816:	4b06      	ldr	r3, [pc, #24]	; (8012830 <HAL_FLASH_Unlock+0x38>)
 8012818:	691b      	ldr	r3, [r3, #16]
 801281a:	2b00      	cmp	r3, #0
 801281c:	da01      	bge.n	8012822 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801281e:	2301      	movs	r3, #1
 8012820:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8012822:	79fb      	ldrb	r3, [r7, #7]
}
 8012824:	4618      	mov	r0, r3
 8012826:	370c      	adds	r7, #12
 8012828:	46bd      	mov	sp, r7
 801282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282e:	4770      	bx	lr
 8012830:	40023c00 	.word	0x40023c00
 8012834:	45670123 	.word	0x45670123
 8012838:	cdef89ab 	.word	0xcdef89ab

0801283c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801283c:	b480      	push	{r7}
 801283e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8012840:	4b05      	ldr	r3, [pc, #20]	; (8012858 <HAL_FLASH_Lock+0x1c>)
 8012842:	691b      	ldr	r3, [r3, #16]
 8012844:	4a04      	ldr	r2, [pc, #16]	; (8012858 <HAL_FLASH_Lock+0x1c>)
 8012846:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801284a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 801284c:	2300      	movs	r3, #0
}
 801284e:	4618      	mov	r0, r3
 8012850:	46bd      	mov	sp, r7
 8012852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012856:	4770      	bx	lr
 8012858:	40023c00 	.word	0x40023c00

0801285c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 801285c:	b580      	push	{r7, lr}
 801285e:	b084      	sub	sp, #16
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012864:	2300      	movs	r3, #0
 8012866:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012868:	4b1a      	ldr	r3, [pc, #104]	; (80128d4 <FLASH_WaitForLastOperation+0x78>)
 801286a:	2200      	movs	r2, #0
 801286c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801286e:	f7fe fe67 	bl	8011540 <HAL_GetTick>
 8012872:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012874:	e010      	b.n	8012898 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	f1b3 3fff 	cmp.w	r3, #4294967295
 801287c:	d00c      	beq.n	8012898 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d007      	beq.n	8012894 <FLASH_WaitForLastOperation+0x38>
 8012884:	f7fe fe5c 	bl	8011540 <HAL_GetTick>
 8012888:	4602      	mov	r2, r0
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	1ad3      	subs	r3, r2, r3
 801288e:	687a      	ldr	r2, [r7, #4]
 8012890:	429a      	cmp	r2, r3
 8012892:	d201      	bcs.n	8012898 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8012894:	2303      	movs	r3, #3
 8012896:	e019      	b.n	80128cc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012898:	4b0f      	ldr	r3, [pc, #60]	; (80128d8 <FLASH_WaitForLastOperation+0x7c>)
 801289a:	68db      	ldr	r3, [r3, #12]
 801289c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d1e8      	bne.n	8012876 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80128a4:	4b0c      	ldr	r3, [pc, #48]	; (80128d8 <FLASH_WaitForLastOperation+0x7c>)
 80128a6:	68db      	ldr	r3, [r3, #12]
 80128a8:	f003 0301 	and.w	r3, r3, #1
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d002      	beq.n	80128b6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80128b0:	4b09      	ldr	r3, [pc, #36]	; (80128d8 <FLASH_WaitForLastOperation+0x7c>)
 80128b2:	2201      	movs	r2, #1
 80128b4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80128b6:	4b08      	ldr	r3, [pc, #32]	; (80128d8 <FLASH_WaitForLastOperation+0x7c>)
 80128b8:	68db      	ldr	r3, [r3, #12]
 80128ba:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d003      	beq.n	80128ca <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80128c2:	f000 f80b 	bl	80128dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80128c6:	2301      	movs	r3, #1
 80128c8:	e000      	b.n	80128cc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80128ca:	2300      	movs	r3, #0
  
}  
 80128cc:	4618      	mov	r0, r3
 80128ce:	3710      	adds	r7, #16
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}
 80128d4:	20000a84 	.word	0x20000a84
 80128d8:	40023c00 	.word	0x40023c00

080128dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80128dc:	b480      	push	{r7}
 80128de:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80128e0:	4b27      	ldr	r3, [pc, #156]	; (8012980 <FLASH_SetErrorCode+0xa4>)
 80128e2:	68db      	ldr	r3, [r3, #12]
 80128e4:	f003 0310 	and.w	r3, r3, #16
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d008      	beq.n	80128fe <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80128ec:	4b25      	ldr	r3, [pc, #148]	; (8012984 <FLASH_SetErrorCode+0xa8>)
 80128ee:	69db      	ldr	r3, [r3, #28]
 80128f0:	f043 0310 	orr.w	r3, r3, #16
 80128f4:	4a23      	ldr	r2, [pc, #140]	; (8012984 <FLASH_SetErrorCode+0xa8>)
 80128f6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80128f8:	4b21      	ldr	r3, [pc, #132]	; (8012980 <FLASH_SetErrorCode+0xa4>)
 80128fa:	2210      	movs	r2, #16
 80128fc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80128fe:	4b20      	ldr	r3, [pc, #128]	; (8012980 <FLASH_SetErrorCode+0xa4>)
 8012900:	68db      	ldr	r3, [r3, #12]
 8012902:	f003 0320 	and.w	r3, r3, #32
 8012906:	2b00      	cmp	r3, #0
 8012908:	d008      	beq.n	801291c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 801290a:	4b1e      	ldr	r3, [pc, #120]	; (8012984 <FLASH_SetErrorCode+0xa8>)
 801290c:	69db      	ldr	r3, [r3, #28]
 801290e:	f043 0308 	orr.w	r3, r3, #8
 8012912:	4a1c      	ldr	r2, [pc, #112]	; (8012984 <FLASH_SetErrorCode+0xa8>)
 8012914:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8012916:	4b1a      	ldr	r3, [pc, #104]	; (8012980 <FLASH_SetErrorCode+0xa4>)
 8012918:	2220      	movs	r2, #32
 801291a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 801291c:	4b18      	ldr	r3, [pc, #96]	; (8012980 <FLASH_SetErrorCode+0xa4>)
 801291e:	68db      	ldr	r3, [r3, #12]
 8012920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012924:	2b00      	cmp	r3, #0
 8012926:	d008      	beq.n	801293a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8012928:	4b16      	ldr	r3, [pc, #88]	; (8012984 <FLASH_SetErrorCode+0xa8>)
 801292a:	69db      	ldr	r3, [r3, #28]
 801292c:	f043 0304 	orr.w	r3, r3, #4
 8012930:	4a14      	ldr	r2, [pc, #80]	; (8012984 <FLASH_SetErrorCode+0xa8>)
 8012932:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8012934:	4b12      	ldr	r3, [pc, #72]	; (8012980 <FLASH_SetErrorCode+0xa4>)
 8012936:	2240      	movs	r2, #64	; 0x40
 8012938:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801293a:	4b11      	ldr	r3, [pc, #68]	; (8012980 <FLASH_SetErrorCode+0xa4>)
 801293c:	68db      	ldr	r3, [r3, #12]
 801293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012942:	2b00      	cmp	r3, #0
 8012944:	d008      	beq.n	8012958 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8012946:	4b0f      	ldr	r3, [pc, #60]	; (8012984 <FLASH_SetErrorCode+0xa8>)
 8012948:	69db      	ldr	r3, [r3, #28]
 801294a:	f043 0302 	orr.w	r3, r3, #2
 801294e:	4a0d      	ldr	r2, [pc, #52]	; (8012984 <FLASH_SetErrorCode+0xa8>)
 8012950:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8012952:	4b0b      	ldr	r3, [pc, #44]	; (8012980 <FLASH_SetErrorCode+0xa4>)
 8012954:	2280      	movs	r2, #128	; 0x80
 8012956:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8012958:	4b09      	ldr	r3, [pc, #36]	; (8012980 <FLASH_SetErrorCode+0xa4>)
 801295a:	68db      	ldr	r3, [r3, #12]
 801295c:	f003 0302 	and.w	r3, r3, #2
 8012960:	2b00      	cmp	r3, #0
 8012962:	d008      	beq.n	8012976 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8012964:	4b07      	ldr	r3, [pc, #28]	; (8012984 <FLASH_SetErrorCode+0xa8>)
 8012966:	69db      	ldr	r3, [r3, #28]
 8012968:	f043 0320 	orr.w	r3, r3, #32
 801296c:	4a05      	ldr	r2, [pc, #20]	; (8012984 <FLASH_SetErrorCode+0xa8>)
 801296e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8012970:	4b03      	ldr	r3, [pc, #12]	; (8012980 <FLASH_SetErrorCode+0xa4>)
 8012972:	2202      	movs	r2, #2
 8012974:	60da      	str	r2, [r3, #12]
  }
}
 8012976:	bf00      	nop
 8012978:	46bd      	mov	sp, r7
 801297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297e:	4770      	bx	lr
 8012980:	40023c00 	.word	0x40023c00
 8012984:	20000a84 	.word	0x20000a84

08012988 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b084      	sub	sp, #16
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
 8012990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012992:	2301      	movs	r3, #1
 8012994:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8012996:	2300      	movs	r3, #0
 8012998:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801299a:	4b31      	ldr	r3, [pc, #196]	; (8012a60 <HAL_FLASHEx_Erase+0xd8>)
 801299c:	7e1b      	ldrb	r3, [r3, #24]
 801299e:	2b01      	cmp	r3, #1
 80129a0:	d101      	bne.n	80129a6 <HAL_FLASHEx_Erase+0x1e>
 80129a2:	2302      	movs	r3, #2
 80129a4:	e058      	b.n	8012a58 <HAL_FLASHEx_Erase+0xd0>
 80129a6:	4b2e      	ldr	r3, [pc, #184]	; (8012a60 <HAL_FLASHEx_Erase+0xd8>)
 80129a8:	2201      	movs	r2, #1
 80129aa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80129ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80129b0:	f7ff ff54 	bl	801285c <FLASH_WaitForLastOperation>
 80129b4:	4603      	mov	r3, r0
 80129b6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80129b8:	7bfb      	ldrb	r3, [r7, #15]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d148      	bne.n	8012a50 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	f04f 32ff 	mov.w	r2, #4294967295
 80129c4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	2b01      	cmp	r3, #1
 80129cc:	d115      	bne.n	80129fa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	691b      	ldr	r3, [r3, #16]
 80129d2:	b2da      	uxtb	r2, r3
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	4619      	mov	r1, r3
 80129da:	4610      	mov	r0, r2
 80129dc:	f000 f844 	bl	8012a68 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80129e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80129e4:	f7ff ff3a 	bl	801285c <FLASH_WaitForLastOperation>
 80129e8:	4603      	mov	r3, r0
 80129ea:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80129ec:	4b1d      	ldr	r3, [pc, #116]	; (8012a64 <HAL_FLASHEx_Erase+0xdc>)
 80129ee:	691b      	ldr	r3, [r3, #16]
 80129f0:	4a1c      	ldr	r2, [pc, #112]	; (8012a64 <HAL_FLASHEx_Erase+0xdc>)
 80129f2:	f023 0304 	bic.w	r3, r3, #4
 80129f6:	6113      	str	r3, [r2, #16]
 80129f8:	e028      	b.n	8012a4c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	689b      	ldr	r3, [r3, #8]
 80129fe:	60bb      	str	r3, [r7, #8]
 8012a00:	e01c      	b.n	8012a3c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	691b      	ldr	r3, [r3, #16]
 8012a06:	b2db      	uxtb	r3, r3
 8012a08:	4619      	mov	r1, r3
 8012a0a:	68b8      	ldr	r0, [r7, #8]
 8012a0c:	f000 f850 	bl	8012ab0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012a10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012a14:	f7ff ff22 	bl	801285c <FLASH_WaitForLastOperation>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8012a1c:	4b11      	ldr	r3, [pc, #68]	; (8012a64 <HAL_FLASHEx_Erase+0xdc>)
 8012a1e:	691b      	ldr	r3, [r3, #16]
 8012a20:	4a10      	ldr	r2, [pc, #64]	; (8012a64 <HAL_FLASHEx_Erase+0xdc>)
 8012a22:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8012a26:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8012a28:	7bfb      	ldrb	r3, [r7, #15]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d003      	beq.n	8012a36 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	68ba      	ldr	r2, [r7, #8]
 8012a32:	601a      	str	r2, [r3, #0]
          break;
 8012a34:	e00a      	b.n	8012a4c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	3301      	adds	r3, #1
 8012a3a:	60bb      	str	r3, [r7, #8]
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	68da      	ldr	r2, [r3, #12]
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	689b      	ldr	r3, [r3, #8]
 8012a44:	4413      	add	r3, r2
 8012a46:	68ba      	ldr	r2, [r7, #8]
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d3da      	bcc.n	8012a02 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8012a4c:	f000 f878 	bl	8012b40 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012a50:	4b03      	ldr	r3, [pc, #12]	; (8012a60 <HAL_FLASHEx_Erase+0xd8>)
 8012a52:	2200      	movs	r2, #0
 8012a54:	761a      	strb	r2, [r3, #24]

  return status;
 8012a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3710      	adds	r7, #16
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}
 8012a60:	20000a84 	.word	0x20000a84
 8012a64:	40023c00 	.word	0x40023c00

08012a68 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8012a68:	b480      	push	{r7}
 8012a6a:	b083      	sub	sp, #12
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	4603      	mov	r3, r0
 8012a70:	6039      	str	r1, [r7, #0]
 8012a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012a74:	4b0d      	ldr	r3, [pc, #52]	; (8012aac <FLASH_MassErase+0x44>)
 8012a76:	691b      	ldr	r3, [r3, #16]
 8012a78:	4a0c      	ldr	r2, [pc, #48]	; (8012aac <FLASH_MassErase+0x44>)
 8012a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012a7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8012a80:	4b0a      	ldr	r3, [pc, #40]	; (8012aac <FLASH_MassErase+0x44>)
 8012a82:	691b      	ldr	r3, [r3, #16]
 8012a84:	4a09      	ldr	r2, [pc, #36]	; (8012aac <FLASH_MassErase+0x44>)
 8012a86:	f043 0304 	orr.w	r3, r3, #4
 8012a8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8012a8c:	4b07      	ldr	r3, [pc, #28]	; (8012aac <FLASH_MassErase+0x44>)
 8012a8e:	691a      	ldr	r2, [r3, #16]
 8012a90:	79fb      	ldrb	r3, [r7, #7]
 8012a92:	021b      	lsls	r3, r3, #8
 8012a94:	4313      	orrs	r3, r2
 8012a96:	4a05      	ldr	r2, [pc, #20]	; (8012aac <FLASH_MassErase+0x44>)
 8012a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012a9c:	6113      	str	r3, [r2, #16]
}
 8012a9e:	bf00      	nop
 8012aa0:	370c      	adds	r7, #12
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop
 8012aac:	40023c00 	.word	0x40023c00

08012ab0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8012ab0:	b480      	push	{r7}
 8012ab2:	b085      	sub	sp, #20
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	460b      	mov	r3, r1
 8012aba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8012abc:	2300      	movs	r3, #0
 8012abe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8012ac0:	78fb      	ldrb	r3, [r7, #3]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d102      	bne.n	8012acc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	60fb      	str	r3, [r7, #12]
 8012aca:	e010      	b.n	8012aee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8012acc:	78fb      	ldrb	r3, [r7, #3]
 8012ace:	2b01      	cmp	r3, #1
 8012ad0:	d103      	bne.n	8012ada <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8012ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ad6:	60fb      	str	r3, [r7, #12]
 8012ad8:	e009      	b.n	8012aee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8012ada:	78fb      	ldrb	r3, [r7, #3]
 8012adc:	2b02      	cmp	r3, #2
 8012ade:	d103      	bne.n	8012ae8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8012ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ae4:	60fb      	str	r3, [r7, #12]
 8012ae6:	e002      	b.n	8012aee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8012ae8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012aec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012aee:	4b13      	ldr	r3, [pc, #76]	; (8012b3c <FLASH_Erase_Sector+0x8c>)
 8012af0:	691b      	ldr	r3, [r3, #16]
 8012af2:	4a12      	ldr	r2, [pc, #72]	; (8012b3c <FLASH_Erase_Sector+0x8c>)
 8012af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012af8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8012afa:	4b10      	ldr	r3, [pc, #64]	; (8012b3c <FLASH_Erase_Sector+0x8c>)
 8012afc:	691a      	ldr	r2, [r3, #16]
 8012afe:	490f      	ldr	r1, [pc, #60]	; (8012b3c <FLASH_Erase_Sector+0x8c>)
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	4313      	orrs	r3, r2
 8012b04:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8012b06:	4b0d      	ldr	r3, [pc, #52]	; (8012b3c <FLASH_Erase_Sector+0x8c>)
 8012b08:	691b      	ldr	r3, [r3, #16]
 8012b0a:	4a0c      	ldr	r2, [pc, #48]	; (8012b3c <FLASH_Erase_Sector+0x8c>)
 8012b0c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8012b10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8012b12:	4b0a      	ldr	r3, [pc, #40]	; (8012b3c <FLASH_Erase_Sector+0x8c>)
 8012b14:	691a      	ldr	r2, [r3, #16]
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	00db      	lsls	r3, r3, #3
 8012b1a:	4313      	orrs	r3, r2
 8012b1c:	4a07      	ldr	r2, [pc, #28]	; (8012b3c <FLASH_Erase_Sector+0x8c>)
 8012b1e:	f043 0302 	orr.w	r3, r3, #2
 8012b22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8012b24:	4b05      	ldr	r3, [pc, #20]	; (8012b3c <FLASH_Erase_Sector+0x8c>)
 8012b26:	691b      	ldr	r3, [r3, #16]
 8012b28:	4a04      	ldr	r2, [pc, #16]	; (8012b3c <FLASH_Erase_Sector+0x8c>)
 8012b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012b2e:	6113      	str	r3, [r2, #16]
}
 8012b30:	bf00      	nop
 8012b32:	3714      	adds	r7, #20
 8012b34:	46bd      	mov	sp, r7
 8012b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3a:	4770      	bx	lr
 8012b3c:	40023c00 	.word	0x40023c00

08012b40 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8012b40:	b480      	push	{r7}
 8012b42:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8012b44:	4b20      	ldr	r3, [pc, #128]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d017      	beq.n	8012b80 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8012b50:	4b1d      	ldr	r3, [pc, #116]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	4a1c      	ldr	r2, [pc, #112]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012b56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012b5a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8012b5c:	4b1a      	ldr	r3, [pc, #104]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	4a19      	ldr	r2, [pc, #100]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012b62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012b66:	6013      	str	r3, [r2, #0]
 8012b68:	4b17      	ldr	r3, [pc, #92]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	4a16      	ldr	r2, [pc, #88]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012b72:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8012b74:	4b14      	ldr	r3, [pc, #80]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	4a13      	ldr	r2, [pc, #76]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012b7e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8012b80:	4b11      	ldr	r3, [pc, #68]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d017      	beq.n	8012bbc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8012b8c:	4b0e      	ldr	r3, [pc, #56]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	4a0d      	ldr	r2, [pc, #52]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012b92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012b96:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8012b98:	4b0b      	ldr	r3, [pc, #44]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	4a0a      	ldr	r2, [pc, #40]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012b9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012ba2:	6013      	str	r3, [r2, #0]
 8012ba4:	4b08      	ldr	r3, [pc, #32]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	4a07      	ldr	r2, [pc, #28]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012bae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8012bb0:	4b05      	ldr	r3, [pc, #20]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	4a04      	ldr	r2, [pc, #16]	; (8012bc8 <FLASH_FlushCaches+0x88>)
 8012bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012bba:	6013      	str	r3, [r2, #0]
  }
}
 8012bbc:	bf00      	nop
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc4:	4770      	bx	lr
 8012bc6:	bf00      	nop
 8012bc8:	40023c00 	.word	0x40023c00

08012bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b089      	sub	sp, #36	; 0x24
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
 8012bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012bde:	2300      	movs	r3, #0
 8012be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012be2:	2300      	movs	r3, #0
 8012be4:	61fb      	str	r3, [r7, #28]
 8012be6:	e16b      	b.n	8012ec0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012be8:	2201      	movs	r2, #1
 8012bea:	69fb      	ldr	r3, [r7, #28]
 8012bec:	fa02 f303 	lsl.w	r3, r2, r3
 8012bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	697a      	ldr	r2, [r7, #20]
 8012bf8:	4013      	ands	r3, r2
 8012bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012bfc:	693a      	ldr	r2, [r7, #16]
 8012bfe:	697b      	ldr	r3, [r7, #20]
 8012c00:	429a      	cmp	r2, r3
 8012c02:	f040 815a 	bne.w	8012eba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	685b      	ldr	r3, [r3, #4]
 8012c0a:	2b01      	cmp	r3, #1
 8012c0c:	d00b      	beq.n	8012c26 <HAL_GPIO_Init+0x5a>
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	685b      	ldr	r3, [r3, #4]
 8012c12:	2b02      	cmp	r3, #2
 8012c14:	d007      	beq.n	8012c26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012c1a:	2b11      	cmp	r3, #17
 8012c1c:	d003      	beq.n	8012c26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	685b      	ldr	r3, [r3, #4]
 8012c22:	2b12      	cmp	r3, #18
 8012c24:	d130      	bne.n	8012c88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	689b      	ldr	r3, [r3, #8]
 8012c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	005b      	lsls	r3, r3, #1
 8012c30:	2203      	movs	r2, #3
 8012c32:	fa02 f303 	lsl.w	r3, r2, r3
 8012c36:	43db      	mvns	r3, r3
 8012c38:	69ba      	ldr	r2, [r7, #24]
 8012c3a:	4013      	ands	r3, r2
 8012c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	68da      	ldr	r2, [r3, #12]
 8012c42:	69fb      	ldr	r3, [r7, #28]
 8012c44:	005b      	lsls	r3, r3, #1
 8012c46:	fa02 f303 	lsl.w	r3, r2, r3
 8012c4a:	69ba      	ldr	r2, [r7, #24]
 8012c4c:	4313      	orrs	r3, r2
 8012c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	69ba      	ldr	r2, [r7, #24]
 8012c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012c5c:	2201      	movs	r2, #1
 8012c5e:	69fb      	ldr	r3, [r7, #28]
 8012c60:	fa02 f303 	lsl.w	r3, r2, r3
 8012c64:	43db      	mvns	r3, r3
 8012c66:	69ba      	ldr	r2, [r7, #24]
 8012c68:	4013      	ands	r3, r2
 8012c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	685b      	ldr	r3, [r3, #4]
 8012c70:	091b      	lsrs	r3, r3, #4
 8012c72:	f003 0201 	and.w	r2, r3, #1
 8012c76:	69fb      	ldr	r3, [r7, #28]
 8012c78:	fa02 f303 	lsl.w	r3, r2, r3
 8012c7c:	69ba      	ldr	r2, [r7, #24]
 8012c7e:	4313      	orrs	r3, r2
 8012c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	69ba      	ldr	r2, [r7, #24]
 8012c86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	68db      	ldr	r3, [r3, #12]
 8012c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012c8e:	69fb      	ldr	r3, [r7, #28]
 8012c90:	005b      	lsls	r3, r3, #1
 8012c92:	2203      	movs	r2, #3
 8012c94:	fa02 f303 	lsl.w	r3, r2, r3
 8012c98:	43db      	mvns	r3, r3
 8012c9a:	69ba      	ldr	r2, [r7, #24]
 8012c9c:	4013      	ands	r3, r2
 8012c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	689a      	ldr	r2, [r3, #8]
 8012ca4:	69fb      	ldr	r3, [r7, #28]
 8012ca6:	005b      	lsls	r3, r3, #1
 8012ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8012cac:	69ba      	ldr	r2, [r7, #24]
 8012cae:	4313      	orrs	r3, r2
 8012cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	69ba      	ldr	r2, [r7, #24]
 8012cb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	685b      	ldr	r3, [r3, #4]
 8012cbc:	2b02      	cmp	r3, #2
 8012cbe:	d003      	beq.n	8012cc8 <HAL_GPIO_Init+0xfc>
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	2b12      	cmp	r3, #18
 8012cc6:	d123      	bne.n	8012d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012cc8:	69fb      	ldr	r3, [r7, #28]
 8012cca:	08da      	lsrs	r2, r3, #3
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	3208      	adds	r2, #8
 8012cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012cd6:	69fb      	ldr	r3, [r7, #28]
 8012cd8:	f003 0307 	and.w	r3, r3, #7
 8012cdc:	009b      	lsls	r3, r3, #2
 8012cde:	220f      	movs	r2, #15
 8012ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8012ce4:	43db      	mvns	r3, r3
 8012ce6:	69ba      	ldr	r2, [r7, #24]
 8012ce8:	4013      	ands	r3, r2
 8012cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012cec:	683b      	ldr	r3, [r7, #0]
 8012cee:	691a      	ldr	r2, [r3, #16]
 8012cf0:	69fb      	ldr	r3, [r7, #28]
 8012cf2:	f003 0307 	and.w	r3, r3, #7
 8012cf6:	009b      	lsls	r3, r3, #2
 8012cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8012cfc:	69ba      	ldr	r2, [r7, #24]
 8012cfe:	4313      	orrs	r3, r2
 8012d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012d02:	69fb      	ldr	r3, [r7, #28]
 8012d04:	08da      	lsrs	r2, r3, #3
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	3208      	adds	r2, #8
 8012d0a:	69b9      	ldr	r1, [r7, #24]
 8012d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	005b      	lsls	r3, r3, #1
 8012d1a:	2203      	movs	r2, #3
 8012d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8012d20:	43db      	mvns	r3, r3
 8012d22:	69ba      	ldr	r2, [r7, #24]
 8012d24:	4013      	ands	r3, r2
 8012d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	685b      	ldr	r3, [r3, #4]
 8012d2c:	f003 0203 	and.w	r2, r3, #3
 8012d30:	69fb      	ldr	r3, [r7, #28]
 8012d32:	005b      	lsls	r3, r3, #1
 8012d34:	fa02 f303 	lsl.w	r3, r2, r3
 8012d38:	69ba      	ldr	r2, [r7, #24]
 8012d3a:	4313      	orrs	r3, r2
 8012d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	69ba      	ldr	r2, [r7, #24]
 8012d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	f000 80b4 	beq.w	8012eba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012d52:	2300      	movs	r3, #0
 8012d54:	60fb      	str	r3, [r7, #12]
 8012d56:	4b5f      	ldr	r3, [pc, #380]	; (8012ed4 <HAL_GPIO_Init+0x308>)
 8012d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d5a:	4a5e      	ldr	r2, [pc, #376]	; (8012ed4 <HAL_GPIO_Init+0x308>)
 8012d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012d60:	6453      	str	r3, [r2, #68]	; 0x44
 8012d62:	4b5c      	ldr	r3, [pc, #368]	; (8012ed4 <HAL_GPIO_Init+0x308>)
 8012d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012d6a:	60fb      	str	r3, [r7, #12]
 8012d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012d6e:	4a5a      	ldr	r2, [pc, #360]	; (8012ed8 <HAL_GPIO_Init+0x30c>)
 8012d70:	69fb      	ldr	r3, [r7, #28]
 8012d72:	089b      	lsrs	r3, r3, #2
 8012d74:	3302      	adds	r3, #2
 8012d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012d7c:	69fb      	ldr	r3, [r7, #28]
 8012d7e:	f003 0303 	and.w	r3, r3, #3
 8012d82:	009b      	lsls	r3, r3, #2
 8012d84:	220f      	movs	r2, #15
 8012d86:	fa02 f303 	lsl.w	r3, r2, r3
 8012d8a:	43db      	mvns	r3, r3
 8012d8c:	69ba      	ldr	r2, [r7, #24]
 8012d8e:	4013      	ands	r3, r2
 8012d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	4a51      	ldr	r2, [pc, #324]	; (8012edc <HAL_GPIO_Init+0x310>)
 8012d96:	4293      	cmp	r3, r2
 8012d98:	d02b      	beq.n	8012df2 <HAL_GPIO_Init+0x226>
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	4a50      	ldr	r2, [pc, #320]	; (8012ee0 <HAL_GPIO_Init+0x314>)
 8012d9e:	4293      	cmp	r3, r2
 8012da0:	d025      	beq.n	8012dee <HAL_GPIO_Init+0x222>
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	4a4f      	ldr	r2, [pc, #316]	; (8012ee4 <HAL_GPIO_Init+0x318>)
 8012da6:	4293      	cmp	r3, r2
 8012da8:	d01f      	beq.n	8012dea <HAL_GPIO_Init+0x21e>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	4a4e      	ldr	r2, [pc, #312]	; (8012ee8 <HAL_GPIO_Init+0x31c>)
 8012dae:	4293      	cmp	r3, r2
 8012db0:	d019      	beq.n	8012de6 <HAL_GPIO_Init+0x21a>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	4a4d      	ldr	r2, [pc, #308]	; (8012eec <HAL_GPIO_Init+0x320>)
 8012db6:	4293      	cmp	r3, r2
 8012db8:	d013      	beq.n	8012de2 <HAL_GPIO_Init+0x216>
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	4a4c      	ldr	r2, [pc, #304]	; (8012ef0 <HAL_GPIO_Init+0x324>)
 8012dbe:	4293      	cmp	r3, r2
 8012dc0:	d00d      	beq.n	8012dde <HAL_GPIO_Init+0x212>
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	4a4b      	ldr	r2, [pc, #300]	; (8012ef4 <HAL_GPIO_Init+0x328>)
 8012dc6:	4293      	cmp	r3, r2
 8012dc8:	d007      	beq.n	8012dda <HAL_GPIO_Init+0x20e>
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	4a4a      	ldr	r2, [pc, #296]	; (8012ef8 <HAL_GPIO_Init+0x32c>)
 8012dce:	4293      	cmp	r3, r2
 8012dd0:	d101      	bne.n	8012dd6 <HAL_GPIO_Init+0x20a>
 8012dd2:	2307      	movs	r3, #7
 8012dd4:	e00e      	b.n	8012df4 <HAL_GPIO_Init+0x228>
 8012dd6:	2308      	movs	r3, #8
 8012dd8:	e00c      	b.n	8012df4 <HAL_GPIO_Init+0x228>
 8012dda:	2306      	movs	r3, #6
 8012ddc:	e00a      	b.n	8012df4 <HAL_GPIO_Init+0x228>
 8012dde:	2305      	movs	r3, #5
 8012de0:	e008      	b.n	8012df4 <HAL_GPIO_Init+0x228>
 8012de2:	2304      	movs	r3, #4
 8012de4:	e006      	b.n	8012df4 <HAL_GPIO_Init+0x228>
 8012de6:	2303      	movs	r3, #3
 8012de8:	e004      	b.n	8012df4 <HAL_GPIO_Init+0x228>
 8012dea:	2302      	movs	r3, #2
 8012dec:	e002      	b.n	8012df4 <HAL_GPIO_Init+0x228>
 8012dee:	2301      	movs	r3, #1
 8012df0:	e000      	b.n	8012df4 <HAL_GPIO_Init+0x228>
 8012df2:	2300      	movs	r3, #0
 8012df4:	69fa      	ldr	r2, [r7, #28]
 8012df6:	f002 0203 	and.w	r2, r2, #3
 8012dfa:	0092      	lsls	r2, r2, #2
 8012dfc:	4093      	lsls	r3, r2
 8012dfe:	69ba      	ldr	r2, [r7, #24]
 8012e00:	4313      	orrs	r3, r2
 8012e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012e04:	4934      	ldr	r1, [pc, #208]	; (8012ed8 <HAL_GPIO_Init+0x30c>)
 8012e06:	69fb      	ldr	r3, [r7, #28]
 8012e08:	089b      	lsrs	r3, r3, #2
 8012e0a:	3302      	adds	r3, #2
 8012e0c:	69ba      	ldr	r2, [r7, #24]
 8012e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012e12:	4b3a      	ldr	r3, [pc, #232]	; (8012efc <HAL_GPIO_Init+0x330>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	43db      	mvns	r3, r3
 8012e1c:	69ba      	ldr	r2, [r7, #24]
 8012e1e:	4013      	ands	r3, r2
 8012e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d003      	beq.n	8012e36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012e2e:	69ba      	ldr	r2, [r7, #24]
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	4313      	orrs	r3, r2
 8012e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8012e36:	4a31      	ldr	r2, [pc, #196]	; (8012efc <HAL_GPIO_Init+0x330>)
 8012e38:	69bb      	ldr	r3, [r7, #24]
 8012e3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012e3c:	4b2f      	ldr	r3, [pc, #188]	; (8012efc <HAL_GPIO_Init+0x330>)
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012e42:	693b      	ldr	r3, [r7, #16]
 8012e44:	43db      	mvns	r3, r3
 8012e46:	69ba      	ldr	r2, [r7, #24]
 8012e48:	4013      	ands	r3, r2
 8012e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	685b      	ldr	r3, [r3, #4]
 8012e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d003      	beq.n	8012e60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8012e58:	69ba      	ldr	r2, [r7, #24]
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	4313      	orrs	r3, r2
 8012e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012e60:	4a26      	ldr	r2, [pc, #152]	; (8012efc <HAL_GPIO_Init+0x330>)
 8012e62:	69bb      	ldr	r3, [r7, #24]
 8012e64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8012e66:	4b25      	ldr	r3, [pc, #148]	; (8012efc <HAL_GPIO_Init+0x330>)
 8012e68:	689b      	ldr	r3, [r3, #8]
 8012e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	43db      	mvns	r3, r3
 8012e70:	69ba      	ldr	r2, [r7, #24]
 8012e72:	4013      	ands	r3, r2
 8012e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	685b      	ldr	r3, [r3, #4]
 8012e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d003      	beq.n	8012e8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8012e82:	69ba      	ldr	r2, [r7, #24]
 8012e84:	693b      	ldr	r3, [r7, #16]
 8012e86:	4313      	orrs	r3, r2
 8012e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012e8a:	4a1c      	ldr	r2, [pc, #112]	; (8012efc <HAL_GPIO_Init+0x330>)
 8012e8c:	69bb      	ldr	r3, [r7, #24]
 8012e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012e90:	4b1a      	ldr	r3, [pc, #104]	; (8012efc <HAL_GPIO_Init+0x330>)
 8012e92:	68db      	ldr	r3, [r3, #12]
 8012e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	43db      	mvns	r3, r3
 8012e9a:	69ba      	ldr	r2, [r7, #24]
 8012e9c:	4013      	ands	r3, r2
 8012e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	685b      	ldr	r3, [r3, #4]
 8012ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d003      	beq.n	8012eb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012eac:	69ba      	ldr	r2, [r7, #24]
 8012eae:	693b      	ldr	r3, [r7, #16]
 8012eb0:	4313      	orrs	r3, r2
 8012eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012eb4:	4a11      	ldr	r2, [pc, #68]	; (8012efc <HAL_GPIO_Init+0x330>)
 8012eb6:	69bb      	ldr	r3, [r7, #24]
 8012eb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012eba:	69fb      	ldr	r3, [r7, #28]
 8012ebc:	3301      	adds	r3, #1
 8012ebe:	61fb      	str	r3, [r7, #28]
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	2b0f      	cmp	r3, #15
 8012ec4:	f67f ae90 	bls.w	8012be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8012ec8:	bf00      	nop
 8012eca:	3724      	adds	r7, #36	; 0x24
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed2:	4770      	bx	lr
 8012ed4:	40023800 	.word	0x40023800
 8012ed8:	40013800 	.word	0x40013800
 8012edc:	40020000 	.word	0x40020000
 8012ee0:	40020400 	.word	0x40020400
 8012ee4:	40020800 	.word	0x40020800
 8012ee8:	40020c00 	.word	0x40020c00
 8012eec:	40021000 	.word	0x40021000
 8012ef0:	40021400 	.word	0x40021400
 8012ef4:	40021800 	.word	0x40021800
 8012ef8:	40021c00 	.word	0x40021c00
 8012efc:	40013c00 	.word	0x40013c00

08012f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012f00:	b480      	push	{r7}
 8012f02:	b083      	sub	sp, #12
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
 8012f08:	460b      	mov	r3, r1
 8012f0a:	807b      	strh	r3, [r7, #2]
 8012f0c:	4613      	mov	r3, r2
 8012f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012f10:	787b      	ldrb	r3, [r7, #1]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d003      	beq.n	8012f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012f16:	887a      	ldrh	r2, [r7, #2]
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012f1c:	e003      	b.n	8012f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012f1e:	887b      	ldrh	r3, [r7, #2]
 8012f20:	041a      	lsls	r2, r3, #16
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	619a      	str	r2, [r3, #24]
}
 8012f26:	bf00      	nop
 8012f28:	370c      	adds	r7, #12
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f30:	4770      	bx	lr
	...

08012f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8012f3e:	4b08      	ldr	r3, [pc, #32]	; (8012f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8012f40:	695a      	ldr	r2, [r3, #20]
 8012f42:	88fb      	ldrh	r3, [r7, #6]
 8012f44:	4013      	ands	r3, r2
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d006      	beq.n	8012f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8012f4a:	4a05      	ldr	r2, [pc, #20]	; (8012f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8012f4c:	88fb      	ldrh	r3, [r7, #6]
 8012f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8012f50:	88fb      	ldrh	r3, [r7, #6]
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fe f940 	bl	80111d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8012f58:	bf00      	nop
 8012f5a:	3708      	adds	r7, #8
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}
 8012f60:	40013c00 	.word	0x40013c00

08012f64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b086      	sub	sp, #24
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d101      	bne.n	8012f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012f72:	2301      	movs	r3, #1
 8012f74:	e25b      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	f003 0301 	and.w	r3, r3, #1
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d075      	beq.n	801306e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012f82:	4ba3      	ldr	r3, [pc, #652]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8012f84:	689b      	ldr	r3, [r3, #8]
 8012f86:	f003 030c 	and.w	r3, r3, #12
 8012f8a:	2b04      	cmp	r3, #4
 8012f8c:	d00c      	beq.n	8012fa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012f8e:	4ba0      	ldr	r3, [pc, #640]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8012f90:	689b      	ldr	r3, [r3, #8]
 8012f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012f96:	2b08      	cmp	r3, #8
 8012f98:	d112      	bne.n	8012fc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012f9a:	4b9d      	ldr	r3, [pc, #628]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8012f9c:	685b      	ldr	r3, [r3, #4]
 8012f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012fa6:	d10b      	bne.n	8012fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012fa8:	4b99      	ldr	r3, [pc, #612]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d05b      	beq.n	801306c <HAL_RCC_OscConfig+0x108>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d157      	bne.n	801306c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	e236      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	685b      	ldr	r3, [r3, #4]
 8012fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012fc8:	d106      	bne.n	8012fd8 <HAL_RCC_OscConfig+0x74>
 8012fca:	4b91      	ldr	r3, [pc, #580]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	4a90      	ldr	r2, [pc, #576]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8012fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012fd4:	6013      	str	r3, [r2, #0]
 8012fd6:	e01d      	b.n	8013014 <HAL_RCC_OscConfig+0xb0>
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	685b      	ldr	r3, [r3, #4]
 8012fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012fe0:	d10c      	bne.n	8012ffc <HAL_RCC_OscConfig+0x98>
 8012fe2:	4b8b      	ldr	r3, [pc, #556]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	4a8a      	ldr	r2, [pc, #552]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8012fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012fec:	6013      	str	r3, [r2, #0]
 8012fee:	4b88      	ldr	r3, [pc, #544]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	4a87      	ldr	r2, [pc, #540]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8012ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012ff8:	6013      	str	r3, [r2, #0]
 8012ffa:	e00b      	b.n	8013014 <HAL_RCC_OscConfig+0xb0>
 8012ffc:	4b84      	ldr	r3, [pc, #528]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	4a83      	ldr	r2, [pc, #524]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8013002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013006:	6013      	str	r3, [r2, #0]
 8013008:	4b81      	ldr	r3, [pc, #516]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	4a80      	ldr	r2, [pc, #512]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 801300e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	685b      	ldr	r3, [r3, #4]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d013      	beq.n	8013044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801301c:	f7fe fa90 	bl	8011540 <HAL_GetTick>
 8013020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013022:	e008      	b.n	8013036 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013024:	f7fe fa8c 	bl	8011540 <HAL_GetTick>
 8013028:	4602      	mov	r2, r0
 801302a:	693b      	ldr	r3, [r7, #16]
 801302c:	1ad3      	subs	r3, r2, r3
 801302e:	2b64      	cmp	r3, #100	; 0x64
 8013030:	d901      	bls.n	8013036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8013032:	2303      	movs	r3, #3
 8013034:	e1fb      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013036:	4b76      	ldr	r3, [pc, #472]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801303e:	2b00      	cmp	r3, #0
 8013040:	d0f0      	beq.n	8013024 <HAL_RCC_OscConfig+0xc0>
 8013042:	e014      	b.n	801306e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013044:	f7fe fa7c 	bl	8011540 <HAL_GetTick>
 8013048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801304a:	e008      	b.n	801305e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801304c:	f7fe fa78 	bl	8011540 <HAL_GetTick>
 8013050:	4602      	mov	r2, r0
 8013052:	693b      	ldr	r3, [r7, #16]
 8013054:	1ad3      	subs	r3, r2, r3
 8013056:	2b64      	cmp	r3, #100	; 0x64
 8013058:	d901      	bls.n	801305e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801305a:	2303      	movs	r3, #3
 801305c:	e1e7      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801305e:	4b6c      	ldr	r3, [pc, #432]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013066:	2b00      	cmp	r3, #0
 8013068:	d1f0      	bne.n	801304c <HAL_RCC_OscConfig+0xe8>
 801306a:	e000      	b.n	801306e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801306c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	f003 0302 	and.w	r3, r3, #2
 8013076:	2b00      	cmp	r3, #0
 8013078:	d063      	beq.n	8013142 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801307a:	4b65      	ldr	r3, [pc, #404]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 801307c:	689b      	ldr	r3, [r3, #8]
 801307e:	f003 030c 	and.w	r3, r3, #12
 8013082:	2b00      	cmp	r3, #0
 8013084:	d00b      	beq.n	801309e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013086:	4b62      	ldr	r3, [pc, #392]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8013088:	689b      	ldr	r3, [r3, #8]
 801308a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801308e:	2b08      	cmp	r3, #8
 8013090:	d11c      	bne.n	80130cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013092:	4b5f      	ldr	r3, [pc, #380]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801309a:	2b00      	cmp	r3, #0
 801309c:	d116      	bne.n	80130cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801309e:	4b5c      	ldr	r3, [pc, #368]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	f003 0302 	and.w	r3, r3, #2
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d005      	beq.n	80130b6 <HAL_RCC_OscConfig+0x152>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	68db      	ldr	r3, [r3, #12]
 80130ae:	2b01      	cmp	r3, #1
 80130b0:	d001      	beq.n	80130b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80130b2:	2301      	movs	r3, #1
 80130b4:	e1bb      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80130b6:	4b56      	ldr	r3, [pc, #344]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	691b      	ldr	r3, [r3, #16]
 80130c2:	00db      	lsls	r3, r3, #3
 80130c4:	4952      	ldr	r1, [pc, #328]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 80130c6:	4313      	orrs	r3, r2
 80130c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80130ca:	e03a      	b.n	8013142 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	68db      	ldr	r3, [r3, #12]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d020      	beq.n	8013116 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80130d4:	4b4f      	ldr	r3, [pc, #316]	; (8013214 <HAL_RCC_OscConfig+0x2b0>)
 80130d6:	2201      	movs	r2, #1
 80130d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80130da:	f7fe fa31 	bl	8011540 <HAL_GetTick>
 80130de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80130e0:	e008      	b.n	80130f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80130e2:	f7fe fa2d 	bl	8011540 <HAL_GetTick>
 80130e6:	4602      	mov	r2, r0
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	1ad3      	subs	r3, r2, r3
 80130ec:	2b02      	cmp	r3, #2
 80130ee:	d901      	bls.n	80130f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80130f0:	2303      	movs	r3, #3
 80130f2:	e19c      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80130f4:	4b46      	ldr	r3, [pc, #280]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	f003 0302 	and.w	r3, r3, #2
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d0f0      	beq.n	80130e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013100:	4b43      	ldr	r3, [pc, #268]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	691b      	ldr	r3, [r3, #16]
 801310c:	00db      	lsls	r3, r3, #3
 801310e:	4940      	ldr	r1, [pc, #256]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8013110:	4313      	orrs	r3, r2
 8013112:	600b      	str	r3, [r1, #0]
 8013114:	e015      	b.n	8013142 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013116:	4b3f      	ldr	r3, [pc, #252]	; (8013214 <HAL_RCC_OscConfig+0x2b0>)
 8013118:	2200      	movs	r2, #0
 801311a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801311c:	f7fe fa10 	bl	8011540 <HAL_GetTick>
 8013120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013122:	e008      	b.n	8013136 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013124:	f7fe fa0c 	bl	8011540 <HAL_GetTick>
 8013128:	4602      	mov	r2, r0
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	1ad3      	subs	r3, r2, r3
 801312e:	2b02      	cmp	r3, #2
 8013130:	d901      	bls.n	8013136 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8013132:	2303      	movs	r3, #3
 8013134:	e17b      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013136:	4b36      	ldr	r3, [pc, #216]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	f003 0302 	and.w	r3, r3, #2
 801313e:	2b00      	cmp	r3, #0
 8013140:	d1f0      	bne.n	8013124 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	f003 0308 	and.w	r3, r3, #8
 801314a:	2b00      	cmp	r3, #0
 801314c:	d030      	beq.n	80131b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	695b      	ldr	r3, [r3, #20]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d016      	beq.n	8013184 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013156:	4b30      	ldr	r3, [pc, #192]	; (8013218 <HAL_RCC_OscConfig+0x2b4>)
 8013158:	2201      	movs	r2, #1
 801315a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801315c:	f7fe f9f0 	bl	8011540 <HAL_GetTick>
 8013160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013162:	e008      	b.n	8013176 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013164:	f7fe f9ec 	bl	8011540 <HAL_GetTick>
 8013168:	4602      	mov	r2, r0
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	1ad3      	subs	r3, r2, r3
 801316e:	2b02      	cmp	r3, #2
 8013170:	d901      	bls.n	8013176 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8013172:	2303      	movs	r3, #3
 8013174:	e15b      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013176:	4b26      	ldr	r3, [pc, #152]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 8013178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801317a:	f003 0302 	and.w	r3, r3, #2
 801317e:	2b00      	cmp	r3, #0
 8013180:	d0f0      	beq.n	8013164 <HAL_RCC_OscConfig+0x200>
 8013182:	e015      	b.n	80131b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013184:	4b24      	ldr	r3, [pc, #144]	; (8013218 <HAL_RCC_OscConfig+0x2b4>)
 8013186:	2200      	movs	r2, #0
 8013188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801318a:	f7fe f9d9 	bl	8011540 <HAL_GetTick>
 801318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013190:	e008      	b.n	80131a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013192:	f7fe f9d5 	bl	8011540 <HAL_GetTick>
 8013196:	4602      	mov	r2, r0
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	1ad3      	subs	r3, r2, r3
 801319c:	2b02      	cmp	r3, #2
 801319e:	d901      	bls.n	80131a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80131a0:	2303      	movs	r3, #3
 80131a2:	e144      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80131a4:	4b1a      	ldr	r3, [pc, #104]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 80131a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80131a8:	f003 0302 	and.w	r3, r3, #2
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d1f0      	bne.n	8013192 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	f003 0304 	and.w	r3, r3, #4
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	f000 80a0 	beq.w	80132fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80131be:	2300      	movs	r3, #0
 80131c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80131c2:	4b13      	ldr	r3, [pc, #76]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 80131c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d10f      	bne.n	80131ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80131ce:	2300      	movs	r3, #0
 80131d0:	60bb      	str	r3, [r7, #8]
 80131d2:	4b0f      	ldr	r3, [pc, #60]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 80131d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131d6:	4a0e      	ldr	r2, [pc, #56]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 80131d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80131dc:	6413      	str	r3, [r2, #64]	; 0x40
 80131de:	4b0c      	ldr	r3, [pc, #48]	; (8013210 <HAL_RCC_OscConfig+0x2ac>)
 80131e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80131e6:	60bb      	str	r3, [r7, #8]
 80131e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80131ea:	2301      	movs	r3, #1
 80131ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80131ee:	4b0b      	ldr	r3, [pc, #44]	; (801321c <HAL_RCC_OscConfig+0x2b8>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d121      	bne.n	801323e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80131fa:	4b08      	ldr	r3, [pc, #32]	; (801321c <HAL_RCC_OscConfig+0x2b8>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	4a07      	ldr	r2, [pc, #28]	; (801321c <HAL_RCC_OscConfig+0x2b8>)
 8013200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013206:	f7fe f99b 	bl	8011540 <HAL_GetTick>
 801320a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801320c:	e011      	b.n	8013232 <HAL_RCC_OscConfig+0x2ce>
 801320e:	bf00      	nop
 8013210:	40023800 	.word	0x40023800
 8013214:	42470000 	.word	0x42470000
 8013218:	42470e80 	.word	0x42470e80
 801321c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013220:	f7fe f98e 	bl	8011540 <HAL_GetTick>
 8013224:	4602      	mov	r2, r0
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	1ad3      	subs	r3, r2, r3
 801322a:	2b02      	cmp	r3, #2
 801322c:	d901      	bls.n	8013232 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801322e:	2303      	movs	r3, #3
 8013230:	e0fd      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013232:	4b81      	ldr	r3, [pc, #516]	; (8013438 <HAL_RCC_OscConfig+0x4d4>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801323a:	2b00      	cmp	r3, #0
 801323c:	d0f0      	beq.n	8013220 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	689b      	ldr	r3, [r3, #8]
 8013242:	2b01      	cmp	r3, #1
 8013244:	d106      	bne.n	8013254 <HAL_RCC_OscConfig+0x2f0>
 8013246:	4b7d      	ldr	r3, [pc, #500]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 8013248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801324a:	4a7c      	ldr	r2, [pc, #496]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 801324c:	f043 0301 	orr.w	r3, r3, #1
 8013250:	6713      	str	r3, [r2, #112]	; 0x70
 8013252:	e01c      	b.n	801328e <HAL_RCC_OscConfig+0x32a>
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	689b      	ldr	r3, [r3, #8]
 8013258:	2b05      	cmp	r3, #5
 801325a:	d10c      	bne.n	8013276 <HAL_RCC_OscConfig+0x312>
 801325c:	4b77      	ldr	r3, [pc, #476]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 801325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013260:	4a76      	ldr	r2, [pc, #472]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 8013262:	f043 0304 	orr.w	r3, r3, #4
 8013266:	6713      	str	r3, [r2, #112]	; 0x70
 8013268:	4b74      	ldr	r3, [pc, #464]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 801326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801326c:	4a73      	ldr	r2, [pc, #460]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 801326e:	f043 0301 	orr.w	r3, r3, #1
 8013272:	6713      	str	r3, [r2, #112]	; 0x70
 8013274:	e00b      	b.n	801328e <HAL_RCC_OscConfig+0x32a>
 8013276:	4b71      	ldr	r3, [pc, #452]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 8013278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801327a:	4a70      	ldr	r2, [pc, #448]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 801327c:	f023 0301 	bic.w	r3, r3, #1
 8013280:	6713      	str	r3, [r2, #112]	; 0x70
 8013282:	4b6e      	ldr	r3, [pc, #440]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 8013284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013286:	4a6d      	ldr	r2, [pc, #436]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 8013288:	f023 0304 	bic.w	r3, r3, #4
 801328c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	689b      	ldr	r3, [r3, #8]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d015      	beq.n	80132c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013296:	f7fe f953 	bl	8011540 <HAL_GetTick>
 801329a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801329c:	e00a      	b.n	80132b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801329e:	f7fe f94f 	bl	8011540 <HAL_GetTick>
 80132a2:	4602      	mov	r2, r0
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	1ad3      	subs	r3, r2, r3
 80132a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80132ac:	4293      	cmp	r3, r2
 80132ae:	d901      	bls.n	80132b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80132b0:	2303      	movs	r3, #3
 80132b2:	e0bc      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80132b4:	4b61      	ldr	r3, [pc, #388]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 80132b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132b8:	f003 0302 	and.w	r3, r3, #2
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d0ee      	beq.n	801329e <HAL_RCC_OscConfig+0x33a>
 80132c0:	e014      	b.n	80132ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80132c2:	f7fe f93d 	bl	8011540 <HAL_GetTick>
 80132c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80132c8:	e00a      	b.n	80132e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80132ca:	f7fe f939 	bl	8011540 <HAL_GetTick>
 80132ce:	4602      	mov	r2, r0
 80132d0:	693b      	ldr	r3, [r7, #16]
 80132d2:	1ad3      	subs	r3, r2, r3
 80132d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80132d8:	4293      	cmp	r3, r2
 80132da:	d901      	bls.n	80132e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80132dc:	2303      	movs	r3, #3
 80132de:	e0a6      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80132e0:	4b56      	ldr	r3, [pc, #344]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 80132e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132e4:	f003 0302 	and.w	r3, r3, #2
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d1ee      	bne.n	80132ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80132ec:	7dfb      	ldrb	r3, [r7, #23]
 80132ee:	2b01      	cmp	r3, #1
 80132f0:	d105      	bne.n	80132fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80132f2:	4b52      	ldr	r3, [pc, #328]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 80132f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132f6:	4a51      	ldr	r2, [pc, #324]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 80132f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80132fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	699b      	ldr	r3, [r3, #24]
 8013302:	2b00      	cmp	r3, #0
 8013304:	f000 8092 	beq.w	801342c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013308:	4b4c      	ldr	r3, [pc, #304]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 801330a:	689b      	ldr	r3, [r3, #8]
 801330c:	f003 030c 	and.w	r3, r3, #12
 8013310:	2b08      	cmp	r3, #8
 8013312:	d05c      	beq.n	80133ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	699b      	ldr	r3, [r3, #24]
 8013318:	2b02      	cmp	r3, #2
 801331a:	d141      	bne.n	80133a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801331c:	4b48      	ldr	r3, [pc, #288]	; (8013440 <HAL_RCC_OscConfig+0x4dc>)
 801331e:	2200      	movs	r2, #0
 8013320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013322:	f7fe f90d 	bl	8011540 <HAL_GetTick>
 8013326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013328:	e008      	b.n	801333c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801332a:	f7fe f909 	bl	8011540 <HAL_GetTick>
 801332e:	4602      	mov	r2, r0
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	1ad3      	subs	r3, r2, r3
 8013334:	2b02      	cmp	r3, #2
 8013336:	d901      	bls.n	801333c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8013338:	2303      	movs	r3, #3
 801333a:	e078      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801333c:	4b3f      	ldr	r3, [pc, #252]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013344:	2b00      	cmp	r3, #0
 8013346:	d1f0      	bne.n	801332a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	69da      	ldr	r2, [r3, #28]
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	6a1b      	ldr	r3, [r3, #32]
 8013350:	431a      	orrs	r2, r3
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013356:	019b      	lsls	r3, r3, #6
 8013358:	431a      	orrs	r2, r3
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801335e:	085b      	lsrs	r3, r3, #1
 8013360:	3b01      	subs	r3, #1
 8013362:	041b      	lsls	r3, r3, #16
 8013364:	431a      	orrs	r2, r3
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801336a:	061b      	lsls	r3, r3, #24
 801336c:	4933      	ldr	r1, [pc, #204]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 801336e:	4313      	orrs	r3, r2
 8013370:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013372:	4b33      	ldr	r3, [pc, #204]	; (8013440 <HAL_RCC_OscConfig+0x4dc>)
 8013374:	2201      	movs	r2, #1
 8013376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013378:	f7fe f8e2 	bl	8011540 <HAL_GetTick>
 801337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801337e:	e008      	b.n	8013392 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013380:	f7fe f8de 	bl	8011540 <HAL_GetTick>
 8013384:	4602      	mov	r2, r0
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	1ad3      	subs	r3, r2, r3
 801338a:	2b02      	cmp	r3, #2
 801338c:	d901      	bls.n	8013392 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801338e:	2303      	movs	r3, #3
 8013390:	e04d      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013392:	4b2a      	ldr	r3, [pc, #168]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801339a:	2b00      	cmp	r3, #0
 801339c:	d0f0      	beq.n	8013380 <HAL_RCC_OscConfig+0x41c>
 801339e:	e045      	b.n	801342c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80133a0:	4b27      	ldr	r3, [pc, #156]	; (8013440 <HAL_RCC_OscConfig+0x4dc>)
 80133a2:	2200      	movs	r2, #0
 80133a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80133a6:	f7fe f8cb 	bl	8011540 <HAL_GetTick>
 80133aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80133ac:	e008      	b.n	80133c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80133ae:	f7fe f8c7 	bl	8011540 <HAL_GetTick>
 80133b2:	4602      	mov	r2, r0
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	1ad3      	subs	r3, r2, r3
 80133b8:	2b02      	cmp	r3, #2
 80133ba:	d901      	bls.n	80133c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80133bc:	2303      	movs	r3, #3
 80133be:	e036      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80133c0:	4b1e      	ldr	r3, [pc, #120]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d1f0      	bne.n	80133ae <HAL_RCC_OscConfig+0x44a>
 80133cc:	e02e      	b.n	801342c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	699b      	ldr	r3, [r3, #24]
 80133d2:	2b01      	cmp	r3, #1
 80133d4:	d101      	bne.n	80133da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80133d6:	2301      	movs	r3, #1
 80133d8:	e029      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80133da:	4b18      	ldr	r3, [pc, #96]	; (801343c <HAL_RCC_OscConfig+0x4d8>)
 80133dc:	685b      	ldr	r3, [r3, #4]
 80133de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	69db      	ldr	r3, [r3, #28]
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d11c      	bne.n	8013428 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80133f8:	429a      	cmp	r2, r3
 80133fa:	d115      	bne.n	8013428 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80133fc:	68fa      	ldr	r2, [r7, #12]
 80133fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013402:	4013      	ands	r3, r2
 8013404:	687a      	ldr	r2, [r7, #4]
 8013406:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013408:	4293      	cmp	r3, r2
 801340a:	d10d      	bne.n	8013428 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8013416:	429a      	cmp	r2, r3
 8013418:	d106      	bne.n	8013428 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8013424:	429a      	cmp	r2, r3
 8013426:	d001      	beq.n	801342c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8013428:	2301      	movs	r3, #1
 801342a:	e000      	b.n	801342e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 801342c:	2300      	movs	r3, #0
}
 801342e:	4618      	mov	r0, r3
 8013430:	3718      	adds	r7, #24
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop
 8013438:	40007000 	.word	0x40007000
 801343c:	40023800 	.word	0x40023800
 8013440:	42470060 	.word	0x42470060

08013444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013444:	b580      	push	{r7, lr}
 8013446:	b084      	sub	sp, #16
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
 801344c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d101      	bne.n	8013458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013454:	2301      	movs	r3, #1
 8013456:	e0cc      	b.n	80135f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013458:	4b68      	ldr	r3, [pc, #416]	; (80135fc <HAL_RCC_ClockConfig+0x1b8>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	f003 030f 	and.w	r3, r3, #15
 8013460:	683a      	ldr	r2, [r7, #0]
 8013462:	429a      	cmp	r2, r3
 8013464:	d90c      	bls.n	8013480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013466:	4b65      	ldr	r3, [pc, #404]	; (80135fc <HAL_RCC_ClockConfig+0x1b8>)
 8013468:	683a      	ldr	r2, [r7, #0]
 801346a:	b2d2      	uxtb	r2, r2
 801346c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801346e:	4b63      	ldr	r3, [pc, #396]	; (80135fc <HAL_RCC_ClockConfig+0x1b8>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	f003 030f 	and.w	r3, r3, #15
 8013476:	683a      	ldr	r2, [r7, #0]
 8013478:	429a      	cmp	r2, r3
 801347a:	d001      	beq.n	8013480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801347c:	2301      	movs	r3, #1
 801347e:	e0b8      	b.n	80135f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	f003 0302 	and.w	r3, r3, #2
 8013488:	2b00      	cmp	r3, #0
 801348a:	d020      	beq.n	80134ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	f003 0304 	and.w	r3, r3, #4
 8013494:	2b00      	cmp	r3, #0
 8013496:	d005      	beq.n	80134a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013498:	4b59      	ldr	r3, [pc, #356]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 801349a:	689b      	ldr	r3, [r3, #8]
 801349c:	4a58      	ldr	r2, [pc, #352]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 801349e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80134a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	f003 0308 	and.w	r3, r3, #8
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d005      	beq.n	80134bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80134b0:	4b53      	ldr	r3, [pc, #332]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 80134b2:	689b      	ldr	r3, [r3, #8]
 80134b4:	4a52      	ldr	r2, [pc, #328]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 80134b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80134ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80134bc:	4b50      	ldr	r3, [pc, #320]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 80134be:	689b      	ldr	r3, [r3, #8]
 80134c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	689b      	ldr	r3, [r3, #8]
 80134c8:	494d      	ldr	r1, [pc, #308]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 80134ca:	4313      	orrs	r3, r2
 80134cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	f003 0301 	and.w	r3, r3, #1
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d044      	beq.n	8013564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	685b      	ldr	r3, [r3, #4]
 80134de:	2b01      	cmp	r3, #1
 80134e0:	d107      	bne.n	80134f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80134e2:	4b47      	ldr	r3, [pc, #284]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d119      	bne.n	8013522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80134ee:	2301      	movs	r3, #1
 80134f0:	e07f      	b.n	80135f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	685b      	ldr	r3, [r3, #4]
 80134f6:	2b02      	cmp	r3, #2
 80134f8:	d003      	beq.n	8013502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80134fe:	2b03      	cmp	r3, #3
 8013500:	d107      	bne.n	8013512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013502:	4b3f      	ldr	r3, [pc, #252]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801350a:	2b00      	cmp	r3, #0
 801350c:	d109      	bne.n	8013522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801350e:	2301      	movs	r3, #1
 8013510:	e06f      	b.n	80135f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013512:	4b3b      	ldr	r3, [pc, #236]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	f003 0302 	and.w	r3, r3, #2
 801351a:	2b00      	cmp	r3, #0
 801351c:	d101      	bne.n	8013522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801351e:	2301      	movs	r3, #1
 8013520:	e067      	b.n	80135f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013522:	4b37      	ldr	r3, [pc, #220]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 8013524:	689b      	ldr	r3, [r3, #8]
 8013526:	f023 0203 	bic.w	r2, r3, #3
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	685b      	ldr	r3, [r3, #4]
 801352e:	4934      	ldr	r1, [pc, #208]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 8013530:	4313      	orrs	r3, r2
 8013532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013534:	f7fe f804 	bl	8011540 <HAL_GetTick>
 8013538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801353a:	e00a      	b.n	8013552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801353c:	f7fe f800 	bl	8011540 <HAL_GetTick>
 8013540:	4602      	mov	r2, r0
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	1ad3      	subs	r3, r2, r3
 8013546:	f241 3288 	movw	r2, #5000	; 0x1388
 801354a:	4293      	cmp	r3, r2
 801354c:	d901      	bls.n	8013552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801354e:	2303      	movs	r3, #3
 8013550:	e04f      	b.n	80135f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013552:	4b2b      	ldr	r3, [pc, #172]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 8013554:	689b      	ldr	r3, [r3, #8]
 8013556:	f003 020c 	and.w	r2, r3, #12
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	009b      	lsls	r3, r3, #2
 8013560:	429a      	cmp	r2, r3
 8013562:	d1eb      	bne.n	801353c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013564:	4b25      	ldr	r3, [pc, #148]	; (80135fc <HAL_RCC_ClockConfig+0x1b8>)
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	f003 030f 	and.w	r3, r3, #15
 801356c:	683a      	ldr	r2, [r7, #0]
 801356e:	429a      	cmp	r2, r3
 8013570:	d20c      	bcs.n	801358c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013572:	4b22      	ldr	r3, [pc, #136]	; (80135fc <HAL_RCC_ClockConfig+0x1b8>)
 8013574:	683a      	ldr	r2, [r7, #0]
 8013576:	b2d2      	uxtb	r2, r2
 8013578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801357a:	4b20      	ldr	r3, [pc, #128]	; (80135fc <HAL_RCC_ClockConfig+0x1b8>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	f003 030f 	and.w	r3, r3, #15
 8013582:	683a      	ldr	r2, [r7, #0]
 8013584:	429a      	cmp	r2, r3
 8013586:	d001      	beq.n	801358c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013588:	2301      	movs	r3, #1
 801358a:	e032      	b.n	80135f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	f003 0304 	and.w	r3, r3, #4
 8013594:	2b00      	cmp	r3, #0
 8013596:	d008      	beq.n	80135aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013598:	4b19      	ldr	r3, [pc, #100]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 801359a:	689b      	ldr	r3, [r3, #8]
 801359c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	4916      	ldr	r1, [pc, #88]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 80135a6:	4313      	orrs	r3, r2
 80135a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	f003 0308 	and.w	r3, r3, #8
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d009      	beq.n	80135ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80135b6:	4b12      	ldr	r3, [pc, #72]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 80135b8:	689b      	ldr	r3, [r3, #8]
 80135ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	691b      	ldr	r3, [r3, #16]
 80135c2:	00db      	lsls	r3, r3, #3
 80135c4:	490e      	ldr	r1, [pc, #56]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 80135c6:	4313      	orrs	r3, r2
 80135c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80135ca:	f000 f821 	bl	8013610 <HAL_RCC_GetSysClockFreq>
 80135ce:	4601      	mov	r1, r0
 80135d0:	4b0b      	ldr	r3, [pc, #44]	; (8013600 <HAL_RCC_ClockConfig+0x1bc>)
 80135d2:	689b      	ldr	r3, [r3, #8]
 80135d4:	091b      	lsrs	r3, r3, #4
 80135d6:	f003 030f 	and.w	r3, r3, #15
 80135da:	4a0a      	ldr	r2, [pc, #40]	; (8013604 <HAL_RCC_ClockConfig+0x1c0>)
 80135dc:	5cd3      	ldrb	r3, [r2, r3]
 80135de:	fa21 f303 	lsr.w	r3, r1, r3
 80135e2:	4a09      	ldr	r2, [pc, #36]	; (8013608 <HAL_RCC_ClockConfig+0x1c4>)
 80135e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80135e6:	4b09      	ldr	r3, [pc, #36]	; (801360c <HAL_RCC_ClockConfig+0x1c8>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7fd ff64 	bl	80114b8 <HAL_InitTick>

  return HAL_OK;
 80135f0:	2300      	movs	r3, #0
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	3710      	adds	r7, #16
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}
 80135fa:	bf00      	nop
 80135fc:	40023c00 	.word	0x40023c00
 8013600:	40023800 	.word	0x40023800
 8013604:	0801b868 	.word	0x0801b868
 8013608:	20000020 	.word	0x20000020
 801360c:	20000024 	.word	0x20000024

08013610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013612:	b085      	sub	sp, #20
 8013614:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013616:	2300      	movs	r3, #0
 8013618:	607b      	str	r3, [r7, #4]
 801361a:	2300      	movs	r3, #0
 801361c:	60fb      	str	r3, [r7, #12]
 801361e:	2300      	movs	r3, #0
 8013620:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8013622:	2300      	movs	r3, #0
 8013624:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013626:	4b63      	ldr	r3, [pc, #396]	; (80137b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	f003 030c 	and.w	r3, r3, #12
 801362e:	2b04      	cmp	r3, #4
 8013630:	d007      	beq.n	8013642 <HAL_RCC_GetSysClockFreq+0x32>
 8013632:	2b08      	cmp	r3, #8
 8013634:	d008      	beq.n	8013648 <HAL_RCC_GetSysClockFreq+0x38>
 8013636:	2b00      	cmp	r3, #0
 8013638:	f040 80b4 	bne.w	80137a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801363c:	4b5e      	ldr	r3, [pc, #376]	; (80137b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801363e:	60bb      	str	r3, [r7, #8]
       break;
 8013640:	e0b3      	b.n	80137aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013642:	4b5e      	ldr	r3, [pc, #376]	; (80137bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8013644:	60bb      	str	r3, [r7, #8]
      break;
 8013646:	e0b0      	b.n	80137aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013648:	4b5a      	ldr	r3, [pc, #360]	; (80137b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801364a:	685b      	ldr	r3, [r3, #4]
 801364c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013650:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013652:	4b58      	ldr	r3, [pc, #352]	; (80137b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801365a:	2b00      	cmp	r3, #0
 801365c:	d04a      	beq.n	80136f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801365e:	4b55      	ldr	r3, [pc, #340]	; (80137b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013660:	685b      	ldr	r3, [r3, #4]
 8013662:	099b      	lsrs	r3, r3, #6
 8013664:	f04f 0400 	mov.w	r4, #0
 8013668:	f240 11ff 	movw	r1, #511	; 0x1ff
 801366c:	f04f 0200 	mov.w	r2, #0
 8013670:	ea03 0501 	and.w	r5, r3, r1
 8013674:	ea04 0602 	and.w	r6, r4, r2
 8013678:	4629      	mov	r1, r5
 801367a:	4632      	mov	r2, r6
 801367c:	f04f 0300 	mov.w	r3, #0
 8013680:	f04f 0400 	mov.w	r4, #0
 8013684:	0154      	lsls	r4, r2, #5
 8013686:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801368a:	014b      	lsls	r3, r1, #5
 801368c:	4619      	mov	r1, r3
 801368e:	4622      	mov	r2, r4
 8013690:	1b49      	subs	r1, r1, r5
 8013692:	eb62 0206 	sbc.w	r2, r2, r6
 8013696:	f04f 0300 	mov.w	r3, #0
 801369a:	f04f 0400 	mov.w	r4, #0
 801369e:	0194      	lsls	r4, r2, #6
 80136a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80136a4:	018b      	lsls	r3, r1, #6
 80136a6:	1a5b      	subs	r3, r3, r1
 80136a8:	eb64 0402 	sbc.w	r4, r4, r2
 80136ac:	f04f 0100 	mov.w	r1, #0
 80136b0:	f04f 0200 	mov.w	r2, #0
 80136b4:	00e2      	lsls	r2, r4, #3
 80136b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80136ba:	00d9      	lsls	r1, r3, #3
 80136bc:	460b      	mov	r3, r1
 80136be:	4614      	mov	r4, r2
 80136c0:	195b      	adds	r3, r3, r5
 80136c2:	eb44 0406 	adc.w	r4, r4, r6
 80136c6:	f04f 0100 	mov.w	r1, #0
 80136ca:	f04f 0200 	mov.w	r2, #0
 80136ce:	0262      	lsls	r2, r4, #9
 80136d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80136d4:	0259      	lsls	r1, r3, #9
 80136d6:	460b      	mov	r3, r1
 80136d8:	4614      	mov	r4, r2
 80136da:	4618      	mov	r0, r3
 80136dc:	4621      	mov	r1, r4
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f04f 0400 	mov.w	r4, #0
 80136e4:	461a      	mov	r2, r3
 80136e6:	4623      	mov	r3, r4
 80136e8:	f7f5 fa06 	bl	8008af8 <__aeabi_uldivmod>
 80136ec:	4603      	mov	r3, r0
 80136ee:	460c      	mov	r4, r1
 80136f0:	60fb      	str	r3, [r7, #12]
 80136f2:	e049      	b.n	8013788 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80136f4:	4b2f      	ldr	r3, [pc, #188]	; (80137b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80136f6:	685b      	ldr	r3, [r3, #4]
 80136f8:	099b      	lsrs	r3, r3, #6
 80136fa:	f04f 0400 	mov.w	r4, #0
 80136fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8013702:	f04f 0200 	mov.w	r2, #0
 8013706:	ea03 0501 	and.w	r5, r3, r1
 801370a:	ea04 0602 	and.w	r6, r4, r2
 801370e:	4629      	mov	r1, r5
 8013710:	4632      	mov	r2, r6
 8013712:	f04f 0300 	mov.w	r3, #0
 8013716:	f04f 0400 	mov.w	r4, #0
 801371a:	0154      	lsls	r4, r2, #5
 801371c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013720:	014b      	lsls	r3, r1, #5
 8013722:	4619      	mov	r1, r3
 8013724:	4622      	mov	r2, r4
 8013726:	1b49      	subs	r1, r1, r5
 8013728:	eb62 0206 	sbc.w	r2, r2, r6
 801372c:	f04f 0300 	mov.w	r3, #0
 8013730:	f04f 0400 	mov.w	r4, #0
 8013734:	0194      	lsls	r4, r2, #6
 8013736:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801373a:	018b      	lsls	r3, r1, #6
 801373c:	1a5b      	subs	r3, r3, r1
 801373e:	eb64 0402 	sbc.w	r4, r4, r2
 8013742:	f04f 0100 	mov.w	r1, #0
 8013746:	f04f 0200 	mov.w	r2, #0
 801374a:	00e2      	lsls	r2, r4, #3
 801374c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8013750:	00d9      	lsls	r1, r3, #3
 8013752:	460b      	mov	r3, r1
 8013754:	4614      	mov	r4, r2
 8013756:	195b      	adds	r3, r3, r5
 8013758:	eb44 0406 	adc.w	r4, r4, r6
 801375c:	f04f 0100 	mov.w	r1, #0
 8013760:	f04f 0200 	mov.w	r2, #0
 8013764:	02a2      	lsls	r2, r4, #10
 8013766:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801376a:	0299      	lsls	r1, r3, #10
 801376c:	460b      	mov	r3, r1
 801376e:	4614      	mov	r4, r2
 8013770:	4618      	mov	r0, r3
 8013772:	4621      	mov	r1, r4
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f04f 0400 	mov.w	r4, #0
 801377a:	461a      	mov	r2, r3
 801377c:	4623      	mov	r3, r4
 801377e:	f7f5 f9bb 	bl	8008af8 <__aeabi_uldivmod>
 8013782:	4603      	mov	r3, r0
 8013784:	460c      	mov	r4, r1
 8013786:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013788:	4b0a      	ldr	r3, [pc, #40]	; (80137b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801378a:	685b      	ldr	r3, [r3, #4]
 801378c:	0c1b      	lsrs	r3, r3, #16
 801378e:	f003 0303 	and.w	r3, r3, #3
 8013792:	3301      	adds	r3, #1
 8013794:	005b      	lsls	r3, r3, #1
 8013796:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8013798:	68fa      	ldr	r2, [r7, #12]
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80137a0:	60bb      	str	r3, [r7, #8]
      break;
 80137a2:	e002      	b.n	80137aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80137a4:	4b04      	ldr	r3, [pc, #16]	; (80137b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80137a6:	60bb      	str	r3, [r7, #8]
      break;
 80137a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80137aa:	68bb      	ldr	r3, [r7, #8]
}
 80137ac:	4618      	mov	r0, r3
 80137ae:	3714      	adds	r7, #20
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137b4:	40023800 	.word	0x40023800
 80137b8:	00f42400 	.word	0x00f42400
 80137bc:	007a1200 	.word	0x007a1200

080137c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80137c0:	b480      	push	{r7}
 80137c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80137c4:	4b03      	ldr	r3, [pc, #12]	; (80137d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80137c6:	681b      	ldr	r3, [r3, #0]
}
 80137c8:	4618      	mov	r0, r3
 80137ca:	46bd      	mov	sp, r7
 80137cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d0:	4770      	bx	lr
 80137d2:	bf00      	nop
 80137d4:	20000020 	.word	0x20000020

080137d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80137dc:	f7ff fff0 	bl	80137c0 <HAL_RCC_GetHCLKFreq>
 80137e0:	4601      	mov	r1, r0
 80137e2:	4b05      	ldr	r3, [pc, #20]	; (80137f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80137e4:	689b      	ldr	r3, [r3, #8]
 80137e6:	0a9b      	lsrs	r3, r3, #10
 80137e8:	f003 0307 	and.w	r3, r3, #7
 80137ec:	4a03      	ldr	r2, [pc, #12]	; (80137fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80137ee:	5cd3      	ldrb	r3, [r2, r3]
 80137f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80137f4:	4618      	mov	r0, r3
 80137f6:	bd80      	pop	{r7, pc}
 80137f8:	40023800 	.word	0x40023800
 80137fc:	0801b878 	.word	0x0801b878

08013800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013804:	f7ff ffdc 	bl	80137c0 <HAL_RCC_GetHCLKFreq>
 8013808:	4601      	mov	r1, r0
 801380a:	4b05      	ldr	r3, [pc, #20]	; (8013820 <HAL_RCC_GetPCLK2Freq+0x20>)
 801380c:	689b      	ldr	r3, [r3, #8]
 801380e:	0b5b      	lsrs	r3, r3, #13
 8013810:	f003 0307 	and.w	r3, r3, #7
 8013814:	4a03      	ldr	r2, [pc, #12]	; (8013824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013816:	5cd3      	ldrb	r3, [r2, r3]
 8013818:	fa21 f303 	lsr.w	r3, r1, r3
}
 801381c:	4618      	mov	r0, r3
 801381e:	bd80      	pop	{r7, pc}
 8013820:	40023800 	.word	0x40023800
 8013824:	0801b878 	.word	0x0801b878

08013828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d101      	bne.n	801383a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013836:	2301      	movs	r3, #1
 8013838:	e056      	b.n	80138e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	2200      	movs	r2, #0
 801383e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013846:	b2db      	uxtb	r3, r3
 8013848:	2b00      	cmp	r3, #0
 801384a:	d106      	bne.n	801385a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2200      	movs	r2, #0
 8013850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013854:	6878      	ldr	r0, [r7, #4]
 8013856:	f7fb ff65 	bl	800f724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	2202      	movs	r2, #2
 801385e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	681a      	ldr	r2, [r3, #0]
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013870:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	685a      	ldr	r2, [r3, #4]
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	689b      	ldr	r3, [r3, #8]
 801387a:	431a      	orrs	r2, r3
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	68db      	ldr	r3, [r3, #12]
 8013880:	431a      	orrs	r2, r3
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	691b      	ldr	r3, [r3, #16]
 8013886:	431a      	orrs	r2, r3
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	695b      	ldr	r3, [r3, #20]
 801388c:	431a      	orrs	r2, r3
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	699b      	ldr	r3, [r3, #24]
 8013892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013896:	431a      	orrs	r2, r3
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	69db      	ldr	r3, [r3, #28]
 801389c:	431a      	orrs	r2, r3
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	6a1b      	ldr	r3, [r3, #32]
 80138a2:	ea42 0103 	orr.w	r1, r2, r3
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	430a      	orrs	r2, r1
 80138b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	699b      	ldr	r3, [r3, #24]
 80138b6:	0c1b      	lsrs	r3, r3, #16
 80138b8:	f003 0104 	and.w	r1, r3, #4
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	430a      	orrs	r2, r1
 80138c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	69da      	ldr	r2, [r3, #28]
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80138d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	2200      	movs	r2, #0
 80138dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	2201      	movs	r2, #1
 80138e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80138e6:	2300      	movs	r3, #0
}
 80138e8:	4618      	mov	r0, r3
 80138ea:	3708      	adds	r7, #8
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bd80      	pop	{r7, pc}

080138f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b088      	sub	sp, #32
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	60b9      	str	r1, [r7, #8]
 80138fa:	603b      	str	r3, [r7, #0]
 80138fc:	4613      	mov	r3, r2
 80138fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013900:	2300      	movs	r3, #0
 8013902:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801390a:	2b01      	cmp	r3, #1
 801390c:	d101      	bne.n	8013912 <HAL_SPI_Transmit+0x22>
 801390e:	2302      	movs	r3, #2
 8013910:	e11e      	b.n	8013b50 <HAL_SPI_Transmit+0x260>
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	2201      	movs	r2, #1
 8013916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801391a:	f7fd fe11 	bl	8011540 <HAL_GetTick>
 801391e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8013920:	88fb      	ldrh	r3, [r7, #6]
 8013922:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801392a:	b2db      	uxtb	r3, r3
 801392c:	2b01      	cmp	r3, #1
 801392e:	d002      	beq.n	8013936 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8013930:	2302      	movs	r3, #2
 8013932:	77fb      	strb	r3, [r7, #31]
    goto error;
 8013934:	e103      	b.n	8013b3e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d002      	beq.n	8013942 <HAL_SPI_Transmit+0x52>
 801393c:	88fb      	ldrh	r3, [r7, #6]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d102      	bne.n	8013948 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8013942:	2301      	movs	r3, #1
 8013944:	77fb      	strb	r3, [r7, #31]
    goto error;
 8013946:	e0fa      	b.n	8013b3e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	2203      	movs	r2, #3
 801394c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	2200      	movs	r2, #0
 8013954:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	68ba      	ldr	r2, [r7, #8]
 801395a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	88fa      	ldrh	r2, [r7, #6]
 8013960:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	88fa      	ldrh	r2, [r7, #6]
 8013966:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	2200      	movs	r2, #0
 801396c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	2200      	movs	r2, #0
 8013972:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	2200      	movs	r2, #0
 8013978:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	2200      	movs	r2, #0
 801397e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	2200      	movs	r2, #0
 8013984:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	689b      	ldr	r3, [r3, #8]
 801398a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801398e:	d107      	bne.n	80139a0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	681a      	ldr	r2, [r3, #0]
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801399e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139aa:	2b40      	cmp	r3, #64	; 0x40
 80139ac:	d007      	beq.n	80139be <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	681a      	ldr	r2, [r3, #0]
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80139bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	68db      	ldr	r3, [r3, #12]
 80139c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80139c6:	d14b      	bne.n	8013a60 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	685b      	ldr	r3, [r3, #4]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d002      	beq.n	80139d6 <HAL_SPI_Transmit+0xe6>
 80139d0:	8afb      	ldrh	r3, [r7, #22]
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	d13e      	bne.n	8013a54 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139da:	881a      	ldrh	r2, [r3, #0]
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139e6:	1c9a      	adds	r2, r3, #2
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80139f0:	b29b      	uxth	r3, r3
 80139f2:	3b01      	subs	r3, #1
 80139f4:	b29a      	uxth	r2, r3
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80139fa:	e02b      	b.n	8013a54 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	689b      	ldr	r3, [r3, #8]
 8013a02:	f003 0302 	and.w	r3, r3, #2
 8013a06:	2b02      	cmp	r3, #2
 8013a08:	d112      	bne.n	8013a30 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a0e:	881a      	ldrh	r2, [r3, #0]
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a1a:	1c9a      	adds	r2, r3, #2
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a24:	b29b      	uxth	r3, r3
 8013a26:	3b01      	subs	r3, #1
 8013a28:	b29a      	uxth	r2, r3
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8013a2e:	e011      	b.n	8013a54 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013a30:	f7fd fd86 	bl	8011540 <HAL_GetTick>
 8013a34:	4602      	mov	r2, r0
 8013a36:	69bb      	ldr	r3, [r7, #24]
 8013a38:	1ad3      	subs	r3, r2, r3
 8013a3a:	683a      	ldr	r2, [r7, #0]
 8013a3c:	429a      	cmp	r2, r3
 8013a3e:	d803      	bhi.n	8013a48 <HAL_SPI_Transmit+0x158>
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a46:	d102      	bne.n	8013a4e <HAL_SPI_Transmit+0x15e>
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d102      	bne.n	8013a54 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8013a4e:	2303      	movs	r3, #3
 8013a50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013a52:	e074      	b.n	8013b3e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d1ce      	bne.n	80139fc <HAL_SPI_Transmit+0x10c>
 8013a5e:	e04c      	b.n	8013afa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d002      	beq.n	8013a6e <HAL_SPI_Transmit+0x17e>
 8013a68:	8afb      	ldrh	r3, [r7, #22]
 8013a6a:	2b01      	cmp	r3, #1
 8013a6c:	d140      	bne.n	8013af0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	330c      	adds	r3, #12
 8013a78:	7812      	ldrb	r2, [r2, #0]
 8013a7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a80:	1c5a      	adds	r2, r3, #1
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a8a:	b29b      	uxth	r3, r3
 8013a8c:	3b01      	subs	r3, #1
 8013a8e:	b29a      	uxth	r2, r3
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8013a94:	e02c      	b.n	8013af0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	689b      	ldr	r3, [r3, #8]
 8013a9c:	f003 0302 	and.w	r3, r3, #2
 8013aa0:	2b02      	cmp	r3, #2
 8013aa2:	d113      	bne.n	8013acc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	330c      	adds	r3, #12
 8013aae:	7812      	ldrb	r2, [r2, #0]
 8013ab0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ab6:	1c5a      	adds	r2, r3, #1
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013ac0:	b29b      	uxth	r3, r3
 8013ac2:	3b01      	subs	r3, #1
 8013ac4:	b29a      	uxth	r2, r3
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	86da      	strh	r2, [r3, #54]	; 0x36
 8013aca:	e011      	b.n	8013af0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013acc:	f7fd fd38 	bl	8011540 <HAL_GetTick>
 8013ad0:	4602      	mov	r2, r0
 8013ad2:	69bb      	ldr	r3, [r7, #24]
 8013ad4:	1ad3      	subs	r3, r2, r3
 8013ad6:	683a      	ldr	r2, [r7, #0]
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	d803      	bhi.n	8013ae4 <HAL_SPI_Transmit+0x1f4>
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ae2:	d102      	bne.n	8013aea <HAL_SPI_Transmit+0x1fa>
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d102      	bne.n	8013af0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8013aea:	2303      	movs	r3, #3
 8013aec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013aee:	e026      	b.n	8013b3e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013af4:	b29b      	uxth	r3, r3
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d1cd      	bne.n	8013a96 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013afa:	69ba      	ldr	r2, [r7, #24]
 8013afc:	6839      	ldr	r1, [r7, #0]
 8013afe:	68f8      	ldr	r0, [r7, #12]
 8013b00:	f000 fba4 	bl	801424c <SPI_EndRxTxTransaction>
 8013b04:	4603      	mov	r3, r0
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d002      	beq.n	8013b10 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	2220      	movs	r2, #32
 8013b0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	689b      	ldr	r3, [r3, #8]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d10a      	bne.n	8013b2e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013b18:	2300      	movs	r3, #0
 8013b1a:	613b      	str	r3, [r7, #16]
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	68db      	ldr	r3, [r3, #12]
 8013b22:	613b      	str	r3, [r7, #16]
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	689b      	ldr	r3, [r3, #8]
 8013b2a:	613b      	str	r3, [r7, #16]
 8013b2c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d002      	beq.n	8013b3c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8013b36:	2301      	movs	r3, #1
 8013b38:	77fb      	strb	r3, [r7, #31]
 8013b3a:	e000      	b.n	8013b3e <HAL_SPI_Transmit+0x24e>
  }

error:
 8013b3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	2201      	movs	r2, #1
 8013b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013b4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3720      	adds	r7, #32
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}

08013b58 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b088      	sub	sp, #32
 8013b5c:	af02      	add	r7, sp, #8
 8013b5e:	60f8      	str	r0, [r7, #12]
 8013b60:	60b9      	str	r1, [r7, #8]
 8013b62:	603b      	str	r3, [r7, #0]
 8013b64:	4613      	mov	r3, r2
 8013b66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013b68:	2300      	movs	r3, #0
 8013b6a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	685b      	ldr	r3, [r3, #4]
 8013b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013b74:	d112      	bne.n	8013b9c <HAL_SPI_Receive+0x44>
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	689b      	ldr	r3, [r3, #8]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d10e      	bne.n	8013b9c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	2204      	movs	r2, #4
 8013b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013b86:	88fa      	ldrh	r2, [r7, #6]
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	9300      	str	r3, [sp, #0]
 8013b8c:	4613      	mov	r3, r2
 8013b8e:	68ba      	ldr	r2, [r7, #8]
 8013b90:	68b9      	ldr	r1, [r7, #8]
 8013b92:	68f8      	ldr	r0, [r7, #12]
 8013b94:	f000 f8e9 	bl	8013d6a <HAL_SPI_TransmitReceive>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	e0e2      	b.n	8013d62 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013ba2:	2b01      	cmp	r3, #1
 8013ba4:	d101      	bne.n	8013baa <HAL_SPI_Receive+0x52>
 8013ba6:	2302      	movs	r3, #2
 8013ba8:	e0db      	b.n	8013d62 <HAL_SPI_Receive+0x20a>
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	2201      	movs	r2, #1
 8013bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013bb2:	f7fd fcc5 	bl	8011540 <HAL_GetTick>
 8013bb6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013bbe:	b2db      	uxtb	r3, r3
 8013bc0:	2b01      	cmp	r3, #1
 8013bc2:	d002      	beq.n	8013bca <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8013bc4:	2302      	movs	r3, #2
 8013bc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013bc8:	e0c2      	b.n	8013d50 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d002      	beq.n	8013bd6 <HAL_SPI_Receive+0x7e>
 8013bd0:	88fb      	ldrh	r3, [r7, #6]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d102      	bne.n	8013bdc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8013bd6:	2301      	movs	r3, #1
 8013bd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013bda:	e0b9      	b.n	8013d50 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	2204      	movs	r2, #4
 8013be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	2200      	movs	r2, #0
 8013be8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	68ba      	ldr	r2, [r7, #8]
 8013bee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	88fa      	ldrh	r2, [r7, #6]
 8013bf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	88fa      	ldrh	r2, [r7, #6]
 8013bfa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	2200      	movs	r2, #0
 8013c00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	2200      	movs	r2, #0
 8013c06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	2200      	movs	r2, #0
 8013c12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	2200      	movs	r2, #0
 8013c18:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	689b      	ldr	r3, [r3, #8]
 8013c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c22:	d107      	bne.n	8013c34 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	681a      	ldr	r2, [r3, #0]
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013c32:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c3e:	2b40      	cmp	r3, #64	; 0x40
 8013c40:	d007      	beq.n	8013c52 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	681a      	ldr	r2, [r3, #0]
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013c50:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	68db      	ldr	r3, [r3, #12]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d162      	bne.n	8013d20 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8013c5a:	e02e      	b.n	8013cba <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	689b      	ldr	r3, [r3, #8]
 8013c62:	f003 0301 	and.w	r3, r3, #1
 8013c66:	2b01      	cmp	r3, #1
 8013c68:	d115      	bne.n	8013c96 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	f103 020c 	add.w	r2, r3, #12
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c76:	7812      	ldrb	r2, [r2, #0]
 8013c78:	b2d2      	uxtb	r2, r2
 8013c7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c80:	1c5a      	adds	r2, r3, #1
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	3b01      	subs	r3, #1
 8013c8e:	b29a      	uxth	r2, r3
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013c94:	e011      	b.n	8013cba <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013c96:	f7fd fc53 	bl	8011540 <HAL_GetTick>
 8013c9a:	4602      	mov	r2, r0
 8013c9c:	693b      	ldr	r3, [r7, #16]
 8013c9e:	1ad3      	subs	r3, r2, r3
 8013ca0:	683a      	ldr	r2, [r7, #0]
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	d803      	bhi.n	8013cae <HAL_SPI_Receive+0x156>
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cac:	d102      	bne.n	8013cb4 <HAL_SPI_Receive+0x15c>
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d102      	bne.n	8013cba <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8013cb4:	2303      	movs	r3, #3
 8013cb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013cb8:	e04a      	b.n	8013d50 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013cbe:	b29b      	uxth	r3, r3
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d1cb      	bne.n	8013c5c <HAL_SPI_Receive+0x104>
 8013cc4:	e031      	b.n	8013d2a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	689b      	ldr	r3, [r3, #8]
 8013ccc:	f003 0301 	and.w	r3, r3, #1
 8013cd0:	2b01      	cmp	r3, #1
 8013cd2:	d113      	bne.n	8013cfc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	68da      	ldr	r2, [r3, #12]
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cde:	b292      	uxth	r2, r2
 8013ce0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ce6:	1c9a      	adds	r2, r3, #2
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013cf0:	b29b      	uxth	r3, r3
 8013cf2:	3b01      	subs	r3, #1
 8013cf4:	b29a      	uxth	r2, r3
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013cfa:	e011      	b.n	8013d20 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013cfc:	f7fd fc20 	bl	8011540 <HAL_GetTick>
 8013d00:	4602      	mov	r2, r0
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	1ad3      	subs	r3, r2, r3
 8013d06:	683a      	ldr	r2, [r7, #0]
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	d803      	bhi.n	8013d14 <HAL_SPI_Receive+0x1bc>
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d12:	d102      	bne.n	8013d1a <HAL_SPI_Receive+0x1c2>
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d102      	bne.n	8013d20 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8013d1a:	2303      	movs	r3, #3
 8013d1c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013d1e:	e017      	b.n	8013d50 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d24:	b29b      	uxth	r3, r3
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d1cd      	bne.n	8013cc6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013d2a:	693a      	ldr	r2, [r7, #16]
 8013d2c:	6839      	ldr	r1, [r7, #0]
 8013d2e:	68f8      	ldr	r0, [r7, #12]
 8013d30:	f000 fa27 	bl	8014182 <SPI_EndRxTransaction>
 8013d34:	4603      	mov	r3, r0
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d002      	beq.n	8013d40 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	2220      	movs	r2, #32
 8013d3e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d002      	beq.n	8013d4e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8013d48:	2301      	movs	r3, #1
 8013d4a:	75fb      	strb	r3, [r7, #23]
 8013d4c:	e000      	b.n	8013d50 <HAL_SPI_Receive+0x1f8>
  }

error :
 8013d4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2201      	movs	r2, #1
 8013d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3718      	adds	r7, #24
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013d6a:	b580      	push	{r7, lr}
 8013d6c:	b08c      	sub	sp, #48	; 0x30
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	60f8      	str	r0, [r7, #12]
 8013d72:	60b9      	str	r1, [r7, #8]
 8013d74:	607a      	str	r2, [r7, #4]
 8013d76:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013d78:	2301      	movs	r3, #1
 8013d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013d88:	2b01      	cmp	r3, #1
 8013d8a:	d101      	bne.n	8013d90 <HAL_SPI_TransmitReceive+0x26>
 8013d8c:	2302      	movs	r3, #2
 8013d8e:	e18a      	b.n	80140a6 <HAL_SPI_TransmitReceive+0x33c>
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	2201      	movs	r2, #1
 8013d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013d98:	f7fd fbd2 	bl	8011540 <HAL_GetTick>
 8013d9c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	685b      	ldr	r3, [r3, #4]
 8013dac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8013dae:	887b      	ldrh	r3, [r7, #2]
 8013db0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013db2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013db6:	2b01      	cmp	r3, #1
 8013db8:	d00f      	beq.n	8013dda <HAL_SPI_TransmitReceive+0x70>
 8013dba:	69fb      	ldr	r3, [r7, #28]
 8013dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013dc0:	d107      	bne.n	8013dd2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	689b      	ldr	r3, [r3, #8]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d103      	bne.n	8013dd2 <HAL_SPI_TransmitReceive+0x68>
 8013dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013dce:	2b04      	cmp	r3, #4
 8013dd0:	d003      	beq.n	8013dda <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013dd2:	2302      	movs	r3, #2
 8013dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013dd8:	e15b      	b.n	8014092 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d005      	beq.n	8013dec <HAL_SPI_TransmitReceive+0x82>
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d002      	beq.n	8013dec <HAL_SPI_TransmitReceive+0x82>
 8013de6:	887b      	ldrh	r3, [r7, #2]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d103      	bne.n	8013df4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013dec:	2301      	movs	r3, #1
 8013dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013df2:	e14e      	b.n	8014092 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013dfa:	b2db      	uxtb	r3, r3
 8013dfc:	2b04      	cmp	r3, #4
 8013dfe:	d003      	beq.n	8013e08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	2205      	movs	r2, #5
 8013e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	687a      	ldr	r2, [r7, #4]
 8013e12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	887a      	ldrh	r2, [r7, #2]
 8013e18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	887a      	ldrh	r2, [r7, #2]
 8013e1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	68ba      	ldr	r2, [r7, #8]
 8013e24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	887a      	ldrh	r2, [r7, #2]
 8013e2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	887a      	ldrh	r2, [r7, #2]
 8013e30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	2200      	movs	r2, #0
 8013e36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e48:	2b40      	cmp	r3, #64	; 0x40
 8013e4a:	d007      	beq.n	8013e5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	681a      	ldr	r2, [r3, #0]
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013e5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	68db      	ldr	r3, [r3, #12]
 8013e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013e64:	d178      	bne.n	8013f58 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d002      	beq.n	8013e74 <HAL_SPI_TransmitReceive+0x10a>
 8013e6e:	8b7b      	ldrh	r3, [r7, #26]
 8013e70:	2b01      	cmp	r3, #1
 8013e72:	d166      	bne.n	8013f42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e78:	881a      	ldrh	r2, [r3, #0]
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e84:	1c9a      	adds	r2, r3, #2
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013e8e:	b29b      	uxth	r3, r3
 8013e90:	3b01      	subs	r3, #1
 8013e92:	b29a      	uxth	r2, r3
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013e98:	e053      	b.n	8013f42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	689b      	ldr	r3, [r3, #8]
 8013ea0:	f003 0302 	and.w	r3, r3, #2
 8013ea4:	2b02      	cmp	r3, #2
 8013ea6:	d11b      	bne.n	8013ee0 <HAL_SPI_TransmitReceive+0x176>
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d016      	beq.n	8013ee0 <HAL_SPI_TransmitReceive+0x176>
 8013eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb4:	2b01      	cmp	r3, #1
 8013eb6:	d113      	bne.n	8013ee0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ebc:	881a      	ldrh	r2, [r3, #0]
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ec8:	1c9a      	adds	r2, r3, #2
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	3b01      	subs	r3, #1
 8013ed6:	b29a      	uxth	r2, r3
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013edc:	2300      	movs	r3, #0
 8013ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	689b      	ldr	r3, [r3, #8]
 8013ee6:	f003 0301 	and.w	r3, r3, #1
 8013eea:	2b01      	cmp	r3, #1
 8013eec:	d119      	bne.n	8013f22 <HAL_SPI_TransmitReceive+0x1b8>
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d014      	beq.n	8013f22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	68da      	ldr	r2, [r3, #12]
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f02:	b292      	uxth	r2, r2
 8013f04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f0a:	1c9a      	adds	r2, r3, #2
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013f14:	b29b      	uxth	r3, r3
 8013f16:	3b01      	subs	r3, #1
 8013f18:	b29a      	uxth	r2, r3
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013f1e:	2301      	movs	r3, #1
 8013f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013f22:	f7fd fb0d 	bl	8011540 <HAL_GetTick>
 8013f26:	4602      	mov	r2, r0
 8013f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f2a:	1ad3      	subs	r3, r2, r3
 8013f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d807      	bhi.n	8013f42 <HAL_SPI_TransmitReceive+0x1d8>
 8013f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f38:	d003      	beq.n	8013f42 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013f3a:	2303      	movs	r3, #3
 8013f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013f40:	e0a7      	b.n	8014092 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013f46:	b29b      	uxth	r3, r3
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d1a6      	bne.n	8013e9a <HAL_SPI_TransmitReceive+0x130>
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013f50:	b29b      	uxth	r3, r3
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d1a1      	bne.n	8013e9a <HAL_SPI_TransmitReceive+0x130>
 8013f56:	e07c      	b.n	8014052 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	685b      	ldr	r3, [r3, #4]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d002      	beq.n	8013f66 <HAL_SPI_TransmitReceive+0x1fc>
 8013f60:	8b7b      	ldrh	r3, [r7, #26]
 8013f62:	2b01      	cmp	r3, #1
 8013f64:	d16b      	bne.n	801403e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	330c      	adds	r3, #12
 8013f70:	7812      	ldrb	r2, [r2, #0]
 8013f72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f78:	1c5a      	adds	r2, r3, #1
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013f82:	b29b      	uxth	r3, r3
 8013f84:	3b01      	subs	r3, #1
 8013f86:	b29a      	uxth	r2, r3
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013f8c:	e057      	b.n	801403e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	689b      	ldr	r3, [r3, #8]
 8013f94:	f003 0302 	and.w	r3, r3, #2
 8013f98:	2b02      	cmp	r3, #2
 8013f9a:	d11c      	bne.n	8013fd6 <HAL_SPI_TransmitReceive+0x26c>
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013fa0:	b29b      	uxth	r3, r3
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d017      	beq.n	8013fd6 <HAL_SPI_TransmitReceive+0x26c>
 8013fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa8:	2b01      	cmp	r3, #1
 8013faa:	d114      	bne.n	8013fd6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	330c      	adds	r3, #12
 8013fb6:	7812      	ldrb	r2, [r2, #0]
 8013fb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fbe:	1c5a      	adds	r2, r3, #1
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013fc8:	b29b      	uxth	r3, r3
 8013fca:	3b01      	subs	r3, #1
 8013fcc:	b29a      	uxth	r2, r3
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	689b      	ldr	r3, [r3, #8]
 8013fdc:	f003 0301 	and.w	r3, r3, #1
 8013fe0:	2b01      	cmp	r3, #1
 8013fe2:	d119      	bne.n	8014018 <HAL_SPI_TransmitReceive+0x2ae>
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013fe8:	b29b      	uxth	r3, r3
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d014      	beq.n	8014018 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	68da      	ldr	r2, [r3, #12]
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ff8:	b2d2      	uxtb	r2, r2
 8013ffa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014000:	1c5a      	adds	r2, r3, #1
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801400a:	b29b      	uxth	r3, r3
 801400c:	3b01      	subs	r3, #1
 801400e:	b29a      	uxth	r2, r3
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014014:	2301      	movs	r3, #1
 8014016:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014018:	f7fd fa92 	bl	8011540 <HAL_GetTick>
 801401c:	4602      	mov	r2, r0
 801401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014020:	1ad3      	subs	r3, r2, r3
 8014022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014024:	429a      	cmp	r2, r3
 8014026:	d803      	bhi.n	8014030 <HAL_SPI_TransmitReceive+0x2c6>
 8014028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801402e:	d102      	bne.n	8014036 <HAL_SPI_TransmitReceive+0x2cc>
 8014030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014032:	2b00      	cmp	r3, #0
 8014034:	d103      	bne.n	801403e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8014036:	2303      	movs	r3, #3
 8014038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801403c:	e029      	b.n	8014092 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014042:	b29b      	uxth	r3, r3
 8014044:	2b00      	cmp	r3, #0
 8014046:	d1a2      	bne.n	8013f8e <HAL_SPI_TransmitReceive+0x224>
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801404c:	b29b      	uxth	r3, r3
 801404e:	2b00      	cmp	r3, #0
 8014050:	d19d      	bne.n	8013f8e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014054:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014056:	68f8      	ldr	r0, [r7, #12]
 8014058:	f000 f8f8 	bl	801424c <SPI_EndRxTxTransaction>
 801405c:	4603      	mov	r3, r0
 801405e:	2b00      	cmp	r3, #0
 8014060:	d006      	beq.n	8014070 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8014062:	2301      	movs	r3, #1
 8014064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	2220      	movs	r2, #32
 801406c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801406e:	e010      	b.n	8014092 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	689b      	ldr	r3, [r3, #8]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d10b      	bne.n	8014090 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014078:	2300      	movs	r3, #0
 801407a:	617b      	str	r3, [r7, #20]
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	68db      	ldr	r3, [r3, #12]
 8014082:	617b      	str	r3, [r7, #20]
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	689b      	ldr	r3, [r3, #8]
 801408a:	617b      	str	r3, [r7, #20]
 801408c:	697b      	ldr	r3, [r7, #20]
 801408e:	e000      	b.n	8014092 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8014090:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	2201      	movs	r2, #1
 8014096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	2200      	movs	r2, #0
 801409e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80140a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3730      	adds	r7, #48	; 0x30
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}

080140ae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80140ae:	b580      	push	{r7, lr}
 80140b0:	b084      	sub	sp, #16
 80140b2:	af00      	add	r7, sp, #0
 80140b4:	60f8      	str	r0, [r7, #12]
 80140b6:	60b9      	str	r1, [r7, #8]
 80140b8:	603b      	str	r3, [r7, #0]
 80140ba:	4613      	mov	r3, r2
 80140bc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80140be:	e04c      	b.n	801415a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80140c0:	683b      	ldr	r3, [r7, #0]
 80140c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140c6:	d048      	beq.n	801415a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80140c8:	f7fd fa3a 	bl	8011540 <HAL_GetTick>
 80140cc:	4602      	mov	r2, r0
 80140ce:	69bb      	ldr	r3, [r7, #24]
 80140d0:	1ad3      	subs	r3, r2, r3
 80140d2:	683a      	ldr	r2, [r7, #0]
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d902      	bls.n	80140de <SPI_WaitFlagStateUntilTimeout+0x30>
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d13d      	bne.n	801415a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	685a      	ldr	r2, [r3, #4]
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80140ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	685b      	ldr	r3, [r3, #4]
 80140f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80140f6:	d111      	bne.n	801411c <SPI_WaitFlagStateUntilTimeout+0x6e>
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	689b      	ldr	r3, [r3, #8]
 80140fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014100:	d004      	beq.n	801410c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	689b      	ldr	r3, [r3, #8]
 8014106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801410a:	d107      	bne.n	801411c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	681a      	ldr	r2, [r3, #0]
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801411a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014124:	d10f      	bne.n	8014146 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	681a      	ldr	r2, [r3, #0]
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014134:	601a      	str	r2, [r3, #0]
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	681a      	ldr	r2, [r3, #0]
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	2201      	movs	r2, #1
 801414a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	2200      	movs	r2, #0
 8014152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8014156:	2303      	movs	r3, #3
 8014158:	e00f      	b.n	801417a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	689a      	ldr	r2, [r3, #8]
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	4013      	ands	r3, r2
 8014164:	68ba      	ldr	r2, [r7, #8]
 8014166:	429a      	cmp	r2, r3
 8014168:	bf0c      	ite	eq
 801416a:	2301      	moveq	r3, #1
 801416c:	2300      	movne	r3, #0
 801416e:	b2db      	uxtb	r3, r3
 8014170:	461a      	mov	r2, r3
 8014172:	79fb      	ldrb	r3, [r7, #7]
 8014174:	429a      	cmp	r2, r3
 8014176:	d1a3      	bne.n	80140c0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8014178:	2300      	movs	r3, #0
}
 801417a:	4618      	mov	r0, r3
 801417c:	3710      	adds	r7, #16
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}

08014182 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8014182:	b580      	push	{r7, lr}
 8014184:	b086      	sub	sp, #24
 8014186:	af02      	add	r7, sp, #8
 8014188:	60f8      	str	r0, [r7, #12]
 801418a:	60b9      	str	r1, [r7, #8]
 801418c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	685b      	ldr	r3, [r3, #4]
 8014192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014196:	d111      	bne.n	80141bc <SPI_EndRxTransaction+0x3a>
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	689b      	ldr	r3, [r3, #8]
 801419c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80141a0:	d004      	beq.n	80141ac <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	689b      	ldr	r3, [r3, #8]
 80141a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80141aa:	d107      	bne.n	80141bc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	681a      	ldr	r2, [r3, #0]
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80141ba:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	685b      	ldr	r3, [r3, #4]
 80141c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80141c4:	d12a      	bne.n	801421c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	689b      	ldr	r3, [r3, #8]
 80141ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80141ce:	d012      	beq.n	80141f6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	9300      	str	r3, [sp, #0]
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	2200      	movs	r2, #0
 80141d8:	2180      	movs	r1, #128	; 0x80
 80141da:	68f8      	ldr	r0, [r7, #12]
 80141dc:	f7ff ff67 	bl	80140ae <SPI_WaitFlagStateUntilTimeout>
 80141e0:	4603      	mov	r3, r0
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d02d      	beq.n	8014242 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141ea:	f043 0220 	orr.w	r2, r3, #32
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80141f2:	2303      	movs	r3, #3
 80141f4:	e026      	b.n	8014244 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	9300      	str	r3, [sp, #0]
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	2200      	movs	r2, #0
 80141fe:	2101      	movs	r1, #1
 8014200:	68f8      	ldr	r0, [r7, #12]
 8014202:	f7ff ff54 	bl	80140ae <SPI_WaitFlagStateUntilTimeout>
 8014206:	4603      	mov	r3, r0
 8014208:	2b00      	cmp	r3, #0
 801420a:	d01a      	beq.n	8014242 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014210:	f043 0220 	orr.w	r2, r3, #32
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014218:	2303      	movs	r3, #3
 801421a:	e013      	b.n	8014244 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	9300      	str	r3, [sp, #0]
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	2200      	movs	r2, #0
 8014224:	2101      	movs	r1, #1
 8014226:	68f8      	ldr	r0, [r7, #12]
 8014228:	f7ff ff41 	bl	80140ae <SPI_WaitFlagStateUntilTimeout>
 801422c:	4603      	mov	r3, r0
 801422e:	2b00      	cmp	r3, #0
 8014230:	d007      	beq.n	8014242 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014236:	f043 0220 	orr.w	r2, r3, #32
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801423e:	2303      	movs	r3, #3
 8014240:	e000      	b.n	8014244 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8014242:	2300      	movs	r3, #0
}
 8014244:	4618      	mov	r0, r3
 8014246:	3710      	adds	r7, #16
 8014248:	46bd      	mov	sp, r7
 801424a:	bd80      	pop	{r7, pc}

0801424c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b088      	sub	sp, #32
 8014250:	af02      	add	r7, sp, #8
 8014252:	60f8      	str	r0, [r7, #12]
 8014254:	60b9      	str	r1, [r7, #8]
 8014256:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8014258:	4b1b      	ldr	r3, [pc, #108]	; (80142c8 <SPI_EndRxTxTransaction+0x7c>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	4a1b      	ldr	r2, [pc, #108]	; (80142cc <SPI_EndRxTxTransaction+0x80>)
 801425e:	fba2 2303 	umull	r2, r3, r2, r3
 8014262:	0d5b      	lsrs	r3, r3, #21
 8014264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014268:	fb02 f303 	mul.w	r3, r2, r3
 801426c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	685b      	ldr	r3, [r3, #4]
 8014272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014276:	d112      	bne.n	801429e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	9300      	str	r3, [sp, #0]
 801427c:	68bb      	ldr	r3, [r7, #8]
 801427e:	2200      	movs	r2, #0
 8014280:	2180      	movs	r1, #128	; 0x80
 8014282:	68f8      	ldr	r0, [r7, #12]
 8014284:	f7ff ff13 	bl	80140ae <SPI_WaitFlagStateUntilTimeout>
 8014288:	4603      	mov	r3, r0
 801428a:	2b00      	cmp	r3, #0
 801428c:	d016      	beq.n	80142bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014292:	f043 0220 	orr.w	r2, r3, #32
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801429a:	2303      	movs	r3, #3
 801429c:	e00f      	b.n	80142be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801429e:	697b      	ldr	r3, [r7, #20]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d00a      	beq.n	80142ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80142a4:	697b      	ldr	r3, [r7, #20]
 80142a6:	3b01      	subs	r3, #1
 80142a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	689b      	ldr	r3, [r3, #8]
 80142b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80142b4:	2b80      	cmp	r3, #128	; 0x80
 80142b6:	d0f2      	beq.n	801429e <SPI_EndRxTxTransaction+0x52>
 80142b8:	e000      	b.n	80142bc <SPI_EndRxTxTransaction+0x70>
        break;
 80142ba:	bf00      	nop
  }

  return HAL_OK;
 80142bc:	2300      	movs	r3, #0
}
 80142be:	4618      	mov	r0, r3
 80142c0:	3718      	adds	r7, #24
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}
 80142c6:	bf00      	nop
 80142c8:	20000020 	.word	0x20000020
 80142cc:	165e9f81 	.word	0x165e9f81

080142d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b082      	sub	sp, #8
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d101      	bne.n	80142e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80142de:	2301      	movs	r3, #1
 80142e0:	e01d      	b.n	801431e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80142e8:	b2db      	uxtb	r3, r3
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d106      	bne.n	80142fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2200      	movs	r2, #0
 80142f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80142f6:	6878      	ldr	r0, [r7, #4]
 80142f8:	f7fb fa5c 	bl	800f7b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2202      	movs	r2, #2
 8014300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681a      	ldr	r2, [r3, #0]
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	3304      	adds	r3, #4
 801430c:	4619      	mov	r1, r3
 801430e:	4610      	mov	r0, r2
 8014310:	f000 fe96 	bl	8015040 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	2201      	movs	r2, #1
 8014318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801431c:	2300      	movs	r3, #0
}
 801431e:	4618      	mov	r0, r3
 8014320:	3708      	adds	r7, #8
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}

08014326 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014326:	b480      	push	{r7}
 8014328:	b085      	sub	sp, #20
 801432a:	af00      	add	r7, sp, #0
 801432c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	68da      	ldr	r2, [r3, #12]
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	f042 0201 	orr.w	r2, r2, #1
 801433c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	689b      	ldr	r3, [r3, #8]
 8014344:	f003 0307 	and.w	r3, r3, #7
 8014348:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	2b06      	cmp	r3, #6
 801434e:	d007      	beq.n	8014360 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	681a      	ldr	r2, [r3, #0]
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	f042 0201 	orr.w	r2, r2, #1
 801435e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014360:	2300      	movs	r3, #0
}
 8014362:	4618      	mov	r0, r3
 8014364:	3714      	adds	r7, #20
 8014366:	46bd      	mov	sp, r7
 8014368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436c:	4770      	bx	lr

0801436e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801436e:	b480      	push	{r7}
 8014370:	b083      	sub	sp, #12
 8014372:	af00      	add	r7, sp, #0
 8014374:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	68da      	ldr	r2, [r3, #12]
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	f022 0201 	bic.w	r2, r2, #1
 8014384:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	6a1a      	ldr	r2, [r3, #32]
 801438c:	f241 1311 	movw	r3, #4369	; 0x1111
 8014390:	4013      	ands	r3, r2
 8014392:	2b00      	cmp	r3, #0
 8014394:	d10f      	bne.n	80143b6 <HAL_TIM_Base_Stop_IT+0x48>
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	6a1a      	ldr	r2, [r3, #32]
 801439c:	f240 4344 	movw	r3, #1092	; 0x444
 80143a0:	4013      	ands	r3, r2
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d107      	bne.n	80143b6 <HAL_TIM_Base_Stop_IT+0x48>
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	681a      	ldr	r2, [r3, #0]
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	f022 0201 	bic.w	r2, r2, #1
 80143b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80143b6:	2300      	movs	r3, #0
}
 80143b8:	4618      	mov	r0, r3
 80143ba:	370c      	adds	r7, #12
 80143bc:	46bd      	mov	sp, r7
 80143be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c2:	4770      	bx	lr

080143c4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b082      	sub	sp, #8
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d101      	bne.n	80143d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80143d2:	2301      	movs	r3, #1
 80143d4:	e01d      	b.n	8014412 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80143dc:	b2db      	uxtb	r3, r3
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d106      	bne.n	80143f0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	2200      	movs	r2, #0
 80143e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f000 f815 	bl	801441a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2202      	movs	r2, #2
 80143f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681a      	ldr	r2, [r3, #0]
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	3304      	adds	r3, #4
 8014400:	4619      	mov	r1, r3
 8014402:	4610      	mov	r0, r2
 8014404:	f000 fe1c 	bl	8015040 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2201      	movs	r2, #1
 801440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014410:	2300      	movs	r3, #0
}
 8014412:	4618      	mov	r0, r3
 8014414:	3708      	adds	r7, #8
 8014416:	46bd      	mov	sp, r7
 8014418:	bd80      	pop	{r7, pc}

0801441a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 801441a:	b480      	push	{r7}
 801441c:	b083      	sub	sp, #12
 801441e:	af00      	add	r7, sp, #0
 8014420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8014422:	bf00      	nop
 8014424:	370c      	adds	r7, #12
 8014426:	46bd      	mov	sp, r7
 8014428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442c:	4770      	bx	lr
	...

08014430 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b084      	sub	sp, #16
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	2b0c      	cmp	r3, #12
 801443e:	d841      	bhi.n	80144c4 <HAL_TIM_OC_Start_IT+0x94>
 8014440:	a201      	add	r2, pc, #4	; (adr r2, 8014448 <HAL_TIM_OC_Start_IT+0x18>)
 8014442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014446:	bf00      	nop
 8014448:	0801447d 	.word	0x0801447d
 801444c:	080144c5 	.word	0x080144c5
 8014450:	080144c5 	.word	0x080144c5
 8014454:	080144c5 	.word	0x080144c5
 8014458:	0801448f 	.word	0x0801448f
 801445c:	080144c5 	.word	0x080144c5
 8014460:	080144c5 	.word	0x080144c5
 8014464:	080144c5 	.word	0x080144c5
 8014468:	080144a1 	.word	0x080144a1
 801446c:	080144c5 	.word	0x080144c5
 8014470:	080144c5 	.word	0x080144c5
 8014474:	080144c5 	.word	0x080144c5
 8014478:	080144b3 	.word	0x080144b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	68da      	ldr	r2, [r3, #12]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	f042 0202 	orr.w	r2, r2, #2
 801448a:	60da      	str	r2, [r3, #12]
      break;
 801448c:	e01b      	b.n	80144c6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	68da      	ldr	r2, [r3, #12]
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	f042 0204 	orr.w	r2, r2, #4
 801449c:	60da      	str	r2, [r3, #12]
      break;
 801449e:	e012      	b.n	80144c6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	68da      	ldr	r2, [r3, #12]
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	f042 0208 	orr.w	r2, r2, #8
 80144ae:	60da      	str	r2, [r3, #12]
      break;
 80144b0:	e009      	b.n	80144c6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	68da      	ldr	r2, [r3, #12]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	f042 0210 	orr.w	r2, r2, #16
 80144c0:	60da      	str	r2, [r3, #12]
      break;
 80144c2:	e000      	b.n	80144c6 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80144c4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	2201      	movs	r2, #1
 80144cc:	6839      	ldr	r1, [r7, #0]
 80144ce:	4618      	mov	r0, r3
 80144d0:	f001 f8a0 	bl	8015614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	4a15      	ldr	r2, [pc, #84]	; (8014530 <HAL_TIM_OC_Start_IT+0x100>)
 80144da:	4293      	cmp	r3, r2
 80144dc:	d004      	beq.n	80144e8 <HAL_TIM_OC_Start_IT+0xb8>
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	4a14      	ldr	r2, [pc, #80]	; (8014534 <HAL_TIM_OC_Start_IT+0x104>)
 80144e4:	4293      	cmp	r3, r2
 80144e6:	d101      	bne.n	80144ec <HAL_TIM_OC_Start_IT+0xbc>
 80144e8:	2301      	movs	r3, #1
 80144ea:	e000      	b.n	80144ee <HAL_TIM_OC_Start_IT+0xbe>
 80144ec:	2300      	movs	r3, #0
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d007      	beq.n	8014502 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014500:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	689b      	ldr	r3, [r3, #8]
 8014508:	f003 0307 	and.w	r3, r3, #7
 801450c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	2b06      	cmp	r3, #6
 8014512:	d007      	beq.n	8014524 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	681a      	ldr	r2, [r3, #0]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	f042 0201 	orr.w	r2, r2, #1
 8014522:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014524:	2300      	movs	r3, #0
}
 8014526:	4618      	mov	r0, r3
 8014528:	3710      	adds	r7, #16
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}
 801452e:	bf00      	nop
 8014530:	40010000 	.word	0x40010000
 8014534:	40010400 	.word	0x40010400

08014538 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8014542:	683b      	ldr	r3, [r7, #0]
 8014544:	2b0c      	cmp	r3, #12
 8014546:	d841      	bhi.n	80145cc <HAL_TIM_OC_Stop_IT+0x94>
 8014548:	a201      	add	r2, pc, #4	; (adr r2, 8014550 <HAL_TIM_OC_Stop_IT+0x18>)
 801454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801454e:	bf00      	nop
 8014550:	08014585 	.word	0x08014585
 8014554:	080145cd 	.word	0x080145cd
 8014558:	080145cd 	.word	0x080145cd
 801455c:	080145cd 	.word	0x080145cd
 8014560:	08014597 	.word	0x08014597
 8014564:	080145cd 	.word	0x080145cd
 8014568:	080145cd 	.word	0x080145cd
 801456c:	080145cd 	.word	0x080145cd
 8014570:	080145a9 	.word	0x080145a9
 8014574:	080145cd 	.word	0x080145cd
 8014578:	080145cd 	.word	0x080145cd
 801457c:	080145cd 	.word	0x080145cd
 8014580:	080145bb 	.word	0x080145bb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	68da      	ldr	r2, [r3, #12]
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	f022 0202 	bic.w	r2, r2, #2
 8014592:	60da      	str	r2, [r3, #12]
      break;
 8014594:	e01b      	b.n	80145ce <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	68da      	ldr	r2, [r3, #12]
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	f022 0204 	bic.w	r2, r2, #4
 80145a4:	60da      	str	r2, [r3, #12]
      break;
 80145a6:	e012      	b.n	80145ce <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	68da      	ldr	r2, [r3, #12]
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	f022 0208 	bic.w	r2, r2, #8
 80145b6:	60da      	str	r2, [r3, #12]
      break;
 80145b8:	e009      	b.n	80145ce <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	68da      	ldr	r2, [r3, #12]
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	f022 0210 	bic.w	r2, r2, #16
 80145c8:	60da      	str	r2, [r3, #12]
      break;
 80145ca:	e000      	b.n	80145ce <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 80145cc:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	2200      	movs	r2, #0
 80145d4:	6839      	ldr	r1, [r7, #0]
 80145d6:	4618      	mov	r0, r3
 80145d8:	f001 f81c 	bl	8015614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	4a20      	ldr	r2, [pc, #128]	; (8014664 <HAL_TIM_OC_Stop_IT+0x12c>)
 80145e2:	4293      	cmp	r3, r2
 80145e4:	d004      	beq.n	80145f0 <HAL_TIM_OC_Stop_IT+0xb8>
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	4a1f      	ldr	r2, [pc, #124]	; (8014668 <HAL_TIM_OC_Stop_IT+0x130>)
 80145ec:	4293      	cmp	r3, r2
 80145ee:	d101      	bne.n	80145f4 <HAL_TIM_OC_Stop_IT+0xbc>
 80145f0:	2301      	movs	r3, #1
 80145f2:	e000      	b.n	80145f6 <HAL_TIM_OC_Stop_IT+0xbe>
 80145f4:	2300      	movs	r3, #0
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d017      	beq.n	801462a <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	6a1a      	ldr	r2, [r3, #32]
 8014600:	f241 1311 	movw	r3, #4369	; 0x1111
 8014604:	4013      	ands	r3, r2
 8014606:	2b00      	cmp	r3, #0
 8014608:	d10f      	bne.n	801462a <HAL_TIM_OC_Stop_IT+0xf2>
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	6a1a      	ldr	r2, [r3, #32]
 8014610:	f240 4344 	movw	r3, #1092	; 0x444
 8014614:	4013      	ands	r3, r2
 8014616:	2b00      	cmp	r3, #0
 8014618:	d107      	bne.n	801462a <HAL_TIM_OC_Stop_IT+0xf2>
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014628:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	6a1a      	ldr	r2, [r3, #32]
 8014630:	f241 1311 	movw	r3, #4369	; 0x1111
 8014634:	4013      	ands	r3, r2
 8014636:	2b00      	cmp	r3, #0
 8014638:	d10f      	bne.n	801465a <HAL_TIM_OC_Stop_IT+0x122>
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	6a1a      	ldr	r2, [r3, #32]
 8014640:	f240 4344 	movw	r3, #1092	; 0x444
 8014644:	4013      	ands	r3, r2
 8014646:	2b00      	cmp	r3, #0
 8014648:	d107      	bne.n	801465a <HAL_TIM_OC_Stop_IT+0x122>
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	681a      	ldr	r2, [r3, #0]
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	f022 0201 	bic.w	r2, r2, #1
 8014658:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801465a:	2300      	movs	r3, #0
}
 801465c:	4618      	mov	r0, r3
 801465e:	3708      	adds	r7, #8
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}
 8014664:	40010000 	.word	0x40010000
 8014668:	40010400 	.word	0x40010400

0801466c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d101      	bne.n	801467e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801467a:	2301      	movs	r3, #1
 801467c:	e01d      	b.n	80146ba <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014684:	b2db      	uxtb	r3, r3
 8014686:	2b00      	cmp	r3, #0
 8014688:	d106      	bne.n	8014698 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	2200      	movs	r2, #0
 801468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014692:	6878      	ldr	r0, [r7, #4]
 8014694:	f000 f815 	bl	80146c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	2202      	movs	r2, #2
 801469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	681a      	ldr	r2, [r3, #0]
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	3304      	adds	r3, #4
 80146a8:	4619      	mov	r1, r3
 80146aa:	4610      	mov	r0, r2
 80146ac:	f000 fcc8 	bl	8015040 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2201      	movs	r2, #1
 80146b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80146b8:	2300      	movs	r3, #0
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3708      	adds	r7, #8
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}

080146c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80146c2:	b480      	push	{r7}
 80146c4:	b083      	sub	sp, #12
 80146c6:	af00      	add	r7, sp, #0
 80146c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80146ca:	bf00      	nop
 80146cc:	370c      	adds	r7, #12
 80146ce:	46bd      	mov	sp, r7
 80146d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d4:	4770      	bx	lr
	...

080146d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b084      	sub	sp, #16
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
 80146e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	2201      	movs	r2, #1
 80146e8:	6839      	ldr	r1, [r7, #0]
 80146ea:	4618      	mov	r0, r3
 80146ec:	f000 ff92 	bl	8015614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	4a15      	ldr	r2, [pc, #84]	; (801474c <HAL_TIM_PWM_Start+0x74>)
 80146f6:	4293      	cmp	r3, r2
 80146f8:	d004      	beq.n	8014704 <HAL_TIM_PWM_Start+0x2c>
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	4a14      	ldr	r2, [pc, #80]	; (8014750 <HAL_TIM_PWM_Start+0x78>)
 8014700:	4293      	cmp	r3, r2
 8014702:	d101      	bne.n	8014708 <HAL_TIM_PWM_Start+0x30>
 8014704:	2301      	movs	r3, #1
 8014706:	e000      	b.n	801470a <HAL_TIM_PWM_Start+0x32>
 8014708:	2300      	movs	r3, #0
 801470a:	2b00      	cmp	r3, #0
 801470c:	d007      	beq.n	801471e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801471c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	689b      	ldr	r3, [r3, #8]
 8014724:	f003 0307 	and.w	r3, r3, #7
 8014728:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	2b06      	cmp	r3, #6
 801472e:	d007      	beq.n	8014740 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	681a      	ldr	r2, [r3, #0]
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	f042 0201 	orr.w	r2, r2, #1
 801473e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014740:	2300      	movs	r3, #0
}
 8014742:	4618      	mov	r0, r3
 8014744:	3710      	adds	r7, #16
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}
 801474a:	bf00      	nop
 801474c:	40010000 	.word	0x40010000
 8014750:	40010400 	.word	0x40010400

08014754 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b082      	sub	sp, #8
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	2200      	movs	r2, #0
 8014764:	6839      	ldr	r1, [r7, #0]
 8014766:	4618      	mov	r0, r3
 8014768:	f000 ff54 	bl	8015614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	4a22      	ldr	r2, [pc, #136]	; (80147fc <HAL_TIM_PWM_Stop+0xa8>)
 8014772:	4293      	cmp	r3, r2
 8014774:	d004      	beq.n	8014780 <HAL_TIM_PWM_Stop+0x2c>
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	4a21      	ldr	r2, [pc, #132]	; (8014800 <HAL_TIM_PWM_Stop+0xac>)
 801477c:	4293      	cmp	r3, r2
 801477e:	d101      	bne.n	8014784 <HAL_TIM_PWM_Stop+0x30>
 8014780:	2301      	movs	r3, #1
 8014782:	e000      	b.n	8014786 <HAL_TIM_PWM_Stop+0x32>
 8014784:	2300      	movs	r3, #0
 8014786:	2b00      	cmp	r3, #0
 8014788:	d017      	beq.n	80147ba <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	6a1a      	ldr	r2, [r3, #32]
 8014790:	f241 1311 	movw	r3, #4369	; 0x1111
 8014794:	4013      	ands	r3, r2
 8014796:	2b00      	cmp	r3, #0
 8014798:	d10f      	bne.n	80147ba <HAL_TIM_PWM_Stop+0x66>
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	6a1a      	ldr	r2, [r3, #32]
 80147a0:	f240 4344 	movw	r3, #1092	; 0x444
 80147a4:	4013      	ands	r3, r2
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d107      	bne.n	80147ba <HAL_TIM_PWM_Stop+0x66>
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80147b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	6a1a      	ldr	r2, [r3, #32]
 80147c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80147c4:	4013      	ands	r3, r2
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d10f      	bne.n	80147ea <HAL_TIM_PWM_Stop+0x96>
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	6a1a      	ldr	r2, [r3, #32]
 80147d0:	f240 4344 	movw	r3, #1092	; 0x444
 80147d4:	4013      	ands	r3, r2
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d107      	bne.n	80147ea <HAL_TIM_PWM_Stop+0x96>
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	681a      	ldr	r2, [r3, #0]
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	f022 0201 	bic.w	r2, r2, #1
 80147e8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	2201      	movs	r2, #1
 80147ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80147f2:	2300      	movs	r3, #0
}
 80147f4:	4618      	mov	r0, r3
 80147f6:	3708      	adds	r7, #8
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}
 80147fc:	40010000 	.word	0x40010000
 8014800:	40010400 	.word	0x40010400

08014804 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b086      	sub	sp, #24
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
 801480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d101      	bne.n	8014818 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8014814:	2301      	movs	r3, #1
 8014816:	e083      	b.n	8014920 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801481e:	b2db      	uxtb	r3, r3
 8014820:	2b00      	cmp	r3, #0
 8014822:	d106      	bne.n	8014832 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	2200      	movs	r2, #0
 8014828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	f7fb f831 	bl	800f894 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	2202      	movs	r2, #2
 8014836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	689b      	ldr	r3, [r3, #8]
 8014840:	687a      	ldr	r2, [r7, #4]
 8014842:	6812      	ldr	r2, [r2, #0]
 8014844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014848:	f023 0307 	bic.w	r3, r3, #7
 801484c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	681a      	ldr	r2, [r3, #0]
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	3304      	adds	r3, #4
 8014856:	4619      	mov	r1, r3
 8014858:	4610      	mov	r0, r2
 801485a:	f000 fbf1 	bl	8015040 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	689b      	ldr	r3, [r3, #8]
 8014864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	699b      	ldr	r3, [r3, #24]
 801486c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	6a1b      	ldr	r3, [r3, #32]
 8014874:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	697a      	ldr	r2, [r7, #20]
 801487c:	4313      	orrs	r3, r2
 801487e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014886:	f023 0303 	bic.w	r3, r3, #3
 801488a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801488c:	683b      	ldr	r3, [r7, #0]
 801488e:	689a      	ldr	r2, [r3, #8]
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	699b      	ldr	r3, [r3, #24]
 8014894:	021b      	lsls	r3, r3, #8
 8014896:	4313      	orrs	r3, r2
 8014898:	693a      	ldr	r2, [r7, #16]
 801489a:	4313      	orrs	r3, r2
 801489c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80148a4:	f023 030c 	bic.w	r3, r3, #12
 80148a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80148aa:	693b      	ldr	r3, [r7, #16]
 80148ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80148b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80148b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	68da      	ldr	r2, [r3, #12]
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	69db      	ldr	r3, [r3, #28]
 80148be:	021b      	lsls	r3, r3, #8
 80148c0:	4313      	orrs	r3, r2
 80148c2:	693a      	ldr	r2, [r7, #16]
 80148c4:	4313      	orrs	r3, r2
 80148c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	691b      	ldr	r3, [r3, #16]
 80148cc:	011a      	lsls	r2, r3, #4
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	6a1b      	ldr	r3, [r3, #32]
 80148d2:	031b      	lsls	r3, r3, #12
 80148d4:	4313      	orrs	r3, r2
 80148d6:	693a      	ldr	r2, [r7, #16]
 80148d8:	4313      	orrs	r3, r2
 80148da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80148e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80148ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	685a      	ldr	r2, [r3, #4]
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	695b      	ldr	r3, [r3, #20]
 80148f4:	011b      	lsls	r3, r3, #4
 80148f6:	4313      	orrs	r3, r2
 80148f8:	68fa      	ldr	r2, [r7, #12]
 80148fa:	4313      	orrs	r3, r2
 80148fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	697a      	ldr	r2, [r7, #20]
 8014904:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	693a      	ldr	r2, [r7, #16]
 801490c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	68fa      	ldr	r2, [r7, #12]
 8014914:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	2201      	movs	r2, #1
 801491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801491e:	2300      	movs	r3, #0
}
 8014920:	4618      	mov	r0, r3
 8014922:	3718      	adds	r7, #24
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}

08014928 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b082      	sub	sp, #8
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
 8014930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d002      	beq.n	801493e <HAL_TIM_Encoder_Start+0x16>
 8014938:	2b04      	cmp	r3, #4
 801493a:	d008      	beq.n	801494e <HAL_TIM_Encoder_Start+0x26>
 801493c:	e00f      	b.n	801495e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	2201      	movs	r2, #1
 8014944:	2100      	movs	r1, #0
 8014946:	4618      	mov	r0, r3
 8014948:	f000 fe64 	bl	8015614 <TIM_CCxChannelCmd>
      break;
 801494c:	e016      	b.n	801497c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	2201      	movs	r2, #1
 8014954:	2104      	movs	r1, #4
 8014956:	4618      	mov	r0, r3
 8014958:	f000 fe5c 	bl	8015614 <TIM_CCxChannelCmd>
      break;
 801495c:	e00e      	b.n	801497c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	2201      	movs	r2, #1
 8014964:	2100      	movs	r1, #0
 8014966:	4618      	mov	r0, r3
 8014968:	f000 fe54 	bl	8015614 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	2201      	movs	r2, #1
 8014972:	2104      	movs	r1, #4
 8014974:	4618      	mov	r0, r3
 8014976:	f000 fe4d 	bl	8015614 <TIM_CCxChannelCmd>
      break;
 801497a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	681a      	ldr	r2, [r3, #0]
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	f042 0201 	orr.w	r2, r2, #1
 801498a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801498c:	2300      	movs	r3, #0
}
 801498e:	4618      	mov	r0, r3
 8014990:	3708      	adds	r7, #8
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}

08014996 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014996:	b580      	push	{r7, lr}
 8014998:	b082      	sub	sp, #8
 801499a:	af00      	add	r7, sp, #0
 801499c:	6078      	str	r0, [r7, #4]
 801499e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d002      	beq.n	80149ac <HAL_TIM_Encoder_Stop+0x16>
 80149a6:	2b04      	cmp	r3, #4
 80149a8:	d008      	beq.n	80149bc <HAL_TIM_Encoder_Stop+0x26>
 80149aa:	e00f      	b.n	80149cc <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	2200      	movs	r2, #0
 80149b2:	2100      	movs	r1, #0
 80149b4:	4618      	mov	r0, r3
 80149b6:	f000 fe2d 	bl	8015614 <TIM_CCxChannelCmd>
      break;
 80149ba:	e016      	b.n	80149ea <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	2200      	movs	r2, #0
 80149c2:	2104      	movs	r1, #4
 80149c4:	4618      	mov	r0, r3
 80149c6:	f000 fe25 	bl	8015614 <TIM_CCxChannelCmd>
      break;
 80149ca:	e00e      	b.n	80149ea <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	2200      	movs	r2, #0
 80149d2:	2100      	movs	r1, #0
 80149d4:	4618      	mov	r0, r3
 80149d6:	f000 fe1d 	bl	8015614 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	2200      	movs	r2, #0
 80149e0:	2104      	movs	r1, #4
 80149e2:	4618      	mov	r0, r3
 80149e4:	f000 fe16 	bl	8015614 <TIM_CCxChannelCmd>
      break;
 80149e8:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	6a1a      	ldr	r2, [r3, #32]
 80149f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80149f4:	4013      	ands	r3, r2
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d10f      	bne.n	8014a1a <HAL_TIM_Encoder_Stop+0x84>
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	6a1a      	ldr	r2, [r3, #32]
 8014a00:	f240 4344 	movw	r3, #1092	; 0x444
 8014a04:	4013      	ands	r3, r2
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d107      	bne.n	8014a1a <HAL_TIM_Encoder_Stop+0x84>
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	681a      	ldr	r2, [r3, #0]
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	f022 0201 	bic.w	r2, r2, #1
 8014a18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8014a1a:	2300      	movs	r3, #0
}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3708      	adds	r7, #8
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}

08014a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b082      	sub	sp, #8
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	691b      	ldr	r3, [r3, #16]
 8014a32:	f003 0302 	and.w	r3, r3, #2
 8014a36:	2b02      	cmp	r3, #2
 8014a38:	d122      	bne.n	8014a80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	68db      	ldr	r3, [r3, #12]
 8014a40:	f003 0302 	and.w	r3, r3, #2
 8014a44:	2b02      	cmp	r3, #2
 8014a46:	d11b      	bne.n	8014a80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	f06f 0202 	mvn.w	r2, #2
 8014a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	2201      	movs	r2, #1
 8014a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	699b      	ldr	r3, [r3, #24]
 8014a5e:	f003 0303 	and.w	r3, r3, #3
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d003      	beq.n	8014a6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f000 facb 	bl	8015002 <HAL_TIM_IC_CaptureCallback>
 8014a6c:	e005      	b.n	8014a7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f000 fabd 	bl	8014fee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f000 face 	bl	8015016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	691b      	ldr	r3, [r3, #16]
 8014a86:	f003 0304 	and.w	r3, r3, #4
 8014a8a:	2b04      	cmp	r3, #4
 8014a8c:	d122      	bne.n	8014ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	68db      	ldr	r3, [r3, #12]
 8014a94:	f003 0304 	and.w	r3, r3, #4
 8014a98:	2b04      	cmp	r3, #4
 8014a9a:	d11b      	bne.n	8014ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	f06f 0204 	mvn.w	r2, #4
 8014aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	2202      	movs	r2, #2
 8014aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	699b      	ldr	r3, [r3, #24]
 8014ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d003      	beq.n	8014ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014aba:	6878      	ldr	r0, [r7, #4]
 8014abc:	f000 faa1 	bl	8015002 <HAL_TIM_IC_CaptureCallback>
 8014ac0:	e005      	b.n	8014ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f000 fa93 	bl	8014fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014ac8:	6878      	ldr	r0, [r7, #4]
 8014aca:	f000 faa4 	bl	8015016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	691b      	ldr	r3, [r3, #16]
 8014ada:	f003 0308 	and.w	r3, r3, #8
 8014ade:	2b08      	cmp	r3, #8
 8014ae0:	d122      	bne.n	8014b28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	68db      	ldr	r3, [r3, #12]
 8014ae8:	f003 0308 	and.w	r3, r3, #8
 8014aec:	2b08      	cmp	r3, #8
 8014aee:	d11b      	bne.n	8014b28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	f06f 0208 	mvn.w	r2, #8
 8014af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	2204      	movs	r2, #4
 8014afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	69db      	ldr	r3, [r3, #28]
 8014b06:	f003 0303 	and.w	r3, r3, #3
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d003      	beq.n	8014b16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	f000 fa77 	bl	8015002 <HAL_TIM_IC_CaptureCallback>
 8014b14:	e005      	b.n	8014b22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f000 fa69 	bl	8014fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014b1c:	6878      	ldr	r0, [r7, #4]
 8014b1e:	f000 fa7a 	bl	8015016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2200      	movs	r2, #0
 8014b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	691b      	ldr	r3, [r3, #16]
 8014b2e:	f003 0310 	and.w	r3, r3, #16
 8014b32:	2b10      	cmp	r3, #16
 8014b34:	d122      	bne.n	8014b7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	68db      	ldr	r3, [r3, #12]
 8014b3c:	f003 0310 	and.w	r3, r3, #16
 8014b40:	2b10      	cmp	r3, #16
 8014b42:	d11b      	bne.n	8014b7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	f06f 0210 	mvn.w	r2, #16
 8014b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2208      	movs	r2, #8
 8014b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	69db      	ldr	r3, [r3, #28]
 8014b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d003      	beq.n	8014b6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014b62:	6878      	ldr	r0, [r7, #4]
 8014b64:	f000 fa4d 	bl	8015002 <HAL_TIM_IC_CaptureCallback>
 8014b68:	e005      	b.n	8014b76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f000 fa3f 	bl	8014fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014b70:	6878      	ldr	r0, [r7, #4]
 8014b72:	f000 fa50 	bl	8015016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	2200      	movs	r2, #0
 8014b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	691b      	ldr	r3, [r3, #16]
 8014b82:	f003 0301 	and.w	r3, r3, #1
 8014b86:	2b01      	cmp	r3, #1
 8014b88:	d10e      	bne.n	8014ba8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	68db      	ldr	r3, [r3, #12]
 8014b90:	f003 0301 	and.w	r3, r3, #1
 8014b94:	2b01      	cmp	r3, #1
 8014b96:	d107      	bne.n	8014ba8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	f06f 0201 	mvn.w	r2, #1
 8014ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014ba2:	6878      	ldr	r0, [r7, #4]
 8014ba4:	f7f6 fdd2 	bl	800b74c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	691b      	ldr	r3, [r3, #16]
 8014bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014bb2:	2b80      	cmp	r3, #128	; 0x80
 8014bb4:	d10e      	bne.n	8014bd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	68db      	ldr	r3, [r3, #12]
 8014bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014bc0:	2b80      	cmp	r3, #128	; 0x80
 8014bc2:	d107      	bne.n	8014bd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	f000 fee8 	bl	80159a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	691b      	ldr	r3, [r3, #16]
 8014bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014bde:	2b40      	cmp	r3, #64	; 0x40
 8014be0:	d10e      	bne.n	8014c00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	68db      	ldr	r3, [r3, #12]
 8014be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014bec:	2b40      	cmp	r3, #64	; 0x40
 8014bee:	d107      	bne.n	8014c00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014bfa:	6878      	ldr	r0, [r7, #4]
 8014bfc:	f000 fa15 	bl	801502a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	691b      	ldr	r3, [r3, #16]
 8014c06:	f003 0320 	and.w	r3, r3, #32
 8014c0a:	2b20      	cmp	r3, #32
 8014c0c:	d10e      	bne.n	8014c2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	68db      	ldr	r3, [r3, #12]
 8014c14:	f003 0320 	and.w	r3, r3, #32
 8014c18:	2b20      	cmp	r3, #32
 8014c1a:	d107      	bne.n	8014c2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	f06f 0220 	mvn.w	r2, #32
 8014c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f000 feb2 	bl	8015990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014c2c:	bf00      	nop
 8014c2e:	3708      	adds	r7, #8
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}

08014c34 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b084      	sub	sp, #16
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	60b9      	str	r1, [r7, #8]
 8014c3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014c46:	2b01      	cmp	r3, #1
 8014c48:	d101      	bne.n	8014c4e <HAL_TIM_OC_ConfigChannel+0x1a>
 8014c4a:	2302      	movs	r3, #2
 8014c4c:	e04e      	b.n	8014cec <HAL_TIM_OC_ConfigChannel+0xb8>
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	2201      	movs	r2, #1
 8014c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	2202      	movs	r2, #2
 8014c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2b0c      	cmp	r3, #12
 8014c62:	d839      	bhi.n	8014cd8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8014c64:	a201      	add	r2, pc, #4	; (adr r2, 8014c6c <HAL_TIM_OC_ConfigChannel+0x38>)
 8014c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c6a:	bf00      	nop
 8014c6c:	08014ca1 	.word	0x08014ca1
 8014c70:	08014cd9 	.word	0x08014cd9
 8014c74:	08014cd9 	.word	0x08014cd9
 8014c78:	08014cd9 	.word	0x08014cd9
 8014c7c:	08014caf 	.word	0x08014caf
 8014c80:	08014cd9 	.word	0x08014cd9
 8014c84:	08014cd9 	.word	0x08014cd9
 8014c88:	08014cd9 	.word	0x08014cd9
 8014c8c:	08014cbd 	.word	0x08014cbd
 8014c90:	08014cd9 	.word	0x08014cd9
 8014c94:	08014cd9 	.word	0x08014cd9
 8014c98:	08014cd9 	.word	0x08014cd9
 8014c9c:	08014ccb 	.word	0x08014ccb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	68b9      	ldr	r1, [r7, #8]
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f000 fa6a 	bl	8015180 <TIM_OC1_SetConfig>
      break;
 8014cac:	e015      	b.n	8014cda <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	68b9      	ldr	r1, [r7, #8]
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f000 fad3 	bl	8015260 <TIM_OC2_SetConfig>
      break;
 8014cba:	e00e      	b.n	8014cda <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	68b9      	ldr	r1, [r7, #8]
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f000 fb42 	bl	801534c <TIM_OC3_SetConfig>
      break;
 8014cc8:	e007      	b.n	8014cda <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	68b9      	ldr	r1, [r7, #8]
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	f000 fbaf 	bl	8015434 <TIM_OC4_SetConfig>
      break;
 8014cd6:	e000      	b.n	8014cda <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8014cd8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	2201      	movs	r2, #1
 8014cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014cea:	2300      	movs	r3, #0
}
 8014cec:	4618      	mov	r0, r3
 8014cee:	3710      	adds	r7, #16
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}

08014cf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b084      	sub	sp, #16
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	60f8      	str	r0, [r7, #12]
 8014cfc:	60b9      	str	r1, [r7, #8]
 8014cfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014d06:	2b01      	cmp	r3, #1
 8014d08:	d101      	bne.n	8014d0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8014d0a:	2302      	movs	r3, #2
 8014d0c:	e0b4      	b.n	8014e78 <HAL_TIM_PWM_ConfigChannel+0x184>
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	2201      	movs	r2, #1
 8014d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	2202      	movs	r2, #2
 8014d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2b0c      	cmp	r3, #12
 8014d22:	f200 809f 	bhi.w	8014e64 <HAL_TIM_PWM_ConfigChannel+0x170>
 8014d26:	a201      	add	r2, pc, #4	; (adr r2, 8014d2c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8014d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d2c:	08014d61 	.word	0x08014d61
 8014d30:	08014e65 	.word	0x08014e65
 8014d34:	08014e65 	.word	0x08014e65
 8014d38:	08014e65 	.word	0x08014e65
 8014d3c:	08014da1 	.word	0x08014da1
 8014d40:	08014e65 	.word	0x08014e65
 8014d44:	08014e65 	.word	0x08014e65
 8014d48:	08014e65 	.word	0x08014e65
 8014d4c:	08014de3 	.word	0x08014de3
 8014d50:	08014e65 	.word	0x08014e65
 8014d54:	08014e65 	.word	0x08014e65
 8014d58:	08014e65 	.word	0x08014e65
 8014d5c:	08014e23 	.word	0x08014e23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	68b9      	ldr	r1, [r7, #8]
 8014d66:	4618      	mov	r0, r3
 8014d68:	f000 fa0a 	bl	8015180 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	699a      	ldr	r2, [r3, #24]
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	f042 0208 	orr.w	r2, r2, #8
 8014d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	699a      	ldr	r2, [r3, #24]
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	f022 0204 	bic.w	r2, r2, #4
 8014d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	6999      	ldr	r1, [r3, #24]
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	691a      	ldr	r2, [r3, #16]
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	430a      	orrs	r2, r1
 8014d9c:	619a      	str	r2, [r3, #24]
      break;
 8014d9e:	e062      	b.n	8014e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	68b9      	ldr	r1, [r7, #8]
 8014da6:	4618      	mov	r0, r3
 8014da8:	f000 fa5a 	bl	8015260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	699a      	ldr	r2, [r3, #24]
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	699a      	ldr	r2, [r3, #24]
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	6999      	ldr	r1, [r3, #24]
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	691b      	ldr	r3, [r3, #16]
 8014dd6:	021a      	lsls	r2, r3, #8
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	430a      	orrs	r2, r1
 8014dde:	619a      	str	r2, [r3, #24]
      break;
 8014de0:	e041      	b.n	8014e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	68b9      	ldr	r1, [r7, #8]
 8014de8:	4618      	mov	r0, r3
 8014dea:	f000 faaf 	bl	801534c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	69da      	ldr	r2, [r3, #28]
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	f042 0208 	orr.w	r2, r2, #8
 8014dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	69da      	ldr	r2, [r3, #28]
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	f022 0204 	bic.w	r2, r2, #4
 8014e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	69d9      	ldr	r1, [r3, #28]
 8014e14:	68bb      	ldr	r3, [r7, #8]
 8014e16:	691a      	ldr	r2, [r3, #16]
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	430a      	orrs	r2, r1
 8014e1e:	61da      	str	r2, [r3, #28]
      break;
 8014e20:	e021      	b.n	8014e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	68b9      	ldr	r1, [r7, #8]
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f000 fb03 	bl	8015434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	69da      	ldr	r2, [r3, #28]
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	69da      	ldr	r2, [r3, #28]
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	69d9      	ldr	r1, [r3, #28]
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	691b      	ldr	r3, [r3, #16]
 8014e58:	021a      	lsls	r2, r3, #8
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	430a      	orrs	r2, r1
 8014e60:	61da      	str	r2, [r3, #28]
      break;
 8014e62:	e000      	b.n	8014e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8014e64:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	2201      	movs	r2, #1
 8014e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	2200      	movs	r2, #0
 8014e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014e76:	2300      	movs	r3, #0
}
 8014e78:	4618      	mov	r0, r3
 8014e7a:	3710      	adds	r7, #16
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}

08014e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b084      	sub	sp, #16
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
 8014e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014e90:	2b01      	cmp	r3, #1
 8014e92:	d101      	bne.n	8014e98 <HAL_TIM_ConfigClockSource+0x18>
 8014e94:	2302      	movs	r3, #2
 8014e96:	e0a6      	b.n	8014fe6 <HAL_TIM_ConfigClockSource+0x166>
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2201      	movs	r2, #1
 8014e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	2202      	movs	r2, #2
 8014ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	689b      	ldr	r3, [r3, #8]
 8014eae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8014eb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014ebe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	68fa      	ldr	r2, [r7, #12]
 8014ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014ec8:	683b      	ldr	r3, [r7, #0]
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	2b40      	cmp	r3, #64	; 0x40
 8014ece:	d067      	beq.n	8014fa0 <HAL_TIM_ConfigClockSource+0x120>
 8014ed0:	2b40      	cmp	r3, #64	; 0x40
 8014ed2:	d80b      	bhi.n	8014eec <HAL_TIM_ConfigClockSource+0x6c>
 8014ed4:	2b10      	cmp	r3, #16
 8014ed6:	d073      	beq.n	8014fc0 <HAL_TIM_ConfigClockSource+0x140>
 8014ed8:	2b10      	cmp	r3, #16
 8014eda:	d802      	bhi.n	8014ee2 <HAL_TIM_ConfigClockSource+0x62>
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d06f      	beq.n	8014fc0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8014ee0:	e078      	b.n	8014fd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014ee2:	2b20      	cmp	r3, #32
 8014ee4:	d06c      	beq.n	8014fc0 <HAL_TIM_ConfigClockSource+0x140>
 8014ee6:	2b30      	cmp	r3, #48	; 0x30
 8014ee8:	d06a      	beq.n	8014fc0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8014eea:	e073      	b.n	8014fd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014eec:	2b70      	cmp	r3, #112	; 0x70
 8014eee:	d00d      	beq.n	8014f0c <HAL_TIM_ConfigClockSource+0x8c>
 8014ef0:	2b70      	cmp	r3, #112	; 0x70
 8014ef2:	d804      	bhi.n	8014efe <HAL_TIM_ConfigClockSource+0x7e>
 8014ef4:	2b50      	cmp	r3, #80	; 0x50
 8014ef6:	d033      	beq.n	8014f60 <HAL_TIM_ConfigClockSource+0xe0>
 8014ef8:	2b60      	cmp	r3, #96	; 0x60
 8014efa:	d041      	beq.n	8014f80 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8014efc:	e06a      	b.n	8014fd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014f02:	d066      	beq.n	8014fd2 <HAL_TIM_ConfigClockSource+0x152>
 8014f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014f08:	d017      	beq.n	8014f3a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8014f0a:	e063      	b.n	8014fd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	6818      	ldr	r0, [r3, #0]
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	6899      	ldr	r1, [r3, #8]
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	685a      	ldr	r2, [r3, #4]
 8014f18:	683b      	ldr	r3, [r7, #0]
 8014f1a:	68db      	ldr	r3, [r3, #12]
 8014f1c:	f000 fb5a 	bl	80155d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	689b      	ldr	r3, [r3, #8]
 8014f26:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014f2e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	68fa      	ldr	r2, [r7, #12]
 8014f36:	609a      	str	r2, [r3, #8]
      break;
 8014f38:	e04c      	b.n	8014fd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	6818      	ldr	r0, [r3, #0]
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	6899      	ldr	r1, [r3, #8]
 8014f42:	683b      	ldr	r3, [r7, #0]
 8014f44:	685a      	ldr	r2, [r3, #4]
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	68db      	ldr	r3, [r3, #12]
 8014f4a:	f000 fb43 	bl	80155d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	689a      	ldr	r2, [r3, #8]
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014f5c:	609a      	str	r2, [r3, #8]
      break;
 8014f5e:	e039      	b.n	8014fd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6818      	ldr	r0, [r3, #0]
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	6859      	ldr	r1, [r3, #4]
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	68db      	ldr	r3, [r3, #12]
 8014f6c:	461a      	mov	r2, r3
 8014f6e:	f000 fab7 	bl	80154e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	2150      	movs	r1, #80	; 0x50
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f000 fb10 	bl	801559e <TIM_ITRx_SetConfig>
      break;
 8014f7e:	e029      	b.n	8014fd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	6818      	ldr	r0, [r3, #0]
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	6859      	ldr	r1, [r3, #4]
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	68db      	ldr	r3, [r3, #12]
 8014f8c:	461a      	mov	r2, r3
 8014f8e:	f000 fad6 	bl	801553e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	2160      	movs	r1, #96	; 0x60
 8014f98:	4618      	mov	r0, r3
 8014f9a:	f000 fb00 	bl	801559e <TIM_ITRx_SetConfig>
      break;
 8014f9e:	e019      	b.n	8014fd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	6818      	ldr	r0, [r3, #0]
 8014fa4:	683b      	ldr	r3, [r7, #0]
 8014fa6:	6859      	ldr	r1, [r3, #4]
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	68db      	ldr	r3, [r3, #12]
 8014fac:	461a      	mov	r2, r3
 8014fae:	f000 fa97 	bl	80154e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	2140      	movs	r1, #64	; 0x40
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f000 faf0 	bl	801559e <TIM_ITRx_SetConfig>
      break;
 8014fbe:	e009      	b.n	8014fd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	681a      	ldr	r2, [r3, #0]
 8014fc4:	683b      	ldr	r3, [r7, #0]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	4619      	mov	r1, r3
 8014fca:	4610      	mov	r0, r2
 8014fcc:	f000 fae7 	bl	801559e <TIM_ITRx_SetConfig>
      break;
 8014fd0:	e000      	b.n	8014fd4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8014fd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	2201      	movs	r2, #1
 8014fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2200      	movs	r2, #0
 8014fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014fe4:	2300      	movs	r3, #0
}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3710      	adds	r7, #16
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}

08014fee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014fee:	b480      	push	{r7}
 8014ff0:	b083      	sub	sp, #12
 8014ff2:	af00      	add	r7, sp, #0
 8014ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014ff6:	bf00      	nop
 8014ff8:	370c      	adds	r7, #12
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015000:	4770      	bx	lr

08015002 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015002:	b480      	push	{r7}
 8015004:	b083      	sub	sp, #12
 8015006:	af00      	add	r7, sp, #0
 8015008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801500a:	bf00      	nop
 801500c:	370c      	adds	r7, #12
 801500e:	46bd      	mov	sp, r7
 8015010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015014:	4770      	bx	lr

08015016 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015016:	b480      	push	{r7}
 8015018:	b083      	sub	sp, #12
 801501a:	af00      	add	r7, sp, #0
 801501c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801501e:	bf00      	nop
 8015020:	370c      	adds	r7, #12
 8015022:	46bd      	mov	sp, r7
 8015024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015028:	4770      	bx	lr

0801502a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801502a:	b480      	push	{r7}
 801502c:	b083      	sub	sp, #12
 801502e:	af00      	add	r7, sp, #0
 8015030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015032:	bf00      	nop
 8015034:	370c      	adds	r7, #12
 8015036:	46bd      	mov	sp, r7
 8015038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503c:	4770      	bx	lr
	...

08015040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015040:	b480      	push	{r7}
 8015042:	b085      	sub	sp, #20
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
 8015048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	4a40      	ldr	r2, [pc, #256]	; (8015154 <TIM_Base_SetConfig+0x114>)
 8015054:	4293      	cmp	r3, r2
 8015056:	d013      	beq.n	8015080 <TIM_Base_SetConfig+0x40>
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801505e:	d00f      	beq.n	8015080 <TIM_Base_SetConfig+0x40>
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	4a3d      	ldr	r2, [pc, #244]	; (8015158 <TIM_Base_SetConfig+0x118>)
 8015064:	4293      	cmp	r3, r2
 8015066:	d00b      	beq.n	8015080 <TIM_Base_SetConfig+0x40>
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	4a3c      	ldr	r2, [pc, #240]	; (801515c <TIM_Base_SetConfig+0x11c>)
 801506c:	4293      	cmp	r3, r2
 801506e:	d007      	beq.n	8015080 <TIM_Base_SetConfig+0x40>
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	4a3b      	ldr	r2, [pc, #236]	; (8015160 <TIM_Base_SetConfig+0x120>)
 8015074:	4293      	cmp	r3, r2
 8015076:	d003      	beq.n	8015080 <TIM_Base_SetConfig+0x40>
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	4a3a      	ldr	r2, [pc, #232]	; (8015164 <TIM_Base_SetConfig+0x124>)
 801507c:	4293      	cmp	r3, r2
 801507e:	d108      	bne.n	8015092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015088:	683b      	ldr	r3, [r7, #0]
 801508a:	685b      	ldr	r3, [r3, #4]
 801508c:	68fa      	ldr	r2, [r7, #12]
 801508e:	4313      	orrs	r3, r2
 8015090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	4a2f      	ldr	r2, [pc, #188]	; (8015154 <TIM_Base_SetConfig+0x114>)
 8015096:	4293      	cmp	r3, r2
 8015098:	d02b      	beq.n	80150f2 <TIM_Base_SetConfig+0xb2>
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80150a0:	d027      	beq.n	80150f2 <TIM_Base_SetConfig+0xb2>
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	4a2c      	ldr	r2, [pc, #176]	; (8015158 <TIM_Base_SetConfig+0x118>)
 80150a6:	4293      	cmp	r3, r2
 80150a8:	d023      	beq.n	80150f2 <TIM_Base_SetConfig+0xb2>
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	4a2b      	ldr	r2, [pc, #172]	; (801515c <TIM_Base_SetConfig+0x11c>)
 80150ae:	4293      	cmp	r3, r2
 80150b0:	d01f      	beq.n	80150f2 <TIM_Base_SetConfig+0xb2>
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	4a2a      	ldr	r2, [pc, #168]	; (8015160 <TIM_Base_SetConfig+0x120>)
 80150b6:	4293      	cmp	r3, r2
 80150b8:	d01b      	beq.n	80150f2 <TIM_Base_SetConfig+0xb2>
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	4a29      	ldr	r2, [pc, #164]	; (8015164 <TIM_Base_SetConfig+0x124>)
 80150be:	4293      	cmp	r3, r2
 80150c0:	d017      	beq.n	80150f2 <TIM_Base_SetConfig+0xb2>
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	4a28      	ldr	r2, [pc, #160]	; (8015168 <TIM_Base_SetConfig+0x128>)
 80150c6:	4293      	cmp	r3, r2
 80150c8:	d013      	beq.n	80150f2 <TIM_Base_SetConfig+0xb2>
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	4a27      	ldr	r2, [pc, #156]	; (801516c <TIM_Base_SetConfig+0x12c>)
 80150ce:	4293      	cmp	r3, r2
 80150d0:	d00f      	beq.n	80150f2 <TIM_Base_SetConfig+0xb2>
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	4a26      	ldr	r2, [pc, #152]	; (8015170 <TIM_Base_SetConfig+0x130>)
 80150d6:	4293      	cmp	r3, r2
 80150d8:	d00b      	beq.n	80150f2 <TIM_Base_SetConfig+0xb2>
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	4a25      	ldr	r2, [pc, #148]	; (8015174 <TIM_Base_SetConfig+0x134>)
 80150de:	4293      	cmp	r3, r2
 80150e0:	d007      	beq.n	80150f2 <TIM_Base_SetConfig+0xb2>
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	4a24      	ldr	r2, [pc, #144]	; (8015178 <TIM_Base_SetConfig+0x138>)
 80150e6:	4293      	cmp	r3, r2
 80150e8:	d003      	beq.n	80150f2 <TIM_Base_SetConfig+0xb2>
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	4a23      	ldr	r2, [pc, #140]	; (801517c <TIM_Base_SetConfig+0x13c>)
 80150ee:	4293      	cmp	r3, r2
 80150f0:	d108      	bne.n	8015104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80150f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80150fa:	683b      	ldr	r3, [r7, #0]
 80150fc:	68db      	ldr	r3, [r3, #12]
 80150fe:	68fa      	ldr	r2, [r7, #12]
 8015100:	4313      	orrs	r3, r2
 8015102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	695b      	ldr	r3, [r3, #20]
 801510e:	4313      	orrs	r3, r2
 8015110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	68fa      	ldr	r2, [r7, #12]
 8015116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015118:	683b      	ldr	r3, [r7, #0]
 801511a:	689a      	ldr	r2, [r3, #8]
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015120:	683b      	ldr	r3, [r7, #0]
 8015122:	681a      	ldr	r2, [r3, #0]
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	4a0a      	ldr	r2, [pc, #40]	; (8015154 <TIM_Base_SetConfig+0x114>)
 801512c:	4293      	cmp	r3, r2
 801512e:	d003      	beq.n	8015138 <TIM_Base_SetConfig+0xf8>
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	4a0c      	ldr	r2, [pc, #48]	; (8015164 <TIM_Base_SetConfig+0x124>)
 8015134:	4293      	cmp	r3, r2
 8015136:	d103      	bne.n	8015140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015138:	683b      	ldr	r3, [r7, #0]
 801513a:	691a      	ldr	r2, [r3, #16]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2201      	movs	r2, #1
 8015144:	615a      	str	r2, [r3, #20]
}
 8015146:	bf00      	nop
 8015148:	3714      	adds	r7, #20
 801514a:	46bd      	mov	sp, r7
 801514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015150:	4770      	bx	lr
 8015152:	bf00      	nop
 8015154:	40010000 	.word	0x40010000
 8015158:	40000400 	.word	0x40000400
 801515c:	40000800 	.word	0x40000800
 8015160:	40000c00 	.word	0x40000c00
 8015164:	40010400 	.word	0x40010400
 8015168:	40014000 	.word	0x40014000
 801516c:	40014400 	.word	0x40014400
 8015170:	40014800 	.word	0x40014800
 8015174:	40001800 	.word	0x40001800
 8015178:	40001c00 	.word	0x40001c00
 801517c:	40002000 	.word	0x40002000

08015180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015180:	b480      	push	{r7}
 8015182:	b087      	sub	sp, #28
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6a1b      	ldr	r3, [r3, #32]
 801518e:	f023 0201 	bic.w	r2, r3, #1
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	6a1b      	ldr	r3, [r3, #32]
 801519a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	685b      	ldr	r3, [r3, #4]
 80151a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	699b      	ldr	r3, [r3, #24]
 80151a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80151ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	f023 0303 	bic.w	r3, r3, #3
 80151b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	68fa      	ldr	r2, [r7, #12]
 80151be:	4313      	orrs	r3, r2
 80151c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80151c2:	697b      	ldr	r3, [r7, #20]
 80151c4:	f023 0302 	bic.w	r3, r3, #2
 80151c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	689b      	ldr	r3, [r3, #8]
 80151ce:	697a      	ldr	r2, [r7, #20]
 80151d0:	4313      	orrs	r3, r2
 80151d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	4a20      	ldr	r2, [pc, #128]	; (8015258 <TIM_OC1_SetConfig+0xd8>)
 80151d8:	4293      	cmp	r3, r2
 80151da:	d003      	beq.n	80151e4 <TIM_OC1_SetConfig+0x64>
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	4a1f      	ldr	r2, [pc, #124]	; (801525c <TIM_OC1_SetConfig+0xdc>)
 80151e0:	4293      	cmp	r3, r2
 80151e2:	d10c      	bne.n	80151fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80151e4:	697b      	ldr	r3, [r7, #20]
 80151e6:	f023 0308 	bic.w	r3, r3, #8
 80151ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	68db      	ldr	r3, [r3, #12]
 80151f0:	697a      	ldr	r2, [r7, #20]
 80151f2:	4313      	orrs	r3, r2
 80151f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	f023 0304 	bic.w	r3, r3, #4
 80151fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	4a15      	ldr	r2, [pc, #84]	; (8015258 <TIM_OC1_SetConfig+0xd8>)
 8015202:	4293      	cmp	r3, r2
 8015204:	d003      	beq.n	801520e <TIM_OC1_SetConfig+0x8e>
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	4a14      	ldr	r2, [pc, #80]	; (801525c <TIM_OC1_SetConfig+0xdc>)
 801520a:	4293      	cmp	r3, r2
 801520c:	d111      	bne.n	8015232 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8015216:	693b      	ldr	r3, [r7, #16]
 8015218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801521c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	695b      	ldr	r3, [r3, #20]
 8015222:	693a      	ldr	r2, [r7, #16]
 8015224:	4313      	orrs	r3, r2
 8015226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	699b      	ldr	r3, [r3, #24]
 801522c:	693a      	ldr	r2, [r7, #16]
 801522e:	4313      	orrs	r3, r2
 8015230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	693a      	ldr	r2, [r7, #16]
 8015236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	68fa      	ldr	r2, [r7, #12]
 801523c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801523e:	683b      	ldr	r3, [r7, #0]
 8015240:	685a      	ldr	r2, [r3, #4]
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	697a      	ldr	r2, [r7, #20]
 801524a:	621a      	str	r2, [r3, #32]
}
 801524c:	bf00      	nop
 801524e:	371c      	adds	r7, #28
 8015250:	46bd      	mov	sp, r7
 8015252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015256:	4770      	bx	lr
 8015258:	40010000 	.word	0x40010000
 801525c:	40010400 	.word	0x40010400

08015260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015260:	b480      	push	{r7}
 8015262:	b087      	sub	sp, #28
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
 8015268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	6a1b      	ldr	r3, [r3, #32]
 801526e:	f023 0210 	bic.w	r2, r3, #16
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	6a1b      	ldr	r3, [r3, #32]
 801527a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	685b      	ldr	r3, [r3, #4]
 8015280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	699b      	ldr	r3, [r3, #24]
 8015286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801528e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	021b      	lsls	r3, r3, #8
 801529e:	68fa      	ldr	r2, [r7, #12]
 80152a0:	4313      	orrs	r3, r2
 80152a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80152a4:	697b      	ldr	r3, [r7, #20]
 80152a6:	f023 0320 	bic.w	r3, r3, #32
 80152aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80152ac:	683b      	ldr	r3, [r7, #0]
 80152ae:	689b      	ldr	r3, [r3, #8]
 80152b0:	011b      	lsls	r3, r3, #4
 80152b2:	697a      	ldr	r2, [r7, #20]
 80152b4:	4313      	orrs	r3, r2
 80152b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	4a22      	ldr	r2, [pc, #136]	; (8015344 <TIM_OC2_SetConfig+0xe4>)
 80152bc:	4293      	cmp	r3, r2
 80152be:	d003      	beq.n	80152c8 <TIM_OC2_SetConfig+0x68>
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	4a21      	ldr	r2, [pc, #132]	; (8015348 <TIM_OC2_SetConfig+0xe8>)
 80152c4:	4293      	cmp	r3, r2
 80152c6:	d10d      	bne.n	80152e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80152c8:	697b      	ldr	r3, [r7, #20]
 80152ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80152ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80152d0:	683b      	ldr	r3, [r7, #0]
 80152d2:	68db      	ldr	r3, [r3, #12]
 80152d4:	011b      	lsls	r3, r3, #4
 80152d6:	697a      	ldr	r2, [r7, #20]
 80152d8:	4313      	orrs	r3, r2
 80152da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80152dc:	697b      	ldr	r3, [r7, #20]
 80152de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80152e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	4a17      	ldr	r2, [pc, #92]	; (8015344 <TIM_OC2_SetConfig+0xe4>)
 80152e8:	4293      	cmp	r3, r2
 80152ea:	d003      	beq.n	80152f4 <TIM_OC2_SetConfig+0x94>
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	4a16      	ldr	r2, [pc, #88]	; (8015348 <TIM_OC2_SetConfig+0xe8>)
 80152f0:	4293      	cmp	r3, r2
 80152f2:	d113      	bne.n	801531c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80152f4:	693b      	ldr	r3, [r7, #16]
 80152f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80152fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80152fc:	693b      	ldr	r3, [r7, #16]
 80152fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015302:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	695b      	ldr	r3, [r3, #20]
 8015308:	009b      	lsls	r3, r3, #2
 801530a:	693a      	ldr	r2, [r7, #16]
 801530c:	4313      	orrs	r3, r2
 801530e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	699b      	ldr	r3, [r3, #24]
 8015314:	009b      	lsls	r3, r3, #2
 8015316:	693a      	ldr	r2, [r7, #16]
 8015318:	4313      	orrs	r3, r2
 801531a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	693a      	ldr	r2, [r7, #16]
 8015320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	68fa      	ldr	r2, [r7, #12]
 8015326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	685a      	ldr	r2, [r3, #4]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	697a      	ldr	r2, [r7, #20]
 8015334:	621a      	str	r2, [r3, #32]
}
 8015336:	bf00      	nop
 8015338:	371c      	adds	r7, #28
 801533a:	46bd      	mov	sp, r7
 801533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015340:	4770      	bx	lr
 8015342:	bf00      	nop
 8015344:	40010000 	.word	0x40010000
 8015348:	40010400 	.word	0x40010400

0801534c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801534c:	b480      	push	{r7}
 801534e:	b087      	sub	sp, #28
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
 8015354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	6a1b      	ldr	r3, [r3, #32]
 801535a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	6a1b      	ldr	r3, [r3, #32]
 8015366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	685b      	ldr	r3, [r3, #4]
 801536c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	69db      	ldr	r3, [r3, #28]
 8015372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801537a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	f023 0303 	bic.w	r3, r3, #3
 8015382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015384:	683b      	ldr	r3, [r7, #0]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	68fa      	ldr	r2, [r7, #12]
 801538a:	4313      	orrs	r3, r2
 801538c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801538e:	697b      	ldr	r3, [r7, #20]
 8015390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015396:	683b      	ldr	r3, [r7, #0]
 8015398:	689b      	ldr	r3, [r3, #8]
 801539a:	021b      	lsls	r3, r3, #8
 801539c:	697a      	ldr	r2, [r7, #20]
 801539e:	4313      	orrs	r3, r2
 80153a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	4a21      	ldr	r2, [pc, #132]	; (801542c <TIM_OC3_SetConfig+0xe0>)
 80153a6:	4293      	cmp	r3, r2
 80153a8:	d003      	beq.n	80153b2 <TIM_OC3_SetConfig+0x66>
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	4a20      	ldr	r2, [pc, #128]	; (8015430 <TIM_OC3_SetConfig+0xe4>)
 80153ae:	4293      	cmp	r3, r2
 80153b0:	d10d      	bne.n	80153ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80153b2:	697b      	ldr	r3, [r7, #20]
 80153b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80153b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	68db      	ldr	r3, [r3, #12]
 80153be:	021b      	lsls	r3, r3, #8
 80153c0:	697a      	ldr	r2, [r7, #20]
 80153c2:	4313      	orrs	r3, r2
 80153c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80153c6:	697b      	ldr	r3, [r7, #20]
 80153c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80153cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	4a16      	ldr	r2, [pc, #88]	; (801542c <TIM_OC3_SetConfig+0xe0>)
 80153d2:	4293      	cmp	r3, r2
 80153d4:	d003      	beq.n	80153de <TIM_OC3_SetConfig+0x92>
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	4a15      	ldr	r2, [pc, #84]	; (8015430 <TIM_OC3_SetConfig+0xe4>)
 80153da:	4293      	cmp	r3, r2
 80153dc:	d113      	bne.n	8015406 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80153e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80153e6:	693b      	ldr	r3, [r7, #16]
 80153e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80153ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80153ee:	683b      	ldr	r3, [r7, #0]
 80153f0:	695b      	ldr	r3, [r3, #20]
 80153f2:	011b      	lsls	r3, r3, #4
 80153f4:	693a      	ldr	r2, [r7, #16]
 80153f6:	4313      	orrs	r3, r2
 80153f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80153fa:	683b      	ldr	r3, [r7, #0]
 80153fc:	699b      	ldr	r3, [r3, #24]
 80153fe:	011b      	lsls	r3, r3, #4
 8015400:	693a      	ldr	r2, [r7, #16]
 8015402:	4313      	orrs	r3, r2
 8015404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	693a      	ldr	r2, [r7, #16]
 801540a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	68fa      	ldr	r2, [r7, #12]
 8015410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	685a      	ldr	r2, [r3, #4]
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	697a      	ldr	r2, [r7, #20]
 801541e:	621a      	str	r2, [r3, #32]
}
 8015420:	bf00      	nop
 8015422:	371c      	adds	r7, #28
 8015424:	46bd      	mov	sp, r7
 8015426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542a:	4770      	bx	lr
 801542c:	40010000 	.word	0x40010000
 8015430:	40010400 	.word	0x40010400

08015434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015434:	b480      	push	{r7}
 8015436:	b087      	sub	sp, #28
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
 801543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	6a1b      	ldr	r3, [r3, #32]
 8015442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	6a1b      	ldr	r3, [r3, #32]
 801544e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	685b      	ldr	r3, [r3, #4]
 8015454:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	69db      	ldr	r3, [r3, #28]
 801545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801546a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	021b      	lsls	r3, r3, #8
 8015472:	68fa      	ldr	r2, [r7, #12]
 8015474:	4313      	orrs	r3, r2
 8015476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015478:	693b      	ldr	r3, [r7, #16]
 801547a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801547e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	689b      	ldr	r3, [r3, #8]
 8015484:	031b      	lsls	r3, r3, #12
 8015486:	693a      	ldr	r2, [r7, #16]
 8015488:	4313      	orrs	r3, r2
 801548a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	4a12      	ldr	r2, [pc, #72]	; (80154d8 <TIM_OC4_SetConfig+0xa4>)
 8015490:	4293      	cmp	r3, r2
 8015492:	d003      	beq.n	801549c <TIM_OC4_SetConfig+0x68>
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	4a11      	ldr	r2, [pc, #68]	; (80154dc <TIM_OC4_SetConfig+0xa8>)
 8015498:	4293      	cmp	r3, r2
 801549a:	d109      	bne.n	80154b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801549c:	697b      	ldr	r3, [r7, #20]
 801549e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80154a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80154a4:	683b      	ldr	r3, [r7, #0]
 80154a6:	695b      	ldr	r3, [r3, #20]
 80154a8:	019b      	lsls	r3, r3, #6
 80154aa:	697a      	ldr	r2, [r7, #20]
 80154ac:	4313      	orrs	r3, r2
 80154ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	697a      	ldr	r2, [r7, #20]
 80154b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	68fa      	ldr	r2, [r7, #12]
 80154ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80154bc:	683b      	ldr	r3, [r7, #0]
 80154be:	685a      	ldr	r2, [r3, #4]
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	693a      	ldr	r2, [r7, #16]
 80154c8:	621a      	str	r2, [r3, #32]
}
 80154ca:	bf00      	nop
 80154cc:	371c      	adds	r7, #28
 80154ce:	46bd      	mov	sp, r7
 80154d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d4:	4770      	bx	lr
 80154d6:	bf00      	nop
 80154d8:	40010000 	.word	0x40010000
 80154dc:	40010400 	.word	0x40010400

080154e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80154e0:	b480      	push	{r7}
 80154e2:	b087      	sub	sp, #28
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	60f8      	str	r0, [r7, #12]
 80154e8:	60b9      	str	r1, [r7, #8]
 80154ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	6a1b      	ldr	r3, [r3, #32]
 80154f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	6a1b      	ldr	r3, [r3, #32]
 80154f6:	f023 0201 	bic.w	r2, r3, #1
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	699b      	ldr	r3, [r3, #24]
 8015502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801550a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	011b      	lsls	r3, r3, #4
 8015510:	693a      	ldr	r2, [r7, #16]
 8015512:	4313      	orrs	r3, r2
 8015514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015516:	697b      	ldr	r3, [r7, #20]
 8015518:	f023 030a 	bic.w	r3, r3, #10
 801551c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801551e:	697a      	ldr	r2, [r7, #20]
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	4313      	orrs	r3, r2
 8015524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	693a      	ldr	r2, [r7, #16]
 801552a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	697a      	ldr	r2, [r7, #20]
 8015530:	621a      	str	r2, [r3, #32]
}
 8015532:	bf00      	nop
 8015534:	371c      	adds	r7, #28
 8015536:	46bd      	mov	sp, r7
 8015538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553c:	4770      	bx	lr

0801553e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801553e:	b480      	push	{r7}
 8015540:	b087      	sub	sp, #28
 8015542:	af00      	add	r7, sp, #0
 8015544:	60f8      	str	r0, [r7, #12]
 8015546:	60b9      	str	r1, [r7, #8]
 8015548:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	6a1b      	ldr	r3, [r3, #32]
 801554e:	f023 0210 	bic.w	r2, r3, #16
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	699b      	ldr	r3, [r3, #24]
 801555a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	6a1b      	ldr	r3, [r3, #32]
 8015560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015568:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	031b      	lsls	r3, r3, #12
 801556e:	697a      	ldr	r2, [r7, #20]
 8015570:	4313      	orrs	r3, r2
 8015572:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015574:	693b      	ldr	r3, [r7, #16]
 8015576:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801557a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	011b      	lsls	r3, r3, #4
 8015580:	693a      	ldr	r2, [r7, #16]
 8015582:	4313      	orrs	r3, r2
 8015584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	697a      	ldr	r2, [r7, #20]
 801558a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	693a      	ldr	r2, [r7, #16]
 8015590:	621a      	str	r2, [r3, #32]
}
 8015592:	bf00      	nop
 8015594:	371c      	adds	r7, #28
 8015596:	46bd      	mov	sp, r7
 8015598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801559c:	4770      	bx	lr

0801559e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801559e:	b480      	push	{r7}
 80155a0:	b085      	sub	sp, #20
 80155a2:	af00      	add	r7, sp, #0
 80155a4:	6078      	str	r0, [r7, #4]
 80155a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	689b      	ldr	r3, [r3, #8]
 80155ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80155b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80155b6:	683a      	ldr	r2, [r7, #0]
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	4313      	orrs	r3, r2
 80155bc:	f043 0307 	orr.w	r3, r3, #7
 80155c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	68fa      	ldr	r2, [r7, #12]
 80155c6:	609a      	str	r2, [r3, #8]
}
 80155c8:	bf00      	nop
 80155ca:	3714      	adds	r7, #20
 80155cc:	46bd      	mov	sp, r7
 80155ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d2:	4770      	bx	lr

080155d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80155d4:	b480      	push	{r7}
 80155d6:	b087      	sub	sp, #28
 80155d8:	af00      	add	r7, sp, #0
 80155da:	60f8      	str	r0, [r7, #12]
 80155dc:	60b9      	str	r1, [r7, #8]
 80155de:	607a      	str	r2, [r7, #4]
 80155e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	689b      	ldr	r3, [r3, #8]
 80155e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80155ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80155f0:	683b      	ldr	r3, [r7, #0]
 80155f2:	021a      	lsls	r2, r3, #8
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	431a      	orrs	r2, r3
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	4313      	orrs	r3, r2
 80155fc:	697a      	ldr	r2, [r7, #20]
 80155fe:	4313      	orrs	r3, r2
 8015600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	697a      	ldr	r2, [r7, #20]
 8015606:	609a      	str	r2, [r3, #8]
}
 8015608:	bf00      	nop
 801560a:	371c      	adds	r7, #28
 801560c:	46bd      	mov	sp, r7
 801560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015612:	4770      	bx	lr

08015614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015614:	b480      	push	{r7}
 8015616:	b087      	sub	sp, #28
 8015618:	af00      	add	r7, sp, #0
 801561a:	60f8      	str	r0, [r7, #12]
 801561c:	60b9      	str	r1, [r7, #8]
 801561e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	f003 031f 	and.w	r3, r3, #31
 8015626:	2201      	movs	r2, #1
 8015628:	fa02 f303 	lsl.w	r3, r2, r3
 801562c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	6a1a      	ldr	r2, [r3, #32]
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	43db      	mvns	r3, r3
 8015636:	401a      	ands	r2, r3
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	6a1a      	ldr	r2, [r3, #32]
 8015640:	68bb      	ldr	r3, [r7, #8]
 8015642:	f003 031f 	and.w	r3, r3, #31
 8015646:	6879      	ldr	r1, [r7, #4]
 8015648:	fa01 f303 	lsl.w	r3, r1, r3
 801564c:	431a      	orrs	r2, r3
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	621a      	str	r2, [r3, #32]
}
 8015652:	bf00      	nop
 8015654:	371c      	adds	r7, #28
 8015656:	46bd      	mov	sp, r7
 8015658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801565c:	4770      	bx	lr

0801565e <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801565e:	b580      	push	{r7, lr}
 8015660:	b084      	sub	sp, #16
 8015662:	af00      	add	r7, sp, #0
 8015664:	6078      	str	r0, [r7, #4]
 8015666:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8015668:	683b      	ldr	r3, [r7, #0]
 801566a:	2b04      	cmp	r3, #4
 801566c:	d00d      	beq.n	801568a <HAL_TIMEx_OCN_Start_IT+0x2c>
 801566e:	2b08      	cmp	r3, #8
 8015670:	d014      	beq.n	801569c <HAL_TIMEx_OCN_Start_IT+0x3e>
 8015672:	2b00      	cmp	r3, #0
 8015674:	d000      	beq.n	8015678 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8015676:	e01a      	b.n	80156ae <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	68da      	ldr	r2, [r3, #12]
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	f042 0202 	orr.w	r2, r2, #2
 8015686:	60da      	str	r2, [r3, #12]
      break;
 8015688:	e011      	b.n	80156ae <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	68da      	ldr	r2, [r3, #12]
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	f042 0204 	orr.w	r2, r2, #4
 8015698:	60da      	str	r2, [r3, #12]
      break;
 801569a:	e008      	b.n	80156ae <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	68da      	ldr	r2, [r3, #12]
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	f042 0208 	orr.w	r2, r2, #8
 80156aa:	60da      	str	r2, [r3, #12]
      break;
 80156ac:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	68da      	ldr	r2, [r3, #12]
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80156bc:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	2204      	movs	r2, #4
 80156c4:	6839      	ldr	r1, [r7, #0]
 80156c6:	4618      	mov	r0, r3
 80156c8:	f000 f976 	bl	80159b8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80156da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	689b      	ldr	r3, [r3, #8]
 80156e2:	f003 0307 	and.w	r3, r3, #7
 80156e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	2b06      	cmp	r3, #6
 80156ec:	d007      	beq.n	80156fe <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	681a      	ldr	r2, [r3, #0]
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	f042 0201 	orr.w	r2, r2, #1
 80156fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80156fe:	2300      	movs	r3, #0
}
 8015700:	4618      	mov	r0, r3
 8015702:	3710      	adds	r7, #16
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}

08015708 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b084      	sub	sp, #16
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
 8015710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	2b04      	cmp	r3, #4
 8015716:	d00d      	beq.n	8015734 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8015718:	2b08      	cmp	r3, #8
 801571a:	d014      	beq.n	8015746 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 801571c:	2b00      	cmp	r3, #0
 801571e:	d000      	beq.n	8015722 <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8015720:	e01a      	b.n	8015758 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	68da      	ldr	r2, [r3, #12]
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	f022 0202 	bic.w	r2, r2, #2
 8015730:	60da      	str	r2, [r3, #12]
      break;
 8015732:	e011      	b.n	8015758 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	68da      	ldr	r2, [r3, #12]
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	f022 0204 	bic.w	r2, r2, #4
 8015742:	60da      	str	r2, [r3, #12]
      break;
 8015744:	e008      	b.n	8015758 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	68da      	ldr	r2, [r3, #12]
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	f022 0208 	bic.w	r2, r2, #8
 8015754:	60da      	str	r2, [r3, #12]
      break;
 8015756:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	2200      	movs	r2, #0
 801575e:	6839      	ldr	r1, [r7, #0]
 8015760:	4618      	mov	r0, r3
 8015762:	f000 f929 	bl	80159b8 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	6a1b      	ldr	r3, [r3, #32]
 801576c:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 801576e:	68fa      	ldr	r2, [r7, #12]
 8015770:	f240 4344 	movw	r3, #1092	; 0x444
 8015774:	4013      	ands	r3, r2
 8015776:	2b00      	cmp	r3, #0
 8015778:	d107      	bne.n	801578a <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	68da      	ldr	r2, [r3, #12]
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015788:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	6a1a      	ldr	r2, [r3, #32]
 8015790:	f241 1311 	movw	r3, #4369	; 0x1111
 8015794:	4013      	ands	r3, r2
 8015796:	2b00      	cmp	r3, #0
 8015798:	d10f      	bne.n	80157ba <HAL_TIMEx_OCN_Stop_IT+0xb2>
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	6a1a      	ldr	r2, [r3, #32]
 80157a0:	f240 4344 	movw	r3, #1092	; 0x444
 80157a4:	4013      	ands	r3, r2
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d107      	bne.n	80157ba <HAL_TIMEx_OCN_Stop_IT+0xb2>
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80157b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	6a1a      	ldr	r2, [r3, #32]
 80157c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80157c4:	4013      	ands	r3, r2
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d10f      	bne.n	80157ea <HAL_TIMEx_OCN_Stop_IT+0xe2>
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	6a1a      	ldr	r2, [r3, #32]
 80157d0:	f240 4344 	movw	r3, #1092	; 0x444
 80157d4:	4013      	ands	r3, r2
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d107      	bne.n	80157ea <HAL_TIMEx_OCN_Stop_IT+0xe2>
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	681a      	ldr	r2, [r3, #0]
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	f022 0201 	bic.w	r2, r2, #1
 80157e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80157ea:	2300      	movs	r3, #0
}
 80157ec:	4618      	mov	r0, r3
 80157ee:	3710      	adds	r7, #16
 80157f0:	46bd      	mov	sp, r7
 80157f2:	bd80      	pop	{r7, pc}

080157f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80157f4:	b480      	push	{r7}
 80157f6:	b085      	sub	sp, #20
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
 80157fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015804:	2b01      	cmp	r3, #1
 8015806:	d101      	bne.n	801580c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015808:	2302      	movs	r3, #2
 801580a:	e05a      	b.n	80158c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	2201      	movs	r2, #1
 8015810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	2202      	movs	r2, #2
 8015818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	689b      	ldr	r3, [r3, #8]
 801582a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015834:	683b      	ldr	r3, [r7, #0]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	68fa      	ldr	r2, [r7, #12]
 801583a:	4313      	orrs	r3, r2
 801583c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	68fa      	ldr	r2, [r7, #12]
 8015844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	4a21      	ldr	r2, [pc, #132]	; (80158d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801584c:	4293      	cmp	r3, r2
 801584e:	d022      	beq.n	8015896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015858:	d01d      	beq.n	8015896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	4a1d      	ldr	r2, [pc, #116]	; (80158d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8015860:	4293      	cmp	r3, r2
 8015862:	d018      	beq.n	8015896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	4a1b      	ldr	r2, [pc, #108]	; (80158d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801586a:	4293      	cmp	r3, r2
 801586c:	d013      	beq.n	8015896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	4a1a      	ldr	r2, [pc, #104]	; (80158dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8015874:	4293      	cmp	r3, r2
 8015876:	d00e      	beq.n	8015896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	4a18      	ldr	r2, [pc, #96]	; (80158e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801587e:	4293      	cmp	r3, r2
 8015880:	d009      	beq.n	8015896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	4a17      	ldr	r2, [pc, #92]	; (80158e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8015888:	4293      	cmp	r3, r2
 801588a:	d004      	beq.n	8015896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	4a15      	ldr	r2, [pc, #84]	; (80158e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8015892:	4293      	cmp	r3, r2
 8015894:	d10c      	bne.n	80158b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015896:	68bb      	ldr	r3, [r7, #8]
 8015898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801589c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	685b      	ldr	r3, [r3, #4]
 80158a2:	68ba      	ldr	r2, [r7, #8]
 80158a4:	4313      	orrs	r3, r2
 80158a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	68ba      	ldr	r2, [r7, #8]
 80158ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	2201      	movs	r2, #1
 80158b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	2200      	movs	r2, #0
 80158bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80158c0:	2300      	movs	r3, #0
}
 80158c2:	4618      	mov	r0, r3
 80158c4:	3714      	adds	r7, #20
 80158c6:	46bd      	mov	sp, r7
 80158c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158cc:	4770      	bx	lr
 80158ce:	bf00      	nop
 80158d0:	40010000 	.word	0x40010000
 80158d4:	40000400 	.word	0x40000400
 80158d8:	40000800 	.word	0x40000800
 80158dc:	40000c00 	.word	0x40000c00
 80158e0:	40010400 	.word	0x40010400
 80158e4:	40014000 	.word	0x40014000
 80158e8:	40001800 	.word	0x40001800

080158ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80158ec:	b480      	push	{r7}
 80158ee:	b085      	sub	sp, #20
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
 80158f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80158f6:	2300      	movs	r3, #0
 80158f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015900:	2b01      	cmp	r3, #1
 8015902:	d101      	bne.n	8015908 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8015904:	2302      	movs	r3, #2
 8015906:	e03d      	b.n	8015984 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	2201      	movs	r2, #1
 801590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8015916:	683b      	ldr	r3, [r7, #0]
 8015918:	68db      	ldr	r3, [r3, #12]
 801591a:	4313      	orrs	r3, r2
 801591c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	689b      	ldr	r3, [r3, #8]
 8015928:	4313      	orrs	r3, r2
 801592a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8015932:	683b      	ldr	r3, [r7, #0]
 8015934:	685b      	ldr	r3, [r3, #4]
 8015936:	4313      	orrs	r3, r2
 8015938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	4313      	orrs	r3, r2
 8015946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	691b      	ldr	r3, [r3, #16]
 8015952:	4313      	orrs	r3, r2
 8015954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	695b      	ldr	r3, [r3, #20]
 8015960:	4313      	orrs	r3, r2
 8015962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801596a:	683b      	ldr	r3, [r7, #0]
 801596c:	69db      	ldr	r3, [r3, #28]
 801596e:	4313      	orrs	r3, r2
 8015970:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	68fa      	ldr	r2, [r7, #12]
 8015978:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	2200      	movs	r2, #0
 801597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015982:	2300      	movs	r3, #0
}
 8015984:	4618      	mov	r0, r3
 8015986:	3714      	adds	r7, #20
 8015988:	46bd      	mov	sp, r7
 801598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598e:	4770      	bx	lr

08015990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015990:	b480      	push	{r7}
 8015992:	b083      	sub	sp, #12
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015998:	bf00      	nop
 801599a:	370c      	adds	r7, #12
 801599c:	46bd      	mov	sp, r7
 801599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a2:	4770      	bx	lr

080159a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80159a4:	b480      	push	{r7}
 80159a6:	b083      	sub	sp, #12
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80159ac:	bf00      	nop
 80159ae:	370c      	adds	r7, #12
 80159b0:	46bd      	mov	sp, r7
 80159b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b6:	4770      	bx	lr

080159b8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80159b8:	b480      	push	{r7}
 80159ba:	b087      	sub	sp, #28
 80159bc:	af00      	add	r7, sp, #0
 80159be:	60f8      	str	r0, [r7, #12]
 80159c0:	60b9      	str	r1, [r7, #8]
 80159c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	f003 031f 	and.w	r3, r3, #31
 80159ca:	2204      	movs	r2, #4
 80159cc:	fa02 f303 	lsl.w	r3, r2, r3
 80159d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	6a1a      	ldr	r2, [r3, #32]
 80159d6:	697b      	ldr	r3, [r7, #20]
 80159d8:	43db      	mvns	r3, r3
 80159da:	401a      	ands	r2, r3
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	6a1a      	ldr	r2, [r3, #32]
 80159e4:	68bb      	ldr	r3, [r7, #8]
 80159e6:	f003 031f 	and.w	r3, r3, #31
 80159ea:	6879      	ldr	r1, [r7, #4]
 80159ec:	fa01 f303 	lsl.w	r3, r1, r3
 80159f0:	431a      	orrs	r2, r3
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	621a      	str	r2, [r3, #32]
}
 80159f6:	bf00      	nop
 80159f8:	371c      	adds	r7, #28
 80159fa:	46bd      	mov	sp, r7
 80159fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a00:	4770      	bx	lr

08015a02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015a02:	b580      	push	{r7, lr}
 8015a04:	b082      	sub	sp, #8
 8015a06:	af00      	add	r7, sp, #0
 8015a08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d101      	bne.n	8015a14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015a10:	2301      	movs	r3, #1
 8015a12:	e03f      	b.n	8015a94 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015a1a:	b2db      	uxtb	r3, r3
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d106      	bne.n	8015a2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	2200      	movs	r2, #0
 8015a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015a28:	6878      	ldr	r0, [r7, #4]
 8015a2a:	f7fa f855 	bl	800fad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	2224      	movs	r2, #36	; 0x24
 8015a32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	68da      	ldr	r2, [r3, #12]
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015a44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015a46:	6878      	ldr	r0, [r7, #4]
 8015a48:	f000 f9b2 	bl	8015db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	691a      	ldr	r2, [r3, #16]
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015a5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	695a      	ldr	r2, [r3, #20]
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015a6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	68da      	ldr	r2, [r3, #12]
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015a7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	2200      	movs	r2, #0
 8015a80:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	2220      	movs	r2, #32
 8015a86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	2220      	movs	r2, #32
 8015a8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8015a92:	2300      	movs	r3, #0
}
 8015a94:	4618      	mov	r0, r3
 8015a96:	3708      	adds	r7, #8
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd80      	pop	{r7, pc}

08015a9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b088      	sub	sp, #32
 8015aa0:	af02      	add	r7, sp, #8
 8015aa2:	60f8      	str	r0, [r7, #12]
 8015aa4:	60b9      	str	r1, [r7, #8]
 8015aa6:	603b      	str	r3, [r7, #0]
 8015aa8:	4613      	mov	r3, r2
 8015aaa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8015aac:	2300      	movs	r3, #0
 8015aae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015ab6:	b2db      	uxtb	r3, r3
 8015ab8:	2b20      	cmp	r3, #32
 8015aba:	f040 8083 	bne.w	8015bc4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8015abe:	68bb      	ldr	r3, [r7, #8]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d002      	beq.n	8015aca <HAL_UART_Transmit+0x2e>
 8015ac4:	88fb      	ldrh	r3, [r7, #6]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d101      	bne.n	8015ace <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8015aca:	2301      	movs	r3, #1
 8015acc:	e07b      	b.n	8015bc6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015ad4:	2b01      	cmp	r3, #1
 8015ad6:	d101      	bne.n	8015adc <HAL_UART_Transmit+0x40>
 8015ad8:	2302      	movs	r3, #2
 8015ada:	e074      	b.n	8015bc6 <HAL_UART_Transmit+0x12a>
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	2201      	movs	r2, #1
 8015ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	2221      	movs	r2, #33	; 0x21
 8015aee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8015af2:	f7fb fd25 	bl	8011540 <HAL_GetTick>
 8015af6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	88fa      	ldrh	r2, [r7, #6]
 8015afc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	88fa      	ldrh	r2, [r7, #6]
 8015b02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	2200      	movs	r2, #0
 8015b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8015b0c:	e042      	b.n	8015b94 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015b12:	b29b      	uxth	r3, r3
 8015b14:	3b01      	subs	r3, #1
 8015b16:	b29a      	uxth	r2, r3
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	689b      	ldr	r3, [r3, #8]
 8015b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b24:	d122      	bne.n	8015b6c <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015b26:	683b      	ldr	r3, [r7, #0]
 8015b28:	9300      	str	r3, [sp, #0]
 8015b2a:	697b      	ldr	r3, [r7, #20]
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	2180      	movs	r1, #128	; 0x80
 8015b30:	68f8      	ldr	r0, [r7, #12]
 8015b32:	f000 f8f2 	bl	8015d1a <UART_WaitOnFlagUntilTimeout>
 8015b36:	4603      	mov	r3, r0
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d001      	beq.n	8015b40 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8015b3c:	2303      	movs	r3, #3
 8015b3e:	e042      	b.n	8015bc6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8015b40:	68bb      	ldr	r3, [r7, #8]
 8015b42:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8015b44:	693b      	ldr	r3, [r7, #16]
 8015b46:	881b      	ldrh	r3, [r3, #0]
 8015b48:	461a      	mov	r2, r3
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015b52:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	691b      	ldr	r3, [r3, #16]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d103      	bne.n	8015b64 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	3302      	adds	r3, #2
 8015b60:	60bb      	str	r3, [r7, #8]
 8015b62:	e017      	b.n	8015b94 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8015b64:	68bb      	ldr	r3, [r7, #8]
 8015b66:	3301      	adds	r3, #1
 8015b68:	60bb      	str	r3, [r7, #8]
 8015b6a:	e013      	b.n	8015b94 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015b6c:	683b      	ldr	r3, [r7, #0]
 8015b6e:	9300      	str	r3, [sp, #0]
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	2200      	movs	r2, #0
 8015b74:	2180      	movs	r1, #128	; 0x80
 8015b76:	68f8      	ldr	r0, [r7, #12]
 8015b78:	f000 f8cf 	bl	8015d1a <UART_WaitOnFlagUntilTimeout>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d001      	beq.n	8015b86 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8015b82:	2303      	movs	r3, #3
 8015b84:	e01f      	b.n	8015bc6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8015b86:	68bb      	ldr	r3, [r7, #8]
 8015b88:	1c5a      	adds	r2, r3, #1
 8015b8a:	60ba      	str	r2, [r7, #8]
 8015b8c:	781a      	ldrb	r2, [r3, #0]
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015b98:	b29b      	uxth	r3, r3
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d1b7      	bne.n	8015b0e <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	9300      	str	r3, [sp, #0]
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	2140      	movs	r1, #64	; 0x40
 8015ba8:	68f8      	ldr	r0, [r7, #12]
 8015baa:	f000 f8b6 	bl	8015d1a <UART_WaitOnFlagUntilTimeout>
 8015bae:	4603      	mov	r3, r0
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d001      	beq.n	8015bb8 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8015bb4:	2303      	movs	r3, #3
 8015bb6:	e006      	b.n	8015bc6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	2220      	movs	r2, #32
 8015bbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	e000      	b.n	8015bc6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8015bc4:	2302      	movs	r3, #2
  }
}
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	3718      	adds	r7, #24
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	bd80      	pop	{r7, pc}

08015bce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015bce:	b580      	push	{r7, lr}
 8015bd0:	b088      	sub	sp, #32
 8015bd2:	af02      	add	r7, sp, #8
 8015bd4:	60f8      	str	r0, [r7, #12]
 8015bd6:	60b9      	str	r1, [r7, #8]
 8015bd8:	603b      	str	r3, [r7, #0]
 8015bda:	4613      	mov	r3, r2
 8015bdc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8015bde:	2300      	movs	r3, #0
 8015be0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8015be8:	b2db      	uxtb	r3, r3
 8015bea:	2b20      	cmp	r3, #32
 8015bec:	f040 8090 	bne.w	8015d10 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8015bf0:	68bb      	ldr	r3, [r7, #8]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d002      	beq.n	8015bfc <HAL_UART_Receive+0x2e>
 8015bf6:	88fb      	ldrh	r3, [r7, #6]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d101      	bne.n	8015c00 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8015bfc:	2301      	movs	r3, #1
 8015bfe:	e088      	b.n	8015d12 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015c06:	2b01      	cmp	r3, #1
 8015c08:	d101      	bne.n	8015c0e <HAL_UART_Receive+0x40>
 8015c0a:	2302      	movs	r3, #2
 8015c0c:	e081      	b.n	8015d12 <HAL_UART_Receive+0x144>
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	2201      	movs	r2, #1
 8015c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	2200      	movs	r2, #0
 8015c1a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	2222      	movs	r2, #34	; 0x22
 8015c20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8015c24:	f7fb fc8c 	bl	8011540 <HAL_GetTick>
 8015c28:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	88fa      	ldrh	r2, [r7, #6]
 8015c2e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	88fa      	ldrh	r2, [r7, #6]
 8015c34:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	2200      	movs	r2, #0
 8015c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8015c3e:	e05c      	b.n	8015cfa <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015c44:	b29b      	uxth	r3, r3
 8015c46:	3b01      	subs	r3, #1
 8015c48:	b29a      	uxth	r2, r3
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	689b      	ldr	r3, [r3, #8]
 8015c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015c56:	d12b      	bne.n	8015cb0 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015c58:	683b      	ldr	r3, [r7, #0]
 8015c5a:	9300      	str	r3, [sp, #0]
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	2200      	movs	r2, #0
 8015c60:	2120      	movs	r1, #32
 8015c62:	68f8      	ldr	r0, [r7, #12]
 8015c64:	f000 f859 	bl	8015d1a <UART_WaitOnFlagUntilTimeout>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d001      	beq.n	8015c72 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8015c6e:	2303      	movs	r3, #3
 8015c70:	e04f      	b.n	8015d12 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8015c72:	68bb      	ldr	r3, [r7, #8]
 8015c74:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	691b      	ldr	r3, [r3, #16]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d10c      	bne.n	8015c98 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	685b      	ldr	r3, [r3, #4]
 8015c84:	b29b      	uxth	r3, r3
 8015c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c8a:	b29a      	uxth	r2, r3
 8015c8c:	693b      	ldr	r3, [r7, #16]
 8015c8e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	3302      	adds	r3, #2
 8015c94:	60bb      	str	r3, [r7, #8]
 8015c96:	e030      	b.n	8015cfa <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	685b      	ldr	r3, [r3, #4]
 8015c9e:	b29b      	uxth	r3, r3
 8015ca0:	b2db      	uxtb	r3, r3
 8015ca2:	b29a      	uxth	r2, r3
 8015ca4:	693b      	ldr	r3, [r7, #16]
 8015ca6:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8015ca8:	68bb      	ldr	r3, [r7, #8]
 8015caa:	3301      	adds	r3, #1
 8015cac:	60bb      	str	r3, [r7, #8]
 8015cae:	e024      	b.n	8015cfa <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015cb0:	683b      	ldr	r3, [r7, #0]
 8015cb2:	9300      	str	r3, [sp, #0]
 8015cb4:	697b      	ldr	r3, [r7, #20]
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	2120      	movs	r1, #32
 8015cba:	68f8      	ldr	r0, [r7, #12]
 8015cbc:	f000 f82d 	bl	8015d1a <UART_WaitOnFlagUntilTimeout>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d001      	beq.n	8015cca <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8015cc6:	2303      	movs	r3, #3
 8015cc8:	e023      	b.n	8015d12 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	691b      	ldr	r3, [r3, #16]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d108      	bne.n	8015ce4 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	6859      	ldr	r1, [r3, #4]
 8015cd8:	68bb      	ldr	r3, [r7, #8]
 8015cda:	1c5a      	adds	r2, r3, #1
 8015cdc:	60ba      	str	r2, [r7, #8]
 8015cde:	b2ca      	uxtb	r2, r1
 8015ce0:	701a      	strb	r2, [r3, #0]
 8015ce2:	e00a      	b.n	8015cfa <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	685b      	ldr	r3, [r3, #4]
 8015cea:	b2da      	uxtb	r2, r3
 8015cec:	68bb      	ldr	r3, [r7, #8]
 8015cee:	1c59      	adds	r1, r3, #1
 8015cf0:	60b9      	str	r1, [r7, #8]
 8015cf2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015cf6:	b2d2      	uxtb	r2, r2
 8015cf8:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015cfe:	b29b      	uxth	r3, r3
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d19d      	bne.n	8015c40 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	2220      	movs	r2, #32
 8015d08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	e000      	b.n	8015d12 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8015d10:	2302      	movs	r3, #2
  }
}
 8015d12:	4618      	mov	r0, r3
 8015d14:	3718      	adds	r7, #24
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd80      	pop	{r7, pc}

08015d1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8015d1a:	b580      	push	{r7, lr}
 8015d1c:	b084      	sub	sp, #16
 8015d1e:	af00      	add	r7, sp, #0
 8015d20:	60f8      	str	r0, [r7, #12]
 8015d22:	60b9      	str	r1, [r7, #8]
 8015d24:	603b      	str	r3, [r7, #0]
 8015d26:	4613      	mov	r3, r2
 8015d28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015d2a:	e02c      	b.n	8015d86 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015d2c:	69bb      	ldr	r3, [r7, #24]
 8015d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d32:	d028      	beq.n	8015d86 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8015d34:	69bb      	ldr	r3, [r7, #24]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d007      	beq.n	8015d4a <UART_WaitOnFlagUntilTimeout+0x30>
 8015d3a:	f7fb fc01 	bl	8011540 <HAL_GetTick>
 8015d3e:	4602      	mov	r2, r0
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	1ad3      	subs	r3, r2, r3
 8015d44:	69ba      	ldr	r2, [r7, #24]
 8015d46:	429a      	cmp	r2, r3
 8015d48:	d21d      	bcs.n	8015d86 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	68da      	ldr	r2, [r3, #12]
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8015d58:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	695a      	ldr	r2, [r3, #20]
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	f022 0201 	bic.w	r2, r2, #1
 8015d68:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	2220      	movs	r2, #32
 8015d6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	2220      	movs	r2, #32
 8015d76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8015d82:	2303      	movs	r3, #3
 8015d84:	e00f      	b.n	8015da6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	681a      	ldr	r2, [r3, #0]
 8015d8c:	68bb      	ldr	r3, [r7, #8]
 8015d8e:	4013      	ands	r3, r2
 8015d90:	68ba      	ldr	r2, [r7, #8]
 8015d92:	429a      	cmp	r2, r3
 8015d94:	bf0c      	ite	eq
 8015d96:	2301      	moveq	r3, #1
 8015d98:	2300      	movne	r3, #0
 8015d9a:	b2db      	uxtb	r3, r3
 8015d9c:	461a      	mov	r2, r3
 8015d9e:	79fb      	ldrb	r3, [r7, #7]
 8015da0:	429a      	cmp	r2, r3
 8015da2:	d0c3      	beq.n	8015d2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8015da4:	2300      	movs	r3, #0
}
 8015da6:	4618      	mov	r0, r3
 8015da8:	3710      	adds	r7, #16
 8015daa:	46bd      	mov	sp, r7
 8015dac:	bd80      	pop	{r7, pc}
	...

08015db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015db4:	b085      	sub	sp, #20
 8015db6:	af00      	add	r7, sp, #0
 8015db8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	691b      	ldr	r3, [r3, #16]
 8015dc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	68da      	ldr	r2, [r3, #12]
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	430a      	orrs	r2, r1
 8015dce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	689a      	ldr	r2, [r3, #8]
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	691b      	ldr	r3, [r3, #16]
 8015dd8:	431a      	orrs	r2, r3
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	695b      	ldr	r3, [r3, #20]
 8015dde:	431a      	orrs	r2, r3
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	69db      	ldr	r3, [r3, #28]
 8015de4:	4313      	orrs	r3, r2
 8015de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	68db      	ldr	r3, [r3, #12]
 8015dee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8015df2:	f023 030c 	bic.w	r3, r3, #12
 8015df6:	687a      	ldr	r2, [r7, #4]
 8015df8:	6812      	ldr	r2, [r2, #0]
 8015dfa:	68f9      	ldr	r1, [r7, #12]
 8015dfc:	430b      	orrs	r3, r1
 8015dfe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	695b      	ldr	r3, [r3, #20]
 8015e06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	699a      	ldr	r2, [r3, #24]
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	430a      	orrs	r2, r1
 8015e14:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	69db      	ldr	r3, [r3, #28]
 8015e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015e1e:	f040 818b 	bne.w	8016138 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	4ac1      	ldr	r2, [pc, #772]	; (801612c <UART_SetConfig+0x37c>)
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	d005      	beq.n	8015e38 <UART_SetConfig+0x88>
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	4abf      	ldr	r2, [pc, #764]	; (8016130 <UART_SetConfig+0x380>)
 8015e32:	4293      	cmp	r3, r2
 8015e34:	f040 80bd 	bne.w	8015fb2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8015e38:	f7fd fce2 	bl	8013800 <HAL_RCC_GetPCLK2Freq>
 8015e3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015e3e:	68bb      	ldr	r3, [r7, #8]
 8015e40:	461d      	mov	r5, r3
 8015e42:	f04f 0600 	mov.w	r6, #0
 8015e46:	46a8      	mov	r8, r5
 8015e48:	46b1      	mov	r9, r6
 8015e4a:	eb18 0308 	adds.w	r3, r8, r8
 8015e4e:	eb49 0409 	adc.w	r4, r9, r9
 8015e52:	4698      	mov	r8, r3
 8015e54:	46a1      	mov	r9, r4
 8015e56:	eb18 0805 	adds.w	r8, r8, r5
 8015e5a:	eb49 0906 	adc.w	r9, r9, r6
 8015e5e:	f04f 0100 	mov.w	r1, #0
 8015e62:	f04f 0200 	mov.w	r2, #0
 8015e66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015e6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015e6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015e72:	4688      	mov	r8, r1
 8015e74:	4691      	mov	r9, r2
 8015e76:	eb18 0005 	adds.w	r0, r8, r5
 8015e7a:	eb49 0106 	adc.w	r1, r9, r6
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	685b      	ldr	r3, [r3, #4]
 8015e82:	461d      	mov	r5, r3
 8015e84:	f04f 0600 	mov.w	r6, #0
 8015e88:	196b      	adds	r3, r5, r5
 8015e8a:	eb46 0406 	adc.w	r4, r6, r6
 8015e8e:	461a      	mov	r2, r3
 8015e90:	4623      	mov	r3, r4
 8015e92:	f7f2 fe31 	bl	8008af8 <__aeabi_uldivmod>
 8015e96:	4603      	mov	r3, r0
 8015e98:	460c      	mov	r4, r1
 8015e9a:	461a      	mov	r2, r3
 8015e9c:	4ba5      	ldr	r3, [pc, #660]	; (8016134 <UART_SetConfig+0x384>)
 8015e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8015ea2:	095b      	lsrs	r3, r3, #5
 8015ea4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015ea8:	68bb      	ldr	r3, [r7, #8]
 8015eaa:	461d      	mov	r5, r3
 8015eac:	f04f 0600 	mov.w	r6, #0
 8015eb0:	46a9      	mov	r9, r5
 8015eb2:	46b2      	mov	sl, r6
 8015eb4:	eb19 0309 	adds.w	r3, r9, r9
 8015eb8:	eb4a 040a 	adc.w	r4, sl, sl
 8015ebc:	4699      	mov	r9, r3
 8015ebe:	46a2      	mov	sl, r4
 8015ec0:	eb19 0905 	adds.w	r9, r9, r5
 8015ec4:	eb4a 0a06 	adc.w	sl, sl, r6
 8015ec8:	f04f 0100 	mov.w	r1, #0
 8015ecc:	f04f 0200 	mov.w	r2, #0
 8015ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015ed4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015ed8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015edc:	4689      	mov	r9, r1
 8015ede:	4692      	mov	sl, r2
 8015ee0:	eb19 0005 	adds.w	r0, r9, r5
 8015ee4:	eb4a 0106 	adc.w	r1, sl, r6
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	685b      	ldr	r3, [r3, #4]
 8015eec:	461d      	mov	r5, r3
 8015eee:	f04f 0600 	mov.w	r6, #0
 8015ef2:	196b      	adds	r3, r5, r5
 8015ef4:	eb46 0406 	adc.w	r4, r6, r6
 8015ef8:	461a      	mov	r2, r3
 8015efa:	4623      	mov	r3, r4
 8015efc:	f7f2 fdfc 	bl	8008af8 <__aeabi_uldivmod>
 8015f00:	4603      	mov	r3, r0
 8015f02:	460c      	mov	r4, r1
 8015f04:	461a      	mov	r2, r3
 8015f06:	4b8b      	ldr	r3, [pc, #556]	; (8016134 <UART_SetConfig+0x384>)
 8015f08:	fba3 1302 	umull	r1, r3, r3, r2
 8015f0c:	095b      	lsrs	r3, r3, #5
 8015f0e:	2164      	movs	r1, #100	; 0x64
 8015f10:	fb01 f303 	mul.w	r3, r1, r3
 8015f14:	1ad3      	subs	r3, r2, r3
 8015f16:	00db      	lsls	r3, r3, #3
 8015f18:	3332      	adds	r3, #50	; 0x32
 8015f1a:	4a86      	ldr	r2, [pc, #536]	; (8016134 <UART_SetConfig+0x384>)
 8015f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8015f20:	095b      	lsrs	r3, r3, #5
 8015f22:	005b      	lsls	r3, r3, #1
 8015f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015f28:	4498      	add	r8, r3
 8015f2a:	68bb      	ldr	r3, [r7, #8]
 8015f2c:	461d      	mov	r5, r3
 8015f2e:	f04f 0600 	mov.w	r6, #0
 8015f32:	46a9      	mov	r9, r5
 8015f34:	46b2      	mov	sl, r6
 8015f36:	eb19 0309 	adds.w	r3, r9, r9
 8015f3a:	eb4a 040a 	adc.w	r4, sl, sl
 8015f3e:	4699      	mov	r9, r3
 8015f40:	46a2      	mov	sl, r4
 8015f42:	eb19 0905 	adds.w	r9, r9, r5
 8015f46:	eb4a 0a06 	adc.w	sl, sl, r6
 8015f4a:	f04f 0100 	mov.w	r1, #0
 8015f4e:	f04f 0200 	mov.w	r2, #0
 8015f52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015f56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015f5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015f5e:	4689      	mov	r9, r1
 8015f60:	4692      	mov	sl, r2
 8015f62:	eb19 0005 	adds.w	r0, r9, r5
 8015f66:	eb4a 0106 	adc.w	r1, sl, r6
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	685b      	ldr	r3, [r3, #4]
 8015f6e:	461d      	mov	r5, r3
 8015f70:	f04f 0600 	mov.w	r6, #0
 8015f74:	196b      	adds	r3, r5, r5
 8015f76:	eb46 0406 	adc.w	r4, r6, r6
 8015f7a:	461a      	mov	r2, r3
 8015f7c:	4623      	mov	r3, r4
 8015f7e:	f7f2 fdbb 	bl	8008af8 <__aeabi_uldivmod>
 8015f82:	4603      	mov	r3, r0
 8015f84:	460c      	mov	r4, r1
 8015f86:	461a      	mov	r2, r3
 8015f88:	4b6a      	ldr	r3, [pc, #424]	; (8016134 <UART_SetConfig+0x384>)
 8015f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8015f8e:	095b      	lsrs	r3, r3, #5
 8015f90:	2164      	movs	r1, #100	; 0x64
 8015f92:	fb01 f303 	mul.w	r3, r1, r3
 8015f96:	1ad3      	subs	r3, r2, r3
 8015f98:	00db      	lsls	r3, r3, #3
 8015f9a:	3332      	adds	r3, #50	; 0x32
 8015f9c:	4a65      	ldr	r2, [pc, #404]	; (8016134 <UART_SetConfig+0x384>)
 8015f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8015fa2:	095b      	lsrs	r3, r3, #5
 8015fa4:	f003 0207 	and.w	r2, r3, #7
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	4442      	add	r2, r8
 8015fae:	609a      	str	r2, [r3, #8]
 8015fb0:	e26f      	b.n	8016492 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8015fb2:	f7fd fc11 	bl	80137d8 <HAL_RCC_GetPCLK1Freq>
 8015fb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015fb8:	68bb      	ldr	r3, [r7, #8]
 8015fba:	461d      	mov	r5, r3
 8015fbc:	f04f 0600 	mov.w	r6, #0
 8015fc0:	46a8      	mov	r8, r5
 8015fc2:	46b1      	mov	r9, r6
 8015fc4:	eb18 0308 	adds.w	r3, r8, r8
 8015fc8:	eb49 0409 	adc.w	r4, r9, r9
 8015fcc:	4698      	mov	r8, r3
 8015fce:	46a1      	mov	r9, r4
 8015fd0:	eb18 0805 	adds.w	r8, r8, r5
 8015fd4:	eb49 0906 	adc.w	r9, r9, r6
 8015fd8:	f04f 0100 	mov.w	r1, #0
 8015fdc:	f04f 0200 	mov.w	r2, #0
 8015fe0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015fe4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015fe8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015fec:	4688      	mov	r8, r1
 8015fee:	4691      	mov	r9, r2
 8015ff0:	eb18 0005 	adds.w	r0, r8, r5
 8015ff4:	eb49 0106 	adc.w	r1, r9, r6
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	685b      	ldr	r3, [r3, #4]
 8015ffc:	461d      	mov	r5, r3
 8015ffe:	f04f 0600 	mov.w	r6, #0
 8016002:	196b      	adds	r3, r5, r5
 8016004:	eb46 0406 	adc.w	r4, r6, r6
 8016008:	461a      	mov	r2, r3
 801600a:	4623      	mov	r3, r4
 801600c:	f7f2 fd74 	bl	8008af8 <__aeabi_uldivmod>
 8016010:	4603      	mov	r3, r0
 8016012:	460c      	mov	r4, r1
 8016014:	461a      	mov	r2, r3
 8016016:	4b47      	ldr	r3, [pc, #284]	; (8016134 <UART_SetConfig+0x384>)
 8016018:	fba3 2302 	umull	r2, r3, r3, r2
 801601c:	095b      	lsrs	r3, r3, #5
 801601e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8016022:	68bb      	ldr	r3, [r7, #8]
 8016024:	461d      	mov	r5, r3
 8016026:	f04f 0600 	mov.w	r6, #0
 801602a:	46a9      	mov	r9, r5
 801602c:	46b2      	mov	sl, r6
 801602e:	eb19 0309 	adds.w	r3, r9, r9
 8016032:	eb4a 040a 	adc.w	r4, sl, sl
 8016036:	4699      	mov	r9, r3
 8016038:	46a2      	mov	sl, r4
 801603a:	eb19 0905 	adds.w	r9, r9, r5
 801603e:	eb4a 0a06 	adc.w	sl, sl, r6
 8016042:	f04f 0100 	mov.w	r1, #0
 8016046:	f04f 0200 	mov.w	r2, #0
 801604a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801604e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8016052:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8016056:	4689      	mov	r9, r1
 8016058:	4692      	mov	sl, r2
 801605a:	eb19 0005 	adds.w	r0, r9, r5
 801605e:	eb4a 0106 	adc.w	r1, sl, r6
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	685b      	ldr	r3, [r3, #4]
 8016066:	461d      	mov	r5, r3
 8016068:	f04f 0600 	mov.w	r6, #0
 801606c:	196b      	adds	r3, r5, r5
 801606e:	eb46 0406 	adc.w	r4, r6, r6
 8016072:	461a      	mov	r2, r3
 8016074:	4623      	mov	r3, r4
 8016076:	f7f2 fd3f 	bl	8008af8 <__aeabi_uldivmod>
 801607a:	4603      	mov	r3, r0
 801607c:	460c      	mov	r4, r1
 801607e:	461a      	mov	r2, r3
 8016080:	4b2c      	ldr	r3, [pc, #176]	; (8016134 <UART_SetConfig+0x384>)
 8016082:	fba3 1302 	umull	r1, r3, r3, r2
 8016086:	095b      	lsrs	r3, r3, #5
 8016088:	2164      	movs	r1, #100	; 0x64
 801608a:	fb01 f303 	mul.w	r3, r1, r3
 801608e:	1ad3      	subs	r3, r2, r3
 8016090:	00db      	lsls	r3, r3, #3
 8016092:	3332      	adds	r3, #50	; 0x32
 8016094:	4a27      	ldr	r2, [pc, #156]	; (8016134 <UART_SetConfig+0x384>)
 8016096:	fba2 2303 	umull	r2, r3, r2, r3
 801609a:	095b      	lsrs	r3, r3, #5
 801609c:	005b      	lsls	r3, r3, #1
 801609e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80160a2:	4498      	add	r8, r3
 80160a4:	68bb      	ldr	r3, [r7, #8]
 80160a6:	461d      	mov	r5, r3
 80160a8:	f04f 0600 	mov.w	r6, #0
 80160ac:	46a9      	mov	r9, r5
 80160ae:	46b2      	mov	sl, r6
 80160b0:	eb19 0309 	adds.w	r3, r9, r9
 80160b4:	eb4a 040a 	adc.w	r4, sl, sl
 80160b8:	4699      	mov	r9, r3
 80160ba:	46a2      	mov	sl, r4
 80160bc:	eb19 0905 	adds.w	r9, r9, r5
 80160c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80160c4:	f04f 0100 	mov.w	r1, #0
 80160c8:	f04f 0200 	mov.w	r2, #0
 80160cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80160d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80160d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80160d8:	4689      	mov	r9, r1
 80160da:	4692      	mov	sl, r2
 80160dc:	eb19 0005 	adds.w	r0, r9, r5
 80160e0:	eb4a 0106 	adc.w	r1, sl, r6
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	685b      	ldr	r3, [r3, #4]
 80160e8:	461d      	mov	r5, r3
 80160ea:	f04f 0600 	mov.w	r6, #0
 80160ee:	196b      	adds	r3, r5, r5
 80160f0:	eb46 0406 	adc.w	r4, r6, r6
 80160f4:	461a      	mov	r2, r3
 80160f6:	4623      	mov	r3, r4
 80160f8:	f7f2 fcfe 	bl	8008af8 <__aeabi_uldivmod>
 80160fc:	4603      	mov	r3, r0
 80160fe:	460c      	mov	r4, r1
 8016100:	461a      	mov	r2, r3
 8016102:	4b0c      	ldr	r3, [pc, #48]	; (8016134 <UART_SetConfig+0x384>)
 8016104:	fba3 1302 	umull	r1, r3, r3, r2
 8016108:	095b      	lsrs	r3, r3, #5
 801610a:	2164      	movs	r1, #100	; 0x64
 801610c:	fb01 f303 	mul.w	r3, r1, r3
 8016110:	1ad3      	subs	r3, r2, r3
 8016112:	00db      	lsls	r3, r3, #3
 8016114:	3332      	adds	r3, #50	; 0x32
 8016116:	4a07      	ldr	r2, [pc, #28]	; (8016134 <UART_SetConfig+0x384>)
 8016118:	fba2 2303 	umull	r2, r3, r2, r3
 801611c:	095b      	lsrs	r3, r3, #5
 801611e:	f003 0207 	and.w	r2, r3, #7
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	4442      	add	r2, r8
 8016128:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801612a:	e1b2      	b.n	8016492 <UART_SetConfig+0x6e2>
 801612c:	40011000 	.word	0x40011000
 8016130:	40011400 	.word	0x40011400
 8016134:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	4ad7      	ldr	r2, [pc, #860]	; (801649c <UART_SetConfig+0x6ec>)
 801613e:	4293      	cmp	r3, r2
 8016140:	d005      	beq.n	801614e <UART_SetConfig+0x39e>
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	4ad6      	ldr	r2, [pc, #856]	; (80164a0 <UART_SetConfig+0x6f0>)
 8016148:	4293      	cmp	r3, r2
 801614a:	f040 80d1 	bne.w	80162f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801614e:	f7fd fb57 	bl	8013800 <HAL_RCC_GetPCLK2Freq>
 8016152:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	469a      	mov	sl, r3
 8016158:	f04f 0b00 	mov.w	fp, #0
 801615c:	46d0      	mov	r8, sl
 801615e:	46d9      	mov	r9, fp
 8016160:	eb18 0308 	adds.w	r3, r8, r8
 8016164:	eb49 0409 	adc.w	r4, r9, r9
 8016168:	4698      	mov	r8, r3
 801616a:	46a1      	mov	r9, r4
 801616c:	eb18 080a 	adds.w	r8, r8, sl
 8016170:	eb49 090b 	adc.w	r9, r9, fp
 8016174:	f04f 0100 	mov.w	r1, #0
 8016178:	f04f 0200 	mov.w	r2, #0
 801617c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8016180:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8016184:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8016188:	4688      	mov	r8, r1
 801618a:	4691      	mov	r9, r2
 801618c:	eb1a 0508 	adds.w	r5, sl, r8
 8016190:	eb4b 0609 	adc.w	r6, fp, r9
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	685b      	ldr	r3, [r3, #4]
 8016198:	4619      	mov	r1, r3
 801619a:	f04f 0200 	mov.w	r2, #0
 801619e:	f04f 0300 	mov.w	r3, #0
 80161a2:	f04f 0400 	mov.w	r4, #0
 80161a6:	0094      	lsls	r4, r2, #2
 80161a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80161ac:	008b      	lsls	r3, r1, #2
 80161ae:	461a      	mov	r2, r3
 80161b0:	4623      	mov	r3, r4
 80161b2:	4628      	mov	r0, r5
 80161b4:	4631      	mov	r1, r6
 80161b6:	f7f2 fc9f 	bl	8008af8 <__aeabi_uldivmod>
 80161ba:	4603      	mov	r3, r0
 80161bc:	460c      	mov	r4, r1
 80161be:	461a      	mov	r2, r3
 80161c0:	4bb8      	ldr	r3, [pc, #736]	; (80164a4 <UART_SetConfig+0x6f4>)
 80161c2:	fba3 2302 	umull	r2, r3, r3, r2
 80161c6:	095b      	lsrs	r3, r3, #5
 80161c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80161cc:	68bb      	ldr	r3, [r7, #8]
 80161ce:	469b      	mov	fp, r3
 80161d0:	f04f 0c00 	mov.w	ip, #0
 80161d4:	46d9      	mov	r9, fp
 80161d6:	46e2      	mov	sl, ip
 80161d8:	eb19 0309 	adds.w	r3, r9, r9
 80161dc:	eb4a 040a 	adc.w	r4, sl, sl
 80161e0:	4699      	mov	r9, r3
 80161e2:	46a2      	mov	sl, r4
 80161e4:	eb19 090b 	adds.w	r9, r9, fp
 80161e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80161ec:	f04f 0100 	mov.w	r1, #0
 80161f0:	f04f 0200 	mov.w	r2, #0
 80161f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80161f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80161fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8016200:	4689      	mov	r9, r1
 8016202:	4692      	mov	sl, r2
 8016204:	eb1b 0509 	adds.w	r5, fp, r9
 8016208:	eb4c 060a 	adc.w	r6, ip, sl
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	685b      	ldr	r3, [r3, #4]
 8016210:	4619      	mov	r1, r3
 8016212:	f04f 0200 	mov.w	r2, #0
 8016216:	f04f 0300 	mov.w	r3, #0
 801621a:	f04f 0400 	mov.w	r4, #0
 801621e:	0094      	lsls	r4, r2, #2
 8016220:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8016224:	008b      	lsls	r3, r1, #2
 8016226:	461a      	mov	r2, r3
 8016228:	4623      	mov	r3, r4
 801622a:	4628      	mov	r0, r5
 801622c:	4631      	mov	r1, r6
 801622e:	f7f2 fc63 	bl	8008af8 <__aeabi_uldivmod>
 8016232:	4603      	mov	r3, r0
 8016234:	460c      	mov	r4, r1
 8016236:	461a      	mov	r2, r3
 8016238:	4b9a      	ldr	r3, [pc, #616]	; (80164a4 <UART_SetConfig+0x6f4>)
 801623a:	fba3 1302 	umull	r1, r3, r3, r2
 801623e:	095b      	lsrs	r3, r3, #5
 8016240:	2164      	movs	r1, #100	; 0x64
 8016242:	fb01 f303 	mul.w	r3, r1, r3
 8016246:	1ad3      	subs	r3, r2, r3
 8016248:	011b      	lsls	r3, r3, #4
 801624a:	3332      	adds	r3, #50	; 0x32
 801624c:	4a95      	ldr	r2, [pc, #596]	; (80164a4 <UART_SetConfig+0x6f4>)
 801624e:	fba2 2303 	umull	r2, r3, r2, r3
 8016252:	095b      	lsrs	r3, r3, #5
 8016254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016258:	4498      	add	r8, r3
 801625a:	68bb      	ldr	r3, [r7, #8]
 801625c:	469b      	mov	fp, r3
 801625e:	f04f 0c00 	mov.w	ip, #0
 8016262:	46d9      	mov	r9, fp
 8016264:	46e2      	mov	sl, ip
 8016266:	eb19 0309 	adds.w	r3, r9, r9
 801626a:	eb4a 040a 	adc.w	r4, sl, sl
 801626e:	4699      	mov	r9, r3
 8016270:	46a2      	mov	sl, r4
 8016272:	eb19 090b 	adds.w	r9, r9, fp
 8016276:	eb4a 0a0c 	adc.w	sl, sl, ip
 801627a:	f04f 0100 	mov.w	r1, #0
 801627e:	f04f 0200 	mov.w	r2, #0
 8016282:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8016286:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801628a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801628e:	4689      	mov	r9, r1
 8016290:	4692      	mov	sl, r2
 8016292:	eb1b 0509 	adds.w	r5, fp, r9
 8016296:	eb4c 060a 	adc.w	r6, ip, sl
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	685b      	ldr	r3, [r3, #4]
 801629e:	4619      	mov	r1, r3
 80162a0:	f04f 0200 	mov.w	r2, #0
 80162a4:	f04f 0300 	mov.w	r3, #0
 80162a8:	f04f 0400 	mov.w	r4, #0
 80162ac:	0094      	lsls	r4, r2, #2
 80162ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80162b2:	008b      	lsls	r3, r1, #2
 80162b4:	461a      	mov	r2, r3
 80162b6:	4623      	mov	r3, r4
 80162b8:	4628      	mov	r0, r5
 80162ba:	4631      	mov	r1, r6
 80162bc:	f7f2 fc1c 	bl	8008af8 <__aeabi_uldivmod>
 80162c0:	4603      	mov	r3, r0
 80162c2:	460c      	mov	r4, r1
 80162c4:	461a      	mov	r2, r3
 80162c6:	4b77      	ldr	r3, [pc, #476]	; (80164a4 <UART_SetConfig+0x6f4>)
 80162c8:	fba3 1302 	umull	r1, r3, r3, r2
 80162cc:	095b      	lsrs	r3, r3, #5
 80162ce:	2164      	movs	r1, #100	; 0x64
 80162d0:	fb01 f303 	mul.w	r3, r1, r3
 80162d4:	1ad3      	subs	r3, r2, r3
 80162d6:	011b      	lsls	r3, r3, #4
 80162d8:	3332      	adds	r3, #50	; 0x32
 80162da:	4a72      	ldr	r2, [pc, #456]	; (80164a4 <UART_SetConfig+0x6f4>)
 80162dc:	fba2 2303 	umull	r2, r3, r2, r3
 80162e0:	095b      	lsrs	r3, r3, #5
 80162e2:	f003 020f 	and.w	r2, r3, #15
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	4442      	add	r2, r8
 80162ec:	609a      	str	r2, [r3, #8]
 80162ee:	e0d0      	b.n	8016492 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80162f0:	f7fd fa72 	bl	80137d8 <HAL_RCC_GetPCLK1Freq>
 80162f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80162f6:	68bb      	ldr	r3, [r7, #8]
 80162f8:	469a      	mov	sl, r3
 80162fa:	f04f 0b00 	mov.w	fp, #0
 80162fe:	46d0      	mov	r8, sl
 8016300:	46d9      	mov	r9, fp
 8016302:	eb18 0308 	adds.w	r3, r8, r8
 8016306:	eb49 0409 	adc.w	r4, r9, r9
 801630a:	4698      	mov	r8, r3
 801630c:	46a1      	mov	r9, r4
 801630e:	eb18 080a 	adds.w	r8, r8, sl
 8016312:	eb49 090b 	adc.w	r9, r9, fp
 8016316:	f04f 0100 	mov.w	r1, #0
 801631a:	f04f 0200 	mov.w	r2, #0
 801631e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8016322:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8016326:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801632a:	4688      	mov	r8, r1
 801632c:	4691      	mov	r9, r2
 801632e:	eb1a 0508 	adds.w	r5, sl, r8
 8016332:	eb4b 0609 	adc.w	r6, fp, r9
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	4619      	mov	r1, r3
 801633c:	f04f 0200 	mov.w	r2, #0
 8016340:	f04f 0300 	mov.w	r3, #0
 8016344:	f04f 0400 	mov.w	r4, #0
 8016348:	0094      	lsls	r4, r2, #2
 801634a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801634e:	008b      	lsls	r3, r1, #2
 8016350:	461a      	mov	r2, r3
 8016352:	4623      	mov	r3, r4
 8016354:	4628      	mov	r0, r5
 8016356:	4631      	mov	r1, r6
 8016358:	f7f2 fbce 	bl	8008af8 <__aeabi_uldivmod>
 801635c:	4603      	mov	r3, r0
 801635e:	460c      	mov	r4, r1
 8016360:	461a      	mov	r2, r3
 8016362:	4b50      	ldr	r3, [pc, #320]	; (80164a4 <UART_SetConfig+0x6f4>)
 8016364:	fba3 2302 	umull	r2, r3, r3, r2
 8016368:	095b      	lsrs	r3, r3, #5
 801636a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801636e:	68bb      	ldr	r3, [r7, #8]
 8016370:	469b      	mov	fp, r3
 8016372:	f04f 0c00 	mov.w	ip, #0
 8016376:	46d9      	mov	r9, fp
 8016378:	46e2      	mov	sl, ip
 801637a:	eb19 0309 	adds.w	r3, r9, r9
 801637e:	eb4a 040a 	adc.w	r4, sl, sl
 8016382:	4699      	mov	r9, r3
 8016384:	46a2      	mov	sl, r4
 8016386:	eb19 090b 	adds.w	r9, r9, fp
 801638a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801638e:	f04f 0100 	mov.w	r1, #0
 8016392:	f04f 0200 	mov.w	r2, #0
 8016396:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801639a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801639e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80163a2:	4689      	mov	r9, r1
 80163a4:	4692      	mov	sl, r2
 80163a6:	eb1b 0509 	adds.w	r5, fp, r9
 80163aa:	eb4c 060a 	adc.w	r6, ip, sl
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	685b      	ldr	r3, [r3, #4]
 80163b2:	4619      	mov	r1, r3
 80163b4:	f04f 0200 	mov.w	r2, #0
 80163b8:	f04f 0300 	mov.w	r3, #0
 80163bc:	f04f 0400 	mov.w	r4, #0
 80163c0:	0094      	lsls	r4, r2, #2
 80163c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80163c6:	008b      	lsls	r3, r1, #2
 80163c8:	461a      	mov	r2, r3
 80163ca:	4623      	mov	r3, r4
 80163cc:	4628      	mov	r0, r5
 80163ce:	4631      	mov	r1, r6
 80163d0:	f7f2 fb92 	bl	8008af8 <__aeabi_uldivmod>
 80163d4:	4603      	mov	r3, r0
 80163d6:	460c      	mov	r4, r1
 80163d8:	461a      	mov	r2, r3
 80163da:	4b32      	ldr	r3, [pc, #200]	; (80164a4 <UART_SetConfig+0x6f4>)
 80163dc:	fba3 1302 	umull	r1, r3, r3, r2
 80163e0:	095b      	lsrs	r3, r3, #5
 80163e2:	2164      	movs	r1, #100	; 0x64
 80163e4:	fb01 f303 	mul.w	r3, r1, r3
 80163e8:	1ad3      	subs	r3, r2, r3
 80163ea:	011b      	lsls	r3, r3, #4
 80163ec:	3332      	adds	r3, #50	; 0x32
 80163ee:	4a2d      	ldr	r2, [pc, #180]	; (80164a4 <UART_SetConfig+0x6f4>)
 80163f0:	fba2 2303 	umull	r2, r3, r2, r3
 80163f4:	095b      	lsrs	r3, r3, #5
 80163f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80163fa:	4498      	add	r8, r3
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	469b      	mov	fp, r3
 8016400:	f04f 0c00 	mov.w	ip, #0
 8016404:	46d9      	mov	r9, fp
 8016406:	46e2      	mov	sl, ip
 8016408:	eb19 0309 	adds.w	r3, r9, r9
 801640c:	eb4a 040a 	adc.w	r4, sl, sl
 8016410:	4699      	mov	r9, r3
 8016412:	46a2      	mov	sl, r4
 8016414:	eb19 090b 	adds.w	r9, r9, fp
 8016418:	eb4a 0a0c 	adc.w	sl, sl, ip
 801641c:	f04f 0100 	mov.w	r1, #0
 8016420:	f04f 0200 	mov.w	r2, #0
 8016424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8016428:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801642c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8016430:	4689      	mov	r9, r1
 8016432:	4692      	mov	sl, r2
 8016434:	eb1b 0509 	adds.w	r5, fp, r9
 8016438:	eb4c 060a 	adc.w	r6, ip, sl
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	685b      	ldr	r3, [r3, #4]
 8016440:	4619      	mov	r1, r3
 8016442:	f04f 0200 	mov.w	r2, #0
 8016446:	f04f 0300 	mov.w	r3, #0
 801644a:	f04f 0400 	mov.w	r4, #0
 801644e:	0094      	lsls	r4, r2, #2
 8016450:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8016454:	008b      	lsls	r3, r1, #2
 8016456:	461a      	mov	r2, r3
 8016458:	4623      	mov	r3, r4
 801645a:	4628      	mov	r0, r5
 801645c:	4631      	mov	r1, r6
 801645e:	f7f2 fb4b 	bl	8008af8 <__aeabi_uldivmod>
 8016462:	4603      	mov	r3, r0
 8016464:	460c      	mov	r4, r1
 8016466:	461a      	mov	r2, r3
 8016468:	4b0e      	ldr	r3, [pc, #56]	; (80164a4 <UART_SetConfig+0x6f4>)
 801646a:	fba3 1302 	umull	r1, r3, r3, r2
 801646e:	095b      	lsrs	r3, r3, #5
 8016470:	2164      	movs	r1, #100	; 0x64
 8016472:	fb01 f303 	mul.w	r3, r1, r3
 8016476:	1ad3      	subs	r3, r2, r3
 8016478:	011b      	lsls	r3, r3, #4
 801647a:	3332      	adds	r3, #50	; 0x32
 801647c:	4a09      	ldr	r2, [pc, #36]	; (80164a4 <UART_SetConfig+0x6f4>)
 801647e:	fba2 2303 	umull	r2, r3, r2, r3
 8016482:	095b      	lsrs	r3, r3, #5
 8016484:	f003 020f 	and.w	r2, r3, #15
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	4442      	add	r2, r8
 801648e:	609a      	str	r2, [r3, #8]
}
 8016490:	e7ff      	b.n	8016492 <UART_SetConfig+0x6e2>
 8016492:	bf00      	nop
 8016494:	3714      	adds	r7, #20
 8016496:	46bd      	mov	sp, r7
 8016498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801649c:	40011000 	.word	0x40011000
 80164a0:	40011400 	.word	0x40011400
 80164a4:	51eb851f 	.word	0x51eb851f

080164a8 <round>:
 80164a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164aa:	ec57 6b10 	vmov	r6, r7, d0
 80164ae:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80164b2:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80164b6:	2c13      	cmp	r4, #19
 80164b8:	463b      	mov	r3, r7
 80164ba:	463d      	mov	r5, r7
 80164bc:	dc17      	bgt.n	80164ee <round+0x46>
 80164be:	2c00      	cmp	r4, #0
 80164c0:	da09      	bge.n	80164d6 <round+0x2e>
 80164c2:	3401      	adds	r4, #1
 80164c4:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80164c8:	d103      	bne.n	80164d2 <round+0x2a>
 80164ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80164ce:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80164d2:	2100      	movs	r1, #0
 80164d4:	e02c      	b.n	8016530 <round+0x88>
 80164d6:	4a18      	ldr	r2, [pc, #96]	; (8016538 <round+0x90>)
 80164d8:	4122      	asrs	r2, r4
 80164da:	4217      	tst	r7, r2
 80164dc:	d100      	bne.n	80164e0 <round+0x38>
 80164de:	b19e      	cbz	r6, 8016508 <round+0x60>
 80164e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80164e4:	4123      	asrs	r3, r4
 80164e6:	442b      	add	r3, r5
 80164e8:	ea23 0302 	bic.w	r3, r3, r2
 80164ec:	e7f1      	b.n	80164d2 <round+0x2a>
 80164ee:	2c33      	cmp	r4, #51	; 0x33
 80164f0:	dd0d      	ble.n	801650e <round+0x66>
 80164f2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80164f6:	d107      	bne.n	8016508 <round+0x60>
 80164f8:	4630      	mov	r0, r6
 80164fa:	4639      	mov	r1, r7
 80164fc:	ee10 2a10 	vmov	r2, s0
 8016500:	f7f1 fdfc 	bl	80080fc <__adddf3>
 8016504:	4606      	mov	r6, r0
 8016506:	460f      	mov	r7, r1
 8016508:	ec47 6b10 	vmov	d0, r6, r7
 801650c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801650e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8016512:	f04f 30ff 	mov.w	r0, #4294967295
 8016516:	40d0      	lsrs	r0, r2
 8016518:	4206      	tst	r6, r0
 801651a:	d0f5      	beq.n	8016508 <round+0x60>
 801651c:	2201      	movs	r2, #1
 801651e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8016522:	fa02 f404 	lsl.w	r4, r2, r4
 8016526:	1931      	adds	r1, r6, r4
 8016528:	bf28      	it	cs
 801652a:	189b      	addcs	r3, r3, r2
 801652c:	ea21 0100 	bic.w	r1, r1, r0
 8016530:	461f      	mov	r7, r3
 8016532:	460e      	mov	r6, r1
 8016534:	e7e8      	b.n	8016508 <round+0x60>
 8016536:	bf00      	nop
 8016538:	000fffff 	.word	0x000fffff

0801653c <__errno>:
 801653c:	4b01      	ldr	r3, [pc, #4]	; (8016544 <__errno+0x8>)
 801653e:	6818      	ldr	r0, [r3, #0]
 8016540:	4770      	bx	lr
 8016542:	bf00      	nop
 8016544:	2000002c 	.word	0x2000002c

08016548 <__libc_init_array>:
 8016548:	b570      	push	{r4, r5, r6, lr}
 801654a:	4e0d      	ldr	r6, [pc, #52]	; (8016580 <__libc_init_array+0x38>)
 801654c:	4c0d      	ldr	r4, [pc, #52]	; (8016584 <__libc_init_array+0x3c>)
 801654e:	1ba4      	subs	r4, r4, r6
 8016550:	10a4      	asrs	r4, r4, #2
 8016552:	2500      	movs	r5, #0
 8016554:	42a5      	cmp	r5, r4
 8016556:	d109      	bne.n	801656c <__libc_init_array+0x24>
 8016558:	4e0b      	ldr	r6, [pc, #44]	; (8016588 <__libc_init_array+0x40>)
 801655a:	4c0c      	ldr	r4, [pc, #48]	; (801658c <__libc_init_array+0x44>)
 801655c:	f005 f83c 	bl	801b5d8 <_init>
 8016560:	1ba4      	subs	r4, r4, r6
 8016562:	10a4      	asrs	r4, r4, #2
 8016564:	2500      	movs	r5, #0
 8016566:	42a5      	cmp	r5, r4
 8016568:	d105      	bne.n	8016576 <__libc_init_array+0x2e>
 801656a:	bd70      	pop	{r4, r5, r6, pc}
 801656c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016570:	4798      	blx	r3
 8016572:	3501      	adds	r5, #1
 8016574:	e7ee      	b.n	8016554 <__libc_init_array+0xc>
 8016576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801657a:	4798      	blx	r3
 801657c:	3501      	adds	r5, #1
 801657e:	e7f2      	b.n	8016566 <__libc_init_array+0x1e>
 8016580:	0801bbd4 	.word	0x0801bbd4
 8016584:	0801bbd4 	.word	0x0801bbd4
 8016588:	0801bbd4 	.word	0x0801bbd4
 801658c:	0801bbd8 	.word	0x0801bbd8

08016590 <memcpy>:
 8016590:	b510      	push	{r4, lr}
 8016592:	1e43      	subs	r3, r0, #1
 8016594:	440a      	add	r2, r1
 8016596:	4291      	cmp	r1, r2
 8016598:	d100      	bne.n	801659c <memcpy+0xc>
 801659a:	bd10      	pop	{r4, pc}
 801659c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80165a4:	e7f7      	b.n	8016596 <memcpy+0x6>

080165a6 <memset>:
 80165a6:	4402      	add	r2, r0
 80165a8:	4603      	mov	r3, r0
 80165aa:	4293      	cmp	r3, r2
 80165ac:	d100      	bne.n	80165b0 <memset+0xa>
 80165ae:	4770      	bx	lr
 80165b0:	f803 1b01 	strb.w	r1, [r3], #1
 80165b4:	e7f9      	b.n	80165aa <memset+0x4>

080165b6 <__cvt>:
 80165b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80165ba:	ec55 4b10 	vmov	r4, r5, d0
 80165be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80165c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80165c4:	2d00      	cmp	r5, #0
 80165c6:	460e      	mov	r6, r1
 80165c8:	4691      	mov	r9, r2
 80165ca:	4619      	mov	r1, r3
 80165cc:	bfb8      	it	lt
 80165ce:	4622      	movlt	r2, r4
 80165d0:	462b      	mov	r3, r5
 80165d2:	f027 0720 	bic.w	r7, r7, #32
 80165d6:	bfbb      	ittet	lt
 80165d8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80165dc:	461d      	movlt	r5, r3
 80165de:	2300      	movge	r3, #0
 80165e0:	232d      	movlt	r3, #45	; 0x2d
 80165e2:	bfb8      	it	lt
 80165e4:	4614      	movlt	r4, r2
 80165e6:	2f46      	cmp	r7, #70	; 0x46
 80165e8:	700b      	strb	r3, [r1, #0]
 80165ea:	d004      	beq.n	80165f6 <__cvt+0x40>
 80165ec:	2f45      	cmp	r7, #69	; 0x45
 80165ee:	d100      	bne.n	80165f2 <__cvt+0x3c>
 80165f0:	3601      	adds	r6, #1
 80165f2:	2102      	movs	r1, #2
 80165f4:	e000      	b.n	80165f8 <__cvt+0x42>
 80165f6:	2103      	movs	r1, #3
 80165f8:	ab03      	add	r3, sp, #12
 80165fa:	9301      	str	r3, [sp, #4]
 80165fc:	ab02      	add	r3, sp, #8
 80165fe:	9300      	str	r3, [sp, #0]
 8016600:	4632      	mov	r2, r6
 8016602:	4653      	mov	r3, sl
 8016604:	ec45 4b10 	vmov	d0, r4, r5
 8016608:	f001 ff82 	bl	8018510 <_dtoa_r>
 801660c:	2f47      	cmp	r7, #71	; 0x47
 801660e:	4680      	mov	r8, r0
 8016610:	d102      	bne.n	8016618 <__cvt+0x62>
 8016612:	f019 0f01 	tst.w	r9, #1
 8016616:	d026      	beq.n	8016666 <__cvt+0xb0>
 8016618:	2f46      	cmp	r7, #70	; 0x46
 801661a:	eb08 0906 	add.w	r9, r8, r6
 801661e:	d111      	bne.n	8016644 <__cvt+0x8e>
 8016620:	f898 3000 	ldrb.w	r3, [r8]
 8016624:	2b30      	cmp	r3, #48	; 0x30
 8016626:	d10a      	bne.n	801663e <__cvt+0x88>
 8016628:	2200      	movs	r2, #0
 801662a:	2300      	movs	r3, #0
 801662c:	4620      	mov	r0, r4
 801662e:	4629      	mov	r1, r5
 8016630:	f7f2 f982 	bl	8008938 <__aeabi_dcmpeq>
 8016634:	b918      	cbnz	r0, 801663e <__cvt+0x88>
 8016636:	f1c6 0601 	rsb	r6, r6, #1
 801663a:	f8ca 6000 	str.w	r6, [sl]
 801663e:	f8da 3000 	ldr.w	r3, [sl]
 8016642:	4499      	add	r9, r3
 8016644:	2200      	movs	r2, #0
 8016646:	2300      	movs	r3, #0
 8016648:	4620      	mov	r0, r4
 801664a:	4629      	mov	r1, r5
 801664c:	f7f2 f974 	bl	8008938 <__aeabi_dcmpeq>
 8016650:	b938      	cbnz	r0, 8016662 <__cvt+0xac>
 8016652:	2230      	movs	r2, #48	; 0x30
 8016654:	9b03      	ldr	r3, [sp, #12]
 8016656:	454b      	cmp	r3, r9
 8016658:	d205      	bcs.n	8016666 <__cvt+0xb0>
 801665a:	1c59      	adds	r1, r3, #1
 801665c:	9103      	str	r1, [sp, #12]
 801665e:	701a      	strb	r2, [r3, #0]
 8016660:	e7f8      	b.n	8016654 <__cvt+0x9e>
 8016662:	f8cd 900c 	str.w	r9, [sp, #12]
 8016666:	9b03      	ldr	r3, [sp, #12]
 8016668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801666a:	eba3 0308 	sub.w	r3, r3, r8
 801666e:	4640      	mov	r0, r8
 8016670:	6013      	str	r3, [r2, #0]
 8016672:	b004      	add	sp, #16
 8016674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016678 <__exponent>:
 8016678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801667a:	2900      	cmp	r1, #0
 801667c:	4604      	mov	r4, r0
 801667e:	bfba      	itte	lt
 8016680:	4249      	neglt	r1, r1
 8016682:	232d      	movlt	r3, #45	; 0x2d
 8016684:	232b      	movge	r3, #43	; 0x2b
 8016686:	2909      	cmp	r1, #9
 8016688:	f804 2b02 	strb.w	r2, [r4], #2
 801668c:	7043      	strb	r3, [r0, #1]
 801668e:	dd20      	ble.n	80166d2 <__exponent+0x5a>
 8016690:	f10d 0307 	add.w	r3, sp, #7
 8016694:	461f      	mov	r7, r3
 8016696:	260a      	movs	r6, #10
 8016698:	fb91 f5f6 	sdiv	r5, r1, r6
 801669c:	fb06 1115 	mls	r1, r6, r5, r1
 80166a0:	3130      	adds	r1, #48	; 0x30
 80166a2:	2d09      	cmp	r5, #9
 80166a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80166a8:	f103 32ff 	add.w	r2, r3, #4294967295
 80166ac:	4629      	mov	r1, r5
 80166ae:	dc09      	bgt.n	80166c4 <__exponent+0x4c>
 80166b0:	3130      	adds	r1, #48	; 0x30
 80166b2:	3b02      	subs	r3, #2
 80166b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80166b8:	42bb      	cmp	r3, r7
 80166ba:	4622      	mov	r2, r4
 80166bc:	d304      	bcc.n	80166c8 <__exponent+0x50>
 80166be:	1a10      	subs	r0, r2, r0
 80166c0:	b003      	add	sp, #12
 80166c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166c4:	4613      	mov	r3, r2
 80166c6:	e7e7      	b.n	8016698 <__exponent+0x20>
 80166c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80166cc:	f804 2b01 	strb.w	r2, [r4], #1
 80166d0:	e7f2      	b.n	80166b8 <__exponent+0x40>
 80166d2:	2330      	movs	r3, #48	; 0x30
 80166d4:	4419      	add	r1, r3
 80166d6:	7083      	strb	r3, [r0, #2]
 80166d8:	1d02      	adds	r2, r0, #4
 80166da:	70c1      	strb	r1, [r0, #3]
 80166dc:	e7ef      	b.n	80166be <__exponent+0x46>
	...

080166e0 <_printf_float>:
 80166e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166e4:	b08d      	sub	sp, #52	; 0x34
 80166e6:	460c      	mov	r4, r1
 80166e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80166ec:	4616      	mov	r6, r2
 80166ee:	461f      	mov	r7, r3
 80166f0:	4605      	mov	r5, r0
 80166f2:	f003 f9a7 	bl	8019a44 <_localeconv_r>
 80166f6:	6803      	ldr	r3, [r0, #0]
 80166f8:	9304      	str	r3, [sp, #16]
 80166fa:	4618      	mov	r0, r3
 80166fc:	f7f1 fca0 	bl	8008040 <strlen>
 8016700:	2300      	movs	r3, #0
 8016702:	930a      	str	r3, [sp, #40]	; 0x28
 8016704:	f8d8 3000 	ldr.w	r3, [r8]
 8016708:	9005      	str	r0, [sp, #20]
 801670a:	3307      	adds	r3, #7
 801670c:	f023 0307 	bic.w	r3, r3, #7
 8016710:	f103 0208 	add.w	r2, r3, #8
 8016714:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016718:	f8d4 b000 	ldr.w	fp, [r4]
 801671c:	f8c8 2000 	str.w	r2, [r8]
 8016720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016724:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016728:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801672c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016730:	9307      	str	r3, [sp, #28]
 8016732:	f8cd 8018 	str.w	r8, [sp, #24]
 8016736:	f04f 32ff 	mov.w	r2, #4294967295
 801673a:	4ba7      	ldr	r3, [pc, #668]	; (80169d8 <_printf_float+0x2f8>)
 801673c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016740:	f7f2 f92c 	bl	800899c <__aeabi_dcmpun>
 8016744:	bb70      	cbnz	r0, 80167a4 <_printf_float+0xc4>
 8016746:	f04f 32ff 	mov.w	r2, #4294967295
 801674a:	4ba3      	ldr	r3, [pc, #652]	; (80169d8 <_printf_float+0x2f8>)
 801674c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016750:	f7f2 f906 	bl	8008960 <__aeabi_dcmple>
 8016754:	bb30      	cbnz	r0, 80167a4 <_printf_float+0xc4>
 8016756:	2200      	movs	r2, #0
 8016758:	2300      	movs	r3, #0
 801675a:	4640      	mov	r0, r8
 801675c:	4649      	mov	r1, r9
 801675e:	f7f2 f8f5 	bl	800894c <__aeabi_dcmplt>
 8016762:	b110      	cbz	r0, 801676a <_printf_float+0x8a>
 8016764:	232d      	movs	r3, #45	; 0x2d
 8016766:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801676a:	4a9c      	ldr	r2, [pc, #624]	; (80169dc <_printf_float+0x2fc>)
 801676c:	4b9c      	ldr	r3, [pc, #624]	; (80169e0 <_printf_float+0x300>)
 801676e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8016772:	bf8c      	ite	hi
 8016774:	4690      	movhi	r8, r2
 8016776:	4698      	movls	r8, r3
 8016778:	2303      	movs	r3, #3
 801677a:	f02b 0204 	bic.w	r2, fp, #4
 801677e:	6123      	str	r3, [r4, #16]
 8016780:	6022      	str	r2, [r4, #0]
 8016782:	f04f 0900 	mov.w	r9, #0
 8016786:	9700      	str	r7, [sp, #0]
 8016788:	4633      	mov	r3, r6
 801678a:	aa0b      	add	r2, sp, #44	; 0x2c
 801678c:	4621      	mov	r1, r4
 801678e:	4628      	mov	r0, r5
 8016790:	f000 f9e6 	bl	8016b60 <_printf_common>
 8016794:	3001      	adds	r0, #1
 8016796:	f040 808d 	bne.w	80168b4 <_printf_float+0x1d4>
 801679a:	f04f 30ff 	mov.w	r0, #4294967295
 801679e:	b00d      	add	sp, #52	; 0x34
 80167a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167a4:	4642      	mov	r2, r8
 80167a6:	464b      	mov	r3, r9
 80167a8:	4640      	mov	r0, r8
 80167aa:	4649      	mov	r1, r9
 80167ac:	f7f2 f8f6 	bl	800899c <__aeabi_dcmpun>
 80167b0:	b110      	cbz	r0, 80167b8 <_printf_float+0xd8>
 80167b2:	4a8c      	ldr	r2, [pc, #560]	; (80169e4 <_printf_float+0x304>)
 80167b4:	4b8c      	ldr	r3, [pc, #560]	; (80169e8 <_printf_float+0x308>)
 80167b6:	e7da      	b.n	801676e <_printf_float+0x8e>
 80167b8:	6861      	ldr	r1, [r4, #4]
 80167ba:	1c4b      	adds	r3, r1, #1
 80167bc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80167c0:	a80a      	add	r0, sp, #40	; 0x28
 80167c2:	d13e      	bne.n	8016842 <_printf_float+0x162>
 80167c4:	2306      	movs	r3, #6
 80167c6:	6063      	str	r3, [r4, #4]
 80167c8:	2300      	movs	r3, #0
 80167ca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80167ce:	ab09      	add	r3, sp, #36	; 0x24
 80167d0:	9300      	str	r3, [sp, #0]
 80167d2:	ec49 8b10 	vmov	d0, r8, r9
 80167d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80167da:	6022      	str	r2, [r4, #0]
 80167dc:	f8cd a004 	str.w	sl, [sp, #4]
 80167e0:	6861      	ldr	r1, [r4, #4]
 80167e2:	4628      	mov	r0, r5
 80167e4:	f7ff fee7 	bl	80165b6 <__cvt>
 80167e8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80167ec:	2b47      	cmp	r3, #71	; 0x47
 80167ee:	4680      	mov	r8, r0
 80167f0:	d109      	bne.n	8016806 <_printf_float+0x126>
 80167f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167f4:	1cd8      	adds	r0, r3, #3
 80167f6:	db02      	blt.n	80167fe <_printf_float+0x11e>
 80167f8:	6862      	ldr	r2, [r4, #4]
 80167fa:	4293      	cmp	r3, r2
 80167fc:	dd47      	ble.n	801688e <_printf_float+0x1ae>
 80167fe:	f1aa 0a02 	sub.w	sl, sl, #2
 8016802:	fa5f fa8a 	uxtb.w	sl, sl
 8016806:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801680a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801680c:	d824      	bhi.n	8016858 <_printf_float+0x178>
 801680e:	3901      	subs	r1, #1
 8016810:	4652      	mov	r2, sl
 8016812:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016816:	9109      	str	r1, [sp, #36]	; 0x24
 8016818:	f7ff ff2e 	bl	8016678 <__exponent>
 801681c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801681e:	1813      	adds	r3, r2, r0
 8016820:	2a01      	cmp	r2, #1
 8016822:	4681      	mov	r9, r0
 8016824:	6123      	str	r3, [r4, #16]
 8016826:	dc02      	bgt.n	801682e <_printf_float+0x14e>
 8016828:	6822      	ldr	r2, [r4, #0]
 801682a:	07d1      	lsls	r1, r2, #31
 801682c:	d501      	bpl.n	8016832 <_printf_float+0x152>
 801682e:	3301      	adds	r3, #1
 8016830:	6123      	str	r3, [r4, #16]
 8016832:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016836:	2b00      	cmp	r3, #0
 8016838:	d0a5      	beq.n	8016786 <_printf_float+0xa6>
 801683a:	232d      	movs	r3, #45	; 0x2d
 801683c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016840:	e7a1      	b.n	8016786 <_printf_float+0xa6>
 8016842:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8016846:	f000 8177 	beq.w	8016b38 <_printf_float+0x458>
 801684a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801684e:	d1bb      	bne.n	80167c8 <_printf_float+0xe8>
 8016850:	2900      	cmp	r1, #0
 8016852:	d1b9      	bne.n	80167c8 <_printf_float+0xe8>
 8016854:	2301      	movs	r3, #1
 8016856:	e7b6      	b.n	80167c6 <_printf_float+0xe6>
 8016858:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801685c:	d119      	bne.n	8016892 <_printf_float+0x1b2>
 801685e:	2900      	cmp	r1, #0
 8016860:	6863      	ldr	r3, [r4, #4]
 8016862:	dd0c      	ble.n	801687e <_printf_float+0x19e>
 8016864:	6121      	str	r1, [r4, #16]
 8016866:	b913      	cbnz	r3, 801686e <_printf_float+0x18e>
 8016868:	6822      	ldr	r2, [r4, #0]
 801686a:	07d2      	lsls	r2, r2, #31
 801686c:	d502      	bpl.n	8016874 <_printf_float+0x194>
 801686e:	3301      	adds	r3, #1
 8016870:	440b      	add	r3, r1
 8016872:	6123      	str	r3, [r4, #16]
 8016874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016876:	65a3      	str	r3, [r4, #88]	; 0x58
 8016878:	f04f 0900 	mov.w	r9, #0
 801687c:	e7d9      	b.n	8016832 <_printf_float+0x152>
 801687e:	b913      	cbnz	r3, 8016886 <_printf_float+0x1a6>
 8016880:	6822      	ldr	r2, [r4, #0]
 8016882:	07d0      	lsls	r0, r2, #31
 8016884:	d501      	bpl.n	801688a <_printf_float+0x1aa>
 8016886:	3302      	adds	r3, #2
 8016888:	e7f3      	b.n	8016872 <_printf_float+0x192>
 801688a:	2301      	movs	r3, #1
 801688c:	e7f1      	b.n	8016872 <_printf_float+0x192>
 801688e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8016892:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016896:	4293      	cmp	r3, r2
 8016898:	db05      	blt.n	80168a6 <_printf_float+0x1c6>
 801689a:	6822      	ldr	r2, [r4, #0]
 801689c:	6123      	str	r3, [r4, #16]
 801689e:	07d1      	lsls	r1, r2, #31
 80168a0:	d5e8      	bpl.n	8016874 <_printf_float+0x194>
 80168a2:	3301      	adds	r3, #1
 80168a4:	e7e5      	b.n	8016872 <_printf_float+0x192>
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	bfd4      	ite	le
 80168aa:	f1c3 0302 	rsble	r3, r3, #2
 80168ae:	2301      	movgt	r3, #1
 80168b0:	4413      	add	r3, r2
 80168b2:	e7de      	b.n	8016872 <_printf_float+0x192>
 80168b4:	6823      	ldr	r3, [r4, #0]
 80168b6:	055a      	lsls	r2, r3, #21
 80168b8:	d407      	bmi.n	80168ca <_printf_float+0x1ea>
 80168ba:	6923      	ldr	r3, [r4, #16]
 80168bc:	4642      	mov	r2, r8
 80168be:	4631      	mov	r1, r6
 80168c0:	4628      	mov	r0, r5
 80168c2:	47b8      	blx	r7
 80168c4:	3001      	adds	r0, #1
 80168c6:	d12b      	bne.n	8016920 <_printf_float+0x240>
 80168c8:	e767      	b.n	801679a <_printf_float+0xba>
 80168ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80168ce:	f240 80dc 	bls.w	8016a8a <_printf_float+0x3aa>
 80168d2:	2200      	movs	r2, #0
 80168d4:	2300      	movs	r3, #0
 80168d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80168da:	f7f2 f82d 	bl	8008938 <__aeabi_dcmpeq>
 80168de:	2800      	cmp	r0, #0
 80168e0:	d033      	beq.n	801694a <_printf_float+0x26a>
 80168e2:	2301      	movs	r3, #1
 80168e4:	4a41      	ldr	r2, [pc, #260]	; (80169ec <_printf_float+0x30c>)
 80168e6:	4631      	mov	r1, r6
 80168e8:	4628      	mov	r0, r5
 80168ea:	47b8      	blx	r7
 80168ec:	3001      	adds	r0, #1
 80168ee:	f43f af54 	beq.w	801679a <_printf_float+0xba>
 80168f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80168f6:	429a      	cmp	r2, r3
 80168f8:	db02      	blt.n	8016900 <_printf_float+0x220>
 80168fa:	6823      	ldr	r3, [r4, #0]
 80168fc:	07d8      	lsls	r0, r3, #31
 80168fe:	d50f      	bpl.n	8016920 <_printf_float+0x240>
 8016900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016904:	4631      	mov	r1, r6
 8016906:	4628      	mov	r0, r5
 8016908:	47b8      	blx	r7
 801690a:	3001      	adds	r0, #1
 801690c:	f43f af45 	beq.w	801679a <_printf_float+0xba>
 8016910:	f04f 0800 	mov.w	r8, #0
 8016914:	f104 091a 	add.w	r9, r4, #26
 8016918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801691a:	3b01      	subs	r3, #1
 801691c:	4543      	cmp	r3, r8
 801691e:	dc09      	bgt.n	8016934 <_printf_float+0x254>
 8016920:	6823      	ldr	r3, [r4, #0]
 8016922:	079b      	lsls	r3, r3, #30
 8016924:	f100 8103 	bmi.w	8016b2e <_printf_float+0x44e>
 8016928:	68e0      	ldr	r0, [r4, #12]
 801692a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801692c:	4298      	cmp	r0, r3
 801692e:	bfb8      	it	lt
 8016930:	4618      	movlt	r0, r3
 8016932:	e734      	b.n	801679e <_printf_float+0xbe>
 8016934:	2301      	movs	r3, #1
 8016936:	464a      	mov	r2, r9
 8016938:	4631      	mov	r1, r6
 801693a:	4628      	mov	r0, r5
 801693c:	47b8      	blx	r7
 801693e:	3001      	adds	r0, #1
 8016940:	f43f af2b 	beq.w	801679a <_printf_float+0xba>
 8016944:	f108 0801 	add.w	r8, r8, #1
 8016948:	e7e6      	b.n	8016918 <_printf_float+0x238>
 801694a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801694c:	2b00      	cmp	r3, #0
 801694e:	dc2b      	bgt.n	80169a8 <_printf_float+0x2c8>
 8016950:	2301      	movs	r3, #1
 8016952:	4a26      	ldr	r2, [pc, #152]	; (80169ec <_printf_float+0x30c>)
 8016954:	4631      	mov	r1, r6
 8016956:	4628      	mov	r0, r5
 8016958:	47b8      	blx	r7
 801695a:	3001      	adds	r0, #1
 801695c:	f43f af1d 	beq.w	801679a <_printf_float+0xba>
 8016960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016962:	b923      	cbnz	r3, 801696e <_printf_float+0x28e>
 8016964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016966:	b913      	cbnz	r3, 801696e <_printf_float+0x28e>
 8016968:	6823      	ldr	r3, [r4, #0]
 801696a:	07d9      	lsls	r1, r3, #31
 801696c:	d5d8      	bpl.n	8016920 <_printf_float+0x240>
 801696e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016972:	4631      	mov	r1, r6
 8016974:	4628      	mov	r0, r5
 8016976:	47b8      	blx	r7
 8016978:	3001      	adds	r0, #1
 801697a:	f43f af0e 	beq.w	801679a <_printf_float+0xba>
 801697e:	f04f 0900 	mov.w	r9, #0
 8016982:	f104 0a1a 	add.w	sl, r4, #26
 8016986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016988:	425b      	negs	r3, r3
 801698a:	454b      	cmp	r3, r9
 801698c:	dc01      	bgt.n	8016992 <_printf_float+0x2b2>
 801698e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016990:	e794      	b.n	80168bc <_printf_float+0x1dc>
 8016992:	2301      	movs	r3, #1
 8016994:	4652      	mov	r2, sl
 8016996:	4631      	mov	r1, r6
 8016998:	4628      	mov	r0, r5
 801699a:	47b8      	blx	r7
 801699c:	3001      	adds	r0, #1
 801699e:	f43f aefc 	beq.w	801679a <_printf_float+0xba>
 80169a2:	f109 0901 	add.w	r9, r9, #1
 80169a6:	e7ee      	b.n	8016986 <_printf_float+0x2a6>
 80169a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80169ac:	429a      	cmp	r2, r3
 80169ae:	bfa8      	it	ge
 80169b0:	461a      	movge	r2, r3
 80169b2:	2a00      	cmp	r2, #0
 80169b4:	4691      	mov	r9, r2
 80169b6:	dd07      	ble.n	80169c8 <_printf_float+0x2e8>
 80169b8:	4613      	mov	r3, r2
 80169ba:	4631      	mov	r1, r6
 80169bc:	4642      	mov	r2, r8
 80169be:	4628      	mov	r0, r5
 80169c0:	47b8      	blx	r7
 80169c2:	3001      	adds	r0, #1
 80169c4:	f43f aee9 	beq.w	801679a <_printf_float+0xba>
 80169c8:	f104 031a 	add.w	r3, r4, #26
 80169cc:	f04f 0b00 	mov.w	fp, #0
 80169d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80169d4:	9306      	str	r3, [sp, #24]
 80169d6:	e015      	b.n	8016a04 <_printf_float+0x324>
 80169d8:	7fefffff 	.word	0x7fefffff
 80169dc:	0801b898 	.word	0x0801b898
 80169e0:	0801b894 	.word	0x0801b894
 80169e4:	0801b8a0 	.word	0x0801b8a0
 80169e8:	0801b89c 	.word	0x0801b89c
 80169ec:	0801bac3 	.word	0x0801bac3
 80169f0:	2301      	movs	r3, #1
 80169f2:	9a06      	ldr	r2, [sp, #24]
 80169f4:	4631      	mov	r1, r6
 80169f6:	4628      	mov	r0, r5
 80169f8:	47b8      	blx	r7
 80169fa:	3001      	adds	r0, #1
 80169fc:	f43f aecd 	beq.w	801679a <_printf_float+0xba>
 8016a00:	f10b 0b01 	add.w	fp, fp, #1
 8016a04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016a08:	ebaa 0309 	sub.w	r3, sl, r9
 8016a0c:	455b      	cmp	r3, fp
 8016a0e:	dcef      	bgt.n	80169f0 <_printf_float+0x310>
 8016a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016a14:	429a      	cmp	r2, r3
 8016a16:	44d0      	add	r8, sl
 8016a18:	db15      	blt.n	8016a46 <_printf_float+0x366>
 8016a1a:	6823      	ldr	r3, [r4, #0]
 8016a1c:	07da      	lsls	r2, r3, #31
 8016a1e:	d412      	bmi.n	8016a46 <_printf_float+0x366>
 8016a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016a24:	eba3 020a 	sub.w	r2, r3, sl
 8016a28:	eba3 0a01 	sub.w	sl, r3, r1
 8016a2c:	4592      	cmp	sl, r2
 8016a2e:	bfa8      	it	ge
 8016a30:	4692      	movge	sl, r2
 8016a32:	f1ba 0f00 	cmp.w	sl, #0
 8016a36:	dc0e      	bgt.n	8016a56 <_printf_float+0x376>
 8016a38:	f04f 0800 	mov.w	r8, #0
 8016a3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016a40:	f104 091a 	add.w	r9, r4, #26
 8016a44:	e019      	b.n	8016a7a <_printf_float+0x39a>
 8016a46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016a4a:	4631      	mov	r1, r6
 8016a4c:	4628      	mov	r0, r5
 8016a4e:	47b8      	blx	r7
 8016a50:	3001      	adds	r0, #1
 8016a52:	d1e5      	bne.n	8016a20 <_printf_float+0x340>
 8016a54:	e6a1      	b.n	801679a <_printf_float+0xba>
 8016a56:	4653      	mov	r3, sl
 8016a58:	4642      	mov	r2, r8
 8016a5a:	4631      	mov	r1, r6
 8016a5c:	4628      	mov	r0, r5
 8016a5e:	47b8      	blx	r7
 8016a60:	3001      	adds	r0, #1
 8016a62:	d1e9      	bne.n	8016a38 <_printf_float+0x358>
 8016a64:	e699      	b.n	801679a <_printf_float+0xba>
 8016a66:	2301      	movs	r3, #1
 8016a68:	464a      	mov	r2, r9
 8016a6a:	4631      	mov	r1, r6
 8016a6c:	4628      	mov	r0, r5
 8016a6e:	47b8      	blx	r7
 8016a70:	3001      	adds	r0, #1
 8016a72:	f43f ae92 	beq.w	801679a <_printf_float+0xba>
 8016a76:	f108 0801 	add.w	r8, r8, #1
 8016a7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016a7e:	1a9b      	subs	r3, r3, r2
 8016a80:	eba3 030a 	sub.w	r3, r3, sl
 8016a84:	4543      	cmp	r3, r8
 8016a86:	dcee      	bgt.n	8016a66 <_printf_float+0x386>
 8016a88:	e74a      	b.n	8016920 <_printf_float+0x240>
 8016a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a8c:	2a01      	cmp	r2, #1
 8016a8e:	dc01      	bgt.n	8016a94 <_printf_float+0x3b4>
 8016a90:	07db      	lsls	r3, r3, #31
 8016a92:	d53a      	bpl.n	8016b0a <_printf_float+0x42a>
 8016a94:	2301      	movs	r3, #1
 8016a96:	4642      	mov	r2, r8
 8016a98:	4631      	mov	r1, r6
 8016a9a:	4628      	mov	r0, r5
 8016a9c:	47b8      	blx	r7
 8016a9e:	3001      	adds	r0, #1
 8016aa0:	f43f ae7b 	beq.w	801679a <_printf_float+0xba>
 8016aa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016aa8:	4631      	mov	r1, r6
 8016aaa:	4628      	mov	r0, r5
 8016aac:	47b8      	blx	r7
 8016aae:	3001      	adds	r0, #1
 8016ab0:	f108 0801 	add.w	r8, r8, #1
 8016ab4:	f43f ae71 	beq.w	801679a <_printf_float+0xba>
 8016ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016aba:	2200      	movs	r2, #0
 8016abc:	f103 3aff 	add.w	sl, r3, #4294967295
 8016ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	f7f1 ff37 	bl	8008938 <__aeabi_dcmpeq>
 8016aca:	b9c8      	cbnz	r0, 8016b00 <_printf_float+0x420>
 8016acc:	4653      	mov	r3, sl
 8016ace:	4642      	mov	r2, r8
 8016ad0:	4631      	mov	r1, r6
 8016ad2:	4628      	mov	r0, r5
 8016ad4:	47b8      	blx	r7
 8016ad6:	3001      	adds	r0, #1
 8016ad8:	d10e      	bne.n	8016af8 <_printf_float+0x418>
 8016ada:	e65e      	b.n	801679a <_printf_float+0xba>
 8016adc:	2301      	movs	r3, #1
 8016ade:	4652      	mov	r2, sl
 8016ae0:	4631      	mov	r1, r6
 8016ae2:	4628      	mov	r0, r5
 8016ae4:	47b8      	blx	r7
 8016ae6:	3001      	adds	r0, #1
 8016ae8:	f43f ae57 	beq.w	801679a <_printf_float+0xba>
 8016aec:	f108 0801 	add.w	r8, r8, #1
 8016af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016af2:	3b01      	subs	r3, #1
 8016af4:	4543      	cmp	r3, r8
 8016af6:	dcf1      	bgt.n	8016adc <_printf_float+0x3fc>
 8016af8:	464b      	mov	r3, r9
 8016afa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016afe:	e6de      	b.n	80168be <_printf_float+0x1de>
 8016b00:	f04f 0800 	mov.w	r8, #0
 8016b04:	f104 0a1a 	add.w	sl, r4, #26
 8016b08:	e7f2      	b.n	8016af0 <_printf_float+0x410>
 8016b0a:	2301      	movs	r3, #1
 8016b0c:	e7df      	b.n	8016ace <_printf_float+0x3ee>
 8016b0e:	2301      	movs	r3, #1
 8016b10:	464a      	mov	r2, r9
 8016b12:	4631      	mov	r1, r6
 8016b14:	4628      	mov	r0, r5
 8016b16:	47b8      	blx	r7
 8016b18:	3001      	adds	r0, #1
 8016b1a:	f43f ae3e 	beq.w	801679a <_printf_float+0xba>
 8016b1e:	f108 0801 	add.w	r8, r8, #1
 8016b22:	68e3      	ldr	r3, [r4, #12]
 8016b24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b26:	1a9b      	subs	r3, r3, r2
 8016b28:	4543      	cmp	r3, r8
 8016b2a:	dcf0      	bgt.n	8016b0e <_printf_float+0x42e>
 8016b2c:	e6fc      	b.n	8016928 <_printf_float+0x248>
 8016b2e:	f04f 0800 	mov.w	r8, #0
 8016b32:	f104 0919 	add.w	r9, r4, #25
 8016b36:	e7f4      	b.n	8016b22 <_printf_float+0x442>
 8016b38:	2900      	cmp	r1, #0
 8016b3a:	f43f ae8b 	beq.w	8016854 <_printf_float+0x174>
 8016b3e:	2300      	movs	r3, #0
 8016b40:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016b44:	ab09      	add	r3, sp, #36	; 0x24
 8016b46:	9300      	str	r3, [sp, #0]
 8016b48:	ec49 8b10 	vmov	d0, r8, r9
 8016b4c:	6022      	str	r2, [r4, #0]
 8016b4e:	f8cd a004 	str.w	sl, [sp, #4]
 8016b52:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016b56:	4628      	mov	r0, r5
 8016b58:	f7ff fd2d 	bl	80165b6 <__cvt>
 8016b5c:	4680      	mov	r8, r0
 8016b5e:	e648      	b.n	80167f2 <_printf_float+0x112>

08016b60 <_printf_common>:
 8016b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b64:	4691      	mov	r9, r2
 8016b66:	461f      	mov	r7, r3
 8016b68:	688a      	ldr	r2, [r1, #8]
 8016b6a:	690b      	ldr	r3, [r1, #16]
 8016b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016b70:	4293      	cmp	r3, r2
 8016b72:	bfb8      	it	lt
 8016b74:	4613      	movlt	r3, r2
 8016b76:	f8c9 3000 	str.w	r3, [r9]
 8016b7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016b7e:	4606      	mov	r6, r0
 8016b80:	460c      	mov	r4, r1
 8016b82:	b112      	cbz	r2, 8016b8a <_printf_common+0x2a>
 8016b84:	3301      	adds	r3, #1
 8016b86:	f8c9 3000 	str.w	r3, [r9]
 8016b8a:	6823      	ldr	r3, [r4, #0]
 8016b8c:	0699      	lsls	r1, r3, #26
 8016b8e:	bf42      	ittt	mi
 8016b90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016b94:	3302      	addmi	r3, #2
 8016b96:	f8c9 3000 	strmi.w	r3, [r9]
 8016b9a:	6825      	ldr	r5, [r4, #0]
 8016b9c:	f015 0506 	ands.w	r5, r5, #6
 8016ba0:	d107      	bne.n	8016bb2 <_printf_common+0x52>
 8016ba2:	f104 0a19 	add.w	sl, r4, #25
 8016ba6:	68e3      	ldr	r3, [r4, #12]
 8016ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8016bac:	1a9b      	subs	r3, r3, r2
 8016bae:	42ab      	cmp	r3, r5
 8016bb0:	dc28      	bgt.n	8016c04 <_printf_common+0xa4>
 8016bb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016bb6:	6822      	ldr	r2, [r4, #0]
 8016bb8:	3300      	adds	r3, #0
 8016bba:	bf18      	it	ne
 8016bbc:	2301      	movne	r3, #1
 8016bbe:	0692      	lsls	r2, r2, #26
 8016bc0:	d42d      	bmi.n	8016c1e <_printf_common+0xbe>
 8016bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016bc6:	4639      	mov	r1, r7
 8016bc8:	4630      	mov	r0, r6
 8016bca:	47c0      	blx	r8
 8016bcc:	3001      	adds	r0, #1
 8016bce:	d020      	beq.n	8016c12 <_printf_common+0xb2>
 8016bd0:	6823      	ldr	r3, [r4, #0]
 8016bd2:	68e5      	ldr	r5, [r4, #12]
 8016bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8016bd8:	f003 0306 	and.w	r3, r3, #6
 8016bdc:	2b04      	cmp	r3, #4
 8016bde:	bf08      	it	eq
 8016be0:	1aad      	subeq	r5, r5, r2
 8016be2:	68a3      	ldr	r3, [r4, #8]
 8016be4:	6922      	ldr	r2, [r4, #16]
 8016be6:	bf0c      	ite	eq
 8016be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016bec:	2500      	movne	r5, #0
 8016bee:	4293      	cmp	r3, r2
 8016bf0:	bfc4      	itt	gt
 8016bf2:	1a9b      	subgt	r3, r3, r2
 8016bf4:	18ed      	addgt	r5, r5, r3
 8016bf6:	f04f 0900 	mov.w	r9, #0
 8016bfa:	341a      	adds	r4, #26
 8016bfc:	454d      	cmp	r5, r9
 8016bfe:	d11a      	bne.n	8016c36 <_printf_common+0xd6>
 8016c00:	2000      	movs	r0, #0
 8016c02:	e008      	b.n	8016c16 <_printf_common+0xb6>
 8016c04:	2301      	movs	r3, #1
 8016c06:	4652      	mov	r2, sl
 8016c08:	4639      	mov	r1, r7
 8016c0a:	4630      	mov	r0, r6
 8016c0c:	47c0      	blx	r8
 8016c0e:	3001      	adds	r0, #1
 8016c10:	d103      	bne.n	8016c1a <_printf_common+0xba>
 8016c12:	f04f 30ff 	mov.w	r0, #4294967295
 8016c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c1a:	3501      	adds	r5, #1
 8016c1c:	e7c3      	b.n	8016ba6 <_printf_common+0x46>
 8016c1e:	18e1      	adds	r1, r4, r3
 8016c20:	1c5a      	adds	r2, r3, #1
 8016c22:	2030      	movs	r0, #48	; 0x30
 8016c24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016c28:	4422      	add	r2, r4
 8016c2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016c2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016c32:	3302      	adds	r3, #2
 8016c34:	e7c5      	b.n	8016bc2 <_printf_common+0x62>
 8016c36:	2301      	movs	r3, #1
 8016c38:	4622      	mov	r2, r4
 8016c3a:	4639      	mov	r1, r7
 8016c3c:	4630      	mov	r0, r6
 8016c3e:	47c0      	blx	r8
 8016c40:	3001      	adds	r0, #1
 8016c42:	d0e6      	beq.n	8016c12 <_printf_common+0xb2>
 8016c44:	f109 0901 	add.w	r9, r9, #1
 8016c48:	e7d8      	b.n	8016bfc <_printf_common+0x9c>
	...

08016c4c <_printf_i>:
 8016c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016c54:	460c      	mov	r4, r1
 8016c56:	7e09      	ldrb	r1, [r1, #24]
 8016c58:	b085      	sub	sp, #20
 8016c5a:	296e      	cmp	r1, #110	; 0x6e
 8016c5c:	4617      	mov	r7, r2
 8016c5e:	4606      	mov	r6, r0
 8016c60:	4698      	mov	r8, r3
 8016c62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016c64:	f000 80b3 	beq.w	8016dce <_printf_i+0x182>
 8016c68:	d822      	bhi.n	8016cb0 <_printf_i+0x64>
 8016c6a:	2963      	cmp	r1, #99	; 0x63
 8016c6c:	d036      	beq.n	8016cdc <_printf_i+0x90>
 8016c6e:	d80a      	bhi.n	8016c86 <_printf_i+0x3a>
 8016c70:	2900      	cmp	r1, #0
 8016c72:	f000 80b9 	beq.w	8016de8 <_printf_i+0x19c>
 8016c76:	2958      	cmp	r1, #88	; 0x58
 8016c78:	f000 8083 	beq.w	8016d82 <_printf_i+0x136>
 8016c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016c80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016c84:	e032      	b.n	8016cec <_printf_i+0xa0>
 8016c86:	2964      	cmp	r1, #100	; 0x64
 8016c88:	d001      	beq.n	8016c8e <_printf_i+0x42>
 8016c8a:	2969      	cmp	r1, #105	; 0x69
 8016c8c:	d1f6      	bne.n	8016c7c <_printf_i+0x30>
 8016c8e:	6820      	ldr	r0, [r4, #0]
 8016c90:	6813      	ldr	r3, [r2, #0]
 8016c92:	0605      	lsls	r5, r0, #24
 8016c94:	f103 0104 	add.w	r1, r3, #4
 8016c98:	d52a      	bpl.n	8016cf0 <_printf_i+0xa4>
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	6011      	str	r1, [r2, #0]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	da03      	bge.n	8016caa <_printf_i+0x5e>
 8016ca2:	222d      	movs	r2, #45	; 0x2d
 8016ca4:	425b      	negs	r3, r3
 8016ca6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016caa:	486f      	ldr	r0, [pc, #444]	; (8016e68 <_printf_i+0x21c>)
 8016cac:	220a      	movs	r2, #10
 8016cae:	e039      	b.n	8016d24 <_printf_i+0xd8>
 8016cb0:	2973      	cmp	r1, #115	; 0x73
 8016cb2:	f000 809d 	beq.w	8016df0 <_printf_i+0x1a4>
 8016cb6:	d808      	bhi.n	8016cca <_printf_i+0x7e>
 8016cb8:	296f      	cmp	r1, #111	; 0x6f
 8016cba:	d020      	beq.n	8016cfe <_printf_i+0xb2>
 8016cbc:	2970      	cmp	r1, #112	; 0x70
 8016cbe:	d1dd      	bne.n	8016c7c <_printf_i+0x30>
 8016cc0:	6823      	ldr	r3, [r4, #0]
 8016cc2:	f043 0320 	orr.w	r3, r3, #32
 8016cc6:	6023      	str	r3, [r4, #0]
 8016cc8:	e003      	b.n	8016cd2 <_printf_i+0x86>
 8016cca:	2975      	cmp	r1, #117	; 0x75
 8016ccc:	d017      	beq.n	8016cfe <_printf_i+0xb2>
 8016cce:	2978      	cmp	r1, #120	; 0x78
 8016cd0:	d1d4      	bne.n	8016c7c <_printf_i+0x30>
 8016cd2:	2378      	movs	r3, #120	; 0x78
 8016cd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016cd8:	4864      	ldr	r0, [pc, #400]	; (8016e6c <_printf_i+0x220>)
 8016cda:	e055      	b.n	8016d88 <_printf_i+0x13c>
 8016cdc:	6813      	ldr	r3, [r2, #0]
 8016cde:	1d19      	adds	r1, r3, #4
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	6011      	str	r1, [r2, #0]
 8016ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016cec:	2301      	movs	r3, #1
 8016cee:	e08c      	b.n	8016e0a <_printf_i+0x1be>
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	6011      	str	r1, [r2, #0]
 8016cf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016cf8:	bf18      	it	ne
 8016cfa:	b21b      	sxthne	r3, r3
 8016cfc:	e7cf      	b.n	8016c9e <_printf_i+0x52>
 8016cfe:	6813      	ldr	r3, [r2, #0]
 8016d00:	6825      	ldr	r5, [r4, #0]
 8016d02:	1d18      	adds	r0, r3, #4
 8016d04:	6010      	str	r0, [r2, #0]
 8016d06:	0628      	lsls	r0, r5, #24
 8016d08:	d501      	bpl.n	8016d0e <_printf_i+0xc2>
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	e002      	b.n	8016d14 <_printf_i+0xc8>
 8016d0e:	0668      	lsls	r0, r5, #25
 8016d10:	d5fb      	bpl.n	8016d0a <_printf_i+0xbe>
 8016d12:	881b      	ldrh	r3, [r3, #0]
 8016d14:	4854      	ldr	r0, [pc, #336]	; (8016e68 <_printf_i+0x21c>)
 8016d16:	296f      	cmp	r1, #111	; 0x6f
 8016d18:	bf14      	ite	ne
 8016d1a:	220a      	movne	r2, #10
 8016d1c:	2208      	moveq	r2, #8
 8016d1e:	2100      	movs	r1, #0
 8016d20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016d24:	6865      	ldr	r5, [r4, #4]
 8016d26:	60a5      	str	r5, [r4, #8]
 8016d28:	2d00      	cmp	r5, #0
 8016d2a:	f2c0 8095 	blt.w	8016e58 <_printf_i+0x20c>
 8016d2e:	6821      	ldr	r1, [r4, #0]
 8016d30:	f021 0104 	bic.w	r1, r1, #4
 8016d34:	6021      	str	r1, [r4, #0]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d13d      	bne.n	8016db6 <_printf_i+0x16a>
 8016d3a:	2d00      	cmp	r5, #0
 8016d3c:	f040 808e 	bne.w	8016e5c <_printf_i+0x210>
 8016d40:	4665      	mov	r5, ip
 8016d42:	2a08      	cmp	r2, #8
 8016d44:	d10b      	bne.n	8016d5e <_printf_i+0x112>
 8016d46:	6823      	ldr	r3, [r4, #0]
 8016d48:	07db      	lsls	r3, r3, #31
 8016d4a:	d508      	bpl.n	8016d5e <_printf_i+0x112>
 8016d4c:	6923      	ldr	r3, [r4, #16]
 8016d4e:	6862      	ldr	r2, [r4, #4]
 8016d50:	429a      	cmp	r2, r3
 8016d52:	bfde      	ittt	le
 8016d54:	2330      	movle	r3, #48	; 0x30
 8016d56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016d5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016d5e:	ebac 0305 	sub.w	r3, ip, r5
 8016d62:	6123      	str	r3, [r4, #16]
 8016d64:	f8cd 8000 	str.w	r8, [sp]
 8016d68:	463b      	mov	r3, r7
 8016d6a:	aa03      	add	r2, sp, #12
 8016d6c:	4621      	mov	r1, r4
 8016d6e:	4630      	mov	r0, r6
 8016d70:	f7ff fef6 	bl	8016b60 <_printf_common>
 8016d74:	3001      	adds	r0, #1
 8016d76:	d14d      	bne.n	8016e14 <_printf_i+0x1c8>
 8016d78:	f04f 30ff 	mov.w	r0, #4294967295
 8016d7c:	b005      	add	sp, #20
 8016d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d82:	4839      	ldr	r0, [pc, #228]	; (8016e68 <_printf_i+0x21c>)
 8016d84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016d88:	6813      	ldr	r3, [r2, #0]
 8016d8a:	6821      	ldr	r1, [r4, #0]
 8016d8c:	1d1d      	adds	r5, r3, #4
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	6015      	str	r5, [r2, #0]
 8016d92:	060a      	lsls	r2, r1, #24
 8016d94:	d50b      	bpl.n	8016dae <_printf_i+0x162>
 8016d96:	07ca      	lsls	r2, r1, #31
 8016d98:	bf44      	itt	mi
 8016d9a:	f041 0120 	orrmi.w	r1, r1, #32
 8016d9e:	6021      	strmi	r1, [r4, #0]
 8016da0:	b91b      	cbnz	r3, 8016daa <_printf_i+0x15e>
 8016da2:	6822      	ldr	r2, [r4, #0]
 8016da4:	f022 0220 	bic.w	r2, r2, #32
 8016da8:	6022      	str	r2, [r4, #0]
 8016daa:	2210      	movs	r2, #16
 8016dac:	e7b7      	b.n	8016d1e <_printf_i+0xd2>
 8016dae:	064d      	lsls	r5, r1, #25
 8016db0:	bf48      	it	mi
 8016db2:	b29b      	uxthmi	r3, r3
 8016db4:	e7ef      	b.n	8016d96 <_printf_i+0x14a>
 8016db6:	4665      	mov	r5, ip
 8016db8:	fbb3 f1f2 	udiv	r1, r3, r2
 8016dbc:	fb02 3311 	mls	r3, r2, r1, r3
 8016dc0:	5cc3      	ldrb	r3, [r0, r3]
 8016dc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016dc6:	460b      	mov	r3, r1
 8016dc8:	2900      	cmp	r1, #0
 8016dca:	d1f5      	bne.n	8016db8 <_printf_i+0x16c>
 8016dcc:	e7b9      	b.n	8016d42 <_printf_i+0xf6>
 8016dce:	6813      	ldr	r3, [r2, #0]
 8016dd0:	6825      	ldr	r5, [r4, #0]
 8016dd2:	6961      	ldr	r1, [r4, #20]
 8016dd4:	1d18      	adds	r0, r3, #4
 8016dd6:	6010      	str	r0, [r2, #0]
 8016dd8:	0628      	lsls	r0, r5, #24
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	d501      	bpl.n	8016de2 <_printf_i+0x196>
 8016dde:	6019      	str	r1, [r3, #0]
 8016de0:	e002      	b.n	8016de8 <_printf_i+0x19c>
 8016de2:	066a      	lsls	r2, r5, #25
 8016de4:	d5fb      	bpl.n	8016dde <_printf_i+0x192>
 8016de6:	8019      	strh	r1, [r3, #0]
 8016de8:	2300      	movs	r3, #0
 8016dea:	6123      	str	r3, [r4, #16]
 8016dec:	4665      	mov	r5, ip
 8016dee:	e7b9      	b.n	8016d64 <_printf_i+0x118>
 8016df0:	6813      	ldr	r3, [r2, #0]
 8016df2:	1d19      	adds	r1, r3, #4
 8016df4:	6011      	str	r1, [r2, #0]
 8016df6:	681d      	ldr	r5, [r3, #0]
 8016df8:	6862      	ldr	r2, [r4, #4]
 8016dfa:	2100      	movs	r1, #0
 8016dfc:	4628      	mov	r0, r5
 8016dfe:	f7f1 f927 	bl	8008050 <memchr>
 8016e02:	b108      	cbz	r0, 8016e08 <_printf_i+0x1bc>
 8016e04:	1b40      	subs	r0, r0, r5
 8016e06:	6060      	str	r0, [r4, #4]
 8016e08:	6863      	ldr	r3, [r4, #4]
 8016e0a:	6123      	str	r3, [r4, #16]
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e12:	e7a7      	b.n	8016d64 <_printf_i+0x118>
 8016e14:	6923      	ldr	r3, [r4, #16]
 8016e16:	462a      	mov	r2, r5
 8016e18:	4639      	mov	r1, r7
 8016e1a:	4630      	mov	r0, r6
 8016e1c:	47c0      	blx	r8
 8016e1e:	3001      	adds	r0, #1
 8016e20:	d0aa      	beq.n	8016d78 <_printf_i+0x12c>
 8016e22:	6823      	ldr	r3, [r4, #0]
 8016e24:	079b      	lsls	r3, r3, #30
 8016e26:	d413      	bmi.n	8016e50 <_printf_i+0x204>
 8016e28:	68e0      	ldr	r0, [r4, #12]
 8016e2a:	9b03      	ldr	r3, [sp, #12]
 8016e2c:	4298      	cmp	r0, r3
 8016e2e:	bfb8      	it	lt
 8016e30:	4618      	movlt	r0, r3
 8016e32:	e7a3      	b.n	8016d7c <_printf_i+0x130>
 8016e34:	2301      	movs	r3, #1
 8016e36:	464a      	mov	r2, r9
 8016e38:	4639      	mov	r1, r7
 8016e3a:	4630      	mov	r0, r6
 8016e3c:	47c0      	blx	r8
 8016e3e:	3001      	adds	r0, #1
 8016e40:	d09a      	beq.n	8016d78 <_printf_i+0x12c>
 8016e42:	3501      	adds	r5, #1
 8016e44:	68e3      	ldr	r3, [r4, #12]
 8016e46:	9a03      	ldr	r2, [sp, #12]
 8016e48:	1a9b      	subs	r3, r3, r2
 8016e4a:	42ab      	cmp	r3, r5
 8016e4c:	dcf2      	bgt.n	8016e34 <_printf_i+0x1e8>
 8016e4e:	e7eb      	b.n	8016e28 <_printf_i+0x1dc>
 8016e50:	2500      	movs	r5, #0
 8016e52:	f104 0919 	add.w	r9, r4, #25
 8016e56:	e7f5      	b.n	8016e44 <_printf_i+0x1f8>
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d1ac      	bne.n	8016db6 <_printf_i+0x16a>
 8016e5c:	7803      	ldrb	r3, [r0, #0]
 8016e5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016e62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016e66:	e76c      	b.n	8016d42 <_printf_i+0xf6>
 8016e68:	0801b8a4 	.word	0x0801b8a4
 8016e6c:	0801b8b5 	.word	0x0801b8b5

08016e70 <_scanf_float>:
 8016e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e74:	469a      	mov	sl, r3
 8016e76:	688b      	ldr	r3, [r1, #8]
 8016e78:	4616      	mov	r6, r2
 8016e7a:	1e5a      	subs	r2, r3, #1
 8016e7c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016e80:	b087      	sub	sp, #28
 8016e82:	bf83      	ittte	hi
 8016e84:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016e88:	189b      	addhi	r3, r3, r2
 8016e8a:	9301      	strhi	r3, [sp, #4]
 8016e8c:	2300      	movls	r3, #0
 8016e8e:	bf86      	itte	hi
 8016e90:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016e94:	608b      	strhi	r3, [r1, #8]
 8016e96:	9301      	strls	r3, [sp, #4]
 8016e98:	680b      	ldr	r3, [r1, #0]
 8016e9a:	4688      	mov	r8, r1
 8016e9c:	f04f 0b00 	mov.w	fp, #0
 8016ea0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016ea4:	f848 3b1c 	str.w	r3, [r8], #28
 8016ea8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8016eac:	4607      	mov	r7, r0
 8016eae:	460c      	mov	r4, r1
 8016eb0:	4645      	mov	r5, r8
 8016eb2:	465a      	mov	r2, fp
 8016eb4:	46d9      	mov	r9, fp
 8016eb6:	f8cd b008 	str.w	fp, [sp, #8]
 8016eba:	68a1      	ldr	r1, [r4, #8]
 8016ebc:	b181      	cbz	r1, 8016ee0 <_scanf_float+0x70>
 8016ebe:	6833      	ldr	r3, [r6, #0]
 8016ec0:	781b      	ldrb	r3, [r3, #0]
 8016ec2:	2b49      	cmp	r3, #73	; 0x49
 8016ec4:	d071      	beq.n	8016faa <_scanf_float+0x13a>
 8016ec6:	d84d      	bhi.n	8016f64 <_scanf_float+0xf4>
 8016ec8:	2b39      	cmp	r3, #57	; 0x39
 8016eca:	d840      	bhi.n	8016f4e <_scanf_float+0xde>
 8016ecc:	2b31      	cmp	r3, #49	; 0x31
 8016ece:	f080 8088 	bcs.w	8016fe2 <_scanf_float+0x172>
 8016ed2:	2b2d      	cmp	r3, #45	; 0x2d
 8016ed4:	f000 8090 	beq.w	8016ff8 <_scanf_float+0x188>
 8016ed8:	d815      	bhi.n	8016f06 <_scanf_float+0x96>
 8016eda:	2b2b      	cmp	r3, #43	; 0x2b
 8016edc:	f000 808c 	beq.w	8016ff8 <_scanf_float+0x188>
 8016ee0:	f1b9 0f00 	cmp.w	r9, #0
 8016ee4:	d003      	beq.n	8016eee <_scanf_float+0x7e>
 8016ee6:	6823      	ldr	r3, [r4, #0]
 8016ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016eec:	6023      	str	r3, [r4, #0]
 8016eee:	3a01      	subs	r2, #1
 8016ef0:	2a01      	cmp	r2, #1
 8016ef2:	f200 80ea 	bhi.w	80170ca <_scanf_float+0x25a>
 8016ef6:	4545      	cmp	r5, r8
 8016ef8:	f200 80dc 	bhi.w	80170b4 <_scanf_float+0x244>
 8016efc:	2601      	movs	r6, #1
 8016efe:	4630      	mov	r0, r6
 8016f00:	b007      	add	sp, #28
 8016f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f06:	2b2e      	cmp	r3, #46	; 0x2e
 8016f08:	f000 809f 	beq.w	801704a <_scanf_float+0x1da>
 8016f0c:	2b30      	cmp	r3, #48	; 0x30
 8016f0e:	d1e7      	bne.n	8016ee0 <_scanf_float+0x70>
 8016f10:	6820      	ldr	r0, [r4, #0]
 8016f12:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016f16:	d064      	beq.n	8016fe2 <_scanf_float+0x172>
 8016f18:	9b01      	ldr	r3, [sp, #4]
 8016f1a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8016f1e:	6020      	str	r0, [r4, #0]
 8016f20:	f109 0901 	add.w	r9, r9, #1
 8016f24:	b11b      	cbz	r3, 8016f2e <_scanf_float+0xbe>
 8016f26:	3b01      	subs	r3, #1
 8016f28:	3101      	adds	r1, #1
 8016f2a:	9301      	str	r3, [sp, #4]
 8016f2c:	60a1      	str	r1, [r4, #8]
 8016f2e:	68a3      	ldr	r3, [r4, #8]
 8016f30:	3b01      	subs	r3, #1
 8016f32:	60a3      	str	r3, [r4, #8]
 8016f34:	6923      	ldr	r3, [r4, #16]
 8016f36:	3301      	adds	r3, #1
 8016f38:	6123      	str	r3, [r4, #16]
 8016f3a:	6873      	ldr	r3, [r6, #4]
 8016f3c:	3b01      	subs	r3, #1
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	6073      	str	r3, [r6, #4]
 8016f42:	f340 80ac 	ble.w	801709e <_scanf_float+0x22e>
 8016f46:	6833      	ldr	r3, [r6, #0]
 8016f48:	3301      	adds	r3, #1
 8016f4a:	6033      	str	r3, [r6, #0]
 8016f4c:	e7b5      	b.n	8016eba <_scanf_float+0x4a>
 8016f4e:	2b45      	cmp	r3, #69	; 0x45
 8016f50:	f000 8085 	beq.w	801705e <_scanf_float+0x1ee>
 8016f54:	2b46      	cmp	r3, #70	; 0x46
 8016f56:	d06a      	beq.n	801702e <_scanf_float+0x1be>
 8016f58:	2b41      	cmp	r3, #65	; 0x41
 8016f5a:	d1c1      	bne.n	8016ee0 <_scanf_float+0x70>
 8016f5c:	2a01      	cmp	r2, #1
 8016f5e:	d1bf      	bne.n	8016ee0 <_scanf_float+0x70>
 8016f60:	2202      	movs	r2, #2
 8016f62:	e046      	b.n	8016ff2 <_scanf_float+0x182>
 8016f64:	2b65      	cmp	r3, #101	; 0x65
 8016f66:	d07a      	beq.n	801705e <_scanf_float+0x1ee>
 8016f68:	d818      	bhi.n	8016f9c <_scanf_float+0x12c>
 8016f6a:	2b54      	cmp	r3, #84	; 0x54
 8016f6c:	d066      	beq.n	801703c <_scanf_float+0x1cc>
 8016f6e:	d811      	bhi.n	8016f94 <_scanf_float+0x124>
 8016f70:	2b4e      	cmp	r3, #78	; 0x4e
 8016f72:	d1b5      	bne.n	8016ee0 <_scanf_float+0x70>
 8016f74:	2a00      	cmp	r2, #0
 8016f76:	d146      	bne.n	8017006 <_scanf_float+0x196>
 8016f78:	f1b9 0f00 	cmp.w	r9, #0
 8016f7c:	d145      	bne.n	801700a <_scanf_float+0x19a>
 8016f7e:	6821      	ldr	r1, [r4, #0]
 8016f80:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016f84:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016f88:	d13f      	bne.n	801700a <_scanf_float+0x19a>
 8016f8a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016f8e:	6021      	str	r1, [r4, #0]
 8016f90:	2201      	movs	r2, #1
 8016f92:	e02e      	b.n	8016ff2 <_scanf_float+0x182>
 8016f94:	2b59      	cmp	r3, #89	; 0x59
 8016f96:	d01e      	beq.n	8016fd6 <_scanf_float+0x166>
 8016f98:	2b61      	cmp	r3, #97	; 0x61
 8016f9a:	e7de      	b.n	8016f5a <_scanf_float+0xea>
 8016f9c:	2b6e      	cmp	r3, #110	; 0x6e
 8016f9e:	d0e9      	beq.n	8016f74 <_scanf_float+0x104>
 8016fa0:	d815      	bhi.n	8016fce <_scanf_float+0x15e>
 8016fa2:	2b66      	cmp	r3, #102	; 0x66
 8016fa4:	d043      	beq.n	801702e <_scanf_float+0x1be>
 8016fa6:	2b69      	cmp	r3, #105	; 0x69
 8016fa8:	d19a      	bne.n	8016ee0 <_scanf_float+0x70>
 8016faa:	f1bb 0f00 	cmp.w	fp, #0
 8016fae:	d138      	bne.n	8017022 <_scanf_float+0x1b2>
 8016fb0:	f1b9 0f00 	cmp.w	r9, #0
 8016fb4:	d197      	bne.n	8016ee6 <_scanf_float+0x76>
 8016fb6:	6821      	ldr	r1, [r4, #0]
 8016fb8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016fbc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016fc0:	d195      	bne.n	8016eee <_scanf_float+0x7e>
 8016fc2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016fc6:	6021      	str	r1, [r4, #0]
 8016fc8:	f04f 0b01 	mov.w	fp, #1
 8016fcc:	e011      	b.n	8016ff2 <_scanf_float+0x182>
 8016fce:	2b74      	cmp	r3, #116	; 0x74
 8016fd0:	d034      	beq.n	801703c <_scanf_float+0x1cc>
 8016fd2:	2b79      	cmp	r3, #121	; 0x79
 8016fd4:	d184      	bne.n	8016ee0 <_scanf_float+0x70>
 8016fd6:	f1bb 0f07 	cmp.w	fp, #7
 8016fda:	d181      	bne.n	8016ee0 <_scanf_float+0x70>
 8016fdc:	f04f 0b08 	mov.w	fp, #8
 8016fe0:	e007      	b.n	8016ff2 <_scanf_float+0x182>
 8016fe2:	eb12 0f0b 	cmn.w	r2, fp
 8016fe6:	f47f af7b 	bne.w	8016ee0 <_scanf_float+0x70>
 8016fea:	6821      	ldr	r1, [r4, #0]
 8016fec:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016ff0:	6021      	str	r1, [r4, #0]
 8016ff2:	702b      	strb	r3, [r5, #0]
 8016ff4:	3501      	adds	r5, #1
 8016ff6:	e79a      	b.n	8016f2e <_scanf_float+0xbe>
 8016ff8:	6821      	ldr	r1, [r4, #0]
 8016ffa:	0608      	lsls	r0, r1, #24
 8016ffc:	f57f af70 	bpl.w	8016ee0 <_scanf_float+0x70>
 8017000:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017004:	e7f4      	b.n	8016ff0 <_scanf_float+0x180>
 8017006:	2a02      	cmp	r2, #2
 8017008:	d047      	beq.n	801709a <_scanf_float+0x22a>
 801700a:	f1bb 0f01 	cmp.w	fp, #1
 801700e:	d003      	beq.n	8017018 <_scanf_float+0x1a8>
 8017010:	f1bb 0f04 	cmp.w	fp, #4
 8017014:	f47f af64 	bne.w	8016ee0 <_scanf_float+0x70>
 8017018:	f10b 0b01 	add.w	fp, fp, #1
 801701c:	fa5f fb8b 	uxtb.w	fp, fp
 8017020:	e7e7      	b.n	8016ff2 <_scanf_float+0x182>
 8017022:	f1bb 0f03 	cmp.w	fp, #3
 8017026:	d0f7      	beq.n	8017018 <_scanf_float+0x1a8>
 8017028:	f1bb 0f05 	cmp.w	fp, #5
 801702c:	e7f2      	b.n	8017014 <_scanf_float+0x1a4>
 801702e:	f1bb 0f02 	cmp.w	fp, #2
 8017032:	f47f af55 	bne.w	8016ee0 <_scanf_float+0x70>
 8017036:	f04f 0b03 	mov.w	fp, #3
 801703a:	e7da      	b.n	8016ff2 <_scanf_float+0x182>
 801703c:	f1bb 0f06 	cmp.w	fp, #6
 8017040:	f47f af4e 	bne.w	8016ee0 <_scanf_float+0x70>
 8017044:	f04f 0b07 	mov.w	fp, #7
 8017048:	e7d3      	b.n	8016ff2 <_scanf_float+0x182>
 801704a:	6821      	ldr	r1, [r4, #0]
 801704c:	0588      	lsls	r0, r1, #22
 801704e:	f57f af47 	bpl.w	8016ee0 <_scanf_float+0x70>
 8017052:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8017056:	6021      	str	r1, [r4, #0]
 8017058:	f8cd 9008 	str.w	r9, [sp, #8]
 801705c:	e7c9      	b.n	8016ff2 <_scanf_float+0x182>
 801705e:	6821      	ldr	r1, [r4, #0]
 8017060:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8017064:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8017068:	d006      	beq.n	8017078 <_scanf_float+0x208>
 801706a:	0548      	lsls	r0, r1, #21
 801706c:	f57f af38 	bpl.w	8016ee0 <_scanf_float+0x70>
 8017070:	f1b9 0f00 	cmp.w	r9, #0
 8017074:	f43f af3b 	beq.w	8016eee <_scanf_float+0x7e>
 8017078:	0588      	lsls	r0, r1, #22
 801707a:	bf58      	it	pl
 801707c:	9802      	ldrpl	r0, [sp, #8]
 801707e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017082:	bf58      	it	pl
 8017084:	eba9 0000 	subpl.w	r0, r9, r0
 8017088:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801708c:	bf58      	it	pl
 801708e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8017092:	6021      	str	r1, [r4, #0]
 8017094:	f04f 0900 	mov.w	r9, #0
 8017098:	e7ab      	b.n	8016ff2 <_scanf_float+0x182>
 801709a:	2203      	movs	r2, #3
 801709c:	e7a9      	b.n	8016ff2 <_scanf_float+0x182>
 801709e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80170a2:	9205      	str	r2, [sp, #20]
 80170a4:	4631      	mov	r1, r6
 80170a6:	4638      	mov	r0, r7
 80170a8:	4798      	blx	r3
 80170aa:	9a05      	ldr	r2, [sp, #20]
 80170ac:	2800      	cmp	r0, #0
 80170ae:	f43f af04 	beq.w	8016eba <_scanf_float+0x4a>
 80170b2:	e715      	b.n	8016ee0 <_scanf_float+0x70>
 80170b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80170b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80170bc:	4632      	mov	r2, r6
 80170be:	4638      	mov	r0, r7
 80170c0:	4798      	blx	r3
 80170c2:	6923      	ldr	r3, [r4, #16]
 80170c4:	3b01      	subs	r3, #1
 80170c6:	6123      	str	r3, [r4, #16]
 80170c8:	e715      	b.n	8016ef6 <_scanf_float+0x86>
 80170ca:	f10b 33ff 	add.w	r3, fp, #4294967295
 80170ce:	2b06      	cmp	r3, #6
 80170d0:	d80a      	bhi.n	80170e8 <_scanf_float+0x278>
 80170d2:	f1bb 0f02 	cmp.w	fp, #2
 80170d6:	d968      	bls.n	80171aa <_scanf_float+0x33a>
 80170d8:	f1ab 0b03 	sub.w	fp, fp, #3
 80170dc:	fa5f fb8b 	uxtb.w	fp, fp
 80170e0:	eba5 0b0b 	sub.w	fp, r5, fp
 80170e4:	455d      	cmp	r5, fp
 80170e6:	d14b      	bne.n	8017180 <_scanf_float+0x310>
 80170e8:	6823      	ldr	r3, [r4, #0]
 80170ea:	05da      	lsls	r2, r3, #23
 80170ec:	d51f      	bpl.n	801712e <_scanf_float+0x2be>
 80170ee:	055b      	lsls	r3, r3, #21
 80170f0:	d468      	bmi.n	80171c4 <_scanf_float+0x354>
 80170f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80170f6:	6923      	ldr	r3, [r4, #16]
 80170f8:	2965      	cmp	r1, #101	; 0x65
 80170fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80170fe:	f105 3bff 	add.w	fp, r5, #4294967295
 8017102:	6123      	str	r3, [r4, #16]
 8017104:	d00d      	beq.n	8017122 <_scanf_float+0x2b2>
 8017106:	2945      	cmp	r1, #69	; 0x45
 8017108:	d00b      	beq.n	8017122 <_scanf_float+0x2b2>
 801710a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801710e:	4632      	mov	r2, r6
 8017110:	4638      	mov	r0, r7
 8017112:	4798      	blx	r3
 8017114:	6923      	ldr	r3, [r4, #16]
 8017116:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801711a:	3b01      	subs	r3, #1
 801711c:	f1a5 0b02 	sub.w	fp, r5, #2
 8017120:	6123      	str	r3, [r4, #16]
 8017122:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017126:	4632      	mov	r2, r6
 8017128:	4638      	mov	r0, r7
 801712a:	4798      	blx	r3
 801712c:	465d      	mov	r5, fp
 801712e:	6826      	ldr	r6, [r4, #0]
 8017130:	f016 0610 	ands.w	r6, r6, #16
 8017134:	d17a      	bne.n	801722c <_scanf_float+0x3bc>
 8017136:	702e      	strb	r6, [r5, #0]
 8017138:	6823      	ldr	r3, [r4, #0]
 801713a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801713e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017142:	d142      	bne.n	80171ca <_scanf_float+0x35a>
 8017144:	9b02      	ldr	r3, [sp, #8]
 8017146:	eba9 0303 	sub.w	r3, r9, r3
 801714a:	425a      	negs	r2, r3
 801714c:	2b00      	cmp	r3, #0
 801714e:	d149      	bne.n	80171e4 <_scanf_float+0x374>
 8017150:	2200      	movs	r2, #0
 8017152:	4641      	mov	r1, r8
 8017154:	4638      	mov	r0, r7
 8017156:	f000 ffef 	bl	8018138 <_strtod_r>
 801715a:	6825      	ldr	r5, [r4, #0]
 801715c:	f8da 3000 	ldr.w	r3, [sl]
 8017160:	f015 0f02 	tst.w	r5, #2
 8017164:	f103 0204 	add.w	r2, r3, #4
 8017168:	ec59 8b10 	vmov	r8, r9, d0
 801716c:	f8ca 2000 	str.w	r2, [sl]
 8017170:	d043      	beq.n	80171fa <_scanf_float+0x38a>
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	e9c3 8900 	strd	r8, r9, [r3]
 8017178:	68e3      	ldr	r3, [r4, #12]
 801717a:	3301      	adds	r3, #1
 801717c:	60e3      	str	r3, [r4, #12]
 801717e:	e6be      	b.n	8016efe <_scanf_float+0x8e>
 8017180:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017184:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017188:	4632      	mov	r2, r6
 801718a:	4638      	mov	r0, r7
 801718c:	4798      	blx	r3
 801718e:	6923      	ldr	r3, [r4, #16]
 8017190:	3b01      	subs	r3, #1
 8017192:	6123      	str	r3, [r4, #16]
 8017194:	e7a6      	b.n	80170e4 <_scanf_float+0x274>
 8017196:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801719a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801719e:	4632      	mov	r2, r6
 80171a0:	4638      	mov	r0, r7
 80171a2:	4798      	blx	r3
 80171a4:	6923      	ldr	r3, [r4, #16]
 80171a6:	3b01      	subs	r3, #1
 80171a8:	6123      	str	r3, [r4, #16]
 80171aa:	4545      	cmp	r5, r8
 80171ac:	d8f3      	bhi.n	8017196 <_scanf_float+0x326>
 80171ae:	e6a5      	b.n	8016efc <_scanf_float+0x8c>
 80171b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80171b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80171b8:	4632      	mov	r2, r6
 80171ba:	4638      	mov	r0, r7
 80171bc:	4798      	blx	r3
 80171be:	6923      	ldr	r3, [r4, #16]
 80171c0:	3b01      	subs	r3, #1
 80171c2:	6123      	str	r3, [r4, #16]
 80171c4:	4545      	cmp	r5, r8
 80171c6:	d8f3      	bhi.n	80171b0 <_scanf_float+0x340>
 80171c8:	e698      	b.n	8016efc <_scanf_float+0x8c>
 80171ca:	9b03      	ldr	r3, [sp, #12]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d0bf      	beq.n	8017150 <_scanf_float+0x2e0>
 80171d0:	9904      	ldr	r1, [sp, #16]
 80171d2:	230a      	movs	r3, #10
 80171d4:	4632      	mov	r2, r6
 80171d6:	3101      	adds	r1, #1
 80171d8:	4638      	mov	r0, r7
 80171da:	f001 f839 	bl	8018250 <_strtol_r>
 80171de:	9b03      	ldr	r3, [sp, #12]
 80171e0:	9d04      	ldr	r5, [sp, #16]
 80171e2:	1ac2      	subs	r2, r0, r3
 80171e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80171e8:	429d      	cmp	r5, r3
 80171ea:	bf28      	it	cs
 80171ec:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80171f0:	490f      	ldr	r1, [pc, #60]	; (8017230 <_scanf_float+0x3c0>)
 80171f2:	4628      	mov	r0, r5
 80171f4:	f000 f96e 	bl	80174d4 <siprintf>
 80171f8:	e7aa      	b.n	8017150 <_scanf_float+0x2e0>
 80171fa:	f015 0504 	ands.w	r5, r5, #4
 80171fe:	d1b8      	bne.n	8017172 <_scanf_float+0x302>
 8017200:	681f      	ldr	r7, [r3, #0]
 8017202:	ee10 2a10 	vmov	r2, s0
 8017206:	464b      	mov	r3, r9
 8017208:	ee10 0a10 	vmov	r0, s0
 801720c:	4649      	mov	r1, r9
 801720e:	f7f1 fbc5 	bl	800899c <__aeabi_dcmpun>
 8017212:	b128      	cbz	r0, 8017220 <_scanf_float+0x3b0>
 8017214:	4628      	mov	r0, r5
 8017216:	f000 f957 	bl	80174c8 <nanf>
 801721a:	ed87 0a00 	vstr	s0, [r7]
 801721e:	e7ab      	b.n	8017178 <_scanf_float+0x308>
 8017220:	4640      	mov	r0, r8
 8017222:	4649      	mov	r1, r9
 8017224:	f7f1 fc18 	bl	8008a58 <__aeabi_d2f>
 8017228:	6038      	str	r0, [r7, #0]
 801722a:	e7a5      	b.n	8017178 <_scanf_float+0x308>
 801722c:	2600      	movs	r6, #0
 801722e:	e666      	b.n	8016efe <_scanf_float+0x8e>
 8017230:	0801b8c6 	.word	0x0801b8c6

08017234 <iprintf>:
 8017234:	b40f      	push	{r0, r1, r2, r3}
 8017236:	4b0a      	ldr	r3, [pc, #40]	; (8017260 <iprintf+0x2c>)
 8017238:	b513      	push	{r0, r1, r4, lr}
 801723a:	681c      	ldr	r4, [r3, #0]
 801723c:	b124      	cbz	r4, 8017248 <iprintf+0x14>
 801723e:	69a3      	ldr	r3, [r4, #24]
 8017240:	b913      	cbnz	r3, 8017248 <iprintf+0x14>
 8017242:	4620      	mov	r0, r4
 8017244:	f002 f81e 	bl	8019284 <__sinit>
 8017248:	ab05      	add	r3, sp, #20
 801724a:	9a04      	ldr	r2, [sp, #16]
 801724c:	68a1      	ldr	r1, [r4, #8]
 801724e:	9301      	str	r3, [sp, #4]
 8017250:	4620      	mov	r0, r4
 8017252:	f003 fab5 	bl	801a7c0 <_vfiprintf_r>
 8017256:	b002      	add	sp, #8
 8017258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801725c:	b004      	add	sp, #16
 801725e:	4770      	bx	lr
 8017260:	2000002c 	.word	0x2000002c

08017264 <_puts_r>:
 8017264:	b570      	push	{r4, r5, r6, lr}
 8017266:	460e      	mov	r6, r1
 8017268:	4605      	mov	r5, r0
 801726a:	b118      	cbz	r0, 8017274 <_puts_r+0x10>
 801726c:	6983      	ldr	r3, [r0, #24]
 801726e:	b90b      	cbnz	r3, 8017274 <_puts_r+0x10>
 8017270:	f002 f808 	bl	8019284 <__sinit>
 8017274:	69ab      	ldr	r3, [r5, #24]
 8017276:	68ac      	ldr	r4, [r5, #8]
 8017278:	b913      	cbnz	r3, 8017280 <_puts_r+0x1c>
 801727a:	4628      	mov	r0, r5
 801727c:	f002 f802 	bl	8019284 <__sinit>
 8017280:	4b23      	ldr	r3, [pc, #140]	; (8017310 <_puts_r+0xac>)
 8017282:	429c      	cmp	r4, r3
 8017284:	d117      	bne.n	80172b6 <_puts_r+0x52>
 8017286:	686c      	ldr	r4, [r5, #4]
 8017288:	89a3      	ldrh	r3, [r4, #12]
 801728a:	071b      	lsls	r3, r3, #28
 801728c:	d51d      	bpl.n	80172ca <_puts_r+0x66>
 801728e:	6923      	ldr	r3, [r4, #16]
 8017290:	b1db      	cbz	r3, 80172ca <_puts_r+0x66>
 8017292:	3e01      	subs	r6, #1
 8017294:	68a3      	ldr	r3, [r4, #8]
 8017296:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801729a:	3b01      	subs	r3, #1
 801729c:	60a3      	str	r3, [r4, #8]
 801729e:	b9e9      	cbnz	r1, 80172dc <_puts_r+0x78>
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	da2e      	bge.n	8017302 <_puts_r+0x9e>
 80172a4:	4622      	mov	r2, r4
 80172a6:	210a      	movs	r1, #10
 80172a8:	4628      	mov	r0, r5
 80172aa:	f000 ffe3 	bl	8018274 <__swbuf_r>
 80172ae:	3001      	adds	r0, #1
 80172b0:	d011      	beq.n	80172d6 <_puts_r+0x72>
 80172b2:	200a      	movs	r0, #10
 80172b4:	e011      	b.n	80172da <_puts_r+0x76>
 80172b6:	4b17      	ldr	r3, [pc, #92]	; (8017314 <_puts_r+0xb0>)
 80172b8:	429c      	cmp	r4, r3
 80172ba:	d101      	bne.n	80172c0 <_puts_r+0x5c>
 80172bc:	68ac      	ldr	r4, [r5, #8]
 80172be:	e7e3      	b.n	8017288 <_puts_r+0x24>
 80172c0:	4b15      	ldr	r3, [pc, #84]	; (8017318 <_puts_r+0xb4>)
 80172c2:	429c      	cmp	r4, r3
 80172c4:	bf08      	it	eq
 80172c6:	68ec      	ldreq	r4, [r5, #12]
 80172c8:	e7de      	b.n	8017288 <_puts_r+0x24>
 80172ca:	4621      	mov	r1, r4
 80172cc:	4628      	mov	r0, r5
 80172ce:	f001 f823 	bl	8018318 <__swsetup_r>
 80172d2:	2800      	cmp	r0, #0
 80172d4:	d0dd      	beq.n	8017292 <_puts_r+0x2e>
 80172d6:	f04f 30ff 	mov.w	r0, #4294967295
 80172da:	bd70      	pop	{r4, r5, r6, pc}
 80172dc:	2b00      	cmp	r3, #0
 80172de:	da04      	bge.n	80172ea <_puts_r+0x86>
 80172e0:	69a2      	ldr	r2, [r4, #24]
 80172e2:	429a      	cmp	r2, r3
 80172e4:	dc06      	bgt.n	80172f4 <_puts_r+0x90>
 80172e6:	290a      	cmp	r1, #10
 80172e8:	d004      	beq.n	80172f4 <_puts_r+0x90>
 80172ea:	6823      	ldr	r3, [r4, #0]
 80172ec:	1c5a      	adds	r2, r3, #1
 80172ee:	6022      	str	r2, [r4, #0]
 80172f0:	7019      	strb	r1, [r3, #0]
 80172f2:	e7cf      	b.n	8017294 <_puts_r+0x30>
 80172f4:	4622      	mov	r2, r4
 80172f6:	4628      	mov	r0, r5
 80172f8:	f000 ffbc 	bl	8018274 <__swbuf_r>
 80172fc:	3001      	adds	r0, #1
 80172fe:	d1c9      	bne.n	8017294 <_puts_r+0x30>
 8017300:	e7e9      	b.n	80172d6 <_puts_r+0x72>
 8017302:	6823      	ldr	r3, [r4, #0]
 8017304:	200a      	movs	r0, #10
 8017306:	1c5a      	adds	r2, r3, #1
 8017308:	6022      	str	r2, [r4, #0]
 801730a:	7018      	strb	r0, [r3, #0]
 801730c:	e7e5      	b.n	80172da <_puts_r+0x76>
 801730e:	bf00      	nop
 8017310:	0801b950 	.word	0x0801b950
 8017314:	0801b970 	.word	0x0801b970
 8017318:	0801b930 	.word	0x0801b930

0801731c <puts>:
 801731c:	4b02      	ldr	r3, [pc, #8]	; (8017328 <puts+0xc>)
 801731e:	4601      	mov	r1, r0
 8017320:	6818      	ldr	r0, [r3, #0]
 8017322:	f7ff bf9f 	b.w	8017264 <_puts_r>
 8017326:	bf00      	nop
 8017328:	2000002c 	.word	0x2000002c

0801732c <iscanf>:
 801732c:	b40f      	push	{r0, r1, r2, r3}
 801732e:	4b0a      	ldr	r3, [pc, #40]	; (8017358 <iscanf+0x2c>)
 8017330:	b513      	push	{r0, r1, r4, lr}
 8017332:	681c      	ldr	r4, [r3, #0]
 8017334:	b124      	cbz	r4, 8017340 <iscanf+0x14>
 8017336:	69a3      	ldr	r3, [r4, #24]
 8017338:	b913      	cbnz	r3, 8017340 <iscanf+0x14>
 801733a:	4620      	mov	r0, r4
 801733c:	f001 ffa2 	bl	8019284 <__sinit>
 8017340:	ab05      	add	r3, sp, #20
 8017342:	9a04      	ldr	r2, [sp, #16]
 8017344:	6861      	ldr	r1, [r4, #4]
 8017346:	9301      	str	r3, [sp, #4]
 8017348:	4620      	mov	r0, r4
 801734a:	f003 fc9f 	bl	801ac8c <_vfiscanf_r>
 801734e:	b002      	add	sp, #8
 8017350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017354:	b004      	add	sp, #16
 8017356:	4770      	bx	lr
 8017358:	2000002c 	.word	0x2000002c

0801735c <setbuf>:
 801735c:	2900      	cmp	r1, #0
 801735e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017362:	bf0c      	ite	eq
 8017364:	2202      	moveq	r2, #2
 8017366:	2200      	movne	r2, #0
 8017368:	f000 b800 	b.w	801736c <setvbuf>

0801736c <setvbuf>:
 801736c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017370:	461d      	mov	r5, r3
 8017372:	4b51      	ldr	r3, [pc, #324]	; (80174b8 <setvbuf+0x14c>)
 8017374:	681e      	ldr	r6, [r3, #0]
 8017376:	4604      	mov	r4, r0
 8017378:	460f      	mov	r7, r1
 801737a:	4690      	mov	r8, r2
 801737c:	b126      	cbz	r6, 8017388 <setvbuf+0x1c>
 801737e:	69b3      	ldr	r3, [r6, #24]
 8017380:	b913      	cbnz	r3, 8017388 <setvbuf+0x1c>
 8017382:	4630      	mov	r0, r6
 8017384:	f001 ff7e 	bl	8019284 <__sinit>
 8017388:	4b4c      	ldr	r3, [pc, #304]	; (80174bc <setvbuf+0x150>)
 801738a:	429c      	cmp	r4, r3
 801738c:	d152      	bne.n	8017434 <setvbuf+0xc8>
 801738e:	6874      	ldr	r4, [r6, #4]
 8017390:	f1b8 0f02 	cmp.w	r8, #2
 8017394:	d006      	beq.n	80173a4 <setvbuf+0x38>
 8017396:	f1b8 0f01 	cmp.w	r8, #1
 801739a:	f200 8089 	bhi.w	80174b0 <setvbuf+0x144>
 801739e:	2d00      	cmp	r5, #0
 80173a0:	f2c0 8086 	blt.w	80174b0 <setvbuf+0x144>
 80173a4:	4621      	mov	r1, r4
 80173a6:	4630      	mov	r0, r6
 80173a8:	f001 fef0 	bl	801918c <_fflush_r>
 80173ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80173ae:	b141      	cbz	r1, 80173c2 <setvbuf+0x56>
 80173b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80173b4:	4299      	cmp	r1, r3
 80173b6:	d002      	beq.n	80173be <setvbuf+0x52>
 80173b8:	4630      	mov	r0, r6
 80173ba:	f002 ffdd 	bl	801a378 <_free_r>
 80173be:	2300      	movs	r3, #0
 80173c0:	6363      	str	r3, [r4, #52]	; 0x34
 80173c2:	2300      	movs	r3, #0
 80173c4:	61a3      	str	r3, [r4, #24]
 80173c6:	6063      	str	r3, [r4, #4]
 80173c8:	89a3      	ldrh	r3, [r4, #12]
 80173ca:	061b      	lsls	r3, r3, #24
 80173cc:	d503      	bpl.n	80173d6 <setvbuf+0x6a>
 80173ce:	6921      	ldr	r1, [r4, #16]
 80173d0:	4630      	mov	r0, r6
 80173d2:	f002 ffd1 	bl	801a378 <_free_r>
 80173d6:	89a3      	ldrh	r3, [r4, #12]
 80173d8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80173dc:	f023 0303 	bic.w	r3, r3, #3
 80173e0:	f1b8 0f02 	cmp.w	r8, #2
 80173e4:	81a3      	strh	r3, [r4, #12]
 80173e6:	d05d      	beq.n	80174a4 <setvbuf+0x138>
 80173e8:	ab01      	add	r3, sp, #4
 80173ea:	466a      	mov	r2, sp
 80173ec:	4621      	mov	r1, r4
 80173ee:	4630      	mov	r0, r6
 80173f0:	f002 fb36 	bl	8019a60 <__swhatbuf_r>
 80173f4:	89a3      	ldrh	r3, [r4, #12]
 80173f6:	4318      	orrs	r0, r3
 80173f8:	81a0      	strh	r0, [r4, #12]
 80173fa:	bb2d      	cbnz	r5, 8017448 <setvbuf+0xdc>
 80173fc:	9d00      	ldr	r5, [sp, #0]
 80173fe:	4628      	mov	r0, r5
 8017400:	f002 fb92 	bl	8019b28 <malloc>
 8017404:	4607      	mov	r7, r0
 8017406:	2800      	cmp	r0, #0
 8017408:	d14e      	bne.n	80174a8 <setvbuf+0x13c>
 801740a:	f8dd 9000 	ldr.w	r9, [sp]
 801740e:	45a9      	cmp	r9, r5
 8017410:	d13c      	bne.n	801748c <setvbuf+0x120>
 8017412:	f04f 30ff 	mov.w	r0, #4294967295
 8017416:	89a3      	ldrh	r3, [r4, #12]
 8017418:	f043 0302 	orr.w	r3, r3, #2
 801741c:	81a3      	strh	r3, [r4, #12]
 801741e:	2300      	movs	r3, #0
 8017420:	60a3      	str	r3, [r4, #8]
 8017422:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017426:	6023      	str	r3, [r4, #0]
 8017428:	6123      	str	r3, [r4, #16]
 801742a:	2301      	movs	r3, #1
 801742c:	6163      	str	r3, [r4, #20]
 801742e:	b003      	add	sp, #12
 8017430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017434:	4b22      	ldr	r3, [pc, #136]	; (80174c0 <setvbuf+0x154>)
 8017436:	429c      	cmp	r4, r3
 8017438:	d101      	bne.n	801743e <setvbuf+0xd2>
 801743a:	68b4      	ldr	r4, [r6, #8]
 801743c:	e7a8      	b.n	8017390 <setvbuf+0x24>
 801743e:	4b21      	ldr	r3, [pc, #132]	; (80174c4 <setvbuf+0x158>)
 8017440:	429c      	cmp	r4, r3
 8017442:	bf08      	it	eq
 8017444:	68f4      	ldreq	r4, [r6, #12]
 8017446:	e7a3      	b.n	8017390 <setvbuf+0x24>
 8017448:	2f00      	cmp	r7, #0
 801744a:	d0d8      	beq.n	80173fe <setvbuf+0x92>
 801744c:	69b3      	ldr	r3, [r6, #24]
 801744e:	b913      	cbnz	r3, 8017456 <setvbuf+0xea>
 8017450:	4630      	mov	r0, r6
 8017452:	f001 ff17 	bl	8019284 <__sinit>
 8017456:	f1b8 0f01 	cmp.w	r8, #1
 801745a:	bf08      	it	eq
 801745c:	89a3      	ldrheq	r3, [r4, #12]
 801745e:	6027      	str	r7, [r4, #0]
 8017460:	bf04      	itt	eq
 8017462:	f043 0301 	orreq.w	r3, r3, #1
 8017466:	81a3      	strheq	r3, [r4, #12]
 8017468:	89a3      	ldrh	r3, [r4, #12]
 801746a:	f013 0008 	ands.w	r0, r3, #8
 801746e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8017472:	d01b      	beq.n	80174ac <setvbuf+0x140>
 8017474:	f013 0001 	ands.w	r0, r3, #1
 8017478:	bf18      	it	ne
 801747a:	426d      	negne	r5, r5
 801747c:	f04f 0300 	mov.w	r3, #0
 8017480:	bf1d      	ittte	ne
 8017482:	60a3      	strne	r3, [r4, #8]
 8017484:	61a5      	strne	r5, [r4, #24]
 8017486:	4618      	movne	r0, r3
 8017488:	60a5      	streq	r5, [r4, #8]
 801748a:	e7d0      	b.n	801742e <setvbuf+0xc2>
 801748c:	4648      	mov	r0, r9
 801748e:	f002 fb4b 	bl	8019b28 <malloc>
 8017492:	4607      	mov	r7, r0
 8017494:	2800      	cmp	r0, #0
 8017496:	d0bc      	beq.n	8017412 <setvbuf+0xa6>
 8017498:	89a3      	ldrh	r3, [r4, #12]
 801749a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801749e:	81a3      	strh	r3, [r4, #12]
 80174a0:	464d      	mov	r5, r9
 80174a2:	e7d3      	b.n	801744c <setvbuf+0xe0>
 80174a4:	2000      	movs	r0, #0
 80174a6:	e7b6      	b.n	8017416 <setvbuf+0xaa>
 80174a8:	46a9      	mov	r9, r5
 80174aa:	e7f5      	b.n	8017498 <setvbuf+0x12c>
 80174ac:	60a0      	str	r0, [r4, #8]
 80174ae:	e7be      	b.n	801742e <setvbuf+0xc2>
 80174b0:	f04f 30ff 	mov.w	r0, #4294967295
 80174b4:	e7bb      	b.n	801742e <setvbuf+0xc2>
 80174b6:	bf00      	nop
 80174b8:	2000002c 	.word	0x2000002c
 80174bc:	0801b950 	.word	0x0801b950
 80174c0:	0801b970 	.word	0x0801b970
 80174c4:	0801b930 	.word	0x0801b930

080174c8 <nanf>:
 80174c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80174d0 <nanf+0x8>
 80174cc:	4770      	bx	lr
 80174ce:	bf00      	nop
 80174d0:	7fc00000 	.word	0x7fc00000

080174d4 <siprintf>:
 80174d4:	b40e      	push	{r1, r2, r3}
 80174d6:	b500      	push	{lr}
 80174d8:	b09c      	sub	sp, #112	; 0x70
 80174da:	ab1d      	add	r3, sp, #116	; 0x74
 80174dc:	9002      	str	r0, [sp, #8]
 80174de:	9006      	str	r0, [sp, #24]
 80174e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80174e4:	4809      	ldr	r0, [pc, #36]	; (801750c <siprintf+0x38>)
 80174e6:	9107      	str	r1, [sp, #28]
 80174e8:	9104      	str	r1, [sp, #16]
 80174ea:	4909      	ldr	r1, [pc, #36]	; (8017510 <siprintf+0x3c>)
 80174ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80174f0:	9105      	str	r1, [sp, #20]
 80174f2:	6800      	ldr	r0, [r0, #0]
 80174f4:	9301      	str	r3, [sp, #4]
 80174f6:	a902      	add	r1, sp, #8
 80174f8:	f003 f840 	bl	801a57c <_svfiprintf_r>
 80174fc:	9b02      	ldr	r3, [sp, #8]
 80174fe:	2200      	movs	r2, #0
 8017500:	701a      	strb	r2, [r3, #0]
 8017502:	b01c      	add	sp, #112	; 0x70
 8017504:	f85d eb04 	ldr.w	lr, [sp], #4
 8017508:	b003      	add	sp, #12
 801750a:	4770      	bx	lr
 801750c:	2000002c 	.word	0x2000002c
 8017510:	ffff0208 	.word	0xffff0208

08017514 <sulp>:
 8017514:	b570      	push	{r4, r5, r6, lr}
 8017516:	4604      	mov	r4, r0
 8017518:	460d      	mov	r5, r1
 801751a:	ec45 4b10 	vmov	d0, r4, r5
 801751e:	4616      	mov	r6, r2
 8017520:	f002 fde8 	bl	801a0f4 <__ulp>
 8017524:	ec51 0b10 	vmov	r0, r1, d0
 8017528:	b17e      	cbz	r6, 801754a <sulp+0x36>
 801752a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801752e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017532:	2b00      	cmp	r3, #0
 8017534:	dd09      	ble.n	801754a <sulp+0x36>
 8017536:	051b      	lsls	r3, r3, #20
 8017538:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801753c:	2400      	movs	r4, #0
 801753e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8017542:	4622      	mov	r2, r4
 8017544:	462b      	mov	r3, r5
 8017546:	f7f0 ff8f 	bl	8008468 <__aeabi_dmul>
 801754a:	bd70      	pop	{r4, r5, r6, pc}
 801754c:	0000      	movs	r0, r0
	...

08017550 <_strtod_l>:
 8017550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017554:	461f      	mov	r7, r3
 8017556:	b0a1      	sub	sp, #132	; 0x84
 8017558:	2300      	movs	r3, #0
 801755a:	4681      	mov	r9, r0
 801755c:	4638      	mov	r0, r7
 801755e:	460e      	mov	r6, r1
 8017560:	9217      	str	r2, [sp, #92]	; 0x5c
 8017562:	931c      	str	r3, [sp, #112]	; 0x70
 8017564:	f002 fa6c 	bl	8019a40 <__localeconv_l>
 8017568:	4680      	mov	r8, r0
 801756a:	6800      	ldr	r0, [r0, #0]
 801756c:	f7f0 fd68 	bl	8008040 <strlen>
 8017570:	f04f 0a00 	mov.w	sl, #0
 8017574:	4604      	mov	r4, r0
 8017576:	f04f 0b00 	mov.w	fp, #0
 801757a:	961b      	str	r6, [sp, #108]	; 0x6c
 801757c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801757e:	781a      	ldrb	r2, [r3, #0]
 8017580:	2a0d      	cmp	r2, #13
 8017582:	d832      	bhi.n	80175ea <_strtod_l+0x9a>
 8017584:	2a09      	cmp	r2, #9
 8017586:	d236      	bcs.n	80175f6 <_strtod_l+0xa6>
 8017588:	2a00      	cmp	r2, #0
 801758a:	d03e      	beq.n	801760a <_strtod_l+0xba>
 801758c:	2300      	movs	r3, #0
 801758e:	930d      	str	r3, [sp, #52]	; 0x34
 8017590:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8017592:	782b      	ldrb	r3, [r5, #0]
 8017594:	2b30      	cmp	r3, #48	; 0x30
 8017596:	f040 80ac 	bne.w	80176f2 <_strtod_l+0x1a2>
 801759a:	786b      	ldrb	r3, [r5, #1]
 801759c:	2b58      	cmp	r3, #88	; 0x58
 801759e:	d001      	beq.n	80175a4 <_strtod_l+0x54>
 80175a0:	2b78      	cmp	r3, #120	; 0x78
 80175a2:	d167      	bne.n	8017674 <_strtod_l+0x124>
 80175a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175a6:	9301      	str	r3, [sp, #4]
 80175a8:	ab1c      	add	r3, sp, #112	; 0x70
 80175aa:	9300      	str	r3, [sp, #0]
 80175ac:	9702      	str	r7, [sp, #8]
 80175ae:	ab1d      	add	r3, sp, #116	; 0x74
 80175b0:	4a88      	ldr	r2, [pc, #544]	; (80177d4 <_strtod_l+0x284>)
 80175b2:	a91b      	add	r1, sp, #108	; 0x6c
 80175b4:	4648      	mov	r0, r9
 80175b6:	f001 ff5a 	bl	801946e <__gethex>
 80175ba:	f010 0407 	ands.w	r4, r0, #7
 80175be:	4606      	mov	r6, r0
 80175c0:	d005      	beq.n	80175ce <_strtod_l+0x7e>
 80175c2:	2c06      	cmp	r4, #6
 80175c4:	d12b      	bne.n	801761e <_strtod_l+0xce>
 80175c6:	3501      	adds	r5, #1
 80175c8:	2300      	movs	r3, #0
 80175ca:	951b      	str	r5, [sp, #108]	; 0x6c
 80175cc:	930d      	str	r3, [sp, #52]	; 0x34
 80175ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	f040 859a 	bne.w	801810a <_strtod_l+0xbba>
 80175d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175d8:	b1e3      	cbz	r3, 8017614 <_strtod_l+0xc4>
 80175da:	4652      	mov	r2, sl
 80175dc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80175e0:	ec43 2b10 	vmov	d0, r2, r3
 80175e4:	b021      	add	sp, #132	; 0x84
 80175e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175ea:	2a2b      	cmp	r2, #43	; 0x2b
 80175ec:	d015      	beq.n	801761a <_strtod_l+0xca>
 80175ee:	2a2d      	cmp	r2, #45	; 0x2d
 80175f0:	d004      	beq.n	80175fc <_strtod_l+0xac>
 80175f2:	2a20      	cmp	r2, #32
 80175f4:	d1ca      	bne.n	801758c <_strtod_l+0x3c>
 80175f6:	3301      	adds	r3, #1
 80175f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80175fa:	e7bf      	b.n	801757c <_strtod_l+0x2c>
 80175fc:	2201      	movs	r2, #1
 80175fe:	920d      	str	r2, [sp, #52]	; 0x34
 8017600:	1c5a      	adds	r2, r3, #1
 8017602:	921b      	str	r2, [sp, #108]	; 0x6c
 8017604:	785b      	ldrb	r3, [r3, #1]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d1c2      	bne.n	8017590 <_strtod_l+0x40>
 801760a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801760c:	961b      	str	r6, [sp, #108]	; 0x6c
 801760e:	2b00      	cmp	r3, #0
 8017610:	f040 8579 	bne.w	8018106 <_strtod_l+0xbb6>
 8017614:	4652      	mov	r2, sl
 8017616:	465b      	mov	r3, fp
 8017618:	e7e2      	b.n	80175e0 <_strtod_l+0x90>
 801761a:	2200      	movs	r2, #0
 801761c:	e7ef      	b.n	80175fe <_strtod_l+0xae>
 801761e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017620:	b13a      	cbz	r2, 8017632 <_strtod_l+0xe2>
 8017622:	2135      	movs	r1, #53	; 0x35
 8017624:	a81e      	add	r0, sp, #120	; 0x78
 8017626:	f002 fe5d 	bl	801a2e4 <__copybits>
 801762a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801762c:	4648      	mov	r0, r9
 801762e:	f002 fac9 	bl	8019bc4 <_Bfree>
 8017632:	3c01      	subs	r4, #1
 8017634:	2c04      	cmp	r4, #4
 8017636:	d806      	bhi.n	8017646 <_strtod_l+0xf6>
 8017638:	e8df f004 	tbb	[pc, r4]
 801763c:	1714030a 	.word	0x1714030a
 8017640:	0a          	.byte	0x0a
 8017641:	00          	.byte	0x00
 8017642:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8017646:	0730      	lsls	r0, r6, #28
 8017648:	d5c1      	bpl.n	80175ce <_strtod_l+0x7e>
 801764a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801764e:	e7be      	b.n	80175ce <_strtod_l+0x7e>
 8017650:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8017654:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017656:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801765a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801765e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017662:	e7f0      	b.n	8017646 <_strtod_l+0xf6>
 8017664:	f8df b170 	ldr.w	fp, [pc, #368]	; 80177d8 <_strtod_l+0x288>
 8017668:	e7ed      	b.n	8017646 <_strtod_l+0xf6>
 801766a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801766e:	f04f 3aff 	mov.w	sl, #4294967295
 8017672:	e7e8      	b.n	8017646 <_strtod_l+0xf6>
 8017674:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017676:	1c5a      	adds	r2, r3, #1
 8017678:	921b      	str	r2, [sp, #108]	; 0x6c
 801767a:	785b      	ldrb	r3, [r3, #1]
 801767c:	2b30      	cmp	r3, #48	; 0x30
 801767e:	d0f9      	beq.n	8017674 <_strtod_l+0x124>
 8017680:	2b00      	cmp	r3, #0
 8017682:	d0a4      	beq.n	80175ce <_strtod_l+0x7e>
 8017684:	2301      	movs	r3, #1
 8017686:	2500      	movs	r5, #0
 8017688:	9306      	str	r3, [sp, #24]
 801768a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801768c:	9308      	str	r3, [sp, #32]
 801768e:	9507      	str	r5, [sp, #28]
 8017690:	9505      	str	r5, [sp, #20]
 8017692:	220a      	movs	r2, #10
 8017694:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8017696:	7807      	ldrb	r7, [r0, #0]
 8017698:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801769c:	b2d9      	uxtb	r1, r3
 801769e:	2909      	cmp	r1, #9
 80176a0:	d929      	bls.n	80176f6 <_strtod_l+0x1a6>
 80176a2:	4622      	mov	r2, r4
 80176a4:	f8d8 1000 	ldr.w	r1, [r8]
 80176a8:	f003 fd8b 	bl	801b1c2 <strncmp>
 80176ac:	2800      	cmp	r0, #0
 80176ae:	d031      	beq.n	8017714 <_strtod_l+0x1c4>
 80176b0:	2000      	movs	r0, #0
 80176b2:	9c05      	ldr	r4, [sp, #20]
 80176b4:	9004      	str	r0, [sp, #16]
 80176b6:	463b      	mov	r3, r7
 80176b8:	4602      	mov	r2, r0
 80176ba:	2b65      	cmp	r3, #101	; 0x65
 80176bc:	d001      	beq.n	80176c2 <_strtod_l+0x172>
 80176be:	2b45      	cmp	r3, #69	; 0x45
 80176c0:	d114      	bne.n	80176ec <_strtod_l+0x19c>
 80176c2:	b924      	cbnz	r4, 80176ce <_strtod_l+0x17e>
 80176c4:	b910      	cbnz	r0, 80176cc <_strtod_l+0x17c>
 80176c6:	9b06      	ldr	r3, [sp, #24]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d09e      	beq.n	801760a <_strtod_l+0xba>
 80176cc:	2400      	movs	r4, #0
 80176ce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80176d0:	1c73      	adds	r3, r6, #1
 80176d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80176d4:	7873      	ldrb	r3, [r6, #1]
 80176d6:	2b2b      	cmp	r3, #43	; 0x2b
 80176d8:	d078      	beq.n	80177cc <_strtod_l+0x27c>
 80176da:	2b2d      	cmp	r3, #45	; 0x2d
 80176dc:	d070      	beq.n	80177c0 <_strtod_l+0x270>
 80176de:	f04f 0c00 	mov.w	ip, #0
 80176e2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80176e6:	2f09      	cmp	r7, #9
 80176e8:	d97c      	bls.n	80177e4 <_strtod_l+0x294>
 80176ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80176ec:	f04f 0e00 	mov.w	lr, #0
 80176f0:	e09a      	b.n	8017828 <_strtod_l+0x2d8>
 80176f2:	2300      	movs	r3, #0
 80176f4:	e7c7      	b.n	8017686 <_strtod_l+0x136>
 80176f6:	9905      	ldr	r1, [sp, #20]
 80176f8:	2908      	cmp	r1, #8
 80176fa:	bfdd      	ittte	le
 80176fc:	9907      	ldrle	r1, [sp, #28]
 80176fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8017702:	9307      	strle	r3, [sp, #28]
 8017704:	fb02 3505 	mlagt	r5, r2, r5, r3
 8017708:	9b05      	ldr	r3, [sp, #20]
 801770a:	3001      	adds	r0, #1
 801770c:	3301      	adds	r3, #1
 801770e:	9305      	str	r3, [sp, #20]
 8017710:	901b      	str	r0, [sp, #108]	; 0x6c
 8017712:	e7bf      	b.n	8017694 <_strtod_l+0x144>
 8017714:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017716:	191a      	adds	r2, r3, r4
 8017718:	921b      	str	r2, [sp, #108]	; 0x6c
 801771a:	9a05      	ldr	r2, [sp, #20]
 801771c:	5d1b      	ldrb	r3, [r3, r4]
 801771e:	2a00      	cmp	r2, #0
 8017720:	d037      	beq.n	8017792 <_strtod_l+0x242>
 8017722:	9c05      	ldr	r4, [sp, #20]
 8017724:	4602      	mov	r2, r0
 8017726:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801772a:	2909      	cmp	r1, #9
 801772c:	d913      	bls.n	8017756 <_strtod_l+0x206>
 801772e:	2101      	movs	r1, #1
 8017730:	9104      	str	r1, [sp, #16]
 8017732:	e7c2      	b.n	80176ba <_strtod_l+0x16a>
 8017734:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017736:	1c5a      	adds	r2, r3, #1
 8017738:	921b      	str	r2, [sp, #108]	; 0x6c
 801773a:	785b      	ldrb	r3, [r3, #1]
 801773c:	3001      	adds	r0, #1
 801773e:	2b30      	cmp	r3, #48	; 0x30
 8017740:	d0f8      	beq.n	8017734 <_strtod_l+0x1e4>
 8017742:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8017746:	2a08      	cmp	r2, #8
 8017748:	f200 84e4 	bhi.w	8018114 <_strtod_l+0xbc4>
 801774c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801774e:	9208      	str	r2, [sp, #32]
 8017750:	4602      	mov	r2, r0
 8017752:	2000      	movs	r0, #0
 8017754:	4604      	mov	r4, r0
 8017756:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801775a:	f100 0101 	add.w	r1, r0, #1
 801775e:	d012      	beq.n	8017786 <_strtod_l+0x236>
 8017760:	440a      	add	r2, r1
 8017762:	eb00 0c04 	add.w	ip, r0, r4
 8017766:	4621      	mov	r1, r4
 8017768:	270a      	movs	r7, #10
 801776a:	458c      	cmp	ip, r1
 801776c:	d113      	bne.n	8017796 <_strtod_l+0x246>
 801776e:	1821      	adds	r1, r4, r0
 8017770:	2908      	cmp	r1, #8
 8017772:	f104 0401 	add.w	r4, r4, #1
 8017776:	4404      	add	r4, r0
 8017778:	dc19      	bgt.n	80177ae <_strtod_l+0x25e>
 801777a:	9b07      	ldr	r3, [sp, #28]
 801777c:	210a      	movs	r1, #10
 801777e:	fb01 e303 	mla	r3, r1, r3, lr
 8017782:	9307      	str	r3, [sp, #28]
 8017784:	2100      	movs	r1, #0
 8017786:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017788:	1c58      	adds	r0, r3, #1
 801778a:	901b      	str	r0, [sp, #108]	; 0x6c
 801778c:	785b      	ldrb	r3, [r3, #1]
 801778e:	4608      	mov	r0, r1
 8017790:	e7c9      	b.n	8017726 <_strtod_l+0x1d6>
 8017792:	9805      	ldr	r0, [sp, #20]
 8017794:	e7d3      	b.n	801773e <_strtod_l+0x1ee>
 8017796:	2908      	cmp	r1, #8
 8017798:	f101 0101 	add.w	r1, r1, #1
 801779c:	dc03      	bgt.n	80177a6 <_strtod_l+0x256>
 801779e:	9b07      	ldr	r3, [sp, #28]
 80177a0:	437b      	muls	r3, r7
 80177a2:	9307      	str	r3, [sp, #28]
 80177a4:	e7e1      	b.n	801776a <_strtod_l+0x21a>
 80177a6:	2910      	cmp	r1, #16
 80177a8:	bfd8      	it	le
 80177aa:	437d      	mulle	r5, r7
 80177ac:	e7dd      	b.n	801776a <_strtod_l+0x21a>
 80177ae:	2c10      	cmp	r4, #16
 80177b0:	bfdc      	itt	le
 80177b2:	210a      	movle	r1, #10
 80177b4:	fb01 e505 	mlale	r5, r1, r5, lr
 80177b8:	e7e4      	b.n	8017784 <_strtod_l+0x234>
 80177ba:	2301      	movs	r3, #1
 80177bc:	9304      	str	r3, [sp, #16]
 80177be:	e781      	b.n	80176c4 <_strtod_l+0x174>
 80177c0:	f04f 0c01 	mov.w	ip, #1
 80177c4:	1cb3      	adds	r3, r6, #2
 80177c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80177c8:	78b3      	ldrb	r3, [r6, #2]
 80177ca:	e78a      	b.n	80176e2 <_strtod_l+0x192>
 80177cc:	f04f 0c00 	mov.w	ip, #0
 80177d0:	e7f8      	b.n	80177c4 <_strtod_l+0x274>
 80177d2:	bf00      	nop
 80177d4:	0801b8cc 	.word	0x0801b8cc
 80177d8:	7ff00000 	.word	0x7ff00000
 80177dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80177de:	1c5f      	adds	r7, r3, #1
 80177e0:	971b      	str	r7, [sp, #108]	; 0x6c
 80177e2:	785b      	ldrb	r3, [r3, #1]
 80177e4:	2b30      	cmp	r3, #48	; 0x30
 80177e6:	d0f9      	beq.n	80177dc <_strtod_l+0x28c>
 80177e8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80177ec:	2f08      	cmp	r7, #8
 80177ee:	f63f af7d 	bhi.w	80176ec <_strtod_l+0x19c>
 80177f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80177f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80177f8:	930a      	str	r3, [sp, #40]	; 0x28
 80177fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80177fc:	1c5f      	adds	r7, r3, #1
 80177fe:	971b      	str	r7, [sp, #108]	; 0x6c
 8017800:	785b      	ldrb	r3, [r3, #1]
 8017802:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8017806:	f1b8 0f09 	cmp.w	r8, #9
 801780a:	d937      	bls.n	801787c <_strtod_l+0x32c>
 801780c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801780e:	1a7f      	subs	r7, r7, r1
 8017810:	2f08      	cmp	r7, #8
 8017812:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8017816:	dc37      	bgt.n	8017888 <_strtod_l+0x338>
 8017818:	45be      	cmp	lr, r7
 801781a:	bfa8      	it	ge
 801781c:	46be      	movge	lr, r7
 801781e:	f1bc 0f00 	cmp.w	ip, #0
 8017822:	d001      	beq.n	8017828 <_strtod_l+0x2d8>
 8017824:	f1ce 0e00 	rsb	lr, lr, #0
 8017828:	2c00      	cmp	r4, #0
 801782a:	d151      	bne.n	80178d0 <_strtod_l+0x380>
 801782c:	2800      	cmp	r0, #0
 801782e:	f47f aece 	bne.w	80175ce <_strtod_l+0x7e>
 8017832:	9a06      	ldr	r2, [sp, #24]
 8017834:	2a00      	cmp	r2, #0
 8017836:	f47f aeca 	bne.w	80175ce <_strtod_l+0x7e>
 801783a:	9a04      	ldr	r2, [sp, #16]
 801783c:	2a00      	cmp	r2, #0
 801783e:	f47f aee4 	bne.w	801760a <_strtod_l+0xba>
 8017842:	2b4e      	cmp	r3, #78	; 0x4e
 8017844:	d027      	beq.n	8017896 <_strtod_l+0x346>
 8017846:	dc21      	bgt.n	801788c <_strtod_l+0x33c>
 8017848:	2b49      	cmp	r3, #73	; 0x49
 801784a:	f47f aede 	bne.w	801760a <_strtod_l+0xba>
 801784e:	49a0      	ldr	r1, [pc, #640]	; (8017ad0 <_strtod_l+0x580>)
 8017850:	a81b      	add	r0, sp, #108	; 0x6c
 8017852:	f002 f83f 	bl	80198d4 <__match>
 8017856:	2800      	cmp	r0, #0
 8017858:	f43f aed7 	beq.w	801760a <_strtod_l+0xba>
 801785c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801785e:	499d      	ldr	r1, [pc, #628]	; (8017ad4 <_strtod_l+0x584>)
 8017860:	3b01      	subs	r3, #1
 8017862:	a81b      	add	r0, sp, #108	; 0x6c
 8017864:	931b      	str	r3, [sp, #108]	; 0x6c
 8017866:	f002 f835 	bl	80198d4 <__match>
 801786a:	b910      	cbnz	r0, 8017872 <_strtod_l+0x322>
 801786c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801786e:	3301      	adds	r3, #1
 8017870:	931b      	str	r3, [sp, #108]	; 0x6c
 8017872:	f8df b274 	ldr.w	fp, [pc, #628]	; 8017ae8 <_strtod_l+0x598>
 8017876:	f04f 0a00 	mov.w	sl, #0
 801787a:	e6a8      	b.n	80175ce <_strtod_l+0x7e>
 801787c:	210a      	movs	r1, #10
 801787e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017882:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017886:	e7b8      	b.n	80177fa <_strtod_l+0x2aa>
 8017888:	46be      	mov	lr, r7
 801788a:	e7c8      	b.n	801781e <_strtod_l+0x2ce>
 801788c:	2b69      	cmp	r3, #105	; 0x69
 801788e:	d0de      	beq.n	801784e <_strtod_l+0x2fe>
 8017890:	2b6e      	cmp	r3, #110	; 0x6e
 8017892:	f47f aeba 	bne.w	801760a <_strtod_l+0xba>
 8017896:	4990      	ldr	r1, [pc, #576]	; (8017ad8 <_strtod_l+0x588>)
 8017898:	a81b      	add	r0, sp, #108	; 0x6c
 801789a:	f002 f81b 	bl	80198d4 <__match>
 801789e:	2800      	cmp	r0, #0
 80178a0:	f43f aeb3 	beq.w	801760a <_strtod_l+0xba>
 80178a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80178a6:	781b      	ldrb	r3, [r3, #0]
 80178a8:	2b28      	cmp	r3, #40	; 0x28
 80178aa:	d10e      	bne.n	80178ca <_strtod_l+0x37a>
 80178ac:	aa1e      	add	r2, sp, #120	; 0x78
 80178ae:	498b      	ldr	r1, [pc, #556]	; (8017adc <_strtod_l+0x58c>)
 80178b0:	a81b      	add	r0, sp, #108	; 0x6c
 80178b2:	f002 f823 	bl	80198fc <__hexnan>
 80178b6:	2805      	cmp	r0, #5
 80178b8:	d107      	bne.n	80178ca <_strtod_l+0x37a>
 80178ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80178bc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80178c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80178c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80178c8:	e681      	b.n	80175ce <_strtod_l+0x7e>
 80178ca:	f8df b224 	ldr.w	fp, [pc, #548]	; 8017af0 <_strtod_l+0x5a0>
 80178ce:	e7d2      	b.n	8017876 <_strtod_l+0x326>
 80178d0:	ebae 0302 	sub.w	r3, lr, r2
 80178d4:	9306      	str	r3, [sp, #24]
 80178d6:	9b05      	ldr	r3, [sp, #20]
 80178d8:	9807      	ldr	r0, [sp, #28]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	bf08      	it	eq
 80178de:	4623      	moveq	r3, r4
 80178e0:	2c10      	cmp	r4, #16
 80178e2:	9305      	str	r3, [sp, #20]
 80178e4:	46a0      	mov	r8, r4
 80178e6:	bfa8      	it	ge
 80178e8:	f04f 0810 	movge.w	r8, #16
 80178ec:	f7f0 fd42 	bl	8008374 <__aeabi_ui2d>
 80178f0:	2c09      	cmp	r4, #9
 80178f2:	4682      	mov	sl, r0
 80178f4:	468b      	mov	fp, r1
 80178f6:	dc13      	bgt.n	8017920 <_strtod_l+0x3d0>
 80178f8:	9b06      	ldr	r3, [sp, #24]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	f43f ae67 	beq.w	80175ce <_strtod_l+0x7e>
 8017900:	9b06      	ldr	r3, [sp, #24]
 8017902:	dd7a      	ble.n	80179fa <_strtod_l+0x4aa>
 8017904:	2b16      	cmp	r3, #22
 8017906:	dc61      	bgt.n	80179cc <_strtod_l+0x47c>
 8017908:	4a75      	ldr	r2, [pc, #468]	; (8017ae0 <_strtod_l+0x590>)
 801790a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801790e:	e9de 0100 	ldrd	r0, r1, [lr]
 8017912:	4652      	mov	r2, sl
 8017914:	465b      	mov	r3, fp
 8017916:	f7f0 fda7 	bl	8008468 <__aeabi_dmul>
 801791a:	4682      	mov	sl, r0
 801791c:	468b      	mov	fp, r1
 801791e:	e656      	b.n	80175ce <_strtod_l+0x7e>
 8017920:	4b6f      	ldr	r3, [pc, #444]	; (8017ae0 <_strtod_l+0x590>)
 8017922:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017926:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801792a:	f7f0 fd9d 	bl	8008468 <__aeabi_dmul>
 801792e:	4606      	mov	r6, r0
 8017930:	4628      	mov	r0, r5
 8017932:	460f      	mov	r7, r1
 8017934:	f7f0 fd1e 	bl	8008374 <__aeabi_ui2d>
 8017938:	4602      	mov	r2, r0
 801793a:	460b      	mov	r3, r1
 801793c:	4630      	mov	r0, r6
 801793e:	4639      	mov	r1, r7
 8017940:	f7f0 fbdc 	bl	80080fc <__adddf3>
 8017944:	2c0f      	cmp	r4, #15
 8017946:	4682      	mov	sl, r0
 8017948:	468b      	mov	fp, r1
 801794a:	ddd5      	ble.n	80178f8 <_strtod_l+0x3a8>
 801794c:	9b06      	ldr	r3, [sp, #24]
 801794e:	eba4 0808 	sub.w	r8, r4, r8
 8017952:	4498      	add	r8, r3
 8017954:	f1b8 0f00 	cmp.w	r8, #0
 8017958:	f340 8096 	ble.w	8017a88 <_strtod_l+0x538>
 801795c:	f018 030f 	ands.w	r3, r8, #15
 8017960:	d00a      	beq.n	8017978 <_strtod_l+0x428>
 8017962:	495f      	ldr	r1, [pc, #380]	; (8017ae0 <_strtod_l+0x590>)
 8017964:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017968:	4652      	mov	r2, sl
 801796a:	465b      	mov	r3, fp
 801796c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017970:	f7f0 fd7a 	bl	8008468 <__aeabi_dmul>
 8017974:	4682      	mov	sl, r0
 8017976:	468b      	mov	fp, r1
 8017978:	f038 080f 	bics.w	r8, r8, #15
 801797c:	d073      	beq.n	8017a66 <_strtod_l+0x516>
 801797e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017982:	dd47      	ble.n	8017a14 <_strtod_l+0x4c4>
 8017984:	2400      	movs	r4, #0
 8017986:	46a0      	mov	r8, r4
 8017988:	9407      	str	r4, [sp, #28]
 801798a:	9405      	str	r4, [sp, #20]
 801798c:	2322      	movs	r3, #34	; 0x22
 801798e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8017ae8 <_strtod_l+0x598>
 8017992:	f8c9 3000 	str.w	r3, [r9]
 8017996:	f04f 0a00 	mov.w	sl, #0
 801799a:	9b07      	ldr	r3, [sp, #28]
 801799c:	2b00      	cmp	r3, #0
 801799e:	f43f ae16 	beq.w	80175ce <_strtod_l+0x7e>
 80179a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80179a4:	4648      	mov	r0, r9
 80179a6:	f002 f90d 	bl	8019bc4 <_Bfree>
 80179aa:	9905      	ldr	r1, [sp, #20]
 80179ac:	4648      	mov	r0, r9
 80179ae:	f002 f909 	bl	8019bc4 <_Bfree>
 80179b2:	4641      	mov	r1, r8
 80179b4:	4648      	mov	r0, r9
 80179b6:	f002 f905 	bl	8019bc4 <_Bfree>
 80179ba:	9907      	ldr	r1, [sp, #28]
 80179bc:	4648      	mov	r0, r9
 80179be:	f002 f901 	bl	8019bc4 <_Bfree>
 80179c2:	4621      	mov	r1, r4
 80179c4:	4648      	mov	r0, r9
 80179c6:	f002 f8fd 	bl	8019bc4 <_Bfree>
 80179ca:	e600      	b.n	80175ce <_strtod_l+0x7e>
 80179cc:	9a06      	ldr	r2, [sp, #24]
 80179ce:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80179d2:	4293      	cmp	r3, r2
 80179d4:	dbba      	blt.n	801794c <_strtod_l+0x3fc>
 80179d6:	4d42      	ldr	r5, [pc, #264]	; (8017ae0 <_strtod_l+0x590>)
 80179d8:	f1c4 040f 	rsb	r4, r4, #15
 80179dc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80179e0:	4652      	mov	r2, sl
 80179e2:	465b      	mov	r3, fp
 80179e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80179e8:	f7f0 fd3e 	bl	8008468 <__aeabi_dmul>
 80179ec:	9b06      	ldr	r3, [sp, #24]
 80179ee:	1b1c      	subs	r4, r3, r4
 80179f0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80179f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80179f8:	e78d      	b.n	8017916 <_strtod_l+0x3c6>
 80179fa:	f113 0f16 	cmn.w	r3, #22
 80179fe:	dba5      	blt.n	801794c <_strtod_l+0x3fc>
 8017a00:	4a37      	ldr	r2, [pc, #220]	; (8017ae0 <_strtod_l+0x590>)
 8017a02:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8017a06:	e9d2 2300 	ldrd	r2, r3, [r2]
 8017a0a:	4650      	mov	r0, sl
 8017a0c:	4659      	mov	r1, fp
 8017a0e:	f7f0 fe55 	bl	80086bc <__aeabi_ddiv>
 8017a12:	e782      	b.n	801791a <_strtod_l+0x3ca>
 8017a14:	2300      	movs	r3, #0
 8017a16:	4e33      	ldr	r6, [pc, #204]	; (8017ae4 <_strtod_l+0x594>)
 8017a18:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017a1c:	4650      	mov	r0, sl
 8017a1e:	4659      	mov	r1, fp
 8017a20:	461d      	mov	r5, r3
 8017a22:	f1b8 0f01 	cmp.w	r8, #1
 8017a26:	dc21      	bgt.n	8017a6c <_strtod_l+0x51c>
 8017a28:	b10b      	cbz	r3, 8017a2e <_strtod_l+0x4de>
 8017a2a:	4682      	mov	sl, r0
 8017a2c:	468b      	mov	fp, r1
 8017a2e:	4b2d      	ldr	r3, [pc, #180]	; (8017ae4 <_strtod_l+0x594>)
 8017a30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017a34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017a38:	4652      	mov	r2, sl
 8017a3a:	465b      	mov	r3, fp
 8017a3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017a40:	f7f0 fd12 	bl	8008468 <__aeabi_dmul>
 8017a44:	4b28      	ldr	r3, [pc, #160]	; (8017ae8 <_strtod_l+0x598>)
 8017a46:	460a      	mov	r2, r1
 8017a48:	400b      	ands	r3, r1
 8017a4a:	4928      	ldr	r1, [pc, #160]	; (8017aec <_strtod_l+0x59c>)
 8017a4c:	428b      	cmp	r3, r1
 8017a4e:	4682      	mov	sl, r0
 8017a50:	d898      	bhi.n	8017984 <_strtod_l+0x434>
 8017a52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017a56:	428b      	cmp	r3, r1
 8017a58:	bf86      	itte	hi
 8017a5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8017af4 <_strtod_l+0x5a4>
 8017a5e:	f04f 3aff 	movhi.w	sl, #4294967295
 8017a62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017a66:	2300      	movs	r3, #0
 8017a68:	9304      	str	r3, [sp, #16]
 8017a6a:	e077      	b.n	8017b5c <_strtod_l+0x60c>
 8017a6c:	f018 0f01 	tst.w	r8, #1
 8017a70:	d006      	beq.n	8017a80 <_strtod_l+0x530>
 8017a72:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8017a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a7a:	f7f0 fcf5 	bl	8008468 <__aeabi_dmul>
 8017a7e:	2301      	movs	r3, #1
 8017a80:	3501      	adds	r5, #1
 8017a82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017a86:	e7cc      	b.n	8017a22 <_strtod_l+0x4d2>
 8017a88:	d0ed      	beq.n	8017a66 <_strtod_l+0x516>
 8017a8a:	f1c8 0800 	rsb	r8, r8, #0
 8017a8e:	f018 020f 	ands.w	r2, r8, #15
 8017a92:	d00a      	beq.n	8017aaa <_strtod_l+0x55a>
 8017a94:	4b12      	ldr	r3, [pc, #72]	; (8017ae0 <_strtod_l+0x590>)
 8017a96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017a9a:	4650      	mov	r0, sl
 8017a9c:	4659      	mov	r1, fp
 8017a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017aa2:	f7f0 fe0b 	bl	80086bc <__aeabi_ddiv>
 8017aa6:	4682      	mov	sl, r0
 8017aa8:	468b      	mov	fp, r1
 8017aaa:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017aae:	d0da      	beq.n	8017a66 <_strtod_l+0x516>
 8017ab0:	f1b8 0f1f 	cmp.w	r8, #31
 8017ab4:	dd20      	ble.n	8017af8 <_strtod_l+0x5a8>
 8017ab6:	2400      	movs	r4, #0
 8017ab8:	46a0      	mov	r8, r4
 8017aba:	9407      	str	r4, [sp, #28]
 8017abc:	9405      	str	r4, [sp, #20]
 8017abe:	2322      	movs	r3, #34	; 0x22
 8017ac0:	f04f 0a00 	mov.w	sl, #0
 8017ac4:	f04f 0b00 	mov.w	fp, #0
 8017ac8:	f8c9 3000 	str.w	r3, [r9]
 8017acc:	e765      	b.n	801799a <_strtod_l+0x44a>
 8017ace:	bf00      	nop
 8017ad0:	0801b899 	.word	0x0801b899
 8017ad4:	0801b923 	.word	0x0801b923
 8017ad8:	0801b8a1 	.word	0x0801b8a1
 8017adc:	0801b8e0 	.word	0x0801b8e0
 8017ae0:	0801b9c8 	.word	0x0801b9c8
 8017ae4:	0801b9a0 	.word	0x0801b9a0
 8017ae8:	7ff00000 	.word	0x7ff00000
 8017aec:	7ca00000 	.word	0x7ca00000
 8017af0:	fff80000 	.word	0xfff80000
 8017af4:	7fefffff 	.word	0x7fefffff
 8017af8:	f018 0310 	ands.w	r3, r8, #16
 8017afc:	bf18      	it	ne
 8017afe:	236a      	movne	r3, #106	; 0x6a
 8017b00:	4da0      	ldr	r5, [pc, #640]	; (8017d84 <_strtod_l+0x834>)
 8017b02:	9304      	str	r3, [sp, #16]
 8017b04:	4650      	mov	r0, sl
 8017b06:	4659      	mov	r1, fp
 8017b08:	2300      	movs	r3, #0
 8017b0a:	f1b8 0f00 	cmp.w	r8, #0
 8017b0e:	f300 810a 	bgt.w	8017d26 <_strtod_l+0x7d6>
 8017b12:	b10b      	cbz	r3, 8017b18 <_strtod_l+0x5c8>
 8017b14:	4682      	mov	sl, r0
 8017b16:	468b      	mov	fp, r1
 8017b18:	9b04      	ldr	r3, [sp, #16]
 8017b1a:	b1bb      	cbz	r3, 8017b4c <_strtod_l+0x5fc>
 8017b1c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017b20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	4659      	mov	r1, fp
 8017b28:	dd10      	ble.n	8017b4c <_strtod_l+0x5fc>
 8017b2a:	2b1f      	cmp	r3, #31
 8017b2c:	f340 8107 	ble.w	8017d3e <_strtod_l+0x7ee>
 8017b30:	2b34      	cmp	r3, #52	; 0x34
 8017b32:	bfde      	ittt	le
 8017b34:	3b20      	suble	r3, #32
 8017b36:	f04f 32ff 	movle.w	r2, #4294967295
 8017b3a:	fa02 f303 	lslle.w	r3, r2, r3
 8017b3e:	f04f 0a00 	mov.w	sl, #0
 8017b42:	bfcc      	ite	gt
 8017b44:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017b48:	ea03 0b01 	andle.w	fp, r3, r1
 8017b4c:	2200      	movs	r2, #0
 8017b4e:	2300      	movs	r3, #0
 8017b50:	4650      	mov	r0, sl
 8017b52:	4659      	mov	r1, fp
 8017b54:	f7f0 fef0 	bl	8008938 <__aeabi_dcmpeq>
 8017b58:	2800      	cmp	r0, #0
 8017b5a:	d1ac      	bne.n	8017ab6 <_strtod_l+0x566>
 8017b5c:	9b07      	ldr	r3, [sp, #28]
 8017b5e:	9300      	str	r3, [sp, #0]
 8017b60:	9a05      	ldr	r2, [sp, #20]
 8017b62:	9908      	ldr	r1, [sp, #32]
 8017b64:	4623      	mov	r3, r4
 8017b66:	4648      	mov	r0, r9
 8017b68:	f002 f87e 	bl	8019c68 <__s2b>
 8017b6c:	9007      	str	r0, [sp, #28]
 8017b6e:	2800      	cmp	r0, #0
 8017b70:	f43f af08 	beq.w	8017984 <_strtod_l+0x434>
 8017b74:	9a06      	ldr	r2, [sp, #24]
 8017b76:	9b06      	ldr	r3, [sp, #24]
 8017b78:	2a00      	cmp	r2, #0
 8017b7a:	f1c3 0300 	rsb	r3, r3, #0
 8017b7e:	bfa8      	it	ge
 8017b80:	2300      	movge	r3, #0
 8017b82:	930e      	str	r3, [sp, #56]	; 0x38
 8017b84:	2400      	movs	r4, #0
 8017b86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017b8a:	9316      	str	r3, [sp, #88]	; 0x58
 8017b8c:	46a0      	mov	r8, r4
 8017b8e:	9b07      	ldr	r3, [sp, #28]
 8017b90:	4648      	mov	r0, r9
 8017b92:	6859      	ldr	r1, [r3, #4]
 8017b94:	f001 ffe2 	bl	8019b5c <_Balloc>
 8017b98:	9005      	str	r0, [sp, #20]
 8017b9a:	2800      	cmp	r0, #0
 8017b9c:	f43f aef6 	beq.w	801798c <_strtod_l+0x43c>
 8017ba0:	9b07      	ldr	r3, [sp, #28]
 8017ba2:	691a      	ldr	r2, [r3, #16]
 8017ba4:	3202      	adds	r2, #2
 8017ba6:	f103 010c 	add.w	r1, r3, #12
 8017baa:	0092      	lsls	r2, r2, #2
 8017bac:	300c      	adds	r0, #12
 8017bae:	f7fe fcef 	bl	8016590 <memcpy>
 8017bb2:	aa1e      	add	r2, sp, #120	; 0x78
 8017bb4:	a91d      	add	r1, sp, #116	; 0x74
 8017bb6:	ec4b ab10 	vmov	d0, sl, fp
 8017bba:	4648      	mov	r0, r9
 8017bbc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017bc0:	f002 fb0e 	bl	801a1e0 <__d2b>
 8017bc4:	901c      	str	r0, [sp, #112]	; 0x70
 8017bc6:	2800      	cmp	r0, #0
 8017bc8:	f43f aee0 	beq.w	801798c <_strtod_l+0x43c>
 8017bcc:	2101      	movs	r1, #1
 8017bce:	4648      	mov	r0, r9
 8017bd0:	f002 f8d6 	bl	8019d80 <__i2b>
 8017bd4:	4680      	mov	r8, r0
 8017bd6:	2800      	cmp	r0, #0
 8017bd8:	f43f aed8 	beq.w	801798c <_strtod_l+0x43c>
 8017bdc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017bde:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017be0:	2e00      	cmp	r6, #0
 8017be2:	bfab      	itete	ge
 8017be4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8017be6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017be8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8017bea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8017bec:	bfac      	ite	ge
 8017bee:	18f7      	addge	r7, r6, r3
 8017bf0:	1b9d      	sublt	r5, r3, r6
 8017bf2:	9b04      	ldr	r3, [sp, #16]
 8017bf4:	1af6      	subs	r6, r6, r3
 8017bf6:	4416      	add	r6, r2
 8017bf8:	4b63      	ldr	r3, [pc, #396]	; (8017d88 <_strtod_l+0x838>)
 8017bfa:	3e01      	subs	r6, #1
 8017bfc:	429e      	cmp	r6, r3
 8017bfe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017c02:	f280 80af 	bge.w	8017d64 <_strtod_l+0x814>
 8017c06:	1b9b      	subs	r3, r3, r6
 8017c08:	2b1f      	cmp	r3, #31
 8017c0a:	eba2 0203 	sub.w	r2, r2, r3
 8017c0e:	f04f 0101 	mov.w	r1, #1
 8017c12:	f300 809b 	bgt.w	8017d4c <_strtod_l+0x7fc>
 8017c16:	fa01 f303 	lsl.w	r3, r1, r3
 8017c1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8017c20:	18be      	adds	r6, r7, r2
 8017c22:	9b04      	ldr	r3, [sp, #16]
 8017c24:	42b7      	cmp	r7, r6
 8017c26:	4415      	add	r5, r2
 8017c28:	441d      	add	r5, r3
 8017c2a:	463b      	mov	r3, r7
 8017c2c:	bfa8      	it	ge
 8017c2e:	4633      	movge	r3, r6
 8017c30:	42ab      	cmp	r3, r5
 8017c32:	bfa8      	it	ge
 8017c34:	462b      	movge	r3, r5
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	bfc2      	ittt	gt
 8017c3a:	1af6      	subgt	r6, r6, r3
 8017c3c:	1aed      	subgt	r5, r5, r3
 8017c3e:	1aff      	subgt	r7, r7, r3
 8017c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c42:	b1bb      	cbz	r3, 8017c74 <_strtod_l+0x724>
 8017c44:	4641      	mov	r1, r8
 8017c46:	461a      	mov	r2, r3
 8017c48:	4648      	mov	r0, r9
 8017c4a:	f002 f939 	bl	8019ec0 <__pow5mult>
 8017c4e:	4680      	mov	r8, r0
 8017c50:	2800      	cmp	r0, #0
 8017c52:	f43f ae9b 	beq.w	801798c <_strtod_l+0x43c>
 8017c56:	4601      	mov	r1, r0
 8017c58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017c5a:	4648      	mov	r0, r9
 8017c5c:	f002 f899 	bl	8019d92 <__multiply>
 8017c60:	900c      	str	r0, [sp, #48]	; 0x30
 8017c62:	2800      	cmp	r0, #0
 8017c64:	f43f ae92 	beq.w	801798c <_strtod_l+0x43c>
 8017c68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017c6a:	4648      	mov	r0, r9
 8017c6c:	f001 ffaa 	bl	8019bc4 <_Bfree>
 8017c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c72:	931c      	str	r3, [sp, #112]	; 0x70
 8017c74:	2e00      	cmp	r6, #0
 8017c76:	dc7a      	bgt.n	8017d6e <_strtod_l+0x81e>
 8017c78:	9b06      	ldr	r3, [sp, #24]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	dd08      	ble.n	8017c90 <_strtod_l+0x740>
 8017c7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017c80:	9905      	ldr	r1, [sp, #20]
 8017c82:	4648      	mov	r0, r9
 8017c84:	f002 f91c 	bl	8019ec0 <__pow5mult>
 8017c88:	9005      	str	r0, [sp, #20]
 8017c8a:	2800      	cmp	r0, #0
 8017c8c:	f43f ae7e 	beq.w	801798c <_strtod_l+0x43c>
 8017c90:	2d00      	cmp	r5, #0
 8017c92:	dd08      	ble.n	8017ca6 <_strtod_l+0x756>
 8017c94:	462a      	mov	r2, r5
 8017c96:	9905      	ldr	r1, [sp, #20]
 8017c98:	4648      	mov	r0, r9
 8017c9a:	f002 f95f 	bl	8019f5c <__lshift>
 8017c9e:	9005      	str	r0, [sp, #20]
 8017ca0:	2800      	cmp	r0, #0
 8017ca2:	f43f ae73 	beq.w	801798c <_strtod_l+0x43c>
 8017ca6:	2f00      	cmp	r7, #0
 8017ca8:	dd08      	ble.n	8017cbc <_strtod_l+0x76c>
 8017caa:	4641      	mov	r1, r8
 8017cac:	463a      	mov	r2, r7
 8017cae:	4648      	mov	r0, r9
 8017cb0:	f002 f954 	bl	8019f5c <__lshift>
 8017cb4:	4680      	mov	r8, r0
 8017cb6:	2800      	cmp	r0, #0
 8017cb8:	f43f ae68 	beq.w	801798c <_strtod_l+0x43c>
 8017cbc:	9a05      	ldr	r2, [sp, #20]
 8017cbe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017cc0:	4648      	mov	r0, r9
 8017cc2:	f002 f9b9 	bl	801a038 <__mdiff>
 8017cc6:	4604      	mov	r4, r0
 8017cc8:	2800      	cmp	r0, #0
 8017cca:	f43f ae5f 	beq.w	801798c <_strtod_l+0x43c>
 8017cce:	68c3      	ldr	r3, [r0, #12]
 8017cd0:	930c      	str	r3, [sp, #48]	; 0x30
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	60c3      	str	r3, [r0, #12]
 8017cd6:	4641      	mov	r1, r8
 8017cd8:	f002 f994 	bl	801a004 <__mcmp>
 8017cdc:	2800      	cmp	r0, #0
 8017cde:	da55      	bge.n	8017d8c <_strtod_l+0x83c>
 8017ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ce2:	b9e3      	cbnz	r3, 8017d1e <_strtod_l+0x7ce>
 8017ce4:	f1ba 0f00 	cmp.w	sl, #0
 8017ce8:	d119      	bne.n	8017d1e <_strtod_l+0x7ce>
 8017cea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017cee:	b9b3      	cbnz	r3, 8017d1e <_strtod_l+0x7ce>
 8017cf0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017cf4:	0d1b      	lsrs	r3, r3, #20
 8017cf6:	051b      	lsls	r3, r3, #20
 8017cf8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017cfc:	d90f      	bls.n	8017d1e <_strtod_l+0x7ce>
 8017cfe:	6963      	ldr	r3, [r4, #20]
 8017d00:	b913      	cbnz	r3, 8017d08 <_strtod_l+0x7b8>
 8017d02:	6923      	ldr	r3, [r4, #16]
 8017d04:	2b01      	cmp	r3, #1
 8017d06:	dd0a      	ble.n	8017d1e <_strtod_l+0x7ce>
 8017d08:	4621      	mov	r1, r4
 8017d0a:	2201      	movs	r2, #1
 8017d0c:	4648      	mov	r0, r9
 8017d0e:	f002 f925 	bl	8019f5c <__lshift>
 8017d12:	4641      	mov	r1, r8
 8017d14:	4604      	mov	r4, r0
 8017d16:	f002 f975 	bl	801a004 <__mcmp>
 8017d1a:	2800      	cmp	r0, #0
 8017d1c:	dc67      	bgt.n	8017dee <_strtod_l+0x89e>
 8017d1e:	9b04      	ldr	r3, [sp, #16]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d171      	bne.n	8017e08 <_strtod_l+0x8b8>
 8017d24:	e63d      	b.n	80179a2 <_strtod_l+0x452>
 8017d26:	f018 0f01 	tst.w	r8, #1
 8017d2a:	d004      	beq.n	8017d36 <_strtod_l+0x7e6>
 8017d2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017d30:	f7f0 fb9a 	bl	8008468 <__aeabi_dmul>
 8017d34:	2301      	movs	r3, #1
 8017d36:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017d3a:	3508      	adds	r5, #8
 8017d3c:	e6e5      	b.n	8017b0a <_strtod_l+0x5ba>
 8017d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8017d42:	fa02 f303 	lsl.w	r3, r2, r3
 8017d46:	ea03 0a0a 	and.w	sl, r3, sl
 8017d4a:	e6ff      	b.n	8017b4c <_strtod_l+0x5fc>
 8017d4c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017d50:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8017d54:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017d58:	36e2      	adds	r6, #226	; 0xe2
 8017d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8017d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8017d60:	910f      	str	r1, [sp, #60]	; 0x3c
 8017d62:	e75d      	b.n	8017c20 <_strtod_l+0x6d0>
 8017d64:	2300      	movs	r3, #0
 8017d66:	930a      	str	r3, [sp, #40]	; 0x28
 8017d68:	2301      	movs	r3, #1
 8017d6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8017d6c:	e758      	b.n	8017c20 <_strtod_l+0x6d0>
 8017d6e:	4632      	mov	r2, r6
 8017d70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017d72:	4648      	mov	r0, r9
 8017d74:	f002 f8f2 	bl	8019f5c <__lshift>
 8017d78:	901c      	str	r0, [sp, #112]	; 0x70
 8017d7a:	2800      	cmp	r0, #0
 8017d7c:	f47f af7c 	bne.w	8017c78 <_strtod_l+0x728>
 8017d80:	e604      	b.n	801798c <_strtod_l+0x43c>
 8017d82:	bf00      	nop
 8017d84:	0801b8f8 	.word	0x0801b8f8
 8017d88:	fffffc02 	.word	0xfffffc02
 8017d8c:	465d      	mov	r5, fp
 8017d8e:	f040 8086 	bne.w	8017e9e <_strtod_l+0x94e>
 8017d92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017d94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017d98:	b32a      	cbz	r2, 8017de6 <_strtod_l+0x896>
 8017d9a:	4aaf      	ldr	r2, [pc, #700]	; (8018058 <_strtod_l+0xb08>)
 8017d9c:	4293      	cmp	r3, r2
 8017d9e:	d153      	bne.n	8017e48 <_strtod_l+0x8f8>
 8017da0:	9b04      	ldr	r3, [sp, #16]
 8017da2:	4650      	mov	r0, sl
 8017da4:	b1d3      	cbz	r3, 8017ddc <_strtod_l+0x88c>
 8017da6:	4aad      	ldr	r2, [pc, #692]	; (801805c <_strtod_l+0xb0c>)
 8017da8:	402a      	ands	r2, r5
 8017daa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017dae:	f04f 31ff 	mov.w	r1, #4294967295
 8017db2:	d816      	bhi.n	8017de2 <_strtod_l+0x892>
 8017db4:	0d12      	lsrs	r2, r2, #20
 8017db6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017dba:	fa01 f303 	lsl.w	r3, r1, r3
 8017dbe:	4298      	cmp	r0, r3
 8017dc0:	d142      	bne.n	8017e48 <_strtod_l+0x8f8>
 8017dc2:	4ba7      	ldr	r3, [pc, #668]	; (8018060 <_strtod_l+0xb10>)
 8017dc4:	429d      	cmp	r5, r3
 8017dc6:	d102      	bne.n	8017dce <_strtod_l+0x87e>
 8017dc8:	3001      	adds	r0, #1
 8017dca:	f43f addf 	beq.w	801798c <_strtod_l+0x43c>
 8017dce:	4ba3      	ldr	r3, [pc, #652]	; (801805c <_strtod_l+0xb0c>)
 8017dd0:	402b      	ands	r3, r5
 8017dd2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017dd6:	f04f 0a00 	mov.w	sl, #0
 8017dda:	e7a0      	b.n	8017d1e <_strtod_l+0x7ce>
 8017ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8017de0:	e7ed      	b.n	8017dbe <_strtod_l+0x86e>
 8017de2:	460b      	mov	r3, r1
 8017de4:	e7eb      	b.n	8017dbe <_strtod_l+0x86e>
 8017de6:	bb7b      	cbnz	r3, 8017e48 <_strtod_l+0x8f8>
 8017de8:	f1ba 0f00 	cmp.w	sl, #0
 8017dec:	d12c      	bne.n	8017e48 <_strtod_l+0x8f8>
 8017dee:	9904      	ldr	r1, [sp, #16]
 8017df0:	4a9a      	ldr	r2, [pc, #616]	; (801805c <_strtod_l+0xb0c>)
 8017df2:	465b      	mov	r3, fp
 8017df4:	b1f1      	cbz	r1, 8017e34 <_strtod_l+0x8e4>
 8017df6:	ea02 010b 	and.w	r1, r2, fp
 8017dfa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017dfe:	dc19      	bgt.n	8017e34 <_strtod_l+0x8e4>
 8017e00:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017e04:	f77f ae5b 	ble.w	8017abe <_strtod_l+0x56e>
 8017e08:	4a96      	ldr	r2, [pc, #600]	; (8018064 <_strtod_l+0xb14>)
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017e10:	4650      	mov	r0, sl
 8017e12:	4659      	mov	r1, fp
 8017e14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017e18:	f7f0 fb26 	bl	8008468 <__aeabi_dmul>
 8017e1c:	4682      	mov	sl, r0
 8017e1e:	468b      	mov	fp, r1
 8017e20:	2900      	cmp	r1, #0
 8017e22:	f47f adbe 	bne.w	80179a2 <_strtod_l+0x452>
 8017e26:	2800      	cmp	r0, #0
 8017e28:	f47f adbb 	bne.w	80179a2 <_strtod_l+0x452>
 8017e2c:	2322      	movs	r3, #34	; 0x22
 8017e2e:	f8c9 3000 	str.w	r3, [r9]
 8017e32:	e5b6      	b.n	80179a2 <_strtod_l+0x452>
 8017e34:	4013      	ands	r3, r2
 8017e36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017e3a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017e3e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017e42:	f04f 3aff 	mov.w	sl, #4294967295
 8017e46:	e76a      	b.n	8017d1e <_strtod_l+0x7ce>
 8017e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e4a:	b193      	cbz	r3, 8017e72 <_strtod_l+0x922>
 8017e4c:	422b      	tst	r3, r5
 8017e4e:	f43f af66 	beq.w	8017d1e <_strtod_l+0x7ce>
 8017e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e54:	9a04      	ldr	r2, [sp, #16]
 8017e56:	4650      	mov	r0, sl
 8017e58:	4659      	mov	r1, fp
 8017e5a:	b173      	cbz	r3, 8017e7a <_strtod_l+0x92a>
 8017e5c:	f7ff fb5a 	bl	8017514 <sulp>
 8017e60:	4602      	mov	r2, r0
 8017e62:	460b      	mov	r3, r1
 8017e64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017e68:	f7f0 f948 	bl	80080fc <__adddf3>
 8017e6c:	4682      	mov	sl, r0
 8017e6e:	468b      	mov	fp, r1
 8017e70:	e755      	b.n	8017d1e <_strtod_l+0x7ce>
 8017e72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e74:	ea13 0f0a 	tst.w	r3, sl
 8017e78:	e7e9      	b.n	8017e4e <_strtod_l+0x8fe>
 8017e7a:	f7ff fb4b 	bl	8017514 <sulp>
 8017e7e:	4602      	mov	r2, r0
 8017e80:	460b      	mov	r3, r1
 8017e82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017e86:	f7f0 f937 	bl	80080f8 <__aeabi_dsub>
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	4682      	mov	sl, r0
 8017e90:	468b      	mov	fp, r1
 8017e92:	f7f0 fd51 	bl	8008938 <__aeabi_dcmpeq>
 8017e96:	2800      	cmp	r0, #0
 8017e98:	f47f ae11 	bne.w	8017abe <_strtod_l+0x56e>
 8017e9c:	e73f      	b.n	8017d1e <_strtod_l+0x7ce>
 8017e9e:	4641      	mov	r1, r8
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	f002 f9ec 	bl	801a27e <__ratio>
 8017ea6:	ec57 6b10 	vmov	r6, r7, d0
 8017eaa:	2200      	movs	r2, #0
 8017eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017eb0:	ee10 0a10 	vmov	r0, s0
 8017eb4:	4639      	mov	r1, r7
 8017eb6:	f7f0 fd53 	bl	8008960 <__aeabi_dcmple>
 8017eba:	2800      	cmp	r0, #0
 8017ebc:	d077      	beq.n	8017fae <_strtod_l+0xa5e>
 8017ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d04a      	beq.n	8017f5a <_strtod_l+0xa0a>
 8017ec4:	4b68      	ldr	r3, [pc, #416]	; (8018068 <_strtod_l+0xb18>)
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017ecc:	4f66      	ldr	r7, [pc, #408]	; (8018068 <_strtod_l+0xb18>)
 8017ece:	2600      	movs	r6, #0
 8017ed0:	4b62      	ldr	r3, [pc, #392]	; (801805c <_strtod_l+0xb0c>)
 8017ed2:	402b      	ands	r3, r5
 8017ed4:	930f      	str	r3, [sp, #60]	; 0x3c
 8017ed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017ed8:	4b64      	ldr	r3, [pc, #400]	; (801806c <_strtod_l+0xb1c>)
 8017eda:	429a      	cmp	r2, r3
 8017edc:	f040 80ce 	bne.w	801807c <_strtod_l+0xb2c>
 8017ee0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017ee4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017ee8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8017eec:	ec4b ab10 	vmov	d0, sl, fp
 8017ef0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017ef4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017ef8:	f002 f8fc 	bl	801a0f4 <__ulp>
 8017efc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017f00:	ec53 2b10 	vmov	r2, r3, d0
 8017f04:	f7f0 fab0 	bl	8008468 <__aeabi_dmul>
 8017f08:	4652      	mov	r2, sl
 8017f0a:	465b      	mov	r3, fp
 8017f0c:	f7f0 f8f6 	bl	80080fc <__adddf3>
 8017f10:	460b      	mov	r3, r1
 8017f12:	4952      	ldr	r1, [pc, #328]	; (801805c <_strtod_l+0xb0c>)
 8017f14:	4a56      	ldr	r2, [pc, #344]	; (8018070 <_strtod_l+0xb20>)
 8017f16:	4019      	ands	r1, r3
 8017f18:	4291      	cmp	r1, r2
 8017f1a:	4682      	mov	sl, r0
 8017f1c:	d95b      	bls.n	8017fd6 <_strtod_l+0xa86>
 8017f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f20:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017f24:	4293      	cmp	r3, r2
 8017f26:	d103      	bne.n	8017f30 <_strtod_l+0x9e0>
 8017f28:	9b08      	ldr	r3, [sp, #32]
 8017f2a:	3301      	adds	r3, #1
 8017f2c:	f43f ad2e 	beq.w	801798c <_strtod_l+0x43c>
 8017f30:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8018060 <_strtod_l+0xb10>
 8017f34:	f04f 3aff 	mov.w	sl, #4294967295
 8017f38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017f3a:	4648      	mov	r0, r9
 8017f3c:	f001 fe42 	bl	8019bc4 <_Bfree>
 8017f40:	9905      	ldr	r1, [sp, #20]
 8017f42:	4648      	mov	r0, r9
 8017f44:	f001 fe3e 	bl	8019bc4 <_Bfree>
 8017f48:	4641      	mov	r1, r8
 8017f4a:	4648      	mov	r0, r9
 8017f4c:	f001 fe3a 	bl	8019bc4 <_Bfree>
 8017f50:	4621      	mov	r1, r4
 8017f52:	4648      	mov	r0, r9
 8017f54:	f001 fe36 	bl	8019bc4 <_Bfree>
 8017f58:	e619      	b.n	8017b8e <_strtod_l+0x63e>
 8017f5a:	f1ba 0f00 	cmp.w	sl, #0
 8017f5e:	d11a      	bne.n	8017f96 <_strtod_l+0xa46>
 8017f60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017f64:	b9eb      	cbnz	r3, 8017fa2 <_strtod_l+0xa52>
 8017f66:	2200      	movs	r2, #0
 8017f68:	4b3f      	ldr	r3, [pc, #252]	; (8018068 <_strtod_l+0xb18>)
 8017f6a:	4630      	mov	r0, r6
 8017f6c:	4639      	mov	r1, r7
 8017f6e:	f7f0 fced 	bl	800894c <__aeabi_dcmplt>
 8017f72:	b9c8      	cbnz	r0, 8017fa8 <_strtod_l+0xa58>
 8017f74:	4630      	mov	r0, r6
 8017f76:	4639      	mov	r1, r7
 8017f78:	2200      	movs	r2, #0
 8017f7a:	4b3e      	ldr	r3, [pc, #248]	; (8018074 <_strtod_l+0xb24>)
 8017f7c:	f7f0 fa74 	bl	8008468 <__aeabi_dmul>
 8017f80:	4606      	mov	r6, r0
 8017f82:	460f      	mov	r7, r1
 8017f84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017f88:	9618      	str	r6, [sp, #96]	; 0x60
 8017f8a:	9319      	str	r3, [sp, #100]	; 0x64
 8017f8c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017f90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017f94:	e79c      	b.n	8017ed0 <_strtod_l+0x980>
 8017f96:	f1ba 0f01 	cmp.w	sl, #1
 8017f9a:	d102      	bne.n	8017fa2 <_strtod_l+0xa52>
 8017f9c:	2d00      	cmp	r5, #0
 8017f9e:	f43f ad8e 	beq.w	8017abe <_strtod_l+0x56e>
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	4b34      	ldr	r3, [pc, #208]	; (8018078 <_strtod_l+0xb28>)
 8017fa6:	e78f      	b.n	8017ec8 <_strtod_l+0x978>
 8017fa8:	2600      	movs	r6, #0
 8017faa:	4f32      	ldr	r7, [pc, #200]	; (8018074 <_strtod_l+0xb24>)
 8017fac:	e7ea      	b.n	8017f84 <_strtod_l+0xa34>
 8017fae:	4b31      	ldr	r3, [pc, #196]	; (8018074 <_strtod_l+0xb24>)
 8017fb0:	4630      	mov	r0, r6
 8017fb2:	4639      	mov	r1, r7
 8017fb4:	2200      	movs	r2, #0
 8017fb6:	f7f0 fa57 	bl	8008468 <__aeabi_dmul>
 8017fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017fbc:	4606      	mov	r6, r0
 8017fbe:	460f      	mov	r7, r1
 8017fc0:	b933      	cbnz	r3, 8017fd0 <_strtod_l+0xa80>
 8017fc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017fc6:	9010      	str	r0, [sp, #64]	; 0x40
 8017fc8:	9311      	str	r3, [sp, #68]	; 0x44
 8017fca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017fce:	e7df      	b.n	8017f90 <_strtod_l+0xa40>
 8017fd0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017fd4:	e7f9      	b.n	8017fca <_strtod_l+0xa7a>
 8017fd6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017fda:	9b04      	ldr	r3, [sp, #16]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d1ab      	bne.n	8017f38 <_strtod_l+0x9e8>
 8017fe0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017fe4:	0d1b      	lsrs	r3, r3, #20
 8017fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017fe8:	051b      	lsls	r3, r3, #20
 8017fea:	429a      	cmp	r2, r3
 8017fec:	465d      	mov	r5, fp
 8017fee:	d1a3      	bne.n	8017f38 <_strtod_l+0x9e8>
 8017ff0:	4639      	mov	r1, r7
 8017ff2:	4630      	mov	r0, r6
 8017ff4:	f7f0 fce8 	bl	80089c8 <__aeabi_d2iz>
 8017ff8:	f7f0 f9cc 	bl	8008394 <__aeabi_i2d>
 8017ffc:	460b      	mov	r3, r1
 8017ffe:	4602      	mov	r2, r0
 8018000:	4639      	mov	r1, r7
 8018002:	4630      	mov	r0, r6
 8018004:	f7f0 f878 	bl	80080f8 <__aeabi_dsub>
 8018008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801800a:	4606      	mov	r6, r0
 801800c:	460f      	mov	r7, r1
 801800e:	b933      	cbnz	r3, 801801e <_strtod_l+0xace>
 8018010:	f1ba 0f00 	cmp.w	sl, #0
 8018014:	d103      	bne.n	801801e <_strtod_l+0xace>
 8018016:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801801a:	2d00      	cmp	r5, #0
 801801c:	d06d      	beq.n	80180fa <_strtod_l+0xbaa>
 801801e:	a30a      	add	r3, pc, #40	; (adr r3, 8018048 <_strtod_l+0xaf8>)
 8018020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018024:	4630      	mov	r0, r6
 8018026:	4639      	mov	r1, r7
 8018028:	f7f0 fc90 	bl	800894c <__aeabi_dcmplt>
 801802c:	2800      	cmp	r0, #0
 801802e:	f47f acb8 	bne.w	80179a2 <_strtod_l+0x452>
 8018032:	a307      	add	r3, pc, #28	; (adr r3, 8018050 <_strtod_l+0xb00>)
 8018034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018038:	4630      	mov	r0, r6
 801803a:	4639      	mov	r1, r7
 801803c:	f7f0 fca4 	bl	8008988 <__aeabi_dcmpgt>
 8018040:	2800      	cmp	r0, #0
 8018042:	f43f af79 	beq.w	8017f38 <_strtod_l+0x9e8>
 8018046:	e4ac      	b.n	80179a2 <_strtod_l+0x452>
 8018048:	94a03595 	.word	0x94a03595
 801804c:	3fdfffff 	.word	0x3fdfffff
 8018050:	35afe535 	.word	0x35afe535
 8018054:	3fe00000 	.word	0x3fe00000
 8018058:	000fffff 	.word	0x000fffff
 801805c:	7ff00000 	.word	0x7ff00000
 8018060:	7fefffff 	.word	0x7fefffff
 8018064:	39500000 	.word	0x39500000
 8018068:	3ff00000 	.word	0x3ff00000
 801806c:	7fe00000 	.word	0x7fe00000
 8018070:	7c9fffff 	.word	0x7c9fffff
 8018074:	3fe00000 	.word	0x3fe00000
 8018078:	bff00000 	.word	0xbff00000
 801807c:	9b04      	ldr	r3, [sp, #16]
 801807e:	b333      	cbz	r3, 80180ce <_strtod_l+0xb7e>
 8018080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018082:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018086:	d822      	bhi.n	80180ce <_strtod_l+0xb7e>
 8018088:	a327      	add	r3, pc, #156	; (adr r3, 8018128 <_strtod_l+0xbd8>)
 801808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801808e:	4630      	mov	r0, r6
 8018090:	4639      	mov	r1, r7
 8018092:	f7f0 fc65 	bl	8008960 <__aeabi_dcmple>
 8018096:	b1a0      	cbz	r0, 80180c2 <_strtod_l+0xb72>
 8018098:	4639      	mov	r1, r7
 801809a:	4630      	mov	r0, r6
 801809c:	f7f0 fcbc 	bl	8008a18 <__aeabi_d2uiz>
 80180a0:	2800      	cmp	r0, #0
 80180a2:	bf08      	it	eq
 80180a4:	2001      	moveq	r0, #1
 80180a6:	f7f0 f965 	bl	8008374 <__aeabi_ui2d>
 80180aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80180ac:	4606      	mov	r6, r0
 80180ae:	460f      	mov	r7, r1
 80180b0:	bb03      	cbnz	r3, 80180f4 <_strtod_l+0xba4>
 80180b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80180b6:	9012      	str	r0, [sp, #72]	; 0x48
 80180b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80180ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80180be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80180c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80180c6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80180ca:	1a9b      	subs	r3, r3, r2
 80180cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80180ce:	ed9d 0b08 	vldr	d0, [sp, #32]
 80180d2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80180d6:	f002 f80d 	bl	801a0f4 <__ulp>
 80180da:	4650      	mov	r0, sl
 80180dc:	ec53 2b10 	vmov	r2, r3, d0
 80180e0:	4659      	mov	r1, fp
 80180e2:	f7f0 f9c1 	bl	8008468 <__aeabi_dmul>
 80180e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80180ea:	f7f0 f807 	bl	80080fc <__adddf3>
 80180ee:	4682      	mov	sl, r0
 80180f0:	468b      	mov	fp, r1
 80180f2:	e772      	b.n	8017fda <_strtod_l+0xa8a>
 80180f4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80180f8:	e7df      	b.n	80180ba <_strtod_l+0xb6a>
 80180fa:	a30d      	add	r3, pc, #52	; (adr r3, 8018130 <_strtod_l+0xbe0>)
 80180fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018100:	f7f0 fc24 	bl	800894c <__aeabi_dcmplt>
 8018104:	e79c      	b.n	8018040 <_strtod_l+0xaf0>
 8018106:	2300      	movs	r3, #0
 8018108:	930d      	str	r3, [sp, #52]	; 0x34
 801810a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801810c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801810e:	6013      	str	r3, [r2, #0]
 8018110:	f7ff ba61 	b.w	80175d6 <_strtod_l+0x86>
 8018114:	2b65      	cmp	r3, #101	; 0x65
 8018116:	f04f 0200 	mov.w	r2, #0
 801811a:	f43f ab4e 	beq.w	80177ba <_strtod_l+0x26a>
 801811e:	2101      	movs	r1, #1
 8018120:	4614      	mov	r4, r2
 8018122:	9104      	str	r1, [sp, #16]
 8018124:	f7ff bacb 	b.w	80176be <_strtod_l+0x16e>
 8018128:	ffc00000 	.word	0xffc00000
 801812c:	41dfffff 	.word	0x41dfffff
 8018130:	94a03595 	.word	0x94a03595
 8018134:	3fcfffff 	.word	0x3fcfffff

08018138 <_strtod_r>:
 8018138:	4b05      	ldr	r3, [pc, #20]	; (8018150 <_strtod_r+0x18>)
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	b410      	push	{r4}
 801813e:	6a1b      	ldr	r3, [r3, #32]
 8018140:	4c04      	ldr	r4, [pc, #16]	; (8018154 <_strtod_r+0x1c>)
 8018142:	2b00      	cmp	r3, #0
 8018144:	bf08      	it	eq
 8018146:	4623      	moveq	r3, r4
 8018148:	f85d 4b04 	ldr.w	r4, [sp], #4
 801814c:	f7ff ba00 	b.w	8017550 <_strtod_l>
 8018150:	2000002c 	.word	0x2000002c
 8018154:	20000090 	.word	0x20000090

08018158 <_strtol_l.isra.0>:
 8018158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801815c:	4680      	mov	r8, r0
 801815e:	4689      	mov	r9, r1
 8018160:	4692      	mov	sl, r2
 8018162:	461e      	mov	r6, r3
 8018164:	460f      	mov	r7, r1
 8018166:	463d      	mov	r5, r7
 8018168:	9808      	ldr	r0, [sp, #32]
 801816a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801816e:	f001 fc55 	bl	8019a1c <__locale_ctype_ptr_l>
 8018172:	4420      	add	r0, r4
 8018174:	7843      	ldrb	r3, [r0, #1]
 8018176:	f013 0308 	ands.w	r3, r3, #8
 801817a:	d132      	bne.n	80181e2 <_strtol_l.isra.0+0x8a>
 801817c:	2c2d      	cmp	r4, #45	; 0x2d
 801817e:	d132      	bne.n	80181e6 <_strtol_l.isra.0+0x8e>
 8018180:	787c      	ldrb	r4, [r7, #1]
 8018182:	1cbd      	adds	r5, r7, #2
 8018184:	2201      	movs	r2, #1
 8018186:	2e00      	cmp	r6, #0
 8018188:	d05d      	beq.n	8018246 <_strtol_l.isra.0+0xee>
 801818a:	2e10      	cmp	r6, #16
 801818c:	d109      	bne.n	80181a2 <_strtol_l.isra.0+0x4a>
 801818e:	2c30      	cmp	r4, #48	; 0x30
 8018190:	d107      	bne.n	80181a2 <_strtol_l.isra.0+0x4a>
 8018192:	782b      	ldrb	r3, [r5, #0]
 8018194:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018198:	2b58      	cmp	r3, #88	; 0x58
 801819a:	d14f      	bne.n	801823c <_strtol_l.isra.0+0xe4>
 801819c:	786c      	ldrb	r4, [r5, #1]
 801819e:	2610      	movs	r6, #16
 80181a0:	3502      	adds	r5, #2
 80181a2:	2a00      	cmp	r2, #0
 80181a4:	bf14      	ite	ne
 80181a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80181aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80181ae:	2700      	movs	r7, #0
 80181b0:	fbb1 fcf6 	udiv	ip, r1, r6
 80181b4:	4638      	mov	r0, r7
 80181b6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80181ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80181be:	2b09      	cmp	r3, #9
 80181c0:	d817      	bhi.n	80181f2 <_strtol_l.isra.0+0x9a>
 80181c2:	461c      	mov	r4, r3
 80181c4:	42a6      	cmp	r6, r4
 80181c6:	dd23      	ble.n	8018210 <_strtol_l.isra.0+0xb8>
 80181c8:	1c7b      	adds	r3, r7, #1
 80181ca:	d007      	beq.n	80181dc <_strtol_l.isra.0+0x84>
 80181cc:	4584      	cmp	ip, r0
 80181ce:	d31c      	bcc.n	801820a <_strtol_l.isra.0+0xb2>
 80181d0:	d101      	bne.n	80181d6 <_strtol_l.isra.0+0x7e>
 80181d2:	45a6      	cmp	lr, r4
 80181d4:	db19      	blt.n	801820a <_strtol_l.isra.0+0xb2>
 80181d6:	fb00 4006 	mla	r0, r0, r6, r4
 80181da:	2701      	movs	r7, #1
 80181dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80181e0:	e7eb      	b.n	80181ba <_strtol_l.isra.0+0x62>
 80181e2:	462f      	mov	r7, r5
 80181e4:	e7bf      	b.n	8018166 <_strtol_l.isra.0+0xe>
 80181e6:	2c2b      	cmp	r4, #43	; 0x2b
 80181e8:	bf04      	itt	eq
 80181ea:	1cbd      	addeq	r5, r7, #2
 80181ec:	787c      	ldrbeq	r4, [r7, #1]
 80181ee:	461a      	mov	r2, r3
 80181f0:	e7c9      	b.n	8018186 <_strtol_l.isra.0+0x2e>
 80181f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80181f6:	2b19      	cmp	r3, #25
 80181f8:	d801      	bhi.n	80181fe <_strtol_l.isra.0+0xa6>
 80181fa:	3c37      	subs	r4, #55	; 0x37
 80181fc:	e7e2      	b.n	80181c4 <_strtol_l.isra.0+0x6c>
 80181fe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8018202:	2b19      	cmp	r3, #25
 8018204:	d804      	bhi.n	8018210 <_strtol_l.isra.0+0xb8>
 8018206:	3c57      	subs	r4, #87	; 0x57
 8018208:	e7dc      	b.n	80181c4 <_strtol_l.isra.0+0x6c>
 801820a:	f04f 37ff 	mov.w	r7, #4294967295
 801820e:	e7e5      	b.n	80181dc <_strtol_l.isra.0+0x84>
 8018210:	1c7b      	adds	r3, r7, #1
 8018212:	d108      	bne.n	8018226 <_strtol_l.isra.0+0xce>
 8018214:	2322      	movs	r3, #34	; 0x22
 8018216:	f8c8 3000 	str.w	r3, [r8]
 801821a:	4608      	mov	r0, r1
 801821c:	f1ba 0f00 	cmp.w	sl, #0
 8018220:	d107      	bne.n	8018232 <_strtol_l.isra.0+0xda>
 8018222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018226:	b102      	cbz	r2, 801822a <_strtol_l.isra.0+0xd2>
 8018228:	4240      	negs	r0, r0
 801822a:	f1ba 0f00 	cmp.w	sl, #0
 801822e:	d0f8      	beq.n	8018222 <_strtol_l.isra.0+0xca>
 8018230:	b10f      	cbz	r7, 8018236 <_strtol_l.isra.0+0xde>
 8018232:	f105 39ff 	add.w	r9, r5, #4294967295
 8018236:	f8ca 9000 	str.w	r9, [sl]
 801823a:	e7f2      	b.n	8018222 <_strtol_l.isra.0+0xca>
 801823c:	2430      	movs	r4, #48	; 0x30
 801823e:	2e00      	cmp	r6, #0
 8018240:	d1af      	bne.n	80181a2 <_strtol_l.isra.0+0x4a>
 8018242:	2608      	movs	r6, #8
 8018244:	e7ad      	b.n	80181a2 <_strtol_l.isra.0+0x4a>
 8018246:	2c30      	cmp	r4, #48	; 0x30
 8018248:	d0a3      	beq.n	8018192 <_strtol_l.isra.0+0x3a>
 801824a:	260a      	movs	r6, #10
 801824c:	e7a9      	b.n	80181a2 <_strtol_l.isra.0+0x4a>
	...

08018250 <_strtol_r>:
 8018250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018252:	4c06      	ldr	r4, [pc, #24]	; (801826c <_strtol_r+0x1c>)
 8018254:	4d06      	ldr	r5, [pc, #24]	; (8018270 <_strtol_r+0x20>)
 8018256:	6824      	ldr	r4, [r4, #0]
 8018258:	6a24      	ldr	r4, [r4, #32]
 801825a:	2c00      	cmp	r4, #0
 801825c:	bf08      	it	eq
 801825e:	462c      	moveq	r4, r5
 8018260:	9400      	str	r4, [sp, #0]
 8018262:	f7ff ff79 	bl	8018158 <_strtol_l.isra.0>
 8018266:	b003      	add	sp, #12
 8018268:	bd30      	pop	{r4, r5, pc}
 801826a:	bf00      	nop
 801826c:	2000002c 	.word	0x2000002c
 8018270:	20000090 	.word	0x20000090

08018274 <__swbuf_r>:
 8018274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018276:	460e      	mov	r6, r1
 8018278:	4614      	mov	r4, r2
 801827a:	4605      	mov	r5, r0
 801827c:	b118      	cbz	r0, 8018286 <__swbuf_r+0x12>
 801827e:	6983      	ldr	r3, [r0, #24]
 8018280:	b90b      	cbnz	r3, 8018286 <__swbuf_r+0x12>
 8018282:	f000 ffff 	bl	8019284 <__sinit>
 8018286:	4b21      	ldr	r3, [pc, #132]	; (801830c <__swbuf_r+0x98>)
 8018288:	429c      	cmp	r4, r3
 801828a:	d12a      	bne.n	80182e2 <__swbuf_r+0x6e>
 801828c:	686c      	ldr	r4, [r5, #4]
 801828e:	69a3      	ldr	r3, [r4, #24]
 8018290:	60a3      	str	r3, [r4, #8]
 8018292:	89a3      	ldrh	r3, [r4, #12]
 8018294:	071a      	lsls	r2, r3, #28
 8018296:	d52e      	bpl.n	80182f6 <__swbuf_r+0x82>
 8018298:	6923      	ldr	r3, [r4, #16]
 801829a:	b363      	cbz	r3, 80182f6 <__swbuf_r+0x82>
 801829c:	6923      	ldr	r3, [r4, #16]
 801829e:	6820      	ldr	r0, [r4, #0]
 80182a0:	1ac0      	subs	r0, r0, r3
 80182a2:	6963      	ldr	r3, [r4, #20]
 80182a4:	b2f6      	uxtb	r6, r6
 80182a6:	4283      	cmp	r3, r0
 80182a8:	4637      	mov	r7, r6
 80182aa:	dc04      	bgt.n	80182b6 <__swbuf_r+0x42>
 80182ac:	4621      	mov	r1, r4
 80182ae:	4628      	mov	r0, r5
 80182b0:	f000 ff6c 	bl	801918c <_fflush_r>
 80182b4:	bb28      	cbnz	r0, 8018302 <__swbuf_r+0x8e>
 80182b6:	68a3      	ldr	r3, [r4, #8]
 80182b8:	3b01      	subs	r3, #1
 80182ba:	60a3      	str	r3, [r4, #8]
 80182bc:	6823      	ldr	r3, [r4, #0]
 80182be:	1c5a      	adds	r2, r3, #1
 80182c0:	6022      	str	r2, [r4, #0]
 80182c2:	701e      	strb	r6, [r3, #0]
 80182c4:	6963      	ldr	r3, [r4, #20]
 80182c6:	3001      	adds	r0, #1
 80182c8:	4283      	cmp	r3, r0
 80182ca:	d004      	beq.n	80182d6 <__swbuf_r+0x62>
 80182cc:	89a3      	ldrh	r3, [r4, #12]
 80182ce:	07db      	lsls	r3, r3, #31
 80182d0:	d519      	bpl.n	8018306 <__swbuf_r+0x92>
 80182d2:	2e0a      	cmp	r6, #10
 80182d4:	d117      	bne.n	8018306 <__swbuf_r+0x92>
 80182d6:	4621      	mov	r1, r4
 80182d8:	4628      	mov	r0, r5
 80182da:	f000 ff57 	bl	801918c <_fflush_r>
 80182de:	b190      	cbz	r0, 8018306 <__swbuf_r+0x92>
 80182e0:	e00f      	b.n	8018302 <__swbuf_r+0x8e>
 80182e2:	4b0b      	ldr	r3, [pc, #44]	; (8018310 <__swbuf_r+0x9c>)
 80182e4:	429c      	cmp	r4, r3
 80182e6:	d101      	bne.n	80182ec <__swbuf_r+0x78>
 80182e8:	68ac      	ldr	r4, [r5, #8]
 80182ea:	e7d0      	b.n	801828e <__swbuf_r+0x1a>
 80182ec:	4b09      	ldr	r3, [pc, #36]	; (8018314 <__swbuf_r+0xa0>)
 80182ee:	429c      	cmp	r4, r3
 80182f0:	bf08      	it	eq
 80182f2:	68ec      	ldreq	r4, [r5, #12]
 80182f4:	e7cb      	b.n	801828e <__swbuf_r+0x1a>
 80182f6:	4621      	mov	r1, r4
 80182f8:	4628      	mov	r0, r5
 80182fa:	f000 f80d 	bl	8018318 <__swsetup_r>
 80182fe:	2800      	cmp	r0, #0
 8018300:	d0cc      	beq.n	801829c <__swbuf_r+0x28>
 8018302:	f04f 37ff 	mov.w	r7, #4294967295
 8018306:	4638      	mov	r0, r7
 8018308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801830a:	bf00      	nop
 801830c:	0801b950 	.word	0x0801b950
 8018310:	0801b970 	.word	0x0801b970
 8018314:	0801b930 	.word	0x0801b930

08018318 <__swsetup_r>:
 8018318:	4b32      	ldr	r3, [pc, #200]	; (80183e4 <__swsetup_r+0xcc>)
 801831a:	b570      	push	{r4, r5, r6, lr}
 801831c:	681d      	ldr	r5, [r3, #0]
 801831e:	4606      	mov	r6, r0
 8018320:	460c      	mov	r4, r1
 8018322:	b125      	cbz	r5, 801832e <__swsetup_r+0x16>
 8018324:	69ab      	ldr	r3, [r5, #24]
 8018326:	b913      	cbnz	r3, 801832e <__swsetup_r+0x16>
 8018328:	4628      	mov	r0, r5
 801832a:	f000 ffab 	bl	8019284 <__sinit>
 801832e:	4b2e      	ldr	r3, [pc, #184]	; (80183e8 <__swsetup_r+0xd0>)
 8018330:	429c      	cmp	r4, r3
 8018332:	d10f      	bne.n	8018354 <__swsetup_r+0x3c>
 8018334:	686c      	ldr	r4, [r5, #4]
 8018336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801833a:	b29a      	uxth	r2, r3
 801833c:	0715      	lsls	r5, r2, #28
 801833e:	d42c      	bmi.n	801839a <__swsetup_r+0x82>
 8018340:	06d0      	lsls	r0, r2, #27
 8018342:	d411      	bmi.n	8018368 <__swsetup_r+0x50>
 8018344:	2209      	movs	r2, #9
 8018346:	6032      	str	r2, [r6, #0]
 8018348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801834c:	81a3      	strh	r3, [r4, #12]
 801834e:	f04f 30ff 	mov.w	r0, #4294967295
 8018352:	e03e      	b.n	80183d2 <__swsetup_r+0xba>
 8018354:	4b25      	ldr	r3, [pc, #148]	; (80183ec <__swsetup_r+0xd4>)
 8018356:	429c      	cmp	r4, r3
 8018358:	d101      	bne.n	801835e <__swsetup_r+0x46>
 801835a:	68ac      	ldr	r4, [r5, #8]
 801835c:	e7eb      	b.n	8018336 <__swsetup_r+0x1e>
 801835e:	4b24      	ldr	r3, [pc, #144]	; (80183f0 <__swsetup_r+0xd8>)
 8018360:	429c      	cmp	r4, r3
 8018362:	bf08      	it	eq
 8018364:	68ec      	ldreq	r4, [r5, #12]
 8018366:	e7e6      	b.n	8018336 <__swsetup_r+0x1e>
 8018368:	0751      	lsls	r1, r2, #29
 801836a:	d512      	bpl.n	8018392 <__swsetup_r+0x7a>
 801836c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801836e:	b141      	cbz	r1, 8018382 <__swsetup_r+0x6a>
 8018370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018374:	4299      	cmp	r1, r3
 8018376:	d002      	beq.n	801837e <__swsetup_r+0x66>
 8018378:	4630      	mov	r0, r6
 801837a:	f001 fffd 	bl	801a378 <_free_r>
 801837e:	2300      	movs	r3, #0
 8018380:	6363      	str	r3, [r4, #52]	; 0x34
 8018382:	89a3      	ldrh	r3, [r4, #12]
 8018384:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018388:	81a3      	strh	r3, [r4, #12]
 801838a:	2300      	movs	r3, #0
 801838c:	6063      	str	r3, [r4, #4]
 801838e:	6923      	ldr	r3, [r4, #16]
 8018390:	6023      	str	r3, [r4, #0]
 8018392:	89a3      	ldrh	r3, [r4, #12]
 8018394:	f043 0308 	orr.w	r3, r3, #8
 8018398:	81a3      	strh	r3, [r4, #12]
 801839a:	6923      	ldr	r3, [r4, #16]
 801839c:	b94b      	cbnz	r3, 80183b2 <__swsetup_r+0x9a>
 801839e:	89a3      	ldrh	r3, [r4, #12]
 80183a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80183a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80183a8:	d003      	beq.n	80183b2 <__swsetup_r+0x9a>
 80183aa:	4621      	mov	r1, r4
 80183ac:	4630      	mov	r0, r6
 80183ae:	f001 fb7b 	bl	8019aa8 <__smakebuf_r>
 80183b2:	89a2      	ldrh	r2, [r4, #12]
 80183b4:	f012 0301 	ands.w	r3, r2, #1
 80183b8:	d00c      	beq.n	80183d4 <__swsetup_r+0xbc>
 80183ba:	2300      	movs	r3, #0
 80183bc:	60a3      	str	r3, [r4, #8]
 80183be:	6963      	ldr	r3, [r4, #20]
 80183c0:	425b      	negs	r3, r3
 80183c2:	61a3      	str	r3, [r4, #24]
 80183c4:	6923      	ldr	r3, [r4, #16]
 80183c6:	b953      	cbnz	r3, 80183de <__swsetup_r+0xc6>
 80183c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80183d0:	d1ba      	bne.n	8018348 <__swsetup_r+0x30>
 80183d2:	bd70      	pop	{r4, r5, r6, pc}
 80183d4:	0792      	lsls	r2, r2, #30
 80183d6:	bf58      	it	pl
 80183d8:	6963      	ldrpl	r3, [r4, #20]
 80183da:	60a3      	str	r3, [r4, #8]
 80183dc:	e7f2      	b.n	80183c4 <__swsetup_r+0xac>
 80183de:	2000      	movs	r0, #0
 80183e0:	e7f7      	b.n	80183d2 <__swsetup_r+0xba>
 80183e2:	bf00      	nop
 80183e4:	2000002c 	.word	0x2000002c
 80183e8:	0801b950 	.word	0x0801b950
 80183ec:	0801b970 	.word	0x0801b970
 80183f0:	0801b930 	.word	0x0801b930

080183f4 <quorem>:
 80183f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183f8:	6903      	ldr	r3, [r0, #16]
 80183fa:	690c      	ldr	r4, [r1, #16]
 80183fc:	42a3      	cmp	r3, r4
 80183fe:	4680      	mov	r8, r0
 8018400:	f2c0 8082 	blt.w	8018508 <quorem+0x114>
 8018404:	3c01      	subs	r4, #1
 8018406:	f101 0714 	add.w	r7, r1, #20
 801840a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801840e:	f100 0614 	add.w	r6, r0, #20
 8018412:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8018416:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801841a:	eb06 030c 	add.w	r3, r6, ip
 801841e:	3501      	adds	r5, #1
 8018420:	eb07 090c 	add.w	r9, r7, ip
 8018424:	9301      	str	r3, [sp, #4]
 8018426:	fbb0 f5f5 	udiv	r5, r0, r5
 801842a:	b395      	cbz	r5, 8018492 <quorem+0x9e>
 801842c:	f04f 0a00 	mov.w	sl, #0
 8018430:	4638      	mov	r0, r7
 8018432:	46b6      	mov	lr, r6
 8018434:	46d3      	mov	fp, sl
 8018436:	f850 2b04 	ldr.w	r2, [r0], #4
 801843a:	b293      	uxth	r3, r2
 801843c:	fb05 a303 	mla	r3, r5, r3, sl
 8018440:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018444:	b29b      	uxth	r3, r3
 8018446:	ebab 0303 	sub.w	r3, fp, r3
 801844a:	0c12      	lsrs	r2, r2, #16
 801844c:	f8de b000 	ldr.w	fp, [lr]
 8018450:	fb05 a202 	mla	r2, r5, r2, sl
 8018454:	fa13 f38b 	uxtah	r3, r3, fp
 8018458:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801845c:	fa1f fb82 	uxth.w	fp, r2
 8018460:	f8de 2000 	ldr.w	r2, [lr]
 8018464:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8018468:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801846c:	b29b      	uxth	r3, r3
 801846e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018472:	4581      	cmp	r9, r0
 8018474:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8018478:	f84e 3b04 	str.w	r3, [lr], #4
 801847c:	d2db      	bcs.n	8018436 <quorem+0x42>
 801847e:	f856 300c 	ldr.w	r3, [r6, ip]
 8018482:	b933      	cbnz	r3, 8018492 <quorem+0x9e>
 8018484:	9b01      	ldr	r3, [sp, #4]
 8018486:	3b04      	subs	r3, #4
 8018488:	429e      	cmp	r6, r3
 801848a:	461a      	mov	r2, r3
 801848c:	d330      	bcc.n	80184f0 <quorem+0xfc>
 801848e:	f8c8 4010 	str.w	r4, [r8, #16]
 8018492:	4640      	mov	r0, r8
 8018494:	f001 fdb6 	bl	801a004 <__mcmp>
 8018498:	2800      	cmp	r0, #0
 801849a:	db25      	blt.n	80184e8 <quorem+0xf4>
 801849c:	3501      	adds	r5, #1
 801849e:	4630      	mov	r0, r6
 80184a0:	f04f 0c00 	mov.w	ip, #0
 80184a4:	f857 2b04 	ldr.w	r2, [r7], #4
 80184a8:	f8d0 e000 	ldr.w	lr, [r0]
 80184ac:	b293      	uxth	r3, r2
 80184ae:	ebac 0303 	sub.w	r3, ip, r3
 80184b2:	0c12      	lsrs	r2, r2, #16
 80184b4:	fa13 f38e 	uxtah	r3, r3, lr
 80184b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80184bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80184c0:	b29b      	uxth	r3, r3
 80184c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80184c6:	45b9      	cmp	r9, r7
 80184c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80184cc:	f840 3b04 	str.w	r3, [r0], #4
 80184d0:	d2e8      	bcs.n	80184a4 <quorem+0xb0>
 80184d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80184d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80184da:	b92a      	cbnz	r2, 80184e8 <quorem+0xf4>
 80184dc:	3b04      	subs	r3, #4
 80184de:	429e      	cmp	r6, r3
 80184e0:	461a      	mov	r2, r3
 80184e2:	d30b      	bcc.n	80184fc <quorem+0x108>
 80184e4:	f8c8 4010 	str.w	r4, [r8, #16]
 80184e8:	4628      	mov	r0, r5
 80184ea:	b003      	add	sp, #12
 80184ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184f0:	6812      	ldr	r2, [r2, #0]
 80184f2:	3b04      	subs	r3, #4
 80184f4:	2a00      	cmp	r2, #0
 80184f6:	d1ca      	bne.n	801848e <quorem+0x9a>
 80184f8:	3c01      	subs	r4, #1
 80184fa:	e7c5      	b.n	8018488 <quorem+0x94>
 80184fc:	6812      	ldr	r2, [r2, #0]
 80184fe:	3b04      	subs	r3, #4
 8018500:	2a00      	cmp	r2, #0
 8018502:	d1ef      	bne.n	80184e4 <quorem+0xf0>
 8018504:	3c01      	subs	r4, #1
 8018506:	e7ea      	b.n	80184de <quorem+0xea>
 8018508:	2000      	movs	r0, #0
 801850a:	e7ee      	b.n	80184ea <quorem+0xf6>
 801850c:	0000      	movs	r0, r0
	...

08018510 <_dtoa_r>:
 8018510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018514:	ec57 6b10 	vmov	r6, r7, d0
 8018518:	b097      	sub	sp, #92	; 0x5c
 801851a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801851c:	9106      	str	r1, [sp, #24]
 801851e:	4604      	mov	r4, r0
 8018520:	920b      	str	r2, [sp, #44]	; 0x2c
 8018522:	9312      	str	r3, [sp, #72]	; 0x48
 8018524:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018528:	e9cd 6700 	strd	r6, r7, [sp]
 801852c:	b93d      	cbnz	r5, 801853e <_dtoa_r+0x2e>
 801852e:	2010      	movs	r0, #16
 8018530:	f001 fafa 	bl	8019b28 <malloc>
 8018534:	6260      	str	r0, [r4, #36]	; 0x24
 8018536:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801853a:	6005      	str	r5, [r0, #0]
 801853c:	60c5      	str	r5, [r0, #12]
 801853e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018540:	6819      	ldr	r1, [r3, #0]
 8018542:	b151      	cbz	r1, 801855a <_dtoa_r+0x4a>
 8018544:	685a      	ldr	r2, [r3, #4]
 8018546:	604a      	str	r2, [r1, #4]
 8018548:	2301      	movs	r3, #1
 801854a:	4093      	lsls	r3, r2
 801854c:	608b      	str	r3, [r1, #8]
 801854e:	4620      	mov	r0, r4
 8018550:	f001 fb38 	bl	8019bc4 <_Bfree>
 8018554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018556:	2200      	movs	r2, #0
 8018558:	601a      	str	r2, [r3, #0]
 801855a:	1e3b      	subs	r3, r7, #0
 801855c:	bfbb      	ittet	lt
 801855e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018562:	9301      	strlt	r3, [sp, #4]
 8018564:	2300      	movge	r3, #0
 8018566:	2201      	movlt	r2, #1
 8018568:	bfac      	ite	ge
 801856a:	f8c8 3000 	strge.w	r3, [r8]
 801856e:	f8c8 2000 	strlt.w	r2, [r8]
 8018572:	4baf      	ldr	r3, [pc, #700]	; (8018830 <_dtoa_r+0x320>)
 8018574:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018578:	ea33 0308 	bics.w	r3, r3, r8
 801857c:	d114      	bne.n	80185a8 <_dtoa_r+0x98>
 801857e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018580:	f242 730f 	movw	r3, #9999	; 0x270f
 8018584:	6013      	str	r3, [r2, #0]
 8018586:	9b00      	ldr	r3, [sp, #0]
 8018588:	b923      	cbnz	r3, 8018594 <_dtoa_r+0x84>
 801858a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801858e:	2800      	cmp	r0, #0
 8018590:	f000 8542 	beq.w	8019018 <_dtoa_r+0xb08>
 8018594:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018596:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8018844 <_dtoa_r+0x334>
 801859a:	2b00      	cmp	r3, #0
 801859c:	f000 8544 	beq.w	8019028 <_dtoa_r+0xb18>
 80185a0:	f10b 0303 	add.w	r3, fp, #3
 80185a4:	f000 bd3e 	b.w	8019024 <_dtoa_r+0xb14>
 80185a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80185ac:	2200      	movs	r2, #0
 80185ae:	2300      	movs	r3, #0
 80185b0:	4630      	mov	r0, r6
 80185b2:	4639      	mov	r1, r7
 80185b4:	f7f0 f9c0 	bl	8008938 <__aeabi_dcmpeq>
 80185b8:	4681      	mov	r9, r0
 80185ba:	b168      	cbz	r0, 80185d8 <_dtoa_r+0xc8>
 80185bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80185be:	2301      	movs	r3, #1
 80185c0:	6013      	str	r3, [r2, #0]
 80185c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	f000 8524 	beq.w	8019012 <_dtoa_r+0xb02>
 80185ca:	4b9a      	ldr	r3, [pc, #616]	; (8018834 <_dtoa_r+0x324>)
 80185cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80185ce:	f103 3bff 	add.w	fp, r3, #4294967295
 80185d2:	6013      	str	r3, [r2, #0]
 80185d4:	f000 bd28 	b.w	8019028 <_dtoa_r+0xb18>
 80185d8:	aa14      	add	r2, sp, #80	; 0x50
 80185da:	a915      	add	r1, sp, #84	; 0x54
 80185dc:	ec47 6b10 	vmov	d0, r6, r7
 80185e0:	4620      	mov	r0, r4
 80185e2:	f001 fdfd 	bl	801a1e0 <__d2b>
 80185e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80185ea:	9004      	str	r0, [sp, #16]
 80185ec:	2d00      	cmp	r5, #0
 80185ee:	d07c      	beq.n	80186ea <_dtoa_r+0x1da>
 80185f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80185f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80185f8:	46b2      	mov	sl, r6
 80185fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80185fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018602:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8018606:	2200      	movs	r2, #0
 8018608:	4b8b      	ldr	r3, [pc, #556]	; (8018838 <_dtoa_r+0x328>)
 801860a:	4650      	mov	r0, sl
 801860c:	4659      	mov	r1, fp
 801860e:	f7ef fd73 	bl	80080f8 <__aeabi_dsub>
 8018612:	a381      	add	r3, pc, #516	; (adr r3, 8018818 <_dtoa_r+0x308>)
 8018614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018618:	f7ef ff26 	bl	8008468 <__aeabi_dmul>
 801861c:	a380      	add	r3, pc, #512	; (adr r3, 8018820 <_dtoa_r+0x310>)
 801861e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018622:	f7ef fd6b 	bl	80080fc <__adddf3>
 8018626:	4606      	mov	r6, r0
 8018628:	4628      	mov	r0, r5
 801862a:	460f      	mov	r7, r1
 801862c:	f7ef feb2 	bl	8008394 <__aeabi_i2d>
 8018630:	a37d      	add	r3, pc, #500	; (adr r3, 8018828 <_dtoa_r+0x318>)
 8018632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018636:	f7ef ff17 	bl	8008468 <__aeabi_dmul>
 801863a:	4602      	mov	r2, r0
 801863c:	460b      	mov	r3, r1
 801863e:	4630      	mov	r0, r6
 8018640:	4639      	mov	r1, r7
 8018642:	f7ef fd5b 	bl	80080fc <__adddf3>
 8018646:	4606      	mov	r6, r0
 8018648:	460f      	mov	r7, r1
 801864a:	f7f0 f9bd 	bl	80089c8 <__aeabi_d2iz>
 801864e:	2200      	movs	r2, #0
 8018650:	4682      	mov	sl, r0
 8018652:	2300      	movs	r3, #0
 8018654:	4630      	mov	r0, r6
 8018656:	4639      	mov	r1, r7
 8018658:	f7f0 f978 	bl	800894c <__aeabi_dcmplt>
 801865c:	b148      	cbz	r0, 8018672 <_dtoa_r+0x162>
 801865e:	4650      	mov	r0, sl
 8018660:	f7ef fe98 	bl	8008394 <__aeabi_i2d>
 8018664:	4632      	mov	r2, r6
 8018666:	463b      	mov	r3, r7
 8018668:	f7f0 f966 	bl	8008938 <__aeabi_dcmpeq>
 801866c:	b908      	cbnz	r0, 8018672 <_dtoa_r+0x162>
 801866e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018672:	f1ba 0f16 	cmp.w	sl, #22
 8018676:	d859      	bhi.n	801872c <_dtoa_r+0x21c>
 8018678:	4970      	ldr	r1, [pc, #448]	; (801883c <_dtoa_r+0x32c>)
 801867a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801867e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018682:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018686:	f7f0 f97f 	bl	8008988 <__aeabi_dcmpgt>
 801868a:	2800      	cmp	r0, #0
 801868c:	d050      	beq.n	8018730 <_dtoa_r+0x220>
 801868e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018692:	2300      	movs	r3, #0
 8018694:	930f      	str	r3, [sp, #60]	; 0x3c
 8018696:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018698:	1b5d      	subs	r5, r3, r5
 801869a:	f1b5 0801 	subs.w	r8, r5, #1
 801869e:	bf49      	itett	mi
 80186a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80186a4:	2300      	movpl	r3, #0
 80186a6:	9305      	strmi	r3, [sp, #20]
 80186a8:	f04f 0800 	movmi.w	r8, #0
 80186ac:	bf58      	it	pl
 80186ae:	9305      	strpl	r3, [sp, #20]
 80186b0:	f1ba 0f00 	cmp.w	sl, #0
 80186b4:	db3e      	blt.n	8018734 <_dtoa_r+0x224>
 80186b6:	2300      	movs	r3, #0
 80186b8:	44d0      	add	r8, sl
 80186ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80186be:	9307      	str	r3, [sp, #28]
 80186c0:	9b06      	ldr	r3, [sp, #24]
 80186c2:	2b09      	cmp	r3, #9
 80186c4:	f200 8090 	bhi.w	80187e8 <_dtoa_r+0x2d8>
 80186c8:	2b05      	cmp	r3, #5
 80186ca:	bfc4      	itt	gt
 80186cc:	3b04      	subgt	r3, #4
 80186ce:	9306      	strgt	r3, [sp, #24]
 80186d0:	9b06      	ldr	r3, [sp, #24]
 80186d2:	f1a3 0302 	sub.w	r3, r3, #2
 80186d6:	bfcc      	ite	gt
 80186d8:	2500      	movgt	r5, #0
 80186da:	2501      	movle	r5, #1
 80186dc:	2b03      	cmp	r3, #3
 80186de:	f200 808f 	bhi.w	8018800 <_dtoa_r+0x2f0>
 80186e2:	e8df f003 	tbb	[pc, r3]
 80186e6:	7f7d      	.short	0x7f7d
 80186e8:	7131      	.short	0x7131
 80186ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80186ee:	441d      	add	r5, r3
 80186f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80186f4:	2820      	cmp	r0, #32
 80186f6:	dd13      	ble.n	8018720 <_dtoa_r+0x210>
 80186f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80186fc:	9b00      	ldr	r3, [sp, #0]
 80186fe:	fa08 f800 	lsl.w	r8, r8, r0
 8018702:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8018706:	fa23 f000 	lsr.w	r0, r3, r0
 801870a:	ea48 0000 	orr.w	r0, r8, r0
 801870e:	f7ef fe31 	bl	8008374 <__aeabi_ui2d>
 8018712:	2301      	movs	r3, #1
 8018714:	4682      	mov	sl, r0
 8018716:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801871a:	3d01      	subs	r5, #1
 801871c:	9313      	str	r3, [sp, #76]	; 0x4c
 801871e:	e772      	b.n	8018606 <_dtoa_r+0xf6>
 8018720:	9b00      	ldr	r3, [sp, #0]
 8018722:	f1c0 0020 	rsb	r0, r0, #32
 8018726:	fa03 f000 	lsl.w	r0, r3, r0
 801872a:	e7f0      	b.n	801870e <_dtoa_r+0x1fe>
 801872c:	2301      	movs	r3, #1
 801872e:	e7b1      	b.n	8018694 <_dtoa_r+0x184>
 8018730:	900f      	str	r0, [sp, #60]	; 0x3c
 8018732:	e7b0      	b.n	8018696 <_dtoa_r+0x186>
 8018734:	9b05      	ldr	r3, [sp, #20]
 8018736:	eba3 030a 	sub.w	r3, r3, sl
 801873a:	9305      	str	r3, [sp, #20]
 801873c:	f1ca 0300 	rsb	r3, sl, #0
 8018740:	9307      	str	r3, [sp, #28]
 8018742:	2300      	movs	r3, #0
 8018744:	930e      	str	r3, [sp, #56]	; 0x38
 8018746:	e7bb      	b.n	80186c0 <_dtoa_r+0x1b0>
 8018748:	2301      	movs	r3, #1
 801874a:	930a      	str	r3, [sp, #40]	; 0x28
 801874c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801874e:	2b00      	cmp	r3, #0
 8018750:	dd59      	ble.n	8018806 <_dtoa_r+0x2f6>
 8018752:	9302      	str	r3, [sp, #8]
 8018754:	4699      	mov	r9, r3
 8018756:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018758:	2200      	movs	r2, #0
 801875a:	6072      	str	r2, [r6, #4]
 801875c:	2204      	movs	r2, #4
 801875e:	f102 0014 	add.w	r0, r2, #20
 8018762:	4298      	cmp	r0, r3
 8018764:	6871      	ldr	r1, [r6, #4]
 8018766:	d953      	bls.n	8018810 <_dtoa_r+0x300>
 8018768:	4620      	mov	r0, r4
 801876a:	f001 f9f7 	bl	8019b5c <_Balloc>
 801876e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018770:	6030      	str	r0, [r6, #0]
 8018772:	f1b9 0f0e 	cmp.w	r9, #14
 8018776:	f8d3 b000 	ldr.w	fp, [r3]
 801877a:	f200 80e6 	bhi.w	801894a <_dtoa_r+0x43a>
 801877e:	2d00      	cmp	r5, #0
 8018780:	f000 80e3 	beq.w	801894a <_dtoa_r+0x43a>
 8018784:	ed9d 7b00 	vldr	d7, [sp]
 8018788:	f1ba 0f00 	cmp.w	sl, #0
 801878c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8018790:	dd74      	ble.n	801887c <_dtoa_r+0x36c>
 8018792:	4a2a      	ldr	r2, [pc, #168]	; (801883c <_dtoa_r+0x32c>)
 8018794:	f00a 030f 	and.w	r3, sl, #15
 8018798:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801879c:	ed93 7b00 	vldr	d7, [r3]
 80187a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80187a4:	06f0      	lsls	r0, r6, #27
 80187a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80187aa:	d565      	bpl.n	8018878 <_dtoa_r+0x368>
 80187ac:	4b24      	ldr	r3, [pc, #144]	; (8018840 <_dtoa_r+0x330>)
 80187ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80187b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80187b6:	f7ef ff81 	bl	80086bc <__aeabi_ddiv>
 80187ba:	e9cd 0100 	strd	r0, r1, [sp]
 80187be:	f006 060f 	and.w	r6, r6, #15
 80187c2:	2503      	movs	r5, #3
 80187c4:	4f1e      	ldr	r7, [pc, #120]	; (8018840 <_dtoa_r+0x330>)
 80187c6:	e04c      	b.n	8018862 <_dtoa_r+0x352>
 80187c8:	2301      	movs	r3, #1
 80187ca:	930a      	str	r3, [sp, #40]	; 0x28
 80187cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80187ce:	4453      	add	r3, sl
 80187d0:	f103 0901 	add.w	r9, r3, #1
 80187d4:	9302      	str	r3, [sp, #8]
 80187d6:	464b      	mov	r3, r9
 80187d8:	2b01      	cmp	r3, #1
 80187da:	bfb8      	it	lt
 80187dc:	2301      	movlt	r3, #1
 80187de:	e7ba      	b.n	8018756 <_dtoa_r+0x246>
 80187e0:	2300      	movs	r3, #0
 80187e2:	e7b2      	b.n	801874a <_dtoa_r+0x23a>
 80187e4:	2300      	movs	r3, #0
 80187e6:	e7f0      	b.n	80187ca <_dtoa_r+0x2ba>
 80187e8:	2501      	movs	r5, #1
 80187ea:	2300      	movs	r3, #0
 80187ec:	9306      	str	r3, [sp, #24]
 80187ee:	950a      	str	r5, [sp, #40]	; 0x28
 80187f0:	f04f 33ff 	mov.w	r3, #4294967295
 80187f4:	9302      	str	r3, [sp, #8]
 80187f6:	4699      	mov	r9, r3
 80187f8:	2200      	movs	r2, #0
 80187fa:	2312      	movs	r3, #18
 80187fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80187fe:	e7aa      	b.n	8018756 <_dtoa_r+0x246>
 8018800:	2301      	movs	r3, #1
 8018802:	930a      	str	r3, [sp, #40]	; 0x28
 8018804:	e7f4      	b.n	80187f0 <_dtoa_r+0x2e0>
 8018806:	2301      	movs	r3, #1
 8018808:	9302      	str	r3, [sp, #8]
 801880a:	4699      	mov	r9, r3
 801880c:	461a      	mov	r2, r3
 801880e:	e7f5      	b.n	80187fc <_dtoa_r+0x2ec>
 8018810:	3101      	adds	r1, #1
 8018812:	6071      	str	r1, [r6, #4]
 8018814:	0052      	lsls	r2, r2, #1
 8018816:	e7a2      	b.n	801875e <_dtoa_r+0x24e>
 8018818:	636f4361 	.word	0x636f4361
 801881c:	3fd287a7 	.word	0x3fd287a7
 8018820:	8b60c8b3 	.word	0x8b60c8b3
 8018824:	3fc68a28 	.word	0x3fc68a28
 8018828:	509f79fb 	.word	0x509f79fb
 801882c:	3fd34413 	.word	0x3fd34413
 8018830:	7ff00000 	.word	0x7ff00000
 8018834:	0801bac4 	.word	0x0801bac4
 8018838:	3ff80000 	.word	0x3ff80000
 801883c:	0801b9c8 	.word	0x0801b9c8
 8018840:	0801b9a0 	.word	0x0801b9a0
 8018844:	0801b929 	.word	0x0801b929
 8018848:	07f1      	lsls	r1, r6, #31
 801884a:	d508      	bpl.n	801885e <_dtoa_r+0x34e>
 801884c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018854:	f7ef fe08 	bl	8008468 <__aeabi_dmul>
 8018858:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801885c:	3501      	adds	r5, #1
 801885e:	1076      	asrs	r6, r6, #1
 8018860:	3708      	adds	r7, #8
 8018862:	2e00      	cmp	r6, #0
 8018864:	d1f0      	bne.n	8018848 <_dtoa_r+0x338>
 8018866:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801886a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801886e:	f7ef ff25 	bl	80086bc <__aeabi_ddiv>
 8018872:	e9cd 0100 	strd	r0, r1, [sp]
 8018876:	e01a      	b.n	80188ae <_dtoa_r+0x39e>
 8018878:	2502      	movs	r5, #2
 801887a:	e7a3      	b.n	80187c4 <_dtoa_r+0x2b4>
 801887c:	f000 80a0 	beq.w	80189c0 <_dtoa_r+0x4b0>
 8018880:	f1ca 0600 	rsb	r6, sl, #0
 8018884:	4b9f      	ldr	r3, [pc, #636]	; (8018b04 <_dtoa_r+0x5f4>)
 8018886:	4fa0      	ldr	r7, [pc, #640]	; (8018b08 <_dtoa_r+0x5f8>)
 8018888:	f006 020f 	and.w	r2, r6, #15
 801888c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018894:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018898:	f7ef fde6 	bl	8008468 <__aeabi_dmul>
 801889c:	e9cd 0100 	strd	r0, r1, [sp]
 80188a0:	1136      	asrs	r6, r6, #4
 80188a2:	2300      	movs	r3, #0
 80188a4:	2502      	movs	r5, #2
 80188a6:	2e00      	cmp	r6, #0
 80188a8:	d17f      	bne.n	80189aa <_dtoa_r+0x49a>
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d1e1      	bne.n	8018872 <_dtoa_r+0x362>
 80188ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	f000 8087 	beq.w	80189c4 <_dtoa_r+0x4b4>
 80188b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80188ba:	2200      	movs	r2, #0
 80188bc:	4b93      	ldr	r3, [pc, #588]	; (8018b0c <_dtoa_r+0x5fc>)
 80188be:	4630      	mov	r0, r6
 80188c0:	4639      	mov	r1, r7
 80188c2:	f7f0 f843 	bl	800894c <__aeabi_dcmplt>
 80188c6:	2800      	cmp	r0, #0
 80188c8:	d07c      	beq.n	80189c4 <_dtoa_r+0x4b4>
 80188ca:	f1b9 0f00 	cmp.w	r9, #0
 80188ce:	d079      	beq.n	80189c4 <_dtoa_r+0x4b4>
 80188d0:	9b02      	ldr	r3, [sp, #8]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	dd35      	ble.n	8018942 <_dtoa_r+0x432>
 80188d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80188da:	9308      	str	r3, [sp, #32]
 80188dc:	4639      	mov	r1, r7
 80188de:	2200      	movs	r2, #0
 80188e0:	4b8b      	ldr	r3, [pc, #556]	; (8018b10 <_dtoa_r+0x600>)
 80188e2:	4630      	mov	r0, r6
 80188e4:	f7ef fdc0 	bl	8008468 <__aeabi_dmul>
 80188e8:	e9cd 0100 	strd	r0, r1, [sp]
 80188ec:	9f02      	ldr	r7, [sp, #8]
 80188ee:	3501      	adds	r5, #1
 80188f0:	4628      	mov	r0, r5
 80188f2:	f7ef fd4f 	bl	8008394 <__aeabi_i2d>
 80188f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80188fa:	f7ef fdb5 	bl	8008468 <__aeabi_dmul>
 80188fe:	2200      	movs	r2, #0
 8018900:	4b84      	ldr	r3, [pc, #528]	; (8018b14 <_dtoa_r+0x604>)
 8018902:	f7ef fbfb 	bl	80080fc <__adddf3>
 8018906:	4605      	mov	r5, r0
 8018908:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801890c:	2f00      	cmp	r7, #0
 801890e:	d15d      	bne.n	80189cc <_dtoa_r+0x4bc>
 8018910:	2200      	movs	r2, #0
 8018912:	4b81      	ldr	r3, [pc, #516]	; (8018b18 <_dtoa_r+0x608>)
 8018914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018918:	f7ef fbee 	bl	80080f8 <__aeabi_dsub>
 801891c:	462a      	mov	r2, r5
 801891e:	4633      	mov	r3, r6
 8018920:	e9cd 0100 	strd	r0, r1, [sp]
 8018924:	f7f0 f830 	bl	8008988 <__aeabi_dcmpgt>
 8018928:	2800      	cmp	r0, #0
 801892a:	f040 8288 	bne.w	8018e3e <_dtoa_r+0x92e>
 801892e:	462a      	mov	r2, r5
 8018930:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8018934:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018938:	f7f0 f808 	bl	800894c <__aeabi_dcmplt>
 801893c:	2800      	cmp	r0, #0
 801893e:	f040 827c 	bne.w	8018e3a <_dtoa_r+0x92a>
 8018942:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018946:	e9cd 2300 	strd	r2, r3, [sp]
 801894a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801894c:	2b00      	cmp	r3, #0
 801894e:	f2c0 8150 	blt.w	8018bf2 <_dtoa_r+0x6e2>
 8018952:	f1ba 0f0e 	cmp.w	sl, #14
 8018956:	f300 814c 	bgt.w	8018bf2 <_dtoa_r+0x6e2>
 801895a:	4b6a      	ldr	r3, [pc, #424]	; (8018b04 <_dtoa_r+0x5f4>)
 801895c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018960:	ed93 7b00 	vldr	d7, [r3]
 8018964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018966:	2b00      	cmp	r3, #0
 8018968:	ed8d 7b02 	vstr	d7, [sp, #8]
 801896c:	f280 80d8 	bge.w	8018b20 <_dtoa_r+0x610>
 8018970:	f1b9 0f00 	cmp.w	r9, #0
 8018974:	f300 80d4 	bgt.w	8018b20 <_dtoa_r+0x610>
 8018978:	f040 825e 	bne.w	8018e38 <_dtoa_r+0x928>
 801897c:	2200      	movs	r2, #0
 801897e:	4b66      	ldr	r3, [pc, #408]	; (8018b18 <_dtoa_r+0x608>)
 8018980:	ec51 0b17 	vmov	r0, r1, d7
 8018984:	f7ef fd70 	bl	8008468 <__aeabi_dmul>
 8018988:	e9dd 2300 	ldrd	r2, r3, [sp]
 801898c:	f7ef fff2 	bl	8008974 <__aeabi_dcmpge>
 8018990:	464f      	mov	r7, r9
 8018992:	464e      	mov	r6, r9
 8018994:	2800      	cmp	r0, #0
 8018996:	f040 8234 	bne.w	8018e02 <_dtoa_r+0x8f2>
 801899a:	2331      	movs	r3, #49	; 0x31
 801899c:	f10b 0501 	add.w	r5, fp, #1
 80189a0:	f88b 3000 	strb.w	r3, [fp]
 80189a4:	f10a 0a01 	add.w	sl, sl, #1
 80189a8:	e22f      	b.n	8018e0a <_dtoa_r+0x8fa>
 80189aa:	07f2      	lsls	r2, r6, #31
 80189ac:	d505      	bpl.n	80189ba <_dtoa_r+0x4aa>
 80189ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80189b2:	f7ef fd59 	bl	8008468 <__aeabi_dmul>
 80189b6:	3501      	adds	r5, #1
 80189b8:	2301      	movs	r3, #1
 80189ba:	1076      	asrs	r6, r6, #1
 80189bc:	3708      	adds	r7, #8
 80189be:	e772      	b.n	80188a6 <_dtoa_r+0x396>
 80189c0:	2502      	movs	r5, #2
 80189c2:	e774      	b.n	80188ae <_dtoa_r+0x39e>
 80189c4:	f8cd a020 	str.w	sl, [sp, #32]
 80189c8:	464f      	mov	r7, r9
 80189ca:	e791      	b.n	80188f0 <_dtoa_r+0x3e0>
 80189cc:	4b4d      	ldr	r3, [pc, #308]	; (8018b04 <_dtoa_r+0x5f4>)
 80189ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80189d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80189d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d047      	beq.n	8018a6c <_dtoa_r+0x55c>
 80189dc:	4602      	mov	r2, r0
 80189de:	460b      	mov	r3, r1
 80189e0:	2000      	movs	r0, #0
 80189e2:	494e      	ldr	r1, [pc, #312]	; (8018b1c <_dtoa_r+0x60c>)
 80189e4:	f7ef fe6a 	bl	80086bc <__aeabi_ddiv>
 80189e8:	462a      	mov	r2, r5
 80189ea:	4633      	mov	r3, r6
 80189ec:	f7ef fb84 	bl	80080f8 <__aeabi_dsub>
 80189f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80189f4:	465d      	mov	r5, fp
 80189f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80189fa:	f7ef ffe5 	bl	80089c8 <__aeabi_d2iz>
 80189fe:	4606      	mov	r6, r0
 8018a00:	f7ef fcc8 	bl	8008394 <__aeabi_i2d>
 8018a04:	4602      	mov	r2, r0
 8018a06:	460b      	mov	r3, r1
 8018a08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018a0c:	f7ef fb74 	bl	80080f8 <__aeabi_dsub>
 8018a10:	3630      	adds	r6, #48	; 0x30
 8018a12:	f805 6b01 	strb.w	r6, [r5], #1
 8018a16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018a1a:	e9cd 0100 	strd	r0, r1, [sp]
 8018a1e:	f7ef ff95 	bl	800894c <__aeabi_dcmplt>
 8018a22:	2800      	cmp	r0, #0
 8018a24:	d163      	bne.n	8018aee <_dtoa_r+0x5de>
 8018a26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018a2a:	2000      	movs	r0, #0
 8018a2c:	4937      	ldr	r1, [pc, #220]	; (8018b0c <_dtoa_r+0x5fc>)
 8018a2e:	f7ef fb63 	bl	80080f8 <__aeabi_dsub>
 8018a32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018a36:	f7ef ff89 	bl	800894c <__aeabi_dcmplt>
 8018a3a:	2800      	cmp	r0, #0
 8018a3c:	f040 80b7 	bne.w	8018bae <_dtoa_r+0x69e>
 8018a40:	eba5 030b 	sub.w	r3, r5, fp
 8018a44:	429f      	cmp	r7, r3
 8018a46:	f77f af7c 	ble.w	8018942 <_dtoa_r+0x432>
 8018a4a:	2200      	movs	r2, #0
 8018a4c:	4b30      	ldr	r3, [pc, #192]	; (8018b10 <_dtoa_r+0x600>)
 8018a4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018a52:	f7ef fd09 	bl	8008468 <__aeabi_dmul>
 8018a56:	2200      	movs	r2, #0
 8018a58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018a5c:	4b2c      	ldr	r3, [pc, #176]	; (8018b10 <_dtoa_r+0x600>)
 8018a5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018a62:	f7ef fd01 	bl	8008468 <__aeabi_dmul>
 8018a66:	e9cd 0100 	strd	r0, r1, [sp]
 8018a6a:	e7c4      	b.n	80189f6 <_dtoa_r+0x4e6>
 8018a6c:	462a      	mov	r2, r5
 8018a6e:	4633      	mov	r3, r6
 8018a70:	f7ef fcfa 	bl	8008468 <__aeabi_dmul>
 8018a74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018a78:	eb0b 0507 	add.w	r5, fp, r7
 8018a7c:	465e      	mov	r6, fp
 8018a7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018a82:	f7ef ffa1 	bl	80089c8 <__aeabi_d2iz>
 8018a86:	4607      	mov	r7, r0
 8018a88:	f7ef fc84 	bl	8008394 <__aeabi_i2d>
 8018a8c:	3730      	adds	r7, #48	; 0x30
 8018a8e:	4602      	mov	r2, r0
 8018a90:	460b      	mov	r3, r1
 8018a92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018a96:	f7ef fb2f 	bl	80080f8 <__aeabi_dsub>
 8018a9a:	f806 7b01 	strb.w	r7, [r6], #1
 8018a9e:	42ae      	cmp	r6, r5
 8018aa0:	e9cd 0100 	strd	r0, r1, [sp]
 8018aa4:	f04f 0200 	mov.w	r2, #0
 8018aa8:	d126      	bne.n	8018af8 <_dtoa_r+0x5e8>
 8018aaa:	4b1c      	ldr	r3, [pc, #112]	; (8018b1c <_dtoa_r+0x60c>)
 8018aac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018ab0:	f7ef fb24 	bl	80080fc <__adddf3>
 8018ab4:	4602      	mov	r2, r0
 8018ab6:	460b      	mov	r3, r1
 8018ab8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018abc:	f7ef ff64 	bl	8008988 <__aeabi_dcmpgt>
 8018ac0:	2800      	cmp	r0, #0
 8018ac2:	d174      	bne.n	8018bae <_dtoa_r+0x69e>
 8018ac4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018ac8:	2000      	movs	r0, #0
 8018aca:	4914      	ldr	r1, [pc, #80]	; (8018b1c <_dtoa_r+0x60c>)
 8018acc:	f7ef fb14 	bl	80080f8 <__aeabi_dsub>
 8018ad0:	4602      	mov	r2, r0
 8018ad2:	460b      	mov	r3, r1
 8018ad4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018ad8:	f7ef ff38 	bl	800894c <__aeabi_dcmplt>
 8018adc:	2800      	cmp	r0, #0
 8018ade:	f43f af30 	beq.w	8018942 <_dtoa_r+0x432>
 8018ae2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018ae6:	2b30      	cmp	r3, #48	; 0x30
 8018ae8:	f105 32ff 	add.w	r2, r5, #4294967295
 8018aec:	d002      	beq.n	8018af4 <_dtoa_r+0x5e4>
 8018aee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018af2:	e04a      	b.n	8018b8a <_dtoa_r+0x67a>
 8018af4:	4615      	mov	r5, r2
 8018af6:	e7f4      	b.n	8018ae2 <_dtoa_r+0x5d2>
 8018af8:	4b05      	ldr	r3, [pc, #20]	; (8018b10 <_dtoa_r+0x600>)
 8018afa:	f7ef fcb5 	bl	8008468 <__aeabi_dmul>
 8018afe:	e9cd 0100 	strd	r0, r1, [sp]
 8018b02:	e7bc      	b.n	8018a7e <_dtoa_r+0x56e>
 8018b04:	0801b9c8 	.word	0x0801b9c8
 8018b08:	0801b9a0 	.word	0x0801b9a0
 8018b0c:	3ff00000 	.word	0x3ff00000
 8018b10:	40240000 	.word	0x40240000
 8018b14:	401c0000 	.word	0x401c0000
 8018b18:	40140000 	.word	0x40140000
 8018b1c:	3fe00000 	.word	0x3fe00000
 8018b20:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018b24:	465d      	mov	r5, fp
 8018b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018b2a:	4630      	mov	r0, r6
 8018b2c:	4639      	mov	r1, r7
 8018b2e:	f7ef fdc5 	bl	80086bc <__aeabi_ddiv>
 8018b32:	f7ef ff49 	bl	80089c8 <__aeabi_d2iz>
 8018b36:	4680      	mov	r8, r0
 8018b38:	f7ef fc2c 	bl	8008394 <__aeabi_i2d>
 8018b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018b40:	f7ef fc92 	bl	8008468 <__aeabi_dmul>
 8018b44:	4602      	mov	r2, r0
 8018b46:	460b      	mov	r3, r1
 8018b48:	4630      	mov	r0, r6
 8018b4a:	4639      	mov	r1, r7
 8018b4c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8018b50:	f7ef fad2 	bl	80080f8 <__aeabi_dsub>
 8018b54:	f805 6b01 	strb.w	r6, [r5], #1
 8018b58:	eba5 060b 	sub.w	r6, r5, fp
 8018b5c:	45b1      	cmp	r9, r6
 8018b5e:	4602      	mov	r2, r0
 8018b60:	460b      	mov	r3, r1
 8018b62:	d139      	bne.n	8018bd8 <_dtoa_r+0x6c8>
 8018b64:	f7ef faca 	bl	80080fc <__adddf3>
 8018b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018b6c:	4606      	mov	r6, r0
 8018b6e:	460f      	mov	r7, r1
 8018b70:	f7ef ff0a 	bl	8008988 <__aeabi_dcmpgt>
 8018b74:	b9c8      	cbnz	r0, 8018baa <_dtoa_r+0x69a>
 8018b76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018b7a:	4630      	mov	r0, r6
 8018b7c:	4639      	mov	r1, r7
 8018b7e:	f7ef fedb 	bl	8008938 <__aeabi_dcmpeq>
 8018b82:	b110      	cbz	r0, 8018b8a <_dtoa_r+0x67a>
 8018b84:	f018 0f01 	tst.w	r8, #1
 8018b88:	d10f      	bne.n	8018baa <_dtoa_r+0x69a>
 8018b8a:	9904      	ldr	r1, [sp, #16]
 8018b8c:	4620      	mov	r0, r4
 8018b8e:	f001 f819 	bl	8019bc4 <_Bfree>
 8018b92:	2300      	movs	r3, #0
 8018b94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018b96:	702b      	strb	r3, [r5, #0]
 8018b98:	f10a 0301 	add.w	r3, sl, #1
 8018b9c:	6013      	str	r3, [r2, #0]
 8018b9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	f000 8241 	beq.w	8019028 <_dtoa_r+0xb18>
 8018ba6:	601d      	str	r5, [r3, #0]
 8018ba8:	e23e      	b.n	8019028 <_dtoa_r+0xb18>
 8018baa:	f8cd a020 	str.w	sl, [sp, #32]
 8018bae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018bb2:	2a39      	cmp	r2, #57	; 0x39
 8018bb4:	f105 33ff 	add.w	r3, r5, #4294967295
 8018bb8:	d108      	bne.n	8018bcc <_dtoa_r+0x6bc>
 8018bba:	459b      	cmp	fp, r3
 8018bbc:	d10a      	bne.n	8018bd4 <_dtoa_r+0x6c4>
 8018bbe:	9b08      	ldr	r3, [sp, #32]
 8018bc0:	3301      	adds	r3, #1
 8018bc2:	9308      	str	r3, [sp, #32]
 8018bc4:	2330      	movs	r3, #48	; 0x30
 8018bc6:	f88b 3000 	strb.w	r3, [fp]
 8018bca:	465b      	mov	r3, fp
 8018bcc:	781a      	ldrb	r2, [r3, #0]
 8018bce:	3201      	adds	r2, #1
 8018bd0:	701a      	strb	r2, [r3, #0]
 8018bd2:	e78c      	b.n	8018aee <_dtoa_r+0x5de>
 8018bd4:	461d      	mov	r5, r3
 8018bd6:	e7ea      	b.n	8018bae <_dtoa_r+0x69e>
 8018bd8:	2200      	movs	r2, #0
 8018bda:	4b9b      	ldr	r3, [pc, #620]	; (8018e48 <_dtoa_r+0x938>)
 8018bdc:	f7ef fc44 	bl	8008468 <__aeabi_dmul>
 8018be0:	2200      	movs	r2, #0
 8018be2:	2300      	movs	r3, #0
 8018be4:	4606      	mov	r6, r0
 8018be6:	460f      	mov	r7, r1
 8018be8:	f7ef fea6 	bl	8008938 <__aeabi_dcmpeq>
 8018bec:	2800      	cmp	r0, #0
 8018bee:	d09a      	beq.n	8018b26 <_dtoa_r+0x616>
 8018bf0:	e7cb      	b.n	8018b8a <_dtoa_r+0x67a>
 8018bf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018bf4:	2a00      	cmp	r2, #0
 8018bf6:	f000 808b 	beq.w	8018d10 <_dtoa_r+0x800>
 8018bfa:	9a06      	ldr	r2, [sp, #24]
 8018bfc:	2a01      	cmp	r2, #1
 8018bfe:	dc6e      	bgt.n	8018cde <_dtoa_r+0x7ce>
 8018c00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018c02:	2a00      	cmp	r2, #0
 8018c04:	d067      	beq.n	8018cd6 <_dtoa_r+0x7c6>
 8018c06:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018c0a:	9f07      	ldr	r7, [sp, #28]
 8018c0c:	9d05      	ldr	r5, [sp, #20]
 8018c0e:	9a05      	ldr	r2, [sp, #20]
 8018c10:	2101      	movs	r1, #1
 8018c12:	441a      	add	r2, r3
 8018c14:	4620      	mov	r0, r4
 8018c16:	9205      	str	r2, [sp, #20]
 8018c18:	4498      	add	r8, r3
 8018c1a:	f001 f8b1 	bl	8019d80 <__i2b>
 8018c1e:	4606      	mov	r6, r0
 8018c20:	2d00      	cmp	r5, #0
 8018c22:	dd0c      	ble.n	8018c3e <_dtoa_r+0x72e>
 8018c24:	f1b8 0f00 	cmp.w	r8, #0
 8018c28:	dd09      	ble.n	8018c3e <_dtoa_r+0x72e>
 8018c2a:	4545      	cmp	r5, r8
 8018c2c:	9a05      	ldr	r2, [sp, #20]
 8018c2e:	462b      	mov	r3, r5
 8018c30:	bfa8      	it	ge
 8018c32:	4643      	movge	r3, r8
 8018c34:	1ad2      	subs	r2, r2, r3
 8018c36:	9205      	str	r2, [sp, #20]
 8018c38:	1aed      	subs	r5, r5, r3
 8018c3a:	eba8 0803 	sub.w	r8, r8, r3
 8018c3e:	9b07      	ldr	r3, [sp, #28]
 8018c40:	b1eb      	cbz	r3, 8018c7e <_dtoa_r+0x76e>
 8018c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d067      	beq.n	8018d18 <_dtoa_r+0x808>
 8018c48:	b18f      	cbz	r7, 8018c6e <_dtoa_r+0x75e>
 8018c4a:	4631      	mov	r1, r6
 8018c4c:	463a      	mov	r2, r7
 8018c4e:	4620      	mov	r0, r4
 8018c50:	f001 f936 	bl	8019ec0 <__pow5mult>
 8018c54:	9a04      	ldr	r2, [sp, #16]
 8018c56:	4601      	mov	r1, r0
 8018c58:	4606      	mov	r6, r0
 8018c5a:	4620      	mov	r0, r4
 8018c5c:	f001 f899 	bl	8019d92 <__multiply>
 8018c60:	9904      	ldr	r1, [sp, #16]
 8018c62:	9008      	str	r0, [sp, #32]
 8018c64:	4620      	mov	r0, r4
 8018c66:	f000 ffad 	bl	8019bc4 <_Bfree>
 8018c6a:	9b08      	ldr	r3, [sp, #32]
 8018c6c:	9304      	str	r3, [sp, #16]
 8018c6e:	9b07      	ldr	r3, [sp, #28]
 8018c70:	1bda      	subs	r2, r3, r7
 8018c72:	d004      	beq.n	8018c7e <_dtoa_r+0x76e>
 8018c74:	9904      	ldr	r1, [sp, #16]
 8018c76:	4620      	mov	r0, r4
 8018c78:	f001 f922 	bl	8019ec0 <__pow5mult>
 8018c7c:	9004      	str	r0, [sp, #16]
 8018c7e:	2101      	movs	r1, #1
 8018c80:	4620      	mov	r0, r4
 8018c82:	f001 f87d 	bl	8019d80 <__i2b>
 8018c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c88:	4607      	mov	r7, r0
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	f000 81d0 	beq.w	8019030 <_dtoa_r+0xb20>
 8018c90:	461a      	mov	r2, r3
 8018c92:	4601      	mov	r1, r0
 8018c94:	4620      	mov	r0, r4
 8018c96:	f001 f913 	bl	8019ec0 <__pow5mult>
 8018c9a:	9b06      	ldr	r3, [sp, #24]
 8018c9c:	2b01      	cmp	r3, #1
 8018c9e:	4607      	mov	r7, r0
 8018ca0:	dc40      	bgt.n	8018d24 <_dtoa_r+0x814>
 8018ca2:	9b00      	ldr	r3, [sp, #0]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d139      	bne.n	8018d1c <_dtoa_r+0x80c>
 8018ca8:	9b01      	ldr	r3, [sp, #4]
 8018caa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d136      	bne.n	8018d20 <_dtoa_r+0x810>
 8018cb2:	9b01      	ldr	r3, [sp, #4]
 8018cb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018cb8:	0d1b      	lsrs	r3, r3, #20
 8018cba:	051b      	lsls	r3, r3, #20
 8018cbc:	b12b      	cbz	r3, 8018cca <_dtoa_r+0x7ba>
 8018cbe:	9b05      	ldr	r3, [sp, #20]
 8018cc0:	3301      	adds	r3, #1
 8018cc2:	9305      	str	r3, [sp, #20]
 8018cc4:	f108 0801 	add.w	r8, r8, #1
 8018cc8:	2301      	movs	r3, #1
 8018cca:	9307      	str	r3, [sp, #28]
 8018ccc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d12a      	bne.n	8018d28 <_dtoa_r+0x818>
 8018cd2:	2001      	movs	r0, #1
 8018cd4:	e030      	b.n	8018d38 <_dtoa_r+0x828>
 8018cd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018cd8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018cdc:	e795      	b.n	8018c0a <_dtoa_r+0x6fa>
 8018cde:	9b07      	ldr	r3, [sp, #28]
 8018ce0:	f109 37ff 	add.w	r7, r9, #4294967295
 8018ce4:	42bb      	cmp	r3, r7
 8018ce6:	bfbf      	itttt	lt
 8018ce8:	9b07      	ldrlt	r3, [sp, #28]
 8018cea:	9707      	strlt	r7, [sp, #28]
 8018cec:	1afa      	sublt	r2, r7, r3
 8018cee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8018cf0:	bfbb      	ittet	lt
 8018cf2:	189b      	addlt	r3, r3, r2
 8018cf4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018cf6:	1bdf      	subge	r7, r3, r7
 8018cf8:	2700      	movlt	r7, #0
 8018cfa:	f1b9 0f00 	cmp.w	r9, #0
 8018cfe:	bfb5      	itete	lt
 8018d00:	9b05      	ldrlt	r3, [sp, #20]
 8018d02:	9d05      	ldrge	r5, [sp, #20]
 8018d04:	eba3 0509 	sublt.w	r5, r3, r9
 8018d08:	464b      	movge	r3, r9
 8018d0a:	bfb8      	it	lt
 8018d0c:	2300      	movlt	r3, #0
 8018d0e:	e77e      	b.n	8018c0e <_dtoa_r+0x6fe>
 8018d10:	9f07      	ldr	r7, [sp, #28]
 8018d12:	9d05      	ldr	r5, [sp, #20]
 8018d14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8018d16:	e783      	b.n	8018c20 <_dtoa_r+0x710>
 8018d18:	9a07      	ldr	r2, [sp, #28]
 8018d1a:	e7ab      	b.n	8018c74 <_dtoa_r+0x764>
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	e7d4      	b.n	8018cca <_dtoa_r+0x7ba>
 8018d20:	9b00      	ldr	r3, [sp, #0]
 8018d22:	e7d2      	b.n	8018cca <_dtoa_r+0x7ba>
 8018d24:	2300      	movs	r3, #0
 8018d26:	9307      	str	r3, [sp, #28]
 8018d28:	693b      	ldr	r3, [r7, #16]
 8018d2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8018d2e:	6918      	ldr	r0, [r3, #16]
 8018d30:	f000 ffd8 	bl	8019ce4 <__hi0bits>
 8018d34:	f1c0 0020 	rsb	r0, r0, #32
 8018d38:	4440      	add	r0, r8
 8018d3a:	f010 001f 	ands.w	r0, r0, #31
 8018d3e:	d047      	beq.n	8018dd0 <_dtoa_r+0x8c0>
 8018d40:	f1c0 0320 	rsb	r3, r0, #32
 8018d44:	2b04      	cmp	r3, #4
 8018d46:	dd3b      	ble.n	8018dc0 <_dtoa_r+0x8b0>
 8018d48:	9b05      	ldr	r3, [sp, #20]
 8018d4a:	f1c0 001c 	rsb	r0, r0, #28
 8018d4e:	4403      	add	r3, r0
 8018d50:	9305      	str	r3, [sp, #20]
 8018d52:	4405      	add	r5, r0
 8018d54:	4480      	add	r8, r0
 8018d56:	9b05      	ldr	r3, [sp, #20]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	dd05      	ble.n	8018d68 <_dtoa_r+0x858>
 8018d5c:	461a      	mov	r2, r3
 8018d5e:	9904      	ldr	r1, [sp, #16]
 8018d60:	4620      	mov	r0, r4
 8018d62:	f001 f8fb 	bl	8019f5c <__lshift>
 8018d66:	9004      	str	r0, [sp, #16]
 8018d68:	f1b8 0f00 	cmp.w	r8, #0
 8018d6c:	dd05      	ble.n	8018d7a <_dtoa_r+0x86a>
 8018d6e:	4639      	mov	r1, r7
 8018d70:	4642      	mov	r2, r8
 8018d72:	4620      	mov	r0, r4
 8018d74:	f001 f8f2 	bl	8019f5c <__lshift>
 8018d78:	4607      	mov	r7, r0
 8018d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018d7c:	b353      	cbz	r3, 8018dd4 <_dtoa_r+0x8c4>
 8018d7e:	4639      	mov	r1, r7
 8018d80:	9804      	ldr	r0, [sp, #16]
 8018d82:	f001 f93f 	bl	801a004 <__mcmp>
 8018d86:	2800      	cmp	r0, #0
 8018d88:	da24      	bge.n	8018dd4 <_dtoa_r+0x8c4>
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	220a      	movs	r2, #10
 8018d8e:	9904      	ldr	r1, [sp, #16]
 8018d90:	4620      	mov	r0, r4
 8018d92:	f000 ff2e 	bl	8019bf2 <__multadd>
 8018d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d98:	9004      	str	r0, [sp, #16]
 8018d9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	f000 814d 	beq.w	801903e <_dtoa_r+0xb2e>
 8018da4:	2300      	movs	r3, #0
 8018da6:	4631      	mov	r1, r6
 8018da8:	220a      	movs	r2, #10
 8018daa:	4620      	mov	r0, r4
 8018dac:	f000 ff21 	bl	8019bf2 <__multadd>
 8018db0:	9b02      	ldr	r3, [sp, #8]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	4606      	mov	r6, r0
 8018db6:	dc4f      	bgt.n	8018e58 <_dtoa_r+0x948>
 8018db8:	9b06      	ldr	r3, [sp, #24]
 8018dba:	2b02      	cmp	r3, #2
 8018dbc:	dd4c      	ble.n	8018e58 <_dtoa_r+0x948>
 8018dbe:	e011      	b.n	8018de4 <_dtoa_r+0x8d4>
 8018dc0:	d0c9      	beq.n	8018d56 <_dtoa_r+0x846>
 8018dc2:	9a05      	ldr	r2, [sp, #20]
 8018dc4:	331c      	adds	r3, #28
 8018dc6:	441a      	add	r2, r3
 8018dc8:	9205      	str	r2, [sp, #20]
 8018dca:	441d      	add	r5, r3
 8018dcc:	4498      	add	r8, r3
 8018dce:	e7c2      	b.n	8018d56 <_dtoa_r+0x846>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	e7f6      	b.n	8018dc2 <_dtoa_r+0x8b2>
 8018dd4:	f1b9 0f00 	cmp.w	r9, #0
 8018dd8:	dc38      	bgt.n	8018e4c <_dtoa_r+0x93c>
 8018dda:	9b06      	ldr	r3, [sp, #24]
 8018ddc:	2b02      	cmp	r3, #2
 8018dde:	dd35      	ble.n	8018e4c <_dtoa_r+0x93c>
 8018de0:	f8cd 9008 	str.w	r9, [sp, #8]
 8018de4:	9b02      	ldr	r3, [sp, #8]
 8018de6:	b963      	cbnz	r3, 8018e02 <_dtoa_r+0x8f2>
 8018de8:	4639      	mov	r1, r7
 8018dea:	2205      	movs	r2, #5
 8018dec:	4620      	mov	r0, r4
 8018dee:	f000 ff00 	bl	8019bf2 <__multadd>
 8018df2:	4601      	mov	r1, r0
 8018df4:	4607      	mov	r7, r0
 8018df6:	9804      	ldr	r0, [sp, #16]
 8018df8:	f001 f904 	bl	801a004 <__mcmp>
 8018dfc:	2800      	cmp	r0, #0
 8018dfe:	f73f adcc 	bgt.w	801899a <_dtoa_r+0x48a>
 8018e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e04:	465d      	mov	r5, fp
 8018e06:	ea6f 0a03 	mvn.w	sl, r3
 8018e0a:	f04f 0900 	mov.w	r9, #0
 8018e0e:	4639      	mov	r1, r7
 8018e10:	4620      	mov	r0, r4
 8018e12:	f000 fed7 	bl	8019bc4 <_Bfree>
 8018e16:	2e00      	cmp	r6, #0
 8018e18:	f43f aeb7 	beq.w	8018b8a <_dtoa_r+0x67a>
 8018e1c:	f1b9 0f00 	cmp.w	r9, #0
 8018e20:	d005      	beq.n	8018e2e <_dtoa_r+0x91e>
 8018e22:	45b1      	cmp	r9, r6
 8018e24:	d003      	beq.n	8018e2e <_dtoa_r+0x91e>
 8018e26:	4649      	mov	r1, r9
 8018e28:	4620      	mov	r0, r4
 8018e2a:	f000 fecb 	bl	8019bc4 <_Bfree>
 8018e2e:	4631      	mov	r1, r6
 8018e30:	4620      	mov	r0, r4
 8018e32:	f000 fec7 	bl	8019bc4 <_Bfree>
 8018e36:	e6a8      	b.n	8018b8a <_dtoa_r+0x67a>
 8018e38:	2700      	movs	r7, #0
 8018e3a:	463e      	mov	r6, r7
 8018e3c:	e7e1      	b.n	8018e02 <_dtoa_r+0x8f2>
 8018e3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018e42:	463e      	mov	r6, r7
 8018e44:	e5a9      	b.n	801899a <_dtoa_r+0x48a>
 8018e46:	bf00      	nop
 8018e48:	40240000 	.word	0x40240000
 8018e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	f000 80fa 	beq.w	801904c <_dtoa_r+0xb3c>
 8018e58:	2d00      	cmp	r5, #0
 8018e5a:	dd05      	ble.n	8018e68 <_dtoa_r+0x958>
 8018e5c:	4631      	mov	r1, r6
 8018e5e:	462a      	mov	r2, r5
 8018e60:	4620      	mov	r0, r4
 8018e62:	f001 f87b 	bl	8019f5c <__lshift>
 8018e66:	4606      	mov	r6, r0
 8018e68:	9b07      	ldr	r3, [sp, #28]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d04c      	beq.n	8018f08 <_dtoa_r+0x9f8>
 8018e6e:	6871      	ldr	r1, [r6, #4]
 8018e70:	4620      	mov	r0, r4
 8018e72:	f000 fe73 	bl	8019b5c <_Balloc>
 8018e76:	6932      	ldr	r2, [r6, #16]
 8018e78:	3202      	adds	r2, #2
 8018e7a:	4605      	mov	r5, r0
 8018e7c:	0092      	lsls	r2, r2, #2
 8018e7e:	f106 010c 	add.w	r1, r6, #12
 8018e82:	300c      	adds	r0, #12
 8018e84:	f7fd fb84 	bl	8016590 <memcpy>
 8018e88:	2201      	movs	r2, #1
 8018e8a:	4629      	mov	r1, r5
 8018e8c:	4620      	mov	r0, r4
 8018e8e:	f001 f865 	bl	8019f5c <__lshift>
 8018e92:	9b00      	ldr	r3, [sp, #0]
 8018e94:	f8cd b014 	str.w	fp, [sp, #20]
 8018e98:	f003 0301 	and.w	r3, r3, #1
 8018e9c:	46b1      	mov	r9, r6
 8018e9e:	9307      	str	r3, [sp, #28]
 8018ea0:	4606      	mov	r6, r0
 8018ea2:	4639      	mov	r1, r7
 8018ea4:	9804      	ldr	r0, [sp, #16]
 8018ea6:	f7ff faa5 	bl	80183f4 <quorem>
 8018eaa:	4649      	mov	r1, r9
 8018eac:	4605      	mov	r5, r0
 8018eae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018eb2:	9804      	ldr	r0, [sp, #16]
 8018eb4:	f001 f8a6 	bl	801a004 <__mcmp>
 8018eb8:	4632      	mov	r2, r6
 8018eba:	9000      	str	r0, [sp, #0]
 8018ebc:	4639      	mov	r1, r7
 8018ebe:	4620      	mov	r0, r4
 8018ec0:	f001 f8ba 	bl	801a038 <__mdiff>
 8018ec4:	68c3      	ldr	r3, [r0, #12]
 8018ec6:	4602      	mov	r2, r0
 8018ec8:	bb03      	cbnz	r3, 8018f0c <_dtoa_r+0x9fc>
 8018eca:	4601      	mov	r1, r0
 8018ecc:	9008      	str	r0, [sp, #32]
 8018ece:	9804      	ldr	r0, [sp, #16]
 8018ed0:	f001 f898 	bl	801a004 <__mcmp>
 8018ed4:	9a08      	ldr	r2, [sp, #32]
 8018ed6:	4603      	mov	r3, r0
 8018ed8:	4611      	mov	r1, r2
 8018eda:	4620      	mov	r0, r4
 8018edc:	9308      	str	r3, [sp, #32]
 8018ede:	f000 fe71 	bl	8019bc4 <_Bfree>
 8018ee2:	9b08      	ldr	r3, [sp, #32]
 8018ee4:	b9a3      	cbnz	r3, 8018f10 <_dtoa_r+0xa00>
 8018ee6:	9a06      	ldr	r2, [sp, #24]
 8018ee8:	b992      	cbnz	r2, 8018f10 <_dtoa_r+0xa00>
 8018eea:	9a07      	ldr	r2, [sp, #28]
 8018eec:	b982      	cbnz	r2, 8018f10 <_dtoa_r+0xa00>
 8018eee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018ef2:	d029      	beq.n	8018f48 <_dtoa_r+0xa38>
 8018ef4:	9b00      	ldr	r3, [sp, #0]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	dd01      	ble.n	8018efe <_dtoa_r+0x9ee>
 8018efa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8018efe:	9b05      	ldr	r3, [sp, #20]
 8018f00:	1c5d      	adds	r5, r3, #1
 8018f02:	f883 8000 	strb.w	r8, [r3]
 8018f06:	e782      	b.n	8018e0e <_dtoa_r+0x8fe>
 8018f08:	4630      	mov	r0, r6
 8018f0a:	e7c2      	b.n	8018e92 <_dtoa_r+0x982>
 8018f0c:	2301      	movs	r3, #1
 8018f0e:	e7e3      	b.n	8018ed8 <_dtoa_r+0x9c8>
 8018f10:	9a00      	ldr	r2, [sp, #0]
 8018f12:	2a00      	cmp	r2, #0
 8018f14:	db04      	blt.n	8018f20 <_dtoa_r+0xa10>
 8018f16:	d125      	bne.n	8018f64 <_dtoa_r+0xa54>
 8018f18:	9a06      	ldr	r2, [sp, #24]
 8018f1a:	bb1a      	cbnz	r2, 8018f64 <_dtoa_r+0xa54>
 8018f1c:	9a07      	ldr	r2, [sp, #28]
 8018f1e:	bb0a      	cbnz	r2, 8018f64 <_dtoa_r+0xa54>
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	ddec      	ble.n	8018efe <_dtoa_r+0x9ee>
 8018f24:	2201      	movs	r2, #1
 8018f26:	9904      	ldr	r1, [sp, #16]
 8018f28:	4620      	mov	r0, r4
 8018f2a:	f001 f817 	bl	8019f5c <__lshift>
 8018f2e:	4639      	mov	r1, r7
 8018f30:	9004      	str	r0, [sp, #16]
 8018f32:	f001 f867 	bl	801a004 <__mcmp>
 8018f36:	2800      	cmp	r0, #0
 8018f38:	dc03      	bgt.n	8018f42 <_dtoa_r+0xa32>
 8018f3a:	d1e0      	bne.n	8018efe <_dtoa_r+0x9ee>
 8018f3c:	f018 0f01 	tst.w	r8, #1
 8018f40:	d0dd      	beq.n	8018efe <_dtoa_r+0x9ee>
 8018f42:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018f46:	d1d8      	bne.n	8018efa <_dtoa_r+0x9ea>
 8018f48:	9b05      	ldr	r3, [sp, #20]
 8018f4a:	9a05      	ldr	r2, [sp, #20]
 8018f4c:	1c5d      	adds	r5, r3, #1
 8018f4e:	2339      	movs	r3, #57	; 0x39
 8018f50:	7013      	strb	r3, [r2, #0]
 8018f52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018f56:	2b39      	cmp	r3, #57	; 0x39
 8018f58:	f105 32ff 	add.w	r2, r5, #4294967295
 8018f5c:	d04f      	beq.n	8018ffe <_dtoa_r+0xaee>
 8018f5e:	3301      	adds	r3, #1
 8018f60:	7013      	strb	r3, [r2, #0]
 8018f62:	e754      	b.n	8018e0e <_dtoa_r+0x8fe>
 8018f64:	9a05      	ldr	r2, [sp, #20]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	f102 0501 	add.w	r5, r2, #1
 8018f6c:	dd06      	ble.n	8018f7c <_dtoa_r+0xa6c>
 8018f6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018f72:	d0e9      	beq.n	8018f48 <_dtoa_r+0xa38>
 8018f74:	f108 0801 	add.w	r8, r8, #1
 8018f78:	9b05      	ldr	r3, [sp, #20]
 8018f7a:	e7c2      	b.n	8018f02 <_dtoa_r+0x9f2>
 8018f7c:	9a02      	ldr	r2, [sp, #8]
 8018f7e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018f82:	eba5 030b 	sub.w	r3, r5, fp
 8018f86:	4293      	cmp	r3, r2
 8018f88:	d021      	beq.n	8018fce <_dtoa_r+0xabe>
 8018f8a:	2300      	movs	r3, #0
 8018f8c:	220a      	movs	r2, #10
 8018f8e:	9904      	ldr	r1, [sp, #16]
 8018f90:	4620      	mov	r0, r4
 8018f92:	f000 fe2e 	bl	8019bf2 <__multadd>
 8018f96:	45b1      	cmp	r9, r6
 8018f98:	9004      	str	r0, [sp, #16]
 8018f9a:	f04f 0300 	mov.w	r3, #0
 8018f9e:	f04f 020a 	mov.w	r2, #10
 8018fa2:	4649      	mov	r1, r9
 8018fa4:	4620      	mov	r0, r4
 8018fa6:	d105      	bne.n	8018fb4 <_dtoa_r+0xaa4>
 8018fa8:	f000 fe23 	bl	8019bf2 <__multadd>
 8018fac:	4681      	mov	r9, r0
 8018fae:	4606      	mov	r6, r0
 8018fb0:	9505      	str	r5, [sp, #20]
 8018fb2:	e776      	b.n	8018ea2 <_dtoa_r+0x992>
 8018fb4:	f000 fe1d 	bl	8019bf2 <__multadd>
 8018fb8:	4631      	mov	r1, r6
 8018fba:	4681      	mov	r9, r0
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	220a      	movs	r2, #10
 8018fc0:	4620      	mov	r0, r4
 8018fc2:	f000 fe16 	bl	8019bf2 <__multadd>
 8018fc6:	4606      	mov	r6, r0
 8018fc8:	e7f2      	b.n	8018fb0 <_dtoa_r+0xaa0>
 8018fca:	f04f 0900 	mov.w	r9, #0
 8018fce:	2201      	movs	r2, #1
 8018fd0:	9904      	ldr	r1, [sp, #16]
 8018fd2:	4620      	mov	r0, r4
 8018fd4:	f000 ffc2 	bl	8019f5c <__lshift>
 8018fd8:	4639      	mov	r1, r7
 8018fda:	9004      	str	r0, [sp, #16]
 8018fdc:	f001 f812 	bl	801a004 <__mcmp>
 8018fe0:	2800      	cmp	r0, #0
 8018fe2:	dcb6      	bgt.n	8018f52 <_dtoa_r+0xa42>
 8018fe4:	d102      	bne.n	8018fec <_dtoa_r+0xadc>
 8018fe6:	f018 0f01 	tst.w	r8, #1
 8018fea:	d1b2      	bne.n	8018f52 <_dtoa_r+0xa42>
 8018fec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018ff0:	2b30      	cmp	r3, #48	; 0x30
 8018ff2:	f105 32ff 	add.w	r2, r5, #4294967295
 8018ff6:	f47f af0a 	bne.w	8018e0e <_dtoa_r+0x8fe>
 8018ffa:	4615      	mov	r5, r2
 8018ffc:	e7f6      	b.n	8018fec <_dtoa_r+0xadc>
 8018ffe:	4593      	cmp	fp, r2
 8019000:	d105      	bne.n	801900e <_dtoa_r+0xafe>
 8019002:	2331      	movs	r3, #49	; 0x31
 8019004:	f10a 0a01 	add.w	sl, sl, #1
 8019008:	f88b 3000 	strb.w	r3, [fp]
 801900c:	e6ff      	b.n	8018e0e <_dtoa_r+0x8fe>
 801900e:	4615      	mov	r5, r2
 8019010:	e79f      	b.n	8018f52 <_dtoa_r+0xa42>
 8019012:	f8df b064 	ldr.w	fp, [pc, #100]	; 8019078 <_dtoa_r+0xb68>
 8019016:	e007      	b.n	8019028 <_dtoa_r+0xb18>
 8019018:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801901a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801907c <_dtoa_r+0xb6c>
 801901e:	b11b      	cbz	r3, 8019028 <_dtoa_r+0xb18>
 8019020:	f10b 0308 	add.w	r3, fp, #8
 8019024:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019026:	6013      	str	r3, [r2, #0]
 8019028:	4658      	mov	r0, fp
 801902a:	b017      	add	sp, #92	; 0x5c
 801902c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019030:	9b06      	ldr	r3, [sp, #24]
 8019032:	2b01      	cmp	r3, #1
 8019034:	f77f ae35 	ble.w	8018ca2 <_dtoa_r+0x792>
 8019038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801903a:	9307      	str	r3, [sp, #28]
 801903c:	e649      	b.n	8018cd2 <_dtoa_r+0x7c2>
 801903e:	9b02      	ldr	r3, [sp, #8]
 8019040:	2b00      	cmp	r3, #0
 8019042:	dc03      	bgt.n	801904c <_dtoa_r+0xb3c>
 8019044:	9b06      	ldr	r3, [sp, #24]
 8019046:	2b02      	cmp	r3, #2
 8019048:	f73f aecc 	bgt.w	8018de4 <_dtoa_r+0x8d4>
 801904c:	465d      	mov	r5, fp
 801904e:	4639      	mov	r1, r7
 8019050:	9804      	ldr	r0, [sp, #16]
 8019052:	f7ff f9cf 	bl	80183f4 <quorem>
 8019056:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801905a:	f805 8b01 	strb.w	r8, [r5], #1
 801905e:	9a02      	ldr	r2, [sp, #8]
 8019060:	eba5 030b 	sub.w	r3, r5, fp
 8019064:	429a      	cmp	r2, r3
 8019066:	ddb0      	ble.n	8018fca <_dtoa_r+0xaba>
 8019068:	2300      	movs	r3, #0
 801906a:	220a      	movs	r2, #10
 801906c:	9904      	ldr	r1, [sp, #16]
 801906e:	4620      	mov	r0, r4
 8019070:	f000 fdbf 	bl	8019bf2 <__multadd>
 8019074:	9004      	str	r0, [sp, #16]
 8019076:	e7ea      	b.n	801904e <_dtoa_r+0xb3e>
 8019078:	0801bac3 	.word	0x0801bac3
 801907c:	0801b920 	.word	0x0801b920

08019080 <__sflush_r>:
 8019080:	898a      	ldrh	r2, [r1, #12]
 8019082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019086:	4605      	mov	r5, r0
 8019088:	0710      	lsls	r0, r2, #28
 801908a:	460c      	mov	r4, r1
 801908c:	d458      	bmi.n	8019140 <__sflush_r+0xc0>
 801908e:	684b      	ldr	r3, [r1, #4]
 8019090:	2b00      	cmp	r3, #0
 8019092:	dc05      	bgt.n	80190a0 <__sflush_r+0x20>
 8019094:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019096:	2b00      	cmp	r3, #0
 8019098:	dc02      	bgt.n	80190a0 <__sflush_r+0x20>
 801909a:	2000      	movs	r0, #0
 801909c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80190a2:	2e00      	cmp	r6, #0
 80190a4:	d0f9      	beq.n	801909a <__sflush_r+0x1a>
 80190a6:	2300      	movs	r3, #0
 80190a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80190ac:	682f      	ldr	r7, [r5, #0]
 80190ae:	6a21      	ldr	r1, [r4, #32]
 80190b0:	602b      	str	r3, [r5, #0]
 80190b2:	d032      	beq.n	801911a <__sflush_r+0x9a>
 80190b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80190b6:	89a3      	ldrh	r3, [r4, #12]
 80190b8:	075a      	lsls	r2, r3, #29
 80190ba:	d505      	bpl.n	80190c8 <__sflush_r+0x48>
 80190bc:	6863      	ldr	r3, [r4, #4]
 80190be:	1ac0      	subs	r0, r0, r3
 80190c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80190c2:	b10b      	cbz	r3, 80190c8 <__sflush_r+0x48>
 80190c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80190c6:	1ac0      	subs	r0, r0, r3
 80190c8:	2300      	movs	r3, #0
 80190ca:	4602      	mov	r2, r0
 80190cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80190ce:	6a21      	ldr	r1, [r4, #32]
 80190d0:	4628      	mov	r0, r5
 80190d2:	47b0      	blx	r6
 80190d4:	1c43      	adds	r3, r0, #1
 80190d6:	89a3      	ldrh	r3, [r4, #12]
 80190d8:	d106      	bne.n	80190e8 <__sflush_r+0x68>
 80190da:	6829      	ldr	r1, [r5, #0]
 80190dc:	291d      	cmp	r1, #29
 80190de:	d848      	bhi.n	8019172 <__sflush_r+0xf2>
 80190e0:	4a29      	ldr	r2, [pc, #164]	; (8019188 <__sflush_r+0x108>)
 80190e2:	40ca      	lsrs	r2, r1
 80190e4:	07d6      	lsls	r6, r2, #31
 80190e6:	d544      	bpl.n	8019172 <__sflush_r+0xf2>
 80190e8:	2200      	movs	r2, #0
 80190ea:	6062      	str	r2, [r4, #4]
 80190ec:	04d9      	lsls	r1, r3, #19
 80190ee:	6922      	ldr	r2, [r4, #16]
 80190f0:	6022      	str	r2, [r4, #0]
 80190f2:	d504      	bpl.n	80190fe <__sflush_r+0x7e>
 80190f4:	1c42      	adds	r2, r0, #1
 80190f6:	d101      	bne.n	80190fc <__sflush_r+0x7c>
 80190f8:	682b      	ldr	r3, [r5, #0]
 80190fa:	b903      	cbnz	r3, 80190fe <__sflush_r+0x7e>
 80190fc:	6560      	str	r0, [r4, #84]	; 0x54
 80190fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019100:	602f      	str	r7, [r5, #0]
 8019102:	2900      	cmp	r1, #0
 8019104:	d0c9      	beq.n	801909a <__sflush_r+0x1a>
 8019106:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801910a:	4299      	cmp	r1, r3
 801910c:	d002      	beq.n	8019114 <__sflush_r+0x94>
 801910e:	4628      	mov	r0, r5
 8019110:	f001 f932 	bl	801a378 <_free_r>
 8019114:	2000      	movs	r0, #0
 8019116:	6360      	str	r0, [r4, #52]	; 0x34
 8019118:	e7c0      	b.n	801909c <__sflush_r+0x1c>
 801911a:	2301      	movs	r3, #1
 801911c:	4628      	mov	r0, r5
 801911e:	47b0      	blx	r6
 8019120:	1c41      	adds	r1, r0, #1
 8019122:	d1c8      	bne.n	80190b6 <__sflush_r+0x36>
 8019124:	682b      	ldr	r3, [r5, #0]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d0c5      	beq.n	80190b6 <__sflush_r+0x36>
 801912a:	2b1d      	cmp	r3, #29
 801912c:	d001      	beq.n	8019132 <__sflush_r+0xb2>
 801912e:	2b16      	cmp	r3, #22
 8019130:	d101      	bne.n	8019136 <__sflush_r+0xb6>
 8019132:	602f      	str	r7, [r5, #0]
 8019134:	e7b1      	b.n	801909a <__sflush_r+0x1a>
 8019136:	89a3      	ldrh	r3, [r4, #12]
 8019138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801913c:	81a3      	strh	r3, [r4, #12]
 801913e:	e7ad      	b.n	801909c <__sflush_r+0x1c>
 8019140:	690f      	ldr	r7, [r1, #16]
 8019142:	2f00      	cmp	r7, #0
 8019144:	d0a9      	beq.n	801909a <__sflush_r+0x1a>
 8019146:	0793      	lsls	r3, r2, #30
 8019148:	680e      	ldr	r6, [r1, #0]
 801914a:	bf08      	it	eq
 801914c:	694b      	ldreq	r3, [r1, #20]
 801914e:	600f      	str	r7, [r1, #0]
 8019150:	bf18      	it	ne
 8019152:	2300      	movne	r3, #0
 8019154:	eba6 0807 	sub.w	r8, r6, r7
 8019158:	608b      	str	r3, [r1, #8]
 801915a:	f1b8 0f00 	cmp.w	r8, #0
 801915e:	dd9c      	ble.n	801909a <__sflush_r+0x1a>
 8019160:	4643      	mov	r3, r8
 8019162:	463a      	mov	r2, r7
 8019164:	6a21      	ldr	r1, [r4, #32]
 8019166:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019168:	4628      	mov	r0, r5
 801916a:	47b0      	blx	r6
 801916c:	2800      	cmp	r0, #0
 801916e:	dc06      	bgt.n	801917e <__sflush_r+0xfe>
 8019170:	89a3      	ldrh	r3, [r4, #12]
 8019172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019176:	81a3      	strh	r3, [r4, #12]
 8019178:	f04f 30ff 	mov.w	r0, #4294967295
 801917c:	e78e      	b.n	801909c <__sflush_r+0x1c>
 801917e:	4407      	add	r7, r0
 8019180:	eba8 0800 	sub.w	r8, r8, r0
 8019184:	e7e9      	b.n	801915a <__sflush_r+0xda>
 8019186:	bf00      	nop
 8019188:	20400001 	.word	0x20400001

0801918c <_fflush_r>:
 801918c:	b538      	push	{r3, r4, r5, lr}
 801918e:	690b      	ldr	r3, [r1, #16]
 8019190:	4605      	mov	r5, r0
 8019192:	460c      	mov	r4, r1
 8019194:	b1db      	cbz	r3, 80191ce <_fflush_r+0x42>
 8019196:	b118      	cbz	r0, 80191a0 <_fflush_r+0x14>
 8019198:	6983      	ldr	r3, [r0, #24]
 801919a:	b90b      	cbnz	r3, 80191a0 <_fflush_r+0x14>
 801919c:	f000 f872 	bl	8019284 <__sinit>
 80191a0:	4b0c      	ldr	r3, [pc, #48]	; (80191d4 <_fflush_r+0x48>)
 80191a2:	429c      	cmp	r4, r3
 80191a4:	d109      	bne.n	80191ba <_fflush_r+0x2e>
 80191a6:	686c      	ldr	r4, [r5, #4]
 80191a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80191ac:	b17b      	cbz	r3, 80191ce <_fflush_r+0x42>
 80191ae:	4621      	mov	r1, r4
 80191b0:	4628      	mov	r0, r5
 80191b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80191b6:	f7ff bf63 	b.w	8019080 <__sflush_r>
 80191ba:	4b07      	ldr	r3, [pc, #28]	; (80191d8 <_fflush_r+0x4c>)
 80191bc:	429c      	cmp	r4, r3
 80191be:	d101      	bne.n	80191c4 <_fflush_r+0x38>
 80191c0:	68ac      	ldr	r4, [r5, #8]
 80191c2:	e7f1      	b.n	80191a8 <_fflush_r+0x1c>
 80191c4:	4b05      	ldr	r3, [pc, #20]	; (80191dc <_fflush_r+0x50>)
 80191c6:	429c      	cmp	r4, r3
 80191c8:	bf08      	it	eq
 80191ca:	68ec      	ldreq	r4, [r5, #12]
 80191cc:	e7ec      	b.n	80191a8 <_fflush_r+0x1c>
 80191ce:	2000      	movs	r0, #0
 80191d0:	bd38      	pop	{r3, r4, r5, pc}
 80191d2:	bf00      	nop
 80191d4:	0801b950 	.word	0x0801b950
 80191d8:	0801b970 	.word	0x0801b970
 80191dc:	0801b930 	.word	0x0801b930

080191e0 <fflush>:
 80191e0:	4601      	mov	r1, r0
 80191e2:	b920      	cbnz	r0, 80191ee <fflush+0xe>
 80191e4:	4b04      	ldr	r3, [pc, #16]	; (80191f8 <fflush+0x18>)
 80191e6:	4905      	ldr	r1, [pc, #20]	; (80191fc <fflush+0x1c>)
 80191e8:	6818      	ldr	r0, [r3, #0]
 80191ea:	f000 b8d3 	b.w	8019394 <_fwalk_reent>
 80191ee:	4b04      	ldr	r3, [pc, #16]	; (8019200 <fflush+0x20>)
 80191f0:	6818      	ldr	r0, [r3, #0]
 80191f2:	f7ff bfcb 	b.w	801918c <_fflush_r>
 80191f6:	bf00      	nop
 80191f8:	0801b890 	.word	0x0801b890
 80191fc:	0801918d 	.word	0x0801918d
 8019200:	2000002c 	.word	0x2000002c

08019204 <std>:
 8019204:	2300      	movs	r3, #0
 8019206:	b510      	push	{r4, lr}
 8019208:	4604      	mov	r4, r0
 801920a:	e9c0 3300 	strd	r3, r3, [r0]
 801920e:	6083      	str	r3, [r0, #8]
 8019210:	8181      	strh	r1, [r0, #12]
 8019212:	6643      	str	r3, [r0, #100]	; 0x64
 8019214:	81c2      	strh	r2, [r0, #14]
 8019216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801921a:	6183      	str	r3, [r0, #24]
 801921c:	4619      	mov	r1, r3
 801921e:	2208      	movs	r2, #8
 8019220:	305c      	adds	r0, #92	; 0x5c
 8019222:	f7fd f9c0 	bl	80165a6 <memset>
 8019226:	4b05      	ldr	r3, [pc, #20]	; (801923c <std+0x38>)
 8019228:	6263      	str	r3, [r4, #36]	; 0x24
 801922a:	4b05      	ldr	r3, [pc, #20]	; (8019240 <std+0x3c>)
 801922c:	62a3      	str	r3, [r4, #40]	; 0x28
 801922e:	4b05      	ldr	r3, [pc, #20]	; (8019244 <std+0x40>)
 8019230:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019232:	4b05      	ldr	r3, [pc, #20]	; (8019248 <std+0x44>)
 8019234:	6224      	str	r4, [r4, #32]
 8019236:	6323      	str	r3, [r4, #48]	; 0x30
 8019238:	bd10      	pop	{r4, pc}
 801923a:	bf00      	nop
 801923c:	0801b13d 	.word	0x0801b13d
 8019240:	0801b15f 	.word	0x0801b15f
 8019244:	0801b197 	.word	0x0801b197
 8019248:	0801b1bb 	.word	0x0801b1bb

0801924c <_cleanup_r>:
 801924c:	4901      	ldr	r1, [pc, #4]	; (8019254 <_cleanup_r+0x8>)
 801924e:	f000 b8a1 	b.w	8019394 <_fwalk_reent>
 8019252:	bf00      	nop
 8019254:	0801918d 	.word	0x0801918d

08019258 <__sfmoreglue>:
 8019258:	b570      	push	{r4, r5, r6, lr}
 801925a:	1e4a      	subs	r2, r1, #1
 801925c:	2568      	movs	r5, #104	; 0x68
 801925e:	4355      	muls	r5, r2
 8019260:	460e      	mov	r6, r1
 8019262:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019266:	f001 f8d5 	bl	801a414 <_malloc_r>
 801926a:	4604      	mov	r4, r0
 801926c:	b140      	cbz	r0, 8019280 <__sfmoreglue+0x28>
 801926e:	2100      	movs	r1, #0
 8019270:	e9c0 1600 	strd	r1, r6, [r0]
 8019274:	300c      	adds	r0, #12
 8019276:	60a0      	str	r0, [r4, #8]
 8019278:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801927c:	f7fd f993 	bl	80165a6 <memset>
 8019280:	4620      	mov	r0, r4
 8019282:	bd70      	pop	{r4, r5, r6, pc}

08019284 <__sinit>:
 8019284:	6983      	ldr	r3, [r0, #24]
 8019286:	b510      	push	{r4, lr}
 8019288:	4604      	mov	r4, r0
 801928a:	bb33      	cbnz	r3, 80192da <__sinit+0x56>
 801928c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8019290:	6503      	str	r3, [r0, #80]	; 0x50
 8019292:	4b12      	ldr	r3, [pc, #72]	; (80192dc <__sinit+0x58>)
 8019294:	4a12      	ldr	r2, [pc, #72]	; (80192e0 <__sinit+0x5c>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	6282      	str	r2, [r0, #40]	; 0x28
 801929a:	4298      	cmp	r0, r3
 801929c:	bf04      	itt	eq
 801929e:	2301      	moveq	r3, #1
 80192a0:	6183      	streq	r3, [r0, #24]
 80192a2:	f000 f81f 	bl	80192e4 <__sfp>
 80192a6:	6060      	str	r0, [r4, #4]
 80192a8:	4620      	mov	r0, r4
 80192aa:	f000 f81b 	bl	80192e4 <__sfp>
 80192ae:	60a0      	str	r0, [r4, #8]
 80192b0:	4620      	mov	r0, r4
 80192b2:	f000 f817 	bl	80192e4 <__sfp>
 80192b6:	2200      	movs	r2, #0
 80192b8:	60e0      	str	r0, [r4, #12]
 80192ba:	2104      	movs	r1, #4
 80192bc:	6860      	ldr	r0, [r4, #4]
 80192be:	f7ff ffa1 	bl	8019204 <std>
 80192c2:	2201      	movs	r2, #1
 80192c4:	2109      	movs	r1, #9
 80192c6:	68a0      	ldr	r0, [r4, #8]
 80192c8:	f7ff ff9c 	bl	8019204 <std>
 80192cc:	2202      	movs	r2, #2
 80192ce:	2112      	movs	r1, #18
 80192d0:	68e0      	ldr	r0, [r4, #12]
 80192d2:	f7ff ff97 	bl	8019204 <std>
 80192d6:	2301      	movs	r3, #1
 80192d8:	61a3      	str	r3, [r4, #24]
 80192da:	bd10      	pop	{r4, pc}
 80192dc:	0801b890 	.word	0x0801b890
 80192e0:	0801924d 	.word	0x0801924d

080192e4 <__sfp>:
 80192e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192e6:	4b1b      	ldr	r3, [pc, #108]	; (8019354 <__sfp+0x70>)
 80192e8:	681e      	ldr	r6, [r3, #0]
 80192ea:	69b3      	ldr	r3, [r6, #24]
 80192ec:	4607      	mov	r7, r0
 80192ee:	b913      	cbnz	r3, 80192f6 <__sfp+0x12>
 80192f0:	4630      	mov	r0, r6
 80192f2:	f7ff ffc7 	bl	8019284 <__sinit>
 80192f6:	3648      	adds	r6, #72	; 0x48
 80192f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80192fc:	3b01      	subs	r3, #1
 80192fe:	d503      	bpl.n	8019308 <__sfp+0x24>
 8019300:	6833      	ldr	r3, [r6, #0]
 8019302:	b133      	cbz	r3, 8019312 <__sfp+0x2e>
 8019304:	6836      	ldr	r6, [r6, #0]
 8019306:	e7f7      	b.n	80192f8 <__sfp+0x14>
 8019308:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801930c:	b16d      	cbz	r5, 801932a <__sfp+0x46>
 801930e:	3468      	adds	r4, #104	; 0x68
 8019310:	e7f4      	b.n	80192fc <__sfp+0x18>
 8019312:	2104      	movs	r1, #4
 8019314:	4638      	mov	r0, r7
 8019316:	f7ff ff9f 	bl	8019258 <__sfmoreglue>
 801931a:	6030      	str	r0, [r6, #0]
 801931c:	2800      	cmp	r0, #0
 801931e:	d1f1      	bne.n	8019304 <__sfp+0x20>
 8019320:	230c      	movs	r3, #12
 8019322:	603b      	str	r3, [r7, #0]
 8019324:	4604      	mov	r4, r0
 8019326:	4620      	mov	r0, r4
 8019328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801932a:	4b0b      	ldr	r3, [pc, #44]	; (8019358 <__sfp+0x74>)
 801932c:	6665      	str	r5, [r4, #100]	; 0x64
 801932e:	e9c4 5500 	strd	r5, r5, [r4]
 8019332:	60a5      	str	r5, [r4, #8]
 8019334:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8019338:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801933c:	2208      	movs	r2, #8
 801933e:	4629      	mov	r1, r5
 8019340:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019344:	f7fd f92f 	bl	80165a6 <memset>
 8019348:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801934c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019350:	e7e9      	b.n	8019326 <__sfp+0x42>
 8019352:	bf00      	nop
 8019354:	0801b890 	.word	0x0801b890
 8019358:	ffff0001 	.word	0xffff0001

0801935c <_fwalk>:
 801935c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019360:	4688      	mov	r8, r1
 8019362:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019366:	2600      	movs	r6, #0
 8019368:	b914      	cbnz	r4, 8019370 <_fwalk+0x14>
 801936a:	4630      	mov	r0, r6
 801936c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019370:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8019374:	3f01      	subs	r7, #1
 8019376:	d501      	bpl.n	801937c <_fwalk+0x20>
 8019378:	6824      	ldr	r4, [r4, #0]
 801937a:	e7f5      	b.n	8019368 <_fwalk+0xc>
 801937c:	89ab      	ldrh	r3, [r5, #12]
 801937e:	2b01      	cmp	r3, #1
 8019380:	d906      	bls.n	8019390 <_fwalk+0x34>
 8019382:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019386:	3301      	adds	r3, #1
 8019388:	d002      	beq.n	8019390 <_fwalk+0x34>
 801938a:	4628      	mov	r0, r5
 801938c:	47c0      	blx	r8
 801938e:	4306      	orrs	r6, r0
 8019390:	3568      	adds	r5, #104	; 0x68
 8019392:	e7ef      	b.n	8019374 <_fwalk+0x18>

08019394 <_fwalk_reent>:
 8019394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019398:	4680      	mov	r8, r0
 801939a:	4689      	mov	r9, r1
 801939c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80193a0:	2600      	movs	r6, #0
 80193a2:	b914      	cbnz	r4, 80193aa <_fwalk_reent+0x16>
 80193a4:	4630      	mov	r0, r6
 80193a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80193ae:	3f01      	subs	r7, #1
 80193b0:	d501      	bpl.n	80193b6 <_fwalk_reent+0x22>
 80193b2:	6824      	ldr	r4, [r4, #0]
 80193b4:	e7f5      	b.n	80193a2 <_fwalk_reent+0xe>
 80193b6:	89ab      	ldrh	r3, [r5, #12]
 80193b8:	2b01      	cmp	r3, #1
 80193ba:	d907      	bls.n	80193cc <_fwalk_reent+0x38>
 80193bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80193c0:	3301      	adds	r3, #1
 80193c2:	d003      	beq.n	80193cc <_fwalk_reent+0x38>
 80193c4:	4629      	mov	r1, r5
 80193c6:	4640      	mov	r0, r8
 80193c8:	47c8      	blx	r9
 80193ca:	4306      	orrs	r6, r0
 80193cc:	3568      	adds	r5, #104	; 0x68
 80193ce:	e7ee      	b.n	80193ae <_fwalk_reent+0x1a>

080193d0 <rshift>:
 80193d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193d2:	6906      	ldr	r6, [r0, #16]
 80193d4:	114b      	asrs	r3, r1, #5
 80193d6:	429e      	cmp	r6, r3
 80193d8:	f100 0414 	add.w	r4, r0, #20
 80193dc:	dd30      	ble.n	8019440 <rshift+0x70>
 80193de:	f011 011f 	ands.w	r1, r1, #31
 80193e2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80193e6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80193ea:	d108      	bne.n	80193fe <rshift+0x2e>
 80193ec:	4621      	mov	r1, r4
 80193ee:	42b2      	cmp	r2, r6
 80193f0:	460b      	mov	r3, r1
 80193f2:	d211      	bcs.n	8019418 <rshift+0x48>
 80193f4:	f852 3b04 	ldr.w	r3, [r2], #4
 80193f8:	f841 3b04 	str.w	r3, [r1], #4
 80193fc:	e7f7      	b.n	80193ee <rshift+0x1e>
 80193fe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8019402:	f1c1 0c20 	rsb	ip, r1, #32
 8019406:	40cd      	lsrs	r5, r1
 8019408:	3204      	adds	r2, #4
 801940a:	4623      	mov	r3, r4
 801940c:	42b2      	cmp	r2, r6
 801940e:	4617      	mov	r7, r2
 8019410:	d30c      	bcc.n	801942c <rshift+0x5c>
 8019412:	601d      	str	r5, [r3, #0]
 8019414:	b105      	cbz	r5, 8019418 <rshift+0x48>
 8019416:	3304      	adds	r3, #4
 8019418:	1b1a      	subs	r2, r3, r4
 801941a:	42a3      	cmp	r3, r4
 801941c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019420:	bf08      	it	eq
 8019422:	2300      	moveq	r3, #0
 8019424:	6102      	str	r2, [r0, #16]
 8019426:	bf08      	it	eq
 8019428:	6143      	streq	r3, [r0, #20]
 801942a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801942c:	683f      	ldr	r7, [r7, #0]
 801942e:	fa07 f70c 	lsl.w	r7, r7, ip
 8019432:	433d      	orrs	r5, r7
 8019434:	f843 5b04 	str.w	r5, [r3], #4
 8019438:	f852 5b04 	ldr.w	r5, [r2], #4
 801943c:	40cd      	lsrs	r5, r1
 801943e:	e7e5      	b.n	801940c <rshift+0x3c>
 8019440:	4623      	mov	r3, r4
 8019442:	e7e9      	b.n	8019418 <rshift+0x48>

08019444 <__hexdig_fun>:
 8019444:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019448:	2b09      	cmp	r3, #9
 801944a:	d802      	bhi.n	8019452 <__hexdig_fun+0xe>
 801944c:	3820      	subs	r0, #32
 801944e:	b2c0      	uxtb	r0, r0
 8019450:	4770      	bx	lr
 8019452:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019456:	2b05      	cmp	r3, #5
 8019458:	d801      	bhi.n	801945e <__hexdig_fun+0x1a>
 801945a:	3847      	subs	r0, #71	; 0x47
 801945c:	e7f7      	b.n	801944e <__hexdig_fun+0xa>
 801945e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019462:	2b05      	cmp	r3, #5
 8019464:	d801      	bhi.n	801946a <__hexdig_fun+0x26>
 8019466:	3827      	subs	r0, #39	; 0x27
 8019468:	e7f1      	b.n	801944e <__hexdig_fun+0xa>
 801946a:	2000      	movs	r0, #0
 801946c:	4770      	bx	lr

0801946e <__gethex>:
 801946e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019472:	b08b      	sub	sp, #44	; 0x2c
 8019474:	468a      	mov	sl, r1
 8019476:	9002      	str	r0, [sp, #8]
 8019478:	9816      	ldr	r0, [sp, #88]	; 0x58
 801947a:	9306      	str	r3, [sp, #24]
 801947c:	4690      	mov	r8, r2
 801947e:	f000 fadf 	bl	8019a40 <__localeconv_l>
 8019482:	6803      	ldr	r3, [r0, #0]
 8019484:	9303      	str	r3, [sp, #12]
 8019486:	4618      	mov	r0, r3
 8019488:	f7ee fdda 	bl	8008040 <strlen>
 801948c:	9b03      	ldr	r3, [sp, #12]
 801948e:	9001      	str	r0, [sp, #4]
 8019490:	4403      	add	r3, r0
 8019492:	f04f 0b00 	mov.w	fp, #0
 8019496:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801949a:	9307      	str	r3, [sp, #28]
 801949c:	f8da 3000 	ldr.w	r3, [sl]
 80194a0:	3302      	adds	r3, #2
 80194a2:	461f      	mov	r7, r3
 80194a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80194a8:	2830      	cmp	r0, #48	; 0x30
 80194aa:	d06c      	beq.n	8019586 <__gethex+0x118>
 80194ac:	f7ff ffca 	bl	8019444 <__hexdig_fun>
 80194b0:	4604      	mov	r4, r0
 80194b2:	2800      	cmp	r0, #0
 80194b4:	d16a      	bne.n	801958c <__gethex+0x11e>
 80194b6:	9a01      	ldr	r2, [sp, #4]
 80194b8:	9903      	ldr	r1, [sp, #12]
 80194ba:	4638      	mov	r0, r7
 80194bc:	f001 fe81 	bl	801b1c2 <strncmp>
 80194c0:	2800      	cmp	r0, #0
 80194c2:	d166      	bne.n	8019592 <__gethex+0x124>
 80194c4:	9b01      	ldr	r3, [sp, #4]
 80194c6:	5cf8      	ldrb	r0, [r7, r3]
 80194c8:	18fe      	adds	r6, r7, r3
 80194ca:	f7ff ffbb 	bl	8019444 <__hexdig_fun>
 80194ce:	2800      	cmp	r0, #0
 80194d0:	d062      	beq.n	8019598 <__gethex+0x12a>
 80194d2:	4633      	mov	r3, r6
 80194d4:	7818      	ldrb	r0, [r3, #0]
 80194d6:	2830      	cmp	r0, #48	; 0x30
 80194d8:	461f      	mov	r7, r3
 80194da:	f103 0301 	add.w	r3, r3, #1
 80194de:	d0f9      	beq.n	80194d4 <__gethex+0x66>
 80194e0:	f7ff ffb0 	bl	8019444 <__hexdig_fun>
 80194e4:	fab0 f580 	clz	r5, r0
 80194e8:	096d      	lsrs	r5, r5, #5
 80194ea:	4634      	mov	r4, r6
 80194ec:	f04f 0b01 	mov.w	fp, #1
 80194f0:	463a      	mov	r2, r7
 80194f2:	4616      	mov	r6, r2
 80194f4:	3201      	adds	r2, #1
 80194f6:	7830      	ldrb	r0, [r6, #0]
 80194f8:	f7ff ffa4 	bl	8019444 <__hexdig_fun>
 80194fc:	2800      	cmp	r0, #0
 80194fe:	d1f8      	bne.n	80194f2 <__gethex+0x84>
 8019500:	9a01      	ldr	r2, [sp, #4]
 8019502:	9903      	ldr	r1, [sp, #12]
 8019504:	4630      	mov	r0, r6
 8019506:	f001 fe5c 	bl	801b1c2 <strncmp>
 801950a:	b950      	cbnz	r0, 8019522 <__gethex+0xb4>
 801950c:	b954      	cbnz	r4, 8019524 <__gethex+0xb6>
 801950e:	9b01      	ldr	r3, [sp, #4]
 8019510:	18f4      	adds	r4, r6, r3
 8019512:	4622      	mov	r2, r4
 8019514:	4616      	mov	r6, r2
 8019516:	3201      	adds	r2, #1
 8019518:	7830      	ldrb	r0, [r6, #0]
 801951a:	f7ff ff93 	bl	8019444 <__hexdig_fun>
 801951e:	2800      	cmp	r0, #0
 8019520:	d1f8      	bne.n	8019514 <__gethex+0xa6>
 8019522:	b10c      	cbz	r4, 8019528 <__gethex+0xba>
 8019524:	1ba4      	subs	r4, r4, r6
 8019526:	00a4      	lsls	r4, r4, #2
 8019528:	7833      	ldrb	r3, [r6, #0]
 801952a:	2b50      	cmp	r3, #80	; 0x50
 801952c:	d001      	beq.n	8019532 <__gethex+0xc4>
 801952e:	2b70      	cmp	r3, #112	; 0x70
 8019530:	d140      	bne.n	80195b4 <__gethex+0x146>
 8019532:	7873      	ldrb	r3, [r6, #1]
 8019534:	2b2b      	cmp	r3, #43	; 0x2b
 8019536:	d031      	beq.n	801959c <__gethex+0x12e>
 8019538:	2b2d      	cmp	r3, #45	; 0x2d
 801953a:	d033      	beq.n	80195a4 <__gethex+0x136>
 801953c:	1c71      	adds	r1, r6, #1
 801953e:	f04f 0900 	mov.w	r9, #0
 8019542:	7808      	ldrb	r0, [r1, #0]
 8019544:	f7ff ff7e 	bl	8019444 <__hexdig_fun>
 8019548:	1e43      	subs	r3, r0, #1
 801954a:	b2db      	uxtb	r3, r3
 801954c:	2b18      	cmp	r3, #24
 801954e:	d831      	bhi.n	80195b4 <__gethex+0x146>
 8019550:	f1a0 0210 	sub.w	r2, r0, #16
 8019554:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019558:	f7ff ff74 	bl	8019444 <__hexdig_fun>
 801955c:	1e43      	subs	r3, r0, #1
 801955e:	b2db      	uxtb	r3, r3
 8019560:	2b18      	cmp	r3, #24
 8019562:	d922      	bls.n	80195aa <__gethex+0x13c>
 8019564:	f1b9 0f00 	cmp.w	r9, #0
 8019568:	d000      	beq.n	801956c <__gethex+0xfe>
 801956a:	4252      	negs	r2, r2
 801956c:	4414      	add	r4, r2
 801956e:	f8ca 1000 	str.w	r1, [sl]
 8019572:	b30d      	cbz	r5, 80195b8 <__gethex+0x14a>
 8019574:	f1bb 0f00 	cmp.w	fp, #0
 8019578:	bf0c      	ite	eq
 801957a:	2706      	moveq	r7, #6
 801957c:	2700      	movne	r7, #0
 801957e:	4638      	mov	r0, r7
 8019580:	b00b      	add	sp, #44	; 0x2c
 8019582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019586:	f10b 0b01 	add.w	fp, fp, #1
 801958a:	e78a      	b.n	80194a2 <__gethex+0x34>
 801958c:	2500      	movs	r5, #0
 801958e:	462c      	mov	r4, r5
 8019590:	e7ae      	b.n	80194f0 <__gethex+0x82>
 8019592:	463e      	mov	r6, r7
 8019594:	2501      	movs	r5, #1
 8019596:	e7c7      	b.n	8019528 <__gethex+0xba>
 8019598:	4604      	mov	r4, r0
 801959a:	e7fb      	b.n	8019594 <__gethex+0x126>
 801959c:	f04f 0900 	mov.w	r9, #0
 80195a0:	1cb1      	adds	r1, r6, #2
 80195a2:	e7ce      	b.n	8019542 <__gethex+0xd4>
 80195a4:	f04f 0901 	mov.w	r9, #1
 80195a8:	e7fa      	b.n	80195a0 <__gethex+0x132>
 80195aa:	230a      	movs	r3, #10
 80195ac:	fb03 0202 	mla	r2, r3, r2, r0
 80195b0:	3a10      	subs	r2, #16
 80195b2:	e7cf      	b.n	8019554 <__gethex+0xe6>
 80195b4:	4631      	mov	r1, r6
 80195b6:	e7da      	b.n	801956e <__gethex+0x100>
 80195b8:	1bf3      	subs	r3, r6, r7
 80195ba:	3b01      	subs	r3, #1
 80195bc:	4629      	mov	r1, r5
 80195be:	2b07      	cmp	r3, #7
 80195c0:	dc49      	bgt.n	8019656 <__gethex+0x1e8>
 80195c2:	9802      	ldr	r0, [sp, #8]
 80195c4:	f000 faca 	bl	8019b5c <_Balloc>
 80195c8:	9b01      	ldr	r3, [sp, #4]
 80195ca:	f100 0914 	add.w	r9, r0, #20
 80195ce:	f04f 0b00 	mov.w	fp, #0
 80195d2:	f1c3 0301 	rsb	r3, r3, #1
 80195d6:	4605      	mov	r5, r0
 80195d8:	f8cd 9010 	str.w	r9, [sp, #16]
 80195dc:	46da      	mov	sl, fp
 80195de:	9308      	str	r3, [sp, #32]
 80195e0:	42b7      	cmp	r7, r6
 80195e2:	d33b      	bcc.n	801965c <__gethex+0x1ee>
 80195e4:	9804      	ldr	r0, [sp, #16]
 80195e6:	f840 ab04 	str.w	sl, [r0], #4
 80195ea:	eba0 0009 	sub.w	r0, r0, r9
 80195ee:	1080      	asrs	r0, r0, #2
 80195f0:	6128      	str	r0, [r5, #16]
 80195f2:	0147      	lsls	r7, r0, #5
 80195f4:	4650      	mov	r0, sl
 80195f6:	f000 fb75 	bl	8019ce4 <__hi0bits>
 80195fa:	f8d8 6000 	ldr.w	r6, [r8]
 80195fe:	1a3f      	subs	r7, r7, r0
 8019600:	42b7      	cmp	r7, r6
 8019602:	dd64      	ble.n	80196ce <__gethex+0x260>
 8019604:	1bbf      	subs	r7, r7, r6
 8019606:	4639      	mov	r1, r7
 8019608:	4628      	mov	r0, r5
 801960a:	f000 fe85 	bl	801a318 <__any_on>
 801960e:	4682      	mov	sl, r0
 8019610:	b178      	cbz	r0, 8019632 <__gethex+0x1c4>
 8019612:	1e7b      	subs	r3, r7, #1
 8019614:	1159      	asrs	r1, r3, #5
 8019616:	f003 021f 	and.w	r2, r3, #31
 801961a:	f04f 0a01 	mov.w	sl, #1
 801961e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019622:	fa0a f202 	lsl.w	r2, sl, r2
 8019626:	420a      	tst	r2, r1
 8019628:	d003      	beq.n	8019632 <__gethex+0x1c4>
 801962a:	4553      	cmp	r3, sl
 801962c:	dc46      	bgt.n	80196bc <__gethex+0x24e>
 801962e:	f04f 0a02 	mov.w	sl, #2
 8019632:	4639      	mov	r1, r7
 8019634:	4628      	mov	r0, r5
 8019636:	f7ff fecb 	bl	80193d0 <rshift>
 801963a:	443c      	add	r4, r7
 801963c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019640:	42a3      	cmp	r3, r4
 8019642:	da52      	bge.n	80196ea <__gethex+0x27c>
 8019644:	4629      	mov	r1, r5
 8019646:	9802      	ldr	r0, [sp, #8]
 8019648:	f000 fabc 	bl	8019bc4 <_Bfree>
 801964c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801964e:	2300      	movs	r3, #0
 8019650:	6013      	str	r3, [r2, #0]
 8019652:	27a3      	movs	r7, #163	; 0xa3
 8019654:	e793      	b.n	801957e <__gethex+0x110>
 8019656:	3101      	adds	r1, #1
 8019658:	105b      	asrs	r3, r3, #1
 801965a:	e7b0      	b.n	80195be <__gethex+0x150>
 801965c:	1e73      	subs	r3, r6, #1
 801965e:	9305      	str	r3, [sp, #20]
 8019660:	9a07      	ldr	r2, [sp, #28]
 8019662:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019666:	4293      	cmp	r3, r2
 8019668:	d018      	beq.n	801969c <__gethex+0x22e>
 801966a:	f1bb 0f20 	cmp.w	fp, #32
 801966e:	d107      	bne.n	8019680 <__gethex+0x212>
 8019670:	9b04      	ldr	r3, [sp, #16]
 8019672:	f8c3 a000 	str.w	sl, [r3]
 8019676:	3304      	adds	r3, #4
 8019678:	f04f 0a00 	mov.w	sl, #0
 801967c:	9304      	str	r3, [sp, #16]
 801967e:	46d3      	mov	fp, sl
 8019680:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019684:	f7ff fede 	bl	8019444 <__hexdig_fun>
 8019688:	f000 000f 	and.w	r0, r0, #15
 801968c:	fa00 f00b 	lsl.w	r0, r0, fp
 8019690:	ea4a 0a00 	orr.w	sl, sl, r0
 8019694:	f10b 0b04 	add.w	fp, fp, #4
 8019698:	9b05      	ldr	r3, [sp, #20]
 801969a:	e00d      	b.n	80196b8 <__gethex+0x24a>
 801969c:	9b05      	ldr	r3, [sp, #20]
 801969e:	9a08      	ldr	r2, [sp, #32]
 80196a0:	4413      	add	r3, r2
 80196a2:	42bb      	cmp	r3, r7
 80196a4:	d3e1      	bcc.n	801966a <__gethex+0x1fc>
 80196a6:	4618      	mov	r0, r3
 80196a8:	9a01      	ldr	r2, [sp, #4]
 80196aa:	9903      	ldr	r1, [sp, #12]
 80196ac:	9309      	str	r3, [sp, #36]	; 0x24
 80196ae:	f001 fd88 	bl	801b1c2 <strncmp>
 80196b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196b4:	2800      	cmp	r0, #0
 80196b6:	d1d8      	bne.n	801966a <__gethex+0x1fc>
 80196b8:	461e      	mov	r6, r3
 80196ba:	e791      	b.n	80195e0 <__gethex+0x172>
 80196bc:	1eb9      	subs	r1, r7, #2
 80196be:	4628      	mov	r0, r5
 80196c0:	f000 fe2a 	bl	801a318 <__any_on>
 80196c4:	2800      	cmp	r0, #0
 80196c6:	d0b2      	beq.n	801962e <__gethex+0x1c0>
 80196c8:	f04f 0a03 	mov.w	sl, #3
 80196cc:	e7b1      	b.n	8019632 <__gethex+0x1c4>
 80196ce:	da09      	bge.n	80196e4 <__gethex+0x276>
 80196d0:	1bf7      	subs	r7, r6, r7
 80196d2:	4629      	mov	r1, r5
 80196d4:	463a      	mov	r2, r7
 80196d6:	9802      	ldr	r0, [sp, #8]
 80196d8:	f000 fc40 	bl	8019f5c <__lshift>
 80196dc:	1be4      	subs	r4, r4, r7
 80196de:	4605      	mov	r5, r0
 80196e0:	f100 0914 	add.w	r9, r0, #20
 80196e4:	f04f 0a00 	mov.w	sl, #0
 80196e8:	e7a8      	b.n	801963c <__gethex+0x1ce>
 80196ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80196ee:	42a0      	cmp	r0, r4
 80196f0:	dd6a      	ble.n	80197c8 <__gethex+0x35a>
 80196f2:	1b04      	subs	r4, r0, r4
 80196f4:	42a6      	cmp	r6, r4
 80196f6:	dc2e      	bgt.n	8019756 <__gethex+0x2e8>
 80196f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80196fc:	2b02      	cmp	r3, #2
 80196fe:	d022      	beq.n	8019746 <__gethex+0x2d8>
 8019700:	2b03      	cmp	r3, #3
 8019702:	d024      	beq.n	801974e <__gethex+0x2e0>
 8019704:	2b01      	cmp	r3, #1
 8019706:	d115      	bne.n	8019734 <__gethex+0x2c6>
 8019708:	42a6      	cmp	r6, r4
 801970a:	d113      	bne.n	8019734 <__gethex+0x2c6>
 801970c:	2e01      	cmp	r6, #1
 801970e:	dc0b      	bgt.n	8019728 <__gethex+0x2ba>
 8019710:	9a06      	ldr	r2, [sp, #24]
 8019712:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019716:	6013      	str	r3, [r2, #0]
 8019718:	2301      	movs	r3, #1
 801971a:	612b      	str	r3, [r5, #16]
 801971c:	f8c9 3000 	str.w	r3, [r9]
 8019720:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019722:	2762      	movs	r7, #98	; 0x62
 8019724:	601d      	str	r5, [r3, #0]
 8019726:	e72a      	b.n	801957e <__gethex+0x110>
 8019728:	1e71      	subs	r1, r6, #1
 801972a:	4628      	mov	r0, r5
 801972c:	f000 fdf4 	bl	801a318 <__any_on>
 8019730:	2800      	cmp	r0, #0
 8019732:	d1ed      	bne.n	8019710 <__gethex+0x2a2>
 8019734:	4629      	mov	r1, r5
 8019736:	9802      	ldr	r0, [sp, #8]
 8019738:	f000 fa44 	bl	8019bc4 <_Bfree>
 801973c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801973e:	2300      	movs	r3, #0
 8019740:	6013      	str	r3, [r2, #0]
 8019742:	2750      	movs	r7, #80	; 0x50
 8019744:	e71b      	b.n	801957e <__gethex+0x110>
 8019746:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019748:	2b00      	cmp	r3, #0
 801974a:	d0e1      	beq.n	8019710 <__gethex+0x2a2>
 801974c:	e7f2      	b.n	8019734 <__gethex+0x2c6>
 801974e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019750:	2b00      	cmp	r3, #0
 8019752:	d1dd      	bne.n	8019710 <__gethex+0x2a2>
 8019754:	e7ee      	b.n	8019734 <__gethex+0x2c6>
 8019756:	1e67      	subs	r7, r4, #1
 8019758:	f1ba 0f00 	cmp.w	sl, #0
 801975c:	d131      	bne.n	80197c2 <__gethex+0x354>
 801975e:	b127      	cbz	r7, 801976a <__gethex+0x2fc>
 8019760:	4639      	mov	r1, r7
 8019762:	4628      	mov	r0, r5
 8019764:	f000 fdd8 	bl	801a318 <__any_on>
 8019768:	4682      	mov	sl, r0
 801976a:	117a      	asrs	r2, r7, #5
 801976c:	2301      	movs	r3, #1
 801976e:	f007 071f 	and.w	r7, r7, #31
 8019772:	fa03 f707 	lsl.w	r7, r3, r7
 8019776:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801977a:	4621      	mov	r1, r4
 801977c:	421f      	tst	r7, r3
 801977e:	4628      	mov	r0, r5
 8019780:	bf18      	it	ne
 8019782:	f04a 0a02 	orrne.w	sl, sl, #2
 8019786:	1b36      	subs	r6, r6, r4
 8019788:	f7ff fe22 	bl	80193d0 <rshift>
 801978c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019790:	2702      	movs	r7, #2
 8019792:	f1ba 0f00 	cmp.w	sl, #0
 8019796:	d048      	beq.n	801982a <__gethex+0x3bc>
 8019798:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801979c:	2b02      	cmp	r3, #2
 801979e:	d015      	beq.n	80197cc <__gethex+0x35e>
 80197a0:	2b03      	cmp	r3, #3
 80197a2:	d017      	beq.n	80197d4 <__gethex+0x366>
 80197a4:	2b01      	cmp	r3, #1
 80197a6:	d109      	bne.n	80197bc <__gethex+0x34e>
 80197a8:	f01a 0f02 	tst.w	sl, #2
 80197ac:	d006      	beq.n	80197bc <__gethex+0x34e>
 80197ae:	f8d9 3000 	ldr.w	r3, [r9]
 80197b2:	ea4a 0a03 	orr.w	sl, sl, r3
 80197b6:	f01a 0f01 	tst.w	sl, #1
 80197ba:	d10e      	bne.n	80197da <__gethex+0x36c>
 80197bc:	f047 0710 	orr.w	r7, r7, #16
 80197c0:	e033      	b.n	801982a <__gethex+0x3bc>
 80197c2:	f04f 0a01 	mov.w	sl, #1
 80197c6:	e7d0      	b.n	801976a <__gethex+0x2fc>
 80197c8:	2701      	movs	r7, #1
 80197ca:	e7e2      	b.n	8019792 <__gethex+0x324>
 80197cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80197ce:	f1c3 0301 	rsb	r3, r3, #1
 80197d2:	9315      	str	r3, [sp, #84]	; 0x54
 80197d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d0f0      	beq.n	80197bc <__gethex+0x34e>
 80197da:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80197de:	f105 0314 	add.w	r3, r5, #20
 80197e2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80197e6:	eb03 010a 	add.w	r1, r3, sl
 80197ea:	f04f 0c00 	mov.w	ip, #0
 80197ee:	4618      	mov	r0, r3
 80197f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80197f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80197f8:	d01c      	beq.n	8019834 <__gethex+0x3c6>
 80197fa:	3201      	adds	r2, #1
 80197fc:	6002      	str	r2, [r0, #0]
 80197fe:	2f02      	cmp	r7, #2
 8019800:	f105 0314 	add.w	r3, r5, #20
 8019804:	d138      	bne.n	8019878 <__gethex+0x40a>
 8019806:	f8d8 2000 	ldr.w	r2, [r8]
 801980a:	3a01      	subs	r2, #1
 801980c:	42b2      	cmp	r2, r6
 801980e:	d10a      	bne.n	8019826 <__gethex+0x3b8>
 8019810:	1171      	asrs	r1, r6, #5
 8019812:	2201      	movs	r2, #1
 8019814:	f006 061f 	and.w	r6, r6, #31
 8019818:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801981c:	fa02 f606 	lsl.w	r6, r2, r6
 8019820:	421e      	tst	r6, r3
 8019822:	bf18      	it	ne
 8019824:	4617      	movne	r7, r2
 8019826:	f047 0720 	orr.w	r7, r7, #32
 801982a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801982c:	601d      	str	r5, [r3, #0]
 801982e:	9b06      	ldr	r3, [sp, #24]
 8019830:	601c      	str	r4, [r3, #0]
 8019832:	e6a4      	b.n	801957e <__gethex+0x110>
 8019834:	4299      	cmp	r1, r3
 8019836:	f843 cc04 	str.w	ip, [r3, #-4]
 801983a:	d8d8      	bhi.n	80197ee <__gethex+0x380>
 801983c:	68ab      	ldr	r3, [r5, #8]
 801983e:	4599      	cmp	r9, r3
 8019840:	db12      	blt.n	8019868 <__gethex+0x3fa>
 8019842:	6869      	ldr	r1, [r5, #4]
 8019844:	9802      	ldr	r0, [sp, #8]
 8019846:	3101      	adds	r1, #1
 8019848:	f000 f988 	bl	8019b5c <_Balloc>
 801984c:	692a      	ldr	r2, [r5, #16]
 801984e:	3202      	adds	r2, #2
 8019850:	f105 010c 	add.w	r1, r5, #12
 8019854:	4683      	mov	fp, r0
 8019856:	0092      	lsls	r2, r2, #2
 8019858:	300c      	adds	r0, #12
 801985a:	f7fc fe99 	bl	8016590 <memcpy>
 801985e:	4629      	mov	r1, r5
 8019860:	9802      	ldr	r0, [sp, #8]
 8019862:	f000 f9af 	bl	8019bc4 <_Bfree>
 8019866:	465d      	mov	r5, fp
 8019868:	692b      	ldr	r3, [r5, #16]
 801986a:	1c5a      	adds	r2, r3, #1
 801986c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8019870:	612a      	str	r2, [r5, #16]
 8019872:	2201      	movs	r2, #1
 8019874:	615a      	str	r2, [r3, #20]
 8019876:	e7c2      	b.n	80197fe <__gethex+0x390>
 8019878:	692a      	ldr	r2, [r5, #16]
 801987a:	454a      	cmp	r2, r9
 801987c:	dd0b      	ble.n	8019896 <__gethex+0x428>
 801987e:	2101      	movs	r1, #1
 8019880:	4628      	mov	r0, r5
 8019882:	f7ff fda5 	bl	80193d0 <rshift>
 8019886:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801988a:	3401      	adds	r4, #1
 801988c:	42a3      	cmp	r3, r4
 801988e:	f6ff aed9 	blt.w	8019644 <__gethex+0x1d6>
 8019892:	2701      	movs	r7, #1
 8019894:	e7c7      	b.n	8019826 <__gethex+0x3b8>
 8019896:	f016 061f 	ands.w	r6, r6, #31
 801989a:	d0fa      	beq.n	8019892 <__gethex+0x424>
 801989c:	449a      	add	sl, r3
 801989e:	f1c6 0620 	rsb	r6, r6, #32
 80198a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80198a6:	f000 fa1d 	bl	8019ce4 <__hi0bits>
 80198aa:	42b0      	cmp	r0, r6
 80198ac:	dbe7      	blt.n	801987e <__gethex+0x410>
 80198ae:	e7f0      	b.n	8019892 <__gethex+0x424>

080198b0 <L_shift>:
 80198b0:	f1c2 0208 	rsb	r2, r2, #8
 80198b4:	0092      	lsls	r2, r2, #2
 80198b6:	b570      	push	{r4, r5, r6, lr}
 80198b8:	f1c2 0620 	rsb	r6, r2, #32
 80198bc:	6843      	ldr	r3, [r0, #4]
 80198be:	6804      	ldr	r4, [r0, #0]
 80198c0:	fa03 f506 	lsl.w	r5, r3, r6
 80198c4:	432c      	orrs	r4, r5
 80198c6:	40d3      	lsrs	r3, r2
 80198c8:	6004      	str	r4, [r0, #0]
 80198ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80198ce:	4288      	cmp	r0, r1
 80198d0:	d3f4      	bcc.n	80198bc <L_shift+0xc>
 80198d2:	bd70      	pop	{r4, r5, r6, pc}

080198d4 <__match>:
 80198d4:	b530      	push	{r4, r5, lr}
 80198d6:	6803      	ldr	r3, [r0, #0]
 80198d8:	3301      	adds	r3, #1
 80198da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80198de:	b914      	cbnz	r4, 80198e6 <__match+0x12>
 80198e0:	6003      	str	r3, [r0, #0]
 80198e2:	2001      	movs	r0, #1
 80198e4:	bd30      	pop	{r4, r5, pc}
 80198e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80198ee:	2d19      	cmp	r5, #25
 80198f0:	bf98      	it	ls
 80198f2:	3220      	addls	r2, #32
 80198f4:	42a2      	cmp	r2, r4
 80198f6:	d0f0      	beq.n	80198da <__match+0x6>
 80198f8:	2000      	movs	r0, #0
 80198fa:	e7f3      	b.n	80198e4 <__match+0x10>

080198fc <__hexnan>:
 80198fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019900:	680b      	ldr	r3, [r1, #0]
 8019902:	6801      	ldr	r1, [r0, #0]
 8019904:	115f      	asrs	r7, r3, #5
 8019906:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801990a:	f013 031f 	ands.w	r3, r3, #31
 801990e:	b087      	sub	sp, #28
 8019910:	bf18      	it	ne
 8019912:	3704      	addne	r7, #4
 8019914:	2500      	movs	r5, #0
 8019916:	1f3e      	subs	r6, r7, #4
 8019918:	4682      	mov	sl, r0
 801991a:	4690      	mov	r8, r2
 801991c:	9301      	str	r3, [sp, #4]
 801991e:	f847 5c04 	str.w	r5, [r7, #-4]
 8019922:	46b1      	mov	r9, r6
 8019924:	4634      	mov	r4, r6
 8019926:	9502      	str	r5, [sp, #8]
 8019928:	46ab      	mov	fp, r5
 801992a:	784a      	ldrb	r2, [r1, #1]
 801992c:	1c4b      	adds	r3, r1, #1
 801992e:	9303      	str	r3, [sp, #12]
 8019930:	b342      	cbz	r2, 8019984 <__hexnan+0x88>
 8019932:	4610      	mov	r0, r2
 8019934:	9105      	str	r1, [sp, #20]
 8019936:	9204      	str	r2, [sp, #16]
 8019938:	f7ff fd84 	bl	8019444 <__hexdig_fun>
 801993c:	2800      	cmp	r0, #0
 801993e:	d143      	bne.n	80199c8 <__hexnan+0xcc>
 8019940:	9a04      	ldr	r2, [sp, #16]
 8019942:	9905      	ldr	r1, [sp, #20]
 8019944:	2a20      	cmp	r2, #32
 8019946:	d818      	bhi.n	801997a <__hexnan+0x7e>
 8019948:	9b02      	ldr	r3, [sp, #8]
 801994a:	459b      	cmp	fp, r3
 801994c:	dd13      	ble.n	8019976 <__hexnan+0x7a>
 801994e:	454c      	cmp	r4, r9
 8019950:	d206      	bcs.n	8019960 <__hexnan+0x64>
 8019952:	2d07      	cmp	r5, #7
 8019954:	dc04      	bgt.n	8019960 <__hexnan+0x64>
 8019956:	462a      	mov	r2, r5
 8019958:	4649      	mov	r1, r9
 801995a:	4620      	mov	r0, r4
 801995c:	f7ff ffa8 	bl	80198b0 <L_shift>
 8019960:	4544      	cmp	r4, r8
 8019962:	d944      	bls.n	80199ee <__hexnan+0xf2>
 8019964:	2300      	movs	r3, #0
 8019966:	f1a4 0904 	sub.w	r9, r4, #4
 801996a:	f844 3c04 	str.w	r3, [r4, #-4]
 801996e:	f8cd b008 	str.w	fp, [sp, #8]
 8019972:	464c      	mov	r4, r9
 8019974:	461d      	mov	r5, r3
 8019976:	9903      	ldr	r1, [sp, #12]
 8019978:	e7d7      	b.n	801992a <__hexnan+0x2e>
 801997a:	2a29      	cmp	r2, #41	; 0x29
 801997c:	d14a      	bne.n	8019a14 <__hexnan+0x118>
 801997e:	3102      	adds	r1, #2
 8019980:	f8ca 1000 	str.w	r1, [sl]
 8019984:	f1bb 0f00 	cmp.w	fp, #0
 8019988:	d044      	beq.n	8019a14 <__hexnan+0x118>
 801998a:	454c      	cmp	r4, r9
 801998c:	d206      	bcs.n	801999c <__hexnan+0xa0>
 801998e:	2d07      	cmp	r5, #7
 8019990:	dc04      	bgt.n	801999c <__hexnan+0xa0>
 8019992:	462a      	mov	r2, r5
 8019994:	4649      	mov	r1, r9
 8019996:	4620      	mov	r0, r4
 8019998:	f7ff ff8a 	bl	80198b0 <L_shift>
 801999c:	4544      	cmp	r4, r8
 801999e:	d928      	bls.n	80199f2 <__hexnan+0xf6>
 80199a0:	4643      	mov	r3, r8
 80199a2:	f854 2b04 	ldr.w	r2, [r4], #4
 80199a6:	f843 2b04 	str.w	r2, [r3], #4
 80199aa:	42a6      	cmp	r6, r4
 80199ac:	d2f9      	bcs.n	80199a2 <__hexnan+0xa6>
 80199ae:	2200      	movs	r2, #0
 80199b0:	f843 2b04 	str.w	r2, [r3], #4
 80199b4:	429e      	cmp	r6, r3
 80199b6:	d2fb      	bcs.n	80199b0 <__hexnan+0xb4>
 80199b8:	6833      	ldr	r3, [r6, #0]
 80199ba:	b91b      	cbnz	r3, 80199c4 <__hexnan+0xc8>
 80199bc:	4546      	cmp	r6, r8
 80199be:	d127      	bne.n	8019a10 <__hexnan+0x114>
 80199c0:	2301      	movs	r3, #1
 80199c2:	6033      	str	r3, [r6, #0]
 80199c4:	2005      	movs	r0, #5
 80199c6:	e026      	b.n	8019a16 <__hexnan+0x11a>
 80199c8:	3501      	adds	r5, #1
 80199ca:	2d08      	cmp	r5, #8
 80199cc:	f10b 0b01 	add.w	fp, fp, #1
 80199d0:	dd06      	ble.n	80199e0 <__hexnan+0xe4>
 80199d2:	4544      	cmp	r4, r8
 80199d4:	d9cf      	bls.n	8019976 <__hexnan+0x7a>
 80199d6:	2300      	movs	r3, #0
 80199d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80199dc:	2501      	movs	r5, #1
 80199de:	3c04      	subs	r4, #4
 80199e0:	6822      	ldr	r2, [r4, #0]
 80199e2:	f000 000f 	and.w	r0, r0, #15
 80199e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80199ea:	6020      	str	r0, [r4, #0]
 80199ec:	e7c3      	b.n	8019976 <__hexnan+0x7a>
 80199ee:	2508      	movs	r5, #8
 80199f0:	e7c1      	b.n	8019976 <__hexnan+0x7a>
 80199f2:	9b01      	ldr	r3, [sp, #4]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d0df      	beq.n	80199b8 <__hexnan+0xbc>
 80199f8:	f04f 32ff 	mov.w	r2, #4294967295
 80199fc:	f1c3 0320 	rsb	r3, r3, #32
 8019a00:	fa22 f303 	lsr.w	r3, r2, r3
 8019a04:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8019a08:	401a      	ands	r2, r3
 8019a0a:	f847 2c04 	str.w	r2, [r7, #-4]
 8019a0e:	e7d3      	b.n	80199b8 <__hexnan+0xbc>
 8019a10:	3e04      	subs	r6, #4
 8019a12:	e7d1      	b.n	80199b8 <__hexnan+0xbc>
 8019a14:	2004      	movs	r0, #4
 8019a16:	b007      	add	sp, #28
 8019a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a1c <__locale_ctype_ptr_l>:
 8019a1c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8019a20:	4770      	bx	lr
	...

08019a24 <__locale_ctype_ptr>:
 8019a24:	4b04      	ldr	r3, [pc, #16]	; (8019a38 <__locale_ctype_ptr+0x14>)
 8019a26:	4a05      	ldr	r2, [pc, #20]	; (8019a3c <__locale_ctype_ptr+0x18>)
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	6a1b      	ldr	r3, [r3, #32]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	bf08      	it	eq
 8019a30:	4613      	moveq	r3, r2
 8019a32:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8019a36:	4770      	bx	lr
 8019a38:	2000002c 	.word	0x2000002c
 8019a3c:	20000090 	.word	0x20000090

08019a40 <__localeconv_l>:
 8019a40:	30f0      	adds	r0, #240	; 0xf0
 8019a42:	4770      	bx	lr

08019a44 <_localeconv_r>:
 8019a44:	4b04      	ldr	r3, [pc, #16]	; (8019a58 <_localeconv_r+0x14>)
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	6a18      	ldr	r0, [r3, #32]
 8019a4a:	4b04      	ldr	r3, [pc, #16]	; (8019a5c <_localeconv_r+0x18>)
 8019a4c:	2800      	cmp	r0, #0
 8019a4e:	bf08      	it	eq
 8019a50:	4618      	moveq	r0, r3
 8019a52:	30f0      	adds	r0, #240	; 0xf0
 8019a54:	4770      	bx	lr
 8019a56:	bf00      	nop
 8019a58:	2000002c 	.word	0x2000002c
 8019a5c:	20000090 	.word	0x20000090

08019a60 <__swhatbuf_r>:
 8019a60:	b570      	push	{r4, r5, r6, lr}
 8019a62:	460e      	mov	r6, r1
 8019a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a68:	2900      	cmp	r1, #0
 8019a6a:	b096      	sub	sp, #88	; 0x58
 8019a6c:	4614      	mov	r4, r2
 8019a6e:	461d      	mov	r5, r3
 8019a70:	da07      	bge.n	8019a82 <__swhatbuf_r+0x22>
 8019a72:	2300      	movs	r3, #0
 8019a74:	602b      	str	r3, [r5, #0]
 8019a76:	89b3      	ldrh	r3, [r6, #12]
 8019a78:	061a      	lsls	r2, r3, #24
 8019a7a:	d410      	bmi.n	8019a9e <__swhatbuf_r+0x3e>
 8019a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019a80:	e00e      	b.n	8019aa0 <__swhatbuf_r+0x40>
 8019a82:	466a      	mov	r2, sp
 8019a84:	f001 fd18 	bl	801b4b8 <_fstat_r>
 8019a88:	2800      	cmp	r0, #0
 8019a8a:	dbf2      	blt.n	8019a72 <__swhatbuf_r+0x12>
 8019a8c:	9a01      	ldr	r2, [sp, #4]
 8019a8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019a92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019a96:	425a      	negs	r2, r3
 8019a98:	415a      	adcs	r2, r3
 8019a9a:	602a      	str	r2, [r5, #0]
 8019a9c:	e7ee      	b.n	8019a7c <__swhatbuf_r+0x1c>
 8019a9e:	2340      	movs	r3, #64	; 0x40
 8019aa0:	2000      	movs	r0, #0
 8019aa2:	6023      	str	r3, [r4, #0]
 8019aa4:	b016      	add	sp, #88	; 0x58
 8019aa6:	bd70      	pop	{r4, r5, r6, pc}

08019aa8 <__smakebuf_r>:
 8019aa8:	898b      	ldrh	r3, [r1, #12]
 8019aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019aac:	079d      	lsls	r5, r3, #30
 8019aae:	4606      	mov	r6, r0
 8019ab0:	460c      	mov	r4, r1
 8019ab2:	d507      	bpl.n	8019ac4 <__smakebuf_r+0x1c>
 8019ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019ab8:	6023      	str	r3, [r4, #0]
 8019aba:	6123      	str	r3, [r4, #16]
 8019abc:	2301      	movs	r3, #1
 8019abe:	6163      	str	r3, [r4, #20]
 8019ac0:	b002      	add	sp, #8
 8019ac2:	bd70      	pop	{r4, r5, r6, pc}
 8019ac4:	ab01      	add	r3, sp, #4
 8019ac6:	466a      	mov	r2, sp
 8019ac8:	f7ff ffca 	bl	8019a60 <__swhatbuf_r>
 8019acc:	9900      	ldr	r1, [sp, #0]
 8019ace:	4605      	mov	r5, r0
 8019ad0:	4630      	mov	r0, r6
 8019ad2:	f000 fc9f 	bl	801a414 <_malloc_r>
 8019ad6:	b948      	cbnz	r0, 8019aec <__smakebuf_r+0x44>
 8019ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019adc:	059a      	lsls	r2, r3, #22
 8019ade:	d4ef      	bmi.n	8019ac0 <__smakebuf_r+0x18>
 8019ae0:	f023 0303 	bic.w	r3, r3, #3
 8019ae4:	f043 0302 	orr.w	r3, r3, #2
 8019ae8:	81a3      	strh	r3, [r4, #12]
 8019aea:	e7e3      	b.n	8019ab4 <__smakebuf_r+0xc>
 8019aec:	4b0d      	ldr	r3, [pc, #52]	; (8019b24 <__smakebuf_r+0x7c>)
 8019aee:	62b3      	str	r3, [r6, #40]	; 0x28
 8019af0:	89a3      	ldrh	r3, [r4, #12]
 8019af2:	6020      	str	r0, [r4, #0]
 8019af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019af8:	81a3      	strh	r3, [r4, #12]
 8019afa:	9b00      	ldr	r3, [sp, #0]
 8019afc:	6163      	str	r3, [r4, #20]
 8019afe:	9b01      	ldr	r3, [sp, #4]
 8019b00:	6120      	str	r0, [r4, #16]
 8019b02:	b15b      	cbz	r3, 8019b1c <__smakebuf_r+0x74>
 8019b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019b08:	4630      	mov	r0, r6
 8019b0a:	f001 fce7 	bl	801b4dc <_isatty_r>
 8019b0e:	b128      	cbz	r0, 8019b1c <__smakebuf_r+0x74>
 8019b10:	89a3      	ldrh	r3, [r4, #12]
 8019b12:	f023 0303 	bic.w	r3, r3, #3
 8019b16:	f043 0301 	orr.w	r3, r3, #1
 8019b1a:	81a3      	strh	r3, [r4, #12]
 8019b1c:	89a3      	ldrh	r3, [r4, #12]
 8019b1e:	431d      	orrs	r5, r3
 8019b20:	81a5      	strh	r5, [r4, #12]
 8019b22:	e7cd      	b.n	8019ac0 <__smakebuf_r+0x18>
 8019b24:	0801924d 	.word	0x0801924d

08019b28 <malloc>:
 8019b28:	4b02      	ldr	r3, [pc, #8]	; (8019b34 <malloc+0xc>)
 8019b2a:	4601      	mov	r1, r0
 8019b2c:	6818      	ldr	r0, [r3, #0]
 8019b2e:	f000 bc71 	b.w	801a414 <_malloc_r>
 8019b32:	bf00      	nop
 8019b34:	2000002c 	.word	0x2000002c

08019b38 <__ascii_mbtowc>:
 8019b38:	b082      	sub	sp, #8
 8019b3a:	b901      	cbnz	r1, 8019b3e <__ascii_mbtowc+0x6>
 8019b3c:	a901      	add	r1, sp, #4
 8019b3e:	b142      	cbz	r2, 8019b52 <__ascii_mbtowc+0x1a>
 8019b40:	b14b      	cbz	r3, 8019b56 <__ascii_mbtowc+0x1e>
 8019b42:	7813      	ldrb	r3, [r2, #0]
 8019b44:	600b      	str	r3, [r1, #0]
 8019b46:	7812      	ldrb	r2, [r2, #0]
 8019b48:	1c10      	adds	r0, r2, #0
 8019b4a:	bf18      	it	ne
 8019b4c:	2001      	movne	r0, #1
 8019b4e:	b002      	add	sp, #8
 8019b50:	4770      	bx	lr
 8019b52:	4610      	mov	r0, r2
 8019b54:	e7fb      	b.n	8019b4e <__ascii_mbtowc+0x16>
 8019b56:	f06f 0001 	mvn.w	r0, #1
 8019b5a:	e7f8      	b.n	8019b4e <__ascii_mbtowc+0x16>

08019b5c <_Balloc>:
 8019b5c:	b570      	push	{r4, r5, r6, lr}
 8019b5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019b60:	4604      	mov	r4, r0
 8019b62:	460e      	mov	r6, r1
 8019b64:	b93d      	cbnz	r5, 8019b76 <_Balloc+0x1a>
 8019b66:	2010      	movs	r0, #16
 8019b68:	f7ff ffde 	bl	8019b28 <malloc>
 8019b6c:	6260      	str	r0, [r4, #36]	; 0x24
 8019b6e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019b72:	6005      	str	r5, [r0, #0]
 8019b74:	60c5      	str	r5, [r0, #12]
 8019b76:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019b78:	68eb      	ldr	r3, [r5, #12]
 8019b7a:	b183      	cbz	r3, 8019b9e <_Balloc+0x42>
 8019b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019b7e:	68db      	ldr	r3, [r3, #12]
 8019b80:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8019b84:	b9b8      	cbnz	r0, 8019bb6 <_Balloc+0x5a>
 8019b86:	2101      	movs	r1, #1
 8019b88:	fa01 f506 	lsl.w	r5, r1, r6
 8019b8c:	1d6a      	adds	r2, r5, #5
 8019b8e:	0092      	lsls	r2, r2, #2
 8019b90:	4620      	mov	r0, r4
 8019b92:	f000 fbe2 	bl	801a35a <_calloc_r>
 8019b96:	b160      	cbz	r0, 8019bb2 <_Balloc+0x56>
 8019b98:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8019b9c:	e00e      	b.n	8019bbc <_Balloc+0x60>
 8019b9e:	2221      	movs	r2, #33	; 0x21
 8019ba0:	2104      	movs	r1, #4
 8019ba2:	4620      	mov	r0, r4
 8019ba4:	f000 fbd9 	bl	801a35a <_calloc_r>
 8019ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019baa:	60e8      	str	r0, [r5, #12]
 8019bac:	68db      	ldr	r3, [r3, #12]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d1e4      	bne.n	8019b7c <_Balloc+0x20>
 8019bb2:	2000      	movs	r0, #0
 8019bb4:	bd70      	pop	{r4, r5, r6, pc}
 8019bb6:	6802      	ldr	r2, [r0, #0]
 8019bb8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019bc2:	e7f7      	b.n	8019bb4 <_Balloc+0x58>

08019bc4 <_Bfree>:
 8019bc4:	b570      	push	{r4, r5, r6, lr}
 8019bc6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8019bc8:	4606      	mov	r6, r0
 8019bca:	460d      	mov	r5, r1
 8019bcc:	b93c      	cbnz	r4, 8019bde <_Bfree+0x1a>
 8019bce:	2010      	movs	r0, #16
 8019bd0:	f7ff ffaa 	bl	8019b28 <malloc>
 8019bd4:	6270      	str	r0, [r6, #36]	; 0x24
 8019bd6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019bda:	6004      	str	r4, [r0, #0]
 8019bdc:	60c4      	str	r4, [r0, #12]
 8019bde:	b13d      	cbz	r5, 8019bf0 <_Bfree+0x2c>
 8019be0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019be2:	686a      	ldr	r2, [r5, #4]
 8019be4:	68db      	ldr	r3, [r3, #12]
 8019be6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019bea:	6029      	str	r1, [r5, #0]
 8019bec:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8019bf0:	bd70      	pop	{r4, r5, r6, pc}

08019bf2 <__multadd>:
 8019bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bf6:	690d      	ldr	r5, [r1, #16]
 8019bf8:	461f      	mov	r7, r3
 8019bfa:	4606      	mov	r6, r0
 8019bfc:	460c      	mov	r4, r1
 8019bfe:	f101 0c14 	add.w	ip, r1, #20
 8019c02:	2300      	movs	r3, #0
 8019c04:	f8dc 0000 	ldr.w	r0, [ip]
 8019c08:	b281      	uxth	r1, r0
 8019c0a:	fb02 7101 	mla	r1, r2, r1, r7
 8019c0e:	0c0f      	lsrs	r7, r1, #16
 8019c10:	0c00      	lsrs	r0, r0, #16
 8019c12:	fb02 7000 	mla	r0, r2, r0, r7
 8019c16:	b289      	uxth	r1, r1
 8019c18:	3301      	adds	r3, #1
 8019c1a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8019c1e:	429d      	cmp	r5, r3
 8019c20:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8019c24:	f84c 1b04 	str.w	r1, [ip], #4
 8019c28:	dcec      	bgt.n	8019c04 <__multadd+0x12>
 8019c2a:	b1d7      	cbz	r7, 8019c62 <__multadd+0x70>
 8019c2c:	68a3      	ldr	r3, [r4, #8]
 8019c2e:	42ab      	cmp	r3, r5
 8019c30:	dc12      	bgt.n	8019c58 <__multadd+0x66>
 8019c32:	6861      	ldr	r1, [r4, #4]
 8019c34:	4630      	mov	r0, r6
 8019c36:	3101      	adds	r1, #1
 8019c38:	f7ff ff90 	bl	8019b5c <_Balloc>
 8019c3c:	6922      	ldr	r2, [r4, #16]
 8019c3e:	3202      	adds	r2, #2
 8019c40:	f104 010c 	add.w	r1, r4, #12
 8019c44:	4680      	mov	r8, r0
 8019c46:	0092      	lsls	r2, r2, #2
 8019c48:	300c      	adds	r0, #12
 8019c4a:	f7fc fca1 	bl	8016590 <memcpy>
 8019c4e:	4621      	mov	r1, r4
 8019c50:	4630      	mov	r0, r6
 8019c52:	f7ff ffb7 	bl	8019bc4 <_Bfree>
 8019c56:	4644      	mov	r4, r8
 8019c58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019c5c:	3501      	adds	r5, #1
 8019c5e:	615f      	str	r7, [r3, #20]
 8019c60:	6125      	str	r5, [r4, #16]
 8019c62:	4620      	mov	r0, r4
 8019c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019c68 <__s2b>:
 8019c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c6c:	460c      	mov	r4, r1
 8019c6e:	4615      	mov	r5, r2
 8019c70:	461f      	mov	r7, r3
 8019c72:	2209      	movs	r2, #9
 8019c74:	3308      	adds	r3, #8
 8019c76:	4606      	mov	r6, r0
 8019c78:	fb93 f3f2 	sdiv	r3, r3, r2
 8019c7c:	2100      	movs	r1, #0
 8019c7e:	2201      	movs	r2, #1
 8019c80:	429a      	cmp	r2, r3
 8019c82:	db20      	blt.n	8019cc6 <__s2b+0x5e>
 8019c84:	4630      	mov	r0, r6
 8019c86:	f7ff ff69 	bl	8019b5c <_Balloc>
 8019c8a:	9b08      	ldr	r3, [sp, #32]
 8019c8c:	6143      	str	r3, [r0, #20]
 8019c8e:	2d09      	cmp	r5, #9
 8019c90:	f04f 0301 	mov.w	r3, #1
 8019c94:	6103      	str	r3, [r0, #16]
 8019c96:	dd19      	ble.n	8019ccc <__s2b+0x64>
 8019c98:	f104 0809 	add.w	r8, r4, #9
 8019c9c:	46c1      	mov	r9, r8
 8019c9e:	442c      	add	r4, r5
 8019ca0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8019ca4:	4601      	mov	r1, r0
 8019ca6:	3b30      	subs	r3, #48	; 0x30
 8019ca8:	220a      	movs	r2, #10
 8019caa:	4630      	mov	r0, r6
 8019cac:	f7ff ffa1 	bl	8019bf2 <__multadd>
 8019cb0:	45a1      	cmp	r9, r4
 8019cb2:	d1f5      	bne.n	8019ca0 <__s2b+0x38>
 8019cb4:	eb08 0405 	add.w	r4, r8, r5
 8019cb8:	3c08      	subs	r4, #8
 8019cba:	1b2d      	subs	r5, r5, r4
 8019cbc:	1963      	adds	r3, r4, r5
 8019cbe:	42bb      	cmp	r3, r7
 8019cc0:	db07      	blt.n	8019cd2 <__s2b+0x6a>
 8019cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cc6:	0052      	lsls	r2, r2, #1
 8019cc8:	3101      	adds	r1, #1
 8019cca:	e7d9      	b.n	8019c80 <__s2b+0x18>
 8019ccc:	340a      	adds	r4, #10
 8019cce:	2509      	movs	r5, #9
 8019cd0:	e7f3      	b.n	8019cba <__s2b+0x52>
 8019cd2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019cd6:	4601      	mov	r1, r0
 8019cd8:	3b30      	subs	r3, #48	; 0x30
 8019cda:	220a      	movs	r2, #10
 8019cdc:	4630      	mov	r0, r6
 8019cde:	f7ff ff88 	bl	8019bf2 <__multadd>
 8019ce2:	e7eb      	b.n	8019cbc <__s2b+0x54>

08019ce4 <__hi0bits>:
 8019ce4:	0c02      	lsrs	r2, r0, #16
 8019ce6:	0412      	lsls	r2, r2, #16
 8019ce8:	4603      	mov	r3, r0
 8019cea:	b9b2      	cbnz	r2, 8019d1a <__hi0bits+0x36>
 8019cec:	0403      	lsls	r3, r0, #16
 8019cee:	2010      	movs	r0, #16
 8019cf0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019cf4:	bf04      	itt	eq
 8019cf6:	021b      	lsleq	r3, r3, #8
 8019cf8:	3008      	addeq	r0, #8
 8019cfa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019cfe:	bf04      	itt	eq
 8019d00:	011b      	lsleq	r3, r3, #4
 8019d02:	3004      	addeq	r0, #4
 8019d04:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019d08:	bf04      	itt	eq
 8019d0a:	009b      	lsleq	r3, r3, #2
 8019d0c:	3002      	addeq	r0, #2
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	db06      	blt.n	8019d20 <__hi0bits+0x3c>
 8019d12:	005b      	lsls	r3, r3, #1
 8019d14:	d503      	bpl.n	8019d1e <__hi0bits+0x3a>
 8019d16:	3001      	adds	r0, #1
 8019d18:	4770      	bx	lr
 8019d1a:	2000      	movs	r0, #0
 8019d1c:	e7e8      	b.n	8019cf0 <__hi0bits+0xc>
 8019d1e:	2020      	movs	r0, #32
 8019d20:	4770      	bx	lr

08019d22 <__lo0bits>:
 8019d22:	6803      	ldr	r3, [r0, #0]
 8019d24:	f013 0207 	ands.w	r2, r3, #7
 8019d28:	4601      	mov	r1, r0
 8019d2a:	d00b      	beq.n	8019d44 <__lo0bits+0x22>
 8019d2c:	07da      	lsls	r2, r3, #31
 8019d2e:	d423      	bmi.n	8019d78 <__lo0bits+0x56>
 8019d30:	0798      	lsls	r0, r3, #30
 8019d32:	bf49      	itett	mi
 8019d34:	085b      	lsrmi	r3, r3, #1
 8019d36:	089b      	lsrpl	r3, r3, #2
 8019d38:	2001      	movmi	r0, #1
 8019d3a:	600b      	strmi	r3, [r1, #0]
 8019d3c:	bf5c      	itt	pl
 8019d3e:	600b      	strpl	r3, [r1, #0]
 8019d40:	2002      	movpl	r0, #2
 8019d42:	4770      	bx	lr
 8019d44:	b298      	uxth	r0, r3
 8019d46:	b9a8      	cbnz	r0, 8019d74 <__lo0bits+0x52>
 8019d48:	0c1b      	lsrs	r3, r3, #16
 8019d4a:	2010      	movs	r0, #16
 8019d4c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019d50:	bf04      	itt	eq
 8019d52:	0a1b      	lsreq	r3, r3, #8
 8019d54:	3008      	addeq	r0, #8
 8019d56:	071a      	lsls	r2, r3, #28
 8019d58:	bf04      	itt	eq
 8019d5a:	091b      	lsreq	r3, r3, #4
 8019d5c:	3004      	addeq	r0, #4
 8019d5e:	079a      	lsls	r2, r3, #30
 8019d60:	bf04      	itt	eq
 8019d62:	089b      	lsreq	r3, r3, #2
 8019d64:	3002      	addeq	r0, #2
 8019d66:	07da      	lsls	r2, r3, #31
 8019d68:	d402      	bmi.n	8019d70 <__lo0bits+0x4e>
 8019d6a:	085b      	lsrs	r3, r3, #1
 8019d6c:	d006      	beq.n	8019d7c <__lo0bits+0x5a>
 8019d6e:	3001      	adds	r0, #1
 8019d70:	600b      	str	r3, [r1, #0]
 8019d72:	4770      	bx	lr
 8019d74:	4610      	mov	r0, r2
 8019d76:	e7e9      	b.n	8019d4c <__lo0bits+0x2a>
 8019d78:	2000      	movs	r0, #0
 8019d7a:	4770      	bx	lr
 8019d7c:	2020      	movs	r0, #32
 8019d7e:	4770      	bx	lr

08019d80 <__i2b>:
 8019d80:	b510      	push	{r4, lr}
 8019d82:	460c      	mov	r4, r1
 8019d84:	2101      	movs	r1, #1
 8019d86:	f7ff fee9 	bl	8019b5c <_Balloc>
 8019d8a:	2201      	movs	r2, #1
 8019d8c:	6144      	str	r4, [r0, #20]
 8019d8e:	6102      	str	r2, [r0, #16]
 8019d90:	bd10      	pop	{r4, pc}

08019d92 <__multiply>:
 8019d92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d96:	4614      	mov	r4, r2
 8019d98:	690a      	ldr	r2, [r1, #16]
 8019d9a:	6923      	ldr	r3, [r4, #16]
 8019d9c:	429a      	cmp	r2, r3
 8019d9e:	bfb8      	it	lt
 8019da0:	460b      	movlt	r3, r1
 8019da2:	4688      	mov	r8, r1
 8019da4:	bfbc      	itt	lt
 8019da6:	46a0      	movlt	r8, r4
 8019da8:	461c      	movlt	r4, r3
 8019daa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019dae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019db2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019db6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019dba:	eb07 0609 	add.w	r6, r7, r9
 8019dbe:	42b3      	cmp	r3, r6
 8019dc0:	bfb8      	it	lt
 8019dc2:	3101      	addlt	r1, #1
 8019dc4:	f7ff feca 	bl	8019b5c <_Balloc>
 8019dc8:	f100 0514 	add.w	r5, r0, #20
 8019dcc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8019dd0:	462b      	mov	r3, r5
 8019dd2:	2200      	movs	r2, #0
 8019dd4:	4573      	cmp	r3, lr
 8019dd6:	d316      	bcc.n	8019e06 <__multiply+0x74>
 8019dd8:	f104 0214 	add.w	r2, r4, #20
 8019ddc:	f108 0114 	add.w	r1, r8, #20
 8019de0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8019de4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8019de8:	9300      	str	r3, [sp, #0]
 8019dea:	9b00      	ldr	r3, [sp, #0]
 8019dec:	9201      	str	r2, [sp, #4]
 8019dee:	4293      	cmp	r3, r2
 8019df0:	d80c      	bhi.n	8019e0c <__multiply+0x7a>
 8019df2:	2e00      	cmp	r6, #0
 8019df4:	dd03      	ble.n	8019dfe <__multiply+0x6c>
 8019df6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d05d      	beq.n	8019eba <__multiply+0x128>
 8019dfe:	6106      	str	r6, [r0, #16]
 8019e00:	b003      	add	sp, #12
 8019e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e06:	f843 2b04 	str.w	r2, [r3], #4
 8019e0a:	e7e3      	b.n	8019dd4 <__multiply+0x42>
 8019e0c:	f8b2 b000 	ldrh.w	fp, [r2]
 8019e10:	f1bb 0f00 	cmp.w	fp, #0
 8019e14:	d023      	beq.n	8019e5e <__multiply+0xcc>
 8019e16:	4689      	mov	r9, r1
 8019e18:	46ac      	mov	ip, r5
 8019e1a:	f04f 0800 	mov.w	r8, #0
 8019e1e:	f859 4b04 	ldr.w	r4, [r9], #4
 8019e22:	f8dc a000 	ldr.w	sl, [ip]
 8019e26:	b2a3      	uxth	r3, r4
 8019e28:	fa1f fa8a 	uxth.w	sl, sl
 8019e2c:	fb0b a303 	mla	r3, fp, r3, sl
 8019e30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019e34:	f8dc 4000 	ldr.w	r4, [ip]
 8019e38:	4443      	add	r3, r8
 8019e3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8019e3e:	fb0b 840a 	mla	r4, fp, sl, r8
 8019e42:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8019e46:	46e2      	mov	sl, ip
 8019e48:	b29b      	uxth	r3, r3
 8019e4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8019e4e:	454f      	cmp	r7, r9
 8019e50:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8019e54:	f84a 3b04 	str.w	r3, [sl], #4
 8019e58:	d82b      	bhi.n	8019eb2 <__multiply+0x120>
 8019e5a:	f8cc 8004 	str.w	r8, [ip, #4]
 8019e5e:	9b01      	ldr	r3, [sp, #4]
 8019e60:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8019e64:	3204      	adds	r2, #4
 8019e66:	f1ba 0f00 	cmp.w	sl, #0
 8019e6a:	d020      	beq.n	8019eae <__multiply+0x11c>
 8019e6c:	682b      	ldr	r3, [r5, #0]
 8019e6e:	4689      	mov	r9, r1
 8019e70:	46a8      	mov	r8, r5
 8019e72:	f04f 0b00 	mov.w	fp, #0
 8019e76:	f8b9 c000 	ldrh.w	ip, [r9]
 8019e7a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8019e7e:	fb0a 440c 	mla	r4, sl, ip, r4
 8019e82:	445c      	add	r4, fp
 8019e84:	46c4      	mov	ip, r8
 8019e86:	b29b      	uxth	r3, r3
 8019e88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8019e8c:	f84c 3b04 	str.w	r3, [ip], #4
 8019e90:	f859 3b04 	ldr.w	r3, [r9], #4
 8019e94:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8019e98:	0c1b      	lsrs	r3, r3, #16
 8019e9a:	fb0a b303 	mla	r3, sl, r3, fp
 8019e9e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8019ea2:	454f      	cmp	r7, r9
 8019ea4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8019ea8:	d805      	bhi.n	8019eb6 <__multiply+0x124>
 8019eaa:	f8c8 3004 	str.w	r3, [r8, #4]
 8019eae:	3504      	adds	r5, #4
 8019eb0:	e79b      	b.n	8019dea <__multiply+0x58>
 8019eb2:	46d4      	mov	ip, sl
 8019eb4:	e7b3      	b.n	8019e1e <__multiply+0x8c>
 8019eb6:	46e0      	mov	r8, ip
 8019eb8:	e7dd      	b.n	8019e76 <__multiply+0xe4>
 8019eba:	3e01      	subs	r6, #1
 8019ebc:	e799      	b.n	8019df2 <__multiply+0x60>
	...

08019ec0 <__pow5mult>:
 8019ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ec4:	4615      	mov	r5, r2
 8019ec6:	f012 0203 	ands.w	r2, r2, #3
 8019eca:	4606      	mov	r6, r0
 8019ecc:	460f      	mov	r7, r1
 8019ece:	d007      	beq.n	8019ee0 <__pow5mult+0x20>
 8019ed0:	3a01      	subs	r2, #1
 8019ed2:	4c21      	ldr	r4, [pc, #132]	; (8019f58 <__pow5mult+0x98>)
 8019ed4:	2300      	movs	r3, #0
 8019ed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019eda:	f7ff fe8a 	bl	8019bf2 <__multadd>
 8019ede:	4607      	mov	r7, r0
 8019ee0:	10ad      	asrs	r5, r5, #2
 8019ee2:	d035      	beq.n	8019f50 <__pow5mult+0x90>
 8019ee4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019ee6:	b93c      	cbnz	r4, 8019ef8 <__pow5mult+0x38>
 8019ee8:	2010      	movs	r0, #16
 8019eea:	f7ff fe1d 	bl	8019b28 <malloc>
 8019eee:	6270      	str	r0, [r6, #36]	; 0x24
 8019ef0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019ef4:	6004      	str	r4, [r0, #0]
 8019ef6:	60c4      	str	r4, [r0, #12]
 8019ef8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019efc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019f00:	b94c      	cbnz	r4, 8019f16 <__pow5mult+0x56>
 8019f02:	f240 2171 	movw	r1, #625	; 0x271
 8019f06:	4630      	mov	r0, r6
 8019f08:	f7ff ff3a 	bl	8019d80 <__i2b>
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019f12:	4604      	mov	r4, r0
 8019f14:	6003      	str	r3, [r0, #0]
 8019f16:	f04f 0800 	mov.w	r8, #0
 8019f1a:	07eb      	lsls	r3, r5, #31
 8019f1c:	d50a      	bpl.n	8019f34 <__pow5mult+0x74>
 8019f1e:	4639      	mov	r1, r7
 8019f20:	4622      	mov	r2, r4
 8019f22:	4630      	mov	r0, r6
 8019f24:	f7ff ff35 	bl	8019d92 <__multiply>
 8019f28:	4639      	mov	r1, r7
 8019f2a:	4681      	mov	r9, r0
 8019f2c:	4630      	mov	r0, r6
 8019f2e:	f7ff fe49 	bl	8019bc4 <_Bfree>
 8019f32:	464f      	mov	r7, r9
 8019f34:	106d      	asrs	r5, r5, #1
 8019f36:	d00b      	beq.n	8019f50 <__pow5mult+0x90>
 8019f38:	6820      	ldr	r0, [r4, #0]
 8019f3a:	b938      	cbnz	r0, 8019f4c <__pow5mult+0x8c>
 8019f3c:	4622      	mov	r2, r4
 8019f3e:	4621      	mov	r1, r4
 8019f40:	4630      	mov	r0, r6
 8019f42:	f7ff ff26 	bl	8019d92 <__multiply>
 8019f46:	6020      	str	r0, [r4, #0]
 8019f48:	f8c0 8000 	str.w	r8, [r0]
 8019f4c:	4604      	mov	r4, r0
 8019f4e:	e7e4      	b.n	8019f1a <__pow5mult+0x5a>
 8019f50:	4638      	mov	r0, r7
 8019f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f56:	bf00      	nop
 8019f58:	0801ba90 	.word	0x0801ba90

08019f5c <__lshift>:
 8019f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f60:	460c      	mov	r4, r1
 8019f62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019f66:	6923      	ldr	r3, [r4, #16]
 8019f68:	6849      	ldr	r1, [r1, #4]
 8019f6a:	eb0a 0903 	add.w	r9, sl, r3
 8019f6e:	68a3      	ldr	r3, [r4, #8]
 8019f70:	4607      	mov	r7, r0
 8019f72:	4616      	mov	r6, r2
 8019f74:	f109 0501 	add.w	r5, r9, #1
 8019f78:	42ab      	cmp	r3, r5
 8019f7a:	db32      	blt.n	8019fe2 <__lshift+0x86>
 8019f7c:	4638      	mov	r0, r7
 8019f7e:	f7ff fded 	bl	8019b5c <_Balloc>
 8019f82:	2300      	movs	r3, #0
 8019f84:	4680      	mov	r8, r0
 8019f86:	f100 0114 	add.w	r1, r0, #20
 8019f8a:	461a      	mov	r2, r3
 8019f8c:	4553      	cmp	r3, sl
 8019f8e:	db2b      	blt.n	8019fe8 <__lshift+0x8c>
 8019f90:	6920      	ldr	r0, [r4, #16]
 8019f92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019f96:	f104 0314 	add.w	r3, r4, #20
 8019f9a:	f016 021f 	ands.w	r2, r6, #31
 8019f9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019fa2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019fa6:	d025      	beq.n	8019ff4 <__lshift+0x98>
 8019fa8:	f1c2 0e20 	rsb	lr, r2, #32
 8019fac:	2000      	movs	r0, #0
 8019fae:	681e      	ldr	r6, [r3, #0]
 8019fb0:	468a      	mov	sl, r1
 8019fb2:	4096      	lsls	r6, r2
 8019fb4:	4330      	orrs	r0, r6
 8019fb6:	f84a 0b04 	str.w	r0, [sl], #4
 8019fba:	f853 0b04 	ldr.w	r0, [r3], #4
 8019fbe:	459c      	cmp	ip, r3
 8019fc0:	fa20 f00e 	lsr.w	r0, r0, lr
 8019fc4:	d814      	bhi.n	8019ff0 <__lshift+0x94>
 8019fc6:	6048      	str	r0, [r1, #4]
 8019fc8:	b108      	cbz	r0, 8019fce <__lshift+0x72>
 8019fca:	f109 0502 	add.w	r5, r9, #2
 8019fce:	3d01      	subs	r5, #1
 8019fd0:	4638      	mov	r0, r7
 8019fd2:	f8c8 5010 	str.w	r5, [r8, #16]
 8019fd6:	4621      	mov	r1, r4
 8019fd8:	f7ff fdf4 	bl	8019bc4 <_Bfree>
 8019fdc:	4640      	mov	r0, r8
 8019fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fe2:	3101      	adds	r1, #1
 8019fe4:	005b      	lsls	r3, r3, #1
 8019fe6:	e7c7      	b.n	8019f78 <__lshift+0x1c>
 8019fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8019fec:	3301      	adds	r3, #1
 8019fee:	e7cd      	b.n	8019f8c <__lshift+0x30>
 8019ff0:	4651      	mov	r1, sl
 8019ff2:	e7dc      	b.n	8019fae <__lshift+0x52>
 8019ff4:	3904      	subs	r1, #4
 8019ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ffa:	f841 2f04 	str.w	r2, [r1, #4]!
 8019ffe:	459c      	cmp	ip, r3
 801a000:	d8f9      	bhi.n	8019ff6 <__lshift+0x9a>
 801a002:	e7e4      	b.n	8019fce <__lshift+0x72>

0801a004 <__mcmp>:
 801a004:	6903      	ldr	r3, [r0, #16]
 801a006:	690a      	ldr	r2, [r1, #16]
 801a008:	1a9b      	subs	r3, r3, r2
 801a00a:	b530      	push	{r4, r5, lr}
 801a00c:	d10c      	bne.n	801a028 <__mcmp+0x24>
 801a00e:	0092      	lsls	r2, r2, #2
 801a010:	3014      	adds	r0, #20
 801a012:	3114      	adds	r1, #20
 801a014:	1884      	adds	r4, r0, r2
 801a016:	4411      	add	r1, r2
 801a018:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a01c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a020:	4295      	cmp	r5, r2
 801a022:	d003      	beq.n	801a02c <__mcmp+0x28>
 801a024:	d305      	bcc.n	801a032 <__mcmp+0x2e>
 801a026:	2301      	movs	r3, #1
 801a028:	4618      	mov	r0, r3
 801a02a:	bd30      	pop	{r4, r5, pc}
 801a02c:	42a0      	cmp	r0, r4
 801a02e:	d3f3      	bcc.n	801a018 <__mcmp+0x14>
 801a030:	e7fa      	b.n	801a028 <__mcmp+0x24>
 801a032:	f04f 33ff 	mov.w	r3, #4294967295
 801a036:	e7f7      	b.n	801a028 <__mcmp+0x24>

0801a038 <__mdiff>:
 801a038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a03c:	460d      	mov	r5, r1
 801a03e:	4607      	mov	r7, r0
 801a040:	4611      	mov	r1, r2
 801a042:	4628      	mov	r0, r5
 801a044:	4614      	mov	r4, r2
 801a046:	f7ff ffdd 	bl	801a004 <__mcmp>
 801a04a:	1e06      	subs	r6, r0, #0
 801a04c:	d108      	bne.n	801a060 <__mdiff+0x28>
 801a04e:	4631      	mov	r1, r6
 801a050:	4638      	mov	r0, r7
 801a052:	f7ff fd83 	bl	8019b5c <_Balloc>
 801a056:	2301      	movs	r3, #1
 801a058:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801a05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a060:	bfa4      	itt	ge
 801a062:	4623      	movge	r3, r4
 801a064:	462c      	movge	r4, r5
 801a066:	4638      	mov	r0, r7
 801a068:	6861      	ldr	r1, [r4, #4]
 801a06a:	bfa6      	itte	ge
 801a06c:	461d      	movge	r5, r3
 801a06e:	2600      	movge	r6, #0
 801a070:	2601      	movlt	r6, #1
 801a072:	f7ff fd73 	bl	8019b5c <_Balloc>
 801a076:	692b      	ldr	r3, [r5, #16]
 801a078:	60c6      	str	r6, [r0, #12]
 801a07a:	6926      	ldr	r6, [r4, #16]
 801a07c:	f105 0914 	add.w	r9, r5, #20
 801a080:	f104 0214 	add.w	r2, r4, #20
 801a084:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801a088:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801a08c:	f100 0514 	add.w	r5, r0, #20
 801a090:	f04f 0e00 	mov.w	lr, #0
 801a094:	f852 ab04 	ldr.w	sl, [r2], #4
 801a098:	f859 4b04 	ldr.w	r4, [r9], #4
 801a09c:	fa1e f18a 	uxtah	r1, lr, sl
 801a0a0:	b2a3      	uxth	r3, r4
 801a0a2:	1ac9      	subs	r1, r1, r3
 801a0a4:	0c23      	lsrs	r3, r4, #16
 801a0a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801a0aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801a0ae:	b289      	uxth	r1, r1
 801a0b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801a0b4:	45c8      	cmp	r8, r9
 801a0b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801a0ba:	4694      	mov	ip, r2
 801a0bc:	f845 3b04 	str.w	r3, [r5], #4
 801a0c0:	d8e8      	bhi.n	801a094 <__mdiff+0x5c>
 801a0c2:	45bc      	cmp	ip, r7
 801a0c4:	d304      	bcc.n	801a0d0 <__mdiff+0x98>
 801a0c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801a0ca:	b183      	cbz	r3, 801a0ee <__mdiff+0xb6>
 801a0cc:	6106      	str	r6, [r0, #16]
 801a0ce:	e7c5      	b.n	801a05c <__mdiff+0x24>
 801a0d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a0d4:	fa1e f381 	uxtah	r3, lr, r1
 801a0d8:	141a      	asrs	r2, r3, #16
 801a0da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a0de:	b29b      	uxth	r3, r3
 801a0e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a0e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801a0e8:	f845 3b04 	str.w	r3, [r5], #4
 801a0ec:	e7e9      	b.n	801a0c2 <__mdiff+0x8a>
 801a0ee:	3e01      	subs	r6, #1
 801a0f0:	e7e9      	b.n	801a0c6 <__mdiff+0x8e>
	...

0801a0f4 <__ulp>:
 801a0f4:	4b12      	ldr	r3, [pc, #72]	; (801a140 <__ulp+0x4c>)
 801a0f6:	ee10 2a90 	vmov	r2, s1
 801a0fa:	401a      	ands	r2, r3
 801a0fc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801a100:	2b00      	cmp	r3, #0
 801a102:	dd04      	ble.n	801a10e <__ulp+0x1a>
 801a104:	2000      	movs	r0, #0
 801a106:	4619      	mov	r1, r3
 801a108:	ec41 0b10 	vmov	d0, r0, r1
 801a10c:	4770      	bx	lr
 801a10e:	425b      	negs	r3, r3
 801a110:	151b      	asrs	r3, r3, #20
 801a112:	2b13      	cmp	r3, #19
 801a114:	f04f 0000 	mov.w	r0, #0
 801a118:	f04f 0100 	mov.w	r1, #0
 801a11c:	dc04      	bgt.n	801a128 <__ulp+0x34>
 801a11e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a122:	fa42 f103 	asr.w	r1, r2, r3
 801a126:	e7ef      	b.n	801a108 <__ulp+0x14>
 801a128:	3b14      	subs	r3, #20
 801a12a:	2b1e      	cmp	r3, #30
 801a12c:	f04f 0201 	mov.w	r2, #1
 801a130:	bfda      	itte	le
 801a132:	f1c3 031f 	rsble	r3, r3, #31
 801a136:	fa02 f303 	lslle.w	r3, r2, r3
 801a13a:	4613      	movgt	r3, r2
 801a13c:	4618      	mov	r0, r3
 801a13e:	e7e3      	b.n	801a108 <__ulp+0x14>
 801a140:	7ff00000 	.word	0x7ff00000

0801a144 <__b2d>:
 801a144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a146:	6905      	ldr	r5, [r0, #16]
 801a148:	f100 0714 	add.w	r7, r0, #20
 801a14c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a150:	1f2e      	subs	r6, r5, #4
 801a152:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a156:	4620      	mov	r0, r4
 801a158:	f7ff fdc4 	bl	8019ce4 <__hi0bits>
 801a15c:	f1c0 0320 	rsb	r3, r0, #32
 801a160:	280a      	cmp	r0, #10
 801a162:	600b      	str	r3, [r1, #0]
 801a164:	f8df c074 	ldr.w	ip, [pc, #116]	; 801a1dc <__b2d+0x98>
 801a168:	dc14      	bgt.n	801a194 <__b2d+0x50>
 801a16a:	f1c0 0e0b 	rsb	lr, r0, #11
 801a16e:	fa24 f10e 	lsr.w	r1, r4, lr
 801a172:	42b7      	cmp	r7, r6
 801a174:	ea41 030c 	orr.w	r3, r1, ip
 801a178:	bf34      	ite	cc
 801a17a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a17e:	2100      	movcs	r1, #0
 801a180:	3015      	adds	r0, #21
 801a182:	fa04 f000 	lsl.w	r0, r4, r0
 801a186:	fa21 f10e 	lsr.w	r1, r1, lr
 801a18a:	ea40 0201 	orr.w	r2, r0, r1
 801a18e:	ec43 2b10 	vmov	d0, r2, r3
 801a192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a194:	42b7      	cmp	r7, r6
 801a196:	bf3a      	itte	cc
 801a198:	f1a5 0608 	subcc.w	r6, r5, #8
 801a19c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a1a0:	2100      	movcs	r1, #0
 801a1a2:	380b      	subs	r0, #11
 801a1a4:	d015      	beq.n	801a1d2 <__b2d+0x8e>
 801a1a6:	4084      	lsls	r4, r0
 801a1a8:	f1c0 0520 	rsb	r5, r0, #32
 801a1ac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801a1b0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801a1b4:	42be      	cmp	r6, r7
 801a1b6:	fa21 fc05 	lsr.w	ip, r1, r5
 801a1ba:	ea44 030c 	orr.w	r3, r4, ip
 801a1be:	bf8c      	ite	hi
 801a1c0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a1c4:	2400      	movls	r4, #0
 801a1c6:	fa01 f000 	lsl.w	r0, r1, r0
 801a1ca:	40ec      	lsrs	r4, r5
 801a1cc:	ea40 0204 	orr.w	r2, r0, r4
 801a1d0:	e7dd      	b.n	801a18e <__b2d+0x4a>
 801a1d2:	ea44 030c 	orr.w	r3, r4, ip
 801a1d6:	460a      	mov	r2, r1
 801a1d8:	e7d9      	b.n	801a18e <__b2d+0x4a>
 801a1da:	bf00      	nop
 801a1dc:	3ff00000 	.word	0x3ff00000

0801a1e0 <__d2b>:
 801a1e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a1e4:	460e      	mov	r6, r1
 801a1e6:	2101      	movs	r1, #1
 801a1e8:	ec59 8b10 	vmov	r8, r9, d0
 801a1ec:	4615      	mov	r5, r2
 801a1ee:	f7ff fcb5 	bl	8019b5c <_Balloc>
 801a1f2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801a1f6:	4607      	mov	r7, r0
 801a1f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a1fc:	bb34      	cbnz	r4, 801a24c <__d2b+0x6c>
 801a1fe:	9301      	str	r3, [sp, #4]
 801a200:	f1b8 0300 	subs.w	r3, r8, #0
 801a204:	d027      	beq.n	801a256 <__d2b+0x76>
 801a206:	a802      	add	r0, sp, #8
 801a208:	f840 3d08 	str.w	r3, [r0, #-8]!
 801a20c:	f7ff fd89 	bl	8019d22 <__lo0bits>
 801a210:	9900      	ldr	r1, [sp, #0]
 801a212:	b1f0      	cbz	r0, 801a252 <__d2b+0x72>
 801a214:	9a01      	ldr	r2, [sp, #4]
 801a216:	f1c0 0320 	rsb	r3, r0, #32
 801a21a:	fa02 f303 	lsl.w	r3, r2, r3
 801a21e:	430b      	orrs	r3, r1
 801a220:	40c2      	lsrs	r2, r0
 801a222:	617b      	str	r3, [r7, #20]
 801a224:	9201      	str	r2, [sp, #4]
 801a226:	9b01      	ldr	r3, [sp, #4]
 801a228:	61bb      	str	r3, [r7, #24]
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	bf14      	ite	ne
 801a22e:	2102      	movne	r1, #2
 801a230:	2101      	moveq	r1, #1
 801a232:	6139      	str	r1, [r7, #16]
 801a234:	b1c4      	cbz	r4, 801a268 <__d2b+0x88>
 801a236:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801a23a:	4404      	add	r4, r0
 801a23c:	6034      	str	r4, [r6, #0]
 801a23e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a242:	6028      	str	r0, [r5, #0]
 801a244:	4638      	mov	r0, r7
 801a246:	b003      	add	sp, #12
 801a248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a24c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a250:	e7d5      	b.n	801a1fe <__d2b+0x1e>
 801a252:	6179      	str	r1, [r7, #20]
 801a254:	e7e7      	b.n	801a226 <__d2b+0x46>
 801a256:	a801      	add	r0, sp, #4
 801a258:	f7ff fd63 	bl	8019d22 <__lo0bits>
 801a25c:	9b01      	ldr	r3, [sp, #4]
 801a25e:	617b      	str	r3, [r7, #20]
 801a260:	2101      	movs	r1, #1
 801a262:	6139      	str	r1, [r7, #16]
 801a264:	3020      	adds	r0, #32
 801a266:	e7e5      	b.n	801a234 <__d2b+0x54>
 801a268:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801a26c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a270:	6030      	str	r0, [r6, #0]
 801a272:	6918      	ldr	r0, [r3, #16]
 801a274:	f7ff fd36 	bl	8019ce4 <__hi0bits>
 801a278:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801a27c:	e7e1      	b.n	801a242 <__d2b+0x62>

0801a27e <__ratio>:
 801a27e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a282:	4688      	mov	r8, r1
 801a284:	4669      	mov	r1, sp
 801a286:	4681      	mov	r9, r0
 801a288:	f7ff ff5c 	bl	801a144 <__b2d>
 801a28c:	a901      	add	r1, sp, #4
 801a28e:	4640      	mov	r0, r8
 801a290:	ec57 6b10 	vmov	r6, r7, d0
 801a294:	f7ff ff56 	bl	801a144 <__b2d>
 801a298:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a29c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a2a0:	eba3 0c02 	sub.w	ip, r3, r2
 801a2a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a2a8:	1a9b      	subs	r3, r3, r2
 801a2aa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a2ae:	ec5b ab10 	vmov	sl, fp, d0
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	bfce      	itee	gt
 801a2b6:	463a      	movgt	r2, r7
 801a2b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a2bc:	465a      	movle	r2, fp
 801a2be:	4659      	mov	r1, fp
 801a2c0:	463d      	mov	r5, r7
 801a2c2:	bfd4      	ite	le
 801a2c4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801a2c8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801a2cc:	4630      	mov	r0, r6
 801a2ce:	ee10 2a10 	vmov	r2, s0
 801a2d2:	460b      	mov	r3, r1
 801a2d4:	4629      	mov	r1, r5
 801a2d6:	f7ee f9f1 	bl	80086bc <__aeabi_ddiv>
 801a2da:	ec41 0b10 	vmov	d0, r0, r1
 801a2de:	b003      	add	sp, #12
 801a2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a2e4 <__copybits>:
 801a2e4:	3901      	subs	r1, #1
 801a2e6:	b510      	push	{r4, lr}
 801a2e8:	1149      	asrs	r1, r1, #5
 801a2ea:	6914      	ldr	r4, [r2, #16]
 801a2ec:	3101      	adds	r1, #1
 801a2ee:	f102 0314 	add.w	r3, r2, #20
 801a2f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a2f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a2fa:	42a3      	cmp	r3, r4
 801a2fc:	4602      	mov	r2, r0
 801a2fe:	d303      	bcc.n	801a308 <__copybits+0x24>
 801a300:	2300      	movs	r3, #0
 801a302:	428a      	cmp	r2, r1
 801a304:	d305      	bcc.n	801a312 <__copybits+0x2e>
 801a306:	bd10      	pop	{r4, pc}
 801a308:	f853 2b04 	ldr.w	r2, [r3], #4
 801a30c:	f840 2b04 	str.w	r2, [r0], #4
 801a310:	e7f3      	b.n	801a2fa <__copybits+0x16>
 801a312:	f842 3b04 	str.w	r3, [r2], #4
 801a316:	e7f4      	b.n	801a302 <__copybits+0x1e>

0801a318 <__any_on>:
 801a318:	f100 0214 	add.w	r2, r0, #20
 801a31c:	6900      	ldr	r0, [r0, #16]
 801a31e:	114b      	asrs	r3, r1, #5
 801a320:	4298      	cmp	r0, r3
 801a322:	b510      	push	{r4, lr}
 801a324:	db11      	blt.n	801a34a <__any_on+0x32>
 801a326:	dd0a      	ble.n	801a33e <__any_on+0x26>
 801a328:	f011 011f 	ands.w	r1, r1, #31
 801a32c:	d007      	beq.n	801a33e <__any_on+0x26>
 801a32e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a332:	fa24 f001 	lsr.w	r0, r4, r1
 801a336:	fa00 f101 	lsl.w	r1, r0, r1
 801a33a:	428c      	cmp	r4, r1
 801a33c:	d10b      	bne.n	801a356 <__any_on+0x3e>
 801a33e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a342:	4293      	cmp	r3, r2
 801a344:	d803      	bhi.n	801a34e <__any_on+0x36>
 801a346:	2000      	movs	r0, #0
 801a348:	bd10      	pop	{r4, pc}
 801a34a:	4603      	mov	r3, r0
 801a34c:	e7f7      	b.n	801a33e <__any_on+0x26>
 801a34e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a352:	2900      	cmp	r1, #0
 801a354:	d0f5      	beq.n	801a342 <__any_on+0x2a>
 801a356:	2001      	movs	r0, #1
 801a358:	e7f6      	b.n	801a348 <__any_on+0x30>

0801a35a <_calloc_r>:
 801a35a:	b538      	push	{r3, r4, r5, lr}
 801a35c:	fb02 f401 	mul.w	r4, r2, r1
 801a360:	4621      	mov	r1, r4
 801a362:	f000 f857 	bl	801a414 <_malloc_r>
 801a366:	4605      	mov	r5, r0
 801a368:	b118      	cbz	r0, 801a372 <_calloc_r+0x18>
 801a36a:	4622      	mov	r2, r4
 801a36c:	2100      	movs	r1, #0
 801a36e:	f7fc f91a 	bl	80165a6 <memset>
 801a372:	4628      	mov	r0, r5
 801a374:	bd38      	pop	{r3, r4, r5, pc}
	...

0801a378 <_free_r>:
 801a378:	b538      	push	{r3, r4, r5, lr}
 801a37a:	4605      	mov	r5, r0
 801a37c:	2900      	cmp	r1, #0
 801a37e:	d045      	beq.n	801a40c <_free_r+0x94>
 801a380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a384:	1f0c      	subs	r4, r1, #4
 801a386:	2b00      	cmp	r3, #0
 801a388:	bfb8      	it	lt
 801a38a:	18e4      	addlt	r4, r4, r3
 801a38c:	f001 f8e1 	bl	801b552 <__malloc_lock>
 801a390:	4a1f      	ldr	r2, [pc, #124]	; (801a410 <_free_r+0x98>)
 801a392:	6813      	ldr	r3, [r2, #0]
 801a394:	4610      	mov	r0, r2
 801a396:	b933      	cbnz	r3, 801a3a6 <_free_r+0x2e>
 801a398:	6063      	str	r3, [r4, #4]
 801a39a:	6014      	str	r4, [r2, #0]
 801a39c:	4628      	mov	r0, r5
 801a39e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a3a2:	f001 b8d7 	b.w	801b554 <__malloc_unlock>
 801a3a6:	42a3      	cmp	r3, r4
 801a3a8:	d90c      	bls.n	801a3c4 <_free_r+0x4c>
 801a3aa:	6821      	ldr	r1, [r4, #0]
 801a3ac:	1862      	adds	r2, r4, r1
 801a3ae:	4293      	cmp	r3, r2
 801a3b0:	bf04      	itt	eq
 801a3b2:	681a      	ldreq	r2, [r3, #0]
 801a3b4:	685b      	ldreq	r3, [r3, #4]
 801a3b6:	6063      	str	r3, [r4, #4]
 801a3b8:	bf04      	itt	eq
 801a3ba:	1852      	addeq	r2, r2, r1
 801a3bc:	6022      	streq	r2, [r4, #0]
 801a3be:	6004      	str	r4, [r0, #0]
 801a3c0:	e7ec      	b.n	801a39c <_free_r+0x24>
 801a3c2:	4613      	mov	r3, r2
 801a3c4:	685a      	ldr	r2, [r3, #4]
 801a3c6:	b10a      	cbz	r2, 801a3cc <_free_r+0x54>
 801a3c8:	42a2      	cmp	r2, r4
 801a3ca:	d9fa      	bls.n	801a3c2 <_free_r+0x4a>
 801a3cc:	6819      	ldr	r1, [r3, #0]
 801a3ce:	1858      	adds	r0, r3, r1
 801a3d0:	42a0      	cmp	r0, r4
 801a3d2:	d10b      	bne.n	801a3ec <_free_r+0x74>
 801a3d4:	6820      	ldr	r0, [r4, #0]
 801a3d6:	4401      	add	r1, r0
 801a3d8:	1858      	adds	r0, r3, r1
 801a3da:	4282      	cmp	r2, r0
 801a3dc:	6019      	str	r1, [r3, #0]
 801a3de:	d1dd      	bne.n	801a39c <_free_r+0x24>
 801a3e0:	6810      	ldr	r0, [r2, #0]
 801a3e2:	6852      	ldr	r2, [r2, #4]
 801a3e4:	605a      	str	r2, [r3, #4]
 801a3e6:	4401      	add	r1, r0
 801a3e8:	6019      	str	r1, [r3, #0]
 801a3ea:	e7d7      	b.n	801a39c <_free_r+0x24>
 801a3ec:	d902      	bls.n	801a3f4 <_free_r+0x7c>
 801a3ee:	230c      	movs	r3, #12
 801a3f0:	602b      	str	r3, [r5, #0]
 801a3f2:	e7d3      	b.n	801a39c <_free_r+0x24>
 801a3f4:	6820      	ldr	r0, [r4, #0]
 801a3f6:	1821      	adds	r1, r4, r0
 801a3f8:	428a      	cmp	r2, r1
 801a3fa:	bf04      	itt	eq
 801a3fc:	6811      	ldreq	r1, [r2, #0]
 801a3fe:	6852      	ldreq	r2, [r2, #4]
 801a400:	6062      	str	r2, [r4, #4]
 801a402:	bf04      	itt	eq
 801a404:	1809      	addeq	r1, r1, r0
 801a406:	6021      	streq	r1, [r4, #0]
 801a408:	605c      	str	r4, [r3, #4]
 801a40a:	e7c7      	b.n	801a39c <_free_r+0x24>
 801a40c:	bd38      	pop	{r3, r4, r5, pc}
 801a40e:	bf00      	nop
 801a410:	200004d8 	.word	0x200004d8

0801a414 <_malloc_r>:
 801a414:	b570      	push	{r4, r5, r6, lr}
 801a416:	1ccd      	adds	r5, r1, #3
 801a418:	f025 0503 	bic.w	r5, r5, #3
 801a41c:	3508      	adds	r5, #8
 801a41e:	2d0c      	cmp	r5, #12
 801a420:	bf38      	it	cc
 801a422:	250c      	movcc	r5, #12
 801a424:	2d00      	cmp	r5, #0
 801a426:	4606      	mov	r6, r0
 801a428:	db01      	blt.n	801a42e <_malloc_r+0x1a>
 801a42a:	42a9      	cmp	r1, r5
 801a42c:	d903      	bls.n	801a436 <_malloc_r+0x22>
 801a42e:	230c      	movs	r3, #12
 801a430:	6033      	str	r3, [r6, #0]
 801a432:	2000      	movs	r0, #0
 801a434:	bd70      	pop	{r4, r5, r6, pc}
 801a436:	f001 f88c 	bl	801b552 <__malloc_lock>
 801a43a:	4a21      	ldr	r2, [pc, #132]	; (801a4c0 <_malloc_r+0xac>)
 801a43c:	6814      	ldr	r4, [r2, #0]
 801a43e:	4621      	mov	r1, r4
 801a440:	b991      	cbnz	r1, 801a468 <_malloc_r+0x54>
 801a442:	4c20      	ldr	r4, [pc, #128]	; (801a4c4 <_malloc_r+0xb0>)
 801a444:	6823      	ldr	r3, [r4, #0]
 801a446:	b91b      	cbnz	r3, 801a450 <_malloc_r+0x3c>
 801a448:	4630      	mov	r0, r6
 801a44a:	f000 fe35 	bl	801b0b8 <_sbrk_r>
 801a44e:	6020      	str	r0, [r4, #0]
 801a450:	4629      	mov	r1, r5
 801a452:	4630      	mov	r0, r6
 801a454:	f000 fe30 	bl	801b0b8 <_sbrk_r>
 801a458:	1c43      	adds	r3, r0, #1
 801a45a:	d124      	bne.n	801a4a6 <_malloc_r+0x92>
 801a45c:	230c      	movs	r3, #12
 801a45e:	6033      	str	r3, [r6, #0]
 801a460:	4630      	mov	r0, r6
 801a462:	f001 f877 	bl	801b554 <__malloc_unlock>
 801a466:	e7e4      	b.n	801a432 <_malloc_r+0x1e>
 801a468:	680b      	ldr	r3, [r1, #0]
 801a46a:	1b5b      	subs	r3, r3, r5
 801a46c:	d418      	bmi.n	801a4a0 <_malloc_r+0x8c>
 801a46e:	2b0b      	cmp	r3, #11
 801a470:	d90f      	bls.n	801a492 <_malloc_r+0x7e>
 801a472:	600b      	str	r3, [r1, #0]
 801a474:	50cd      	str	r5, [r1, r3]
 801a476:	18cc      	adds	r4, r1, r3
 801a478:	4630      	mov	r0, r6
 801a47a:	f001 f86b 	bl	801b554 <__malloc_unlock>
 801a47e:	f104 000b 	add.w	r0, r4, #11
 801a482:	1d23      	adds	r3, r4, #4
 801a484:	f020 0007 	bic.w	r0, r0, #7
 801a488:	1ac3      	subs	r3, r0, r3
 801a48a:	d0d3      	beq.n	801a434 <_malloc_r+0x20>
 801a48c:	425a      	negs	r2, r3
 801a48e:	50e2      	str	r2, [r4, r3]
 801a490:	e7d0      	b.n	801a434 <_malloc_r+0x20>
 801a492:	428c      	cmp	r4, r1
 801a494:	684b      	ldr	r3, [r1, #4]
 801a496:	bf16      	itet	ne
 801a498:	6063      	strne	r3, [r4, #4]
 801a49a:	6013      	streq	r3, [r2, #0]
 801a49c:	460c      	movne	r4, r1
 801a49e:	e7eb      	b.n	801a478 <_malloc_r+0x64>
 801a4a0:	460c      	mov	r4, r1
 801a4a2:	6849      	ldr	r1, [r1, #4]
 801a4a4:	e7cc      	b.n	801a440 <_malloc_r+0x2c>
 801a4a6:	1cc4      	adds	r4, r0, #3
 801a4a8:	f024 0403 	bic.w	r4, r4, #3
 801a4ac:	42a0      	cmp	r0, r4
 801a4ae:	d005      	beq.n	801a4bc <_malloc_r+0xa8>
 801a4b0:	1a21      	subs	r1, r4, r0
 801a4b2:	4630      	mov	r0, r6
 801a4b4:	f000 fe00 	bl	801b0b8 <_sbrk_r>
 801a4b8:	3001      	adds	r0, #1
 801a4ba:	d0cf      	beq.n	801a45c <_malloc_r+0x48>
 801a4bc:	6025      	str	r5, [r4, #0]
 801a4be:	e7db      	b.n	801a478 <_malloc_r+0x64>
 801a4c0:	200004d8 	.word	0x200004d8
 801a4c4:	200004dc 	.word	0x200004dc

0801a4c8 <__ssputs_r>:
 801a4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4cc:	688e      	ldr	r6, [r1, #8]
 801a4ce:	429e      	cmp	r6, r3
 801a4d0:	4682      	mov	sl, r0
 801a4d2:	460c      	mov	r4, r1
 801a4d4:	4690      	mov	r8, r2
 801a4d6:	4699      	mov	r9, r3
 801a4d8:	d837      	bhi.n	801a54a <__ssputs_r+0x82>
 801a4da:	898a      	ldrh	r2, [r1, #12]
 801a4dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a4e0:	d031      	beq.n	801a546 <__ssputs_r+0x7e>
 801a4e2:	6825      	ldr	r5, [r4, #0]
 801a4e4:	6909      	ldr	r1, [r1, #16]
 801a4e6:	1a6f      	subs	r7, r5, r1
 801a4e8:	6965      	ldr	r5, [r4, #20]
 801a4ea:	2302      	movs	r3, #2
 801a4ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a4f0:	fb95 f5f3 	sdiv	r5, r5, r3
 801a4f4:	f109 0301 	add.w	r3, r9, #1
 801a4f8:	443b      	add	r3, r7
 801a4fa:	429d      	cmp	r5, r3
 801a4fc:	bf38      	it	cc
 801a4fe:	461d      	movcc	r5, r3
 801a500:	0553      	lsls	r3, r2, #21
 801a502:	d530      	bpl.n	801a566 <__ssputs_r+0x9e>
 801a504:	4629      	mov	r1, r5
 801a506:	f7ff ff85 	bl	801a414 <_malloc_r>
 801a50a:	4606      	mov	r6, r0
 801a50c:	b950      	cbnz	r0, 801a524 <__ssputs_r+0x5c>
 801a50e:	230c      	movs	r3, #12
 801a510:	f8ca 3000 	str.w	r3, [sl]
 801a514:	89a3      	ldrh	r3, [r4, #12]
 801a516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a51a:	81a3      	strh	r3, [r4, #12]
 801a51c:	f04f 30ff 	mov.w	r0, #4294967295
 801a520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a524:	463a      	mov	r2, r7
 801a526:	6921      	ldr	r1, [r4, #16]
 801a528:	f7fc f832 	bl	8016590 <memcpy>
 801a52c:	89a3      	ldrh	r3, [r4, #12]
 801a52e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a536:	81a3      	strh	r3, [r4, #12]
 801a538:	6126      	str	r6, [r4, #16]
 801a53a:	6165      	str	r5, [r4, #20]
 801a53c:	443e      	add	r6, r7
 801a53e:	1bed      	subs	r5, r5, r7
 801a540:	6026      	str	r6, [r4, #0]
 801a542:	60a5      	str	r5, [r4, #8]
 801a544:	464e      	mov	r6, r9
 801a546:	454e      	cmp	r6, r9
 801a548:	d900      	bls.n	801a54c <__ssputs_r+0x84>
 801a54a:	464e      	mov	r6, r9
 801a54c:	4632      	mov	r2, r6
 801a54e:	4641      	mov	r1, r8
 801a550:	6820      	ldr	r0, [r4, #0]
 801a552:	f000 ffe5 	bl	801b520 <memmove>
 801a556:	68a3      	ldr	r3, [r4, #8]
 801a558:	1b9b      	subs	r3, r3, r6
 801a55a:	60a3      	str	r3, [r4, #8]
 801a55c:	6823      	ldr	r3, [r4, #0]
 801a55e:	441e      	add	r6, r3
 801a560:	6026      	str	r6, [r4, #0]
 801a562:	2000      	movs	r0, #0
 801a564:	e7dc      	b.n	801a520 <__ssputs_r+0x58>
 801a566:	462a      	mov	r2, r5
 801a568:	f000 fff5 	bl	801b556 <_realloc_r>
 801a56c:	4606      	mov	r6, r0
 801a56e:	2800      	cmp	r0, #0
 801a570:	d1e2      	bne.n	801a538 <__ssputs_r+0x70>
 801a572:	6921      	ldr	r1, [r4, #16]
 801a574:	4650      	mov	r0, sl
 801a576:	f7ff feff 	bl	801a378 <_free_r>
 801a57a:	e7c8      	b.n	801a50e <__ssputs_r+0x46>

0801a57c <_svfiprintf_r>:
 801a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a580:	461d      	mov	r5, r3
 801a582:	898b      	ldrh	r3, [r1, #12]
 801a584:	061f      	lsls	r7, r3, #24
 801a586:	b09d      	sub	sp, #116	; 0x74
 801a588:	4680      	mov	r8, r0
 801a58a:	460c      	mov	r4, r1
 801a58c:	4616      	mov	r6, r2
 801a58e:	d50f      	bpl.n	801a5b0 <_svfiprintf_r+0x34>
 801a590:	690b      	ldr	r3, [r1, #16]
 801a592:	b96b      	cbnz	r3, 801a5b0 <_svfiprintf_r+0x34>
 801a594:	2140      	movs	r1, #64	; 0x40
 801a596:	f7ff ff3d 	bl	801a414 <_malloc_r>
 801a59a:	6020      	str	r0, [r4, #0]
 801a59c:	6120      	str	r0, [r4, #16]
 801a59e:	b928      	cbnz	r0, 801a5ac <_svfiprintf_r+0x30>
 801a5a0:	230c      	movs	r3, #12
 801a5a2:	f8c8 3000 	str.w	r3, [r8]
 801a5a6:	f04f 30ff 	mov.w	r0, #4294967295
 801a5aa:	e0c8      	b.n	801a73e <_svfiprintf_r+0x1c2>
 801a5ac:	2340      	movs	r3, #64	; 0x40
 801a5ae:	6163      	str	r3, [r4, #20]
 801a5b0:	2300      	movs	r3, #0
 801a5b2:	9309      	str	r3, [sp, #36]	; 0x24
 801a5b4:	2320      	movs	r3, #32
 801a5b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a5ba:	2330      	movs	r3, #48	; 0x30
 801a5bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a5c0:	9503      	str	r5, [sp, #12]
 801a5c2:	f04f 0b01 	mov.w	fp, #1
 801a5c6:	4637      	mov	r7, r6
 801a5c8:	463d      	mov	r5, r7
 801a5ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a5ce:	b10b      	cbz	r3, 801a5d4 <_svfiprintf_r+0x58>
 801a5d0:	2b25      	cmp	r3, #37	; 0x25
 801a5d2:	d13e      	bne.n	801a652 <_svfiprintf_r+0xd6>
 801a5d4:	ebb7 0a06 	subs.w	sl, r7, r6
 801a5d8:	d00b      	beq.n	801a5f2 <_svfiprintf_r+0x76>
 801a5da:	4653      	mov	r3, sl
 801a5dc:	4632      	mov	r2, r6
 801a5de:	4621      	mov	r1, r4
 801a5e0:	4640      	mov	r0, r8
 801a5e2:	f7ff ff71 	bl	801a4c8 <__ssputs_r>
 801a5e6:	3001      	adds	r0, #1
 801a5e8:	f000 80a4 	beq.w	801a734 <_svfiprintf_r+0x1b8>
 801a5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5ee:	4453      	add	r3, sl
 801a5f0:	9309      	str	r3, [sp, #36]	; 0x24
 801a5f2:	783b      	ldrb	r3, [r7, #0]
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	f000 809d 	beq.w	801a734 <_svfiprintf_r+0x1b8>
 801a5fa:	2300      	movs	r3, #0
 801a5fc:	f04f 32ff 	mov.w	r2, #4294967295
 801a600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a604:	9304      	str	r3, [sp, #16]
 801a606:	9307      	str	r3, [sp, #28]
 801a608:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a60c:	931a      	str	r3, [sp, #104]	; 0x68
 801a60e:	462f      	mov	r7, r5
 801a610:	2205      	movs	r2, #5
 801a612:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a616:	4850      	ldr	r0, [pc, #320]	; (801a758 <_svfiprintf_r+0x1dc>)
 801a618:	f7ed fd1a 	bl	8008050 <memchr>
 801a61c:	9b04      	ldr	r3, [sp, #16]
 801a61e:	b9d0      	cbnz	r0, 801a656 <_svfiprintf_r+0xda>
 801a620:	06d9      	lsls	r1, r3, #27
 801a622:	bf44      	itt	mi
 801a624:	2220      	movmi	r2, #32
 801a626:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a62a:	071a      	lsls	r2, r3, #28
 801a62c:	bf44      	itt	mi
 801a62e:	222b      	movmi	r2, #43	; 0x2b
 801a630:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a634:	782a      	ldrb	r2, [r5, #0]
 801a636:	2a2a      	cmp	r2, #42	; 0x2a
 801a638:	d015      	beq.n	801a666 <_svfiprintf_r+0xea>
 801a63a:	9a07      	ldr	r2, [sp, #28]
 801a63c:	462f      	mov	r7, r5
 801a63e:	2000      	movs	r0, #0
 801a640:	250a      	movs	r5, #10
 801a642:	4639      	mov	r1, r7
 801a644:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a648:	3b30      	subs	r3, #48	; 0x30
 801a64a:	2b09      	cmp	r3, #9
 801a64c:	d94d      	bls.n	801a6ea <_svfiprintf_r+0x16e>
 801a64e:	b1b8      	cbz	r0, 801a680 <_svfiprintf_r+0x104>
 801a650:	e00f      	b.n	801a672 <_svfiprintf_r+0xf6>
 801a652:	462f      	mov	r7, r5
 801a654:	e7b8      	b.n	801a5c8 <_svfiprintf_r+0x4c>
 801a656:	4a40      	ldr	r2, [pc, #256]	; (801a758 <_svfiprintf_r+0x1dc>)
 801a658:	1a80      	subs	r0, r0, r2
 801a65a:	fa0b f000 	lsl.w	r0, fp, r0
 801a65e:	4318      	orrs	r0, r3
 801a660:	9004      	str	r0, [sp, #16]
 801a662:	463d      	mov	r5, r7
 801a664:	e7d3      	b.n	801a60e <_svfiprintf_r+0x92>
 801a666:	9a03      	ldr	r2, [sp, #12]
 801a668:	1d11      	adds	r1, r2, #4
 801a66a:	6812      	ldr	r2, [r2, #0]
 801a66c:	9103      	str	r1, [sp, #12]
 801a66e:	2a00      	cmp	r2, #0
 801a670:	db01      	blt.n	801a676 <_svfiprintf_r+0xfa>
 801a672:	9207      	str	r2, [sp, #28]
 801a674:	e004      	b.n	801a680 <_svfiprintf_r+0x104>
 801a676:	4252      	negs	r2, r2
 801a678:	f043 0302 	orr.w	r3, r3, #2
 801a67c:	9207      	str	r2, [sp, #28]
 801a67e:	9304      	str	r3, [sp, #16]
 801a680:	783b      	ldrb	r3, [r7, #0]
 801a682:	2b2e      	cmp	r3, #46	; 0x2e
 801a684:	d10c      	bne.n	801a6a0 <_svfiprintf_r+0x124>
 801a686:	787b      	ldrb	r3, [r7, #1]
 801a688:	2b2a      	cmp	r3, #42	; 0x2a
 801a68a:	d133      	bne.n	801a6f4 <_svfiprintf_r+0x178>
 801a68c:	9b03      	ldr	r3, [sp, #12]
 801a68e:	1d1a      	adds	r2, r3, #4
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	9203      	str	r2, [sp, #12]
 801a694:	2b00      	cmp	r3, #0
 801a696:	bfb8      	it	lt
 801a698:	f04f 33ff 	movlt.w	r3, #4294967295
 801a69c:	3702      	adds	r7, #2
 801a69e:	9305      	str	r3, [sp, #20]
 801a6a0:	4d2e      	ldr	r5, [pc, #184]	; (801a75c <_svfiprintf_r+0x1e0>)
 801a6a2:	7839      	ldrb	r1, [r7, #0]
 801a6a4:	2203      	movs	r2, #3
 801a6a6:	4628      	mov	r0, r5
 801a6a8:	f7ed fcd2 	bl	8008050 <memchr>
 801a6ac:	b138      	cbz	r0, 801a6be <_svfiprintf_r+0x142>
 801a6ae:	2340      	movs	r3, #64	; 0x40
 801a6b0:	1b40      	subs	r0, r0, r5
 801a6b2:	fa03 f000 	lsl.w	r0, r3, r0
 801a6b6:	9b04      	ldr	r3, [sp, #16]
 801a6b8:	4303      	orrs	r3, r0
 801a6ba:	3701      	adds	r7, #1
 801a6bc:	9304      	str	r3, [sp, #16]
 801a6be:	7839      	ldrb	r1, [r7, #0]
 801a6c0:	4827      	ldr	r0, [pc, #156]	; (801a760 <_svfiprintf_r+0x1e4>)
 801a6c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a6c6:	2206      	movs	r2, #6
 801a6c8:	1c7e      	adds	r6, r7, #1
 801a6ca:	f7ed fcc1 	bl	8008050 <memchr>
 801a6ce:	2800      	cmp	r0, #0
 801a6d0:	d038      	beq.n	801a744 <_svfiprintf_r+0x1c8>
 801a6d2:	4b24      	ldr	r3, [pc, #144]	; (801a764 <_svfiprintf_r+0x1e8>)
 801a6d4:	bb13      	cbnz	r3, 801a71c <_svfiprintf_r+0x1a0>
 801a6d6:	9b03      	ldr	r3, [sp, #12]
 801a6d8:	3307      	adds	r3, #7
 801a6da:	f023 0307 	bic.w	r3, r3, #7
 801a6de:	3308      	adds	r3, #8
 801a6e0:	9303      	str	r3, [sp, #12]
 801a6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6e4:	444b      	add	r3, r9
 801a6e6:	9309      	str	r3, [sp, #36]	; 0x24
 801a6e8:	e76d      	b.n	801a5c6 <_svfiprintf_r+0x4a>
 801a6ea:	fb05 3202 	mla	r2, r5, r2, r3
 801a6ee:	2001      	movs	r0, #1
 801a6f0:	460f      	mov	r7, r1
 801a6f2:	e7a6      	b.n	801a642 <_svfiprintf_r+0xc6>
 801a6f4:	2300      	movs	r3, #0
 801a6f6:	3701      	adds	r7, #1
 801a6f8:	9305      	str	r3, [sp, #20]
 801a6fa:	4619      	mov	r1, r3
 801a6fc:	250a      	movs	r5, #10
 801a6fe:	4638      	mov	r0, r7
 801a700:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a704:	3a30      	subs	r2, #48	; 0x30
 801a706:	2a09      	cmp	r2, #9
 801a708:	d903      	bls.n	801a712 <_svfiprintf_r+0x196>
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d0c8      	beq.n	801a6a0 <_svfiprintf_r+0x124>
 801a70e:	9105      	str	r1, [sp, #20]
 801a710:	e7c6      	b.n	801a6a0 <_svfiprintf_r+0x124>
 801a712:	fb05 2101 	mla	r1, r5, r1, r2
 801a716:	2301      	movs	r3, #1
 801a718:	4607      	mov	r7, r0
 801a71a:	e7f0      	b.n	801a6fe <_svfiprintf_r+0x182>
 801a71c:	ab03      	add	r3, sp, #12
 801a71e:	9300      	str	r3, [sp, #0]
 801a720:	4622      	mov	r2, r4
 801a722:	4b11      	ldr	r3, [pc, #68]	; (801a768 <_svfiprintf_r+0x1ec>)
 801a724:	a904      	add	r1, sp, #16
 801a726:	4640      	mov	r0, r8
 801a728:	f7fb ffda 	bl	80166e0 <_printf_float>
 801a72c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a730:	4681      	mov	r9, r0
 801a732:	d1d6      	bne.n	801a6e2 <_svfiprintf_r+0x166>
 801a734:	89a3      	ldrh	r3, [r4, #12]
 801a736:	065b      	lsls	r3, r3, #25
 801a738:	f53f af35 	bmi.w	801a5a6 <_svfiprintf_r+0x2a>
 801a73c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a73e:	b01d      	add	sp, #116	; 0x74
 801a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a744:	ab03      	add	r3, sp, #12
 801a746:	9300      	str	r3, [sp, #0]
 801a748:	4622      	mov	r2, r4
 801a74a:	4b07      	ldr	r3, [pc, #28]	; (801a768 <_svfiprintf_r+0x1ec>)
 801a74c:	a904      	add	r1, sp, #16
 801a74e:	4640      	mov	r0, r8
 801a750:	f7fc fa7c 	bl	8016c4c <_printf_i>
 801a754:	e7ea      	b.n	801a72c <_svfiprintf_r+0x1b0>
 801a756:	bf00      	nop
 801a758:	0801ba9c 	.word	0x0801ba9c
 801a75c:	0801baa2 	.word	0x0801baa2
 801a760:	0801baa6 	.word	0x0801baa6
 801a764:	080166e1 	.word	0x080166e1
 801a768:	0801a4c9 	.word	0x0801a4c9

0801a76c <__sfputc_r>:
 801a76c:	6893      	ldr	r3, [r2, #8]
 801a76e:	3b01      	subs	r3, #1
 801a770:	2b00      	cmp	r3, #0
 801a772:	b410      	push	{r4}
 801a774:	6093      	str	r3, [r2, #8]
 801a776:	da08      	bge.n	801a78a <__sfputc_r+0x1e>
 801a778:	6994      	ldr	r4, [r2, #24]
 801a77a:	42a3      	cmp	r3, r4
 801a77c:	db01      	blt.n	801a782 <__sfputc_r+0x16>
 801a77e:	290a      	cmp	r1, #10
 801a780:	d103      	bne.n	801a78a <__sfputc_r+0x1e>
 801a782:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a786:	f7fd bd75 	b.w	8018274 <__swbuf_r>
 801a78a:	6813      	ldr	r3, [r2, #0]
 801a78c:	1c58      	adds	r0, r3, #1
 801a78e:	6010      	str	r0, [r2, #0]
 801a790:	7019      	strb	r1, [r3, #0]
 801a792:	4608      	mov	r0, r1
 801a794:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a798:	4770      	bx	lr

0801a79a <__sfputs_r>:
 801a79a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a79c:	4606      	mov	r6, r0
 801a79e:	460f      	mov	r7, r1
 801a7a0:	4614      	mov	r4, r2
 801a7a2:	18d5      	adds	r5, r2, r3
 801a7a4:	42ac      	cmp	r4, r5
 801a7a6:	d101      	bne.n	801a7ac <__sfputs_r+0x12>
 801a7a8:	2000      	movs	r0, #0
 801a7aa:	e007      	b.n	801a7bc <__sfputs_r+0x22>
 801a7ac:	463a      	mov	r2, r7
 801a7ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a7b2:	4630      	mov	r0, r6
 801a7b4:	f7ff ffda 	bl	801a76c <__sfputc_r>
 801a7b8:	1c43      	adds	r3, r0, #1
 801a7ba:	d1f3      	bne.n	801a7a4 <__sfputs_r+0xa>
 801a7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a7c0 <_vfiprintf_r>:
 801a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7c4:	460c      	mov	r4, r1
 801a7c6:	b09d      	sub	sp, #116	; 0x74
 801a7c8:	4617      	mov	r7, r2
 801a7ca:	461d      	mov	r5, r3
 801a7cc:	4606      	mov	r6, r0
 801a7ce:	b118      	cbz	r0, 801a7d8 <_vfiprintf_r+0x18>
 801a7d0:	6983      	ldr	r3, [r0, #24]
 801a7d2:	b90b      	cbnz	r3, 801a7d8 <_vfiprintf_r+0x18>
 801a7d4:	f7fe fd56 	bl	8019284 <__sinit>
 801a7d8:	4b7c      	ldr	r3, [pc, #496]	; (801a9cc <_vfiprintf_r+0x20c>)
 801a7da:	429c      	cmp	r4, r3
 801a7dc:	d158      	bne.n	801a890 <_vfiprintf_r+0xd0>
 801a7de:	6874      	ldr	r4, [r6, #4]
 801a7e0:	89a3      	ldrh	r3, [r4, #12]
 801a7e2:	0718      	lsls	r0, r3, #28
 801a7e4:	d55e      	bpl.n	801a8a4 <_vfiprintf_r+0xe4>
 801a7e6:	6923      	ldr	r3, [r4, #16]
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d05b      	beq.n	801a8a4 <_vfiprintf_r+0xe4>
 801a7ec:	2300      	movs	r3, #0
 801a7ee:	9309      	str	r3, [sp, #36]	; 0x24
 801a7f0:	2320      	movs	r3, #32
 801a7f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a7f6:	2330      	movs	r3, #48	; 0x30
 801a7f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a7fc:	9503      	str	r5, [sp, #12]
 801a7fe:	f04f 0b01 	mov.w	fp, #1
 801a802:	46b8      	mov	r8, r7
 801a804:	4645      	mov	r5, r8
 801a806:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a80a:	b10b      	cbz	r3, 801a810 <_vfiprintf_r+0x50>
 801a80c:	2b25      	cmp	r3, #37	; 0x25
 801a80e:	d154      	bne.n	801a8ba <_vfiprintf_r+0xfa>
 801a810:	ebb8 0a07 	subs.w	sl, r8, r7
 801a814:	d00b      	beq.n	801a82e <_vfiprintf_r+0x6e>
 801a816:	4653      	mov	r3, sl
 801a818:	463a      	mov	r2, r7
 801a81a:	4621      	mov	r1, r4
 801a81c:	4630      	mov	r0, r6
 801a81e:	f7ff ffbc 	bl	801a79a <__sfputs_r>
 801a822:	3001      	adds	r0, #1
 801a824:	f000 80c2 	beq.w	801a9ac <_vfiprintf_r+0x1ec>
 801a828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a82a:	4453      	add	r3, sl
 801a82c:	9309      	str	r3, [sp, #36]	; 0x24
 801a82e:	f898 3000 	ldrb.w	r3, [r8]
 801a832:	2b00      	cmp	r3, #0
 801a834:	f000 80ba 	beq.w	801a9ac <_vfiprintf_r+0x1ec>
 801a838:	2300      	movs	r3, #0
 801a83a:	f04f 32ff 	mov.w	r2, #4294967295
 801a83e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a842:	9304      	str	r3, [sp, #16]
 801a844:	9307      	str	r3, [sp, #28]
 801a846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a84a:	931a      	str	r3, [sp, #104]	; 0x68
 801a84c:	46a8      	mov	r8, r5
 801a84e:	2205      	movs	r2, #5
 801a850:	f818 1b01 	ldrb.w	r1, [r8], #1
 801a854:	485e      	ldr	r0, [pc, #376]	; (801a9d0 <_vfiprintf_r+0x210>)
 801a856:	f7ed fbfb 	bl	8008050 <memchr>
 801a85a:	9b04      	ldr	r3, [sp, #16]
 801a85c:	bb78      	cbnz	r0, 801a8be <_vfiprintf_r+0xfe>
 801a85e:	06d9      	lsls	r1, r3, #27
 801a860:	bf44      	itt	mi
 801a862:	2220      	movmi	r2, #32
 801a864:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a868:	071a      	lsls	r2, r3, #28
 801a86a:	bf44      	itt	mi
 801a86c:	222b      	movmi	r2, #43	; 0x2b
 801a86e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a872:	782a      	ldrb	r2, [r5, #0]
 801a874:	2a2a      	cmp	r2, #42	; 0x2a
 801a876:	d02a      	beq.n	801a8ce <_vfiprintf_r+0x10e>
 801a878:	9a07      	ldr	r2, [sp, #28]
 801a87a:	46a8      	mov	r8, r5
 801a87c:	2000      	movs	r0, #0
 801a87e:	250a      	movs	r5, #10
 801a880:	4641      	mov	r1, r8
 801a882:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a886:	3b30      	subs	r3, #48	; 0x30
 801a888:	2b09      	cmp	r3, #9
 801a88a:	d969      	bls.n	801a960 <_vfiprintf_r+0x1a0>
 801a88c:	b360      	cbz	r0, 801a8e8 <_vfiprintf_r+0x128>
 801a88e:	e024      	b.n	801a8da <_vfiprintf_r+0x11a>
 801a890:	4b50      	ldr	r3, [pc, #320]	; (801a9d4 <_vfiprintf_r+0x214>)
 801a892:	429c      	cmp	r4, r3
 801a894:	d101      	bne.n	801a89a <_vfiprintf_r+0xda>
 801a896:	68b4      	ldr	r4, [r6, #8]
 801a898:	e7a2      	b.n	801a7e0 <_vfiprintf_r+0x20>
 801a89a:	4b4f      	ldr	r3, [pc, #316]	; (801a9d8 <_vfiprintf_r+0x218>)
 801a89c:	429c      	cmp	r4, r3
 801a89e:	bf08      	it	eq
 801a8a0:	68f4      	ldreq	r4, [r6, #12]
 801a8a2:	e79d      	b.n	801a7e0 <_vfiprintf_r+0x20>
 801a8a4:	4621      	mov	r1, r4
 801a8a6:	4630      	mov	r0, r6
 801a8a8:	f7fd fd36 	bl	8018318 <__swsetup_r>
 801a8ac:	2800      	cmp	r0, #0
 801a8ae:	d09d      	beq.n	801a7ec <_vfiprintf_r+0x2c>
 801a8b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a8b4:	b01d      	add	sp, #116	; 0x74
 801a8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8ba:	46a8      	mov	r8, r5
 801a8bc:	e7a2      	b.n	801a804 <_vfiprintf_r+0x44>
 801a8be:	4a44      	ldr	r2, [pc, #272]	; (801a9d0 <_vfiprintf_r+0x210>)
 801a8c0:	1a80      	subs	r0, r0, r2
 801a8c2:	fa0b f000 	lsl.w	r0, fp, r0
 801a8c6:	4318      	orrs	r0, r3
 801a8c8:	9004      	str	r0, [sp, #16]
 801a8ca:	4645      	mov	r5, r8
 801a8cc:	e7be      	b.n	801a84c <_vfiprintf_r+0x8c>
 801a8ce:	9a03      	ldr	r2, [sp, #12]
 801a8d0:	1d11      	adds	r1, r2, #4
 801a8d2:	6812      	ldr	r2, [r2, #0]
 801a8d4:	9103      	str	r1, [sp, #12]
 801a8d6:	2a00      	cmp	r2, #0
 801a8d8:	db01      	blt.n	801a8de <_vfiprintf_r+0x11e>
 801a8da:	9207      	str	r2, [sp, #28]
 801a8dc:	e004      	b.n	801a8e8 <_vfiprintf_r+0x128>
 801a8de:	4252      	negs	r2, r2
 801a8e0:	f043 0302 	orr.w	r3, r3, #2
 801a8e4:	9207      	str	r2, [sp, #28]
 801a8e6:	9304      	str	r3, [sp, #16]
 801a8e8:	f898 3000 	ldrb.w	r3, [r8]
 801a8ec:	2b2e      	cmp	r3, #46	; 0x2e
 801a8ee:	d10e      	bne.n	801a90e <_vfiprintf_r+0x14e>
 801a8f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a8f4:	2b2a      	cmp	r3, #42	; 0x2a
 801a8f6:	d138      	bne.n	801a96a <_vfiprintf_r+0x1aa>
 801a8f8:	9b03      	ldr	r3, [sp, #12]
 801a8fa:	1d1a      	adds	r2, r3, #4
 801a8fc:	681b      	ldr	r3, [r3, #0]
 801a8fe:	9203      	str	r2, [sp, #12]
 801a900:	2b00      	cmp	r3, #0
 801a902:	bfb8      	it	lt
 801a904:	f04f 33ff 	movlt.w	r3, #4294967295
 801a908:	f108 0802 	add.w	r8, r8, #2
 801a90c:	9305      	str	r3, [sp, #20]
 801a90e:	4d33      	ldr	r5, [pc, #204]	; (801a9dc <_vfiprintf_r+0x21c>)
 801a910:	f898 1000 	ldrb.w	r1, [r8]
 801a914:	2203      	movs	r2, #3
 801a916:	4628      	mov	r0, r5
 801a918:	f7ed fb9a 	bl	8008050 <memchr>
 801a91c:	b140      	cbz	r0, 801a930 <_vfiprintf_r+0x170>
 801a91e:	2340      	movs	r3, #64	; 0x40
 801a920:	1b40      	subs	r0, r0, r5
 801a922:	fa03 f000 	lsl.w	r0, r3, r0
 801a926:	9b04      	ldr	r3, [sp, #16]
 801a928:	4303      	orrs	r3, r0
 801a92a:	f108 0801 	add.w	r8, r8, #1
 801a92e:	9304      	str	r3, [sp, #16]
 801a930:	f898 1000 	ldrb.w	r1, [r8]
 801a934:	482a      	ldr	r0, [pc, #168]	; (801a9e0 <_vfiprintf_r+0x220>)
 801a936:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a93a:	2206      	movs	r2, #6
 801a93c:	f108 0701 	add.w	r7, r8, #1
 801a940:	f7ed fb86 	bl	8008050 <memchr>
 801a944:	2800      	cmp	r0, #0
 801a946:	d037      	beq.n	801a9b8 <_vfiprintf_r+0x1f8>
 801a948:	4b26      	ldr	r3, [pc, #152]	; (801a9e4 <_vfiprintf_r+0x224>)
 801a94a:	bb1b      	cbnz	r3, 801a994 <_vfiprintf_r+0x1d4>
 801a94c:	9b03      	ldr	r3, [sp, #12]
 801a94e:	3307      	adds	r3, #7
 801a950:	f023 0307 	bic.w	r3, r3, #7
 801a954:	3308      	adds	r3, #8
 801a956:	9303      	str	r3, [sp, #12]
 801a958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a95a:	444b      	add	r3, r9
 801a95c:	9309      	str	r3, [sp, #36]	; 0x24
 801a95e:	e750      	b.n	801a802 <_vfiprintf_r+0x42>
 801a960:	fb05 3202 	mla	r2, r5, r2, r3
 801a964:	2001      	movs	r0, #1
 801a966:	4688      	mov	r8, r1
 801a968:	e78a      	b.n	801a880 <_vfiprintf_r+0xc0>
 801a96a:	2300      	movs	r3, #0
 801a96c:	f108 0801 	add.w	r8, r8, #1
 801a970:	9305      	str	r3, [sp, #20]
 801a972:	4619      	mov	r1, r3
 801a974:	250a      	movs	r5, #10
 801a976:	4640      	mov	r0, r8
 801a978:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a97c:	3a30      	subs	r2, #48	; 0x30
 801a97e:	2a09      	cmp	r2, #9
 801a980:	d903      	bls.n	801a98a <_vfiprintf_r+0x1ca>
 801a982:	2b00      	cmp	r3, #0
 801a984:	d0c3      	beq.n	801a90e <_vfiprintf_r+0x14e>
 801a986:	9105      	str	r1, [sp, #20]
 801a988:	e7c1      	b.n	801a90e <_vfiprintf_r+0x14e>
 801a98a:	fb05 2101 	mla	r1, r5, r1, r2
 801a98e:	2301      	movs	r3, #1
 801a990:	4680      	mov	r8, r0
 801a992:	e7f0      	b.n	801a976 <_vfiprintf_r+0x1b6>
 801a994:	ab03      	add	r3, sp, #12
 801a996:	9300      	str	r3, [sp, #0]
 801a998:	4622      	mov	r2, r4
 801a99a:	4b13      	ldr	r3, [pc, #76]	; (801a9e8 <_vfiprintf_r+0x228>)
 801a99c:	a904      	add	r1, sp, #16
 801a99e:	4630      	mov	r0, r6
 801a9a0:	f7fb fe9e 	bl	80166e0 <_printf_float>
 801a9a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a9a8:	4681      	mov	r9, r0
 801a9aa:	d1d5      	bne.n	801a958 <_vfiprintf_r+0x198>
 801a9ac:	89a3      	ldrh	r3, [r4, #12]
 801a9ae:	065b      	lsls	r3, r3, #25
 801a9b0:	f53f af7e 	bmi.w	801a8b0 <_vfiprintf_r+0xf0>
 801a9b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a9b6:	e77d      	b.n	801a8b4 <_vfiprintf_r+0xf4>
 801a9b8:	ab03      	add	r3, sp, #12
 801a9ba:	9300      	str	r3, [sp, #0]
 801a9bc:	4622      	mov	r2, r4
 801a9be:	4b0a      	ldr	r3, [pc, #40]	; (801a9e8 <_vfiprintf_r+0x228>)
 801a9c0:	a904      	add	r1, sp, #16
 801a9c2:	4630      	mov	r0, r6
 801a9c4:	f7fc f942 	bl	8016c4c <_printf_i>
 801a9c8:	e7ec      	b.n	801a9a4 <_vfiprintf_r+0x1e4>
 801a9ca:	bf00      	nop
 801a9cc:	0801b950 	.word	0x0801b950
 801a9d0:	0801ba9c 	.word	0x0801ba9c
 801a9d4:	0801b970 	.word	0x0801b970
 801a9d8:	0801b930 	.word	0x0801b930
 801a9dc:	0801baa2 	.word	0x0801baa2
 801a9e0:	0801baa6 	.word	0x0801baa6
 801a9e4:	080166e1 	.word	0x080166e1
 801a9e8:	0801a79b 	.word	0x0801a79b

0801a9ec <__svfiscanf_r>:
 801a9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9f0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801a9f4:	460c      	mov	r4, r1
 801a9f6:	2100      	movs	r1, #0
 801a9f8:	9144      	str	r1, [sp, #272]	; 0x110
 801a9fa:	9145      	str	r1, [sp, #276]	; 0x114
 801a9fc:	499f      	ldr	r1, [pc, #636]	; (801ac7c <__svfiscanf_r+0x290>)
 801a9fe:	91a0      	str	r1, [sp, #640]	; 0x280
 801aa00:	f10d 0804 	add.w	r8, sp, #4
 801aa04:	499e      	ldr	r1, [pc, #632]	; (801ac80 <__svfiscanf_r+0x294>)
 801aa06:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801ac84 <__svfiscanf_r+0x298>
 801aa0a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801aa0e:	4606      	mov	r6, r0
 801aa10:	4692      	mov	sl, r2
 801aa12:	91a1      	str	r1, [sp, #644]	; 0x284
 801aa14:	9300      	str	r3, [sp, #0]
 801aa16:	270a      	movs	r7, #10
 801aa18:	f89a 3000 	ldrb.w	r3, [sl]
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	f000 812a 	beq.w	801ac76 <__svfiscanf_r+0x28a>
 801aa22:	4655      	mov	r5, sl
 801aa24:	f7fe fffe 	bl	8019a24 <__locale_ctype_ptr>
 801aa28:	f815 bb01 	ldrb.w	fp, [r5], #1
 801aa2c:	4458      	add	r0, fp
 801aa2e:	7843      	ldrb	r3, [r0, #1]
 801aa30:	f013 0308 	ands.w	r3, r3, #8
 801aa34:	d01c      	beq.n	801aa70 <__svfiscanf_r+0x84>
 801aa36:	6863      	ldr	r3, [r4, #4]
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	dd12      	ble.n	801aa62 <__svfiscanf_r+0x76>
 801aa3c:	f7fe fff2 	bl	8019a24 <__locale_ctype_ptr>
 801aa40:	6823      	ldr	r3, [r4, #0]
 801aa42:	781a      	ldrb	r2, [r3, #0]
 801aa44:	4410      	add	r0, r2
 801aa46:	7842      	ldrb	r2, [r0, #1]
 801aa48:	0712      	lsls	r2, r2, #28
 801aa4a:	d401      	bmi.n	801aa50 <__svfiscanf_r+0x64>
 801aa4c:	46aa      	mov	sl, r5
 801aa4e:	e7e3      	b.n	801aa18 <__svfiscanf_r+0x2c>
 801aa50:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801aa52:	3201      	adds	r2, #1
 801aa54:	9245      	str	r2, [sp, #276]	; 0x114
 801aa56:	6862      	ldr	r2, [r4, #4]
 801aa58:	3301      	adds	r3, #1
 801aa5a:	3a01      	subs	r2, #1
 801aa5c:	6062      	str	r2, [r4, #4]
 801aa5e:	6023      	str	r3, [r4, #0]
 801aa60:	e7e9      	b.n	801aa36 <__svfiscanf_r+0x4a>
 801aa62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801aa64:	4621      	mov	r1, r4
 801aa66:	4630      	mov	r0, r6
 801aa68:	4798      	blx	r3
 801aa6a:	2800      	cmp	r0, #0
 801aa6c:	d0e6      	beq.n	801aa3c <__svfiscanf_r+0x50>
 801aa6e:	e7ed      	b.n	801aa4c <__svfiscanf_r+0x60>
 801aa70:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801aa74:	f040 8082 	bne.w	801ab7c <__svfiscanf_r+0x190>
 801aa78:	9343      	str	r3, [sp, #268]	; 0x10c
 801aa7a:	9341      	str	r3, [sp, #260]	; 0x104
 801aa7c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801aa80:	2b2a      	cmp	r3, #42	; 0x2a
 801aa82:	d103      	bne.n	801aa8c <__svfiscanf_r+0xa0>
 801aa84:	2310      	movs	r3, #16
 801aa86:	9341      	str	r3, [sp, #260]	; 0x104
 801aa88:	f10a 0502 	add.w	r5, sl, #2
 801aa8c:	46aa      	mov	sl, r5
 801aa8e:	f815 1b01 	ldrb.w	r1, [r5], #1
 801aa92:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801aa96:	2a09      	cmp	r2, #9
 801aa98:	d922      	bls.n	801aae0 <__svfiscanf_r+0xf4>
 801aa9a:	2203      	movs	r2, #3
 801aa9c:	4879      	ldr	r0, [pc, #484]	; (801ac84 <__svfiscanf_r+0x298>)
 801aa9e:	f7ed fad7 	bl	8008050 <memchr>
 801aaa2:	b138      	cbz	r0, 801aab4 <__svfiscanf_r+0xc8>
 801aaa4:	eba0 0309 	sub.w	r3, r0, r9
 801aaa8:	2001      	movs	r0, #1
 801aaaa:	4098      	lsls	r0, r3
 801aaac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801aaae:	4318      	orrs	r0, r3
 801aab0:	9041      	str	r0, [sp, #260]	; 0x104
 801aab2:	46aa      	mov	sl, r5
 801aab4:	f89a 3000 	ldrb.w	r3, [sl]
 801aab8:	2b67      	cmp	r3, #103	; 0x67
 801aaba:	f10a 0501 	add.w	r5, sl, #1
 801aabe:	d82b      	bhi.n	801ab18 <__svfiscanf_r+0x12c>
 801aac0:	2b65      	cmp	r3, #101	; 0x65
 801aac2:	f080 809f 	bcs.w	801ac04 <__svfiscanf_r+0x218>
 801aac6:	2b47      	cmp	r3, #71	; 0x47
 801aac8:	d810      	bhi.n	801aaec <__svfiscanf_r+0x100>
 801aaca:	2b45      	cmp	r3, #69	; 0x45
 801aacc:	f080 809a 	bcs.w	801ac04 <__svfiscanf_r+0x218>
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d06c      	beq.n	801abae <__svfiscanf_r+0x1c2>
 801aad4:	2b25      	cmp	r3, #37	; 0x25
 801aad6:	d051      	beq.n	801ab7c <__svfiscanf_r+0x190>
 801aad8:	2303      	movs	r3, #3
 801aada:	9347      	str	r3, [sp, #284]	; 0x11c
 801aadc:	9742      	str	r7, [sp, #264]	; 0x108
 801aade:	e027      	b.n	801ab30 <__svfiscanf_r+0x144>
 801aae0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801aae2:	fb07 1303 	mla	r3, r7, r3, r1
 801aae6:	3b30      	subs	r3, #48	; 0x30
 801aae8:	9343      	str	r3, [sp, #268]	; 0x10c
 801aaea:	e7cf      	b.n	801aa8c <__svfiscanf_r+0xa0>
 801aaec:	2b5b      	cmp	r3, #91	; 0x5b
 801aaee:	d06a      	beq.n	801abc6 <__svfiscanf_r+0x1da>
 801aaf0:	d80c      	bhi.n	801ab0c <__svfiscanf_r+0x120>
 801aaf2:	2b58      	cmp	r3, #88	; 0x58
 801aaf4:	d1f0      	bne.n	801aad8 <__svfiscanf_r+0xec>
 801aaf6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801aaf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801aafc:	9241      	str	r2, [sp, #260]	; 0x104
 801aafe:	2210      	movs	r2, #16
 801ab00:	9242      	str	r2, [sp, #264]	; 0x108
 801ab02:	2b6e      	cmp	r3, #110	; 0x6e
 801ab04:	bf8c      	ite	hi
 801ab06:	2304      	movhi	r3, #4
 801ab08:	2303      	movls	r3, #3
 801ab0a:	e010      	b.n	801ab2e <__svfiscanf_r+0x142>
 801ab0c:	2b63      	cmp	r3, #99	; 0x63
 801ab0e:	d065      	beq.n	801abdc <__svfiscanf_r+0x1f0>
 801ab10:	2b64      	cmp	r3, #100	; 0x64
 801ab12:	d1e1      	bne.n	801aad8 <__svfiscanf_r+0xec>
 801ab14:	9742      	str	r7, [sp, #264]	; 0x108
 801ab16:	e7f4      	b.n	801ab02 <__svfiscanf_r+0x116>
 801ab18:	2b70      	cmp	r3, #112	; 0x70
 801ab1a:	d04b      	beq.n	801abb4 <__svfiscanf_r+0x1c8>
 801ab1c:	d826      	bhi.n	801ab6c <__svfiscanf_r+0x180>
 801ab1e:	2b6e      	cmp	r3, #110	; 0x6e
 801ab20:	d062      	beq.n	801abe8 <__svfiscanf_r+0x1fc>
 801ab22:	d84c      	bhi.n	801abbe <__svfiscanf_r+0x1d2>
 801ab24:	2b69      	cmp	r3, #105	; 0x69
 801ab26:	d1d7      	bne.n	801aad8 <__svfiscanf_r+0xec>
 801ab28:	2300      	movs	r3, #0
 801ab2a:	9342      	str	r3, [sp, #264]	; 0x108
 801ab2c:	2303      	movs	r3, #3
 801ab2e:	9347      	str	r3, [sp, #284]	; 0x11c
 801ab30:	6863      	ldr	r3, [r4, #4]
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	dd68      	ble.n	801ac08 <__svfiscanf_r+0x21c>
 801ab36:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ab38:	0659      	lsls	r1, r3, #25
 801ab3a:	d407      	bmi.n	801ab4c <__svfiscanf_r+0x160>
 801ab3c:	f7fe ff72 	bl	8019a24 <__locale_ctype_ptr>
 801ab40:	6823      	ldr	r3, [r4, #0]
 801ab42:	781a      	ldrb	r2, [r3, #0]
 801ab44:	4410      	add	r0, r2
 801ab46:	7842      	ldrb	r2, [r0, #1]
 801ab48:	0712      	lsls	r2, r2, #28
 801ab4a:	d464      	bmi.n	801ac16 <__svfiscanf_r+0x22a>
 801ab4c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801ab4e:	2b02      	cmp	r3, #2
 801ab50:	dc73      	bgt.n	801ac3a <__svfiscanf_r+0x24e>
 801ab52:	466b      	mov	r3, sp
 801ab54:	4622      	mov	r2, r4
 801ab56:	a941      	add	r1, sp, #260	; 0x104
 801ab58:	4630      	mov	r0, r6
 801ab5a:	f000 f8bf 	bl	801acdc <_scanf_chars>
 801ab5e:	2801      	cmp	r0, #1
 801ab60:	f000 8089 	beq.w	801ac76 <__svfiscanf_r+0x28a>
 801ab64:	2802      	cmp	r0, #2
 801ab66:	f47f af71 	bne.w	801aa4c <__svfiscanf_r+0x60>
 801ab6a:	e01d      	b.n	801aba8 <__svfiscanf_r+0x1bc>
 801ab6c:	2b75      	cmp	r3, #117	; 0x75
 801ab6e:	d0d1      	beq.n	801ab14 <__svfiscanf_r+0x128>
 801ab70:	2b78      	cmp	r3, #120	; 0x78
 801ab72:	d0c0      	beq.n	801aaf6 <__svfiscanf_r+0x10a>
 801ab74:	2b73      	cmp	r3, #115	; 0x73
 801ab76:	d1af      	bne.n	801aad8 <__svfiscanf_r+0xec>
 801ab78:	2302      	movs	r3, #2
 801ab7a:	e7d8      	b.n	801ab2e <__svfiscanf_r+0x142>
 801ab7c:	6863      	ldr	r3, [r4, #4]
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	dd0c      	ble.n	801ab9c <__svfiscanf_r+0x1b0>
 801ab82:	6823      	ldr	r3, [r4, #0]
 801ab84:	781a      	ldrb	r2, [r3, #0]
 801ab86:	455a      	cmp	r2, fp
 801ab88:	d175      	bne.n	801ac76 <__svfiscanf_r+0x28a>
 801ab8a:	3301      	adds	r3, #1
 801ab8c:	6862      	ldr	r2, [r4, #4]
 801ab8e:	6023      	str	r3, [r4, #0]
 801ab90:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801ab92:	3a01      	subs	r2, #1
 801ab94:	3301      	adds	r3, #1
 801ab96:	6062      	str	r2, [r4, #4]
 801ab98:	9345      	str	r3, [sp, #276]	; 0x114
 801ab9a:	e757      	b.n	801aa4c <__svfiscanf_r+0x60>
 801ab9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ab9e:	4621      	mov	r1, r4
 801aba0:	4630      	mov	r0, r6
 801aba2:	4798      	blx	r3
 801aba4:	2800      	cmp	r0, #0
 801aba6:	d0ec      	beq.n	801ab82 <__svfiscanf_r+0x196>
 801aba8:	9844      	ldr	r0, [sp, #272]	; 0x110
 801abaa:	2800      	cmp	r0, #0
 801abac:	d159      	bne.n	801ac62 <__svfiscanf_r+0x276>
 801abae:	f04f 30ff 	mov.w	r0, #4294967295
 801abb2:	e05c      	b.n	801ac6e <__svfiscanf_r+0x282>
 801abb4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801abb6:	f042 0220 	orr.w	r2, r2, #32
 801abba:	9241      	str	r2, [sp, #260]	; 0x104
 801abbc:	e79b      	b.n	801aaf6 <__svfiscanf_r+0x10a>
 801abbe:	2308      	movs	r3, #8
 801abc0:	9342      	str	r3, [sp, #264]	; 0x108
 801abc2:	2304      	movs	r3, #4
 801abc4:	e7b3      	b.n	801ab2e <__svfiscanf_r+0x142>
 801abc6:	4629      	mov	r1, r5
 801abc8:	4640      	mov	r0, r8
 801abca:	f000 fa85 	bl	801b0d8 <__sccl>
 801abce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801abd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801abd4:	9341      	str	r3, [sp, #260]	; 0x104
 801abd6:	4605      	mov	r5, r0
 801abd8:	2301      	movs	r3, #1
 801abda:	e7a8      	b.n	801ab2e <__svfiscanf_r+0x142>
 801abdc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801abde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801abe2:	9341      	str	r3, [sp, #260]	; 0x104
 801abe4:	2300      	movs	r3, #0
 801abe6:	e7a2      	b.n	801ab2e <__svfiscanf_r+0x142>
 801abe8:	9841      	ldr	r0, [sp, #260]	; 0x104
 801abea:	06c3      	lsls	r3, r0, #27
 801abec:	f53f af2e 	bmi.w	801aa4c <__svfiscanf_r+0x60>
 801abf0:	9b00      	ldr	r3, [sp, #0]
 801abf2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801abf4:	1d19      	adds	r1, r3, #4
 801abf6:	9100      	str	r1, [sp, #0]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	07c0      	lsls	r0, r0, #31
 801abfc:	bf4c      	ite	mi
 801abfe:	801a      	strhmi	r2, [r3, #0]
 801ac00:	601a      	strpl	r2, [r3, #0]
 801ac02:	e723      	b.n	801aa4c <__svfiscanf_r+0x60>
 801ac04:	2305      	movs	r3, #5
 801ac06:	e792      	b.n	801ab2e <__svfiscanf_r+0x142>
 801ac08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ac0a:	4621      	mov	r1, r4
 801ac0c:	4630      	mov	r0, r6
 801ac0e:	4798      	blx	r3
 801ac10:	2800      	cmp	r0, #0
 801ac12:	d090      	beq.n	801ab36 <__svfiscanf_r+0x14a>
 801ac14:	e7c8      	b.n	801aba8 <__svfiscanf_r+0x1bc>
 801ac16:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ac18:	3201      	adds	r2, #1
 801ac1a:	9245      	str	r2, [sp, #276]	; 0x114
 801ac1c:	6862      	ldr	r2, [r4, #4]
 801ac1e:	3a01      	subs	r2, #1
 801ac20:	2a00      	cmp	r2, #0
 801ac22:	6062      	str	r2, [r4, #4]
 801ac24:	dd02      	ble.n	801ac2c <__svfiscanf_r+0x240>
 801ac26:	3301      	adds	r3, #1
 801ac28:	6023      	str	r3, [r4, #0]
 801ac2a:	e787      	b.n	801ab3c <__svfiscanf_r+0x150>
 801ac2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ac2e:	4621      	mov	r1, r4
 801ac30:	4630      	mov	r0, r6
 801ac32:	4798      	blx	r3
 801ac34:	2800      	cmp	r0, #0
 801ac36:	d081      	beq.n	801ab3c <__svfiscanf_r+0x150>
 801ac38:	e7b6      	b.n	801aba8 <__svfiscanf_r+0x1bc>
 801ac3a:	2b04      	cmp	r3, #4
 801ac3c:	dc06      	bgt.n	801ac4c <__svfiscanf_r+0x260>
 801ac3e:	466b      	mov	r3, sp
 801ac40:	4622      	mov	r2, r4
 801ac42:	a941      	add	r1, sp, #260	; 0x104
 801ac44:	4630      	mov	r0, r6
 801ac46:	f000 f8ad 	bl	801ada4 <_scanf_i>
 801ac4a:	e788      	b.n	801ab5e <__svfiscanf_r+0x172>
 801ac4c:	4b0e      	ldr	r3, [pc, #56]	; (801ac88 <__svfiscanf_r+0x29c>)
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	f43f aefc 	beq.w	801aa4c <__svfiscanf_r+0x60>
 801ac54:	466b      	mov	r3, sp
 801ac56:	4622      	mov	r2, r4
 801ac58:	a941      	add	r1, sp, #260	; 0x104
 801ac5a:	4630      	mov	r0, r6
 801ac5c:	f7fc f908 	bl	8016e70 <_scanf_float>
 801ac60:	e77d      	b.n	801ab5e <__svfiscanf_r+0x172>
 801ac62:	89a3      	ldrh	r3, [r4, #12]
 801ac64:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ac68:	bf18      	it	ne
 801ac6a:	f04f 30ff 	movne.w	r0, #4294967295
 801ac6e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801ac72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac76:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ac78:	e7f9      	b.n	801ac6e <__svfiscanf_r+0x282>
 801ac7a:	bf00      	nop
 801ac7c:	0801b375 	.word	0x0801b375
 801ac80:	0801afa1 	.word	0x0801afa1
 801ac84:	0801baa2 	.word	0x0801baa2
 801ac88:	08016e71 	.word	0x08016e71

0801ac8c <_vfiscanf_r>:
 801ac8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac90:	460c      	mov	r4, r1
 801ac92:	4616      	mov	r6, r2
 801ac94:	461f      	mov	r7, r3
 801ac96:	4605      	mov	r5, r0
 801ac98:	b118      	cbz	r0, 801aca2 <_vfiscanf_r+0x16>
 801ac9a:	6983      	ldr	r3, [r0, #24]
 801ac9c:	b90b      	cbnz	r3, 801aca2 <_vfiscanf_r+0x16>
 801ac9e:	f7fe faf1 	bl	8019284 <__sinit>
 801aca2:	4b0b      	ldr	r3, [pc, #44]	; (801acd0 <_vfiscanf_r+0x44>)
 801aca4:	429c      	cmp	r4, r3
 801aca6:	d108      	bne.n	801acba <_vfiscanf_r+0x2e>
 801aca8:	686c      	ldr	r4, [r5, #4]
 801acaa:	463b      	mov	r3, r7
 801acac:	4632      	mov	r2, r6
 801acae:	4621      	mov	r1, r4
 801acb0:	4628      	mov	r0, r5
 801acb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801acb6:	f7ff be99 	b.w	801a9ec <__svfiscanf_r>
 801acba:	4b06      	ldr	r3, [pc, #24]	; (801acd4 <_vfiscanf_r+0x48>)
 801acbc:	429c      	cmp	r4, r3
 801acbe:	d101      	bne.n	801acc4 <_vfiscanf_r+0x38>
 801acc0:	68ac      	ldr	r4, [r5, #8]
 801acc2:	e7f2      	b.n	801acaa <_vfiscanf_r+0x1e>
 801acc4:	4b04      	ldr	r3, [pc, #16]	; (801acd8 <_vfiscanf_r+0x4c>)
 801acc6:	429c      	cmp	r4, r3
 801acc8:	bf08      	it	eq
 801acca:	68ec      	ldreq	r4, [r5, #12]
 801accc:	e7ed      	b.n	801acaa <_vfiscanf_r+0x1e>
 801acce:	bf00      	nop
 801acd0:	0801b950 	.word	0x0801b950
 801acd4:	0801b970 	.word	0x0801b970
 801acd8:	0801b930 	.word	0x0801b930

0801acdc <_scanf_chars>:
 801acdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ace0:	4615      	mov	r5, r2
 801ace2:	688a      	ldr	r2, [r1, #8]
 801ace4:	4680      	mov	r8, r0
 801ace6:	460c      	mov	r4, r1
 801ace8:	b932      	cbnz	r2, 801acf8 <_scanf_chars+0x1c>
 801acea:	698a      	ldr	r2, [r1, #24]
 801acec:	2a00      	cmp	r2, #0
 801acee:	bf14      	ite	ne
 801acf0:	f04f 32ff 	movne.w	r2, #4294967295
 801acf4:	2201      	moveq	r2, #1
 801acf6:	608a      	str	r2, [r1, #8]
 801acf8:	6822      	ldr	r2, [r4, #0]
 801acfa:	06d1      	lsls	r1, r2, #27
 801acfc:	bf5f      	itttt	pl
 801acfe:	681a      	ldrpl	r2, [r3, #0]
 801ad00:	1d11      	addpl	r1, r2, #4
 801ad02:	6019      	strpl	r1, [r3, #0]
 801ad04:	6817      	ldrpl	r7, [r2, #0]
 801ad06:	2600      	movs	r6, #0
 801ad08:	69a3      	ldr	r3, [r4, #24]
 801ad0a:	b1db      	cbz	r3, 801ad44 <_scanf_chars+0x68>
 801ad0c:	2b01      	cmp	r3, #1
 801ad0e:	d107      	bne.n	801ad20 <_scanf_chars+0x44>
 801ad10:	682b      	ldr	r3, [r5, #0]
 801ad12:	6962      	ldr	r2, [r4, #20]
 801ad14:	781b      	ldrb	r3, [r3, #0]
 801ad16:	5cd3      	ldrb	r3, [r2, r3]
 801ad18:	b9a3      	cbnz	r3, 801ad44 <_scanf_chars+0x68>
 801ad1a:	2e00      	cmp	r6, #0
 801ad1c:	d132      	bne.n	801ad84 <_scanf_chars+0xa8>
 801ad1e:	e006      	b.n	801ad2e <_scanf_chars+0x52>
 801ad20:	2b02      	cmp	r3, #2
 801ad22:	d007      	beq.n	801ad34 <_scanf_chars+0x58>
 801ad24:	2e00      	cmp	r6, #0
 801ad26:	d12d      	bne.n	801ad84 <_scanf_chars+0xa8>
 801ad28:	69a3      	ldr	r3, [r4, #24]
 801ad2a:	2b01      	cmp	r3, #1
 801ad2c:	d12a      	bne.n	801ad84 <_scanf_chars+0xa8>
 801ad2e:	2001      	movs	r0, #1
 801ad30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad34:	f7fe fe76 	bl	8019a24 <__locale_ctype_ptr>
 801ad38:	682b      	ldr	r3, [r5, #0]
 801ad3a:	781b      	ldrb	r3, [r3, #0]
 801ad3c:	4418      	add	r0, r3
 801ad3e:	7843      	ldrb	r3, [r0, #1]
 801ad40:	071b      	lsls	r3, r3, #28
 801ad42:	d4ef      	bmi.n	801ad24 <_scanf_chars+0x48>
 801ad44:	6823      	ldr	r3, [r4, #0]
 801ad46:	06da      	lsls	r2, r3, #27
 801ad48:	bf5e      	ittt	pl
 801ad4a:	682b      	ldrpl	r3, [r5, #0]
 801ad4c:	781b      	ldrbpl	r3, [r3, #0]
 801ad4e:	703b      	strbpl	r3, [r7, #0]
 801ad50:	682a      	ldr	r2, [r5, #0]
 801ad52:	686b      	ldr	r3, [r5, #4]
 801ad54:	f102 0201 	add.w	r2, r2, #1
 801ad58:	602a      	str	r2, [r5, #0]
 801ad5a:	68a2      	ldr	r2, [r4, #8]
 801ad5c:	f103 33ff 	add.w	r3, r3, #4294967295
 801ad60:	f102 32ff 	add.w	r2, r2, #4294967295
 801ad64:	606b      	str	r3, [r5, #4]
 801ad66:	f106 0601 	add.w	r6, r6, #1
 801ad6a:	bf58      	it	pl
 801ad6c:	3701      	addpl	r7, #1
 801ad6e:	60a2      	str	r2, [r4, #8]
 801ad70:	b142      	cbz	r2, 801ad84 <_scanf_chars+0xa8>
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	dcc8      	bgt.n	801ad08 <_scanf_chars+0x2c>
 801ad76:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ad7a:	4629      	mov	r1, r5
 801ad7c:	4640      	mov	r0, r8
 801ad7e:	4798      	blx	r3
 801ad80:	2800      	cmp	r0, #0
 801ad82:	d0c1      	beq.n	801ad08 <_scanf_chars+0x2c>
 801ad84:	6823      	ldr	r3, [r4, #0]
 801ad86:	f013 0310 	ands.w	r3, r3, #16
 801ad8a:	d105      	bne.n	801ad98 <_scanf_chars+0xbc>
 801ad8c:	68e2      	ldr	r2, [r4, #12]
 801ad8e:	3201      	adds	r2, #1
 801ad90:	60e2      	str	r2, [r4, #12]
 801ad92:	69a2      	ldr	r2, [r4, #24]
 801ad94:	b102      	cbz	r2, 801ad98 <_scanf_chars+0xbc>
 801ad96:	703b      	strb	r3, [r7, #0]
 801ad98:	6923      	ldr	r3, [r4, #16]
 801ad9a:	441e      	add	r6, r3
 801ad9c:	6126      	str	r6, [r4, #16]
 801ad9e:	2000      	movs	r0, #0
 801ada0:	e7c6      	b.n	801ad30 <_scanf_chars+0x54>
	...

0801ada4 <_scanf_i>:
 801ada4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ada8:	469a      	mov	sl, r3
 801adaa:	4b74      	ldr	r3, [pc, #464]	; (801af7c <_scanf_i+0x1d8>)
 801adac:	460c      	mov	r4, r1
 801adae:	4683      	mov	fp, r0
 801adb0:	4616      	mov	r6, r2
 801adb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801adb6:	b087      	sub	sp, #28
 801adb8:	ab03      	add	r3, sp, #12
 801adba:	68a7      	ldr	r7, [r4, #8]
 801adbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801adc0:	4b6f      	ldr	r3, [pc, #444]	; (801af80 <_scanf_i+0x1dc>)
 801adc2:	69a1      	ldr	r1, [r4, #24]
 801adc4:	4a6f      	ldr	r2, [pc, #444]	; (801af84 <_scanf_i+0x1e0>)
 801adc6:	2903      	cmp	r1, #3
 801adc8:	bf08      	it	eq
 801adca:	461a      	moveq	r2, r3
 801adcc:	1e7b      	subs	r3, r7, #1
 801adce:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801add2:	bf84      	itt	hi
 801add4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801add8:	60a3      	strhi	r3, [r4, #8]
 801adda:	6823      	ldr	r3, [r4, #0]
 801addc:	9200      	str	r2, [sp, #0]
 801adde:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801ade2:	bf88      	it	hi
 801ade4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ade8:	f104 091c 	add.w	r9, r4, #28
 801adec:	6023      	str	r3, [r4, #0]
 801adee:	bf8c      	ite	hi
 801adf0:	197f      	addhi	r7, r7, r5
 801adf2:	2700      	movls	r7, #0
 801adf4:	464b      	mov	r3, r9
 801adf6:	f04f 0800 	mov.w	r8, #0
 801adfa:	9301      	str	r3, [sp, #4]
 801adfc:	6831      	ldr	r1, [r6, #0]
 801adfe:	ab03      	add	r3, sp, #12
 801ae00:	2202      	movs	r2, #2
 801ae02:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801ae06:	7809      	ldrb	r1, [r1, #0]
 801ae08:	f7ed f922 	bl	8008050 <memchr>
 801ae0c:	9b01      	ldr	r3, [sp, #4]
 801ae0e:	b330      	cbz	r0, 801ae5e <_scanf_i+0xba>
 801ae10:	f1b8 0f01 	cmp.w	r8, #1
 801ae14:	d15a      	bne.n	801aecc <_scanf_i+0x128>
 801ae16:	6862      	ldr	r2, [r4, #4]
 801ae18:	b92a      	cbnz	r2, 801ae26 <_scanf_i+0x82>
 801ae1a:	6822      	ldr	r2, [r4, #0]
 801ae1c:	2108      	movs	r1, #8
 801ae1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ae22:	6061      	str	r1, [r4, #4]
 801ae24:	6022      	str	r2, [r4, #0]
 801ae26:	6822      	ldr	r2, [r4, #0]
 801ae28:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801ae2c:	6022      	str	r2, [r4, #0]
 801ae2e:	68a2      	ldr	r2, [r4, #8]
 801ae30:	1e51      	subs	r1, r2, #1
 801ae32:	60a1      	str	r1, [r4, #8]
 801ae34:	b19a      	cbz	r2, 801ae5e <_scanf_i+0xba>
 801ae36:	6832      	ldr	r2, [r6, #0]
 801ae38:	1c51      	adds	r1, r2, #1
 801ae3a:	6031      	str	r1, [r6, #0]
 801ae3c:	7812      	ldrb	r2, [r2, #0]
 801ae3e:	701a      	strb	r2, [r3, #0]
 801ae40:	1c5d      	adds	r5, r3, #1
 801ae42:	6873      	ldr	r3, [r6, #4]
 801ae44:	3b01      	subs	r3, #1
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	6073      	str	r3, [r6, #4]
 801ae4a:	dc07      	bgt.n	801ae5c <_scanf_i+0xb8>
 801ae4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ae50:	4631      	mov	r1, r6
 801ae52:	4658      	mov	r0, fp
 801ae54:	4798      	blx	r3
 801ae56:	2800      	cmp	r0, #0
 801ae58:	f040 8086 	bne.w	801af68 <_scanf_i+0x1c4>
 801ae5c:	462b      	mov	r3, r5
 801ae5e:	f108 0801 	add.w	r8, r8, #1
 801ae62:	f1b8 0f03 	cmp.w	r8, #3
 801ae66:	d1c8      	bne.n	801adfa <_scanf_i+0x56>
 801ae68:	6862      	ldr	r2, [r4, #4]
 801ae6a:	b90a      	cbnz	r2, 801ae70 <_scanf_i+0xcc>
 801ae6c:	220a      	movs	r2, #10
 801ae6e:	6062      	str	r2, [r4, #4]
 801ae70:	6862      	ldr	r2, [r4, #4]
 801ae72:	4945      	ldr	r1, [pc, #276]	; (801af88 <_scanf_i+0x1e4>)
 801ae74:	6960      	ldr	r0, [r4, #20]
 801ae76:	9301      	str	r3, [sp, #4]
 801ae78:	1a89      	subs	r1, r1, r2
 801ae7a:	f000 f92d 	bl	801b0d8 <__sccl>
 801ae7e:	9b01      	ldr	r3, [sp, #4]
 801ae80:	f04f 0800 	mov.w	r8, #0
 801ae84:	461d      	mov	r5, r3
 801ae86:	68a3      	ldr	r3, [r4, #8]
 801ae88:	6822      	ldr	r2, [r4, #0]
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d03a      	beq.n	801af04 <_scanf_i+0x160>
 801ae8e:	6831      	ldr	r1, [r6, #0]
 801ae90:	6960      	ldr	r0, [r4, #20]
 801ae92:	f891 c000 	ldrb.w	ip, [r1]
 801ae96:	f810 000c 	ldrb.w	r0, [r0, ip]
 801ae9a:	2800      	cmp	r0, #0
 801ae9c:	d032      	beq.n	801af04 <_scanf_i+0x160>
 801ae9e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801aea2:	d121      	bne.n	801aee8 <_scanf_i+0x144>
 801aea4:	0510      	lsls	r0, r2, #20
 801aea6:	d51f      	bpl.n	801aee8 <_scanf_i+0x144>
 801aea8:	f108 0801 	add.w	r8, r8, #1
 801aeac:	b117      	cbz	r7, 801aeb4 <_scanf_i+0x110>
 801aeae:	3301      	adds	r3, #1
 801aeb0:	3f01      	subs	r7, #1
 801aeb2:	60a3      	str	r3, [r4, #8]
 801aeb4:	6873      	ldr	r3, [r6, #4]
 801aeb6:	3b01      	subs	r3, #1
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	6073      	str	r3, [r6, #4]
 801aebc:	dd1b      	ble.n	801aef6 <_scanf_i+0x152>
 801aebe:	6833      	ldr	r3, [r6, #0]
 801aec0:	3301      	adds	r3, #1
 801aec2:	6033      	str	r3, [r6, #0]
 801aec4:	68a3      	ldr	r3, [r4, #8]
 801aec6:	3b01      	subs	r3, #1
 801aec8:	60a3      	str	r3, [r4, #8]
 801aeca:	e7dc      	b.n	801ae86 <_scanf_i+0xe2>
 801aecc:	f1b8 0f02 	cmp.w	r8, #2
 801aed0:	d1ad      	bne.n	801ae2e <_scanf_i+0x8a>
 801aed2:	6822      	ldr	r2, [r4, #0]
 801aed4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801aed8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801aedc:	d1bf      	bne.n	801ae5e <_scanf_i+0xba>
 801aede:	2110      	movs	r1, #16
 801aee0:	6061      	str	r1, [r4, #4]
 801aee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801aee6:	e7a1      	b.n	801ae2c <_scanf_i+0x88>
 801aee8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801aeec:	6022      	str	r2, [r4, #0]
 801aeee:	780b      	ldrb	r3, [r1, #0]
 801aef0:	702b      	strb	r3, [r5, #0]
 801aef2:	3501      	adds	r5, #1
 801aef4:	e7de      	b.n	801aeb4 <_scanf_i+0x110>
 801aef6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801aefa:	4631      	mov	r1, r6
 801aefc:	4658      	mov	r0, fp
 801aefe:	4798      	blx	r3
 801af00:	2800      	cmp	r0, #0
 801af02:	d0df      	beq.n	801aec4 <_scanf_i+0x120>
 801af04:	6823      	ldr	r3, [r4, #0]
 801af06:	05d9      	lsls	r1, r3, #23
 801af08:	d50c      	bpl.n	801af24 <_scanf_i+0x180>
 801af0a:	454d      	cmp	r5, r9
 801af0c:	d908      	bls.n	801af20 <_scanf_i+0x17c>
 801af0e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801af12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801af16:	4632      	mov	r2, r6
 801af18:	4658      	mov	r0, fp
 801af1a:	4798      	blx	r3
 801af1c:	1e6f      	subs	r7, r5, #1
 801af1e:	463d      	mov	r5, r7
 801af20:	454d      	cmp	r5, r9
 801af22:	d029      	beq.n	801af78 <_scanf_i+0x1d4>
 801af24:	6822      	ldr	r2, [r4, #0]
 801af26:	f012 0210 	ands.w	r2, r2, #16
 801af2a:	d113      	bne.n	801af54 <_scanf_i+0x1b0>
 801af2c:	702a      	strb	r2, [r5, #0]
 801af2e:	6863      	ldr	r3, [r4, #4]
 801af30:	9e00      	ldr	r6, [sp, #0]
 801af32:	4649      	mov	r1, r9
 801af34:	4658      	mov	r0, fp
 801af36:	47b0      	blx	r6
 801af38:	f8da 3000 	ldr.w	r3, [sl]
 801af3c:	6821      	ldr	r1, [r4, #0]
 801af3e:	1d1a      	adds	r2, r3, #4
 801af40:	f8ca 2000 	str.w	r2, [sl]
 801af44:	f011 0f20 	tst.w	r1, #32
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	d010      	beq.n	801af6e <_scanf_i+0x1ca>
 801af4c:	6018      	str	r0, [r3, #0]
 801af4e:	68e3      	ldr	r3, [r4, #12]
 801af50:	3301      	adds	r3, #1
 801af52:	60e3      	str	r3, [r4, #12]
 801af54:	eba5 0509 	sub.w	r5, r5, r9
 801af58:	44a8      	add	r8, r5
 801af5a:	6925      	ldr	r5, [r4, #16]
 801af5c:	4445      	add	r5, r8
 801af5e:	6125      	str	r5, [r4, #16]
 801af60:	2000      	movs	r0, #0
 801af62:	b007      	add	sp, #28
 801af64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af68:	f04f 0800 	mov.w	r8, #0
 801af6c:	e7ca      	b.n	801af04 <_scanf_i+0x160>
 801af6e:	07ca      	lsls	r2, r1, #31
 801af70:	bf4c      	ite	mi
 801af72:	8018      	strhmi	r0, [r3, #0]
 801af74:	6018      	strpl	r0, [r3, #0]
 801af76:	e7ea      	b.n	801af4e <_scanf_i+0x1aa>
 801af78:	2001      	movs	r0, #1
 801af7a:	e7f2      	b.n	801af62 <_scanf_i+0x1be>
 801af7c:	0801b85c 	.word	0x0801b85c
 801af80:	08018251 	.word	0x08018251
 801af84:	0801b2dd 	.word	0x0801b2dd
 801af88:	0801babd 	.word	0x0801babd

0801af8c <lflush>:
 801af8c:	8983      	ldrh	r3, [r0, #12]
 801af8e:	f003 0309 	and.w	r3, r3, #9
 801af92:	2b09      	cmp	r3, #9
 801af94:	d101      	bne.n	801af9a <lflush+0xe>
 801af96:	f7fe b923 	b.w	80191e0 <fflush>
 801af9a:	2000      	movs	r0, #0
 801af9c:	4770      	bx	lr
	...

0801afa0 <__srefill_r>:
 801afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afa2:	460c      	mov	r4, r1
 801afa4:	4605      	mov	r5, r0
 801afa6:	b118      	cbz	r0, 801afb0 <__srefill_r+0x10>
 801afa8:	6983      	ldr	r3, [r0, #24]
 801afaa:	b90b      	cbnz	r3, 801afb0 <__srefill_r+0x10>
 801afac:	f7fe f96a 	bl	8019284 <__sinit>
 801afb0:	4b3c      	ldr	r3, [pc, #240]	; (801b0a4 <__srefill_r+0x104>)
 801afb2:	429c      	cmp	r4, r3
 801afb4:	d10a      	bne.n	801afcc <__srefill_r+0x2c>
 801afb6:	686c      	ldr	r4, [r5, #4]
 801afb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801afbc:	2300      	movs	r3, #0
 801afbe:	6063      	str	r3, [r4, #4]
 801afc0:	b293      	uxth	r3, r2
 801afc2:	069e      	lsls	r6, r3, #26
 801afc4:	d50c      	bpl.n	801afe0 <__srefill_r+0x40>
 801afc6:	f04f 30ff 	mov.w	r0, #4294967295
 801afca:	e067      	b.n	801b09c <__srefill_r+0xfc>
 801afcc:	4b36      	ldr	r3, [pc, #216]	; (801b0a8 <__srefill_r+0x108>)
 801afce:	429c      	cmp	r4, r3
 801afd0:	d101      	bne.n	801afd6 <__srefill_r+0x36>
 801afd2:	68ac      	ldr	r4, [r5, #8]
 801afd4:	e7f0      	b.n	801afb8 <__srefill_r+0x18>
 801afd6:	4b35      	ldr	r3, [pc, #212]	; (801b0ac <__srefill_r+0x10c>)
 801afd8:	429c      	cmp	r4, r3
 801afda:	bf08      	it	eq
 801afdc:	68ec      	ldreq	r4, [r5, #12]
 801afde:	e7eb      	b.n	801afb8 <__srefill_r+0x18>
 801afe0:	0758      	lsls	r0, r3, #29
 801afe2:	d449      	bmi.n	801b078 <__srefill_r+0xd8>
 801afe4:	06d9      	lsls	r1, r3, #27
 801afe6:	d405      	bmi.n	801aff4 <__srefill_r+0x54>
 801afe8:	2309      	movs	r3, #9
 801afea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801afee:	602b      	str	r3, [r5, #0]
 801aff0:	81a2      	strh	r2, [r4, #12]
 801aff2:	e7e8      	b.n	801afc6 <__srefill_r+0x26>
 801aff4:	071a      	lsls	r2, r3, #28
 801aff6:	d50b      	bpl.n	801b010 <__srefill_r+0x70>
 801aff8:	4621      	mov	r1, r4
 801affa:	4628      	mov	r0, r5
 801affc:	f7fe f8c6 	bl	801918c <_fflush_r>
 801b000:	2800      	cmp	r0, #0
 801b002:	d1e0      	bne.n	801afc6 <__srefill_r+0x26>
 801b004:	89a3      	ldrh	r3, [r4, #12]
 801b006:	60a0      	str	r0, [r4, #8]
 801b008:	f023 0308 	bic.w	r3, r3, #8
 801b00c:	81a3      	strh	r3, [r4, #12]
 801b00e:	61a0      	str	r0, [r4, #24]
 801b010:	89a3      	ldrh	r3, [r4, #12]
 801b012:	f043 0304 	orr.w	r3, r3, #4
 801b016:	81a3      	strh	r3, [r4, #12]
 801b018:	6923      	ldr	r3, [r4, #16]
 801b01a:	b91b      	cbnz	r3, 801b024 <__srefill_r+0x84>
 801b01c:	4621      	mov	r1, r4
 801b01e:	4628      	mov	r0, r5
 801b020:	f7fe fd42 	bl	8019aa8 <__smakebuf_r>
 801b024:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 801b028:	b2be      	uxth	r6, r7
 801b02a:	07b3      	lsls	r3, r6, #30
 801b02c:	d00f      	beq.n	801b04e <__srefill_r+0xae>
 801b02e:	2301      	movs	r3, #1
 801b030:	81a3      	strh	r3, [r4, #12]
 801b032:	4b1f      	ldr	r3, [pc, #124]	; (801b0b0 <__srefill_r+0x110>)
 801b034:	491f      	ldr	r1, [pc, #124]	; (801b0b4 <__srefill_r+0x114>)
 801b036:	6818      	ldr	r0, [r3, #0]
 801b038:	f006 0609 	and.w	r6, r6, #9
 801b03c:	f7fe f98e 	bl	801935c <_fwalk>
 801b040:	2e09      	cmp	r6, #9
 801b042:	81a7      	strh	r7, [r4, #12]
 801b044:	d103      	bne.n	801b04e <__srefill_r+0xae>
 801b046:	4621      	mov	r1, r4
 801b048:	4628      	mov	r0, r5
 801b04a:	f7fe f819 	bl	8019080 <__sflush_r>
 801b04e:	6922      	ldr	r2, [r4, #16]
 801b050:	6022      	str	r2, [r4, #0]
 801b052:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b054:	6963      	ldr	r3, [r4, #20]
 801b056:	6a21      	ldr	r1, [r4, #32]
 801b058:	4628      	mov	r0, r5
 801b05a:	47b0      	blx	r6
 801b05c:	2800      	cmp	r0, #0
 801b05e:	6060      	str	r0, [r4, #4]
 801b060:	dc1d      	bgt.n	801b09e <__srefill_r+0xfe>
 801b062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b066:	bf17      	itett	ne
 801b068:	2200      	movne	r2, #0
 801b06a:	f043 0320 	orreq.w	r3, r3, #32
 801b06e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 801b072:	6062      	strne	r2, [r4, #4]
 801b074:	81a3      	strh	r3, [r4, #12]
 801b076:	e7a6      	b.n	801afc6 <__srefill_r+0x26>
 801b078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b07a:	2900      	cmp	r1, #0
 801b07c:	d0cc      	beq.n	801b018 <__srefill_r+0x78>
 801b07e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b082:	4299      	cmp	r1, r3
 801b084:	d002      	beq.n	801b08c <__srefill_r+0xec>
 801b086:	4628      	mov	r0, r5
 801b088:	f7ff f976 	bl	801a378 <_free_r>
 801b08c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b08e:	6063      	str	r3, [r4, #4]
 801b090:	2000      	movs	r0, #0
 801b092:	6360      	str	r0, [r4, #52]	; 0x34
 801b094:	2b00      	cmp	r3, #0
 801b096:	d0bf      	beq.n	801b018 <__srefill_r+0x78>
 801b098:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b09a:	6023      	str	r3, [r4, #0]
 801b09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b09e:	2000      	movs	r0, #0
 801b0a0:	e7fc      	b.n	801b09c <__srefill_r+0xfc>
 801b0a2:	bf00      	nop
 801b0a4:	0801b950 	.word	0x0801b950
 801b0a8:	0801b970 	.word	0x0801b970
 801b0ac:	0801b930 	.word	0x0801b930
 801b0b0:	0801b890 	.word	0x0801b890
 801b0b4:	0801af8d 	.word	0x0801af8d

0801b0b8 <_sbrk_r>:
 801b0b8:	b538      	push	{r3, r4, r5, lr}
 801b0ba:	4c06      	ldr	r4, [pc, #24]	; (801b0d4 <_sbrk_r+0x1c>)
 801b0bc:	2300      	movs	r3, #0
 801b0be:	4605      	mov	r5, r0
 801b0c0:	4608      	mov	r0, r1
 801b0c2:	6023      	str	r3, [r4, #0]
 801b0c4:	f7f4 fe2e 	bl	800fd24 <_sbrk>
 801b0c8:	1c43      	adds	r3, r0, #1
 801b0ca:	d102      	bne.n	801b0d2 <_sbrk_r+0x1a>
 801b0cc:	6823      	ldr	r3, [r4, #0]
 801b0ce:	b103      	cbz	r3, 801b0d2 <_sbrk_r+0x1a>
 801b0d0:	602b      	str	r3, [r5, #0]
 801b0d2:	bd38      	pop	{r3, r4, r5, pc}
 801b0d4:	20000aa4 	.word	0x20000aa4

0801b0d8 <__sccl>:
 801b0d8:	b570      	push	{r4, r5, r6, lr}
 801b0da:	780b      	ldrb	r3, [r1, #0]
 801b0dc:	2b5e      	cmp	r3, #94	; 0x5e
 801b0de:	bf13      	iteet	ne
 801b0e0:	1c4a      	addne	r2, r1, #1
 801b0e2:	1c8a      	addeq	r2, r1, #2
 801b0e4:	784b      	ldrbeq	r3, [r1, #1]
 801b0e6:	2100      	movne	r1, #0
 801b0e8:	bf08      	it	eq
 801b0ea:	2101      	moveq	r1, #1
 801b0ec:	1e44      	subs	r4, r0, #1
 801b0ee:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801b0f2:	f804 1f01 	strb.w	r1, [r4, #1]!
 801b0f6:	42ac      	cmp	r4, r5
 801b0f8:	d1fb      	bne.n	801b0f2 <__sccl+0x1a>
 801b0fa:	b913      	cbnz	r3, 801b102 <__sccl+0x2a>
 801b0fc:	3a01      	subs	r2, #1
 801b0fe:	4610      	mov	r0, r2
 801b100:	bd70      	pop	{r4, r5, r6, pc}
 801b102:	f081 0401 	eor.w	r4, r1, #1
 801b106:	54c4      	strb	r4, [r0, r3]
 801b108:	1c51      	adds	r1, r2, #1
 801b10a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801b10e:	2d2d      	cmp	r5, #45	; 0x2d
 801b110:	f101 36ff 	add.w	r6, r1, #4294967295
 801b114:	460a      	mov	r2, r1
 801b116:	d006      	beq.n	801b126 <__sccl+0x4e>
 801b118:	2d5d      	cmp	r5, #93	; 0x5d
 801b11a:	d0f0      	beq.n	801b0fe <__sccl+0x26>
 801b11c:	b90d      	cbnz	r5, 801b122 <__sccl+0x4a>
 801b11e:	4632      	mov	r2, r6
 801b120:	e7ed      	b.n	801b0fe <__sccl+0x26>
 801b122:	462b      	mov	r3, r5
 801b124:	e7ef      	b.n	801b106 <__sccl+0x2e>
 801b126:	780e      	ldrb	r6, [r1, #0]
 801b128:	2e5d      	cmp	r6, #93	; 0x5d
 801b12a:	d0fa      	beq.n	801b122 <__sccl+0x4a>
 801b12c:	42b3      	cmp	r3, r6
 801b12e:	dcf8      	bgt.n	801b122 <__sccl+0x4a>
 801b130:	3301      	adds	r3, #1
 801b132:	429e      	cmp	r6, r3
 801b134:	54c4      	strb	r4, [r0, r3]
 801b136:	dcfb      	bgt.n	801b130 <__sccl+0x58>
 801b138:	3102      	adds	r1, #2
 801b13a:	e7e6      	b.n	801b10a <__sccl+0x32>

0801b13c <__sread>:
 801b13c:	b510      	push	{r4, lr}
 801b13e:	460c      	mov	r4, r1
 801b140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b144:	f000 fa2e 	bl	801b5a4 <_read_r>
 801b148:	2800      	cmp	r0, #0
 801b14a:	bfab      	itete	ge
 801b14c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b14e:	89a3      	ldrhlt	r3, [r4, #12]
 801b150:	181b      	addge	r3, r3, r0
 801b152:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b156:	bfac      	ite	ge
 801b158:	6563      	strge	r3, [r4, #84]	; 0x54
 801b15a:	81a3      	strhlt	r3, [r4, #12]
 801b15c:	bd10      	pop	{r4, pc}

0801b15e <__swrite>:
 801b15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b162:	461f      	mov	r7, r3
 801b164:	898b      	ldrh	r3, [r1, #12]
 801b166:	05db      	lsls	r3, r3, #23
 801b168:	4605      	mov	r5, r0
 801b16a:	460c      	mov	r4, r1
 801b16c:	4616      	mov	r6, r2
 801b16e:	d505      	bpl.n	801b17c <__swrite+0x1e>
 801b170:	2302      	movs	r3, #2
 801b172:	2200      	movs	r2, #0
 801b174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b178:	f000 f9c0 	bl	801b4fc <_lseek_r>
 801b17c:	89a3      	ldrh	r3, [r4, #12]
 801b17e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b186:	81a3      	strh	r3, [r4, #12]
 801b188:	4632      	mov	r2, r6
 801b18a:	463b      	mov	r3, r7
 801b18c:	4628      	mov	r0, r5
 801b18e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b192:	f000 b96f 	b.w	801b474 <_write_r>

0801b196 <__sseek>:
 801b196:	b510      	push	{r4, lr}
 801b198:	460c      	mov	r4, r1
 801b19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b19e:	f000 f9ad 	bl	801b4fc <_lseek_r>
 801b1a2:	1c43      	adds	r3, r0, #1
 801b1a4:	89a3      	ldrh	r3, [r4, #12]
 801b1a6:	bf15      	itete	ne
 801b1a8:	6560      	strne	r0, [r4, #84]	; 0x54
 801b1aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b1ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b1b2:	81a3      	strheq	r3, [r4, #12]
 801b1b4:	bf18      	it	ne
 801b1b6:	81a3      	strhne	r3, [r4, #12]
 801b1b8:	bd10      	pop	{r4, pc}

0801b1ba <__sclose>:
 801b1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1be:	f000 b96b 	b.w	801b498 <_close_r>

0801b1c2 <strncmp>:
 801b1c2:	b510      	push	{r4, lr}
 801b1c4:	b16a      	cbz	r2, 801b1e2 <strncmp+0x20>
 801b1c6:	3901      	subs	r1, #1
 801b1c8:	1884      	adds	r4, r0, r2
 801b1ca:	f810 3b01 	ldrb.w	r3, [r0], #1
 801b1ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b1d2:	4293      	cmp	r3, r2
 801b1d4:	d103      	bne.n	801b1de <strncmp+0x1c>
 801b1d6:	42a0      	cmp	r0, r4
 801b1d8:	d001      	beq.n	801b1de <strncmp+0x1c>
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d1f5      	bne.n	801b1ca <strncmp+0x8>
 801b1de:	1a98      	subs	r0, r3, r2
 801b1e0:	bd10      	pop	{r4, pc}
 801b1e2:	4610      	mov	r0, r2
 801b1e4:	e7fc      	b.n	801b1e0 <strncmp+0x1e>

0801b1e6 <_strtoul_l.isra.0>:
 801b1e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1ea:	4680      	mov	r8, r0
 801b1ec:	4689      	mov	r9, r1
 801b1ee:	4692      	mov	sl, r2
 801b1f0:	461e      	mov	r6, r3
 801b1f2:	460f      	mov	r7, r1
 801b1f4:	463d      	mov	r5, r7
 801b1f6:	9808      	ldr	r0, [sp, #32]
 801b1f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b1fc:	f7fe fc0e 	bl	8019a1c <__locale_ctype_ptr_l>
 801b200:	4420      	add	r0, r4
 801b202:	7843      	ldrb	r3, [r0, #1]
 801b204:	f013 0308 	ands.w	r3, r3, #8
 801b208:	d130      	bne.n	801b26c <_strtoul_l.isra.0+0x86>
 801b20a:	2c2d      	cmp	r4, #45	; 0x2d
 801b20c:	d130      	bne.n	801b270 <_strtoul_l.isra.0+0x8a>
 801b20e:	787c      	ldrb	r4, [r7, #1]
 801b210:	1cbd      	adds	r5, r7, #2
 801b212:	2101      	movs	r1, #1
 801b214:	2e00      	cmp	r6, #0
 801b216:	d05c      	beq.n	801b2d2 <_strtoul_l.isra.0+0xec>
 801b218:	2e10      	cmp	r6, #16
 801b21a:	d109      	bne.n	801b230 <_strtoul_l.isra.0+0x4a>
 801b21c:	2c30      	cmp	r4, #48	; 0x30
 801b21e:	d107      	bne.n	801b230 <_strtoul_l.isra.0+0x4a>
 801b220:	782b      	ldrb	r3, [r5, #0]
 801b222:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b226:	2b58      	cmp	r3, #88	; 0x58
 801b228:	d14e      	bne.n	801b2c8 <_strtoul_l.isra.0+0xe2>
 801b22a:	786c      	ldrb	r4, [r5, #1]
 801b22c:	2610      	movs	r6, #16
 801b22e:	3502      	adds	r5, #2
 801b230:	f04f 32ff 	mov.w	r2, #4294967295
 801b234:	2300      	movs	r3, #0
 801b236:	fbb2 f2f6 	udiv	r2, r2, r6
 801b23a:	fb06 fc02 	mul.w	ip, r6, r2
 801b23e:	ea6f 0c0c 	mvn.w	ip, ip
 801b242:	4618      	mov	r0, r3
 801b244:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b248:	2f09      	cmp	r7, #9
 801b24a:	d817      	bhi.n	801b27c <_strtoul_l.isra.0+0x96>
 801b24c:	463c      	mov	r4, r7
 801b24e:	42a6      	cmp	r6, r4
 801b250:	dd23      	ble.n	801b29a <_strtoul_l.isra.0+0xb4>
 801b252:	2b00      	cmp	r3, #0
 801b254:	db1e      	blt.n	801b294 <_strtoul_l.isra.0+0xae>
 801b256:	4282      	cmp	r2, r0
 801b258:	d31c      	bcc.n	801b294 <_strtoul_l.isra.0+0xae>
 801b25a:	d101      	bne.n	801b260 <_strtoul_l.isra.0+0x7a>
 801b25c:	45a4      	cmp	ip, r4
 801b25e:	db19      	blt.n	801b294 <_strtoul_l.isra.0+0xae>
 801b260:	fb00 4006 	mla	r0, r0, r6, r4
 801b264:	2301      	movs	r3, #1
 801b266:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b26a:	e7eb      	b.n	801b244 <_strtoul_l.isra.0+0x5e>
 801b26c:	462f      	mov	r7, r5
 801b26e:	e7c1      	b.n	801b1f4 <_strtoul_l.isra.0+0xe>
 801b270:	2c2b      	cmp	r4, #43	; 0x2b
 801b272:	bf04      	itt	eq
 801b274:	1cbd      	addeq	r5, r7, #2
 801b276:	787c      	ldrbeq	r4, [r7, #1]
 801b278:	4619      	mov	r1, r3
 801b27a:	e7cb      	b.n	801b214 <_strtoul_l.isra.0+0x2e>
 801b27c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b280:	2f19      	cmp	r7, #25
 801b282:	d801      	bhi.n	801b288 <_strtoul_l.isra.0+0xa2>
 801b284:	3c37      	subs	r4, #55	; 0x37
 801b286:	e7e2      	b.n	801b24e <_strtoul_l.isra.0+0x68>
 801b288:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b28c:	2f19      	cmp	r7, #25
 801b28e:	d804      	bhi.n	801b29a <_strtoul_l.isra.0+0xb4>
 801b290:	3c57      	subs	r4, #87	; 0x57
 801b292:	e7dc      	b.n	801b24e <_strtoul_l.isra.0+0x68>
 801b294:	f04f 33ff 	mov.w	r3, #4294967295
 801b298:	e7e5      	b.n	801b266 <_strtoul_l.isra.0+0x80>
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	da09      	bge.n	801b2b2 <_strtoul_l.isra.0+0xcc>
 801b29e:	2322      	movs	r3, #34	; 0x22
 801b2a0:	f8c8 3000 	str.w	r3, [r8]
 801b2a4:	f04f 30ff 	mov.w	r0, #4294967295
 801b2a8:	f1ba 0f00 	cmp.w	sl, #0
 801b2ac:	d107      	bne.n	801b2be <_strtoul_l.isra.0+0xd8>
 801b2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2b2:	b101      	cbz	r1, 801b2b6 <_strtoul_l.isra.0+0xd0>
 801b2b4:	4240      	negs	r0, r0
 801b2b6:	f1ba 0f00 	cmp.w	sl, #0
 801b2ba:	d0f8      	beq.n	801b2ae <_strtoul_l.isra.0+0xc8>
 801b2bc:	b10b      	cbz	r3, 801b2c2 <_strtoul_l.isra.0+0xdc>
 801b2be:	f105 39ff 	add.w	r9, r5, #4294967295
 801b2c2:	f8ca 9000 	str.w	r9, [sl]
 801b2c6:	e7f2      	b.n	801b2ae <_strtoul_l.isra.0+0xc8>
 801b2c8:	2430      	movs	r4, #48	; 0x30
 801b2ca:	2e00      	cmp	r6, #0
 801b2cc:	d1b0      	bne.n	801b230 <_strtoul_l.isra.0+0x4a>
 801b2ce:	2608      	movs	r6, #8
 801b2d0:	e7ae      	b.n	801b230 <_strtoul_l.isra.0+0x4a>
 801b2d2:	2c30      	cmp	r4, #48	; 0x30
 801b2d4:	d0a4      	beq.n	801b220 <_strtoul_l.isra.0+0x3a>
 801b2d6:	260a      	movs	r6, #10
 801b2d8:	e7aa      	b.n	801b230 <_strtoul_l.isra.0+0x4a>
	...

0801b2dc <_strtoul_r>:
 801b2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b2de:	4c06      	ldr	r4, [pc, #24]	; (801b2f8 <_strtoul_r+0x1c>)
 801b2e0:	4d06      	ldr	r5, [pc, #24]	; (801b2fc <_strtoul_r+0x20>)
 801b2e2:	6824      	ldr	r4, [r4, #0]
 801b2e4:	6a24      	ldr	r4, [r4, #32]
 801b2e6:	2c00      	cmp	r4, #0
 801b2e8:	bf08      	it	eq
 801b2ea:	462c      	moveq	r4, r5
 801b2ec:	9400      	str	r4, [sp, #0]
 801b2ee:	f7ff ff7a 	bl	801b1e6 <_strtoul_l.isra.0>
 801b2f2:	b003      	add	sp, #12
 801b2f4:	bd30      	pop	{r4, r5, pc}
 801b2f6:	bf00      	nop
 801b2f8:	2000002c 	.word	0x2000002c
 801b2fc:	20000090 	.word	0x20000090

0801b300 <__submore>:
 801b300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b304:	460c      	mov	r4, r1
 801b306:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b30c:	4299      	cmp	r1, r3
 801b30e:	d11d      	bne.n	801b34c <__submore+0x4c>
 801b310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b314:	f7ff f87e 	bl	801a414 <_malloc_r>
 801b318:	b918      	cbnz	r0, 801b322 <__submore+0x22>
 801b31a:	f04f 30ff 	mov.w	r0, #4294967295
 801b31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b326:	63a3      	str	r3, [r4, #56]	; 0x38
 801b328:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801b32c:	6360      	str	r0, [r4, #52]	; 0x34
 801b32e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801b332:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801b336:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801b33a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801b33e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801b342:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801b346:	6020      	str	r0, [r4, #0]
 801b348:	2000      	movs	r0, #0
 801b34a:	e7e8      	b.n	801b31e <__submore+0x1e>
 801b34c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801b34e:	0077      	lsls	r7, r6, #1
 801b350:	463a      	mov	r2, r7
 801b352:	f000 f900 	bl	801b556 <_realloc_r>
 801b356:	4605      	mov	r5, r0
 801b358:	2800      	cmp	r0, #0
 801b35a:	d0de      	beq.n	801b31a <__submore+0x1a>
 801b35c:	eb00 0806 	add.w	r8, r0, r6
 801b360:	4601      	mov	r1, r0
 801b362:	4632      	mov	r2, r6
 801b364:	4640      	mov	r0, r8
 801b366:	f7fb f913 	bl	8016590 <memcpy>
 801b36a:	f8c4 8000 	str.w	r8, [r4]
 801b36e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801b372:	e7e9      	b.n	801b348 <__submore+0x48>

0801b374 <_ungetc_r>:
 801b374:	1c4b      	adds	r3, r1, #1
 801b376:	b570      	push	{r4, r5, r6, lr}
 801b378:	4606      	mov	r6, r0
 801b37a:	460d      	mov	r5, r1
 801b37c:	4614      	mov	r4, r2
 801b37e:	d103      	bne.n	801b388 <_ungetc_r+0x14>
 801b380:	f04f 35ff 	mov.w	r5, #4294967295
 801b384:	4628      	mov	r0, r5
 801b386:	bd70      	pop	{r4, r5, r6, pc}
 801b388:	b118      	cbz	r0, 801b392 <_ungetc_r+0x1e>
 801b38a:	6983      	ldr	r3, [r0, #24]
 801b38c:	b90b      	cbnz	r3, 801b392 <_ungetc_r+0x1e>
 801b38e:	f7fd ff79 	bl	8019284 <__sinit>
 801b392:	4b2e      	ldr	r3, [pc, #184]	; (801b44c <_ungetc_r+0xd8>)
 801b394:	429c      	cmp	r4, r3
 801b396:	d12c      	bne.n	801b3f2 <_ungetc_r+0x7e>
 801b398:	6874      	ldr	r4, [r6, #4]
 801b39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b39e:	f023 0320 	bic.w	r3, r3, #32
 801b3a2:	81a3      	strh	r3, [r4, #12]
 801b3a4:	b29b      	uxth	r3, r3
 801b3a6:	0759      	lsls	r1, r3, #29
 801b3a8:	d413      	bmi.n	801b3d2 <_ungetc_r+0x5e>
 801b3aa:	06da      	lsls	r2, r3, #27
 801b3ac:	d5e8      	bpl.n	801b380 <_ungetc_r+0xc>
 801b3ae:	071b      	lsls	r3, r3, #28
 801b3b0:	d50b      	bpl.n	801b3ca <_ungetc_r+0x56>
 801b3b2:	4621      	mov	r1, r4
 801b3b4:	4630      	mov	r0, r6
 801b3b6:	f7fd fee9 	bl	801918c <_fflush_r>
 801b3ba:	2800      	cmp	r0, #0
 801b3bc:	d1e0      	bne.n	801b380 <_ungetc_r+0xc>
 801b3be:	89a3      	ldrh	r3, [r4, #12]
 801b3c0:	60a0      	str	r0, [r4, #8]
 801b3c2:	f023 0308 	bic.w	r3, r3, #8
 801b3c6:	81a3      	strh	r3, [r4, #12]
 801b3c8:	61a0      	str	r0, [r4, #24]
 801b3ca:	89a3      	ldrh	r3, [r4, #12]
 801b3cc:	f043 0304 	orr.w	r3, r3, #4
 801b3d0:	81a3      	strh	r3, [r4, #12]
 801b3d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b3d4:	6862      	ldr	r2, [r4, #4]
 801b3d6:	b2ed      	uxtb	r5, r5
 801b3d8:	b1e3      	cbz	r3, 801b414 <_ungetc_r+0xa0>
 801b3da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b3dc:	4293      	cmp	r3, r2
 801b3de:	dd12      	ble.n	801b406 <_ungetc_r+0x92>
 801b3e0:	6823      	ldr	r3, [r4, #0]
 801b3e2:	1e5a      	subs	r2, r3, #1
 801b3e4:	6022      	str	r2, [r4, #0]
 801b3e6:	f803 5c01 	strb.w	r5, [r3, #-1]
 801b3ea:	6863      	ldr	r3, [r4, #4]
 801b3ec:	3301      	adds	r3, #1
 801b3ee:	6063      	str	r3, [r4, #4]
 801b3f0:	e7c8      	b.n	801b384 <_ungetc_r+0x10>
 801b3f2:	4b17      	ldr	r3, [pc, #92]	; (801b450 <_ungetc_r+0xdc>)
 801b3f4:	429c      	cmp	r4, r3
 801b3f6:	d101      	bne.n	801b3fc <_ungetc_r+0x88>
 801b3f8:	68b4      	ldr	r4, [r6, #8]
 801b3fa:	e7ce      	b.n	801b39a <_ungetc_r+0x26>
 801b3fc:	4b15      	ldr	r3, [pc, #84]	; (801b454 <_ungetc_r+0xe0>)
 801b3fe:	429c      	cmp	r4, r3
 801b400:	bf08      	it	eq
 801b402:	68f4      	ldreq	r4, [r6, #12]
 801b404:	e7c9      	b.n	801b39a <_ungetc_r+0x26>
 801b406:	4621      	mov	r1, r4
 801b408:	4630      	mov	r0, r6
 801b40a:	f7ff ff79 	bl	801b300 <__submore>
 801b40e:	2800      	cmp	r0, #0
 801b410:	d0e6      	beq.n	801b3e0 <_ungetc_r+0x6c>
 801b412:	e7b5      	b.n	801b380 <_ungetc_r+0xc>
 801b414:	6921      	ldr	r1, [r4, #16]
 801b416:	6823      	ldr	r3, [r4, #0]
 801b418:	b151      	cbz	r1, 801b430 <_ungetc_r+0xbc>
 801b41a:	4299      	cmp	r1, r3
 801b41c:	d208      	bcs.n	801b430 <_ungetc_r+0xbc>
 801b41e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801b422:	42a9      	cmp	r1, r5
 801b424:	d104      	bne.n	801b430 <_ungetc_r+0xbc>
 801b426:	3b01      	subs	r3, #1
 801b428:	3201      	adds	r2, #1
 801b42a:	6023      	str	r3, [r4, #0]
 801b42c:	6062      	str	r2, [r4, #4]
 801b42e:	e7a9      	b.n	801b384 <_ungetc_r+0x10>
 801b430:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801b434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b438:	6363      	str	r3, [r4, #52]	; 0x34
 801b43a:	2303      	movs	r3, #3
 801b43c:	63a3      	str	r3, [r4, #56]	; 0x38
 801b43e:	4623      	mov	r3, r4
 801b440:	f803 5f46 	strb.w	r5, [r3, #70]!
 801b444:	6023      	str	r3, [r4, #0]
 801b446:	2301      	movs	r3, #1
 801b448:	e7d1      	b.n	801b3ee <_ungetc_r+0x7a>
 801b44a:	bf00      	nop
 801b44c:	0801b950 	.word	0x0801b950
 801b450:	0801b970 	.word	0x0801b970
 801b454:	0801b930 	.word	0x0801b930

0801b458 <__ascii_wctomb>:
 801b458:	b149      	cbz	r1, 801b46e <__ascii_wctomb+0x16>
 801b45a:	2aff      	cmp	r2, #255	; 0xff
 801b45c:	bf85      	ittet	hi
 801b45e:	238a      	movhi	r3, #138	; 0x8a
 801b460:	6003      	strhi	r3, [r0, #0]
 801b462:	700a      	strbls	r2, [r1, #0]
 801b464:	f04f 30ff 	movhi.w	r0, #4294967295
 801b468:	bf98      	it	ls
 801b46a:	2001      	movls	r0, #1
 801b46c:	4770      	bx	lr
 801b46e:	4608      	mov	r0, r1
 801b470:	4770      	bx	lr
	...

0801b474 <_write_r>:
 801b474:	b538      	push	{r3, r4, r5, lr}
 801b476:	4c07      	ldr	r4, [pc, #28]	; (801b494 <_write_r+0x20>)
 801b478:	4605      	mov	r5, r0
 801b47a:	4608      	mov	r0, r1
 801b47c:	4611      	mov	r1, r2
 801b47e:	2200      	movs	r2, #0
 801b480:	6022      	str	r2, [r4, #0]
 801b482:	461a      	mov	r2, r3
 801b484:	f7f4 fbfd 	bl	800fc82 <_write>
 801b488:	1c43      	adds	r3, r0, #1
 801b48a:	d102      	bne.n	801b492 <_write_r+0x1e>
 801b48c:	6823      	ldr	r3, [r4, #0]
 801b48e:	b103      	cbz	r3, 801b492 <_write_r+0x1e>
 801b490:	602b      	str	r3, [r5, #0]
 801b492:	bd38      	pop	{r3, r4, r5, pc}
 801b494:	20000aa4 	.word	0x20000aa4

0801b498 <_close_r>:
 801b498:	b538      	push	{r3, r4, r5, lr}
 801b49a:	4c06      	ldr	r4, [pc, #24]	; (801b4b4 <_close_r+0x1c>)
 801b49c:	2300      	movs	r3, #0
 801b49e:	4605      	mov	r5, r0
 801b4a0:	4608      	mov	r0, r1
 801b4a2:	6023      	str	r3, [r4, #0]
 801b4a4:	f7f4 fc09 	bl	800fcba <_close>
 801b4a8:	1c43      	adds	r3, r0, #1
 801b4aa:	d102      	bne.n	801b4b2 <_close_r+0x1a>
 801b4ac:	6823      	ldr	r3, [r4, #0]
 801b4ae:	b103      	cbz	r3, 801b4b2 <_close_r+0x1a>
 801b4b0:	602b      	str	r3, [r5, #0]
 801b4b2:	bd38      	pop	{r3, r4, r5, pc}
 801b4b4:	20000aa4 	.word	0x20000aa4

0801b4b8 <_fstat_r>:
 801b4b8:	b538      	push	{r3, r4, r5, lr}
 801b4ba:	4c07      	ldr	r4, [pc, #28]	; (801b4d8 <_fstat_r+0x20>)
 801b4bc:	2300      	movs	r3, #0
 801b4be:	4605      	mov	r5, r0
 801b4c0:	4608      	mov	r0, r1
 801b4c2:	4611      	mov	r1, r2
 801b4c4:	6023      	str	r3, [r4, #0]
 801b4c6:	f7f4 fc04 	bl	800fcd2 <_fstat>
 801b4ca:	1c43      	adds	r3, r0, #1
 801b4cc:	d102      	bne.n	801b4d4 <_fstat_r+0x1c>
 801b4ce:	6823      	ldr	r3, [r4, #0]
 801b4d0:	b103      	cbz	r3, 801b4d4 <_fstat_r+0x1c>
 801b4d2:	602b      	str	r3, [r5, #0]
 801b4d4:	bd38      	pop	{r3, r4, r5, pc}
 801b4d6:	bf00      	nop
 801b4d8:	20000aa4 	.word	0x20000aa4

0801b4dc <_isatty_r>:
 801b4dc:	b538      	push	{r3, r4, r5, lr}
 801b4de:	4c06      	ldr	r4, [pc, #24]	; (801b4f8 <_isatty_r+0x1c>)
 801b4e0:	2300      	movs	r3, #0
 801b4e2:	4605      	mov	r5, r0
 801b4e4:	4608      	mov	r0, r1
 801b4e6:	6023      	str	r3, [r4, #0]
 801b4e8:	f7f4 fc03 	bl	800fcf2 <_isatty>
 801b4ec:	1c43      	adds	r3, r0, #1
 801b4ee:	d102      	bne.n	801b4f6 <_isatty_r+0x1a>
 801b4f0:	6823      	ldr	r3, [r4, #0]
 801b4f2:	b103      	cbz	r3, 801b4f6 <_isatty_r+0x1a>
 801b4f4:	602b      	str	r3, [r5, #0]
 801b4f6:	bd38      	pop	{r3, r4, r5, pc}
 801b4f8:	20000aa4 	.word	0x20000aa4

0801b4fc <_lseek_r>:
 801b4fc:	b538      	push	{r3, r4, r5, lr}
 801b4fe:	4c07      	ldr	r4, [pc, #28]	; (801b51c <_lseek_r+0x20>)
 801b500:	4605      	mov	r5, r0
 801b502:	4608      	mov	r0, r1
 801b504:	4611      	mov	r1, r2
 801b506:	2200      	movs	r2, #0
 801b508:	6022      	str	r2, [r4, #0]
 801b50a:	461a      	mov	r2, r3
 801b50c:	f7f4 fbfc 	bl	800fd08 <_lseek>
 801b510:	1c43      	adds	r3, r0, #1
 801b512:	d102      	bne.n	801b51a <_lseek_r+0x1e>
 801b514:	6823      	ldr	r3, [r4, #0]
 801b516:	b103      	cbz	r3, 801b51a <_lseek_r+0x1e>
 801b518:	602b      	str	r3, [r5, #0]
 801b51a:	bd38      	pop	{r3, r4, r5, pc}
 801b51c:	20000aa4 	.word	0x20000aa4

0801b520 <memmove>:
 801b520:	4288      	cmp	r0, r1
 801b522:	b510      	push	{r4, lr}
 801b524:	eb01 0302 	add.w	r3, r1, r2
 801b528:	d807      	bhi.n	801b53a <memmove+0x1a>
 801b52a:	1e42      	subs	r2, r0, #1
 801b52c:	4299      	cmp	r1, r3
 801b52e:	d00a      	beq.n	801b546 <memmove+0x26>
 801b530:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b534:	f802 4f01 	strb.w	r4, [r2, #1]!
 801b538:	e7f8      	b.n	801b52c <memmove+0xc>
 801b53a:	4283      	cmp	r3, r0
 801b53c:	d9f5      	bls.n	801b52a <memmove+0xa>
 801b53e:	1881      	adds	r1, r0, r2
 801b540:	1ad2      	subs	r2, r2, r3
 801b542:	42d3      	cmn	r3, r2
 801b544:	d100      	bne.n	801b548 <memmove+0x28>
 801b546:	bd10      	pop	{r4, pc}
 801b548:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b54c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801b550:	e7f7      	b.n	801b542 <memmove+0x22>

0801b552 <__malloc_lock>:
 801b552:	4770      	bx	lr

0801b554 <__malloc_unlock>:
 801b554:	4770      	bx	lr

0801b556 <_realloc_r>:
 801b556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b558:	4607      	mov	r7, r0
 801b55a:	4614      	mov	r4, r2
 801b55c:	460e      	mov	r6, r1
 801b55e:	b921      	cbnz	r1, 801b56a <_realloc_r+0x14>
 801b560:	4611      	mov	r1, r2
 801b562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b566:	f7fe bf55 	b.w	801a414 <_malloc_r>
 801b56a:	b922      	cbnz	r2, 801b576 <_realloc_r+0x20>
 801b56c:	f7fe ff04 	bl	801a378 <_free_r>
 801b570:	4625      	mov	r5, r4
 801b572:	4628      	mov	r0, r5
 801b574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b576:	f000 f827 	bl	801b5c8 <_malloc_usable_size_r>
 801b57a:	42a0      	cmp	r0, r4
 801b57c:	d20f      	bcs.n	801b59e <_realloc_r+0x48>
 801b57e:	4621      	mov	r1, r4
 801b580:	4638      	mov	r0, r7
 801b582:	f7fe ff47 	bl	801a414 <_malloc_r>
 801b586:	4605      	mov	r5, r0
 801b588:	2800      	cmp	r0, #0
 801b58a:	d0f2      	beq.n	801b572 <_realloc_r+0x1c>
 801b58c:	4631      	mov	r1, r6
 801b58e:	4622      	mov	r2, r4
 801b590:	f7fa fffe 	bl	8016590 <memcpy>
 801b594:	4631      	mov	r1, r6
 801b596:	4638      	mov	r0, r7
 801b598:	f7fe feee 	bl	801a378 <_free_r>
 801b59c:	e7e9      	b.n	801b572 <_realloc_r+0x1c>
 801b59e:	4635      	mov	r5, r6
 801b5a0:	e7e7      	b.n	801b572 <_realloc_r+0x1c>
	...

0801b5a4 <_read_r>:
 801b5a4:	b538      	push	{r3, r4, r5, lr}
 801b5a6:	4c07      	ldr	r4, [pc, #28]	; (801b5c4 <_read_r+0x20>)
 801b5a8:	4605      	mov	r5, r0
 801b5aa:	4608      	mov	r0, r1
 801b5ac:	4611      	mov	r1, r2
 801b5ae:	2200      	movs	r2, #0
 801b5b0:	6022      	str	r2, [r4, #0]
 801b5b2:	461a      	mov	r2, r3
 801b5b4:	f7f4 fb48 	bl	800fc48 <_read>
 801b5b8:	1c43      	adds	r3, r0, #1
 801b5ba:	d102      	bne.n	801b5c2 <_read_r+0x1e>
 801b5bc:	6823      	ldr	r3, [r4, #0]
 801b5be:	b103      	cbz	r3, 801b5c2 <_read_r+0x1e>
 801b5c0:	602b      	str	r3, [r5, #0]
 801b5c2:	bd38      	pop	{r3, r4, r5, pc}
 801b5c4:	20000aa4 	.word	0x20000aa4

0801b5c8 <_malloc_usable_size_r>:
 801b5c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b5cc:	1f18      	subs	r0, r3, #4
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	bfbc      	itt	lt
 801b5d2:	580b      	ldrlt	r3, [r1, r0]
 801b5d4:	18c0      	addlt	r0, r0, r3
 801b5d6:	4770      	bx	lr

0801b5d8 <_init>:
 801b5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5da:	bf00      	nop
 801b5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5de:	bc08      	pop	{r3}
 801b5e0:	469e      	mov	lr, r3
 801b5e2:	4770      	bx	lr

0801b5e4 <_fini>:
 801b5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5e6:	bf00      	nop
 801b5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5ea:	bc08      	pop	{r3}
 801b5ec:	469e      	mov	lr, r3
 801b5ee:	4770      	bx	lr
