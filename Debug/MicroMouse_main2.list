
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         00010fe4  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000770  08018fe8  08018fe8  00028fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08019758  08019758  00030208  2**0
                  CONTENTS
  6 .ARM          00000008  08019758  08019758  00029758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08019760  08019760  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08019760  08019760  00029760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08019764  08019764  00029764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000208  20000000  08019768  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008d1c  20000208  08019970  00030208  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008f24  08019970  00038f24  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003020a  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006225  00000000  00000000  00060442  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000058ce  00000000  00000000  00066667  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000018c8  00000000  00000000  0006bf38  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000020a8  00000000  00000000  0006d800  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00028901  00000000  00000000  0006f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00019e35  00000000  00000000  000981a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000cad30  00000000  00000000  000b1fde  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  0017cd0e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00007904  00000000  00000000  0017cd8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000208 	.word	0x20000208
 800801c:	00000000 	.word	0x00000000
 8008020:	08018fcc 	.word	0x08018fcc

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	2000020c 	.word	0x2000020c
 800803c:	08018fcc 	.word	0x08018fcc

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <InitPosition>:
}


void InitPosition()
{
	Pos.X = 0;
 8008df8:	4b04      	ldr	r3, [pc, #16]	; (8008e0c <InitPosition+0x14>)
 8008dfa:	2200      	movs	r2, #0
	Pos.Y = 0;
	Pos.Car = north;
	Pos.Dir = front;
	Pos.Act = Wait;
 8008dfc:	2004      	movs	r0, #4
	Pos.WallSaf = wall_warn;//どっちにするか
 8008dfe:	2101      	movs	r1, #1
	Pos.Act = Wait;
 8008e00:	7198      	strb	r0, [r3, #6]
	Pos.WallSaf = wall_warn;//どっちにするか
 8008e02:	71d9      	strb	r1, [r3, #7]
	Pos.X = 0;
 8008e04:	801a      	strh	r2, [r3, #0]
	Pos.Car = north;
 8008e06:	715a      	strb	r2, [r3, #5]
	Pos.Dir = front;
 8008e08:	711a      	strb	r2, [r3, #4]

}
 8008e0a:	4770      	bx	lr
 8008e0c:	20000004 	.word	0x20000004

08008e10 <GetWallCtrlDirection>:

int GetWallCtrlDirection()
{
	//新ライブラリ用に変更
	switch(my_mouse.now.car)
 8008e10:	4a31      	ldr	r2, [pc, #196]	; (8008ed8 <GetWallCtrlDirection+0xc8>)
 8008e12:	7a93      	ldrb	r3, [r2, #10]
 8008e14:	2b06      	cmp	r3, #6
 8008e16:	d855      	bhi.n	8008ec4 <GetWallCtrlDirection+0xb4>
 8008e18:	e8df f003 	tbb	[pc, r3]
 8008e1c:	542c5440 	.word	0x542c5440
 8008e20:	5418      	.short	0x5418
 8008e22:	04          	.byte	0x04
 8008e23:	00          	.byte	0x00
		{
			return N_WALL_PID;
		}
		break;
	case west:
		if(my_mouse.now.wall.west == wall)
 8008e24:	7b13      	ldrb	r3, [r2, #12]
 8008e26:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8008e2a:	2a40      	cmp	r2, #64	; 0x40
 8008e2c:	d04c      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		{
			return F_WALL_PID;
		}
		else if ( my_mouse.now.wall.north == wall && my_mouse.now.wall.south == wall)//.westになってた。あと == south )で意味わからない処理に。
 8008e2e:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8008e32:	2a11      	cmp	r2, #17
 8008e34:	d04a      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		{
			return D_WALL_PID;
		}
		else if ( my_mouse.now.wall.north == wall )
 8008e36:	f003 0203 	and.w	r2, r3, #3
 8008e3a:	2a01      	cmp	r2, #1
 8008e3c:	d048      	beq.n	8008ed0 <GetWallCtrlDirection+0xc0>
		{
			return R_WALL_PID;
		}
		else if ( my_mouse.now.wall.south == wall )
 8008e3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e42:	2b10      	cmp	r3, #16
			return L_WALL_PID;
 8008e44:	bf14      	ite	ne
 8008e46:	2006      	movne	r0, #6
 8008e48:	2002      	moveq	r0, #2
 8008e4a:	4770      	bx	lr
		if(my_mouse.now.wall.south == wall)
 8008e4c:	7b13      	ldrb	r3, [r2, #12]
 8008e4e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8008e52:	2a10      	cmp	r2, #16
 8008e54:	d038      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		else if(my_mouse.now.wall.east == wall && my_mouse.now.wall.west == wall)
 8008e56:	f003 02cc 	and.w	r2, r3, #204	; 0xcc
 8008e5a:	2a44      	cmp	r2, #68	; 0x44
 8008e5c:	d036      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		else if(my_mouse.now.wall.east == wall)
 8008e5e:	f003 020c 	and.w	r2, r3, #12
 8008e62:	2a04      	cmp	r2, #4
 8008e64:	d036      	beq.n	8008ed4 <GetWallCtrlDirection+0xc4>
		else if(my_mouse.now.wall.west == wall)
 8008e66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e6a:	2b40      	cmp	r3, #64	; 0x40
			return R_WALL_PID;
 8008e6c:	bf14      	ite	ne
 8008e6e:	2006      	movne	r0, #6
 8008e70:	2003      	moveq	r0, #3
 8008e72:	4770      	bx	lr
		if(my_mouse.now.wall.east == wall)
 8008e74:	7b13      	ldrb	r3, [r2, #12]
 8008e76:	f003 020c 	and.w	r2, r3, #12
 8008e7a:	2a04      	cmp	r2, #4
 8008e7c:	d024      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		else if(my_mouse.now.wall.north == wall && my_mouse.now.wall.south == wall)//south)
 8008e7e:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8008e82:	2a11      	cmp	r2, #17
 8008e84:	d022      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		else if(my_mouse.now.wall.north == wall)
 8008e86:	f003 0203 	and.w	r2, r3, #3
 8008e8a:	2a01      	cmp	r2, #1
 8008e8c:	d022      	beq.n	8008ed4 <GetWallCtrlDirection+0xc4>
		else if(my_mouse.now.wall.south == wall)
 8008e8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e92:	2b10      	cmp	r3, #16
			return R_WALL_PID;
 8008e94:	bf14      	ite	ne
 8008e96:	2006      	movne	r0, #6
 8008e98:	2003      	moveq	r0, #3
 8008e9a:	4770      	bx	lr
		if(my_mouse.now.wall.north == wall) //現在の方角と、座標から、壁の存在を確認する処理
 8008e9c:	7b13      	ldrb	r3, [r2, #12]
 8008e9e:	f003 0203 	and.w	r2, r3, #3
 8008ea2:	2a01      	cmp	r2, #1
 8008ea4:	d010      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		else if(my_mouse.now.wall.east == wall && my_mouse.now.wall.west == wall)
 8008ea6:	f003 02cc 	and.w	r2, r3, #204	; 0xcc
 8008eaa:	2a44      	cmp	r2, #68	; 0x44
 8008eac:	d00e      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		else if(my_mouse.now.wall.east == wall)
 8008eae:	f003 020c 	and.w	r2, r3, #12
 8008eb2:	2a04      	cmp	r2, #4
 8008eb4:	d00c      	beq.n	8008ed0 <GetWallCtrlDirection+0xc0>
		else if(my_mouse.now.wall.west == wall)
 8008eb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008eba:	2b40      	cmp	r3, #64	; 0x40
			return L_WALL_PID;
 8008ebc:	bf14      	ite	ne
 8008ebe:	2006      	movne	r0, #6
 8008ec0:	2002      	moveq	r0, #2
 8008ec2:	4770      	bx	lr
		}
		break;

	default:
		//斜め方向
		return N_WALL_PID;
 8008ec4:	2006      	movs	r0, #6
 8008ec6:	4770      	bx	lr
			return F_WALL_PID;
 8008ec8:	2008      	movs	r0, #8
 8008eca:	4770      	bx	lr
			return D_WALL_PID;
 8008ecc:	2001      	movs	r0, #1
 8008ece:	4770      	bx	lr
			return R_WALL_PID;
 8008ed0:	2003      	movs	r0, #3
		break;
	}

}
 8008ed2:	4770      	bx	lr
			return L_WALL_PID;
 8008ed4:	2002      	movs	r0, #2
 8008ed6:	4770      	bx	lr
 8008ed8:	200081fc 	.word	0x200081fc

08008edc <WaitStopAndReset>:
//	KeepCounter[LEFT] = INITIAL_PULSE;
//	KeepCounter[RIGHT] = INITIAL_PULSE;
//}

void WaitStopAndReset()
{
 8008edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008f54 <WaitStopAndReset+0x78>
 8008ee4:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8008f58 <WaitStopAndReset+0x7c>
 8008ee8:	4f16      	ldr	r7, [pc, #88]	; (8008f44 <WaitStopAndReset+0x68>)
 8008eea:	4e17      	ldr	r6, [pc, #92]	; (8008f48 <WaitStopAndReset+0x6c>)
 8008eec:	4d17      	ldr	r5, [pc, #92]	; (8008f4c <WaitStopAndReset+0x70>)
 8008eee:	ed2d 8b02 	vpush	{d8}
//	ControlWall();//ベイブレード対策
	do
	{

		//壁制御の更新
		TargetVelocity[BODY] = 0;
 8008ef2:	2400      	movs	r4, #0
		Acceleration = 0;
		//PIDChangeFlag( D_, 0);
		TargetAngularV = 0;
		AngularAcceleration = 0;
		//AngularV = 0;
		if(CurrentVelocity[LEFT] > 500)
 8008ef4:	ed9f 8a16 	vldr	s16, [pc, #88]	; 8008f50 <WaitStopAndReset+0x74>
 8008ef8:	e006      	b.n	8008f08 <WaitStopAndReset+0x2c>
			ChangeLED(2);
			//printf("回転停止中\r\n");

	}while(CurrentVelocity[BODY] != 0);
 8008efa:	edd5 7a02 	vldr	s15, [r5, #8]
 8008efe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f06:	d016      	beq.n	8008f36 <WaitStopAndReset+0x5a>
		TargetVelocity[BODY] = 0;
 8008f08:	f8c9 4008 	str.w	r4, [r9, #8]
		Acceleration = 0;
 8008f0c:	f8c8 4000 	str.w	r4, [r8]
		TargetAngularV = 0;
 8008f10:	603c      	str	r4, [r7, #0]
		AngularAcceleration = 0;
 8008f12:	6034      	str	r4, [r6, #0]
		if(CurrentVelocity[LEFT] > 500)
 8008f14:	edd5 7a00 	vldr	s15, [r5]
 8008f18:	eef4 7ac8 	vcmpe.f32	s15, s16
 8008f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f20:	ddeb      	ble.n	8008efa <WaitStopAndReset+0x1e>
			ChangeLED(2);
 8008f22:	2002      	movs	r0, #2
 8008f24:	f004 febc 	bl	800dca0 <ChangeLED>
	}while(CurrentVelocity[BODY] != 0);
 8008f28:	edd5 7a02 	vldr	s15, [r5, #8]
 8008f2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f34:	d1e8      	bne.n	8008f08 <WaitStopAndReset+0x2c>
	HAL_Delay(100);
}
 8008f36:	ecbd 8b02 	vpop	{d8}
	HAL_Delay(100);
 8008f3a:	2064      	movs	r0, #100	; 0x64
}
 8008f3c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(100);
 8008f40:	f005 be62 	b.w	800ec08 <HAL_Delay>
 8008f44:	2000896c 	.word	0x2000896c
 8008f48:	20007f3c 	.word	0x20007f3c
 8008f4c:	20008998 	.word	0x20008998
 8008f50:	43fa0000 	.word	0x43fa0000
 8008f54:	2000895c 	.word	0x2000895c
 8008f58:	20007f34 	.word	0x20007f34
 8008f5c:	00000000 	.word	0x00000000

08008f60 <Rotate>:
	//加速度が一定。角速度が増加。角速度を積分して角度。角速度の式を作り、角速度を積分して角度を求める等式を立てる。
	//Angle = インテグラル(ang_v(t))dt
	//v = v0+at	|	t=v/a	||		ang_v = ang_v0 + ang_accel *t		||	t = ang_v/ang_accel
	//x=0.5*v*v/a	|	a = 0.5*v*v*/x		||		θ=ang_v0*t+0.5*ang_v^2/ang_accel	||	ang_accel =
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)
	float accel_deg = deg*30/90;
 8008f60:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8008f64:	ee60 6a26 	vmul.f32	s13, s0, s13
 8008f68:	ed9f 6a9f 	vldr	s12, [pc, #636]	; 80091e8 <Rotate+0x288>
	float const_deg = deg*30/90;
	float decel_deg = deg*30/90;
	float angular_acceleration[3] = {
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f6c:	eddf 7a9f 	vldr	s15, [pc, #636]	; 80091ec <Rotate+0x28c>
	float accel_deg = deg*30/90;
 8008f70:	ee86 7a86 	vdiv.f32	s14, s13, s12
{
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TargetAngularV = 0;
 8008f76:	4b9e      	ldr	r3, [pc, #632]	; (80091f0 <Rotate+0x290>)
 8008f78:	2400      	movs	r4, #0
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f7a:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8008f7e:	ee77 6a07 	vadd.f32	s13, s14, s14
 8008f82:	ee67 7aa0 	vmul.f32	s15, s15, s1
{
 8008f86:	ed2d 8b04 	vpush	{d8-d9}
			0,
			64*T1*ang_v*ang_v / (2*decel_deg)
	};
	float move_angle[3] = {
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f8a:	ee17 0a10 	vmov	r0, s14
	TargetAngularV = 0;
 8008f8e:	601c      	str	r4, [r3, #0]
{
 8008f90:	eeb0 9a60 	vmov.f32	s18, s1
 8008f94:	eef0 8a40 	vmov.f32	s17, s0
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f98:	ee87 8aa6 	vdiv.f32	s16, s15, s13
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f9c:	f7ff fa0c 	bl	80083b8 <__aeabi_f2d>
 8008fa0:	a38d      	add	r3, pc, #564	; (adr r3, 80091d8 <Rotate+0x278>)
 8008fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa6:	f7ff fa5f 	bl	8008468 <__aeabi_dmul>
 8008faa:	2200      	movs	r2, #0
 8008fac:	4b91      	ldr	r3, [pc, #580]	; (80091f4 <Rotate+0x294>)
 8008fae:	f7ff fb85 	bl	80086bc <__aeabi_ddiv>
 8008fb2:	f7ff fd51 	bl	8008a58 <__aeabi_d2f>
		}

	}
#endif

	if( ang_v > 0)	//右回転
 8008fb6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8008fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008fbe:	ee09 0a90 	vmov	s19, r0
	if( ang_v > 0)	//右回転
 8008fc2:	dc0b      	bgt.n	8008fdc <Rotate+0x7c>
				 break;
			 }
		}

	}
	else if( ang_v < 0)
 8008fc4:	f100 808f 	bmi.w	80090e6 <Rotate+0x186>
			 		break;
			 }
		}

	}
	AngularAcceleration = 0;
 8008fc8:	4b8b      	ldr	r3, [pc, #556]	; (80091f8 <Rotate+0x298>)
 8008fca:	601c      	str	r4, [r3, #0]
	//TargetAngularV = 0;
	//printf("加速後の角速度 : %f\r\n",AngularV);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",AngularAcceleration);

	WaitStopAndReset();
 8008fcc:	f7ff ff86 	bl	8008edc <WaitStopAndReset>
	KeepPulse[BODY] = KeepPulse[BODY];

	//向いた方角を変える
//	ChangeCardinal();
	//printf("回転終了\r\n");
}
 8008fd0:	ecbd 8b04 	vpop	{d8-d9}
 8008fd4:	4b89      	ldr	r3, [pc, #548]	; (80091fc <Rotate+0x29c>)
	KeepPulse[BODY] = KeepPulse[BODY];
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	609a      	str	r2, [r3, #8]
}
 8008fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008fdc:	4c88      	ldr	r4, [pc, #544]	; (8009200 <Rotate+0x2a0>)
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008fde:	4d89      	ldr	r5, [pc, #548]	; (8009204 <Rotate+0x2a4>)
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008fe0:	edd4 7a00 	vldr	s15, [r4]
 8008fe4:	4e84      	ldr	r6, [pc, #528]	; (80091f8 <Rotate+0x298>)
 8008fe6:	ee79 7aa7 	vadd.f32	s15, s19, s15
		ChangeLED(2);
 8008fea:	2002      	movs	r0, #2
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008fec:	edc4 7a00 	vstr	s15, [r4]
		ChangeLED(2);
 8008ff0:	f004 fe56 	bl	800dca0 <ChangeLED>
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008ff4:	ed94 7a00 	vldr	s14, [r4]
 8008ff8:	edd5 7a00 	vldr	s15, [r5]
 8008ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009004:	dd0e      	ble.n	8009024 <Rotate+0xc4>
			printf("あ\r\n");
 8009006:	4f80      	ldr	r7, [pc, #512]	; (8009208 <Rotate+0x2a8>)
			AngularAcceleration = angular_acceleration[0]; //ここまで
 8009008:	ed86 8a00 	vstr	s16, [r6]
			printf("あ\r\n");
 800900c:	4638      	mov	r0, r7
 800900e:	f00c fbb5 	bl	801577c <puts>
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009012:	ed94 7a00 	vldr	s14, [r4]
 8009016:	edd5 7a00 	vldr	s15, [r5]
 800901a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800901e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009022:	dcf1      	bgt.n	8009008 <Rotate+0xa8>
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009024:	edd4 7a00 	vldr	s15, [r4]
 8009028:	ee79 7aa7 	vadd.f32	s15, s19, s15
		ChangeLED(3);
 800902c:	2003      	movs	r0, #3
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800902e:	edc4 7a00 	vstr	s15, [r4]
		ChangeLED(3);
 8009032:	f004 fe35 	bl	800dca0 <ChangeLED>
		while(TargetAngle > Angle)
 8009036:	ed94 7a00 	vldr	s14, [r4]
 800903a:	edd5 7a00 	vldr	s15, [r5]
 800903e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009046:	dd0a      	ble.n	800905e <Rotate+0xfe>
			AngularAcceleration = angular_acceleration[1];//0
 8009048:	2300      	movs	r3, #0
 800904a:	6033      	str	r3, [r6, #0]
		while(TargetAngle > Angle)
 800904c:	ed94 7a00 	vldr	s14, [r4]
 8009050:	edd5 7a00 	vldr	s15, [r5]
 8009054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800905c:	dcf5      	bgt.n	800904a <Rotate+0xea>
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800905e:	edd4 7a00 	vldr	s15, [r4]
			 if( AngularV <= 0)
 8009062:	4b6a      	ldr	r3, [pc, #424]	; (800920c <Rotate+0x2ac>)
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009064:	ee79 9aa7 	vadd.f32	s19, s19, s15
			 AngularAcceleration = -angular_acceleration[2];
 8009068:	eeb1 8a48 	vneg.f32	s16, s16
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800906c:	edc4 9a00 	vstr	s19, [r4]
		while(TargetAngle > Angle)
 8009070:	e008      	b.n	8009084 <Rotate+0x124>
			 AngularAcceleration = -angular_acceleration[2];
 8009072:	ed86 8a00 	vstr	s16, [r6]
			 if( AngularV <= 0)
 8009076:	edd3 7a00 	vldr	s15, [r3]
 800907a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800907e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009082:	d908      	bls.n	8009096 <Rotate+0x136>
		while(TargetAngle > Angle)
 8009084:	ed94 7a00 	vldr	s14, [r4]
 8009088:	edd5 7a00 	vldr	s15, [r5]
 800908c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009094:	dced      	bgt.n	8009072 <Rotate+0x112>
	AngularAcceleration = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	6033      	str	r3, [r6, #0]
	WaitStopAndReset();
 800909a:	f7ff ff1f 	bl	8008edc <WaitStopAndReset>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 800909e:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8009210 <Rotate+0x2b0>
 80090a2:	eec8 7aa7 	vdiv.f32	s15, s17, s15
 80090a6:	ee17 0a90 	vmov	r0, s15
 80090aa:	f7ff f985 	bl	80083b8 <__aeabi_f2d>
 80090ae:	a34c      	add	r3, pc, #304	; (adr r3, 80091e0 <Rotate+0x280>)
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	f7ff f9d8 	bl	8008468 <__aeabi_dmul>
 80090b8:	f7ff fc86 	bl	80089c8 <__aeabi_d2iz>
	if(ang_v < 0)
 80090bc:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80090c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 80090c4:	4602      	mov	r2, r0
	if(ang_v < 0)
 80090c6:	d475      	bmi.n	80091b4 <Rotate+0x254>
		KeepPulse[LEFT] += target_pulse/2;
 80090c8:	4b4c      	ldr	r3, [pc, #304]	; (80091fc <Rotate+0x29c>)
 80090ca:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	1040      	asrs	r0, r0, #1
 80090d2:	4402      	add	r2, r0
 80090d4:	601a      	str	r2, [r3, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 80090d6:	685a      	ldr	r2, [r3, #4]
}
 80090d8:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] -= target_pulse/2;
 80090dc:	1a10      	subs	r0, r2, r0
 80090de:	6058      	str	r0, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	609a      	str	r2, [r3, #8]
}
 80090e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090e6:	4c46      	ldr	r4, [pc, #280]	; (8009200 <Rotate+0x2a0>)
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 80090e8:	4d46      	ldr	r5, [pc, #280]	; (8009204 <Rotate+0x2a4>)
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090ea:	edd4 7a00 	vldr	s15, [r4]
 80090ee:	4e42      	ldr	r6, [pc, #264]	; (80091f8 <Rotate+0x298>)
 80090f0:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80090f4:	edc4 7a00 	vstr	s15, [r4]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 80090f8:	ed94 7a00 	vldr	s14, [r4]
 80090fc:	edd5 7a00 	vldr	s15, [r5]
 8009100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009108:	d50c      	bpl.n	8009124 <Rotate+0x1c4>
 800910a:	eef1 6a48 	vneg.f32	s13, s16
			AngularAcceleration = -angular_acceleration[0]; //ここまで
 800910e:	edc6 6a00 	vstr	s13, [r6]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009112:	ed94 7a00 	vldr	s14, [r4]
 8009116:	edd5 7a00 	vldr	s15, [r5]
 800911a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800911e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009122:	d4f4      	bmi.n	800910e <Rotate+0x1ae>
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009124:	edd4 7a00 	vldr	s15, [r4]
 8009128:	ee77 7ae9 	vsub.f32	s15, s15, s19
 800912c:	edc4 7a00 	vstr	s15, [r4]
		while(TargetAngle < Angle)
 8009130:	ed94 7a00 	vldr	s14, [r4]
 8009134:	edd5 7a00 	vldr	s15, [r5]
 8009138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800913c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009140:	d50a      	bpl.n	8009158 <Rotate+0x1f8>
			AngularAcceleration = angular_acceleration[1];//0
 8009142:	2300      	movs	r3, #0
 8009144:	6033      	str	r3, [r6, #0]
		while(TargetAngle < Angle)
 8009146:	ed94 7a00 	vldr	s14, [r4]
 800914a:	edd5 7a00 	vldr	s15, [r5]
 800914e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009156:	d4f5      	bmi.n	8009144 <Rotate+0x1e4>
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009158:	edd4 7a00 	vldr	s15, [r4]
			 if( AngularV >= 0)
 800915c:	4b2b      	ldr	r3, [pc, #172]	; (800920c <Rotate+0x2ac>)
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800915e:	ee77 9ae9 	vsub.f32	s19, s15, s19
 8009162:	edc4 9a00 	vstr	s19, [r4]
		while(TargetAngle < Angle)
 8009166:	e008      	b.n	800917a <Rotate+0x21a>
			 AngularAcceleration = angular_acceleration[2];
 8009168:	ed86 8a00 	vstr	s16, [r6]
			 if( AngularV >= 0)
 800916c:	edd3 7a00 	vldr	s15, [r3]
 8009170:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009178:	da08      	bge.n	800918c <Rotate+0x22c>
		while(TargetAngle < Angle)
 800917a:	ed94 7a00 	vldr	s14, [r4]
 800917e:	edd5 7a00 	vldr	s15, [r5]
 8009182:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800918a:	d4ed      	bmi.n	8009168 <Rotate+0x208>
	AngularAcceleration = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	6033      	str	r3, [r6, #0]
	WaitStopAndReset();
 8009190:	f7ff fea4 	bl	8008edc <WaitStopAndReset>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009194:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009210 <Rotate+0x2b0>
 8009198:	eec8 7aa7 	vdiv.f32	s15, s17, s15
 800919c:	ee17 0a90 	vmov	r0, s15
 80091a0:	f7ff f90a 	bl	80083b8 <__aeabi_f2d>
 80091a4:	a30e      	add	r3, pc, #56	; (adr r3, 80091e0 <Rotate+0x280>)
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	f7ff f95d 	bl	8008468 <__aeabi_dmul>
 80091ae:	f7ff fc0b 	bl	80089c8 <__aeabi_d2iz>
 80091b2:	4602      	mov	r2, r0
		KeepPulse[LEFT] -= target_pulse/2;
 80091b4:	4b11      	ldr	r3, [pc, #68]	; (80091fc <Rotate+0x29c>)
 80091b6:	6819      	ldr	r1, [r3, #0]
 80091b8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80091bc:	eba1 0162 	sub.w	r1, r1, r2, asr #1
 80091c0:	6019      	str	r1, [r3, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 80091c2:	6858      	ldr	r0, [r3, #4]
}
 80091c4:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] += target_pulse/2;
 80091c8:	eb00 0262 	add.w	r2, r0, r2, asr #1
 80091cc:	605a      	str	r2, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	609a      	str	r2, [r3, #8]
}
 80091d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091d4:	f3af 8000 	nop.w
 80091d8:	54442d18 	.word	0x54442d18
 80091dc:	400921fb 	.word	0x400921fb
 80091e0:	cb326649 	.word	0xcb326649
 80091e4:	40fa15d6 	.word	0x40fa15d6
 80091e8:	42b40000 	.word	0x42b40000
 80091ec:	3d83126f 	.word	0x3d83126f
 80091f0:	2000896c 	.word	0x2000896c
 80091f4:	40668000 	.word	0x40668000
 80091f8:	20007f3c 	.word	0x20007f3c
 80091fc:	200089c0 	.word	0x200089c0
 8009200:	20007f48 	.word	0x20007f48
 8009204:	20007f38 	.word	0x20007f38
 8009208:	08019014 	.word	0x08019014
 800920c:	20007f44 	.word	0x20007f44
 8009210:	43b40000 	.word	0x43b40000

08009214 <getFrontWall>:
}

int getFrontWall()
{

	switch(Pos.Car)//方角に合わせて、
 8009214:	4b1b      	ldr	r3, [pc, #108]	; (8009284 <getFrontWall+0x70>)
 8009216:	795a      	ldrb	r2, [r3, #5]
 8009218:	2a06      	cmp	r2, #6
 800921a:	d830      	bhi.n	800927e <getFrontWall+0x6a>
 800921c:	e8df f002 	tbb	[pc, r2]
 8009220:	2f192f24 	.word	0x2f192f24
 8009224:	2f0e      	.short	0x2f0e
 8009226:	04          	.byte	0x04
 8009227:	00          	.byte	0x00

	break;

	case west:

	return Wall[Pos.X][Pos.Y].west;
 8009228:	781a      	ldrb	r2, [r3, #0]
 800922a:	7859      	ldrb	r1, [r3, #1]
 800922c:	4b16      	ldr	r3, [pc, #88]	; (8009288 <getFrontWall+0x74>)
 800922e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8009232:	440a      	add	r2, r1
 8009234:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8009238:	0980      	lsrs	r0, r0, #6
 800923a:	4770      	bx	lr
	return Wall[Pos.X][Pos.Y].south;
 800923c:	781a      	ldrb	r2, [r3, #0]
 800923e:	7859      	ldrb	r1, [r3, #1]
 8009240:	4b11      	ldr	r3, [pc, #68]	; (8009288 <getFrontWall+0x74>)
 8009242:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8009246:	440a      	add	r2, r1
 8009248:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800924c:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8009250:	4770      	bx	lr
	return Wall[Pos.X][Pos.Y].east;
 8009252:	781a      	ldrb	r2, [r3, #0]
 8009254:	7859      	ldrb	r1, [r3, #1]
 8009256:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <getFrontWall+0x74>)
 8009258:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800925c:	440a      	add	r2, r1
 800925e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8009262:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8009266:	4770      	bx	lr
	return Wall[Pos.X][Pos.Y].north;
 8009268:	781a      	ldrb	r2, [r3, #0]
 800926a:	7859      	ldrb	r1, [r3, #1]
 800926c:	4b06      	ldr	r3, [pc, #24]	; (8009288 <getFrontWall+0x74>)
 800926e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8009272:	440a      	add	r2, r1
 8009274:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8009278:	f000 0003 	and.w	r0, r0, #3
 800927c:	4770      	bx	lr

	break;

	default:
		return 999;
 800927e:	f240 30e7 	movw	r0, #999	; 0x3e7
	break;

	}

}
 8009282:	4770      	bx	lr
 8009284:	20000004 	.word	0x20000004
 8009288:	20008b54 	.word	0x20008b54
 800928c:	00000000 	.word	0x00000000

08009290 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009294:	4ac0      	ldr	r2, [pc, #768]	; (8009598 <SlalomRight+0x308>)
	float pre = Sla.Pre;         //スラローム前距離
	float fol = Sla.Fol;         //スラローム後距離
 8009296:	4dc1      	ldr	r5, [pc, #772]	; (800959c <SlalomRight+0x30c>)
	Pos.Act = slalom;
 8009298:	4bc1      	ldr	r3, [pc, #772]	; (80095a0 <SlalomRight+0x310>)
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 800929a:	f8d2 8000 	ldr.w	r8, [r2]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
	//float alalpha_turn = Sla.Alalpha;
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 800929e:	6928      	ldr	r0, [r5, #16]
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
 80092a0:	f8df b330 	ldr.w	fp, [pc, #816]	; 80095d4 <SlalomRight+0x344>
	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80092a4:	4cbf      	ldr	r4, [pc, #764]	; (80095a4 <SlalomRight+0x314>)
	Pos.Act = slalom;
 80092a6:	2202      	movs	r2, #2
{
 80092a8:	ed2d 8b06 	vpush	{d8-d10}
	Pos.Act = slalom;
 80092ac:	719a      	strb	r2, [r3, #6]
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 80092ae:	f7ff f883 	bl	80083b8 <__aeabi_f2d>
 80092b2:	a3b3      	add	r3, pc, #716	; (adr r3, 8009580 <SlalomRight+0x2f0>)
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	f7ff f8d6 	bl	8008468 <__aeabi_dmul>
 80092bc:	2200      	movs	r2, #0
 80092be:	4bba      	ldr	r3, [pc, #744]	; (80095a8 <SlalomRight+0x318>)
	float fol = Sla.Fol;         //スラローム後距離
 80092c0:	edd5 9a01 	vldr	s19, [r5, #4]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 80092c4:	ed95 8a02 	vldr	s16, [r5, #8]
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 80092c8:	f7ff f9f8 	bl	80086bc <__aeabi_ddiv>
 80092cc:	f7ff fbc4 	bl	8008a58 <__aeabi_d2f>
 80092d0:	ee0a 0a10 	vmov	s20, r0
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 80092d4:	6968      	ldr	r0, [r5, #20]
 80092d6:	f7ff f86f 	bl	80083b8 <__aeabi_f2d>
 80092da:	a3a9      	add	r3, pc, #676	; (adr r3, 8009580 <SlalomRight+0x2f0>)
 80092dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e0:	f7ff f8c2 	bl	8008468 <__aeabi_dmul>
 80092e4:	2200      	movs	r2, #0
 80092e6:	4bb0      	ldr	r3, [pc, #704]	; (80095a8 <SlalomRight+0x318>)
 80092e8:	f7ff f9e8 	bl	80086bc <__aeabi_ddiv>
 80092ec:	f7ff fbb4 	bl	8008a58 <__aeabi_d2f>
 80092f0:	ee09 0a10 	vmov	s18, r0
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 80092f4:	69a8      	ldr	r0, [r5, #24]
 80092f6:	f7ff f85f 	bl	80083b8 <__aeabi_f2d>
 80092fa:	a3a1      	add	r3, pc, #644	; (adr r3, 8009580 <SlalomRight+0x2f0>)
 80092fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009300:	f7ff f8b2 	bl	8008468 <__aeabi_dmul>
 8009304:	2200      	movs	r2, #0
 8009306:	4ba8      	ldr	r3, [pc, #672]	; (80095a8 <SlalomRight+0x318>)
 8009308:	f7ff f9d8 	bl	80086bc <__aeabi_ddiv>
 800930c:	f7ff fba4 	bl	8008a58 <__aeabi_d2f>
	float now_angv = AngularV;
 8009310:	f8db 3000 	ldr.w	r3, [fp]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009314:	f8d4 a000 	ldr.w	sl, [r4]
 8009318:	f8d4 9004 	ldr.w	r9, [r4, #4]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 800931c:	ee08 0a90 	vmov	s17, r0
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 8009320:	f7ff ff78 	bl	8009214 <getFrontWall>
 8009324:	2801      	cmp	r0, #1
 8009326:	d044      	beq.n	80093b2 <SlalomRight+0x122>
		}

	}
	else//なければ
	{
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009328:	edd5 7a00 	vldr	s15, [r5]
 800932c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009330:	ee17 0a90 	vmov	r0, s15
 8009334:	f7ff f840 	bl	80083b8 <__aeabi_f2d>
 8009338:	a393      	add	r3, pc, #588	; (adr r3, 8009588 <SlalomRight+0x2f8>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7ff f9bd 	bl	80086bc <__aeabi_ddiv>
 8009342:	4606      	mov	r6, r0
 8009344:	eb0a 0009 	add.w	r0, sl, r9
 8009348:	460f      	mov	r7, r1
 800934a:	f7ff f823 	bl	8008394 <__aeabi_i2d>
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	4630      	mov	r0, r6
 8009354:	4639      	mov	r1, r7
 8009356:	f7fe fed1 	bl	80080fc <__adddf3>
 800935a:	4606      	mov	r6, r0
 800935c:	6820      	ldr	r0, [r4, #0]
 800935e:	6863      	ldr	r3, [r4, #4]
 8009360:	4418      	add	r0, r3
 8009362:	460f      	mov	r7, r1
 8009364:	f7ff f816 	bl	8008394 <__aeabi_i2d>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4630      	mov	r0, r6
 800936e:	4639      	mov	r1, r7
 8009370:	f7ff fb0a 	bl	8008988 <__aeabi_dcmpgt>
 8009374:	2800      	cmp	r0, #0
 8009376:	f000 80fb 	beq.w	8009570 <SlalomRight+0x2e0>
 800937a:	4d8c      	ldr	r5, [pc, #560]	; (80095ac <SlalomRight+0x31c>)
 800937c:	f8df a258 	ldr.w	sl, [pc, #600]	; 80095d8 <SlalomRight+0x348>
 8009380:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80095c4 <SlalomRight+0x334>
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 8009384:	eddf aa8a 	vldr	s21, [pc, #552]	; 80095b0 <SlalomRight+0x320>
 8009388:	edc5 aa00 	vstr	s21, [r5]
				AngularLeapsity = 0;
				AngularAcceleration = 0;
 800938c:	edca aa00 	vstr	s21, [sl]
				TargetVelocity[BODY] = v_turn;
 8009390:	f8c9 8008 	str.w	r8, [r9, #8]
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009394:	6820      	ldr	r0, [r4, #0]
 8009396:	6863      	ldr	r3, [r4, #4]
 8009398:	4418      	add	r0, r3
 800939a:	f7fe fffb 	bl	8008394 <__aeabi_i2d>
 800939e:	4632      	mov	r2, r6
 80093a0:	463b      	mov	r3, r7
 80093a2:	f7ff fad3 	bl	800894c <__aeabi_dcmplt>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	d1ee      	bne.n	8009388 <SlalomRight+0xf8>
 80093aa:	4e82      	ldr	r6, [pc, #520]	; (80095b4 <SlalomRight+0x324>)
 80093ac:	edc6 aa00 	vstr	s21, [r6]
 80093b0:	e025      	b.n	80093fe <SlalomRight+0x16e>
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80093b2:	4b81      	ldr	r3, [pc, #516]	; (80095b8 <SlalomRight+0x328>)
 80093b4:	4e7f      	ldr	r6, [pc, #508]	; (80095b4 <SlalomRight+0x324>)
 80093b6:	ed93 7a00 	vldr	s14, [r3]
 80093ba:	ed93 6a03 	vldr	s12, [r3, #12]
 80093be:	6831      	ldr	r1, [r6, #0]
 80093c0:	4d7a      	ldr	r5, [pc, #488]	; (80095ac <SlalomRight+0x31c>)
 80093c2:	f8df a214 	ldr.w	sl, [pc, #532]	; 80095d8 <SlalomRight+0x348>
 80093c6:	eddf 7a7d 	vldr	s15, [pc, #500]	; 80095bc <SlalomRight+0x32c>
 80093ca:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80095c0 <SlalomRight+0x330>
			TargetVelocity[BODY] = v_turn;
 80093ce:	487d      	ldr	r0, [pc, #500]	; (80095c4 <SlalomRight+0x334>)
			TargetAngularV = 0;
 80093d0:	2300      	movs	r3, #0
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80093d2:	2200      	movs	r2, #0
 80093d4:	e006      	b.n	80093e4 <SlalomRight+0x154>
			TargetAngularV = 0;
 80093d6:	602b      	str	r3, [r5, #0]
			AngularLeapsity = 0;
 80093d8:	4619      	mov	r1, r3
			AngularAcceleration = 0;
 80093da:	f8ca 3000 	str.w	r3, [sl]
 80093de:	2201      	movs	r2, #1
			TargetVelocity[BODY] = v_turn;
 80093e0:	f8c0 8008 	str.w	r8, [r0, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80093e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80093e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ec:	d4f3      	bmi.n	80093d6 <SlalomRight+0x146>
 80093ee:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80093f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f6:	d4ee      	bmi.n	80093d6 <SlalomRight+0x146>
 80093f8:	2a00      	cmp	r2, #0
 80093fa:	f040 80be 	bne.w	800957a <SlalomRight+0x2ea>
				////printf("直進1\r\n");
		}
	}
	now_angv = AngularV;

	float start_angle = Angle;
 80093fe:	4b72      	ldr	r3, [pc, #456]	; (80095c8 <SlalomRight+0x338>)
	now_angv = AngularV;
 8009400:	f8db 2000 	ldr.w	r2, [fp]
	float start_angle = Angle;
 8009404:	ed93 7a00 	vldr	s14, [r3]

	while(start_angle + ang1 > Angle)
 8009408:	edd3 7a00 	vldr	s15, [r3]
 800940c:	ee7a 6a07 	vadd.f32	s13, s20, s14
 8009410:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009418:	dd0c      	ble.n	8009434 <SlalomRight+0x1a4>
 800941a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80095c4 <SlalomRight+0x334>

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
		//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 800941e:	ed8a 8a00 	vstr	s16, [sl]
			TargetVelocity[BODY] = v_turn;
 8009422:	f8c9 8008 	str.w	r8, [r9, #8]
	while(start_angle + ang1 > Angle)
 8009426:	edd3 7a00 	vldr	s15, [r3]
 800942a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800942e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009432:	d4f4      	bmi.n	800941e <SlalomRight+0x18e>
			}
#endif

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009434:	2200      	movs	r2, #0
 8009436:	f8ca 2000 	str.w	r2, [sl]
	AngularLeapsity = 0;
	now_angv = AngularV;
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 800943a:	ee79 6a07 	vadd.f32	s13, s18, s14
	now_angv = AngularV;
 800943e:	f8db 1000 	ldr.w	r1, [fp]
	while(start_angle + ang2 > Angle)
 8009442:	edd3 7a00 	vldr	s15, [r3]
	AngularLeapsity = 0;
 8009446:	6032      	str	r2, [r6, #0]
	while(start_angle + ang2 > Angle)
 8009448:	eef4 6ae7 	vcmpe.f32	s13, s15
 800944c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009450:	dd0c      	ble.n	800946c <SlalomRight+0x1dc>
 8009452:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80095c4 <SlalomRight+0x334>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009456:	682a      	ldr	r2, [r5, #0]
 8009458:	602a      	str	r2, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 800945a:	f8c9 8008 	str.w	r8, [r9, #8]
	while(start_angle + ang2 > Angle)
 800945e:	edd3 7a00 	vldr	s15, [r3]
 8009462:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800946a:	d4f4      	bmi.n	8009456 <SlalomRight+0x1c6>

			}
#endif
	}

	now_angv = AngularV;
 800946c:	f8db 2000 	ldr.w	r2, [fp]
	while( start_angle + ang3 > Angle)
 8009470:	edd3 7a00 	vldr	s15, [r3]
 8009474:	ee38 7a87 	vadd.f32	s14, s17, s14
 8009478:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800947c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009480:	dd1f      	ble.n	80094c2 <SlalomRight+0x232>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 8009482:	eeb1 8a48 	vneg.f32	s16, s16
 8009486:	ed8a 8a00 	vstr	s16, [sl]
			if(TargetAngularV < 0)
 800948a:	edd5 7a00 	vldr	s15, [r5]
 800948e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009496:	d468      	bmi.n	800956a <SlalomRight+0x2da>
 8009498:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80095c4 <SlalomRight+0x334>
 800949c:	e008      	b.n	80094b0 <SlalomRight+0x220>
			AngularAcceleration = -alpha_turn;
 800949e:	ed8a 8a00 	vstr	s16, [sl]
			if(TargetAngularV < 0)
 80094a2:	edd5 7a00 	vldr	s15, [r5]
 80094a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80094aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ae:	d45c      	bmi.n	800956a <SlalomRight+0x2da>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = v_turn;
 80094b0:	f8c9 8008 	str.w	r8, [r9, #8]
	while( start_angle + ang3 > Angle)
 80094b4:	edd3 7a00 	vldr	s15, [r3]
 80094b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c0:	d4ed      	bmi.n	800949e <SlalomRight+0x20e>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 80094c2:	f04f 0b00 	mov.w	fp, #0
 80094c6:	f8ca b000 	str.w	fp, [sl]
	AngularLeapsity = 0;
	TargetAngularV = 0;
 80094ca:	f8c5 b000 	str.w	fp, [r5]
	//Calc = SearchOrFast; //関数の前に別で設定する
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 80094ce:	6820      	ldr	r0, [r4, #0]
 80094d0:	6863      	ldr	r3, [r4, #4]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
			TargetVelocity[BODY] = v_turn;
 80094d2:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80095c4 <SlalomRight+0x334>
			//printf("直進2\r\n");

			//後半の直線に入ったら計算する。
			if(Calc == 0)
 80094d6:	f8df a104 	ldr.w	sl, [pc, #260]	; 80095dc <SlalomRight+0x34c>
 80094da:	4418      	add	r0, r3
 80094dc:	f7fe ff5a 	bl	8008394 <__aeabi_i2d>
 80094e0:	ee79 7aa9 	vadd.f32	s15, s19, s19
 80094e4:	4606      	mov	r6, r0
 80094e6:	ee17 0a90 	vmov	r0, s15
 80094ea:	460f      	mov	r7, r1
 80094ec:	f7fe ff64 	bl	80083b8 <__aeabi_f2d>
 80094f0:	a325      	add	r3, pc, #148	; (adr r3, 8009588 <SlalomRight+0x2f8>)
 80094f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f6:	f7ff f8e1 	bl	80086bc <__aeabi_ddiv>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	4630      	mov	r0, r6
 8009500:	4639      	mov	r1, r7
 8009502:	f7fe fdfb 	bl	80080fc <__adddf3>
 8009506:	4606      	mov	r6, r0
 8009508:	460f      	mov	r7, r1
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800950a:	e006      	b.n	800951a <SlalomRight+0x28a>
			TargetAngularV = 0;
 800950c:	f8c5 b000 	str.w	fp, [r5]
			TargetVelocity[BODY] = v_turn;
 8009510:	f8c9 8008 	str.w	r8, [r9, #8]
			if(Calc == 0)
 8009514:	f8da 3000 	ldr.w	r3, [sl]
 8009518:	b30b      	cbz	r3, 800955e <SlalomRight+0x2ce>
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800951a:	6820      	ldr	r0, [r4, #0]
 800951c:	6863      	ldr	r3, [r4, #4]
 800951e:	4418      	add	r0, r3
 8009520:	f7fe ff38 	bl	8008394 <__aeabi_i2d>
 8009524:	4632      	mov	r2, r6
 8009526:	463b      	mov	r3, r7
 8009528:	f7ff fa10 	bl	800894c <__aeabi_dcmplt>
 800952c:	2800      	cmp	r0, #0
 800952e:	d1ed      	bne.n	800950c <SlalomRight+0x27c>
				updateRealSearch();
#endif
				Calc = 1;
			}
	}
	TargetAngle += 90*M_PI/180;
 8009530:	4d26      	ldr	r5, [pc, #152]	; (80095cc <SlalomRight+0x33c>)
 8009532:	6828      	ldr	r0, [r5, #0]
 8009534:	f7fe ff40 	bl	80083b8 <__aeabi_f2d>
 8009538:	a315      	add	r3, pc, #84	; (adr r3, 8009590 <SlalomRight+0x300>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7fe fddd 	bl	80080fc <__adddf3>
 8009542:	f7ff fa89 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009546:	4a22      	ldr	r2, [pc, #136]	; (80095d0 <SlalomRight+0x340>)
	TargetAngle += 90*M_PI/180;
 8009548:	6028      	str	r0, [r5, #0]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 800954a:	ecbd 8b06 	vpop	{d8-d10}
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 800954e:	68a3      	ldr	r3, [r4, #8]
 8009550:	6890      	ldr	r0, [r2, #8]
 8009552:	6891      	ldr	r1, [r2, #8]
 8009554:	1a1b      	subs	r3, r3, r0
 8009556:	440b      	add	r3, r1
 8009558:	6093      	str	r3, [r2, #8]
}
 800955a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				updateRealSearch();
 800955e:	f003 fe2b 	bl	800d1b8 <updateRealSearch>
				Calc = 1;
 8009562:	2301      	movs	r3, #1
 8009564:	f8ca 3000 	str.w	r3, [sl]
 8009568:	e7d7      	b.n	800951a <SlalomRight+0x28a>
				TargetAngularV = 0;
 800956a:	2300      	movs	r3, #0
 800956c:	602b      	str	r3, [r5, #0]
				break;
 800956e:	e7a8      	b.n	80094c2 <SlalomRight+0x232>
 8009570:	4e10      	ldr	r6, [pc, #64]	; (80095b4 <SlalomRight+0x324>)
 8009572:	4d0e      	ldr	r5, [pc, #56]	; (80095ac <SlalomRight+0x31c>)
 8009574:	f8df a060 	ldr.w	sl, [pc, #96]	; 80095d8 <SlalomRight+0x348>
 8009578:	e741      	b.n	80093fe <SlalomRight+0x16e>
 800957a:	6031      	str	r1, [r6, #0]
 800957c:	e73f      	b.n	80093fe <SlalomRight+0x16e>
 800957e:	bf00      	nop
 8009580:	54442d18 	.word	0x54442d18
 8009584:	400921fb 	.word	0x400921fb
 8009588:	23ca2666 	.word	0x23ca2666
 800958c:	3f509268 	.word	0x3f509268
 8009590:	54442d18 	.word	0x54442d18
 8009594:	3ff921fb 	.word	0x3ff921fb
 8009598:	20008a80 	.word	0x20008a80
 800959c:	200089a4 	.word	0x200089a4
 80095a0:	20000004 	.word	0x20000004
 80095a4:	2000898c 	.word	0x2000898c
 80095a8:	40668000 	.word	0x40668000
 80095ac:	2000896c 	.word	0x2000896c
 80095b0:	00000000 	.word	0x00000000
 80095b4:	20007f40 	.word	0x20007f40
 80095b8:	200089cc 	.word	0x200089cc
 80095bc:	43480000 	.word	0x43480000
 80095c0:	437a0000 	.word	0x437a0000
 80095c4:	2000895c 	.word	0x2000895c
 80095c8:	20007f38 	.word	0x20007f38
 80095cc:	20007f48 	.word	0x20007f48
 80095d0:	200089c0 	.word	0x200089c0
 80095d4:	20007f44 	.word	0x20007f44
 80095d8:	20007f3c 	.word	0x20007f3c
 80095dc:	20008bfc 	.word	0x20008bfc

080095e0 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80095e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80095e4:	4ab6      	ldr	r2, [pc, #728]	; (80098c0 <SlalomLeft+0x2e0>)
	float pre = Sla.Pre;         //スラローム前距離
	float fol = Sla.Fol;         //スラローム後距離
 80095e6:	4db7      	ldr	r5, [pc, #732]	; (80098c4 <SlalomLeft+0x2e4>)
	Pos.Act = slalom;
 80095e8:	4bb7      	ldr	r3, [pc, #732]	; (80098c8 <SlalomLeft+0x2e8>)
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80095ea:	6816      	ldr	r6, [r2, #0]
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
	//float alalpha_turn = -Sla.Alalpha;
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 80095ec:	6928      	ldr	r0, [r5, #16]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80095ee:	4cb7      	ldr	r4, [pc, #732]	; (80098cc <SlalomLeft+0x2ec>)
	Pos.Act = slalom;
 80095f0:	2202      	movs	r2, #2
{
 80095f2:	ed2d 8b06 	vpush	{d8-d10}
	Pos.Act = slalom;
 80095f6:	719a      	strb	r2, [r3, #6]
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 80095f8:	f7fe fede 	bl	80083b8 <__aeabi_f2d>
 80095fc:	a3aa      	add	r3, pc, #680	; (adr r3, 80098a8 <SlalomLeft+0x2c8>)
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	f7fe ff31 	bl	8008468 <__aeabi_dmul>
 8009606:	2200      	movs	r2, #0
 8009608:	4bb1      	ldr	r3, [pc, #708]	; (80098d0 <SlalomLeft+0x2f0>)
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 800960a:	ed95 9a02 	vldr	s18, [r5, #8]
	float fol = Sla.Fol;         //スラローム後距離
 800960e:	edd5 9a01 	vldr	s19, [r5, #4]
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009612:	f7ff f853 	bl	80086bc <__aeabi_ddiv>
 8009616:	f7ff fa1f 	bl	8008a58 <__aeabi_d2f>
 800961a:	ee08 0a90 	vmov	s17, r0
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 800961e:	6968      	ldr	r0, [r5, #20]
 8009620:	f7fe feca 	bl	80083b8 <__aeabi_f2d>
 8009624:	a3a0      	add	r3, pc, #640	; (adr r3, 80098a8 <SlalomLeft+0x2c8>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f7fe ff1d 	bl	8008468 <__aeabi_dmul>
 800962e:	2200      	movs	r2, #0
 8009630:	4ba7      	ldr	r3, [pc, #668]	; (80098d0 <SlalomLeft+0x2f0>)
 8009632:	f7ff f843 	bl	80086bc <__aeabi_ddiv>
 8009636:	f7ff fa0f 	bl	8008a58 <__aeabi_d2f>
 800963a:	ee08 0a10 	vmov	s16, r0
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 800963e:	69a8      	ldr	r0, [r5, #24]
 8009640:	f7fe feba 	bl	80083b8 <__aeabi_f2d>
 8009644:	a398      	add	r3, pc, #608	; (adr r3, 80098a8 <SlalomLeft+0x2c8>)
 8009646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964a:	f7fe ff0d 	bl	8008468 <__aeabi_dmul>
 800964e:	2200      	movs	r2, #0
 8009650:	4b9f      	ldr	r3, [pc, #636]	; (80098d0 <SlalomLeft+0x2f0>)
 8009652:	f7ff f833 	bl	80086bc <__aeabi_ddiv>
 8009656:	f7ff f9ff 	bl	8008a58 <__aeabi_d2f>
 800965a:	ee0a 0a90 	vmov	s21, r0
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 800965e:	f7ff fdd9 	bl	8009214 <getFrontWall>
 8009662:	2801      	cmp	r0, #1
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009664:	f8d4 a000 	ldr.w	sl, [r4]
 8009668:	6867      	ldr	r7, [r4, #4]
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 800966a:	eeb1 aa49 	vneg.f32	s20, s18
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 800966e:	f000 80eb 	beq.w	8009848 <SlalomLeft+0x268>


	}
	else//なければ
	{
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009672:	edd5 7a00 	vldr	s15, [r5]
 8009676:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800967a:	ee17 0a90 	vmov	r0, s15
 800967e:	f7fe fe9b 	bl	80083b8 <__aeabi_f2d>
 8009682:	a38b      	add	r3, pc, #556	; (adr r3, 80098b0 <SlalomLeft+0x2d0>)
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	f7ff f818 	bl	80086bc <__aeabi_ddiv>
 800968c:	4680      	mov	r8, r0
 800968e:	eb0a 0007 	add.w	r0, sl, r7
 8009692:	4689      	mov	r9, r1
 8009694:	f7fe fe7e 	bl	8008394 <__aeabi_i2d>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	4640      	mov	r0, r8
 800969e:	4649      	mov	r1, r9
 80096a0:	f7fe fd2c 	bl	80080fc <__adddf3>
 80096a4:	4680      	mov	r8, r0
 80096a6:	6820      	ldr	r0, [r4, #0]
 80096a8:	6863      	ldr	r3, [r4, #4]
 80096aa:	4418      	add	r0, r3
 80096ac:	4689      	mov	r9, r1
 80096ae:	f7fe fe71 	bl	8008394 <__aeabi_i2d>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4640      	mov	r0, r8
 80096b8:	4649      	mov	r1, r9
 80096ba:	f7ff f965 	bl	8008988 <__aeabi_dcmpgt>
 80096be:	2800      	cmp	r0, #0
 80096c0:	f000 80ec 	beq.w	800989c <SlalomLeft+0x2bc>
 80096c4:	4d83      	ldr	r5, [pc, #524]	; (80098d4 <SlalomLeft+0x2f4>)
 80096c6:	f8df a22c 	ldr.w	sl, [pc, #556]	; 80098f4 <SlalomLeft+0x314>
 80096ca:	4f83      	ldr	r7, [pc, #524]	; (80098d8 <SlalomLeft+0x2f8>)
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 80096cc:	f04f 0b00 	mov.w	fp, #0
 80096d0:	f8c5 b000 	str.w	fp, [r5]
				AngularAcceleration = 0;
 80096d4:	f8ca b000 	str.w	fp, [sl]
				TargetVelocity[BODY] = v_turn;
 80096d8:	60be      	str	r6, [r7, #8]
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80096da:	6820      	ldr	r0, [r4, #0]
 80096dc:	6863      	ldr	r3, [r4, #4]
 80096de:	4418      	add	r0, r3
 80096e0:	f7fe fe58 	bl	8008394 <__aeabi_i2d>
 80096e4:	4642      	mov	r2, r8
 80096e6:	464b      	mov	r3, r9
 80096e8:	f7ff f930 	bl	800894c <__aeabi_dcmplt>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d1ef      	bne.n	80096d0 <SlalomLeft+0xf0>
 80096f0:	f8df c204 	ldr.w	ip, [pc, #516]	; 80098f8 <SlalomLeft+0x318>
				////printf("直進1\r\n");
		}
	}


	float start_angle = Angle;
 80096f4:	4b79      	ldr	r3, [pc, #484]	; (80098dc <SlalomLeft+0x2fc>)
 80096f6:	edd3 7a00 	vldr	s15, [r3]
	while(start_angle - ang1 < Angle)
 80096fa:	ed93 7a00 	vldr	s14, [r3]
 80096fe:	ee77 6ae8 	vsub.f32	s13, s15, s17
 8009702:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800970a:	d50a      	bpl.n	8009722 <SlalomLeft+0x142>
 800970c:	4f72      	ldr	r7, [pc, #456]	; (80098d8 <SlalomLeft+0x2f8>)

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 800970e:	ed8a aa00 	vstr	s20, [sl]
			TargetVelocity[BODY] = v_turn;
 8009712:	60be      	str	r6, [r7, #8]
	while(start_angle - ang1 < Angle)
 8009714:	ed93 7a00 	vldr	s14, [r3]
 8009718:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800971c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009720:	dcf5      	bgt.n	800970e <SlalomLeft+0x12e>

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009722:	2200      	movs	r2, #0
 8009724:	f8ca 2000 	str.w	r2, [sl]
	AngularLeapsity = 0;
	//alpha_flag = 0;

	while(start_angle - ang2 < Angle)
 8009728:	ee77 6ac8 	vsub.f32	s13, s15, s16
 800972c:	ed93 7a00 	vldr	s14, [r3]
	AngularLeapsity = 0;
 8009730:	f8cc 2000 	str.w	r2, [ip]
	while(start_angle - ang2 < Angle)
 8009734:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800973c:	d50a      	bpl.n	8009754 <SlalomLeft+0x174>
 800973e:	4f66      	ldr	r7, [pc, #408]	; (80098d8 <SlalomLeft+0x2f8>)
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009740:	682a      	ldr	r2, [r5, #0]
 8009742:	602a      	str	r2, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 8009744:	60be      	str	r6, [r7, #8]
	while(start_angle - ang2 < Angle)
 8009746:	ed93 7a00 	vldr	s14, [r3]
 800974a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800974e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009752:	dcf5      	bgt.n	8009740 <SlalomLeft+0x160>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < Angle)
 8009754:	ee77 7aea 	vsub.f32	s15, s15, s21
 8009758:	ed93 7a00 	vldr	s14, [r3]
 800975c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009764:	d51b      	bpl.n	800979e <SlalomLeft+0x1be>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 8009766:	ed8a 9a00 	vstr	s18, [sl]
			if(TargetAngularV > 0)
 800976a:	ed95 7a00 	vldr	s14, [r5]
 800976e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009776:	dc64      	bgt.n	8009842 <SlalomLeft+0x262>
 8009778:	4f57      	ldr	r7, [pc, #348]	; (80098d8 <SlalomLeft+0x2f8>)
 800977a:	e008      	b.n	800978e <SlalomLeft+0x1ae>
			AngularAcceleration = -alpha_turn;
 800977c:	ed8a 9a00 	vstr	s18, [sl]
			if(TargetAngularV > 0)
 8009780:	ed95 7a00 	vldr	s14, [r5]
 8009784:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800978c:	dc59      	bgt.n	8009842 <SlalomLeft+0x262>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = v_turn;
 800978e:	60be      	str	r6, [r7, #8]
	while( start_angle - ang3 < Angle)
 8009790:	ed93 7a00 	vldr	s14, [r3]
 8009794:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800979c:	dcee      	bgt.n	800977c <SlalomLeft+0x19c>
 800979e:	ee79 7aa9 	vadd.f32	s15, s19, s19
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 80097a2:	f04f 0b00 	mov.w	fp, #0
 80097a6:	ee17 0a90 	vmov	r0, s15
 80097aa:	f8ca b000 	str.w	fp, [sl]
	AngularLeapsity = 0;
	TargetAngularV = 0;
 80097ae:	f8c5 b000 	str.w	fp, [r5]
 80097b2:	f7fe fe01 	bl	80083b8 <__aeabi_f2d>
 80097b6:	a33e      	add	r3, pc, #248	; (adr r3, 80098b0 <SlalomLeft+0x2d0>)
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	f7fe ff7e 	bl	80086bc <__aeabi_ddiv>
 80097c0:	4680      	mov	r8, r0
//	Calc = SearchOrFast; //関数の前に別で設定
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 80097c2:	6820      	ldr	r0, [r4, #0]
 80097c4:	6863      	ldr	r3, [r4, #4]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
			TargetVelocity[BODY] = v_turn;
 80097c6:	4f44      	ldr	r7, [pc, #272]	; (80098d8 <SlalomLeft+0x2f8>)
			//printf("直進2\r\n");
			if(Calc == 0)
 80097c8:	f8df a130 	ldr.w	sl, [pc, #304]	; 80098fc <SlalomLeft+0x31c>
 80097cc:	4418      	add	r0, r3
 80097ce:	4689      	mov	r9, r1
 80097d0:	f7fe fde0 	bl	8008394 <__aeabi_i2d>
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	4640      	mov	r0, r8
 80097da:	4649      	mov	r1, r9
 80097dc:	f7fe fc8e 	bl	80080fc <__adddf3>
 80097e0:	4680      	mov	r8, r0
 80097e2:	4689      	mov	r9, r1
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 80097e4:	e005      	b.n	80097f2 <SlalomLeft+0x212>
			TargetAngularV = 0;
 80097e6:	f8c5 b000 	str.w	fp, [r5]
			TargetVelocity[BODY] = v_turn;
 80097ea:	60be      	str	r6, [r7, #8]
			if(Calc == 0)
 80097ec:	f8da 3000 	ldr.w	r3, [sl]
 80097f0:	b30b      	cbz	r3, 8009836 <SlalomLeft+0x256>
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 80097f2:	6820      	ldr	r0, [r4, #0]
 80097f4:	6863      	ldr	r3, [r4, #4]
 80097f6:	4418      	add	r0, r3
 80097f8:	f7fe fdcc 	bl	8008394 <__aeabi_i2d>
 80097fc:	4642      	mov	r2, r8
 80097fe:	464b      	mov	r3, r9
 8009800:	f7ff f8a4 	bl	800894c <__aeabi_dcmplt>
 8009804:	2800      	cmp	r0, #0
 8009806:	d1ee      	bne.n	80097e6 <SlalomLeft+0x206>
				updateRealSearch();
#endif
				Calc = 1;
			}
	}
	TargetAngle += -90*M_PI/180;
 8009808:	4d35      	ldr	r5, [pc, #212]	; (80098e0 <SlalomLeft+0x300>)
 800980a:	6828      	ldr	r0, [r5, #0]
 800980c:	f7fe fdd4 	bl	80083b8 <__aeabi_f2d>
 8009810:	a329      	add	r3, pc, #164	; (adr r3, 80098b8 <SlalomLeft+0x2d8>)
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	f7fe fc6f 	bl	80080f8 <__aeabi_dsub>
 800981a:	f7ff f91d 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 800981e:	4a31      	ldr	r2, [pc, #196]	; (80098e4 <SlalomLeft+0x304>)
	TargetAngle += -90*M_PI/180;
 8009820:	6028      	str	r0, [r5, #0]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009822:	ecbd 8b06 	vpop	{d8-d10}
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009826:	68a3      	ldr	r3, [r4, #8]
 8009828:	6890      	ldr	r0, [r2, #8]
 800982a:	6891      	ldr	r1, [r2, #8]
 800982c:	1a1b      	subs	r3, r3, r0
 800982e:	440b      	add	r3, r1
 8009830:	6093      	str	r3, [r2, #8]
}
 8009832:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				updateRealSearch();
 8009836:	f003 fcbf 	bl	800d1b8 <updateRealSearch>
				Calc = 1;
 800983a:	2301      	movs	r3, #1
 800983c:	f8ca 3000 	str.w	r3, [sl]
 8009840:	e7d7      	b.n	80097f2 <SlalomLeft+0x212>
				TargetAngularV = 0;
 8009842:	2300      	movs	r3, #0
 8009844:	602b      	str	r3, [r5, #0]
				break;
 8009846:	e7aa      	b.n	800979e <SlalomLeft+0x1be>
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009848:	4b27      	ldr	r3, [pc, #156]	; (80098e8 <SlalomLeft+0x308>)
 800984a:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 80098f8 <SlalomLeft+0x318>
 800984e:	ed93 7a00 	vldr	s14, [r3]
 8009852:	ed93 6a03 	vldr	s12, [r3, #12]
 8009856:	f8dc 1000 	ldr.w	r1, [ip]
 800985a:	4d1e      	ldr	r5, [pc, #120]	; (80098d4 <SlalomLeft+0x2f4>)
 800985c:	f8df a094 	ldr.w	sl, [pc, #148]	; 80098f4 <SlalomLeft+0x314>
 8009860:	eddf 7a22 	vldr	s15, [pc, #136]	; 80098ec <SlalomLeft+0x30c>
 8009864:	eddf 6a22 	vldr	s13, [pc, #136]	; 80098f0 <SlalomLeft+0x310>
			TargetVelocity[BODY] = v_turn;
 8009868:	481b      	ldr	r0, [pc, #108]	; (80098d8 <SlalomLeft+0x2f8>)
			TargetAngularV = 0;
 800986a:	2300      	movs	r3, #0
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 800986c:	2200      	movs	r2, #0
 800986e:	e005      	b.n	800987c <SlalomLeft+0x29c>
			TargetAngularV = 0;
 8009870:	602b      	str	r3, [r5, #0]
			AngularLeapsity = 0;
 8009872:	4619      	mov	r1, r3
			AngularAcceleration = 0;
 8009874:	f8ca 3000 	str.w	r3, [sl]
 8009878:	2201      	movs	r2, #1
			TargetVelocity[BODY] = v_turn;
 800987a:	6086      	str	r6, [r0, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 800987c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009884:	d4f4      	bmi.n	8009870 <SlalomLeft+0x290>
 8009886:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800988a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800988e:	d4ef      	bmi.n	8009870 <SlalomLeft+0x290>
 8009890:	2a00      	cmp	r2, #0
 8009892:	f43f af2f 	beq.w	80096f4 <SlalomLeft+0x114>
 8009896:	f8cc 1000 	str.w	r1, [ip]
 800989a:	e72b      	b.n	80096f4 <SlalomLeft+0x114>
 800989c:	f8df c058 	ldr.w	ip, [pc, #88]	; 80098f8 <SlalomLeft+0x318>
 80098a0:	4d0c      	ldr	r5, [pc, #48]	; (80098d4 <SlalomLeft+0x2f4>)
 80098a2:	f8df a050 	ldr.w	sl, [pc, #80]	; 80098f4 <SlalomLeft+0x314>
 80098a6:	e725      	b.n	80096f4 <SlalomLeft+0x114>
 80098a8:	54442d18 	.word	0x54442d18
 80098ac:	400921fb 	.word	0x400921fb
 80098b0:	23ca2666 	.word	0x23ca2666
 80098b4:	3f509268 	.word	0x3f509268
 80098b8:	54442d18 	.word	0x54442d18
 80098bc:	3ff921fb 	.word	0x3ff921fb
 80098c0:	20008a80 	.word	0x20008a80
 80098c4:	200089a4 	.word	0x200089a4
 80098c8:	20000004 	.word	0x20000004
 80098cc:	2000898c 	.word	0x2000898c
 80098d0:	40668000 	.word	0x40668000
 80098d4:	2000896c 	.word	0x2000896c
 80098d8:	2000895c 	.word	0x2000895c
 80098dc:	20007f38 	.word	0x20007f38
 80098e0:	20007f48 	.word	0x20007f48
 80098e4:	200089c0 	.word	0x200089c0
 80098e8:	200089cc 	.word	0x200089cc
 80098ec:	43480000 	.word	0x43480000
 80098f0:	437a0000 	.word	0x437a0000
 80098f4:	20007f3c 	.word	0x20007f3c
 80098f8:	20007f40 	.word	0x20007f40
 80098fc:	20008bfc 	.word	0x20008bfc

08009900 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
//	Pos.Act = accel;
//	ControlWall();
	TargetAngularV = 0;
 8009900:	4a39      	ldr	r2, [pc, #228]	; (80099e8 <Accel+0xe8>)
	additional_speed = explore_speed - CurrentVelocity[BODY];
	//printf("%f,%f,%f\r\n",additional_speed,explore_speed,CurrentVelocity[BODY]);
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulse[BODY];
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009902:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80099ec <Accel+0xec>
{
 8009906:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TargetAngularV = 0;
 800990a:	2100      	movs	r1, #0
	additional_speed = explore_speed - CurrentVelocity[BODY];
 800990c:	4b38      	ldr	r3, [pc, #224]	; (80099f0 <Accel+0xf0>)
	TargetAngularV = 0;
 800990e:	6011      	str	r1, [r2, #0]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 8009910:	ed93 7a02 	vldr	s14, [r3, #8]
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009914:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8009a00 <Accel+0x100>
 8009918:	4d36      	ldr	r5, [pc, #216]	; (80099f4 <Accel+0xf4>)
 800991a:	4e37      	ldr	r6, [pc, #220]	; (80099f8 <Accel+0xf8>)
	additional_speed = explore_speed - CurrentVelocity[BODY];
 800991c:	ee70 0ac7 	vsub.f32	s1, s1, s14
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009920:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009924:	ee60 7aa7 	vmul.f32	s15, s1, s15
//	WallWarn();
	//printf("%d, %d\r\n",VelocityLeftOut,VelocityRightOut);
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009928:	ee10 0a10 	vmov	r0, s0
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 800992c:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8009930:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8009934:	ed8b 7a00 	vstr	s14, [fp]
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009938:	f7fe fd3e 	bl	80083b8 <__aeabi_f2d>
 800993c:	a326      	add	r3, pc, #152	; (adr r3, 80099d8 <Accel+0xd8>)
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	f7fe febb 	bl	80086bc <__aeabi_ddiv>
 8009946:	f7ff f83f 	bl	80089c8 <__aeabi_d2iz>
 800994a:	4604      	mov	r4, r0
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	//printf("");
	_Bool wall_cut = false;
	//ChangeLED(1);
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800994c:	e020      	b.n	8009990 <Accel+0x90>
	{
		//printf("%d, %d, %d, %f, %f, %d, %f, %f, %d, %f, %f\r\n", TotalPulse[BODY], target_pulse, KeepPulse[BODY], TargetVelocity[BODY], Acceleration, VelocityLeftOut ,TargetVelocity[LEFT], CurrentVelocity[LEFT], Pid[L_VELO_PID].out, Pid[L_VELO_PID].KP,Pid[L_VELO_PID].KI);
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800994e:	f7fe fd21 	bl	8008394 <__aeabi_i2d>
 8009952:	a323      	add	r3, pc, #140	; (adr r3, 80099e0 <Accel+0xe0>)
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	f7fe fd86 	bl	8008468 <__aeabi_dmul>
 800995c:	f8d5 a008 	ldr.w	sl, [r5, #8]
 8009960:	68b7      	ldr	r7, [r6, #8]
 8009962:	4680      	mov	r8, r0
 8009964:	4650      	mov	r0, sl
 8009966:	4689      	mov	r9, r1
 8009968:	f7fe fd14 	bl	8008394 <__aeabi_i2d>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4640      	mov	r0, r8
 8009972:	4649      	mov	r1, r9
 8009974:	f7fe fbc2 	bl	80080fc <__adddf3>
 8009978:	4680      	mov	r8, r0
 800997a:	4638      	mov	r0, r7
 800997c:	4689      	mov	r9, r1
 800997e:	f7fe fd09 	bl	8008394 <__aeabi_i2d>
 8009982:	4602      	mov	r2, r0
 8009984:	460b      	mov	r3, r1
 8009986:	4640      	mov	r0, r8
 8009988:	4649      	mov	r1, r9
 800998a:	f7fe ffdf 	bl	800894c <__aeabi_dcmplt>
 800998e:	b9b0      	cbnz	r0, 80099be <Accel+0xbe>
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009990:	68ab      	ldr	r3, [r5, #8]
 8009992:	68b2      	ldr	r2, [r6, #8]
 8009994:	4423      	add	r3, r4
 8009996:	4293      	cmp	r3, r2
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009998:	4620      	mov	r0, r4
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800999a:	dcd8      	bgt.n	800994e <Accel+0x4e>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 800999c:	2300      	movs	r3, #0
 800999e:	f8cb 3000 	str.w	r3, [fp]
	//壁読んで、
	wall_cut = false;
//	ChangeLED(0);
	KeepPulse[BODY] += target_pulse;
 80099a2:	68ab      	ldr	r3, [r5, #8]
 80099a4:	4423      	add	r3, r4
 80099a6:	60ab      	str	r3, [r5, #8]
	KeepPulse[LEFT] += target_pulse/2;
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80099ae:	1064      	asrs	r4, r4, #1
 80099b0:	4423      	add	r3, r4
 80099b2:	602b      	str	r3, [r5, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 80099b4:	686b      	ldr	r3, [r5, #4]
 80099b6:	441c      	add	r4, r3
 80099b8:	606c      	str	r4, [r5, #4]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 80099ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80099be:	4b0f      	ldr	r3, [pc, #60]	; (80099fc <Accel+0xfc>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1e4      	bne.n	8009990 <Accel+0x90>
			updateRealSearch();
 80099c6:	f003 fbf7 	bl	800d1b8 <updateRealSearch>
			Calc = 1;
 80099ca:	4a0c      	ldr	r2, [pc, #48]	; (80099fc <Accel+0xfc>)
 80099cc:	2301      	movs	r3, #1
 80099ce:	6013      	str	r3, [r2, #0]
 80099d0:	e7de      	b.n	8009990 <Accel+0x90>
 80099d2:	bf00      	nop
 80099d4:	f3af 8000 	nop.w
 80099d8:	23ca2666 	.word	0x23ca2666
 80099dc:	3f509268 	.word	0x3f509268
 80099e0:	9999999a 	.word	0x9999999a
 80099e4:	3fe99999 	.word	0x3fe99999
 80099e8:	2000896c 	.word	0x2000896c
 80099ec:	3a83126f 	.word	0x3a83126f
 80099f0:	20008998 	.word	0x20008998
 80099f4:	200089c0 	.word	0x200089c0
 80099f8:	2000898c 	.word	0x2000898c
 80099fc:	20008bfc 	.word	0x20008bfc
 8009a00:	20007f34 	.word	0x20007f34
 8009a04:	00000000 	.word	0x00000000

08009a08 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 8009a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
//	Pos.Act = decel;
	float down_speed=0;
	down_speed = CurrentVelocity[BODY] - end_speed; //end_speedが0かそうでないか
 8009a0c:	4b4c      	ldr	r3, [pc, #304]	; (8009b40 <Decel+0x138>)
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009a0e:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009b44 <Decel+0x13c>
	down_speed = CurrentVelocity[BODY] - end_speed; //end_speedが0かそうでないか
 8009a12:	ed93 7a02 	vldr	s14, [r3, #8]
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009a16:	4b4c      	ldr	r3, [pc, #304]	; (8009b48 <Decel+0x140>)
 8009a18:	f8df a148 	ldr.w	sl, [pc, #328]	; 8009b64 <Decel+0x15c>
 8009a1c:	4d4b      	ldr	r5, [pc, #300]	; (8009b4c <Decel+0x144>)
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009a1e:	4e4c      	ldr	r6, [pc, #304]	; (8009b50 <Decel+0x148>)
	down_speed = CurrentVelocity[BODY] - end_speed; //end_speedが0かそうでないか
 8009a20:	ee37 7a60 	vsub.f32	s14, s14, s1
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009a24:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009a28:	ee67 7a27 	vmul.f32	s15, s14, s15
{
 8009a2c:	ed2d 8b04 	vpush	{d8-d9}
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009a30:	ee67 7a87 	vmul.f32	s15, s15, s14
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009a34:	ee10 0a10 	vmov	r0, s0
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009a38:	ee87 7a80 	vdiv.f32	s14, s15, s0
{
 8009a3c:	eef0 8a60 	vmov.f32	s17, s1
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009a40:	eef1 7a47 	vneg.f32	s15, s14
 8009a44:	edc3 7a00 	vstr	s15, [r3]
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009a48:	f7fe fcb6 	bl	80083b8 <__aeabi_f2d>
 8009a4c:	a338      	add	r3, pc, #224	; (adr r3, 8009b30 <Decel+0x128>)
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	f7fe fe33 	bl	80086bc <__aeabi_ddiv>
 8009a56:	f7fe ffb7 	bl	80089c8 <__aeabi_d2iz>
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009a5a:	ed9f 9a3e 	vldr	s18, [pc, #248]	; 8009b54 <Decel+0x14c>
 8009a5e:	4607      	mov	r7, r0
 8009a60:	4b3d      	ldr	r3, [pc, #244]	; (8009b58 <Decel+0x150>)
 8009a62:	ed93 8a03 	vldr	s16, [r3, #12]
 8009a66:	edd3 7a00 	vldr	s15, [r3]
 8009a6a:	ee38 8a27 	vadd.f32	s16, s16, s15
 8009a6e:	e02c      	b.n	8009aca <Decel+0xc2>
 8009a70:	68ab      	ldr	r3, [r5, #8]
 8009a72:	68b2      	ldr	r2, [r6, #8]
 8009a74:	443b      	add	r3, r7
 8009a76:	4293      	cmp	r3, r2
 8009a78:	dd2d      	ble.n	8009ad6 <Decel+0xce>
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocity[BODY] <= end_speed)
 8009a7a:	edda 7a02 	vldr	s15, [sl, #8]
 8009a7e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8009a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a86:	d940      	bls.n	8009b0a <Decel+0x102>
			Acceleration = 0;
			TargetAngularV = 0;
			AngularAcceleration = 0;
			break;
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 8009a88:	f7fe fc84 	bl	8008394 <__aeabi_i2d>
 8009a8c:	a32a      	add	r3, pc, #168	; (adr r3, 8009b38 <Decel+0x130>)
 8009a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a92:	f7fe fce9 	bl	8008468 <__aeabi_dmul>
 8009a96:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8009a9a:	68b4      	ldr	r4, [r6, #8]
 8009a9c:	4680      	mov	r8, r0
 8009a9e:	4658      	mov	r0, fp
 8009aa0:	4689      	mov	r9, r1
 8009aa2:	f7fe fc77 	bl	8008394 <__aeabi_i2d>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	4640      	mov	r0, r8
 8009aac:	4649      	mov	r1, r9
 8009aae:	f7fe fb25 	bl	80080fc <__adddf3>
 8009ab2:	4680      	mov	r8, r0
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	4689      	mov	r9, r1
 8009ab8:	f7fe fc6c 	bl	8008394 <__aeabi_i2d>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	4640      	mov	r0, r8
 8009ac2:	4649      	mov	r1, r9
 8009ac4:	f7fe ff42 	bl	800894c <__aeabi_dcmplt>
 8009ac8:	bb68      	cbnz	r0, 8009b26 <Decel+0x11e>
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009aca:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8009ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 8009ad2:	4638      	mov	r0, r7
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009ad4:	d4cc      	bmi.n	8009a70 <Decel+0x68>
 8009ad6:	4921      	ldr	r1, [pc, #132]	; (8009b5c <Decel+0x154>)
 8009ad8:	4a21      	ldr	r2, [pc, #132]	; (8009b60 <Decel+0x158>)
 8009ada:	463c      	mov	r4, r7
			PIDChangeFlag( A_VELO_PID , 1);

		}
	}
	TargetVelocity[BODY] = end_speed;
	Acceleration = 0;
 8009adc:	481a      	ldr	r0, [pc, #104]	; (8009b48 <Decel+0x140>)
	TargetVelocity[BODY] = end_speed;
 8009ade:	edca 8a02 	vstr	s17, [sl, #8]
	Acceleration = 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	6003      	str	r3, [r0, #0]
	TargetAngularV = 0;
 8009ae6:	600b      	str	r3, [r1, #0]
	AngularAcceleration = 0;
 8009ae8:	6013      	str	r3, [r2, #0]
	//ChangeLED(2);
	KeepPulse[BODY] += target_pulse;
 8009aea:	68ab      	ldr	r3, [r5, #8]
 8009aec:	4423      	add	r3, r4
 8009aee:	60ab      	str	r3, [r5, #8]
	KeepPulse[LEFT] += target_pulse/2;
 8009af0:	682b      	ldr	r3, [r5, #0]
 8009af2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8009af6:	1064      	asrs	r4, r4, #1
 8009af8:	4423      	add	r3, r4
	KeepPulse[RIGHT] += target_pulse/2;


}
 8009afa:	ecbd 8b04 	vpop	{d8-d9}
	KeepPulse[LEFT] += target_pulse/2;
 8009afe:	602b      	str	r3, [r5, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 8009b00:	686b      	ldr	r3, [r5, #4]
 8009b02:	441c      	add	r4, r3
 8009b04:	606c      	str	r4, [r5, #4]
}
 8009b06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ChangeLED(7);
 8009b0a:	2007      	movs	r0, #7
 8009b0c:	f004 f8c8 	bl	800dca0 <ChangeLED>
			TargetAngularV = 0;
 8009b10:	4912      	ldr	r1, [pc, #72]	; (8009b5c <Decel+0x154>)
			AngularAcceleration = 0;
 8009b12:	4a13      	ldr	r2, [pc, #76]	; (8009b60 <Decel+0x158>)
			Acceleration = 0;
 8009b14:	480c      	ldr	r0, [pc, #48]	; (8009b48 <Decel+0x140>)
			TargetVelocity[BODY] = end_speed;
 8009b16:	edca 8a02 	vstr	s17, [sl, #8]
			Acceleration = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	6003      	str	r3, [r0, #0]
 8009b1e:	463c      	mov	r4, r7
			TargetAngularV = 0;
 8009b20:	600b      	str	r3, [r1, #0]
			AngularAcceleration = 0;
 8009b22:	6013      	str	r3, [r2, #0]
			break;
 8009b24:	e7da      	b.n	8009adc <Decel+0xd4>
			PIDChangeFlag( A_VELO_PID , 1);
 8009b26:	2101      	movs	r1, #1
 8009b28:	2000      	movs	r0, #0
 8009b2a:	f004 fd71 	bl	800e610 <PIDChangeFlag>
 8009b2e:	e797      	b.n	8009a60 <Decel+0x58>
 8009b30:	23ca2666 	.word	0x23ca2666
 8009b34:	3f509268 	.word	0x3f509268
 8009b38:	cccccccd 	.word	0xcccccccd
 8009b3c:	3fe4cccc 	.word	0x3fe4cccc
 8009b40:	20008998 	.word	0x20008998
 8009b44:	3a83126f 	.word	0x3a83126f
 8009b48:	20007f34 	.word	0x20007f34
 8009b4c:	200089c0 	.word	0x200089c0
 8009b50:	2000898c 	.word	0x2000898c
 8009b54:	456d8000 	.word	0x456d8000
 8009b58:	200089cc 	.word	0x200089cc
 8009b5c:	2000896c 	.word	0x2000896c
 8009b60:	20007f3c 	.word	0x20007f3c
 8009b64:	2000895c 	.word	0x2000895c

08009b68 <GoStraight>:
	Pid[wall_ctrl].flag = 0;
	TargetAngularV = 0;
	return 45;
}
void GoStraight(float move_distance,  float explore_speed, int accel_or_decel)
{
 8009b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6c:	ed2d 8b02 	vpush	{d8}
	//v = v0 + at
	//x = v0t + 0.5*at^2
	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	Control_Mode = A_VELO_PID;
	//加減速時は角度制御だけにしておいてあとで困ったら追加
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009b70:	ee70 7a00 	vadd.f32	s15, s0, s0
	Control_Mode = A_VELO_PID;
 8009b74:	4bb4      	ldr	r3, [pc, #720]	; (8009e48 <GoStraight+0x2e0>)
 8009b76:	2500      	movs	r5, #0
{
 8009b78:	b083      	sub	sp, #12
 8009b7a:	4604      	mov	r4, r0
	Control_Mode = A_VELO_PID;
 8009b7c:	601d      	str	r5, [r3, #0]
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009b7e:	ee17 0a90 	vmov	r0, s15
{
 8009b82:	eeb0 8a40 	vmov.f32	s16, s0
 8009b86:	eef0 8a60 	vmov.f32	s17, s1
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009b8a:	f7fe fc15 	bl	80083b8 <__aeabi_f2d>
 8009b8e:	a3a8      	add	r3, pc, #672	; (adr r3, 8009e30 <GoStraight+0x2c8>)
 8009b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b94:	f7fe fd92 	bl	80086bc <__aeabi_ddiv>
 8009b98:	f7fe ff16 	bl	80089c8 <__aeabi_d2iz>
	if(accel_or_decel == 1) //加速するとき
 8009b9c:	2c01      	cmp	r4, #1
 8009b9e:	f000 80e6 	beq.w	8009d6e <GoStraight+0x206>
	{
		//explore_speed += AddVelocity;
		VelocityMax = true;
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
	}
	else if(accel_or_decel == -1) //探索速度までの減速. ターン速度までの減速も後で入れる
 8009ba2:	3401      	adds	r4, #1
 8009ba4:	4683      	mov	fp, r0
 8009ba6:	f000 80eb 	beq.w	8009d80 <GoStraight+0x218>
//		Pos.Act = straight;
//		WallSafe();
//		ControlWall();
		_Bool wall_cut=false;	//壁切れ用
		_Bool face_check  = false; //一度でも正面領域に収まったか
		int ctrl_mode = GetWallCtrlDirection();
 8009baa:	f7ff f931 	bl	8008e10 <GetWallCtrlDirection>
		//両壁がなければ, 角度制御しつつ柱を見たい. 細かすぎるかも.　今は角度制御
		if (ctrl_mode == N_WALL_PID)
			ctrl_mode = A_VELO_PID;
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2806      	cmp	r0, #6
 8009bb2:	bf08      	it	eq
 8009bb4:	2300      	moveq	r3, #0
 8009bb6:	4ca5      	ldr	r4, [pc, #660]	; (8009e4c <GoStraight+0x2e4>)
 8009bb8:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 8009e6c <GoStraight+0x304>
		{
			//角度が収まっていれば壁の値を見て微調整
			//収まっていなければ角度制御して角度を落ち着かせてから壁制御↑
			//一度正面を向いたかチェック
			if(face_check == false){
				if(TargetAngle - angle_range < Angle  && Angle < TargetAngle + angle_range){
 8009bbc:	ed9f 8aa4 	vldr	s16, [pc, #656]	; 8009e50 <GoStraight+0x2e8>
			ctrl_mode = A_VELO_PID;
 8009bc0:	9500      	str	r5, [sp, #0]
 8009bc2:	9301      	str	r3, [sp, #4]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009bc4:	68a3      	ldr	r3, [r4, #8]
 8009bc6:	f8da 2008 	ldr.w	r2, [sl, #8]
 8009bca:	445b      	add	r3, fp
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	dd52      	ble.n	8009c76 <GoStraight+0x10e>
 8009bd0:	4658      	mov	r0, fp
 8009bd2:	f7fe fbdf 	bl	8008394 <__aeabi_i2d>
			if(face_check == false){
 8009bd6:	9b00      	ldr	r3, [sp, #0]
 8009bd8:	4680      	mov	r8, r0
 8009bda:	4689      	mov	r9, r1
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d175      	bne.n	8009ccc <GoStraight+0x164>
				if(TargetAngle - angle_range < Angle  && Angle < TargetAngle + angle_range){
 8009be0:	4a9c      	ldr	r2, [pc, #624]	; (8009e54 <GoStraight+0x2ec>)
 8009be2:	4b9d      	ldr	r3, [pc, #628]	; (8009e58 <GoStraight+0x2f0>)
 8009be4:	edd2 7a00 	vldr	s15, [r2]
 8009be8:	ed93 7a00 	vldr	s14, [r3]
 8009bec:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8009bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bf8:	d50b      	bpl.n	8009c12 <GoStraight+0xaa>
 8009bfa:	edd2 7a00 	vldr	s15, [r2]
 8009bfe:	ed93 7a00 	vldr	s14, [r3]
 8009c02:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c0e:	f300 8087 	bgt.w	8009d20 <GoStraight+0x1b8>
						Control_Mode = A_VELO_PID;
					}
					else Control_Mode = ctrl_mode;//壁見る
				}
				else{
					Control_Mode = A_VELO_PID;
 8009c12:	4a8d      	ldr	r2, [pc, #564]	; (8009e48 <GoStraight+0x2e0>)
 8009c14:	2300      	movs	r3, #0
 8009c16:	6013      	str	r3, [r2, #0]
				}//少しの間壁を見て制御
			}
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			//右か左の壁のセンサ値を見て、閾値を下回ったら、TotalPulseかKeepPulseを補正する
			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009c18:	68a0      	ldr	r0, [r4, #8]
 8009c1a:	f8da 5008 	ldr.w	r5, [sl, #8]
 8009c1e:	f7fe fbb9 	bl	8008394 <__aeabi_i2d>
 8009c22:	a385      	add	r3, pc, #532	; (adr r3, 8009e38 <GoStraight+0x2d0>)
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	4606      	mov	r6, r0
 8009c2a:	460f      	mov	r7, r1
 8009c2c:	4640      	mov	r0, r8
 8009c2e:	4649      	mov	r1, r9
 8009c30:	f7fe fc1a 	bl	8008468 <__aeabi_dmul>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	4630      	mov	r0, r6
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	f7fe fa5e 	bl	80080fc <__adddf3>
 8009c40:	4606      	mov	r6, r0
 8009c42:	4628      	mov	r0, r5
 8009c44:	460f      	mov	r7, r1
 8009c46:	f7fe fba5 	bl	8008394 <__aeabi_i2d>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4630      	mov	r0, r6
 8009c50:	4639      	mov	r1, r7
 8009c52:	f7fe fe7b 	bl	800894c <__aeabi_dcmplt>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d0b4      	beq.n	8009bc4 <GoStraight+0x5c>
 8009c5a:	4d80      	ldr	r5, [pc, #512]	; (8009e5c <GoStraight+0x2f4>)
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1b0      	bne.n	8009bc4 <GoStraight+0x5c>
			{
				updateRealSearch();
 8009c62:	f003 faa9 	bl	800d1b8 <updateRealSearch>
				Calc = 1;
 8009c66:	2301      	movs	r3, #1
 8009c68:	602b      	str	r3, [r5, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009c6a:	68a3      	ldr	r3, [r4, #8]
 8009c6c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8009c70:	445b      	add	r3, fp
 8009c72:	4293      	cmp	r3, r2
 8009c74:	dcac      	bgt.n	8009bd0 <GoStraight+0x68>
	//			Acceleration = 0;
	//		}
		}
		Control_Mode = A_VELO_PID;
		wall_cut = false;
		Acceleration = 0;
 8009c76:	4b7a      	ldr	r3, [pc, #488]	; (8009e60 <GoStraight+0x2f8>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	601a      	str	r2, [r3, #0]
		KeepPulse[BODY] += target_pulse;
 8009c7c:	68a3      	ldr	r3, [r4, #8]
		Control_Mode = A_VELO_PID;
 8009c7e:	4a72      	ldr	r2, [pc, #456]	; (8009e48 <GoStraight+0x2e0>)
		KeepPulse[BODY] += target_pulse;
 8009c80:	445b      	add	r3, fp
 8009c82:	60a3      	str	r3, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009c84:	ed94 7a00 	vldr	s14, [r4]
 8009c88:	ee07 ba90 	vmov	s15, fp
 8009c8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c94:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009c98:	eea7 7aa6 	vfma.f32	s14, s15, s13
		Control_Mode = A_VELO_PID;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	6013      	str	r3, [r2, #0]
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009ca0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009ca4:	ed84 7a00 	vstr	s14, [r4]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 8009ca8:	ed94 7a01 	vldr	s14, [r4, #4]
 8009cac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009cb0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009cb4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8009cb8:	edc4 7a01 	vstr	s15, [r4, #4]

	}
	ChangeLED(0);
 8009cbc:	2000      	movs	r0, #0
	//WallWarn();
	//keep_pulse = TotalPulse[BODY];
	//計算は区切りのいいところで一回するだけ。移動しきるまでそのままか、条件に応じて変える。
	//Uターンは別パターン
	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。
}
 8009cbe:	b003      	add	sp, #12
 8009cc0:	ecbd 8b02 	vpop	{d8}
 8009cc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ChangeLED(0);
 8009cc8:	f003 bfea 	b.w	800dca0 <ChangeLED>
				if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009ccc:	68a0      	ldr	r0, [r4, #8]
 8009cce:	f8da 5008 	ldr.w	r5, [sl, #8]
 8009cd2:	f7fe fb5f 	bl	8008394 <__aeabi_i2d>
 8009cd6:	a35a      	add	r3, pc, #360	; (adr r3, 8009e40 <GoStraight+0x2d8>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	4606      	mov	r6, r0
 8009cde:	460f      	mov	r7, r1
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	f7fe fbc0 	bl	8008468 <__aeabi_dmul>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	4630      	mov	r0, r6
 8009cee:	4639      	mov	r1, r7
 8009cf0:	f7fe fa04 	bl	80080fc <__adddf3>
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	460f      	mov	r7, r1
 8009cfa:	f7fe fb4b 	bl	8008394 <__aeabi_i2d>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	4630      	mov	r0, r6
 8009d04:	4639      	mov	r1, r7
 8009d06:	f7fe fe21 	bl	800894c <__aeabi_dcmplt>
 8009d0a:	b918      	cbnz	r0, 8009d14 <GoStraight+0x1ac>
					Control_Mode = ctrl_mode;
 8009d0c:	4b4e      	ldr	r3, [pc, #312]	; (8009e48 <GoStraight+0x2e0>)
 8009d0e:	9a01      	ldr	r2, [sp, #4]
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	e781      	b.n	8009c18 <GoStraight+0xb0>
						Control_Mode = A_VELO_PID;
 8009d14:	4a4c      	ldr	r2, [pc, #304]	; (8009e48 <GoStraight+0x2e0>)
 8009d16:	2300      	movs	r3, #0
 8009d18:	6013      	str	r3, [r2, #0]
					face_check = true; //正面になったら
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	e77b      	b.n	8009c18 <GoStraight+0xb0>
					if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009d20:	68a0      	ldr	r0, [r4, #8]
 8009d22:	f8da 5008 	ldr.w	r5, [sl, #8]
 8009d26:	f7fe fb35 	bl	8008394 <__aeabi_i2d>
 8009d2a:	a345      	add	r3, pc, #276	; (adr r3, 8009e40 <GoStraight+0x2d8>)
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	4606      	mov	r6, r0
 8009d32:	460f      	mov	r7, r1
 8009d34:	4640      	mov	r0, r8
 8009d36:	4649      	mov	r1, r9
 8009d38:	f7fe fb96 	bl	8008468 <__aeabi_dmul>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4630      	mov	r0, r6
 8009d42:	4639      	mov	r1, r7
 8009d44:	f7fe f9da 	bl	80080fc <__adddf3>
 8009d48:	4606      	mov	r6, r0
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	460f      	mov	r7, r1
 8009d4e:	f7fe fb21 	bl	8008394 <__aeabi_i2d>
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	4630      	mov	r0, r6
 8009d58:	4639      	mov	r1, r7
 8009d5a:	f7fe fdf7 	bl	800894c <__aeabi_dcmplt>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	d1d8      	bne.n	8009d14 <GoStraight+0x1ac>
					else Control_Mode = ctrl_mode;//壁見る
 8009d62:	4b39      	ldr	r3, [pc, #228]	; (8009e48 <GoStraight+0x2e0>)
 8009d64:	9a01      	ldr	r2, [sp, #4]
 8009d66:	601a      	str	r2, [r3, #0]
					face_check = true; //正面になったら
 8009d68:	2301      	movs	r3, #1
 8009d6a:	9300      	str	r3, [sp, #0]
 8009d6c:	e754      	b.n	8009c18 <GoStraight+0xb0>
		VelocityMax = true;
 8009d6e:	4b3d      	ldr	r3, [pc, #244]	; (8009e64 <GoStraight+0x2fc>)
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009d70:	eef0 0a68 	vmov.f32	s1, s17
 8009d74:	eeb0 0a48 	vmov.f32	s0, s16
		VelocityMax = true;
 8009d78:	701c      	strb	r4, [r3, #0]
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009d7a:	f7ff fdc1 	bl	8009900 <Accel>
 8009d7e:	e79d      	b.n	8009cbc <GoStraight+0x154>
		VelocityMax = false;
 8009d80:	4b38      	ldr	r3, [pc, #224]	; (8009e64 <GoStraight+0x2fc>)
 8009d82:	4c32      	ldr	r4, [pc, #200]	; (8009e4c <GoStraight+0x2e4>)
 8009d84:	701d      	strb	r5, [r3, #0]
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009d86:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8009d8a:	eef0 0a68 	vmov.f32	s1, s17
 8009d8e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009d92:	f7ff fe39 	bl	8009a08 <Decel>
		ChangeLED(6);
 8009d96:	2006      	movs	r0, #6
 8009d98:	f003 ff82 	bl	800dca0 <ChangeLED>
 8009d9c:	ee07 ba90 	vmov	s15, fp
 8009da0:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8009da4:	eeb5 8a00 	vmov.f32	s16, #80	; 0x3e800000  0.250
 8009da8:	ee28 8a88 	vmul.f32	s16, s17, s16
 8009dac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009e6c <GoStraight+0x304>
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009db0:	4d2a      	ldr	r5, [pc, #168]	; (8009e5c <GoStraight+0x2f4>)
				Calc = 1;
 8009db2:	2601      	movs	r6, #1
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009db4:	e001      	b.n	8009dba <GoStraight+0x252>
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009db6:	682b      	ldr	r3, [r5, #0]
 8009db8:	b39b      	cbz	r3, 8009e22 <GoStraight+0x2ba>
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009dba:	edd4 7a02 	vldr	s15, [r4, #8]
 8009dbe:	ed9a 7a02 	vldr	s14, [sl, #8]
 8009dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009dca:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd6:	dcee      	bgt.n	8009db6 <GoStraight+0x24e>
		KeepPulse[BODY] += target_pulse*0.2f;
 8009dd8:	edd4 7a02 	vldr	s15, [r4, #8]
 8009ddc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8009e68 <GoStraight+0x300>
 8009de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009de4:	ee28 7a87 	vmul.f32	s14, s17, s14
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009de8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
		KeepPulse[BODY] += target_pulse*0.2f;
 8009dec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009df4:	edc4 7a02 	vstr	s15, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009df8:	edd4 7a00 	vldr	s15, [r4]
 8009dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e00:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e08:	edc4 7a00 	vstr	s15, [r4]
		KeepPulse[RIGHT] += target_pulse*0.2f*0.5f;
 8009e0c:	edd4 7a01 	vldr	s15, [r4, #4]
 8009e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e14:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009e18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e1c:	edc4 7a01 	vstr	s15, [r4, #4]
 8009e20:	e74c      	b.n	8009cbc <GoStraight+0x154>
				updateRealSearch();
 8009e22:	f003 f9c9 	bl	800d1b8 <updateRealSearch>
				Calc = 1;
 8009e26:	602e      	str	r6, [r5, #0]
 8009e28:	e7c7      	b.n	8009dba <GoStraight+0x252>
 8009e2a:	bf00      	nop
 8009e2c:	f3af 8000 	nop.w
 8009e30:	23ca2666 	.word	0x23ca2666
 8009e34:	3f509268 	.word	0x3f509268
 8009e38:	9999999a 	.word	0x9999999a
 8009e3c:	3fe99999 	.word	0x3fe99999
 8009e40:	9999999a 	.word	0x9999999a
 8009e44:	3fd99999 	.word	0x3fd99999
 8009e48:	20000224 	.word	0x20000224
 8009e4c:	200089c0 	.word	0x200089c0
 8009e50:	3d567750 	.word	0x3d567750
 8009e54:	20007f48 	.word	0x20007f48
 8009e58:	20007f38 	.word	0x20007f38
 8009e5c:	20008bfc 	.word	0x20008bfc
 8009e60:	20007f34 	.word	0x20007f34
 8009e64:	20008a7e 	.word	0x20008a7e
 8009e68:	3e4ccccd 	.word	0x3e4ccccd
 8009e6c:	2000898c 	.word	0x2000898c

08009e70 <TurnRight>:
void TurnRight(char mode)
{
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 8009e70:	2853      	cmp	r0, #83	; 0x53
 8009e72:	d02f      	beq.n	8009ed4 <TurnRight+0x64>
 8009e74:	2854      	cmp	r0, #84	; 0x54
 8009e76:	d12c      	bne.n	8009ed2 <TurnRight+0x62>
{
 8009e78:	b508      	push	{r3, lr}
	{
	case 'T' :

		Decel(45, 0);
 8009e7a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8009ed8 <TurnRight+0x68>
 8009e7e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8009edc <TurnRight+0x6c>
 8009e82:	f7ff fdc1 	bl	8009a08 <Decel>
		WaitStopAndReset();
 8009e86:	f7ff f829 	bl	8008edc <WaitStopAndReset>
		ChangeLED(5);
 8009e8a:	2005      	movs	r0, #5
 8009e8c:	f003 ff08 	bl	800dca0 <ChangeLED>
		//AjustCenter();
		EmitterOFF();
 8009e90:	f003 fef8 	bl	800dc84 <EmitterOFF>
		PIDChangeFlag(A_VELO_PID, 0);
 8009e94:	2100      	movs	r1, #0
 8009e96:	4608      	mov	r0, r1
 8009e98:	f004 fbba 	bl	800e610 <PIDChangeFlag>
		Rotate( 90 , 2*M_PI);//1.5
 8009e9c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8009ee0 <TurnRight+0x70>
 8009ea0:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009ee4 <TurnRight+0x74>
 8009ea4:	f7ff f85c 	bl	8008f60 <Rotate>
		ChangeLED(0);
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	f003 fef9 	bl	800dca0 <ChangeLED>
		//RotateTest(90);

//		float acc = AjustCenter();
		EmitterON();
 8009eae:	f003 fedb 	bl	800dc68 <EmitterON>

//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		HAL_Delay(100);
 8009eb2:	2064      	movs	r0, #100	; 0x64
 8009eb4:	f004 fea8 	bl	800ec08 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 8009eb8:	2101      	movs	r1, #1
 8009eba:	2000      	movs	r0, #0
 8009ebc:	f004 fba8 	bl	800e610 <PIDChangeFlag>
		Accel(45, ExploreVelocity);
 8009ec0:	4b09      	ldr	r3, [pc, #36]	; (8009ee8 <TurnRight+0x78>)
 8009ec2:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8009edc <TurnRight+0x6c>
 8009ec6:	edd3 0a00 	vldr	s1, [r3]
	default :
		break;
	}


}
 8009eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Accel(45, ExploreVelocity);
 8009ece:	f7ff bd17 	b.w	8009900 <Accel>
 8009ed2:	4770      	bx	lr
		SlalomRight();
 8009ed4:	f7ff b9dc 	b.w	8009290 <SlalomRight>
 8009ed8:	00000000 	.word	0x00000000
 8009edc:	42340000 	.word	0x42340000
 8009ee0:	40c90fdb 	.word	0x40c90fdb
 8009ee4:	42b40000 	.word	0x42b40000
 8009ee8:	20008a80 	.word	0x20008a80

08009eec <TurnLeft>:
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 8009eec:	2853      	cmp	r0, #83	; 0x53
 8009eee:	d02c      	beq.n	8009f4a <TurnLeft+0x5e>
 8009ef0:	2854      	cmp	r0, #84	; 0x54
 8009ef2:	d129      	bne.n	8009f48 <TurnLeft+0x5c>
{
 8009ef4:	b508      	push	{r3, lr}
	{
	case 'T' :
		//超信地旋回
		Decel(45, 0);
 8009ef6:	eddf 0a16 	vldr	s1, [pc, #88]	; 8009f50 <TurnLeft+0x64>
 8009efa:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8009f54 <TurnLeft+0x68>
 8009efe:	f7ff fd83 	bl	8009a08 <Decel>
		WaitStopAndReset();
 8009f02:	f7fe ffeb 	bl	8008edc <WaitStopAndReset>
		//ChangeLED(5);

		//AjustCenter();
		EmitterOFF();
 8009f06:	f003 febd 	bl	800dc84 <EmitterOFF>
		PIDChangeFlag(A_VELO_PID, 0);
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	4608      	mov	r0, r1
 8009f0e:	f004 fb7f 	bl	800e610 <PIDChangeFlag>
		Rotate( 90 , -2*M_PI);//-1.5
 8009f12:	eddf 0a11 	vldr	s1, [pc, #68]	; 8009f58 <TurnLeft+0x6c>
 8009f16:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8009f5c <TurnLeft+0x70>
 8009f1a:	f7ff f821 	bl	8008f60 <Rotate>
		//RotateTest(-90);
//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		EmitterON();
 8009f1e:	f003 fea3 	bl	800dc68 <EmitterON>
		HAL_Delay(100);
 8009f22:	2064      	movs	r0, #100	; 0x64
 8009f24:	f004 fe70 	bl	800ec08 <HAL_Delay>
//		float acc = AjustCenter();
		HAL_Delay(100);
 8009f28:	2064      	movs	r0, #100	; 0x64
 8009f2a:	f004 fe6d 	bl	800ec08 <HAL_Delay>

		PIDChangeFlag( A_VELO_PID , 1);
 8009f2e:	2101      	movs	r1, #1
 8009f30:	2000      	movs	r0, #0
 8009f32:	f004 fb6d 	bl	800e610 <PIDChangeFlag>
		Accel(45, ExploreVelocity);
 8009f36:	4b0a      	ldr	r3, [pc, #40]	; (8009f60 <TurnLeft+0x74>)
 8009f38:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8009f54 <TurnLeft+0x68>
 8009f3c:	edd3 0a00 	vldr	s1, [r3]
		break;
	default :
		break;
	}

}
 8009f40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Accel(45, ExploreVelocity);
 8009f44:	f7ff bcdc 	b.w	8009900 <Accel>
 8009f48:	4770      	bx	lr
		SlalomLeft();
 8009f4a:	f7ff bb49 	b.w	80095e0 <SlalomLeft>
 8009f4e:	bf00      	nop
 8009f50:	00000000 	.word	0x00000000
 8009f54:	42340000 	.word	0x42340000
 8009f58:	c0c90fdb 	.word	0xc0c90fdb
 8009f5c:	42b40000 	.word	0x42b40000
 8009f60:	20008a80 	.word	0x20008a80

08009f64 <GoBack>:
void GoBack()
{
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	ed2d 8b04 	vpush	{d8-d9}
	//減速して
	Decel(45, 0);
 8009f6a:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8009fdc <GoBack+0x78>
 8009f6e:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009fe0 <GoBack+0x7c>

	Rotate(180, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
	EmitterON();

#else
	Pos.Dir = right;
 8009f72:	4c1c      	ldr	r4, [pc, #112]	; (8009fe4 <GoBack+0x80>)
	PIDChangeFlag(A_VELO_PID, 0);
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 8009f74:	ed9f 9a1c 	vldr	s18, [pc, #112]	; 8009fe8 <GoBack+0x84>
 8009f78:	eddf 8a1c 	vldr	s17, [pc, #112]	; 8009fec <GoBack+0x88>
	Decel(45, 0);
 8009f7c:	eeb0 0a48 	vmov.f32	s0, s16
 8009f80:	f7ff fd42 	bl	8009a08 <Decel>
	WaitStopAndReset();
 8009f84:	f7fe ffaa 	bl	8008edc <WaitStopAndReset>
	ChangeLED(5);
 8009f88:	2005      	movs	r0, #5
 8009f8a:	f003 fe89 	bl	800dca0 <ChangeLED>
	PIDChangeFlag(A_VELO_PID, 0);
 8009f8e:	2100      	movs	r1, #0
 8009f90:	4608      	mov	r0, r1
	Pos.Dir = right;
 8009f92:	2501      	movs	r5, #1
 8009f94:	7125      	strb	r5, [r4, #4]
	PIDChangeFlag(A_VELO_PID, 0);
 8009f96:	f004 fb3b 	bl	800e610 <PIDChangeFlag>
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 8009f9a:	eef0 0a49 	vmov.f32	s1, s18
 8009f9e:	eeb0 0a68 	vmov.f32	s0, s17
 8009fa2:	f7fe ffdd 	bl	8008f60 <Rotate>
	//acc = AjustCenter();
	Pos.Dir = right;
	Rotate(90, 2*M_PI);
 8009fa6:	eef0 0a49 	vmov.f32	s1, s18
 8009faa:	eeb0 0a68 	vmov.f32	s0, s17
	Pos.Dir = right;
 8009fae:	7125      	strb	r5, [r4, #4]
	Rotate(90, 2*M_PI);
 8009fb0:	f7fe ffd6 	bl	8008f60 <Rotate>
	PIDChangeFlag(A_VELO_PID, 1);
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	f004 fb2a 	bl	800e610 <PIDChangeFlag>
	Pos.Dir = back;
 8009fbc:	2303      	movs	r3, #3
#endif

	//acc = AjustCenter();
//	/Angle = TargetAngle;

	HAL_Delay(200);
 8009fbe:	20c8      	movs	r0, #200	; 0xc8
	Pos.Dir = back;
 8009fc0:	7123      	strb	r3, [r4, #4]
	HAL_Delay(200);
 8009fc2:	f004 fe21 	bl	800ec08 <HAL_Delay>

	Accel(45, ExploreVelocity);
 8009fc6:	eeb0 0a48 	vmov.f32	s0, s16
	//ここまでで目標走行距離を完了する

}
 8009fca:	ecbd 8b04 	vpop	{d8-d9}
	Accel(45, ExploreVelocity);
 8009fce:	4b08      	ldr	r3, [pc, #32]	; (8009ff0 <GoBack+0x8c>)
 8009fd0:	edd3 0a00 	vldr	s1, [r3]
}
 8009fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Accel(45, ExploreVelocity);
 8009fd8:	f7ff bc92 	b.w	8009900 <Accel>
 8009fdc:	42340000 	.word	0x42340000
 8009fe0:	00000000 	.word	0x00000000
 8009fe4:	20000004 	.word	0x20000004
 8009fe8:	40c90fdb 	.word	0x40c90fdb
 8009fec:	42b40000 	.word	0x42b40000
 8009ff0:	20008a80 	.word	0x20008a80
 8009ff4:	00000000 	.word	0x00000000

08009ff8 <Explore_IT>:
	//4つめが終わる前に0.5msが過ぎる説。
}


void Explore_IT()
{
 8009ff8:	b570      	push	{r4, r5, r6, lr}

//*-----------------*/

	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009ffa:	4c81      	ldr	r4, [pc, #516]	; (800a200 <Explore_IT+0x208>)
 8009ffc:	4881      	ldr	r0, [pc, #516]	; (800a204 <Explore_IT+0x20c>)
 8009ffe:	6a61      	ldr	r1, [r4, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a000:	4a81      	ldr	r2, [pc, #516]	; (800a208 <Explore_IT+0x210>)
	TIM4->CNT = INITIAL_PULSE;

	//速度 mm/s
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a002:	eddf 7a82 	vldr	s15, [pc, #520]	; 800a20c <Explore_IT+0x214>
 800a006:	4d82      	ldr	r5, [pc, #520]	; (800a210 <Explore_IT+0x218>)

	//switch文でどれかひとつに絞らせたい
	static int keep_mode = 0;

	//違うモードに変わるとき、前のモードの値をリセットしておく
	if( Control_Mode != keep_mode){
 800a008:	4e82      	ldr	r6, [pc, #520]	; (800a214 <Explore_IT+0x21c>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a00a:	f247 532f 	movw	r3, #29999	; 0x752f
 800a00e:	1a59      	subs	r1, r3, r1
 800a010:	6001      	str	r1, [r0, #0]
	TIM3->CNT = INITIAL_PULSE;
 800a012:	6263      	str	r3, [r4, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a014:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 800a016:	6253      	str	r3, [r2, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a018:	1b1b      	subs	r3, r3, r4
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a01a:	ee07 3a10 	vmov	s14, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a01e:	ee06 1a90 	vmov	s13, r1
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a022:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a026:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a02a:	ee27 7a27 	vmul.f32	s14, s14, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a02e:	ee66 6aa7 	vmul.f32	s13, s13, s15
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a032:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a036:	edc5 6a00 	vstr	s13, [r5]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a03a:	ed85 7a01 	vstr	s14, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a03e:	edd5 7a00 	vldr	s15, [r5]
 800a042:	ed95 7a01 	vldr	s14, [r5, #4]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a046:	4a74      	ldr	r2, [pc, #464]	; (800a218 <Explore_IT+0x220>)
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a048:	6043      	str	r3, [r0, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a04a:	ee77 7a87 	vadd.f32	s15, s15, s14
	if( Control_Mode != keep_mode){
 800a04e:	4c73      	ldr	r4, [pc, #460]	; (800a21c <Explore_IT+0x224>)
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a050:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a054:	edc5 7a02 	vstr	s15, [r5, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a058:	6810      	ldr	r0, [r2, #0]
 800a05a:	4401      	add	r1, r0
 800a05c:	6011      	str	r1, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a05e:	6851      	ldr	r1, [r2, #4]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a060:	486f      	ldr	r0, [pc, #444]	; (800a220 <Explore_IT+0x228>)
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a062:	440b      	add	r3, r1
 800a064:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a066:	6813      	ldr	r3, [r2, #0]
 800a068:	6851      	ldr	r1, [r2, #4]
 800a06a:	440b      	add	r3, r1
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a06c:	496d      	ldr	r1, [pc, #436]	; (800a224 <Explore_IT+0x22c>)
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a06e:	6093      	str	r3, [r2, #8]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a070:	f003 fcce 	bl	800da10 <Update_IMU>
	if( Control_Mode != keep_mode){
 800a074:	6820      	ldr	r0, [r4, #0]
 800a076:	6833      	ldr	r3, [r6, #0]
 800a078:	4283      	cmp	r3, r0
 800a07a:	d006      	beq.n	800a08a <Explore_IT+0x92>
		PIDReset(keep_mode);
 800a07c:	f004 fade 	bl	800e63c <PIDReset>
		PIDChangeFlag(keep_mode, 0);
 800a080:	6820      	ldr	r0, [r4, #0]
 800a082:	2100      	movs	r1, #0
 800a084:	f004 fac4 	bl	800e610 <PIDChangeFlag>
 800a088:	6830      	ldr	r0, [r6, #0]
	}
	PIDChangeFlag(Control_Mode, 1);
 800a08a:	2101      	movs	r1, #1
 800a08c:	f004 fac0 	bl	800e610 <PIDChangeFlag>
	keep_mode = Control_Mode;
 800a090:	6833      	ldr	r3, [r6, #0]
 800a092:	6023      	str	r3, [r4, #0]

	int wall_d =0,wall_l =0,wall_r =0,wall_f=0;
	int ang_out=0;
	switch(Control_Mode)
 800a094:	2b08      	cmp	r3, #8
 800a096:	f200 80a9 	bhi.w	800a1ec <Explore_IT+0x1f4>
 800a09a:	e8df f003 	tbb	[pc, r3]
 800a09e:	7563      	.short	0x7563
 800a0a0:	a7a79e95 	.word	0xa7a79e95
 800a0a4:	a7a7      	.short	0xa7a7
 800a0a6:	05          	.byte	0x05
 800a0a7:	00          	.byte	0x00
	case R_WALL_PID :
		wall_r = PIDControl( Control_Mode,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
		TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
		break;
	case F_WALL_PID : //前壁補正のための制御. ミックスはよくない.
		wall_f = PIDControl( Control_Mode,   4000, (	(Photo[FR]+Photo[FL])));
 800a0a8:	4b5f      	ldr	r3, [pc, #380]	; (800a228 <Explore_IT+0x230>)
 800a0aa:	ed9f 0a60 	vldr	s0, [pc, #384]	; 800a22c <Explore_IT+0x234>
 800a0ae:	edd3 7a00 	vldr	s15, [r3]
 800a0b2:	edd3 0a03 	vldr	s1, [r3, #12]
		TargetVelocity[BODY] = (float)wall_f*0.001;
 800a0b6:	4c5e      	ldr	r4, [pc, #376]	; (800a230 <Explore_IT+0x238>)
		wall_f = PIDControl( Control_Mode,   4000, (	(Photo[FR]+Photo[FL])));
 800a0b8:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800a0bc:	2008      	movs	r0, #8
 800a0be:	f004 fafb 	bl	800e6b8 <PIDControl>
		TargetVelocity[BODY] = (float)wall_f*0.001;
 800a0c2:	ee07 0a90 	vmov	s15, r0
 800a0c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0ca:	ee17 0a90 	vmov	r0, s15
 800a0ce:	f7fe f973 	bl	80083b8 <__aeabi_f2d>
 800a0d2:	a349      	add	r3, pc, #292	; (adr r3, 800a1f8 <Explore_IT+0x200>)
 800a0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d8:	f7fe f9c6 	bl	8008468 <__aeabi_dmul>
 800a0dc:	f7fe fcbc 	bl	8008a58 <__aeabi_d2f>
 800a0e0:	4b54      	ldr	r3, [pc, #336]	; (800a234 <Explore_IT+0x23c>)
 800a0e2:	60a0      	str	r0, [r4, #8]
//
//				//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
//			}
//		}

	TargetVelocity[BODY] += Acceleration;
 800a0e4:	4954      	ldr	r1, [pc, #336]	; (800a238 <Explore_IT+0x240>)
	//AngularAcceleration += AngularLeapsity;
	TargetAngularV += AngularAcceleration;
 800a0e6:	4a55      	ldr	r2, [pc, #340]	; (800a23c <Explore_IT+0x244>)
	TargetVelocity[BODY] += Acceleration;
 800a0e8:	ed91 7a00 	vldr	s14, [r1]
 800a0ec:	edd4 7a02 	vldr	s15, [r4, #8]
	//TargetAngularV += AngularAcceleration;
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a0f0:	eddf 6a53 	vldr	s13, [pc, #332]	; 800a240 <Explore_IT+0x248>
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a0f4:	4e53      	ldr	r6, [pc, #332]	; (800a244 <Explore_IT+0x24c>)
	TargetVelocity[BODY] += Acceleration;
 800a0f6:	ee77 7a87 	vadd.f32	s15, s15, s14
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a0fa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	TargetVelocity[BODY] += Acceleration;
 800a0fe:	edc4 7a02 	vstr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 800a102:	ed92 7a00 	vldr	s14, [r2]
 800a106:	edd3 7a00 	vldr	s15, [r3]
 800a10a:	ee77 7a87 	vadd.f32	s15, s15, s14
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a10e:	2004      	movs	r0, #4
	TargetAngularV += AngularAcceleration;
 800a110:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a114:	edd4 7a02 	vldr	s15, [r4, #8]
 800a118:	ed93 7a00 	vldr	s14, [r3]
 800a11c:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800a120:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a124:	edc4 7a01 	vstr	s15, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a128:	ed93 7a00 	vldr	s14, [r3]
 800a12c:	edd4 7a01 	vldr	s15, [r4, #4]
 800a130:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a134:	edc4 7a00 	vstr	s15, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a138:	ed94 0a00 	vldr	s0, [r4]
 800a13c:	edd5 0a00 	vldr	s1, [r5]
 800a140:	f004 faba 	bl	800e6b8 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a144:	ed94 0a01 	vldr	s0, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a148:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a14a:	edd5 0a01 	vldr	s1, [r5, #4]
 800a14e:	2005      	movs	r0, #5
 800a150:	f004 fab2 	bl	800e6b8 <PIDControl>
 800a154:	4b3c      	ldr	r3, [pc, #240]	; (800a248 <Explore_IT+0x250>)
 800a156:	4601      	mov	r1, r0

	//モータに出力
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a158:	6830      	ldr	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a15a:	6019      	str	r1, [r3, #0]

}
 800a15c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a160:	f003 be92 	b.w	800de88 <Motor_Switch>
		ang_out = PIDControl( Control_Mode,  TargetAngle, Angle);
 800a164:	4b2f      	ldr	r3, [pc, #188]	; (800a224 <Explore_IT+0x22c>)
 800a166:	4a39      	ldr	r2, [pc, #228]	; (800a24c <Explore_IT+0x254>)
 800a168:	4c31      	ldr	r4, [pc, #196]	; (800a230 <Explore_IT+0x238>)
 800a16a:	ed92 0a00 	vldr	s0, [r2]
 800a16e:	edd3 0a00 	vldr	s1, [r3]
 800a172:	2000      	movs	r0, #0
 800a174:	f004 faa0 	bl	800e6b8 <PIDControl>
		TargetAngularV = (float)ang_out;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
 800a178:	ee07 0a90 	vmov	s15, r0
 800a17c:	4b2d      	ldr	r3, [pc, #180]	; (800a234 <Explore_IT+0x23c>)
 800a17e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a182:	edc3 7a00 	vstr	s15, [r3]
		break;
 800a186:	e7ad      	b.n	800a0e4 <Explore_IT+0xec>
		wall_d = PIDControl( Control_Mode, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800a188:	4b27      	ldr	r3, [pc, #156]	; (800a228 <Explore_IT+0x230>)
 800a18a:	4a31      	ldr	r2, [pc, #196]	; (800a250 <Explore_IT+0x258>)
 800a18c:	edd3 0a01 	vldr	s1, [r3, #4]
 800a190:	edd2 7a00 	vldr	s15, [r2]
 800a194:	ed93 0a02 	vldr	s0, [r3, #8]
 800a198:	4c25      	ldr	r4, [pc, #148]	; (800a230 <Explore_IT+0x238>)
 800a19a:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800a19e:	2001      	movs	r0, #1
		wall_l = PIDControl( Control_Mode,  Photo[SL], TargetPhoto[SL]);
 800a1a0:	f004 fa8a 	bl	800e6b8 <PIDControl>
		TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800a1a4:	ee07 0a90 	vmov	s15, r0
 800a1a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1ac:	ee17 0a90 	vmov	r0, s15
 800a1b0:	f7fe f902 	bl	80083b8 <__aeabi_f2d>
 800a1b4:	a310      	add	r3, pc, #64	; (adr r3, 800a1f8 <Explore_IT+0x200>)
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	f7fe f955 	bl	8008468 <__aeabi_dmul>
 800a1be:	f7fe fc4b 	bl	8008a58 <__aeabi_d2f>
 800a1c2:	4b1c      	ldr	r3, [pc, #112]	; (800a234 <Explore_IT+0x23c>)
 800a1c4:	6018      	str	r0, [r3, #0]
		break;
 800a1c6:	e78d      	b.n	800a0e4 <Explore_IT+0xec>
		wall_l = PIDControl( Control_Mode,  Photo[SL], TargetPhoto[SL]);
 800a1c8:	4a22      	ldr	r2, [pc, #136]	; (800a254 <Explore_IT+0x25c>)
 800a1ca:	4b17      	ldr	r3, [pc, #92]	; (800a228 <Explore_IT+0x230>)
 800a1cc:	edd2 0a02 	vldr	s1, [r2, #8]
 800a1d0:	ed93 0a02 	vldr	s0, [r3, #8]
 800a1d4:	4c16      	ldr	r4, [pc, #88]	; (800a230 <Explore_IT+0x238>)
 800a1d6:	2002      	movs	r0, #2
 800a1d8:	e7e2      	b.n	800a1a0 <Explore_IT+0x1a8>
		wall_r = PIDControl( Control_Mode,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800a1da:	4a13      	ldr	r2, [pc, #76]	; (800a228 <Explore_IT+0x230>)
 800a1dc:	4b1d      	ldr	r3, [pc, #116]	; (800a254 <Explore_IT+0x25c>)
 800a1de:	edd2 0a01 	vldr	s1, [r2, #4]
 800a1e2:	ed93 0a01 	vldr	s0, [r3, #4]
 800a1e6:	4c12      	ldr	r4, [pc, #72]	; (800a230 <Explore_IT+0x238>)
 800a1e8:	2003      	movs	r0, #3
 800a1ea:	e7d9      	b.n	800a1a0 <Explore_IT+0x1a8>
 800a1ec:	4b11      	ldr	r3, [pc, #68]	; (800a234 <Explore_IT+0x23c>)
 800a1ee:	4c10      	ldr	r4, [pc, #64]	; (800a230 <Explore_IT+0x238>)
 800a1f0:	e778      	b.n	800a0e4 <Explore_IT+0xec>
 800a1f2:	bf00      	nop
 800a1f4:	f3af 8000 	nop.w
 800a1f8:	d2f1a9fc 	.word	0xd2f1a9fc
 800a1fc:	3f50624d 	.word	0x3f50624d
 800a200:	40000400 	.word	0x40000400
 800a204:	20008b48 	.word	0x20008b48
 800a208:	40000800 	.word	0x40000800
 800a20c:	3f8177cd 	.word	0x3f8177cd
 800a210:	20008998 	.word	0x20008998
 800a214:	20000224 	.word	0x20000224
 800a218:	2000898c 	.word	0x2000898c
 800a21c:	20007f2c 	.word	0x20007f2c
 800a220:	20007f44 	.word	0x20007f44
 800a224:	20007f38 	.word	0x20007f38
 800a228:	200089cc 	.word	0x200089cc
 800a22c:	457a0000 	.word	0x457a0000
 800a230:	2000895c 	.word	0x2000895c
 800a234:	2000896c 	.word	0x2000896c
 800a238:	20007f34 	.word	0x20007f34
 800a23c:	20007f3c 	.word	0x20007f3c
 800a240:	4209999a 	.word	0x4209999a
 800a244:	20008a84 	.word	0x20008a84
 800a248:	20008aa0 	.word	0x20008aa0
 800a24c:	20007f48 	.word	0x20007f48
 800a250:	20008980 	.word	0x20008980
 800a254:	20008a8c 	.word	0x20008a8c

0800a258 <WritingFree_IT>:
void WritingFree_IT()
{
 800a258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a25c:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 800a44c <WritingFree_IT+0x1f4>
 800a260:	4967      	ldr	r1, [pc, #412]	; (800a400 <WritingFree_IT+0x1a8>)
 800a262:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a266:	4867      	ldr	r0, [pc, #412]	; (800a404 <WritingFree_IT+0x1ac>)
	TIM4->CNT = INITIAL_PULSE;

	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a268:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a408 <WritingFree_IT+0x1b0>
 800a26c:	4d67      	ldr	r5, [pc, #412]	; (800a40c <WritingFree_IT+0x1b4>)
//			velodebug_flag = 0;
//		}
//
//	}
	//移動量 mm/msを積算
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a26e:	4a68      	ldr	r2, [pc, #416]	; (800a410 <WritingFree_IT+0x1b8>)
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a270:	4f68      	ldr	r7, [pc, #416]	; (800a414 <WritingFree_IT+0x1bc>)
			}
		}
#endif

	AngularAcceleration += AngularLeapsity;
	TargetVelocity[BODY] += Acceleration;
 800a272:	4c69      	ldr	r4, [pc, #420]	; (800a418 <WritingFree_IT+0x1c0>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a274:	f247 532f 	movw	r3, #29999	; 0x752f
 800a278:	1b9e      	subs	r6, r3, r6
{
 800a27a:	ed2d 8b02 	vpush	{d8}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a27e:	600e      	str	r6, [r1, #0]
	TIM3->CNT = INITIAL_PULSE;
 800a280:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a284:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 800a288:	6243      	str	r3, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a28a:	eba3 030c 	sub.w	r3, r3, ip
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a28e:	ee07 3a90 	vmov	s15, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a292:	ee07 6a10 	vmov	s14, r6
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a29a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a29e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a2a2:	ee27 7a26 	vmul.f32	s14, s14, s13
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a2a6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a2aa:	ed85 7a00 	vstr	s14, [r5]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a2ae:	edc5 7a01 	vstr	s15, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a2b2:	edd5 7a00 	vldr	s15, [r5]
 800a2b6:	ed95 7a01 	vldr	s14, [r5, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a2ba:	604b      	str	r3, [r1, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a2bc:	ee77 7a87 	vadd.f32	s15, s15, s14
	ZGyro = ReadIMU(0x37, 0x38);
 800a2c0:	2138      	movs	r1, #56	; 0x38
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a2c2:	ee67 7aa8 	vmul.f32	s15, s15, s17
	ZGyro = ReadIMU(0x37, 0x38);
 800a2c6:	2037      	movs	r0, #55	; 0x37
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a2c8:	edc5 7a02 	vstr	s15, [r5, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a2cc:	f8d2 c000 	ldr.w	ip, [r2]
 800a2d0:	4466      	add	r6, ip
 800a2d2:	6016      	str	r6, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a2d4:	6856      	ldr	r6, [r2, #4]
 800a2d6:	4433      	add	r3, r6
 800a2d8:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a2da:	6813      	ldr	r3, [r2, #0]
 800a2dc:	6856      	ldr	r6, [r2, #4]
 800a2de:	4433      	add	r3, r6
 800a2e0:	6093      	str	r3, [r2, #8]
	ZGyro = ReadIMU(0x37, 0x38);
 800a2e2:	f003 fb1f 	bl	800d924 <ReadIMU>
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a2e6:	4b4d      	ldr	r3, [pc, #308]	; (800a41c <WritingFree_IT+0x1c4>)
 800a2e8:	4a4d      	ldr	r2, [pc, #308]	; (800a420 <WritingFree_IT+0x1c8>)
 800a2ea:	edd3 7a00 	vldr	s15, [r3]
	ZGyro = ReadIMU(0x37, 0x38);
 800a2ee:	4b4d      	ldr	r3, [pc, #308]	; (800a424 <WritingFree_IT+0x1cc>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a2f0:	ed92 8a00 	vldr	s16, [r2]
	ZGyro = ReadIMU(0x37, 0x38);
 800a2f4:	ed83 0a00 	vstr	s0, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a2f8:	ee30 0a67 	vsub.f32	s0, s0, s15
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a2fc:	6838      	ldr	r0, [r7, #0]
	AngularAcceleration += AngularLeapsity;
 800a2fe:	4e4a      	ldr	r6, [pc, #296]	; (800a428 <WritingFree_IT+0x1d0>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a300:	ee20 8a08 	vmul.f32	s16, s0, s16
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a304:	f7fe f858 	bl	80083b8 <__aeabi_f2d>
 800a308:	a339      	add	r3, pc, #228	; (adr r3, 800a3f0 <WritingFree_IT+0x198>)
 800a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30e:	f7fe f8ab 	bl	8008468 <__aeabi_dmul>
 800a312:	4680      	mov	r8, r0
 800a314:	ee18 0a10 	vmov	r0, s16
 800a318:	4689      	mov	r9, r1
 800a31a:	f7fe f84d 	bl	80083b8 <__aeabi_f2d>
 800a31e:	a336      	add	r3, pc, #216	; (adr r3, 800a3f8 <WritingFree_IT+0x1a0>)
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	f7fe f8a0 	bl	8008468 <__aeabi_dmul>
 800a328:	4602      	mov	r2, r0
 800a32a:	460b      	mov	r3, r1
 800a32c:	4640      	mov	r0, r8
 800a32e:	4649      	mov	r1, r9
 800a330:	f7fd fee4 	bl	80080fc <__adddf3>
 800a334:	f7fe fb90 	bl	8008a58 <__aeabi_d2f>
 800a338:	4b3c      	ldr	r3, [pc, #240]	; (800a42c <WritingFree_IT+0x1d4>)
	Angle += AngularV * T1;
 800a33a:	493d      	ldr	r1, [pc, #244]	; (800a430 <WritingFree_IT+0x1d8>)
 800a33c:	eddf 7a3d 	vldr	s15, [pc, #244]	; 800a434 <WritingFree_IT+0x1dc>
	AngularAcceleration += AngularLeapsity;
 800a340:	4a3d      	ldr	r2, [pc, #244]	; (800a438 <WritingFree_IT+0x1e0>)
 800a342:	ed96 6a00 	vldr	s12, [r6]
	TargetVelocity[BODY] += Acceleration;
 800a346:	f8df c108 	ldr.w	ip, [pc, #264]	; 800a450 <WritingFree_IT+0x1f8>
	TargetAngularV += AngularAcceleration;

	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a34a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a43c <WritingFree_IT+0x1e4>
    zg_last = zg_law;
 800a34e:	ed87 8a00 	vstr	s16, [r7]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a352:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800a356:	6018      	str	r0, [r3, #0]
	Angle += AngularV * T1;
 800a358:	edd3 5a00 	vldr	s11, [r3]
 800a35c:	ed91 7a00 	vldr	s14, [r1]
	TargetAngularV += AngularAcceleration;
 800a360:	4b37      	ldr	r3, [pc, #220]	; (800a440 <WritingFree_IT+0x1e8>)
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a362:	4e38      	ldr	r6, [pc, #224]	; (800a444 <WritingFree_IT+0x1ec>)
	Angle += AngularV * T1;
 800a364:	eea5 7aa7 	vfma.f32	s14, s11, s15
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a368:	2004      	movs	r0, #4
	Angle += AngularV * T1;
 800a36a:	ed81 7a00 	vstr	s14, [r1]
	AngularAcceleration += AngularLeapsity;
 800a36e:	edd2 7a00 	vldr	s15, [r2]
 800a372:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a376:	edc2 7a00 	vstr	s15, [r2]
	TargetVelocity[BODY] += Acceleration;
 800a37a:	ed9c 7a00 	vldr	s14, [ip]
 800a37e:	edd4 7a02 	vldr	s15, [r4, #8]
 800a382:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a386:	edc4 7a02 	vstr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 800a38a:	ed92 7a00 	vldr	s14, [r2]
 800a38e:	edd3 7a00 	vldr	s15, [r3]
 800a392:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a396:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a39a:	edd4 7a02 	vldr	s15, [r4, #8]
 800a39e:	ed93 7a00 	vldr	s14, [r3]
 800a3a2:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800a3a6:	eee7 7a28 	vfma.f32	s15, s14, s17
 800a3aa:	edc4 7a01 	vstr	s15, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a3ae:	ed93 7a00 	vldr	s14, [r3]
 800a3b2:	edd4 7a01 	vldr	s15, [r4, #4]
 800a3b6:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a3ba:	edc4 7a00 	vstr	s15, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a3be:	ed94 0a00 	vldr	s0, [r4]
 800a3c2:	edd5 0a00 	vldr	s1, [r5]
 800a3c6:	f004 f977 	bl	800e6b8 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a3ca:	ed94 0a01 	vldr	s0, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a3ce:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a3d0:	edd5 0a01 	vldr	s1, [r5, #4]
 800a3d4:	2005      	movs	r0, #5
 800a3d6:	f004 f96f 	bl	800e6b8 <PIDControl>

	Motor_Switch( VelocityLeftOut, VelocityRightOut );


}
 800a3da:	ecbd 8b02 	vpop	{d8}
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a3de:	4b1a      	ldr	r3, [pc, #104]	; (800a448 <WritingFree_IT+0x1f0>)
 800a3e0:	4601      	mov	r1, r0
 800a3e2:	6019      	str	r1, [r3, #0]
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a3e4:	6830      	ldr	r0, [r6, #0]
}
 800a3e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a3ea:	f003 bd4d 	b.w	800de88 <Motor_Switch>
 800a3ee:	bf00      	nop
 800a3f0:	7ae147ae 	.word	0x7ae147ae
 800a3f4:	3fefae14 	.word	0x3fefae14
 800a3f8:	47ae147b 	.word	0x47ae147b
 800a3fc:	3f847ae1 	.word	0x3f847ae1
 800a400:	20008b48 	.word	0x20008b48
 800a404:	40000800 	.word	0x40000800
 800a408:	3f8177cd 	.word	0x3f8177cd
 800a40c:	20008998 	.word	0x20008998
 800a410:	2000898c 	.word	0x2000898c
 800a414:	20007f30 	.word	0x20007f30
 800a418:	2000895c 	.word	0x2000895c
 800a41c:	20007ff4 	.word	0x20007ff4
 800a420:	080192a0 	.word	0x080192a0
 800a424:	20007fe4 	.word	0x20007fe4
 800a428:	20007f40 	.word	0x20007f40
 800a42c:	20007f44 	.word	0x20007f44
 800a430:	20007f38 	.word	0x20007f38
 800a434:	3a83126f 	.word	0x3a83126f
 800a438:	20007f3c 	.word	0x20007f3c
 800a43c:	4209999a 	.word	0x4209999a
 800a440:	2000896c 	.word	0x2000896c
 800a444:	20008a84 	.word	0x20008a84
 800a448:	20008aa0 	.word	0x20008aa0
 800a44c:	40000400 	.word	0x40000400
 800a450:	20007f34 	.word	0x20007f34

0800a454 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if( htim == &htim1)
 800a454:	4b28      	ldr	r3, [pc, #160]	; (800a4f8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800a456:	4298      	cmp	r0, r3
{
 800a458:	b570      	push	{r4, r5, r6, lr}
 800a45a:	4604      	mov	r4, r0
	if( htim == &htim1)
 800a45c:	d003      	beq.n	800a466 <HAL_TIM_PeriodElapsedCallback+0x12>
		default :
			break;
		}
	}

	if( htim == &htim8)
 800a45e:	4b27      	ldr	r3, [pc, #156]	; (800a4fc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800a460:	429c      	cmp	r4, r3
 800a462:	d012      	beq.n	800a48a <HAL_TIM_PeriodElapsedCallback+0x36>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
	}
}
 800a464:	bd70      	pop	{r4, r5, r6, pc}
		switch(IT_mode){
 800a466:	4b26      	ldr	r3, [pc, #152]	; (800a500 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b06      	cmp	r3, #6
 800a46c:	d030      	beq.n	800a4d0 <HAL_TIM_PeriodElapsedCallback+0x7c>
 800a46e:	2b07      	cmp	r3, #7
 800a470:	d02b      	beq.n	800a4ca <HAL_TIM_PeriodElapsedCallback+0x76>
 800a472:	2b05      	cmp	r3, #5
 800a474:	d1f3      	bne.n	800a45e <HAL_TIM_PeriodElapsedCallback+0xa>
			if(timer1 < 5000)
 800a476:	4d23      	ldr	r5, [pc, #140]	; (800a504 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800a478:	682a      	ldr	r2, [r5, #0]
 800a47a:	f241 3387 	movw	r3, #4999	; 0x1387
 800a47e:	429a      	cmp	r2, r3
 800a480:	dd29      	ble.n	800a4d6 <HAL_TIM_PeriodElapsedCallback+0x82>
			else t = 0;
 800a482:	4b21      	ldr	r3, [pc, #132]	; (800a508 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800a484:	2200      	movs	r2, #0
 800a486:	601a      	str	r2, [r3, #0]
 800a488:	e7e9      	b.n	800a45e <HAL_TIM_PeriodElapsedCallback+0xa>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a48a:	4e20      	ldr	r6, [pc, #128]	; (800a50c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800a48c:	4c20      	ldr	r4, [pc, #128]	; (800a510 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800a48e:	6831      	ldr	r1, [r6, #0]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a490:	4d20      	ldr	r5, [pc, #128]	; (800a514 <HAL_TIM_PeriodElapsedCallback+0xc0>)
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a492:	2200      	movs	r2, #0
 800a494:	200a      	movs	r0, #10
 800a496:	f003 fd5b 	bl	800df50 <GetWallDataAverage>
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a49a:	6871      	ldr	r1, [r6, #4]
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a49c:	ed84 0a00 	vstr	s0, [r4]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	200a      	movs	r0, #10
 800a4a4:	f003 fd54 	bl	800df50 <GetWallDataAverage>
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a4a8:	6829      	ldr	r1, [r5, #0]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a4aa:	ed84 0a01 	vstr	s0, [r4, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	200a      	movs	r0, #10
 800a4b2:	f003 fd4d 	bl	800df50 <GetWallDataAverage>
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a4b6:	6869      	ldr	r1, [r5, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a4b8:	ed84 0a02 	vstr	s0, [r4, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a4bc:	2203      	movs	r2, #3
 800a4be:	200a      	movs	r0, #10
 800a4c0:	f003 fd46 	bl	800df50 <GetWallDataAverage>
 800a4c4:	ed84 0a03 	vstr	s0, [r4, #12]
}
 800a4c8:	bd70      	pop	{r4, r5, r6, pc}
			WritingFree_IT();
 800a4ca:	f7ff fec5 	bl	800a258 <WritingFree_IT>
			break;
 800a4ce:	e7c6      	b.n	800a45e <HAL_TIM_PeriodElapsedCallback+0xa>
			Explore_IT();
 800a4d0:	f7ff fd92 	bl	8009ff8 <Explore_IT>
			break;
 800a4d4:	e7c3      	b.n	800a45e <HAL_TIM_PeriodElapsedCallback+0xa>
				Update_IMU(&AngularV, &Angle);
 800a4d6:	4e10      	ldr	r6, [pc, #64]	; (800a518 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800a4d8:	4810      	ldr	r0, [pc, #64]	; (800a51c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800a4da:	4631      	mov	r1, r6
 800a4dc:	f003 fa98 	bl	800da10 <Update_IMU>
				timer1 += t;
 800a4e0:	4b09      	ldr	r3, [pc, #36]	; (800a508 <HAL_TIM_PeriodElapsedCallback+0xb4>)
				debugVL[timer1] = Angle;
 800a4e2:	6829      	ldr	r1, [r5, #0]
 800a4e4:	4a0e      	ldr	r2, [pc, #56]	; (800a520 <HAL_TIM_PeriodElapsedCallback+0xcc>)
				timer1 += t;
 800a4e6:	681b      	ldr	r3, [r3, #0]
				debugVL[timer1] = Angle;
 800a4e8:	6830      	ldr	r0, [r6, #0]
 800a4ea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
				timer1 += t;
 800a4ee:	440b      	add	r3, r1
				debugVL[timer1] = Angle;
 800a4f0:	6010      	str	r0, [r2, #0]
				timer1 += t;
 800a4f2:	602b      	str	r3, [r5, #0]
 800a4f4:	e7b3      	b.n	800a45e <HAL_TIM_PeriodElapsedCallback+0xa>
 800a4f6:	bf00      	nop
 800a4f8:	20008e48 	.word	0x20008e48
 800a4fc:	20008c00 	.word	0x20008c00
 800a500:	2000894c 	.word	0x2000894c
 800a504:	20008954 	.word	0x20008954
 800a508:	20008948 	.word	0x20008948
 800a50c:	20007fd0 	.word	0x20007fd0
 800a510:	200089cc 	.word	0x200089cc
 800a514:	20007fdc 	.word	0x20007fdc
 800a518:	20007f38 	.word	0x20007f38
 800a51c:	20007f44 	.word	0x20007f44
 800a520:	2000022c 	.word	0x2000022c

0800a524 <flashStoreNodes>:
			}
	}
}
void flashStoreNodes()
{
	uint32_t address=start_adress_sector1;
 800a524:	4b1b      	ldr	r3, [pc, #108]	; (800a594 <flashStoreNodes+0x70>)
{
 800a526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t address=start_adress_sector1;
 800a52a:	f8d3 9000 	ldr.w	r9, [r3]
 800a52e:	f8df a068 	ldr.w	sl, [pc, #104]	; 800a598 <flashStoreNodes+0x74>
 800a532:	ebc9 78c9 	rsb	r8, r9, r9, lsl #31
 800a536:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800a53a:	464c      	mov	r4, r9
 800a53c:	2700      	movs	r7, #0
 800a53e:	eb07 0508 	add.w	r5, r7, r8

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				FLASH_Write_Word(address+0, my_map.RawNode[i][j].existence);
 800a542:	4455      	add	r5, sl
 800a544:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800a548:	f815 1014 	ldrb.w	r1, [r5, r4, lsl #1]
 800a54c:	4620      	mov	r0, r4
				address += 4;
 800a54e:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, my_map.RawNode[i][j].existence);
 800a550:	f003 f8e2 	bl	800d718 <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a554:	42b4      	cmp	r4, r6
 800a556:	d1f7      	bne.n	800a548 <flashStoreNodes+0x24>
 800a558:	3750      	adds	r7, #80	; 0x50
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a55a:	f5b7 7f34 	cmp.w	r7, #720	; 0x2d0
 800a55e:	f1a8 0850 	sub.w	r8, r8, #80	; 0x50
 800a562:	d1ec      	bne.n	800a53e <flashStoreNodes+0x1a>
 800a564:	4f0c      	ldr	r7, [pc, #48]	; (800a598 <flashStoreNodes+0x74>)
 800a566:	f509 74b4 	add.w	r4, r9, #360	; 0x168
 800a56a:	f509 7934 	add.w	r9, r9, #720	; 0x2d0
 800a56e:	f104 0624 	add.w	r6, r4, #36	; 0x24
	uint32_t address=start_adress_sector1;
 800a572:	463d      	mov	r5, r7
	//列
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				FLASH_Write_Word(address+0, my_map.ColumnNode[i][j].existence);
 800a574:	f895 12d0 	ldrb.w	r1, [r5, #720]	; 0x2d0
 800a578:	4620      	mov	r0, r4
				address += 4;
 800a57a:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, my_map.ColumnNode[i][j].existence);
 800a57c:	f003 f8cc 	bl	800d718 <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a580:	42a6      	cmp	r6, r4
 800a582:	f105 0508 	add.w	r5, r5, #8
 800a586:	d1f5      	bne.n	800a574 <flashStoreNodes+0x50>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a588:	454e      	cmp	r6, r9
 800a58a:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800a58e:	d1ee      	bne.n	800a56e <flashStoreNodes+0x4a>
			}
	}
}
 800a590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a594:	08019298 	.word	0x08019298
 800a598:	200083a8 	.word	0x200083a8

0800a59c <wall_init>:
void wall_init(){
 800a59c:	4920      	ldr	r1, [pc, #128]	; (800a620 <wall_init+0x84>)
 800a59e:	b470      	push	{r4, r5, r6}

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800a5a0:	2500      	movs	r5, #0
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
				Wall[i][j].north = UNKNOWN;
 800a5a2:	24aa      	movs	r4, #170	; 0xaa
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a5a4:	2300      	movs	r3, #0
				Wall[i][j].north = UNKNOWN;
 800a5a6:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800a5aa:	18c2      	adds	r2, r0, r3
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	2b09      	cmp	r3, #9
				Wall[i][j].north = UNKNOWN;
 800a5b0:	f801 4012 	strb.w	r4, [r1, r2, lsl #1]
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a5b4:	d1f9      	bne.n	800a5aa <wall_init+0xe>
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800a5b6:	3501      	adds	r5, #1
 800a5b8:	2d09      	cmp	r5, #9
 800a5ba:	d1f3      	bne.n	800a5a4 <wall_init+0x8>

			}
	}

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800a5bc:	2300      	movs	r3, #0
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800a5be:	2201      	movs	r2, #1
 800a5c0:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
 800a5c4:	eb01 0540 	add.w	r5, r1, r0, lsl #1
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800a5c8:	f103 0448 	add.w	r4, r3, #72	; 0x48
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800a5cc:	7c2e      	ldrb	r6, [r5, #16]
 800a5ce:	f362 0601 	bfi	r6, r2, #0, #2
 800a5d2:	742e      	strb	r6, [r5, #16]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800a5d4:	f811 5014 	ldrb.w	r5, [r1, r4, lsl #1]
 800a5d8:	f362 0583 	bfi	r5, r2, #2, #2
 800a5dc:	f801 5014 	strb.w	r5, [r1, r4, lsl #1]
		Wall[n][0].south = WALL;
 800a5e0:	f811 4010 	ldrb.w	r4, [r1, r0, lsl #1]
 800a5e4:	f362 1405 	bfi	r4, r2, #4, #2
 800a5e8:	f801 4010 	strb.w	r4, [r1, r0, lsl #1]
		Wall[0][n].west = WALL;
 800a5ec:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 800a5f0:	f362 1087 	bfi	r0, r2, #6, #2
 800a5f4:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	2b09      	cmp	r3, #9
 800a5fc:	d1e0      	bne.n	800a5c0 <wall_init+0x24>
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
 800a5fe:	780b      	ldrb	r3, [r1, #0]
	Wall[0][0].north = NOWALL;
	Wall[1][0].west = WALL;
 800a600:	7c8c      	ldrb	r4, [r1, #18]
	Wall[0][1].south = NOWALL;
 800a602:	7888      	ldrb	r0, [r1, #2]
	Wall[0][0].east = WALL;
 800a604:	f362 0383 	bfi	r3, r2, #2, #2
	Wall[1][0].west = WALL;
 800a608:	f362 1487 	bfi	r4, r2, #6, #2
	Wall[0][0].north = NOWALL;
 800a60c:	f36f 0301 	bfc	r3, #0, #2
	Wall[0][1].south = NOWALL;
 800a610:	f36f 1005 	bfc	r0, #4, #2
	Wall[1][0].west = WALL;
 800a614:	748c      	strb	r4, [r1, #18]
	Wall[0][0].north = NOWALL;
 800a616:	700b      	strb	r3, [r1, #0]
	Wall[0][1].south = NOWALL;
 800a618:	7088      	strb	r0, [r1, #2]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800a61a:	bc70      	pop	{r4, r5, r6}
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	20008b54 	.word	0x20008b54

0800a624 <flashCopyNodesToRam>:
	}

}
//評価値マップ生成。
void flashCopyNodesToRam()
{
 800a624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t address=start_adress_sector1;
 800a628:	4b21      	ldr	r3, [pc, #132]	; (800a6b0 <flashCopyNodesToRam+0x8c>)
 800a62a:	f8df b088 	ldr.w	fp, [pc, #136]	; 800a6b4 <flashCopyNodesToRam+0x90>
 800a62e:	f8d3 a000 	ldr.w	sl, [r3]
 800a632:	f04f 0800 	mov.w	r8, #0
 800a636:	ebca 79ca 	rsb	r9, sl, sl, lsl #31
{
 800a63a:	b083      	sub	sp, #12
 800a63c:	ea4f 0949 	mov.w	r9, r9, lsl #1
	uint32_t address=start_adress_sector1;
 800a640:	4654      	mov	r4, sl

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				uint32_t wall_data=0;
 800a642:	4647      	mov	r7, r8
 800a644:	eb08 0509 	add.w	r5, r8, r9
				FLASH_Read_Word(address, &wall_data);
				my_map.RawNode[i][j].existence = wall_data;
 800a648:	445d      	add	r5, fp
 800a64a:	f104 0628 	add.w	r6, r4, #40	; 0x28
				FLASH_Read_Word(address, &wall_data);
 800a64e:	4620      	mov	r0, r4
 800a650:	a901      	add	r1, sp, #4
				uint32_t wall_data=0;
 800a652:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800a654:	f003 f888 	bl	800d768 <FLASH_Read_Word>
				my_map.RawNode[i][j].existence = wall_data;
 800a658:	9b01      	ldr	r3, [sp, #4]
 800a65a:	f805 3014 	strb.w	r3, [r5, r4, lsl #1]
				address += 4;
 800a65e:	3404      	adds	r4, #4
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a660:	42b4      	cmp	r4, r6
 800a662:	d1f4      	bne.n	800a64e <flashCopyNodesToRam+0x2a>
 800a664:	f108 0850 	add.w	r8, r8, #80	; 0x50
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a668:	f5b8 7f34 	cmp.w	r8, #720	; 0x2d0
 800a66c:	f1a9 0950 	sub.w	r9, r9, #80	; 0x50
 800a670:	d1e8      	bne.n	800a644 <flashCopyNodesToRam+0x20>
 800a672:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800a6b4 <flashCopyNodesToRam+0x90>
 800a676:	f50a 74b4 	add.w	r4, sl, #360	; 0x168
	}
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				uint32_t wall_data=0;
 800a67a:	2700      	movs	r7, #0
 800a67c:	f50a 7a34 	add.w	sl, sl, #720	; 0x2d0
 800a680:	f104 0624 	add.w	r6, r4, #36	; 0x24
	uint32_t address=start_adress_sector1;
 800a684:	4645      	mov	r5, r8
				FLASH_Read_Word(address, &wall_data);
 800a686:	4620      	mov	r0, r4
 800a688:	a901      	add	r1, sp, #4
				my_map.ColumnNode[i][j].existence = wall_data;
				address += 4;
 800a68a:	3404      	adds	r4, #4
				uint32_t wall_data=0;
 800a68c:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800a68e:	f003 f86b 	bl	800d768 <FLASH_Read_Word>
				my_map.ColumnNode[i][j].existence = wall_data;
 800a692:	9b01      	ldr	r3, [sp, #4]
 800a694:	f885 32d0 	strb.w	r3, [r5, #720]	; 0x2d0
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a698:	42a6      	cmp	r6, r4
 800a69a:	f105 0508 	add.w	r5, r5, #8
 800a69e:	d1f2      	bne.n	800a686 <flashCopyNodesToRam+0x62>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a6a0:	4556      	cmp	r6, sl
 800a6a2:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800a6a6:	d1eb      	bne.n	800a680 <flashCopyNodesToRam+0x5c>
			}
	}
}
 800a6a8:	b003      	add	sp, #12
 800a6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ae:	bf00      	nop
 800a6b0:	08019298 	.word	0x08019298
 800a6b4:	200083a8 	.word	0x200083a8

0800a6b8 <printAllWeight>:
        printf("[北 東 南 西] = [%u %u %u %u]\r\n", route[k].wall.north, route[k].wall.east, route[k].wall.south, route[k].wall.west);
        printf("\r\n");
    }
}
void printAllWeight(maze_node *maze, position *pos)
{
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	b085      	sub	sp, #20
 800a6be:	4606      	mov	r6, r0
 800a6c0:	9003      	str	r0, [sp, #12]
    //全出力を3桁にそろえればよさそう
    //重みが0かつゴールエリア内の座標なら赤色で出力 31;1m
    //行から表示して、
    //列を表示
    //交互に
    printf("全ノードの重み\r\n");
 800a6c2:	4852      	ldr	r0, [pc, #328]	; (800a80c <printAllWeight+0x154>)

    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
    {
        //行
        printf("  +  ");
 800a6c4:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800a81c <printAllWeight+0x164>
            {
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
            }
            else
            {
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a6c8:	4d51      	ldr	r5, [pc, #324]	; (800a810 <printAllWeight+0x158>)
            else
            {
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
            }
            if(x < NUMBER_OF_SQUARES_X)
                printf("     ");
 800a6ca:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800a820 <printAllWeight+0x168>
{
 800a6ce:	460c      	mov	r4, r1
    printf("全ノードの重み\r\n");
 800a6d0:	f00b f854 	bl	801577c <puts>
 800a6d4:	4633      	mov	r3, r6
 800a6d6:	3340      	adds	r3, #64	; 0x40
 800a6d8:	9301      	str	r3, [sp, #4]
 800a6da:	2301      	movs	r3, #1
 800a6dc:	9300      	str	r3, [sp, #0]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800a6de:	2709      	movs	r7, #9
        printf("  +  ");
 800a6e0:	4648      	mov	r0, r9
 800a6e2:	f00a ffc3 	bl	801566c <iprintf>
 800a6e6:	9b01      	ldr	r3, [sp, #4]
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800a6e8:	f04f 0b00 	mov.w	fp, #0
 800a6ec:	f103 0608 	add.w	r6, r3, #8
 800a6f0:	e010      	b.n	800a714 <printAllWeight+0x5c>
            if(judgeRawNodeGoal(maze, x,y) == true || ((pos->x == x) && (pos->y == y)))//辿った経路を赤で表示
 800a6f2:	7823      	ldrb	r3, [r4, #0]
 800a6f4:	455b      	cmp	r3, fp
 800a6f6:	d102      	bne.n	800a6fe <printAllWeight+0x46>
 800a6f8:	7863      	ldrb	r3, [r4, #1]
 800a6fa:	42bb      	cmp	r3, r7
 800a6fc:	d018      	beq.n	800a730 <printAllWeight+0x78>
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a6fe:	f00a ffb5 	bl	801566c <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800a702:	f1bb 0f08 	cmp.w	fp, #8
                 printf("  +  ");
 800a706:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800a708:	d01a      	beq.n	800a740 <printAllWeight+0x88>
                 printf("  +  ");
 800a70a:	f00a ffaf 	bl	801566c <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800a70e:	f10b 0b01 	add.w	fp, fp, #1
 800a712:	3650      	adds	r6, #80	; 0x50
    if(maze->RawNode[x][y].weight == 0)
 800a714:	8872      	ldrh	r2, [r6, #2]
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800a716:	f1ab 0307 	sub.w	r3, fp, #7
 800a71a:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a71c:	4611      	mov	r1, r2
 800a71e:	4628      	mov	r0, r5
    if(maze->RawNode[x][y].weight == 0)
 800a720:	2a00      	cmp	r2, #0
 800a722:	d1e6      	bne.n	800a6f2 <printAllWeight+0x3a>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800a724:	2b01      	cmp	r3, #1
 800a726:	d8e4      	bhi.n	800a6f2 <printAllWeight+0x3a>
 800a728:	1ffb      	subs	r3, r7, #7
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d8e0      	bhi.n	800a6f2 <printAllWeight+0x3a>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
 800a730:	4611      	mov	r1, r2
 800a732:	4838      	ldr	r0, [pc, #224]	; (800a814 <printAllWeight+0x15c>)
 800a734:	f00a ff9a 	bl	801566c <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800a738:	f1bb 0f08 	cmp.w	fp, #8
                 printf("  +  ");
 800a73c:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800a73e:	d1e4      	bne.n	800a70a <printAllWeight+0x52>
 800a740:	1e7b      	subs	r3, r7, #1
 800a742:	461e      	mov	r6, r3
        printf("\r\n");
 800a744:	4834      	ldr	r0, [pc, #208]	; (800a818 <printAllWeight+0x160>)
 800a746:	9302      	str	r3, [sp, #8]
 800a748:	f00b f818 	bl	801577c <puts>
 800a74c:	4633      	mov	r3, r6
 800a74e:	b2f6      	uxtb	r6, r6
 800a750:	1af6      	subs	r6, r6, r3
 800a752:	00f6      	lsls	r6, r6, #3
 800a754:	f8dd a004 	ldr.w	sl, [sp, #4]
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800a758:	f04f 0b00 	mov.w	fp, #0
 800a75c:	e00d      	b.n	800a77a <printAllWeight+0xc2>
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800a75e:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800a762:	f00a ff83 	bl	801566c <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800a766:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800a76a:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800a76c:	d022      	beq.n	800a7b4 <printAllWeight+0xfc>
                printf("     ");
 800a76e:	f00a ff7d 	bl	801566c <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800a772:	f10b 0b01 	add.w	fp, fp, #1
 800a776:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
    if(maze->ColumnNode[x][y].weight == 0)
 800a77a:	eb0a 0106 	add.w	r1, sl, r6
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a77e:	f1ab 0307 	sub.w	r3, fp, #7
    if(maze->ColumnNode[x][y].weight == 0)
 800a782:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a786:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800a788:	4628      	mov	r0, r5
    if(maze->ColumnNode[x][y].weight == 0)
 800a78a:	b921      	cbnz	r1, 800a796 <printAllWeight+0xde>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d802      	bhi.n	800a796 <printAllWeight+0xde>
 800a790:	9b00      	ldr	r3, [sp, #0]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d905      	bls.n	800a7a2 <printAllWeight+0xea>
            if(judgeColumnNodeGoal(maze, x,y-1) == true || ((pos->x == x) && (pos->y == y)))
 800a796:	7823      	ldrb	r3, [r4, #0]
 800a798:	455b      	cmp	r3, fp
 800a79a:	d1e0      	bne.n	800a75e <printAllWeight+0xa6>
 800a79c:	7863      	ldrb	r3, [r4, #1]
 800a79e:	42bb      	cmp	r3, r7
 800a7a0:	d1dd      	bne.n	800a75e <printAllWeight+0xa6>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->ColumnNode[x][y-1].weight);
 800a7a2:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800a7a6:	481b      	ldr	r0, [pc, #108]	; (800a814 <printAllWeight+0x15c>)
 800a7a8:	f00a ff60 	bl	801566c <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800a7ac:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800a7b0:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800a7b2:	d1dc      	bne.n	800a76e <printAllWeight+0xb6>
        }
        printf("\r\n");
 800a7b4:	4818      	ldr	r0, [pc, #96]	; (800a818 <printAllWeight+0x160>)
 800a7b6:	f00a ffe1 	bl	801577c <puts>
 800a7ba:	9b00      	ldr	r3, [sp, #0]
 800a7bc:	9f02      	ldr	r7, [sp, #8]
 800a7be:	f103 3aff 	add.w	sl, r3, #4294967295
 800a7c2:	9b01      	ldr	r3, [sp, #4]
 800a7c4:	3b08      	subs	r3, #8
 800a7c6:	9301      	str	r3, [sp, #4]
 800a7c8:	fa5f f38a 	uxtb.w	r3, sl
 800a7cc:	9300      	str	r3, [sp, #0]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800a7ce:	2f00      	cmp	r7, #0
 800a7d0:	d186      	bne.n	800a6e0 <printAllWeight+0x28>
    }
    //y が0のときの行だけ表示
    printf("  +  ");
 800a7d2:	4812      	ldr	r0, [pc, #72]	; (800a81c <printAllWeight+0x164>)
    for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
    {
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a7d4:	4e0e      	ldr	r6, [pc, #56]	; (800a810 <printAllWeight+0x158>)
        if(x < NUMBER_OF_SQUARES_X-1)
                printf("  +  ");
 800a7d6:	4607      	mov	r7, r0
    printf("  +  ");
 800a7d8:	f00a ff48 	bl	801566c <iprintf>
 800a7dc:	9b03      	ldr	r3, [sp, #12]
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a7de:	4630      	mov	r0, r6
 800a7e0:	8859      	ldrh	r1, [r3, #2]
 800a7e2:	461c      	mov	r4, r3
 800a7e4:	f00a ff42 	bl	801566c <iprintf>
 800a7e8:	f504 7520 	add.w	r5, r4, #640	; 0x280
                printf("  +  ");
 800a7ec:	4638      	mov	r0, r7
 800a7ee:	f00a ff3d 	bl	801566c <iprintf>
 800a7f2:	3450      	adds	r4, #80	; 0x50
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a7f4:	8861      	ldrh	r1, [r4, #2]
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	f00a ff38 	bl	801566c <iprintf>
        if(x < NUMBER_OF_SQUARES_X-1)
 800a7fc:	42ac      	cmp	r4, r5
 800a7fe:	d1f5      	bne.n	800a7ec <printAllWeight+0x134>
    }
    printf("\r\n");
 800a800:	4805      	ldr	r0, [pc, #20]	; (800a818 <printAllWeight+0x160>)
    
    
}
 800a802:	b005      	add	sp, #20
 800a804:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800a808:	f00a bfb8 	b.w	801577c <puts>
 800a80c:	08019054 	.word	0x08019054
 800a810:	08019088 	.word	0x08019088
 800a814:	08019074 	.word	0x08019074
 800a818:	080193d4 	.word	0x080193d4
 800a81c:	0801906c 	.word	0x0801906c
 800a820:	08019090 	.word	0x08019090

0800a824 <initWeight>:
            maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].draw == true) ? MAX_WEIGHT : 0;     //西
        }
    }
}
void initWeight(maze_node *maze)
{
 800a824:	b410      	push	{r4}
 800a826:	4603      	mov	r3, r0
 800a828:	f500 7434 	add.w	r4, r0, #720	; 0x2d0
    // }
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800a82c:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a830:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800a834:	8059      	strh	r1, [r3, #2]
 800a836:	3308      	adds	r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d1fb      	bne.n	800a834 <initWeight+0x10>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a83c:	42a3      	cmp	r3, r4
 800a83e:	d1f7      	bne.n	800a830 <initWeight+0xc>
    }
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800a840:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a844:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800a848:	f8a0 12d2 	strh.w	r1, [r0, #722]	; 0x2d2
 800a84c:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a84e:	4282      	cmp	r2, r0
 800a850:	d1fa      	bne.n	800a848 <initWeight+0x24>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a852:	429a      	cmp	r2, r3
 800a854:	d1f6      	bne.n	800a844 <initWeight+0x20>
        }
    }
}
 800a856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <initMaze>:
void initMaze(maze_node *maze) //重みは別で初期化
{
 800a85c:	b5f0      	push	{r4, r5, r6, r7, lr}
    //まず未探索状態にする
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a85e:	2700      	movs	r7, #0
 800a860:	4604      	mov	r4, r0
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a862:	4684      	mov	ip, r0
        {
            maze->RawNode[i][j].existence = UNKNOWN;
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800a864:	4639      	mov	r1, r7
            maze->RawNode[i][j].existence = UNKNOWN;
 800a866:	2602      	movs	r6, #2
 800a868:	b2fd      	uxtb	r5, r7
{
 800a86a:	4663      	mov	r3, ip
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a86c:	2201      	movs	r2, #1
            maze->RawNode[i][j].rc = 0;
            maze->RawNode[i][j].pos.x = i;
            maze->RawNode[i][j].pos.y = j;
 800a86e:	73da      	strb	r2, [r3, #15]
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a870:	3201      	adds	r2, #1
 800a872:	2a09      	cmp	r2, #9
            maze->RawNode[i][j].existence = UNKNOWN;
 800a874:	721e      	strb	r6, [r3, #8]
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800a876:	7319      	strb	r1, [r3, #12]
            maze->RawNode[i][j].rc = 0;
 800a878:	7359      	strb	r1, [r3, #13]
            maze->RawNode[i][j].pos.x = i;
 800a87a:	739d      	strb	r5, [r3, #14]
 800a87c:	f103 0308 	add.w	r3, r3, #8
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a880:	d1f5      	bne.n	800a86e <initMaze+0x12>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a882:	3701      	adds	r7, #1
 800a884:	2f09      	cmp	r7, #9
 800a886:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800a88a:	d1ed      	bne.n	800a868 <initMaze+0xc>
        }
    }
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800a88c:	f04f 0c01 	mov.w	ip, #1
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].existence = UNKNOWN;
            maze->ColumnNode[i][j].draw = false;
            maze->ColumnNode[i][j].rc = 1;
 800a890:	4667      	mov	r7, ip
 800a892:	f100 0e48 	add.w	lr, r0, #72	; 0x48
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800a896:	2602      	movs	r6, #2
            maze->ColumnNode[i][j].draw = false;
 800a898:	2500      	movs	r5, #0
 800a89a:	fa5f f18c 	uxtb.w	r1, ip
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a89e:	4673      	mov	r3, lr
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a8a0:	2200      	movs	r2, #0
            maze->ColumnNode[i][j].pos.x = i;
            maze->ColumnNode[i][j].pos.y = j;
 800a8a2:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a8a6:	3201      	adds	r2, #1
 800a8a8:	2a09      	cmp	r2, #9
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800a8aa:	f883 62d0 	strb.w	r6, [r3, #720]	; 0x2d0
            maze->ColumnNode[i][j].draw = false;
 800a8ae:	f883 52d4 	strb.w	r5, [r3, #724]	; 0x2d4
            maze->ColumnNode[i][j].rc = 1;
 800a8b2:	f883 72d5 	strb.w	r7, [r3, #725]	; 0x2d5
            maze->ColumnNode[i][j].pos.x = i;
 800a8b6:	f883 12d6 	strb.w	r1, [r3, #726]	; 0x2d6
 800a8ba:	f103 0308 	add.w	r3, r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a8be:	d1f0      	bne.n	800a8a2 <initMaze+0x46>
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800a8c0:	f10c 0c01 	add.w	ip, ip, #1
 800a8c4:	f1bc 0f09 	cmp.w	ip, #9
 800a8c8:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 800a8cc:	d1e5      	bne.n	800a89a <initMaze+0x3e>
        }
    }
    
    // 壁の有無を初期化
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a8ce:	2200      	movs	r2, #0
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1

        maze->RawNode[i][0].draw = true;                        
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;

        maze->RawNode[i][0].rc = 0;
 800a8d0:	4616      	mov	r6, r2
 800a8d2:	4603      	mov	r3, r0
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800a8d4:	2101      	movs	r1, #1
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;

        maze->RawNode[i][0].pos.x = i;
 800a8d6:	b2d5      	uxtb	r5, r2
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a8d8:	3201      	adds	r2, #1
 800a8da:	2a09      	cmp	r2, #9
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800a8dc:	7019      	strb	r1, [r3, #0]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1
 800a8de:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
        maze->RawNode[i][0].draw = true;                        
 800a8e2:	7119      	strb	r1, [r3, #4]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;
 800a8e4:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
        maze->RawNode[i][0].rc = 0;
 800a8e8:	715e      	strb	r6, [r3, #5]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;
 800a8ea:	f883 604d 	strb.w	r6, [r3, #77]	; 0x4d
        maze->RawNode[i][0].pos.y = NUMBER_OF_SQUARES_Y;
 800a8ee:	f883 c007 	strb.w	ip, [r3, #7]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.y = NUMBER_OF_SQUARES_Y;
 800a8f2:	f883 c04f 	strb.w	ip, [r3, #79]	; 0x4f
        maze->RawNode[i][0].pos.x = i;
 800a8f6:	719d      	strb	r5, [r3, #6]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
 800a8f8:	f883 504e 	strb.w	r5, [r3, #78]	; 0x4e
 800a8fc:	f103 0350 	add.w	r3, r3, #80	; 0x50
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a900:	d1e9      	bne.n	800a8d6 <initMaze+0x7a>
    }
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a902:	2100      	movs	r1, #0
    {
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800a904:	2301      	movs	r3, #1

        maze->ColumnNode[0][j].rc = 1;
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;

        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
        maze->ColumnNode[0][j].pos.y = j;
 800a906:	b2cd      	uxtb	r5, r1
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a908:	3101      	adds	r1, #1
 800a90a:	2909      	cmp	r1, #9
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800a90c:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].existence = WALL;  //東壁すべて1
 800a910:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
        maze->ColumnNode[0][j].draw = true;                    
 800a914:	f884 32d4 	strb.w	r3, [r4, #724]	; 0x2d4
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;
 800a918:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
        maze->ColumnNode[0][j].rc = 1;
 800a91c:	f884 32d5 	strb.w	r3, [r4, #725]	; 0x2d5
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;
 800a920:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
 800a924:	f884 22d6 	strb.w	r2, [r4, #726]	; 0x2d6
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
 800a928:	f884 255e 	strb.w	r2, [r4, #1374]	; 0x55e
        maze->ColumnNode[0][j].pos.y = j;
 800a92c:	f884 52d7 	strb.w	r5, [r4, #727]	; 0x2d7
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.y = j;
 800a930:	f884 555f 	strb.w	r5, [r4, #1375]	; 0x55f
 800a934:	f104 0408 	add.w	r4, r4, #8
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a938:	d1e5      	bne.n	800a906 <initMaze+0xaa>
    }
    maze->ColumnNode[1][0].existence = WALL;    //東1
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800a93a:	2200      	movs	r2, #0
    maze->ColumnNode[1][0].existence = WALL;    //東1
 800a93c:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318

    maze->ColumnNode[1][0].draw = true;    //東1
 800a940:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800a944:	7202      	strb	r2, [r0, #8]
    maze->RawNode[0][1].draw = false;     //北0
 800a946:	7302      	strb	r2, [r0, #12]
}
 800a948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94a:	bf00      	nop

0800a94c <printAllNodeExistence>:
        printf("\r\n");
    }
    printf("\r\n");
}
void printAllNodeExistence(maze_node *mn)
{
 800a94c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a950:	4680      	mov	r8, r0
 800a952:	4605      	mov	r5, r0
    printf("全ノードの壁の存在\r\n");
 800a954:	481a      	ldr	r0, [pc, #104]	; (800a9c0 <printAllNodeExistence+0x74>)
    //行を増やして同じ処理
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            printf("%u,",mn->RawNode[i][j].existence);
 800a956:	4f1b      	ldr	r7, [pc, #108]	; (800a9c4 <printAllNodeExistence+0x78>)
        }
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800a958:	4e1b      	ldr	r6, [pc, #108]	; (800a9c8 <printAllNodeExistence+0x7c>)
            if(j < NUMBER_OF_SQUARES_Y-1)
                printf(",");
        }
        printf("\r\n");
 800a95a:	f8df a070 	ldr.w	sl, [pc, #112]	; 800a9cc <printAllNodeExistence+0x80>
 800a95e:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800a962:	f505 7934 	add.w	r9, r5, #720	; 0x2d0
    printf("全ノードの壁の存在\r\n");
 800a966:	f00a ff09 	bl	801577c <puts>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a96a:	2401      	movs	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800a96c:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 800a970:	4638      	mov	r0, r7
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a972:	3401      	adds	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800a974:	f00a fe7a 	bl	801566c <iprintf>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a978:	2c0a      	cmp	r4, #10
 800a97a:	d1f7      	bne.n	800a96c <printAllNodeExistence+0x20>
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800a97c:	f898 12d0 	ldrb.w	r1, [r8, #720]	; 0x2d0
 800a980:	4630      	mov	r0, r6
 800a982:	f00a fe73 	bl	801566c <iprintf>
 800a986:	f108 0b40 	add.w	fp, r8, #64	; 0x40
 800a98a:	4644      	mov	r4, r8
                printf(",");
 800a98c:	202c      	movs	r0, #44	; 0x2c
 800a98e:	f00a fe85 	bl	801569c <putchar>
 800a992:	3408      	adds	r4, #8
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800a994:	f894 12d0 	ldrb.w	r1, [r4, #720]	; 0x2d0
 800a998:	4630      	mov	r0, r6
 800a99a:	f00a fe67 	bl	801566c <iprintf>
            if(j < NUMBER_OF_SQUARES_Y-1)
 800a99e:	455c      	cmp	r4, fp
 800a9a0:	d1f4      	bne.n	800a98c <printAllNodeExistence+0x40>
 800a9a2:	f108 0848 	add.w	r8, r8, #72	; 0x48
        printf("\r\n");
 800a9a6:	4650      	mov	r0, sl
 800a9a8:	f00a fee8 	bl	801577c <puts>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a9ac:	45c8      	cmp	r8, r9
 800a9ae:	f105 0550 	add.w	r5, r5, #80	; 0x50
 800a9b2:	d1da      	bne.n	800a96a <printAllNodeExistence+0x1e>
    }
    printf("\r\n");
 800a9b4:	4805      	ldr	r0, [pc, #20]	; (800a9cc <printAllNodeExistence+0x80>)
}
 800a9b6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800a9ba:	f00a bedf 	b.w	801577c <puts>
 800a9be:	bf00      	nop
 800a9c0:	08019034 	.word	0x08019034
 800a9c4:	0801902c 	.word	0x0801902c
 800a9c8:	08019030 	.word	0x08019030
 800a9cc:	080193d4 	.word	0x080193d4

0800a9d0 <printMatrix16ValueFromNode>:
    return val;
}

//機体からTeraTermで出力するための関数
void printMatrix16ValueFromNode(maze_node *maze)
{
 800a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	b083      	sub	sp, #12
    printf("機体からTeraTermへの出力用\r\n");
 800a9d8:	4822      	ldr	r0, [pc, #136]	; (800aa64 <printMatrix16ValueFromNode+0x94>)
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
    {
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
        {
            printf("%u",convertNodeTo16Value(maze, i,j));
 800a9da:	4e23      	ldr	r6, [pc, #140]	; (800aa68 <printMatrix16ValueFromNode+0x98>)
    printf("機体からTeraTermへの出力用\r\n");
 800a9dc:	f00a fece 	bl	801577c <puts>
 800a9e0:	f04f 0809 	mov.w	r8, #9
 800a9e4:	f104 0348 	add.w	r3, r4, #72	; 0x48
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800a9e8:	f04f 0908 	mov.w	r9, #8
 800a9ec:	f1a3 0208 	sub.w	r2, r3, #8
 800a9f0:	eba9 0408 	sub.w	r4, r9, r8
 800a9f4:	9201      	str	r2, [sp, #4]
 800a9f6:	4692      	mov	sl, r2
 800a9f8:	00e4      	lsls	r4, r4, #3
 800a9fa:	f503 7520 	add.w	r5, r3, #640	; 0x280
 800a9fe:	f503 7734 	add.w	r7, r3, #720	; 0x2d0
{
 800aa02:	469b      	mov	fp, r3
 800aa04:	e003      	b.n	800aa0e <printMatrix16ValueFromNode+0x3e>
            if(i < NUMBER_OF_SQUARES_X-1)
                printf(",");
 800aa06:	f00a fe49 	bl	801569c <putchar>
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800aa0a:	455f      	cmp	r7, fp
 800aa0c:	d01b      	beq.n	800aa46 <printMatrix16ValueFromNode+0x76>
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800aa0e:	f89a 12d4 	ldrb.w	r1, [sl, #724]	; 0x2d4
    val += 2 * maze->ColumnNode[x+1][y].draw;   //東
 800aa12:	f89a e31c 	ldrb.w	lr, [sl, #796]	; 0x31c
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800aa16:	f89b 0004 	ldrb.w	r0, [fp, #4]
    val += 4 * maze->RawNode[x][y].draw;        //南
 800aa1a:	eb0b 0c04 	add.w	ip, fp, r4
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800aa1e:	00c9      	lsls	r1, r1, #3
 800aa20:	eb01 014e 	add.w	r1, r1, lr, lsl #1
    val += 4 * maze->RawNode[x][y].draw;        //南
 800aa24:	f89c c004 	ldrb.w	ip, [ip, #4]
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800aa28:	4401      	add	r1, r0
 800aa2a:	eb01 018c 	add.w	r1, r1, ip, lsl #2
            printf("%u",convertNodeTo16Value(maze, i,j));
 800aa2e:	b2c9      	uxtb	r1, r1
 800aa30:	4630      	mov	r0, r6
 800aa32:	f00a fe1b 	bl	801566c <iprintf>
            if(i < NUMBER_OF_SQUARES_X-1)
 800aa36:	455d      	cmp	r5, fp
                printf(",");
 800aa38:	f04f 002c 	mov.w	r0, #44	; 0x2c
 800aa3c:	f10b 0b50 	add.w	fp, fp, #80	; 0x50
 800aa40:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
            if(i < NUMBER_OF_SQUARES_X-1)
 800aa44:	d1df      	bne.n	800aa06 <printMatrix16ValueFromNode+0x36>
        }
        printf("\r\n");
 800aa46:	4809      	ldr	r0, [pc, #36]	; (800aa6c <printMatrix16ValueFromNode+0x9c>)
 800aa48:	f00a fe98 	bl	801577c <puts>
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800aa4c:	f1b8 0801 	subs.w	r8, r8, #1
 800aa50:	f109 39ff 	add.w	r9, r9, #4294967295
 800aa54:	9b01      	ldr	r3, [sp, #4]
 800aa56:	d1c9      	bne.n	800a9ec <printMatrix16ValueFromNode+0x1c>
    }
    printf("\r\n");
 800aa58:	4804      	ldr	r0, [pc, #16]	; (800aa6c <printMatrix16ValueFromNode+0x9c>)

}
 800aa5a:	b003      	add	sp, #12
 800aa5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800aa60:	f00a be8c 	b.w	801577c <puts>
 800aa64:	08019098 	.word	0x08019098
 800aa68:	08019030 	.word	0x08019030
 800aa6c:	080193d4 	.word	0x080193d4

0800aa70 <updateNodeThree>:


//壁があれば重みはデフォルト値を代入する
//壁がなければそのままにしておく 前左右の情報の方角に合わせた変換は別のところで
void updateNodeThree(maze_node *maze, state *st, uint8_t x, uint8_t y)
{
 800aa70:	b5f0      	push	{r4, r5, r6, r7, lr}
    //壁の有無の更新。既知の壁には上書きしない。重みの更新は？既知かどうかは重複するから書かない
        //重みは？壁があればMAX値、なければそのまま   
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800aa72:	0094      	lsls	r4, r2, #2
 800aa74:	1c5f      	adds	r7, r3, #1
 800aa76:	18a5      	adds	r5, r4, r2
 800aa78:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 800aa7c:	18a6      	adds	r6, r4, r2
 800aa7e:	f810 c035 	ldrb.w	ip, [r0, r5, lsl #3]
 800aa82:	f1bc 0f02 	cmp.w	ip, #2
 800aa86:	bf08      	it	eq
 800aa88:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800aa8c:	f102 0501 	add.w	r5, r2, #1
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800aa90:	eb07 0646 	add.w	r6, r7, r6, lsl #1
 800aa94:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800aa98:	bf08      	it	eq
 800aa9a:	f00c 0c03 	andeq.w	ip, ip, #3
 800aa9e:	441d      	add	r5, r3
 800aaa0:	f800 c036 	strb.w	ip, [r0, r6, lsl #3]
 800aaa4:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800aaa8:	eb04 0c02 	add.w	ip, r4, r2
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800aaac:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800aab0:	2e02      	cmp	r6, #2
 800aab2:	bf08      	it	eq
 800aab4:	790e      	ldrbeq	r6, [r1, #4]
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800aab6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800aaba:	bf08      	it	eq
 800aabc:	f3c6 0681 	ubfxeq	r6, r6, #2, #2
 800aac0:	f885 62d0 	strb.w	r6, [r5, #720]	; 0x2d0
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800aac4:	f810 c03c 	ldrb.w	ip, [r0, ip, lsl #3]
 800aac8:	f1bc 0f02 	cmp.w	ip, #2
 800aacc:	bf08      	it	eq
 800aace:	f891 c004 	ldrbeq.w	ip, [r1, #4]
 800aad2:	eb04 0e02 	add.w	lr, r4, r2
 800aad6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 800aada:	f04f 0609 	mov.w	r6, #9
 800aade:	bf08      	it	eq
 800aae0:	f3cc 1c01 	ubfxeq	ip, ip, #4, #2
 800aae4:	fb16 3602 	smlabb	r6, r6, r2, r3
 800aae8:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 800aaec:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
    // maze->RawNode[x][y+1].flag = true;      //北
    // maze->ColumnNode[x+1][y].flag = true;   //東
    // maze->RawNode[x][y].flag = true;        //南
    // maze->ColumnNode[x][y].flag = true;     //西

    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800aaf0:	4414      	add	r4, r2
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800aaf2:	f896 c2d0 	ldrb.w	ip, [r6, #720]	; 0x2d0
 800aaf6:	f1bc 0f02 	cmp.w	ip, #2
 800aafa:	bf08      	it	eq
 800aafc:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800ab00:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ab04:	eb04 0207 	add.w	r2, r4, r7
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800ab08:	bf08      	it	eq
 800ab0a:	ea4f 1c9c 	moveq.w	ip, ip, lsr #6
 800ab0e:	f886 c2d0 	strb.w	ip, [r6, #720]	; 0x2d0
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800ab12:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800ab16:	f1a1 0101 	sub.w	r1, r1, #1
 800ab1a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800ab1e:	fab1 f181 	clz	r1, r1
 800ab22:	0949      	lsrs	r1, r1, #5
 800ab24:	7111      	strb	r1, [r2, #4]
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800ab26:	f895 22d0 	ldrb.w	r2, [r5, #720]	; 0x2d0
 800ab2a:	f1a2 0201 	sub.w	r2, r2, #1
 800ab2e:	fab2 f282 	clz	r2, r2
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800ab32:	4423      	add	r3, r4
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800ab34:	0952      	lsrs	r2, r2, #5
 800ab36:	f885 22d4 	strb.w	r2, [r5, #724]	; 0x2d4
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800ab3a:	f810 2033 	ldrb.w	r2, [r0, r3, lsl #3]
 800ab3e:	f1a2 0201 	sub.w	r2, r2, #1
 800ab42:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ab46:	fab2 f282 	clz	r2, r2
 800ab4a:	0952      	lsrs	r2, r2, #5
 800ab4c:	711a      	strb	r2, [r3, #4]
    maze->ColumnNode[x][y].draw = (maze->ColumnNode[x][y].existence == WALL) ? true : false;        //西
 800ab4e:	f896 32d0 	ldrb.w	r3, [r6, #720]	; 0x2d0
 800ab52:	f1a3 0301 	sub.w	r3, r3, #1
 800ab56:	fab3 f383 	clz	r3, r3
 800ab5a:	095b      	lsrs	r3, r3, #5
 800ab5c:	f886 32d4 	strb.w	r3, [r6, #724]	; 0x2d4
    //重みは毎回リセットして計算しなおすのでここでは要らない
    // maze->RawNode[x][y+1].weight = (maze->RawNode[x][y+1].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y+1].weight;             //北
    // maze->ColumnNode[x+1][y].weight = (maze->ColumnNode[x+1][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x+1][y].weight;    //東
    // maze->RawNode[x][y].weight = (maze->RawNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y].weight;                   //南
    // maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x][y].weight;          //西
}
 800ab60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab62:	bf00      	nop

0800ab64 <initTargetAreaWeight>:
//             maze->ColumnNode[x+i][y+j].weight = 0;      //西
//         }
//     }
// }
void initTargetAreaWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size_x, uint8_t target_size_y)
{
 800ab64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab68:	f89d 801c 	ldrb.w	r8, [sp, #28]
    //ゴールエリアの外堀と中のノードは全て0、壁があればMAX。
    for(int i=0; i < target_size_x; i++)
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d044      	beq.n	800abfa <initTargetAreaWeight+0x96>
 800ab70:	1c4c      	adds	r4, r1, #1
 800ab72:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800ab76:	250a      	movs	r5, #10
 800ab78:	18a7      	adds	r7, r4, r2
 800ab7a:	fb15 2201 	smlabb	r2, r5, r1, r2
 800ab7e:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 800ab82:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
 800ab86:	f04f 0908 	mov.w	r9, #8
 800ab8a:	f04f 0e00 	mov.w	lr, #0
            // maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0; //東
            // maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;           //南
            // maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;     //西

        	//なぜdraw == trueでやっていたかわからない
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800ab8e:	f640 74ff 	movw	r4, #4095	; 0xfff
        for(int j=0; j < target_size_y; j++)
 800ab92:	f1b8 0f00 	cmp.w	r8, #0
 800ab96:	d028      	beq.n	800abea <initTargetAreaWeight+0x86>
 800ab98:	f1a7 0048 	sub.w	r0, r7, #72	; 0x48
 800ab9c:	fb19 7608 	smlabb	r6, r9, r8, r7
 800aba0:	4639      	mov	r1, r7
 800aba2:	4662      	mov	r2, ip
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800aba4:	7a15      	ldrb	r5, [r2, #8]
 800aba6:	2d01      	cmp	r5, #1
 800aba8:	bf14      	ite	ne
 800abaa:	2500      	movne	r5, #0
 800abac:	4625      	moveq	r5, r4
 800abae:	8155      	strh	r5, [r2, #10]
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].existence == WALL) ? MAX_WEIGHT : 0; //東
 800abb0:	f891 52d0 	ldrb.w	r5, [r1, #720]	; 0x2d0
 800abb4:	2d01      	cmp	r5, #1
 800abb6:	bf14      	ite	ne
 800abb8:	2500      	movne	r5, #0
 800abba:	4625      	moveq	r5, r4
 800abbc:	f8a1 52d2 	strh.w	r5, [r1, #722]	; 0x2d2
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;           //南
 800abc0:	7815      	ldrb	r5, [r2, #0]
 800abc2:	2d01      	cmp	r5, #1
 800abc4:	bf14      	ite	ne
 800abc6:	2500      	movne	r5, #0
 800abc8:	4625      	moveq	r5, r4
 800abca:	8055      	strh	r5, [r2, #2]
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800abcc:	f890 52d0 	ldrb.w	r5, [r0, #720]	; 0x2d0
 800abd0:	3108      	adds	r1, #8
 800abd2:	2d01      	cmp	r5, #1
 800abd4:	bf14      	ite	ne
 800abd6:	2500      	movne	r5, #0
 800abd8:	4625      	moveq	r5, r4
        for(int j=0; j < target_size_y; j++)
 800abda:	42b1      	cmp	r1, r6
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800abdc:	f8a0 52d2 	strh.w	r5, [r0, #722]	; 0x2d2
 800abe0:	f102 0208 	add.w	r2, r2, #8
 800abe4:	f100 0008 	add.w	r0, r0, #8
        for(int j=0; j < target_size_y; j++)
 800abe8:	d1dc      	bne.n	800aba4 <initTargetAreaWeight+0x40>
    for(int i=0; i < target_size_x; i++)
 800abea:	f10e 0e01 	add.w	lr, lr, #1
 800abee:	459e      	cmp	lr, r3
 800abf0:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800abf4:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800abf8:	d1cb      	bne.n	800ab92 <initTargetAreaWeight+0x2e>
        }
    }
}
 800abfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abfe:	bf00      	nop

0800ac00 <updateAllNodeWeight>:
    // setTargetWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size);
//ゴールノードを0に初期化
    // setGoalWeight(maze);
    
void updateAllNodeWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t area_size_x, uint8_t area_size_y, int mask)
{
 800ac00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac04:	b085      	sub	sp, #20
 800ac06:	4680      	mov	r8, r0
 800ac08:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 800ac0c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800ac0e:	f500 7c34 	add.w	ip, r0, #720	; 0x2d0
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800ac12:	f640 77ff 	movw	r7, #4095	; 0xfff
 800ac16:	f100 0550 	add.w	r5, r0, #80	; 0x50
 800ac1a:	8047      	strh	r7, [r0, #2]
 800ac1c:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800ac1e:	42a8      	cmp	r0, r5
 800ac20:	d1fb      	bne.n	800ac1a <updateAllNodeWeight+0x1a>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800ac22:	4560      	cmp	r0, ip
 800ac24:	d1f7      	bne.n	800ac16 <updateAllNodeWeight+0x16>
 800ac26:	4646      	mov	r6, r8
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800ac28:	f640 7cff 	movw	ip, #4095	; 0xfff
 800ac2c:	f106 0548 	add.w	r5, r6, #72	; 0x48
 800ac30:	f8a6 c2d2 	strh.w	ip, [r6, #722]	; 0x2d2
 800ac34:	3608      	adds	r6, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800ac36:	42ae      	cmp	r6, r5
 800ac38:	d1fa      	bne.n	800ac30 <updateAllNodeWeight+0x30>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800ac3a:	4286      	cmp	r6, r0
 800ac3c:	d1f6      	bne.n	800ac2c <updateAllNodeWeight+0x2c>
	//全体に154/20ms = 7.7ms
    //新しい区画に入ったときに、更新

    initWeight(maze); //3/20ms
    
    initTargetAreaWeight(maze, x,y, area_size_x,area_size_y);
 800ac3e:	f8cd e000 	str.w	lr, [sp]
 800ac42:	4640      	mov	r0, r8
 800ac44:	f7ff ff8e 	bl	800ab64 <initTargetAreaWeight>
 800ac48:	4645      	mov	r5, r8
 800ac4a:	f108 0250 	add.w	r2, r8, #80	; 0x50
 800ac4e:	9203      	str	r2, [sp, #12]
 800ac50:	f108 0e48 	add.w	lr, r8, #72	; 0x48
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
			{
                //1ノードずつ見る.そこから加算対象が最大6個
                //端を見ないので、一番上の列からスタート j=N; j >= 0, xを1からN-1まで
                //次に行 j=N-1から1まで xを0からN-1まで
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800ac54:	f640 72ff 	movw	r2, #4095	; 0xfff
 800ac58:	46ac      	mov	ip, r5
					}
                    //南西
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
					{
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
						change_flag = true;		//値が更新されたことを示す
 800ac5a:	f04f 0800 	mov.w	r8, #0
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800ac5e:	4647      	mov	r7, r8
						change_flag = true;		//値が更新されたことを示す
 800ac60:	4661      	mov	r1, ip
 800ac62:	46e2      	mov	sl, ip
 800ac64:	46c1      	mov	r9, r8
 800ac66:	f101 0848 	add.w	r8, r1, #72	; 0x48
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800ac6a:	4645      	mov	r5, r8
 800ac6c:	4653      	mov	r3, sl
 800ac6e:	2001      	movs	r0, #1
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800ac70:	895e      	ldrh	r6, [r3, #10]
 800ac72:	4296      	cmp	r6, r2
 800ac74:	d055      	beq.n	800ad22 <updateAllNodeWeight+0x122>
				if(j < NUMBER_OF_SQUARES_Y-1)   //範囲チェック. 座標のxyではなく、ノードのxy
 800ac76:	2808      	cmp	r0, #8
 800ac78:	d010      	beq.n	800ac9c <updateAllNodeWeight+0x9c>
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT) )	//壁がなければ(maskの意味はstatic_parametersを参照)
 800ac7a:	f893 b010 	ldrb.w	fp, [r3, #16]
 800ac7e:	ea1b 0f04 	tst.w	fp, r4
 800ac82:	d109      	bne.n	800ac98 <updateAllNodeWeight+0x98>
 800ac84:	f8b3 b012 	ldrh.w	fp, [r3, #18]
 800ac88:	4593      	cmp	fp, r2
 800ac8a:	d105      	bne.n	800ac98 <updateAllNodeWeight+0x98>
						maze->RawNode[i][j+1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800ac8c:	f106 0907 	add.w	r9, r6, #7
 800ac90:	f8a3 9012 	strh.w	r9, [r3, #18]
						change_flag = true;		//値が更新されたことを示す
 800ac94:	f04f 0901 	mov.w	r9, #1
				if(j > 1)						//範囲チェック.ミスってた
 800ac98:	2801      	cmp	r0, #1
 800ac9a:	d00c      	beq.n	800acb6 <updateAllNodeWeight+0xb6>
					if( ((maze->RawNode[i][j-1].existence & mask) == NOWALL) && (maze->RawNode[i][j-1].weight == MAX_WEIGHT) )	//壁がなければ
 800ac9c:	f893 b000 	ldrb.w	fp, [r3]
 800aca0:	ea1b 0f04 	tst.w	fp, r4
 800aca4:	d107      	bne.n	800acb6 <updateAllNodeWeight+0xb6>
 800aca6:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 800acaa:	4593      	cmp	fp, r2
 800acac:	d103      	bne.n	800acb6 <updateAllNodeWeight+0xb6>
						maze->RawNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800acae:	3607      	adds	r6, #7
 800acb0:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800acb2:	f04f 0901 	mov.w	r9, #1
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800acb6:	2f08      	cmp	r7, #8
 800acb8:	d017      	beq.n	800acea <updateAllNodeWeight+0xea>
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))		//壁がなければ
 800acba:	f895 62d8 	ldrb.w	r6, [r5, #728]	; 0x2d8
 800acbe:	4226      	tst	r6, r4
 800acc0:	d109      	bne.n	800acd6 <updateAllNodeWeight+0xd6>
 800acc2:	f8b5 62da 	ldrh.w	r6, [r5, #730]	; 0x2da
 800acc6:	4296      	cmp	r6, r2
 800acc8:	d105      	bne.n	800acd6 <updateAllNodeWeight+0xd6>
						maze->ColumnNode[i+1][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800acca:	895e      	ldrh	r6, [r3, #10]
 800accc:	3605      	adds	r6, #5
 800acce:	f8a5 62da 	strh.w	r6, [r5, #730]	; 0x2da
						change_flag = true;		//値が更新されたことを示す
 800acd2:	f04f 0901 	mov.w	r9, #1
                    if( ((maze->ColumnNode[i+1][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j-1].weight == MAX_WEIGHT)	)		//壁がなければ
 800acd6:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800acda:	4226      	tst	r6, r4
 800acdc:	d104      	bne.n	800ace8 <updateAllNodeWeight+0xe8>
 800acde:	f8b5 62d2 	ldrh.w	r6, [r5, #722]	; 0x2d2
 800ace2:	4296      	cmp	r6, r2
 800ace4:	f000 8092 	beq.w	800ae0c <updateAllNodeWeight+0x20c>
				if(i > 0)						//範囲チェック
 800ace8:	b1df      	cbz	r7, 800ad22 <updateAllNodeWeight+0x122>
					if( ((maze->ColumnNode[i][j].existence & mask) == NOWALL)  && (maze->ColumnNode[i][j].weight == MAX_WEIGHT) )		//壁がなければ
 800acea:	f891 62d8 	ldrb.w	r6, [r1, #728]	; 0x2d8
 800acee:	4226      	tst	r6, r4
 800acf0:	d109      	bne.n	800ad06 <updateAllNodeWeight+0x106>
 800acf2:	f8b1 62da 	ldrh.w	r6, [r1, #730]	; 0x2da
 800acf6:	4296      	cmp	r6, r2
 800acf8:	d105      	bne.n	800ad06 <updateAllNodeWeight+0x106>
							maze->ColumnNode[i][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800acfa:	895e      	ldrh	r6, [r3, #10]
 800acfc:	3605      	adds	r6, #5
 800acfe:	f8a1 62da 	strh.w	r6, [r1, #730]	; 0x2da
							change_flag = true;		//値が更新されたことを示す
 800ad02:	f04f 0901 	mov.w	r9, #1
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
 800ad06:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800ad0a:	4226      	tst	r6, r4
 800ad0c:	d109      	bne.n	800ad22 <updateAllNodeWeight+0x122>
 800ad0e:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ad12:	4296      	cmp	r6, r2
 800ad14:	d105      	bne.n	800ad22 <updateAllNodeWeight+0x122>
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ad16:	895e      	ldrh	r6, [r3, #10]
 800ad18:	3605      	adds	r6, #5
 800ad1a:	f8a1 62d2 	strh.w	r6, [r1, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800ad1e:	f04f 0901 	mov.w	r9, #1
 800ad22:	3001      	adds	r0, #1
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
 800ad24:	2809      	cmp	r0, #9
 800ad26:	f103 0308 	add.w	r3, r3, #8
 800ad2a:	f101 0108 	add.w	r1, r1, #8
 800ad2e:	f105 0508 	add.w	r5, r5, #8
 800ad32:	d19d      	bne.n	800ac70 <updateAllNodeWeight+0x70>
 800ad34:	3701      	adds	r7, #1
		for( i = 0; i < NUMBER_OF_SQUARES_X; i++)			//迷路の大きさ分ループ(x座標)
 800ad36:	2f09      	cmp	r7, #9
 800ad38:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800ad3c:	4641      	mov	r1, r8
 800ad3e:	d192      	bne.n	800ac66 <updateAllNodeWeight+0x66>
 800ad40:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800ad44:	464f      	mov	r7, r9
 800ad46:	4671      	mov	r1, lr
 800ad48:	f04f 0801 	mov.w	r8, #1
 800ad4c:	f101 0948 	add.w	r9, r1, #72	; 0x48
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800ad50:	464d      	mov	r5, r9
 800ad52:	4653      	mov	r3, sl
 800ad54:	2000      	movs	r0, #0
        //列
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
		{
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
			{
                if(maze->ColumnNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800ad56:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ad5a:	4296      	cmp	r6, r2
 800ad5c:	d04f      	beq.n	800adfe <updateAllNodeWeight+0x1fe>
					continue;
				}
                // printf("continueはクリア. Column[%d][%d]\r\n",i,j);
				
                //東側ノード
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800ad5e:	f1b8 0f08 	cmp.w	r8, #8
 800ad62:	d00f      	beq.n	800ad84 <updateAllNodeWeight+0x184>
				{
                    // printf("列東%d,mask: %d, result: %d\r\n",maze->ColumnNode[i+1][j].existence, mask,((maze->ColumnNode[i+1][j].existence) & mask));
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))	//壁がなければ(maskの意味はstatic_parametersを参照)
 800ad64:	f895 b2d0 	ldrb.w	fp, [r5, #720]	; 0x2d0
 800ad68:	ea1b 0f04 	tst.w	fp, r4
 800ad6c:	d107      	bne.n	800ad7e <updateAllNodeWeight+0x17e>
 800ad6e:	f8b5 b2d2 	ldrh.w	fp, [r5, #722]	; 0x2d2
 800ad72:	4593      	cmp	fp, r2
 800ad74:	d103      	bne.n	800ad7e <updateAllNodeWeight+0x17e>
					{
						maze->ColumnNode[i+1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800ad76:	3607      	adds	r6, #7
 800ad78:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800ad7c:	2701      	movs	r7, #1
					}
                }
                //西側ノード
				if(i > 1)						//範囲チェック
 800ad7e:	f1b8 0f01 	cmp.w	r8, #1
 800ad82:	d00d      	beq.n	800ada0 <updateAllNodeWeight+0x1a0>
				{
					if( ((maze->ColumnNode[i-1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i-1][j].weight == MAX_WEIGHT))	//壁がなければ
 800ad84:	f891 6288 	ldrb.w	r6, [r1, #648]	; 0x288
 800ad88:	4226      	tst	r6, r4
 800ad8a:	d109      	bne.n	800ada0 <updateAllNodeWeight+0x1a0>
 800ad8c:	f8b1 628a 	ldrh.w	r6, [r1, #650]	; 0x28a
 800ad90:	4296      	cmp	r6, r2
 800ad92:	d105      	bne.n	800ada0 <updateAllNodeWeight+0x1a0>
					{
						maze->ColumnNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800ad94:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ad98:	3607      	adds	r6, #7
 800ad9a:	f8a1 628a 	strh.w	r6, [r1, #650]	; 0x28a
						change_flag = true;		//値が更新されたことを示す
 800ad9e:	2701      	movs	r7, #1
					}
				}
                //北側に斜めが2方向
				if(j < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ada0:	2808      	cmp	r0, #8
 800ada2:	d013      	beq.n	800adcc <updateAllNodeWeight+0x1cc>
				{
                    //北東
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800ada4:	7a1e      	ldrb	r6, [r3, #8]
 800ada6:	4226      	tst	r6, r4
 800ada8:	d107      	bne.n	800adba <updateAllNodeWeight+0x1ba>
 800adaa:	895e      	ldrh	r6, [r3, #10]
 800adac:	4296      	cmp	r6, r2
 800adae:	d104      	bne.n	800adba <updateAllNodeWeight+0x1ba>
					{
						maze->RawNode[i][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800adb0:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800adb4:	3605      	adds	r6, #5
 800adb6:	815e      	strh	r6, [r3, #10]
						change_flag = true;		//値が更新されたことを示す
 800adb8:	2701      	movs	r7, #1
					}
                	
                    //北西
                    if( ((maze->RawNode[i-1][j+1].existence & mask) == NOWALL) && (maze->RawNode[i-1][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800adba:	f813 6c48 	ldrb.w	r6, [r3, #-72]
 800adbe:	4226      	tst	r6, r4
 800adc0:	d103      	bne.n	800adca <updateAllNodeWeight+0x1ca>
 800adc2:	f833 6c46 	ldrh.w	r6, [r3, #-70]
 800adc6:	4296      	cmp	r6, r2
 800adc8:	d027      	beq.n	800ae1a <updateAllNodeWeight+0x21a>
						change_flag = true;		//値が更新されたことを示す
					}
				}

                //南側に斜めが2方向
				if(j > 0)						//範囲チェック
 800adca:	b1d0      	cbz	r0, 800ae02 <updateAllNodeWeight+0x202>
				{
                    //南東
					if( ((maze->RawNode[i][j].existence & mask) == NOWALL) && (maze->RawNode[i][j].weight == MAX_WEIGHT)	)		//壁がなければ
 800adcc:	781e      	ldrb	r6, [r3, #0]
 800adce:	4226      	tst	r6, r4
 800add0:	d107      	bne.n	800ade2 <updateAllNodeWeight+0x1e2>
 800add2:	885e      	ldrh	r6, [r3, #2]
 800add4:	4296      	cmp	r6, r2
 800add6:	d104      	bne.n	800ade2 <updateAllNodeWeight+0x1e2>
					{
						maze->RawNode[i][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800add8:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800addc:	3605      	adds	r6, #5
 800adde:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800ade0:	2701      	movs	r7, #1
					}
                    //南西
    				if( ((maze->RawNode[i-1][j].existence & mask) == NOWALL) && (maze->RawNode[i-1][j].weight == MAX_WEIGHT))		//壁がなければ
 800ade2:	f813 6c50 	ldrb.w	r6, [r3, #-80]
 800ade6:	4226      	tst	r6, r4
 800ade8:	d109      	bne.n	800adfe <updateAllNodeWeight+0x1fe>
 800adea:	f833 6c4e 	ldrh.w	r6, [r3, #-78]
 800adee:	4296      	cmp	r6, r2
 800adf0:	d105      	bne.n	800adfe <updateAllNodeWeight+0x1fe>
					{
							maze->RawNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800adf2:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800adf6:	3605      	adds	r6, #5
 800adf8:	f823 6c4e 	strh.w	r6, [r3, #-78]
							change_flag = true;		//値が更新されたことを示す
 800adfc:	2701      	movs	r7, #1
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
 800adfe:	2808      	cmp	r0, #8
 800ae00:	d012      	beq.n	800ae28 <updateAllNodeWeight+0x228>
 800ae02:	3001      	adds	r0, #1
 800ae04:	3108      	adds	r1, #8
 800ae06:	3308      	adds	r3, #8
 800ae08:	3508      	adds	r5, #8
 800ae0a:	e7a4      	b.n	800ad56 <updateAllNodeWeight+0x156>
						maze->ColumnNode[i+1][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ae0c:	895e      	ldrh	r6, [r3, #10]
 800ae0e:	3605      	adds	r6, #5
 800ae10:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800ae14:	f04f 0901 	mov.w	r9, #1
 800ae18:	e766      	b.n	800ace8 <updateAllNodeWeight+0xe8>
						maze->RawNode[i-1][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ae1a:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ae1e:	3605      	adds	r6, #5
 800ae20:	f823 6c46 	strh.w	r6, [r3, #-70]
						change_flag = true;		//値が更新されたことを示す
 800ae24:	2701      	movs	r7, #1
 800ae26:	e7d0      	b.n	800adca <updateAllNodeWeight+0x1ca>
 800ae28:	f108 0801 	add.w	r8, r8, #1
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
 800ae2c:	f1b8 0f09 	cmp.w	r8, #9
 800ae30:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800ae34:	4649      	mov	r1, r9
 800ae36:	d189      	bne.n	800ad4c <updateAllNodeWeight+0x14c>
				}
            }
        }
        //printf("重みの更新\r\n");//一回しか呼ばれていない
        //cnt++;
	}while(change_flag == true);	//全体を作り終わるまで待つ
 800ae38:	2f00      	cmp	r7, #0
 800ae3a:	f47f af0e 	bne.w	800ac5a <updateAllNodeWeight+0x5a>
//    t = 0;
//	HAL_TIM_Base_Stop_IT(&htim8);
//	printf("%d/20ms, %d, %d\r\n\r\n",timer8, skip_raw, skip_column);
}
 800ae3e:	b005      	add	sp, #20
 800ae40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae44 <getNextNode>:
}

//ノード情報から、行けるノードを比較する
// 比較しながらアドレスを更新してしまうので注意:
node *getNextNode(maze_node *maze, cardinal car, node *now_node, int mask)
{
 800ae44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t compare_weight=0;
    compare_weight = now_node->weight;

    _Bool flag=false;
    //printf("マイノードが01のどちらか:%d\r\n",now_node->rc);
    if(now_node->rc == 0)
 800ae48:	f892 9005 	ldrb.w	r9, [r2, #5]
    compare_weight = now_node->weight;
 800ae4c:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 800ae50:	7991      	ldrb	r1, [r2, #6]
 800ae52:	79d4      	ldrb	r4, [r2, #7]
{
 800ae54:	b083      	sub	sp, #12
 800ae56:	4605      	mov	r5, r0
    if(now_node->rc == 0)
 800ae58:	f1b9 0f00 	cmp.w	r9, #0
 800ae5c:	d176      	bne.n	800af4c <getNextNode+0x108>
#endif
        //条件がおかしい？printしている全ノードの重みと、アドレスを入れたはずのマイノードの重みが違う
        
        //行にいるとき
        //北側ノード
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ae5e:	2c07      	cmp	r4, #7
 800ae60:	f240 80cf 	bls.w	800b002 <getNextNode+0x1be>
    _Bool flag=false;
 800ae64:	46cc      	mov	ip, r9
 800ae66:	1e60      	subs	r0, r4, #1
 800ae68:	008e      	lsls	r6, r1, #2
            }
        }
        //南へ側ノード
        if(now_node->pos.y > 1)						//範囲チェック
        {
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)	//壁がなければ
 800ae6a:	440e      	add	r6, r1
 800ae6c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800ae70:	f815 e036 	ldrb.w	lr, [r5, r6, lsl #3]
 800ae74:	ea1e 0f03 	tst.w	lr, r3
 800ae78:	d109      	bne.n	800ae8e <getNextNode+0x4a>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800ae7a:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800ae7e:	f8b6 e002 	ldrh.w	lr, [r6, #2]
 800ae82:	45c6      	cmp	lr, r8
 800ae84:	d203      	bcs.n	800ae8e <getNextNode+0x4a>
                {
#if DEBUG_ON
                    printf("南へ\r\n");
#endif
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight;
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
 800ae86:	4637      	mov	r7, r6
 800ae88:	46f0      	mov	r8, lr
                    flag = true;
 800ae8a:	f04f 0c01 	mov.w	ip, #1
                }
            }
        }
        //東へ側に斜めが2方向
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800ae8e:	2907      	cmp	r1, #7
 800ae90:	d831      	bhi.n	800aef6 <getNextNode+0xb2>
        {
            //北東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800ae92:	1c4e      	adds	r6, r1, #1
 800ae94:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800ae98:	eb06 0e04 	add.w	lr, r6, r4
 800ae9c:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 800aea0:	f89e 92d0 	ldrb.w	r9, [lr, #720]	; 0x2d0
 800aea4:	ea19 0f03 	tst.w	r9, r3
 800aea8:	d10b      	bne.n	800aec2 <getNextNode+0x7e>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800aeaa:	f8be e2d2 	ldrh.w	lr, [lr, #722]	; 0x2d2
 800aeae:	45c6      	cmp	lr, r8
 800aeb0:	d207      	bcs.n	800aec2 <getNextNode+0x7e>
                {
#if DEBUG_ON
                    printf("北東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800aeb2:	f104 075a 	add.w	r7, r4, #90	; 0x5a
 800aeb6:	4437      	add	r7, r6
 800aeb8:	46f0      	mov	r8, lr
 800aeba:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800aebe:	f04f 0c01 	mov.w	ip, #1
 800aec2:	eb00 0e06 	add.w	lr, r0, r6
 800aec6:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
                }
            }

            //南へ東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800aeca:	f89e 92d0 	ldrb.w	r9, [lr, #720]	; 0x2d0
 800aece:	ea19 0f03 	tst.w	r9, r3
 800aed2:	f040 80e9 	bne.w	800b0a8 <getNextNode+0x264>
            {  
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800aed6:	f8be e2d2 	ldrh.w	lr, [lr, #722]	; 0x2d2
 800aeda:	45c6      	cmp	lr, r8
 800aedc:	f080 80e4 	bcs.w	800b0a8 <getNextNode+0x264>
                {
#if DEBUG_ON
                    printf("南東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
 800aee0:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 800aee4:	4437      	add	r7, r6
 800aee6:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                }
            }
        }

        //西へ側に斜めが2方向
        if(now_node->pos.x > 0)						//範囲チェック
 800aeea:	2900      	cmp	r1, #0
 800aeec:	f000 80c3 	beq.w	800b076 <getNextNode+0x232>
 800aef0:	46f0      	mov	r8, lr
                    flag = true;
 800aef2:	f04f 0c01 	mov.w	ip, #1
 800aef6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800aefa:	190e      	adds	r6, r1, r4
 800aefc:	eb01 0e00 	add.w	lr, r1, r0
 800af00:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800af04:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
        {
            //北西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800af08:	f896 92d0 	ldrb.w	r9, [r6, #720]	; 0x2d0
 800af0c:	f89e a2d0 	ldrb.w	sl, [lr, #720]	; 0x2d0
 800af10:	ea19 0f03 	tst.w	r9, r3
 800af14:	ea0a 0a03 	and.w	sl, sl, r3
 800af18:	f040 80be 	bne.w	800b098 <getNextNode+0x254>
            {
                //重みを比較して更新
               
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight)
 800af1c:	f8b6 32d2 	ldrh.w	r3, [r6, #722]	; 0x2d2
 800af20:	4543      	cmp	r3, r8
 800af22:	f080 80b9 	bcs.w	800b098 <getNextNode+0x254>
                {
#if DEBUG_ON
                    printf("北西へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
 800af26:	f104 075a 	add.w	r7, r4, #90	; 0x5a
 800af2a:	440f      	add	r7, r1
 800af2c:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
                }
            }
            //南へ西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800af30:	f1ba 0f00 	cmp.w	sl, #0
 800af34:	f040 809f 	bne.w	800b076 <getNextNode+0x232>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800af38:	f8be 22d2 	ldrh.w	r2, [lr, #722]	; 0x2d2
 800af3c:	429a      	cmp	r2, r3
 800af3e:	f080 809a 	bcs.w	800b076 <getNextNode+0x232>
                {
#if DEBUG_ON
                    printf("南西へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y-1]);
 800af42:	305a      	adds	r0, #90	; 0x5a
 800af44:	4401      	add	r1, r0
 800af46:	eb05 07c1 	add.w	r7, r5, r1, lsl #3
 800af4a:	e094      	b.n	800b076 <getNextNode+0x232>
        //列にいるとき
#if DEBUG_ON
        printf("列ノードから");
#endif
        //東へ側ノード
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800af4c:	2907      	cmp	r1, #7
 800af4e:	f101 30ff 	add.w	r0, r1, #4294967295
 800af52:	d93e      	bls.n	800afd2 <getNextNode+0x18e>
    _Bool flag=false;
 800af54:	f04f 0c00 	mov.w	ip, #0
 800af58:	eb00 0ac0 	add.w	sl, r0, r0, lsl #3
 800af5c:	eb0a 0604 	add.w	r6, sl, r4
 800af60:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
            }
        }
        //西へ側ノード
        if(now_node->pos.x > 1)						//範囲チェック
        {
            if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ
 800af64:	f896 e2d0 	ldrb.w	lr, [r6, #720]	; 0x2d0
 800af68:	ea1e 0f03 	tst.w	lr, r3
 800af6c:	f000 8087 	beq.w	800b07e <getNextNode+0x23a>
                    flag = true;
                }
            }
        }
        //北側に斜めが2方向
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800af70:	2c07      	cmp	r4, #7
        {
            //北東へ
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800af72:	ea4f 0681 	mov.w	r6, r1, lsl #2
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800af76:	d955      	bls.n	800b024 <getNextNode+0x1e0>
 800af78:	ea4f 0a80 	mov.w	sl, r0, lsl #2

        //南へ側に斜めが2方向
        if(now_node->pos.y > 0)						//範囲チェック
        {
            //南へ東へ
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800af7c:	440e      	add	r6, r1
 800af7e:	eb0a 0e00 	add.w	lr, sl, r0
 800af82:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 800af86:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 800af8a:	f815 b036 	ldrb.w	fp, [r5, r6, lsl #3]
 800af8e:	f815 903e 	ldrb.w	r9, [r5, lr, lsl #3]
 800af92:	ea1b 0f03 	tst.w	fp, r3
 800af96:	ea09 0903 	and.w	r9, r9, r3
 800af9a:	f040 8088 	bne.w	800b0ae <getNextNode+0x26a>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800af9e:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800afa2:	8873      	ldrh	r3, [r6, #2]
 800afa4:	4543      	cmp	r3, r8
 800afa6:	f080 8082 	bcs.w	800b0ae <getNextNode+0x26a>
                {
#if DEBUG_ON
                    printf("南東へ\r\n");
#endif
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y].weight;
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y]);
 800afaa:	270a      	movs	r7, #10
 800afac:	fb17 4101 	smlabb	r1, r7, r1, r4
 800afb0:	eb05 07c1 	add.w	r7, r5, r1, lsl #3
                    flag = true;
                }
            }
            //南へ西へ
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800afb4:	f1b9 0f00 	cmp.w	r9, #0
 800afb8:	d15d      	bne.n	800b076 <getNextNode+0x232>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800afba:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 800afbe:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d257      	bcs.n	800b076 <getNextNode+0x232>
                {
#if DEBUG_ON
                    printf("南西へ\r\n");
#endif
                    compare_weight = maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight;
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y]);
 800afc6:	4450      	add	r0, sl
 800afc8:	eb04 0440 	add.w	r4, r4, r0, lsl #1
 800afcc:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
 800afd0:	e051      	b.n	800b076 <getNextNode+0x232>
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800afd2:	1c4e      	adds	r6, r1, #1
 800afd4:	eb06 0ec6 	add.w	lr, r6, r6, lsl #3
 800afd8:	eb04 060e 	add.w	r6, r4, lr
 800afdc:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800afe0:	f896 c2d0 	ldrb.w	ip, [r6, #720]	; 0x2d0
 800afe4:	ea1c 0c03 	ands.w	ip, ip, r3
 800afe8:	d16e      	bne.n	800b0c8 <getNextNode+0x284>
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800afea:	f8b6 a2d2 	ldrh.w	sl, [r6, #722]	; 0x2d2
 800afee:	45c2      	cmp	sl, r8
 800aff0:	d26c      	bcs.n	800b0cc <getNextNode+0x288>
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800aff2:	f104 065a 	add.w	r6, r4, #90	; 0x5a
 800aff6:	4476      	add	r6, lr
 800aff8:	46d0      	mov	r8, sl
 800affa:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
                    flag = true;
 800affe:	46cc      	mov	ip, r9
 800b000:	e064      	b.n	800b0cc <getNextNode+0x288>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b002:	008e      	lsls	r6, r1, #2
 800b004:	eb06 0c01 	add.w	ip, r6, r1
 800b008:	1c60      	adds	r0, r4, #1
 800b00a:	eb00 004c 	add.w	r0, r0, ip, lsl #1
 800b00e:	f815 0030 	ldrb.w	r0, [r5, r0, lsl #3]
 800b012:	4218      	tst	r0, r3
 800b014:	d06a      	beq.n	800b0ec <getNextNode+0x2a8>
        if(now_node->pos.y > 1)						//範囲チェック
 800b016:	2c01      	cmp	r4, #1
 800b018:	f104 30ff 	add.w	r0, r4, #4294967295
 800b01c:	46cc      	mov	ip, r9
 800b01e:	f67f af36 	bls.w	800ae8e <getNextNode+0x4a>
 800b022:	e722      	b.n	800ae6a <getNextNode+0x26>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800b024:	eb06 0a01 	add.w	sl, r6, r1
 800b028:	f104 0e01 	add.w	lr, r4, #1
 800b02c:	eb0e 0a4a 	add.w	sl, lr, sl, lsl #1
 800b030:	f815 b03a 	ldrb.w	fp, [r5, sl, lsl #3]
 800b034:	ea1b 0f03 	tst.w	fp, r3
 800b038:	d10c      	bne.n	800b054 <getNextNode+0x210>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b03a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800b03e:	f8ba a002 	ldrh.w	sl, [sl, #2]
 800b042:	45c2      	cmp	sl, r8
 800b044:	d206      	bcs.n	800b054 <getNextNode+0x210>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800b046:	270a      	movs	r7, #10
 800b048:	fb17 e701 	smlabb	r7, r7, r1, lr
 800b04c:	46d0      	mov	r8, sl
 800b04e:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800b052:	46cc      	mov	ip, r9
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800b054:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 800b058:	eb0a 0b00 	add.w	fp, sl, r0
 800b05c:	eb0e 0e4b 	add.w	lr, lr, fp, lsl #1
 800b060:	f815 b03e 	ldrb.w	fp, [r5, lr, lsl #3]
 800b064:	ea1b 0f03 	tst.w	fp, r3
 800b068:	d034      	beq.n	800b0d4 <getNextNode+0x290>
        if(now_node->pos.y > 0)						//範囲チェック
 800b06a:	2c00      	cmp	r4, #0
 800b06c:	d186      	bne.n	800af7c <getNextNode+0x138>
 800b06e:	f1bc 0f00 	cmp.w	ip, #0
 800b072:	bf08      	it	eq
 800b074:	4617      	moveq	r7, r2
        return now_node;//万が一更新されなかったら、今いるノードが目標ノードなので、停止するはず。
        //停止しなかった。前回の情報がそのまま反映されるだけ
    }
    return now_node; //
        
}
 800b076:	4638      	mov	r0, r7
 800b078:	b003      	add	sp, #12
 800b07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b07e:	f8b6 62d2 	ldrh.w	r6, [r6, #722]	; 0x2d2
 800b082:	4546      	cmp	r6, r8
 800b084:	f4bf af74 	bcs.w	800af70 <getNextNode+0x12c>
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
 800b088:	f104 075a 	add.w	r7, r4, #90	; 0x5a
 800b08c:	4457      	add	r7, sl
 800b08e:	46b0      	mov	r8, r6
 800b090:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800b094:	46cc      	mov	ip, r9
 800b096:	e76b      	b.n	800af70 <getNextNode+0x12c>
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800b098:	f1ba 0f00 	cmp.w	sl, #0
 800b09c:	d1e7      	bne.n	800b06e <getNextNode+0x22a>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b09e:	f8be 32d2 	ldrh.w	r3, [lr, #722]	; 0x2d2
 800b0a2:	4543      	cmp	r3, r8
 800b0a4:	d2e3      	bcs.n	800b06e <getNextNode+0x22a>
 800b0a6:	e74c      	b.n	800af42 <getNextNode+0xfe>
        if(now_node->pos.x > 0)						//範囲チェック
 800b0a8:	2900      	cmp	r1, #0
 800b0aa:	d0e0      	beq.n	800b06e <getNextNode+0x22a>
 800b0ac:	e723      	b.n	800aef6 <getNextNode+0xb2>
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b0ae:	f1b9 0f00 	cmp.w	r9, #0
 800b0b2:	d1dc      	bne.n	800b06e <getNextNode+0x22a>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b0b4:	eb0a 0300 	add.w	r3, sl, r0
 800b0b8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800b0bc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800b0c0:	885b      	ldrh	r3, [r3, #2]
 800b0c2:	4543      	cmp	r3, r8
 800b0c4:	d2d3      	bcs.n	800b06e <getNextNode+0x22a>
 800b0c6:	e77e      	b.n	800afc6 <getNextNode+0x182>
    _Bool flag=false;
 800b0c8:	f04f 0c00 	mov.w	ip, #0
        if(now_node->pos.x > 1)						//範囲チェック
 800b0cc:	2901      	cmp	r1, #1
 800b0ce:	f67f af4f 	bls.w	800af70 <getNextNode+0x12c>
 800b0d2:	e741      	b.n	800af58 <getNextNode+0x114>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800b0d4:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 800b0d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b0dc:	45c3      	cmp	fp, r8
 800b0de:	d2c4      	bcs.n	800b06a <getNextNode+0x226>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y+1]);
 800b0e0:	4677      	mov	r7, lr
        if(now_node->pos.y > 0)						//範囲チェック
 800b0e2:	2c00      	cmp	r4, #0
 800b0e4:	d0c7      	beq.n	800b076 <getNextNode+0x232>
                    flag = true;
 800b0e6:	46cc      	mov	ip, r9
        if(now_node->pos.y > 0)						//範囲チェック
 800b0e8:	46d8      	mov	r8, fp
 800b0ea:	e747      	b.n	800af7c <getNextNode+0x138>
            				ChangeLED(cnt%7);
 800b0ec:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b154 <getNextNode+0x310>
 800b0f0:	4917      	ldr	r1, [pc, #92]	; (800b150 <getNextNode+0x30c>)
 800b0f2:	f8da 0000 	ldr.w	r0, [sl]
 800b0f6:	e9cd 2300 	strd	r2, r3, [sp]
 800b0fa:	fb81 3100 	smull	r3, r1, r1, r0
 800b0fe:	180c      	adds	r4, r1, r0
 800b100:	17c1      	asrs	r1, r0, #31
 800b102:	ebc1 01a4 	rsb	r1, r1, r4, asr #2
 800b106:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b10a:	1a40      	subs	r0, r0, r1
 800b10c:	f002 fdc8 	bl	800dca0 <ChangeLED>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b110:	9a00      	ldr	r2, [sp, #0]
            				cnt ++;
 800b112:	f8da 0000 	ldr.w	r0, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b116:	7991      	ldrb	r1, [r2, #6]
 800b118:	79d4      	ldrb	r4, [r2, #7]
 800b11a:	9b01      	ldr	r3, [sp, #4]
 800b11c:	008e      	lsls	r6, r1, #2
 800b11e:	eb06 0c01 	add.w	ip, r6, r1
 800b122:	f104 0e01 	add.w	lr, r4, #1
 800b126:	eb0e 0c4c 	add.w	ip, lr, ip, lsl #1
 800b12a:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
            				cnt ++;
 800b12e:	3001      	adds	r0, #1
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b130:	f8bc c002 	ldrh.w	ip, [ip, #2]
            				cnt ++;
 800b134:	f8ca 0000 	str.w	r0, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b138:	45c4      	cmp	ip, r8
 800b13a:	f4bf af6c 	bcs.w	800b016 <getNextNode+0x1d2>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800b13e:	270a      	movs	r7, #10
 800b140:	fb17 e701 	smlabb	r7, r7, r1, lr
 800b144:	46e0      	mov	r8, ip
 800b146:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800b14a:	f04f 0901 	mov.w	r9, #1
 800b14e:	e762      	b.n	800b016 <getNextNode+0x1d2>
 800b150:	92492493 	.word	0x92492493
 800b154:	20000000 	.word	0x20000000

0800b158 <judgeAccelorNot>:
	uint16_t compare_weight=0;
	compare_weight = now_node->weight;

	_Bool flag=false;
	//現ノードから3方向ノードを見て、未知なら即return
	if(now_node->rc == 0)
 800b158:	7953      	ldrb	r3, [r2, #5]
{
 800b15a:	b4f0      	push	{r4, r5, r6, r7}
	compare_weight = now_node->weight;
 800b15c:	8854      	ldrh	r4, [r2, #2]
	if(now_node->rc == 0)
 800b15e:	bba3      	cbnz	r3, 800b1ca <judgeAccelorNot+0x72>
	{
		switch(car)
 800b160:	2900      	cmp	r1, #0
 800b162:	f000 8090 	beq.w	800b286 <judgeAccelorNot+0x12e>
 800b166:	2904      	cmp	r1, #4
 800b168:	d12c      	bne.n	800b1c4 <judgeAccelorNot+0x6c>
	            }
	        }
	        break;
		case south:
			//南へ
			if(now_node->pos.y > 1)						//範囲チェック
 800b16a:	79d1      	ldrb	r1, [r2, #7]
 800b16c:	7992      	ldrb	r2, [r2, #6]
 800b16e:	2901      	cmp	r1, #1
 800b170:	f101 35ff 	add.w	r5, r1, #4294967295
 800b174:	d90e      	bls.n	800b194 <judgeAccelorNot+0x3c>
			{
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)	//壁がなければ
 800b176:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800b17a:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800b17e:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800b182:	2e02      	cmp	r6, #2
 800b184:	d01e      	beq.n	800b1c4 <judgeAccelorNot+0x6c>
				{
					return false;
				}
					//重みを比較して更新
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)
 800b186:	b92e      	cbnz	r6, 800b194 <judgeAccelorNot+0x3c>
				{
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b188:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b18c:	8849      	ldrh	r1, [r1, #2]
 800b18e:	42a1      	cmp	r1, r4
 800b190:	f0c0 80bc 	bcc.w	800b30c <judgeAccelorNot+0x1b4>
	_Bool flag=false;
 800b194:	461e      	mov	r6, r3
//						next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
						flag = true;
					}
				}
			}
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b196:	2a07      	cmp	r2, #7
 800b198:	f200 8084 	bhi.w	800b2a4 <judgeAccelorNot+0x14c>
			{
				//南へ東へ
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800b19c:	1c51      	adds	r1, r2, #1
 800b19e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800b1a2:	4429      	add	r1, r5
 800b1a4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b1a8:	f891 72d0 	ldrb.w	r7, [r1, #720]	; 0x2d0
 800b1ac:	2f02      	cmp	r7, #2
 800b1ae:	d009      	beq.n	800b1c4 <judgeAccelorNot+0x6c>
				{
					return false;
				}
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800b1b0:	b92f      	cbnz	r7, 800b1be <judgeAccelorNot+0x66>
				{
					//重みを比較して更新
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800b1b2:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800b1b6:	42a1      	cmp	r1, r4
					{
						compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
//						next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
						flag = false;
 800b1b8:	bf3c      	itt	cc
 800b1ba:	463e      	movcc	r6, r7
 800b1bc:	460c      	movcc	r4, r1
					}
				}
			}
			if(now_node->pos.x > 0)						//範囲チェック
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	d170      	bne.n	800b2a4 <judgeAccelorNot+0x14c>
 800b1c2:	4633      	mov	r3, r6
	}
	return flag; //壁が全部あるときもfalseになっている
	//未知があった時点でreturn false
	//直進かどうかまで見て、直進でなければfalse
	//既知でかつ直進ならtrue
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	bcf0      	pop	{r4, r5, r6, r7}
 800b1c8:	4770      	bx	lr
		switch(car)
 800b1ca:	2902      	cmp	r1, #2
 800b1cc:	d03a      	beq.n	800b244 <judgeAccelorNot+0xec>
 800b1ce:	2906      	cmp	r1, #6
 800b1d0:	d155      	bne.n	800b27e <judgeAccelorNot+0x126>
			if(now_node->pos.x > 1)						//範囲チェック
 800b1d2:	7991      	ldrb	r1, [r2, #6]
 800b1d4:	79d2      	ldrb	r2, [r2, #7]
 800b1d6:	2901      	cmp	r1, #1
 800b1d8:	f101 35ff 	add.w	r5, r1, #4294967295
 800b1dc:	d90b      	bls.n	800b1f6 <judgeAccelorNot+0x9e>
 800b1de:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800b1e2:	4411      	add	r1, r2
 800b1e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
				if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) ==UNKNOWN)	//壁がなければ
 800b1e8:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800b1ec:	2e02      	cmp	r6, #2
 800b1ee:	d046      	beq.n	800b27e <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ
 800b1f0:	2e00      	cmp	r6, #0
 800b1f2:	f000 8084 	beq.w	800b2fe <judgeAccelorNot+0x1a6>
	_Bool flag=false;
 800b1f6:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b1f8:	2a07      	cmp	r2, #7
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b1fa:	ea4f 0185 	mov.w	r1, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b1fe:	d811      	bhi.n	800b224 <judgeAccelorNot+0xcc>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b200:	194f      	adds	r7, r1, r5
 800b202:	1c56      	adds	r6, r2, #1
 800b204:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800b208:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800b20c:	2f02      	cmp	r7, #2
 800b20e:	d036      	beq.n	800b27e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800b210:	b937      	cbnz	r7, 800b220 <judgeAccelorNot+0xc8>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800b212:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b216:	8876      	ldrh	r6, [r6, #2]
 800b218:	42a6      	cmp	r6, r4
 800b21a:	bf3c      	itt	cc
 800b21c:	4634      	movcc	r4, r6
						flag = false;
 800b21e:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800b220:	2a00      	cmp	r2, #0
 800b222:	d0cf      	beq.n	800b1c4 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800b224:	440d      	add	r5, r1
 800b226:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 800b22a:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800b22e:	2902      	cmp	r1, #2
 800b230:	d025      	beq.n	800b27e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800b232:	2900      	cmp	r1, #0
 800b234:	d1c6      	bne.n	800b1c4 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b236:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800b23a:	8842      	ldrh	r2, [r0, #2]
	                    flag = false;
 800b23c:	42a2      	cmp	r2, r4
 800b23e:	bf38      	it	cc
 800b240:	2300      	movcc	r3, #0
 800b242:	e7bf      	b.n	800b1c4 <judgeAccelorNot+0x6c>
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b244:	7995      	ldrb	r5, [r2, #6]
 800b246:	79d1      	ldrb	r1, [r2, #7]
 800b248:	2d07      	cmp	r5, #7
 800b24a:	d80b      	bhi.n	800b264 <judgeAccelorNot+0x10c>
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b24c:	1c6a      	adds	r2, r5, #1
 800b24e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800b252:	440a      	add	r2, r1
 800b254:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800b258:	f892 62d0 	ldrb.w	r6, [r2, #720]	; 0x2d0
 800b25c:	2e02      	cmp	r6, #2
 800b25e:	d00e      	beq.n	800b27e <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b260:	2e00      	cmp	r6, #0
 800b262:	d056      	beq.n	800b312 <judgeAccelorNot+0x1ba>
	_Bool flag=false;
 800b264:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b266:	2907      	cmp	r1, #7
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b268:	ea4f 0285 	mov.w	r2, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b26c:	d836      	bhi.n	800b2dc <judgeAccelorNot+0x184>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b26e:	1957      	adds	r7, r2, r5
 800b270:	1c4e      	adds	r6, r1, #1
 800b272:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800b276:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800b27a:	2f02      	cmp	r7, #2
 800b27c:	d123      	bne.n	800b2c6 <judgeAccelorNot+0x16e>
	                    flag = false;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	bcf0      	pop	{r4, r5, r6, r7}
 800b284:	4770      	bx	lr
	        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b286:	79d5      	ldrb	r5, [r2, #7]
 800b288:	7992      	ldrb	r2, [r2, #6]
 800b28a:	2d07      	cmp	r5, #7
 800b28c:	d882      	bhi.n	800b194 <judgeAccelorNot+0x3c>
	            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b28e:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 800b292:	1c69      	adds	r1, r5, #1
 800b294:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 800b298:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800b29c:	2e02      	cmp	r6, #2
 800b29e:	f47f af72 	bne.w	800b186 <judgeAccelorNot+0x2e>
 800b2a2:	e78f      	b.n	800b1c4 <judgeAccelorNot+0x6c>
 800b2a4:	2109      	movs	r1, #9
 800b2a6:	fb11 5202 	smlabb	r2, r1, r2, r5
 800b2aa:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
				if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800b2ae:	f890 22d0 	ldrb.w	r2, [r0, #720]	; 0x2d0
 800b2b2:	2a02      	cmp	r2, #2
 800b2b4:	d086      	beq.n	800b1c4 <judgeAccelorNot+0x6c>
				else if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800b2b6:	2a00      	cmp	r2, #0
 800b2b8:	d183      	bne.n	800b1c2 <judgeAccelorNot+0x6a>
					if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b2ba:	f8b0 22d2 	ldrh.w	r2, [r0, #722]	; 0x2d2
 800b2be:	42a2      	cmp	r2, r4
 800b2c0:	bf28      	it	cs
 800b2c2:	4633      	movcs	r3, r6
 800b2c4:	e77e      	b.n	800b1c4 <judgeAccelorNot+0x6c>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800b2c6:	b937      	cbnz	r7, 800b2d6 <judgeAccelorNot+0x17e>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b2c8:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b2cc:	8876      	ldrh	r6, [r6, #2]
 800b2ce:	42a6      	cmp	r6, r4
 800b2d0:	bf3c      	itt	cc
 800b2d2:	4634      	movcc	r4, r6
						flag = false;
 800b2d4:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800b2d6:	2900      	cmp	r1, #0
 800b2d8:	f43f af74 	beq.w	800b1c4 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800b2dc:	4415      	add	r5, r2
 800b2de:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800b2e2:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
 800b2e6:	2a02      	cmp	r2, #2
 800b2e8:	d0c9      	beq.n	800b27e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800b2ea:	2a00      	cmp	r2, #0
 800b2ec:	f47f af6a 	bne.w	800b1c4 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800b2f0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b2f4:	884a      	ldrh	r2, [r1, #2]
	                    flag = false;
 800b2f6:	42a2      	cmp	r2, r4
 800b2f8:	bf38      	it	cc
 800b2fa:	2300      	movcc	r3, #0
 800b2fc:	e762      	b.n	800b1c4 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b2fe:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800b302:	42a1      	cmp	r1, r4
 800b304:	f4bf af77 	bcs.w	800b1f6 <judgeAccelorNot+0x9e>
 800b308:	460c      	mov	r4, r1
 800b30a:	e775      	b.n	800b1f8 <judgeAccelorNot+0xa0>
 800b30c:	460c      	mov	r4, r1
						flag = true;
 800b30e:	2601      	movs	r6, #1
 800b310:	e741      	b.n	800b196 <judgeAccelorNot+0x3e>
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800b312:	f8b2 22d2 	ldrh.w	r2, [r2, #722]	; 0x2d2
 800b316:	42a2      	cmp	r2, r4
 800b318:	d2a4      	bcs.n	800b264 <judgeAccelorNot+0x10c>
 800b31a:	4614      	mov	r4, r2
 800b31c:	e7a3      	b.n	800b266 <judgeAccelorNot+0x10e>
 800b31e:	bf00      	nop

0800b320 <getNextState>:
//自分の状態から次の状態を得る
state *getNextState(state *now_state, state *next_state, node *next_node)
{
 800b320:	b4f0      	push	{r4, r5, r6, r7}
 800b322:	4603      	mov	r3, r0
    //state *next_state;
    //差分を見て、次の状態を定義
    //状態の種類に応じて後で追加:探索時と最短時、既知区間走行でうまく変える
    //ノードと方角と座標を使って、次の方角と座標を得る
    
    uint8_t now_x = now_state->node->pos.x;
 800b324:	6880      	ldr	r0, [r0, #8]
    uint8_t now_y = now_state->node->pos.y;
    uint8_t next_x = next_node->pos.x; 
    uint8_t next_y = next_node->pos.y;
    
    switch(now_state->car)
 800b326:	789c      	ldrb	r4, [r3, #2]
    uint8_t now_x = now_state->node->pos.x;
 800b328:	7985      	ldrb	r5, [r0, #6]
    uint8_t now_y = now_state->node->pos.y;
 800b32a:	79c6      	ldrb	r6, [r0, #7]
    uint8_t next_y = next_node->pos.y;
 800b32c:	79d7      	ldrb	r7, [r2, #7]
    uint8_t next_x = next_node->pos.x; 
 800b32e:	7990      	ldrb	r0, [r2, #6]
    switch(now_state->car)
 800b330:	2c06      	cmp	r4, #6
 800b332:	d81e      	bhi.n	800b372 <getNextState+0x52>
 800b334:	e8df f004 	tbb	[pc, r4]
 800b338:	1d4d1d04 	.word	0x1d4d1d04
 800b33c:	1d34      	.short	0x1d34
 800b33e:	20          	.byte	0x20
 800b33f:	00          	.byte	0x00
    {
        case north://行から、列に行くのか行に行くのかで、差分の取り方を変える
            if(next_node->rc == 0)
 800b340:	7952      	ldrb	r2, [r2, #5]
 800b342:	2a00      	cmp	r2, #0
 800b344:	d058      	beq.n	800b3f8 <getNextState+0xd8>
            if(next_node->rc == 1)
            {
                //行から列.左右のどちらか判断.あとで後ろも候補にあげる
                //右旋回
                //北向きから北東
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b346:	1c6a      	adds	r2, r5, #1
 800b348:	4282      	cmp	r2, r0
 800b34a:	f000 80c3 	beq.w	800b4d4 <getNextState+0x1b4>
                    return next_state;
                }

                //左旋回
                //北向きから北西
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b34e:	4285      	cmp	r5, r0
 800b350:	d10f      	bne.n	800b372 <getNextState+0x52>
 800b352:	42be      	cmp	r6, r7
 800b354:	f000 8120 	beq.w	800b598 <getNextState+0x278>
 800b358:	3e01      	subs	r6, #1
                    return next_state;
                }

                //Uターンして右旋回
                //北向きから南西
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b35a:	42be      	cmp	r6, r7
 800b35c:	d109      	bne.n	800b372 <getNextState+0x52>
                {
                    next_state->car = west;
 800b35e:	2206      	movs	r2, #6
 800b360:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b362:	781a      	ldrb	r2, [r3, #0]
 800b364:	3a01      	subs	r2, #1
                //Uターンして右旋回
                //西向きから南東
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
                {
                    next_state->car = south;
                    next_state->pos.x = now_state->pos.x + 1;
 800b366:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b368:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backright;
 800b36a:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y - 1;
 800b36c:	3b01      	subs	r3, #1
 800b36e:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backright;
 800b370:	70ca      	strb	r2, [r1, #3]
#if DEBUG_ON
    printf("エラー in function 'getNextState'.\r\n");
#endif

    return next_state; //ここまで来てしまったらエラー
}
 800b372:	4608      	mov	r0, r1
 800b374:	bcf0      	pop	{r4, r5, r6, r7}
 800b376:	4770      	bx	lr
            if(next_node->rc == 1)
 800b378:	7952      	ldrb	r2, [r2, #5]
 800b37a:	1e6c      	subs	r4, r5, #1
 800b37c:	2a00      	cmp	r2, #0
 800b37e:	d05c      	beq.n	800b43a <getNextState+0x11a>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b380:	4284      	cmp	r4, r0
 800b382:	f000 808f 	beq.w	800b4a4 <getNextState+0x184>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b386:	3501      	adds	r5, #1
 800b388:	42a8      	cmp	r0, r5
 800b38a:	d1f2      	bne.n	800b372 <getNextState+0x52>
 800b38c:	42be      	cmp	r6, r7
 800b38e:	d1f0      	bne.n	800b372 <getNextState+0x52>
                    next_state->car = east;
 800b390:	2202      	movs	r2, #2
 800b392:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 2;
 800b394:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = back;
 800b396:	2203      	movs	r2, #3
                    next_state->pos.x = now_state->pos.x + 2;
 800b398:	3302      	adds	r3, #2
 800b39a:	700b      	strb	r3, [r1, #0]
                    next_state->dir = back;
 800b39c:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b39e:	e7e8      	b.n	800b372 <getNextState+0x52>
            if(next_node->rc == 0)
 800b3a0:	7952      	ldrb	r2, [r2, #5]
 800b3a2:	2a00      	cmp	r2, #0
 800b3a4:	d039      	beq.n	800b41a <getNextState+0xfa>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b3a6:	4285      	cmp	r5, r0
 800b3a8:	f000 80a9 	beq.w	800b4fe <getNextState+0x1de>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b3ac:	3501      	adds	r5, #1
 800b3ae:	42a8      	cmp	r0, r5
 800b3b0:	d1df      	bne.n	800b372 <getNextState+0x52>
 800b3b2:	1e72      	subs	r2, r6, #1
 800b3b4:	42ba      	cmp	r2, r7
 800b3b6:	f000 80e7 	beq.w	800b588 <getNextState+0x268>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b3ba:	42be      	cmp	r6, r7
 800b3bc:	d1d9      	bne.n	800b372 <getNextState+0x52>
                    next_state->car = east;
 800b3be:	2002      	movs	r0, #2
 800b3c0:	7088      	strb	r0, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b3c2:	781a      	ldrb	r2, [r3, #0]
 800b3c4:	3201      	adds	r2, #1
 800b3c6:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b3c8:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backright;
 800b3ca:	70c8      	strb	r0, [r1, #3]
                    next_state->pos.y = now_state->pos.y + 1;
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b3d0:	e7cf      	b.n	800b372 <getNextState+0x52>
            if(next_node->rc == 1)
 800b3d2:	7952      	ldrb	r2, [r2, #5]
 800b3d4:	2a00      	cmp	r2, #0
 800b3d6:	d044      	beq.n	800b462 <getNextState+0x142>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b3d8:	1c6a      	adds	r2, r5, #1
 800b3da:	4282      	cmp	r2, r0
 800b3dc:	d057      	beq.n	800b48e <getNextState+0x16e>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b3de:	3d01      	subs	r5, #1
 800b3e0:	42a8      	cmp	r0, r5
 800b3e2:	d1c6      	bne.n	800b372 <getNextState+0x52>
 800b3e4:	42be      	cmp	r6, r7
 800b3e6:	d1c4      	bne.n	800b372 <getNextState+0x52>
                    next_state->car = west;
 800b3e8:	2206      	movs	r2, #6
 800b3ea:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b3ec:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = back;
 800b3ee:	2203      	movs	r2, #3
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b3f0:	3b02      	subs	r3, #2
 800b3f2:	700b      	strb	r3, [r1, #0]
                    next_state->dir = back;
 800b3f4:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b3f6:	e7bc      	b.n	800b372 <getNextState+0x52>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800b3f8:	4285      	cmp	r5, r0
 800b3fa:	d1ba      	bne.n	800b372 <getNextState+0x52>
 800b3fc:	1c70      	adds	r0, r6, #1
 800b3fe:	42b8      	cmp	r0, r7
 800b400:	f000 809d 	beq.w	800b53e <getNextState+0x21e>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800b404:	3e01      	subs	r6, #1
 800b406:	42b7      	cmp	r7, r6
 800b408:	d1b3      	bne.n	800b372 <getNextState+0x52>
                    next_state->car = south;
 800b40a:	2204      	movs	r2, #4
 800b40c:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b40e:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = back;
 800b410:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b412:	3b02      	subs	r3, #2
 800b414:	704b      	strb	r3, [r1, #1]
                    next_state->dir = back;
 800b416:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b418:	e7ab      	b.n	800b372 <getNextState+0x52>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800b41a:	4285      	cmp	r5, r0
 800b41c:	d1a9      	bne.n	800b372 <getNextState+0x52>
 800b41e:	1e70      	subs	r0, r6, #1
 800b420:	42b8      	cmp	r0, r7
 800b422:	f000 8085 	beq.w	800b530 <getNextState+0x210>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800b426:	3601      	adds	r6, #1
 800b428:	42b7      	cmp	r7, r6
 800b42a:	d1a2      	bne.n	800b372 <getNextState+0x52>
                    next_state->car = north;
 800b42c:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 2;
 800b42e:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = back;
 800b430:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y + 2;
 800b432:	3302      	adds	r3, #2
 800b434:	704b      	strb	r3, [r1, #1]
                    next_state->dir = back;
 800b436:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b438:	e79b      	b.n	800b372 <getNextState+0x52>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b43a:	4284      	cmp	r4, r0
 800b43c:	d06a      	beq.n	800b514 <getNextState+0x1f4>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b43e:	4285      	cmp	r5, r0
 800b440:	d197      	bne.n	800b372 <getNextState+0x52>
 800b442:	42be      	cmp	r6, r7
 800b444:	f000 80ba 	beq.w	800b5bc <getNextState+0x29c>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800b448:	3601      	adds	r6, #1
 800b44a:	42be      	cmp	r6, r7
 800b44c:	d191      	bne.n	800b372 <getNextState+0x52>
                    next_state->car = north;
 800b44e:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b450:	781a      	ldrb	r2, [r3, #0]
 800b452:	3201      	adds	r2, #1
 800b454:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b456:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backleft;
 800b458:	2204      	movs	r2, #4
                    next_state->pos.y = now_state->pos.y + 1;
 800b45a:	3301      	adds	r3, #1
 800b45c:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backleft;
 800b45e:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b460:	e787      	b.n	800b372 <getNextState+0x52>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b462:	4285      	cmp	r5, r0
 800b464:	d029      	beq.n	800b4ba <getNextState+0x19a>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b466:	3d01      	subs	r5, #1
 800b468:	4285      	cmp	r5, r0
 800b46a:	d182      	bne.n	800b372 <getNextState+0x52>
 800b46c:	1c70      	adds	r0, r6, #1
 800b46e:	42b8      	cmp	r0, r7
 800b470:	f000 809a 	beq.w	800b5a8 <getNextState+0x288>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b474:	42be      	cmp	r6, r7
 800b476:	f47f af7c 	bne.w	800b372 <getNextState+0x52>
                    next_state->car = south;
 800b47a:	2004      	movs	r0, #4
 800b47c:	7088      	strb	r0, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b47e:	781a      	ldrb	r2, [r3, #0]
 800b480:	3a01      	subs	r2, #1
 800b482:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b484:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backleft;
 800b486:	70c8      	strb	r0, [r1, #3]
                    next_state->pos.y = now_state->pos.y - 1;
 800b488:	3b01      	subs	r3, #1
 800b48a:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b48c:	e771      	b.n	800b372 <getNextState+0x52>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b48e:	42be      	cmp	r6, r7
 800b490:	f47f af6f 	bne.w	800b372 <getNextState+0x52>
                    next_state->car = east;
 800b494:	2202      	movs	r2, #2
 800b496:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b498:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = front;
 800b49a:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x + 1;
 800b49c:	3301      	adds	r3, #1
 800b49e:	700b      	strb	r3, [r1, #0]
                    next_state->dir = front;
 800b4a0:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b4a2:	e766      	b.n	800b372 <getNextState+0x52>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b4a4:	42be      	cmp	r6, r7
 800b4a6:	f47f af64 	bne.w	800b372 <getNextState+0x52>
                    next_state->car = west;
 800b4aa:	2206      	movs	r2, #6
 800b4ac:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b4ae:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = front;
 800b4b0:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	700b      	strb	r3, [r1, #0]
                    next_state->dir = front;
 800b4b6:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b4b8:	e75b      	b.n	800b372 <getNextState+0x52>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b4ba:	42be      	cmp	r6, r7
 800b4bc:	d054      	beq.n	800b568 <getNextState+0x248>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800b4be:	3601      	adds	r6, #1
 800b4c0:	42be      	cmp	r6, r7
 800b4c2:	f47f af56 	bne.w	800b372 <getNextState+0x52>
                    next_state->car = north;
 800b4c6:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b4c8:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = left;
 800b4ca:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y + 1;
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	704b      	strb	r3, [r1, #1]
                    next_state->dir = left;
 800b4d0:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b4d2:	e74e      	b.n	800b372 <getNextState+0x52>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b4d4:	42be      	cmp	r6, r7
 800b4d6:	d038      	beq.n	800b54a <getNextState+0x22a>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b4d8:	4285      	cmp	r5, r0
 800b4da:	f106 36ff 	add.w	r6, r6, #4294967295
 800b4de:	f43f af3c 	beq.w	800b35a <getNextState+0x3a>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b4e2:	42be      	cmp	r6, r7
 800b4e4:	f47f af45 	bne.w	800b372 <getNextState+0x52>
                    next_state->car = east;
 800b4e8:	2202      	movs	r2, #2
 800b4ea:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b4ec:	781a      	ldrb	r2, [r3, #0]
 800b4ee:	3201      	adds	r2, #1
 800b4f0:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b4f2:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backleft;
 800b4f4:	2204      	movs	r2, #4
                    next_state->pos.y = now_state->pos.y - 1;
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backleft;
 800b4fa:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b4fc:	e739      	b.n	800b372 <getNextState+0x52>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b4fe:	1e72      	subs	r2, r6, #1
 800b500:	42ba      	cmp	r2, r7
 800b502:	d039      	beq.n	800b578 <getNextState+0x258>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b504:	42be      	cmp	r6, r7
 800b506:	f47f af34 	bne.w	800b372 <getNextState+0x52>
                    next_state->car = west;
 800b50a:	2206      	movs	r2, #6
 800b50c:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b50e:	781a      	ldrb	r2, [r3, #0]
 800b510:	3a01      	subs	r2, #1
 800b512:	e79f      	b.n	800b454 <getNextState+0x134>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b514:	1c70      	adds	r0, r6, #1
 800b516:	42b8      	cmp	r0, r7
 800b518:	d01f      	beq.n	800b55a <getNextState+0x23a>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b51a:	42be      	cmp	r6, r7
 800b51c:	f47f af29 	bne.w	800b372 <getNextState+0x52>
                    next_state->car = south;
 800b520:	2204      	movs	r2, #4
 800b522:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b524:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = left;
 800b526:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y - 1;
 800b528:	3b01      	subs	r3, #1
 800b52a:	704b      	strb	r3, [r1, #1]
                    next_state->dir = left;
 800b52c:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b52e:	e720      	b.n	800b372 <getNextState+0x52>
                    next_state->car = south;
 800b530:	2004      	movs	r0, #4
 800b532:	7088      	strb	r0, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b534:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = front;
 800b536:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b538:	3b01      	subs	r3, #1
 800b53a:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b53c:	e719      	b.n	800b372 <getNextState+0x52>
                    next_state->car = north;
 800b53e:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b540:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = front;
 800b542:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.y = now_state->pos.y + 1;
 800b544:	3301      	adds	r3, #1
 800b546:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b548:	e713      	b.n	800b372 <getNextState+0x52>
                    next_state->car = east;
 800b54a:	2202      	movs	r2, #2
 800b54c:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b54e:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = right;
 800b550:	2201      	movs	r2, #1
                    next_state->pos.x = now_state->pos.x + 1;
 800b552:	4413      	add	r3, r2
 800b554:	700b      	strb	r3, [r1, #0]
                    next_state->dir = right;
 800b556:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b558:	e70b      	b.n	800b372 <getNextState+0x52>
                    next_state->car = north;
 800b55a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b55c:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = right;
 800b55e:	2201      	movs	r2, #1
                    next_state->pos.y = now_state->pos.y + 1;
 800b560:	4413      	add	r3, r2
 800b562:	704b      	strb	r3, [r1, #1]
                    next_state->dir = right;
 800b564:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b566:	e704      	b.n	800b372 <getNextState+0x52>
                    next_state->car = south;
 800b568:	2204      	movs	r2, #4
 800b56a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b56c:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = right;
 800b56e:	2201      	movs	r2, #1
                    next_state->pos.y = now_state->pos.y - 1;
 800b570:	3b01      	subs	r3, #1
 800b572:	704b      	strb	r3, [r1, #1]
                    next_state->dir = right;
 800b574:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b576:	e6fc      	b.n	800b372 <getNextState+0x52>
                    next_state->car = west;
 800b578:	2206      	movs	r2, #6
 800b57a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b57c:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = right;
 800b57e:	2201      	movs	r2, #1
                    next_state->pos.x = now_state->pos.x - 1;
 800b580:	3b01      	subs	r3, #1
 800b582:	700b      	strb	r3, [r1, #0]
                    next_state->dir = right;
 800b584:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b586:	e6f4      	b.n	800b372 <getNextState+0x52>
                    next_state->car = east;
 800b588:	2202      	movs	r2, #2
 800b58a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b58c:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = left;
 800b58e:	2205      	movs	r2, #5
                    next_state->pos.x = now_state->pos.x + 1;
 800b590:	3301      	adds	r3, #1
 800b592:	700b      	strb	r3, [r1, #0]
                    next_state->dir = left;
 800b594:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b596:	e6ec      	b.n	800b372 <getNextState+0x52>
                    next_state->car = west;
 800b598:	2206      	movs	r2, #6
 800b59a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b59c:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = left;
 800b59e:	2205      	movs	r2, #5
                    next_state->pos.x = now_state->pos.x - 1;
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	700b      	strb	r3, [r1, #0]
                    next_state->dir = left;
 800b5a4:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b5a6:	e6e4      	b.n	800b372 <getNextState+0x52>
                    next_state->car = north;
 800b5a8:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b5aa:	781a      	ldrb	r2, [r3, #0]
 800b5ac:	3a01      	subs	r2, #1
 800b5ae:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b5b0:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backright;
 800b5b2:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y + 1;
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backright;
 800b5b8:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b5ba:	e6da      	b.n	800b372 <getNextState+0x52>
                    next_state->car = south;
 800b5bc:	2204      	movs	r2, #4
 800b5be:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b5c0:	781a      	ldrb	r2, [r3, #0]
 800b5c2:	3201      	adds	r2, #1
 800b5c4:	e6cf      	b.n	800b366 <getNextState+0x46>
 800b5c6:	bf00      	nop

0800b5c8 <initProfile>:
        // log_st[n].wall.west = WALL;
    }
    printf("い\r\n");
}
void initProfile(profile *prof, maze_node *maze)
{
 800b5c8:	b430      	push	{r4, r5}
    };
    setWallExistence(&(prof->now.wall), &w_st[0]);
    setWallExistence(&(prof->next.wall), &next[0]);

    prof->now.node = &(maze->RawNode[0][0]);
    prof->next.node = &(maze->RawNode[0][1]);
 800b5ca:	f101 0208 	add.w	r2, r1, #8
    pos->y = y;
 800b5ce:	2301      	movs	r3, #1
    existence->north = state[0];
 800b5d0:	2554      	movs	r5, #84	; 0x54
 800b5d2:	244a      	movs	r4, #74	; 0x4a
    prof->now.node = &(maze->RawNode[0][0]);
 800b5d4:	6101      	str	r1, [r0, #16]
    prof->next.node = &(maze->RawNode[0][1]);
 800b5d6:	61c2      	str	r2, [r0, #28]
    pos->x = x;
 800b5d8:	2107      	movs	r1, #7
 800b5da:	2208      	movs	r2, #8
    pos->y = y;
 800b5dc:	7543      	strb	r3, [r0, #21]
    pos->x = x;
 800b5de:	2300      	movs	r3, #0
    existence->north = state[0];
 800b5e0:	7305      	strb	r5, [r0, #12]
 800b5e2:	7604      	strb	r4, [r0, #24]
    pos->x = x;
 800b5e4:	7001      	strb	r1, [r0, #0]
    pos->y = y;
 800b5e6:	7041      	strb	r1, [r0, #1]
    pos->x = x;
 800b5e8:	7082      	strb	r2, [r0, #2]
    pos->y = y;
 800b5ea:	70c2      	strb	r2, [r0, #3]
    pos->x = x;
 800b5ec:	7203      	strb	r3, [r0, #8]
    pos->y = y;
 800b5ee:	7243      	strb	r3, [r0, #9]
    st->car = car;
 800b5f0:	7283      	strb	r3, [r0, #10]
    pos->x = x;
 800b5f2:	7503      	strb	r3, [r0, #20]
    st->car = car;
 800b5f4:	7583      	strb	r3, [r0, #22]
    // prof->now.node->rc = 0;
    // prof->now.node->pos.x = 0;
    // prof->now.node->pos.y = 0;
}
 800b5f6:	bc30      	pop	{r4, r5}
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop

0800b5fc <shiftState>:
void shiftState(profile *prof)
{
 800b5fc:	b410      	push	{r4}
    prof->now.car = prof->next.car;
    prof->now.pos.x = prof->next.pos.x;
 800b5fe:	7d01      	ldrb	r1, [r0, #20]
    prof->now.car = prof->next.car;
 800b600:	7d84      	ldrb	r4, [r0, #22]
    prof->now.pos.y = prof->next.pos.y;
 800b602:	7d42      	ldrb	r2, [r0, #21]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b604:	69c3      	ldr	r3, [r0, #28]
    prof->now.car = prof->next.car;
 800b606:	7284      	strb	r4, [r0, #10]
    prof->now.pos.x = prof->next.pos.x;
 800b608:	7201      	strb	r1, [r0, #8]
    prof->now.pos.y = prof->next.pos.y;
 800b60a:	7242      	strb	r2, [r0, #9]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b60c:	6103      	str	r3, [r0, #16]
}
 800b60e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <InitExplore>:

	//ハード処理

}
void InitExplore()
{
 800b614:	b538      	push	{r3, r4, r5, lr}
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800b616:	2100      	movs	r1, #0
 800b618:	2004      	movs	r0, #4
 800b61a:	f002 fff9 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800b61e:	2100      	movs	r1, #0
 800b620:	2005      	movs	r0, #5
 800b622:	f002 fff5 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b626:	2100      	movs	r1, #0
 800b628:	2002      	movs	r0, #2
 800b62a:	f002 fff1 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b62e:	2100      	movs	r1, #0
 800b630:	2003      	movs	r0, #3
 800b632:	f002 ffed 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b636:	2100      	movs	r1, #0
 800b638:	2001      	movs	r0, #1
 800b63a:	f002 ffe9 	bl	800e610 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800b63e:	2100      	movs	r1, #0
 800b640:	4608      	mov	r0, r1
 800b642:	f002 ffe5 	bl	800e610 <PIDChangeFlag>


	Load_Gain();
 800b646:	f002 fd51 	bl	800e0ec <Load_Gain>
	uint8_t imu_check;
	imu_check = IMU_init();
 800b64a:	f002 fa93 	bl	800db74 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b64e:	4c33      	ldr	r4, [pc, #204]	; (800b71c <InitExplore+0x108>)
#else


	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b650:	4d33      	ldr	r5, [pc, #204]	; (800b720 <InitExplore+0x10c>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b652:	4601      	mov	r1, r0
 800b654:	4620      	mov	r0, r4
 800b656:	f00a f809 	bl	801566c <iprintf>
	imu_check =IMU_init();
 800b65a:	f002 fa8b 	bl	800db74 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b65e:	4601      	mov	r1, r0
 800b660:	4620      	mov	r0, r4
 800b662:	f00a f803 	bl	801566c <iprintf>
	HAL_Delay(100);
 800b666:	2064      	movs	r0, #100	; 0x64
 800b668:	f003 face 	bl	800ec08 <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800b66c:	2138      	movs	r1, #56	; 0x38
 800b66e:	2037      	movs	r0, #55	; 0x37
 800b670:	f002 f958 	bl	800d924 <ReadIMU>
 800b674:	4b2b      	ldr	r3, [pc, #172]	; (800b724 <InitExplore+0x110>)
	Acceleration = 0;
 800b676:	4c2c      	ldr	r4, [pc, #176]	; (800b728 <InitExplore+0x114>)
	ZGyro = ReadIMU(0x37, 0x38);
 800b678:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800b67c:	ee10 0a10 	vmov	r0, s0
 800b680:	f7fc fe9a 	bl	80083b8 <__aeabi_f2d>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	4828      	ldr	r0, [pc, #160]	; (800b72c <InitExplore+0x118>)
 800b68a:	f009 ffef 	bl	801566c <iprintf>
	Motor_PWM_Start();
 800b68e:	f002 fbc5 	bl	800de1c <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800b692:	f002 fad9 	bl	800dc48 <EncoderStart>
	EmitterON();
 800b696:	f002 fae7 	bl	800dc68 <EmitterON>
	ADCStart();
 800b69a:	f001 ffbd 	bl	800d618 <ADCStart>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b69e:	f247 512f 	movw	r1, #29999	; 0x752f
 800b6a2:	4823      	ldr	r0, [pc, #140]	; (800b730 <InitExplore+0x11c>)
 800b6a4:	f002 fc52 	bl	800df4c <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b6a8:	f247 512f 	movw	r1, #29999	; 0x752f
 800b6ac:	4821      	ldr	r0, [pc, #132]	; (800b734 <InitExplore+0x120>)
 800b6ae:	f002 fc4d 	bl	800df4c <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800b6b2:	4821      	ldr	r0, [pc, #132]	; (800b738 <InitExplore+0x124>)
 800b6b4:	f006 f98f 	bl	80119d6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b6b8:	4820      	ldr	r0, [pc, #128]	; (800b73c <InitExplore+0x128>)
 800b6ba:	f006 f98c 	bl	80119d6 <HAL_TIM_Base_Start_IT>
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b6be:	4b20      	ldr	r3, [pc, #128]	; (800b740 <InitExplore+0x12c>)
	TargetVelocity[BODY] = 0;
 800b6c0:	4920      	ldr	r1, [pc, #128]	; (800b744 <InitExplore+0x130>)
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b6c2:	ed93 7a02 	vldr	s14, [r3, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800b6c6:	edd3 7a01 	vldr	s15, [r3, #4]
	TargetAngularV = 0;
 800b6ca:	4a1f      	ldr	r2, [pc, #124]	; (800b748 <InitExplore+0x134>)
	AngularAcceleration = 0;
 800b6cc:	481f      	ldr	r0, [pc, #124]	; (800b74c <InitExplore+0x138>)
	TargetVelocity[BODY] = 0;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	608b      	str	r3, [r1, #8]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b6d2:	ee77 6a67 	vsub.f32	s13, s14, s15
	TargetAngularV = 0;
 800b6d6:	6013      	str	r3, [r2, #0]
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b6d8:	491d      	ldr	r1, [pc, #116]	; (800b750 <InitExplore+0x13c>)
	TotalPulse[LEFT] = 0;
 800b6da:	4a1e      	ldr	r2, [pc, #120]	; (800b754 <InitExplore+0x140>)
	Acceleration = 0;
 800b6dc:	6023      	str	r3, [r4, #0]
	AngularAcceleration = 0;
 800b6de:	6003      	str	r3, [r0, #0]
	TotalPulse[LEFT] = 0;
 800b6e0:	2400      	movs	r4, #0

#endif
	PIDReset(L_VELO_PID);
 800b6e2:	2004      	movs	r0, #4
	TotalPulse[LEFT] = 0;
 800b6e4:	6014      	str	r4, [r2, #0]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b6e6:	edc5 6a00 	vstr	s13, [r5]
	TotalPulse[RIGHT] = 0;
 800b6ea:	6054      	str	r4, [r2, #4]
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b6ec:	ed81 7a02 	vstr	s14, [r1, #8]
	TotalPulse[BODY] = 0;
 800b6f0:	6094      	str	r4, [r2, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800b6f2:	edc1 7a01 	vstr	s15, [r1, #4]
	PIDReset(L_VELO_PID);
 800b6f6:	f002 ffa1 	bl	800e63c <PIDReset>
	PIDReset(R_VELO_PID);
 800b6fa:	2005      	movs	r0, #5
 800b6fc:	f002 ff9e 	bl	800e63c <PIDReset>

	PIDReset(A_VELO_PID);
 800b700:	4620      	mov	r0, r4
 800b702:	f002 ff9b 	bl	800e63c <PIDReset>
	PIDReset(L_WALL_PID);
 800b706:	2002      	movs	r0, #2
 800b708:	f002 ff98 	bl	800e63c <PIDReset>
	PIDReset(R_WALL_PID);
 800b70c:	2003      	movs	r0, #3
 800b70e:	f002 ff95 	bl	800e63c <PIDReset>
	PIDReset(D_WALL_PID);
 800b712:	2001      	movs	r0, #1

#endif
}
 800b714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800b718:	f002 bf90 	b.w	800e63c <PIDReset>
 800b71c:	08019228 	.word	0x08019228
 800b720:	20008980 	.word	0x20008980
 800b724:	20007fe4 	.word	0x20007fe4
 800b728:	20007f34 	.word	0x20007f34
 800b72c:	08019244 	.word	0x08019244
 800b730:	40000424 	.word	0x40000424
 800b734:	40000824 	.word	0x40000824
 800b738:	20008e48 	.word	0x20008e48
 800b73c:	20008c00 	.word	0x20008c00
 800b740:	200089cc 	.word	0x200089cc
 800b744:	2000895c 	.word	0x2000895c
 800b748:	2000896c 	.word	0x2000896c
 800b74c:	20007f3c 	.word	0x20007f3c
 800b750:	20008a8c 	.word	0x20008a8c
 800b754:	2000898c 	.word	0x2000898c

0800b758 <InitFastest>:

void InitFastest()
{
 800b758:	b538      	push	{r3, r4, r5, lr}
	Motor_PWM_Start();
 800b75a:	f002 fb5f 	bl	800de1c <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800b75e:	f002 fa73 	bl	800dc48 <EncoderStart>
	EmitterON();
 800b762:	f002 fa81 	bl	800dc68 <EmitterON>
	ADCStart();
 800b766:	f001 ff57 	bl	800d618 <ADCStart>

	uint8_t imu_check;
	imu_check = IMU_init();
 800b76a:	f002 fa03 	bl	800db74 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b76e:	4c3d      	ldr	r4, [pc, #244]	; (800b864 <InitFastest+0x10c>)

	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
 800b770:	4d3d      	ldr	r5, [pc, #244]	; (800b868 <InitFastest+0x110>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b772:	4601      	mov	r1, r0
 800b774:	4620      	mov	r0, r4
 800b776:	f009 ff79 	bl	801566c <iprintf>
	imu_check =IMU_init();
 800b77a:	f002 f9fb 	bl	800db74 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b77e:	4601      	mov	r1, r0
 800b780:	4620      	mov	r0, r4
 800b782:	f009 ff73 	bl	801566c <iprintf>
	HAL_Delay(100);
 800b786:	2064      	movs	r0, #100	; 0x64
 800b788:	f003 fa3e 	bl	800ec08 <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800b78c:	2138      	movs	r1, #56	; 0x38
 800b78e:	2037      	movs	r0, #55	; 0x37
 800b790:	f002 f8c8 	bl	800d924 <ReadIMU>
 800b794:	4b35      	ldr	r3, [pc, #212]	; (800b86c <InitFastest+0x114>)
	TargetVelocity[BODY] = 0;
 800b796:	4c36      	ldr	r4, [pc, #216]	; (800b870 <InitFastest+0x118>)
	ZGyro = ReadIMU(0x37, 0x38);
 800b798:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800b79c:	ee10 0a10 	vmov	r0, s0
 800b7a0:	f7fc fe0a 	bl	80083b8 <__aeabi_f2d>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	4832      	ldr	r0, [pc, #200]	; (800b874 <InitFastest+0x11c>)
 800b7aa:	f009 ff5f 	bl	801566c <iprintf>
	PIDChangeFlag(L_VELO_PID, 0);
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	2004      	movs	r0, #4
 800b7b2:	f002 ff2d 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	2005      	movs	r0, #5
 800b7ba:	f002 ff29 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b7be:	2100      	movs	r1, #0
 800b7c0:	2002      	movs	r0, #2
 800b7c2:	f002 ff25 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	2003      	movs	r0, #3
 800b7ca:	f002 ff21 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	f002 ff1d 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	4608      	mov	r0, r1
 800b7da:	f002 ff19 	bl	800e610 <PIDChangeFlag>
	Load_Gain();
 800b7de:	f002 fc85 	bl	800e0ec <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b7e2:	f247 512f 	movw	r1, #29999	; 0x752f
 800b7e6:	4824      	ldr	r0, [pc, #144]	; (800b878 <InitFastest+0x120>)
 800b7e8:	f002 fbb0 	bl	800df4c <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b7ec:	f247 512f 	movw	r1, #29999	; 0x752f
 800b7f0:	4822      	ldr	r0, [pc, #136]	; (800b87c <InitFastest+0x124>)
 800b7f2:	f002 fbab 	bl	800df4c <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800b7f6:	4822      	ldr	r0, [pc, #136]	; (800b880 <InitFastest+0x128>)
 800b7f8:	f006 f8ed 	bl	80119d6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b7fc:	4821      	ldr	r0, [pc, #132]	; (800b884 <InitFastest+0x12c>)
 800b7fe:	f006 f8ea 	bl	80119d6 <HAL_TIM_Base_Start_IT>
	Acceleration = 0;
	AngularAcceleration = 0;
 800b802:	4921      	ldr	r1, [pc, #132]	; (800b888 <InitFastest+0x130>)
	TotalPulse[LEFT] = 0;
 800b804:	4a21      	ldr	r2, [pc, #132]	; (800b88c <InitFastest+0x134>)
	Acceleration = 0;
 800b806:	4822      	ldr	r0, [pc, #136]	; (800b890 <InitFastest+0x138>)
	TargetVelocity[BODY] = 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	60a3      	str	r3, [r4, #8]
	TotalPulse[LEFT] = 0;
 800b80c:	2400      	movs	r4, #0
	TargetAngularV = 0;
 800b80e:	602b      	str	r3, [r5, #0]
	Acceleration = 0;
 800b810:	6003      	str	r3, [r0, #0]
	AngularAcceleration = 0;
 800b812:	600b      	str	r3, [r1, #0]
	TotalPulse[LEFT] = 0;
 800b814:	6014      	str	r4, [r2, #0]
	TotalPulse[RIGHT] = 0;
 800b816:	6054      	str	r4, [r2, #4]
	TotalPulse[BODY] = 0;
 800b818:	6094      	str	r4, [r2, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800b81a:	f002 f9ef 	bl	800dbfc <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800b81e:	4b1d      	ldr	r3, [pc, #116]	; (800b894 <InitFastest+0x13c>)
	TargetPhoto[SR] = Photo[SR];
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b820:	4a1d      	ldr	r2, [pc, #116]	; (800b898 <InitFastest+0x140>)
	TargetPhoto[SL] = Photo[SL];
 800b822:	ed93 7a02 	vldr	s14, [r3, #8]
	TargetPhoto[SR] = Photo[SR];
 800b826:	edd3 7a01 	vldr	s15, [r3, #4]
	TargetPhoto[SL] = Photo[SL];
 800b82a:	4b1c      	ldr	r3, [pc, #112]	; (800b89c <InitFastest+0x144>)
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b82c:	ee77 6a67 	vsub.f32	s13, s14, s15

	PIDReset(L_VELO_PID);
 800b830:	2004      	movs	r0, #4
	TargetPhoto[SL] = Photo[SL];
 800b832:	ed83 7a02 	vstr	s14, [r3, #8]
	TargetPhoto[SR] = Photo[SR];
 800b836:	edc3 7a01 	vstr	s15, [r3, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b83a:	edc2 6a00 	vstr	s13, [r2]
	PIDReset(L_VELO_PID);
 800b83e:	f002 fefd 	bl	800e63c <PIDReset>
	PIDReset(R_VELO_PID);
 800b842:	2005      	movs	r0, #5
 800b844:	f002 fefa 	bl	800e63c <PIDReset>
	PIDReset(A_VELO_PID);
 800b848:	4620      	mov	r0, r4
 800b84a:	f002 fef7 	bl	800e63c <PIDReset>
	PIDReset(L_WALL_PID);
 800b84e:	2002      	movs	r0, #2
 800b850:	f002 fef4 	bl	800e63c <PIDReset>
	PIDReset(R_WALL_PID);
 800b854:	2003      	movs	r0, #3
 800b856:	f002 fef1 	bl	800e63c <PIDReset>
	PIDReset(D_WALL_PID);
 800b85a:	2001      	movs	r0, #1


}
 800b85c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800b860:	f002 beec 	b.w	800e63c <PIDReset>
 800b864:	08019228 	.word	0x08019228
 800b868:	2000896c 	.word	0x2000896c
 800b86c:	20007fe4 	.word	0x20007fe4
 800b870:	2000895c 	.word	0x2000895c
 800b874:	08019244 	.word	0x08019244
 800b878:	40000424 	.word	0x40000424
 800b87c:	40000824 	.word	0x40000824
 800b880:	20008e48 	.word	0x20008e48
 800b884:	20008c00 	.word	0x20008c00
 800b888:	20007f3c 	.word	0x20007f3c
 800b88c:	2000898c 	.word	0x2000898c
 800b890:	20007f34 	.word	0x20007f34
 800b894:	200089cc 	.word	0x200089cc
 800b898:	20008980 	.word	0x20008980
 800b89c:	20008a8c 	.word	0x20008a8c

0800b8a0 <Debug>:
void Debug()
{
 800b8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if 1
	InitExplore();
	InitPosition();
	wall_init();

	TotalPulse[RIGHT] = 0;
 800b8a2:	4d2a      	ldr	r5, [pc, #168]	; (800b94c <Debug+0xac>)
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	PIDChangeFlag(A_VELO_PID, 1);
	ExploreVelocity=0;
 800b8a4:	4e2a      	ldr	r6, [pc, #168]	; (800b950 <Debug+0xb0>)
	TotalPulse[RIGHT] = 0;
 800b8a6:	2400      	movs	r4, #0
	InitExplore();
 800b8a8:	f7ff feb4 	bl	800b614 <InitExplore>
	InitPosition();
 800b8ac:	f7fd faa4 	bl	8008df8 <InitPosition>
	wall_init();
 800b8b0:	f7fe fe74 	bl	800a59c <wall_init>
	PIDChangeFlag(L_VELO_PID, 1);
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b8b8:	606c      	str	r4, [r5, #4]
	TotalPulse[LEFT] = 0;
 800b8ba:	602c      	str	r4, [r5, #0]
	TotalPulse[BODY] = 0;
 800b8bc:	60ac      	str	r4, [r5, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b8be:	f002 fea7 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b8c2:	2101      	movs	r1, #1
 800b8c4:	2005      	movs	r0, #5
 800b8c6:	f002 fea3 	bl	800e610 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800b8ca:	68a9      	ldr	r1, [r5, #8]
 800b8cc:	4821      	ldr	r0, [pc, #132]	; (800b954 <Debug+0xb4>)
 800b8ce:	682a      	ldr	r2, [r5, #0]
 800b8d0:	686b      	ldr	r3, [r5, #4]
	}
	PIDChangeFlag(F_WALL_PID, 0);
#endif
#if 1 //直進テスト
	ExploreVelocity = 135;
	Pos.Dir = front;
 800b8d2:	4d21      	ldr	r5, [pc, #132]	; (800b958 <Debug+0xb8>)
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800b8d4:	f009 feca 	bl	801566c <iprintf>
	PIDChangeFlag(D_WALL_PID, 0);
 800b8d8:	4621      	mov	r1, r4
 800b8da:	2001      	movs	r0, #1
 800b8dc:	f002 fe98 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	2002      	movs	r0, #2
 800b8e4:	f002 fe94 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	2003      	movs	r0, #3
 800b8ec:	f002 fe90 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800b8f0:	2101      	movs	r1, #1
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f002 fe8c 	bl	800e610 <PIDChangeFlag>
	ExploreVelocity=0;
 800b8f8:	2700      	movs	r7, #0
	ChangeLED(3);
 800b8fa:	2003      	movs	r0, #3
	ExploreVelocity=0;
 800b8fc:	6037      	str	r7, [r6, #0]
	ChangeLED(3);
 800b8fe:	f002 f9cf 	bl	800dca0 <ChangeLED>
	ExploreVelocity = 135;
 800b902:	eddf 0a16 	vldr	s1, [pc, #88]	; 800b95c <Debug+0xbc>
	IT_mode = EXPLORE;
 800b906:	4b16      	ldr	r3, [pc, #88]	; (800b960 <Debug+0xc0>)
	Accel(61.75,ExploreVelocity);
 800b908:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800b964 <Debug+0xc4>
	ExploreVelocity = 135;
 800b90c:	edc6 0a00 	vstr	s1, [r6]
	IT_mode = EXPLORE;
 800b910:	2206      	movs	r2, #6
 800b912:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800b914:	712c      	strb	r4, [r5, #4]
	Accel(61.75,ExploreVelocity);
 800b916:	f7fd fff3 	bl	8009900 <Accel>
	for(int i=0; i < 1; i++)
	{
		Pos.Dir = front;
		GoStraight(90, ExploreVelocity, AddVelocity);
 800b91a:	4b13      	ldr	r3, [pc, #76]	; (800b968 <Debug+0xc8>)
 800b91c:	edd6 0a00 	vldr	s1, [r6]
 800b920:	edd3 7a00 	vldr	s15, [r3]
 800b924:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800b96c <Debug+0xcc>
		Pos.Dir = front;
 800b928:	712c      	strb	r4, [r5, #4]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800b92a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b92e:	ee17 0a90 	vmov	r0, s15
 800b932:	f7fe f919 	bl	8009b68 <GoStraight>
		//Pos.Dir = right;
		SlalomRight();
 800b936:	f7fd fcab 	bl	8009290 <SlalomRight>

	}
	Pos.Dir = front;
	//Decel(45,0);
	TargetVelocity[BODY] = 0;
 800b93a:	4b0d      	ldr	r3, [pc, #52]	; (800b970 <Debug+0xd0>)
	Pos.Dir = front;
 800b93c:	712c      	strb	r4, [r5, #4]
	TargetVelocity[BODY] = 0;
 800b93e:	609f      	str	r7, [r3, #8]
	HAL_Delay(1000);
 800b940:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	while(1)
	{
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
 800b944:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_Delay(1000);
 800b948:	f003 b95e 	b.w	800ec08 <HAL_Delay>
 800b94c:	2000898c 	.word	0x2000898c
 800b950:	20008a80 	.word	0x20008a80
 800b954:	08019144 	.word	0x08019144
 800b958:	20000004 	.word	0x20000004
 800b95c:	43070000 	.word	0x43070000
 800b960:	2000894c 	.word	0x2000894c
 800b964:	42770000 	.word	0x42770000
 800b968:	20008968 	.word	0x20008968
 800b96c:	42b40000 	.word	0x42b40000
 800b970:	2000895c 	.word	0x2000895c

0800b974 <ParameterSetting>:
void ParameterSetting()
{
 800b974:	b508      	push	{r3, lr}
	Load_Gain();
 800b976:	f002 fbb9 	bl	800e0ec <Load_Gain>
	Change_Gain();

}
 800b97a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Change_Gain();
 800b97e:	f002 bc8f 	b.w	800e2a0 <Change_Gain>
 800b982:	bf00      	nop

0800b984 <GainTestRWall>:
	{
		TargetVelocity[BODY] = 300;
	}
}
void GainTestRWall()
{
 800b984:	b508      	push	{r3, lr}
	IT_mode = EXPLORE;
 800b986:	4b16      	ldr	r3, [pc, #88]	; (800b9e0 <GainTestRWall+0x5c>)
 800b988:	2206      	movs	r2, #6
 800b98a:	601a      	str	r2, [r3, #0]
	InitExplore();
 800b98c:	f7ff fe42 	bl	800b614 <InitExplore>
	InitPosition();
 800b990:	f7fd fa32 	bl	8008df8 <InitPosition>
	wall_init();
 800b994:	f7fe fe02 	bl	800a59c <wall_init>
	TotalPulse[RIGHT] = 0;
 800b998:	4b12      	ldr	r3, [pc, #72]	; (800b9e4 <GainTestRWall+0x60>)
 800b99a:	2500      	movs	r5, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800b99c:	2101      	movs	r1, #1
 800b99e:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b9a0:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b9a2:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800b9a4:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b9a6:	f002 fe33 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b9aa:	2101      	movs	r1, #1
 800b9ac:	2005      	movs	r0, #5
 800b9ae:	f002 fe2f 	bl	800e610 <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	2001      	movs	r0, #1
 800b9b6:	f002 fe2b 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	2002      	movs	r0, #2
 800b9be:	f002 fe27 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800b9c2:	2101      	movs	r1, #1
 800b9c4:	2003      	movs	r0, #3
 800b9c6:	f002 fe23 	bl	800e610 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800b9ca:	4b07      	ldr	r3, [pc, #28]	; (800b9e8 <GainTestRWall+0x64>)
 800b9cc:	2400      	movs	r4, #0
	ChangeLED(1);
 800b9ce:	2001      	movs	r0, #1
	ExploreVelocity=0;
 800b9d0:	601c      	str	r4, [r3, #0]
	ChangeLED(1);
 800b9d2:	f002 f965 	bl	800dca0 <ChangeLED>
 800b9d6:	4a05      	ldr	r2, [pc, #20]	; (800b9ec <GainTestRWall+0x68>)
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800b9d8:	4623      	mov	r3, r4
 800b9da:	6093      	str	r3, [r2, #8]
 800b9dc:	e7fd      	b.n	800b9da <GainTestRWall+0x56>
 800b9de:	bf00      	nop
 800b9e0:	2000894c 	.word	0x2000894c
 800b9e4:	2000898c 	.word	0x2000898c
 800b9e8:	20008a80 	.word	0x20008a80
 800b9ec:	2000895c 	.word	0x2000895c

0800b9f0 <GainTestDWall>:

	}
}
void GainTestDWall()
{
 800b9f0:	b580      	push	{r7, lr}
	IT_mode = EXPLORE;
 800b9f2:	4b25      	ldr	r3, [pc, #148]	; (800ba88 <GainTestDWall+0x98>)
 800b9f4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800ba98 <GainTestDWall+0xa8>
 800b9f8:	4c24      	ldr	r4, [pc, #144]	; (800ba8c <GainTestDWall+0x9c>)
	ExploreVelocity=0;
	ChangeLED(2);
	while(1)
	{
		TargetVelocity[BODY] = 0;
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800b9fa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800ba9c <GainTestDWall+0xac>
	IT_mode = EXPLORE;
 800b9fe:	2206      	movs	r2, #6
{
 800ba00:	b086      	sub	sp, #24
	IT_mode = EXPLORE;
 800ba02:	601a      	str	r2, [r3, #0]
	InitExplore();
 800ba04:	f7ff fe06 	bl	800b614 <InitExplore>
	InitPosition();
 800ba08:	f7fd f9f6 	bl	8008df8 <InitPosition>
	wall_init();
 800ba0c:	f7fe fdc6 	bl	800a59c <wall_init>
	TotalPulse[RIGHT] = 0;
 800ba10:	4b1f      	ldr	r3, [pc, #124]	; (800ba90 <GainTestDWall+0xa0>)
 800ba12:	2600      	movs	r6, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800ba14:	2101      	movs	r1, #1
 800ba16:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800ba18:	605e      	str	r6, [r3, #4]
	TotalPulse[LEFT] = 0;
 800ba1a:	601e      	str	r6, [r3, #0]
	TotalPulse[BODY] = 0;
 800ba1c:	609e      	str	r6, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800ba1e:	f002 fdf7 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800ba22:	2101      	movs	r1, #1
 800ba24:	2005      	movs	r0, #5
 800ba26:	f002 fdf3 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 1);
 800ba2a:	2101      	movs	r1, #1
 800ba2c:	4608      	mov	r0, r1
 800ba2e:	f002 fdef 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800ba32:	4631      	mov	r1, r6
 800ba34:	2002      	movs	r0, #2
 800ba36:	f002 fdeb 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800ba3a:	2003      	movs	r0, #3
 800ba3c:	4631      	mov	r1, r6
 800ba3e:	f002 fde7 	bl	800e610 <PIDChangeFlag>
	ExploreVelocity=0;
 800ba42:	4b14      	ldr	r3, [pc, #80]	; (800ba94 <GainTestDWall+0xa4>)
 800ba44:	2500      	movs	r5, #0
	ChangeLED(2);
 800ba46:	2002      	movs	r0, #2
	ExploreVelocity=0;
 800ba48:	601d      	str	r5, [r3, #0]
	ChangeLED(2);
 800ba4a:	f002 f929 	bl	800dca0 <ChangeLED>
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800ba4e:	6820      	ldr	r0, [r4, #0]
		TargetVelocity[BODY] = 0;
 800ba50:	f8c9 5008 	str.w	r5, [r9, #8]
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800ba54:	f7fc fcb0 	bl	80083b8 <__aeabi_f2d>
 800ba58:	4606      	mov	r6, r0
 800ba5a:	6860      	ldr	r0, [r4, #4]
 800ba5c:	460f      	mov	r7, r1
 800ba5e:	f7fc fcab 	bl	80083b8 <__aeabi_f2d>
 800ba62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba66:	68a0      	ldr	r0, [r4, #8]
 800ba68:	f7fc fca6 	bl	80083b8 <__aeabi_f2d>
 800ba6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba70:	68e0      	ldr	r0, [r4, #12]
 800ba72:	f7fc fca1 	bl	80083b8 <__aeabi_f2d>
 800ba76:	4632      	mov	r2, r6
 800ba78:	e9cd 0100 	strd	r0, r1, [sp]
 800ba7c:	463b      	mov	r3, r7
 800ba7e:	4640      	mov	r0, r8
 800ba80:	f009 fdf4 	bl	801566c <iprintf>
 800ba84:	e7e3      	b.n	800ba4e <GainTestDWall+0x5e>
 800ba86:	bf00      	nop
 800ba88:	2000894c 	.word	0x2000894c
 800ba8c:	200089cc 	.word	0x200089cc
 800ba90:	2000898c 	.word	0x2000898c
 800ba94:	20008a80 	.word	0x20008a80
 800ba98:	2000895c 	.word	0x2000895c
 800ba9c:	080191f8 	.word	0x080191f8

0800baa0 <WritingFree>:
		//printf("%f, %f\r\n", AngularV, Angle);

	}
}
void WritingFree()
{
 800baa0:	b508      	push	{r3, lr}
	IT_mode = WRITINGFREE;
 800baa2:	4b29      	ldr	r3, [pc, #164]	; (800bb48 <WritingFree+0xa8>)
	Rotate(90, M_PI);
	HAL_Delay(500);

	while(1)
	{
		Rotate(90, M_PI);
 800baa4:	ed9f 9a29 	vldr	s18, [pc, #164]	; 800bb4c <WritingFree+0xac>
 800baa8:	ed9f 8a29 	vldr	s16, [pc, #164]	; 800bb50 <WritingFree+0xb0>

		HAL_Delay(500);
		Rotate(90, -M_PI);
 800baac:	eddf 8a29 	vldr	s17, [pc, #164]	; 800bb54 <WritingFree+0xb4>
	IT_mode = WRITINGFREE;
 800bab0:	2507      	movs	r5, #7
 800bab2:	601d      	str	r5, [r3, #0]
	InitExplore();
 800bab4:	f7ff fdae 	bl	800b614 <InitExplore>
	printf("3\r\n");
 800bab8:	4827      	ldr	r0, [pc, #156]	; (800bb58 <WritingFree+0xb8>)
 800baba:	f009 fe5f 	bl	801577c <puts>
	InitPosition();
 800babe:	f7fd f99b 	bl	8008df8 <InitPosition>
	wall_init();
 800bac2:	f7fe fd6b 	bl	800a59c <wall_init>
	printf("4\r\n");
 800bac6:	4825      	ldr	r0, [pc, #148]	; (800bb5c <WritingFree+0xbc>)
 800bac8:	f009 fe58 	bl	801577c <puts>
	TotalPulse[RIGHT] = 0;
 800bacc:	4b24      	ldr	r3, [pc, #144]	; (800bb60 <WritingFree+0xc0>)
 800bace:	2400      	movs	r4, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800bad0:	2101      	movs	r1, #1
 800bad2:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bad4:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bad6:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800bad8:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bada:	f002 fd99 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bade:	2101      	movs	r1, #1
 800bae0:	2005      	movs	r0, #5
 800bae2:	f002 fd95 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800bae6:	4621      	mov	r1, r4
 800bae8:	2001      	movs	r0, #1
 800baea:	f002 fd91 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800baee:	4621      	mov	r1, r4
 800baf0:	2002      	movs	r0, #2
 800baf2:	f002 fd8d 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800baf6:	4621      	mov	r1, r4
 800baf8:	2003      	movs	r0, #3
 800bafa:	f002 fd89 	bl	800e610 <PIDChangeFlag>
	ExploreVelocity=0;
 800bafe:	4b19      	ldr	r3, [pc, #100]	; (800bb64 <WritingFree+0xc4>)
 800bb00:	2200      	movs	r2, #0
	ChangeLED(7);
 800bb02:	4628      	mov	r0, r5
	ExploreVelocity=0;
 800bb04:	601a      	str	r2, [r3, #0]
	ChangeLED(7);
 800bb06:	f002 f8cb 	bl	800dca0 <ChangeLED>
	Rotate(90, M_PI);
 800bb0a:	eef0 0a49 	vmov.f32	s1, s18
 800bb0e:	eeb0 0a48 	vmov.f32	s0, s16
 800bb12:	f7fd fa25 	bl	8008f60 <Rotate>
	HAL_Delay(500);
 800bb16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bb1a:	f003 f875 	bl	800ec08 <HAL_Delay>
		Rotate(90, M_PI);
 800bb1e:	eef0 0a49 	vmov.f32	s1, s18
 800bb22:	eeb0 0a48 	vmov.f32	s0, s16
 800bb26:	f7fd fa1b 	bl	8008f60 <Rotate>
		HAL_Delay(500);
 800bb2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bb2e:	f003 f86b 	bl	800ec08 <HAL_Delay>
		Rotate(90, -M_PI);
 800bb32:	eef0 0a68 	vmov.f32	s1, s17
 800bb36:	eeb0 0a48 	vmov.f32	s0, s16
 800bb3a:	f7fd fa11 	bl	8008f60 <Rotate>

		HAL_Delay(500);
 800bb3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bb42:	f003 f861 	bl	800ec08 <HAL_Delay>
 800bb46:	e7ea      	b.n	800bb1e <WritingFree+0x7e>
 800bb48:	2000894c 	.word	0x2000894c
 800bb4c:	40490fdb 	.word	0x40490fdb
 800bb50:	42b40000 	.word	0x42b40000
 800bb54:	c0490fdb 	.word	0xc0490fdb
 800bb58:	08019278 	.word	0x08019278
 800bb5c:	0801927c 	.word	0x0801927c
 800bb60:	2000898c 	.word	0x2000898c
 800bb64:	20008a80 	.word	0x20008a80

0800bb68 <FastestRun>:
	}
	//探索の場合は迷路とステータスの準備
}

void FastestRun()
{
 800bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6c:	ed2d 8b02 	vpush	{d8}
	IT_mode = EXPLORE;
 800bb70:	4bb4      	ldr	r3, [pc, #720]	; (800be44 <FastestRun+0x2dc>)
	InitPosition();


	wall_init();

	TotalPulse[RIGHT] = 0;
 800bb72:	4eb5      	ldr	r6, [pc, #724]	; (800be48 <FastestRun+0x2e0>)
{
 800bb74:	b085      	sub	sp, #20
	IT_mode = EXPLORE;
 800bb76:	2206      	movs	r2, #6
	HAL_Delay(100);
 800bb78:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800bb7a:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800bb7c:	f003 f844 	bl	800ec08 <HAL_Delay>
	int8_t mode=1;
 800bb80:	aa04      	add	r2, sp, #16
 800bb82:	2401      	movs	r4, #1
 800bb84:	f802 4d02 	strb.w	r4, [r2, #-2]!
	  ModeSelect( 1, 2, &mode);
 800bb88:	2102      	movs	r1, #2
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f002 ff3e 	bl	800ea0c <ModeSelect>
	  Signal( mode );
 800bb90:	f99d 000e 	ldrsb.w	r0, [sp, #14]
 800bb94:	f002 fece 	bl	800e934 <Signal>
		HAL_Delay(100);
 800bb98:	2064      	movs	r0, #100	; 0x64
 800bb9a:	f003 f835 	bl	800ec08 <HAL_Delay>
		  int8_t mode2=1;
 800bb9e:	aa04      	add	r2, sp, #16
		  ModeSelect( 1, 4, &mode2);
 800bba0:	2104      	movs	r1, #4
		  int8_t mode2=1;
 800bba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
		  ModeSelect( 1, 4, &mode2);
 800bba6:	4620      	mov	r0, r4
 800bba8:	f002 ff30 	bl	800ea0c <ModeSelect>
		  Signal( mode2 );
 800bbac:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800bbb0:	f002 fec0 	bl	800e934 <Signal>
	TotalPulse[RIGHT] = 0;
 800bbb4:	2500      	movs	r5, #0
		  PhotoSwitch();
 800bbb6:	f002 feff 	bl	800e9b8 <PhotoSwitch>
	InitFastest();
 800bbba:	f7ff fdcd 	bl	800b758 <InitFastest>
	InitPosition();
 800bbbe:	f7fd f91b 	bl	8008df8 <InitPosition>
	wall_init();
 800bbc2:	f7fe fceb 	bl	800a59c <wall_init>
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bbca:	6075      	str	r5, [r6, #4]
	TotalPulse[LEFT] = 0;
 800bbcc:	6035      	str	r5, [r6, #0]
	TotalPulse[BODY] = 0;
 800bbce:	60b5      	str	r5, [r6, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bbd0:	f002 fd1e 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	2005      	movs	r0, #5
 800bbd8:	f002 fd1a 	bl	800e610 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800bbdc:	68b1      	ldr	r1, [r6, #8]
 800bbde:	489b      	ldr	r0, [pc, #620]	; (800be4c <FastestRun+0x2e4>)
 800bbe0:	6832      	ldr	r2, [r6, #0]
 800bbe2:	6873      	ldr	r3, [r6, #4]
 800bbe4:	f009 fd42 	bl	801566c <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800bbe8:	4629      	mov	r1, r5
 800bbea:	4620      	mov	r0, r4
 800bbec:	f002 fd10 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	2002      	movs	r0, #2
 800bbf4:	f002 fd0c 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	2003      	movs	r0, #3
 800bbfc:	f002 fd08 	bl	800e610 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode = 'T';
	if(mode == 1)
 800bc00:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 800bc04:	42a3      	cmp	r3, r4
 800bc06:	f000 80fa 	beq.w	800bdfe <FastestRun+0x296>
		ExploreVelocity = 400;
		turn_mode = 'T';
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 800bec8 <FastestRun+0x360>
 800bc10:	bf14      	ite	ne
 800bc12:	f04f 0a54 	movne.w	sl, #84	; 0x54
 800bc16:	f04f 0a53 	moveq.w	sl, #83	; 0x53
	}

	switch(mode2)
 800bc1a:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	2b03      	cmp	r3, #3
 800bc22:	d815      	bhi.n	800bc50 <FastestRun+0xe8>
 800bc24:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bc28:	00fe0158 	.word	0x00fe0158
 800bc2c:	000400f3 	.word	0x000400f3
		Sla.Theta1 = 30;
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
 800bc30:	4a87      	ldr	r2, [pc, #540]	; (800be50 <FastestRun+0x2e8>)
		Sla.Pre = 3;
 800bc32:	4b88      	ldr	r3, [pc, #544]	; (800be54 <FastestRun+0x2ec>)
		ExploreVelocity=300;
 800bc34:	f8c8 2000 	str.w	r2, [r8]
		Sla.Pre = 3;
 800bc38:	4a87      	ldr	r2, [pc, #540]	; (800be58 <FastestRun+0x2f0>)
 800bc3a:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800bc3c:	4887      	ldr	r0, [pc, #540]	; (800be5c <FastestRun+0x2f4>)
		Sla.Theta1 = 30;
		Sla.Theta2 = 60;
 800bc3e:	4988      	ldr	r1, [pc, #544]	; (800be60 <FastestRun+0x2f8>)
		Sla.Fol = 5;
 800bc40:	4a88      	ldr	r2, [pc, #544]	; (800be64 <FastestRun+0x2fc>)
 800bc42:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.117;
 800bc44:	6098      	str	r0, [r3, #8]
		Sla.Theta3 = 90;
 800bc46:	4a88      	ldr	r2, [pc, #544]	; (800be68 <FastestRun+0x300>)
		Sla.Theta1 = 30;
 800bc48:	4888      	ldr	r0, [pc, #544]	; (800be6c <FastestRun+0x304>)
 800bc4a:	6118      	str	r0, [r3, #16]
		Sla.Theta2 = 60;
 800bc4c:	6159      	str	r1, [r3, #20]
		Sla.Theta3 = 90;
 800bc4e:	619a      	str	r2, [r3, #24]
		break;

	}

	ChangeLED(4);
 800bc50:	2004      	movs	r0, #4
 800bc52:	f002 f825 	bl	800dca0 <ChangeLED>

	VelocityMax = false;
 800bc56:	4b86      	ldr	r3, [pc, #536]	; (800be70 <FastestRun+0x308>)

	SearchOrFast = 1;
 800bc58:	f8df 9270 	ldr.w	r9, [pc, #624]	; 800becc <FastestRun+0x364>
//			HAL_Delay(300);
//			break;
//	}
	//shiftPos();

	TargetVelocity[BODY] = 0;
 800bc5c:	ed9f 8a85 	vldr	s16, [pc, #532]	; 800be74 <FastestRun+0x30c>
 800bc60:	4a85      	ldr	r2, [pc, #532]	; (800be78 <FastestRun+0x310>)
	Calc = SearchOrFast;
 800bc62:	4f86      	ldr	r7, [pc, #536]	; (800be7c <FastestRun+0x314>)
	Acceleration = 0;
 800bc64:	4d86      	ldr	r5, [pc, #536]	; (800be80 <FastestRun+0x318>)
	TargetAngularV = 0;
 800bc66:	4887      	ldr	r0, [pc, #540]	; (800be84 <FastestRun+0x31c>)
	TargetAngle = 0;
 800bc68:	4987      	ldr	r1, [pc, #540]	; (800be88 <FastestRun+0x320>)
        	case back:
        		//Uターンして直進.加速できる
        		Calc = 1;//マップ更新したくないときは1を代入。
        		GoBack();
        		Calc = SearchOrFast;
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800bc6a:	eddf 8a88 	vldr	s17, [pc, #544]	; 800be8c <FastestRun+0x324>
 800bc6e:	f8df b260 	ldr.w	fp, [pc, #608]	; 800bed0 <FastestRun+0x368>
	VelocityMax = false;
 800bc72:	2400      	movs	r4, #0
 800bc74:	701c      	strb	r4, [r3, #0]
	SearchOrFast = 1;
 800bc76:	2301      	movs	r3, #1
 800bc78:	f8c9 3000 	str.w	r3, [r9]
	Calc = SearchOrFast;
 800bc7c:	f8d9 3000 	ldr.w	r3, [r9]
 800bc80:	603b      	str	r3, [r7, #0]
	Angle = 0;
 800bc82:	4b83      	ldr	r3, [pc, #524]	; (800be90 <FastestRun+0x328>)
	TargetVelocity[BODY] = 0;
 800bc84:	ed82 8a02 	vstr	s16, [r2, #8]
	goal_edge_num = GOAL_SIZE_X;
 800bc88:	4a82      	ldr	r2, [pc, #520]	; (800be94 <FastestRun+0x32c>)
	Acceleration = 0;
 800bc8a:	ed85 8a00 	vstr	s16, [r5]
	goal_edge_num = GOAL_SIZE_X;
 800bc8e:	2602      	movs	r6, #2
	TargetAngularV = 0;
 800bc90:	ed80 8a00 	vstr	s16, [r0]
	PIDReset(L_VELO_PID);
 800bc94:	2004      	movs	r0, #4
	goal_edge_num = GOAL_SIZE_X;
 800bc96:	7016      	strb	r6, [r2, #0]
	TargetAngle = 0;
 800bc98:	ed81 8a00 	vstr	s16, [r1]
	Angle = 0;
 800bc9c:	ed83 8a00 	vstr	s16, [r3]
	PIDReset(L_VELO_PID);
 800bca0:	f002 fccc 	bl	800e63c <PIDReset>
	PIDReset(R_VELO_PID);
 800bca4:	2005      	movs	r0, #5
 800bca6:	f002 fcc9 	bl	800e63c <PIDReset>
	PIDReset(A_VELO_PID);
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f002 fcc6 	bl	800e63c <PIDReset>
	PIDReset(L_WALL_PID);
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	f002 fcc3 	bl	800e63c <PIDReset>
	PIDReset(R_WALL_PID);
 800bcb6:	2003      	movs	r0, #3
 800bcb8:	f002 fcc0 	bl	800e63c <PIDReset>
	initSearchData(&my_map, &my_mouse);
 800bcbc:	4976      	ldr	r1, [pc, #472]	; (800be98 <FastestRun+0x330>)
 800bcbe:	4877      	ldr	r0, [pc, #476]	; (800be9c <FastestRun+0x334>)
 800bcc0:	460d      	mov	r5, r1
 800bcc2:	f001 fa5d 	bl	800d180 <initSearchData>
	flashCopyNodesToRam(); //existenceだけ
 800bcc6:	f7fe fcad 	bl	800a624 <flashCopyNodesToRam>
	updateAllNodeWeight(&my_map, GOAL_X, GOAL_Y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x03);
 800bcca:	2207      	movs	r2, #7
 800bccc:	2103      	movs	r1, #3
 800bcce:	4633      	mov	r3, r6
 800bcd0:	9600      	str	r6, [sp, #0]
 800bcd2:	9101      	str	r1, [sp, #4]
 800bcd4:	4871      	ldr	r0, [pc, #452]	; (800be9c <FastestRun+0x334>)
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	f7fe ff92 	bl	800ac00 <updateAllNodeWeight>
	HAL_Delay(200);
 800bcdc:	20c8      	movs	r0, #200	; 0xc8
 800bcde:	f002 ff93 	bl	800ec08 <HAL_Delay>
	Accel(61.5, ExploreVelocity);
 800bce2:	edd8 0a00 	vldr	s1, [r8]
 800bce6:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 800bea0 <FastestRun+0x338>
        shiftState(&my_mouse);
 800bcea:	462e      	mov	r6, r5
	Accel(61.5, ExploreVelocity);
 800bcec:	f7fd fe08 	bl	8009900 <Accel>
    while(! ((my_mouse.goal_lesser.x <= my_mouse.next.pos.x && my_mouse.next.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.next.pos.y && my_mouse.next.pos.y <= my_mouse.goal_larger.y)))
 800bcf0:	7d2b      	ldrb	r3, [r5, #20]
 800bcf2:	782a      	ldrb	r2, [r5, #0]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d809      	bhi.n	800bd0c <FastestRun+0x1a4>
 800bcf8:	78aa      	ldrb	r2, [r5, #2]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d306      	bcc.n	800bd0c <FastestRun+0x1a4>
 800bcfe:	7d6b      	ldrb	r3, [r5, #21]
 800bd00:	786a      	ldrb	r2, [r5, #1]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d802      	bhi.n	800bd0c <FastestRun+0x1a4>
 800bd06:	78ea      	ldrb	r2, [r5, #3]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d260      	bcs.n	800bdce <FastestRun+0x266>
        shiftState(&my_mouse);
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	f7ff fc75 	bl	800b5fc <shiftState>
        my_mouse.next.node = getNextNode(&my_map, my_mouse.now.car, my_mouse.now.node, 0x03);//これらの引数のどれかがいけない. 迷路、方角、ノードポインタ. 一発目の、ノードの重みがfffなのはなぜ？
 800bd12:	2303      	movs	r3, #3
 800bd14:	692a      	ldr	r2, [r5, #16]
 800bd16:	7aa9      	ldrb	r1, [r5, #10]
 800bd18:	4860      	ldr	r0, [pc, #384]	; (800be9c <FastestRun+0x334>)
 800bd1a:	f7ff f893 	bl	800ae44 <getNextNode>
        getNextState(&(my_mouse.now),&(my_mouse.next),my_mouse.next.node);
 800bd1e:	4961      	ldr	r1, [pc, #388]	; (800bea4 <FastestRun+0x33c>)
        my_mouse.next.node = getNextNode(&my_map, my_mouse.now.car, my_mouse.now.node, 0x03);//これらの引数のどれかがいけない. 迷路、方角、ノードポインタ. 一発目の、ノードの重みがfffなのはなぜ？
 800bd20:	61e8      	str	r0, [r5, #28]
 800bd22:	4602      	mov	r2, r0
        getNextState(&(my_mouse.now),&(my_mouse.next),my_mouse.next.node);
 800bd24:	f1a1 000c 	sub.w	r0, r1, #12
 800bd28:	f7ff fafa 	bl	800b320 <getNextState>
        	switch(my_mouse.next.dir)
 800bd2c:	7deb      	ldrb	r3, [r5, #23]
        AddVelocity = 0;
 800bd2e:	ed8b 8a00 	vstr	s16, [fp]
        	switch(my_mouse.next.dir)
 800bd32:	2b05      	cmp	r3, #5
 800bd34:	d80a      	bhi.n	800bd4c <FastestRun+0x1e4>
 800bd36:	e8df f003 	tbb	[pc, r3]
 800bd3a:	400b      	.short	0x400b
 800bd3c:	03162135 	.word	0x03162135
        		Calc = SearchOrFast;
        		TurnLeft(turn_mode);
        		break;
        	case left:
        		//左旋回
        		Calc = SearchOrFast;
 800bd40:	f8d9 3000 	ldr.w	r3, [r9]
 800bd44:	603b      	str	r3, [r7, #0]
        		TurnLeft(turn_mode);
 800bd46:	4650      	mov	r0, sl
 800bd48:	f7fe f8d0 	bl	8009eec <TurnLeft>
        		break;
        	}
        cnt++;
 800bd4c:	3401      	adds	r4, #1
 800bd4e:	e7cf      	b.n	800bcf0 <FastestRun+0x188>
        		Calc = SearchOrFast;
 800bd50:	f8d9 3000 	ldr.w	r3, [r9]
        		GoStraight(90, ExploreVelocity , 0);
 800bd54:	edd8 0a00 	vldr	s1, [r8]
        		Calc = SearchOrFast;
 800bd58:	603b      	str	r3, [r7, #0]
        		GoStraight(90, ExploreVelocity , 0);
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	eeb0 0a68 	vmov.f32	s0, s17
 800bd60:	f7fd ff02 	bl	8009b68 <GoStraight>
        		break;
 800bd64:	e7f2      	b.n	800bd4c <FastestRun+0x1e4>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800bd66:	2301      	movs	r3, #1
 800bd68:	603b      	str	r3, [r7, #0]
        		GoBack();
 800bd6a:	f7fe f8fb 	bl	8009f64 <GoBack>
        		Calc = SearchOrFast;
 800bd6e:	f8d9 3000 	ldr.w	r3, [r9]
 800bd72:	603b      	str	r3, [r7, #0]
        		TurnLeft(turn_mode);
 800bd74:	4650      	mov	r0, sl
 800bd76:	f7fe f8b9 	bl	8009eec <TurnLeft>
        		break;
 800bd7a:	e7e7      	b.n	800bd4c <FastestRun+0x1e4>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	603b      	str	r3, [r7, #0]
        		GoBack();
 800bd80:	f7fe f8f0 	bl	8009f64 <GoBack>
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800bd84:	eddb 7a00 	vldr	s15, [fp]
        		Calc = SearchOrFast;
 800bd88:	f8d9 3000 	ldr.w	r3, [r9]
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800bd8c:	edd8 0a00 	vldr	s1, [r8]
        		Calc = SearchOrFast;
 800bd90:	603b      	str	r3, [r7, #0]
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800bd92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd96:	eeb0 0a68 	vmov.f32	s0, s17
 800bd9a:	ee17 0a90 	vmov	r0, s15
 800bd9e:	f7fd fee3 	bl	8009b68 <GoStraight>
        		break;
 800bda2:	e7d3      	b.n	800bd4c <FastestRun+0x1e4>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800bda4:	2301      	movs	r3, #1
 800bda6:	603b      	str	r3, [r7, #0]
        		GoBack();
 800bda8:	f7fe f8dc 	bl	8009f64 <GoBack>
        		Calc = SearchOrFast;
 800bdac:	f8d9 3000 	ldr.w	r3, [r9]
 800bdb0:	603b      	str	r3, [r7, #0]
        		TurnRight(turn_mode);
 800bdb2:	4650      	mov	r0, sl
 800bdb4:	f7fe f85c 	bl	8009e70 <TurnRight>
        		break;
 800bdb8:	e7c8      	b.n	800bd4c <FastestRun+0x1e4>
        		ChangeLED(1);
 800bdba:	2001      	movs	r0, #1
 800bdbc:	f001 ff70 	bl	800dca0 <ChangeLED>
        		Calc = SearchOrFast;
 800bdc0:	f8d9 3000 	ldr.w	r3, [r9]
 800bdc4:	603b      	str	r3, [r7, #0]
        		TurnRight(turn_mode);
 800bdc6:	4650      	mov	r0, sl
 800bdc8:	f7fe f852 	bl	8009e70 <TurnRight>
        		break;
 800bdcc:	e7be      	b.n	800bd4c <FastestRun+0x1e4>
//    outputDataToFile(maze);

	//fast_run( X_GOAL_LESSER, Y_GOAL_LESSER,X_GOAL_LARGER,Y_GOAL_LARGER, turn_mode,0x03);

	//ゴールしたら減速して、停止。
	Decel(45,0);
 800bdce:	eddf 0a29 	vldr	s1, [pc, #164]	; 800be74 <FastestRun+0x30c>
 800bdd2:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800bea8 <FastestRun+0x340>
 800bdd6:	4d31      	ldr	r5, [pc, #196]	; (800be9c <FastestRun+0x334>)
	//終了合図
	Signal(7);

	while(1)
	{
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",cnt, my_map.RawNode[0][1].weight);
 800bdd8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800bed4 <FastestRun+0x36c>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800bddc:	4f33      	ldr	r7, [pc, #204]	; (800beac <FastestRun+0x344>)
	Decel(45,0);
 800bdde:	f7fd fe13 	bl	8009a08 <Decel>
	Signal(7);
 800bde2:	2007      	movs	r0, #7
 800bde4:	f002 fda6 	bl	800e934 <Signal>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800bde8:	462e      	mov	r6, r5
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",cnt, my_map.RawNode[0][1].weight);
 800bdea:	4621      	mov	r1, r4
 800bdec:	896a      	ldrh	r2, [r5, #10]
 800bdee:	4640      	mov	r0, r8
 800bdf0:	f009 fc3c 	bl	801566c <iprintf>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800bdf4:	4639      	mov	r1, r7
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f7fe fc5e 	bl	800a6b8 <printAllWeight>
 800bdfc:	e7f5      	b.n	800bdea <FastestRun+0x282>
		ExploreVelocity = 400;
 800bdfe:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800bec8 <FastestRun+0x360>
 800be02:	4b2b      	ldr	r3, [pc, #172]	; (800beb0 <FastestRun+0x348>)
 800be04:	f8c8 3000 	str.w	r3, [r8]
		turn_mode = 'T';
 800be08:	f04f 0a54 	mov.w	sl, #84	; 0x54
 800be0c:	e705      	b.n	800bc1a <FastestRun+0xb2>
		ExploreVelocity=180;
 800be0e:	4a29      	ldr	r2, [pc, #164]	; (800beb4 <FastestRun+0x34c>)
		Sla.Pre = 2;
 800be10:	4b10      	ldr	r3, [pc, #64]	; (800be54 <FastestRun+0x2ec>)
		ExploreVelocity=180;
 800be12:	f8c8 2000 	str.w	r2, [r8]
		Sla.Pre = 2;
 800be16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800be1a:	601a      	str	r2, [r3, #0]
		Sla.Alpha = 0.04;
 800be1c:	4826      	ldr	r0, [pc, #152]	; (800beb8 <FastestRun+0x350>)
		Sla.Theta2 = 60;
 800be1e:	4910      	ldr	r1, [pc, #64]	; (800be60 <FastestRun+0x2f8>)
		Sla.Fol = 3.5;
 800be20:	4a26      	ldr	r2, [pc, #152]	; (800bebc <FastestRun+0x354>)
 800be22:	e70e      	b.n	800bc42 <FastestRun+0xda>
		Sla.Pre = 5;
 800be24:	4b0b      	ldr	r3, [pc, #44]	; (800be54 <FastestRun+0x2ec>)
		Sla.Alpha = 0.0273;
 800be26:	4a26      	ldr	r2, [pc, #152]	; (800bec0 <FastestRun+0x358>)
		ExploreVelocity=135;
 800be28:	4926      	ldr	r1, [pc, #152]	; (800bec4 <FastestRun+0x35c>)
		Sla.Alpha = 0.0273;
 800be2a:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800be2c:	4a0f      	ldr	r2, [pc, #60]	; (800be6c <FastestRun+0x304>)
		Sla.Theta2 = 60;
 800be2e:	480c      	ldr	r0, [pc, #48]	; (800be60 <FastestRun+0x2f8>)
		ExploreVelocity=135;
 800be30:	f8c8 1000 	str.w	r1, [r8]
		Sla.Theta1 = 30;
 800be34:	611a      	str	r2, [r3, #16]
		Sla.Theta3 = 90;
 800be36:	490c      	ldr	r1, [pc, #48]	; (800be68 <FastestRun+0x300>)
		Sla.Pre = 5;
 800be38:	4a0a      	ldr	r2, [pc, #40]	; (800be64 <FastestRun+0x2fc>)
		Sla.Theta2 = 60;
 800be3a:	6158      	str	r0, [r3, #20]
		Sla.Theta3 = 90;
 800be3c:	6199      	str	r1, [r3, #24]
		Sla.Pre = 5;
 800be3e:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800be40:	605a      	str	r2, [r3, #4]
		break;
 800be42:	e705      	b.n	800bc50 <FastestRun+0xe8>
 800be44:	2000894c 	.word	0x2000894c
 800be48:	2000898c 	.word	0x2000898c
 800be4c:	08019144 	.word	0x08019144
 800be50:	43960000 	.word	0x43960000
 800be54:	200089a4 	.word	0x200089a4
 800be58:	40400000 	.word	0x40400000
 800be5c:	3def9db2 	.word	0x3def9db2
 800be60:	42700000 	.word	0x42700000
 800be64:	40a00000 	.word	0x40a00000
 800be68:	42b40000 	.word	0x42b40000
 800be6c:	41f00000 	.word	0x41f00000
 800be70:	20008a7e 	.word	0x20008a7e
 800be74:	00000000 	.word	0x00000000
 800be78:	2000895c 	.word	0x2000895c
 800be7c:	20008bfc 	.word	0x20008bfc
 800be80:	20007f34 	.word	0x20007f34
 800be84:	2000896c 	.word	0x2000896c
 800be88:	20007f48 	.word	0x20007f48
 800be8c:	42b40000 	.word	0x42b40000
 800be90:	20007f38 	.word	0x20007f38
 800be94:	20008988 	.word	0x20008988
 800be98:	200081fc 	.word	0x200081fc
 800be9c:	200083a8 	.word	0x200083a8
 800bea0:	42760000 	.word	0x42760000
 800bea4:	20008210 	.word	0x20008210
 800bea8:	42340000 	.word	0x42340000
 800beac:	20008204 	.word	0x20008204
 800beb0:	43c80000 	.word	0x43c80000
 800beb4:	43340000 	.word	0x43340000
 800beb8:	3d23d70a 	.word	0x3d23d70a
 800bebc:	40600000 	.word	0x40600000
 800bec0:	3cdfa440 	.word	0x3cdfa440
 800bec4:	43070000 	.word	0x43070000
 800bec8:	20008a80 	.word	0x20008a80
 800becc:	20008bf8 	.word	0x20008bf8
 800bed0:	20008968 	.word	0x20008968
 800bed4:	080191a4 	.word	0x080191a4
		Sla.Pre = 7;//9;
 800bed8:	4b07      	ldr	r3, [pc, #28]	; (800bef8 <FastestRun+0x390>)
		ExploreVelocity=90;
 800beda:	4a08      	ldr	r2, [pc, #32]	; (800befc <FastestRun+0x394>)
 800bedc:	f8c8 2000 	str.w	r2, [r8]
		Sla.Theta3 = 90;
 800bee0:	619a      	str	r2, [r3, #24]
		Sla.Pre = 7;//9;
 800bee2:	4a07      	ldr	r2, [pc, #28]	; (800bf00 <FastestRun+0x398>)
 800bee4:	601a      	str	r2, [r3, #0]
		Sla.Fol = 11;//13;
 800bee6:	4a07      	ldr	r2, [pc, #28]	; (800bf04 <FastestRun+0x39c>)
		Sla.Alpha = 0.014;
 800bee8:	4807      	ldr	r0, [pc, #28]	; (800bf08 <FastestRun+0x3a0>)
		Sla.Theta2 = 60;
 800beea:	4908      	ldr	r1, [pc, #32]	; (800bf0c <FastestRun+0x3a4>)
		Sla.Fol = 11;//13;
 800beec:	605a      	str	r2, [r3, #4]
		Sla.Theta1 = 30;
 800beee:	4a08      	ldr	r2, [pc, #32]	; (800bf10 <FastestRun+0x3a8>)
		Sla.Alpha = 0.014;
 800bef0:	6098      	str	r0, [r3, #8]
		Sla.Theta1 = 30;
 800bef2:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800bef4:	6159      	str	r1, [r3, #20]
		break;
 800bef6:	e6ab      	b.n	800bc50 <FastestRun+0xe8>
 800bef8:	200089a4 	.word	0x200089a4
 800befc:	42b40000 	.word	0x42b40000
 800bf00:	40e00000 	.word	0x40e00000
 800bf04:	41300000 	.word	0x41300000
 800bf08:	3c656042 	.word	0x3c656042
 800bf0c:	42700000 	.word	0x42700000
 800bf10:	41f00000 	.word	0x41f00000

0800bf14 <Explore>:
	}
}
void Explore()
{
 800bf14:	b5f0      	push	{r4, r5, r6, r7, lr}
	IT_mode = EXPLORE;
 800bf16:	4b72      	ldr	r3, [pc, #456]	; (800c0e0 <Explore+0x1cc>)
{
 800bf18:	b083      	sub	sp, #12
	IT_mode = EXPLORE;
 800bf1a:	2206      	movs	r2, #6
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800bf1c:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800bf1e:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800bf20:	f002 fe72 	bl	800ec08 <HAL_Delay>
	int8_t mode=1;
 800bf24:	aa02      	add	r2, sp, #8
 800bf26:	2401      	movs	r4, #1
 800bf28:	f802 4d02 	strb.w	r4, [r2, #-2]!
	ModeSelect( 1, 2, &mode);
 800bf2c:	2102      	movs	r1, #2
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f002 fd6c 	bl	800ea0c <ModeSelect>
	Signal( mode );
 800bf34:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 800bf38:	f002 fcfc 	bl	800e934 <Signal>
	HAL_Delay(100);
 800bf3c:	2064      	movs	r0, #100	; 0x64
 800bf3e:	f002 fe63 	bl	800ec08 <HAL_Delay>

	int8_t mode2=1;
 800bf42:	aa02      	add	r2, sp, #8
	ModeSelect( 1, 4, &mode2);
 800bf44:	2104      	movs	r1, #4
	int8_t mode2=1;
 800bf46:	f802 4d01 	strb.w	r4, [r2, #-1]!
	ModeSelect( 1, 4, &mode2);
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f002 fd5e 	bl	800ea0c <ModeSelect>
	Signal( mode2 );
 800bf50:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800bf54:	f002 fcee 	bl	800e934 <Signal>
	PhotoSwitch();
 800bf58:	f002 fd2e 	bl	800e9b8 <PhotoSwitch>
	//printf("test\r\n");
	InitExplore();
 800bf5c:	f7ff fb5a 	bl	800b614 <InitExplore>
	InitPosition();
 800bf60:	f7fc ff4a 	bl	8008df8 <InitPosition>
	printf("旧式の壁初期化\r\n");
 800bf64:	485f      	ldr	r0, [pc, #380]	; (800c0e4 <Explore+0x1d0>)
 800bf66:	f009 fc09 	bl	801577c <puts>
	wall_init();
 800bf6a:	f7fe fb17 	bl	800a59c <wall_init>

	printf("色々セット\r\n");
 800bf6e:	485e      	ldr	r0, [pc, #376]	; (800c0e8 <Explore+0x1d4>)
 800bf70:	f009 fc04 	bl	801577c <puts>
	TotalPulse[RIGHT] = 0;
 800bf74:	4b5d      	ldr	r3, [pc, #372]	; (800c0ec <Explore+0x1d8>)
 800bf76:	2500      	movs	r5, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800bf78:	4621      	mov	r1, r4
 800bf7a:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bf7c:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bf7e:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800bf80:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bf82:	f002 fb45 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bf86:	4621      	mov	r1, r4
 800bf88:	2005      	movs	r0, #5
 800bf8a:	f002 fb41 	bl	800e610 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800bf8e:	4629      	mov	r1, r5
 800bf90:	4620      	mov	r0, r4
 800bf92:	f002 fb3d 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bf96:	4629      	mov	r1, r5
 800bf98:	2002      	movs	r0, #2
 800bf9a:	f002 fb39 	bl	800e610 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	2003      	movs	r0, #3
 800bfa2:	f002 fb35 	bl	800e610 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	ChangeLED(2);
 800bfa6:	2002      	movs	r0, #2
 800bfa8:	f001 fe7a 	bl	800dca0 <ChangeLED>

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode = 'T';
	if(mode == 1)
 800bfac:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 800bfb0:	42a3      	cmp	r3, r4
 800bfb2:	d06c      	beq.n	800c08e <Explore+0x17a>
		turn_mode = 'T';
		ExploreVelocity=300;
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800bfb4:	2b02      	cmp	r3, #2
 800bfb6:	4c4e      	ldr	r4, [pc, #312]	; (800c0f0 <Explore+0x1dc>)
 800bfb8:	bf14      	ite	ne
 800bfba:	2654      	movne	r6, #84	; 0x54
 800bfbc:	2653      	moveq	r6, #83	; 0x53
	}

	switch(mode2)
 800bfbe:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	2b03      	cmp	r3, #3
 800bfc6:	d812      	bhi.n	800bfee <Explore+0xda>
 800bfc8:	e8df f003 	tbb	[pc, r3]
 800bfcc:	0266717b 	.word	0x0266717b
		Sla.Theta1 = 30;
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
 800bfd0:	4a48      	ldr	r2, [pc, #288]	; (800c0f4 <Explore+0x1e0>)
		Sla.Pre = 3;
 800bfd2:	4b49      	ldr	r3, [pc, #292]	; (800c0f8 <Explore+0x1e4>)
		ExploreVelocity=300;
 800bfd4:	6022      	str	r2, [r4, #0]
		Sla.Pre = 3;
 800bfd6:	4a49      	ldr	r2, [pc, #292]	; (800c0fc <Explore+0x1e8>)
 800bfd8:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800bfda:	4849      	ldr	r0, [pc, #292]	; (800c100 <Explore+0x1ec>)
		Sla.Theta1 = 30;
		Sla.Theta2 = 60;
 800bfdc:	4949      	ldr	r1, [pc, #292]	; (800c104 <Explore+0x1f0>)
		Sla.Fol = 5;
 800bfde:	4a4a      	ldr	r2, [pc, #296]	; (800c108 <Explore+0x1f4>)
 800bfe0:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.117;
 800bfe2:	6098      	str	r0, [r3, #8]
		Sla.Theta3 = 90;
 800bfe4:	4a49      	ldr	r2, [pc, #292]	; (800c10c <Explore+0x1f8>)
		Sla.Theta1 = 30;
 800bfe6:	484a      	ldr	r0, [pc, #296]	; (800c110 <Explore+0x1fc>)
 800bfe8:	6118      	str	r0, [r3, #16]
		Sla.Theta2 = 60;
 800bfea:	6159      	str	r1, [r3, #20]
		Sla.Theta3 = 90;
 800bfec:	619a      	str	r2, [r3, #24]
//			HAL_Delay(1000);
//		}
//	Pos.TargetX = X_GOAL_LESSER;
//	Pos.TargetY = Y_GOAL_LESSER;
//	goal_edge_num = two;
	VelocityMax = false;
 800bfee:	4d49      	ldr	r5, [pc, #292]	; (800c114 <Explore+0x200>)
	SearchOrFast = 0;
 800bff0:	4849      	ldr	r0, [pc, #292]	; (800c118 <Explore+0x204>)
	Calc = 0;
 800bff2:	4a4a      	ldr	r2, [pc, #296]	; (800c11c <Explore+0x208>)
//	Pos.Car = north;
//	Pos.NextX = Pos.X;
//	Pos.NextY = Pos.Y + 1;
//	Pos.NextCar = north;

	initSearchData(&my_map, &my_mouse);
 800bff4:	494a      	ldr	r1, [pc, #296]	; (800c120 <Explore+0x20c>)

//		//ChangeLED(Pos.Car);
//		KyushinJudge();
//		SelectAction(turn_mode);
//		shiftPos();
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800bff6:	4f4b      	ldr	r7, [pc, #300]	; (800c124 <Explore+0x210>)
	VelocityMax = false;
 800bff8:	2300      	movs	r3, #0
 800bffa:	702b      	strb	r3, [r5, #0]
	SearchOrFast = 0;
 800bffc:	6003      	str	r3, [r0, #0]
	initSearchData(&my_map, &my_mouse);
 800bffe:	4849      	ldr	r0, [pc, #292]	; (800c124 <Explore+0x210>)
	Calc = 0;
 800c000:	6013      	str	r3, [r2, #0]
	initSearchData(&my_map, &my_mouse);
 800c002:	f001 f8bd 	bl	800d180 <initSearchData>
	dbc = 1;
 800c006:	4b48      	ldr	r3, [pc, #288]	; (800c128 <Explore+0x214>)
	Accel(61.5, ExploreVelocity);
 800c008:	edd4 0a00 	vldr	s1, [r4]
 800c00c:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800c12c <Explore+0x218>
 800c010:	4d43      	ldr	r5, [pc, #268]	; (800c120 <Explore+0x20c>)
	dbc = 1;
 800c012:	2201      	movs	r2, #1
 800c014:	601a      	str	r2, [r3, #0]
	Accel(61.5, ExploreVelocity);
 800c016:	f7fd fc73 	bl	8009900 <Accel>
	ChangeLED(6);
 800c01a:	2006      	movs	r0, #6
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c01c:	462c      	mov	r4, r5
	ChangeLED(6);
 800c01e:	f001 fe3f 	bl	800dca0 <ChangeLED>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c022:	e001      	b.n	800c028 <Explore+0x114>
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c024:	f001 f9b6 	bl	800d394 <getNextDirection>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c028:	782a      	ldrb	r2, [r5, #0]
 800c02a:	7a2b      	ldrb	r3, [r5, #8]
 800c02c:	429a      	cmp	r2, r3
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c02e:	4621      	mov	r1, r4
 800c030:	4632      	mov	r2, r6
 800c032:	4638      	mov	r0, r7
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c034:	d8f6      	bhi.n	800c024 <Explore+0x110>
 800c036:	f895 c002 	ldrb.w	ip, [r5, #2]
 800c03a:	459c      	cmp	ip, r3
 800c03c:	d3f2      	bcc.n	800c024 <Explore+0x110>
 800c03e:	7a6b      	ldrb	r3, [r5, #9]
 800c040:	f895 c001 	ldrb.w	ip, [r5, #1]
 800c044:	459c      	cmp	ip, r3
 800c046:	d8ed      	bhi.n	800c024 <Explore+0x110>
 800c048:	f895 c003 	ldrb.w	ip, [r5, #3]
 800c04c:	459c      	cmp	ip, r3
 800c04e:	d3e9      	bcc.n	800c024 <Explore+0x110>
	}
//	while(1)
//	{
//		TargetVelocity[BODY] = 0;
//	}
	Decel(45, 0);
 800c050:	eddf 0a37 	vldr	s1, [pc, #220]	; 800c130 <Explore+0x21c>
 800c054:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800c134 <Explore+0x220>


while(1)
{
	//迷路データの出力
	printAllNodeExistence(&my_map);
 800c058:	4c32      	ldr	r4, [pc, #200]	; (800c124 <Explore+0x210>)
	Decel(45, 0);
 800c05a:	f7fd fcd5 	bl	8009a08 <Decel>
	WaitStopAndReset();//これがないとガクンとなる.
 800c05e:	f7fc ff3d 	bl	8008edc <WaitStopAndReset>
	shiftState(&my_mouse);
 800c062:	482f      	ldr	r0, [pc, #188]	; (800c120 <Explore+0x20c>)
 800c064:	f7ff faca 	bl	800b5fc <shiftState>
	Flash_clear_sector1();
 800c068:	f001 fbfc 	bl	800d864 <Flash_clear_sector1>
	flashStoreNodes();
 800c06c:	f7fe fa5a 	bl	800a524 <flashStoreNodes>
	Signal(7);
 800c070:	2007      	movs	r0, #7
 800c072:	f002 fc5f 	bl	800e934 <Signal>
	printAllNodeExistence(&my_map);
 800c076:	4620      	mov	r0, r4
 800c078:	f7fe fc68 	bl	800a94c <printAllNodeExistence>
	//printAllNode(&my_map); //drawを読み出す
	printMatrix16ValueFromNode(&my_map);
 800c07c:	4620      	mov	r0, r4
 800c07e:	f7fe fca7 	bl	800a9d0 <printMatrix16ValueFromNode>
	printAllWeight(&my_map, &(my_mouse.now.node->pos) );
 800c082:	6929      	ldr	r1, [r5, #16]
 800c084:	4620      	mov	r0, r4
 800c086:	3106      	adds	r1, #6
 800c088:	f7fe fb16 	bl	800a6b8 <printAllWeight>
 800c08c:	e7f3      	b.n	800c076 <Explore+0x162>
		ExploreVelocity=300;
 800c08e:	4c18      	ldr	r4, [pc, #96]	; (800c0f0 <Explore+0x1dc>)
 800c090:	4b18      	ldr	r3, [pc, #96]	; (800c0f4 <Explore+0x1e0>)
 800c092:	6023      	str	r3, [r4, #0]
		turn_mode = 'T';
 800c094:	2654      	movs	r6, #84	; 0x54
 800c096:	e792      	b.n	800bfbe <Explore+0xaa>
		ExploreVelocity=240;
 800c098:	4a27      	ldr	r2, [pc, #156]	; (800c138 <Explore+0x224>)
		Sla.Pre = 2;
 800c09a:	4b17      	ldr	r3, [pc, #92]	; (800c0f8 <Explore+0x1e4>)
		ExploreVelocity=240;
 800c09c:	6022      	str	r2, [r4, #0]
		Sla.Pre = 2;
 800c09e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c0a2:	601a      	str	r2, [r3, #0]
		Sla.Alpha = 0.078;
 800c0a4:	4825      	ldr	r0, [pc, #148]	; (800c13c <Explore+0x228>)
		Sla.Theta2 = 60;
 800c0a6:	4917      	ldr	r1, [pc, #92]	; (800c104 <Explore+0x1f0>)
		Sla.Fol = 16;
 800c0a8:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800c0ac:	e798      	b.n	800bfe0 <Explore+0xcc>
		ExploreVelocity=180;
 800c0ae:	4924      	ldr	r1, [pc, #144]	; (800c140 <Explore+0x22c>)
		Sla.Pre = 2;
 800c0b0:	4b11      	ldr	r3, [pc, #68]	; (800c0f8 <Explore+0x1e4>)
		ExploreVelocity=180;
 800c0b2:	6021      	str	r1, [r4, #0]
		Sla.Pre = 2;
 800c0b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c0b8:	6019      	str	r1, [r3, #0]
		Sla.Fol = 16.5;
 800c0ba:	4a22      	ldr	r2, [pc, #136]	; (800c144 <Explore+0x230>)
		Sla.Alpha = 0.043;
 800c0bc:	4822      	ldr	r0, [pc, #136]	; (800c148 <Explore+0x234>)
		Sla.Theta2 = 60;
 800c0be:	4911      	ldr	r1, [pc, #68]	; (800c104 <Explore+0x1f0>)
 800c0c0:	e78e      	b.n	800bfe0 <Explore+0xcc>
		Sla.Pre = 9;
 800c0c2:	4b0d      	ldr	r3, [pc, #52]	; (800c0f8 <Explore+0x1e4>)
		ExploreVelocity=90;
 800c0c4:	4a11      	ldr	r2, [pc, #68]	; (800c10c <Explore+0x1f8>)
 800c0c6:	6022      	str	r2, [r4, #0]
		Sla.Theta3 = 90;
 800c0c8:	619a      	str	r2, [r3, #24]
		Sla.Pre = 9;
 800c0ca:	4a20      	ldr	r2, [pc, #128]	; (800c14c <Explore+0x238>)
 800c0cc:	601a      	str	r2, [r3, #0]
		Sla.Fol = 20;
 800c0ce:	4a20      	ldr	r2, [pc, #128]	; (800c150 <Explore+0x23c>)
		Sla.Alpha = 0.014;
 800c0d0:	4820      	ldr	r0, [pc, #128]	; (800c154 <Explore+0x240>)
		Sla.Theta2 = 60;
 800c0d2:	490c      	ldr	r1, [pc, #48]	; (800c104 <Explore+0x1f0>)
		Sla.Fol = 20;
 800c0d4:	605a      	str	r2, [r3, #4]
		Sla.Theta1 = 30;
 800c0d6:	4a0e      	ldr	r2, [pc, #56]	; (800c110 <Explore+0x1fc>)
		Sla.Alpha = 0.014;
 800c0d8:	6098      	str	r0, [r3, #8]
		Sla.Theta1 = 30;
 800c0da:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c0dc:	6159      	str	r1, [r3, #20]
		break;
 800c0de:	e786      	b.n	800bfee <Explore+0xda>
 800c0e0:	2000894c 	.word	0x2000894c
 800c0e4:	08019178 	.word	0x08019178
 800c0e8:	08019190 	.word	0x08019190
 800c0ec:	2000898c 	.word	0x2000898c
 800c0f0:	20008a80 	.word	0x20008a80
 800c0f4:	43960000 	.word	0x43960000
 800c0f8:	200089a4 	.word	0x200089a4
 800c0fc:	40400000 	.word	0x40400000
 800c100:	3def9db2 	.word	0x3def9db2
 800c104:	42700000 	.word	0x42700000
 800c108:	40a00000 	.word	0x40a00000
 800c10c:	42b40000 	.word	0x42b40000
 800c110:	41f00000 	.word	0x41f00000
 800c114:	20008a7e 	.word	0x20008a7e
 800c118:	20008bf8 	.word	0x20008bf8
 800c11c:	20008bfc 	.word	0x20008bfc
 800c120:	200081fc 	.word	0x200081fc
 800c124:	200083a8 	.word	0x200083a8
 800c128:	20000228 	.word	0x20000228
 800c12c:	42760000 	.word	0x42760000
 800c130:	00000000 	.word	0x00000000
 800c134:	42340000 	.word	0x42340000
 800c138:	43700000 	.word	0x43700000
 800c13c:	3d9fbe77 	.word	0x3d9fbe77
 800c140:	43340000 	.word	0x43340000
 800c144:	41840000 	.word	0x41840000
 800c148:	3d3020c5 	.word	0x3d3020c5
 800c14c:	41100000 	.word	0x41100000
 800c150:	41a00000 	.word	0x41a00000
 800c154:	3c656042 	.word	0x3c656042

0800c158 <TestIMU>:
	//合っているか確認する
	printAllNodeExistence(&my_map);
}

void TestIMU()
{
 800c158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IT_mode = IMU_TEST;
 800c15a:	4b2d      	ldr	r3, [pc, #180]	; (800c210 <TestIMU+0xb8>)
		printf("gyro : %f\r\n",ZGyro);

//		printf("%d, %hd, %f, %f, %f\r\n", m,ZGFilterd,  ZGyro, AngularV, Angle);

		timer1 = 0;
		t = 1;
 800c15c:	4d2d      	ldr	r5, [pc, #180]	; (800c214 <TestIMU+0xbc>)
	IT_mode = IMU_TEST;
 800c15e:	2205      	movs	r2, #5
 800c160:	601a      	str	r2, [r3, #0]
		imu_check = IMU_init();
 800c162:	f001 fd07 	bl	800db74 <IMU_init>
		printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c166:	4601      	mov	r1, r0
 800c168:	482b      	ldr	r0, [pc, #172]	; (800c218 <TestIMU+0xc0>)
 800c16a:	f009 fa7f 	bl	801566c <iprintf>
		imu_check =IMU_init();
 800c16e:	f001 fd01 	bl	800db74 <IMU_init>
		printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c172:	4601      	mov	r1, r0
 800c174:	4828      	ldr	r0, [pc, #160]	; (800c218 <TestIMU+0xc0>)
 800c176:	f009 fa79 	bl	801566c <iprintf>
		HAL_Delay(100);
 800c17a:	2064      	movs	r0, #100	; 0x64
 800c17c:	f002 fd44 	bl	800ec08 <HAL_Delay>
		ZGyro = ReadIMU(0x37, 0x38);
 800c180:	2138      	movs	r1, #56	; 0x38
 800c182:	2037      	movs	r0, #55	; 0x37
 800c184:	f001 fbce 	bl	800d924 <ReadIMU>
 800c188:	4b24      	ldr	r3, [pc, #144]	; (800c21c <TestIMU+0xc4>)
		printf("gyro : %f\r\n",ZGyro);
 800c18a:	ee10 0a10 	vmov	r0, s0
		ZGyro = ReadIMU(0x37, 0x38);
 800c18e:	ed83 0a00 	vstr	s0, [r3]
		printf("gyro : %f\r\n",ZGyro);
 800c192:	f7fc f911 	bl	80083b8 <__aeabi_f2d>
 800c196:	4602      	mov	r2, r0
 800c198:	460b      	mov	r3, r1
 800c19a:	4821      	ldr	r0, [pc, #132]	; (800c220 <TestIMU+0xc8>)
 800c19c:	f009 fa66 	bl	801566c <iprintf>
		//割り込みを有効化

		printf("timer1 : %d, 角度 : %f\r\n",timer1, Angle);
 800c1a0:	4b20      	ldr	r3, [pc, #128]	; (800c224 <TestIMU+0xcc>)
		timer1 = 0;
 800c1a2:	4a21      	ldr	r2, [pc, #132]	; (800c228 <TestIMU+0xd0>)
		printf("timer1 : %d, 角度 : %f\r\n",timer1, Angle);
 800c1a4:	6818      	ldr	r0, [r3, #0]
		timer1 = 0;
 800c1a6:	2400      	movs	r4, #0
		t = 1;
 800c1a8:	2301      	movs	r3, #1
		timer1 = 0;
 800c1aa:	6014      	str	r4, [r2, #0]
		t = 1;
 800c1ac:	602b      	str	r3, [r5, #0]
		printf("timer1 : %d, 角度 : %f\r\n",timer1, Angle);
 800c1ae:	f7fc f903 	bl	80083b8 <__aeabi_f2d>
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	481c      	ldr	r0, [pc, #112]	; (800c22c <TestIMU+0xd4>)
 800c1ba:	f009 fa57 	bl	801566c <iprintf>
		HAL_TIM_Base_Start_IT(&htim1);
 800c1be:	481c      	ldr	r0, [pc, #112]	; (800c230 <TestIMU+0xd8>)
 800c1c0:	f005 fc09 	bl	80119d6 <HAL_TIM_Base_Start_IT>
		while(t == 1) //10s
 800c1c4:	682b      	ldr	r3, [r5, #0]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d106      	bne.n	800c1d8 <TestIMU+0x80>
		{
			printf("\r\n");
 800c1ca:	4c1a      	ldr	r4, [pc, #104]	; (800c234 <TestIMU+0xdc>)
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f009 fad5 	bl	801577c <puts>
		while(t == 1) //10s
 800c1d2:	682b      	ldr	r3, [r5, #0]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d0f9      	beq.n	800c1cc <TestIMU+0x74>
		}

//		ag = Angle;
		t = 0;
 800c1d8:	2400      	movs	r4, #0
		HAL_TIM_Base_Stop_IT(&htim1);
 800c1da:	4815      	ldr	r0, [pc, #84]	; (800c230 <TestIMU+0xd8>)
		t = 0;
 800c1dc:	602c      	str	r4, [r5, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 800c1de:	f005 fc1e 	bl	8011a1e <HAL_TIM_Base_Stop_IT>
		HAL_Delay(1000);
 800c1e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c1e6:	f002 fd0f 	bl	800ec08 <HAL_Delay>
 800c1ea:	4d13      	ldr	r5, [pc, #76]	; (800c238 <TestIMU+0xe0>)



			for(int i=0; i < 5000; i++) //0.007495 / 5000
				printf("%d, %f\r\n",i, debugVL[i]); //-0.001331
 800c1ec:	4f13      	ldr	r7, [pc, #76]	; (800c23c <TestIMU+0xe4>)
			for(int i=0; i < 5000; i++) //0.007495 / 5000
 800c1ee:	f241 3688 	movw	r6, #5000	; 0x1388
				printf("%d, %f\r\n",i, debugVL[i]); //-0.001331
 800c1f2:	f855 0b04 	ldr.w	r0, [r5], #4
 800c1f6:	f7fc f8df 	bl	80083b8 <__aeabi_f2d>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	4638      	mov	r0, r7
 800c200:	4621      	mov	r1, r4
			for(int i=0; i < 5000; i++) //0.007495 / 5000
 800c202:	3401      	adds	r4, #1
				printf("%d, %f\r\n",i, debugVL[i]); //-0.001331
 800c204:	f009 fa32 	bl	801566c <iprintf>
			for(int i=0; i < 5000; i++) //0.007495 / 5000
 800c208:	42b4      	cmp	r4, r6
 800c20a:	d1f2      	bne.n	800c1f2 <TestIMU+0x9a>
 800c20c:	e7fe      	b.n	800c20c <TestIMU+0xb4>
 800c20e:	bf00      	nop
 800c210:	2000894c 	.word	0x2000894c
 800c214:	20008948 	.word	0x20008948
 800c218:	08019228 	.word	0x08019228
 800c21c:	20007fe4 	.word	0x20007fe4
 800c220:	08019244 	.word	0x08019244
 800c224:	20007f38 	.word	0x20007f38
 800c228:	20008954 	.word	0x20008954
 800c22c:	08019250 	.word	0x08019250
 800c230:	20008e48 	.word	0x20008e48
 800c234:	080193d4 	.word	0x080193d4
 800c238:	2000022c 	.word	0x2000022c
 800c23c:	0801926c 	.word	0x0801926c

0800c240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c244:	2400      	movs	r4, #0
{
 800c246:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c248:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800c24c:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c250:	4b45      	ldr	r3, [pc, #276]	; (800c368 <MX_GPIO_Init+0x128>)
 800c252:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c254:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c258:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800c378 <MX_GPIO_Init+0x138>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800c25c:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800c37c <MX_GPIO_Init+0x13c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800c260:	4f42      	ldr	r7, [pc, #264]	; (800c36c <MX_GPIO_Init+0x12c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800c262:	4e43      	ldr	r6, [pc, #268]	; (800c370 <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c264:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c268:	631a      	str	r2, [r3, #48]	; 0x30
 800c26a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c26c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c270:	9200      	str	r2, [sp, #0]
 800c272:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c274:	9401      	str	r4, [sp, #4]
 800c276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c278:	f042 0204 	orr.w	r2, r2, #4
 800c27c:	631a      	str	r2, [r3, #48]	; 0x30
 800c27e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c280:	f002 0204 	and.w	r2, r2, #4
 800c284:	9201      	str	r2, [sp, #4]
 800c286:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c288:	9402      	str	r4, [sp, #8]
 800c28a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c28c:	f042 0201 	orr.w	r2, r2, #1
 800c290:	631a      	str	r2, [r3, #48]	; 0x30
 800c292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c294:	f002 0201 	and.w	r2, r2, #1
 800c298:	9202      	str	r2, [sp, #8]
 800c29a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c29c:	9403      	str	r4, [sp, #12]
 800c29e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2a0:	f042 0202 	orr.w	r2, r2, #2
 800c2a4:	631a      	str	r2, [r3, #48]	; 0x30
 800c2a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2a8:	f002 0202 	and.w	r2, r2, #2
 800c2ac:	9203      	str	r2, [sp, #12]
 800c2ae:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c2b0:	9404      	str	r4, [sp, #16]
 800c2b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2b4:	f042 0208 	orr.w	r2, r2, #8
 800c2b8:	631a      	str	r2, [r3, #48]	; 0x30
 800c2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2bc:	f003 0308 	and.w	r3, r3, #8
 800c2c0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c2c2:	4622      	mov	r2, r4
 800c2c4:	4648      	mov	r0, r9
 800c2c6:	2105      	movs	r1, #5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c2c8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c2ca:	f004 f971 	bl	80105b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800c2ce:	4622      	mov	r2, r4
 800c2d0:	4640      	mov	r0, r8
 800c2d2:	f44f 7140 	mov.w	r1, #768	; 0x300
 800c2d6:	f004 f96b 	bl	80105b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800c2da:	4622      	mov	r2, r4
 800c2dc:	4638      	mov	r0, r7
 800c2de:	2104      	movs	r1, #4
 800c2e0:	f004 f966 	bl	80105b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800c2e4:	4622      	mov	r2, r4
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c2ec:	f004 f960 	bl	80105b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2f0:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2f2:	4648      	mov	r0, r9
 800c2f4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800c2f6:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2f8:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2fc:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c300:	f003 ffbc 	bl	801027c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c304:	4b1b      	ldr	r3, [pc, #108]	; (800c374 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c306:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800c308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c30c:	a905      	add	r1, sp, #20
 800c30e:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c310:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c314:	f003 ffb2 	bl	801027c <HAL_GPIO_Init>
  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c318:	4640      	mov	r0, r8
 800c31a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800c31c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c320:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c322:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c326:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c328:	f003 ffa8 	bl	801027c <HAL_GPIO_Init>
  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c32c:	4638      	mov	r0, r7
 800c32e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c330:	2304      	movs	r3, #4
 800c332:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c334:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c338:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c33a:	f003 ff9f 	bl	801027c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c33e:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c342:	a905      	add	r1, sp, #20
 800c344:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c346:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c348:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c34c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c34e:	f003 ff95 	bl	801027c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800c352:	4622      	mov	r2, r4
 800c354:	4621      	mov	r1, r4
 800c356:	2028      	movs	r0, #40	; 0x28
 800c358:	f003 f991 	bl	800f67e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800c35c:	2028      	movs	r0, #40	; 0x28
 800c35e:	f003 f9aa 	bl	800f6b6 <HAL_NVIC_EnableIRQ>

}
 800c362:	b00b      	add	sp, #44	; 0x2c
 800c364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c368:	40023800 	.word	0x40023800
 800c36c:	40020c00 	.word	0x40020c00
 800c370:	40020400 	.word	0x40020400
 800c374:	10110000 	.word	0x10110000
 800c378:	40020000 	.word	0x40020000
 800c37c:	40020800 	.word	0x40020800

0800c380 <MX_DMA_Init>:
{
 800c380:	b510      	push	{r4, lr}
 800c382:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c384:	2400      	movs	r4, #0
 800c386:	4b0f      	ldr	r3, [pc, #60]	; (800c3c4 <MX_DMA_Init+0x44>)
 800c388:	9401      	str	r4, [sp, #4]
 800c38a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c38c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c390:	631a      	str	r2, [r3, #48]	; 0x30
 800c392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c398:	4622      	mov	r2, r4
 800c39a:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c39c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c39e:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c3a0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c3a2:	f003 f96c 	bl	800f67e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c3a6:	2038      	movs	r0, #56	; 0x38
 800c3a8:	f003 f985 	bl	800f6b6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800c3ac:	4622      	mov	r2, r4
 800c3ae:	4621      	mov	r1, r4
 800c3b0:	203a      	movs	r0, #58	; 0x3a
 800c3b2:	f003 f964 	bl	800f67e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800c3b6:	203a      	movs	r0, #58	; 0x3a
}
 800c3b8:	b002      	add	sp, #8
 800c3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800c3be:	f003 b97a 	b.w	800f6b6 <HAL_NVIC_EnableIRQ>
 800c3c2:	bf00      	nop
 800c3c4:	40023800 	.word	0x40023800

0800c3c8 <MX_ADC1_Init>:
{
 800c3c8:	b570      	push	{r4, r5, r6, lr}
  hadc1.Instance = ADC1;
 800c3ca:	4c21      	ldr	r4, [pc, #132]	; (800c450 <MX_ADC1_Init+0x88>)
 800c3cc:	4b21      	ldr	r3, [pc, #132]	; (800c454 <MX_ADC1_Init+0x8c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c3ce:	4a22      	ldr	r2, [pc, #136]	; (800c458 <MX_ADC1_Init+0x90>)
  hadc1.Instance = ADC1;
 800c3d0:	6023      	str	r3, [r4, #0]
{
 800c3d2:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800c3d4:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 800c3d6:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c3d8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc1.Init.NbrOfConversion = 3;
 800c3dc:	2603      	movs	r6, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c3de:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c3e0:	6061      	str	r1, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c3e2:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c3e4:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c3e6:	9300      	str	r3, [sp, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c3e8:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c3ec:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c3ee:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c3f0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800c3f4:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ENABLE;
 800c3f6:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800c3f8:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800c3fa:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c3fe:	6165      	str	r5, [r4, #20]
  hadc1.Init.NbrOfConversion = 3;
 800c400:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c402:	f002 fc23 	bl	800ec4c <HAL_ADC_Init>
 800c406:	b108      	cbz	r0, 800c40c <MX_ADC1_Init+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c408:	b672      	cpsid	i
 800c40a:	e7fe      	b.n	800c40a <MX_ADC1_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_10;
 800c40c:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c40e:	4669      	mov	r1, sp
 800c410:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800c412:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c414:	9602      	str	r6, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_10;
 800c416:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c418:	f002 fdb6 	bl	800ef88 <HAL_ADC_ConfigChannel>
 800c41c:	b108      	cbz	r0, 800c422 <MX_ADC1_Init+0x5a>
 800c41e:	b672      	cpsid	i
 800c420:	e7fe      	b.n	800c420 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_14;
 800c422:	220e      	movs	r2, #14
  sConfig.Rank = 2;
 800c424:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c426:	4669      	mov	r1, sp
 800c428:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 800c42a:	9200      	str	r2, [sp, #0]
  sConfig.Rank = 2;
 800c42c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c42e:	f002 fdab 	bl	800ef88 <HAL_ADC_ConfigChannel>
 800c432:	b108      	cbz	r0, 800c438 <MX_ADC1_Init+0x70>
 800c434:	b672      	cpsid	i
 800c436:	e7fe      	b.n	800c436 <MX_ADC1_Init+0x6e>
  sConfig.Channel = ADC_CHANNEL_9;
 800c438:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c43a:	4669      	mov	r1, sp
 800c43c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 800c43e:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c442:	f002 fda1 	bl	800ef88 <HAL_ADC_ConfigChannel>
 800c446:	b108      	cbz	r0, 800c44c <MX_ADC1_Init+0x84>
 800c448:	b672      	cpsid	i
 800c44a:	e7fe      	b.n	800c44a <MX_ADC1_Init+0x82>
}
 800c44c:	b004      	add	sp, #16
 800c44e:	bd70      	pop	{r4, r5, r6, pc}
 800c450:	20008d60 	.word	0x20008d60
 800c454:	40012000 	.word	0x40012000
 800c458:	0f000001 	.word	0x0f000001

0800c45c <MX_ADC2_Init>:
{
 800c45c:	b570      	push	{r4, r5, r6, lr}
  hadc2.Instance = ADC2;
 800c45e:	4c1c      	ldr	r4, [pc, #112]	; (800c4d0 <MX_ADC2_Init+0x74>)
 800c460:	4b1c      	ldr	r3, [pc, #112]	; (800c4d4 <MX_ADC2_Init+0x78>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c462:	4a1d      	ldr	r2, [pc, #116]	; (800c4d8 <MX_ADC2_Init+0x7c>)
  hadc2.Instance = ADC2;
 800c464:	6023      	str	r3, [r4, #0]
{
 800c466:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800c468:	2300      	movs	r3, #0
  hadc2.Init.ScanConvMode = ENABLE;
 800c46a:	2501      	movs	r5, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c46c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc2.Init.NbrOfConversion = 2;
 800c470:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800c472:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c474:	6061      	str	r1, [r4, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c476:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800c478:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c47a:	9300      	str	r3, [sp, #0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800c47c:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c480:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c482:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c484:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800c488:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ENABLE;
 800c48a:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800c48c:	7625      	strb	r5, [r4, #24]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800c48e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c492:	6165      	str	r5, [r4, #20]
  hadc2.Init.NbrOfConversion = 2;
 800c494:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800c496:	f002 fbd9 	bl	800ec4c <HAL_ADC_Init>
 800c49a:	b108      	cbz	r0, 800c4a0 <MX_ADC2_Init+0x44>
 800c49c:	b672      	cpsid	i
 800c49e:	e7fe      	b.n	800c49e <MX_ADC2_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_11;
 800c4a0:	220b      	movs	r2, #11
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c4a2:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c4a4:	4669      	mov	r1, sp
 800c4a6:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800c4a8:	9501      	str	r5, [sp, #4]
  sConfig.Channel = ADC_CHANNEL_11;
 800c4aa:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c4ac:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c4ae:	f002 fd6b 	bl	800ef88 <HAL_ADC_ConfigChannel>
 800c4b2:	b108      	cbz	r0, 800c4b8 <MX_ADC2_Init+0x5c>
 800c4b4:	b672      	cpsid	i
 800c4b6:	e7fe      	b.n	800c4b6 <MX_ADC2_Init+0x5a>
  sConfig.Channel = ADC_CHANNEL_15;
 800c4b8:	230f      	movs	r3, #15
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c4ba:	4669      	mov	r1, sp
 800c4bc:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_15;
 800c4be:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c4c2:	f002 fd61 	bl	800ef88 <HAL_ADC_ConfigChannel>
 800c4c6:	b108      	cbz	r0, 800c4cc <MX_ADC2_Init+0x70>
 800c4c8:	b672      	cpsid	i
 800c4ca:	e7fe      	b.n	800c4ca <MX_ADC2_Init+0x6e>
}
 800c4cc:	b004      	add	sp, #16
 800c4ce:	bd70      	pop	{r4, r5, r6, pc}
 800c4d0:	20008c80 	.word	0x20008c80
 800c4d4:	40012100 	.word	0x40012100
 800c4d8:	0f000001 	.word	0x0f000001

0800c4dc <MX_TIM3_Init>:
{
 800c4dc:	b530      	push	{r4, r5, lr}
 800c4de:	b08d      	sub	sp, #52	; 0x34
  htim3.Instance = TIM3;
 800c4e0:	4c14      	ldr	r4, [pc, #80]	; (800c534 <MX_TIM3_Init+0x58>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 800c4e2:	2220      	movs	r2, #32
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	a804      	add	r0, sp, #16
 800c4e8:	f007 fdc1 	bl	801406e <memset>
  htim3.Instance = TIM3;
 800c4ec:	4b12      	ldr	r3, [pc, #72]	; (800c538 <MX_TIM3_Init+0x5c>)
 800c4ee:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 60000-1;
 800c4f0:	f64e 225f 	movw	r2, #59999	; 0xea5f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c4f4:	2300      	movs	r3, #0
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c4f6:	2503      	movs	r5, #3
  htim3.Init.Period = 60000-1;
 800c4f8:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c4fa:	4620      	mov	r0, r4
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c4fc:	2201      	movs	r2, #1
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c4fe:	a903      	add	r1, sp, #12
  htim3.Init.Prescaler = 0;
 800c500:	6063      	str	r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c502:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c504:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c506:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c508:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c50a:	9302      	str	r3, [sp, #8]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c50c:	9503      	str	r5, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c50e:	9205      	str	r2, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c510:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c512:	f005 fccf 	bl	8011eb4 <HAL_TIM_Encoder_Init>
 800c516:	b108      	cbz	r0, 800c51c <MX_TIM3_Init+0x40>
 800c518:	b672      	cpsid	i
 800c51a:	e7fe      	b.n	800c51a <MX_TIM3_Init+0x3e>
 800c51c:	4603      	mov	r3, r0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c51e:	a901      	add	r1, sp, #4
 800c520:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c522:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c526:	f006 fcbd 	bl	8012ea4 <HAL_TIMEx_MasterConfigSynchronization>
 800c52a:	b108      	cbz	r0, 800c530 <MX_TIM3_Init+0x54>
 800c52c:	b672      	cpsid	i
 800c52e:	e7fe      	b.n	800c52e <MX_TIM3_Init+0x52>
}
 800c530:	b00d      	add	sp, #52	; 0x34
 800c532:	bd30      	pop	{r4, r5, pc}
 800c534:	20008cc8 	.word	0x20008cc8
 800c538:	40000400 	.word	0x40000400

0800c53c <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 800c53c:	4b0a      	ldr	r3, [pc, #40]	; (800c568 <MX_USART1_UART_Init+0x2c>)
 800c53e:	4a0b      	ldr	r2, [pc, #44]	; (800c56c <MX_USART1_UART_Init+0x30>)
{
 800c540:	b510      	push	{r4, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c542:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 800c544:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800c546:	f44f 5416 	mov.w	r4, #9600	; 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c54a:	2200      	movs	r2, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c54c:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 9600;
 800c54e:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c550:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c552:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c556:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c558:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c55c:	f006 fda9 	bl	80130b2 <HAL_UART_Init>
 800c560:	b108      	cbz	r0, 800c566 <MX_USART1_UART_Init+0x2a>
 800c562:	b672      	cpsid	i
 800c564:	e7fe      	b.n	800c564 <MX_USART1_UART_Init+0x28>
}
 800c566:	bd10      	pop	{r4, pc}
 800c568:	20008da8 	.word	0x20008da8
 800c56c:	40011000 	.word	0x40011000

0800c570 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 800c570:	b500      	push	{lr}
 800c572:	b083      	sub	sp, #12
 800c574:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800c576:	f64f 73ff 	movw	r3, #65535	; 0xffff
PUTCHAR_PROTOTYPE {
 800c57a:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800c57e:	2201      	movs	r2, #1
 800c580:	4803      	ldr	r0, [pc, #12]	; (800c590 <__io_putchar+0x20>)
 800c582:	f006 fde3 	bl	801314c <HAL_UART_Transmit>
}
 800c586:	9801      	ldr	r0, [sp, #4]
 800c588:	b003      	add	sp, #12
 800c58a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c58e:	bf00      	nop
 800c590:	20008da8 	.word	0x20008da8

0800c594 <__io_getchar>:
int __io_getchar(void) {
 800c594:	b510      	push	{r4, lr}
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800c596:	4c07      	ldr	r4, [pc, #28]	; (800c5b4 <__io_getchar+0x20>)
int __io_getchar(void) {
 800c598:	b082      	sub	sp, #8
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800c59a:	230a      	movs	r3, #10
 800c59c:	2201      	movs	r2, #1
 800c59e:	f10d 0107 	add.w	r1, sp, #7
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f006 fe6b 	bl	801327e <HAL_UART_Receive>
while(Status != HAL_OK)
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d1f6      	bne.n	800c59a <__io_getchar+0x6>
}
 800c5ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c5b0:	b002      	add	sp, #8
 800c5b2:	bd10      	pop	{r4, pc}
 800c5b4:	20008da8 	.word	0x20008da8

0800c5b8 <SystemClock_Config>:
{
 800c5b8:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c5ba:	2300      	movs	r3, #0
{
 800c5bc:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c5be:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800c5c2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c5c6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800c5ca:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c5ce:	4920      	ldr	r1, [pc, #128]	; (800c650 <SystemClock_Config+0x98>)
 800c5d0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c5d2:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c5d4:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c5d6:	4a1f      	ldr	r2, [pc, #124]	; (800c654 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800c5d8:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800c5dc:	6408      	str	r0, [r1, #64]	; 0x40
 800c5de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c5e0:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800c5e4:	9101      	str	r1, [sp, #4]
 800c5e6:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c5e8:	9302      	str	r3, [sp, #8]
 800c5ea:	6813      	ldr	r3, [r2, #0]
 800c5ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c5f0:	6013      	str	r3, [r2, #0]
 800c5f2:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c5f4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c5f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c5fc:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c5fe:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c600:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c602:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c604:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c608:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c60a:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c60c:	22a8      	movs	r2, #168	; 0xa8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c60e:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c610:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c612:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c614:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c616:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c61a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c61c:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c61e:	f003 fff9 	bl	8010614 <HAL_RCC_OscConfig>
 800c622:	b108      	cbz	r0, 800c628 <SystemClock_Config+0x70>
 800c624:	b672      	cpsid	i
 800c626:	e7fe      	b.n	800c626 <SystemClock_Config+0x6e>
 800c628:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c62a:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c62c:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c634:	a803      	add	r0, sp, #12
 800c636:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c638:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c63a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c63c:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c63e:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c642:	f004 fa57 	bl	8010af4 <HAL_RCC_ClockConfig>
 800c646:	b108      	cbz	r0, 800c64c <SystemClock_Config+0x94>
 800c648:	b672      	cpsid	i
 800c64a:	e7fe      	b.n	800c64a <SystemClock_Config+0x92>
}
 800c64c:	b014      	add	sp, #80	; 0x50
 800c64e:	bd70      	pop	{r4, r5, r6, pc}
 800c650:	40023800 	.word	0x40023800
 800c654:	40007000 	.word	0x40007000

0800c658 <main>:
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 800c65c:	f002 fa62 	bl	800eb24 <HAL_Init>
  MX_GPIO_Init();
 800c660:	f7ff fdee 	bl	800c240 <MX_GPIO_Init>
  MX_DMA_Init();
 800c664:	f7ff fe8c 	bl	800c380 <MX_DMA_Init>
  MX_ADC1_Init();
 800c668:	f7ff feae 	bl	800c3c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800c66c:	f7ff fef6 	bl	800c45c <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800c670:	f7ff ff64 	bl	800c53c <MX_USART1_UART_Init>
	ADCStart();
 800c674:	f000 ffd0 	bl	800d618 <ADCStart>
	MX_TIM3_Init();
 800c678:	f7ff ff30 	bl	800c4dc <MX_TIM3_Init>
	BatteryCheck( (int)adc1[2] );
 800c67c:	4ba0      	ldr	r3, [pc, #640]	; (800c900 <main+0x2a8>)
  htim2.Instance = TIM2;
 800c67e:	4ca1      	ldr	r4, [pc, #644]	; (800c904 <main+0x2ac>)
	BatteryCheck( (int)adc1[2] );
 800c680:	6898      	ldr	r0, [r3, #8]
 800c682:	f002 f969 	bl	800e958 <BatteryCheck>
	ADCStop();
 800c686:	f000 ffe7 	bl	800d658 <ADCStop>
	ModeSelect(0, 7, &startup_mode);
 800c68a:	f10d 0207 	add.w	r2, sp, #7
 800c68e:	2107      	movs	r1, #7
 800c690:	2000      	movs	r0, #0
 800c692:	f002 f9bb 	bl	800ea0c <ModeSelect>
	Signal( startup_mode );
 800c696:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800c69a:	f002 f94b 	bl	800e934 <Signal>
  htim2.Init.Period = 4200-1;
 800c69e:	f241 0667 	movw	r6, #4199	; 0x1067
  SystemClock_Config();
 800c6a2:	f7ff ff89 	bl	800c5b8 <SystemClock_Config>
  MX_GPIO_Init();
 800c6a6:	f7ff fdcb 	bl	800c240 <MX_GPIO_Init>
  MX_DMA_Init();
 800c6aa:	f7ff fe69 	bl	800c380 <MX_DMA_Init>
  MX_ADC1_Init();
 800c6ae:	f7ff fe8b 	bl	800c3c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800c6b2:	f7ff fed3 	bl	800c45c <MX_ADC2_Init>
  MX_TIM3_Init();
 800c6b6:	f7ff ff11 	bl	800c4dc <MX_TIM3_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c6ba:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 800c6bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c6c0:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 800c6c2:	6022      	str	r2, [r4, #0]
  htim2.Init.Prescaler = 0;
 800c6c4:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c6c6:	9308      	str	r3, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c6c8:	9304      	str	r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c6ca:	930f      	str	r3, [sp, #60]	; 0x3c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c6cc:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c6ce:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c6d0:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c6d2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800c6d6:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c6d8:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c6da:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800c6de:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 800c6e2:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  htim2.Init.Period = 4200-1;
 800c6e6:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c6e8:	f005 f94a 	bl	8011980 <HAL_TIM_Base_Init>
 800c6ec:	b108      	cbz	r0, 800c6f2 <main+0x9a>
 800c6ee:	b672      	cpsid	i
 800c6f0:	e7fe      	b.n	800c6f0 <main+0x98>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c6f2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c6f6:	a908      	add	r1, sp, #32
 800c6f8:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c6fa:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c6fc:	f005 ff18 	bl	8012530 <HAL_TIM_ConfigClockSource>
 800c700:	b108      	cbz	r0, 800c706 <main+0xae>
 800c702:	b672      	cpsid	i
 800c704:	e7fe      	b.n	800c704 <main+0xac>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c706:	4620      	mov	r0, r4
 800c708:	f005 fb08 	bl	8011d1c <HAL_TIM_PWM_Init>
 800c70c:	4603      	mov	r3, r0
 800c70e:	b108      	cbz	r0, 800c714 <main+0xbc>
 800c710:	b672      	cpsid	i
 800c712:	e7fe      	b.n	800c712 <main+0xba>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c714:	a904      	add	r1, sp, #16
 800c716:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c718:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c71c:	f006 fbc2 	bl	8012ea4 <HAL_TIMEx_MasterConfigSynchronization>
 800c720:	b108      	cbz	r0, 800c726 <main+0xce>
 800c722:	b672      	cpsid	i
 800c724:	e7fe      	b.n	800c724 <main+0xcc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c726:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c728:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c72c:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c72e:	220c      	movs	r2, #12
 800c730:	a90f      	add	r1, sp, #60	; 0x3c
 800c732:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c734:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c736:	f005 fe35 	bl	80123a4 <HAL_TIM_PWM_ConfigChannel>
 800c73a:	4605      	mov	r5, r0
 800c73c:	b108      	cbz	r0, 800c742 <main+0xea>
 800c73e:	b672      	cpsid	i
 800c740:	e7fe      	b.n	800c740 <main+0xe8>
  HAL_TIM_MspPostInit(&htim2);
 800c742:	4620      	mov	r0, r4
 800c744:	f000 fbc0 	bl	800cec8 <HAL_TIM_MspPostInit>
  hspi3.Instance = SPI3;
 800c748:	4b6f      	ldr	r3, [pc, #444]	; (800c908 <main+0x2b0>)
 800c74a:	4a70      	ldr	r2, [pc, #448]	; (800c90c <main+0x2b4>)
 800c74c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c74e:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c752:	2202      	movs	r2, #2
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c754:	6059      	str	r1, [r3, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c756:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c758:	2101      	movs	r1, #1
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c75a:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c75e:	6159      	str	r1, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c760:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c762:	2128      	movs	r1, #40	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800c764:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c766:	4618      	mov	r0, r3
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800c768:	e9c3 5502 	strd	r5, r5, [r3, #8]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800c76c:	e9c3 5508 	strd	r5, r5, [r3, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c770:	629d      	str	r5, [r3, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c772:	61d9      	str	r1, [r3, #28]
  hspi3.Init.CRCPolynomial = 10;
 800c774:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c776:	f004 fbaf 	bl	8010ed8 <HAL_SPI_Init>
 800c77a:	4604      	mov	r4, r0
 800c77c:	b108      	cbz	r0, 800c782 <main+0x12a>
 800c77e:	b672      	cpsid	i
 800c780:	e7fe      	b.n	800c780 <main+0x128>
  htim5.Instance = TIM5;
 800c782:	4d63      	ldr	r5, [pc, #396]	; (800c910 <main+0x2b8>)
  MX_USART1_UART_Init();
 800c784:	f7ff feda 	bl	800c53c <MX_USART1_UART_Init>
  htim5.Instance = TIM5;
 800c788:	4b62      	ldr	r3, [pc, #392]	; (800c914 <main+0x2bc>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c78a:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c78c:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c78e:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800c792:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c796:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c79a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800c79e:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 800c7a2:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c7a6:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim5.Init.Period = 4200-1;
 800c7aa:	60ee      	str	r6, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c7ac:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c7ae:	61ac      	str	r4, [r5, #24]
  htim5.Instance = TIM5;
 800c7b0:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c7b2:	f005 f8e5 	bl	8011980 <HAL_TIM_Base_Init>
 800c7b6:	b108      	cbz	r0, 800c7bc <main+0x164>
 800c7b8:	b672      	cpsid	i
 800c7ba:	e7fe      	b.n	800c7ba <main+0x162>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c7bc:	a908      	add	r1, sp, #32
 800c7be:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c7c0:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c7c2:	f005 feb5 	bl	8012530 <HAL_TIM_ConfigClockSource>
 800c7c6:	b108      	cbz	r0, 800c7cc <main+0x174>
 800c7c8:	b672      	cpsid	i
 800c7ca:	e7fe      	b.n	800c7ca <main+0x172>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	f005 faa5 	bl	8011d1c <HAL_TIM_PWM_Init>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	b108      	cbz	r0, 800c7da <main+0x182>
 800c7d6:	b672      	cpsid	i
 800c7d8:	e7fe      	b.n	800c7d8 <main+0x180>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c7da:	4628      	mov	r0, r5
 800c7dc:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c7de:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c7e2:	f006 fb5f 	bl	8012ea4 <HAL_TIMEx_MasterConfigSynchronization>
 800c7e6:	b108      	cbz	r0, 800c7ec <main+0x194>
 800c7e8:	b672      	cpsid	i
 800c7ea:	e7fe      	b.n	800c7ea <main+0x192>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c7ec:	2060      	movs	r0, #96	; 0x60
  sConfigOC.Pulse = 0;
 800c7ee:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c7f0:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c7f2:	2204      	movs	r2, #4
 800c7f4:	a90f      	add	r1, sp, #60	; 0x3c
 800c7f6:	4846      	ldr	r0, [pc, #280]	; (800c910 <main+0x2b8>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c7f8:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c7fa:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c7fe:	f005 fdd1 	bl	80123a4 <HAL_TIM_PWM_ConfigChannel>
 800c802:	4605      	mov	r5, r0
 800c804:	b108      	cbz	r0, 800c80a <main+0x1b2>
 800c806:	b672      	cpsid	i
 800c808:	e7fe      	b.n	800c808 <main+0x1b0>
  HAL_TIM_MspPostInit(&htim5);
 800c80a:	4841      	ldr	r0, [pc, #260]	; (800c910 <main+0x2b8>)
  htim4.Instance = TIM4;
 800c80c:	4c42      	ldr	r4, [pc, #264]	; (800c918 <main+0x2c0>)
  HAL_TIM_MspPostInit(&htim5);
 800c80e:	f000 fb5b 	bl	800cec8 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800c812:	2220      	movs	r2, #32
 800c814:	4629      	mov	r1, r5
 800c816:	a810      	add	r0, sp, #64	; 0x40
 800c818:	f007 fc29 	bl	801406e <memset>
  htim4.Instance = TIM4;
 800c81c:	4b3f      	ldr	r3, [pc, #252]	; (800c91c <main+0x2c4>)
 800c81e:	6023      	str	r3, [r4, #0]
  htim4.Init.Period = 60000-1;
 800c820:	f64e 215f 	movw	r1, #59999	; 0xea5f
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c824:	2301      	movs	r3, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c826:	2203      	movs	r2, #3
  htim4.Init.Period = 60000-1;
 800c828:	60e1      	str	r1, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800c82a:	4620      	mov	r0, r4
 800c82c:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c82e:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c830:	9315      	str	r3, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c832:	9508      	str	r5, [sp, #32]
 800c834:	9509      	str	r5, [sp, #36]	; 0x24
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c836:	e9c4 5501 	strd	r5, r5, [r4, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c83a:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c83c:	61a5      	str	r5, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c83e:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800c840:	f005 fb38 	bl	8011eb4 <HAL_TIM_Encoder_Init>
 800c844:	4603      	mov	r3, r0
 800c846:	b108      	cbz	r0, 800c84c <main+0x1f4>
 800c848:	b672      	cpsid	i
 800c84a:	e7fe      	b.n	800c84a <main+0x1f2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800c84c:	4620      	mov	r0, r4
 800c84e:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c850:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800c854:	f006 fb26 	bl	8012ea4 <HAL_TIMEx_MasterConfigSynchronization>
 800c858:	4604      	mov	r4, r0
 800c85a:	b108      	cbz	r0, 800c860 <main+0x208>
 800c85c:	b672      	cpsid	i
 800c85e:	e7fe      	b.n	800c85e <main+0x206>
  htim8.Instance = TIM8;
 800c860:	4d2f      	ldr	r5, [pc, #188]	; (800c920 <main+0x2c8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c862:	9004      	str	r0, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c864:	4601      	mov	r1, r0
 800c866:	2220      	movs	r2, #32
 800c868:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c86a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800c86e:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c870:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c872:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800c876:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800c87a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800c87e:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c880:	9403      	str	r4, [sp, #12]
  htim8.Init.Prescaler = 168-1;
 800c882:	26a7      	movs	r6, #167	; 0xa7
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c884:	f007 fbf3 	bl	801406e <memset>
  htim8.Instance = TIM8;
 800c888:	4926      	ldr	r1, [pc, #152]	; (800c924 <main+0x2cc>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c88a:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 50-1;
 800c88c:	2231      	movs	r2, #49	; 0x31
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c88e:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c890:	4628      	mov	r0, r5
  htim8.Init.RepetitionCounter = 0;
 800c892:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim8.Instance = TIM8;
 800c896:	6029      	str	r1, [r5, #0]
  htim8.Init.Period = 50-1;
 800c898:	60ea      	str	r2, [r5, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c89a:	61ab      	str	r3, [r5, #24]
  htim8.Init.Prescaler = 168-1;
 800c89c:	606e      	str	r6, [r5, #4]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c89e:	f005 f86f 	bl	8011980 <HAL_TIM_Base_Init>
 800c8a2:	b108      	cbz	r0, 800c8a8 <main+0x250>
 800c8a4:	b672      	cpsid	i
 800c8a6:	e7fe      	b.n	800c8a6 <main+0x24e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c8a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800c8ac:	a904      	add	r1, sp, #16
 800c8ae:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c8b0:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800c8b2:	f005 fe3d 	bl	8012530 <HAL_TIM_ConfigClockSource>
 800c8b6:	b108      	cbz	r0, 800c8bc <main+0x264>
 800c8b8:	b672      	cpsid	i
 800c8ba:	e7fe      	b.n	800c8ba <main+0x262>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800c8bc:	4628      	mov	r0, r5
 800c8be:	f005 f8d9 	bl	8011a74 <HAL_TIM_OC_Init>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	b108      	cbz	r0, 800c8ca <main+0x272>
 800c8c6:	b672      	cpsid	i
 800c8c8:	e7fe      	b.n	800c8c8 <main+0x270>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c8ca:	a902      	add	r1, sp, #8
 800c8cc:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c8ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c8d2:	f006 fae7 	bl	8012ea4 <HAL_TIMEx_MasterConfigSynchronization>
 800c8d6:	b108      	cbz	r0, 800c8dc <main+0x284>
 800c8d8:	b672      	cpsid	i
 800c8da:	e7fe      	b.n	800c8da <main+0x282>
  sConfigOC.Pulse = 25-1;
 800c8dc:	2318      	movs	r3, #24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c8de:	4602      	mov	r2, r0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c8e0:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c8e4:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c8e8:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c8ea:	2430      	movs	r4, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c8ec:	a908      	add	r1, sp, #32
 800c8ee:	4628      	mov	r0, r5
  sConfigOC.Pulse = 25-1;
 800c8f0:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c8f2:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c8f4:	f005 fcf6 	bl	80122e4 <HAL_TIM_OC_ConfigChannel>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	b1a8      	cbz	r0, 800c928 <main+0x2d0>
 800c8fc:	b672      	cpsid	i
 800c8fe:	e7fe      	b.n	800c8fe <main+0x2a6>
 800c900:	20007fd0 	.word	0x20007fd0
 800c904:	20007f50 	.word	0x20007f50
 800c908:	20008d08 	.word	0x20008d08
 800c90c:	40003c00 	.word	0x40003c00
 800c910:	20007f90 	.word	0x20007f90
 800c914:	40000c00 	.word	0x40000c00
 800c918:	20008c40 	.word	0x20008c40
 800c91c:	40000800 	.word	0x40000800
 800c920:	20008c00 	.word	0x20008c00
 800c924:	40010400 	.word	0x40010400
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800c928:	6829      	ldr	r1, [r5, #0]
 800c92a:	698a      	ldr	r2, [r1, #24]
 800c92c:	f042 0208 	orr.w	r2, r2, #8
 800c930:	618a      	str	r2, [r1, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c932:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c934:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c938:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800c93a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 800c93e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800c942:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800c944:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c946:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c948:	f006 fb28 	bl	8012f9c <HAL_TIMEx_ConfigBreakDeadTime>
 800c94c:	4604      	mov	r4, r0
 800c94e:	b108      	cbz	r0, 800c954 <main+0x2fc>
 800c950:	b672      	cpsid	i
 800c952:	e7fe      	b.n	800c952 <main+0x2fa>
  HAL_TIM_MspPostInit(&htim8);
 800c954:	4628      	mov	r0, r5
 800c956:	f000 fab7 	bl	800cec8 <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 800c95a:	4b2d      	ldr	r3, [pc, #180]	; (800ca10 <main+0x3b8>)
 800c95c:	492d      	ldr	r1, [pc, #180]	; (800ca14 <main+0x3bc>)
  htim1.Init.Prescaler = 168-1;
 800c95e:	605e      	str	r6, [r3, #4]
  htim1.Init.Period = 1000-1;
 800c960:	f240 32e7 	movw	r2, #999	; 0x3e7
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800c964:	4618      	mov	r0, r3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c966:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800c96a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c96e:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c972:	609c      	str	r4, [r3, #8]
  htim1.Init.RepetitionCounter = 0;
 800c974:	e9c3 4404 	strd	r4, r4, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c978:	619c      	str	r4, [r3, #24]
  htim1.Instance = TIM1;
 800c97a:	6019      	str	r1, [r3, #0]
  htim1.Init.Period = 1000-1;
 800c97c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800c97e:	f004 ffff 	bl	8011980 <HAL_TIM_Base_Init>
 800c982:	b108      	cbz	r0, 800c988 <main+0x330>
 800c984:	b672      	cpsid	i
 800c986:	e7fe      	b.n	800c986 <main+0x32e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800c98c:	a90f      	add	r1, sp, #60	; 0x3c
 800c98e:	4820      	ldr	r0, [pc, #128]	; (800ca10 <main+0x3b8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c990:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800c992:	f005 fdcd 	bl	8012530 <HAL_TIM_ConfigClockSource>
 800c996:	4603      	mov	r3, r0
 800c998:	b108      	cbz	r0, 800c99e <main+0x346>
 800c99a:	b672      	cpsid	i
 800c99c:	e7fe      	b.n	800c99c <main+0x344>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800c99e:	a908      	add	r1, sp, #32
 800c9a0:	481b      	ldr	r0, [pc, #108]	; (800ca10 <main+0x3b8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c9a2:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800c9a6:	f006 fa7d 	bl	8012ea4 <HAL_TIMEx_MasterConfigSynchronization>
 800c9aa:	b118      	cbz	r0, 800c9b4 <main+0x35c>
 800c9ac:	b672      	cpsid	i
 800c9ae:	e7fe      	b.n	800c9ae <main+0x356>
		  Explore();
 800c9b0:	f7ff fab0 	bl	800bf14 <Explore>
	  switch( startup_mode )
 800c9b4:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800c9b8:	2b07      	cmp	r3, #7
 800c9ba:	d8fd      	bhi.n	800c9b8 <main+0x360>
 800c9bc:	a201      	add	r2, pc, #4	; (adr r2, 800c9c4 <main+0x36c>)
 800c9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c2:	bf00      	nop
 800c9c4:	0800c9e5 	.word	0x0800c9e5
 800c9c8:	0800ca09 	.word	0x0800ca09
 800c9cc:	0800ca03 	.word	0x0800ca03
 800c9d0:	0800c9fd 	.word	0x0800c9fd
 800c9d4:	0800c9f7 	.word	0x0800c9f7
 800c9d8:	0800c9f1 	.word	0x0800c9f1
 800c9dc:	0800c9b1 	.word	0x0800c9b1
 800c9e0:	0800c9eb 	.word	0x0800c9eb
		  ParameterSetting();
 800c9e4:	f7fe ffc6 	bl	800b974 <ParameterSetting>
		  break;
 800c9e8:	e7e4      	b.n	800c9b4 <main+0x35c>
		  WritingFree();
 800c9ea:	f7ff f859 	bl	800baa0 <WritingFree>
		  break;
 800c9ee:	e7e1      	b.n	800c9b4 <main+0x35c>
		  TestIMU();
 800c9f0:	f7ff fbb2 	bl	800c158 <TestIMU>
		  break;
 800c9f4:	e7de      	b.n	800c9b4 <main+0x35c>
		  FastestRun();
 800c9f6:	f7ff f8b7 	bl	800bb68 <FastestRun>
		  break;
 800c9fa:	e7db      	b.n	800c9b4 <main+0x35c>
		  Debug();
 800c9fc:	f7fe ff50 	bl	800b8a0 <Debug>
		  break;
 800ca00:	e7d8      	b.n	800c9b4 <main+0x35c>
		  GainTestDWall();
 800ca02:	f7fe fff5 	bl	800b9f0 <GainTestDWall>
		  break;
 800ca06:	e7d5      	b.n	800c9b4 <main+0x35c>
		  GainTestRWall();
 800ca08:	f7fe ffbc 	bl	800b984 <GainTestRWall>
		  break;
 800ca0c:	e7d2      	b.n	800c9b4 <main+0x35c>
 800ca0e:	bf00      	nop
 800ca10:	20008e48 	.word	0x20008e48
 800ca14:	40010000 	.word	0x40010000

0800ca18 <Error_Handler>:
 800ca18:	b672      	cpsid	i
 800ca1a:	e7fe      	b.n	800ca1a <Error_Handler+0x2>

0800ca1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca22:	2300      	movs	r3, #0
 800ca24:	607b      	str	r3, [r7, #4]
 800ca26:	4b10      	ldr	r3, [pc, #64]	; (800ca68 <HAL_MspInit+0x4c>)
 800ca28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca2a:	4a0f      	ldr	r2, [pc, #60]	; (800ca68 <HAL_MspInit+0x4c>)
 800ca2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca30:	6453      	str	r3, [r2, #68]	; 0x44
 800ca32:	4b0d      	ldr	r3, [pc, #52]	; (800ca68 <HAL_MspInit+0x4c>)
 800ca34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca3a:	607b      	str	r3, [r7, #4]
 800ca3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ca3e:	2300      	movs	r3, #0
 800ca40:	603b      	str	r3, [r7, #0]
 800ca42:	4b09      	ldr	r3, [pc, #36]	; (800ca68 <HAL_MspInit+0x4c>)
 800ca44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca46:	4a08      	ldr	r2, [pc, #32]	; (800ca68 <HAL_MspInit+0x4c>)
 800ca48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca4c:	6413      	str	r3, [r2, #64]	; 0x40
 800ca4e:	4b06      	ldr	r3, [pc, #24]	; (800ca68 <HAL_MspInit+0x4c>)
 800ca50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca56:	603b      	str	r3, [r7, #0]
 800ca58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ca5a:	bf00      	nop
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	40023800 	.word	0x40023800

0800ca6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b08c      	sub	sp, #48	; 0x30
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca74:	f107 031c 	add.w	r3, r7, #28
 800ca78:	2200      	movs	r2, #0
 800ca7a:	601a      	str	r2, [r3, #0]
 800ca7c:	605a      	str	r2, [r3, #4]
 800ca7e:	609a      	str	r2, [r3, #8]
 800ca80:	60da      	str	r2, [r3, #12]
 800ca82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a6b      	ldr	r2, [pc, #428]	; (800cc38 <HAL_ADC_MspInit+0x1cc>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d172      	bne.n	800cb74 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ca8e:	2300      	movs	r3, #0
 800ca90:	61bb      	str	r3, [r7, #24]
 800ca92:	4b6a      	ldr	r3, [pc, #424]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800ca94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca96:	4a69      	ldr	r2, [pc, #420]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800ca98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca9c:	6453      	str	r3, [r2, #68]	; 0x44
 800ca9e:	4b67      	ldr	r3, [pc, #412]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800caa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caa6:	61bb      	str	r3, [r7, #24]
 800caa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800caaa:	2300      	movs	r3, #0
 800caac:	617b      	str	r3, [r7, #20]
 800caae:	4b63      	ldr	r3, [pc, #396]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800cab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab2:	4a62      	ldr	r2, [pc, #392]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800cab4:	f043 0304 	orr.w	r3, r3, #4
 800cab8:	6313      	str	r3, [r2, #48]	; 0x30
 800caba:	4b60      	ldr	r3, [pc, #384]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800cabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cabe:	f003 0304 	and.w	r3, r3, #4
 800cac2:	617b      	str	r3, [r7, #20]
 800cac4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cac6:	2300      	movs	r3, #0
 800cac8:	613b      	str	r3, [r7, #16]
 800caca:	4b5c      	ldr	r3, [pc, #368]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800cacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cace:	4a5b      	ldr	r2, [pc, #364]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800cad0:	f043 0302 	orr.w	r3, r3, #2
 800cad4:	6313      	str	r3, [r2, #48]	; 0x30
 800cad6:	4b59      	ldr	r3, [pc, #356]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800cad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cada:	f003 0302 	and.w	r3, r3, #2
 800cade:	613b      	str	r3, [r7, #16]
 800cae0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800cae2:	2311      	movs	r3, #17
 800cae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cae6:	2303      	movs	r3, #3
 800cae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800caea:	2300      	movs	r3, #0
 800caec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800caee:	f107 031c 	add.w	r3, r7, #28
 800caf2:	4619      	mov	r1, r3
 800caf4:	4852      	ldr	r0, [pc, #328]	; (800cc40 <HAL_ADC_MspInit+0x1d4>)
 800caf6:	f003 fbc1 	bl	801027c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800cafa:	2302      	movs	r3, #2
 800cafc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cafe:	2303      	movs	r3, #3
 800cb00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb02:	2300      	movs	r3, #0
 800cb04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cb06:	f107 031c 	add.w	r3, r7, #28
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	484d      	ldr	r0, [pc, #308]	; (800cc44 <HAL_ADC_MspInit+0x1d8>)
 800cb0e:	f003 fbb5 	bl	801027c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800cb12:	4b4d      	ldr	r3, [pc, #308]	; (800cc48 <HAL_ADC_MspInit+0x1dc>)
 800cb14:	4a4d      	ldr	r2, [pc, #308]	; (800cc4c <HAL_ADC_MspInit+0x1e0>)
 800cb16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800cb18:	4b4b      	ldr	r3, [pc, #300]	; (800cc48 <HAL_ADC_MspInit+0x1dc>)
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cb1e:	4b4a      	ldr	r3, [pc, #296]	; (800cc48 <HAL_ADC_MspInit+0x1dc>)
 800cb20:	2200      	movs	r2, #0
 800cb22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800cb24:	4b48      	ldr	r3, [pc, #288]	; (800cc48 <HAL_ADC_MspInit+0x1dc>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800cb2a:	4b47      	ldr	r3, [pc, #284]	; (800cc48 <HAL_ADC_MspInit+0x1dc>)
 800cb2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cb30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800cb32:	4b45      	ldr	r3, [pc, #276]	; (800cc48 <HAL_ADC_MspInit+0x1dc>)
 800cb34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cb38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800cb3a:	4b43      	ldr	r3, [pc, #268]	; (800cc48 <HAL_ADC_MspInit+0x1dc>)
 800cb3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800cb40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800cb42:	4b41      	ldr	r3, [pc, #260]	; (800cc48 <HAL_ADC_MspInit+0x1dc>)
 800cb44:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb48:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800cb4a:	4b3f      	ldr	r3, [pc, #252]	; (800cc48 <HAL_ADC_MspInit+0x1dc>)
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cb50:	4b3d      	ldr	r3, [pc, #244]	; (800cc48 <HAL_ADC_MspInit+0x1dc>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800cb56:	483c      	ldr	r0, [pc, #240]	; (800cc48 <HAL_ADC_MspInit+0x1dc>)
 800cb58:	f002 fdc8 	bl	800f6ec <HAL_DMA_Init>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800cb62:	f7ff ff59 	bl	800ca18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4a37      	ldr	r2, [pc, #220]	; (800cc48 <HAL_ADC_MspInit+0x1dc>)
 800cb6a:	639a      	str	r2, [r3, #56]	; 0x38
 800cb6c:	4a36      	ldr	r2, [pc, #216]	; (800cc48 <HAL_ADC_MspInit+0x1dc>)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800cb72:	e05d      	b.n	800cc30 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a35      	ldr	r2, [pc, #212]	; (800cc50 <HAL_ADC_MspInit+0x1e4>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d158      	bne.n	800cc30 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800cb7e:	2300      	movs	r3, #0
 800cb80:	60fb      	str	r3, [r7, #12]
 800cb82:	4b2e      	ldr	r3, [pc, #184]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800cb84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb86:	4a2d      	ldr	r2, [pc, #180]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800cb88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cb8c:	6453      	str	r3, [r2, #68]	; 0x44
 800cb8e:	4b2b      	ldr	r3, [pc, #172]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800cb90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb96:	60fb      	str	r3, [r7, #12]
 800cb98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	60bb      	str	r3, [r7, #8]
 800cb9e:	4b27      	ldr	r3, [pc, #156]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800cba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba2:	4a26      	ldr	r2, [pc, #152]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800cba4:	f043 0304 	orr.w	r3, r3, #4
 800cba8:	6313      	str	r3, [r2, #48]	; 0x30
 800cbaa:	4b24      	ldr	r3, [pc, #144]	; (800cc3c <HAL_ADC_MspInit+0x1d0>)
 800cbac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbae:	f003 0304 	and.w	r3, r3, #4
 800cbb2:	60bb      	str	r3, [r7, #8]
 800cbb4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800cbb6:	2322      	movs	r3, #34	; 0x22
 800cbb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cbba:	2303      	movs	r3, #3
 800cbbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cbc2:	f107 031c 	add.w	r3, r7, #28
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	481d      	ldr	r0, [pc, #116]	; (800cc40 <HAL_ADC_MspInit+0x1d4>)
 800cbca:	f003 fb57 	bl	801027c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800cbce:	4b21      	ldr	r3, [pc, #132]	; (800cc54 <HAL_ADC_MspInit+0x1e8>)
 800cbd0:	4a21      	ldr	r2, [pc, #132]	; (800cc58 <HAL_ADC_MspInit+0x1ec>)
 800cbd2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800cbd4:	4b1f      	ldr	r3, [pc, #124]	; (800cc54 <HAL_ADC_MspInit+0x1e8>)
 800cbd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800cbda:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cbdc:	4b1d      	ldr	r3, [pc, #116]	; (800cc54 <HAL_ADC_MspInit+0x1e8>)
 800cbde:	2200      	movs	r2, #0
 800cbe0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800cbe2:	4b1c      	ldr	r3, [pc, #112]	; (800cc54 <HAL_ADC_MspInit+0x1e8>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800cbe8:	4b1a      	ldr	r3, [pc, #104]	; (800cc54 <HAL_ADC_MspInit+0x1e8>)
 800cbea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cbee:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800cbf0:	4b18      	ldr	r3, [pc, #96]	; (800cc54 <HAL_ADC_MspInit+0x1e8>)
 800cbf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cbf6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800cbf8:	4b16      	ldr	r3, [pc, #88]	; (800cc54 <HAL_ADC_MspInit+0x1e8>)
 800cbfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800cbfe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800cc00:	4b14      	ldr	r3, [pc, #80]	; (800cc54 <HAL_ADC_MspInit+0x1e8>)
 800cc02:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc06:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800cc08:	4b12      	ldr	r3, [pc, #72]	; (800cc54 <HAL_ADC_MspInit+0x1e8>)
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cc0e:	4b11      	ldr	r3, [pc, #68]	; (800cc54 <HAL_ADC_MspInit+0x1e8>)
 800cc10:	2200      	movs	r2, #0
 800cc12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800cc14:	480f      	ldr	r0, [pc, #60]	; (800cc54 <HAL_ADC_MspInit+0x1e8>)
 800cc16:	f002 fd69 	bl	800f6ec <HAL_DMA_Init>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d001      	beq.n	800cc24 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800cc20:	f7ff fefa 	bl	800ca18 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4a0b      	ldr	r2, [pc, #44]	; (800cc54 <HAL_ADC_MspInit+0x1e8>)
 800cc28:	639a      	str	r2, [r3, #56]	; 0x38
 800cc2a:	4a0a      	ldr	r2, [pc, #40]	; (800cc54 <HAL_ADC_MspInit+0x1e8>)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6393      	str	r3, [r2, #56]	; 0x38
}
 800cc30:	bf00      	nop
 800cc32:	3730      	adds	r7, #48	; 0x30
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	40012000 	.word	0x40012000
 800cc3c:	40023800 	.word	0x40023800
 800cc40:	40020800 	.word	0x40020800
 800cc44:	40020400 	.word	0x40020400
 800cc48:	20008de8 	.word	0x20008de8
 800cc4c:	40026410 	.word	0x40026410
 800cc50:	40012100 	.word	0x40012100
 800cc54:	20008e88 	.word	0x20008e88
 800cc58:	40026440 	.word	0x40026440

0800cc5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b08a      	sub	sp, #40	; 0x28
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc64:	f107 0314 	add.w	r3, r7, #20
 800cc68:	2200      	movs	r2, #0
 800cc6a:	601a      	str	r2, [r3, #0]
 800cc6c:	605a      	str	r2, [r3, #4]
 800cc6e:	609a      	str	r2, [r3, #8]
 800cc70:	60da      	str	r2, [r3, #12]
 800cc72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a19      	ldr	r2, [pc, #100]	; (800cce0 <HAL_SPI_MspInit+0x84>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d12c      	bne.n	800ccd8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800cc7e:	2300      	movs	r3, #0
 800cc80:	613b      	str	r3, [r7, #16]
 800cc82:	4b18      	ldr	r3, [pc, #96]	; (800cce4 <HAL_SPI_MspInit+0x88>)
 800cc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc86:	4a17      	ldr	r2, [pc, #92]	; (800cce4 <HAL_SPI_MspInit+0x88>)
 800cc88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc8c:	6413      	str	r3, [r2, #64]	; 0x40
 800cc8e:	4b15      	ldr	r3, [pc, #84]	; (800cce4 <HAL_SPI_MspInit+0x88>)
 800cc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc96:	613b      	str	r3, [r7, #16]
 800cc98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	60fb      	str	r3, [r7, #12]
 800cc9e:	4b11      	ldr	r3, [pc, #68]	; (800cce4 <HAL_SPI_MspInit+0x88>)
 800cca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca2:	4a10      	ldr	r2, [pc, #64]	; (800cce4 <HAL_SPI_MspInit+0x88>)
 800cca4:	f043 0304 	orr.w	r3, r3, #4
 800cca8:	6313      	str	r3, [r2, #48]	; 0x30
 800ccaa:	4b0e      	ldr	r3, [pc, #56]	; (800cce4 <HAL_SPI_MspInit+0x88>)
 800ccac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccae:	f003 0304 	and.w	r3, r3, #4
 800ccb2:	60fb      	str	r3, [r7, #12]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800ccb6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ccba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccbc:	2302      	movs	r3, #2
 800ccbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccc4:	2303      	movs	r3, #3
 800ccc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800ccc8:	2306      	movs	r3, #6
 800ccca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cccc:	f107 0314 	add.w	r3, r7, #20
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	4805      	ldr	r0, [pc, #20]	; (800cce8 <HAL_SPI_MspInit+0x8c>)
 800ccd4:	f003 fad2 	bl	801027c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800ccd8:	bf00      	nop
 800ccda:	3728      	adds	r7, #40	; 0x28
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	40003c00 	.word	0x40003c00
 800cce4:	40023800 	.word	0x40023800
 800cce8:	40020800 	.word	0x40020800

0800ccec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b086      	sub	sp, #24
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a30      	ldr	r2, [pc, #192]	; (800cdbc <HAL_TIM_Base_MspInit+0xd0>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d116      	bne.n	800cd2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ccfe:	2300      	movs	r3, #0
 800cd00:	617b      	str	r3, [r7, #20]
 800cd02:	4b2f      	ldr	r3, [pc, #188]	; (800cdc0 <HAL_TIM_Base_MspInit+0xd4>)
 800cd04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd06:	4a2e      	ldr	r2, [pc, #184]	; (800cdc0 <HAL_TIM_Base_MspInit+0xd4>)
 800cd08:	f043 0301 	orr.w	r3, r3, #1
 800cd0c:	6453      	str	r3, [r2, #68]	; 0x44
 800cd0e:	4b2c      	ldr	r3, [pc, #176]	; (800cdc0 <HAL_TIM_Base_MspInit+0xd4>)
 800cd10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd12:	f003 0301 	and.w	r3, r3, #1
 800cd16:	617b      	str	r3, [r7, #20]
 800cd18:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	2100      	movs	r1, #0
 800cd1e:	2019      	movs	r0, #25
 800cd20:	f002 fcad 	bl	800f67e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800cd24:	2019      	movs	r0, #25
 800cd26:	f002 fcc6 	bl	800f6b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800cd2a:	e042      	b.n	800cdb2 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd34:	d10e      	bne.n	800cd54 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cd36:	2300      	movs	r3, #0
 800cd38:	613b      	str	r3, [r7, #16]
 800cd3a:	4b21      	ldr	r3, [pc, #132]	; (800cdc0 <HAL_TIM_Base_MspInit+0xd4>)
 800cd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd3e:	4a20      	ldr	r2, [pc, #128]	; (800cdc0 <HAL_TIM_Base_MspInit+0xd4>)
 800cd40:	f043 0301 	orr.w	r3, r3, #1
 800cd44:	6413      	str	r3, [r2, #64]	; 0x40
 800cd46:	4b1e      	ldr	r3, [pc, #120]	; (800cdc0 <HAL_TIM_Base_MspInit+0xd4>)
 800cd48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd4a:	f003 0301 	and.w	r3, r3, #1
 800cd4e:	613b      	str	r3, [r7, #16]
 800cd50:	693b      	ldr	r3, [r7, #16]
}
 800cd52:	e02e      	b.n	800cdb2 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4a1a      	ldr	r2, [pc, #104]	; (800cdc4 <HAL_TIM_Base_MspInit+0xd8>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d10e      	bne.n	800cd7c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800cd5e:	2300      	movs	r3, #0
 800cd60:	60fb      	str	r3, [r7, #12]
 800cd62:	4b17      	ldr	r3, [pc, #92]	; (800cdc0 <HAL_TIM_Base_MspInit+0xd4>)
 800cd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd66:	4a16      	ldr	r2, [pc, #88]	; (800cdc0 <HAL_TIM_Base_MspInit+0xd4>)
 800cd68:	f043 0308 	orr.w	r3, r3, #8
 800cd6c:	6413      	str	r3, [r2, #64]	; 0x40
 800cd6e:	4b14      	ldr	r3, [pc, #80]	; (800cdc0 <HAL_TIM_Base_MspInit+0xd4>)
 800cd70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd72:	f003 0308 	and.w	r3, r3, #8
 800cd76:	60fb      	str	r3, [r7, #12]
 800cd78:	68fb      	ldr	r3, [r7, #12]
}
 800cd7a:	e01a      	b.n	800cdb2 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4a11      	ldr	r2, [pc, #68]	; (800cdc8 <HAL_TIM_Base_MspInit+0xdc>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d115      	bne.n	800cdb2 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800cd86:	2300      	movs	r3, #0
 800cd88:	60bb      	str	r3, [r7, #8]
 800cd8a:	4b0d      	ldr	r3, [pc, #52]	; (800cdc0 <HAL_TIM_Base_MspInit+0xd4>)
 800cd8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd8e:	4a0c      	ldr	r2, [pc, #48]	; (800cdc0 <HAL_TIM_Base_MspInit+0xd4>)
 800cd90:	f043 0302 	orr.w	r3, r3, #2
 800cd94:	6453      	str	r3, [r2, #68]	; 0x44
 800cd96:	4b0a      	ldr	r3, [pc, #40]	; (800cdc0 <HAL_TIM_Base_MspInit+0xd4>)
 800cd98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd9a:	f003 0302 	and.w	r3, r3, #2
 800cd9e:	60bb      	str	r3, [r7, #8]
 800cda0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800cda2:	2200      	movs	r2, #0
 800cda4:	2101      	movs	r1, #1
 800cda6:	202c      	movs	r0, #44	; 0x2c
 800cda8:	f002 fc69 	bl	800f67e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800cdac:	202c      	movs	r0, #44	; 0x2c
 800cdae:	f002 fc82 	bl	800f6b6 <HAL_NVIC_EnableIRQ>
}
 800cdb2:	bf00      	nop
 800cdb4:	3718      	adds	r7, #24
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	40010000 	.word	0x40010000
 800cdc0:	40023800 	.word	0x40023800
 800cdc4:	40000c00 	.word	0x40000c00
 800cdc8:	40010400 	.word	0x40010400

0800cdcc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b08c      	sub	sp, #48	; 0x30
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdd4:	f107 031c 	add.w	r3, r7, #28
 800cdd8:	2200      	movs	r2, #0
 800cdda:	601a      	str	r2, [r3, #0]
 800cddc:	605a      	str	r2, [r3, #4]
 800cdde:	609a      	str	r2, [r3, #8]
 800cde0:	60da      	str	r2, [r3, #12]
 800cde2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a32      	ldr	r2, [pc, #200]	; (800ceb4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d12c      	bne.n	800ce48 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800cdee:	2300      	movs	r3, #0
 800cdf0:	61bb      	str	r3, [r7, #24]
 800cdf2:	4b31      	ldr	r3, [pc, #196]	; (800ceb8 <HAL_TIM_Encoder_MspInit+0xec>)
 800cdf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf6:	4a30      	ldr	r2, [pc, #192]	; (800ceb8 <HAL_TIM_Encoder_MspInit+0xec>)
 800cdf8:	f043 0302 	orr.w	r3, r3, #2
 800cdfc:	6413      	str	r3, [r2, #64]	; 0x40
 800cdfe:	4b2e      	ldr	r3, [pc, #184]	; (800ceb8 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce02:	f003 0302 	and.w	r3, r3, #2
 800ce06:	61bb      	str	r3, [r7, #24]
 800ce08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	617b      	str	r3, [r7, #20]
 800ce0e:	4b2a      	ldr	r3, [pc, #168]	; (800ceb8 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce12:	4a29      	ldr	r2, [pc, #164]	; (800ceb8 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce14:	f043 0301 	orr.w	r3, r3, #1
 800ce18:	6313      	str	r3, [r2, #48]	; 0x30
 800ce1a:	4b27      	ldr	r3, [pc, #156]	; (800ceb8 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce1e:	f003 0301 	and.w	r3, r3, #1
 800ce22:	617b      	str	r3, [r7, #20]
 800ce24:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ce26:	23c0      	movs	r3, #192	; 0xc0
 800ce28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce2a:	2302      	movs	r3, #2
 800ce2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce32:	2300      	movs	r3, #0
 800ce34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ce36:	2302      	movs	r3, #2
 800ce38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce3a:	f107 031c 	add.w	r3, r7, #28
 800ce3e:	4619      	mov	r1, r3
 800ce40:	481e      	ldr	r0, [pc, #120]	; (800cebc <HAL_TIM_Encoder_MspInit+0xf0>)
 800ce42:	f003 fa1b 	bl	801027c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800ce46:	e030      	b.n	800ceaa <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4a1c      	ldr	r2, [pc, #112]	; (800cec0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d12b      	bne.n	800ceaa <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ce52:	2300      	movs	r3, #0
 800ce54:	613b      	str	r3, [r7, #16]
 800ce56:	4b18      	ldr	r3, [pc, #96]	; (800ceb8 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce5a:	4a17      	ldr	r2, [pc, #92]	; (800ceb8 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce5c:	f043 0304 	orr.w	r3, r3, #4
 800ce60:	6413      	str	r3, [r2, #64]	; 0x40
 800ce62:	4b15      	ldr	r3, [pc, #84]	; (800ceb8 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce66:	f003 0304 	and.w	r3, r3, #4
 800ce6a:	613b      	str	r3, [r7, #16]
 800ce6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ce6e:	2300      	movs	r3, #0
 800ce70:	60fb      	str	r3, [r7, #12]
 800ce72:	4b11      	ldr	r3, [pc, #68]	; (800ceb8 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce76:	4a10      	ldr	r2, [pc, #64]	; (800ceb8 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce78:	f043 0302 	orr.w	r3, r3, #2
 800ce7c:	6313      	str	r3, [r2, #48]	; 0x30
 800ce7e:	4b0e      	ldr	r3, [pc, #56]	; (800ceb8 <HAL_TIM_Encoder_MspInit+0xec>)
 800ce80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce82:	f003 0302 	and.w	r3, r3, #2
 800ce86:	60fb      	str	r3, [r7, #12]
 800ce88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ce8a:	23c0      	movs	r3, #192	; 0xc0
 800ce8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce8e:	2302      	movs	r3, #2
 800ce90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce92:	2300      	movs	r3, #0
 800ce94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce96:	2300      	movs	r3, #0
 800ce98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800ce9a:	2302      	movs	r3, #2
 800ce9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce9e:	f107 031c 	add.w	r3, r7, #28
 800cea2:	4619      	mov	r1, r3
 800cea4:	4807      	ldr	r0, [pc, #28]	; (800cec4 <HAL_TIM_Encoder_MspInit+0xf8>)
 800cea6:	f003 f9e9 	bl	801027c <HAL_GPIO_Init>
}
 800ceaa:	bf00      	nop
 800ceac:	3730      	adds	r7, #48	; 0x30
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	40000400 	.word	0x40000400
 800ceb8:	40023800 	.word	0x40023800
 800cebc:	40020000 	.word	0x40020000
 800cec0:	40000800 	.word	0x40000800
 800cec4:	40020400 	.word	0x40020400

0800cec8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b08c      	sub	sp, #48	; 0x30
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ced0:	f107 031c 	add.w	r3, r7, #28
 800ced4:	2200      	movs	r2, #0
 800ced6:	601a      	str	r2, [r3, #0]
 800ced8:	605a      	str	r2, [r3, #4]
 800ceda:	609a      	str	r2, [r3, #8]
 800cedc:	60da      	str	r2, [r3, #12]
 800cede:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cee8:	d11e      	bne.n	800cf28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ceea:	2300      	movs	r3, #0
 800ceec:	61bb      	str	r3, [r7, #24]
 800ceee:	4b43      	ldr	r3, [pc, #268]	; (800cffc <HAL_TIM_MspPostInit+0x134>)
 800cef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef2:	4a42      	ldr	r2, [pc, #264]	; (800cffc <HAL_TIM_MspPostInit+0x134>)
 800cef4:	f043 0301 	orr.w	r3, r3, #1
 800cef8:	6313      	str	r3, [r2, #48]	; 0x30
 800cefa:	4b40      	ldr	r3, [pc, #256]	; (800cffc <HAL_TIM_MspPostInit+0x134>)
 800cefc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cefe:	f003 0301 	and.w	r3, r3, #1
 800cf02:	61bb      	str	r3, [r7, #24]
 800cf04:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800cf06:	2308      	movs	r3, #8
 800cf08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf0a:	2302      	movs	r3, #2
 800cf0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf12:	2303      	movs	r3, #3
 800cf14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800cf16:	2301      	movs	r3, #1
 800cf18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf1a:	f107 031c 	add.w	r3, r7, #28
 800cf1e:	4619      	mov	r1, r3
 800cf20:	4837      	ldr	r0, [pc, #220]	; (800d000 <HAL_TIM_MspPostInit+0x138>)
 800cf22:	f003 f9ab 	bl	801027c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800cf26:	e064      	b.n	800cff2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4a35      	ldr	r2, [pc, #212]	; (800d004 <HAL_TIM_MspPostInit+0x13c>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d11e      	bne.n	800cf70 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf32:	2300      	movs	r3, #0
 800cf34:	617b      	str	r3, [r7, #20]
 800cf36:	4b31      	ldr	r3, [pc, #196]	; (800cffc <HAL_TIM_MspPostInit+0x134>)
 800cf38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf3a:	4a30      	ldr	r2, [pc, #192]	; (800cffc <HAL_TIM_MspPostInit+0x134>)
 800cf3c:	f043 0301 	orr.w	r3, r3, #1
 800cf40:	6313      	str	r3, [r2, #48]	; 0x30
 800cf42:	4b2e      	ldr	r3, [pc, #184]	; (800cffc <HAL_TIM_MspPostInit+0x134>)
 800cf44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf46:	f003 0301 	and.w	r3, r3, #1
 800cf4a:	617b      	str	r3, [r7, #20]
 800cf4c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800cf4e:	2302      	movs	r3, #2
 800cf50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf52:	2302      	movs	r3, #2
 800cf54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf56:	2300      	movs	r3, #0
 800cf58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800cf5e:	2302      	movs	r3, #2
 800cf60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf62:	f107 031c 	add.w	r3, r7, #28
 800cf66:	4619      	mov	r1, r3
 800cf68:	4825      	ldr	r0, [pc, #148]	; (800d000 <HAL_TIM_MspPostInit+0x138>)
 800cf6a:	f003 f987 	bl	801027c <HAL_GPIO_Init>
}
 800cf6e:	e040      	b.n	800cff2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a24      	ldr	r2, [pc, #144]	; (800d008 <HAL_TIM_MspPostInit+0x140>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d13b      	bne.n	800cff2 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	613b      	str	r3, [r7, #16]
 800cf7e:	4b1f      	ldr	r3, [pc, #124]	; (800cffc <HAL_TIM_MspPostInit+0x134>)
 800cf80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf82:	4a1e      	ldr	r2, [pc, #120]	; (800cffc <HAL_TIM_MspPostInit+0x134>)
 800cf84:	f043 0301 	orr.w	r3, r3, #1
 800cf88:	6313      	str	r3, [r2, #48]	; 0x30
 800cf8a:	4b1c      	ldr	r3, [pc, #112]	; (800cffc <HAL_TIM_MspPostInit+0x134>)
 800cf8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf8e:	f003 0301 	and.w	r3, r3, #1
 800cf92:	613b      	str	r3, [r7, #16]
 800cf94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf96:	2300      	movs	r3, #0
 800cf98:	60fb      	str	r3, [r7, #12]
 800cf9a:	4b18      	ldr	r3, [pc, #96]	; (800cffc <HAL_TIM_MspPostInit+0x134>)
 800cf9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf9e:	4a17      	ldr	r2, [pc, #92]	; (800cffc <HAL_TIM_MspPostInit+0x134>)
 800cfa0:	f043 0304 	orr.w	r3, r3, #4
 800cfa4:	6313      	str	r3, [r2, #48]	; 0x30
 800cfa6:	4b15      	ldr	r3, [pc, #84]	; (800cffc <HAL_TIM_MspPostInit+0x134>)
 800cfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfaa:	f003 0304 	and.w	r3, r3, #4
 800cfae:	60fb      	str	r3, [r7, #12]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800cfb2:	2320      	movs	r3, #32
 800cfb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfb6:	2302      	movs	r3, #2
 800cfb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cfc2:	2303      	movs	r3, #3
 800cfc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfc6:	f107 031c 	add.w	r3, r7, #28
 800cfca:	4619      	mov	r1, r3
 800cfcc:	480c      	ldr	r0, [pc, #48]	; (800d000 <HAL_TIM_MspPostInit+0x138>)
 800cfce:	f003 f955 	bl	801027c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800cfd2:	2340      	movs	r3, #64	; 0x40
 800cfd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfd6:	2302      	movs	r3, #2
 800cfd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cfe2:	2303      	movs	r3, #3
 800cfe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cfe6:	f107 031c 	add.w	r3, r7, #28
 800cfea:	4619      	mov	r1, r3
 800cfec:	4807      	ldr	r0, [pc, #28]	; (800d00c <HAL_TIM_MspPostInit+0x144>)
 800cfee:	f003 f945 	bl	801027c <HAL_GPIO_Init>
}
 800cff2:	bf00      	nop
 800cff4:	3730      	adds	r7, #48	; 0x30
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	40023800 	.word	0x40023800
 800d000:	40020000 	.word	0x40020000
 800d004:	40000c00 	.word	0x40000c00
 800d008:	40010400 	.word	0x40010400
 800d00c:	40020800 	.word	0x40020800

0800d010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b08a      	sub	sp, #40	; 0x28
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d018:	f107 0314 	add.w	r3, r7, #20
 800d01c:	2200      	movs	r2, #0
 800d01e:	601a      	str	r2, [r3, #0]
 800d020:	605a      	str	r2, [r3, #4]
 800d022:	609a      	str	r2, [r3, #8]
 800d024:	60da      	str	r2, [r3, #12]
 800d026:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a19      	ldr	r2, [pc, #100]	; (800d094 <HAL_UART_MspInit+0x84>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d12c      	bne.n	800d08c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d032:	2300      	movs	r3, #0
 800d034:	613b      	str	r3, [r7, #16]
 800d036:	4b18      	ldr	r3, [pc, #96]	; (800d098 <HAL_UART_MspInit+0x88>)
 800d038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d03a:	4a17      	ldr	r2, [pc, #92]	; (800d098 <HAL_UART_MspInit+0x88>)
 800d03c:	f043 0310 	orr.w	r3, r3, #16
 800d040:	6453      	str	r3, [r2, #68]	; 0x44
 800d042:	4b15      	ldr	r3, [pc, #84]	; (800d098 <HAL_UART_MspInit+0x88>)
 800d044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d046:	f003 0310 	and.w	r3, r3, #16
 800d04a:	613b      	str	r3, [r7, #16]
 800d04c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d04e:	2300      	movs	r3, #0
 800d050:	60fb      	str	r3, [r7, #12]
 800d052:	4b11      	ldr	r3, [pc, #68]	; (800d098 <HAL_UART_MspInit+0x88>)
 800d054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d056:	4a10      	ldr	r2, [pc, #64]	; (800d098 <HAL_UART_MspInit+0x88>)
 800d058:	f043 0301 	orr.w	r3, r3, #1
 800d05c:	6313      	str	r3, [r2, #48]	; 0x30
 800d05e:	4b0e      	ldr	r3, [pc, #56]	; (800d098 <HAL_UART_MspInit+0x88>)
 800d060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d062:	f003 0301 	and.w	r3, r3, #1
 800d066:	60fb      	str	r3, [r7, #12]
 800d068:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d06a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800d06e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d070:	2302      	movs	r3, #2
 800d072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d074:	2300      	movs	r3, #0
 800d076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d078:	2303      	movs	r3, #3
 800d07a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d07c:	2307      	movs	r3, #7
 800d07e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d080:	f107 0314 	add.w	r3, r7, #20
 800d084:	4619      	mov	r1, r3
 800d086:	4805      	ldr	r0, [pc, #20]	; (800d09c <HAL_UART_MspInit+0x8c>)
 800d088:	f003 f8f8 	bl	801027c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800d08c:	bf00      	nop
 800d08e:	3728      	adds	r7, #40	; 0x28
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	40011000 	.word	0x40011000
 800d098:	40023800 	.word	0x40023800
 800d09c:	40020000 	.word	0x40020000

0800d0a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d0a4:	e7fe      	b.n	800d0a4 <NMI_Handler+0x4>

0800d0a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d0a6:	b480      	push	{r7}
 800d0a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d0aa:	e7fe      	b.n	800d0aa <HardFault_Handler+0x4>

0800d0ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d0b0:	e7fe      	b.n	800d0b0 <MemManage_Handler+0x4>

0800d0b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d0b2:	b480      	push	{r7}
 800d0b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d0b6:	e7fe      	b.n	800d0b6 <BusFault_Handler+0x4>

0800d0b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d0bc:	e7fe      	b.n	800d0bc <UsageFault_Handler+0x4>

0800d0be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d0be:	b480      	push	{r7}
 800d0c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d0c2:	bf00      	nop
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d0d0:	bf00      	nop
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr

0800d0da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d0da:	b480      	push	{r7}
 800d0dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d0de:	bf00      	nop
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d0ec:	f001 fd6c 	bl	800ebc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d0f0:	bf00      	nop
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d0f8:	4802      	ldr	r0, [pc, #8]	; (800d104 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800d0fa:	f004 ffeb 	bl	80120d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800d0fe:	bf00      	nop
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	20008e48 	.word	0x20008e48

0800d108 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800d10c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d110:	f003 fa68 	bl	80105e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800d114:	bf00      	nop
 800d116:	bd80      	pop	{r7, pc}

0800d118 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d11c:	4802      	ldr	r0, [pc, #8]	; (800d128 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800d11e:	f004 ffd9 	bl	80120d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800d122:	bf00      	nop
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	20008c00 	.word	0x20008c00

0800d12c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800d130:	4802      	ldr	r0, [pc, #8]	; (800d13c <DMA2_Stream0_IRQHandler+0x10>)
 800d132:	f002 fc51 	bl	800f9d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800d136:	bf00      	nop
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	20008de8 	.word	0x20008de8

0800d140 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800d144:	4802      	ldr	r0, [pc, #8]	; (800d150 <DMA2_Stream2_IRQHandler+0x10>)
 800d146:	f002 fc47 	bl	800f9d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800d14a:	bf00      	nop
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	20008e88 	.word	0x20008e88

0800d154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d154:	b480      	push	{r7}
 800d156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d158:	4b08      	ldr	r3, [pc, #32]	; (800d17c <SystemInit+0x28>)
 800d15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d15e:	4a07      	ldr	r2, [pc, #28]	; (800d17c <SystemInit+0x28>)
 800d160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d168:	4b04      	ldr	r3, [pc, #16]	; (800d17c <SystemInit+0x28>)
 800d16a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d16e:	609a      	str	r2, [r3, #8]
#endif
}
 800d170:	bf00      	nop
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	e000ed00 	.word	0xe000ed00

0800d180 <initSearchData>:
#include "MicroMouse.h"
#include "Action.h"
#include "Search.h"

void initSearchData(maze_node *my_maze, profile *Mouse)
{
 800d180:	b570      	push	{r4, r5, r6, lr}
 800d182:	4604      	mov	r4, r0
 800d184:	b082      	sub	sp, #8
 800d186:	460d      	mov	r5, r1
    initMaze(my_maze);
 800d188:	f7fd fb68 	bl	800a85c <initMaze>
    initWeight(my_maze); //3/20ms
 800d18c:	4620      	mov	r0, r4
 800d18e:	f7fd fb49 	bl	800a824 <initWeight>

    //状態の初期化
    initProfile(Mouse, my_maze);
 800d192:	4621      	mov	r1, r4
 800d194:	4628      	mov	r0, r5
 800d196:	f7fe fa17 	bl	800b5c8 <initProfile>
    Mouse->now.node = &(my_maze->RawNode[0][0]);
    Mouse->next.node = &(my_maze->RawNode[0][1]);
 800d19a:	f104 0308 	add.w	r3, r4, #8
 800d19e:	61eb      	str	r3, [r5, #28]

    //スタート座標にいる状態で、現在の重みを更新
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800d1a0:	2601      	movs	r6, #1
 800d1a2:	2302      	movs	r3, #2
 800d1a4:	786a      	ldrb	r2, [r5, #1]
 800d1a6:	7829      	ldrb	r1, [r5, #0]
    Mouse->now.node = &(my_maze->RawNode[0][0]);
 800d1a8:	612c      	str	r4, [r5, #16]
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	e9cd 3600 	strd	r3, r6, [sp]
 800d1b0:	f7fd fd26 	bl	800ac00 <updateAllNodeWeight>
}
 800d1b4:	b002      	add	sp, #8
 800d1b6:	bd70      	pop	{r4, r5, r6, pc}

0800d1b8 <updateRealSearch>:

void updateRealSearch()
{
 800d1b8:	b570      	push	{r4, r5, r6, lr}
	//wall_state wall_st[4]={0};

	//壁センサ値を読んで、各方角の壁の有無を判定
		//区画進入直前なので、更新予定の方角と座標がNextに入っているはず
		//前後左右の値として入れる
	shiftState(&my_mouse);
 800d1ba:	4d6f      	ldr	r5, [pc, #444]	; (800d378 <updateRealSearch+0x1c0>)
{
 800d1bc:	b082      	sub	sp, #8
	shiftState(&my_mouse);
 800d1be:	4628      	mov	r0, r5
 800d1c0:	f7fe fa1c 	bl	800b5fc <shiftState>

    switch (my_mouse.now.car)
 800d1c4:	7aab      	ldrb	r3, [r5, #10]
 800d1c6:	2b06      	cmp	r3, #6
 800d1c8:	f200 80d0 	bhi.w	800d36c <updateRealSearch+0x1b4>
 800d1cc:	e8df f003 	tbb	[pc, r3]
 800d1d0:	ce76cea2 	.word	0xce76cea2
 800d1d4:	ce4a      	.short	0xce4a
 800d1d6:	04          	.byte	0x04
 800d1d7:	00          	.byte	0x00
    	wall_dir[0] = NOWALL;
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
        break;
    case west:
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d1d8:	4b68      	ldr	r3, [pc, #416]	; (800d37c <updateRealSearch+0x1c4>)
 800d1da:	ed9f 5a69 	vldr	s10, [pc, #420]	; 800d380 <updateRealSearch+0x1c8>
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1de:	edd3 5a03 	vldr	s11, [r3, #12]
 800d1e2:	edd3 7a00 	vldr	s15, [r3]
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d1e6:	edd3 4a01 	vldr	s9, [r3, #4]
    	wall_dir[1] = NOWALL;
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d1ea:	ed93 6a02 	vldr	s12, [r3, #8]
 800d1ee:	eddf 6a65 	vldr	s13, [pc, #404]	; 800d384 <updateRealSearch+0x1cc>
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1f2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800d388 <updateRealSearch+0x1d0>
 800d1f6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d1fa:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d1fe:	eef4 4ac5 	vcmpe.f32	s9, s10
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d202:	ee67 7aa5 	vmul.f32	s15, s15, s11
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d20a:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800d20e:	bfcc      	ite	gt
 800d210:	2601      	movgt	r6, #1
 800d212:	2600      	movle	r6, #0
 800d214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d21c:	bfcc      	ite	gt
 800d21e:	2101      	movgt	r1, #1
 800d220:	2100      	movle	r1, #0
 800d222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d226:	bfcc      	ite	gt
 800d228:	2201      	movgt	r2, #1
 800d22a:	2200      	movle	r2, #0
        break;
 800d22c:	2000      	movs	r0, #0
//	Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
//	Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
//	Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
//	Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
    //アクションが終わるときがノードの上にいる状態なので、状態シフト済みとする（この関数はアクション中に呼び出される想定）
    my_mouse.now.wall.north = wall_dir[0];
 800d22e:	7b2c      	ldrb	r4, [r5, #12]
    my_mouse.now.wall.south = wall_dir[2];
    my_mouse.now.wall.west = wall_dir[3];

	//getWallNow(&(my_mouse->now), &wall[0]);

	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800d230:	7a6b      	ldrb	r3, [r5, #9]
    my_mouse.now.wall.north = wall_dir[0];
 800d232:	f366 0401 	bfi	r4, r6, #0, #2
    my_mouse.now.wall.east = wall_dir[1];
 800d236:	f360 0483 	bfi	r4, r0, #2, #2
    my_mouse.now.wall.south = wall_dir[2];
 800d23a:	f361 1405 	bfi	r4, r1, #4, #2
    my_mouse.now.wall.west = wall_dir[3];
 800d23e:	f362 1487 	bfi	r4, r2, #6, #2
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800d242:	4952      	ldr	r1, [pc, #328]	; (800d38c <updateRealSearch+0x1d4>)
 800d244:	7a2a      	ldrb	r2, [r5, #8]
 800d246:	4852      	ldr	r0, [pc, #328]	; (800d390 <updateRealSearch+0x1d8>)
    my_mouse.now.wall.west = wall_dir[3];
 800d248:	732c      	strb	r4, [r5, #12]
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800d24a:	f7fd fc11 	bl	800aa70 <updateNodeThree>

	updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800d24e:	2401      	movs	r4, #1
 800d250:	2302      	movs	r3, #2
 800d252:	786a      	ldrb	r2, [r5, #1]
 800d254:	7829      	ldrb	r1, [r5, #0]
 800d256:	484e      	ldr	r0, [pc, #312]	; (800d390 <updateRealSearch+0x1d8>)
 800d258:	e9cd 3400 	strd	r3, r4, [sp]
 800d25c:	f7fd fcd0 	bl	800ac00 <updateAllNodeWeight>
}
 800d260:	b002      	add	sp, #8
 800d262:	bd70      	pop	{r4, r5, r6, pc}
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d264:	4b45      	ldr	r3, [pc, #276]	; (800d37c <updateRealSearch+0x1c4>)
 800d266:	eddf 5a47 	vldr	s11, [pc, #284]	; 800d384 <updateRealSearch+0x1cc>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d26a:	edd3 4a03 	vldr	s9, [r3, #12]
 800d26e:	edd3 7a00 	vldr	s15, [r3]
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d272:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d276:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800d388 <updateRealSearch+0x1d0>
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d27a:	edd3 6a01 	vldr	s13, [r3, #4]
 800d27e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800d380 <updateRealSearch+0x1c8>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d282:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d286:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800d28a:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d28e:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800d292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d296:	eef4 7ac6 	vcmpe.f32	s15, s12
 800d29a:	bfcc      	ite	gt
 800d29c:	2001      	movgt	r0, #1
 800d29e:	2000      	movle	r0, #0
 800d2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d2a4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d2a8:	bfcc      	ite	gt
 800d2aa:	2101      	movgt	r1, #1
 800d2ac:	2100      	movle	r1, #0
 800d2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2b2:	bfcc      	ite	gt
 800d2b4:	2201      	movgt	r2, #1
 800d2b6:	2200      	movle	r2, #0
        break;
 800d2b8:	2600      	movs	r6, #0
 800d2ba:	e7b8      	b.n	800d22e <updateRealSearch+0x76>
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d2bc:	4b2f      	ldr	r3, [pc, #188]	; (800d37c <updateRealSearch+0x1c4>)
 800d2be:	eddf 5a31 	vldr	s11, [pc, #196]	; 800d384 <updateRealSearch+0x1cc>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d2c2:	edd3 4a03 	vldr	s9, [r3, #12]
 800d2c6:	edd3 7a00 	vldr	s15, [r3]
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d2ca:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d2ce:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800d388 <updateRealSearch+0x1d0>
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d2d2:	edd3 6a01 	vldr	s13, [r3, #4]
 800d2d6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d380 <updateRealSearch+0x1c8>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d2da:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d2de:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800d2e2:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d2e6:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800d2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d2ee:	eef4 7ac6 	vcmpe.f32	s15, s12
 800d2f2:	bfcc      	ite	gt
 800d2f4:	2601      	movgt	r6, #1
 800d2f6:	2600      	movle	r6, #0
 800d2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d2fc:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d300:	bfcc      	ite	gt
 800d302:	2001      	movgt	r0, #1
 800d304:	2000      	movle	r0, #0
 800d306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d30a:	bfcc      	ite	gt
 800d30c:	2101      	movgt	r1, #1
 800d30e:	2100      	movle	r1, #0
        break;
 800d310:	2200      	movs	r2, #0
 800d312:	e78c      	b.n	800d22e <updateRealSearch+0x76>
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d314:	4b19      	ldr	r3, [pc, #100]	; (800d37c <updateRealSearch+0x1c4>)
 800d316:	ed9f 5a1c 	vldr	s10, [pc, #112]	; 800d388 <updateRealSearch+0x1d0>
 800d31a:	edd3 4a03 	vldr	s9, [r3, #12]
 800d31e:	edd3 7a00 	vldr	s15, [r3]
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d322:	edd3 5a01 	vldr	s11, [r3, #4]
 800d326:	ed9f 6a16 	vldr	s12, [pc, #88]	; 800d380 <updateRealSearch+0x1c8>
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d32a:	edd3 6a02 	vldr	s13, [r3, #8]
 800d32e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800d384 <updateRealSearch+0x1cc>
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d332:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d336:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800d33a:	ee67 7aa4 	vmul.f32	s15, s15, s9
        break;
 800d33e:	2100      	movs	r1, #0
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d340:	eef4 7ac5 	vcmpe.f32	s15, s10
 800d344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d348:	eef4 5ac6 	vcmpe.f32	s11, s12
 800d34c:	bfcc      	ite	gt
 800d34e:	2601      	movgt	r6, #1
 800d350:	460e      	movle	r6, r1
 800d352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d356:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d35a:	bfcc      	ite	gt
 800d35c:	2001      	movgt	r0, #1
 800d35e:	4608      	movle	r0, r1
 800d360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d364:	bfcc      	ite	gt
 800d366:	2201      	movgt	r2, #1
 800d368:	460a      	movle	r2, r1
        break;
 800d36a:	e760      	b.n	800d22e <updateRealSearch+0x76>
    switch (my_mouse.now.car)
 800d36c:	2200      	movs	r2, #0
 800d36e:	4611      	mov	r1, r2
 800d370:	4610      	mov	r0, r2
 800d372:	4616      	mov	r6, r2
 800d374:	e75b      	b.n	800d22e <updateRealSearch+0x76>
 800d376:	bf00      	nop
 800d378:	200081fc 	.word	0x200081fc
 800d37c:	200089cc 	.word	0x200089cc
 800d380:	42b40000 	.word	0x42b40000
 800d384:	42c80000 	.word	0x42c80000
 800d388:	42340000 	.word	0x42340000
 800d38c:	20008204 	.word	0x20008204
 800d390:	200083a8 	.word	0x200083a8

0800d394 <getNextDirection>:
//↑と↓は新ノードに来た時の処理なので、アクションの区切りをずらせばよさそう。
//現情報と次情報から次の進行方向を得る処理
void getNextDirection(maze_node *my_maze, profile *Mouse, char turn_mode)
{
 800d394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d398:	460c      	mov	r4, r1
	//メインでノード選択
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800d39a:	2301      	movs	r3, #1
 800d39c:	7a89      	ldrb	r1, [r1, #10]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);

	//既知区間加速このswitch文中で書くかも
		//コマンドキューのときはここでコマンドを発行してキューに渡す
	AddVelocity = 0;
 800d39e:	4d6e      	ldr	r5, [pc, #440]	; (800d558 <getNextDirection+0x1c4>)
{
 800d3a0:	4616      	mov	r6, r2
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800d3a2:	6922      	ldr	r2, [r4, #16]
{
 800d3a4:	4607      	mov	r7, r0
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800d3a6:	f7fd fd4d 	bl	800ae44 <getNextNode>
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 800d3aa:	f104 0114 	add.w	r1, r4, #20
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	61e0      	str	r0, [r4, #28]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 800d3b2:	f104 0008 	add.w	r0, r4, #8
 800d3b6:	f7fd ffb3 	bl	800b320 <getNextState>
	//2つのアクションを組み合わせたときに壁とマップの更新が入ってしまわないようにする
	_Bool accel_or_not = false;
	int accel_or_decel = 0;
	switch(Mouse->next.dir)
 800d3ba:	7de3      	ldrb	r3, [r4, #23]
	AddVelocity = 0;
 800d3bc:	2200      	movs	r2, #0
 800d3be:	602a      	str	r2, [r5, #0]
	switch(Mouse->next.dir)
 800d3c0:	2b05      	cmp	r3, #5
 800d3c2:	d863      	bhi.n	800d48c <getNextDirection+0xf8>
 800d3c4:	e8df f003 	tbb	[pc, r3]
 800d3c8:	2d55240f 	.word	0x2d55240f
 800d3cc:	0348      	.short	0x0348
		Calc = SearchOrFast;
		TurnLeft(turn_mode);
		break;
	case left:
		//左旋回
		Calc = SearchOrFast;
 800d3ce:	4a63      	ldr	r2, [pc, #396]	; (800d55c <getNextDirection+0x1c8>)
 800d3d0:	4b63      	ldr	r3, [pc, #396]	; (800d560 <getNextDirection+0x1cc>)
 800d3d2:	6812      	ldr	r2, [r2, #0]
 800d3d4:	601a      	str	r2, [r3, #0]
		ChangeLED(4);
 800d3d6:	2004      	movs	r0, #4
 800d3d8:	f000 fc62 	bl	800dca0 <ChangeLED>
		TurnLeft(turn_mode);
 800d3dc:	4630      	mov	r0, r6
		break;
	}

}
 800d3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode);
 800d3e2:	f7fc bd83 	b.w	8009eec <TurnLeft>
		accel_or_not = judgeAccelorNot(my_maze, Mouse->next.car, Mouse->next.node);
 800d3e6:	4638      	mov	r0, r7
 800d3e8:	69e2      	ldr	r2, [r4, #28]
 800d3ea:	7da1      	ldrb	r1, [r4, #22]
 800d3ec:	f7fd feb4 	bl	800b158 <judgeAccelorNot>
			if(VelocityMax == true)
 800d3f0:	4b5c      	ldr	r3, [pc, #368]	; (800d564 <getNextDirection+0x1d0>)
 800d3f2:	781b      	ldrb	r3, [r3, #0]
		if(accel_or_not == true) //既知で.直進
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d04b      	beq.n	800d490 <getNextDirection+0xfc>
			if(VelocityMax == true)
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f000 80a3 	beq.w	800d544 <getNextDirection+0x1b0>
				AddVelocity = 245;
 800d3fe:	4b5a      	ldr	r3, [pc, #360]	; (800d568 <getNextDirection+0x1d4>)
 800d400:	602b      	str	r3, [r5, #0]
				ChangeLED(0);
 800d402:	2000      	movs	r0, #0
 800d404:	f000 fc4c 	bl	800dca0 <ChangeLED>
 800d408:	edd5 7a00 	vldr	s15, [r5]
				accel_or_decel = 0; //そのまま
 800d40c:	2000      	movs	r0, #0
 800d40e:	e04b      	b.n	800d4a8 <getNextDirection+0x114>
		Calc = SearchOrFast;
 800d410:	4a52      	ldr	r2, [pc, #328]	; (800d55c <getNextDirection+0x1c8>)
 800d412:	4b53      	ldr	r3, [pc, #332]	; (800d560 <getNextDirection+0x1cc>)
 800d414:	6812      	ldr	r2, [r2, #0]
 800d416:	601a      	str	r2, [r3, #0]
		TurnRight(turn_mode);
 800d418:	4630      	mov	r0, r6
}
 800d41a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode);
 800d41e:	f7fc bd27 	b.w	8009e70 <TurnRight>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d422:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800d560 <getNextDirection+0x1cc>
 800d426:	2601      	movs	r6, #1
 800d428:	f8c8 6000 	str.w	r6, [r8]
		GoBack();
 800d42c:	f7fc fd9a 	bl	8009f64 <GoBack>
				accel_or_not = judgeAccelorNot(my_maze, Mouse->next.car, Mouse->next.node);
 800d430:	4638      	mov	r0, r7
 800d432:	69e2      	ldr	r2, [r4, #28]
 800d434:	7da1      	ldrb	r1, [r4, #22]
 800d436:	f7fd fe8f 	bl	800b158 <judgeAccelorNot>
					if(VelocityMax == true)
 800d43a:	4b4a      	ldr	r3, [pc, #296]	; (800d564 <getNextDirection+0x1d0>)
 800d43c:	781b      	ldrb	r3, [r3, #0]
				if(accel_or_not == true) //既知で.直進
 800d43e:	2800      	cmp	r0, #0
 800d440:	d041      	beq.n	800d4c6 <getNextDirection+0x132>
					if(VelocityMax == true)
 800d442:	2b00      	cmp	r3, #0
 800d444:	d075      	beq.n	800d532 <getNextDirection+0x19e>
						AddVelocity = 245;
 800d446:	4b48      	ldr	r3, [pc, #288]	; (800d568 <getNextDirection+0x1d4>)
 800d448:	602b      	str	r3, [r5, #0]
						ChangeLED(0);
 800d44a:	2000      	movs	r0, #0
 800d44c:	f000 fc28 	bl	800dca0 <ChangeLED>
 800d450:	edd5 7a00 	vldr	s15, [r5]
						accel_or_decel = 0; //そのまま
 800d454:	2000      	movs	r0, #0
 800d456:	e041      	b.n	800d4dc <getNextDirection+0x148>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d458:	4c41      	ldr	r4, [pc, #260]	; (800d560 <getNextDirection+0x1cc>)
 800d45a:	2301      	movs	r3, #1
 800d45c:	6023      	str	r3, [r4, #0]
		GoBack();
 800d45e:	f7fc fd81 	bl	8009f64 <GoBack>
		Calc = SearchOrFast;
 800d462:	4b3e      	ldr	r3, [pc, #248]	; (800d55c <getNextDirection+0x1c8>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	6023      	str	r3, [r4, #0]
		TurnLeft(turn_mode);
 800d468:	4630      	mov	r0, r6
}
 800d46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode);
 800d46e:	f7fc bd3d 	b.w	8009eec <TurnLeft>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d472:	4c3b      	ldr	r4, [pc, #236]	; (800d560 <getNextDirection+0x1cc>)
 800d474:	2301      	movs	r3, #1
 800d476:	6023      	str	r3, [r4, #0]
		GoBack();
 800d478:	f7fc fd74 	bl	8009f64 <GoBack>
		Calc = SearchOrFast;
 800d47c:	4b37      	ldr	r3, [pc, #220]	; (800d55c <getNextDirection+0x1c8>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6023      	str	r3, [r4, #0]
		TurnRight(turn_mode);
 800d482:	4630      	mov	r0, r6
}
 800d484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode);
 800d488:	f7fc bcf2 	b.w	8009e70 <TurnRight>
}
 800d48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(VelocityMax == true)
 800d490:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 800d494:	2b00      	cmp	r3, #0
 800d496:	d13e      	bne.n	800d516 <getNextDirection+0x182>
				AddVelocity = 0;
 800d498:	2300      	movs	r3, #0
				ChangeLED(2);
 800d49a:	2002      	movs	r0, #2
				AddVelocity = 0;
 800d49c:	602b      	str	r3, [r5, #0]
				ChangeLED(2);
 800d49e:	f000 fbff 	bl	800dca0 <ChangeLED>
 800d4a2:	edd5 7a00 	vldr	s15, [r5]
				accel_or_decel = 0; //そのまま
 800d4a6:	4620      	mov	r0, r4
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d4a8:	4b30      	ldr	r3, [pc, #192]	; (800d56c <getNextDirection+0x1d8>)
		Calc = SearchOrFast;
 800d4aa:	4a2c      	ldr	r2, [pc, #176]	; (800d55c <getNextDirection+0x1c8>)
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d4ac:	edd3 0a00 	vldr	s1, [r3]
		Calc = SearchOrFast;
 800d4b0:	4b2b      	ldr	r3, [pc, #172]	; (800d560 <getNextDirection+0x1cc>)
 800d4b2:	6812      	ldr	r2, [r2, #0]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d4b4:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800d570 <getNextDirection+0x1dc>
		Calc = SearchOrFast;
 800d4b8:	601a      	str	r2, [r3, #0]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d4ba:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800d4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d4c2:	f7fc bb51 	b.w	8009b68 <GoStraight>
					if(VelocityMax == true)
 800d4c6:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 800d4ca:	b9b3      	cbnz	r3, 800d4fa <getNextDirection+0x166>
						AddVelocity = 0;
 800d4cc:	2300      	movs	r3, #0
						ChangeLED(2);
 800d4ce:	2002      	movs	r0, #2
						AddVelocity = 0;
 800d4d0:	602b      	str	r3, [r5, #0]
						ChangeLED(2);
 800d4d2:	f000 fbe5 	bl	800dca0 <ChangeLED>
 800d4d6:	edd5 7a00 	vldr	s15, [r5]
						accel_or_decel = 0; //そのまま
 800d4da:	4630      	mov	r0, r6
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d4dc:	4a23      	ldr	r2, [pc, #140]	; (800d56c <getNextDirection+0x1d8>)
		Calc = SearchOrFast;
 800d4de:	4b1f      	ldr	r3, [pc, #124]	; (800d55c <getNextDirection+0x1c8>)
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d4e0:	edd2 0a00 	vldr	s1, [r2]
		Calc = SearchOrFast;
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f8c8 3000 	str.w	r3, [r8]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d4ea:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800d570 <getNextDirection+0x1dc>
 800d4ee:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800d4f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d4f6:	f7fc bb37 	b.w	8009b68 <GoStraight>
						ChangeLED(cnt);
 800d4fa:	4c1e      	ldr	r4, [pc, #120]	; (800d574 <getNextDirection+0x1e0>)
 800d4fc:	6820      	ldr	r0, [r4, #0]
 800d4fe:	f000 fbcf 	bl	800dca0 <ChangeLED>
						cnt += 2;
 800d502:	6823      	ldr	r3, [r4, #0]
						AddVelocity = 0;
 800d504:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800d578 <getNextDirection+0x1e4>
						cnt += 2;
 800d508:	3302      	adds	r3, #2
 800d50a:	6023      	str	r3, [r4, #0]
						AddVelocity = 0;
 800d50c:	edc5 7a00 	vstr	s15, [r5]
						accel_or_decel = -1; //減速
 800d510:	f04f 30ff 	mov.w	r0, #4294967295
 800d514:	e7e2      	b.n	800d4dc <getNextDirection+0x148>
				ChangeLED(cnt);
 800d516:	4c19      	ldr	r4, [pc, #100]	; (800d57c <getNextDirection+0x1e8>)
 800d518:	6820      	ldr	r0, [r4, #0]
 800d51a:	f000 fbc1 	bl	800dca0 <ChangeLED>
				cnt += 2;
 800d51e:	6823      	ldr	r3, [r4, #0]
				AddVelocity = 0;
 800d520:	eddf 7a15 	vldr	s15, [pc, #84]	; 800d578 <getNextDirection+0x1e4>
				cnt += 2;
 800d524:	3302      	adds	r3, #2
 800d526:	6023      	str	r3, [r4, #0]
				AddVelocity = 0;
 800d528:	edc5 7a00 	vstr	s15, [r5]
				accel_or_decel = -1; //減速
 800d52c:	f04f 30ff 	mov.w	r0, #4294967295
 800d530:	e7ba      	b.n	800d4a8 <getNextDirection+0x114>
						AddVelocity = 245;
 800d532:	4b0d      	ldr	r3, [pc, #52]	; (800d568 <getNextDirection+0x1d4>)
 800d534:	602b      	str	r3, [r5, #0]
						ChangeLED(7);
 800d536:	2007      	movs	r0, #7
 800d538:	f000 fbb2 	bl	800dca0 <ChangeLED>
						accel_or_decel = 1; //加速
 800d53c:	4630      	mov	r0, r6
 800d53e:	edd5 7a00 	vldr	s15, [r5]
 800d542:	e7cb      	b.n	800d4dc <getNextDirection+0x148>
				AddVelocity = 245;
 800d544:	4b08      	ldr	r3, [pc, #32]	; (800d568 <getNextDirection+0x1d4>)
 800d546:	602b      	str	r3, [r5, #0]
				ChangeLED(7);
 800d548:	2007      	movs	r0, #7
 800d54a:	f000 fba9 	bl	800dca0 <ChangeLED>
 800d54e:	edd5 7a00 	vldr	s15, [r5]
				accel_or_decel = 1; //加速
 800d552:	2001      	movs	r0, #1
 800d554:	e7a8      	b.n	800d4a8 <getNextDirection+0x114>
 800d556:	bf00      	nop
 800d558:	20008968 	.word	0x20008968
 800d55c:	20008bf8 	.word	0x20008bf8
 800d560:	20008bfc 	.word	0x20008bfc
 800d564:	20008a7e 	.word	0x20008a7e
 800d568:	43750000 	.word	0x43750000
 800d56c:	20008a80 	.word	0x20008a80
 800d570:	42b40000 	.word	0x42b40000
 800d574:	2000002c 	.word	0x2000002c
 800d578:	00000000 	.word	0x00000000
 800d57c:	20000028 	.word	0x20000028

0800d580 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d580:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d582:	1e16      	subs	r6, r2, #0
 800d584:	dd07      	ble.n	800d596 <_read+0x16>
 800d586:	460c      	mov	r4, r1
 800d588:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800d58a:	f7ff f803 	bl	800c594 <__io_getchar>
 800d58e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d592:	42a5      	cmp	r5, r4
 800d594:	d1f9      	bne.n	800d58a <_read+0xa>
	}

return len;
}
 800d596:	4630      	mov	r0, r6
 800d598:	bd70      	pop	{r4, r5, r6, pc}
 800d59a:	bf00      	nop

0800d59c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d59c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d59e:	1e16      	subs	r6, r2, #0
 800d5a0:	dd07      	ble.n	800d5b2 <_write+0x16>
 800d5a2:	460c      	mov	r4, r1
 800d5a4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800d5a6:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d5aa:	f7fe ffe1 	bl	800c570 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d5ae:	42a5      	cmp	r5, r4
 800d5b0:	d1f9      	bne.n	800d5a6 <_write+0xa>
	}
	return len;
}
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	bd70      	pop	{r4, r5, r6, pc}
 800d5b6:	bf00      	nop

0800d5b8 <_close>:

int _close(int file)
{
	return -1;
}
 800d5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop

0800d5c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800d5c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d5c4:	604b      	str	r3, [r1, #4]
	return 0;
}
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop

0800d5cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800d5cc:	2001      	movs	r0, #1
 800d5ce:	4770      	bx	lr

0800d5d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800d5d0:	2000      	movs	r0, #0
 800d5d2:	4770      	bx	lr

0800d5d4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d5d4:	490c      	ldr	r1, [pc, #48]	; (800d608 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d5d6:	4a0d      	ldr	r2, [pc, #52]	; (800d60c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800d5d8:	680b      	ldr	r3, [r1, #0]
{
 800d5da:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d5dc:	4c0c      	ldr	r4, [pc, #48]	; (800d610 <_sbrk+0x3c>)
 800d5de:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800d5e0:	b12b      	cbz	r3, 800d5ee <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d5e2:	4418      	add	r0, r3
 800d5e4:	4290      	cmp	r0, r2
 800d5e6:	d807      	bhi.n	800d5f8 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800d5e8:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800d5ee:	4b09      	ldr	r3, [pc, #36]	; (800d614 <_sbrk+0x40>)
 800d5f0:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800d5f2:	4418      	add	r0, r3
 800d5f4:	4290      	cmp	r0, r2
 800d5f6:	d9f7      	bls.n	800d5e8 <_sbrk+0x14>
    errno = ENOMEM;
 800d5f8:	f006 faf8 	bl	8013bec <__errno>
 800d5fc:	230c      	movs	r3, #12
 800d5fe:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800d600:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d604:	4618      	mov	r0, r3
 800d606:	bd10      	pop	{r4, pc}
 800d608:	20007f4c 	.word	0x20007f4c
 800d60c:	20020000 	.word	0x20020000
 800d610:	00000400 	.word	0x00000400
 800d614:	20008f28 	.word	0x20008f28

0800d618 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800d618:	b580      	push	{r7, lr}
 800d61a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800d61c:	2203      	movs	r2, #3
 800d61e:	490a      	ldr	r1, [pc, #40]	; (800d648 <ADCStart+0x30>)
 800d620:	480a      	ldr	r0, [pc, #40]	; (800d64c <ADCStart+0x34>)
 800d622:	f001 fb57 	bl	800ecd4 <HAL_ADC_Start_DMA>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d001      	beq.n	800d630 <ADCStart+0x18>
	{
		Error_Handler();
 800d62c:	f7ff f9f4 	bl	800ca18 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800d630:	2202      	movs	r2, #2
 800d632:	4907      	ldr	r1, [pc, #28]	; (800d650 <ADCStart+0x38>)
 800d634:	4807      	ldr	r0, [pc, #28]	; (800d654 <ADCStart+0x3c>)
 800d636:	f001 fb4d 	bl	800ecd4 <HAL_ADC_Start_DMA>
 800d63a:	4603      	mov	r3, r0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d001      	beq.n	800d644 <ADCStart+0x2c>
	{
		Error_Handler();
 800d640:	f7ff f9ea 	bl	800ca18 <Error_Handler>
	}

}
 800d644:	bf00      	nop
 800d646:	bd80      	pop	{r7, pc}
 800d648:	20007fd0 	.word	0x20007fd0
 800d64c:	20008d60 	.word	0x20008d60
 800d650:	20007fdc 	.word	0x20007fdc
 800d654:	20008c80 	.word	0x20008c80

0800d658 <ADCStop>:
void ADCStop()
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800d65c:	480e      	ldr	r0, [pc, #56]	; (800d698 <ADCStop+0x40>)
 800d65e:	f001 fc2b 	bl	800eeb8 <HAL_ADC_Stop_DMA>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d007      	beq.n	800d678 <ADCStop+0x20>
	{
		printf("な\r\n");
 800d668:	480c      	ldr	r0, [pc, #48]	; (800d69c <ADCStop+0x44>)
 800d66a:	f008 f887 	bl	801577c <puts>
		Error_Handler();
 800d66e:	f7ff f9d3 	bl	800ca18 <Error_Handler>
		printf("に\r\n");
 800d672:	480b      	ldr	r0, [pc, #44]	; (800d6a0 <ADCStop+0x48>)
 800d674:	f008 f882 	bl	801577c <puts>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800d678:	480a      	ldr	r0, [pc, #40]	; (800d6a4 <ADCStop+0x4c>)
 800d67a:	f001 fc1d 	bl	800eeb8 <HAL_ADC_Stop_DMA>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d007      	beq.n	800d694 <ADCStop+0x3c>
	{
		printf("ぬ\r\n");
 800d684:	4808      	ldr	r0, [pc, #32]	; (800d6a8 <ADCStop+0x50>)
 800d686:	f008 f879 	bl	801577c <puts>
		Error_Handler();
 800d68a:	f7ff f9c5 	bl	800ca18 <Error_Handler>
		printf("ね\r\n");
 800d68e:	4807      	ldr	r0, [pc, #28]	; (800d6ac <ADCStop+0x54>)
 800d690:	f008 f874 	bl	801577c <puts>
	}
}
 800d694:	bf00      	nop
 800d696:	bd80      	pop	{r7, pc}
 800d698:	20008d60 	.word	0x20008d60
 800d69c:	08018fe8 	.word	0x08018fe8
 800d6a0:	08018ff0 	.word	0x08018ff0
 800d6a4:	20008c80 	.word	0x20008c80
 800d6a8:	08018ff8 	.word	0x08018ff8
 800d6ac:	08019000 	.word	0x08019000

0800d6b0 <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800d6b4:	4b05      	ldr	r3, [pc, #20]	; (800d6cc <FLASH_Unlock+0x1c>)
 800d6b6:	4a06      	ldr	r2, [pc, #24]	; (800d6d0 <FLASH_Unlock+0x20>)
 800d6b8:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800d6ba:	4b04      	ldr	r3, [pc, #16]	; (800d6cc <FLASH_Unlock+0x1c>)
 800d6bc:	4a05      	ldr	r2, [pc, #20]	; (800d6d4 <FLASH_Unlock+0x24>)
 800d6be:	605a      	str	r2, [r3, #4]
}
 800d6c0:	bf00      	nop
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	40023c00 	.word	0x40023c00
 800d6d0:	45670123 	.word	0x45670123
 800d6d4:	cdef89ab 	.word	0xcdef89ab

0800d6d8 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800d6dc:	4b05      	ldr	r3, [pc, #20]	; (800d6f4 <FLASH_Lock+0x1c>)
 800d6de:	691b      	ldr	r3, [r3, #16]
 800d6e0:	4a04      	ldr	r2, [pc, #16]	; (800d6f4 <FLASH_Lock+0x1c>)
 800d6e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d6e6:	6113      	str	r3, [r2, #16]

}
 800d6e8:	bf00      	nop
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	40023c00 	.word	0x40023c00

0800d6f8 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d6fc:	bf00      	nop
 800d6fe:	4b05      	ldr	r3, [pc, #20]	; (800d714 <FLASH_WaitBusy+0x1c>)
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1f9      	bne.n	800d6fe <FLASH_WaitBusy+0x6>
}
 800d70a:	bf00      	nop
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr
 800d714:	40023c00 	.word	0x40023c00

0800d718 <FLASH_Write_Word>:

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800d722:	f7ff ffc5 	bl	800d6b0 <FLASH_Unlock>

	FLASH_WaitBusy();
 800d726:	f7ff ffe7 	bl	800d6f8 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d72a:	4b0e      	ldr	r3, [pc, #56]	; (800d764 <FLASH_Write_Word+0x4c>)
 800d72c:	691b      	ldr	r3, [r3, #16]
 800d72e:	4a0d      	ldr	r2, [pc, #52]	; (800d764 <FLASH_Write_Word+0x4c>)
 800d730:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d734:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d736:	4b0b      	ldr	r3, [pc, #44]	; (800d764 <FLASH_Write_Word+0x4c>)
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	4a0a      	ldr	r2, [pc, #40]	; (800d764 <FLASH_Write_Word+0x4c>)
 800d73c:	f043 0301 	orr.w	r3, r3, #1
 800d740:	6113      	str	r3, [r2, #16]

	*(__IO uint32_t*)address = data;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	683a      	ldr	r2, [r7, #0]
 800d746:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800d748:	f7ff ffd6 	bl	800d6f8 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800d74c:	4b05      	ldr	r3, [pc, #20]	; (800d764 <FLASH_Write_Word+0x4c>)
 800d74e:	691b      	ldr	r3, [r3, #16]
 800d750:	4a04      	ldr	r2, [pc, #16]	; (800d764 <FLASH_Write_Word+0x4c>)
 800d752:	f023 0301 	bic.w	r3, r3, #1
 800d756:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800d758:	f7ff ffbe 	bl	800d6d8 <FLASH_Lock>
}
 800d75c:	bf00      	nop
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	40023c00 	.word	0x40023c00

0800d768 <FLASH_Read_Word>:
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800d772:	f7ff ff9d 	bl	800d6b0 <FLASH_Unlock>

	FLASH_WaitBusy();
 800d776:	f7ff ffbf 	bl	800d6f8 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d77a:	4b0f      	ldr	r3, [pc, #60]	; (800d7b8 <FLASH_Read_Word+0x50>)
 800d77c:	691b      	ldr	r3, [r3, #16]
 800d77e:	4a0e      	ldr	r2, [pc, #56]	; (800d7b8 <FLASH_Read_Word+0x50>)
 800d780:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d784:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d786:	4b0c      	ldr	r3, [pc, #48]	; (800d7b8 <FLASH_Read_Word+0x50>)
 800d788:	691b      	ldr	r3, [r3, #16]
 800d78a:	4a0b      	ldr	r2, [pc, #44]	; (800d7b8 <FLASH_Read_Word+0x50>)
 800d78c:	f043 0301 	orr.w	r3, r3, #1
 800d790:	6113      	str	r3, [r2, #16]

	* data = *(__IO uint32_t*)address;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800d79a:	f7ff ffad 	bl	800d6f8 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800d79e:	4b06      	ldr	r3, [pc, #24]	; (800d7b8 <FLASH_Read_Word+0x50>)
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	4a05      	ldr	r2, [pc, #20]	; (800d7b8 <FLASH_Read_Word+0x50>)
 800d7a4:	f023 0301 	bic.w	r3, r3, #1
 800d7a8:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800d7aa:	f7ff ff95 	bl	800d6d8 <FLASH_Lock>
}
 800d7ae:	bf00      	nop
 800d7b0:	3708      	adds	r7, #8
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	40023c00 	.word	0x40023c00

0800d7bc <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 800d7c8:	f7ff ff72 	bl	800d6b0 <FLASH_Unlock>

	FLASH_WaitBusy();
 800d7cc:	f7ff ff94 	bl	800d6f8 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d7d0:	4b0e      	ldr	r3, [pc, #56]	; (800d80c <FLASH_Write_Word_F+0x50>)
 800d7d2:	691b      	ldr	r3, [r3, #16]
 800d7d4:	4a0d      	ldr	r2, [pc, #52]	; (800d80c <FLASH_Write_Word_F+0x50>)
 800d7d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d7da:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d7dc:	4b0b      	ldr	r3, [pc, #44]	; (800d80c <FLASH_Write_Word_F+0x50>)
 800d7de:	691b      	ldr	r3, [r3, #16]
 800d7e0:	4a0a      	ldr	r2, [pc, #40]	; (800d80c <FLASH_Write_Word_F+0x50>)
 800d7e2:	f043 0301 	orr.w	r3, r3, #1
 800d7e6:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800d7ee:	f7ff ff83 	bl	800d6f8 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800d7f2:	4b06      	ldr	r3, [pc, #24]	; (800d80c <FLASH_Write_Word_F+0x50>)
 800d7f4:	691b      	ldr	r3, [r3, #16]
 800d7f6:	4a05      	ldr	r2, [pc, #20]	; (800d80c <FLASH_Write_Word_F+0x50>)
 800d7f8:	f023 0301 	bic.w	r3, r3, #1
 800d7fc:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800d7fe:	f7ff ff6b 	bl	800d6d8 <FLASH_Lock>
}
 800d802:	bf00      	nop
 800d804:	3708      	adds	r7, #8
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	40023c00 	.word	0x40023c00

0800d810 <FLASH_Read_Word_F>:
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800d81a:	f7ff ff49 	bl	800d6b0 <FLASH_Unlock>

	FLASH_WaitBusy();
 800d81e:	f7ff ff6b 	bl	800d6f8 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d822:	4b0f      	ldr	r3, [pc, #60]	; (800d860 <FLASH_Read_Word_F+0x50>)
 800d824:	691b      	ldr	r3, [r3, #16]
 800d826:	4a0e      	ldr	r2, [pc, #56]	; (800d860 <FLASH_Read_Word_F+0x50>)
 800d828:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d82c:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d82e:	4b0c      	ldr	r3, [pc, #48]	; (800d860 <FLASH_Read_Word_F+0x50>)
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	4a0b      	ldr	r2, [pc, #44]	; (800d860 <FLASH_Read_Word_F+0x50>)
 800d834:	f043 0301 	orr.w	r3, r3, #1
 800d838:	6113      	str	r3, [r2, #16]

	* data = *(__IO float*)address;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800d842:	f7ff ff59 	bl	800d6f8 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800d846:	4b06      	ldr	r3, [pc, #24]	; (800d860 <FLASH_Read_Word_F+0x50>)
 800d848:	691b      	ldr	r3, [r3, #16]
 800d84a:	4a05      	ldr	r2, [pc, #20]	; (800d860 <FLASH_Read_Word_F+0x50>)
 800d84c:	f023 0301 	bic.w	r3, r3, #1
 800d850:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800d852:	f7ff ff41 	bl	800d6d8 <FLASH_Lock>
}
 800d856:	bf00      	nop
 800d858:	3708      	adds	r7, #8
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	40023c00 	.word	0x40023c00

0800d864 <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b088      	sub	sp, #32
 800d868:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800d86a:	f002 fb1d 	bl	800fea8 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d86e:	2300      	movs	r3, #0
 800d870:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800d872:	2301      	movs	r3, #1
 800d874:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800d876:	2302      	movs	r3, #2
 800d878:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800d87a:	2301      	movs	r3, #1
 800d87c:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800d87e:	1d3a      	adds	r2, r7, #4
 800d880:	f107 0308 	add.w	r3, r7, #8
 800d884:	4611      	mov	r1, r2
 800d886:	4618      	mov	r0, r3
 800d888:	f002 fbd6 	bl	8010038 <HAL_FLASHEx_Erase>
 800d88c:	4603      	mov	r3, r0
 800d88e:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800d890:	f002 fb2c 	bl	800feec <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800d894:	7ffb      	ldrb	r3, [r7, #31]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d105      	bne.n	800d8a6 <Flash_clear_sector1+0x42>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a0:	d101      	bne.n	800d8a6 <Flash_clear_sector1+0x42>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e000      	b.n	800d8a8 <Flash_clear_sector1+0x44>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	f003 0301 	and.w	r3, r3, #1
 800d8ac:	b2db      	uxtb	r3, r3
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3720      	adds	r7, #32
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}

0800d8b6 <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800d8b6:	b580      	push	{r7, lr}
 800d8b8:	b088      	sub	sp, #32
 800d8ba:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800d8bc:	f002 faf4 	bl	800fea8 <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800d8c4:	2309      	movs	r3, #9
 800d8c6:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	617b      	str	r3, [r7, #20]

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800d8d0:	1d3a      	adds	r2, r7, #4
 800d8d2:	f107 0308 	add.w	r3, r7, #8
 800d8d6:	4611      	mov	r1, r2
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f002 fbad 	bl	8010038 <HAL_FLASHEx_Erase>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	77fb      	strb	r3, [r7, #31]

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800d8e2:	f002 fb03 	bl	800feec <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800d8e6:	7ffb      	ldrb	r3, [r7, #31]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d105      	bne.n	800d8f8 <Flash_clear_sector9+0x42>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f2:	d101      	bne.n	800d8f8 <Flash_clear_sector9+0x42>
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	e000      	b.n	800d8fa <Flash_clear_sector9+0x44>
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	f003 0301 	and.w	r3, r3, #1
 800d8fe:	b2db      	uxtb	r3, r3
}
 800d900:	4618      	mov	r0, r3
 800d902:	3720      	adds	r7, #32
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <compare_num>:
}


int compare_num(const void * n1, const void * n2)
{
	if (*(int16_t *)n1 > *(int16_t *)n2)
 800d908:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d90c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800d910:	429a      	cmp	r2, r3
 800d912:	dc04      	bgt.n	800d91e <compare_num+0x16>
	{
		return 1;
	}
	else if (*(int16_t *)n1 < *(int16_t *)n2)
 800d914:	bfb4      	ite	lt
 800d916:	f04f 30ff 	movlt.w	r0, #4294967295
 800d91a:	2000      	movge	r0, #0
 800d91c:	4770      	bx	lr
		return 1;
 800d91e:	2001      	movs	r0, #1
	}
	else
	{
		return 0;
	}
}
 800d920:	4770      	bx	lr
 800d922:	bf00      	nop

0800d924 <ReadIMU>:
inline float ReadIMU(uint8_t a, uint8_t b) {
 800d924:	b570      	push	{r4, r5, r6, lr}
	CS_RESET;
 800d926:	4c23      	ldr	r4, [pc, #140]	; (800d9b4 <ReadIMU+0x90>)
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d928:	4d23      	ldr	r5, [pc, #140]	; (800d9b8 <ReadIMU+0x94>)
inline float ReadIMU(uint8_t a, uint8_t b) {
 800d92a:	b082      	sub	sp, #8
	ret2 = ret[1] | 0x80;
 800d92c:	f061 037f 	orn	r3, r1, #127	; 0x7f
	ret1 = ret[0] | 0x80;
 800d930:	f060 067f 	orn	r6, r0, #127	; 0x7f
	CS_RESET;
 800d934:	2200      	movs	r2, #0
 800d936:	4620      	mov	r0, r4
 800d938:	2104      	movs	r1, #4
	ret2 = ret[1] | 0x80;
 800d93a:	f88d 3005 	strb.w	r3, [sp, #5]
	ret1 = ret[0] | 0x80;
 800d93e:	f88d 6004 	strb.w	r6, [sp, #4]
	CS_RESET;
 800d942:	f002 fe35 	bl	80105b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d946:	a901      	add	r1, sp, #4
 800d948:	4628      	mov	r0, r5
 800d94a:	2364      	movs	r3, #100	; 0x64
 800d94c:	2201      	movs	r2, #1
 800d94e:	f003 fb27 	bl	8010fa0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800d952:	2364      	movs	r3, #100	; 0x64
 800d954:	f10d 0106 	add.w	r1, sp, #6
 800d958:	4628      	mov	r0, r5
 800d95a:	2201      	movs	r2, #1
 800d95c:	f003 fc54 	bl	8011208 <HAL_SPI_Receive>
	CS_SET;
 800d960:	4620      	mov	r0, r4
 800d962:	2201      	movs	r2, #1
 800d964:	2104      	movs	r1, #4
 800d966:	f002 fe23 	bl	80105b0 <HAL_GPIO_WritePin>
	CS_RESET;
 800d96a:	4620      	mov	r0, r4
 800d96c:	2200      	movs	r2, #0
 800d96e:	2104      	movs	r1, #4
 800d970:	f002 fe1e 	bl	80105b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800d974:	f10d 0105 	add.w	r1, sp, #5
 800d978:	4628      	mov	r0, r5
 800d97a:	2364      	movs	r3, #100	; 0x64
 800d97c:	2201      	movs	r2, #1
 800d97e:	f003 fb0f 	bl	8010fa0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800d982:	2364      	movs	r3, #100	; 0x64
 800d984:	f10d 0107 	add.w	r1, sp, #7
 800d988:	4628      	mov	r0, r5
 800d98a:	2201      	movs	r2, #1
 800d98c:	f003 fc3c 	bl	8011208 <HAL_SPI_Receive>
	CS_SET;
 800d990:	4620      	mov	r0, r4
 800d992:	2201      	movs	r2, #1
 800d994:	2104      	movs	r1, #4
 800d996:	f002 fe0b 	bl	80105b0 <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800d99a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d99e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d9a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	res = (float)law_data;
 800d9a6:	b21b      	sxth	r3, r3
 800d9a8:	ee00 3a10 	vmov	s0, r3
}
 800d9ac:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800d9b0:	b002      	add	sp, #8
 800d9b2:	bd70      	pop	{r4, r5, r6, pc}
 800d9b4:	40020c00 	.word	0x40020c00
 800d9b8:	20008d08 	.word	0x20008d08

0800d9bc <median_filter>:
int16_t median_filter(int16_t *new_data) //中身変更しないが、値のコピーを避けて速度維持のためにアドレス
{
 800d9bc:	b530      	push	{r4, r5, lr}
	filter[cnt+1] = filter[cnt+2];
	filter[cnt+2] = filter[cnt+3];
	filter[cnt+3] = filter[cnt+4];
	filter[cnt+4] = new_data;
#else
	filter[0] = filter[1];
 800d9be:	4c12      	ldr	r4, [pc, #72]	; (800da08 <median_filter+0x4c>)
	filter[1] = filter[2];
	filter[2] = filter[3];
	filter[3] = filter[4];
	filter[4] = *new_data;
 800d9c0:	f9b0 3000 	ldrsh.w	r3, [r0]
	filter[3] = filter[4];
 800d9c4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
	filter[2] = filter[3];
 800d9c8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
	filter[1] = filter[2];
 800d9cc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
	filter[0] = filter[1];
 800d9d0:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
	filter[4] = *new_data;
 800d9d4:	8123      	strh	r3, [r4, #8]
{
 800d9d6:	b085      	sub	sp, #20
	filter[3] = filter[4];
 800d9d8:	80e2      	strh	r2, [r4, #6]

	sorted[0] = filter[0];
	sorted[1] = filter[1];
	sorted[2] = filter[2];
	sorted[3] = filter[3];
	sorted[4] = filter[4];
 800d9da:	f8ad 300c 	strh.w	r3, [sp, #12]
	sorted[3] = filter[3];
 800d9de:	f8ad 200a 	strh.w	r2, [sp, #10]
	sorted[2] = filter[2];
 800d9e2:	f8ad 1008 	strh.w	r1, [sp, #8]
	filter[2] = filter[3];
 800d9e6:	80a1      	strh	r1, [r4, #4]
	sorted[1] = filter[1];
 800d9e8:	f8ad 0006 	strh.w	r0, [sp, #6]
	filter[1] = filter[2];
 800d9ec:	8060      	strh	r0, [r4, #2]
#endif


	//ソートする
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800d9ee:	4b07      	ldr	r3, [pc, #28]	; (800da0c <median_filter+0x50>)
	filter[0] = filter[1];
 800d9f0:	8025      	strh	r5, [r4, #0]
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800d9f2:	a801      	add	r0, sp, #4
 800d9f4:	2202      	movs	r2, #2
 800d9f6:	2105      	movs	r1, #5
	sorted[0] = filter[0];
 800d9f8:	f8ad 5004 	strh.w	r5, [sp, #4]
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800d9fc:	f007 fefe 	bl	80157fc <qsort>
	//qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int),compare_num);
	//中央値を返す
	return sorted[2];
}
 800da00:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 800da04:	b005      	add	sp, #20
 800da06:	bd30      	pop	{r4, r5, pc}
 800da08:	20007fe8 	.word	0x20007fe8
 800da0c:	0800d909 	.word	0x0800d909

0800da10 <Update_IMU>:
//割込み内で呼ぶセット
void Update_IMU(float *angv, float *angle )
{
 800da10:	b5f0      	push	{r4, r5, r6, r7, lr}
				0x38,
		};
		int16_t law_data;
		ret1 = ret[0] | 0x80;
		ret2 = ret[1] | 0x80;
		CS_RESET;
 800da12:	4c3f      	ldr	r4, [pc, #252]	; (800db10 <Update_IMU+0x100>)
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800da14:	4d3f      	ldr	r5, [pc, #252]	; (800db14 <Update_IMU+0x104>)
{
 800da16:	b083      	sub	sp, #12
		ret1 = ret[0] | 0x80;
 800da18:	f04f 0cb7 	mov.w	ip, #183	; 0xb7
{
 800da1c:	460e      	mov	r6, r1
 800da1e:	4607      	mov	r7, r0
		ret2 = ret[1] | 0x80;
 800da20:	23b8      	movs	r3, #184	; 0xb8
		CS_RESET;
 800da22:	4620      	mov	r0, r4
 800da24:	2200      	movs	r2, #0
 800da26:	2104      	movs	r1, #4
		ret1 = ret[0] | 0x80;
 800da28:	f88d c002 	strb.w	ip, [sp, #2]
		ret2 = ret[1] | 0x80;
 800da2c:	f88d 3003 	strb.w	r3, [sp, #3]
		CS_RESET;
 800da30:	f002 fdbe 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800da34:	f10d 0102 	add.w	r1, sp, #2
 800da38:	4628      	mov	r0, r5
 800da3a:	2364      	movs	r3, #100	; 0x64
 800da3c:	2201      	movs	r2, #1
 800da3e:	f003 faaf 	bl	8010fa0 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val1,1,100);
 800da42:	2364      	movs	r3, #100	; 0x64
 800da44:	a901      	add	r1, sp, #4
 800da46:	4628      	mov	r0, r5
 800da48:	2201      	movs	r2, #1
 800da4a:	f003 fbdd 	bl	8011208 <HAL_SPI_Receive>
		CS_SET;
 800da4e:	4620      	mov	r0, r4
 800da50:	2201      	movs	r2, #1
 800da52:	2104      	movs	r1, #4
 800da54:	f002 fdac 	bl	80105b0 <HAL_GPIO_WritePin>

		CS_RESET;
 800da58:	4620      	mov	r0, r4
 800da5a:	2200      	movs	r2, #0
 800da5c:	2104      	movs	r1, #4
 800da5e:	f002 fda7 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800da62:	f10d 0103 	add.w	r1, sp, #3
 800da66:	4628      	mov	r0, r5
 800da68:	2364      	movs	r3, #100	; 0x64
 800da6a:	2201      	movs	r2, #1
 800da6c:	f003 fa98 	bl	8010fa0 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val2,1,100);
 800da70:	2364      	movs	r3, #100	; 0x64
 800da72:	f10d 0105 	add.w	r1, sp, #5
 800da76:	4628      	mov	r0, r5
 800da78:	2201      	movs	r2, #1
 800da7a:	f003 fbc5 	bl	8011208 <HAL_SPI_Receive>
		CS_SET;
 800da7e:	4620      	mov	r0, r4
 800da80:	2104      	movs	r1, #4
 800da82:	2201      	movs	r2, #1
 800da84:	f002 fd94 	bl	80105b0 <HAL_GPIO_WritePin>
		law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );
 800da88:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da8c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800da90:	a802      	add	r0, sp, #8
 800da92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800da96:	f820 3d02 	strh.w	r3, [r0, #-2]!

		//static int16_t zg_last=0;
		int16_t zg_median;

		//2000回目で0.17
		zg_median = median_filter(&law_data);
 800da9a:	f7ff ff8f 	bl	800d9bc <median_filter>
		ZGFilterd = zg_median;
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800da9e:	ee07 0a90 	vmov	s15, r0
 800daa2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800db18 <Update_IMU+0x108>
		ZGFilterd = zg_median;
 800daa6:	4a1d      	ldr	r2, [pc, #116]	; (800db1c <Update_IMU+0x10c>)
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800daa8:	4b1d      	ldr	r3, [pc, #116]	; (800db20 <Update_IMU+0x110>)
		ZGFilterd = zg_median;
 800daaa:	8010      	strh	r0, [r2, #0]
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800daac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dab0:	ee67 7a87 	vmul.f32	s15, s15, s14
		*angv = -((0.01*ZGyro) + (0.99)* (zg_last));
		zg_last = ZGyro;
		//Angle;
		*angle += *angv *0.001;
#else
		*angv = -ZGyro; //角速度 rad / s
 800dab4:	eeb1 7a67 	vneg.f32	s14, s15
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800dab8:	edc3 7a00 	vstr	s15, [r3]

		//Angle;
		*angle += *angv * 0.001  - 0.000001784;//- 0.0000018432; //角度 rad
 800dabc:	ee17 0a10 	vmov	r0, s14
		*angv = -ZGyro; //角速度 rad / s
 800dac0:	ed87 7a00 	vstr	s14, [r7]
		*angle += *angv * 0.001  - 0.000001784;//- 0.0000018432; //角度 rad
 800dac4:	f7fa fc78 	bl	80083b8 <__aeabi_f2d>
 800dac8:	a30d      	add	r3, pc, #52	; (adr r3, 800db00 <Update_IMU+0xf0>)
 800daca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dace:	f7fa fccb 	bl	8008468 <__aeabi_dmul>
 800dad2:	a30d      	add	r3, pc, #52	; (adr r3, 800db08 <Update_IMU+0xf8>)
 800dad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad8:	f7fa fb0e 	bl	80080f8 <__aeabi_dsub>
 800dadc:	4604      	mov	r4, r0
 800dade:	6830      	ldr	r0, [r6, #0]
 800dae0:	460d      	mov	r5, r1
 800dae2:	f7fa fc69 	bl	80083b8 <__aeabi_f2d>
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	4620      	mov	r0, r4
 800daec:	4629      	mov	r1, r5
 800daee:	f7fa fb05 	bl	80080fc <__adddf3>
 800daf2:	f7fa ffb1 	bl	8008a58 <__aeabi_d2f>
 800daf6:	6030      	str	r0, [r6, #0]
	//*angv = -((0.01*zg_law) + (0.99)* (zg_last));
	zg_last = zg_law;
	//Angle;
	*angle += *angv *0.001;
#endif
}
 800daf8:	b003      	add	sp, #12
 800dafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dafc:	f3af 8000 	nop.w
 800db00:	d2f1a9fc 	.word	0xd2f1a9fc
 800db04:	3f50624d 	.word	0x3f50624d
 800db08:	be73a9d7 	.word	0xbe73a9d7
 800db0c:	3ebdee38 	.word	0x3ebdee38
 800db10:	40020c00 	.word	0x40020c00
 800db14:	20008d08 	.word	0x20008d08
 800db18:	3a8b7d78 	.word	0x3a8b7d78
 800db1c:	20008ef0 	.word	0x20008ef0
 800db20:	20007fe4 	.word	0x20007fe4

0800db24 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800db24:	b570      	push	{r4, r5, r6, lr}
 800db26:	b084      	sub	sp, #16
	uint8_t ret;

	ret = reg & 0x7F;
 800db28:	ac04      	add	r4, sp, #16
	CS_RESET;
 800db2a:	4d10      	ldr	r5, [pc, #64]	; (800db6c <write_byte+0x48>)
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800db2c:	4e10      	ldr	r6, [pc, #64]	; (800db70 <write_byte+0x4c>)
void write_byte( uint8_t reg, uint8_t val )  {
 800db2e:	f88d 1007 	strb.w	r1, [sp, #7]
	ret = reg & 0x7F;
 800db32:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800db36:	f804 0d01 	strb.w	r0, [r4, #-1]!
	CS_RESET;
 800db3a:	2200      	movs	r2, #0
 800db3c:	4628      	mov	r0, r5
 800db3e:	2104      	movs	r1, #4
 800db40:	f002 fd36 	bl	80105b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800db44:	4621      	mov	r1, r4
 800db46:	4630      	mov	r0, r6
 800db48:	2364      	movs	r3, #100	; 0x64
 800db4a:	2201      	movs	r2, #1
 800db4c:	f003 fa28 	bl	8010fa0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800db50:	2364      	movs	r3, #100	; 0x64
 800db52:	f10d 0107 	add.w	r1, sp, #7
 800db56:	4630      	mov	r0, r6
 800db58:	2201      	movs	r2, #1
 800db5a:	f003 fa21 	bl	8010fa0 <HAL_SPI_Transmit>
	CS_SET;
 800db5e:	4628      	mov	r0, r5
 800db60:	2201      	movs	r2, #1
 800db62:	2104      	movs	r1, #4
 800db64:	f002 fd24 	bl	80105b0 <HAL_GPIO_WritePin>
}
 800db68:	b004      	add	sp, #16
 800db6a:	bd70      	pop	{r4, r5, r6, pc}
 800db6c:	40020c00 	.word	0x40020c00
 800db70:	20008d08 	.word	0x20008d08

0800db74 <IMU_init>:

uint8_t IMU_init() {
 800db74:	b510      	push	{r4, lr}
 800db76:	b082      	sub	sp, #8
	ret = reg | 0x80;
 800db78:	ac02      	add	r4, sp, #8
 800db7a:	2380      	movs	r3, #128	; 0x80
 800db7c:	f804 3d02 	strb.w	r3, [r4, #-2]!
	CS_RESET;
 800db80:	2200      	movs	r2, #0
 800db82:	2104      	movs	r1, #4
 800db84:	481b      	ldr	r0, [pc, #108]	; (800dbf4 <IMU_init+0x80>)
 800db86:	f002 fd13 	bl	80105b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800db8a:	4621      	mov	r1, r4
 800db8c:	2364      	movs	r3, #100	; 0x64
 800db8e:	2201      	movs	r2, #1
 800db90:	4819      	ldr	r0, [pc, #100]	; (800dbf8 <IMU_init+0x84>)
 800db92:	f003 fa05 	bl	8010fa0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800db96:	2364      	movs	r3, #100	; 0x64
 800db98:	2201      	movs	r2, #1
 800db9a:	f10d 0107 	add.w	r1, sp, #7
 800db9e:	4816      	ldr	r0, [pc, #88]	; (800dbf8 <IMU_init+0x84>)
 800dba0:	f003 fb32 	bl	8011208 <HAL_SPI_Receive>
	CS_SET;
 800dba4:	2201      	movs	r2, #1
 800dba6:	2104      	movs	r1, #4
 800dba8:	4812      	ldr	r0, [pc, #72]	; (800dbf4 <IMU_init+0x80>)
 800dbaa:	f002 fd01 	bl	80105b0 <HAL_GPIO_WritePin>
	return val;
 800dbae:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
	if ( who_am_i == 0xE0 ) {
 800dbb2:	2be0      	cmp	r3, #224	; 0xe0
 800dbb4:	d002      	beq.n	800dbbc <IMU_init+0x48>
		write_byte(0x7F,0x00);	//USER_BANK0
	}
	return ret;
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 800dbb6:	2001      	movs	r0, #1
 800dbb8:	b002      	add	sp, #8
 800dbba:	bd10      	pop	{r4, pc}
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800dbbc:	2101      	movs	r1, #1
 800dbbe:	2006      	movs	r0, #6
 800dbc0:	f7ff ffb0 	bl	800db24 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800dbc4:	2110      	movs	r1, #16
 800dbc6:	2003      	movs	r0, #3
 800dbc8:	f7ff ffac 	bl	800db24 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800dbcc:	2120      	movs	r1, #32
 800dbce:	207f      	movs	r0, #127	; 0x7f
 800dbd0:	f7ff ffa8 	bl	800db24 <write_byte>
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800dbd4:	2117      	movs	r1, #23
 800dbd6:	2001      	movs	r0, #1
 800dbd8:	f7ff ffa4 	bl	800db24 <write_byte>
		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 800dbdc:	2117      	movs	r1, #23
 800dbde:	2014      	movs	r0, #20
 800dbe0:	f7ff ffa0 	bl	800db24 <write_byte>
		write_byte(0x7F,0x00);	//USER_BANK0
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	207f      	movs	r0, #127	; 0x7f
 800dbe8:	f7ff ff9c 	bl	800db24 <write_byte>
}
 800dbec:	2001      	movs	r0, #1
 800dbee:	b002      	add	sp, #8
 800dbf0:	bd10      	pop	{r4, pc}
 800dbf2:	bf00      	nop
 800dbf4:	40020c00 	.word	0x40020c00
 800dbf8:	20008d08 	.word	0x20008d08

0800dbfc <IMU_Calib>:
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
}

void IMU_Calib(){
 800dbfc:	b538      	push	{r3, r4, r5, lr}


	HAL_Delay(100);
 800dbfe:	2064      	movs	r0, #100	; 0x64
void IMU_Calib(){
 800dc00:	ed2d 8b02 	vpush	{d8}
	HAL_Delay(100);
 800dc04:	f001 f800 	bl	800ec08 <HAL_Delay>

	int num = 2000;
	float zg_vals[2000]={0.0f};
	float sum=0;
 800dc08:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 800dc38 <IMU_Calib+0x3c>
 800dc0c:	4d0b      	ldr	r5, [pc, #44]	; (800dc3c <IMU_Calib+0x40>)
	HAL_Delay(100);
 800dc0e:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	for(int i = 0; i < num; i++){
		zg_vals[i] = ZGyro;
		sum += zg_vals[i];
 800dc12:	edd5 7a00 	vldr	s15, [r5]
		HAL_Delay(2);
 800dc16:	2002      	movs	r0, #2
		sum += zg_vals[i];
 800dc18:	ee38 8a27 	vadd.f32	s16, s16, s15
		HAL_Delay(2);
 800dc1c:	f000 fff4 	bl	800ec08 <HAL_Delay>
	for(int i = 0; i < num; i++){
 800dc20:	3c01      	subs	r4, #1
 800dc22:	d1f6      	bne.n	800dc12 <IMU_Calib+0x16>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / 2000.0f;
 800dc24:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800dc40 <IMU_Calib+0x44>
 800dc28:	4b06      	ldr	r3, [pc, #24]	; (800dc44 <IMU_Calib+0x48>)
 800dc2a:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 800dc2e:	ecbd 8b02 	vpop	{d8}
	zg_offset = sum / 2000.0f;
 800dc32:	edc3 7a00 	vstr	s15, [r3]
}
 800dc36:	bd38      	pop	{r3, r4, r5, pc}
 800dc38:	00000000 	.word	0x00000000
 800dc3c:	20007fe4 	.word	0x20007fe4
 800dc40:	44fa0000 	.word	0x44fa0000
 800dc44:	20007ff4 	.word	0x20007ff4

0800dc48 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800dc4c:	213c      	movs	r1, #60	; 0x3c
 800dc4e:	4804      	ldr	r0, [pc, #16]	; (800dc60 <EncoderStart+0x18>)
 800dc50:	f004 f9c2 	bl	8011fd8 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800dc54:	213c      	movs	r1, #60	; 0x3c
 800dc56:	4803      	ldr	r0, [pc, #12]	; (800dc64 <EncoderStart+0x1c>)
 800dc58:	f004 f9be 	bl	8011fd8 <HAL_TIM_Encoder_Start>
}
 800dc5c:	bf00      	nop
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	20008cc8 	.word	0x20008cc8
 800dc64:	20008c40 	.word	0x20008c40

0800dc68 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	4804      	ldr	r0, [pc, #16]	; (800dc80 <EmitterON+0x18>)
 800dc70:	f003 ff36 	bl	8011ae0 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800dc74:	2100      	movs	r1, #0
 800dc76:	4802      	ldr	r0, [pc, #8]	; (800dc80 <EmitterON+0x18>)
 800dc78:	f005 f849 	bl	8012d0e <HAL_TIMEx_OCN_Start_IT>

}
 800dc7c:	bf00      	nop
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	20008c00 	.word	0x20008c00

0800dc84 <EmitterOFF>:
void EmitterOFF()
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800dc88:	2100      	movs	r1, #0
 800dc8a:	4804      	ldr	r0, [pc, #16]	; (800dc9c <EmitterOFF+0x18>)
 800dc8c:	f003 ffac 	bl	8011be8 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800dc90:	2100      	movs	r1, #0
 800dc92:	4802      	ldr	r0, [pc, #8]	; (800dc9c <EmitterOFF+0x18>)
 800dc94:	f005 f890 	bl	8012db8 <HAL_TIMEx_OCN_Stop_IT>

}
 800dc98:	bf00      	nop
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	20008c00 	.word	0x20008c00

0800dca0 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2b07      	cmp	r3, #7
 800dcac:	f200 80ac 	bhi.w	800de08 <ChangeLED+0x168>
 800dcb0:	a201      	add	r2, pc, #4	; (adr r2, 800dcb8 <ChangeLED+0x18>)
 800dcb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb6:	bf00      	nop
 800dcb8:	0800dcd9 	.word	0x0800dcd9
 800dcbc:	0800dcff 	.word	0x0800dcff
 800dcc0:	0800dd25 	.word	0x0800dd25
 800dcc4:	0800dd4b 	.word	0x0800dd4b
 800dcc8:	0800dd71 	.word	0x0800dd71
 800dccc:	0800dd97 	.word	0x0800dd97
 800dcd0:	0800ddbd 	.word	0x0800ddbd
 800dcd4:	0800dde3 	.word	0x0800dde3
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dcde:	484d      	ldr	r0, [pc, #308]	; (800de14 <ChangeLED+0x174>)
 800dce0:	f002 fc66 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800dce4:	2200      	movs	r2, #0
 800dce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dcea:	484a      	ldr	r0, [pc, #296]	; (800de14 <ChangeLED+0x174>)
 800dcec:	f002 fc60 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dcf6:	4848      	ldr	r0, [pc, #288]	; (800de18 <ChangeLED+0x178>)
 800dcf8:	f002 fc5a 	bl	80105b0 <HAL_GPIO_WritePin>
		break;
 800dcfc:	e085      	b.n	800de0a <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800dcfe:	2201      	movs	r2, #1
 800dd00:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd04:	4843      	ldr	r0, [pc, #268]	; (800de14 <ChangeLED+0x174>)
 800dd06:	f002 fc53 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd10:	4840      	ldr	r0, [pc, #256]	; (800de14 <ChangeLED+0x174>)
 800dd12:	f002 fc4d 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800dd16:	2200      	movs	r2, #0
 800dd18:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd1c:	483e      	ldr	r0, [pc, #248]	; (800de18 <ChangeLED+0x178>)
 800dd1e:	f002 fc47 	bl	80105b0 <HAL_GPIO_WritePin>
		break;
 800dd22:	e072      	b.n	800de0a <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800dd24:	2200      	movs	r2, #0
 800dd26:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd2a:	483a      	ldr	r0, [pc, #232]	; (800de14 <ChangeLED+0x174>)
 800dd2c:	f002 fc40 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800dd30:	2201      	movs	r2, #1
 800dd32:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd36:	4837      	ldr	r0, [pc, #220]	; (800de14 <ChangeLED+0x174>)
 800dd38:	f002 fc3a 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd42:	4835      	ldr	r0, [pc, #212]	; (800de18 <ChangeLED+0x178>)
 800dd44:	f002 fc34 	bl	80105b0 <HAL_GPIO_WritePin>

		break;
 800dd48:	e05f      	b.n	800de0a <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd50:	4830      	ldr	r0, [pc, #192]	; (800de14 <ChangeLED+0x174>)
 800dd52:	f002 fc2d 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800dd56:	2201      	movs	r2, #1
 800dd58:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd5c:	482d      	ldr	r0, [pc, #180]	; (800de14 <ChangeLED+0x174>)
 800dd5e:	f002 fc27 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800dd62:	2200      	movs	r2, #0
 800dd64:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd68:	482b      	ldr	r0, [pc, #172]	; (800de18 <ChangeLED+0x178>)
 800dd6a:	f002 fc21 	bl	80105b0 <HAL_GPIO_WritePin>
		break;
 800dd6e:	e04c      	b.n	800de0a <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800dd70:	2200      	movs	r2, #0
 800dd72:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd76:	4827      	ldr	r0, [pc, #156]	; (800de14 <ChangeLED+0x174>)
 800dd78:	f002 fc1a 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd82:	4824      	ldr	r0, [pc, #144]	; (800de14 <ChangeLED+0x174>)
 800dd84:	f002 fc14 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800dd88:	2201      	movs	r2, #1
 800dd8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd8e:	4822      	ldr	r0, [pc, #136]	; (800de18 <ChangeLED+0x178>)
 800dd90:	f002 fc0e 	bl	80105b0 <HAL_GPIO_WritePin>
		break;
 800dd94:	e039      	b.n	800de0a <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800dd96:	2201      	movs	r2, #1
 800dd98:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd9c:	481d      	ldr	r0, [pc, #116]	; (800de14 <ChangeLED+0x174>)
 800dd9e:	f002 fc07 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800dda2:	2200      	movs	r2, #0
 800dda4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dda8:	481a      	ldr	r0, [pc, #104]	; (800de14 <ChangeLED+0x174>)
 800ddaa:	f002 fc01 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800ddae:	2201      	movs	r2, #1
 800ddb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ddb4:	4818      	ldr	r0, [pc, #96]	; (800de18 <ChangeLED+0x178>)
 800ddb6:	f002 fbfb 	bl	80105b0 <HAL_GPIO_WritePin>
		break;
 800ddba:	e026      	b.n	800de0a <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ddc2:	4814      	ldr	r0, [pc, #80]	; (800de14 <ChangeLED+0x174>)
 800ddc4:	f002 fbf4 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800ddc8:	2201      	movs	r2, #1
 800ddca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ddce:	4811      	ldr	r0, [pc, #68]	; (800de14 <ChangeLED+0x174>)
 800ddd0:	f002 fbee 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ddda:	480f      	ldr	r0, [pc, #60]	; (800de18 <ChangeLED+0x178>)
 800dddc:	f002 fbe8 	bl	80105b0 <HAL_GPIO_WritePin>

		break;
 800dde0:	e013      	b.n	800de0a <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800dde2:	2201      	movs	r2, #1
 800dde4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dde8:	480a      	ldr	r0, [pc, #40]	; (800de14 <ChangeLED+0x174>)
 800ddea:	f002 fbe1 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800ddee:	2201      	movs	r2, #1
 800ddf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ddf4:	4807      	ldr	r0, [pc, #28]	; (800de14 <ChangeLED+0x174>)
 800ddf6:	f002 fbdb 	bl	80105b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de00:	4805      	ldr	r0, [pc, #20]	; (800de18 <ChangeLED+0x178>)
 800de02:	f002 fbd5 	bl	80105b0 <HAL_GPIO_WritePin>

		break;
 800de06:	e000      	b.n	800de0a <ChangeLED+0x16a>
	default: break;
 800de08:	bf00      	nop

	}
}
 800de0a:	bf00      	nop
 800de0c:	3708      	adds	r7, #8
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	40020800 	.word	0x40020800
 800de18:	40020400 	.word	0x40020400

0800de1c <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800de1c:	b580      	push	{r7, lr}
 800de1e:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800de20:	210c      	movs	r1, #12
 800de22:	4809      	ldr	r0, [pc, #36]	; (800de48 <Motor_PWM_Start+0x2c>)
 800de24:	f003 ffb0 	bl	8011d88 <HAL_TIM_PWM_Start>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d001      	beq.n	800de32 <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800de2e:	f7fe fdf3 	bl	800ca18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800de32:	2104      	movs	r1, #4
 800de34:	4805      	ldr	r0, [pc, #20]	; (800de4c <Motor_PWM_Start+0x30>)
 800de36:	f003 ffa7 	bl	8011d88 <HAL_TIM_PWM_Start>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d001      	beq.n	800de44 <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800de40:	f7fe fdea 	bl	800ca18 <Error_Handler>
  }
#endif
}
 800de44:	bf00      	nop
 800de46:	bd80      	pop	{r7, pc}
 800de48:	20007f50 	.word	0x20007f50
 800de4c:	20007f90 	.word	0x20007f90

0800de50 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800de50:	b580      	push	{r7, lr}
 800de52:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800de54:	210c      	movs	r1, #12
 800de56:	4809      	ldr	r0, [pc, #36]	; (800de7c <Motor_PWM_Stop+0x2c>)
 800de58:	f003 ffd4 	bl	8011e04 <HAL_TIM_PWM_Stop>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d001      	beq.n	800de66 <Motor_PWM_Stop+0x16>
  {
	  Error_Handler();
 800de62:	f7fe fdd9 	bl	800ca18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800de66:	2104      	movs	r1, #4
 800de68:	4805      	ldr	r0, [pc, #20]	; (800de80 <Motor_PWM_Stop+0x30>)
 800de6a:	f003 ffcb 	bl	8011e04 <HAL_TIM_PWM_Stop>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d001      	beq.n	800de78 <Motor_PWM_Stop+0x28>
  {
	  Error_Handler();
 800de74:	f7fe fdd0 	bl	800ca18 <Error_Handler>
  }
#endif
}
 800de78:	bf00      	nop
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	20007f50 	.word	0x20007f50
 800de80:	20007f90 	.word	0x20007f90
 800de84:	00000000 	.word	0x00000000

0800de88 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	dd05      	ble.n	800dea4 <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800de98:	2201      	movs	r2, #1
 800de9a:	2104      	movs	r1, #4
 800de9c:	4828      	ldr	r0, [pc, #160]	; (800df40 <Motor_Switch+0xb8>)
 800de9e:	f002 fb87 	bl	80105b0 <HAL_GPIO_WritePin>
 800dea2:	e00a      	b.n	800deba <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	da07      	bge.n	800deba <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800deaa:	2200      	movs	r2, #0
 800deac:	2104      	movs	r1, #4
 800deae:	4824      	ldr	r0, [pc, #144]	; (800df40 <Motor_Switch+0xb8>)
 800deb0:	f002 fb7e 	bl	80105b0 <HAL_GPIO_WritePin>
		left = -left;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	425b      	negs	r3, r3
 800deb8:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	dd05      	ble.n	800decc <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800dec0:	2200      	movs	r2, #0
 800dec2:	2101      	movs	r1, #1
 800dec4:	481e      	ldr	r0, [pc, #120]	; (800df40 <Motor_Switch+0xb8>)
 800dec6:	f002 fb73 	bl	80105b0 <HAL_GPIO_WritePin>
 800deca:	e00a      	b.n	800dee2 <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	da07      	bge.n	800dee2 <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800ded2:	2201      	movs	r2, #1
 800ded4:	2101      	movs	r1, #1
 800ded6:	481a      	ldr	r0, [pc, #104]	; (800df40 <Motor_Switch+0xb8>)
 800ded8:	f002 fb6a 	bl	80105b0 <HAL_GPIO_WritePin>
	  	right = -right;
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	425b      	negs	r3, r3
 800dee0:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f7fa fa56 	bl	8008394 <__aeabi_i2d>
 800dee8:	a313      	add	r3, pc, #76	; (adr r3, 800df38 <Motor_Switch+0xb0>)
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	f7fa fd4b 	bl	8008988 <__aeabi_dcmpgt>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d002      	beq.n	800defe <Motor_Switch+0x76>
 800def8:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800defc:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800defe:	6838      	ldr	r0, [r7, #0]
 800df00:	f7fa fa48 	bl	8008394 <__aeabi_i2d>
 800df04:	a30c      	add	r3, pc, #48	; (adr r3, 800df38 <Motor_Switch+0xb0>)
 800df06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0a:	f7fa fd3d 	bl	8008988 <__aeabi_dcmpgt>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d002      	beq.n	800df1a <Motor_Switch+0x92>
 800df14:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800df18:	603b      	str	r3, [r7, #0]


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800df1a:	4b0a      	ldr	r3, [pc, #40]	; (800df44 <Motor_Switch+0xbc>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	683a      	ldr	r2, [r7, #0]
 800df20:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800df22:	4b09      	ldr	r3, [pc, #36]	; (800df48 <Motor_Switch+0xc0>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	641a      	str	r2, [r3, #64]	; 0x40
}
 800df2a:	bf00      	nop
 800df2c:	3708      	adds	r7, #8
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	f3af 8000 	nop.w
 800df38:	00000000 	.word	0x00000000
 800df3c:	40a3b000 	.word	0x40a3b000
 800df40:	40020000 	.word	0x40020000
 800df44:	20007f90 	.word	0x20007f90
 800df48:	20007f50 	.word	0x20007f50

0800df4c <InitPulse>:
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
	* timer_counter = initial_pulse;
 800df4c:	6001      	str	r1, [r0, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800df4e:	4770      	bx	lr

0800df50 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800df50:	b4f0      	push	{r4, r5, r6, r7}
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
	error = abs( last[receiver_num] - raw );
 800df52:	4e1a      	ldr	r6, [pc, #104]	; (800dfbc <GetWallDataAverage+0x6c>)
	last[receiver_num] = raw;
	integrate[receiver_num] += error;

	count[receiver_num]++;
 800df54:	4c1a      	ldr	r4, [pc, #104]	; (800dfc0 <GetWallDataAverage+0x70>)
	error = abs( last[receiver_num] - raw );
 800df56:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
	integrate[receiver_num] += error;
 800df5a:	4d1a      	ldr	r5, [pc, #104]	; (800dfc4 <GetWallDataAverage+0x74>)
	last[receiver_num] = raw;
 800df5c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800df60:	1a5b      	subs	r3, r3, r1
	count[receiver_num]++;
 800df62:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
	integrate[receiver_num] += error;
 800df66:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	bfb8      	it	lt
 800df6e:	425b      	neglt	r3, r3
	count[receiver_num]++;
 800df70:	3101      	adds	r1, #1
	integrate[receiver_num] += error;
 800df72:	443b      	add	r3, r7
	if(count[receiver_num] == average_of_n_times)
 800df74:	4281      	cmp	r1, r0
	integrate[receiver_num] += error;
 800df76:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
	count[receiver_num]++;
 800df7a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800df7e:	d006      	beq.n	800df8e <GetWallDataAverage+0x3e>
 800df80:	4b11      	ldr	r3, [pc, #68]	; (800dfc8 <GetWallDataAverage+0x78>)
 800df82:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800df86:	ed92 0a00 	vldr	s0, [r2]
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
		integrate[receiver_num] = 0;
		count[receiver_num] = 0;
	}
	return average[receiver_num];
}
 800df8a:	bcf0      	pop	{r4, r5, r6, r7}
 800df8c:	4770      	bx	lr
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800df8e:	ee07 3a90 	vmov	s15, r3
 800df92:	ee07 1a10 	vmov	s14, r1
 800df96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800df9e:	4b0a      	ldr	r3, [pc, #40]	; (800dfc8 <GetWallDataAverage+0x78>)
 800dfa0:	ee87 0a87 	vdiv.f32	s0, s15, s14
		integrate[receiver_num] = 0;
 800dfa4:	2100      	movs	r1, #0
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800dfa6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		integrate[receiver_num] = 0;
 800dfaa:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
		count[receiver_num] = 0;
 800dfae:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}
 800dfb2:	bcf0      	pop	{r4, r5, r6, r7}
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800dfb4:	ed83 0a00 	vstr	s0, [r3]
}
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	20008028 	.word	0x20008028
 800dfc0:	20008008 	.word	0x20008008
 800dfc4:	20008018 	.word	0x20008018
 800dfc8:	20007ff8 	.word	0x20007ff8

0800dfcc <ADCToBatteryVoltage>:
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
	float battery_voltage = 0;
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800dfcc:	ee07 0a90 	vmov	s15, r0
 800dfd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfd4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dfd8:	ee20 0a20 	vmul.f32	s0, s0, s1
	return battery_voltage;
}
 800dfdc:	ee80 0a01 	vdiv.f32	s0, s0, s2
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop

0800dfe4 <IntegerPower>:
//-------------------------//

int IntegerPower(int integer, int exponential)
{
	int pattern_num = 1;
	for(int i=0; i < exponential ; i++)
 800dfe4:	2900      	cmp	r1, #0
 800dfe6:	dd08      	ble.n	800dffa <IntegerPower+0x16>
 800dfe8:	2300      	movs	r3, #0
	int pattern_num = 1;
 800dfea:	2201      	movs	r2, #1
	for(int i=0; i < exponential ; i++)
 800dfec:	3301      	adds	r3, #1
 800dfee:	4299      	cmp	r1, r3
	{
		pattern_num *= integer;
 800dff0:	fb00 f202 	mul.w	r2, r0, r2
	for(int i=0; i < exponential ; i++)
 800dff4:	d1fa      	bne.n	800dfec <IntegerPower+0x8>
	}
	return pattern_num;
}
 800dff6:	4610      	mov	r0, r2
 800dff8:	4770      	bx	lr
	int pattern_num = 1;
 800dffa:	2201      	movs	r2, #1
}
 800dffc:	4610      	mov	r0, r2
 800dffe:	4770      	bx	lr

0800e000 <GetBatteryLevel>:

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
	float current_percentage = current_voltage / battery_max;
	float lowest_percentage =  battery_min / battery_max;
 800e000:	eec0 0a81 	vdiv.f32	s1, s1, s2

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;

	int pattern = 0;
	for(int i=0; i < level_num; i++)
 800e004:	2800      	cmp	r0, #0
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800e006:	ee07 0a10 	vmov	s14, r0
 800e00a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e00e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e012:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	float current_percentage = current_voltage / battery_max;
 800e016:	ee80 0a01 	vdiv.f32	s0, s0, s2
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800e01a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	for(int i=0; i < level_num; i++)
 800e01e:	dd14      	ble.n	800e04a <GetBatteryLevel+0x4a>
 800e020:	2300      	movs	r3, #0
	int pattern = 0;
 800e022:	461a      	mov	r2, r3
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800e024:	ee07 3a90 	vmov	s15, r3
 800e028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e02c:	eef0 6a60 	vmov.f32	s13, s1
 800e030:	eee7 6a87 	vfma.f32	s13, s15, s14
 800e034:	eef4 6a40 	vcmp.f32	s13, s0
 800e038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e03c:	bf98      	it	ls
 800e03e:	461a      	movls	r2, r3
	for(int i=0; i < level_num; i++)
 800e040:	3301      	adds	r3, #1
 800e042:	4298      	cmp	r0, r3
 800e044:	d1ee      	bne.n	800e024 <GetBatteryLevel+0x24>
		{
			pattern = i;
		}
	}
	return pattern;
}
 800e046:	4610      	mov	r0, r2
 800e048:	4770      	bx	lr
	int pattern = 0;
 800e04a:	2200      	movs	r2, #0
}
 800e04c:	4610      	mov	r0, r2
 800e04e:	4770      	bx	lr

0800e050 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 800e050:	b510      	push	{r4, lr}
	  setbuf(stdout,NULL);
 800e052:	4c06      	ldr	r4, [pc, #24]	; (800e06c <Buffering+0x1c>)
 800e054:	6823      	ldr	r3, [r4, #0]
 800e056:	2100      	movs	r1, #0
 800e058:	6898      	ldr	r0, [r3, #8]
 800e05a:	f007 fde5 	bl	8015c28 <setbuf>
	  setbuf(stdin,NULL);
 800e05e:	6823      	ldr	r3, [r4, #0]
 800e060:	2100      	movs	r1, #0
 800e062:	6858      	ldr	r0, [r3, #4]
}
 800e064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  setbuf(stdin,NULL);
 800e068:	f007 bdde 	b.w	8015c28 <setbuf>
 800e06c:	20000038 	.word	0x20000038

0800e070 <Copy_Gain>:
void Copy_Gain()
{
 800e070:	b570      	push	{r4, r5, r6, lr}
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
	float data[16]={0};
	data[0] = Pid[L_VELO_PID].KP;
 800e072:	4b1c      	ldr	r3, [pc, #112]	; (800e0e4 <Copy_Gain+0x74>)
	uint32_t address = start_adress_sector9;
 800e074:	4c1c      	ldr	r4, [pc, #112]	; (800e0e8 <Copy_Gain+0x78>)
	data[1] = Pid[L_VELO_PID].KI;
 800e076:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
	data[2] = Pid[L_VELO_PID].KD;
 800e07a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8

	data[3] = Pid[A_VELO_PID].KP;
 800e07e:	6818      	ldr	r0, [r3, #0]
	data[4] = Pid[A_VELO_PID].KI;
 800e080:	6859      	ldr	r1, [r3, #4]
	data[0] = Pid[L_VELO_PID].KP;
 800e082:	ed93 0a2c 	vldr	s0, [r3, #176]	; 0xb0
	data[6] = Pid[L_WALL_PID].KP;
	data[7] = Pid[L_WALL_PID].KI;
	data[8] = Pid[L_WALL_PID].KD;

	data[9] = Pid[R_WALL_PID].KP;
	data[10] = Pid[R_WALL_PID].KI;
 800e086:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
	uint32_t address = start_adress_sector9;
 800e08a:	6824      	ldr	r4, [r4, #0]
{
 800e08c:	b090      	sub	sp, #64	; 0x40
	data[0] = Pid[L_VELO_PID].KP;
 800e08e:	ed8d 0a00 	vstr	s0, [sp]
	data[1] = Pid[L_VELO_PID].KI;
 800e092:	9201      	str	r2, [sp, #4]
	data[5] = Pid[A_VELO_PID].KD;
 800e094:	689a      	ldr	r2, [r3, #8]
	data[2] = Pid[L_VELO_PID].KD;
 800e096:	9502      	str	r5, [sp, #8]
	data[3] = Pid[A_VELO_PID].KP;
 800e098:	9003      	str	r0, [sp, #12]
	data[6] = Pid[L_WALL_PID].KP;
 800e09a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
	data[7] = Pid[L_WALL_PID].KI;
 800e09c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
	data[4] = Pid[A_VELO_PID].KI;
 800e09e:	9104      	str	r1, [sp, #16]
	data[5] = Pid[A_VELO_PID].KD;
 800e0a0:	9205      	str	r2, [sp, #20]
	data[8] = Pid[L_WALL_PID].KD;
 800e0a2:	6e19      	ldr	r1, [r3, #96]	; 0x60
	data[9] = Pid[R_WALL_PID].KP;
 800e0a4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	data[6] = Pid[L_WALL_PID].KP;
 800e0a8:	9506      	str	r5, [sp, #24]
	data[7] = Pid[L_WALL_PID].KI;
 800e0aa:	9007      	str	r0, [sp, #28]
	data[11] = Pid[R_WALL_PID].KD;
 800e0ac:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c

	data[12] = Pid[D_WALL_PID].KP;
 800e0b0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
	data[8] = Pid[L_WALL_PID].KD;
 800e0b2:	9108      	str	r1, [sp, #32]
	data[9] = Pid[R_WALL_PID].KP;
 800e0b4:	9209      	str	r2, [sp, #36]	; 0x24
	data[13] = Pid[D_WALL_PID].KI;
 800e0b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
	data[14] = Pid[D_WALL_PID].KD;
 800e0b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	data[10] = Pid[R_WALL_PID].KI;
 800e0ba:	960a      	str	r6, [sp, #40]	; 0x28
	float data[16]={0};
 800e0bc:	2300      	movs	r3, #0
	data[11] = Pid[R_WALL_PID].KD;
 800e0be:	950b      	str	r5, [sp, #44]	; 0x2c
	data[12] = Pid[D_WALL_PID].KP;
 800e0c0:	900c      	str	r0, [sp, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 800e0c2:	910d      	str	r1, [sp, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 800e0c4:	920e      	str	r2, [sp, #56]	; 0x38
 800e0c6:	ad01      	add	r5, sp, #4
	float data[16]={0};
 800e0c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0ca:	ae0f      	add	r6, sp, #60	; 0x3c
 800e0cc:	e001      	b.n	800e0d2 <Copy_Gain+0x62>
 800e0ce:	ecb5 0a01 	vldmia	r5!, {s0}
	for(int i=0; i < 15; i++)
	{

		FLASH_Write_Word_F( address, data[i]);
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	f7ff fb72 	bl	800d7bc <FLASH_Write_Word_F>
	for(int i=0; i < 15; i++)
 800e0d8:	42b5      	cmp	r5, r6
		address += 0x04;
 800e0da:	f104 0404 	add.w	r4, r4, #4
	for(int i=0; i < 15; i++)
 800e0de:	d1f6      	bne.n	800e0ce <Copy_Gain+0x5e>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 800e0e0:	b010      	add	sp, #64	; 0x40
 800e0e2:	bd70      	pop	{r4, r5, r6, pc}
 800e0e4:	20008038 	.word	0x20008038
 800e0e8:	0801929c 	.word	0x0801929c

0800e0ec <Load_Gain>:
void Load_Gain()
{
 800e0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f0:	ed2d 8b02 	vpush	{d8}
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 800e0f4:	4b61      	ldr	r3, [pc, #388]	; (800e27c <Load_Gain+0x190>)
	uint8_t j=0;
	for(int i=0; i < 15; i++)
	{
		FLASH_Read_Word_F( address, &data[i]);
		address += 0x04;
		printf("%d, %f\r\n",i,data[i]);
 800e0f6:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800e298 <Load_Gain+0x1ac>
	uint32_t address = start_adress_sector9;//こっちか
 800e0fa:	681f      	ldr	r7, [r3, #0]
		judge = isnanf(data[i]); //nanでなければ0
		printf("judge : %d\r\n", judge);
 800e0fc:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800e29c <Load_Gain+0x1b0>
{
 800e100:	b090      	sub	sp, #64	; 0x40
	float data[16]={0};//1個多く要素を作る。
 800e102:	4668      	mov	r0, sp
 800e104:	2240      	movs	r2, #64	; 0x40
 800e106:	2100      	movs	r1, #0
 800e108:	f005 ffb1 	bl	801406e <memset>
 800e10c:	466c      	mov	r4, sp
	for(int i=0; i < 15; i++)
 800e10e:	2500      	movs	r5, #0
 800e110:	1b3f      	subs	r7, r7, r4
	uint8_t j=0;
 800e112:	46aa      	mov	sl, r5
		FLASH_Read_Word_F( address, &data[i]);
 800e114:	4621      	mov	r1, r4
 800e116:	1938      	adds	r0, r7, r4
 800e118:	f7ff fb7a 	bl	800d810 <FLASH_Read_Word_F>
		printf("%d, %f\r\n",i,data[i]);
 800e11c:	6820      	ldr	r0, [r4, #0]
 800e11e:	f7fa f94b 	bl	80083b8 <__aeabi_f2d>
 800e122:	4602      	mov	r2, r0
 800e124:	460b      	mov	r3, r1
 800e126:	4648      	mov	r0, r9
 800e128:	4629      	mov	r1, r5
 800e12a:	f007 fa9f 	bl	801566c <iprintf>
		judge = isnanf(data[i]); //nanでなければ0
 800e12e:	ecb4 8a01 	vldmia	r4!, {s16}
 800e132:	eeb4 8a48 	vcmp.f32	s16, s16
 800e136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		printf("judge : %d\r\n", judge);
 800e13a:	bf6c      	ite	vs
 800e13c:	2101      	movvs	r1, #1
 800e13e:	2100      	movvc	r1, #0
 800e140:	4640      	mov	r0, r8
 800e142:	f007 fa93 	bl	801566c <iprintf>
		if(judge == 1) //コンパイラでisnanfの結果が変わる
 800e146:	eeb4 8a48 	vcmp.f32	s16, s16
 800e14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		{
			j++;
 800e14e:	bf68      	it	vs
 800e150:	f10a 0a01 	addvs.w	sl, sl, #1
	for(int i=0; i < 15; i++)
 800e154:	f105 0501 	add.w	r5, r5, #1
			j++;
 800e158:	bf68      	it	vs
 800e15a:	fa5f fa8a 	uxtbvs.w	sl, sl
	for(int i=0; i < 15; i++)
 800e15e:	2d0f      	cmp	r5, #15
 800e160:	d1d8      	bne.n	800e114 <Load_Gain+0x28>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 800e162:	4651      	mov	r1, sl
 800e164:	4846      	ldr	r0, [pc, #280]	; (800e280 <Load_Gain+0x194>)
 800e166:	f007 fa81 	bl	801566c <iprintf>
		if(j == 15)//全てnan0であれば
 800e16a:	f1ba 0f0f 	cmp.w	sl, #15
 800e16e:	d03a      	beq.n	800e1e6 <Load_Gain+0xfa>
//			Pid[A_VELO_PID].KD = data[5];
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 800e170:	ed9d 1a02 	vldr	s2, [sp, #8]
 800e174:	eddd 0a01 	vldr	s1, [sp, #4]
 800e178:	ed9d 0a00 	vldr	s0, [sp]
 800e17c:	2004      	movs	r0, #4
 800e17e:	f000 fa1b 	bl	800e5b8 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 800e182:	ed9d 1a02 	vldr	s2, [sp, #8]
 800e186:	eddd 0a01 	vldr	s1, [sp, #4]
 800e18a:	ed9d 0a00 	vldr	s0, [sp]
 800e18e:	2005      	movs	r0, #5
 800e190:	f000 fa12 	bl	800e5b8 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800e194:	ed9d 1a05 	vldr	s2, [sp, #20]
 800e198:	eddd 0a04 	vldr	s1, [sp, #16]
 800e19c:	ed9d 0a03 	vldr	s0, [sp, #12]
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	f000 fa09 	bl	800e5b8 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 800e1a6:	ed9d 1a08 	vldr	s2, [sp, #32]
 800e1aa:	eddd 0a07 	vldr	s1, [sp, #28]
 800e1ae:	ed9d 0a06 	vldr	s0, [sp, #24]
 800e1b2:	2002      	movs	r0, #2
 800e1b4:	f000 fa00 	bl	800e5b8 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 800e1b8:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
 800e1bc:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
 800e1c0:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 800e1c4:	2003      	movs	r0, #3
 800e1c6:	f000 f9f7 	bl	800e5b8 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 800e1ca:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
 800e1ce:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
 800e1d2:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
 800e1d6:	2001      	movs	r0, #1
 800e1d8:	f000 f9ee 	bl	800e5b8 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 800e1dc:	b010      	add	sp, #64	; 0x40
 800e1de:	ecbd 8b02 	vpop	{d8}
 800e1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("デフォルトゲインセット\r\n");
 800e1e6:	4827      	ldr	r0, [pc, #156]	; (800e284 <Load_Gain+0x198>)
 800e1e8:	f007 fac8 	bl	801577c <puts>
		  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);
 800e1ec:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800e288 <Load_Gain+0x19c>
 800e1f0:	eddf 0a26 	vldr	s1, [pc, #152]	; 800e28c <Load_Gain+0x1a0>
 800e1f4:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800e290 <Load_Gain+0x1a4>
 800e1f8:	2004      	movs	r0, #4
 800e1fa:	f000 f9dd 	bl	800e5b8 <PIDSetGain>
		  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);
 800e1fe:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800e288 <Load_Gain+0x19c>
 800e202:	eddf 0a22 	vldr	s1, [pc, #136]	; 800e28c <Load_Gain+0x1a0>
 800e206:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800e290 <Load_Gain+0x1a4>
 800e20a:	2005      	movs	r0, #5
 800e20c:	f000 f9d4 	bl	800e5b8 <PIDSetGain>
		  PIDSetGain(A_VELO_PID, 12,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800e210:	ed9f 1a20 	vldr	s2, [pc, #128]	; 800e294 <Load_Gain+0x1a8>
 800e214:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e218:	eef0 0a41 	vmov.f32	s1, s2
 800e21c:	2000      	movs	r0, #0
 800e21e:	f000 f9cb 	bl	800e5b8 <PIDSetGain>
		  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800e222:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 800e294 <Load_Gain+0x1a8>
 800e226:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800e290 <Load_Gain+0x1a4>
 800e22a:	eef0 0a41 	vmov.f32	s1, s2
 800e22e:	2008      	movs	r0, #8
 800e230:	f000 f9c2 	bl	800e5b8 <PIDSetGain>
		  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800e234:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800e294 <Load_Gain+0x1a8>
 800e238:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800e23c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800e240:	2001      	movs	r0, #1
 800e242:	f000 f9b9 	bl	800e5b8 <PIDSetGain>
		  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800e246:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800e294 <Load_Gain+0x1a8>
 800e24a:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800e24e:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e252:	2002      	movs	r0, #2
 800e254:	f000 f9b0 	bl	800e5b8 <PIDSetGain>
		  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800e258:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 800e294 <Load_Gain+0x1a8>
 800e25c:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800e260:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e264:	2003      	movs	r0, #3
 800e266:	f000 f9a7 	bl	800e5b8 <PIDSetGain>
			Flash_clear_sector9();
 800e26a:	f7ff fb24 	bl	800d8b6 <Flash_clear_sector9>
			Copy_Gain();
 800e26e:	f7ff feff 	bl	800e070 <Copy_Gain>
}
 800e272:	b010      	add	sp, #64	; 0x40
 800e274:	ecbd 8b02 	vpop	{d8}
 800e278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e27c:	0801929c 	.word	0x0801929c
 800e280:	080193e0 	.word	0x080193e0
 800e284:	080193e8 	.word	0x080193e8
 800e288:	3a83126f 	.word	0x3a83126f
 800e28c:	452f0000 	.word	0x452f0000
 800e290:	4169999a 	.word	0x4169999a
 800e294:	00000000 	.word	0x00000000
 800e298:	0801926c 	.word	0x0801926c
 800e29c:	080193d8 	.word	0x080193d8

0800e2a0 <Change_Gain>:
void Change_Gain()
{
 800e2a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 800e2a4:	48a4      	ldr	r0, [pc, #656]	; (800e538 <Change_Gain+0x298>)
 800e2a6:	4ca5      	ldr	r4, [pc, #660]	; (800e53c <Change_Gain+0x29c>)
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 800e2a8:	f8df 8304 	ldr.w	r8, [pc, #772]	; 800e5b0 <Change_Gain+0x310>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800e2ac:	4da4      	ldr	r5, [pc, #656]	; (800e540 <Change_Gain+0x2a0>)
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800e2ae:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800e5b4 <Change_Gain+0x314>
{
 800e2b2:	b087      	sub	sp, #28
	HAL_TIM_Base_Stop_IT(&htim1);
 800e2b4:	f003 fbb3 	bl	8011a1e <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800e2b8:	48a2      	ldr	r0, [pc, #648]	; (800e544 <Change_Gain+0x2a4>)
 800e2ba:	f003 fbb0 	bl	8011a1e <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 800e2be:	f7ff fdc7 	bl	800de50 <Motor_PWM_Stop>
	EmitterOFF();
 800e2c2:	f7ff fcdf 	bl	800dc84 <EmitterOFF>
	HAL_Delay(200);
 800e2c6:	20c8      	movs	r0, #200	; 0xc8
 800e2c8:	f000 fc9e 	bl	800ec08 <HAL_Delay>
	char change_mode='0';
 800e2cc:	2330      	movs	r3, #48	; 0x30
 800e2ce:	f88d 3015 	strb.w	r3, [sp, #21]
	char pid = '0';
 800e2d2:	f88d 3016 	strb.w	r3, [sp, #22]
		printf("現在のPIDゲイン\r\n");
 800e2d6:	4640      	mov	r0, r8
 800e2d8:	f007 fa50 	bl	801577c <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800e2dc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800e2e0:	f7fa f86a 	bl	80083b8 <__aeabi_f2d>
 800e2e4:	4606      	mov	r6, r0
 800e2e6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800e2ea:	460f      	mov	r7, r1
 800e2ec:	f7fa f864 	bl	80083b8 <__aeabi_f2d>
 800e2f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2f4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800e2f8:	f7fa f85e 	bl	80083b8 <__aeabi_f2d>
 800e2fc:	4632      	mov	r2, r6
 800e2fe:	463b      	mov	r3, r7
 800e300:	e9cd 0100 	strd	r0, r1, [sp]
 800e304:	4628      	mov	r0, r5
 800e306:	f007 f9b1 	bl	801566c <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800e30a:	6820      	ldr	r0, [r4, #0]
 800e30c:	f7fa f854 	bl	80083b8 <__aeabi_f2d>
 800e310:	4606      	mov	r6, r0
 800e312:	68a0      	ldr	r0, [r4, #8]
 800e314:	460f      	mov	r7, r1
 800e316:	f7fa f84f 	bl	80083b8 <__aeabi_f2d>
 800e31a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e31e:	6860      	ldr	r0, [r4, #4]
 800e320:	f7fa f84a 	bl	80083b8 <__aeabi_f2d>
 800e324:	4632      	mov	r2, r6
 800e326:	463b      	mov	r3, r7
 800e328:	e9cd 0100 	strd	r0, r1, [sp]
 800e32c:	4648      	mov	r0, r9
 800e32e:	f007 f99d 	bl	801566c <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 800e332:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e334:	f7fa f840 	bl	80083b8 <__aeabi_f2d>
 800e338:	4606      	mov	r6, r0
 800e33a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800e33c:	460f      	mov	r7, r1
 800e33e:	f7fa f83b 	bl	80083b8 <__aeabi_f2d>
 800e342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e346:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800e348:	f7fa f836 	bl	80083b8 <__aeabi_f2d>
 800e34c:	4632      	mov	r2, r6
 800e34e:	463b      	mov	r3, r7
 800e350:	e9cd 0100 	strd	r0, r1, [sp]
 800e354:	487c      	ldr	r0, [pc, #496]	; (800e548 <Change_Gain+0x2a8>)
 800e356:	f007 f989 	bl	801566c <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 800e35a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800e35e:	f7fa f82b 	bl	80083b8 <__aeabi_f2d>
 800e362:	4606      	mov	r6, r0
 800e364:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800e368:	460f      	mov	r7, r1
 800e36a:	f7fa f825 	bl	80083b8 <__aeabi_f2d>
 800e36e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e372:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800e376:	f7fa f81f 	bl	80083b8 <__aeabi_f2d>
 800e37a:	4632      	mov	r2, r6
 800e37c:	463b      	mov	r3, r7
 800e37e:	e9cd 0100 	strd	r0, r1, [sp]
 800e382:	4872      	ldr	r0, [pc, #456]	; (800e54c <Change_Gain+0x2ac>)
 800e384:	f007 f972 	bl	801566c <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 800e388:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e38a:	f7fa f815 	bl	80083b8 <__aeabi_f2d>
 800e38e:	4606      	mov	r6, r0
 800e390:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e392:	460f      	mov	r7, r1
 800e394:	f7fa f810 	bl	80083b8 <__aeabi_f2d>
 800e398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e39c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e39e:	f7fa f80b 	bl	80083b8 <__aeabi_f2d>
 800e3a2:	463b      	mov	r3, r7
 800e3a4:	e9cd 0100 	strd	r0, r1, [sp]
 800e3a8:	4632      	mov	r2, r6
 800e3aa:	4869      	ldr	r0, [pc, #420]	; (800e550 <Change_Gain+0x2b0>)
 800e3ac:	f007 f95e 	bl	801566c <iprintf>

		Buffering();
 800e3b0:	f7ff fe4e 	bl	800e050 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 800e3b4:	4867      	ldr	r0, [pc, #412]	; (800e554 <Change_Gain+0x2b4>)
 800e3b6:	f007 f959 	bl	801566c <iprintf>
 800e3ba:	f10d 0115 	add.w	r1, sp, #21
 800e3be:	4866      	ldr	r0, [pc, #408]	; (800e558 <Change_Gain+0x2b8>)
 800e3c0:	f007 fbe8 	bl	8015b94 <iscanf>
		if(change_mode == '0')
 800e3c4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800e3c8:	2b30      	cmp	r3, #48	; 0x30
 800e3ca:	d066      	beq.n	800e49a <Change_Gain+0x1fa>
			break;
		}
		else
		{

			Buffering();
 800e3cc:	f7ff fe40 	bl	800e050 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 800e3d0:	4862      	ldr	r0, [pc, #392]	; (800e55c <Change_Gain+0x2bc>)
 800e3d2:	f007 f94b 	bl	801566c <iprintf>
 800e3d6:	f10d 0116 	add.w	r1, sp, #22
 800e3da:	485f      	ldr	r0, [pc, #380]	; (800e558 <Change_Gain+0x2b8>)
 800e3dc:	f007 fbda 	bl	8015b94 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 800e3e0:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800e3e4:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800e3e8:	485d      	ldr	r0, [pc, #372]	; (800e560 <Change_Gain+0x2c0>)
 800e3ea:	f007 f93f 	bl	801566c <iprintf>

			Buffering();
 800e3ee:	f7ff fe2f 	bl	800e050 <Buffering>
			printf("\r\n値を入力 : ");
 800e3f2:	485c      	ldr	r0, [pc, #368]	; (800e564 <Change_Gain+0x2c4>)
 800e3f4:	f007 f93a 	bl	801566c <iprintf>

			switch(change_mode)
 800e3f8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800e3fc:	3b31      	subs	r3, #49	; 0x31
 800e3fe:	2b04      	cmp	r3, #4
 800e400:	d85e      	bhi.n	800e4c0 <Change_Gain+0x220>
 800e402:	e8df f003 	tbb	[pc, r3]
 800e406:	303d      	.short	0x303d
 800e408:	1623      	.short	0x1623
 800e40a:	03          	.byte	0x03
 800e40b:	00          	.byte	0x00
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
			case '5'://壁制御ゲイン
				if(pid == 'p')
 800e40c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e410:	2b70      	cmp	r3, #112	; 0x70
 800e412:	d068      	beq.n	800e4e6 <Change_Gain+0x246>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
				}
				else if(pid == 'i')
 800e414:	2b69      	cmp	r3, #105	; 0x69
 800e416:	d07f      	beq.n	800e518 <Change_Gain+0x278>
				{
					scanf("%f",&Pid[D_WALL_PID].KI);
				}
				else if(pid == 'd')
 800e418:	2b64      	cmp	r3, #100	; 0x64
 800e41a:	d055      	beq.n	800e4c8 <Change_Gain+0x228>
				break;
			default :
				printf("該当しません\r\n");
				break;
			}
			Buffering();
 800e41c:	f7ff fe18 	bl	800e050 <Buffering>
			scanf("%c",&nl);
 800e420:	f10d 0117 	add.w	r1, sp, #23
 800e424:	484c      	ldr	r0, [pc, #304]	; (800e558 <Change_Gain+0x2b8>)
 800e426:	f007 fbb5 	bl	8015b94 <iscanf>
			printf("\r\n");
 800e42a:	484f      	ldr	r0, [pc, #316]	; (800e568 <Change_Gain+0x2c8>)
 800e42c:	f007 f9a6 	bl	801577c <puts>
		printf("現在のPIDゲイン\r\n");
 800e430:	e751      	b.n	800e2d6 <Change_Gain+0x36>
				if(pid == 'p')
 800e432:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e436:	2b70      	cmp	r3, #112	; 0x70
 800e438:	d05a      	beq.n	800e4f0 <Change_Gain+0x250>
				else if(pid == 'i')
 800e43a:	2b69      	cmp	r3, #105	; 0x69
 800e43c:	d071      	beq.n	800e522 <Change_Gain+0x282>
				else if(pid == 'd')
 800e43e:	2b64      	cmp	r3, #100	; 0x64
 800e440:	d1ec      	bne.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KD);
 800e442:	494a      	ldr	r1, [pc, #296]	; (800e56c <Change_Gain+0x2cc>)
 800e444:	484a      	ldr	r0, [pc, #296]	; (800e570 <Change_Gain+0x2d0>)
 800e446:	f007 fba5 	bl	8015b94 <iscanf>
 800e44a:	e7e7      	b.n	800e41c <Change_Gain+0x17c>
				if(pid == 'p')
 800e44c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e450:	2b70      	cmp	r3, #112	; 0x70
 800e452:	d052      	beq.n	800e4fa <Change_Gain+0x25a>
				else if(pid == 'i')
 800e454:	2b69      	cmp	r3, #105	; 0x69
 800e456:	d069      	beq.n	800e52c <Change_Gain+0x28c>
				else if(pid == 'd')
 800e458:	2b64      	cmp	r3, #100	; 0x64
 800e45a:	d1df      	bne.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 800e45c:	4945      	ldr	r1, [pc, #276]	; (800e574 <Change_Gain+0x2d4>)
 800e45e:	4844      	ldr	r0, [pc, #272]	; (800e570 <Change_Gain+0x2d0>)
 800e460:	f007 fb98 	bl	8015b94 <iscanf>
 800e464:	e7da      	b.n	800e41c <Change_Gain+0x17c>
				if(pid == 'p')
 800e466:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e46a:	2b70      	cmp	r3, #112	; 0x70
 800e46c:	d036      	beq.n	800e4dc <Change_Gain+0x23c>
				else if(pid == 'i')
 800e46e:	2b69      	cmp	r3, #105	; 0x69
 800e470:	d04d      	beq.n	800e50e <Change_Gain+0x26e>
				else if(pid == 'd')
 800e472:	2b64      	cmp	r3, #100	; 0x64
 800e474:	d1d2      	bne.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KD);
 800e476:	4940      	ldr	r1, [pc, #256]	; (800e578 <Change_Gain+0x2d8>)
 800e478:	483d      	ldr	r0, [pc, #244]	; (800e570 <Change_Gain+0x2d0>)
 800e47a:	f007 fb8b 	bl	8015b94 <iscanf>
 800e47e:	e7cd      	b.n	800e41c <Change_Gain+0x17c>
				if(pid == 'p')
 800e480:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e484:	2b70      	cmp	r3, #112	; 0x70
 800e486:	d024      	beq.n	800e4d2 <Change_Gain+0x232>
				else if(pid == 'i')
 800e488:	2b69      	cmp	r3, #105	; 0x69
 800e48a:	d03b      	beq.n	800e504 <Change_Gain+0x264>
				else if(pid == 'd')
 800e48c:	2b64      	cmp	r3, #100	; 0x64
 800e48e:	d1c5      	bne.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KD);
 800e490:	493a      	ldr	r1, [pc, #232]	; (800e57c <Change_Gain+0x2dc>)
 800e492:	4837      	ldr	r0, [pc, #220]	; (800e570 <Change_Gain+0x2d0>)
 800e494:	f007 fb7e 	bl	8015b94 <iscanf>
 800e498:	e7c0      	b.n	800e41c <Change_Gain+0x17c>
		}

	}
	printf("\r\n完了\r\n");
 800e49a:	4839      	ldr	r0, [pc, #228]	; (800e580 <Change_Gain+0x2e0>)
 800e49c:	f007 f96e 	bl	801577c <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 800e4a0:	f7ff fa09 	bl	800d8b6 <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 800e4a4:	f7ff fde4 	bl	800e070 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 800e4a8:	2007      	movs	r0, #7
 800e4aa:	f7ff fbf9 	bl	800dca0 <ChangeLED>
	HAL_Delay(200);
 800e4ae:	20c8      	movs	r0, #200	; 0xc8
 800e4b0:	f000 fbaa 	bl	800ec08 <HAL_Delay>
	ChangeLED(0);
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	f7ff fbf3 	bl	800dca0 <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 800e4ba:	b007      	add	sp, #28
 800e4bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				printf("該当しません\r\n");
 800e4c0:	4830      	ldr	r0, [pc, #192]	; (800e584 <Change_Gain+0x2e4>)
 800e4c2:	f007 f95b 	bl	801577c <puts>
				break;
 800e4c6:	e7a9      	b.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KD);
 800e4c8:	492f      	ldr	r1, [pc, #188]	; (800e588 <Change_Gain+0x2e8>)
 800e4ca:	4829      	ldr	r0, [pc, #164]	; (800e570 <Change_Gain+0x2d0>)
 800e4cc:	f007 fb62 	bl	8015b94 <iscanf>
 800e4d0:	e7a4      	b.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KP);
 800e4d2:	492e      	ldr	r1, [pc, #184]	; (800e58c <Change_Gain+0x2ec>)
 800e4d4:	4826      	ldr	r0, [pc, #152]	; (800e570 <Change_Gain+0x2d0>)
 800e4d6:	f007 fb5d 	bl	8015b94 <iscanf>
 800e4da:	e79f      	b.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KP);
 800e4dc:	4917      	ldr	r1, [pc, #92]	; (800e53c <Change_Gain+0x29c>)
 800e4de:	4824      	ldr	r0, [pc, #144]	; (800e570 <Change_Gain+0x2d0>)
 800e4e0:	f007 fb58 	bl	8015b94 <iscanf>
 800e4e4:	e79a      	b.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KP);
 800e4e6:	492a      	ldr	r1, [pc, #168]	; (800e590 <Change_Gain+0x2f0>)
 800e4e8:	4821      	ldr	r0, [pc, #132]	; (800e570 <Change_Gain+0x2d0>)
 800e4ea:	f007 fb53 	bl	8015b94 <iscanf>
 800e4ee:	e795      	b.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KP);
 800e4f0:	4928      	ldr	r1, [pc, #160]	; (800e594 <Change_Gain+0x2f4>)
 800e4f2:	481f      	ldr	r0, [pc, #124]	; (800e570 <Change_Gain+0x2d0>)
 800e4f4:	f007 fb4e 	bl	8015b94 <iscanf>
 800e4f8:	e790      	b.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KP);
 800e4fa:	4927      	ldr	r1, [pc, #156]	; (800e598 <Change_Gain+0x2f8>)
 800e4fc:	481c      	ldr	r0, [pc, #112]	; (800e570 <Change_Gain+0x2d0>)
 800e4fe:	f007 fb49 	bl	8015b94 <iscanf>
 800e502:	e78b      	b.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KI);
 800e504:	4925      	ldr	r1, [pc, #148]	; (800e59c <Change_Gain+0x2fc>)
 800e506:	481a      	ldr	r0, [pc, #104]	; (800e570 <Change_Gain+0x2d0>)
 800e508:	f007 fb44 	bl	8015b94 <iscanf>
 800e50c:	e786      	b.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KI);
 800e50e:	4924      	ldr	r1, [pc, #144]	; (800e5a0 <Change_Gain+0x300>)
 800e510:	4817      	ldr	r0, [pc, #92]	; (800e570 <Change_Gain+0x2d0>)
 800e512:	f007 fb3f 	bl	8015b94 <iscanf>
 800e516:	e781      	b.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KI);
 800e518:	4922      	ldr	r1, [pc, #136]	; (800e5a4 <Change_Gain+0x304>)
 800e51a:	4815      	ldr	r0, [pc, #84]	; (800e570 <Change_Gain+0x2d0>)
 800e51c:	f007 fb3a 	bl	8015b94 <iscanf>
 800e520:	e77c      	b.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KI);
 800e522:	4921      	ldr	r1, [pc, #132]	; (800e5a8 <Change_Gain+0x308>)
 800e524:	4812      	ldr	r0, [pc, #72]	; (800e570 <Change_Gain+0x2d0>)
 800e526:	f007 fb35 	bl	8015b94 <iscanf>
 800e52a:	e777      	b.n	800e41c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KI);
 800e52c:	491f      	ldr	r1, [pc, #124]	; (800e5ac <Change_Gain+0x30c>)
 800e52e:	4810      	ldr	r0, [pc, #64]	; (800e570 <Change_Gain+0x2d0>)
 800e530:	f007 fb30 	bl	8015b94 <iscanf>
 800e534:	e772      	b.n	800e41c <Change_Gain+0x17c>
 800e536:	bf00      	nop
 800e538:	20008e48 	.word	0x20008e48
 800e53c:	20008038 	.word	0x20008038
 800e540:	080192bc 	.word	0x080192bc
 800e544:	20008c00 	.word	0x20008c00
 800e548:	080192f8 	.word	0x080192f8
 800e54c:	08019314 	.word	0x08019314
 800e550:	08019330 	.word	0x08019330
 800e554:	0801934c 	.word	0x0801934c
 800e558:	08019364 	.word	0x08019364
 800e55c:	08019368 	.word	0x08019368
 800e560:	0801937c 	.word	0x0801937c
 800e564:	080193a0 	.word	0x080193a0
 800e568:	080193d4 	.word	0x080193d4
 800e56c:	200080c4 	.word	0x200080c4
 800e570:	080193b4 	.word	0x080193b4
 800e574:	20008098 	.word	0x20008098
 800e578:	20008040 	.word	0x20008040
 800e57c:	200080f0 	.word	0x200080f0
 800e580:	080193cc 	.word	0x080193cc
 800e584:	080193b8 	.word	0x080193b8
 800e588:	2000806c 	.word	0x2000806c
 800e58c:	200080e8 	.word	0x200080e8
 800e590:	20008064 	.word	0x20008064
 800e594:	200080bc 	.word	0x200080bc
 800e598:	20008090 	.word	0x20008090
 800e59c:	200080ec 	.word	0x200080ec
 800e5a0:	2000803c 	.word	0x2000803c
 800e5a4:	20008068 	.word	0x20008068
 800e5a8:	200080c0 	.word	0x200080c0
 800e5ac:	20008094 	.word	0x20008094
 800e5b0:	080192a4 	.word	0x080192a4
 800e5b4:	080192dc 	.word	0x080192dc

0800e5b8 <PIDSetGain>:
//		elast[i] = 0;
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b085      	sub	sp, #20
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	ed87 0a02 	vstr	s0, [r7, #8]
 800e5c4:	edc7 0a01 	vstr	s1, [r7, #4]
 800e5c8:	ed87 1a00 	vstr	s2, [r7]
	Pid[n].KP = kp;
 800e5cc:	4a0f      	ldr	r2, [pc, #60]	; (800e60c <PIDSetGain+0x54>)
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	212c      	movs	r1, #44	; 0x2c
 800e5d2:	fb01 f303 	mul.w	r3, r1, r3
 800e5d6:	4413      	add	r3, r2
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	601a      	str	r2, [r3, #0]
	Pid[n].KI = ki;
 800e5dc:	4a0b      	ldr	r2, [pc, #44]	; (800e60c <PIDSetGain+0x54>)
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	212c      	movs	r1, #44	; 0x2c
 800e5e2:	fb01 f303 	mul.w	r3, r1, r3
 800e5e6:	4413      	add	r3, r2
 800e5e8:	3304      	adds	r3, #4
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	601a      	str	r2, [r3, #0]
	Pid[n].KD = kd;
 800e5ee:	4a07      	ldr	r2, [pc, #28]	; (800e60c <PIDSetGain+0x54>)
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	212c      	movs	r1, #44	; 0x2c
 800e5f4:	fb01 f303 	mul.w	r3, r1, r3
 800e5f8:	4413      	add	r3, r2
 800e5fa:	3308      	adds	r3, #8
 800e5fc:	683a      	ldr	r2, [r7, #0]
 800e5fe:	601a      	str	r2, [r3, #0]

}
 800e600:	bf00      	nop
 800e602:	3714      	adds	r7, #20
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr
 800e60c:	20008038 	.word	0x20008038

0800e610 <PIDChangeFlag>:
//	ei[n] = 0;
//	elast[n] = 0;
//}

void PIDChangeFlag(int n, int on_or_off)
{
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
	Pid[n].flag = on_or_off;
 800e61a:	4a07      	ldr	r2, [pc, #28]	; (800e638 <PIDChangeFlag+0x28>)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	212c      	movs	r1, #44	; 0x2c
 800e620:	fb01 f303 	mul.w	r3, r1, r3
 800e624:	4413      	add	r3, r2
 800e626:	3328      	adds	r3, #40	; 0x28
 800e628:	683a      	ldr	r2, [r7, #0]
 800e62a:	601a      	str	r2, [r3, #0]
}
 800e62c:	bf00      	nop
 800e62e:	370c      	adds	r7, #12
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr
 800e638:	20008038 	.word	0x20008038

0800e63c <PIDReset>:
int PIDGetFlag(int n)
{
	return Pid[n].flag;
}
void PIDReset(int n)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800e644:	4a1b      	ldr	r2, [pc, #108]	; (800e6b4 <PIDReset+0x78>)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	212c      	movs	r1, #44	; 0x2c
 800e64a:	fb01 f303 	mul.w	r3, r1, r3
 800e64e:	4413      	add	r3, r2
 800e650:	330c      	adds	r3, #12
 800e652:	f04f 0200 	mov.w	r2, #0
 800e656:	601a      	str	r2, [r3, #0]
	Pid[n].ei = 0;
 800e658:	4a16      	ldr	r2, [pc, #88]	; (800e6b4 <PIDReset+0x78>)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	212c      	movs	r1, #44	; 0x2c
 800e65e:	fb01 f303 	mul.w	r3, r1, r3
 800e662:	4413      	add	r3, r2
 800e664:	3310      	adds	r3, #16
 800e666:	f04f 0200 	mov.w	r2, #0
 800e66a:	601a      	str	r2, [r3, #0]
	Pid[n].ed = 0;
 800e66c:	4a11      	ldr	r2, [pc, #68]	; (800e6b4 <PIDReset+0x78>)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	212c      	movs	r1, #44	; 0x2c
 800e672:	fb01 f303 	mul.w	r3, r1, r3
 800e676:	4413      	add	r3, r2
 800e678:	3314      	adds	r3, #20
 800e67a:	f04f 0200 	mov.w	r2, #0
 800e67e:	601a      	str	r2, [r3, #0]
	Pid[n].elast = 0;
 800e680:	4a0c      	ldr	r2, [pc, #48]	; (800e6b4 <PIDReset+0x78>)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	212c      	movs	r1, #44	; 0x2c
 800e686:	fb01 f303 	mul.w	r3, r1, r3
 800e68a:	4413      	add	r3, r2
 800e68c:	3318      	adds	r3, #24
 800e68e:	f04f 0200 	mov.w	r2, #0
 800e692:	601a      	str	r2, [r3, #0]
	Pid[n].out = 0;
 800e694:	4a07      	ldr	r2, [pc, #28]	; (800e6b4 <PIDReset+0x78>)
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	212c      	movs	r1, #44	; 0x2c
 800e69a:	fb01 f303 	mul.w	r3, r1, r3
 800e69e:	4413      	add	r3, r2
 800e6a0:	3324      	adds	r3, #36	; 0x24
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]
}
 800e6a6:	bf00      	nop
 800e6a8:	370c      	adds	r7, #12
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	20008038 	.word	0x20008038

0800e6b8 <PIDControl>:
//{
//	Pid[n].target = target;
//	Pid[n].current = current;
//}
inline int PIDControl(int n, float target, float current)
{
 800e6b8:	b590      	push	{r4, r7, lr}
 800e6ba:	b085      	sub	sp, #20
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	ed87 0a02 	vstr	s0, [r7, #8]
 800e6c4:	edc7 0a01 	vstr	s1, [r7, #4]
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800e6c8:	4a90      	ldr	r2, [pc, #576]	; (800e90c <PIDControl+0x254>)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	212c      	movs	r1, #44	; 0x2c
 800e6ce:	fb01 f303 	mul.w	r3, r1, r3
 800e6d2:	4413      	add	r3, r2
 800e6d4:	3328      	adds	r3, #40	; 0x28
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d132      	bne.n	800e742 <PIDControl+0x8a>
	{
		Pid[n].e = 0.0f;
 800e6dc:	4a8b      	ldr	r2, [pc, #556]	; (800e90c <PIDControl+0x254>)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	212c      	movs	r1, #44	; 0x2c
 800e6e2:	fb01 f303 	mul.w	r3, r1, r3
 800e6e6:	4413      	add	r3, r2
 800e6e8:	330c      	adds	r3, #12
 800e6ea:	f04f 0200 	mov.w	r2, #0
 800e6ee:	601a      	str	r2, [r3, #0]
		Pid[n].ei = 0.0f;
 800e6f0:	4a86      	ldr	r2, [pc, #536]	; (800e90c <PIDControl+0x254>)
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	212c      	movs	r1, #44	; 0x2c
 800e6f6:	fb01 f303 	mul.w	r3, r1, r3
 800e6fa:	4413      	add	r3, r2
 800e6fc:	3310      	adds	r3, #16
 800e6fe:	f04f 0200 	mov.w	r2, #0
 800e702:	601a      	str	r2, [r3, #0]
		Pid[n].ed = 0.0f;
 800e704:	4a81      	ldr	r2, [pc, #516]	; (800e90c <PIDControl+0x254>)
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	212c      	movs	r1, #44	; 0x2c
 800e70a:	fb01 f303 	mul.w	r3, r1, r3
 800e70e:	4413      	add	r3, r2
 800e710:	3314      	adds	r3, #20
 800e712:	f04f 0200 	mov.w	r2, #0
 800e716:	601a      	str	r2, [r3, #0]
		Pid[n].elast = 0.0f;
 800e718:	4a7c      	ldr	r2, [pc, #496]	; (800e90c <PIDControl+0x254>)
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	212c      	movs	r1, #44	; 0x2c
 800e71e:	fb01 f303 	mul.w	r3, r1, r3
 800e722:	4413      	add	r3, r2
 800e724:	3318      	adds	r3, #24
 800e726:	f04f 0200 	mov.w	r2, #0
 800e72a:	601a      	str	r2, [r3, #0]
		Pid[n].out = 0;
 800e72c:	4a77      	ldr	r2, [pc, #476]	; (800e90c <PIDControl+0x254>)
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	212c      	movs	r1, #44	; 0x2c
 800e732:	fb01 f303 	mul.w	r3, r1, r3
 800e736:	4413      	add	r3, r2
 800e738:	3324      	adds	r3, #36	; 0x24
 800e73a:	2200      	movs	r2, #0
 800e73c:	601a      	str	r2, [r3, #0]
		return 0;
 800e73e:	2300      	movs	r3, #0
 800e740:	e0df      	b.n	800e902 <PIDControl+0x24a>
		//PIDReset(n);
	}
	else
	{
		Pid[n].target = target;
 800e742:	4a72      	ldr	r2, [pc, #456]	; (800e90c <PIDControl+0x254>)
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	212c      	movs	r1, #44	; 0x2c
 800e748:	fb01 f303 	mul.w	r3, r1, r3
 800e74c:	4413      	add	r3, r2
 800e74e:	3320      	adds	r3, #32
 800e750:	68ba      	ldr	r2, [r7, #8]
 800e752:	601a      	str	r2, [r3, #0]
		Pid[n].current = current;
 800e754:	4a6d      	ldr	r2, [pc, #436]	; (800e90c <PIDControl+0x254>)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	212c      	movs	r1, #44	; 0x2c
 800e75a:	fb01 f303 	mul.w	r3, r1, r3
 800e75e:	4413      	add	r3, r2
 800e760:	331c      	adds	r3, #28
 800e762:	687a      	ldr	r2, [r7, #4]
 800e764:	601a      	str	r2, [r3, #0]

		Pid[n].e = Pid[n].target - Pid[n].current;
 800e766:	4a69      	ldr	r2, [pc, #420]	; (800e90c <PIDControl+0x254>)
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	212c      	movs	r1, #44	; 0x2c
 800e76c:	fb01 f303 	mul.w	r3, r1, r3
 800e770:	4413      	add	r3, r2
 800e772:	3320      	adds	r3, #32
 800e774:	ed93 7a00 	vldr	s14, [r3]
 800e778:	4a64      	ldr	r2, [pc, #400]	; (800e90c <PIDControl+0x254>)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	212c      	movs	r1, #44	; 0x2c
 800e77e:	fb01 f303 	mul.w	r3, r1, r3
 800e782:	4413      	add	r3, r2
 800e784:	331c      	adds	r3, #28
 800e786:	edd3 7a00 	vldr	s15, [r3]
 800e78a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e78e:	4a5f      	ldr	r2, [pc, #380]	; (800e90c <PIDControl+0x254>)
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	212c      	movs	r1, #44	; 0x2c
 800e794:	fb01 f303 	mul.w	r3, r1, r3
 800e798:	4413      	add	r3, r2
 800e79a:	330c      	adds	r3, #12
 800e79c:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ei += Pid[n].e * pid_T;
 800e7a0:	4a5a      	ldr	r2, [pc, #360]	; (800e90c <PIDControl+0x254>)
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	212c      	movs	r1, #44	; 0x2c
 800e7a6:	fb01 f303 	mul.w	r3, r1, r3
 800e7aa:	4413      	add	r3, r2
 800e7ac:	3310      	adds	r3, #16
 800e7ae:	ed93 7a00 	vldr	s14, [r3]
 800e7b2:	4a56      	ldr	r2, [pc, #344]	; (800e90c <PIDControl+0x254>)
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	212c      	movs	r1, #44	; 0x2c
 800e7b8:	fb01 f303 	mul.w	r3, r1, r3
 800e7bc:	4413      	add	r3, r2
 800e7be:	330c      	adds	r3, #12
 800e7c0:	edd3 7a00 	vldr	s15, [r3]
 800e7c4:	eddf 6a52 	vldr	s13, [pc, #328]	; 800e910 <PIDControl+0x258>
 800e7c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e7cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e7d0:	4a4e      	ldr	r2, [pc, #312]	; (800e90c <PIDControl+0x254>)
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	212c      	movs	r1, #44	; 0x2c
 800e7d6:	fb01 f303 	mul.w	r3, r1, r3
 800e7da:	4413      	add	r3, r2
 800e7dc:	3310      	adds	r3, #16
 800e7de:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e7e2:	4a4a      	ldr	r2, [pc, #296]	; (800e90c <PIDControl+0x254>)
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	212c      	movs	r1, #44	; 0x2c
 800e7e8:	fb01 f303 	mul.w	r3, r1, r3
 800e7ec:	4413      	add	r3, r2
 800e7ee:	330c      	adds	r3, #12
 800e7f0:	ed93 7a00 	vldr	s14, [r3]
 800e7f4:	4a45      	ldr	r2, [pc, #276]	; (800e90c <PIDControl+0x254>)
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	212c      	movs	r1, #44	; 0x2c
 800e7fa:	fb01 f303 	mul.w	r3, r1, r3
 800e7fe:	4413      	add	r3, r2
 800e800:	3318      	adds	r3, #24
 800e802:	edd3 7a00 	vldr	s15, [r3]
 800e806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e80a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800e914 <PIDControl+0x25c>
 800e80e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e812:	4a3e      	ldr	r2, [pc, #248]	; (800e90c <PIDControl+0x254>)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	212c      	movs	r1, #44	; 0x2c
 800e818:	fb01 f303 	mul.w	r3, r1, r3
 800e81c:	4413      	add	r3, r2
 800e81e:	3314      	adds	r3, #20
 800e820:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].elast = Pid[n].e;
 800e824:	4a39      	ldr	r2, [pc, #228]	; (800e90c <PIDControl+0x254>)
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	212c      	movs	r1, #44	; 0x2c
 800e82a:	fb01 f303 	mul.w	r3, r1, r3
 800e82e:	4413      	add	r3, r2
 800e830:	330c      	adds	r3, #12
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	4935      	ldr	r1, [pc, #212]	; (800e90c <PIDControl+0x254>)
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	202c      	movs	r0, #44	; 0x2c
 800e83a:	fb00 f303 	mul.w	r3, r0, r3
 800e83e:	440b      	add	r3, r1
 800e840:	3318      	adds	r3, #24
 800e842:	601a      	str	r2, [r3, #0]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e844:	4a31      	ldr	r2, [pc, #196]	; (800e90c <PIDControl+0x254>)
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	212c      	movs	r1, #44	; 0x2c
 800e84a:	fb01 f303 	mul.w	r3, r1, r3
 800e84e:	4413      	add	r3, r2
 800e850:	ed93 7a00 	vldr	s14, [r3]
 800e854:	4a2d      	ldr	r2, [pc, #180]	; (800e90c <PIDControl+0x254>)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	212c      	movs	r1, #44	; 0x2c
 800e85a:	fb01 f303 	mul.w	r3, r1, r3
 800e85e:	4413      	add	r3, r2
 800e860:	330c      	adds	r3, #12
 800e862:	edd3 7a00 	vldr	s15, [r3]
 800e866:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e86a:	4a28      	ldr	r2, [pc, #160]	; (800e90c <PIDControl+0x254>)
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	212c      	movs	r1, #44	; 0x2c
 800e870:	fb01 f303 	mul.w	r3, r1, r3
 800e874:	4413      	add	r3, r2
 800e876:	3304      	adds	r3, #4
 800e878:	edd3 6a00 	vldr	s13, [r3]
 800e87c:	4a23      	ldr	r2, [pc, #140]	; (800e90c <PIDControl+0x254>)
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	212c      	movs	r1, #44	; 0x2c
 800e882:	fb01 f303 	mul.w	r3, r1, r3
 800e886:	4413      	add	r3, r2
 800e888:	3310      	adds	r3, #16
 800e88a:	edd3 7a00 	vldr	s15, [r3]
 800e88e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e892:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e896:	4a1d      	ldr	r2, [pc, #116]	; (800e90c <PIDControl+0x254>)
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	212c      	movs	r1, #44	; 0x2c
 800e89c:	fb01 f303 	mul.w	r3, r1, r3
 800e8a0:	4413      	add	r3, r2
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	edd3 6a00 	vldr	s13, [r3]
 800e8a8:	4a18      	ldr	r2, [pc, #96]	; (800e90c <PIDControl+0x254>)
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	212c      	movs	r1, #44	; 0x2c
 800e8ae:	fb01 f303 	mul.w	r3, r1, r3
 800e8b2:	4413      	add	r3, r2
 800e8b4:	3314      	adds	r3, #20
 800e8b6:	edd3 7a00 	vldr	s15, [r3]
 800e8ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e8be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8c2:	ee17 0a90 	vmov	r0, s15
 800e8c6:	f7f9 fd77 	bl	80083b8 <__aeabi_f2d>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	460c      	mov	r4, r1
 800e8ce:	ec44 3b10 	vmov	d0, r3, r4
 800e8d2:	f005 f941 	bl	8013b58 <round>
 800e8d6:	ec54 3b10 	vmov	r3, r4, d0
 800e8da:	4618      	mov	r0, r3
 800e8dc:	4621      	mov	r1, r4
 800e8de:	f7fa f873 	bl	80089c8 <__aeabi_d2iz>
 800e8e2:	4a0a      	ldr	r2, [pc, #40]	; (800e90c <PIDControl+0x254>)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	212c      	movs	r1, #44	; 0x2c
 800e8e8:	fb01 f303 	mul.w	r3, r1, r3
 800e8ec:	4413      	add	r3, r2
 800e8ee:	3324      	adds	r3, #36	; 0x24
 800e8f0:	6018      	str	r0, [r3, #0]
		return Pid[n].out;
 800e8f2:	4a06      	ldr	r2, [pc, #24]	; (800e90c <PIDControl+0x254>)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	212c      	movs	r1, #44	; 0x2c
 800e8f8:	fb01 f303 	mul.w	r3, r1, r3
 800e8fc:	4413      	add	r3, r2
 800e8fe:	3324      	adds	r3, #36	; 0x24
 800e900:	681b      	ldr	r3, [r3, #0]
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 800e902:	4618      	mov	r0, r3
 800e904:	3714      	adds	r7, #20
 800e906:	46bd      	mov	sp, r7
 800e908:	bd90      	pop	{r4, r7, pc}
 800e90a:	bf00      	nop
 800e90c:	20008038 	.word	0x20008038
 800e910:	3a83126f 	.word	0x3a83126f
 800e914:	4479ffff 	.word	0x4479ffff

0800e918 <HAL_GPIO_EXTI_Callback>:
#include <stdio.h>
#include <math.h>
//中間モジュール。
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_12)
 800e918:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800e91c:	d106      	bne.n	800e92c <HAL_GPIO_EXTI_Callback+0x14>
	{
	  gpio_callback_count++;
 800e91e:	4a04      	ldr	r2, [pc, #16]	; (800e930 <HAL_GPIO_EXTI_Callback+0x18>)
 800e920:	6813      	ldr	r3, [r2, #0]
 800e922:	3301      	adds	r3, #1
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 800e924:	2b01      	cmp	r3, #1
 800e926:	bfc8      	it	gt
 800e928:	2300      	movgt	r3, #0
 800e92a:	6013      	str	r3, [r2, #0]
	}
}
 800e92c:	4770      	bx	lr
 800e92e:	bf00      	nop
 800e930:	200081f0 	.word	0x200081f0

0800e934 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int8_t mode)
{
 800e934:	b538      	push	{r3, r4, r5, lr}
 800e936:	4605      	mov	r5, r0
 800e938:	2405      	movs	r4, #5
	for(int i=0; i < 5; i++)
	{
		ChangeLED(mode);
 800e93a:	4628      	mov	r0, r5
 800e93c:	f7ff f9b0 	bl	800dca0 <ChangeLED>
		HAL_Delay(100);
 800e940:	2064      	movs	r0, #100	; 0x64
 800e942:	f000 f961 	bl	800ec08 <HAL_Delay>
		ChangeLED(0);
 800e946:	2000      	movs	r0, #0
 800e948:	f7ff f9aa 	bl	800dca0 <ChangeLED>
		HAL_Delay(100);
 800e94c:	2064      	movs	r0, #100	; 0x64
 800e94e:	f000 f95b 	bl	800ec08 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800e952:	3c01      	subs	r4, #1
 800e954:	d1f1      	bne.n	800e93a <Signal+0x6>
	}
}
 800e956:	bd38      	pop	{r3, r4, r5, pc}

0800e958 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800e958:	b510      	push	{r4, lr}

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e95a:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800e9a4 <BatteryCheck+0x4c>
 800e95e:	eddf 0a12 	vldr	s1, [pc, #72]	; 800e9a8 <BatteryCheck+0x50>
{
 800e962:	ed2d 8b02 	vpush	{d8}
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e966:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800e96a:	f7ff fb2f 	bl	800dfcc <ADCToBatteryVoltage>

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800e96e:	2103      	movs	r1, #3
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e970:	eeb0 8a40 	vmov.f32	s16, s0
	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800e974:	2002      	movs	r0, #2
 800e976:	f7ff fb35 	bl	800dfe4 <IntegerPower>

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800e97a:	eeb0 0a48 	vmov.f32	s0, s16
 800e97e:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800e9ac <BatteryCheck+0x54>
 800e982:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800e9b0 <BatteryCheck+0x58>
 800e986:	f7ff fb3b 	bl	800e000 <GetBatteryLevel>
 800e98a:	4604      	mov	r4, r0

	printf("%d\r\n", battery_level);
 800e98c:	4601      	mov	r1, r0
 800e98e:	4809      	ldr	r0, [pc, #36]	; (800e9b4 <BatteryCheck+0x5c>)
 800e990:	f006 fe6c 	bl	801566c <iprintf>
	Signal( battery_level );
}
 800e994:	ecbd 8b02 	vpop	{d8}
	Signal( battery_level );
 800e998:	b260      	sxtb	r0, r4
}
 800e99a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Signal( battery_level );
 800e99e:	f7ff bfc9 	b.w	800e934 <Signal>
 800e9a2:	bf00      	nop
 800e9a4:	45800000 	.word	0x45800000
 800e9a8:	40533333 	.word	0x40533333
 800e9ac:	41066666 	.word	0x41066666
 800e9b0:	40e66666 	.word	0x40e66666
 800e9b4:	080193e0 	.word	0x080193e0

0800e9b8 <PhotoSwitch>:

//ここ書いたら大事な処理を書き始められる
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。
void PhotoSwitch()
{
 800e9b8:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2);
 800e9ba:	4c10      	ldr	r4, [pc, #64]	; (800e9fc <PhotoSwitch+0x44>)
 800e9bc:	4810      	ldr	r0, [pc, #64]	; (800ea00 <PhotoSwitch+0x48>)
 800e9be:	4621      	mov	r1, r4
 800e9c0:	2202      	movs	r2, #2
 800e9c2:	f000 f987 	bl	800ecd4 <HAL_ADC_Start_DMA>
	//tim8のduty比を下げて電流消費を削減
	HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1);
 800e9c6:	2100      	movs	r1, #0
 800e9c8:	480e      	ldr	r0, [pc, #56]	; (800ea04 <PhotoSwitch+0x4c>)
 800e9ca:	f004 f9a0 	bl	8012d0e <HAL_TIMEx_OCN_Start_IT>

	while(adc2[1] < 200)
 800e9ce:	6861      	ldr	r1, [r4, #4]
 800e9d0:	29c7      	cmp	r1, #199	; 0xc7
 800e9d2:	d806      	bhi.n	800e9e2 <PhotoSwitch+0x2a>
	{
		printf("adc2[1] : %lu\r\n", adc2[1]);
 800e9d4:	4d0c      	ldr	r5, [pc, #48]	; (800ea08 <PhotoSwitch+0x50>)
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	f006 fe48 	bl	801566c <iprintf>
	while(adc2[1] < 200)
 800e9dc:	6861      	ldr	r1, [r4, #4]
 800e9de:	29c7      	cmp	r1, #199	; 0xc7
 800e9e0:	d9f9      	bls.n	800e9d6 <PhotoSwitch+0x1e>

	}
	HAL_ADC_Stop_DMA(&hadc2);
 800e9e2:	4807      	ldr	r0, [pc, #28]	; (800ea00 <PhotoSwitch+0x48>)
 800e9e4:	f000 fa68 	bl	800eeb8 <HAL_ADC_Stop_DMA>
	HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1);
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	4806      	ldr	r0, [pc, #24]	; (800ea04 <PhotoSwitch+0x4c>)
 800e9ec:	f004 f9e4 	bl	8012db8 <HAL_TIMEx_OCN_Stop_IT>
	Signal( 7 );
 800e9f0:	2007      	movs	r0, #7
}
 800e9f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Signal( 7 );
 800e9f6:	f7ff bf9d 	b.w	800e934 <Signal>
 800e9fa:	bf00      	nop
 800e9fc:	20007fdc 	.word	0x20007fdc
 800ea00:	20008c80 	.word	0x20008c80
 800ea04:	20008c00 	.word	0x20008c00
 800ea08:	0801940c 	.word	0x0801940c

0800ea0c <ModeSelect>:

void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800ea0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea10:	4606      	mov	r6, r0
 800ea12:	ed2d 8b04 	vpush	{d8-d9}
 800ea16:	460f      	mov	r7, r1
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ

	//エンコーダ開始。初期値セット込み
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ea18:	4828      	ldr	r0, [pc, #160]	; (800eabc <ModeSelect+0xb0>)
	*pMode=min;

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	TIM3->CNT = INITIAL_PULSE;
	gpio_callback_count = 0;
 800ea1a:	4c29      	ldr	r4, [pc, #164]	; (800eac0 <ModeSelect+0xb4>)
	{
		//printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800ea1c:	ed9f 9a29 	vldr	s18, [pc, #164]	; 800eac4 <ModeSelect+0xb8>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800ea20:	eddf 8a29 	vldr	s17, [pc, #164]	; 800eac8 <ModeSelect+0xbc>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ea24:	2100      	movs	r1, #0
{
 800ea26:	4690      	mov	r8, r2
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ea28:	f003 fad6 	bl	8011fd8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 800ea2c:	2104      	movs	r1, #4
 800ea2e:	4823      	ldr	r0, [pc, #140]	; (800eabc <ModeSelect+0xb0>)
 800ea30:	f003 fad2 	bl	8011fd8 <HAL_TIM_Encoder_Start>
	TIM3->CNT = INITIAL_PULSE;
 800ea34:	4a25      	ldr	r2, [pc, #148]	; (800eacc <ModeSelect+0xc0>)
	*pMode=min;
 800ea36:	f888 6000 	strb.w	r6, [r8]
	TIM3->CNT = INITIAL_PULSE;
 800ea3a:	f247 552f 	movw	r5, #29999	; 0x752f
	gpio_callback_count = 0;
 800ea3e:	2300      	movs	r3, #0
	TIM3->CNT = INITIAL_PULSE;
 800ea40:	6255      	str	r5, [r2, #36]	; 0x24
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800ea42:	4691      	mov	r9, r2
	gpio_callback_count = 0;
 800ea44:	6023      	str	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800ea46:	b9eb      	cbnz	r3, 800ea84 <ModeSelect+0x78>
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800ea48:	ed99 8a09 	vldr	s16, [r9, #36]	; 0x24
		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800ea4c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800ea50:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800ea54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea58:	db0c      	blt.n	800ea74 <ModeSelect+0x68>
		  	  *pMode += 1;
 800ea5a:	f898 0000 	ldrb.w	r0, [r8]
 800ea5e:	3001      	adds	r0, #1
 800ea60:	b240      	sxtb	r0, r0
		  		  *pMode = min;
 800ea62:	42b8      	cmp	r0, r7
 800ea64:	bfc8      	it	gt
 800ea66:	4630      	movgt	r0, r6
 800ea68:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800ea6c:	f7ff f918 	bl	800dca0 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800ea70:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800ea74:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ea78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea7c:	d910      	bls.n	800eaa0 <ModeSelect+0x94>
 800ea7e:	6823      	ldr	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d0e1      	beq.n	800ea48 <ModeSelect+0x3c>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;
		  }
	}
	gpio_callback_count = 0;
 800ea84:	2300      	movs	r3, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800ea86:	4619      	mov	r1, r3
 800ea88:	480c      	ldr	r0, [pc, #48]	; (800eabc <ModeSelect+0xb0>)
	gpio_callback_count = 0;
 800ea8a:	6023      	str	r3, [r4, #0]
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800ea8c:	f003 fadb 	bl	8012046 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
}
 800ea90:	ecbd 8b04 	vpop	{d8-d9}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800ea94:	2104      	movs	r1, #4
 800ea96:	4809      	ldr	r0, [pc, #36]	; (800eabc <ModeSelect+0xb0>)
}
 800ea98:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800ea9c:	f003 bad3 	b.w	8012046 <HAL_TIM_Encoder_Stop>
		  	  *pMode -= 1;
 800eaa0:	f898 0000 	ldrb.w	r0, [r8]
 800eaa4:	3801      	subs	r0, #1
 800eaa6:	b240      	sxtb	r0, r0
 800eaa8:	42b0      	cmp	r0, r6
 800eaaa:	bfb8      	it	lt
 800eaac:	4638      	movlt	r0, r7
 800eaae:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800eab2:	f7ff f8f5 	bl	800dca0 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800eab6:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
 800eaba:	e7e0      	b.n	800ea7e <ModeSelect+0x72>
 800eabc:	20008cc8 	.word	0x20008cc8
 800eac0:	200081f0 	.word	0x200081f0
 800eac4:	47352f00 	.word	0x47352f00
 800eac8:	4654bc00 	.word	0x4654bc00
 800eacc:	40000400 	.word	0x40000400

0800ead0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ead0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800eb08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ead4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ead6:	e003      	b.n	800eae0 <LoopCopyDataInit>

0800ead8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ead8:	4b0c      	ldr	r3, [pc, #48]	; (800eb0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800eada:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800eadc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800eade:	3104      	adds	r1, #4

0800eae0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800eae0:	480b      	ldr	r0, [pc, #44]	; (800eb10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800eae2:	4b0c      	ldr	r3, [pc, #48]	; (800eb14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800eae4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800eae6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800eae8:	d3f6      	bcc.n	800ead8 <CopyDataInit>
  ldr  r2, =_sbss
 800eaea:	4a0b      	ldr	r2, [pc, #44]	; (800eb18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800eaec:	e002      	b.n	800eaf4 <LoopFillZerobss>

0800eaee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800eaee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800eaf0:	f842 3b04 	str.w	r3, [r2], #4

0800eaf4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800eaf4:	4b09      	ldr	r3, [pc, #36]	; (800eb1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800eaf6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800eaf8:	d3f9      	bcc.n	800eaee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800eafa:	f7fe fb2b 	bl	800d154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800eafe:	f005 fa23 	bl	8013f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800eb02:	f7fd fda9 	bl	800c658 <main>
  bx  lr    
 800eb06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800eb08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800eb0c:	08019768 	.word	0x08019768
  ldr  r0, =_sdata
 800eb10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800eb14:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 800eb18:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 800eb1c:	20008f24 	.word	0x20008f24

0800eb20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800eb20:	e7fe      	b.n	800eb20 <ADC_IRQHandler>
	...

0800eb24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800eb28:	4b0e      	ldr	r3, [pc, #56]	; (800eb64 <HAL_Init+0x40>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	4a0d      	ldr	r2, [pc, #52]	; (800eb64 <HAL_Init+0x40>)
 800eb2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eb32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800eb34:	4b0b      	ldr	r3, [pc, #44]	; (800eb64 <HAL_Init+0x40>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a0a      	ldr	r2, [pc, #40]	; (800eb64 <HAL_Init+0x40>)
 800eb3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800eb3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800eb40:	4b08      	ldr	r3, [pc, #32]	; (800eb64 <HAL_Init+0x40>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	4a07      	ldr	r2, [pc, #28]	; (800eb64 <HAL_Init+0x40>)
 800eb46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800eb4c:	2003      	movs	r0, #3
 800eb4e:	f000 fd8b 	bl	800f668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800eb52:	2000      	movs	r0, #0
 800eb54:	f000 f808 	bl	800eb68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800eb58:	f7fd ff60 	bl	800ca1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	40023c00 	.word	0x40023c00

0800eb68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800eb70:	4b12      	ldr	r3, [pc, #72]	; (800ebbc <HAL_InitTick+0x54>)
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	4b12      	ldr	r3, [pc, #72]	; (800ebc0 <HAL_InitTick+0x58>)
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	4619      	mov	r1, r3
 800eb7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eb7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb82:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb86:	4618      	mov	r0, r3
 800eb88:	f000 fda3 	bl	800f6d2 <HAL_SYSTICK_Config>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d001      	beq.n	800eb96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800eb92:	2301      	movs	r3, #1
 800eb94:	e00e      	b.n	800ebb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2b0f      	cmp	r3, #15
 800eb9a:	d80a      	bhi.n	800ebb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	6879      	ldr	r1, [r7, #4]
 800eba0:	f04f 30ff 	mov.w	r0, #4294967295
 800eba4:	f000 fd6b 	bl	800f67e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800eba8:	4a06      	ldr	r2, [pc, #24]	; (800ebc4 <HAL_InitTick+0x5c>)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	e000      	b.n	800ebb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ebb2:	2301      	movs	r3, #1
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3708      	adds	r7, #8
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	20000024 	.word	0x20000024
 800ebc0:	20000034 	.word	0x20000034
 800ebc4:	20000030 	.word	0x20000030

0800ebc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ebcc:	4b06      	ldr	r3, [pc, #24]	; (800ebe8 <HAL_IncTick+0x20>)
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	4b06      	ldr	r3, [pc, #24]	; (800ebec <HAL_IncTick+0x24>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	4413      	add	r3, r2
 800ebd8:	4a04      	ldr	r2, [pc, #16]	; (800ebec <HAL_IncTick+0x24>)
 800ebda:	6013      	str	r3, [r2, #0]
}
 800ebdc:	bf00      	nop
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr
 800ebe6:	bf00      	nop
 800ebe8:	20000034 	.word	0x20000034
 800ebec:	20008efc 	.word	0x20008efc

0800ebf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	af00      	add	r7, sp, #0
  return uwTick;
 800ebf4:	4b03      	ldr	r3, [pc, #12]	; (800ec04 <HAL_GetTick+0x14>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec00:	4770      	bx	lr
 800ec02:	bf00      	nop
 800ec04:	20008efc 	.word	0x20008efc

0800ec08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ec10:	f7ff ffee 	bl	800ebf0 <HAL_GetTick>
 800ec14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec20:	d005      	beq.n	800ec2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ec22:	4b09      	ldr	r3, [pc, #36]	; (800ec48 <HAL_Delay+0x40>)
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	461a      	mov	r2, r3
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	4413      	add	r3, r2
 800ec2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ec2e:	bf00      	nop
 800ec30:	f7ff ffde 	bl	800ebf0 <HAL_GetTick>
 800ec34:	4602      	mov	r2, r0
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	1ad3      	subs	r3, r2, r3
 800ec3a:	68fa      	ldr	r2, [r7, #12]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d8f7      	bhi.n	800ec30 <HAL_Delay+0x28>
  {
  }
}
 800ec40:	bf00      	nop
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	20000034 	.word	0x20000034

0800ec4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ec54:	2300      	movs	r3, #0
 800ec56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d101      	bne.n	800ec62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800ec5e:	2301      	movs	r3, #1
 800ec60:	e033      	b.n	800ecca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d109      	bne.n	800ec7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f7fd fefe 	bl	800ca6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec82:	f003 0310 	and.w	r3, r3, #16
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d118      	bne.n	800ecbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ec92:	f023 0302 	bic.w	r3, r3, #2
 800ec96:	f043 0202 	orr.w	r2, r3, #2
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f000 fa94 	bl	800f1cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecae:	f023 0303 	bic.w	r3, r3, #3
 800ecb2:	f043 0201 	orr.w	r2, r3, #1
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	641a      	str	r2, [r3, #64]	; 0x40
 800ecba:	e001      	b.n	800ecc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800ecc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3710      	adds	r7, #16
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
	...

0800ecd4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b086      	sub	sp, #24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	60b9      	str	r1, [r7, #8]
 800ecde:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800ece0:	2300      	movs	r3, #0
 800ece2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d101      	bne.n	800ecf2 <HAL_ADC_Start_DMA+0x1e>
 800ecee:	2302      	movs	r3, #2
 800ecf0:	e0cc      	b.n	800ee8c <HAL_ADC_Start_DMA+0x1b8>
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	689b      	ldr	r3, [r3, #8]
 800ed00:	f003 0301 	and.w	r3, r3, #1
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d018      	beq.n	800ed3a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	689a      	ldr	r2, [r3, #8]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f042 0201 	orr.w	r2, r2, #1
 800ed16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800ed18:	4b5e      	ldr	r3, [pc, #376]	; (800ee94 <HAL_ADC_Start_DMA+0x1c0>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4a5e      	ldr	r2, [pc, #376]	; (800ee98 <HAL_ADC_Start_DMA+0x1c4>)
 800ed1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ed22:	0c9a      	lsrs	r2, r3, #18
 800ed24:	4613      	mov	r3, r2
 800ed26:	005b      	lsls	r3, r3, #1
 800ed28:	4413      	add	r3, r2
 800ed2a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800ed2c:	e002      	b.n	800ed34 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	3b01      	subs	r3, #1
 800ed32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d1f9      	bne.n	800ed2e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	689b      	ldr	r3, [r3, #8]
 800ed40:	f003 0301 	and.w	r3, r3, #1
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	f040 80a0 	bne.w	800ee8a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800ed52:	f023 0301 	bic.w	r3, r3, #1
 800ed56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d007      	beq.n	800ed7c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ed74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ed84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed88:	d106      	bne.n	800ed98 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed8e:	f023 0206 	bic.w	r2, r3, #6
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	645a      	str	r2, [r3, #68]	; 0x44
 800ed96:	e002      	b.n	800ed9e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2200      	movs	r2, #0
 800eda2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800eda6:	4b3d      	ldr	r3, [pc, #244]	; (800ee9c <HAL_ADC_Start_DMA+0x1c8>)
 800eda8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edae:	4a3c      	ldr	r2, [pc, #240]	; (800eea0 <HAL_ADC_Start_DMA+0x1cc>)
 800edb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edb6:	4a3b      	ldr	r2, [pc, #236]	; (800eea4 <HAL_ADC_Start_DMA+0x1d0>)
 800edb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edbe:	4a3a      	ldr	r2, [pc, #232]	; (800eea8 <HAL_ADC_Start_DMA+0x1d4>)
 800edc0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800edca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	685a      	ldr	r2, [r3, #4]
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800edda:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	689a      	ldr	r2, [r3, #8]
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800edea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	334c      	adds	r3, #76	; 0x4c
 800edf6:	4619      	mov	r1, r3
 800edf8:	68ba      	ldr	r2, [r7, #8]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f000 fd24 	bl	800f848 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	f003 031f 	and.w	r3, r3, #31
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d12a      	bne.n	800ee62 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4a26      	ldr	r2, [pc, #152]	; (800eeac <HAL_ADC_Start_DMA+0x1d8>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d015      	beq.n	800ee42 <HAL_ADC_Start_DMA+0x16e>
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	4a25      	ldr	r2, [pc, #148]	; (800eeb0 <HAL_ADC_Start_DMA+0x1dc>)
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	d105      	bne.n	800ee2c <HAL_ADC_Start_DMA+0x158>
 800ee20:	4b1e      	ldr	r3, [pc, #120]	; (800ee9c <HAL_ADC_Start_DMA+0x1c8>)
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	f003 031f 	and.w	r3, r3, #31
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d00a      	beq.n	800ee42 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4a20      	ldr	r2, [pc, #128]	; (800eeb4 <HAL_ADC_Start_DMA+0x1e0>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d129      	bne.n	800ee8a <HAL_ADC_Start_DMA+0x1b6>
 800ee36:	4b19      	ldr	r3, [pc, #100]	; (800ee9c <HAL_ADC_Start_DMA+0x1c8>)
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	f003 031f 	and.w	r3, r3, #31
 800ee3e:	2b0f      	cmp	r3, #15
 800ee40:	d823      	bhi.n	800ee8a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	689b      	ldr	r3, [r3, #8]
 800ee48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d11c      	bne.n	800ee8a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	689a      	ldr	r2, [r3, #8]
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ee5e:	609a      	str	r2, [r3, #8]
 800ee60:	e013      	b.n	800ee8a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4a11      	ldr	r2, [pc, #68]	; (800eeac <HAL_ADC_Start_DMA+0x1d8>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d10e      	bne.n	800ee8a <HAL_ADC_Start_DMA+0x1b6>
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	689b      	ldr	r3, [r3, #8]
 800ee72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d107      	bne.n	800ee8a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	689a      	ldr	r2, [r3, #8]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ee88:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800ee8a:	2300      	movs	r3, #0
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3718      	adds	r7, #24
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	20000024 	.word	0x20000024
 800ee98:	431bde83 	.word	0x431bde83
 800ee9c:	40012300 	.word	0x40012300
 800eea0:	0800f3c5 	.word	0x0800f3c5
 800eea4:	0800f47f 	.word	0x0800f47f
 800eea8:	0800f49b 	.word	0x0800f49b
 800eeac:	40012000 	.word	0x40012000
 800eeb0:	40012100 	.word	0x40012100
 800eeb4:	40012200 	.word	0x40012200

0800eeb8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800eec0:	2300      	movs	r3, #0
 800eec2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eeca:	2b01      	cmp	r3, #1
 800eecc:	d101      	bne.n	800eed2 <HAL_ADC_Stop_DMA+0x1a>
 800eece:	2302      	movs	r3, #2
 800eed0:	e038      	b.n	800ef44 <HAL_ADC_Stop_DMA+0x8c>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2201      	movs	r2, #1
 800eed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	689a      	ldr	r2, [r3, #8]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f022 0201 	bic.w	r2, r2, #1
 800eee8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	f003 0301 	and.w	r3, r3, #1
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d120      	bne.n	800ef3a <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	689a      	ldr	r2, [r3, #8]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ef06:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f000 fcf3 	bl	800f8f8 <HAL_DMA_Abort>
 800ef12:	4603      	mov	r3, r0
 800ef14:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	685a      	ldr	r2, [r3, #4]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800ef24:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ef2e:	f023 0301 	bic.w	r3, r3, #1
 800ef32:	f043 0201 	orr.w	r2, r3, #1
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800ef42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3710      	adds	r7, #16
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b083      	sub	sp, #12
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800ef54:	bf00      	nop
 800ef56:	370c      	adds	r7, #12
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr

0800ef60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800ef68:	bf00      	nop
 800ef6a:	370c      	adds	r7, #12
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800ef7c:	bf00      	nop
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b085      	sub	sp, #20
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ef92:	2300      	movs	r3, #0
 800ef94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	d101      	bne.n	800efa4 <HAL_ADC_ConfigChannel+0x1c>
 800efa0:	2302      	movs	r3, #2
 800efa2:	e105      	b.n	800f1b0 <HAL_ADC_ConfigChannel+0x228>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2201      	movs	r2, #1
 800efa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	2b09      	cmp	r3, #9
 800efb2:	d925      	bls.n	800f000 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	68d9      	ldr	r1, [r3, #12]
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	461a      	mov	r2, r3
 800efc2:	4613      	mov	r3, r2
 800efc4:	005b      	lsls	r3, r3, #1
 800efc6:	4413      	add	r3, r2
 800efc8:	3b1e      	subs	r3, #30
 800efca:	2207      	movs	r2, #7
 800efcc:	fa02 f303 	lsl.w	r3, r2, r3
 800efd0:	43da      	mvns	r2, r3
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	400a      	ands	r2, r1
 800efd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	68d9      	ldr	r1, [r3, #12]
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	689a      	ldr	r2, [r3, #8]
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	b29b      	uxth	r3, r3
 800efea:	4618      	mov	r0, r3
 800efec:	4603      	mov	r3, r0
 800efee:	005b      	lsls	r3, r3, #1
 800eff0:	4403      	add	r3, r0
 800eff2:	3b1e      	subs	r3, #30
 800eff4:	409a      	lsls	r2, r3
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	430a      	orrs	r2, r1
 800effc:	60da      	str	r2, [r3, #12]
 800effe:	e022      	b.n	800f046 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	6919      	ldr	r1, [r3, #16]
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	461a      	mov	r2, r3
 800f00e:	4613      	mov	r3, r2
 800f010:	005b      	lsls	r3, r3, #1
 800f012:	4413      	add	r3, r2
 800f014:	2207      	movs	r2, #7
 800f016:	fa02 f303 	lsl.w	r3, r2, r3
 800f01a:	43da      	mvns	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	400a      	ands	r2, r1
 800f022:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	6919      	ldr	r1, [r3, #16]
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	689a      	ldr	r2, [r3, #8]
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	b29b      	uxth	r3, r3
 800f034:	4618      	mov	r0, r3
 800f036:	4603      	mov	r3, r0
 800f038:	005b      	lsls	r3, r3, #1
 800f03a:	4403      	add	r3, r0
 800f03c:	409a      	lsls	r2, r3
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	430a      	orrs	r2, r1
 800f044:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	2b06      	cmp	r3, #6
 800f04c:	d824      	bhi.n	800f098 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	685a      	ldr	r2, [r3, #4]
 800f058:	4613      	mov	r3, r2
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	4413      	add	r3, r2
 800f05e:	3b05      	subs	r3, #5
 800f060:	221f      	movs	r2, #31
 800f062:	fa02 f303 	lsl.w	r3, r2, r3
 800f066:	43da      	mvns	r2, r3
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	400a      	ands	r2, r1
 800f06e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	4618      	mov	r0, r3
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	685a      	ldr	r2, [r3, #4]
 800f082:	4613      	mov	r3, r2
 800f084:	009b      	lsls	r3, r3, #2
 800f086:	4413      	add	r3, r2
 800f088:	3b05      	subs	r3, #5
 800f08a:	fa00 f203 	lsl.w	r2, r0, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	430a      	orrs	r2, r1
 800f094:	635a      	str	r2, [r3, #52]	; 0x34
 800f096:	e04c      	b.n	800f132 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	2b0c      	cmp	r3, #12
 800f09e:	d824      	bhi.n	800f0ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	685a      	ldr	r2, [r3, #4]
 800f0aa:	4613      	mov	r3, r2
 800f0ac:	009b      	lsls	r3, r3, #2
 800f0ae:	4413      	add	r3, r2
 800f0b0:	3b23      	subs	r3, #35	; 0x23
 800f0b2:	221f      	movs	r2, #31
 800f0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800f0b8:	43da      	mvns	r2, r3
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	400a      	ands	r2, r1
 800f0c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	685a      	ldr	r2, [r3, #4]
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	009b      	lsls	r3, r3, #2
 800f0d8:	4413      	add	r3, r2
 800f0da:	3b23      	subs	r3, #35	; 0x23
 800f0dc:	fa00 f203 	lsl.w	r2, r0, r3
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	430a      	orrs	r2, r1
 800f0e6:	631a      	str	r2, [r3, #48]	; 0x30
 800f0e8:	e023      	b.n	800f132 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	685a      	ldr	r2, [r3, #4]
 800f0f4:	4613      	mov	r3, r2
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	4413      	add	r3, r2
 800f0fa:	3b41      	subs	r3, #65	; 0x41
 800f0fc:	221f      	movs	r2, #31
 800f0fe:	fa02 f303 	lsl.w	r3, r2, r3
 800f102:	43da      	mvns	r2, r3
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	400a      	ands	r2, r1
 800f10a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	b29b      	uxth	r3, r3
 800f118:	4618      	mov	r0, r3
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	685a      	ldr	r2, [r3, #4]
 800f11e:	4613      	mov	r3, r2
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	4413      	add	r3, r2
 800f124:	3b41      	subs	r3, #65	; 0x41
 800f126:	fa00 f203 	lsl.w	r2, r0, r3
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	430a      	orrs	r2, r1
 800f130:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800f132:	4b22      	ldr	r3, [pc, #136]	; (800f1bc <HAL_ADC_ConfigChannel+0x234>)
 800f134:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4a21      	ldr	r2, [pc, #132]	; (800f1c0 <HAL_ADC_ConfigChannel+0x238>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d109      	bne.n	800f154 <HAL_ADC_ConfigChannel+0x1cc>
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	2b12      	cmp	r3, #18
 800f146:	d105      	bne.n	800f154 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4a19      	ldr	r2, [pc, #100]	; (800f1c0 <HAL_ADC_ConfigChannel+0x238>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d123      	bne.n	800f1a6 <HAL_ADC_ConfigChannel+0x21e>
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2b10      	cmp	r3, #16
 800f164:	d003      	beq.n	800f16e <HAL_ADC_ConfigChannel+0x1e6>
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2b11      	cmp	r3, #17
 800f16c:	d11b      	bne.n	800f1a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	2b10      	cmp	r3, #16
 800f180:	d111      	bne.n	800f1a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800f182:	4b10      	ldr	r3, [pc, #64]	; (800f1c4 <HAL_ADC_ConfigChannel+0x23c>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	4a10      	ldr	r2, [pc, #64]	; (800f1c8 <HAL_ADC_ConfigChannel+0x240>)
 800f188:	fba2 2303 	umull	r2, r3, r2, r3
 800f18c:	0c9a      	lsrs	r2, r3, #18
 800f18e:	4613      	mov	r3, r2
 800f190:	009b      	lsls	r3, r3, #2
 800f192:	4413      	add	r3, r2
 800f194:	005b      	lsls	r3, r3, #1
 800f196:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800f198:	e002      	b.n	800f1a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	3b01      	subs	r3, #1
 800f19e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d1f9      	bne.n	800f19a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800f1ae:	2300      	movs	r3, #0
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3714      	adds	r7, #20
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr
 800f1bc:	40012300 	.word	0x40012300
 800f1c0:	40012000 	.word	0x40012000
 800f1c4:	20000024 	.word	0x20000024
 800f1c8:	431bde83 	.word	0x431bde83

0800f1cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b085      	sub	sp, #20
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800f1d4:	4b79      	ldr	r3, [pc, #484]	; (800f3bc <ADC_Init+0x1f0>)
 800f1d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	685a      	ldr	r2, [r3, #4]
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	685b      	ldr	r3, [r3, #4]
 800f1ec:	431a      	orrs	r2, r3
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	685a      	ldr	r2, [r3, #4]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f200:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	6859      	ldr	r1, [r3, #4]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	691b      	ldr	r3, [r3, #16]
 800f20c:	021a      	lsls	r2, r3, #8
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	430a      	orrs	r2, r1
 800f214:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	685a      	ldr	r2, [r3, #4]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800f224:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	6859      	ldr	r1, [r3, #4]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	689a      	ldr	r2, [r3, #8]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	430a      	orrs	r2, r1
 800f236:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	689a      	ldr	r2, [r3, #8]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f246:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	6899      	ldr	r1, [r3, #8]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	68da      	ldr	r2, [r3, #12]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	430a      	orrs	r2, r1
 800f258:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f25e:	4a58      	ldr	r2, [pc, #352]	; (800f3c0 <ADC_Init+0x1f4>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d022      	beq.n	800f2aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	689a      	ldr	r2, [r3, #8]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f272:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	6899      	ldr	r1, [r3, #8]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	430a      	orrs	r2, r1
 800f284:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	689a      	ldr	r2, [r3, #8]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f294:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	6899      	ldr	r1, [r3, #8]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	430a      	orrs	r2, r1
 800f2a6:	609a      	str	r2, [r3, #8]
 800f2a8:	e00f      	b.n	800f2ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	689a      	ldr	r2, [r3, #8]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f2b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	689a      	ldr	r2, [r3, #8]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f2c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	689a      	ldr	r2, [r3, #8]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f022 0202 	bic.w	r2, r2, #2
 800f2d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	6899      	ldr	r1, [r3, #8]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	7e1b      	ldrb	r3, [r3, #24]
 800f2e4:	005a      	lsls	r2, r3, #1
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	430a      	orrs	r2, r1
 800f2ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d01b      	beq.n	800f330 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	685a      	ldr	r2, [r3, #4]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f306:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	685a      	ldr	r2, [r3, #4]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800f316:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	6859      	ldr	r1, [r3, #4]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f322:	3b01      	subs	r3, #1
 800f324:	035a      	lsls	r2, r3, #13
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	430a      	orrs	r2, r1
 800f32c:	605a      	str	r2, [r3, #4]
 800f32e:	e007      	b.n	800f340 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	685a      	ldr	r2, [r3, #4]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f33e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800f34e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	69db      	ldr	r3, [r3, #28]
 800f35a:	3b01      	subs	r3, #1
 800f35c:	051a      	lsls	r2, r3, #20
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	430a      	orrs	r2, r1
 800f364:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	689a      	ldr	r2, [r3, #8]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f374:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	6899      	ldr	r1, [r3, #8]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f382:	025a      	lsls	r2, r3, #9
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	430a      	orrs	r2, r1
 800f38a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	689a      	ldr	r2, [r3, #8]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f39a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	6899      	ldr	r1, [r3, #8]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	695b      	ldr	r3, [r3, #20]
 800f3a6:	029a      	lsls	r2, r3, #10
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	430a      	orrs	r2, r1
 800f3ae:	609a      	str	r2, [r3, #8]
}
 800f3b0:	bf00      	nop
 800f3b2:	3714      	adds	r7, #20
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr
 800f3bc:	40012300 	.word	0x40012300
 800f3c0:	0f000001 	.word	0x0f000001

0800f3c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d13c      	bne.n	800f458 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	689b      	ldr	r3, [r3, #8]
 800f3f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d12b      	bne.n	800f450 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d127      	bne.n	800f450 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f406:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d006      	beq.n	800f41c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	689b      	ldr	r3, [r3, #8]
 800f414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d119      	bne.n	800f450 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	685a      	ldr	r2, [r3, #4]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f022 0220 	bic.w	r2, r2, #32
 800f42a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f430:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f43c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f440:	2b00      	cmp	r3, #0
 800f442:	d105      	bne.n	800f450 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f448:	f043 0201 	orr.w	r2, r3, #1
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800f450:	68f8      	ldr	r0, [r7, #12]
 800f452:	f7ff fd7b 	bl	800ef4c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800f456:	e00e      	b.n	800f476 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f45c:	f003 0310 	and.w	r3, r3, #16
 800f460:	2b00      	cmp	r3, #0
 800f462:	d003      	beq.n	800f46c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800f464:	68f8      	ldr	r0, [r7, #12]
 800f466:	f7ff fd85 	bl	800ef74 <HAL_ADC_ErrorCallback>
}
 800f46a:	e004      	b.n	800f476 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	4798      	blx	r3
}
 800f476:	bf00      	nop
 800f478:	3710      	adds	r7, #16
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}

0800f47e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800f47e:	b580      	push	{r7, lr}
 800f480:	b084      	sub	sp, #16
 800f482:	af00      	add	r7, sp, #0
 800f484:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f48a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	f7ff fd67 	bl	800ef60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f492:	bf00      	nop
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}

0800f49a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800f49a:	b580      	push	{r7, lr}
 800f49c:	b084      	sub	sp, #16
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4a6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	2240      	movs	r2, #64	; 0x40
 800f4ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4b2:	f043 0204 	orr.w	r2, r3, #4
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800f4ba:	68f8      	ldr	r0, [r7, #12]
 800f4bc:	f7ff fd5a 	bl	800ef74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f4c0:	bf00      	nop
 800f4c2:	3710      	adds	r7, #16
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b085      	sub	sp, #20
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f003 0307 	and.w	r3, r3, #7
 800f4d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f4d8:	4b0c      	ldr	r3, [pc, #48]	; (800f50c <__NVIC_SetPriorityGrouping+0x44>)
 800f4da:	68db      	ldr	r3, [r3, #12]
 800f4dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f4e4:	4013      	ands	r3, r2
 800f4e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f4f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f4f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f4fa:	4a04      	ldr	r2, [pc, #16]	; (800f50c <__NVIC_SetPriorityGrouping+0x44>)
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	60d3      	str	r3, [r2, #12]
}
 800f500:	bf00      	nop
 800f502:	3714      	adds	r7, #20
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr
 800f50c:	e000ed00 	.word	0xe000ed00

0800f510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f510:	b480      	push	{r7}
 800f512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f514:	4b04      	ldr	r3, [pc, #16]	; (800f528 <__NVIC_GetPriorityGrouping+0x18>)
 800f516:	68db      	ldr	r3, [r3, #12]
 800f518:	0a1b      	lsrs	r3, r3, #8
 800f51a:	f003 0307 	and.w	r3, r3, #7
}
 800f51e:	4618      	mov	r0, r3
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr
 800f528:	e000ed00 	.word	0xe000ed00

0800f52c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	4603      	mov	r3, r0
 800f534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	db0b      	blt.n	800f556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f53e:	79fb      	ldrb	r3, [r7, #7]
 800f540:	f003 021f 	and.w	r2, r3, #31
 800f544:	4907      	ldr	r1, [pc, #28]	; (800f564 <__NVIC_EnableIRQ+0x38>)
 800f546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f54a:	095b      	lsrs	r3, r3, #5
 800f54c:	2001      	movs	r0, #1
 800f54e:	fa00 f202 	lsl.w	r2, r0, r2
 800f552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f556:	bf00      	nop
 800f558:	370c      	adds	r7, #12
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	e000e100 	.word	0xe000e100

0800f568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f568:	b480      	push	{r7}
 800f56a:	b083      	sub	sp, #12
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	4603      	mov	r3, r0
 800f570:	6039      	str	r1, [r7, #0]
 800f572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	db0a      	blt.n	800f592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	b2da      	uxtb	r2, r3
 800f580:	490c      	ldr	r1, [pc, #48]	; (800f5b4 <__NVIC_SetPriority+0x4c>)
 800f582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f586:	0112      	lsls	r2, r2, #4
 800f588:	b2d2      	uxtb	r2, r2
 800f58a:	440b      	add	r3, r1
 800f58c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f590:	e00a      	b.n	800f5a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	b2da      	uxtb	r2, r3
 800f596:	4908      	ldr	r1, [pc, #32]	; (800f5b8 <__NVIC_SetPriority+0x50>)
 800f598:	79fb      	ldrb	r3, [r7, #7]
 800f59a:	f003 030f 	and.w	r3, r3, #15
 800f59e:	3b04      	subs	r3, #4
 800f5a0:	0112      	lsls	r2, r2, #4
 800f5a2:	b2d2      	uxtb	r2, r2
 800f5a4:	440b      	add	r3, r1
 800f5a6:	761a      	strb	r2, [r3, #24]
}
 800f5a8:	bf00      	nop
 800f5aa:	370c      	adds	r7, #12
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr
 800f5b4:	e000e100 	.word	0xe000e100
 800f5b8:	e000ed00 	.word	0xe000ed00

0800f5bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b089      	sub	sp, #36	; 0x24
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	60f8      	str	r0, [r7, #12]
 800f5c4:	60b9      	str	r1, [r7, #8]
 800f5c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	f003 0307 	and.w	r3, r3, #7
 800f5ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f5d0:	69fb      	ldr	r3, [r7, #28]
 800f5d2:	f1c3 0307 	rsb	r3, r3, #7
 800f5d6:	2b04      	cmp	r3, #4
 800f5d8:	bf28      	it	cs
 800f5da:	2304      	movcs	r3, #4
 800f5dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	3304      	adds	r3, #4
 800f5e2:	2b06      	cmp	r3, #6
 800f5e4:	d902      	bls.n	800f5ec <NVIC_EncodePriority+0x30>
 800f5e6:	69fb      	ldr	r3, [r7, #28]
 800f5e8:	3b03      	subs	r3, #3
 800f5ea:	e000      	b.n	800f5ee <NVIC_EncodePriority+0x32>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f5f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f5f4:	69bb      	ldr	r3, [r7, #24]
 800f5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800f5fa:	43da      	mvns	r2, r3
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	401a      	ands	r2, r3
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f604:	f04f 31ff 	mov.w	r1, #4294967295
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	fa01 f303 	lsl.w	r3, r1, r3
 800f60e:	43d9      	mvns	r1, r3
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f614:	4313      	orrs	r3, r2
         );
}
 800f616:	4618      	mov	r0, r3
 800f618:	3724      	adds	r7, #36	; 0x24
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr
	...

0800f624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b082      	sub	sp, #8
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	3b01      	subs	r3, #1
 800f630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f634:	d301      	bcc.n	800f63a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f636:	2301      	movs	r3, #1
 800f638:	e00f      	b.n	800f65a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f63a:	4a0a      	ldr	r2, [pc, #40]	; (800f664 <SysTick_Config+0x40>)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	3b01      	subs	r3, #1
 800f640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f642:	210f      	movs	r1, #15
 800f644:	f04f 30ff 	mov.w	r0, #4294967295
 800f648:	f7ff ff8e 	bl	800f568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f64c:	4b05      	ldr	r3, [pc, #20]	; (800f664 <SysTick_Config+0x40>)
 800f64e:	2200      	movs	r2, #0
 800f650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f652:	4b04      	ldr	r3, [pc, #16]	; (800f664 <SysTick_Config+0x40>)
 800f654:	2207      	movs	r2, #7
 800f656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f658:	2300      	movs	r3, #0
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	e000e010 	.word	0xe000e010

0800f668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f7ff ff29 	bl	800f4c8 <__NVIC_SetPriorityGrouping>
}
 800f676:	bf00      	nop
 800f678:	3708      	adds	r7, #8
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}

0800f67e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f67e:	b580      	push	{r7, lr}
 800f680:	b086      	sub	sp, #24
 800f682:	af00      	add	r7, sp, #0
 800f684:	4603      	mov	r3, r0
 800f686:	60b9      	str	r1, [r7, #8]
 800f688:	607a      	str	r2, [r7, #4]
 800f68a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f68c:	2300      	movs	r3, #0
 800f68e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f690:	f7ff ff3e 	bl	800f510 <__NVIC_GetPriorityGrouping>
 800f694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	68b9      	ldr	r1, [r7, #8]
 800f69a:	6978      	ldr	r0, [r7, #20]
 800f69c:	f7ff ff8e 	bl	800f5bc <NVIC_EncodePriority>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6a6:	4611      	mov	r1, r2
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7ff ff5d 	bl	800f568 <__NVIC_SetPriority>
}
 800f6ae:	bf00      	nop
 800f6b0:	3718      	adds	r7, #24
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}

0800f6b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f6b6:	b580      	push	{r7, lr}
 800f6b8:	b082      	sub	sp, #8
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	4603      	mov	r3, r0
 800f6be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f6c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7ff ff31 	bl	800f52c <__NVIC_EnableIRQ>
}
 800f6ca:	bf00      	nop
 800f6cc:	3708      	adds	r7, #8
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}

0800f6d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b082      	sub	sp, #8
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f7ff ffa2 	bl	800f624 <SysTick_Config>
 800f6e0:	4603      	mov	r3, r0
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3708      	adds	r7, #8
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
	...

0800f6ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b086      	sub	sp, #24
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f6f8:	f7ff fa7a 	bl	800ebf0 <HAL_GetTick>
 800f6fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d101      	bne.n	800f708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f704:	2301      	movs	r3, #1
 800f706:	e099      	b.n	800f83c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2200      	movs	r2, #0
 800f70c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2202      	movs	r2, #2
 800f714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	681a      	ldr	r2, [r3, #0]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	f022 0201 	bic.w	r2, r2, #1
 800f726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f728:	e00f      	b.n	800f74a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f72a:	f7ff fa61 	bl	800ebf0 <HAL_GetTick>
 800f72e:	4602      	mov	r2, r0
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	1ad3      	subs	r3, r2, r3
 800f734:	2b05      	cmp	r3, #5
 800f736:	d908      	bls.n	800f74a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2220      	movs	r2, #32
 800f73c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2203      	movs	r2, #3
 800f742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f746:	2303      	movs	r3, #3
 800f748:	e078      	b.n	800f83c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f003 0301 	and.w	r3, r3, #1
 800f754:	2b00      	cmp	r3, #0
 800f756:	d1e8      	bne.n	800f72a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f760:	697a      	ldr	r2, [r7, #20]
 800f762:	4b38      	ldr	r3, [pc, #224]	; (800f844 <HAL_DMA_Init+0x158>)
 800f764:	4013      	ands	r3, r2
 800f766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	685a      	ldr	r2, [r3, #4]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	689b      	ldr	r3, [r3, #8]
 800f770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	691b      	ldr	r3, [r3, #16]
 800f77c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	699b      	ldr	r3, [r3, #24]
 800f788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f78e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6a1b      	ldr	r3, [r3, #32]
 800f794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f796:	697a      	ldr	r2, [r7, #20]
 800f798:	4313      	orrs	r3, r2
 800f79a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a0:	2b04      	cmp	r3, #4
 800f7a2:	d107      	bne.n	800f7b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	697a      	ldr	r2, [r7, #20]
 800f7b0:	4313      	orrs	r3, r2
 800f7b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	697a      	ldr	r2, [r7, #20]
 800f7ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	695b      	ldr	r3, [r3, #20]
 800f7c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	f023 0307 	bic.w	r3, r3, #7
 800f7ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d0:	697a      	ldr	r2, [r7, #20]
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7da:	2b04      	cmp	r3, #4
 800f7dc:	d117      	bne.n	800f80e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7e2:	697a      	ldr	r2, [r7, #20]
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d00e      	beq.n	800f80e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f000 fadf 	bl	800fdb4 <DMA_CheckFifoParam>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d008      	beq.n	800f80e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2240      	movs	r2, #64	; 0x40
 800f800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2201      	movs	r2, #1
 800f806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f80a:	2301      	movs	r3, #1
 800f80c:	e016      	b.n	800f83c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	697a      	ldr	r2, [r7, #20]
 800f814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f000 fa96 	bl	800fd48 <DMA_CalcBaseAndBitshift>
 800f81c:	4603      	mov	r3, r0
 800f81e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f824:	223f      	movs	r2, #63	; 0x3f
 800f826:	409a      	lsls	r2, r3
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2200      	movs	r2, #0
 800f830:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2201      	movs	r2, #1
 800f836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f83a:	2300      	movs	r3, #0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3718      	adds	r7, #24
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	f010803f 	.word	0xf010803f

0800f848 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b086      	sub	sp, #24
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	60f8      	str	r0, [r7, #12]
 800f850:	60b9      	str	r1, [r7, #8]
 800f852:	607a      	str	r2, [r7, #4]
 800f854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f856:	2300      	movs	r3, #0
 800f858:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f85e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f866:	2b01      	cmp	r3, #1
 800f868:	d101      	bne.n	800f86e <HAL_DMA_Start_IT+0x26>
 800f86a:	2302      	movs	r3, #2
 800f86c:	e040      	b.n	800f8f0 <HAL_DMA_Start_IT+0xa8>
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2201      	movs	r2, #1
 800f872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d12f      	bne.n	800f8e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2202      	movs	r2, #2
 800f886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2200      	movs	r2, #0
 800f88e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	687a      	ldr	r2, [r7, #4]
 800f894:	68b9      	ldr	r1, [r7, #8]
 800f896:	68f8      	ldr	r0, [r7, #12]
 800f898:	f000 fa28 	bl	800fcec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8a0:	223f      	movs	r2, #63	; 0x3f
 800f8a2:	409a      	lsls	r2, r3
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f042 0216 	orr.w	r2, r2, #22
 800f8b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d007      	beq.n	800f8d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f042 0208 	orr.w	r2, r2, #8
 800f8ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f042 0201 	orr.w	r2, r2, #1
 800f8de:	601a      	str	r2, [r3, #0]
 800f8e0:	e005      	b.n	800f8ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f8ea:	2302      	movs	r3, #2
 800f8ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f8ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3718      	adds	r7, #24
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f904:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800f906:	f7ff f973 	bl	800ebf0 <HAL_GetTick>
 800f90a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f912:	b2db      	uxtb	r3, r3
 800f914:	2b02      	cmp	r3, #2
 800f916:	d008      	beq.n	800f92a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2280      	movs	r2, #128	; 0x80
 800f91c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800f926:	2301      	movs	r3, #1
 800f928:	e052      	b.n	800f9d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	681a      	ldr	r2, [r3, #0]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f022 0216 	bic.w	r2, r2, #22
 800f938:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	695a      	ldr	r2, [r3, #20]
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f948:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d103      	bne.n	800f95a <HAL_DMA_Abort+0x62>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f956:	2b00      	cmp	r3, #0
 800f958:	d007      	beq.n	800f96a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	681a      	ldr	r2, [r3, #0]
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	f022 0208 	bic.w	r2, r2, #8
 800f968:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	681a      	ldr	r2, [r3, #0]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	f022 0201 	bic.w	r2, r2, #1
 800f978:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f97a:	e013      	b.n	800f9a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f97c:	f7ff f938 	bl	800ebf0 <HAL_GetTick>
 800f980:	4602      	mov	r2, r0
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	1ad3      	subs	r3, r2, r3
 800f986:	2b05      	cmp	r3, #5
 800f988:	d90c      	bls.n	800f9a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2220      	movs	r2, #32
 800f98e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2200      	movs	r2, #0
 800f994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2203      	movs	r2, #3
 800f99c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800f9a0:	2303      	movs	r3, #3
 800f9a2:	e015      	b.n	800f9d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f003 0301 	and.w	r3, r3, #1
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d1e4      	bne.n	800f97c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9b6:	223f      	movs	r2, #63	; 0x3f
 800f9b8:	409a      	lsls	r2, r3
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800f9ce:	2300      	movs	r3, #0
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3710      	adds	r7, #16
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b086      	sub	sp, #24
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f9e4:	4b92      	ldr	r3, [pc, #584]	; (800fc30 <HAL_DMA_IRQHandler+0x258>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a92      	ldr	r2, [pc, #584]	; (800fc34 <HAL_DMA_IRQHandler+0x25c>)
 800f9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800f9ee:	0a9b      	lsrs	r3, r3, #10
 800f9f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa02:	2208      	movs	r2, #8
 800fa04:	409a      	lsls	r2, r3
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	4013      	ands	r3, r2
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d01a      	beq.n	800fa44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	f003 0304 	and.w	r3, r3, #4
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d013      	beq.n	800fa44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	681a      	ldr	r2, [r3, #0]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	f022 0204 	bic.w	r2, r2, #4
 800fa2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa30:	2208      	movs	r2, #8
 800fa32:	409a      	lsls	r2, r3
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa3c:	f043 0201 	orr.w	r2, r3, #1
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa48:	2201      	movs	r2, #1
 800fa4a:	409a      	lsls	r2, r3
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	4013      	ands	r3, r2
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d012      	beq.n	800fa7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	695b      	ldr	r3, [r3, #20]
 800fa5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d00b      	beq.n	800fa7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa66:	2201      	movs	r2, #1
 800fa68:	409a      	lsls	r2, r3
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa72:	f043 0202 	orr.w	r2, r3, #2
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa7e:	2204      	movs	r2, #4
 800fa80:	409a      	lsls	r2, r3
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	4013      	ands	r3, r2
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d012      	beq.n	800fab0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f003 0302 	and.w	r3, r3, #2
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d00b      	beq.n	800fab0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa9c:	2204      	movs	r2, #4
 800fa9e:	409a      	lsls	r2, r3
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faa8:	f043 0204 	orr.w	r2, r3, #4
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fab4:	2210      	movs	r2, #16
 800fab6:	409a      	lsls	r2, r3
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	4013      	ands	r3, r2
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d043      	beq.n	800fb48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f003 0308 	and.w	r3, r3, #8
 800faca:	2b00      	cmp	r3, #0
 800facc:	d03c      	beq.n	800fb48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fad2:	2210      	movs	r2, #16
 800fad4:	409a      	lsls	r2, r3
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d018      	beq.n	800fb1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d108      	bne.n	800fb08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d024      	beq.n	800fb48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	4798      	blx	r3
 800fb06:	e01f      	b.n	800fb48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d01b      	beq.n	800fb48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	4798      	blx	r3
 800fb18:	e016      	b.n	800fb48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d107      	bne.n	800fb38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	681a      	ldr	r2, [r3, #0]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	f022 0208 	bic.w	r2, r2, #8
 800fb36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d003      	beq.n	800fb48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb4c:	2220      	movs	r2, #32
 800fb4e:	409a      	lsls	r2, r3
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	4013      	ands	r3, r2
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	f000 808e 	beq.w	800fc76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	f003 0310 	and.w	r3, r3, #16
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	f000 8086 	beq.w	800fc76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb6e:	2220      	movs	r2, #32
 800fb70:	409a      	lsls	r2, r3
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	2b05      	cmp	r3, #5
 800fb80:	d136      	bne.n	800fbf0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	f022 0216 	bic.w	r2, r2, #22
 800fb90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	695a      	ldr	r2, [r3, #20]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fba0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d103      	bne.n	800fbb2 <HAL_DMA_IRQHandler+0x1da>
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d007      	beq.n	800fbc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	681a      	ldr	r2, [r3, #0]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	f022 0208 	bic.w	r2, r2, #8
 800fbc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbc6:	223f      	movs	r2, #63	; 0x3f
 800fbc8:	409a      	lsls	r2, r3
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2201      	movs	r2, #1
 800fbda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d07d      	beq.n	800fce2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	4798      	blx	r3
        }
        return;
 800fbee:	e078      	b.n	800fce2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d01c      	beq.n	800fc38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d108      	bne.n	800fc1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d030      	beq.n	800fc76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	4798      	blx	r3
 800fc1c:	e02b      	b.n	800fc76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d027      	beq.n	800fc76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	4798      	blx	r3
 800fc2e:	e022      	b.n	800fc76 <HAL_DMA_IRQHandler+0x29e>
 800fc30:	20000024 	.word	0x20000024
 800fc34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d10f      	bne.n	800fc66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f022 0210 	bic.w	r2, r2, #16
 800fc54:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2201      	movs	r2, #1
 800fc62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d003      	beq.n	800fc76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d032      	beq.n	800fce4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc82:	f003 0301 	and.w	r3, r3, #1
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d022      	beq.n	800fcd0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2205      	movs	r2, #5
 800fc8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	681a      	ldr	r2, [r3, #0]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	f022 0201 	bic.w	r2, r2, #1
 800fca0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	3301      	adds	r3, #1
 800fca6:	60bb      	str	r3, [r7, #8]
 800fca8:	697a      	ldr	r2, [r7, #20]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d307      	bcc.n	800fcbe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f003 0301 	and.w	r3, r3, #1
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d1f2      	bne.n	800fca2 <HAL_DMA_IRQHandler+0x2ca>
 800fcbc:	e000      	b.n	800fcc0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800fcbe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2201      	movs	r2, #1
 800fccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d005      	beq.n	800fce4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	4798      	blx	r3
 800fce0:	e000      	b.n	800fce4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800fce2:	bf00      	nop
    }
  }
}
 800fce4:	3718      	adds	r7, #24
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop

0800fcec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b085      	sub	sp, #20
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	60f8      	str	r0, [r7, #12]
 800fcf4:	60b9      	str	r1, [r7, #8]
 800fcf6:	607a      	str	r2, [r7, #4]
 800fcf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fd08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	683a      	ldr	r2, [r7, #0]
 800fd10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	689b      	ldr	r3, [r3, #8]
 800fd16:	2b40      	cmp	r3, #64	; 0x40
 800fd18:	d108      	bne.n	800fd2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	68ba      	ldr	r2, [r7, #8]
 800fd28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800fd2a:	e007      	b.n	800fd3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	68ba      	ldr	r2, [r7, #8]
 800fd32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	687a      	ldr	r2, [r7, #4]
 800fd3a:	60da      	str	r2, [r3, #12]
}
 800fd3c:	bf00      	nop
 800fd3e:	3714      	adds	r7, #20
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr

0800fd48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b085      	sub	sp, #20
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	3b10      	subs	r3, #16
 800fd58:	4a14      	ldr	r2, [pc, #80]	; (800fdac <DMA_CalcBaseAndBitshift+0x64>)
 800fd5a:	fba2 2303 	umull	r2, r3, r2, r3
 800fd5e:	091b      	lsrs	r3, r3, #4
 800fd60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800fd62:	4a13      	ldr	r2, [pc, #76]	; (800fdb0 <DMA_CalcBaseAndBitshift+0x68>)
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	4413      	add	r3, r2
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2b03      	cmp	r3, #3
 800fd74:	d909      	bls.n	800fd8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fd7e:	f023 0303 	bic.w	r3, r3, #3
 800fd82:	1d1a      	adds	r2, r3, #4
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	659a      	str	r2, [r3, #88]	; 0x58
 800fd88:	e007      	b.n	800fd9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fd92:	f023 0303 	bic.w	r3, r3, #3
 800fd96:	687a      	ldr	r2, [r7, #4]
 800fd98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3714      	adds	r7, #20
 800fda2:	46bd      	mov	sp, r7
 800fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda8:	4770      	bx	lr
 800fdaa:	bf00      	nop
 800fdac:	aaaaaaab 	.word	0xaaaaaaab
 800fdb0:	0801941c 	.word	0x0801941c

0800fdb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b085      	sub	sp, #20
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	699b      	ldr	r3, [r3, #24]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d11f      	bne.n	800fe0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	2b03      	cmp	r3, #3
 800fdd2:	d855      	bhi.n	800fe80 <DMA_CheckFifoParam+0xcc>
 800fdd4:	a201      	add	r2, pc, #4	; (adr r2, 800fddc <DMA_CheckFifoParam+0x28>)
 800fdd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdda:	bf00      	nop
 800fddc:	0800fded 	.word	0x0800fded
 800fde0:	0800fdff 	.word	0x0800fdff
 800fde4:	0800fded 	.word	0x0800fded
 800fde8:	0800fe81 	.word	0x0800fe81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d045      	beq.n	800fe84 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fdfc:	e042      	b.n	800fe84 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fe06:	d13f      	bne.n	800fe88 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fe0c:	e03c      	b.n	800fe88 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	699b      	ldr	r3, [r3, #24]
 800fe12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe16:	d121      	bne.n	800fe5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	2b03      	cmp	r3, #3
 800fe1c:	d836      	bhi.n	800fe8c <DMA_CheckFifoParam+0xd8>
 800fe1e:	a201      	add	r2, pc, #4	; (adr r2, 800fe24 <DMA_CheckFifoParam+0x70>)
 800fe20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe24:	0800fe35 	.word	0x0800fe35
 800fe28:	0800fe3b 	.word	0x0800fe3b
 800fe2c:	0800fe35 	.word	0x0800fe35
 800fe30:	0800fe4d 	.word	0x0800fe4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800fe34:	2301      	movs	r3, #1
 800fe36:	73fb      	strb	r3, [r7, #15]
      break;
 800fe38:	e02f      	b.n	800fe9a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d024      	beq.n	800fe90 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800fe46:	2301      	movs	r3, #1
 800fe48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fe4a:	e021      	b.n	800fe90 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fe54:	d11e      	bne.n	800fe94 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800fe56:	2301      	movs	r3, #1
 800fe58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800fe5a:	e01b      	b.n	800fe94 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	2b02      	cmp	r3, #2
 800fe60:	d902      	bls.n	800fe68 <DMA_CheckFifoParam+0xb4>
 800fe62:	2b03      	cmp	r3, #3
 800fe64:	d003      	beq.n	800fe6e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800fe66:	e018      	b.n	800fe9a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800fe68:	2301      	movs	r3, #1
 800fe6a:	73fb      	strb	r3, [r7, #15]
      break;
 800fe6c:	e015      	b.n	800fe9a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d00e      	beq.n	800fe98 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	73fb      	strb	r3, [r7, #15]
      break;
 800fe7e:	e00b      	b.n	800fe98 <DMA_CheckFifoParam+0xe4>
      break;
 800fe80:	bf00      	nop
 800fe82:	e00a      	b.n	800fe9a <DMA_CheckFifoParam+0xe6>
      break;
 800fe84:	bf00      	nop
 800fe86:	e008      	b.n	800fe9a <DMA_CheckFifoParam+0xe6>
      break;
 800fe88:	bf00      	nop
 800fe8a:	e006      	b.n	800fe9a <DMA_CheckFifoParam+0xe6>
      break;
 800fe8c:	bf00      	nop
 800fe8e:	e004      	b.n	800fe9a <DMA_CheckFifoParam+0xe6>
      break;
 800fe90:	bf00      	nop
 800fe92:	e002      	b.n	800fe9a <DMA_CheckFifoParam+0xe6>
      break;   
 800fe94:	bf00      	nop
 800fe96:	e000      	b.n	800fe9a <DMA_CheckFifoParam+0xe6>
      break;
 800fe98:	bf00      	nop
    }
  } 
  
  return status; 
 800fe9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3714      	adds	r7, #20
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr

0800fea8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800feae:	2300      	movs	r3, #0
 800feb0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800feb2:	4b0b      	ldr	r3, [pc, #44]	; (800fee0 <HAL_FLASH_Unlock+0x38>)
 800feb4:	691b      	ldr	r3, [r3, #16]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	da0b      	bge.n	800fed2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800feba:	4b09      	ldr	r3, [pc, #36]	; (800fee0 <HAL_FLASH_Unlock+0x38>)
 800febc:	4a09      	ldr	r2, [pc, #36]	; (800fee4 <HAL_FLASH_Unlock+0x3c>)
 800febe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800fec0:	4b07      	ldr	r3, [pc, #28]	; (800fee0 <HAL_FLASH_Unlock+0x38>)
 800fec2:	4a09      	ldr	r2, [pc, #36]	; (800fee8 <HAL_FLASH_Unlock+0x40>)
 800fec4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800fec6:	4b06      	ldr	r3, [pc, #24]	; (800fee0 <HAL_FLASH_Unlock+0x38>)
 800fec8:	691b      	ldr	r3, [r3, #16]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	da01      	bge.n	800fed2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800fece:	2301      	movs	r3, #1
 800fed0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800fed2:	79fb      	ldrb	r3, [r7, #7]
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr
 800fee0:	40023c00 	.word	0x40023c00
 800fee4:	45670123 	.word	0x45670123
 800fee8:	cdef89ab 	.word	0xcdef89ab

0800feec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800feec:	b480      	push	{r7}
 800feee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800fef0:	4b05      	ldr	r3, [pc, #20]	; (800ff08 <HAL_FLASH_Lock+0x1c>)
 800fef2:	691b      	ldr	r3, [r3, #16]
 800fef4:	4a04      	ldr	r2, [pc, #16]	; (800ff08 <HAL_FLASH_Lock+0x1c>)
 800fef6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fefa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800fefc:	2300      	movs	r3, #0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr
 800ff08:	40023c00 	.word	0x40023c00

0800ff0c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ff14:	2300      	movs	r3, #0
 800ff16:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ff18:	4b1a      	ldr	r3, [pc, #104]	; (800ff84 <FLASH_WaitForLastOperation+0x78>)
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800ff1e:	f7fe fe67 	bl	800ebf0 <HAL_GetTick>
 800ff22:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ff24:	e010      	b.n	800ff48 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff2c:	d00c      	beq.n	800ff48 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d007      	beq.n	800ff44 <FLASH_WaitForLastOperation+0x38>
 800ff34:	f7fe fe5c 	bl	800ebf0 <HAL_GetTick>
 800ff38:	4602      	mov	r2, r0
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	1ad3      	subs	r3, r2, r3
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d201      	bcs.n	800ff48 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800ff44:	2303      	movs	r3, #3
 800ff46:	e019      	b.n	800ff7c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ff48:	4b0f      	ldr	r3, [pc, #60]	; (800ff88 <FLASH_WaitForLastOperation+0x7c>)
 800ff4a:	68db      	ldr	r3, [r3, #12]
 800ff4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d1e8      	bne.n	800ff26 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800ff54:	4b0c      	ldr	r3, [pc, #48]	; (800ff88 <FLASH_WaitForLastOperation+0x7c>)
 800ff56:	68db      	ldr	r3, [r3, #12]
 800ff58:	f003 0301 	and.w	r3, r3, #1
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d002      	beq.n	800ff66 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ff60:	4b09      	ldr	r3, [pc, #36]	; (800ff88 <FLASH_WaitForLastOperation+0x7c>)
 800ff62:	2201      	movs	r2, #1
 800ff64:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800ff66:	4b08      	ldr	r3, [pc, #32]	; (800ff88 <FLASH_WaitForLastOperation+0x7c>)
 800ff68:	68db      	ldr	r3, [r3, #12]
 800ff6a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d003      	beq.n	800ff7a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800ff72:	f000 f80b 	bl	800ff8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ff76:	2301      	movs	r3, #1
 800ff78:	e000      	b.n	800ff7c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800ff7a:	2300      	movs	r3, #0
  
}  
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3710      	adds	r7, #16
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}
 800ff84:	20008f00 	.word	0x20008f00
 800ff88:	40023c00 	.word	0x40023c00

0800ff8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800ff8c:	b480      	push	{r7}
 800ff8e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ff90:	4b27      	ldr	r3, [pc, #156]	; (8010030 <FLASH_SetErrorCode+0xa4>)
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	f003 0310 	and.w	r3, r3, #16
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d008      	beq.n	800ffae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ff9c:	4b25      	ldr	r3, [pc, #148]	; (8010034 <FLASH_SetErrorCode+0xa8>)
 800ff9e:	69db      	ldr	r3, [r3, #28]
 800ffa0:	f043 0310 	orr.w	r3, r3, #16
 800ffa4:	4a23      	ldr	r2, [pc, #140]	; (8010034 <FLASH_SetErrorCode+0xa8>)
 800ffa6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ffa8:	4b21      	ldr	r3, [pc, #132]	; (8010030 <FLASH_SetErrorCode+0xa4>)
 800ffaa:	2210      	movs	r2, #16
 800ffac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ffae:	4b20      	ldr	r3, [pc, #128]	; (8010030 <FLASH_SetErrorCode+0xa4>)
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	f003 0320 	and.w	r3, r3, #32
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d008      	beq.n	800ffcc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ffba:	4b1e      	ldr	r3, [pc, #120]	; (8010034 <FLASH_SetErrorCode+0xa8>)
 800ffbc:	69db      	ldr	r3, [r3, #28]
 800ffbe:	f043 0308 	orr.w	r3, r3, #8
 800ffc2:	4a1c      	ldr	r2, [pc, #112]	; (8010034 <FLASH_SetErrorCode+0xa8>)
 800ffc4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ffc6:	4b1a      	ldr	r3, [pc, #104]	; (8010030 <FLASH_SetErrorCode+0xa4>)
 800ffc8:	2220      	movs	r2, #32
 800ffca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ffcc:	4b18      	ldr	r3, [pc, #96]	; (8010030 <FLASH_SetErrorCode+0xa4>)
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d008      	beq.n	800ffea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ffd8:	4b16      	ldr	r3, [pc, #88]	; (8010034 <FLASH_SetErrorCode+0xa8>)
 800ffda:	69db      	ldr	r3, [r3, #28]
 800ffdc:	f043 0304 	orr.w	r3, r3, #4
 800ffe0:	4a14      	ldr	r2, [pc, #80]	; (8010034 <FLASH_SetErrorCode+0xa8>)
 800ffe2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ffe4:	4b12      	ldr	r3, [pc, #72]	; (8010030 <FLASH_SetErrorCode+0xa4>)
 800ffe6:	2240      	movs	r2, #64	; 0x40
 800ffe8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ffea:	4b11      	ldr	r3, [pc, #68]	; (8010030 <FLASH_SetErrorCode+0xa4>)
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d008      	beq.n	8010008 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800fff6:	4b0f      	ldr	r3, [pc, #60]	; (8010034 <FLASH_SetErrorCode+0xa8>)
 800fff8:	69db      	ldr	r3, [r3, #28]
 800fffa:	f043 0302 	orr.w	r3, r3, #2
 800fffe:	4a0d      	ldr	r2, [pc, #52]	; (8010034 <FLASH_SetErrorCode+0xa8>)
 8010000:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8010002:	4b0b      	ldr	r3, [pc, #44]	; (8010030 <FLASH_SetErrorCode+0xa4>)
 8010004:	2280      	movs	r2, #128	; 0x80
 8010006:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8010008:	4b09      	ldr	r3, [pc, #36]	; (8010030 <FLASH_SetErrorCode+0xa4>)
 801000a:	68db      	ldr	r3, [r3, #12]
 801000c:	f003 0302 	and.w	r3, r3, #2
 8010010:	2b00      	cmp	r3, #0
 8010012:	d008      	beq.n	8010026 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8010014:	4b07      	ldr	r3, [pc, #28]	; (8010034 <FLASH_SetErrorCode+0xa8>)
 8010016:	69db      	ldr	r3, [r3, #28]
 8010018:	f043 0320 	orr.w	r3, r3, #32
 801001c:	4a05      	ldr	r2, [pc, #20]	; (8010034 <FLASH_SetErrorCode+0xa8>)
 801001e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8010020:	4b03      	ldr	r3, [pc, #12]	; (8010030 <FLASH_SetErrorCode+0xa4>)
 8010022:	2202      	movs	r2, #2
 8010024:	60da      	str	r2, [r3, #12]
  }
}
 8010026:	bf00      	nop
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr
 8010030:	40023c00 	.word	0x40023c00
 8010034:	20008f00 	.word	0x20008f00

08010038 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b084      	sub	sp, #16
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010042:	2301      	movs	r3, #1
 8010044:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8010046:	2300      	movs	r3, #0
 8010048:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801004a:	4b31      	ldr	r3, [pc, #196]	; (8010110 <HAL_FLASHEx_Erase+0xd8>)
 801004c:	7e1b      	ldrb	r3, [r3, #24]
 801004e:	2b01      	cmp	r3, #1
 8010050:	d101      	bne.n	8010056 <HAL_FLASHEx_Erase+0x1e>
 8010052:	2302      	movs	r3, #2
 8010054:	e058      	b.n	8010108 <HAL_FLASHEx_Erase+0xd0>
 8010056:	4b2e      	ldr	r3, [pc, #184]	; (8010110 <HAL_FLASHEx_Erase+0xd8>)
 8010058:	2201      	movs	r2, #1
 801005a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801005c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010060:	f7ff ff54 	bl	800ff0c <FLASH_WaitForLastOperation>
 8010064:	4603      	mov	r3, r0
 8010066:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8010068:	7bfb      	ldrb	r3, [r7, #15]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d148      	bne.n	8010100 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	f04f 32ff 	mov.w	r2, #4294967295
 8010074:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	2b01      	cmp	r3, #1
 801007c:	d115      	bne.n	80100aa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	691b      	ldr	r3, [r3, #16]
 8010082:	b2da      	uxtb	r2, r3
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	4619      	mov	r1, r3
 801008a:	4610      	mov	r0, r2
 801008c:	f000 f844 	bl	8010118 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010090:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010094:	f7ff ff3a 	bl	800ff0c <FLASH_WaitForLastOperation>
 8010098:	4603      	mov	r3, r0
 801009a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 801009c:	4b1d      	ldr	r3, [pc, #116]	; (8010114 <HAL_FLASHEx_Erase+0xdc>)
 801009e:	691b      	ldr	r3, [r3, #16]
 80100a0:	4a1c      	ldr	r2, [pc, #112]	; (8010114 <HAL_FLASHEx_Erase+0xdc>)
 80100a2:	f023 0304 	bic.w	r3, r3, #4
 80100a6:	6113      	str	r3, [r2, #16]
 80100a8:	e028      	b.n	80100fc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	689b      	ldr	r3, [r3, #8]
 80100ae:	60bb      	str	r3, [r7, #8]
 80100b0:	e01c      	b.n	80100ec <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	691b      	ldr	r3, [r3, #16]
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	4619      	mov	r1, r3
 80100ba:	68b8      	ldr	r0, [r7, #8]
 80100bc:	f000 f850 	bl	8010160 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80100c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80100c4:	f7ff ff22 	bl	800ff0c <FLASH_WaitForLastOperation>
 80100c8:	4603      	mov	r3, r0
 80100ca:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80100cc:	4b11      	ldr	r3, [pc, #68]	; (8010114 <HAL_FLASHEx_Erase+0xdc>)
 80100ce:	691b      	ldr	r3, [r3, #16]
 80100d0:	4a10      	ldr	r2, [pc, #64]	; (8010114 <HAL_FLASHEx_Erase+0xdc>)
 80100d2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80100d6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80100d8:	7bfb      	ldrb	r3, [r7, #15]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d003      	beq.n	80100e6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	68ba      	ldr	r2, [r7, #8]
 80100e2:	601a      	str	r2, [r3, #0]
          break;
 80100e4:	e00a      	b.n	80100fc <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	3301      	adds	r3, #1
 80100ea:	60bb      	str	r3, [r7, #8]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	68da      	ldr	r2, [r3, #12]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	689b      	ldr	r3, [r3, #8]
 80100f4:	4413      	add	r3, r2
 80100f6:	68ba      	ldr	r2, [r7, #8]
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d3da      	bcc.n	80100b2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80100fc:	f000 f878 	bl	80101f0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010100:	4b03      	ldr	r3, [pc, #12]	; (8010110 <HAL_FLASHEx_Erase+0xd8>)
 8010102:	2200      	movs	r2, #0
 8010104:	761a      	strb	r2, [r3, #24]

  return status;
 8010106:	7bfb      	ldrb	r3, [r7, #15]
}
 8010108:	4618      	mov	r0, r3
 801010a:	3710      	adds	r7, #16
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}
 8010110:	20008f00 	.word	0x20008f00
 8010114:	40023c00 	.word	0x40023c00

08010118 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8010118:	b480      	push	{r7}
 801011a:	b083      	sub	sp, #12
 801011c:	af00      	add	r7, sp, #0
 801011e:	4603      	mov	r3, r0
 8010120:	6039      	str	r1, [r7, #0]
 8010122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010124:	4b0d      	ldr	r3, [pc, #52]	; (801015c <FLASH_MassErase+0x44>)
 8010126:	691b      	ldr	r3, [r3, #16]
 8010128:	4a0c      	ldr	r2, [pc, #48]	; (801015c <FLASH_MassErase+0x44>)
 801012a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801012e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8010130:	4b0a      	ldr	r3, [pc, #40]	; (801015c <FLASH_MassErase+0x44>)
 8010132:	691b      	ldr	r3, [r3, #16]
 8010134:	4a09      	ldr	r2, [pc, #36]	; (801015c <FLASH_MassErase+0x44>)
 8010136:	f043 0304 	orr.w	r3, r3, #4
 801013a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 801013c:	4b07      	ldr	r3, [pc, #28]	; (801015c <FLASH_MassErase+0x44>)
 801013e:	691a      	ldr	r2, [r3, #16]
 8010140:	79fb      	ldrb	r3, [r7, #7]
 8010142:	021b      	lsls	r3, r3, #8
 8010144:	4313      	orrs	r3, r2
 8010146:	4a05      	ldr	r2, [pc, #20]	; (801015c <FLASH_MassErase+0x44>)
 8010148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801014c:	6113      	str	r3, [r2, #16]
}
 801014e:	bf00      	nop
 8010150:	370c      	adds	r7, #12
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr
 801015a:	bf00      	nop
 801015c:	40023c00 	.word	0x40023c00

08010160 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8010160:	b480      	push	{r7}
 8010162:	b085      	sub	sp, #20
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	460b      	mov	r3, r1
 801016a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 801016c:	2300      	movs	r3, #0
 801016e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8010170:	78fb      	ldrb	r3, [r7, #3]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d102      	bne.n	801017c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8010176:	2300      	movs	r3, #0
 8010178:	60fb      	str	r3, [r7, #12]
 801017a:	e010      	b.n	801019e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 801017c:	78fb      	ldrb	r3, [r7, #3]
 801017e:	2b01      	cmp	r3, #1
 8010180:	d103      	bne.n	801018a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8010182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010186:	60fb      	str	r3, [r7, #12]
 8010188:	e009      	b.n	801019e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 801018a:	78fb      	ldrb	r3, [r7, #3]
 801018c:	2b02      	cmp	r3, #2
 801018e:	d103      	bne.n	8010198 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8010190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010194:	60fb      	str	r3, [r7, #12]
 8010196:	e002      	b.n	801019e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8010198:	f44f 7340 	mov.w	r3, #768	; 0x300
 801019c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801019e:	4b13      	ldr	r3, [pc, #76]	; (80101ec <FLASH_Erase_Sector+0x8c>)
 80101a0:	691b      	ldr	r3, [r3, #16]
 80101a2:	4a12      	ldr	r2, [pc, #72]	; (80101ec <FLASH_Erase_Sector+0x8c>)
 80101a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80101aa:	4b10      	ldr	r3, [pc, #64]	; (80101ec <FLASH_Erase_Sector+0x8c>)
 80101ac:	691a      	ldr	r2, [r3, #16]
 80101ae:	490f      	ldr	r1, [pc, #60]	; (80101ec <FLASH_Erase_Sector+0x8c>)
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	4313      	orrs	r3, r2
 80101b4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80101b6:	4b0d      	ldr	r3, [pc, #52]	; (80101ec <FLASH_Erase_Sector+0x8c>)
 80101b8:	691b      	ldr	r3, [r3, #16]
 80101ba:	4a0c      	ldr	r2, [pc, #48]	; (80101ec <FLASH_Erase_Sector+0x8c>)
 80101bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80101c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80101c2:	4b0a      	ldr	r3, [pc, #40]	; (80101ec <FLASH_Erase_Sector+0x8c>)
 80101c4:	691a      	ldr	r2, [r3, #16]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	00db      	lsls	r3, r3, #3
 80101ca:	4313      	orrs	r3, r2
 80101cc:	4a07      	ldr	r2, [pc, #28]	; (80101ec <FLASH_Erase_Sector+0x8c>)
 80101ce:	f043 0302 	orr.w	r3, r3, #2
 80101d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80101d4:	4b05      	ldr	r3, [pc, #20]	; (80101ec <FLASH_Erase_Sector+0x8c>)
 80101d6:	691b      	ldr	r3, [r3, #16]
 80101d8:	4a04      	ldr	r2, [pc, #16]	; (80101ec <FLASH_Erase_Sector+0x8c>)
 80101da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80101de:	6113      	str	r3, [r2, #16]
}
 80101e0:	bf00      	nop
 80101e2:	3714      	adds	r7, #20
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr
 80101ec:	40023c00 	.word	0x40023c00

080101f0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80101f0:	b480      	push	{r7}
 80101f2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80101f4:	4b20      	ldr	r3, [pc, #128]	; (8010278 <FLASH_FlushCaches+0x88>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d017      	beq.n	8010230 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8010200:	4b1d      	ldr	r3, [pc, #116]	; (8010278 <FLASH_FlushCaches+0x88>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	4a1c      	ldr	r2, [pc, #112]	; (8010278 <FLASH_FlushCaches+0x88>)
 8010206:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801020a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801020c:	4b1a      	ldr	r3, [pc, #104]	; (8010278 <FLASH_FlushCaches+0x88>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4a19      	ldr	r2, [pc, #100]	; (8010278 <FLASH_FlushCaches+0x88>)
 8010212:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010216:	6013      	str	r3, [r2, #0]
 8010218:	4b17      	ldr	r3, [pc, #92]	; (8010278 <FLASH_FlushCaches+0x88>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	4a16      	ldr	r2, [pc, #88]	; (8010278 <FLASH_FlushCaches+0x88>)
 801021e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010222:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010224:	4b14      	ldr	r3, [pc, #80]	; (8010278 <FLASH_FlushCaches+0x88>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	4a13      	ldr	r2, [pc, #76]	; (8010278 <FLASH_FlushCaches+0x88>)
 801022a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801022e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8010230:	4b11      	ldr	r3, [pc, #68]	; (8010278 <FLASH_FlushCaches+0x88>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010238:	2b00      	cmp	r3, #0
 801023a:	d017      	beq.n	801026c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 801023c:	4b0e      	ldr	r3, [pc, #56]	; (8010278 <FLASH_FlushCaches+0x88>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a0d      	ldr	r2, [pc, #52]	; (8010278 <FLASH_FlushCaches+0x88>)
 8010242:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010246:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8010248:	4b0b      	ldr	r3, [pc, #44]	; (8010278 <FLASH_FlushCaches+0x88>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4a0a      	ldr	r2, [pc, #40]	; (8010278 <FLASH_FlushCaches+0x88>)
 801024e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010252:	6013      	str	r3, [r2, #0]
 8010254:	4b08      	ldr	r3, [pc, #32]	; (8010278 <FLASH_FlushCaches+0x88>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	4a07      	ldr	r2, [pc, #28]	; (8010278 <FLASH_FlushCaches+0x88>)
 801025a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801025e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8010260:	4b05      	ldr	r3, [pc, #20]	; (8010278 <FLASH_FlushCaches+0x88>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	4a04      	ldr	r2, [pc, #16]	; (8010278 <FLASH_FlushCaches+0x88>)
 8010266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801026a:	6013      	str	r3, [r2, #0]
  }
}
 801026c:	bf00      	nop
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr
 8010276:	bf00      	nop
 8010278:	40023c00 	.word	0x40023c00

0801027c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801027c:	b480      	push	{r7}
 801027e:	b089      	sub	sp, #36	; 0x24
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010286:	2300      	movs	r3, #0
 8010288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801028a:	2300      	movs	r3, #0
 801028c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801028e:	2300      	movs	r3, #0
 8010290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010292:	2300      	movs	r3, #0
 8010294:	61fb      	str	r3, [r7, #28]
 8010296:	e16b      	b.n	8010570 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010298:	2201      	movs	r2, #1
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	fa02 f303 	lsl.w	r3, r2, r3
 80102a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	697a      	ldr	r2, [r7, #20]
 80102a8:	4013      	ands	r3, r2
 80102aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80102ac:	693a      	ldr	r2, [r7, #16]
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	f040 815a 	bne.w	801056a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	d00b      	beq.n	80102d6 <HAL_GPIO_Init+0x5a>
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	2b02      	cmp	r3, #2
 80102c4:	d007      	beq.n	80102d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80102ca:	2b11      	cmp	r3, #17
 80102cc:	d003      	beq.n	80102d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	2b12      	cmp	r3, #18
 80102d4:	d130      	bne.n	8010338 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	689b      	ldr	r3, [r3, #8]
 80102da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	005b      	lsls	r3, r3, #1
 80102e0:	2203      	movs	r2, #3
 80102e2:	fa02 f303 	lsl.w	r3, r2, r3
 80102e6:	43db      	mvns	r3, r3
 80102e8:	69ba      	ldr	r2, [r7, #24]
 80102ea:	4013      	ands	r3, r2
 80102ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	68da      	ldr	r2, [r3, #12]
 80102f2:	69fb      	ldr	r3, [r7, #28]
 80102f4:	005b      	lsls	r3, r3, #1
 80102f6:	fa02 f303 	lsl.w	r3, r2, r3
 80102fa:	69ba      	ldr	r2, [r7, #24]
 80102fc:	4313      	orrs	r3, r2
 80102fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	69ba      	ldr	r2, [r7, #24]
 8010304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	685b      	ldr	r3, [r3, #4]
 801030a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801030c:	2201      	movs	r2, #1
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	fa02 f303 	lsl.w	r3, r2, r3
 8010314:	43db      	mvns	r3, r3
 8010316:	69ba      	ldr	r2, [r7, #24]
 8010318:	4013      	ands	r3, r2
 801031a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	091b      	lsrs	r3, r3, #4
 8010322:	f003 0201 	and.w	r2, r3, #1
 8010326:	69fb      	ldr	r3, [r7, #28]
 8010328:	fa02 f303 	lsl.w	r3, r2, r3
 801032c:	69ba      	ldr	r2, [r7, #24]
 801032e:	4313      	orrs	r3, r2
 8010330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	69ba      	ldr	r2, [r7, #24]
 8010336:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	68db      	ldr	r3, [r3, #12]
 801033c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801033e:	69fb      	ldr	r3, [r7, #28]
 8010340:	005b      	lsls	r3, r3, #1
 8010342:	2203      	movs	r2, #3
 8010344:	fa02 f303 	lsl.w	r3, r2, r3
 8010348:	43db      	mvns	r3, r3
 801034a:	69ba      	ldr	r2, [r7, #24]
 801034c:	4013      	ands	r3, r2
 801034e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	689a      	ldr	r2, [r3, #8]
 8010354:	69fb      	ldr	r3, [r7, #28]
 8010356:	005b      	lsls	r3, r3, #1
 8010358:	fa02 f303 	lsl.w	r3, r2, r3
 801035c:	69ba      	ldr	r2, [r7, #24]
 801035e:	4313      	orrs	r3, r2
 8010360:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	69ba      	ldr	r2, [r7, #24]
 8010366:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	2b02      	cmp	r3, #2
 801036e:	d003      	beq.n	8010378 <HAL_GPIO_Init+0xfc>
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	2b12      	cmp	r3, #18
 8010376:	d123      	bne.n	80103c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010378:	69fb      	ldr	r3, [r7, #28]
 801037a:	08da      	lsrs	r2, r3, #3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	3208      	adds	r2, #8
 8010380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010384:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	f003 0307 	and.w	r3, r3, #7
 801038c:	009b      	lsls	r3, r3, #2
 801038e:	220f      	movs	r2, #15
 8010390:	fa02 f303 	lsl.w	r3, r2, r3
 8010394:	43db      	mvns	r3, r3
 8010396:	69ba      	ldr	r2, [r7, #24]
 8010398:	4013      	ands	r3, r2
 801039a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	691a      	ldr	r2, [r3, #16]
 80103a0:	69fb      	ldr	r3, [r7, #28]
 80103a2:	f003 0307 	and.w	r3, r3, #7
 80103a6:	009b      	lsls	r3, r3, #2
 80103a8:	fa02 f303 	lsl.w	r3, r2, r3
 80103ac:	69ba      	ldr	r2, [r7, #24]
 80103ae:	4313      	orrs	r3, r2
 80103b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80103b2:	69fb      	ldr	r3, [r7, #28]
 80103b4:	08da      	lsrs	r2, r3, #3
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	3208      	adds	r2, #8
 80103ba:	69b9      	ldr	r1, [r7, #24]
 80103bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80103c6:	69fb      	ldr	r3, [r7, #28]
 80103c8:	005b      	lsls	r3, r3, #1
 80103ca:	2203      	movs	r2, #3
 80103cc:	fa02 f303 	lsl.w	r3, r2, r3
 80103d0:	43db      	mvns	r3, r3
 80103d2:	69ba      	ldr	r2, [r7, #24]
 80103d4:	4013      	ands	r3, r2
 80103d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	685b      	ldr	r3, [r3, #4]
 80103dc:	f003 0203 	and.w	r2, r3, #3
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	005b      	lsls	r3, r3, #1
 80103e4:	fa02 f303 	lsl.w	r3, r2, r3
 80103e8:	69ba      	ldr	r2, [r7, #24]
 80103ea:	4313      	orrs	r3, r2
 80103ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	69ba      	ldr	r2, [r7, #24]
 80103f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	f000 80b4 	beq.w	801056a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010402:	2300      	movs	r3, #0
 8010404:	60fb      	str	r3, [r7, #12]
 8010406:	4b5f      	ldr	r3, [pc, #380]	; (8010584 <HAL_GPIO_Init+0x308>)
 8010408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801040a:	4a5e      	ldr	r2, [pc, #376]	; (8010584 <HAL_GPIO_Init+0x308>)
 801040c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010410:	6453      	str	r3, [r2, #68]	; 0x44
 8010412:	4b5c      	ldr	r3, [pc, #368]	; (8010584 <HAL_GPIO_Init+0x308>)
 8010414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801041a:	60fb      	str	r3, [r7, #12]
 801041c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801041e:	4a5a      	ldr	r2, [pc, #360]	; (8010588 <HAL_GPIO_Init+0x30c>)
 8010420:	69fb      	ldr	r3, [r7, #28]
 8010422:	089b      	lsrs	r3, r3, #2
 8010424:	3302      	adds	r3, #2
 8010426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801042a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801042c:	69fb      	ldr	r3, [r7, #28]
 801042e:	f003 0303 	and.w	r3, r3, #3
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	220f      	movs	r2, #15
 8010436:	fa02 f303 	lsl.w	r3, r2, r3
 801043a:	43db      	mvns	r3, r3
 801043c:	69ba      	ldr	r2, [r7, #24]
 801043e:	4013      	ands	r3, r2
 8010440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	4a51      	ldr	r2, [pc, #324]	; (801058c <HAL_GPIO_Init+0x310>)
 8010446:	4293      	cmp	r3, r2
 8010448:	d02b      	beq.n	80104a2 <HAL_GPIO_Init+0x226>
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	4a50      	ldr	r2, [pc, #320]	; (8010590 <HAL_GPIO_Init+0x314>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d025      	beq.n	801049e <HAL_GPIO_Init+0x222>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	4a4f      	ldr	r2, [pc, #316]	; (8010594 <HAL_GPIO_Init+0x318>)
 8010456:	4293      	cmp	r3, r2
 8010458:	d01f      	beq.n	801049a <HAL_GPIO_Init+0x21e>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	4a4e      	ldr	r2, [pc, #312]	; (8010598 <HAL_GPIO_Init+0x31c>)
 801045e:	4293      	cmp	r3, r2
 8010460:	d019      	beq.n	8010496 <HAL_GPIO_Init+0x21a>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	4a4d      	ldr	r2, [pc, #308]	; (801059c <HAL_GPIO_Init+0x320>)
 8010466:	4293      	cmp	r3, r2
 8010468:	d013      	beq.n	8010492 <HAL_GPIO_Init+0x216>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	4a4c      	ldr	r2, [pc, #304]	; (80105a0 <HAL_GPIO_Init+0x324>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d00d      	beq.n	801048e <HAL_GPIO_Init+0x212>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	4a4b      	ldr	r2, [pc, #300]	; (80105a4 <HAL_GPIO_Init+0x328>)
 8010476:	4293      	cmp	r3, r2
 8010478:	d007      	beq.n	801048a <HAL_GPIO_Init+0x20e>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4a4a      	ldr	r2, [pc, #296]	; (80105a8 <HAL_GPIO_Init+0x32c>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d101      	bne.n	8010486 <HAL_GPIO_Init+0x20a>
 8010482:	2307      	movs	r3, #7
 8010484:	e00e      	b.n	80104a4 <HAL_GPIO_Init+0x228>
 8010486:	2308      	movs	r3, #8
 8010488:	e00c      	b.n	80104a4 <HAL_GPIO_Init+0x228>
 801048a:	2306      	movs	r3, #6
 801048c:	e00a      	b.n	80104a4 <HAL_GPIO_Init+0x228>
 801048e:	2305      	movs	r3, #5
 8010490:	e008      	b.n	80104a4 <HAL_GPIO_Init+0x228>
 8010492:	2304      	movs	r3, #4
 8010494:	e006      	b.n	80104a4 <HAL_GPIO_Init+0x228>
 8010496:	2303      	movs	r3, #3
 8010498:	e004      	b.n	80104a4 <HAL_GPIO_Init+0x228>
 801049a:	2302      	movs	r3, #2
 801049c:	e002      	b.n	80104a4 <HAL_GPIO_Init+0x228>
 801049e:	2301      	movs	r3, #1
 80104a0:	e000      	b.n	80104a4 <HAL_GPIO_Init+0x228>
 80104a2:	2300      	movs	r3, #0
 80104a4:	69fa      	ldr	r2, [r7, #28]
 80104a6:	f002 0203 	and.w	r2, r2, #3
 80104aa:	0092      	lsls	r2, r2, #2
 80104ac:	4093      	lsls	r3, r2
 80104ae:	69ba      	ldr	r2, [r7, #24]
 80104b0:	4313      	orrs	r3, r2
 80104b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80104b4:	4934      	ldr	r1, [pc, #208]	; (8010588 <HAL_GPIO_Init+0x30c>)
 80104b6:	69fb      	ldr	r3, [r7, #28]
 80104b8:	089b      	lsrs	r3, r3, #2
 80104ba:	3302      	adds	r3, #2
 80104bc:	69ba      	ldr	r2, [r7, #24]
 80104be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80104c2:	4b3a      	ldr	r3, [pc, #232]	; (80105ac <HAL_GPIO_Init+0x330>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80104c8:	693b      	ldr	r3, [r7, #16]
 80104ca:	43db      	mvns	r3, r3
 80104cc:	69ba      	ldr	r2, [r7, #24]
 80104ce:	4013      	ands	r3, r2
 80104d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d003      	beq.n	80104e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80104de:	69ba      	ldr	r2, [r7, #24]
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	4313      	orrs	r3, r2
 80104e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80104e6:	4a31      	ldr	r2, [pc, #196]	; (80105ac <HAL_GPIO_Init+0x330>)
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80104ec:	4b2f      	ldr	r3, [pc, #188]	; (80105ac <HAL_GPIO_Init+0x330>)
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	43db      	mvns	r3, r3
 80104f6:	69ba      	ldr	r2, [r7, #24]
 80104f8:	4013      	ands	r3, r2
 80104fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	685b      	ldr	r3, [r3, #4]
 8010500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010504:	2b00      	cmp	r3, #0
 8010506:	d003      	beq.n	8010510 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8010508:	69ba      	ldr	r2, [r7, #24]
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	4313      	orrs	r3, r2
 801050e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010510:	4a26      	ldr	r2, [pc, #152]	; (80105ac <HAL_GPIO_Init+0x330>)
 8010512:	69bb      	ldr	r3, [r7, #24]
 8010514:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010516:	4b25      	ldr	r3, [pc, #148]	; (80105ac <HAL_GPIO_Init+0x330>)
 8010518:	689b      	ldr	r3, [r3, #8]
 801051a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	43db      	mvns	r3, r3
 8010520:	69ba      	ldr	r2, [r7, #24]
 8010522:	4013      	ands	r3, r2
 8010524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	685b      	ldr	r3, [r3, #4]
 801052a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801052e:	2b00      	cmp	r3, #0
 8010530:	d003      	beq.n	801053a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8010532:	69ba      	ldr	r2, [r7, #24]
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	4313      	orrs	r3, r2
 8010538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801053a:	4a1c      	ldr	r2, [pc, #112]	; (80105ac <HAL_GPIO_Init+0x330>)
 801053c:	69bb      	ldr	r3, [r7, #24]
 801053e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010540:	4b1a      	ldr	r3, [pc, #104]	; (80105ac <HAL_GPIO_Init+0x330>)
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	43db      	mvns	r3, r3
 801054a:	69ba      	ldr	r2, [r7, #24]
 801054c:	4013      	ands	r3, r2
 801054e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	685b      	ldr	r3, [r3, #4]
 8010554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010558:	2b00      	cmp	r3, #0
 801055a:	d003      	beq.n	8010564 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 801055c:	69ba      	ldr	r2, [r7, #24]
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	4313      	orrs	r3, r2
 8010562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010564:	4a11      	ldr	r2, [pc, #68]	; (80105ac <HAL_GPIO_Init+0x330>)
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801056a:	69fb      	ldr	r3, [r7, #28]
 801056c:	3301      	adds	r3, #1
 801056e:	61fb      	str	r3, [r7, #28]
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	2b0f      	cmp	r3, #15
 8010574:	f67f ae90 	bls.w	8010298 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8010578:	bf00      	nop
 801057a:	3724      	adds	r7, #36	; 0x24
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr
 8010584:	40023800 	.word	0x40023800
 8010588:	40013800 	.word	0x40013800
 801058c:	40020000 	.word	0x40020000
 8010590:	40020400 	.word	0x40020400
 8010594:	40020800 	.word	0x40020800
 8010598:	40020c00 	.word	0x40020c00
 801059c:	40021000 	.word	0x40021000
 80105a0:	40021400 	.word	0x40021400
 80105a4:	40021800 	.word	0x40021800
 80105a8:	40021c00 	.word	0x40021c00
 80105ac:	40013c00 	.word	0x40013c00

080105b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	460b      	mov	r3, r1
 80105ba:	807b      	strh	r3, [r7, #2]
 80105bc:	4613      	mov	r3, r2
 80105be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80105c0:	787b      	ldrb	r3, [r7, #1]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d003      	beq.n	80105ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80105c6:	887a      	ldrh	r2, [r7, #2]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80105cc:	e003      	b.n	80105d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80105ce:	887b      	ldrh	r3, [r7, #2]
 80105d0:	041a      	lsls	r2, r3, #16
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	619a      	str	r2, [r3, #24]
}
 80105d6:	bf00      	nop
 80105d8:	370c      	adds	r7, #12
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr
	...

080105e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b082      	sub	sp, #8
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	4603      	mov	r3, r0
 80105ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80105ee:	4b08      	ldr	r3, [pc, #32]	; (8010610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80105f0:	695a      	ldr	r2, [r3, #20]
 80105f2:	88fb      	ldrh	r3, [r7, #6]
 80105f4:	4013      	ands	r3, r2
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d006      	beq.n	8010608 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80105fa:	4a05      	ldr	r2, [pc, #20]	; (8010610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80105fc:	88fb      	ldrh	r3, [r7, #6]
 80105fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010600:	88fb      	ldrh	r3, [r7, #6]
 8010602:	4618      	mov	r0, r3
 8010604:	f7fe f988 	bl	800e918 <HAL_GPIO_EXTI_Callback>
  }
}
 8010608:	bf00      	nop
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	40013c00 	.word	0x40013c00

08010614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b086      	sub	sp, #24
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d101      	bne.n	8010626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010622:	2301      	movs	r3, #1
 8010624:	e25b      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f003 0301 	and.w	r3, r3, #1
 801062e:	2b00      	cmp	r3, #0
 8010630:	d075      	beq.n	801071e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8010632:	4ba3      	ldr	r3, [pc, #652]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010634:	689b      	ldr	r3, [r3, #8]
 8010636:	f003 030c 	and.w	r3, r3, #12
 801063a:	2b04      	cmp	r3, #4
 801063c:	d00c      	beq.n	8010658 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801063e:	4ba0      	ldr	r3, [pc, #640]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010640:	689b      	ldr	r3, [r3, #8]
 8010642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8010646:	2b08      	cmp	r3, #8
 8010648:	d112      	bne.n	8010670 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801064a:	4b9d      	ldr	r3, [pc, #628]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010656:	d10b      	bne.n	8010670 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010658:	4b99      	ldr	r3, [pc, #612]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010660:	2b00      	cmp	r3, #0
 8010662:	d05b      	beq.n	801071c <HAL_RCC_OscConfig+0x108>
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d157      	bne.n	801071c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801066c:	2301      	movs	r3, #1
 801066e:	e236      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010678:	d106      	bne.n	8010688 <HAL_RCC_OscConfig+0x74>
 801067a:	4b91      	ldr	r3, [pc, #580]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	4a90      	ldr	r2, [pc, #576]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010684:	6013      	str	r3, [r2, #0]
 8010686:	e01d      	b.n	80106c4 <HAL_RCC_OscConfig+0xb0>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	685b      	ldr	r3, [r3, #4]
 801068c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010690:	d10c      	bne.n	80106ac <HAL_RCC_OscConfig+0x98>
 8010692:	4b8b      	ldr	r3, [pc, #556]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4a8a      	ldr	r2, [pc, #552]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801069c:	6013      	str	r3, [r2, #0]
 801069e:	4b88      	ldr	r3, [pc, #544]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	4a87      	ldr	r2, [pc, #540]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 80106a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80106a8:	6013      	str	r3, [r2, #0]
 80106aa:	e00b      	b.n	80106c4 <HAL_RCC_OscConfig+0xb0>
 80106ac:	4b84      	ldr	r3, [pc, #528]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	4a83      	ldr	r2, [pc, #524]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 80106b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80106b6:	6013      	str	r3, [r2, #0]
 80106b8:	4b81      	ldr	r3, [pc, #516]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	4a80      	ldr	r2, [pc, #512]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 80106be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80106c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d013      	beq.n	80106f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80106cc:	f7fe fa90 	bl	800ebf0 <HAL_GetTick>
 80106d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80106d2:	e008      	b.n	80106e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80106d4:	f7fe fa8c 	bl	800ebf0 <HAL_GetTick>
 80106d8:	4602      	mov	r2, r0
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	1ad3      	subs	r3, r2, r3
 80106de:	2b64      	cmp	r3, #100	; 0x64
 80106e0:	d901      	bls.n	80106e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80106e2:	2303      	movs	r3, #3
 80106e4:	e1fb      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80106e6:	4b76      	ldr	r3, [pc, #472]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d0f0      	beq.n	80106d4 <HAL_RCC_OscConfig+0xc0>
 80106f2:	e014      	b.n	801071e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80106f4:	f7fe fa7c 	bl	800ebf0 <HAL_GetTick>
 80106f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80106fa:	e008      	b.n	801070e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80106fc:	f7fe fa78 	bl	800ebf0 <HAL_GetTick>
 8010700:	4602      	mov	r2, r0
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	1ad3      	subs	r3, r2, r3
 8010706:	2b64      	cmp	r3, #100	; 0x64
 8010708:	d901      	bls.n	801070e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801070a:	2303      	movs	r3, #3
 801070c:	e1e7      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801070e:	4b6c      	ldr	r3, [pc, #432]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010716:	2b00      	cmp	r3, #0
 8010718:	d1f0      	bne.n	80106fc <HAL_RCC_OscConfig+0xe8>
 801071a:	e000      	b.n	801071e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801071c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f003 0302 	and.w	r3, r3, #2
 8010726:	2b00      	cmp	r3, #0
 8010728:	d063      	beq.n	80107f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801072a:	4b65      	ldr	r3, [pc, #404]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 801072c:	689b      	ldr	r3, [r3, #8]
 801072e:	f003 030c 	and.w	r3, r3, #12
 8010732:	2b00      	cmp	r3, #0
 8010734:	d00b      	beq.n	801074e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010736:	4b62      	ldr	r3, [pc, #392]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010738:	689b      	ldr	r3, [r3, #8]
 801073a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801073e:	2b08      	cmp	r3, #8
 8010740:	d11c      	bne.n	801077c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010742:	4b5f      	ldr	r3, [pc, #380]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801074a:	2b00      	cmp	r3, #0
 801074c:	d116      	bne.n	801077c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801074e:	4b5c      	ldr	r3, [pc, #368]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f003 0302 	and.w	r3, r3, #2
 8010756:	2b00      	cmp	r3, #0
 8010758:	d005      	beq.n	8010766 <HAL_RCC_OscConfig+0x152>
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	68db      	ldr	r3, [r3, #12]
 801075e:	2b01      	cmp	r3, #1
 8010760:	d001      	beq.n	8010766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8010762:	2301      	movs	r3, #1
 8010764:	e1bb      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010766:	4b56      	ldr	r3, [pc, #344]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	691b      	ldr	r3, [r3, #16]
 8010772:	00db      	lsls	r3, r3, #3
 8010774:	4952      	ldr	r1, [pc, #328]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010776:	4313      	orrs	r3, r2
 8010778:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801077a:	e03a      	b.n	80107f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d020      	beq.n	80107c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010784:	4b4f      	ldr	r3, [pc, #316]	; (80108c4 <HAL_RCC_OscConfig+0x2b0>)
 8010786:	2201      	movs	r2, #1
 8010788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801078a:	f7fe fa31 	bl	800ebf0 <HAL_GetTick>
 801078e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010790:	e008      	b.n	80107a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010792:	f7fe fa2d 	bl	800ebf0 <HAL_GetTick>
 8010796:	4602      	mov	r2, r0
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	1ad3      	subs	r3, r2, r3
 801079c:	2b02      	cmp	r3, #2
 801079e:	d901      	bls.n	80107a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80107a0:	2303      	movs	r3, #3
 80107a2:	e19c      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80107a4:	4b46      	ldr	r3, [pc, #280]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	f003 0302 	and.w	r3, r3, #2
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d0f0      	beq.n	8010792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80107b0:	4b43      	ldr	r3, [pc, #268]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	691b      	ldr	r3, [r3, #16]
 80107bc:	00db      	lsls	r3, r3, #3
 80107be:	4940      	ldr	r1, [pc, #256]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 80107c0:	4313      	orrs	r3, r2
 80107c2:	600b      	str	r3, [r1, #0]
 80107c4:	e015      	b.n	80107f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80107c6:	4b3f      	ldr	r3, [pc, #252]	; (80108c4 <HAL_RCC_OscConfig+0x2b0>)
 80107c8:	2200      	movs	r2, #0
 80107ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107cc:	f7fe fa10 	bl	800ebf0 <HAL_GetTick>
 80107d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80107d2:	e008      	b.n	80107e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80107d4:	f7fe fa0c 	bl	800ebf0 <HAL_GetTick>
 80107d8:	4602      	mov	r2, r0
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	1ad3      	subs	r3, r2, r3
 80107de:	2b02      	cmp	r3, #2
 80107e0:	d901      	bls.n	80107e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80107e2:	2303      	movs	r3, #3
 80107e4:	e17b      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80107e6:	4b36      	ldr	r3, [pc, #216]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	f003 0302 	and.w	r3, r3, #2
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d1f0      	bne.n	80107d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	f003 0308 	and.w	r3, r3, #8
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d030      	beq.n	8010860 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	695b      	ldr	r3, [r3, #20]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d016      	beq.n	8010834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010806:	4b30      	ldr	r3, [pc, #192]	; (80108c8 <HAL_RCC_OscConfig+0x2b4>)
 8010808:	2201      	movs	r2, #1
 801080a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801080c:	f7fe f9f0 	bl	800ebf0 <HAL_GetTick>
 8010810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010812:	e008      	b.n	8010826 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010814:	f7fe f9ec 	bl	800ebf0 <HAL_GetTick>
 8010818:	4602      	mov	r2, r0
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	1ad3      	subs	r3, r2, r3
 801081e:	2b02      	cmp	r3, #2
 8010820:	d901      	bls.n	8010826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8010822:	2303      	movs	r3, #3
 8010824:	e15b      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010826:	4b26      	ldr	r3, [pc, #152]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801082a:	f003 0302 	and.w	r3, r3, #2
 801082e:	2b00      	cmp	r3, #0
 8010830:	d0f0      	beq.n	8010814 <HAL_RCC_OscConfig+0x200>
 8010832:	e015      	b.n	8010860 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010834:	4b24      	ldr	r3, [pc, #144]	; (80108c8 <HAL_RCC_OscConfig+0x2b4>)
 8010836:	2200      	movs	r2, #0
 8010838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801083a:	f7fe f9d9 	bl	800ebf0 <HAL_GetTick>
 801083e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010840:	e008      	b.n	8010854 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010842:	f7fe f9d5 	bl	800ebf0 <HAL_GetTick>
 8010846:	4602      	mov	r2, r0
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	1ad3      	subs	r3, r2, r3
 801084c:	2b02      	cmp	r3, #2
 801084e:	d901      	bls.n	8010854 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8010850:	2303      	movs	r3, #3
 8010852:	e144      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010854:	4b1a      	ldr	r3, [pc, #104]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010858:	f003 0302 	and.w	r3, r3, #2
 801085c:	2b00      	cmp	r3, #0
 801085e:	d1f0      	bne.n	8010842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	f003 0304 	and.w	r3, r3, #4
 8010868:	2b00      	cmp	r3, #0
 801086a:	f000 80a0 	beq.w	80109ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801086e:	2300      	movs	r3, #0
 8010870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010872:	4b13      	ldr	r3, [pc, #76]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801087a:	2b00      	cmp	r3, #0
 801087c:	d10f      	bne.n	801089e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801087e:	2300      	movs	r3, #0
 8010880:	60bb      	str	r3, [r7, #8]
 8010882:	4b0f      	ldr	r3, [pc, #60]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010886:	4a0e      	ldr	r2, [pc, #56]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801088c:	6413      	str	r3, [r2, #64]	; 0x40
 801088e:	4b0c      	ldr	r3, [pc, #48]	; (80108c0 <HAL_RCC_OscConfig+0x2ac>)
 8010890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010896:	60bb      	str	r3, [r7, #8]
 8010898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801089a:	2301      	movs	r3, #1
 801089c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801089e:	4b0b      	ldr	r3, [pc, #44]	; (80108cc <HAL_RCC_OscConfig+0x2b8>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d121      	bne.n	80108ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80108aa:	4b08      	ldr	r3, [pc, #32]	; (80108cc <HAL_RCC_OscConfig+0x2b8>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	4a07      	ldr	r2, [pc, #28]	; (80108cc <HAL_RCC_OscConfig+0x2b8>)
 80108b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80108b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80108b6:	f7fe f99b 	bl	800ebf0 <HAL_GetTick>
 80108ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80108bc:	e011      	b.n	80108e2 <HAL_RCC_OscConfig+0x2ce>
 80108be:	bf00      	nop
 80108c0:	40023800 	.word	0x40023800
 80108c4:	42470000 	.word	0x42470000
 80108c8:	42470e80 	.word	0x42470e80
 80108cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80108d0:	f7fe f98e 	bl	800ebf0 <HAL_GetTick>
 80108d4:	4602      	mov	r2, r0
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	1ad3      	subs	r3, r2, r3
 80108da:	2b02      	cmp	r3, #2
 80108dc:	d901      	bls.n	80108e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80108de:	2303      	movs	r3, #3
 80108e0:	e0fd      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80108e2:	4b81      	ldr	r3, [pc, #516]	; (8010ae8 <HAL_RCC_OscConfig+0x4d4>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d0f0      	beq.n	80108d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	689b      	ldr	r3, [r3, #8]
 80108f2:	2b01      	cmp	r3, #1
 80108f4:	d106      	bne.n	8010904 <HAL_RCC_OscConfig+0x2f0>
 80108f6:	4b7d      	ldr	r3, [pc, #500]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 80108f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108fa:	4a7c      	ldr	r2, [pc, #496]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 80108fc:	f043 0301 	orr.w	r3, r3, #1
 8010900:	6713      	str	r3, [r2, #112]	; 0x70
 8010902:	e01c      	b.n	801093e <HAL_RCC_OscConfig+0x32a>
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	689b      	ldr	r3, [r3, #8]
 8010908:	2b05      	cmp	r3, #5
 801090a:	d10c      	bne.n	8010926 <HAL_RCC_OscConfig+0x312>
 801090c:	4b77      	ldr	r3, [pc, #476]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 801090e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010910:	4a76      	ldr	r2, [pc, #472]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 8010912:	f043 0304 	orr.w	r3, r3, #4
 8010916:	6713      	str	r3, [r2, #112]	; 0x70
 8010918:	4b74      	ldr	r3, [pc, #464]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 801091a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801091c:	4a73      	ldr	r2, [pc, #460]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 801091e:	f043 0301 	orr.w	r3, r3, #1
 8010922:	6713      	str	r3, [r2, #112]	; 0x70
 8010924:	e00b      	b.n	801093e <HAL_RCC_OscConfig+0x32a>
 8010926:	4b71      	ldr	r3, [pc, #452]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 8010928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801092a:	4a70      	ldr	r2, [pc, #448]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 801092c:	f023 0301 	bic.w	r3, r3, #1
 8010930:	6713      	str	r3, [r2, #112]	; 0x70
 8010932:	4b6e      	ldr	r3, [pc, #440]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 8010934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010936:	4a6d      	ldr	r2, [pc, #436]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 8010938:	f023 0304 	bic.w	r3, r3, #4
 801093c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	689b      	ldr	r3, [r3, #8]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d015      	beq.n	8010972 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010946:	f7fe f953 	bl	800ebf0 <HAL_GetTick>
 801094a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801094c:	e00a      	b.n	8010964 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801094e:	f7fe f94f 	bl	800ebf0 <HAL_GetTick>
 8010952:	4602      	mov	r2, r0
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	1ad3      	subs	r3, r2, r3
 8010958:	f241 3288 	movw	r2, #5000	; 0x1388
 801095c:	4293      	cmp	r3, r2
 801095e:	d901      	bls.n	8010964 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8010960:	2303      	movs	r3, #3
 8010962:	e0bc      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010964:	4b61      	ldr	r3, [pc, #388]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 8010966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010968:	f003 0302 	and.w	r3, r3, #2
 801096c:	2b00      	cmp	r3, #0
 801096e:	d0ee      	beq.n	801094e <HAL_RCC_OscConfig+0x33a>
 8010970:	e014      	b.n	801099c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010972:	f7fe f93d 	bl	800ebf0 <HAL_GetTick>
 8010976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010978:	e00a      	b.n	8010990 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801097a:	f7fe f939 	bl	800ebf0 <HAL_GetTick>
 801097e:	4602      	mov	r2, r0
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	1ad3      	subs	r3, r2, r3
 8010984:	f241 3288 	movw	r2, #5000	; 0x1388
 8010988:	4293      	cmp	r3, r2
 801098a:	d901      	bls.n	8010990 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 801098c:	2303      	movs	r3, #3
 801098e:	e0a6      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010990:	4b56      	ldr	r3, [pc, #344]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 8010992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010994:	f003 0302 	and.w	r3, r3, #2
 8010998:	2b00      	cmp	r3, #0
 801099a:	d1ee      	bne.n	801097a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801099c:	7dfb      	ldrb	r3, [r7, #23]
 801099e:	2b01      	cmp	r3, #1
 80109a0:	d105      	bne.n	80109ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80109a2:	4b52      	ldr	r3, [pc, #328]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 80109a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109a6:	4a51      	ldr	r2, [pc, #324]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 80109a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80109ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	699b      	ldr	r3, [r3, #24]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	f000 8092 	beq.w	8010adc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80109b8:	4b4c      	ldr	r3, [pc, #304]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 80109ba:	689b      	ldr	r3, [r3, #8]
 80109bc:	f003 030c 	and.w	r3, r3, #12
 80109c0:	2b08      	cmp	r3, #8
 80109c2:	d05c      	beq.n	8010a7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	699b      	ldr	r3, [r3, #24]
 80109c8:	2b02      	cmp	r3, #2
 80109ca:	d141      	bne.n	8010a50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80109cc:	4b48      	ldr	r3, [pc, #288]	; (8010af0 <HAL_RCC_OscConfig+0x4dc>)
 80109ce:	2200      	movs	r2, #0
 80109d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80109d2:	f7fe f90d 	bl	800ebf0 <HAL_GetTick>
 80109d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80109d8:	e008      	b.n	80109ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80109da:	f7fe f909 	bl	800ebf0 <HAL_GetTick>
 80109de:	4602      	mov	r2, r0
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	1ad3      	subs	r3, r2, r3
 80109e4:	2b02      	cmp	r3, #2
 80109e6:	d901      	bls.n	80109ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80109e8:	2303      	movs	r3, #3
 80109ea:	e078      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80109ec:	4b3f      	ldr	r3, [pc, #252]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d1f0      	bne.n	80109da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	69da      	ldr	r2, [r3, #28]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6a1b      	ldr	r3, [r3, #32]
 8010a00:	431a      	orrs	r2, r3
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a06:	019b      	lsls	r3, r3, #6
 8010a08:	431a      	orrs	r2, r3
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a0e:	085b      	lsrs	r3, r3, #1
 8010a10:	3b01      	subs	r3, #1
 8010a12:	041b      	lsls	r3, r3, #16
 8010a14:	431a      	orrs	r2, r3
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a1a:	061b      	lsls	r3, r3, #24
 8010a1c:	4933      	ldr	r1, [pc, #204]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010a22:	4b33      	ldr	r3, [pc, #204]	; (8010af0 <HAL_RCC_OscConfig+0x4dc>)
 8010a24:	2201      	movs	r2, #1
 8010a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010a28:	f7fe f8e2 	bl	800ebf0 <HAL_GetTick>
 8010a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010a2e:	e008      	b.n	8010a42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010a30:	f7fe f8de 	bl	800ebf0 <HAL_GetTick>
 8010a34:	4602      	mov	r2, r0
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	1ad3      	subs	r3, r2, r3
 8010a3a:	2b02      	cmp	r3, #2
 8010a3c:	d901      	bls.n	8010a42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8010a3e:	2303      	movs	r3, #3
 8010a40:	e04d      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010a42:	4b2a      	ldr	r3, [pc, #168]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d0f0      	beq.n	8010a30 <HAL_RCC_OscConfig+0x41c>
 8010a4e:	e045      	b.n	8010adc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010a50:	4b27      	ldr	r3, [pc, #156]	; (8010af0 <HAL_RCC_OscConfig+0x4dc>)
 8010a52:	2200      	movs	r2, #0
 8010a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010a56:	f7fe f8cb 	bl	800ebf0 <HAL_GetTick>
 8010a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010a5c:	e008      	b.n	8010a70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010a5e:	f7fe f8c7 	bl	800ebf0 <HAL_GetTick>
 8010a62:	4602      	mov	r2, r0
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	1ad3      	subs	r3, r2, r3
 8010a68:	2b02      	cmp	r3, #2
 8010a6a:	d901      	bls.n	8010a70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8010a6c:	2303      	movs	r3, #3
 8010a6e:	e036      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010a70:	4b1e      	ldr	r3, [pc, #120]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d1f0      	bne.n	8010a5e <HAL_RCC_OscConfig+0x44a>
 8010a7c:	e02e      	b.n	8010adc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	699b      	ldr	r3, [r3, #24]
 8010a82:	2b01      	cmp	r3, #1
 8010a84:	d101      	bne.n	8010a8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8010a86:	2301      	movs	r3, #1
 8010a88:	e029      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010a8a:	4b18      	ldr	r3, [pc, #96]	; (8010aec <HAL_RCC_OscConfig+0x4d8>)
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	69db      	ldr	r3, [r3, #28]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d11c      	bne.n	8010ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d115      	bne.n	8010ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010aac:	68fa      	ldr	r2, [r7, #12]
 8010aae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010ab2:	4013      	ands	r3, r2
 8010ab4:	687a      	ldr	r2, [r7, #4]
 8010ab6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010ab8:	4293      	cmp	r3, r2
 8010aba:	d10d      	bne.n	8010ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d106      	bne.n	8010ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d001      	beq.n	8010adc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8010ad8:	2301      	movs	r3, #1
 8010ada:	e000      	b.n	8010ade <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8010adc:	2300      	movs	r3, #0
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3718      	adds	r7, #24
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	40007000 	.word	0x40007000
 8010aec:	40023800 	.word	0x40023800
 8010af0:	42470060 	.word	0x42470060

08010af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d101      	bne.n	8010b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010b04:	2301      	movs	r3, #1
 8010b06:	e0cc      	b.n	8010ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010b08:	4b68      	ldr	r3, [pc, #416]	; (8010cac <HAL_RCC_ClockConfig+0x1b8>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	f003 030f 	and.w	r3, r3, #15
 8010b10:	683a      	ldr	r2, [r7, #0]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d90c      	bls.n	8010b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010b16:	4b65      	ldr	r3, [pc, #404]	; (8010cac <HAL_RCC_ClockConfig+0x1b8>)
 8010b18:	683a      	ldr	r2, [r7, #0]
 8010b1a:	b2d2      	uxtb	r2, r2
 8010b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010b1e:	4b63      	ldr	r3, [pc, #396]	; (8010cac <HAL_RCC_ClockConfig+0x1b8>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	f003 030f 	and.w	r3, r3, #15
 8010b26:	683a      	ldr	r2, [r7, #0]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d001      	beq.n	8010b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	e0b8      	b.n	8010ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	f003 0302 	and.w	r3, r3, #2
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d020      	beq.n	8010b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	f003 0304 	and.w	r3, r3, #4
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d005      	beq.n	8010b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010b48:	4b59      	ldr	r3, [pc, #356]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010b4a:	689b      	ldr	r3, [r3, #8]
 8010b4c:	4a58      	ldr	r2, [pc, #352]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f003 0308 	and.w	r3, r3, #8
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d005      	beq.n	8010b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010b60:	4b53      	ldr	r3, [pc, #332]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010b62:	689b      	ldr	r3, [r3, #8]
 8010b64:	4a52      	ldr	r2, [pc, #328]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010b6c:	4b50      	ldr	r3, [pc, #320]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010b6e:	689b      	ldr	r3, [r3, #8]
 8010b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	689b      	ldr	r3, [r3, #8]
 8010b78:	494d      	ldr	r1, [pc, #308]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010b7a:	4313      	orrs	r3, r2
 8010b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	f003 0301 	and.w	r3, r3, #1
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d044      	beq.n	8010c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	685b      	ldr	r3, [r3, #4]
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d107      	bne.n	8010ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010b92:	4b47      	ldr	r3, [pc, #284]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d119      	bne.n	8010bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	e07f      	b.n	8010ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	685b      	ldr	r3, [r3, #4]
 8010ba6:	2b02      	cmp	r3, #2
 8010ba8:	d003      	beq.n	8010bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010bae:	2b03      	cmp	r3, #3
 8010bb0:	d107      	bne.n	8010bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010bb2:	4b3f      	ldr	r3, [pc, #252]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d109      	bne.n	8010bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e06f      	b.n	8010ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010bc2:	4b3b      	ldr	r3, [pc, #236]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f003 0302 	and.w	r3, r3, #2
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d101      	bne.n	8010bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010bce:	2301      	movs	r3, #1
 8010bd0:	e067      	b.n	8010ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010bd2:	4b37      	ldr	r3, [pc, #220]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010bd4:	689b      	ldr	r3, [r3, #8]
 8010bd6:	f023 0203 	bic.w	r2, r3, #3
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	4934      	ldr	r1, [pc, #208]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010be0:	4313      	orrs	r3, r2
 8010be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010be4:	f7fe f804 	bl	800ebf0 <HAL_GetTick>
 8010be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010bea:	e00a      	b.n	8010c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010bec:	f7fe f800 	bl	800ebf0 <HAL_GetTick>
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	1ad3      	subs	r3, r2, r3
 8010bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bfa:	4293      	cmp	r3, r2
 8010bfc:	d901      	bls.n	8010c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010bfe:	2303      	movs	r3, #3
 8010c00:	e04f      	b.n	8010ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010c02:	4b2b      	ldr	r3, [pc, #172]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010c04:	689b      	ldr	r3, [r3, #8]
 8010c06:	f003 020c 	and.w	r2, r3, #12
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	685b      	ldr	r3, [r3, #4]
 8010c0e:	009b      	lsls	r3, r3, #2
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d1eb      	bne.n	8010bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010c14:	4b25      	ldr	r3, [pc, #148]	; (8010cac <HAL_RCC_ClockConfig+0x1b8>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	f003 030f 	and.w	r3, r3, #15
 8010c1c:	683a      	ldr	r2, [r7, #0]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d20c      	bcs.n	8010c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010c22:	4b22      	ldr	r3, [pc, #136]	; (8010cac <HAL_RCC_ClockConfig+0x1b8>)
 8010c24:	683a      	ldr	r2, [r7, #0]
 8010c26:	b2d2      	uxtb	r2, r2
 8010c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010c2a:	4b20      	ldr	r3, [pc, #128]	; (8010cac <HAL_RCC_ClockConfig+0x1b8>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f003 030f 	and.w	r3, r3, #15
 8010c32:	683a      	ldr	r2, [r7, #0]
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d001      	beq.n	8010c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	e032      	b.n	8010ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	f003 0304 	and.w	r3, r3, #4
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d008      	beq.n	8010c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010c48:	4b19      	ldr	r3, [pc, #100]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010c4a:	689b      	ldr	r3, [r3, #8]
 8010c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	68db      	ldr	r3, [r3, #12]
 8010c54:	4916      	ldr	r1, [pc, #88]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010c56:	4313      	orrs	r3, r2
 8010c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f003 0308 	and.w	r3, r3, #8
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d009      	beq.n	8010c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010c66:	4b12      	ldr	r3, [pc, #72]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010c68:	689b      	ldr	r3, [r3, #8]
 8010c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	691b      	ldr	r3, [r3, #16]
 8010c72:	00db      	lsls	r3, r3, #3
 8010c74:	490e      	ldr	r1, [pc, #56]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010c76:	4313      	orrs	r3, r2
 8010c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010c7a:	f000 f821 	bl	8010cc0 <HAL_RCC_GetSysClockFreq>
 8010c7e:	4601      	mov	r1, r0
 8010c80:	4b0b      	ldr	r3, [pc, #44]	; (8010cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8010c82:	689b      	ldr	r3, [r3, #8]
 8010c84:	091b      	lsrs	r3, r3, #4
 8010c86:	f003 030f 	and.w	r3, r3, #15
 8010c8a:	4a0a      	ldr	r2, [pc, #40]	; (8010cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8010c8c:	5cd3      	ldrb	r3, [r2, r3]
 8010c8e:	fa21 f303 	lsr.w	r3, r1, r3
 8010c92:	4a09      	ldr	r2, [pc, #36]	; (8010cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8010c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010c96:	4b09      	ldr	r3, [pc, #36]	; (8010cbc <HAL_RCC_ClockConfig+0x1c8>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7fd ff64 	bl	800eb68 <HAL_InitTick>

  return HAL_OK;
 8010ca0:	2300      	movs	r3, #0
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3710      	adds	r7, #16
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
 8010caa:	bf00      	nop
 8010cac:	40023c00 	.word	0x40023c00
 8010cb0:	40023800 	.word	0x40023800
 8010cb4:	08019280 	.word	0x08019280
 8010cb8:	20000024 	.word	0x20000024
 8010cbc:	20000030 	.word	0x20000030

08010cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cc2:	b085      	sub	sp, #20
 8010cc4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	607b      	str	r3, [r7, #4]
 8010cca:	2300      	movs	r3, #0
 8010ccc:	60fb      	str	r3, [r7, #12]
 8010cce:	2300      	movs	r3, #0
 8010cd0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010cd6:	4b63      	ldr	r3, [pc, #396]	; (8010e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010cd8:	689b      	ldr	r3, [r3, #8]
 8010cda:	f003 030c 	and.w	r3, r3, #12
 8010cde:	2b04      	cmp	r3, #4
 8010ce0:	d007      	beq.n	8010cf2 <HAL_RCC_GetSysClockFreq+0x32>
 8010ce2:	2b08      	cmp	r3, #8
 8010ce4:	d008      	beq.n	8010cf8 <HAL_RCC_GetSysClockFreq+0x38>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	f040 80b4 	bne.w	8010e54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010cec:	4b5e      	ldr	r3, [pc, #376]	; (8010e68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010cee:	60bb      	str	r3, [r7, #8]
       break;
 8010cf0:	e0b3      	b.n	8010e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010cf2:	4b5e      	ldr	r3, [pc, #376]	; (8010e6c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8010cf4:	60bb      	str	r3, [r7, #8]
      break;
 8010cf6:	e0b0      	b.n	8010e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010cf8:	4b5a      	ldr	r3, [pc, #360]	; (8010e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010d02:	4b58      	ldr	r3, [pc, #352]	; (8010e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d04a      	beq.n	8010da4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010d0e:	4b55      	ldr	r3, [pc, #340]	; (8010e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	099b      	lsrs	r3, r3, #6
 8010d14:	f04f 0400 	mov.w	r4, #0
 8010d18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010d1c:	f04f 0200 	mov.w	r2, #0
 8010d20:	ea03 0501 	and.w	r5, r3, r1
 8010d24:	ea04 0602 	and.w	r6, r4, r2
 8010d28:	4629      	mov	r1, r5
 8010d2a:	4632      	mov	r2, r6
 8010d2c:	f04f 0300 	mov.w	r3, #0
 8010d30:	f04f 0400 	mov.w	r4, #0
 8010d34:	0154      	lsls	r4, r2, #5
 8010d36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8010d3a:	014b      	lsls	r3, r1, #5
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	4622      	mov	r2, r4
 8010d40:	1b49      	subs	r1, r1, r5
 8010d42:	eb62 0206 	sbc.w	r2, r2, r6
 8010d46:	f04f 0300 	mov.w	r3, #0
 8010d4a:	f04f 0400 	mov.w	r4, #0
 8010d4e:	0194      	lsls	r4, r2, #6
 8010d50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8010d54:	018b      	lsls	r3, r1, #6
 8010d56:	1a5b      	subs	r3, r3, r1
 8010d58:	eb64 0402 	sbc.w	r4, r4, r2
 8010d5c:	f04f 0100 	mov.w	r1, #0
 8010d60:	f04f 0200 	mov.w	r2, #0
 8010d64:	00e2      	lsls	r2, r4, #3
 8010d66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8010d6a:	00d9      	lsls	r1, r3, #3
 8010d6c:	460b      	mov	r3, r1
 8010d6e:	4614      	mov	r4, r2
 8010d70:	195b      	adds	r3, r3, r5
 8010d72:	eb44 0406 	adc.w	r4, r4, r6
 8010d76:	f04f 0100 	mov.w	r1, #0
 8010d7a:	f04f 0200 	mov.w	r2, #0
 8010d7e:	0262      	lsls	r2, r4, #9
 8010d80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8010d84:	0259      	lsls	r1, r3, #9
 8010d86:	460b      	mov	r3, r1
 8010d88:	4614      	mov	r4, r2
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	4621      	mov	r1, r4
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f04f 0400 	mov.w	r4, #0
 8010d94:	461a      	mov	r2, r3
 8010d96:	4623      	mov	r3, r4
 8010d98:	f7f7 feae 	bl	8008af8 <__aeabi_uldivmod>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	460c      	mov	r4, r1
 8010da0:	60fb      	str	r3, [r7, #12]
 8010da2:	e049      	b.n	8010e38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010da4:	4b2f      	ldr	r3, [pc, #188]	; (8010e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010da6:	685b      	ldr	r3, [r3, #4]
 8010da8:	099b      	lsrs	r3, r3, #6
 8010daa:	f04f 0400 	mov.w	r4, #0
 8010dae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010db2:	f04f 0200 	mov.w	r2, #0
 8010db6:	ea03 0501 	and.w	r5, r3, r1
 8010dba:	ea04 0602 	and.w	r6, r4, r2
 8010dbe:	4629      	mov	r1, r5
 8010dc0:	4632      	mov	r2, r6
 8010dc2:	f04f 0300 	mov.w	r3, #0
 8010dc6:	f04f 0400 	mov.w	r4, #0
 8010dca:	0154      	lsls	r4, r2, #5
 8010dcc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8010dd0:	014b      	lsls	r3, r1, #5
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	4622      	mov	r2, r4
 8010dd6:	1b49      	subs	r1, r1, r5
 8010dd8:	eb62 0206 	sbc.w	r2, r2, r6
 8010ddc:	f04f 0300 	mov.w	r3, #0
 8010de0:	f04f 0400 	mov.w	r4, #0
 8010de4:	0194      	lsls	r4, r2, #6
 8010de6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8010dea:	018b      	lsls	r3, r1, #6
 8010dec:	1a5b      	subs	r3, r3, r1
 8010dee:	eb64 0402 	sbc.w	r4, r4, r2
 8010df2:	f04f 0100 	mov.w	r1, #0
 8010df6:	f04f 0200 	mov.w	r2, #0
 8010dfa:	00e2      	lsls	r2, r4, #3
 8010dfc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8010e00:	00d9      	lsls	r1, r3, #3
 8010e02:	460b      	mov	r3, r1
 8010e04:	4614      	mov	r4, r2
 8010e06:	195b      	adds	r3, r3, r5
 8010e08:	eb44 0406 	adc.w	r4, r4, r6
 8010e0c:	f04f 0100 	mov.w	r1, #0
 8010e10:	f04f 0200 	mov.w	r2, #0
 8010e14:	02a2      	lsls	r2, r4, #10
 8010e16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8010e1a:	0299      	lsls	r1, r3, #10
 8010e1c:	460b      	mov	r3, r1
 8010e1e:	4614      	mov	r4, r2
 8010e20:	4618      	mov	r0, r3
 8010e22:	4621      	mov	r1, r4
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f04f 0400 	mov.w	r4, #0
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	4623      	mov	r3, r4
 8010e2e:	f7f7 fe63 	bl	8008af8 <__aeabi_uldivmod>
 8010e32:	4603      	mov	r3, r0
 8010e34:	460c      	mov	r4, r1
 8010e36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010e38:	4b0a      	ldr	r3, [pc, #40]	; (8010e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010e3a:	685b      	ldr	r3, [r3, #4]
 8010e3c:	0c1b      	lsrs	r3, r3, #16
 8010e3e:	f003 0303 	and.w	r3, r3, #3
 8010e42:	3301      	adds	r3, #1
 8010e44:	005b      	lsls	r3, r3, #1
 8010e46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8010e48:	68fa      	ldr	r2, [r7, #12]
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e50:	60bb      	str	r3, [r7, #8]
      break;
 8010e52:	e002      	b.n	8010e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010e54:	4b04      	ldr	r3, [pc, #16]	; (8010e68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010e56:	60bb      	str	r3, [r7, #8]
      break;
 8010e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010e5a:	68bb      	ldr	r3, [r7, #8]
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3714      	adds	r7, #20
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e64:	40023800 	.word	0x40023800
 8010e68:	00f42400 	.word	0x00f42400
 8010e6c:	007a1200 	.word	0x007a1200

08010e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010e70:	b480      	push	{r7}
 8010e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010e74:	4b03      	ldr	r3, [pc, #12]	; (8010e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8010e76:	681b      	ldr	r3, [r3, #0]
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr
 8010e82:	bf00      	nop
 8010e84:	20000024 	.word	0x20000024

08010e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010e8c:	f7ff fff0 	bl	8010e70 <HAL_RCC_GetHCLKFreq>
 8010e90:	4601      	mov	r1, r0
 8010e92:	4b05      	ldr	r3, [pc, #20]	; (8010ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010e94:	689b      	ldr	r3, [r3, #8]
 8010e96:	0a9b      	lsrs	r3, r3, #10
 8010e98:	f003 0307 	and.w	r3, r3, #7
 8010e9c:	4a03      	ldr	r2, [pc, #12]	; (8010eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8010e9e:	5cd3      	ldrb	r3, [r2, r3]
 8010ea0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	40023800 	.word	0x40023800
 8010eac:	08019290 	.word	0x08019290

08010eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010eb4:	f7ff ffdc 	bl	8010e70 <HAL_RCC_GetHCLKFreq>
 8010eb8:	4601      	mov	r1, r0
 8010eba:	4b05      	ldr	r3, [pc, #20]	; (8010ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010ebc:	689b      	ldr	r3, [r3, #8]
 8010ebe:	0b5b      	lsrs	r3, r3, #13
 8010ec0:	f003 0307 	and.w	r3, r3, #7
 8010ec4:	4a03      	ldr	r2, [pc, #12]	; (8010ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010ec6:	5cd3      	ldrb	r3, [r2, r3]
 8010ec8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	40023800 	.word	0x40023800
 8010ed4:	08019290 	.word	0x08019290

08010ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b082      	sub	sp, #8
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d101      	bne.n	8010eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	e056      	b.n	8010f98 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2200      	movs	r2, #0
 8010eee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010ef6:	b2db      	uxtb	r3, r3
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d106      	bne.n	8010f0a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2200      	movs	r2, #0
 8010f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f7fb fea9 	bl	800cc5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2202      	movs	r2, #2
 8010f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f20:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	685a      	ldr	r2, [r3, #4]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	689b      	ldr	r3, [r3, #8]
 8010f2a:	431a      	orrs	r2, r3
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	68db      	ldr	r3, [r3, #12]
 8010f30:	431a      	orrs	r2, r3
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	691b      	ldr	r3, [r3, #16]
 8010f36:	431a      	orrs	r2, r3
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	695b      	ldr	r3, [r3, #20]
 8010f3c:	431a      	orrs	r2, r3
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	699b      	ldr	r3, [r3, #24]
 8010f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010f46:	431a      	orrs	r2, r3
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	69db      	ldr	r3, [r3, #28]
 8010f4c:	431a      	orrs	r2, r3
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6a1b      	ldr	r3, [r3, #32]
 8010f52:	ea42 0103 	orr.w	r1, r2, r3
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	430a      	orrs	r2, r1
 8010f60:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	699b      	ldr	r3, [r3, #24]
 8010f66:	0c1b      	lsrs	r3, r3, #16
 8010f68:	f003 0104 	and.w	r1, r3, #4
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	430a      	orrs	r2, r1
 8010f76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	69da      	ldr	r2, [r3, #28]
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010f86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2201      	movs	r2, #1
 8010f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010f96:	2300      	movs	r3, #0
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b088      	sub	sp, #32
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	60f8      	str	r0, [r7, #12]
 8010fa8:	60b9      	str	r1, [r7, #8]
 8010faa:	603b      	str	r3, [r7, #0]
 8010fac:	4613      	mov	r3, r2
 8010fae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d101      	bne.n	8010fc2 <HAL_SPI_Transmit+0x22>
 8010fbe:	2302      	movs	r3, #2
 8010fc0:	e11e      	b.n	8011200 <HAL_SPI_Transmit+0x260>
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	2201      	movs	r2, #1
 8010fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010fca:	f7fd fe11 	bl	800ebf0 <HAL_GetTick>
 8010fce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010fd0:	88fb      	ldrh	r3, [r7, #6]
 8010fd2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	d002      	beq.n	8010fe6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010fe0:	2302      	movs	r3, #2
 8010fe2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010fe4:	e103      	b.n	80111ee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8010fe6:	68bb      	ldr	r3, [r7, #8]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d002      	beq.n	8010ff2 <HAL_SPI_Transmit+0x52>
 8010fec:	88fb      	ldrh	r3, [r7, #6]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d102      	bne.n	8010ff8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010ff6:	e0fa      	b.n	80111ee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	2203      	movs	r2, #3
 8010ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	2200      	movs	r2, #0
 8011004:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	68ba      	ldr	r2, [r7, #8]
 801100a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	88fa      	ldrh	r2, [r7, #6]
 8011010:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	88fa      	ldrh	r2, [r7, #6]
 8011016:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	2200      	movs	r2, #0
 801101c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	2200      	movs	r2, #0
 8011022:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2200      	movs	r2, #0
 8011028:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	2200      	movs	r2, #0
 801102e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	2200      	movs	r2, #0
 8011034:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	689b      	ldr	r3, [r3, #8]
 801103a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801103e:	d107      	bne.n	8011050 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	681a      	ldr	r2, [r3, #0]
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801104e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801105a:	2b40      	cmp	r3, #64	; 0x40
 801105c:	d007      	beq.n	801106e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801106c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	68db      	ldr	r3, [r3, #12]
 8011072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011076:	d14b      	bne.n	8011110 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d002      	beq.n	8011086 <HAL_SPI_Transmit+0xe6>
 8011080:	8afb      	ldrh	r3, [r7, #22]
 8011082:	2b01      	cmp	r3, #1
 8011084:	d13e      	bne.n	8011104 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801108a:	881a      	ldrh	r2, [r3, #0]
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011096:	1c9a      	adds	r2, r3, #2
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	3b01      	subs	r3, #1
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80110aa:	e02b      	b.n	8011104 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	689b      	ldr	r3, [r3, #8]
 80110b2:	f003 0302 	and.w	r3, r3, #2
 80110b6:	2b02      	cmp	r3, #2
 80110b8:	d112      	bne.n	80110e0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110be:	881a      	ldrh	r2, [r3, #0]
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110ca:	1c9a      	adds	r2, r3, #2
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	3b01      	subs	r3, #1
 80110d8:	b29a      	uxth	r2, r3
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80110de:	e011      	b.n	8011104 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80110e0:	f7fd fd86 	bl	800ebf0 <HAL_GetTick>
 80110e4:	4602      	mov	r2, r0
 80110e6:	69bb      	ldr	r3, [r7, #24]
 80110e8:	1ad3      	subs	r3, r2, r3
 80110ea:	683a      	ldr	r2, [r7, #0]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d803      	bhi.n	80110f8 <HAL_SPI_Transmit+0x158>
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110f6:	d102      	bne.n	80110fe <HAL_SPI_Transmit+0x15e>
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d102      	bne.n	8011104 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80110fe:	2303      	movs	r3, #3
 8011100:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011102:	e074      	b.n	80111ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011108:	b29b      	uxth	r3, r3
 801110a:	2b00      	cmp	r3, #0
 801110c:	d1ce      	bne.n	80110ac <HAL_SPI_Transmit+0x10c>
 801110e:	e04c      	b.n	80111aa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d002      	beq.n	801111e <HAL_SPI_Transmit+0x17e>
 8011118:	8afb      	ldrh	r3, [r7, #22]
 801111a:	2b01      	cmp	r3, #1
 801111c:	d140      	bne.n	80111a0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	330c      	adds	r3, #12
 8011128:	7812      	ldrb	r2, [r2, #0]
 801112a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011130:	1c5a      	adds	r2, r3, #1
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801113a:	b29b      	uxth	r3, r3
 801113c:	3b01      	subs	r3, #1
 801113e:	b29a      	uxth	r2, r3
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8011144:	e02c      	b.n	80111a0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	689b      	ldr	r3, [r3, #8]
 801114c:	f003 0302 	and.w	r3, r3, #2
 8011150:	2b02      	cmp	r3, #2
 8011152:	d113      	bne.n	801117c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	330c      	adds	r3, #12
 801115e:	7812      	ldrb	r2, [r2, #0]
 8011160:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011166:	1c5a      	adds	r2, r3, #1
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011170:	b29b      	uxth	r3, r3
 8011172:	3b01      	subs	r3, #1
 8011174:	b29a      	uxth	r2, r3
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	86da      	strh	r2, [r3, #54]	; 0x36
 801117a:	e011      	b.n	80111a0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801117c:	f7fd fd38 	bl	800ebf0 <HAL_GetTick>
 8011180:	4602      	mov	r2, r0
 8011182:	69bb      	ldr	r3, [r7, #24]
 8011184:	1ad3      	subs	r3, r2, r3
 8011186:	683a      	ldr	r2, [r7, #0]
 8011188:	429a      	cmp	r2, r3
 801118a:	d803      	bhi.n	8011194 <HAL_SPI_Transmit+0x1f4>
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011192:	d102      	bne.n	801119a <HAL_SPI_Transmit+0x1fa>
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d102      	bne.n	80111a0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 801119a:	2303      	movs	r3, #3
 801119c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801119e:	e026      	b.n	80111ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d1cd      	bne.n	8011146 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80111aa:	69ba      	ldr	r2, [r7, #24]
 80111ac:	6839      	ldr	r1, [r7, #0]
 80111ae:	68f8      	ldr	r0, [r7, #12]
 80111b0:	f000 fba4 	bl	80118fc <SPI_EndRxTxTransaction>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d002      	beq.n	80111c0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	2220      	movs	r2, #32
 80111be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	689b      	ldr	r3, [r3, #8]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d10a      	bne.n	80111de <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80111c8:	2300      	movs	r3, #0
 80111ca:	613b      	str	r3, [r7, #16]
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	68db      	ldr	r3, [r3, #12]
 80111d2:	613b      	str	r3, [r7, #16]
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	689b      	ldr	r3, [r3, #8]
 80111da:	613b      	str	r3, [r7, #16]
 80111dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d002      	beq.n	80111ec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80111e6:	2301      	movs	r3, #1
 80111e8:	77fb      	strb	r3, [r7, #31]
 80111ea:	e000      	b.n	80111ee <HAL_SPI_Transmit+0x24e>
  }

error:
 80111ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2201      	movs	r2, #1
 80111f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	2200      	movs	r2, #0
 80111fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80111fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3720      	adds	r7, #32
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b088      	sub	sp, #32
 801120c:	af02      	add	r7, sp, #8
 801120e:	60f8      	str	r0, [r7, #12]
 8011210:	60b9      	str	r1, [r7, #8]
 8011212:	603b      	str	r3, [r7, #0]
 8011214:	4613      	mov	r3, r2
 8011216:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011218:	2300      	movs	r3, #0
 801121a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011224:	d112      	bne.n	801124c <HAL_SPI_Receive+0x44>
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	689b      	ldr	r3, [r3, #8]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d10e      	bne.n	801124c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	2204      	movs	r2, #4
 8011232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011236:	88fa      	ldrh	r2, [r7, #6]
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	9300      	str	r3, [sp, #0]
 801123c:	4613      	mov	r3, r2
 801123e:	68ba      	ldr	r2, [r7, #8]
 8011240:	68b9      	ldr	r1, [r7, #8]
 8011242:	68f8      	ldr	r0, [r7, #12]
 8011244:	f000 f8e9 	bl	801141a <HAL_SPI_TransmitReceive>
 8011248:	4603      	mov	r3, r0
 801124a:	e0e2      	b.n	8011412 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011252:	2b01      	cmp	r3, #1
 8011254:	d101      	bne.n	801125a <HAL_SPI_Receive+0x52>
 8011256:	2302      	movs	r3, #2
 8011258:	e0db      	b.n	8011412 <HAL_SPI_Receive+0x20a>
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2201      	movs	r2, #1
 801125e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011262:	f7fd fcc5 	bl	800ebf0 <HAL_GetTick>
 8011266:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801126e:	b2db      	uxtb	r3, r3
 8011270:	2b01      	cmp	r3, #1
 8011272:	d002      	beq.n	801127a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8011274:	2302      	movs	r3, #2
 8011276:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011278:	e0c2      	b.n	8011400 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d002      	beq.n	8011286 <HAL_SPI_Receive+0x7e>
 8011280:	88fb      	ldrh	r3, [r7, #6]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d102      	bne.n	801128c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8011286:	2301      	movs	r3, #1
 8011288:	75fb      	strb	r3, [r7, #23]
    goto error;
 801128a:	e0b9      	b.n	8011400 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	2204      	movs	r2, #4
 8011290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	2200      	movs	r2, #0
 8011298:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	68ba      	ldr	r2, [r7, #8]
 801129e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	88fa      	ldrh	r2, [r7, #6]
 80112a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	88fa      	ldrh	r2, [r7, #6]
 80112aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	2200      	movs	r2, #0
 80112b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	2200      	movs	r2, #0
 80112b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	2200      	movs	r2, #0
 80112bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2200      	movs	r2, #0
 80112c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2200      	movs	r2, #0
 80112c8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	689b      	ldr	r3, [r3, #8]
 80112ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80112d2:	d107      	bne.n	80112e4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	681a      	ldr	r2, [r3, #0]
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80112e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112ee:	2b40      	cmp	r3, #64	; 0x40
 80112f0:	d007      	beq.n	8011302 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	681a      	ldr	r2, [r3, #0]
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011300:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	68db      	ldr	r3, [r3, #12]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d162      	bne.n	80113d0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801130a:	e02e      	b.n	801136a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	689b      	ldr	r3, [r3, #8]
 8011312:	f003 0301 	and.w	r3, r3, #1
 8011316:	2b01      	cmp	r3, #1
 8011318:	d115      	bne.n	8011346 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f103 020c 	add.w	r2, r3, #12
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011326:	7812      	ldrb	r2, [r2, #0]
 8011328:	b2d2      	uxtb	r2, r2
 801132a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011330:	1c5a      	adds	r2, r3, #1
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801133a:	b29b      	uxth	r3, r3
 801133c:	3b01      	subs	r3, #1
 801133e:	b29a      	uxth	r2, r3
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011344:	e011      	b.n	801136a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011346:	f7fd fc53 	bl	800ebf0 <HAL_GetTick>
 801134a:	4602      	mov	r2, r0
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	1ad3      	subs	r3, r2, r3
 8011350:	683a      	ldr	r2, [r7, #0]
 8011352:	429a      	cmp	r2, r3
 8011354:	d803      	bhi.n	801135e <HAL_SPI_Receive+0x156>
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801135c:	d102      	bne.n	8011364 <HAL_SPI_Receive+0x15c>
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d102      	bne.n	801136a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8011364:	2303      	movs	r3, #3
 8011366:	75fb      	strb	r3, [r7, #23]
          goto error;
 8011368:	e04a      	b.n	8011400 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801136e:	b29b      	uxth	r3, r3
 8011370:	2b00      	cmp	r3, #0
 8011372:	d1cb      	bne.n	801130c <HAL_SPI_Receive+0x104>
 8011374:	e031      	b.n	80113da <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	689b      	ldr	r3, [r3, #8]
 801137c:	f003 0301 	and.w	r3, r3, #1
 8011380:	2b01      	cmp	r3, #1
 8011382:	d113      	bne.n	80113ac <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	68da      	ldr	r2, [r3, #12]
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801138e:	b292      	uxth	r2, r2
 8011390:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011396:	1c9a      	adds	r2, r3, #2
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80113a0:	b29b      	uxth	r3, r3
 80113a2:	3b01      	subs	r3, #1
 80113a4:	b29a      	uxth	r2, r3
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80113aa:	e011      	b.n	80113d0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80113ac:	f7fd fc20 	bl	800ebf0 <HAL_GetTick>
 80113b0:	4602      	mov	r2, r0
 80113b2:	693b      	ldr	r3, [r7, #16]
 80113b4:	1ad3      	subs	r3, r2, r3
 80113b6:	683a      	ldr	r2, [r7, #0]
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d803      	bhi.n	80113c4 <HAL_SPI_Receive+0x1bc>
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113c2:	d102      	bne.n	80113ca <HAL_SPI_Receive+0x1c2>
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d102      	bne.n	80113d0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80113ca:	2303      	movs	r3, #3
 80113cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80113ce:	e017      	b.n	8011400 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80113d4:	b29b      	uxth	r3, r3
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d1cd      	bne.n	8011376 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80113da:	693a      	ldr	r2, [r7, #16]
 80113dc:	6839      	ldr	r1, [r7, #0]
 80113de:	68f8      	ldr	r0, [r7, #12]
 80113e0:	f000 fa27 	bl	8011832 <SPI_EndRxTransaction>
 80113e4:	4603      	mov	r3, r0
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d002      	beq.n	80113f0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	2220      	movs	r2, #32
 80113ee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d002      	beq.n	80113fe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80113f8:	2301      	movs	r3, #1
 80113fa:	75fb      	strb	r3, [r7, #23]
 80113fc:	e000      	b.n	8011400 <HAL_SPI_Receive+0x1f8>
  }

error :
 80113fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2201      	movs	r2, #1
 8011404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	2200      	movs	r2, #0
 801140c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011410:	7dfb      	ldrb	r3, [r7, #23]
}
 8011412:	4618      	mov	r0, r3
 8011414:	3718      	adds	r7, #24
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}

0801141a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801141a:	b580      	push	{r7, lr}
 801141c:	b08c      	sub	sp, #48	; 0x30
 801141e:	af00      	add	r7, sp, #0
 8011420:	60f8      	str	r0, [r7, #12]
 8011422:	60b9      	str	r1, [r7, #8]
 8011424:	607a      	str	r2, [r7, #4]
 8011426:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011428:	2301      	movs	r3, #1
 801142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801142c:	2300      	movs	r3, #0
 801142e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011438:	2b01      	cmp	r3, #1
 801143a:	d101      	bne.n	8011440 <HAL_SPI_TransmitReceive+0x26>
 801143c:	2302      	movs	r3, #2
 801143e:	e18a      	b.n	8011756 <HAL_SPI_TransmitReceive+0x33c>
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	2201      	movs	r2, #1
 8011444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011448:	f7fd fbd2 	bl	800ebf0 <HAL_GetTick>
 801144c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801145e:	887b      	ldrh	r3, [r7, #2]
 8011460:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011462:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011466:	2b01      	cmp	r3, #1
 8011468:	d00f      	beq.n	801148a <HAL_SPI_TransmitReceive+0x70>
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011470:	d107      	bne.n	8011482 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	689b      	ldr	r3, [r3, #8]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d103      	bne.n	8011482 <HAL_SPI_TransmitReceive+0x68>
 801147a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801147e:	2b04      	cmp	r3, #4
 8011480:	d003      	beq.n	801148a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8011482:	2302      	movs	r3, #2
 8011484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011488:	e15b      	b.n	8011742 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d005      	beq.n	801149c <HAL_SPI_TransmitReceive+0x82>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d002      	beq.n	801149c <HAL_SPI_TransmitReceive+0x82>
 8011496:	887b      	ldrh	r3, [r7, #2]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d103      	bne.n	80114a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801149c:	2301      	movs	r3, #1
 801149e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80114a2:	e14e      	b.n	8011742 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80114aa:	b2db      	uxtb	r3, r3
 80114ac:	2b04      	cmp	r3, #4
 80114ae:	d003      	beq.n	80114b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	2205      	movs	r2, #5
 80114b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2200      	movs	r2, #0
 80114bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	887a      	ldrh	r2, [r7, #2]
 80114c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	887a      	ldrh	r2, [r7, #2]
 80114ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	68ba      	ldr	r2, [r7, #8]
 80114d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	887a      	ldrh	r2, [r7, #2]
 80114da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	887a      	ldrh	r2, [r7, #2]
 80114e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	2200      	movs	r2, #0
 80114e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2200      	movs	r2, #0
 80114ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114f8:	2b40      	cmp	r3, #64	; 0x40
 80114fa:	d007      	beq.n	801150c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	681a      	ldr	r2, [r3, #0]
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801150a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011514:	d178      	bne.n	8011608 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d002      	beq.n	8011524 <HAL_SPI_TransmitReceive+0x10a>
 801151e:	8b7b      	ldrh	r3, [r7, #26]
 8011520:	2b01      	cmp	r3, #1
 8011522:	d166      	bne.n	80115f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011528:	881a      	ldrh	r2, [r3, #0]
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011534:	1c9a      	adds	r2, r3, #2
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801153e:	b29b      	uxth	r3, r3
 8011540:	3b01      	subs	r3, #1
 8011542:	b29a      	uxth	r2, r3
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011548:	e053      	b.n	80115f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	689b      	ldr	r3, [r3, #8]
 8011550:	f003 0302 	and.w	r3, r3, #2
 8011554:	2b02      	cmp	r3, #2
 8011556:	d11b      	bne.n	8011590 <HAL_SPI_TransmitReceive+0x176>
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801155c:	b29b      	uxth	r3, r3
 801155e:	2b00      	cmp	r3, #0
 8011560:	d016      	beq.n	8011590 <HAL_SPI_TransmitReceive+0x176>
 8011562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011564:	2b01      	cmp	r3, #1
 8011566:	d113      	bne.n	8011590 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801156c:	881a      	ldrh	r2, [r3, #0]
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011578:	1c9a      	adds	r2, r3, #2
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011582:	b29b      	uxth	r3, r3
 8011584:	3b01      	subs	r3, #1
 8011586:	b29a      	uxth	r2, r3
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801158c:	2300      	movs	r3, #0
 801158e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	689b      	ldr	r3, [r3, #8]
 8011596:	f003 0301 	and.w	r3, r3, #1
 801159a:	2b01      	cmp	r3, #1
 801159c:	d119      	bne.n	80115d2 <HAL_SPI_TransmitReceive+0x1b8>
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80115a2:	b29b      	uxth	r3, r3
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d014      	beq.n	80115d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	68da      	ldr	r2, [r3, #12]
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115b2:	b292      	uxth	r2, r2
 80115b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ba:	1c9a      	adds	r2, r3, #2
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	3b01      	subs	r3, #1
 80115c8:	b29a      	uxth	r2, r3
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80115ce:	2301      	movs	r3, #1
 80115d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80115d2:	f7fd fb0d 	bl	800ebf0 <HAL_GetTick>
 80115d6:	4602      	mov	r2, r0
 80115d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115da:	1ad3      	subs	r3, r2, r3
 80115dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115de:	429a      	cmp	r2, r3
 80115e0:	d807      	bhi.n	80115f2 <HAL_SPI_TransmitReceive+0x1d8>
 80115e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115e8:	d003      	beq.n	80115f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80115ea:	2303      	movs	r3, #3
 80115ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80115f0:	e0a7      	b.n	8011742 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d1a6      	bne.n	801154a <HAL_SPI_TransmitReceive+0x130>
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011600:	b29b      	uxth	r3, r3
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1a1      	bne.n	801154a <HAL_SPI_TransmitReceive+0x130>
 8011606:	e07c      	b.n	8011702 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d002      	beq.n	8011616 <HAL_SPI_TransmitReceive+0x1fc>
 8011610:	8b7b      	ldrh	r3, [r7, #26]
 8011612:	2b01      	cmp	r3, #1
 8011614:	d16b      	bne.n	80116ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	330c      	adds	r3, #12
 8011620:	7812      	ldrb	r2, [r2, #0]
 8011622:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011628:	1c5a      	adds	r2, r3, #1
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011632:	b29b      	uxth	r3, r3
 8011634:	3b01      	subs	r3, #1
 8011636:	b29a      	uxth	r2, r3
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801163c:	e057      	b.n	80116ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	689b      	ldr	r3, [r3, #8]
 8011644:	f003 0302 	and.w	r3, r3, #2
 8011648:	2b02      	cmp	r3, #2
 801164a:	d11c      	bne.n	8011686 <HAL_SPI_TransmitReceive+0x26c>
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011650:	b29b      	uxth	r3, r3
 8011652:	2b00      	cmp	r3, #0
 8011654:	d017      	beq.n	8011686 <HAL_SPI_TransmitReceive+0x26c>
 8011656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011658:	2b01      	cmp	r3, #1
 801165a:	d114      	bne.n	8011686 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	330c      	adds	r3, #12
 8011666:	7812      	ldrb	r2, [r2, #0]
 8011668:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801166e:	1c5a      	adds	r2, r3, #1
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011678:	b29b      	uxth	r3, r3
 801167a:	3b01      	subs	r3, #1
 801167c:	b29a      	uxth	r2, r3
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011682:	2300      	movs	r3, #0
 8011684:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	689b      	ldr	r3, [r3, #8]
 801168c:	f003 0301 	and.w	r3, r3, #1
 8011690:	2b01      	cmp	r3, #1
 8011692:	d119      	bne.n	80116c8 <HAL_SPI_TransmitReceive+0x2ae>
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011698:	b29b      	uxth	r3, r3
 801169a:	2b00      	cmp	r3, #0
 801169c:	d014      	beq.n	80116c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	68da      	ldr	r2, [r3, #12]
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116a8:	b2d2      	uxtb	r2, r2
 80116aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116b0:	1c5a      	adds	r2, r3, #1
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80116ba:	b29b      	uxth	r3, r3
 80116bc:	3b01      	subs	r3, #1
 80116be:	b29a      	uxth	r2, r3
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80116c4:	2301      	movs	r3, #1
 80116c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80116c8:	f7fd fa92 	bl	800ebf0 <HAL_GetTick>
 80116cc:	4602      	mov	r2, r0
 80116ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d0:	1ad3      	subs	r3, r2, r3
 80116d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d803      	bhi.n	80116e0 <HAL_SPI_TransmitReceive+0x2c6>
 80116d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116de:	d102      	bne.n	80116e6 <HAL_SPI_TransmitReceive+0x2cc>
 80116e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d103      	bne.n	80116ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80116e6:	2303      	movs	r3, #3
 80116e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80116ec:	e029      	b.n	8011742 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d1a2      	bne.n	801163e <HAL_SPI_TransmitReceive+0x224>
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d19d      	bne.n	801163e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011704:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011706:	68f8      	ldr	r0, [r7, #12]
 8011708:	f000 f8f8 	bl	80118fc <SPI_EndRxTxTransaction>
 801170c:	4603      	mov	r3, r0
 801170e:	2b00      	cmp	r3, #0
 8011710:	d006      	beq.n	8011720 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8011712:	2301      	movs	r3, #1
 8011714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	2220      	movs	r2, #32
 801171c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801171e:	e010      	b.n	8011742 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	689b      	ldr	r3, [r3, #8]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d10b      	bne.n	8011740 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011728:	2300      	movs	r3, #0
 801172a:	617b      	str	r3, [r7, #20]
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	68db      	ldr	r3, [r3, #12]
 8011732:	617b      	str	r3, [r7, #20]
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	617b      	str	r3, [r7, #20]
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	e000      	b.n	8011742 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8011740:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2201      	movs	r2, #1
 8011746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	2200      	movs	r2, #0
 801174e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011752:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8011756:	4618      	mov	r0, r3
 8011758:	3730      	adds	r7, #48	; 0x30
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}

0801175e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801175e:	b580      	push	{r7, lr}
 8011760:	b084      	sub	sp, #16
 8011762:	af00      	add	r7, sp, #0
 8011764:	60f8      	str	r0, [r7, #12]
 8011766:	60b9      	str	r1, [r7, #8]
 8011768:	603b      	str	r3, [r7, #0]
 801176a:	4613      	mov	r3, r2
 801176c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801176e:	e04c      	b.n	801180a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011776:	d048      	beq.n	801180a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8011778:	f7fd fa3a 	bl	800ebf0 <HAL_GetTick>
 801177c:	4602      	mov	r2, r0
 801177e:	69bb      	ldr	r3, [r7, #24]
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	683a      	ldr	r2, [r7, #0]
 8011784:	429a      	cmp	r2, r3
 8011786:	d902      	bls.n	801178e <SPI_WaitFlagStateUntilTimeout+0x30>
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d13d      	bne.n	801180a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	685a      	ldr	r2, [r3, #4]
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801179c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80117a6:	d111      	bne.n	80117cc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	689b      	ldr	r3, [r3, #8]
 80117ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80117b0:	d004      	beq.n	80117bc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	689b      	ldr	r3, [r3, #8]
 80117b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80117ba:	d107      	bne.n	80117cc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	681a      	ldr	r2, [r3, #0]
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80117ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80117d4:	d10f      	bne.n	80117f6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80117e4:	601a      	str	r2, [r3, #0]
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80117f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2201      	movs	r2, #1
 80117fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2200      	movs	r2, #0
 8011802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8011806:	2303      	movs	r3, #3
 8011808:	e00f      	b.n	801182a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	689a      	ldr	r2, [r3, #8]
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	4013      	ands	r3, r2
 8011814:	68ba      	ldr	r2, [r7, #8]
 8011816:	429a      	cmp	r2, r3
 8011818:	bf0c      	ite	eq
 801181a:	2301      	moveq	r3, #1
 801181c:	2300      	movne	r3, #0
 801181e:	b2db      	uxtb	r3, r3
 8011820:	461a      	mov	r2, r3
 8011822:	79fb      	ldrb	r3, [r7, #7]
 8011824:	429a      	cmp	r2, r3
 8011826:	d1a3      	bne.n	8011770 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8011828:	2300      	movs	r3, #0
}
 801182a:	4618      	mov	r0, r3
 801182c:	3710      	adds	r7, #16
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}

08011832 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011832:	b580      	push	{r7, lr}
 8011834:	b086      	sub	sp, #24
 8011836:	af02      	add	r7, sp, #8
 8011838:	60f8      	str	r0, [r7, #12]
 801183a:	60b9      	str	r1, [r7, #8]
 801183c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011846:	d111      	bne.n	801186c <SPI_EndRxTransaction+0x3a>
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	689b      	ldr	r3, [r3, #8]
 801184c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011850:	d004      	beq.n	801185c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	689b      	ldr	r3, [r3, #8]
 8011856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801185a:	d107      	bne.n	801186c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	681a      	ldr	r2, [r3, #0]
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801186a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011874:	d12a      	bne.n	80118cc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	689b      	ldr	r3, [r3, #8]
 801187a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801187e:	d012      	beq.n	80118a6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	9300      	str	r3, [sp, #0]
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	2200      	movs	r2, #0
 8011888:	2180      	movs	r1, #128	; 0x80
 801188a:	68f8      	ldr	r0, [r7, #12]
 801188c:	f7ff ff67 	bl	801175e <SPI_WaitFlagStateUntilTimeout>
 8011890:	4603      	mov	r3, r0
 8011892:	2b00      	cmp	r3, #0
 8011894:	d02d      	beq.n	80118f2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801189a:	f043 0220 	orr.w	r2, r3, #32
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80118a2:	2303      	movs	r3, #3
 80118a4:	e026      	b.n	80118f4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	9300      	str	r3, [sp, #0]
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	2200      	movs	r2, #0
 80118ae:	2101      	movs	r1, #1
 80118b0:	68f8      	ldr	r0, [r7, #12]
 80118b2:	f7ff ff54 	bl	801175e <SPI_WaitFlagStateUntilTimeout>
 80118b6:	4603      	mov	r3, r0
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d01a      	beq.n	80118f2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118c0:	f043 0220 	orr.w	r2, r3, #32
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80118c8:	2303      	movs	r3, #3
 80118ca:	e013      	b.n	80118f4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	9300      	str	r3, [sp, #0]
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	2200      	movs	r2, #0
 80118d4:	2101      	movs	r1, #1
 80118d6:	68f8      	ldr	r0, [r7, #12]
 80118d8:	f7ff ff41 	bl	801175e <SPI_WaitFlagStateUntilTimeout>
 80118dc:	4603      	mov	r3, r0
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d007      	beq.n	80118f2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118e6:	f043 0220 	orr.w	r2, r3, #32
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80118ee:	2303      	movs	r3, #3
 80118f0:	e000      	b.n	80118f4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80118f2:	2300      	movs	r3, #0
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3710      	adds	r7, #16
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b088      	sub	sp, #32
 8011900:	af02      	add	r7, sp, #8
 8011902:	60f8      	str	r0, [r7, #12]
 8011904:	60b9      	str	r1, [r7, #8]
 8011906:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8011908:	4b1b      	ldr	r3, [pc, #108]	; (8011978 <SPI_EndRxTxTransaction+0x7c>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	4a1b      	ldr	r2, [pc, #108]	; (801197c <SPI_EndRxTxTransaction+0x80>)
 801190e:	fba2 2303 	umull	r2, r3, r2, r3
 8011912:	0d5b      	lsrs	r3, r3, #21
 8011914:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011918:	fb02 f303 	mul.w	r3, r2, r3
 801191c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011926:	d112      	bne.n	801194e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	9300      	str	r3, [sp, #0]
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	2200      	movs	r2, #0
 8011930:	2180      	movs	r1, #128	; 0x80
 8011932:	68f8      	ldr	r0, [r7, #12]
 8011934:	f7ff ff13 	bl	801175e <SPI_WaitFlagStateUntilTimeout>
 8011938:	4603      	mov	r3, r0
 801193a:	2b00      	cmp	r3, #0
 801193c:	d016      	beq.n	801196c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011942:	f043 0220 	orr.w	r2, r3, #32
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801194a:	2303      	movs	r3, #3
 801194c:	e00f      	b.n	801196e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d00a      	beq.n	801196a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	3b01      	subs	r3, #1
 8011958:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	689b      	ldr	r3, [r3, #8]
 8011960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011964:	2b80      	cmp	r3, #128	; 0x80
 8011966:	d0f2      	beq.n	801194e <SPI_EndRxTxTransaction+0x52>
 8011968:	e000      	b.n	801196c <SPI_EndRxTxTransaction+0x70>
        break;
 801196a:	bf00      	nop
  }

  return HAL_OK;
 801196c:	2300      	movs	r3, #0
}
 801196e:	4618      	mov	r0, r3
 8011970:	3718      	adds	r7, #24
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}
 8011976:	bf00      	nop
 8011978:	20000024 	.word	0x20000024
 801197c:	165e9f81 	.word	0x165e9f81

08011980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b082      	sub	sp, #8
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d101      	bne.n	8011992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801198e:	2301      	movs	r3, #1
 8011990:	e01d      	b.n	80119ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011998:	b2db      	uxtb	r3, r3
 801199a:	2b00      	cmp	r3, #0
 801199c:	d106      	bne.n	80119ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2200      	movs	r2, #0
 80119a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f7fb f9a0 	bl	800ccec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2202      	movs	r2, #2
 80119b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681a      	ldr	r2, [r3, #0]
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	3304      	adds	r3, #4
 80119bc:	4619      	mov	r1, r3
 80119be:	4610      	mov	r0, r2
 80119c0:	f000 fe96 	bl	80126f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2201      	movs	r2, #1
 80119c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80119cc:	2300      	movs	r3, #0
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3708      	adds	r7, #8
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}

080119d6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80119d6:	b480      	push	{r7}
 80119d8:	b085      	sub	sp, #20
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	68da      	ldr	r2, [r3, #12]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	f042 0201 	orr.w	r2, r2, #1
 80119ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	689b      	ldr	r3, [r3, #8]
 80119f4:	f003 0307 	and.w	r3, r3, #7
 80119f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	2b06      	cmp	r3, #6
 80119fe:	d007      	beq.n	8011a10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	681a      	ldr	r2, [r3, #0]
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	f042 0201 	orr.w	r2, r2, #1
 8011a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011a10:	2300      	movs	r3, #0
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3714      	adds	r7, #20
 8011a16:	46bd      	mov	sp, r7
 8011a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1c:	4770      	bx	lr

08011a1e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8011a1e:	b480      	push	{r7}
 8011a20:	b083      	sub	sp, #12
 8011a22:	af00      	add	r7, sp, #0
 8011a24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	68da      	ldr	r2, [r3, #12]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f022 0201 	bic.w	r2, r2, #1
 8011a34:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	6a1a      	ldr	r2, [r3, #32]
 8011a3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8011a40:	4013      	ands	r3, r2
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d10f      	bne.n	8011a66 <HAL_TIM_Base_Stop_IT+0x48>
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	6a1a      	ldr	r2, [r3, #32]
 8011a4c:	f240 4344 	movw	r3, #1092	; 0x444
 8011a50:	4013      	ands	r3, r2
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d107      	bne.n	8011a66 <HAL_TIM_Base_Stop_IT+0x48>
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	681a      	ldr	r2, [r3, #0]
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	f022 0201 	bic.w	r2, r2, #1
 8011a64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011a66:	2300      	movs	r3, #0
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	370c      	adds	r7, #12
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a72:	4770      	bx	lr

08011a74 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d101      	bne.n	8011a86 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8011a82:	2301      	movs	r3, #1
 8011a84:	e01d      	b.n	8011ac2 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a8c:	b2db      	uxtb	r3, r3
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d106      	bne.n	8011aa0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	2200      	movs	r2, #0
 8011a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f000 f815 	bl	8011aca <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2202      	movs	r2, #2
 8011aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681a      	ldr	r2, [r3, #0]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	3304      	adds	r3, #4
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	4610      	mov	r0, r2
 8011ab4:	f000 fe1c 	bl	80126f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2201      	movs	r2, #1
 8011abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011ac0:	2300      	movs	r3, #0
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3708      	adds	r7, #8
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}

08011aca <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8011aca:	b480      	push	{r7}
 8011acc:	b083      	sub	sp, #12
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8011ad2:	bf00      	nop
 8011ad4:	370c      	adds	r7, #12
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011adc:	4770      	bx	lr
	...

08011ae0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b084      	sub	sp, #16
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	2b0c      	cmp	r3, #12
 8011aee:	d841      	bhi.n	8011b74 <HAL_TIM_OC_Start_IT+0x94>
 8011af0:	a201      	add	r2, pc, #4	; (adr r2, 8011af8 <HAL_TIM_OC_Start_IT+0x18>)
 8011af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011af6:	bf00      	nop
 8011af8:	08011b2d 	.word	0x08011b2d
 8011afc:	08011b75 	.word	0x08011b75
 8011b00:	08011b75 	.word	0x08011b75
 8011b04:	08011b75 	.word	0x08011b75
 8011b08:	08011b3f 	.word	0x08011b3f
 8011b0c:	08011b75 	.word	0x08011b75
 8011b10:	08011b75 	.word	0x08011b75
 8011b14:	08011b75 	.word	0x08011b75
 8011b18:	08011b51 	.word	0x08011b51
 8011b1c:	08011b75 	.word	0x08011b75
 8011b20:	08011b75 	.word	0x08011b75
 8011b24:	08011b75 	.word	0x08011b75
 8011b28:	08011b63 	.word	0x08011b63
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	68da      	ldr	r2, [r3, #12]
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	f042 0202 	orr.w	r2, r2, #2
 8011b3a:	60da      	str	r2, [r3, #12]
      break;
 8011b3c:	e01b      	b.n	8011b76 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	68da      	ldr	r2, [r3, #12]
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	f042 0204 	orr.w	r2, r2, #4
 8011b4c:	60da      	str	r2, [r3, #12]
      break;
 8011b4e:	e012      	b.n	8011b76 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	68da      	ldr	r2, [r3, #12]
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	f042 0208 	orr.w	r2, r2, #8
 8011b5e:	60da      	str	r2, [r3, #12]
      break;
 8011b60:	e009      	b.n	8011b76 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	68da      	ldr	r2, [r3, #12]
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	f042 0210 	orr.w	r2, r2, #16
 8011b70:	60da      	str	r2, [r3, #12]
      break;
 8011b72:	e000      	b.n	8011b76 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8011b74:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	6839      	ldr	r1, [r7, #0]
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f001 f8a0 	bl	8012cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	4a15      	ldr	r2, [pc, #84]	; (8011be0 <HAL_TIM_OC_Start_IT+0x100>)
 8011b8a:	4293      	cmp	r3, r2
 8011b8c:	d004      	beq.n	8011b98 <HAL_TIM_OC_Start_IT+0xb8>
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	4a14      	ldr	r2, [pc, #80]	; (8011be4 <HAL_TIM_OC_Start_IT+0x104>)
 8011b94:	4293      	cmp	r3, r2
 8011b96:	d101      	bne.n	8011b9c <HAL_TIM_OC_Start_IT+0xbc>
 8011b98:	2301      	movs	r3, #1
 8011b9a:	e000      	b.n	8011b9e <HAL_TIM_OC_Start_IT+0xbe>
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d007      	beq.n	8011bb2 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011bb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	689b      	ldr	r3, [r3, #8]
 8011bb8:	f003 0307 	and.w	r3, r3, #7
 8011bbc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	2b06      	cmp	r3, #6
 8011bc2:	d007      	beq.n	8011bd4 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	681a      	ldr	r2, [r3, #0]
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	f042 0201 	orr.w	r2, r2, #1
 8011bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011bd4:	2300      	movs	r3, #0
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3710      	adds	r7, #16
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	40010000 	.word	0x40010000
 8011be4:	40010400 	.word	0x40010400

08011be8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	2b0c      	cmp	r3, #12
 8011bf6:	d841      	bhi.n	8011c7c <HAL_TIM_OC_Stop_IT+0x94>
 8011bf8:	a201      	add	r2, pc, #4	; (adr r2, 8011c00 <HAL_TIM_OC_Stop_IT+0x18>)
 8011bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bfe:	bf00      	nop
 8011c00:	08011c35 	.word	0x08011c35
 8011c04:	08011c7d 	.word	0x08011c7d
 8011c08:	08011c7d 	.word	0x08011c7d
 8011c0c:	08011c7d 	.word	0x08011c7d
 8011c10:	08011c47 	.word	0x08011c47
 8011c14:	08011c7d 	.word	0x08011c7d
 8011c18:	08011c7d 	.word	0x08011c7d
 8011c1c:	08011c7d 	.word	0x08011c7d
 8011c20:	08011c59 	.word	0x08011c59
 8011c24:	08011c7d 	.word	0x08011c7d
 8011c28:	08011c7d 	.word	0x08011c7d
 8011c2c:	08011c7d 	.word	0x08011c7d
 8011c30:	08011c6b 	.word	0x08011c6b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	68da      	ldr	r2, [r3, #12]
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	f022 0202 	bic.w	r2, r2, #2
 8011c42:	60da      	str	r2, [r3, #12]
      break;
 8011c44:	e01b      	b.n	8011c7e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	68da      	ldr	r2, [r3, #12]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	f022 0204 	bic.w	r2, r2, #4
 8011c54:	60da      	str	r2, [r3, #12]
      break;
 8011c56:	e012      	b.n	8011c7e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	68da      	ldr	r2, [r3, #12]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	f022 0208 	bic.w	r2, r2, #8
 8011c66:	60da      	str	r2, [r3, #12]
      break;
 8011c68:	e009      	b.n	8011c7e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	68da      	ldr	r2, [r3, #12]
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	f022 0210 	bic.w	r2, r2, #16
 8011c78:	60da      	str	r2, [r3, #12]
      break;
 8011c7a:	e000      	b.n	8011c7e <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8011c7c:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	2200      	movs	r2, #0
 8011c84:	6839      	ldr	r1, [r7, #0]
 8011c86:	4618      	mov	r0, r3
 8011c88:	f001 f81c 	bl	8012cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	4a20      	ldr	r2, [pc, #128]	; (8011d14 <HAL_TIM_OC_Stop_IT+0x12c>)
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d004      	beq.n	8011ca0 <HAL_TIM_OC_Stop_IT+0xb8>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	4a1f      	ldr	r2, [pc, #124]	; (8011d18 <HAL_TIM_OC_Stop_IT+0x130>)
 8011c9c:	4293      	cmp	r3, r2
 8011c9e:	d101      	bne.n	8011ca4 <HAL_TIM_OC_Stop_IT+0xbc>
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	e000      	b.n	8011ca6 <HAL_TIM_OC_Stop_IT+0xbe>
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d017      	beq.n	8011cda <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	6a1a      	ldr	r2, [r3, #32]
 8011cb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8011cb4:	4013      	ands	r3, r2
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d10f      	bne.n	8011cda <HAL_TIM_OC_Stop_IT+0xf2>
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	6a1a      	ldr	r2, [r3, #32]
 8011cc0:	f240 4344 	movw	r3, #1092	; 0x444
 8011cc4:	4013      	ands	r3, r2
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d107      	bne.n	8011cda <HAL_TIM_OC_Stop_IT+0xf2>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011cd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	6a1a      	ldr	r2, [r3, #32]
 8011ce0:	f241 1311 	movw	r3, #4369	; 0x1111
 8011ce4:	4013      	ands	r3, r2
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d10f      	bne.n	8011d0a <HAL_TIM_OC_Stop_IT+0x122>
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	6a1a      	ldr	r2, [r3, #32]
 8011cf0:	f240 4344 	movw	r3, #1092	; 0x444
 8011cf4:	4013      	ands	r3, r2
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d107      	bne.n	8011d0a <HAL_TIM_OC_Stop_IT+0x122>
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	f022 0201 	bic.w	r2, r2, #1
 8011d08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011d0a:	2300      	movs	r3, #0
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3708      	adds	r7, #8
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}
 8011d14:	40010000 	.word	0x40010000
 8011d18:	40010400 	.word	0x40010400

08011d1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d101      	bne.n	8011d2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	e01d      	b.n	8011d6a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011d34:	b2db      	uxtb	r3, r3
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d106      	bne.n	8011d48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f000 f815 	bl	8011d72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2202      	movs	r2, #2
 8011d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681a      	ldr	r2, [r3, #0]
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	3304      	adds	r3, #4
 8011d58:	4619      	mov	r1, r3
 8011d5a:	4610      	mov	r0, r2
 8011d5c:	f000 fcc8 	bl	80126f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2201      	movs	r2, #1
 8011d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011d68:	2300      	movs	r3, #0
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3708      	adds	r7, #8
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}

08011d72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8011d72:	b480      	push	{r7}
 8011d74:	b083      	sub	sp, #12
 8011d76:	af00      	add	r7, sp, #0
 8011d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8011d7a:	bf00      	nop
 8011d7c:	370c      	adds	r7, #12
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d84:	4770      	bx	lr
	...

08011d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b084      	sub	sp, #16
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
 8011d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2201      	movs	r2, #1
 8011d98:	6839      	ldr	r1, [r7, #0]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f000 ff92 	bl	8012cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	4a15      	ldr	r2, [pc, #84]	; (8011dfc <HAL_TIM_PWM_Start+0x74>)
 8011da6:	4293      	cmp	r3, r2
 8011da8:	d004      	beq.n	8011db4 <HAL_TIM_PWM_Start+0x2c>
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	4a14      	ldr	r2, [pc, #80]	; (8011e00 <HAL_TIM_PWM_Start+0x78>)
 8011db0:	4293      	cmp	r3, r2
 8011db2:	d101      	bne.n	8011db8 <HAL_TIM_PWM_Start+0x30>
 8011db4:	2301      	movs	r3, #1
 8011db6:	e000      	b.n	8011dba <HAL_TIM_PWM_Start+0x32>
 8011db8:	2300      	movs	r3, #0
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d007      	beq.n	8011dce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011dcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	689b      	ldr	r3, [r3, #8]
 8011dd4:	f003 0307 	and.w	r3, r3, #7
 8011dd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	2b06      	cmp	r3, #6
 8011dde:	d007      	beq.n	8011df0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	681a      	ldr	r2, [r3, #0]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	f042 0201 	orr.w	r2, r2, #1
 8011dee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011df0:	2300      	movs	r3, #0
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3710      	adds	r7, #16
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	40010000 	.word	0x40010000
 8011e00:	40010400 	.word	0x40010400

08011e04 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b082      	sub	sp, #8
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	2200      	movs	r2, #0
 8011e14:	6839      	ldr	r1, [r7, #0]
 8011e16:	4618      	mov	r0, r3
 8011e18:	f000 ff54 	bl	8012cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	4a22      	ldr	r2, [pc, #136]	; (8011eac <HAL_TIM_PWM_Stop+0xa8>)
 8011e22:	4293      	cmp	r3, r2
 8011e24:	d004      	beq.n	8011e30 <HAL_TIM_PWM_Stop+0x2c>
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	4a21      	ldr	r2, [pc, #132]	; (8011eb0 <HAL_TIM_PWM_Stop+0xac>)
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	d101      	bne.n	8011e34 <HAL_TIM_PWM_Stop+0x30>
 8011e30:	2301      	movs	r3, #1
 8011e32:	e000      	b.n	8011e36 <HAL_TIM_PWM_Stop+0x32>
 8011e34:	2300      	movs	r3, #0
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d017      	beq.n	8011e6a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	6a1a      	ldr	r2, [r3, #32]
 8011e40:	f241 1311 	movw	r3, #4369	; 0x1111
 8011e44:	4013      	ands	r3, r2
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d10f      	bne.n	8011e6a <HAL_TIM_PWM_Stop+0x66>
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	6a1a      	ldr	r2, [r3, #32]
 8011e50:	f240 4344 	movw	r3, #1092	; 0x444
 8011e54:	4013      	ands	r3, r2
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d107      	bne.n	8011e6a <HAL_TIM_PWM_Stop+0x66>
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011e68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	6a1a      	ldr	r2, [r3, #32]
 8011e70:	f241 1311 	movw	r3, #4369	; 0x1111
 8011e74:	4013      	ands	r3, r2
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d10f      	bne.n	8011e9a <HAL_TIM_PWM_Stop+0x96>
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	6a1a      	ldr	r2, [r3, #32]
 8011e80:	f240 4344 	movw	r3, #1092	; 0x444
 8011e84:	4013      	ands	r3, r2
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d107      	bne.n	8011e9a <HAL_TIM_PWM_Stop+0x96>
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	681a      	ldr	r2, [r3, #0]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	f022 0201 	bic.w	r2, r2, #1
 8011e98:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2201      	movs	r2, #1
 8011e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8011ea2:	2300      	movs	r3, #0
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3708      	adds	r7, #8
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	40010000 	.word	0x40010000
 8011eb0:	40010400 	.word	0x40010400

08011eb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b086      	sub	sp, #24
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d101      	bne.n	8011ec8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	e083      	b.n	8011fd0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011ece:	b2db      	uxtb	r3, r3
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d106      	bne.n	8011ee2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f7fa ff75 	bl	800cdcc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2202      	movs	r2, #2
 8011ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	689b      	ldr	r3, [r3, #8]
 8011ef0:	687a      	ldr	r2, [r7, #4]
 8011ef2:	6812      	ldr	r2, [r2, #0]
 8011ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011ef8:	f023 0307 	bic.w	r3, r3, #7
 8011efc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681a      	ldr	r2, [r3, #0]
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	3304      	adds	r3, #4
 8011f06:	4619      	mov	r1, r3
 8011f08:	4610      	mov	r0, r2
 8011f0a:	f000 fbf1 	bl	80126f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	689b      	ldr	r3, [r3, #8]
 8011f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	699b      	ldr	r3, [r3, #24]
 8011f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	6a1b      	ldr	r3, [r3, #32]
 8011f24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	697a      	ldr	r2, [r7, #20]
 8011f2c:	4313      	orrs	r3, r2
 8011f2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011f36:	f023 0303 	bic.w	r3, r3, #3
 8011f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	689a      	ldr	r2, [r3, #8]
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	699b      	ldr	r3, [r3, #24]
 8011f44:	021b      	lsls	r3, r3, #8
 8011f46:	4313      	orrs	r3, r2
 8011f48:	693a      	ldr	r2, [r7, #16]
 8011f4a:	4313      	orrs	r3, r2
 8011f4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8011f54:	f023 030c 	bic.w	r3, r3, #12
 8011f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8011f5a:	693b      	ldr	r3, [r7, #16]
 8011f5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011f60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011f64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	68da      	ldr	r2, [r3, #12]
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	69db      	ldr	r3, [r3, #28]
 8011f6e:	021b      	lsls	r3, r3, #8
 8011f70:	4313      	orrs	r3, r2
 8011f72:	693a      	ldr	r2, [r7, #16]
 8011f74:	4313      	orrs	r3, r2
 8011f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011f78:	683b      	ldr	r3, [r7, #0]
 8011f7a:	691b      	ldr	r3, [r3, #16]
 8011f7c:	011a      	lsls	r2, r3, #4
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	6a1b      	ldr	r3, [r3, #32]
 8011f82:	031b      	lsls	r3, r3, #12
 8011f84:	4313      	orrs	r3, r2
 8011f86:	693a      	ldr	r2, [r7, #16]
 8011f88:	4313      	orrs	r3, r2
 8011f8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8011f92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8011f9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	685a      	ldr	r2, [r3, #4]
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	695b      	ldr	r3, [r3, #20]
 8011fa4:	011b      	lsls	r3, r3, #4
 8011fa6:	4313      	orrs	r3, r2
 8011fa8:	68fa      	ldr	r2, [r7, #12]
 8011faa:	4313      	orrs	r3, r2
 8011fac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	697a      	ldr	r2, [r7, #20]
 8011fb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	693a      	ldr	r2, [r7, #16]
 8011fbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	68fa      	ldr	r2, [r7, #12]
 8011fc4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2201      	movs	r2, #1
 8011fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011fce:	2300      	movs	r3, #0
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3718      	adds	r7, #24
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}

08011fd8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
 8011fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d002      	beq.n	8011fee <HAL_TIM_Encoder_Start+0x16>
 8011fe8:	2b04      	cmp	r3, #4
 8011fea:	d008      	beq.n	8011ffe <HAL_TIM_Encoder_Start+0x26>
 8011fec:	e00f      	b.n	801200e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	2201      	movs	r2, #1
 8011ff4:	2100      	movs	r1, #0
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f000 fe64 	bl	8012cc4 <TIM_CCxChannelCmd>
      break;
 8011ffc:	e016      	b.n	801202c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	2201      	movs	r2, #1
 8012004:	2104      	movs	r1, #4
 8012006:	4618      	mov	r0, r3
 8012008:	f000 fe5c 	bl	8012cc4 <TIM_CCxChannelCmd>
      break;
 801200c:	e00e      	b.n	801202c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	2201      	movs	r2, #1
 8012014:	2100      	movs	r1, #0
 8012016:	4618      	mov	r0, r3
 8012018:	f000 fe54 	bl	8012cc4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	2201      	movs	r2, #1
 8012022:	2104      	movs	r1, #4
 8012024:	4618      	mov	r0, r3
 8012026:	f000 fe4d 	bl	8012cc4 <TIM_CCxChannelCmd>
      break;
 801202a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	f042 0201 	orr.w	r2, r2, #1
 801203a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801203c:	2300      	movs	r3, #0
}
 801203e:	4618      	mov	r0, r3
 8012040:	3708      	adds	r7, #8
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}

08012046 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012046:	b580      	push	{r7, lr}
 8012048:	b082      	sub	sp, #8
 801204a:	af00      	add	r7, sp, #0
 801204c:	6078      	str	r0, [r7, #4]
 801204e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8012050:	683b      	ldr	r3, [r7, #0]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d002      	beq.n	801205c <HAL_TIM_Encoder_Stop+0x16>
 8012056:	2b04      	cmp	r3, #4
 8012058:	d008      	beq.n	801206c <HAL_TIM_Encoder_Stop+0x26>
 801205a:	e00f      	b.n	801207c <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	2200      	movs	r2, #0
 8012062:	2100      	movs	r1, #0
 8012064:	4618      	mov	r0, r3
 8012066:	f000 fe2d 	bl	8012cc4 <TIM_CCxChannelCmd>
      break;
 801206a:	e016      	b.n	801209a <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	2200      	movs	r2, #0
 8012072:	2104      	movs	r1, #4
 8012074:	4618      	mov	r0, r3
 8012076:	f000 fe25 	bl	8012cc4 <TIM_CCxChannelCmd>
      break;
 801207a:	e00e      	b.n	801209a <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	2200      	movs	r2, #0
 8012082:	2100      	movs	r1, #0
 8012084:	4618      	mov	r0, r3
 8012086:	f000 fe1d 	bl	8012cc4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	2200      	movs	r2, #0
 8012090:	2104      	movs	r1, #4
 8012092:	4618      	mov	r0, r3
 8012094:	f000 fe16 	bl	8012cc4 <TIM_CCxChannelCmd>
      break;
 8012098:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	6a1a      	ldr	r2, [r3, #32]
 80120a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80120a4:	4013      	ands	r3, r2
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d10f      	bne.n	80120ca <HAL_TIM_Encoder_Stop+0x84>
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	6a1a      	ldr	r2, [r3, #32]
 80120b0:	f240 4344 	movw	r3, #1092	; 0x444
 80120b4:	4013      	ands	r3, r2
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d107      	bne.n	80120ca <HAL_TIM_Encoder_Stop+0x84>
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	681a      	ldr	r2, [r3, #0]
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	f022 0201 	bic.w	r2, r2, #1
 80120c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80120ca:	2300      	movs	r3, #0
}
 80120cc:	4618      	mov	r0, r3
 80120ce:	3708      	adds	r7, #8
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}

080120d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b082      	sub	sp, #8
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	691b      	ldr	r3, [r3, #16]
 80120e2:	f003 0302 	and.w	r3, r3, #2
 80120e6:	2b02      	cmp	r3, #2
 80120e8:	d122      	bne.n	8012130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	68db      	ldr	r3, [r3, #12]
 80120f0:	f003 0302 	and.w	r3, r3, #2
 80120f4:	2b02      	cmp	r3, #2
 80120f6:	d11b      	bne.n	8012130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	f06f 0202 	mvn.w	r2, #2
 8012100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2201      	movs	r2, #1
 8012106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	699b      	ldr	r3, [r3, #24]
 801210e:	f003 0303 	and.w	r3, r3, #3
 8012112:	2b00      	cmp	r3, #0
 8012114:	d003      	beq.n	801211e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f000 facb 	bl	80126b2 <HAL_TIM_IC_CaptureCallback>
 801211c:	e005      	b.n	801212a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f000 fabd 	bl	801269e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f000 face 	bl	80126c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2200      	movs	r2, #0
 801212e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	691b      	ldr	r3, [r3, #16]
 8012136:	f003 0304 	and.w	r3, r3, #4
 801213a:	2b04      	cmp	r3, #4
 801213c:	d122      	bne.n	8012184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	68db      	ldr	r3, [r3, #12]
 8012144:	f003 0304 	and.w	r3, r3, #4
 8012148:	2b04      	cmp	r3, #4
 801214a:	d11b      	bne.n	8012184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	f06f 0204 	mvn.w	r2, #4
 8012154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2202      	movs	r2, #2
 801215a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	699b      	ldr	r3, [r3, #24]
 8012162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012166:	2b00      	cmp	r3, #0
 8012168:	d003      	beq.n	8012172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801216a:	6878      	ldr	r0, [r7, #4]
 801216c:	f000 faa1 	bl	80126b2 <HAL_TIM_IC_CaptureCallback>
 8012170:	e005      	b.n	801217e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f000 fa93 	bl	801269e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f000 faa4 	bl	80126c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	2200      	movs	r2, #0
 8012182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	691b      	ldr	r3, [r3, #16]
 801218a:	f003 0308 	and.w	r3, r3, #8
 801218e:	2b08      	cmp	r3, #8
 8012190:	d122      	bne.n	80121d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	68db      	ldr	r3, [r3, #12]
 8012198:	f003 0308 	and.w	r3, r3, #8
 801219c:	2b08      	cmp	r3, #8
 801219e:	d11b      	bne.n	80121d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	f06f 0208 	mvn.w	r2, #8
 80121a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2204      	movs	r2, #4
 80121ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	69db      	ldr	r3, [r3, #28]
 80121b6:	f003 0303 	and.w	r3, r3, #3
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d003      	beq.n	80121c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f000 fa77 	bl	80126b2 <HAL_TIM_IC_CaptureCallback>
 80121c4:	e005      	b.n	80121d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f000 fa69 	bl	801269e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f000 fa7a 	bl	80126c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2200      	movs	r2, #0
 80121d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	691b      	ldr	r3, [r3, #16]
 80121de:	f003 0310 	and.w	r3, r3, #16
 80121e2:	2b10      	cmp	r3, #16
 80121e4:	d122      	bne.n	801222c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	68db      	ldr	r3, [r3, #12]
 80121ec:	f003 0310 	and.w	r3, r3, #16
 80121f0:	2b10      	cmp	r3, #16
 80121f2:	d11b      	bne.n	801222c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	f06f 0210 	mvn.w	r2, #16
 80121fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2208      	movs	r2, #8
 8012202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	69db      	ldr	r3, [r3, #28]
 801220a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801220e:	2b00      	cmp	r3, #0
 8012210:	d003      	beq.n	801221a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f000 fa4d 	bl	80126b2 <HAL_TIM_IC_CaptureCallback>
 8012218:	e005      	b.n	8012226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f000 fa3f 	bl	801269e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f000 fa50 	bl	80126c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2200      	movs	r2, #0
 801222a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	691b      	ldr	r3, [r3, #16]
 8012232:	f003 0301 	and.w	r3, r3, #1
 8012236:	2b01      	cmp	r3, #1
 8012238:	d10e      	bne.n	8012258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	68db      	ldr	r3, [r3, #12]
 8012240:	f003 0301 	and.w	r3, r3, #1
 8012244:	2b01      	cmp	r3, #1
 8012246:	d107      	bne.n	8012258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f06f 0201 	mvn.w	r2, #1
 8012250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f7f8 f8fe 	bl	800a454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	691b      	ldr	r3, [r3, #16]
 801225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012262:	2b80      	cmp	r3, #128	; 0x80
 8012264:	d10e      	bne.n	8012284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	68db      	ldr	r3, [r3, #12]
 801226c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012270:	2b80      	cmp	r3, #128	; 0x80
 8012272:	d107      	bne.n	8012284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801227c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	f000 fee8 	bl	8013054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	691b      	ldr	r3, [r3, #16]
 801228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801228e:	2b40      	cmp	r3, #64	; 0x40
 8012290:	d10e      	bne.n	80122b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	68db      	ldr	r3, [r3, #12]
 8012298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801229c:	2b40      	cmp	r3, #64	; 0x40
 801229e:	d107      	bne.n	80122b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80122a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f000 fa15 	bl	80126da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	691b      	ldr	r3, [r3, #16]
 80122b6:	f003 0320 	and.w	r3, r3, #32
 80122ba:	2b20      	cmp	r3, #32
 80122bc:	d10e      	bne.n	80122dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	68db      	ldr	r3, [r3, #12]
 80122c4:	f003 0320 	and.w	r3, r3, #32
 80122c8:	2b20      	cmp	r3, #32
 80122ca:	d107      	bne.n	80122dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	f06f 0220 	mvn.w	r2, #32
 80122d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f000 feb2 	bl	8013040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80122dc:	bf00      	nop
 80122de:	3708      	adds	r7, #8
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b084      	sub	sp, #16
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80122f6:	2b01      	cmp	r3, #1
 80122f8:	d101      	bne.n	80122fe <HAL_TIM_OC_ConfigChannel+0x1a>
 80122fa:	2302      	movs	r3, #2
 80122fc:	e04e      	b.n	801239c <HAL_TIM_OC_ConfigChannel+0xb8>
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	2201      	movs	r2, #1
 8012302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	2202      	movs	r2, #2
 801230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2b0c      	cmp	r3, #12
 8012312:	d839      	bhi.n	8012388 <HAL_TIM_OC_ConfigChannel+0xa4>
 8012314:	a201      	add	r2, pc, #4	; (adr r2, 801231c <HAL_TIM_OC_ConfigChannel+0x38>)
 8012316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801231a:	bf00      	nop
 801231c:	08012351 	.word	0x08012351
 8012320:	08012389 	.word	0x08012389
 8012324:	08012389 	.word	0x08012389
 8012328:	08012389 	.word	0x08012389
 801232c:	0801235f 	.word	0x0801235f
 8012330:	08012389 	.word	0x08012389
 8012334:	08012389 	.word	0x08012389
 8012338:	08012389 	.word	0x08012389
 801233c:	0801236d 	.word	0x0801236d
 8012340:	08012389 	.word	0x08012389
 8012344:	08012389 	.word	0x08012389
 8012348:	08012389 	.word	0x08012389
 801234c:	0801237b 	.word	0x0801237b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	68b9      	ldr	r1, [r7, #8]
 8012356:	4618      	mov	r0, r3
 8012358:	f000 fa6a 	bl	8012830 <TIM_OC1_SetConfig>
      break;
 801235c:	e015      	b.n	801238a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	68b9      	ldr	r1, [r7, #8]
 8012364:	4618      	mov	r0, r3
 8012366:	f000 fad3 	bl	8012910 <TIM_OC2_SetConfig>
      break;
 801236a:	e00e      	b.n	801238a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	68b9      	ldr	r1, [r7, #8]
 8012372:	4618      	mov	r0, r3
 8012374:	f000 fb42 	bl	80129fc <TIM_OC3_SetConfig>
      break;
 8012378:	e007      	b.n	801238a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	68b9      	ldr	r1, [r7, #8]
 8012380:	4618      	mov	r0, r3
 8012382:	f000 fbaf 	bl	8012ae4 <TIM_OC4_SetConfig>
      break;
 8012386:	e000      	b.n	801238a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8012388:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	2201      	movs	r2, #1
 801238e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	2200      	movs	r2, #0
 8012396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801239a:	2300      	movs	r3, #0
}
 801239c:	4618      	mov	r0, r3
 801239e:	3710      	adds	r7, #16
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b084      	sub	sp, #16
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	60f8      	str	r0, [r7, #12]
 80123ac:	60b9      	str	r1, [r7, #8]
 80123ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80123b6:	2b01      	cmp	r3, #1
 80123b8:	d101      	bne.n	80123be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80123ba:	2302      	movs	r3, #2
 80123bc:	e0b4      	b.n	8012528 <HAL_TIM_PWM_ConfigChannel+0x184>
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	2201      	movs	r2, #1
 80123c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	2202      	movs	r2, #2
 80123ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2b0c      	cmp	r3, #12
 80123d2:	f200 809f 	bhi.w	8012514 <HAL_TIM_PWM_ConfigChannel+0x170>
 80123d6:	a201      	add	r2, pc, #4	; (adr r2, 80123dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80123d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123dc:	08012411 	.word	0x08012411
 80123e0:	08012515 	.word	0x08012515
 80123e4:	08012515 	.word	0x08012515
 80123e8:	08012515 	.word	0x08012515
 80123ec:	08012451 	.word	0x08012451
 80123f0:	08012515 	.word	0x08012515
 80123f4:	08012515 	.word	0x08012515
 80123f8:	08012515 	.word	0x08012515
 80123fc:	08012493 	.word	0x08012493
 8012400:	08012515 	.word	0x08012515
 8012404:	08012515 	.word	0x08012515
 8012408:	08012515 	.word	0x08012515
 801240c:	080124d3 	.word	0x080124d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	68b9      	ldr	r1, [r7, #8]
 8012416:	4618      	mov	r0, r3
 8012418:	f000 fa0a 	bl	8012830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	699a      	ldr	r2, [r3, #24]
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	f042 0208 	orr.w	r2, r2, #8
 801242a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	699a      	ldr	r2, [r3, #24]
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	f022 0204 	bic.w	r2, r2, #4
 801243a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	6999      	ldr	r1, [r3, #24]
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	691a      	ldr	r2, [r3, #16]
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	430a      	orrs	r2, r1
 801244c:	619a      	str	r2, [r3, #24]
      break;
 801244e:	e062      	b.n	8012516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	68b9      	ldr	r1, [r7, #8]
 8012456:	4618      	mov	r0, r3
 8012458:	f000 fa5a 	bl	8012910 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	699a      	ldr	r2, [r3, #24]
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801246a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	699a      	ldr	r2, [r3, #24]
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801247a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	6999      	ldr	r1, [r3, #24]
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	691b      	ldr	r3, [r3, #16]
 8012486:	021a      	lsls	r2, r3, #8
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	430a      	orrs	r2, r1
 801248e:	619a      	str	r2, [r3, #24]
      break;
 8012490:	e041      	b.n	8012516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	68b9      	ldr	r1, [r7, #8]
 8012498:	4618      	mov	r0, r3
 801249a:	f000 faaf 	bl	80129fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	69da      	ldr	r2, [r3, #28]
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	f042 0208 	orr.w	r2, r2, #8
 80124ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	69da      	ldr	r2, [r3, #28]
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	f022 0204 	bic.w	r2, r2, #4
 80124bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	69d9      	ldr	r1, [r3, #28]
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	691a      	ldr	r2, [r3, #16]
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	430a      	orrs	r2, r1
 80124ce:	61da      	str	r2, [r3, #28]
      break;
 80124d0:	e021      	b.n	8012516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	68b9      	ldr	r1, [r7, #8]
 80124d8:	4618      	mov	r0, r3
 80124da:	f000 fb03 	bl	8012ae4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	69da      	ldr	r2, [r3, #28]
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80124ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	69da      	ldr	r2, [r3, #28]
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80124fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	69d9      	ldr	r1, [r3, #28]
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	691b      	ldr	r3, [r3, #16]
 8012508:	021a      	lsls	r2, r3, #8
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	430a      	orrs	r2, r1
 8012510:	61da      	str	r2, [r3, #28]
      break;
 8012512:	e000      	b.n	8012516 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8012514:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	2201      	movs	r2, #1
 801251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	2200      	movs	r2, #0
 8012522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012526:	2300      	movs	r3, #0
}
 8012528:	4618      	mov	r0, r3
 801252a:	3710      	adds	r7, #16
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}

08012530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b084      	sub	sp, #16
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012540:	2b01      	cmp	r3, #1
 8012542:	d101      	bne.n	8012548 <HAL_TIM_ConfigClockSource+0x18>
 8012544:	2302      	movs	r3, #2
 8012546:	e0a6      	b.n	8012696 <HAL_TIM_ConfigClockSource+0x166>
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	2201      	movs	r2, #1
 801254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	2202      	movs	r2, #2
 8012554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	689b      	ldr	r3, [r3, #8]
 801255e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8012566:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801256e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	68fa      	ldr	r2, [r7, #12]
 8012576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	2b40      	cmp	r3, #64	; 0x40
 801257e:	d067      	beq.n	8012650 <HAL_TIM_ConfigClockSource+0x120>
 8012580:	2b40      	cmp	r3, #64	; 0x40
 8012582:	d80b      	bhi.n	801259c <HAL_TIM_ConfigClockSource+0x6c>
 8012584:	2b10      	cmp	r3, #16
 8012586:	d073      	beq.n	8012670 <HAL_TIM_ConfigClockSource+0x140>
 8012588:	2b10      	cmp	r3, #16
 801258a:	d802      	bhi.n	8012592 <HAL_TIM_ConfigClockSource+0x62>
 801258c:	2b00      	cmp	r3, #0
 801258e:	d06f      	beq.n	8012670 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8012590:	e078      	b.n	8012684 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8012592:	2b20      	cmp	r3, #32
 8012594:	d06c      	beq.n	8012670 <HAL_TIM_ConfigClockSource+0x140>
 8012596:	2b30      	cmp	r3, #48	; 0x30
 8012598:	d06a      	beq.n	8012670 <HAL_TIM_ConfigClockSource+0x140>
      break;
 801259a:	e073      	b.n	8012684 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801259c:	2b70      	cmp	r3, #112	; 0x70
 801259e:	d00d      	beq.n	80125bc <HAL_TIM_ConfigClockSource+0x8c>
 80125a0:	2b70      	cmp	r3, #112	; 0x70
 80125a2:	d804      	bhi.n	80125ae <HAL_TIM_ConfigClockSource+0x7e>
 80125a4:	2b50      	cmp	r3, #80	; 0x50
 80125a6:	d033      	beq.n	8012610 <HAL_TIM_ConfigClockSource+0xe0>
 80125a8:	2b60      	cmp	r3, #96	; 0x60
 80125aa:	d041      	beq.n	8012630 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80125ac:	e06a      	b.n	8012684 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80125ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80125b2:	d066      	beq.n	8012682 <HAL_TIM_ConfigClockSource+0x152>
 80125b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80125b8:	d017      	beq.n	80125ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 80125ba:	e063      	b.n	8012684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6818      	ldr	r0, [r3, #0]
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	6899      	ldr	r1, [r3, #8]
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	685a      	ldr	r2, [r3, #4]
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	68db      	ldr	r3, [r3, #12]
 80125cc:	f000 fb5a 	bl	8012c84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	689b      	ldr	r3, [r3, #8]
 80125d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80125de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	68fa      	ldr	r2, [r7, #12]
 80125e6:	609a      	str	r2, [r3, #8]
      break;
 80125e8:	e04c      	b.n	8012684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6818      	ldr	r0, [r3, #0]
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	6899      	ldr	r1, [r3, #8]
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	685a      	ldr	r2, [r3, #4]
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	68db      	ldr	r3, [r3, #12]
 80125fa:	f000 fb43 	bl	8012c84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	689a      	ldr	r2, [r3, #8]
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801260c:	609a      	str	r2, [r3, #8]
      break;
 801260e:	e039      	b.n	8012684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	6818      	ldr	r0, [r3, #0]
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	6859      	ldr	r1, [r3, #4]
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	68db      	ldr	r3, [r3, #12]
 801261c:	461a      	mov	r2, r3
 801261e:	f000 fab7 	bl	8012b90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	2150      	movs	r1, #80	; 0x50
 8012628:	4618      	mov	r0, r3
 801262a:	f000 fb10 	bl	8012c4e <TIM_ITRx_SetConfig>
      break;
 801262e:	e029      	b.n	8012684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6818      	ldr	r0, [r3, #0]
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	6859      	ldr	r1, [r3, #4]
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	68db      	ldr	r3, [r3, #12]
 801263c:	461a      	mov	r2, r3
 801263e:	f000 fad6 	bl	8012bee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	2160      	movs	r1, #96	; 0x60
 8012648:	4618      	mov	r0, r3
 801264a:	f000 fb00 	bl	8012c4e <TIM_ITRx_SetConfig>
      break;
 801264e:	e019      	b.n	8012684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6818      	ldr	r0, [r3, #0]
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	6859      	ldr	r1, [r3, #4]
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	68db      	ldr	r3, [r3, #12]
 801265c:	461a      	mov	r2, r3
 801265e:	f000 fa97 	bl	8012b90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	2140      	movs	r1, #64	; 0x40
 8012668:	4618      	mov	r0, r3
 801266a:	f000 faf0 	bl	8012c4e <TIM_ITRx_SetConfig>
      break;
 801266e:	e009      	b.n	8012684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681a      	ldr	r2, [r3, #0]
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	4619      	mov	r1, r3
 801267a:	4610      	mov	r0, r2
 801267c:	f000 fae7 	bl	8012c4e <TIM_ITRx_SetConfig>
      break;
 8012680:	e000      	b.n	8012684 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8012682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2201      	movs	r2, #1
 8012688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2200      	movs	r2, #0
 8012690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012694:	2300      	movs	r3, #0
}
 8012696:	4618      	mov	r0, r3
 8012698:	3710      	adds	r7, #16
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}

0801269e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801269e:	b480      	push	{r7}
 80126a0:	b083      	sub	sp, #12
 80126a2:	af00      	add	r7, sp, #0
 80126a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80126a6:	bf00      	nop
 80126a8:	370c      	adds	r7, #12
 80126aa:	46bd      	mov	sp, r7
 80126ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b0:	4770      	bx	lr

080126b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80126b2:	b480      	push	{r7}
 80126b4:	b083      	sub	sp, #12
 80126b6:	af00      	add	r7, sp, #0
 80126b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80126ba:	bf00      	nop
 80126bc:	370c      	adds	r7, #12
 80126be:	46bd      	mov	sp, r7
 80126c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c4:	4770      	bx	lr

080126c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80126c6:	b480      	push	{r7}
 80126c8:	b083      	sub	sp, #12
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80126ce:	bf00      	nop
 80126d0:	370c      	adds	r7, #12
 80126d2:	46bd      	mov	sp, r7
 80126d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d8:	4770      	bx	lr

080126da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80126da:	b480      	push	{r7}
 80126dc:	b083      	sub	sp, #12
 80126de:	af00      	add	r7, sp, #0
 80126e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80126e2:	bf00      	nop
 80126e4:	370c      	adds	r7, #12
 80126e6:	46bd      	mov	sp, r7
 80126e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ec:	4770      	bx	lr
	...

080126f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80126f0:	b480      	push	{r7}
 80126f2:	b085      	sub	sp, #20
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	4a40      	ldr	r2, [pc, #256]	; (8012804 <TIM_Base_SetConfig+0x114>)
 8012704:	4293      	cmp	r3, r2
 8012706:	d013      	beq.n	8012730 <TIM_Base_SetConfig+0x40>
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801270e:	d00f      	beq.n	8012730 <TIM_Base_SetConfig+0x40>
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	4a3d      	ldr	r2, [pc, #244]	; (8012808 <TIM_Base_SetConfig+0x118>)
 8012714:	4293      	cmp	r3, r2
 8012716:	d00b      	beq.n	8012730 <TIM_Base_SetConfig+0x40>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	4a3c      	ldr	r2, [pc, #240]	; (801280c <TIM_Base_SetConfig+0x11c>)
 801271c:	4293      	cmp	r3, r2
 801271e:	d007      	beq.n	8012730 <TIM_Base_SetConfig+0x40>
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	4a3b      	ldr	r2, [pc, #236]	; (8012810 <TIM_Base_SetConfig+0x120>)
 8012724:	4293      	cmp	r3, r2
 8012726:	d003      	beq.n	8012730 <TIM_Base_SetConfig+0x40>
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	4a3a      	ldr	r2, [pc, #232]	; (8012814 <TIM_Base_SetConfig+0x124>)
 801272c:	4293      	cmp	r3, r2
 801272e:	d108      	bne.n	8012742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	68fa      	ldr	r2, [r7, #12]
 801273e:	4313      	orrs	r3, r2
 8012740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	4a2f      	ldr	r2, [pc, #188]	; (8012804 <TIM_Base_SetConfig+0x114>)
 8012746:	4293      	cmp	r3, r2
 8012748:	d02b      	beq.n	80127a2 <TIM_Base_SetConfig+0xb2>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012750:	d027      	beq.n	80127a2 <TIM_Base_SetConfig+0xb2>
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	4a2c      	ldr	r2, [pc, #176]	; (8012808 <TIM_Base_SetConfig+0x118>)
 8012756:	4293      	cmp	r3, r2
 8012758:	d023      	beq.n	80127a2 <TIM_Base_SetConfig+0xb2>
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	4a2b      	ldr	r2, [pc, #172]	; (801280c <TIM_Base_SetConfig+0x11c>)
 801275e:	4293      	cmp	r3, r2
 8012760:	d01f      	beq.n	80127a2 <TIM_Base_SetConfig+0xb2>
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	4a2a      	ldr	r2, [pc, #168]	; (8012810 <TIM_Base_SetConfig+0x120>)
 8012766:	4293      	cmp	r3, r2
 8012768:	d01b      	beq.n	80127a2 <TIM_Base_SetConfig+0xb2>
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	4a29      	ldr	r2, [pc, #164]	; (8012814 <TIM_Base_SetConfig+0x124>)
 801276e:	4293      	cmp	r3, r2
 8012770:	d017      	beq.n	80127a2 <TIM_Base_SetConfig+0xb2>
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	4a28      	ldr	r2, [pc, #160]	; (8012818 <TIM_Base_SetConfig+0x128>)
 8012776:	4293      	cmp	r3, r2
 8012778:	d013      	beq.n	80127a2 <TIM_Base_SetConfig+0xb2>
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	4a27      	ldr	r2, [pc, #156]	; (801281c <TIM_Base_SetConfig+0x12c>)
 801277e:	4293      	cmp	r3, r2
 8012780:	d00f      	beq.n	80127a2 <TIM_Base_SetConfig+0xb2>
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	4a26      	ldr	r2, [pc, #152]	; (8012820 <TIM_Base_SetConfig+0x130>)
 8012786:	4293      	cmp	r3, r2
 8012788:	d00b      	beq.n	80127a2 <TIM_Base_SetConfig+0xb2>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	4a25      	ldr	r2, [pc, #148]	; (8012824 <TIM_Base_SetConfig+0x134>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d007      	beq.n	80127a2 <TIM_Base_SetConfig+0xb2>
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	4a24      	ldr	r2, [pc, #144]	; (8012828 <TIM_Base_SetConfig+0x138>)
 8012796:	4293      	cmp	r3, r2
 8012798:	d003      	beq.n	80127a2 <TIM_Base_SetConfig+0xb2>
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	4a23      	ldr	r2, [pc, #140]	; (801282c <TIM_Base_SetConfig+0x13c>)
 801279e:	4293      	cmp	r3, r2
 80127a0:	d108      	bne.n	80127b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80127a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	68db      	ldr	r3, [r3, #12]
 80127ae:	68fa      	ldr	r2, [r7, #12]
 80127b0:	4313      	orrs	r3, r2
 80127b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	695b      	ldr	r3, [r3, #20]
 80127be:	4313      	orrs	r3, r2
 80127c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	68fa      	ldr	r2, [r7, #12]
 80127c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	689a      	ldr	r2, [r3, #8]
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	681a      	ldr	r2, [r3, #0]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	4a0a      	ldr	r2, [pc, #40]	; (8012804 <TIM_Base_SetConfig+0x114>)
 80127dc:	4293      	cmp	r3, r2
 80127de:	d003      	beq.n	80127e8 <TIM_Base_SetConfig+0xf8>
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	4a0c      	ldr	r2, [pc, #48]	; (8012814 <TIM_Base_SetConfig+0x124>)
 80127e4:	4293      	cmp	r3, r2
 80127e6:	d103      	bne.n	80127f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	691a      	ldr	r2, [r3, #16]
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2201      	movs	r2, #1
 80127f4:	615a      	str	r2, [r3, #20]
}
 80127f6:	bf00      	nop
 80127f8:	3714      	adds	r7, #20
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr
 8012802:	bf00      	nop
 8012804:	40010000 	.word	0x40010000
 8012808:	40000400 	.word	0x40000400
 801280c:	40000800 	.word	0x40000800
 8012810:	40000c00 	.word	0x40000c00
 8012814:	40010400 	.word	0x40010400
 8012818:	40014000 	.word	0x40014000
 801281c:	40014400 	.word	0x40014400
 8012820:	40014800 	.word	0x40014800
 8012824:	40001800 	.word	0x40001800
 8012828:	40001c00 	.word	0x40001c00
 801282c:	40002000 	.word	0x40002000

08012830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012830:	b480      	push	{r7}
 8012832:	b087      	sub	sp, #28
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	6a1b      	ldr	r3, [r3, #32]
 801283e:	f023 0201 	bic.w	r2, r3, #1
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6a1b      	ldr	r3, [r3, #32]
 801284a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	685b      	ldr	r3, [r3, #4]
 8012850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	699b      	ldr	r3, [r3, #24]
 8012856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801285e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	f023 0303 	bic.w	r3, r3, #3
 8012866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	68fa      	ldr	r2, [r7, #12]
 801286e:	4313      	orrs	r3, r2
 8012870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	f023 0302 	bic.w	r3, r3, #2
 8012878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	689b      	ldr	r3, [r3, #8]
 801287e:	697a      	ldr	r2, [r7, #20]
 8012880:	4313      	orrs	r3, r2
 8012882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	4a20      	ldr	r2, [pc, #128]	; (8012908 <TIM_OC1_SetConfig+0xd8>)
 8012888:	4293      	cmp	r3, r2
 801288a:	d003      	beq.n	8012894 <TIM_OC1_SetConfig+0x64>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	4a1f      	ldr	r2, [pc, #124]	; (801290c <TIM_OC1_SetConfig+0xdc>)
 8012890:	4293      	cmp	r3, r2
 8012892:	d10c      	bne.n	80128ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012894:	697b      	ldr	r3, [r7, #20]
 8012896:	f023 0308 	bic.w	r3, r3, #8
 801289a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	68db      	ldr	r3, [r3, #12]
 80128a0:	697a      	ldr	r2, [r7, #20]
 80128a2:	4313      	orrs	r3, r2
 80128a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80128a6:	697b      	ldr	r3, [r7, #20]
 80128a8:	f023 0304 	bic.w	r3, r3, #4
 80128ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	4a15      	ldr	r2, [pc, #84]	; (8012908 <TIM_OC1_SetConfig+0xd8>)
 80128b2:	4293      	cmp	r3, r2
 80128b4:	d003      	beq.n	80128be <TIM_OC1_SetConfig+0x8e>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	4a14      	ldr	r2, [pc, #80]	; (801290c <TIM_OC1_SetConfig+0xdc>)
 80128ba:	4293      	cmp	r3, r2
 80128bc:	d111      	bne.n	80128e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80128c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80128cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	695b      	ldr	r3, [r3, #20]
 80128d2:	693a      	ldr	r2, [r7, #16]
 80128d4:	4313      	orrs	r3, r2
 80128d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	699b      	ldr	r3, [r3, #24]
 80128dc:	693a      	ldr	r2, [r7, #16]
 80128de:	4313      	orrs	r3, r2
 80128e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	693a      	ldr	r2, [r7, #16]
 80128e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	68fa      	ldr	r2, [r7, #12]
 80128ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	685a      	ldr	r2, [r3, #4]
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	697a      	ldr	r2, [r7, #20]
 80128fa:	621a      	str	r2, [r3, #32]
}
 80128fc:	bf00      	nop
 80128fe:	371c      	adds	r7, #28
 8012900:	46bd      	mov	sp, r7
 8012902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012906:	4770      	bx	lr
 8012908:	40010000 	.word	0x40010000
 801290c:	40010400 	.word	0x40010400

08012910 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012910:	b480      	push	{r7}
 8012912:	b087      	sub	sp, #28
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6a1b      	ldr	r3, [r3, #32]
 801291e:	f023 0210 	bic.w	r2, r3, #16
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6a1b      	ldr	r3, [r3, #32]
 801292a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	685b      	ldr	r3, [r3, #4]
 8012930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	699b      	ldr	r3, [r3, #24]
 8012936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801293e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	021b      	lsls	r3, r3, #8
 801294e:	68fa      	ldr	r2, [r7, #12]
 8012950:	4313      	orrs	r3, r2
 8012952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012954:	697b      	ldr	r3, [r7, #20]
 8012956:	f023 0320 	bic.w	r3, r3, #32
 801295a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	689b      	ldr	r3, [r3, #8]
 8012960:	011b      	lsls	r3, r3, #4
 8012962:	697a      	ldr	r2, [r7, #20]
 8012964:	4313      	orrs	r3, r2
 8012966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	4a22      	ldr	r2, [pc, #136]	; (80129f4 <TIM_OC2_SetConfig+0xe4>)
 801296c:	4293      	cmp	r3, r2
 801296e:	d003      	beq.n	8012978 <TIM_OC2_SetConfig+0x68>
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	4a21      	ldr	r2, [pc, #132]	; (80129f8 <TIM_OC2_SetConfig+0xe8>)
 8012974:	4293      	cmp	r3, r2
 8012976:	d10d      	bne.n	8012994 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012978:	697b      	ldr	r3, [r7, #20]
 801297a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801297e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	68db      	ldr	r3, [r3, #12]
 8012984:	011b      	lsls	r3, r3, #4
 8012986:	697a      	ldr	r2, [r7, #20]
 8012988:	4313      	orrs	r3, r2
 801298a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801298c:	697b      	ldr	r3, [r7, #20]
 801298e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012992:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	4a17      	ldr	r2, [pc, #92]	; (80129f4 <TIM_OC2_SetConfig+0xe4>)
 8012998:	4293      	cmp	r3, r2
 801299a:	d003      	beq.n	80129a4 <TIM_OC2_SetConfig+0x94>
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	4a16      	ldr	r2, [pc, #88]	; (80129f8 <TIM_OC2_SetConfig+0xe8>)
 80129a0:	4293      	cmp	r3, r2
 80129a2:	d113      	bne.n	80129cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80129a4:	693b      	ldr	r3, [r7, #16]
 80129a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80129aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80129ac:	693b      	ldr	r3, [r7, #16]
 80129ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80129b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	695b      	ldr	r3, [r3, #20]
 80129b8:	009b      	lsls	r3, r3, #2
 80129ba:	693a      	ldr	r2, [r7, #16]
 80129bc:	4313      	orrs	r3, r2
 80129be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	699b      	ldr	r3, [r3, #24]
 80129c4:	009b      	lsls	r3, r3, #2
 80129c6:	693a      	ldr	r2, [r7, #16]
 80129c8:	4313      	orrs	r3, r2
 80129ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	693a      	ldr	r2, [r7, #16]
 80129d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	68fa      	ldr	r2, [r7, #12]
 80129d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80129d8:	683b      	ldr	r3, [r7, #0]
 80129da:	685a      	ldr	r2, [r3, #4]
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	697a      	ldr	r2, [r7, #20]
 80129e4:	621a      	str	r2, [r3, #32]
}
 80129e6:	bf00      	nop
 80129e8:	371c      	adds	r7, #28
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr
 80129f2:	bf00      	nop
 80129f4:	40010000 	.word	0x40010000
 80129f8:	40010400 	.word	0x40010400

080129fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80129fc:	b480      	push	{r7}
 80129fe:	b087      	sub	sp, #28
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	6a1b      	ldr	r3, [r3, #32]
 8012a0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6a1b      	ldr	r3, [r3, #32]
 8012a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	685b      	ldr	r3, [r3, #4]
 8012a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	69db      	ldr	r3, [r3, #28]
 8012a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	f023 0303 	bic.w	r3, r3, #3
 8012a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	68fa      	ldr	r2, [r7, #12]
 8012a3a:	4313      	orrs	r3, r2
 8012a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	689b      	ldr	r3, [r3, #8]
 8012a4a:	021b      	lsls	r3, r3, #8
 8012a4c:	697a      	ldr	r2, [r7, #20]
 8012a4e:	4313      	orrs	r3, r2
 8012a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	4a21      	ldr	r2, [pc, #132]	; (8012adc <TIM_OC3_SetConfig+0xe0>)
 8012a56:	4293      	cmp	r3, r2
 8012a58:	d003      	beq.n	8012a62 <TIM_OC3_SetConfig+0x66>
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	4a20      	ldr	r2, [pc, #128]	; (8012ae0 <TIM_OC3_SetConfig+0xe4>)
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d10d      	bne.n	8012a7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012a68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	68db      	ldr	r3, [r3, #12]
 8012a6e:	021b      	lsls	r3, r3, #8
 8012a70:	697a      	ldr	r2, [r7, #20]
 8012a72:	4313      	orrs	r3, r2
 8012a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	4a16      	ldr	r2, [pc, #88]	; (8012adc <TIM_OC3_SetConfig+0xe0>)
 8012a82:	4293      	cmp	r3, r2
 8012a84:	d003      	beq.n	8012a8e <TIM_OC3_SetConfig+0x92>
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	4a15      	ldr	r2, [pc, #84]	; (8012ae0 <TIM_OC3_SetConfig+0xe4>)
 8012a8a:	4293      	cmp	r3, r2
 8012a8c:	d113      	bne.n	8012ab6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012a8e:	693b      	ldr	r3, [r7, #16]
 8012a90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	695b      	ldr	r3, [r3, #20]
 8012aa2:	011b      	lsls	r3, r3, #4
 8012aa4:	693a      	ldr	r2, [r7, #16]
 8012aa6:	4313      	orrs	r3, r2
 8012aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	699b      	ldr	r3, [r3, #24]
 8012aae:	011b      	lsls	r3, r3, #4
 8012ab0:	693a      	ldr	r2, [r7, #16]
 8012ab2:	4313      	orrs	r3, r2
 8012ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	693a      	ldr	r2, [r7, #16]
 8012aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	68fa      	ldr	r2, [r7, #12]
 8012ac0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	685a      	ldr	r2, [r3, #4]
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	697a      	ldr	r2, [r7, #20]
 8012ace:	621a      	str	r2, [r3, #32]
}
 8012ad0:	bf00      	nop
 8012ad2:	371c      	adds	r7, #28
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ada:	4770      	bx	lr
 8012adc:	40010000 	.word	0x40010000
 8012ae0:	40010400 	.word	0x40010400

08012ae4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	b087      	sub	sp, #28
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6a1b      	ldr	r3, [r3, #32]
 8012af2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6a1b      	ldr	r3, [r3, #32]
 8012afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	69db      	ldr	r3, [r3, #28]
 8012b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	021b      	lsls	r3, r3, #8
 8012b22:	68fa      	ldr	r2, [r7, #12]
 8012b24:	4313      	orrs	r3, r2
 8012b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	689b      	ldr	r3, [r3, #8]
 8012b34:	031b      	lsls	r3, r3, #12
 8012b36:	693a      	ldr	r2, [r7, #16]
 8012b38:	4313      	orrs	r3, r2
 8012b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	4a12      	ldr	r2, [pc, #72]	; (8012b88 <TIM_OC4_SetConfig+0xa4>)
 8012b40:	4293      	cmp	r3, r2
 8012b42:	d003      	beq.n	8012b4c <TIM_OC4_SetConfig+0x68>
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	4a11      	ldr	r2, [pc, #68]	; (8012b8c <TIM_OC4_SetConfig+0xa8>)
 8012b48:	4293      	cmp	r3, r2
 8012b4a:	d109      	bne.n	8012b60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012b52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	695b      	ldr	r3, [r3, #20]
 8012b58:	019b      	lsls	r3, r3, #6
 8012b5a:	697a      	ldr	r2, [r7, #20]
 8012b5c:	4313      	orrs	r3, r2
 8012b5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	697a      	ldr	r2, [r7, #20]
 8012b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	68fa      	ldr	r2, [r7, #12]
 8012b6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	685a      	ldr	r2, [r3, #4]
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	693a      	ldr	r2, [r7, #16]
 8012b78:	621a      	str	r2, [r3, #32]
}
 8012b7a:	bf00      	nop
 8012b7c:	371c      	adds	r7, #28
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b84:	4770      	bx	lr
 8012b86:	bf00      	nop
 8012b88:	40010000 	.word	0x40010000
 8012b8c:	40010400 	.word	0x40010400

08012b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012b90:	b480      	push	{r7}
 8012b92:	b087      	sub	sp, #28
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	60f8      	str	r0, [r7, #12]
 8012b98:	60b9      	str	r1, [r7, #8]
 8012b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	6a1b      	ldr	r3, [r3, #32]
 8012ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	6a1b      	ldr	r3, [r3, #32]
 8012ba6:	f023 0201 	bic.w	r2, r3, #1
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	699b      	ldr	r3, [r3, #24]
 8012bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	011b      	lsls	r3, r3, #4
 8012bc0:	693a      	ldr	r2, [r7, #16]
 8012bc2:	4313      	orrs	r3, r2
 8012bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	f023 030a 	bic.w	r3, r3, #10
 8012bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012bce:	697a      	ldr	r2, [r7, #20]
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	4313      	orrs	r3, r2
 8012bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	693a      	ldr	r2, [r7, #16]
 8012bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	697a      	ldr	r2, [r7, #20]
 8012be0:	621a      	str	r2, [r3, #32]
}
 8012be2:	bf00      	nop
 8012be4:	371c      	adds	r7, #28
 8012be6:	46bd      	mov	sp, r7
 8012be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bec:	4770      	bx	lr

08012bee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012bee:	b480      	push	{r7}
 8012bf0:	b087      	sub	sp, #28
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	60f8      	str	r0, [r7, #12]
 8012bf6:	60b9      	str	r1, [r7, #8]
 8012bf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	6a1b      	ldr	r3, [r3, #32]
 8012bfe:	f023 0210 	bic.w	r2, r3, #16
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	699b      	ldr	r3, [r3, #24]
 8012c0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	6a1b      	ldr	r3, [r3, #32]
 8012c10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012c12:	697b      	ldr	r3, [r7, #20]
 8012c14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012c18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	031b      	lsls	r3, r3, #12
 8012c1e:	697a      	ldr	r2, [r7, #20]
 8012c20:	4313      	orrs	r3, r2
 8012c22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012c24:	693b      	ldr	r3, [r7, #16]
 8012c26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012c2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	011b      	lsls	r3, r3, #4
 8012c30:	693a      	ldr	r2, [r7, #16]
 8012c32:	4313      	orrs	r3, r2
 8012c34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	697a      	ldr	r2, [r7, #20]
 8012c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	693a      	ldr	r2, [r7, #16]
 8012c40:	621a      	str	r2, [r3, #32]
}
 8012c42:	bf00      	nop
 8012c44:	371c      	adds	r7, #28
 8012c46:	46bd      	mov	sp, r7
 8012c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4c:	4770      	bx	lr

08012c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012c4e:	b480      	push	{r7}
 8012c50:	b085      	sub	sp, #20
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	6078      	str	r0, [r7, #4]
 8012c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	689b      	ldr	r3, [r3, #8]
 8012c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012c66:	683a      	ldr	r2, [r7, #0]
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	4313      	orrs	r3, r2
 8012c6c:	f043 0307 	orr.w	r3, r3, #7
 8012c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	68fa      	ldr	r2, [r7, #12]
 8012c76:	609a      	str	r2, [r3, #8]
}
 8012c78:	bf00      	nop
 8012c7a:	3714      	adds	r7, #20
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr

08012c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012c84:	b480      	push	{r7}
 8012c86:	b087      	sub	sp, #28
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	60f8      	str	r0, [r7, #12]
 8012c8c:	60b9      	str	r1, [r7, #8]
 8012c8e:	607a      	str	r2, [r7, #4]
 8012c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	689b      	ldr	r3, [r3, #8]
 8012c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	021a      	lsls	r2, r3, #8
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	431a      	orrs	r2, r3
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	4313      	orrs	r3, r2
 8012cac:	697a      	ldr	r2, [r7, #20]
 8012cae:	4313      	orrs	r3, r2
 8012cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	697a      	ldr	r2, [r7, #20]
 8012cb6:	609a      	str	r2, [r3, #8]
}
 8012cb8:	bf00      	nop
 8012cba:	371c      	adds	r7, #28
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr

08012cc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012cc4:	b480      	push	{r7}
 8012cc6:	b087      	sub	sp, #28
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	60b9      	str	r1, [r7, #8]
 8012cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	f003 031f 	and.w	r3, r3, #31
 8012cd6:	2201      	movs	r2, #1
 8012cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8012cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	6a1a      	ldr	r2, [r3, #32]
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	43db      	mvns	r3, r3
 8012ce6:	401a      	ands	r2, r3
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	6a1a      	ldr	r2, [r3, #32]
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	f003 031f 	and.w	r3, r3, #31
 8012cf6:	6879      	ldr	r1, [r7, #4]
 8012cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8012cfc:	431a      	orrs	r2, r3
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	621a      	str	r2, [r3, #32]
}
 8012d02:	bf00      	nop
 8012d04:	371c      	adds	r7, #28
 8012d06:	46bd      	mov	sp, r7
 8012d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0c:	4770      	bx	lr

08012d0e <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012d0e:	b580      	push	{r7, lr}
 8012d10:	b084      	sub	sp, #16
 8012d12:	af00      	add	r7, sp, #0
 8012d14:	6078      	str	r0, [r7, #4]
 8012d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	2b04      	cmp	r3, #4
 8012d1c:	d00d      	beq.n	8012d3a <HAL_TIMEx_OCN_Start_IT+0x2c>
 8012d1e:	2b08      	cmp	r3, #8
 8012d20:	d014      	beq.n	8012d4c <HAL_TIMEx_OCN_Start_IT+0x3e>
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d000      	beq.n	8012d28 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8012d26:	e01a      	b.n	8012d5e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	68da      	ldr	r2, [r3, #12]
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	f042 0202 	orr.w	r2, r2, #2
 8012d36:	60da      	str	r2, [r3, #12]
      break;
 8012d38:	e011      	b.n	8012d5e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	68da      	ldr	r2, [r3, #12]
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	f042 0204 	orr.w	r2, r2, #4
 8012d48:	60da      	str	r2, [r3, #12]
      break;
 8012d4a:	e008      	b.n	8012d5e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	68da      	ldr	r2, [r3, #12]
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	f042 0208 	orr.w	r2, r2, #8
 8012d5a:	60da      	str	r2, [r3, #12]
      break;
 8012d5c:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	68da      	ldr	r2, [r3, #12]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8012d6c:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	2204      	movs	r2, #4
 8012d74:	6839      	ldr	r1, [r7, #0]
 8012d76:	4618      	mov	r0, r3
 8012d78:	f000 f976 	bl	8013068 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012d8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	689b      	ldr	r3, [r3, #8]
 8012d92:	f003 0307 	and.w	r3, r3, #7
 8012d96:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	2b06      	cmp	r3, #6
 8012d9c:	d007      	beq.n	8012dae <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	681a      	ldr	r2, [r3, #0]
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	f042 0201 	orr.w	r2, r2, #1
 8012dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012dae:	2300      	movs	r3, #0
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3710      	adds	r7, #16
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}

08012db8 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b084      	sub	sp, #16
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	2b04      	cmp	r3, #4
 8012dc6:	d00d      	beq.n	8012de4 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8012dc8:	2b08      	cmp	r3, #8
 8012dca:	d014      	beq.n	8012df6 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d000      	beq.n	8012dd2 <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8012dd0:	e01a      	b.n	8012e08 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	68da      	ldr	r2, [r3, #12]
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	f022 0202 	bic.w	r2, r2, #2
 8012de0:	60da      	str	r2, [r3, #12]
      break;
 8012de2:	e011      	b.n	8012e08 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	68da      	ldr	r2, [r3, #12]
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	f022 0204 	bic.w	r2, r2, #4
 8012df2:	60da      	str	r2, [r3, #12]
      break;
 8012df4:	e008      	b.n	8012e08 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	68da      	ldr	r2, [r3, #12]
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	f022 0208 	bic.w	r2, r2, #8
 8012e04:	60da      	str	r2, [r3, #12]
      break;
 8012e06:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	6839      	ldr	r1, [r7, #0]
 8012e10:	4618      	mov	r0, r3
 8012e12:	f000 f929 	bl	8013068 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	6a1b      	ldr	r3, [r3, #32]
 8012e1c:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8012e1e:	68fa      	ldr	r2, [r7, #12]
 8012e20:	f240 4344 	movw	r3, #1092	; 0x444
 8012e24:	4013      	ands	r3, r2
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d107      	bne.n	8012e3a <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	68da      	ldr	r2, [r3, #12]
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012e38:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	6a1a      	ldr	r2, [r3, #32]
 8012e40:	f241 1311 	movw	r3, #4369	; 0x1111
 8012e44:	4013      	ands	r3, r2
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d10f      	bne.n	8012e6a <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	6a1a      	ldr	r2, [r3, #32]
 8012e50:	f240 4344 	movw	r3, #1092	; 0x444
 8012e54:	4013      	ands	r3, r2
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d107      	bne.n	8012e6a <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012e68:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	6a1a      	ldr	r2, [r3, #32]
 8012e70:	f241 1311 	movw	r3, #4369	; 0x1111
 8012e74:	4013      	ands	r3, r2
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d10f      	bne.n	8012e9a <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	6a1a      	ldr	r2, [r3, #32]
 8012e80:	f240 4344 	movw	r3, #1092	; 0x444
 8012e84:	4013      	ands	r3, r2
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d107      	bne.n	8012e9a <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	681a      	ldr	r2, [r3, #0]
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	f022 0201 	bic.w	r2, r2, #1
 8012e98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012e9a:	2300      	movs	r3, #0
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3710      	adds	r7, #16
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012ea4:	b480      	push	{r7}
 8012ea6:	b085      	sub	sp, #20
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
 8012eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012eb4:	2b01      	cmp	r3, #1
 8012eb6:	d101      	bne.n	8012ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012eb8:	2302      	movs	r3, #2
 8012eba:	e05a      	b.n	8012f72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2201      	movs	r2, #1
 8012ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2202      	movs	r2, #2
 8012ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	689b      	ldr	r3, [r3, #8]
 8012eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	68fa      	ldr	r2, [r7, #12]
 8012eea:	4313      	orrs	r3, r2
 8012eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	68fa      	ldr	r2, [r7, #12]
 8012ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	4a21      	ldr	r2, [pc, #132]	; (8012f80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8012efc:	4293      	cmp	r3, r2
 8012efe:	d022      	beq.n	8012f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012f08:	d01d      	beq.n	8012f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	4a1d      	ldr	r2, [pc, #116]	; (8012f84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8012f10:	4293      	cmp	r3, r2
 8012f12:	d018      	beq.n	8012f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	4a1b      	ldr	r2, [pc, #108]	; (8012f88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8012f1a:	4293      	cmp	r3, r2
 8012f1c:	d013      	beq.n	8012f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	4a1a      	ldr	r2, [pc, #104]	; (8012f8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d00e      	beq.n	8012f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	4a18      	ldr	r2, [pc, #96]	; (8012f90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	d009      	beq.n	8012f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	4a17      	ldr	r2, [pc, #92]	; (8012f94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8012f38:	4293      	cmp	r3, r2
 8012f3a:	d004      	beq.n	8012f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	4a15      	ldr	r2, [pc, #84]	; (8012f98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8012f42:	4293      	cmp	r3, r2
 8012f44:	d10c      	bne.n	8012f60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	685b      	ldr	r3, [r3, #4]
 8012f52:	68ba      	ldr	r2, [r7, #8]
 8012f54:	4313      	orrs	r3, r2
 8012f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	68ba      	ldr	r2, [r7, #8]
 8012f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2201      	movs	r2, #1
 8012f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012f70:	2300      	movs	r3, #0
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	3714      	adds	r7, #20
 8012f76:	46bd      	mov	sp, r7
 8012f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7c:	4770      	bx	lr
 8012f7e:	bf00      	nop
 8012f80:	40010000 	.word	0x40010000
 8012f84:	40000400 	.word	0x40000400
 8012f88:	40000800 	.word	0x40000800
 8012f8c:	40000c00 	.word	0x40000c00
 8012f90:	40010400 	.word	0x40010400
 8012f94:	40014000 	.word	0x40014000
 8012f98:	40001800 	.word	0x40001800

08012f9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	b085      	sub	sp, #20
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
 8012fa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d101      	bne.n	8012fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012fb4:	2302      	movs	r3, #2
 8012fb6:	e03d      	b.n	8013034 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2201      	movs	r2, #1
 8012fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	68db      	ldr	r3, [r3, #12]
 8012fca:	4313      	orrs	r3, r2
 8012fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	689b      	ldr	r3, [r3, #8]
 8012fd8:	4313      	orrs	r3, r2
 8012fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	4313      	orrs	r3, r2
 8012fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	4313      	orrs	r3, r2
 8012ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	691b      	ldr	r3, [r3, #16]
 8013002:	4313      	orrs	r3, r2
 8013004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	695b      	ldr	r3, [r3, #20]
 8013010:	4313      	orrs	r3, r2
 8013012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	69db      	ldr	r3, [r3, #28]
 801301e:	4313      	orrs	r3, r2
 8013020:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	68fa      	ldr	r2, [r7, #12]
 8013028:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2200      	movs	r2, #0
 801302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013032:	2300      	movs	r3, #0
}
 8013034:	4618      	mov	r0, r3
 8013036:	3714      	adds	r7, #20
 8013038:	46bd      	mov	sp, r7
 801303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303e:	4770      	bx	lr

08013040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013040:	b480      	push	{r7}
 8013042:	b083      	sub	sp, #12
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013048:	bf00      	nop
 801304a:	370c      	adds	r7, #12
 801304c:	46bd      	mov	sp, r7
 801304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013052:	4770      	bx	lr

08013054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013054:	b480      	push	{r7}
 8013056:	b083      	sub	sp, #12
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801305c:	bf00      	nop
 801305e:	370c      	adds	r7, #12
 8013060:	46bd      	mov	sp, r7
 8013062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013066:	4770      	bx	lr

08013068 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8013068:	b480      	push	{r7}
 801306a:	b087      	sub	sp, #28
 801306c:	af00      	add	r7, sp, #0
 801306e:	60f8      	str	r0, [r7, #12]
 8013070:	60b9      	str	r1, [r7, #8]
 8013072:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	f003 031f 	and.w	r3, r3, #31
 801307a:	2204      	movs	r2, #4
 801307c:	fa02 f303 	lsl.w	r3, r2, r3
 8013080:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	6a1a      	ldr	r2, [r3, #32]
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	43db      	mvns	r3, r3
 801308a:	401a      	ands	r2, r3
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	6a1a      	ldr	r2, [r3, #32]
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	f003 031f 	and.w	r3, r3, #31
 801309a:	6879      	ldr	r1, [r7, #4]
 801309c:	fa01 f303 	lsl.w	r3, r1, r3
 80130a0:	431a      	orrs	r2, r3
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	621a      	str	r2, [r3, #32]
}
 80130a6:	bf00      	nop
 80130a8:	371c      	adds	r7, #28
 80130aa:	46bd      	mov	sp, r7
 80130ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b0:	4770      	bx	lr

080130b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80130b2:	b580      	push	{r7, lr}
 80130b4:	b082      	sub	sp, #8
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d101      	bne.n	80130c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80130c0:	2301      	movs	r3, #1
 80130c2:	e03f      	b.n	8013144 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80130ca:	b2db      	uxtb	r3, r3
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d106      	bne.n	80130de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2200      	movs	r2, #0
 80130d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f7f9 ff99 	bl	800d010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2224      	movs	r2, #36	; 0x24
 80130e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	68da      	ldr	r2, [r3, #12]
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80130f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	f000 f9b2 	bl	8013460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	691a      	ldr	r2, [r3, #16]
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801310a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	695a      	ldr	r2, [r3, #20]
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801311a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	68da      	ldr	r2, [r3, #12]
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801312a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2200      	movs	r2, #0
 8013130:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2220      	movs	r2, #32
 8013136:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2220      	movs	r2, #32
 801313e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8013142:	2300      	movs	r3, #0
}
 8013144:	4618      	mov	r0, r3
 8013146:	3708      	adds	r7, #8
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}

0801314c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b088      	sub	sp, #32
 8013150:	af02      	add	r7, sp, #8
 8013152:	60f8      	str	r0, [r7, #12]
 8013154:	60b9      	str	r1, [r7, #8]
 8013156:	603b      	str	r3, [r7, #0]
 8013158:	4613      	mov	r3, r2
 801315a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801315c:	2300      	movs	r3, #0
 801315e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013166:	b2db      	uxtb	r3, r3
 8013168:	2b20      	cmp	r3, #32
 801316a:	f040 8083 	bne.w	8013274 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d002      	beq.n	801317a <HAL_UART_Transmit+0x2e>
 8013174:	88fb      	ldrh	r3, [r7, #6]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d101      	bne.n	801317e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801317a:	2301      	movs	r3, #1
 801317c:	e07b      	b.n	8013276 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013184:	2b01      	cmp	r3, #1
 8013186:	d101      	bne.n	801318c <HAL_UART_Transmit+0x40>
 8013188:	2302      	movs	r3, #2
 801318a:	e074      	b.n	8013276 <HAL_UART_Transmit+0x12a>
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	2201      	movs	r2, #1
 8013190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	2200      	movs	r2, #0
 8013198:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	2221      	movs	r2, #33	; 0x21
 801319e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80131a2:	f7fb fd25 	bl	800ebf0 <HAL_GetTick>
 80131a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	88fa      	ldrh	r2, [r7, #6]
 80131ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	88fa      	ldrh	r2, [r7, #6]
 80131b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	2200      	movs	r2, #0
 80131b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80131bc:	e042      	b.n	8013244 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	3b01      	subs	r3, #1
 80131c6:	b29a      	uxth	r2, r3
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	689b      	ldr	r3, [r3, #8]
 80131d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80131d4:	d122      	bne.n	801321c <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	9300      	str	r3, [sp, #0]
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	2200      	movs	r2, #0
 80131de:	2180      	movs	r1, #128	; 0x80
 80131e0:	68f8      	ldr	r0, [r7, #12]
 80131e2:	f000 f8f2 	bl	80133ca <UART_WaitOnFlagUntilTimeout>
 80131e6:	4603      	mov	r3, r0
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d001      	beq.n	80131f0 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80131ec:	2303      	movs	r3, #3
 80131ee:	e042      	b.n	8013276 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80131f4:	693b      	ldr	r3, [r7, #16]
 80131f6:	881b      	ldrh	r3, [r3, #0]
 80131f8:	461a      	mov	r2, r3
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013202:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	691b      	ldr	r3, [r3, #16]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d103      	bne.n	8013214 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	3302      	adds	r3, #2
 8013210:	60bb      	str	r3, [r7, #8]
 8013212:	e017      	b.n	8013244 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	3301      	adds	r3, #1
 8013218:	60bb      	str	r3, [r7, #8]
 801321a:	e013      	b.n	8013244 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	9300      	str	r3, [sp, #0]
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	2200      	movs	r2, #0
 8013224:	2180      	movs	r1, #128	; 0x80
 8013226:	68f8      	ldr	r0, [r7, #12]
 8013228:	f000 f8cf 	bl	80133ca <UART_WaitOnFlagUntilTimeout>
 801322c:	4603      	mov	r3, r0
 801322e:	2b00      	cmp	r3, #0
 8013230:	d001      	beq.n	8013236 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8013232:	2303      	movs	r3, #3
 8013234:	e01f      	b.n	8013276 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	1c5a      	adds	r2, r3, #1
 801323a:	60ba      	str	r2, [r7, #8]
 801323c:	781a      	ldrb	r2, [r3, #0]
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013248:	b29b      	uxth	r3, r3
 801324a:	2b00      	cmp	r3, #0
 801324c:	d1b7      	bne.n	80131be <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	9300      	str	r3, [sp, #0]
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	2200      	movs	r2, #0
 8013256:	2140      	movs	r1, #64	; 0x40
 8013258:	68f8      	ldr	r0, [r7, #12]
 801325a:	f000 f8b6 	bl	80133ca <UART_WaitOnFlagUntilTimeout>
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d001      	beq.n	8013268 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8013264:	2303      	movs	r3, #3
 8013266:	e006      	b.n	8013276 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	2220      	movs	r2, #32
 801326c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8013270:	2300      	movs	r3, #0
 8013272:	e000      	b.n	8013276 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8013274:	2302      	movs	r3, #2
  }
}
 8013276:	4618      	mov	r0, r3
 8013278:	3718      	adds	r7, #24
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}

0801327e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801327e:	b580      	push	{r7, lr}
 8013280:	b088      	sub	sp, #32
 8013282:	af02      	add	r7, sp, #8
 8013284:	60f8      	str	r0, [r7, #12]
 8013286:	60b9      	str	r1, [r7, #8]
 8013288:	603b      	str	r3, [r7, #0]
 801328a:	4613      	mov	r3, r2
 801328c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801328e:	2300      	movs	r3, #0
 8013290:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013298:	b2db      	uxtb	r3, r3
 801329a:	2b20      	cmp	r3, #32
 801329c:	f040 8090 	bne.w	80133c0 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d002      	beq.n	80132ac <HAL_UART_Receive+0x2e>
 80132a6:	88fb      	ldrh	r3, [r7, #6]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d101      	bne.n	80132b0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80132ac:	2301      	movs	r3, #1
 80132ae:	e088      	b.n	80133c2 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80132b6:	2b01      	cmp	r3, #1
 80132b8:	d101      	bne.n	80132be <HAL_UART_Receive+0x40>
 80132ba:	2302      	movs	r3, #2
 80132bc:	e081      	b.n	80133c2 <HAL_UART_Receive+0x144>
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	2201      	movs	r2, #1
 80132c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	2200      	movs	r2, #0
 80132ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	2222      	movs	r2, #34	; 0x22
 80132d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80132d4:	f7fb fc8c 	bl	800ebf0 <HAL_GetTick>
 80132d8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	88fa      	ldrh	r2, [r7, #6]
 80132de:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	88fa      	ldrh	r2, [r7, #6]
 80132e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	2200      	movs	r2, #0
 80132ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80132ee:	e05c      	b.n	80133aa <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80132f4:	b29b      	uxth	r3, r3
 80132f6:	3b01      	subs	r3, #1
 80132f8:	b29a      	uxth	r2, r3
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	689b      	ldr	r3, [r3, #8]
 8013302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013306:	d12b      	bne.n	8013360 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	9300      	str	r3, [sp, #0]
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	2200      	movs	r2, #0
 8013310:	2120      	movs	r1, #32
 8013312:	68f8      	ldr	r0, [r7, #12]
 8013314:	f000 f859 	bl	80133ca <UART_WaitOnFlagUntilTimeout>
 8013318:	4603      	mov	r3, r0
 801331a:	2b00      	cmp	r3, #0
 801331c:	d001      	beq.n	8013322 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 801331e:	2303      	movs	r3, #3
 8013320:	e04f      	b.n	80133c2 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	691b      	ldr	r3, [r3, #16]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d10c      	bne.n	8013348 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	685b      	ldr	r3, [r3, #4]
 8013334:	b29b      	uxth	r3, r3
 8013336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801333a:	b29a      	uxth	r2, r3
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8013340:	68bb      	ldr	r3, [r7, #8]
 8013342:	3302      	adds	r3, #2
 8013344:	60bb      	str	r3, [r7, #8]
 8013346:	e030      	b.n	80133aa <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	685b      	ldr	r3, [r3, #4]
 801334e:	b29b      	uxth	r3, r3
 8013350:	b2db      	uxtb	r3, r3
 8013352:	b29a      	uxth	r2, r3
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	3301      	adds	r3, #1
 801335c:	60bb      	str	r3, [r7, #8]
 801335e:	e024      	b.n	80133aa <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013360:	683b      	ldr	r3, [r7, #0]
 8013362:	9300      	str	r3, [sp, #0]
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	2200      	movs	r2, #0
 8013368:	2120      	movs	r1, #32
 801336a:	68f8      	ldr	r0, [r7, #12]
 801336c:	f000 f82d 	bl	80133ca <UART_WaitOnFlagUntilTimeout>
 8013370:	4603      	mov	r3, r0
 8013372:	2b00      	cmp	r3, #0
 8013374:	d001      	beq.n	801337a <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8013376:	2303      	movs	r3, #3
 8013378:	e023      	b.n	80133c2 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	691b      	ldr	r3, [r3, #16]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d108      	bne.n	8013394 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	6859      	ldr	r1, [r3, #4]
 8013388:	68bb      	ldr	r3, [r7, #8]
 801338a:	1c5a      	adds	r2, r3, #1
 801338c:	60ba      	str	r2, [r7, #8]
 801338e:	b2ca      	uxtb	r2, r1
 8013390:	701a      	strb	r2, [r3, #0]
 8013392:	e00a      	b.n	80133aa <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	685b      	ldr	r3, [r3, #4]
 801339a:	b2da      	uxtb	r2, r3
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	1c59      	adds	r1, r3, #1
 80133a0:	60b9      	str	r1, [r7, #8]
 80133a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80133a6:	b2d2      	uxtb	r2, r2
 80133a8:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d19d      	bne.n	80132f0 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	2220      	movs	r2, #32
 80133b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80133bc:	2300      	movs	r3, #0
 80133be:	e000      	b.n	80133c2 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80133c0:	2302      	movs	r3, #2
  }
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3718      	adds	r7, #24
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}

080133ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80133ca:	b580      	push	{r7, lr}
 80133cc:	b084      	sub	sp, #16
 80133ce:	af00      	add	r7, sp, #0
 80133d0:	60f8      	str	r0, [r7, #12]
 80133d2:	60b9      	str	r1, [r7, #8]
 80133d4:	603b      	str	r3, [r7, #0]
 80133d6:	4613      	mov	r3, r2
 80133d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80133da:	e02c      	b.n	8013436 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80133dc:	69bb      	ldr	r3, [r7, #24]
 80133de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133e2:	d028      	beq.n	8013436 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80133e4:	69bb      	ldr	r3, [r7, #24]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d007      	beq.n	80133fa <UART_WaitOnFlagUntilTimeout+0x30>
 80133ea:	f7fb fc01 	bl	800ebf0 <HAL_GetTick>
 80133ee:	4602      	mov	r2, r0
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	1ad3      	subs	r3, r2, r3
 80133f4:	69ba      	ldr	r2, [r7, #24]
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d21d      	bcs.n	8013436 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	68da      	ldr	r2, [r3, #12]
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013408:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	695a      	ldr	r2, [r3, #20]
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	f022 0201 	bic.w	r2, r2, #1
 8013418:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	2220      	movs	r2, #32
 801341e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	2220      	movs	r2, #32
 8013426:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	2200      	movs	r2, #0
 801342e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8013432:	2303      	movs	r3, #3
 8013434:	e00f      	b.n	8013456 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	681a      	ldr	r2, [r3, #0]
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	4013      	ands	r3, r2
 8013440:	68ba      	ldr	r2, [r7, #8]
 8013442:	429a      	cmp	r2, r3
 8013444:	bf0c      	ite	eq
 8013446:	2301      	moveq	r3, #1
 8013448:	2300      	movne	r3, #0
 801344a:	b2db      	uxtb	r3, r3
 801344c:	461a      	mov	r2, r3
 801344e:	79fb      	ldrb	r3, [r7, #7]
 8013450:	429a      	cmp	r2, r3
 8013452:	d0c3      	beq.n	80133dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013454:	2300      	movs	r3, #0
}
 8013456:	4618      	mov	r0, r3
 8013458:	3710      	adds	r7, #16
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}
	...

08013460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013464:	b085      	sub	sp, #20
 8013466:	af00      	add	r7, sp, #0
 8013468:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	691b      	ldr	r3, [r3, #16]
 8013470:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	68da      	ldr	r2, [r3, #12]
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	430a      	orrs	r2, r1
 801347e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	689a      	ldr	r2, [r3, #8]
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	691b      	ldr	r3, [r3, #16]
 8013488:	431a      	orrs	r2, r3
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	695b      	ldr	r3, [r3, #20]
 801348e:	431a      	orrs	r2, r3
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	69db      	ldr	r3, [r3, #28]
 8013494:	4313      	orrs	r3, r2
 8013496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	68db      	ldr	r3, [r3, #12]
 801349e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80134a2:	f023 030c 	bic.w	r3, r3, #12
 80134a6:	687a      	ldr	r2, [r7, #4]
 80134a8:	6812      	ldr	r2, [r2, #0]
 80134aa:	68f9      	ldr	r1, [r7, #12]
 80134ac:	430b      	orrs	r3, r1
 80134ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	695b      	ldr	r3, [r3, #20]
 80134b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	699a      	ldr	r2, [r3, #24]
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	430a      	orrs	r2, r1
 80134c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	69db      	ldr	r3, [r3, #28]
 80134ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80134ce:	f040 818b 	bne.w	80137e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	4ac1      	ldr	r2, [pc, #772]	; (80137dc <UART_SetConfig+0x37c>)
 80134d8:	4293      	cmp	r3, r2
 80134da:	d005      	beq.n	80134e8 <UART_SetConfig+0x88>
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	4abf      	ldr	r2, [pc, #764]	; (80137e0 <UART_SetConfig+0x380>)
 80134e2:	4293      	cmp	r3, r2
 80134e4:	f040 80bd 	bne.w	8013662 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80134e8:	f7fd fce2 	bl	8010eb0 <HAL_RCC_GetPCLK2Freq>
 80134ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	461d      	mov	r5, r3
 80134f2:	f04f 0600 	mov.w	r6, #0
 80134f6:	46a8      	mov	r8, r5
 80134f8:	46b1      	mov	r9, r6
 80134fa:	eb18 0308 	adds.w	r3, r8, r8
 80134fe:	eb49 0409 	adc.w	r4, r9, r9
 8013502:	4698      	mov	r8, r3
 8013504:	46a1      	mov	r9, r4
 8013506:	eb18 0805 	adds.w	r8, r8, r5
 801350a:	eb49 0906 	adc.w	r9, r9, r6
 801350e:	f04f 0100 	mov.w	r1, #0
 8013512:	f04f 0200 	mov.w	r2, #0
 8013516:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801351a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801351e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013522:	4688      	mov	r8, r1
 8013524:	4691      	mov	r9, r2
 8013526:	eb18 0005 	adds.w	r0, r8, r5
 801352a:	eb49 0106 	adc.w	r1, r9, r6
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	685b      	ldr	r3, [r3, #4]
 8013532:	461d      	mov	r5, r3
 8013534:	f04f 0600 	mov.w	r6, #0
 8013538:	196b      	adds	r3, r5, r5
 801353a:	eb46 0406 	adc.w	r4, r6, r6
 801353e:	461a      	mov	r2, r3
 8013540:	4623      	mov	r3, r4
 8013542:	f7f5 fad9 	bl	8008af8 <__aeabi_uldivmod>
 8013546:	4603      	mov	r3, r0
 8013548:	460c      	mov	r4, r1
 801354a:	461a      	mov	r2, r3
 801354c:	4ba5      	ldr	r3, [pc, #660]	; (80137e4 <UART_SetConfig+0x384>)
 801354e:	fba3 2302 	umull	r2, r3, r3, r2
 8013552:	095b      	lsrs	r3, r3, #5
 8013554:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	461d      	mov	r5, r3
 801355c:	f04f 0600 	mov.w	r6, #0
 8013560:	46a9      	mov	r9, r5
 8013562:	46b2      	mov	sl, r6
 8013564:	eb19 0309 	adds.w	r3, r9, r9
 8013568:	eb4a 040a 	adc.w	r4, sl, sl
 801356c:	4699      	mov	r9, r3
 801356e:	46a2      	mov	sl, r4
 8013570:	eb19 0905 	adds.w	r9, r9, r5
 8013574:	eb4a 0a06 	adc.w	sl, sl, r6
 8013578:	f04f 0100 	mov.w	r1, #0
 801357c:	f04f 0200 	mov.w	r2, #0
 8013580:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013584:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013588:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801358c:	4689      	mov	r9, r1
 801358e:	4692      	mov	sl, r2
 8013590:	eb19 0005 	adds.w	r0, r9, r5
 8013594:	eb4a 0106 	adc.w	r1, sl, r6
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	685b      	ldr	r3, [r3, #4]
 801359c:	461d      	mov	r5, r3
 801359e:	f04f 0600 	mov.w	r6, #0
 80135a2:	196b      	adds	r3, r5, r5
 80135a4:	eb46 0406 	adc.w	r4, r6, r6
 80135a8:	461a      	mov	r2, r3
 80135aa:	4623      	mov	r3, r4
 80135ac:	f7f5 faa4 	bl	8008af8 <__aeabi_uldivmod>
 80135b0:	4603      	mov	r3, r0
 80135b2:	460c      	mov	r4, r1
 80135b4:	461a      	mov	r2, r3
 80135b6:	4b8b      	ldr	r3, [pc, #556]	; (80137e4 <UART_SetConfig+0x384>)
 80135b8:	fba3 1302 	umull	r1, r3, r3, r2
 80135bc:	095b      	lsrs	r3, r3, #5
 80135be:	2164      	movs	r1, #100	; 0x64
 80135c0:	fb01 f303 	mul.w	r3, r1, r3
 80135c4:	1ad3      	subs	r3, r2, r3
 80135c6:	00db      	lsls	r3, r3, #3
 80135c8:	3332      	adds	r3, #50	; 0x32
 80135ca:	4a86      	ldr	r2, [pc, #536]	; (80137e4 <UART_SetConfig+0x384>)
 80135cc:	fba2 2303 	umull	r2, r3, r2, r3
 80135d0:	095b      	lsrs	r3, r3, #5
 80135d2:	005b      	lsls	r3, r3, #1
 80135d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80135d8:	4498      	add	r8, r3
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	461d      	mov	r5, r3
 80135de:	f04f 0600 	mov.w	r6, #0
 80135e2:	46a9      	mov	r9, r5
 80135e4:	46b2      	mov	sl, r6
 80135e6:	eb19 0309 	adds.w	r3, r9, r9
 80135ea:	eb4a 040a 	adc.w	r4, sl, sl
 80135ee:	4699      	mov	r9, r3
 80135f0:	46a2      	mov	sl, r4
 80135f2:	eb19 0905 	adds.w	r9, r9, r5
 80135f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80135fa:	f04f 0100 	mov.w	r1, #0
 80135fe:	f04f 0200 	mov.w	r2, #0
 8013602:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013606:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801360a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801360e:	4689      	mov	r9, r1
 8013610:	4692      	mov	sl, r2
 8013612:	eb19 0005 	adds.w	r0, r9, r5
 8013616:	eb4a 0106 	adc.w	r1, sl, r6
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	685b      	ldr	r3, [r3, #4]
 801361e:	461d      	mov	r5, r3
 8013620:	f04f 0600 	mov.w	r6, #0
 8013624:	196b      	adds	r3, r5, r5
 8013626:	eb46 0406 	adc.w	r4, r6, r6
 801362a:	461a      	mov	r2, r3
 801362c:	4623      	mov	r3, r4
 801362e:	f7f5 fa63 	bl	8008af8 <__aeabi_uldivmod>
 8013632:	4603      	mov	r3, r0
 8013634:	460c      	mov	r4, r1
 8013636:	461a      	mov	r2, r3
 8013638:	4b6a      	ldr	r3, [pc, #424]	; (80137e4 <UART_SetConfig+0x384>)
 801363a:	fba3 1302 	umull	r1, r3, r3, r2
 801363e:	095b      	lsrs	r3, r3, #5
 8013640:	2164      	movs	r1, #100	; 0x64
 8013642:	fb01 f303 	mul.w	r3, r1, r3
 8013646:	1ad3      	subs	r3, r2, r3
 8013648:	00db      	lsls	r3, r3, #3
 801364a:	3332      	adds	r3, #50	; 0x32
 801364c:	4a65      	ldr	r2, [pc, #404]	; (80137e4 <UART_SetConfig+0x384>)
 801364e:	fba2 2303 	umull	r2, r3, r2, r3
 8013652:	095b      	lsrs	r3, r3, #5
 8013654:	f003 0207 	and.w	r2, r3, #7
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	4442      	add	r2, r8
 801365e:	609a      	str	r2, [r3, #8]
 8013660:	e26f      	b.n	8013b42 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8013662:	f7fd fc11 	bl	8010e88 <HAL_RCC_GetPCLK1Freq>
 8013666:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	461d      	mov	r5, r3
 801366c:	f04f 0600 	mov.w	r6, #0
 8013670:	46a8      	mov	r8, r5
 8013672:	46b1      	mov	r9, r6
 8013674:	eb18 0308 	adds.w	r3, r8, r8
 8013678:	eb49 0409 	adc.w	r4, r9, r9
 801367c:	4698      	mov	r8, r3
 801367e:	46a1      	mov	r9, r4
 8013680:	eb18 0805 	adds.w	r8, r8, r5
 8013684:	eb49 0906 	adc.w	r9, r9, r6
 8013688:	f04f 0100 	mov.w	r1, #0
 801368c:	f04f 0200 	mov.w	r2, #0
 8013690:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013694:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013698:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801369c:	4688      	mov	r8, r1
 801369e:	4691      	mov	r9, r2
 80136a0:	eb18 0005 	adds.w	r0, r8, r5
 80136a4:	eb49 0106 	adc.w	r1, r9, r6
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	685b      	ldr	r3, [r3, #4]
 80136ac:	461d      	mov	r5, r3
 80136ae:	f04f 0600 	mov.w	r6, #0
 80136b2:	196b      	adds	r3, r5, r5
 80136b4:	eb46 0406 	adc.w	r4, r6, r6
 80136b8:	461a      	mov	r2, r3
 80136ba:	4623      	mov	r3, r4
 80136bc:	f7f5 fa1c 	bl	8008af8 <__aeabi_uldivmod>
 80136c0:	4603      	mov	r3, r0
 80136c2:	460c      	mov	r4, r1
 80136c4:	461a      	mov	r2, r3
 80136c6:	4b47      	ldr	r3, [pc, #284]	; (80137e4 <UART_SetConfig+0x384>)
 80136c8:	fba3 2302 	umull	r2, r3, r3, r2
 80136cc:	095b      	lsrs	r3, r3, #5
 80136ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	461d      	mov	r5, r3
 80136d6:	f04f 0600 	mov.w	r6, #0
 80136da:	46a9      	mov	r9, r5
 80136dc:	46b2      	mov	sl, r6
 80136de:	eb19 0309 	adds.w	r3, r9, r9
 80136e2:	eb4a 040a 	adc.w	r4, sl, sl
 80136e6:	4699      	mov	r9, r3
 80136e8:	46a2      	mov	sl, r4
 80136ea:	eb19 0905 	adds.w	r9, r9, r5
 80136ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80136f2:	f04f 0100 	mov.w	r1, #0
 80136f6:	f04f 0200 	mov.w	r2, #0
 80136fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80136fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013702:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013706:	4689      	mov	r9, r1
 8013708:	4692      	mov	sl, r2
 801370a:	eb19 0005 	adds.w	r0, r9, r5
 801370e:	eb4a 0106 	adc.w	r1, sl, r6
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	685b      	ldr	r3, [r3, #4]
 8013716:	461d      	mov	r5, r3
 8013718:	f04f 0600 	mov.w	r6, #0
 801371c:	196b      	adds	r3, r5, r5
 801371e:	eb46 0406 	adc.w	r4, r6, r6
 8013722:	461a      	mov	r2, r3
 8013724:	4623      	mov	r3, r4
 8013726:	f7f5 f9e7 	bl	8008af8 <__aeabi_uldivmod>
 801372a:	4603      	mov	r3, r0
 801372c:	460c      	mov	r4, r1
 801372e:	461a      	mov	r2, r3
 8013730:	4b2c      	ldr	r3, [pc, #176]	; (80137e4 <UART_SetConfig+0x384>)
 8013732:	fba3 1302 	umull	r1, r3, r3, r2
 8013736:	095b      	lsrs	r3, r3, #5
 8013738:	2164      	movs	r1, #100	; 0x64
 801373a:	fb01 f303 	mul.w	r3, r1, r3
 801373e:	1ad3      	subs	r3, r2, r3
 8013740:	00db      	lsls	r3, r3, #3
 8013742:	3332      	adds	r3, #50	; 0x32
 8013744:	4a27      	ldr	r2, [pc, #156]	; (80137e4 <UART_SetConfig+0x384>)
 8013746:	fba2 2303 	umull	r2, r3, r2, r3
 801374a:	095b      	lsrs	r3, r3, #5
 801374c:	005b      	lsls	r3, r3, #1
 801374e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013752:	4498      	add	r8, r3
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	461d      	mov	r5, r3
 8013758:	f04f 0600 	mov.w	r6, #0
 801375c:	46a9      	mov	r9, r5
 801375e:	46b2      	mov	sl, r6
 8013760:	eb19 0309 	adds.w	r3, r9, r9
 8013764:	eb4a 040a 	adc.w	r4, sl, sl
 8013768:	4699      	mov	r9, r3
 801376a:	46a2      	mov	sl, r4
 801376c:	eb19 0905 	adds.w	r9, r9, r5
 8013770:	eb4a 0a06 	adc.w	sl, sl, r6
 8013774:	f04f 0100 	mov.w	r1, #0
 8013778:	f04f 0200 	mov.w	r2, #0
 801377c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013780:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013784:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013788:	4689      	mov	r9, r1
 801378a:	4692      	mov	sl, r2
 801378c:	eb19 0005 	adds.w	r0, r9, r5
 8013790:	eb4a 0106 	adc.w	r1, sl, r6
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	685b      	ldr	r3, [r3, #4]
 8013798:	461d      	mov	r5, r3
 801379a:	f04f 0600 	mov.w	r6, #0
 801379e:	196b      	adds	r3, r5, r5
 80137a0:	eb46 0406 	adc.w	r4, r6, r6
 80137a4:	461a      	mov	r2, r3
 80137a6:	4623      	mov	r3, r4
 80137a8:	f7f5 f9a6 	bl	8008af8 <__aeabi_uldivmod>
 80137ac:	4603      	mov	r3, r0
 80137ae:	460c      	mov	r4, r1
 80137b0:	461a      	mov	r2, r3
 80137b2:	4b0c      	ldr	r3, [pc, #48]	; (80137e4 <UART_SetConfig+0x384>)
 80137b4:	fba3 1302 	umull	r1, r3, r3, r2
 80137b8:	095b      	lsrs	r3, r3, #5
 80137ba:	2164      	movs	r1, #100	; 0x64
 80137bc:	fb01 f303 	mul.w	r3, r1, r3
 80137c0:	1ad3      	subs	r3, r2, r3
 80137c2:	00db      	lsls	r3, r3, #3
 80137c4:	3332      	adds	r3, #50	; 0x32
 80137c6:	4a07      	ldr	r2, [pc, #28]	; (80137e4 <UART_SetConfig+0x384>)
 80137c8:	fba2 2303 	umull	r2, r3, r2, r3
 80137cc:	095b      	lsrs	r3, r3, #5
 80137ce:	f003 0207 	and.w	r2, r3, #7
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	4442      	add	r2, r8
 80137d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80137da:	e1b2      	b.n	8013b42 <UART_SetConfig+0x6e2>
 80137dc:	40011000 	.word	0x40011000
 80137e0:	40011400 	.word	0x40011400
 80137e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	4ad7      	ldr	r2, [pc, #860]	; (8013b4c <UART_SetConfig+0x6ec>)
 80137ee:	4293      	cmp	r3, r2
 80137f0:	d005      	beq.n	80137fe <UART_SetConfig+0x39e>
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	4ad6      	ldr	r2, [pc, #856]	; (8013b50 <UART_SetConfig+0x6f0>)
 80137f8:	4293      	cmp	r3, r2
 80137fa:	f040 80d1 	bne.w	80139a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80137fe:	f7fd fb57 	bl	8010eb0 <HAL_RCC_GetPCLK2Freq>
 8013802:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	469a      	mov	sl, r3
 8013808:	f04f 0b00 	mov.w	fp, #0
 801380c:	46d0      	mov	r8, sl
 801380e:	46d9      	mov	r9, fp
 8013810:	eb18 0308 	adds.w	r3, r8, r8
 8013814:	eb49 0409 	adc.w	r4, r9, r9
 8013818:	4698      	mov	r8, r3
 801381a:	46a1      	mov	r9, r4
 801381c:	eb18 080a 	adds.w	r8, r8, sl
 8013820:	eb49 090b 	adc.w	r9, r9, fp
 8013824:	f04f 0100 	mov.w	r1, #0
 8013828:	f04f 0200 	mov.w	r2, #0
 801382c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013830:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013834:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013838:	4688      	mov	r8, r1
 801383a:	4691      	mov	r9, r2
 801383c:	eb1a 0508 	adds.w	r5, sl, r8
 8013840:	eb4b 0609 	adc.w	r6, fp, r9
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	685b      	ldr	r3, [r3, #4]
 8013848:	4619      	mov	r1, r3
 801384a:	f04f 0200 	mov.w	r2, #0
 801384e:	f04f 0300 	mov.w	r3, #0
 8013852:	f04f 0400 	mov.w	r4, #0
 8013856:	0094      	lsls	r4, r2, #2
 8013858:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801385c:	008b      	lsls	r3, r1, #2
 801385e:	461a      	mov	r2, r3
 8013860:	4623      	mov	r3, r4
 8013862:	4628      	mov	r0, r5
 8013864:	4631      	mov	r1, r6
 8013866:	f7f5 f947 	bl	8008af8 <__aeabi_uldivmod>
 801386a:	4603      	mov	r3, r0
 801386c:	460c      	mov	r4, r1
 801386e:	461a      	mov	r2, r3
 8013870:	4bb8      	ldr	r3, [pc, #736]	; (8013b54 <UART_SetConfig+0x6f4>)
 8013872:	fba3 2302 	umull	r2, r3, r3, r2
 8013876:	095b      	lsrs	r3, r3, #5
 8013878:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	469b      	mov	fp, r3
 8013880:	f04f 0c00 	mov.w	ip, #0
 8013884:	46d9      	mov	r9, fp
 8013886:	46e2      	mov	sl, ip
 8013888:	eb19 0309 	adds.w	r3, r9, r9
 801388c:	eb4a 040a 	adc.w	r4, sl, sl
 8013890:	4699      	mov	r9, r3
 8013892:	46a2      	mov	sl, r4
 8013894:	eb19 090b 	adds.w	r9, r9, fp
 8013898:	eb4a 0a0c 	adc.w	sl, sl, ip
 801389c:	f04f 0100 	mov.w	r1, #0
 80138a0:	f04f 0200 	mov.w	r2, #0
 80138a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80138a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80138ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80138b0:	4689      	mov	r9, r1
 80138b2:	4692      	mov	sl, r2
 80138b4:	eb1b 0509 	adds.w	r5, fp, r9
 80138b8:	eb4c 060a 	adc.w	r6, ip, sl
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	685b      	ldr	r3, [r3, #4]
 80138c0:	4619      	mov	r1, r3
 80138c2:	f04f 0200 	mov.w	r2, #0
 80138c6:	f04f 0300 	mov.w	r3, #0
 80138ca:	f04f 0400 	mov.w	r4, #0
 80138ce:	0094      	lsls	r4, r2, #2
 80138d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80138d4:	008b      	lsls	r3, r1, #2
 80138d6:	461a      	mov	r2, r3
 80138d8:	4623      	mov	r3, r4
 80138da:	4628      	mov	r0, r5
 80138dc:	4631      	mov	r1, r6
 80138de:	f7f5 f90b 	bl	8008af8 <__aeabi_uldivmod>
 80138e2:	4603      	mov	r3, r0
 80138e4:	460c      	mov	r4, r1
 80138e6:	461a      	mov	r2, r3
 80138e8:	4b9a      	ldr	r3, [pc, #616]	; (8013b54 <UART_SetConfig+0x6f4>)
 80138ea:	fba3 1302 	umull	r1, r3, r3, r2
 80138ee:	095b      	lsrs	r3, r3, #5
 80138f0:	2164      	movs	r1, #100	; 0x64
 80138f2:	fb01 f303 	mul.w	r3, r1, r3
 80138f6:	1ad3      	subs	r3, r2, r3
 80138f8:	011b      	lsls	r3, r3, #4
 80138fa:	3332      	adds	r3, #50	; 0x32
 80138fc:	4a95      	ldr	r2, [pc, #596]	; (8013b54 <UART_SetConfig+0x6f4>)
 80138fe:	fba2 2303 	umull	r2, r3, r2, r3
 8013902:	095b      	lsrs	r3, r3, #5
 8013904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013908:	4498      	add	r8, r3
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	469b      	mov	fp, r3
 801390e:	f04f 0c00 	mov.w	ip, #0
 8013912:	46d9      	mov	r9, fp
 8013914:	46e2      	mov	sl, ip
 8013916:	eb19 0309 	adds.w	r3, r9, r9
 801391a:	eb4a 040a 	adc.w	r4, sl, sl
 801391e:	4699      	mov	r9, r3
 8013920:	46a2      	mov	sl, r4
 8013922:	eb19 090b 	adds.w	r9, r9, fp
 8013926:	eb4a 0a0c 	adc.w	sl, sl, ip
 801392a:	f04f 0100 	mov.w	r1, #0
 801392e:	f04f 0200 	mov.w	r2, #0
 8013932:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013936:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801393a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801393e:	4689      	mov	r9, r1
 8013940:	4692      	mov	sl, r2
 8013942:	eb1b 0509 	adds.w	r5, fp, r9
 8013946:	eb4c 060a 	adc.w	r6, ip, sl
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	685b      	ldr	r3, [r3, #4]
 801394e:	4619      	mov	r1, r3
 8013950:	f04f 0200 	mov.w	r2, #0
 8013954:	f04f 0300 	mov.w	r3, #0
 8013958:	f04f 0400 	mov.w	r4, #0
 801395c:	0094      	lsls	r4, r2, #2
 801395e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013962:	008b      	lsls	r3, r1, #2
 8013964:	461a      	mov	r2, r3
 8013966:	4623      	mov	r3, r4
 8013968:	4628      	mov	r0, r5
 801396a:	4631      	mov	r1, r6
 801396c:	f7f5 f8c4 	bl	8008af8 <__aeabi_uldivmod>
 8013970:	4603      	mov	r3, r0
 8013972:	460c      	mov	r4, r1
 8013974:	461a      	mov	r2, r3
 8013976:	4b77      	ldr	r3, [pc, #476]	; (8013b54 <UART_SetConfig+0x6f4>)
 8013978:	fba3 1302 	umull	r1, r3, r3, r2
 801397c:	095b      	lsrs	r3, r3, #5
 801397e:	2164      	movs	r1, #100	; 0x64
 8013980:	fb01 f303 	mul.w	r3, r1, r3
 8013984:	1ad3      	subs	r3, r2, r3
 8013986:	011b      	lsls	r3, r3, #4
 8013988:	3332      	adds	r3, #50	; 0x32
 801398a:	4a72      	ldr	r2, [pc, #456]	; (8013b54 <UART_SetConfig+0x6f4>)
 801398c:	fba2 2303 	umull	r2, r3, r2, r3
 8013990:	095b      	lsrs	r3, r3, #5
 8013992:	f003 020f 	and.w	r2, r3, #15
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	4442      	add	r2, r8
 801399c:	609a      	str	r2, [r3, #8]
 801399e:	e0d0      	b.n	8013b42 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80139a0:	f7fd fa72 	bl	8010e88 <HAL_RCC_GetPCLK1Freq>
 80139a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	469a      	mov	sl, r3
 80139aa:	f04f 0b00 	mov.w	fp, #0
 80139ae:	46d0      	mov	r8, sl
 80139b0:	46d9      	mov	r9, fp
 80139b2:	eb18 0308 	adds.w	r3, r8, r8
 80139b6:	eb49 0409 	adc.w	r4, r9, r9
 80139ba:	4698      	mov	r8, r3
 80139bc:	46a1      	mov	r9, r4
 80139be:	eb18 080a 	adds.w	r8, r8, sl
 80139c2:	eb49 090b 	adc.w	r9, r9, fp
 80139c6:	f04f 0100 	mov.w	r1, #0
 80139ca:	f04f 0200 	mov.w	r2, #0
 80139ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80139d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80139d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80139da:	4688      	mov	r8, r1
 80139dc:	4691      	mov	r9, r2
 80139de:	eb1a 0508 	adds.w	r5, sl, r8
 80139e2:	eb4b 0609 	adc.w	r6, fp, r9
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	4619      	mov	r1, r3
 80139ec:	f04f 0200 	mov.w	r2, #0
 80139f0:	f04f 0300 	mov.w	r3, #0
 80139f4:	f04f 0400 	mov.w	r4, #0
 80139f8:	0094      	lsls	r4, r2, #2
 80139fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80139fe:	008b      	lsls	r3, r1, #2
 8013a00:	461a      	mov	r2, r3
 8013a02:	4623      	mov	r3, r4
 8013a04:	4628      	mov	r0, r5
 8013a06:	4631      	mov	r1, r6
 8013a08:	f7f5 f876 	bl	8008af8 <__aeabi_uldivmod>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	460c      	mov	r4, r1
 8013a10:	461a      	mov	r2, r3
 8013a12:	4b50      	ldr	r3, [pc, #320]	; (8013b54 <UART_SetConfig+0x6f4>)
 8013a14:	fba3 2302 	umull	r2, r3, r3, r2
 8013a18:	095b      	lsrs	r3, r3, #5
 8013a1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	469b      	mov	fp, r3
 8013a22:	f04f 0c00 	mov.w	ip, #0
 8013a26:	46d9      	mov	r9, fp
 8013a28:	46e2      	mov	sl, ip
 8013a2a:	eb19 0309 	adds.w	r3, r9, r9
 8013a2e:	eb4a 040a 	adc.w	r4, sl, sl
 8013a32:	4699      	mov	r9, r3
 8013a34:	46a2      	mov	sl, r4
 8013a36:	eb19 090b 	adds.w	r9, r9, fp
 8013a3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013a3e:	f04f 0100 	mov.w	r1, #0
 8013a42:	f04f 0200 	mov.w	r2, #0
 8013a46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013a4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013a4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013a52:	4689      	mov	r9, r1
 8013a54:	4692      	mov	sl, r2
 8013a56:	eb1b 0509 	adds.w	r5, fp, r9
 8013a5a:	eb4c 060a 	adc.w	r6, ip, sl
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	685b      	ldr	r3, [r3, #4]
 8013a62:	4619      	mov	r1, r3
 8013a64:	f04f 0200 	mov.w	r2, #0
 8013a68:	f04f 0300 	mov.w	r3, #0
 8013a6c:	f04f 0400 	mov.w	r4, #0
 8013a70:	0094      	lsls	r4, r2, #2
 8013a72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013a76:	008b      	lsls	r3, r1, #2
 8013a78:	461a      	mov	r2, r3
 8013a7a:	4623      	mov	r3, r4
 8013a7c:	4628      	mov	r0, r5
 8013a7e:	4631      	mov	r1, r6
 8013a80:	f7f5 f83a 	bl	8008af8 <__aeabi_uldivmod>
 8013a84:	4603      	mov	r3, r0
 8013a86:	460c      	mov	r4, r1
 8013a88:	461a      	mov	r2, r3
 8013a8a:	4b32      	ldr	r3, [pc, #200]	; (8013b54 <UART_SetConfig+0x6f4>)
 8013a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8013a90:	095b      	lsrs	r3, r3, #5
 8013a92:	2164      	movs	r1, #100	; 0x64
 8013a94:	fb01 f303 	mul.w	r3, r1, r3
 8013a98:	1ad3      	subs	r3, r2, r3
 8013a9a:	011b      	lsls	r3, r3, #4
 8013a9c:	3332      	adds	r3, #50	; 0x32
 8013a9e:	4a2d      	ldr	r2, [pc, #180]	; (8013b54 <UART_SetConfig+0x6f4>)
 8013aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8013aa4:	095b      	lsrs	r3, r3, #5
 8013aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013aaa:	4498      	add	r8, r3
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	469b      	mov	fp, r3
 8013ab0:	f04f 0c00 	mov.w	ip, #0
 8013ab4:	46d9      	mov	r9, fp
 8013ab6:	46e2      	mov	sl, ip
 8013ab8:	eb19 0309 	adds.w	r3, r9, r9
 8013abc:	eb4a 040a 	adc.w	r4, sl, sl
 8013ac0:	4699      	mov	r9, r3
 8013ac2:	46a2      	mov	sl, r4
 8013ac4:	eb19 090b 	adds.w	r9, r9, fp
 8013ac8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013acc:	f04f 0100 	mov.w	r1, #0
 8013ad0:	f04f 0200 	mov.w	r2, #0
 8013ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013ad8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013adc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013ae0:	4689      	mov	r9, r1
 8013ae2:	4692      	mov	sl, r2
 8013ae4:	eb1b 0509 	adds.w	r5, fp, r9
 8013ae8:	eb4c 060a 	adc.w	r6, ip, sl
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	685b      	ldr	r3, [r3, #4]
 8013af0:	4619      	mov	r1, r3
 8013af2:	f04f 0200 	mov.w	r2, #0
 8013af6:	f04f 0300 	mov.w	r3, #0
 8013afa:	f04f 0400 	mov.w	r4, #0
 8013afe:	0094      	lsls	r4, r2, #2
 8013b00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013b04:	008b      	lsls	r3, r1, #2
 8013b06:	461a      	mov	r2, r3
 8013b08:	4623      	mov	r3, r4
 8013b0a:	4628      	mov	r0, r5
 8013b0c:	4631      	mov	r1, r6
 8013b0e:	f7f4 fff3 	bl	8008af8 <__aeabi_uldivmod>
 8013b12:	4603      	mov	r3, r0
 8013b14:	460c      	mov	r4, r1
 8013b16:	461a      	mov	r2, r3
 8013b18:	4b0e      	ldr	r3, [pc, #56]	; (8013b54 <UART_SetConfig+0x6f4>)
 8013b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8013b1e:	095b      	lsrs	r3, r3, #5
 8013b20:	2164      	movs	r1, #100	; 0x64
 8013b22:	fb01 f303 	mul.w	r3, r1, r3
 8013b26:	1ad3      	subs	r3, r2, r3
 8013b28:	011b      	lsls	r3, r3, #4
 8013b2a:	3332      	adds	r3, #50	; 0x32
 8013b2c:	4a09      	ldr	r2, [pc, #36]	; (8013b54 <UART_SetConfig+0x6f4>)
 8013b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8013b32:	095b      	lsrs	r3, r3, #5
 8013b34:	f003 020f 	and.w	r2, r3, #15
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	4442      	add	r2, r8
 8013b3e:	609a      	str	r2, [r3, #8]
}
 8013b40:	e7ff      	b.n	8013b42 <UART_SetConfig+0x6e2>
 8013b42:	bf00      	nop
 8013b44:	3714      	adds	r7, #20
 8013b46:	46bd      	mov	sp, r7
 8013b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b4c:	40011000 	.word	0x40011000
 8013b50:	40011400 	.word	0x40011400
 8013b54:	51eb851f 	.word	0x51eb851f

08013b58 <round>:
 8013b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b5a:	ec57 6b10 	vmov	r6, r7, d0
 8013b5e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8013b62:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8013b66:	2c13      	cmp	r4, #19
 8013b68:	463b      	mov	r3, r7
 8013b6a:	463d      	mov	r5, r7
 8013b6c:	dc17      	bgt.n	8013b9e <round+0x46>
 8013b6e:	2c00      	cmp	r4, #0
 8013b70:	da09      	bge.n	8013b86 <round+0x2e>
 8013b72:	3401      	adds	r4, #1
 8013b74:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8013b78:	d103      	bne.n	8013b82 <round+0x2a>
 8013b7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013b7e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013b82:	2100      	movs	r1, #0
 8013b84:	e02c      	b.n	8013be0 <round+0x88>
 8013b86:	4a18      	ldr	r2, [pc, #96]	; (8013be8 <round+0x90>)
 8013b88:	4122      	asrs	r2, r4
 8013b8a:	4217      	tst	r7, r2
 8013b8c:	d100      	bne.n	8013b90 <round+0x38>
 8013b8e:	b19e      	cbz	r6, 8013bb8 <round+0x60>
 8013b90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013b94:	4123      	asrs	r3, r4
 8013b96:	442b      	add	r3, r5
 8013b98:	ea23 0302 	bic.w	r3, r3, r2
 8013b9c:	e7f1      	b.n	8013b82 <round+0x2a>
 8013b9e:	2c33      	cmp	r4, #51	; 0x33
 8013ba0:	dd0d      	ble.n	8013bbe <round+0x66>
 8013ba2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8013ba6:	d107      	bne.n	8013bb8 <round+0x60>
 8013ba8:	4630      	mov	r0, r6
 8013baa:	4639      	mov	r1, r7
 8013bac:	ee10 2a10 	vmov	r2, s0
 8013bb0:	f7f4 faa4 	bl	80080fc <__adddf3>
 8013bb4:	4606      	mov	r6, r0
 8013bb6:	460f      	mov	r7, r1
 8013bb8:	ec47 6b10 	vmov	d0, r6, r7
 8013bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bbe:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8013bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8013bc6:	40d0      	lsrs	r0, r2
 8013bc8:	4206      	tst	r6, r0
 8013bca:	d0f5      	beq.n	8013bb8 <round+0x60>
 8013bcc:	2201      	movs	r2, #1
 8013bce:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8013bd2:	fa02 f404 	lsl.w	r4, r2, r4
 8013bd6:	1931      	adds	r1, r6, r4
 8013bd8:	bf28      	it	cs
 8013bda:	189b      	addcs	r3, r3, r2
 8013bdc:	ea21 0100 	bic.w	r1, r1, r0
 8013be0:	461f      	mov	r7, r3
 8013be2:	460e      	mov	r6, r1
 8013be4:	e7e8      	b.n	8013bb8 <round+0x60>
 8013be6:	bf00      	nop
 8013be8:	000fffff 	.word	0x000fffff

08013bec <__errno>:
 8013bec:	4b01      	ldr	r3, [pc, #4]	; (8013bf4 <__errno+0x8>)
 8013bee:	6818      	ldr	r0, [r3, #0]
 8013bf0:	4770      	bx	lr
 8013bf2:	bf00      	nop
 8013bf4:	20000038 	.word	0x20000038

08013bf8 <__sflush_r>:
 8013bf8:	898a      	ldrh	r2, [r1, #12]
 8013bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bfe:	4605      	mov	r5, r0
 8013c00:	0710      	lsls	r0, r2, #28
 8013c02:	460c      	mov	r4, r1
 8013c04:	d458      	bmi.n	8013cb8 <__sflush_r+0xc0>
 8013c06:	684b      	ldr	r3, [r1, #4]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	dc05      	bgt.n	8013c18 <__sflush_r+0x20>
 8013c0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	dc02      	bgt.n	8013c18 <__sflush_r+0x20>
 8013c12:	2000      	movs	r0, #0
 8013c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c1a:	2e00      	cmp	r6, #0
 8013c1c:	d0f9      	beq.n	8013c12 <__sflush_r+0x1a>
 8013c1e:	2300      	movs	r3, #0
 8013c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013c24:	682f      	ldr	r7, [r5, #0]
 8013c26:	6a21      	ldr	r1, [r4, #32]
 8013c28:	602b      	str	r3, [r5, #0]
 8013c2a:	d032      	beq.n	8013c92 <__sflush_r+0x9a>
 8013c2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013c2e:	89a3      	ldrh	r3, [r4, #12]
 8013c30:	075a      	lsls	r2, r3, #29
 8013c32:	d505      	bpl.n	8013c40 <__sflush_r+0x48>
 8013c34:	6863      	ldr	r3, [r4, #4]
 8013c36:	1ac0      	subs	r0, r0, r3
 8013c38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013c3a:	b10b      	cbz	r3, 8013c40 <__sflush_r+0x48>
 8013c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013c3e:	1ac0      	subs	r0, r0, r3
 8013c40:	2300      	movs	r3, #0
 8013c42:	4602      	mov	r2, r0
 8013c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c46:	6a21      	ldr	r1, [r4, #32]
 8013c48:	4628      	mov	r0, r5
 8013c4a:	47b0      	blx	r6
 8013c4c:	1c43      	adds	r3, r0, #1
 8013c4e:	89a3      	ldrh	r3, [r4, #12]
 8013c50:	d106      	bne.n	8013c60 <__sflush_r+0x68>
 8013c52:	6829      	ldr	r1, [r5, #0]
 8013c54:	291d      	cmp	r1, #29
 8013c56:	d848      	bhi.n	8013cea <__sflush_r+0xf2>
 8013c58:	4a29      	ldr	r2, [pc, #164]	; (8013d00 <__sflush_r+0x108>)
 8013c5a:	40ca      	lsrs	r2, r1
 8013c5c:	07d6      	lsls	r6, r2, #31
 8013c5e:	d544      	bpl.n	8013cea <__sflush_r+0xf2>
 8013c60:	2200      	movs	r2, #0
 8013c62:	6062      	str	r2, [r4, #4]
 8013c64:	04d9      	lsls	r1, r3, #19
 8013c66:	6922      	ldr	r2, [r4, #16]
 8013c68:	6022      	str	r2, [r4, #0]
 8013c6a:	d504      	bpl.n	8013c76 <__sflush_r+0x7e>
 8013c6c:	1c42      	adds	r2, r0, #1
 8013c6e:	d101      	bne.n	8013c74 <__sflush_r+0x7c>
 8013c70:	682b      	ldr	r3, [r5, #0]
 8013c72:	b903      	cbnz	r3, 8013c76 <__sflush_r+0x7e>
 8013c74:	6560      	str	r0, [r4, #84]	; 0x54
 8013c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c78:	602f      	str	r7, [r5, #0]
 8013c7a:	2900      	cmp	r1, #0
 8013c7c:	d0c9      	beq.n	8013c12 <__sflush_r+0x1a>
 8013c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c82:	4299      	cmp	r1, r3
 8013c84:	d002      	beq.n	8013c8c <__sflush_r+0x94>
 8013c86:	4628      	mov	r0, r5
 8013c88:	f000 f9fa 	bl	8014080 <_free_r>
 8013c8c:	2000      	movs	r0, #0
 8013c8e:	6360      	str	r0, [r4, #52]	; 0x34
 8013c90:	e7c0      	b.n	8013c14 <__sflush_r+0x1c>
 8013c92:	2301      	movs	r3, #1
 8013c94:	4628      	mov	r0, r5
 8013c96:	47b0      	blx	r6
 8013c98:	1c41      	adds	r1, r0, #1
 8013c9a:	d1c8      	bne.n	8013c2e <__sflush_r+0x36>
 8013c9c:	682b      	ldr	r3, [r5, #0]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d0c5      	beq.n	8013c2e <__sflush_r+0x36>
 8013ca2:	2b1d      	cmp	r3, #29
 8013ca4:	d001      	beq.n	8013caa <__sflush_r+0xb2>
 8013ca6:	2b16      	cmp	r3, #22
 8013ca8:	d101      	bne.n	8013cae <__sflush_r+0xb6>
 8013caa:	602f      	str	r7, [r5, #0]
 8013cac:	e7b1      	b.n	8013c12 <__sflush_r+0x1a>
 8013cae:	89a3      	ldrh	r3, [r4, #12]
 8013cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cb4:	81a3      	strh	r3, [r4, #12]
 8013cb6:	e7ad      	b.n	8013c14 <__sflush_r+0x1c>
 8013cb8:	690f      	ldr	r7, [r1, #16]
 8013cba:	2f00      	cmp	r7, #0
 8013cbc:	d0a9      	beq.n	8013c12 <__sflush_r+0x1a>
 8013cbe:	0793      	lsls	r3, r2, #30
 8013cc0:	680e      	ldr	r6, [r1, #0]
 8013cc2:	bf08      	it	eq
 8013cc4:	694b      	ldreq	r3, [r1, #20]
 8013cc6:	600f      	str	r7, [r1, #0]
 8013cc8:	bf18      	it	ne
 8013cca:	2300      	movne	r3, #0
 8013ccc:	eba6 0807 	sub.w	r8, r6, r7
 8013cd0:	608b      	str	r3, [r1, #8]
 8013cd2:	f1b8 0f00 	cmp.w	r8, #0
 8013cd6:	dd9c      	ble.n	8013c12 <__sflush_r+0x1a>
 8013cd8:	4643      	mov	r3, r8
 8013cda:	463a      	mov	r2, r7
 8013cdc:	6a21      	ldr	r1, [r4, #32]
 8013cde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013ce0:	4628      	mov	r0, r5
 8013ce2:	47b0      	blx	r6
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	dc06      	bgt.n	8013cf6 <__sflush_r+0xfe>
 8013ce8:	89a3      	ldrh	r3, [r4, #12]
 8013cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cee:	81a3      	strh	r3, [r4, #12]
 8013cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8013cf4:	e78e      	b.n	8013c14 <__sflush_r+0x1c>
 8013cf6:	4407      	add	r7, r0
 8013cf8:	eba8 0800 	sub.w	r8, r8, r0
 8013cfc:	e7e9      	b.n	8013cd2 <__sflush_r+0xda>
 8013cfe:	bf00      	nop
 8013d00:	20400001 	.word	0x20400001

08013d04 <_fflush_r>:
 8013d04:	b538      	push	{r3, r4, r5, lr}
 8013d06:	690b      	ldr	r3, [r1, #16]
 8013d08:	4605      	mov	r5, r0
 8013d0a:	460c      	mov	r4, r1
 8013d0c:	b1db      	cbz	r3, 8013d46 <_fflush_r+0x42>
 8013d0e:	b118      	cbz	r0, 8013d18 <_fflush_r+0x14>
 8013d10:	6983      	ldr	r3, [r0, #24]
 8013d12:	b90b      	cbnz	r3, 8013d18 <_fflush_r+0x14>
 8013d14:	f000 f872 	bl	8013dfc <__sinit>
 8013d18:	4b0c      	ldr	r3, [pc, #48]	; (8013d4c <_fflush_r+0x48>)
 8013d1a:	429c      	cmp	r4, r3
 8013d1c:	d109      	bne.n	8013d32 <_fflush_r+0x2e>
 8013d1e:	686c      	ldr	r4, [r5, #4]
 8013d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d24:	b17b      	cbz	r3, 8013d46 <_fflush_r+0x42>
 8013d26:	4621      	mov	r1, r4
 8013d28:	4628      	mov	r0, r5
 8013d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d2e:	f7ff bf63 	b.w	8013bf8 <__sflush_r>
 8013d32:	4b07      	ldr	r3, [pc, #28]	; (8013d50 <_fflush_r+0x4c>)
 8013d34:	429c      	cmp	r4, r3
 8013d36:	d101      	bne.n	8013d3c <_fflush_r+0x38>
 8013d38:	68ac      	ldr	r4, [r5, #8]
 8013d3a:	e7f1      	b.n	8013d20 <_fflush_r+0x1c>
 8013d3c:	4b05      	ldr	r3, [pc, #20]	; (8013d54 <_fflush_r+0x50>)
 8013d3e:	429c      	cmp	r4, r3
 8013d40:	bf08      	it	eq
 8013d42:	68ec      	ldreq	r4, [r5, #12]
 8013d44:	e7ec      	b.n	8013d20 <_fflush_r+0x1c>
 8013d46:	2000      	movs	r0, #0
 8013d48:	bd38      	pop	{r3, r4, r5, pc}
 8013d4a:	bf00      	nop
 8013d4c:	08019444 	.word	0x08019444
 8013d50:	08019464 	.word	0x08019464
 8013d54:	08019424 	.word	0x08019424

08013d58 <fflush>:
 8013d58:	4601      	mov	r1, r0
 8013d5a:	b920      	cbnz	r0, 8013d66 <fflush+0xe>
 8013d5c:	4b04      	ldr	r3, [pc, #16]	; (8013d70 <fflush+0x18>)
 8013d5e:	4905      	ldr	r1, [pc, #20]	; (8013d74 <fflush+0x1c>)
 8013d60:	6818      	ldr	r0, [r3, #0]
 8013d62:	f000 b8d3 	b.w	8013f0c <_fwalk_reent>
 8013d66:	4b04      	ldr	r3, [pc, #16]	; (8013d78 <fflush+0x20>)
 8013d68:	6818      	ldr	r0, [r3, #0]
 8013d6a:	f7ff bfcb 	b.w	8013d04 <_fflush_r>
 8013d6e:	bf00      	nop
 8013d70:	08019484 	.word	0x08019484
 8013d74:	08013d05 	.word	0x08013d05
 8013d78:	20000038 	.word	0x20000038

08013d7c <std>:
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	b510      	push	{r4, lr}
 8013d80:	4604      	mov	r4, r0
 8013d82:	e9c0 3300 	strd	r3, r3, [r0]
 8013d86:	6083      	str	r3, [r0, #8]
 8013d88:	8181      	strh	r1, [r0, #12]
 8013d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8013d8c:	81c2      	strh	r2, [r0, #14]
 8013d8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d92:	6183      	str	r3, [r0, #24]
 8013d94:	4619      	mov	r1, r3
 8013d96:	2208      	movs	r2, #8
 8013d98:	305c      	adds	r0, #92	; 0x5c
 8013d9a:	f000 f968 	bl	801406e <memset>
 8013d9e:	4b05      	ldr	r3, [pc, #20]	; (8013db4 <std+0x38>)
 8013da0:	6263      	str	r3, [r4, #36]	; 0x24
 8013da2:	4b05      	ldr	r3, [pc, #20]	; (8013db8 <std+0x3c>)
 8013da4:	62a3      	str	r3, [r4, #40]	; 0x28
 8013da6:	4b05      	ldr	r3, [pc, #20]	; (8013dbc <std+0x40>)
 8013da8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013daa:	4b05      	ldr	r3, [pc, #20]	; (8013dc0 <std+0x44>)
 8013dac:	6224      	str	r4, [r4, #32]
 8013dae:	6323      	str	r3, [r4, #48]	; 0x30
 8013db0:	bd10      	pop	{r4, pc}
 8013db2:	bf00      	nop
 8013db4:	08015de1 	.word	0x08015de1
 8013db8:	08015e03 	.word	0x08015e03
 8013dbc:	08015e3b 	.word	0x08015e3b
 8013dc0:	08015e5f 	.word	0x08015e5f

08013dc4 <_cleanup_r>:
 8013dc4:	4901      	ldr	r1, [pc, #4]	; (8013dcc <_cleanup_r+0x8>)
 8013dc6:	f000 b8a1 	b.w	8013f0c <_fwalk_reent>
 8013dca:	bf00      	nop
 8013dcc:	08013d05 	.word	0x08013d05

08013dd0 <__sfmoreglue>:
 8013dd0:	b570      	push	{r4, r5, r6, lr}
 8013dd2:	1e4a      	subs	r2, r1, #1
 8013dd4:	2568      	movs	r5, #104	; 0x68
 8013dd6:	4355      	muls	r5, r2
 8013dd8:	460e      	mov	r6, r1
 8013dda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013dde:	f000 f99d 	bl	801411c <_malloc_r>
 8013de2:	4604      	mov	r4, r0
 8013de4:	b140      	cbz	r0, 8013df8 <__sfmoreglue+0x28>
 8013de6:	2100      	movs	r1, #0
 8013de8:	e9c0 1600 	strd	r1, r6, [r0]
 8013dec:	300c      	adds	r0, #12
 8013dee:	60a0      	str	r0, [r4, #8]
 8013df0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013df4:	f000 f93b 	bl	801406e <memset>
 8013df8:	4620      	mov	r0, r4
 8013dfa:	bd70      	pop	{r4, r5, r6, pc}

08013dfc <__sinit>:
 8013dfc:	6983      	ldr	r3, [r0, #24]
 8013dfe:	b510      	push	{r4, lr}
 8013e00:	4604      	mov	r4, r0
 8013e02:	bb33      	cbnz	r3, 8013e52 <__sinit+0x56>
 8013e04:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013e08:	6503      	str	r3, [r0, #80]	; 0x50
 8013e0a:	4b12      	ldr	r3, [pc, #72]	; (8013e54 <__sinit+0x58>)
 8013e0c:	4a12      	ldr	r2, [pc, #72]	; (8013e58 <__sinit+0x5c>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	6282      	str	r2, [r0, #40]	; 0x28
 8013e12:	4298      	cmp	r0, r3
 8013e14:	bf04      	itt	eq
 8013e16:	2301      	moveq	r3, #1
 8013e18:	6183      	streq	r3, [r0, #24]
 8013e1a:	f000 f81f 	bl	8013e5c <__sfp>
 8013e1e:	6060      	str	r0, [r4, #4]
 8013e20:	4620      	mov	r0, r4
 8013e22:	f000 f81b 	bl	8013e5c <__sfp>
 8013e26:	60a0      	str	r0, [r4, #8]
 8013e28:	4620      	mov	r0, r4
 8013e2a:	f000 f817 	bl	8013e5c <__sfp>
 8013e2e:	2200      	movs	r2, #0
 8013e30:	60e0      	str	r0, [r4, #12]
 8013e32:	2104      	movs	r1, #4
 8013e34:	6860      	ldr	r0, [r4, #4]
 8013e36:	f7ff ffa1 	bl	8013d7c <std>
 8013e3a:	2201      	movs	r2, #1
 8013e3c:	2109      	movs	r1, #9
 8013e3e:	68a0      	ldr	r0, [r4, #8]
 8013e40:	f7ff ff9c 	bl	8013d7c <std>
 8013e44:	2202      	movs	r2, #2
 8013e46:	2112      	movs	r1, #18
 8013e48:	68e0      	ldr	r0, [r4, #12]
 8013e4a:	f7ff ff97 	bl	8013d7c <std>
 8013e4e:	2301      	movs	r3, #1
 8013e50:	61a3      	str	r3, [r4, #24]
 8013e52:	bd10      	pop	{r4, pc}
 8013e54:	08019484 	.word	0x08019484
 8013e58:	08013dc5 	.word	0x08013dc5

08013e5c <__sfp>:
 8013e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e5e:	4b1b      	ldr	r3, [pc, #108]	; (8013ecc <__sfp+0x70>)
 8013e60:	681e      	ldr	r6, [r3, #0]
 8013e62:	69b3      	ldr	r3, [r6, #24]
 8013e64:	4607      	mov	r7, r0
 8013e66:	b913      	cbnz	r3, 8013e6e <__sfp+0x12>
 8013e68:	4630      	mov	r0, r6
 8013e6a:	f7ff ffc7 	bl	8013dfc <__sinit>
 8013e6e:	3648      	adds	r6, #72	; 0x48
 8013e70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013e74:	3b01      	subs	r3, #1
 8013e76:	d503      	bpl.n	8013e80 <__sfp+0x24>
 8013e78:	6833      	ldr	r3, [r6, #0]
 8013e7a:	b133      	cbz	r3, 8013e8a <__sfp+0x2e>
 8013e7c:	6836      	ldr	r6, [r6, #0]
 8013e7e:	e7f7      	b.n	8013e70 <__sfp+0x14>
 8013e80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013e84:	b16d      	cbz	r5, 8013ea2 <__sfp+0x46>
 8013e86:	3468      	adds	r4, #104	; 0x68
 8013e88:	e7f4      	b.n	8013e74 <__sfp+0x18>
 8013e8a:	2104      	movs	r1, #4
 8013e8c:	4638      	mov	r0, r7
 8013e8e:	f7ff ff9f 	bl	8013dd0 <__sfmoreglue>
 8013e92:	6030      	str	r0, [r6, #0]
 8013e94:	2800      	cmp	r0, #0
 8013e96:	d1f1      	bne.n	8013e7c <__sfp+0x20>
 8013e98:	230c      	movs	r3, #12
 8013e9a:	603b      	str	r3, [r7, #0]
 8013e9c:	4604      	mov	r4, r0
 8013e9e:	4620      	mov	r0, r4
 8013ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ea2:	4b0b      	ldr	r3, [pc, #44]	; (8013ed0 <__sfp+0x74>)
 8013ea4:	6665      	str	r5, [r4, #100]	; 0x64
 8013ea6:	e9c4 5500 	strd	r5, r5, [r4]
 8013eaa:	60a5      	str	r5, [r4, #8]
 8013eac:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013eb0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013eb4:	2208      	movs	r2, #8
 8013eb6:	4629      	mov	r1, r5
 8013eb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013ebc:	f000 f8d7 	bl	801406e <memset>
 8013ec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013ec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013ec8:	e7e9      	b.n	8013e9e <__sfp+0x42>
 8013eca:	bf00      	nop
 8013ecc:	08019484 	.word	0x08019484
 8013ed0:	ffff0001 	.word	0xffff0001

08013ed4 <_fwalk>:
 8013ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed8:	4688      	mov	r8, r1
 8013eda:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013ede:	2600      	movs	r6, #0
 8013ee0:	b914      	cbnz	r4, 8013ee8 <_fwalk+0x14>
 8013ee2:	4630      	mov	r0, r6
 8013ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ee8:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013eec:	3f01      	subs	r7, #1
 8013eee:	d501      	bpl.n	8013ef4 <_fwalk+0x20>
 8013ef0:	6824      	ldr	r4, [r4, #0]
 8013ef2:	e7f5      	b.n	8013ee0 <_fwalk+0xc>
 8013ef4:	89ab      	ldrh	r3, [r5, #12]
 8013ef6:	2b01      	cmp	r3, #1
 8013ef8:	d906      	bls.n	8013f08 <_fwalk+0x34>
 8013efa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013efe:	3301      	adds	r3, #1
 8013f00:	d002      	beq.n	8013f08 <_fwalk+0x34>
 8013f02:	4628      	mov	r0, r5
 8013f04:	47c0      	blx	r8
 8013f06:	4306      	orrs	r6, r0
 8013f08:	3568      	adds	r5, #104	; 0x68
 8013f0a:	e7ef      	b.n	8013eec <_fwalk+0x18>

08013f0c <_fwalk_reent>:
 8013f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f10:	4680      	mov	r8, r0
 8013f12:	4689      	mov	r9, r1
 8013f14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013f18:	2600      	movs	r6, #0
 8013f1a:	b914      	cbnz	r4, 8013f22 <_fwalk_reent+0x16>
 8013f1c:	4630      	mov	r0, r6
 8013f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f22:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013f26:	3f01      	subs	r7, #1
 8013f28:	d501      	bpl.n	8013f2e <_fwalk_reent+0x22>
 8013f2a:	6824      	ldr	r4, [r4, #0]
 8013f2c:	e7f5      	b.n	8013f1a <_fwalk_reent+0xe>
 8013f2e:	89ab      	ldrh	r3, [r5, #12]
 8013f30:	2b01      	cmp	r3, #1
 8013f32:	d907      	bls.n	8013f44 <_fwalk_reent+0x38>
 8013f34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013f38:	3301      	adds	r3, #1
 8013f3a:	d003      	beq.n	8013f44 <_fwalk_reent+0x38>
 8013f3c:	4629      	mov	r1, r5
 8013f3e:	4640      	mov	r0, r8
 8013f40:	47c8      	blx	r9
 8013f42:	4306      	orrs	r6, r0
 8013f44:	3568      	adds	r5, #104	; 0x68
 8013f46:	e7ee      	b.n	8013f26 <_fwalk_reent+0x1a>

08013f48 <__libc_init_array>:
 8013f48:	b570      	push	{r4, r5, r6, lr}
 8013f4a:	4e0d      	ldr	r6, [pc, #52]	; (8013f80 <__libc_init_array+0x38>)
 8013f4c:	4c0d      	ldr	r4, [pc, #52]	; (8013f84 <__libc_init_array+0x3c>)
 8013f4e:	1ba4      	subs	r4, r4, r6
 8013f50:	10a4      	asrs	r4, r4, #2
 8013f52:	2500      	movs	r5, #0
 8013f54:	42a5      	cmp	r5, r4
 8013f56:	d109      	bne.n	8013f6c <__libc_init_array+0x24>
 8013f58:	4e0b      	ldr	r6, [pc, #44]	; (8013f88 <__libc_init_array+0x40>)
 8013f5a:	4c0c      	ldr	r4, [pc, #48]	; (8013f8c <__libc_init_array+0x44>)
 8013f5c:	f005 f836 	bl	8018fcc <_init>
 8013f60:	1ba4      	subs	r4, r4, r6
 8013f62:	10a4      	asrs	r4, r4, #2
 8013f64:	2500      	movs	r5, #0
 8013f66:	42a5      	cmp	r5, r4
 8013f68:	d105      	bne.n	8013f76 <__libc_init_array+0x2e>
 8013f6a:	bd70      	pop	{r4, r5, r6, pc}
 8013f6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013f70:	4798      	blx	r3
 8013f72:	3501      	adds	r5, #1
 8013f74:	e7ee      	b.n	8013f54 <__libc_init_array+0xc>
 8013f76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013f7a:	4798      	blx	r3
 8013f7c:	3501      	adds	r5, #1
 8013f7e:	e7f2      	b.n	8013f66 <__libc_init_array+0x1e>
 8013f80:	08019760 	.word	0x08019760
 8013f84:	08019760 	.word	0x08019760
 8013f88:	08019760 	.word	0x08019760
 8013f8c:	08019764 	.word	0x08019764

08013f90 <__swhatbuf_r>:
 8013f90:	b570      	push	{r4, r5, r6, lr}
 8013f92:	460e      	mov	r6, r1
 8013f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f98:	2900      	cmp	r1, #0
 8013f9a:	b096      	sub	sp, #88	; 0x58
 8013f9c:	4614      	mov	r4, r2
 8013f9e:	461d      	mov	r5, r3
 8013fa0:	da07      	bge.n	8013fb2 <__swhatbuf_r+0x22>
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	602b      	str	r3, [r5, #0]
 8013fa6:	89b3      	ldrh	r3, [r6, #12]
 8013fa8:	061a      	lsls	r2, r3, #24
 8013faa:	d410      	bmi.n	8013fce <__swhatbuf_r+0x3e>
 8013fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013fb0:	e00e      	b.n	8013fd0 <__swhatbuf_r+0x40>
 8013fb2:	466a      	mov	r2, sp
 8013fb4:	f003 fe64 	bl	8017c80 <_fstat_r>
 8013fb8:	2800      	cmp	r0, #0
 8013fba:	dbf2      	blt.n	8013fa2 <__swhatbuf_r+0x12>
 8013fbc:	9a01      	ldr	r2, [sp, #4]
 8013fbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013fc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013fc6:	425a      	negs	r2, r3
 8013fc8:	415a      	adcs	r2, r3
 8013fca:	602a      	str	r2, [r5, #0]
 8013fcc:	e7ee      	b.n	8013fac <__swhatbuf_r+0x1c>
 8013fce:	2340      	movs	r3, #64	; 0x40
 8013fd0:	2000      	movs	r0, #0
 8013fd2:	6023      	str	r3, [r4, #0]
 8013fd4:	b016      	add	sp, #88	; 0x58
 8013fd6:	bd70      	pop	{r4, r5, r6, pc}

08013fd8 <__smakebuf_r>:
 8013fd8:	898b      	ldrh	r3, [r1, #12]
 8013fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013fdc:	079d      	lsls	r5, r3, #30
 8013fde:	4606      	mov	r6, r0
 8013fe0:	460c      	mov	r4, r1
 8013fe2:	d507      	bpl.n	8013ff4 <__smakebuf_r+0x1c>
 8013fe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013fe8:	6023      	str	r3, [r4, #0]
 8013fea:	6123      	str	r3, [r4, #16]
 8013fec:	2301      	movs	r3, #1
 8013fee:	6163      	str	r3, [r4, #20]
 8013ff0:	b002      	add	sp, #8
 8013ff2:	bd70      	pop	{r4, r5, r6, pc}
 8013ff4:	ab01      	add	r3, sp, #4
 8013ff6:	466a      	mov	r2, sp
 8013ff8:	f7ff ffca 	bl	8013f90 <__swhatbuf_r>
 8013ffc:	9900      	ldr	r1, [sp, #0]
 8013ffe:	4605      	mov	r5, r0
 8014000:	4630      	mov	r0, r6
 8014002:	f000 f88b 	bl	801411c <_malloc_r>
 8014006:	b948      	cbnz	r0, 801401c <__smakebuf_r+0x44>
 8014008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801400c:	059a      	lsls	r2, r3, #22
 801400e:	d4ef      	bmi.n	8013ff0 <__smakebuf_r+0x18>
 8014010:	f023 0303 	bic.w	r3, r3, #3
 8014014:	f043 0302 	orr.w	r3, r3, #2
 8014018:	81a3      	strh	r3, [r4, #12]
 801401a:	e7e3      	b.n	8013fe4 <__smakebuf_r+0xc>
 801401c:	4b0d      	ldr	r3, [pc, #52]	; (8014054 <__smakebuf_r+0x7c>)
 801401e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014020:	89a3      	ldrh	r3, [r4, #12]
 8014022:	6020      	str	r0, [r4, #0]
 8014024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014028:	81a3      	strh	r3, [r4, #12]
 801402a:	9b00      	ldr	r3, [sp, #0]
 801402c:	6163      	str	r3, [r4, #20]
 801402e:	9b01      	ldr	r3, [sp, #4]
 8014030:	6120      	str	r0, [r4, #16]
 8014032:	b15b      	cbz	r3, 801404c <__smakebuf_r+0x74>
 8014034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014038:	4630      	mov	r0, r6
 801403a:	f004 f959 	bl	80182f0 <_isatty_r>
 801403e:	b128      	cbz	r0, 801404c <__smakebuf_r+0x74>
 8014040:	89a3      	ldrh	r3, [r4, #12]
 8014042:	f023 0303 	bic.w	r3, r3, #3
 8014046:	f043 0301 	orr.w	r3, r3, #1
 801404a:	81a3      	strh	r3, [r4, #12]
 801404c:	89a3      	ldrh	r3, [r4, #12]
 801404e:	431d      	orrs	r5, r3
 8014050:	81a5      	strh	r5, [r4, #12]
 8014052:	e7cd      	b.n	8013ff0 <__smakebuf_r+0x18>
 8014054:	08013dc5 	.word	0x08013dc5

08014058 <memcpy>:
 8014058:	b510      	push	{r4, lr}
 801405a:	1e43      	subs	r3, r0, #1
 801405c:	440a      	add	r2, r1
 801405e:	4291      	cmp	r1, r2
 8014060:	d100      	bne.n	8014064 <memcpy+0xc>
 8014062:	bd10      	pop	{r4, pc}
 8014064:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014068:	f803 4f01 	strb.w	r4, [r3, #1]!
 801406c:	e7f7      	b.n	801405e <memcpy+0x6>

0801406e <memset>:
 801406e:	4402      	add	r2, r0
 8014070:	4603      	mov	r3, r0
 8014072:	4293      	cmp	r3, r2
 8014074:	d100      	bne.n	8014078 <memset+0xa>
 8014076:	4770      	bx	lr
 8014078:	f803 1b01 	strb.w	r1, [r3], #1
 801407c:	e7f9      	b.n	8014072 <memset+0x4>
	...

08014080 <_free_r>:
 8014080:	b538      	push	{r3, r4, r5, lr}
 8014082:	4605      	mov	r5, r0
 8014084:	2900      	cmp	r1, #0
 8014086:	d045      	beq.n	8014114 <_free_r+0x94>
 8014088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801408c:	1f0c      	subs	r4, r1, #4
 801408e:	2b00      	cmp	r3, #0
 8014090:	bfb8      	it	lt
 8014092:	18e4      	addlt	r4, r4, r3
 8014094:	f004 f9a3 	bl	80183de <__malloc_lock>
 8014098:	4a1f      	ldr	r2, [pc, #124]	; (8014118 <_free_r+0x98>)
 801409a:	6813      	ldr	r3, [r2, #0]
 801409c:	4610      	mov	r0, r2
 801409e:	b933      	cbnz	r3, 80140ae <_free_r+0x2e>
 80140a0:	6063      	str	r3, [r4, #4]
 80140a2:	6014      	str	r4, [r2, #0]
 80140a4:	4628      	mov	r0, r5
 80140a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140aa:	f004 b999 	b.w	80183e0 <__malloc_unlock>
 80140ae:	42a3      	cmp	r3, r4
 80140b0:	d90c      	bls.n	80140cc <_free_r+0x4c>
 80140b2:	6821      	ldr	r1, [r4, #0]
 80140b4:	1862      	adds	r2, r4, r1
 80140b6:	4293      	cmp	r3, r2
 80140b8:	bf04      	itt	eq
 80140ba:	681a      	ldreq	r2, [r3, #0]
 80140bc:	685b      	ldreq	r3, [r3, #4]
 80140be:	6063      	str	r3, [r4, #4]
 80140c0:	bf04      	itt	eq
 80140c2:	1852      	addeq	r2, r2, r1
 80140c4:	6022      	streq	r2, [r4, #0]
 80140c6:	6004      	str	r4, [r0, #0]
 80140c8:	e7ec      	b.n	80140a4 <_free_r+0x24>
 80140ca:	4613      	mov	r3, r2
 80140cc:	685a      	ldr	r2, [r3, #4]
 80140ce:	b10a      	cbz	r2, 80140d4 <_free_r+0x54>
 80140d0:	42a2      	cmp	r2, r4
 80140d2:	d9fa      	bls.n	80140ca <_free_r+0x4a>
 80140d4:	6819      	ldr	r1, [r3, #0]
 80140d6:	1858      	adds	r0, r3, r1
 80140d8:	42a0      	cmp	r0, r4
 80140da:	d10b      	bne.n	80140f4 <_free_r+0x74>
 80140dc:	6820      	ldr	r0, [r4, #0]
 80140de:	4401      	add	r1, r0
 80140e0:	1858      	adds	r0, r3, r1
 80140e2:	4282      	cmp	r2, r0
 80140e4:	6019      	str	r1, [r3, #0]
 80140e6:	d1dd      	bne.n	80140a4 <_free_r+0x24>
 80140e8:	6810      	ldr	r0, [r2, #0]
 80140ea:	6852      	ldr	r2, [r2, #4]
 80140ec:	605a      	str	r2, [r3, #4]
 80140ee:	4401      	add	r1, r0
 80140f0:	6019      	str	r1, [r3, #0]
 80140f2:	e7d7      	b.n	80140a4 <_free_r+0x24>
 80140f4:	d902      	bls.n	80140fc <_free_r+0x7c>
 80140f6:	230c      	movs	r3, #12
 80140f8:	602b      	str	r3, [r5, #0]
 80140fa:	e7d3      	b.n	80140a4 <_free_r+0x24>
 80140fc:	6820      	ldr	r0, [r4, #0]
 80140fe:	1821      	adds	r1, r4, r0
 8014100:	428a      	cmp	r2, r1
 8014102:	bf04      	itt	eq
 8014104:	6811      	ldreq	r1, [r2, #0]
 8014106:	6852      	ldreq	r2, [r2, #4]
 8014108:	6062      	str	r2, [r4, #4]
 801410a:	bf04      	itt	eq
 801410c:	1809      	addeq	r1, r1, r0
 801410e:	6021      	streq	r1, [r4, #0]
 8014110:	605c      	str	r4, [r3, #4]
 8014112:	e7c7      	b.n	80140a4 <_free_r+0x24>
 8014114:	bd38      	pop	{r3, r4, r5, pc}
 8014116:	bf00      	nop
 8014118:	200081f4 	.word	0x200081f4

0801411c <_malloc_r>:
 801411c:	b570      	push	{r4, r5, r6, lr}
 801411e:	1ccd      	adds	r5, r1, #3
 8014120:	f025 0503 	bic.w	r5, r5, #3
 8014124:	3508      	adds	r5, #8
 8014126:	2d0c      	cmp	r5, #12
 8014128:	bf38      	it	cc
 801412a:	250c      	movcc	r5, #12
 801412c:	2d00      	cmp	r5, #0
 801412e:	4606      	mov	r6, r0
 8014130:	db01      	blt.n	8014136 <_malloc_r+0x1a>
 8014132:	42a9      	cmp	r1, r5
 8014134:	d903      	bls.n	801413e <_malloc_r+0x22>
 8014136:	230c      	movs	r3, #12
 8014138:	6033      	str	r3, [r6, #0]
 801413a:	2000      	movs	r0, #0
 801413c:	bd70      	pop	{r4, r5, r6, pc}
 801413e:	f004 f94e 	bl	80183de <__malloc_lock>
 8014142:	4a21      	ldr	r2, [pc, #132]	; (80141c8 <_malloc_r+0xac>)
 8014144:	6814      	ldr	r4, [r2, #0]
 8014146:	4621      	mov	r1, r4
 8014148:	b991      	cbnz	r1, 8014170 <_malloc_r+0x54>
 801414a:	4c20      	ldr	r4, [pc, #128]	; (80141cc <_malloc_r+0xb0>)
 801414c:	6823      	ldr	r3, [r4, #0]
 801414e:	b91b      	cbnz	r3, 8014158 <_malloc_r+0x3c>
 8014150:	4630      	mov	r0, r6
 8014152:	f001 fd0f 	bl	8015b74 <_sbrk_r>
 8014156:	6020      	str	r0, [r4, #0]
 8014158:	4629      	mov	r1, r5
 801415a:	4630      	mov	r0, r6
 801415c:	f001 fd0a 	bl	8015b74 <_sbrk_r>
 8014160:	1c43      	adds	r3, r0, #1
 8014162:	d124      	bne.n	80141ae <_malloc_r+0x92>
 8014164:	230c      	movs	r3, #12
 8014166:	6033      	str	r3, [r6, #0]
 8014168:	4630      	mov	r0, r6
 801416a:	f004 f939 	bl	80183e0 <__malloc_unlock>
 801416e:	e7e4      	b.n	801413a <_malloc_r+0x1e>
 8014170:	680b      	ldr	r3, [r1, #0]
 8014172:	1b5b      	subs	r3, r3, r5
 8014174:	d418      	bmi.n	80141a8 <_malloc_r+0x8c>
 8014176:	2b0b      	cmp	r3, #11
 8014178:	d90f      	bls.n	801419a <_malloc_r+0x7e>
 801417a:	600b      	str	r3, [r1, #0]
 801417c:	50cd      	str	r5, [r1, r3]
 801417e:	18cc      	adds	r4, r1, r3
 8014180:	4630      	mov	r0, r6
 8014182:	f004 f92d 	bl	80183e0 <__malloc_unlock>
 8014186:	f104 000b 	add.w	r0, r4, #11
 801418a:	1d23      	adds	r3, r4, #4
 801418c:	f020 0007 	bic.w	r0, r0, #7
 8014190:	1ac3      	subs	r3, r0, r3
 8014192:	d0d3      	beq.n	801413c <_malloc_r+0x20>
 8014194:	425a      	negs	r2, r3
 8014196:	50e2      	str	r2, [r4, r3]
 8014198:	e7d0      	b.n	801413c <_malloc_r+0x20>
 801419a:	428c      	cmp	r4, r1
 801419c:	684b      	ldr	r3, [r1, #4]
 801419e:	bf16      	itet	ne
 80141a0:	6063      	strne	r3, [r4, #4]
 80141a2:	6013      	streq	r3, [r2, #0]
 80141a4:	460c      	movne	r4, r1
 80141a6:	e7eb      	b.n	8014180 <_malloc_r+0x64>
 80141a8:	460c      	mov	r4, r1
 80141aa:	6849      	ldr	r1, [r1, #4]
 80141ac:	e7cc      	b.n	8014148 <_malloc_r+0x2c>
 80141ae:	1cc4      	adds	r4, r0, #3
 80141b0:	f024 0403 	bic.w	r4, r4, #3
 80141b4:	42a0      	cmp	r0, r4
 80141b6:	d005      	beq.n	80141c4 <_malloc_r+0xa8>
 80141b8:	1a21      	subs	r1, r4, r0
 80141ba:	4630      	mov	r0, r6
 80141bc:	f001 fcda 	bl	8015b74 <_sbrk_r>
 80141c0:	3001      	adds	r0, #1
 80141c2:	d0cf      	beq.n	8014164 <_malloc_r+0x48>
 80141c4:	6025      	str	r5, [r4, #0]
 80141c6:	e7db      	b.n	8014180 <_malloc_r+0x64>
 80141c8:	200081f4 	.word	0x200081f4
 80141cc:	200081f8 	.word	0x200081f8

080141d0 <__sfputc_r>:
 80141d0:	6893      	ldr	r3, [r2, #8]
 80141d2:	3b01      	subs	r3, #1
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	b410      	push	{r4}
 80141d8:	6093      	str	r3, [r2, #8]
 80141da:	da08      	bge.n	80141ee <__sfputc_r+0x1e>
 80141dc:	6994      	ldr	r4, [r2, #24]
 80141de:	42a3      	cmp	r3, r4
 80141e0:	db01      	blt.n	80141e6 <__sfputc_r+0x16>
 80141e2:	290a      	cmp	r1, #10
 80141e4:	d103      	bne.n	80141ee <__sfputc_r+0x1e>
 80141e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141ea:	f002 be23 	b.w	8016e34 <__swbuf_r>
 80141ee:	6813      	ldr	r3, [r2, #0]
 80141f0:	1c58      	adds	r0, r3, #1
 80141f2:	6010      	str	r0, [r2, #0]
 80141f4:	7019      	strb	r1, [r3, #0]
 80141f6:	4608      	mov	r0, r1
 80141f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141fc:	4770      	bx	lr

080141fe <__sfputs_r>:
 80141fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014200:	4606      	mov	r6, r0
 8014202:	460f      	mov	r7, r1
 8014204:	4614      	mov	r4, r2
 8014206:	18d5      	adds	r5, r2, r3
 8014208:	42ac      	cmp	r4, r5
 801420a:	d101      	bne.n	8014210 <__sfputs_r+0x12>
 801420c:	2000      	movs	r0, #0
 801420e:	e007      	b.n	8014220 <__sfputs_r+0x22>
 8014210:	463a      	mov	r2, r7
 8014212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014216:	4630      	mov	r0, r6
 8014218:	f7ff ffda 	bl	80141d0 <__sfputc_r>
 801421c:	1c43      	adds	r3, r0, #1
 801421e:	d1f3      	bne.n	8014208 <__sfputs_r+0xa>
 8014220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014224 <_vfiprintf_r>:
 8014224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014228:	460c      	mov	r4, r1
 801422a:	b09d      	sub	sp, #116	; 0x74
 801422c:	4617      	mov	r7, r2
 801422e:	461d      	mov	r5, r3
 8014230:	4606      	mov	r6, r0
 8014232:	b118      	cbz	r0, 801423c <_vfiprintf_r+0x18>
 8014234:	6983      	ldr	r3, [r0, #24]
 8014236:	b90b      	cbnz	r3, 801423c <_vfiprintf_r+0x18>
 8014238:	f7ff fde0 	bl	8013dfc <__sinit>
 801423c:	4b7c      	ldr	r3, [pc, #496]	; (8014430 <_vfiprintf_r+0x20c>)
 801423e:	429c      	cmp	r4, r3
 8014240:	d158      	bne.n	80142f4 <_vfiprintf_r+0xd0>
 8014242:	6874      	ldr	r4, [r6, #4]
 8014244:	89a3      	ldrh	r3, [r4, #12]
 8014246:	0718      	lsls	r0, r3, #28
 8014248:	d55e      	bpl.n	8014308 <_vfiprintf_r+0xe4>
 801424a:	6923      	ldr	r3, [r4, #16]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d05b      	beq.n	8014308 <_vfiprintf_r+0xe4>
 8014250:	2300      	movs	r3, #0
 8014252:	9309      	str	r3, [sp, #36]	; 0x24
 8014254:	2320      	movs	r3, #32
 8014256:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801425a:	2330      	movs	r3, #48	; 0x30
 801425c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014260:	9503      	str	r5, [sp, #12]
 8014262:	f04f 0b01 	mov.w	fp, #1
 8014266:	46b8      	mov	r8, r7
 8014268:	4645      	mov	r5, r8
 801426a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801426e:	b10b      	cbz	r3, 8014274 <_vfiprintf_r+0x50>
 8014270:	2b25      	cmp	r3, #37	; 0x25
 8014272:	d154      	bne.n	801431e <_vfiprintf_r+0xfa>
 8014274:	ebb8 0a07 	subs.w	sl, r8, r7
 8014278:	d00b      	beq.n	8014292 <_vfiprintf_r+0x6e>
 801427a:	4653      	mov	r3, sl
 801427c:	463a      	mov	r2, r7
 801427e:	4621      	mov	r1, r4
 8014280:	4630      	mov	r0, r6
 8014282:	f7ff ffbc 	bl	80141fe <__sfputs_r>
 8014286:	3001      	adds	r0, #1
 8014288:	f000 80c2 	beq.w	8014410 <_vfiprintf_r+0x1ec>
 801428c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801428e:	4453      	add	r3, sl
 8014290:	9309      	str	r3, [sp, #36]	; 0x24
 8014292:	f898 3000 	ldrb.w	r3, [r8]
 8014296:	2b00      	cmp	r3, #0
 8014298:	f000 80ba 	beq.w	8014410 <_vfiprintf_r+0x1ec>
 801429c:	2300      	movs	r3, #0
 801429e:	f04f 32ff 	mov.w	r2, #4294967295
 80142a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142a6:	9304      	str	r3, [sp, #16]
 80142a8:	9307      	str	r3, [sp, #28]
 80142aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80142ae:	931a      	str	r3, [sp, #104]	; 0x68
 80142b0:	46a8      	mov	r8, r5
 80142b2:	2205      	movs	r2, #5
 80142b4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80142b8:	485e      	ldr	r0, [pc, #376]	; (8014434 <_vfiprintf_r+0x210>)
 80142ba:	f7f3 fec9 	bl	8008050 <memchr>
 80142be:	9b04      	ldr	r3, [sp, #16]
 80142c0:	bb78      	cbnz	r0, 8014322 <_vfiprintf_r+0xfe>
 80142c2:	06d9      	lsls	r1, r3, #27
 80142c4:	bf44      	itt	mi
 80142c6:	2220      	movmi	r2, #32
 80142c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80142cc:	071a      	lsls	r2, r3, #28
 80142ce:	bf44      	itt	mi
 80142d0:	222b      	movmi	r2, #43	; 0x2b
 80142d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80142d6:	782a      	ldrb	r2, [r5, #0]
 80142d8:	2a2a      	cmp	r2, #42	; 0x2a
 80142da:	d02a      	beq.n	8014332 <_vfiprintf_r+0x10e>
 80142dc:	9a07      	ldr	r2, [sp, #28]
 80142de:	46a8      	mov	r8, r5
 80142e0:	2000      	movs	r0, #0
 80142e2:	250a      	movs	r5, #10
 80142e4:	4641      	mov	r1, r8
 80142e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142ea:	3b30      	subs	r3, #48	; 0x30
 80142ec:	2b09      	cmp	r3, #9
 80142ee:	d969      	bls.n	80143c4 <_vfiprintf_r+0x1a0>
 80142f0:	b360      	cbz	r0, 801434c <_vfiprintf_r+0x128>
 80142f2:	e024      	b.n	801433e <_vfiprintf_r+0x11a>
 80142f4:	4b50      	ldr	r3, [pc, #320]	; (8014438 <_vfiprintf_r+0x214>)
 80142f6:	429c      	cmp	r4, r3
 80142f8:	d101      	bne.n	80142fe <_vfiprintf_r+0xda>
 80142fa:	68b4      	ldr	r4, [r6, #8]
 80142fc:	e7a2      	b.n	8014244 <_vfiprintf_r+0x20>
 80142fe:	4b4f      	ldr	r3, [pc, #316]	; (801443c <_vfiprintf_r+0x218>)
 8014300:	429c      	cmp	r4, r3
 8014302:	bf08      	it	eq
 8014304:	68f4      	ldreq	r4, [r6, #12]
 8014306:	e79d      	b.n	8014244 <_vfiprintf_r+0x20>
 8014308:	4621      	mov	r1, r4
 801430a:	4630      	mov	r0, r6
 801430c:	f002 fdf6 	bl	8016efc <__swsetup_r>
 8014310:	2800      	cmp	r0, #0
 8014312:	d09d      	beq.n	8014250 <_vfiprintf_r+0x2c>
 8014314:	f04f 30ff 	mov.w	r0, #4294967295
 8014318:	b01d      	add	sp, #116	; 0x74
 801431a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801431e:	46a8      	mov	r8, r5
 8014320:	e7a2      	b.n	8014268 <_vfiprintf_r+0x44>
 8014322:	4a44      	ldr	r2, [pc, #272]	; (8014434 <_vfiprintf_r+0x210>)
 8014324:	1a80      	subs	r0, r0, r2
 8014326:	fa0b f000 	lsl.w	r0, fp, r0
 801432a:	4318      	orrs	r0, r3
 801432c:	9004      	str	r0, [sp, #16]
 801432e:	4645      	mov	r5, r8
 8014330:	e7be      	b.n	80142b0 <_vfiprintf_r+0x8c>
 8014332:	9a03      	ldr	r2, [sp, #12]
 8014334:	1d11      	adds	r1, r2, #4
 8014336:	6812      	ldr	r2, [r2, #0]
 8014338:	9103      	str	r1, [sp, #12]
 801433a:	2a00      	cmp	r2, #0
 801433c:	db01      	blt.n	8014342 <_vfiprintf_r+0x11e>
 801433e:	9207      	str	r2, [sp, #28]
 8014340:	e004      	b.n	801434c <_vfiprintf_r+0x128>
 8014342:	4252      	negs	r2, r2
 8014344:	f043 0302 	orr.w	r3, r3, #2
 8014348:	9207      	str	r2, [sp, #28]
 801434a:	9304      	str	r3, [sp, #16]
 801434c:	f898 3000 	ldrb.w	r3, [r8]
 8014350:	2b2e      	cmp	r3, #46	; 0x2e
 8014352:	d10e      	bne.n	8014372 <_vfiprintf_r+0x14e>
 8014354:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014358:	2b2a      	cmp	r3, #42	; 0x2a
 801435a:	d138      	bne.n	80143ce <_vfiprintf_r+0x1aa>
 801435c:	9b03      	ldr	r3, [sp, #12]
 801435e:	1d1a      	adds	r2, r3, #4
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	9203      	str	r2, [sp, #12]
 8014364:	2b00      	cmp	r3, #0
 8014366:	bfb8      	it	lt
 8014368:	f04f 33ff 	movlt.w	r3, #4294967295
 801436c:	f108 0802 	add.w	r8, r8, #2
 8014370:	9305      	str	r3, [sp, #20]
 8014372:	4d33      	ldr	r5, [pc, #204]	; (8014440 <_vfiprintf_r+0x21c>)
 8014374:	f898 1000 	ldrb.w	r1, [r8]
 8014378:	2203      	movs	r2, #3
 801437a:	4628      	mov	r0, r5
 801437c:	f7f3 fe68 	bl	8008050 <memchr>
 8014380:	b140      	cbz	r0, 8014394 <_vfiprintf_r+0x170>
 8014382:	2340      	movs	r3, #64	; 0x40
 8014384:	1b40      	subs	r0, r0, r5
 8014386:	fa03 f000 	lsl.w	r0, r3, r0
 801438a:	9b04      	ldr	r3, [sp, #16]
 801438c:	4303      	orrs	r3, r0
 801438e:	f108 0801 	add.w	r8, r8, #1
 8014392:	9304      	str	r3, [sp, #16]
 8014394:	f898 1000 	ldrb.w	r1, [r8]
 8014398:	482a      	ldr	r0, [pc, #168]	; (8014444 <_vfiprintf_r+0x220>)
 801439a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801439e:	2206      	movs	r2, #6
 80143a0:	f108 0701 	add.w	r7, r8, #1
 80143a4:	f7f3 fe54 	bl	8008050 <memchr>
 80143a8:	2800      	cmp	r0, #0
 80143aa:	d037      	beq.n	801441c <_vfiprintf_r+0x1f8>
 80143ac:	4b26      	ldr	r3, [pc, #152]	; (8014448 <_vfiprintf_r+0x224>)
 80143ae:	bb1b      	cbnz	r3, 80143f8 <_vfiprintf_r+0x1d4>
 80143b0:	9b03      	ldr	r3, [sp, #12]
 80143b2:	3307      	adds	r3, #7
 80143b4:	f023 0307 	bic.w	r3, r3, #7
 80143b8:	3308      	adds	r3, #8
 80143ba:	9303      	str	r3, [sp, #12]
 80143bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143be:	444b      	add	r3, r9
 80143c0:	9309      	str	r3, [sp, #36]	; 0x24
 80143c2:	e750      	b.n	8014266 <_vfiprintf_r+0x42>
 80143c4:	fb05 3202 	mla	r2, r5, r2, r3
 80143c8:	2001      	movs	r0, #1
 80143ca:	4688      	mov	r8, r1
 80143cc:	e78a      	b.n	80142e4 <_vfiprintf_r+0xc0>
 80143ce:	2300      	movs	r3, #0
 80143d0:	f108 0801 	add.w	r8, r8, #1
 80143d4:	9305      	str	r3, [sp, #20]
 80143d6:	4619      	mov	r1, r3
 80143d8:	250a      	movs	r5, #10
 80143da:	4640      	mov	r0, r8
 80143dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143e0:	3a30      	subs	r2, #48	; 0x30
 80143e2:	2a09      	cmp	r2, #9
 80143e4:	d903      	bls.n	80143ee <_vfiprintf_r+0x1ca>
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d0c3      	beq.n	8014372 <_vfiprintf_r+0x14e>
 80143ea:	9105      	str	r1, [sp, #20]
 80143ec:	e7c1      	b.n	8014372 <_vfiprintf_r+0x14e>
 80143ee:	fb05 2101 	mla	r1, r5, r1, r2
 80143f2:	2301      	movs	r3, #1
 80143f4:	4680      	mov	r8, r0
 80143f6:	e7f0      	b.n	80143da <_vfiprintf_r+0x1b6>
 80143f8:	ab03      	add	r3, sp, #12
 80143fa:	9300      	str	r3, [sp, #0]
 80143fc:	4622      	mov	r2, r4
 80143fe:	4b13      	ldr	r3, [pc, #76]	; (801444c <_vfiprintf_r+0x228>)
 8014400:	a904      	add	r1, sp, #16
 8014402:	4630      	mov	r0, r6
 8014404:	f000 f8b8 	bl	8014578 <_printf_float>
 8014408:	f1b0 3fff 	cmp.w	r0, #4294967295
 801440c:	4681      	mov	r9, r0
 801440e:	d1d5      	bne.n	80143bc <_vfiprintf_r+0x198>
 8014410:	89a3      	ldrh	r3, [r4, #12]
 8014412:	065b      	lsls	r3, r3, #25
 8014414:	f53f af7e 	bmi.w	8014314 <_vfiprintf_r+0xf0>
 8014418:	9809      	ldr	r0, [sp, #36]	; 0x24
 801441a:	e77d      	b.n	8014318 <_vfiprintf_r+0xf4>
 801441c:	ab03      	add	r3, sp, #12
 801441e:	9300      	str	r3, [sp, #0]
 8014420:	4622      	mov	r2, r4
 8014422:	4b0a      	ldr	r3, [pc, #40]	; (801444c <_vfiprintf_r+0x228>)
 8014424:	a904      	add	r1, sp, #16
 8014426:	4630      	mov	r0, r6
 8014428:	f000 fb5c 	bl	8014ae4 <_printf_i>
 801442c:	e7ec      	b.n	8014408 <_vfiprintf_r+0x1e4>
 801442e:	bf00      	nop
 8014430:	08019444 	.word	0x08019444
 8014434:	08019488 	.word	0x08019488
 8014438:	08019464 	.word	0x08019464
 801443c:	08019424 	.word	0x08019424
 8014440:	0801948e 	.word	0x0801948e
 8014444:	08019492 	.word	0x08019492
 8014448:	08014579 	.word	0x08014579
 801444c:	080141ff 	.word	0x080141ff

08014450 <__cvt>:
 8014450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014454:	ec55 4b10 	vmov	r4, r5, d0
 8014458:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801445a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801445e:	2d00      	cmp	r5, #0
 8014460:	460e      	mov	r6, r1
 8014462:	4691      	mov	r9, r2
 8014464:	4619      	mov	r1, r3
 8014466:	bfb8      	it	lt
 8014468:	4622      	movlt	r2, r4
 801446a:	462b      	mov	r3, r5
 801446c:	f027 0720 	bic.w	r7, r7, #32
 8014470:	bfbb      	ittet	lt
 8014472:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014476:	461d      	movlt	r5, r3
 8014478:	2300      	movge	r3, #0
 801447a:	232d      	movlt	r3, #45	; 0x2d
 801447c:	bfb8      	it	lt
 801447e:	4614      	movlt	r4, r2
 8014480:	2f46      	cmp	r7, #70	; 0x46
 8014482:	700b      	strb	r3, [r1, #0]
 8014484:	d004      	beq.n	8014490 <__cvt+0x40>
 8014486:	2f45      	cmp	r7, #69	; 0x45
 8014488:	d100      	bne.n	801448c <__cvt+0x3c>
 801448a:	3601      	adds	r6, #1
 801448c:	2102      	movs	r1, #2
 801448e:	e000      	b.n	8014492 <__cvt+0x42>
 8014490:	2103      	movs	r1, #3
 8014492:	ab03      	add	r3, sp, #12
 8014494:	9301      	str	r3, [sp, #4]
 8014496:	ab02      	add	r3, sp, #8
 8014498:	9300      	str	r3, [sp, #0]
 801449a:	4632      	mov	r2, r6
 801449c:	4653      	mov	r3, sl
 801449e:	ec45 4b10 	vmov	d0, r4, r5
 80144a2:	f002 fe35 	bl	8017110 <_dtoa_r>
 80144a6:	2f47      	cmp	r7, #71	; 0x47
 80144a8:	4680      	mov	r8, r0
 80144aa:	d102      	bne.n	80144b2 <__cvt+0x62>
 80144ac:	f019 0f01 	tst.w	r9, #1
 80144b0:	d026      	beq.n	8014500 <__cvt+0xb0>
 80144b2:	2f46      	cmp	r7, #70	; 0x46
 80144b4:	eb08 0906 	add.w	r9, r8, r6
 80144b8:	d111      	bne.n	80144de <__cvt+0x8e>
 80144ba:	f898 3000 	ldrb.w	r3, [r8]
 80144be:	2b30      	cmp	r3, #48	; 0x30
 80144c0:	d10a      	bne.n	80144d8 <__cvt+0x88>
 80144c2:	2200      	movs	r2, #0
 80144c4:	2300      	movs	r3, #0
 80144c6:	4620      	mov	r0, r4
 80144c8:	4629      	mov	r1, r5
 80144ca:	f7f4 fa35 	bl	8008938 <__aeabi_dcmpeq>
 80144ce:	b918      	cbnz	r0, 80144d8 <__cvt+0x88>
 80144d0:	f1c6 0601 	rsb	r6, r6, #1
 80144d4:	f8ca 6000 	str.w	r6, [sl]
 80144d8:	f8da 3000 	ldr.w	r3, [sl]
 80144dc:	4499      	add	r9, r3
 80144de:	2200      	movs	r2, #0
 80144e0:	2300      	movs	r3, #0
 80144e2:	4620      	mov	r0, r4
 80144e4:	4629      	mov	r1, r5
 80144e6:	f7f4 fa27 	bl	8008938 <__aeabi_dcmpeq>
 80144ea:	b938      	cbnz	r0, 80144fc <__cvt+0xac>
 80144ec:	2230      	movs	r2, #48	; 0x30
 80144ee:	9b03      	ldr	r3, [sp, #12]
 80144f0:	454b      	cmp	r3, r9
 80144f2:	d205      	bcs.n	8014500 <__cvt+0xb0>
 80144f4:	1c59      	adds	r1, r3, #1
 80144f6:	9103      	str	r1, [sp, #12]
 80144f8:	701a      	strb	r2, [r3, #0]
 80144fa:	e7f8      	b.n	80144ee <__cvt+0x9e>
 80144fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8014500:	9b03      	ldr	r3, [sp, #12]
 8014502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014504:	eba3 0308 	sub.w	r3, r3, r8
 8014508:	4640      	mov	r0, r8
 801450a:	6013      	str	r3, [r2, #0]
 801450c:	b004      	add	sp, #16
 801450e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014512 <__exponent>:
 8014512:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014514:	2900      	cmp	r1, #0
 8014516:	4604      	mov	r4, r0
 8014518:	bfba      	itte	lt
 801451a:	4249      	neglt	r1, r1
 801451c:	232d      	movlt	r3, #45	; 0x2d
 801451e:	232b      	movge	r3, #43	; 0x2b
 8014520:	2909      	cmp	r1, #9
 8014522:	f804 2b02 	strb.w	r2, [r4], #2
 8014526:	7043      	strb	r3, [r0, #1]
 8014528:	dd20      	ble.n	801456c <__exponent+0x5a>
 801452a:	f10d 0307 	add.w	r3, sp, #7
 801452e:	461f      	mov	r7, r3
 8014530:	260a      	movs	r6, #10
 8014532:	fb91 f5f6 	sdiv	r5, r1, r6
 8014536:	fb06 1115 	mls	r1, r6, r5, r1
 801453a:	3130      	adds	r1, #48	; 0x30
 801453c:	2d09      	cmp	r5, #9
 801453e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014542:	f103 32ff 	add.w	r2, r3, #4294967295
 8014546:	4629      	mov	r1, r5
 8014548:	dc09      	bgt.n	801455e <__exponent+0x4c>
 801454a:	3130      	adds	r1, #48	; 0x30
 801454c:	3b02      	subs	r3, #2
 801454e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014552:	42bb      	cmp	r3, r7
 8014554:	4622      	mov	r2, r4
 8014556:	d304      	bcc.n	8014562 <__exponent+0x50>
 8014558:	1a10      	subs	r0, r2, r0
 801455a:	b003      	add	sp, #12
 801455c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801455e:	4613      	mov	r3, r2
 8014560:	e7e7      	b.n	8014532 <__exponent+0x20>
 8014562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014566:	f804 2b01 	strb.w	r2, [r4], #1
 801456a:	e7f2      	b.n	8014552 <__exponent+0x40>
 801456c:	2330      	movs	r3, #48	; 0x30
 801456e:	4419      	add	r1, r3
 8014570:	7083      	strb	r3, [r0, #2]
 8014572:	1d02      	adds	r2, r0, #4
 8014574:	70c1      	strb	r1, [r0, #3]
 8014576:	e7ef      	b.n	8014558 <__exponent+0x46>

08014578 <_printf_float>:
 8014578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801457c:	b08d      	sub	sp, #52	; 0x34
 801457e:	460c      	mov	r4, r1
 8014580:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014584:	4616      	mov	r6, r2
 8014586:	461f      	mov	r7, r3
 8014588:	4605      	mov	r5, r0
 801458a:	f003 fed5 	bl	8018338 <_localeconv_r>
 801458e:	6803      	ldr	r3, [r0, #0]
 8014590:	9304      	str	r3, [sp, #16]
 8014592:	4618      	mov	r0, r3
 8014594:	f7f3 fd54 	bl	8008040 <strlen>
 8014598:	2300      	movs	r3, #0
 801459a:	930a      	str	r3, [sp, #40]	; 0x28
 801459c:	f8d8 3000 	ldr.w	r3, [r8]
 80145a0:	9005      	str	r0, [sp, #20]
 80145a2:	3307      	adds	r3, #7
 80145a4:	f023 0307 	bic.w	r3, r3, #7
 80145a8:	f103 0208 	add.w	r2, r3, #8
 80145ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80145b0:	f8d4 b000 	ldr.w	fp, [r4]
 80145b4:	f8c8 2000 	str.w	r2, [r8]
 80145b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80145c0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80145c4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80145c8:	9307      	str	r3, [sp, #28]
 80145ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80145ce:	f04f 32ff 	mov.w	r2, #4294967295
 80145d2:	4ba7      	ldr	r3, [pc, #668]	; (8014870 <_printf_float+0x2f8>)
 80145d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80145d8:	f7f4 f9e0 	bl	800899c <__aeabi_dcmpun>
 80145dc:	bb70      	cbnz	r0, 801463c <_printf_float+0xc4>
 80145de:	f04f 32ff 	mov.w	r2, #4294967295
 80145e2:	4ba3      	ldr	r3, [pc, #652]	; (8014870 <_printf_float+0x2f8>)
 80145e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80145e8:	f7f4 f9ba 	bl	8008960 <__aeabi_dcmple>
 80145ec:	bb30      	cbnz	r0, 801463c <_printf_float+0xc4>
 80145ee:	2200      	movs	r2, #0
 80145f0:	2300      	movs	r3, #0
 80145f2:	4640      	mov	r0, r8
 80145f4:	4649      	mov	r1, r9
 80145f6:	f7f4 f9a9 	bl	800894c <__aeabi_dcmplt>
 80145fa:	b110      	cbz	r0, 8014602 <_printf_float+0x8a>
 80145fc:	232d      	movs	r3, #45	; 0x2d
 80145fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014602:	4a9c      	ldr	r2, [pc, #624]	; (8014874 <_printf_float+0x2fc>)
 8014604:	4b9c      	ldr	r3, [pc, #624]	; (8014878 <_printf_float+0x300>)
 8014606:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801460a:	bf8c      	ite	hi
 801460c:	4690      	movhi	r8, r2
 801460e:	4698      	movls	r8, r3
 8014610:	2303      	movs	r3, #3
 8014612:	f02b 0204 	bic.w	r2, fp, #4
 8014616:	6123      	str	r3, [r4, #16]
 8014618:	6022      	str	r2, [r4, #0]
 801461a:	f04f 0900 	mov.w	r9, #0
 801461e:	9700      	str	r7, [sp, #0]
 8014620:	4633      	mov	r3, r6
 8014622:	aa0b      	add	r2, sp, #44	; 0x2c
 8014624:	4621      	mov	r1, r4
 8014626:	4628      	mov	r0, r5
 8014628:	f000 f9e6 	bl	80149f8 <_printf_common>
 801462c:	3001      	adds	r0, #1
 801462e:	f040 808d 	bne.w	801474c <_printf_float+0x1d4>
 8014632:	f04f 30ff 	mov.w	r0, #4294967295
 8014636:	b00d      	add	sp, #52	; 0x34
 8014638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801463c:	4642      	mov	r2, r8
 801463e:	464b      	mov	r3, r9
 8014640:	4640      	mov	r0, r8
 8014642:	4649      	mov	r1, r9
 8014644:	f7f4 f9aa 	bl	800899c <__aeabi_dcmpun>
 8014648:	b110      	cbz	r0, 8014650 <_printf_float+0xd8>
 801464a:	4a8c      	ldr	r2, [pc, #560]	; (801487c <_printf_float+0x304>)
 801464c:	4b8c      	ldr	r3, [pc, #560]	; (8014880 <_printf_float+0x308>)
 801464e:	e7da      	b.n	8014606 <_printf_float+0x8e>
 8014650:	6861      	ldr	r1, [r4, #4]
 8014652:	1c4b      	adds	r3, r1, #1
 8014654:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014658:	a80a      	add	r0, sp, #40	; 0x28
 801465a:	d13e      	bne.n	80146da <_printf_float+0x162>
 801465c:	2306      	movs	r3, #6
 801465e:	6063      	str	r3, [r4, #4]
 8014660:	2300      	movs	r3, #0
 8014662:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014666:	ab09      	add	r3, sp, #36	; 0x24
 8014668:	9300      	str	r3, [sp, #0]
 801466a:	ec49 8b10 	vmov	d0, r8, r9
 801466e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014672:	6022      	str	r2, [r4, #0]
 8014674:	f8cd a004 	str.w	sl, [sp, #4]
 8014678:	6861      	ldr	r1, [r4, #4]
 801467a:	4628      	mov	r0, r5
 801467c:	f7ff fee8 	bl	8014450 <__cvt>
 8014680:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014684:	2b47      	cmp	r3, #71	; 0x47
 8014686:	4680      	mov	r8, r0
 8014688:	d109      	bne.n	801469e <_printf_float+0x126>
 801468a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801468c:	1cd8      	adds	r0, r3, #3
 801468e:	db02      	blt.n	8014696 <_printf_float+0x11e>
 8014690:	6862      	ldr	r2, [r4, #4]
 8014692:	4293      	cmp	r3, r2
 8014694:	dd47      	ble.n	8014726 <_printf_float+0x1ae>
 8014696:	f1aa 0a02 	sub.w	sl, sl, #2
 801469a:	fa5f fa8a 	uxtb.w	sl, sl
 801469e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80146a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80146a4:	d824      	bhi.n	80146f0 <_printf_float+0x178>
 80146a6:	3901      	subs	r1, #1
 80146a8:	4652      	mov	r2, sl
 80146aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80146ae:	9109      	str	r1, [sp, #36]	; 0x24
 80146b0:	f7ff ff2f 	bl	8014512 <__exponent>
 80146b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146b6:	1813      	adds	r3, r2, r0
 80146b8:	2a01      	cmp	r2, #1
 80146ba:	4681      	mov	r9, r0
 80146bc:	6123      	str	r3, [r4, #16]
 80146be:	dc02      	bgt.n	80146c6 <_printf_float+0x14e>
 80146c0:	6822      	ldr	r2, [r4, #0]
 80146c2:	07d1      	lsls	r1, r2, #31
 80146c4:	d501      	bpl.n	80146ca <_printf_float+0x152>
 80146c6:	3301      	adds	r3, #1
 80146c8:	6123      	str	r3, [r4, #16]
 80146ca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d0a5      	beq.n	801461e <_printf_float+0xa6>
 80146d2:	232d      	movs	r3, #45	; 0x2d
 80146d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80146d8:	e7a1      	b.n	801461e <_printf_float+0xa6>
 80146da:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80146de:	f000 8177 	beq.w	80149d0 <_printf_float+0x458>
 80146e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80146e6:	d1bb      	bne.n	8014660 <_printf_float+0xe8>
 80146e8:	2900      	cmp	r1, #0
 80146ea:	d1b9      	bne.n	8014660 <_printf_float+0xe8>
 80146ec:	2301      	movs	r3, #1
 80146ee:	e7b6      	b.n	801465e <_printf_float+0xe6>
 80146f0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80146f4:	d119      	bne.n	801472a <_printf_float+0x1b2>
 80146f6:	2900      	cmp	r1, #0
 80146f8:	6863      	ldr	r3, [r4, #4]
 80146fa:	dd0c      	ble.n	8014716 <_printf_float+0x19e>
 80146fc:	6121      	str	r1, [r4, #16]
 80146fe:	b913      	cbnz	r3, 8014706 <_printf_float+0x18e>
 8014700:	6822      	ldr	r2, [r4, #0]
 8014702:	07d2      	lsls	r2, r2, #31
 8014704:	d502      	bpl.n	801470c <_printf_float+0x194>
 8014706:	3301      	adds	r3, #1
 8014708:	440b      	add	r3, r1
 801470a:	6123      	str	r3, [r4, #16]
 801470c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801470e:	65a3      	str	r3, [r4, #88]	; 0x58
 8014710:	f04f 0900 	mov.w	r9, #0
 8014714:	e7d9      	b.n	80146ca <_printf_float+0x152>
 8014716:	b913      	cbnz	r3, 801471e <_printf_float+0x1a6>
 8014718:	6822      	ldr	r2, [r4, #0]
 801471a:	07d0      	lsls	r0, r2, #31
 801471c:	d501      	bpl.n	8014722 <_printf_float+0x1aa>
 801471e:	3302      	adds	r3, #2
 8014720:	e7f3      	b.n	801470a <_printf_float+0x192>
 8014722:	2301      	movs	r3, #1
 8014724:	e7f1      	b.n	801470a <_printf_float+0x192>
 8014726:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801472a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801472e:	4293      	cmp	r3, r2
 8014730:	db05      	blt.n	801473e <_printf_float+0x1c6>
 8014732:	6822      	ldr	r2, [r4, #0]
 8014734:	6123      	str	r3, [r4, #16]
 8014736:	07d1      	lsls	r1, r2, #31
 8014738:	d5e8      	bpl.n	801470c <_printf_float+0x194>
 801473a:	3301      	adds	r3, #1
 801473c:	e7e5      	b.n	801470a <_printf_float+0x192>
 801473e:	2b00      	cmp	r3, #0
 8014740:	bfd4      	ite	le
 8014742:	f1c3 0302 	rsble	r3, r3, #2
 8014746:	2301      	movgt	r3, #1
 8014748:	4413      	add	r3, r2
 801474a:	e7de      	b.n	801470a <_printf_float+0x192>
 801474c:	6823      	ldr	r3, [r4, #0]
 801474e:	055a      	lsls	r2, r3, #21
 8014750:	d407      	bmi.n	8014762 <_printf_float+0x1ea>
 8014752:	6923      	ldr	r3, [r4, #16]
 8014754:	4642      	mov	r2, r8
 8014756:	4631      	mov	r1, r6
 8014758:	4628      	mov	r0, r5
 801475a:	47b8      	blx	r7
 801475c:	3001      	adds	r0, #1
 801475e:	d12b      	bne.n	80147b8 <_printf_float+0x240>
 8014760:	e767      	b.n	8014632 <_printf_float+0xba>
 8014762:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014766:	f240 80dc 	bls.w	8014922 <_printf_float+0x3aa>
 801476a:	2200      	movs	r2, #0
 801476c:	2300      	movs	r3, #0
 801476e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014772:	f7f4 f8e1 	bl	8008938 <__aeabi_dcmpeq>
 8014776:	2800      	cmp	r0, #0
 8014778:	d033      	beq.n	80147e2 <_printf_float+0x26a>
 801477a:	2301      	movs	r3, #1
 801477c:	4a41      	ldr	r2, [pc, #260]	; (8014884 <_printf_float+0x30c>)
 801477e:	4631      	mov	r1, r6
 8014780:	4628      	mov	r0, r5
 8014782:	47b8      	blx	r7
 8014784:	3001      	adds	r0, #1
 8014786:	f43f af54 	beq.w	8014632 <_printf_float+0xba>
 801478a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801478e:	429a      	cmp	r2, r3
 8014790:	db02      	blt.n	8014798 <_printf_float+0x220>
 8014792:	6823      	ldr	r3, [r4, #0]
 8014794:	07d8      	lsls	r0, r3, #31
 8014796:	d50f      	bpl.n	80147b8 <_printf_float+0x240>
 8014798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801479c:	4631      	mov	r1, r6
 801479e:	4628      	mov	r0, r5
 80147a0:	47b8      	blx	r7
 80147a2:	3001      	adds	r0, #1
 80147a4:	f43f af45 	beq.w	8014632 <_printf_float+0xba>
 80147a8:	f04f 0800 	mov.w	r8, #0
 80147ac:	f104 091a 	add.w	r9, r4, #26
 80147b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147b2:	3b01      	subs	r3, #1
 80147b4:	4543      	cmp	r3, r8
 80147b6:	dc09      	bgt.n	80147cc <_printf_float+0x254>
 80147b8:	6823      	ldr	r3, [r4, #0]
 80147ba:	079b      	lsls	r3, r3, #30
 80147bc:	f100 8103 	bmi.w	80149c6 <_printf_float+0x44e>
 80147c0:	68e0      	ldr	r0, [r4, #12]
 80147c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147c4:	4298      	cmp	r0, r3
 80147c6:	bfb8      	it	lt
 80147c8:	4618      	movlt	r0, r3
 80147ca:	e734      	b.n	8014636 <_printf_float+0xbe>
 80147cc:	2301      	movs	r3, #1
 80147ce:	464a      	mov	r2, r9
 80147d0:	4631      	mov	r1, r6
 80147d2:	4628      	mov	r0, r5
 80147d4:	47b8      	blx	r7
 80147d6:	3001      	adds	r0, #1
 80147d8:	f43f af2b 	beq.w	8014632 <_printf_float+0xba>
 80147dc:	f108 0801 	add.w	r8, r8, #1
 80147e0:	e7e6      	b.n	80147b0 <_printf_float+0x238>
 80147e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	dc2b      	bgt.n	8014840 <_printf_float+0x2c8>
 80147e8:	2301      	movs	r3, #1
 80147ea:	4a26      	ldr	r2, [pc, #152]	; (8014884 <_printf_float+0x30c>)
 80147ec:	4631      	mov	r1, r6
 80147ee:	4628      	mov	r0, r5
 80147f0:	47b8      	blx	r7
 80147f2:	3001      	adds	r0, #1
 80147f4:	f43f af1d 	beq.w	8014632 <_printf_float+0xba>
 80147f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147fa:	b923      	cbnz	r3, 8014806 <_printf_float+0x28e>
 80147fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147fe:	b913      	cbnz	r3, 8014806 <_printf_float+0x28e>
 8014800:	6823      	ldr	r3, [r4, #0]
 8014802:	07d9      	lsls	r1, r3, #31
 8014804:	d5d8      	bpl.n	80147b8 <_printf_float+0x240>
 8014806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801480a:	4631      	mov	r1, r6
 801480c:	4628      	mov	r0, r5
 801480e:	47b8      	blx	r7
 8014810:	3001      	adds	r0, #1
 8014812:	f43f af0e 	beq.w	8014632 <_printf_float+0xba>
 8014816:	f04f 0900 	mov.w	r9, #0
 801481a:	f104 0a1a 	add.w	sl, r4, #26
 801481e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014820:	425b      	negs	r3, r3
 8014822:	454b      	cmp	r3, r9
 8014824:	dc01      	bgt.n	801482a <_printf_float+0x2b2>
 8014826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014828:	e794      	b.n	8014754 <_printf_float+0x1dc>
 801482a:	2301      	movs	r3, #1
 801482c:	4652      	mov	r2, sl
 801482e:	4631      	mov	r1, r6
 8014830:	4628      	mov	r0, r5
 8014832:	47b8      	blx	r7
 8014834:	3001      	adds	r0, #1
 8014836:	f43f aefc 	beq.w	8014632 <_printf_float+0xba>
 801483a:	f109 0901 	add.w	r9, r9, #1
 801483e:	e7ee      	b.n	801481e <_printf_float+0x2a6>
 8014840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014842:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014844:	429a      	cmp	r2, r3
 8014846:	bfa8      	it	ge
 8014848:	461a      	movge	r2, r3
 801484a:	2a00      	cmp	r2, #0
 801484c:	4691      	mov	r9, r2
 801484e:	dd07      	ble.n	8014860 <_printf_float+0x2e8>
 8014850:	4613      	mov	r3, r2
 8014852:	4631      	mov	r1, r6
 8014854:	4642      	mov	r2, r8
 8014856:	4628      	mov	r0, r5
 8014858:	47b8      	blx	r7
 801485a:	3001      	adds	r0, #1
 801485c:	f43f aee9 	beq.w	8014632 <_printf_float+0xba>
 8014860:	f104 031a 	add.w	r3, r4, #26
 8014864:	f04f 0b00 	mov.w	fp, #0
 8014868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801486c:	9306      	str	r3, [sp, #24]
 801486e:	e015      	b.n	801489c <_printf_float+0x324>
 8014870:	7fefffff 	.word	0x7fefffff
 8014874:	0801949d 	.word	0x0801949d
 8014878:	08019499 	.word	0x08019499
 801487c:	080194a5 	.word	0x080194a5
 8014880:	080194a1 	.word	0x080194a1
 8014884:	080194e6 	.word	0x080194e6
 8014888:	2301      	movs	r3, #1
 801488a:	9a06      	ldr	r2, [sp, #24]
 801488c:	4631      	mov	r1, r6
 801488e:	4628      	mov	r0, r5
 8014890:	47b8      	blx	r7
 8014892:	3001      	adds	r0, #1
 8014894:	f43f aecd 	beq.w	8014632 <_printf_float+0xba>
 8014898:	f10b 0b01 	add.w	fp, fp, #1
 801489c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80148a0:	ebaa 0309 	sub.w	r3, sl, r9
 80148a4:	455b      	cmp	r3, fp
 80148a6:	dcef      	bgt.n	8014888 <_printf_float+0x310>
 80148a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80148ac:	429a      	cmp	r2, r3
 80148ae:	44d0      	add	r8, sl
 80148b0:	db15      	blt.n	80148de <_printf_float+0x366>
 80148b2:	6823      	ldr	r3, [r4, #0]
 80148b4:	07da      	lsls	r2, r3, #31
 80148b6:	d412      	bmi.n	80148de <_printf_float+0x366>
 80148b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80148bc:	eba3 020a 	sub.w	r2, r3, sl
 80148c0:	eba3 0a01 	sub.w	sl, r3, r1
 80148c4:	4592      	cmp	sl, r2
 80148c6:	bfa8      	it	ge
 80148c8:	4692      	movge	sl, r2
 80148ca:	f1ba 0f00 	cmp.w	sl, #0
 80148ce:	dc0e      	bgt.n	80148ee <_printf_float+0x376>
 80148d0:	f04f 0800 	mov.w	r8, #0
 80148d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80148d8:	f104 091a 	add.w	r9, r4, #26
 80148dc:	e019      	b.n	8014912 <_printf_float+0x39a>
 80148de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80148e2:	4631      	mov	r1, r6
 80148e4:	4628      	mov	r0, r5
 80148e6:	47b8      	blx	r7
 80148e8:	3001      	adds	r0, #1
 80148ea:	d1e5      	bne.n	80148b8 <_printf_float+0x340>
 80148ec:	e6a1      	b.n	8014632 <_printf_float+0xba>
 80148ee:	4653      	mov	r3, sl
 80148f0:	4642      	mov	r2, r8
 80148f2:	4631      	mov	r1, r6
 80148f4:	4628      	mov	r0, r5
 80148f6:	47b8      	blx	r7
 80148f8:	3001      	adds	r0, #1
 80148fa:	d1e9      	bne.n	80148d0 <_printf_float+0x358>
 80148fc:	e699      	b.n	8014632 <_printf_float+0xba>
 80148fe:	2301      	movs	r3, #1
 8014900:	464a      	mov	r2, r9
 8014902:	4631      	mov	r1, r6
 8014904:	4628      	mov	r0, r5
 8014906:	47b8      	blx	r7
 8014908:	3001      	adds	r0, #1
 801490a:	f43f ae92 	beq.w	8014632 <_printf_float+0xba>
 801490e:	f108 0801 	add.w	r8, r8, #1
 8014912:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014916:	1a9b      	subs	r3, r3, r2
 8014918:	eba3 030a 	sub.w	r3, r3, sl
 801491c:	4543      	cmp	r3, r8
 801491e:	dcee      	bgt.n	80148fe <_printf_float+0x386>
 8014920:	e74a      	b.n	80147b8 <_printf_float+0x240>
 8014922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014924:	2a01      	cmp	r2, #1
 8014926:	dc01      	bgt.n	801492c <_printf_float+0x3b4>
 8014928:	07db      	lsls	r3, r3, #31
 801492a:	d53a      	bpl.n	80149a2 <_printf_float+0x42a>
 801492c:	2301      	movs	r3, #1
 801492e:	4642      	mov	r2, r8
 8014930:	4631      	mov	r1, r6
 8014932:	4628      	mov	r0, r5
 8014934:	47b8      	blx	r7
 8014936:	3001      	adds	r0, #1
 8014938:	f43f ae7b 	beq.w	8014632 <_printf_float+0xba>
 801493c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014940:	4631      	mov	r1, r6
 8014942:	4628      	mov	r0, r5
 8014944:	47b8      	blx	r7
 8014946:	3001      	adds	r0, #1
 8014948:	f108 0801 	add.w	r8, r8, #1
 801494c:	f43f ae71 	beq.w	8014632 <_printf_float+0xba>
 8014950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014952:	2200      	movs	r2, #0
 8014954:	f103 3aff 	add.w	sl, r3, #4294967295
 8014958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801495c:	2300      	movs	r3, #0
 801495e:	f7f3 ffeb 	bl	8008938 <__aeabi_dcmpeq>
 8014962:	b9c8      	cbnz	r0, 8014998 <_printf_float+0x420>
 8014964:	4653      	mov	r3, sl
 8014966:	4642      	mov	r2, r8
 8014968:	4631      	mov	r1, r6
 801496a:	4628      	mov	r0, r5
 801496c:	47b8      	blx	r7
 801496e:	3001      	adds	r0, #1
 8014970:	d10e      	bne.n	8014990 <_printf_float+0x418>
 8014972:	e65e      	b.n	8014632 <_printf_float+0xba>
 8014974:	2301      	movs	r3, #1
 8014976:	4652      	mov	r2, sl
 8014978:	4631      	mov	r1, r6
 801497a:	4628      	mov	r0, r5
 801497c:	47b8      	blx	r7
 801497e:	3001      	adds	r0, #1
 8014980:	f43f ae57 	beq.w	8014632 <_printf_float+0xba>
 8014984:	f108 0801 	add.w	r8, r8, #1
 8014988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801498a:	3b01      	subs	r3, #1
 801498c:	4543      	cmp	r3, r8
 801498e:	dcf1      	bgt.n	8014974 <_printf_float+0x3fc>
 8014990:	464b      	mov	r3, r9
 8014992:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014996:	e6de      	b.n	8014756 <_printf_float+0x1de>
 8014998:	f04f 0800 	mov.w	r8, #0
 801499c:	f104 0a1a 	add.w	sl, r4, #26
 80149a0:	e7f2      	b.n	8014988 <_printf_float+0x410>
 80149a2:	2301      	movs	r3, #1
 80149a4:	e7df      	b.n	8014966 <_printf_float+0x3ee>
 80149a6:	2301      	movs	r3, #1
 80149a8:	464a      	mov	r2, r9
 80149aa:	4631      	mov	r1, r6
 80149ac:	4628      	mov	r0, r5
 80149ae:	47b8      	blx	r7
 80149b0:	3001      	adds	r0, #1
 80149b2:	f43f ae3e 	beq.w	8014632 <_printf_float+0xba>
 80149b6:	f108 0801 	add.w	r8, r8, #1
 80149ba:	68e3      	ldr	r3, [r4, #12]
 80149bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80149be:	1a9b      	subs	r3, r3, r2
 80149c0:	4543      	cmp	r3, r8
 80149c2:	dcf0      	bgt.n	80149a6 <_printf_float+0x42e>
 80149c4:	e6fc      	b.n	80147c0 <_printf_float+0x248>
 80149c6:	f04f 0800 	mov.w	r8, #0
 80149ca:	f104 0919 	add.w	r9, r4, #25
 80149ce:	e7f4      	b.n	80149ba <_printf_float+0x442>
 80149d0:	2900      	cmp	r1, #0
 80149d2:	f43f ae8b 	beq.w	80146ec <_printf_float+0x174>
 80149d6:	2300      	movs	r3, #0
 80149d8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80149dc:	ab09      	add	r3, sp, #36	; 0x24
 80149de:	9300      	str	r3, [sp, #0]
 80149e0:	ec49 8b10 	vmov	d0, r8, r9
 80149e4:	6022      	str	r2, [r4, #0]
 80149e6:	f8cd a004 	str.w	sl, [sp, #4]
 80149ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80149ee:	4628      	mov	r0, r5
 80149f0:	f7ff fd2e 	bl	8014450 <__cvt>
 80149f4:	4680      	mov	r8, r0
 80149f6:	e648      	b.n	801468a <_printf_float+0x112>

080149f8 <_printf_common>:
 80149f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149fc:	4691      	mov	r9, r2
 80149fe:	461f      	mov	r7, r3
 8014a00:	688a      	ldr	r2, [r1, #8]
 8014a02:	690b      	ldr	r3, [r1, #16]
 8014a04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014a08:	4293      	cmp	r3, r2
 8014a0a:	bfb8      	it	lt
 8014a0c:	4613      	movlt	r3, r2
 8014a0e:	f8c9 3000 	str.w	r3, [r9]
 8014a12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014a16:	4606      	mov	r6, r0
 8014a18:	460c      	mov	r4, r1
 8014a1a:	b112      	cbz	r2, 8014a22 <_printf_common+0x2a>
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	f8c9 3000 	str.w	r3, [r9]
 8014a22:	6823      	ldr	r3, [r4, #0]
 8014a24:	0699      	lsls	r1, r3, #26
 8014a26:	bf42      	ittt	mi
 8014a28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014a2c:	3302      	addmi	r3, #2
 8014a2e:	f8c9 3000 	strmi.w	r3, [r9]
 8014a32:	6825      	ldr	r5, [r4, #0]
 8014a34:	f015 0506 	ands.w	r5, r5, #6
 8014a38:	d107      	bne.n	8014a4a <_printf_common+0x52>
 8014a3a:	f104 0a19 	add.w	sl, r4, #25
 8014a3e:	68e3      	ldr	r3, [r4, #12]
 8014a40:	f8d9 2000 	ldr.w	r2, [r9]
 8014a44:	1a9b      	subs	r3, r3, r2
 8014a46:	42ab      	cmp	r3, r5
 8014a48:	dc28      	bgt.n	8014a9c <_printf_common+0xa4>
 8014a4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014a4e:	6822      	ldr	r2, [r4, #0]
 8014a50:	3300      	adds	r3, #0
 8014a52:	bf18      	it	ne
 8014a54:	2301      	movne	r3, #1
 8014a56:	0692      	lsls	r2, r2, #26
 8014a58:	d42d      	bmi.n	8014ab6 <_printf_common+0xbe>
 8014a5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014a5e:	4639      	mov	r1, r7
 8014a60:	4630      	mov	r0, r6
 8014a62:	47c0      	blx	r8
 8014a64:	3001      	adds	r0, #1
 8014a66:	d020      	beq.n	8014aaa <_printf_common+0xb2>
 8014a68:	6823      	ldr	r3, [r4, #0]
 8014a6a:	68e5      	ldr	r5, [r4, #12]
 8014a6c:	f8d9 2000 	ldr.w	r2, [r9]
 8014a70:	f003 0306 	and.w	r3, r3, #6
 8014a74:	2b04      	cmp	r3, #4
 8014a76:	bf08      	it	eq
 8014a78:	1aad      	subeq	r5, r5, r2
 8014a7a:	68a3      	ldr	r3, [r4, #8]
 8014a7c:	6922      	ldr	r2, [r4, #16]
 8014a7e:	bf0c      	ite	eq
 8014a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014a84:	2500      	movne	r5, #0
 8014a86:	4293      	cmp	r3, r2
 8014a88:	bfc4      	itt	gt
 8014a8a:	1a9b      	subgt	r3, r3, r2
 8014a8c:	18ed      	addgt	r5, r5, r3
 8014a8e:	f04f 0900 	mov.w	r9, #0
 8014a92:	341a      	adds	r4, #26
 8014a94:	454d      	cmp	r5, r9
 8014a96:	d11a      	bne.n	8014ace <_printf_common+0xd6>
 8014a98:	2000      	movs	r0, #0
 8014a9a:	e008      	b.n	8014aae <_printf_common+0xb6>
 8014a9c:	2301      	movs	r3, #1
 8014a9e:	4652      	mov	r2, sl
 8014aa0:	4639      	mov	r1, r7
 8014aa2:	4630      	mov	r0, r6
 8014aa4:	47c0      	blx	r8
 8014aa6:	3001      	adds	r0, #1
 8014aa8:	d103      	bne.n	8014ab2 <_printf_common+0xba>
 8014aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8014aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ab2:	3501      	adds	r5, #1
 8014ab4:	e7c3      	b.n	8014a3e <_printf_common+0x46>
 8014ab6:	18e1      	adds	r1, r4, r3
 8014ab8:	1c5a      	adds	r2, r3, #1
 8014aba:	2030      	movs	r0, #48	; 0x30
 8014abc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014ac0:	4422      	add	r2, r4
 8014ac2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014ac6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014aca:	3302      	adds	r3, #2
 8014acc:	e7c5      	b.n	8014a5a <_printf_common+0x62>
 8014ace:	2301      	movs	r3, #1
 8014ad0:	4622      	mov	r2, r4
 8014ad2:	4639      	mov	r1, r7
 8014ad4:	4630      	mov	r0, r6
 8014ad6:	47c0      	blx	r8
 8014ad8:	3001      	adds	r0, #1
 8014ada:	d0e6      	beq.n	8014aaa <_printf_common+0xb2>
 8014adc:	f109 0901 	add.w	r9, r9, #1
 8014ae0:	e7d8      	b.n	8014a94 <_printf_common+0x9c>
	...

08014ae4 <_printf_i>:
 8014ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ae8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014aec:	460c      	mov	r4, r1
 8014aee:	7e09      	ldrb	r1, [r1, #24]
 8014af0:	b085      	sub	sp, #20
 8014af2:	296e      	cmp	r1, #110	; 0x6e
 8014af4:	4617      	mov	r7, r2
 8014af6:	4606      	mov	r6, r0
 8014af8:	4698      	mov	r8, r3
 8014afa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014afc:	f000 80b3 	beq.w	8014c66 <_printf_i+0x182>
 8014b00:	d822      	bhi.n	8014b48 <_printf_i+0x64>
 8014b02:	2963      	cmp	r1, #99	; 0x63
 8014b04:	d036      	beq.n	8014b74 <_printf_i+0x90>
 8014b06:	d80a      	bhi.n	8014b1e <_printf_i+0x3a>
 8014b08:	2900      	cmp	r1, #0
 8014b0a:	f000 80b9 	beq.w	8014c80 <_printf_i+0x19c>
 8014b0e:	2958      	cmp	r1, #88	; 0x58
 8014b10:	f000 8083 	beq.w	8014c1a <_printf_i+0x136>
 8014b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014b1c:	e032      	b.n	8014b84 <_printf_i+0xa0>
 8014b1e:	2964      	cmp	r1, #100	; 0x64
 8014b20:	d001      	beq.n	8014b26 <_printf_i+0x42>
 8014b22:	2969      	cmp	r1, #105	; 0x69
 8014b24:	d1f6      	bne.n	8014b14 <_printf_i+0x30>
 8014b26:	6820      	ldr	r0, [r4, #0]
 8014b28:	6813      	ldr	r3, [r2, #0]
 8014b2a:	0605      	lsls	r5, r0, #24
 8014b2c:	f103 0104 	add.w	r1, r3, #4
 8014b30:	d52a      	bpl.n	8014b88 <_printf_i+0xa4>
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	6011      	str	r1, [r2, #0]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	da03      	bge.n	8014b42 <_printf_i+0x5e>
 8014b3a:	222d      	movs	r2, #45	; 0x2d
 8014b3c:	425b      	negs	r3, r3
 8014b3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014b42:	486f      	ldr	r0, [pc, #444]	; (8014d00 <_printf_i+0x21c>)
 8014b44:	220a      	movs	r2, #10
 8014b46:	e039      	b.n	8014bbc <_printf_i+0xd8>
 8014b48:	2973      	cmp	r1, #115	; 0x73
 8014b4a:	f000 809d 	beq.w	8014c88 <_printf_i+0x1a4>
 8014b4e:	d808      	bhi.n	8014b62 <_printf_i+0x7e>
 8014b50:	296f      	cmp	r1, #111	; 0x6f
 8014b52:	d020      	beq.n	8014b96 <_printf_i+0xb2>
 8014b54:	2970      	cmp	r1, #112	; 0x70
 8014b56:	d1dd      	bne.n	8014b14 <_printf_i+0x30>
 8014b58:	6823      	ldr	r3, [r4, #0]
 8014b5a:	f043 0320 	orr.w	r3, r3, #32
 8014b5e:	6023      	str	r3, [r4, #0]
 8014b60:	e003      	b.n	8014b6a <_printf_i+0x86>
 8014b62:	2975      	cmp	r1, #117	; 0x75
 8014b64:	d017      	beq.n	8014b96 <_printf_i+0xb2>
 8014b66:	2978      	cmp	r1, #120	; 0x78
 8014b68:	d1d4      	bne.n	8014b14 <_printf_i+0x30>
 8014b6a:	2378      	movs	r3, #120	; 0x78
 8014b6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014b70:	4864      	ldr	r0, [pc, #400]	; (8014d04 <_printf_i+0x220>)
 8014b72:	e055      	b.n	8014c20 <_printf_i+0x13c>
 8014b74:	6813      	ldr	r3, [r2, #0]
 8014b76:	1d19      	adds	r1, r3, #4
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	6011      	str	r1, [r2, #0]
 8014b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014b84:	2301      	movs	r3, #1
 8014b86:	e08c      	b.n	8014ca2 <_printf_i+0x1be>
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	6011      	str	r1, [r2, #0]
 8014b8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014b90:	bf18      	it	ne
 8014b92:	b21b      	sxthne	r3, r3
 8014b94:	e7cf      	b.n	8014b36 <_printf_i+0x52>
 8014b96:	6813      	ldr	r3, [r2, #0]
 8014b98:	6825      	ldr	r5, [r4, #0]
 8014b9a:	1d18      	adds	r0, r3, #4
 8014b9c:	6010      	str	r0, [r2, #0]
 8014b9e:	0628      	lsls	r0, r5, #24
 8014ba0:	d501      	bpl.n	8014ba6 <_printf_i+0xc2>
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	e002      	b.n	8014bac <_printf_i+0xc8>
 8014ba6:	0668      	lsls	r0, r5, #25
 8014ba8:	d5fb      	bpl.n	8014ba2 <_printf_i+0xbe>
 8014baa:	881b      	ldrh	r3, [r3, #0]
 8014bac:	4854      	ldr	r0, [pc, #336]	; (8014d00 <_printf_i+0x21c>)
 8014bae:	296f      	cmp	r1, #111	; 0x6f
 8014bb0:	bf14      	ite	ne
 8014bb2:	220a      	movne	r2, #10
 8014bb4:	2208      	moveq	r2, #8
 8014bb6:	2100      	movs	r1, #0
 8014bb8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014bbc:	6865      	ldr	r5, [r4, #4]
 8014bbe:	60a5      	str	r5, [r4, #8]
 8014bc0:	2d00      	cmp	r5, #0
 8014bc2:	f2c0 8095 	blt.w	8014cf0 <_printf_i+0x20c>
 8014bc6:	6821      	ldr	r1, [r4, #0]
 8014bc8:	f021 0104 	bic.w	r1, r1, #4
 8014bcc:	6021      	str	r1, [r4, #0]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d13d      	bne.n	8014c4e <_printf_i+0x16a>
 8014bd2:	2d00      	cmp	r5, #0
 8014bd4:	f040 808e 	bne.w	8014cf4 <_printf_i+0x210>
 8014bd8:	4665      	mov	r5, ip
 8014bda:	2a08      	cmp	r2, #8
 8014bdc:	d10b      	bne.n	8014bf6 <_printf_i+0x112>
 8014bde:	6823      	ldr	r3, [r4, #0]
 8014be0:	07db      	lsls	r3, r3, #31
 8014be2:	d508      	bpl.n	8014bf6 <_printf_i+0x112>
 8014be4:	6923      	ldr	r3, [r4, #16]
 8014be6:	6862      	ldr	r2, [r4, #4]
 8014be8:	429a      	cmp	r2, r3
 8014bea:	bfde      	ittt	le
 8014bec:	2330      	movle	r3, #48	; 0x30
 8014bee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014bf2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014bf6:	ebac 0305 	sub.w	r3, ip, r5
 8014bfa:	6123      	str	r3, [r4, #16]
 8014bfc:	f8cd 8000 	str.w	r8, [sp]
 8014c00:	463b      	mov	r3, r7
 8014c02:	aa03      	add	r2, sp, #12
 8014c04:	4621      	mov	r1, r4
 8014c06:	4630      	mov	r0, r6
 8014c08:	f7ff fef6 	bl	80149f8 <_printf_common>
 8014c0c:	3001      	adds	r0, #1
 8014c0e:	d14d      	bne.n	8014cac <_printf_i+0x1c8>
 8014c10:	f04f 30ff 	mov.w	r0, #4294967295
 8014c14:	b005      	add	sp, #20
 8014c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c1a:	4839      	ldr	r0, [pc, #228]	; (8014d00 <_printf_i+0x21c>)
 8014c1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014c20:	6813      	ldr	r3, [r2, #0]
 8014c22:	6821      	ldr	r1, [r4, #0]
 8014c24:	1d1d      	adds	r5, r3, #4
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	6015      	str	r5, [r2, #0]
 8014c2a:	060a      	lsls	r2, r1, #24
 8014c2c:	d50b      	bpl.n	8014c46 <_printf_i+0x162>
 8014c2e:	07ca      	lsls	r2, r1, #31
 8014c30:	bf44      	itt	mi
 8014c32:	f041 0120 	orrmi.w	r1, r1, #32
 8014c36:	6021      	strmi	r1, [r4, #0]
 8014c38:	b91b      	cbnz	r3, 8014c42 <_printf_i+0x15e>
 8014c3a:	6822      	ldr	r2, [r4, #0]
 8014c3c:	f022 0220 	bic.w	r2, r2, #32
 8014c40:	6022      	str	r2, [r4, #0]
 8014c42:	2210      	movs	r2, #16
 8014c44:	e7b7      	b.n	8014bb6 <_printf_i+0xd2>
 8014c46:	064d      	lsls	r5, r1, #25
 8014c48:	bf48      	it	mi
 8014c4a:	b29b      	uxthmi	r3, r3
 8014c4c:	e7ef      	b.n	8014c2e <_printf_i+0x14a>
 8014c4e:	4665      	mov	r5, ip
 8014c50:	fbb3 f1f2 	udiv	r1, r3, r2
 8014c54:	fb02 3311 	mls	r3, r2, r1, r3
 8014c58:	5cc3      	ldrb	r3, [r0, r3]
 8014c5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014c5e:	460b      	mov	r3, r1
 8014c60:	2900      	cmp	r1, #0
 8014c62:	d1f5      	bne.n	8014c50 <_printf_i+0x16c>
 8014c64:	e7b9      	b.n	8014bda <_printf_i+0xf6>
 8014c66:	6813      	ldr	r3, [r2, #0]
 8014c68:	6825      	ldr	r5, [r4, #0]
 8014c6a:	6961      	ldr	r1, [r4, #20]
 8014c6c:	1d18      	adds	r0, r3, #4
 8014c6e:	6010      	str	r0, [r2, #0]
 8014c70:	0628      	lsls	r0, r5, #24
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	d501      	bpl.n	8014c7a <_printf_i+0x196>
 8014c76:	6019      	str	r1, [r3, #0]
 8014c78:	e002      	b.n	8014c80 <_printf_i+0x19c>
 8014c7a:	066a      	lsls	r2, r5, #25
 8014c7c:	d5fb      	bpl.n	8014c76 <_printf_i+0x192>
 8014c7e:	8019      	strh	r1, [r3, #0]
 8014c80:	2300      	movs	r3, #0
 8014c82:	6123      	str	r3, [r4, #16]
 8014c84:	4665      	mov	r5, ip
 8014c86:	e7b9      	b.n	8014bfc <_printf_i+0x118>
 8014c88:	6813      	ldr	r3, [r2, #0]
 8014c8a:	1d19      	adds	r1, r3, #4
 8014c8c:	6011      	str	r1, [r2, #0]
 8014c8e:	681d      	ldr	r5, [r3, #0]
 8014c90:	6862      	ldr	r2, [r4, #4]
 8014c92:	2100      	movs	r1, #0
 8014c94:	4628      	mov	r0, r5
 8014c96:	f7f3 f9db 	bl	8008050 <memchr>
 8014c9a:	b108      	cbz	r0, 8014ca0 <_printf_i+0x1bc>
 8014c9c:	1b40      	subs	r0, r0, r5
 8014c9e:	6060      	str	r0, [r4, #4]
 8014ca0:	6863      	ldr	r3, [r4, #4]
 8014ca2:	6123      	str	r3, [r4, #16]
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014caa:	e7a7      	b.n	8014bfc <_printf_i+0x118>
 8014cac:	6923      	ldr	r3, [r4, #16]
 8014cae:	462a      	mov	r2, r5
 8014cb0:	4639      	mov	r1, r7
 8014cb2:	4630      	mov	r0, r6
 8014cb4:	47c0      	blx	r8
 8014cb6:	3001      	adds	r0, #1
 8014cb8:	d0aa      	beq.n	8014c10 <_printf_i+0x12c>
 8014cba:	6823      	ldr	r3, [r4, #0]
 8014cbc:	079b      	lsls	r3, r3, #30
 8014cbe:	d413      	bmi.n	8014ce8 <_printf_i+0x204>
 8014cc0:	68e0      	ldr	r0, [r4, #12]
 8014cc2:	9b03      	ldr	r3, [sp, #12]
 8014cc4:	4298      	cmp	r0, r3
 8014cc6:	bfb8      	it	lt
 8014cc8:	4618      	movlt	r0, r3
 8014cca:	e7a3      	b.n	8014c14 <_printf_i+0x130>
 8014ccc:	2301      	movs	r3, #1
 8014cce:	464a      	mov	r2, r9
 8014cd0:	4639      	mov	r1, r7
 8014cd2:	4630      	mov	r0, r6
 8014cd4:	47c0      	blx	r8
 8014cd6:	3001      	adds	r0, #1
 8014cd8:	d09a      	beq.n	8014c10 <_printf_i+0x12c>
 8014cda:	3501      	adds	r5, #1
 8014cdc:	68e3      	ldr	r3, [r4, #12]
 8014cde:	9a03      	ldr	r2, [sp, #12]
 8014ce0:	1a9b      	subs	r3, r3, r2
 8014ce2:	42ab      	cmp	r3, r5
 8014ce4:	dcf2      	bgt.n	8014ccc <_printf_i+0x1e8>
 8014ce6:	e7eb      	b.n	8014cc0 <_printf_i+0x1dc>
 8014ce8:	2500      	movs	r5, #0
 8014cea:	f104 0919 	add.w	r9, r4, #25
 8014cee:	e7f5      	b.n	8014cdc <_printf_i+0x1f8>
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d1ac      	bne.n	8014c4e <_printf_i+0x16a>
 8014cf4:	7803      	ldrb	r3, [r0, #0]
 8014cf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014cfa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014cfe:	e76c      	b.n	8014bda <_printf_i+0xf6>
 8014d00:	080194a9 	.word	0x080194a9
 8014d04:	080194ba 	.word	0x080194ba

08014d08 <__svfiscanf_r>:
 8014d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d0c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8014d10:	460c      	mov	r4, r1
 8014d12:	2100      	movs	r1, #0
 8014d14:	9144      	str	r1, [sp, #272]	; 0x110
 8014d16:	9145      	str	r1, [sp, #276]	; 0x114
 8014d18:	499f      	ldr	r1, [pc, #636]	; (8014f98 <__svfiscanf_r+0x290>)
 8014d1a:	91a0      	str	r1, [sp, #640]	; 0x280
 8014d1c:	f10d 0804 	add.w	r8, sp, #4
 8014d20:	499e      	ldr	r1, [pc, #632]	; (8014f9c <__svfiscanf_r+0x294>)
 8014d22:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8014fa0 <__svfiscanf_r+0x298>
 8014d26:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014d2a:	4606      	mov	r6, r0
 8014d2c:	4692      	mov	sl, r2
 8014d2e:	91a1      	str	r1, [sp, #644]	; 0x284
 8014d30:	9300      	str	r3, [sp, #0]
 8014d32:	270a      	movs	r7, #10
 8014d34:	f89a 3000 	ldrb.w	r3, [sl]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	f000 812a 	beq.w	8014f92 <__svfiscanf_r+0x28a>
 8014d3e:	4655      	mov	r5, sl
 8014d40:	f003 faea 	bl	8018318 <__locale_ctype_ptr>
 8014d44:	f815 bb01 	ldrb.w	fp, [r5], #1
 8014d48:	4458      	add	r0, fp
 8014d4a:	7843      	ldrb	r3, [r0, #1]
 8014d4c:	f013 0308 	ands.w	r3, r3, #8
 8014d50:	d01c      	beq.n	8014d8c <__svfiscanf_r+0x84>
 8014d52:	6863      	ldr	r3, [r4, #4]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	dd12      	ble.n	8014d7e <__svfiscanf_r+0x76>
 8014d58:	f003 fade 	bl	8018318 <__locale_ctype_ptr>
 8014d5c:	6823      	ldr	r3, [r4, #0]
 8014d5e:	781a      	ldrb	r2, [r3, #0]
 8014d60:	4410      	add	r0, r2
 8014d62:	7842      	ldrb	r2, [r0, #1]
 8014d64:	0712      	lsls	r2, r2, #28
 8014d66:	d401      	bmi.n	8014d6c <__svfiscanf_r+0x64>
 8014d68:	46aa      	mov	sl, r5
 8014d6a:	e7e3      	b.n	8014d34 <__svfiscanf_r+0x2c>
 8014d6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014d6e:	3201      	adds	r2, #1
 8014d70:	9245      	str	r2, [sp, #276]	; 0x114
 8014d72:	6862      	ldr	r2, [r4, #4]
 8014d74:	3301      	adds	r3, #1
 8014d76:	3a01      	subs	r2, #1
 8014d78:	6062      	str	r2, [r4, #4]
 8014d7a:	6023      	str	r3, [r4, #0]
 8014d7c:	e7e9      	b.n	8014d52 <__svfiscanf_r+0x4a>
 8014d7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014d80:	4621      	mov	r1, r4
 8014d82:	4630      	mov	r0, r6
 8014d84:	4798      	blx	r3
 8014d86:	2800      	cmp	r0, #0
 8014d88:	d0e6      	beq.n	8014d58 <__svfiscanf_r+0x50>
 8014d8a:	e7ed      	b.n	8014d68 <__svfiscanf_r+0x60>
 8014d8c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8014d90:	f040 8082 	bne.w	8014e98 <__svfiscanf_r+0x190>
 8014d94:	9343      	str	r3, [sp, #268]	; 0x10c
 8014d96:	9341      	str	r3, [sp, #260]	; 0x104
 8014d98:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8014d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8014d9e:	d103      	bne.n	8014da8 <__svfiscanf_r+0xa0>
 8014da0:	2310      	movs	r3, #16
 8014da2:	9341      	str	r3, [sp, #260]	; 0x104
 8014da4:	f10a 0502 	add.w	r5, sl, #2
 8014da8:	46aa      	mov	sl, r5
 8014daa:	f815 1b01 	ldrb.w	r1, [r5], #1
 8014dae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014db2:	2a09      	cmp	r2, #9
 8014db4:	d922      	bls.n	8014dfc <__svfiscanf_r+0xf4>
 8014db6:	2203      	movs	r2, #3
 8014db8:	4879      	ldr	r0, [pc, #484]	; (8014fa0 <__svfiscanf_r+0x298>)
 8014dba:	f7f3 f949 	bl	8008050 <memchr>
 8014dbe:	b138      	cbz	r0, 8014dd0 <__svfiscanf_r+0xc8>
 8014dc0:	eba0 0309 	sub.w	r3, r0, r9
 8014dc4:	2001      	movs	r0, #1
 8014dc6:	4098      	lsls	r0, r3
 8014dc8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014dca:	4318      	orrs	r0, r3
 8014dcc:	9041      	str	r0, [sp, #260]	; 0x104
 8014dce:	46aa      	mov	sl, r5
 8014dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8014dd4:	2b67      	cmp	r3, #103	; 0x67
 8014dd6:	f10a 0501 	add.w	r5, sl, #1
 8014dda:	d82b      	bhi.n	8014e34 <__svfiscanf_r+0x12c>
 8014ddc:	2b65      	cmp	r3, #101	; 0x65
 8014dde:	f080 809f 	bcs.w	8014f20 <__svfiscanf_r+0x218>
 8014de2:	2b47      	cmp	r3, #71	; 0x47
 8014de4:	d810      	bhi.n	8014e08 <__svfiscanf_r+0x100>
 8014de6:	2b45      	cmp	r3, #69	; 0x45
 8014de8:	f080 809a 	bcs.w	8014f20 <__svfiscanf_r+0x218>
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d06c      	beq.n	8014eca <__svfiscanf_r+0x1c2>
 8014df0:	2b25      	cmp	r3, #37	; 0x25
 8014df2:	d051      	beq.n	8014e98 <__svfiscanf_r+0x190>
 8014df4:	2303      	movs	r3, #3
 8014df6:	9347      	str	r3, [sp, #284]	; 0x11c
 8014df8:	9742      	str	r7, [sp, #264]	; 0x108
 8014dfa:	e027      	b.n	8014e4c <__svfiscanf_r+0x144>
 8014dfc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014dfe:	fb07 1303 	mla	r3, r7, r3, r1
 8014e02:	3b30      	subs	r3, #48	; 0x30
 8014e04:	9343      	str	r3, [sp, #268]	; 0x10c
 8014e06:	e7cf      	b.n	8014da8 <__svfiscanf_r+0xa0>
 8014e08:	2b5b      	cmp	r3, #91	; 0x5b
 8014e0a:	d06a      	beq.n	8014ee2 <__svfiscanf_r+0x1da>
 8014e0c:	d80c      	bhi.n	8014e28 <__svfiscanf_r+0x120>
 8014e0e:	2b58      	cmp	r3, #88	; 0x58
 8014e10:	d1f0      	bne.n	8014df4 <__svfiscanf_r+0xec>
 8014e12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014e18:	9241      	str	r2, [sp, #260]	; 0x104
 8014e1a:	2210      	movs	r2, #16
 8014e1c:	9242      	str	r2, [sp, #264]	; 0x108
 8014e1e:	2b6e      	cmp	r3, #110	; 0x6e
 8014e20:	bf8c      	ite	hi
 8014e22:	2304      	movhi	r3, #4
 8014e24:	2303      	movls	r3, #3
 8014e26:	e010      	b.n	8014e4a <__svfiscanf_r+0x142>
 8014e28:	2b63      	cmp	r3, #99	; 0x63
 8014e2a:	d065      	beq.n	8014ef8 <__svfiscanf_r+0x1f0>
 8014e2c:	2b64      	cmp	r3, #100	; 0x64
 8014e2e:	d1e1      	bne.n	8014df4 <__svfiscanf_r+0xec>
 8014e30:	9742      	str	r7, [sp, #264]	; 0x108
 8014e32:	e7f4      	b.n	8014e1e <__svfiscanf_r+0x116>
 8014e34:	2b70      	cmp	r3, #112	; 0x70
 8014e36:	d04b      	beq.n	8014ed0 <__svfiscanf_r+0x1c8>
 8014e38:	d826      	bhi.n	8014e88 <__svfiscanf_r+0x180>
 8014e3a:	2b6e      	cmp	r3, #110	; 0x6e
 8014e3c:	d062      	beq.n	8014f04 <__svfiscanf_r+0x1fc>
 8014e3e:	d84c      	bhi.n	8014eda <__svfiscanf_r+0x1d2>
 8014e40:	2b69      	cmp	r3, #105	; 0x69
 8014e42:	d1d7      	bne.n	8014df4 <__svfiscanf_r+0xec>
 8014e44:	2300      	movs	r3, #0
 8014e46:	9342      	str	r3, [sp, #264]	; 0x108
 8014e48:	2303      	movs	r3, #3
 8014e4a:	9347      	str	r3, [sp, #284]	; 0x11c
 8014e4c:	6863      	ldr	r3, [r4, #4]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	dd68      	ble.n	8014f24 <__svfiscanf_r+0x21c>
 8014e52:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014e54:	0659      	lsls	r1, r3, #25
 8014e56:	d407      	bmi.n	8014e68 <__svfiscanf_r+0x160>
 8014e58:	f003 fa5e 	bl	8018318 <__locale_ctype_ptr>
 8014e5c:	6823      	ldr	r3, [r4, #0]
 8014e5e:	781a      	ldrb	r2, [r3, #0]
 8014e60:	4410      	add	r0, r2
 8014e62:	7842      	ldrb	r2, [r0, #1]
 8014e64:	0712      	lsls	r2, r2, #28
 8014e66:	d464      	bmi.n	8014f32 <__svfiscanf_r+0x22a>
 8014e68:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014e6a:	2b02      	cmp	r3, #2
 8014e6c:	dc73      	bgt.n	8014f56 <__svfiscanf_r+0x24e>
 8014e6e:	466b      	mov	r3, sp
 8014e70:	4622      	mov	r2, r4
 8014e72:	a941      	add	r1, sp, #260	; 0x104
 8014e74:	4630      	mov	r0, r6
 8014e76:	f000 faa1 	bl	80153bc <_scanf_chars>
 8014e7a:	2801      	cmp	r0, #1
 8014e7c:	f000 8089 	beq.w	8014f92 <__svfiscanf_r+0x28a>
 8014e80:	2802      	cmp	r0, #2
 8014e82:	f47f af71 	bne.w	8014d68 <__svfiscanf_r+0x60>
 8014e86:	e01d      	b.n	8014ec4 <__svfiscanf_r+0x1bc>
 8014e88:	2b75      	cmp	r3, #117	; 0x75
 8014e8a:	d0d1      	beq.n	8014e30 <__svfiscanf_r+0x128>
 8014e8c:	2b78      	cmp	r3, #120	; 0x78
 8014e8e:	d0c0      	beq.n	8014e12 <__svfiscanf_r+0x10a>
 8014e90:	2b73      	cmp	r3, #115	; 0x73
 8014e92:	d1af      	bne.n	8014df4 <__svfiscanf_r+0xec>
 8014e94:	2302      	movs	r3, #2
 8014e96:	e7d8      	b.n	8014e4a <__svfiscanf_r+0x142>
 8014e98:	6863      	ldr	r3, [r4, #4]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	dd0c      	ble.n	8014eb8 <__svfiscanf_r+0x1b0>
 8014e9e:	6823      	ldr	r3, [r4, #0]
 8014ea0:	781a      	ldrb	r2, [r3, #0]
 8014ea2:	455a      	cmp	r2, fp
 8014ea4:	d175      	bne.n	8014f92 <__svfiscanf_r+0x28a>
 8014ea6:	3301      	adds	r3, #1
 8014ea8:	6862      	ldr	r2, [r4, #4]
 8014eaa:	6023      	str	r3, [r4, #0]
 8014eac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8014eae:	3a01      	subs	r2, #1
 8014eb0:	3301      	adds	r3, #1
 8014eb2:	6062      	str	r2, [r4, #4]
 8014eb4:	9345      	str	r3, [sp, #276]	; 0x114
 8014eb6:	e757      	b.n	8014d68 <__svfiscanf_r+0x60>
 8014eb8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014eba:	4621      	mov	r1, r4
 8014ebc:	4630      	mov	r0, r6
 8014ebe:	4798      	blx	r3
 8014ec0:	2800      	cmp	r0, #0
 8014ec2:	d0ec      	beq.n	8014e9e <__svfiscanf_r+0x196>
 8014ec4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014ec6:	2800      	cmp	r0, #0
 8014ec8:	d159      	bne.n	8014f7e <__svfiscanf_r+0x276>
 8014eca:	f04f 30ff 	mov.w	r0, #4294967295
 8014ece:	e05c      	b.n	8014f8a <__svfiscanf_r+0x282>
 8014ed0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014ed2:	f042 0220 	orr.w	r2, r2, #32
 8014ed6:	9241      	str	r2, [sp, #260]	; 0x104
 8014ed8:	e79b      	b.n	8014e12 <__svfiscanf_r+0x10a>
 8014eda:	2308      	movs	r3, #8
 8014edc:	9342      	str	r3, [sp, #264]	; 0x108
 8014ede:	2304      	movs	r3, #4
 8014ee0:	e7b3      	b.n	8014e4a <__svfiscanf_r+0x142>
 8014ee2:	4629      	mov	r1, r5
 8014ee4:	4640      	mov	r0, r8
 8014ee6:	f000 fe6d 	bl	8015bc4 <__sccl>
 8014eea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ef0:	9341      	str	r3, [sp, #260]	; 0x104
 8014ef2:	4605      	mov	r5, r0
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	e7a8      	b.n	8014e4a <__svfiscanf_r+0x142>
 8014ef8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014efe:	9341      	str	r3, [sp, #260]	; 0x104
 8014f00:	2300      	movs	r3, #0
 8014f02:	e7a2      	b.n	8014e4a <__svfiscanf_r+0x142>
 8014f04:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014f06:	06c3      	lsls	r3, r0, #27
 8014f08:	f53f af2e 	bmi.w	8014d68 <__svfiscanf_r+0x60>
 8014f0c:	9b00      	ldr	r3, [sp, #0]
 8014f0e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014f10:	1d19      	adds	r1, r3, #4
 8014f12:	9100      	str	r1, [sp, #0]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	07c0      	lsls	r0, r0, #31
 8014f18:	bf4c      	ite	mi
 8014f1a:	801a      	strhmi	r2, [r3, #0]
 8014f1c:	601a      	strpl	r2, [r3, #0]
 8014f1e:	e723      	b.n	8014d68 <__svfiscanf_r+0x60>
 8014f20:	2305      	movs	r3, #5
 8014f22:	e792      	b.n	8014e4a <__svfiscanf_r+0x142>
 8014f24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014f26:	4621      	mov	r1, r4
 8014f28:	4630      	mov	r0, r6
 8014f2a:	4798      	blx	r3
 8014f2c:	2800      	cmp	r0, #0
 8014f2e:	d090      	beq.n	8014e52 <__svfiscanf_r+0x14a>
 8014f30:	e7c8      	b.n	8014ec4 <__svfiscanf_r+0x1bc>
 8014f32:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014f34:	3201      	adds	r2, #1
 8014f36:	9245      	str	r2, [sp, #276]	; 0x114
 8014f38:	6862      	ldr	r2, [r4, #4]
 8014f3a:	3a01      	subs	r2, #1
 8014f3c:	2a00      	cmp	r2, #0
 8014f3e:	6062      	str	r2, [r4, #4]
 8014f40:	dd02      	ble.n	8014f48 <__svfiscanf_r+0x240>
 8014f42:	3301      	adds	r3, #1
 8014f44:	6023      	str	r3, [r4, #0]
 8014f46:	e787      	b.n	8014e58 <__svfiscanf_r+0x150>
 8014f48:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014f4a:	4621      	mov	r1, r4
 8014f4c:	4630      	mov	r0, r6
 8014f4e:	4798      	blx	r3
 8014f50:	2800      	cmp	r0, #0
 8014f52:	d081      	beq.n	8014e58 <__svfiscanf_r+0x150>
 8014f54:	e7b6      	b.n	8014ec4 <__svfiscanf_r+0x1bc>
 8014f56:	2b04      	cmp	r3, #4
 8014f58:	dc06      	bgt.n	8014f68 <__svfiscanf_r+0x260>
 8014f5a:	466b      	mov	r3, sp
 8014f5c:	4622      	mov	r2, r4
 8014f5e:	a941      	add	r1, sp, #260	; 0x104
 8014f60:	4630      	mov	r0, r6
 8014f62:	f000 fa8f 	bl	8015484 <_scanf_i>
 8014f66:	e788      	b.n	8014e7a <__svfiscanf_r+0x172>
 8014f68:	4b0e      	ldr	r3, [pc, #56]	; (8014fa4 <__svfiscanf_r+0x29c>)
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	f43f aefc 	beq.w	8014d68 <__svfiscanf_r+0x60>
 8014f70:	466b      	mov	r3, sp
 8014f72:	4622      	mov	r2, r4
 8014f74:	a941      	add	r1, sp, #260	; 0x104
 8014f76:	4630      	mov	r0, r6
 8014f78:	f000 f83e 	bl	8014ff8 <_scanf_float>
 8014f7c:	e77d      	b.n	8014e7a <__svfiscanf_r+0x172>
 8014f7e:	89a3      	ldrh	r3, [r4, #12]
 8014f80:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014f84:	bf18      	it	ne
 8014f86:	f04f 30ff 	movne.w	r0, #4294967295
 8014f8a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8014f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f92:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014f94:	e7f9      	b.n	8014f8a <__svfiscanf_r+0x282>
 8014f96:	bf00      	nop
 8014f98:	08016d51 	.word	0x08016d51
 8014f9c:	08015a5d 	.word	0x08015a5d
 8014fa0:	0801948e 	.word	0x0801948e
 8014fa4:	08014ff9 	.word	0x08014ff9

08014fa8 <_vfiscanf_r>:
 8014fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fac:	460c      	mov	r4, r1
 8014fae:	4616      	mov	r6, r2
 8014fb0:	461f      	mov	r7, r3
 8014fb2:	4605      	mov	r5, r0
 8014fb4:	b118      	cbz	r0, 8014fbe <_vfiscanf_r+0x16>
 8014fb6:	6983      	ldr	r3, [r0, #24]
 8014fb8:	b90b      	cbnz	r3, 8014fbe <_vfiscanf_r+0x16>
 8014fba:	f7fe ff1f 	bl	8013dfc <__sinit>
 8014fbe:	4b0b      	ldr	r3, [pc, #44]	; (8014fec <_vfiscanf_r+0x44>)
 8014fc0:	429c      	cmp	r4, r3
 8014fc2:	d108      	bne.n	8014fd6 <_vfiscanf_r+0x2e>
 8014fc4:	686c      	ldr	r4, [r5, #4]
 8014fc6:	463b      	mov	r3, r7
 8014fc8:	4632      	mov	r2, r6
 8014fca:	4621      	mov	r1, r4
 8014fcc:	4628      	mov	r0, r5
 8014fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014fd2:	f7ff be99 	b.w	8014d08 <__svfiscanf_r>
 8014fd6:	4b06      	ldr	r3, [pc, #24]	; (8014ff0 <_vfiscanf_r+0x48>)
 8014fd8:	429c      	cmp	r4, r3
 8014fda:	d101      	bne.n	8014fe0 <_vfiscanf_r+0x38>
 8014fdc:	68ac      	ldr	r4, [r5, #8]
 8014fde:	e7f2      	b.n	8014fc6 <_vfiscanf_r+0x1e>
 8014fe0:	4b04      	ldr	r3, [pc, #16]	; (8014ff4 <_vfiscanf_r+0x4c>)
 8014fe2:	429c      	cmp	r4, r3
 8014fe4:	bf08      	it	eq
 8014fe6:	68ec      	ldreq	r4, [r5, #12]
 8014fe8:	e7ed      	b.n	8014fc6 <_vfiscanf_r+0x1e>
 8014fea:	bf00      	nop
 8014fec:	08019444 	.word	0x08019444
 8014ff0:	08019464 	.word	0x08019464
 8014ff4:	08019424 	.word	0x08019424

08014ff8 <_scanf_float>:
 8014ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ffc:	469a      	mov	sl, r3
 8014ffe:	688b      	ldr	r3, [r1, #8]
 8015000:	4616      	mov	r6, r2
 8015002:	1e5a      	subs	r2, r3, #1
 8015004:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015008:	b087      	sub	sp, #28
 801500a:	bf83      	ittte	hi
 801500c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015010:	189b      	addhi	r3, r3, r2
 8015012:	9301      	strhi	r3, [sp, #4]
 8015014:	2300      	movls	r3, #0
 8015016:	bf86      	itte	hi
 8015018:	f240 135d 	movwhi	r3, #349	; 0x15d
 801501c:	608b      	strhi	r3, [r1, #8]
 801501e:	9301      	strls	r3, [sp, #4]
 8015020:	680b      	ldr	r3, [r1, #0]
 8015022:	4688      	mov	r8, r1
 8015024:	f04f 0b00 	mov.w	fp, #0
 8015028:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801502c:	f848 3b1c 	str.w	r3, [r8], #28
 8015030:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015034:	4607      	mov	r7, r0
 8015036:	460c      	mov	r4, r1
 8015038:	4645      	mov	r5, r8
 801503a:	465a      	mov	r2, fp
 801503c:	46d9      	mov	r9, fp
 801503e:	f8cd b008 	str.w	fp, [sp, #8]
 8015042:	68a1      	ldr	r1, [r4, #8]
 8015044:	b181      	cbz	r1, 8015068 <_scanf_float+0x70>
 8015046:	6833      	ldr	r3, [r6, #0]
 8015048:	781b      	ldrb	r3, [r3, #0]
 801504a:	2b49      	cmp	r3, #73	; 0x49
 801504c:	d071      	beq.n	8015132 <_scanf_float+0x13a>
 801504e:	d84d      	bhi.n	80150ec <_scanf_float+0xf4>
 8015050:	2b39      	cmp	r3, #57	; 0x39
 8015052:	d840      	bhi.n	80150d6 <_scanf_float+0xde>
 8015054:	2b31      	cmp	r3, #49	; 0x31
 8015056:	f080 8088 	bcs.w	801516a <_scanf_float+0x172>
 801505a:	2b2d      	cmp	r3, #45	; 0x2d
 801505c:	f000 8090 	beq.w	8015180 <_scanf_float+0x188>
 8015060:	d815      	bhi.n	801508e <_scanf_float+0x96>
 8015062:	2b2b      	cmp	r3, #43	; 0x2b
 8015064:	f000 808c 	beq.w	8015180 <_scanf_float+0x188>
 8015068:	f1b9 0f00 	cmp.w	r9, #0
 801506c:	d003      	beq.n	8015076 <_scanf_float+0x7e>
 801506e:	6823      	ldr	r3, [r4, #0]
 8015070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015074:	6023      	str	r3, [r4, #0]
 8015076:	3a01      	subs	r2, #1
 8015078:	2a01      	cmp	r2, #1
 801507a:	f200 80ea 	bhi.w	8015252 <_scanf_float+0x25a>
 801507e:	4545      	cmp	r5, r8
 8015080:	f200 80dc 	bhi.w	801523c <_scanf_float+0x244>
 8015084:	2601      	movs	r6, #1
 8015086:	4630      	mov	r0, r6
 8015088:	b007      	add	sp, #28
 801508a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801508e:	2b2e      	cmp	r3, #46	; 0x2e
 8015090:	f000 809f 	beq.w	80151d2 <_scanf_float+0x1da>
 8015094:	2b30      	cmp	r3, #48	; 0x30
 8015096:	d1e7      	bne.n	8015068 <_scanf_float+0x70>
 8015098:	6820      	ldr	r0, [r4, #0]
 801509a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801509e:	d064      	beq.n	801516a <_scanf_float+0x172>
 80150a0:	9b01      	ldr	r3, [sp, #4]
 80150a2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80150a6:	6020      	str	r0, [r4, #0]
 80150a8:	f109 0901 	add.w	r9, r9, #1
 80150ac:	b11b      	cbz	r3, 80150b6 <_scanf_float+0xbe>
 80150ae:	3b01      	subs	r3, #1
 80150b0:	3101      	adds	r1, #1
 80150b2:	9301      	str	r3, [sp, #4]
 80150b4:	60a1      	str	r1, [r4, #8]
 80150b6:	68a3      	ldr	r3, [r4, #8]
 80150b8:	3b01      	subs	r3, #1
 80150ba:	60a3      	str	r3, [r4, #8]
 80150bc:	6923      	ldr	r3, [r4, #16]
 80150be:	3301      	adds	r3, #1
 80150c0:	6123      	str	r3, [r4, #16]
 80150c2:	6873      	ldr	r3, [r6, #4]
 80150c4:	3b01      	subs	r3, #1
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	6073      	str	r3, [r6, #4]
 80150ca:	f340 80ac 	ble.w	8015226 <_scanf_float+0x22e>
 80150ce:	6833      	ldr	r3, [r6, #0]
 80150d0:	3301      	adds	r3, #1
 80150d2:	6033      	str	r3, [r6, #0]
 80150d4:	e7b5      	b.n	8015042 <_scanf_float+0x4a>
 80150d6:	2b45      	cmp	r3, #69	; 0x45
 80150d8:	f000 8085 	beq.w	80151e6 <_scanf_float+0x1ee>
 80150dc:	2b46      	cmp	r3, #70	; 0x46
 80150de:	d06a      	beq.n	80151b6 <_scanf_float+0x1be>
 80150e0:	2b41      	cmp	r3, #65	; 0x41
 80150e2:	d1c1      	bne.n	8015068 <_scanf_float+0x70>
 80150e4:	2a01      	cmp	r2, #1
 80150e6:	d1bf      	bne.n	8015068 <_scanf_float+0x70>
 80150e8:	2202      	movs	r2, #2
 80150ea:	e046      	b.n	801517a <_scanf_float+0x182>
 80150ec:	2b65      	cmp	r3, #101	; 0x65
 80150ee:	d07a      	beq.n	80151e6 <_scanf_float+0x1ee>
 80150f0:	d818      	bhi.n	8015124 <_scanf_float+0x12c>
 80150f2:	2b54      	cmp	r3, #84	; 0x54
 80150f4:	d066      	beq.n	80151c4 <_scanf_float+0x1cc>
 80150f6:	d811      	bhi.n	801511c <_scanf_float+0x124>
 80150f8:	2b4e      	cmp	r3, #78	; 0x4e
 80150fa:	d1b5      	bne.n	8015068 <_scanf_float+0x70>
 80150fc:	2a00      	cmp	r2, #0
 80150fe:	d146      	bne.n	801518e <_scanf_float+0x196>
 8015100:	f1b9 0f00 	cmp.w	r9, #0
 8015104:	d145      	bne.n	8015192 <_scanf_float+0x19a>
 8015106:	6821      	ldr	r1, [r4, #0]
 8015108:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801510c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015110:	d13f      	bne.n	8015192 <_scanf_float+0x19a>
 8015112:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015116:	6021      	str	r1, [r4, #0]
 8015118:	2201      	movs	r2, #1
 801511a:	e02e      	b.n	801517a <_scanf_float+0x182>
 801511c:	2b59      	cmp	r3, #89	; 0x59
 801511e:	d01e      	beq.n	801515e <_scanf_float+0x166>
 8015120:	2b61      	cmp	r3, #97	; 0x61
 8015122:	e7de      	b.n	80150e2 <_scanf_float+0xea>
 8015124:	2b6e      	cmp	r3, #110	; 0x6e
 8015126:	d0e9      	beq.n	80150fc <_scanf_float+0x104>
 8015128:	d815      	bhi.n	8015156 <_scanf_float+0x15e>
 801512a:	2b66      	cmp	r3, #102	; 0x66
 801512c:	d043      	beq.n	80151b6 <_scanf_float+0x1be>
 801512e:	2b69      	cmp	r3, #105	; 0x69
 8015130:	d19a      	bne.n	8015068 <_scanf_float+0x70>
 8015132:	f1bb 0f00 	cmp.w	fp, #0
 8015136:	d138      	bne.n	80151aa <_scanf_float+0x1b2>
 8015138:	f1b9 0f00 	cmp.w	r9, #0
 801513c:	d197      	bne.n	801506e <_scanf_float+0x76>
 801513e:	6821      	ldr	r1, [r4, #0]
 8015140:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015144:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015148:	d195      	bne.n	8015076 <_scanf_float+0x7e>
 801514a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801514e:	6021      	str	r1, [r4, #0]
 8015150:	f04f 0b01 	mov.w	fp, #1
 8015154:	e011      	b.n	801517a <_scanf_float+0x182>
 8015156:	2b74      	cmp	r3, #116	; 0x74
 8015158:	d034      	beq.n	80151c4 <_scanf_float+0x1cc>
 801515a:	2b79      	cmp	r3, #121	; 0x79
 801515c:	d184      	bne.n	8015068 <_scanf_float+0x70>
 801515e:	f1bb 0f07 	cmp.w	fp, #7
 8015162:	d181      	bne.n	8015068 <_scanf_float+0x70>
 8015164:	f04f 0b08 	mov.w	fp, #8
 8015168:	e007      	b.n	801517a <_scanf_float+0x182>
 801516a:	eb12 0f0b 	cmn.w	r2, fp
 801516e:	f47f af7b 	bne.w	8015068 <_scanf_float+0x70>
 8015172:	6821      	ldr	r1, [r4, #0]
 8015174:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015178:	6021      	str	r1, [r4, #0]
 801517a:	702b      	strb	r3, [r5, #0]
 801517c:	3501      	adds	r5, #1
 801517e:	e79a      	b.n	80150b6 <_scanf_float+0xbe>
 8015180:	6821      	ldr	r1, [r4, #0]
 8015182:	0608      	lsls	r0, r1, #24
 8015184:	f57f af70 	bpl.w	8015068 <_scanf_float+0x70>
 8015188:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801518c:	e7f4      	b.n	8015178 <_scanf_float+0x180>
 801518e:	2a02      	cmp	r2, #2
 8015190:	d047      	beq.n	8015222 <_scanf_float+0x22a>
 8015192:	f1bb 0f01 	cmp.w	fp, #1
 8015196:	d003      	beq.n	80151a0 <_scanf_float+0x1a8>
 8015198:	f1bb 0f04 	cmp.w	fp, #4
 801519c:	f47f af64 	bne.w	8015068 <_scanf_float+0x70>
 80151a0:	f10b 0b01 	add.w	fp, fp, #1
 80151a4:	fa5f fb8b 	uxtb.w	fp, fp
 80151a8:	e7e7      	b.n	801517a <_scanf_float+0x182>
 80151aa:	f1bb 0f03 	cmp.w	fp, #3
 80151ae:	d0f7      	beq.n	80151a0 <_scanf_float+0x1a8>
 80151b0:	f1bb 0f05 	cmp.w	fp, #5
 80151b4:	e7f2      	b.n	801519c <_scanf_float+0x1a4>
 80151b6:	f1bb 0f02 	cmp.w	fp, #2
 80151ba:	f47f af55 	bne.w	8015068 <_scanf_float+0x70>
 80151be:	f04f 0b03 	mov.w	fp, #3
 80151c2:	e7da      	b.n	801517a <_scanf_float+0x182>
 80151c4:	f1bb 0f06 	cmp.w	fp, #6
 80151c8:	f47f af4e 	bne.w	8015068 <_scanf_float+0x70>
 80151cc:	f04f 0b07 	mov.w	fp, #7
 80151d0:	e7d3      	b.n	801517a <_scanf_float+0x182>
 80151d2:	6821      	ldr	r1, [r4, #0]
 80151d4:	0588      	lsls	r0, r1, #22
 80151d6:	f57f af47 	bpl.w	8015068 <_scanf_float+0x70>
 80151da:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80151de:	6021      	str	r1, [r4, #0]
 80151e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80151e4:	e7c9      	b.n	801517a <_scanf_float+0x182>
 80151e6:	6821      	ldr	r1, [r4, #0]
 80151e8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80151ec:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80151f0:	d006      	beq.n	8015200 <_scanf_float+0x208>
 80151f2:	0548      	lsls	r0, r1, #21
 80151f4:	f57f af38 	bpl.w	8015068 <_scanf_float+0x70>
 80151f8:	f1b9 0f00 	cmp.w	r9, #0
 80151fc:	f43f af3b 	beq.w	8015076 <_scanf_float+0x7e>
 8015200:	0588      	lsls	r0, r1, #22
 8015202:	bf58      	it	pl
 8015204:	9802      	ldrpl	r0, [sp, #8]
 8015206:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801520a:	bf58      	it	pl
 801520c:	eba9 0000 	subpl.w	r0, r9, r0
 8015210:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015214:	bf58      	it	pl
 8015216:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801521a:	6021      	str	r1, [r4, #0]
 801521c:	f04f 0900 	mov.w	r9, #0
 8015220:	e7ab      	b.n	801517a <_scanf_float+0x182>
 8015222:	2203      	movs	r2, #3
 8015224:	e7a9      	b.n	801517a <_scanf_float+0x182>
 8015226:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801522a:	9205      	str	r2, [sp, #20]
 801522c:	4631      	mov	r1, r6
 801522e:	4638      	mov	r0, r7
 8015230:	4798      	blx	r3
 8015232:	9a05      	ldr	r2, [sp, #20]
 8015234:	2800      	cmp	r0, #0
 8015236:	f43f af04 	beq.w	8015042 <_scanf_float+0x4a>
 801523a:	e715      	b.n	8015068 <_scanf_float+0x70>
 801523c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015240:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015244:	4632      	mov	r2, r6
 8015246:	4638      	mov	r0, r7
 8015248:	4798      	blx	r3
 801524a:	6923      	ldr	r3, [r4, #16]
 801524c:	3b01      	subs	r3, #1
 801524e:	6123      	str	r3, [r4, #16]
 8015250:	e715      	b.n	801507e <_scanf_float+0x86>
 8015252:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015256:	2b06      	cmp	r3, #6
 8015258:	d80a      	bhi.n	8015270 <_scanf_float+0x278>
 801525a:	f1bb 0f02 	cmp.w	fp, #2
 801525e:	d968      	bls.n	8015332 <_scanf_float+0x33a>
 8015260:	f1ab 0b03 	sub.w	fp, fp, #3
 8015264:	fa5f fb8b 	uxtb.w	fp, fp
 8015268:	eba5 0b0b 	sub.w	fp, r5, fp
 801526c:	455d      	cmp	r5, fp
 801526e:	d14b      	bne.n	8015308 <_scanf_float+0x310>
 8015270:	6823      	ldr	r3, [r4, #0]
 8015272:	05da      	lsls	r2, r3, #23
 8015274:	d51f      	bpl.n	80152b6 <_scanf_float+0x2be>
 8015276:	055b      	lsls	r3, r3, #21
 8015278:	d468      	bmi.n	801534c <_scanf_float+0x354>
 801527a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801527e:	6923      	ldr	r3, [r4, #16]
 8015280:	2965      	cmp	r1, #101	; 0x65
 8015282:	f103 33ff 	add.w	r3, r3, #4294967295
 8015286:	f105 3bff 	add.w	fp, r5, #4294967295
 801528a:	6123      	str	r3, [r4, #16]
 801528c:	d00d      	beq.n	80152aa <_scanf_float+0x2b2>
 801528e:	2945      	cmp	r1, #69	; 0x45
 8015290:	d00b      	beq.n	80152aa <_scanf_float+0x2b2>
 8015292:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015296:	4632      	mov	r2, r6
 8015298:	4638      	mov	r0, r7
 801529a:	4798      	blx	r3
 801529c:	6923      	ldr	r3, [r4, #16]
 801529e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80152a2:	3b01      	subs	r3, #1
 80152a4:	f1a5 0b02 	sub.w	fp, r5, #2
 80152a8:	6123      	str	r3, [r4, #16]
 80152aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80152ae:	4632      	mov	r2, r6
 80152b0:	4638      	mov	r0, r7
 80152b2:	4798      	blx	r3
 80152b4:	465d      	mov	r5, fp
 80152b6:	6826      	ldr	r6, [r4, #0]
 80152b8:	f016 0610 	ands.w	r6, r6, #16
 80152bc:	d17a      	bne.n	80153b4 <_scanf_float+0x3bc>
 80152be:	702e      	strb	r6, [r5, #0]
 80152c0:	6823      	ldr	r3, [r4, #0]
 80152c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80152c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80152ca:	d142      	bne.n	8015352 <_scanf_float+0x35a>
 80152cc:	9b02      	ldr	r3, [sp, #8]
 80152ce:	eba9 0303 	sub.w	r3, r9, r3
 80152d2:	425a      	negs	r2, r3
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d149      	bne.n	801536c <_scanf_float+0x374>
 80152d8:	2200      	movs	r2, #0
 80152da:	4641      	mov	r1, r8
 80152dc:	4638      	mov	r0, r7
 80152de:	f001 fbd3 	bl	8016a88 <_strtod_r>
 80152e2:	6825      	ldr	r5, [r4, #0]
 80152e4:	f8da 3000 	ldr.w	r3, [sl]
 80152e8:	f015 0f02 	tst.w	r5, #2
 80152ec:	f103 0204 	add.w	r2, r3, #4
 80152f0:	ec59 8b10 	vmov	r8, r9, d0
 80152f4:	f8ca 2000 	str.w	r2, [sl]
 80152f8:	d043      	beq.n	8015382 <_scanf_float+0x38a>
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	e9c3 8900 	strd	r8, r9, [r3]
 8015300:	68e3      	ldr	r3, [r4, #12]
 8015302:	3301      	adds	r3, #1
 8015304:	60e3      	str	r3, [r4, #12]
 8015306:	e6be      	b.n	8015086 <_scanf_float+0x8e>
 8015308:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801530c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015310:	4632      	mov	r2, r6
 8015312:	4638      	mov	r0, r7
 8015314:	4798      	blx	r3
 8015316:	6923      	ldr	r3, [r4, #16]
 8015318:	3b01      	subs	r3, #1
 801531a:	6123      	str	r3, [r4, #16]
 801531c:	e7a6      	b.n	801526c <_scanf_float+0x274>
 801531e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015322:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015326:	4632      	mov	r2, r6
 8015328:	4638      	mov	r0, r7
 801532a:	4798      	blx	r3
 801532c:	6923      	ldr	r3, [r4, #16]
 801532e:	3b01      	subs	r3, #1
 8015330:	6123      	str	r3, [r4, #16]
 8015332:	4545      	cmp	r5, r8
 8015334:	d8f3      	bhi.n	801531e <_scanf_float+0x326>
 8015336:	e6a5      	b.n	8015084 <_scanf_float+0x8c>
 8015338:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801533c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015340:	4632      	mov	r2, r6
 8015342:	4638      	mov	r0, r7
 8015344:	4798      	blx	r3
 8015346:	6923      	ldr	r3, [r4, #16]
 8015348:	3b01      	subs	r3, #1
 801534a:	6123      	str	r3, [r4, #16]
 801534c:	4545      	cmp	r5, r8
 801534e:	d8f3      	bhi.n	8015338 <_scanf_float+0x340>
 8015350:	e698      	b.n	8015084 <_scanf_float+0x8c>
 8015352:	9b03      	ldr	r3, [sp, #12]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d0bf      	beq.n	80152d8 <_scanf_float+0x2e0>
 8015358:	9904      	ldr	r1, [sp, #16]
 801535a:	230a      	movs	r3, #10
 801535c:	4632      	mov	r2, r6
 801535e:	3101      	adds	r1, #1
 8015360:	4638      	mov	r0, r7
 8015362:	f001 fc1d 	bl	8016ba0 <_strtol_r>
 8015366:	9b03      	ldr	r3, [sp, #12]
 8015368:	9d04      	ldr	r5, [sp, #16]
 801536a:	1ac2      	subs	r2, r0, r3
 801536c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015370:	429d      	cmp	r5, r3
 8015372:	bf28      	it	cs
 8015374:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015378:	490f      	ldr	r1, [pc, #60]	; (80153b8 <_scanf_float+0x3c0>)
 801537a:	4628      	mov	r0, r5
 801537c:	f000 fd10 	bl	8015da0 <siprintf>
 8015380:	e7aa      	b.n	80152d8 <_scanf_float+0x2e0>
 8015382:	f015 0504 	ands.w	r5, r5, #4
 8015386:	d1b8      	bne.n	80152fa <_scanf_float+0x302>
 8015388:	681f      	ldr	r7, [r3, #0]
 801538a:	ee10 2a10 	vmov	r2, s0
 801538e:	464b      	mov	r3, r9
 8015390:	ee10 0a10 	vmov	r0, s0
 8015394:	4649      	mov	r1, r9
 8015396:	f7f3 fb01 	bl	800899c <__aeabi_dcmpun>
 801539a:	b128      	cbz	r0, 80153a8 <_scanf_float+0x3b0>
 801539c:	4628      	mov	r0, r5
 801539e:	f000 fcf9 	bl	8015d94 <nanf>
 80153a2:	ed87 0a00 	vstr	s0, [r7]
 80153a6:	e7ab      	b.n	8015300 <_scanf_float+0x308>
 80153a8:	4640      	mov	r0, r8
 80153aa:	4649      	mov	r1, r9
 80153ac:	f7f3 fb54 	bl	8008a58 <__aeabi_d2f>
 80153b0:	6038      	str	r0, [r7, #0]
 80153b2:	e7a5      	b.n	8015300 <_scanf_float+0x308>
 80153b4:	2600      	movs	r6, #0
 80153b6:	e666      	b.n	8015086 <_scanf_float+0x8e>
 80153b8:	080194cb 	.word	0x080194cb

080153bc <_scanf_chars>:
 80153bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153c0:	4615      	mov	r5, r2
 80153c2:	688a      	ldr	r2, [r1, #8]
 80153c4:	4680      	mov	r8, r0
 80153c6:	460c      	mov	r4, r1
 80153c8:	b932      	cbnz	r2, 80153d8 <_scanf_chars+0x1c>
 80153ca:	698a      	ldr	r2, [r1, #24]
 80153cc:	2a00      	cmp	r2, #0
 80153ce:	bf14      	ite	ne
 80153d0:	f04f 32ff 	movne.w	r2, #4294967295
 80153d4:	2201      	moveq	r2, #1
 80153d6:	608a      	str	r2, [r1, #8]
 80153d8:	6822      	ldr	r2, [r4, #0]
 80153da:	06d1      	lsls	r1, r2, #27
 80153dc:	bf5f      	itttt	pl
 80153de:	681a      	ldrpl	r2, [r3, #0]
 80153e0:	1d11      	addpl	r1, r2, #4
 80153e2:	6019      	strpl	r1, [r3, #0]
 80153e4:	6817      	ldrpl	r7, [r2, #0]
 80153e6:	2600      	movs	r6, #0
 80153e8:	69a3      	ldr	r3, [r4, #24]
 80153ea:	b1db      	cbz	r3, 8015424 <_scanf_chars+0x68>
 80153ec:	2b01      	cmp	r3, #1
 80153ee:	d107      	bne.n	8015400 <_scanf_chars+0x44>
 80153f0:	682b      	ldr	r3, [r5, #0]
 80153f2:	6962      	ldr	r2, [r4, #20]
 80153f4:	781b      	ldrb	r3, [r3, #0]
 80153f6:	5cd3      	ldrb	r3, [r2, r3]
 80153f8:	b9a3      	cbnz	r3, 8015424 <_scanf_chars+0x68>
 80153fa:	2e00      	cmp	r6, #0
 80153fc:	d132      	bne.n	8015464 <_scanf_chars+0xa8>
 80153fe:	e006      	b.n	801540e <_scanf_chars+0x52>
 8015400:	2b02      	cmp	r3, #2
 8015402:	d007      	beq.n	8015414 <_scanf_chars+0x58>
 8015404:	2e00      	cmp	r6, #0
 8015406:	d12d      	bne.n	8015464 <_scanf_chars+0xa8>
 8015408:	69a3      	ldr	r3, [r4, #24]
 801540a:	2b01      	cmp	r3, #1
 801540c:	d12a      	bne.n	8015464 <_scanf_chars+0xa8>
 801540e:	2001      	movs	r0, #1
 8015410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015414:	f002 ff80 	bl	8018318 <__locale_ctype_ptr>
 8015418:	682b      	ldr	r3, [r5, #0]
 801541a:	781b      	ldrb	r3, [r3, #0]
 801541c:	4418      	add	r0, r3
 801541e:	7843      	ldrb	r3, [r0, #1]
 8015420:	071b      	lsls	r3, r3, #28
 8015422:	d4ef      	bmi.n	8015404 <_scanf_chars+0x48>
 8015424:	6823      	ldr	r3, [r4, #0]
 8015426:	06da      	lsls	r2, r3, #27
 8015428:	bf5e      	ittt	pl
 801542a:	682b      	ldrpl	r3, [r5, #0]
 801542c:	781b      	ldrbpl	r3, [r3, #0]
 801542e:	703b      	strbpl	r3, [r7, #0]
 8015430:	682a      	ldr	r2, [r5, #0]
 8015432:	686b      	ldr	r3, [r5, #4]
 8015434:	f102 0201 	add.w	r2, r2, #1
 8015438:	602a      	str	r2, [r5, #0]
 801543a:	68a2      	ldr	r2, [r4, #8]
 801543c:	f103 33ff 	add.w	r3, r3, #4294967295
 8015440:	f102 32ff 	add.w	r2, r2, #4294967295
 8015444:	606b      	str	r3, [r5, #4]
 8015446:	f106 0601 	add.w	r6, r6, #1
 801544a:	bf58      	it	pl
 801544c:	3701      	addpl	r7, #1
 801544e:	60a2      	str	r2, [r4, #8]
 8015450:	b142      	cbz	r2, 8015464 <_scanf_chars+0xa8>
 8015452:	2b00      	cmp	r3, #0
 8015454:	dcc8      	bgt.n	80153e8 <_scanf_chars+0x2c>
 8015456:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801545a:	4629      	mov	r1, r5
 801545c:	4640      	mov	r0, r8
 801545e:	4798      	blx	r3
 8015460:	2800      	cmp	r0, #0
 8015462:	d0c1      	beq.n	80153e8 <_scanf_chars+0x2c>
 8015464:	6823      	ldr	r3, [r4, #0]
 8015466:	f013 0310 	ands.w	r3, r3, #16
 801546a:	d105      	bne.n	8015478 <_scanf_chars+0xbc>
 801546c:	68e2      	ldr	r2, [r4, #12]
 801546e:	3201      	adds	r2, #1
 8015470:	60e2      	str	r2, [r4, #12]
 8015472:	69a2      	ldr	r2, [r4, #24]
 8015474:	b102      	cbz	r2, 8015478 <_scanf_chars+0xbc>
 8015476:	703b      	strb	r3, [r7, #0]
 8015478:	6923      	ldr	r3, [r4, #16]
 801547a:	441e      	add	r6, r3
 801547c:	6126      	str	r6, [r4, #16]
 801547e:	2000      	movs	r0, #0
 8015480:	e7c6      	b.n	8015410 <_scanf_chars+0x54>
	...

08015484 <_scanf_i>:
 8015484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015488:	469a      	mov	sl, r3
 801548a:	4b74      	ldr	r3, [pc, #464]	; (801565c <_scanf_i+0x1d8>)
 801548c:	460c      	mov	r4, r1
 801548e:	4683      	mov	fp, r0
 8015490:	4616      	mov	r6, r2
 8015492:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015496:	b087      	sub	sp, #28
 8015498:	ab03      	add	r3, sp, #12
 801549a:	68a7      	ldr	r7, [r4, #8]
 801549c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80154a0:	4b6f      	ldr	r3, [pc, #444]	; (8015660 <_scanf_i+0x1dc>)
 80154a2:	69a1      	ldr	r1, [r4, #24]
 80154a4:	4a6f      	ldr	r2, [pc, #444]	; (8015664 <_scanf_i+0x1e0>)
 80154a6:	2903      	cmp	r1, #3
 80154a8:	bf08      	it	eq
 80154aa:	461a      	moveq	r2, r3
 80154ac:	1e7b      	subs	r3, r7, #1
 80154ae:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80154b2:	bf84      	itt	hi
 80154b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80154b8:	60a3      	strhi	r3, [r4, #8]
 80154ba:	6823      	ldr	r3, [r4, #0]
 80154bc:	9200      	str	r2, [sp, #0]
 80154be:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80154c2:	bf88      	it	hi
 80154c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80154c8:	f104 091c 	add.w	r9, r4, #28
 80154cc:	6023      	str	r3, [r4, #0]
 80154ce:	bf8c      	ite	hi
 80154d0:	197f      	addhi	r7, r7, r5
 80154d2:	2700      	movls	r7, #0
 80154d4:	464b      	mov	r3, r9
 80154d6:	f04f 0800 	mov.w	r8, #0
 80154da:	9301      	str	r3, [sp, #4]
 80154dc:	6831      	ldr	r1, [r6, #0]
 80154de:	ab03      	add	r3, sp, #12
 80154e0:	2202      	movs	r2, #2
 80154e2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80154e6:	7809      	ldrb	r1, [r1, #0]
 80154e8:	f7f2 fdb2 	bl	8008050 <memchr>
 80154ec:	9b01      	ldr	r3, [sp, #4]
 80154ee:	b330      	cbz	r0, 801553e <_scanf_i+0xba>
 80154f0:	f1b8 0f01 	cmp.w	r8, #1
 80154f4:	d15a      	bne.n	80155ac <_scanf_i+0x128>
 80154f6:	6862      	ldr	r2, [r4, #4]
 80154f8:	b92a      	cbnz	r2, 8015506 <_scanf_i+0x82>
 80154fa:	6822      	ldr	r2, [r4, #0]
 80154fc:	2108      	movs	r1, #8
 80154fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015502:	6061      	str	r1, [r4, #4]
 8015504:	6022      	str	r2, [r4, #0]
 8015506:	6822      	ldr	r2, [r4, #0]
 8015508:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801550c:	6022      	str	r2, [r4, #0]
 801550e:	68a2      	ldr	r2, [r4, #8]
 8015510:	1e51      	subs	r1, r2, #1
 8015512:	60a1      	str	r1, [r4, #8]
 8015514:	b19a      	cbz	r2, 801553e <_scanf_i+0xba>
 8015516:	6832      	ldr	r2, [r6, #0]
 8015518:	1c51      	adds	r1, r2, #1
 801551a:	6031      	str	r1, [r6, #0]
 801551c:	7812      	ldrb	r2, [r2, #0]
 801551e:	701a      	strb	r2, [r3, #0]
 8015520:	1c5d      	adds	r5, r3, #1
 8015522:	6873      	ldr	r3, [r6, #4]
 8015524:	3b01      	subs	r3, #1
 8015526:	2b00      	cmp	r3, #0
 8015528:	6073      	str	r3, [r6, #4]
 801552a:	dc07      	bgt.n	801553c <_scanf_i+0xb8>
 801552c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015530:	4631      	mov	r1, r6
 8015532:	4658      	mov	r0, fp
 8015534:	4798      	blx	r3
 8015536:	2800      	cmp	r0, #0
 8015538:	f040 8086 	bne.w	8015648 <_scanf_i+0x1c4>
 801553c:	462b      	mov	r3, r5
 801553e:	f108 0801 	add.w	r8, r8, #1
 8015542:	f1b8 0f03 	cmp.w	r8, #3
 8015546:	d1c8      	bne.n	80154da <_scanf_i+0x56>
 8015548:	6862      	ldr	r2, [r4, #4]
 801554a:	b90a      	cbnz	r2, 8015550 <_scanf_i+0xcc>
 801554c:	220a      	movs	r2, #10
 801554e:	6062      	str	r2, [r4, #4]
 8015550:	6862      	ldr	r2, [r4, #4]
 8015552:	4945      	ldr	r1, [pc, #276]	; (8015668 <_scanf_i+0x1e4>)
 8015554:	6960      	ldr	r0, [r4, #20]
 8015556:	9301      	str	r3, [sp, #4]
 8015558:	1a89      	subs	r1, r1, r2
 801555a:	f000 fb33 	bl	8015bc4 <__sccl>
 801555e:	9b01      	ldr	r3, [sp, #4]
 8015560:	f04f 0800 	mov.w	r8, #0
 8015564:	461d      	mov	r5, r3
 8015566:	68a3      	ldr	r3, [r4, #8]
 8015568:	6822      	ldr	r2, [r4, #0]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d03a      	beq.n	80155e4 <_scanf_i+0x160>
 801556e:	6831      	ldr	r1, [r6, #0]
 8015570:	6960      	ldr	r0, [r4, #20]
 8015572:	f891 c000 	ldrb.w	ip, [r1]
 8015576:	f810 000c 	ldrb.w	r0, [r0, ip]
 801557a:	2800      	cmp	r0, #0
 801557c:	d032      	beq.n	80155e4 <_scanf_i+0x160>
 801557e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8015582:	d121      	bne.n	80155c8 <_scanf_i+0x144>
 8015584:	0510      	lsls	r0, r2, #20
 8015586:	d51f      	bpl.n	80155c8 <_scanf_i+0x144>
 8015588:	f108 0801 	add.w	r8, r8, #1
 801558c:	b117      	cbz	r7, 8015594 <_scanf_i+0x110>
 801558e:	3301      	adds	r3, #1
 8015590:	3f01      	subs	r7, #1
 8015592:	60a3      	str	r3, [r4, #8]
 8015594:	6873      	ldr	r3, [r6, #4]
 8015596:	3b01      	subs	r3, #1
 8015598:	2b00      	cmp	r3, #0
 801559a:	6073      	str	r3, [r6, #4]
 801559c:	dd1b      	ble.n	80155d6 <_scanf_i+0x152>
 801559e:	6833      	ldr	r3, [r6, #0]
 80155a0:	3301      	adds	r3, #1
 80155a2:	6033      	str	r3, [r6, #0]
 80155a4:	68a3      	ldr	r3, [r4, #8]
 80155a6:	3b01      	subs	r3, #1
 80155a8:	60a3      	str	r3, [r4, #8]
 80155aa:	e7dc      	b.n	8015566 <_scanf_i+0xe2>
 80155ac:	f1b8 0f02 	cmp.w	r8, #2
 80155b0:	d1ad      	bne.n	801550e <_scanf_i+0x8a>
 80155b2:	6822      	ldr	r2, [r4, #0]
 80155b4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80155b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80155bc:	d1bf      	bne.n	801553e <_scanf_i+0xba>
 80155be:	2110      	movs	r1, #16
 80155c0:	6061      	str	r1, [r4, #4]
 80155c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80155c6:	e7a1      	b.n	801550c <_scanf_i+0x88>
 80155c8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80155cc:	6022      	str	r2, [r4, #0]
 80155ce:	780b      	ldrb	r3, [r1, #0]
 80155d0:	702b      	strb	r3, [r5, #0]
 80155d2:	3501      	adds	r5, #1
 80155d4:	e7de      	b.n	8015594 <_scanf_i+0x110>
 80155d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80155da:	4631      	mov	r1, r6
 80155dc:	4658      	mov	r0, fp
 80155de:	4798      	blx	r3
 80155e0:	2800      	cmp	r0, #0
 80155e2:	d0df      	beq.n	80155a4 <_scanf_i+0x120>
 80155e4:	6823      	ldr	r3, [r4, #0]
 80155e6:	05d9      	lsls	r1, r3, #23
 80155e8:	d50c      	bpl.n	8015604 <_scanf_i+0x180>
 80155ea:	454d      	cmp	r5, r9
 80155ec:	d908      	bls.n	8015600 <_scanf_i+0x17c>
 80155ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80155f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80155f6:	4632      	mov	r2, r6
 80155f8:	4658      	mov	r0, fp
 80155fa:	4798      	blx	r3
 80155fc:	1e6f      	subs	r7, r5, #1
 80155fe:	463d      	mov	r5, r7
 8015600:	454d      	cmp	r5, r9
 8015602:	d029      	beq.n	8015658 <_scanf_i+0x1d4>
 8015604:	6822      	ldr	r2, [r4, #0]
 8015606:	f012 0210 	ands.w	r2, r2, #16
 801560a:	d113      	bne.n	8015634 <_scanf_i+0x1b0>
 801560c:	702a      	strb	r2, [r5, #0]
 801560e:	6863      	ldr	r3, [r4, #4]
 8015610:	9e00      	ldr	r6, [sp, #0]
 8015612:	4649      	mov	r1, r9
 8015614:	4658      	mov	r0, fp
 8015616:	47b0      	blx	r6
 8015618:	f8da 3000 	ldr.w	r3, [sl]
 801561c:	6821      	ldr	r1, [r4, #0]
 801561e:	1d1a      	adds	r2, r3, #4
 8015620:	f8ca 2000 	str.w	r2, [sl]
 8015624:	f011 0f20 	tst.w	r1, #32
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	d010      	beq.n	801564e <_scanf_i+0x1ca>
 801562c:	6018      	str	r0, [r3, #0]
 801562e:	68e3      	ldr	r3, [r4, #12]
 8015630:	3301      	adds	r3, #1
 8015632:	60e3      	str	r3, [r4, #12]
 8015634:	eba5 0509 	sub.w	r5, r5, r9
 8015638:	44a8      	add	r8, r5
 801563a:	6925      	ldr	r5, [r4, #16]
 801563c:	4445      	add	r5, r8
 801563e:	6125      	str	r5, [r4, #16]
 8015640:	2000      	movs	r0, #0
 8015642:	b007      	add	sp, #28
 8015644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015648:	f04f 0800 	mov.w	r8, #0
 801564c:	e7ca      	b.n	80155e4 <_scanf_i+0x160>
 801564e:	07ca      	lsls	r2, r1, #31
 8015650:	bf4c      	ite	mi
 8015652:	8018      	strhmi	r0, [r3, #0]
 8015654:	6018      	strpl	r0, [r3, #0]
 8015656:	e7ea      	b.n	801562e <_scanf_i+0x1aa>
 8015658:	2001      	movs	r0, #1
 801565a:	e7f2      	b.n	8015642 <_scanf_i+0x1be>
 801565c:	08019008 	.word	0x08019008
 8015660:	08016ba1 	.word	0x08016ba1
 8015664:	08016cb9 	.word	0x08016cb9
 8015668:	080194e0 	.word	0x080194e0

0801566c <iprintf>:
 801566c:	b40f      	push	{r0, r1, r2, r3}
 801566e:	4b0a      	ldr	r3, [pc, #40]	; (8015698 <iprintf+0x2c>)
 8015670:	b513      	push	{r0, r1, r4, lr}
 8015672:	681c      	ldr	r4, [r3, #0]
 8015674:	b124      	cbz	r4, 8015680 <iprintf+0x14>
 8015676:	69a3      	ldr	r3, [r4, #24]
 8015678:	b913      	cbnz	r3, 8015680 <iprintf+0x14>
 801567a:	4620      	mov	r0, r4
 801567c:	f7fe fbbe 	bl	8013dfc <__sinit>
 8015680:	ab05      	add	r3, sp, #20
 8015682:	9a04      	ldr	r2, [sp, #16]
 8015684:	68a1      	ldr	r1, [r4, #8]
 8015686:	9301      	str	r3, [sp, #4]
 8015688:	4620      	mov	r0, r4
 801568a:	f7fe fdcb 	bl	8014224 <_vfiprintf_r>
 801568e:	b002      	add	sp, #8
 8015690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015694:	b004      	add	sp, #16
 8015696:	4770      	bx	lr
 8015698:	20000038 	.word	0x20000038

0801569c <putchar>:
 801569c:	b538      	push	{r3, r4, r5, lr}
 801569e:	4b08      	ldr	r3, [pc, #32]	; (80156c0 <putchar+0x24>)
 80156a0:	681c      	ldr	r4, [r3, #0]
 80156a2:	4605      	mov	r5, r0
 80156a4:	b124      	cbz	r4, 80156b0 <putchar+0x14>
 80156a6:	69a3      	ldr	r3, [r4, #24]
 80156a8:	b913      	cbnz	r3, 80156b0 <putchar+0x14>
 80156aa:	4620      	mov	r0, r4
 80156ac:	f7fe fba6 	bl	8013dfc <__sinit>
 80156b0:	68a2      	ldr	r2, [r4, #8]
 80156b2:	4629      	mov	r1, r5
 80156b4:	4620      	mov	r0, r4
 80156b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156ba:	f003 bc17 	b.w	8018eec <_putc_r>
 80156be:	bf00      	nop
 80156c0:	20000038 	.word	0x20000038

080156c4 <_puts_r>:
 80156c4:	b570      	push	{r4, r5, r6, lr}
 80156c6:	460e      	mov	r6, r1
 80156c8:	4605      	mov	r5, r0
 80156ca:	b118      	cbz	r0, 80156d4 <_puts_r+0x10>
 80156cc:	6983      	ldr	r3, [r0, #24]
 80156ce:	b90b      	cbnz	r3, 80156d4 <_puts_r+0x10>
 80156d0:	f7fe fb94 	bl	8013dfc <__sinit>
 80156d4:	69ab      	ldr	r3, [r5, #24]
 80156d6:	68ac      	ldr	r4, [r5, #8]
 80156d8:	b913      	cbnz	r3, 80156e0 <_puts_r+0x1c>
 80156da:	4628      	mov	r0, r5
 80156dc:	f7fe fb8e 	bl	8013dfc <__sinit>
 80156e0:	4b23      	ldr	r3, [pc, #140]	; (8015770 <_puts_r+0xac>)
 80156e2:	429c      	cmp	r4, r3
 80156e4:	d117      	bne.n	8015716 <_puts_r+0x52>
 80156e6:	686c      	ldr	r4, [r5, #4]
 80156e8:	89a3      	ldrh	r3, [r4, #12]
 80156ea:	071b      	lsls	r3, r3, #28
 80156ec:	d51d      	bpl.n	801572a <_puts_r+0x66>
 80156ee:	6923      	ldr	r3, [r4, #16]
 80156f0:	b1db      	cbz	r3, 801572a <_puts_r+0x66>
 80156f2:	3e01      	subs	r6, #1
 80156f4:	68a3      	ldr	r3, [r4, #8]
 80156f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80156fa:	3b01      	subs	r3, #1
 80156fc:	60a3      	str	r3, [r4, #8]
 80156fe:	b9e9      	cbnz	r1, 801573c <_puts_r+0x78>
 8015700:	2b00      	cmp	r3, #0
 8015702:	da2e      	bge.n	8015762 <_puts_r+0x9e>
 8015704:	4622      	mov	r2, r4
 8015706:	210a      	movs	r1, #10
 8015708:	4628      	mov	r0, r5
 801570a:	f001 fb93 	bl	8016e34 <__swbuf_r>
 801570e:	3001      	adds	r0, #1
 8015710:	d011      	beq.n	8015736 <_puts_r+0x72>
 8015712:	200a      	movs	r0, #10
 8015714:	e011      	b.n	801573a <_puts_r+0x76>
 8015716:	4b17      	ldr	r3, [pc, #92]	; (8015774 <_puts_r+0xb0>)
 8015718:	429c      	cmp	r4, r3
 801571a:	d101      	bne.n	8015720 <_puts_r+0x5c>
 801571c:	68ac      	ldr	r4, [r5, #8]
 801571e:	e7e3      	b.n	80156e8 <_puts_r+0x24>
 8015720:	4b15      	ldr	r3, [pc, #84]	; (8015778 <_puts_r+0xb4>)
 8015722:	429c      	cmp	r4, r3
 8015724:	bf08      	it	eq
 8015726:	68ec      	ldreq	r4, [r5, #12]
 8015728:	e7de      	b.n	80156e8 <_puts_r+0x24>
 801572a:	4621      	mov	r1, r4
 801572c:	4628      	mov	r0, r5
 801572e:	f001 fbe5 	bl	8016efc <__swsetup_r>
 8015732:	2800      	cmp	r0, #0
 8015734:	d0dd      	beq.n	80156f2 <_puts_r+0x2e>
 8015736:	f04f 30ff 	mov.w	r0, #4294967295
 801573a:	bd70      	pop	{r4, r5, r6, pc}
 801573c:	2b00      	cmp	r3, #0
 801573e:	da04      	bge.n	801574a <_puts_r+0x86>
 8015740:	69a2      	ldr	r2, [r4, #24]
 8015742:	429a      	cmp	r2, r3
 8015744:	dc06      	bgt.n	8015754 <_puts_r+0x90>
 8015746:	290a      	cmp	r1, #10
 8015748:	d004      	beq.n	8015754 <_puts_r+0x90>
 801574a:	6823      	ldr	r3, [r4, #0]
 801574c:	1c5a      	adds	r2, r3, #1
 801574e:	6022      	str	r2, [r4, #0]
 8015750:	7019      	strb	r1, [r3, #0]
 8015752:	e7cf      	b.n	80156f4 <_puts_r+0x30>
 8015754:	4622      	mov	r2, r4
 8015756:	4628      	mov	r0, r5
 8015758:	f001 fb6c 	bl	8016e34 <__swbuf_r>
 801575c:	3001      	adds	r0, #1
 801575e:	d1c9      	bne.n	80156f4 <_puts_r+0x30>
 8015760:	e7e9      	b.n	8015736 <_puts_r+0x72>
 8015762:	6823      	ldr	r3, [r4, #0]
 8015764:	200a      	movs	r0, #10
 8015766:	1c5a      	adds	r2, r3, #1
 8015768:	6022      	str	r2, [r4, #0]
 801576a:	7018      	strb	r0, [r3, #0]
 801576c:	e7e5      	b.n	801573a <_puts_r+0x76>
 801576e:	bf00      	nop
 8015770:	08019444 	.word	0x08019444
 8015774:	08019464 	.word	0x08019464
 8015778:	08019424 	.word	0x08019424

0801577c <puts>:
 801577c:	4b02      	ldr	r3, [pc, #8]	; (8015788 <puts+0xc>)
 801577e:	4601      	mov	r1, r0
 8015780:	6818      	ldr	r0, [r3, #0]
 8015782:	f7ff bf9f 	b.w	80156c4 <_puts_r>
 8015786:	bf00      	nop
 8015788:	20000038 	.word	0x20000038

0801578c <swapfunc>:
 801578c:	2b02      	cmp	r3, #2
 801578e:	b510      	push	{r4, lr}
 8015790:	d00a      	beq.n	80157a8 <swapfunc+0x1c>
 8015792:	0892      	lsrs	r2, r2, #2
 8015794:	3a01      	subs	r2, #1
 8015796:	6803      	ldr	r3, [r0, #0]
 8015798:	680c      	ldr	r4, [r1, #0]
 801579a:	f840 4b04 	str.w	r4, [r0], #4
 801579e:	2a00      	cmp	r2, #0
 80157a0:	f841 3b04 	str.w	r3, [r1], #4
 80157a4:	dcf6      	bgt.n	8015794 <swapfunc+0x8>
 80157a6:	bd10      	pop	{r4, pc}
 80157a8:	4402      	add	r2, r0
 80157aa:	780c      	ldrb	r4, [r1, #0]
 80157ac:	7803      	ldrb	r3, [r0, #0]
 80157ae:	f800 4b01 	strb.w	r4, [r0], #1
 80157b2:	f801 3b01 	strb.w	r3, [r1], #1
 80157b6:	1a13      	subs	r3, r2, r0
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	dcf6      	bgt.n	80157aa <swapfunc+0x1e>
 80157bc:	e7f3      	b.n	80157a6 <swapfunc+0x1a>

080157be <med3.isra.1>:
 80157be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157c0:	460c      	mov	r4, r1
 80157c2:	4615      	mov	r5, r2
 80157c4:	4607      	mov	r7, r0
 80157c6:	461e      	mov	r6, r3
 80157c8:	4798      	blx	r3
 80157ca:	2800      	cmp	r0, #0
 80157cc:	4629      	mov	r1, r5
 80157ce:	4620      	mov	r0, r4
 80157d0:	da0a      	bge.n	80157e8 <med3.isra.1+0x2a>
 80157d2:	47b0      	blx	r6
 80157d4:	2800      	cmp	r0, #0
 80157d6:	db05      	blt.n	80157e4 <med3.isra.1+0x26>
 80157d8:	4629      	mov	r1, r5
 80157da:	4638      	mov	r0, r7
 80157dc:	47b0      	blx	r6
 80157de:	2800      	cmp	r0, #0
 80157e0:	db0a      	blt.n	80157f8 <med3.isra.1+0x3a>
 80157e2:	463c      	mov	r4, r7
 80157e4:	4620      	mov	r0, r4
 80157e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157e8:	47b0      	blx	r6
 80157ea:	2800      	cmp	r0, #0
 80157ec:	dcfa      	bgt.n	80157e4 <med3.isra.1+0x26>
 80157ee:	4629      	mov	r1, r5
 80157f0:	4638      	mov	r0, r7
 80157f2:	47b0      	blx	r6
 80157f4:	2800      	cmp	r0, #0
 80157f6:	dbf4      	blt.n	80157e2 <med3.isra.1+0x24>
 80157f8:	462c      	mov	r4, r5
 80157fa:	e7f3      	b.n	80157e4 <med3.isra.1+0x26>

080157fc <qsort>:
 80157fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015800:	b085      	sub	sp, #20
 8015802:	4606      	mov	r6, r0
 8015804:	468a      	mov	sl, r1
 8015806:	4614      	mov	r4, r2
 8015808:	9300      	str	r3, [sp, #0]
 801580a:	07b2      	lsls	r2, r6, #30
 801580c:	d110      	bne.n	8015830 <qsort+0x34>
 801580e:	07a3      	lsls	r3, r4, #30
 8015810:	d10e      	bne.n	8015830 <qsort+0x34>
 8015812:	1f27      	subs	r7, r4, #4
 8015814:	bf18      	it	ne
 8015816:	2701      	movne	r7, #1
 8015818:	f1ba 0f06 	cmp.w	sl, #6
 801581c:	eb06 0b04 	add.w	fp, r6, r4
 8015820:	d828      	bhi.n	8015874 <qsort+0x78>
 8015822:	fb04 6a0a 	mla	sl, r4, sl, r6
 8015826:	45da      	cmp	sl, fp
 8015828:	d80b      	bhi.n	8015842 <qsort+0x46>
 801582a:	b005      	add	sp, #20
 801582c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015830:	2702      	movs	r7, #2
 8015832:	e7f1      	b.n	8015818 <qsort+0x1c>
 8015834:	463b      	mov	r3, r7
 8015836:	4622      	mov	r2, r4
 8015838:	4649      	mov	r1, r9
 801583a:	4640      	mov	r0, r8
 801583c:	f7ff ffa6 	bl	801578c <swapfunc>
 8015840:	e013      	b.n	801586a <qsort+0x6e>
 8015842:	46d8      	mov	r8, fp
 8015844:	e012      	b.n	801586c <qsort+0x70>
 8015846:	eba8 0904 	sub.w	r9, r8, r4
 801584a:	4641      	mov	r1, r8
 801584c:	4648      	mov	r0, r9
 801584e:	9b00      	ldr	r3, [sp, #0]
 8015850:	4798      	blx	r3
 8015852:	2800      	cmp	r0, #0
 8015854:	dd0c      	ble.n	8015870 <qsort+0x74>
 8015856:	2f00      	cmp	r7, #0
 8015858:	d1ec      	bne.n	8015834 <qsort+0x38>
 801585a:	f8d8 3000 	ldr.w	r3, [r8]
 801585e:	f8d9 2000 	ldr.w	r2, [r9]
 8015862:	f8c8 2000 	str.w	r2, [r8]
 8015866:	f8c9 3000 	str.w	r3, [r9]
 801586a:	46c8      	mov	r8, r9
 801586c:	4546      	cmp	r6, r8
 801586e:	d3ea      	bcc.n	8015846 <qsort+0x4a>
 8015870:	44a3      	add	fp, r4
 8015872:	e7d8      	b.n	8015826 <qsort+0x2a>
 8015874:	ea4f 085a 	mov.w	r8, sl, lsr #1
 8015878:	f10a 35ff 	add.w	r5, sl, #4294967295
 801587c:	f1ba 0f07 	cmp.w	sl, #7
 8015880:	fb04 6808 	mla	r8, r4, r8, r6
 8015884:	fb04 6505 	mla	r5, r4, r5, r6
 8015888:	d027      	beq.n	80158da <qsort+0xde>
 801588a:	f1ba 0f28 	cmp.w	sl, #40	; 0x28
 801588e:	d94a      	bls.n	8015926 <qsort+0x12a>
 8015890:	ea4f 09da 	mov.w	r9, sl, lsr #3
 8015894:	fb04 f909 	mul.w	r9, r4, r9
 8015898:	eb06 0109 	add.w	r1, r6, r9
 801589c:	eb01 0209 	add.w	r2, r1, r9
 80158a0:	9b00      	ldr	r3, [sp, #0]
 80158a2:	4630      	mov	r0, r6
 80158a4:	f7ff ff8b 	bl	80157be <med3.isra.1>
 80158a8:	eb08 0209 	add.w	r2, r8, r9
 80158ac:	4641      	mov	r1, r8
 80158ae:	9001      	str	r0, [sp, #4]
 80158b0:	9b00      	ldr	r3, [sp, #0]
 80158b2:	eba8 0009 	sub.w	r0, r8, r9
 80158b6:	f7ff ff82 	bl	80157be <med3.isra.1>
 80158ba:	4680      	mov	r8, r0
 80158bc:	eba5 0049 	sub.w	r0, r5, r9, lsl #1
 80158c0:	462a      	mov	r2, r5
 80158c2:	9b00      	ldr	r3, [sp, #0]
 80158c4:	eb00 0109 	add.w	r1, r0, r9
 80158c8:	f7ff ff79 	bl	80157be <med3.isra.1>
 80158cc:	4602      	mov	r2, r0
 80158ce:	4641      	mov	r1, r8
 80158d0:	9b00      	ldr	r3, [sp, #0]
 80158d2:	9801      	ldr	r0, [sp, #4]
 80158d4:	f7ff ff73 	bl	80157be <med3.isra.1>
 80158d8:	4680      	mov	r8, r0
 80158da:	bb3f      	cbnz	r7, 801592c <qsort+0x130>
 80158dc:	6833      	ldr	r3, [r6, #0]
 80158de:	f8d8 2000 	ldr.w	r2, [r8]
 80158e2:	6032      	str	r2, [r6, #0]
 80158e4:	f8c8 3000 	str.w	r3, [r8]
 80158e8:	46d8      	mov	r8, fp
 80158ea:	46a9      	mov	r9, r5
 80158ec:	f8cd b004 	str.w	fp, [sp, #4]
 80158f0:	2300      	movs	r3, #0
 80158f2:	45a8      	cmp	r8, r5
 80158f4:	d857      	bhi.n	80159a6 <qsort+0x1aa>
 80158f6:	9302      	str	r3, [sp, #8]
 80158f8:	4631      	mov	r1, r6
 80158fa:	9b00      	ldr	r3, [sp, #0]
 80158fc:	4640      	mov	r0, r8
 80158fe:	4798      	blx	r3
 8015900:	2800      	cmp	r0, #0
 8015902:	9b02      	ldr	r3, [sp, #8]
 8015904:	dc2e      	bgt.n	8015964 <qsort+0x168>
 8015906:	d10c      	bne.n	8015922 <qsort+0x126>
 8015908:	b9bf      	cbnz	r7, 801593a <qsort+0x13e>
 801590a:	9b01      	ldr	r3, [sp, #4]
 801590c:	9901      	ldr	r1, [sp, #4]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	f8d8 2000 	ldr.w	r2, [r8]
 8015914:	600a      	str	r2, [r1, #0]
 8015916:	f8c8 3000 	str.w	r3, [r8]
 801591a:	9b01      	ldr	r3, [sp, #4]
 801591c:	4423      	add	r3, r4
 801591e:	9301      	str	r3, [sp, #4]
 8015920:	2301      	movs	r3, #1
 8015922:	44a0      	add	r8, r4
 8015924:	e7e5      	b.n	80158f2 <qsort+0xf6>
 8015926:	462a      	mov	r2, r5
 8015928:	9601      	str	r6, [sp, #4]
 801592a:	e7d0      	b.n	80158ce <qsort+0xd2>
 801592c:	463b      	mov	r3, r7
 801592e:	4622      	mov	r2, r4
 8015930:	4641      	mov	r1, r8
 8015932:	4630      	mov	r0, r6
 8015934:	f7ff ff2a 	bl	801578c <swapfunc>
 8015938:	e7d6      	b.n	80158e8 <qsort+0xec>
 801593a:	463b      	mov	r3, r7
 801593c:	4622      	mov	r2, r4
 801593e:	4641      	mov	r1, r8
 8015940:	9801      	ldr	r0, [sp, #4]
 8015942:	f7ff ff23 	bl	801578c <swapfunc>
 8015946:	e7e8      	b.n	801591a <qsort+0x11e>
 8015948:	d109      	bne.n	801595e <qsort+0x162>
 801594a:	b9f7      	cbnz	r7, 801598a <qsort+0x18e>
 801594c:	682b      	ldr	r3, [r5, #0]
 801594e:	f8d9 2000 	ldr.w	r2, [r9]
 8015952:	602a      	str	r2, [r5, #0]
 8015954:	f8c9 3000 	str.w	r3, [r9]
 8015958:	eba9 0904 	sub.w	r9, r9, r4
 801595c:	2301      	movs	r3, #1
 801595e:	9d02      	ldr	r5, [sp, #8]
 8015960:	45a8      	cmp	r8, r5
 8015962:	d820      	bhi.n	80159a6 <qsort+0x1aa>
 8015964:	9303      	str	r3, [sp, #12]
 8015966:	4631      	mov	r1, r6
 8015968:	9b00      	ldr	r3, [sp, #0]
 801596a:	4628      	mov	r0, r5
 801596c:	4798      	blx	r3
 801596e:	1b2b      	subs	r3, r5, r4
 8015970:	2800      	cmp	r0, #0
 8015972:	9302      	str	r3, [sp, #8]
 8015974:	9b03      	ldr	r3, [sp, #12]
 8015976:	dae7      	bge.n	8015948 <qsort+0x14c>
 8015978:	b977      	cbnz	r7, 8015998 <qsort+0x19c>
 801597a:	f8d8 3000 	ldr.w	r3, [r8]
 801597e:	682a      	ldr	r2, [r5, #0]
 8015980:	f8c8 2000 	str.w	r2, [r8]
 8015984:	602b      	str	r3, [r5, #0]
 8015986:	9d02      	ldr	r5, [sp, #8]
 8015988:	e7ca      	b.n	8015920 <qsort+0x124>
 801598a:	463b      	mov	r3, r7
 801598c:	4622      	mov	r2, r4
 801598e:	4649      	mov	r1, r9
 8015990:	4628      	mov	r0, r5
 8015992:	f7ff fefb 	bl	801578c <swapfunc>
 8015996:	e7df      	b.n	8015958 <qsort+0x15c>
 8015998:	463b      	mov	r3, r7
 801599a:	4622      	mov	r2, r4
 801599c:	4629      	mov	r1, r5
 801599e:	4640      	mov	r0, r8
 80159a0:	f7ff fef4 	bl	801578c <swapfunc>
 80159a4:	e7ef      	b.n	8015986 <qsort+0x18a>
 80159a6:	fb04 6a0a 	mla	sl, r4, sl, r6
 80159aa:	bb03      	cbnz	r3, 80159ee <qsort+0x1f2>
 80159ac:	45d3      	cmp	fp, sl
 80159ae:	f4bf af3c 	bcs.w	801582a <qsort+0x2e>
 80159b2:	465d      	mov	r5, fp
 80159b4:	e017      	b.n	80159e6 <qsort+0x1ea>
 80159b6:	463b      	mov	r3, r7
 80159b8:	4622      	mov	r2, r4
 80159ba:	4641      	mov	r1, r8
 80159bc:	4628      	mov	r0, r5
 80159be:	f7ff fee5 	bl	801578c <swapfunc>
 80159c2:	e00f      	b.n	80159e4 <qsort+0x1e8>
 80159c4:	eba5 0804 	sub.w	r8, r5, r4
 80159c8:	4629      	mov	r1, r5
 80159ca:	4640      	mov	r0, r8
 80159cc:	9b00      	ldr	r3, [sp, #0]
 80159ce:	4798      	blx	r3
 80159d0:	2800      	cmp	r0, #0
 80159d2:	dd0a      	ble.n	80159ea <qsort+0x1ee>
 80159d4:	2f00      	cmp	r7, #0
 80159d6:	d1ee      	bne.n	80159b6 <qsort+0x1ba>
 80159d8:	682b      	ldr	r3, [r5, #0]
 80159da:	f8d8 2000 	ldr.w	r2, [r8]
 80159de:	602a      	str	r2, [r5, #0]
 80159e0:	f8c8 3000 	str.w	r3, [r8]
 80159e4:	4645      	mov	r5, r8
 80159e6:	42ae      	cmp	r6, r5
 80159e8:	d3ec      	bcc.n	80159c4 <qsort+0x1c8>
 80159ea:	44a3      	add	fp, r4
 80159ec:	e7de      	b.n	80159ac <qsort+0x1b0>
 80159ee:	9b01      	ldr	r3, [sp, #4]
 80159f0:	eba8 0b03 	sub.w	fp, r8, r3
 80159f4:	1b9a      	subs	r2, r3, r6
 80159f6:	455a      	cmp	r2, fp
 80159f8:	bfa8      	it	ge
 80159fa:	465a      	movge	r2, fp
 80159fc:	b12a      	cbz	r2, 8015a0a <qsort+0x20e>
 80159fe:	463b      	mov	r3, r7
 8015a00:	eba8 0102 	sub.w	r1, r8, r2
 8015a04:	4630      	mov	r0, r6
 8015a06:	f7ff fec1 	bl	801578c <swapfunc>
 8015a0a:	ebaa 0209 	sub.w	r2, sl, r9
 8015a0e:	eba9 0505 	sub.w	r5, r9, r5
 8015a12:	1b12      	subs	r2, r2, r4
 8015a14:	42aa      	cmp	r2, r5
 8015a16:	bf28      	it	cs
 8015a18:	462a      	movcs	r2, r5
 8015a1a:	b12a      	cbz	r2, 8015a28 <qsort+0x22c>
 8015a1c:	463b      	mov	r3, r7
 8015a1e:	ebaa 0102 	sub.w	r1, sl, r2
 8015a22:	4640      	mov	r0, r8
 8015a24:	f7ff feb2 	bl	801578c <swapfunc>
 8015a28:	455c      	cmp	r4, fp
 8015a2a:	d206      	bcs.n	8015a3a <qsort+0x23e>
 8015a2c:	fbbb f1f4 	udiv	r1, fp, r4
 8015a30:	9b00      	ldr	r3, [sp, #0]
 8015a32:	4622      	mov	r2, r4
 8015a34:	4630      	mov	r0, r6
 8015a36:	f7ff fee1 	bl	80157fc <qsort>
 8015a3a:	42a5      	cmp	r5, r4
 8015a3c:	f67f aef5 	bls.w	801582a <qsort+0x2e>
 8015a40:	ebaa 0605 	sub.w	r6, sl, r5
 8015a44:	fbb5 faf4 	udiv	sl, r5, r4
 8015a48:	e6df      	b.n	801580a <qsort+0xe>

08015a4a <lflush>:
 8015a4a:	8983      	ldrh	r3, [r0, #12]
 8015a4c:	f003 0309 	and.w	r3, r3, #9
 8015a50:	2b09      	cmp	r3, #9
 8015a52:	d101      	bne.n	8015a58 <lflush+0xe>
 8015a54:	f7fe b980 	b.w	8013d58 <fflush>
 8015a58:	2000      	movs	r0, #0
 8015a5a:	4770      	bx	lr

08015a5c <__srefill_r>:
 8015a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a5e:	460c      	mov	r4, r1
 8015a60:	4605      	mov	r5, r0
 8015a62:	b118      	cbz	r0, 8015a6c <__srefill_r+0x10>
 8015a64:	6983      	ldr	r3, [r0, #24]
 8015a66:	b90b      	cbnz	r3, 8015a6c <__srefill_r+0x10>
 8015a68:	f7fe f9c8 	bl	8013dfc <__sinit>
 8015a6c:	4b3c      	ldr	r3, [pc, #240]	; (8015b60 <__srefill_r+0x104>)
 8015a6e:	429c      	cmp	r4, r3
 8015a70:	d10a      	bne.n	8015a88 <__srefill_r+0x2c>
 8015a72:	686c      	ldr	r4, [r5, #4]
 8015a74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a78:	2300      	movs	r3, #0
 8015a7a:	6063      	str	r3, [r4, #4]
 8015a7c:	b293      	uxth	r3, r2
 8015a7e:	069e      	lsls	r6, r3, #26
 8015a80:	d50c      	bpl.n	8015a9c <__srefill_r+0x40>
 8015a82:	f04f 30ff 	mov.w	r0, #4294967295
 8015a86:	e067      	b.n	8015b58 <__srefill_r+0xfc>
 8015a88:	4b36      	ldr	r3, [pc, #216]	; (8015b64 <__srefill_r+0x108>)
 8015a8a:	429c      	cmp	r4, r3
 8015a8c:	d101      	bne.n	8015a92 <__srefill_r+0x36>
 8015a8e:	68ac      	ldr	r4, [r5, #8]
 8015a90:	e7f0      	b.n	8015a74 <__srefill_r+0x18>
 8015a92:	4b35      	ldr	r3, [pc, #212]	; (8015b68 <__srefill_r+0x10c>)
 8015a94:	429c      	cmp	r4, r3
 8015a96:	bf08      	it	eq
 8015a98:	68ec      	ldreq	r4, [r5, #12]
 8015a9a:	e7eb      	b.n	8015a74 <__srefill_r+0x18>
 8015a9c:	0758      	lsls	r0, r3, #29
 8015a9e:	d449      	bmi.n	8015b34 <__srefill_r+0xd8>
 8015aa0:	06d9      	lsls	r1, r3, #27
 8015aa2:	d405      	bmi.n	8015ab0 <__srefill_r+0x54>
 8015aa4:	2309      	movs	r3, #9
 8015aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015aaa:	602b      	str	r3, [r5, #0]
 8015aac:	81a2      	strh	r2, [r4, #12]
 8015aae:	e7e8      	b.n	8015a82 <__srefill_r+0x26>
 8015ab0:	071a      	lsls	r2, r3, #28
 8015ab2:	d50b      	bpl.n	8015acc <__srefill_r+0x70>
 8015ab4:	4621      	mov	r1, r4
 8015ab6:	4628      	mov	r0, r5
 8015ab8:	f7fe f924 	bl	8013d04 <_fflush_r>
 8015abc:	2800      	cmp	r0, #0
 8015abe:	d1e0      	bne.n	8015a82 <__srefill_r+0x26>
 8015ac0:	89a3      	ldrh	r3, [r4, #12]
 8015ac2:	60a0      	str	r0, [r4, #8]
 8015ac4:	f023 0308 	bic.w	r3, r3, #8
 8015ac8:	81a3      	strh	r3, [r4, #12]
 8015aca:	61a0      	str	r0, [r4, #24]
 8015acc:	89a3      	ldrh	r3, [r4, #12]
 8015ace:	f043 0304 	orr.w	r3, r3, #4
 8015ad2:	81a3      	strh	r3, [r4, #12]
 8015ad4:	6923      	ldr	r3, [r4, #16]
 8015ad6:	b91b      	cbnz	r3, 8015ae0 <__srefill_r+0x84>
 8015ad8:	4621      	mov	r1, r4
 8015ada:	4628      	mov	r0, r5
 8015adc:	f7fe fa7c 	bl	8013fd8 <__smakebuf_r>
 8015ae0:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8015ae4:	b2be      	uxth	r6, r7
 8015ae6:	07b3      	lsls	r3, r6, #30
 8015ae8:	d00f      	beq.n	8015b0a <__srefill_r+0xae>
 8015aea:	2301      	movs	r3, #1
 8015aec:	81a3      	strh	r3, [r4, #12]
 8015aee:	4b1f      	ldr	r3, [pc, #124]	; (8015b6c <__srefill_r+0x110>)
 8015af0:	491f      	ldr	r1, [pc, #124]	; (8015b70 <__srefill_r+0x114>)
 8015af2:	6818      	ldr	r0, [r3, #0]
 8015af4:	f006 0609 	and.w	r6, r6, #9
 8015af8:	f7fe f9ec 	bl	8013ed4 <_fwalk>
 8015afc:	2e09      	cmp	r6, #9
 8015afe:	81a7      	strh	r7, [r4, #12]
 8015b00:	d103      	bne.n	8015b0a <__srefill_r+0xae>
 8015b02:	4621      	mov	r1, r4
 8015b04:	4628      	mov	r0, r5
 8015b06:	f7fe f877 	bl	8013bf8 <__sflush_r>
 8015b0a:	6922      	ldr	r2, [r4, #16]
 8015b0c:	6022      	str	r2, [r4, #0]
 8015b0e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015b10:	6963      	ldr	r3, [r4, #20]
 8015b12:	6a21      	ldr	r1, [r4, #32]
 8015b14:	4628      	mov	r0, r5
 8015b16:	47b0      	blx	r6
 8015b18:	2800      	cmp	r0, #0
 8015b1a:	6060      	str	r0, [r4, #4]
 8015b1c:	dc1d      	bgt.n	8015b5a <__srefill_r+0xfe>
 8015b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b22:	bf17      	itett	ne
 8015b24:	2200      	movne	r2, #0
 8015b26:	f043 0320 	orreq.w	r3, r3, #32
 8015b2a:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8015b2e:	6062      	strne	r2, [r4, #4]
 8015b30:	81a3      	strh	r3, [r4, #12]
 8015b32:	e7a6      	b.n	8015a82 <__srefill_r+0x26>
 8015b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b36:	2900      	cmp	r1, #0
 8015b38:	d0cc      	beq.n	8015ad4 <__srefill_r+0x78>
 8015b3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b3e:	4299      	cmp	r1, r3
 8015b40:	d002      	beq.n	8015b48 <__srefill_r+0xec>
 8015b42:	4628      	mov	r0, r5
 8015b44:	f7fe fa9c 	bl	8014080 <_free_r>
 8015b48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015b4a:	6063      	str	r3, [r4, #4]
 8015b4c:	2000      	movs	r0, #0
 8015b4e:	6360      	str	r0, [r4, #52]	; 0x34
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d0bf      	beq.n	8015ad4 <__srefill_r+0x78>
 8015b54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015b56:	6023      	str	r3, [r4, #0]
 8015b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b5a:	2000      	movs	r0, #0
 8015b5c:	e7fc      	b.n	8015b58 <__srefill_r+0xfc>
 8015b5e:	bf00      	nop
 8015b60:	08019444 	.word	0x08019444
 8015b64:	08019464 	.word	0x08019464
 8015b68:	08019424 	.word	0x08019424
 8015b6c:	08019484 	.word	0x08019484
 8015b70:	08015a4b 	.word	0x08015a4b

08015b74 <_sbrk_r>:
 8015b74:	b538      	push	{r3, r4, r5, lr}
 8015b76:	4c06      	ldr	r4, [pc, #24]	; (8015b90 <_sbrk_r+0x1c>)
 8015b78:	2300      	movs	r3, #0
 8015b7a:	4605      	mov	r5, r0
 8015b7c:	4608      	mov	r0, r1
 8015b7e:	6023      	str	r3, [r4, #0]
 8015b80:	f7f7 fd28 	bl	800d5d4 <_sbrk>
 8015b84:	1c43      	adds	r3, r0, #1
 8015b86:	d102      	bne.n	8015b8e <_sbrk_r+0x1a>
 8015b88:	6823      	ldr	r3, [r4, #0]
 8015b8a:	b103      	cbz	r3, 8015b8e <_sbrk_r+0x1a>
 8015b8c:	602b      	str	r3, [r5, #0]
 8015b8e:	bd38      	pop	{r3, r4, r5, pc}
 8015b90:	20008f20 	.word	0x20008f20

08015b94 <iscanf>:
 8015b94:	b40f      	push	{r0, r1, r2, r3}
 8015b96:	4b0a      	ldr	r3, [pc, #40]	; (8015bc0 <iscanf+0x2c>)
 8015b98:	b513      	push	{r0, r1, r4, lr}
 8015b9a:	681c      	ldr	r4, [r3, #0]
 8015b9c:	b124      	cbz	r4, 8015ba8 <iscanf+0x14>
 8015b9e:	69a3      	ldr	r3, [r4, #24]
 8015ba0:	b913      	cbnz	r3, 8015ba8 <iscanf+0x14>
 8015ba2:	4620      	mov	r0, r4
 8015ba4:	f7fe f92a 	bl	8013dfc <__sinit>
 8015ba8:	ab05      	add	r3, sp, #20
 8015baa:	9a04      	ldr	r2, [sp, #16]
 8015bac:	6861      	ldr	r1, [r4, #4]
 8015bae:	9301      	str	r3, [sp, #4]
 8015bb0:	4620      	mov	r0, r4
 8015bb2:	f7ff f9f9 	bl	8014fa8 <_vfiscanf_r>
 8015bb6:	b002      	add	sp, #8
 8015bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015bbc:	b004      	add	sp, #16
 8015bbe:	4770      	bx	lr
 8015bc0:	20000038 	.word	0x20000038

08015bc4 <__sccl>:
 8015bc4:	b570      	push	{r4, r5, r6, lr}
 8015bc6:	780b      	ldrb	r3, [r1, #0]
 8015bc8:	2b5e      	cmp	r3, #94	; 0x5e
 8015bca:	bf13      	iteet	ne
 8015bcc:	1c4a      	addne	r2, r1, #1
 8015bce:	1c8a      	addeq	r2, r1, #2
 8015bd0:	784b      	ldrbeq	r3, [r1, #1]
 8015bd2:	2100      	movne	r1, #0
 8015bd4:	bf08      	it	eq
 8015bd6:	2101      	moveq	r1, #1
 8015bd8:	1e44      	subs	r4, r0, #1
 8015bda:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8015bde:	f804 1f01 	strb.w	r1, [r4, #1]!
 8015be2:	42ac      	cmp	r4, r5
 8015be4:	d1fb      	bne.n	8015bde <__sccl+0x1a>
 8015be6:	b913      	cbnz	r3, 8015bee <__sccl+0x2a>
 8015be8:	3a01      	subs	r2, #1
 8015bea:	4610      	mov	r0, r2
 8015bec:	bd70      	pop	{r4, r5, r6, pc}
 8015bee:	f081 0401 	eor.w	r4, r1, #1
 8015bf2:	54c4      	strb	r4, [r0, r3]
 8015bf4:	1c51      	adds	r1, r2, #1
 8015bf6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8015bfa:	2d2d      	cmp	r5, #45	; 0x2d
 8015bfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8015c00:	460a      	mov	r2, r1
 8015c02:	d006      	beq.n	8015c12 <__sccl+0x4e>
 8015c04:	2d5d      	cmp	r5, #93	; 0x5d
 8015c06:	d0f0      	beq.n	8015bea <__sccl+0x26>
 8015c08:	b90d      	cbnz	r5, 8015c0e <__sccl+0x4a>
 8015c0a:	4632      	mov	r2, r6
 8015c0c:	e7ed      	b.n	8015bea <__sccl+0x26>
 8015c0e:	462b      	mov	r3, r5
 8015c10:	e7ef      	b.n	8015bf2 <__sccl+0x2e>
 8015c12:	780e      	ldrb	r6, [r1, #0]
 8015c14:	2e5d      	cmp	r6, #93	; 0x5d
 8015c16:	d0fa      	beq.n	8015c0e <__sccl+0x4a>
 8015c18:	42b3      	cmp	r3, r6
 8015c1a:	dcf8      	bgt.n	8015c0e <__sccl+0x4a>
 8015c1c:	3301      	adds	r3, #1
 8015c1e:	429e      	cmp	r6, r3
 8015c20:	54c4      	strb	r4, [r0, r3]
 8015c22:	dcfb      	bgt.n	8015c1c <__sccl+0x58>
 8015c24:	3102      	adds	r1, #2
 8015c26:	e7e6      	b.n	8015bf6 <__sccl+0x32>

08015c28 <setbuf>:
 8015c28:	2900      	cmp	r1, #0
 8015c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c2e:	bf0c      	ite	eq
 8015c30:	2202      	moveq	r2, #2
 8015c32:	2200      	movne	r2, #0
 8015c34:	f000 b800 	b.w	8015c38 <setvbuf>

08015c38 <setvbuf>:
 8015c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015c3c:	461d      	mov	r5, r3
 8015c3e:	4b51      	ldr	r3, [pc, #324]	; (8015d84 <setvbuf+0x14c>)
 8015c40:	681e      	ldr	r6, [r3, #0]
 8015c42:	4604      	mov	r4, r0
 8015c44:	460f      	mov	r7, r1
 8015c46:	4690      	mov	r8, r2
 8015c48:	b126      	cbz	r6, 8015c54 <setvbuf+0x1c>
 8015c4a:	69b3      	ldr	r3, [r6, #24]
 8015c4c:	b913      	cbnz	r3, 8015c54 <setvbuf+0x1c>
 8015c4e:	4630      	mov	r0, r6
 8015c50:	f7fe f8d4 	bl	8013dfc <__sinit>
 8015c54:	4b4c      	ldr	r3, [pc, #304]	; (8015d88 <setvbuf+0x150>)
 8015c56:	429c      	cmp	r4, r3
 8015c58:	d152      	bne.n	8015d00 <setvbuf+0xc8>
 8015c5a:	6874      	ldr	r4, [r6, #4]
 8015c5c:	f1b8 0f02 	cmp.w	r8, #2
 8015c60:	d006      	beq.n	8015c70 <setvbuf+0x38>
 8015c62:	f1b8 0f01 	cmp.w	r8, #1
 8015c66:	f200 8089 	bhi.w	8015d7c <setvbuf+0x144>
 8015c6a:	2d00      	cmp	r5, #0
 8015c6c:	f2c0 8086 	blt.w	8015d7c <setvbuf+0x144>
 8015c70:	4621      	mov	r1, r4
 8015c72:	4630      	mov	r0, r6
 8015c74:	f7fe f846 	bl	8013d04 <_fflush_r>
 8015c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015c7a:	b141      	cbz	r1, 8015c8e <setvbuf+0x56>
 8015c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c80:	4299      	cmp	r1, r3
 8015c82:	d002      	beq.n	8015c8a <setvbuf+0x52>
 8015c84:	4630      	mov	r0, r6
 8015c86:	f7fe f9fb 	bl	8014080 <_free_r>
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8015c8e:	2300      	movs	r3, #0
 8015c90:	61a3      	str	r3, [r4, #24]
 8015c92:	6063      	str	r3, [r4, #4]
 8015c94:	89a3      	ldrh	r3, [r4, #12]
 8015c96:	061b      	lsls	r3, r3, #24
 8015c98:	d503      	bpl.n	8015ca2 <setvbuf+0x6a>
 8015c9a:	6921      	ldr	r1, [r4, #16]
 8015c9c:	4630      	mov	r0, r6
 8015c9e:	f7fe f9ef 	bl	8014080 <_free_r>
 8015ca2:	89a3      	ldrh	r3, [r4, #12]
 8015ca4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8015ca8:	f023 0303 	bic.w	r3, r3, #3
 8015cac:	f1b8 0f02 	cmp.w	r8, #2
 8015cb0:	81a3      	strh	r3, [r4, #12]
 8015cb2:	d05d      	beq.n	8015d70 <setvbuf+0x138>
 8015cb4:	ab01      	add	r3, sp, #4
 8015cb6:	466a      	mov	r2, sp
 8015cb8:	4621      	mov	r1, r4
 8015cba:	4630      	mov	r0, r6
 8015cbc:	f7fe f968 	bl	8013f90 <__swhatbuf_r>
 8015cc0:	89a3      	ldrh	r3, [r4, #12]
 8015cc2:	4318      	orrs	r0, r3
 8015cc4:	81a0      	strh	r0, [r4, #12]
 8015cc6:	bb2d      	cbnz	r5, 8015d14 <setvbuf+0xdc>
 8015cc8:	9d00      	ldr	r5, [sp, #0]
 8015cca:	4628      	mov	r0, r5
 8015ccc:	f002 fb54 	bl	8018378 <malloc>
 8015cd0:	4607      	mov	r7, r0
 8015cd2:	2800      	cmp	r0, #0
 8015cd4:	d14e      	bne.n	8015d74 <setvbuf+0x13c>
 8015cd6:	f8dd 9000 	ldr.w	r9, [sp]
 8015cda:	45a9      	cmp	r9, r5
 8015cdc:	d13c      	bne.n	8015d58 <setvbuf+0x120>
 8015cde:	f04f 30ff 	mov.w	r0, #4294967295
 8015ce2:	89a3      	ldrh	r3, [r4, #12]
 8015ce4:	f043 0302 	orr.w	r3, r3, #2
 8015ce8:	81a3      	strh	r3, [r4, #12]
 8015cea:	2300      	movs	r3, #0
 8015cec:	60a3      	str	r3, [r4, #8]
 8015cee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015cf2:	6023      	str	r3, [r4, #0]
 8015cf4:	6123      	str	r3, [r4, #16]
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	6163      	str	r3, [r4, #20]
 8015cfa:	b003      	add	sp, #12
 8015cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d00:	4b22      	ldr	r3, [pc, #136]	; (8015d8c <setvbuf+0x154>)
 8015d02:	429c      	cmp	r4, r3
 8015d04:	d101      	bne.n	8015d0a <setvbuf+0xd2>
 8015d06:	68b4      	ldr	r4, [r6, #8]
 8015d08:	e7a8      	b.n	8015c5c <setvbuf+0x24>
 8015d0a:	4b21      	ldr	r3, [pc, #132]	; (8015d90 <setvbuf+0x158>)
 8015d0c:	429c      	cmp	r4, r3
 8015d0e:	bf08      	it	eq
 8015d10:	68f4      	ldreq	r4, [r6, #12]
 8015d12:	e7a3      	b.n	8015c5c <setvbuf+0x24>
 8015d14:	2f00      	cmp	r7, #0
 8015d16:	d0d8      	beq.n	8015cca <setvbuf+0x92>
 8015d18:	69b3      	ldr	r3, [r6, #24]
 8015d1a:	b913      	cbnz	r3, 8015d22 <setvbuf+0xea>
 8015d1c:	4630      	mov	r0, r6
 8015d1e:	f7fe f86d 	bl	8013dfc <__sinit>
 8015d22:	f1b8 0f01 	cmp.w	r8, #1
 8015d26:	bf08      	it	eq
 8015d28:	89a3      	ldrheq	r3, [r4, #12]
 8015d2a:	6027      	str	r7, [r4, #0]
 8015d2c:	bf04      	itt	eq
 8015d2e:	f043 0301 	orreq.w	r3, r3, #1
 8015d32:	81a3      	strheq	r3, [r4, #12]
 8015d34:	89a3      	ldrh	r3, [r4, #12]
 8015d36:	f013 0008 	ands.w	r0, r3, #8
 8015d3a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8015d3e:	d01b      	beq.n	8015d78 <setvbuf+0x140>
 8015d40:	f013 0001 	ands.w	r0, r3, #1
 8015d44:	bf18      	it	ne
 8015d46:	426d      	negne	r5, r5
 8015d48:	f04f 0300 	mov.w	r3, #0
 8015d4c:	bf1d      	ittte	ne
 8015d4e:	60a3      	strne	r3, [r4, #8]
 8015d50:	61a5      	strne	r5, [r4, #24]
 8015d52:	4618      	movne	r0, r3
 8015d54:	60a5      	streq	r5, [r4, #8]
 8015d56:	e7d0      	b.n	8015cfa <setvbuf+0xc2>
 8015d58:	4648      	mov	r0, r9
 8015d5a:	f002 fb0d 	bl	8018378 <malloc>
 8015d5e:	4607      	mov	r7, r0
 8015d60:	2800      	cmp	r0, #0
 8015d62:	d0bc      	beq.n	8015cde <setvbuf+0xa6>
 8015d64:	89a3      	ldrh	r3, [r4, #12]
 8015d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d6a:	81a3      	strh	r3, [r4, #12]
 8015d6c:	464d      	mov	r5, r9
 8015d6e:	e7d3      	b.n	8015d18 <setvbuf+0xe0>
 8015d70:	2000      	movs	r0, #0
 8015d72:	e7b6      	b.n	8015ce2 <setvbuf+0xaa>
 8015d74:	46a9      	mov	r9, r5
 8015d76:	e7f5      	b.n	8015d64 <setvbuf+0x12c>
 8015d78:	60a0      	str	r0, [r4, #8]
 8015d7a:	e7be      	b.n	8015cfa <setvbuf+0xc2>
 8015d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8015d80:	e7bb      	b.n	8015cfa <setvbuf+0xc2>
 8015d82:	bf00      	nop
 8015d84:	20000038 	.word	0x20000038
 8015d88:	08019444 	.word	0x08019444
 8015d8c:	08019464 	.word	0x08019464
 8015d90:	08019424 	.word	0x08019424

08015d94 <nanf>:
 8015d94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015d9c <nanf+0x8>
 8015d98:	4770      	bx	lr
 8015d9a:	bf00      	nop
 8015d9c:	7fc00000 	.word	0x7fc00000

08015da0 <siprintf>:
 8015da0:	b40e      	push	{r1, r2, r3}
 8015da2:	b500      	push	{lr}
 8015da4:	b09c      	sub	sp, #112	; 0x70
 8015da6:	ab1d      	add	r3, sp, #116	; 0x74
 8015da8:	9002      	str	r0, [sp, #8]
 8015daa:	9006      	str	r0, [sp, #24]
 8015dac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015db0:	4809      	ldr	r0, [pc, #36]	; (8015dd8 <siprintf+0x38>)
 8015db2:	9107      	str	r1, [sp, #28]
 8015db4:	9104      	str	r1, [sp, #16]
 8015db6:	4909      	ldr	r1, [pc, #36]	; (8015ddc <siprintf+0x3c>)
 8015db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dbc:	9105      	str	r1, [sp, #20]
 8015dbe:	6800      	ldr	r0, [r0, #0]
 8015dc0:	9301      	str	r3, [sp, #4]
 8015dc2:	a902      	add	r1, sp, #8
 8015dc4:	f002 ff9a 	bl	8018cfc <_svfiprintf_r>
 8015dc8:	9b02      	ldr	r3, [sp, #8]
 8015dca:	2200      	movs	r2, #0
 8015dcc:	701a      	strb	r2, [r3, #0]
 8015dce:	b01c      	add	sp, #112	; 0x70
 8015dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8015dd4:	b003      	add	sp, #12
 8015dd6:	4770      	bx	lr
 8015dd8:	20000038 	.word	0x20000038
 8015ddc:	ffff0208 	.word	0xffff0208

08015de0 <__sread>:
 8015de0:	b510      	push	{r4, lr}
 8015de2:	460c      	mov	r4, r1
 8015de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015de8:	f003 f8b6 	bl	8018f58 <_read_r>
 8015dec:	2800      	cmp	r0, #0
 8015dee:	bfab      	itete	ge
 8015df0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015df2:	89a3      	ldrhlt	r3, [r4, #12]
 8015df4:	181b      	addge	r3, r3, r0
 8015df6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015dfa:	bfac      	ite	ge
 8015dfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8015dfe:	81a3      	strhlt	r3, [r4, #12]
 8015e00:	bd10      	pop	{r4, pc}

08015e02 <__swrite>:
 8015e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e06:	461f      	mov	r7, r3
 8015e08:	898b      	ldrh	r3, [r1, #12]
 8015e0a:	05db      	lsls	r3, r3, #23
 8015e0c:	4605      	mov	r5, r0
 8015e0e:	460c      	mov	r4, r1
 8015e10:	4616      	mov	r6, r2
 8015e12:	d505      	bpl.n	8015e20 <__swrite+0x1e>
 8015e14:	2302      	movs	r3, #2
 8015e16:	2200      	movs	r2, #0
 8015e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e1c:	f002 fa9a 	bl	8018354 <_lseek_r>
 8015e20:	89a3      	ldrh	r3, [r4, #12]
 8015e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015e2a:	81a3      	strh	r3, [r4, #12]
 8015e2c:	4632      	mov	r2, r6
 8015e2e:	463b      	mov	r3, r7
 8015e30:	4628      	mov	r0, r5
 8015e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e36:	f001 b84f 	b.w	8016ed8 <_write_r>

08015e3a <__sseek>:
 8015e3a:	b510      	push	{r4, lr}
 8015e3c:	460c      	mov	r4, r1
 8015e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e42:	f002 fa87 	bl	8018354 <_lseek_r>
 8015e46:	1c43      	adds	r3, r0, #1
 8015e48:	89a3      	ldrh	r3, [r4, #12]
 8015e4a:	bf15      	itete	ne
 8015e4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8015e4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015e52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015e56:	81a3      	strheq	r3, [r4, #12]
 8015e58:	bf18      	it	ne
 8015e5a:	81a3      	strhne	r3, [r4, #12]
 8015e5c:	bd10      	pop	{r4, pc}

08015e5e <__sclose>:
 8015e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e62:	f001 b8b9 	b.w	8016fd8 <_close_r>

08015e66 <sulp>:
 8015e66:	b570      	push	{r4, r5, r6, lr}
 8015e68:	4604      	mov	r4, r0
 8015e6a:	460d      	mov	r5, r1
 8015e6c:	ec45 4b10 	vmov	d0, r4, r5
 8015e70:	4616      	mov	r6, r2
 8015e72:	f002 fd81 	bl	8018978 <__ulp>
 8015e76:	ec51 0b10 	vmov	r0, r1, d0
 8015e7a:	b17e      	cbz	r6, 8015e9c <sulp+0x36>
 8015e7c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015e80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	dd09      	ble.n	8015e9c <sulp+0x36>
 8015e88:	051b      	lsls	r3, r3, #20
 8015e8a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015e8e:	2400      	movs	r4, #0
 8015e90:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015e94:	4622      	mov	r2, r4
 8015e96:	462b      	mov	r3, r5
 8015e98:	f7f2 fae6 	bl	8008468 <__aeabi_dmul>
 8015e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015ea0 <_strtod_l>:
 8015ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ea4:	461f      	mov	r7, r3
 8015ea6:	b0a1      	sub	sp, #132	; 0x84
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	4681      	mov	r9, r0
 8015eac:	4638      	mov	r0, r7
 8015eae:	460e      	mov	r6, r1
 8015eb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8015eb2:	931c      	str	r3, [sp, #112]	; 0x70
 8015eb4:	f002 fa3e 	bl	8018334 <__localeconv_l>
 8015eb8:	4680      	mov	r8, r0
 8015eba:	6800      	ldr	r0, [r0, #0]
 8015ebc:	f7f2 f8c0 	bl	8008040 <strlen>
 8015ec0:	f04f 0a00 	mov.w	sl, #0
 8015ec4:	4604      	mov	r4, r0
 8015ec6:	f04f 0b00 	mov.w	fp, #0
 8015eca:	961b      	str	r6, [sp, #108]	; 0x6c
 8015ecc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ece:	781a      	ldrb	r2, [r3, #0]
 8015ed0:	2a0d      	cmp	r2, #13
 8015ed2:	d832      	bhi.n	8015f3a <_strtod_l+0x9a>
 8015ed4:	2a09      	cmp	r2, #9
 8015ed6:	d236      	bcs.n	8015f46 <_strtod_l+0xa6>
 8015ed8:	2a00      	cmp	r2, #0
 8015eda:	d03e      	beq.n	8015f5a <_strtod_l+0xba>
 8015edc:	2300      	movs	r3, #0
 8015ede:	930d      	str	r3, [sp, #52]	; 0x34
 8015ee0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015ee2:	782b      	ldrb	r3, [r5, #0]
 8015ee4:	2b30      	cmp	r3, #48	; 0x30
 8015ee6:	f040 80ac 	bne.w	8016042 <_strtod_l+0x1a2>
 8015eea:	786b      	ldrb	r3, [r5, #1]
 8015eec:	2b58      	cmp	r3, #88	; 0x58
 8015eee:	d001      	beq.n	8015ef4 <_strtod_l+0x54>
 8015ef0:	2b78      	cmp	r3, #120	; 0x78
 8015ef2:	d167      	bne.n	8015fc4 <_strtod_l+0x124>
 8015ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ef6:	9301      	str	r3, [sp, #4]
 8015ef8:	ab1c      	add	r3, sp, #112	; 0x70
 8015efa:	9300      	str	r3, [sp, #0]
 8015efc:	9702      	str	r7, [sp, #8]
 8015efe:	ab1d      	add	r3, sp, #116	; 0x74
 8015f00:	4a88      	ldr	r2, [pc, #544]	; (8016124 <_strtod_l+0x284>)
 8015f02:	a91b      	add	r1, sp, #108	; 0x6c
 8015f04:	4648      	mov	r0, r9
 8015f06:	f001 ff1c 	bl	8017d42 <__gethex>
 8015f0a:	f010 0407 	ands.w	r4, r0, #7
 8015f0e:	4606      	mov	r6, r0
 8015f10:	d005      	beq.n	8015f1e <_strtod_l+0x7e>
 8015f12:	2c06      	cmp	r4, #6
 8015f14:	d12b      	bne.n	8015f6e <_strtod_l+0xce>
 8015f16:	3501      	adds	r5, #1
 8015f18:	2300      	movs	r3, #0
 8015f1a:	951b      	str	r5, [sp, #108]	; 0x6c
 8015f1c:	930d      	str	r3, [sp, #52]	; 0x34
 8015f1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	f040 859a 	bne.w	8016a5a <_strtod_l+0xbba>
 8015f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f28:	b1e3      	cbz	r3, 8015f64 <_strtod_l+0xc4>
 8015f2a:	4652      	mov	r2, sl
 8015f2c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015f30:	ec43 2b10 	vmov	d0, r2, r3
 8015f34:	b021      	add	sp, #132	; 0x84
 8015f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f3a:	2a2b      	cmp	r2, #43	; 0x2b
 8015f3c:	d015      	beq.n	8015f6a <_strtod_l+0xca>
 8015f3e:	2a2d      	cmp	r2, #45	; 0x2d
 8015f40:	d004      	beq.n	8015f4c <_strtod_l+0xac>
 8015f42:	2a20      	cmp	r2, #32
 8015f44:	d1ca      	bne.n	8015edc <_strtod_l+0x3c>
 8015f46:	3301      	adds	r3, #1
 8015f48:	931b      	str	r3, [sp, #108]	; 0x6c
 8015f4a:	e7bf      	b.n	8015ecc <_strtod_l+0x2c>
 8015f4c:	2201      	movs	r2, #1
 8015f4e:	920d      	str	r2, [sp, #52]	; 0x34
 8015f50:	1c5a      	adds	r2, r3, #1
 8015f52:	921b      	str	r2, [sp, #108]	; 0x6c
 8015f54:	785b      	ldrb	r3, [r3, #1]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d1c2      	bne.n	8015ee0 <_strtod_l+0x40>
 8015f5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015f5c:	961b      	str	r6, [sp, #108]	; 0x6c
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	f040 8579 	bne.w	8016a56 <_strtod_l+0xbb6>
 8015f64:	4652      	mov	r2, sl
 8015f66:	465b      	mov	r3, fp
 8015f68:	e7e2      	b.n	8015f30 <_strtod_l+0x90>
 8015f6a:	2200      	movs	r2, #0
 8015f6c:	e7ef      	b.n	8015f4e <_strtod_l+0xae>
 8015f6e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015f70:	b13a      	cbz	r2, 8015f82 <_strtod_l+0xe2>
 8015f72:	2135      	movs	r1, #53	; 0x35
 8015f74:	a81e      	add	r0, sp, #120	; 0x78
 8015f76:	f002 fdf7 	bl	8018b68 <__copybits>
 8015f7a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f7c:	4648      	mov	r0, r9
 8015f7e:	f002 fa64 	bl	801844a <_Bfree>
 8015f82:	3c01      	subs	r4, #1
 8015f84:	2c04      	cmp	r4, #4
 8015f86:	d806      	bhi.n	8015f96 <_strtod_l+0xf6>
 8015f88:	e8df f004 	tbb	[pc, r4]
 8015f8c:	1714030a 	.word	0x1714030a
 8015f90:	0a          	.byte	0x0a
 8015f91:	00          	.byte	0x00
 8015f92:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015f96:	0730      	lsls	r0, r6, #28
 8015f98:	d5c1      	bpl.n	8015f1e <_strtod_l+0x7e>
 8015f9a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015f9e:	e7be      	b.n	8015f1e <_strtod_l+0x7e>
 8015fa0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015fa4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015fa6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015faa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015fae:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015fb2:	e7f0      	b.n	8015f96 <_strtod_l+0xf6>
 8015fb4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016128 <_strtod_l+0x288>
 8015fb8:	e7ed      	b.n	8015f96 <_strtod_l+0xf6>
 8015fba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015fbe:	f04f 3aff 	mov.w	sl, #4294967295
 8015fc2:	e7e8      	b.n	8015f96 <_strtod_l+0xf6>
 8015fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015fc6:	1c5a      	adds	r2, r3, #1
 8015fc8:	921b      	str	r2, [sp, #108]	; 0x6c
 8015fca:	785b      	ldrb	r3, [r3, #1]
 8015fcc:	2b30      	cmp	r3, #48	; 0x30
 8015fce:	d0f9      	beq.n	8015fc4 <_strtod_l+0x124>
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d0a4      	beq.n	8015f1e <_strtod_l+0x7e>
 8015fd4:	2301      	movs	r3, #1
 8015fd6:	2500      	movs	r5, #0
 8015fd8:	9306      	str	r3, [sp, #24]
 8015fda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015fdc:	9308      	str	r3, [sp, #32]
 8015fde:	9507      	str	r5, [sp, #28]
 8015fe0:	9505      	str	r5, [sp, #20]
 8015fe2:	220a      	movs	r2, #10
 8015fe4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015fe6:	7807      	ldrb	r7, [r0, #0]
 8015fe8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015fec:	b2d9      	uxtb	r1, r3
 8015fee:	2909      	cmp	r1, #9
 8015ff0:	d929      	bls.n	8016046 <_strtod_l+0x1a6>
 8015ff2:	4622      	mov	r2, r4
 8015ff4:	f8d8 1000 	ldr.w	r1, [r8]
 8015ff8:	f002 ffc0 	bl	8018f7c <strncmp>
 8015ffc:	2800      	cmp	r0, #0
 8015ffe:	d031      	beq.n	8016064 <_strtod_l+0x1c4>
 8016000:	2000      	movs	r0, #0
 8016002:	9c05      	ldr	r4, [sp, #20]
 8016004:	9004      	str	r0, [sp, #16]
 8016006:	463b      	mov	r3, r7
 8016008:	4602      	mov	r2, r0
 801600a:	2b65      	cmp	r3, #101	; 0x65
 801600c:	d001      	beq.n	8016012 <_strtod_l+0x172>
 801600e:	2b45      	cmp	r3, #69	; 0x45
 8016010:	d114      	bne.n	801603c <_strtod_l+0x19c>
 8016012:	b924      	cbnz	r4, 801601e <_strtod_l+0x17e>
 8016014:	b910      	cbnz	r0, 801601c <_strtod_l+0x17c>
 8016016:	9b06      	ldr	r3, [sp, #24]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d09e      	beq.n	8015f5a <_strtod_l+0xba>
 801601c:	2400      	movs	r4, #0
 801601e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016020:	1c73      	adds	r3, r6, #1
 8016022:	931b      	str	r3, [sp, #108]	; 0x6c
 8016024:	7873      	ldrb	r3, [r6, #1]
 8016026:	2b2b      	cmp	r3, #43	; 0x2b
 8016028:	d078      	beq.n	801611c <_strtod_l+0x27c>
 801602a:	2b2d      	cmp	r3, #45	; 0x2d
 801602c:	d070      	beq.n	8016110 <_strtod_l+0x270>
 801602e:	f04f 0c00 	mov.w	ip, #0
 8016032:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016036:	2f09      	cmp	r7, #9
 8016038:	d97c      	bls.n	8016134 <_strtod_l+0x294>
 801603a:	961b      	str	r6, [sp, #108]	; 0x6c
 801603c:	f04f 0e00 	mov.w	lr, #0
 8016040:	e09a      	b.n	8016178 <_strtod_l+0x2d8>
 8016042:	2300      	movs	r3, #0
 8016044:	e7c7      	b.n	8015fd6 <_strtod_l+0x136>
 8016046:	9905      	ldr	r1, [sp, #20]
 8016048:	2908      	cmp	r1, #8
 801604a:	bfdd      	ittte	le
 801604c:	9907      	ldrle	r1, [sp, #28]
 801604e:	fb02 3301 	mlale	r3, r2, r1, r3
 8016052:	9307      	strle	r3, [sp, #28]
 8016054:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016058:	9b05      	ldr	r3, [sp, #20]
 801605a:	3001      	adds	r0, #1
 801605c:	3301      	adds	r3, #1
 801605e:	9305      	str	r3, [sp, #20]
 8016060:	901b      	str	r0, [sp, #108]	; 0x6c
 8016062:	e7bf      	b.n	8015fe4 <_strtod_l+0x144>
 8016064:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016066:	191a      	adds	r2, r3, r4
 8016068:	921b      	str	r2, [sp, #108]	; 0x6c
 801606a:	9a05      	ldr	r2, [sp, #20]
 801606c:	5d1b      	ldrb	r3, [r3, r4]
 801606e:	2a00      	cmp	r2, #0
 8016070:	d037      	beq.n	80160e2 <_strtod_l+0x242>
 8016072:	9c05      	ldr	r4, [sp, #20]
 8016074:	4602      	mov	r2, r0
 8016076:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801607a:	2909      	cmp	r1, #9
 801607c:	d913      	bls.n	80160a6 <_strtod_l+0x206>
 801607e:	2101      	movs	r1, #1
 8016080:	9104      	str	r1, [sp, #16]
 8016082:	e7c2      	b.n	801600a <_strtod_l+0x16a>
 8016084:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016086:	1c5a      	adds	r2, r3, #1
 8016088:	921b      	str	r2, [sp, #108]	; 0x6c
 801608a:	785b      	ldrb	r3, [r3, #1]
 801608c:	3001      	adds	r0, #1
 801608e:	2b30      	cmp	r3, #48	; 0x30
 8016090:	d0f8      	beq.n	8016084 <_strtod_l+0x1e4>
 8016092:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016096:	2a08      	cmp	r2, #8
 8016098:	f200 84e4 	bhi.w	8016a64 <_strtod_l+0xbc4>
 801609c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801609e:	9208      	str	r2, [sp, #32]
 80160a0:	4602      	mov	r2, r0
 80160a2:	2000      	movs	r0, #0
 80160a4:	4604      	mov	r4, r0
 80160a6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80160aa:	f100 0101 	add.w	r1, r0, #1
 80160ae:	d012      	beq.n	80160d6 <_strtod_l+0x236>
 80160b0:	440a      	add	r2, r1
 80160b2:	eb00 0c04 	add.w	ip, r0, r4
 80160b6:	4621      	mov	r1, r4
 80160b8:	270a      	movs	r7, #10
 80160ba:	458c      	cmp	ip, r1
 80160bc:	d113      	bne.n	80160e6 <_strtod_l+0x246>
 80160be:	1821      	adds	r1, r4, r0
 80160c0:	2908      	cmp	r1, #8
 80160c2:	f104 0401 	add.w	r4, r4, #1
 80160c6:	4404      	add	r4, r0
 80160c8:	dc19      	bgt.n	80160fe <_strtod_l+0x25e>
 80160ca:	9b07      	ldr	r3, [sp, #28]
 80160cc:	210a      	movs	r1, #10
 80160ce:	fb01 e303 	mla	r3, r1, r3, lr
 80160d2:	9307      	str	r3, [sp, #28]
 80160d4:	2100      	movs	r1, #0
 80160d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160d8:	1c58      	adds	r0, r3, #1
 80160da:	901b      	str	r0, [sp, #108]	; 0x6c
 80160dc:	785b      	ldrb	r3, [r3, #1]
 80160de:	4608      	mov	r0, r1
 80160e0:	e7c9      	b.n	8016076 <_strtod_l+0x1d6>
 80160e2:	9805      	ldr	r0, [sp, #20]
 80160e4:	e7d3      	b.n	801608e <_strtod_l+0x1ee>
 80160e6:	2908      	cmp	r1, #8
 80160e8:	f101 0101 	add.w	r1, r1, #1
 80160ec:	dc03      	bgt.n	80160f6 <_strtod_l+0x256>
 80160ee:	9b07      	ldr	r3, [sp, #28]
 80160f0:	437b      	muls	r3, r7
 80160f2:	9307      	str	r3, [sp, #28]
 80160f4:	e7e1      	b.n	80160ba <_strtod_l+0x21a>
 80160f6:	2910      	cmp	r1, #16
 80160f8:	bfd8      	it	le
 80160fa:	437d      	mulle	r5, r7
 80160fc:	e7dd      	b.n	80160ba <_strtod_l+0x21a>
 80160fe:	2c10      	cmp	r4, #16
 8016100:	bfdc      	itt	le
 8016102:	210a      	movle	r1, #10
 8016104:	fb01 e505 	mlale	r5, r1, r5, lr
 8016108:	e7e4      	b.n	80160d4 <_strtod_l+0x234>
 801610a:	2301      	movs	r3, #1
 801610c:	9304      	str	r3, [sp, #16]
 801610e:	e781      	b.n	8016014 <_strtod_l+0x174>
 8016110:	f04f 0c01 	mov.w	ip, #1
 8016114:	1cb3      	adds	r3, r6, #2
 8016116:	931b      	str	r3, [sp, #108]	; 0x6c
 8016118:	78b3      	ldrb	r3, [r6, #2]
 801611a:	e78a      	b.n	8016032 <_strtod_l+0x192>
 801611c:	f04f 0c00 	mov.w	ip, #0
 8016120:	e7f8      	b.n	8016114 <_strtod_l+0x274>
 8016122:	bf00      	nop
 8016124:	080194ec 	.word	0x080194ec
 8016128:	7ff00000 	.word	0x7ff00000
 801612c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801612e:	1c5f      	adds	r7, r3, #1
 8016130:	971b      	str	r7, [sp, #108]	; 0x6c
 8016132:	785b      	ldrb	r3, [r3, #1]
 8016134:	2b30      	cmp	r3, #48	; 0x30
 8016136:	d0f9      	beq.n	801612c <_strtod_l+0x28c>
 8016138:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801613c:	2f08      	cmp	r7, #8
 801613e:	f63f af7d 	bhi.w	801603c <_strtod_l+0x19c>
 8016142:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016146:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016148:	930a      	str	r3, [sp, #40]	; 0x28
 801614a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801614c:	1c5f      	adds	r7, r3, #1
 801614e:	971b      	str	r7, [sp, #108]	; 0x6c
 8016150:	785b      	ldrb	r3, [r3, #1]
 8016152:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016156:	f1b8 0f09 	cmp.w	r8, #9
 801615a:	d937      	bls.n	80161cc <_strtod_l+0x32c>
 801615c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801615e:	1a7f      	subs	r7, r7, r1
 8016160:	2f08      	cmp	r7, #8
 8016162:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016166:	dc37      	bgt.n	80161d8 <_strtod_l+0x338>
 8016168:	45be      	cmp	lr, r7
 801616a:	bfa8      	it	ge
 801616c:	46be      	movge	lr, r7
 801616e:	f1bc 0f00 	cmp.w	ip, #0
 8016172:	d001      	beq.n	8016178 <_strtod_l+0x2d8>
 8016174:	f1ce 0e00 	rsb	lr, lr, #0
 8016178:	2c00      	cmp	r4, #0
 801617a:	d151      	bne.n	8016220 <_strtod_l+0x380>
 801617c:	2800      	cmp	r0, #0
 801617e:	f47f aece 	bne.w	8015f1e <_strtod_l+0x7e>
 8016182:	9a06      	ldr	r2, [sp, #24]
 8016184:	2a00      	cmp	r2, #0
 8016186:	f47f aeca 	bne.w	8015f1e <_strtod_l+0x7e>
 801618a:	9a04      	ldr	r2, [sp, #16]
 801618c:	2a00      	cmp	r2, #0
 801618e:	f47f aee4 	bne.w	8015f5a <_strtod_l+0xba>
 8016192:	2b4e      	cmp	r3, #78	; 0x4e
 8016194:	d027      	beq.n	80161e6 <_strtod_l+0x346>
 8016196:	dc21      	bgt.n	80161dc <_strtod_l+0x33c>
 8016198:	2b49      	cmp	r3, #73	; 0x49
 801619a:	f47f aede 	bne.w	8015f5a <_strtod_l+0xba>
 801619e:	49a0      	ldr	r1, [pc, #640]	; (8016420 <_strtod_l+0x580>)
 80161a0:	a81b      	add	r0, sp, #108	; 0x6c
 80161a2:	f002 f801 	bl	80181a8 <__match>
 80161a6:	2800      	cmp	r0, #0
 80161a8:	f43f aed7 	beq.w	8015f5a <_strtod_l+0xba>
 80161ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161ae:	499d      	ldr	r1, [pc, #628]	; (8016424 <_strtod_l+0x584>)
 80161b0:	3b01      	subs	r3, #1
 80161b2:	a81b      	add	r0, sp, #108	; 0x6c
 80161b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80161b6:	f001 fff7 	bl	80181a8 <__match>
 80161ba:	b910      	cbnz	r0, 80161c2 <_strtod_l+0x322>
 80161bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161be:	3301      	adds	r3, #1
 80161c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80161c2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016438 <_strtod_l+0x598>
 80161c6:	f04f 0a00 	mov.w	sl, #0
 80161ca:	e6a8      	b.n	8015f1e <_strtod_l+0x7e>
 80161cc:	210a      	movs	r1, #10
 80161ce:	fb01 3e0e 	mla	lr, r1, lr, r3
 80161d2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80161d6:	e7b8      	b.n	801614a <_strtod_l+0x2aa>
 80161d8:	46be      	mov	lr, r7
 80161da:	e7c8      	b.n	801616e <_strtod_l+0x2ce>
 80161dc:	2b69      	cmp	r3, #105	; 0x69
 80161de:	d0de      	beq.n	801619e <_strtod_l+0x2fe>
 80161e0:	2b6e      	cmp	r3, #110	; 0x6e
 80161e2:	f47f aeba 	bne.w	8015f5a <_strtod_l+0xba>
 80161e6:	4990      	ldr	r1, [pc, #576]	; (8016428 <_strtod_l+0x588>)
 80161e8:	a81b      	add	r0, sp, #108	; 0x6c
 80161ea:	f001 ffdd 	bl	80181a8 <__match>
 80161ee:	2800      	cmp	r0, #0
 80161f0:	f43f aeb3 	beq.w	8015f5a <_strtod_l+0xba>
 80161f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161f6:	781b      	ldrb	r3, [r3, #0]
 80161f8:	2b28      	cmp	r3, #40	; 0x28
 80161fa:	d10e      	bne.n	801621a <_strtod_l+0x37a>
 80161fc:	aa1e      	add	r2, sp, #120	; 0x78
 80161fe:	498b      	ldr	r1, [pc, #556]	; (801642c <_strtod_l+0x58c>)
 8016200:	a81b      	add	r0, sp, #108	; 0x6c
 8016202:	f001 ffe5 	bl	80181d0 <__hexnan>
 8016206:	2805      	cmp	r0, #5
 8016208:	d107      	bne.n	801621a <_strtod_l+0x37a>
 801620a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801620c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016210:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016214:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016218:	e681      	b.n	8015f1e <_strtod_l+0x7e>
 801621a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016440 <_strtod_l+0x5a0>
 801621e:	e7d2      	b.n	80161c6 <_strtod_l+0x326>
 8016220:	ebae 0302 	sub.w	r3, lr, r2
 8016224:	9306      	str	r3, [sp, #24]
 8016226:	9b05      	ldr	r3, [sp, #20]
 8016228:	9807      	ldr	r0, [sp, #28]
 801622a:	2b00      	cmp	r3, #0
 801622c:	bf08      	it	eq
 801622e:	4623      	moveq	r3, r4
 8016230:	2c10      	cmp	r4, #16
 8016232:	9305      	str	r3, [sp, #20]
 8016234:	46a0      	mov	r8, r4
 8016236:	bfa8      	it	ge
 8016238:	f04f 0810 	movge.w	r8, #16
 801623c:	f7f2 f89a 	bl	8008374 <__aeabi_ui2d>
 8016240:	2c09      	cmp	r4, #9
 8016242:	4682      	mov	sl, r0
 8016244:	468b      	mov	fp, r1
 8016246:	dc13      	bgt.n	8016270 <_strtod_l+0x3d0>
 8016248:	9b06      	ldr	r3, [sp, #24]
 801624a:	2b00      	cmp	r3, #0
 801624c:	f43f ae67 	beq.w	8015f1e <_strtod_l+0x7e>
 8016250:	9b06      	ldr	r3, [sp, #24]
 8016252:	dd7a      	ble.n	801634a <_strtod_l+0x4aa>
 8016254:	2b16      	cmp	r3, #22
 8016256:	dc61      	bgt.n	801631c <_strtod_l+0x47c>
 8016258:	4a75      	ldr	r2, [pc, #468]	; (8016430 <_strtod_l+0x590>)
 801625a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801625e:	e9de 0100 	ldrd	r0, r1, [lr]
 8016262:	4652      	mov	r2, sl
 8016264:	465b      	mov	r3, fp
 8016266:	f7f2 f8ff 	bl	8008468 <__aeabi_dmul>
 801626a:	4682      	mov	sl, r0
 801626c:	468b      	mov	fp, r1
 801626e:	e656      	b.n	8015f1e <_strtod_l+0x7e>
 8016270:	4b6f      	ldr	r3, [pc, #444]	; (8016430 <_strtod_l+0x590>)
 8016272:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016276:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801627a:	f7f2 f8f5 	bl	8008468 <__aeabi_dmul>
 801627e:	4606      	mov	r6, r0
 8016280:	4628      	mov	r0, r5
 8016282:	460f      	mov	r7, r1
 8016284:	f7f2 f876 	bl	8008374 <__aeabi_ui2d>
 8016288:	4602      	mov	r2, r0
 801628a:	460b      	mov	r3, r1
 801628c:	4630      	mov	r0, r6
 801628e:	4639      	mov	r1, r7
 8016290:	f7f1 ff34 	bl	80080fc <__adddf3>
 8016294:	2c0f      	cmp	r4, #15
 8016296:	4682      	mov	sl, r0
 8016298:	468b      	mov	fp, r1
 801629a:	ddd5      	ble.n	8016248 <_strtod_l+0x3a8>
 801629c:	9b06      	ldr	r3, [sp, #24]
 801629e:	eba4 0808 	sub.w	r8, r4, r8
 80162a2:	4498      	add	r8, r3
 80162a4:	f1b8 0f00 	cmp.w	r8, #0
 80162a8:	f340 8096 	ble.w	80163d8 <_strtod_l+0x538>
 80162ac:	f018 030f 	ands.w	r3, r8, #15
 80162b0:	d00a      	beq.n	80162c8 <_strtod_l+0x428>
 80162b2:	495f      	ldr	r1, [pc, #380]	; (8016430 <_strtod_l+0x590>)
 80162b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80162b8:	4652      	mov	r2, sl
 80162ba:	465b      	mov	r3, fp
 80162bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162c0:	f7f2 f8d2 	bl	8008468 <__aeabi_dmul>
 80162c4:	4682      	mov	sl, r0
 80162c6:	468b      	mov	fp, r1
 80162c8:	f038 080f 	bics.w	r8, r8, #15
 80162cc:	d073      	beq.n	80163b6 <_strtod_l+0x516>
 80162ce:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80162d2:	dd47      	ble.n	8016364 <_strtod_l+0x4c4>
 80162d4:	2400      	movs	r4, #0
 80162d6:	46a0      	mov	r8, r4
 80162d8:	9407      	str	r4, [sp, #28]
 80162da:	9405      	str	r4, [sp, #20]
 80162dc:	2322      	movs	r3, #34	; 0x22
 80162de:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016438 <_strtod_l+0x598>
 80162e2:	f8c9 3000 	str.w	r3, [r9]
 80162e6:	f04f 0a00 	mov.w	sl, #0
 80162ea:	9b07      	ldr	r3, [sp, #28]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	f43f ae16 	beq.w	8015f1e <_strtod_l+0x7e>
 80162f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80162f4:	4648      	mov	r0, r9
 80162f6:	f002 f8a8 	bl	801844a <_Bfree>
 80162fa:	9905      	ldr	r1, [sp, #20]
 80162fc:	4648      	mov	r0, r9
 80162fe:	f002 f8a4 	bl	801844a <_Bfree>
 8016302:	4641      	mov	r1, r8
 8016304:	4648      	mov	r0, r9
 8016306:	f002 f8a0 	bl	801844a <_Bfree>
 801630a:	9907      	ldr	r1, [sp, #28]
 801630c:	4648      	mov	r0, r9
 801630e:	f002 f89c 	bl	801844a <_Bfree>
 8016312:	4621      	mov	r1, r4
 8016314:	4648      	mov	r0, r9
 8016316:	f002 f898 	bl	801844a <_Bfree>
 801631a:	e600      	b.n	8015f1e <_strtod_l+0x7e>
 801631c:	9a06      	ldr	r2, [sp, #24]
 801631e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016322:	4293      	cmp	r3, r2
 8016324:	dbba      	blt.n	801629c <_strtod_l+0x3fc>
 8016326:	4d42      	ldr	r5, [pc, #264]	; (8016430 <_strtod_l+0x590>)
 8016328:	f1c4 040f 	rsb	r4, r4, #15
 801632c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016330:	4652      	mov	r2, sl
 8016332:	465b      	mov	r3, fp
 8016334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016338:	f7f2 f896 	bl	8008468 <__aeabi_dmul>
 801633c:	9b06      	ldr	r3, [sp, #24]
 801633e:	1b1c      	subs	r4, r3, r4
 8016340:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016344:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016348:	e78d      	b.n	8016266 <_strtod_l+0x3c6>
 801634a:	f113 0f16 	cmn.w	r3, #22
 801634e:	dba5      	blt.n	801629c <_strtod_l+0x3fc>
 8016350:	4a37      	ldr	r2, [pc, #220]	; (8016430 <_strtod_l+0x590>)
 8016352:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016356:	e9d2 2300 	ldrd	r2, r3, [r2]
 801635a:	4650      	mov	r0, sl
 801635c:	4659      	mov	r1, fp
 801635e:	f7f2 f9ad 	bl	80086bc <__aeabi_ddiv>
 8016362:	e782      	b.n	801626a <_strtod_l+0x3ca>
 8016364:	2300      	movs	r3, #0
 8016366:	4e33      	ldr	r6, [pc, #204]	; (8016434 <_strtod_l+0x594>)
 8016368:	ea4f 1828 	mov.w	r8, r8, asr #4
 801636c:	4650      	mov	r0, sl
 801636e:	4659      	mov	r1, fp
 8016370:	461d      	mov	r5, r3
 8016372:	f1b8 0f01 	cmp.w	r8, #1
 8016376:	dc21      	bgt.n	80163bc <_strtod_l+0x51c>
 8016378:	b10b      	cbz	r3, 801637e <_strtod_l+0x4de>
 801637a:	4682      	mov	sl, r0
 801637c:	468b      	mov	fp, r1
 801637e:	4b2d      	ldr	r3, [pc, #180]	; (8016434 <_strtod_l+0x594>)
 8016380:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016384:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016388:	4652      	mov	r2, sl
 801638a:	465b      	mov	r3, fp
 801638c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016390:	f7f2 f86a 	bl	8008468 <__aeabi_dmul>
 8016394:	4b28      	ldr	r3, [pc, #160]	; (8016438 <_strtod_l+0x598>)
 8016396:	460a      	mov	r2, r1
 8016398:	400b      	ands	r3, r1
 801639a:	4928      	ldr	r1, [pc, #160]	; (801643c <_strtod_l+0x59c>)
 801639c:	428b      	cmp	r3, r1
 801639e:	4682      	mov	sl, r0
 80163a0:	d898      	bhi.n	80162d4 <_strtod_l+0x434>
 80163a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80163a6:	428b      	cmp	r3, r1
 80163a8:	bf86      	itte	hi
 80163aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016444 <_strtod_l+0x5a4>
 80163ae:	f04f 3aff 	movhi.w	sl, #4294967295
 80163b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80163b6:	2300      	movs	r3, #0
 80163b8:	9304      	str	r3, [sp, #16]
 80163ba:	e077      	b.n	80164ac <_strtod_l+0x60c>
 80163bc:	f018 0f01 	tst.w	r8, #1
 80163c0:	d006      	beq.n	80163d0 <_strtod_l+0x530>
 80163c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80163c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ca:	f7f2 f84d 	bl	8008468 <__aeabi_dmul>
 80163ce:	2301      	movs	r3, #1
 80163d0:	3501      	adds	r5, #1
 80163d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80163d6:	e7cc      	b.n	8016372 <_strtod_l+0x4d2>
 80163d8:	d0ed      	beq.n	80163b6 <_strtod_l+0x516>
 80163da:	f1c8 0800 	rsb	r8, r8, #0
 80163de:	f018 020f 	ands.w	r2, r8, #15
 80163e2:	d00a      	beq.n	80163fa <_strtod_l+0x55a>
 80163e4:	4b12      	ldr	r3, [pc, #72]	; (8016430 <_strtod_l+0x590>)
 80163e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80163ea:	4650      	mov	r0, sl
 80163ec:	4659      	mov	r1, fp
 80163ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163f2:	f7f2 f963 	bl	80086bc <__aeabi_ddiv>
 80163f6:	4682      	mov	sl, r0
 80163f8:	468b      	mov	fp, r1
 80163fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80163fe:	d0da      	beq.n	80163b6 <_strtod_l+0x516>
 8016400:	f1b8 0f1f 	cmp.w	r8, #31
 8016404:	dd20      	ble.n	8016448 <_strtod_l+0x5a8>
 8016406:	2400      	movs	r4, #0
 8016408:	46a0      	mov	r8, r4
 801640a:	9407      	str	r4, [sp, #28]
 801640c:	9405      	str	r4, [sp, #20]
 801640e:	2322      	movs	r3, #34	; 0x22
 8016410:	f04f 0a00 	mov.w	sl, #0
 8016414:	f04f 0b00 	mov.w	fp, #0
 8016418:	f8c9 3000 	str.w	r3, [r9]
 801641c:	e765      	b.n	80162ea <_strtod_l+0x44a>
 801641e:	bf00      	nop
 8016420:	0801949e 	.word	0x0801949e
 8016424:	08019543 	.word	0x08019543
 8016428:	080194a6 	.word	0x080194a6
 801642c:	08019500 	.word	0x08019500
 8016430:	08019580 	.word	0x08019580
 8016434:	08019558 	.word	0x08019558
 8016438:	7ff00000 	.word	0x7ff00000
 801643c:	7ca00000 	.word	0x7ca00000
 8016440:	fff80000 	.word	0xfff80000
 8016444:	7fefffff 	.word	0x7fefffff
 8016448:	f018 0310 	ands.w	r3, r8, #16
 801644c:	bf18      	it	ne
 801644e:	236a      	movne	r3, #106	; 0x6a
 8016450:	4da0      	ldr	r5, [pc, #640]	; (80166d4 <_strtod_l+0x834>)
 8016452:	9304      	str	r3, [sp, #16]
 8016454:	4650      	mov	r0, sl
 8016456:	4659      	mov	r1, fp
 8016458:	2300      	movs	r3, #0
 801645a:	f1b8 0f00 	cmp.w	r8, #0
 801645e:	f300 810a 	bgt.w	8016676 <_strtod_l+0x7d6>
 8016462:	b10b      	cbz	r3, 8016468 <_strtod_l+0x5c8>
 8016464:	4682      	mov	sl, r0
 8016466:	468b      	mov	fp, r1
 8016468:	9b04      	ldr	r3, [sp, #16]
 801646a:	b1bb      	cbz	r3, 801649c <_strtod_l+0x5fc>
 801646c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016470:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016474:	2b00      	cmp	r3, #0
 8016476:	4659      	mov	r1, fp
 8016478:	dd10      	ble.n	801649c <_strtod_l+0x5fc>
 801647a:	2b1f      	cmp	r3, #31
 801647c:	f340 8107 	ble.w	801668e <_strtod_l+0x7ee>
 8016480:	2b34      	cmp	r3, #52	; 0x34
 8016482:	bfde      	ittt	le
 8016484:	3b20      	suble	r3, #32
 8016486:	f04f 32ff 	movle.w	r2, #4294967295
 801648a:	fa02 f303 	lslle.w	r3, r2, r3
 801648e:	f04f 0a00 	mov.w	sl, #0
 8016492:	bfcc      	ite	gt
 8016494:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016498:	ea03 0b01 	andle.w	fp, r3, r1
 801649c:	2200      	movs	r2, #0
 801649e:	2300      	movs	r3, #0
 80164a0:	4650      	mov	r0, sl
 80164a2:	4659      	mov	r1, fp
 80164a4:	f7f2 fa48 	bl	8008938 <__aeabi_dcmpeq>
 80164a8:	2800      	cmp	r0, #0
 80164aa:	d1ac      	bne.n	8016406 <_strtod_l+0x566>
 80164ac:	9b07      	ldr	r3, [sp, #28]
 80164ae:	9300      	str	r3, [sp, #0]
 80164b0:	9a05      	ldr	r2, [sp, #20]
 80164b2:	9908      	ldr	r1, [sp, #32]
 80164b4:	4623      	mov	r3, r4
 80164b6:	4648      	mov	r0, r9
 80164b8:	f002 f819 	bl	80184ee <__s2b>
 80164bc:	9007      	str	r0, [sp, #28]
 80164be:	2800      	cmp	r0, #0
 80164c0:	f43f af08 	beq.w	80162d4 <_strtod_l+0x434>
 80164c4:	9a06      	ldr	r2, [sp, #24]
 80164c6:	9b06      	ldr	r3, [sp, #24]
 80164c8:	2a00      	cmp	r2, #0
 80164ca:	f1c3 0300 	rsb	r3, r3, #0
 80164ce:	bfa8      	it	ge
 80164d0:	2300      	movge	r3, #0
 80164d2:	930e      	str	r3, [sp, #56]	; 0x38
 80164d4:	2400      	movs	r4, #0
 80164d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80164da:	9316      	str	r3, [sp, #88]	; 0x58
 80164dc:	46a0      	mov	r8, r4
 80164de:	9b07      	ldr	r3, [sp, #28]
 80164e0:	4648      	mov	r0, r9
 80164e2:	6859      	ldr	r1, [r3, #4]
 80164e4:	f001 ff7d 	bl	80183e2 <_Balloc>
 80164e8:	9005      	str	r0, [sp, #20]
 80164ea:	2800      	cmp	r0, #0
 80164ec:	f43f aef6 	beq.w	80162dc <_strtod_l+0x43c>
 80164f0:	9b07      	ldr	r3, [sp, #28]
 80164f2:	691a      	ldr	r2, [r3, #16]
 80164f4:	3202      	adds	r2, #2
 80164f6:	f103 010c 	add.w	r1, r3, #12
 80164fa:	0092      	lsls	r2, r2, #2
 80164fc:	300c      	adds	r0, #12
 80164fe:	f7fd fdab 	bl	8014058 <memcpy>
 8016502:	aa1e      	add	r2, sp, #120	; 0x78
 8016504:	a91d      	add	r1, sp, #116	; 0x74
 8016506:	ec4b ab10 	vmov	d0, sl, fp
 801650a:	4648      	mov	r0, r9
 801650c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016510:	f002 faa8 	bl	8018a64 <__d2b>
 8016514:	901c      	str	r0, [sp, #112]	; 0x70
 8016516:	2800      	cmp	r0, #0
 8016518:	f43f aee0 	beq.w	80162dc <_strtod_l+0x43c>
 801651c:	2101      	movs	r1, #1
 801651e:	4648      	mov	r0, r9
 8016520:	f002 f871 	bl	8018606 <__i2b>
 8016524:	4680      	mov	r8, r0
 8016526:	2800      	cmp	r0, #0
 8016528:	f43f aed8 	beq.w	80162dc <_strtod_l+0x43c>
 801652c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801652e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016530:	2e00      	cmp	r6, #0
 8016532:	bfab      	itete	ge
 8016534:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016536:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016538:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801653a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801653c:	bfac      	ite	ge
 801653e:	18f7      	addge	r7, r6, r3
 8016540:	1b9d      	sublt	r5, r3, r6
 8016542:	9b04      	ldr	r3, [sp, #16]
 8016544:	1af6      	subs	r6, r6, r3
 8016546:	4416      	add	r6, r2
 8016548:	4b63      	ldr	r3, [pc, #396]	; (80166d8 <_strtod_l+0x838>)
 801654a:	3e01      	subs	r6, #1
 801654c:	429e      	cmp	r6, r3
 801654e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016552:	f280 80af 	bge.w	80166b4 <_strtod_l+0x814>
 8016556:	1b9b      	subs	r3, r3, r6
 8016558:	2b1f      	cmp	r3, #31
 801655a:	eba2 0203 	sub.w	r2, r2, r3
 801655e:	f04f 0101 	mov.w	r1, #1
 8016562:	f300 809b 	bgt.w	801669c <_strtod_l+0x7fc>
 8016566:	fa01 f303 	lsl.w	r3, r1, r3
 801656a:	930f      	str	r3, [sp, #60]	; 0x3c
 801656c:	2300      	movs	r3, #0
 801656e:	930a      	str	r3, [sp, #40]	; 0x28
 8016570:	18be      	adds	r6, r7, r2
 8016572:	9b04      	ldr	r3, [sp, #16]
 8016574:	42b7      	cmp	r7, r6
 8016576:	4415      	add	r5, r2
 8016578:	441d      	add	r5, r3
 801657a:	463b      	mov	r3, r7
 801657c:	bfa8      	it	ge
 801657e:	4633      	movge	r3, r6
 8016580:	42ab      	cmp	r3, r5
 8016582:	bfa8      	it	ge
 8016584:	462b      	movge	r3, r5
 8016586:	2b00      	cmp	r3, #0
 8016588:	bfc2      	ittt	gt
 801658a:	1af6      	subgt	r6, r6, r3
 801658c:	1aed      	subgt	r5, r5, r3
 801658e:	1aff      	subgt	r7, r7, r3
 8016590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016592:	b1bb      	cbz	r3, 80165c4 <_strtod_l+0x724>
 8016594:	4641      	mov	r1, r8
 8016596:	461a      	mov	r2, r3
 8016598:	4648      	mov	r0, r9
 801659a:	f002 f8d3 	bl	8018744 <__pow5mult>
 801659e:	4680      	mov	r8, r0
 80165a0:	2800      	cmp	r0, #0
 80165a2:	f43f ae9b 	beq.w	80162dc <_strtod_l+0x43c>
 80165a6:	4601      	mov	r1, r0
 80165a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80165aa:	4648      	mov	r0, r9
 80165ac:	f002 f834 	bl	8018618 <__multiply>
 80165b0:	900c      	str	r0, [sp, #48]	; 0x30
 80165b2:	2800      	cmp	r0, #0
 80165b4:	f43f ae92 	beq.w	80162dc <_strtod_l+0x43c>
 80165b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80165ba:	4648      	mov	r0, r9
 80165bc:	f001 ff45 	bl	801844a <_Bfree>
 80165c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165c2:	931c      	str	r3, [sp, #112]	; 0x70
 80165c4:	2e00      	cmp	r6, #0
 80165c6:	dc7a      	bgt.n	80166be <_strtod_l+0x81e>
 80165c8:	9b06      	ldr	r3, [sp, #24]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	dd08      	ble.n	80165e0 <_strtod_l+0x740>
 80165ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80165d0:	9905      	ldr	r1, [sp, #20]
 80165d2:	4648      	mov	r0, r9
 80165d4:	f002 f8b6 	bl	8018744 <__pow5mult>
 80165d8:	9005      	str	r0, [sp, #20]
 80165da:	2800      	cmp	r0, #0
 80165dc:	f43f ae7e 	beq.w	80162dc <_strtod_l+0x43c>
 80165e0:	2d00      	cmp	r5, #0
 80165e2:	dd08      	ble.n	80165f6 <_strtod_l+0x756>
 80165e4:	462a      	mov	r2, r5
 80165e6:	9905      	ldr	r1, [sp, #20]
 80165e8:	4648      	mov	r0, r9
 80165ea:	f002 f8f9 	bl	80187e0 <__lshift>
 80165ee:	9005      	str	r0, [sp, #20]
 80165f0:	2800      	cmp	r0, #0
 80165f2:	f43f ae73 	beq.w	80162dc <_strtod_l+0x43c>
 80165f6:	2f00      	cmp	r7, #0
 80165f8:	dd08      	ble.n	801660c <_strtod_l+0x76c>
 80165fa:	4641      	mov	r1, r8
 80165fc:	463a      	mov	r2, r7
 80165fe:	4648      	mov	r0, r9
 8016600:	f002 f8ee 	bl	80187e0 <__lshift>
 8016604:	4680      	mov	r8, r0
 8016606:	2800      	cmp	r0, #0
 8016608:	f43f ae68 	beq.w	80162dc <_strtod_l+0x43c>
 801660c:	9a05      	ldr	r2, [sp, #20]
 801660e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016610:	4648      	mov	r0, r9
 8016612:	f002 f953 	bl	80188bc <__mdiff>
 8016616:	4604      	mov	r4, r0
 8016618:	2800      	cmp	r0, #0
 801661a:	f43f ae5f 	beq.w	80162dc <_strtod_l+0x43c>
 801661e:	68c3      	ldr	r3, [r0, #12]
 8016620:	930c      	str	r3, [sp, #48]	; 0x30
 8016622:	2300      	movs	r3, #0
 8016624:	60c3      	str	r3, [r0, #12]
 8016626:	4641      	mov	r1, r8
 8016628:	f002 f92e 	bl	8018888 <__mcmp>
 801662c:	2800      	cmp	r0, #0
 801662e:	da55      	bge.n	80166dc <_strtod_l+0x83c>
 8016630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016632:	b9e3      	cbnz	r3, 801666e <_strtod_l+0x7ce>
 8016634:	f1ba 0f00 	cmp.w	sl, #0
 8016638:	d119      	bne.n	801666e <_strtod_l+0x7ce>
 801663a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801663e:	b9b3      	cbnz	r3, 801666e <_strtod_l+0x7ce>
 8016640:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016644:	0d1b      	lsrs	r3, r3, #20
 8016646:	051b      	lsls	r3, r3, #20
 8016648:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801664c:	d90f      	bls.n	801666e <_strtod_l+0x7ce>
 801664e:	6963      	ldr	r3, [r4, #20]
 8016650:	b913      	cbnz	r3, 8016658 <_strtod_l+0x7b8>
 8016652:	6923      	ldr	r3, [r4, #16]
 8016654:	2b01      	cmp	r3, #1
 8016656:	dd0a      	ble.n	801666e <_strtod_l+0x7ce>
 8016658:	4621      	mov	r1, r4
 801665a:	2201      	movs	r2, #1
 801665c:	4648      	mov	r0, r9
 801665e:	f002 f8bf 	bl	80187e0 <__lshift>
 8016662:	4641      	mov	r1, r8
 8016664:	4604      	mov	r4, r0
 8016666:	f002 f90f 	bl	8018888 <__mcmp>
 801666a:	2800      	cmp	r0, #0
 801666c:	dc67      	bgt.n	801673e <_strtod_l+0x89e>
 801666e:	9b04      	ldr	r3, [sp, #16]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d171      	bne.n	8016758 <_strtod_l+0x8b8>
 8016674:	e63d      	b.n	80162f2 <_strtod_l+0x452>
 8016676:	f018 0f01 	tst.w	r8, #1
 801667a:	d004      	beq.n	8016686 <_strtod_l+0x7e6>
 801667c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016680:	f7f1 fef2 	bl	8008468 <__aeabi_dmul>
 8016684:	2301      	movs	r3, #1
 8016686:	ea4f 0868 	mov.w	r8, r8, asr #1
 801668a:	3508      	adds	r5, #8
 801668c:	e6e5      	b.n	801645a <_strtod_l+0x5ba>
 801668e:	f04f 32ff 	mov.w	r2, #4294967295
 8016692:	fa02 f303 	lsl.w	r3, r2, r3
 8016696:	ea03 0a0a 	and.w	sl, r3, sl
 801669a:	e6ff      	b.n	801649c <_strtod_l+0x5fc>
 801669c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80166a0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80166a4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80166a8:	36e2      	adds	r6, #226	; 0xe2
 80166aa:	fa01 f306 	lsl.w	r3, r1, r6
 80166ae:	930a      	str	r3, [sp, #40]	; 0x28
 80166b0:	910f      	str	r1, [sp, #60]	; 0x3c
 80166b2:	e75d      	b.n	8016570 <_strtod_l+0x6d0>
 80166b4:	2300      	movs	r3, #0
 80166b6:	930a      	str	r3, [sp, #40]	; 0x28
 80166b8:	2301      	movs	r3, #1
 80166ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80166bc:	e758      	b.n	8016570 <_strtod_l+0x6d0>
 80166be:	4632      	mov	r2, r6
 80166c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80166c2:	4648      	mov	r0, r9
 80166c4:	f002 f88c 	bl	80187e0 <__lshift>
 80166c8:	901c      	str	r0, [sp, #112]	; 0x70
 80166ca:	2800      	cmp	r0, #0
 80166cc:	f47f af7c 	bne.w	80165c8 <_strtod_l+0x728>
 80166d0:	e604      	b.n	80162dc <_strtod_l+0x43c>
 80166d2:	bf00      	nop
 80166d4:	08019518 	.word	0x08019518
 80166d8:	fffffc02 	.word	0xfffffc02
 80166dc:	465d      	mov	r5, fp
 80166de:	f040 8086 	bne.w	80167ee <_strtod_l+0x94e>
 80166e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80166e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80166e8:	b32a      	cbz	r2, 8016736 <_strtod_l+0x896>
 80166ea:	4aaf      	ldr	r2, [pc, #700]	; (80169a8 <_strtod_l+0xb08>)
 80166ec:	4293      	cmp	r3, r2
 80166ee:	d153      	bne.n	8016798 <_strtod_l+0x8f8>
 80166f0:	9b04      	ldr	r3, [sp, #16]
 80166f2:	4650      	mov	r0, sl
 80166f4:	b1d3      	cbz	r3, 801672c <_strtod_l+0x88c>
 80166f6:	4aad      	ldr	r2, [pc, #692]	; (80169ac <_strtod_l+0xb0c>)
 80166f8:	402a      	ands	r2, r5
 80166fa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80166fe:	f04f 31ff 	mov.w	r1, #4294967295
 8016702:	d816      	bhi.n	8016732 <_strtod_l+0x892>
 8016704:	0d12      	lsrs	r2, r2, #20
 8016706:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801670a:	fa01 f303 	lsl.w	r3, r1, r3
 801670e:	4298      	cmp	r0, r3
 8016710:	d142      	bne.n	8016798 <_strtod_l+0x8f8>
 8016712:	4ba7      	ldr	r3, [pc, #668]	; (80169b0 <_strtod_l+0xb10>)
 8016714:	429d      	cmp	r5, r3
 8016716:	d102      	bne.n	801671e <_strtod_l+0x87e>
 8016718:	3001      	adds	r0, #1
 801671a:	f43f addf 	beq.w	80162dc <_strtod_l+0x43c>
 801671e:	4ba3      	ldr	r3, [pc, #652]	; (80169ac <_strtod_l+0xb0c>)
 8016720:	402b      	ands	r3, r5
 8016722:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016726:	f04f 0a00 	mov.w	sl, #0
 801672a:	e7a0      	b.n	801666e <_strtod_l+0x7ce>
 801672c:	f04f 33ff 	mov.w	r3, #4294967295
 8016730:	e7ed      	b.n	801670e <_strtod_l+0x86e>
 8016732:	460b      	mov	r3, r1
 8016734:	e7eb      	b.n	801670e <_strtod_l+0x86e>
 8016736:	bb7b      	cbnz	r3, 8016798 <_strtod_l+0x8f8>
 8016738:	f1ba 0f00 	cmp.w	sl, #0
 801673c:	d12c      	bne.n	8016798 <_strtod_l+0x8f8>
 801673e:	9904      	ldr	r1, [sp, #16]
 8016740:	4a9a      	ldr	r2, [pc, #616]	; (80169ac <_strtod_l+0xb0c>)
 8016742:	465b      	mov	r3, fp
 8016744:	b1f1      	cbz	r1, 8016784 <_strtod_l+0x8e4>
 8016746:	ea02 010b 	and.w	r1, r2, fp
 801674a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801674e:	dc19      	bgt.n	8016784 <_strtod_l+0x8e4>
 8016750:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016754:	f77f ae5b 	ble.w	801640e <_strtod_l+0x56e>
 8016758:	4a96      	ldr	r2, [pc, #600]	; (80169b4 <_strtod_l+0xb14>)
 801675a:	2300      	movs	r3, #0
 801675c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016760:	4650      	mov	r0, sl
 8016762:	4659      	mov	r1, fp
 8016764:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016768:	f7f1 fe7e 	bl	8008468 <__aeabi_dmul>
 801676c:	4682      	mov	sl, r0
 801676e:	468b      	mov	fp, r1
 8016770:	2900      	cmp	r1, #0
 8016772:	f47f adbe 	bne.w	80162f2 <_strtod_l+0x452>
 8016776:	2800      	cmp	r0, #0
 8016778:	f47f adbb 	bne.w	80162f2 <_strtod_l+0x452>
 801677c:	2322      	movs	r3, #34	; 0x22
 801677e:	f8c9 3000 	str.w	r3, [r9]
 8016782:	e5b6      	b.n	80162f2 <_strtod_l+0x452>
 8016784:	4013      	ands	r3, r2
 8016786:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801678a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801678e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016792:	f04f 3aff 	mov.w	sl, #4294967295
 8016796:	e76a      	b.n	801666e <_strtod_l+0x7ce>
 8016798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801679a:	b193      	cbz	r3, 80167c2 <_strtod_l+0x922>
 801679c:	422b      	tst	r3, r5
 801679e:	f43f af66 	beq.w	801666e <_strtod_l+0x7ce>
 80167a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167a4:	9a04      	ldr	r2, [sp, #16]
 80167a6:	4650      	mov	r0, sl
 80167a8:	4659      	mov	r1, fp
 80167aa:	b173      	cbz	r3, 80167ca <_strtod_l+0x92a>
 80167ac:	f7ff fb5b 	bl	8015e66 <sulp>
 80167b0:	4602      	mov	r2, r0
 80167b2:	460b      	mov	r3, r1
 80167b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80167b8:	f7f1 fca0 	bl	80080fc <__adddf3>
 80167bc:	4682      	mov	sl, r0
 80167be:	468b      	mov	fp, r1
 80167c0:	e755      	b.n	801666e <_strtod_l+0x7ce>
 80167c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80167c4:	ea13 0f0a 	tst.w	r3, sl
 80167c8:	e7e9      	b.n	801679e <_strtod_l+0x8fe>
 80167ca:	f7ff fb4c 	bl	8015e66 <sulp>
 80167ce:	4602      	mov	r2, r0
 80167d0:	460b      	mov	r3, r1
 80167d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80167d6:	f7f1 fc8f 	bl	80080f8 <__aeabi_dsub>
 80167da:	2200      	movs	r2, #0
 80167dc:	2300      	movs	r3, #0
 80167de:	4682      	mov	sl, r0
 80167e0:	468b      	mov	fp, r1
 80167e2:	f7f2 f8a9 	bl	8008938 <__aeabi_dcmpeq>
 80167e6:	2800      	cmp	r0, #0
 80167e8:	f47f ae11 	bne.w	801640e <_strtod_l+0x56e>
 80167ec:	e73f      	b.n	801666e <_strtod_l+0x7ce>
 80167ee:	4641      	mov	r1, r8
 80167f0:	4620      	mov	r0, r4
 80167f2:	f002 f986 	bl	8018b02 <__ratio>
 80167f6:	ec57 6b10 	vmov	r6, r7, d0
 80167fa:	2200      	movs	r2, #0
 80167fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016800:	ee10 0a10 	vmov	r0, s0
 8016804:	4639      	mov	r1, r7
 8016806:	f7f2 f8ab 	bl	8008960 <__aeabi_dcmple>
 801680a:	2800      	cmp	r0, #0
 801680c:	d077      	beq.n	80168fe <_strtod_l+0xa5e>
 801680e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016810:	2b00      	cmp	r3, #0
 8016812:	d04a      	beq.n	80168aa <_strtod_l+0xa0a>
 8016814:	4b68      	ldr	r3, [pc, #416]	; (80169b8 <_strtod_l+0xb18>)
 8016816:	2200      	movs	r2, #0
 8016818:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801681c:	4f66      	ldr	r7, [pc, #408]	; (80169b8 <_strtod_l+0xb18>)
 801681e:	2600      	movs	r6, #0
 8016820:	4b62      	ldr	r3, [pc, #392]	; (80169ac <_strtod_l+0xb0c>)
 8016822:	402b      	ands	r3, r5
 8016824:	930f      	str	r3, [sp, #60]	; 0x3c
 8016826:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016828:	4b64      	ldr	r3, [pc, #400]	; (80169bc <_strtod_l+0xb1c>)
 801682a:	429a      	cmp	r2, r3
 801682c:	f040 80ce 	bne.w	80169cc <_strtod_l+0xb2c>
 8016830:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016834:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016838:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801683c:	ec4b ab10 	vmov	d0, sl, fp
 8016840:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016844:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016848:	f002 f896 	bl	8018978 <__ulp>
 801684c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016850:	ec53 2b10 	vmov	r2, r3, d0
 8016854:	f7f1 fe08 	bl	8008468 <__aeabi_dmul>
 8016858:	4652      	mov	r2, sl
 801685a:	465b      	mov	r3, fp
 801685c:	f7f1 fc4e 	bl	80080fc <__adddf3>
 8016860:	460b      	mov	r3, r1
 8016862:	4952      	ldr	r1, [pc, #328]	; (80169ac <_strtod_l+0xb0c>)
 8016864:	4a56      	ldr	r2, [pc, #344]	; (80169c0 <_strtod_l+0xb20>)
 8016866:	4019      	ands	r1, r3
 8016868:	4291      	cmp	r1, r2
 801686a:	4682      	mov	sl, r0
 801686c:	d95b      	bls.n	8016926 <_strtod_l+0xa86>
 801686e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016870:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016874:	4293      	cmp	r3, r2
 8016876:	d103      	bne.n	8016880 <_strtod_l+0x9e0>
 8016878:	9b08      	ldr	r3, [sp, #32]
 801687a:	3301      	adds	r3, #1
 801687c:	f43f ad2e 	beq.w	80162dc <_strtod_l+0x43c>
 8016880:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80169b0 <_strtod_l+0xb10>
 8016884:	f04f 3aff 	mov.w	sl, #4294967295
 8016888:	991c      	ldr	r1, [sp, #112]	; 0x70
 801688a:	4648      	mov	r0, r9
 801688c:	f001 fddd 	bl	801844a <_Bfree>
 8016890:	9905      	ldr	r1, [sp, #20]
 8016892:	4648      	mov	r0, r9
 8016894:	f001 fdd9 	bl	801844a <_Bfree>
 8016898:	4641      	mov	r1, r8
 801689a:	4648      	mov	r0, r9
 801689c:	f001 fdd5 	bl	801844a <_Bfree>
 80168a0:	4621      	mov	r1, r4
 80168a2:	4648      	mov	r0, r9
 80168a4:	f001 fdd1 	bl	801844a <_Bfree>
 80168a8:	e619      	b.n	80164de <_strtod_l+0x63e>
 80168aa:	f1ba 0f00 	cmp.w	sl, #0
 80168ae:	d11a      	bne.n	80168e6 <_strtod_l+0xa46>
 80168b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80168b4:	b9eb      	cbnz	r3, 80168f2 <_strtod_l+0xa52>
 80168b6:	2200      	movs	r2, #0
 80168b8:	4b3f      	ldr	r3, [pc, #252]	; (80169b8 <_strtod_l+0xb18>)
 80168ba:	4630      	mov	r0, r6
 80168bc:	4639      	mov	r1, r7
 80168be:	f7f2 f845 	bl	800894c <__aeabi_dcmplt>
 80168c2:	b9c8      	cbnz	r0, 80168f8 <_strtod_l+0xa58>
 80168c4:	4630      	mov	r0, r6
 80168c6:	4639      	mov	r1, r7
 80168c8:	2200      	movs	r2, #0
 80168ca:	4b3e      	ldr	r3, [pc, #248]	; (80169c4 <_strtod_l+0xb24>)
 80168cc:	f7f1 fdcc 	bl	8008468 <__aeabi_dmul>
 80168d0:	4606      	mov	r6, r0
 80168d2:	460f      	mov	r7, r1
 80168d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80168d8:	9618      	str	r6, [sp, #96]	; 0x60
 80168da:	9319      	str	r3, [sp, #100]	; 0x64
 80168dc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80168e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80168e4:	e79c      	b.n	8016820 <_strtod_l+0x980>
 80168e6:	f1ba 0f01 	cmp.w	sl, #1
 80168ea:	d102      	bne.n	80168f2 <_strtod_l+0xa52>
 80168ec:	2d00      	cmp	r5, #0
 80168ee:	f43f ad8e 	beq.w	801640e <_strtod_l+0x56e>
 80168f2:	2200      	movs	r2, #0
 80168f4:	4b34      	ldr	r3, [pc, #208]	; (80169c8 <_strtod_l+0xb28>)
 80168f6:	e78f      	b.n	8016818 <_strtod_l+0x978>
 80168f8:	2600      	movs	r6, #0
 80168fa:	4f32      	ldr	r7, [pc, #200]	; (80169c4 <_strtod_l+0xb24>)
 80168fc:	e7ea      	b.n	80168d4 <_strtod_l+0xa34>
 80168fe:	4b31      	ldr	r3, [pc, #196]	; (80169c4 <_strtod_l+0xb24>)
 8016900:	4630      	mov	r0, r6
 8016902:	4639      	mov	r1, r7
 8016904:	2200      	movs	r2, #0
 8016906:	f7f1 fdaf 	bl	8008468 <__aeabi_dmul>
 801690a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801690c:	4606      	mov	r6, r0
 801690e:	460f      	mov	r7, r1
 8016910:	b933      	cbnz	r3, 8016920 <_strtod_l+0xa80>
 8016912:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016916:	9010      	str	r0, [sp, #64]	; 0x40
 8016918:	9311      	str	r3, [sp, #68]	; 0x44
 801691a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801691e:	e7df      	b.n	80168e0 <_strtod_l+0xa40>
 8016920:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016924:	e7f9      	b.n	801691a <_strtod_l+0xa7a>
 8016926:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801692a:	9b04      	ldr	r3, [sp, #16]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d1ab      	bne.n	8016888 <_strtod_l+0x9e8>
 8016930:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016934:	0d1b      	lsrs	r3, r3, #20
 8016936:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016938:	051b      	lsls	r3, r3, #20
 801693a:	429a      	cmp	r2, r3
 801693c:	465d      	mov	r5, fp
 801693e:	d1a3      	bne.n	8016888 <_strtod_l+0x9e8>
 8016940:	4639      	mov	r1, r7
 8016942:	4630      	mov	r0, r6
 8016944:	f7f2 f840 	bl	80089c8 <__aeabi_d2iz>
 8016948:	f7f1 fd24 	bl	8008394 <__aeabi_i2d>
 801694c:	460b      	mov	r3, r1
 801694e:	4602      	mov	r2, r0
 8016950:	4639      	mov	r1, r7
 8016952:	4630      	mov	r0, r6
 8016954:	f7f1 fbd0 	bl	80080f8 <__aeabi_dsub>
 8016958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801695a:	4606      	mov	r6, r0
 801695c:	460f      	mov	r7, r1
 801695e:	b933      	cbnz	r3, 801696e <_strtod_l+0xace>
 8016960:	f1ba 0f00 	cmp.w	sl, #0
 8016964:	d103      	bne.n	801696e <_strtod_l+0xace>
 8016966:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801696a:	2d00      	cmp	r5, #0
 801696c:	d06d      	beq.n	8016a4a <_strtod_l+0xbaa>
 801696e:	a30a      	add	r3, pc, #40	; (adr r3, 8016998 <_strtod_l+0xaf8>)
 8016970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016974:	4630      	mov	r0, r6
 8016976:	4639      	mov	r1, r7
 8016978:	f7f1 ffe8 	bl	800894c <__aeabi_dcmplt>
 801697c:	2800      	cmp	r0, #0
 801697e:	f47f acb8 	bne.w	80162f2 <_strtod_l+0x452>
 8016982:	a307      	add	r3, pc, #28	; (adr r3, 80169a0 <_strtod_l+0xb00>)
 8016984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016988:	4630      	mov	r0, r6
 801698a:	4639      	mov	r1, r7
 801698c:	f7f1 fffc 	bl	8008988 <__aeabi_dcmpgt>
 8016990:	2800      	cmp	r0, #0
 8016992:	f43f af79 	beq.w	8016888 <_strtod_l+0x9e8>
 8016996:	e4ac      	b.n	80162f2 <_strtod_l+0x452>
 8016998:	94a03595 	.word	0x94a03595
 801699c:	3fdfffff 	.word	0x3fdfffff
 80169a0:	35afe535 	.word	0x35afe535
 80169a4:	3fe00000 	.word	0x3fe00000
 80169a8:	000fffff 	.word	0x000fffff
 80169ac:	7ff00000 	.word	0x7ff00000
 80169b0:	7fefffff 	.word	0x7fefffff
 80169b4:	39500000 	.word	0x39500000
 80169b8:	3ff00000 	.word	0x3ff00000
 80169bc:	7fe00000 	.word	0x7fe00000
 80169c0:	7c9fffff 	.word	0x7c9fffff
 80169c4:	3fe00000 	.word	0x3fe00000
 80169c8:	bff00000 	.word	0xbff00000
 80169cc:	9b04      	ldr	r3, [sp, #16]
 80169ce:	b333      	cbz	r3, 8016a1e <_strtod_l+0xb7e>
 80169d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80169d2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80169d6:	d822      	bhi.n	8016a1e <_strtod_l+0xb7e>
 80169d8:	a327      	add	r3, pc, #156	; (adr r3, 8016a78 <_strtod_l+0xbd8>)
 80169da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169de:	4630      	mov	r0, r6
 80169e0:	4639      	mov	r1, r7
 80169e2:	f7f1 ffbd 	bl	8008960 <__aeabi_dcmple>
 80169e6:	b1a0      	cbz	r0, 8016a12 <_strtod_l+0xb72>
 80169e8:	4639      	mov	r1, r7
 80169ea:	4630      	mov	r0, r6
 80169ec:	f7f2 f814 	bl	8008a18 <__aeabi_d2uiz>
 80169f0:	2800      	cmp	r0, #0
 80169f2:	bf08      	it	eq
 80169f4:	2001      	moveq	r0, #1
 80169f6:	f7f1 fcbd 	bl	8008374 <__aeabi_ui2d>
 80169fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169fc:	4606      	mov	r6, r0
 80169fe:	460f      	mov	r7, r1
 8016a00:	bb03      	cbnz	r3, 8016a44 <_strtod_l+0xba4>
 8016a02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016a06:	9012      	str	r0, [sp, #72]	; 0x48
 8016a08:	9313      	str	r3, [sp, #76]	; 0x4c
 8016a0a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016a0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a16:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016a1a:	1a9b      	subs	r3, r3, r2
 8016a1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a1e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016a22:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016a26:	f001 ffa7 	bl	8018978 <__ulp>
 8016a2a:	4650      	mov	r0, sl
 8016a2c:	ec53 2b10 	vmov	r2, r3, d0
 8016a30:	4659      	mov	r1, fp
 8016a32:	f7f1 fd19 	bl	8008468 <__aeabi_dmul>
 8016a36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016a3a:	f7f1 fb5f 	bl	80080fc <__adddf3>
 8016a3e:	4682      	mov	sl, r0
 8016a40:	468b      	mov	fp, r1
 8016a42:	e772      	b.n	801692a <_strtod_l+0xa8a>
 8016a44:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016a48:	e7df      	b.n	8016a0a <_strtod_l+0xb6a>
 8016a4a:	a30d      	add	r3, pc, #52	; (adr r3, 8016a80 <_strtod_l+0xbe0>)
 8016a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a50:	f7f1 ff7c 	bl	800894c <__aeabi_dcmplt>
 8016a54:	e79c      	b.n	8016990 <_strtod_l+0xaf0>
 8016a56:	2300      	movs	r3, #0
 8016a58:	930d      	str	r3, [sp, #52]	; 0x34
 8016a5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016a5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a5e:	6013      	str	r3, [r2, #0]
 8016a60:	f7ff ba61 	b.w	8015f26 <_strtod_l+0x86>
 8016a64:	2b65      	cmp	r3, #101	; 0x65
 8016a66:	f04f 0200 	mov.w	r2, #0
 8016a6a:	f43f ab4e 	beq.w	801610a <_strtod_l+0x26a>
 8016a6e:	2101      	movs	r1, #1
 8016a70:	4614      	mov	r4, r2
 8016a72:	9104      	str	r1, [sp, #16]
 8016a74:	f7ff bacb 	b.w	801600e <_strtod_l+0x16e>
 8016a78:	ffc00000 	.word	0xffc00000
 8016a7c:	41dfffff 	.word	0x41dfffff
 8016a80:	94a03595 	.word	0x94a03595
 8016a84:	3fcfffff 	.word	0x3fcfffff

08016a88 <_strtod_r>:
 8016a88:	4b05      	ldr	r3, [pc, #20]	; (8016aa0 <_strtod_r+0x18>)
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	b410      	push	{r4}
 8016a8e:	6a1b      	ldr	r3, [r3, #32]
 8016a90:	4c04      	ldr	r4, [pc, #16]	; (8016aa4 <_strtod_r+0x1c>)
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	bf08      	it	eq
 8016a96:	4623      	moveq	r3, r4
 8016a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a9c:	f7ff ba00 	b.w	8015ea0 <_strtod_l>
 8016aa0:	20000038 	.word	0x20000038
 8016aa4:	2000009c 	.word	0x2000009c

08016aa8 <_strtol_l.isra.0>:
 8016aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016aac:	4680      	mov	r8, r0
 8016aae:	4689      	mov	r9, r1
 8016ab0:	4692      	mov	sl, r2
 8016ab2:	461e      	mov	r6, r3
 8016ab4:	460f      	mov	r7, r1
 8016ab6:	463d      	mov	r5, r7
 8016ab8:	9808      	ldr	r0, [sp, #32]
 8016aba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016abe:	f001 fc27 	bl	8018310 <__locale_ctype_ptr_l>
 8016ac2:	4420      	add	r0, r4
 8016ac4:	7843      	ldrb	r3, [r0, #1]
 8016ac6:	f013 0308 	ands.w	r3, r3, #8
 8016aca:	d132      	bne.n	8016b32 <_strtol_l.isra.0+0x8a>
 8016acc:	2c2d      	cmp	r4, #45	; 0x2d
 8016ace:	d132      	bne.n	8016b36 <_strtol_l.isra.0+0x8e>
 8016ad0:	787c      	ldrb	r4, [r7, #1]
 8016ad2:	1cbd      	adds	r5, r7, #2
 8016ad4:	2201      	movs	r2, #1
 8016ad6:	2e00      	cmp	r6, #0
 8016ad8:	d05d      	beq.n	8016b96 <_strtol_l.isra.0+0xee>
 8016ada:	2e10      	cmp	r6, #16
 8016adc:	d109      	bne.n	8016af2 <_strtol_l.isra.0+0x4a>
 8016ade:	2c30      	cmp	r4, #48	; 0x30
 8016ae0:	d107      	bne.n	8016af2 <_strtol_l.isra.0+0x4a>
 8016ae2:	782b      	ldrb	r3, [r5, #0]
 8016ae4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016ae8:	2b58      	cmp	r3, #88	; 0x58
 8016aea:	d14f      	bne.n	8016b8c <_strtol_l.isra.0+0xe4>
 8016aec:	786c      	ldrb	r4, [r5, #1]
 8016aee:	2610      	movs	r6, #16
 8016af0:	3502      	adds	r5, #2
 8016af2:	2a00      	cmp	r2, #0
 8016af4:	bf14      	ite	ne
 8016af6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016afa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016afe:	2700      	movs	r7, #0
 8016b00:	fbb1 fcf6 	udiv	ip, r1, r6
 8016b04:	4638      	mov	r0, r7
 8016b06:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016b0a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016b0e:	2b09      	cmp	r3, #9
 8016b10:	d817      	bhi.n	8016b42 <_strtol_l.isra.0+0x9a>
 8016b12:	461c      	mov	r4, r3
 8016b14:	42a6      	cmp	r6, r4
 8016b16:	dd23      	ble.n	8016b60 <_strtol_l.isra.0+0xb8>
 8016b18:	1c7b      	adds	r3, r7, #1
 8016b1a:	d007      	beq.n	8016b2c <_strtol_l.isra.0+0x84>
 8016b1c:	4584      	cmp	ip, r0
 8016b1e:	d31c      	bcc.n	8016b5a <_strtol_l.isra.0+0xb2>
 8016b20:	d101      	bne.n	8016b26 <_strtol_l.isra.0+0x7e>
 8016b22:	45a6      	cmp	lr, r4
 8016b24:	db19      	blt.n	8016b5a <_strtol_l.isra.0+0xb2>
 8016b26:	fb00 4006 	mla	r0, r0, r6, r4
 8016b2a:	2701      	movs	r7, #1
 8016b2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016b30:	e7eb      	b.n	8016b0a <_strtol_l.isra.0+0x62>
 8016b32:	462f      	mov	r7, r5
 8016b34:	e7bf      	b.n	8016ab6 <_strtol_l.isra.0+0xe>
 8016b36:	2c2b      	cmp	r4, #43	; 0x2b
 8016b38:	bf04      	itt	eq
 8016b3a:	1cbd      	addeq	r5, r7, #2
 8016b3c:	787c      	ldrbeq	r4, [r7, #1]
 8016b3e:	461a      	mov	r2, r3
 8016b40:	e7c9      	b.n	8016ad6 <_strtol_l.isra.0+0x2e>
 8016b42:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016b46:	2b19      	cmp	r3, #25
 8016b48:	d801      	bhi.n	8016b4e <_strtol_l.isra.0+0xa6>
 8016b4a:	3c37      	subs	r4, #55	; 0x37
 8016b4c:	e7e2      	b.n	8016b14 <_strtol_l.isra.0+0x6c>
 8016b4e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016b52:	2b19      	cmp	r3, #25
 8016b54:	d804      	bhi.n	8016b60 <_strtol_l.isra.0+0xb8>
 8016b56:	3c57      	subs	r4, #87	; 0x57
 8016b58:	e7dc      	b.n	8016b14 <_strtol_l.isra.0+0x6c>
 8016b5a:	f04f 37ff 	mov.w	r7, #4294967295
 8016b5e:	e7e5      	b.n	8016b2c <_strtol_l.isra.0+0x84>
 8016b60:	1c7b      	adds	r3, r7, #1
 8016b62:	d108      	bne.n	8016b76 <_strtol_l.isra.0+0xce>
 8016b64:	2322      	movs	r3, #34	; 0x22
 8016b66:	f8c8 3000 	str.w	r3, [r8]
 8016b6a:	4608      	mov	r0, r1
 8016b6c:	f1ba 0f00 	cmp.w	sl, #0
 8016b70:	d107      	bne.n	8016b82 <_strtol_l.isra.0+0xda>
 8016b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b76:	b102      	cbz	r2, 8016b7a <_strtol_l.isra.0+0xd2>
 8016b78:	4240      	negs	r0, r0
 8016b7a:	f1ba 0f00 	cmp.w	sl, #0
 8016b7e:	d0f8      	beq.n	8016b72 <_strtol_l.isra.0+0xca>
 8016b80:	b10f      	cbz	r7, 8016b86 <_strtol_l.isra.0+0xde>
 8016b82:	f105 39ff 	add.w	r9, r5, #4294967295
 8016b86:	f8ca 9000 	str.w	r9, [sl]
 8016b8a:	e7f2      	b.n	8016b72 <_strtol_l.isra.0+0xca>
 8016b8c:	2430      	movs	r4, #48	; 0x30
 8016b8e:	2e00      	cmp	r6, #0
 8016b90:	d1af      	bne.n	8016af2 <_strtol_l.isra.0+0x4a>
 8016b92:	2608      	movs	r6, #8
 8016b94:	e7ad      	b.n	8016af2 <_strtol_l.isra.0+0x4a>
 8016b96:	2c30      	cmp	r4, #48	; 0x30
 8016b98:	d0a3      	beq.n	8016ae2 <_strtol_l.isra.0+0x3a>
 8016b9a:	260a      	movs	r6, #10
 8016b9c:	e7a9      	b.n	8016af2 <_strtol_l.isra.0+0x4a>
	...

08016ba0 <_strtol_r>:
 8016ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016ba2:	4c06      	ldr	r4, [pc, #24]	; (8016bbc <_strtol_r+0x1c>)
 8016ba4:	4d06      	ldr	r5, [pc, #24]	; (8016bc0 <_strtol_r+0x20>)
 8016ba6:	6824      	ldr	r4, [r4, #0]
 8016ba8:	6a24      	ldr	r4, [r4, #32]
 8016baa:	2c00      	cmp	r4, #0
 8016bac:	bf08      	it	eq
 8016bae:	462c      	moveq	r4, r5
 8016bb0:	9400      	str	r4, [sp, #0]
 8016bb2:	f7ff ff79 	bl	8016aa8 <_strtol_l.isra.0>
 8016bb6:	b003      	add	sp, #12
 8016bb8:	bd30      	pop	{r4, r5, pc}
 8016bba:	bf00      	nop
 8016bbc:	20000038 	.word	0x20000038
 8016bc0:	2000009c 	.word	0x2000009c

08016bc4 <_strtoul_l.isra.0>:
 8016bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bc8:	4680      	mov	r8, r0
 8016bca:	4689      	mov	r9, r1
 8016bcc:	4692      	mov	sl, r2
 8016bce:	461e      	mov	r6, r3
 8016bd0:	460f      	mov	r7, r1
 8016bd2:	463d      	mov	r5, r7
 8016bd4:	9808      	ldr	r0, [sp, #32]
 8016bd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016bda:	f001 fb99 	bl	8018310 <__locale_ctype_ptr_l>
 8016bde:	4420      	add	r0, r4
 8016be0:	7843      	ldrb	r3, [r0, #1]
 8016be2:	f013 0308 	ands.w	r3, r3, #8
 8016be6:	d130      	bne.n	8016c4a <_strtoul_l.isra.0+0x86>
 8016be8:	2c2d      	cmp	r4, #45	; 0x2d
 8016bea:	d130      	bne.n	8016c4e <_strtoul_l.isra.0+0x8a>
 8016bec:	787c      	ldrb	r4, [r7, #1]
 8016bee:	1cbd      	adds	r5, r7, #2
 8016bf0:	2101      	movs	r1, #1
 8016bf2:	2e00      	cmp	r6, #0
 8016bf4:	d05c      	beq.n	8016cb0 <_strtoul_l.isra.0+0xec>
 8016bf6:	2e10      	cmp	r6, #16
 8016bf8:	d109      	bne.n	8016c0e <_strtoul_l.isra.0+0x4a>
 8016bfa:	2c30      	cmp	r4, #48	; 0x30
 8016bfc:	d107      	bne.n	8016c0e <_strtoul_l.isra.0+0x4a>
 8016bfe:	782b      	ldrb	r3, [r5, #0]
 8016c00:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016c04:	2b58      	cmp	r3, #88	; 0x58
 8016c06:	d14e      	bne.n	8016ca6 <_strtoul_l.isra.0+0xe2>
 8016c08:	786c      	ldrb	r4, [r5, #1]
 8016c0a:	2610      	movs	r6, #16
 8016c0c:	3502      	adds	r5, #2
 8016c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8016c12:	2300      	movs	r3, #0
 8016c14:	fbb2 f2f6 	udiv	r2, r2, r6
 8016c18:	fb06 fc02 	mul.w	ip, r6, r2
 8016c1c:	ea6f 0c0c 	mvn.w	ip, ip
 8016c20:	4618      	mov	r0, r3
 8016c22:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016c26:	2f09      	cmp	r7, #9
 8016c28:	d817      	bhi.n	8016c5a <_strtoul_l.isra.0+0x96>
 8016c2a:	463c      	mov	r4, r7
 8016c2c:	42a6      	cmp	r6, r4
 8016c2e:	dd23      	ble.n	8016c78 <_strtoul_l.isra.0+0xb4>
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	db1e      	blt.n	8016c72 <_strtoul_l.isra.0+0xae>
 8016c34:	4282      	cmp	r2, r0
 8016c36:	d31c      	bcc.n	8016c72 <_strtoul_l.isra.0+0xae>
 8016c38:	d101      	bne.n	8016c3e <_strtoul_l.isra.0+0x7a>
 8016c3a:	45a4      	cmp	ip, r4
 8016c3c:	db19      	blt.n	8016c72 <_strtoul_l.isra.0+0xae>
 8016c3e:	fb00 4006 	mla	r0, r0, r6, r4
 8016c42:	2301      	movs	r3, #1
 8016c44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c48:	e7eb      	b.n	8016c22 <_strtoul_l.isra.0+0x5e>
 8016c4a:	462f      	mov	r7, r5
 8016c4c:	e7c1      	b.n	8016bd2 <_strtoul_l.isra.0+0xe>
 8016c4e:	2c2b      	cmp	r4, #43	; 0x2b
 8016c50:	bf04      	itt	eq
 8016c52:	1cbd      	addeq	r5, r7, #2
 8016c54:	787c      	ldrbeq	r4, [r7, #1]
 8016c56:	4619      	mov	r1, r3
 8016c58:	e7cb      	b.n	8016bf2 <_strtoul_l.isra.0+0x2e>
 8016c5a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016c5e:	2f19      	cmp	r7, #25
 8016c60:	d801      	bhi.n	8016c66 <_strtoul_l.isra.0+0xa2>
 8016c62:	3c37      	subs	r4, #55	; 0x37
 8016c64:	e7e2      	b.n	8016c2c <_strtoul_l.isra.0+0x68>
 8016c66:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016c6a:	2f19      	cmp	r7, #25
 8016c6c:	d804      	bhi.n	8016c78 <_strtoul_l.isra.0+0xb4>
 8016c6e:	3c57      	subs	r4, #87	; 0x57
 8016c70:	e7dc      	b.n	8016c2c <_strtoul_l.isra.0+0x68>
 8016c72:	f04f 33ff 	mov.w	r3, #4294967295
 8016c76:	e7e5      	b.n	8016c44 <_strtoul_l.isra.0+0x80>
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	da09      	bge.n	8016c90 <_strtoul_l.isra.0+0xcc>
 8016c7c:	2322      	movs	r3, #34	; 0x22
 8016c7e:	f8c8 3000 	str.w	r3, [r8]
 8016c82:	f04f 30ff 	mov.w	r0, #4294967295
 8016c86:	f1ba 0f00 	cmp.w	sl, #0
 8016c8a:	d107      	bne.n	8016c9c <_strtoul_l.isra.0+0xd8>
 8016c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c90:	b101      	cbz	r1, 8016c94 <_strtoul_l.isra.0+0xd0>
 8016c92:	4240      	negs	r0, r0
 8016c94:	f1ba 0f00 	cmp.w	sl, #0
 8016c98:	d0f8      	beq.n	8016c8c <_strtoul_l.isra.0+0xc8>
 8016c9a:	b10b      	cbz	r3, 8016ca0 <_strtoul_l.isra.0+0xdc>
 8016c9c:	f105 39ff 	add.w	r9, r5, #4294967295
 8016ca0:	f8ca 9000 	str.w	r9, [sl]
 8016ca4:	e7f2      	b.n	8016c8c <_strtoul_l.isra.0+0xc8>
 8016ca6:	2430      	movs	r4, #48	; 0x30
 8016ca8:	2e00      	cmp	r6, #0
 8016caa:	d1b0      	bne.n	8016c0e <_strtoul_l.isra.0+0x4a>
 8016cac:	2608      	movs	r6, #8
 8016cae:	e7ae      	b.n	8016c0e <_strtoul_l.isra.0+0x4a>
 8016cb0:	2c30      	cmp	r4, #48	; 0x30
 8016cb2:	d0a4      	beq.n	8016bfe <_strtoul_l.isra.0+0x3a>
 8016cb4:	260a      	movs	r6, #10
 8016cb6:	e7aa      	b.n	8016c0e <_strtoul_l.isra.0+0x4a>

08016cb8 <_strtoul_r>:
 8016cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016cba:	4c06      	ldr	r4, [pc, #24]	; (8016cd4 <_strtoul_r+0x1c>)
 8016cbc:	4d06      	ldr	r5, [pc, #24]	; (8016cd8 <_strtoul_r+0x20>)
 8016cbe:	6824      	ldr	r4, [r4, #0]
 8016cc0:	6a24      	ldr	r4, [r4, #32]
 8016cc2:	2c00      	cmp	r4, #0
 8016cc4:	bf08      	it	eq
 8016cc6:	462c      	moveq	r4, r5
 8016cc8:	9400      	str	r4, [sp, #0]
 8016cca:	f7ff ff7b 	bl	8016bc4 <_strtoul_l.isra.0>
 8016cce:	b003      	add	sp, #12
 8016cd0:	bd30      	pop	{r4, r5, pc}
 8016cd2:	bf00      	nop
 8016cd4:	20000038 	.word	0x20000038
 8016cd8:	2000009c 	.word	0x2000009c

08016cdc <__submore>:
 8016cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ce0:	460c      	mov	r4, r1
 8016ce2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ce8:	4299      	cmp	r1, r3
 8016cea:	d11d      	bne.n	8016d28 <__submore+0x4c>
 8016cec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016cf0:	f7fd fa14 	bl	801411c <_malloc_r>
 8016cf4:	b918      	cbnz	r0, 8016cfe <__submore+0x22>
 8016cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8016cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016d02:	63a3      	str	r3, [r4, #56]	; 0x38
 8016d04:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016d08:	6360      	str	r0, [r4, #52]	; 0x34
 8016d0a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016d0e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016d12:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016d16:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016d1a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016d1e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016d22:	6020      	str	r0, [r4, #0]
 8016d24:	2000      	movs	r0, #0
 8016d26:	e7e8      	b.n	8016cfa <__submore+0x1e>
 8016d28:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016d2a:	0077      	lsls	r7, r6, #1
 8016d2c:	463a      	mov	r2, r7
 8016d2e:	f001 ff64 	bl	8018bfa <_realloc_r>
 8016d32:	4605      	mov	r5, r0
 8016d34:	2800      	cmp	r0, #0
 8016d36:	d0de      	beq.n	8016cf6 <__submore+0x1a>
 8016d38:	eb00 0806 	add.w	r8, r0, r6
 8016d3c:	4601      	mov	r1, r0
 8016d3e:	4632      	mov	r2, r6
 8016d40:	4640      	mov	r0, r8
 8016d42:	f7fd f989 	bl	8014058 <memcpy>
 8016d46:	f8c4 8000 	str.w	r8, [r4]
 8016d4a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016d4e:	e7e9      	b.n	8016d24 <__submore+0x48>

08016d50 <_ungetc_r>:
 8016d50:	1c4b      	adds	r3, r1, #1
 8016d52:	b570      	push	{r4, r5, r6, lr}
 8016d54:	4606      	mov	r6, r0
 8016d56:	460d      	mov	r5, r1
 8016d58:	4614      	mov	r4, r2
 8016d5a:	d103      	bne.n	8016d64 <_ungetc_r+0x14>
 8016d5c:	f04f 35ff 	mov.w	r5, #4294967295
 8016d60:	4628      	mov	r0, r5
 8016d62:	bd70      	pop	{r4, r5, r6, pc}
 8016d64:	b118      	cbz	r0, 8016d6e <_ungetc_r+0x1e>
 8016d66:	6983      	ldr	r3, [r0, #24]
 8016d68:	b90b      	cbnz	r3, 8016d6e <_ungetc_r+0x1e>
 8016d6a:	f7fd f847 	bl	8013dfc <__sinit>
 8016d6e:	4b2e      	ldr	r3, [pc, #184]	; (8016e28 <_ungetc_r+0xd8>)
 8016d70:	429c      	cmp	r4, r3
 8016d72:	d12c      	bne.n	8016dce <_ungetc_r+0x7e>
 8016d74:	6874      	ldr	r4, [r6, #4]
 8016d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d7a:	f023 0320 	bic.w	r3, r3, #32
 8016d7e:	81a3      	strh	r3, [r4, #12]
 8016d80:	b29b      	uxth	r3, r3
 8016d82:	0759      	lsls	r1, r3, #29
 8016d84:	d413      	bmi.n	8016dae <_ungetc_r+0x5e>
 8016d86:	06da      	lsls	r2, r3, #27
 8016d88:	d5e8      	bpl.n	8016d5c <_ungetc_r+0xc>
 8016d8a:	071b      	lsls	r3, r3, #28
 8016d8c:	d50b      	bpl.n	8016da6 <_ungetc_r+0x56>
 8016d8e:	4621      	mov	r1, r4
 8016d90:	4630      	mov	r0, r6
 8016d92:	f7fc ffb7 	bl	8013d04 <_fflush_r>
 8016d96:	2800      	cmp	r0, #0
 8016d98:	d1e0      	bne.n	8016d5c <_ungetc_r+0xc>
 8016d9a:	89a3      	ldrh	r3, [r4, #12]
 8016d9c:	60a0      	str	r0, [r4, #8]
 8016d9e:	f023 0308 	bic.w	r3, r3, #8
 8016da2:	81a3      	strh	r3, [r4, #12]
 8016da4:	61a0      	str	r0, [r4, #24]
 8016da6:	89a3      	ldrh	r3, [r4, #12]
 8016da8:	f043 0304 	orr.w	r3, r3, #4
 8016dac:	81a3      	strh	r3, [r4, #12]
 8016dae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016db0:	6862      	ldr	r2, [r4, #4]
 8016db2:	b2ed      	uxtb	r5, r5
 8016db4:	b1e3      	cbz	r3, 8016df0 <_ungetc_r+0xa0>
 8016db6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016db8:	4293      	cmp	r3, r2
 8016dba:	dd12      	ble.n	8016de2 <_ungetc_r+0x92>
 8016dbc:	6823      	ldr	r3, [r4, #0]
 8016dbe:	1e5a      	subs	r2, r3, #1
 8016dc0:	6022      	str	r2, [r4, #0]
 8016dc2:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016dc6:	6863      	ldr	r3, [r4, #4]
 8016dc8:	3301      	adds	r3, #1
 8016dca:	6063      	str	r3, [r4, #4]
 8016dcc:	e7c8      	b.n	8016d60 <_ungetc_r+0x10>
 8016dce:	4b17      	ldr	r3, [pc, #92]	; (8016e2c <_ungetc_r+0xdc>)
 8016dd0:	429c      	cmp	r4, r3
 8016dd2:	d101      	bne.n	8016dd8 <_ungetc_r+0x88>
 8016dd4:	68b4      	ldr	r4, [r6, #8]
 8016dd6:	e7ce      	b.n	8016d76 <_ungetc_r+0x26>
 8016dd8:	4b15      	ldr	r3, [pc, #84]	; (8016e30 <_ungetc_r+0xe0>)
 8016dda:	429c      	cmp	r4, r3
 8016ddc:	bf08      	it	eq
 8016dde:	68f4      	ldreq	r4, [r6, #12]
 8016de0:	e7c9      	b.n	8016d76 <_ungetc_r+0x26>
 8016de2:	4621      	mov	r1, r4
 8016de4:	4630      	mov	r0, r6
 8016de6:	f7ff ff79 	bl	8016cdc <__submore>
 8016dea:	2800      	cmp	r0, #0
 8016dec:	d0e6      	beq.n	8016dbc <_ungetc_r+0x6c>
 8016dee:	e7b5      	b.n	8016d5c <_ungetc_r+0xc>
 8016df0:	6921      	ldr	r1, [r4, #16]
 8016df2:	6823      	ldr	r3, [r4, #0]
 8016df4:	b151      	cbz	r1, 8016e0c <_ungetc_r+0xbc>
 8016df6:	4299      	cmp	r1, r3
 8016df8:	d208      	bcs.n	8016e0c <_ungetc_r+0xbc>
 8016dfa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016dfe:	42a9      	cmp	r1, r5
 8016e00:	d104      	bne.n	8016e0c <_ungetc_r+0xbc>
 8016e02:	3b01      	subs	r3, #1
 8016e04:	3201      	adds	r2, #1
 8016e06:	6023      	str	r3, [r4, #0]
 8016e08:	6062      	str	r2, [r4, #4]
 8016e0a:	e7a9      	b.n	8016d60 <_ungetc_r+0x10>
 8016e0c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e14:	6363      	str	r3, [r4, #52]	; 0x34
 8016e16:	2303      	movs	r3, #3
 8016e18:	63a3      	str	r3, [r4, #56]	; 0x38
 8016e1a:	4623      	mov	r3, r4
 8016e1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016e20:	6023      	str	r3, [r4, #0]
 8016e22:	2301      	movs	r3, #1
 8016e24:	e7d1      	b.n	8016dca <_ungetc_r+0x7a>
 8016e26:	bf00      	nop
 8016e28:	08019444 	.word	0x08019444
 8016e2c:	08019464 	.word	0x08019464
 8016e30:	08019424 	.word	0x08019424

08016e34 <__swbuf_r>:
 8016e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e36:	460e      	mov	r6, r1
 8016e38:	4614      	mov	r4, r2
 8016e3a:	4605      	mov	r5, r0
 8016e3c:	b118      	cbz	r0, 8016e46 <__swbuf_r+0x12>
 8016e3e:	6983      	ldr	r3, [r0, #24]
 8016e40:	b90b      	cbnz	r3, 8016e46 <__swbuf_r+0x12>
 8016e42:	f7fc ffdb 	bl	8013dfc <__sinit>
 8016e46:	4b21      	ldr	r3, [pc, #132]	; (8016ecc <__swbuf_r+0x98>)
 8016e48:	429c      	cmp	r4, r3
 8016e4a:	d12a      	bne.n	8016ea2 <__swbuf_r+0x6e>
 8016e4c:	686c      	ldr	r4, [r5, #4]
 8016e4e:	69a3      	ldr	r3, [r4, #24]
 8016e50:	60a3      	str	r3, [r4, #8]
 8016e52:	89a3      	ldrh	r3, [r4, #12]
 8016e54:	071a      	lsls	r2, r3, #28
 8016e56:	d52e      	bpl.n	8016eb6 <__swbuf_r+0x82>
 8016e58:	6923      	ldr	r3, [r4, #16]
 8016e5a:	b363      	cbz	r3, 8016eb6 <__swbuf_r+0x82>
 8016e5c:	6923      	ldr	r3, [r4, #16]
 8016e5e:	6820      	ldr	r0, [r4, #0]
 8016e60:	1ac0      	subs	r0, r0, r3
 8016e62:	6963      	ldr	r3, [r4, #20]
 8016e64:	b2f6      	uxtb	r6, r6
 8016e66:	4283      	cmp	r3, r0
 8016e68:	4637      	mov	r7, r6
 8016e6a:	dc04      	bgt.n	8016e76 <__swbuf_r+0x42>
 8016e6c:	4621      	mov	r1, r4
 8016e6e:	4628      	mov	r0, r5
 8016e70:	f7fc ff48 	bl	8013d04 <_fflush_r>
 8016e74:	bb28      	cbnz	r0, 8016ec2 <__swbuf_r+0x8e>
 8016e76:	68a3      	ldr	r3, [r4, #8]
 8016e78:	3b01      	subs	r3, #1
 8016e7a:	60a3      	str	r3, [r4, #8]
 8016e7c:	6823      	ldr	r3, [r4, #0]
 8016e7e:	1c5a      	adds	r2, r3, #1
 8016e80:	6022      	str	r2, [r4, #0]
 8016e82:	701e      	strb	r6, [r3, #0]
 8016e84:	6963      	ldr	r3, [r4, #20]
 8016e86:	3001      	adds	r0, #1
 8016e88:	4283      	cmp	r3, r0
 8016e8a:	d004      	beq.n	8016e96 <__swbuf_r+0x62>
 8016e8c:	89a3      	ldrh	r3, [r4, #12]
 8016e8e:	07db      	lsls	r3, r3, #31
 8016e90:	d519      	bpl.n	8016ec6 <__swbuf_r+0x92>
 8016e92:	2e0a      	cmp	r6, #10
 8016e94:	d117      	bne.n	8016ec6 <__swbuf_r+0x92>
 8016e96:	4621      	mov	r1, r4
 8016e98:	4628      	mov	r0, r5
 8016e9a:	f7fc ff33 	bl	8013d04 <_fflush_r>
 8016e9e:	b190      	cbz	r0, 8016ec6 <__swbuf_r+0x92>
 8016ea0:	e00f      	b.n	8016ec2 <__swbuf_r+0x8e>
 8016ea2:	4b0b      	ldr	r3, [pc, #44]	; (8016ed0 <__swbuf_r+0x9c>)
 8016ea4:	429c      	cmp	r4, r3
 8016ea6:	d101      	bne.n	8016eac <__swbuf_r+0x78>
 8016ea8:	68ac      	ldr	r4, [r5, #8]
 8016eaa:	e7d0      	b.n	8016e4e <__swbuf_r+0x1a>
 8016eac:	4b09      	ldr	r3, [pc, #36]	; (8016ed4 <__swbuf_r+0xa0>)
 8016eae:	429c      	cmp	r4, r3
 8016eb0:	bf08      	it	eq
 8016eb2:	68ec      	ldreq	r4, [r5, #12]
 8016eb4:	e7cb      	b.n	8016e4e <__swbuf_r+0x1a>
 8016eb6:	4621      	mov	r1, r4
 8016eb8:	4628      	mov	r0, r5
 8016eba:	f000 f81f 	bl	8016efc <__swsetup_r>
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	d0cc      	beq.n	8016e5c <__swbuf_r+0x28>
 8016ec2:	f04f 37ff 	mov.w	r7, #4294967295
 8016ec6:	4638      	mov	r0, r7
 8016ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016eca:	bf00      	nop
 8016ecc:	08019444 	.word	0x08019444
 8016ed0:	08019464 	.word	0x08019464
 8016ed4:	08019424 	.word	0x08019424

08016ed8 <_write_r>:
 8016ed8:	b538      	push	{r3, r4, r5, lr}
 8016eda:	4c07      	ldr	r4, [pc, #28]	; (8016ef8 <_write_r+0x20>)
 8016edc:	4605      	mov	r5, r0
 8016ede:	4608      	mov	r0, r1
 8016ee0:	4611      	mov	r1, r2
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	6022      	str	r2, [r4, #0]
 8016ee6:	461a      	mov	r2, r3
 8016ee8:	f7f6 fb58 	bl	800d59c <_write>
 8016eec:	1c43      	adds	r3, r0, #1
 8016eee:	d102      	bne.n	8016ef6 <_write_r+0x1e>
 8016ef0:	6823      	ldr	r3, [r4, #0]
 8016ef2:	b103      	cbz	r3, 8016ef6 <_write_r+0x1e>
 8016ef4:	602b      	str	r3, [r5, #0]
 8016ef6:	bd38      	pop	{r3, r4, r5, pc}
 8016ef8:	20008f20 	.word	0x20008f20

08016efc <__swsetup_r>:
 8016efc:	4b32      	ldr	r3, [pc, #200]	; (8016fc8 <__swsetup_r+0xcc>)
 8016efe:	b570      	push	{r4, r5, r6, lr}
 8016f00:	681d      	ldr	r5, [r3, #0]
 8016f02:	4606      	mov	r6, r0
 8016f04:	460c      	mov	r4, r1
 8016f06:	b125      	cbz	r5, 8016f12 <__swsetup_r+0x16>
 8016f08:	69ab      	ldr	r3, [r5, #24]
 8016f0a:	b913      	cbnz	r3, 8016f12 <__swsetup_r+0x16>
 8016f0c:	4628      	mov	r0, r5
 8016f0e:	f7fc ff75 	bl	8013dfc <__sinit>
 8016f12:	4b2e      	ldr	r3, [pc, #184]	; (8016fcc <__swsetup_r+0xd0>)
 8016f14:	429c      	cmp	r4, r3
 8016f16:	d10f      	bne.n	8016f38 <__swsetup_r+0x3c>
 8016f18:	686c      	ldr	r4, [r5, #4]
 8016f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f1e:	b29a      	uxth	r2, r3
 8016f20:	0715      	lsls	r5, r2, #28
 8016f22:	d42c      	bmi.n	8016f7e <__swsetup_r+0x82>
 8016f24:	06d0      	lsls	r0, r2, #27
 8016f26:	d411      	bmi.n	8016f4c <__swsetup_r+0x50>
 8016f28:	2209      	movs	r2, #9
 8016f2a:	6032      	str	r2, [r6, #0]
 8016f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f30:	81a3      	strh	r3, [r4, #12]
 8016f32:	f04f 30ff 	mov.w	r0, #4294967295
 8016f36:	e03e      	b.n	8016fb6 <__swsetup_r+0xba>
 8016f38:	4b25      	ldr	r3, [pc, #148]	; (8016fd0 <__swsetup_r+0xd4>)
 8016f3a:	429c      	cmp	r4, r3
 8016f3c:	d101      	bne.n	8016f42 <__swsetup_r+0x46>
 8016f3e:	68ac      	ldr	r4, [r5, #8]
 8016f40:	e7eb      	b.n	8016f1a <__swsetup_r+0x1e>
 8016f42:	4b24      	ldr	r3, [pc, #144]	; (8016fd4 <__swsetup_r+0xd8>)
 8016f44:	429c      	cmp	r4, r3
 8016f46:	bf08      	it	eq
 8016f48:	68ec      	ldreq	r4, [r5, #12]
 8016f4a:	e7e6      	b.n	8016f1a <__swsetup_r+0x1e>
 8016f4c:	0751      	lsls	r1, r2, #29
 8016f4e:	d512      	bpl.n	8016f76 <__swsetup_r+0x7a>
 8016f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f52:	b141      	cbz	r1, 8016f66 <__swsetup_r+0x6a>
 8016f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f58:	4299      	cmp	r1, r3
 8016f5a:	d002      	beq.n	8016f62 <__swsetup_r+0x66>
 8016f5c:	4630      	mov	r0, r6
 8016f5e:	f7fd f88f 	bl	8014080 <_free_r>
 8016f62:	2300      	movs	r3, #0
 8016f64:	6363      	str	r3, [r4, #52]	; 0x34
 8016f66:	89a3      	ldrh	r3, [r4, #12]
 8016f68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016f6c:	81a3      	strh	r3, [r4, #12]
 8016f6e:	2300      	movs	r3, #0
 8016f70:	6063      	str	r3, [r4, #4]
 8016f72:	6923      	ldr	r3, [r4, #16]
 8016f74:	6023      	str	r3, [r4, #0]
 8016f76:	89a3      	ldrh	r3, [r4, #12]
 8016f78:	f043 0308 	orr.w	r3, r3, #8
 8016f7c:	81a3      	strh	r3, [r4, #12]
 8016f7e:	6923      	ldr	r3, [r4, #16]
 8016f80:	b94b      	cbnz	r3, 8016f96 <__swsetup_r+0x9a>
 8016f82:	89a3      	ldrh	r3, [r4, #12]
 8016f84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016f8c:	d003      	beq.n	8016f96 <__swsetup_r+0x9a>
 8016f8e:	4621      	mov	r1, r4
 8016f90:	4630      	mov	r0, r6
 8016f92:	f7fd f821 	bl	8013fd8 <__smakebuf_r>
 8016f96:	89a2      	ldrh	r2, [r4, #12]
 8016f98:	f012 0301 	ands.w	r3, r2, #1
 8016f9c:	d00c      	beq.n	8016fb8 <__swsetup_r+0xbc>
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	60a3      	str	r3, [r4, #8]
 8016fa2:	6963      	ldr	r3, [r4, #20]
 8016fa4:	425b      	negs	r3, r3
 8016fa6:	61a3      	str	r3, [r4, #24]
 8016fa8:	6923      	ldr	r3, [r4, #16]
 8016faa:	b953      	cbnz	r3, 8016fc2 <__swsetup_r+0xc6>
 8016fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fb0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016fb4:	d1ba      	bne.n	8016f2c <__swsetup_r+0x30>
 8016fb6:	bd70      	pop	{r4, r5, r6, pc}
 8016fb8:	0792      	lsls	r2, r2, #30
 8016fba:	bf58      	it	pl
 8016fbc:	6963      	ldrpl	r3, [r4, #20]
 8016fbe:	60a3      	str	r3, [r4, #8]
 8016fc0:	e7f2      	b.n	8016fa8 <__swsetup_r+0xac>
 8016fc2:	2000      	movs	r0, #0
 8016fc4:	e7f7      	b.n	8016fb6 <__swsetup_r+0xba>
 8016fc6:	bf00      	nop
 8016fc8:	20000038 	.word	0x20000038
 8016fcc:	08019444 	.word	0x08019444
 8016fd0:	08019464 	.word	0x08019464
 8016fd4:	08019424 	.word	0x08019424

08016fd8 <_close_r>:
 8016fd8:	b538      	push	{r3, r4, r5, lr}
 8016fda:	4c06      	ldr	r4, [pc, #24]	; (8016ff4 <_close_r+0x1c>)
 8016fdc:	2300      	movs	r3, #0
 8016fde:	4605      	mov	r5, r0
 8016fe0:	4608      	mov	r0, r1
 8016fe2:	6023      	str	r3, [r4, #0]
 8016fe4:	f7f6 fae8 	bl	800d5b8 <_close>
 8016fe8:	1c43      	adds	r3, r0, #1
 8016fea:	d102      	bne.n	8016ff2 <_close_r+0x1a>
 8016fec:	6823      	ldr	r3, [r4, #0]
 8016fee:	b103      	cbz	r3, 8016ff2 <_close_r+0x1a>
 8016ff0:	602b      	str	r3, [r5, #0]
 8016ff2:	bd38      	pop	{r3, r4, r5, pc}
 8016ff4:	20008f20 	.word	0x20008f20

08016ff8 <quorem>:
 8016ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ffc:	6903      	ldr	r3, [r0, #16]
 8016ffe:	690c      	ldr	r4, [r1, #16]
 8017000:	42a3      	cmp	r3, r4
 8017002:	4680      	mov	r8, r0
 8017004:	f2c0 8082 	blt.w	801710c <quorem+0x114>
 8017008:	3c01      	subs	r4, #1
 801700a:	f101 0714 	add.w	r7, r1, #20
 801700e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017012:	f100 0614 	add.w	r6, r0, #20
 8017016:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801701a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801701e:	eb06 030c 	add.w	r3, r6, ip
 8017022:	3501      	adds	r5, #1
 8017024:	eb07 090c 	add.w	r9, r7, ip
 8017028:	9301      	str	r3, [sp, #4]
 801702a:	fbb0 f5f5 	udiv	r5, r0, r5
 801702e:	b395      	cbz	r5, 8017096 <quorem+0x9e>
 8017030:	f04f 0a00 	mov.w	sl, #0
 8017034:	4638      	mov	r0, r7
 8017036:	46b6      	mov	lr, r6
 8017038:	46d3      	mov	fp, sl
 801703a:	f850 2b04 	ldr.w	r2, [r0], #4
 801703e:	b293      	uxth	r3, r2
 8017040:	fb05 a303 	mla	r3, r5, r3, sl
 8017044:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017048:	b29b      	uxth	r3, r3
 801704a:	ebab 0303 	sub.w	r3, fp, r3
 801704e:	0c12      	lsrs	r2, r2, #16
 8017050:	f8de b000 	ldr.w	fp, [lr]
 8017054:	fb05 a202 	mla	r2, r5, r2, sl
 8017058:	fa13 f38b 	uxtah	r3, r3, fp
 801705c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017060:	fa1f fb82 	uxth.w	fp, r2
 8017064:	f8de 2000 	ldr.w	r2, [lr]
 8017068:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801706c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017070:	b29b      	uxth	r3, r3
 8017072:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017076:	4581      	cmp	r9, r0
 8017078:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801707c:	f84e 3b04 	str.w	r3, [lr], #4
 8017080:	d2db      	bcs.n	801703a <quorem+0x42>
 8017082:	f856 300c 	ldr.w	r3, [r6, ip]
 8017086:	b933      	cbnz	r3, 8017096 <quorem+0x9e>
 8017088:	9b01      	ldr	r3, [sp, #4]
 801708a:	3b04      	subs	r3, #4
 801708c:	429e      	cmp	r6, r3
 801708e:	461a      	mov	r2, r3
 8017090:	d330      	bcc.n	80170f4 <quorem+0xfc>
 8017092:	f8c8 4010 	str.w	r4, [r8, #16]
 8017096:	4640      	mov	r0, r8
 8017098:	f001 fbf6 	bl	8018888 <__mcmp>
 801709c:	2800      	cmp	r0, #0
 801709e:	db25      	blt.n	80170ec <quorem+0xf4>
 80170a0:	3501      	adds	r5, #1
 80170a2:	4630      	mov	r0, r6
 80170a4:	f04f 0c00 	mov.w	ip, #0
 80170a8:	f857 2b04 	ldr.w	r2, [r7], #4
 80170ac:	f8d0 e000 	ldr.w	lr, [r0]
 80170b0:	b293      	uxth	r3, r2
 80170b2:	ebac 0303 	sub.w	r3, ip, r3
 80170b6:	0c12      	lsrs	r2, r2, #16
 80170b8:	fa13 f38e 	uxtah	r3, r3, lr
 80170bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80170c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80170c4:	b29b      	uxth	r3, r3
 80170c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80170ca:	45b9      	cmp	r9, r7
 80170cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80170d0:	f840 3b04 	str.w	r3, [r0], #4
 80170d4:	d2e8      	bcs.n	80170a8 <quorem+0xb0>
 80170d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80170da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80170de:	b92a      	cbnz	r2, 80170ec <quorem+0xf4>
 80170e0:	3b04      	subs	r3, #4
 80170e2:	429e      	cmp	r6, r3
 80170e4:	461a      	mov	r2, r3
 80170e6:	d30b      	bcc.n	8017100 <quorem+0x108>
 80170e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80170ec:	4628      	mov	r0, r5
 80170ee:	b003      	add	sp, #12
 80170f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170f4:	6812      	ldr	r2, [r2, #0]
 80170f6:	3b04      	subs	r3, #4
 80170f8:	2a00      	cmp	r2, #0
 80170fa:	d1ca      	bne.n	8017092 <quorem+0x9a>
 80170fc:	3c01      	subs	r4, #1
 80170fe:	e7c5      	b.n	801708c <quorem+0x94>
 8017100:	6812      	ldr	r2, [r2, #0]
 8017102:	3b04      	subs	r3, #4
 8017104:	2a00      	cmp	r2, #0
 8017106:	d1ef      	bne.n	80170e8 <quorem+0xf0>
 8017108:	3c01      	subs	r4, #1
 801710a:	e7ea      	b.n	80170e2 <quorem+0xea>
 801710c:	2000      	movs	r0, #0
 801710e:	e7ee      	b.n	80170ee <quorem+0xf6>

08017110 <_dtoa_r>:
 8017110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017114:	ec57 6b10 	vmov	r6, r7, d0
 8017118:	b097      	sub	sp, #92	; 0x5c
 801711a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801711c:	9106      	str	r1, [sp, #24]
 801711e:	4604      	mov	r4, r0
 8017120:	920b      	str	r2, [sp, #44]	; 0x2c
 8017122:	9312      	str	r3, [sp, #72]	; 0x48
 8017124:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017128:	e9cd 6700 	strd	r6, r7, [sp]
 801712c:	b93d      	cbnz	r5, 801713e <_dtoa_r+0x2e>
 801712e:	2010      	movs	r0, #16
 8017130:	f001 f922 	bl	8018378 <malloc>
 8017134:	6260      	str	r0, [r4, #36]	; 0x24
 8017136:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801713a:	6005      	str	r5, [r0, #0]
 801713c:	60c5      	str	r5, [r0, #12]
 801713e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017140:	6819      	ldr	r1, [r3, #0]
 8017142:	b151      	cbz	r1, 801715a <_dtoa_r+0x4a>
 8017144:	685a      	ldr	r2, [r3, #4]
 8017146:	604a      	str	r2, [r1, #4]
 8017148:	2301      	movs	r3, #1
 801714a:	4093      	lsls	r3, r2
 801714c:	608b      	str	r3, [r1, #8]
 801714e:	4620      	mov	r0, r4
 8017150:	f001 f97b 	bl	801844a <_Bfree>
 8017154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017156:	2200      	movs	r2, #0
 8017158:	601a      	str	r2, [r3, #0]
 801715a:	1e3b      	subs	r3, r7, #0
 801715c:	bfbb      	ittet	lt
 801715e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017162:	9301      	strlt	r3, [sp, #4]
 8017164:	2300      	movge	r3, #0
 8017166:	2201      	movlt	r2, #1
 8017168:	bfac      	ite	ge
 801716a:	f8c8 3000 	strge.w	r3, [r8]
 801716e:	f8c8 2000 	strlt.w	r2, [r8]
 8017172:	4baf      	ldr	r3, [pc, #700]	; (8017430 <_dtoa_r+0x320>)
 8017174:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017178:	ea33 0308 	bics.w	r3, r3, r8
 801717c:	d114      	bne.n	80171a8 <_dtoa_r+0x98>
 801717e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017180:	f242 730f 	movw	r3, #9999	; 0x270f
 8017184:	6013      	str	r3, [r2, #0]
 8017186:	9b00      	ldr	r3, [sp, #0]
 8017188:	b923      	cbnz	r3, 8017194 <_dtoa_r+0x84>
 801718a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801718e:	2800      	cmp	r0, #0
 8017190:	f000 8542 	beq.w	8017c18 <_dtoa_r+0xb08>
 8017194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017196:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017444 <_dtoa_r+0x334>
 801719a:	2b00      	cmp	r3, #0
 801719c:	f000 8544 	beq.w	8017c28 <_dtoa_r+0xb18>
 80171a0:	f10b 0303 	add.w	r3, fp, #3
 80171a4:	f000 bd3e 	b.w	8017c24 <_dtoa_r+0xb14>
 80171a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80171ac:	2200      	movs	r2, #0
 80171ae:	2300      	movs	r3, #0
 80171b0:	4630      	mov	r0, r6
 80171b2:	4639      	mov	r1, r7
 80171b4:	f7f1 fbc0 	bl	8008938 <__aeabi_dcmpeq>
 80171b8:	4681      	mov	r9, r0
 80171ba:	b168      	cbz	r0, 80171d8 <_dtoa_r+0xc8>
 80171bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80171be:	2301      	movs	r3, #1
 80171c0:	6013      	str	r3, [r2, #0]
 80171c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	f000 8524 	beq.w	8017c12 <_dtoa_r+0xb02>
 80171ca:	4b9a      	ldr	r3, [pc, #616]	; (8017434 <_dtoa_r+0x324>)
 80171cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80171ce:	f103 3bff 	add.w	fp, r3, #4294967295
 80171d2:	6013      	str	r3, [r2, #0]
 80171d4:	f000 bd28 	b.w	8017c28 <_dtoa_r+0xb18>
 80171d8:	aa14      	add	r2, sp, #80	; 0x50
 80171da:	a915      	add	r1, sp, #84	; 0x54
 80171dc:	ec47 6b10 	vmov	d0, r6, r7
 80171e0:	4620      	mov	r0, r4
 80171e2:	f001 fc3f 	bl	8018a64 <__d2b>
 80171e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80171ea:	9004      	str	r0, [sp, #16]
 80171ec:	2d00      	cmp	r5, #0
 80171ee:	d07c      	beq.n	80172ea <_dtoa_r+0x1da>
 80171f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80171f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80171f8:	46b2      	mov	sl, r6
 80171fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80171fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017202:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017206:	2200      	movs	r2, #0
 8017208:	4b8b      	ldr	r3, [pc, #556]	; (8017438 <_dtoa_r+0x328>)
 801720a:	4650      	mov	r0, sl
 801720c:	4659      	mov	r1, fp
 801720e:	f7f0 ff73 	bl	80080f8 <__aeabi_dsub>
 8017212:	a381      	add	r3, pc, #516	; (adr r3, 8017418 <_dtoa_r+0x308>)
 8017214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017218:	f7f1 f926 	bl	8008468 <__aeabi_dmul>
 801721c:	a380      	add	r3, pc, #512	; (adr r3, 8017420 <_dtoa_r+0x310>)
 801721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017222:	f7f0 ff6b 	bl	80080fc <__adddf3>
 8017226:	4606      	mov	r6, r0
 8017228:	4628      	mov	r0, r5
 801722a:	460f      	mov	r7, r1
 801722c:	f7f1 f8b2 	bl	8008394 <__aeabi_i2d>
 8017230:	a37d      	add	r3, pc, #500	; (adr r3, 8017428 <_dtoa_r+0x318>)
 8017232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017236:	f7f1 f917 	bl	8008468 <__aeabi_dmul>
 801723a:	4602      	mov	r2, r0
 801723c:	460b      	mov	r3, r1
 801723e:	4630      	mov	r0, r6
 8017240:	4639      	mov	r1, r7
 8017242:	f7f0 ff5b 	bl	80080fc <__adddf3>
 8017246:	4606      	mov	r6, r0
 8017248:	460f      	mov	r7, r1
 801724a:	f7f1 fbbd 	bl	80089c8 <__aeabi_d2iz>
 801724e:	2200      	movs	r2, #0
 8017250:	4682      	mov	sl, r0
 8017252:	2300      	movs	r3, #0
 8017254:	4630      	mov	r0, r6
 8017256:	4639      	mov	r1, r7
 8017258:	f7f1 fb78 	bl	800894c <__aeabi_dcmplt>
 801725c:	b148      	cbz	r0, 8017272 <_dtoa_r+0x162>
 801725e:	4650      	mov	r0, sl
 8017260:	f7f1 f898 	bl	8008394 <__aeabi_i2d>
 8017264:	4632      	mov	r2, r6
 8017266:	463b      	mov	r3, r7
 8017268:	f7f1 fb66 	bl	8008938 <__aeabi_dcmpeq>
 801726c:	b908      	cbnz	r0, 8017272 <_dtoa_r+0x162>
 801726e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017272:	f1ba 0f16 	cmp.w	sl, #22
 8017276:	d859      	bhi.n	801732c <_dtoa_r+0x21c>
 8017278:	4970      	ldr	r1, [pc, #448]	; (801743c <_dtoa_r+0x32c>)
 801727a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801727e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017282:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017286:	f7f1 fb7f 	bl	8008988 <__aeabi_dcmpgt>
 801728a:	2800      	cmp	r0, #0
 801728c:	d050      	beq.n	8017330 <_dtoa_r+0x220>
 801728e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017292:	2300      	movs	r3, #0
 8017294:	930f      	str	r3, [sp, #60]	; 0x3c
 8017296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017298:	1b5d      	subs	r5, r3, r5
 801729a:	f1b5 0801 	subs.w	r8, r5, #1
 801729e:	bf49      	itett	mi
 80172a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80172a4:	2300      	movpl	r3, #0
 80172a6:	9305      	strmi	r3, [sp, #20]
 80172a8:	f04f 0800 	movmi.w	r8, #0
 80172ac:	bf58      	it	pl
 80172ae:	9305      	strpl	r3, [sp, #20]
 80172b0:	f1ba 0f00 	cmp.w	sl, #0
 80172b4:	db3e      	blt.n	8017334 <_dtoa_r+0x224>
 80172b6:	2300      	movs	r3, #0
 80172b8:	44d0      	add	r8, sl
 80172ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80172be:	9307      	str	r3, [sp, #28]
 80172c0:	9b06      	ldr	r3, [sp, #24]
 80172c2:	2b09      	cmp	r3, #9
 80172c4:	f200 8090 	bhi.w	80173e8 <_dtoa_r+0x2d8>
 80172c8:	2b05      	cmp	r3, #5
 80172ca:	bfc4      	itt	gt
 80172cc:	3b04      	subgt	r3, #4
 80172ce:	9306      	strgt	r3, [sp, #24]
 80172d0:	9b06      	ldr	r3, [sp, #24]
 80172d2:	f1a3 0302 	sub.w	r3, r3, #2
 80172d6:	bfcc      	ite	gt
 80172d8:	2500      	movgt	r5, #0
 80172da:	2501      	movle	r5, #1
 80172dc:	2b03      	cmp	r3, #3
 80172de:	f200 808f 	bhi.w	8017400 <_dtoa_r+0x2f0>
 80172e2:	e8df f003 	tbb	[pc, r3]
 80172e6:	7f7d      	.short	0x7f7d
 80172e8:	7131      	.short	0x7131
 80172ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80172ee:	441d      	add	r5, r3
 80172f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80172f4:	2820      	cmp	r0, #32
 80172f6:	dd13      	ble.n	8017320 <_dtoa_r+0x210>
 80172f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80172fc:	9b00      	ldr	r3, [sp, #0]
 80172fe:	fa08 f800 	lsl.w	r8, r8, r0
 8017302:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017306:	fa23 f000 	lsr.w	r0, r3, r0
 801730a:	ea48 0000 	orr.w	r0, r8, r0
 801730e:	f7f1 f831 	bl	8008374 <__aeabi_ui2d>
 8017312:	2301      	movs	r3, #1
 8017314:	4682      	mov	sl, r0
 8017316:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801731a:	3d01      	subs	r5, #1
 801731c:	9313      	str	r3, [sp, #76]	; 0x4c
 801731e:	e772      	b.n	8017206 <_dtoa_r+0xf6>
 8017320:	9b00      	ldr	r3, [sp, #0]
 8017322:	f1c0 0020 	rsb	r0, r0, #32
 8017326:	fa03 f000 	lsl.w	r0, r3, r0
 801732a:	e7f0      	b.n	801730e <_dtoa_r+0x1fe>
 801732c:	2301      	movs	r3, #1
 801732e:	e7b1      	b.n	8017294 <_dtoa_r+0x184>
 8017330:	900f      	str	r0, [sp, #60]	; 0x3c
 8017332:	e7b0      	b.n	8017296 <_dtoa_r+0x186>
 8017334:	9b05      	ldr	r3, [sp, #20]
 8017336:	eba3 030a 	sub.w	r3, r3, sl
 801733a:	9305      	str	r3, [sp, #20]
 801733c:	f1ca 0300 	rsb	r3, sl, #0
 8017340:	9307      	str	r3, [sp, #28]
 8017342:	2300      	movs	r3, #0
 8017344:	930e      	str	r3, [sp, #56]	; 0x38
 8017346:	e7bb      	b.n	80172c0 <_dtoa_r+0x1b0>
 8017348:	2301      	movs	r3, #1
 801734a:	930a      	str	r3, [sp, #40]	; 0x28
 801734c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801734e:	2b00      	cmp	r3, #0
 8017350:	dd59      	ble.n	8017406 <_dtoa_r+0x2f6>
 8017352:	9302      	str	r3, [sp, #8]
 8017354:	4699      	mov	r9, r3
 8017356:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017358:	2200      	movs	r2, #0
 801735a:	6072      	str	r2, [r6, #4]
 801735c:	2204      	movs	r2, #4
 801735e:	f102 0014 	add.w	r0, r2, #20
 8017362:	4298      	cmp	r0, r3
 8017364:	6871      	ldr	r1, [r6, #4]
 8017366:	d953      	bls.n	8017410 <_dtoa_r+0x300>
 8017368:	4620      	mov	r0, r4
 801736a:	f001 f83a 	bl	80183e2 <_Balloc>
 801736e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017370:	6030      	str	r0, [r6, #0]
 8017372:	f1b9 0f0e 	cmp.w	r9, #14
 8017376:	f8d3 b000 	ldr.w	fp, [r3]
 801737a:	f200 80e6 	bhi.w	801754a <_dtoa_r+0x43a>
 801737e:	2d00      	cmp	r5, #0
 8017380:	f000 80e3 	beq.w	801754a <_dtoa_r+0x43a>
 8017384:	ed9d 7b00 	vldr	d7, [sp]
 8017388:	f1ba 0f00 	cmp.w	sl, #0
 801738c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017390:	dd74      	ble.n	801747c <_dtoa_r+0x36c>
 8017392:	4a2a      	ldr	r2, [pc, #168]	; (801743c <_dtoa_r+0x32c>)
 8017394:	f00a 030f 	and.w	r3, sl, #15
 8017398:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801739c:	ed93 7b00 	vldr	d7, [r3]
 80173a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80173a4:	06f0      	lsls	r0, r6, #27
 80173a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80173aa:	d565      	bpl.n	8017478 <_dtoa_r+0x368>
 80173ac:	4b24      	ldr	r3, [pc, #144]	; (8017440 <_dtoa_r+0x330>)
 80173ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80173b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80173b6:	f7f1 f981 	bl	80086bc <__aeabi_ddiv>
 80173ba:	e9cd 0100 	strd	r0, r1, [sp]
 80173be:	f006 060f 	and.w	r6, r6, #15
 80173c2:	2503      	movs	r5, #3
 80173c4:	4f1e      	ldr	r7, [pc, #120]	; (8017440 <_dtoa_r+0x330>)
 80173c6:	e04c      	b.n	8017462 <_dtoa_r+0x352>
 80173c8:	2301      	movs	r3, #1
 80173ca:	930a      	str	r3, [sp, #40]	; 0x28
 80173cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173ce:	4453      	add	r3, sl
 80173d0:	f103 0901 	add.w	r9, r3, #1
 80173d4:	9302      	str	r3, [sp, #8]
 80173d6:	464b      	mov	r3, r9
 80173d8:	2b01      	cmp	r3, #1
 80173da:	bfb8      	it	lt
 80173dc:	2301      	movlt	r3, #1
 80173de:	e7ba      	b.n	8017356 <_dtoa_r+0x246>
 80173e0:	2300      	movs	r3, #0
 80173e2:	e7b2      	b.n	801734a <_dtoa_r+0x23a>
 80173e4:	2300      	movs	r3, #0
 80173e6:	e7f0      	b.n	80173ca <_dtoa_r+0x2ba>
 80173e8:	2501      	movs	r5, #1
 80173ea:	2300      	movs	r3, #0
 80173ec:	9306      	str	r3, [sp, #24]
 80173ee:	950a      	str	r5, [sp, #40]	; 0x28
 80173f0:	f04f 33ff 	mov.w	r3, #4294967295
 80173f4:	9302      	str	r3, [sp, #8]
 80173f6:	4699      	mov	r9, r3
 80173f8:	2200      	movs	r2, #0
 80173fa:	2312      	movs	r3, #18
 80173fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80173fe:	e7aa      	b.n	8017356 <_dtoa_r+0x246>
 8017400:	2301      	movs	r3, #1
 8017402:	930a      	str	r3, [sp, #40]	; 0x28
 8017404:	e7f4      	b.n	80173f0 <_dtoa_r+0x2e0>
 8017406:	2301      	movs	r3, #1
 8017408:	9302      	str	r3, [sp, #8]
 801740a:	4699      	mov	r9, r3
 801740c:	461a      	mov	r2, r3
 801740e:	e7f5      	b.n	80173fc <_dtoa_r+0x2ec>
 8017410:	3101      	adds	r1, #1
 8017412:	6071      	str	r1, [r6, #4]
 8017414:	0052      	lsls	r2, r2, #1
 8017416:	e7a2      	b.n	801735e <_dtoa_r+0x24e>
 8017418:	636f4361 	.word	0x636f4361
 801741c:	3fd287a7 	.word	0x3fd287a7
 8017420:	8b60c8b3 	.word	0x8b60c8b3
 8017424:	3fc68a28 	.word	0x3fc68a28
 8017428:	509f79fb 	.word	0x509f79fb
 801742c:	3fd34413 	.word	0x3fd34413
 8017430:	7ff00000 	.word	0x7ff00000
 8017434:	080194e7 	.word	0x080194e7
 8017438:	3ff80000 	.word	0x3ff80000
 801743c:	08019580 	.word	0x08019580
 8017440:	08019558 	.word	0x08019558
 8017444:	08019549 	.word	0x08019549
 8017448:	07f1      	lsls	r1, r6, #31
 801744a:	d508      	bpl.n	801745e <_dtoa_r+0x34e>
 801744c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017454:	f7f1 f808 	bl	8008468 <__aeabi_dmul>
 8017458:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801745c:	3501      	adds	r5, #1
 801745e:	1076      	asrs	r6, r6, #1
 8017460:	3708      	adds	r7, #8
 8017462:	2e00      	cmp	r6, #0
 8017464:	d1f0      	bne.n	8017448 <_dtoa_r+0x338>
 8017466:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801746a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801746e:	f7f1 f925 	bl	80086bc <__aeabi_ddiv>
 8017472:	e9cd 0100 	strd	r0, r1, [sp]
 8017476:	e01a      	b.n	80174ae <_dtoa_r+0x39e>
 8017478:	2502      	movs	r5, #2
 801747a:	e7a3      	b.n	80173c4 <_dtoa_r+0x2b4>
 801747c:	f000 80a0 	beq.w	80175c0 <_dtoa_r+0x4b0>
 8017480:	f1ca 0600 	rsb	r6, sl, #0
 8017484:	4b9f      	ldr	r3, [pc, #636]	; (8017704 <_dtoa_r+0x5f4>)
 8017486:	4fa0      	ldr	r7, [pc, #640]	; (8017708 <_dtoa_r+0x5f8>)
 8017488:	f006 020f 	and.w	r2, r6, #15
 801748c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017494:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017498:	f7f0 ffe6 	bl	8008468 <__aeabi_dmul>
 801749c:	e9cd 0100 	strd	r0, r1, [sp]
 80174a0:	1136      	asrs	r6, r6, #4
 80174a2:	2300      	movs	r3, #0
 80174a4:	2502      	movs	r5, #2
 80174a6:	2e00      	cmp	r6, #0
 80174a8:	d17f      	bne.n	80175aa <_dtoa_r+0x49a>
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d1e1      	bne.n	8017472 <_dtoa_r+0x362>
 80174ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	f000 8087 	beq.w	80175c4 <_dtoa_r+0x4b4>
 80174b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80174ba:	2200      	movs	r2, #0
 80174bc:	4b93      	ldr	r3, [pc, #588]	; (801770c <_dtoa_r+0x5fc>)
 80174be:	4630      	mov	r0, r6
 80174c0:	4639      	mov	r1, r7
 80174c2:	f7f1 fa43 	bl	800894c <__aeabi_dcmplt>
 80174c6:	2800      	cmp	r0, #0
 80174c8:	d07c      	beq.n	80175c4 <_dtoa_r+0x4b4>
 80174ca:	f1b9 0f00 	cmp.w	r9, #0
 80174ce:	d079      	beq.n	80175c4 <_dtoa_r+0x4b4>
 80174d0:	9b02      	ldr	r3, [sp, #8]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	dd35      	ble.n	8017542 <_dtoa_r+0x432>
 80174d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80174da:	9308      	str	r3, [sp, #32]
 80174dc:	4639      	mov	r1, r7
 80174de:	2200      	movs	r2, #0
 80174e0:	4b8b      	ldr	r3, [pc, #556]	; (8017710 <_dtoa_r+0x600>)
 80174e2:	4630      	mov	r0, r6
 80174e4:	f7f0 ffc0 	bl	8008468 <__aeabi_dmul>
 80174e8:	e9cd 0100 	strd	r0, r1, [sp]
 80174ec:	9f02      	ldr	r7, [sp, #8]
 80174ee:	3501      	adds	r5, #1
 80174f0:	4628      	mov	r0, r5
 80174f2:	f7f0 ff4f 	bl	8008394 <__aeabi_i2d>
 80174f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80174fa:	f7f0 ffb5 	bl	8008468 <__aeabi_dmul>
 80174fe:	2200      	movs	r2, #0
 8017500:	4b84      	ldr	r3, [pc, #528]	; (8017714 <_dtoa_r+0x604>)
 8017502:	f7f0 fdfb 	bl	80080fc <__adddf3>
 8017506:	4605      	mov	r5, r0
 8017508:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801750c:	2f00      	cmp	r7, #0
 801750e:	d15d      	bne.n	80175cc <_dtoa_r+0x4bc>
 8017510:	2200      	movs	r2, #0
 8017512:	4b81      	ldr	r3, [pc, #516]	; (8017718 <_dtoa_r+0x608>)
 8017514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017518:	f7f0 fdee 	bl	80080f8 <__aeabi_dsub>
 801751c:	462a      	mov	r2, r5
 801751e:	4633      	mov	r3, r6
 8017520:	e9cd 0100 	strd	r0, r1, [sp]
 8017524:	f7f1 fa30 	bl	8008988 <__aeabi_dcmpgt>
 8017528:	2800      	cmp	r0, #0
 801752a:	f040 8288 	bne.w	8017a3e <_dtoa_r+0x92e>
 801752e:	462a      	mov	r2, r5
 8017530:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017534:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017538:	f7f1 fa08 	bl	800894c <__aeabi_dcmplt>
 801753c:	2800      	cmp	r0, #0
 801753e:	f040 827c 	bne.w	8017a3a <_dtoa_r+0x92a>
 8017542:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017546:	e9cd 2300 	strd	r2, r3, [sp]
 801754a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801754c:	2b00      	cmp	r3, #0
 801754e:	f2c0 8150 	blt.w	80177f2 <_dtoa_r+0x6e2>
 8017552:	f1ba 0f0e 	cmp.w	sl, #14
 8017556:	f300 814c 	bgt.w	80177f2 <_dtoa_r+0x6e2>
 801755a:	4b6a      	ldr	r3, [pc, #424]	; (8017704 <_dtoa_r+0x5f4>)
 801755c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017560:	ed93 7b00 	vldr	d7, [r3]
 8017564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017566:	2b00      	cmp	r3, #0
 8017568:	ed8d 7b02 	vstr	d7, [sp, #8]
 801756c:	f280 80d8 	bge.w	8017720 <_dtoa_r+0x610>
 8017570:	f1b9 0f00 	cmp.w	r9, #0
 8017574:	f300 80d4 	bgt.w	8017720 <_dtoa_r+0x610>
 8017578:	f040 825e 	bne.w	8017a38 <_dtoa_r+0x928>
 801757c:	2200      	movs	r2, #0
 801757e:	4b66      	ldr	r3, [pc, #408]	; (8017718 <_dtoa_r+0x608>)
 8017580:	ec51 0b17 	vmov	r0, r1, d7
 8017584:	f7f0 ff70 	bl	8008468 <__aeabi_dmul>
 8017588:	e9dd 2300 	ldrd	r2, r3, [sp]
 801758c:	f7f1 f9f2 	bl	8008974 <__aeabi_dcmpge>
 8017590:	464f      	mov	r7, r9
 8017592:	464e      	mov	r6, r9
 8017594:	2800      	cmp	r0, #0
 8017596:	f040 8234 	bne.w	8017a02 <_dtoa_r+0x8f2>
 801759a:	2331      	movs	r3, #49	; 0x31
 801759c:	f10b 0501 	add.w	r5, fp, #1
 80175a0:	f88b 3000 	strb.w	r3, [fp]
 80175a4:	f10a 0a01 	add.w	sl, sl, #1
 80175a8:	e22f      	b.n	8017a0a <_dtoa_r+0x8fa>
 80175aa:	07f2      	lsls	r2, r6, #31
 80175ac:	d505      	bpl.n	80175ba <_dtoa_r+0x4aa>
 80175ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80175b2:	f7f0 ff59 	bl	8008468 <__aeabi_dmul>
 80175b6:	3501      	adds	r5, #1
 80175b8:	2301      	movs	r3, #1
 80175ba:	1076      	asrs	r6, r6, #1
 80175bc:	3708      	adds	r7, #8
 80175be:	e772      	b.n	80174a6 <_dtoa_r+0x396>
 80175c0:	2502      	movs	r5, #2
 80175c2:	e774      	b.n	80174ae <_dtoa_r+0x39e>
 80175c4:	f8cd a020 	str.w	sl, [sp, #32]
 80175c8:	464f      	mov	r7, r9
 80175ca:	e791      	b.n	80174f0 <_dtoa_r+0x3e0>
 80175cc:	4b4d      	ldr	r3, [pc, #308]	; (8017704 <_dtoa_r+0x5f4>)
 80175ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80175d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80175d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d047      	beq.n	801766c <_dtoa_r+0x55c>
 80175dc:	4602      	mov	r2, r0
 80175de:	460b      	mov	r3, r1
 80175e0:	2000      	movs	r0, #0
 80175e2:	494e      	ldr	r1, [pc, #312]	; (801771c <_dtoa_r+0x60c>)
 80175e4:	f7f1 f86a 	bl	80086bc <__aeabi_ddiv>
 80175e8:	462a      	mov	r2, r5
 80175ea:	4633      	mov	r3, r6
 80175ec:	f7f0 fd84 	bl	80080f8 <__aeabi_dsub>
 80175f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80175f4:	465d      	mov	r5, fp
 80175f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80175fa:	f7f1 f9e5 	bl	80089c8 <__aeabi_d2iz>
 80175fe:	4606      	mov	r6, r0
 8017600:	f7f0 fec8 	bl	8008394 <__aeabi_i2d>
 8017604:	4602      	mov	r2, r0
 8017606:	460b      	mov	r3, r1
 8017608:	e9dd 0100 	ldrd	r0, r1, [sp]
 801760c:	f7f0 fd74 	bl	80080f8 <__aeabi_dsub>
 8017610:	3630      	adds	r6, #48	; 0x30
 8017612:	f805 6b01 	strb.w	r6, [r5], #1
 8017616:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801761a:	e9cd 0100 	strd	r0, r1, [sp]
 801761e:	f7f1 f995 	bl	800894c <__aeabi_dcmplt>
 8017622:	2800      	cmp	r0, #0
 8017624:	d163      	bne.n	80176ee <_dtoa_r+0x5de>
 8017626:	e9dd 2300 	ldrd	r2, r3, [sp]
 801762a:	2000      	movs	r0, #0
 801762c:	4937      	ldr	r1, [pc, #220]	; (801770c <_dtoa_r+0x5fc>)
 801762e:	f7f0 fd63 	bl	80080f8 <__aeabi_dsub>
 8017632:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017636:	f7f1 f989 	bl	800894c <__aeabi_dcmplt>
 801763a:	2800      	cmp	r0, #0
 801763c:	f040 80b7 	bne.w	80177ae <_dtoa_r+0x69e>
 8017640:	eba5 030b 	sub.w	r3, r5, fp
 8017644:	429f      	cmp	r7, r3
 8017646:	f77f af7c 	ble.w	8017542 <_dtoa_r+0x432>
 801764a:	2200      	movs	r2, #0
 801764c:	4b30      	ldr	r3, [pc, #192]	; (8017710 <_dtoa_r+0x600>)
 801764e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017652:	f7f0 ff09 	bl	8008468 <__aeabi_dmul>
 8017656:	2200      	movs	r2, #0
 8017658:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801765c:	4b2c      	ldr	r3, [pc, #176]	; (8017710 <_dtoa_r+0x600>)
 801765e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017662:	f7f0 ff01 	bl	8008468 <__aeabi_dmul>
 8017666:	e9cd 0100 	strd	r0, r1, [sp]
 801766a:	e7c4      	b.n	80175f6 <_dtoa_r+0x4e6>
 801766c:	462a      	mov	r2, r5
 801766e:	4633      	mov	r3, r6
 8017670:	f7f0 fefa 	bl	8008468 <__aeabi_dmul>
 8017674:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017678:	eb0b 0507 	add.w	r5, fp, r7
 801767c:	465e      	mov	r6, fp
 801767e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017682:	f7f1 f9a1 	bl	80089c8 <__aeabi_d2iz>
 8017686:	4607      	mov	r7, r0
 8017688:	f7f0 fe84 	bl	8008394 <__aeabi_i2d>
 801768c:	3730      	adds	r7, #48	; 0x30
 801768e:	4602      	mov	r2, r0
 8017690:	460b      	mov	r3, r1
 8017692:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017696:	f7f0 fd2f 	bl	80080f8 <__aeabi_dsub>
 801769a:	f806 7b01 	strb.w	r7, [r6], #1
 801769e:	42ae      	cmp	r6, r5
 80176a0:	e9cd 0100 	strd	r0, r1, [sp]
 80176a4:	f04f 0200 	mov.w	r2, #0
 80176a8:	d126      	bne.n	80176f8 <_dtoa_r+0x5e8>
 80176aa:	4b1c      	ldr	r3, [pc, #112]	; (801771c <_dtoa_r+0x60c>)
 80176ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80176b0:	f7f0 fd24 	bl	80080fc <__adddf3>
 80176b4:	4602      	mov	r2, r0
 80176b6:	460b      	mov	r3, r1
 80176b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80176bc:	f7f1 f964 	bl	8008988 <__aeabi_dcmpgt>
 80176c0:	2800      	cmp	r0, #0
 80176c2:	d174      	bne.n	80177ae <_dtoa_r+0x69e>
 80176c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80176c8:	2000      	movs	r0, #0
 80176ca:	4914      	ldr	r1, [pc, #80]	; (801771c <_dtoa_r+0x60c>)
 80176cc:	f7f0 fd14 	bl	80080f8 <__aeabi_dsub>
 80176d0:	4602      	mov	r2, r0
 80176d2:	460b      	mov	r3, r1
 80176d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80176d8:	f7f1 f938 	bl	800894c <__aeabi_dcmplt>
 80176dc:	2800      	cmp	r0, #0
 80176de:	f43f af30 	beq.w	8017542 <_dtoa_r+0x432>
 80176e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80176e6:	2b30      	cmp	r3, #48	; 0x30
 80176e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80176ec:	d002      	beq.n	80176f4 <_dtoa_r+0x5e4>
 80176ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80176f2:	e04a      	b.n	801778a <_dtoa_r+0x67a>
 80176f4:	4615      	mov	r5, r2
 80176f6:	e7f4      	b.n	80176e2 <_dtoa_r+0x5d2>
 80176f8:	4b05      	ldr	r3, [pc, #20]	; (8017710 <_dtoa_r+0x600>)
 80176fa:	f7f0 feb5 	bl	8008468 <__aeabi_dmul>
 80176fe:	e9cd 0100 	strd	r0, r1, [sp]
 8017702:	e7bc      	b.n	801767e <_dtoa_r+0x56e>
 8017704:	08019580 	.word	0x08019580
 8017708:	08019558 	.word	0x08019558
 801770c:	3ff00000 	.word	0x3ff00000
 8017710:	40240000 	.word	0x40240000
 8017714:	401c0000 	.word	0x401c0000
 8017718:	40140000 	.word	0x40140000
 801771c:	3fe00000 	.word	0x3fe00000
 8017720:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017724:	465d      	mov	r5, fp
 8017726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801772a:	4630      	mov	r0, r6
 801772c:	4639      	mov	r1, r7
 801772e:	f7f0 ffc5 	bl	80086bc <__aeabi_ddiv>
 8017732:	f7f1 f949 	bl	80089c8 <__aeabi_d2iz>
 8017736:	4680      	mov	r8, r0
 8017738:	f7f0 fe2c 	bl	8008394 <__aeabi_i2d>
 801773c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017740:	f7f0 fe92 	bl	8008468 <__aeabi_dmul>
 8017744:	4602      	mov	r2, r0
 8017746:	460b      	mov	r3, r1
 8017748:	4630      	mov	r0, r6
 801774a:	4639      	mov	r1, r7
 801774c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017750:	f7f0 fcd2 	bl	80080f8 <__aeabi_dsub>
 8017754:	f805 6b01 	strb.w	r6, [r5], #1
 8017758:	eba5 060b 	sub.w	r6, r5, fp
 801775c:	45b1      	cmp	r9, r6
 801775e:	4602      	mov	r2, r0
 8017760:	460b      	mov	r3, r1
 8017762:	d139      	bne.n	80177d8 <_dtoa_r+0x6c8>
 8017764:	f7f0 fcca 	bl	80080fc <__adddf3>
 8017768:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801776c:	4606      	mov	r6, r0
 801776e:	460f      	mov	r7, r1
 8017770:	f7f1 f90a 	bl	8008988 <__aeabi_dcmpgt>
 8017774:	b9c8      	cbnz	r0, 80177aa <_dtoa_r+0x69a>
 8017776:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801777a:	4630      	mov	r0, r6
 801777c:	4639      	mov	r1, r7
 801777e:	f7f1 f8db 	bl	8008938 <__aeabi_dcmpeq>
 8017782:	b110      	cbz	r0, 801778a <_dtoa_r+0x67a>
 8017784:	f018 0f01 	tst.w	r8, #1
 8017788:	d10f      	bne.n	80177aa <_dtoa_r+0x69a>
 801778a:	9904      	ldr	r1, [sp, #16]
 801778c:	4620      	mov	r0, r4
 801778e:	f000 fe5c 	bl	801844a <_Bfree>
 8017792:	2300      	movs	r3, #0
 8017794:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017796:	702b      	strb	r3, [r5, #0]
 8017798:	f10a 0301 	add.w	r3, sl, #1
 801779c:	6013      	str	r3, [r2, #0]
 801779e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	f000 8241 	beq.w	8017c28 <_dtoa_r+0xb18>
 80177a6:	601d      	str	r5, [r3, #0]
 80177a8:	e23e      	b.n	8017c28 <_dtoa_r+0xb18>
 80177aa:	f8cd a020 	str.w	sl, [sp, #32]
 80177ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80177b2:	2a39      	cmp	r2, #57	; 0x39
 80177b4:	f105 33ff 	add.w	r3, r5, #4294967295
 80177b8:	d108      	bne.n	80177cc <_dtoa_r+0x6bc>
 80177ba:	459b      	cmp	fp, r3
 80177bc:	d10a      	bne.n	80177d4 <_dtoa_r+0x6c4>
 80177be:	9b08      	ldr	r3, [sp, #32]
 80177c0:	3301      	adds	r3, #1
 80177c2:	9308      	str	r3, [sp, #32]
 80177c4:	2330      	movs	r3, #48	; 0x30
 80177c6:	f88b 3000 	strb.w	r3, [fp]
 80177ca:	465b      	mov	r3, fp
 80177cc:	781a      	ldrb	r2, [r3, #0]
 80177ce:	3201      	adds	r2, #1
 80177d0:	701a      	strb	r2, [r3, #0]
 80177d2:	e78c      	b.n	80176ee <_dtoa_r+0x5de>
 80177d4:	461d      	mov	r5, r3
 80177d6:	e7ea      	b.n	80177ae <_dtoa_r+0x69e>
 80177d8:	2200      	movs	r2, #0
 80177da:	4b9b      	ldr	r3, [pc, #620]	; (8017a48 <_dtoa_r+0x938>)
 80177dc:	f7f0 fe44 	bl	8008468 <__aeabi_dmul>
 80177e0:	2200      	movs	r2, #0
 80177e2:	2300      	movs	r3, #0
 80177e4:	4606      	mov	r6, r0
 80177e6:	460f      	mov	r7, r1
 80177e8:	f7f1 f8a6 	bl	8008938 <__aeabi_dcmpeq>
 80177ec:	2800      	cmp	r0, #0
 80177ee:	d09a      	beq.n	8017726 <_dtoa_r+0x616>
 80177f0:	e7cb      	b.n	801778a <_dtoa_r+0x67a>
 80177f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80177f4:	2a00      	cmp	r2, #0
 80177f6:	f000 808b 	beq.w	8017910 <_dtoa_r+0x800>
 80177fa:	9a06      	ldr	r2, [sp, #24]
 80177fc:	2a01      	cmp	r2, #1
 80177fe:	dc6e      	bgt.n	80178de <_dtoa_r+0x7ce>
 8017800:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017802:	2a00      	cmp	r2, #0
 8017804:	d067      	beq.n	80178d6 <_dtoa_r+0x7c6>
 8017806:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801780a:	9f07      	ldr	r7, [sp, #28]
 801780c:	9d05      	ldr	r5, [sp, #20]
 801780e:	9a05      	ldr	r2, [sp, #20]
 8017810:	2101      	movs	r1, #1
 8017812:	441a      	add	r2, r3
 8017814:	4620      	mov	r0, r4
 8017816:	9205      	str	r2, [sp, #20]
 8017818:	4498      	add	r8, r3
 801781a:	f000 fef4 	bl	8018606 <__i2b>
 801781e:	4606      	mov	r6, r0
 8017820:	2d00      	cmp	r5, #0
 8017822:	dd0c      	ble.n	801783e <_dtoa_r+0x72e>
 8017824:	f1b8 0f00 	cmp.w	r8, #0
 8017828:	dd09      	ble.n	801783e <_dtoa_r+0x72e>
 801782a:	4545      	cmp	r5, r8
 801782c:	9a05      	ldr	r2, [sp, #20]
 801782e:	462b      	mov	r3, r5
 8017830:	bfa8      	it	ge
 8017832:	4643      	movge	r3, r8
 8017834:	1ad2      	subs	r2, r2, r3
 8017836:	9205      	str	r2, [sp, #20]
 8017838:	1aed      	subs	r5, r5, r3
 801783a:	eba8 0803 	sub.w	r8, r8, r3
 801783e:	9b07      	ldr	r3, [sp, #28]
 8017840:	b1eb      	cbz	r3, 801787e <_dtoa_r+0x76e>
 8017842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017844:	2b00      	cmp	r3, #0
 8017846:	d067      	beq.n	8017918 <_dtoa_r+0x808>
 8017848:	b18f      	cbz	r7, 801786e <_dtoa_r+0x75e>
 801784a:	4631      	mov	r1, r6
 801784c:	463a      	mov	r2, r7
 801784e:	4620      	mov	r0, r4
 8017850:	f000 ff78 	bl	8018744 <__pow5mult>
 8017854:	9a04      	ldr	r2, [sp, #16]
 8017856:	4601      	mov	r1, r0
 8017858:	4606      	mov	r6, r0
 801785a:	4620      	mov	r0, r4
 801785c:	f000 fedc 	bl	8018618 <__multiply>
 8017860:	9904      	ldr	r1, [sp, #16]
 8017862:	9008      	str	r0, [sp, #32]
 8017864:	4620      	mov	r0, r4
 8017866:	f000 fdf0 	bl	801844a <_Bfree>
 801786a:	9b08      	ldr	r3, [sp, #32]
 801786c:	9304      	str	r3, [sp, #16]
 801786e:	9b07      	ldr	r3, [sp, #28]
 8017870:	1bda      	subs	r2, r3, r7
 8017872:	d004      	beq.n	801787e <_dtoa_r+0x76e>
 8017874:	9904      	ldr	r1, [sp, #16]
 8017876:	4620      	mov	r0, r4
 8017878:	f000 ff64 	bl	8018744 <__pow5mult>
 801787c:	9004      	str	r0, [sp, #16]
 801787e:	2101      	movs	r1, #1
 8017880:	4620      	mov	r0, r4
 8017882:	f000 fec0 	bl	8018606 <__i2b>
 8017886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017888:	4607      	mov	r7, r0
 801788a:	2b00      	cmp	r3, #0
 801788c:	f000 81d0 	beq.w	8017c30 <_dtoa_r+0xb20>
 8017890:	461a      	mov	r2, r3
 8017892:	4601      	mov	r1, r0
 8017894:	4620      	mov	r0, r4
 8017896:	f000 ff55 	bl	8018744 <__pow5mult>
 801789a:	9b06      	ldr	r3, [sp, #24]
 801789c:	2b01      	cmp	r3, #1
 801789e:	4607      	mov	r7, r0
 80178a0:	dc40      	bgt.n	8017924 <_dtoa_r+0x814>
 80178a2:	9b00      	ldr	r3, [sp, #0]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d139      	bne.n	801791c <_dtoa_r+0x80c>
 80178a8:	9b01      	ldr	r3, [sp, #4]
 80178aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d136      	bne.n	8017920 <_dtoa_r+0x810>
 80178b2:	9b01      	ldr	r3, [sp, #4]
 80178b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80178b8:	0d1b      	lsrs	r3, r3, #20
 80178ba:	051b      	lsls	r3, r3, #20
 80178bc:	b12b      	cbz	r3, 80178ca <_dtoa_r+0x7ba>
 80178be:	9b05      	ldr	r3, [sp, #20]
 80178c0:	3301      	adds	r3, #1
 80178c2:	9305      	str	r3, [sp, #20]
 80178c4:	f108 0801 	add.w	r8, r8, #1
 80178c8:	2301      	movs	r3, #1
 80178ca:	9307      	str	r3, [sp, #28]
 80178cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d12a      	bne.n	8017928 <_dtoa_r+0x818>
 80178d2:	2001      	movs	r0, #1
 80178d4:	e030      	b.n	8017938 <_dtoa_r+0x828>
 80178d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80178d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80178dc:	e795      	b.n	801780a <_dtoa_r+0x6fa>
 80178de:	9b07      	ldr	r3, [sp, #28]
 80178e0:	f109 37ff 	add.w	r7, r9, #4294967295
 80178e4:	42bb      	cmp	r3, r7
 80178e6:	bfbf      	itttt	lt
 80178e8:	9b07      	ldrlt	r3, [sp, #28]
 80178ea:	9707      	strlt	r7, [sp, #28]
 80178ec:	1afa      	sublt	r2, r7, r3
 80178ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80178f0:	bfbb      	ittet	lt
 80178f2:	189b      	addlt	r3, r3, r2
 80178f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80178f6:	1bdf      	subge	r7, r3, r7
 80178f8:	2700      	movlt	r7, #0
 80178fa:	f1b9 0f00 	cmp.w	r9, #0
 80178fe:	bfb5      	itete	lt
 8017900:	9b05      	ldrlt	r3, [sp, #20]
 8017902:	9d05      	ldrge	r5, [sp, #20]
 8017904:	eba3 0509 	sublt.w	r5, r3, r9
 8017908:	464b      	movge	r3, r9
 801790a:	bfb8      	it	lt
 801790c:	2300      	movlt	r3, #0
 801790e:	e77e      	b.n	801780e <_dtoa_r+0x6fe>
 8017910:	9f07      	ldr	r7, [sp, #28]
 8017912:	9d05      	ldr	r5, [sp, #20]
 8017914:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017916:	e783      	b.n	8017820 <_dtoa_r+0x710>
 8017918:	9a07      	ldr	r2, [sp, #28]
 801791a:	e7ab      	b.n	8017874 <_dtoa_r+0x764>
 801791c:	2300      	movs	r3, #0
 801791e:	e7d4      	b.n	80178ca <_dtoa_r+0x7ba>
 8017920:	9b00      	ldr	r3, [sp, #0]
 8017922:	e7d2      	b.n	80178ca <_dtoa_r+0x7ba>
 8017924:	2300      	movs	r3, #0
 8017926:	9307      	str	r3, [sp, #28]
 8017928:	693b      	ldr	r3, [r7, #16]
 801792a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801792e:	6918      	ldr	r0, [r3, #16]
 8017930:	f000 fe1b 	bl	801856a <__hi0bits>
 8017934:	f1c0 0020 	rsb	r0, r0, #32
 8017938:	4440      	add	r0, r8
 801793a:	f010 001f 	ands.w	r0, r0, #31
 801793e:	d047      	beq.n	80179d0 <_dtoa_r+0x8c0>
 8017940:	f1c0 0320 	rsb	r3, r0, #32
 8017944:	2b04      	cmp	r3, #4
 8017946:	dd3b      	ble.n	80179c0 <_dtoa_r+0x8b0>
 8017948:	9b05      	ldr	r3, [sp, #20]
 801794a:	f1c0 001c 	rsb	r0, r0, #28
 801794e:	4403      	add	r3, r0
 8017950:	9305      	str	r3, [sp, #20]
 8017952:	4405      	add	r5, r0
 8017954:	4480      	add	r8, r0
 8017956:	9b05      	ldr	r3, [sp, #20]
 8017958:	2b00      	cmp	r3, #0
 801795a:	dd05      	ble.n	8017968 <_dtoa_r+0x858>
 801795c:	461a      	mov	r2, r3
 801795e:	9904      	ldr	r1, [sp, #16]
 8017960:	4620      	mov	r0, r4
 8017962:	f000 ff3d 	bl	80187e0 <__lshift>
 8017966:	9004      	str	r0, [sp, #16]
 8017968:	f1b8 0f00 	cmp.w	r8, #0
 801796c:	dd05      	ble.n	801797a <_dtoa_r+0x86a>
 801796e:	4639      	mov	r1, r7
 8017970:	4642      	mov	r2, r8
 8017972:	4620      	mov	r0, r4
 8017974:	f000 ff34 	bl	80187e0 <__lshift>
 8017978:	4607      	mov	r7, r0
 801797a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801797c:	b353      	cbz	r3, 80179d4 <_dtoa_r+0x8c4>
 801797e:	4639      	mov	r1, r7
 8017980:	9804      	ldr	r0, [sp, #16]
 8017982:	f000 ff81 	bl	8018888 <__mcmp>
 8017986:	2800      	cmp	r0, #0
 8017988:	da24      	bge.n	80179d4 <_dtoa_r+0x8c4>
 801798a:	2300      	movs	r3, #0
 801798c:	220a      	movs	r2, #10
 801798e:	9904      	ldr	r1, [sp, #16]
 8017990:	4620      	mov	r0, r4
 8017992:	f000 fd71 	bl	8018478 <__multadd>
 8017996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017998:	9004      	str	r0, [sp, #16]
 801799a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801799e:	2b00      	cmp	r3, #0
 80179a0:	f000 814d 	beq.w	8017c3e <_dtoa_r+0xb2e>
 80179a4:	2300      	movs	r3, #0
 80179a6:	4631      	mov	r1, r6
 80179a8:	220a      	movs	r2, #10
 80179aa:	4620      	mov	r0, r4
 80179ac:	f000 fd64 	bl	8018478 <__multadd>
 80179b0:	9b02      	ldr	r3, [sp, #8]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	4606      	mov	r6, r0
 80179b6:	dc4f      	bgt.n	8017a58 <_dtoa_r+0x948>
 80179b8:	9b06      	ldr	r3, [sp, #24]
 80179ba:	2b02      	cmp	r3, #2
 80179bc:	dd4c      	ble.n	8017a58 <_dtoa_r+0x948>
 80179be:	e011      	b.n	80179e4 <_dtoa_r+0x8d4>
 80179c0:	d0c9      	beq.n	8017956 <_dtoa_r+0x846>
 80179c2:	9a05      	ldr	r2, [sp, #20]
 80179c4:	331c      	adds	r3, #28
 80179c6:	441a      	add	r2, r3
 80179c8:	9205      	str	r2, [sp, #20]
 80179ca:	441d      	add	r5, r3
 80179cc:	4498      	add	r8, r3
 80179ce:	e7c2      	b.n	8017956 <_dtoa_r+0x846>
 80179d0:	4603      	mov	r3, r0
 80179d2:	e7f6      	b.n	80179c2 <_dtoa_r+0x8b2>
 80179d4:	f1b9 0f00 	cmp.w	r9, #0
 80179d8:	dc38      	bgt.n	8017a4c <_dtoa_r+0x93c>
 80179da:	9b06      	ldr	r3, [sp, #24]
 80179dc:	2b02      	cmp	r3, #2
 80179de:	dd35      	ble.n	8017a4c <_dtoa_r+0x93c>
 80179e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80179e4:	9b02      	ldr	r3, [sp, #8]
 80179e6:	b963      	cbnz	r3, 8017a02 <_dtoa_r+0x8f2>
 80179e8:	4639      	mov	r1, r7
 80179ea:	2205      	movs	r2, #5
 80179ec:	4620      	mov	r0, r4
 80179ee:	f000 fd43 	bl	8018478 <__multadd>
 80179f2:	4601      	mov	r1, r0
 80179f4:	4607      	mov	r7, r0
 80179f6:	9804      	ldr	r0, [sp, #16]
 80179f8:	f000 ff46 	bl	8018888 <__mcmp>
 80179fc:	2800      	cmp	r0, #0
 80179fe:	f73f adcc 	bgt.w	801759a <_dtoa_r+0x48a>
 8017a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a04:	465d      	mov	r5, fp
 8017a06:	ea6f 0a03 	mvn.w	sl, r3
 8017a0a:	f04f 0900 	mov.w	r9, #0
 8017a0e:	4639      	mov	r1, r7
 8017a10:	4620      	mov	r0, r4
 8017a12:	f000 fd1a 	bl	801844a <_Bfree>
 8017a16:	2e00      	cmp	r6, #0
 8017a18:	f43f aeb7 	beq.w	801778a <_dtoa_r+0x67a>
 8017a1c:	f1b9 0f00 	cmp.w	r9, #0
 8017a20:	d005      	beq.n	8017a2e <_dtoa_r+0x91e>
 8017a22:	45b1      	cmp	r9, r6
 8017a24:	d003      	beq.n	8017a2e <_dtoa_r+0x91e>
 8017a26:	4649      	mov	r1, r9
 8017a28:	4620      	mov	r0, r4
 8017a2a:	f000 fd0e 	bl	801844a <_Bfree>
 8017a2e:	4631      	mov	r1, r6
 8017a30:	4620      	mov	r0, r4
 8017a32:	f000 fd0a 	bl	801844a <_Bfree>
 8017a36:	e6a8      	b.n	801778a <_dtoa_r+0x67a>
 8017a38:	2700      	movs	r7, #0
 8017a3a:	463e      	mov	r6, r7
 8017a3c:	e7e1      	b.n	8017a02 <_dtoa_r+0x8f2>
 8017a3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017a42:	463e      	mov	r6, r7
 8017a44:	e5a9      	b.n	801759a <_dtoa_r+0x48a>
 8017a46:	bf00      	nop
 8017a48:	40240000 	.word	0x40240000
 8017a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	f000 80fa 	beq.w	8017c4c <_dtoa_r+0xb3c>
 8017a58:	2d00      	cmp	r5, #0
 8017a5a:	dd05      	ble.n	8017a68 <_dtoa_r+0x958>
 8017a5c:	4631      	mov	r1, r6
 8017a5e:	462a      	mov	r2, r5
 8017a60:	4620      	mov	r0, r4
 8017a62:	f000 febd 	bl	80187e0 <__lshift>
 8017a66:	4606      	mov	r6, r0
 8017a68:	9b07      	ldr	r3, [sp, #28]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d04c      	beq.n	8017b08 <_dtoa_r+0x9f8>
 8017a6e:	6871      	ldr	r1, [r6, #4]
 8017a70:	4620      	mov	r0, r4
 8017a72:	f000 fcb6 	bl	80183e2 <_Balloc>
 8017a76:	6932      	ldr	r2, [r6, #16]
 8017a78:	3202      	adds	r2, #2
 8017a7a:	4605      	mov	r5, r0
 8017a7c:	0092      	lsls	r2, r2, #2
 8017a7e:	f106 010c 	add.w	r1, r6, #12
 8017a82:	300c      	adds	r0, #12
 8017a84:	f7fc fae8 	bl	8014058 <memcpy>
 8017a88:	2201      	movs	r2, #1
 8017a8a:	4629      	mov	r1, r5
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	f000 fea7 	bl	80187e0 <__lshift>
 8017a92:	9b00      	ldr	r3, [sp, #0]
 8017a94:	f8cd b014 	str.w	fp, [sp, #20]
 8017a98:	f003 0301 	and.w	r3, r3, #1
 8017a9c:	46b1      	mov	r9, r6
 8017a9e:	9307      	str	r3, [sp, #28]
 8017aa0:	4606      	mov	r6, r0
 8017aa2:	4639      	mov	r1, r7
 8017aa4:	9804      	ldr	r0, [sp, #16]
 8017aa6:	f7ff faa7 	bl	8016ff8 <quorem>
 8017aaa:	4649      	mov	r1, r9
 8017aac:	4605      	mov	r5, r0
 8017aae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017ab2:	9804      	ldr	r0, [sp, #16]
 8017ab4:	f000 fee8 	bl	8018888 <__mcmp>
 8017ab8:	4632      	mov	r2, r6
 8017aba:	9000      	str	r0, [sp, #0]
 8017abc:	4639      	mov	r1, r7
 8017abe:	4620      	mov	r0, r4
 8017ac0:	f000 fefc 	bl	80188bc <__mdiff>
 8017ac4:	68c3      	ldr	r3, [r0, #12]
 8017ac6:	4602      	mov	r2, r0
 8017ac8:	bb03      	cbnz	r3, 8017b0c <_dtoa_r+0x9fc>
 8017aca:	4601      	mov	r1, r0
 8017acc:	9008      	str	r0, [sp, #32]
 8017ace:	9804      	ldr	r0, [sp, #16]
 8017ad0:	f000 feda 	bl	8018888 <__mcmp>
 8017ad4:	9a08      	ldr	r2, [sp, #32]
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	4611      	mov	r1, r2
 8017ada:	4620      	mov	r0, r4
 8017adc:	9308      	str	r3, [sp, #32]
 8017ade:	f000 fcb4 	bl	801844a <_Bfree>
 8017ae2:	9b08      	ldr	r3, [sp, #32]
 8017ae4:	b9a3      	cbnz	r3, 8017b10 <_dtoa_r+0xa00>
 8017ae6:	9a06      	ldr	r2, [sp, #24]
 8017ae8:	b992      	cbnz	r2, 8017b10 <_dtoa_r+0xa00>
 8017aea:	9a07      	ldr	r2, [sp, #28]
 8017aec:	b982      	cbnz	r2, 8017b10 <_dtoa_r+0xa00>
 8017aee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017af2:	d029      	beq.n	8017b48 <_dtoa_r+0xa38>
 8017af4:	9b00      	ldr	r3, [sp, #0]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	dd01      	ble.n	8017afe <_dtoa_r+0x9ee>
 8017afa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017afe:	9b05      	ldr	r3, [sp, #20]
 8017b00:	1c5d      	adds	r5, r3, #1
 8017b02:	f883 8000 	strb.w	r8, [r3]
 8017b06:	e782      	b.n	8017a0e <_dtoa_r+0x8fe>
 8017b08:	4630      	mov	r0, r6
 8017b0a:	e7c2      	b.n	8017a92 <_dtoa_r+0x982>
 8017b0c:	2301      	movs	r3, #1
 8017b0e:	e7e3      	b.n	8017ad8 <_dtoa_r+0x9c8>
 8017b10:	9a00      	ldr	r2, [sp, #0]
 8017b12:	2a00      	cmp	r2, #0
 8017b14:	db04      	blt.n	8017b20 <_dtoa_r+0xa10>
 8017b16:	d125      	bne.n	8017b64 <_dtoa_r+0xa54>
 8017b18:	9a06      	ldr	r2, [sp, #24]
 8017b1a:	bb1a      	cbnz	r2, 8017b64 <_dtoa_r+0xa54>
 8017b1c:	9a07      	ldr	r2, [sp, #28]
 8017b1e:	bb0a      	cbnz	r2, 8017b64 <_dtoa_r+0xa54>
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	ddec      	ble.n	8017afe <_dtoa_r+0x9ee>
 8017b24:	2201      	movs	r2, #1
 8017b26:	9904      	ldr	r1, [sp, #16]
 8017b28:	4620      	mov	r0, r4
 8017b2a:	f000 fe59 	bl	80187e0 <__lshift>
 8017b2e:	4639      	mov	r1, r7
 8017b30:	9004      	str	r0, [sp, #16]
 8017b32:	f000 fea9 	bl	8018888 <__mcmp>
 8017b36:	2800      	cmp	r0, #0
 8017b38:	dc03      	bgt.n	8017b42 <_dtoa_r+0xa32>
 8017b3a:	d1e0      	bne.n	8017afe <_dtoa_r+0x9ee>
 8017b3c:	f018 0f01 	tst.w	r8, #1
 8017b40:	d0dd      	beq.n	8017afe <_dtoa_r+0x9ee>
 8017b42:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017b46:	d1d8      	bne.n	8017afa <_dtoa_r+0x9ea>
 8017b48:	9b05      	ldr	r3, [sp, #20]
 8017b4a:	9a05      	ldr	r2, [sp, #20]
 8017b4c:	1c5d      	adds	r5, r3, #1
 8017b4e:	2339      	movs	r3, #57	; 0x39
 8017b50:	7013      	strb	r3, [r2, #0]
 8017b52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017b56:	2b39      	cmp	r3, #57	; 0x39
 8017b58:	f105 32ff 	add.w	r2, r5, #4294967295
 8017b5c:	d04f      	beq.n	8017bfe <_dtoa_r+0xaee>
 8017b5e:	3301      	adds	r3, #1
 8017b60:	7013      	strb	r3, [r2, #0]
 8017b62:	e754      	b.n	8017a0e <_dtoa_r+0x8fe>
 8017b64:	9a05      	ldr	r2, [sp, #20]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	f102 0501 	add.w	r5, r2, #1
 8017b6c:	dd06      	ble.n	8017b7c <_dtoa_r+0xa6c>
 8017b6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017b72:	d0e9      	beq.n	8017b48 <_dtoa_r+0xa38>
 8017b74:	f108 0801 	add.w	r8, r8, #1
 8017b78:	9b05      	ldr	r3, [sp, #20]
 8017b7a:	e7c2      	b.n	8017b02 <_dtoa_r+0x9f2>
 8017b7c:	9a02      	ldr	r2, [sp, #8]
 8017b7e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017b82:	eba5 030b 	sub.w	r3, r5, fp
 8017b86:	4293      	cmp	r3, r2
 8017b88:	d021      	beq.n	8017bce <_dtoa_r+0xabe>
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	220a      	movs	r2, #10
 8017b8e:	9904      	ldr	r1, [sp, #16]
 8017b90:	4620      	mov	r0, r4
 8017b92:	f000 fc71 	bl	8018478 <__multadd>
 8017b96:	45b1      	cmp	r9, r6
 8017b98:	9004      	str	r0, [sp, #16]
 8017b9a:	f04f 0300 	mov.w	r3, #0
 8017b9e:	f04f 020a 	mov.w	r2, #10
 8017ba2:	4649      	mov	r1, r9
 8017ba4:	4620      	mov	r0, r4
 8017ba6:	d105      	bne.n	8017bb4 <_dtoa_r+0xaa4>
 8017ba8:	f000 fc66 	bl	8018478 <__multadd>
 8017bac:	4681      	mov	r9, r0
 8017bae:	4606      	mov	r6, r0
 8017bb0:	9505      	str	r5, [sp, #20]
 8017bb2:	e776      	b.n	8017aa2 <_dtoa_r+0x992>
 8017bb4:	f000 fc60 	bl	8018478 <__multadd>
 8017bb8:	4631      	mov	r1, r6
 8017bba:	4681      	mov	r9, r0
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	220a      	movs	r2, #10
 8017bc0:	4620      	mov	r0, r4
 8017bc2:	f000 fc59 	bl	8018478 <__multadd>
 8017bc6:	4606      	mov	r6, r0
 8017bc8:	e7f2      	b.n	8017bb0 <_dtoa_r+0xaa0>
 8017bca:	f04f 0900 	mov.w	r9, #0
 8017bce:	2201      	movs	r2, #1
 8017bd0:	9904      	ldr	r1, [sp, #16]
 8017bd2:	4620      	mov	r0, r4
 8017bd4:	f000 fe04 	bl	80187e0 <__lshift>
 8017bd8:	4639      	mov	r1, r7
 8017bda:	9004      	str	r0, [sp, #16]
 8017bdc:	f000 fe54 	bl	8018888 <__mcmp>
 8017be0:	2800      	cmp	r0, #0
 8017be2:	dcb6      	bgt.n	8017b52 <_dtoa_r+0xa42>
 8017be4:	d102      	bne.n	8017bec <_dtoa_r+0xadc>
 8017be6:	f018 0f01 	tst.w	r8, #1
 8017bea:	d1b2      	bne.n	8017b52 <_dtoa_r+0xa42>
 8017bec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017bf0:	2b30      	cmp	r3, #48	; 0x30
 8017bf2:	f105 32ff 	add.w	r2, r5, #4294967295
 8017bf6:	f47f af0a 	bne.w	8017a0e <_dtoa_r+0x8fe>
 8017bfa:	4615      	mov	r5, r2
 8017bfc:	e7f6      	b.n	8017bec <_dtoa_r+0xadc>
 8017bfe:	4593      	cmp	fp, r2
 8017c00:	d105      	bne.n	8017c0e <_dtoa_r+0xafe>
 8017c02:	2331      	movs	r3, #49	; 0x31
 8017c04:	f10a 0a01 	add.w	sl, sl, #1
 8017c08:	f88b 3000 	strb.w	r3, [fp]
 8017c0c:	e6ff      	b.n	8017a0e <_dtoa_r+0x8fe>
 8017c0e:	4615      	mov	r5, r2
 8017c10:	e79f      	b.n	8017b52 <_dtoa_r+0xa42>
 8017c12:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017c78 <_dtoa_r+0xb68>
 8017c16:	e007      	b.n	8017c28 <_dtoa_r+0xb18>
 8017c18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c1a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017c7c <_dtoa_r+0xb6c>
 8017c1e:	b11b      	cbz	r3, 8017c28 <_dtoa_r+0xb18>
 8017c20:	f10b 0308 	add.w	r3, fp, #8
 8017c24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017c26:	6013      	str	r3, [r2, #0]
 8017c28:	4658      	mov	r0, fp
 8017c2a:	b017      	add	sp, #92	; 0x5c
 8017c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c30:	9b06      	ldr	r3, [sp, #24]
 8017c32:	2b01      	cmp	r3, #1
 8017c34:	f77f ae35 	ble.w	80178a2 <_dtoa_r+0x792>
 8017c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c3a:	9307      	str	r3, [sp, #28]
 8017c3c:	e649      	b.n	80178d2 <_dtoa_r+0x7c2>
 8017c3e:	9b02      	ldr	r3, [sp, #8]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	dc03      	bgt.n	8017c4c <_dtoa_r+0xb3c>
 8017c44:	9b06      	ldr	r3, [sp, #24]
 8017c46:	2b02      	cmp	r3, #2
 8017c48:	f73f aecc 	bgt.w	80179e4 <_dtoa_r+0x8d4>
 8017c4c:	465d      	mov	r5, fp
 8017c4e:	4639      	mov	r1, r7
 8017c50:	9804      	ldr	r0, [sp, #16]
 8017c52:	f7ff f9d1 	bl	8016ff8 <quorem>
 8017c56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017c5a:	f805 8b01 	strb.w	r8, [r5], #1
 8017c5e:	9a02      	ldr	r2, [sp, #8]
 8017c60:	eba5 030b 	sub.w	r3, r5, fp
 8017c64:	429a      	cmp	r2, r3
 8017c66:	ddb0      	ble.n	8017bca <_dtoa_r+0xaba>
 8017c68:	2300      	movs	r3, #0
 8017c6a:	220a      	movs	r2, #10
 8017c6c:	9904      	ldr	r1, [sp, #16]
 8017c6e:	4620      	mov	r0, r4
 8017c70:	f000 fc02 	bl	8018478 <__multadd>
 8017c74:	9004      	str	r0, [sp, #16]
 8017c76:	e7ea      	b.n	8017c4e <_dtoa_r+0xb3e>
 8017c78:	080194e6 	.word	0x080194e6
 8017c7c:	08019540 	.word	0x08019540

08017c80 <_fstat_r>:
 8017c80:	b538      	push	{r3, r4, r5, lr}
 8017c82:	4c07      	ldr	r4, [pc, #28]	; (8017ca0 <_fstat_r+0x20>)
 8017c84:	2300      	movs	r3, #0
 8017c86:	4605      	mov	r5, r0
 8017c88:	4608      	mov	r0, r1
 8017c8a:	4611      	mov	r1, r2
 8017c8c:	6023      	str	r3, [r4, #0]
 8017c8e:	f7f5 fc97 	bl	800d5c0 <_fstat>
 8017c92:	1c43      	adds	r3, r0, #1
 8017c94:	d102      	bne.n	8017c9c <_fstat_r+0x1c>
 8017c96:	6823      	ldr	r3, [r4, #0]
 8017c98:	b103      	cbz	r3, 8017c9c <_fstat_r+0x1c>
 8017c9a:	602b      	str	r3, [r5, #0]
 8017c9c:	bd38      	pop	{r3, r4, r5, pc}
 8017c9e:	bf00      	nop
 8017ca0:	20008f20 	.word	0x20008f20

08017ca4 <rshift>:
 8017ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ca6:	6906      	ldr	r6, [r0, #16]
 8017ca8:	114b      	asrs	r3, r1, #5
 8017caa:	429e      	cmp	r6, r3
 8017cac:	f100 0414 	add.w	r4, r0, #20
 8017cb0:	dd30      	ble.n	8017d14 <rshift+0x70>
 8017cb2:	f011 011f 	ands.w	r1, r1, #31
 8017cb6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017cba:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017cbe:	d108      	bne.n	8017cd2 <rshift+0x2e>
 8017cc0:	4621      	mov	r1, r4
 8017cc2:	42b2      	cmp	r2, r6
 8017cc4:	460b      	mov	r3, r1
 8017cc6:	d211      	bcs.n	8017cec <rshift+0x48>
 8017cc8:	f852 3b04 	ldr.w	r3, [r2], #4
 8017ccc:	f841 3b04 	str.w	r3, [r1], #4
 8017cd0:	e7f7      	b.n	8017cc2 <rshift+0x1e>
 8017cd2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017cd6:	f1c1 0c20 	rsb	ip, r1, #32
 8017cda:	40cd      	lsrs	r5, r1
 8017cdc:	3204      	adds	r2, #4
 8017cde:	4623      	mov	r3, r4
 8017ce0:	42b2      	cmp	r2, r6
 8017ce2:	4617      	mov	r7, r2
 8017ce4:	d30c      	bcc.n	8017d00 <rshift+0x5c>
 8017ce6:	601d      	str	r5, [r3, #0]
 8017ce8:	b105      	cbz	r5, 8017cec <rshift+0x48>
 8017cea:	3304      	adds	r3, #4
 8017cec:	1b1a      	subs	r2, r3, r4
 8017cee:	42a3      	cmp	r3, r4
 8017cf0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017cf4:	bf08      	it	eq
 8017cf6:	2300      	moveq	r3, #0
 8017cf8:	6102      	str	r2, [r0, #16]
 8017cfa:	bf08      	it	eq
 8017cfc:	6143      	streq	r3, [r0, #20]
 8017cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d00:	683f      	ldr	r7, [r7, #0]
 8017d02:	fa07 f70c 	lsl.w	r7, r7, ip
 8017d06:	433d      	orrs	r5, r7
 8017d08:	f843 5b04 	str.w	r5, [r3], #4
 8017d0c:	f852 5b04 	ldr.w	r5, [r2], #4
 8017d10:	40cd      	lsrs	r5, r1
 8017d12:	e7e5      	b.n	8017ce0 <rshift+0x3c>
 8017d14:	4623      	mov	r3, r4
 8017d16:	e7e9      	b.n	8017cec <rshift+0x48>

08017d18 <__hexdig_fun>:
 8017d18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017d1c:	2b09      	cmp	r3, #9
 8017d1e:	d802      	bhi.n	8017d26 <__hexdig_fun+0xe>
 8017d20:	3820      	subs	r0, #32
 8017d22:	b2c0      	uxtb	r0, r0
 8017d24:	4770      	bx	lr
 8017d26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017d2a:	2b05      	cmp	r3, #5
 8017d2c:	d801      	bhi.n	8017d32 <__hexdig_fun+0x1a>
 8017d2e:	3847      	subs	r0, #71	; 0x47
 8017d30:	e7f7      	b.n	8017d22 <__hexdig_fun+0xa>
 8017d32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017d36:	2b05      	cmp	r3, #5
 8017d38:	d801      	bhi.n	8017d3e <__hexdig_fun+0x26>
 8017d3a:	3827      	subs	r0, #39	; 0x27
 8017d3c:	e7f1      	b.n	8017d22 <__hexdig_fun+0xa>
 8017d3e:	2000      	movs	r0, #0
 8017d40:	4770      	bx	lr

08017d42 <__gethex>:
 8017d42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d46:	b08b      	sub	sp, #44	; 0x2c
 8017d48:	468a      	mov	sl, r1
 8017d4a:	9002      	str	r0, [sp, #8]
 8017d4c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017d4e:	9306      	str	r3, [sp, #24]
 8017d50:	4690      	mov	r8, r2
 8017d52:	f000 faef 	bl	8018334 <__localeconv_l>
 8017d56:	6803      	ldr	r3, [r0, #0]
 8017d58:	9303      	str	r3, [sp, #12]
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	f7f0 f970 	bl	8008040 <strlen>
 8017d60:	9b03      	ldr	r3, [sp, #12]
 8017d62:	9001      	str	r0, [sp, #4]
 8017d64:	4403      	add	r3, r0
 8017d66:	f04f 0b00 	mov.w	fp, #0
 8017d6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017d6e:	9307      	str	r3, [sp, #28]
 8017d70:	f8da 3000 	ldr.w	r3, [sl]
 8017d74:	3302      	adds	r3, #2
 8017d76:	461f      	mov	r7, r3
 8017d78:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017d7c:	2830      	cmp	r0, #48	; 0x30
 8017d7e:	d06c      	beq.n	8017e5a <__gethex+0x118>
 8017d80:	f7ff ffca 	bl	8017d18 <__hexdig_fun>
 8017d84:	4604      	mov	r4, r0
 8017d86:	2800      	cmp	r0, #0
 8017d88:	d16a      	bne.n	8017e60 <__gethex+0x11e>
 8017d8a:	9a01      	ldr	r2, [sp, #4]
 8017d8c:	9903      	ldr	r1, [sp, #12]
 8017d8e:	4638      	mov	r0, r7
 8017d90:	f001 f8f4 	bl	8018f7c <strncmp>
 8017d94:	2800      	cmp	r0, #0
 8017d96:	d166      	bne.n	8017e66 <__gethex+0x124>
 8017d98:	9b01      	ldr	r3, [sp, #4]
 8017d9a:	5cf8      	ldrb	r0, [r7, r3]
 8017d9c:	18fe      	adds	r6, r7, r3
 8017d9e:	f7ff ffbb 	bl	8017d18 <__hexdig_fun>
 8017da2:	2800      	cmp	r0, #0
 8017da4:	d062      	beq.n	8017e6c <__gethex+0x12a>
 8017da6:	4633      	mov	r3, r6
 8017da8:	7818      	ldrb	r0, [r3, #0]
 8017daa:	2830      	cmp	r0, #48	; 0x30
 8017dac:	461f      	mov	r7, r3
 8017dae:	f103 0301 	add.w	r3, r3, #1
 8017db2:	d0f9      	beq.n	8017da8 <__gethex+0x66>
 8017db4:	f7ff ffb0 	bl	8017d18 <__hexdig_fun>
 8017db8:	fab0 f580 	clz	r5, r0
 8017dbc:	096d      	lsrs	r5, r5, #5
 8017dbe:	4634      	mov	r4, r6
 8017dc0:	f04f 0b01 	mov.w	fp, #1
 8017dc4:	463a      	mov	r2, r7
 8017dc6:	4616      	mov	r6, r2
 8017dc8:	3201      	adds	r2, #1
 8017dca:	7830      	ldrb	r0, [r6, #0]
 8017dcc:	f7ff ffa4 	bl	8017d18 <__hexdig_fun>
 8017dd0:	2800      	cmp	r0, #0
 8017dd2:	d1f8      	bne.n	8017dc6 <__gethex+0x84>
 8017dd4:	9a01      	ldr	r2, [sp, #4]
 8017dd6:	9903      	ldr	r1, [sp, #12]
 8017dd8:	4630      	mov	r0, r6
 8017dda:	f001 f8cf 	bl	8018f7c <strncmp>
 8017dde:	b950      	cbnz	r0, 8017df6 <__gethex+0xb4>
 8017de0:	b954      	cbnz	r4, 8017df8 <__gethex+0xb6>
 8017de2:	9b01      	ldr	r3, [sp, #4]
 8017de4:	18f4      	adds	r4, r6, r3
 8017de6:	4622      	mov	r2, r4
 8017de8:	4616      	mov	r6, r2
 8017dea:	3201      	adds	r2, #1
 8017dec:	7830      	ldrb	r0, [r6, #0]
 8017dee:	f7ff ff93 	bl	8017d18 <__hexdig_fun>
 8017df2:	2800      	cmp	r0, #0
 8017df4:	d1f8      	bne.n	8017de8 <__gethex+0xa6>
 8017df6:	b10c      	cbz	r4, 8017dfc <__gethex+0xba>
 8017df8:	1ba4      	subs	r4, r4, r6
 8017dfa:	00a4      	lsls	r4, r4, #2
 8017dfc:	7833      	ldrb	r3, [r6, #0]
 8017dfe:	2b50      	cmp	r3, #80	; 0x50
 8017e00:	d001      	beq.n	8017e06 <__gethex+0xc4>
 8017e02:	2b70      	cmp	r3, #112	; 0x70
 8017e04:	d140      	bne.n	8017e88 <__gethex+0x146>
 8017e06:	7873      	ldrb	r3, [r6, #1]
 8017e08:	2b2b      	cmp	r3, #43	; 0x2b
 8017e0a:	d031      	beq.n	8017e70 <__gethex+0x12e>
 8017e0c:	2b2d      	cmp	r3, #45	; 0x2d
 8017e0e:	d033      	beq.n	8017e78 <__gethex+0x136>
 8017e10:	1c71      	adds	r1, r6, #1
 8017e12:	f04f 0900 	mov.w	r9, #0
 8017e16:	7808      	ldrb	r0, [r1, #0]
 8017e18:	f7ff ff7e 	bl	8017d18 <__hexdig_fun>
 8017e1c:	1e43      	subs	r3, r0, #1
 8017e1e:	b2db      	uxtb	r3, r3
 8017e20:	2b18      	cmp	r3, #24
 8017e22:	d831      	bhi.n	8017e88 <__gethex+0x146>
 8017e24:	f1a0 0210 	sub.w	r2, r0, #16
 8017e28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017e2c:	f7ff ff74 	bl	8017d18 <__hexdig_fun>
 8017e30:	1e43      	subs	r3, r0, #1
 8017e32:	b2db      	uxtb	r3, r3
 8017e34:	2b18      	cmp	r3, #24
 8017e36:	d922      	bls.n	8017e7e <__gethex+0x13c>
 8017e38:	f1b9 0f00 	cmp.w	r9, #0
 8017e3c:	d000      	beq.n	8017e40 <__gethex+0xfe>
 8017e3e:	4252      	negs	r2, r2
 8017e40:	4414      	add	r4, r2
 8017e42:	f8ca 1000 	str.w	r1, [sl]
 8017e46:	b30d      	cbz	r5, 8017e8c <__gethex+0x14a>
 8017e48:	f1bb 0f00 	cmp.w	fp, #0
 8017e4c:	bf0c      	ite	eq
 8017e4e:	2706      	moveq	r7, #6
 8017e50:	2700      	movne	r7, #0
 8017e52:	4638      	mov	r0, r7
 8017e54:	b00b      	add	sp, #44	; 0x2c
 8017e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e5a:	f10b 0b01 	add.w	fp, fp, #1
 8017e5e:	e78a      	b.n	8017d76 <__gethex+0x34>
 8017e60:	2500      	movs	r5, #0
 8017e62:	462c      	mov	r4, r5
 8017e64:	e7ae      	b.n	8017dc4 <__gethex+0x82>
 8017e66:	463e      	mov	r6, r7
 8017e68:	2501      	movs	r5, #1
 8017e6a:	e7c7      	b.n	8017dfc <__gethex+0xba>
 8017e6c:	4604      	mov	r4, r0
 8017e6e:	e7fb      	b.n	8017e68 <__gethex+0x126>
 8017e70:	f04f 0900 	mov.w	r9, #0
 8017e74:	1cb1      	adds	r1, r6, #2
 8017e76:	e7ce      	b.n	8017e16 <__gethex+0xd4>
 8017e78:	f04f 0901 	mov.w	r9, #1
 8017e7c:	e7fa      	b.n	8017e74 <__gethex+0x132>
 8017e7e:	230a      	movs	r3, #10
 8017e80:	fb03 0202 	mla	r2, r3, r2, r0
 8017e84:	3a10      	subs	r2, #16
 8017e86:	e7cf      	b.n	8017e28 <__gethex+0xe6>
 8017e88:	4631      	mov	r1, r6
 8017e8a:	e7da      	b.n	8017e42 <__gethex+0x100>
 8017e8c:	1bf3      	subs	r3, r6, r7
 8017e8e:	3b01      	subs	r3, #1
 8017e90:	4629      	mov	r1, r5
 8017e92:	2b07      	cmp	r3, #7
 8017e94:	dc49      	bgt.n	8017f2a <__gethex+0x1e8>
 8017e96:	9802      	ldr	r0, [sp, #8]
 8017e98:	f000 faa3 	bl	80183e2 <_Balloc>
 8017e9c:	9b01      	ldr	r3, [sp, #4]
 8017e9e:	f100 0914 	add.w	r9, r0, #20
 8017ea2:	f04f 0b00 	mov.w	fp, #0
 8017ea6:	f1c3 0301 	rsb	r3, r3, #1
 8017eaa:	4605      	mov	r5, r0
 8017eac:	f8cd 9010 	str.w	r9, [sp, #16]
 8017eb0:	46da      	mov	sl, fp
 8017eb2:	9308      	str	r3, [sp, #32]
 8017eb4:	42b7      	cmp	r7, r6
 8017eb6:	d33b      	bcc.n	8017f30 <__gethex+0x1ee>
 8017eb8:	9804      	ldr	r0, [sp, #16]
 8017eba:	f840 ab04 	str.w	sl, [r0], #4
 8017ebe:	eba0 0009 	sub.w	r0, r0, r9
 8017ec2:	1080      	asrs	r0, r0, #2
 8017ec4:	6128      	str	r0, [r5, #16]
 8017ec6:	0147      	lsls	r7, r0, #5
 8017ec8:	4650      	mov	r0, sl
 8017eca:	f000 fb4e 	bl	801856a <__hi0bits>
 8017ece:	f8d8 6000 	ldr.w	r6, [r8]
 8017ed2:	1a3f      	subs	r7, r7, r0
 8017ed4:	42b7      	cmp	r7, r6
 8017ed6:	dd64      	ble.n	8017fa2 <__gethex+0x260>
 8017ed8:	1bbf      	subs	r7, r7, r6
 8017eda:	4639      	mov	r1, r7
 8017edc:	4628      	mov	r0, r5
 8017ede:	f000 fe5d 	bl	8018b9c <__any_on>
 8017ee2:	4682      	mov	sl, r0
 8017ee4:	b178      	cbz	r0, 8017f06 <__gethex+0x1c4>
 8017ee6:	1e7b      	subs	r3, r7, #1
 8017ee8:	1159      	asrs	r1, r3, #5
 8017eea:	f003 021f 	and.w	r2, r3, #31
 8017eee:	f04f 0a01 	mov.w	sl, #1
 8017ef2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017ef6:	fa0a f202 	lsl.w	r2, sl, r2
 8017efa:	420a      	tst	r2, r1
 8017efc:	d003      	beq.n	8017f06 <__gethex+0x1c4>
 8017efe:	4553      	cmp	r3, sl
 8017f00:	dc46      	bgt.n	8017f90 <__gethex+0x24e>
 8017f02:	f04f 0a02 	mov.w	sl, #2
 8017f06:	4639      	mov	r1, r7
 8017f08:	4628      	mov	r0, r5
 8017f0a:	f7ff fecb 	bl	8017ca4 <rshift>
 8017f0e:	443c      	add	r4, r7
 8017f10:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017f14:	42a3      	cmp	r3, r4
 8017f16:	da52      	bge.n	8017fbe <__gethex+0x27c>
 8017f18:	4629      	mov	r1, r5
 8017f1a:	9802      	ldr	r0, [sp, #8]
 8017f1c:	f000 fa95 	bl	801844a <_Bfree>
 8017f20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017f22:	2300      	movs	r3, #0
 8017f24:	6013      	str	r3, [r2, #0]
 8017f26:	27a3      	movs	r7, #163	; 0xa3
 8017f28:	e793      	b.n	8017e52 <__gethex+0x110>
 8017f2a:	3101      	adds	r1, #1
 8017f2c:	105b      	asrs	r3, r3, #1
 8017f2e:	e7b0      	b.n	8017e92 <__gethex+0x150>
 8017f30:	1e73      	subs	r3, r6, #1
 8017f32:	9305      	str	r3, [sp, #20]
 8017f34:	9a07      	ldr	r2, [sp, #28]
 8017f36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017f3a:	4293      	cmp	r3, r2
 8017f3c:	d018      	beq.n	8017f70 <__gethex+0x22e>
 8017f3e:	f1bb 0f20 	cmp.w	fp, #32
 8017f42:	d107      	bne.n	8017f54 <__gethex+0x212>
 8017f44:	9b04      	ldr	r3, [sp, #16]
 8017f46:	f8c3 a000 	str.w	sl, [r3]
 8017f4a:	3304      	adds	r3, #4
 8017f4c:	f04f 0a00 	mov.w	sl, #0
 8017f50:	9304      	str	r3, [sp, #16]
 8017f52:	46d3      	mov	fp, sl
 8017f54:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017f58:	f7ff fede 	bl	8017d18 <__hexdig_fun>
 8017f5c:	f000 000f 	and.w	r0, r0, #15
 8017f60:	fa00 f00b 	lsl.w	r0, r0, fp
 8017f64:	ea4a 0a00 	orr.w	sl, sl, r0
 8017f68:	f10b 0b04 	add.w	fp, fp, #4
 8017f6c:	9b05      	ldr	r3, [sp, #20]
 8017f6e:	e00d      	b.n	8017f8c <__gethex+0x24a>
 8017f70:	9b05      	ldr	r3, [sp, #20]
 8017f72:	9a08      	ldr	r2, [sp, #32]
 8017f74:	4413      	add	r3, r2
 8017f76:	42bb      	cmp	r3, r7
 8017f78:	d3e1      	bcc.n	8017f3e <__gethex+0x1fc>
 8017f7a:	4618      	mov	r0, r3
 8017f7c:	9a01      	ldr	r2, [sp, #4]
 8017f7e:	9903      	ldr	r1, [sp, #12]
 8017f80:	9309      	str	r3, [sp, #36]	; 0x24
 8017f82:	f000 fffb 	bl	8018f7c <strncmp>
 8017f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f88:	2800      	cmp	r0, #0
 8017f8a:	d1d8      	bne.n	8017f3e <__gethex+0x1fc>
 8017f8c:	461e      	mov	r6, r3
 8017f8e:	e791      	b.n	8017eb4 <__gethex+0x172>
 8017f90:	1eb9      	subs	r1, r7, #2
 8017f92:	4628      	mov	r0, r5
 8017f94:	f000 fe02 	bl	8018b9c <__any_on>
 8017f98:	2800      	cmp	r0, #0
 8017f9a:	d0b2      	beq.n	8017f02 <__gethex+0x1c0>
 8017f9c:	f04f 0a03 	mov.w	sl, #3
 8017fa0:	e7b1      	b.n	8017f06 <__gethex+0x1c4>
 8017fa2:	da09      	bge.n	8017fb8 <__gethex+0x276>
 8017fa4:	1bf7      	subs	r7, r6, r7
 8017fa6:	4629      	mov	r1, r5
 8017fa8:	463a      	mov	r2, r7
 8017faa:	9802      	ldr	r0, [sp, #8]
 8017fac:	f000 fc18 	bl	80187e0 <__lshift>
 8017fb0:	1be4      	subs	r4, r4, r7
 8017fb2:	4605      	mov	r5, r0
 8017fb4:	f100 0914 	add.w	r9, r0, #20
 8017fb8:	f04f 0a00 	mov.w	sl, #0
 8017fbc:	e7a8      	b.n	8017f10 <__gethex+0x1ce>
 8017fbe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017fc2:	42a0      	cmp	r0, r4
 8017fc4:	dd6a      	ble.n	801809c <__gethex+0x35a>
 8017fc6:	1b04      	subs	r4, r0, r4
 8017fc8:	42a6      	cmp	r6, r4
 8017fca:	dc2e      	bgt.n	801802a <__gethex+0x2e8>
 8017fcc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017fd0:	2b02      	cmp	r3, #2
 8017fd2:	d022      	beq.n	801801a <__gethex+0x2d8>
 8017fd4:	2b03      	cmp	r3, #3
 8017fd6:	d024      	beq.n	8018022 <__gethex+0x2e0>
 8017fd8:	2b01      	cmp	r3, #1
 8017fda:	d115      	bne.n	8018008 <__gethex+0x2c6>
 8017fdc:	42a6      	cmp	r6, r4
 8017fde:	d113      	bne.n	8018008 <__gethex+0x2c6>
 8017fe0:	2e01      	cmp	r6, #1
 8017fe2:	dc0b      	bgt.n	8017ffc <__gethex+0x2ba>
 8017fe4:	9a06      	ldr	r2, [sp, #24]
 8017fe6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017fea:	6013      	str	r3, [r2, #0]
 8017fec:	2301      	movs	r3, #1
 8017fee:	612b      	str	r3, [r5, #16]
 8017ff0:	f8c9 3000 	str.w	r3, [r9]
 8017ff4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017ff6:	2762      	movs	r7, #98	; 0x62
 8017ff8:	601d      	str	r5, [r3, #0]
 8017ffa:	e72a      	b.n	8017e52 <__gethex+0x110>
 8017ffc:	1e71      	subs	r1, r6, #1
 8017ffe:	4628      	mov	r0, r5
 8018000:	f000 fdcc 	bl	8018b9c <__any_on>
 8018004:	2800      	cmp	r0, #0
 8018006:	d1ed      	bne.n	8017fe4 <__gethex+0x2a2>
 8018008:	4629      	mov	r1, r5
 801800a:	9802      	ldr	r0, [sp, #8]
 801800c:	f000 fa1d 	bl	801844a <_Bfree>
 8018010:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018012:	2300      	movs	r3, #0
 8018014:	6013      	str	r3, [r2, #0]
 8018016:	2750      	movs	r7, #80	; 0x50
 8018018:	e71b      	b.n	8017e52 <__gethex+0x110>
 801801a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801801c:	2b00      	cmp	r3, #0
 801801e:	d0e1      	beq.n	8017fe4 <__gethex+0x2a2>
 8018020:	e7f2      	b.n	8018008 <__gethex+0x2c6>
 8018022:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018024:	2b00      	cmp	r3, #0
 8018026:	d1dd      	bne.n	8017fe4 <__gethex+0x2a2>
 8018028:	e7ee      	b.n	8018008 <__gethex+0x2c6>
 801802a:	1e67      	subs	r7, r4, #1
 801802c:	f1ba 0f00 	cmp.w	sl, #0
 8018030:	d131      	bne.n	8018096 <__gethex+0x354>
 8018032:	b127      	cbz	r7, 801803e <__gethex+0x2fc>
 8018034:	4639      	mov	r1, r7
 8018036:	4628      	mov	r0, r5
 8018038:	f000 fdb0 	bl	8018b9c <__any_on>
 801803c:	4682      	mov	sl, r0
 801803e:	117a      	asrs	r2, r7, #5
 8018040:	2301      	movs	r3, #1
 8018042:	f007 071f 	and.w	r7, r7, #31
 8018046:	fa03 f707 	lsl.w	r7, r3, r7
 801804a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801804e:	4621      	mov	r1, r4
 8018050:	421f      	tst	r7, r3
 8018052:	4628      	mov	r0, r5
 8018054:	bf18      	it	ne
 8018056:	f04a 0a02 	orrne.w	sl, sl, #2
 801805a:	1b36      	subs	r6, r6, r4
 801805c:	f7ff fe22 	bl	8017ca4 <rshift>
 8018060:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018064:	2702      	movs	r7, #2
 8018066:	f1ba 0f00 	cmp.w	sl, #0
 801806a:	d048      	beq.n	80180fe <__gethex+0x3bc>
 801806c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018070:	2b02      	cmp	r3, #2
 8018072:	d015      	beq.n	80180a0 <__gethex+0x35e>
 8018074:	2b03      	cmp	r3, #3
 8018076:	d017      	beq.n	80180a8 <__gethex+0x366>
 8018078:	2b01      	cmp	r3, #1
 801807a:	d109      	bne.n	8018090 <__gethex+0x34e>
 801807c:	f01a 0f02 	tst.w	sl, #2
 8018080:	d006      	beq.n	8018090 <__gethex+0x34e>
 8018082:	f8d9 3000 	ldr.w	r3, [r9]
 8018086:	ea4a 0a03 	orr.w	sl, sl, r3
 801808a:	f01a 0f01 	tst.w	sl, #1
 801808e:	d10e      	bne.n	80180ae <__gethex+0x36c>
 8018090:	f047 0710 	orr.w	r7, r7, #16
 8018094:	e033      	b.n	80180fe <__gethex+0x3bc>
 8018096:	f04f 0a01 	mov.w	sl, #1
 801809a:	e7d0      	b.n	801803e <__gethex+0x2fc>
 801809c:	2701      	movs	r7, #1
 801809e:	e7e2      	b.n	8018066 <__gethex+0x324>
 80180a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80180a2:	f1c3 0301 	rsb	r3, r3, #1
 80180a6:	9315      	str	r3, [sp, #84]	; 0x54
 80180a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d0f0      	beq.n	8018090 <__gethex+0x34e>
 80180ae:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80180b2:	f105 0314 	add.w	r3, r5, #20
 80180b6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80180ba:	eb03 010a 	add.w	r1, r3, sl
 80180be:	f04f 0c00 	mov.w	ip, #0
 80180c2:	4618      	mov	r0, r3
 80180c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80180c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80180cc:	d01c      	beq.n	8018108 <__gethex+0x3c6>
 80180ce:	3201      	adds	r2, #1
 80180d0:	6002      	str	r2, [r0, #0]
 80180d2:	2f02      	cmp	r7, #2
 80180d4:	f105 0314 	add.w	r3, r5, #20
 80180d8:	d138      	bne.n	801814c <__gethex+0x40a>
 80180da:	f8d8 2000 	ldr.w	r2, [r8]
 80180de:	3a01      	subs	r2, #1
 80180e0:	42b2      	cmp	r2, r6
 80180e2:	d10a      	bne.n	80180fa <__gethex+0x3b8>
 80180e4:	1171      	asrs	r1, r6, #5
 80180e6:	2201      	movs	r2, #1
 80180e8:	f006 061f 	and.w	r6, r6, #31
 80180ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80180f0:	fa02 f606 	lsl.w	r6, r2, r6
 80180f4:	421e      	tst	r6, r3
 80180f6:	bf18      	it	ne
 80180f8:	4617      	movne	r7, r2
 80180fa:	f047 0720 	orr.w	r7, r7, #32
 80180fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018100:	601d      	str	r5, [r3, #0]
 8018102:	9b06      	ldr	r3, [sp, #24]
 8018104:	601c      	str	r4, [r3, #0]
 8018106:	e6a4      	b.n	8017e52 <__gethex+0x110>
 8018108:	4299      	cmp	r1, r3
 801810a:	f843 cc04 	str.w	ip, [r3, #-4]
 801810e:	d8d8      	bhi.n	80180c2 <__gethex+0x380>
 8018110:	68ab      	ldr	r3, [r5, #8]
 8018112:	4599      	cmp	r9, r3
 8018114:	db12      	blt.n	801813c <__gethex+0x3fa>
 8018116:	6869      	ldr	r1, [r5, #4]
 8018118:	9802      	ldr	r0, [sp, #8]
 801811a:	3101      	adds	r1, #1
 801811c:	f000 f961 	bl	80183e2 <_Balloc>
 8018120:	692a      	ldr	r2, [r5, #16]
 8018122:	3202      	adds	r2, #2
 8018124:	f105 010c 	add.w	r1, r5, #12
 8018128:	4683      	mov	fp, r0
 801812a:	0092      	lsls	r2, r2, #2
 801812c:	300c      	adds	r0, #12
 801812e:	f7fb ff93 	bl	8014058 <memcpy>
 8018132:	4629      	mov	r1, r5
 8018134:	9802      	ldr	r0, [sp, #8]
 8018136:	f000 f988 	bl	801844a <_Bfree>
 801813a:	465d      	mov	r5, fp
 801813c:	692b      	ldr	r3, [r5, #16]
 801813e:	1c5a      	adds	r2, r3, #1
 8018140:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018144:	612a      	str	r2, [r5, #16]
 8018146:	2201      	movs	r2, #1
 8018148:	615a      	str	r2, [r3, #20]
 801814a:	e7c2      	b.n	80180d2 <__gethex+0x390>
 801814c:	692a      	ldr	r2, [r5, #16]
 801814e:	454a      	cmp	r2, r9
 8018150:	dd0b      	ble.n	801816a <__gethex+0x428>
 8018152:	2101      	movs	r1, #1
 8018154:	4628      	mov	r0, r5
 8018156:	f7ff fda5 	bl	8017ca4 <rshift>
 801815a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801815e:	3401      	adds	r4, #1
 8018160:	42a3      	cmp	r3, r4
 8018162:	f6ff aed9 	blt.w	8017f18 <__gethex+0x1d6>
 8018166:	2701      	movs	r7, #1
 8018168:	e7c7      	b.n	80180fa <__gethex+0x3b8>
 801816a:	f016 061f 	ands.w	r6, r6, #31
 801816e:	d0fa      	beq.n	8018166 <__gethex+0x424>
 8018170:	449a      	add	sl, r3
 8018172:	f1c6 0620 	rsb	r6, r6, #32
 8018176:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801817a:	f000 f9f6 	bl	801856a <__hi0bits>
 801817e:	42b0      	cmp	r0, r6
 8018180:	dbe7      	blt.n	8018152 <__gethex+0x410>
 8018182:	e7f0      	b.n	8018166 <__gethex+0x424>

08018184 <L_shift>:
 8018184:	f1c2 0208 	rsb	r2, r2, #8
 8018188:	0092      	lsls	r2, r2, #2
 801818a:	b570      	push	{r4, r5, r6, lr}
 801818c:	f1c2 0620 	rsb	r6, r2, #32
 8018190:	6843      	ldr	r3, [r0, #4]
 8018192:	6804      	ldr	r4, [r0, #0]
 8018194:	fa03 f506 	lsl.w	r5, r3, r6
 8018198:	432c      	orrs	r4, r5
 801819a:	40d3      	lsrs	r3, r2
 801819c:	6004      	str	r4, [r0, #0]
 801819e:	f840 3f04 	str.w	r3, [r0, #4]!
 80181a2:	4288      	cmp	r0, r1
 80181a4:	d3f4      	bcc.n	8018190 <L_shift+0xc>
 80181a6:	bd70      	pop	{r4, r5, r6, pc}

080181a8 <__match>:
 80181a8:	b530      	push	{r4, r5, lr}
 80181aa:	6803      	ldr	r3, [r0, #0]
 80181ac:	3301      	adds	r3, #1
 80181ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80181b2:	b914      	cbnz	r4, 80181ba <__match+0x12>
 80181b4:	6003      	str	r3, [r0, #0]
 80181b6:	2001      	movs	r0, #1
 80181b8:	bd30      	pop	{r4, r5, pc}
 80181ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80181c2:	2d19      	cmp	r5, #25
 80181c4:	bf98      	it	ls
 80181c6:	3220      	addls	r2, #32
 80181c8:	42a2      	cmp	r2, r4
 80181ca:	d0f0      	beq.n	80181ae <__match+0x6>
 80181cc:	2000      	movs	r0, #0
 80181ce:	e7f3      	b.n	80181b8 <__match+0x10>

080181d0 <__hexnan>:
 80181d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181d4:	680b      	ldr	r3, [r1, #0]
 80181d6:	6801      	ldr	r1, [r0, #0]
 80181d8:	115f      	asrs	r7, r3, #5
 80181da:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80181de:	f013 031f 	ands.w	r3, r3, #31
 80181e2:	b087      	sub	sp, #28
 80181e4:	bf18      	it	ne
 80181e6:	3704      	addne	r7, #4
 80181e8:	2500      	movs	r5, #0
 80181ea:	1f3e      	subs	r6, r7, #4
 80181ec:	4682      	mov	sl, r0
 80181ee:	4690      	mov	r8, r2
 80181f0:	9301      	str	r3, [sp, #4]
 80181f2:	f847 5c04 	str.w	r5, [r7, #-4]
 80181f6:	46b1      	mov	r9, r6
 80181f8:	4634      	mov	r4, r6
 80181fa:	9502      	str	r5, [sp, #8]
 80181fc:	46ab      	mov	fp, r5
 80181fe:	784a      	ldrb	r2, [r1, #1]
 8018200:	1c4b      	adds	r3, r1, #1
 8018202:	9303      	str	r3, [sp, #12]
 8018204:	b342      	cbz	r2, 8018258 <__hexnan+0x88>
 8018206:	4610      	mov	r0, r2
 8018208:	9105      	str	r1, [sp, #20]
 801820a:	9204      	str	r2, [sp, #16]
 801820c:	f7ff fd84 	bl	8017d18 <__hexdig_fun>
 8018210:	2800      	cmp	r0, #0
 8018212:	d143      	bne.n	801829c <__hexnan+0xcc>
 8018214:	9a04      	ldr	r2, [sp, #16]
 8018216:	9905      	ldr	r1, [sp, #20]
 8018218:	2a20      	cmp	r2, #32
 801821a:	d818      	bhi.n	801824e <__hexnan+0x7e>
 801821c:	9b02      	ldr	r3, [sp, #8]
 801821e:	459b      	cmp	fp, r3
 8018220:	dd13      	ble.n	801824a <__hexnan+0x7a>
 8018222:	454c      	cmp	r4, r9
 8018224:	d206      	bcs.n	8018234 <__hexnan+0x64>
 8018226:	2d07      	cmp	r5, #7
 8018228:	dc04      	bgt.n	8018234 <__hexnan+0x64>
 801822a:	462a      	mov	r2, r5
 801822c:	4649      	mov	r1, r9
 801822e:	4620      	mov	r0, r4
 8018230:	f7ff ffa8 	bl	8018184 <L_shift>
 8018234:	4544      	cmp	r4, r8
 8018236:	d944      	bls.n	80182c2 <__hexnan+0xf2>
 8018238:	2300      	movs	r3, #0
 801823a:	f1a4 0904 	sub.w	r9, r4, #4
 801823e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018242:	f8cd b008 	str.w	fp, [sp, #8]
 8018246:	464c      	mov	r4, r9
 8018248:	461d      	mov	r5, r3
 801824a:	9903      	ldr	r1, [sp, #12]
 801824c:	e7d7      	b.n	80181fe <__hexnan+0x2e>
 801824e:	2a29      	cmp	r2, #41	; 0x29
 8018250:	d14a      	bne.n	80182e8 <__hexnan+0x118>
 8018252:	3102      	adds	r1, #2
 8018254:	f8ca 1000 	str.w	r1, [sl]
 8018258:	f1bb 0f00 	cmp.w	fp, #0
 801825c:	d044      	beq.n	80182e8 <__hexnan+0x118>
 801825e:	454c      	cmp	r4, r9
 8018260:	d206      	bcs.n	8018270 <__hexnan+0xa0>
 8018262:	2d07      	cmp	r5, #7
 8018264:	dc04      	bgt.n	8018270 <__hexnan+0xa0>
 8018266:	462a      	mov	r2, r5
 8018268:	4649      	mov	r1, r9
 801826a:	4620      	mov	r0, r4
 801826c:	f7ff ff8a 	bl	8018184 <L_shift>
 8018270:	4544      	cmp	r4, r8
 8018272:	d928      	bls.n	80182c6 <__hexnan+0xf6>
 8018274:	4643      	mov	r3, r8
 8018276:	f854 2b04 	ldr.w	r2, [r4], #4
 801827a:	f843 2b04 	str.w	r2, [r3], #4
 801827e:	42a6      	cmp	r6, r4
 8018280:	d2f9      	bcs.n	8018276 <__hexnan+0xa6>
 8018282:	2200      	movs	r2, #0
 8018284:	f843 2b04 	str.w	r2, [r3], #4
 8018288:	429e      	cmp	r6, r3
 801828a:	d2fb      	bcs.n	8018284 <__hexnan+0xb4>
 801828c:	6833      	ldr	r3, [r6, #0]
 801828e:	b91b      	cbnz	r3, 8018298 <__hexnan+0xc8>
 8018290:	4546      	cmp	r6, r8
 8018292:	d127      	bne.n	80182e4 <__hexnan+0x114>
 8018294:	2301      	movs	r3, #1
 8018296:	6033      	str	r3, [r6, #0]
 8018298:	2005      	movs	r0, #5
 801829a:	e026      	b.n	80182ea <__hexnan+0x11a>
 801829c:	3501      	adds	r5, #1
 801829e:	2d08      	cmp	r5, #8
 80182a0:	f10b 0b01 	add.w	fp, fp, #1
 80182a4:	dd06      	ble.n	80182b4 <__hexnan+0xe4>
 80182a6:	4544      	cmp	r4, r8
 80182a8:	d9cf      	bls.n	801824a <__hexnan+0x7a>
 80182aa:	2300      	movs	r3, #0
 80182ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80182b0:	2501      	movs	r5, #1
 80182b2:	3c04      	subs	r4, #4
 80182b4:	6822      	ldr	r2, [r4, #0]
 80182b6:	f000 000f 	and.w	r0, r0, #15
 80182ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80182be:	6020      	str	r0, [r4, #0]
 80182c0:	e7c3      	b.n	801824a <__hexnan+0x7a>
 80182c2:	2508      	movs	r5, #8
 80182c4:	e7c1      	b.n	801824a <__hexnan+0x7a>
 80182c6:	9b01      	ldr	r3, [sp, #4]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d0df      	beq.n	801828c <__hexnan+0xbc>
 80182cc:	f04f 32ff 	mov.w	r2, #4294967295
 80182d0:	f1c3 0320 	rsb	r3, r3, #32
 80182d4:	fa22 f303 	lsr.w	r3, r2, r3
 80182d8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80182dc:	401a      	ands	r2, r3
 80182de:	f847 2c04 	str.w	r2, [r7, #-4]
 80182e2:	e7d3      	b.n	801828c <__hexnan+0xbc>
 80182e4:	3e04      	subs	r6, #4
 80182e6:	e7d1      	b.n	801828c <__hexnan+0xbc>
 80182e8:	2004      	movs	r0, #4
 80182ea:	b007      	add	sp, #28
 80182ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080182f0 <_isatty_r>:
 80182f0:	b538      	push	{r3, r4, r5, lr}
 80182f2:	4c06      	ldr	r4, [pc, #24]	; (801830c <_isatty_r+0x1c>)
 80182f4:	2300      	movs	r3, #0
 80182f6:	4605      	mov	r5, r0
 80182f8:	4608      	mov	r0, r1
 80182fa:	6023      	str	r3, [r4, #0]
 80182fc:	f7f5 f966 	bl	800d5cc <_isatty>
 8018300:	1c43      	adds	r3, r0, #1
 8018302:	d102      	bne.n	801830a <_isatty_r+0x1a>
 8018304:	6823      	ldr	r3, [r4, #0]
 8018306:	b103      	cbz	r3, 801830a <_isatty_r+0x1a>
 8018308:	602b      	str	r3, [r5, #0]
 801830a:	bd38      	pop	{r3, r4, r5, pc}
 801830c:	20008f20 	.word	0x20008f20

08018310 <__locale_ctype_ptr_l>:
 8018310:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018314:	4770      	bx	lr
	...

08018318 <__locale_ctype_ptr>:
 8018318:	4b04      	ldr	r3, [pc, #16]	; (801832c <__locale_ctype_ptr+0x14>)
 801831a:	4a05      	ldr	r2, [pc, #20]	; (8018330 <__locale_ctype_ptr+0x18>)
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	6a1b      	ldr	r3, [r3, #32]
 8018320:	2b00      	cmp	r3, #0
 8018322:	bf08      	it	eq
 8018324:	4613      	moveq	r3, r2
 8018326:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801832a:	4770      	bx	lr
 801832c:	20000038 	.word	0x20000038
 8018330:	2000009c 	.word	0x2000009c

08018334 <__localeconv_l>:
 8018334:	30f0      	adds	r0, #240	; 0xf0
 8018336:	4770      	bx	lr

08018338 <_localeconv_r>:
 8018338:	4b04      	ldr	r3, [pc, #16]	; (801834c <_localeconv_r+0x14>)
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	6a18      	ldr	r0, [r3, #32]
 801833e:	4b04      	ldr	r3, [pc, #16]	; (8018350 <_localeconv_r+0x18>)
 8018340:	2800      	cmp	r0, #0
 8018342:	bf08      	it	eq
 8018344:	4618      	moveq	r0, r3
 8018346:	30f0      	adds	r0, #240	; 0xf0
 8018348:	4770      	bx	lr
 801834a:	bf00      	nop
 801834c:	20000038 	.word	0x20000038
 8018350:	2000009c 	.word	0x2000009c

08018354 <_lseek_r>:
 8018354:	b538      	push	{r3, r4, r5, lr}
 8018356:	4c07      	ldr	r4, [pc, #28]	; (8018374 <_lseek_r+0x20>)
 8018358:	4605      	mov	r5, r0
 801835a:	4608      	mov	r0, r1
 801835c:	4611      	mov	r1, r2
 801835e:	2200      	movs	r2, #0
 8018360:	6022      	str	r2, [r4, #0]
 8018362:	461a      	mov	r2, r3
 8018364:	f7f5 f934 	bl	800d5d0 <_lseek>
 8018368:	1c43      	adds	r3, r0, #1
 801836a:	d102      	bne.n	8018372 <_lseek_r+0x1e>
 801836c:	6823      	ldr	r3, [r4, #0]
 801836e:	b103      	cbz	r3, 8018372 <_lseek_r+0x1e>
 8018370:	602b      	str	r3, [r5, #0]
 8018372:	bd38      	pop	{r3, r4, r5, pc}
 8018374:	20008f20 	.word	0x20008f20

08018378 <malloc>:
 8018378:	4b02      	ldr	r3, [pc, #8]	; (8018384 <malloc+0xc>)
 801837a:	4601      	mov	r1, r0
 801837c:	6818      	ldr	r0, [r3, #0]
 801837e:	f7fb becd 	b.w	801411c <_malloc_r>
 8018382:	bf00      	nop
 8018384:	20000038 	.word	0x20000038

08018388 <__ascii_mbtowc>:
 8018388:	b082      	sub	sp, #8
 801838a:	b901      	cbnz	r1, 801838e <__ascii_mbtowc+0x6>
 801838c:	a901      	add	r1, sp, #4
 801838e:	b142      	cbz	r2, 80183a2 <__ascii_mbtowc+0x1a>
 8018390:	b14b      	cbz	r3, 80183a6 <__ascii_mbtowc+0x1e>
 8018392:	7813      	ldrb	r3, [r2, #0]
 8018394:	600b      	str	r3, [r1, #0]
 8018396:	7812      	ldrb	r2, [r2, #0]
 8018398:	1c10      	adds	r0, r2, #0
 801839a:	bf18      	it	ne
 801839c:	2001      	movne	r0, #1
 801839e:	b002      	add	sp, #8
 80183a0:	4770      	bx	lr
 80183a2:	4610      	mov	r0, r2
 80183a4:	e7fb      	b.n	801839e <__ascii_mbtowc+0x16>
 80183a6:	f06f 0001 	mvn.w	r0, #1
 80183aa:	e7f8      	b.n	801839e <__ascii_mbtowc+0x16>

080183ac <memmove>:
 80183ac:	4288      	cmp	r0, r1
 80183ae:	b510      	push	{r4, lr}
 80183b0:	eb01 0302 	add.w	r3, r1, r2
 80183b4:	d807      	bhi.n	80183c6 <memmove+0x1a>
 80183b6:	1e42      	subs	r2, r0, #1
 80183b8:	4299      	cmp	r1, r3
 80183ba:	d00a      	beq.n	80183d2 <memmove+0x26>
 80183bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80183c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80183c4:	e7f8      	b.n	80183b8 <memmove+0xc>
 80183c6:	4283      	cmp	r3, r0
 80183c8:	d9f5      	bls.n	80183b6 <memmove+0xa>
 80183ca:	1881      	adds	r1, r0, r2
 80183cc:	1ad2      	subs	r2, r2, r3
 80183ce:	42d3      	cmn	r3, r2
 80183d0:	d100      	bne.n	80183d4 <memmove+0x28>
 80183d2:	bd10      	pop	{r4, pc}
 80183d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80183d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80183dc:	e7f7      	b.n	80183ce <memmove+0x22>

080183de <__malloc_lock>:
 80183de:	4770      	bx	lr

080183e0 <__malloc_unlock>:
 80183e0:	4770      	bx	lr

080183e2 <_Balloc>:
 80183e2:	b570      	push	{r4, r5, r6, lr}
 80183e4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80183e6:	4604      	mov	r4, r0
 80183e8:	460e      	mov	r6, r1
 80183ea:	b93d      	cbnz	r5, 80183fc <_Balloc+0x1a>
 80183ec:	2010      	movs	r0, #16
 80183ee:	f7ff ffc3 	bl	8018378 <malloc>
 80183f2:	6260      	str	r0, [r4, #36]	; 0x24
 80183f4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80183f8:	6005      	str	r5, [r0, #0]
 80183fa:	60c5      	str	r5, [r0, #12]
 80183fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80183fe:	68eb      	ldr	r3, [r5, #12]
 8018400:	b183      	cbz	r3, 8018424 <_Balloc+0x42>
 8018402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018404:	68db      	ldr	r3, [r3, #12]
 8018406:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801840a:	b9b8      	cbnz	r0, 801843c <_Balloc+0x5a>
 801840c:	2101      	movs	r1, #1
 801840e:	fa01 f506 	lsl.w	r5, r1, r6
 8018412:	1d6a      	adds	r2, r5, #5
 8018414:	0092      	lsls	r2, r2, #2
 8018416:	4620      	mov	r0, r4
 8018418:	f000 fbe1 	bl	8018bde <_calloc_r>
 801841c:	b160      	cbz	r0, 8018438 <_Balloc+0x56>
 801841e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018422:	e00e      	b.n	8018442 <_Balloc+0x60>
 8018424:	2221      	movs	r2, #33	; 0x21
 8018426:	2104      	movs	r1, #4
 8018428:	4620      	mov	r0, r4
 801842a:	f000 fbd8 	bl	8018bde <_calloc_r>
 801842e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018430:	60e8      	str	r0, [r5, #12]
 8018432:	68db      	ldr	r3, [r3, #12]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d1e4      	bne.n	8018402 <_Balloc+0x20>
 8018438:	2000      	movs	r0, #0
 801843a:	bd70      	pop	{r4, r5, r6, pc}
 801843c:	6802      	ldr	r2, [r0, #0]
 801843e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018442:	2300      	movs	r3, #0
 8018444:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018448:	e7f7      	b.n	801843a <_Balloc+0x58>

0801844a <_Bfree>:
 801844a:	b570      	push	{r4, r5, r6, lr}
 801844c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801844e:	4606      	mov	r6, r0
 8018450:	460d      	mov	r5, r1
 8018452:	b93c      	cbnz	r4, 8018464 <_Bfree+0x1a>
 8018454:	2010      	movs	r0, #16
 8018456:	f7ff ff8f 	bl	8018378 <malloc>
 801845a:	6270      	str	r0, [r6, #36]	; 0x24
 801845c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018460:	6004      	str	r4, [r0, #0]
 8018462:	60c4      	str	r4, [r0, #12]
 8018464:	b13d      	cbz	r5, 8018476 <_Bfree+0x2c>
 8018466:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018468:	686a      	ldr	r2, [r5, #4]
 801846a:	68db      	ldr	r3, [r3, #12]
 801846c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018470:	6029      	str	r1, [r5, #0]
 8018472:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018476:	bd70      	pop	{r4, r5, r6, pc}

08018478 <__multadd>:
 8018478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801847c:	690d      	ldr	r5, [r1, #16]
 801847e:	461f      	mov	r7, r3
 8018480:	4606      	mov	r6, r0
 8018482:	460c      	mov	r4, r1
 8018484:	f101 0c14 	add.w	ip, r1, #20
 8018488:	2300      	movs	r3, #0
 801848a:	f8dc 0000 	ldr.w	r0, [ip]
 801848e:	b281      	uxth	r1, r0
 8018490:	fb02 7101 	mla	r1, r2, r1, r7
 8018494:	0c0f      	lsrs	r7, r1, #16
 8018496:	0c00      	lsrs	r0, r0, #16
 8018498:	fb02 7000 	mla	r0, r2, r0, r7
 801849c:	b289      	uxth	r1, r1
 801849e:	3301      	adds	r3, #1
 80184a0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80184a4:	429d      	cmp	r5, r3
 80184a6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80184aa:	f84c 1b04 	str.w	r1, [ip], #4
 80184ae:	dcec      	bgt.n	801848a <__multadd+0x12>
 80184b0:	b1d7      	cbz	r7, 80184e8 <__multadd+0x70>
 80184b2:	68a3      	ldr	r3, [r4, #8]
 80184b4:	42ab      	cmp	r3, r5
 80184b6:	dc12      	bgt.n	80184de <__multadd+0x66>
 80184b8:	6861      	ldr	r1, [r4, #4]
 80184ba:	4630      	mov	r0, r6
 80184bc:	3101      	adds	r1, #1
 80184be:	f7ff ff90 	bl	80183e2 <_Balloc>
 80184c2:	6922      	ldr	r2, [r4, #16]
 80184c4:	3202      	adds	r2, #2
 80184c6:	f104 010c 	add.w	r1, r4, #12
 80184ca:	4680      	mov	r8, r0
 80184cc:	0092      	lsls	r2, r2, #2
 80184ce:	300c      	adds	r0, #12
 80184d0:	f7fb fdc2 	bl	8014058 <memcpy>
 80184d4:	4621      	mov	r1, r4
 80184d6:	4630      	mov	r0, r6
 80184d8:	f7ff ffb7 	bl	801844a <_Bfree>
 80184dc:	4644      	mov	r4, r8
 80184de:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80184e2:	3501      	adds	r5, #1
 80184e4:	615f      	str	r7, [r3, #20]
 80184e6:	6125      	str	r5, [r4, #16]
 80184e8:	4620      	mov	r0, r4
 80184ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080184ee <__s2b>:
 80184ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184f2:	460c      	mov	r4, r1
 80184f4:	4615      	mov	r5, r2
 80184f6:	461f      	mov	r7, r3
 80184f8:	2209      	movs	r2, #9
 80184fa:	3308      	adds	r3, #8
 80184fc:	4606      	mov	r6, r0
 80184fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8018502:	2100      	movs	r1, #0
 8018504:	2201      	movs	r2, #1
 8018506:	429a      	cmp	r2, r3
 8018508:	db20      	blt.n	801854c <__s2b+0x5e>
 801850a:	4630      	mov	r0, r6
 801850c:	f7ff ff69 	bl	80183e2 <_Balloc>
 8018510:	9b08      	ldr	r3, [sp, #32]
 8018512:	6143      	str	r3, [r0, #20]
 8018514:	2d09      	cmp	r5, #9
 8018516:	f04f 0301 	mov.w	r3, #1
 801851a:	6103      	str	r3, [r0, #16]
 801851c:	dd19      	ble.n	8018552 <__s2b+0x64>
 801851e:	f104 0809 	add.w	r8, r4, #9
 8018522:	46c1      	mov	r9, r8
 8018524:	442c      	add	r4, r5
 8018526:	f819 3b01 	ldrb.w	r3, [r9], #1
 801852a:	4601      	mov	r1, r0
 801852c:	3b30      	subs	r3, #48	; 0x30
 801852e:	220a      	movs	r2, #10
 8018530:	4630      	mov	r0, r6
 8018532:	f7ff ffa1 	bl	8018478 <__multadd>
 8018536:	45a1      	cmp	r9, r4
 8018538:	d1f5      	bne.n	8018526 <__s2b+0x38>
 801853a:	eb08 0405 	add.w	r4, r8, r5
 801853e:	3c08      	subs	r4, #8
 8018540:	1b2d      	subs	r5, r5, r4
 8018542:	1963      	adds	r3, r4, r5
 8018544:	42bb      	cmp	r3, r7
 8018546:	db07      	blt.n	8018558 <__s2b+0x6a>
 8018548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801854c:	0052      	lsls	r2, r2, #1
 801854e:	3101      	adds	r1, #1
 8018550:	e7d9      	b.n	8018506 <__s2b+0x18>
 8018552:	340a      	adds	r4, #10
 8018554:	2509      	movs	r5, #9
 8018556:	e7f3      	b.n	8018540 <__s2b+0x52>
 8018558:	f814 3b01 	ldrb.w	r3, [r4], #1
 801855c:	4601      	mov	r1, r0
 801855e:	3b30      	subs	r3, #48	; 0x30
 8018560:	220a      	movs	r2, #10
 8018562:	4630      	mov	r0, r6
 8018564:	f7ff ff88 	bl	8018478 <__multadd>
 8018568:	e7eb      	b.n	8018542 <__s2b+0x54>

0801856a <__hi0bits>:
 801856a:	0c02      	lsrs	r2, r0, #16
 801856c:	0412      	lsls	r2, r2, #16
 801856e:	4603      	mov	r3, r0
 8018570:	b9b2      	cbnz	r2, 80185a0 <__hi0bits+0x36>
 8018572:	0403      	lsls	r3, r0, #16
 8018574:	2010      	movs	r0, #16
 8018576:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801857a:	bf04      	itt	eq
 801857c:	021b      	lsleq	r3, r3, #8
 801857e:	3008      	addeq	r0, #8
 8018580:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018584:	bf04      	itt	eq
 8018586:	011b      	lsleq	r3, r3, #4
 8018588:	3004      	addeq	r0, #4
 801858a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801858e:	bf04      	itt	eq
 8018590:	009b      	lsleq	r3, r3, #2
 8018592:	3002      	addeq	r0, #2
 8018594:	2b00      	cmp	r3, #0
 8018596:	db06      	blt.n	80185a6 <__hi0bits+0x3c>
 8018598:	005b      	lsls	r3, r3, #1
 801859a:	d503      	bpl.n	80185a4 <__hi0bits+0x3a>
 801859c:	3001      	adds	r0, #1
 801859e:	4770      	bx	lr
 80185a0:	2000      	movs	r0, #0
 80185a2:	e7e8      	b.n	8018576 <__hi0bits+0xc>
 80185a4:	2020      	movs	r0, #32
 80185a6:	4770      	bx	lr

080185a8 <__lo0bits>:
 80185a8:	6803      	ldr	r3, [r0, #0]
 80185aa:	f013 0207 	ands.w	r2, r3, #7
 80185ae:	4601      	mov	r1, r0
 80185b0:	d00b      	beq.n	80185ca <__lo0bits+0x22>
 80185b2:	07da      	lsls	r2, r3, #31
 80185b4:	d423      	bmi.n	80185fe <__lo0bits+0x56>
 80185b6:	0798      	lsls	r0, r3, #30
 80185b8:	bf49      	itett	mi
 80185ba:	085b      	lsrmi	r3, r3, #1
 80185bc:	089b      	lsrpl	r3, r3, #2
 80185be:	2001      	movmi	r0, #1
 80185c0:	600b      	strmi	r3, [r1, #0]
 80185c2:	bf5c      	itt	pl
 80185c4:	600b      	strpl	r3, [r1, #0]
 80185c6:	2002      	movpl	r0, #2
 80185c8:	4770      	bx	lr
 80185ca:	b298      	uxth	r0, r3
 80185cc:	b9a8      	cbnz	r0, 80185fa <__lo0bits+0x52>
 80185ce:	0c1b      	lsrs	r3, r3, #16
 80185d0:	2010      	movs	r0, #16
 80185d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80185d6:	bf04      	itt	eq
 80185d8:	0a1b      	lsreq	r3, r3, #8
 80185da:	3008      	addeq	r0, #8
 80185dc:	071a      	lsls	r2, r3, #28
 80185de:	bf04      	itt	eq
 80185e0:	091b      	lsreq	r3, r3, #4
 80185e2:	3004      	addeq	r0, #4
 80185e4:	079a      	lsls	r2, r3, #30
 80185e6:	bf04      	itt	eq
 80185e8:	089b      	lsreq	r3, r3, #2
 80185ea:	3002      	addeq	r0, #2
 80185ec:	07da      	lsls	r2, r3, #31
 80185ee:	d402      	bmi.n	80185f6 <__lo0bits+0x4e>
 80185f0:	085b      	lsrs	r3, r3, #1
 80185f2:	d006      	beq.n	8018602 <__lo0bits+0x5a>
 80185f4:	3001      	adds	r0, #1
 80185f6:	600b      	str	r3, [r1, #0]
 80185f8:	4770      	bx	lr
 80185fa:	4610      	mov	r0, r2
 80185fc:	e7e9      	b.n	80185d2 <__lo0bits+0x2a>
 80185fe:	2000      	movs	r0, #0
 8018600:	4770      	bx	lr
 8018602:	2020      	movs	r0, #32
 8018604:	4770      	bx	lr

08018606 <__i2b>:
 8018606:	b510      	push	{r4, lr}
 8018608:	460c      	mov	r4, r1
 801860a:	2101      	movs	r1, #1
 801860c:	f7ff fee9 	bl	80183e2 <_Balloc>
 8018610:	2201      	movs	r2, #1
 8018612:	6144      	str	r4, [r0, #20]
 8018614:	6102      	str	r2, [r0, #16]
 8018616:	bd10      	pop	{r4, pc}

08018618 <__multiply>:
 8018618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801861c:	4614      	mov	r4, r2
 801861e:	690a      	ldr	r2, [r1, #16]
 8018620:	6923      	ldr	r3, [r4, #16]
 8018622:	429a      	cmp	r2, r3
 8018624:	bfb8      	it	lt
 8018626:	460b      	movlt	r3, r1
 8018628:	4688      	mov	r8, r1
 801862a:	bfbc      	itt	lt
 801862c:	46a0      	movlt	r8, r4
 801862e:	461c      	movlt	r4, r3
 8018630:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018634:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018638:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801863c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018640:	eb07 0609 	add.w	r6, r7, r9
 8018644:	42b3      	cmp	r3, r6
 8018646:	bfb8      	it	lt
 8018648:	3101      	addlt	r1, #1
 801864a:	f7ff feca 	bl	80183e2 <_Balloc>
 801864e:	f100 0514 	add.w	r5, r0, #20
 8018652:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018656:	462b      	mov	r3, r5
 8018658:	2200      	movs	r2, #0
 801865a:	4573      	cmp	r3, lr
 801865c:	d316      	bcc.n	801868c <__multiply+0x74>
 801865e:	f104 0214 	add.w	r2, r4, #20
 8018662:	f108 0114 	add.w	r1, r8, #20
 8018666:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801866a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801866e:	9300      	str	r3, [sp, #0]
 8018670:	9b00      	ldr	r3, [sp, #0]
 8018672:	9201      	str	r2, [sp, #4]
 8018674:	4293      	cmp	r3, r2
 8018676:	d80c      	bhi.n	8018692 <__multiply+0x7a>
 8018678:	2e00      	cmp	r6, #0
 801867a:	dd03      	ble.n	8018684 <__multiply+0x6c>
 801867c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018680:	2b00      	cmp	r3, #0
 8018682:	d05d      	beq.n	8018740 <__multiply+0x128>
 8018684:	6106      	str	r6, [r0, #16]
 8018686:	b003      	add	sp, #12
 8018688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801868c:	f843 2b04 	str.w	r2, [r3], #4
 8018690:	e7e3      	b.n	801865a <__multiply+0x42>
 8018692:	f8b2 b000 	ldrh.w	fp, [r2]
 8018696:	f1bb 0f00 	cmp.w	fp, #0
 801869a:	d023      	beq.n	80186e4 <__multiply+0xcc>
 801869c:	4689      	mov	r9, r1
 801869e:	46ac      	mov	ip, r5
 80186a0:	f04f 0800 	mov.w	r8, #0
 80186a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80186a8:	f8dc a000 	ldr.w	sl, [ip]
 80186ac:	b2a3      	uxth	r3, r4
 80186ae:	fa1f fa8a 	uxth.w	sl, sl
 80186b2:	fb0b a303 	mla	r3, fp, r3, sl
 80186b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80186ba:	f8dc 4000 	ldr.w	r4, [ip]
 80186be:	4443      	add	r3, r8
 80186c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80186c4:	fb0b 840a 	mla	r4, fp, sl, r8
 80186c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80186cc:	46e2      	mov	sl, ip
 80186ce:	b29b      	uxth	r3, r3
 80186d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80186d4:	454f      	cmp	r7, r9
 80186d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80186da:	f84a 3b04 	str.w	r3, [sl], #4
 80186de:	d82b      	bhi.n	8018738 <__multiply+0x120>
 80186e0:	f8cc 8004 	str.w	r8, [ip, #4]
 80186e4:	9b01      	ldr	r3, [sp, #4]
 80186e6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80186ea:	3204      	adds	r2, #4
 80186ec:	f1ba 0f00 	cmp.w	sl, #0
 80186f0:	d020      	beq.n	8018734 <__multiply+0x11c>
 80186f2:	682b      	ldr	r3, [r5, #0]
 80186f4:	4689      	mov	r9, r1
 80186f6:	46a8      	mov	r8, r5
 80186f8:	f04f 0b00 	mov.w	fp, #0
 80186fc:	f8b9 c000 	ldrh.w	ip, [r9]
 8018700:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018704:	fb0a 440c 	mla	r4, sl, ip, r4
 8018708:	445c      	add	r4, fp
 801870a:	46c4      	mov	ip, r8
 801870c:	b29b      	uxth	r3, r3
 801870e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018712:	f84c 3b04 	str.w	r3, [ip], #4
 8018716:	f859 3b04 	ldr.w	r3, [r9], #4
 801871a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801871e:	0c1b      	lsrs	r3, r3, #16
 8018720:	fb0a b303 	mla	r3, sl, r3, fp
 8018724:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018728:	454f      	cmp	r7, r9
 801872a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801872e:	d805      	bhi.n	801873c <__multiply+0x124>
 8018730:	f8c8 3004 	str.w	r3, [r8, #4]
 8018734:	3504      	adds	r5, #4
 8018736:	e79b      	b.n	8018670 <__multiply+0x58>
 8018738:	46d4      	mov	ip, sl
 801873a:	e7b3      	b.n	80186a4 <__multiply+0x8c>
 801873c:	46e0      	mov	r8, ip
 801873e:	e7dd      	b.n	80186fc <__multiply+0xe4>
 8018740:	3e01      	subs	r6, #1
 8018742:	e799      	b.n	8018678 <__multiply+0x60>

08018744 <__pow5mult>:
 8018744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018748:	4615      	mov	r5, r2
 801874a:	f012 0203 	ands.w	r2, r2, #3
 801874e:	4606      	mov	r6, r0
 8018750:	460f      	mov	r7, r1
 8018752:	d007      	beq.n	8018764 <__pow5mult+0x20>
 8018754:	3a01      	subs	r2, #1
 8018756:	4c21      	ldr	r4, [pc, #132]	; (80187dc <__pow5mult+0x98>)
 8018758:	2300      	movs	r3, #0
 801875a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801875e:	f7ff fe8b 	bl	8018478 <__multadd>
 8018762:	4607      	mov	r7, r0
 8018764:	10ad      	asrs	r5, r5, #2
 8018766:	d035      	beq.n	80187d4 <__pow5mult+0x90>
 8018768:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801876a:	b93c      	cbnz	r4, 801877c <__pow5mult+0x38>
 801876c:	2010      	movs	r0, #16
 801876e:	f7ff fe03 	bl	8018378 <malloc>
 8018772:	6270      	str	r0, [r6, #36]	; 0x24
 8018774:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018778:	6004      	str	r4, [r0, #0]
 801877a:	60c4      	str	r4, [r0, #12]
 801877c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018780:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018784:	b94c      	cbnz	r4, 801879a <__pow5mult+0x56>
 8018786:	f240 2171 	movw	r1, #625	; 0x271
 801878a:	4630      	mov	r0, r6
 801878c:	f7ff ff3b 	bl	8018606 <__i2b>
 8018790:	2300      	movs	r3, #0
 8018792:	f8c8 0008 	str.w	r0, [r8, #8]
 8018796:	4604      	mov	r4, r0
 8018798:	6003      	str	r3, [r0, #0]
 801879a:	f04f 0800 	mov.w	r8, #0
 801879e:	07eb      	lsls	r3, r5, #31
 80187a0:	d50a      	bpl.n	80187b8 <__pow5mult+0x74>
 80187a2:	4639      	mov	r1, r7
 80187a4:	4622      	mov	r2, r4
 80187a6:	4630      	mov	r0, r6
 80187a8:	f7ff ff36 	bl	8018618 <__multiply>
 80187ac:	4639      	mov	r1, r7
 80187ae:	4681      	mov	r9, r0
 80187b0:	4630      	mov	r0, r6
 80187b2:	f7ff fe4a 	bl	801844a <_Bfree>
 80187b6:	464f      	mov	r7, r9
 80187b8:	106d      	asrs	r5, r5, #1
 80187ba:	d00b      	beq.n	80187d4 <__pow5mult+0x90>
 80187bc:	6820      	ldr	r0, [r4, #0]
 80187be:	b938      	cbnz	r0, 80187d0 <__pow5mult+0x8c>
 80187c0:	4622      	mov	r2, r4
 80187c2:	4621      	mov	r1, r4
 80187c4:	4630      	mov	r0, r6
 80187c6:	f7ff ff27 	bl	8018618 <__multiply>
 80187ca:	6020      	str	r0, [r4, #0]
 80187cc:	f8c0 8000 	str.w	r8, [r0]
 80187d0:	4604      	mov	r4, r0
 80187d2:	e7e4      	b.n	801879e <__pow5mult+0x5a>
 80187d4:	4638      	mov	r0, r7
 80187d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187da:	bf00      	nop
 80187dc:	08019648 	.word	0x08019648

080187e0 <__lshift>:
 80187e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187e4:	460c      	mov	r4, r1
 80187e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80187ea:	6923      	ldr	r3, [r4, #16]
 80187ec:	6849      	ldr	r1, [r1, #4]
 80187ee:	eb0a 0903 	add.w	r9, sl, r3
 80187f2:	68a3      	ldr	r3, [r4, #8]
 80187f4:	4607      	mov	r7, r0
 80187f6:	4616      	mov	r6, r2
 80187f8:	f109 0501 	add.w	r5, r9, #1
 80187fc:	42ab      	cmp	r3, r5
 80187fe:	db32      	blt.n	8018866 <__lshift+0x86>
 8018800:	4638      	mov	r0, r7
 8018802:	f7ff fdee 	bl	80183e2 <_Balloc>
 8018806:	2300      	movs	r3, #0
 8018808:	4680      	mov	r8, r0
 801880a:	f100 0114 	add.w	r1, r0, #20
 801880e:	461a      	mov	r2, r3
 8018810:	4553      	cmp	r3, sl
 8018812:	db2b      	blt.n	801886c <__lshift+0x8c>
 8018814:	6920      	ldr	r0, [r4, #16]
 8018816:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801881a:	f104 0314 	add.w	r3, r4, #20
 801881e:	f016 021f 	ands.w	r2, r6, #31
 8018822:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018826:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801882a:	d025      	beq.n	8018878 <__lshift+0x98>
 801882c:	f1c2 0e20 	rsb	lr, r2, #32
 8018830:	2000      	movs	r0, #0
 8018832:	681e      	ldr	r6, [r3, #0]
 8018834:	468a      	mov	sl, r1
 8018836:	4096      	lsls	r6, r2
 8018838:	4330      	orrs	r0, r6
 801883a:	f84a 0b04 	str.w	r0, [sl], #4
 801883e:	f853 0b04 	ldr.w	r0, [r3], #4
 8018842:	459c      	cmp	ip, r3
 8018844:	fa20 f00e 	lsr.w	r0, r0, lr
 8018848:	d814      	bhi.n	8018874 <__lshift+0x94>
 801884a:	6048      	str	r0, [r1, #4]
 801884c:	b108      	cbz	r0, 8018852 <__lshift+0x72>
 801884e:	f109 0502 	add.w	r5, r9, #2
 8018852:	3d01      	subs	r5, #1
 8018854:	4638      	mov	r0, r7
 8018856:	f8c8 5010 	str.w	r5, [r8, #16]
 801885a:	4621      	mov	r1, r4
 801885c:	f7ff fdf5 	bl	801844a <_Bfree>
 8018860:	4640      	mov	r0, r8
 8018862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018866:	3101      	adds	r1, #1
 8018868:	005b      	lsls	r3, r3, #1
 801886a:	e7c7      	b.n	80187fc <__lshift+0x1c>
 801886c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018870:	3301      	adds	r3, #1
 8018872:	e7cd      	b.n	8018810 <__lshift+0x30>
 8018874:	4651      	mov	r1, sl
 8018876:	e7dc      	b.n	8018832 <__lshift+0x52>
 8018878:	3904      	subs	r1, #4
 801887a:	f853 2b04 	ldr.w	r2, [r3], #4
 801887e:	f841 2f04 	str.w	r2, [r1, #4]!
 8018882:	459c      	cmp	ip, r3
 8018884:	d8f9      	bhi.n	801887a <__lshift+0x9a>
 8018886:	e7e4      	b.n	8018852 <__lshift+0x72>

08018888 <__mcmp>:
 8018888:	6903      	ldr	r3, [r0, #16]
 801888a:	690a      	ldr	r2, [r1, #16]
 801888c:	1a9b      	subs	r3, r3, r2
 801888e:	b530      	push	{r4, r5, lr}
 8018890:	d10c      	bne.n	80188ac <__mcmp+0x24>
 8018892:	0092      	lsls	r2, r2, #2
 8018894:	3014      	adds	r0, #20
 8018896:	3114      	adds	r1, #20
 8018898:	1884      	adds	r4, r0, r2
 801889a:	4411      	add	r1, r2
 801889c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80188a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80188a4:	4295      	cmp	r5, r2
 80188a6:	d003      	beq.n	80188b0 <__mcmp+0x28>
 80188a8:	d305      	bcc.n	80188b6 <__mcmp+0x2e>
 80188aa:	2301      	movs	r3, #1
 80188ac:	4618      	mov	r0, r3
 80188ae:	bd30      	pop	{r4, r5, pc}
 80188b0:	42a0      	cmp	r0, r4
 80188b2:	d3f3      	bcc.n	801889c <__mcmp+0x14>
 80188b4:	e7fa      	b.n	80188ac <__mcmp+0x24>
 80188b6:	f04f 33ff 	mov.w	r3, #4294967295
 80188ba:	e7f7      	b.n	80188ac <__mcmp+0x24>

080188bc <__mdiff>:
 80188bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188c0:	460d      	mov	r5, r1
 80188c2:	4607      	mov	r7, r0
 80188c4:	4611      	mov	r1, r2
 80188c6:	4628      	mov	r0, r5
 80188c8:	4614      	mov	r4, r2
 80188ca:	f7ff ffdd 	bl	8018888 <__mcmp>
 80188ce:	1e06      	subs	r6, r0, #0
 80188d0:	d108      	bne.n	80188e4 <__mdiff+0x28>
 80188d2:	4631      	mov	r1, r6
 80188d4:	4638      	mov	r0, r7
 80188d6:	f7ff fd84 	bl	80183e2 <_Balloc>
 80188da:	2301      	movs	r3, #1
 80188dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80188e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188e4:	bfa4      	itt	ge
 80188e6:	4623      	movge	r3, r4
 80188e8:	462c      	movge	r4, r5
 80188ea:	4638      	mov	r0, r7
 80188ec:	6861      	ldr	r1, [r4, #4]
 80188ee:	bfa6      	itte	ge
 80188f0:	461d      	movge	r5, r3
 80188f2:	2600      	movge	r6, #0
 80188f4:	2601      	movlt	r6, #1
 80188f6:	f7ff fd74 	bl	80183e2 <_Balloc>
 80188fa:	692b      	ldr	r3, [r5, #16]
 80188fc:	60c6      	str	r6, [r0, #12]
 80188fe:	6926      	ldr	r6, [r4, #16]
 8018900:	f105 0914 	add.w	r9, r5, #20
 8018904:	f104 0214 	add.w	r2, r4, #20
 8018908:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801890c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018910:	f100 0514 	add.w	r5, r0, #20
 8018914:	f04f 0e00 	mov.w	lr, #0
 8018918:	f852 ab04 	ldr.w	sl, [r2], #4
 801891c:	f859 4b04 	ldr.w	r4, [r9], #4
 8018920:	fa1e f18a 	uxtah	r1, lr, sl
 8018924:	b2a3      	uxth	r3, r4
 8018926:	1ac9      	subs	r1, r1, r3
 8018928:	0c23      	lsrs	r3, r4, #16
 801892a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801892e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018932:	b289      	uxth	r1, r1
 8018934:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018938:	45c8      	cmp	r8, r9
 801893a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801893e:	4694      	mov	ip, r2
 8018940:	f845 3b04 	str.w	r3, [r5], #4
 8018944:	d8e8      	bhi.n	8018918 <__mdiff+0x5c>
 8018946:	45bc      	cmp	ip, r7
 8018948:	d304      	bcc.n	8018954 <__mdiff+0x98>
 801894a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801894e:	b183      	cbz	r3, 8018972 <__mdiff+0xb6>
 8018950:	6106      	str	r6, [r0, #16]
 8018952:	e7c5      	b.n	80188e0 <__mdiff+0x24>
 8018954:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018958:	fa1e f381 	uxtah	r3, lr, r1
 801895c:	141a      	asrs	r2, r3, #16
 801895e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018962:	b29b      	uxth	r3, r3
 8018964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018968:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801896c:	f845 3b04 	str.w	r3, [r5], #4
 8018970:	e7e9      	b.n	8018946 <__mdiff+0x8a>
 8018972:	3e01      	subs	r6, #1
 8018974:	e7e9      	b.n	801894a <__mdiff+0x8e>
	...

08018978 <__ulp>:
 8018978:	4b12      	ldr	r3, [pc, #72]	; (80189c4 <__ulp+0x4c>)
 801897a:	ee10 2a90 	vmov	r2, s1
 801897e:	401a      	ands	r2, r3
 8018980:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018984:	2b00      	cmp	r3, #0
 8018986:	dd04      	ble.n	8018992 <__ulp+0x1a>
 8018988:	2000      	movs	r0, #0
 801898a:	4619      	mov	r1, r3
 801898c:	ec41 0b10 	vmov	d0, r0, r1
 8018990:	4770      	bx	lr
 8018992:	425b      	negs	r3, r3
 8018994:	151b      	asrs	r3, r3, #20
 8018996:	2b13      	cmp	r3, #19
 8018998:	f04f 0000 	mov.w	r0, #0
 801899c:	f04f 0100 	mov.w	r1, #0
 80189a0:	dc04      	bgt.n	80189ac <__ulp+0x34>
 80189a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80189a6:	fa42 f103 	asr.w	r1, r2, r3
 80189aa:	e7ef      	b.n	801898c <__ulp+0x14>
 80189ac:	3b14      	subs	r3, #20
 80189ae:	2b1e      	cmp	r3, #30
 80189b0:	f04f 0201 	mov.w	r2, #1
 80189b4:	bfda      	itte	le
 80189b6:	f1c3 031f 	rsble	r3, r3, #31
 80189ba:	fa02 f303 	lslle.w	r3, r2, r3
 80189be:	4613      	movgt	r3, r2
 80189c0:	4618      	mov	r0, r3
 80189c2:	e7e3      	b.n	801898c <__ulp+0x14>
 80189c4:	7ff00000 	.word	0x7ff00000

080189c8 <__b2d>:
 80189c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189ca:	6905      	ldr	r5, [r0, #16]
 80189cc:	f100 0714 	add.w	r7, r0, #20
 80189d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80189d4:	1f2e      	subs	r6, r5, #4
 80189d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80189da:	4620      	mov	r0, r4
 80189dc:	f7ff fdc5 	bl	801856a <__hi0bits>
 80189e0:	f1c0 0320 	rsb	r3, r0, #32
 80189e4:	280a      	cmp	r0, #10
 80189e6:	600b      	str	r3, [r1, #0]
 80189e8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018a60 <__b2d+0x98>
 80189ec:	dc14      	bgt.n	8018a18 <__b2d+0x50>
 80189ee:	f1c0 0e0b 	rsb	lr, r0, #11
 80189f2:	fa24 f10e 	lsr.w	r1, r4, lr
 80189f6:	42b7      	cmp	r7, r6
 80189f8:	ea41 030c 	orr.w	r3, r1, ip
 80189fc:	bf34      	ite	cc
 80189fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018a02:	2100      	movcs	r1, #0
 8018a04:	3015      	adds	r0, #21
 8018a06:	fa04 f000 	lsl.w	r0, r4, r0
 8018a0a:	fa21 f10e 	lsr.w	r1, r1, lr
 8018a0e:	ea40 0201 	orr.w	r2, r0, r1
 8018a12:	ec43 2b10 	vmov	d0, r2, r3
 8018a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a18:	42b7      	cmp	r7, r6
 8018a1a:	bf3a      	itte	cc
 8018a1c:	f1a5 0608 	subcc.w	r6, r5, #8
 8018a20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018a24:	2100      	movcs	r1, #0
 8018a26:	380b      	subs	r0, #11
 8018a28:	d015      	beq.n	8018a56 <__b2d+0x8e>
 8018a2a:	4084      	lsls	r4, r0
 8018a2c:	f1c0 0520 	rsb	r5, r0, #32
 8018a30:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018a34:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018a38:	42be      	cmp	r6, r7
 8018a3a:	fa21 fc05 	lsr.w	ip, r1, r5
 8018a3e:	ea44 030c 	orr.w	r3, r4, ip
 8018a42:	bf8c      	ite	hi
 8018a44:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018a48:	2400      	movls	r4, #0
 8018a4a:	fa01 f000 	lsl.w	r0, r1, r0
 8018a4e:	40ec      	lsrs	r4, r5
 8018a50:	ea40 0204 	orr.w	r2, r0, r4
 8018a54:	e7dd      	b.n	8018a12 <__b2d+0x4a>
 8018a56:	ea44 030c 	orr.w	r3, r4, ip
 8018a5a:	460a      	mov	r2, r1
 8018a5c:	e7d9      	b.n	8018a12 <__b2d+0x4a>
 8018a5e:	bf00      	nop
 8018a60:	3ff00000 	.word	0x3ff00000

08018a64 <__d2b>:
 8018a64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018a68:	460e      	mov	r6, r1
 8018a6a:	2101      	movs	r1, #1
 8018a6c:	ec59 8b10 	vmov	r8, r9, d0
 8018a70:	4615      	mov	r5, r2
 8018a72:	f7ff fcb6 	bl	80183e2 <_Balloc>
 8018a76:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018a7a:	4607      	mov	r7, r0
 8018a7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018a80:	bb34      	cbnz	r4, 8018ad0 <__d2b+0x6c>
 8018a82:	9301      	str	r3, [sp, #4]
 8018a84:	f1b8 0300 	subs.w	r3, r8, #0
 8018a88:	d027      	beq.n	8018ada <__d2b+0x76>
 8018a8a:	a802      	add	r0, sp, #8
 8018a8c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018a90:	f7ff fd8a 	bl	80185a8 <__lo0bits>
 8018a94:	9900      	ldr	r1, [sp, #0]
 8018a96:	b1f0      	cbz	r0, 8018ad6 <__d2b+0x72>
 8018a98:	9a01      	ldr	r2, [sp, #4]
 8018a9a:	f1c0 0320 	rsb	r3, r0, #32
 8018a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8018aa2:	430b      	orrs	r3, r1
 8018aa4:	40c2      	lsrs	r2, r0
 8018aa6:	617b      	str	r3, [r7, #20]
 8018aa8:	9201      	str	r2, [sp, #4]
 8018aaa:	9b01      	ldr	r3, [sp, #4]
 8018aac:	61bb      	str	r3, [r7, #24]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	bf14      	ite	ne
 8018ab2:	2102      	movne	r1, #2
 8018ab4:	2101      	moveq	r1, #1
 8018ab6:	6139      	str	r1, [r7, #16]
 8018ab8:	b1c4      	cbz	r4, 8018aec <__d2b+0x88>
 8018aba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018abe:	4404      	add	r4, r0
 8018ac0:	6034      	str	r4, [r6, #0]
 8018ac2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018ac6:	6028      	str	r0, [r5, #0]
 8018ac8:	4638      	mov	r0, r7
 8018aca:	b003      	add	sp, #12
 8018acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018ad4:	e7d5      	b.n	8018a82 <__d2b+0x1e>
 8018ad6:	6179      	str	r1, [r7, #20]
 8018ad8:	e7e7      	b.n	8018aaa <__d2b+0x46>
 8018ada:	a801      	add	r0, sp, #4
 8018adc:	f7ff fd64 	bl	80185a8 <__lo0bits>
 8018ae0:	9b01      	ldr	r3, [sp, #4]
 8018ae2:	617b      	str	r3, [r7, #20]
 8018ae4:	2101      	movs	r1, #1
 8018ae6:	6139      	str	r1, [r7, #16]
 8018ae8:	3020      	adds	r0, #32
 8018aea:	e7e5      	b.n	8018ab8 <__d2b+0x54>
 8018aec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018af0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018af4:	6030      	str	r0, [r6, #0]
 8018af6:	6918      	ldr	r0, [r3, #16]
 8018af8:	f7ff fd37 	bl	801856a <__hi0bits>
 8018afc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018b00:	e7e1      	b.n	8018ac6 <__d2b+0x62>

08018b02 <__ratio>:
 8018b02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b06:	4688      	mov	r8, r1
 8018b08:	4669      	mov	r1, sp
 8018b0a:	4681      	mov	r9, r0
 8018b0c:	f7ff ff5c 	bl	80189c8 <__b2d>
 8018b10:	a901      	add	r1, sp, #4
 8018b12:	4640      	mov	r0, r8
 8018b14:	ec57 6b10 	vmov	r6, r7, d0
 8018b18:	f7ff ff56 	bl	80189c8 <__b2d>
 8018b1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018b20:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018b24:	eba3 0c02 	sub.w	ip, r3, r2
 8018b28:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018b2c:	1a9b      	subs	r3, r3, r2
 8018b2e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018b32:	ec5b ab10 	vmov	sl, fp, d0
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	bfce      	itee	gt
 8018b3a:	463a      	movgt	r2, r7
 8018b3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018b40:	465a      	movle	r2, fp
 8018b42:	4659      	mov	r1, fp
 8018b44:	463d      	mov	r5, r7
 8018b46:	bfd4      	ite	le
 8018b48:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018b4c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018b50:	4630      	mov	r0, r6
 8018b52:	ee10 2a10 	vmov	r2, s0
 8018b56:	460b      	mov	r3, r1
 8018b58:	4629      	mov	r1, r5
 8018b5a:	f7ef fdaf 	bl	80086bc <__aeabi_ddiv>
 8018b5e:	ec41 0b10 	vmov	d0, r0, r1
 8018b62:	b003      	add	sp, #12
 8018b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b68 <__copybits>:
 8018b68:	3901      	subs	r1, #1
 8018b6a:	b510      	push	{r4, lr}
 8018b6c:	1149      	asrs	r1, r1, #5
 8018b6e:	6914      	ldr	r4, [r2, #16]
 8018b70:	3101      	adds	r1, #1
 8018b72:	f102 0314 	add.w	r3, r2, #20
 8018b76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018b7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018b7e:	42a3      	cmp	r3, r4
 8018b80:	4602      	mov	r2, r0
 8018b82:	d303      	bcc.n	8018b8c <__copybits+0x24>
 8018b84:	2300      	movs	r3, #0
 8018b86:	428a      	cmp	r2, r1
 8018b88:	d305      	bcc.n	8018b96 <__copybits+0x2e>
 8018b8a:	bd10      	pop	{r4, pc}
 8018b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b90:	f840 2b04 	str.w	r2, [r0], #4
 8018b94:	e7f3      	b.n	8018b7e <__copybits+0x16>
 8018b96:	f842 3b04 	str.w	r3, [r2], #4
 8018b9a:	e7f4      	b.n	8018b86 <__copybits+0x1e>

08018b9c <__any_on>:
 8018b9c:	f100 0214 	add.w	r2, r0, #20
 8018ba0:	6900      	ldr	r0, [r0, #16]
 8018ba2:	114b      	asrs	r3, r1, #5
 8018ba4:	4298      	cmp	r0, r3
 8018ba6:	b510      	push	{r4, lr}
 8018ba8:	db11      	blt.n	8018bce <__any_on+0x32>
 8018baa:	dd0a      	ble.n	8018bc2 <__any_on+0x26>
 8018bac:	f011 011f 	ands.w	r1, r1, #31
 8018bb0:	d007      	beq.n	8018bc2 <__any_on+0x26>
 8018bb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018bb6:	fa24 f001 	lsr.w	r0, r4, r1
 8018bba:	fa00 f101 	lsl.w	r1, r0, r1
 8018bbe:	428c      	cmp	r4, r1
 8018bc0:	d10b      	bne.n	8018bda <__any_on+0x3e>
 8018bc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018bc6:	4293      	cmp	r3, r2
 8018bc8:	d803      	bhi.n	8018bd2 <__any_on+0x36>
 8018bca:	2000      	movs	r0, #0
 8018bcc:	bd10      	pop	{r4, pc}
 8018bce:	4603      	mov	r3, r0
 8018bd0:	e7f7      	b.n	8018bc2 <__any_on+0x26>
 8018bd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018bd6:	2900      	cmp	r1, #0
 8018bd8:	d0f5      	beq.n	8018bc6 <__any_on+0x2a>
 8018bda:	2001      	movs	r0, #1
 8018bdc:	e7f6      	b.n	8018bcc <__any_on+0x30>

08018bde <_calloc_r>:
 8018bde:	b538      	push	{r3, r4, r5, lr}
 8018be0:	fb02 f401 	mul.w	r4, r2, r1
 8018be4:	4621      	mov	r1, r4
 8018be6:	f7fb fa99 	bl	801411c <_malloc_r>
 8018bea:	4605      	mov	r5, r0
 8018bec:	b118      	cbz	r0, 8018bf6 <_calloc_r+0x18>
 8018bee:	4622      	mov	r2, r4
 8018bf0:	2100      	movs	r1, #0
 8018bf2:	f7fb fa3c 	bl	801406e <memset>
 8018bf6:	4628      	mov	r0, r5
 8018bf8:	bd38      	pop	{r3, r4, r5, pc}

08018bfa <_realloc_r>:
 8018bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bfc:	4607      	mov	r7, r0
 8018bfe:	4614      	mov	r4, r2
 8018c00:	460e      	mov	r6, r1
 8018c02:	b921      	cbnz	r1, 8018c0e <_realloc_r+0x14>
 8018c04:	4611      	mov	r1, r2
 8018c06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018c0a:	f7fb ba87 	b.w	801411c <_malloc_r>
 8018c0e:	b922      	cbnz	r2, 8018c1a <_realloc_r+0x20>
 8018c10:	f7fb fa36 	bl	8014080 <_free_r>
 8018c14:	4625      	mov	r5, r4
 8018c16:	4628      	mov	r0, r5
 8018c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c1a:	f000 f9ce 	bl	8018fba <_malloc_usable_size_r>
 8018c1e:	42a0      	cmp	r0, r4
 8018c20:	d20f      	bcs.n	8018c42 <_realloc_r+0x48>
 8018c22:	4621      	mov	r1, r4
 8018c24:	4638      	mov	r0, r7
 8018c26:	f7fb fa79 	bl	801411c <_malloc_r>
 8018c2a:	4605      	mov	r5, r0
 8018c2c:	2800      	cmp	r0, #0
 8018c2e:	d0f2      	beq.n	8018c16 <_realloc_r+0x1c>
 8018c30:	4631      	mov	r1, r6
 8018c32:	4622      	mov	r2, r4
 8018c34:	f7fb fa10 	bl	8014058 <memcpy>
 8018c38:	4631      	mov	r1, r6
 8018c3a:	4638      	mov	r0, r7
 8018c3c:	f7fb fa20 	bl	8014080 <_free_r>
 8018c40:	e7e9      	b.n	8018c16 <_realloc_r+0x1c>
 8018c42:	4635      	mov	r5, r6
 8018c44:	e7e7      	b.n	8018c16 <_realloc_r+0x1c>

08018c46 <__ssputs_r>:
 8018c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c4a:	688e      	ldr	r6, [r1, #8]
 8018c4c:	429e      	cmp	r6, r3
 8018c4e:	4682      	mov	sl, r0
 8018c50:	460c      	mov	r4, r1
 8018c52:	4690      	mov	r8, r2
 8018c54:	4699      	mov	r9, r3
 8018c56:	d837      	bhi.n	8018cc8 <__ssputs_r+0x82>
 8018c58:	898a      	ldrh	r2, [r1, #12]
 8018c5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018c5e:	d031      	beq.n	8018cc4 <__ssputs_r+0x7e>
 8018c60:	6825      	ldr	r5, [r4, #0]
 8018c62:	6909      	ldr	r1, [r1, #16]
 8018c64:	1a6f      	subs	r7, r5, r1
 8018c66:	6965      	ldr	r5, [r4, #20]
 8018c68:	2302      	movs	r3, #2
 8018c6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018c6e:	fb95 f5f3 	sdiv	r5, r5, r3
 8018c72:	f109 0301 	add.w	r3, r9, #1
 8018c76:	443b      	add	r3, r7
 8018c78:	429d      	cmp	r5, r3
 8018c7a:	bf38      	it	cc
 8018c7c:	461d      	movcc	r5, r3
 8018c7e:	0553      	lsls	r3, r2, #21
 8018c80:	d530      	bpl.n	8018ce4 <__ssputs_r+0x9e>
 8018c82:	4629      	mov	r1, r5
 8018c84:	f7fb fa4a 	bl	801411c <_malloc_r>
 8018c88:	4606      	mov	r6, r0
 8018c8a:	b950      	cbnz	r0, 8018ca2 <__ssputs_r+0x5c>
 8018c8c:	230c      	movs	r3, #12
 8018c8e:	f8ca 3000 	str.w	r3, [sl]
 8018c92:	89a3      	ldrh	r3, [r4, #12]
 8018c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c98:	81a3      	strh	r3, [r4, #12]
 8018c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8018c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ca2:	463a      	mov	r2, r7
 8018ca4:	6921      	ldr	r1, [r4, #16]
 8018ca6:	f7fb f9d7 	bl	8014058 <memcpy>
 8018caa:	89a3      	ldrh	r3, [r4, #12]
 8018cac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018cb4:	81a3      	strh	r3, [r4, #12]
 8018cb6:	6126      	str	r6, [r4, #16]
 8018cb8:	6165      	str	r5, [r4, #20]
 8018cba:	443e      	add	r6, r7
 8018cbc:	1bed      	subs	r5, r5, r7
 8018cbe:	6026      	str	r6, [r4, #0]
 8018cc0:	60a5      	str	r5, [r4, #8]
 8018cc2:	464e      	mov	r6, r9
 8018cc4:	454e      	cmp	r6, r9
 8018cc6:	d900      	bls.n	8018cca <__ssputs_r+0x84>
 8018cc8:	464e      	mov	r6, r9
 8018cca:	4632      	mov	r2, r6
 8018ccc:	4641      	mov	r1, r8
 8018cce:	6820      	ldr	r0, [r4, #0]
 8018cd0:	f7ff fb6c 	bl	80183ac <memmove>
 8018cd4:	68a3      	ldr	r3, [r4, #8]
 8018cd6:	1b9b      	subs	r3, r3, r6
 8018cd8:	60a3      	str	r3, [r4, #8]
 8018cda:	6823      	ldr	r3, [r4, #0]
 8018cdc:	441e      	add	r6, r3
 8018cde:	6026      	str	r6, [r4, #0]
 8018ce0:	2000      	movs	r0, #0
 8018ce2:	e7dc      	b.n	8018c9e <__ssputs_r+0x58>
 8018ce4:	462a      	mov	r2, r5
 8018ce6:	f7ff ff88 	bl	8018bfa <_realloc_r>
 8018cea:	4606      	mov	r6, r0
 8018cec:	2800      	cmp	r0, #0
 8018cee:	d1e2      	bne.n	8018cb6 <__ssputs_r+0x70>
 8018cf0:	6921      	ldr	r1, [r4, #16]
 8018cf2:	4650      	mov	r0, sl
 8018cf4:	f7fb f9c4 	bl	8014080 <_free_r>
 8018cf8:	e7c8      	b.n	8018c8c <__ssputs_r+0x46>
	...

08018cfc <_svfiprintf_r>:
 8018cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d00:	461d      	mov	r5, r3
 8018d02:	898b      	ldrh	r3, [r1, #12]
 8018d04:	061f      	lsls	r7, r3, #24
 8018d06:	b09d      	sub	sp, #116	; 0x74
 8018d08:	4680      	mov	r8, r0
 8018d0a:	460c      	mov	r4, r1
 8018d0c:	4616      	mov	r6, r2
 8018d0e:	d50f      	bpl.n	8018d30 <_svfiprintf_r+0x34>
 8018d10:	690b      	ldr	r3, [r1, #16]
 8018d12:	b96b      	cbnz	r3, 8018d30 <_svfiprintf_r+0x34>
 8018d14:	2140      	movs	r1, #64	; 0x40
 8018d16:	f7fb fa01 	bl	801411c <_malloc_r>
 8018d1a:	6020      	str	r0, [r4, #0]
 8018d1c:	6120      	str	r0, [r4, #16]
 8018d1e:	b928      	cbnz	r0, 8018d2c <_svfiprintf_r+0x30>
 8018d20:	230c      	movs	r3, #12
 8018d22:	f8c8 3000 	str.w	r3, [r8]
 8018d26:	f04f 30ff 	mov.w	r0, #4294967295
 8018d2a:	e0c8      	b.n	8018ebe <_svfiprintf_r+0x1c2>
 8018d2c:	2340      	movs	r3, #64	; 0x40
 8018d2e:	6163      	str	r3, [r4, #20]
 8018d30:	2300      	movs	r3, #0
 8018d32:	9309      	str	r3, [sp, #36]	; 0x24
 8018d34:	2320      	movs	r3, #32
 8018d36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018d3a:	2330      	movs	r3, #48	; 0x30
 8018d3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018d40:	9503      	str	r5, [sp, #12]
 8018d42:	f04f 0b01 	mov.w	fp, #1
 8018d46:	4637      	mov	r7, r6
 8018d48:	463d      	mov	r5, r7
 8018d4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018d4e:	b10b      	cbz	r3, 8018d54 <_svfiprintf_r+0x58>
 8018d50:	2b25      	cmp	r3, #37	; 0x25
 8018d52:	d13e      	bne.n	8018dd2 <_svfiprintf_r+0xd6>
 8018d54:	ebb7 0a06 	subs.w	sl, r7, r6
 8018d58:	d00b      	beq.n	8018d72 <_svfiprintf_r+0x76>
 8018d5a:	4653      	mov	r3, sl
 8018d5c:	4632      	mov	r2, r6
 8018d5e:	4621      	mov	r1, r4
 8018d60:	4640      	mov	r0, r8
 8018d62:	f7ff ff70 	bl	8018c46 <__ssputs_r>
 8018d66:	3001      	adds	r0, #1
 8018d68:	f000 80a4 	beq.w	8018eb4 <_svfiprintf_r+0x1b8>
 8018d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d6e:	4453      	add	r3, sl
 8018d70:	9309      	str	r3, [sp, #36]	; 0x24
 8018d72:	783b      	ldrb	r3, [r7, #0]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	f000 809d 	beq.w	8018eb4 <_svfiprintf_r+0x1b8>
 8018d7a:	2300      	movs	r3, #0
 8018d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8018d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d84:	9304      	str	r3, [sp, #16]
 8018d86:	9307      	str	r3, [sp, #28]
 8018d88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018d8c:	931a      	str	r3, [sp, #104]	; 0x68
 8018d8e:	462f      	mov	r7, r5
 8018d90:	2205      	movs	r2, #5
 8018d92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018d96:	4850      	ldr	r0, [pc, #320]	; (8018ed8 <_svfiprintf_r+0x1dc>)
 8018d98:	f7ef f95a 	bl	8008050 <memchr>
 8018d9c:	9b04      	ldr	r3, [sp, #16]
 8018d9e:	b9d0      	cbnz	r0, 8018dd6 <_svfiprintf_r+0xda>
 8018da0:	06d9      	lsls	r1, r3, #27
 8018da2:	bf44      	itt	mi
 8018da4:	2220      	movmi	r2, #32
 8018da6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018daa:	071a      	lsls	r2, r3, #28
 8018dac:	bf44      	itt	mi
 8018dae:	222b      	movmi	r2, #43	; 0x2b
 8018db0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018db4:	782a      	ldrb	r2, [r5, #0]
 8018db6:	2a2a      	cmp	r2, #42	; 0x2a
 8018db8:	d015      	beq.n	8018de6 <_svfiprintf_r+0xea>
 8018dba:	9a07      	ldr	r2, [sp, #28]
 8018dbc:	462f      	mov	r7, r5
 8018dbe:	2000      	movs	r0, #0
 8018dc0:	250a      	movs	r5, #10
 8018dc2:	4639      	mov	r1, r7
 8018dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018dc8:	3b30      	subs	r3, #48	; 0x30
 8018dca:	2b09      	cmp	r3, #9
 8018dcc:	d94d      	bls.n	8018e6a <_svfiprintf_r+0x16e>
 8018dce:	b1b8      	cbz	r0, 8018e00 <_svfiprintf_r+0x104>
 8018dd0:	e00f      	b.n	8018df2 <_svfiprintf_r+0xf6>
 8018dd2:	462f      	mov	r7, r5
 8018dd4:	e7b8      	b.n	8018d48 <_svfiprintf_r+0x4c>
 8018dd6:	4a40      	ldr	r2, [pc, #256]	; (8018ed8 <_svfiprintf_r+0x1dc>)
 8018dd8:	1a80      	subs	r0, r0, r2
 8018dda:	fa0b f000 	lsl.w	r0, fp, r0
 8018dde:	4318      	orrs	r0, r3
 8018de0:	9004      	str	r0, [sp, #16]
 8018de2:	463d      	mov	r5, r7
 8018de4:	e7d3      	b.n	8018d8e <_svfiprintf_r+0x92>
 8018de6:	9a03      	ldr	r2, [sp, #12]
 8018de8:	1d11      	adds	r1, r2, #4
 8018dea:	6812      	ldr	r2, [r2, #0]
 8018dec:	9103      	str	r1, [sp, #12]
 8018dee:	2a00      	cmp	r2, #0
 8018df0:	db01      	blt.n	8018df6 <_svfiprintf_r+0xfa>
 8018df2:	9207      	str	r2, [sp, #28]
 8018df4:	e004      	b.n	8018e00 <_svfiprintf_r+0x104>
 8018df6:	4252      	negs	r2, r2
 8018df8:	f043 0302 	orr.w	r3, r3, #2
 8018dfc:	9207      	str	r2, [sp, #28]
 8018dfe:	9304      	str	r3, [sp, #16]
 8018e00:	783b      	ldrb	r3, [r7, #0]
 8018e02:	2b2e      	cmp	r3, #46	; 0x2e
 8018e04:	d10c      	bne.n	8018e20 <_svfiprintf_r+0x124>
 8018e06:	787b      	ldrb	r3, [r7, #1]
 8018e08:	2b2a      	cmp	r3, #42	; 0x2a
 8018e0a:	d133      	bne.n	8018e74 <_svfiprintf_r+0x178>
 8018e0c:	9b03      	ldr	r3, [sp, #12]
 8018e0e:	1d1a      	adds	r2, r3, #4
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	9203      	str	r2, [sp, #12]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	bfb8      	it	lt
 8018e18:	f04f 33ff 	movlt.w	r3, #4294967295
 8018e1c:	3702      	adds	r7, #2
 8018e1e:	9305      	str	r3, [sp, #20]
 8018e20:	4d2e      	ldr	r5, [pc, #184]	; (8018edc <_svfiprintf_r+0x1e0>)
 8018e22:	7839      	ldrb	r1, [r7, #0]
 8018e24:	2203      	movs	r2, #3
 8018e26:	4628      	mov	r0, r5
 8018e28:	f7ef f912 	bl	8008050 <memchr>
 8018e2c:	b138      	cbz	r0, 8018e3e <_svfiprintf_r+0x142>
 8018e2e:	2340      	movs	r3, #64	; 0x40
 8018e30:	1b40      	subs	r0, r0, r5
 8018e32:	fa03 f000 	lsl.w	r0, r3, r0
 8018e36:	9b04      	ldr	r3, [sp, #16]
 8018e38:	4303      	orrs	r3, r0
 8018e3a:	3701      	adds	r7, #1
 8018e3c:	9304      	str	r3, [sp, #16]
 8018e3e:	7839      	ldrb	r1, [r7, #0]
 8018e40:	4827      	ldr	r0, [pc, #156]	; (8018ee0 <_svfiprintf_r+0x1e4>)
 8018e42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018e46:	2206      	movs	r2, #6
 8018e48:	1c7e      	adds	r6, r7, #1
 8018e4a:	f7ef f901 	bl	8008050 <memchr>
 8018e4e:	2800      	cmp	r0, #0
 8018e50:	d038      	beq.n	8018ec4 <_svfiprintf_r+0x1c8>
 8018e52:	4b24      	ldr	r3, [pc, #144]	; (8018ee4 <_svfiprintf_r+0x1e8>)
 8018e54:	bb13      	cbnz	r3, 8018e9c <_svfiprintf_r+0x1a0>
 8018e56:	9b03      	ldr	r3, [sp, #12]
 8018e58:	3307      	adds	r3, #7
 8018e5a:	f023 0307 	bic.w	r3, r3, #7
 8018e5e:	3308      	adds	r3, #8
 8018e60:	9303      	str	r3, [sp, #12]
 8018e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e64:	444b      	add	r3, r9
 8018e66:	9309      	str	r3, [sp, #36]	; 0x24
 8018e68:	e76d      	b.n	8018d46 <_svfiprintf_r+0x4a>
 8018e6a:	fb05 3202 	mla	r2, r5, r2, r3
 8018e6e:	2001      	movs	r0, #1
 8018e70:	460f      	mov	r7, r1
 8018e72:	e7a6      	b.n	8018dc2 <_svfiprintf_r+0xc6>
 8018e74:	2300      	movs	r3, #0
 8018e76:	3701      	adds	r7, #1
 8018e78:	9305      	str	r3, [sp, #20]
 8018e7a:	4619      	mov	r1, r3
 8018e7c:	250a      	movs	r5, #10
 8018e7e:	4638      	mov	r0, r7
 8018e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e84:	3a30      	subs	r2, #48	; 0x30
 8018e86:	2a09      	cmp	r2, #9
 8018e88:	d903      	bls.n	8018e92 <_svfiprintf_r+0x196>
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d0c8      	beq.n	8018e20 <_svfiprintf_r+0x124>
 8018e8e:	9105      	str	r1, [sp, #20]
 8018e90:	e7c6      	b.n	8018e20 <_svfiprintf_r+0x124>
 8018e92:	fb05 2101 	mla	r1, r5, r1, r2
 8018e96:	2301      	movs	r3, #1
 8018e98:	4607      	mov	r7, r0
 8018e9a:	e7f0      	b.n	8018e7e <_svfiprintf_r+0x182>
 8018e9c:	ab03      	add	r3, sp, #12
 8018e9e:	9300      	str	r3, [sp, #0]
 8018ea0:	4622      	mov	r2, r4
 8018ea2:	4b11      	ldr	r3, [pc, #68]	; (8018ee8 <_svfiprintf_r+0x1ec>)
 8018ea4:	a904      	add	r1, sp, #16
 8018ea6:	4640      	mov	r0, r8
 8018ea8:	f7fb fb66 	bl	8014578 <_printf_float>
 8018eac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018eb0:	4681      	mov	r9, r0
 8018eb2:	d1d6      	bne.n	8018e62 <_svfiprintf_r+0x166>
 8018eb4:	89a3      	ldrh	r3, [r4, #12]
 8018eb6:	065b      	lsls	r3, r3, #25
 8018eb8:	f53f af35 	bmi.w	8018d26 <_svfiprintf_r+0x2a>
 8018ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018ebe:	b01d      	add	sp, #116	; 0x74
 8018ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ec4:	ab03      	add	r3, sp, #12
 8018ec6:	9300      	str	r3, [sp, #0]
 8018ec8:	4622      	mov	r2, r4
 8018eca:	4b07      	ldr	r3, [pc, #28]	; (8018ee8 <_svfiprintf_r+0x1ec>)
 8018ecc:	a904      	add	r1, sp, #16
 8018ece:	4640      	mov	r0, r8
 8018ed0:	f7fb fe08 	bl	8014ae4 <_printf_i>
 8018ed4:	e7ea      	b.n	8018eac <_svfiprintf_r+0x1b0>
 8018ed6:	bf00      	nop
 8018ed8:	08019488 	.word	0x08019488
 8018edc:	0801948e 	.word	0x0801948e
 8018ee0:	08019492 	.word	0x08019492
 8018ee4:	08014579 	.word	0x08014579
 8018ee8:	08018c47 	.word	0x08018c47

08018eec <_putc_r>:
 8018eec:	b570      	push	{r4, r5, r6, lr}
 8018eee:	460d      	mov	r5, r1
 8018ef0:	4614      	mov	r4, r2
 8018ef2:	4606      	mov	r6, r0
 8018ef4:	b118      	cbz	r0, 8018efe <_putc_r+0x12>
 8018ef6:	6983      	ldr	r3, [r0, #24]
 8018ef8:	b90b      	cbnz	r3, 8018efe <_putc_r+0x12>
 8018efa:	f7fa ff7f 	bl	8013dfc <__sinit>
 8018efe:	4b13      	ldr	r3, [pc, #76]	; (8018f4c <_putc_r+0x60>)
 8018f00:	429c      	cmp	r4, r3
 8018f02:	d112      	bne.n	8018f2a <_putc_r+0x3e>
 8018f04:	6874      	ldr	r4, [r6, #4]
 8018f06:	68a3      	ldr	r3, [r4, #8]
 8018f08:	3b01      	subs	r3, #1
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	60a3      	str	r3, [r4, #8]
 8018f0e:	da16      	bge.n	8018f3e <_putc_r+0x52>
 8018f10:	69a2      	ldr	r2, [r4, #24]
 8018f12:	4293      	cmp	r3, r2
 8018f14:	db02      	blt.n	8018f1c <_putc_r+0x30>
 8018f16:	b2eb      	uxtb	r3, r5
 8018f18:	2b0a      	cmp	r3, #10
 8018f1a:	d110      	bne.n	8018f3e <_putc_r+0x52>
 8018f1c:	4622      	mov	r2, r4
 8018f1e:	4629      	mov	r1, r5
 8018f20:	4630      	mov	r0, r6
 8018f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f26:	f7fd bf85 	b.w	8016e34 <__swbuf_r>
 8018f2a:	4b09      	ldr	r3, [pc, #36]	; (8018f50 <_putc_r+0x64>)
 8018f2c:	429c      	cmp	r4, r3
 8018f2e:	d101      	bne.n	8018f34 <_putc_r+0x48>
 8018f30:	68b4      	ldr	r4, [r6, #8]
 8018f32:	e7e8      	b.n	8018f06 <_putc_r+0x1a>
 8018f34:	4b07      	ldr	r3, [pc, #28]	; (8018f54 <_putc_r+0x68>)
 8018f36:	429c      	cmp	r4, r3
 8018f38:	bf08      	it	eq
 8018f3a:	68f4      	ldreq	r4, [r6, #12]
 8018f3c:	e7e3      	b.n	8018f06 <_putc_r+0x1a>
 8018f3e:	6823      	ldr	r3, [r4, #0]
 8018f40:	1c5a      	adds	r2, r3, #1
 8018f42:	6022      	str	r2, [r4, #0]
 8018f44:	701d      	strb	r5, [r3, #0]
 8018f46:	b2e8      	uxtb	r0, r5
 8018f48:	bd70      	pop	{r4, r5, r6, pc}
 8018f4a:	bf00      	nop
 8018f4c:	08019444 	.word	0x08019444
 8018f50:	08019464 	.word	0x08019464
 8018f54:	08019424 	.word	0x08019424

08018f58 <_read_r>:
 8018f58:	b538      	push	{r3, r4, r5, lr}
 8018f5a:	4c07      	ldr	r4, [pc, #28]	; (8018f78 <_read_r+0x20>)
 8018f5c:	4605      	mov	r5, r0
 8018f5e:	4608      	mov	r0, r1
 8018f60:	4611      	mov	r1, r2
 8018f62:	2200      	movs	r2, #0
 8018f64:	6022      	str	r2, [r4, #0]
 8018f66:	461a      	mov	r2, r3
 8018f68:	f7f4 fb0a 	bl	800d580 <_read>
 8018f6c:	1c43      	adds	r3, r0, #1
 8018f6e:	d102      	bne.n	8018f76 <_read_r+0x1e>
 8018f70:	6823      	ldr	r3, [r4, #0]
 8018f72:	b103      	cbz	r3, 8018f76 <_read_r+0x1e>
 8018f74:	602b      	str	r3, [r5, #0]
 8018f76:	bd38      	pop	{r3, r4, r5, pc}
 8018f78:	20008f20 	.word	0x20008f20

08018f7c <strncmp>:
 8018f7c:	b510      	push	{r4, lr}
 8018f7e:	b16a      	cbz	r2, 8018f9c <strncmp+0x20>
 8018f80:	3901      	subs	r1, #1
 8018f82:	1884      	adds	r4, r0, r2
 8018f84:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018f88:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018f8c:	4293      	cmp	r3, r2
 8018f8e:	d103      	bne.n	8018f98 <strncmp+0x1c>
 8018f90:	42a0      	cmp	r0, r4
 8018f92:	d001      	beq.n	8018f98 <strncmp+0x1c>
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d1f5      	bne.n	8018f84 <strncmp+0x8>
 8018f98:	1a98      	subs	r0, r3, r2
 8018f9a:	bd10      	pop	{r4, pc}
 8018f9c:	4610      	mov	r0, r2
 8018f9e:	e7fc      	b.n	8018f9a <strncmp+0x1e>

08018fa0 <__ascii_wctomb>:
 8018fa0:	b149      	cbz	r1, 8018fb6 <__ascii_wctomb+0x16>
 8018fa2:	2aff      	cmp	r2, #255	; 0xff
 8018fa4:	bf85      	ittet	hi
 8018fa6:	238a      	movhi	r3, #138	; 0x8a
 8018fa8:	6003      	strhi	r3, [r0, #0]
 8018faa:	700a      	strbls	r2, [r1, #0]
 8018fac:	f04f 30ff 	movhi.w	r0, #4294967295
 8018fb0:	bf98      	it	ls
 8018fb2:	2001      	movls	r0, #1
 8018fb4:	4770      	bx	lr
 8018fb6:	4608      	mov	r0, r1
 8018fb8:	4770      	bx	lr

08018fba <_malloc_usable_size_r>:
 8018fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018fbe:	1f18      	subs	r0, r3, #4
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	bfbc      	itt	lt
 8018fc4:	580b      	ldrlt	r3, [r1, r0]
 8018fc6:	18c0      	addlt	r0, r0, r3
 8018fc8:	4770      	bx	lr
	...

08018fcc <_init>:
 8018fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fce:	bf00      	nop
 8018fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018fd2:	bc08      	pop	{r3}
 8018fd4:	469e      	mov	lr, r3
 8018fd6:	4770      	bx	lr

08018fd8 <_fini>:
 8018fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fda:	bf00      	nop
 8018fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018fde:	bc08      	pop	{r3}
 8018fe0:	469e      	mov	lr, r3
 8018fe2:	4770      	bx	lr
