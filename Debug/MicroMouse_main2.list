
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000e260  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000708  08016260  08016260  00026260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08016968  08016968  000301e8  2**0
                  CONTENTS
  6 .ARM          00000008  08016968  08016968  00026968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08016970  08016970  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08016970  08016970  00026970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08016974  08016974  00026974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001e8  20000000  08016978  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006bd4  200001e8  08016b60  000301e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20006dbc  08016b60  00036dbc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002f0d9  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000066c8  00000000  00000000  0005f2f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00011223  00000000  00000000  000659b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00001448  00000000  00000000  00076be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000028c8  00000000  00000000  00078028  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0002734d  00000000  00000000  0007a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00018e15  00000000  00000000  000a1c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000cab59  00000000  00000000  000baa52  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  001855ab  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00005754  00000000  00000000  00185628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001e8 	.word	0x200001e8
 800801c:	00000000 	.word	0x00000000
 8008020:	08016248 	.word	0x08016248

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001ec 	.word	0x200001ec
 800803c:	08016248 	.word	0x08016248

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <GetWallCtrlDirection>:

int GetWallCtrlDirection(profile *mouse)
{
		//新ライブラリ用に変更

		switch(mouse->now.car%8)
 8008df8:	7a83      	ldrb	r3, [r0, #10]
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	2b06      	cmp	r3, #6
 8008e00:	d855      	bhi.n	8008eae <GetWallCtrlDirection+0xb6>
 8008e02:	e8df f003 	tbb	[pc, r3]
 8008e06:	5440      	.short	0x5440
 8008e08:	5418542c 	.word	0x5418542c
 8008e0c:	04          	.byte	0x04
 8008e0d:	00          	.byte	0x00
			{
				return N_WALL_PID;
			}
			break;
		case west:
			if(mouse->now.wall.west == wall)
 8008e0e:	7b03      	ldrb	r3, [r0, #12]
 8008e10:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8008e14:	2a40      	cmp	r2, #64	; 0x40
 8008e16:	d04c      	beq.n	8008eb2 <GetWallCtrlDirection+0xba>
			{
				return F_WALL_PID;
			}
			else if ( mouse->now.wall.north == wall && mouse->now.wall.south == wall)//.westになってた。あと == south )で意味わからない処理に。
 8008e18:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8008e1c:	2a11      	cmp	r2, #17
 8008e1e:	d04a      	beq.n	8008eb6 <GetWallCtrlDirection+0xbe>
			{
				return D_WALL_PID;
			}
			else if ( mouse->now.wall.north == wall )
 8008e20:	f003 0203 	and.w	r2, r3, #3
 8008e24:	2a01      	cmp	r2, #1
 8008e26:	d048      	beq.n	8008eba <GetWallCtrlDirection+0xc2>
			{
				return R_WALL_PID;
			}
			else if ( mouse->now.wall.south == wall )
 8008e28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e2c:	2b10      	cmp	r3, #16
				return L_WALL_PID;
 8008e2e:	bf14      	ite	ne
 8008e30:	2006      	movne	r0, #6
 8008e32:	2002      	moveq	r0, #2
 8008e34:	4770      	bx	lr
			if(mouse->now.wall.south == wall)
 8008e36:	7b03      	ldrb	r3, [r0, #12]
 8008e38:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8008e3c:	2a10      	cmp	r2, #16
 8008e3e:	d038      	beq.n	8008eb2 <GetWallCtrlDirection+0xba>
			else if(mouse->now.wall.east == wall && mouse->now.wall.west == wall)
 8008e40:	f003 02cc 	and.w	r2, r3, #204	; 0xcc
 8008e44:	2a44      	cmp	r2, #68	; 0x44
 8008e46:	d036      	beq.n	8008eb6 <GetWallCtrlDirection+0xbe>
			else if(mouse->now.wall.east == wall)
 8008e48:	f003 020c 	and.w	r2, r3, #12
 8008e4c:	2a04      	cmp	r2, #4
 8008e4e:	d036      	beq.n	8008ebe <GetWallCtrlDirection+0xc6>
			else if(mouse->now.wall.west == wall)
 8008e50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e54:	2b40      	cmp	r3, #64	; 0x40
				return R_WALL_PID;
 8008e56:	bf14      	ite	ne
 8008e58:	2006      	movne	r0, #6
 8008e5a:	2003      	moveq	r0, #3
 8008e5c:	4770      	bx	lr
			if(mouse->now.wall.east == wall)
 8008e5e:	7b03      	ldrb	r3, [r0, #12]
 8008e60:	f003 020c 	and.w	r2, r3, #12
 8008e64:	2a04      	cmp	r2, #4
 8008e66:	d024      	beq.n	8008eb2 <GetWallCtrlDirection+0xba>
			else if(mouse->now.wall.north == wall && mouse->now.wall.south == wall)//south)
 8008e68:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8008e6c:	2a11      	cmp	r2, #17
 8008e6e:	d022      	beq.n	8008eb6 <GetWallCtrlDirection+0xbe>
			else if(mouse->now.wall.north == wall)
 8008e70:	f003 0203 	and.w	r2, r3, #3
 8008e74:	2a01      	cmp	r2, #1
 8008e76:	d022      	beq.n	8008ebe <GetWallCtrlDirection+0xc6>
			else if(mouse->now.wall.south == wall)
 8008e78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e7c:	2b10      	cmp	r3, #16
				return R_WALL_PID;
 8008e7e:	bf14      	ite	ne
 8008e80:	2006      	movne	r0, #6
 8008e82:	2003      	moveq	r0, #3
 8008e84:	4770      	bx	lr
			if(mouse->now.wall.north == wall) //現在の方角と、座標から、壁の存在を確認する処理
 8008e86:	7b03      	ldrb	r3, [r0, #12]
 8008e88:	f003 0203 	and.w	r2, r3, #3
 8008e8c:	2a01      	cmp	r2, #1
 8008e8e:	d010      	beq.n	8008eb2 <GetWallCtrlDirection+0xba>
			else if(mouse->now.wall.east == wall && mouse->now.wall.west == wall)
 8008e90:	f003 02cc 	and.w	r2, r3, #204	; 0xcc
 8008e94:	2a44      	cmp	r2, #68	; 0x44
 8008e96:	d00e      	beq.n	8008eb6 <GetWallCtrlDirection+0xbe>
			else if(mouse->now.wall.east == wall)
 8008e98:	f003 020c 	and.w	r2, r3, #12
 8008e9c:	2a04      	cmp	r2, #4
 8008e9e:	d00c      	beq.n	8008eba <GetWallCtrlDirection+0xc2>
			else if(mouse->now.wall.west == wall)
 8008ea0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008ea4:	2b40      	cmp	r3, #64	; 0x40
				return L_WALL_PID;
 8008ea6:	bf14      	ite	ne
 8008ea8:	2006      	movne	r0, #6
 8008eaa:	2002      	moveq	r0, #2
 8008eac:	4770      	bx	lr
			}
			break;

		default:
			//斜め方向
			return N_WALL_PID;
 8008eae:	2006      	movs	r0, #6
 8008eb0:	4770      	bx	lr
				return F_WALL_PID;
 8008eb2:	2008      	movs	r0, #8
 8008eb4:	4770      	bx	lr
				return D_WALL_PID;
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	4770      	bx	lr
				return R_WALL_PID;
 8008eba:	2003      	movs	r0, #3
			break;
		}

}
 8008ebc:	4770      	bx	lr
				return L_WALL_PID;
 8008ebe:	2002      	movs	r0, #2
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop

08008ec4 <WaitStopAndReset>:

void WaitStopAndReset()
{
 8008ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ec8:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8008f1c <WaitStopAndReset+0x58>
 8008ecc:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8008f20 <WaitStopAndReset+0x5c>
 8008ed0:	4f0f      	ldr	r7, [pc, #60]	; (8008f10 <WaitStopAndReset+0x4c>)
 8008ed2:	4e10      	ldr	r6, [pc, #64]	; (8008f14 <WaitStopAndReset+0x50>)
 8008ed4:	4d10      	ldr	r5, [pc, #64]	; (8008f18 <WaitStopAndReset+0x54>)
	do
	{
		TargetVelocity[BODY] = 0;
 8008ed6:	2400      	movs	r4, #0
		Acceleration = 0;
		TargetAngularV = 0;
		AngularAcceleration = 0;
		PIDReset(L_VELO_PID);
 8008ed8:	2004      	movs	r0, #4
		TargetVelocity[BODY] = 0;
 8008eda:	f8c9 4008 	str.w	r4, [r9, #8]
		Acceleration = 0;
 8008ede:	f8c8 4000 	str.w	r4, [r8]
		TargetAngularV = 0;
 8008ee2:	603c      	str	r4, [r7, #0]
		AngularAcceleration = 0;
 8008ee4:	6034      	str	r4, [r6, #0]
		PIDReset(L_VELO_PID);
 8008ee6:	f005 fec1 	bl	800ec6c <PIDReset>
		PIDReset(R_VELO_PID);
 8008eea:	2005      	movs	r0, #5
 8008eec:	f005 febe 	bl	800ec6c <PIDReset>
		PIDReset(A_VELO_PID);
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	f005 febb 	bl	800ec6c <PIDReset>

	}while(CurrentVelocity[BODY] != 0);
 8008ef6:	edd5 7a02 	vldr	s15, [r5, #8]
 8008efa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f02:	d1e9      	bne.n	8008ed8 <WaitStopAndReset+0x14>
	HAL_Delay(100);
 8008f04:	2064      	movs	r0, #100	; 0x64
}
 8008f06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(100);
 8008f0a:	f006 b85d 	b.w	800efc8 <HAL_Delay>
 8008f0e:	bf00      	nop
 8008f10:	20005640 	.word	0x20005640
 8008f14:	2000509c 	.word	0x2000509c
 8008f18:	2000566c 	.word	0x2000566c
 8008f1c:	20005630 	.word	0x20005630
 8008f20:	20005094 	.word	0x20005094
 8008f24:	00000000 	.word	0x00000000

08008f28 <Rotate>:
void Rotate(float deg, float ang_v)
{
	TargetAngularV = 0;
	Pid[A_VELO_PID].flag = 0;

	float accel_deg = deg*30/90;
 8008f28:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8008f2c:	ee60 6a26 	vmul.f32	s13, s0, s13
 8008f30:	ed9f 6a9b 	vldr	s12, [pc, #620]	; 80091a0 <Rotate+0x278>
	float const_deg = deg*30/90;
	float decel_deg = deg*30/90;
	float angular_acceleration[3] = {
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f34:	eddf 7a9b 	vldr	s15, [pc, #620]	; 80091a4 <Rotate+0x27c>
	TargetAngularV = 0;
 8008f38:	4a9b      	ldr	r2, [pc, #620]	; (80091a8 <Rotate+0x280>)
	Pid[A_VELO_PID].flag = 0;
 8008f3a:	4b9c      	ldr	r3, [pc, #624]	; (80091ac <Rotate+0x284>)
	float accel_deg = deg*30/90;
 8008f3c:	ee86 7a86 	vdiv.f32	s14, s13, s12
{
 8008f40:	b510      	push	{r4, lr}
	TargetAngularV = 0;
 8008f42:	2400      	movs	r4, #0
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f44:	ee60 7aa7 	vmul.f32	s15, s1, s15
{
 8008f48:	ed2d 8b04 	vpush	{d8-d9}
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f4c:	ee77 6a07 	vadd.f32	s13, s14, s14
 8008f50:	ee67 7aa0 	vmul.f32	s15, s15, s1
	TargetAngularV = 0;
 8008f54:	6014      	str	r4, [r2, #0]
	Pid[A_VELO_PID].flag = 0;
 8008f56:	2200      	movs	r2, #0
			0,
			64*T1*ang_v*ang_v / (2*decel_deg)
	};
	float move_angle[3] = {
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f58:	ee17 0a10 	vmov	r0, s14
	Pid[A_VELO_PID].flag = 0;
 8008f5c:	629a      	str	r2, [r3, #40]	; 0x28
{
 8008f5e:	eef0 8a60 	vmov.f32	s17, s1
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f62:	ee87 8aa6 	vdiv.f32	s16, s15, s13
{
 8008f66:	eeb0 9a40 	vmov.f32	s18, s0
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f6a:	f7ff fa25 	bl	80083b8 <__aeabi_f2d>
 8008f6e:	a388      	add	r3, pc, #544	; (adr r3, 8009190 <Rotate+0x268>)
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f7ff fa78 	bl	8008468 <__aeabi_dmul>
 8008f78:	2200      	movs	r2, #0
 8008f7a:	4b8d      	ldr	r3, [pc, #564]	; (80091b0 <Rotate+0x288>)
 8008f7c:	f7ff fb9e 	bl	80086bc <__aeabi_ddiv>
 8008f80:	f7ff fd6a 	bl	8008a58 <__aeabi_d2f>
			const_deg * M_PI/ 180,
			decel_deg * M_PI/ 180,
	};

	if( ang_v > 0)	//右回転
 8008f84:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f8c:	ee06 0a90 	vmov	s13, r0
	if( ang_v > 0)	//右回転
 8008f90:	f340 80f2 	ble.w	8009178 <Rotate+0x250>
	{
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f94:	4b87      	ldr	r3, [pc, #540]	; (80091b4 <Rotate+0x28c>)

		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f96:	4a88      	ldr	r2, [pc, #544]	; (80091b8 <Rotate+0x290>)
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f98:	edd3 7a00 	vldr	s15, [r3]
 8008f9c:	4987      	ldr	r1, [pc, #540]	; (80091bc <Rotate+0x294>)
 8008f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fa2:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008fa6:	ed93 7a00 	vldr	s14, [r3]
 8008faa:	edd2 7a00 	vldr	s15, [r2]
 8008fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb6:	dd0a      	ble.n	8008fce <Rotate+0xa6>
		{
			//最短走行の時だけ、Angleが大きくならない、もしくは目標角度がかなり大きい。初期化？最初の旋回なので、0radから90度ぶん目標角度がズレている必要がある。Angleが積算できていないかも。
			AngularAcceleration = angular_acceleration[0]; //ここまで
 8008fb8:	ed81 8a00 	vstr	s16, [r1]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008fbc:	ed93 7a00 	vldr	s14, [r3]
 8008fc0:	edd2 7a00 	vldr	s15, [r2]
 8008fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fcc:	dcf4      	bgt.n	8008fb8 <Rotate+0x90>
		}
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008fce:	edd3 7a00 	vldr	s15, [r3]
 8008fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fd6:	edc3 7a00 	vstr	s15, [r3]
		while(TargetAngle > Angle)
 8008fda:	ed93 7a00 	vldr	s14, [r3]
 8008fde:	edd2 7a00 	vldr	s15, [r2]
 8008fe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fea:	dd0a      	ble.n	8009002 <Rotate+0xda>
		{
			AngularAcceleration = angular_acceleration[1];//0
 8008fec:	2000      	movs	r0, #0
 8008fee:	6008      	str	r0, [r1, #0]
		while(TargetAngle > Angle)
 8008ff0:	ed93 7a00 	vldr	s14, [r3]
 8008ff4:	edd2 7a00 	vldr	s15, [r2]
 8008ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009000:	dcf5      	bgt.n	8008fee <Rotate+0xc6>
		}
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009002:	edd3 7a00 	vldr	s15, [r3]

		while(TargetAngle > Angle)
		{
			 AngularAcceleration = -angular_acceleration[2];
			 if( AngularV <= 0)
 8009006:	486e      	ldr	r0, [pc, #440]	; (80091c0 <Rotate+0x298>)
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009008:	ee76 6aa7 	vadd.f32	s13, s13, s15
			 AngularAcceleration = -angular_acceleration[2];
 800900c:	eeb1 8a48 	vneg.f32	s16, s16
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009010:	edc3 6a00 	vstr	s13, [r3]
		while(TargetAngle > Angle)
 8009014:	e008      	b.n	8009028 <Rotate+0x100>
			 AngularAcceleration = -angular_acceleration[2];
 8009016:	ed81 8a00 	vstr	s16, [r1]
			 if( AngularV <= 0)
 800901a:	edd0 7a00 	vldr	s15, [r0]
 800901e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009026:	d908      	bls.n	800903a <Rotate+0x112>
		while(TargetAngle > Angle)
 8009028:	ed93 7a00 	vldr	s14, [r3]
 800902c:	edd2 7a00 	vldr	s15, [r2]
 8009030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009038:	dced      	bgt.n	8009016 <Rotate+0xee>
			 		break;
			 }
		}

	}
	AngularAcceleration = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	600b      	str	r3, [r1, #0]
	WaitStopAndReset();
 800903e:	f7ff ff41 	bl	8008ec4 <WaitStopAndReset>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009042:	eddf 7a60 	vldr	s15, [pc, #384]	; 80091c4 <Rotate+0x29c>
 8009046:	eec9 7a27 	vdiv.f32	s15, s18, s15
 800904a:	ee17 0a90 	vmov	r0, s15
 800904e:	f7ff f9b3 	bl	80083b8 <__aeabi_f2d>
 8009052:	a351      	add	r3, pc, #324	; (adr r3, 8009198 <Rotate+0x270>)
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	f7ff fa06 	bl	8008468 <__aeabi_dmul>
 800905c:	f7ff fcb4 	bl	80089c8 <__aeabi_d2iz>
	if(ang_v < 0)
 8009060:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009068:	4602      	mov	r2, r0
	if(ang_v < 0)
 800906a:	d475      	bmi.n	8009158 <Rotate+0x230>
		KeepPulse[LEFT] -= target_pulse/2;
		KeepPulse[RIGHT] += target_pulse/2;
	}
	else 	if(ang_v > 0)
	{
		KeepPulse[LEFT] += target_pulse/2;
 800906c:	4b56      	ldr	r3, [pc, #344]	; (80091c8 <Rotate+0x2a0>)
 800906e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	1040      	asrs	r0, r0, #1
 8009076:	4402      	add	r2, r0
 8009078:	601a      	str	r2, [r3, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 800907a:	685a      	ldr	r2, [r3, #4]
	}
	KeepPulse[BODY] = KeepPulse[BODY];

}
 800907c:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] -= target_pulse/2;
 8009080:	1a10      	subs	r0, r2, r0
 8009082:	6058      	str	r0, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 8009084:	689a      	ldr	r2, [r3, #8]
 8009086:	609a      	str	r2, [r3, #8]
}
 8009088:	bd10      	pop	{r4, pc}
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800908a:	4b4a      	ldr	r3, [pc, #296]	; (80091b4 <Rotate+0x28c>)
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800908c:	4a4a      	ldr	r2, [pc, #296]	; (80091b8 <Rotate+0x290>)
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800908e:	edd3 7a00 	vldr	s15, [r3]
 8009092:	494a      	ldr	r1, [pc, #296]	; (80091bc <Rotate+0x294>)
 8009094:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009098:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800909c:	ed93 7a00 	vldr	s14, [r3]
 80090a0:	edd2 7a00 	vldr	s15, [r2]
 80090a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ac:	d50c      	bpl.n	80090c8 <Rotate+0x1a0>
 80090ae:	eeb1 6a48 	vneg.f32	s12, s16
			AngularAcceleration = -angular_acceleration[0]; //ここまで
 80090b2:	ed81 6a00 	vstr	s12, [r1]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 80090b6:	ed93 7a00 	vldr	s14, [r3]
 80090ba:	edd2 7a00 	vldr	s15, [r2]
 80090be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c6:	d4f4      	bmi.n	80090b2 <Rotate+0x18a>
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090c8:	edd3 7a00 	vldr	s15, [r3]
 80090cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80090d0:	edc3 7a00 	vstr	s15, [r3]
		while(TargetAngle < Angle)
 80090d4:	ed93 7a00 	vldr	s14, [r3]
 80090d8:	edd2 7a00 	vldr	s15, [r2]
 80090dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e4:	d50a      	bpl.n	80090fc <Rotate+0x1d4>
			AngularAcceleration = angular_acceleration[1];//0
 80090e6:	2000      	movs	r0, #0
 80090e8:	6008      	str	r0, [r1, #0]
		while(TargetAngle < Angle)
 80090ea:	ed93 7a00 	vldr	s14, [r3]
 80090ee:	edd2 7a00 	vldr	s15, [r2]
 80090f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fa:	d4f5      	bmi.n	80090e8 <Rotate+0x1c0>
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090fc:	edd3 7a00 	vldr	s15, [r3]
			 if( AngularV >= 0)
 8009100:	482f      	ldr	r0, [pc, #188]	; (80091c0 <Rotate+0x298>)
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009102:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8009106:	edc3 6a00 	vstr	s13, [r3]
		while(TargetAngle < Angle)
 800910a:	e008      	b.n	800911e <Rotate+0x1f6>
			 AngularAcceleration = angular_acceleration[2];
 800910c:	ed81 8a00 	vstr	s16, [r1]
			 if( AngularV >= 0)
 8009110:	edd0 7a00 	vldr	s15, [r0]
 8009114:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800911c:	da08      	bge.n	8009130 <Rotate+0x208>
		while(TargetAngle < Angle)
 800911e:	ed93 7a00 	vldr	s14, [r3]
 8009122:	edd2 7a00 	vldr	s15, [r2]
 8009126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800912a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800912e:	d4ed      	bmi.n	800910c <Rotate+0x1e4>
	AngularAcceleration = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	600b      	str	r3, [r1, #0]
	WaitStopAndReset();
 8009134:	f7ff fec6 	bl	8008ec4 <WaitStopAndReset>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009138:	eddf 7a22 	vldr	s15, [pc, #136]	; 80091c4 <Rotate+0x29c>
 800913c:	eec9 7a27 	vdiv.f32	s15, s18, s15
 8009140:	ee17 0a90 	vmov	r0, s15
 8009144:	f7ff f938 	bl	80083b8 <__aeabi_f2d>
 8009148:	a313      	add	r3, pc, #76	; (adr r3, 8009198 <Rotate+0x270>)
 800914a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914e:	f7ff f98b 	bl	8008468 <__aeabi_dmul>
 8009152:	f7ff fc39 	bl	80089c8 <__aeabi_d2iz>
 8009156:	4602      	mov	r2, r0
		KeepPulse[LEFT] -= target_pulse/2;
 8009158:	4b1b      	ldr	r3, [pc, #108]	; (80091c8 <Rotate+0x2a0>)
 800915a:	6819      	ldr	r1, [r3, #0]
 800915c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8009160:	eba1 0162 	sub.w	r1, r1, r2, asr #1
 8009164:	6019      	str	r1, [r3, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 8009166:	6858      	ldr	r0, [r3, #4]
}
 8009168:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] += target_pulse/2;
 800916c:	eb00 0262 	add.w	r2, r0, r2, asr #1
 8009170:	605a      	str	r2, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	609a      	str	r2, [r3, #8]
}
 8009176:	bd10      	pop	{r4, pc}
	else if( ang_v < 0)
 8009178:	d487      	bmi.n	800908a <Rotate+0x162>
	AngularAcceleration = 0;
 800917a:	4b10      	ldr	r3, [pc, #64]	; (80091bc <Rotate+0x294>)
 800917c:	601c      	str	r4, [r3, #0]
	WaitStopAndReset();
 800917e:	f7ff fea1 	bl	8008ec4 <WaitStopAndReset>
}
 8009182:	ecbd 8b04 	vpop	{d8-d9}
 8009186:	4b10      	ldr	r3, [pc, #64]	; (80091c8 <Rotate+0x2a0>)
	KeepPulse[BODY] = KeepPulse[BODY];
 8009188:	689a      	ldr	r2, [r3, #8]
 800918a:	609a      	str	r2, [r3, #8]
}
 800918c:	bd10      	pop	{r4, pc}
 800918e:	bf00      	nop
 8009190:	54442d18 	.word	0x54442d18
 8009194:	400921fb 	.word	0x400921fb
 8009198:	cb326649 	.word	0xcb326649
 800919c:	40fa15d6 	.word	0x40fa15d6
 80091a0:	42b40000 	.word	0x42b40000
 80091a4:	3d83126f 	.word	0x3d83126f
 80091a8:	20005640 	.word	0x20005640
 80091ac:	20005428 	.word	0x20005428
 80091b0:	40668000 	.word	0x40668000
 80091b4:	200050a8 	.word	0x200050a8
 80091b8:	20005098 	.word	0x20005098
 80091bc:	2000509c 	.word	0x2000509c
 80091c0:	200050a4 	.word	0x200050a4
 80091c4:	43b40000 	.word	0x43b40000
 80091c8:	20005694 	.word	0x20005694
 80091cc:	00000000 	.word	0x00000000

080091d0 <SlalomRight>:
	}

}

void SlalomRight(maze_node *maze, profile *mouse)	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80091d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	4689      	mov	r9, r1
	switch(mouse->now.car%8)//方角に合わせて、
 80091d6:	7a89      	ldrb	r1, [r1, #10]
//	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
	//このあたりのパラメータをどう調整、設計するかが鍵
//	float now_angv = AngularV;
	int now_pulse;

	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091d8:	4c9f      	ldr	r4, [pc, #636]	; (8009458 <SlalomRight+0x288>)
	Pid[A_VELO_PID].flag = 1;
 80091da:	4ea0      	ldr	r6, [pc, #640]	; (800945c <SlalomRight+0x28c>)
 80091dc:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 800948c <SlalomRight+0x2bc>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	f8da 2000 	ldr.w	r2, [sl]
 80091e6:	6865      	ldr	r5, [r4, #4]
	Pid[A_VELO_PID].flag = 1;
 80091e8:	2701      	movs	r7, #1
	switch(mouse->now.car%8)//方角に合わせて、
 80091ea:	f001 0107 	and.w	r1, r1, #7
{
 80091ee:	ed2d 8b02 	vpush	{d8}
 80091f2:	4683      	mov	fp, r0
	Pid[A_VELO_PID].flag = 1;
 80091f4:	62b7      	str	r7, [r6, #40]	; 0x28
	switch(mouse->now.car%8)//方角に合わせて、
 80091f6:	2906      	cmp	r1, #6
 80091f8:	d808      	bhi.n	800920c <SlalomRight+0x3c>
 80091fa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80091fe:	010d      	.short	0x010d
 8009200:	01080007 	.word	0x01080007
 8009204:	01030007 	.word	0x01030007
 8009208:	00380007 	.word	0x00380007
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 800920c:	442b      	add	r3, r5
		}

	}
	else//なければ
	{
		while( now_pulse + Sla.Pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800920e:	6821      	ldr	r1, [r4, #0]
 8009210:	f8df 827c 	ldr.w	r8, [pc, #636]	; 8009490 <SlalomRight+0x2c0>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009214:	ee07 3a10 	vmov	s14, r3
		while( now_pulse + Sla.Pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009218:	6863      	ldr	r3, [r4, #4]
 800921a:	edd8 6a00 	vldr	s13, [r8]
 800921e:	4419      	add	r1, r3
 8009220:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009224:	ee07 1a90 	vmov	s15, r1
 8009228:	ee37 7a26 	vadd.f32	s14, s14, s13
 800922c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009238:	f340 80ff 	ble.w	800943a <SlalomRight+0x26a>
 800923c:	4d88      	ldr	r5, [pc, #544]	; (8009460 <SlalomRight+0x290>)
 800923e:	4889      	ldr	r0, [pc, #548]	; (8009464 <SlalomRight+0x294>)
 8009240:	4989      	ldr	r1, [pc, #548]	; (8009468 <SlalomRight+0x298>)
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 8009242:	2700      	movs	r7, #0
 8009244:	602f      	str	r7, [r5, #0]
				AngularLeapsity = 0;
				AngularAcceleration = 0;
 8009246:	6007      	str	r7, [r0, #0]
				TargetVelocity[BODY] = ExploreVelocity;
 8009248:	608a      	str	r2, [r1, #8]
		while( now_pulse + Sla.Pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8009250:	4463      	add	r3, ip
 8009252:	ee07 3a90 	vmov	s15, r3
 8009256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800925a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800925e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009262:	d4ef      	bmi.n	8009244 <SlalomRight+0x74>
 8009264:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8009494 <SlalomRight+0x2c4>
 8009268:	f8cc 7000 	str.w	r7, [ip]
 800926c:	e02d      	b.n	80092ca <SlalomRight+0xfa>
	return mouse->now.wall.west;
 800926e:	f899 100c 	ldrb.w	r1, [r9, #12]
 8009272:	0989      	lsrs	r1, r1, #6
	if (getFrontWall(mouse) == WALL /*前に壁があれば、*/) //Uターン後にスラロームするときは、壁の情報が間違っている.壁の情報を毎回正しくする
 8009274:	2901      	cmp	r1, #1
 8009276:	d1c9      	bne.n	800920c <SlalomRight+0x3c>
 8009278:	f8df c218 	ldr.w	ip, [pc, #536]	; 8009494 <SlalomRight+0x2c4>
 800927c:	4d78      	ldr	r5, [pc, #480]	; (8009460 <SlalomRight+0x290>)
 800927e:	f8dc e000 	ldr.w	lr, [ip]
 8009282:	4878      	ldr	r0, [pc, #480]	; (8009464 <SlalomRight+0x294>)
 8009284:	4979      	ldr	r1, [pc, #484]	; (800946c <SlalomRight+0x29c>)
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009286:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8009470 <SlalomRight+0x2a0>
 800928a:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8009474 <SlalomRight+0x2a4>
			TargetVelocity[BODY] = ExploreVelocity;
 800928e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8009468 <SlalomRight+0x298>
			TargetAngularV = 0;
 8009292:	2300      	movs	r3, #0
	if (getFrontWall(mouse) == WALL /*前に壁があれば、*/) //Uターン後にスラロームするときは、壁の情報が間違っている.壁の情報を毎回正しくする
 8009294:	2700      	movs	r7, #0
 8009296:	e005      	b.n	80092a4 <SlalomRight+0xd4>
			TargetAngularV = 0;
 8009298:	602b      	str	r3, [r5, #0]
			AngularLeapsity = 0;
 800929a:	469e      	mov	lr, r3
			AngularAcceleration = 0;
 800929c:	6003      	str	r3, [r0, #0]
 800929e:	2701      	movs	r7, #1
			TargetVelocity[BODY] = ExploreVelocity;
 80092a0:	f8c8 2008 	str.w	r2, [r8, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80092a4:	edd1 7a00 	vldr	s15, [r1]
 80092a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b0:	d4f2      	bmi.n	8009298 <SlalomRight+0xc8>
 80092b2:	edd1 7a03 	vldr	s15, [r1, #12]
 80092b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80092ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092be:	d4eb      	bmi.n	8009298 <SlalomRight+0xc8>
 80092c0:	2f00      	cmp	r7, #0
 80092c2:	f040 80bf 	bne.w	8009444 <SlalomRight+0x274>
 80092c6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8009490 <SlalomRight+0x2c0>
				////printf("直進1\r\n");
		}
	}
//	now_angv = AngularV;
//	ChangeLED(0);
	float start_angle = Angle;
 80092ca:	4b6b      	ldr	r3, [pc, #428]	; (8009478 <SlalomRight+0x2a8>)
	Pid[A_VELO_PID].flag = 0;
	while(start_angle + Sla.Theta1 > Angle)
 80092cc:	edd8 6a04 	vldr	s13, [r8, #16]
	float start_angle = Angle;
 80092d0:	edd3 7a00 	vldr	s15, [r3]
	while(start_angle + Sla.Theta1 > Angle)
 80092d4:	ed93 7a00 	vldr	s14, [r3]
 80092d8:	ee77 6aa6 	vadd.f32	s13, s15, s13
	Pid[A_VELO_PID].flag = 0;
 80092dc:	2100      	movs	r1, #0
	while(start_angle + Sla.Theta1 > Angle)
 80092de:	eef4 6ac7 	vcmpe.f32	s13, s14
 80092e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Pid[A_VELO_PID].flag = 0;
 80092e6:	62b1      	str	r1, [r6, #40]	; 0x28
	while(start_angle + Sla.Theta1 > Angle)
 80092e8:	dd0b      	ble.n	8009302 <SlalomRight+0x132>
	{
			AngularAcceleration = Sla.Alpha;
 80092ea:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80092ee:	495e      	ldr	r1, [pc, #376]	; (8009468 <SlalomRight+0x298>)
 80092f0:	6006      	str	r6, [r0, #0]
			TargetVelocity[BODY] = ExploreVelocity;
 80092f2:	608a      	str	r2, [r1, #8]
	while(start_angle + Sla.Theta1 > Angle)
 80092f4:	ed93 7a00 	vldr	s14, [r3]
 80092f8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80092fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009300:	d4f6      	bmi.n	80092f0 <SlalomRight+0x120>

	}
	AngularAcceleration = 0;
 8009302:	2100      	movs	r1, #0
	AngularLeapsity = 0;
//	now_angv = AngularV;
	//alpha_flag = 0;

	while(start_angle + Sla.Theta2 > Angle)
 8009304:	edd8 6a05 	vldr	s13, [r8, #20]
	AngularAcceleration = 0;
 8009308:	6001      	str	r1, [r0, #0]
	while(start_angle + Sla.Theta2 > Angle)
 800930a:	ed93 7a00 	vldr	s14, [r3]
	AngularLeapsity = 0;
 800930e:	f8cc 1000 	str.w	r1, [ip]
	while(start_angle + Sla.Theta2 > Angle)
 8009312:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8009316:	eef4 6ac7 	vcmpe.f32	s13, s14
 800931a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800931e:	dd0a      	ble.n	8009336 <SlalomRight+0x166>
 8009320:	4951      	ldr	r1, [pc, #324]	; (8009468 <SlalomRight+0x298>)
	{
			TargetAngularV = TargetAngularV;
 8009322:	682e      	ldr	r6, [r5, #0]
 8009324:	602e      	str	r6, [r5, #0]
			TargetVelocity[BODY] = ExploreVelocity;
 8009326:	608a      	str	r2, [r1, #8]
	while(start_angle + Sla.Theta2 > Angle)
 8009328:	ed93 7a00 	vldr	s14, [r3]
 800932c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009334:	d4f5      	bmi.n	8009322 <SlalomRight+0x152>
	}

//	now_angv = AngularV;
	while( start_angle + Sla.Theta3 > Angle)
 8009336:	edd8 6a06 	vldr	s13, [r8, #24]
 800933a:	ed93 7a00 	vldr	s14, [r3]
 800933e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934a:	d51f      	bpl.n	800938c <SlalomRight+0x1bc>
	{
			AngularAcceleration = -Sla.Alpha;
 800934c:	edd8 6a02 	vldr	s13, [r8, #8]
 8009350:	eef1 6a66 	vneg.f32	s13, s13
 8009354:	edc0 6a00 	vstr	s13, [r0]
			if(TargetAngularV < 0)
 8009358:	ed95 7a00 	vldr	s14, [r5]
 800935c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009364:	d466      	bmi.n	8009434 <SlalomRight+0x264>
 8009366:	4940      	ldr	r1, [pc, #256]	; (8009468 <SlalomRight+0x298>)
 8009368:	e008      	b.n	800937c <SlalomRight+0x1ac>
			AngularAcceleration = -Sla.Alpha;
 800936a:	edc0 6a00 	vstr	s13, [r0]
			if(TargetAngularV < 0)
 800936e:	ed95 7a00 	vldr	s14, [r5]
 8009372:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800937a:	d45b      	bmi.n	8009434 <SlalomRight+0x264>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = ExploreVelocity;
 800937c:	608a      	str	r2, [r1, #8]
	while( start_angle + Sla.Theta3 > Angle)
 800937e:	ed93 7a00 	vldr	s14, [r3]
 8009382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800938a:	d4ee      	bmi.n	800936a <SlalomRight+0x19a>
	}
	AngularAcceleration = 0;
 800938c:	ed9f 8a3b 	vldr	s16, [pc, #236]	; 800947c <SlalomRight+0x2ac>
	TargetAngularV = 0;
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
	while( now_pulse + Sla.Fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			TargetAngularV = 0;
			TargetVelocity[BODY] = ExploreVelocity;
 8009390:	4f35      	ldr	r7, [pc, #212]	; (8009468 <SlalomRight+0x298>)
	AngularAcceleration = 0;
 8009392:	ed80 8a00 	vstr	s16, [r0]
	TargetAngularV = 0;
 8009396:	ed85 8a00 	vstr	s16, [r5]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	6861      	ldr	r1, [r4, #4]
			if(Calc == 0)
 800939e:	4e38      	ldr	r6, [pc, #224]	; (8009480 <SlalomRight+0x2b0>)
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 80093a0:	440b      	add	r3, r1
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	while( now_pulse + Sla.Fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 80093aa:	ed98 7a01 	vldr	s14, [r8, #4]
 80093ae:	ee38 7a87 	vadd.f32	s14, s17, s14
 80093b2:	e004      	b.n	80093be <SlalomRight+0x1ee>
			TargetAngularV = 0;
 80093b4:	ed85 8a00 	vstr	s16, [r5]
			TargetVelocity[BODY] = ExploreVelocity;
 80093b8:	60ba      	str	r2, [r7, #8]
			if(Calc == 0)
 80093ba:	6833      	ldr	r3, [r6, #0]
 80093bc:	b38b      	cbz	r3, 8009422 <SlalomRight+0x252>
	while( now_pulse + Sla.Fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	6861      	ldr	r1, [r4, #4]
 80093c2:	440b      	add	r3, r1
 80093c4:	ee07 3a90 	vmov	s15, r3
 80093c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80093d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d4:	dcee      	bgt.n	80093b4 <SlalomRight+0x1e4>
			{
				updateRealSearch(maze, mouse);
				Calc = 1;
			}
	}
	TargetAngle += 0.5f*M_PI;//90*M_PI/180;
 80093d6:	4d2b      	ldr	r5, [pc, #172]	; (8009484 <SlalomRight+0x2b4>)
 80093d8:	6828      	ldr	r0, [r5, #0]
 80093da:	f7fe ffed 	bl	80083b8 <__aeabi_f2d>
 80093de:	a31c      	add	r3, pc, #112	; (adr r3, 8009450 <SlalomRight+0x280>)
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	f7fe fe8a 	bl	80080fc <__adddf3>
 80093e8:	f7ff fb36 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 80093ec:	4a26      	ldr	r2, [pc, #152]	; (8009488 <SlalomRight+0x2b8>)
	TargetAngle += 0.5f*M_PI;//90*M_PI/180;
 80093ee:	6028      	str	r0, [r5, #0]

}
 80093f0:	ecbd 8b02 	vpop	{d8}
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 80093f4:	68a3      	ldr	r3, [r4, #8]
 80093f6:	6890      	ldr	r0, [r2, #8]
 80093f8:	6891      	ldr	r1, [r2, #8]
 80093fa:	1a1b      	subs	r3, r3, r0
 80093fc:	440b      	add	r3, r1
 80093fe:	6093      	str	r3, [r2, #8]
}
 8009400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return mouse->now.wall.south;
 8009404:	f899 100c 	ldrb.w	r1, [r9, #12]
 8009408:	f3c1 1101 	ubfx	r1, r1, #4, #2
 800940c:	e732      	b.n	8009274 <SlalomRight+0xa4>
	return mouse->now.wall.east;
 800940e:	f899 100c 	ldrb.w	r1, [r9, #12]
 8009412:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8009416:	e72d      	b.n	8009274 <SlalomRight+0xa4>
	return mouse->now.wall.north;
 8009418:	f899 100c 	ldrb.w	r1, [r9, #12]
 800941c:	f001 0103 	and.w	r1, r1, #3
 8009420:	e728      	b.n	8009274 <SlalomRight+0xa4>
				updateRealSearch(maze, mouse);
 8009422:	4649      	mov	r1, r9
 8009424:	4658      	mov	r0, fp
 8009426:	f003 f9c7 	bl	800c7b8 <updateRealSearch>
				Calc = 1;
 800942a:	2301      	movs	r3, #1
 800942c:	f8da 2000 	ldr.w	r2, [sl]
 8009430:	6033      	str	r3, [r6, #0]
 8009432:	e7ba      	b.n	80093aa <SlalomRight+0x1da>
				TargetAngularV = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	602b      	str	r3, [r5, #0]
				break;
 8009438:	e7a8      	b.n	800938c <SlalomRight+0x1bc>
 800943a:	f8df c058 	ldr.w	ip, [pc, #88]	; 8009494 <SlalomRight+0x2c4>
 800943e:	4d08      	ldr	r5, [pc, #32]	; (8009460 <SlalomRight+0x290>)
 8009440:	4808      	ldr	r0, [pc, #32]	; (8009464 <SlalomRight+0x294>)
 8009442:	e742      	b.n	80092ca <SlalomRight+0xfa>
 8009444:	f8cc e000 	str.w	lr, [ip]
 8009448:	e73d      	b.n	80092c6 <SlalomRight+0xf6>
 800944a:	bf00      	nop
 800944c:	f3af 8000 	nop.w
 8009450:	54442d18 	.word	0x54442d18
 8009454:	3ff921fb 	.word	0x3ff921fb
 8009458:	20005660 	.word	0x20005660
 800945c:	20005428 	.word	0x20005428
 8009460:	20005640 	.word	0x20005640
 8009464:	2000509c 	.word	0x2000509c
 8009468:	20005630 	.word	0x20005630
 800946c:	200056a0 	.word	0x200056a0
 8009470:	43480000 	.word	0x43480000
 8009474:	437a0000 	.word	0x437a0000
 8009478:	20005098 	.word	0x20005098
 800947c:	00000000 	.word	0x00000000
 8009480:	200056dc 	.word	0x200056dc
 8009484:	200050a8 	.word	0x200050a8
 8009488:	20005694 	.word	0x20005694
 800948c:	200056b4 	.word	0x200056b4
 8009490:	20005678 	.word	0x20005678
 8009494:	200050a0 	.word	0x200050a0

08009498 <SlalomLeft>:
void SlalomLeft(maze_node *maze, profile *mouse)	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	4689      	mov	r9, r1
	switch(mouse->now.car%8)//方角に合わせて、
 800949e:	7a89      	ldrb	r1, [r1, #10]
//	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;

	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80094a0:	4c9d      	ldr	r4, [pc, #628]	; (8009718 <SlalomLeft+0x280>)
	Pid[A_VELO_PID].flag = 1;
 80094a2:	4e9e      	ldr	r6, [pc, #632]	; (800971c <SlalomLeft+0x284>)
 80094a4:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 8009750 <SlalomLeft+0x2b8>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	f8da 2000 	ldr.w	r2, [sl]
 80094ae:	6865      	ldr	r5, [r4, #4]
	Pid[A_VELO_PID].flag = 1;
 80094b0:	2701      	movs	r7, #1
	switch(mouse->now.car%8)//方角に合わせて、
 80094b2:	f001 0107 	and.w	r1, r1, #7
{
 80094b6:	ed2d 8b02 	vpush	{d8}
 80094ba:	4683      	mov	fp, r0
	Pid[A_VELO_PID].flag = 1;
 80094bc:	62b7      	str	r7, [r6, #40]	; 0x28
	switch(mouse->now.car%8)//方角に合わせて、
 80094be:	2906      	cmp	r1, #6
 80094c0:	d808      	bhi.n	80094d4 <SlalomLeft+0x3c>
 80094c2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80094c6:	0118      	.short	0x0118
 80094c8:	01130007 	.word	0x01130007
 80094cc:	010e0007 	.word	0x010e0007
 80094d0:	00da0007 	.word	0x00da0007
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80094d4:	442b      	add	r3, r5


	}
	else//なければ
	{
		while( now_pulse + Sla.Pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80094d6:	6821      	ldr	r1, [r4, #0]
 80094d8:	f8df 8278 	ldr.w	r8, [pc, #632]	; 8009754 <SlalomLeft+0x2bc>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80094dc:	ee07 3a10 	vmov	s14, r3
		while( now_pulse + Sla.Pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80094e0:	6863      	ldr	r3, [r4, #4]
 80094e2:	edd8 6a00 	vldr	s13, [r8]
 80094e6:	4419      	add	r1, r3
 80094e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80094ec:	ee07 1a90 	vmov	s15, r1
 80094f0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80094f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80094fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009500:	f340 8101 	ble.w	8009706 <SlalomLeft+0x26e>
 8009504:	4d86      	ldr	r5, [pc, #536]	; (8009720 <SlalomLeft+0x288>)
 8009506:	4887      	ldr	r0, [pc, #540]	; (8009724 <SlalomLeft+0x28c>)
 8009508:	4987      	ldr	r1, [pc, #540]	; (8009728 <SlalomLeft+0x290>)
		{
				TargetAngularV = 0;
 800950a:	2700      	movs	r7, #0
 800950c:	602f      	str	r7, [r5, #0]
				AngularAcceleration = 0;
 800950e:	6007      	str	r7, [r0, #0]
				TargetVelocity[BODY] = ExploreVelocity;
 8009510:	608a      	str	r2, [r1, #8]
		while( now_pulse + Sla.Pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8009518:	4463      	add	r3, ip
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800952a:	d4ef      	bmi.n	800950c <SlalomLeft+0x74>
 800952c:	4f7f      	ldr	r7, [pc, #508]	; (800972c <SlalomLeft+0x294>)
//				ChangeLED(2);
		}
	}
//	ChangeLED(0);
	Pid[A_VELO_PID].flag = 0;
	float start_angle = Angle;
 800952e:	4b80      	ldr	r3, [pc, #512]	; (8009730 <SlalomLeft+0x298>)
	while(start_angle - Sla.Theta1 < Angle)
 8009530:	edd8 6a04 	vldr	s13, [r8, #16]
	float start_angle = Angle;
 8009534:	edd3 7a00 	vldr	s15, [r3]
	while(start_angle - Sla.Theta1 < Angle)
 8009538:	ed93 7a00 	vldr	s14, [r3]
 800953c:	ee77 6ae6 	vsub.f32	s13, s15, s13
	Pid[A_VELO_PID].flag = 0;
 8009540:	2100      	movs	r1, #0
	while(start_angle - Sla.Theta1 < Angle)
 8009542:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Pid[A_VELO_PID].flag = 0;
 800954a:	62b1      	str	r1, [r6, #40]	; 0x28
	while(start_angle - Sla.Theta1 < Angle)
 800954c:	d50e      	bpl.n	800956c <SlalomLeft+0xd4>
	{
			AngularAcceleration = -Sla.Alpha;
 800954e:	ed98 6a02 	vldr	s12, [r8, #8]
 8009552:	4975      	ldr	r1, [pc, #468]	; (8009728 <SlalomLeft+0x290>)
 8009554:	eeb1 6a46 	vneg.f32	s12, s12
 8009558:	ed80 6a00 	vstr	s12, [r0]
			TargetVelocity[BODY] = ExploreVelocity;
 800955c:	608a      	str	r2, [r1, #8]
	while(start_angle - Sla.Theta1 < Angle)
 800955e:	ed93 7a00 	vldr	s14, [r3]
 8009562:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956a:	dcf5      	bgt.n	8009558 <SlalomLeft+0xc0>
	}
	AngularAcceleration = 0;
 800956c:	2100      	movs	r1, #0
	AngularLeapsity = 0;
	while(start_angle - Sla.Theta2 < Angle)
 800956e:	edd8 6a05 	vldr	s13, [r8, #20]
	AngularAcceleration = 0;
 8009572:	6001      	str	r1, [r0, #0]
	while(start_angle - Sla.Theta2 < Angle)
 8009574:	ed93 7a00 	vldr	s14, [r3]
	AngularLeapsity = 0;
 8009578:	6039      	str	r1, [r7, #0]
	while(start_angle - Sla.Theta2 < Angle)
 800957a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800957e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009586:	d50a      	bpl.n	800959e <SlalomLeft+0x106>
 8009588:	4967      	ldr	r1, [pc, #412]	; (8009728 <SlalomLeft+0x290>)
	{
			TargetAngularV = TargetAngularV;
 800958a:	682e      	ldr	r6, [r5, #0]
 800958c:	602e      	str	r6, [r5, #0]
			TargetVelocity[BODY] = ExploreVelocity;
 800958e:	608a      	str	r2, [r1, #8]
	while(start_angle - Sla.Theta2 < Angle)
 8009590:	ed93 7a00 	vldr	s14, [r3]
 8009594:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959c:	dcf5      	bgt.n	800958a <SlalomLeft+0xf2>
	}

	while( start_angle - Sla.Theta3 < Angle)
 800959e:	edd8 6a06 	vldr	s13, [r8, #24]
 80095a2:	ed93 7a00 	vldr	s14, [r3]
 80095a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80095aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b2:	dd1d      	ble.n	80095f0 <SlalomLeft+0x158>
	{
			AngularAcceleration = Sla.Alpha;
 80095b4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80095b8:	6006      	str	r6, [r0, #0]
			if(TargetAngularV > 0)
 80095ba:	ed95 7a00 	vldr	s14, [r5]
 80095be:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80095c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c6:	f300 809b 	bgt.w	8009700 <SlalomLeft+0x268>
 80095ca:	4957      	ldr	r1, [pc, #348]	; (8009728 <SlalomLeft+0x290>)
 80095cc:	e008      	b.n	80095e0 <SlalomLeft+0x148>
			AngularAcceleration = Sla.Alpha;
 80095ce:	6006      	str	r6, [r0, #0]
			if(TargetAngularV > 0)
 80095d0:	ed95 7a00 	vldr	s14, [r5]
 80095d4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80095d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095dc:	f300 8090 	bgt.w	8009700 <SlalomLeft+0x268>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = ExploreVelocity;
 80095e0:	608a      	str	r2, [r1, #8]
	while( start_angle - Sla.Theta3 < Angle)
 80095e2:	ed93 7a00 	vldr	s14, [r3]
 80095e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ee:	dcee      	bgt.n	80095ce <SlalomLeft+0x136>
	}
	AngularAcceleration = 0;
 80095f0:	ed9f 8a50 	vldr	s16, [pc, #320]	; 8009734 <SlalomLeft+0x29c>

	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
	while( now_pulse + Sla.Fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			TargetAngularV = 0;
			TargetVelocity[BODY] = ExploreVelocity;
 80095f4:	4f4c      	ldr	r7, [pc, #304]	; (8009728 <SlalomLeft+0x290>)
	AngularAcceleration = 0;
 80095f6:	ed80 8a00 	vstr	s16, [r0]
	TargetAngularV = 0;
 80095fa:	ed85 8a00 	vstr	s16, [r5]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	6861      	ldr	r1, [r4, #4]
			if(Calc == 0)
 8009602:	4e4d      	ldr	r6, [pc, #308]	; (8009738 <SlalomLeft+0x2a0>)
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009604:	440b      	add	r3, r1
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	while( now_pulse + Sla.Fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800960e:	ed98 7a01 	vldr	s14, [r8, #4]
 8009612:	ee38 7a87 	vadd.f32	s14, s17, s14
 8009616:	e004      	b.n	8009622 <SlalomLeft+0x18a>
			TargetAngularV = 0;
 8009618:	ed85 8a00 	vstr	s16, [r5]
			TargetVelocity[BODY] = ExploreVelocity;
 800961c:	60ba      	str	r2, [r7, #8]
			if(Calc == 0)
 800961e:	6833      	ldr	r3, [r6, #0]
 8009620:	b313      	cbz	r3, 8009668 <SlalomLeft+0x1d0>
	while( now_pulse + Sla.Fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	6861      	ldr	r1, [r4, #4]
 8009626:	440b      	add	r3, r1
 8009628:	ee07 3a90 	vmov	s15, r3
 800962c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009630:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009638:	dcee      	bgt.n	8009618 <SlalomLeft+0x180>
			{
				updateRealSearch(maze, mouse);
				Calc = 1;
			}
	}
	TargetAngle += -0.5f*M_PI;//-90*M_PI/180;
 800963a:	4d40      	ldr	r5, [pc, #256]	; (800973c <SlalomLeft+0x2a4>)
 800963c:	6828      	ldr	r0, [r5, #0]
 800963e:	f7fe febb 	bl	80083b8 <__aeabi_f2d>
 8009642:	a333      	add	r3, pc, #204	; (adr r3, 8009710 <SlalomLeft+0x278>)
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	f7fe fd56 	bl	80080f8 <__aeabi_dsub>
 800964c:	f7ff fa04 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009650:	4a3b      	ldr	r2, [pc, #236]	; (8009740 <SlalomLeft+0x2a8>)
	TargetAngle += -0.5f*M_PI;//-90*M_PI/180;
 8009652:	6028      	str	r0, [r5, #0]
}
 8009654:	ecbd 8b02 	vpop	{d8}
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009658:	68a3      	ldr	r3, [r4, #8]
 800965a:	6890      	ldr	r0, [r2, #8]
 800965c:	6891      	ldr	r1, [r2, #8]
 800965e:	1a1b      	subs	r3, r3, r0
 8009660:	440b      	add	r3, r1
 8009662:	6093      	str	r3, [r2, #8]
}
 8009664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				updateRealSearch(maze, mouse);
 8009668:	4649      	mov	r1, r9
 800966a:	4658      	mov	r0, fp
 800966c:	f003 f8a4 	bl	800c7b8 <updateRealSearch>
				Calc = 1;
 8009670:	2301      	movs	r3, #1
 8009672:	f8da 2000 	ldr.w	r2, [sl]
 8009676:	6033      	str	r3, [r6, #0]
 8009678:	e7c9      	b.n	800960e <SlalomLeft+0x176>
	return mouse->now.wall.west;
 800967a:	f899 100c 	ldrb.w	r1, [r9, #12]
 800967e:	0989      	lsrs	r1, r1, #6
	if (getFrontWall(mouse) == WALL /*前に壁があれば、*/)
 8009680:	2901      	cmp	r1, #1
 8009682:	f47f af27 	bne.w	80094d4 <SlalomLeft+0x3c>
 8009686:	4f29      	ldr	r7, [pc, #164]	; (800972c <SlalomLeft+0x294>)
 8009688:	4d25      	ldr	r5, [pc, #148]	; (8009720 <SlalomLeft+0x288>)
 800968a:	f8d7 e000 	ldr.w	lr, [r7]
 800968e:	4825      	ldr	r0, [pc, #148]	; (8009724 <SlalomLeft+0x28c>)
 8009690:	492c      	ldr	r1, [pc, #176]	; (8009744 <SlalomLeft+0x2ac>)
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009692:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8009748 <SlalomLeft+0x2b0>
 8009696:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800974c <SlalomLeft+0x2b4>
			TargetVelocity[BODY] = ExploreVelocity;
 800969a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8009728 <SlalomLeft+0x290>
			TargetAngularV = 0;
 800969e:	2300      	movs	r3, #0
	if (getFrontWall(mouse) == WALL /*前に壁があれば、*/)
 80096a0:	f04f 0c00 	mov.w	ip, #0
 80096a4:	e006      	b.n	80096b4 <SlalomLeft+0x21c>
			TargetAngularV = 0;
 80096a6:	602b      	str	r3, [r5, #0]
			AngularLeapsity = 0;
 80096a8:	469e      	mov	lr, r3
			AngularAcceleration = 0;
 80096aa:	6003      	str	r3, [r0, #0]
 80096ac:	f04f 0c01 	mov.w	ip, #1
			TargetVelocity[BODY] = ExploreVelocity;
 80096b0:	f8c8 2008 	str.w	r2, [r8, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80096b4:	edd1 7a00 	vldr	s15, [r1]
 80096b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c0:	d4f1      	bmi.n	80096a6 <SlalomLeft+0x20e>
 80096c2:	edd1 7a03 	vldr	s15, [r1, #12]
 80096c6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80096ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ce:	d4ea      	bmi.n	80096a6 <SlalomLeft+0x20e>
 80096d0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8009754 <SlalomLeft+0x2bc>
 80096d4:	f1bc 0f00 	cmp.w	ip, #0
 80096d8:	f43f af29 	beq.w	800952e <SlalomLeft+0x96>
 80096dc:	f8c7 e000 	str.w	lr, [r7]
 80096e0:	e725      	b.n	800952e <SlalomLeft+0x96>
	return mouse->now.wall.south;
 80096e2:	f899 100c 	ldrb.w	r1, [r9, #12]
 80096e6:	f3c1 1101 	ubfx	r1, r1, #4, #2
 80096ea:	e7c9      	b.n	8009680 <SlalomLeft+0x1e8>
	return mouse->now.wall.east;
 80096ec:	f899 100c 	ldrb.w	r1, [r9, #12]
 80096f0:	f3c1 0181 	ubfx	r1, r1, #2, #2
 80096f4:	e7c4      	b.n	8009680 <SlalomLeft+0x1e8>
	return mouse->now.wall.north;
 80096f6:	f899 100c 	ldrb.w	r1, [r9, #12]
 80096fa:	f001 0103 	and.w	r1, r1, #3
 80096fe:	e7bf      	b.n	8009680 <SlalomLeft+0x1e8>
				TargetAngularV = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	602b      	str	r3, [r5, #0]
				break;
 8009704:	e774      	b.n	80095f0 <SlalomLeft+0x158>
 8009706:	4f09      	ldr	r7, [pc, #36]	; (800972c <SlalomLeft+0x294>)
 8009708:	4d05      	ldr	r5, [pc, #20]	; (8009720 <SlalomLeft+0x288>)
 800970a:	4806      	ldr	r0, [pc, #24]	; (8009724 <SlalomLeft+0x28c>)
 800970c:	e70f      	b.n	800952e <SlalomLeft+0x96>
 800970e:	bf00      	nop
 8009710:	54442d18 	.word	0x54442d18
 8009714:	3ff921fb 	.word	0x3ff921fb
 8009718:	20005660 	.word	0x20005660
 800971c:	20005428 	.word	0x20005428
 8009720:	20005640 	.word	0x20005640
 8009724:	2000509c 	.word	0x2000509c
 8009728:	20005630 	.word	0x20005630
 800972c:	200050a0 	.word	0x200050a0
 8009730:	20005098 	.word	0x20005098
 8009734:	00000000 	.word	0x00000000
 8009738:	200056dc 	.word	0x200056dc
 800973c:	200050a8 	.word	0x200050a8
 8009740:	20005694 	.word	0x20005694
 8009744:	200056a0 	.word	0x200056a0
 8009748:	43480000 	.word	0x43480000
 800974c:	437a0000 	.word	0x437a0000
 8009750:	200056b4 	.word	0x200056b4
 8009754:	20005678 	.word	0x20005678

08009758 <Accel>:
void Accel(float add_distance, float explore_speed, maze_node *maze, profile *mouse)
{
 8009758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
#else
	Acceleration = 2.89000f;
#endif
	int target_pulse = (int)(add_distance*TO_PULSE);
 800975c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8009888 <Accel+0x130>
	TargetAngularV = 0;
 8009760:	4c4a      	ldr	r4, [pc, #296]	; (800988c <Accel+0x134>)

	_Bool wall_cut = false;
	Pid[A_VELO_PID].flag = 1;
 8009762:	4a4b      	ldr	r2, [pc, #300]	; (8009890 <Accel+0x138>)
	Acceleration = 2.89000f;
 8009764:	4e4b      	ldr	r6, [pc, #300]	; (8009894 <Accel+0x13c>)
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
		{
			updateRealSearch(maze, mouse);
			Calc = 1;
		}
		if(TargetVelocity[BODY] > explore_speed)
 8009766:	f8df a140 	ldr.w	sl, [pc, #320]	; 80098a8 <Accel+0x150>
{
 800976a:	ed2d 8b02 	vpush	{d8}
	int target_pulse = (int)(add_distance*TO_PULSE);
 800976e:	ee20 0a27 	vmul.f32	s0, s0, s15
	TargetAngularV = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	6023      	str	r3, [r4, #0]
	int target_pulse = (int)(add_distance*TO_PULSE);
 8009776:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		{
			Acceleration = 0;
 800977a:	ee08 3a90 	vmov	s17, r3
	Acceleration = 2.89000f;
 800977e:	4b46      	ldr	r3, [pc, #280]	; (8009898 <Accel+0x140>)
	Pid[A_VELO_PID].flag = 1;
 8009780:	2501      	movs	r5, #1
{
 8009782:	b083      	sub	sp, #12
	Acceleration = 2.89000f;
 8009784:	601e      	str	r6, [r3, #0]
	Pid[A_VELO_PID].flag = 1;
 8009786:	6295      	str	r5, [r2, #40]	; 0x28
{
 8009788:	eeb0 8a60 	vmov.f32	s16, s1
 800978c:	e9cd 0100 	strd	r0, r1, [sp]
	int target_pulse = (int)(add_distance*TO_PULSE);
 8009790:	ee17 4a90 	vmov	r4, s15
 8009794:	4d41      	ldr	r5, [pc, #260]	; (800989c <Accel+0x144>)
 8009796:	4e42      	ldr	r6, [pc, #264]	; (80098a0 <Accel+0x148>)
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009798:	e006      	b.n	80097a8 <Accel+0x50>
		if(TargetVelocity[BODY] > explore_speed)
 800979a:	edda 7a02 	vldr	s15, [sl, #8]
 800979e:	eef4 7ac8 	vcmpe.f32	s15, s16
 80097a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a6:	dc39      	bgt.n	800981c <Accel+0xc4>
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 80097a8:	68ab      	ldr	r3, [r5, #8]
 80097aa:	68b2      	ldr	r2, [r6, #8]
 80097ac:	4423      	add	r3, r4
 80097ae:	4293      	cmp	r3, r2
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80097b0:	4620      	mov	r0, r4
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 80097b2:	dd3e      	ble.n	8009832 <Accel+0xda>
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80097b4:	f7fe fdee 	bl	8008394 <__aeabi_i2d>
 80097b8:	a331      	add	r3, pc, #196	; (adr r3, 8009880 <Accel+0x128>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f7fe fe53 	bl	8008468 <__aeabi_dmul>
 80097c2:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80097c6:	68b7      	ldr	r7, [r6, #8]
 80097c8:	4680      	mov	r8, r0
 80097ca:	4658      	mov	r0, fp
 80097cc:	4689      	mov	r9, r1
 80097ce:	f7fe fde1 	bl	8008394 <__aeabi_i2d>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4640      	mov	r0, r8
 80097d8:	4649      	mov	r1, r9
 80097da:	f7fe fc8f 	bl	80080fc <__adddf3>
 80097de:	4680      	mov	r8, r0
 80097e0:	4638      	mov	r0, r7
 80097e2:	4689      	mov	r9, r1
 80097e4:	f7fe fdd6 	bl	8008394 <__aeabi_i2d>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	4640      	mov	r0, r8
 80097ee:	4649      	mov	r1, r9
 80097f0:	f7ff f8ac 	bl	800894c <__aeabi_dcmplt>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d0d0      	beq.n	800979a <Accel+0x42>
 80097f8:	4b2a      	ldr	r3, [pc, #168]	; (80098a4 <Accel+0x14c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1cc      	bne.n	800979a <Accel+0x42>
			updateRealSearch(maze, mouse);
 8009800:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009804:	f002 ffd8 	bl	800c7b8 <updateRealSearch>
			Calc = 1;
 8009808:	4a26      	ldr	r2, [pc, #152]	; (80098a4 <Accel+0x14c>)
 800980a:	2301      	movs	r3, #1
 800980c:	6013      	str	r3, [r2, #0]
		if(TargetVelocity[BODY] > explore_speed)
 800980e:	edda 7a02 	vldr	s15, [sl, #8]
 8009812:	eef4 7ac8 	vcmpe.f32	s15, s16
 8009816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800981a:	ddc5      	ble.n	80097a8 <Accel+0x50>
			Acceleration = 0;
 800981c:	4b1e      	ldr	r3, [pc, #120]	; (8009898 <Accel+0x140>)
 800981e:	edc3 8a00 	vstr	s17, [r3]
			TargetVelocity[BODY] = explore_speed;
 8009822:	ed8a 8a02 	vstr	s16, [sl, #8]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009826:	68ab      	ldr	r3, [r5, #8]
 8009828:	68b2      	ldr	r2, [r6, #8]
 800982a:	4423      	add	r3, r4
 800982c:	4293      	cmp	r3, r2
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800982e:	4620      	mov	r0, r4
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009830:	dcc0      	bgt.n	80097b4 <Accel+0x5c>
//			ChangeLED(3);
//		}

	}

	Acceleration = 0;
 8009832:	4a19      	ldr	r2, [pc, #100]	; (8009898 <Accel+0x140>)
 8009834:	2300      	movs	r3, #0
 8009836:	6013      	str	r3, [r2, #0]
//	ChangeLED(0);
//	wall_cut = false;
	KeepPulse[BODY] += target_pulse;
 8009838:	68ab      	ldr	r3, [r5, #8]
 800983a:	4423      	add	r3, r4
 800983c:	60ab      	str	r3, [r5, #8]
	KeepPulse[LEFT] += target_pulse*0.5f;
 800983e:	ed95 7a00 	vldr	s14, [r5]
 8009842:	ee07 4a90 	vmov	s15, r4
 8009846:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800984a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800984e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009852:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009856:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800985a:	ed85 7a00 	vstr	s14, [r5]
	KeepPulse[RIGHT] += target_pulse*0.5f;
 800985e:	ed95 7a01 	vldr	s14, [r5, #4]
 8009862:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009866:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800986a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800986e:	edc5 7a01 	vstr	s15, [r5, #4]
}
 8009872:	b003      	add	sp, #12
 8009874:	ecbd 8b02 	vpop	{d8}
 8009878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987c:	f3af 8000 	nop.w
 8009880:	9999999a 	.word	0x9999999a
 8009884:	3fe99999 	.word	0x3fe99999
 8009888:	44f72a55 	.word	0x44f72a55
 800988c:	20005640 	.word	0x20005640
 8009890:	20005428 	.word	0x20005428
 8009894:	4038f5c3 	.word	0x4038f5c3
 8009898:	20005094 	.word	0x20005094
 800989c:	20005694 	.word	0x20005694
 80098a0:	20005660 	.word	0x20005660
 80098a4:	200056dc 	.word	0x200056dc
 80098a8:	20005630 	.word	0x20005630
 80098ac:	00000000 	.word	0x00000000

080098b0 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 80098b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#else
	Acceleration = -2.89;
#endif
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(dec_distance*TO_PULSE);
 80098b4:	eddf 7a56 	vldr	s15, [pc, #344]	; 8009a10 <Decel+0x160>
	Acceleration = -2.89;
 80098b8:	4a56      	ldr	r2, [pc, #344]	; (8009a14 <Decel+0x164>)
 80098ba:	4b57      	ldr	r3, [pc, #348]	; (8009a18 <Decel+0x168>)
 80098bc:	f8df b17c 	ldr.w	fp, [pc, #380]	; 8009a3c <Decel+0x18c>
 80098c0:	4d56      	ldr	r5, [pc, #344]	; (8009a1c <Decel+0x16c>)

	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80098c2:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8009a40 <Decel+0x190>
{
 80098c6:	ed2d 8b04 	vpush	{d8-d9}
	int target_pulse = (int)(dec_distance*TO_PULSE);
 80098ca:	ee20 0a27 	vmul.f32	s0, s0, s15
	Acceleration = -2.89;
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	4b53      	ldr	r3, [pc, #332]	; (8009a20 <Decel+0x170>)
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80098d2:	ed9f 9a54 	vldr	s18, [pc, #336]	; 8009a24 <Decel+0x174>
 80098d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	{
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] ) //距離で制御を切り替えるなら、別のwhileを用意すればいいのでは
		{
			Pid[A_VELO_PID].flag = 1;
		}
		if(end_speed == 0){
 80098d8:	eddf 8a53 	vldr	s17, [pc, #332]	; 8009a28 <Decel+0x178>
			if(TargetVelocity[BODY] <= 90){
 80098dc:	eddf 9a53 	vldr	s19, [pc, #332]	; 8009a2c <Decel+0x17c>
{
 80098e0:	b083      	sub	sp, #12
	int target_pulse = (int)(dec_distance*TO_PULSE);
 80098e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80098e6:	9301      	str	r3, [sp, #4]
 80098e8:	ee17 4a90 	vmov	r4, s15
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80098ec:	2300      	movs	r3, #0
{
 80098ee:	eeb0 8a60 	vmov.f32	s16, s1
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	4b4e      	ldr	r3, [pc, #312]	; (8009a30 <Decel+0x180>)
 80098f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80098fa:	edd3 7a00 	vldr	s15, [r3]
 80098fe:	ee77 7a27 	vadd.f32	s15, s14, s15
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] ) //距離で制御を切り替えるなら、別のwhileを用意すればいいのでは
 8009902:	4620      	mov	r0, r4
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009904:	eef4 7ac9 	vcmpe.f32	s15, s18
 8009908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800990c:	d549      	bpl.n	80099a2 <Decel+0xf2>
 800990e:	68ab      	ldr	r3, [r5, #8]
 8009910:	f8da 2008 	ldr.w	r2, [sl, #8]
 8009914:	4423      	add	r3, r4
 8009916:	4293      	cmp	r3, r2
 8009918:	dd43      	ble.n	80099a2 <Decel+0xf2>
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] ) //距離で制御を切り替えるなら、別のwhileを用意すればいいのでは
 800991a:	f7fe fd3b 	bl	8008394 <__aeabi_i2d>
 800991e:	a33a      	add	r3, pc, #232	; (adr r3, 8009a08 <Decel+0x158>)
 8009920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009924:	f7fe fda0 	bl	8008468 <__aeabi_dmul>
 8009928:	68af      	ldr	r7, [r5, #8]
 800992a:	f8da 6008 	ldr.w	r6, [sl, #8]
 800992e:	4680      	mov	r8, r0
 8009930:	4638      	mov	r0, r7
 8009932:	4689      	mov	r9, r1
 8009934:	f7fe fd2e 	bl	8008394 <__aeabi_i2d>
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	4640      	mov	r0, r8
 800993e:	4649      	mov	r1, r9
 8009940:	f7fe fbdc 	bl	80080fc <__adddf3>
 8009944:	4680      	mov	r8, r0
 8009946:	4630      	mov	r0, r6
 8009948:	4689      	mov	r9, r1
 800994a:	f7fe fd23 	bl	8008394 <__aeabi_i2d>
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	4640      	mov	r0, r8
 8009954:	4649      	mov	r1, r9
 8009956:	f7fe fff9 	bl	800894c <__aeabi_dcmplt>
 800995a:	b110      	cbz	r0, 8009962 <Decel+0xb2>
 800995c:	2301      	movs	r3, #1
			Pid[A_VELO_PID].flag = 1;
 800995e:	e9cd 3300 	strd	r3, r3, [sp]
		if(end_speed == 0){
 8009962:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			if(TargetVelocity[BODY] <= 90){
 800996a:	eddb 7a02 	vldr	s15, [fp, #8]
		if(end_speed == 0){
 800996e:	d110      	bne.n	8009992 <Decel+0xe2>
			if(TargetVelocity[BODY] <= 90){
 8009970:	eef4 7ae9 	vcmpe.f32	s15, s19
 8009974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009978:	d8bc      	bhi.n	80098f4 <Decel+0x44>
				TargetVelocity[BODY] = 90;//end_speed;
 800997a:	edcb 9a02 	vstr	s19, [fp, #8]
			}
		}
		else if(end_speed != 0){
			if(TargetVelocity[BODY] <= end_speed){
				TargetVelocity[BODY] = end_speed;//90;//end_speed;
				Acceleration = 0;
 800997e:	4b25      	ldr	r3, [pc, #148]	; (8009a14 <Decel+0x164>)
 8009980:	edc3 8a00 	vstr	s17, [r3]
				TargetAngularV = 0;
 8009984:	4b2b      	ldr	r3, [pc, #172]	; (8009a34 <Decel+0x184>)
 8009986:	edc3 8a00 	vstr	s17, [r3]
				AngularAcceleration = 0;
 800998a:	4b2b      	ldr	r3, [pc, #172]	; (8009a38 <Decel+0x188>)
 800998c:	edc3 8a00 	vstr	s17, [r3]
 8009990:	e7b0      	b.n	80098f4 <Decel+0x44>
			if(TargetVelocity[BODY] <= end_speed){
 8009992:	eef4 7ac8 	vcmpe.f32	s15, s16
 8009996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999a:	d8ab      	bhi.n	80098f4 <Decel+0x44>
				TargetVelocity[BODY] = end_speed;//90;//end_speed;
 800999c:	ed8b 8a02 	vstr	s16, [fp, #8]
 80099a0:	e7ed      	b.n	800997e <Decel+0xce>
 80099a2:	9b00      	ldr	r3, [sp, #0]
 80099a4:	bb53      	cbnz	r3, 80099fc <Decel+0x14c>
			}
		}

	}
	TargetVelocity[BODY] = end_speed;
	Acceleration = 0;
 80099a6:	4a1b      	ldr	r2, [pc, #108]	; (8009a14 <Decel+0x164>)
	TargetVelocity[BODY] = end_speed;
 80099a8:	ed8b 8a02 	vstr	s16, [fp, #8]
	Acceleration = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	6013      	str	r3, [r2, #0]
	TargetAngularV = 0;
 80099b0:	4a20      	ldr	r2, [pc, #128]	; (8009a34 <Decel+0x184>)
 80099b2:	6013      	str	r3, [r2, #0]
	AngularAcceleration = 0;
 80099b4:	4a20      	ldr	r2, [pc, #128]	; (8009a38 <Decel+0x188>)
 80099b6:	6013      	str	r3, [r2, #0]
	//ChangeLED(2);
	KeepPulse[BODY] += target_pulse;
 80099b8:	68ab      	ldr	r3, [r5, #8]
 80099ba:	4423      	add	r3, r4
 80099bc:	60ab      	str	r3, [r5, #8]
	KeepPulse[LEFT] += target_pulse*0.5f;
 80099be:	ed95 7a00 	vldr	s14, [r5]
 80099c2:	ee07 4a90 	vmov	s15, r4
 80099c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099ce:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80099d2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80099d6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80099da:	ed85 7a00 	vstr	s14, [r5]
	KeepPulse[RIGHT] += target_pulse*0.5f;
 80099de:	ed95 7a01 	vldr	s14, [r5, #4]
 80099e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099e6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80099ea:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80099ee:	edc5 7a01 	vstr	s15, [r5, #4]


}
 80099f2:	b003      	add	sp, #12
 80099f4:	ecbd 8b04 	vpop	{d8-d9}
 80099f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fc:	4b08      	ldr	r3, [pc, #32]	; (8009a20 <Decel+0x170>)
 80099fe:	9a01      	ldr	r2, [sp, #4]
 8009a00:	629a      	str	r2, [r3, #40]	; 0x28
 8009a02:	e7d0      	b.n	80099a6 <Decel+0xf6>
 8009a04:	f3af 8000 	nop.w
 8009a08:	cccccccd 	.word	0xcccccccd
 8009a0c:	3fe4cccc 	.word	0x3fe4cccc
 8009a10:	44f72a55 	.word	0x44f72a55
 8009a14:	20005094 	.word	0x20005094
 8009a18:	c038f5c3 	.word	0xc038f5c3
 8009a1c:	20005694 	.word	0x20005694
 8009a20:	20005428 	.word	0x20005428
 8009a24:	456d8000 	.word	0x456d8000
 8009a28:	00000000 	.word	0x00000000
 8009a2c:	42b40000 	.word	0x42b40000
 8009a30:	200056a0 	.word	0x200056a0
 8009a34:	20005640 	.word	0x20005640
 8009a38:	2000509c 	.word	0x2000509c
 8009a3c:	20005630 	.word	0x20005630
 8009a40:	20005660 	.word	0x20005660

08009a44 <Calib>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。
void Calib(int distance)
{
	//Pos.を考え中
	int target_pulse = (int)(distance*TO_PULSE);
 8009a44:	ee07 0a90 	vmov	s15, r0
 8009a48:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009ad0 <Calib+0x8c>
 8009a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8009a50:	b4f0      	push	{r4, r5, r6, r7}
	int target_pulse = (int)(distance*TO_PULSE);
 8009a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a5a:	ee17 2a90 	vmov	r2, s15
	//int keep_pulse = TotalPulse[BODY]+target_pulse;
	if(target_pulse > 0)
 8009a5e:	2a00      	cmp	r2, #0
 8009a60:	dd1c      	ble.n	8009a9c <Calib+0x58>
	{
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 8009a62:	491c      	ldr	r1, [pc, #112]	; (8009ad4 <Calib+0x90>)
 8009a64:	4e1c      	ldr	r6, [pc, #112]	; (8009ad8 <Calib+0x94>)
 8009a66:	688b      	ldr	r3, [r1, #8]
 8009a68:	68b0      	ldr	r0, [r6, #8]
 8009a6a:	4f1c      	ldr	r7, [pc, #112]	; (8009adc <Calib+0x98>)
 8009a6c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009ae8 <Calib+0xa4>
 8009a70:	4413      	add	r3, r2
 8009a72:	4283      	cmp	r3, r0
 8009a74:	dd09      	ble.n	8009a8a <Calib+0x46>
		{
			Acceleration = 0;
			TargetVelocity[BODY] = 45;
 8009a76:	4c1a      	ldr	r4, [pc, #104]	; (8009ae0 <Calib+0x9c>)
			Acceleration = 0;
 8009a78:	2500      	movs	r5, #0
 8009a7a:	603d      	str	r5, [r7, #0]
			TargetVelocity[BODY] = 45;
 8009a7c:	f8cc 4008 	str.w	r4, [ip, #8]
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 8009a80:	688b      	ldr	r3, [r1, #8]
 8009a82:	68b0      	ldr	r0, [r6, #8]
 8009a84:	4413      	add	r3, r2
 8009a86:	4283      	cmp	r3, r0
 8009a88:	dcf7      	bgt.n	8009a7a <Calib+0x36>
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
		{
			Acceleration = 0;
			TargetVelocity[BODY] = -45;
		}
		KeepPulse[BODY] += target_pulse;
 8009a8a:	688b      	ldr	r3, [r1, #8]
 8009a8c:	441a      	add	r2, r3
 8009a8e:	608a      	str	r2, [r1, #8]
	}
	TargetVelocity[BODY] = 0;
 8009a90:	2300      	movs	r3, #0
 8009a92:	f8cc 3008 	str.w	r3, [ip, #8]
	Acceleration = 0;
 8009a96:	603b      	str	r3, [r7, #0]
}
 8009a98:	bcf0      	pop	{r4, r5, r6, r7}
 8009a9a:	4770      	bx	lr
	if(target_pulse < 0 )
 8009a9c:	d014      	beq.n	8009ac8 <Calib+0x84>
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 8009a9e:	490d      	ldr	r1, [pc, #52]	; (8009ad4 <Calib+0x90>)
 8009aa0:	4e0d      	ldr	r6, [pc, #52]	; (8009ad8 <Calib+0x94>)
 8009aa2:	688b      	ldr	r3, [r1, #8]
 8009aa4:	68b0      	ldr	r0, [r6, #8]
 8009aa6:	4f0d      	ldr	r7, [pc, #52]	; (8009adc <Calib+0x98>)
 8009aa8:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8009ae8 <Calib+0xa4>
 8009aac:	4413      	add	r3, r2
 8009aae:	4283      	cmp	r3, r0
 8009ab0:	daeb      	bge.n	8009a8a <Calib+0x46>
			TargetVelocity[BODY] = -45;
 8009ab2:	4c0c      	ldr	r4, [pc, #48]	; (8009ae4 <Calib+0xa0>)
			Acceleration = 0;
 8009ab4:	2500      	movs	r5, #0
 8009ab6:	603d      	str	r5, [r7, #0]
			TargetVelocity[BODY] = -45;
 8009ab8:	f8cc 4008 	str.w	r4, [ip, #8]
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 8009abc:	688b      	ldr	r3, [r1, #8]
 8009abe:	68b0      	ldr	r0, [r6, #8]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	4283      	cmp	r3, r0
 8009ac4:	dbf7      	blt.n	8009ab6 <Calib+0x72>
 8009ac6:	e7e0      	b.n	8009a8a <Calib+0x46>
 8009ac8:	4f04      	ldr	r7, [pc, #16]	; (8009adc <Calib+0x98>)
 8009aca:	f8df c01c 	ldr.w	ip, [pc, #28]	; 8009ae8 <Calib+0xa4>
 8009ace:	e7df      	b.n	8009a90 <Calib+0x4c>
 8009ad0:	44f72a55 	.word	0x44f72a55
 8009ad4:	20005694 	.word	0x20005694
 8009ad8:	20005660 	.word	0x20005660
 8009adc:	20005094 	.word	0x20005094
 8009ae0:	42340000 	.word	0x42340000
 8009ae4:	c2340000 	.word	0xc2340000
 8009ae8:	20005630 	.word	0x20005630

08009aec <Compensate>:
void Compensate()
{
 8009aec:	b508      	push	{r3, lr}
	TargetPhoto[FL];

#else
	//バック補正
	//ControlWall();
	PIDChangeFlag(A_VELO_PID, 1);
 8009aee:	2101      	movs	r1, #1
 8009af0:	2000      	movs	r0, #0
 8009af2:	f005 f8b3 	bl	800ec5c <PIDChangeFlag>
	Calib(-25);
 8009af6:	f06f 0018 	mvn.w	r0, #24
 8009afa:	f7ff ffa3 	bl	8009a44 <Calib>
	PIDChangeFlag(A_VELO_PID, 0);
 8009afe:	2100      	movs	r1, #0
 8009b00:	4608      	mov	r0, r1

//	Accel(7,-70);
//	Decel(7,0);
#endif

}
 8009b02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PIDChangeFlag(A_VELO_PID, 0);
 8009b06:	f005 b8a9 	b.w	800ec5c <PIDChangeFlag>
 8009b0a:	bf00      	nop

08009b0c <AjustCenter>:
float AjustCenter(profile *mouse){
 8009b0c:	b538      	push	{r3, r4, r5, lr}
	//x,y,lrfb
	PIDChangeFlag(L_WALL_PID, 0);
 8009b0e:	2100      	movs	r1, #0
float AjustCenter(profile *mouse){
 8009b10:	4605      	mov	r5, r0
	PIDChangeFlag(L_WALL_PID, 0);
 8009b12:	2002      	movs	r0, #2
 8009b14:	f005 f8a2 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 8009b18:	2100      	movs	r1, #0
 8009b1a:	2003      	movs	r0, #3
 8009b1c:	f005 f89e 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 8009b20:	2100      	movs	r1, #0
 8009b22:	2001      	movs	r0, #1
 8009b24:	f005 f89a 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag( A_VELO_PID, 0);
 8009b28:	2100      	movs	r1, #0
 8009b2a:	4608      	mov	r0, r1
 8009b2c:	f005 f896 	bl	800ec5c <PIDChangeFlag>
	int wall_ctrl = GetWallCtrlDirection(mouse);
 8009b30:	4628      	mov	r0, r5
 8009b32:	f7ff f961 	bl	8008df8 <GetWallCtrlDirection>
	float photo_threshold[2]=
	{
			3300,
			4500
	}; //試走会で調整. 広げると位置はややばらつくが光量の影響がやや小さく。狭めると位置が安定するが環境しだいで怪しい挙動に。
	switch(mouse->now.car%8)
 8009b36:	7aab      	ldrb	r3, [r5, #10]
 8009b38:	f003 0307 	and.w	r3, r3, #7
	int wall_ctrl = GetWallCtrlDirection(mouse);
 8009b3c:	4604      	mov	r4, r0
	switch(mouse->now.car%8)
 8009b3e:	2b06      	cmp	r3, #6
 8009b40:	d80e      	bhi.n	8009b60 <AjustCenter+0x54>
 8009b42:	e8df f003 	tbb	[pc, r3]
 8009b46:	0d42      	.short	0x0d42
 8009b48:	0d190d37 	.word	0x0d190d37
 8009b4c:	04          	.byte	0x04
 8009b4d:	00          	.byte	0x00
				Angle = TargetAngle;
				return 61.5;
			}
		break;
	case west:
			if (mouse->now.wall.west == wall) //前に壁があれば前で調整
 8009b4e:	7b2b      	ldrb	r3, [r5, #12]
 8009b50:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8009b54:	2a40      	cmp	r2, #64	; 0x40
 8009b56:	d066      	beq.n	8009c26 <AjustCenter+0x11a>
				while( !((photo_threshold[0] < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < photo_threshold[1])) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
					{
//					ChangeLED(Pid[F_WALL_PID].flag);
					}
			}
			else if (mouse->now.wall.east == wall) //後ろに壁があるときはバック
 8009b58:	f003 030c 	and.w	r3, r3, #12
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	d032      	beq.n	8009bc6 <AjustCenter+0xba>
	default:
		break;
	}
//	Control_Mode = NOT_CTRL_PID;
	Pid[wall_ctrl].flag = 0;
	TargetAngularV = 0;
 8009b60:	4a67      	ldr	r2, [pc, #412]	; (8009d00 <AjustCenter+0x1f4>)
	Pid[wall_ctrl].flag = 0;
 8009b62:	4b68      	ldr	r3, [pc, #416]	; (8009d04 <AjustCenter+0x1f8>)
	return 45;
 8009b64:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8009d08 <AjustCenter+0x1fc>
	TargetAngularV = 0;
 8009b68:	2100      	movs	r1, #0
 8009b6a:	6011      	str	r1, [r2, #0]
	Pid[wall_ctrl].flag = 0;
 8009b6c:	222c      	movs	r2, #44	; 0x2c
 8009b6e:	fb02 3404 	mla	r4, r2, r4, r3
 8009b72:	2300      	movs	r3, #0
 8009b74:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8009b76:	bd38      	pop	{r3, r4, r5, pc}
			if (mouse->now.wall.south == wall) //前に壁があれば前で調整
 8009b78:	7b29      	ldrb	r1, [r5, #12]
 8009b7a:	f001 0330 	and.w	r3, r1, #48	; 0x30
 8009b7e:	2b10      	cmp	r3, #16
 8009b80:	d075      	beq.n	8009c6e <AjustCenter+0x162>
			else if (mouse->now.wall.north == wall) //後ろに壁があるときはバック
 8009b82:	f001 0103 	and.w	r1, r1, #3
 8009b86:	2901      	cmp	r1, #1
 8009b88:	d1ea      	bne.n	8009b60 <AjustCenter+0x54>
				PIDChangeFlag(wall_ctrl, 1);
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f005 f866 	bl	800ec5c <PIDChangeFlag>
				Compensate();//後ろ壁調整
 8009b90:	f7ff ffac 	bl	8009aec <Compensate>
				TargetAngularV = 0;
 8009b94:	4b5a      	ldr	r3, [pc, #360]	; (8009d00 <AjustCenter+0x1f4>)
				Angle = TargetAngle;
 8009b96:	495d      	ldr	r1, [pc, #372]	; (8009d0c <AjustCenter+0x200>)
				Pid[wall_ctrl].flag = 0;
 8009b98:	4a5a      	ldr	r2, [pc, #360]	; (8009d04 <AjustCenter+0x1f8>)
				return 61.5;
 8009b9a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8009d10 <AjustCenter+0x204>
				TargetAngularV = 0;
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	6018      	str	r0, [r3, #0]
				Pid[wall_ctrl].flag = 0;
 8009ba2:	232c      	movs	r3, #44	; 0x2c
				Angle = TargetAngle;
 8009ba4:	6808      	ldr	r0, [r1, #0]
 8009ba6:	495b      	ldr	r1, [pc, #364]	; (8009d14 <AjustCenter+0x208>)
				Pid[wall_ctrl].flag = 0;
 8009ba8:	fb03 2404 	mla	r4, r3, r4, r2
 8009bac:	2300      	movs	r3, #0
				Angle = TargetAngle;
 8009bae:	6008      	str	r0, [r1, #0]
				Pid[wall_ctrl].flag = 0;
 8009bb0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
			if (mouse->now.wall.east == wall) //前に壁があれば前で調整
 8009bb4:	7b2b      	ldrb	r3, [r5, #12]
 8009bb6:	f003 020c 	and.w	r2, r3, #12
 8009bba:	2a04      	cmp	r2, #4
 8009bbc:	d00f      	beq.n	8009bde <AjustCenter+0xd2>
			else if (mouse->now.wall.west == wall) //後ろに壁があるときはバック
 8009bbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009bc2:	2b40      	cmp	r3, #64	; 0x40
 8009bc4:	d1cc      	bne.n	8009b60 <AjustCenter+0x54>
				PIDChangeFlag(wall_ctrl, 1);
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	e7df      	b.n	8009b8a <AjustCenter+0x7e>
			if (mouse->now.wall.north == wall) //前に壁があれば前で調整
 8009bca:	7b2b      	ldrb	r3, [r5, #12]
 8009bcc:	f003 0503 	and.w	r5, r3, #3
 8009bd0:	2d01      	cmp	r5, #1
 8009bd2:	d070      	beq.n	8009cb6 <AjustCenter+0x1aa>
			else if (mouse->now.wall.south == wall) //後ろに壁があるときはバック
 8009bd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009bd8:	2b10      	cmp	r3, #16
 8009bda:	d1c1      	bne.n	8009b60 <AjustCenter+0x54>
 8009bdc:	e7f3      	b.n	8009bc6 <AjustCenter+0xba>
				Calib(-5);
 8009bde:	f06f 0004 	mvn.w	r0, #4
 8009be2:	f7ff ff2f 	bl	8009a44 <Calib>
				PIDChangeFlag(wall_ctrl, 1);
 8009be6:	2101      	movs	r1, #1
 8009be8:	4620      	mov	r0, r4
 8009bea:	f005 f837 	bl	800ec5c <PIDChangeFlag>
 8009bee:	4b4a      	ldr	r3, [pc, #296]	; (8009d18 <AjustCenter+0x20c>)
				while( !(( (photo_threshold[0] < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < photo_threshold[1]))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 8009bf0:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8009d1c <AjustCenter+0x210>
 8009bf4:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8009d20 <AjustCenter+0x214>
 8009bf8:	edd3 7a00 	vldr	s15, [r3]
 8009bfc:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c04:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c0c:	ddf4      	ble.n	8009bf8 <AjustCenter+0xec>
 8009c0e:	edd3 7a00 	vldr	s15, [r3]
 8009c12:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c1a:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c22:	d5e9      	bpl.n	8009bf8 <AjustCenter+0xec>
 8009c24:	e79c      	b.n	8009b60 <AjustCenter+0x54>
				Calib(-5);
 8009c26:	f06f 0004 	mvn.w	r0, #4
 8009c2a:	f7ff ff0b 	bl	8009a44 <Calib>
				PIDChangeFlag(wall_ctrl, 1);
 8009c2e:	2101      	movs	r1, #1
 8009c30:	4620      	mov	r0, r4
 8009c32:	f005 f813 	bl	800ec5c <PIDChangeFlag>
 8009c36:	4b38      	ldr	r3, [pc, #224]	; (8009d18 <AjustCenter+0x20c>)
				while( !((photo_threshold[0] < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < photo_threshold[1])) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 8009c38:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009d1c <AjustCenter+0x210>
 8009c3c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8009d20 <AjustCenter+0x214>
 8009c40:	edd3 7a00 	vldr	s15, [r3]
 8009c44:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c4c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c54:	ddf4      	ble.n	8009c40 <AjustCenter+0x134>
 8009c56:	edd3 7a00 	vldr	s15, [r3]
 8009c5a:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c62:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c6a:	d5e9      	bpl.n	8009c40 <AjustCenter+0x134>
 8009c6c:	e778      	b.n	8009b60 <AjustCenter+0x54>
				Calib(-5);
 8009c6e:	f06f 0004 	mvn.w	r0, #4
 8009c72:	f7ff fee7 	bl	8009a44 <Calib>
				PIDChangeFlag(wall_ctrl, 1);
 8009c76:	2101      	movs	r1, #1
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f004 ffef 	bl	800ec5c <PIDChangeFlag>
 8009c7e:	4b26      	ldr	r3, [pc, #152]	; (8009d18 <AjustCenter+0x20c>)
				while( !((photo_threshold[0]< Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < photo_threshold[1])) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 8009c80:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009d1c <AjustCenter+0x210>
 8009c84:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8009d20 <AjustCenter+0x214>
 8009c88:	edd3 7a00 	vldr	s15, [r3]
 8009c8c:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c94:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c9c:	ddf4      	ble.n	8009c88 <AjustCenter+0x17c>
 8009c9e:	edd3 7a00 	vldr	s15, [r3]
 8009ca2:	ed93 7a03 	vldr	s14, [r3, #12]
 8009ca6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009caa:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb2:	d5e9      	bpl.n	8009c88 <AjustCenter+0x17c>
 8009cb4:	e754      	b.n	8009b60 <AjustCenter+0x54>
				Calib(-5);
 8009cb6:	f06f 0004 	mvn.w	r0, #4
 8009cba:	f7ff fec3 	bl	8009a44 <Calib>
				PIDChangeFlag(wall_ctrl, 1);
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f004 ffcb 	bl	800ec5c <PIDChangeFlag>
 8009cc6:	4b14      	ldr	r3, [pc, #80]	; (8009d18 <AjustCenter+0x20c>)
				while( !( (photo_threshold[0] < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < photo_threshold[1])) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))//(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )
 8009cc8:	eddf 6a14 	vldr	s13, [pc, #80]	; 8009d1c <AjustCenter+0x210>
 8009ccc:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8009d20 <AjustCenter+0x214>
 8009cd0:	edd3 7a00 	vldr	s15, [r3]
 8009cd4:	ed93 7a03 	vldr	s14, [r3, #12]
 8009cd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cdc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce4:	ddf4      	ble.n	8009cd0 <AjustCenter+0x1c4>
 8009ce6:	edd3 7a00 	vldr	s15, [r3]
 8009cea:	ed93 7a03 	vldr	s14, [r3, #12]
 8009cee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cf2:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cfa:	d5e9      	bpl.n	8009cd0 <AjustCenter+0x1c4>
 8009cfc:	e730      	b.n	8009b60 <AjustCenter+0x54>
 8009cfe:	bf00      	nop
 8009d00:	20005640 	.word	0x20005640
 8009d04:	20005428 	.word	0x20005428
 8009d08:	42340000 	.word	0x42340000
 8009d0c:	200050a8 	.word	0x200050a8
 8009d10:	42760000 	.word	0x42760000
 8009d14:	20005098 	.word	0x20005098
 8009d18:	200056a0 	.word	0x200056a0
 8009d1c:	454e4000 	.word	0x454e4000
 8009d20:	458ca000 	.word	0x458ca000

08009d24 <GetWallCompensateDir>:
int GetWallCompensateDir(profile *mouse)
{
	switch(mouse->now.car%8)
 8009d24:	7a83      	ldrb	r3, [r0, #10]
 8009d26:	f003 0307 	and.w	r3, r3, #7
 8009d2a:	2b06      	cmp	r3, #6
 8009d2c:	d835      	bhi.n	8009d9a <GetWallCompensateDir+0x76>
 8009d2e:	e8df f003 	tbb	[pc, r3]
 8009d32:	3428      	.short	0x3428
 8009d34:	3410341c 	.word	0x3410341c
 8009d38:	04          	.byte	0x04
 8009d39:	00          	.byte	0x00
				{
					return R_WALL_PID;
				}
				break;
			case west:
				if ( mouse->now.wall.north == wall )
 8009d3a:	7b03      	ldrb	r3, [r0, #12]
 8009d3c:	f003 0203 	and.w	r2, r3, #3
 8009d40:	2a01      	cmp	r2, #1
 8009d42:	d02e      	beq.n	8009da2 <GetWallCompensateDir+0x7e>
				{
					return R_WALL_PID;
				}
				else if ( mouse->now.wall.south == wall )
 8009d44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d48:	2b10      	cmp	r3, #16
					return L_WALL_PID;
 8009d4a:	bf14      	ite	ne
 8009d4c:	2006      	movne	r0, #6
 8009d4e:	2002      	moveq	r0, #2
 8009d50:	4770      	bx	lr
				if(mouse->now.wall.east == wall)
 8009d52:	7b03      	ldrb	r3, [r0, #12]
 8009d54:	f003 020c 	and.w	r2, r3, #12
 8009d58:	2a04      	cmp	r2, #4
 8009d5a:	d020      	beq.n	8009d9e <GetWallCompensateDir+0x7a>
				else if(mouse->now.wall.west == wall)
 8009d5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009d60:	2b40      	cmp	r3, #64	; 0x40
					return R_WALL_PID;
 8009d62:	bf14      	ite	ne
 8009d64:	2006      	movne	r0, #6
 8009d66:	2003      	moveq	r0, #3
 8009d68:	4770      	bx	lr
				if(mouse->now.wall.north == wall)
 8009d6a:	7b03      	ldrb	r3, [r0, #12]
 8009d6c:	f003 0203 	and.w	r2, r3, #3
 8009d70:	2a01      	cmp	r2, #1
 8009d72:	d014      	beq.n	8009d9e <GetWallCompensateDir+0x7a>
				else if(mouse->now.wall.south == wall)
 8009d74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d78:	2b10      	cmp	r3, #16
					return R_WALL_PID;
 8009d7a:	bf14      	ite	ne
 8009d7c:	2006      	movne	r0, #6
 8009d7e:	2003      	moveq	r0, #3
 8009d80:	4770      	bx	lr
				if(mouse->now.wall.east == wall)
 8009d82:	7b03      	ldrb	r3, [r0, #12]
 8009d84:	f003 020c 	and.w	r2, r3, #12
 8009d88:	2a04      	cmp	r2, #4
 8009d8a:	d00a      	beq.n	8009da2 <GetWallCompensateDir+0x7e>
				else if(mouse->now.wall.west == wall)
 8009d8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009d90:	2b40      	cmp	r3, #64	; 0x40
					return L_WALL_PID;
 8009d92:	bf14      	ite	ne
 8009d94:	2006      	movne	r0, #6
 8009d96:	2002      	moveq	r0, #2
 8009d98:	4770      	bx	lr
				}
				break;

			default:
				//斜め方向
				return N_WALL_PID;
 8009d9a:	2006      	movs	r0, #6
 8009d9c:	4770      	bx	lr
					return L_WALL_PID;
 8009d9e:	2002      	movs	r0, #2
 8009da0:	4770      	bx	lr
					return R_WALL_PID;
 8009da2:	2003      	movs	r0, #3
				break;
			}
	return N_WALL_PID;
}
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop

08009da8 <GoStraight>:
void GoStraight(float move_distance,  float explore_speed, int accel_or_decel, maze_node *maze, profile *mouse)
{
 8009da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dac:	ed2d 8b02 	vpush	{d8}
 8009db0:	4603      	mov	r3, r0

	//v = v0 + at
	//x = v0t + 0.5*at^2
	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
//	Control_Mode = A_VELO_PID;
	Pid[A_VELO_PID].flag = 1;
 8009db2:	2601      	movs	r6, #1
	//加減速時は角度制御だけにしておいてあとで困ったら追加
	int target_pulse = (int)(move_distance*TO_PULSE);
 8009db4:	eddf 7a96 	vldr	s15, [pc, #600]	; 800a010 <GoStraight+0x268>
{
 8009db8:	4608      	mov	r0, r1
	Pid[A_VELO_PID].flag = 1;
 8009dba:	4996      	ldr	r1, [pc, #600]	; (800a014 <GoStraight+0x26c>)
	if(accel_or_decel == 1) //加速するとき
 8009dbc:	42b3      	cmp	r3, r6
{
 8009dbe:	b085      	sub	sp, #20
	int target_pulse = (int)(move_distance*TO_PULSE);
 8009dc0:	ee60 7a27 	vmul.f32	s15, s0, s15
	Pid[A_VELO_PID].flag = 1;
 8009dc4:	628e      	str	r6, [r1, #40]	; 0x28
	if(accel_or_decel == 1) //加速するとき
 8009dc6:	f000 80bd 	beq.w	8009f44 <GoStraight+0x19c>
 8009dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	{
		//explore_speed += AddVelocity;
		VelocityMax = true;
		Accel( move_distance , explore_speed, maze, mouse);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
	}
	else if(accel_or_decel == -1) //探索速度までの減速. ターン速度までの減速も後で入れる
 8009dce:	3301      	adds	r3, #1
 8009dd0:	eeb0 7a40 	vmov.f32	s14, s0
 8009dd4:	ee17 ba90 	vmov	fp, s15
 8009dd8:	9201      	str	r2, [sp, #4]
 8009dda:	9003      	str	r0, [sp, #12]
 8009ddc:	f000 80bc 	beq.w	8009f58 <GoStraight+0x1b0>
		_Bool wall_cut=false;	//壁切れ用
		_Bool face_check  = false; //一度でも正面領域に収まったか

		int ctrl_mode=A_VELO_PID;
		direction dir = mouse->now.dir;
		if(!(dir%8 == backright || dir%8 == backleft || dir%8 == back)){
 8009de0:	9801      	ldr	r0, [sp, #4]
 8009de2:	7ac3      	ldrb	r3, [r0, #11]
 8009de4:	f003 0307 	and.w	r3, r3, #7
 8009de8:	3b03      	subs	r3, #3
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d907      	bls.n	8009dfe <GoStraight+0x56>
			ctrl_mode = GetWallCtrlDirection(mouse); //一個前の情報を使っているかも（Uターン時のプログラムでは位置の更新がない）
 8009dee:	f7ff f803 	bl	8008df8 <GetWallCtrlDirection>
		int ctrl_mode=A_VELO_PID;
 8009df2:	4603      	mov	r3, r0
 8009df4:	2806      	cmp	r0, #6
 8009df6:	bf08      	it	eq
 8009df8:	2300      	moveq	r3, #0
 8009dfa:	9302      	str	r3, [sp, #8]
 8009dfc:	e001      	b.n	8009e02 <GoStraight+0x5a>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	9302      	str	r3, [sp, #8]
				Pid[A_VELO_PID].flag = 1;
				Pid[ctrl_mode].flag = 0;
			}
			else {
				Pid[A_VELO_PID].flag = 0;
				Pid[ctrl_mode].flag = 1;//壁見る
 8009e02:	9a02      	ldr	r2, [sp, #8]
 8009e04:	4c84      	ldr	r4, [pc, #528]	; (800a018 <GoStraight+0x270>)
 8009e06:	4d85      	ldr	r5, [pc, #532]	; (800a01c <GoStraight+0x274>)
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4a82      	ldr	r2, [pc, #520]	; (800a014 <GoStraight+0x26c>)
 8009e0c:	232c      	movs	r3, #44	; 0x2c
 8009e0e:	fb03 2301 	mla	r3, r3, r1, r2
 8009e12:	9300      	str	r3, [sp, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009e14:	68a3      	ldr	r3, [r4, #8]
 8009e16:	68aa      	ldr	r2, [r5, #8]
 8009e18:	445b      	add	r3, fp
 8009e1a:	4293      	cmp	r3, r2
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009e1c:	4658      	mov	r0, fp
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009e1e:	dd5d      	ble.n	8009edc <GoStraight+0x134>
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009e20:	f7fe fab8 	bl	8008394 <__aeabi_i2d>
 8009e24:	68a6      	ldr	r6, [r4, #8]
 8009e26:	4681      	mov	r9, r0
 8009e28:	4630      	mov	r0, r6
 8009e2a:	468a      	mov	sl, r1
 8009e2c:	f7fe fab2 	bl	8008394 <__aeabi_i2d>
 8009e30:	a373      	add	r3, pc, #460	; (adr r3, 800a000 <GoStraight+0x258>)
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	4606      	mov	r6, r0
 8009e38:	460f      	mov	r7, r1
 8009e3a:	4648      	mov	r0, r9
 8009e3c:	4651      	mov	r1, sl
 8009e3e:	f7fe fb13 	bl	8008468 <__aeabi_dmul>
 8009e42:	4602      	mov	r2, r0
 8009e44:	460b      	mov	r3, r1
 8009e46:	4630      	mov	r0, r6
 8009e48:	4639      	mov	r1, r7
 8009e4a:	f7fe f957 	bl	80080fc <__adddf3>
 8009e4e:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009e52:	4606      	mov	r6, r0
 8009e54:	4640      	mov	r0, r8
 8009e56:	460f      	mov	r7, r1
 8009e58:	f7fe fa9c 	bl	8008394 <__aeabi_i2d>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4630      	mov	r0, r6
 8009e62:	4639      	mov	r1, r7
 8009e64:	f7fe fd72 	bl	800894c <__aeabi_dcmplt>
				Pid[A_VELO_PID].flag = 1;
 8009e68:	2201      	movs	r2, #1
				Pid[ctrl_mode].flag = 0;
 8009e6a:	2300      	movs	r3, #0
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d063      	beq.n	8009f38 <GoStraight+0x190>
				Pid[A_VELO_PID].flag = 1;
 8009e70:	4968      	ldr	r1, [pc, #416]	; (800a014 <GoStraight+0x26c>)
 8009e72:	628a      	str	r2, [r1, #40]	; 0x28
				Pid[ctrl_mode].flag = 0;
 8009e74:	9a00      	ldr	r2, [sp, #0]
 8009e76:	6293      	str	r3, [r2, #40]	; 0x28
			}
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			//右か左の壁のセンサ値を見て、閾値を下回ったら、TotalPulseかKeepPulseを補正する
			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009e78:	68a0      	ldr	r0, [r4, #8]
 8009e7a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009e7e:	f7fe fa89 	bl	8008394 <__aeabi_i2d>
 8009e82:	a361      	add	r3, pc, #388	; (adr r3, 800a008 <GoStraight+0x260>)
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	4606      	mov	r6, r0
 8009e8a:	460f      	mov	r7, r1
 8009e8c:	4648      	mov	r0, r9
 8009e8e:	4651      	mov	r1, sl
 8009e90:	f7fe faea 	bl	8008468 <__aeabi_dmul>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	4630      	mov	r0, r6
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	f7fe f92e 	bl	80080fc <__adddf3>
 8009ea0:	4606      	mov	r6, r0
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	460f      	mov	r7, r1
 8009ea6:	f7fe fa75 	bl	8008394 <__aeabi_i2d>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	460b      	mov	r3, r1
 8009eae:	4630      	mov	r0, r6
 8009eb0:	4639      	mov	r1, r7
 8009eb2:	f7fe fd4b 	bl	800894c <__aeabi_dcmplt>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d0ac      	beq.n	8009e14 <GoStraight+0x6c>
 8009eba:	4b59      	ldr	r3, [pc, #356]	; (800a020 <GoStraight+0x278>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1a8      	bne.n	8009e14 <GoStraight+0x6c>
			{
				updateRealSearch(maze, mouse);
 8009ec2:	9803      	ldr	r0, [sp, #12]
 8009ec4:	9901      	ldr	r1, [sp, #4]
 8009ec6:	f002 fc77 	bl	800c7b8 <updateRealSearch>
				Calc = 1;
 8009eca:	4a55      	ldr	r2, [pc, #340]	; (800a020 <GoStraight+0x278>)
 8009ecc:	2301      	movs	r3, #1
 8009ece:	6013      	str	r3, [r2, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009ed0:	68a3      	ldr	r3, [r4, #8]
 8009ed2:	68aa      	ldr	r2, [r5, #8]
 8009ed4:	445b      	add	r3, fp
 8009ed6:	4293      	cmp	r3, r2
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009ed8:	4658      	mov	r0, fp
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009eda:	dca1      	bgt.n	8009e20 <GoStraight+0x78>
	//		}
		}
		Pid[A_VELO_PID].flag = 1;
		Pid[ctrl_mode].flag = 0;//壁見る
		wall_cut = false;
		Acceleration = 0;
 8009edc:	4b51      	ldr	r3, [pc, #324]	; (800a024 <GoStraight+0x27c>)
		Pid[ctrl_mode].flag = 0;//壁見る
 8009ede:	484d      	ldr	r0, [pc, #308]	; (800a014 <GoStraight+0x26c>)
		Acceleration = 0;
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	601a      	str	r2, [r3, #0]
//		ChangeLED(0);
		KeepPulse[BODY] += target_pulse;
 8009ee4:	68a3      	ldr	r3, [r4, #8]
		Pid[ctrl_mode].flag = 0;//壁見る
 8009ee6:	9a02      	ldr	r2, [sp, #8]
		KeepPulse[BODY] += target_pulse;
 8009ee8:	445b      	add	r3, fp
 8009eea:	60a3      	str	r3, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009eec:	ed94 7a00 	vldr	s14, [r4]
 8009ef0:	ee07 ba90 	vmov	s15, fp
 8009ef4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009efc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009f00:	eea7 7aa6 	vfma.f32	s14, s15, s13
		Pid[ctrl_mode].flag = 0;//壁見る
 8009f04:	232c      	movs	r3, #44	; 0x2c
 8009f06:	fb03 0302 	mla	r3, r3, r2, r0
		Pid[A_VELO_PID].flag = 1;
 8009f0a:	2101      	movs	r1, #1
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009f0c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		Pid[ctrl_mode].flag = 0;//壁見る
 8009f10:	2200      	movs	r2, #0
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009f12:	ed84 7a00 	vstr	s14, [r4]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 8009f16:	ed94 7a01 	vldr	s14, [r4, #4]
		Pid[A_VELO_PID].flag = 1;
 8009f1a:	6281      	str	r1, [r0, #40]	; 0x28
		KeepPulse[RIGHT] += target_pulse*0.5f;
 8009f1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		Pid[ctrl_mode].flag = 0;//壁見る
 8009f20:	629a      	str	r2, [r3, #40]	; 0x28
		KeepPulse[RIGHT] += target_pulse*0.5f;
 8009f22:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009f26:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8009f2a:	edc4 7a01 	vstr	s15, [r4, #4]

	}
}
 8009f2e:	b005      	add	sp, #20
 8009f30:	ecbd 8b02 	vpop	{d8}
 8009f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				Pid[A_VELO_PID].flag = 0;
 8009f38:	4a36      	ldr	r2, [pc, #216]	; (800a014 <GoStraight+0x26c>)
 8009f3a:	6290      	str	r0, [r2, #40]	; 0x28
				Pid[ctrl_mode].flag = 1;//壁見る
 8009f3c:	9a00      	ldr	r2, [sp, #0]
 8009f3e:	2301      	movs	r3, #1
 8009f40:	6293      	str	r3, [r2, #40]	; 0x28
 8009f42:	e799      	b.n	8009e78 <GoStraight+0xd0>
		VelocityMax = true;
 8009f44:	4c38      	ldr	r4, [pc, #224]	; (800a028 <GoStraight+0x280>)
		Accel( move_distance , explore_speed, maze, mouse);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009f46:	4611      	mov	r1, r2
		VelocityMax = true;
 8009f48:	7023      	strb	r3, [r4, #0]
}
 8009f4a:	b005      	add	sp, #20
 8009f4c:	ecbd 8b02 	vpop	{d8}
 8009f50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		Accel( move_distance , explore_speed, maze, mouse);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009f54:	f7ff bc00 	b.w	8009758 <Accel>
		VelocityMax = false;
 8009f58:	4b33      	ldr	r3, [pc, #204]	; (800a028 <GoStraight+0x280>)
 8009f5a:	4c2f      	ldr	r4, [pc, #188]	; (800a018 <GoStraight+0x270>)
 8009f5c:	4d2f      	ldr	r5, [pc, #188]	; (800a01c <GoStraight+0x274>)
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009f5e:	4f30      	ldr	r7, [pc, #192]	; (800a020 <GoStraight+0x278>)
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009f60:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
		VelocityMax = false;
 8009f64:	2100      	movs	r1, #0
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009f66:	ee27 0a00 	vmul.f32	s0, s14, s0
		VelocityMax = false;
 8009f6a:	7019      	strb	r1, [r3, #0]
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009f6c:	f7ff fca0 	bl	80098b0 <Decel>
 8009f70:	ee07 ba90 	vmov	s15, fp
 8009f74:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8009f78:	eeb5 8a00 	vmov.f32	s16, #80	; 0x3e800000  0.250
 8009f7c:	ee28 8a88 	vmul.f32	s16, s17, s16
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009f80:	e001      	b.n	8009f86 <GoStraight+0x1de>
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	b39b      	cbz	r3, 8009fee <GoStraight+0x246>
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009f86:	edd4 7a02 	vldr	s15, [r4, #8]
 8009f8a:	ed95 7a02 	vldr	s14, [r5, #8]
 8009f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009f96:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa2:	dcee      	bgt.n	8009f82 <GoStraight+0x1da>
		KeepPulse[BODY] += target_pulse*0.25f;
 8009fa4:	edd4 7a02 	vldr	s15, [r4, #8]
 8009fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		KeepPulse[LEFT] += target_pulse*0.125f;
 8009fac:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
		KeepPulse[BODY] += target_pulse*0.25f;
 8009fb0:	ee37 8a88 	vadd.f32	s16, s15, s16
 8009fb4:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8009fb8:	ed84 8a02 	vstr	s16, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.125f;
 8009fbc:	edd4 7a00 	vldr	s15, [r4]
 8009fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fc4:	eee8 7a87 	vfma.f32	s15, s17, s14
 8009fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fcc:	edc4 7a00 	vstr	s15, [r4]
		KeepPulse[RIGHT] += target_pulse*0.125f;
 8009fd0:	edd4 7a01 	vldr	s15, [r4, #4]
 8009fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fd8:	eee8 7a87 	vfma.f32	s15, s17, s14
 8009fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fe0:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8009fe4:	b005      	add	sp, #20
 8009fe6:	ecbd 8b02 	vpop	{d8}
 8009fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				updateRealSearch(maze, mouse);
 8009fee:	9901      	ldr	r1, [sp, #4]
 8009ff0:	9803      	ldr	r0, [sp, #12]
 8009ff2:	f002 fbe1 	bl	800c7b8 <updateRealSearch>
				Calc = 1;
 8009ff6:	603e      	str	r6, [r7, #0]
 8009ff8:	e7c5      	b.n	8009f86 <GoStraight+0x1de>
 8009ffa:	bf00      	nop
 8009ffc:	f3af 8000 	nop.w
 800a000:	9999999a 	.word	0x9999999a
 800a004:	3fd99999 	.word	0x3fd99999
 800a008:	9999999a 	.word	0x9999999a
 800a00c:	3fe99999 	.word	0x3fe99999
 800a010:	44f72a55 	.word	0x44f72a55
 800a014:	20005428 	.word	0x20005428
 800a018:	20005694 	.word	0x20005694
 800a01c:	20005660 	.word	0x20005660
 800a020:	200056dc 	.word	0x200056dc
 800a024:	20005094 	.word	0x20005094
 800a028:	200056b0 	.word	0x200056b0

0800a02c <TurnRight>:
void TurnRight(char mode, maze_node *maze, profile *mouse)
{
	//関数呼び出しと判定処理が多いと遅い。

	switch( mode )
 800a02c:	2853      	cmp	r0, #83	; 0x53
{
 800a02e:	b570      	push	{r4, r5, r6, lr}
 800a030:	460d      	mov	r5, r1
	switch( mode )
 800a032:	d02b      	beq.n	800a08c <TurnRight+0x60>
 800a034:	2854      	cmp	r0, #84	; 0x54
 800a036:	d128      	bne.n	800a08a <TurnRight+0x5e>
 800a038:	4614      	mov	r4, r2
	{
	case 'T' :

		Decel(45, 0);
 800a03a:	eddf 0a17 	vldr	s1, [pc, #92]	; 800a098 <TurnRight+0x6c>
 800a03e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800a09c <TurnRight+0x70>
		//AjustCenter();
		EmitterOFF();
//		Pid[Control_Mode].flag = 0;
//		PIDReset(Control_Mode);
//		Control_Mode = NOT_CTRL_PID;
		Pid[A_VELO_PID].flag = 0;
 800a042:	4e17      	ldr	r6, [pc, #92]	; (800a0a0 <TurnRight+0x74>)
		Decel(45, 0);
 800a044:	f7ff fc34 	bl	80098b0 <Decel>
		WaitStopAndReset();
 800a048:	f7fe ff3c 	bl	8008ec4 <WaitStopAndReset>
		EmitterOFF();
 800a04c:	f004 fc9c 	bl	800e988 <EmitterOFF>
		//二回目の減速ではマップが完全におかし
		//一回目のターン時の減速終了時は正しい
		//二回目のターン時の減速後までにマップが狂ってる

//		PIDChangeFlag(A_VELO_PID, 0);
		Rotate( 90 , 2*M_PI);//1.5
 800a050:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a0a4 <TurnRight+0x78>
 800a054:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a0a8 <TurnRight+0x7c>
		Pid[A_VELO_PID].flag = 0;
 800a058:	2300      	movs	r3, #0
 800a05a:	62b3      	str	r3, [r6, #40]	; 0x28
		Rotate( 90 , 2*M_PI);//1.5
 800a05c:	f7fe ff64 	bl	8008f28 <Rotate>
		mouse->now.car += 2;
 800a060:	7aa3      	ldrb	r3, [r4, #10]
 800a062:	3302      	adds	r3, #2
 800a064:	72a3      	strb	r3, [r4, #10]

//		ChangeLED(0);
		//RotateTest(90);

//		float acc = AjustCenter();
		EmitterON();
 800a066:	f004 fc81 	bl	800e96c <EmitterON>

//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		HAL_Delay(100);
 800a06a:	2064      	movs	r0, #100	; 0x64
 800a06c:	f004 ffac 	bl	800efc8 <HAL_Delay>
//														printProfile(&my_mouse);
//														printAllWeight(&my_map, &(my_mouse.goal_lesser));
//													}
//												}
//												cc ++;
		Accel(45, ExploreVelocity, maze, mouse);
 800a070:	4b0e      	ldr	r3, [pc, #56]	; (800a0ac <TurnRight+0x80>)
 800a072:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800a09c <TurnRight+0x70>
 800a076:	edd3 0a00 	vldr	s1, [r3]
		Pid[A_VELO_PID].flag = 1;
 800a07a:	2301      	movs	r3, #1
		Accel(45, ExploreVelocity, maze, mouse);
 800a07c:	4621      	mov	r1, r4
 800a07e:	4628      	mov	r0, r5
		Pid[A_VELO_PID].flag = 1;
 800a080:	62b3      	str	r3, [r6, #40]	; 0x28
	default :
		break;
	}


}
 800a082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		Accel(45, ExploreVelocity, maze, mouse);
 800a086:	f7ff bb67 	b.w	8009758 <Accel>
}
 800a08a:	bd70      	pop	{r4, r5, r6, pc}
		SlalomRight(maze, mouse);
 800a08c:	4628      	mov	r0, r5
 800a08e:	4611      	mov	r1, r2
}
 800a090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		SlalomRight(maze, mouse);
 800a094:	f7ff b89c 	b.w	80091d0 <SlalomRight>
 800a098:	00000000 	.word	0x00000000
 800a09c:	42340000 	.word	0x42340000
 800a0a0:	20005428 	.word	0x20005428
 800a0a4:	40c90fdb 	.word	0x40c90fdb
 800a0a8:	42b40000 	.word	0x42b40000
 800a0ac:	200056b4 	.word	0x200056b4

0800a0b0 <TurnLeft>:
void TurnLeft(char mode, maze_node *maze, profile *mouse)
{
	switch( mode )
 800a0b0:	2853      	cmp	r0, #83	; 0x53
{
 800a0b2:	b570      	push	{r4, r5, r6, lr}
 800a0b4:	460d      	mov	r5, r1
	switch( mode )
 800a0b6:	d02e      	beq.n	800a116 <TurnLeft+0x66>
 800a0b8:	2854      	cmp	r0, #84	; 0x54
 800a0ba:	d12b      	bne.n	800a114 <TurnLeft+0x64>
 800a0bc:	4614      	mov	r4, r2
	{
	case 'T' :
		//超信地旋回
		Decel(45, 0);
 800a0be:	eddf 0a19 	vldr	s1, [pc, #100]	; 800a124 <TurnLeft+0x74>
 800a0c2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a128 <TurnLeft+0x78>

		//AjustCenter();
		EmitterOFF();
//		PIDChangeFlag(A_VELO_PID, 0);
//		Control_Mode = NOT_CTRL_PID;
		Pid[A_VELO_PID].flag = 0;
 800a0c6:	4e19      	ldr	r6, [pc, #100]	; (800a12c <TurnLeft+0x7c>)
		Decel(45, 0);
 800a0c8:	f7ff fbf2 	bl	80098b0 <Decel>
		WaitStopAndReset();
 800a0cc:	f7fe fefa 	bl	8008ec4 <WaitStopAndReset>
		EmitterOFF();
 800a0d0:	f004 fc5a 	bl	800e988 <EmitterOFF>
		Rotate( 90 , -2*M_PI);//-1.5
 800a0d4:	eddf 0a16 	vldr	s1, [pc, #88]	; 800a130 <TurnLeft+0x80>
 800a0d8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800a134 <TurnLeft+0x84>
		Pid[A_VELO_PID].flag = 0;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	62b3      	str	r3, [r6, #40]	; 0x28
		Rotate( 90 , -2*M_PI);//-1.5
 800a0e0:	f7fe ff22 	bl	8008f28 <Rotate>
		mouse->now.car -= 2;
 800a0e4:	7aa3      	ldrb	r3, [r4, #10]
 800a0e6:	3b02      	subs	r3, #2
 800a0e8:	72a3      	strb	r3, [r4, #10]
		//RotateTest(-90);
//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		EmitterON();
 800a0ea:	f004 fc3f 	bl	800e96c <EmitterON>
		HAL_Delay(100);
 800a0ee:	2064      	movs	r0, #100	; 0x64
 800a0f0:	f004 ff6a 	bl	800efc8 <HAL_Delay>
//		float acc = AjustCenter();
		HAL_Delay(100);
 800a0f4:	2064      	movs	r0, #100	; 0x64
 800a0f6:	f004 ff67 	bl	800efc8 <HAL_Delay>
//		Control_Mode = A_VELO_PID;
		Pid[A_VELO_PID].flag = 1;
//		PIDChangeFlag( A_VELO_PID , 1);
		Accel(45, ExploreVelocity, maze, mouse);
 800a0fa:	4b0f      	ldr	r3, [pc, #60]	; (800a138 <TurnLeft+0x88>)
 800a0fc:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800a128 <TurnLeft+0x78>
 800a100:	edd3 0a00 	vldr	s1, [r3]
		Pid[A_VELO_PID].flag = 1;
 800a104:	2301      	movs	r3, #1
		Accel(45, ExploreVelocity, maze, mouse);
 800a106:	4621      	mov	r1, r4
 800a108:	4628      	mov	r0, r5
		Pid[A_VELO_PID].flag = 1;
 800a10a:	62b3      	str	r3, [r6, #40]	; 0x28
		break;
	default :
		break;
	}

}
 800a10c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		Accel(45, ExploreVelocity, maze, mouse);
 800a110:	f7ff bb22 	b.w	8009758 <Accel>
}
 800a114:	bd70      	pop	{r4, r5, r6, pc}
		SlalomLeft(maze, mouse);
 800a116:	4628      	mov	r0, r5
 800a118:	4611      	mov	r1, r2
}
 800a11a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		SlalomLeft(maze, mouse);
 800a11e:	f7ff b9bb 	b.w	8009498 <SlalomLeft>
 800a122:	bf00      	nop
 800a124:	00000000 	.word	0x00000000
 800a128:	42340000 	.word	0x42340000
 800a12c:	20005428 	.word	0x20005428
 800a130:	c0c90fdb 	.word	0xc0c90fdb
 800a134:	42b40000 	.word	0x42b40000
 800a138:	200056b4 	.word	0x200056b4

0800a13c <GoBack>:
void GoBack(maze_node *maze, profile *mouse)
{
 800a13c:	b538      	push	{r3, r4, r5, lr}
	//減速して
	Decel(45, 0);
 800a13e:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800a27c <GoBack+0x140>
 800a142:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800a280 <GoBack+0x144>
{
 800a146:	460c      	mov	r4, r1
 800a148:	ed2d 8b02 	vpush	{d8}
 800a14c:	4605      	mov	r5, r0
	Decel(45, 0);
 800a14e:	f7ff fbaf 	bl	80098b0 <Decel>
	float acc = AjustCenter(mouse);
 800a152:	4620      	mov	r0, r4
 800a154:	f7ff fcda 	bl	8009b0c <AjustCenter>
	WaitStopAndReset();
 800a158:	f7fe feb4 	bl	8008ec4 <WaitStopAndReset>
//	ChangeLED(5);
#if 1
//	Control_Mode = NOT_CTRL_PID;
	int wall_comp = GetWallCompensateDir(mouse);
 800a15c:	4620      	mov	r0, r4
 800a15e:	f7ff fde1 	bl	8009d24 <GetWallCompensateDir>
		//右か左かそれ以外か
		if(wall_comp == L_WALL_PID)
 800a162:	2802      	cmp	r0, #2
 800a164:	d039      	beq.n	800a1da <GoBack+0x9e>
//			Pos.Dir = left;
			Rotate(90, -2*M_PI);
			mouse->now.car = (mouse->now.car - 2) %8;
//			Pos.Dir = back;
		}
		else if(wall_comp == R_WALL_PID)
 800a166:	2803      	cmp	r0, #3
 800a168:	d05d      	beq.n	800a226 <GoBack+0xea>
//			Pos.Dir = right;
			Rotate(90, 2*M_PI);
			mouse->now.car = (mouse->now.car + 2) %8;
//			Pos.Dir = back;
		}
		else if(wall_comp == N_WALL_PID)
 800a16a:	2806      	cmp	r0, #6
 800a16c:	d077      	beq.n	800a25e <GoBack+0x122>
	Pos.Dir = back;

#endif


	acc = AjustCenter(mouse);
 800a16e:	4620      	mov	r0, r4
 800a170:	f7ff fccc 	bl	8009b0c <AjustCenter>
 800a174:	eeb0 8a40 	vmov.f32	s16, s0

	WaitStopAndReset();
 800a178:	f7fe fea4 	bl	8008ec4 <WaitStopAndReset>
	//マップの不要マスをつぶす
	FindUnwantedSquares(maze);
 800a17c:	4628      	mov	r0, r5
 800a17e:	f002 fabd 	bl	800c6fc <FindUnwantedSquares>
	Accel(acc, ExploreVelocity, maze, mouse);
 800a182:	4b40      	ldr	r3, [pc, #256]	; (800a284 <GoBack+0x148>)
 800a184:	eeb0 0a48 	vmov.f32	s0, s16
 800a188:	edd3 0a00 	vldr	s1, [r3]
 800a18c:	4628      	mov	r0, r5
 800a18e:	4621      	mov	r1, r4
 800a190:	f7ff fae2 	bl	8009758 <Accel>
	//方角に合わせてxyどちらかに±1
	switch(mouse->now.car%8)
 800a194:	7aa3      	ldrb	r3, [r4, #10]
 800a196:	f003 0307 	and.w	r3, r3, #7
 800a19a:	2b06      	cmp	r3, #6
 800a19c:	d808      	bhi.n	800a1b0 <GoBack+0x74>
 800a19e:	e8df f003 	tbb	[pc, r3]
 800a1a2:	0716      	.short	0x0716
 800a1a4:	070a0710 	.word	0x070a0710
 800a1a8:	04          	.byte	0x04
 800a1a9:	00          	.byte	0x00
		break;
	case south:
		mouse->now.pos.y --;
		break;
	case west:
		mouse->now.pos.x --;
 800a1aa:	7a23      	ldrb	r3, [r4, #8]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	7223      	strb	r3, [r4, #8]
		break;
	default:
		break;
	}

}
 800a1b0:	ecbd 8b02 	vpop	{d8}
 800a1b4:	bd38      	pop	{r3, r4, r5, pc}
		mouse->now.pos.y --;
 800a1b6:	7a63      	ldrb	r3, [r4, #9]
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	7263      	strb	r3, [r4, #9]
}
 800a1bc:	ecbd 8b02 	vpop	{d8}
 800a1c0:	bd38      	pop	{r3, r4, r5, pc}
		mouse->now.pos.x ++;
 800a1c2:	7a23      	ldrb	r3, [r4, #8]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	7223      	strb	r3, [r4, #8]
}
 800a1c8:	ecbd 8b02 	vpop	{d8}
 800a1cc:	bd38      	pop	{r3, r4, r5, pc}
		mouse->now.pos.y ++;
 800a1ce:	7a63      	ldrb	r3, [r4, #9]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	7263      	strb	r3, [r4, #9]
}
 800a1d4:	ecbd 8b02 	vpop	{d8}
 800a1d8:	bd38      	pop	{r3, r4, r5, pc}
			Rotate(90, -2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800a1da:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800a288 <GoBack+0x14c>
 800a1de:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800a28c <GoBack+0x150>
 800a1e2:	f7fe fea1 	bl	8008f28 <Rotate>
			mouse->now.car = (mouse->now.car - 2) %8;
 800a1e6:	7aa3      	ldrb	r3, [r4, #10]
 800a1e8:	3b02      	subs	r3, #2
 800a1ea:	425a      	negs	r2, r3
 800a1ec:	f002 0207 	and.w	r2, r2, #7
 800a1f0:	f003 0307 	and.w	r3, r3, #7
 800a1f4:	bf58      	it	pl
 800a1f6:	4253      	negpl	r3, r2
 800a1f8:	72a3      	strb	r3, [r4, #10]
			acc = AjustCenter(mouse);
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f7ff fc86 	bl	8009b0c <AjustCenter>
			WaitStopAndReset();
 800a200:	f7fe fe60 	bl	8008ec4 <WaitStopAndReset>
			Rotate(90, -2*M_PI);
 800a204:	eddf 0a20 	vldr	s1, [pc, #128]	; 800a288 <GoBack+0x14c>
 800a208:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800a28c <GoBack+0x150>
 800a20c:	f7fe fe8c 	bl	8008f28 <Rotate>
			mouse->now.car = (mouse->now.car - 2) %8;
 800a210:	7aa3      	ldrb	r3, [r4, #10]
 800a212:	3b02      	subs	r3, #2
 800a214:	425a      	negs	r2, r3
 800a216:	f002 0207 	and.w	r2, r2, #7
 800a21a:	f003 0307 	and.w	r3, r3, #7
 800a21e:	bf58      	it	pl
 800a220:	4253      	negpl	r3, r2
 800a222:	72a3      	strb	r3, [r4, #10]
 800a224:	e7a3      	b.n	800a16e <GoBack+0x32>
			Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800a226:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800a290 <GoBack+0x154>
 800a22a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a28c <GoBack+0x150>
 800a22e:	f7fe fe7b 	bl	8008f28 <Rotate>
			mouse->now.car = (mouse->now.car + 2) %8;
 800a232:	7aa3      	ldrb	r3, [r4, #10]
 800a234:	3302      	adds	r3, #2
 800a236:	f003 0307 	and.w	r3, r3, #7
 800a23a:	72a3      	strb	r3, [r4, #10]
			acc = AjustCenter(mouse);
 800a23c:	4620      	mov	r0, r4
 800a23e:	f7ff fc65 	bl	8009b0c <AjustCenter>
			WaitStopAndReset();
 800a242:	f7fe fe3f 	bl	8008ec4 <WaitStopAndReset>
			Rotate(90, 2*M_PI);
 800a246:	eddf 0a12 	vldr	s1, [pc, #72]	; 800a290 <GoBack+0x154>
 800a24a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a28c <GoBack+0x150>
 800a24e:	f7fe fe6b 	bl	8008f28 <Rotate>
			mouse->now.car = (mouse->now.car + 2) %8;
 800a252:	7aa3      	ldrb	r3, [r4, #10]
 800a254:	3302      	adds	r3, #2
 800a256:	f003 0307 	and.w	r3, r3, #7
 800a25a:	72a3      	strb	r3, [r4, #10]
 800a25c:	e787      	b.n	800a16e <GoBack+0x32>
			Rotate(180, 2*M_PI);
 800a25e:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800a290 <GoBack+0x154>
 800a262:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a294 <GoBack+0x158>
 800a266:	f7fe fe5f 	bl	8008f28 <Rotate>
			mouse->now.car = (mouse->now.car + 2) %8;
 800a26a:	7aa3      	ldrb	r3, [r4, #10]
 800a26c:	3302      	adds	r3, #2
 800a26e:	f003 0307 	and.w	r3, r3, #7
 800a272:	72a3      	strb	r3, [r4, #10]
			WaitStopAndReset();
 800a274:	f7fe fe26 	bl	8008ec4 <WaitStopAndReset>
 800a278:	e779      	b.n	800a16e <GoBack+0x32>
 800a27a:	bf00      	nop
 800a27c:	00000000 	.word	0x00000000
 800a280:	42340000 	.word	0x42340000
 800a284:	200056b4 	.word	0x200056b4
 800a288:	c0c90fdb 	.word	0xc0c90fdb
 800a28c:	42b40000 	.word	0x42b40000
 800a290:	40c90fdb 	.word	0x40c90fdb
 800a294:	43340000 	.word	0x43340000

0800a298 <HAL_TIM_PeriodElapsedCallback>:


}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if( htim == &htim1)
 800a29c:	4bce      	ldr	r3, [pc, #824]	; (800a5d8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800a29e:	4298      	cmp	r0, r3
{
 800a2a0:	ed2d 8b02 	vpush	{d8}
 800a2a4:	4604      	mov	r4, r0
	if( htim == &htim1)
 800a2a6:	d007      	beq.n	800a2b8 <HAL_TIM_PeriodElapsedCallback+0x20>
		default :
			break;
		}
	}

	if( htim == &htim8)
 800a2a8:	4bcc      	ldr	r3, [pc, #816]	; (800a5dc <HAL_TIM_PeriodElapsedCallback+0x344>)
 800a2aa:	429c      	cmp	r4, r3
 800a2ac:	f000 80e9 	beq.w	800a482 <HAL_TIM_PeriodElapsedCallback+0x1ea>
		Photo[FL] = GetWallDataAverage(20, adc1[0], FL);	//adc1_IN10
		Photo[SR] = GetWallDataAverage(20, adc1[1], SR);	//adc1_IN14
		Photo[SL] = GetWallDataAverage(20, adc2[0], SL);	//adc2_IN11
		Photo[FR] = GetWallDataAverage(20, adc2[1], FR);	//adc2_IN15
	}
}
 800a2b0:	ecbd 8b02 	vpop	{d8}
 800a2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		switch(IT_mode){
 800a2b8:	4bc9      	ldr	r3, [pc, #804]	; (800a5e0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b06      	cmp	r3, #6
 800a2be:	f000 8103 	beq.w	800a4c8 <HAL_TIM_PeriodElapsedCallback+0x230>
 800a2c2:	2b07      	cmp	r3, #7
 800a2c4:	d00c      	beq.n	800a2e0 <HAL_TIM_PeriodElapsedCallback+0x48>
 800a2c6:	2b05      	cmp	r3, #5
 800a2c8:	d1ee      	bne.n	800a2a8 <HAL_TIM_PeriodElapsedCallback+0x10>
			if(timer1 < 5000)
 800a2ca:	4dc6      	ldr	r5, [pc, #792]	; (800a5e4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800a2cc:	682a      	ldr	r2, [r5, #0]
 800a2ce:	f241 3387 	movw	r3, #4999	; 0x1387
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	f340 81e8 	ble.w	800a6a8 <HAL_TIM_PeriodElapsedCallback+0x410>
			else t = 0;
 800a2d8:	4bc3      	ldr	r3, [pc, #780]	; (800a5e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	e7e3      	b.n	800a2a8 <HAL_TIM_PeriodElapsedCallback+0x10>
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a2e0:	f8df e358 	ldr.w	lr, [pc, #856]	; 800a63c <HAL_TIM_PeriodElapsedCallback+0x3a4>
 800a2e4:	49c1      	ldr	r1, [pc, #772]	; (800a5ec <HAL_TIM_PeriodElapsedCallback+0x354>)
 800a2e6:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a2ea:	48c1      	ldr	r0, [pc, #772]	; (800a5f0 <HAL_TIM_PeriodElapsedCallback+0x358>)
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a2ec:	eddf 6ac1 	vldr	s13, [pc, #772]	; 800a5f4 <HAL_TIM_PeriodElapsedCallback+0x35c>
 800a2f0:	4ec1      	ldr	r6, [pc, #772]	; (800a5f8 <HAL_TIM_PeriodElapsedCallback+0x360>)
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a2f2:	f8df c350 	ldr.w	ip, [pc, #848]	; 800a644 <HAL_TIM_PeriodElapsedCallback+0x3ac>
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a2f6:	4fc1      	ldr	r7, [pc, #772]	; (800a5fc <HAL_TIM_PeriodElapsedCallback+0x364>)
	TargetVelocity[BODY] += Acceleration;
 800a2f8:	4dc1      	ldr	r5, [pc, #772]	; (800a600 <HAL_TIM_PeriodElapsedCallback+0x368>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a2fa:	f247 532f 	movw	r3, #29999	; 0x752f
 800a2fe:	1a9a      	subs	r2, r3, r2
 800a300:	600a      	str	r2, [r1, #0]
	TIM3->CNT = INITIAL_PULSE;
 800a302:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a306:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 800a30a:	6243      	str	r3, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a30c:	eba3 030e 	sub.w	r3, r3, lr
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a310:	ee07 3a90 	vmov	s15, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a314:	ee07 2a10 	vmov	s14, r2
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a31c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a320:	ee67 7aa6 	vmul.f32	s15, s15, s13
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a324:	ee27 7a26 	vmul.f32	s14, s14, s13
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a328:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a32c:	ed86 7a00 	vstr	s14, [r6]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a330:	edc6 7a01 	vstr	s15, [r6, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a334:	edd6 7a00 	vldr	s15, [r6]
 800a338:	ed96 7a01 	vldr	s14, [r6, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a33c:	604b      	str	r3, [r1, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a33e:	ee77 7a87 	vadd.f32	s15, s15, s14
	ZGyro = ReadIMU(0x37, 0x38);
 800a342:	2138      	movs	r1, #56	; 0x38
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a344:	ee67 7aa8 	vmul.f32	s15, s15, s17
	ZGyro = ReadIMU(0x37, 0x38);
 800a348:	2037      	movs	r0, #55	; 0x37
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a34a:	edc6 7a02 	vstr	s15, [r6, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a34e:	f8dc e000 	ldr.w	lr, [ip]
 800a352:	4472      	add	r2, lr
 800a354:	f8cc 2000 	str.w	r2, [ip]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a358:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800a35c:	4413      	add	r3, r2
 800a35e:	f8cc 3004 	str.w	r3, [ip, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a362:	f8dc 3000 	ldr.w	r3, [ip]
 800a366:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800a36a:	4413      	add	r3, r2
 800a36c:	f8cc 3008 	str.w	r3, [ip, #8]
	ZGyro = ReadIMU(0x37, 0x38);
 800a370:	f004 f988 	bl	800e684 <ReadIMU>
 800a374:	4ba3      	ldr	r3, [pc, #652]	; (800a604 <HAL_TIM_PeriodElapsedCallback+0x36c>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a376:	4aa4      	ldr	r2, [pc, #656]	; (800a608 <HAL_TIM_PeriodElapsedCallback+0x370>)
	ZGyro = ReadIMU(0x37, 0x38);
 800a378:	ed83 0a00 	vstr	s0, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a37c:	ed93 8a00 	vldr	s16, [r3]
 800a380:	ed92 7a00 	vldr	s14, [r2]
 800a384:	4ba1      	ldr	r3, [pc, #644]	; (800a60c <HAL_TIM_PeriodElapsedCallback+0x374>)
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a386:	6838      	ldr	r0, [r7, #0]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a388:	edd3 7a00 	vldr	s15, [r3]
 800a38c:	ee38 8a47 	vsub.f32	s16, s16, s14
 800a390:	ee28 8a27 	vmul.f32	s16, s16, s15
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a394:	f7fe f810 	bl	80083b8 <__aeabi_f2d>
 800a398:	a38b      	add	r3, pc, #556	; (adr r3, 800a5c8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39e:	f7fe f863 	bl	8008468 <__aeabi_dmul>
 800a3a2:	4680      	mov	r8, r0
 800a3a4:	ee18 0a10 	vmov	r0, s16
 800a3a8:	4689      	mov	r9, r1
 800a3aa:	f7fe f805 	bl	80083b8 <__aeabi_f2d>
 800a3ae:	a388      	add	r3, pc, #544	; (adr r3, 800a5d0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f7fe f858 	bl	8008468 <__aeabi_dmul>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4640      	mov	r0, r8
 800a3be:	4649      	mov	r1, r9
 800a3c0:	f7fd fe9c 	bl	80080fc <__adddf3>
 800a3c4:	f7fe fb48 	bl	8008a58 <__aeabi_d2f>
 800a3c8:	4b91      	ldr	r3, [pc, #580]	; (800a610 <HAL_TIM_PeriodElapsedCallback+0x378>)
	Angle += AngularV * T1;
 800a3ca:	4992      	ldr	r1, [pc, #584]	; (800a614 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800a3cc:	eddf 7a92 	vldr	s15, [pc, #584]	; 800a618 <HAL_TIM_PeriodElapsedCallback+0x380>
	AngularAcceleration += AngularLeapsity;
 800a3d0:	4a92      	ldr	r2, [pc, #584]	; (800a61c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800a3d2:	f8df c27c 	ldr.w	ip, [pc, #636]	; 800a650 <HAL_TIM_PeriodElapsedCallback+0x3b8>
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a3d6:	eddf 6a92 	vldr	s13, [pc, #584]	; 800a620 <HAL_TIM_PeriodElapsedCallback+0x388>
	AngularAcceleration += AngularLeapsity;
 800a3da:	ed9c 6a00 	vldr	s12, [ip]
	TargetVelocity[BODY] += Acceleration;
 800a3de:	f8df c26c 	ldr.w	ip, [pc, #620]	; 800a64c <HAL_TIM_PeriodElapsedCallback+0x3b4>
    zg_last = zg_law;
 800a3e2:	ed87 8a00 	vstr	s16, [r7]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a3e6:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800a3ea:	6018      	str	r0, [r3, #0]
	Angle += AngularV * T1;
 800a3ec:	edd3 5a00 	vldr	s11, [r3]
 800a3f0:	ed91 7a00 	vldr	s14, [r1]
	TargetAngularV += AngularAcceleration;
 800a3f4:	4b8b      	ldr	r3, [pc, #556]	; (800a624 <HAL_TIM_PeriodElapsedCallback+0x38c>)
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a3f6:	4f8c      	ldr	r7, [pc, #560]	; (800a628 <HAL_TIM_PeriodElapsedCallback+0x390>)
	Angle += AngularV * T1;
 800a3f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a3fc:	2004      	movs	r0, #4
	Angle += AngularV * T1;
 800a3fe:	ed81 7a00 	vstr	s14, [r1]
	AngularAcceleration += AngularLeapsity;
 800a402:	edd2 7a00 	vldr	s15, [r2]
 800a406:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a40a:	edc2 7a00 	vstr	s15, [r2]
	TargetVelocity[BODY] += Acceleration;
 800a40e:	eddc 7a00 	vldr	s15, [ip]
 800a412:	ed95 7a02 	vldr	s14, [r5, #8]
 800a416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a41a:	edc5 7a02 	vstr	s15, [r5, #8]
	TargetAngularV += AngularAcceleration;
 800a41e:	edd2 7a00 	vldr	s15, [r2]
 800a422:	ed93 7a00 	vldr	s14, [r3]
 800a426:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a42a:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a42e:	edd5 7a02 	vldr	s15, [r5, #8]
 800a432:	ed93 7a00 	vldr	s14, [r3]
 800a436:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800a43a:	eee7 7a28 	vfma.f32	s15, s14, s17
 800a43e:	edc5 7a01 	vstr	s15, [r5, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a442:	ed93 7a00 	vldr	s14, [r3]
 800a446:	edd5 7a01 	vldr	s15, [r5, #4]
 800a44a:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a44e:	edc5 7a00 	vstr	s15, [r5]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a452:	ed95 0a00 	vldr	s0, [r5]
 800a456:	edd6 0a00 	vldr	s1, [r6]
 800a45a:	f004 fc15 	bl	800ec88 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a45e:	ed95 0a01 	vldr	s0, [r5, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a462:	6038      	str	r0, [r7, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a464:	edd6 0a01 	vldr	s1, [r6, #4]
 800a468:	2005      	movs	r0, #5
 800a46a:	f004 fc0d 	bl	800ec88 <PIDControl>
 800a46e:	4b6f      	ldr	r3, [pc, #444]	; (800a62c <HAL_TIM_PeriodElapsedCallback+0x394>)
 800a470:	4601      	mov	r1, r0
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a472:	6838      	ldr	r0, [r7, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a474:	6019      	str	r1, [r3, #0]
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a476:	f004 fb07 	bl	800ea88 <Motor_Switch>
	if( htim == &htim8)
 800a47a:	4b58      	ldr	r3, [pc, #352]	; (800a5dc <HAL_TIM_PeriodElapsedCallback+0x344>)
 800a47c:	429c      	cmp	r4, r3
 800a47e:	f47f af17 	bne.w	800a2b0 <HAL_TIM_PeriodElapsedCallback+0x18>
		Photo[FL] = GetWallDataAverage(20, adc1[0], FL);	//adc1_IN10
 800a482:	4e6b      	ldr	r6, [pc, #428]	; (800a630 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800a484:	4c6b      	ldr	r4, [pc, #428]	; (800a634 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800a486:	6831      	ldr	r1, [r6, #0]
		Photo[SL] = GetWallDataAverage(20, adc2[0], SL);	//adc2_IN11
 800a488:	4d6b      	ldr	r5, [pc, #428]	; (800a638 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
		Photo[FL] = GetWallDataAverage(20, adc1[0], FL);	//adc1_IN10
 800a48a:	2200      	movs	r2, #0
 800a48c:	2014      	movs	r0, #20
 800a48e:	f004 fb57 	bl	800eb40 <GetWallDataAverage>
		Photo[SR] = GetWallDataAverage(20, adc1[1], SR);	//adc1_IN14
 800a492:	6871      	ldr	r1, [r6, #4]
		Photo[FL] = GetWallDataAverage(20, adc1[0], FL);	//adc1_IN10
 800a494:	ed84 0a00 	vstr	s0, [r4]
		Photo[SR] = GetWallDataAverage(20, adc1[1], SR);	//adc1_IN14
 800a498:	2201      	movs	r2, #1
 800a49a:	2014      	movs	r0, #20
 800a49c:	f004 fb50 	bl	800eb40 <GetWallDataAverage>
		Photo[SL] = GetWallDataAverage(20, adc2[0], SL);	//adc2_IN11
 800a4a0:	6829      	ldr	r1, [r5, #0]
		Photo[SR] = GetWallDataAverage(20, adc1[1], SR);	//adc1_IN14
 800a4a2:	ed84 0a01 	vstr	s0, [r4, #4]
		Photo[SL] = GetWallDataAverage(20, adc2[0], SL);	//adc2_IN11
 800a4a6:	2202      	movs	r2, #2
 800a4a8:	2014      	movs	r0, #20
 800a4aa:	f004 fb49 	bl	800eb40 <GetWallDataAverage>
		Photo[FR] = GetWallDataAverage(20, adc2[1], FR);	//adc2_IN15
 800a4ae:	6869      	ldr	r1, [r5, #4]
		Photo[SL] = GetWallDataAverage(20, adc2[0], SL);	//adc2_IN11
 800a4b0:	ed84 0a02 	vstr	s0, [r4, #8]
		Photo[FR] = GetWallDataAverage(20, adc2[1], FR);	//adc2_IN15
 800a4b4:	2203      	movs	r2, #3
 800a4b6:	2014      	movs	r0, #20
 800a4b8:	f004 fb42 	bl	800eb40 <GetWallDataAverage>
}
 800a4bc:	ecbd 8b02 	vpop	{d8}
		Photo[FR] = GetWallDataAverage(20, adc2[1], FR);	//adc2_IN15
 800a4c0:	ed84 0a03 	vstr	s0, [r4, #12]
}
 800a4c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a4c8:	4d5c      	ldr	r5, [pc, #368]	; (800a63c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800a4ca:	4b48      	ldr	r3, [pc, #288]	; (800a5ec <HAL_TIM_PeriodElapsedCallback+0x354>)
 800a4cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a4ce:	4848      	ldr	r0, [pc, #288]	; (800a5f0 <HAL_TIM_PeriodElapsedCallback+0x358>)
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a4d0:	eddf 7a48 	vldr	s15, [pc, #288]	; 800a5f4 <HAL_TIM_PeriodElapsedCallback+0x35c>
 800a4d4:	4e48      	ldr	r6, [pc, #288]	; (800a5f8 <HAL_TIM_PeriodElapsedCallback+0x360>)
	if((1 <= dbc) && (dbc <= 2000))
 800a4d6:	4f5a      	ldr	r7, [pc, #360]	; (800a640 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a4d8:	f247 522f 	movw	r2, #29999	; 0x752f
 800a4dc:	1a51      	subs	r1, r2, r1
 800a4de:	6019      	str	r1, [r3, #0]
	TIM3->CNT = INITIAL_PULSE;
 800a4e0:	626a      	str	r2, [r5, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a4e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 800a4e4:	6242      	str	r2, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a4e6:	1b52      	subs	r2, r2, r5
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a4e8:	ee07 2a10 	vmov	s14, r2
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a4ec:	ee06 1a90 	vmov	s13, r1
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a4f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a4f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a4f8:	ee27 7a27 	vmul.f32	s14, s14, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a4fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
	if((1 <= dbc) && (dbc <= 2000))
 800a500:	6838      	ldr	r0, [r7, #0]
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a502:	edc6 6a00 	vstr	s13, [r6]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a506:	ed86 7a01 	vstr	s14, [r6, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a50a:	edd6 7a00 	vldr	s15, [r6]
 800a50e:	ed96 7a01 	vldr	s14, [r6, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a512:	605a      	str	r2, [r3, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a514:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a518:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	if((1 <= dbc) && (dbc <= 2000))
 800a51c:	1e43      	subs	r3, r0, #1
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a51e:	ee67 7a86 	vmul.f32	s15, s15, s12
	if((1 <= dbc) && (dbc <= 2000))
 800a522:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a526:	edc6 7a02 	vstr	s15, [r6, #8]
	if((1 <= dbc) && (dbc <= 2000))
 800a52a:	f0c0 8093 	bcc.w	800a654 <HAL_TIM_PeriodElapsedCallback+0x3bc>
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a52e:	4b45      	ldr	r3, [pc, #276]	; (800a644 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a530:	4f38      	ldr	r7, [pc, #224]	; (800a614 <HAL_TIM_PeriodElapsedCallback+0x37c>)
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a532:	6818      	ldr	r0, [r3, #0]
 800a534:	4401      	add	r1, r0
 800a536:	6019      	str	r1, [r3, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a538:	6859      	ldr	r1, [r3, #4]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a53a:	4835      	ldr	r0, [pc, #212]	; (800a610 <HAL_TIM_PeriodElapsedCallback+0x378>)
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a53c:	440a      	add	r2, r1
 800a53e:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	6859      	ldr	r1, [r3, #4]
 800a544:	440a      	add	r2, r1
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a546:	4639      	mov	r1, r7
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a548:	609a      	str	r2, [r3, #8]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a54a:	f004 f909 	bl	800e760 <Update_IMU>
				if( Pid[A_VELO_PID].flag == 1 )
 800a54e:	4b3e      	ldr	r3, [pc, #248]	; (800a648 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800a550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a552:	2a01      	cmp	r2, #1
 800a554:	f000 80b2 	beq.w	800a6bc <HAL_TIM_PeriodElapsedCallback+0x424>
				else if( Pid[D_WALL_PID].flag == 1 )
 800a558:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a55a:	2801      	cmp	r0, #1
 800a55c:	f000 80bf 	beq.w	800a6de <HAL_TIM_PeriodElapsedCallback+0x446>
				else if( Pid[L_WALL_PID].flag == 1 )
 800a560:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a564:	2a01      	cmp	r2, #1
 800a566:	f000 8083 	beq.w	800a670 <HAL_TIM_PeriodElapsedCallback+0x3d8>
				else if( Pid[R_WALL_PID].flag == 1 )
 800a56a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a56e:	2a01      	cmp	r2, #1
 800a570:	f000 80e0 	beq.w	800a734 <HAL_TIM_PeriodElapsedCallback+0x49c>
				else if( Pid[F_WALL_PID].flag == 1)
 800a574:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a578:	2b01      	cmp	r3, #1
 800a57a:	f000 80bc 	beq.w	800a6f6 <HAL_TIM_PeriodElapsedCallback+0x45e>
 800a57e:	4b29      	ldr	r3, [pc, #164]	; (800a624 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800a580:	4d1f      	ldr	r5, [pc, #124]	; (800a600 <HAL_TIM_PeriodElapsedCallback+0x368>)
	TargetVelocity[BODY] += Acceleration;
 800a582:	4a32      	ldr	r2, [pc, #200]	; (800a64c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a584:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a620 <HAL_TIM_PeriodElapsedCallback+0x388>
	TargetVelocity[BODY] += Acceleration;
 800a588:	edd2 7a00 	vldr	s15, [r2]
 800a58c:	ed95 7a02 	vldr	s14, [r5, #8]
	TargetAngularV += AngularAcceleration;
 800a590:	4a22      	ldr	r2, [pc, #136]	; (800a61c <HAL_TIM_PeriodElapsedCallback+0x384>)
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a592:	4f25      	ldr	r7, [pc, #148]	; (800a628 <HAL_TIM_PeriodElapsedCallback+0x390>)
	TargetVelocity[BODY] += Acceleration;
 800a594:	ee77 7a87 	vadd.f32	s15, s15, s14
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a598:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	TargetVelocity[BODY] += Acceleration;
 800a59c:	edc5 7a02 	vstr	s15, [r5, #8]
	TargetAngularV += AngularAcceleration;
 800a5a0:	edd2 7a00 	vldr	s15, [r2]
 800a5a4:	ed93 7a00 	vldr	s14, [r3]
 800a5a8:	ee77 7a87 	vadd.f32	s15, s15, s14
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a5ac:	2004      	movs	r0, #4
	TargetAngularV += AngularAcceleration;
 800a5ae:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a5b2:	edd5 7a02 	vldr	s15, [r5, #8]
 800a5b6:	ed93 7a00 	vldr	s14, [r3]
 800a5ba:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800a5be:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a5c2:	e73c      	b.n	800a43e <HAL_TIM_PeriodElapsedCallback+0x1a6>
 800a5c4:	f3af 8000 	nop.w
 800a5c8:	7ae147ae 	.word	0x7ae147ae
 800a5cc:	3fefae14 	.word	0x3fefae14
 800a5d0:	47ae147b 	.word	0x47ae147b
 800a5d4:	3f847ae1 	.word	0x3f847ae1
 800a5d8:	20006ce0 	.word	0x20006ce0
 800a5dc:	20006a98 	.word	0x20006a98
 800a5e0:	2000561c 	.word	0x2000561c
 800a5e4:	20005624 	.word	0x20005624
 800a5e8:	20005618 	.word	0x20005618
 800a5ec:	200056e0 	.word	0x200056e0
 800a5f0:	40000800 	.word	0x40000800
 800a5f4:	3f8177cd 	.word	0x3f8177cd
 800a5f8:	2000566c 	.word	0x2000566c
 800a5fc:	20004088 	.word	0x20004088
 800a600:	20005630 	.word	0x20005630
 800a604:	200053d8 	.word	0x200053d8
 800a608:	200053e4 	.word	0x200053e4
 800a60c:	08016634 	.word	0x08016634
 800a610:	200050a4 	.word	0x200050a4
 800a614:	20005098 	.word	0x20005098
 800a618:	3a83126f 	.word	0x3a83126f
 800a61c:	2000509c 	.word	0x2000509c
 800a620:	4209999a 	.word	0x4209999a
 800a624:	20005640 	.word	0x20005640
 800a628:	200056b8 	.word	0x200056b8
 800a62c:	200056d8 	.word	0x200056d8
 800a630:	200053c4 	.word	0x200053c4
 800a634:	200056a0 	.word	0x200056a0
 800a638:	200053d0 	.word	0x200053d0
 800a63c:	40000400 	.word	0x40000400
 800a640:	20000204 	.word	0x20000204
 800a644:	20005660 	.word	0x20005660
 800a648:	20005428 	.word	0x20005428
 800a64c:	20005094 	.word	0x20005094
 800a650:	200050a0 	.word	0x200050a0
		debugVR[dbc-1] = CurrentVelocity[RIGHT];
 800a654:	4d3e      	ldr	r5, [pc, #248]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
		debugVL[dbc-1] = CurrentVelocity[LEFT];
 800a656:	f8df c124 	ldr.w	ip, [pc, #292]	; 800a77c <HAL_TIM_PeriodElapsedCallback+0x4e4>
 800a65a:	009b      	lsls	r3, r3, #2
		dbc ++;
 800a65c:	3001      	adds	r0, #1
		debugVL[dbc-1] = CurrentVelocity[LEFT];
 800a65e:	449c      	add	ip, r3
		debugVR[dbc-1] = CurrentVelocity[RIGHT];
 800a660:	442b      	add	r3, r5
		dbc ++;
 800a662:	6038      	str	r0, [r7, #0]
		debugVL[dbc-1] = CurrentVelocity[LEFT];
 800a664:	6835      	ldr	r5, [r6, #0]
		debugVR[dbc-1] = CurrentVelocity[RIGHT];
 800a666:	6870      	ldr	r0, [r6, #4]
		debugVL[dbc-1] = CurrentVelocity[LEFT];
 800a668:	f8cc 5000 	str.w	r5, [ip]
		debugVR[dbc-1] = CurrentVelocity[RIGHT];
 800a66c:	6018      	str	r0, [r3, #0]
 800a66e:	e75e      	b.n	800a52e <HAL_TIM_PeriodElapsedCallback+0x296>
					wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
 800a670:	4a38      	ldr	r2, [pc, #224]	; (800a754 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 800a672:	4b39      	ldr	r3, [pc, #228]	; (800a758 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 800a674:	ed92 0a02 	vldr	s0, [r2, #8]
 800a678:	4d38      	ldr	r5, [pc, #224]	; (800a75c <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 800a67a:	edd3 0a02 	vldr	s1, [r3, #8]
 800a67e:	2002      	movs	r0, #2
 800a680:	f004 fb02 	bl	800ec88 <PIDControl>
					TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800a684:	ee07 0a90 	vmov	s15, r0
 800a688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a68c:	ee17 0a90 	vmov	r0, s15
 800a690:	f7fd fe92 	bl	80083b8 <__aeabi_f2d>
 800a694:	a32c      	add	r3, pc, #176	; (adr r3, 800a748 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	f7fd fee5 	bl	8008468 <__aeabi_dmul>
 800a69e:	f7fe f9db 	bl	8008a58 <__aeabi_d2f>
 800a6a2:	4b2f      	ldr	r3, [pc, #188]	; (800a760 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800a6a4:	6018      	str	r0, [r3, #0]
 800a6a6:	e76c      	b.n	800a582 <HAL_TIM_PeriodElapsedCallback+0x2ea>
				Update_IMU(&AngularV, &Angle);
 800a6a8:	492e      	ldr	r1, [pc, #184]	; (800a764 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 800a6aa:	482f      	ldr	r0, [pc, #188]	; (800a768 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 800a6ac:	f004 f858 	bl	800e760 <Update_IMU>
				timer1 += t;
 800a6b0:	4a2e      	ldr	r2, [pc, #184]	; (800a76c <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 800a6b2:	682b      	ldr	r3, [r5, #0]
 800a6b4:	6812      	ldr	r2, [r2, #0]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	602b      	str	r3, [r5, #0]
 800a6ba:	e5f5      	b.n	800a2a8 <HAL_TIM_PeriodElapsedCallback+0x10>
					ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a6bc:	4b2c      	ldr	r3, [pc, #176]	; (800a770 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 800a6be:	4d27      	ldr	r5, [pc, #156]	; (800a75c <HAL_TIM_PeriodElapsedCallback+0x4c4>)
					ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a6c0:	ed93 0a00 	vldr	s0, [r3]
 800a6c4:	edd7 0a00 	vldr	s1, [r7]
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	f004 fadd 	bl	800ec88 <PIDControl>
					TargetAngularV = (float)ang_out;
 800a6ce:	ee07 0a90 	vmov	s15, r0
 800a6d2:	4b23      	ldr	r3, [pc, #140]	; (800a760 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800a6d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6d8:	edc3 7a00 	vstr	s15, [r3]
 800a6dc:	e751      	b.n	800a582 <HAL_TIM_PeriodElapsedCallback+0x2ea>
					wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800a6de:	4b1d      	ldr	r3, [pc, #116]	; (800a754 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 800a6e0:	4a24      	ldr	r2, [pc, #144]	; (800a774 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 800a6e2:	ed93 0a02 	vldr	s0, [r3, #8]
 800a6e6:	edd3 0a01 	vldr	s1, [r3, #4]
 800a6ea:	edd2 7a00 	vldr	s15, [r2]
 800a6ee:	4d1b      	ldr	r5, [pc, #108]	; (800a75c <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 800a6f0:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800a6f4:	e7c4      	b.n	800a680 <HAL_TIM_PeriodElapsedCallback+0x3e8>
					wall_f = PIDControl( F_WALL_PID,   3800, (	(Photo[FR]+Photo[FL])));
 800a6f6:	4b17      	ldr	r3, [pc, #92]	; (800a754 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 800a6f8:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800a778 <HAL_TIM_PeriodElapsedCallback+0x4e0>
 800a6fc:	edd3 0a03 	vldr	s1, [r3, #12]
 800a700:	edd3 7a00 	vldr	s15, [r3]
					TargetVelocity[BODY] = (float)wall_f*0.001;
 800a704:	4d15      	ldr	r5, [pc, #84]	; (800a75c <HAL_TIM_PeriodElapsedCallback+0x4c4>)
					wall_f = PIDControl( F_WALL_PID,   3800, (	(Photo[FR]+Photo[FL])));
 800a706:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800a70a:	2008      	movs	r0, #8
 800a70c:	f004 fabc 	bl	800ec88 <PIDControl>
					TargetVelocity[BODY] = (float)wall_f*0.001;
 800a710:	ee07 0a90 	vmov	s15, r0
 800a714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a718:	ee17 0a90 	vmov	r0, s15
 800a71c:	f7fd fe4c 	bl	80083b8 <__aeabi_f2d>
 800a720:	a309      	add	r3, pc, #36	; (adr r3, 800a748 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	f7fd fe9f 	bl	8008468 <__aeabi_dmul>
 800a72a:	f7fe f995 	bl	8008a58 <__aeabi_d2f>
					ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a72e:	4b10      	ldr	r3, [pc, #64]	; (800a770 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
					TargetVelocity[BODY] = (float)wall_f*0.001;
 800a730:	60a8      	str	r0, [r5, #8]
 800a732:	e7c5      	b.n	800a6c0 <HAL_TIM_PeriodElapsedCallback+0x428>
					wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800a734:	4a08      	ldr	r2, [pc, #32]	; (800a758 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 800a736:	4b07      	ldr	r3, [pc, #28]	; (800a754 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 800a738:	ed92 0a01 	vldr	s0, [r2, #4]
 800a73c:	4d07      	ldr	r5, [pc, #28]	; (800a75c <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 800a73e:	edd3 0a01 	vldr	s1, [r3, #4]
 800a742:	2003      	movs	r0, #3
 800a744:	e79c      	b.n	800a680 <HAL_TIM_PeriodElapsedCallback+0x3e8>
 800a746:	bf00      	nop
 800a748:	d2f1a9fc 	.word	0xd2f1a9fc
 800a74c:	3f50624d 	.word	0x3f50624d
 800a750:	20002148 	.word	0x20002148
 800a754:	200056a0 	.word	0x200056a0
 800a758:	200056c4 	.word	0x200056c4
 800a75c:	20005630 	.word	0x20005630
 800a760:	20005640 	.word	0x20005640
 800a764:	20005098 	.word	0x20005098
 800a768:	200050a4 	.word	0x200050a4
 800a76c:	20005618 	.word	0x20005618
 800a770:	200050a8 	.word	0x200050a8
 800a774:	20005654 	.word	0x20005654
 800a778:	456d8000 	.word	0x456d8000
 800a77c:	20000208 	.word	0x20000208

0800a780 <initMaze>:
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
        }
    }
}
void initMaze(maze_node *maze) //重みは別で初期化
{
 800a780:	b4f0      	push	{r4, r5, r6, r7}
    //まず未探索状態にする
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a782:	2700      	movs	r7, #0
 800a784:	4606      	mov	r6, r0
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a786:	4684      	mov	ip, r0
        {
            maze->RawNode[i][j].existence = UNKNOWN;
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800a788:	4639      	mov	r1, r7
            maze->RawNode[i][j].existence = UNKNOWN;
 800a78a:	2502      	movs	r5, #2
 800a78c:	b2fc      	uxtb	r4, r7
{
 800a78e:	4663      	mov	r3, ip
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a790:	2201      	movs	r2, #1
            maze->RawNode[i][j].rc = 0;
            maze->RawNode[i][j].pos.x = i;
            maze->RawNode[i][j].pos.y = j;
 800a792:	73da      	strb	r2, [r3, #15]
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a794:	3201      	adds	r2, #1
 800a796:	2a10      	cmp	r2, #16
            maze->RawNode[i][j].existence = UNKNOWN;
 800a798:	721d      	strb	r5, [r3, #8]
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800a79a:	7319      	strb	r1, [r3, #12]
            maze->RawNode[i][j].rc = 0;
 800a79c:	7359      	strb	r1, [r3, #13]
            maze->RawNode[i][j].pos.x = i;
 800a79e:	739c      	strb	r4, [r3, #14]
 800a7a0:	f103 0308 	add.w	r3, r3, #8
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a7a4:	d1f5      	bne.n	800a792 <initMaze+0x12>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a7a6:	3701      	adds	r7, #1
 800a7a8:	2f10      	cmp	r7, #16
 800a7aa:	f10c 0c88 	add.w	ip, ip, #136	; 0x88
 800a7ae:	d1ed      	bne.n	800a78c <initMaze+0xc>
//            maze->RawNode[i][j].visit = false;
        }
    }
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++) //外壁
 800a7b0:	2300      	movs	r3, #0
    {
            maze->RawNode[i][0].existence = WALL;
            maze->RawNode[i][0].draw = true;//未知壁は描画のときに無いものとする
            maze->RawNode[i][0].rc = 0;
 800a7b2:	4619      	mov	r1, r3
            maze->RawNode[i][0].existence = WALL;
 800a7b4:	2201      	movs	r2, #1
            maze->RawNode[i][0].pos.x = i;
 800a7b6:	b2dc      	uxtb	r4, r3
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++) //外壁
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	2b10      	cmp	r3, #16
            maze->RawNode[i][0].existence = WALL;
 800a7bc:	7032      	strb	r2, [r6, #0]
            maze->RawNode[i][0].draw = true;//未知壁は描画のときに無いものとする
 800a7be:	7132      	strb	r2, [r6, #4]
            maze->RawNode[i][0].rc = 0;
 800a7c0:	7171      	strb	r1, [r6, #5]
            maze->RawNode[i][0].pos.y = 0;
 800a7c2:	71f1      	strb	r1, [r6, #7]
//            maze->RawNode[i][0].visit = true; //便宜的に訪問済みとする
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;
 800a7c4:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;//未知壁は描画のときに無いものとする
 800a7c8:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;
 800a7cc:	f886 1085 	strb.w	r1, [r6, #133]	; 0x85
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.y = NUMBER_OF_SQUARES_Y;
 800a7d0:	f886 7087 	strb.w	r7, [r6, #135]	; 0x87
            maze->RawNode[i][0].pos.x = i;
 800a7d4:	71b4      	strb	r4, [r6, #6]
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
 800a7d6:	f886 4086 	strb.w	r4, [r6, #134]	; 0x86
 800a7da:	f106 0688 	add.w	r6, r6, #136	; 0x88
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++) //外壁
 800a7de:	d1ea      	bne.n	800a7b6 <initMaze+0x36>
//            maze->RawNode[i][NUMBER_OF_SQUARES_Y].visit = true; //便宜的に訪問済みとする
    }
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800a7e0:	2701      	movs	r7, #1
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].existence = UNKNOWN;
            maze->ColumnNode[i][j].draw = false;
            maze->ColumnNode[i][j].rc = 1;
 800a7e2:	463e      	mov	r6, r7
 800a7e4:	f100 0c80 	add.w	ip, r0, #128	; 0x80
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800a7e8:	2502      	movs	r5, #2
            maze->ColumnNode[i][j].draw = false;
 800a7ea:	2400      	movs	r4, #0
 800a7ec:	b2f9      	uxtb	r1, r7
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++) //外壁
 800a7ee:	4663      	mov	r3, ip
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a7f0:	2200      	movs	r2, #0
            maze->ColumnNode[i][j].pos.x = i;
            maze->ColumnNode[i][j].pos.y = j;
 800a7f2:	f883 2887 	strb.w	r2, [r3, #2183]	; 0x887
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a7f6:	3201      	adds	r2, #1
 800a7f8:	2a10      	cmp	r2, #16
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800a7fa:	f883 5880 	strb.w	r5, [r3, #2176]	; 0x880
            maze->ColumnNode[i][j].draw = false;
 800a7fe:	f883 4884 	strb.w	r4, [r3, #2180]	; 0x884
            maze->ColumnNode[i][j].rc = 1;
 800a802:	f883 6885 	strb.w	r6, [r3, #2181]	; 0x885
            maze->ColumnNode[i][j].pos.x = i;
 800a806:	f883 1886 	strb.w	r1, [r3, #2182]	; 0x886
 800a80a:	f103 0308 	add.w	r3, r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a80e:	d1f0      	bne.n	800a7f2 <initMaze+0x72>
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800a810:	3701      	adds	r7, #1
 800a812:	2f10      	cmp	r7, #16
 800a814:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 800a818:	d1e8      	bne.n	800a7ec <initMaze+0x6c>
//            maze->ColumnNode[i][j].visit = false;
        }
    }
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a81a:	2100      	movs	r1, #0
    {
            maze->ColumnNode[0][j].existence = WALL;
            maze->ColumnNode[0][j].draw = true;
            maze->ColumnNode[0][j].rc = 1;
            maze->ColumnNode[0][j].pos.x = 0;
 800a81c:	460d      	mov	r5, r1
 800a81e:	f500 6308 	add.w	r3, r0, #2176	; 0x880
            maze->ColumnNode[0][j].existence = WALL;
 800a822:	2201      	movs	r2, #1
            maze->ColumnNode[0][j].pos.y = j;
 800a824:	b2cc      	uxtb	r4, r1
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a826:	3101      	adds	r1, #1
 800a828:	2910      	cmp	r1, #16
            maze->ColumnNode[0][j].existence = WALL;
 800a82a:	701a      	strb	r2, [r3, #0]
            maze->ColumnNode[0][j].draw = true;
 800a82c:	711a      	strb	r2, [r3, #4]
            maze->ColumnNode[0][j].rc = 1;
 800a82e:	715a      	strb	r2, [r3, #5]
            maze->ColumnNode[0][j].pos.x = 0;
 800a830:	719d      	strb	r5, [r3, #6]
//            maze->ColumnNode[0][j].visit = true;
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].existence = WALL;
 800a832:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;
 800a836:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;
 800a83a:	f883 2805 	strb.w	r2, [r3, #2053]	; 0x805
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
 800a83e:	f883 7806 	strb.w	r7, [r3, #2054]	; 0x806
            maze->ColumnNode[0][j].pos.y = j;
 800a842:	71dc      	strb	r4, [r3, #7]
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.y = j;
 800a844:	f883 4807 	strb.w	r4, [r3, #2055]	; 0x807
 800a848:	f103 0308 	add.w	r3, r3, #8
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a84c:	d1ea      	bne.n	800a824 <initMaze+0xa4>
//        maze->ColumnNode[0][j].pos.y = j;
//        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
//        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.y = j;
//    }
    maze->ColumnNode[1][0].existence = WALL;    //東1
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800a84e:	7205      	strb	r5, [r0, #8]

    maze->ColumnNode[1][0].draw = true;    //東1
    maze->RawNode[0][1].draw = false;     //北0
 800a850:	7305      	strb	r5, [r0, #12]
    maze->ColumnNode[1][0].existence = WALL;    //東1
 800a852:	f880 2900 	strb.w	r2, [r0, #2304]	; 0x900
    maze->ColumnNode[1][0].draw = true;    //東1
 800a856:	f880 2904 	strb.w	r2, [r0, #2308]	; 0x904

    //visitは、壁があるところと訪問済みのところを1、まだのところを0
//    maze->ColumnNode[1][0].visit = true;    //東1
//	maze->RawNode[0][1].visit = false;     //北0
}
 800a85a:	bcf0      	pop	{r4, r5, r6, r7}
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop

0800a860 <initTargetAreaWeight>:
void initTargetAreaWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size_x, uint8_t target_size_y)
{
 800a860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a864:	f89d e01c 	ldrb.w	lr, [sp, #28]
    //ゴールエリアの外堀と中のノードは全て0、壁があればMAX。
    for(int i=0; i < target_size_x; i++)
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d03f      	beq.n	800a8ec <initTargetAreaWeight+0x8c>
 800a86c:	2611      	movs	r6, #17
 800a86e:	fb16 2601 	smlabb	r6, r6, r1, r2
 800a872:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a876:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800a87a:	f04f 0808 	mov.w	r8, #8
 800a87e:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800a882:	2700      	movs	r7, #0
            // maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0; //東
            // maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;           //南
            // maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;     //西

        	//なぜdraw == trueでやっていたかわからない
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800a884:	f640 74ff 	movw	r4, #4095	; 0xfff
 800a888:	f100 0c80 	add.w	ip, r0, #128	; 0x80
        for(int j=0; j < target_size_y; j++)
 800a88c:	f1be 0f00 	cmp.w	lr, #0
 800a890:	d026      	beq.n	800a8e0 <initTargetAreaWeight+0x80>
 800a892:	4661      	mov	r1, ip
 800a894:	fb18 690e 	smlabb	r9, r8, lr, r6
 800a898:	4632      	mov	r2, r6
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800a89a:	7a15      	ldrb	r5, [r2, #8]
 800a89c:	2d01      	cmp	r5, #1
 800a89e:	bf14      	ite	ne
 800a8a0:	2500      	movne	r5, #0
 800a8a2:	4625      	moveq	r5, r4
 800a8a4:	8155      	strh	r5, [r2, #10]
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].existence == WALL) ? MAX_WEIGHT : 0; //東
 800a8a6:	f891 5880 	ldrb.w	r5, [r1, #2176]	; 0x880
 800a8aa:	2d01      	cmp	r5, #1
 800a8ac:	bf14      	ite	ne
 800a8ae:	2500      	movne	r5, #0
 800a8b0:	4625      	moveq	r5, r4
 800a8b2:	f8a1 5882 	strh.w	r5, [r1, #2178]	; 0x882
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;           //南
 800a8b6:	7815      	ldrb	r5, [r2, #0]
 800a8b8:	2d01      	cmp	r5, #1
 800a8ba:	bf14      	ite	ne
 800a8bc:	2500      	movne	r5, #0
 800a8be:	4625      	moveq	r5, r4
 800a8c0:	8055      	strh	r5, [r2, #2]
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800a8c2:	f890 5880 	ldrb.w	r5, [r0, #2176]	; 0x880
 800a8c6:	3208      	adds	r2, #8
 800a8c8:	2d01      	cmp	r5, #1
 800a8ca:	bf14      	ite	ne
 800a8cc:	2500      	movne	r5, #0
 800a8ce:	4625      	moveq	r5, r4
        for(int j=0; j < target_size_y; j++)
 800a8d0:	454a      	cmp	r2, r9
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800a8d2:	f8a0 5882 	strh.w	r5, [r0, #2178]	; 0x882
 800a8d6:	f101 0108 	add.w	r1, r1, #8
 800a8da:	f100 0008 	add.w	r0, r0, #8
        for(int j=0; j < target_size_y; j++)
 800a8de:	d1dc      	bne.n	800a89a <initTargetAreaWeight+0x3a>
    for(int i=0; i < target_size_x; i++)
 800a8e0:	3701      	adds	r7, #1
 800a8e2:	429f      	cmp	r7, r3
 800a8e4:	f106 0688 	add.w	r6, r6, #136	; 0x88
 800a8e8:	4660      	mov	r0, ip
 800a8ea:	d1cd      	bne.n	800a888 <initTargetAreaWeight+0x28>
        }
    }
}
 800a8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a8f0 <updateAllNodeWeight>:

#define WEIGHT_NANAME   3
#define WEIGHT_STRAIGHT 1

void updateAllNodeWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t area_size_x, uint8_t area_size_y, int mask)
{
 800a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	b085      	sub	sp, #20
 800a8f6:	f500 6c08 	add.w	ip, r0, #2176	; 0x880
 800a8fa:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 800a8fe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a900:	9003      	str	r0, [sp, #12]
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800a902:	f640 77ff 	movw	r7, #4095	; 0xfff
 800a906:	f100 0688 	add.w	r6, r0, #136	; 0x88
 800a90a:	8047      	strh	r7, [r0, #2]
 800a90c:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a90e:	42b0      	cmp	r0, r6
 800a910:	d1fb      	bne.n	800a90a <updateAllNodeWeight+0x1a>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a912:	4560      	cmp	r0, ip
 800a914:	d1f7      	bne.n	800a906 <updateAllNodeWeight+0x16>
 800a916:	9e03      	ldr	r6, [sp, #12]
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800a918:	f640 7cff 	movw	ip, #4095	; 0xfff
 800a91c:	f106 0780 	add.w	r7, r6, #128	; 0x80
 800a920:	f8a6 c882 	strh.w	ip, [r6, #2178]	; 0x882
 800a924:	3608      	adds	r6, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a926:	42be      	cmp	r6, r7
 800a928:	d1fa      	bne.n	800a920 <updateAllNodeWeight+0x30>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a92a:	4286      	cmp	r6, r0
 800a92c:	d1f6      	bne.n	800a91c <updateAllNodeWeight+0x2c>
	//全体に154/20ms = 7.7ms
    //新しい区画に入ったときに、更新

    initWeight(maze); //3/20ms

    initTargetAreaWeight(maze, x,y, area_size_x,area_size_y);
 800a92e:	9d03      	ldr	r5, [sp, #12]
 800a930:	f8cd e000 	str.w	lr, [sp]
 800a934:	4628      	mov	r0, r5
 800a936:	f7ff ff93 	bl	800a860 <initTargetAreaWeight>
 800a93a:	f105 0c80 	add.w	ip, r5, #128	; 0x80
        //列
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
		{
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
			{
                if(maze->ColumnNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800a93e:	f640 72ff 	movw	r2, #4095	; 0xfff
					if(0 < i ){
						//南西
						if( ((maze->RawNode[i-1][j].existence & mask) == NOWALL) && (maze->RawNode[i-1][j].weight == MAX_WEIGHT))		//壁がなければ
						{
								maze->RawNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
								change_flag = true;		//値が更新されたことを示す
 800a942:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a946:	4661      	mov	r1, ip
 800a948:	f04f 0801 	mov.w	r8, #1
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800a94c:	f04f 0e00 	mov.w	lr, #0
 800a950:	f101 0a80 	add.w	sl, r1, #128	; 0x80
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a954:	4656      	mov	r6, sl
 800a956:	464b      	mov	r3, r9
 800a958:	2000      	movs	r0, #0
                if(maze->ColumnNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800a95a:	f8b1 7882 	ldrh.w	r7, [r1, #2178]	; 0x882
 800a95e:	4297      	cmp	r7, r2
 800a960:	d055      	beq.n	800aa0e <updateAllNodeWeight+0x11e>
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800a962:	f1b8 0f0f 	cmp.w	r8, #15
 800a966:	d010      	beq.n	800a98a <updateAllNodeWeight+0x9a>
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))	//壁がなければ(maskの意味はstatic_parametersを参照)
 800a968:	f896 b880 	ldrb.w	fp, [r6, #2176]	; 0x880
 800a96c:	ea1b 0f04 	tst.w	fp, r4
 800a970:	d108      	bne.n	800a984 <updateAllNodeWeight+0x94>
 800a972:	f8b6 b882 	ldrh.w	fp, [r6, #2178]	; 0x882
 800a976:	4593      	cmp	fp, r2
 800a978:	d104      	bne.n	800a984 <updateAllNodeWeight+0x94>
						maze->ColumnNode[i+1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800a97a:	3701      	adds	r7, #1
 800a97c:	f8a6 7882 	strh.w	r7, [r6, #2178]	; 0x882
						change_flag = true;		//値が更新されたことを示す
 800a980:	f04f 0e01 	mov.w	lr, #1
				if(1 < i)						//範囲チェック
 800a984:	f1b8 0f01 	cmp.w	r8, #1
 800a988:	d00e      	beq.n	800a9a8 <updateAllNodeWeight+0xb8>
					if( ((maze->ColumnNode[i-1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i-1][j].weight == MAX_WEIGHT))	//壁がなければ
 800a98a:	f891 7800 	ldrb.w	r7, [r1, #2048]	; 0x800
 800a98e:	4227      	tst	r7, r4
 800a990:	d10a      	bne.n	800a9a8 <updateAllNodeWeight+0xb8>
 800a992:	f8b1 7802 	ldrh.w	r7, [r1, #2050]	; 0x802
 800a996:	4297      	cmp	r7, r2
 800a998:	d106      	bne.n	800a9a8 <updateAllNodeWeight+0xb8>
						maze->ColumnNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800a99a:	f8b1 7882 	ldrh.w	r7, [r1, #2178]	; 0x882
 800a99e:	3701      	adds	r7, #1
 800a9a0:	f8a1 7802 	strh.w	r7, [r1, #2050]	; 0x802
						change_flag = true;		//値が更新されたことを示す
 800a9a4:	f04f 0e01 	mov.w	lr, #1
				if(j < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800a9a8:	280f      	cmp	r0, #15
 800a9aa:	d015      	beq.n	800a9d8 <updateAllNodeWeight+0xe8>
						if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800a9ac:	f893 7090 	ldrb.w	r7, [r3, #144]	; 0x90
 800a9b0:	4227      	tst	r7, r4
 800a9b2:	d10a      	bne.n	800a9ca <updateAllNodeWeight+0xda>
 800a9b4:	f8b3 7092 	ldrh.w	r7, [r3, #146]	; 0x92
 800a9b8:	4297      	cmp	r7, r2
 800a9ba:	d106      	bne.n	800a9ca <updateAllNodeWeight+0xda>
							maze->RawNode[i][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a9bc:	f8b1 7882 	ldrh.w	r7, [r1, #2178]	; 0x882
 800a9c0:	3703      	adds	r7, #3
 800a9c2:	f8a3 7092 	strh.w	r7, [r3, #146]	; 0x92
							change_flag = true;		//値が更新されたことを示す
 800a9c6:	f04f 0e01 	mov.w	lr, #1
						if( ((maze->RawNode[i-1][j+1].existence & mask) == NOWALL) && (maze->RawNode[i-1][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800a9ca:	7a1f      	ldrb	r7, [r3, #8]
 800a9cc:	4227      	tst	r7, r4
 800a9ce:	d102      	bne.n	800a9d6 <updateAllNodeWeight+0xe6>
 800a9d0:	895f      	ldrh	r7, [r3, #10]
 800a9d2:	4297      	cmp	r7, r2
 800a9d4:	d022      	beq.n	800aa1c <updateAllNodeWeight+0x12c>
				if(0 < j)
 800a9d6:	b1e0      	cbz	r0, 800aa12 <updateAllNodeWeight+0x122>
						if( ((maze->RawNode[i][j].existence & mask) == NOWALL) && (maze->RawNode[i][j].weight == MAX_WEIGHT)	)		//壁がなければ
 800a9d8:	f893 7088 	ldrb.w	r7, [r3, #136]	; 0x88
 800a9dc:	4227      	tst	r7, r4
 800a9de:	d10a      	bne.n	800a9f6 <updateAllNodeWeight+0x106>
 800a9e0:	f8b3 708a 	ldrh.w	r7, [r3, #138]	; 0x8a
 800a9e4:	4297      	cmp	r7, r2
 800a9e6:	d106      	bne.n	800a9f6 <updateAllNodeWeight+0x106>
							maze->RawNode[i][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a9e8:	f8b1 7882 	ldrh.w	r7, [r1, #2178]	; 0x882
 800a9ec:	3703      	adds	r7, #3
 800a9ee:	f8a3 708a 	strh.w	r7, [r3, #138]	; 0x8a
							change_flag = true;		//値が更新されたことを示す
 800a9f2:	f04f 0e01 	mov.w	lr, #1
						if( ((maze->RawNode[i-1][j].existence & mask) == NOWALL) && (maze->RawNode[i-1][j].weight == MAX_WEIGHT))		//壁がなければ
 800a9f6:	781f      	ldrb	r7, [r3, #0]
 800a9f8:	4227      	tst	r7, r4
 800a9fa:	d108      	bne.n	800aa0e <updateAllNodeWeight+0x11e>
 800a9fc:	885f      	ldrh	r7, [r3, #2]
 800a9fe:	4297      	cmp	r7, r2
 800aa00:	d105      	bne.n	800aa0e <updateAllNodeWeight+0x11e>
								maze->RawNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aa02:	f8b1 7882 	ldrh.w	r7, [r1, #2178]	; 0x882
 800aa06:	3703      	adds	r7, #3
 800aa08:	805f      	strh	r7, [r3, #2]
								change_flag = true;		//値が更新されたことを示す
 800aa0a:	f04f 0e01 	mov.w	lr, #1
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
 800aa0e:	280f      	cmp	r0, #15
 800aa10:	d00b      	beq.n	800aa2a <updateAllNodeWeight+0x13a>
 800aa12:	3001      	adds	r0, #1
 800aa14:	3108      	adds	r1, #8
 800aa16:	3608      	adds	r6, #8
 800aa18:	3308      	adds	r3, #8
 800aa1a:	e79e      	b.n	800a95a <updateAllNodeWeight+0x6a>
							maze->RawNode[i-1][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aa1c:	f8b1 7882 	ldrh.w	r7, [r1, #2178]	; 0x882
 800aa20:	3703      	adds	r7, #3
 800aa22:	815f      	strh	r7, [r3, #10]
							change_flag = true;		//値が更新されたことを示す
 800aa24:	f04f 0e01 	mov.w	lr, #1
 800aa28:	e7d5      	b.n	800a9d6 <updateAllNodeWeight+0xe6>
 800aa2a:	f108 0801 	add.w	r8, r8, #1
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
 800aa2e:	f1b8 0f10 	cmp.w	r8, #16
 800aa32:	f109 0988 	add.w	r9, r9, #136	; 0x88
 800aa36:	4651      	mov	r1, sl
 800aa38:	d18a      	bne.n	800a950 <updateAllNodeWeight+0x60>
 800aa3a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800aa3e:	2500      	movs	r5, #0
 800aa40:	4649      	mov	r1, r9
 800aa42:	f101 0a80 	add.w	sl, r1, #128	; 0x80
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800aa46:	4656      	mov	r6, sl
 800aa48:	464b      	mov	r3, r9
 800aa4a:	2001      	movs	r0, #1
 			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
 			{
                 //1ノードずつ見る.そこから加算対象が最大6個
                 //端を見ないので、一番上の列からスタート j=N; j >= 0, xを1からN-1まで
                 //次に行 j=N-1から1まで xを0からN-1まで
 				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800aa4c:	895f      	ldrh	r7, [r3, #10]
 800aa4e:	4297      	cmp	r7, r2
 800aa50:	d054      	beq.n	800aafc <updateAllNodeWeight+0x20c>
 					skip_raw ++;
 					continue;
 				}
 				// printf("continueはクリア. Raw[%d][%d]\r\n",i,j);
                 //北側ノード
 				if(j < NUMBER_OF_SQUARES_Y-1)   //範囲チェック. 座標のxyではなく、ノードのxy
 800aa52:	280f      	cmp	r0, #15
 800aa54:	d010      	beq.n	800aa78 <updateAllNodeWeight+0x188>
 				{
 					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT) )	//壁がなければ(maskの意味はstatic_parametersを参照)
 800aa56:	f893 b010 	ldrb.w	fp, [r3, #16]
 800aa5a:	ea1b 0f04 	tst.w	fp, r4
 800aa5e:	d109      	bne.n	800aa74 <updateAllNodeWeight+0x184>
 800aa60:	f8b3 b012 	ldrh.w	fp, [r3, #18]
 800aa64:	4593      	cmp	fp, r2
 800aa66:	d105      	bne.n	800aa74 <updateAllNodeWeight+0x184>
 					{
 						maze->RawNode[i][j+1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800aa68:	f107 0e01 	add.w	lr, r7, #1
 800aa6c:	f8a3 e012 	strh.w	lr, [r3, #18]
 						change_flag = true;		//値が更新されたことを示す
 800aa70:	f04f 0e01 	mov.w	lr, #1
 					}
                 }
                 //南側ノード
 				if(j > 1)						//範囲チェック.ミスってた
 800aa74:	2801      	cmp	r0, #1
 800aa76:	d00c      	beq.n	800aa92 <updateAllNodeWeight+0x1a2>
 				{
 					if( ((maze->RawNode[i][j-1].existence & mask) == NOWALL) && (maze->RawNode[i][j-1].weight == MAX_WEIGHT) )	//壁がなければ
 800aa78:	f893 b000 	ldrb.w	fp, [r3]
 800aa7c:	ea1b 0f04 	tst.w	fp, r4
 800aa80:	d107      	bne.n	800aa92 <updateAllNodeWeight+0x1a2>
 800aa82:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 800aa86:	4593      	cmp	fp, r2
 800aa88:	d103      	bne.n	800aa92 <updateAllNodeWeight+0x1a2>
 					{
 						maze->RawNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800aa8a:	3701      	adds	r7, #1
 800aa8c:	805f      	strh	r7, [r3, #2]
 						change_flag = true;		//値が更新されたことを示す
 800aa8e:	f04f 0e01 	mov.w	lr, #1
 					}
 				}
                 //東側に斜めが2方向
 				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800aa92:	2d0f      	cmp	r5, #15
 800aa94:	d016      	beq.n	800aac4 <updateAllNodeWeight+0x1d4>
 				{
                     //y方向の制限は？
                     //北東
 					if( j < NUMBER_OF_SQUARES_Y )
 					{
 						if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))		//壁がなければ
 800aa96:	f896 7888 	ldrb.w	r7, [r6, #2184]	; 0x888
 800aa9a:	4227      	tst	r7, r4
 800aa9c:	d109      	bne.n	800aab2 <updateAllNodeWeight+0x1c2>
 800aa9e:	f8b6 788a 	ldrh.w	r7, [r6, #2186]	; 0x88a
 800aaa2:	4297      	cmp	r7, r2
 800aaa4:	d105      	bne.n	800aab2 <updateAllNodeWeight+0x1c2>
 						{
 							maze->ColumnNode[i+1][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aaa6:	895f      	ldrh	r7, [r3, #10]
 800aaa8:	3703      	adds	r7, #3
 800aaaa:	f8a6 788a 	strh.w	r7, [r6, #2186]	; 0x88a
 							change_flag = true;		//値が更新されたことを示す
 800aaae:	f04f 0e01 	mov.w	lr, #1
 						}
 					}
 					if( 0 < j )
 					{
 						//南東
 						if( ((maze->ColumnNode[i+1][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j-1].weight == MAX_WEIGHT)	)		//壁がなければ
 800aab2:	f896 7880 	ldrb.w	r7, [r6, #2176]	; 0x880
 800aab6:	4227      	tst	r7, r4
 800aab8:	d103      	bne.n	800aac2 <updateAllNodeWeight+0x1d2>
 800aaba:	f8b6 7882 	ldrh.w	r7, [r6, #2178]	; 0x882
 800aabe:	4297      	cmp	r7, r2
 800aac0:	d032      	beq.n	800ab28 <updateAllNodeWeight+0x238>
 						}
 					}
 				}

                 //西側に斜めが2方向
 				if(i > 0)						//範囲チェック
 800aac2:	b1dd      	cbz	r5, 800aafc <updateAllNodeWeight+0x20c>
 				{
                     //北西
 					if( j < NUMBER_OF_SQUARES_Y )
 					{
 						if( ((maze->ColumnNode[i][j].existence & mask) == NOWALL)  && (maze->ColumnNode[i][j].weight == MAX_WEIGHT) )		//壁がなければ
 800aac4:	f891 7888 	ldrb.w	r7, [r1, #2184]	; 0x888
 800aac8:	4227      	tst	r7, r4
 800aaca:	d109      	bne.n	800aae0 <updateAllNodeWeight+0x1f0>
 800aacc:	f8b1 788a 	ldrh.w	r7, [r1, #2186]	; 0x88a
 800aad0:	4297      	cmp	r7, r2
 800aad2:	d105      	bne.n	800aae0 <updateAllNodeWeight+0x1f0>
 						{
 								maze->ColumnNode[i][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aad4:	895f      	ldrh	r7, [r3, #10]
 800aad6:	3703      	adds	r7, #3
 800aad8:	f8a1 788a 	strh.w	r7, [r1, #2186]	; 0x88a
 								change_flag = true;		//値が更新されたことを示す
 800aadc:	f04f 0e01 	mov.w	lr, #1
 						}
 					}
 					if( 0 < j )
 					{
 						//南西
 						if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
 800aae0:	f891 7880 	ldrb.w	r7, [r1, #2176]	; 0x880
 800aae4:	4227      	tst	r7, r4
 800aae6:	d109      	bne.n	800aafc <updateAllNodeWeight+0x20c>
 800aae8:	f8b1 7882 	ldrh.w	r7, [r1, #2178]	; 0x882
 800aaec:	4297      	cmp	r7, r2
 800aaee:	d105      	bne.n	800aafc <updateAllNodeWeight+0x20c>
 						{
 							maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aaf0:	895f      	ldrh	r7, [r3, #10]
 800aaf2:	3703      	adds	r7, #3
 800aaf4:	f8a1 7882 	strh.w	r7, [r1, #2178]	; 0x882
 							change_flag = true;		//値が更新されたことを示す
 800aaf8:	f04f 0e01 	mov.w	lr, #1
 800aafc:	3001      	adds	r0, #1
 			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
 800aafe:	2810      	cmp	r0, #16
 800ab00:	f103 0308 	add.w	r3, r3, #8
 800ab04:	f101 0108 	add.w	r1, r1, #8
 800ab08:	f106 0608 	add.w	r6, r6, #8
 800ab0c:	d19e      	bne.n	800aa4c <updateAllNodeWeight+0x15c>
 800ab0e:	3501      	adds	r5, #1
 		for( i = 0; i < NUMBER_OF_SQUARES_X; i++)			//迷路の大きさ分ループ(x座標)
 800ab10:	2d10      	cmp	r5, #16
 800ab12:	f109 0988 	add.w	r9, r9, #136	; 0x88
 800ab16:	4651      	mov	r1, sl
 800ab18:	d193      	bne.n	800aa42 <updateAllNodeWeight+0x152>
 				}
 			}
 		}
        //printf("重みの更新\r\n");//一回しか呼ばれていない
        //cnt++;
	}while(change_flag == true);	//全体を作り終わるまで待つ
 800ab1a:	f1be 0f00 	cmp.w	lr, #0
 800ab1e:	f47f af10 	bne.w	800a942 <updateAllNodeWeight+0x52>
//    t = 0;
//	HAL_TIM_Base_Stop_IT(&htim8);
//	printf("%d/20ms, %d, %d\r\n\r\n",timer8, skip_raw, skip_column);
}
 800ab22:	b005      	add	sp, #20
 800ab24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 							maze->ColumnNode[i+1][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ab28:	895f      	ldrh	r7, [r3, #10]
 800ab2a:	3703      	adds	r7, #3
 800ab2c:	f8a6 7882 	strh.w	r7, [r6, #2178]	; 0x882
 							change_flag = true;		//値が更新されたことを示す
 800ab30:	f04f 0e01 	mov.w	lr, #1
 800ab34:	e7c5      	b.n	800aac2 <updateAllNodeWeight+0x1d2>
 800ab36:	bf00      	nop

0800ab38 <updateNodeThree>:
void updateNodeThree(maze_node *maze, state *st, uint8_t x, uint8_t y)
{
 800ab38:	b5f0      	push	{r4, r5, r6, r7, lr}
    //壁の有無の更新。既知の壁には上書きしない。重みの更新は？既知かどうかは重複するから書かない
        //重みは？壁があればMAX値、なければそのまま
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800ab3a:	0114      	lsls	r4, r2, #4
 800ab3c:	1c5f      	adds	r7, r3, #1
 800ab3e:	18a5      	adds	r5, r4, r2
 800ab40:	443d      	add	r5, r7
 800ab42:	eb04 0c02 	add.w	ip, r4, r2
 800ab46:	f810 5035 	ldrb.w	r5, [r0, r5, lsl #3]
 800ab4a:	2d02      	cmp	r5, #2
 800ab4c:	bf08      	it	eq
 800ab4e:	790d      	ldrbeq	r5, [r1, #4]
 800ab50:	44bc      	add	ip, r7
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800ab52:	f102 0601 	add.w	r6, r2, #1
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800ab56:	bf08      	it	eq
 800ab58:	f005 0503 	andeq.w	r5, r5, #3
 800ab5c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
 800ab60:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 800ab64:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800ab68:	eb04 0c02 	add.w	ip, r4, r2
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800ab6c:	f896 5880 	ldrb.w	r5, [r6, #2176]	; 0x880
 800ab70:	2d02      	cmp	r5, #2
 800ab72:	bf08      	it	eq
 800ab74:	790d      	ldrbeq	r5, [r1, #4]
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800ab76:	449c      	add	ip, r3
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800ab78:	bf08      	it	eq
 800ab7a:	f3c5 0581 	ubfxeq	r5, r5, #2, #2
 800ab7e:	f886 5880 	strb.w	r5, [r6, #2176]	; 0x880
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800ab82:	f810 c03c 	ldrb.w	ip, [r0, ip, lsl #3]
 800ab86:	f1bc 0f02 	cmp.w	ip, #2
 800ab8a:	bf08      	it	eq
 800ab8c:	f891 c004 	ldrbeq.w	ip, [r1, #4]
 800ab90:	eb04 0e02 	add.w	lr, r4, r2
 800ab94:	449e      	add	lr, r3
 800ab96:	bf08      	it	eq
 800ab98:	f3cc 1c01 	ubfxeq	ip, ip, #4, #2
 800ab9c:	eb03 1502 	add.w	r5, r3, r2, lsl #4
 800aba0:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 800aba4:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    // maze->RawNode[x][y+1].flag = true;      //北
    // maze->ColumnNode[x+1][y].flag = true;   //東
    // maze->RawNode[x][y].flag = true;        //南
    // maze->ColumnNode[x][y].flag = true;     //西

    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800aba8:	4414      	add	r4, r2
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800abaa:	f895 c880 	ldrb.w	ip, [r5, #2176]	; 0x880
 800abae:	f1bc 0f02 	cmp.w	ip, #2
 800abb2:	bf08      	it	eq
 800abb4:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800abb8:	4427      	add	r7, r4
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800abba:	bf08      	it	eq
 800abbc:	ea4f 1c9c 	moveq.w	ip, ip, lsr #6
 800abc0:	f885 c880 	strb.w	ip, [r5, #2176]	; 0x880
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800abc4:	f810 2037 	ldrb.w	r2, [r0, r7, lsl #3]
 800abc8:	f1a2 0201 	sub.w	r2, r2, #1
 800abcc:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 800abd0:	fab2 f282 	clz	r2, r2
 800abd4:	0952      	lsrs	r2, r2, #5
 800abd6:	713a      	strb	r2, [r7, #4]
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800abd8:	f896 2880 	ldrb.w	r2, [r6, #2176]	; 0x880
 800abdc:	f1a2 0201 	sub.w	r2, r2, #1
 800abe0:	fab2 f282 	clz	r2, r2
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800abe4:	4423      	add	r3, r4
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800abe6:	0952      	lsrs	r2, r2, #5
 800abe8:	f886 2884 	strb.w	r2, [r6, #2180]	; 0x884
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800abec:	f810 2033 	ldrb.w	r2, [r0, r3, lsl #3]
 800abf0:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800abf4:	f1a2 0301 	sub.w	r3, r2, #1
 800abf8:	fab3 f383 	clz	r3, r3
 800abfc:	095b      	lsrs	r3, r3, #5
 800abfe:	7103      	strb	r3, [r0, #4]
    maze->ColumnNode[x][y].draw = (maze->ColumnNode[x][y].existence == WALL) ? true : false;        //西
 800ac00:	f895 3880 	ldrb.w	r3, [r5, #2176]	; 0x880
 800ac04:	f1a3 0301 	sub.w	r3, r3, #1
 800ac08:	fab3 f383 	clz	r3, r3
 800ac0c:	095b      	lsrs	r3, r3, #5
 800ac0e:	f885 3884 	strb.w	r3, [r5, #2180]	; 0x884
}
 800ac12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac14 <printAllWeight>:
        return false;
    }
}

void printAllWeight(maze_node *maze, position *pos)
{
 800ac14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac18:	b087      	sub	sp, #28
 800ac1a:	4606      	mov	r6, r0
 800ac1c:	9005      	str	r0, [sp, #20]
    //全出力を3桁にそろえればよさそう
    //重みが0かつゴールエリア内の座標なら赤色で出力 31;1m
    //行から表示して、
    //列を表示
    //交互に
    printf("全ノードの重み\r\n");
 800ac1e:	4858      	ldr	r0, [pc, #352]	; (800ad80 <printAllWeight+0x16c>)

    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
    {
        //行
        printf("  +  ");
 800ac20:	4f58      	ldr	r7, [pc, #352]	; (800ad84 <printAllWeight+0x170>)
            {
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
            }
            else
            {
                printf(" %3x ",maze->RawNode[x][y].weight);
 800ac22:	4d59      	ldr	r5, [pc, #356]	; (800ad88 <printAllWeight+0x174>)
            else
            {
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
            }
            if(x < NUMBER_OF_SQUARES_X)
                printf("     ");
 800ac24:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800ad94 <printAllWeight+0x180>
{
 800ac28:	460c      	mov	r4, r1
    printf("全ノードの重み\r\n");
 800ac2a:	f008 f9bf 	bl	8012fac <puts>
 800ac2e:	4633      	mov	r3, r6
 800ac30:	3378      	adds	r3, #120	; 0x78
 800ac32:	9302      	str	r3, [sp, #8]
 800ac34:	230c      	movs	r3, #12
 800ac36:	9303      	str	r3, [sp, #12]
 800ac38:	230b      	movs	r3, #11
 800ac3a:	9301      	str	r3, [sp, #4]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800ac3c:	f04f 0910 	mov.w	r9, #16
        printf("  +  ");
 800ac40:	4638      	mov	r0, r7
 800ac42:	f008 f92b 	bl	8012e9c <iprintf>
 800ac46:	9b02      	ldr	r3, [sp, #8]
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800ac48:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800ac4c:	f103 0608 	add.w	r6, r3, #8
 800ac50:	f04f 0b00 	mov.w	fp, #0
 800ac54:	e010      	b.n	800ac78 <printAllWeight+0x64>
            if(judgeRawNodeGoal(maze, x,y) == true || ((pos->x == x) && (pos->y == y)))//辿った経路を赤で表示
 800ac56:	7823      	ldrb	r3, [r4, #0]
 800ac58:	455b      	cmp	r3, fp
 800ac5a:	d102      	bne.n	800ac62 <printAllWeight+0x4e>
 800ac5c:	7863      	ldrb	r3, [r4, #1]
 800ac5e:	454b      	cmp	r3, r9
 800ac60:	d017      	beq.n	800ac92 <printAllWeight+0x7e>
                printf(" %3x ",maze->RawNode[x][y].weight);
 800ac62:	f008 f91b 	bl	8012e9c <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800ac66:	f1bb 0f0f 	cmp.w	fp, #15
                 printf("  +  ");
 800ac6a:	4638      	mov	r0, r7
            if(x < NUMBER_OF_SQUARES_X-1)
 800ac6c:	d019      	beq.n	800aca2 <printAllWeight+0x8e>
                 printf("  +  ");
 800ac6e:	f008 f915 	bl	8012e9c <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800ac72:	f10b 0b01 	add.w	fp, fp, #1
 800ac76:	3688      	adds	r6, #136	; 0x88
    if(maze->RawNode[x][y].weight == 0)
 800ac78:	8872      	ldrh	r2, [r6, #2]
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800ac7a:	f1ab 0304 	sub.w	r3, fp, #4
 800ac7e:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->RawNode[x][y].weight);
 800ac80:	4611      	mov	r1, r2
 800ac82:	4628      	mov	r0, r5
    if(maze->RawNode[x][y].weight == 0)
 800ac84:	2a00      	cmp	r2, #0
 800ac86:	d1e6      	bne.n	800ac56 <printAllWeight+0x42>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d8e4      	bhi.n	800ac56 <printAllWeight+0x42>
 800ac8c:	f1ba 0f02 	cmp.w	sl, #2
 800ac90:	d8e1      	bhi.n	800ac56 <printAllWeight+0x42>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
 800ac92:	4611      	mov	r1, r2
 800ac94:	483d      	ldr	r0, [pc, #244]	; (800ad8c <printAllWeight+0x178>)
 800ac96:	f008 f901 	bl	8012e9c <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800ac9a:	f1bb 0f0f 	cmp.w	fp, #15
                 printf("  +  ");
 800ac9e:	4638      	mov	r0, r7
            if(x < NUMBER_OF_SQUARES_X-1)
 800aca0:	d1e5      	bne.n	800ac6e <printAllWeight+0x5a>
 800aca2:	f109 33ff 	add.w	r3, r9, #4294967295
 800aca6:	461e      	mov	r6, r3
        printf("\r\n");
 800aca8:	4839      	ldr	r0, [pc, #228]	; (800ad90 <printAllWeight+0x17c>)
 800acaa:	9304      	str	r3, [sp, #16]
 800acac:	f008 f97e 	bl	8012fac <puts>
 800acb0:	4633      	mov	r3, r6
 800acb2:	b2f6      	uxtb	r6, r6
 800acb4:	1af6      	subs	r6, r6, r3
 800acb6:	00f6      	lsls	r6, r6, #3
 800acb8:	f8dd a008 	ldr.w	sl, [sp, #8]
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800acbc:	f04f 0b00 	mov.w	fp, #0
 800acc0:	e00d      	b.n	800acde <printAllWeight+0xca>
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800acc2:	f8ba 1882 	ldrh.w	r1, [sl, #2178]	; 0x882
 800acc6:	f008 f8e9 	bl	8012e9c <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800acca:	f1bb 0f10 	cmp.w	fp, #16
                printf("     ");
 800acce:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800acd0:	d022      	beq.n	800ad18 <printAllWeight+0x104>
                printf("     ");
 800acd2:	f008 f8e3 	bl	8012e9c <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800acd6:	f10b 0b01 	add.w	fp, fp, #1
 800acda:	f10a 0a80 	add.w	sl, sl, #128	; 0x80
    if(maze->ColumnNode[x][y].weight == 0)
 800acde:	eb0a 0106 	add.w	r1, sl, r6
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800ace2:	f1ab 0304 	sub.w	r3, fp, #4
    if(maze->ColumnNode[x][y].weight == 0)
 800ace6:	f8b1 1882 	ldrh.w	r1, [r1, #2178]	; 0x882
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800acea:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800acec:	4628      	mov	r0, r5
    if(maze->ColumnNode[x][y].weight == 0)
 800acee:	b921      	cbnz	r1, 800acfa <printAllWeight+0xe6>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d802      	bhi.n	800acfa <printAllWeight+0xe6>
 800acf4:	9b01      	ldr	r3, [sp, #4]
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d905      	bls.n	800ad06 <printAllWeight+0xf2>
            if(judgeColumnNodeGoal(maze, x,y-1) == true || ((pos->x == x) && (pos->y == y)))
 800acfa:	7823      	ldrb	r3, [r4, #0]
 800acfc:	455b      	cmp	r3, fp
 800acfe:	d1e0      	bne.n	800acc2 <printAllWeight+0xae>
 800ad00:	7863      	ldrb	r3, [r4, #1]
 800ad02:	454b      	cmp	r3, r9
 800ad04:	d1dd      	bne.n	800acc2 <printAllWeight+0xae>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->ColumnNode[x][y-1].weight);
 800ad06:	f8ba 1882 	ldrh.w	r1, [sl, #2178]	; 0x882
 800ad0a:	4820      	ldr	r0, [pc, #128]	; (800ad8c <printAllWeight+0x178>)
 800ad0c:	f008 f8c6 	bl	8012e9c <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800ad10:	f1bb 0f10 	cmp.w	fp, #16
                printf("     ");
 800ad14:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800ad16:	d1dc      	bne.n	800acd2 <printAllWeight+0xbe>
        }
        printf("\r\n");
 800ad18:	481d      	ldr	r0, [pc, #116]	; (800ad90 <printAllWeight+0x17c>)
 800ad1a:	f008 f947 	bl	8012fac <puts>
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	9a02      	ldr	r2, [sp, #8]
 800ad22:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800ad26:	f103 3aff 	add.w	sl, r3, #4294967295
 800ad2a:	9b03      	ldr	r3, [sp, #12]
 800ad2c:	3a08      	subs	r2, #8
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	9202      	str	r2, [sp, #8]
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	fa5f f28a 	uxtb.w	r2, sl
 800ad38:	9201      	str	r2, [sp, #4]
 800ad3a:	9303      	str	r3, [sp, #12]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800ad3c:	f1b9 0f00 	cmp.w	r9, #0
 800ad40:	f47f af7e 	bne.w	800ac40 <printAllWeight+0x2c>
    }
    //y が0のときの行だけ表示
    printf("  +  ");
 800ad44:	480f      	ldr	r0, [pc, #60]	; (800ad84 <printAllWeight+0x170>)
    for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
    {
        printf(" %3x ",maze->RawNode[x][0].weight);
 800ad46:	4e10      	ldr	r6, [pc, #64]	; (800ad88 <printAllWeight+0x174>)
        if(x < NUMBER_OF_SQUARES_X-1)
                printf("  +  ");
 800ad48:	4607      	mov	r7, r0
    printf("  +  ");
 800ad4a:	f008 f8a7 	bl	8012e9c <iprintf>
 800ad4e:	9b05      	ldr	r3, [sp, #20]
        printf(" %3x ",maze->RawNode[x][0].weight);
 800ad50:	4630      	mov	r0, r6
 800ad52:	8859      	ldrh	r1, [r3, #2]
 800ad54:	461c      	mov	r4, r3
 800ad56:	f008 f8a1 	bl	8012e9c <iprintf>
 800ad5a:	f504 65ff 	add.w	r5, r4, #2040	; 0x7f8
                printf("  +  ");
 800ad5e:	4638      	mov	r0, r7
 800ad60:	f008 f89c 	bl	8012e9c <iprintf>
 800ad64:	3488      	adds	r4, #136	; 0x88
        printf(" %3x ",maze->RawNode[x][0].weight);
 800ad66:	8861      	ldrh	r1, [r4, #2]
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f008 f897 	bl	8012e9c <iprintf>
        if(x < NUMBER_OF_SQUARES_X-1)
 800ad6e:	42ac      	cmp	r4, r5
 800ad70:	d1f5      	bne.n	800ad5e <printAllWeight+0x14a>
    }
    printf("\r\n");
 800ad72:	4807      	ldr	r0, [pc, #28]	; (800ad90 <printAllWeight+0x17c>)


}
 800ad74:	b007      	add	sp, #28
 800ad76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800ad7a:	f008 b917 	b.w	8012fac <puts>
 800ad7e:	bf00      	nop
 800ad80:	080162bc 	.word	0x080162bc
 800ad84:	080162d4 	.word	0x080162d4
 800ad88:	080162f0 	.word	0x080162f0
 800ad8c:	080162dc 	.word	0x080162dc
 800ad90:	08016290 	.word	0x08016290
 800ad94:	080162f8 	.word	0x080162f8

0800ad98 <printAllNodeExistence>:
        printf("\r\n");
    }
    printf("\r\n");
}
void printAllNodeExistence(maze_node *mn)
{
 800ad98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9c:	4680      	mov	r8, r0
 800ad9e:	4605      	mov	r5, r0
    printf("全ノードの壁の存在\r\n");
 800ada0:	481a      	ldr	r0, [pc, #104]	; (800ae0c <printAllNodeExistence+0x74>)
    //行を増やして同じ処理
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            printf("%u,",mn->RawNode[i][j].existence);
 800ada2:	4e1b      	ldr	r6, [pc, #108]	; (800ae10 <printAllNodeExistence+0x78>)
        }
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800ada4:	4f1b      	ldr	r7, [pc, #108]	; (800ae14 <printAllNodeExistence+0x7c>)
            if(j < NUMBER_OF_SQUARES_Y-1)
                printf(",");
        }
        printf("\r\n");
 800ada6:	f8df a070 	ldr.w	sl, [pc, #112]	; 800ae18 <printAllNodeExistence+0x80>
 800adaa:	f108 0880 	add.w	r8, r8, #128	; 0x80
 800adae:	f505 6908 	add.w	r9, r5, #2176	; 0x880
    printf("全ノードの壁の存在\r\n");
 800adb2:	f008 f8fb 	bl	8012fac <puts>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800adb6:	2401      	movs	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800adb8:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 800adbc:	4630      	mov	r0, r6
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800adbe:	3401      	adds	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800adc0:	f008 f86c 	bl	8012e9c <iprintf>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800adc4:	2c11      	cmp	r4, #17
 800adc6:	d1f7      	bne.n	800adb8 <printAllNodeExistence+0x20>
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800adc8:	f898 1880 	ldrb.w	r1, [r8, #2176]	; 0x880
 800adcc:	4638      	mov	r0, r7
 800adce:	f008 f865 	bl	8012e9c <iprintf>
 800add2:	f108 0b78 	add.w	fp, r8, #120	; 0x78
 800add6:	4644      	mov	r4, r8
                printf(",");
 800add8:	202c      	movs	r0, #44	; 0x2c
 800adda:	f008 f877 	bl	8012ecc <putchar>
 800adde:	3408      	adds	r4, #8
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800ade0:	f894 1880 	ldrb.w	r1, [r4, #2176]	; 0x880
 800ade4:	4638      	mov	r0, r7
 800ade6:	f008 f859 	bl	8012e9c <iprintf>
            if(j < NUMBER_OF_SQUARES_Y-1)
 800adea:	455c      	cmp	r4, fp
 800adec:	d1f4      	bne.n	800add8 <printAllNodeExistence+0x40>
 800adee:	f108 0880 	add.w	r8, r8, #128	; 0x80
        printf("\r\n");
 800adf2:	4650      	mov	r0, sl
 800adf4:	f008 f8da 	bl	8012fac <puts>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800adf8:	45c8      	cmp	r8, r9
 800adfa:	f105 0588 	add.w	r5, r5, #136	; 0x88
 800adfe:	d1da      	bne.n	800adb6 <printAllNodeExistence+0x1e>
    }
    printf("\r\n");
 800ae00:	4805      	ldr	r0, [pc, #20]	; (800ae18 <printAllNodeExistence+0x80>)
}
 800ae02:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800ae06:	f008 b8d1 	b.w	8012fac <puts>
 800ae0a:	bf00      	nop
 800ae0c:	0801629c 	.word	0x0801629c
 800ae10:	08016294 	.word	0x08016294
 800ae14:	08016298 	.word	0x08016298
 800ae18:	08016290 	.word	0x08016290

0800ae1c <printMatrix16ValueFromNode>:
    val += 8 * maze->ColumnNode[x][y].draw;     //西
    return val;
}
//機体からTeraTermで出力するための関数
void printMatrix16ValueFromNode(maze_node *maze)
{
 800ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae20:	4604      	mov	r4, r0
 800ae22:	b083      	sub	sp, #12
    printf("機体からTeraTermへの出力用\r\n");
 800ae24:	4822      	ldr	r0, [pc, #136]	; (800aeb0 <printMatrix16ValueFromNode+0x94>)
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
    {
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
        {
            printf("%u",convertNodeTo16Value(maze, i,j));
 800ae26:	4e23      	ldr	r6, [pc, #140]	; (800aeb4 <printMatrix16ValueFromNode+0x98>)
    printf("機体からTeraTermへの出力用\r\n");
 800ae28:	f008 f8c0 	bl	8012fac <puts>
 800ae2c:	f04f 0810 	mov.w	r8, #16
 800ae30:	f104 0280 	add.w	r2, r4, #128	; 0x80
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800ae34:	f04f 090f 	mov.w	r9, #15
 800ae38:	f1a2 0308 	sub.w	r3, r2, #8
 800ae3c:	eba9 0408 	sub.w	r4, r9, r8
 800ae40:	9301      	str	r3, [sp, #4]
 800ae42:	469a      	mov	sl, r3
 800ae44:	00e4      	lsls	r4, r4, #3
 800ae46:	f502 65ef 	add.w	r5, r2, #1912	; 0x778
 800ae4a:	f502 67ff 	add.w	r7, r2, #2040	; 0x7f8
{
 800ae4e:	4693      	mov	fp, r2
 800ae50:	e003      	b.n	800ae5a <printMatrix16ValueFromNode+0x3e>
            if(i < NUMBER_OF_SQUARES_X-1)
                printf(",");
 800ae52:	f008 f83b 	bl	8012ecc <putchar>
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800ae56:	4557      	cmp	r7, sl
 800ae58:	d01b      	beq.n	800ae92 <printMatrix16ValueFromNode+0x76>
    val += 8 * maze->ColumnNode[x][y].draw;     //西
 800ae5a:	f89a 1884 	ldrb.w	r1, [sl, #2180]	; 0x884
    val += 2 * maze->ColumnNode[x+1][y].draw;   //東
 800ae5e:	f89a e904 	ldrb.w	lr, [sl, #2308]	; 0x904
    val += 8 * maze->ColumnNode[x][y].draw;     //西
 800ae62:	f89b 0004 	ldrb.w	r0, [fp, #4]
    val += 4 * maze->RawNode[x][y].draw;        //南
 800ae66:	eb0b 0c04 	add.w	ip, fp, r4
    val += 8 * maze->ColumnNode[x][y].draw;     //西
 800ae6a:	00c9      	lsls	r1, r1, #3
 800ae6c:	eb01 014e 	add.w	r1, r1, lr, lsl #1
    val += 4 * maze->RawNode[x][y].draw;        //南
 800ae70:	f89c c004 	ldrb.w	ip, [ip, #4]
    val += 8 * maze->ColumnNode[x][y].draw;     //西
 800ae74:	4401      	add	r1, r0
 800ae76:	eb01 018c 	add.w	r1, r1, ip, lsl #2
            printf("%u",convertNodeTo16Value(maze, i,j));
 800ae7a:	b2c9      	uxtb	r1, r1
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f008 f80d 	bl	8012e9c <iprintf>
            if(i < NUMBER_OF_SQUARES_X-1)
 800ae82:	4555      	cmp	r5, sl
                printf(",");
 800ae84:	f04f 002c 	mov.w	r0, #44	; 0x2c
 800ae88:	f10a 0a80 	add.w	sl, sl, #128	; 0x80
 800ae8c:	f10b 0b88 	add.w	fp, fp, #136	; 0x88
            if(i < NUMBER_OF_SQUARES_X-1)
 800ae90:	d1df      	bne.n	800ae52 <printMatrix16ValueFromNode+0x36>
        }
        printf("\r\n");
 800ae92:	4809      	ldr	r0, [pc, #36]	; (800aeb8 <printMatrix16ValueFromNode+0x9c>)
 800ae94:	f008 f88a 	bl	8012fac <puts>
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800ae98:	f1b8 0801 	subs.w	r8, r8, #1
 800ae9c:	f109 39ff 	add.w	r9, r9, #4294967295
 800aea0:	9a01      	ldr	r2, [sp, #4]
 800aea2:	d1c9      	bne.n	800ae38 <printMatrix16ValueFromNode+0x1c>
    }
    printf("\r\n");
 800aea4:	4804      	ldr	r0, [pc, #16]	; (800aeb8 <printMatrix16ValueFromNode+0x9c>)

}
 800aea6:	b003      	add	sp, #12
 800aea8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800aeac:	f008 b87e 	b.w	8012fac <puts>
 800aeb0:	08016300 	.word	0x08016300
 800aeb4:	08016298 	.word	0x08016298
 800aeb8:	08016290 	.word	0x08016290

0800aebc <shiftState>:
    // prof->now.node->rc = 0;
    // prof->now.node->pos.x = 0;
    // prof->now.node->pos.y = 0;
}
void shiftState(profile *prof) //update
{
 800aebc:	b410      	push	{r4}
//	prof->now.node->visit = true;

    prof->now.car = prof->next.car;
//    prof->now.dir = prof->next.dir;
    prof->now.pos = prof->next.pos;
 800aebe:	8a81      	ldrh	r1, [r0, #20]
    prof->now.car = prof->next.car;
 800aec0:	7d84      	ldrb	r4, [r0, #22]
    prof->now.node = prof->next.node;//ポインタ渡し
 800aec2:	69c2      	ldr	r2, [r0, #28]
    prof->now.wall = prof->next.wall;
 800aec4:	7e03      	ldrb	r3, [r0, #24]
    prof->now.car = prof->next.car;
 800aec6:	7284      	strb	r4, [r0, #10]
    prof->now.pos = prof->next.pos;
 800aec8:	8101      	strh	r1, [r0, #8]
    prof->now.node = prof->next.node;//ポインタ渡し
 800aeca:	6102      	str	r2, [r0, #16]
    prof->now.wall = prof->next.wall;
 800aecc:	7303      	strb	r3, [r0, #12]
}
 800aece:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <getNextNode>:
        break;
    }
    return error;
}
node *getNextNode(maze_node *maze, cardinal car, node *now_node, int mask)
{
 800aed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t compare_weight=0;
    compare_weight = now_node->weight;

    _Bool flag=false;
    //printf("マイノードが01のどちらか:%d\r\n",now_node->rc);
    if(now_node->rc == 0)
 800aed8:	f892 c005 	ldrb.w	ip, [r2, #5]
    compare_weight = now_node->weight;
 800aedc:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 800aee0:	7991      	ldrb	r1, [r2, #6]
 800aee2:	79d4      	ldrb	r4, [r2, #7]
{
 800aee4:	b083      	sub	sp, #12
    if(now_node->rc == 0)
 800aee6:	f1bc 0f00 	cmp.w	ip, #0
 800aeea:	d179      	bne.n	800afe0 <getNextNode+0x10c>
#endif
        //条件がおかしい？printしている全ノードの重みと、アドレスを入れたはずのマイノードの重みが違う

        //行にいるとき
        //北側ノード
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800aeec:	2c0e      	cmp	r4, #14
 800aeee:	f104 38ff 	add.w	r8, r4, #4294967295
        {

            //printf("%u\r\n",now_node->pos.y);
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800aef2:	ea4f 1601 	mov.w	r6, r1, lsl #4
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800aef6:	f200 80db 	bhi.w	800b0b0 <getNextNode+0x1dc>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800aefa:	1877      	adds	r7, r6, r1
 800aefc:	f104 0901 	add.w	r9, r4, #1
 800af00:	444f      	add	r7, r9
 800af02:	f810 a037 	ldrb.w	sl, [r0, r7, lsl #3]
 800af06:	ea1a 0f03 	tst.w	sl, r3
 800af0a:	d114      	bne.n	800af36 <getNextNode+0x62>
            {
            	static int cnt = 1;
//            				ChangeLED(cnt%7);
            				cnt ++;
 800af0c:	f8df a288 	ldr.w	sl, [pc, #648]	; 800b198 <getNextNode+0x2c4>


                // printf("%d\r\n", maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence);//壁があることになってた..
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800af10:	eb00 0bc7 	add.w	fp, r0, r7, lsl #3
            				cnt ++;
 800af14:	f8da 7000 	ldr.w	r7, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800af18:	f8bb b002 	ldrh.w	fp, [fp, #2]
            				cnt ++;
 800af1c:	3701      	adds	r7, #1
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800af1e:	45f3      	cmp	fp, lr
            				cnt ++;
 800af20:	f8ca 7000 	str.w	r7, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800af24:	d207      	bcs.n	800af36 <getNextNode+0x62>

#if DEBUG_ON
                    printf("北へ\r\n");
#endif
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800af26:	2511      	movs	r5, #17
 800af28:	fb15 9501 	smlabb	r5, r5, r1, r9
 800af2c:	46de      	mov	lr, fp
 800af2e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800af32:	f04f 0c01 	mov.w	ip, #1
                }
            }
        }
        //南へ側ノード
        if(now_node->pos.y > 1)						//範囲チェック
 800af36:	2c01      	cmp	r4, #1
 800af38:	f200 80ba 	bhi.w	800b0b0 <getNextNode+0x1dc>
                    flag = true;
                }
            }
        }
        //東へ側に斜めが2方向
        if(now_node->pos.x +1 < NUMBER_OF_SQUARES_X)					//範囲チェック
 800af3c:	290e      	cmp	r1, #14
 800af3e:	d82d      	bhi.n	800af9c <getNextNode+0xc8>
        {
            //北東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800af40:	1c4e      	adds	r6, r1, #1
 800af42:	0136      	lsls	r6, r6, #4
 800af44:	1937      	adds	r7, r6, r4
 800af46:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 800af4a:	f897 9880 	ldrb.w	r9, [r7, #2176]	; 0x880
 800af4e:	ea19 0f03 	tst.w	r9, r3
 800af52:	d10b      	bne.n	800af6c <getNextNode+0x98>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800af54:	f8b7 7882 	ldrh.w	r7, [r7, #2178]	; 0x882
 800af58:	4577      	cmp	r7, lr
 800af5a:	d207      	bcs.n	800af6c <getNextNode+0x98>
                {
#if DEBUG_ON
                    printf("北東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800af5c:	f504 7588 	add.w	r5, r4, #272	; 0x110
 800af60:	4435      	add	r5, r6
 800af62:	46be      	mov	lr, r7
 800af64:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800af68:	f04f 0c01 	mov.w	ip, #1
 800af6c:	eb08 0706 	add.w	r7, r8, r6
 800af70:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
                }
            }

            //南へ東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800af74:	f897 9880 	ldrb.w	r9, [r7, #2176]	; 0x880
 800af78:	ea19 0f03 	tst.w	r9, r3
 800af7c:	f040 80c2 	bne.w	800b104 <getNextNode+0x230>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800af80:	f8b7 7882 	ldrh.w	r7, [r7, #2178]	; 0x882
 800af84:	4577      	cmp	r7, lr
 800af86:	f080 80bd 	bcs.w	800b104 <getNextNode+0x230>
                {
#if DEBUG_ON
                    printf("南東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
 800af8a:	f508 7588 	add.w	r5, r8, #272	; 0x110
 800af8e:	4435      	add	r5, r6
 800af90:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                }
            }
        }

        //西へ側に斜めが2方向
        if(now_node->pos.x > 0)						//範囲チェック
 800af94:	b301      	cbz	r1, 800afd8 <getNextNode+0x104>
 800af96:	46be      	mov	lr, r7
                    flag = true;
 800af98:	f04f 0c01 	mov.w	ip, #1
 800af9c:	0109      	lsls	r1, r1, #4
 800af9e:	1866      	adds	r6, r4, r1
 800afa0:	eb01 0708 	add.w	r7, r1, r8
 800afa4:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800afa8:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
        {
            //北西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800afac:	f896 9880 	ldrb.w	r9, [r6, #2176]	; 0x880
 800afb0:	f897 a880 	ldrb.w	sl, [r7, #2176]	; 0x880
 800afb4:	ea19 0f03 	tst.w	r9, r3
 800afb8:	ea0a 0a03 	and.w	sl, sl, r3
 800afbc:	f000 80c3 	beq.w	800b146 <getNextNode+0x272>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
                    flag = true;
                }
            }
            //南へ西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800afc0:	f1ba 0f00 	cmp.w	sl, #0
 800afc4:	d104      	bne.n	800afd0 <getNextNode+0xfc>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800afc6:	f8b7 3882 	ldrh.w	r3, [r7, #2178]	; 0x882
 800afca:	4573      	cmp	r3, lr
 800afcc:	f0c0 80ce 	bcc.w	800b16c <getNextNode+0x298>
 800afd0:	f1bc 0f00 	cmp.w	ip, #0
 800afd4:	bf08      	it	eq
 800afd6:	4615      	moveq	r5, r2
        return now_node;//万が一更新されなかったら、今いるノードが目標ノードなので、停止するはず。
        //停止しなかった。前回の情報がそのまま反映されるだけ
    }
    return now_node; //

}
 800afd8:	4628      	mov	r0, r5
 800afda:	b003      	add	sp, #12
 800afdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800afe0:	290e      	cmp	r1, #14
 800afe2:	f101 39ff 	add.w	r9, r1, #4294967295
 800afe6:	d979      	bls.n	800b0dc <getNextNode+0x208>
    _Bool flag=false;
 800afe8:	2600      	movs	r6, #0
 800afea:	9601      	str	r6, [sp, #4]
 800afec:	ea4f 1809 	mov.w	r8, r9, lsl #4
 800aff0:	eb08 0604 	add.w	r6, r8, r4
 800aff4:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
            if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ
 800aff8:	f896 a880 	ldrb.w	sl, [r6, #2176]	; 0x880
 800affc:	ea1a 0f03 	tst.w	sl, r3
 800b000:	d10b      	bne.n	800b01a <getNextNode+0x146>
                if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b002:	f8b6 6882 	ldrh.w	r6, [r6, #2178]	; 0x882
 800b006:	4576      	cmp	r6, lr
 800b008:	d207      	bcs.n	800b01a <getNextNode+0x146>
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
 800b00a:	f504 7588 	add.w	r5, r4, #272	; 0x110
 800b00e:	4445      	add	r5, r8
 800b010:	46b6      	mov	lr, r6
 800b012:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800b016:	f8cd c004 	str.w	ip, [sp, #4]
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b01a:	2c0e      	cmp	r4, #14
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800b01c:	ea4f 1601 	mov.w	r6, r1, lsl #4
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b020:	d82a      	bhi.n	800b078 <getNextNode+0x1a4>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800b022:	eb06 0a01 	add.w	sl, r6, r1
 800b026:	f104 0b01 	add.w	fp, r4, #1
 800b02a:	44da      	add	sl, fp
 800b02c:	f810 703a 	ldrb.w	r7, [r0, sl, lsl #3]
 800b030:	421f      	tst	r7, r3
 800b032:	d10d      	bne.n	800b050 <getNextNode+0x17c>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b034:	eb00 0aca 	add.w	sl, r0, sl, lsl #3
 800b038:	f8ba a002 	ldrh.w	sl, [sl, #2]
 800b03c:	45f2      	cmp	sl, lr
 800b03e:	d207      	bcs.n	800b050 <getNextNode+0x17c>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800b040:	2511      	movs	r5, #17
 800b042:	fb15 b501 	smlabb	r5, r5, r1, fp
 800b046:	46d6      	mov	lr, sl
 800b048:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800b04c:	f8cd c004 	str.w	ip, [sp, #4]
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800b050:	eb08 0a09 	add.w	sl, r8, r9
 800b054:	44da      	add	sl, fp
 800b056:	f810 b03a 	ldrb.w	fp, [r0, sl, lsl #3]
 800b05a:	ea1b 0f03 	tst.w	fp, r3
 800b05e:	d155      	bne.n	800b10c <getNextNode+0x238>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800b060:	eb00 0aca 	add.w	sl, r0, sl, lsl #3
 800b064:	f8ba b002 	ldrh.w	fp, [sl, #2]
 800b068:	45f3      	cmp	fp, lr
 800b06a:	d24f      	bcs.n	800b10c <getNextNode+0x238>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y+1]);
 800b06c:	4655      	mov	r5, sl
        if(now_node->pos.y > 0)						//範囲チェック
 800b06e:	2c00      	cmp	r4, #0
 800b070:	d0b2      	beq.n	800afd8 <getNextNode+0x104>
                    flag = true;
 800b072:	f8cd c004 	str.w	ip, [sp, #4]
        if(now_node->pos.y > 0)						//範囲チェック
 800b076:	46de      	mov	lr, fp
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b078:	440e      	add	r6, r1
 800b07a:	eb08 0c09 	add.w	ip, r8, r9
 800b07e:	4426      	add	r6, r4
 800b080:	44a4      	add	ip, r4
 800b082:	f810 b036 	ldrb.w	fp, [r0, r6, lsl #3]
 800b086:	f810 a03c 	ldrb.w	sl, [r0, ip, lsl #3]
 800b08a:	ea1b 0f03 	tst.w	fp, r3
 800b08e:	ea0a 0a03 	and.w	sl, sl, r3
 800b092:	d03e      	beq.n	800b112 <getNextNode+0x23e>
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b094:	f1ba 0f00 	cmp.w	sl, #0
 800b098:	d107      	bne.n	800b0aa <getNextNode+0x1d6>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b09a:	eb08 0309 	add.w	r3, r8, r9
 800b09e:	4423      	add	r3, r4
 800b0a0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b0a4:	885b      	ldrh	r3, [r3, #2]
 800b0a6:	4573      	cmp	r3, lr
 800b0a8:	d348      	bcc.n	800b13c <getNextNode+0x268>
 800b0aa:	f8dd c004 	ldr.w	ip, [sp, #4]
 800b0ae:	e78f      	b.n	800afd0 <getNextNode+0xfc>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)	//壁がなければ
 800b0b0:	440e      	add	r6, r1
 800b0b2:	4446      	add	r6, r8
 800b0b4:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800b0b8:	421f      	tst	r7, r3
 800b0ba:	f47f af3f 	bne.w	800af3c <getNextNode+0x68>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b0be:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b0c2:	8876      	ldrh	r6, [r6, #2]
 800b0c4:	4576      	cmp	r6, lr
 800b0c6:	f4bf af39 	bcs.w	800af3c <getNextNode+0x68>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
 800b0ca:	2511      	movs	r5, #17
 800b0cc:	fb15 8501 	smlabb	r5, r5, r1, r8
 800b0d0:	46b6      	mov	lr, r6
 800b0d2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800b0d6:	f04f 0c01 	mov.w	ip, #1
 800b0da:	e72f      	b.n	800af3c <getNextNode+0x68>
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b0dc:	f101 0801 	add.w	r8, r1, #1
 800b0e0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800b0e4:	eb04 0608 	add.w	r6, r4, r8
 800b0e8:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b0ec:	f896 7880 	ldrb.w	r7, [r6, #2176]	; 0x880
 800b0f0:	401f      	ands	r7, r3
 800b0f2:	d041      	beq.n	800b178 <getNextNode+0x2a4>
    _Bool flag=false;
 800b0f4:	2600      	movs	r6, #0
 800b0f6:	9601      	str	r6, [sp, #4]
        if(now_node->pos.x > 1)						//範囲チェック
 800b0f8:	2901      	cmp	r1, #1
 800b0fa:	f63f af77 	bhi.w	800afec <getNextNode+0x118>
 800b0fe:	ea4f 1809 	mov.w	r8, r9, lsl #4
 800b102:	e78a      	b.n	800b01a <getNextNode+0x146>
        if(now_node->pos.x > 0)						//範囲チェック
 800b104:	2900      	cmp	r1, #0
 800b106:	f43f af63 	beq.w	800afd0 <getNextNode+0xfc>
 800b10a:	e747      	b.n	800af9c <getNextNode+0xc8>
        if(now_node->pos.y > 0)						//範囲チェック
 800b10c:	2c00      	cmp	r4, #0
 800b10e:	d0cc      	beq.n	800b0aa <getNextNode+0x1d6>
 800b110:	e7b2      	b.n	800b078 <getNextNode+0x1a4>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800b112:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b116:	8873      	ldrh	r3, [r6, #2]
 800b118:	4573      	cmp	r3, lr
 800b11a:	d2bb      	bcs.n	800b094 <getNextNode+0x1c0>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y]);
 800b11c:	2511      	movs	r5, #17
 800b11e:	fb15 4101 	smlabb	r1, r5, r1, r4
 800b122:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b126:	f1ba 0f00 	cmp.w	sl, #0
 800b12a:	f47f af55 	bne.w	800afd8 <getNextNode+0x104>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b12e:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800b132:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b136:	429a      	cmp	r2, r3
 800b138:	f4bf af4e 	bcs.w	800afd8 <getNextNode+0x104>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y]);
 800b13c:	44c8      	add	r8, r9
 800b13e:	4444      	add	r4, r8
 800b140:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 800b144:	e748      	b.n	800afd8 <getNextNode+0x104>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight)
 800b146:	f8b6 3882 	ldrh.w	r3, [r6, #2178]	; 0x882
 800b14a:	4573      	cmp	r3, lr
 800b14c:	f4bf af38 	bcs.w	800afc0 <getNextNode+0xec>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
 800b150:	f504 7588 	add.w	r5, r4, #272	; 0x110
 800b154:	440d      	add	r5, r1
 800b156:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800b15a:	f1ba 0f00 	cmp.w	sl, #0
 800b15e:	f47f af3b 	bne.w	800afd8 <getNextNode+0x104>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b162:	f8b7 2882 	ldrh.w	r2, [r7, #2178]	; 0x882
 800b166:	429a      	cmp	r2, r3
 800b168:	f4bf af36 	bcs.w	800afd8 <getNextNode+0x104>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y-1]);
 800b16c:	f508 7588 	add.w	r5, r8, #272	; 0x110
 800b170:	440d      	add	r5, r1
 800b172:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800b176:	e72f      	b.n	800afd8 <getNextNode+0x104>
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800b178:	f8b6 6882 	ldrh.w	r6, [r6, #2178]	; 0x882
 800b17c:	4576      	cmp	r6, lr
 800b17e:	d208      	bcs.n	800b192 <getNextNode+0x2be>
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800b180:	f504 7588 	add.w	r5, r4, #272	; 0x110
 800b184:	4445      	add	r5, r8
 800b186:	46b6      	mov	lr, r6
 800b188:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800b18c:	f8cd c004 	str.w	ip, [sp, #4]
 800b190:	e7b2      	b.n	800b0f8 <getNextNode+0x224>
    _Bool flag=false;
 800b192:	9701      	str	r7, [sp, #4]
 800b194:	e7b0      	b.n	800b0f8 <getNextNode+0x224>
 800b196:	bf00      	nop
 800b198:	20000000 	.word	0x20000000

0800b19c <judgeAccelorNot>:

	compare_weight = now_node->weight;

	_Bool flag=false;
	//現ノードから3方向ノードを見て、未知なら即return
	if(now_node->rc == 0)
 800b19c:	7953      	ldrb	r3, [r2, #5]
{
 800b19e:	b4f0      	push	{r4, r5, r6, r7}
 800b1a0:	f001 0107 	and.w	r1, r1, #7
	compare_weight = now_node->weight;
 800b1a4:	8854      	ldrh	r4, [r2, #2]
	if(now_node->rc == 0)
 800b1a6:	bb7b      	cbnz	r3, 800b208 <judgeAccelorNot+0x6c>
	{
		switch(car%8)
 800b1a8:	2900      	cmp	r1, #0
 800b1aa:	f000 8086 	beq.w	800b2ba <judgeAccelorNot+0x11e>
 800b1ae:	2904      	cmp	r1, #4
 800b1b0:	d127      	bne.n	800b202 <judgeAccelorNot+0x66>
	            }
	        }
	        break;
		case south:
			//南へ
			if(now_node->pos.y > 1)						//範囲チェック
 800b1b2:	79d5      	ldrb	r5, [r2, #7]
 800b1b4:	7992      	ldrb	r2, [r2, #6]
 800b1b6:	2d01      	cmp	r5, #1
 800b1b8:	f105 31ff 	add.w	r1, r5, #4294967295
 800b1bc:	d909      	bls.n	800b1d2 <judgeAccelorNot+0x36>
			{
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)	//壁がなければ
 800b1be:	eb02 1502 	add.w	r5, r2, r2, lsl #4
 800b1c2:	440d      	add	r5, r1
 800b1c4:	f810 6035 	ldrb.w	r6, [r0, r5, lsl #3]
 800b1c8:	2e02      	cmp	r6, #2
 800b1ca:	d01a      	beq.n	800b202 <judgeAccelorNot+0x66>
				{
					return false;
				}
					//重みを比較して更新
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)
 800b1cc:	2e00      	cmp	r6, #0
 800b1ce:	f000 80d4 	beq.w	800b37a <judgeAccelorNot+0x1de>
	_Bool flag=false;
 800b1d2:	461e      	mov	r6, r3
//						next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
						flag = true;
					}
				}
			}
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b1d4:	2a0e      	cmp	r2, #14
 800b1d6:	f200 80c1 	bhi.w	800b35c <judgeAccelorNot+0x1c0>
			{
				//南へ東へ
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800b1da:	1c55      	adds	r5, r2, #1
 800b1dc:	eb01 1505 	add.w	r5, r1, r5, lsl #4
 800b1e0:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800b1e4:	f895 7880 	ldrb.w	r7, [r5, #2176]	; 0x880
 800b1e8:	2f02      	cmp	r7, #2
 800b1ea:	d00a      	beq.n	800b202 <judgeAccelorNot+0x66>
				{
					return false;
				}
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800b1ec:	b92f      	cbnz	r7, 800b1fa <judgeAccelorNot+0x5e>
				{
					//重みを比較して更新
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800b1ee:	f8b5 5882 	ldrh.w	r5, [r5, #2178]	; 0x882
 800b1f2:	42a5      	cmp	r5, r4
					{
						compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
//						next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
						flag = false;
 800b1f4:	bf3c      	itt	cc
 800b1f6:	463e      	movcc	r6, r7
 800b1f8:	462c      	movcc	r4, r5
					}
				}
			}
			if(now_node->pos.x > 0)						//範囲チェック
 800b1fa:	2a00      	cmp	r2, #0
 800b1fc:	f040 80ae 	bne.w	800b35c <judgeAccelorNot+0x1c0>
 800b200:	4633      	mov	r3, r6
	}
	return flag; //壁が全部あるときもfalseになっている
	//未知があった時点でreturn false
	//直進かどうかまで見て、直進でなければfalse
	//既知でかつ直進ならtrue
}
 800b202:	4618      	mov	r0, r3
 800b204:	bcf0      	pop	{r4, r5, r6, r7}
 800b206:	4770      	bx	lr
		switch(car%8)
 800b208:	2902      	cmp	r1, #2
 800b20a:	d036      	beq.n	800b27a <judgeAccelorNot+0xde>
 800b20c:	2906      	cmp	r1, #6
 800b20e:	d150      	bne.n	800b2b2 <judgeAccelorNot+0x116>
			if(now_node->pos.x > 1)						//範囲チェック
 800b210:	7995      	ldrb	r5, [r2, #6]
 800b212:	79d1      	ldrb	r1, [r2, #7]
 800b214:	2d01      	cmp	r5, #1
 800b216:	f105 36ff 	add.w	r6, r5, #4294967295
 800b21a:	f240 80ab 	bls.w	800b374 <judgeAccelorNot+0x1d8>
 800b21e:	0132      	lsls	r2, r6, #4
 800b220:	1855      	adds	r5, r2, r1
 800b222:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
				if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) ==UNKNOWN)	//壁がなければ
 800b226:	f895 7880 	ldrb.w	r7, [r5, #2176]	; 0x880
 800b22a:	2f02      	cmp	r7, #2
 800b22c:	d041      	beq.n	800b2b2 <judgeAccelorNot+0x116>
				else if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ
 800b22e:	2f00      	cmp	r7, #0
 800b230:	f000 80ac 	beq.w	800b38c <judgeAccelorNot+0x1f0>
	_Bool flag=false;
 800b234:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b236:	290e      	cmp	r1, #14
 800b238:	d810      	bhi.n	800b25c <judgeAccelorNot+0xc0>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b23a:	1997      	adds	r7, r2, r6
 800b23c:	1c4d      	adds	r5, r1, #1
 800b23e:	443d      	add	r5, r7
 800b240:	f810 7035 	ldrb.w	r7, [r0, r5, lsl #3]
 800b244:	2f02      	cmp	r7, #2
 800b246:	d034      	beq.n	800b2b2 <judgeAccelorNot+0x116>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800b248:	b937      	cbnz	r7, 800b258 <judgeAccelorNot+0xbc>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800b24a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800b24e:	886d      	ldrh	r5, [r5, #2]
 800b250:	42a5      	cmp	r5, r4
 800b252:	bf3c      	itt	cc
 800b254:	462c      	movcc	r4, r5
						flag = false;
 800b256:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800b258:	2900      	cmp	r1, #0
 800b25a:	d0d2      	beq.n	800b202 <judgeAccelorNot+0x66>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800b25c:	4432      	add	r2, r6
 800b25e:	440a      	add	r2, r1
 800b260:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800b264:	2902      	cmp	r1, #2
 800b266:	d024      	beq.n	800b2b2 <judgeAccelorNot+0x116>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800b268:	2900      	cmp	r1, #0
 800b26a:	d1ca      	bne.n	800b202 <judgeAccelorNot+0x66>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b26c:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800b270:	8842      	ldrh	r2, [r0, #2]
	                    flag = false;
 800b272:	42a2      	cmp	r2, r4
 800b274:	bf38      	it	cc
 800b276:	2300      	movcc	r3, #0
 800b278:	e7c3      	b.n	800b202 <judgeAccelorNot+0x66>
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b27a:	7991      	ldrb	r1, [r2, #6]
 800b27c:	79d5      	ldrb	r5, [r2, #7]
 800b27e:	290e      	cmp	r1, #14
 800b280:	d80b      	bhi.n	800b29a <judgeAccelorNot+0xfe>
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b282:	1c4a      	adds	r2, r1, #1
 800b284:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 800b288:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800b28c:	f892 6880 	ldrb.w	r6, [r2, #2176]	; 0x880
 800b290:	2e02      	cmp	r6, #2
 800b292:	d00e      	beq.n	800b2b2 <judgeAccelorNot+0x116>
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b294:	2e00      	cmp	r6, #0
 800b296:	f000 8088 	beq.w	800b3aa <judgeAccelorNot+0x20e>
	_Bool flag=false;
 800b29a:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b29c:	2d0e      	cmp	r5, #14
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b29e:	ea4f 1201 	mov.w	r2, r1, lsl #4
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b2a2:	d84b      	bhi.n	800b33c <judgeAccelorNot+0x1a0>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b2a4:	1c6f      	adds	r7, r5, #1
 800b2a6:	1856      	adds	r6, r2, r1
 800b2a8:	443e      	add	r6, r7
 800b2aa:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800b2ae:	2f02      	cmp	r7, #2
 800b2b0:	d139      	bne.n	800b326 <judgeAccelorNot+0x18a>
	                    flag = false;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	bcf0      	pop	{r4, r5, r6, r7}
 800b2b8:	4770      	bx	lr
	        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b2ba:	79d1      	ldrb	r1, [r2, #7]
 800b2bc:	7992      	ldrb	r2, [r2, #6]
 800b2be:	290e      	cmp	r1, #14
 800b2c0:	d809      	bhi.n	800b2d6 <judgeAccelorNot+0x13a>
	            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b2c2:	eb02 1602 	add.w	r6, r2, r2, lsl #4
 800b2c6:	1c4d      	adds	r5, r1, #1
 800b2c8:	4435      	add	r5, r6
 800b2ca:	f810 6035 	ldrb.w	r6, [r0, r5, lsl #3]
 800b2ce:	2e02      	cmp	r6, #2
 800b2d0:	d097      	beq.n	800b202 <judgeAccelorNot+0x66>
	            else if((maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == NOWALL)
 800b2d2:	2e00      	cmp	r6, #0
 800b2d4:	d061      	beq.n	800b39a <judgeAccelorNot+0x1fe>
	_Bool flag=false;
 800b2d6:	461e      	mov	r6, r3
	        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b2d8:	2a0e      	cmp	r2, #14
 800b2da:	d812      	bhi.n	800b302 <judgeAccelorNot+0x166>
	            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == UNKNOWN)
 800b2dc:	1c55      	adds	r5, r2, #1
 800b2de:	eb01 1505 	add.w	r5, r1, r5, lsl #4
 800b2e2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800b2e6:	f895 7880 	ldrb.w	r7, [r5, #2176]	; 0x880
 800b2ea:	2f02      	cmp	r7, #2
 800b2ec:	d089      	beq.n	800b202 <judgeAccelorNot+0x66>
	            else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == NOWALL)
 800b2ee:	b92f      	cbnz	r7, 800b2fc <judgeAccelorNot+0x160>
	                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800b2f0:	f8b5 5882 	ldrh.w	r5, [r5, #2178]	; 0x882
 800b2f4:	42a5      	cmp	r5, r4
	                    flag = false;
 800b2f6:	bf3c      	itt	cc
 800b2f8:	463e      	movcc	r6, r7
 800b2fa:	462c      	movcc	r4, r5
	        if(now_node->pos.x > 0)						//範囲チェック
 800b2fc:	2a00      	cmp	r2, #0
 800b2fe:	f43f af7f 	beq.w	800b200 <judgeAccelorNot+0x64>
 800b302:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800b306:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
	            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800b30a:	f890 2880 	ldrb.w	r2, [r0, #2176]	; 0x880
 800b30e:	2a02      	cmp	r2, #2
 800b310:	f43f af77 	beq.w	800b202 <judgeAccelorNot+0x66>
				else if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800b314:	2a00      	cmp	r2, #0
 800b316:	f47f af73 	bne.w	800b200 <judgeAccelorNot+0x64>
					if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b31a:	f8b0 2882 	ldrh.w	r2, [r0, #2178]	; 0x882
 800b31e:	42a2      	cmp	r2, r4
 800b320:	bf28      	it	cs
 800b322:	4633      	movcs	r3, r6
 800b324:	e76d      	b.n	800b202 <judgeAccelorNot+0x66>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800b326:	b937      	cbnz	r7, 800b336 <judgeAccelorNot+0x19a>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b328:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b32c:	8876      	ldrh	r6, [r6, #2]
 800b32e:	42a6      	cmp	r6, r4
 800b330:	bf3c      	itt	cc
 800b332:	4634      	movcc	r4, r6
						flag = false;
 800b334:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800b336:	2d00      	cmp	r5, #0
 800b338:	f43f af63 	beq.w	800b202 <judgeAccelorNot+0x66>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800b33c:	4411      	add	r1, r2
 800b33e:	4429      	add	r1, r5
 800b340:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
 800b344:	2a02      	cmp	r2, #2
 800b346:	d0b4      	beq.n	800b2b2 <judgeAccelorNot+0x116>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800b348:	2a00      	cmp	r2, #0
 800b34a:	f47f af5a 	bne.w	800b202 <judgeAccelorNot+0x66>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800b34e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b352:	8842      	ldrh	r2, [r0, #2]
	                    flag = false;
 800b354:	42a2      	cmp	r2, r4
 800b356:	bf38      	it	cc
 800b358:	2300      	movcc	r3, #0
 800b35a:	e752      	b.n	800b202 <judgeAccelorNot+0x66>
 800b35c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800b360:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
				if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800b364:	f890 2880 	ldrb.w	r2, [r0, #2176]	; 0x880
 800b368:	2a02      	cmp	r2, #2
 800b36a:	f43f af4a 	beq.w	800b202 <judgeAccelorNot+0x66>
				else if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800b36e:	2a00      	cmp	r2, #0
 800b370:	d0d3      	beq.n	800b31a <judgeAccelorNot+0x17e>
 800b372:	e745      	b.n	800b200 <judgeAccelorNot+0x64>
	_Bool flag=false;
 800b374:	2300      	movs	r3, #0
 800b376:	0132      	lsls	r2, r6, #4
 800b378:	e75d      	b.n	800b236 <judgeAccelorNot+0x9a>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b37a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800b37e:	886d      	ldrh	r5, [r5, #2]
 800b380:	42a5      	cmp	r5, r4
 800b382:	f4bf af26 	bcs.w	800b1d2 <judgeAccelorNot+0x36>
 800b386:	462c      	mov	r4, r5
						flag = true;
 800b388:	2601      	movs	r6, #1
 800b38a:	e723      	b.n	800b1d4 <judgeAccelorNot+0x38>
					if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b38c:	f8b5 5882 	ldrh.w	r5, [r5, #2178]	; 0x882
 800b390:	42a5      	cmp	r5, r4
 800b392:	f4bf af4f 	bcs.w	800b234 <judgeAccelorNot+0x98>
 800b396:	462c      	mov	r4, r5
 800b398:	e74d      	b.n	800b236 <judgeAccelorNot+0x9a>
	                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b39a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800b39e:	886d      	ldrh	r5, [r5, #2]
 800b3a0:	42a5      	cmp	r5, r4
 800b3a2:	d298      	bcs.n	800b2d6 <judgeAccelorNot+0x13a>
 800b3a4:	462c      	mov	r4, r5
	                    flag = true;
 800b3a6:	2601      	movs	r6, #1
 800b3a8:	e796      	b.n	800b2d8 <judgeAccelorNot+0x13c>
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800b3aa:	f8b2 2882 	ldrh.w	r2, [r2, #2178]	; 0x882
 800b3ae:	42a2      	cmp	r2, r4
 800b3b0:	f4bf af73 	bcs.w	800b29a <judgeAccelorNot+0xfe>
 800b3b4:	4614      	mov	r4, r2
 800b3b6:	e771      	b.n	800b29c <judgeAccelorNot+0x100>

0800b3b8 <getNextState>:
state *getNextState(state *now_state, state *next_state, node *next_node)
{
 800b3b8:	b4f0      	push	{r4, r5, r6, r7}
    uint8_t now_x = now_state->node->pos.x;
    uint8_t now_y = now_state->node->pos.y;
    uint8_t next_x = next_node->pos.x;
    uint8_t next_y = next_node->pos.y;

    switch(now_state->car%8)
 800b3ba:	7883      	ldrb	r3, [r0, #2]
    uint8_t now_x = now_state->node->pos.x;
 800b3bc:	6884      	ldr	r4, [r0, #8]
    uint8_t next_x = next_node->pos.x;
 800b3be:	7996      	ldrb	r6, [r2, #6]
    uint8_t now_x = now_state->node->pos.x;
 800b3c0:	79a5      	ldrb	r5, [r4, #6]
    uint8_t next_y = next_node->pos.y;
 800b3c2:	79d7      	ldrb	r7, [r2, #7]
    uint8_t now_y = now_state->node->pos.y;
 800b3c4:	79e4      	ldrb	r4, [r4, #7]
    switch(now_state->car%8)
 800b3c6:	f003 0307 	and.w	r3, r3, #7
 800b3ca:	2b06      	cmp	r3, #6
 800b3cc:	d81e      	bhi.n	800b40c <getNextState+0x54>
 800b3ce:	e8df f003 	tbb	[pc, r3]
 800b3d2:	1d04      	.short	0x1d04
 800b3d4:	1d341d4e 	.word	0x1d341d4e
 800b3d8:	20          	.byte	0x20
 800b3d9:	00          	.byte	0x00
    {
        case north://行から、列に行くのか行に行くのかで、差分の取り方を変える
            if(next_node->rc == 0)
 800b3da:	7953      	ldrb	r3, [r2, #5]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d059      	beq.n	800b494 <getNextState+0xdc>
            if(next_node->rc == 1)
            {
                //行から列.左右のどちらか判断.あとで後ろも候補にあげる
                //右旋回
                //北向きから北東
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b3e0:	1c6b      	adds	r3, r5, #1
 800b3e2:	42b3      	cmp	r3, r6
 800b3e4:	f000 80c3 	beq.w	800b56e <getNextState+0x1b6>
                    return next_state;
                }

                //左旋回
                //北向きから北西
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b3e8:	42b5      	cmp	r5, r6
 800b3ea:	d10f      	bne.n	800b40c <getNextState+0x54>
 800b3ec:	42bc      	cmp	r4, r7
 800b3ee:	f000 8119 	beq.w	800b624 <getNextState+0x26c>
 800b3f2:	3c01      	subs	r4, #1
                    return next_state;
                }

                //Uターンして右旋回
                //北向きから南西
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b3f4:	42bc      	cmp	r4, r7
 800b3f6:	d109      	bne.n	800b40c <getNextState+0x54>
                {
                    next_state->car = west;
 800b3f8:	2306      	movs	r3, #6
 800b3fa:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b3fc:	7803      	ldrb	r3, [r0, #0]
 800b3fe:	3b01      	subs	r3, #1
                //Uターンして右旋回
                //西向きから南東
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
                {
                    next_state->car = south;
                    next_state->pos.x = now_state->pos.x + 1;
 800b400:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b402:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = backright;
 800b404:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y - 1;
 800b406:	3b01      	subs	r3, #1
 800b408:	704b      	strb	r3, [r1, #1]
                    now_state->dir = backright;
 800b40a:	70c2      	strb	r2, [r0, #3]
#if DEBUG_ON
    printf("エラー in function 'getNextState'.\r\n");
#endif

    return next_state; //ここまで来てしまったらエラー
}
 800b40c:	4608      	mov	r0, r1
 800b40e:	bcf0      	pop	{r4, r5, r6, r7}
 800b410:	4770      	bx	lr
            if(next_node->rc == 1)
 800b412:	7953      	ldrb	r3, [r2, #5]
 800b414:	1e6a      	subs	r2, r5, #1
 800b416:	2b00      	cmp	r3, #0
 800b418:	d05b      	beq.n	800b4d2 <getNextState+0x11a>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b41a:	42b2      	cmp	r2, r6
 800b41c:	f000 808f 	beq.w	800b53e <getNextState+0x186>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b420:	3501      	adds	r5, #1
 800b422:	42ae      	cmp	r6, r5
 800b424:	d1f2      	bne.n	800b40c <getNextState+0x54>
 800b426:	42bc      	cmp	r4, r7
 800b428:	d1f0      	bne.n	800b40c <getNextState+0x54>
                    next_state->car = east;
 800b42a:	2302      	movs	r3, #2
 800b42c:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 2;
 800b42e:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = back;
 800b430:	2204      	movs	r2, #4
                    next_state->pos.x = now_state->pos.x + 2;
 800b432:	3302      	adds	r3, #2
 800b434:	700b      	strb	r3, [r1, #0]
                    now_state->dir = back;
 800b436:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b438:	e7e8      	b.n	800b40c <getNextState+0x54>
            if(next_node->rc == 0)
 800b43a:	7953      	ldrb	r3, [r2, #5]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d039      	beq.n	800b4b4 <getNextState+0xfc>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b440:	42b5      	cmp	r5, r6
 800b442:	f000 80a3 	beq.w	800b58c <getNextState+0x1d4>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b446:	3501      	adds	r5, #1
 800b448:	42b5      	cmp	r5, r6
 800b44a:	d1df      	bne.n	800b40c <getNextState+0x54>
 800b44c:	1e63      	subs	r3, r4, #1
 800b44e:	42bb      	cmp	r3, r7
 800b450:	f000 80e0 	beq.w	800b614 <getNextState+0x25c>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b454:	42bc      	cmp	r4, r7
 800b456:	d1d9      	bne.n	800b40c <getNextState+0x54>
                    next_state->car = east;
 800b458:	2302      	movs	r3, #2
 800b45a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b45c:	7803      	ldrb	r3, [r0, #0]
 800b45e:	3301      	adds	r3, #1
 800b460:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b462:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = backright;
 800b464:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y + 1;
 800b466:	3301      	adds	r3, #1
 800b468:	704b      	strb	r3, [r1, #1]
                    now_state->dir = backright;
 800b46a:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b46c:	e7ce      	b.n	800b40c <getNextState+0x54>
            if(next_node->rc == 1)
 800b46e:	7953      	ldrb	r3, [r2, #5]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d042      	beq.n	800b4fa <getNextState+0x142>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b474:	1c6b      	adds	r3, r5, #1
 800b476:	42b3      	cmp	r3, r6
 800b478:	d056      	beq.n	800b528 <getNextState+0x170>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b47a:	3d01      	subs	r5, #1
 800b47c:	42ae      	cmp	r6, r5
 800b47e:	d1c5      	bne.n	800b40c <getNextState+0x54>
 800b480:	42bc      	cmp	r4, r7
 800b482:	d1c3      	bne.n	800b40c <getNextState+0x54>
                    next_state->car = west;
 800b484:	2306      	movs	r3, #6
 800b486:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b488:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = back;
 800b48a:	2204      	movs	r2, #4
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b48c:	3b02      	subs	r3, #2
 800b48e:	700b      	strb	r3, [r1, #0]
                    now_state->dir = back;
 800b490:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b492:	e7bb      	b.n	800b40c <getNextState+0x54>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800b494:	42b5      	cmp	r5, r6
 800b496:	d1b9      	bne.n	800b40c <getNextState+0x54>
 800b498:	1c62      	adds	r2, r4, #1
 800b49a:	42ba      	cmp	r2, r7
 800b49c:	f000 8096 	beq.w	800b5cc <getNextState+0x214>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800b4a0:	3c01      	subs	r4, #1
 800b4a2:	42a7      	cmp	r7, r4
 800b4a4:	d1b2      	bne.n	800b40c <getNextState+0x54>
                    next_state->car = south;
 800b4a6:	2204      	movs	r2, #4
 800b4a8:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b4aa:	7843      	ldrb	r3, [r0, #1]
 800b4ac:	3b02      	subs	r3, #2
 800b4ae:	704b      	strb	r3, [r1, #1]
                    now_state->dir = back;
 800b4b0:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b4b2:	e7ab      	b.n	800b40c <getNextState+0x54>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800b4b4:	42b5      	cmp	r5, r6
 800b4b6:	d1a9      	bne.n	800b40c <getNextState+0x54>
 800b4b8:	1e62      	subs	r2, r4, #1
 800b4ba:	42ba      	cmp	r2, r7
 800b4bc:	d07f      	beq.n	800b5be <getNextState+0x206>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800b4be:	3401      	adds	r4, #1
 800b4c0:	42a7      	cmp	r7, r4
 800b4c2:	d1a3      	bne.n	800b40c <getNextState+0x54>
                    next_state->car = north;
 800b4c4:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 2;
 800b4c6:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = back;
 800b4c8:	2204      	movs	r2, #4
                    next_state->pos.y = now_state->pos.y + 2;
 800b4ca:	3302      	adds	r3, #2
 800b4cc:	704b      	strb	r3, [r1, #1]
                    now_state->dir = back;
 800b4ce:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b4d0:	e79c      	b.n	800b40c <getNextState+0x54>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b4d2:	42b2      	cmp	r2, r6
 800b4d4:	d065      	beq.n	800b5a2 <getNextState+0x1ea>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b4d6:	42b5      	cmp	r5, r6
 800b4d8:	d198      	bne.n	800b40c <getNextState+0x54>
 800b4da:	42bc      	cmp	r4, r7
 800b4dc:	f000 80ad 	beq.w	800b63a <getNextState+0x282>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800b4e0:	3401      	adds	r4, #1
 800b4e2:	42bc      	cmp	r4, r7
 800b4e4:	d192      	bne.n	800b40c <getNextState+0x54>
                    next_state->car = north;
 800b4e6:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b4e8:	7803      	ldrb	r3, [r0, #0]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b4ee:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = backleft;
 800b4f0:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y + 1;
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	704b      	strb	r3, [r1, #1]
                    now_state->dir = backleft;
 800b4f6:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b4f8:	e788      	b.n	800b40c <getNextState+0x54>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b4fa:	42b5      	cmp	r5, r6
 800b4fc:	d02a      	beq.n	800b554 <getNextState+0x19c>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b4fe:	3d01      	subs	r5, #1
 800b500:	42b5      	cmp	r5, r6
 800b502:	d183      	bne.n	800b40c <getNextState+0x54>
 800b504:	1c62      	adds	r2, r4, #1
 800b506:	42ba      	cmp	r2, r7
 800b508:	f000 8093 	beq.w	800b632 <getNextState+0x27a>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b50c:	42bc      	cmp	r4, r7
 800b50e:	f47f af7d 	bne.w	800b40c <getNextState+0x54>
                    next_state->car = south;
 800b512:	2304      	movs	r3, #4
 800b514:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b516:	7803      	ldrb	r3, [r0, #0]
 800b518:	3b01      	subs	r3, #1
 800b51a:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b51c:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = backleft;
 800b51e:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y - 1;
 800b520:	3b01      	subs	r3, #1
 800b522:	704b      	strb	r3, [r1, #1]
                    now_state->dir = backleft;
 800b524:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b526:	e771      	b.n	800b40c <getNextState+0x54>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b528:	42bc      	cmp	r4, r7
 800b52a:	f47f af6f 	bne.w	800b40c <getNextState+0x54>
                    next_state->car = east;
 800b52e:	2302      	movs	r3, #2
 800b530:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b532:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = front;
 800b534:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x + 1;
 800b536:	3301      	adds	r3, #1
 800b538:	700b      	strb	r3, [r1, #0]
                    now_state->dir = front;
 800b53a:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b53c:	e766      	b.n	800b40c <getNextState+0x54>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b53e:	42bc      	cmp	r4, r7
 800b540:	f47f af64 	bne.w	800b40c <getNextState+0x54>
                    next_state->car = west;
 800b544:	2306      	movs	r3, #6
 800b546:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b548:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = front;
 800b54a:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b54c:	3b01      	subs	r3, #1
 800b54e:	700b      	strb	r3, [r1, #0]
                    now_state->dir = front;
 800b550:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b552:	e75b      	b.n	800b40c <getNextState+0x54>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b554:	42bc      	cmp	r4, r7
 800b556:	d04d      	beq.n	800b5f4 <getNextState+0x23c>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800b558:	3401      	adds	r4, #1
 800b55a:	42bc      	cmp	r4, r7
 800b55c:	f47f af56 	bne.w	800b40c <getNextState+0x54>
                    next_state->car = north;
 800b560:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b562:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = left;
 800b564:	2206      	movs	r2, #6
                    next_state->pos.y = now_state->pos.y + 1;
 800b566:	3301      	adds	r3, #1
 800b568:	704b      	strb	r3, [r1, #1]
                    now_state->dir = left;
 800b56a:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b56c:	e74e      	b.n	800b40c <getNextState+0x54>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b56e:	42bc      	cmp	r4, r7
 800b570:	d032      	beq.n	800b5d8 <getNextState+0x220>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b572:	42b5      	cmp	r5, r6
 800b574:	f104 34ff 	add.w	r4, r4, #4294967295
 800b578:	f43f af3c 	beq.w	800b3f4 <getNextState+0x3c>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b57c:	42bc      	cmp	r4, r7
 800b57e:	f47f af45 	bne.w	800b40c <getNextState+0x54>
                    next_state->car = east;
 800b582:	2302      	movs	r3, #2
 800b584:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b586:	7803      	ldrb	r3, [r0, #0]
 800b588:	3301      	adds	r3, #1
 800b58a:	e7c6      	b.n	800b51a <getNextState+0x162>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b58c:	1e63      	subs	r3, r4, #1
 800b58e:	42bb      	cmp	r3, r7
 800b590:	d038      	beq.n	800b604 <getNextState+0x24c>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b592:	42bc      	cmp	r4, r7
 800b594:	f47f af3a 	bne.w	800b40c <getNextState+0x54>
                    next_state->car = west;
 800b598:	2306      	movs	r3, #6
 800b59a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b59c:	7803      	ldrb	r3, [r0, #0]
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	e7a4      	b.n	800b4ec <getNextState+0x134>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b5a2:	1c62      	adds	r2, r4, #1
 800b5a4:	42ba      	cmp	r2, r7
 800b5a6:	d01e      	beq.n	800b5e6 <getNextState+0x22e>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b5a8:	42bc      	cmp	r4, r7
 800b5aa:	f47f af2f 	bne.w	800b40c <getNextState+0x54>
                    next_state->car = south;
 800b5ae:	2304      	movs	r3, #4
 800b5b0:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b5b2:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = left;
 800b5b4:	2206      	movs	r2, #6
                    next_state->pos.y = now_state->pos.y - 1;
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	704b      	strb	r3, [r1, #1]
                    now_state->dir = left;
 800b5ba:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b5bc:	e726      	b.n	800b40c <getNextState+0x54>
                    next_state->car = south;
 800b5be:	2204      	movs	r2, #4
 800b5c0:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b5c2:	7842      	ldrb	r2, [r0, #1]
 800b5c4:	3a01      	subs	r2, #1
 800b5c6:	704a      	strb	r2, [r1, #1]
                    now_state->dir = front;
 800b5c8:	70c3      	strb	r3, [r0, #3]
                    return next_state;
 800b5ca:	e71f      	b.n	800b40c <getNextState+0x54>
                    next_state->car = north;
 800b5cc:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b5ce:	7842      	ldrb	r2, [r0, #1]
 800b5d0:	3201      	adds	r2, #1
 800b5d2:	704a      	strb	r2, [r1, #1]
                    now_state->dir = front;
 800b5d4:	70c3      	strb	r3, [r0, #3]
                    return next_state;
 800b5d6:	e719      	b.n	800b40c <getNextState+0x54>
                    next_state->car = east;
 800b5d8:	2202      	movs	r2, #2
 800b5da:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b5dc:	7803      	ldrb	r3, [r0, #0]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	700b      	strb	r3, [r1, #0]
                    now_state->dir = right;
 800b5e2:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b5e4:	e712      	b.n	800b40c <getNextState+0x54>
                    next_state->car = north;
 800b5e6:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b5e8:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = right;
 800b5ea:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y + 1;
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	704b      	strb	r3, [r1, #1]
                    now_state->dir = right;
 800b5f0:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b5f2:	e70b      	b.n	800b40c <getNextState+0x54>
                    next_state->car = south;
 800b5f4:	2304      	movs	r3, #4
 800b5f6:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b5f8:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = right;
 800b5fa:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y - 1;
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	704b      	strb	r3, [r1, #1]
                    now_state->dir = right;
 800b600:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b602:	e703      	b.n	800b40c <getNextState+0x54>
                    next_state->car = west;
 800b604:	2306      	movs	r3, #6
 800b606:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b608:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = right;
 800b60a:	2202      	movs	r2, #2
                    next_state->pos.x = now_state->pos.x - 1;
 800b60c:	3b01      	subs	r3, #1
 800b60e:	700b      	strb	r3, [r1, #0]
                    now_state->dir = right;
 800b610:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b612:	e6fb      	b.n	800b40c <getNextState+0x54>
                    next_state->car = east;
 800b614:	2302      	movs	r3, #2
 800b616:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b618:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = left;
 800b61a:	2206      	movs	r2, #6
                    next_state->pos.x = now_state->pos.x + 1;
 800b61c:	3301      	adds	r3, #1
 800b61e:	700b      	strb	r3, [r1, #0]
                    now_state->dir = left;
 800b620:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b622:	e6f3      	b.n	800b40c <getNextState+0x54>
                    next_state->car = west;
 800b624:	2206      	movs	r2, #6
 800b626:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b628:	7803      	ldrb	r3, [r0, #0]
 800b62a:	3b01      	subs	r3, #1
 800b62c:	700b      	strb	r3, [r1, #0]
                    now_state->dir = left;
 800b62e:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800b630:	e6ec      	b.n	800b40c <getNextState+0x54>
                    next_state->car = north;
 800b632:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b634:	7803      	ldrb	r3, [r0, #0]
 800b636:	3b01      	subs	r3, #1
 800b638:	e712      	b.n	800b460 <getNextState+0xa8>
                    next_state->car = south;
 800b63a:	2304      	movs	r3, #4
 800b63c:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b63e:	7803      	ldrb	r3, [r0, #0]
 800b640:	3301      	adds	r3, #1
 800b642:	e6dd      	b.n	800b400 <getNextState+0x48>

0800b644 <initSearchData>:
}


int Num_Nodes = 0;
void initSearchData(maze_node *my_maze, profile *Mouse)
{
 800b644:	b570      	push	{r4, r5, r6, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	4606      	mov	r6, r0
 800b64a:	460d      	mov	r5, r1
    initMaze(my_maze);
 800b64c:	f7ff f898 	bl	800a780 <initMaze>
 800b650:	4602      	mov	r2, r0
 800b652:	f500 6408 	add.w	r4, r0, #2176	; 0x880
 800b656:	4603      	mov	r3, r0
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800b658:	f640 70ff 	movw	r0, #4095	; 0xfff
 800b65c:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800b660:	8058      	strh	r0, [r3, #2]
 800b662:	3308      	adds	r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800b664:	428b      	cmp	r3, r1
 800b666:	d1fb      	bne.n	800b660 <initSearchData+0x1c>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b668:	42a3      	cmp	r3, r4
 800b66a:	d1f7      	bne.n	800b65c <initSearchData+0x18>
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800b66c:	f640 70ff 	movw	r0, #4095	; 0xfff
 800b670:	f102 0180 	add.w	r1, r2, #128	; 0x80
 800b674:	f8a2 0882 	strh.w	r0, [r2, #2178]	; 0x882
 800b678:	3208      	adds	r2, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b67a:	4291      	cmp	r1, r2
 800b67c:	d1fa      	bne.n	800b674 <initSearchData+0x30>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800b67e:	4299      	cmp	r1, r3
 800b680:	d1f6      	bne.n	800b670 <initSearchData+0x2c>
    pos->x = x;
 800b682:	2300      	movs	r3, #0
 800b684:	2005      	movs	r0, #5
 800b686:	2204      	movs	r2, #4
 800b688:	70a8      	strb	r0, [r5, #2]
    pos->y = y;
 800b68a:	70e8      	strb	r0, [r5, #3]
    pos->x = x;
 800b68c:	722b      	strb	r3, [r5, #8]
    pos->y = y;
 800b68e:	726b      	strb	r3, [r5, #9]
    st->car = car;
 800b690:	72ab      	strb	r3, [r5, #10]
    prof->now.dir = front;
 800b692:	72eb      	strb	r3, [r5, #11]
    pos->x = x;
 800b694:	752b      	strb	r3, [r5, #20]
    st->car = car;
 800b696:	75ab      	strb	r3, [r5, #22]
    pos->y = y;
 800b698:	2001      	movs	r0, #1
    existence->north = state[0];
 800b69a:	234a      	movs	r3, #74	; 0x4a
    pos->y = y;
 800b69c:	7568      	strb	r0, [r5, #21]
    prof->next.dir = 1; //not use while running
 800b69e:	75e8      	strb	r0, [r5, #23]
    prof->now.node = &(maze->RawNode[0][0]);
 800b6a0:	612e      	str	r6, [r5, #16]
    pos->x = x;
 800b6a2:	702a      	strb	r2, [r5, #0]
    pos->y = y;
 800b6a4:	706a      	strb	r2, [r5, #1]
    existence->north = state[0];
 800b6a6:	2454      	movs	r4, #84	; 0x54

    Mouse->now.node = &(my_maze->RawNode[0][0]);
    Mouse->next.node = &(my_maze->RawNode[0][1]);

    //スタート座標にいる状態で、現在の重みを更新
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800b6a8:	9001      	str	r0, [sp, #4]
    existence->north = state[0];
 800b6aa:	762b      	strb	r3, [r5, #24]
    prof->next.node = &(maze->RawNode[0][1]);
 800b6ac:	f106 0008 	add.w	r0, r6, #8
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800b6b0:	2302      	movs	r3, #2
    prof->next.node = &(maze->RawNode[0][1]);
 800b6b2:	61e8      	str	r0, [r5, #28]
    existence->north = state[0];
 800b6b4:	732c      	strb	r4, [r5, #12]
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800b6b6:	4611      	mov	r1, r2
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	f7ff f918 	bl	800a8f0 <updateAllNodeWeight>
//     updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
}
 800b6c0:	b002      	add	sp, #8
 800b6c2:	bd70      	pop	{r4, r5, r6, pc}

0800b6c4 <getPathNode>:

Path FastPath[16*16]={0};

//最短走行用の経路配列作成
void getPathNode(maze_node *maze, profile *mouse)
{
 800b6c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c8:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800b884 <getPathNode+0x1c0>
 800b6cc:	460c      	mov	r4, r1
 800b6ce:	4605      	mov	r5, r0
 800b6d0:	464b      	mov	r3, r9
 800b6d2:	f509 5180 	add.w	r1, r9, #4096	; 0x1000

	//ノード情報は既にある前提
	for(int i=0; i < 16*16; i++)
		FastPath[i].path_ahead = false;
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	735a      	strb	r2, [r3, #13]
 800b6da:	3310      	adds	r3, #16
	for(int i=0; i < 16*16; i++)
 800b6dc:	428b      	cmp	r3, r1
 800b6de:	d1fb      	bne.n	800b6d8 <getPathNode+0x14>
	mouse->now.wall.north = maze->RawNode[now_x][now_y+1].existence;//北
 800b6e0:	7a23      	ldrb	r3, [r4, #8]
 800b6e2:	7a67      	ldrb	r7, [r4, #9]
 800b6e4:	7b22      	ldrb	r2, [r4, #12]
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b6e6:	7d21      	ldrb	r1, [r4, #20]
 800b6e8:	7d60      	ldrb	r0, [r4, #21]

	static int path_num=0;
	//最初の次ノードは既に入っているので格納
	getNowWallVirtual(maze, mouse, mouse->now.pos.x, mouse->now.pos.y);//0,1の壁がうまく更新できてない
	getNextWallVirtual(maze, mouse, mouse->next.pos.x, mouse->next.pos.y);
	FastPath[path_num].path_state = mouse->now;
 800b6ea:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800b888 <getPathNode+0x1c4>
	mouse->now.wall.north = maze->RawNode[now_x][now_y+1].existence;//北
 800b6ee:	011e      	lsls	r6, r3, #4
 800b6f0:	eb06 0c03 	add.w	ip, r6, r3
 800b6f4:	f107 0e01 	add.w	lr, r7, #1
 800b6f8:	44e6      	add	lr, ip
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800b6fa:	eb07 1303 	add.w	r3, r7, r3, lsl #4
	mouse->now.wall.north = maze->RawNode[now_x][now_y+1].existence;//北
 800b6fe:	f815 e03e 	ldrb.w	lr, [r5, lr, lsl #3]
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800b702:	f503 7390 	add.w	r3, r3, #288	; 0x120
	mouse->now.wall.north = maze->RawNode[now_x][now_y+1].existence;//北
 800b706:	f36e 0201 	bfi	r2, lr, #0, #2
 800b70a:	7322      	strb	r2, [r4, #12]
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800b70c:	f815 e033 	ldrb.w	lr, [r5, r3, lsl #3]
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b710:	7e23      	ldrb	r3, [r4, #24]
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800b712:	f36e 0283 	bfi	r2, lr, #2, #2
	mouse->now.wall.south = maze->RawNode[now_x][now_y].existence;//南
 800b716:	44bc      	add	ip, r7
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800b718:	7322      	strb	r2, [r4, #12]
	mouse->now.wall.south = maze->RawNode[now_x][now_y].existence;//南
 800b71a:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
	mouse->now.wall.west = maze->ColumnNode[now_x][now_y].existence;//西
 800b71e:	443e      	add	r6, r7
	mouse->now.wall.south = maze->RawNode[now_x][now_y].existence;//南
 800b720:	f36c 1205 	bfi	r2, ip, #4, #2
	mouse->now.wall.west = maze->ColumnNode[now_x][now_y].existence;//西
 800b724:	f506 7688 	add.w	r6, r6, #272	; 0x110
	mouse->now.wall.south = maze->RawNode[now_x][now_y].existence;//南
 800b728:	7322      	strb	r2, [r4, #12]
	mouse->now.wall.west = maze->ColumnNode[now_x][now_y].existence;//西
 800b72a:	f815 c036 	ldrb.w	ip, [r5, r6, lsl #3]
	FastPath[path_num].path_state = mouse->now;
 800b72e:	f8d8 6000 	ldr.w	r6, [r8]
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b732:	010f      	lsls	r7, r1, #4
 800b734:	eb07 0e01 	add.w	lr, r7, r1
	mouse->now.wall.west = maze->ColumnNode[now_x][now_y].existence;//西
 800b738:	f36c 1287 	bfi	r2, ip, #6, #2
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b73c:	f100 0c01 	add.w	ip, r0, #1
 800b740:	44f4      	add	ip, lr
	mouse->now.wall.west = maze->ColumnNode[now_x][now_y].existence;//西
 800b742:	7322      	strb	r2, [r4, #12]
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b744:	eb00 1201 	add.w	r2, r0, r1, lsl #4
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b748:	f815 103c 	ldrb.w	r1, [r5, ip, lsl #3]
    prof->now.car = prof->next.car;
 800b74c:	f894 c016 	ldrb.w	ip, [r4, #22]
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b750:	f361 0301 	bfi	r3, r1, #0, #2
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b754:	f502 7290 	add.w	r2, r2, #288	; 0x120
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b758:	7623      	strb	r3, [r4, #24]
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b75a:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b75e:	4486      	add	lr, r0
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b760:	f362 0383 	bfi	r3, r2, #2, #2
 800b764:	7623      	strb	r3, [r4, #24]
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b766:	f815 103e 	ldrb.w	r1, [r5, lr, lsl #3]
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800b76a:	183a      	adds	r2, r7, r0
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b76c:	f361 1305 	bfi	r3, r1, #4, #2
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800b770:	f502 7288 	add.w	r2, r2, #272	; 0x110
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b774:	7623      	strb	r3, [r4, #24]
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800b776:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 800b77a:	f362 1387 	bfi	r3, r2, #6, #2
 800b77e:	7623      	strb	r3, [r4, #24]
	FastPath[path_num].path_state = mouse->now;
 800b780:	f104 0708 	add.w	r7, r4, #8
 800b784:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800b788:	eb09 1306 	add.w	r3, r9, r6, lsl #4
 800b78c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FastPath[path_num].path_ahead = true;
 800b790:	2201      	movs	r2, #1
 800b792:	735a      	strb	r2, [r3, #13]
    prof->now.car = prof->next.car;
 800b794:	f884 c00a 	strb.w	ip, [r4, #10]
    prof->now.pos = prof->next.pos;
 800b798:	8aa1      	ldrh	r1, [r4, #20]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b79a:	69e2      	ldr	r2, [r4, #28]
    prof->now.wall = prof->next.wall;
 800b79c:	7e23      	ldrb	r3, [r4, #24]
    prof->now.pos = prof->next.pos;
 800b79e:	8121      	strh	r1, [r4, #8]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b7a0:	6122      	str	r2, [r4, #16]
    prof->now.wall = prof->next.wall;
 800b7a2:	7323      	strb	r3, [r4, #12]
 800b7a4:	f104 0a14 	add.w	sl, r4, #20
 800b7a8:	e04a      	b.n	800b840 <getPathNode+0x17c>
	//ゴールなら減速.　なのでwhile文
	while(! ((mouse->goal_lesser.x <= mouse->now.pos.x && mouse->now.pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= mouse->now.pos.y && mouse->now.pos.y <= mouse->goal_larger.y))  ) //nextがゴール到達するまでループ
	{
		//0,1。前方。
//		getNowWallVirtual(my_mouse.now.pos.x, my_mouse.now.pos.y);
		mouse->next.node = getNextNode(maze, mouse->now.car, mouse->now.node, 0x03);
 800b7aa:	6922      	ldr	r2, [r4, #16]
 800b7ac:	7aa1      	ldrb	r1, [r4, #10]
 800b7ae:	f7ff fb91 	bl	800aed4 <getNextNode>
		getNextState(&(mouse->now),&(mouse->next), mouse->next.node);
 800b7b2:	4651      	mov	r1, sl
		mouse->next.node = getNextNode(maze, mouse->now.car, mouse->now.node, 0x03);
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	61e0      	str	r0, [r4, #28]
		getNextState(&(mouse->now),&(mouse->next), mouse->next.node);
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	f7ff fdfd 	bl	800b3b8 <getNextState>
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b7be:	7d22      	ldrb	r2, [r4, #20]
 800b7c0:	7d60      	ldrb	r0, [r4, #21]
 800b7c2:	7e23      	ldrb	r3, [r4, #24]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b7c4:	f8d4 b01c 	ldr.w	fp, [r4, #28]
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b7c8:	0111      	lsls	r1, r2, #4
 800b7ca:	eb01 0e02 	add.w	lr, r1, r2
 800b7ce:	f100 0c01 	add.w	ip, r0, #1
 800b7d2:	44f4      	add	ip, lr
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b7d4:	eb00 1202 	add.w	r2, r0, r2, lsl #4
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b7d8:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b7dc:	f502 7290 	add.w	r2, r2, #288	; 0x120
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800b7e0:	f36c 0301 	bfi	r3, ip, #0, #2
 800b7e4:	7623      	strb	r3, [r4, #24]
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b7e6:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
    prof->now.car = prof->next.car;
 800b7ea:	f894 c016 	ldrb.w	ip, [r4, #22]
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b7ee:	4486      	add	lr, r0
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800b7f0:	f362 0383 	bfi	r3, r2, #2, #2
 800b7f4:	7623      	strb	r3, [r4, #24]
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b7f6:	f815 203e 	ldrb.w	r2, [r5, lr, lsl #3]
    prof->now.pos = prof->next.pos;
 800b7fa:	f8b4 e014 	ldrh.w	lr, [r4, #20]
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800b7fe:	4401      	add	r1, r0
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b800:	f362 1305 	bfi	r3, r2, #4, #2
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800b804:	f501 7188 	add.w	r1, r1, #272	; 0x110
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800b808:	7623      	strb	r3, [r4, #24]
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800b80a:	f815 2031 	ldrb.w	r2, [r5, r1, lsl #3]
 800b80e:	f362 1387 	bfi	r3, r2, #6, #2
 800b812:	7623      	strb	r3, [r4, #24]
		getNextWallVirtual(maze, mouse, mouse->next.pos.x, mouse->next.pos.y);
//			printf("now\r\n");
//			printState(&(my_mouse.now));
		path_num ++;
		//次の方向はこの時点で入れる.nextstateがわかった時点で入れたい
		FastPath[path_num].path_state = mouse->now; //next.dir
 800b814:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
		path_num ++;
 800b818:	3601      	adds	r6, #1
		FastPath[path_num].path_state = mouse->now; //next.dir
 800b81a:	eb09 1306 	add.w	r3, r9, r6, lsl #4
 800b81e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    prof->now.wall = prof->next.wall;
 800b822:	7e23      	ldrb	r3, [r4, #24]
 800b824:	7323      	strb	r3, [r4, #12]
    prof->now.car = prof->next.car;
 800b826:	f884 c00a 	strb.w	ip, [r4, #10]
    prof->now.pos = prof->next.pos;
 800b82a:	f8a4 e008 	strh.w	lr, [r4, #8]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b82e:	f8c4 b010 	str.w	fp, [r4, #16]
		shiftState(mouse);
//			printf("next\r\n");
//			printState(&(my_mouse.next));

			printf("\r\n");
 800b832:	4812      	ldr	r0, [pc, #72]	; (800b87c <getPathNode+0x1b8>)
		path_num ++;
 800b834:	f8c8 6000 	str.w	r6, [r8]
			printf("\r\n");
 800b838:	f007 fbb8 	bl	8012fac <puts>
 800b83c:	f8d8 6000 	ldr.w	r6, [r8]
	while(! ((mouse->goal_lesser.x <= mouse->now.pos.x && mouse->now.pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= mouse->now.pos.y && mouse->now.pos.y <= mouse->goal_larger.y))  ) //nextがゴール到達するまでループ
 800b840:	7a22      	ldrb	r2, [r4, #8]
 800b842:	7821      	ldrb	r1, [r4, #0]
 800b844:	4291      	cmp	r1, r2
		mouse->next.node = getNextNode(maze, mouse->now.car, mouse->now.node, 0x03);
 800b846:	f04f 0303 	mov.w	r3, #3
 800b84a:	4628      	mov	r0, r5
	while(! ((mouse->goal_lesser.x <= mouse->now.pos.x && mouse->now.pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= mouse->now.pos.y && mouse->now.pos.y <= mouse->goal_larger.y))  ) //nextがゴール到達するまでループ
 800b84c:	d8ad      	bhi.n	800b7aa <getPathNode+0xe6>
 800b84e:	78a1      	ldrb	r1, [r4, #2]
 800b850:	4291      	cmp	r1, r2
 800b852:	d3aa      	bcc.n	800b7aa <getPathNode+0xe6>
 800b854:	7a62      	ldrb	r2, [r4, #9]
 800b856:	7861      	ldrb	r1, [r4, #1]
 800b858:	4291      	cmp	r1, r2
 800b85a:	d8a6      	bhi.n	800b7aa <getPathNode+0xe6>
 800b85c:	78e1      	ldrb	r1, [r4, #3]
 800b85e:	4291      	cmp	r1, r2
 800b860:	d3a3      	bcc.n	800b7aa <getPathNode+0xe6>
	}
	path_num ++;
	FastPath[path_num].path_state = mouse->next;
 800b862:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
	path_num ++;
 800b866:	3601      	adds	r6, #1
	Num_Nodes = path_num;
 800b868:	4b05      	ldr	r3, [pc, #20]	; (800b880 <getPathNode+0x1bc>)
	path_num ++;
 800b86a:	f8c8 6000 	str.w	r6, [r8]
	FastPath[path_num].path_state = mouse->next;
 800b86e:	eb09 1906 	add.w	r9, r9, r6, lsl #4
 800b872:	e889 0007 	stmia.w	r9, {r0, r1, r2}
	Num_Nodes = path_num;
 800b876:	601e      	str	r6, [r3, #0]
//		{
//			printState(&(FastPath[i].path_state));
//		}
//		printf("\r\n");

}
 800b878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b87c:	08016290 	.word	0x08016290
 800b880:	2000508c 	.word	0x2000508c
 800b884:	2000408c 	.word	0x2000408c
 800b888:	20005090 	.word	0x20005090

0800b88c <getPathAction>:

void getPathAction(profile *mouse)
{
 800b88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//Pathからアクション計画を立てる
	int count = 0;
	if( (mouse->goal_lesser.x <= FastPath[count].path_state.node->pos.x &&  FastPath[count].path_state.node->pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= FastPath[count].path_state.node->pos.y &&  FastPath[count].path_state.node->pos.y <= mouse->goal_larger.y) ){
 800b890:	4b54      	ldr	r3, [pc, #336]	; (800b9e4 <getPathAction+0x158>)
 800b892:	7806      	ldrb	r6, [r0, #0]
 800b894:	689a      	ldr	r2, [r3, #8]
 800b896:	78c1      	ldrb	r1, [r0, #3]
 800b898:	7993      	ldrb	r3, [r2, #6]
 800b89a:	f890 c002 	ldrb.w	ip, [r0, #2]
 800b89e:	f890 9001 	ldrb.w	r9, [r0, #1]
{
 800b8a2:	b083      	sub	sp, #12
	if( (mouse->goal_lesser.x <= FastPath[count].path_state.node->pos.x &&  FastPath[count].path_state.node->pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= FastPath[count].path_state.node->pos.y &&  FastPath[count].path_state.node->pos.y <= mouse->goal_larger.y) ){
 800b8a4:	429e      	cmp	r6, r3
 800b8a6:	9101      	str	r1, [sp, #4]
 800b8a8:	d80a      	bhi.n	800b8c0 <getPathAction+0x34>
 800b8aa:	4563      	cmp	r3, ip
 800b8ac:	d808      	bhi.n	800b8c0 <getPathAction+0x34>
 800b8ae:	79d3      	ldrb	r3, [r2, #7]
 800b8b0:	454b      	cmp	r3, r9
 800b8b2:	d305      	bcc.n	800b8c0 <getPathAction+0x34>
 800b8b4:	428b      	cmp	r3, r1
 800b8b6:	d803      	bhi.n	800b8c0 <getPathAction+0x34>
 800b8b8:	f04f 33ff 	mov.w	r3, #4294967295
	int count = 0;
 800b8bc:	2100      	movs	r1, #0
 800b8be:	e079      	b.n	800b9b4 <getPathAction+0x128>
			FastPath[0].path_action = ACC_DEC;//加減速一回で終わり
			//61.5+45mm
		}
	}
	else {
		if(FastPath[2].path_state.node->rc == 1){
 800b8c0:	4948      	ldr	r1, [pc, #288]	; (800b9e4 <getPathAction+0x158>)
 800b8c2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800b8c4:	795b      	ldrb	r3, [r3, #5]
 800b8c6:	bb73      	cbnz	r3, 800b926 <getPathAction+0x9a>
			FastPath[0].path_action = START;	 //初手ターン用の加速
			FastPath[1].path_action = R_90_SEARCH;
		}
		else{
			//2マス以上直進
			FastPath[0].path_action = ACC_DEC;
 800b8c8:	4a46      	ldr	r2, [pc, #280]	; (800b9e4 <getPathAction+0x158>)
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	7313      	strb	r3, [r2, #12]
			FastPath[1].path_action = ACC_DEC;
 800b8ce:	7713      	strb	r3, [r2, #28]
{
 800b8d0:	2102      	movs	r1, #2
				                }
								//左旋回
								//東向きから北東 or //西向きから南西
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
								{
									FastPath[count].path_action = L_90_SEARCH;
 800b8d2:	468b      	mov	fp, r1
 800b8d4:	4b43      	ldr	r3, [pc, #268]	; (800b9e4 <getPathAction+0x158>)
									FastPath[count].path_action = R_90_SEARCH;
 800b8d6:	f04f 0a03 	mov.w	sl, #3
							FastPath[count].path_action = ACC_DEC;
 800b8da:	f04f 0801 	mov.w	r8, #1
 800b8de:	e00a      	b.n	800b8f6 <getPathAction+0x6a>
							uint8_t now_x = FastPath[count].path_state.node->pos.x, now_y = FastPath[count].path_state.node->pos.y;
 800b8e0:	7982      	ldrb	r2, [r0, #6]
 800b8e2:	79c5      	ldrb	r5, [r0, #7]
							uint8_t next_x = FastPath[count+1].path_state.node->pos.x, next_y = FastPath[count+1].path_state.node->pos.y;
 800b8e4:	79a0      	ldrb	r0, [r4, #6]
 800b8e6:	79e4      	ldrb	r4, [r4, #7]
							if(FastPath[count].path_state.node->rc == 0)
 800b8e8:	bb17      	cbnz	r7, 800b930 <getPathAction+0xa4>
								if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b8ea:	1c57      	adds	r7, r2, #1
 800b8ec:	4287      	cmp	r7, r0
 800b8ee:	d03c      	beq.n	800b96a <getPathAction+0xde>
 800b8f0:	4282      	cmp	r2, r0
 800b8f2:	d043      	beq.n	800b97c <getPathAction+0xf0>
 800b8f4:	3310      	adds	r3, #16
		while( !((mouse->goal_lesser.x <= FastPath[count].path_state.pos.x &&  FastPath[count].path_state.pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= FastPath[count].path_state.pos.y &&  FastPath[count].path_state.pos.y <= mouse->goal_larger.y)) )
 800b8f6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b8fa:	4296      	cmp	r6, r2
 800b8fc:	d808      	bhi.n	800b910 <getPathAction+0x84>
 800b8fe:	4562      	cmp	r2, ip
 800b900:	d806      	bhi.n	800b910 <getPathAction+0x84>
 800b902:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b906:	454a      	cmp	r2, r9
 800b908:	d302      	bcc.n	800b910 <getPathAction+0x84>
 800b90a:	9801      	ldr	r0, [sp, #4]
 800b90c:	4282      	cmp	r2, r0
 800b90e:	d950      	bls.n	800b9b2 <getPathAction+0x126>
						if(FastPath[count].path_state.node->rc == FastPath[count+1].path_state.node->rc){
 800b910:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b912:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800b914:	7947      	ldrb	r7, [r0, #5]
 800b916:	7962      	ldrb	r2, [r4, #5]
 800b918:	42ba      	cmp	r2, r7
 800b91a:	f101 0101 	add.w	r1, r1, #1
 800b91e:	d1df      	bne.n	800b8e0 <getPathAction+0x54>
							FastPath[count].path_action = ACC_DEC;
 800b920:	f883 802c 	strb.w	r8, [r3, #44]	; 0x2c
 800b924:	e7e6      	b.n	800b8f4 <getPathAction+0x68>
			FastPath[0].path_action = START;	 //初手ターン用の加速
 800b926:	2200      	movs	r2, #0
			FastPath[1].path_action = R_90_SEARCH;
 800b928:	2303      	movs	r3, #3
			FastPath[0].path_action = START;	 //初手ターン用の加速
 800b92a:	730a      	strb	r2, [r1, #12]
			FastPath[1].path_action = R_90_SEARCH;
 800b92c:	770b      	strb	r3, [r1, #28]
 800b92e:	e7cf      	b.n	800b8d0 <getPathAction+0x44>
								if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b930:	4282      	cmp	r2, r0
 800b932:	d00d      	beq.n	800b950 <getPathAction+0xc4>
 800b934:	1e57      	subs	r7, r2, #1
 800b936:	4287      	cmp	r7, r0
 800b938:	d1dc      	bne.n	800b8f4 <getPathAction+0x68>
 800b93a:	f105 0e01 	add.w	lr, r5, #1
 800b93e:	4574      	cmp	r4, lr
 800b940:	d024      	beq.n	800b98c <getPathAction+0x100>
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b942:	4287      	cmp	r7, r0
 800b944:	d1d6      	bne.n	800b8f4 <getPathAction+0x68>
 800b946:	42a5      	cmp	r5, r4
 800b948:	d1d4      	bne.n	800b8f4 <getPathAction+0x68>
									FastPath[count].path_action = L_90_SEARCH;
 800b94a:	f883 b02c 	strb.w	fp, [r3, #44]	; 0x2c
 800b94e:	e7d1      	b.n	800b8f4 <getPathAction+0x68>
								if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b950:	42a5      	cmp	r5, r4
 800b952:	d01b      	beq.n	800b98c <getPathAction+0x100>
 800b954:	1e57      	subs	r7, r2, #1
 800b956:	4297      	cmp	r7, r2
 800b958:	f105 0e01 	add.w	lr, r5, #1
 800b95c:	d13e      	bne.n	800b9dc <getPathAction+0x150>
 800b95e:	45a6      	cmp	lr, r4
 800b960:	d014      	beq.n	800b98c <getPathAction+0x100>
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b962:	45a6      	cmp	lr, r4
 800b964:	d0f1      	beq.n	800b94a <getPathAction+0xbe>
 800b966:	1e57      	subs	r7, r2, #1
 800b968:	e7eb      	b.n	800b942 <getPathAction+0xb6>
								if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b96a:	42a5      	cmp	r5, r4
 800b96c:	d016      	beq.n	800b99c <getPathAction+0x110>
 800b96e:	42ba      	cmp	r2, r7
 800b970:	f105 32ff 	add.w	r2, r5, #4294967295
 800b974:	d018      	beq.n	800b9a8 <getPathAction+0x11c>
								if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b976:	42a2      	cmp	r2, r4
 800b978:	d1bc      	bne.n	800b8f4 <getPathAction+0x68>
 800b97a:	e7e6      	b.n	800b94a <getPathAction+0xbe>
								if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b97c:	1e6a      	subs	r2, r5, #1
 800b97e:	42a2      	cmp	r2, r4
 800b980:	d014      	beq.n	800b9ac <getPathAction+0x120>
								if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b982:	42a5      	cmp	r5, r4
 800b984:	d0e1      	beq.n	800b94a <getPathAction+0xbe>
 800b986:	4287      	cmp	r7, r0
 800b988:	d1b4      	bne.n	800b8f4 <getPathAction+0x68>
 800b98a:	e7f4      	b.n	800b976 <getPathAction+0xea>
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b98c:	4282      	cmp	r2, r0
									FastPath[count].path_action = R_90_SEARCH;
 800b98e:	f883 a02c 	strb.w	sl, [r3, #44]	; 0x2c
 800b992:	bf08      	it	eq
 800b994:	f105 0e01 	addeq.w	lr, r5, #1
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b998:	d0e3      	beq.n	800b962 <getPathAction+0xd6>
 800b99a:	e7e4      	b.n	800b966 <getPathAction+0xda>
								if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b99c:	42ba      	cmp	r2, r7
									FastPath[count].path_action = R_90_SEARCH;
 800b99e:	f883 a02c 	strb.w	sl, [r3, #44]	; 0x2c
								if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b9a2:	d0d2      	beq.n	800b94a <getPathAction+0xbe>
 800b9a4:	1e62      	subs	r2, r4, #1
 800b9a6:	e7e6      	b.n	800b976 <getPathAction+0xea>
								if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b9a8:	4294      	cmp	r4, r2
 800b9aa:	d1e4      	bne.n	800b976 <getPathAction+0xea>
									FastPath[count].path_action = R_90_SEARCH;
 800b9ac:	f883 a02c 	strb.w	sl, [r3, #44]	; 0x2c
 800b9b0:	e7e7      	b.n	800b982 <getPathAction+0xf6>
 800b9b2:	1e4b      	subs	r3, r1, #1
	//ゴールノード
	//終端速度の変数 0
	//前回がターンなら加減速を選択して、加速の割合を0として減速
	//前回までが直進なら、加減速を選択して、ゴールラインを駆け抜ける処理を入れる
		//一つ前のpath_actionによって変える
		switch(FastPath[count-1].path_action)
 800b9b4:	4a0b      	ldr	r2, [pc, #44]	; (800b9e4 <getPathAction+0x158>)
 800b9b6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800b9ba:	7b1b      	ldrb	r3, [r3, #12]
 800b9bc:	b12b      	cbz	r3, 800b9ca <getPathAction+0x13e>
 800b9be:	2b03      	cmp	r3, #3
 800b9c0:	d806      	bhi.n	800b9d0 <getPathAction+0x144>
				FastPath[count].path_action = ACC_DEC; //ただの減速.
				//加速の割合を0にする
				break;
			case ACC_DEC:
				//前回ACC_DECということはそのまま継続でひとまとめにする
				FastPath[count].path_action = ACC_DEC; //前のアクションとひとまとめ（countを利用）
 800b9c2:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	730b      	strb	r3, [r1, #12]
		//accel to decel
		//turn(left, right) = two pattern
		//90deg slalom
		//45deg slalom
		//180deg slalom
}
 800b9ca:	b003      	add	sp, #12
 800b9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				printf("missng action !! in getPathAction.\r\n");
 800b9d0:	4805      	ldr	r0, [pc, #20]	; (800b9e8 <getPathAction+0x15c>)
}
 800b9d2:	b003      	add	sp, #12
 800b9d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				printf("missng action !! in getPathAction.\r\n");
 800b9d8:	f007 bae8 	b.w	8012fac <puts>
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b9dc:	45a6      	cmp	lr, r4
 800b9de:	d189      	bne.n	800b8f4 <getPathAction+0x68>
 800b9e0:	e7b3      	b.n	800b94a <getPathAction+0xbe>
 800b9e2:	bf00      	nop
 800b9e4:	2000408c 	.word	0x2000408c
 800b9e8:	08016260 	.word	0x08016260

0800b9ec <InitExplore>:

	//ハード処理

}
void InitExplore()
{
 800b9ec:	b570      	push	{r4, r5, r6, lr}
	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	2004      	movs	r0, #4
 800b9f2:	f003 f933 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	2005      	movs	r0, #5
 800b9fa:	f003 f92f 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b9fe:	2100      	movs	r1, #0
 800ba00:	2002      	movs	r0, #2
 800ba02:	f003 f92b 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800ba06:	2100      	movs	r1, #0
 800ba08:	2003      	movs	r0, #3
 800ba0a:	f003 f927 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800ba0e:	2100      	movs	r1, #0
 800ba10:	2001      	movs	r0, #1
 800ba12:	f003 f923 	bl	800ec5c <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800ba16:	2100      	movs	r1, #0
 800ba18:	4608      	mov	r0, r1
 800ba1a:	f003 f91f 	bl	800ec5c <PIDChangeFlag>

//	Load_Gain();

	uint8_t imu_check;
	imu_check = IMU_init();
 800ba1e:	f002 ff51 	bl	800e8c4 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800ba22:	4c2f      	ldr	r4, [pc, #188]	; (800bae0 <InitExplore+0xf4>)
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
	Acceleration = 0;
 800ba24:	4d2f      	ldr	r5, [pc, #188]	; (800bae4 <InitExplore+0xf8>)
	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
//	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
//	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
//	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
	TargetPhoto[SL] = 370;//439.600006;//THRESHOLD_SL;
	TargetPhoto[SR] = 300;//294.299988;//THRESHOLD_SR;
 800ba26:	4e30      	ldr	r6, [pc, #192]	; (800bae8 <InitExplore+0xfc>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800ba28:	4601      	mov	r1, r0
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f007 fa36 	bl	8012e9c <iprintf>
	imu_check =IMU_init();
 800ba30:	f002 ff48 	bl	800e8c4 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800ba34:	4601      	mov	r1, r0
 800ba36:	4620      	mov	r0, r4
 800ba38:	f007 fa30 	bl	8012e9c <iprintf>
	HAL_Delay(100);
 800ba3c:	2064      	movs	r0, #100	; 0x64
 800ba3e:	f003 fac3 	bl	800efc8 <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800ba42:	2138      	movs	r1, #56	; 0x38
 800ba44:	2037      	movs	r0, #55	; 0x37
 800ba46:	f002 fe1d 	bl	800e684 <ReadIMU>
 800ba4a:	4b28      	ldr	r3, [pc, #160]	; (800baec <InitExplore+0x100>)
	AngularAcceleration = 0;
 800ba4c:	4c28      	ldr	r4, [pc, #160]	; (800baf0 <InitExplore+0x104>)
	ZGyro = ReadIMU(0x37, 0x38);
 800ba4e:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800ba52:	6818      	ldr	r0, [r3, #0]
 800ba54:	f7fc fcb0 	bl	80083b8 <__aeabi_f2d>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4825      	ldr	r0, [pc, #148]	; (800baf4 <InitExplore+0x108>)
 800ba5e:	f007 fa1d 	bl	8012e9c <iprintf>
	Motor_PWM_Start();
 800ba62:	f002 fff9 	bl	800ea58 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800ba66:	f002 ff71 	bl	800e94c <EncoderStart>
	EmitterON();
 800ba6a:	f002 ff7f 	bl	800e96c <EmitterON>
	ADCStart();
 800ba6e:	f002 fd45 	bl	800e4fc <ADCStart>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800ba72:	f247 512f 	movw	r1, #29999	; 0x752f
 800ba76:	4820      	ldr	r0, [pc, #128]	; (800baf8 <InitExplore+0x10c>)
 800ba78:	f003 f860 	bl	800eb3c <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800ba7c:	f247 512f 	movw	r1, #29999	; 0x752f
 800ba80:	481e      	ldr	r0, [pc, #120]	; (800bafc <InitExplore+0x110>)
 800ba82:	f003 f85b 	bl	800eb3c <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800ba86:	481e      	ldr	r0, [pc, #120]	; (800bb00 <InitExplore+0x114>)
 800ba88:	f005 f876 	bl	8010b78 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800ba8c:	481d      	ldr	r0, [pc, #116]	; (800bb04 <InitExplore+0x118>)
 800ba8e:	f005 f873 	bl	8010b78 <HAL_TIM_Base_Start_IT>
	TargetVelocity[BODY] = 0;
 800ba92:	491d      	ldr	r1, [pc, #116]	; (800bb08 <InitExplore+0x11c>)
	TargetAngularV = 0;
 800ba94:	481d      	ldr	r0, [pc, #116]	; (800bb0c <InitExplore+0x120>)
	TotalPulse[LEFT] = 0;
 800ba96:	4a1e      	ldr	r2, [pc, #120]	; (800bb10 <InitExplore+0x124>)
	TargetVelocity[BODY] = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	608b      	str	r3, [r1, #8]
	TargetPhoto[SL] = 370;//439.600006;//THRESHOLD_SL;
 800ba9c:	491d      	ldr	r1, [pc, #116]	; (800bb14 <InitExplore+0x128>)
	TargetAngularV = 0;
 800ba9e:	6003      	str	r3, [r0, #0]
	Acceleration = 0;
 800baa0:	602b      	str	r3, [r5, #0]
	TargetPhoto[SL] = 370;//439.600006;//THRESHOLD_SL;
 800baa2:	481d      	ldr	r0, [pc, #116]	; (800bb18 <InitExplore+0x12c>)
	AngularAcceleration = 0;
 800baa4:	6023      	str	r3, [r4, #0]
	PhotoDiff = 70;
 800baa6:	4b1d      	ldr	r3, [pc, #116]	; (800bb1c <InitExplore+0x130>)
 800baa8:	4d1d      	ldr	r5, [pc, #116]	; (800bb20 <InitExplore+0x134>)
	TotalPulse[LEFT] = 0;
 800baaa:	2400      	movs	r4, #0
 800baac:	6014      	str	r4, [r2, #0]
	TotalPulse[RIGHT] = 0;
 800baae:	6054      	str	r4, [r2, #4]
	TotalPulse[BODY] = 0;
 800bab0:	6094      	str	r4, [r2, #8]
	TargetPhoto[SL] = 370;//439.600006;//THRESHOLD_SL;
 800bab2:	6088      	str	r0, [r1, #8]

	PIDReset(L_VELO_PID);
 800bab4:	2004      	movs	r0, #4
	TargetPhoto[SR] = 300;//294.299988;//THRESHOLD_SR;
 800bab6:	604e      	str	r6, [r1, #4]
	PhotoDiff = 70;
 800bab8:	601d      	str	r5, [r3, #0]
	PIDReset(L_VELO_PID);
 800baba:	f003 f8d7 	bl	800ec6c <PIDReset>
	PIDReset(R_VELO_PID);
 800babe:	2005      	movs	r0, #5
 800bac0:	f003 f8d4 	bl	800ec6c <PIDReset>

	PIDReset(A_VELO_PID);
 800bac4:	4620      	mov	r0, r4
 800bac6:	f003 f8d1 	bl	800ec6c <PIDReset>
	PIDReset(L_WALL_PID);
 800baca:	2002      	movs	r0, #2
 800bacc:	f003 f8ce 	bl	800ec6c <PIDReset>
	PIDReset(R_WALL_PID);
 800bad0:	2003      	movs	r0, #3
 800bad2:	f003 f8cb 	bl	800ec6c <PIDReset>
	PIDReset(D_WALL_PID);
 800bad6:	2001      	movs	r0, #1
}
 800bad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PIDReset(D_WALL_PID);
 800badc:	f003 b8c6 	b.w	800ec6c <PIDReset>
 800bae0:	08016598 	.word	0x08016598
 800bae4:	20005094 	.word	0x20005094
 800bae8:	43960000 	.word	0x43960000
 800baec:	200053d8 	.word	0x200053d8
 800baf0:	2000509c 	.word	0x2000509c
 800baf4:	080165b4 	.word	0x080165b4
 800baf8:	40000424 	.word	0x40000424
 800bafc:	40000824 	.word	0x40000824
 800bb00:	20006ce0 	.word	0x20006ce0
 800bb04:	20006a98 	.word	0x20006a98
 800bb08:	20005630 	.word	0x20005630
 800bb0c:	20005640 	.word	0x20005640
 800bb10:	20005660 	.word	0x20005660
 800bb14:	200056c4 	.word	0x200056c4
 800bb18:	43b90000 	.word	0x43b90000
 800bb1c:	20005654 	.word	0x20005654
 800bb20:	428c0000 	.word	0x428c0000

0800bb24 <InitFastest>:

void InitFastest()
{
 800bb24:	b538      	push	{r3, r4, r5, lr}
	Motor_PWM_Start();
 800bb26:	f002 ff97 	bl	800ea58 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800bb2a:	f002 ff0f 	bl	800e94c <EncoderStart>
	EmitterON();
 800bb2e:	f002 ff1d 	bl	800e96c <EmitterON>
	ADCStart();
 800bb32:	f002 fce3 	bl	800e4fc <ADCStart>

	uint8_t imu_check;
	imu_check = IMU_init();
 800bb36:	f002 fec5 	bl	800e8c4 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bb3a:	4c3a      	ldr	r4, [pc, #232]	; (800bc24 <InitFastest+0x100>)

	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
 800bb3c:	4d3a      	ldr	r5, [pc, #232]	; (800bc28 <InitFastest+0x104>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bb3e:	4601      	mov	r1, r0
 800bb40:	4620      	mov	r0, r4
 800bb42:	f007 f9ab 	bl	8012e9c <iprintf>
	imu_check =IMU_init();
 800bb46:	f002 febd 	bl	800e8c4 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bb4a:	4601      	mov	r1, r0
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f007 f9a5 	bl	8012e9c <iprintf>
	HAL_Delay(100);
 800bb52:	2064      	movs	r0, #100	; 0x64
 800bb54:	f003 fa38 	bl	800efc8 <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800bb58:	2138      	movs	r1, #56	; 0x38
 800bb5a:	2037      	movs	r0, #55	; 0x37
 800bb5c:	f002 fd92 	bl	800e684 <ReadIMU>
 800bb60:	4b32      	ldr	r3, [pc, #200]	; (800bc2c <InitFastest+0x108>)
	Acceleration = 0;
	AngularAcceleration = 0;
 800bb62:	4c33      	ldr	r4, [pc, #204]	; (800bc30 <InitFastest+0x10c>)
	ZGyro = ReadIMU(0x37, 0x38);
 800bb64:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800bb68:	6818      	ldr	r0, [r3, #0]
 800bb6a:	f7fc fc25 	bl	80083b8 <__aeabi_f2d>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	4830      	ldr	r0, [pc, #192]	; (800bc34 <InitFastest+0x110>)
 800bb74:	f007 f992 	bl	8012e9c <iprintf>
	PIDChangeFlag(L_VELO_PID, 0);
 800bb78:	2100      	movs	r1, #0
 800bb7a:	2004      	movs	r0, #4
 800bb7c:	f003 f86e 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800bb80:	2100      	movs	r1, #0
 800bb82:	2005      	movs	r0, #5
 800bb84:	f003 f86a 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bb88:	2100      	movs	r1, #0
 800bb8a:	2002      	movs	r0, #2
 800bb8c:	f003 f866 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bb90:	2100      	movs	r1, #0
 800bb92:	2003      	movs	r0, #3
 800bb94:	f003 f862 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800bb98:	2100      	movs	r1, #0
 800bb9a:	2001      	movs	r0, #1
 800bb9c:	f003 f85e 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800bba0:	2100      	movs	r1, #0
 800bba2:	4608      	mov	r0, r1
 800bba4:	f003 f85a 	bl	800ec5c <PIDChangeFlag>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800bba8:	f247 512f 	movw	r1, #29999	; 0x752f
 800bbac:	4822      	ldr	r0, [pc, #136]	; (800bc38 <InitFastest+0x114>)
 800bbae:	f002 ffc5 	bl	800eb3c <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800bbb2:	f247 512f 	movw	r1, #29999	; 0x752f
 800bbb6:	4821      	ldr	r0, [pc, #132]	; (800bc3c <InitFastest+0x118>)
 800bbb8:	f002 ffc0 	bl	800eb3c <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800bbbc:	4820      	ldr	r0, [pc, #128]	; (800bc40 <InitFastest+0x11c>)
 800bbbe:	f004 ffdb 	bl	8010b78 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800bbc2:	4820      	ldr	r0, [pc, #128]	; (800bc44 <InitFastest+0x120>)
 800bbc4:	f004 ffd8 	bl	8010b78 <HAL_TIM_Base_Start_IT>
	TargetVelocity[BODY] = 0;
 800bbc8:	4b1f      	ldr	r3, [pc, #124]	; (800bc48 <InitFastest+0x124>)
	Acceleration = 0;
 800bbca:	4820      	ldr	r0, [pc, #128]	; (800bc4c <InitFastest+0x128>)
	TotalPulse[LEFT] = 0;
 800bbcc:	4920      	ldr	r1, [pc, #128]	; (800bc50 <InitFastest+0x12c>)
	TargetVelocity[BODY] = 0;
 800bbce:	2200      	movs	r2, #0
 800bbd0:	609a      	str	r2, [r3, #8]
	TotalPulse[RIGHT] = 0;
	TotalPulse[BODY] = 0;

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	TargetPhoto[SL] = 370;//Photo[SL];
 800bbd2:	4b20      	ldr	r3, [pc, #128]	; (800bc54 <InitFastest+0x130>)
	TargetAngularV = 0;
 800bbd4:	602a      	str	r2, [r5, #0]
	Acceleration = 0;
 800bbd6:	6002      	str	r2, [r0, #0]
	TargetPhoto[SL] = 370;//Photo[SL];
 800bbd8:	4d1f      	ldr	r5, [pc, #124]	; (800bc58 <InitFastest+0x134>)
	AngularAcceleration = 0;
 800bbda:	6022      	str	r2, [r4, #0]
	TargetPhoto[SR] = 300;//Photo[SR];
 800bbdc:	481f      	ldr	r0, [pc, #124]	; (800bc5c <InitFastest+0x138>)
	TotalPulse[LEFT] = 0;
 800bbde:	2400      	movs	r4, #0
 800bbe0:	600c      	str	r4, [r1, #0]
	TotalPulse[RIGHT] = 0;
 800bbe2:	604c      	str	r4, [r1, #4]
	TotalPulse[BODY] = 0;
 800bbe4:	608c      	str	r4, [r1, #8]
	TargetPhoto[SL] = 370;//Photo[SL];
 800bbe6:	609d      	str	r5, [r3, #8]
	TargetPhoto[SR] = 300;//Photo[SR];
 800bbe8:	6058      	str	r0, [r3, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800bbea:	edd3 7a02 	vldr	s15, [r3, #8]
 800bbee:	ed93 7a01 	vldr	s14, [r3, #4]
 800bbf2:	4b1b      	ldr	r3, [pc, #108]	; (800bc60 <InitFastest+0x13c>)
 800bbf4:	ee77 7ac7 	vsub.f32	s15, s15, s14

	PIDReset(L_VELO_PID);
 800bbf8:	2004      	movs	r0, #4
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800bbfa:	edc3 7a00 	vstr	s15, [r3]
	PIDReset(L_VELO_PID);
 800bbfe:	f003 f835 	bl	800ec6c <PIDReset>
	PIDReset(R_VELO_PID);
 800bc02:	2005      	movs	r0, #5
 800bc04:	f003 f832 	bl	800ec6c <PIDReset>
	PIDReset(A_VELO_PID);
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f003 f82f 	bl	800ec6c <PIDReset>
	PIDReset(L_WALL_PID);
 800bc0e:	2002      	movs	r0, #2
 800bc10:	f003 f82c 	bl	800ec6c <PIDReset>
	PIDReset(R_WALL_PID);
 800bc14:	2003      	movs	r0, #3
 800bc16:	f003 f829 	bl	800ec6c <PIDReset>
	PIDReset(D_WALL_PID);
 800bc1a:	2001      	movs	r0, #1
}
 800bc1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800bc20:	f003 b824 	b.w	800ec6c <PIDReset>
 800bc24:	08016598 	.word	0x08016598
 800bc28:	20005640 	.word	0x20005640
 800bc2c:	200053d8 	.word	0x200053d8
 800bc30:	2000509c 	.word	0x2000509c
 800bc34:	080165b4 	.word	0x080165b4
 800bc38:	40000424 	.word	0x40000424
 800bc3c:	40000824 	.word	0x40000824
 800bc40:	20006ce0 	.word	0x20006ce0
 800bc44:	20006a98 	.word	0x20006a98
 800bc48:	20005630 	.word	0x20005630
 800bc4c:	20005094 	.word	0x20005094
 800bc50:	20005660 	.word	0x20005660
 800bc54:	200056c4 	.word	0x200056c4
 800bc58:	43b90000 	.word	0x43b90000
 800bc5c:	43960000 	.word	0x43960000
 800bc60:	20005654 	.word	0x20005654

0800bc64 <Debug>:
void Debug()
{
 800bc64:	b508      	push	{r3, lr}
	//テストする
	InitExplore();
	TotalPulse[RIGHT] = 0;
 800bc66:	4d23      	ldr	r5, [pc, #140]	; (800bcf4 <Debug+0x90>)
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	PIDChangeFlag(A_VELO_PID, 1);
	ExploreVelocity=0;
 800bc68:	ed9f 8a23 	vldr	s16, [pc, #140]	; 800bcf8 <Debug+0x94>
	InitExplore();
 800bc6c:	f7ff febe 	bl	800b9ec <InitExplore>
	TotalPulse[RIGHT] = 0;
 800bc70:	2400      	movs	r4, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800bc72:	2101      	movs	r1, #1
 800bc74:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bc76:	606c      	str	r4, [r5, #4]
	TotalPulse[LEFT] = 0;
 800bc78:	602c      	str	r4, [r5, #0]
	TotalPulse[BODY] = 0;
 800bc7a:	60ac      	str	r4, [r5, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bc7c:	f002 ffee 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bc80:	2101      	movs	r1, #1
 800bc82:	2005      	movs	r0, #5
 800bc84:	f002 ffea 	bl	800ec5c <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800bc88:	68a9      	ldr	r1, [r5, #8]
 800bc8a:	481c      	ldr	r0, [pc, #112]	; (800bcfc <Debug+0x98>)
 800bc8c:	682a      	ldr	r2, [r5, #0]
 800bc8e:	686b      	ldr	r3, [r5, #4]
 800bc90:	f007 f904 	bl	8012e9c <iprintf>
	PIDChangeFlag(D_WALL_PID, 0);
 800bc94:	4621      	mov	r1, r4
 800bc96:	2001      	movs	r0, #1
 800bc98:	f002 ffe0 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	2002      	movs	r0, #2
 800bca0:	f002 ffdc 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bca4:	4621      	mov	r1, r4
 800bca6:	2003      	movs	r0, #3
 800bca8:	f002 ffd8 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800bcac:	4620      	mov	r0, r4
 800bcae:	2101      	movs	r1, #1
 800bcb0:	f002 ffd4 	bl	800ec5c <PIDChangeFlag>
	ExploreVelocity=0;
 800bcb4:	4b12      	ldr	r3, [pc, #72]	; (800bd00 <Debug+0x9c>)
	ChangeLED(3);
 800bcb6:	2003      	movs	r0, #3
	ExploreVelocity=0;
 800bcb8:	ed83 8a00 	vstr	s16, [r3]
	ChangeLED(3);
 800bcbc:	f002 fe72 	bl	800e9a4 <ChangeLED>
	//HAL_Delay(500);

	//IT_mode = WRITINGFREE;
	IT_mode = EXPLORE;
 800bcc0:	4b10      	ldr	r3, [pc, #64]	; (800bd04 <Debug+0xa0>)

	//直線距離の計測
	//加減速
	FastStraight(0.5, (61.5+90*7)/90, 1.00, -1.00/*2.89, -2.89*/, 240, 0);
 800bcc2:	ed9f 2a11 	vldr	s4, [pc, #68]	; 800bd08 <Debug+0xa4>
 800bcc6:	eddf 0a11 	vldr	s1, [pc, #68]	; 800bd0c <Debug+0xa8>
	IT_mode = EXPLORE;
 800bcca:	2206      	movs	r2, #6
	FastStraight(0.5, (61.5+90*7)/90, 1.00, -1.00/*2.89, -2.89*/, 240, 0);
 800bccc:	eef0 2a48 	vmov.f32	s5, s16
 800bcd0:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 800bcd4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800bcd8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
	IT_mode = EXPLORE;
 800bcdc:	601a      	str	r2, [r3, #0]
	FastStraight(0.5, (61.5+90*7)/90, 1.00, -1.00/*2.89, -2.89*/, 240, 0);
 800bcde:	f000 ffb3 	bl	800cc48 <FastStraight>
	while(1){
		PIDChangeFlag(L_VELO_PID, 0);
 800bce2:	2100      	movs	r1, #0
 800bce4:	2004      	movs	r0, #4
 800bce6:	f002 ffb9 	bl	800ec5c <PIDChangeFlag>
		PIDChangeFlag(R_VELO_PID, 0);
 800bcea:	2100      	movs	r1, #0
 800bcec:	2005      	movs	r0, #5
 800bcee:	f002 ffb5 	bl	800ec5c <PIDChangeFlag>
 800bcf2:	e7f6      	b.n	800bce2 <Debug+0x7e>
 800bcf4:	20005660 	.word	0x20005660
 800bcf8:	00000000 	.word	0x00000000
 800bcfc:	08016328 	.word	0x08016328
 800bd00:	200056b4 	.word	0x200056b4
 800bd04:	2000561c 	.word	0x2000561c
 800bd08:	43700000 	.word	0x43700000
 800bd0c:	40f5ddde 	.word	0x40f5ddde

0800bd10 <GainSetting>:
	Load_Gain();
	Change_Gain();

}

int GainSetting(int n){
 800bd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	_Bool loop_flag=true;
	while(loop_flag){
		Signal(n);
		printf("セッティング対象の選択\r\n");
 800bd14:	4e34      	ldr	r6, [pc, #208]	; (800bde8 <GainSetting+0xd8>)
			ChangeLED(setting_target);
		}

		//現在のパラメータを表示（初期のRAMでよい）
//		printParameter(setting_target);
		printf("対象の現在のパラメータを表示\r\n");
 800bd16:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 800be0c <GainSetting+0xfc>

		printf("パラメータ変更しますか? : to Head=0, Yes=1, No=2, to Top=3\r\n");
 800bd1a:	4f34      	ldr	r7, [pc, #208]	; (800bdec <GainSetting+0xdc>)
int GainSetting(int n){
 800bd1c:	b082      	sub	sp, #8
 800bd1e:	b245      	sxtb	r5, r0
		Signal(n);
 800bd20:	4628      	mov	r0, r5
 800bd22:	f003 f809 	bl	800ed38 <Signal>
		int8_t setting_target=0;
 800bd26:	2400      	movs	r4, #0
		printf("セッティング対象の選択\r\n");
 800bd28:	4630      	mov	r0, r6
 800bd2a:	f007 f93f 	bl	8012fac <puts>
		ModeSelect(0, 7, &setting_target);
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f10d 0205 	add.w	r2, sp, #5
 800bd34:	2107      	movs	r1, #7
		int8_t setting_target=0;
 800bd36:	f88d 4005 	strb.w	r4, [sp, #5]
		ModeSelect(0, 7, &setting_target);
 800bd3a:	f003 f869 	bl	800ee10 <ModeSelect>
		if(setting_target == 0) {
 800bd3e:	f99d 0005 	ldrsb.w	r0, [sp, #5]
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d0ec      	beq.n	800bd20 <GainSetting+0x10>
		else if(setting_target == 7) {
 800bd46:	2807      	cmp	r0, #7
 800bd48:	d046      	beq.n	800bdd8 <GainSetting+0xc8>
			ChangeLED(setting_target);
 800bd4a:	f002 fe2b 	bl	800e9a4 <ChangeLED>
		printf("対象の現在のパラメータを表示\r\n");
 800bd4e:	4640      	mov	r0, r8
 800bd50:	f007 f92c 	bl	8012fac <puts>
		printf("パラメータ変更しますか? : to Head=0, Yes=1, No=2, to Top=3\r\n");
 800bd54:	4638      	mov	r0, r7
 800bd56:	f007 f929 	bl	8012fac <puts>
		//パラメータ変更の有無
		int8_t change = 0;
 800bd5a:	aa02      	add	r2, sp, #8
		ModeSelect(0, 3, &change);
 800bd5c:	4620      	mov	r0, r4
		int8_t change = 0;
 800bd5e:	f802 4d02 	strb.w	r4, [r2, #-2]!
		ModeSelect(0, 3, &change);
 800bd62:	2103      	movs	r1, #3
 800bd64:	f003 f854 	bl	800ee10 <ModeSelect>
		Signal(change);
 800bd68:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 800bd6c:	f002 ffe4 	bl	800ed38 <Signal>

		//変更するならどれを変更するか（対象ごとに違う操作）
		if(change == 0) {
 800bd70:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d0d3      	beq.n	800bd20 <GainSetting+0x10>
			continue;
		}
		else if(change == 1){ //0なら戻る2ならそのまま進む
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d003      	beq.n	800bd84 <GainSetting+0x74>
			 //どれを変更するか
			//0なら一つ戻る、7ならトップに戻る （関数の戻り値かポインタで返し、returnで
		}
		else if(change == 2) {
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d019      	beq.n	800bdb4 <GainSetting+0xa4>
			//そのまま次へ
			printf("変更せず次へ\r\n");
		}
		else if(change == 3) {
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	d029      	beq.n	800bdd8 <GainSetting+0xc8>
			printf("トップのモード選択へ\r\n");
			return 0;
		}

		printf("動作確認は手動で動かしますか？ロボットにアクションさせますか？ \r\n"
 800bd84:	481a      	ldr	r0, [pc, #104]	; (800bdf0 <GainSetting+0xe0>)
 800bd86:	f007 f911 	bl	8012fac <puts>
				"to Head=0, 手動=1, アクション（+ログ可視化）=2, to Top=3\r\n");
		//動作確認
		int8_t self_or_action = 0;
 800bd8a:	aa02      	add	r2, sp, #8
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	f802 0d01 	strb.w	r0, [r2, #-1]!
		ModeSelect(0, 3, &self_or_action);
 800bd92:	2103      	movs	r1, #3
 800bd94:	f003 f83c 	bl	800ee10 <ModeSelect>
			//手動
			//アクション（ログ可視化あり）

		if(self_or_action == 0) continue;
 800bd98:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d0bf      	beq.n	800bd20 <GainSetting+0x10>
		else if(self_or_action == 1){ //0なら戻る2ならそのまま進む
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d00b      	beq.n	800bdbc <GainSetting+0xac>
			loop_flag = false;
			printf("手動\r\n");
		}
		else if(self_or_action == 2) {
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d013      	beq.n	800bdd0 <GainSetting+0xc0>
			loop_flag = false;
			printf("アクション + ログ可視化\r\n");//そのまま次へ
		}
		else if(self_or_action == 3) return 0;
 800bda8:	2b03      	cmp	r3, #3
 800bdaa:	d018      	beq.n	800bdde <GainSetting+0xce>

		//ループを続けるか?（ハードウェアのスイッチの押下待ち）
		loop_flag == true ? printf("続行\r\n") : printf("終了\r\n");
 800bdac:	4811      	ldr	r0, [pc, #68]	; (800bdf4 <GainSetting+0xe4>)
 800bdae:	f007 f8fd 	bl	8012fac <puts>
 800bdb2:	e7b5      	b.n	800bd20 <GainSetting+0x10>
			printf("変更せず次へ\r\n");
 800bdb4:	4810      	ldr	r0, [pc, #64]	; (800bdf8 <GainSetting+0xe8>)
 800bdb6:	f007 f8f9 	bl	8012fac <puts>
 800bdba:	e7e3      	b.n	800bd84 <GainSetting+0x74>
			printf("手動\r\n");
 800bdbc:	480f      	ldr	r0, [pc, #60]	; (800bdfc <GainSetting+0xec>)
 800bdbe:	f007 f8f5 	bl	8012fac <puts>
		loop_flag == true ? printf("続行\r\n") : printf("終了\r\n");
 800bdc2:	480f      	ldr	r0, [pc, #60]	; (800be00 <GainSetting+0xf0>)
 800bdc4:	f007 f8f2 	bl	8012fac <puts>

		//そのままフラッシュに書き込みたい
	}
	return 1;
 800bdc8:	2001      	movs	r0, #1

}
 800bdca:	b002      	add	sp, #8
 800bdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("アクション + ログ可視化\r\n");//そのまま次へ
 800bdd0:	480c      	ldr	r0, [pc, #48]	; (800be04 <GainSetting+0xf4>)
 800bdd2:	f007 f8eb 	bl	8012fac <puts>
 800bdd6:	e7f4      	b.n	800bdc2 <GainSetting+0xb2>
			printf("トップのモード選択へ\r\n");
 800bdd8:	480b      	ldr	r0, [pc, #44]	; (800be08 <GainSetting+0xf8>)
 800bdda:	f007 f8e7 	bl	8012fac <puts>
			return 0;
 800bdde:	2000      	movs	r0, #0
}
 800bde0:	b002      	add	sp, #8
 800bde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde6:	bf00      	nop
 800bde8:	080163b0 	.word	0x080163b0
 800bdec:	08016420 	.word	0x08016420
 800bdf0:	0801647c 	.word	0x0801647c
 800bdf4:	08016550 	.word	0x08016550
 800bdf8:	08016468 	.word	0x08016468
 800bdfc:	08016524 	.word	0x08016524
 800be00:	08016558 	.word	0x08016558
 800be04:	0801652c 	.word	0x0801652c
 800be08:	080163d4 	.word	0x080163d4
 800be0c:	080163f4 	.word	0x080163f4

0800be10 <GainTestDWall>:
		TargetVelocity[BODY] = 0;

	}
}
void GainTestDWall()
{
 800be10:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	IT_mode = EXPLORE;
 800be14:	4b30      	ldr	r3, [pc, #192]	; (800bed8 <GainTestDWall+0xc8>)
	PIDChangeFlag(R_WALL_PID, 0);
	PIDChangeFlag(F_WALL_PID, 0);
	PIDChangeFlag(A_VELO_PID, 0);

//	PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800be16:	ed9f 9a31 	vldr	s18, [pc, #196]	; 800bedc <GainTestDWall+0xcc>
 800be1a:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 800beec <GainTestDWall+0xdc>
 800be1e:	4c30      	ldr	r4, [pc, #192]	; (800bee0 <GainTestDWall+0xd0>)
//		PIDChangeFlag(D_WALL_PID, 0);
//		PIDChangeFlag(L_WALL_PID, 0);
//		PIDChangeFlag(R_WALL_PID, 0);
//		PIDChangeFlag(F_WALL_PID, 0);
//		PIDChangeFlag(A_VELO_PID, 1);
		printf("前左: %f,前右: %f, 和: %f, 横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[FL]+Photo[FR],Photo[SL],Photo[SR]);
 800be20:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800bef0 <GainTestDWall+0xe0>
	IT_mode = EXPLORE;
 800be24:	2206      	movs	r2, #6
{
 800be26:	b089      	sub	sp, #36	; 0x24
	IT_mode = EXPLORE;
 800be28:	601a      	str	r2, [r3, #0]
	InitExplore();
 800be2a:	f7ff fddf 	bl	800b9ec <InitExplore>
	TotalPulse[RIGHT] = 0;
 800be2e:	4b2d      	ldr	r3, [pc, #180]	; (800bee4 <GainTestDWall+0xd4>)
 800be30:	2500      	movs	r5, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800be32:	2101      	movs	r1, #1
 800be34:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800be36:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800be38:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800be3a:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800be3c:	f002 ff0e 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800be40:	2101      	movs	r1, #1
 800be42:	2005      	movs	r0, #5
 800be44:	f002 ff0a 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 1);
 800be48:	2101      	movs	r1, #1
 800be4a:	4608      	mov	r0, r1
 800be4c:	f002 ff06 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800be50:	4629      	mov	r1, r5
 800be52:	2002      	movs	r0, #2
 800be54:	f002 ff02 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800be58:	4629      	mov	r1, r5
 800be5a:	2003      	movs	r0, #3
 800be5c:	f002 fefe 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(F_WALL_PID, 0);
 800be60:	4629      	mov	r1, r5
 800be62:	2008      	movs	r0, #8
 800be64:	f002 fefa 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800be68:	4628      	mov	r0, r5
 800be6a:	4629      	mov	r1, r5
 800be6c:	f002 fef6 	bl	800ec5c <PIDChangeFlag>
	ExploreVelocity=0;
 800be70:	4b1d      	ldr	r3, [pc, #116]	; (800bee8 <GainTestDWall+0xd8>)
	ChangeLED(2);
 800be72:	2002      	movs	r0, #2
	ExploreVelocity=0;
 800be74:	ed83 9a00 	vstr	s18, [r3]
	ChangeLED(2);
 800be78:	f002 fd94 	bl	800e9a4 <ChangeLED>
		TargetVelocity[BODY] = 0;
 800be7c:	ed8b 9a02 	vstr	s18, [fp, #8]
		printf("前左: %f,前右: %f, 和: %f, 横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[FL]+Photo[FR],Photo[SL],Photo[SR]);
 800be80:	6820      	ldr	r0, [r4, #0]
 800be82:	68e5      	ldr	r5, [r4, #12]
 800be84:	edd4 8a00 	vldr	s17, [r4]
 800be88:	ed94 8a03 	vldr	s16, [r4, #12]
 800be8c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800be90:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800be94:	f7fc fa90 	bl	80083b8 <__aeabi_f2d>
 800be98:	4606      	mov	r6, r0
 800be9a:	4648      	mov	r0, r9
 800be9c:	460f      	mov	r7, r1
 800be9e:	f7fc fa8b 	bl	80083b8 <__aeabi_f2d>
 800bea2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bea6:	4640      	mov	r0, r8
 800bea8:	f7fc fa86 	bl	80083b8 <__aeabi_f2d>
 800beac:	ee78 7a88 	vadd.f32	s15, s17, s16
 800beb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800beb4:	ee17 0a90 	vmov	r0, s15
 800beb8:	f7fc fa7e 	bl	80083b8 <__aeabi_f2d>
 800bebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bec0:	4628      	mov	r0, r5
 800bec2:	f7fc fa79 	bl	80083b8 <__aeabi_f2d>
 800bec6:	4632      	mov	r2, r6
 800bec8:	e9cd 0100 	strd	r0, r1, [sp]
 800becc:	463b      	mov	r3, r7
 800bece:	4650      	mov	r0, sl
 800bed0:	f006 ffe4 	bl	8012e9c <iprintf>
 800bed4:	e7d2      	b.n	800be7c <GainTestDWall+0x6c>
 800bed6:	bf00      	nop
 800bed8:	2000561c 	.word	0x2000561c
 800bedc:	00000000 	.word	0x00000000
 800bee0:	200056a0 	.word	0x200056a0
 800bee4:	20005660 	.word	0x20005660
 800bee8:	200056b4 	.word	0x200056b4
 800beec:	20005630 	.word	0x20005630
 800bef0:	08016560 	.word	0x08016560

0800bef4 <GainTestAVelo>:
	}
}

void GainTestAVelo()
{
 800bef4:	b508      	push	{r3, lr}
	IT_mode = EXPLORE;
 800bef6:	4b16      	ldr	r3, [pc, #88]	; (800bf50 <GainTestAVelo+0x5c>)
 800bef8:	2206      	movs	r2, #6
 800befa:	601a      	str	r2, [r3, #0]
	InitExplore();
 800befc:	f7ff fd76 	bl	800b9ec <InitExplore>
	TotalPulse[RIGHT] = 0;
 800bf00:	4b14      	ldr	r3, [pc, #80]	; (800bf54 <GainTestAVelo+0x60>)
 800bf02:	2500      	movs	r5, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800bf04:	2101      	movs	r1, #1
 800bf06:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bf08:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bf0a:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800bf0c:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bf0e:	f002 fea5 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bf12:	2101      	movs	r1, #1
 800bf14:	2005      	movs	r0, #5
 800bf16:	f002 fea1 	bl	800ec5c <PIDChangeFlag>
	//PIDChangeFlagStraight(A_VELO_PID);
	PIDChangeFlag(A_VELO_PID, 0);
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	f002 fe9d 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800bf22:	4629      	mov	r1, r5
 800bf24:	2001      	movs	r0, #1
 800bf26:	f002 fe99 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bf2a:	4629      	mov	r1, r5
 800bf2c:	2002      	movs	r0, #2
 800bf2e:	f002 fe95 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bf32:	4629      	mov	r1, r5
 800bf34:	2003      	movs	r0, #3
 800bf36:	f002 fe91 	bl	800ec5c <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800bf3a:	4b07      	ldr	r3, [pc, #28]	; (800bf58 <GainTestAVelo+0x64>)
 800bf3c:	2400      	movs	r4, #0
	ChangeLED(5);
 800bf3e:	2005      	movs	r0, #5
	ExploreVelocity=0;
 800bf40:	601c      	str	r4, [r3, #0]
	ChangeLED(5);
 800bf42:	f002 fd2f 	bl	800e9a4 <ChangeLED>
 800bf46:	4a05      	ldr	r2, [pc, #20]	; (800bf5c <GainTestAVelo+0x68>)
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800bf48:	4623      	mov	r3, r4
 800bf4a:	6093      	str	r3, [r2, #8]
 800bf4c:	e7fd      	b.n	800bf4a <GainTestAVelo+0x56>
 800bf4e:	bf00      	nop
 800bf50:	2000561c 	.word	0x2000561c
 800bf54:	20005660 	.word	0x20005660
 800bf58:	200056b4 	.word	0x200056b4
 800bf5c:	20005630 	.word	0x20005630

0800bf60 <WritingFree>:
		//printf("%f, %f\r\n", AngularV, Angle);

	}
}
void WritingFree()
{
 800bf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf64:	ed2d 8b02 	vpush	{d8}
	IT_mode = WRITINGFREE;

	dbc = 0;
 800bf68:	4d37      	ldr	r5, [pc, #220]	; (800c048 <WritingFree+0xe8>)
	IT_mode = WRITINGFREE;
 800bf6a:	4f38      	ldr	r7, [pc, #224]	; (800c04c <WritingFree+0xec>)
	PIDChangeFlag(D_WALL_PID, 0);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	IT_mode = EXPLORE;
	PIDChangeFlag(A_VELO_PID, 1);
	ExploreVelocity=0;
 800bf6c:	ed9f 8a38 	vldr	s16, [pc, #224]	; 800c050 <WritingFree+0xf0>
 800bf70:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 800c070 <WritingFree+0x110>
	{
		PIDChangeFlag(A_VELO_PID, 0);
		TargetVelocity[BODY] = 0;
		HAL_Delay(5000);
		for(int i=0; i < 600; i++){
			printf("%d, %lf, %lf\r\n", i, debugVL[i], debugVR[i]);
 800bf74:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 800c074 <WritingFree+0x114>
{
 800bf78:	b083      	sub	sp, #12
	dbc = 0;
 800bf7a:	2400      	movs	r4, #0
	IT_mode = WRITINGFREE;
 800bf7c:	2607      	movs	r6, #7
 800bf7e:	603e      	str	r6, [r7, #0]
	dbc = 0;
 800bf80:	602c      	str	r4, [r5, #0]
	InitExplore();
 800bf82:	f7ff fd33 	bl	800b9ec <InitExplore>
	printf("3\r\n");
 800bf86:	4833      	ldr	r0, [pc, #204]	; (800c054 <WritingFree+0xf4>)
 800bf88:	f007 f810 	bl	8012fac <puts>
	printf("4\r\n");
 800bf8c:	4832      	ldr	r0, [pc, #200]	; (800c058 <WritingFree+0xf8>)
 800bf8e:	f007 f80d 	bl	8012fac <puts>
	TotalPulse[RIGHT] = 0;
 800bf92:	4b32      	ldr	r3, [pc, #200]	; (800c05c <WritingFree+0xfc>)
	PIDChangeFlag(L_VELO_PID, 1);
 800bf94:	2101      	movs	r1, #1
 800bf96:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bf98:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bf9a:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800bf9c:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bf9e:	f002 fe5d 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	2005      	movs	r0, #5
 800bfa6:	f002 fe59 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800bfaa:	4621      	mov	r1, r4
 800bfac:	2001      	movs	r0, #1
 800bfae:	f002 fe55 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	2002      	movs	r0, #2
 800bfb6:	f002 fe51 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bfba:	4621      	mov	r1, r4
 800bfbc:	2003      	movs	r0, #3
 800bfbe:	f002 fe4d 	bl	800ec5c <PIDChangeFlag>
	IT_mode = EXPLORE;
 800bfc2:	2306      	movs	r3, #6
	PIDChangeFlag(A_VELO_PID, 1);
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	4620      	mov	r0, r4
	IT_mode = EXPLORE;
 800bfc8:	603b      	str	r3, [r7, #0]
	PIDChangeFlag(A_VELO_PID, 1);
 800bfca:	f002 fe47 	bl	800ec5c <PIDChangeFlag>
	ExploreVelocity=0;
 800bfce:	4b24      	ldr	r3, [pc, #144]	; (800c060 <WritingFree+0x100>)
	ChangeLED(7);
 800bfd0:	4630      	mov	r0, r6
	ExploreVelocity=0;
 800bfd2:	ed83 8a00 	vstr	s16, [r3]
	ChangeLED(7);
 800bfd6:	f002 fce5 	bl	800e9a4 <ChangeLED>
	FastStraight(0.5, 8, 0.5, -0.5, 4000, 10);
 800bfda:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
	dbc = 1;
 800bfde:	2301      	movs	r3, #1
	FastStraight(0.5, 8, 0.5, -0.5, 4000, 10);
 800bfe0:	eeb0 0a41 	vmov.f32	s0, s2
 800bfe4:	eef2 2a04 	vmov.f32	s5, #36	; 0x41200000  10.0
 800bfe8:	ed9f 2a1e 	vldr	s4, [pc, #120]	; 800c064 <WritingFree+0x104>
	dbc = 1;
 800bfec:	602b      	str	r3, [r5, #0]
	FastStraight(0.5, 8, 0.5, -0.5, 4000, 10);
 800bfee:	eefe 1a00 	vmov.f32	s3, #224	; 0xbf000000 -0.5
 800bff2:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800bff6:	f000 fe27 	bl	800cc48 <FastStraight>
	dbc = 0;
 800bffa:	602c      	str	r4, [r5, #0]
		PIDChangeFlag(A_VELO_PID, 0);
 800bffc:	2100      	movs	r1, #0
 800bffe:	4608      	mov	r0, r1
 800c000:	f002 fe2c 	bl	800ec5c <PIDChangeFlag>
		HAL_Delay(5000);
 800c004:	f241 3088 	movw	r0, #5000	; 0x1388
		TargetVelocity[BODY] = 0;
 800c008:	ed8b 8a02 	vstr	s16, [fp, #8]
		HAL_Delay(5000);
 800c00c:	f002 ffdc 	bl	800efc8 <HAL_Delay>
 800c010:	4e15      	ldr	r6, [pc, #84]	; (800c068 <WritingFree+0x108>)
 800c012:	4d16      	ldr	r5, [pc, #88]	; (800c06c <WritingFree+0x10c>)
		for(int i=0; i < 600; i++){
 800c014:	2400      	movs	r4, #0
			printf("%d, %lf, %lf\r\n", i, debugVL[i], debugVR[i]);
 800c016:	f856 0b04 	ldr.w	r0, [r6], #4
 800c01a:	f855 7b04 	ldr.w	r7, [r5], #4
 800c01e:	f7fc f9cb 	bl	80083b8 <__aeabi_f2d>
 800c022:	4680      	mov	r8, r0
 800c024:	4638      	mov	r0, r7
 800c026:	4689      	mov	r9, r1
 800c028:	f7fc f9c6 	bl	80083b8 <__aeabi_f2d>
 800c02c:	4642      	mov	r2, r8
 800c02e:	e9cd 0100 	strd	r0, r1, [sp]
 800c032:	464b      	mov	r3, r9
 800c034:	4621      	mov	r1, r4
 800c036:	4650      	mov	r0, sl
		for(int i=0; i < 600; i++){
 800c038:	3401      	adds	r4, #1
			printf("%d, %lf, %lf\r\n", i, debugVL[i], debugVR[i]);
 800c03a:	f006 ff2f 	bl	8012e9c <iprintf>
		for(int i=0; i < 600; i++){
 800c03e:	f5b4 7f16 	cmp.w	r4, #600	; 0x258
 800c042:	d1e8      	bne.n	800c016 <WritingFree+0xb6>
 800c044:	e7da      	b.n	800bffc <WritingFree+0x9c>
 800c046:	bf00      	nop
 800c048:	20000204 	.word	0x20000204
 800c04c:	2000561c 	.word	0x2000561c
 800c050:	00000000 	.word	0x00000000
 800c054:	08016464 	.word	0x08016464
 800c058:	080165c0 	.word	0x080165c0
 800c05c:	20005660 	.word	0x20005660
 800c060:	200056b4 	.word	0x200056b4
 800c064:	457a0000 	.word	0x457a0000
 800c068:	20000208 	.word	0x20000208
 800c06c:	20002148 	.word	0x20002148
 800c070:	20005630 	.word	0x20005630
 800c074:	080165c4 	.word	0x080165c4

0800c078 <FastestRun>:
	Sla.Theta1 = 30*M_PI/180;
	Sla.Theta2 = 60*M_PI/180;
	Sla.Theta3 = 90*M_PI/180;
}
void FastestRun()
{
 800c078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c07c:	ed2d 8b02 	vpush	{d8}
	IT_mode = EXPLORE;
 800c080:	4b91      	ldr	r3, [pc, #580]	; (800c2c8 <FastestRun+0x250>)



//	wall_init();

	TotalPulse[RIGHT] = 0;
 800c082:	4e92      	ldr	r6, [pc, #584]	; (800c2cc <FastestRun+0x254>)
{
 800c084:	b085      	sub	sp, #20
	IT_mode = EXPLORE;
 800c086:	2206      	movs	r2, #6
	HAL_Delay(100);
 800c088:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800c08a:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800c08c:	f002 ff9c 	bl	800efc8 <HAL_Delay>
	int8_t mode=1;
 800c090:	aa04      	add	r2, sp, #16
 800c092:	2501      	movs	r5, #1
 800c094:	f802 5d02 	strb.w	r5, [r2, #-2]!
	  ModeSelect( 1, 2, &mode);
 800c098:	2102      	movs	r1, #2
 800c09a:	4628      	mov	r0, r5
 800c09c:	f002 feb8 	bl	800ee10 <ModeSelect>
	  Signal( mode );
 800c0a0:	f99d 000e 	ldrsb.w	r0, [sp, #14]
 800c0a4:	f002 fe48 	bl	800ed38 <Signal>
		HAL_Delay(100);
 800c0a8:	2064      	movs	r0, #100	; 0x64
 800c0aa:	f002 ff8d 	bl	800efc8 <HAL_Delay>
		  int8_t mode2=1;
 800c0ae:	aa04      	add	r2, sp, #16
		  ModeSelect( 1, 4, &mode2);
 800c0b0:	2104      	movs	r1, #4
		  int8_t mode2=1;
 800c0b2:	f802 5d01 	strb.w	r5, [r2, #-1]!
		  ModeSelect( 1, 4, &mode2);
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	f002 feaa 	bl	800ee10 <ModeSelect>
		  Signal( mode2 );
 800c0bc:	f99d 000f 	ldrsb.w	r0, [sp, #15]
	TotalPulse[RIGHT] = 0;
 800c0c0:	2400      	movs	r4, #0
		  Signal( mode2 );
 800c0c2:	f002 fe39 	bl	800ed38 <Signal>
		  PhotoSwitch();
 800c0c6:	f002 fe79 	bl	800edbc <PhotoSwitch>
	InitFastest();
 800c0ca:	f7ff fd2b 	bl	800bb24 <InitFastest>
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800c0ce:	4629      	mov	r1, r5
 800c0d0:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800c0d2:	6074      	str	r4, [r6, #4]
	TotalPulse[LEFT] = 0;
 800c0d4:	6034      	str	r4, [r6, #0]
	TotalPulse[BODY] = 0;
 800c0d6:	60b4      	str	r4, [r6, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800c0d8:	f002 fdc0 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c0dc:	4629      	mov	r1, r5
 800c0de:	2005      	movs	r0, #5
 800c0e0:	f002 fdbc 	bl	800ec5c <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800c0e4:	68b1      	ldr	r1, [r6, #8]
 800c0e6:	487a      	ldr	r0, [pc, #488]	; (800c2d0 <FastestRun+0x258>)
 800c0e8:	6832      	ldr	r2, [r6, #0]
 800c0ea:	6873      	ldr	r3, [r6, #4]
 800c0ec:	f006 fed6 	bl	8012e9c <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f002 fdb2 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	2002      	movs	r0, #2
 800c0fc:	f002 fdae 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c100:	4621      	mov	r1, r4
 800c102:	2003      	movs	r0, #3
 800c104:	f002 fdaa 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800c108:	4621      	mov	r1, r4
 800c10a:	4620      	mov	r0, r4
 800c10c:	f002 fda6 	bl	800ec5c <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode = 'T';
	if(mode == 1)
 800c110:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 800c114:	42ab      	cmp	r3, r5
	{
		ExploreVelocity = 400;
 800c116:	4b6f      	ldr	r3, [pc, #444]	; (800c2d4 <FastestRun+0x25c>)
 800c118:	bf04      	itt	eq
 800c11a:	4a6f      	ldreq	r2, [pc, #444]	; (800c2d8 <FastestRun+0x260>)
 800c11c:	601a      	streq	r2, [r3, #0]
	else if(mode == 2)
	{
		turn_mode = 'S';
	}

	switch(mode2)
 800c11e:	f99d 200f 	ldrsb.w	r2, [sp, #15]
 800c122:	3a01      	subs	r2, #1
 800c124:	2a03      	cmp	r2, #3
 800c126:	d803      	bhi.n	800c130 <FastestRun+0xb8>
 800c128:	e8df f002 	tbb	[pc, r2]
 800c12c:	a0abb5be 	.word	0xa0abb5be
 800c130:	4e6a      	ldr	r6, [pc, #424]	; (800c2dc <FastestRun+0x264>)
	Sla.Pre *=  2/MM_PER_PULSE;
 800c132:	6830      	ldr	r0, [r6, #0]
	Calc = SearchOrFast;
	//走る
	goal_edge_num = GOAL_SIZE_X;
	my_mouse.target_size = goal_edge_num;

	TargetVelocity[BODY] = 0;
 800c134:	ed9f 8a6a 	vldr	s16, [pc, #424]	; 800c2e0 <FastestRun+0x268>
	my_mouse.target_size = goal_edge_num;
 800c138:	4c6a      	ldr	r4, [pc, #424]	; (800c2e4 <FastestRun+0x26c>)
 800c13a:	4d6b      	ldr	r5, [pc, #428]	; (800c2e8 <FastestRun+0x270>)
	Sla.Pre *=  2/MM_PER_PULSE;
 800c13c:	f7fc f93c 	bl	80083b8 <__aeabi_f2d>
 800c140:	a35f      	add	r3, pc, #380	; (adr r3, 800c2c0 <FastestRun+0x248>)
 800c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c146:	f7fc f98f 	bl	8008468 <__aeabi_dmul>
 800c14a:	f7fc fc85 	bl	8008a58 <__aeabi_d2f>
 800c14e:	6030      	str	r0, [r6, #0]
	Sla.Fol *=  2/MM_PER_PULSE;
 800c150:	6870      	ldr	r0, [r6, #4]
 800c152:	f7fc f931 	bl	80083b8 <__aeabi_f2d>
 800c156:	a35a      	add	r3, pc, #360	; (adr r3, 800c2c0 <FastestRun+0x248>)
 800c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15c:	f7fc f984 	bl	8008468 <__aeabi_dmul>
 800c160:	f7fc fc7a 	bl	8008a58 <__aeabi_d2f>
	Sla.Theta1 = 30*M_PI/180;
 800c164:	4961      	ldr	r1, [pc, #388]	; (800c2ec <FastestRun+0x274>)
	Sla.Theta2 = 60*M_PI/180;
 800c166:	4a62      	ldr	r2, [pc, #392]	; (800c2f0 <FastestRun+0x278>)
	Sla.Theta3 = 90*M_PI/180;
 800c168:	4b62      	ldr	r3, [pc, #392]	; (800c2f4 <FastestRun+0x27c>)
	Sla.Fol *=  2/MM_PER_PULSE;
 800c16a:	6070      	str	r0, [r6, #4]
	ChangeLED(4);
 800c16c:	2004      	movs	r0, #4
	Sla.Theta1 = 30*M_PI/180;
 800c16e:	6131      	str	r1, [r6, #16]
	Sla.Theta2 = 60*M_PI/180;
 800c170:	6172      	str	r2, [r6, #20]
	Sla.Theta3 = 90*M_PI/180;
 800c172:	61b3      	str	r3, [r6, #24]
	ChangeLED(4);
 800c174:	f002 fc16 	bl	800e9a4 <ChangeLED>
	VelocityMax = false;
 800c178:	485f      	ldr	r0, [pc, #380]	; (800c2f8 <FastestRun+0x280>)
	SearchOrFast = 1;
 800c17a:	4b60      	ldr	r3, [pc, #384]	; (800c2fc <FastestRun+0x284>)
	Calc = SearchOrFast;
 800c17c:	4960      	ldr	r1, [pc, #384]	; (800c300 <FastestRun+0x288>)
	TargetVelocity[BODY] = 0;
 800c17e:	4a61      	ldr	r2, [pc, #388]	; (800c304 <FastestRun+0x28c>)
	Acceleration = 0;
 800c180:	4e61      	ldr	r6, [pc, #388]	; (800c308 <FastestRun+0x290>)
	VelocityMax = false;
 800c182:	f04f 0800 	mov.w	r8, #0
	SearchOrFast = 1;
 800c186:	2701      	movs	r7, #1
	VelocityMax = false;
 800c188:	f880 8000 	strb.w	r8, [r0]
	SearchOrFast = 1;
 800c18c:	601f      	str	r7, [r3, #0]
	Calc = SearchOrFast;
 800c18e:	681b      	ldr	r3, [r3, #0]
	TargetAngularV = 0;
 800c190:	485e      	ldr	r0, [pc, #376]	; (800c30c <FastestRun+0x294>)
	Calc = SearchOrFast;
 800c192:	600b      	str	r3, [r1, #0]
	goal_edge_num = GOAL_SIZE_X;
 800c194:	4b5e      	ldr	r3, [pc, #376]	; (800c310 <FastestRun+0x298>)
	TargetAngle = 0;
 800c196:	495f      	ldr	r1, [pc, #380]	; (800c314 <FastestRun+0x29c>)
	TargetVelocity[BODY] = 0;
 800c198:	ed82 8a02 	vstr	s16, [r2, #8]
	Angle = 0;
 800c19c:	4a5e      	ldr	r2, [pc, #376]	; (800c318 <FastestRun+0x2a0>)
	Acceleration = 0;
 800c19e:	ed86 8a00 	vstr	s16, [r6]
	goal_edge_num = GOAL_SIZE_X;
 800c1a2:	2602      	movs	r6, #2
	TargetAngularV = 0;
 800c1a4:	ed80 8a00 	vstr	s16, [r0]
	PIDReset(L_VELO_PID);
 800c1a8:	2004      	movs	r0, #4
	goal_edge_num = GOAL_SIZE_X;
 800c1aa:	701e      	strb	r6, [r3, #0]
	TargetAngle = 0;
 800c1ac:	ed81 8a00 	vstr	s16, [r1]
	my_mouse.target_size = goal_edge_num;
 800c1b0:	7126      	strb	r6, [r4, #4]
	Angle = 0;
 800c1b2:	ed82 8a00 	vstr	s16, [r2]
	PIDReset(L_VELO_PID);
 800c1b6:	f002 fd59 	bl	800ec6c <PIDReset>
	PIDReset(R_VELO_PID);
 800c1ba:	2005      	movs	r0, #5
 800c1bc:	f002 fd56 	bl	800ec6c <PIDReset>
	PIDReset(A_VELO_PID);
 800c1c0:	4640      	mov	r0, r8
 800c1c2:	f002 fd53 	bl	800ec6c <PIDReset>

	PIDReset(L_WALL_PID);
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	f002 fd50 	bl	800ec6c <PIDReset>
	PIDReset(R_WALL_PID);
 800c1cc:	2003      	movs	r0, #3
 800c1ce:	f002 fd4d 	bl	800ec6c <PIDReset>
	PIDReset(D_WALL_PID);
 800c1d2:	4638      	mov	r0, r7
 800c1d4:	f002 fd4a 	bl	800ec6c <PIDReset>
	//迷路データ
	initSearchData(&my_map, &my_mouse);
 800c1d8:	4621      	mov	r1, r4
 800c1da:	4628      	mov	r0, r5
 800c1dc:	f7ff fa32 	bl	800b644 <initSearchData>
	InitVisit();
 800c1e0:	f000 ffc4 	bl	800d16c <InitVisit>
//	printAllNodeExistence(&my_map);
	flashCopyNodesToRam(&my_map); //existenceだけ
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	f000 fa45 	bl	800c674 <flashCopyNodesToRam>
//	printAllNodeExistence(&my_map);
	updateAllNodeWeight(&my_map, GOAL_X, GOAL_Y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x03);
 800c1ea:	f04f 0903 	mov.w	r9, #3
 800c1ee:	2204      	movs	r2, #4
 800c1f0:	4633      	mov	r3, r6
 800c1f2:	4611      	mov	r1, r2
 800c1f4:	9600      	str	r6, [sp, #0]
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	f8cd 9004 	str.w	r9, [sp, #4]
 800c1fc:	f7fe fb78 	bl	800a8f0 <updateAllNodeWeight>

	getPathNode(&my_map, &my_mouse);
 800c200:	4621      	mov	r1, r4
 800c202:	4628      	mov	r0, r5
 800c204:	f7ff fa5e 	bl	800b6c4 <getPathNode>
	getPathAction(&my_mouse);
 800c208:	4620      	mov	r0, r4
 800c20a:	f7ff fb3f 	bl	800b88c <getPathAction>
	HAL_Delay(200);
 800c20e:	20c8      	movs	r0, #200	; 0xc8
 800c210:	f002 feda 	bl	800efc8 <HAL_Delay>

	//リセット、再取得
	initSearchData(&my_map, &my_mouse);
 800c214:	4621      	mov	r1, r4
 800c216:	4628      	mov	r0, r5
 800c218:	f7ff fa14 	bl	800b644 <initSearchData>
	flashCopyNodesToRam(&my_map); //existenceだけ
 800c21c:	4628      	mov	r0, r5
 800c21e:	f000 fa29 	bl	800c674 <flashCopyNodesToRam>
	updateAllNodeWeight(&my_map, GOAL_X, GOAL_Y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x03);
 800c222:	2204      	movs	r2, #4
 800c224:	4633      	mov	r3, r6
 800c226:	4611      	mov	r1, r2
 800c228:	e9cd 6900 	strd	r6, r9, [sp]
 800c22c:	4628      	mov	r0, r5
 800c22e:	f7fe fb5f 	bl	800a8f0 <updateAllNodeWeight>
//	while(1){
//		printAllWeight(&my_map, &(my_mouse.goal_lesser));
//		HAL_Delay(1000);
//	}

	MaxParaRunTest(&my_map, &my_mouse);
 800c232:	4621      	mov	r1, r4
 800c234:	4628      	mov	r0, r5
 800c236:	f000 fe83 	bl	800cf40 <MaxParaRunTest>

	//ゴールしたら減速して、停止。
	Decel(45,0);
 800c23a:	eef0 0a48 	vmov.f32	s1, s16
 800c23e:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800c31c <FastestRun+0x2a4>
 800c242:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800c358 <FastestRun+0x2e0>
	//終了合図
	Signal(7);

	while(1)
	{
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",Num_Nodes, my_map.RawNode[0][1].weight);
 800c246:	4f36      	ldr	r7, [pc, #216]	; (800c320 <FastestRun+0x2a8>)
	Decel(45,0);
 800c248:	f7fd fb32 	bl	80098b0 <Decel>
	Signal(7);
 800c24c:	2007      	movs	r0, #7
 800c24e:	f002 fd73 	bl	800ed38 <Signal>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800c252:	3408      	adds	r4, #8
 800c254:	462e      	mov	r6, r5
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",Num_Nodes, my_map.RawNode[0][1].weight);
 800c256:	f8d8 1000 	ldr.w	r1, [r8]
 800c25a:	896a      	ldrh	r2, [r5, #10]
 800c25c:	4638      	mov	r0, r7
 800c25e:	f006 fe1d 	bl	8012e9c <iprintf>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800c262:	4621      	mov	r1, r4
 800c264:	4630      	mov	r0, r6
 800c266:	f7fe fcd5 	bl	800ac14 <printAllWeight>
 800c26a:	e7f4      	b.n	800c256 <FastestRun+0x1de>
		Sla.Pre = 8;//2;
 800c26c:	4e1b      	ldr	r6, [pc, #108]	; (800c2dc <FastestRun+0x264>)
		ExploreVelocity=240;
 800c26e:	492d      	ldr	r1, [pc, #180]	; (800c324 <FastestRun+0x2ac>)
 800c270:	6019      	str	r1, [r3, #0]
		Sla.Alpha = 0.078;
 800c272:	4a2d      	ldr	r2, [pc, #180]	; (800c328 <FastestRun+0x2b0>)
		Sla.Fol = 12; //16
 800c274:	4b2d      	ldr	r3, [pc, #180]	; (800c32c <FastestRun+0x2b4>)
 800c276:	6073      	str	r3, [r6, #4]
		Sla.Pre = 8;//2;
 800c278:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800c27c:	6031      	str	r1, [r6, #0]
		Sla.Alpha = 0.078;
 800c27e:	60b2      	str	r2, [r6, #8]
		break;
 800c280:	e757      	b.n	800c132 <FastestRun+0xba>
		Sla.Pre = 5;
 800c282:	4e16      	ldr	r6, [pc, #88]	; (800c2dc <FastestRun+0x264>)
		ExploreVelocity=180;
 800c284:	492a      	ldr	r1, [pc, #168]	; (800c330 <FastestRun+0x2b8>)
 800c286:	6019      	str	r1, [r3, #0]
		Sla.Alpha = 0.04;
 800c288:	4a2a      	ldr	r2, [pc, #168]	; (800c334 <FastestRun+0x2bc>)
		Sla.Pre = 5;
 800c28a:	492b      	ldr	r1, [pc, #172]	; (800c338 <FastestRun+0x2c0>)
		Sla.Fol = 3.5;
 800c28c:	4b2b      	ldr	r3, [pc, #172]	; (800c33c <FastestRun+0x2c4>)
		Sla.Pre = 5;
 800c28e:	6031      	str	r1, [r6, #0]
		Sla.Fol = 3.5;
 800c290:	6073      	str	r3, [r6, #4]
		Sla.Alpha = 0.04;
 800c292:	60b2      	str	r2, [r6, #8]
		break;
 800c294:	e74d      	b.n	800c132 <FastestRun+0xba>
		Sla.Pre = 5;
 800c296:	4e11      	ldr	r6, [pc, #68]	; (800c2dc <FastestRun+0x264>)
		ExploreVelocity=135;
 800c298:	4929      	ldr	r1, [pc, #164]	; (800c340 <FastestRun+0x2c8>)
		Sla.Alpha = 0.0273;
 800c29a:	4a2a      	ldr	r2, [pc, #168]	; (800c344 <FastestRun+0x2cc>)
		ExploreVelocity=135;
 800c29c:	6019      	str	r1, [r3, #0]
		Sla.Pre = 5;
 800c29e:	4b26      	ldr	r3, [pc, #152]	; (800c338 <FastestRun+0x2c0>)
		Sla.Alpha = 0.0273;
 800c2a0:	60b2      	str	r2, [r6, #8]
		Sla.Pre = 5;
 800c2a2:	6033      	str	r3, [r6, #0]
		Sla.Fol = 5;
 800c2a4:	6073      	str	r3, [r6, #4]
		break;
 800c2a6:	e744      	b.n	800c132 <FastestRun+0xba>
		Sla.Pre = 7;//9;
 800c2a8:	4e0c      	ldr	r6, [pc, #48]	; (800c2dc <FastestRun+0x264>)
		ExploreVelocity=90;
 800c2aa:	4927      	ldr	r1, [pc, #156]	; (800c348 <FastestRun+0x2d0>)
 800c2ac:	6019      	str	r1, [r3, #0]
		Sla.Alpha = 0.014;
 800c2ae:	4a27      	ldr	r2, [pc, #156]	; (800c34c <FastestRun+0x2d4>)
		Sla.Pre = 7;//9;
 800c2b0:	4927      	ldr	r1, [pc, #156]	; (800c350 <FastestRun+0x2d8>)
		Sla.Fol = 11;//13;
 800c2b2:	4b28      	ldr	r3, [pc, #160]	; (800c354 <FastestRun+0x2dc>)
		Sla.Pre = 7;//9;
 800c2b4:	6031      	str	r1, [r6, #0]
		Sla.Fol = 11;//13;
 800c2b6:	6073      	str	r3, [r6, #4]
		Sla.Alpha = 0.014;
 800c2b8:	60b2      	str	r2, [r6, #8]
		break;
 800c2ba:	e73a      	b.n	800c132 <FastestRun+0xba>
 800c2bc:	f3af 8000 	nop.w
 800c2c0:	9f8f0d54 	.word	0x9f8f0d54
 800c2c4:	409ee54a 	.word	0x409ee54a
 800c2c8:	2000561c 	.word	0x2000561c
 800c2cc:	20005660 	.word	0x20005660
 800c2d0:	08016328 	.word	0x08016328
 800c2d4:	200056b4 	.word	0x200056b4
 800c2d8:	43c80000 	.word	0x43c80000
 800c2dc:	20005678 	.word	0x20005678
 800c2e0:	00000000 	.word	0x00000000
 800c2e4:	200056ec 	.word	0x200056ec
 800c2e8:	20005898 	.word	0x20005898
 800c2ec:	3f060a92 	.word	0x3f060a92
 800c2f0:	3f860a92 	.word	0x3f860a92
 800c2f4:	3fc90fdb 	.word	0x3fc90fdb
 800c2f8:	200056b0 	.word	0x200056b0
 800c2fc:	200056bc 	.word	0x200056bc
 800c300:	200056dc 	.word	0x200056dc
 800c304:	20005630 	.word	0x20005630
 800c308:	20005094 	.word	0x20005094
 800c30c:	20005640 	.word	0x20005640
 800c310:	2000565c 	.word	0x2000565c
 800c314:	200050a8 	.word	0x200050a8
 800c318:	20005098 	.word	0x20005098
 800c31c:	42340000 	.word	0x42340000
 800c320:	0801635c 	.word	0x0801635c
 800c324:	43700000 	.word	0x43700000
 800c328:	3d9fbe77 	.word	0x3d9fbe77
 800c32c:	41400000 	.word	0x41400000
 800c330:	43340000 	.word	0x43340000
 800c334:	3d23d70a 	.word	0x3d23d70a
 800c338:	40a00000 	.word	0x40a00000
 800c33c:	40600000 	.word	0x40600000
 800c340:	43070000 	.word	0x43070000
 800c344:	3cdfa440 	.word	0x3cdfa440
 800c348:	42b40000 	.word	0x42b40000
 800c34c:	3c656042 	.word	0x3c656042
 800c350:	40e00000 	.word	0x40e00000
 800c354:	41300000 	.word	0x41300000
 800c358:	2000508c 	.word	0x2000508c
 800c35c:	00000000 	.word	0x00000000

0800c360 <Explore>:
			flashStoreNodes(&my_map);
			//完了の合図
			Signal(7);
}
void Explore()
{
 800c360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	IT_mode = EXPLORE;
 800c364:	4b86      	ldr	r3, [pc, #536]	; (800c580 <Explore+0x220>)
{
 800c366:	b082      	sub	sp, #8
	IT_mode = EXPLORE;
 800c368:	2206      	movs	r2, #6
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800c36a:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800c36c:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800c36e:	f002 fe2b 	bl	800efc8 <HAL_Delay>
	int8_t mode=1;
 800c372:	aa02      	add	r2, sp, #8
 800c374:	2501      	movs	r5, #1
 800c376:	f802 5d02 	strb.w	r5, [r2, #-2]!
	ModeSelect( 1, 2, &mode);
 800c37a:	2102      	movs	r1, #2
 800c37c:	4628      	mov	r0, r5
 800c37e:	f002 fd47 	bl	800ee10 <ModeSelect>
	Signal( mode );
 800c382:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 800c386:	f002 fcd7 	bl	800ed38 <Signal>
	HAL_Delay(100);
 800c38a:	2064      	movs	r0, #100	; 0x64
 800c38c:	f002 fe1c 	bl	800efc8 <HAL_Delay>

	int8_t mode2=1;
 800c390:	aa02      	add	r2, sp, #8
	ModeSelect( 1, 4, &mode2);
 800c392:	2104      	movs	r1, #4
	int8_t mode2=1;
 800c394:	f802 5d01 	strb.w	r5, [r2, #-1]!
	ModeSelect( 1, 4, &mode2);
 800c398:	4628      	mov	r0, r5
 800c39a:	f002 fd39 	bl	800ee10 <ModeSelect>
	Signal( mode2 );
 800c39e:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800c3a2:	f002 fcc9 	bl	800ed38 <Signal>
	PhotoSwitch();
 800c3a6:	f002 fd09 	bl	800edbc <PhotoSwitch>
	//printf("test\r\n");
	//HAL_Delay(2000);

	InitExplore();
 800c3aa:	f7ff fb1f 	bl	800b9ec <InitExplore>

	TotalPulse[RIGHT] = 0;
 800c3ae:	4b75      	ldr	r3, [pc, #468]	; (800c584 <Explore+0x224>)
 800c3b0:	2400      	movs	r4, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800c3b6:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c3b8:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800c3ba:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800c3bc:	f002 fc4e 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c3c0:	4629      	mov	r1, r5
 800c3c2:	2005      	movs	r0, #5
 800c3c4:	f002 fc4a 	bl	800ec5c <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c3c8:	4621      	mov	r1, r4
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	f002 fc46 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c3d0:	4621      	mov	r1, r4
 800c3d2:	2002      	movs	r0, #2
 800c3d4:	f002 fc42 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c3d8:	4621      	mov	r1, r4
 800c3da:	2003      	movs	r0, #3
 800c3dc:	f002 fc3e 	bl	800ec5c <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800c3e0:	4621      	mov	r1, r4
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	f002 fc3a 	bl	800ec5c <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode = 'T';
	if(mode == 1)
 800c3e8:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 800c3ec:	42ab      	cmp	r3, r5
 800c3ee:	d010      	beq.n	800c412 <Explore+0xb2>
		turn_mode = 'T';
		ExploreVelocity=300;
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	4d65      	ldr	r5, [pc, #404]	; (800c588 <Explore+0x228>)
 800c3f4:	bf14      	ite	ne
 800c3f6:	f04f 0854 	movne.w	r8, #84	; 0x54
 800c3fa:	f04f 0853 	moveq.w	r8, #83	; 0x53
	}

	switch(mode2)
 800c3fe:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800c402:	3b01      	subs	r3, #1
 800c404:	2b03      	cmp	r3, #3
 800c406:	f200 80b2 	bhi.w	800c56e <Explore+0x20e>
 800c40a:	e8df f003 	tbb	[pc, r3]
 800c40e:	a2a6      	.short	0xa2a6
 800c410:	0897      	.short	0x0897
		ExploreVelocity=300;
 800c412:	4d5d      	ldr	r5, [pc, #372]	; (800c588 <Explore+0x228>)
 800c414:	4b5d      	ldr	r3, [pc, #372]	; (800c58c <Explore+0x22c>)
 800c416:	602b      	str	r3, [r5, #0]
		turn_mode = 'T';
 800c418:	f04f 0854 	mov.w	r8, #84	; 0x54
 800c41c:	e7ef      	b.n	800c3fe <Explore+0x9e>
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
		Sla.Pre = 3;
 800c41e:	4c5c      	ldr	r4, [pc, #368]	; (800c590 <Explore+0x230>)
		ExploreVelocity=300;
 800c420:	4a5a      	ldr	r2, [pc, #360]	; (800c58c <Explore+0x22c>)
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800c422:	4b5c      	ldr	r3, [pc, #368]	; (800c594 <Explore+0x234>)
		ExploreVelocity=300;
 800c424:	602a      	str	r2, [r5, #0]
		Sla.Pre = 3;
 800c426:	495c      	ldr	r1, [pc, #368]	; (800c598 <Explore+0x238>)
		Sla.Fol = 5;
 800c428:	4a5c      	ldr	r2, [pc, #368]	; (800c59c <Explore+0x23c>)
		Sla.Pre = 3;
 800c42a:	6021      	str	r1, [r4, #0]
		Sla.Fol = 5;
 800c42c:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.117;
 800c42e:	60a3      	str	r3, [r4, #8]
	Sla.Pre *=  2/MM_PER_PULSE;
 800c430:	6820      	ldr	r0, [r4, #0]
	}
	initSlalomParam();
	goal_edge_num = one;
	VelocityMax = false;
	SearchOrFast = 0;
	Calc = 0;
 800c432:	4e5b      	ldr	r6, [pc, #364]	; (800c5a0 <Explore+0x240>)
	goal_edge_num = one;
 800c434:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 800c5f8 <Explore+0x298>
	WALL_MASK = 0x01;
 800c438:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800c5fc <Explore+0x29c>
	Sla.Pre *=  2/MM_PER_PULSE;
 800c43c:	f7fb ffbc 	bl	80083b8 <__aeabi_f2d>
 800c440:	a34d      	add	r3, pc, #308	; (adr r3, 800c578 <Explore+0x218>)
 800c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c446:	f7fc f80f 	bl	8008468 <__aeabi_dmul>
 800c44a:	f7fc fb05 	bl	8008a58 <__aeabi_d2f>
 800c44e:	6020      	str	r0, [r4, #0]
	Sla.Fol *=  2/MM_PER_PULSE;
 800c450:	6860      	ldr	r0, [r4, #4]
 800c452:	f7fb ffb1 	bl	80083b8 <__aeabi_f2d>
 800c456:	a348      	add	r3, pc, #288	; (adr r3, 800c578 <Explore+0x218>)
 800c458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45c:	f7fc f804 	bl	8008468 <__aeabi_dmul>
 800c460:	f7fc fafa 	bl	8008a58 <__aeabi_d2f>
	VelocityMax = false;
 800c464:	494f      	ldr	r1, [pc, #316]	; (800c5a4 <Explore+0x244>)
	SearchOrFast = 0;
 800c466:	4a50      	ldr	r2, [pc, #320]	; (800c5a8 <Explore+0x248>)
	Sla.Fol *=  2/MM_PER_PULSE;
 800c468:	6060      	str	r0, [r4, #4]
	VelocityMax = false;
 800c46a:	2300      	movs	r3, #0
 800c46c:	700b      	strb	r3, [r1, #0]
	goal_edge_num = one;
 800c46e:	2701      	movs	r7, #1
	Sla.Theta1 = 30*M_PI/180;
 800c470:	494e      	ldr	r1, [pc, #312]	; (800c5ac <Explore+0x24c>)
	SearchOrFast = 0;
 800c472:	6013      	str	r3, [r2, #0]
	Sla.Theta2 = 60*M_PI/180;
 800c474:	4a4e      	ldr	r2, [pc, #312]	; (800c5b0 <Explore+0x250>)
	Calc = 0;
 800c476:	6033      	str	r3, [r6, #0]
	Sla.Theta3 = 90*M_PI/180;
 800c478:	4b4e      	ldr	r3, [pc, #312]	; (800c5b4 <Explore+0x254>)
	Sla.Theta2 = 60*M_PI/180;
 800c47a:	6162      	str	r2, [r4, #20]
	LowDFSFlag();
	HighStackFlag();
	InitMassStack();
//	Control_Mode=A_VELO_PID; //初期値が0. 減速時に
	Pid[A_VELO_PID].flag = 1;
	initSearchData(&my_map, &my_mouse);
 800c47c:	4e4e      	ldr	r6, [pc, #312]	; (800c5b8 <Explore+0x258>)
	Sla.Theta1 = 30*M_PI/180;
 800c47e:	6121      	str	r1, [r4, #16]
	Sla.Theta3 = 90*M_PI/180;
 800c480:	61a3      	str	r3, [r4, #24]
	goal_edge_num = one;
 800c482:	f88a 7000 	strb.w	r7, [sl]
	WALL_MASK = 0x01;
 800c486:	f8c9 7000 	str.w	r7, [r9]
	LowDFSFlag();
 800c48a:	f000 fe2f 	bl	800d0ec <LowDFSFlag>
	HighStackFlag();
 800c48e:	f000 fe33 	bl	800d0f8 <HighStackFlag>
	InitMassStack();
 800c492:	f000 feb9 	bl	800d208 <InitMassStack>
	Pid[A_VELO_PID].flag = 1;
 800c496:	4b49      	ldr	r3, [pc, #292]	; (800c5bc <Explore+0x25c>)
	initSearchData(&my_map, &my_mouse);
 800c498:	4849      	ldr	r0, [pc, #292]	; (800c5c0 <Explore+0x260>)
	Pid[A_VELO_PID].flag = 1;
 800c49a:	629f      	str	r7, [r3, #40]	; 0x28
	initSearchData(&my_map, &my_mouse);
 800c49c:	4631      	mov	r1, r6
 800c49e:	f7ff f8d1 	bl	800b644 <initSearchData>
	InitVisit();
 800c4a2:	f000 fe63 	bl	800d16c <InitVisit>
	dbc = 1;
//	my_mouse.target.pos.x = my_mouse.goal_lesser.x;
//	my_mouse.target.pos.y = my_mouse.goal_lesser.y;
	my_mouse.target.pos.x = 0;
	my_mouse.target.pos.y = 1;
	my_mouse.target_size = goal_edge_num;
 800c4a6:	f89a 3000 	ldrb.w	r3, [sl]
	dbc = 1;
 800c4aa:	4a46      	ldr	r2, [pc, #280]	; (800c5c4 <Explore+0x264>)
	my_mouse.target_size = goal_edge_num;
 800c4ac:	7133      	strb	r3, [r6, #4]
	my_mouse.target.pos.x = 0;
 800c4ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4b2:	8433      	strh	r3, [r6, #32]
	dbc = 1;
 800c4b4:	6017      	str	r7, [r2, #0]

	//0,0をゴールとして深さ優先探索すればいい
	InitStackNum();
 800c4b6:	f000 fe25 	bl	800d104 <InitStackNum>
#define IS_GOAL(less_x, less_y, large_x, large_y, next_x, next_y) ( (less_x <= next_x && next_x <= large_x) && (less_y <= next_y && next_y <= large_y) )
	Accel(61.5, ExploreVelocity, &my_map, &my_mouse);
 800c4ba:	4841      	ldr	r0, [pc, #260]	; (800c5c0 <Explore+0x260>)
 800c4bc:	edd5 0a00 	vldr	s1, [r5]
 800c4c0:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800c5c8 <Explore+0x268>
 800c4c4:	4631      	mov	r1, r6
	while( ! ((my_mouse.target.pos.x == 0 && my_mouse.target.pos.y == 0) && (my_mouse.now.pos.x == 0 && my_mouse.now.pos.y == 0)) ){
		getNextDirection(&my_map, &my_mouse, turn_mode, WALL_MASK);
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	4634      	mov	r4, r6
	Accel(61.5, ExploreVelocity, &my_map, &my_mouse);
 800c4ca:	f7fd f945 	bl	8009758 <Accel>
	while( ! ((my_mouse.target.pos.x == 0 && my_mouse.target.pos.y == 0) && (my_mouse.now.pos.x == 0 && my_mouse.now.pos.y == 0)) ){
 800c4ce:	e003      	b.n	800c4d8 <Explore+0x178>
		getNextDirection(&my_map, &my_mouse, turn_mode, WALL_MASK);
 800c4d0:	f8d9 3000 	ldr.w	r3, [r9]
 800c4d4:	f000 fac6 	bl	800ca64 <getNextDirection>
	while( ! ((my_mouse.target.pos.x == 0 && my_mouse.target.pos.y == 0) && (my_mouse.now.pos.x == 0 && my_mouse.now.pos.y == 0)) ){
 800c4d8:	8c33      	ldrh	r3, [r6, #32]
		getNextDirection(&my_map, &my_mouse, turn_mode, WALL_MASK);
 800c4da:	4642      	mov	r2, r8
 800c4dc:	4621      	mov	r1, r4
 800c4de:	4628      	mov	r0, r5
	while( ! ((my_mouse.target.pos.x == 0 && my_mouse.target.pos.y == 0) && (my_mouse.now.pos.x == 0 && my_mouse.now.pos.y == 0)) ){
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1f5      	bne.n	800c4d0 <Explore+0x170>
 800c4e4:	8937      	ldrh	r7, [r6, #8]
 800c4e6:	2f00      	cmp	r7, #0
 800c4e8:	d1f2      	bne.n	800c4d0 <Explore+0x170>
{
	//迷路データの出力
	printAllNodeExistence(&my_map);
	//printAllNode(&my_map); //drawを読み出す
	printMatrix16ValueFromNode(&my_map);
	printAllWeight(&my_map, &(my_mouse.goal_lesser) );
 800c4ea:	4d33      	ldr	r5, [pc, #204]	; (800c5b8 <Explore+0x258>)
	Decel(45, 0);
 800c4ec:	eddf 0a37 	vldr	s1, [pc, #220]	; 800c5cc <Explore+0x26c>
 800c4f0:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800c5d0 <Explore+0x270>
	printAllNodeExistence(&my_map);
 800c4f4:	4c32      	ldr	r4, [pc, #200]	; (800c5c0 <Explore+0x260>)
	Decel(45, 0);
 800c4f6:	f7fd f9db 	bl	80098b0 <Decel>
	WaitStopAndReset();//これがないとガクンとなる.
 800c4fa:	f7fc fce3 	bl	8008ec4 <WaitStopAndReset>
	shiftState(&my_mouse);
 800c4fe:	4628      	mov	r0, r5
 800c500:	f7fe fcdc 	bl	800aebc <shiftState>
	VisitedMass(my_mouse.now.pos);
 800c504:	68b0      	ldr	r0, [r6, #8]
 800c506:	f000 fe67 	bl	800d1d8 <VisitedMass>
	PIDChangeFlag(A_VELO_PID, 0);
 800c50a:	4639      	mov	r1, r7
 800c50c:	4638      	mov	r0, r7
 800c50e:	f002 fba5 	bl	800ec5c <PIDChangeFlag>
	Flash_clear_sector1();
 800c512:	f002 f88b 	bl	800e62c <Flash_clear_sector1>
	flashStoreNodes(&my_map);
 800c516:	4620      	mov	r0, r4
 800c518:	f000 f872 	bl	800c600 <flashStoreNodes>
	Signal(7);
 800c51c:	2007      	movs	r0, #7
 800c51e:	f002 fc0b 	bl	800ed38 <Signal>
	printAllNodeExistence(&my_map);
 800c522:	4620      	mov	r0, r4
 800c524:	f7fe fc38 	bl	800ad98 <printAllNodeExistence>
	printMatrix16ValueFromNode(&my_map);
 800c528:	4620      	mov	r0, r4
 800c52a:	f7fe fc77 	bl	800ae1c <printMatrix16ValueFromNode>
	printAllWeight(&my_map, &(my_mouse.goal_lesser) );
 800c52e:	4629      	mov	r1, r5
 800c530:	4620      	mov	r0, r4
 800c532:	f7fe fb6f 	bl	800ac14 <printAllWeight>
	printVisited();
 800c536:	f000 fe2f 	bl	800d198 <printVisited>
 800c53a:	e7f2      	b.n	800c522 <Explore+0x1c2>
		ExploreVelocity=240;
 800c53c:	4a25      	ldr	r2, [pc, #148]	; (800c5d4 <Explore+0x274>)
		Sla.Pre = 8;//2;
 800c53e:	4c14      	ldr	r4, [pc, #80]	; (800c590 <Explore+0x230>)
		Sla.Alpha = 0.078;
 800c540:	4b25      	ldr	r3, [pc, #148]	; (800c5d8 <Explore+0x278>)
		ExploreVelocity=240;
 800c542:	602a      	str	r2, [r5, #0]
		Sla.Pre = 8;//2;
 800c544:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
		Sla.Fol = 12; //16
 800c548:	4a24      	ldr	r2, [pc, #144]	; (800c5dc <Explore+0x27c>)
		Sla.Pre = 8;//2;
 800c54a:	6021      	str	r1, [r4, #0]
		Sla.Fol = 12; //16
 800c54c:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.078;
 800c54e:	60a3      	str	r3, [r4, #8]
		break;
 800c550:	e76e      	b.n	800c430 <Explore+0xd0>
		ExploreVelocity=180;
 800c552:	4a23      	ldr	r2, [pc, #140]	; (800c5e0 <Explore+0x280>)
		Sla.Pre = 8;//2;
 800c554:	4c0e      	ldr	r4, [pc, #56]	; (800c590 <Explore+0x230>)
		Sla.Alpha = 0.043;
 800c556:	4b23      	ldr	r3, [pc, #140]	; (800c5e4 <Explore+0x284>)
 800c558:	e7f3      	b.n	800c542 <Explore+0x1e2>
		Sla.Pre = 9;
 800c55a:	4c0d      	ldr	r4, [pc, #52]	; (800c590 <Explore+0x230>)
		ExploreVelocity=90;
 800c55c:	4a22      	ldr	r2, [pc, #136]	; (800c5e8 <Explore+0x288>)
		Sla.Alpha = 0.014;
 800c55e:	4b23      	ldr	r3, [pc, #140]	; (800c5ec <Explore+0x28c>)
		ExploreVelocity=90;
 800c560:	602a      	str	r2, [r5, #0]
		Sla.Pre = 9;
 800c562:	4923      	ldr	r1, [pc, #140]	; (800c5f0 <Explore+0x290>)
		Sla.Fol = 20;
 800c564:	4a23      	ldr	r2, [pc, #140]	; (800c5f4 <Explore+0x294>)
		Sla.Pre = 9;
 800c566:	6021      	str	r1, [r4, #0]
		Sla.Fol = 20;
 800c568:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.014;
 800c56a:	60a3      	str	r3, [r4, #8]
		break;
 800c56c:	e760      	b.n	800c430 <Explore+0xd0>
 800c56e:	4c08      	ldr	r4, [pc, #32]	; (800c590 <Explore+0x230>)
 800c570:	e75e      	b.n	800c430 <Explore+0xd0>
 800c572:	bf00      	nop
 800c574:	f3af 8000 	nop.w
 800c578:	9f8f0d54 	.word	0x9f8f0d54
 800c57c:	409ee54a 	.word	0x409ee54a
 800c580:	2000561c 	.word	0x2000561c
 800c584:	20005660 	.word	0x20005660
 800c588:	200056b4 	.word	0x200056b4
 800c58c:	43960000 	.word	0x43960000
 800c590:	20005678 	.word	0x20005678
 800c594:	3def9db2 	.word	0x3def9db2
 800c598:	40400000 	.word	0x40400000
 800c59c:	40a00000 	.word	0x40a00000
 800c5a0:	200056dc 	.word	0x200056dc
 800c5a4:	200056b0 	.word	0x200056b0
 800c5a8:	200056bc 	.word	0x200056bc
 800c5ac:	3f060a92 	.word	0x3f060a92
 800c5b0:	3f860a92 	.word	0x3f860a92
 800c5b4:	3fc90fdb 	.word	0x3fc90fdb
 800c5b8:	200056ec 	.word	0x200056ec
 800c5bc:	20005428 	.word	0x20005428
 800c5c0:	20005898 	.word	0x20005898
 800c5c4:	20000204 	.word	0x20000204
 800c5c8:	42760000 	.word	0x42760000
 800c5cc:	00000000 	.word	0x00000000
 800c5d0:	42340000 	.word	0x42340000
 800c5d4:	43700000 	.word	0x43700000
 800c5d8:	3d9fbe77 	.word	0x3d9fbe77
 800c5dc:	41400000 	.word	0x41400000
 800c5e0:	43340000 	.word	0x43340000
 800c5e4:	3d3020c5 	.word	0x3d3020c5
 800c5e8:	42b40000 	.word	0x42b40000
 800c5ec:	3c656042 	.word	0x3c656042
 800c5f0:	41100000 	.word	0x41100000
 800c5f4:	41a00000 	.word	0x41a00000
 800c5f8:	2000565c 	.word	0x2000565c
 800c5fc:	20005628 	.word	0x20005628

0800c600 <flashStoreNodes>:
//マップデータをフラッシュに書き込む処理
#include "Flash.h"
#include "MazeLib.h"
void flashStoreNodes(maze_node *maze)
{
	uint32_t address=start_adress_sector1;
 800c600:	4b1b      	ldr	r3, [pc, #108]	; (800c670 <flashStoreNodes+0x70>)
{
 800c602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t address=start_adress_sector1;
 800c606:	f8d3 8000 	ldr.w	r8, [r3]
 800c60a:	ebc8 7ac8 	rsb	sl, r8, r8, lsl #31
{
 800c60e:	4607      	mov	r7, r0
 800c610:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
	uint32_t address=start_adress_sector1;
 800c614:	4644      	mov	r4, r8
 800c616:	f04f 0900 	mov.w	r9, #0
 800c61a:	eb09 050a 	add.w	r5, r9, sl

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				FLASH_Write_Word(address+0, maze->RawNode[i][j].existence);
 800c61e:	443d      	add	r5, r7
 800c620:	f104 0644 	add.w	r6, r4, #68	; 0x44
 800c624:	f815 1014 	ldrb.w	r1, [r5, r4, lsl #1]
 800c628:	4620      	mov	r0, r4
				address += 4;
 800c62a:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, maze->RawNode[i][j].existence);
 800c62c:	f001 ffae 	bl	800e58c <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800c630:	42b4      	cmp	r4, r6
 800c632:	d1f7      	bne.n	800c624 <flashStoreNodes+0x24>
 800c634:	f109 0988 	add.w	r9, r9, #136	; 0x88
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800c638:	f5b9 6f08 	cmp.w	r9, #2176	; 0x880
 800c63c:	f1aa 0a88 	sub.w	sl, sl, #136	; 0x88
 800c640:	d1eb      	bne.n	800c61a <flashStoreNodes+0x1a>
 800c642:	f508 6488 	add.w	r4, r8, #1088	; 0x440
 800c646:	f508 6808 	add.w	r8, r8, #2176	; 0x880
 800c64a:	f104 0640 	add.w	r6, r4, #64	; 0x40
	uint32_t address=start_adress_sector1;
 800c64e:	463d      	mov	r5, r7
	//列
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				FLASH_Write_Word(address+0, maze->ColumnNode[i][j].existence);
 800c650:	f895 1880 	ldrb.w	r1, [r5, #2176]	; 0x880
 800c654:	4620      	mov	r0, r4
				address += 4;
 800c656:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, maze->ColumnNode[i][j].existence);
 800c658:	f001 ff98 	bl	800e58c <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800c65c:	42a6      	cmp	r6, r4
 800c65e:	f105 0508 	add.w	r5, r5, #8
 800c662:	d1f5      	bne.n	800c650 <flashStoreNodes+0x50>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800c664:	4546      	cmp	r6, r8
 800c666:	f107 0780 	add.w	r7, r7, #128	; 0x80
 800c66a:	d1ee      	bne.n	800c64a <flashStoreNodes+0x4a>
			}
	}
}
 800c66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c670:	08016630 	.word	0x08016630

0800c674 <flashCopyNodesToRam>:
	printf("\r\n");

}
//評価値マップ生成。
void flashCopyNodesToRam(maze_node *maze)
{
 800c674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t address=start_adress_sector1;
 800c678:	4b1f      	ldr	r3, [pc, #124]	; (800c6f8 <flashCopyNodesToRam+0x84>)
 800c67a:	f8d3 a000 	ldr.w	sl, [r3]
 800c67e:	f04f 0900 	mov.w	r9, #0
 800c682:	ebca 7bca 	rsb	fp, sl, sl, lsl #31
{
 800c686:	b083      	sub	sp, #12
 800c688:	4680      	mov	r8, r0
 800c68a:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
	uint32_t address=start_adress_sector1;
 800c68e:	4654      	mov	r4, sl

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				uint32_t wall_data=0;
 800c690:	464f      	mov	r7, r9
 800c692:	eb09 050b 	add.w	r5, r9, fp
				FLASH_Read_Word(address, &wall_data);
				maze->RawNode[i][j].existence = wall_data;
 800c696:	4445      	add	r5, r8
 800c698:	f104 0644 	add.w	r6, r4, #68	; 0x44
				FLASH_Read_Word(address, &wall_data);
 800c69c:	4620      	mov	r0, r4
 800c69e:	a901      	add	r1, sp, #4
				uint32_t wall_data=0;
 800c6a0:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800c6a2:	f001 ff9b 	bl	800e5dc <FLASH_Read_Word>
				maze->RawNode[i][j].existence = wall_data;
 800c6a6:	9b01      	ldr	r3, [sp, #4]
 800c6a8:	f805 3014 	strb.w	r3, [r5, r4, lsl #1]
				address += sizeof(wall_data);
 800c6ac:	3404      	adds	r4, #4
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800c6ae:	42b4      	cmp	r4, r6
 800c6b0:	d1f4      	bne.n	800c69c <flashCopyNodesToRam+0x28>
 800c6b2:	f109 0988 	add.w	r9, r9, #136	; 0x88
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800c6b6:	f5b9 6f08 	cmp.w	r9, #2176	; 0x880
 800c6ba:	f1ab 0b88 	sub.w	fp, fp, #136	; 0x88
 800c6be:	d1e8      	bne.n	800c692 <flashCopyNodesToRam+0x1e>
 800c6c0:	f50a 6488 	add.w	r4, sl, #1088	; 0x440
	}
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				uint32_t wall_data=0;
 800c6c4:	2700      	movs	r7, #0
 800c6c6:	f50a 6a08 	add.w	sl, sl, #2176	; 0x880
 800c6ca:	f104 0640 	add.w	r6, r4, #64	; 0x40
	uint32_t address=start_adress_sector1;
 800c6ce:	4645      	mov	r5, r8
				FLASH_Read_Word(address, &wall_data);
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	a901      	add	r1, sp, #4
				maze->ColumnNode[i][j].existence = wall_data;
				address += sizeof(wall_data);
 800c6d4:	3404      	adds	r4, #4
				uint32_t wall_data=0;
 800c6d6:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800c6d8:	f001 ff80 	bl	800e5dc <FLASH_Read_Word>
				maze->ColumnNode[i][j].existence = wall_data;
 800c6dc:	9b01      	ldr	r3, [sp, #4]
 800c6de:	f885 3880 	strb.w	r3, [r5, #2176]	; 0x880
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800c6e2:	42a6      	cmp	r6, r4
 800c6e4:	f105 0508 	add.w	r5, r5, #8
 800c6e8:	d1f2      	bne.n	800c6d0 <flashCopyNodesToRam+0x5c>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800c6ea:	4556      	cmp	r6, sl
 800c6ec:	f108 0880 	add.w	r8, r8, #128	; 0x80
 800c6f0:	d1eb      	bne.n	800c6ca <flashCopyNodesToRam+0x56>
			}
	}
}
 800c6f2:	b003      	add	sp, #12
 800c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f8:	08016630 	.word	0x08016630

0800c6fc <FindUnwantedSquares>:
#include "PID_Control.h"
 #include "LED_Driver.h"

#include "dfs.h"

void FindUnwantedSquares(maze_node *maze){
 800c6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c700:	b083      	sub	sp, #12
 800c702:	2600      	movs	r6, #0
 800c704:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800c7b4 <FindUnwantedSquares+0xb8>
 800c708:	9001      	str	r0, [sp, #4]
 800c70a:	f100 0880 	add.w	r8, r0, #128	; 0x80
 800c70e:	4634      	mov	r4, r6
 800c710:	f06f 057f 	mvn.w	r5, #127	; 0x7f
			known_check += (n == WALL) ? true : false;
			known_check += (e == WALL) ? true : false;
			known_check += (w == WALL) ? true : false;
			known_check += (s == WALL) ? true : false;
			if(known_check == 3){
				Visit[i][j] = true;
 800c714:	f04f 0c01 	mov.w	ip, #1
 800c718:	9b01      	ldr	r3, [sp, #4]
 800c71a:	eba8 0705 	sub.w	r7, r8, r5
 800c71e:	1b5a      	subs	r2, r3, r5
void FindUnwantedSquares(maze_node *maze){
 800c720:	4671      	mov	r1, lr
 800c722:	e00e      	b.n	800c742 <FindUnwantedSquares+0x46>
			if(n != UNKNOWN && e != UNKNOWN && w != UNKNOWN && s != UNKNOWN){
 800c724:	2b02      	cmp	r3, #2
 800c726:	d01f      	beq.n	800c768 <FindUnwantedSquares+0x6c>
 800c728:	f1ba 0f02 	cmp.w	sl, #2
 800c72c:	d01c      	beq.n	800c768 <FindUnwantedSquares+0x6c>
 800c72e:	f1b9 0f02 	cmp.w	r9, #2
 800c732:	d019      	beq.n	800c768 <FindUnwantedSquares+0x6c>
				Visit[i][j] = true;
 800c734:	f881 c000 	strb.w	ip, [r1]
 800c738:	3208      	adds	r2, #8
		for(int j=0; j < NUMBER_OF_SQUARES_Y; j++){
 800c73a:	42ba      	cmp	r2, r7
 800c73c:	f101 0101 	add.w	r1, r1, #1
 800c740:	d02a      	beq.n	800c798 <FindUnwantedSquares+0x9c>
			if(Visit[i][j] == true)
 800c742:	7808      	ldrb	r0, [r1, #0]
 800c744:	1953      	adds	r3, r2, r5
			uint8_t n = maze->RawNode[i][j+1].existence;	//北
 800c746:	eb03 0b04 	add.w	fp, r3, r4
			uint8_t w = maze->ColumnNode[i][j].existence;//西
 800c74a:	eb03 0a06 	add.w	sl, r3, r6
			if(Visit[i][j] == true)
 800c74e:	2800      	cmp	r0, #0
 800c750:	d1f2      	bne.n	800c738 <FindUnwantedSquares+0x3c>
			uint8_t n = maze->RawNode[i][j+1].existence;	//北
 800c752:	f89b b008 	ldrb.w	fp, [fp, #8]
			uint8_t s = maze->RawNode[i][j].existence;	//南
 800c756:	f813 9004 	ldrb.w	r9, [r3, r4]
			uint8_t w = maze->ColumnNode[i][j].existence;//西
 800c75a:	f89a a880 	ldrb.w	sl, [sl, #2176]	; 0x880
			uint8_t e = maze->ColumnNode[i+1][j].existence;	//東
 800c75e:	f892 3880 	ldrb.w	r3, [r2, #2176]	; 0x880
			if(n != UNKNOWN && e != UNKNOWN && w != UNKNOWN && s != UNKNOWN){
 800c762:	f1bb 0f02 	cmp.w	fp, #2
 800c766:	d1dd      	bne.n	800c724 <FindUnwantedSquares+0x28>
			known_check += (e == WALL) ? true : false;
 800c768:	f1a3 0301 	sub.w	r3, r3, #1
 800c76c:	fab3 f383 	clz	r3, r3
 800c770:	095b      	lsrs	r3, r3, #5
 800c772:	f1bb 0f01 	cmp.w	fp, #1
 800c776:	bf08      	it	eq
 800c778:	3301      	addeq	r3, #1
			known_check += (w == WALL) ? true : false;
 800c77a:	f1ba 0f01 	cmp.w	sl, #1
 800c77e:	bf08      	it	eq
 800c780:	3301      	addeq	r3, #1
			known_check += (s == WALL) ? true : false;
 800c782:	f1b9 0f01 	cmp.w	r9, #1
 800c786:	bf08      	it	eq
 800c788:	3301      	addeq	r3, #1
			if(known_check == 3){
 800c78a:	2b03      	cmp	r3, #3
 800c78c:	d0d2      	beq.n	800c734 <FindUnwantedSquares+0x38>
 800c78e:	3208      	adds	r2, #8
		for(int j=0; j < NUMBER_OF_SQUARES_Y; j++){
 800c790:	42ba      	cmp	r2, r7
 800c792:	f101 0101 	add.w	r1, r1, #1
 800c796:	d1d4      	bne.n	800c742 <FindUnwantedSquares+0x46>
 800c798:	3d80      	subs	r5, #128	; 0x80
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++){
 800c79a:	f515 6f08 	cmn.w	r5, #2176	; 0x880
 800c79e:	f10e 0e10 	add.w	lr, lr, #16
 800c7a2:	f104 0488 	add.w	r4, r4, #136	; 0x88
 800c7a6:	f106 0680 	add.w	r6, r6, #128	; 0x80
 800c7aa:	d1b5      	bne.n	800c718 <FindUnwantedSquares+0x1c>
				continue;
			}
		}
	}
}
 800c7ac:	b003      	add	sp, #12
 800c7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b2:	bf00      	nop
 800c7b4:	20006998 	.word	0x20006998

0800c7b8 <updateRealSearch>:
//探索及び最短走行のロジック（制御ロジックは考慮しない）
//後ろの方にはActionを含めた処理も. MazeSimulationでActionっぽい処理が書ければそれを入れてtestへ


void updateRealSearch(maze_node *maze, profile *mouse)
{
 800c7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7bc:	460d      	mov	r5, r1
 800c7be:	b084      	sub	sp, #16
 800c7c0:	4606      	mov	r6, r0

	//壁センサ値を読んで、各方角の壁の有無を判定
		//区画進入直前なので、更新予定の方角と座標がNextに入っているはず
		//前後左右の値として入れる

	shiftState(mouse);
 800c7c2:	4608      	mov	r0, r1
 800c7c4:	f7fe fb7a 	bl	800aebc <shiftState>
	VisitedMass(mouse->now.pos);
 800c7c8:	68a8      	ldr	r0, [r5, #8]
 800c7ca:	f000 fd05 	bl	800d1d8 <VisitedMass>

    switch (mouse->now.car%8)
 800c7ce:	7aab      	ldrb	r3, [r5, #10]
 800c7d0:	f003 0307 	and.w	r3, r3, #7
 800c7d4:	2b06      	cmp	r3, #6
 800c7d6:	f200 8135 	bhi.w	800ca44 <updateRealSearch+0x28c>
 800c7da:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c7de:	00f3      	.short	0x00f3
 800c7e0:	00c70133 	.word	0x00c70133
 800c7e4:	009b0133 	.word	0x009b0133
 800c7e8:	00070133 	.word	0x00070133
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
    	wall_dir[0] = NOWALL;
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
        break;
    case west:
    	wall_dir[3] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c7ec:	4b98      	ldr	r3, [pc, #608]	; (800ca50 <updateRealSearch+0x298>)
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c7ee:	eddf 5a99 	vldr	s11, [pc, #612]	; 800ca54 <updateRealSearch+0x29c>
    	wall_dir[3] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c7f2:	edd3 7a00 	vldr	s15, [r3]
 800c7f6:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c7fa:	ed93 5a01 	vldr	s10, [r3, #4]
    	wall_dir[1] = NOWALL;
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c7fe:	eddf 6a96 	vldr	s13, [pc, #600]	; 800ca58 <updateRealSearch+0x2a0>
 800c802:	ed93 6a02 	vldr	s12, [r3, #8]
    	wall_dir[3] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c806:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800ca5c <updateRealSearch+0x2a4>
 800c80a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c80e:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c812:	eeb4 5ae5 	vcmpe.f32	s10, s11
    	wall_dir[3] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c816:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c81e:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800c822:	bfcc      	ite	gt
 800c824:	2701      	movgt	r7, #1
 800c826:	2700      	movle	r7, #0
 800c828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c82c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c830:	bfcc      	ite	gt
 800c832:	2001      	movgt	r0, #1
 800c834:	2000      	movle	r0, #0
 800c836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c83a:	bfcc      	ite	gt
 800c83c:	2101      	movgt	r1, #1
 800c83e:	2100      	movle	r1, #0
        break;
 800c840:	2400      	movs	r4, #0
//	Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
//	Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
//	Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
//	Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
    //アクションが終わるときがノードの上にいる状態なので、状態シフト済みとする（この関数はアクション中に呼び出される想定）
    mouse->now.wall.north = wall_dir[0];
 800c842:	7b2a      	ldrb	r2, [r5, #12]

	//getWallNow(&(my_mouse->now), &wall[0]);

    //現在方角、壁は、合ってる。座標とノードは？
    //ここで壁の存在を反映
	updateNodeThree(maze, &(mouse->now), mouse->now.pos.x, mouse->now.pos.y);
 800c844:	7a6b      	ldrb	r3, [r5, #9]
    mouse->now.wall.north = wall_dir[0];
 800c846:	f367 0201 	bfi	r2, r7, #0, #2
    mouse->now.wall.east = wall_dir[1];
 800c84a:	f364 0283 	bfi	r2, r4, #2, #2
    mouse->now.wall.south = wall_dir[2];
 800c84e:	f360 1205 	bfi	r2, r0, #4, #2
    mouse->now.wall.west = wall_dir[3];
 800c852:	f361 1287 	bfi	r2, r1, #6, #2
	updateNodeThree(maze, &(mouse->now), mouse->now.pos.x, mouse->now.pos.y);
 800c856:	f105 0408 	add.w	r4, r5, #8
    mouse->now.wall.west = wall_dir[3];
 800c85a:	732a      	strb	r2, [r5, #12]
	updateNodeThree(maze, &(mouse->now), mouse->now.pos.x, mouse->now.pos.y);
 800c85c:	4621      	mov	r1, r4
 800c85e:	4630      	mov	r0, r6
 800c860:	7a2a      	ldrb	r2, [r5, #8]

	//これの前に、target.posに到達したかどうかが必要
			//到達していればStackを再開
	position start_pos = {0,0};
//	ChangeLED(0);
			if(ComparePosition(&(mouse->target.pos), &(mouse->now.pos)) || ComparePosition(&(mouse->target.pos), &(start_pos)) ){//帰ってくるときも一応スタックチェック
 800c862:	f105 0720 	add.w	r7, r5, #32
	updateNodeThree(maze, &(mouse->now), mouse->now.pos.x, mouse->now.pos.y);
 800c866:	f7fe f967 	bl	800ab38 <updateNodeThree>
	position start_pos = {0,0};
 800c86a:	2300      	movs	r3, #0
			if(ComparePosition(&(mouse->target.pos), &(mouse->now.pos)) || ComparePosition(&(mouse->target.pos), &(start_pos)) ){//帰ってくるときも一応スタックチェック
 800c86c:	4621      	mov	r1, r4
 800c86e:	4638      	mov	r0, r7
	position start_pos = {0,0};
 800c870:	f8ad 3008 	strh.w	r3, [sp, #8]
			if(ComparePosition(&(mouse->target.pos), &(mouse->now.pos)) || ComparePosition(&(mouse->target.pos), &(start_pos)) ){//帰ってくるときも一応スタックチェック
 800c874:	f000 fc6c 	bl	800d150 <ComparePosition>
 800c878:	b930      	cbnz	r0, 800c888 <updateRealSearch+0xd0>
 800c87a:	4638      	mov	r0, r7
 800c87c:	a902      	add	r1, sp, #8
 800c87e:	f000 fc67 	bl	800d150 <ComparePosition>
 800c882:	2800      	cmp	r0, #0
 800c884:	f000 80d4 	beq.w	800ca30 <updateRealSearch+0x278>
				mouse->target_size = 1;
 800c888:	2301      	movs	r3, #1
				_Bool stacked_one_or_more = StackMass(maze, &(mouse->now)); //何も積んでいないかどうかの情報が必要
 800c88a:	4621      	mov	r1, r4
				mouse->target_size = 1;
 800c88c:	712b      	strb	r3, [r5, #4]
				_Bool stacked_one_or_more = StackMass(maze, &(mouse->now)); //何も積んでいないかどうかの情報が必要
 800c88e:	4630      	mov	r0, r6
 800c890:	f000 fcc0 	bl	800d214 <StackMass>
				if(stacked_one_or_more == 0) ChangeLED(7);
 800c894:	2800      	cmp	r0, #0
 800c896:	f040 80c1 	bne.w	800ca1c <updateRealSearch+0x264>
 800c89a:	2007      	movs	r0, #7
 800c89c:	f002 f882 	bl	800e9a4 <ChangeLED>
				else ChangeLED(0);

				int n = GetStackNum();
 800c8a0:	f000 fc3c 	bl	800d11c <GetStackNum>
				if(n == 0){
					//本当にスタート座標に向かうべきかの確認
//					ChangeLED(7);
					//向かうべきなら、DFSフラグをオフにしてtargetを(0,0)にセット
//					LowDFSFlag();
					WALL_MASK = 0x01;
 800c8a4:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800ca60 <updateRealSearch+0x2a8>
 800c8a8:	2301      	movs	r3, #1
				if(n == 0){
 800c8aa:	4604      	mov	r4, r0
					WALL_MASK = 0x01;
 800c8ac:	f8c8 3000 	str.w	r3, [r8]
				if(n == 0){
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	f000 80c0 	beq.w	800ca36 <updateRealSearch+0x27e>
//					ChangeLED(1);
					WALL_MASK = 0x01;
					position pos;
					_Bool is_first = false;
					while( 1 ){
						pos = GetStackMass();
 800c8b6:	f000 fc37 	bl	800d128 <GetStackMass>
 800c8ba:	af04      	add	r7, sp, #16
 800c8bc:	f827 0d04 	strh.w	r0, [r7, #-4]!
						is_first = GetVisited(&(pos)); //0なら未訪問
 800c8c0:	4638      	mov	r0, r7
 800c8c2:	f000 fc97 	bl	800d1f4 <GetVisited>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	3c01      	subs	r4, #1
							SetStackNum(n);
							break;
						} //0,0座標にぶつかったら、trueなので次に行ってしまう. 0なら別ルート
						else if(is_first == true){
							--n;
							SetStackNum(n); //0になったら
 800c8ca:	4620      	mov	r0, r4
						else if(is_first == false){
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	f000 80a9 	beq.w	800ca24 <updateRealSearch+0x26c>
							SetStackNum(n); //0になったら
 800c8d2:	f000 fc1d 	bl	800d110 <SetStackNum>
						pos = GetStackMass();
 800c8d6:	f000 fc27 	bl	800d128 <GetStackMass>
 800c8da:	f8ad 000c 	strh.w	r0, [sp, #12]
						is_first = GetVisited(&(pos)); //0なら未訪問
 800c8de:	4638      	mov	r0, r7
 800c8e0:	f000 fc88 	bl	800d1f4 <GetVisited>
 800c8e4:	4603      	mov	r3, r0
						if(n == 0){
 800c8e6:	2c00      	cmp	r4, #0
 800c8e8:	d1ee      	bne.n	800c8c8 <updateRealSearch+0x110>
							mouse->target.pos = pos;
 800c8ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c8ee:	842b      	strh	r3, [r5, #32]
							ChangeLED(7);
 800c8f0:	2007      	movs	r0, #7
 800c8f2:	f002 f857 	bl	800e9a4 <ChangeLED>
//
//	}

//	int WALL_MASK = 0x01;
	//壁の存在を基に重みマップを更新
	updateAllNodeWeight(maze, mouse->target.pos.x, mouse->target.pos.y, mouse->target_size, mouse->target_size, WALL_MASK);
 800c8f6:	792b      	ldrb	r3, [r5, #4]
 800c8f8:	f8d8 0000 	ldr.w	r0, [r8]
 800c8fc:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 800c900:	f895 1020 	ldrb.w	r1, [r5, #32]
 800c904:	9001      	str	r0, [sp, #4]
 800c906:	9300      	str	r3, [sp, #0]
 800c908:	4630      	mov	r0, r6
 800c90a:	f7fd fff1 	bl	800a8f0 <updateAllNodeWeight>
			//mouse->goal_lesser.x, mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01); // goal_lesser_x, goal_lesser_y,  goal_size_x, goal_size_y, mask);//
}
 800c90e:	b004      	add	sp, #16
 800c910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	wall_dir[2] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c914:	4b4e      	ldr	r3, [pc, #312]	; (800ca50 <updateRealSearch+0x298>)
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c916:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ca58 <updateRealSearch+0x2a0>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c91a:	edd3 7a00 	vldr	s15, [r3]
 800c91e:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c922:	edd3 6a01 	vldr	s13, [r3, #4]
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c926:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[2] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c92a:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 800ca5c <updateRealSearch+0x2a4>
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c92e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ca54 <updateRealSearch+0x29c>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c932:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c936:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800c93a:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c93e:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800c942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c946:	eef4 7ac6 	vcmpe.f32	s15, s12
 800c94a:	bfcc      	ite	gt
 800c94c:	2401      	movgt	r4, #1
 800c94e:	2400      	movle	r4, #0
 800c950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c954:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c958:	bfcc      	ite	gt
 800c95a:	2001      	movgt	r0, #1
 800c95c:	2000      	movle	r0, #0
 800c95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c962:	bfcc      	ite	gt
 800c964:	2101      	movgt	r1, #1
 800c966:	2100      	movle	r1, #0
        break;
 800c968:	2700      	movs	r7, #0
 800c96a:	e76a      	b.n	800c842 <updateRealSearch+0x8a>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c96c:	4b38      	ldr	r3, [pc, #224]	; (800ca50 <updateRealSearch+0x298>)
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c96e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ca58 <updateRealSearch+0x2a0>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c972:	edd3 7a00 	vldr	s15, [r3]
 800c976:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c97a:	edd3 6a01 	vldr	s13, [r3, #4]
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c97e:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[1] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c982:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800ca5c <updateRealSearch+0x2a4>
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c986:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ca54 <updateRealSearch+0x29c>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c98a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c98e:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800c992:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c996:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800c99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c99e:	eef4 7ac6 	vcmpe.f32	s15, s12
 800c9a2:	bfcc      	ite	gt
 800c9a4:	2701      	movgt	r7, #1
 800c9a6:	2700      	movle	r7, #0
 800c9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c9ac:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c9b0:	bfcc      	ite	gt
 800c9b2:	2401      	movgt	r4, #1
 800c9b4:	2400      	movle	r4, #0
 800c9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ba:	bfcc      	ite	gt
 800c9bc:	2001      	movgt	r0, #1
 800c9be:	2000      	movle	r0, #0
        break;
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	e73e      	b.n	800c842 <updateRealSearch+0x8a>
    	wall_dir[0] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c9c4:	4b22      	ldr	r3, [pc, #136]	; (800ca50 <updateRealSearch+0x298>)
 800c9c6:	ed9f 5a25 	vldr	s10, [pc, #148]	; 800ca5c <updateRealSearch+0x2a4>
 800c9ca:	edd3 7a00 	vldr	s15, [r3]
 800c9ce:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c9d2:	ed9f 6a20 	vldr	s12, [pc, #128]	; 800ca54 <updateRealSearch+0x29c>
 800c9d6:	edd3 5a01 	vldr	s11, [r3, #4]
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800c9da:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800ca58 <updateRealSearch+0x2a0>
 800c9de:	edd3 6a02 	vldr	s13, [r3, #8]
    	wall_dir[0] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c9e2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c9e6:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800c9ea:	ee67 7aa4 	vmul.f32	s15, s15, s9
        break;
 800c9ee:	2000      	movs	r0, #0
    	wall_dir[0] = ((Photo[FL] + Photo[FR])*0.5f > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800c9f0:	eef4 7ac5 	vcmpe.f32	s15, s10
 800c9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800c9f8:	eef4 5ac6 	vcmpe.f32	s11, s12
 800c9fc:	bfcc      	ite	gt
 800c9fe:	2701      	movgt	r7, #1
 800ca00:	4607      	movle	r7, r0
 800ca02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800ca06:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ca0a:	bfcc      	ite	gt
 800ca0c:	2401      	movgt	r4, #1
 800ca0e:	4604      	movle	r4, r0
 800ca10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca14:	bfcc      	ite	gt
 800ca16:	2101      	movgt	r1, #1
 800ca18:	4601      	movle	r1, r0
        break;
 800ca1a:	e712      	b.n	800c842 <updateRealSearch+0x8a>
				else ChangeLED(0);
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	f001 ffc1 	bl	800e9a4 <ChangeLED>
 800ca22:	e73d      	b.n	800c8a0 <updateRealSearch+0xe8>
							mouse->target.pos =pos;
 800ca24:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ca28:	842b      	strh	r3, [r5, #32]
							SetStackNum(n);
 800ca2a:	f000 fb71 	bl	800d110 <SetStackNum>
							break;
 800ca2e:	e762      	b.n	800c8f6 <updateRealSearch+0x13e>
 800ca30:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800ca60 <updateRealSearch+0x2a8>
 800ca34:	e75f      	b.n	800c8f6 <updateRealSearch+0x13e>
					mouse->target.pos = GetStackMass(); //カウントは減らさない n = 0のまま
 800ca36:	f000 fb77 	bl	800d128 <GetStackMass>
 800ca3a:	8428      	strh	r0, [r5, #32]
					SetStackNum(n);
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f000 fb67 	bl	800d110 <SetStackNum>
 800ca42:	e758      	b.n	800c8f6 <updateRealSearch+0x13e>
    switch (mouse->now.car%8)
 800ca44:	2100      	movs	r1, #0
 800ca46:	4608      	mov	r0, r1
 800ca48:	460c      	mov	r4, r1
 800ca4a:	460f      	mov	r7, r1
 800ca4c:	e6f9      	b.n	800c842 <updateRealSearch+0x8a>
 800ca4e:	bf00      	nop
 800ca50:	200056a0 	.word	0x200056a0
 800ca54:	42b40000 	.word	0x42b40000
 800ca58:	42c80000 	.word	0x42c80000
 800ca5c:	42340000 	.word	0x42340000
 800ca60:	20005628 	.word	0x20005628

0800ca64 <getNextDirection>:
//↑と↓は新ノードに来た時の処理なので、アクションの区切りをずらせばよさそう。
//現情報と次情報から次の進行方向を得る処理

void getNextDirection(maze_node *maze, profile *Mouse, char turn_mode, int mask)
{
 800ca64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca68:	460c      	mov	r4, r1
 800ca6a:	4617      	mov	r7, r2
	//選ぶノードがおかしい
	//重みが、壁がある方が小さくなってしまっている.
	//

	//メインでノード選択
	Mouse->next.node = getNextNode(maze, Mouse->now.car, Mouse->now.node, mask);
 800ca6c:	7a89      	ldrb	r1, [r1, #10]
 800ca6e:	6922      	ldr	r2, [r4, #16]
	getNextState(&(Mouse->now), &(Mouse->next), Mouse->next.node);

	//既知区間加速このswitch文中で書くかも
		//コマンドキューのときはここでコマンドを発行してキューに渡す
	AddVelocity = 0;
 800ca70:	4e6b      	ldr	r6, [pc, #428]	; (800cc20 <getNextDirection+0x1bc>)
{
 800ca72:	4605      	mov	r5, r0
	Mouse->next.node = getNextNode(maze, Mouse->now.car, Mouse->now.node, mask);
 800ca74:	f7fe fa2e 	bl	800aed4 <getNextNode>
	getNextState(&(Mouse->now), &(Mouse->next), Mouse->next.node);
 800ca78:	f104 0114 	add.w	r1, r4, #20
	Mouse->next.node = getNextNode(maze, Mouse->now.car, Mouse->now.node, mask);
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	61e0      	str	r0, [r4, #28]
	getNextState(&(Mouse->now), &(Mouse->next), Mouse->next.node);
 800ca80:	f104 0008 	add.w	r0, r4, #8
 800ca84:	f7fe fc98 	bl	800b3b8 <getNextState>
	//2つのアクションを組み合わせたときに壁とマップの更新が入ってしまわないようにする
	_Bool accel_or_not = false;
	int accel_or_decel = 0;
	switch(Mouse->now.dir%8) //次の方角からアクションを選択
 800ca88:	7ae3      	ldrb	r3, [r4, #11]
	AddVelocity = 0;
 800ca8a:	2200      	movs	r2, #0
	switch(Mouse->now.dir%8) //次の方角からアクションを選択
 800ca8c:	f003 0307 	and.w	r3, r3, #7
	AddVelocity = 0;
 800ca90:	6032      	str	r2, [r6, #0]
	switch(Mouse->now.dir%8) //次の方角からアクションを選択
 800ca92:	2b06      	cmp	r3, #6
 800ca94:	d86e      	bhi.n	800cb74 <getNextDirection+0x110>
 800ca96:	e8df f003 	tbb	[pc, r3]
 800ca9a:	6d0f      	.short	0x6d0f
 800ca9c:	4b315c26 	.word	0x4b315c26
 800caa0:	04          	.byte	0x04
 800caa1:	00          	.byte	0x00
		TurnLeft(turn_mode, maze, Mouse);
		break;
	case left:
//		ChangeLED(0);
		//左旋回
		Calc = SearchOrFast;
 800caa2:	4a60      	ldr	r2, [pc, #384]	; (800cc24 <getNextDirection+0x1c0>)
 800caa4:	4b60      	ldr	r3, [pc, #384]	; (800cc28 <getNextDirection+0x1c4>)
 800caa6:	6812      	ldr	r2, [r2, #0]
 800caa8:	601a      	str	r2, [r3, #0]
//		ChangeLED(4);
		TurnLeft(turn_mode, maze, Mouse);
 800caaa:	4629      	mov	r1, r5
 800caac:	4622      	mov	r2, r4
 800caae:	4638      	mov	r0, r7
		break;
	}

}
 800cab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode, maze, Mouse);
 800cab4:	f7fd bafc 	b.w	800a0b0 <TurnLeft>
		accel_or_not = judgeAccelorNot(maze, Mouse->next.car, Mouse->next.node);
 800cab8:	69e2      	ldr	r2, [r4, #28]
 800caba:	7da1      	ldrb	r1, [r4, #22]
 800cabc:	4628      	mov	r0, r5
 800cabe:	f7fe fb6d 	bl	800b19c <judgeAccelorNot>
		if(accel_or_not == true) //既知で.直進
 800cac2:	2800      	cmp	r0, #0
 800cac4:	d058      	beq.n	800cb78 <getNextDirection+0x114>
 800cac6:	4a59      	ldr	r2, [pc, #356]	; (800cc2c <getNextDirection+0x1c8>)
			if(VelocityMax == true)
 800cac8:	4b59      	ldr	r3, [pc, #356]	; (800cc30 <getNextDirection+0x1cc>)
 800caca:	edd2 0a00 	vldr	s1, [r2]
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800cad4:	ee60 7aa7 	vmul.f32	s15, s1, s15
				AddVelocity = ExploreVelocity*1.5f;
 800cad8:	edc6 7a00 	vstr	s15, [r6]
			if(VelocityMax == true)
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f000 809c 	beq.w	800cc1a <getNextDirection+0x1b6>
				accel_or_decel = 0; //そのまま
 800cae2:	2000      	movs	r0, #0
 800cae4:	e057      	b.n	800cb96 <getNextDirection+0x132>
		Calc = SearchOrFast;
 800cae6:	4a4f      	ldr	r2, [pc, #316]	; (800cc24 <getNextDirection+0x1c0>)
 800cae8:	4b4f      	ldr	r3, [pc, #316]	; (800cc28 <getNextDirection+0x1c4>)
 800caea:	6812      	ldr	r2, [r2, #0]
 800caec:	601a      	str	r2, [r3, #0]
		TurnRight(turn_mode, maze, Mouse);
 800caee:	4629      	mov	r1, r5
 800caf0:	4622      	mov	r2, r4
 800caf2:	4638      	mov	r0, r7
}
 800caf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode, maze, Mouse);
 800caf8:	f7fd ba98 	b.w	800a02c <TurnRight>
		Calc = 1;//マップ更新したくないときは1を代入。
 800cafc:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800cc28 <getNextDirection+0x1c4>
		GoBack(maze, Mouse);
 800cb00:	4621      	mov	r1, r4
 800cb02:	4628      	mov	r0, r5
		Calc = 1;//マップ更新したくないときは1を代入。
 800cb04:	2701      	movs	r7, #1
 800cb06:	f8c8 7000 	str.w	r7, [r8]
		GoBack(maze, Mouse);
 800cb0a:	f7fd fb17 	bl	800a13c <GoBack>
				accel_or_not = judgeAccelorNot(maze, Mouse->next.car, Mouse->next.node);
 800cb0e:	69e2      	ldr	r2, [r4, #28]
 800cb10:	7da1      	ldrb	r1, [r4, #22]
 800cb12:	4628      	mov	r0, r5
 800cb14:	f7fe fb42 	bl	800b19c <judgeAccelorNot>
					if(VelocityMax == true)
 800cb18:	4b45      	ldr	r3, [pc, #276]	; (800cc30 <getNextDirection+0x1cc>)
 800cb1a:	781b      	ldrb	r3, [r3, #0]
				if(accel_or_not == true) //既知で.直進
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	d048      	beq.n	800cbb2 <getNextDirection+0x14e>
						AddVelocity = 245;
 800cb20:	eddf 7a44 	vldr	s15, [pc, #272]	; 800cc34 <getNextDirection+0x1d0>
					if(VelocityMax == true)
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d074      	beq.n	800cc12 <getNextDirection+0x1ae>
						accel_or_decel = 0; //そのまま
 800cb28:	2000      	movs	r0, #0
						AddVelocity = 245;
 800cb2a:	edc6 7a00 	vstr	s15, [r6]
 800cb2e:	e049      	b.n	800cbc4 <getNextDirection+0x160>
		Calc = 1;//マップ更新したくないときは1を代入。
 800cb30:	4e3d      	ldr	r6, [pc, #244]	; (800cc28 <getNextDirection+0x1c4>)
 800cb32:	2301      	movs	r3, #1
		GoBack(maze, Mouse);
 800cb34:	4621      	mov	r1, r4
 800cb36:	4628      	mov	r0, r5
		Calc = 1;//マップ更新したくないときは1を代入。
 800cb38:	6033      	str	r3, [r6, #0]
		GoBack(maze, Mouse);
 800cb3a:	f7fd faff 	bl	800a13c <GoBack>
		Calc = SearchOrFast;
 800cb3e:	4b39      	ldr	r3, [pc, #228]	; (800cc24 <getNextDirection+0x1c0>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	6033      	str	r3, [r6, #0]
		TurnLeft(turn_mode, maze, Mouse);
 800cb44:	4622      	mov	r2, r4
 800cb46:	4629      	mov	r1, r5
 800cb48:	4638      	mov	r0, r7
}
 800cb4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode, maze, Mouse);
 800cb4e:	f7fd baaf 	b.w	800a0b0 <TurnLeft>
		Calc = 1;//マップ更新したくないときは1を代入。
 800cb52:	4e35      	ldr	r6, [pc, #212]	; (800cc28 <getNextDirection+0x1c4>)
 800cb54:	2301      	movs	r3, #1
		GoBack(maze, Mouse); //間の座標変動を
 800cb56:	4621      	mov	r1, r4
 800cb58:	4628      	mov	r0, r5
		Calc = 1;//マップ更新したくないときは1を代入。
 800cb5a:	6033      	str	r3, [r6, #0]
		GoBack(maze, Mouse); //間の座標変動を
 800cb5c:	f7fd faee 	bl	800a13c <GoBack>
		Calc = SearchOrFast;
 800cb60:	4b30      	ldr	r3, [pc, #192]	; (800cc24 <getNextDirection+0x1c0>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	6033      	str	r3, [r6, #0]
		TurnRight(turn_mode, maze, Mouse);
 800cb66:	4622      	mov	r2, r4
 800cb68:	4629      	mov	r1, r5
 800cb6a:	4638      	mov	r0, r7
}
 800cb6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode, maze, Mouse);
 800cb70:	f7fd ba5c 	b.w	800a02c <TurnRight>
}
 800cb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(VelocityMax == true)
 800cb78:	4b2d      	ldr	r3, [pc, #180]	; (800cc30 <getNextDirection+0x1cc>)
 800cb7a:	4a2c      	ldr	r2, [pc, #176]	; (800cc2c <getNextDirection+0x1c8>)
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	edd2 0a00 	vldr	s1, [r2]
 800cb82:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d138      	bne.n	800cbfc <getNextDirection+0x198>
				AddVelocity = 0;
 800cb8a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800cc38 <getNextDirection+0x1d4>
 800cb8e:	eef0 7a47 	vmov.f32	s15, s14
 800cb92:	ed86 7a00 	vstr	s14, [r6]
		Calc = SearchOrFast;
 800cb96:	4a23      	ldr	r2, [pc, #140]	; (800cc24 <getNextDirection+0x1c0>)
 800cb98:	4b23      	ldr	r3, [pc, #140]	; (800cc28 <getNextDirection+0x1c4>)
 800cb9a:	6812      	ldr	r2, [r2, #0]
 800cb9c:	601a      	str	r2, [r3, #0]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800cb9e:	4629      	mov	r1, r5
 800cba0:	4622      	mov	r2, r4
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel, maze, Mouse);
 800cba2:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800cc3c <getNextDirection+0x1d8>
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800cba6:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800cbaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800cbae:	f7fd b8fb 	b.w	8009da8 <GoStraight>
					if(VelocityMax == true)
 800cbb2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800cbb6:	b9b3      	cbnz	r3, 800cbe6 <getNextDirection+0x182>
						AddVelocity = 0;
 800cbb8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800cc38 <getNextDirection+0x1d4>
 800cbbc:	eef0 7a47 	vmov.f32	s15, s14
 800cbc0:	ed86 7a00 	vstr	s14, [r6]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800cbc4:	4a19      	ldr	r2, [pc, #100]	; (800cc2c <getNextDirection+0x1c8>)
		Calc = SearchOrFast;
 800cbc6:	4b17      	ldr	r3, [pc, #92]	; (800cc24 <getNextDirection+0x1c0>)
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800cbc8:	edd2 0a00 	vldr	s1, [r2]
		Calc = SearchOrFast;
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f8c8 3000 	str.w	r3, [r8]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800cbd2:	4622      	mov	r2, r4
 800cbd4:	4629      	mov	r1, r5
 800cbd6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800cc3c <getNextDirection+0x1d8>
 800cbda:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800cbde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800cbe2:	f7fd b8e1 	b.w	8009da8 <GoStraight>
						cnt += 2;
 800cbe6:	4a16      	ldr	r2, [pc, #88]	; (800cc40 <getNextDirection+0x1dc>)
						AddVelocity = 0;
 800cbe8:	eddf 7a13 	vldr	s15, [pc, #76]	; 800cc38 <getNextDirection+0x1d4>
						cnt += 2;
 800cbec:	6813      	ldr	r3, [r2, #0]
						AddVelocity = 0;
 800cbee:	edc6 7a00 	vstr	s15, [r6]
						cnt += 2;
 800cbf2:	3302      	adds	r3, #2
 800cbf4:	6013      	str	r3, [r2, #0]
						accel_or_decel = -1; //減速
 800cbf6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbfa:	e7e3      	b.n	800cbc4 <getNextDirection+0x160>
				cnt += 2;
 800cbfc:	4a11      	ldr	r2, [pc, #68]	; (800cc44 <getNextDirection+0x1e0>)
				AddVelocity = 0;
 800cbfe:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800cc38 <getNextDirection+0x1d4>
				cnt += 2;
 800cc02:	6813      	ldr	r3, [r2, #0]
				AddVelocity = 0;
 800cc04:	edc6 7a00 	vstr	s15, [r6]
				cnt += 2;
 800cc08:	3302      	adds	r3, #2
 800cc0a:	6013      	str	r3, [r2, #0]
				accel_or_decel = -1; //減速
 800cc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc10:	e7c1      	b.n	800cb96 <getNextDirection+0x132>
						accel_or_decel = 1; //加速
 800cc12:	4638      	mov	r0, r7
						AddVelocity = 245;
 800cc14:	edc6 7a00 	vstr	s15, [r6]
 800cc18:	e7d4      	b.n	800cbc4 <getNextDirection+0x160>
				accel_or_decel = 1; //加速
 800cc1a:	2001      	movs	r0, #1
 800cc1c:	e7bb      	b.n	800cb96 <getNextDirection+0x132>
 800cc1e:	bf00      	nop
 800cc20:	2000563c 	.word	0x2000563c
 800cc24:	200056bc 	.word	0x200056bc
 800cc28:	200056dc 	.word	0x200056dc
 800cc2c:	200056b4 	.word	0x200056b4
 800cc30:	200056b0 	.word	0x200056b0
 800cc34:	43750000 	.word	0x43750000
 800cc38:	00000000 	.word	0x00000000
 800cc3c:	42b40000 	.word	0x42b40000
 800cc40:	20000008 	.word	0x20000008
 800cc44:	20000004 	.word	0x20000004

0800cc48 <FastStraight>:

const float conv_pul = 2/MM_PER_PULSE;
void FastStraight(float cut, float num, float accel, float decel, float top_speed, float end_speed)//加減速を切り替える割合と、マス数の指定
{
 800cc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc4c:	ed2d 8b08 	vpush	{d8-d11}
		float add_distance = cut*90*num;//スタート時の加速では61.5になるようにnumをかける
 800cc50:	eddf aaae 	vldr	s21, [pc, #696]	; 800cf0c <FastStraight+0x2c4>
		TargetAngularV = 0;
		int target_pulse = (int)(add_distance*conv_pul);
 800cc54:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800cf10 <FastStraight+0x2c8>
		TargetAngularV = 0;
 800cc58:	4bae      	ldr	r3, [pc, #696]	; (800cf14 <FastStraight+0x2cc>)
 800cc5a:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 800cf38 <FastStraight+0x2f0>
 800cc5e:	4dae      	ldr	r5, [pc, #696]	; (800cf18 <FastStraight+0x2d0>)
 800cc60:	4cae      	ldr	r4, [pc, #696]	; (800cf1c <FastStraight+0x2d4>)
 800cc62:	4faf      	ldr	r7, [pc, #700]	; (800cf20 <FastStraight+0x2d8>)
 800cc64:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 800cf3c <FastStraight+0x2f4>
			}
			//壁の値を見て一瞬だけ制御オン
				//90mm毎に左右を見る

			if(  ( (TotalPulse[BODY] ) >= ( KeepPulse[BODY] + (int)(0.95f*90.0f*conv_pul)*section_num)) && (( TotalPulse[BODY] ) <= ( KeepPulse[BODY] + (int)(1.05*90.0f*conv_pul)*section_num) ) ){ //90 mm毎に一回だけ壁を見る
				if(Photo[SL] >= LEFT_WALL && Photo[SR] >= RIGHT_WALL){
 800cc68:	ed9f baae 	vldr	s22, [pc, #696]	; 800cf24 <FastStraight+0x2dc>
		float add_distance = cut*90*num;//スタート時の加速では61.5になるようにnumをかける
 800cc6c:	ee60 7a2a 	vmul.f32	s15, s0, s21
		TargetAngularV = 0;
 800cc70:	f04f 0a00 	mov.w	sl, #0
		float add_distance = cut*90*num;//スタート時の加速では61.5になるようにnumをかける
 800cc74:	ee67 7aa0 	vmul.f32	s15, s15, s1
{
 800cc78:	eeb0 aa40 	vmov.f32	s20, s0
		int target_pulse = (int)(add_distance*conv_pul);
 800cc7c:	ee67 7a87 	vmul.f32	s15, s15, s14
		TargetAngularV = 0;
 800cc80:	f8c3 a000 	str.w	sl, [r3]
		int target_pulse = (int)(add_distance*conv_pul);
 800cc84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
{
 800cc88:	eeb0 9a60 	vmov.f32	s18, s1
		int target_pulse = (int)(add_distance*conv_pul);
 800cc8c:	ee17 6a90 	vmov	r6, s15
{
 800cc90:	eef0 ba41 	vmov.f32	s23, s2
 800cc94:	eef0 8a61 	vmov.f32	s17, s3
 800cc98:	eef0 9a42 	vmov.f32	s19, s4
 800cc9c:	eeb0 8a62 	vmov.f32	s16, s5
		while( ( TotalPulse[BODY] )  < ( KeepPulse[BODY] + target_pulse) )
 800cca0:	68aa      	ldr	r2, [r5, #8]
 800cca2:	68a3      	ldr	r3, [r4, #8]
 800cca4:	4433      	add	r3, r6
 800cca6:	429a      	cmp	r2, r3
 800cca8:	da54      	bge.n	800cd54 <FastStraight+0x10c>
			if(TargetVelocity[BODY] >= top_speed) //直線の加速時は、充分大きな値を設定
 800ccaa:	4b9f      	ldr	r3, [pc, #636]	; (800cf28 <FastStraight+0x2e0>)
			if(  ( (TotalPulse[BODY] ) >= ( KeepPulse[BODY] + (int)(0.95f*90.0f*conv_pul)*section_num)) && (( TotalPulse[BODY] ) <= ( KeepPulse[BODY] + (int)(1.05*90.0f*conv_pul)*section_num) ) ){ //90 mm毎に一回だけ壁を見る
 800ccac:	4a9f      	ldr	r2, [pc, #636]	; (800cf2c <FastStraight+0x2e4>)
			if(TargetVelocity[BODY] >= top_speed) //直線の加速時は、充分大きな値を設定
 800ccae:	edd3 7a02 	vldr	s15, [r3, #8]
			if(  ( (TotalPulse[BODY] ) >= ( KeepPulse[BODY] + (int)(0.95f*90.0f*conv_pul)*section_num)) && (( TotalPulse[BODY] ) <= ( KeepPulse[BODY] + (int)(1.05*90.0f*conv_pul)*section_num) ) ){ //90 mm毎に一回だけ壁を見る
 800ccb2:	683b      	ldr	r3, [r7, #0]
			if(TargetVelocity[BODY] >= top_speed) //直線の加速時は、充分大きな値を設定
 800ccb4:	eef4 7ae9 	vcmpe.f32	s15, s19
 800ccb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				Acceleration = 0;
 800ccbc:	bfac      	ite	ge
 800ccbe:	f8c9 a000 	strge.w	sl, [r9]
				Acceleration = accel;//2.89000f; //2.70f;//1.0000f;//
 800ccc2:	edc9 ba00 	vstrlt	s23, [r9]
			if(  ( (TotalPulse[BODY] ) >= ( KeepPulse[BODY] + (int)(0.95f*90.0f*conv_pul)*section_num)) && (( TotalPulse[BODY] ) <= ( KeepPulse[BODY] + (int)(1.05*90.0f*conv_pul)*section_num) ) ){ //90 mm毎に一回だけ壁を見る
 800ccc6:	68a9      	ldr	r1, [r5, #8]
 800ccc8:	68a0      	ldr	r0, [r4, #8]
 800ccca:	fb02 0203 	mla	r2, r2, r3, r0
 800ccce:	4291      	cmp	r1, r2
 800ccd0:	f2c0 80cb 	blt.w	800ce6a <FastStraight+0x222>
 800ccd4:	68a9      	ldr	r1, [r5, #8]
 800ccd6:	4a96      	ldr	r2, [pc, #600]	; (800cf30 <FastStraight+0x2e8>)
 800ccd8:	68a0      	ldr	r0, [r4, #8]
 800ccda:	fb02 0203 	mla	r2, r2, r3, r0
 800ccde:	4291      	cmp	r1, r2
 800cce0:	f300 80c3 	bgt.w	800ce6a <FastStraight+0x222>
				if(Photo[SL] >= LEFT_WALL && Photo[SR] >= RIGHT_WALL){
 800cce4:	edd8 7a02 	vldr	s15, [r8, #8]
 800cce8:	eef4 7acb 	vcmpe.f32	s15, s22
 800ccec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccf0:	db07      	blt.n	800cd02 <FastStraight+0xba>
 800ccf2:	edd8 7a01 	vldr	s15, [r8, #4]
 800ccf6:	eef4 7aea 	vcmpe.f32	s15, s21
 800ccfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccfe:	f280 80f1 	bge.w	800cee4 <FastStraight+0x29c>
					PIDChangeFlag(A_VELO_PID, 0);
					PIDChangeFlag(R_WALL_PID, 0);
					PIDChangeFlag(L_WALL_PID, 0);
					ChangeLED(5);
				}
				else if(Photo[SL] >= LEFT_WALL ){
 800cd02:	edd8 7a02 	vldr	s15, [r8, #8]
 800cd06:	eef4 7acb 	vcmpe.f32	s15, s22
 800cd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd0e:	f280 80d5 	bge.w	800cebc <FastStraight+0x274>
					PIDChangeFlag(R_WALL_PID, 0);
					PIDChangeFlag(D_WALL_PID, 0);
					ChangeLED(4);

				}
				else if(Photo[SR] >= RIGHT_WALL){
 800cd12:	edd8 7a01 	vldr	s15, [r8, #4]
 800cd16:	eef4 7aea 	vcmpe.f32	s15, s21
 800cd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					PIDChangeFlag(R_WALL_PID, 1);
 800cd1e:	f04f 0101 	mov.w	r1, #1
				else if(Photo[SR] >= RIGHT_WALL){
 800cd22:	f2c0 80b8 	blt.w	800ce96 <FastStraight+0x24e>
					PIDChangeFlag(R_WALL_PID, 1);
 800cd26:	2003      	movs	r0, #3
 800cd28:	f001 ff98 	bl	800ec5c <PIDChangeFlag>
					PIDChangeFlag(A_VELO_PID,0);
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	4608      	mov	r0, r1
 800cd30:	f001 ff94 	bl	800ec5c <PIDChangeFlag>
					PIDChangeFlag(D_WALL_PID, 0);
 800cd34:	2100      	movs	r1, #0
 800cd36:	2001      	movs	r0, #1
 800cd38:	f001 ff90 	bl	800ec5c <PIDChangeFlag>
					PIDChangeFlag(L_WALL_PID, 0);
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	2002      	movs	r0, #2
 800cd40:	f001 ff8c 	bl	800ec5c <PIDChangeFlag>
					ChangeLED(1);
 800cd44:	2001      	movs	r0, #1
 800cd46:	f001 fe2d 	bl	800e9a4 <ChangeLED>
		while( ( TotalPulse[BODY] )  < ( KeepPulse[BODY] + target_pulse) )
 800cd4a:	68aa      	ldr	r2, [r5, #8]
 800cd4c:	68a3      	ldr	r3, [r4, #8]
 800cd4e:	4433      	add	r3, r6
 800cd50:	429a      	cmp	r2, r3
 800cd52:	dbaa      	blt.n	800ccaa <FastStraight+0x62>
				//3パターンに該当すれば壁制御を一瞬だけ入れる
				//割込みのタイマを使ってタイミングを決める. （また複雑に...）


		}
		PIDChangeFlag(D_WALL_PID, 0);
 800cd54:	2100      	movs	r1, #0
 800cd56:	2001      	movs	r0, #1
 800cd58:	f001 ff80 	bl	800ec5c <PIDChangeFlag>
		PIDChangeFlag(R_WALL_PID, 0);
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	2003      	movs	r0, #3
 800cd60:	f001 ff7c 	bl	800ec5c <PIDChangeFlag>
		PIDChangeFlag(L_WALL_PID, 0);
 800cd64:	2100      	movs	r1, #0
 800cd66:	2002      	movs	r0, #2
 800cd68:	f001 ff78 	bl	800ec5c <PIDChangeFlag>
		PIDChangeFlag(A_VELO_PID, 1);
 800cd6c:	2101      	movs	r1, #1
 800cd6e:	2000      	movs	r0, #0
 800cd70:	f001 ff74 	bl	800ec5c <PIDChangeFlag>
		ChangeLED(0);
 800cd74:	2000      	movs	r0, #0
 800cd76:	f001 fe15 	bl	800e9a4 <ChangeLED>
		section_num = 0;
		Acceleration = 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	f8c9 3000 	str.w	r3, [r9]
		KeepPulse[BODY] += target_pulse;
 800cd80:	68a2      	ldr	r2, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
		KeepPulse[RIGHT] += target_pulse*0.5f;

		float dec_distance = (1-cut)*90*num;
 800cd82:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800cf0c <FastStraight+0x2c4>
		target_pulse = (int)(dec_distance *conv_pul);
 800cd86:	eddf 5a62 	vldr	s11, [pc, #392]	; 800cf10 <FastStraight+0x2c8>

		while( 	((Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800cd8a:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800cf34 <FastStraight+0x2ec>
		{
			if(TargetVelocity[BODY] <= end_speed) //
 800cd8e:	4866      	ldr	r0, [pc, #408]	; (800cf28 <FastStraight+0x2e0>)
		KeepPulse[BODY] += target_pulse;
 800cd90:	4432      	add	r2, r6
 800cd92:	60a2      	str	r2, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 800cd94:	ed94 7a00 	vldr	s14, [r4]
 800cd98:	ee07 6a90 	vmov	s15, r6
 800cd9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cda0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cda4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800cda8:	eea7 7a86 	vfma.f32	s14, s15, s12
		section_num = 0;
 800cdac:	2200      	movs	r2, #0
 800cdae:	603a      	str	r2, [r7, #0]
		float dec_distance = (1-cut)*90*num;
 800cdb0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
		KeepPulse[LEFT] += target_pulse*0.5f;
 800cdb4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		float dec_distance = (1-cut)*90*num;
 800cdb8:	ee70 0aca 	vsub.f32	s1, s1, s20
		KeepPulse[LEFT] += target_pulse*0.5f;
 800cdbc:	ed84 7a00 	vstr	s14, [r4]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800cdc0:	ed94 7a01 	vldr	s14, [r4, #4]
 800cdc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		float dec_distance = (1-cut)*90*num;
 800cdc8:	ee60 0a85 	vmul.f32	s1, s1, s10
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800cdcc:	eea7 7a86 	vfma.f32	s14, s15, s12
			{
				Acceleration = 0;
 800cdd0:	461e      	mov	r6, r3
		float dec_distance = (1-cut)*90*num;
 800cdd2:	ee60 0a89 	vmul.f32	s1, s1, s18
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800cdd6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
		target_pulse = (int)(dec_distance *conv_pul);
 800cdda:	ee60 0aa5 	vmul.f32	s1, s1, s11
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800cdde:	edc4 7a01 	vstr	s15, [r4, #4]
		target_pulse = (int)(dec_distance *conv_pul);
 800cde2:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800cde6:	ee17 2a90 	vmov	r2, s15
		while( 	((Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800cdea:	e00f      	b.n	800ce0c <FastStraight+0x1c4>
 800cdec:	68a3      	ldr	r3, [r4, #8]
 800cdee:	68a9      	ldr	r1, [r5, #8]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	428b      	cmp	r3, r1
 800cdf4:	dd15      	ble.n	800ce22 <FastStraight+0x1da>
			if(TargetVelocity[BODY] <= end_speed) //
 800cdf6:	edd0 7a02 	vldr	s15, [r0, #8]
 800cdfa:	eef4 7ac8 	vcmpe.f32	s15, s16
 800cdfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				Acceleration = 0;
 800ce02:	bf94      	ite	ls
 800ce04:	f8c9 6000 	strls.w	r6, [r9]
//				TargetVelocity[BODY] = end_speed;
			}
			else
			{
				Acceleration = decel;//2.89000f; //2.70f;//1.0000f;//
 800ce08:	edc9 8a00 	vstrhi	s17, [r9]
		while( 	((Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800ce0c:	edd8 7a03 	vldr	s15, [r8, #12]
 800ce10:	ed98 7a00 	vldr	s14, [r8]
 800ce14:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce18:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ce1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce20:	d4e4      	bmi.n	800cdec <FastStraight+0x1a4>
			}
			//Acceleration = decel;//-2.89;//1.0000f;//
//			if(TargetVelocity[BODY] <= 240)
//				Acceleration = 0;
		}
		Acceleration = 0;
 800ce22:	2300      	movs	r3, #0
 800ce24:	f8c9 3000 	str.w	r3, [r9]
//		TargetVelocity[BODY] = end_speed;
		KeepPulse[BODY] += target_pulse;
 800ce28:	68a3      	ldr	r3, [r4, #8]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	60a3      	str	r3, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 800ce2e:	ed94 7a00 	vldr	s14, [r4]
 800ce32:	ee07 2a90 	vmov	s15, r2
 800ce36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ce3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce3e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ce42:	eea7 7aa6 	vfma.f32	s14, s15, s13
		KeepPulse[RIGHT] += target_pulse*0.5f;

}
 800ce46:	ecbd 8b08 	vpop	{d8-d11}
		KeepPulse[LEFT] += target_pulse*0.5f;
 800ce4a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800ce4e:	ed84 7a00 	vstr	s14, [r4]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800ce52:	ed94 7a01 	vldr	s14, [r4, #4]
 800ce56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ce5a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ce5e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800ce62:	edc4 7a01 	vstr	s15, [r4, #4]
}
 800ce66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				section_num++;
 800ce6a:	3301      	adds	r3, #1
				PIDChangeFlag(D_WALL_PID, 0);
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	2001      	movs	r0, #1
				section_num++;
 800ce70:	603b      	str	r3, [r7, #0]
				PIDChangeFlag(D_WALL_PID, 0);
 800ce72:	f001 fef3 	bl	800ec5c <PIDChangeFlag>
				PIDChangeFlag(R_WALL_PID, 0);
 800ce76:	2100      	movs	r1, #0
 800ce78:	2003      	movs	r0, #3
 800ce7a:	f001 feef 	bl	800ec5c <PIDChangeFlag>
				PIDChangeFlag(L_WALL_PID, 0);
 800ce7e:	2100      	movs	r1, #0
 800ce80:	2002      	movs	r0, #2
 800ce82:	f001 feeb 	bl	800ec5c <PIDChangeFlag>
				PIDChangeFlag(A_VELO_PID, 1);
 800ce86:	2101      	movs	r1, #1
 800ce88:	2000      	movs	r0, #0
 800ce8a:	f001 fee7 	bl	800ec5c <PIDChangeFlag>
				ChangeLED(0);
 800ce8e:	2000      	movs	r0, #0
 800ce90:	f001 fd88 	bl	800e9a4 <ChangeLED>
 800ce94:	e704      	b.n	800cca0 <FastStraight+0x58>
					PIDChangeFlag(A_VELO_PID, 1);
 800ce96:	2000      	movs	r0, #0
 800ce98:	f001 fee0 	bl	800ec5c <PIDChangeFlag>
					PIDChangeFlag(R_WALL_PID, 0);
 800ce9c:	2100      	movs	r1, #0
 800ce9e:	2003      	movs	r0, #3
 800cea0:	f001 fedc 	bl	800ec5c <PIDChangeFlag>
					PIDChangeFlag(L_WALL_PID, 0);
 800cea4:	2100      	movs	r1, #0
 800cea6:	2002      	movs	r0, #2
 800cea8:	f001 fed8 	bl	800ec5c <PIDChangeFlag>
					PIDChangeFlag(D_WALL_PID, 0);
 800ceac:	2100      	movs	r1, #0
 800ceae:	2001      	movs	r0, #1
 800ceb0:	f001 fed4 	bl	800ec5c <PIDChangeFlag>
					ChangeLED(2);
 800ceb4:	2002      	movs	r0, #2
 800ceb6:	f001 fd75 	bl	800e9a4 <ChangeLED>
 800ceba:	e6f1      	b.n	800cca0 <FastStraight+0x58>
					PIDChangeFlag(L_WALL_PID, 1);
 800cebc:	2101      	movs	r1, #1
 800cebe:	2002      	movs	r0, #2
 800cec0:	f001 fecc 	bl	800ec5c <PIDChangeFlag>
					PIDChangeFlag(A_VELO_PID, 0);
 800cec4:	2100      	movs	r1, #0
 800cec6:	4608      	mov	r0, r1
 800cec8:	f001 fec8 	bl	800ec5c <PIDChangeFlag>
					PIDChangeFlag(R_WALL_PID, 0);
 800cecc:	2100      	movs	r1, #0
 800cece:	2003      	movs	r0, #3
 800ced0:	f001 fec4 	bl	800ec5c <PIDChangeFlag>
					PIDChangeFlag(D_WALL_PID, 0);
 800ced4:	2100      	movs	r1, #0
 800ced6:	2001      	movs	r0, #1
 800ced8:	f001 fec0 	bl	800ec5c <PIDChangeFlag>
					ChangeLED(4);
 800cedc:	2004      	movs	r0, #4
 800cede:	f001 fd61 	bl	800e9a4 <ChangeLED>
 800cee2:	e6dd      	b.n	800cca0 <FastStraight+0x58>
					PIDChangeFlag(D_WALL_PID, 1);
 800cee4:	2101      	movs	r1, #1
 800cee6:	4608      	mov	r0, r1
 800cee8:	f001 feb8 	bl	800ec5c <PIDChangeFlag>
					PIDChangeFlag(A_VELO_PID, 0);
 800ceec:	2100      	movs	r1, #0
 800ceee:	4608      	mov	r0, r1
 800cef0:	f001 feb4 	bl	800ec5c <PIDChangeFlag>
					PIDChangeFlag(R_WALL_PID, 0);
 800cef4:	2100      	movs	r1, #0
 800cef6:	2003      	movs	r0, #3
 800cef8:	f001 feb0 	bl	800ec5c <PIDChangeFlag>
					PIDChangeFlag(L_WALL_PID, 0);
 800cefc:	2100      	movs	r1, #0
 800cefe:	2002      	movs	r0, #2
 800cf00:	f001 feac 	bl	800ec5c <PIDChangeFlag>
					ChangeLED(5);
 800cf04:	2005      	movs	r0, #5
 800cf06:	f001 fd4d 	bl	800e9a4 <ChangeLED>
 800cf0a:	e6c9      	b.n	800cca0 <FastStraight+0x58>
 800cf0c:	42b40000 	.word	0x42b40000
 800cf10:	44f72a55 	.word	0x44f72a55
 800cf14:	20005640 	.word	0x20005640
 800cf18:	20005660 	.word	0x20005660
 800cf1c:	20005694 	.word	0x20005694
 800cf20:	200050ac 	.word	0x200050ac
 800cf24:	42c80000 	.word	0x42c80000
 800cf28:	20005630 	.word	0x20005630
 800cf2c:	00029465 	.word	0x00029465
 800cf30:	0002d9e9 	.word	0x0002d9e9
 800cf34:	456d8000 	.word	0x456d8000
 800cf38:	20005094 	.word	0x20005094
 800cf3c:	200056a0 	.word	0x200056a0

0800cf40 <MaxParaRunTest>:
void MaxParaRunTest(maze_node *maze, profile *mouse)
{
 800cf40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int start_cnt=0;
	float straight_num = 0;
	//ノードの数だけループ
	int num_nodes = Num_Nodes;
 800cf44:	4b62      	ldr	r3, [pc, #392]	; (800d0d0 <MaxParaRunTest+0x190>)
 800cf46:	681d      	ldr	r5, [r3, #0]
{
 800cf48:	ed2d 8b06 	vpush	{d8-d10}
 800cf4c:	4607      	mov	r7, r0
	ChangeLED(0);
 800cf4e:	2000      	movs	r0, #0
{
 800cf50:	468a      	mov	sl, r1
	ChangeLED(0);
 800cf52:	f001 fd27 	bl	800e9a4 <ChangeLED>
	for(int count=0; count <= num_nodes; count++)
 800cf56:	2d00      	cmp	r5, #0
 800cf58:	db31      	blt.n	800cfbe <MaxParaRunTest+0x7e>
			{
				count ++;
			}
			straight_num = (float)(count - start_cnt);
			if(start_cnt == 0){
				straight_num -= ((90-61.5)/90);
 800cf5a:	f20f 196c 	addw	r9, pc, #364	; 0x16c
 800cf5e:	e9d9 8900 	ldrd	r8, r9, [r9]
 800cf62:	4e5c      	ldr	r6, [pc, #368]	; (800d0d4 <MaxParaRunTest+0x194>)
//			FastPath[start_cnt].path_state.pos.x
			PIDChangeFlag(A_VELO_PID, 1);
			PIDChangeFlag(R_WALL_PID, 0);
			PIDChangeFlag(L_WALL_PID, 0);
			PIDChangeFlag(D_WALL_PID, 0);
			FastStraight(0.5, straight_num, /*1.00, -1.00*/2.89, -2.89, 4000, ExploreVelocity);
 800cf64:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d0e8 <MaxParaRunTest+0x1a8>
 800cf68:	ed9f aa5b 	vldr	s20, [pc, #364]	; 800d0d8 <MaxParaRunTest+0x198>
 800cf6c:	ed9f 9a5b 	vldr	s18, [pc, #364]	; 800d0dc <MaxParaRunTest+0x19c>
 800cf70:	eddf 8a5b 	vldr	s17, [pc, #364]	; 800d0e0 <MaxParaRunTest+0x1a0>
			FastStraight(1, 61.5/90, /*1.00, -1.00*/2.89, -2.89, ExploreVelocity, ExploreVelocity);
 800cf74:	eddf 9a5b 	vldr	s19, [pc, #364]	; 800d0e4 <MaxParaRunTest+0x1a4>
	for(int count=0; count <= num_nodes; count++)
 800cf78:	2200      	movs	r2, #0
		switch(FastPath[count].path_action)
 800cf7a:	0113      	lsls	r3, r2, #4
 800cf7c:	18f1      	adds	r1, r6, r3
 800cf7e:	1c54      	adds	r4, r2, #1
 800cf80:	7b09      	ldrb	r1, [r1, #12]
 800cf82:	2903      	cmp	r1, #3
 800cf84:	f200 809c 	bhi.w	800d0c0 <MaxParaRunTest+0x180>
 800cf88:	e8df f001 	tbb	[pc, r1]
 800cf8c:	021d336a 	.word	0x021d336a
			PIDChangeFlag(D_WALL_PID, 0);
			SlalomLeft(maze, mouse);
			break;
		case R_90_SEARCH:
//			ChangeLED(3);
			PIDChangeFlag(A_VELO_PID, 0);
 800cf90:	2100      	movs	r1, #0
 800cf92:	4608      	mov	r0, r1
 800cf94:	f001 fe62 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800cf98:	2100      	movs	r1, #0
 800cf9a:	2003      	movs	r0, #3
 800cf9c:	f001 fe5e 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	2002      	movs	r0, #2
 800cfa4:	f001 fe5a 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	2001      	movs	r0, #1
 800cfac:	f001 fe56 	bl	800ec5c <PIDChangeFlag>
			SlalomRight(maze, mouse);
 800cfb0:	4651      	mov	r1, sl
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	f7fc f90c 	bl	80091d0 <SlalomRight>
			break;
 800cfb8:	4622      	mov	r2, r4
	for(int count=0; count <= num_nodes; count++)
 800cfba:	4295      	cmp	r5, r2
 800cfbc:	dadd      	bge.n	800cf7a <MaxParaRunTest+0x3a>
		default :
			break;
		}
	}
}
 800cfbe:	ecbd 8b06 	vpop	{d8-d10}
 800cfc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			PIDChangeFlag(A_VELO_PID, 0);
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	4608      	mov	r0, r1
 800cfca:	f001 fe47 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800cfce:	2100      	movs	r1, #0
 800cfd0:	2003      	movs	r0, #3
 800cfd2:	f001 fe43 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	2002      	movs	r0, #2
 800cfda:	f001 fe3f 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800cfde:	2100      	movs	r1, #0
 800cfe0:	2001      	movs	r0, #1
 800cfe2:	f001 fe3b 	bl	800ec5c <PIDChangeFlag>
			SlalomLeft(maze, mouse);
 800cfe6:	4651      	mov	r1, sl
 800cfe8:	4638      	mov	r0, r7
 800cfea:	f7fc fa55 	bl	8009498 <SlalomLeft>
			break;
 800cfee:	4622      	mov	r2, r4
 800cff0:	e7e3      	b.n	800cfba <MaxParaRunTest+0x7a>
 800cff2:	4433      	add	r3, r6
		switch(FastPath[count].path_action)
 800cff4:	4614      	mov	r4, r2
 800cff6:	3310      	adds	r3, #16
			while(FastPath[count].path_action == ACC_DEC)
 800cff8:	7b19      	ldrb	r1, [r3, #12]
 800cffa:	2901      	cmp	r1, #1
				count ++;
 800cffc:	f104 0401 	add.w	r4, r4, #1
			while(FastPath[count].path_action == ACC_DEC)
 800d000:	d0f9      	beq.n	800cff6 <MaxParaRunTest+0xb6>
			straight_num = (float)(count - start_cnt);
 800d002:	1aa3      	subs	r3, r4, r2
 800d004:	ee08 3a10 	vmov	s16, r3
 800d008:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
			if(start_cnt == 0){
 800d00c:	b95a      	cbnz	r2, 800d026 <MaxParaRunTest+0xe6>
				straight_num -= ((90-61.5)/90);
 800d00e:	ee18 0a10 	vmov	r0, s16
 800d012:	f7fb f9d1 	bl	80083b8 <__aeabi_f2d>
 800d016:	4642      	mov	r2, r8
 800d018:	464b      	mov	r3, r9
 800d01a:	f7fb f86d 	bl	80080f8 <__aeabi_dsub>
 800d01e:	f7fb fd1b 	bl	8008a58 <__aeabi_d2f>
 800d022:	ee08 0a10 	vmov	s16, r0
			PIDChangeFlag(A_VELO_PID, 1);
 800d026:	2101      	movs	r1, #1
 800d028:	2000      	movs	r0, #0
 800d02a:	f001 fe17 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800d02e:	2100      	movs	r1, #0
 800d030:	2003      	movs	r0, #3
 800d032:	f001 fe13 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800d036:	2100      	movs	r1, #0
 800d038:	2002      	movs	r0, #2
 800d03a:	f001 fe0f 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800d03e:	2100      	movs	r1, #0
 800d040:	2001      	movs	r0, #1
 800d042:	f001 fe0b 	bl	800ec5c <PIDChangeFlag>
			FastStraight(0.5, straight_num, /*1.00, -1.00*/2.89, -2.89, 4000, ExploreVelocity);
 800d046:	eef0 0a48 	vmov.f32	s1, s16
 800d04a:	eddb 2a00 	vldr	s5, [fp]
 800d04e:	eeb0 2a4a 	vmov.f32	s4, s20
 800d052:	eef0 1a49 	vmov.f32	s3, s18
 800d056:	eeb0 1a68 	vmov.f32	s2, s17
 800d05a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800d05e:	e01b      	b.n	800d098 <MaxParaRunTest+0x158>
			PIDChangeFlag(A_VELO_PID, 1);
 800d060:	2101      	movs	r1, #1
 800d062:	2000      	movs	r0, #0
 800d064:	f001 fdfa 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800d068:	2100      	movs	r1, #0
 800d06a:	2003      	movs	r0, #3
 800d06c:	f001 fdf6 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800d070:	2100      	movs	r1, #0
 800d072:	2002      	movs	r0, #2
 800d074:	f001 fdf2 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800d078:	2100      	movs	r1, #0
 800d07a:	2001      	movs	r0, #1
 800d07c:	f001 fdee 	bl	800ec5c <PIDChangeFlag>
			FastStraight(1, 61.5/90, /*1.00, -1.00*/2.89, -2.89, ExploreVelocity, ExploreVelocity);
 800d080:	eddb 2a00 	vldr	s5, [fp]
 800d084:	eef0 1a49 	vmov.f32	s3, s18
 800d088:	eeb0 2a62 	vmov.f32	s4, s5
 800d08c:	eeb0 1a68 	vmov.f32	s2, s17
 800d090:	eef0 0a69 	vmov.f32	s1, s19
 800d094:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
			FastStraight(0.5, straight_num, /*1.00, -1.00*/2.89, -2.89, 4000, ExploreVelocity);
 800d098:	f7ff fdd6 	bl	800cc48 <FastStraight>
			PIDChangeFlag(A_VELO_PID, 0);
 800d09c:	2100      	movs	r1, #0
 800d09e:	4608      	mov	r0, r1
 800d0a0:	f001 fddc 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	2003      	movs	r0, #3
 800d0a8:	f001 fdd8 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	2002      	movs	r0, #2
 800d0b0:	f001 fdd4 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800d0b4:	2100      	movs	r1, #0
 800d0b6:	2001      	movs	r0, #1
 800d0b8:	f001 fdd0 	bl	800ec5c <PIDChangeFlag>
				count ++;
 800d0bc:	4622      	mov	r2, r4
			break;
 800d0be:	e77c      	b.n	800cfba <MaxParaRunTest+0x7a>
		switch(FastPath[count].path_action)
 800d0c0:	4622      	mov	r2, r4
 800d0c2:	e77a      	b.n	800cfba <MaxParaRunTest+0x7a>
 800d0c4:	f3af 8000 	nop.w
 800d0c8:	44444444 	.word	0x44444444
 800d0cc:	3fd44444 	.word	0x3fd44444
 800d0d0:	2000508c 	.word	0x2000508c
 800d0d4:	2000408c 	.word	0x2000408c
 800d0d8:	457a0000 	.word	0x457a0000
 800d0dc:	c038f5c3 	.word	0xc038f5c3
 800d0e0:	4038f5c3 	.word	0x4038f5c3
 800d0e4:	3f2eeeef 	.word	0x3f2eeeef
 800d0e8:	200056b4 	.word	0x200056b4

0800d0ec <LowDFSFlag>:
static _Bool Stack_Flag;
void HighDFSFlag(){
	DFS_Flag = true;
}
void LowDFSFlag(){
	DFS_Flag = false;
 800d0ec:	4b01      	ldr	r3, [pc, #4]	; (800d0f4 <LowDFSFlag+0x8>)
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	701a      	strb	r2, [r3, #0]
}
 800d0f2:	4770      	bx	lr
 800d0f4:	200050b0 	.word	0x200050b0

0800d0f8 <HighStackFlag>:
_Bool GetDFSFlag(){
	return DFS_Flag;
}

void HighStackFlag(){
	Stack_Flag = true;
 800d0f8:	4b01      	ldr	r3, [pc, #4]	; (800d100 <HighStackFlag+0x8>)
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	701a      	strb	r2, [r3, #0]
}
 800d0fe:	4770      	bx	lr
 800d100:	200050b1 	.word	0x200050b1

0800d104 <InitStackNum>:
_Bool GetStackFlag(){
	return Stack_Flag;
}

void InitStackNum(){
	Stack_Num = 0;
 800d104:	4b01      	ldr	r3, [pc, #4]	; (800d10c <InitStackNum+0x8>)
 800d106:	2200      	movs	r2, #0
 800d108:	601a      	str	r2, [r3, #0]
}
 800d10a:	4770      	bx	lr
 800d10c:	200050b4 	.word	0x200050b4

0800d110 <SetStackNum>:
void SetStackNum(int n){
	Stack_Num = n;
 800d110:	4b01      	ldr	r3, [pc, #4]	; (800d118 <SetStackNum+0x8>)
 800d112:	6018      	str	r0, [r3, #0]
}
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	200050b4 	.word	0x200050b4

0800d11c <GetStackNum>:
int GetStackNum(){
	return Stack_Num;
 800d11c:	4b01      	ldr	r3, [pc, #4]	; (800d124 <GetStackNum+0x8>)
}
 800d11e:	6818      	ldr	r0, [r3, #0]
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop
 800d124:	200050b4 	.word	0x200050b4

0800d128 <GetStackMass>:

position GetStackMass(){
	return mass_stack[Stack_Num];
 800d128:	4a07      	ldr	r2, [pc, #28]	; (800d148 <GetStackMass+0x20>)
 800d12a:	4b08      	ldr	r3, [pc, #32]	; (800d14c <GetStackMass+0x24>)
 800d12c:	6812      	ldr	r2, [r2, #0]
 800d12e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d132:	2000      	movs	r0, #0
 800d134:	b2da      	uxtb	r2, r3
 800d136:	f362 0007 	bfi	r0, r2, #0, #8
 800d13a:	0a1b      	lsrs	r3, r3, #8
position GetStackMass(){
 800d13c:	b082      	sub	sp, #8
	return mass_stack[Stack_Num];
 800d13e:	f363 200f 	bfi	r0, r3, #8, #8
}
 800d142:	b002      	add	sp, #8
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop
 800d148:	200050b4 	.word	0x200050b4
 800d14c:	200050b8 	.word	0x200050b8

0800d150 <ComparePosition>:
_Bool ComparePosition(const position *target, const position *now){
	return (target->x == now->x) && (target->y == now->y);
 800d150:	7802      	ldrb	r2, [r0, #0]
 800d152:	780b      	ldrb	r3, [r1, #0]
 800d154:	429a      	cmp	r2, r3
 800d156:	d001      	beq.n	800d15c <ComparePosition+0xc>
 800d158:	2000      	movs	r0, #0
}
 800d15a:	4770      	bx	lr
	return (target->x == now->x) && (target->y == now->y);
 800d15c:	7840      	ldrb	r0, [r0, #1]
 800d15e:	784b      	ldrb	r3, [r1, #1]
 800d160:	1ac0      	subs	r0, r0, r3
 800d162:	fab0 f080 	clz	r0, r0
 800d166:	0940      	lsrs	r0, r0, #5
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop

0800d16c <InitVisit>:

void InitVisit(){
 800d16c:	b410      	push	{r4}
 800d16e:	4c09      	ldr	r4, [pc, #36]	; (800d194 <InitVisit+0x28>)
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++){
		for(int j=0; j < NUMBER_OF_SQUARES_Y; j++){
			Visit[i][j] = false;
 800d170:	2100      	movs	r1, #0
 800d172:	4623      	mov	r3, r4
 800d174:	f504 7080 	add.w	r0, r4, #256	; 0x100
 800d178:	f103 0210 	add.w	r2, r3, #16
 800d17c:	f803 1b01 	strb.w	r1, [r3], #1
		for(int j=0; j < NUMBER_OF_SQUARES_Y; j++){
 800d180:	4293      	cmp	r3, r2
 800d182:	d1fb      	bne.n	800d17c <InitVisit+0x10>
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++){
 800d184:	4283      	cmp	r3, r0
 800d186:	d1f7      	bne.n	800d178 <InitVisit+0xc>
		}
	}
	Visit[0][0] = true;
 800d188:	2301      	movs	r3, #1
 800d18a:	7023      	strb	r3, [r4, #0]
}
 800d18c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	20006998 	.word	0x20006998

0800d198 <printVisited>:
void printVisited(){
 800d198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d19c:	4f0b      	ldr	r7, [pc, #44]	; (800d1cc <printVisited+0x34>)
	for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--){
		for(int i=0; i < NUMBER_OF_SQUARES_X; i++){
			printf("%d ",Visit[i][j]);
 800d19e:	4e0c      	ldr	r6, [pc, #48]	; (800d1d0 <printVisited+0x38>)
		}
		printf("\r\n");
 800d1a0:	f8df 9030 	ldr.w	r9, [pc, #48]	; 800d1d4 <printVisited+0x3c>
 800d1a4:	f1a7 0810 	sub.w	r8, r7, #16
 800d1a8:	f507 7580 	add.w	r5, r7, #256	; 0x100
void printVisited(){
 800d1ac:	463c      	mov	r4, r7
			printf("%d ",Visit[i][j]);
 800d1ae:	f814 1b10 	ldrb.w	r1, [r4], #16
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f005 fe72 	bl	8012e9c <iprintf>
		for(int i=0; i < NUMBER_OF_SQUARES_X; i++){
 800d1b8:	42ac      	cmp	r4, r5
 800d1ba:	d1f8      	bne.n	800d1ae <printVisited+0x16>
 800d1bc:	3f01      	subs	r7, #1
		printf("\r\n");
 800d1be:	4648      	mov	r0, r9
 800d1c0:	f005 fef4 	bl	8012fac <puts>
	for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--){
 800d1c4:	4547      	cmp	r7, r8
 800d1c6:	d1ef      	bne.n	800d1a8 <printVisited+0x10>
	}
}
 800d1c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1cc:	200069a7 	.word	0x200069a7
 800d1d0:	080165d4 	.word	0x080165d4
 800d1d4:	08016290 	.word	0x08016290

0800d1d8 <VisitedMass>:
void VisitedMass(position pos){
	Visit[pos.x][pos.y] = true;
 800d1d8:	4b05      	ldr	r3, [pc, #20]	; (800d1f0 <VisitedMass+0x18>)
 800d1da:	b2c2      	uxtb	r2, r0
 800d1dc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800d1e0:	f3c0 2007 	ubfx	r0, r0, #8, #8
void VisitedMass(position pos){
 800d1e4:	b082      	sub	sp, #8
	Visit[pos.x][pos.y] = true;
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	541a      	strb	r2, [r3, r0]
}
 800d1ea:	b002      	add	sp, #8
 800d1ec:	4770      	bx	lr
 800d1ee:	bf00      	nop
 800d1f0:	20006998 	.word	0x20006998

0800d1f4 <GetVisited>:
_Bool GetVisited(position *pos){
	return Visit[pos->x][pos->y];
 800d1f4:	7801      	ldrb	r1, [r0, #0]
 800d1f6:	4b03      	ldr	r3, [pc, #12]	; (800d204 <GetVisited+0x10>)
 800d1f8:	7842      	ldrb	r2, [r0, #1]
 800d1fa:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
 800d1fe:	5c98      	ldrb	r0, [r3, r2]
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	20006998 	.word	0x20006998

0800d208 <InitMassStack>:

void InitMassStack(){
	mass_stack[0].x = 0;
 800d208:	4b01      	ldr	r3, [pc, #4]	; (800d210 <InitMassStack+0x8>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	801a      	strh	r2, [r3, #0]
	mass_stack[0].y = 0;
}
 800d20e:	4770      	bx	lr
 800d210:	200050b8 	.word	0x200050b8

0800d214 <StackMass>:
_Bool StackMass(maze_node *maze, state *now_st){
 800d214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	//スタックの流れ
	//n=0になった時点で減速、停止。目標ノードを（0,0）に切り替え
	//積む座標があれば++nで1から開始
	//積み終わった時点のnがreturnされる
	//
	switch(car%8){
 800d218:	788a      	ldrb	r2, [r1, #2]
	uint8_t nd_x = now_st->node->pos.x;
 800d21a:	688c      	ldr	r4, [r1, #8]
	return Stack_Num;
 800d21c:	4eb7      	ldr	r6, [pc, #732]	; (800d4fc <StackMass+0x2e8>)
	uint8_t nd_x = now_st->node->pos.x;
 800d21e:	79a3      	ldrb	r3, [r4, #6]
	uint8_t x = now_st->pos.x;
 800d220:	780f      	ldrb	r7, [r1, #0]
	uint8_t nd_y = now_st->node->pos.y;
 800d222:	79e4      	ldrb	r4, [r4, #7]
	uint8_t y = now_st->pos.y;
 800d224:	f891 c001 	ldrb.w	ip, [r1, #1]
	return Stack_Num;
 800d228:	6835      	ldr	r5, [r6, #0]
	switch(car%8){
 800d22a:	f002 0207 	and.w	r2, r2, #7
 800d22e:	2a06      	cmp	r2, #6
 800d230:	f200 80d7 	bhi.w	800d3e2 <StackMass+0x1ce>
 800d234:	e8df f002 	tbb	[pc, r2]
 800d238:	d555d594 	.word	0xd555d594
 800d23c:	d534      	.short	0xd534
 800d23e:	04          	.byte	0x04
 800d23f:	00          	.byte	0x00
			}
		}
		break;
	case west:
		//右
		if( (1 <= nd_x) && (nd_y <= (NUMBER_OF_SQUARES_Y-1)) ){
 800d240:	2b00      	cmp	r3, #0
 800d242:	f000 8115 	beq.w	800d470 <StackMass+0x25c>
 800d246:	2c0f      	cmp	r4, #15
 800d248:	f103 33ff 	add.w	r3, r3, #4294967295
 800d24c:	f200 815c 	bhi.w	800d508 <StackMass+0x2f4>
			if( maze->RawNode[nd_x-1][nd_y+1].existence == NOWALL ){ //行ける
 800d250:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 800d254:	eb0e 0203 	add.w	r2, lr, r3
 800d258:	f104 0801 	add.w	r8, r4, #1
 800d25c:	4442      	add	r2, r8
 800d25e:	f810 2032 	ldrb.w	r2, [r0, r2, lsl #3]
 800d262:	2a00      	cmp	r2, #0
 800d264:	f040 81a6 	bne.w	800d5b4 <StackMass+0x3a0>
				if( y < (NUMBER_OF_SQUARES_Y -1) ){
 800d268:	f1bc 0f0e 	cmp.w	ip, #14
 800d26c:	f200 814f 	bhi.w	800d50e <StackMass+0x2fa>
					if( Visit[x][y+1] == false ){ //未訪問
 800d270:	f8df 8290 	ldr.w	r8, [pc, #656]	; 800d504 <StackMass+0x2f0>
 800d274:	eb08 1807 	add.w	r8, r8, r7, lsl #4
 800d278:	44e0      	add	r8, ip
 800d27a:	f898 8001 	ldrb.w	r8, [r8, #1]
 800d27e:	f1b8 0f00 	cmp.w	r8, #0
 800d282:	f040 8144 	bne.w	800d50e <StackMass+0x2fa>
						++cnt;
						mass_stack[n+cnt].x = now_st->pos.x;
 800d286:	4a9e      	ldr	r2, [pc, #632]	; (800d500 <StackMass+0x2ec>)
 800d288:	f105 0801 	add.w	r8, r5, #1
						mass_stack[n+cnt].y = now_st->pos.y+1;
 800d28c:	eb02 0948 	add.w	r9, r2, r8, lsl #1
						mass_stack[n+cnt].x = now_st->pos.x;
 800d290:	f802 7018 	strb.w	r7, [r2, r8, lsl #1]
						mass_stack[n+cnt].y = now_st->pos.y+1;
 800d294:	f10c 0201 	add.w	r2, ip, #1
 800d298:	f889 2001 	strb.w	r2, [r9, #1]
						++cnt;
 800d29c:	2201      	movs	r2, #1
 800d29e:	e136      	b.n	800d50e <StackMass+0x2fa>
		if( 1 <= nd_y ){
 800d2a0:	2c00      	cmp	r4, #0
 800d2a2:	f000 80e1 	beq.w	800d468 <StackMass+0x254>
			if( maze->ColumnNode[nd_x][nd_y-1].existence == NOWALL ){ //行ける
 800d2a6:	3c01      	subs	r4, #1
 800d2a8:	011a      	lsls	r2, r3, #4
 800d2aa:	eb02 0e04 	add.w	lr, r2, r4
 800d2ae:	f50e 7e88 	add.w	lr, lr, #272	; 0x110
 800d2b2:	f810 e03e 	ldrb.w	lr, [r0, lr, lsl #3]
 800d2b6:	f1be 0f00 	cmp.w	lr, #0
 800d2ba:	f040 80db 	bne.w	800d474 <StackMass+0x260>
				if( 1 <= x){
 800d2be:	2f00      	cmp	r7, #0
 800d2c0:	f040 815f 	bne.w	800d582 <StackMass+0x36e>
		if(nd_x <= (NUMBER_OF_SQUARES_X-1) && (1 <= nd_y) ){
 800d2c4:	2b0f      	cmp	r3, #15
 800d2c6:	f200 81bb 	bhi.w	800d640 <StackMass+0x42c>
			if( maze->ColumnNode[nd_x+1][nd_y-1].existence == NOWALL ){ //行ける
 800d2ca:	eb04 1e03 	add.w	lr, r4, r3, lsl #4
 800d2ce:	f50e 7e90 	add.w	lr, lr, #288	; 0x120
 800d2d2:	f810 e03e 	ldrb.w	lr, [r0, lr, lsl #3]
 800d2d6:	f1be 0f00 	cmp.w	lr, #0
 800d2da:	f040 81b1 	bne.w	800d640 <StackMass+0x42c>
	int cnt = 0;
 800d2de:	46be      	mov	lr, r7
 800d2e0:	e0d7      	b.n	800d492 <StackMass+0x27e>
		if( maze->RawNode[nd_x][nd_y].existence == NOWALL ){ //行ける
 800d2e2:	011a      	lsls	r2, r3, #4
 800d2e4:	eb02 0e03 	add.w	lr, r2, r3
 800d2e8:	44a6      	add	lr, r4
 800d2ea:	f810 e03e 	ldrb.w	lr, [r0, lr, lsl #3]
 800d2ee:	f1be 0f00 	cmp.w	lr, #0
 800d2f2:	f000 809c 	beq.w	800d42e <StackMass+0x21a>
	int cnt = 0;
 800d2f6:	f04f 0e00 	mov.w	lr, #0
		if(nd_y <= NUMBER_OF_SQUARES_Y-1){
 800d2fa:	2c0f      	cmp	r4, #15
 800d2fc:	d80a      	bhi.n	800d314 <StackMass+0x100>
			if( maze->RawNode[nd_x][nd_y+1].existence == NOWALL ){ //行ける
 800d2fe:	441a      	add	r2, r3
 800d300:	f104 0801 	add.w	r8, r4, #1
 800d304:	4442      	add	r2, r8
 800d306:	f810 2032 	ldrb.w	r2, [r0, r2, lsl #3]
 800d30a:	b91a      	cbnz	r2, 800d314 <StackMass+0x100>
				if( y < NUMBER_OF_SQUARES_Y - 1){
 800d30c:	f1bc 0f0e 	cmp.w	ip, #14
 800d310:	f240 8152 	bls.w	800d5b8 <StackMass+0x3a4>
		if(nd_x <= NUMBER_OF_SQUARES_X-1){
 800d314:	2b0f      	cmp	r3, #15
 800d316:	f200 80e2 	bhi.w	800d4de <StackMass+0x2ca>
			if( maze->ColumnNode[nd_x+1][nd_y].existence == NOWALL ){ //行ける
 800d31a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 800d31e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800d322:	f810 3033 	ldrb.w	r3, [r0, r3, lsl #3]
 800d326:	2b00      	cmp	r3, #0
 800d328:	f040 80d9 	bne.w	800d4de <StackMass+0x2ca>
				if( x < NUMBER_OF_SQUARES_X - 1){
 800d32c:	2f0e      	cmp	r7, #14
 800d32e:	f200 80d6 	bhi.w	800d4de <StackMass+0x2ca>
					if( Visit[x+1][y] == false ){ //未訪問
 800d332:	4b74      	ldr	r3, [pc, #464]	; (800d504 <StackMass+0x2f0>)
 800d334:	3701      	adds	r7, #1
 800d336:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 800d33a:	f817 300c 	ldrb.w	r3, [r7, ip]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f040 80cd 	bne.w	800d4de <StackMass+0x2ca>
						mass_stack[n+cnt].x = now_st->pos.x+1;
 800d344:	780a      	ldrb	r2, [r1, #0]
 800d346:	4b6e      	ldr	r3, [pc, #440]	; (800d500 <StackMass+0x2ec>)
						++cnt;
 800d348:	f10e 0001 	add.w	r0, lr, #1
						mass_stack[n+cnt].x = now_st->pos.x+1;
 800d34c:	4405      	add	r5, r0
 800d34e:	3201      	adds	r2, #1
		if(1 <= nd_x){
			if( maze->ColumnNode[nd_x-1][nd_y].existence == NOWALL ){ //行ける
				if( 1 <= x){
					if( Visit[x-1][y] == false ){ //未訪問
						++cnt;
						mass_stack[n+cnt].x = now_st->pos.x-1;
 800d350:	f803 2015 	strb.w	r2, [r3, r5, lsl #1]
						mass_stack[n+cnt].y = now_st->pos.y;
 800d354:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800d358:	784a      	ldrb	r2, [r1, #1]
 800d35a:	705a      	strb	r2, [r3, #1]
 800d35c:	2001      	movs	r0, #1
 800d35e:	e084      	b.n	800d46a <StackMass+0x256>
		if(nd_x <= NUMBER_OF_SQUARES_X-1){
 800d360:	2b0f      	cmp	r3, #15
 800d362:	d941      	bls.n	800d3e8 <StackMass+0x1d4>
	int cnt = 0;
 800d364:	f04f 0800 	mov.w	r8, #0
		if( maze->ColumnNode[nd_x][nd_y].existence == NOWALL ){ //行ける
 800d368:	011a      	lsls	r2, r3, #4
 800d36a:	eb02 0e04 	add.w	lr, r2, r4
 800d36e:	f50e 7e88 	add.w	lr, lr, #272	; 0x110
 800d372:	f810 e03e 	ldrb.w	lr, [r0, lr, lsl #3]
 800d376:	f1be 0f00 	cmp.w	lr, #0
 800d37a:	d10c      	bne.n	800d396 <StackMass+0x182>
			if( 1 <= x ){
 800d37c:	b15f      	cbz	r7, 800d396 <StackMass+0x182>
				if( Visit[x-1][y] == false){ //未訪問
 800d37e:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d504 <StackMass+0x2f0>
 800d382:	f107 39ff 	add.w	r9, r7, #4294967295
 800d386:	eb0e 1e09 	add.w	lr, lr, r9, lsl #4
 800d38a:	f81e e00c 	ldrb.w	lr, [lr, ip]
 800d38e:	f1be 0f00 	cmp.w	lr, #0
 800d392:	f000 812b 	beq.w	800d5ec <StackMass+0x3d8>
		if(nd_y <= NUMBER_OF_SQUARES_Y-1){
 800d396:	2c0f      	cmp	r4, #15
 800d398:	f200 80a7 	bhi.w	800d4ea <StackMass+0x2d6>
			if( maze->RawNode[nd_x][nd_y+1].existence == NOWALL ){ //行ける
 800d39c:	4413      	add	r3, r2
 800d39e:	3401      	adds	r4, #1
 800d3a0:	4423      	add	r3, r4
 800d3a2:	f810 3033 	ldrb.w	r3, [r0, r3, lsl #3]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f040 809f 	bne.w	800d4ea <StackMass+0x2d6>
				if( y < NUMBER_OF_SQUARES_Y - 1){
 800d3ac:	f1bc 0f0e 	cmp.w	ip, #14
 800d3b0:	f200 809b 	bhi.w	800d4ea <StackMass+0x2d6>
					if( Visit[x][y+1] == false){ //未訪問
 800d3b4:	4b53      	ldr	r3, [pc, #332]	; (800d504 <StackMass+0x2f0>)
 800d3b6:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 800d3ba:	44bc      	add	ip, r7
 800d3bc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f040 8092 	bne.w	800d4ea <StackMass+0x2d6>
						++cnt;
 800d3c6:	f108 0301 	add.w	r3, r8, #1
						mass_stack[n+cnt].x = now_st->pos.x;
 800d3ca:	441d      	add	r5, r3
 800d3cc:	4b4c      	ldr	r3, [pc, #304]	; (800d500 <StackMass+0x2ec>)
 800d3ce:	780a      	ldrb	r2, [r1, #0]
 800d3d0:	f803 2015 	strb.w	r2, [r3, r5, lsl #1]
						mass_stack[n+cnt].y = (now_st->pos.y ) + 1;
 800d3d4:	784a      	ldrb	r2, [r1, #1]
 800d3d6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800d3da:	3201      	adds	r2, #1
 800d3dc:	705a      	strb	r2, [r3, #1]
 800d3de:	2001      	movs	r0, #1
 800d3e0:	e043      	b.n	800d46a <StackMass+0x256>
				}
			}
		}
		break;
	default :
		return false; //エラー
 800d3e2:	2000      	movs	r0, #0
	}
	SetStackNum(n+cnt);
	return (cnt == 0) ? false : true; //何も積まれなかったらfalse
//	return n;
//	}
}
 800d3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if( maze->ColumnNode[nd_x+1][nd_y].existence == NOWALL ){ //行ける
 800d3e8:	eb04 1203 	add.w	r2, r4, r3, lsl #4
 800d3ec:	f502 7290 	add.w	r2, r2, #288	; 0x120
 800d3f0:	f810 2032 	ldrb.w	r2, [r0, r2, lsl #3]
 800d3f4:	2a00      	cmp	r2, #0
 800d3f6:	d1b5      	bne.n	800d364 <StackMass+0x150>
				if( x < NUMBER_OF_SQUARES_X-1 ){
 800d3f8:	2f0e      	cmp	r7, #14
 800d3fa:	f200 80c0 	bhi.w	800d57e <StackMass+0x36a>
					if( Visit[x+1][y] == false ){ //未訪問
 800d3fe:	f8df e104 	ldr.w	lr, [pc, #260]	; 800d504 <StackMass+0x2f0>
 800d402:	f107 0801 	add.w	r8, r7, #1
 800d406:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 800d40a:	f81e e00c 	ldrb.w	lr, [lr, ip]
 800d40e:	f1be 0f00 	cmp.w	lr, #0
 800d412:	f040 80b4 	bne.w	800d57e <StackMass+0x36a>
						mass_stack[n+cnt].x = now_st->pos.x+1;
 800d416:	4a3a      	ldr	r2, [pc, #232]	; (800d500 <StackMass+0x2ec>)
 800d418:	f105 0e01 	add.w	lr, r5, #1
						mass_stack[n+cnt].y = now_st->pos.y;
 800d41c:	eb02 094e 	add.w	r9, r2, lr, lsl #1
						mass_stack[n+cnt].x = now_st->pos.x+1;
 800d420:	f802 801e 	strb.w	r8, [r2, lr, lsl #1]
						mass_stack[n+cnt].y = now_st->pos.y;
 800d424:	f889 c001 	strb.w	ip, [r9, #1]
						++cnt;
 800d428:	f04f 0801 	mov.w	r8, #1
 800d42c:	e79c      	b.n	800d368 <StackMass+0x154>
			if( 1 <= y){
 800d42e:	f1bc 0f00 	cmp.w	ip, #0
 800d432:	d060      	beq.n	800d4f6 <StackMass+0x2e2>
				if( Visit[x][y-1] == false ){ //未訪問
 800d434:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800d504 <StackMass+0x2f0>
 800d438:	eb08 1807 	add.w	r8, r8, r7, lsl #4
 800d43c:	44e0      	add	r8, ip
 800d43e:	f818 8c01 	ldrb.w	r8, [r8, #-1]
 800d442:	f1b8 0f00 	cmp.w	r8, #0
 800d446:	f47f af58 	bne.w	800d2fa <StackMass+0xe6>
					mass_stack[n+cnt].x = now_st->pos.x;
 800d44a:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800d500 <StackMass+0x2ec>
 800d44e:	f105 0801 	add.w	r8, r5, #1
					mass_stack[n+cnt].y = (now_st->pos.y ) - 1;
 800d452:	eb0e 0948 	add.w	r9, lr, r8, lsl #1
					mass_stack[n+cnt].x = now_st->pos.x;
 800d456:	f80e 7018 	strb.w	r7, [lr, r8, lsl #1]
					mass_stack[n+cnt].y = (now_st->pos.y ) - 1;
 800d45a:	f10c 3eff 	add.w	lr, ip, #4294967295
 800d45e:	f889 e001 	strb.w	lr, [r9, #1]
					++cnt;
 800d462:	f04f 0e01 	mov.w	lr, #1
 800d466:	e748      	b.n	800d2fa <StackMass+0xe6>
 800d468:	4620      	mov	r0, r4
	Stack_Num = n;
 800d46a:	6035      	str	r5, [r6, #0]
}
 800d46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d470:	4618      	mov	r0, r3
 800d472:	e7fa      	b.n	800d46a <StackMass+0x256>
	int cnt = 0;
 800d474:	f04f 0e00 	mov.w	lr, #0
		if(nd_x <= (NUMBER_OF_SQUARES_X-1) && (1 <= nd_y) ){
 800d478:	2b0f      	cmp	r3, #15
 800d47a:	d827      	bhi.n	800d4cc <StackMass+0x2b8>
			if( maze->ColumnNode[nd_x+1][nd_y-1].existence == NOWALL ){ //行ける
 800d47c:	eb04 1803 	add.w	r8, r4, r3, lsl #4
 800d480:	f508 7890 	add.w	r8, r8, #288	; 0x120
 800d484:	f810 8038 	ldrb.w	r8, [r0, r8, lsl #3]
 800d488:	f1b8 0f00 	cmp.w	r8, #0
 800d48c:	d11e      	bne.n	800d4cc <StackMass+0x2b8>
				if( x < (NUMBER_OF_SQUARES_X - 1) ){
 800d48e:	2f0e      	cmp	r7, #14
 800d490:	d81c      	bhi.n	800d4cc <StackMass+0x2b8>
					if( Visit[x+1][y] == false ){ //未訪問
 800d492:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800d504 <StackMass+0x2f0>
 800d496:	f107 0901 	add.w	r9, r7, #1
 800d49a:	eb08 1809 	add.w	r8, r8, r9, lsl #4
 800d49e:	f818 800c 	ldrb.w	r8, [r8, ip]
 800d4a2:	f1b8 0f00 	cmp.w	r8, #0
 800d4a6:	d111      	bne.n	800d4cc <StackMass+0x2b8>
						mass_stack[n+cnt].x = now_st->pos.x+1;
 800d4a8:	f891 9000 	ldrb.w	r9, [r1]
 800d4ac:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800d500 <StackMass+0x2ec>
						++cnt;
 800d4b0:	f10e 0e01 	add.w	lr, lr, #1
						mass_stack[n+cnt].x = now_st->pos.x+1;
 800d4b4:	eb05 0a0e 	add.w	sl, r5, lr
 800d4b8:	f109 0901 	add.w	r9, r9, #1
 800d4bc:	f808 901a 	strb.w	r9, [r8, sl, lsl #1]
						mass_stack[n+cnt].y = now_st->pos.y;
 800d4c0:	eb08 084a 	add.w	r8, r8, sl, lsl #1
 800d4c4:	f891 9001 	ldrb.w	r9, [r1, #1]
 800d4c8:	f888 9001 	strb.w	r9, [r8, #1]
			if( maze->RawNode[nd_x][nd_y-1].existence == NOWALL ){ //行ける
 800d4cc:	4413      	add	r3, r2
 800d4ce:	4423      	add	r3, r4
 800d4d0:	f810 3033 	ldrb.w	r3, [r0, r3, lsl #3]
 800d4d4:	b91b      	cbnz	r3, 800d4de <StackMass+0x2ca>
				if( 1 <= y){
 800d4d6:	f1bc 0f00 	cmp.w	ip, #0
 800d4da:	f040 809a 	bne.w	800d612 <StackMass+0x3fe>
 800d4de:	f11e 0000 	adds.w	r0, lr, #0
 800d4e2:	4475      	add	r5, lr
 800d4e4:	bf18      	it	ne
 800d4e6:	2001      	movne	r0, #1
 800d4e8:	e7bf      	b.n	800d46a <StackMass+0x256>
 800d4ea:	f118 0000 	adds.w	r0, r8, #0
 800d4ee:	4445      	add	r5, r8
 800d4f0:	bf18      	it	ne
 800d4f2:	2001      	movne	r0, #1
 800d4f4:	e7b9      	b.n	800d46a <StackMass+0x256>
	int cnt = 0;
 800d4f6:	46e6      	mov	lr, ip
 800d4f8:	e6ff      	b.n	800d2fa <StackMass+0xe6>
 800d4fa:	bf00      	nop
 800d4fc:	200050b4 	.word	0x200050b4
 800d500:	200050b8 	.word	0x200050b8
 800d504:	20006998 	.word	0x20006998
 800d508:	2200      	movs	r2, #0
 800d50a:	ea4f 1e03 	mov.w	lr, r3, lsl #4
			if( maze->RawNode[nd_x-1][nd_y].existence == NOWALL ){ //行ける
 800d50e:	4473      	add	r3, lr
 800d510:	4423      	add	r3, r4
 800d512:	f810 3033 	ldrb.w	r3, [r0, r3, lsl #3]
 800d516:	b9cb      	cbnz	r3, 800d54c <StackMass+0x338>
				if( 1 <= y ){
 800d518:	f1bc 0f00 	cmp.w	ip, #0
 800d51c:	d016      	beq.n	800d54c <StackMass+0x338>
					if( Visit[x][y-1] == false ){ //未訪問
 800d51e:	4b49      	ldr	r3, [pc, #292]	; (800d644 <StackMass+0x430>)
 800d520:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800d524:	4463      	add	r3, ip
 800d526:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d52a:	b97b      	cbnz	r3, 800d54c <StackMass+0x338>
						++cnt;
 800d52c:	3201      	adds	r2, #1
						mass_stack[n+cnt].x = now_st->pos.x;
 800d52e:	eb05 0902 	add.w	r9, r5, r2
 800d532:	4b45      	ldr	r3, [pc, #276]	; (800d648 <StackMass+0x434>)
 800d534:	f891 8000 	ldrb.w	r8, [r1]
 800d538:	f803 8019 	strb.w	r8, [r3, r9, lsl #1]
						mass_stack[n+cnt].y = now_st->pos.y-1;
 800d53c:	f891 8001 	ldrb.w	r8, [r1, #1]
 800d540:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 800d544:	f108 38ff 	add.w	r8, r8, #4294967295
 800d548:	f883 8001 	strb.w	r8, [r3, #1]
			if( maze->ColumnNode[nd_x-1][nd_y].existence == NOWALL ){ //行ける
 800d54c:	4474      	add	r4, lr
 800d54e:	f504 7488 	add.w	r4, r4, #272	; 0x110
 800d552:	f810 3034 	ldrb.w	r3, [r0, r4, lsl #3]
 800d556:	b96b      	cbnz	r3, 800d574 <StackMass+0x360>
				if( 1 <= x){
 800d558:	b167      	cbz	r7, 800d574 <StackMass+0x360>
					if( Visit[x-1][y] == false ){ //未訪問
 800d55a:	4b3a      	ldr	r3, [pc, #232]	; (800d644 <StackMass+0x430>)
 800d55c:	3f01      	subs	r7, #1
 800d55e:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 800d562:	f817 300c 	ldrb.w	r3, [r7, ip]
 800d566:	b92b      	cbnz	r3, 800d574 <StackMass+0x360>
						++cnt;
 800d568:	1c50      	adds	r0, r2, #1
						mass_stack[n+cnt].x = now_st->pos.x-1;
 800d56a:	780a      	ldrb	r2, [r1, #0]
 800d56c:	4b36      	ldr	r3, [pc, #216]	; (800d648 <StackMass+0x434>)
 800d56e:	4405      	add	r5, r0
 800d570:	3a01      	subs	r2, #1
 800d572:	e6ed      	b.n	800d350 <StackMass+0x13c>
 800d574:	1c10      	adds	r0, r2, #0
 800d576:	4415      	add	r5, r2
 800d578:	bf18      	it	ne
 800d57a:	2001      	movne	r0, #1
 800d57c:	e775      	b.n	800d46a <StackMass+0x256>
	int cnt = 0;
 800d57e:	4690      	mov	r8, r2
 800d580:	e6f2      	b.n	800d368 <StackMass+0x154>
					if( Visit[x-1][y] == false ){ //未訪問
 800d582:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800d644 <StackMass+0x430>
 800d586:	f107 39ff 	add.w	r9, r7, #4294967295
 800d58a:	eb08 1809 	add.w	r8, r8, r9, lsl #4
 800d58e:	f818 800c 	ldrb.w	r8, [r8, ip]
 800d592:	f1b8 0f00 	cmp.w	r8, #0
 800d596:	f47f af6f 	bne.w	800d478 <StackMass+0x264>
						mass_stack[n+cnt].x = now_st->pos.x-1;
 800d59a:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800d648 <StackMass+0x434>
 800d59e:	f105 0801 	add.w	r8, r5, #1
						mass_stack[n+cnt].y = now_st->pos.y;
 800d5a2:	eb0e 0a48 	add.w	sl, lr, r8, lsl #1
						mass_stack[n+cnt].x = now_st->pos.x-1;
 800d5a6:	f80e 9018 	strb.w	r9, [lr, r8, lsl #1]
						mass_stack[n+cnt].y = now_st->pos.y;
 800d5aa:	f88a c001 	strb.w	ip, [sl, #1]
						++cnt;
 800d5ae:	f04f 0e01 	mov.w	lr, #1
 800d5b2:	e761      	b.n	800d478 <StackMass+0x264>
	int cnt = 0;
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	e7aa      	b.n	800d50e <StackMass+0x2fa>
					if( Visit[x][y+1] == false){ //未訪問
 800d5b8:	4a22      	ldr	r2, [pc, #136]	; (800d644 <StackMass+0x430>)
 800d5ba:	eb02 1207 	add.w	r2, r2, r7, lsl #4
 800d5be:	4462      	add	r2, ip
 800d5c0:	7852      	ldrb	r2, [r2, #1]
 800d5c2:	2a00      	cmp	r2, #0
 800d5c4:	f47f aea6 	bne.w	800d314 <StackMass+0x100>
						++cnt;
 800d5c8:	f10e 0e01 	add.w	lr, lr, #1
						mass_stack[n+cnt].x = now_st->pos.x;
 800d5cc:	eb05 090e 	add.w	r9, r5, lr
 800d5d0:	4a1d      	ldr	r2, [pc, #116]	; (800d648 <StackMass+0x434>)
 800d5d2:	f891 8000 	ldrb.w	r8, [r1]
 800d5d6:	f802 8019 	strb.w	r8, [r2, r9, lsl #1]
						mass_stack[n+cnt].y = (now_st->pos.y) + 1;
 800d5da:	f891 8001 	ldrb.w	r8, [r1, #1]
 800d5de:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 800d5e2:	f108 0801 	add.w	r8, r8, #1
 800d5e6:	f882 8001 	strb.w	r8, [r2, #1]
 800d5ea:	e693      	b.n	800d314 <StackMass+0x100>
					mass_stack[n+cnt].x = now_st->pos.x-1;
 800d5ec:	f891 9000 	ldrb.w	r9, [r1]
 800d5f0:	f8df e054 	ldr.w	lr, [pc, #84]	; 800d648 <StackMass+0x434>
					++cnt;
 800d5f4:	f108 0801 	add.w	r8, r8, #1
					mass_stack[n+cnt].x = now_st->pos.x-1;
 800d5f8:	eb05 0a08 	add.w	sl, r5, r8
 800d5fc:	f109 39ff 	add.w	r9, r9, #4294967295
 800d600:	f80e 901a 	strb.w	r9, [lr, sl, lsl #1]
					mass_stack[n+cnt].y = now_st->pos.y;
 800d604:	eb0e 0e4a 	add.w	lr, lr, sl, lsl #1
 800d608:	f891 9001 	ldrb.w	r9, [r1, #1]
 800d60c:	f88e 9001 	strb.w	r9, [lr, #1]
 800d610:	e6c1      	b.n	800d396 <StackMass+0x182>
					if( Visit[x][y-1] == false ){ //未訪問
 800d612:	4b0c      	ldr	r3, [pc, #48]	; (800d644 <StackMass+0x430>)
 800d614:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 800d618:	44bc      	add	ip, r7
 800d61a:	f81c 3c01 	ldrb.w	r3, [ip, #-1]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f47f af5d 	bne.w	800d4de <StackMass+0x2ca>
						++cnt;
 800d624:	f10e 0001 	add.w	r0, lr, #1
						mass_stack[n+cnt].x = now_st->pos.x;
 800d628:	4405      	add	r5, r0
 800d62a:	4b07      	ldr	r3, [pc, #28]	; (800d648 <StackMass+0x434>)
 800d62c:	780a      	ldrb	r2, [r1, #0]
 800d62e:	f803 2015 	strb.w	r2, [r3, r5, lsl #1]
						mass_stack[n+cnt].y = now_st->pos.y-1;
 800d632:	784a      	ldrb	r2, [r1, #1]
 800d634:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800d638:	3a01      	subs	r2, #1
 800d63a:	705a      	strb	r2, [r3, #1]
 800d63c:	2001      	movs	r0, #1
 800d63e:	e714      	b.n	800d46a <StackMass+0x256>
	int cnt = 0;
 800d640:	46be      	mov	lr, r7
 800d642:	e743      	b.n	800d4cc <StackMass+0x2b8>
 800d644:	20006998 	.word	0x20006998
 800d648:	200050b8 	.word	0x200050b8

0800d64c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d64c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d650:	2400      	movs	r4, #0
{
 800d652:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d654:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800d658:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d65c:	4b45      	ldr	r3, [pc, #276]	; (800d774 <MX_GPIO_Init+0x128>)
 800d65e:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d660:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800d664:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800d784 <MX_GPIO_Init+0x138>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800d668:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800d788 <MX_GPIO_Init+0x13c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800d66c:	4f42      	ldr	r7, [pc, #264]	; (800d778 <MX_GPIO_Init+0x12c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d66e:	4e43      	ldr	r6, [pc, #268]	; (800d77c <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d670:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d674:	631a      	str	r2, [r3, #48]	; 0x30
 800d676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d678:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800d67c:	9200      	str	r2, [sp, #0]
 800d67e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d680:	9401      	str	r4, [sp, #4]
 800d682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d684:	f042 0204 	orr.w	r2, r2, #4
 800d688:	631a      	str	r2, [r3, #48]	; 0x30
 800d68a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d68c:	f002 0204 	and.w	r2, r2, #4
 800d690:	9201      	str	r2, [sp, #4]
 800d692:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d694:	9402      	str	r4, [sp, #8]
 800d696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d698:	f042 0201 	orr.w	r2, r2, #1
 800d69c:	631a      	str	r2, [r3, #48]	; 0x30
 800d69e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6a0:	f002 0201 	and.w	r2, r2, #1
 800d6a4:	9202      	str	r2, [sp, #8]
 800d6a6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d6a8:	9403      	str	r4, [sp, #12]
 800d6aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6ac:	f042 0202 	orr.w	r2, r2, #2
 800d6b0:	631a      	str	r2, [r3, #48]	; 0x30
 800d6b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6b4:	f002 0202 	and.w	r2, r2, #2
 800d6b8:	9203      	str	r2, [sp, #12]
 800d6ba:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d6bc:	9404      	str	r4, [sp, #16]
 800d6be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6c0:	f042 0208 	orr.w	r2, r2, #8
 800d6c4:	631a      	str	r2, [r3, #48]	; 0x30
 800d6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c8:	f003 0308 	and.w	r3, r3, #8
 800d6cc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800d6ce:	4622      	mov	r2, r4
 800d6d0:	4648      	mov	r0, r9
 800d6d2:	2105      	movs	r1, #5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d6d4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800d6d6:	f002 fba5 	bl	800fe24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800d6da:	4622      	mov	r2, r4
 800d6dc:	4640      	mov	r0, r8
 800d6de:	f44f 7140 	mov.w	r1, #768	; 0x300
 800d6e2:	f002 fb9f 	bl	800fe24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800d6e6:	4622      	mov	r2, r4
 800d6e8:	4638      	mov	r0, r7
 800d6ea:	2104      	movs	r1, #4
 800d6ec:	f002 fb9a 	bl	800fe24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d6f0:	4622      	mov	r2, r4
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d6f8:	f002 fb94 	bl	800fe24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6fc:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6fe:	4648      	mov	r0, r9
 800d700:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800d702:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d704:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d708:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d70c:	f002 fa86 	bl	800fc1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d710:	4b1b      	ldr	r3, [pc, #108]	; (800d780 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d712:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800d714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d718:	a905      	add	r1, sp, #20
 800d71a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d71c:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d720:	f002 fa7c 	bl	800fc1c <HAL_GPIO_Init>
  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d724:	4640      	mov	r0, r8
 800d726:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800d728:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d72c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d72e:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d732:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d734:	f002 fa72 	bl	800fc1c <HAL_GPIO_Init>
  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d738:	4638      	mov	r0, r7
 800d73a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d73c:	2304      	movs	r3, #4
 800d73e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d740:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d744:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d746:	f002 fa69 	bl	800fc1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d74a:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d74e:	a905      	add	r1, sp, #20
 800d750:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d752:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d754:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d758:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d75a:	f002 fa5f 	bl	800fc1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800d75e:	4622      	mov	r2, r4
 800d760:	4621      	mov	r1, r4
 800d762:	2028      	movs	r0, #40	; 0x28
 800d764:	f001 fece 	bl	800f504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d768:	2028      	movs	r0, #40	; 0x28
 800d76a:	f001 ff01 	bl	800f570 <HAL_NVIC_EnableIRQ>

}
 800d76e:	b00b      	add	sp, #44	; 0x2c
 800d770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d774:	40023800 	.word	0x40023800
 800d778:	40020c00 	.word	0x40020c00
 800d77c:	40020400 	.word	0x40020400
 800d780:	10110000 	.word	0x10110000
 800d784:	40020000 	.word	0x40020000
 800d788:	40020800 	.word	0x40020800

0800d78c <MX_DMA_Init>:
{
 800d78c:	b510      	push	{r4, lr}
 800d78e:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800d790:	2400      	movs	r4, #0
 800d792:	4b0f      	ldr	r3, [pc, #60]	; (800d7d0 <MX_DMA_Init+0x44>)
 800d794:	9401      	str	r4, [sp, #4]
 800d796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d798:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800d79c:	631a      	str	r2, [r3, #48]	; 0x30
 800d79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800d7a4:	4622      	mov	r2, r4
 800d7a6:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800d7a8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800d7aa:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800d7ac:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800d7ae:	f001 fea9 	bl	800f504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800d7b2:	2038      	movs	r0, #56	; 0x38
 800d7b4:	f001 fedc 	bl	800f570 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800d7b8:	4622      	mov	r2, r4
 800d7ba:	4621      	mov	r1, r4
 800d7bc:	203a      	movs	r0, #58	; 0x3a
 800d7be:	f001 fea1 	bl	800f504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800d7c2:	203a      	movs	r0, #58	; 0x3a
}
 800d7c4:	b002      	add	sp, #8
 800d7c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800d7ca:	f001 bed1 	b.w	800f570 <HAL_NVIC_EnableIRQ>
 800d7ce:	bf00      	nop
 800d7d0:	40023800 	.word	0x40023800

0800d7d4 <MX_ADC1_Init>:
{
 800d7d4:	b570      	push	{r4, r5, r6, lr}
  hadc1.Instance = ADC1;
 800d7d6:	4c21      	ldr	r4, [pc, #132]	; (800d85c <MX_ADC1_Init+0x88>)
 800d7d8:	4b21      	ldr	r3, [pc, #132]	; (800d860 <MX_ADC1_Init+0x8c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d7da:	4a22      	ldr	r2, [pc, #136]	; (800d864 <MX_ADC1_Init+0x90>)
  hadc1.Instance = ADC1;
 800d7dc:	6023      	str	r3, [r4, #0]
{
 800d7de:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800d7e0:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 800d7e2:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800d7e4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc1.Init.NbrOfConversion = 3;
 800d7e8:	2603      	movs	r6, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d7ea:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800d7ec:	6061      	str	r1, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d7ee:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d7f0:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800d7f2:	9300      	str	r3, [sp, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d7f4:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d7f8:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d7fa:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800d7fc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800d800:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ENABLE;
 800d802:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800d804:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800d806:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d80a:	6165      	str	r5, [r4, #20]
  hadc1.Init.NbrOfConversion = 3;
 800d80c:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d80e:	f001 fbed 	bl	800efec <HAL_ADC_Init>
 800d812:	b108      	cbz	r0, 800d818 <MX_ADC1_Init+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d814:	b672      	cpsid	i
 800d816:	e7fe      	b.n	800d816 <MX_ADC1_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_10;
 800d818:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d81a:	4669      	mov	r1, sp
 800d81c:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800d81e:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d820:	9602      	str	r6, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_10;
 800d822:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d824:	f001 fdb4 	bl	800f390 <HAL_ADC_ConfigChannel>
 800d828:	b108      	cbz	r0, 800d82e <MX_ADC1_Init+0x5a>
 800d82a:	b672      	cpsid	i
 800d82c:	e7fe      	b.n	800d82c <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_14;
 800d82e:	220e      	movs	r2, #14
  sConfig.Rank = 2;
 800d830:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d832:	4669      	mov	r1, sp
 800d834:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 800d836:	9200      	str	r2, [sp, #0]
  sConfig.Rank = 2;
 800d838:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d83a:	f001 fda9 	bl	800f390 <HAL_ADC_ConfigChannel>
 800d83e:	b108      	cbz	r0, 800d844 <MX_ADC1_Init+0x70>
 800d840:	b672      	cpsid	i
 800d842:	e7fe      	b.n	800d842 <MX_ADC1_Init+0x6e>
  sConfig.Channel = ADC_CHANNEL_9;
 800d844:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d846:	4669      	mov	r1, sp
 800d848:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 800d84a:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d84e:	f001 fd9f 	bl	800f390 <HAL_ADC_ConfigChannel>
 800d852:	b108      	cbz	r0, 800d858 <MX_ADC1_Init+0x84>
 800d854:	b672      	cpsid	i
 800d856:	e7fe      	b.n	800d856 <MX_ADC1_Init+0x82>
}
 800d858:	b004      	add	sp, #16
 800d85a:	bd70      	pop	{r4, r5, r6, pc}
 800d85c:	20006bf8 	.word	0x20006bf8
 800d860:	40012000 	.word	0x40012000
 800d864:	0f000001 	.word	0x0f000001

0800d868 <MX_ADC2_Init>:
{
 800d868:	b570      	push	{r4, r5, r6, lr}
  hadc2.Instance = ADC2;
 800d86a:	4c1c      	ldr	r4, [pc, #112]	; (800d8dc <MX_ADC2_Init+0x74>)
 800d86c:	4b1c      	ldr	r3, [pc, #112]	; (800d8e0 <MX_ADC2_Init+0x78>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d86e:	4a1d      	ldr	r2, [pc, #116]	; (800d8e4 <MX_ADC2_Init+0x7c>)
  hadc2.Instance = ADC2;
 800d870:	6023      	str	r3, [r4, #0]
{
 800d872:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800d874:	2300      	movs	r3, #0
  hadc2.Init.ScanConvMode = ENABLE;
 800d876:	2501      	movs	r5, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800d878:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc2.Init.NbrOfConversion = 2;
 800d87c:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800d87e:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800d880:	6061      	str	r1, [r4, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d882:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800d884:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800d886:	9300      	str	r3, [sp, #0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800d888:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d88c:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d88e:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800d890:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800d894:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ENABLE;
 800d896:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800d898:	7625      	strb	r5, [r4, #24]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800d89a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d89e:	6165      	str	r5, [r4, #20]
  hadc2.Init.NbrOfConversion = 2;
 800d8a0:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800d8a2:	f001 fba3 	bl	800efec <HAL_ADC_Init>
 800d8a6:	b108      	cbz	r0, 800d8ac <MX_ADC2_Init+0x44>
 800d8a8:	b672      	cpsid	i
 800d8aa:	e7fe      	b.n	800d8aa <MX_ADC2_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_11;
 800d8ac:	220b      	movs	r2, #11
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d8ae:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800d8b0:	4669      	mov	r1, sp
 800d8b2:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800d8b4:	9501      	str	r5, [sp, #4]
  sConfig.Channel = ADC_CHANNEL_11;
 800d8b6:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d8b8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800d8ba:	f001 fd69 	bl	800f390 <HAL_ADC_ConfigChannel>
 800d8be:	b108      	cbz	r0, 800d8c4 <MX_ADC2_Init+0x5c>
 800d8c0:	b672      	cpsid	i
 800d8c2:	e7fe      	b.n	800d8c2 <MX_ADC2_Init+0x5a>
  sConfig.Channel = ADC_CHANNEL_15;
 800d8c4:	230f      	movs	r3, #15
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800d8c6:	4669      	mov	r1, sp
 800d8c8:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_15;
 800d8ca:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800d8ce:	f001 fd5f 	bl	800f390 <HAL_ADC_ConfigChannel>
 800d8d2:	b108      	cbz	r0, 800d8d8 <MX_ADC2_Init+0x70>
 800d8d4:	b672      	cpsid	i
 800d8d6:	e7fe      	b.n	800d8d6 <MX_ADC2_Init+0x6e>
}
 800d8d8:	b004      	add	sp, #16
 800d8da:	bd70      	pop	{r4, r5, r6, pc}
 800d8dc:	20006b18 	.word	0x20006b18
 800d8e0:	40012100 	.word	0x40012100
 800d8e4:	0f000001 	.word	0x0f000001

0800d8e8 <MX_TIM3_Init>:
{
 800d8e8:	b530      	push	{r4, r5, lr}
 800d8ea:	b08d      	sub	sp, #52	; 0x34
  htim3.Instance = TIM3;
 800d8ec:	4c14      	ldr	r4, [pc, #80]	; (800d940 <MX_TIM3_Init+0x58>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 800d8ee:	2220      	movs	r2, #32
 800d8f0:	2100      	movs	r1, #0
 800d8f2:	a804      	add	r0, sp, #16
 800d8f4:	f004 faa3 	bl	8011e3e <memset>
  htim3.Instance = TIM3;
 800d8f8:	4b12      	ldr	r3, [pc, #72]	; (800d944 <MX_TIM3_Init+0x5c>)
 800d8fa:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 60000-1;
 800d8fc:	f64e 225f 	movw	r2, #59999	; 0xea5f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d900:	2300      	movs	r3, #0
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d902:	2503      	movs	r5, #3
  htim3.Init.Period = 60000-1;
 800d904:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800d906:	4620      	mov	r0, r4
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d908:	2201      	movs	r2, #1
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800d90a:	a903      	add	r1, sp, #12
  htim3.Init.Prescaler = 0;
 800d90c:	6063      	str	r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d90e:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d910:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d912:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d914:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d916:	9302      	str	r3, [sp, #8]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d918:	9503      	str	r5, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d91a:	9205      	str	r2, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d91c:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800d91e:	f003 fc73 	bl	8011208 <HAL_TIM_Encoder_Init>
 800d922:	b108      	cbz	r0, 800d928 <MX_TIM3_Init+0x40>
 800d924:	b672      	cpsid	i
 800d926:	e7fe      	b.n	800d926 <MX_TIM3_Init+0x3e>
 800d928:	4603      	mov	r3, r0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d92a:	a901      	add	r1, sp, #4
 800d92c:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d92e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d932:	f003 fe19 	bl	8011568 <HAL_TIMEx_MasterConfigSynchronization>
 800d936:	b108      	cbz	r0, 800d93c <MX_TIM3_Init+0x54>
 800d938:	b672      	cpsid	i
 800d93a:	e7fe      	b.n	800d93a <MX_TIM3_Init+0x52>
}
 800d93c:	b00d      	add	sp, #52	; 0x34
 800d93e:	bd30      	pop	{r4, r5, pc}
 800d940:	20006b60 	.word	0x20006b60
 800d944:	40000400 	.word	0x40000400

0800d948 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 800d948:	4b0a      	ldr	r3, [pc, #40]	; (800d974 <MX_USART1_UART_Init+0x2c>)
 800d94a:	4a0b      	ldr	r2, [pc, #44]	; (800d978 <MX_USART1_UART_Init+0x30>)
{
 800d94c:	b510      	push	{r4, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d94e:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 800d950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800d952:	f44f 5416 	mov.w	r4, #9600	; 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d956:	2200      	movs	r2, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d958:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 9600;
 800d95a:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d95c:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d95e:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d962:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d964:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d968:	f003 ff16 	bl	8011798 <HAL_UART_Init>
 800d96c:	b108      	cbz	r0, 800d972 <MX_USART1_UART_Init+0x2a>
 800d96e:	b672      	cpsid	i
 800d970:	e7fe      	b.n	800d970 <MX_USART1_UART_Init+0x28>
}
 800d972:	bd10      	pop	{r4, pc}
 800d974:	20006c40 	.word	0x20006c40
 800d978:	40011000 	.word	0x40011000

0800d97c <__io_putchar>:
PUTCHAR_PROTOTYPE {
 800d97c:	b500      	push	{lr}
 800d97e:	b083      	sub	sp, #12
 800d980:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800d982:	f64f 73ff 	movw	r3, #65535	; 0xffff
PUTCHAR_PROTOTYPE {
 800d986:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800d98a:	2201      	movs	r2, #1
 800d98c:	4803      	ldr	r0, [pc, #12]	; (800d99c <__io_putchar+0x20>)
 800d98e:	f003 ff33 	bl	80117f8 <HAL_UART_Transmit>
}
 800d992:	9801      	ldr	r0, [sp, #4]
 800d994:	b003      	add	sp, #12
 800d996:	f85d fb04 	ldr.w	pc, [sp], #4
 800d99a:	bf00      	nop
 800d99c:	20006c40 	.word	0x20006c40

0800d9a0 <__io_getchar>:
int __io_getchar(void) {
 800d9a0:	b510      	push	{r4, lr}
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800d9a2:	4c07      	ldr	r4, [pc, #28]	; (800d9c0 <__io_getchar+0x20>)
int __io_getchar(void) {
 800d9a4:	b082      	sub	sp, #8
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800d9a6:	230a      	movs	r3, #10
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f10d 0107 	add.w	r1, sp, #7
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f003 ff80 	bl	80118b4 <HAL_UART_Receive>
while(Status != HAL_OK)
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d1f6      	bne.n	800d9a6 <__io_getchar+0x6>
}
 800d9b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d9bc:	b002      	add	sp, #8
 800d9be:	bd10      	pop	{r4, pc}
 800d9c0:	20006c40 	.word	0x20006c40

0800d9c4 <SystemClock_Config>:
{
 800d9c4:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d9c6:	2300      	movs	r3, #0
{
 800d9c8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d9ca:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800d9ce:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d9d2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800d9d6:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d9da:	4920      	ldr	r1, [pc, #128]	; (800da5c <SystemClock_Config+0x98>)
 800d9dc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d9de:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d9e0:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d9e2:	4a1f      	ldr	r2, [pc, #124]	; (800da60 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800d9e4:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800d9e8:	6408      	str	r0, [r1, #64]	; 0x40
 800d9ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d9ec:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800d9f0:	9101      	str	r1, [sp, #4]
 800d9f2:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d9f4:	9302      	str	r3, [sp, #8]
 800d9f6:	6813      	ldr	r3, [r2, #0]
 800d9f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d9fc:	6013      	str	r3, [r2, #0]
 800d9fe:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800da00:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800da04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800da08:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800da0a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800da0c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 800da0e:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800da10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800da14:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800da16:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 800da18:	22a8      	movs	r2, #168	; 0xa8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800da1a:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800da1c:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800da1e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800da20:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 800da22:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800da26:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800da28:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800da2a:	f002 fa0b 	bl	800fe44 <HAL_RCC_OscConfig>
 800da2e:	b108      	cbz	r0, 800da34 <SystemClock_Config+0x70>
 800da30:	b672      	cpsid	i
 800da32:	e7fe      	b.n	800da32 <SystemClock_Config+0x6e>
 800da34:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800da36:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800da38:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800da3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800da40:	a803      	add	r0, sp, #12
 800da42:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800da44:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800da46:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800da48:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800da4a:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800da4e:	f002 fc0d 	bl	801026c <HAL_RCC_ClockConfig>
 800da52:	b108      	cbz	r0, 800da58 <SystemClock_Config+0x94>
 800da54:	b672      	cpsid	i
 800da56:	e7fe      	b.n	800da56 <SystemClock_Config+0x92>
}
 800da58:	b014      	add	sp, #80	; 0x50
 800da5a:	bd70      	pop	{r4, r5, r6, pc}
 800da5c:	40023800 	.word	0x40023800
 800da60:	40007000 	.word	0x40007000

0800da64 <main>:
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 800da68:	f001 fa82 	bl	800ef70 <HAL_Init>
  MX_GPIO_Init();
 800da6c:	f7ff fdee 	bl	800d64c <MX_GPIO_Init>
  MX_DMA_Init();
 800da70:	f7ff fe8c 	bl	800d78c <MX_DMA_Init>
  MX_ADC1_Init();
 800da74:	f7ff feae 	bl	800d7d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800da78:	f7ff fef6 	bl	800d868 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800da7c:	f7ff ff64 	bl	800d948 <MX_USART1_UART_Init>
	ADCStart();
 800da80:	f000 fd3c 	bl	800e4fc <ADCStart>
	MX_TIM3_Init();
 800da84:	f7ff ff30 	bl	800d8e8 <MX_TIM3_Init>
	BatteryCheck( (int)adc1[2] );
 800da88:	4ba0      	ldr	r3, [pc, #640]	; (800dd0c <main+0x2a8>)
  htim2.Instance = TIM2;
 800da8a:	4ca1      	ldr	r4, [pc, #644]	; (800dd10 <main+0x2ac>)
	BatteryCheck( (int)adc1[2] );
 800da8c:	6898      	ldr	r0, [r3, #8]
 800da8e:	f001 f965 	bl	800ed5c <BatteryCheck>
	ADCStop();
 800da92:	f000 fd51 	bl	800e538 <ADCStop>
	ModeSelect(0, 7, &startup_mode);
 800da96:	f10d 0207 	add.w	r2, sp, #7
 800da9a:	2107      	movs	r1, #7
 800da9c:	2000      	movs	r0, #0
 800da9e:	f001 f9b7 	bl	800ee10 <ModeSelect>
	Signal( startup_mode );
 800daa2:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800daa6:	f001 f947 	bl	800ed38 <Signal>
  htim2.Init.Period = 4200-1;
 800daaa:	f241 0667 	movw	r6, #4199	; 0x1067
  SystemClock_Config();
 800daae:	f7ff ff89 	bl	800d9c4 <SystemClock_Config>
  MX_GPIO_Init();
 800dab2:	f7ff fdcb 	bl	800d64c <MX_GPIO_Init>
  MX_DMA_Init();
 800dab6:	f7ff fe69 	bl	800d78c <MX_DMA_Init>
  MX_ADC1_Init();
 800daba:	f7ff fe8b 	bl	800d7d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800dabe:	f7ff fed3 	bl	800d868 <MX_ADC2_Init>
  MX_TIM3_Init();
 800dac2:	f7ff ff11 	bl	800d8e8 <MX_TIM3_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dac6:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 800dac8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800dacc:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 800dace:	6022      	str	r2, [r4, #0]
  htim2.Init.Prescaler = 0;
 800dad0:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dad2:	9308      	str	r3, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dad4:	9304      	str	r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dad6:	930f      	str	r3, [sp, #60]	; 0x3c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dad8:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dada:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dadc:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dade:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800dae2:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dae4:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dae6:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800daea:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 800daee:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  htim2.Init.Period = 4200-1;
 800daf2:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800daf4:	f003 fb34 	bl	8011160 <HAL_TIM_Base_Init>
 800daf8:	b108      	cbz	r0, 800dafe <main+0x9a>
 800dafa:	b672      	cpsid	i
 800dafc:	e7fe      	b.n	800dafc <main+0x98>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dafe:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800db02:	a908      	add	r1, sp, #32
 800db04:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800db06:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800db08:	f003 f960 	bl	8010dcc <HAL_TIM_ConfigClockSource>
 800db0c:	b108      	cbz	r0, 800db12 <main+0xae>
 800db0e:	b672      	cpsid	i
 800db10:	e7fe      	b.n	800db10 <main+0xac>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800db12:	4620      	mov	r0, r4
 800db14:	f003 fb5c 	bl	80111d0 <HAL_TIM_PWM_Init>
 800db18:	4603      	mov	r3, r0
 800db1a:	b108      	cbz	r0, 800db20 <main+0xbc>
 800db1c:	b672      	cpsid	i
 800db1e:	e7fe      	b.n	800db1e <main+0xba>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800db20:	a904      	add	r1, sp, #16
 800db22:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800db24:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800db28:	f003 fd1e 	bl	8011568 <HAL_TIMEx_MasterConfigSynchronization>
 800db2c:	b108      	cbz	r0, 800db32 <main+0xce>
 800db2e:	b672      	cpsid	i
 800db30:	e7fe      	b.n	800db30 <main+0xcc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800db32:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800db34:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800db38:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800db3a:	220c      	movs	r2, #12
 800db3c:	a90f      	add	r1, sp, #60	; 0x3c
 800db3e:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800db40:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800db42:	f003 fc17 	bl	8011374 <HAL_TIM_PWM_ConfigChannel>
 800db46:	4605      	mov	r5, r0
 800db48:	b108      	cbz	r0, 800db4e <main+0xea>
 800db4a:	b672      	cpsid	i
 800db4c:	e7fe      	b.n	800db4c <main+0xe8>
  HAL_TIM_MspPostInit(&htim2);
 800db4e:	4620      	mov	r0, r4
 800db50:	f000 fb9c 	bl	800e28c <HAL_TIM_MspPostInit>
  hspi3.Instance = SPI3;
 800db54:	4b6f      	ldr	r3, [pc, #444]	; (800dd14 <main+0x2b0>)
 800db56:	4a70      	ldr	r2, [pc, #448]	; (800dd18 <main+0x2b4>)
 800db58:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800db5a:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800db5e:	2202      	movs	r2, #2
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800db60:	6059      	str	r1, [r3, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800db62:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800db64:	2101      	movs	r1, #1
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800db66:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800db6a:	6159      	str	r1, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800db6c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800db6e:	2128      	movs	r1, #40	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800db70:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800db72:	4618      	mov	r0, r3
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800db74:	e9c3 5502 	strd	r5, r5, [r3, #8]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800db78:	e9c3 5508 	strd	r5, r5, [r3, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db7c:	629d      	str	r5, [r3, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800db7e:	61d9      	str	r1, [r3, #28]
  hspi3.Init.CRCPolynomial = 10;
 800db80:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800db82:	f002 fdc9 	bl	8010718 <HAL_SPI_Init>
 800db86:	4604      	mov	r4, r0
 800db88:	b108      	cbz	r0, 800db8e <main+0x12a>
 800db8a:	b672      	cpsid	i
 800db8c:	e7fe      	b.n	800db8c <main+0x128>
  htim5.Instance = TIM5;
 800db8e:	4d63      	ldr	r5, [pc, #396]	; (800dd1c <main+0x2b8>)
  MX_USART1_UART_Init();
 800db90:	f7ff feda 	bl	800d948 <MX_USART1_UART_Init>
  htim5.Instance = TIM5;
 800db94:	4b62      	ldr	r3, [pc, #392]	; (800dd20 <main+0x2bc>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 800db96:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800db98:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800db9a:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800db9e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dba2:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dba6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800dbaa:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 800dbae:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dbb2:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim5.Init.Period = 4200-1;
 800dbb6:	60ee      	str	r6, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dbb8:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dbba:	61ac      	str	r4, [r5, #24]
  htim5.Instance = TIM5;
 800dbbc:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800dbbe:	f003 facf 	bl	8011160 <HAL_TIM_Base_Init>
 800dbc2:	b108      	cbz	r0, 800dbc8 <main+0x164>
 800dbc4:	b672      	cpsid	i
 800dbc6:	e7fe      	b.n	800dbc6 <main+0x162>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800dbc8:	a908      	add	r1, sp, #32
 800dbca:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dbcc:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800dbce:	f003 f8fd 	bl	8010dcc <HAL_TIM_ConfigClockSource>
 800dbd2:	b108      	cbz	r0, 800dbd8 <main+0x174>
 800dbd4:	b672      	cpsid	i
 800dbd6:	e7fe      	b.n	800dbd6 <main+0x172>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800dbd8:	4628      	mov	r0, r5
 800dbda:	f003 faf9 	bl	80111d0 <HAL_TIM_PWM_Init>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	b108      	cbz	r0, 800dbe6 <main+0x182>
 800dbe2:	b672      	cpsid	i
 800dbe4:	e7fe      	b.n	800dbe4 <main+0x180>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dbea:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800dbee:	f003 fcbb 	bl	8011568 <HAL_TIMEx_MasterConfigSynchronization>
 800dbf2:	b108      	cbz	r0, 800dbf8 <main+0x194>
 800dbf4:	b672      	cpsid	i
 800dbf6:	e7fe      	b.n	800dbf6 <main+0x192>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dbf8:	2060      	movs	r0, #96	; 0x60
  sConfigOC.Pulse = 0;
 800dbfa:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dbfc:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800dbfe:	2204      	movs	r2, #4
 800dc00:	a90f      	add	r1, sp, #60	; 0x3c
 800dc02:	4846      	ldr	r0, [pc, #280]	; (800dd1c <main+0x2b8>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dc04:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dc06:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800dc0a:	f003 fbb3 	bl	8011374 <HAL_TIM_PWM_ConfigChannel>
 800dc0e:	4605      	mov	r5, r0
 800dc10:	b108      	cbz	r0, 800dc16 <main+0x1b2>
 800dc12:	b672      	cpsid	i
 800dc14:	e7fe      	b.n	800dc14 <main+0x1b0>
  HAL_TIM_MspPostInit(&htim5);
 800dc16:	4841      	ldr	r0, [pc, #260]	; (800dd1c <main+0x2b8>)
  htim4.Instance = TIM4;
 800dc18:	4c42      	ldr	r4, [pc, #264]	; (800dd24 <main+0x2c0>)
  HAL_TIM_MspPostInit(&htim5);
 800dc1a:	f000 fb37 	bl	800e28c <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800dc1e:	2220      	movs	r2, #32
 800dc20:	4629      	mov	r1, r5
 800dc22:	a810      	add	r0, sp, #64	; 0x40
 800dc24:	f004 f90b 	bl	8011e3e <memset>
  htim4.Instance = TIM4;
 800dc28:	4b3f      	ldr	r3, [pc, #252]	; (800dd28 <main+0x2c4>)
 800dc2a:	6023      	str	r3, [r4, #0]
  htim4.Init.Period = 60000-1;
 800dc2c:	f64e 215f 	movw	r1, #59999	; 0xea5f
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800dc30:	2301      	movs	r3, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800dc32:	2203      	movs	r2, #3
  htim4.Init.Period = 60000-1;
 800dc34:	60e1      	str	r1, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800dc36:	4620      	mov	r0, r4
 800dc38:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800dc3a:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800dc3c:	9315      	str	r3, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc3e:	9508      	str	r5, [sp, #32]
 800dc40:	9509      	str	r5, [sp, #36]	; 0x24
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc42:	e9c4 5501 	strd	r5, r5, [r4, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc46:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc48:	61a5      	str	r5, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800dc4a:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800dc4c:	f003 fadc 	bl	8011208 <HAL_TIM_Encoder_Init>
 800dc50:	4603      	mov	r3, r0
 800dc52:	b108      	cbz	r0, 800dc58 <main+0x1f4>
 800dc54:	b672      	cpsid	i
 800dc56:	e7fe      	b.n	800dc56 <main+0x1f2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800dc58:	4620      	mov	r0, r4
 800dc5a:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc5c:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800dc60:	f003 fc82 	bl	8011568 <HAL_TIMEx_MasterConfigSynchronization>
 800dc64:	4604      	mov	r4, r0
 800dc66:	b108      	cbz	r0, 800dc6c <main+0x208>
 800dc68:	b672      	cpsid	i
 800dc6a:	e7fe      	b.n	800dc6a <main+0x206>
  htim8.Instance = TIM8;
 800dc6c:	4d2f      	ldr	r5, [pc, #188]	; (800dd2c <main+0x2c8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dc6e:	9004      	str	r0, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800dc70:	4601      	mov	r1, r0
 800dc72:	2220      	movs	r2, #32
 800dc74:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dc76:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800dc7a:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc7c:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dc7e:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800dc82:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800dc86:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800dc8a:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc8c:	9403      	str	r4, [sp, #12]
  htim8.Init.Prescaler = 168-1;
 800dc8e:	26a7      	movs	r6, #167	; 0xa7
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800dc90:	f004 f8d5 	bl	8011e3e <memset>
  htim8.Instance = TIM8;
 800dc94:	4926      	ldr	r1, [pc, #152]	; (800dd30 <main+0x2cc>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc96:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 50-1;
 800dc98:	2231      	movs	r2, #49	; 0x31
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800dc9a:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800dc9c:	4628      	mov	r0, r5
  htim8.Init.RepetitionCounter = 0;
 800dc9e:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim8.Instance = TIM8;
 800dca2:	6029      	str	r1, [r5, #0]
  htim8.Init.Period = 50-1;
 800dca4:	60ea      	str	r2, [r5, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800dca6:	61ab      	str	r3, [r5, #24]
  htim8.Init.Prescaler = 168-1;
 800dca8:	606e      	str	r6, [r5, #4]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800dcaa:	f003 fa59 	bl	8011160 <HAL_TIM_Base_Init>
 800dcae:	b108      	cbz	r0, 800dcb4 <main+0x250>
 800dcb0:	b672      	cpsid	i
 800dcb2:	e7fe      	b.n	800dcb2 <main+0x24e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dcb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800dcb8:	a904      	add	r1, sp, #16
 800dcba:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dcbc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800dcbe:	f003 f885 	bl	8010dcc <HAL_TIM_ConfigClockSource>
 800dcc2:	b108      	cbz	r0, 800dcc8 <main+0x264>
 800dcc4:	b672      	cpsid	i
 800dcc6:	e7fe      	b.n	800dcc6 <main+0x262>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800dcc8:	4628      	mov	r0, r5
 800dcca:	f003 fa65 	bl	8011198 <HAL_TIM_OC_Init>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	b108      	cbz	r0, 800dcd6 <main+0x272>
 800dcd2:	b672      	cpsid	i
 800dcd4:	e7fe      	b.n	800dcd4 <main+0x270>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800dcd6:	a902      	add	r1, sp, #8
 800dcd8:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dcda:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800dcde:	f003 fc43 	bl	8011568 <HAL_TIMEx_MasterConfigSynchronization>
 800dce2:	b108      	cbz	r0, 800dce8 <main+0x284>
 800dce4:	b672      	cpsid	i
 800dce6:	e7fe      	b.n	800dce6 <main+0x282>
  sConfigOC.Pulse = 25-1;
 800dce8:	2318      	movs	r3, #24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dcea:	4602      	mov	r2, r0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800dcec:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800dcf0:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800dcf4:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800dcf6:	2430      	movs	r4, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dcf8:	a908      	add	r1, sp, #32
 800dcfa:	4628      	mov	r0, r5
  sConfigOC.Pulse = 25-1;
 800dcfc:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800dcfe:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dd00:	f003 fb08 	bl	8011314 <HAL_TIM_OC_ConfigChannel>
 800dd04:	4603      	mov	r3, r0
 800dd06:	b1a8      	cbz	r0, 800dd34 <main+0x2d0>
 800dd08:	b672      	cpsid	i
 800dd0a:	e7fe      	b.n	800dd0a <main+0x2a6>
 800dd0c:	200053c4 	.word	0x200053c4
 800dd10:	20005344 	.word	0x20005344
 800dd14:	20006ba0 	.word	0x20006ba0
 800dd18:	40003c00 	.word	0x40003c00
 800dd1c:	20005384 	.word	0x20005384
 800dd20:	40000c00 	.word	0x40000c00
 800dd24:	20006ad8 	.word	0x20006ad8
 800dd28:	40000800 	.word	0x40000800
 800dd2c:	20006a98 	.word	0x20006a98
 800dd30:	40010400 	.word	0x40010400
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800dd34:	6829      	ldr	r1, [r5, #0]
 800dd36:	698a      	ldr	r2, [r1, #24]
 800dd38:	f042 0208 	orr.w	r2, r2, #8
 800dd3c:	618a      	str	r2, [r1, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800dd3e:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800dd40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800dd44:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800dd46:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 800dd4a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800dd4e:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800dd50:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800dd52:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800dd54:	f003 fc4e 	bl	80115f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800dd58:	4604      	mov	r4, r0
 800dd5a:	b108      	cbz	r0, 800dd60 <main+0x2fc>
 800dd5c:	b672      	cpsid	i
 800dd5e:	e7fe      	b.n	800dd5e <main+0x2fa>
  HAL_TIM_MspPostInit(&htim8);
 800dd60:	4628      	mov	r0, r5
 800dd62:	f000 fa93 	bl	800e28c <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 800dd66:	4b60      	ldr	r3, [pc, #384]	; (800dee8 <main+0x484>)
 800dd68:	4960      	ldr	r1, [pc, #384]	; (800deec <main+0x488>)
  htim1.Init.Prescaler = 168-1;
 800dd6a:	605e      	str	r6, [r3, #4]
  htim1.Init.Period = 1000-1;
 800dd6c:	f240 32e7 	movw	r2, #999	; 0x3e7
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800dd70:	4618      	mov	r0, r3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dd72:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800dd76:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dd7a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd7e:	609c      	str	r4, [r3, #8]
  htim1.Init.RepetitionCounter = 0;
 800dd80:	e9c3 4404 	strd	r4, r4, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dd84:	619c      	str	r4, [r3, #24]
  htim1.Instance = TIM1;
 800dd86:	6019      	str	r1, [r3, #0]
  htim1.Init.Period = 1000-1;
 800dd88:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800dd8a:	f003 f9e9 	bl	8011160 <HAL_TIM_Base_Init>
 800dd8e:	b108      	cbz	r0, 800dd94 <main+0x330>
 800dd90:	b672      	cpsid	i
 800dd92:	e7fe      	b.n	800dd92 <main+0x32e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dd94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800dd98:	a90f      	add	r1, sp, #60	; 0x3c
 800dd9a:	4853      	ldr	r0, [pc, #332]	; (800dee8 <main+0x484>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dd9c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800dd9e:	f003 f815 	bl	8010dcc <HAL_TIM_ConfigClockSource>
 800dda2:	4603      	mov	r3, r0
 800dda4:	b108      	cbz	r0, 800ddaa <main+0x346>
 800dda6:	b672      	cpsid	i
 800dda8:	e7fe      	b.n	800dda8 <main+0x344>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ddaa:	a908      	add	r1, sp, #32
 800ddac:	484e      	ldr	r0, [pc, #312]	; (800dee8 <main+0x484>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ddae:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ddb2:	f003 fbd9 	bl	8011568 <HAL_TIMEx_MasterConfigSynchronization>
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	b108      	cbz	r0, 800ddbe <main+0x35a>
 800ddba:	b672      	cpsid	i
 800ddbc:	e7fe      	b.n	800ddbc <main+0x358>
  PIDSetGain(L_VELO_PID, 16.35,5000,0);
 800ddbe:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 800def0 <main+0x48c>
 800ddc2:	eddf 0a4c 	vldr	s1, [pc, #304]	; 800def4 <main+0x490>
 800ddc6:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800def8 <main+0x494>
	  printf("トップのモード選択\r\n");
 800ddca:	4d4c      	ldr	r5, [pc, #304]	; (800defc <main+0x498>)
  PIDSetGain(L_VELO_PID, 16.35,5000,0);
 800ddcc:	2004      	movs	r0, #4
 800ddce:	f000 ff37 	bl	800ec40 <PIDSetGain>
  PIDSetGain(R_VELO_PID, 16.35,5000,0);
 800ddd2:	ed9f 1a47 	vldr	s2, [pc, #284]	; 800def0 <main+0x48c>
 800ddd6:	eddf 0a47 	vldr	s1, [pc, #284]	; 800def4 <main+0x490>
 800ddda:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800def8 <main+0x494>
 800ddde:	2005      	movs	r0, #5
 800dde0:	f000 ff2e 	bl	800ec40 <PIDSetGain>
  PIDSetGain(A_VELO_PID, 37.5, 80, 0); //42 //P=14.6
 800dde4:	4620      	mov	r0, r4
 800dde6:	ed9f 1a42 	vldr	s2, [pc, #264]	; 800def0 <main+0x48c>
 800ddea:	eddf 0a45 	vldr	s1, [pc, #276]	; 800df00 <main+0x49c>
 800ddee:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800df04 <main+0x4a0>
 800ddf2:	f000 ff25 	bl	800ec40 <PIDSetGain>
  PIDSetGain(F_WALL_PID, 14.6*2.5,0, 0);
 800ddf6:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 800def0 <main+0x48c>
 800ddfa:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800df08 <main+0x4a4>
 800ddfe:	eef0 0a41 	vmov.f32	s1, s2
 800de02:	2008      	movs	r0, #8
 800de04:	f000 ff1c 	bl	800ec40 <PIDSetGain>
  PIDSetGain(D_WALL_PID, 0,0,0);//8,2,0);//8, 4,0);//6, 0,0);
 800de08:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800def0 <main+0x48c>
 800de0c:	2001      	movs	r0, #1
 800de0e:	eef0 0a41 	vmov.f32	s1, s2
 800de12:	eeb0 0a41 	vmov.f32	s0, s2
 800de16:	f000 ff13 	bl	800ec40 <PIDSetGain>
  PIDSetGain(L_WALL_PID, 0,0,0);//14,4,0);//14,8,0);//12, 0,0);
 800de1a:	ed9f 1a35 	vldr	s2, [pc, #212]	; 800def0 <main+0x48c>
 800de1e:	2002      	movs	r0, #2
 800de20:	eef0 0a41 	vmov.f32	s1, s2
 800de24:	eeb0 0a41 	vmov.f32	s0, s2
 800de28:	f000 ff0a 	bl	800ec40 <PIDSetGain>
  PIDSetGain(R_WALL_PID, 0,0,0);//14,4,0);//14,8,0);//12, 0,0);
 800de2c:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800def0 <main+0x48c>
 800de30:	2003      	movs	r0, #3
 800de32:	eef0 0a41 	vmov.f32	s1, s2
 800de36:	eeb0 0a41 	vmov.f32	s0, s2
 800de3a:	f000 ff01 	bl	800ec40 <PIDSetGain>
	  switch( startup_mode )
 800de3e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800de42:	2b07      	cmp	r3, #7
 800de44:	d807      	bhi.n	800de56 <main+0x3f2>
 800de46:	e8df f003 	tbb	[pc, r3]
 800de4a:	2327      	.short	0x2327
 800de4c:	171a1d20 	.word	0x171a1d20
 800de50:	0414      	.short	0x0414
		  WritingFree();
 800de52:	f7fe f885 	bl	800bf60 <WritingFree>
	  printf("トップのモード選択\r\n");
 800de56:	4628      	mov	r0, r5
 800de58:	f005 f8a8 	bl	8012fac <puts>
		ModeSelect(0, 7, &startup_mode);
 800de5c:	f10d 0207 	add.w	r2, sp, #7
 800de60:	2107      	movs	r1, #7
 800de62:	2000      	movs	r0, #0
 800de64:	f000 ffd4 	bl	800ee10 <ModeSelect>
		Signal( startup_mode );
 800de68:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800de6c:	f000 ff64 	bl	800ed38 <Signal>
	  switch( startup_mode )
 800de70:	e7e5      	b.n	800de3e <main+0x3da>
		  Explore();
 800de72:	f7fe fa75 	bl	800c360 <Explore>
		  break;
 800de76:	e7ee      	b.n	800de56 <main+0x3f2>
		  GainTestAVelo();
 800de78:	f7fe f83c 	bl	800bef4 <GainTestAVelo>
		  break;
 800de7c:	e7eb      	b.n	800de56 <main+0x3f2>
		  FastestRun();
 800de7e:	f7fe f8fb 	bl	800c078 <FastestRun>
		  break;
 800de82:	e7e8      	b.n	800de56 <main+0x3f2>
		  Debug();
 800de84:	f7fd feee 	bl	800bc64 <Debug>
		  break;
 800de88:	e7e5      	b.n	800de56 <main+0x3f2>
		  GainTestDWall();
 800de8a:	f7fd ffc1 	bl	800be10 <GainTestDWall>
		  break;
 800de8e:	e7e2      	b.n	800de56 <main+0x3f2>
		  GainSetting(1);
 800de90:	2001      	movs	r0, #1
 800de92:	f7fd ff3d 	bl	800bd10 <GainSetting>
		  break;
 800de96:	e7de      	b.n	800de56 <main+0x3f2>
			IT_mode = EXPLORE;
 800de98:	4b1c      	ldr	r3, [pc, #112]	; (800df0c <main+0x4a8>)
 800de9a:	2206      	movs	r2, #6
 800de9c:	601a      	str	r2, [r3, #0]
			InitExplore();
 800de9e:	f7fd fda5 	bl	800b9ec <InitExplore>
			TotalPulse[RIGHT] = 0;
 800dea2:	4b1b      	ldr	r3, [pc, #108]	; (800df10 <main+0x4ac>)
 800dea4:	2400      	movs	r4, #0
			PIDChangeFlag(L_VELO_PID, 1);
 800dea6:	2101      	movs	r1, #1
 800dea8:	2004      	movs	r0, #4
			TotalPulse[RIGHT] = 0;
 800deaa:	605c      	str	r4, [r3, #4]
			TotalPulse[LEFT] = 0;
 800deac:	601c      	str	r4, [r3, #0]
			TotalPulse[BODY] = 0;
 800deae:	609c      	str	r4, [r3, #8]
			PIDChangeFlag(L_VELO_PID, 1);
 800deb0:	f000 fed4 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(R_VELO_PID, 1);
 800deb4:	2101      	movs	r1, #1
 800deb6:	2005      	movs	r0, #5
 800deb8:	f000 fed0 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800debc:	4621      	mov	r1, r4
 800debe:	2001      	movs	r0, #1
 800dec0:	f000 fecc 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 1);
 800dec4:	2101      	movs	r1, #1
 800dec6:	2002      	movs	r0, #2
 800dec8:	f000 fec8 	bl	800ec5c <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800decc:	4621      	mov	r1, r4
 800dece:	2003      	movs	r0, #3
 800ded0:	f000 fec4 	bl	800ec5c <PIDChangeFlag>
			ExploreVelocity=0;
 800ded4:	4b0f      	ldr	r3, [pc, #60]	; (800df14 <main+0x4b0>)
 800ded6:	2500      	movs	r5, #0
			ChangeLED(1);
 800ded8:	2001      	movs	r0, #1
			ExploreVelocity=0;
 800deda:	601d      	str	r5, [r3, #0]
			ChangeLED(1);
 800dedc:	f000 fd62 	bl	800e9a4 <ChangeLED>
 800dee0:	4b0d      	ldr	r3, [pc, #52]	; (800df18 <main+0x4b4>)
				TargetVelocity[BODY] = 0;
 800dee2:	609d      	str	r5, [r3, #8]
 800dee4:	e7fd      	b.n	800dee2 <main+0x47e>
 800dee6:	bf00      	nop
 800dee8:	20006ce0 	.word	0x20006ce0
 800deec:	40010000 	.word	0x40010000
 800def0:	00000000 	.word	0x00000000
 800def4:	459c4000 	.word	0x459c4000
 800def8:	4182cccd 	.word	0x4182cccd
 800defc:	080165d8 	.word	0x080165d8
 800df00:	42a00000 	.word	0x42a00000
 800df04:	42160000 	.word	0x42160000
 800df08:	42120000 	.word	0x42120000
 800df0c:	2000561c 	.word	0x2000561c
 800df10:	20005660 	.word	0x20005660
 800df14:	200056b4 	.word	0x200056b4
 800df18:	20005630 	.word	0x20005630

0800df1c <Error_Handler>:
 800df1c:	b672      	cpsid	i
 800df1e:	e7fe      	b.n	800df1e <Error_Handler+0x2>

0800df20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800df20:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800df22:	4b0c      	ldr	r3, [pc, #48]	; (800df54 <HAL_MspInit+0x34>)
 800df24:	2100      	movs	r1, #0
 800df26:	9100      	str	r1, [sp, #0]
 800df28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800df2e:	645a      	str	r2, [r3, #68]	; 0x44
 800df30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df32:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800df36:	9200      	str	r2, [sp, #0]
 800df38:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800df3a:	9101      	str	r1, [sp, #4]
 800df3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800df42:	641a      	str	r2, [r3, #64]	; 0x40
 800df44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df4a:	9301      	str	r3, [sp, #4]
 800df4c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800df4e:	b002      	add	sp, #8
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	40023800 	.word	0x40023800

0800df58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800df58:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800df5a:	6803      	ldr	r3, [r0, #0]
 800df5c:	4a47      	ldr	r2, [pc, #284]	; (800e07c <HAL_ADC_MspInit+0x124>)
{
 800df5e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df60:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800df62:	4293      	cmp	r3, r2
{
 800df64:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df66:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800df6a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800df6e:	9409      	str	r4, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 800df70:	d004      	beq.n	800df7c <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800df72:	4a43      	ldr	r2, [pc, #268]	; (800e080 <HAL_ADC_MspInit+0x128>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d04e      	beq.n	800e016 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800df78:	b00b      	add	sp, #44	; 0x2c
 800df7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800df7c:	4b41      	ldr	r3, [pc, #260]	; (800e084 <HAL_ADC_MspInit+0x12c>)
 800df7e:	9400      	str	r4, [sp, #0]
 800df80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 800df82:	4e41      	ldr	r6, [pc, #260]	; (800e088 <HAL_ADC_MspInit+0x130>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800df84:	4841      	ldr	r0, [pc, #260]	; (800e08c <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800df86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800df8a:	645a      	str	r2, [r3, #68]	; 0x44
 800df8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df8e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800df92:	9200      	str	r2, [sp, #0]
 800df94:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800df96:	9401      	str	r4, [sp, #4]
 800df98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df9a:	f042 0204 	orr.w	r2, r2, #4
 800df9e:	631a      	str	r2, [r3, #48]	; 0x30
 800dfa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfa2:	f002 0204 	and.w	r2, r2, #4
 800dfa6:	9201      	str	r2, [sp, #4]
 800dfa8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dfaa:	9402      	str	r4, [sp, #8]
 800dfac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfae:	f042 0202 	orr.w	r2, r2, #2
 800dfb2:	631a      	str	r2, [r3, #48]	; 0x30
 800dfb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfb6:	f003 0302 	and.w	r3, r3, #2
 800dfba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dfbc:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800dfbe:	2311      	movs	r3, #17
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dfc0:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dfc2:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800dfc4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dfc6:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dfc8:	f001 fe28 	bl	800fc1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800dfcc:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dfce:	a905      	add	r1, sp, #20
 800dfd0:	482f      	ldr	r0, [pc, #188]	; (800e090 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800dfd2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfd4:	e9cd 7406 	strd	r7, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dfd8:	f001 fe20 	bl	800fc1c <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800dfdc:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800dfe0:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc1.Instance = DMA2_Stream0;
 800dfe4:	482b      	ldr	r0, [pc, #172]	; (800e094 <HAL_ADC_MspInit+0x13c>)
 800dfe6:	6030      	str	r0, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800dfe8:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800dfec:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800dfee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800dff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800dff6:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800dffa:	4630      	mov	r0, r6
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800dffc:	6137      	str	r7, [r6, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800dffe:	e9c6 1205 	strd	r1, r2, [r6, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800e002:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800e004:	f001 fadc 	bl	800f5c0 <HAL_DMA_Init>
 800e008:	b108      	cbz	r0, 800e00e <HAL_ADC_MspInit+0xb6>
      Error_Handler();
 800e00a:	f7ff ff87 	bl	800df1c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800e00e:	63ae      	str	r6, [r5, #56]	; 0x38
 800e010:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800e012:	b00b      	add	sp, #44	; 0x2c
 800e014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 800e016:	4b1b      	ldr	r3, [pc, #108]	; (800e084 <HAL_ADC_MspInit+0x12c>)
 800e018:	9403      	str	r4, [sp, #12]
 800e01a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc2.Instance = DMA2_Stream2;
 800e01c:	4e1e      	ldr	r6, [pc, #120]	; (800e098 <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e01e:	481b      	ldr	r0, [pc, #108]	; (800e08c <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800e020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e024:	645a      	str	r2, [r3, #68]	; 0x44
 800e026:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e028:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800e02c:	9203      	str	r2, [sp, #12]
 800e02e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e030:	9404      	str	r4, [sp, #16]
 800e032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e034:	f042 0204 	orr.w	r2, r2, #4
 800e038:	631a      	str	r2, [r3, #48]	; 0x30
 800e03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e03c:	f003 0304 	and.w	r3, r3, #4
 800e040:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800e042:	2322      	movs	r3, #34	; 0x22
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e044:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800e046:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e048:	2303      	movs	r3, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e04a:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e04c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e04e:	f001 fde5 	bl	800fc1c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800e052:	4a12      	ldr	r2, [pc, #72]	; (800e09c <HAL_ADC_MspInit+0x144>)
 800e054:	6032      	str	r2, [r6, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800e056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e05a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800e05e:	6073      	str	r3, [r6, #4]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e060:	6130      	str	r0, [r6, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e062:	60b4      	str	r4, [r6, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e064:	60f4      	str	r4, [r6, #12]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e066:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e06a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e06e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800e072:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800e076:	4630      	mov	r0, r6
 800e078:	e7c1      	b.n	800dffe <HAL_ADC_MspInit+0xa6>
 800e07a:	bf00      	nop
 800e07c:	40012000 	.word	0x40012000
 800e080:	40012100 	.word	0x40012100
 800e084:	40023800 	.word	0x40023800
 800e088:	20006c80 	.word	0x20006c80
 800e08c:	40020800 	.word	0x40020800
 800e090:	40020400 	.word	0x40020400
 800e094:	40026410 	.word	0x40026410
 800e098:	20006d20 	.word	0x20006d20
 800e09c:	40026440 	.word	0x40026440

0800e0a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e0a0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI3)
 800e0a2:	6801      	ldr	r1, [r0, #0]
 800e0a4:	4a18      	ldr	r2, [pc, #96]	; (800e108 <HAL_SPI_MspInit+0x68>)
{
 800e0a6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e0a8:	2300      	movs	r3, #0
  if(hspi->Instance==SPI3)
 800e0aa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e0ac:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e0b0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e0b4:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 800e0b6:	d001      	beq.n	800e0bc <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800e0b8:	b008      	add	sp, #32
 800e0ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 800e0bc:	f502 32fe 	add.w	r2, r2, #130048	; 0x1fc00
 800e0c0:	9301      	str	r3, [sp, #4]
 800e0c2:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e0c4:	4811      	ldr	r0, [pc, #68]	; (800e10c <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800e0c6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800e0ca:	6411      	str	r1, [r2, #64]	; 0x40
 800e0cc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e0ce:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
 800e0d2:	9101      	str	r1, [sp, #4]
 800e0d4:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e0d6:	9302      	str	r3, [sp, #8]
 800e0d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e0da:	f043 0304 	orr.w	r3, r3, #4
 800e0de:	6313      	str	r3, [r2, #48]	; 0x30
 800e0e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e0e2:	f003 0304 	and.w	r3, r3, #4
 800e0e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0e8:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800e0ea:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e0ec:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800e0ee:	f44f 55e0 	mov.w	r5, #7168	; 0x1c00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0f2:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e0f4:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0f6:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800e0fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e0fe:	f001 fd8d 	bl	800fc1c <HAL_GPIO_Init>
}
 800e102:	b008      	add	sp, #32
 800e104:	bd70      	pop	{r4, r5, r6, pc}
 800e106:	bf00      	nop
 800e108:	40003c00 	.word	0x40003c00
 800e10c:	40020800 	.word	0x40020800

0800e110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e110:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 800e112:	6803      	ldr	r3, [r0, #0]
 800e114:	4a2b      	ldr	r2, [pc, #172]	; (800e1c4 <HAL_TIM_Base_MspInit+0xb4>)
 800e116:	4293      	cmp	r3, r2
{
 800e118:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 800e11a:	d02a      	beq.n	800e172 <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800e11c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e120:	d008      	beq.n	800e134 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 800e122:	4a29      	ldr	r2, [pc, #164]	; (800e1c8 <HAL_TIM_Base_MspInit+0xb8>)
 800e124:	4293      	cmp	r3, r2
 800e126:	d015      	beq.n	800e154 <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 800e128:	4a28      	ldr	r2, [pc, #160]	; (800e1cc <HAL_TIM_Base_MspInit+0xbc>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d037      	beq.n	800e19e <HAL_TIM_Base_MspInit+0x8e>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800e12e:	b005      	add	sp, #20
 800e130:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e134:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800e138:	2200      	movs	r2, #0
 800e13a:	9201      	str	r2, [sp, #4]
 800e13c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e13e:	f042 0201 	orr.w	r2, r2, #1
 800e142:	641a      	str	r2, [r3, #64]	; 0x40
 800e144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e146:	f003 0301 	and.w	r3, r3, #1
 800e14a:	9301      	str	r3, [sp, #4]
 800e14c:	9b01      	ldr	r3, [sp, #4]
}
 800e14e:	b005      	add	sp, #20
 800e150:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 800e154:	4b1e      	ldr	r3, [pc, #120]	; (800e1d0 <HAL_TIM_Base_MspInit+0xc0>)
 800e156:	2200      	movs	r2, #0
 800e158:	9202      	str	r2, [sp, #8]
 800e15a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e15c:	f042 0208 	orr.w	r2, r2, #8
 800e160:	641a      	str	r2, [r3, #64]	; 0x40
 800e162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e164:	f003 0308 	and.w	r3, r3, #8
 800e168:	9302      	str	r3, [sp, #8]
 800e16a:	9b02      	ldr	r3, [sp, #8]
}
 800e16c:	b005      	add	sp, #20
 800e16e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e172:	2200      	movs	r2, #0
 800e174:	4b16      	ldr	r3, [pc, #88]	; (800e1d0 <HAL_TIM_Base_MspInit+0xc0>)
 800e176:	9200      	str	r2, [sp, #0]
 800e178:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e17a:	f041 0101 	orr.w	r1, r1, #1
 800e17e:	6459      	str	r1, [r3, #68]	; 0x44
 800e180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e182:	f003 0301 	and.w	r3, r3, #1
 800e186:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800e188:	2019      	movs	r0, #25
 800e18a:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e18c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800e18e:	f001 f9b9 	bl	800f504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e192:	2019      	movs	r0, #25
}
 800e194:	b005      	add	sp, #20
 800e196:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800e19a:	f001 b9e9 	b.w	800f570 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800e19e:	4b0c      	ldr	r3, [pc, #48]	; (800e1d0 <HAL_TIM_Base_MspInit+0xc0>)
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	9203      	str	r2, [sp, #12]
 800e1a4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e1a6:	f041 0102 	orr.w	r1, r1, #2
 800e1aa:	6459      	str	r1, [r3, #68]	; 0x44
 800e1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1ae:	f003 0302 	and.w	r3, r3, #2
 800e1b2:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800e1b4:	202c      	movs	r0, #44	; 0x2c
 800e1b6:	2101      	movs	r1, #1
    __HAL_RCC_TIM8_CLK_ENABLE();
 800e1b8:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800e1ba:	f001 f9a3 	bl	800f504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800e1be:	202c      	movs	r0, #44	; 0x2c
 800e1c0:	e7e8      	b.n	800e194 <HAL_TIM_Base_MspInit+0x84>
 800e1c2:	bf00      	nop
 800e1c4:	40010000 	.word	0x40010000
 800e1c8:	40000c00 	.word	0x40000c00
 800e1cc:	40010400 	.word	0x40010400
 800e1d0:	40023800 	.word	0x40023800

0800e1d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800e1d4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM3)
 800e1d6:	6802      	ldr	r2, [r0, #0]
 800e1d8:	4927      	ldr	r1, [pc, #156]	; (800e278 <HAL_TIM_Encoder_MspInit+0xa4>)
{
 800e1da:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1dc:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM3)
 800e1de:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1e0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e1e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800e1e8:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim_encoder->Instance==TIM3)
 800e1ea:	d024      	beq.n	800e236 <HAL_TIM_Encoder_MspInit+0x62>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM4)
 800e1ec:	4923      	ldr	r1, [pc, #140]	; (800e27c <HAL_TIM_Encoder_MspInit+0xa8>)
 800e1ee:	428a      	cmp	r2, r1
 800e1f0:	d001      	beq.n	800e1f6 <HAL_TIM_Encoder_MspInit+0x22>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800e1f2:	b00a      	add	sp, #40	; 0x28
 800e1f4:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e1f6:	4a22      	ldr	r2, [pc, #136]	; (800e280 <HAL_TIM_Encoder_MspInit+0xac>)
 800e1f8:	9303      	str	r3, [sp, #12]
 800e1fa:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e1fc:	4821      	ldr	r0, [pc, #132]	; (800e284 <HAL_TIM_Encoder_MspInit+0xb0>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e1fe:	f041 0104 	orr.w	r1, r1, #4
 800e202:	6411      	str	r1, [r2, #64]	; 0x40
 800e204:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e206:	f001 0104 	and.w	r1, r1, #4
 800e20a:	9103      	str	r1, [sp, #12]
 800e20c:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e20e:	9304      	str	r3, [sp, #16]
 800e210:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e212:	f043 0302 	orr.w	r3, r3, #2
 800e216:	6313      	str	r3, [r2, #48]	; 0x30
 800e218:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e21a:	f003 0302 	and.w	r3, r3, #2
 800e21e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e220:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e222:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e224:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e226:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800e228:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e22a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e22e:	f001 fcf5 	bl	800fc1c <HAL_GPIO_Init>
}
 800e232:	b00a      	add	sp, #40	; 0x28
 800e234:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e236:	4a12      	ldr	r2, [pc, #72]	; (800e280 <HAL_TIM_Encoder_MspInit+0xac>)
 800e238:	9301      	str	r3, [sp, #4]
 800e23a:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e23c:	4812      	ldr	r0, [pc, #72]	; (800e288 <HAL_TIM_Encoder_MspInit+0xb4>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e23e:	f041 0102 	orr.w	r1, r1, #2
 800e242:	6411      	str	r1, [r2, #64]	; 0x40
 800e244:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e246:	f001 0102 	and.w	r1, r1, #2
 800e24a:	9101      	str	r1, [sp, #4]
 800e24c:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e24e:	9302      	str	r3, [sp, #8]
 800e250:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e252:	f043 0301 	orr.w	r3, r3, #1
 800e256:	6313      	str	r3, [r2, #48]	; 0x30
 800e258:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e25a:	f003 0301 	and.w	r3, r3, #1
 800e25e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e260:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e262:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e264:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e266:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e268:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e26a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e26e:	f001 fcd5 	bl	800fc1c <HAL_GPIO_Init>
}
 800e272:	b00a      	add	sp, #40	; 0x28
 800e274:	bd10      	pop	{r4, pc}
 800e276:	bf00      	nop
 800e278:	40000400 	.word	0x40000400
 800e27c:	40000800 	.word	0x40000800
 800e280:	40023800 	.word	0x40023800
 800e284:	40020400 	.word	0x40020400
 800e288:	40020000 	.word	0x40020000

0800e28c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e28c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM2)
 800e28e:	6803      	ldr	r3, [r0, #0]
{
 800e290:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e292:	2400      	movs	r4, #0
  if(htim->Instance==TIM2)
 800e294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e298:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800e29c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800e2a0:	9409      	str	r4, [sp, #36]	; 0x24
  if(htim->Instance==TIM2)
 800e2a2:	d007      	beq.n	800e2b4 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 800e2a4:	4a30      	ldr	r2, [pc, #192]	; (800e368 <HAL_TIM_MspPostInit+0xdc>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d049      	beq.n	800e33e <HAL_TIM_MspPostInit+0xb2>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM8)
 800e2aa:	4a30      	ldr	r2, [pc, #192]	; (800e36c <HAL_TIM_MspPostInit+0xe0>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d01b      	beq.n	800e2e8 <HAL_TIM_MspPostInit+0x5c>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800e2b0:	b00a      	add	sp, #40	; 0x28
 800e2b2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2b4:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800e2b8:	9401      	str	r4, [sp, #4]
 800e2ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2bc:	482c      	ldr	r0, [pc, #176]	; (800e370 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2be:	f042 0201 	orr.w	r2, r2, #1
 800e2c2:	631a      	str	r2, [r3, #48]	; 0x30
 800e2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2c6:	f003 0301 	and.w	r3, r3, #1
 800e2ca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2cc:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e2ce:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2d0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e2d2:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2d4:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2d6:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2d8:	e9cd 5405 	strd	r5, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e2dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2e0:	f001 fc9c 	bl	800fc1c <HAL_GPIO_Init>
}
 800e2e4:	b00a      	add	sp, #40	; 0x28
 800e2e6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2e8:	4b22      	ldr	r3, [pc, #136]	; (800e374 <HAL_TIM_MspPostInit+0xe8>)
 800e2ea:	9403      	str	r4, [sp, #12]
 800e2ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2ee:	4820      	ldr	r0, [pc, #128]	; (800e370 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2f0:	f042 0201 	orr.w	r2, r2, #1
 800e2f4:	631a      	str	r2, [r3, #48]	; 0x30
 800e2f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2f8:	f002 0201 	and.w	r2, r2, #1
 800e2fc:	9203      	str	r2, [sp, #12]
 800e2fe:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e300:	9404      	str	r4, [sp, #16]
 800e302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e304:	f042 0204 	orr.w	r2, r2, #4
 800e308:	631a      	str	r2, [r3, #48]	; 0x30
 800e30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e30c:	f003 0304 	and.w	r3, r3, #4
 800e310:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e312:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800e314:	2320      	movs	r3, #32
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e316:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e318:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e31a:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e31c:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e31e:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e322:	f001 fc7b 	bl	800fc1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e326:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e328:	a905      	add	r1, sp, #20
 800e32a:	4813      	ldr	r0, [pc, #76]	; (800e378 <HAL_TIM_MspPostInit+0xec>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e32c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e32e:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e330:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e334:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e336:	f001 fc71 	bl	800fc1c <HAL_GPIO_Init>
}
 800e33a:	b00a      	add	sp, #40	; 0x28
 800e33c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e33e:	4b0d      	ldr	r3, [pc, #52]	; (800e374 <HAL_TIM_MspPostInit+0xe8>)
 800e340:	9402      	str	r4, [sp, #8]
 800e342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e344:	480a      	ldr	r0, [pc, #40]	; (800e370 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e346:	f042 0201 	orr.w	r2, r2, #1
 800e34a:	631a      	str	r2, [r3, #48]	; 0x30
 800e34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e34e:	f003 0301 	and.w	r3, r3, #1
 800e352:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e354:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e356:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e358:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800e35a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e35c:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e360:	f001 fc5c 	bl	800fc1c <HAL_GPIO_Init>
}
 800e364:	b00a      	add	sp, #40	; 0x28
 800e366:	bd70      	pop	{r4, r5, r6, pc}
 800e368:	40000c00 	.word	0x40000c00
 800e36c:	40010400 	.word	0x40010400
 800e370:	40020000 	.word	0x40020000
 800e374:	40023800 	.word	0x40023800
 800e378:	40020800 	.word	0x40020800

0800e37c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e37c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800e37e:	6801      	ldr	r1, [r0, #0]
 800e380:	4a18      	ldr	r2, [pc, #96]	; (800e3e4 <HAL_UART_MspInit+0x68>)
{
 800e382:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e384:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 800e386:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e388:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e38c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e390:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800e392:	d001      	beq.n	800e398 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800e394:	b008      	add	sp, #32
 800e396:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800e398:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800e39c:	9301      	str	r3, [sp, #4]
 800e39e:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3a0:	4811      	ldr	r0, [pc, #68]	; (800e3e8 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800e3a2:	f041 0110 	orr.w	r1, r1, #16
 800e3a6:	6451      	str	r1, [r2, #68]	; 0x44
 800e3a8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800e3aa:	f001 0110 	and.w	r1, r1, #16
 800e3ae:	9101      	str	r1, [sp, #4]
 800e3b0:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3b2:	9302      	str	r3, [sp, #8]
 800e3b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e3b6:	f043 0301 	orr.w	r3, r3, #1
 800e3ba:	6313      	str	r3, [r2, #48]	; 0x30
 800e3bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e3be:	f003 0301 	and.w	r3, r3, #1
 800e3c2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e3c4:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e3c6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3c8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e3ca:	f44f 65c0 	mov.w	r5, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3ce:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3d0:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3d2:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e3d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3da:	f001 fc1f 	bl	800fc1c <HAL_GPIO_Init>
}
 800e3de:	b008      	add	sp, #32
 800e3e0:	bd70      	pop	{r4, r5, r6, pc}
 800e3e2:	bf00      	nop
 800e3e4:	40011000 	.word	0x40011000
 800e3e8:	40020000 	.word	0x40020000

0800e3ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e3ec:	e7fe      	b.n	800e3ec <NMI_Handler>
 800e3ee:	bf00      	nop

0800e3f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e3f0:	e7fe      	b.n	800e3f0 <HardFault_Handler>
 800e3f2:	bf00      	nop

0800e3f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e3f4:	e7fe      	b.n	800e3f4 <MemManage_Handler>
 800e3f6:	bf00      	nop

0800e3f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e3f8:	e7fe      	b.n	800e3f8 <BusFault_Handler>
 800e3fa:	bf00      	nop

0800e3fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e3fc:	e7fe      	b.n	800e3fc <UsageFault_Handler>
 800e3fe:	bf00      	nop

0800e400 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop

0800e404 <DebugMon_Handler>:
 800e404:	4770      	bx	lr
 800e406:	bf00      	nop

0800e408 <PendSV_Handler>:
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop

0800e40c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e40c:	f000 bdca 	b.w	800efa4 <HAL_IncTick>

0800e410 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e410:	4801      	ldr	r0, [pc, #4]	; (800e418 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800e412:	f002 bd89 	b.w	8010f28 <HAL_TIM_IRQHandler>
 800e416:	bf00      	nop
 800e418:	20006ce0 	.word	0x20006ce0

0800e41c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800e41c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e420:	f001 bd04 	b.w	800fe2c <HAL_GPIO_EXTI_IRQHandler>

0800e424 <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800e424:	4801      	ldr	r0, [pc, #4]	; (800e42c <TIM8_UP_TIM13_IRQHandler+0x8>)
 800e426:	f002 bd7f 	b.w	8010f28 <HAL_TIM_IRQHandler>
 800e42a:	bf00      	nop
 800e42c:	20006a98 	.word	0x20006a98

0800e430 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800e430:	4801      	ldr	r0, [pc, #4]	; (800e438 <DMA2_Stream0_IRQHandler+0x8>)
 800e432:	f001 b9e5 	b.w	800f800 <HAL_DMA_IRQHandler>
 800e436:	bf00      	nop
 800e438:	20006c80 	.word	0x20006c80

0800e43c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800e43c:	4801      	ldr	r0, [pc, #4]	; (800e444 <DMA2_Stream2_IRQHandler+0x8>)
 800e43e:	f001 b9df 	b.w	800f800 <HAL_DMA_IRQHandler>
 800e442:	bf00      	nop
 800e444:	20006d20 	.word	0x20006d20

0800e448 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e448:	4b05      	ldr	r3, [pc, #20]	; (800e460 <SystemInit+0x18>)
 800e44a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e44e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e452:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800e456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e45a:	6099      	str	r1, [r3, #8]
#endif
}
 800e45c:	4770      	bx	lr
 800e45e:	bf00      	nop
 800e460:	e000ed00 	.word	0xe000ed00

0800e464 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e464:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e466:	1e16      	subs	r6, r2, #0
 800e468:	dd07      	ble.n	800e47a <_read+0x16>
 800e46a:	460c      	mov	r4, r1
 800e46c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800e46e:	f7ff fa97 	bl	800d9a0 <__io_getchar>
 800e472:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e476:	42a5      	cmp	r5, r4
 800e478:	d1f9      	bne.n	800e46e <_read+0xa>
	}

return len;
}
 800e47a:	4630      	mov	r0, r6
 800e47c:	bd70      	pop	{r4, r5, r6, pc}
 800e47e:	bf00      	nop

0800e480 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800e480:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e482:	1e16      	subs	r6, r2, #0
 800e484:	dd07      	ble.n	800e496 <_write+0x16>
 800e486:	460c      	mov	r4, r1
 800e488:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800e48a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e48e:	f7ff fa75 	bl	800d97c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e492:	42a5      	cmp	r5, r4
 800e494:	d1f9      	bne.n	800e48a <_write+0xa>
	}
	return len;
}
 800e496:	4630      	mov	r0, r6
 800e498:	bd70      	pop	{r4, r5, r6, pc}
 800e49a:	bf00      	nop

0800e49c <_close>:

int _close(int file)
{
	return -1;
}
 800e49c:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop

0800e4a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800e4a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e4a8:	604b      	str	r3, [r1, #4]
	return 0;
}
 800e4aa:	2000      	movs	r0, #0
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop

0800e4b0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800e4b0:	2001      	movs	r0, #1
 800e4b2:	4770      	bx	lr

0800e4b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	4770      	bx	lr

0800e4b8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e4b8:	490c      	ldr	r1, [pc, #48]	; (800e4ec <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e4ba:	4a0d      	ldr	r2, [pc, #52]	; (800e4f0 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800e4bc:	680b      	ldr	r3, [r1, #0]
{
 800e4be:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e4c0:	4c0c      	ldr	r4, [pc, #48]	; (800e4f4 <_sbrk+0x3c>)
 800e4c2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800e4c4:	b12b      	cbz	r3, 800e4d2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e4c6:	4418      	add	r0, r3
 800e4c8:	4290      	cmp	r0, r2
 800e4ca:	d807      	bhi.n	800e4dc <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800e4cc:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800e4d2:	4b09      	ldr	r3, [pc, #36]	; (800e4f8 <_sbrk+0x40>)
 800e4d4:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800e4d6:	4418      	add	r0, r3
 800e4d8:	4290      	cmp	r0, r2
 800e4da:	d9f7      	bls.n	800e4cc <_sbrk+0x14>
    errno = ENOMEM;
 800e4dc:	f003 fa9c 	bl	8011a18 <__errno>
 800e4e0:	230c      	movs	r3, #12
 800e4e2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800e4e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	bd10      	pop	{r4, pc}
 800e4ec:	20005340 	.word	0x20005340
 800e4f0:	20020000 	.word	0x20020000
 800e4f4:	00000400 	.word	0x00000400
 800e4f8:	20006dc0 	.word	0x20006dc0

0800e4fc <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800e4fc:	b508      	push	{r3, lr}
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800e4fe:	2203      	movs	r2, #3
 800e500:	4909      	ldr	r1, [pc, #36]	; (800e528 <ADCStart+0x2c>)
 800e502:	480a      	ldr	r0, [pc, #40]	; (800e52c <ADCStart+0x30>)
 800e504:	f000 fe24 	bl	800f150 <HAL_ADC_Start_DMA>
 800e508:	b950      	cbnz	r0, 800e520 <ADCStart+0x24>
	{
		Error_Handler();
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800e50a:	2202      	movs	r2, #2
 800e50c:	4908      	ldr	r1, [pc, #32]	; (800e530 <ADCStart+0x34>)
 800e50e:	4809      	ldr	r0, [pc, #36]	; (800e534 <ADCStart+0x38>)
 800e510:	f000 fe1e 	bl	800f150 <HAL_ADC_Start_DMA>
 800e514:	b900      	cbnz	r0, 800e518 <ADCStart+0x1c>
	{
		Error_Handler();
	}

}
 800e516:	bd08      	pop	{r3, pc}
 800e518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 800e51c:	f7ff bcfe 	b.w	800df1c <Error_Handler>
		Error_Handler();
 800e520:	f7ff fcfc 	bl	800df1c <Error_Handler>
 800e524:	e7f1      	b.n	800e50a <ADCStart+0xe>
 800e526:	bf00      	nop
 800e528:	200053c4 	.word	0x200053c4
 800e52c:	20006bf8 	.word	0x20006bf8
 800e530:	200053d0 	.word	0x200053d0
 800e534:	20006b18 	.word	0x20006b18

0800e538 <ADCStop>:
void ADCStop()
{
 800e538:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800e53a:	480e      	ldr	r0, [pc, #56]	; (800e574 <ADCStop+0x3c>)
 800e53c:	f000 feaa 	bl	800f294 <HAL_ADC_Stop_DMA>
 800e540:	b970      	cbnz	r0, 800e560 <ADCStop+0x28>
	{
		printf("な\r\n");
		Error_Handler();
		printf("に\r\n");
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800e542:	480d      	ldr	r0, [pc, #52]	; (800e578 <ADCStop+0x40>)
 800e544:	f000 fea6 	bl	800f294 <HAL_ADC_Stop_DMA>
 800e548:	b900      	cbnz	r0, 800e54c <ADCStop+0x14>
	{
		printf("ぬ\r\n");
		Error_Handler();
		printf("ね\r\n");
	}
}
 800e54a:	bd08      	pop	{r3, pc}
		printf("ぬ\r\n");
 800e54c:	480b      	ldr	r0, [pc, #44]	; (800e57c <ADCStop+0x44>)
 800e54e:	f004 fd2d 	bl	8012fac <puts>
		Error_Handler();
 800e552:	f7ff fce3 	bl	800df1c <Error_Handler>
		printf("ね\r\n");
 800e556:	480a      	ldr	r0, [pc, #40]	; (800e580 <ADCStop+0x48>)
}
 800e558:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printf("ね\r\n");
 800e55c:	f004 bd26 	b.w	8012fac <puts>
		printf("な\r\n");
 800e560:	4808      	ldr	r0, [pc, #32]	; (800e584 <ADCStop+0x4c>)
 800e562:	f004 fd23 	bl	8012fac <puts>
		Error_Handler();
 800e566:	f7ff fcd9 	bl	800df1c <Error_Handler>
		printf("に\r\n");
 800e56a:	4807      	ldr	r0, [pc, #28]	; (800e588 <ADCStop+0x50>)
 800e56c:	f004 fd1e 	bl	8012fac <puts>
 800e570:	e7e7      	b.n	800e542 <ADCStop+0xa>
 800e572:	bf00      	nop
 800e574:	20006bf8 	.word	0x20006bf8
 800e578:	20006b18 	.word	0x20006b18
 800e57c:	08016620 	.word	0x08016620
 800e580:	08016628 	.word	0x08016628
 800e584:	08016610 	.word	0x08016610
 800e588:	08016618 	.word	0x08016618

0800e58c <FLASH_Write_Word>:
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
	FLASH->KEYR =  0x45670123;
 800e58c:	4b10      	ldr	r3, [pc, #64]	; (800e5d0 <FLASH_Write_Word+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800e58e:	4a11      	ldr	r2, [pc, #68]	; (800e5d4 <FLASH_Write_Word+0x48>)

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800e590:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800e592:	4c11      	ldr	r4, [pc, #68]	; (800e5d8 <FLASH_Write_Word+0x4c>)
 800e594:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800e596:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800e598:	68da      	ldr	r2, [r3, #12]
 800e59a:	03d2      	lsls	r2, r2, #15
 800e59c:	d4fc      	bmi.n	800e598 <FLASH_Write_Word+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800e59e:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800e5a0:	4a0b      	ldr	r2, [pc, #44]	; (800e5d0 <FLASH_Write_Word+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800e5a2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800e5a6:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800e5a8:	691c      	ldr	r4, [r3, #16]
 800e5aa:	f044 0401 	orr.w	r4, r4, #1
 800e5ae:	611c      	str	r4, [r3, #16]

	*(__IO uint32_t*)address = data;
 800e5b0:	6001      	str	r1, [r0, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800e5b2:	68d3      	ldr	r3, [r2, #12]
 800e5b4:	03db      	lsls	r3, r3, #15
 800e5b6:	d4fc      	bmi.n	800e5b2 <FLASH_Write_Word+0x26>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800e5b8:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800e5ba:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800e5be:	f023 0301 	bic.w	r3, r3, #1
 800e5c2:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800e5c4:	6913      	ldr	r3, [r2, #16]
 800e5c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e5ca:	6113      	str	r3, [r2, #16]
}
 800e5cc:	4770      	bx	lr
 800e5ce:	bf00      	nop
 800e5d0:	40023c00 	.word	0x40023c00
 800e5d4:	cdef89ab 	.word	0xcdef89ab
 800e5d8:	45670123 	.word	0x45670123

0800e5dc <FLASH_Read_Word>:
	FLASH->KEYR =  0x45670123;
 800e5dc:	4b10      	ldr	r3, [pc, #64]	; (800e620 <FLASH_Read_Word+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800e5de:	4a11      	ldr	r2, [pc, #68]	; (800e624 <FLASH_Read_Word+0x48>)
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800e5e0:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800e5e2:	4c11      	ldr	r4, [pc, #68]	; (800e628 <FLASH_Read_Word+0x4c>)
 800e5e4:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800e5e6:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800e5e8:	68da      	ldr	r2, [r3, #12]
 800e5ea:	03d2      	lsls	r2, r2, #15
 800e5ec:	d4fc      	bmi.n	800e5e8 <FLASH_Read_Word+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800e5ee:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800e5f0:	4a0b      	ldr	r2, [pc, #44]	; (800e620 <FLASH_Read_Word+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800e5f2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800e5f6:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800e5f8:	691c      	ldr	r4, [r3, #16]
 800e5fa:	f044 0401 	orr.w	r4, r4, #1
 800e5fe:	611c      	str	r4, [r3, #16]

	* data = *(__IO uint32_t*)address;
 800e600:	6803      	ldr	r3, [r0, #0]
 800e602:	600b      	str	r3, [r1, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800e604:	68d3      	ldr	r3, [r2, #12]
 800e606:	03db      	lsls	r3, r3, #15
 800e608:	d4fc      	bmi.n	800e604 <FLASH_Read_Word+0x28>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800e60a:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800e60c:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800e610:	f023 0301 	bic.w	r3, r3, #1
 800e614:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800e616:	6913      	ldr	r3, [r2, #16]
 800e618:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e61c:	6113      	str	r3, [r2, #16]
}
 800e61e:	4770      	bx	lr
 800e620:	40023c00 	.word	0x40023c00
 800e624:	cdef89ab 	.word	0xcdef89ab
 800e628:	45670123 	.word	0x45670123

0800e62c <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800e62c:	b530      	push	{r4, r5, lr}
 800e62e:	b087      	sub	sp, #28
    HAL_FLASH_Unlock();
 800e630:	f001 f9f8 	bl	800fa24 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800e634:	2400      	movs	r4, #0
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800e636:	2301      	movs	r3, #1
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800e638:	2202      	movs	r2, #2
    EraseInitStruct.NbSectors = 1;

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800e63a:	4669      	mov	r1, sp
 800e63c:	a801      	add	r0, sp, #4
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800e63e:	9401      	str	r4, [sp, #4]
    EraseInitStruct.NbSectors = 1;
 800e640:	e9cd 3303 	strd	r3, r3, [sp, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800e644:	9205      	str	r2, [sp, #20]
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800e646:	f001 fa87 	bl	800fb58 <HAL_FLASHEx_Erase>
 800e64a:	4605      	mov	r5, r0

    HAL_FLASH_Lock();
 800e64c:	f001 f9fe 	bl	800fa4c <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800e650:	b93d      	cbnz	r5, 800e662 <Flash_clear_sector1+0x36>
 800e652:	9800      	ldr	r0, [sp, #0]
 800e654:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 800e658:	fab0 f080 	clz	r0, r0
 800e65c:	0940      	lsrs	r0, r0, #5
}
 800e65e:	b007      	add	sp, #28
 800e660:	bd30      	pop	{r4, r5, pc}
 800e662:	4620      	mov	r0, r4
 800e664:	b007      	add	sp, #28
 800e666:	bd30      	pop	{r4, r5, pc}

0800e668 <compare_num>:
}


int compare_num(const void * n1, const void * n2)
{
	if (*(int16_t *)n1 > *(int16_t *)n2)
 800e668:	f9b0 2000 	ldrsh.w	r2, [r0]
 800e66c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800e670:	429a      	cmp	r2, r3
 800e672:	dc04      	bgt.n	800e67e <compare_num+0x16>
	{
		return 1;
	}
	else if (*(int16_t *)n1 < *(int16_t *)n2)
 800e674:	bfb4      	ite	lt
 800e676:	f04f 30ff 	movlt.w	r0, #4294967295
 800e67a:	2000      	movge	r0, #0
 800e67c:	4770      	bx	lr
		return 1;
 800e67e:	2001      	movs	r0, #1
	}
	else
	{
		return 0;
	}
}
 800e680:	4770      	bx	lr
 800e682:	bf00      	nop

0800e684 <ReadIMU>:
inline float ReadIMU(uint8_t a, uint8_t b) {
 800e684:	b570      	push	{r4, r5, r6, lr}
	CS_RESET;
 800e686:	4c23      	ldr	r4, [pc, #140]	; (800e714 <ReadIMU+0x90>)
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800e688:	4d23      	ldr	r5, [pc, #140]	; (800e718 <ReadIMU+0x94>)
inline float ReadIMU(uint8_t a, uint8_t b) {
 800e68a:	b082      	sub	sp, #8
	ret2 = ret[1] | 0x80;
 800e68c:	f061 037f 	orn	r3, r1, #127	; 0x7f
	ret1 = ret[0] | 0x80;
 800e690:	f060 067f 	orn	r6, r0, #127	; 0x7f
	CS_RESET;
 800e694:	2200      	movs	r2, #0
 800e696:	4620      	mov	r0, r4
 800e698:	2104      	movs	r1, #4
	ret2 = ret[1] | 0x80;
 800e69a:	f88d 3005 	strb.w	r3, [sp, #5]
	ret1 = ret[0] | 0x80;
 800e69e:	f88d 6004 	strb.w	r6, [sp, #4]
	CS_RESET;
 800e6a2:	f001 fbbf 	bl	800fe24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800e6a6:	a901      	add	r1, sp, #4
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	2364      	movs	r3, #100	; 0x64
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	f002 f873 	bl	8010798 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800e6b2:	2364      	movs	r3, #100	; 0x64
 800e6b4:	f10d 0106 	add.w	r1, sp, #6
 800e6b8:	4628      	mov	r0, r5
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	f002 f92a 	bl	8010914 <HAL_SPI_Receive>
	CS_SET;
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	2104      	movs	r1, #4
 800e6c6:	f001 fbad 	bl	800fe24 <HAL_GPIO_WritePin>
	CS_RESET;
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	2104      	movs	r1, #4
 800e6d0:	f001 fba8 	bl	800fe24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800e6d4:	f10d 0105 	add.w	r1, sp, #5
 800e6d8:	4628      	mov	r0, r5
 800e6da:	2364      	movs	r3, #100	; 0x64
 800e6dc:	2201      	movs	r2, #1
 800e6de:	f002 f85b 	bl	8010798 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800e6e2:	2364      	movs	r3, #100	; 0x64
 800e6e4:	f10d 0107 	add.w	r1, sp, #7
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	f002 f912 	bl	8010914 <HAL_SPI_Receive>
	CS_SET;
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	2104      	movs	r1, #4
 800e6f6:	f001 fb95 	bl	800fe24 <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800e6fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e6fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e702:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	res = (float)law_data;
 800e706:	b21b      	sxth	r3, r3
 800e708:	ee00 3a10 	vmov	s0, r3
}
 800e70c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e710:	b002      	add	sp, #8
 800e712:	bd70      	pop	{r4, r5, r6, pc}
 800e714:	40020c00 	.word	0x40020c00
 800e718:	20006ba0 	.word	0x20006ba0

0800e71c <median_filter>:
int16_t median_filter(int16_t *new_data) //中身変更しないが、値のコピーを避けて速度維持のためにアドレス
{
 800e71c:	b530      	push	{r4, r5, lr}
	filter[cnt+1] = filter[cnt+2];
	filter[cnt+2] = filter[cnt+3];
	filter[cnt+3] = filter[cnt+4];
	filter[cnt+4] = new_data;
#else
	filter[0] = filter[1];
 800e71e:	4c0d      	ldr	r4, [pc, #52]	; (800e754 <median_filter+0x38>)
	filter[1] = filter[2];
	filter[2] = *new_data;//filter[3];
 800e720:	f9b0 1000 	ldrsh.w	r1, [r0]
	filter[1] = filter[2];
 800e724:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
	filter[0] = filter[1];
 800e728:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
	filter[2] = *new_data;//filter[3];
 800e72c:	80a1      	strh	r1, [r4, #4]
{
 800e72e:	b083      	sub	sp, #12
	filter[1] = filter[2];
 800e730:	8060      	strh	r0, [r4, #2]
//	filter[3] = filter[4];
//	filter[4] = *new_data;

	sorted[0] = filter[0];
	sorted[1] = filter[1];
	sorted[2] = *new_data;//filter[2];
 800e732:	f8ad 1004 	strh.w	r1, [sp, #4]
	sorted[1] = filter[1];
 800e736:	f8ad 0002 	strh.w	r0, [sp, #2]
//	sorted[4] = filter[4];
#endif


	//ソートする
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800e73a:	4b07      	ldr	r3, [pc, #28]	; (800e758 <median_filter+0x3c>)
	filter[0] = filter[1];
 800e73c:	8025      	strh	r5, [r4, #0]
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800e73e:	4668      	mov	r0, sp
 800e740:	2202      	movs	r2, #2
 800e742:	2103      	movs	r1, #3
	sorted[0] = filter[0];
 800e744:	f8ad 5000 	strh.w	r5, [sp]
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800e748:	f004 fc70 	bl	801302c <qsort>
	//qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int),compare_num);
	//中央値を返す
	return sorted[1];
}
 800e74c:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 800e750:	b003      	add	sp, #12
 800e752:	bd30      	pop	{r4, r5, pc}
 800e754:	200053dc 	.word	0x200053dc
 800e758:	0800e669 	.word	0x0800e669
 800e75c:	00000000 	.word	0x00000000

0800e760 <Update_IMU>:
//割込み内で呼ぶセット
void Update_IMU(float *angv, float *angle )
{
 800e760:	b5f0      	push	{r4, r5, r6, r7, lr}
				0x38,
		};
		int16_t law_data;
		ret1 = ret[0] | 0x80;
		ret2 = ret[1] | 0x80;
		CS_RESET;
 800e762:	4c3f      	ldr	r4, [pc, #252]	; (800e860 <Update_IMU+0x100>)
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800e764:	4d3f      	ldr	r5, [pc, #252]	; (800e864 <Update_IMU+0x104>)
{
 800e766:	b083      	sub	sp, #12
		ret1 = ret[0] | 0x80;
 800e768:	f04f 0cb7 	mov.w	ip, #183	; 0xb7
{
 800e76c:	460e      	mov	r6, r1
 800e76e:	4607      	mov	r7, r0
		ret2 = ret[1] | 0x80;
 800e770:	23b8      	movs	r3, #184	; 0xb8
		CS_RESET;
 800e772:	4620      	mov	r0, r4
 800e774:	2200      	movs	r2, #0
 800e776:	2104      	movs	r1, #4
		ret1 = ret[0] | 0x80;
 800e778:	f88d c002 	strb.w	ip, [sp, #2]
		ret2 = ret[1] | 0x80;
 800e77c:	f88d 3003 	strb.w	r3, [sp, #3]
		CS_RESET;
 800e780:	f001 fb50 	bl	800fe24 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800e784:	f10d 0102 	add.w	r1, sp, #2
 800e788:	4628      	mov	r0, r5
 800e78a:	2364      	movs	r3, #100	; 0x64
 800e78c:	2201      	movs	r2, #1
 800e78e:	f002 f803 	bl	8010798 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val1,1,100);
 800e792:	2364      	movs	r3, #100	; 0x64
 800e794:	a901      	add	r1, sp, #4
 800e796:	4628      	mov	r0, r5
 800e798:	2201      	movs	r2, #1
 800e79a:	f002 f8bb 	bl	8010914 <HAL_SPI_Receive>
		CS_SET;
 800e79e:	4620      	mov	r0, r4
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	2104      	movs	r1, #4
 800e7a4:	f001 fb3e 	bl	800fe24 <HAL_GPIO_WritePin>

		CS_RESET;
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	2104      	movs	r1, #4
 800e7ae:	f001 fb39 	bl	800fe24 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800e7b2:	f10d 0103 	add.w	r1, sp, #3
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	2364      	movs	r3, #100	; 0x64
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f001 ffec 	bl	8010798 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val2,1,100);
 800e7c0:	2364      	movs	r3, #100	; 0x64
 800e7c2:	f10d 0105 	add.w	r1, sp, #5
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	f002 f8a3 	bl	8010914 <HAL_SPI_Receive>
		CS_SET;
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	2104      	movs	r1, #4
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	f001 fb26 	bl	800fe24 <HAL_GPIO_WritePin>
		law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );
 800e7d8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e7dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e7e0:	a802      	add	r0, sp, #8
 800e7e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7e6:	f820 3d02 	strh.w	r3, [r0, #-2]!

		//static int16_t zg_last=0;
		int16_t zg_median;

		//2000回目で0.17
		zg_median = median_filter(&law_data);
 800e7ea:	f7ff ff97 	bl	800e71c <median_filter>
		ZGFilterd = zg_median;
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800e7ee:	ee07 0a90 	vmov	s15, r0
 800e7f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800e868 <Update_IMU+0x108>
 800e7f6:	4b1d      	ldr	r3, [pc, #116]	; (800e86c <Update_IMU+0x10c>)
		ZGFilterd = zg_median;
 800e7f8:	4a1d      	ldr	r2, [pc, #116]	; (800e870 <Update_IMU+0x110>)
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800e7fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ZGFilterd = zg_median;
 800e7fe:	8010      	strh	r0, [r2, #0]
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800e800:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e804:	edc3 7a00 	vstr	s15, [r3]
		*angv = -((0.01*ZGyro) + (0.99)* (zg_last));
		zg_last = ZGyro;
		//Angle;
		*angle += *angv *0.001;
#else
		*angv = -ZGyro; //角速度 rad / s
 800e808:	edd3 7a00 	vldr	s15, [r3]
 800e80c:	eef1 7a67 	vneg.f32	s15, s15
 800e810:	edc7 7a00 	vstr	s15, [r7]

		//Angle;
		*angle += *angv * 0.001  - 0.000001784;//- 0.0000018432; //角度 rad
 800e814:	ee17 0a90 	vmov	r0, s15
 800e818:	f7f9 fdce 	bl	80083b8 <__aeabi_f2d>
 800e81c:	a30c      	add	r3, pc, #48	; (adr r3, 800e850 <Update_IMU+0xf0>)
 800e81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e822:	f7f9 fe21 	bl	8008468 <__aeabi_dmul>
 800e826:	a30c      	add	r3, pc, #48	; (adr r3, 800e858 <Update_IMU+0xf8>)
 800e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82c:	f7f9 fc64 	bl	80080f8 <__aeabi_dsub>
 800e830:	4604      	mov	r4, r0
 800e832:	6830      	ldr	r0, [r6, #0]
 800e834:	460d      	mov	r5, r1
 800e836:	f7f9 fdbf 	bl	80083b8 <__aeabi_f2d>
 800e83a:	4602      	mov	r2, r0
 800e83c:	460b      	mov	r3, r1
 800e83e:	4620      	mov	r0, r4
 800e840:	4629      	mov	r1, r5
 800e842:	f7f9 fc5b 	bl	80080fc <__adddf3>
 800e846:	f7fa f907 	bl	8008a58 <__aeabi_d2f>
 800e84a:	6030      	str	r0, [r6, #0]
	//*angv = -((0.01*zg_law) + (0.99)* (zg_last));
	zg_last = zg_law;
	//Angle;
	*angle += *angv *0.001;
#endif
}
 800e84c:	b003      	add	sp, #12
 800e84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e850:	d2f1a9fc 	.word	0xd2f1a9fc
 800e854:	3f50624d 	.word	0x3f50624d
 800e858:	be73a9d7 	.word	0xbe73a9d7
 800e85c:	3ebdee38 	.word	0x3ebdee38
 800e860:	40020c00 	.word	0x40020c00
 800e864:	20006ba0 	.word	0x20006ba0
 800e868:	3a8b7d78 	.word	0x3a8b7d78
 800e86c:	200053d8 	.word	0x200053d8
 800e870:	20006d88 	.word	0x20006d88

0800e874 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800e874:	b570      	push	{r4, r5, r6, lr}
 800e876:	b084      	sub	sp, #16
	uint8_t ret;

	ret = reg & 0x7F;
 800e878:	ac04      	add	r4, sp, #16
	CS_RESET;
 800e87a:	4d10      	ldr	r5, [pc, #64]	; (800e8bc <write_byte+0x48>)
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e87c:	4e10      	ldr	r6, [pc, #64]	; (800e8c0 <write_byte+0x4c>)
void write_byte( uint8_t reg, uint8_t val )  {
 800e87e:	f88d 1007 	strb.w	r1, [sp, #7]
	ret = reg & 0x7F;
 800e882:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e886:	f804 0d01 	strb.w	r0, [r4, #-1]!
	CS_RESET;
 800e88a:	2200      	movs	r2, #0
 800e88c:	4628      	mov	r0, r5
 800e88e:	2104      	movs	r1, #4
 800e890:	f001 fac8 	bl	800fe24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e894:	4621      	mov	r1, r4
 800e896:	4630      	mov	r0, r6
 800e898:	2364      	movs	r3, #100	; 0x64
 800e89a:	2201      	movs	r2, #1
 800e89c:	f001 ff7c 	bl	8010798 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800e8a0:	2364      	movs	r3, #100	; 0x64
 800e8a2:	f10d 0107 	add.w	r1, sp, #7
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	f001 ff75 	bl	8010798 <HAL_SPI_Transmit>
	CS_SET;
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	2104      	movs	r1, #4
 800e8b4:	f001 fab6 	bl	800fe24 <HAL_GPIO_WritePin>
}
 800e8b8:	b004      	add	sp, #16
 800e8ba:	bd70      	pop	{r4, r5, r6, pc}
 800e8bc:	40020c00 	.word	0x40020c00
 800e8c0:	20006ba0 	.word	0x20006ba0

0800e8c4 <IMU_init>:

uint8_t IMU_init() {
 800e8c4:	b510      	push	{r4, lr}
 800e8c6:	b082      	sub	sp, #8
	ret = reg | 0x80;
 800e8c8:	ac02      	add	r4, sp, #8
 800e8ca:	2380      	movs	r3, #128	; 0x80
 800e8cc:	f804 3d02 	strb.w	r3, [r4, #-2]!
	CS_RESET;
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	2104      	movs	r1, #4
 800e8d4:	481b      	ldr	r0, [pc, #108]	; (800e944 <IMU_init+0x80>)
 800e8d6:	f001 faa5 	bl	800fe24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e8da:	4621      	mov	r1, r4
 800e8dc:	2364      	movs	r3, #100	; 0x64
 800e8de:	2201      	movs	r2, #1
 800e8e0:	4819      	ldr	r0, [pc, #100]	; (800e948 <IMU_init+0x84>)
 800e8e2:	f001 ff59 	bl	8010798 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800e8e6:	2364      	movs	r3, #100	; 0x64
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	f10d 0107 	add.w	r1, sp, #7
 800e8ee:	4816      	ldr	r0, [pc, #88]	; (800e948 <IMU_init+0x84>)
 800e8f0:	f002 f810 	bl	8010914 <HAL_SPI_Receive>
	CS_SET;
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	2104      	movs	r1, #4
 800e8f8:	4812      	ldr	r0, [pc, #72]	; (800e944 <IMU_init+0x80>)
 800e8fa:	f001 fa93 	bl	800fe24 <HAL_GPIO_WritePin>
	return val;
 800e8fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
	if ( who_am_i == 0xE0 ) {
 800e902:	2be0      	cmp	r3, #224	; 0xe0
 800e904:	d002      	beq.n	800e90c <IMU_init+0x48>
		write_byte(0x7F,0x00);	//USER_BANK0
	}
	return ret;
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 800e906:	2001      	movs	r0, #1
 800e908:	b002      	add	sp, #8
 800e90a:	bd10      	pop	{r4, pc}
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800e90c:	2101      	movs	r1, #1
 800e90e:	2006      	movs	r0, #6
 800e910:	f7ff ffb0 	bl	800e874 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800e914:	2110      	movs	r1, #16
 800e916:	2003      	movs	r0, #3
 800e918:	f7ff ffac 	bl	800e874 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800e91c:	2120      	movs	r1, #32
 800e91e:	207f      	movs	r0, #127	; 0x7f
 800e920:	f7ff ffa8 	bl	800e874 <write_byte>
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800e924:	2117      	movs	r1, #23
 800e926:	2001      	movs	r0, #1
 800e928:	f7ff ffa4 	bl	800e874 <write_byte>
		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 800e92c:	2117      	movs	r1, #23
 800e92e:	2014      	movs	r0, #20
 800e930:	f7ff ffa0 	bl	800e874 <write_byte>
		write_byte(0x7F,0x00);	//USER_BANK0
 800e934:	2100      	movs	r1, #0
 800e936:	207f      	movs	r0, #127	; 0x7f
 800e938:	f7ff ff9c 	bl	800e874 <write_byte>
}
 800e93c:	2001      	movs	r0, #1
 800e93e:	b002      	add	sp, #8
 800e940:	bd10      	pop	{r4, pc}
 800e942:	bf00      	nop
 800e944:	40020c00 	.word	0x40020c00
 800e948:	20006ba0 	.word	0x20006ba0

0800e94c <EncoderStart>:

#include "tim_info.h"
//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800e94c:	b508      	push	{r3, lr}
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800e94e:	213c      	movs	r1, #60	; 0x3c
 800e950:	4804      	ldr	r0, [pc, #16]	; (800e964 <EncoderStart+0x18>)
 800e952:	f002 f9ef 	bl	8010d34 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800e956:	213c      	movs	r1, #60	; 0x3c
 800e958:	4803      	ldr	r0, [pc, #12]	; (800e968 <EncoderStart+0x1c>)
}
 800e95a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800e95e:	f002 b9e9 	b.w	8010d34 <HAL_TIM_Encoder_Start>
 800e962:	bf00      	nop
 800e964:	20006b60 	.word	0x20006b60
 800e968:	20006ad8 	.word	0x20006ad8

0800e96c <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800e96c:	b510      	push	{r4, lr}
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800e96e:	4c05      	ldr	r4, [pc, #20]	; (800e984 <EmitterON+0x18>)
 800e970:	2100      	movs	r1, #0
 800e972:	4620      	mov	r0, r4
 800e974:	f002 f93c 	bl	8010bf0 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e978:	4620      	mov	r0, r4
 800e97a:	2100      	movs	r1, #0

}
 800e97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e980:	f002 bd74 	b.w	801146c <HAL_TIMEx_OCN_Start_IT>
 800e984:	20006a98 	.word	0x20006a98

0800e988 <EmitterOFF>:
void EmitterOFF()
{
 800e988:	b510      	push	{r4, lr}
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800e98a:	4c05      	ldr	r4, [pc, #20]	; (800e9a0 <EmitterOFF+0x18>)
 800e98c:	2100      	movs	r1, #0
 800e98e:	4620      	mov	r0, r4
 800e990:	f002 f976 	bl	8010c80 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e994:	4620      	mov	r0, r4
 800e996:	2100      	movs	r1, #0

}
 800e998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e99c:	f002 bd9a 	b.w	80114d4 <HAL_TIMEx_OCN_Stop_IT>
 800e9a0:	20006a98 	.word	0x20006a98

0800e9a4 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800e9a4:	b508      	push	{r3, lr}
	//Switch
	switch(mode){
 800e9a6:	2807      	cmp	r0, #7
 800e9a8:	d851      	bhi.n	800ea4e <ChangeLED+0xaa>
 800e9aa:	e8df f000 	tbb	[pc, r0]
 800e9ae:	2c18      	.short	0x2c18
 800e9b0:	463e362e 	.word	0x463e362e
 800e9b4:	044e      	.short	0x044e
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);

		break;
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e9bc:	4824      	ldr	r0, [pc, #144]	; (800ea50 <ChangeLED+0xac>)
 800e9be:	f001 fa31 	bl	800fe24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e9c8:	4821      	ldr	r0, [pc, #132]	; (800ea50 <ChangeLED+0xac>)
 800e9ca:	f001 fa2b 	bl	800fe24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e9d4:	481f      	ldr	r0, [pc, #124]	; (800ea54 <ChangeLED+0xb0>)

		break;
	default: break;

	}
}
 800e9d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e9da:	f001 ba23 	b.w	800fe24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e9de:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e9e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e9e4:	481a      	ldr	r0, [pc, #104]	; (800ea50 <ChangeLED+0xac>)
 800e9e6:	f001 fa1d 	bl	800fe24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e9f0:	4817      	ldr	r0, [pc, #92]	; (800ea50 <ChangeLED+0xac>)
 800e9f2:	f001 fa17 	bl	800fe24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e9fc:	4815      	ldr	r0, [pc, #84]	; (800ea54 <ChangeLED+0xb0>)
}
 800e9fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800ea02:	f001 ba0f 	b.w	800fe24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800ea06:	2201      	movs	r2, #1
 800ea08:	e7ea      	b.n	800e9e0 <ChangeLED+0x3c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ea10:	480f      	ldr	r0, [pc, #60]	; (800ea50 <ChangeLED+0xac>)
 800ea12:	f001 fa07 	bl	800fe24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800ea16:	2201      	movs	r2, #1
 800ea18:	e7e8      	b.n	800e9ec <ChangeLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ea20:	480b      	ldr	r0, [pc, #44]	; (800ea50 <ChangeLED+0xac>)
 800ea22:	f001 f9ff 	bl	800fe24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800ea26:	2201      	movs	r2, #1
 800ea28:	e7e0      	b.n	800e9ec <ChangeLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ea30:	4807      	ldr	r0, [pc, #28]	; (800ea50 <ChangeLED+0xac>)
 800ea32:	f001 f9f7 	bl	800fe24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800ea36:	2200      	movs	r2, #0
 800ea38:	e7c4      	b.n	800e9c4 <ChangeLED+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ea40:	4803      	ldr	r0, [pc, #12]	; (800ea50 <ChangeLED+0xac>)
 800ea42:	f001 f9ef 	bl	800fe24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800ea46:	2200      	movs	r2, #0
 800ea48:	e7bc      	b.n	800e9c4 <ChangeLED+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	e7b4      	b.n	800e9b8 <ChangeLED+0x14>
}
 800ea4e:	bd08      	pop	{r3, pc}
 800ea50:	40020800 	.word	0x40020800
 800ea54:	40020400 	.word	0x40020400

0800ea58 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800ea58:	b508      	push	{r3, lr}
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800ea5a:	210c      	movs	r1, #12
 800ea5c:	4808      	ldr	r0, [pc, #32]	; (800ea80 <Motor_PWM_Start+0x28>)
 800ea5e:	f002 f967 	bl	8010d30 <HAL_TIM_PWM_Start>
 800ea62:	b948      	cbnz	r0, 800ea78 <Motor_PWM_Start+0x20>
  {
	  Error_Handler();
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800ea64:	2104      	movs	r1, #4
 800ea66:	4807      	ldr	r0, [pc, #28]	; (800ea84 <Motor_PWM_Start+0x2c>)
 800ea68:	f002 f962 	bl	8010d30 <HAL_TIM_PWM_Start>
 800ea6c:	b900      	cbnz	r0, 800ea70 <Motor_PWM_Start+0x18>
  {
	  Error_Handler();
  }
#endif
}
 800ea6e:	bd08      	pop	{r3, pc}
 800ea70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 800ea74:	f7ff ba52 	b.w	800df1c <Error_Handler>
	  Error_Handler();
 800ea78:	f7ff fa50 	bl	800df1c <Error_Handler>
 800ea7c:	e7f2      	b.n	800ea64 <Motor_PWM_Start+0xc>
 800ea7e:	bf00      	nop
 800ea80:	20005344 	.word	0x20005344
 800ea84:	20005384 	.word	0x20005384

0800ea88 <Motor_Switch>:
  {
	  Error_Handler();
  }
#endif
}
inline void Motor_Switch(int left, int right){
 800ea88:	b570      	push	{r4, r5, r6, lr}
	if (left > 0 ){
 800ea8a:	1e05      	subs	r5, r0, #0
inline void Motor_Switch(int left, int right){
 800ea8c:	460c      	mov	r4, r1
	if (left > 0 ){
 800ea8e:	dc35      	bgt.n	800eafc <Motor_Switch+0x74>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転

	}
	else  if (left < 0){
 800ea90:	d141      	bne.n	800eb16 <Motor_Switch+0x8e>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
		left = -left;
	}
	if (right > 0){
 800ea92:	2c00      	cmp	r4, #0
 800ea94:	dc14      	bgt.n	800eac0 <Motor_Switch+0x38>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転

	}

	else if (right < 0){
 800ea96:	d137      	bne.n	800eb08 <Motor_Switch+0x80>
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
	  	right = -right;
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800ea98:	4628      	mov	r0, r5
 800ea9a:	f7f9 fc7b 	bl	8008394 <__aeabi_i2d>
 800ea9e:	a322      	add	r3, pc, #136	; (adr r3, 800eb28 <Motor_Switch+0xa0>)
 800eaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa4:	f7f9 ff70 	bl	8008988 <__aeabi_dcmpgt>
 800eaa8:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800eaac:	2800      	cmp	r0, #0
 800eaae:	bf18      	it	ne
 800eab0:	461d      	movne	r5, r3
	if(right > 4200*0.6) right = 4200*0.6;


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800eab2:	4a1f      	ldr	r2, [pc, #124]	; (800eb30 <Motor_Switch+0xa8>)
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800eab4:	4b1f      	ldr	r3, [pc, #124]	; (800eb34 <Motor_Switch+0xac>)
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800eab6:	6812      	ldr	r2, [r2, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800eab8:	681b      	ldr	r3, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800eaba:	6394      	str	r4, [r2, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800eabc:	641d      	str	r5, [r3, #64]	; 0x40
}
 800eabe:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800eac0:	2200      	movs	r2, #0
 800eac2:	2101      	movs	r1, #1
 800eac4:	481c      	ldr	r0, [pc, #112]	; (800eb38 <Motor_Switch+0xb0>)
 800eac6:	f001 f9ad 	bl	800fe24 <HAL_GPIO_WritePin>
	if(left > 4200*0.6) left = 4200*0.6;
 800eaca:	4628      	mov	r0, r5
 800eacc:	f7f9 fc62 	bl	8008394 <__aeabi_i2d>
 800ead0:	a315      	add	r3, pc, #84	; (adr r3, 800eb28 <Motor_Switch+0xa0>)
 800ead2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead6:	f7f9 ff57 	bl	8008988 <__aeabi_dcmpgt>
 800eada:	f640 16d8 	movw	r6, #2520	; 0x9d8
 800eade:	2800      	cmp	r0, #0
 800eae0:	bf18      	it	ne
 800eae2:	4635      	movne	r5, r6
	if(right > 4200*0.6) right = 4200*0.6;
 800eae4:	4620      	mov	r0, r4
 800eae6:	f7f9 fc55 	bl	8008394 <__aeabi_i2d>
 800eaea:	a30f      	add	r3, pc, #60	; (adr r3, 800eb28 <Motor_Switch+0xa0>)
 800eaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf0:	f7f9 ff4a 	bl	8008988 <__aeabi_dcmpgt>
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	bf18      	it	ne
 800eaf8:	4634      	movne	r4, r6
 800eafa:	e7da      	b.n	800eab2 <Motor_Switch+0x2a>
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800eafc:	2201      	movs	r2, #1
 800eafe:	2104      	movs	r1, #4
 800eb00:	480d      	ldr	r0, [pc, #52]	; (800eb38 <Motor_Switch+0xb0>)
 800eb02:	f001 f98f 	bl	800fe24 <HAL_GPIO_WritePin>
 800eb06:	e7c4      	b.n	800ea92 <Motor_Switch+0xa>
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800eb08:	2201      	movs	r2, #1
 800eb0a:	4611      	mov	r1, r2
 800eb0c:	480a      	ldr	r0, [pc, #40]	; (800eb38 <Motor_Switch+0xb0>)
 800eb0e:	f001 f989 	bl	800fe24 <HAL_GPIO_WritePin>
	  	right = -right;
 800eb12:	4264      	negs	r4, r4
 800eb14:	e7d9      	b.n	800eaca <Motor_Switch+0x42>
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800eb16:	2200      	movs	r2, #0
 800eb18:	2104      	movs	r1, #4
 800eb1a:	4807      	ldr	r0, [pc, #28]	; (800eb38 <Motor_Switch+0xb0>)
 800eb1c:	f001 f982 	bl	800fe24 <HAL_GPIO_WritePin>
		left = -left;
 800eb20:	426d      	negs	r5, r5
 800eb22:	e7b6      	b.n	800ea92 <Motor_Switch+0xa>
 800eb24:	f3af 8000 	nop.w
 800eb28:	00000000 	.word	0x00000000
 800eb2c:	40a3b000 	.word	0x40a3b000
 800eb30:	20005384 	.word	0x20005384
 800eb34:	20005344 	.word	0x20005344
 800eb38:	40020000 	.word	0x40020000

0800eb3c <InitPulse>:
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
	* timer_counter = initial_pulse;
 800eb3c:	6001      	str	r1, [r0, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800eb3e:	4770      	bx	lr

0800eb40 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800eb40:	b4f0      	push	{r4, r5, r6, r7}
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
	error = abs( last[receiver_num] - raw );
 800eb42:	4e1a      	ldr	r6, [pc, #104]	; (800ebac <GetWallDataAverage+0x6c>)
	last[receiver_num] = raw;
	integrate[receiver_num] += error;

	count[receiver_num]++;
 800eb44:	4c1a      	ldr	r4, [pc, #104]	; (800ebb0 <GetWallDataAverage+0x70>)
	error = abs( last[receiver_num] - raw );
 800eb46:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
	integrate[receiver_num] += error;
 800eb4a:	4d1a      	ldr	r5, [pc, #104]	; (800ebb4 <GetWallDataAverage+0x74>)
	last[receiver_num] = raw;
 800eb4c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800eb50:	1a5b      	subs	r3, r3, r1
	count[receiver_num]++;
 800eb52:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
	integrate[receiver_num] += error;
 800eb56:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	bfb8      	it	lt
 800eb5e:	425b      	neglt	r3, r3
	count[receiver_num]++;
 800eb60:	3101      	adds	r1, #1
	integrate[receiver_num] += error;
 800eb62:	443b      	add	r3, r7
	if(count[receiver_num] == average_of_n_times)
 800eb64:	4281      	cmp	r1, r0
	integrate[receiver_num] += error;
 800eb66:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
	count[receiver_num]++;
 800eb6a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800eb6e:	d006      	beq.n	800eb7e <GetWallDataAverage+0x3e>
 800eb70:	4b11      	ldr	r3, [pc, #68]	; (800ebb8 <GetWallDataAverage+0x78>)
 800eb72:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800eb76:	ed92 0a00 	vldr	s0, [r2]
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
		integrate[receiver_num] = 0;
		count[receiver_num] = 0;
	}
	return average[receiver_num];
}
 800eb7a:	bcf0      	pop	{r4, r5, r6, r7}
 800eb7c:	4770      	bx	lr
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800eb7e:	ee07 3a90 	vmov	s15, r3
 800eb82:	ee07 1a10 	vmov	s14, r1
 800eb86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eb8e:	4b0a      	ldr	r3, [pc, #40]	; (800ebb8 <GetWallDataAverage+0x78>)
 800eb90:	ee87 0a87 	vdiv.f32	s0, s15, s14
		integrate[receiver_num] = 0;
 800eb94:	2100      	movs	r1, #0
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800eb96:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		integrate[receiver_num] = 0;
 800eb9a:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
		count[receiver_num] = 0;
 800eb9e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}
 800eba2:	bcf0      	pop	{r4, r5, r6, r7}
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800eba4:	ed83 0a00 	vstr	s0, [r3]
}
 800eba8:	4770      	bx	lr
 800ebaa:	bf00      	nop
 800ebac:	20005418 	.word	0x20005418
 800ebb0:	200053f8 	.word	0x200053f8
 800ebb4:	20005408 	.word	0x20005408
 800ebb8:	200053e8 	.word	0x200053e8

0800ebbc <ADCToBatteryVoltage>:
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
	float battery_voltage = 0;
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800ebbc:	ee07 0a90 	vmov	s15, r0
 800ebc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebc4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ebc8:	ee20 0a20 	vmul.f32	s0, s0, s1
	return battery_voltage;
}
 800ebcc:	ee80 0a01 	vdiv.f32	s0, s0, s2
 800ebd0:	4770      	bx	lr
 800ebd2:	bf00      	nop

0800ebd4 <IntegerPower>:
//-------------------------//

int IntegerPower(int integer, int exponential)
{
	int pattern_num = 1;
	for(int i=0; i < exponential ; i++)
 800ebd4:	2900      	cmp	r1, #0
 800ebd6:	dd08      	ble.n	800ebea <IntegerPower+0x16>
 800ebd8:	2300      	movs	r3, #0
	int pattern_num = 1;
 800ebda:	2201      	movs	r2, #1
	for(int i=0; i < exponential ; i++)
 800ebdc:	3301      	adds	r3, #1
 800ebde:	4299      	cmp	r1, r3
	{
		pattern_num *= integer;
 800ebe0:	fb00 f202 	mul.w	r2, r0, r2
	for(int i=0; i < exponential ; i++)
 800ebe4:	d1fa      	bne.n	800ebdc <IntegerPower+0x8>
	}
	return pattern_num;
}
 800ebe6:	4610      	mov	r0, r2
 800ebe8:	4770      	bx	lr
	int pattern_num = 1;
 800ebea:	2201      	movs	r2, #1
}
 800ebec:	4610      	mov	r0, r2
 800ebee:	4770      	bx	lr

0800ebf0 <GetBatteryLevel>:

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
	float current_percentage = current_voltage / battery_max;
	float lowest_percentage =  battery_min / battery_max;
 800ebf0:	eec0 0a81 	vdiv.f32	s1, s1, s2

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;

	int pattern = 0;
	for(int i=0; i < level_num; i++)
 800ebf4:	2800      	cmp	r0, #0
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800ebf6:	ee07 0a10 	vmov	s14, r0
 800ebfa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ebfe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ec02:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	float current_percentage = current_voltage / battery_max;
 800ec06:	ee80 0a01 	vdiv.f32	s0, s0, s2
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800ec0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	for(int i=0; i < level_num; i++)
 800ec0e:	dd14      	ble.n	800ec3a <GetBatteryLevel+0x4a>
 800ec10:	2300      	movs	r3, #0
	int pattern = 0;
 800ec12:	461a      	mov	r2, r3
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800ec14:	ee07 3a90 	vmov	s15, r3
 800ec18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec1c:	eef0 6a60 	vmov.f32	s13, s1
 800ec20:	eee7 6a87 	vfma.f32	s13, s15, s14
 800ec24:	eef4 6a40 	vcmp.f32	s13, s0
 800ec28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec2c:	bf98      	it	ls
 800ec2e:	461a      	movls	r2, r3
	for(int i=0; i < level_num; i++)
 800ec30:	3301      	adds	r3, #1
 800ec32:	4298      	cmp	r0, r3
 800ec34:	d1ee      	bne.n	800ec14 <GetBatteryLevel+0x24>
		{
			pattern = i;
		}
	}
	return pattern;
}
 800ec36:	4610      	mov	r0, r2
 800ec38:	4770      	bx	lr
	int pattern = 0;
 800ec3a:	2200      	movs	r2, #0
}
 800ec3c:	4610      	mov	r0, r2
 800ec3e:	4770      	bx	lr

0800ec40 <PIDSetGain>:

const float pid_T = 0.001f;
const float pid_DT = 1.0f/0.001f;
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
	Pid[n].KP = kp;
 800ec40:	4a05      	ldr	r2, [pc, #20]	; (800ec58 <PIDSetGain+0x18>)
 800ec42:	232c      	movs	r3, #44	; 0x2c
 800ec44:	fb03 2000 	mla	r0, r3, r0, r2
 800ec48:	ed80 0a00 	vstr	s0, [r0]
	Pid[n].KI = ki;
 800ec4c:	edc0 0a01 	vstr	s1, [r0, #4]
	Pid[n].KD = kd;
 800ec50:	ed80 1a02 	vstr	s2, [r0, #8]

}
 800ec54:	4770      	bx	lr
 800ec56:	bf00      	nop
 800ec58:	20005428 	.word	0x20005428

0800ec5c <PIDChangeFlag>:

void PIDChangeFlag(int n, int on_or_off)
{
	Pid[n].flag = on_or_off;
 800ec5c:	4a02      	ldr	r2, [pc, #8]	; (800ec68 <PIDChangeFlag+0xc>)
 800ec5e:	232c      	movs	r3, #44	; 0x2c
 800ec60:	fb03 2000 	mla	r0, r3, r0, r2
 800ec64:	6281      	str	r1, [r0, #40]	; 0x28
}
 800ec66:	4770      	bx	lr
 800ec68:	20005428 	.word	0x20005428

0800ec6c <PIDReset>:
	return Pid[n].flag;
}
void PIDReset(int n)
{
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800ec6c:	4905      	ldr	r1, [pc, #20]	; (800ec84 <PIDReset+0x18>)
 800ec6e:	232c      	movs	r3, #44	; 0x2c
 800ec70:	fb03 1000 	mla	r0, r3, r0, r1
 800ec74:	2200      	movs	r2, #0
	Pid[n].ei = 0;
	Pid[n].ed = 0;
	Pid[n].elast = 0;
	Pid[n].out = 0;
 800ec76:	2300      	movs	r3, #0
 800ec78:	6243      	str	r3, [r0, #36]	; 0x24
	Pid[n].e = 0;
 800ec7a:	60c2      	str	r2, [r0, #12]
	Pid[n].ei = 0;
 800ec7c:	6102      	str	r2, [r0, #16]
	Pid[n].ed = 0;
 800ec7e:	6142      	str	r2, [r0, #20]
	Pid[n].elast = 0;
 800ec80:	6182      	str	r2, [r0, #24]
}
 800ec82:	4770      	bx	lr
 800ec84:	20005428 	.word	0x20005428

0800ec88 <PIDControl>:
inline int PIDControl(int n, float target, float current)
{
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800ec88:	4b21      	ldr	r3, [pc, #132]	; (800ed10 <PIDControl+0x88>)
{
 800ec8a:	b510      	push	{r4, lr}
	if(Pid[n].flag == 0)
 800ec8c:	242c      	movs	r4, #44	; 0x2c
 800ec8e:	fb04 3400 	mla	r4, r4, r0, r3
 800ec92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ec94:	b3a8      	cbz	r0, 800ed02 <PIDControl+0x7a>
	else
	{
		Pid[n].target = target;
		Pid[n].current = current;

		Pid[n].e = Pid[n].target - Pid[n].current;
 800ec96:	ee70 6a60 	vsub.f32	s13, s0, s1
		Pid[n].ei += Pid[n].e * pid_T;
 800ec9a:	ed9f 4a1e 	vldr	s8, [pc, #120]	; 800ed14 <PIDControl+0x8c>
 800ec9e:	ed94 6a04 	vldr	s12, [r4, #16]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
		Pid[n].elast = Pid[n].e;
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800eca2:	ed94 7a01 	vldr	s14, [r4, #4]
 800eca6:	ed94 5a00 	vldr	s10, [r4]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800ecaa:	edd4 7a06 	vldr	s15, [r4, #24]
 800ecae:	eddf 4a1a 	vldr	s9, [pc, #104]	; 800ed18 <PIDControl+0x90>
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ecb2:	edd4 5a02 	vldr	s11, [r4, #8]
		Pid[n].e = Pid[n].target - Pid[n].current;
 800ecb6:	edc4 6a03 	vstr	s13, [r4, #12]
		Pid[n].ei += Pid[n].e * pid_T;
 800ecba:	eea6 6a84 	vfma.f32	s12, s13, s8
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800ecbe:	ee76 7ae7 	vsub.f32	s15, s13, s15
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ecc2:	ee26 7a07 	vmul.f32	s14, s12, s14
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800ecc6:	ee67 7aa4 	vmul.f32	s15, s15, s9
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ecca:	eea6 7a85 	vfma.f32	s14, s13, s10
		Pid[n].ei += Pid[n].e * pid_T;
 800ecce:	ed84 6a04 	vstr	s12, [r4, #16]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ecd2:	eea7 7aa5 	vfma.f32	s14, s15, s11
		Pid[n].elast = Pid[n].e;
 800ecd6:	edc4 6a06 	vstr	s13, [r4, #24]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800ecda:	edc4 7a05 	vstr	s15, [r4, #20]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ecde:	ee17 0a10 	vmov	r0, s14
		Pid[n].target = target;
 800ece2:	ed84 0a08 	vstr	s0, [r4, #32]
		Pid[n].current = current;
 800ece6:	edc4 0a07 	vstr	s1, [r4, #28]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ecea:	f7f9 fb65 	bl	80083b8 <__aeabi_f2d>
 800ecee:	ec41 0b10 	vmov	d0, r0, r1
 800ecf2:	f002 fe47 	bl	8011984 <round>
 800ecf6:	ec51 0b10 	vmov	r0, r1, d0
 800ecfa:	f7f9 fe65 	bl	80089c8 <__aeabi_d2iz>
 800ecfe:	6260      	str	r0, [r4, #36]	; 0x24
		return Pid[n].out;
	}
}
 800ed00:	bd10      	pop	{r4, pc}
		Pid[n].e = 0.0f;
 800ed02:	2300      	movs	r3, #0
		Pid[n].out = 0;
 800ed04:	6260      	str	r0, [r4, #36]	; 0x24
		Pid[n].e = 0.0f;
 800ed06:	60e3      	str	r3, [r4, #12]
		Pid[n].ei = 0.0f;
 800ed08:	6123      	str	r3, [r4, #16]
		Pid[n].ed = 0.0f;
 800ed0a:	6163      	str	r3, [r4, #20]
		Pid[n].elast = 0.0f;
 800ed0c:	61a3      	str	r3, [r4, #24]
}
 800ed0e:	bd10      	pop	{r4, pc}
 800ed10:	20005428 	.word	0x20005428
 800ed14:	3a83126f 	.word	0x3a83126f
 800ed18:	4479ffff 	.word	0x4479ffff

0800ed1c <HAL_GPIO_EXTI_Callback>:
#include <stdio.h>
#include <math.h>
//中間モジュール。
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_12)
 800ed1c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800ed20:	d106      	bne.n	800ed30 <HAL_GPIO_EXTI_Callback+0x14>
	{
	  gpio_callback_count++;
 800ed22:	4a04      	ldr	r2, [pc, #16]	; (800ed34 <HAL_GPIO_EXTI_Callback+0x18>)
 800ed24:	6813      	ldr	r3, [r2, #0]
 800ed26:	3301      	adds	r3, #1
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	bfc8      	it	gt
 800ed2c:	2300      	movgt	r3, #0
 800ed2e:	6013      	str	r3, [r2, #0]
	}
}
 800ed30:	4770      	bx	lr
 800ed32:	bf00      	nop
 800ed34:	2000560c 	.word	0x2000560c

0800ed38 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int8_t mode)
{
 800ed38:	b538      	push	{r3, r4, r5, lr}
 800ed3a:	4605      	mov	r5, r0
 800ed3c:	2405      	movs	r4, #5
	for(int i=0; i < 5; i++)
	{
		ChangeLED(mode);
 800ed3e:	4628      	mov	r0, r5
 800ed40:	f7ff fe30 	bl	800e9a4 <ChangeLED>
		HAL_Delay(100);
 800ed44:	2064      	movs	r0, #100	; 0x64
 800ed46:	f000 f93f 	bl	800efc8 <HAL_Delay>
		ChangeLED(0);
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	f7ff fe2a 	bl	800e9a4 <ChangeLED>
		HAL_Delay(100);
 800ed50:	2064      	movs	r0, #100	; 0x64
 800ed52:	f000 f939 	bl	800efc8 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800ed56:	3c01      	subs	r4, #1
 800ed58:	d1f1      	bne.n	800ed3e <Signal+0x6>
	}
}
 800ed5a:	bd38      	pop	{r3, r4, r5, pc}

0800ed5c <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800ed5c:	b510      	push	{r4, lr}

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800ed5e:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800eda8 <BatteryCheck+0x4c>
 800ed62:	eddf 0a12 	vldr	s1, [pc, #72]	; 800edac <BatteryCheck+0x50>
{
 800ed66:	ed2d 8b02 	vpush	{d8}
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800ed6a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800ed6e:	f7ff ff25 	bl	800ebbc <ADCToBatteryVoltage>

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800ed72:	2103      	movs	r1, #3
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800ed74:	eeb0 8a40 	vmov.f32	s16, s0
	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800ed78:	2002      	movs	r0, #2
 800ed7a:	f7ff ff2b 	bl	800ebd4 <IntegerPower>

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800ed7e:	eeb0 0a48 	vmov.f32	s0, s16
 800ed82:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800edb0 <BatteryCheck+0x54>
 800ed86:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800edb4 <BatteryCheck+0x58>
 800ed8a:	f7ff ff31 	bl	800ebf0 <GetBatteryLevel>
 800ed8e:	4604      	mov	r4, r0

	printf("%d\r\n", battery_level);
 800ed90:	4601      	mov	r1, r0
 800ed92:	4809      	ldr	r0, [pc, #36]	; (800edb8 <BatteryCheck+0x5c>)
 800ed94:	f004 f882 	bl	8012e9c <iprintf>
	Signal( battery_level );
}
 800ed98:	ecbd 8b02 	vpop	{d8}
	Signal( battery_level );
 800ed9c:	b260      	sxtb	r0, r4
}
 800ed9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Signal( battery_level );
 800eda2:	f7ff bfc9 	b.w	800ed38 <Signal>
 800eda6:	bf00      	nop
 800eda8:	45800000 	.word	0x45800000
 800edac:	40533333 	.word	0x40533333
 800edb0:	41066666 	.word	0x41066666
 800edb4:	40e66666 	.word	0x40e66666
 800edb8:	080163a8 	.word	0x080163a8

0800edbc <PhotoSwitch>:

//ここ書いたら大事な処理を書き始められる
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。
void PhotoSwitch()
{
 800edbc:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2);
 800edbe:	4c10      	ldr	r4, [pc, #64]	; (800ee00 <PhotoSwitch+0x44>)
 800edc0:	4810      	ldr	r0, [pc, #64]	; (800ee04 <PhotoSwitch+0x48>)
 800edc2:	4621      	mov	r1, r4
 800edc4:	2202      	movs	r2, #2
 800edc6:	f000 f9c3 	bl	800f150 <HAL_ADC_Start_DMA>
	//tim8のduty比を下げて電流消費を削減
	HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1);
 800edca:	2100      	movs	r1, #0
 800edcc:	480e      	ldr	r0, [pc, #56]	; (800ee08 <PhotoSwitch+0x4c>)
 800edce:	f002 fb4d 	bl	801146c <HAL_TIMEx_OCN_Start_IT>

	while(adc2[1] < 200)
 800edd2:	6861      	ldr	r1, [r4, #4]
 800edd4:	29c7      	cmp	r1, #199	; 0xc7
 800edd6:	d806      	bhi.n	800ede6 <PhotoSwitch+0x2a>
	{
		printf("adc2[1] : %lu\r\n", adc2[1]);
 800edd8:	4d0c      	ldr	r5, [pc, #48]	; (800ee0c <PhotoSwitch+0x50>)
 800edda:	4628      	mov	r0, r5
 800eddc:	f004 f85e 	bl	8012e9c <iprintf>
	while(adc2[1] < 200)
 800ede0:	6861      	ldr	r1, [r4, #4]
 800ede2:	29c7      	cmp	r1, #199	; 0xc7
 800ede4:	d9f9      	bls.n	800edda <PhotoSwitch+0x1e>

	}
	HAL_ADC_Stop_DMA(&hadc2);
 800ede6:	4807      	ldr	r0, [pc, #28]	; (800ee04 <PhotoSwitch+0x48>)
 800ede8:	f000 fa54 	bl	800f294 <HAL_ADC_Stop_DMA>
	HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1);
 800edec:	2100      	movs	r1, #0
 800edee:	4806      	ldr	r0, [pc, #24]	; (800ee08 <PhotoSwitch+0x4c>)
 800edf0:	f002 fb70 	bl	80114d4 <HAL_TIMEx_OCN_Stop_IT>
	Signal( 7 );
 800edf4:	2007      	movs	r0, #7
}
 800edf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Signal( 7 );
 800edfa:	f7ff bf9d 	b.w	800ed38 <Signal>
 800edfe:	bf00      	nop
 800ee00:	200053d0 	.word	0x200053d0
 800ee04:	20006b18 	.word	0x20006b18
 800ee08:	20006a98 	.word	0x20006a98
 800ee0c:	08016638 	.word	0x08016638

0800ee10 <ModeSelect>:

void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800ee10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee14:	4606      	mov	r6, r0
 800ee16:	ed2d 8b04 	vpush	{d8-d9}
 800ee1a:	460f      	mov	r7, r1
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ

	//エンコーダ開始。初期値セット込み
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ee1c:	4828      	ldr	r0, [pc, #160]	; (800eec0 <ModeSelect+0xb0>)
	*pMode=min;

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	TIM3->CNT = INITIAL_PULSE;
	gpio_callback_count = 0;
 800ee1e:	4c29      	ldr	r4, [pc, #164]	; (800eec4 <ModeSelect+0xb4>)
	{
		//printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800ee20:	ed9f 9a29 	vldr	s18, [pc, #164]	; 800eec8 <ModeSelect+0xb8>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800ee24:	eddf 8a29 	vldr	s17, [pc, #164]	; 800eecc <ModeSelect+0xbc>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ee28:	2100      	movs	r1, #0
{
 800ee2a:	4690      	mov	r8, r2
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ee2c:	f001 ff82 	bl	8010d34 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 800ee30:	2104      	movs	r1, #4
 800ee32:	4823      	ldr	r0, [pc, #140]	; (800eec0 <ModeSelect+0xb0>)
 800ee34:	f001 ff7e 	bl	8010d34 <HAL_TIM_Encoder_Start>
	TIM3->CNT = INITIAL_PULSE;
 800ee38:	4a25      	ldr	r2, [pc, #148]	; (800eed0 <ModeSelect+0xc0>)
	*pMode=min;
 800ee3a:	f888 6000 	strb.w	r6, [r8]
	TIM3->CNT = INITIAL_PULSE;
 800ee3e:	f247 552f 	movw	r5, #29999	; 0x752f
	gpio_callback_count = 0;
 800ee42:	2300      	movs	r3, #0
	TIM3->CNT = INITIAL_PULSE;
 800ee44:	6255      	str	r5, [r2, #36]	; 0x24
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800ee46:	4691      	mov	r9, r2
	gpio_callback_count = 0;
 800ee48:	6023      	str	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800ee4a:	b9eb      	cbnz	r3, 800ee88 <ModeSelect+0x78>
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800ee4c:	ed99 8a09 	vldr	s16, [r9, #36]	; 0x24
		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800ee50:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800ee54:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800ee58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5c:	db0c      	blt.n	800ee78 <ModeSelect+0x68>
		  	  *pMode += 1;
 800ee5e:	f898 0000 	ldrb.w	r0, [r8]
 800ee62:	3001      	adds	r0, #1
 800ee64:	b240      	sxtb	r0, r0
		  		  *pMode = min;
 800ee66:	42b8      	cmp	r0, r7
 800ee68:	bfc8      	it	gt
 800ee6a:	4630      	movgt	r0, r6
 800ee6c:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800ee70:	f7ff fd98 	bl	800e9a4 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800ee74:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800ee78:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ee7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee80:	d910      	bls.n	800eea4 <ModeSelect+0x94>
 800ee82:	6823      	ldr	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d0e1      	beq.n	800ee4c <ModeSelect+0x3c>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;
		  }
	}
	gpio_callback_count = 0;
 800ee88:	2300      	movs	r3, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	480c      	ldr	r0, [pc, #48]	; (800eec0 <ModeSelect+0xb0>)
	gpio_callback_count = 0;
 800ee8e:	6023      	str	r3, [r4, #0]
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800ee90:	f001 ff74 	bl	8010d7c <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
}
 800ee94:	ecbd 8b04 	vpop	{d8-d9}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800ee98:	2104      	movs	r1, #4
 800ee9a:	4809      	ldr	r0, [pc, #36]	; (800eec0 <ModeSelect+0xb0>)
}
 800ee9c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800eea0:	f001 bf6c 	b.w	8010d7c <HAL_TIM_Encoder_Stop>
		  	  *pMode -= 1;
 800eea4:	f898 0000 	ldrb.w	r0, [r8]
 800eea8:	3801      	subs	r0, #1
 800eeaa:	b240      	sxtb	r0, r0
 800eeac:	42b0      	cmp	r0, r6
 800eeae:	bfb8      	it	lt
 800eeb0:	4638      	movlt	r0, r7
 800eeb2:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800eeb6:	f7ff fd75 	bl	800e9a4 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800eeba:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
 800eebe:	e7e0      	b.n	800ee82 <ModeSelect+0x72>
 800eec0:	20006b60 	.word	0x20006b60
 800eec4:	2000560c 	.word	0x2000560c
 800eec8:	47352f00 	.word	0x47352f00
 800eecc:	4654bc00 	.word	0x4654bc00
 800eed0:	40000400 	.word	0x40000400

0800eed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800eed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ef0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800eed8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800eeda:	e003      	b.n	800eee4 <LoopCopyDataInit>

0800eedc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800eedc:	4b0c      	ldr	r3, [pc, #48]	; (800ef10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800eede:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800eee0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800eee2:	3104      	adds	r1, #4

0800eee4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800eee4:	480b      	ldr	r0, [pc, #44]	; (800ef14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800eee6:	4b0c      	ldr	r3, [pc, #48]	; (800ef18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800eee8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800eeea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800eeec:	d3f6      	bcc.n	800eedc <CopyDataInit>
  ldr  r2, =_sbss
 800eeee:	4a0b      	ldr	r2, [pc, #44]	; (800ef1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800eef0:	e002      	b.n	800eef8 <LoopFillZerobss>

0800eef2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800eef2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800eef4:	f842 3b04 	str.w	r3, [r2], #4

0800eef8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800eef8:	4b09      	ldr	r3, [pc, #36]	; (800ef20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800eefa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800eefc:	d3f9      	bcc.n	800eef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800eefe:	f7ff faa3 	bl	800e448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ef02:	f002 ff09 	bl	8011d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ef06:	f7fe fdad 	bl	800da64 <main>
  bx  lr    
 800ef0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ef0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800ef10:	08016978 	.word	0x08016978
  ldr  r0, =_sdata
 800ef14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ef18:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800ef1c:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800ef20:	20006dbc 	.word	0x20006dbc

0800ef24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ef24:	e7fe      	b.n	800ef24 <ADC_IRQHandler>
	...

0800ef28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ef28:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ef2a:	4a0e      	ldr	r2, [pc, #56]	; (800ef64 <HAL_InitTick+0x3c>)
 800ef2c:	4b0e      	ldr	r3, [pc, #56]	; (800ef68 <HAL_InitTick+0x40>)
 800ef2e:	7812      	ldrb	r2, [r2, #0]
 800ef30:	681b      	ldr	r3, [r3, #0]
{
 800ef32:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ef34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ef38:	fbb0 f0f2 	udiv	r0, r0, r2
 800ef3c:	fbb3 f0f0 	udiv	r0, r3, r0
 800ef40:	f000 fb24 	bl	800f58c <HAL_SYSTICK_Config>
 800ef44:	b908      	cbnz	r0, 800ef4a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ef46:	2d0f      	cmp	r5, #15
 800ef48:	d901      	bls.n	800ef4e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800ef4a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800ef4c:	bd38      	pop	{r3, r4, r5, pc}
 800ef4e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ef50:	4602      	mov	r2, r0
 800ef52:	4629      	mov	r1, r5
 800ef54:	f04f 30ff 	mov.w	r0, #4294967295
 800ef58:	f000 fad4 	bl	800f504 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ef5c:	4b03      	ldr	r3, [pc, #12]	; (800ef6c <HAL_InitTick+0x44>)
 800ef5e:	4620      	mov	r0, r4
 800ef60:	601d      	str	r5, [r3, #0]
}
 800ef62:	bd38      	pop	{r3, r4, r5, pc}
 800ef64:	20000010 	.word	0x20000010
 800ef68:	2000000c 	.word	0x2000000c
 800ef6c:	20000014 	.word	0x20000014

0800ef70 <HAL_Init>:
{
 800ef70:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ef72:	4b0b      	ldr	r3, [pc, #44]	; (800efa0 <HAL_Init+0x30>)
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef7a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ef82:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ef8a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ef8c:	2003      	movs	r0, #3
 800ef8e:	f000 faa7 	bl	800f4e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800ef92:	2000      	movs	r0, #0
 800ef94:	f7ff ffc8 	bl	800ef28 <HAL_InitTick>
  HAL_MspInit();
 800ef98:	f7fe ffc2 	bl	800df20 <HAL_MspInit>
}
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	bd08      	pop	{r3, pc}
 800efa0:	40023c00 	.word	0x40023c00

0800efa4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800efa4:	4a03      	ldr	r2, [pc, #12]	; (800efb4 <HAL_IncTick+0x10>)
 800efa6:	4b04      	ldr	r3, [pc, #16]	; (800efb8 <HAL_IncTick+0x14>)
 800efa8:	6811      	ldr	r1, [r2, #0]
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	440b      	add	r3, r1
 800efae:	6013      	str	r3, [r2, #0]
}
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop
 800efb4:	20006d94 	.word	0x20006d94
 800efb8:	20000010 	.word	0x20000010

0800efbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800efbc:	4b01      	ldr	r3, [pc, #4]	; (800efc4 <HAL_GetTick+0x8>)
 800efbe:	6818      	ldr	r0, [r3, #0]
}
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	20006d94 	.word	0x20006d94

0800efc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800efc8:	b538      	push	{r3, r4, r5, lr}
 800efca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800efcc:	f7ff fff6 	bl	800efbc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800efd0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800efd2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800efd4:	d002      	beq.n	800efdc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800efd6:	4b04      	ldr	r3, [pc, #16]	; (800efe8 <HAL_Delay+0x20>)
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800efdc:	f7ff ffee 	bl	800efbc <HAL_GetTick>
 800efe0:	1b40      	subs	r0, r0, r5
 800efe2:	42a0      	cmp	r0, r4
 800efe4:	d3fa      	bcc.n	800efdc <HAL_Delay+0x14>
  {
  }
}
 800efe6:	bd38      	pop	{r3, r4, r5, pc}
 800efe8:	20000010 	.word	0x20000010

0800efec <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800efec:	2800      	cmp	r0, #0
 800efee:	f000 8091 	beq.w	800f114 <HAL_ADC_Init+0x128>
{
 800eff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800eff4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800eff6:	4604      	mov	r4, r0
 800eff8:	2d00      	cmp	r5, #0
 800effa:	f000 8081 	beq.w	800f100 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800effe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f000:	06db      	lsls	r3, r3, #27
 800f002:	d504      	bpl.n	800f00e <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800f004:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800f006:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800f008:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800f00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800f00e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800f010:	494d      	ldr	r1, [pc, #308]	; (800f148 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800f012:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f014:	4d4d      	ldr	r5, [pc, #308]	; (800f14c <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 800f016:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800f01a:	f022 0202 	bic.w	r2, r2, #2
 800f01e:	f042 0202 	orr.w	r2, r2, #2
 800f022:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800f024:	684a      	ldr	r2, [r1, #4]
 800f026:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800f02a:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800f02c:	684a      	ldr	r2, [r1, #4]
 800f02e:	6860      	ldr	r0, [r4, #4]
 800f030:	4302      	orrs	r2, r0
 800f032:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800f034:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800f036:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800f038:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800f03a:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800f03c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800f040:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800f042:	685a      	ldr	r2, [r3, #4]
 800f044:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800f048:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800f04a:	6858      	ldr	r0, [r3, #4]
 800f04c:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800f050:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800f052:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f054:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800f056:	4339      	orrs	r1, r7
 800f058:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800f05a:	6899      	ldr	r1, [r3, #8]
 800f05c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800f060:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800f062:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f064:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800f066:	ea42 0206 	orr.w	r2, r2, r6
 800f06a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f06c:	d054      	beq.n	800f118 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f06e:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800f070:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f072:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800f076:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800f078:	689a      	ldr	r2, [r3, #8]
 800f07a:	4310      	orrs	r0, r2
 800f07c:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f07e:	6899      	ldr	r1, [r3, #8]
 800f080:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800f084:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800f086:	689a      	ldr	r2, [r3, #8]
 800f088:	432a      	orrs	r2, r5
 800f08a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800f08c:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800f08e:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800f090:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800f094:	f021 0102 	bic.w	r1, r1, #2
 800f098:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800f09a:	689a      	ldr	r2, [r3, #8]
 800f09c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800f0a0:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800f0a2:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	d140      	bne.n	800f12a <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800f0a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f0ac:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800f0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800f0b0:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800f0b2:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800f0b6:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800f0b8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800f0bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800f0be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f0c0:	3d01      	subs	r5, #1
 800f0c2:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 800f0c6:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800f0c8:	6898      	ldr	r0, [r3, #8]
 800f0ca:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 800f0ce:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800f0d0:	6899      	ldr	r1, [r3, #8]
 800f0d2:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 800f0d6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800f0d8:	6899      	ldr	r1, [r3, #8]
 800f0da:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800f0de:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800f0e0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800f0e2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800f0e4:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800f0e8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800f0ea:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800f0ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0ee:	f023 0303 	bic.w	r3, r3, #3
 800f0f2:	f043 0301 	orr.w	r3, r3, #1
 800f0f6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 800f100:	f7fe ff2a 	bl	800df58 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800f104:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f106:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800f108:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f10c:	06db      	lsls	r3, r3, #27
 800f10e:	f53f af79 	bmi.w	800f004 <HAL_ADC_Init+0x18>
 800f112:	e77c      	b.n	800f00e <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 800f114:	2001      	movs	r0, #1
}
 800f116:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f118:	689a      	ldr	r2, [r3, #8]
 800f11a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f11e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f120:	689a      	ldr	r2, [r3, #8]
 800f122:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f126:	609a      	str	r2, [r3, #8]
 800f128:	e7b0      	b.n	800f08c <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800f12a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800f12e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800f130:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800f132:	685a      	ldr	r2, [r3, #4]
 800f134:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800f138:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800f13a:	685a      	ldr	r2, [r3, #4]
 800f13c:	3901      	subs	r1, #1
 800f13e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800f142:	605a      	str	r2, [r3, #4]
 800f144:	e7b3      	b.n	800f0ae <HAL_ADC_Init+0xc2>
 800f146:	bf00      	nop
 800f148:	40012300 	.word	0x40012300
 800f14c:	0f000001 	.word	0x0f000001

0800f150 <HAL_ADC_Start_DMA>:
{
 800f150:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800f152:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800f156:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 800f158:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 800f15a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800f15c:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 800f15e:	f000 8081 	beq.w	800f264 <HAL_ADC_Start_DMA+0x114>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800f162:	6805      	ldr	r5, [r0, #0]
 800f164:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 800f166:	2401      	movs	r4, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800f168:	07df      	lsls	r7, r3, #31
  __HAL_LOCK(hadc);
 800f16a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800f16e:	d414      	bmi.n	800f19a <HAL_ADC_Start_DMA+0x4a>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800f170:	4b40      	ldr	r3, [pc, #256]	; (800f274 <HAL_ADC_Start_DMA+0x124>)
 800f172:	4e41      	ldr	r6, [pc, #260]	; (800f278 <HAL_ADC_Start_DMA+0x128>)
 800f174:	681c      	ldr	r4, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 800f176:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800f178:	fba6 6404 	umull	r6, r4, r6, r4
 800f17c:	0ca4      	lsrs	r4, r4, #18
    __HAL_ADC_ENABLE(hadc);
 800f17e:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800f182:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    __HAL_ADC_ENABLE(hadc);
 800f186:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800f188:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800f18a:	9b01      	ldr	r3, [sp, #4]
 800f18c:	b12b      	cbz	r3, 800f19a <HAL_ADC_Start_DMA+0x4a>
      counter--;
 800f18e:	9c01      	ldr	r4, [sp, #4]
 800f190:	3c01      	subs	r4, #1
 800f192:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800f194:	9c01      	ldr	r4, [sp, #4]
 800f196:	2c00      	cmp	r4, #0
 800f198:	d1f9      	bne.n	800f18e <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800f19a:	68ab      	ldr	r3, [r5, #8]
 800f19c:	07de      	lsls	r6, r3, #31
 800f19e:	d543      	bpl.n	800f228 <HAL_ADC_Start_DMA+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 800f1a0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800f1a2:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 800f1a6:	f024 0401 	bic.w	r4, r4, #1
 800f1aa:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800f1ae:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800f1b0:	686b      	ldr	r3, [r5, #4]
 800f1b2:	055c      	lsls	r4, r3, #21
 800f1b4:	d505      	bpl.n	800f1c2 <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800f1b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f1b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f1bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f1c0:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f1c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800f1c4:	4e2d      	ldr	r6, [pc, #180]	; (800f27c <HAL_ADC_Start_DMA+0x12c>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f1c6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800f1ca:	bf1c      	itt	ne
 800f1cc:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 800f1ce:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800f1d2:	6443      	str	r3, [r0, #68]	; 0x44
 800f1d4:	4604      	mov	r4, r0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800f1d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800f1d8:	4613      	mov	r3, r2
    __HAL_UNLOCK(hadc);   
 800f1da:	2700      	movs	r7, #0
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800f1dc:	4a28      	ldr	r2, [pc, #160]	; (800f280 <HAL_ADC_Start_DMA+0x130>)
    __HAL_UNLOCK(hadc);   
 800f1de:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800f1e2:	63c6      	str	r6, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800f1e4:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800f1e6:	4e27      	ldr	r6, [pc, #156]	; (800f284 <HAL_ADC_Start_DMA+0x134>)
 800f1e8:	64c6      	str	r6, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800f1ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800f1ee:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800f1f0:	686e      	ldr	r6, [r5, #4]
 800f1f2:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
 800f1f6:	606e      	str	r6, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800f1f8:	68ae      	ldr	r6, [r5, #8]
 800f1fa:	f446 7680 	orr.w	r6, r6, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800f1fe:	460a      	mov	r2, r1
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800f200:	60ae      	str	r6, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800f202:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800f206:	f000 fa75 	bl	800f6f4 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800f20a:	4b1f      	ldr	r3, [pc, #124]	; (800f288 <HAL_ADC_Start_DMA+0x138>)
 800f20c:	685a      	ldr	r2, [r3, #4]
 800f20e:	06d2      	lsls	r2, r2, #27
 800f210:	d10d      	bne.n	800f22e <HAL_ADC_Start_DMA+0xde>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800f212:	6822      	ldr	r2, [r4, #0]
 800f214:	491d      	ldr	r1, [pc, #116]	; (800f28c <HAL_ADC_Start_DMA+0x13c>)
 800f216:	428a      	cmp	r2, r1
 800f218:	d01b      	beq.n	800f252 <HAL_ADC_Start_DMA+0x102>
 800f21a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800f21e:	428a      	cmp	r2, r1
 800f220:	d023      	beq.n	800f26a <HAL_ADC_Start_DMA+0x11a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800f222:	491b      	ldr	r1, [pc, #108]	; (800f290 <HAL_ADC_Start_DMA+0x140>)
 800f224:	428a      	cmp	r2, r1
 800f226:	d00f      	beq.n	800f248 <HAL_ADC_Start_DMA+0xf8>
  return HAL_OK;
 800f228:	2000      	movs	r0, #0
}
 800f22a:	b003      	add	sp, #12
 800f22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800f22e:	6823      	ldr	r3, [r4, #0]
 800f230:	4a16      	ldr	r2, [pc, #88]	; (800f28c <HAL_ADC_Start_DMA+0x13c>)
 800f232:	4293      	cmp	r3, r2
 800f234:	d1f8      	bne.n	800f228 <HAL_ADC_Start_DMA+0xd8>
 800f236:	6898      	ldr	r0, [r3, #8]
 800f238:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800f23c:	d1f4      	bne.n	800f228 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f23e:	689a      	ldr	r2, [r3, #8]
 800f240:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f244:	609a      	str	r2, [r3, #8]
 800f246:	e7f0      	b.n	800f22a <HAL_ADC_Start_DMA+0xda>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800f248:	685b      	ldr	r3, [r3, #4]
 800f24a:	f003 031f 	and.w	r3, r3, #31
 800f24e:	2b0f      	cmp	r3, #15
 800f250:	d8ea      	bhi.n	800f228 <HAL_ADC_Start_DMA+0xd8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800f252:	6890      	ldr	r0, [r2, #8]
 800f254:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800f258:	d1e6      	bne.n	800f228 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f25a:	6893      	ldr	r3, [r2, #8]
 800f25c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f260:	6093      	str	r3, [r2, #8]
 800f262:	e7e2      	b.n	800f22a <HAL_ADC_Start_DMA+0xda>
  __HAL_LOCK(hadc);
 800f264:	2002      	movs	r0, #2
}
 800f266:	b003      	add	sp, #12
 800f268:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800f26a:	685b      	ldr	r3, [r3, #4]
 800f26c:	06db      	lsls	r3, r3, #27
 800f26e:	d0f0      	beq.n	800f252 <HAL_ADC_Start_DMA+0x102>
 800f270:	e7da      	b.n	800f228 <HAL_ADC_Start_DMA+0xd8>
 800f272:	bf00      	nop
 800f274:	2000000c 	.word	0x2000000c
 800f278:	431bde83 	.word	0x431bde83
 800f27c:	0800f325 	.word	0x0800f325
 800f280:	0800f2fd 	.word	0x0800f2fd
 800f284:	0800f30d 	.word	0x0800f30d
 800f288:	40012300 	.word	0x40012300
 800f28c:	40012000 	.word	0x40012000
 800f290:	40012200 	.word	0x40012200

0800f294 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 800f294:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f298:	2b01      	cmp	r3, #1
 800f29a:	d029      	beq.n	800f2f0 <HAL_ADC_Stop_DMA+0x5c>
  __HAL_ADC_DISABLE(hadc);
 800f29c:	6803      	ldr	r3, [r0, #0]
 800f29e:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800f2a0:	2101      	movs	r1, #1
  __HAL_ADC_DISABLE(hadc);
 800f2a2:	f022 0201 	bic.w	r2, r2, #1
{
 800f2a6:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800f2a8:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800f2ac:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800f2ae:	689a      	ldr	r2, [r3, #8]
 800f2b0:	07d2      	lsls	r2, r2, #31
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	d504      	bpl.n	800f2c0 <HAL_ADC_Stop_DMA+0x2c>
  __HAL_UNLOCK(hadc);
 800f2b6:	2300      	movs	r3, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f2b8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800f2ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f2be:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800f2c0:	689a      	ldr	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800f2c2:	6b80      	ldr	r0, [r0, #56]	; 0x38
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800f2c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f2c8:	609a      	str	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800f2ca:	f000 fa51 	bl	800f770 <HAL_DMA_Abort>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800f2ce:	6822      	ldr	r2, [r4, #0]
 800f2d0:	6853      	ldr	r3, [r2, #4]
 800f2d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f2d6:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800f2d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f2de:	f023 0301 	bic.w	r3, r3, #1
 800f2e2:	f043 0301 	orr.w	r3, r3, #1
 800f2e6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f2ee:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800f2f0:	2002      	movs	r0, #2
}
 800f2f2:	4770      	bx	lr

0800f2f4 <HAL_ADC_ConvCpltCallback>:
 800f2f4:	4770      	bx	lr
 800f2f6:	bf00      	nop

0800f2f8 <HAL_ADC_ConvHalfCpltCallback>:
 800f2f8:	4770      	bx	lr
 800f2fa:	bf00      	nop

0800f2fc <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800f2fc:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800f2fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800f300:	f7ff fffa 	bl	800f2f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f304:	bd08      	pop	{r3, pc}
 800f306:	bf00      	nop

0800f308 <HAL_ADC_ErrorCallback>:
 800f308:	4770      	bx	lr
 800f30a:	bf00      	nop

0800f30c <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f30c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800f30e:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800f310:	2340      	movs	r3, #64	; 0x40
 800f312:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800f314:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f316:	f043 0304 	orr.w	r3, r3, #4
 800f31a:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800f31c:	f7ff fff4 	bl	800f308 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f320:	bd08      	pop	{r3, pc}
 800f322:	bf00      	nop

0800f324 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f324:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f328:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 800f32c:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f32e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f330:	d123      	bne.n	800f37a <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f336:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f338:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f33a:	688a      	ldr	r2, [r1, #8]
 800f33c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800f340:	d117      	bne.n	800f372 <ADC_DMAConvCplt+0x4e>
 800f342:	7e1a      	ldrb	r2, [r3, #24]
 800f344:	b9aa      	cbnz	r2, 800f372 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f346:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f348:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800f34c:	d002      	beq.n	800f354 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800f34e:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f350:	0550      	lsls	r0, r2, #21
 800f352:	d40e      	bmi.n	800f372 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800f354:	684a      	ldr	r2, [r1, #4]
 800f356:	f022 0220 	bic.w	r2, r2, #32
 800f35a:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800f35c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f35e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f362:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f366:	04d1      	lsls	r1, r2, #19
 800f368:	d403      	bmi.n	800f372 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f36a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f36c:	f042 0201 	orr.w	r2, r2, #1
 800f370:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800f372:	4618      	mov	r0, r3
 800f374:	f7ff ffbe 	bl	800f2f4 <HAL_ADC_ConvCpltCallback>
}
 800f378:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800f37a:	06d2      	lsls	r2, r2, #27
 800f37c:	d404      	bmi.n	800f388 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800f380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f386:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 800f388:	4618      	mov	r0, r3
 800f38a:	f7ff ffbd 	bl	800f308 <HAL_ADC_ErrorCallback>
}
 800f38e:	bd10      	pop	{r4, pc}

0800f390 <HAL_ADC_ConfigChannel>:
{
 800f390:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800f392:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800f396:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800f398:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800f39a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800f39c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800f39e:	f000 8095 	beq.w	800f4cc <HAL_ADC_ConfigChannel+0x13c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f3a2:	680d      	ldr	r5, [r1, #0]
 800f3a4:	688a      	ldr	r2, [r1, #8]
 800f3a6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 800f3a8:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f3aa:	2d09      	cmp	r5, #9
 800f3ac:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 800f3ae:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f3b2:	d829      	bhi.n	800f408 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800f3b4:	691c      	ldr	r4, [r3, #16]
 800f3b6:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800f3ba:	f04f 0c07 	mov.w	ip, #7
 800f3be:	fa0c fc06 	lsl.w	ip, ip, r6
 800f3c2:	ea24 040c 	bic.w	r4, r4, ip
 800f3c6:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800f3c8:	691c      	ldr	r4, [r3, #16]
 800f3ca:	fa02 f606 	lsl.w	r6, r2, r6
 800f3ce:	4326      	orrs	r6, r4
 800f3d0:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 800f3d2:	684e      	ldr	r6, [r1, #4]
 800f3d4:	2e06      	cmp	r6, #6
 800f3d6:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800f3da:	d82a      	bhi.n	800f432 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800f3dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f3de:	3a05      	subs	r2, #5
 800f3e0:	241f      	movs	r4, #31
 800f3e2:	4094      	lsls	r4, r2
 800f3e4:	ea21 0104 	bic.w	r1, r1, r4
 800f3e8:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800f3ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f3ec:	fa07 f202 	lsl.w	r2, r7, r2
 800f3f0:	430a      	orrs	r2, r1
 800f3f2:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f3f4:	4a37      	ldr	r2, [pc, #220]	; (800f4d4 <HAL_ADC_ConfigChannel+0x144>)
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	d02d      	beq.n	800f456 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800f400:	4618      	mov	r0, r3
}
 800f402:	b002      	add	sp, #8
 800f404:	bcf0      	pop	{r4, r5, r6, r7}
 800f406:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800f408:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800f40c:	68dc      	ldr	r4, [r3, #12]
 800f40e:	3e1e      	subs	r6, #30
 800f410:	f04f 0c07 	mov.w	ip, #7
 800f414:	fa0c fc06 	lsl.w	ip, ip, r6
 800f418:	ea24 040c 	bic.w	r4, r4, ip
 800f41c:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800f41e:	68dc      	ldr	r4, [r3, #12]
 800f420:	fa02 f606 	lsl.w	r6, r2, r6
 800f424:	4326      	orrs	r6, r4
 800f426:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 800f428:	684e      	ldr	r6, [r1, #4]
 800f42a:	2e06      	cmp	r6, #6
 800f42c:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800f430:	d9d4      	bls.n	800f3dc <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800f432:	2e0c      	cmp	r6, #12
 800f434:	d835      	bhi.n	800f4a2 <HAL_ADC_ConfigChannel+0x112>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800f436:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 800f43a:	211f      	movs	r1, #31
 800f43c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f43e:	40a1      	lsls	r1, r4
 800f440:	ea22 0201 	bic.w	r2, r2, r1
 800f444:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800f446:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f448:	fa07 f204 	lsl.w	r2, r7, r4
 800f44c:	430a      	orrs	r2, r1
 800f44e:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f450:	4a20      	ldr	r2, [pc, #128]	; (800f4d4 <HAL_ADC_ConfigChannel+0x144>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d1d1      	bne.n	800f3fa <HAL_ADC_ConfigChannel+0x6a>
 800f456:	2d12      	cmp	r5, #18
 800f458:	d031      	beq.n	800f4be <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800f45a:	f1a5 0310 	sub.w	r3, r5, #16
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d8cb      	bhi.n	800f3fa <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800f462:	4a1d      	ldr	r2, [pc, #116]	; (800f4d8 <HAL_ADC_ConfigChannel+0x148>)
 800f464:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800f466:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800f468:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f46c:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800f46e:	d1c4      	bne.n	800f3fa <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800f470:	4b1a      	ldr	r3, [pc, #104]	; (800f4dc <HAL_ADC_ConfigChannel+0x14c>)
 800f472:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800f476:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f202 3283 	addw	r2, r2, #899	; 0x383
 800f480:	fba2 2303 	umull	r2, r3, r2, r3
 800f484:	0c9b      	lsrs	r3, r3, #18
 800f486:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f48a:	005b      	lsls	r3, r3, #1
 800f48c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800f48e:	9b01      	ldr	r3, [sp, #4]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d0b2      	beq.n	800f3fa <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800f494:	9b01      	ldr	r3, [sp, #4]
 800f496:	3b01      	subs	r3, #1
 800f498:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800f49a:	9b01      	ldr	r3, [sp, #4]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1f9      	bne.n	800f494 <HAL_ADC_ConfigChannel+0x104>
 800f4a0:	e7ab      	b.n	800f3fa <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800f4a2:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800f4a6:	241f      	movs	r4, #31
 800f4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4aa:	408c      	lsls	r4, r1
 800f4ac:	ea22 0204 	bic.w	r2, r2, r4
 800f4b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800f4b2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800f4b4:	fa07 f201 	lsl.w	r2, r7, r1
 800f4b8:	4322      	orrs	r2, r4
 800f4ba:	62da      	str	r2, [r3, #44]	; 0x2c
 800f4bc:	e79a      	b.n	800f3f4 <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800f4be:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800f4c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f4c6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 800f4ca:	e796      	b.n	800f3fa <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 800f4cc:	2002      	movs	r0, #2
}
 800f4ce:	b002      	add	sp, #8
 800f4d0:	bcf0      	pop	{r4, r5, r6, r7}
 800f4d2:	4770      	bx	lr
 800f4d4:	40012000 	.word	0x40012000
 800f4d8:	40012300 	.word	0x40012300
 800f4dc:	2000000c 	.word	0x2000000c

0800f4e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f4e0:	4a07      	ldr	r2, [pc, #28]	; (800f500 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800f4e2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f4e4:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800f4e8:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f4ea:	0200      	lsls	r0, r0, #8
 800f4ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f4f0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800f4f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800f4f8:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800f4fa:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	e000ed00 	.word	0xe000ed00

0800f504 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f504:	4b18      	ldr	r3, [pc, #96]	; (800f568 <HAL_NVIC_SetPriority+0x64>)
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f50c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f50e:	f1c3 0507 	rsb	r5, r3, #7
 800f512:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f514:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f518:	bf28      	it	cs
 800f51a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f51c:	2c06      	cmp	r4, #6
 800f51e:	d919      	bls.n	800f554 <HAL_NVIC_SetPriority+0x50>
 800f520:	3b03      	subs	r3, #3
 800f522:	f04f 34ff 	mov.w	r4, #4294967295
 800f526:	409c      	lsls	r4, r3
 800f528:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f52c:	f04f 32ff 	mov.w	r2, #4294967295
 800f530:	40aa      	lsls	r2, r5
 800f532:	ea21 0102 	bic.w	r1, r1, r2
 800f536:	fa01 f203 	lsl.w	r2, r1, r3
 800f53a:	4322      	orrs	r2, r4
 800f53c:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800f53e:	2800      	cmp	r0, #0
 800f540:	b2d2      	uxtb	r2, r2
 800f542:	db0a      	blt.n	800f55a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f544:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800f548:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800f54c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800f550:	bc30      	pop	{r4, r5}
 800f552:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f554:	2400      	movs	r4, #0
 800f556:	4623      	mov	r3, r4
 800f558:	e7e8      	b.n	800f52c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f55a:	4b04      	ldr	r3, [pc, #16]	; (800f56c <HAL_NVIC_SetPriority+0x68>)
 800f55c:	f000 000f 	and.w	r0, r0, #15
 800f560:	4403      	add	r3, r0
 800f562:	761a      	strb	r2, [r3, #24]
 800f564:	bc30      	pop	{r4, r5}
 800f566:	4770      	bx	lr
 800f568:	e000ed00 	.word	0xe000ed00
 800f56c:	e000ecfc 	.word	0xe000ecfc

0800f570 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800f570:	2800      	cmp	r0, #0
 800f572:	db07      	blt.n	800f584 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f574:	f000 011f 	and.w	r1, r0, #31
 800f578:	2301      	movs	r3, #1
 800f57a:	0940      	lsrs	r0, r0, #5
 800f57c:	4a02      	ldr	r2, [pc, #8]	; (800f588 <HAL_NVIC_EnableIRQ+0x18>)
 800f57e:	408b      	lsls	r3, r1
 800f580:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f584:	4770      	bx	lr
 800f586:	bf00      	nop
 800f588:	e000e100 	.word	0xe000e100

0800f58c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f58c:	3801      	subs	r0, #1
 800f58e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800f592:	d20e      	bcs.n	800f5b2 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f594:	4b08      	ldr	r3, [pc, #32]	; (800f5b8 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f596:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f598:	4c08      	ldr	r4, [pc, #32]	; (800f5bc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f59a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f59c:	20f0      	movs	r0, #240	; 0xf0
 800f59e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f5a2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f5a4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f5a6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f5a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f5aa:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800f5ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800f5b2:	2001      	movs	r0, #1
 800f5b4:	4770      	bx	lr
 800f5b6:	bf00      	nop
 800f5b8:	e000e010 	.word	0xe000e010
 800f5bc:	e000ed00 	.word	0xe000ed00

0800f5c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c2:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800f5c4:	f7ff fcfa 	bl	800efbc <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f5c8:	2c00      	cmp	r4, #0
 800f5ca:	d054      	beq.n	800f676 <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f5cc:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f5ce:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800f5d0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800f5d4:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 800f5d6:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 800f5d8:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 800f5dc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800f5e0:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 800f5e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f5e4:	e005      	b.n	800f5f2 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f5e6:	f7ff fce9 	bl	800efbc <HAL_GetTick>
 800f5ea:	1b40      	subs	r0, r0, r5
 800f5ec:	2805      	cmp	r0, #5
 800f5ee:	d83b      	bhi.n	800f668 <HAL_DMA_Init+0xa8>
 800f5f0:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	07d1      	lsls	r1, r2, #31
 800f5f6:	d4f6      	bmi.n	800f5e6 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f5f8:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f5fc:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f600:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f602:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 800f604:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f606:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f608:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f60c:	430a      	orrs	r2, r1
 800f60e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800f610:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f612:	4835      	ldr	r0, [pc, #212]	; (800f6e8 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f614:	4332      	orrs	r2, r6
 800f616:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800f618:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f61a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f61c:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f61e:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f620:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f624:	d029      	beq.n	800f67a <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f626:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f628:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f62a:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f62e:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f630:	b2da      	uxtb	r2, r3
 800f632:	482e      	ldr	r0, [pc, #184]	; (800f6ec <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 800f634:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f636:	3a10      	subs	r2, #16
 800f638:	fba0 1202 	umull	r1, r2, r0, r2
 800f63c:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f63e:	492c      	ldr	r1, [pc, #176]	; (800f6f0 <HAL_DMA_Init+0x130>)
 800f640:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f644:	5c89      	ldrb	r1, [r1, r2]
 800f646:	65e1      	str	r1, [r4, #92]	; 0x5c
 800f648:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 800f64c:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f64e:	bf88      	it	hi
 800f650:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f652:	223f      	movs	r2, #63	; 0x3f
 800f654:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 800f656:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f658:	2100      	movs	r1, #0
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f65a:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 800f65c:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f65e:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f660:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800f662:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800f666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f668:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f66a:	2220      	movs	r2, #32
 800f66c:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800f66e:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f670:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800f674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800f676:	2001      	movs	r0, #1
}
 800f678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f67a:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 800f67e:	4301      	orrs	r1, r0
 800f680:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 800f682:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 800f684:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800f686:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800f688:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f68c:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 800f690:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f692:	2800      	cmp	r0, #0
 800f694:	d0cc      	beq.n	800f630 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f696:	b17e      	cbz	r6, 800f6b8 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f698:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800f69c:	d016      	beq.n	800f6cc <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f69e:	2d02      	cmp	r5, #2
 800f6a0:	d903      	bls.n	800f6aa <HAL_DMA_Init+0xea>
 800f6a2:	2d03      	cmp	r5, #3
 800f6a4:	d1c4      	bne.n	800f630 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f6a6:	01c2      	lsls	r2, r0, #7
 800f6a8:	d5c2      	bpl.n	800f630 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800f6aa:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f6ac:	2240      	movs	r2, #64	; 0x40
 800f6ae:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 800f6b0:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 800f6b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800f6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 800f6b8:	2d01      	cmp	r5, #1
 800f6ba:	d003      	beq.n	800f6c4 <HAL_DMA_Init+0x104>
 800f6bc:	d3f3      	bcc.n	800f6a6 <HAL_DMA_Init+0xe6>
 800f6be:	2d02      	cmp	r5, #2
 800f6c0:	d1b6      	bne.n	800f630 <HAL_DMA_Init+0x70>
 800f6c2:	e7f0      	b.n	800f6a6 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f6c4:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800f6c8:	d1b2      	bne.n	800f630 <HAL_DMA_Init+0x70>
 800f6ca:	e7ee      	b.n	800f6aa <HAL_DMA_Init+0xea>
    switch (tmp)
 800f6cc:	2d03      	cmp	r5, #3
 800f6ce:	d8af      	bhi.n	800f630 <HAL_DMA_Init+0x70>
 800f6d0:	a201      	add	r2, pc, #4	; (adr r2, 800f6d8 <HAL_DMA_Init+0x118>)
 800f6d2:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800f6d6:	bf00      	nop
 800f6d8:	0800f6ab 	.word	0x0800f6ab
 800f6dc:	0800f6a7 	.word	0x0800f6a7
 800f6e0:	0800f6ab 	.word	0x0800f6ab
 800f6e4:	0800f6c5 	.word	0x0800f6c5
 800f6e8:	f010803f 	.word	0xf010803f
 800f6ec:	aaaaaaab 	.word	0xaaaaaaab
 800f6f0:	08016648 	.word	0x08016648

0800f6f4 <HAL_DMA_Start_IT>:
{
 800f6f4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800f6f6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800f6fa:	2c01      	cmp	r4, #1
 800f6fc:	d035      	beq.n	800f76a <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 800f6fe:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f702:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800f704:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800f706:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 800f708:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800f70c:	d127      	bne.n	800f75e <HAL_DMA_Start_IT+0x6a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f70e:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800f710:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f712:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800f714:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f718:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f71a:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f71c:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f71e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f722:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f724:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800f726:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 800f728:	bf0a      	itet	eq
 800f72a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800f72c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800f72e:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f730:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 800f732:	bf18      	it	ne
 800f734:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f736:	233f      	movs	r3, #63	; 0x3f
 800f738:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 800f73a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f73c:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f73e:	6823      	ldr	r3, [r4, #0]
 800f740:	f043 0316 	orr.w	r3, r3, #22
 800f744:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800f746:	b11a      	cbz	r2, 800f750 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 800f748:	6823      	ldr	r3, [r4, #0]
 800f74a:	f043 0308 	orr.w	r3, r3, #8
 800f74e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800f750:	6823      	ldr	r3, [r4, #0]
 800f752:	f043 0301 	orr.w	r3, r3, #1
 800f756:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f758:	2000      	movs	r0, #0
}
 800f75a:	bcf0      	pop	{r4, r5, r6, r7}
 800f75c:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 800f75e:	2300      	movs	r3, #0
 800f760:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 800f764:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800f766:	2002      	movs	r0, #2
}
 800f768:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800f76a:	2002      	movs	r0, #2
}
 800f76c:	bcf0      	pop	{r4, r5, r6, r7}
 800f76e:	4770      	bx	lr

0800f770 <HAL_DMA_Abort>:
{
 800f770:	b570      	push	{r4, r5, r6, lr}
 800f772:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f774:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800f776:	f7ff fc21 	bl	800efbc <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f77a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800f77e:	2b02      	cmp	r3, #2
 800f780:	d006      	beq.n	800f790 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f782:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800f784:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f786:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800f788:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800f78c:	2001      	movs	r0, #1
}
 800f78e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f790:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f792:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	f022 0216 	bic.w	r2, r2, #22
 800f79a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f79c:	695a      	ldr	r2, [r3, #20]
 800f79e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f7a2:	4605      	mov	r5, r0
 800f7a4:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f7a6:	b331      	cbz	r1, 800f7f6 <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	f022 0208 	bic.w	r2, r2, #8
 800f7ae:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	f022 0201 	bic.w	r2, r2, #1
 800f7b6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f7b8:	e005      	b.n	800f7c6 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f7ba:	f7ff fbff 	bl	800efbc <HAL_GetTick>
 800f7be:	1b40      	subs	r0, r0, r5
 800f7c0:	2805      	cmp	r0, #5
 800f7c2:	d80f      	bhi.n	800f7e4 <HAL_DMA_Abort+0x74>
 800f7c4:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f013 0301 	ands.w	r3, r3, #1
 800f7cc:	d1f5      	bne.n	800f7ba <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f7ce:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f7d0:	223f      	movs	r2, #63	; 0x3f
 800f7d2:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800f7d4:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f7d6:	60b2      	str	r2, [r6, #8]
  return HAL_OK;
 800f7d8:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 800f7da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800f7de:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 800f7e2:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f7e4:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 800f7e6:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f7e8:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f7ea:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800f7ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f7f0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800f7f4:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f7f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f7f8:	2a00      	cmp	r2, #0
 800f7fa:	d1d5      	bne.n	800f7a8 <HAL_DMA_Abort+0x38>
 800f7fc:	e7d8      	b.n	800f7b0 <HAL_DMA_Abort+0x40>
 800f7fe:	bf00      	nop

0800f800 <HAL_DMA_IRQHandler>:
{
 800f800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f802:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800f804:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f806:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 800f808:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f80a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800f80c:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f80e:	4965      	ldr	r1, [pc, #404]	; (800f9a4 <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f810:	2208      	movs	r2, #8
 800f812:	409a      	lsls	r2, r3
 800f814:	422a      	tst	r2, r5
{
 800f816:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800f818:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f81a:	d003      	beq.n	800f824 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f81c:	6801      	ldr	r1, [r0, #0]
 800f81e:	6808      	ldr	r0, [r1, #0]
 800f820:	0740      	lsls	r0, r0, #29
 800f822:	d459      	bmi.n	800f8d8 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f824:	2201      	movs	r2, #1
 800f826:	409a      	lsls	r2, r3
 800f828:	422a      	tst	r2, r5
 800f82a:	d003      	beq.n	800f834 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f82c:	6821      	ldr	r1, [r4, #0]
 800f82e:	6949      	ldr	r1, [r1, #20]
 800f830:	0608      	lsls	r0, r1, #24
 800f832:	d474      	bmi.n	800f91e <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f834:	2204      	movs	r2, #4
 800f836:	409a      	lsls	r2, r3
 800f838:	422a      	tst	r2, r5
 800f83a:	d003      	beq.n	800f844 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f83c:	6821      	ldr	r1, [r4, #0]
 800f83e:	6809      	ldr	r1, [r1, #0]
 800f840:	0789      	lsls	r1, r1, #30
 800f842:	d466      	bmi.n	800f912 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f844:	2210      	movs	r2, #16
 800f846:	409a      	lsls	r2, r3
 800f848:	422a      	tst	r2, r5
 800f84a:	d003      	beq.n	800f854 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f84c:	6821      	ldr	r1, [r4, #0]
 800f84e:	6808      	ldr	r0, [r1, #0]
 800f850:	0700      	lsls	r0, r0, #28
 800f852:	d44b      	bmi.n	800f8ec <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f854:	2220      	movs	r2, #32
 800f856:	409a      	lsls	r2, r3
 800f858:	422a      	tst	r2, r5
 800f85a:	d014      	beq.n	800f886 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f85c:	6821      	ldr	r1, [r4, #0]
 800f85e:	6808      	ldr	r0, [r1, #0]
 800f860:	06c0      	lsls	r0, r0, #27
 800f862:	d510      	bpl.n	800f886 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f864:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f866:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800f86a:	2a05      	cmp	r2, #5
 800f86c:	d063      	beq.n	800f936 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f86e:	680b      	ldr	r3, [r1, #0]
 800f870:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f874:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f876:	d07e      	beq.n	800f976 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f878:	0319      	lsls	r1, r3, #12
 800f87a:	f140 8089 	bpl.w	800f990 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800f87e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f880:	b10b      	cbz	r3, 800f886 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800f882:	4620      	mov	r0, r4
 800f884:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f886:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f888:	b323      	cbz	r3, 800f8d4 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f88a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f88c:	07da      	lsls	r2, r3, #31
 800f88e:	d51a      	bpl.n	800f8c6 <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 800f890:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800f892:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800f894:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800f898:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f89a:	4943      	ldr	r1, [pc, #268]	; (800f9a8 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 800f89c:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800f8a0:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 800f8a4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f8a6:	0ab6      	lsrs	r6, r6, #10
 800f8a8:	e002      	b.n	800f8b0 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f8aa:	6813      	ldr	r3, [r2, #0]
 800f8ac:	07db      	lsls	r3, r3, #31
 800f8ae:	d504      	bpl.n	800f8ba <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 800f8b0:	9b01      	ldr	r3, [sp, #4]
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	42b3      	cmp	r3, r6
 800f8b6:	9301      	str	r3, [sp, #4]
 800f8b8:	d9f7      	bls.n	800f8aa <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 800f8ba:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 800f8bc:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800f8be:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800f8c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800f8c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f8c8:	b123      	cbz	r3, 800f8d4 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800f8ca:	4620      	mov	r0, r4
}
 800f8cc:	b003      	add	sp, #12
 800f8ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800f8d2:	4718      	bx	r3
}
 800f8d4:	b003      	add	sp, #12
 800f8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f8d8:	6808      	ldr	r0, [r1, #0]
 800f8da:	f020 0004 	bic.w	r0, r0, #4
 800f8de:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f8e0:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f8e2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f8e4:	f042 0201 	orr.w	r2, r2, #1
 800f8e8:	6562      	str	r2, [r4, #84]	; 0x54
 800f8ea:	e79b      	b.n	800f824 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f8ec:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f8ee:	680a      	ldr	r2, [r1, #0]
 800f8f0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f8f4:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f8f6:	d118      	bne.n	800f92a <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f8f8:	05d2      	lsls	r2, r2, #23
 800f8fa:	d403      	bmi.n	800f904 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f8fc:	680a      	ldr	r2, [r1, #0]
 800f8fe:	f022 0208 	bic.w	r2, r2, #8
 800f902:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800f904:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f906:	2a00      	cmp	r2, #0
 800f908:	d0a4      	beq.n	800f854 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800f90a:	4620      	mov	r0, r4
 800f90c:	4790      	blx	r2
 800f90e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800f910:	e7a0      	b.n	800f854 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f912:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f914:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f916:	f042 0204 	orr.w	r2, r2, #4
 800f91a:	6562      	str	r2, [r4, #84]	; 0x54
 800f91c:	e792      	b.n	800f844 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f91e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f920:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f922:	f042 0202 	orr.w	r2, r2, #2
 800f926:	6562      	str	r2, [r4, #84]	; 0x54
 800f928:	e784      	b.n	800f834 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f92a:	0311      	lsls	r1, r2, #12
 800f92c:	d5ea      	bpl.n	800f904 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f92e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f930:	2a00      	cmp	r2, #0
 800f932:	d1ea      	bne.n	800f90a <HAL_DMA_IRQHandler+0x10a>
 800f934:	e78e      	b.n	800f854 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f936:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f938:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f93a:	f022 0216 	bic.w	r2, r2, #22
 800f93e:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f940:	694a      	ldr	r2, [r1, #20]
 800f942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f946:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f948:	b338      	cbz	r0, 800f99a <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f94a:	680a      	ldr	r2, [r1, #0]
 800f94c:	f022 0208 	bic.w	r2, r2, #8
 800f950:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f952:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800f954:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f956:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800f95a:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 800f95c:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f95e:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800f960:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800f964:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800f968:	2900      	cmp	r1, #0
 800f96a:	d0b3      	beq.n	800f8d4 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 800f96c:	4620      	mov	r0, r4
}
 800f96e:	b003      	add	sp, #12
 800f970:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800f974:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f976:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800f97a:	d180      	bne.n	800f87e <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f97c:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800f97e:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f980:	f022 0210 	bic.w	r2, r2, #16
 800f984:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800f986:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800f98a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800f98e:	e776      	b.n	800f87e <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 800f990:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f992:	2b00      	cmp	r3, #0
 800f994:	f47f af75 	bne.w	800f882 <HAL_DMA_IRQHandler+0x82>
 800f998:	e775      	b.n	800f886 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f99a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f99c:	2a00      	cmp	r2, #0
 800f99e:	d1d4      	bne.n	800f94a <HAL_DMA_IRQHandler+0x14a>
 800f9a0:	e7d7      	b.n	800f952 <HAL_DMA_IRQHandler+0x152>
 800f9a2:	bf00      	nop
 800f9a4:	2000000c 	.word	0x2000000c
 800f9a8:	1b4e81b5 	.word	0x1b4e81b5

0800f9ac <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800f9ac:	4b1b      	ldr	r3, [pc, #108]	; (800fa1c <FLASH_SetErrorCode+0x70>)
 800f9ae:	68da      	ldr	r2, [r3, #12]
 800f9b0:	06d1      	lsls	r1, r2, #27
 800f9b2:	d505      	bpl.n	800f9c0 <FLASH_SetErrorCode+0x14>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f9b4:	491a      	ldr	r1, [pc, #104]	; (800fa20 <FLASH_SetErrorCode+0x74>)
 800f9b6:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800f9b8:	2010      	movs	r0, #16
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f9ba:	4302      	orrs	r2, r0
 800f9bc:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800f9be:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800f9c0:	4b16      	ldr	r3, [pc, #88]	; (800fa1c <FLASH_SetErrorCode+0x70>)
 800f9c2:	68da      	ldr	r2, [r3, #12]
 800f9c4:	0692      	lsls	r2, r2, #26
 800f9c6:	d506      	bpl.n	800f9d6 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f9c8:	4915      	ldr	r1, [pc, #84]	; (800fa20 <FLASH_SetErrorCode+0x74>)
 800f9ca:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800f9cc:	2020      	movs	r0, #32
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f9ce:	f042 0208 	orr.w	r2, r2, #8
 800f9d2:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800f9d4:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800f9d6:	4b11      	ldr	r3, [pc, #68]	; (800fa1c <FLASH_SetErrorCode+0x70>)
 800f9d8:	68da      	ldr	r2, [r3, #12]
 800f9da:	0650      	lsls	r0, r2, #25
 800f9dc:	d506      	bpl.n	800f9ec <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800f9de:	4910      	ldr	r1, [pc, #64]	; (800fa20 <FLASH_SetErrorCode+0x74>)
 800f9e0:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800f9e2:	2040      	movs	r0, #64	; 0x40
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800f9e4:	f042 0204 	orr.w	r2, r2, #4
 800f9e8:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800f9ea:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800f9ec:	4b0b      	ldr	r3, [pc, #44]	; (800fa1c <FLASH_SetErrorCode+0x70>)
 800f9ee:	68da      	ldr	r2, [r3, #12]
 800f9f0:	0611      	lsls	r1, r2, #24
 800f9f2:	d506      	bpl.n	800fa02 <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800f9f4:	490a      	ldr	r1, [pc, #40]	; (800fa20 <FLASH_SetErrorCode+0x74>)
 800f9f6:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800f9f8:	2080      	movs	r0, #128	; 0x80
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800f9fa:	f042 0202 	orr.w	r2, r2, #2
 800f9fe:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800fa00:	60d8      	str	r0, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800fa02:	4b06      	ldr	r3, [pc, #24]	; (800fa1c <FLASH_SetErrorCode+0x70>)
 800fa04:	68da      	ldr	r2, [r3, #12]
 800fa06:	0792      	lsls	r2, r2, #30
 800fa08:	d506      	bpl.n	800fa18 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800fa0a:	4905      	ldr	r1, [pc, #20]	; (800fa20 <FLASH_SetErrorCode+0x74>)
 800fa0c:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800fa0e:	2002      	movs	r0, #2
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800fa10:	f042 0220 	orr.w	r2, r2, #32
 800fa14:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800fa16:	60d8      	str	r0, [r3, #12]
  }
}
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	40023c00 	.word	0x40023c00
 800fa20:	20006d98 	.word	0x20006d98

0800fa24 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800fa24:	4b06      	ldr	r3, [pc, #24]	; (800fa40 <HAL_FLASH_Unlock+0x1c>)
 800fa26:	691a      	ldr	r2, [r3, #16]
 800fa28:	2a00      	cmp	r2, #0
 800fa2a:	db01      	blt.n	800fa30 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800fa2c:	2000      	movs	r0, #0
}
 800fa2e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800fa30:	4904      	ldr	r1, [pc, #16]	; (800fa44 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800fa32:	4a05      	ldr	r2, [pc, #20]	; (800fa48 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800fa34:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800fa36:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800fa38:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800fa3a:	0fc0      	lsrs	r0, r0, #31
 800fa3c:	4770      	bx	lr
 800fa3e:	bf00      	nop
 800fa40:	40023c00 	.word	0x40023c00
 800fa44:	45670123 	.word	0x45670123
 800fa48:	cdef89ab 	.word	0xcdef89ab

0800fa4c <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800fa4c:	4a03      	ldr	r2, [pc, #12]	; (800fa5c <HAL_FLASH_Lock+0x10>)
 800fa4e:	6913      	ldr	r3, [r2, #16]
 800fa50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fa54:	6113      	str	r3, [r2, #16]
}
 800fa56:	2000      	movs	r0, #0
 800fa58:	4770      	bx	lr
 800fa5a:	bf00      	nop
 800fa5c:	40023c00 	.word	0x40023c00

0800fa60 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fa60:	4b12      	ldr	r3, [pc, #72]	; (800faac <FLASH_WaitForLastOperation+0x4c>)
{ 
 800fa62:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fa64:	2200      	movs	r2, #0
{ 
 800fa66:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fa68:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 800fa6a:	f7ff faa7 	bl	800efbc <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800fa6e:	4c10      	ldr	r4, [pc, #64]	; (800fab0 <FLASH_WaitForLastOperation+0x50>)
  tickstart = HAL_GetTick();
 800fa70:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800fa72:	e001      	b.n	800fa78 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800fa74:	1c69      	adds	r1, r5, #1
 800fa76:	d10d      	bne.n	800fa94 <FLASH_WaitForLastOperation+0x34>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800fa78:	68e3      	ldr	r3, [r4, #12]
 800fa7a:	03da      	lsls	r2, r3, #15
 800fa7c:	d4fa      	bmi.n	800fa74 <FLASH_WaitForLastOperation+0x14>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800fa7e:	68e3      	ldr	r3, [r4, #12]
 800fa80:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fa82:	bf44      	itt	mi
 800fa84:	2301      	movmi	r3, #1
 800fa86:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800fa88:	4b09      	ldr	r3, [pc, #36]	; (800fab0 <FLASH_WaitForLastOperation+0x50>)
 800fa8a:	68d8      	ldr	r0, [r3, #12]
 800fa8c:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 800fa90:	d108      	bne.n	800faa4 <FLASH_WaitForLastOperation+0x44>
}  
 800fa92:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800fa94:	b125      	cbz	r5, 800faa0 <FLASH_WaitForLastOperation+0x40>
 800fa96:	f7ff fa91 	bl	800efbc <HAL_GetTick>
 800fa9a:	1b80      	subs	r0, r0, r6
 800fa9c:	42a8      	cmp	r0, r5
 800fa9e:	d9eb      	bls.n	800fa78 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800faa0:	2003      	movs	r0, #3
}  
 800faa2:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800faa4:	f7ff ff82 	bl	800f9ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 800faa8:	2001      	movs	r0, #1
}  
 800faaa:	bd70      	pop	{r4, r5, r6, pc}
 800faac:	20006d98 	.word	0x20006d98
 800fab0:	40023c00 	.word	0x40023c00

0800fab4 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800fab4:	b139      	cbz	r1, 800fac6 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800fab6:	2901      	cmp	r1, #1
 800fab8:	d01c      	beq.n	800faf4 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800faba:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800fabc:	bf0c      	ite	eq
 800fabe:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800fac2:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fac6:	4b0d      	ldr	r3, [pc, #52]	; (800fafc <FLASH_Erase_Sector+0x48>)
 800fac8:	691a      	ldr	r2, [r3, #16]
 800faca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800face:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800fad0:	691a      	ldr	r2, [r3, #16]
 800fad2:	4311      	orrs	r1, r2
 800fad4:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800fad6:	691a      	ldr	r2, [r3, #16]
 800fad8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800fadc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800fade:	691a      	ldr	r2, [r3, #16]
 800fae0:	f042 0202 	orr.w	r2, r2, #2
 800fae4:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800fae8:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800faea:	691a      	ldr	r2, [r3, #16]
 800faec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800faf0:	611a      	str	r2, [r3, #16]
}
 800faf2:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800faf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800faf8:	e7e5      	b.n	800fac6 <FLASH_Erase_Sector+0x12>
 800fafa:	bf00      	nop
 800fafc:	40023c00 	.word	0x40023c00

0800fb00 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800fb00:	4b14      	ldr	r3, [pc, #80]	; (800fb54 <FLASH_FlushCaches+0x54>)
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	0591      	lsls	r1, r2, #22
 800fb06:	d50f      	bpl.n	800fb28 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800fb0e:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800fb10:	681a      	ldr	r2, [r3, #0]
 800fb12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb16:	601a      	str	r2, [r3, #0]
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fb1e:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fb26:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800fb28:	4b0a      	ldr	r3, [pc, #40]	; (800fb54 <FLASH_FlushCaches+0x54>)
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	0552      	lsls	r2, r2, #21
 800fb2e:	d50f      	bpl.n	800fb50 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800fb30:	681a      	ldr	r2, [r3, #0]
 800fb32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb36:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800fb38:	681a      	ldr	r2, [r3, #0]
 800fb3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fb3e:	601a      	str	r2, [r3, #0]
 800fb40:	681a      	ldr	r2, [r3, #0]
 800fb42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fb46:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800fb48:	681a      	ldr	r2, [r3, #0]
 800fb4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fb4e:	601a      	str	r2, [r3, #0]
  }
}
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	40023c00 	.word	0x40023c00

0800fb58 <HAL_FLASHEx_Erase>:
{
 800fb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800fb5c:	4e2d      	ldr	r6, [pc, #180]	; (800fc14 <HAL_FLASHEx_Erase+0xbc>)
 800fb5e:	7e33      	ldrb	r3, [r6, #24]
 800fb60:	2b01      	cmp	r3, #1
 800fb62:	d038      	beq.n	800fbd6 <HAL_FLASHEx_Erase+0x7e>
 800fb64:	2301      	movs	r3, #1
 800fb66:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fb68:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fb6c:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800fb6e:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fb70:	f7ff ff76 	bl	800fa60 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800fb74:	4607      	mov	r7, r0
 800fb76:	bb48      	cbnz	r0, 800fbcc <HAL_FLASHEx_Erase+0x74>
    *SectorError = 0xFFFFFFFFU;
 800fb78:	f04f 33ff 	mov.w	r3, #4294967295
 800fb7c:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800fb80:	6823      	ldr	r3, [r4, #0]
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d02b      	beq.n	800fbde <HAL_FLASHEx_Erase+0x86>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800fb86:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800fb8a:	442b      	add	r3, r5
 800fb8c:	429d      	cmp	r5, r3
 800fb8e:	d21b      	bcs.n	800fbc8 <HAL_FLASHEx_Erase+0x70>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800fb90:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800fc18 <HAL_FLASHEx_Erase+0xc0>
 800fb94:	e005      	b.n	800fba2 <HAL_FLASHEx_Erase+0x4a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800fb96:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800fb9a:	3501      	adds	r5, #1
 800fb9c:	4413      	add	r3, r2
 800fb9e:	42ab      	cmp	r3, r5
 800fba0:	d912      	bls.n	800fbc8 <HAL_FLASHEx_Erase+0x70>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800fba2:	7c21      	ldrb	r1, [r4, #16]
 800fba4:	4628      	mov	r0, r5
 800fba6:	f7ff ff85 	bl	800fab4 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fbaa:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fbae:	f7ff ff57 	bl	800fa60 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800fbb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fbb6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800fbba:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d0e9      	beq.n	800fb96 <HAL_FLASHEx_Erase+0x3e>
          *SectorError = index;
 800fbc2:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fbc6:	4607      	mov	r7, r0
    FLASH_FlushCaches();    
 800fbc8:	f7ff ff9a 	bl	800fb00 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800fbcc:	2300      	movs	r3, #0
 800fbce:	7633      	strb	r3, [r6, #24]
}
 800fbd0:	4638      	mov	r0, r7
 800fbd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800fbd6:	2702      	movs	r7, #2
}
 800fbd8:	4638      	mov	r0, r7
 800fbda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fbde:	4d0e      	ldr	r5, [pc, #56]	; (800fc18 <HAL_FLASHEx_Erase+0xc0>)
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800fbe0:	6923      	ldr	r3, [r4, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fbe2:	692a      	ldr	r2, [r5, #16]
 800fbe4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800fbe8:	612a      	str	r2, [r5, #16]
  FLASH->CR |= FLASH_CR_MER;
 800fbea:	692a      	ldr	r2, [r5, #16]
 800fbec:	f042 0204 	orr.w	r2, r2, #4
 800fbf0:	612a      	str	r2, [r5, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800fbf2:	692a      	ldr	r2, [r5, #16]
 800fbf4:	021b      	lsls	r3, r3, #8
 800fbf6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	612b      	str	r3, [r5, #16]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fc00:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fc04:	f7ff ff2c 	bl	800fa60 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800fc08:	692b      	ldr	r3, [r5, #16]
 800fc0a:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fc0e:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800fc10:	612b      	str	r3, [r5, #16]
 800fc12:	e7d9      	b.n	800fbc8 <HAL_FLASHEx_Erase+0x70>
 800fc14:	20006d98 	.word	0x20006d98
 800fc18:	40023c00 	.word	0x40023c00

0800fc1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fc20:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fc24:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 800fe1c <HAL_GPIO_Init+0x200>
{
 800fc28:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fc2a:	2400      	movs	r4, #0
 800fc2c:	e003      	b.n	800fc36 <HAL_GPIO_Init+0x1a>
 800fc2e:	3401      	adds	r4, #1
 800fc30:	2c10      	cmp	r4, #16
 800fc32:	f000 808c 	beq.w	800fd4e <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 800fc36:	2301      	movs	r3, #1
 800fc38:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fc3a:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d1f5      	bne.n	800fc2e <HAL_GPIO_Init+0x12>
 800fc42:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fc46:	f026 0910 	bic.w	r9, r6, #16
 800fc4a:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 800fc4e:	2303      	movs	r3, #3
 800fc50:	f109 37ff 	add.w	r7, r9, #4294967295
 800fc54:	fa03 f30c 	lsl.w	r3, r3, ip
 800fc58:	2f01      	cmp	r7, #1
 800fc5a:	ea6f 0303 	mvn.w	r3, r3
 800fc5e:	fa05 f50c 	lsl.w	r5, r5, ip
 800fc62:	d977      	bls.n	800fd54 <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 800fc64:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fc66:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fc68:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800fc6a:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 800fc6c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fc6e:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800fc72:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fc74:	fa05 f30c 	lsl.w	r3, r5, ip
 800fc78:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 800fc7a:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800fc7c:	00f3      	lsls	r3, r6, #3
 800fc7e:	d5d6      	bpl.n	800fc2e <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fc80:	4d5f      	ldr	r5, [pc, #380]	; (800fe00 <HAL_GPIO_Init+0x1e4>)
 800fc82:	2300      	movs	r3, #0
 800fc84:	9301      	str	r3, [sp, #4]
 800fc86:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800fc88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fc8c:	646b      	str	r3, [r5, #68]	; 0x44
 800fc8e:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 800fc90:	f024 0303 	bic.w	r3, r4, #3
 800fc94:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800fc98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fc9c:	9501      	str	r5, [sp, #4]
 800fc9e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fca2:	f004 0503 	and.w	r5, r4, #3
 800fca6:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fcaa:	4d56      	ldr	r5, [pc, #344]	; (800fe04 <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fcac:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800fcae:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fcb2:	270f      	movs	r7, #15
 800fcb4:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fcb8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fcba:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fcbe:	d01f      	beq.n	800fd00 <HAL_GPIO_Init+0xe4>
 800fcc0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800fcc4:	42a8      	cmp	r0, r5
 800fcc6:	d076      	beq.n	800fdb6 <HAL_GPIO_Init+0x19a>
 800fcc8:	4d4f      	ldr	r5, [pc, #316]	; (800fe08 <HAL_GPIO_Init+0x1ec>)
 800fcca:	42a8      	cmp	r0, r5
 800fccc:	d079      	beq.n	800fdc2 <HAL_GPIO_Init+0x1a6>
 800fcce:	4d4f      	ldr	r5, [pc, #316]	; (800fe0c <HAL_GPIO_Init+0x1f0>)
 800fcd0:	42a8      	cmp	r0, r5
 800fcd2:	d07c      	beq.n	800fdce <HAL_GPIO_Init+0x1b2>
 800fcd4:	4d4e      	ldr	r5, [pc, #312]	; (800fe10 <HAL_GPIO_Init+0x1f4>)
 800fcd6:	42a8      	cmp	r0, r5
 800fcd8:	d07f      	beq.n	800fdda <HAL_GPIO_Init+0x1be>
 800fcda:	4d4e      	ldr	r5, [pc, #312]	; (800fe14 <HAL_GPIO_Init+0x1f8>)
 800fcdc:	42a8      	cmp	r0, r5
 800fcde:	f000 8082 	beq.w	800fde6 <HAL_GPIO_Init+0x1ca>
 800fce2:	4d4d      	ldr	r5, [pc, #308]	; (800fe18 <HAL_GPIO_Init+0x1fc>)
 800fce4:	42a8      	cmp	r0, r5
 800fce6:	f000 8084 	beq.w	800fdf2 <HAL_GPIO_Init+0x1d6>
 800fcea:	f8df c134 	ldr.w	ip, [pc, #308]	; 800fe20 <HAL_GPIO_Init+0x204>
 800fcee:	4560      	cmp	r0, ip
 800fcf0:	bf0c      	ite	eq
 800fcf2:	f04f 0c07 	moveq.w	ip, #7
 800fcf6:	f04f 0c08 	movne.w	ip, #8
 800fcfa:	fa0c f509 	lsl.w	r5, ip, r9
 800fcfe:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fd00:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800fd02:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 800fd06:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800fd08:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 800fd0a:	bf54      	ite	pl
 800fd0c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800fd0e:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 800fd10:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800fd14:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800fd18:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 800fd1a:	bf54      	ite	pl
 800fd1c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800fd1e:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 800fd20:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fd24:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800fd28:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 800fd2a:	bf54      	ite	pl
 800fd2c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800fd2e:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 800fd30:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800fd34:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800fd38:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fd3a:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 800fd3e:	bf54      	ite	pl
 800fd40:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800fd42:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fd44:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 800fd46:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fd4a:	f47f af74 	bne.w	800fc36 <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 800fd4e:	b003      	add	sp, #12
 800fd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800fd54:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fd56:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fd5a:	68cf      	ldr	r7, [r1, #12]
 800fd5c:	fa07 f70c 	lsl.w	r7, r7, ip
 800fd60:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800fd64:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800fd66:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800fd6a:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fd6e:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800fd72:	40a7      	lsls	r7, r4
 800fd74:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800fd78:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800fd7a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fd7c:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fd7e:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fd80:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 800fd84:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fd86:	f47f af71 	bne.w	800fc6c <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 800fd8a:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800fd8e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fd92:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 800fd96:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fd9a:	00bf      	lsls	r7, r7, #2
 800fd9c:	f04f 0b0f 	mov.w	fp, #15
 800fda0:	fa0b fb07 	lsl.w	fp, fp, r7
 800fda4:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800fda8:	690d      	ldr	r5, [r1, #16]
 800fdaa:	40bd      	lsls	r5, r7
 800fdac:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 800fdb0:	f8c9 5020 	str.w	r5, [r9, #32]
 800fdb4:	e75a      	b.n	800fc6c <HAL_GPIO_Init+0x50>
 800fdb6:	f04f 0c01 	mov.w	ip, #1
 800fdba:	fa0c f509 	lsl.w	r5, ip, r9
 800fdbe:	432f      	orrs	r7, r5
 800fdc0:	e79e      	b.n	800fd00 <HAL_GPIO_Init+0xe4>
 800fdc2:	f04f 0c02 	mov.w	ip, #2
 800fdc6:	fa0c f509 	lsl.w	r5, ip, r9
 800fdca:	432f      	orrs	r7, r5
 800fdcc:	e798      	b.n	800fd00 <HAL_GPIO_Init+0xe4>
 800fdce:	f04f 0c03 	mov.w	ip, #3
 800fdd2:	fa0c f509 	lsl.w	r5, ip, r9
 800fdd6:	432f      	orrs	r7, r5
 800fdd8:	e792      	b.n	800fd00 <HAL_GPIO_Init+0xe4>
 800fdda:	f04f 0c04 	mov.w	ip, #4
 800fdde:	fa0c f509 	lsl.w	r5, ip, r9
 800fde2:	432f      	orrs	r7, r5
 800fde4:	e78c      	b.n	800fd00 <HAL_GPIO_Init+0xe4>
 800fde6:	f04f 0c05 	mov.w	ip, #5
 800fdea:	fa0c f509 	lsl.w	r5, ip, r9
 800fdee:	432f      	orrs	r7, r5
 800fdf0:	e786      	b.n	800fd00 <HAL_GPIO_Init+0xe4>
 800fdf2:	f04f 0c06 	mov.w	ip, #6
 800fdf6:	fa0c f509 	lsl.w	r5, ip, r9
 800fdfa:	432f      	orrs	r7, r5
 800fdfc:	e780      	b.n	800fd00 <HAL_GPIO_Init+0xe4>
 800fdfe:	bf00      	nop
 800fe00:	40023800 	.word	0x40023800
 800fe04:	40020000 	.word	0x40020000
 800fe08:	40020800 	.word	0x40020800
 800fe0c:	40020c00 	.word	0x40020c00
 800fe10:	40021000 	.word	0x40021000
 800fe14:	40021400 	.word	0x40021400
 800fe18:	40021800 	.word	0x40021800
 800fe1c:	40013c00 	.word	0x40013c00
 800fe20:	40021c00 	.word	0x40021c00

0800fe24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800fe24:	b902      	cbnz	r2, 800fe28 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800fe26:	0409      	lsls	r1, r1, #16
 800fe28:	6181      	str	r1, [r0, #24]
  }
}
 800fe2a:	4770      	bx	lr

0800fe2c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800fe2c:	4a04      	ldr	r2, [pc, #16]	; (800fe40 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800fe2e:	6951      	ldr	r1, [r2, #20]
 800fe30:	4201      	tst	r1, r0
 800fe32:	d100      	bne.n	800fe36 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800fe34:	4770      	bx	lr
{
 800fe36:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800fe38:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800fe3a:	f7fe ff6f 	bl	800ed1c <HAL_GPIO_EXTI_Callback>
  }
}
 800fe3e:	bd08      	pop	{r3, pc}
 800fe40:	40013c00 	.word	0x40013c00

0800fe44 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fe44:	2800      	cmp	r0, #0
 800fe46:	f000 8132 	beq.w	80100ae <HAL_RCC_OscConfig+0x26a>
{
 800fe4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fe4e:	6803      	ldr	r3, [r0, #0]
 800fe50:	07dd      	lsls	r5, r3, #31
{
 800fe52:	b082      	sub	sp, #8
 800fe54:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fe56:	d52f      	bpl.n	800feb8 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800fe58:	49ac      	ldr	r1, [pc, #688]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
 800fe5a:	688a      	ldr	r2, [r1, #8]
 800fe5c:	f002 020c 	and.w	r2, r2, #12
 800fe60:	2a04      	cmp	r2, #4
 800fe62:	f000 80ea 	beq.w	801003a <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fe66:	688a      	ldr	r2, [r1, #8]
 800fe68:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800fe6c:	2a08      	cmp	r2, #8
 800fe6e:	f000 80e0 	beq.w	8010032 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fe72:	6863      	ldr	r3, [r4, #4]
 800fe74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe78:	f000 80e9 	beq.w	801004e <HAL_RCC_OscConfig+0x20a>
 800fe7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fe80:	f000 8178 	beq.w	8010174 <HAL_RCC_OscConfig+0x330>
 800fe84:	4da1      	ldr	r5, [pc, #644]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
 800fe86:	682a      	ldr	r2, [r5, #0]
 800fe88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fe8c:	602a      	str	r2, [r5, #0]
 800fe8e:	682a      	ldr	r2, [r5, #0]
 800fe90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fe94:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	f040 80de 	bne.w	8010058 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe9c:	f7ff f88e 	bl	800efbc <HAL_GetTick>
 800fea0:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fea2:	e005      	b.n	800feb0 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fea4:	f7ff f88a 	bl	800efbc <HAL_GetTick>
 800fea8:	1b80      	subs	r0, r0, r6
 800feaa:	2864      	cmp	r0, #100	; 0x64
 800feac:	f200 80f2 	bhi.w	8010094 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800feb0:	682b      	ldr	r3, [r5, #0]
 800feb2:	039b      	lsls	r3, r3, #14
 800feb4:	d4f6      	bmi.n	800fea4 <HAL_RCC_OscConfig+0x60>
 800feb6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800feb8:	079f      	lsls	r7, r3, #30
 800feba:	d475      	bmi.n	800ffa8 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800febc:	071a      	lsls	r2, r3, #28
 800febe:	d515      	bpl.n	800feec <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800fec0:	6963      	ldr	r3, [r4, #20]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	f000 80a5 	beq.w	8010012 <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fec8:	4b91      	ldr	r3, [pc, #580]	; (8010110 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800feca:	4d90      	ldr	r5, [pc, #576]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 800fecc:	2201      	movs	r2, #1
 800fece:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800fed0:	f7ff f874 	bl	800efbc <HAL_GetTick>
 800fed4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fed6:	e005      	b.n	800fee4 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fed8:	f7ff f870 	bl	800efbc <HAL_GetTick>
 800fedc:	1b80      	subs	r0, r0, r6
 800fede:	2802      	cmp	r0, #2
 800fee0:	f200 80d8 	bhi.w	8010094 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fee4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800fee6:	079b      	lsls	r3, r3, #30
 800fee8:	d5f6      	bpl.n	800fed8 <HAL_RCC_OscConfig+0x94>
 800feea:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800feec:	0758      	lsls	r0, r3, #29
 800feee:	d53b      	bpl.n	800ff68 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fef0:	4a86      	ldr	r2, [pc, #536]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
 800fef2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fef4:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800fef8:	f040 80db 	bne.w	80100b2 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fefc:	9301      	str	r3, [sp, #4]
 800fefe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ff00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff04:	6413      	str	r3, [r2, #64]	; 0x40
 800ff06:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ff08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff0c:	9301      	str	r3, [sp, #4]
 800ff0e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800ff10:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ff12:	4d80      	ldr	r5, [pc, #512]	; (8010114 <HAL_RCC_OscConfig+0x2d0>)
 800ff14:	682a      	ldr	r2, [r5, #0]
 800ff16:	05d1      	lsls	r1, r2, #23
 800ff18:	f140 80ac 	bpl.w	8010074 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ff1c:	68a3      	ldr	r3, [r4, #8]
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	f000 80c9 	beq.w	80100b6 <HAL_RCC_OscConfig+0x272>
 800ff24:	2b05      	cmp	r3, #5
 800ff26:	f000 812f 	beq.w	8010188 <HAL_RCC_OscConfig+0x344>
 800ff2a:	4d78      	ldr	r5, [pc, #480]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
 800ff2c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800ff2e:	f022 0201 	bic.w	r2, r2, #1
 800ff32:	672a      	str	r2, [r5, #112]	; 0x70
 800ff34:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800ff36:	f022 0204 	bic.w	r2, r2, #4
 800ff3a:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	f040 80bf 	bne.w	80100c0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ff42:	f7ff f83b 	bl	800efbc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff46:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800ff4a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ff4c:	e006      	b.n	800ff5c <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff4e:	f7ff f835 	bl	800efbc <HAL_GetTick>
 800ff52:	eba0 0008 	sub.w	r0, r0, r8
 800ff56:	42b8      	cmp	r0, r7
 800ff58:	f200 809c 	bhi.w	8010094 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ff5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ff5e:	0798      	lsls	r0, r3, #30
 800ff60:	d4f5      	bmi.n	800ff4e <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ff62:	2e00      	cmp	r6, #0
 800ff64:	f040 80dc 	bne.w	8010120 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ff68:	69a0      	ldr	r0, [r4, #24]
 800ff6a:	b1c8      	cbz	r0, 800ffa0 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ff6c:	4d67      	ldr	r5, [pc, #412]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
 800ff6e:	68aa      	ldr	r2, [r5, #8]
 800ff70:	f002 020c 	and.w	r2, r2, #12
 800ff74:	2a08      	cmp	r2, #8
 800ff76:	f000 80d9 	beq.w	801012c <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ff7a:	4a67      	ldr	r2, [pc, #412]	; (8010118 <HAL_RCC_OscConfig+0x2d4>)
 800ff7c:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ff7e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800ff80:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ff82:	f000 810b 	beq.w	801019c <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff86:	f7ff f819 	bl	800efbc <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ff8a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800ff8c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ff8e:	e004      	b.n	800ff9a <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ff90:	f7ff f814 	bl	800efbc <HAL_GetTick>
 800ff94:	1b40      	subs	r0, r0, r5
 800ff96:	2802      	cmp	r0, #2
 800ff98:	d87c      	bhi.n	8010094 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ff9a:	6823      	ldr	r3, [r4, #0]
 800ff9c:	019b      	lsls	r3, r3, #6
 800ff9e:	d4f7      	bmi.n	800ff90 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800ffa0:	2000      	movs	r0, #0
}
 800ffa2:	b002      	add	sp, #8
 800ffa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ffa8:	4a58      	ldr	r2, [pc, #352]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
 800ffaa:	6891      	ldr	r1, [r2, #8]
 800ffac:	f011 0f0c 	tst.w	r1, #12
 800ffb0:	d024      	beq.n	800fffc <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ffb2:	6891      	ldr	r1, [r2, #8]
 800ffb4:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ffb8:	2908      	cmp	r1, #8
 800ffba:	d01c      	beq.n	800fff6 <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ffbc:	68e3      	ldr	r3, [r4, #12]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	f000 8092 	beq.w	80100e8 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 800ffc4:	4b55      	ldr	r3, [pc, #340]	; (801011c <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ffc6:	4d51      	ldr	r5, [pc, #324]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 800ffc8:	2201      	movs	r2, #1
 800ffca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ffcc:	f7fe fff6 	bl	800efbc <HAL_GetTick>
 800ffd0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ffd2:	e004      	b.n	800ffde <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ffd4:	f7fe fff2 	bl	800efbc <HAL_GetTick>
 800ffd8:	1b80      	subs	r0, r0, r6
 800ffda:	2802      	cmp	r0, #2
 800ffdc:	d85a      	bhi.n	8010094 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ffde:	682b      	ldr	r3, [r5, #0]
 800ffe0:	0798      	lsls	r0, r3, #30
 800ffe2:	d5f7      	bpl.n	800ffd4 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ffe4:	682b      	ldr	r3, [r5, #0]
 800ffe6:	6922      	ldr	r2, [r4, #16]
 800ffe8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ffec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800fff0:	602b      	str	r3, [r5, #0]
 800fff2:	6823      	ldr	r3, [r4, #0]
 800fff4:	e762      	b.n	800febc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800fff6:	6852      	ldr	r2, [r2, #4]
 800fff8:	0256      	lsls	r6, r2, #9
 800fffa:	d4df      	bmi.n	800ffbc <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fffc:	4a43      	ldr	r2, [pc, #268]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
 800fffe:	6812      	ldr	r2, [r2, #0]
 8010000:	0795      	lsls	r5, r2, #30
 8010002:	d54b      	bpl.n	801009c <HAL_RCC_OscConfig+0x258>
 8010004:	68e2      	ldr	r2, [r4, #12]
 8010006:	2a01      	cmp	r2, #1
 8010008:	d048      	beq.n	801009c <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 801000a:	2001      	movs	r0, #1
}
 801000c:	b002      	add	sp, #8
 801000e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8010012:	4a3f      	ldr	r2, [pc, #252]	; (8010110 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010014:	4d3d      	ldr	r5, [pc, #244]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8010016:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8010018:	f7fe ffd0 	bl	800efbc <HAL_GetTick>
 801001c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801001e:	e004      	b.n	801002a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010020:	f7fe ffcc 	bl	800efbc <HAL_GetTick>
 8010024:	1b80      	subs	r0, r0, r6
 8010026:	2802      	cmp	r0, #2
 8010028:	d834      	bhi.n	8010094 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801002a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801002c:	079f      	lsls	r7, r3, #30
 801002e:	d4f7      	bmi.n	8010020 <HAL_RCC_OscConfig+0x1dc>
 8010030:	e75b      	b.n	800feea <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010032:	684a      	ldr	r2, [r1, #4]
 8010034:	0250      	lsls	r0, r2, #9
 8010036:	f57f af1c 	bpl.w	800fe72 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801003a:	4a34      	ldr	r2, [pc, #208]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
 801003c:	6812      	ldr	r2, [r2, #0]
 801003e:	0391      	lsls	r1, r2, #14
 8010040:	f57f af3a 	bpl.w	800feb8 <HAL_RCC_OscConfig+0x74>
 8010044:	6862      	ldr	r2, [r4, #4]
 8010046:	2a00      	cmp	r2, #0
 8010048:	f47f af36 	bne.w	800feb8 <HAL_RCC_OscConfig+0x74>
 801004c:	e7dd      	b.n	801000a <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801004e:	4a2f      	ldr	r2, [pc, #188]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
 8010050:	6813      	ldr	r3, [r2, #0]
 8010052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010056:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8010058:	f7fe ffb0 	bl	800efbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801005c:	4d2b      	ldr	r5, [pc, #172]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 801005e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010060:	e004      	b.n	801006c <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010062:	f7fe ffab 	bl	800efbc <HAL_GetTick>
 8010066:	1b80      	subs	r0, r0, r6
 8010068:	2864      	cmp	r0, #100	; 0x64
 801006a:	d813      	bhi.n	8010094 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801006c:	682b      	ldr	r3, [r5, #0]
 801006e:	039a      	lsls	r2, r3, #14
 8010070:	d5f7      	bpl.n	8010062 <HAL_RCC_OscConfig+0x21e>
 8010072:	e720      	b.n	800feb6 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010074:	682a      	ldr	r2, [r5, #0]
 8010076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801007a:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 801007c:	f7fe ff9e 	bl	800efbc <HAL_GetTick>
 8010080:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010082:	682b      	ldr	r3, [r5, #0]
 8010084:	05da      	lsls	r2, r3, #23
 8010086:	f53f af49 	bmi.w	800ff1c <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801008a:	f7fe ff97 	bl	800efbc <HAL_GetTick>
 801008e:	1bc0      	subs	r0, r0, r7
 8010090:	2802      	cmp	r0, #2
 8010092:	d9f6      	bls.n	8010082 <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8010094:	2003      	movs	r0, #3
}
 8010096:	b002      	add	sp, #8
 8010098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801009c:	491b      	ldr	r1, [pc, #108]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
 801009e:	6920      	ldr	r0, [r4, #16]
 80100a0:	680a      	ldr	r2, [r1, #0]
 80100a2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80100a6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80100aa:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80100ac:	e706      	b.n	800febc <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 80100ae:	2001      	movs	r0, #1
}
 80100b0:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80100b2:	2600      	movs	r6, #0
 80100b4:	e72d      	b.n	800ff12 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80100b6:	4a15      	ldr	r2, [pc, #84]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
 80100b8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80100ba:	f043 0301 	orr.w	r3, r3, #1
 80100be:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80100c0:	f7fe ff7c 	bl	800efbc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80100c4:	4d11      	ldr	r5, [pc, #68]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80100c6:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80100c8:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80100cc:	e005      	b.n	80100da <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80100ce:	f7fe ff75 	bl	800efbc <HAL_GetTick>
 80100d2:	eba0 0008 	sub.w	r0, r0, r8
 80100d6:	42b8      	cmp	r0, r7
 80100d8:	d8dc      	bhi.n	8010094 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80100da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80100dc:	079b      	lsls	r3, r3, #30
 80100de:	d5f6      	bpl.n	80100ce <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 80100e0:	2e00      	cmp	r6, #0
 80100e2:	f43f af41 	beq.w	800ff68 <HAL_RCC_OscConfig+0x124>
 80100e6:	e01b      	b.n	8010120 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 80100e8:	4a0c      	ldr	r2, [pc, #48]	; (801011c <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80100ea:	4d08      	ldr	r5, [pc, #32]	; (801010c <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 80100ec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80100ee:	f7fe ff65 	bl	800efbc <HAL_GetTick>
 80100f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80100f4:	e004      	b.n	8010100 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80100f6:	f7fe ff61 	bl	800efbc <HAL_GetTick>
 80100fa:	1b80      	subs	r0, r0, r6
 80100fc:	2802      	cmp	r0, #2
 80100fe:	d8c9      	bhi.n	8010094 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010100:	682b      	ldr	r3, [r5, #0]
 8010102:	0799      	lsls	r1, r3, #30
 8010104:	d4f7      	bmi.n	80100f6 <HAL_RCC_OscConfig+0x2b2>
 8010106:	6823      	ldr	r3, [r4, #0]
 8010108:	e6d8      	b.n	800febc <HAL_RCC_OscConfig+0x78>
 801010a:	bf00      	nop
 801010c:	40023800 	.word	0x40023800
 8010110:	42470e80 	.word	0x42470e80
 8010114:	40007000 	.word	0x40007000
 8010118:	42470060 	.word	0x42470060
 801011c:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8010120:	4a35      	ldr	r2, [pc, #212]	; (80101f8 <HAL_RCC_OscConfig+0x3b4>)
 8010122:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010128:	6413      	str	r3, [r2, #64]	; 0x40
 801012a:	e71d      	b.n	800ff68 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801012c:	2801      	cmp	r0, #1
 801012e:	f43f af6d 	beq.w	801000c <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8010132:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010134:	69e2      	ldr	r2, [r4, #28]
 8010136:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 801013a:	4291      	cmp	r1, r2
 801013c:	f47f af65 	bne.w	801000a <HAL_RCC_OscConfig+0x1c6>
 8010140:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010142:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010146:	4291      	cmp	r1, r2
 8010148:	f47f af5f 	bne.w	801000a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801014c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010150:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010152:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010154:	428a      	cmp	r2, r1
 8010156:	f47f af58 	bne.w	801000a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801015a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801015c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010160:	4291      	cmp	r1, r2
 8010162:	f47f af52 	bne.w	801000a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010166:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8010168:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 801016c:	1a18      	subs	r0, r3, r0
 801016e:	bf18      	it	ne
 8010170:	2001      	movne	r0, #1
 8010172:	e74b      	b.n	801000c <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010174:	4b20      	ldr	r3, [pc, #128]	; (80101f8 <HAL_RCC_OscConfig+0x3b4>)
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801017c:	601a      	str	r2, [r3, #0]
 801017e:	681a      	ldr	r2, [r3, #0]
 8010180:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010184:	601a      	str	r2, [r3, #0]
 8010186:	e767      	b.n	8010058 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010188:	4b1b      	ldr	r3, [pc, #108]	; (80101f8 <HAL_RCC_OscConfig+0x3b4>)
 801018a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801018c:	f042 0204 	orr.w	r2, r2, #4
 8010190:	671a      	str	r2, [r3, #112]	; 0x70
 8010192:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010194:	f042 0201 	orr.w	r2, r2, #1
 8010198:	671a      	str	r2, [r3, #112]	; 0x70
 801019a:	e791      	b.n	80100c0 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 801019c:	f7fe ff0e 	bl	800efbc <HAL_GetTick>
 80101a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80101a2:	e005      	b.n	80101b0 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80101a4:	f7fe ff0a 	bl	800efbc <HAL_GetTick>
 80101a8:	1b80      	subs	r0, r0, r6
 80101aa:	2802      	cmp	r0, #2
 80101ac:	f63f af72 	bhi.w	8010094 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80101b0:	682b      	ldr	r3, [r5, #0]
 80101b2:	0199      	lsls	r1, r3, #6
 80101b4:	d4f6      	bmi.n	80101a4 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80101b6:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 80101ba:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 80101be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80101c0:	4c0d      	ldr	r4, [pc, #52]	; (80101f8 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80101c2:	4333      	orrs	r3, r6
 80101c4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80101c8:	0852      	lsrs	r2, r2, #1
 80101ca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80101ce:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80101d0:	490a      	ldr	r1, [pc, #40]	; (80101fc <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80101d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80101d6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80101d8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80101da:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 80101dc:	f7fe feee 	bl	800efbc <HAL_GetTick>
 80101e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80101e2:	e005      	b.n	80101f0 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80101e4:	f7fe feea 	bl	800efbc <HAL_GetTick>
 80101e8:	1b40      	subs	r0, r0, r5
 80101ea:	2802      	cmp	r0, #2
 80101ec:	f63f af52 	bhi.w	8010094 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80101f0:	6823      	ldr	r3, [r4, #0]
 80101f2:	019a      	lsls	r2, r3, #6
 80101f4:	d5f6      	bpl.n	80101e4 <HAL_RCC_OscConfig+0x3a0>
 80101f6:	e6d3      	b.n	800ffa0 <HAL_RCC_OscConfig+0x15c>
 80101f8:	40023800 	.word	0x40023800
 80101fc:	42470060 	.word	0x42470060

08010200 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010200:	4917      	ldr	r1, [pc, #92]	; (8010260 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8010202:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010204:	688b      	ldr	r3, [r1, #8]
 8010206:	f003 030c 	and.w	r3, r3, #12
 801020a:	2b04      	cmp	r3, #4
 801020c:	d01b      	beq.n	8010246 <HAL_RCC_GetSysClockFreq+0x46>
 801020e:	2b08      	cmp	r3, #8
 8010210:	d117      	bne.n	8010242 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010212:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010214:	684b      	ldr	r3, [r1, #4]
 8010216:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801021a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801021e:	d114      	bne.n	801024a <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010220:	6849      	ldr	r1, [r1, #4]
 8010222:	4810      	ldr	r0, [pc, #64]	; (8010264 <HAL_RCC_GetSysClockFreq+0x64>)
 8010224:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8010228:	fba1 0100 	umull	r0, r1, r1, r0
 801022c:	f7f8 fc64 	bl	8008af8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010230:	4b0b      	ldr	r3, [pc, #44]	; (8010260 <HAL_RCC_GetSysClockFreq+0x60>)
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8010238:	3301      	adds	r3, #1
 801023a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 801023c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8010240:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8010242:	4808      	ldr	r0, [pc, #32]	; (8010264 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8010244:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8010246:	4808      	ldr	r0, [pc, #32]	; (8010268 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8010248:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801024a:	684b      	ldr	r3, [r1, #4]
 801024c:	4806      	ldr	r0, [pc, #24]	; (8010268 <HAL_RCC_GetSysClockFreq+0x68>)
 801024e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8010252:	fba3 0100 	umull	r0, r1, r3, r0
 8010256:	2300      	movs	r3, #0
 8010258:	f7f8 fc4e 	bl	8008af8 <__aeabi_uldivmod>
 801025c:	e7e8      	b.n	8010230 <HAL_RCC_GetSysClockFreq+0x30>
 801025e:	bf00      	nop
 8010260:	40023800 	.word	0x40023800
 8010264:	00f42400 	.word	0x00f42400
 8010268:	007a1200 	.word	0x007a1200

0801026c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 801026c:	b160      	cbz	r0, 8010288 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801026e:	4a49      	ldr	r2, [pc, #292]	; (8010394 <HAL_RCC_ClockConfig+0x128>)
 8010270:	6813      	ldr	r3, [r2, #0]
 8010272:	f003 030f 	and.w	r3, r3, #15
 8010276:	428b      	cmp	r3, r1
 8010278:	d208      	bcs.n	801028c <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801027a:	b2cb      	uxtb	r3, r1
 801027c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801027e:	6813      	ldr	r3, [r2, #0]
 8010280:	f003 030f 	and.w	r3, r3, #15
 8010284:	428b      	cmp	r3, r1
 8010286:	d001      	beq.n	801028c <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8010288:	2001      	movs	r0, #1
}
 801028a:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801028c:	6803      	ldr	r3, [r0, #0]
{
 801028e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010292:	079d      	lsls	r5, r3, #30
 8010294:	d514      	bpl.n	80102c0 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010296:	075c      	lsls	r4, r3, #29
 8010298:	d504      	bpl.n	80102a4 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801029a:	4c3f      	ldr	r4, [pc, #252]	; (8010398 <HAL_RCC_ClockConfig+0x12c>)
 801029c:	68a2      	ldr	r2, [r4, #8]
 801029e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80102a2:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80102a4:	071a      	lsls	r2, r3, #28
 80102a6:	d504      	bpl.n	80102b2 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80102a8:	4c3b      	ldr	r4, [pc, #236]	; (8010398 <HAL_RCC_ClockConfig+0x12c>)
 80102aa:	68a2      	ldr	r2, [r4, #8]
 80102ac:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80102b0:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80102b2:	4c39      	ldr	r4, [pc, #228]	; (8010398 <HAL_RCC_ClockConfig+0x12c>)
 80102b4:	6885      	ldr	r5, [r0, #8]
 80102b6:	68a2      	ldr	r2, [r4, #8]
 80102b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80102bc:	432a      	orrs	r2, r5
 80102be:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80102c0:	07df      	lsls	r7, r3, #31
 80102c2:	4604      	mov	r4, r0
 80102c4:	460d      	mov	r5, r1
 80102c6:	d522      	bpl.n	801030e <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80102c8:	6842      	ldr	r2, [r0, #4]
 80102ca:	2a01      	cmp	r2, #1
 80102cc:	d057      	beq.n	801037e <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80102ce:	1e93      	subs	r3, r2, #2
 80102d0:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80102d2:	4b31      	ldr	r3, [pc, #196]	; (8010398 <HAL_RCC_ClockConfig+0x12c>)
 80102d4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80102d6:	d959      	bls.n	801038c <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80102d8:	0799      	lsls	r1, r3, #30
 80102da:	d525      	bpl.n	8010328 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80102dc:	4e2e      	ldr	r6, [pc, #184]	; (8010398 <HAL_RCC_ClockConfig+0x12c>)
 80102de:	68b3      	ldr	r3, [r6, #8]
 80102e0:	f023 0303 	bic.w	r3, r3, #3
 80102e4:	4313      	orrs	r3, r2
 80102e6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80102e8:	f7fe fe68 	bl	800efbc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80102ec:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80102f0:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80102f2:	e005      	b.n	8010300 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80102f4:	f7fe fe62 	bl	800efbc <HAL_GetTick>
 80102f8:	eba0 0008 	sub.w	r0, r0, r8
 80102fc:	42b8      	cmp	r0, r7
 80102fe:	d843      	bhi.n	8010388 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010300:	68b3      	ldr	r3, [r6, #8]
 8010302:	6862      	ldr	r2, [r4, #4]
 8010304:	f003 030c 	and.w	r3, r3, #12
 8010308:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 801030c:	d1f2      	bne.n	80102f4 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801030e:	4a21      	ldr	r2, [pc, #132]	; (8010394 <HAL_RCC_ClockConfig+0x128>)
 8010310:	6813      	ldr	r3, [r2, #0]
 8010312:	f003 030f 	and.w	r3, r3, #15
 8010316:	42ab      	cmp	r3, r5
 8010318:	d909      	bls.n	801032e <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801031a:	b2eb      	uxtb	r3, r5
 801031c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801031e:	6813      	ldr	r3, [r2, #0]
 8010320:	f003 030f 	and.w	r3, r3, #15
 8010324:	42ab      	cmp	r3, r5
 8010326:	d002      	beq.n	801032e <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8010328:	2001      	movs	r0, #1
}
 801032a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801032e:	6823      	ldr	r3, [r4, #0]
 8010330:	075a      	lsls	r2, r3, #29
 8010332:	d506      	bpl.n	8010342 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010334:	4918      	ldr	r1, [pc, #96]	; (8010398 <HAL_RCC_ClockConfig+0x12c>)
 8010336:	68e0      	ldr	r0, [r4, #12]
 8010338:	688a      	ldr	r2, [r1, #8]
 801033a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 801033e:	4302      	orrs	r2, r0
 8010340:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010342:	071b      	lsls	r3, r3, #28
 8010344:	d412      	bmi.n	801036c <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010346:	f7ff ff5b 	bl	8010200 <HAL_RCC_GetSysClockFreq>
 801034a:	4b13      	ldr	r3, [pc, #76]	; (8010398 <HAL_RCC_ClockConfig+0x12c>)
 801034c:	4c13      	ldr	r4, [pc, #76]	; (801039c <HAL_RCC_ClockConfig+0x130>)
 801034e:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8010350:	4913      	ldr	r1, [pc, #76]	; (80103a0 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010352:	4a14      	ldr	r2, [pc, #80]	; (80103a4 <HAL_RCC_ClockConfig+0x138>)
 8010354:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8010358:	5ce3      	ldrb	r3, [r4, r3]
 801035a:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 801035e:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010360:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8010362:	f7fe fde1 	bl	800ef28 <HAL_InitTick>
  return HAL_OK;
 8010366:	2000      	movs	r0, #0
}
 8010368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801036c:	4a0a      	ldr	r2, [pc, #40]	; (8010398 <HAL_RCC_ClockConfig+0x12c>)
 801036e:	6921      	ldr	r1, [r4, #16]
 8010370:	6893      	ldr	r3, [r2, #8]
 8010372:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8010376:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801037a:	6093      	str	r3, [r2, #8]
 801037c:	e7e3      	b.n	8010346 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801037e:	4b06      	ldr	r3, [pc, #24]	; (8010398 <HAL_RCC_ClockConfig+0x12c>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	039e      	lsls	r6, r3, #14
 8010384:	d4aa      	bmi.n	80102dc <HAL_RCC_ClockConfig+0x70>
 8010386:	e7cf      	b.n	8010328 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8010388:	2003      	movs	r0, #3
 801038a:	e7ed      	b.n	8010368 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801038c:	0198      	lsls	r0, r3, #6
 801038e:	d4a5      	bmi.n	80102dc <HAL_RCC_ClockConfig+0x70>
 8010390:	e7ca      	b.n	8010328 <HAL_RCC_ClockConfig+0xbc>
 8010392:	bf00      	nop
 8010394:	40023c00 	.word	0x40023c00
 8010398:	40023800 	.word	0x40023800
 801039c:	080165f8 	.word	0x080165f8
 80103a0:	20000014 	.word	0x20000014
 80103a4:	2000000c 	.word	0x2000000c

080103a8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80103a8:	4b04      	ldr	r3, [pc, #16]	; (80103bc <HAL_RCC_GetPCLK1Freq+0x14>)
 80103aa:	4a05      	ldr	r2, [pc, #20]	; (80103c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80103ac:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80103ae:	4905      	ldr	r1, [pc, #20]	; (80103c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80103b0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80103b4:	6808      	ldr	r0, [r1, #0]
 80103b6:	5cd3      	ldrb	r3, [r2, r3]
}
 80103b8:	40d8      	lsrs	r0, r3
 80103ba:	4770      	bx	lr
 80103bc:	40023800 	.word	0x40023800
 80103c0:	08016608 	.word	0x08016608
 80103c4:	2000000c 	.word	0x2000000c

080103c8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80103c8:	4b04      	ldr	r3, [pc, #16]	; (80103dc <HAL_RCC_GetPCLK2Freq+0x14>)
 80103ca:	4a05      	ldr	r2, [pc, #20]	; (80103e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80103cc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80103ce:	4905      	ldr	r1, [pc, #20]	; (80103e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80103d0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80103d4:	6808      	ldr	r0, [r1, #0]
 80103d6:	5cd3      	ldrb	r3, [r2, r3]
}
 80103d8:	40d8      	lsrs	r0, r3
 80103da:	4770      	bx	lr
 80103dc:	40023800 	.word	0x40023800
 80103e0:	08016608 	.word	0x08016608
 80103e4:	2000000c 	.word	0x2000000c

080103e8 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80103e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103ec:	4607      	mov	r7, r0
 80103ee:	460d      	mov	r5, r1
 80103f0:	4616      	mov	r6, r2
 80103f2:	4698      	mov	r8, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80103f4:	683c      	ldr	r4, [r7, #0]
 80103f6:	e001      	b.n	80103fc <SPI_WaitFlagStateUntilTimeout.constprop.7+0x14>
  {
    if (Timeout != HAL_MAX_DELAY)
 80103f8:	1c73      	adds	r3, r6, #1
 80103fa:	d106      	bne.n	801040a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x22>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80103fc:	68a0      	ldr	r0, [r4, #8]
 80103fe:	ea35 0300 	bics.w	r3, r5, r0
 8010402:	d0f9      	beq.n	80103f8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8010404:	2000      	movs	r0, #0
}
 8010406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801040a:	f7fe fdd7 	bl	800efbc <HAL_GetTick>
 801040e:	eba0 0008 	sub.w	r0, r0, r8
 8010412:	4286      	cmp	r6, r0
 8010414:	d8ee      	bhi.n	80103f4 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010416:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801041a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801041c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010420:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010424:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010426:	d014      	beq.n	8010452 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x6a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801042a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 801042e:	d007      	beq.n	8010440 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x58>
        hspi->State = HAL_SPI_STATE_READY;
 8010430:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8010432:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8010434:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8010438:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 801043c:	2003      	movs	r0, #3
 801043e:	e7e2      	b.n	8010406 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x1e>
          SPI_RESET_CRC(hspi);
 8010440:	681a      	ldr	r2, [r3, #0]
 8010442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010446:	601a      	str	r2, [r3, #0]
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801044e:	601a      	str	r2, [r3, #0]
 8010450:	e7ee      	b.n	8010430 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010452:	68ba      	ldr	r2, [r7, #8]
 8010454:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8010458:	d002      	beq.n	8010460 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801045a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801045e:	d1e3      	bne.n	8010428 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x40>
          __HAL_SPI_DISABLE(hspi);
 8010460:	681a      	ldr	r2, [r3, #0]
 8010462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010466:	601a      	str	r2, [r3, #0]
 8010468:	e7de      	b.n	8010428 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x40>
 801046a:	bf00      	nop

0801046c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801046c:	b570      	push	{r4, r5, r6, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801046e:	6845      	ldr	r5, [r0, #4]
 8010470:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 8010474:	4604      	mov	r4, r0
 8010476:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010478:	d006      	beq.n	8010488 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801047a:	460a      	mov	r2, r1
 801047c:	2101      	movs	r1, #1
 801047e:	f7ff ffb3 	bl	80103e8 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8010482:	b998      	cbnz	r0, 80104ac <SPI_EndRxTransaction+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8010484:	2000      	movs	r0, #0
}
 8010486:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010488:	6882      	ldr	r2, [r0, #8]
 801048a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801048e:	d013      	beq.n	80104b8 <SPI_EndRxTransaction+0x4c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010490:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8010494:	d115      	bne.n	80104c2 <SPI_EndRxTransaction+0x56>
    __HAL_SPI_DISABLE(hspi);
 8010496:	6806      	ldr	r6, [r0, #0]
 8010498:	6835      	ldr	r5, [r6, #0]
 801049a:	f025 0540 	bic.w	r5, r5, #64	; 0x40
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801049e:	460a      	mov	r2, r1
    __HAL_SPI_DISABLE(hspi);
 80104a0:	6035      	str	r5, [r6, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80104a2:	2101      	movs	r1, #1
 80104a4:	f7ff ffa0 	bl	80103e8 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d0eb      	beq.n	8010484 <SPI_EndRxTransaction+0x18>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80104ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80104ae:	f043 0320 	orr.w	r3, r3, #32
 80104b2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80104b4:	2003      	movs	r0, #3
}
 80104b6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SPI_DISABLE(hspi);
 80104b8:	6800      	ldr	r0, [r0, #0]
 80104ba:	6802      	ldr	r2, [r0, #0]
 80104bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80104c0:	6002      	str	r2, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80104c2:	460a      	mov	r2, r1
 80104c4:	4620      	mov	r0, r4
 80104c6:	2180      	movs	r1, #128	; 0x80
 80104c8:	f7ff ff8e 	bl	80103e8 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 80104cc:	2800      	cmp	r0, #0
 80104ce:	d1ed      	bne.n	80104ac <SPI_EndRxTransaction+0x40>
  return HAL_OK;
 80104d0:	2000      	movs	r0, #0
 80104d2:	e7d8      	b.n	8010486 <SPI_EndRxTransaction+0x1a>

080104d4 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80104d4:	4b16      	ldr	r3, [pc, #88]	; (8010530 <SPI_EndRxTxTransaction+0x5c>)
{
 80104d6:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	4d16      	ldr	r5, [pc, #88]	; (8010534 <SPI_EndRxTxTransaction+0x60>)
 80104dc:	fba5 5303 	umull	r5, r3, r5, r3
 80104e0:	0d5b      	lsrs	r3, r3, #21
 80104e2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80104e6:	fb05 f303 	mul.w	r3, r5, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80104ea:	6845      	ldr	r5, [r0, #4]
{
 80104ec:	b083      	sub	sp, #12
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80104ee:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 80104f2:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80104f4:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80104f6:	d107      	bne.n	8010508 <SPI_EndRxTxTransaction+0x34>
 80104f8:	e00c      	b.n	8010514 <SPI_EndRxTxTransaction+0x40>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 80104fa:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80104fc:	6822      	ldr	r2, [r4, #0]
      count--;
 80104fe:	3b01      	subs	r3, #1
 8010500:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010502:	6893      	ldr	r3, [r2, #8]
 8010504:	061b      	lsls	r3, r3, #24
 8010506:	d502      	bpl.n	801050e <SPI_EndRxTxTransaction+0x3a>
      if (count == 0U)
 8010508:	9b01      	ldr	r3, [sp, #4]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d1f5      	bne.n	80104fa <SPI_EndRxTxTransaction+0x26>
  }

  return HAL_OK;
 801050e:	2000      	movs	r0, #0
}
 8010510:	b003      	add	sp, #12
 8010512:	bd30      	pop	{r4, r5, pc}
 8010514:	4613      	mov	r3, r2
 8010516:	460a      	mov	r2, r1
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010518:	2180      	movs	r1, #128	; 0x80
 801051a:	f7ff ff65 	bl	80103e8 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 801051e:	2800      	cmp	r0, #0
 8010520:	d0f5      	beq.n	801050e <SPI_EndRxTxTransaction+0x3a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010522:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8010524:	f043 0320 	orr.w	r3, r3, #32
 8010528:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 801052a:	2003      	movs	r0, #3
 801052c:	e7f0      	b.n	8010510 <SPI_EndRxTxTransaction+0x3c>
 801052e:	bf00      	nop
 8010530:	2000000c 	.word	0x2000000c
 8010534:	165e9f81 	.word	0x165e9f81

08010538 <HAL_SPI_TransmitReceive.part.3>:
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8010538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801053c:	4604      	mov	r4, r0
 801053e:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8010540:	2001      	movs	r0, #1
 8010542:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8010546:	4691      	mov	r9, r2
 8010548:	4698      	mov	r8, r3
 801054a:	460f      	mov	r7, r1
 801054c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  tickstart = HAL_GetTick();
 801054e:	f7fe fd35 	bl	800efbc <HAL_GetTick>
  tmp_state           = hspi->State;
 8010552:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8010556:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8010558:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801055a:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 801055c:	4606      	mov	r6, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801055e:	d011      	beq.n	8010584 <HAL_SPI_TransmitReceive.part.3+0x4c>
 8010560:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8010564:	d009      	beq.n	801057a <HAL_SPI_TransmitReceive.part.3+0x42>
    errorcode = HAL_BUSY;
 8010566:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8010568:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 801056a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 801056c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010570:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8010574:	b003      	add	sp, #12
 8010576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801057a:	68a1      	ldr	r1, [r4, #8]
 801057c:	2900      	cmp	r1, #0
 801057e:	d1f2      	bne.n	8010566 <HAL_SPI_TransmitReceive.part.3+0x2e>
 8010580:	2b04      	cmp	r3, #4
 8010582:	d1f0      	bne.n	8010566 <HAL_SPI_TransmitReceive.part.3+0x2e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010584:	2f00      	cmp	r7, #0
 8010586:	d064      	beq.n	8010652 <HAL_SPI_TransmitReceive.part.3+0x11a>
 8010588:	f1b9 0f00 	cmp.w	r9, #0
 801058c:	d061      	beq.n	8010652 <HAL_SPI_TransmitReceive.part.3+0x11a>
 801058e:	f1b8 0f00 	cmp.w	r8, #0
 8010592:	d05e      	beq.n	8010652 <HAL_SPI_TransmitReceive.part.3+0x11a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010594:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010598:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801059a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801059e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80105a0:	bf1c      	itt	ne
 80105a2:	2305      	movne	r3, #5
 80105a4:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80105a8:	2300      	movs	r3, #0
 80105aa:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 80105ac:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80105b0:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80105b4:	6808      	ldr	r0, [r1, #0]
  hspi->RxXferSize  = Size;
 80105b6:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80105ba:	0640      	lsls	r0, r0, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80105bc:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80105be:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 80105c2:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80105c6:	d546      	bpl.n	8010656 <HAL_SPI_TransmitReceive.part.3+0x11e>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80105c8:	68e3      	ldr	r3, [r4, #12]
 80105ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105ce:	d056      	beq.n	801067e <HAL_SPI_TransmitReceive.part.3+0x146>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80105d0:	2a00      	cmp	r2, #0
 80105d2:	d145      	bne.n	8010660 <HAL_SPI_TransmitReceive.part.3+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80105d4:	783b      	ldrb	r3, [r7, #0]
 80105d6:	730b      	strb	r3, [r1, #12]
      hspi->TxXferCount--;
 80105d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80105da:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80105dc:	3b01      	subs	r3, #1
 80105de:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80105e0:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80105e2:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80105e4:	6322      	str	r2, [r4, #48]	; 0x30
        txallowed = 1U;
 80105e6:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80105e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	b91b      	cbnz	r3, 80105f6 <HAL_SPI_TransmitReceive.part.3+0xbe>
 80105ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d038      	beq.n	8010668 <HAL_SPI_TransmitReceive.part.3+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80105f6:	6823      	ldr	r3, [r4, #0]
 80105f8:	689a      	ldr	r2, [r3, #8]
 80105fa:	0791      	lsls	r1, r2, #30
 80105fc:	d50f      	bpl.n	801061e <HAL_SPI_TransmitReceive.part.3+0xe6>
 80105fe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8010600:	b292      	uxth	r2, r2
 8010602:	b162      	cbz	r2, 801061e <HAL_SPI_TransmitReceive.part.3+0xe6>
 8010604:	b15f      	cbz	r7, 801061e <HAL_SPI_TransmitReceive.part.3+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010606:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010608:	7812      	ldrb	r2, [r2, #0]
 801060a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 801060c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 801060e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010610:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 8010612:	3a01      	subs	r2, #1
 8010614:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 8010616:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8010618:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 801061a:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 801061c:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801061e:	689a      	ldr	r2, [r3, #8]
 8010620:	07d2      	lsls	r2, r2, #31
 8010622:	d50d      	bpl.n	8010640 <HAL_SPI_TransmitReceive.part.3+0x108>
 8010624:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8010626:	b292      	uxth	r2, r2
 8010628:	b152      	cbz	r2, 8010640 <HAL_SPI_TransmitReceive.part.3+0x108>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801062a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8010630:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8010632:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8010634:	3b01      	subs	r3, #1
 8010636:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8010638:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 801063a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 801063c:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 801063e:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010640:	f7fe fcbc 	bl	800efbc <HAL_GetTick>
 8010644:	1b80      	subs	r0, r0, r6
 8010646:	4285      	cmp	r5, r0
 8010648:	d8ce      	bhi.n	80105e8 <HAL_SPI_TransmitReceive.part.3+0xb0>
 801064a:	1c6b      	adds	r3, r5, #1
 801064c:	d0cc      	beq.n	80105e8 <HAL_SPI_TransmitReceive.part.3+0xb0>
        errorcode = HAL_TIMEOUT;
 801064e:	2003      	movs	r0, #3
 8010650:	e78a      	b.n	8010568 <HAL_SPI_TransmitReceive.part.3+0x30>
    errorcode = HAL_ERROR;
 8010652:	2001      	movs	r0, #1
 8010654:	e788      	b.n	8010568 <HAL_SPI_TransmitReceive.part.3+0x30>
    __HAL_SPI_ENABLE(hspi);
 8010656:	680b      	ldr	r3, [r1, #0]
 8010658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801065c:	600b      	str	r3, [r1, #0]
 801065e:	e7b3      	b.n	80105c8 <HAL_SPI_TransmitReceive.part.3+0x90>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010660:	f1b8 0f01 	cmp.w	r8, #1
 8010664:	d1bf      	bne.n	80105e6 <HAL_SPI_TransmitReceive.part.3+0xae>
 8010666:	e7b5      	b.n	80105d4 <HAL_SPI_TransmitReceive.part.3+0x9c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010668:	4632      	mov	r2, r6
 801066a:	4629      	mov	r1, r5
 801066c:	4620      	mov	r0, r4
 801066e:	f7ff ff31 	bl	80104d4 <SPI_EndRxTxTransaction>
 8010672:	2800      	cmp	r0, #0
 8010674:	d043      	beq.n	80106fe <HAL_SPI_TransmitReceive.part.3+0x1c6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010676:	2320      	movs	r3, #32
 8010678:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 801067a:	2001      	movs	r0, #1
 801067c:	e774      	b.n	8010568 <HAL_SPI_TransmitReceive.part.3+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801067e:	2a00      	cmp	r2, #0
 8010680:	d034      	beq.n	80106ec <HAL_SPI_TransmitReceive.part.3+0x1b4>
 8010682:	f1b8 0f01 	cmp.w	r8, #1
 8010686:	d031      	beq.n	80106ec <HAL_SPI_TransmitReceive.part.3+0x1b4>
        txallowed = 1U;
 8010688:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801068a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801068c:	b29b      	uxth	r3, r3
 801068e:	b91b      	cbnz	r3, 8010698 <HAL_SPI_TransmitReceive.part.3+0x160>
 8010690:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010692:	b29b      	uxth	r3, r3
 8010694:	2b00      	cmp	r3, #0
 8010696:	d0e7      	beq.n	8010668 <HAL_SPI_TransmitReceive.part.3+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010698:	6823      	ldr	r3, [r4, #0]
 801069a:	689a      	ldr	r2, [r3, #8]
 801069c:	0791      	lsls	r1, r2, #30
 801069e:	d50d      	bpl.n	80106bc <HAL_SPI_TransmitReceive.part.3+0x184>
 80106a0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80106a2:	b292      	uxth	r2, r2
 80106a4:	b152      	cbz	r2, 80106bc <HAL_SPI_TransmitReceive.part.3+0x184>
 80106a6:	b14f      	cbz	r7, 80106bc <HAL_SPI_TransmitReceive.part.3+0x184>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80106a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80106aa:	f831 2b02 	ldrh.w	r2, [r1], #2
 80106ae:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80106b0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80106b2:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80106b4:	3a01      	subs	r2, #1
 80106b6:	b292      	uxth	r2, r2
 80106b8:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 80106ba:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80106bc:	689a      	ldr	r2, [r3, #8]
 80106be:	07d2      	lsls	r2, r2, #31
 80106c0:	d50c      	bpl.n	80106dc <HAL_SPI_TransmitReceive.part.3+0x1a4>
 80106c2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80106c4:	b292      	uxth	r2, r2
 80106c6:	b14a      	cbz	r2, 80106dc <HAL_SPI_TransmitReceive.part.3+0x1a4>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80106c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80106ca:	68db      	ldr	r3, [r3, #12]
 80106cc:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 80106d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80106d2:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80106d4:	3b01      	subs	r3, #1
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80106da:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80106dc:	f7fe fc6e 	bl	800efbc <HAL_GetTick>
 80106e0:	1b80      	subs	r0, r0, r6
 80106e2:	42a8      	cmp	r0, r5
 80106e4:	d3d1      	bcc.n	801068a <HAL_SPI_TransmitReceive.part.3+0x152>
 80106e6:	1c68      	adds	r0, r5, #1
 80106e8:	d0cf      	beq.n	801068a <HAL_SPI_TransmitReceive.part.3+0x152>
 80106ea:	e7b0      	b.n	801064e <HAL_SPI_TransmitReceive.part.3+0x116>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80106ec:	f837 3b02 	ldrh.w	r3, [r7], #2
 80106f0:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 80106f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80106f4:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80106f6:	3b01      	subs	r3, #1
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	86e3      	strh	r3, [r4, #54]	; 0x36
 80106fc:	e7c4      	b.n	8010688 <HAL_SPI_TransmitReceive.part.3+0x150>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80106fe:	68a3      	ldr	r3, [r4, #8]
 8010700:	2b00      	cmp	r3, #0
 8010702:	f47f af31 	bne.w	8010568 <HAL_SPI_TransmitReceive.part.3+0x30>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010706:	6823      	ldr	r3, [r4, #0]
 8010708:	9001      	str	r0, [sp, #4]
 801070a:	68da      	ldr	r2, [r3, #12]
 801070c:	9201      	str	r2, [sp, #4]
 801070e:	689b      	ldr	r3, [r3, #8]
 8010710:	9301      	str	r3, [sp, #4]
 8010712:	9b01      	ldr	r3, [sp, #4]
 8010714:	e728      	b.n	8010568 <HAL_SPI_TransmitReceive.part.3+0x30>
 8010716:	bf00      	nop

08010718 <HAL_SPI_Init>:
  if (hspi == NULL)
 8010718:	2800      	cmp	r0, #0
 801071a:	d03b      	beq.n	8010794 <HAL_SPI_Init+0x7c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 801071c:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010720:	2300      	movs	r3, #0
{
 8010722:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8010724:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8010728:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801072a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 801072c:	b362      	cbz	r2, 8010788 <HAL_SPI_Init+0x70>
 801072e:	4618      	mov	r0, r3
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010730:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010734:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8010738:	432b      	orrs	r3, r5
 801073a:	4313      	orrs	r3, r2
 801073c:	6962      	ldr	r2, [r4, #20]
 801073e:	69e5      	ldr	r5, [r4, #28]
 8010740:	6a26      	ldr	r6, [r4, #32]
 8010742:	430b      	orrs	r3, r1
 8010744:	4313      	orrs	r3, r2
 8010746:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8010748:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801074a:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 801074c:	2502      	movs	r5, #2
 801074e:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010752:	4333      	orrs	r3, r6
 8010754:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 8010758:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801075a:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 801075c:	0c12      	lsrs	r2, r2, #16
 801075e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010760:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010764:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8010766:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8010768:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 801076c:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801076e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8010770:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010772:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010774:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 801077a:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801077c:	61cb      	str	r3, [r1, #28]
  return HAL_OK;
 801077e:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010780:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010782:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8010786:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8010788:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 801078c:	f7fd fc88 	bl	800e0a0 <HAL_SPI_MspInit>
 8010790:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010792:	e7cd      	b.n	8010730 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8010794:	2001      	movs	r0, #1
}
 8010796:	4770      	bx	lr

08010798 <HAL_SPI_Transmit>:
{
 8010798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 801079c:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 80107a0:	2c01      	cmp	r4, #1
{
 80107a2:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80107a4:	d073      	beq.n	801088e <HAL_SPI_Transmit+0xf6>
 80107a6:	461d      	mov	r5, r3
 80107a8:	2301      	movs	r3, #1
 80107aa:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 80107ae:	4604      	mov	r4, r0
 80107b0:	4617      	mov	r7, r2
 80107b2:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 80107b4:	f7fe fc02 	bl	800efbc <HAL_GetTick>
 80107b8:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80107ba:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80107be:	b2c0      	uxtb	r0, r0
 80107c0:	2801      	cmp	r0, #1
 80107c2:	d009      	beq.n	80107d8 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 80107c4:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80107c6:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80107c8:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80107ca:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80107ce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80107d2:	b002      	add	sp, #8
 80107d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80107d8:	f1b8 0f00 	cmp.w	r8, #0
 80107dc:	d0f3      	beq.n	80107c6 <HAL_SPI_Transmit+0x2e>
 80107de:	2f00      	cmp	r7, #0
 80107e0:	d0f1      	beq.n	80107c6 <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107e2:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80107e4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80107e8:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80107ea:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107ec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80107f0:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80107f4:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80107f6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferSize  = 0U;
 80107f8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80107fa:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80107fe:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010800:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxXferCount = 0U;
 8010802:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8010804:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010806:	d103      	bne.n	8010810 <HAL_SPI_Transmit+0x78>
    SPI_1LINE_TX(hspi);
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801080e:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	0652      	lsls	r2, r2, #25
 8010814:	d53f      	bpl.n	8010896 <HAL_SPI_Transmit+0xfe>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010816:	68e2      	ldr	r2, [r4, #12]
 8010818:	6861      	ldr	r1, [r4, #4]
 801081a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801081e:	d04b      	beq.n	80108b8 <HAL_SPI_Transmit+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010820:	2900      	cmp	r1, #0
 8010822:	d13d      	bne.n	80108a0 <HAL_SPI_Transmit+0x108>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010824:	f898 2000 	ldrb.w	r2, [r8]
 8010828:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 801082a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801082c:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 801082e:	3b01      	subs	r3, #1
 8010830:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010832:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8010834:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010836:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8010838:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801083a:	b29b      	uxth	r3, r3
 801083c:	b18b      	cbz	r3, 8010862 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801083e:	6823      	ldr	r3, [r4, #0]
 8010840:	689a      	ldr	r2, [r3, #8]
 8010842:	0792      	lsls	r2, r2, #30
 8010844:	d52f      	bpl.n	80108a6 <HAL_SPI_Transmit+0x10e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010846:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010848:	7812      	ldrb	r2, [r2, #0]
 801084a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 801084c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801084e:	6b21      	ldr	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8010850:	3b01      	subs	r3, #1
 8010852:	b29b      	uxth	r3, r3
 8010854:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8010856:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010858:	3101      	adds	r1, #1
    while (hspi->TxXferCount > 0U)
 801085a:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801085c:	6321      	str	r1, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 801085e:	2b00      	cmp	r3, #0
 8010860:	d1ed      	bne.n	801083e <HAL_SPI_Transmit+0xa6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010862:	4632      	mov	r2, r6
 8010864:	4629      	mov	r1, r5
 8010866:	4620      	mov	r0, r4
 8010868:	f7ff fe34 	bl	80104d4 <SPI_EndRxTxTransaction>
 801086c:	b108      	cbz	r0, 8010872 <HAL_SPI_Transmit+0xda>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801086e:	2320      	movs	r3, #32
 8010870:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010872:	68a3      	ldr	r3, [r4, #8]
 8010874:	b933      	cbnz	r3, 8010884 <HAL_SPI_Transmit+0xec>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010876:	6822      	ldr	r2, [r4, #0]
 8010878:	9301      	str	r3, [sp, #4]
 801087a:	68d3      	ldr	r3, [r2, #12]
 801087c:	9301      	str	r3, [sp, #4]
 801087e:	6893      	ldr	r3, [r2, #8]
 8010880:	9301      	str	r3, [sp, #4]
 8010882:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010884:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8010886:	3000      	adds	r0, #0
 8010888:	bf18      	it	ne
 801088a:	2001      	movne	r0, #1
error:
 801088c:	e79b      	b.n	80107c6 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 801088e:	2002      	movs	r0, #2
}
 8010890:	b002      	add	sp, #8
 8010892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 8010896:	681a      	ldr	r2, [r3, #0]
 8010898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801089c:	601a      	str	r2, [r3, #0]
 801089e:	e7ba      	b.n	8010816 <HAL_SPI_Transmit+0x7e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80108a0:	2f01      	cmp	r7, #1
 80108a2:	d1c9      	bne.n	8010838 <HAL_SPI_Transmit+0xa0>
 80108a4:	e7be      	b.n	8010824 <HAL_SPI_Transmit+0x8c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80108a6:	f7fe fb89 	bl	800efbc <HAL_GetTick>
 80108aa:	1b80      	subs	r0, r0, r6
 80108ac:	42a8      	cmp	r0, r5
 80108ae:	d3c3      	bcc.n	8010838 <HAL_SPI_Transmit+0xa0>
 80108b0:	1c6b      	adds	r3, r5, #1
 80108b2:	d0c1      	beq.n	8010838 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 80108b4:	2003      	movs	r0, #3
 80108b6:	e786      	b.n	80107c6 <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80108b8:	b311      	cbz	r1, 8010900 <HAL_SPI_Transmit+0x168>
 80108ba:	2f01      	cmp	r7, #1
 80108bc:	d020      	beq.n	8010900 <HAL_SPI_Transmit+0x168>
    while (hspi->TxXferCount > 0U)
 80108be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d0cd      	beq.n	8010862 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80108c6:	6823      	ldr	r3, [r4, #0]
 80108c8:	689a      	ldr	r2, [r3, #8]
 80108ca:	0790      	lsls	r0, r2, #30
 80108cc:	d510      	bpl.n	80108f0 <HAL_SPI_Transmit+0x158>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80108ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80108d0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80108d4:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 80108d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80108d8:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80108da:	3b01      	subs	r3, #1
 80108dc:	b29b      	uxth	r3, r3
 80108de:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80108e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80108e2:	b29b      	uxth	r3, r3
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d0bc      	beq.n	8010862 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80108e8:	6823      	ldr	r3, [r4, #0]
 80108ea:	689a      	ldr	r2, [r3, #8]
 80108ec:	0790      	lsls	r0, r2, #30
 80108ee:	d4ee      	bmi.n	80108ce <HAL_SPI_Transmit+0x136>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80108f0:	f7fe fb64 	bl	800efbc <HAL_GetTick>
 80108f4:	1b80      	subs	r0, r0, r6
 80108f6:	42a8      	cmp	r0, r5
 80108f8:	d3e1      	bcc.n	80108be <HAL_SPI_Transmit+0x126>
 80108fa:	1c69      	adds	r1, r5, #1
 80108fc:	d0df      	beq.n	80108be <HAL_SPI_Transmit+0x126>
 80108fe:	e7d9      	b.n	80108b4 <HAL_SPI_Transmit+0x11c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010900:	4641      	mov	r1, r8
 8010902:	f831 2b02 	ldrh.w	r2, [r1], #2
 8010906:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8010908:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801090a:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 801090c:	3b01      	subs	r3, #1
 801090e:	b29b      	uxth	r3, r3
 8010910:	86e3      	strh	r3, [r4, #54]	; 0x36
 8010912:	e7d4      	b.n	80108be <HAL_SPI_Transmit+0x126>

08010914 <HAL_SPI_Receive>:
{
 8010914:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8010918:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801091a:	6842      	ldr	r2, [r0, #4]
 801091c:	f890 5050 	ldrb.w	r5, [r0, #80]	; 0x50
 8010920:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8010924:	b082      	sub	sp, #8
 8010926:	4604      	mov	r4, r0
 8010928:	461f      	mov	r7, r3
 801092a:	4689      	mov	r9, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801092c:	d016      	beq.n	801095c <HAL_SPI_Receive+0x48>
  __HAL_LOCK(hspi);
 801092e:	2d01      	cmp	r5, #1
 8010930:	d024      	beq.n	801097c <HAL_SPI_Receive+0x68>
 8010932:	2301      	movs	r3, #1
 8010934:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8010938:	f7fe fb40 	bl	800efbc <HAL_GetTick>
 801093c:	4605      	mov	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 801093e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8010942:	b2c0      	uxtb	r0, r0
 8010944:	2801      	cmp	r0, #1
 8010946:	d01d      	beq.n	8010984 <HAL_SPI_Receive+0x70>
    errorcode = HAL_BUSY;
 8010948:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 801094a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 801094c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 801094e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010952:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8010956:	b002      	add	sp, #8
 8010958:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801095c:	6883      	ldr	r3, [r0, #8]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d1e5      	bne.n	801092e <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010962:	2304      	movs	r3, #4
  __HAL_LOCK(hspi);
 8010964:	2d01      	cmp	r5, #1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010966:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_LOCK(hspi);
 801096a:	d007      	beq.n	801097c <HAL_SPI_Receive+0x68>
 801096c:	9700      	str	r7, [sp, #0]
 801096e:	4633      	mov	r3, r6
 8010970:	460a      	mov	r2, r1
 8010972:	f7ff fde1 	bl	8010538 <HAL_SPI_TransmitReceive.part.3>
}
 8010976:	b002      	add	sp, #8
 8010978:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  __HAL_LOCK(hspi);
 801097c:	2002      	movs	r0, #2
}
 801097e:	b002      	add	sp, #8
 8010980:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 8010984:	f1b9 0f00 	cmp.w	r9, #0
 8010988:	d0df      	beq.n	801094a <HAL_SPI_Receive+0x36>
 801098a:	2e00      	cmp	r6, #0
 801098c:	d0dd      	beq.n	801094a <HAL_SPI_Receive+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801098e:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010990:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010994:	2304      	movs	r3, #4
 8010996:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801099a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801099e:	f04f 0300 	mov.w	r3, #0
 80109a2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80109a4:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80109a6:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 80109a8:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80109ac:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80109ae:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80109b0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80109b2:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80109b4:	d050      	beq.n	8010a58 <HAL_SPI_Receive+0x144>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	0656      	lsls	r6, r2, #25
 80109ba:	d403      	bmi.n	80109c4 <HAL_SPI_Receive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80109c2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80109c4:	68e3      	ldr	r3, [r4, #12]
 80109c6:	bb43      	cbnz	r3, 8010a1a <HAL_SPI_Receive+0x106>
    while (hspi->RxXferCount > 0U)
 80109c8:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80109ca:	b289      	uxth	r1, r1
 80109cc:	b189      	cbz	r1, 80109f2 <HAL_SPI_Receive+0xde>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80109ce:	6823      	ldr	r3, [r4, #0]
 80109d0:	689a      	ldr	r2, [r3, #8]
 80109d2:	07d0      	lsls	r0, r2, #31
 80109d4:	d537      	bpl.n	8010a46 <HAL_SPI_Receive+0x132>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80109d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80109d8:	7b1b      	ldrb	r3, [r3, #12]
 80109da:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 80109dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80109de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80109e0:	3b01      	subs	r3, #1
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80109e6:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80109e8:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 80109ea:	b289      	uxth	r1, r1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80109ec:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 80109ee:	2900      	cmp	r1, #0
 80109f0:	d1ed      	bne.n	80109ce <HAL_SPI_Receive+0xba>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80109f2:	462a      	mov	r2, r5
 80109f4:	4639      	mov	r1, r7
 80109f6:	4620      	mov	r0, r4
 80109f8:	f7ff fd38 	bl	801046c <SPI_EndRxTransaction>
 80109fc:	b108      	cbz	r0, 8010a02 <HAL_SPI_Receive+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80109fe:	2320      	movs	r3, #32
 8010a00:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010a02:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8010a04:	3000      	adds	r0, #0
 8010a06:	bf18      	it	ne
 8010a08:	2001      	movne	r0, #1
error :
 8010a0a:	e79e      	b.n	801094a <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010a0c:	f7fe fad6 	bl	800efbc <HAL_GetTick>
 8010a10:	1b40      	subs	r0, r0, r5
 8010a12:	42b8      	cmp	r0, r7
 8010a14:	d301      	bcc.n	8010a1a <HAL_SPI_Receive+0x106>
 8010a16:	1c7b      	adds	r3, r7, #1
 8010a18:	d11c      	bne.n	8010a54 <HAL_SPI_Receive+0x140>
    while (hspi->RxXferCount > 0U)
 8010a1a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8010a1c:	b289      	uxth	r1, r1
 8010a1e:	2900      	cmp	r1, #0
 8010a20:	d0e7      	beq.n	80109f2 <HAL_SPI_Receive+0xde>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010a22:	6823      	ldr	r3, [r4, #0]
 8010a24:	689a      	ldr	r2, [r3, #8]
 8010a26:	07d2      	lsls	r2, r2, #31
 8010a28:	d5f0      	bpl.n	8010a0c <HAL_SPI_Receive+0xf8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010a2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010a2c:	68db      	ldr	r3, [r3, #12]
 8010a2e:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8010a32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010a34:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8010a36:	3b01      	subs	r3, #1
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8010a3c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8010a3e:	b289      	uxth	r1, r1
 8010a40:	2900      	cmp	r1, #0
 8010a42:	d1ee      	bne.n	8010a22 <HAL_SPI_Receive+0x10e>
 8010a44:	e7d5      	b.n	80109f2 <HAL_SPI_Receive+0xde>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010a46:	f7fe fab9 	bl	800efbc <HAL_GetTick>
 8010a4a:	1b40      	subs	r0, r0, r5
 8010a4c:	42b8      	cmp	r0, r7
 8010a4e:	d3bb      	bcc.n	80109c8 <HAL_SPI_Receive+0xb4>
 8010a50:	1c79      	adds	r1, r7, #1
 8010a52:	d0b9      	beq.n	80109c8 <HAL_SPI_Receive+0xb4>
          errorcode = HAL_TIMEOUT;
 8010a54:	2003      	movs	r0, #3
 8010a56:	e778      	b.n	801094a <HAL_SPI_Receive+0x36>
    SPI_1LINE_RX(hspi);
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010a5e:	601a      	str	r2, [r3, #0]
 8010a60:	e7a9      	b.n	80109b6 <HAL_SPI_Receive+0xa2>
 8010a62:	bf00      	nop

08010a64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010a64:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010a66:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010a68:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8010a6a:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010a6c:	4d14      	ldr	r5, [pc, #80]	; (8010ac0 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010a6e:	f024 0401 	bic.w	r4, r4, #1
 8010a72:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8010a74:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8010a76:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8010a78:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8010a7a:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010a7e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010a82:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8010a84:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 8010a88:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010a8c:	d00a      	beq.n	8010aa4 <TIM_OC1_SetConfig+0x40>
 8010a8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010a92:	42a8      	cmp	r0, r5
 8010a94:	d006      	beq.n	8010aa4 <TIM_OC1_SetConfig+0x40>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010a96:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8010a98:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8010a9a:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8010a9c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8010a9e:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8010aa0:	6203      	str	r3, [r0, #32]
}
 8010aa2:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8010aa4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8010aa6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8010aaa:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8010aac:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010ab0:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8010ab4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8010ab6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8010aba:	432c      	orrs	r4, r5
 8010abc:	e7eb      	b.n	8010a96 <TIM_OC1_SetConfig+0x32>
 8010abe:	bf00      	nop
 8010ac0:	40010000 	.word	0x40010000

08010ac4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010ac4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010ac6:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010ac8:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8010aca:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010acc:	4d15      	ldr	r5, [pc, #84]	; (8010b24 <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010ace:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8010ad2:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8010ad4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8010ad6:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8010ad8:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8010ada:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010ade:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010ae2:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010ae4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8010ae8:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010aec:	d00a      	beq.n	8010b04 <TIM_OC3_SetConfig+0x40>
 8010aee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010af2:	42a8      	cmp	r0, r5
 8010af4:	d006      	beq.n	8010b04 <TIM_OC3_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010af6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8010af8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8010afa:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8010afc:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8010afe:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8010b00:	6203      	str	r3, [r0, #32]
}
 8010b02:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010b04:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8010b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010b0a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010b0e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010b12:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010b16:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8010b18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010b1c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8010b20:	e7e9      	b.n	8010af6 <TIM_OC3_SetConfig+0x32>
 8010b22:	bf00      	nop
 8010b24:	40010000 	.word	0x40010000

08010b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010b28:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010b2a:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010b2c:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010b2e:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b30:	4d10      	ldr	r5, [pc, #64]	; (8010b74 <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010b32:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8010b36:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8010b38:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8010b3a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8010b3c:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8010b3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010b42:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b46:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010b48:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010b4c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b50:	d00a      	beq.n	8010b68 <TIM_OC4_SetConfig+0x40>
 8010b52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010b56:	42a8      	cmp	r0, r5
 8010b58:	d006      	beq.n	8010b68 <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010b5a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8010b5c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8010b5e:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8010b60:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8010b62:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8010b64:	6203      	str	r3, [r0, #32]
}
 8010b66:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010b68:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010b6a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010b6e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8010b72:	e7f2      	b.n	8010b5a <TIM_OC4_SetConfig+0x32>
 8010b74:	40010000 	.word	0x40010000

08010b78 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010b78:	6803      	ldr	r3, [r0, #0]
 8010b7a:	68da      	ldr	r2, [r3, #12]
 8010b7c:	f042 0201 	orr.w	r2, r2, #1
 8010b80:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010b82:	689a      	ldr	r2, [r3, #8]
 8010b84:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b88:	2a06      	cmp	r2, #6
 8010b8a:	d003      	beq.n	8010b94 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8010b8c:	681a      	ldr	r2, [r3, #0]
 8010b8e:	f042 0201 	orr.w	r2, r2, #1
 8010b92:	601a      	str	r2, [r3, #0]
}
 8010b94:	2000      	movs	r0, #0
 8010b96:	4770      	bx	lr

08010b98 <HAL_TIM_OC_MspInit>:
 8010b98:	4770      	bx	lr
 8010b9a:	bf00      	nop

08010b9c <HAL_TIM_OC_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010b9c:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010b9e:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010ba0:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010ba2:	f001 011f 	and.w	r1, r1, #31
 8010ba6:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8010baa:	ea20 0001 	bic.w	r0, r0, r1
{
 8010bae:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8010bb0:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010bb2:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010bb4:	4c0c      	ldr	r4, [pc, #48]	; (8010be8 <HAL_TIM_OC_Start+0x4c>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010bb6:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010bb8:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010bba:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010bbc:	d00f      	beq.n	8010bde <HAL_TIM_OC_Start+0x42>
 8010bbe:	4a0b      	ldr	r2, [pc, #44]	; (8010bec <HAL_TIM_OC_Start+0x50>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d00c      	beq.n	8010bde <HAL_TIM_OC_Start+0x42>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010bc4:	689a      	ldr	r2, [r3, #8]
 8010bc6:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bca:	2a06      	cmp	r2, #6
 8010bcc:	d003      	beq.n	8010bd6 <HAL_TIM_OC_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8010bce:	681a      	ldr	r2, [r3, #0]
 8010bd0:	f042 0201 	orr.w	r2, r2, #1
 8010bd4:	601a      	str	r2, [r3, #0]
}
 8010bd6:	2000      	movs	r0, #0
 8010bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bdc:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8010bde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010be0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010be4:	645a      	str	r2, [r3, #68]	; 0x44
 8010be6:	e7ed      	b.n	8010bc4 <HAL_TIM_OC_Start+0x28>
 8010be8:	40010000 	.word	0x40010000
 8010bec:	40010400 	.word	0x40010400

08010bf0 <HAL_TIM_OC_Start_IT>:
{
 8010bf0:	b410      	push	{r4}
 8010bf2:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010bf4:	290c      	cmp	r1, #12
 8010bf6:	d80c      	bhi.n	8010c12 <HAL_TIM_OC_Start_IT+0x22>
 8010bf8:	e8df f001 	tbb	[pc, r1]
 8010bfc:	0b0b0b07 	.word	0x0b0b0b07
 8010c00:	0b0b0b39 	.word	0x0b0b0b39
 8010c04:	0b0b0b34 	.word	0x0b0b0b34
 8010c08:	2f          	.byte	0x2f
 8010c09:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010c0a:	68da      	ldr	r2, [r3, #12]
 8010c0c:	f042 0202 	orr.w	r2, r2, #2
 8010c10:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8010c12:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010c14:	4c18      	ldr	r4, [pc, #96]	; (8010c78 <HAL_TIM_OC_Start_IT+0x88>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010c16:	f001 021f 	and.w	r2, r1, #31
 8010c1a:	2101      	movs	r1, #1
 8010c1c:	4091      	lsls	r1, r2
  TIMx->CCER &= ~tmp;
 8010c1e:	ea20 0001 	bic.w	r0, r0, r1
 8010c22:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010c24:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010c26:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010c28:	ea41 0102 	orr.w	r1, r1, r2
 8010c2c:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010c2e:	d00f      	beq.n	8010c50 <HAL_TIM_OC_Start_IT+0x60>
 8010c30:	4a12      	ldr	r2, [pc, #72]	; (8010c7c <HAL_TIM_OC_Start_IT+0x8c>)
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d00c      	beq.n	8010c50 <HAL_TIM_OC_Start_IT+0x60>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010c36:	689a      	ldr	r2, [r3, #8]
 8010c38:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c3c:	2a06      	cmp	r2, #6
 8010c3e:	d003      	beq.n	8010c48 <HAL_TIM_OC_Start_IT+0x58>
    __HAL_TIM_ENABLE(htim);
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	f042 0201 	orr.w	r2, r2, #1
 8010c46:	601a      	str	r2, [r3, #0]
}
 8010c48:	2000      	movs	r0, #0
 8010c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c4e:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8010c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010c56:	645a      	str	r2, [r3, #68]	; 0x44
 8010c58:	e7ed      	b.n	8010c36 <HAL_TIM_OC_Start_IT+0x46>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010c5a:	68da      	ldr	r2, [r3, #12]
 8010c5c:	f042 0210 	orr.w	r2, r2, #16
 8010c60:	60da      	str	r2, [r3, #12]
      break;
 8010c62:	e7d6      	b.n	8010c12 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010c64:	68da      	ldr	r2, [r3, #12]
 8010c66:	f042 0208 	orr.w	r2, r2, #8
 8010c6a:	60da      	str	r2, [r3, #12]
      break;
 8010c6c:	e7d1      	b.n	8010c12 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010c6e:	68da      	ldr	r2, [r3, #12]
 8010c70:	f042 0204 	orr.w	r2, r2, #4
 8010c74:	60da      	str	r2, [r3, #12]
      break;
 8010c76:	e7cc      	b.n	8010c12 <HAL_TIM_OC_Start_IT+0x22>
 8010c78:	40010000 	.word	0x40010000
 8010c7c:	40010400 	.word	0x40010400

08010c80 <HAL_TIM_OC_Stop_IT>:
{
 8010c80:	b410      	push	{r4}
 8010c82:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010c84:	290c      	cmp	r1, #12
 8010c86:	d80c      	bhi.n	8010ca2 <HAL_TIM_OC_Stop_IT+0x22>
 8010c88:	e8df f001 	tbb	[pc, r1]
 8010c8c:	0b0b0b07 	.word	0x0b0b0b07
 8010c90:	0b0b0b47 	.word	0x0b0b0b47
 8010c94:	0b0b0b42 	.word	0x0b0b0b42
 8010c98:	3d          	.byte	0x3d
 8010c99:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010c9a:	68da      	ldr	r2, [r3, #12]
 8010c9c:	f022 0202 	bic.w	r2, r2, #2
 8010ca0:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8010ca2:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010ca4:	4c1f      	ldr	r4, [pc, #124]	; (8010d24 <HAL_TIM_OC_Stop_IT+0xa4>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010ca6:	f001 011f 	and.w	r1, r1, #31
 8010caa:	2001      	movs	r0, #1
 8010cac:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &= ~tmp;
 8010cb0:	ea22 0101 	bic.w	r1, r2, r1
 8010cb4:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010cb6:	6a1a      	ldr	r2, [r3, #32]
 8010cb8:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010cba:	42a3      	cmp	r3, r4
 8010cbc:	d014      	beq.n	8010ce8 <HAL_TIM_OC_Stop_IT+0x68>
 8010cbe:	4a1a      	ldr	r2, [pc, #104]	; (8010d28 <HAL_TIM_OC_Stop_IT+0xa8>)
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	d011      	beq.n	8010ce8 <HAL_TIM_OC_Stop_IT+0x68>
  __HAL_TIM_DISABLE(htim);
 8010cc4:	6a19      	ldr	r1, [r3, #32]
 8010cc6:	f241 1211 	movw	r2, #4369	; 0x1111
 8010cca:	4211      	tst	r1, r2
 8010ccc:	d108      	bne.n	8010ce0 <HAL_TIM_OC_Stop_IT+0x60>
 8010cce:	6a19      	ldr	r1, [r3, #32]
 8010cd0:	f240 4244 	movw	r2, #1092	; 0x444
 8010cd4:	4211      	tst	r1, r2
 8010cd6:	d103      	bne.n	8010ce0 <HAL_TIM_OC_Stop_IT+0x60>
 8010cd8:	681a      	ldr	r2, [r3, #0]
 8010cda:	f022 0201 	bic.w	r2, r2, #1
 8010cde:	601a      	str	r2, [r3, #0]
}
 8010ce0:	2000      	movs	r0, #0
 8010ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ce6:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8010ce8:	6a19      	ldr	r1, [r3, #32]
 8010cea:	f241 1211 	movw	r2, #4369	; 0x1111
 8010cee:	4211      	tst	r1, r2
 8010cf0:	d1e8      	bne.n	8010cc4 <HAL_TIM_OC_Stop_IT+0x44>
 8010cf2:	6a19      	ldr	r1, [r3, #32]
 8010cf4:	f240 4244 	movw	r2, #1092	; 0x444
 8010cf8:	4211      	tst	r1, r2
 8010cfa:	d1e3      	bne.n	8010cc4 <HAL_TIM_OC_Stop_IT+0x44>
 8010cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010cfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010d02:	645a      	str	r2, [r3, #68]	; 0x44
 8010d04:	e7de      	b.n	8010cc4 <HAL_TIM_OC_Stop_IT+0x44>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8010d06:	68da      	ldr	r2, [r3, #12]
 8010d08:	f022 0210 	bic.w	r2, r2, #16
 8010d0c:	60da      	str	r2, [r3, #12]
      break;
 8010d0e:	e7c8      	b.n	8010ca2 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010d10:	68da      	ldr	r2, [r3, #12]
 8010d12:	f022 0208 	bic.w	r2, r2, #8
 8010d16:	60da      	str	r2, [r3, #12]
      break;
 8010d18:	e7c3      	b.n	8010ca2 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010d1a:	68da      	ldr	r2, [r3, #12]
 8010d1c:	f022 0204 	bic.w	r2, r2, #4
 8010d20:	60da      	str	r2, [r3, #12]
      break;
 8010d22:	e7be      	b.n	8010ca2 <HAL_TIM_OC_Stop_IT+0x22>
 8010d24:	40010000 	.word	0x40010000
 8010d28:	40010400 	.word	0x40010400

08010d2c <HAL_TIM_PWM_MspInit>:
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop

08010d30 <HAL_TIM_PWM_Start>:
 8010d30:	f7ff bf34 	b.w	8010b9c <HAL_TIM_OC_Start>

08010d34 <HAL_TIM_Encoder_Start>:
{
 8010d34:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010d36:	b1c1      	cbz	r1, 8010d6a <HAL_TIM_Encoder_Start+0x36>
 8010d38:	2904      	cmp	r1, #4
 8010d3a:	d10d      	bne.n	8010d58 <HAL_TIM_Encoder_Start+0x24>
  TIMx->CCER &= ~tmp;
 8010d3c:	6a1a      	ldr	r2, [r3, #32]
 8010d3e:	f022 0210 	bic.w	r2, r2, #16
 8010d42:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010d44:	6a1a      	ldr	r2, [r3, #32]
 8010d46:	f042 0210 	orr.w	r2, r2, #16
 8010d4a:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8010d4c:	681a      	ldr	r2, [r3, #0]
 8010d4e:	f042 0201 	orr.w	r2, r2, #1
 8010d52:	601a      	str	r2, [r3, #0]
}
 8010d54:	2000      	movs	r0, #0
 8010d56:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 8010d58:	6a1a      	ldr	r2, [r3, #32]
 8010d5a:	f022 0201 	bic.w	r2, r2, #1
 8010d5e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010d60:	6a1a      	ldr	r2, [r3, #32]
 8010d62:	f042 0201 	orr.w	r2, r2, #1
 8010d66:	621a      	str	r2, [r3, #32]
 8010d68:	e7e8      	b.n	8010d3c <HAL_TIM_Encoder_Start+0x8>
  TIMx->CCER &= ~tmp;
 8010d6a:	6a1a      	ldr	r2, [r3, #32]
 8010d6c:	f022 0201 	bic.w	r2, r2, #1
 8010d70:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010d72:	6a1a      	ldr	r2, [r3, #32]
 8010d74:	f042 0201 	orr.w	r2, r2, #1
 8010d78:	621a      	str	r2, [r3, #32]
 8010d7a:	e7e7      	b.n	8010d4c <HAL_TIM_Encoder_Start+0x18>

08010d7c <HAL_TIM_Encoder_Stop>:
{
 8010d7c:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010d7e:	b1f1      	cbz	r1, 8010dbe <HAL_TIM_Encoder_Stop+0x42>
 8010d80:	2904      	cmp	r1, #4
 8010d82:	d115      	bne.n	8010db0 <HAL_TIM_Encoder_Stop+0x34>
  TIMx->CCER &= ~tmp;
 8010d84:	6a1a      	ldr	r2, [r3, #32]
 8010d86:	f022 0210 	bic.w	r2, r2, #16
 8010d8a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010d8c:	6a1a      	ldr	r2, [r3, #32]
 8010d8e:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 8010d90:	6a19      	ldr	r1, [r3, #32]
 8010d92:	f241 1211 	movw	r2, #4369	; 0x1111
 8010d96:	4211      	tst	r1, r2
 8010d98:	d108      	bne.n	8010dac <HAL_TIM_Encoder_Stop+0x30>
 8010d9a:	6a19      	ldr	r1, [r3, #32]
 8010d9c:	f240 4244 	movw	r2, #1092	; 0x444
 8010da0:	4211      	tst	r1, r2
 8010da2:	d103      	bne.n	8010dac <HAL_TIM_Encoder_Stop+0x30>
 8010da4:	681a      	ldr	r2, [r3, #0]
 8010da6:	f022 0201 	bic.w	r2, r2, #1
 8010daa:	601a      	str	r2, [r3, #0]
}
 8010dac:	2000      	movs	r0, #0
 8010dae:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 8010db0:	6a1a      	ldr	r2, [r3, #32]
 8010db2:	f022 0201 	bic.w	r2, r2, #1
 8010db6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010db8:	6a1a      	ldr	r2, [r3, #32]
 8010dba:	621a      	str	r2, [r3, #32]
 8010dbc:	e7e2      	b.n	8010d84 <HAL_TIM_Encoder_Stop+0x8>
  TIMx->CCER &= ~tmp;
 8010dbe:	6a1a      	ldr	r2, [r3, #32]
 8010dc0:	f022 0201 	bic.w	r2, r2, #1
 8010dc4:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010dc6:	6a1a      	ldr	r2, [r3, #32]
 8010dc8:	621a      	str	r2, [r3, #32]
 8010dca:	e7e1      	b.n	8010d90 <HAL_TIM_Encoder_Stop+0x14>

08010dcc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8010dcc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010dd0:	2b01      	cmp	r3, #1
 8010dd2:	d05a      	beq.n	8010e8a <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8010dd4:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8010dd6:	6803      	ldr	r3, [r0, #0]
{
 8010dd8:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8010dda:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8010dde:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8010de0:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010de2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8010de6:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 8010dea:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 8010dec:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8010dee:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8010df2:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8010df4:	d074      	beq.n	8010ee0 <HAL_TIM_ConfigClockSource+0x114>
 8010df6:	d94a      	bls.n	8010e8e <HAL_TIM_ConfigClockSource+0xc2>
 8010df8:	2c60      	cmp	r4, #96	; 0x60
 8010dfa:	d02d      	beq.n	8010e58 <HAL_TIM_ConfigClockSource+0x8c>
 8010dfc:	d956      	bls.n	8010eac <HAL_TIM_ConfigClockSource+0xe0>
 8010dfe:	2c70      	cmp	r4, #112	; 0x70
 8010e00:	d01a      	beq.n	8010e38 <HAL_TIM_ConfigClockSource+0x6c>
 8010e02:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8010e06:	d10e      	bne.n	8010e26 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010e08:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8010e0c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8010e0e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010e10:	432a      	orrs	r2, r5
 8010e12:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010e16:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010e1a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8010e1c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010e1e:	689a      	ldr	r2, [r3, #8]
 8010e20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010e24:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8010e26:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8010e28:	2201      	movs	r2, #1
 8010e2a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010e2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8010e32:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8010e34:	4618      	mov	r0, r3
}
 8010e36:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010e38:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8010e3c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8010e3e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010e40:	432a      	orrs	r2, r5
 8010e42:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010e46:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010e4a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8010e4c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8010e4e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010e50:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8010e54:	609a      	str	r2, [r3, #8]
      break;
 8010e56:	e7e6      	b.n	8010e26 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010e58:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010e5a:	684d      	ldr	r5, [r1, #4]
 8010e5c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010e5e:	f024 0410 	bic.w	r4, r4, #16
 8010e62:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010e64:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8010e66:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010e68:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010e6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8010e70:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010e74:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8010e78:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8010e7a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010e7c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010e7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010e82:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8010e86:	609a      	str	r2, [r3, #8]
 8010e88:	e7cd      	b.n	8010e26 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8010e8a:	2002      	movs	r0, #2
}
 8010e8c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8010e8e:	2c10      	cmp	r4, #16
 8010e90:	d004      	beq.n	8010e9c <HAL_TIM_ConfigClockSource+0xd0>
 8010e92:	d93d      	bls.n	8010f10 <HAL_TIM_ConfigClockSource+0x144>
 8010e94:	2c20      	cmp	r4, #32
 8010e96:	d001      	beq.n	8010e9c <HAL_TIM_ConfigClockSource+0xd0>
 8010e98:	2c30      	cmp	r4, #48	; 0x30
 8010e9a:	d1c4      	bne.n	8010e26 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8010e9c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010e9e:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8010ea2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010ea6:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8010ea8:	609c      	str	r4, [r3, #8]
 8010eaa:	e7bc      	b.n	8010e26 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8010eac:	2c50      	cmp	r4, #80	; 0x50
 8010eae:	d1ba      	bne.n	8010e26 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8010eb0:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010eb2:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010eb4:	684c      	ldr	r4, [r1, #4]
 8010eb6:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010eb8:	f026 0601 	bic.w	r6, r6, #1
 8010ebc:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010ebe:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010ec0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010ec4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010ec8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8010ecc:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8010ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010ed0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010ed2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010ed4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010ed8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8010edc:	609a      	str	r2, [r3, #8]
 8010ede:	e7a2      	b.n	8010e26 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8010ee0:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ee2:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ee4:	684c      	ldr	r4, [r1, #4]
 8010ee6:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ee8:	f026 0601 	bic.w	r6, r6, #1
 8010eec:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010eee:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010ef0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010ef4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010ef8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8010efc:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8010efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010f00:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010f02:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010f04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010f08:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8010f0c:	609a      	str	r2, [r3, #8]
 8010f0e:	e78a      	b.n	8010e26 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8010f10:	2c00      	cmp	r4, #0
 8010f12:	d0c3      	beq.n	8010e9c <HAL_TIM_ConfigClockSource+0xd0>
 8010f14:	e787      	b.n	8010e26 <HAL_TIM_ConfigClockSource+0x5a>
 8010f16:	bf00      	nop

08010f18 <HAL_TIM_OC_DelayElapsedCallback>:
 8010f18:	4770      	bx	lr
 8010f1a:	bf00      	nop

08010f1c <HAL_TIM_IC_CaptureCallback>:
 8010f1c:	4770      	bx	lr
 8010f1e:	bf00      	nop

08010f20 <HAL_TIM_PWM_PulseFinishedCallback>:
 8010f20:	4770      	bx	lr
 8010f22:	bf00      	nop

08010f24 <HAL_TIM_TriggerCallback>:
 8010f24:	4770      	bx	lr
 8010f26:	bf00      	nop

08010f28 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010f28:	6803      	ldr	r3, [r0, #0]
 8010f2a:	691a      	ldr	r2, [r3, #16]
 8010f2c:	0791      	lsls	r1, r2, #30
{
 8010f2e:	b510      	push	{r4, lr}
 8010f30:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010f32:	d502      	bpl.n	8010f3a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010f34:	68da      	ldr	r2, [r3, #12]
 8010f36:	0792      	lsls	r2, r2, #30
 8010f38:	d45f      	bmi.n	8010ffa <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010f3a:	691a      	ldr	r2, [r3, #16]
 8010f3c:	0750      	lsls	r0, r2, #29
 8010f3e:	d502      	bpl.n	8010f46 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010f40:	68da      	ldr	r2, [r3, #12]
 8010f42:	0751      	lsls	r1, r2, #29
 8010f44:	d446      	bmi.n	8010fd4 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010f46:	691a      	ldr	r2, [r3, #16]
 8010f48:	0712      	lsls	r2, r2, #28
 8010f4a:	d502      	bpl.n	8010f52 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010f4c:	68da      	ldr	r2, [r3, #12]
 8010f4e:	0710      	lsls	r0, r2, #28
 8010f50:	d42e      	bmi.n	8010fb0 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010f52:	691a      	ldr	r2, [r3, #16]
 8010f54:	06d2      	lsls	r2, r2, #27
 8010f56:	d502      	bpl.n	8010f5e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010f58:	68da      	ldr	r2, [r3, #12]
 8010f5a:	06d0      	lsls	r0, r2, #27
 8010f5c:	d418      	bmi.n	8010f90 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010f5e:	691a      	ldr	r2, [r3, #16]
 8010f60:	07d1      	lsls	r1, r2, #31
 8010f62:	d502      	bpl.n	8010f6a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010f64:	68da      	ldr	r2, [r3, #12]
 8010f66:	07d2      	lsls	r2, r2, #31
 8010f68:	d45d      	bmi.n	8011026 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010f6a:	691a      	ldr	r2, [r3, #16]
 8010f6c:	0610      	lsls	r0, r2, #24
 8010f6e:	d502      	bpl.n	8010f76 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010f70:	68da      	ldr	r2, [r3, #12]
 8010f72:	0611      	lsls	r1, r2, #24
 8010f74:	d45f      	bmi.n	8011036 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010f76:	691a      	ldr	r2, [r3, #16]
 8010f78:	0652      	lsls	r2, r2, #25
 8010f7a:	d502      	bpl.n	8010f82 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010f7c:	68da      	ldr	r2, [r3, #12]
 8010f7e:	0650      	lsls	r0, r2, #25
 8010f80:	d461      	bmi.n	8011046 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010f82:	691a      	ldr	r2, [r3, #16]
 8010f84:	0691      	lsls	r1, r2, #26
 8010f86:	d502      	bpl.n	8010f8e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010f88:	68da      	ldr	r2, [r3, #12]
 8010f8a:	0692      	lsls	r2, r2, #26
 8010f8c:	d443      	bmi.n	8011016 <HAL_TIM_IRQHandler+0xee>
}
 8010f8e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010f90:	f06f 0210 	mvn.w	r2, #16
 8010f94:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010f96:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010f98:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010f9a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010f9e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8010fa0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010fa2:	d064      	beq.n	801106e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8010fa4:	f7ff ffba 	bl	8010f1c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fa8:	2200      	movs	r2, #0
 8010faa:	6823      	ldr	r3, [r4, #0]
 8010fac:	7722      	strb	r2, [r4, #28]
 8010fae:	e7d6      	b.n	8010f5e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010fb0:	f06f 0208 	mvn.w	r2, #8
 8010fb4:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010fb6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010fb8:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010fba:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010fbc:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8010fbe:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010fc0:	d152      	bne.n	8011068 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fc2:	f7ff ffa9 	bl	8010f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f7ff ffaa 	bl	8010f20 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fcc:	2200      	movs	r2, #0
 8010fce:	6823      	ldr	r3, [r4, #0]
 8010fd0:	7722      	strb	r2, [r4, #28]
 8010fd2:	e7be      	b.n	8010f52 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010fd4:	f06f 0204 	mvn.w	r2, #4
 8010fd8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010fda:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010fdc:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010fde:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010fe2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8010fe4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010fe6:	d13c      	bne.n	8011062 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fe8:	f7ff ff96 	bl	8010f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fec:	4620      	mov	r0, r4
 8010fee:	f7ff ff97 	bl	8010f20 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	6823      	ldr	r3, [r4, #0]
 8010ff6:	7722      	strb	r2, [r4, #28]
 8010ff8:	e7a5      	b.n	8010f46 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010ffa:	f06f 0202 	mvn.w	r2, #2
 8010ffe:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011000:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011002:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011004:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011006:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011008:	d025      	beq.n	8011056 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 801100a:	f7ff ff87 	bl	8010f1c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801100e:	2200      	movs	r2, #0
 8011010:	6823      	ldr	r3, [r4, #0]
 8011012:	7722      	strb	r2, [r4, #28]
 8011014:	e791      	b.n	8010f3a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011016:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 801101a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801101c:	611a      	str	r2, [r3, #16]
}
 801101e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8011022:	f000 bb11 	b.w	8011648 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011026:	f06f 0201 	mvn.w	r2, #1
 801102a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801102c:	4620      	mov	r0, r4
 801102e:	f7f9 f933 	bl	800a298 <HAL_TIM_PeriodElapsedCallback>
 8011032:	6823      	ldr	r3, [r4, #0]
 8011034:	e799      	b.n	8010f6a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011036:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801103a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801103c:	4620      	mov	r0, r4
 801103e:	f000 fb05 	bl	801164c <HAL_TIMEx_BreakCallback>
 8011042:	6823      	ldr	r3, [r4, #0]
 8011044:	e797      	b.n	8010f76 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011046:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801104a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801104c:	4620      	mov	r0, r4
 801104e:	f7ff ff69 	bl	8010f24 <HAL_TIM_TriggerCallback>
 8011052:	6823      	ldr	r3, [r4, #0]
 8011054:	e795      	b.n	8010f82 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011056:	f7ff ff5f 	bl	8010f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801105a:	4620      	mov	r0, r4
 801105c:	f7ff ff60 	bl	8010f20 <HAL_TIM_PWM_PulseFinishedCallback>
 8011060:	e7d5      	b.n	801100e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8011062:	f7ff ff5b 	bl	8010f1c <HAL_TIM_IC_CaptureCallback>
 8011066:	e7c4      	b.n	8010ff2 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8011068:	f7ff ff58 	bl	8010f1c <HAL_TIM_IC_CaptureCallback>
 801106c:	e7ae      	b.n	8010fcc <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801106e:	f7ff ff53 	bl	8010f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011072:	4620      	mov	r0, r4
 8011074:	f7ff ff54 	bl	8010f20 <HAL_TIM_PWM_PulseFinishedCallback>
 8011078:	e796      	b.n	8010fa8 <HAL_TIM_IRQHandler+0x80>
 801107a:	bf00      	nop

0801107c <TIM_Base_SetConfig>:
{
 801107c:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801107e:	4e36      	ldr	r6, [pc, #216]	; (8011158 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 8011080:	6803      	ldr	r3, [r0, #0]
 8011082:	694d      	ldr	r5, [r1, #20]
 8011084:	688c      	ldr	r4, [r1, #8]
 8011086:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011088:	42b0      	cmp	r0, r6
 801108a:	d055      	beq.n	8011138 <TIM_Base_SetConfig+0xbc>
 801108c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011090:	d029      	beq.n	80110e6 <TIM_Base_SetConfig+0x6a>
 8011092:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8011096:	42b0      	cmp	r0, r6
 8011098:	d037      	beq.n	801110a <TIM_Base_SetConfig+0x8e>
 801109a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801109e:	42b0      	cmp	r0, r6
 80110a0:	d033      	beq.n	801110a <TIM_Base_SetConfig+0x8e>
 80110a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80110a6:	42b0      	cmp	r0, r6
 80110a8:	d02f      	beq.n	801110a <TIM_Base_SetConfig+0x8e>
 80110aa:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80110ae:	42b0      	cmp	r0, r6
 80110b0:	d02b      	beq.n	801110a <TIM_Base_SetConfig+0x8e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80110b2:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80110b6:	42b0      	cmp	r0, r6
 80110b8:	d013      	beq.n	80110e2 <TIM_Base_SetConfig+0x66>
 80110ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80110be:	42b0      	cmp	r0, r6
 80110c0:	d00f      	beq.n	80110e2 <TIM_Base_SetConfig+0x66>
 80110c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80110c6:	42b0      	cmp	r0, r6
 80110c8:	d00b      	beq.n	80110e2 <TIM_Base_SetConfig+0x66>
 80110ca:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 80110ce:	42b0      	cmp	r0, r6
 80110d0:	d007      	beq.n	80110e2 <TIM_Base_SetConfig+0x66>
 80110d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80110d6:	42b0      	cmp	r0, r6
 80110d8:	d003      	beq.n	80110e2 <TIM_Base_SetConfig+0x66>
 80110da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80110de:	42b0      	cmp	r0, r6
 80110e0:	d109      	bne.n	80110f6 <TIM_Base_SetConfig+0x7a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80110e2:	68c9      	ldr	r1, [r1, #12]
 80110e4:	e004      	b.n	80110f0 <TIM_Base_SetConfig+0x74>
    tmpcr1 |= Structure->CounterMode;
 80110e6:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80110e8:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80110ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80110ee:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80110f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80110f4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80110f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80110fa:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80110fc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80110fe:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8011100:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8011102:	2301      	movs	r3, #1
 8011104:	6143      	str	r3, [r0, #20]
}
 8011106:	bcf0      	pop	{r4, r5, r6, r7}
 8011108:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 801110a:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801110c:	4f13      	ldr	r7, [pc, #76]	; (801115c <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801110e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8011112:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011114:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8011116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801111a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801111c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011120:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011122:	42b8      	cmp	r0, r7
  TIMx->CR1 = tmpcr1;
 8011124:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011126:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8011128:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801112a:	d1ea      	bne.n	8011102 <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 801112c:	690b      	ldr	r3, [r1, #16]
 801112e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8011130:	2301      	movs	r3, #1
 8011132:	6143      	str	r3, [r0, #20]
}
 8011134:	bcf0      	pop	{r4, r5, r6, r7}
 8011136:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8011138:	684f      	ldr	r7, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801113a:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801113c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8011140:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8011142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011146:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801114c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 801114e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011150:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8011152:	6282      	str	r2, [r0, #40]	; 0x28
 8011154:	e7ea      	b.n	801112c <TIM_Base_SetConfig+0xb0>
 8011156:	bf00      	nop
 8011158:	40010000 	.word	0x40010000
 801115c:	40010400 	.word	0x40010400

08011160 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8011160:	b1b8      	cbz	r0, 8011192 <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011162:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8011166:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8011168:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801116c:	4604      	mov	r4, r0
 801116e:	b15b      	cbz	r3, 8011188 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8011170:	2302      	movs	r3, #2
 8011172:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011176:	6820      	ldr	r0, [r4, #0]
 8011178:	1d21      	adds	r1, r4, #4
 801117a:	f7ff ff7f 	bl	801107c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 801117e:	2301      	movs	r3, #1
 8011180:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8011184:	2000      	movs	r0, #0
}
 8011186:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8011188:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 801118c:	f7fc ffc0 	bl	800e110 <HAL_TIM_Base_MspInit>
 8011190:	e7ee      	b.n	8011170 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8011192:	2001      	movs	r0, #1
}
 8011194:	4770      	bx	lr
 8011196:	bf00      	nop

08011198 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8011198:	b1b8      	cbz	r0, 80111ca <HAL_TIM_OC_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 801119a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 801119e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80111a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80111a4:	4604      	mov	r4, r0
 80111a6:	b15b      	cbz	r3, 80111c0 <HAL_TIM_OC_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 80111a8:	2302      	movs	r3, #2
 80111aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80111ae:	6820      	ldr	r0, [r4, #0]
 80111b0:	1d21      	adds	r1, r4, #4
 80111b2:	f7ff ff63 	bl	801107c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80111b6:	2301      	movs	r3, #1
 80111b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80111bc:	2000      	movs	r0, #0
}
 80111be:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80111c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80111c4:	f7ff fce8 	bl	8010b98 <HAL_TIM_OC_MspInit>
 80111c8:	e7ee      	b.n	80111a8 <HAL_TIM_OC_Init+0x10>
    return HAL_ERROR;
 80111ca:	2001      	movs	r0, #1
}
 80111cc:	4770      	bx	lr
 80111ce:	bf00      	nop

080111d0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80111d0:	b1b8      	cbz	r0, 8011202 <HAL_TIM_PWM_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 80111d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80111d6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80111d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80111dc:	4604      	mov	r4, r0
 80111de:	b15b      	cbz	r3, 80111f8 <HAL_TIM_PWM_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 80111e0:	2302      	movs	r3, #2
 80111e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80111e6:	6820      	ldr	r0, [r4, #0]
 80111e8:	1d21      	adds	r1, r4, #4
 80111ea:	f7ff ff47 	bl	801107c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80111ee:	2301      	movs	r3, #1
 80111f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80111f4:	2000      	movs	r0, #0
}
 80111f6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80111f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80111fc:	f7ff fd96 	bl	8010d2c <HAL_TIM_PWM_MspInit>
 8011200:	e7ee      	b.n	80111e0 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8011202:	2001      	movs	r0, #1
}
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop

08011208 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8011208:	2800      	cmp	r0, #0
 801120a:	d04f      	beq.n	80112ac <HAL_TIM_Encoder_Init+0xa4>
{
 801120c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 801120e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8011212:	b083      	sub	sp, #12
 8011214:	4605      	mov	r5, r0
 8011216:	460c      	mov	r4, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 8011218:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801121c:	2b00      	cmp	r3, #0
 801121e:	d040      	beq.n	80112a2 <HAL_TIM_Encoder_Init+0x9a>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011220:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 8011222:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011224:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8011228:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801122c:	6883      	ldr	r3, [r0, #8]
 801122e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011232:	f023 0307 	bic.w	r3, r3, #7
 8011236:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011238:	f7ff ff20 	bl	801107c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 801123c:	6829      	ldr	r1, [r5, #0]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801123e:	6923      	ldr	r3, [r4, #16]
  tmpsmcr = htim->Instance->SMCR;
 8011240:	6888      	ldr	r0, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8011242:	698e      	ldr	r6, [r1, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8011244:	69a7      	ldr	r7, [r4, #24]
 8011246:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8011248:	f8d4 c000 	ldr.w	ip, [r4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801124c:	f426 7e40 	bic.w	lr, r6, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011250:	69e6      	ldr	r6, [r4, #28]
 8011252:	011b      	lsls	r3, r3, #4
 8011254:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8011258:	6a26      	ldr	r6, [r4, #32]
 801125a:	9601      	str	r6, [sp, #4]
 801125c:	68e6      	ldr	r6, [r4, #12]
 801125e:	4333      	orrs	r3, r6
 8011260:	9e01      	ldr	r6, [sp, #4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011262:	f02e 0e03 	bic.w	lr, lr, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8011266:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 801126a:	ea42 020e 	orr.w	r2, r2, lr
  tmpccer = htim->Instance->CCER;
 801126e:	6a0f      	ldr	r7, [r1, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011270:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011274:	6966      	ldr	r6, [r4, #20]
 8011276:	6864      	ldr	r4, [r4, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8011278:	f422 427c 	bic.w	r2, r2, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801127c:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 8011280:	ea40 000c 	orr.w	r0, r0, ip
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8011284:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8011288:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  htim->Instance->SMCR = tmpsmcr;
 801128c:	6088      	str	r0, [r1, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801128e:	4327      	orrs	r7, r4
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011290:	4313      	orrs	r3, r2
  htim->State = HAL_TIM_STATE_READY;
 8011292:	2401      	movs	r4, #1
  return HAL_OK;
 8011294:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 8011296:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8011298:	620f      	str	r7, [r1, #32]
  htim->State = HAL_TIM_STATE_READY;
 801129a:	f885 403d 	strb.w	r4, [r5, #61]	; 0x3d
}
 801129e:	b003      	add	sp, #12
 80112a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 80112a2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80112a6:	f7fc ff95 	bl	800e1d4 <HAL_TIM_Encoder_MspInit>
 80112aa:	e7b9      	b.n	8011220 <HAL_TIM_Encoder_Init+0x18>
    return HAL_ERROR;
 80112ac:	2001      	movs	r0, #1
}
 80112ae:	4770      	bx	lr

080112b0 <TIM_OC2_SetConfig>:
{
 80112b0:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80112b2:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80112b4:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80112b6:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80112b8:	4d15      	ldr	r5, [pc, #84]	; (8011310 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80112ba:	f024 0410 	bic.w	r4, r4, #16
 80112be:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80112c0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80112c2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80112c4:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80112c6:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80112ca:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80112ce:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80112d0:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80112d4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80112d8:	d00a      	beq.n	80112f0 <TIM_OC2_SetConfig+0x40>
 80112da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80112de:	42a8      	cmp	r0, r5
 80112e0:	d006      	beq.n	80112f0 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 80112e2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80112e4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80112e6:	6182      	str	r2, [r0, #24]
}
 80112e8:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 80112ea:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80112ec:	6203      	str	r3, [r0, #32]
}
 80112ee:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80112f0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80112f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80112f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80112fa:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80112fe:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011302:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8011304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011308:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 801130c:	e7e9      	b.n	80112e2 <TIM_OC2_SetConfig+0x32>
 801130e:	bf00      	nop
 8011310:	40010000 	.word	0x40010000

08011314 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8011314:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8011318:	2b01      	cmp	r3, #1
 801131a:	d028      	beq.n	801136e <HAL_TIM_OC_ConfigChannel+0x5a>
{
 801131c:	b510      	push	{r4, lr}
 801131e:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8011320:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8011322:	2001      	movs	r0, #1
 8011324:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8011328:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 801132c:	2a0c      	cmp	r2, #12
 801132e:	d80b      	bhi.n	8011348 <HAL_TIM_OC_ConfigChannel+0x34>
 8011330:	e8df f002 	tbb	[pc, r2]
 8011334:	0a0a0a07 	.word	0x0a0a0a07
 8011338:	0a0a0a15 	.word	0x0a0a0a15
 801133c:	0a0a0a19 	.word	0x0a0a0a19
 8011340:	11          	.byte	0x11
 8011341:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011342:	6820      	ldr	r0, [r4, #0]
 8011344:	f7ff fb8e 	bl	8010a64 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8011348:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 801134a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 801134c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011350:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8011354:	bd10      	pop	{r4, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011356:	6820      	ldr	r0, [r4, #0]
 8011358:	f7ff fbe6 	bl	8010b28 <TIM_OC4_SetConfig>
      break;
 801135c:	e7f4      	b.n	8011348 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801135e:	6820      	ldr	r0, [r4, #0]
 8011360:	f7ff ffa6 	bl	80112b0 <TIM_OC2_SetConfig>
      break;
 8011364:	e7f0      	b.n	8011348 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011366:	6820      	ldr	r0, [r4, #0]
 8011368:	f7ff fbac 	bl	8010ac4 <TIM_OC3_SetConfig>
      break;
 801136c:	e7ec      	b.n	8011348 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 801136e:	2002      	movs	r0, #2
}
 8011370:	4770      	bx	lr
 8011372:	bf00      	nop

08011374 <HAL_TIM_PWM_ConfigChannel>:
{
 8011374:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8011376:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 801137a:	2b01      	cmp	r3, #1
 801137c:	d074      	beq.n	8011468 <HAL_TIM_PWM_ConfigChannel+0xf4>
 801137e:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8011380:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8011382:	2101      	movs	r1, #1
 8011384:	4604      	mov	r4, r0
 8011386:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 801138a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 801138e:	2a0c      	cmp	r2, #12
 8011390:	d819      	bhi.n	80113c6 <HAL_TIM_PWM_ConfigChannel+0x52>
 8011392:	e8df f002 	tbb	[pc, r2]
 8011396:	1807      	.short	0x1807
 8011398:	18381818 	.word	0x18381818
 801139c:	18511818 	.word	0x18511818
 80113a0:	1818      	.short	0x1818
 80113a2:	1f          	.byte	0x1f
 80113a3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80113a4:	4629      	mov	r1, r5
 80113a6:	6800      	ldr	r0, [r0, #0]
 80113a8:	f7ff fb5c 	bl	8010a64 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80113ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80113ae:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80113b0:	6999      	ldr	r1, [r3, #24]
 80113b2:	f041 0108 	orr.w	r1, r1, #8
 80113b6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80113b8:	6999      	ldr	r1, [r3, #24]
 80113ba:	f021 0104 	bic.w	r1, r1, #4
 80113be:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80113c0:	699a      	ldr	r2, [r3, #24]
 80113c2:	4302      	orrs	r2, r0
 80113c4:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80113c6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80113c8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80113ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80113ce:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80113d2:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80113d4:	4629      	mov	r1, r5
 80113d6:	6800      	ldr	r0, [r0, #0]
 80113d8:	f7ff fba6 	bl	8010b28 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80113dc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80113de:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80113e0:	69d9      	ldr	r1, [r3, #28]
 80113e2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80113e6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80113e8:	69d9      	ldr	r1, [r3, #28]
 80113ea:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80113ee:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80113f0:	69da      	ldr	r2, [r3, #28]
 80113f2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80113f6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80113f8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80113fa:	2301      	movs	r3, #1
 80113fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011400:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8011404:	e7e5      	b.n	80113d2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011406:	4629      	mov	r1, r5
 8011408:	6800      	ldr	r0, [r0, #0]
 801140a:	f7ff ff51 	bl	80112b0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801140e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011410:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011412:	6999      	ldr	r1, [r3, #24]
 8011414:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8011418:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801141a:	6999      	ldr	r1, [r3, #24]
 801141c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8011420:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011422:	699a      	ldr	r2, [r3, #24]
 8011424:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8011428:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 801142a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 801142c:	2301      	movs	r3, #1
 801142e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011432:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8011436:	e7cc      	b.n	80113d2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011438:	4629      	mov	r1, r5
 801143a:	6800      	ldr	r0, [r0, #0]
 801143c:	f7ff fb42 	bl	8010ac4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011440:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011442:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011444:	69d9      	ldr	r1, [r3, #28]
 8011446:	f041 0108 	orr.w	r1, r1, #8
 801144a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801144c:	69d9      	ldr	r1, [r3, #28]
 801144e:	f021 0104 	bic.w	r1, r1, #4
 8011452:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011454:	69da      	ldr	r2, [r3, #28]
 8011456:	4302      	orrs	r2, r0
 8011458:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 801145a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 801145c:	2301      	movs	r3, #1
 801145e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011462:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8011466:	e7b4      	b.n	80113d2 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8011468:	2002      	movs	r0, #2
}
 801146a:	bd38      	pop	{r3, r4, r5, pc}

0801146c <HAL_TIMEx_OCN_Start_IT>:
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801146c:	2904      	cmp	r1, #4
 801146e:	6803      	ldr	r3, [r0, #0]
 8011470:	d02a      	beq.n	80114c8 <HAL_TIMEx_OCN_Start_IT+0x5c>
 8011472:	2908      	cmp	r1, #8
 8011474:	d023      	beq.n	80114be <HAL_TIMEx_OCN_Start_IT+0x52>
 8011476:	b1e9      	cbz	r1, 80114b4 <HAL_TIMEx_OCN_Start_IT+0x48>
    default:
      break;
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8011478:	68da      	ldr	r2, [r3, #12]
 801147a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801147e:	60da      	str	r2, [r3, #12]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8011480:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011482:	f001 021f 	and.w	r2, r1, #31
 8011486:	2104      	movs	r1, #4
 8011488:	4091      	lsls	r1, r2
  TIMx->CCER &=  ~tmp;
 801148a:	ea20 0001 	bic.w	r0, r0, r1
 801148e:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011490:	6a1a      	ldr	r2, [r3, #32]
 8011492:	4311      	orrs	r1, r2
 8011494:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8011496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011498:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801149c:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801149e:	689a      	ldr	r2, [r3, #8]
 80114a0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80114a4:	2a06      	cmp	r2, #6
 80114a6:	d003      	beq.n	80114b0 <HAL_TIMEx_OCN_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	f042 0201 	orr.w	r2, r2, #1
 80114ae:	601a      	str	r2, [r3, #0]
}
 80114b0:	2000      	movs	r0, #0
 80114b2:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80114b4:	68da      	ldr	r2, [r3, #12]
 80114b6:	f042 0202 	orr.w	r2, r2, #2
 80114ba:	60da      	str	r2, [r3, #12]
      break;
 80114bc:	e7dc      	b.n	8011478 <HAL_TIMEx_OCN_Start_IT+0xc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80114be:	68da      	ldr	r2, [r3, #12]
 80114c0:	f042 0208 	orr.w	r2, r2, #8
 80114c4:	60da      	str	r2, [r3, #12]
      break;
 80114c6:	e7d7      	b.n	8011478 <HAL_TIMEx_OCN_Start_IT+0xc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80114c8:	68da      	ldr	r2, [r3, #12]
 80114ca:	f042 0204 	orr.w	r2, r2, #4
 80114ce:	60da      	str	r2, [r3, #12]
      break;
 80114d0:	e7d2      	b.n	8011478 <HAL_TIMEx_OCN_Start_IT+0xc>
 80114d2:	bf00      	nop

080114d4 <HAL_TIMEx_OCN_Stop_IT>:
  switch (Channel)
 80114d4:	2904      	cmp	r1, #4
 80114d6:	6803      	ldr	r3, [r0, #0]
 80114d8:	d040      	beq.n	801155c <HAL_TIMEx_OCN_Stop_IT+0x88>
 80114da:	2908      	cmp	r1, #8
 80114dc:	d039      	beq.n	8011552 <HAL_TIMEx_OCN_Stop_IT+0x7e>
 80114de:	2900      	cmp	r1, #0
 80114e0:	d032      	beq.n	8011548 <HAL_TIMEx_OCN_Stop_IT+0x74>
  TIMx->CCER &=  ~tmp;
 80114e2:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80114e4:	f001 011f 	and.w	r1, r1, #31
 80114e8:	2004      	movs	r0, #4
 80114ea:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &=  ~tmp;
 80114ee:	ea22 0101 	bic.w	r1, r2, r1
 80114f2:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80114f4:	6a1a      	ldr	r2, [r3, #32]
 80114f6:	621a      	str	r2, [r3, #32]
  tmpccer = htim->Instance->CCER;
 80114f8:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 80114fa:	f240 4244 	movw	r2, #1092	; 0x444
 80114fe:	4211      	tst	r1, r2
 8011500:	d103      	bne.n	801150a <HAL_TIMEx_OCN_Stop_IT+0x36>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8011502:	68da      	ldr	r2, [r3, #12]
 8011504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011508:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 801150a:	6a19      	ldr	r1, [r3, #32]
 801150c:	f241 1211 	movw	r2, #4369	; 0x1111
 8011510:	4211      	tst	r1, r2
 8011512:	d104      	bne.n	801151e <HAL_TIMEx_OCN_Stop_IT+0x4a>
 8011514:	6a19      	ldr	r1, [r3, #32]
 8011516:	f240 4244 	movw	r2, #1092	; 0x444
 801151a:	4211      	tst	r1, r2
 801151c:	d00f      	beq.n	801153e <HAL_TIMEx_OCN_Stop_IT+0x6a>
  __HAL_TIM_DISABLE(htim);
 801151e:	6a19      	ldr	r1, [r3, #32]
 8011520:	f241 1211 	movw	r2, #4369	; 0x1111
 8011524:	4211      	tst	r1, r2
 8011526:	d108      	bne.n	801153a <HAL_TIMEx_OCN_Stop_IT+0x66>
 8011528:	6a19      	ldr	r1, [r3, #32]
 801152a:	f240 4244 	movw	r2, #1092	; 0x444
 801152e:	4211      	tst	r1, r2
 8011530:	d103      	bne.n	801153a <HAL_TIMEx_OCN_Stop_IT+0x66>
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	f022 0201 	bic.w	r2, r2, #1
 8011538:	601a      	str	r2, [r3, #0]
}
 801153a:	2000      	movs	r0, #0
 801153c:	4770      	bx	lr
  __HAL_TIM_MOE_DISABLE(htim);
 801153e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011540:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011544:	645a      	str	r2, [r3, #68]	; 0x44
 8011546:	e7ea      	b.n	801151e <HAL_TIMEx_OCN_Stop_IT+0x4a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011548:	68da      	ldr	r2, [r3, #12]
 801154a:	f022 0202 	bic.w	r2, r2, #2
 801154e:	60da      	str	r2, [r3, #12]
      break;
 8011550:	e7c7      	b.n	80114e2 <HAL_TIMEx_OCN_Stop_IT+0xe>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8011552:	68da      	ldr	r2, [r3, #12]
 8011554:	f022 0208 	bic.w	r2, r2, #8
 8011558:	60da      	str	r2, [r3, #12]
      break;
 801155a:	e7c2      	b.n	80114e2 <HAL_TIMEx_OCN_Stop_IT+0xe>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801155c:	68da      	ldr	r2, [r3, #12]
 801155e:	f022 0204 	bic.w	r2, r2, #4
 8011562:	60da      	str	r2, [r3, #12]
      break;
 8011564:	e7bd      	b.n	80114e2 <HAL_TIMEx_OCN_Stop_IT+0xe>
 8011566:	bf00      	nop

08011568 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8011568:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 801156c:	2b01      	cmp	r3, #1
 801156e:	d03a      	beq.n	80115e6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  tmpcr2 = htim->Instance->CR2;
 8011570:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8011572:	2202      	movs	r2, #2
{
 8011574:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8011576:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 801157a:	685a      	ldr	r2, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801157c:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801157e:	4d1b      	ldr	r5, [pc, #108]	; (80115ec <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 8011580:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8011582:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011586:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011588:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 801158a:	f04f 0601 	mov.w	r6, #1
 801158e:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 8011592:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011594:	d019      	beq.n	80115ca <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8011596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801159a:	d016      	beq.n	80115ca <HAL_TIMEx_MasterConfigSynchronization+0x62>
 801159c:	4a14      	ldr	r2, [pc, #80]	; (80115f0 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 801159e:	4293      	cmp	r3, r2
 80115a0:	d013      	beq.n	80115ca <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80115a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d00f      	beq.n	80115ca <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80115aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d00b      	beq.n	80115ca <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80115b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80115b6:	4293      	cmp	r3, r2
 80115b8:	d007      	beq.n	80115ca <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80115ba:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80115be:	4293      	cmp	r3, r2
 80115c0:	d003      	beq.n	80115ca <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80115c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80115c6:	4293      	cmp	r3, r2
 80115c8:	d104      	bne.n	80115d4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80115ca:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80115cc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80115d0:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 80115d2:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(htim);
 80115d4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80115d6:	2201      	movs	r2, #1
 80115d8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80115dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80115e0:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80115e2:	4618      	mov	r0, r3
}
 80115e4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80115e6:	2002      	movs	r0, #2
}
 80115e8:	4770      	bx	lr
 80115ea:	bf00      	nop
 80115ec:	40010000 	.word	0x40010000
 80115f0:	40000400 	.word	0x40000400

080115f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80115f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80115f8:	2b01      	cmp	r3, #1
 80115fa:	d021      	beq.n	8011640 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 80115fc:	b430      	push	{r4, r5}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80115fe:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011602:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801160a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801160c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011610:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011612:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011616:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801161a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801161c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011620:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011622:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011626:	69c9      	ldr	r1, [r1, #28]
  htim->Instance->BDTR = tmpbdtr;
 8011628:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801162a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801162c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011630:	430b      	orrs	r3, r1
  __HAL_UNLOCK(htim);
 8011632:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8011634:	6453      	str	r3, [r2, #68]	; 0x44
}
 8011636:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 8011638:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 801163c:	4608      	mov	r0, r1
 801163e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8011640:	2302      	movs	r3, #2
}
 8011642:	4618      	mov	r0, r3
 8011644:	4770      	bx	lr
 8011646:	bf00      	nop

08011648 <HAL_TIMEx_CommutCallback>:
 8011648:	4770      	bx	lr
 801164a:	bf00      	nop

0801164c <HAL_TIMEx_BreakCallback>:
 801164c:	4770      	bx	lr
 801164e:	bf00      	nop

08011650 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011650:	6802      	ldr	r2, [r0, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011652:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011654:	6911      	ldr	r1, [r2, #16]
{
 8011656:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011658:	68c5      	ldr	r5, [r0, #12]
 801165a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
{
 801165e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011660:	4329      	orrs	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011662:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011664:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 8011666:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011668:	6965      	ldr	r5, [r4, #20]
 801166a:	4303      	orrs	r3, r0
 801166c:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 801166e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011672:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 8011674:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011678:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 801167a:	430b      	orrs	r3, r1
 801167c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801167e:	6953      	ldr	r3, [r2, #20]
 8011680:	69a1      	ldr	r1, [r4, #24]
 8011682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011686:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011688:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801168c:	6153      	str	r3, [r2, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801168e:	4b2a      	ldr	r3, [pc, #168]	; (8011738 <UART_SetConfig+0xe8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011690:	d023      	beq.n	80116da <UART_SetConfig+0x8a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011692:	429a      	cmp	r2, r3
 8011694:	d01e      	beq.n	80116d4 <UART_SetConfig+0x84>
 8011696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801169a:	429a      	cmp	r2, r3
 801169c:	d01a      	beq.n	80116d4 <UART_SetConfig+0x84>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801169e:	f7fe fe83 	bl	80103a8 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80116a2:	6863      	ldr	r3, [r4, #4]
 80116a4:	2219      	movs	r2, #25
 80116a6:	fba0 0102 	umull	r0, r1, r0, r2
 80116aa:	009a      	lsls	r2, r3, #2
 80116ac:	0f9b      	lsrs	r3, r3, #30
 80116ae:	f7f7 fa23 	bl	8008af8 <__aeabi_uldivmod>
 80116b2:	4922      	ldr	r1, [pc, #136]	; (801173c <UART_SetConfig+0xec>)
 80116b4:	6824      	ldr	r4, [r4, #0]
 80116b6:	fba1 3200 	umull	r3, r2, r1, r0
 80116ba:	0952      	lsrs	r2, r2, #5
 80116bc:	2364      	movs	r3, #100	; 0x64
 80116be:	fb03 0312 	mls	r3, r3, r2, r0
 80116c2:	011b      	lsls	r3, r3, #4
 80116c4:	3332      	adds	r3, #50	; 0x32
 80116c6:	fba1 1303 	umull	r1, r3, r1, r3
 80116ca:	0112      	lsls	r2, r2, #4
 80116cc:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 80116d0:	60a3      	str	r3, [r4, #8]
    }
  }
}
 80116d2:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80116d4:	f7fe fe78 	bl	80103c8 <HAL_RCC_GetPCLK2Freq>
 80116d8:	e7e3      	b.n	80116a2 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80116da:	429a      	cmp	r2, r3
 80116dc:	d028      	beq.n	8011730 <UART_SetConfig+0xe0>
 80116de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d024      	beq.n	8011730 <UART_SetConfig+0xe0>
      pclk = HAL_RCC_GetPCLK1Freq();
 80116e6:	f7fe fe5f 	bl	80103a8 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80116ea:	6862      	ldr	r2, [r4, #4]
 80116ec:	4d13      	ldr	r5, [pc, #76]	; (801173c <UART_SetConfig+0xec>)
 80116ee:	1892      	adds	r2, r2, r2
 80116f0:	f04f 0119 	mov.w	r1, #25
 80116f4:	f04f 0600 	mov.w	r6, #0
 80116f8:	eb46 0306 	adc.w	r3, r6, r6
 80116fc:	fba0 0101 	umull	r0, r1, r0, r1
 8011700:	f7f7 f9fa 	bl	8008af8 <__aeabi_uldivmod>
 8011704:	fba5 3200 	umull	r3, r2, r5, r0
 8011708:	0951      	lsrs	r1, r2, #5
 801170a:	2364      	movs	r3, #100	; 0x64
 801170c:	fb03 0311 	mls	r3, r3, r1, r0
 8011710:	00db      	lsls	r3, r3, #3
 8011712:	3332      	adds	r3, #50	; 0x32
 8011714:	fba5 2303 	umull	r2, r3, r5, r3
 8011718:	095b      	lsrs	r3, r3, #5
 801171a:	f003 0207 	and.w	r2, r3, #7
 801171e:	005b      	lsls	r3, r3, #1
 8011720:	6824      	ldr	r4, [r4, #0]
 8011722:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8011726:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801172a:	4413      	add	r3, r2
 801172c:	60a3      	str	r3, [r4, #8]
}
 801172e:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8011730:	f7fe fe4a 	bl	80103c8 <HAL_RCC_GetPCLK2Freq>
 8011734:	e7d9      	b.n	80116ea <UART_SetConfig+0x9a>
 8011736:	bf00      	nop
 8011738:	40011000 	.word	0x40011000
 801173c:	51eb851f 	.word	0x51eb851f

08011740 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8011740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011744:	4607      	mov	r7, r0
 8011746:	460e      	mov	r6, r1
 8011748:	4690      	mov	r8, r2
 801174a:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801174c:	683c      	ldr	r4, [r7, #0]
 801174e:	e001      	b.n	8011754 <UART_WaitOnFlagUntilTimeout.constprop.3+0x14>
    if (Timeout != HAL_MAX_DELAY)
 8011750:	1c6b      	adds	r3, r5, #1
 8011752:	d106      	bne.n	8011762 <UART_WaitOnFlagUntilTimeout.constprop.3+0x22>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011754:	6820      	ldr	r0, [r4, #0]
 8011756:	ea36 0300 	bics.w	r3, r6, r0
 801175a:	d1f9      	bne.n	8011750 <UART_WaitOnFlagUntilTimeout.constprop.3+0x10>
  return HAL_OK;
 801175c:	2000      	movs	r0, #0
}
 801175e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011762:	b135      	cbz	r5, 8011772 <UART_WaitOnFlagUntilTimeout.constprop.3+0x32>
 8011764:	f7fd fc2a 	bl	800efbc <HAL_GetTick>
 8011768:	eba0 0008 	sub.w	r0, r0, r8
 801176c:	4285      	cmp	r5, r0
 801176e:	d2ed      	bcs.n	801174c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
 8011770:	683c      	ldr	r4, [r7, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011772:	68e3      	ldr	r3, [r4, #12]
 8011774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011778:	60e3      	str	r3, [r4, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801177a:	6963      	ldr	r3, [r4, #20]
        huart->gState  = HAL_UART_STATE_READY;
 801177c:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801177e:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8011782:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011784:	6163      	str	r3, [r4, #20]
        __HAL_UNLOCK(huart);
 8011786:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8011788:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
        __HAL_UNLOCK(huart);
 801178c:	f887 1038 	strb.w	r1, [r7, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8011790:	f887 203a 	strb.w	r2, [r7, #58]	; 0x3a
 8011794:	e7e3      	b.n	801175e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>
 8011796:	bf00      	nop

08011798 <HAL_UART_Init>:
  if (huart == NULL)
 8011798:	b360      	cbz	r0, 80117f4 <HAL_UART_Init+0x5c>
{
 801179a:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 801179c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80117a0:	4604      	mov	r4, r0
 80117a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80117a6:	b303      	cbz	r3, 80117ea <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 80117a8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80117aa:	2324      	movs	r3, #36	; 0x24
 80117ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80117b0:	68d3      	ldr	r3, [r2, #12]
 80117b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80117b6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80117b8:	4620      	mov	r0, r4
 80117ba:	f7ff ff49 	bl	8011650 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80117be:	6823      	ldr	r3, [r4, #0]
 80117c0:	691a      	ldr	r2, [r3, #16]
 80117c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80117c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80117c8:	695a      	ldr	r2, [r3, #20]
 80117ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80117ce:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80117d0:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117d2:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80117d4:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80117d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80117da:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 80117dc:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117de:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80117e0:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80117e4:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 80117e8:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80117ea:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80117ee:	f7fc fdc5 	bl	800e37c <HAL_UART_MspInit>
 80117f2:	e7d9      	b.n	80117a8 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 80117f4:	2001      	movs	r0, #1
}
 80117f6:	4770      	bx	lr

080117f8 <HAL_UART_Transmit>:
{
 80117f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117fc:	460f      	mov	r7, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80117fe:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8011802:	2920      	cmp	r1, #32
{
 8011804:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8011806:	d130      	bne.n	801186a <HAL_UART_Transmit+0x72>
    if ((pData == NULL) || (Size == 0U))
 8011808:	2f00      	cmp	r7, #0
 801180a:	d032      	beq.n	8011872 <HAL_UART_Transmit+0x7a>
 801180c:	9201      	str	r2, [sp, #4]
 801180e:	b382      	cbz	r2, 8011872 <HAL_UART_Transmit+0x7a>
 8011810:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 8011812:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8011816:	2b01      	cmp	r3, #1
 8011818:	4604      	mov	r4, r0
 801181a:	d026      	beq.n	801186a <HAL_UART_Transmit+0x72>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801181c:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 801181e:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011820:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011822:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8011824:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011828:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 801182c:	f7fd fbc6 	bl	800efbc <HAL_GetTick>
    huart->TxXferSize = Size;
 8011830:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8011832:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8011836:	4681      	mov	r9, r0
    huart->TxXferSize = Size;
 8011838:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 801183a:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801183c:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
 801183e:	b2ad      	uxth	r5, r5
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011840:	4643      	mov	r3, r8
 8011842:	464a      	mov	r2, r9
 8011844:	2180      	movs	r1, #128	; 0x80
 8011846:	4620      	mov	r0, r4
    while (huart->TxXferCount > 0U)
 8011848:	b355      	cbz	r5, 80118a0 <HAL_UART_Transmit+0xa8>
      huart->TxXferCount--;
 801184a:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801184c:	68a6      	ldr	r6, [r4, #8]
      huart->TxXferCount--;
 801184e:	3d01      	subs	r5, #1
 8011850:	b2ad      	uxth	r5, r5
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011852:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
      huart->TxXferCount--;
 8011856:	84e5      	strh	r5, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011858:	d00f      	beq.n	801187a <HAL_UART_Transmit+0x82>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801185a:	f7ff ff71 	bl	8011740 <UART_WaitOnFlagUntilTimeout.constprop.3>
 801185e:	b9e8      	cbnz	r0, 801189c <HAL_UART_Transmit+0xa4>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8011860:	6823      	ldr	r3, [r4, #0]
 8011862:	783a      	ldrb	r2, [r7, #0]
 8011864:	605a      	str	r2, [r3, #4]
 8011866:	3701      	adds	r7, #1
 8011868:	e7e8      	b.n	801183c <HAL_UART_Transmit+0x44>
    return HAL_BUSY;
 801186a:	2002      	movs	r0, #2
}
 801186c:	b003      	add	sp, #12
 801186e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8011872:	2001      	movs	r0, #1
}
 8011874:	b003      	add	sp, #12
 8011876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801187a:	4643      	mov	r3, r8
 801187c:	464a      	mov	r2, r9
 801187e:	2180      	movs	r1, #128	; 0x80
 8011880:	4620      	mov	r0, r4
 8011882:	f7ff ff5d 	bl	8011740 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8011886:	b948      	cbnz	r0, 801189c <HAL_UART_Transmit+0xa4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8011888:	883b      	ldrh	r3, [r7, #0]
 801188a:	6821      	ldr	r1, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801188c:	6922      	ldr	r2, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 801188e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011892:	604b      	str	r3, [r1, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011894:	2a00      	cmp	r2, #0
 8011896:	d1e6      	bne.n	8011866 <HAL_UART_Transmit+0x6e>
          pData += 2U;
 8011898:	3702      	adds	r7, #2
 801189a:	e7cf      	b.n	801183c <HAL_UART_Transmit+0x44>
          return HAL_TIMEOUT;
 801189c:	2003      	movs	r0, #3
 801189e:	e7e5      	b.n	801186c <HAL_UART_Transmit+0x74>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80118a0:	2140      	movs	r1, #64	; 0x40
 80118a2:	f7ff ff4d 	bl	8011740 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80118a6:	2800      	cmp	r0, #0
 80118a8:	d1f8      	bne.n	801189c <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 80118aa:	2320      	movs	r3, #32
 80118ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80118b0:	e7dc      	b.n	801186c <HAL_UART_Transmit+0x74>
 80118b2:	bf00      	nop

080118b4 <HAL_UART_Receive>:
{
 80118b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118b8:	460f      	mov	r7, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 80118ba:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
 80118be:	2920      	cmp	r1, #32
{
 80118c0:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 80118c2:	d135      	bne.n	8011930 <HAL_UART_Receive+0x7c>
    if ((pData == NULL) || (Size == 0U))
 80118c4:	2f00      	cmp	r7, #0
 80118c6:	d037      	beq.n	8011938 <HAL_UART_Receive+0x84>
 80118c8:	9201      	str	r2, [sp, #4]
 80118ca:	2a00      	cmp	r2, #0
 80118cc:	d034      	beq.n	8011938 <HAL_UART_Receive+0x84>
 80118ce:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 80118d0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	4604      	mov	r4, r0
 80118d8:	d02a      	beq.n	8011930 <HAL_UART_Receive+0x7c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80118da:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80118dc:	2101      	movs	r1, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80118de:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80118e0:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 80118e2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80118e6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80118ea:	f7fd fb67 	bl	800efbc <HAL_GetTick>
    huart->RxXferSize = Size;
 80118ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 80118f0:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 80118f4:	4681      	mov	r9, r0
    huart->RxXferSize = Size;
 80118f6:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80118f8:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80118fa:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 80118fc:	b2ad      	uxth	r5, r5
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80118fe:	4643      	mov	r3, r8
 8011900:	464a      	mov	r2, r9
 8011902:	2120      	movs	r1, #32
 8011904:	4620      	mov	r0, r4
    while (huart->RxXferCount > 0U)
 8011906:	2d00      	cmp	r5, #0
 8011908:	d036      	beq.n	8011978 <HAL_UART_Receive+0xc4>
      huart->RxXferCount--;
 801190a:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801190c:	68a6      	ldr	r6, [r4, #8]
      huart->RxXferCount--;
 801190e:	3d01      	subs	r5, #1
 8011910:	b2ad      	uxth	r5, r5
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011912:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
      huart->RxXferCount--;
 8011916:	85e5      	strh	r5, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011918:	d012      	beq.n	8011940 <HAL_UART_Receive+0x8c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801191a:	f7ff ff11 	bl	8011740 <UART_WaitOnFlagUntilTimeout.constprop.3>
 801191e:	bb78      	cbnz	r0, 8011980 <HAL_UART_Receive+0xcc>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011920:	6923      	ldr	r3, [r4, #16]
 8011922:	6821      	ldr	r1, [r4, #0]
 8011924:	1c7a      	adds	r2, r7, #1
 8011926:	b9db      	cbnz	r3, 8011960 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011928:	684b      	ldr	r3, [r1, #4]
 801192a:	703b      	strb	r3, [r7, #0]
 801192c:	4617      	mov	r7, r2
 801192e:	e7e4      	b.n	80118fa <HAL_UART_Receive+0x46>
    return HAL_BUSY;
 8011930:	2002      	movs	r0, #2
}
 8011932:	b003      	add	sp, #12
 8011934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8011938:	2001      	movs	r0, #1
}
 801193a:	b003      	add	sp, #12
 801193c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011940:	4643      	mov	r3, r8
 8011942:	464a      	mov	r2, r9
 8011944:	2120      	movs	r1, #32
 8011946:	4620      	mov	r0, r4
 8011948:	f7ff fefa 	bl	8011740 <UART_WaitOnFlagUntilTimeout.constprop.3>
 801194c:	b9c0      	cbnz	r0, 8011980 <HAL_UART_Receive+0xcc>
        if (huart->Init.Parity == UART_PARITY_NONE)
 801194e:	6923      	ldr	r3, [r4, #16]
 8011950:	b963      	cbnz	r3, 801196c <HAL_UART_Receive+0xb8>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011952:	6823      	ldr	r3, [r4, #0]
 8011954:	685b      	ldr	r3, [r3, #4]
 8011956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801195a:	f827 3b02 	strh.w	r3, [r7], #2
 801195e:	e7cc      	b.n	80118fa <HAL_UART_Receive+0x46>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011960:	684b      	ldr	r3, [r1, #4]
 8011962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011966:	703b      	strb	r3, [r7, #0]
 8011968:	4617      	mov	r7, r2
 801196a:	e7c6      	b.n	80118fa <HAL_UART_Receive+0x46>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801196c:	6823      	ldr	r3, [r4, #0]
 801196e:	685b      	ldr	r3, [r3, #4]
 8011970:	b2db      	uxtb	r3, r3
 8011972:	f827 3b01 	strh.w	r3, [r7], #1
 8011976:	e7c0      	b.n	80118fa <HAL_UART_Receive+0x46>
    return HAL_OK;
 8011978:	4628      	mov	r0, r5
    huart->RxState = HAL_UART_STATE_READY;
 801197a:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
    return HAL_OK;
 801197e:	e7d8      	b.n	8011932 <HAL_UART_Receive+0x7e>
          return HAL_TIMEOUT;
 8011980:	2003      	movs	r0, #3
 8011982:	e7d6      	b.n	8011932 <HAL_UART_Receive+0x7e>

08011984 <round>:
 8011984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011986:	ec57 6b10 	vmov	r6, r7, d0
 801198a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 801198e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8011992:	2c13      	cmp	r4, #19
 8011994:	463b      	mov	r3, r7
 8011996:	463d      	mov	r5, r7
 8011998:	dc17      	bgt.n	80119ca <round+0x46>
 801199a:	2c00      	cmp	r4, #0
 801199c:	da09      	bge.n	80119b2 <round+0x2e>
 801199e:	3401      	adds	r4, #1
 80119a0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80119a4:	d103      	bne.n	80119ae <round+0x2a>
 80119a6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80119aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80119ae:	2100      	movs	r1, #0
 80119b0:	e02c      	b.n	8011a0c <round+0x88>
 80119b2:	4a18      	ldr	r2, [pc, #96]	; (8011a14 <round+0x90>)
 80119b4:	4122      	asrs	r2, r4
 80119b6:	4217      	tst	r7, r2
 80119b8:	d100      	bne.n	80119bc <round+0x38>
 80119ba:	b19e      	cbz	r6, 80119e4 <round+0x60>
 80119bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80119c0:	4123      	asrs	r3, r4
 80119c2:	442b      	add	r3, r5
 80119c4:	ea23 0302 	bic.w	r3, r3, r2
 80119c8:	e7f1      	b.n	80119ae <round+0x2a>
 80119ca:	2c33      	cmp	r4, #51	; 0x33
 80119cc:	dd0d      	ble.n	80119ea <round+0x66>
 80119ce:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80119d2:	d107      	bne.n	80119e4 <round+0x60>
 80119d4:	4630      	mov	r0, r6
 80119d6:	4639      	mov	r1, r7
 80119d8:	ee10 2a10 	vmov	r2, s0
 80119dc:	f7f6 fb8e 	bl	80080fc <__adddf3>
 80119e0:	4606      	mov	r6, r0
 80119e2:	460f      	mov	r7, r1
 80119e4:	ec47 6b10 	vmov	d0, r6, r7
 80119e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119ea:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80119ee:	f04f 30ff 	mov.w	r0, #4294967295
 80119f2:	40d0      	lsrs	r0, r2
 80119f4:	4206      	tst	r6, r0
 80119f6:	d0f5      	beq.n	80119e4 <round+0x60>
 80119f8:	2201      	movs	r2, #1
 80119fa:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80119fe:	fa02 f404 	lsl.w	r4, r2, r4
 8011a02:	1931      	adds	r1, r6, r4
 8011a04:	bf28      	it	cs
 8011a06:	189b      	addcs	r3, r3, r2
 8011a08:	ea21 0100 	bic.w	r1, r1, r0
 8011a0c:	461f      	mov	r7, r3
 8011a0e:	460e      	mov	r6, r1
 8011a10:	e7e8      	b.n	80119e4 <round+0x60>
 8011a12:	bf00      	nop
 8011a14:	000fffff 	.word	0x000fffff

08011a18 <__errno>:
 8011a18:	4b01      	ldr	r3, [pc, #4]	; (8011a20 <__errno+0x8>)
 8011a1a:	6818      	ldr	r0, [r3, #0]
 8011a1c:	4770      	bx	lr
 8011a1e:	bf00      	nop
 8011a20:	20000018 	.word	0x20000018

08011a24 <__sflush_r>:
 8011a24:	898a      	ldrh	r2, [r1, #12]
 8011a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a2a:	4605      	mov	r5, r0
 8011a2c:	0710      	lsls	r0, r2, #28
 8011a2e:	460c      	mov	r4, r1
 8011a30:	d458      	bmi.n	8011ae4 <__sflush_r+0xc0>
 8011a32:	684b      	ldr	r3, [r1, #4]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	dc05      	bgt.n	8011a44 <__sflush_r+0x20>
 8011a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	dc02      	bgt.n	8011a44 <__sflush_r+0x20>
 8011a3e:	2000      	movs	r0, #0
 8011a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a46:	2e00      	cmp	r6, #0
 8011a48:	d0f9      	beq.n	8011a3e <__sflush_r+0x1a>
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a50:	682f      	ldr	r7, [r5, #0]
 8011a52:	6a21      	ldr	r1, [r4, #32]
 8011a54:	602b      	str	r3, [r5, #0]
 8011a56:	d032      	beq.n	8011abe <__sflush_r+0x9a>
 8011a58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a5a:	89a3      	ldrh	r3, [r4, #12]
 8011a5c:	075a      	lsls	r2, r3, #29
 8011a5e:	d505      	bpl.n	8011a6c <__sflush_r+0x48>
 8011a60:	6863      	ldr	r3, [r4, #4]
 8011a62:	1ac0      	subs	r0, r0, r3
 8011a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a66:	b10b      	cbz	r3, 8011a6c <__sflush_r+0x48>
 8011a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a6a:	1ac0      	subs	r0, r0, r3
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	4602      	mov	r2, r0
 8011a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a72:	6a21      	ldr	r1, [r4, #32]
 8011a74:	4628      	mov	r0, r5
 8011a76:	47b0      	blx	r6
 8011a78:	1c43      	adds	r3, r0, #1
 8011a7a:	89a3      	ldrh	r3, [r4, #12]
 8011a7c:	d106      	bne.n	8011a8c <__sflush_r+0x68>
 8011a7e:	6829      	ldr	r1, [r5, #0]
 8011a80:	291d      	cmp	r1, #29
 8011a82:	d848      	bhi.n	8011b16 <__sflush_r+0xf2>
 8011a84:	4a29      	ldr	r2, [pc, #164]	; (8011b2c <__sflush_r+0x108>)
 8011a86:	40ca      	lsrs	r2, r1
 8011a88:	07d6      	lsls	r6, r2, #31
 8011a8a:	d544      	bpl.n	8011b16 <__sflush_r+0xf2>
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	6062      	str	r2, [r4, #4]
 8011a90:	04d9      	lsls	r1, r3, #19
 8011a92:	6922      	ldr	r2, [r4, #16]
 8011a94:	6022      	str	r2, [r4, #0]
 8011a96:	d504      	bpl.n	8011aa2 <__sflush_r+0x7e>
 8011a98:	1c42      	adds	r2, r0, #1
 8011a9a:	d101      	bne.n	8011aa0 <__sflush_r+0x7c>
 8011a9c:	682b      	ldr	r3, [r5, #0]
 8011a9e:	b903      	cbnz	r3, 8011aa2 <__sflush_r+0x7e>
 8011aa0:	6560      	str	r0, [r4, #84]	; 0x54
 8011aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011aa4:	602f      	str	r7, [r5, #0]
 8011aa6:	2900      	cmp	r1, #0
 8011aa8:	d0c9      	beq.n	8011a3e <__sflush_r+0x1a>
 8011aaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011aae:	4299      	cmp	r1, r3
 8011ab0:	d002      	beq.n	8011ab8 <__sflush_r+0x94>
 8011ab2:	4628      	mov	r0, r5
 8011ab4:	f000 f9cc 	bl	8011e50 <_free_r>
 8011ab8:	2000      	movs	r0, #0
 8011aba:	6360      	str	r0, [r4, #52]	; 0x34
 8011abc:	e7c0      	b.n	8011a40 <__sflush_r+0x1c>
 8011abe:	2301      	movs	r3, #1
 8011ac0:	4628      	mov	r0, r5
 8011ac2:	47b0      	blx	r6
 8011ac4:	1c41      	adds	r1, r0, #1
 8011ac6:	d1c8      	bne.n	8011a5a <__sflush_r+0x36>
 8011ac8:	682b      	ldr	r3, [r5, #0]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d0c5      	beq.n	8011a5a <__sflush_r+0x36>
 8011ace:	2b1d      	cmp	r3, #29
 8011ad0:	d001      	beq.n	8011ad6 <__sflush_r+0xb2>
 8011ad2:	2b16      	cmp	r3, #22
 8011ad4:	d101      	bne.n	8011ada <__sflush_r+0xb6>
 8011ad6:	602f      	str	r7, [r5, #0]
 8011ad8:	e7b1      	b.n	8011a3e <__sflush_r+0x1a>
 8011ada:	89a3      	ldrh	r3, [r4, #12]
 8011adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ae0:	81a3      	strh	r3, [r4, #12]
 8011ae2:	e7ad      	b.n	8011a40 <__sflush_r+0x1c>
 8011ae4:	690f      	ldr	r7, [r1, #16]
 8011ae6:	2f00      	cmp	r7, #0
 8011ae8:	d0a9      	beq.n	8011a3e <__sflush_r+0x1a>
 8011aea:	0793      	lsls	r3, r2, #30
 8011aec:	680e      	ldr	r6, [r1, #0]
 8011aee:	bf08      	it	eq
 8011af0:	694b      	ldreq	r3, [r1, #20]
 8011af2:	600f      	str	r7, [r1, #0]
 8011af4:	bf18      	it	ne
 8011af6:	2300      	movne	r3, #0
 8011af8:	eba6 0807 	sub.w	r8, r6, r7
 8011afc:	608b      	str	r3, [r1, #8]
 8011afe:	f1b8 0f00 	cmp.w	r8, #0
 8011b02:	dd9c      	ble.n	8011a3e <__sflush_r+0x1a>
 8011b04:	4643      	mov	r3, r8
 8011b06:	463a      	mov	r2, r7
 8011b08:	6a21      	ldr	r1, [r4, #32]
 8011b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011b0c:	4628      	mov	r0, r5
 8011b0e:	47b0      	blx	r6
 8011b10:	2800      	cmp	r0, #0
 8011b12:	dc06      	bgt.n	8011b22 <__sflush_r+0xfe>
 8011b14:	89a3      	ldrh	r3, [r4, #12]
 8011b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b1a:	81a3      	strh	r3, [r4, #12]
 8011b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b20:	e78e      	b.n	8011a40 <__sflush_r+0x1c>
 8011b22:	4407      	add	r7, r0
 8011b24:	eba8 0800 	sub.w	r8, r8, r0
 8011b28:	e7e9      	b.n	8011afe <__sflush_r+0xda>
 8011b2a:	bf00      	nop
 8011b2c:	20400001 	.word	0x20400001

08011b30 <_fflush_r>:
 8011b30:	b538      	push	{r3, r4, r5, lr}
 8011b32:	690b      	ldr	r3, [r1, #16]
 8011b34:	4605      	mov	r5, r0
 8011b36:	460c      	mov	r4, r1
 8011b38:	b1db      	cbz	r3, 8011b72 <_fflush_r+0x42>
 8011b3a:	b118      	cbz	r0, 8011b44 <_fflush_r+0x14>
 8011b3c:	6983      	ldr	r3, [r0, #24]
 8011b3e:	b90b      	cbnz	r3, 8011b44 <_fflush_r+0x14>
 8011b40:	f000 f860 	bl	8011c04 <__sinit>
 8011b44:	4b0c      	ldr	r3, [pc, #48]	; (8011b78 <_fflush_r+0x48>)
 8011b46:	429c      	cmp	r4, r3
 8011b48:	d109      	bne.n	8011b5e <_fflush_r+0x2e>
 8011b4a:	686c      	ldr	r4, [r5, #4]
 8011b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b50:	b17b      	cbz	r3, 8011b72 <_fflush_r+0x42>
 8011b52:	4621      	mov	r1, r4
 8011b54:	4628      	mov	r0, r5
 8011b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b5a:	f7ff bf63 	b.w	8011a24 <__sflush_r>
 8011b5e:	4b07      	ldr	r3, [pc, #28]	; (8011b7c <_fflush_r+0x4c>)
 8011b60:	429c      	cmp	r4, r3
 8011b62:	d101      	bne.n	8011b68 <_fflush_r+0x38>
 8011b64:	68ac      	ldr	r4, [r5, #8]
 8011b66:	e7f1      	b.n	8011b4c <_fflush_r+0x1c>
 8011b68:	4b05      	ldr	r3, [pc, #20]	; (8011b80 <_fflush_r+0x50>)
 8011b6a:	429c      	cmp	r4, r3
 8011b6c:	bf08      	it	eq
 8011b6e:	68ec      	ldreq	r4, [r5, #12]
 8011b70:	e7ec      	b.n	8011b4c <_fflush_r+0x1c>
 8011b72:	2000      	movs	r0, #0
 8011b74:	bd38      	pop	{r3, r4, r5, pc}
 8011b76:	bf00      	nop
 8011b78:	08016670 	.word	0x08016670
 8011b7c:	08016690 	.word	0x08016690
 8011b80:	08016650 	.word	0x08016650

08011b84 <std>:
 8011b84:	2300      	movs	r3, #0
 8011b86:	b510      	push	{r4, lr}
 8011b88:	4604      	mov	r4, r0
 8011b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8011b8e:	6083      	str	r3, [r0, #8]
 8011b90:	8181      	strh	r1, [r0, #12]
 8011b92:	6643      	str	r3, [r0, #100]	; 0x64
 8011b94:	81c2      	strh	r2, [r0, #14]
 8011b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b9a:	6183      	str	r3, [r0, #24]
 8011b9c:	4619      	mov	r1, r3
 8011b9e:	2208      	movs	r2, #8
 8011ba0:	305c      	adds	r0, #92	; 0x5c
 8011ba2:	f000 f94c 	bl	8011e3e <memset>
 8011ba6:	4b05      	ldr	r3, [pc, #20]	; (8011bbc <std+0x38>)
 8011ba8:	6263      	str	r3, [r4, #36]	; 0x24
 8011baa:	4b05      	ldr	r3, [pc, #20]	; (8011bc0 <std+0x3c>)
 8011bac:	62a3      	str	r3, [r4, #40]	; 0x28
 8011bae:	4b05      	ldr	r3, [pc, #20]	; (8011bc4 <std+0x40>)
 8011bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011bb2:	4b05      	ldr	r3, [pc, #20]	; (8011bc8 <std+0x44>)
 8011bb4:	6224      	str	r4, [r4, #32]
 8011bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8011bb8:	bd10      	pop	{r4, pc}
 8011bba:	bf00      	nop
 8011bbc:	080132e9 	.word	0x080132e9
 8011bc0:	0801330b 	.word	0x0801330b
 8011bc4:	08013343 	.word	0x08013343
 8011bc8:	08013367 	.word	0x08013367

08011bcc <_cleanup_r>:
 8011bcc:	4901      	ldr	r1, [pc, #4]	; (8011bd4 <_cleanup_r+0x8>)
 8011bce:	f000 b885 	b.w	8011cdc <_fwalk_reent>
 8011bd2:	bf00      	nop
 8011bd4:	08011b31 	.word	0x08011b31

08011bd8 <__sfmoreglue>:
 8011bd8:	b570      	push	{r4, r5, r6, lr}
 8011bda:	1e4a      	subs	r2, r1, #1
 8011bdc:	2568      	movs	r5, #104	; 0x68
 8011bde:	4355      	muls	r5, r2
 8011be0:	460e      	mov	r6, r1
 8011be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011be6:	f000 f981 	bl	8011eec <_malloc_r>
 8011bea:	4604      	mov	r4, r0
 8011bec:	b140      	cbz	r0, 8011c00 <__sfmoreglue+0x28>
 8011bee:	2100      	movs	r1, #0
 8011bf0:	e9c0 1600 	strd	r1, r6, [r0]
 8011bf4:	300c      	adds	r0, #12
 8011bf6:	60a0      	str	r0, [r4, #8]
 8011bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011bfc:	f000 f91f 	bl	8011e3e <memset>
 8011c00:	4620      	mov	r0, r4
 8011c02:	bd70      	pop	{r4, r5, r6, pc}

08011c04 <__sinit>:
 8011c04:	6983      	ldr	r3, [r0, #24]
 8011c06:	b510      	push	{r4, lr}
 8011c08:	4604      	mov	r4, r0
 8011c0a:	bb33      	cbnz	r3, 8011c5a <__sinit+0x56>
 8011c0c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011c10:	6503      	str	r3, [r0, #80]	; 0x50
 8011c12:	4b12      	ldr	r3, [pc, #72]	; (8011c5c <__sinit+0x58>)
 8011c14:	4a12      	ldr	r2, [pc, #72]	; (8011c60 <__sinit+0x5c>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	6282      	str	r2, [r0, #40]	; 0x28
 8011c1a:	4298      	cmp	r0, r3
 8011c1c:	bf04      	itt	eq
 8011c1e:	2301      	moveq	r3, #1
 8011c20:	6183      	streq	r3, [r0, #24]
 8011c22:	f000 f81f 	bl	8011c64 <__sfp>
 8011c26:	6060      	str	r0, [r4, #4]
 8011c28:	4620      	mov	r0, r4
 8011c2a:	f000 f81b 	bl	8011c64 <__sfp>
 8011c2e:	60a0      	str	r0, [r4, #8]
 8011c30:	4620      	mov	r0, r4
 8011c32:	f000 f817 	bl	8011c64 <__sfp>
 8011c36:	2200      	movs	r2, #0
 8011c38:	60e0      	str	r0, [r4, #12]
 8011c3a:	2104      	movs	r1, #4
 8011c3c:	6860      	ldr	r0, [r4, #4]
 8011c3e:	f7ff ffa1 	bl	8011b84 <std>
 8011c42:	2201      	movs	r2, #1
 8011c44:	2109      	movs	r1, #9
 8011c46:	68a0      	ldr	r0, [r4, #8]
 8011c48:	f7ff ff9c 	bl	8011b84 <std>
 8011c4c:	2202      	movs	r2, #2
 8011c4e:	2112      	movs	r1, #18
 8011c50:	68e0      	ldr	r0, [r4, #12]
 8011c52:	f7ff ff97 	bl	8011b84 <std>
 8011c56:	2301      	movs	r3, #1
 8011c58:	61a3      	str	r3, [r4, #24]
 8011c5a:	bd10      	pop	{r4, pc}
 8011c5c:	080166b0 	.word	0x080166b0
 8011c60:	08011bcd 	.word	0x08011bcd

08011c64 <__sfp>:
 8011c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c66:	4b1b      	ldr	r3, [pc, #108]	; (8011cd4 <__sfp+0x70>)
 8011c68:	681e      	ldr	r6, [r3, #0]
 8011c6a:	69b3      	ldr	r3, [r6, #24]
 8011c6c:	4607      	mov	r7, r0
 8011c6e:	b913      	cbnz	r3, 8011c76 <__sfp+0x12>
 8011c70:	4630      	mov	r0, r6
 8011c72:	f7ff ffc7 	bl	8011c04 <__sinit>
 8011c76:	3648      	adds	r6, #72	; 0x48
 8011c78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011c7c:	3b01      	subs	r3, #1
 8011c7e:	d503      	bpl.n	8011c88 <__sfp+0x24>
 8011c80:	6833      	ldr	r3, [r6, #0]
 8011c82:	b133      	cbz	r3, 8011c92 <__sfp+0x2e>
 8011c84:	6836      	ldr	r6, [r6, #0]
 8011c86:	e7f7      	b.n	8011c78 <__sfp+0x14>
 8011c88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011c8c:	b16d      	cbz	r5, 8011caa <__sfp+0x46>
 8011c8e:	3468      	adds	r4, #104	; 0x68
 8011c90:	e7f4      	b.n	8011c7c <__sfp+0x18>
 8011c92:	2104      	movs	r1, #4
 8011c94:	4638      	mov	r0, r7
 8011c96:	f7ff ff9f 	bl	8011bd8 <__sfmoreglue>
 8011c9a:	6030      	str	r0, [r6, #0]
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	d1f1      	bne.n	8011c84 <__sfp+0x20>
 8011ca0:	230c      	movs	r3, #12
 8011ca2:	603b      	str	r3, [r7, #0]
 8011ca4:	4604      	mov	r4, r0
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011caa:	4b0b      	ldr	r3, [pc, #44]	; (8011cd8 <__sfp+0x74>)
 8011cac:	6665      	str	r5, [r4, #100]	; 0x64
 8011cae:	e9c4 5500 	strd	r5, r5, [r4]
 8011cb2:	60a5      	str	r5, [r4, #8]
 8011cb4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011cb8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011cbc:	2208      	movs	r2, #8
 8011cbe:	4629      	mov	r1, r5
 8011cc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011cc4:	f000 f8bb 	bl	8011e3e <memset>
 8011cc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011ccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011cd0:	e7e9      	b.n	8011ca6 <__sfp+0x42>
 8011cd2:	bf00      	nop
 8011cd4:	080166b0 	.word	0x080166b0
 8011cd8:	ffff0001 	.word	0xffff0001

08011cdc <_fwalk_reent>:
 8011cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ce0:	4680      	mov	r8, r0
 8011ce2:	4689      	mov	r9, r1
 8011ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ce8:	2600      	movs	r6, #0
 8011cea:	b914      	cbnz	r4, 8011cf2 <_fwalk_reent+0x16>
 8011cec:	4630      	mov	r0, r6
 8011cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cf2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011cf6:	3f01      	subs	r7, #1
 8011cf8:	d501      	bpl.n	8011cfe <_fwalk_reent+0x22>
 8011cfa:	6824      	ldr	r4, [r4, #0]
 8011cfc:	e7f5      	b.n	8011cea <_fwalk_reent+0xe>
 8011cfe:	89ab      	ldrh	r3, [r5, #12]
 8011d00:	2b01      	cmp	r3, #1
 8011d02:	d907      	bls.n	8011d14 <_fwalk_reent+0x38>
 8011d04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d08:	3301      	adds	r3, #1
 8011d0a:	d003      	beq.n	8011d14 <_fwalk_reent+0x38>
 8011d0c:	4629      	mov	r1, r5
 8011d0e:	4640      	mov	r0, r8
 8011d10:	47c8      	blx	r9
 8011d12:	4306      	orrs	r6, r0
 8011d14:	3568      	adds	r5, #104	; 0x68
 8011d16:	e7ee      	b.n	8011cf6 <_fwalk_reent+0x1a>

08011d18 <__libc_init_array>:
 8011d18:	b570      	push	{r4, r5, r6, lr}
 8011d1a:	4e0d      	ldr	r6, [pc, #52]	; (8011d50 <__libc_init_array+0x38>)
 8011d1c:	4c0d      	ldr	r4, [pc, #52]	; (8011d54 <__libc_init_array+0x3c>)
 8011d1e:	1ba4      	subs	r4, r4, r6
 8011d20:	10a4      	asrs	r4, r4, #2
 8011d22:	2500      	movs	r5, #0
 8011d24:	42a5      	cmp	r5, r4
 8011d26:	d109      	bne.n	8011d3c <__libc_init_array+0x24>
 8011d28:	4e0b      	ldr	r6, [pc, #44]	; (8011d58 <__libc_init_array+0x40>)
 8011d2a:	4c0c      	ldr	r4, [pc, #48]	; (8011d5c <__libc_init_array+0x44>)
 8011d2c:	f004 fa8c 	bl	8016248 <_init>
 8011d30:	1ba4      	subs	r4, r4, r6
 8011d32:	10a4      	asrs	r4, r4, #2
 8011d34:	2500      	movs	r5, #0
 8011d36:	42a5      	cmp	r5, r4
 8011d38:	d105      	bne.n	8011d46 <__libc_init_array+0x2e>
 8011d3a:	bd70      	pop	{r4, r5, r6, pc}
 8011d3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011d40:	4798      	blx	r3
 8011d42:	3501      	adds	r5, #1
 8011d44:	e7ee      	b.n	8011d24 <__libc_init_array+0xc>
 8011d46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011d4a:	4798      	blx	r3
 8011d4c:	3501      	adds	r5, #1
 8011d4e:	e7f2      	b.n	8011d36 <__libc_init_array+0x1e>
 8011d50:	08016970 	.word	0x08016970
 8011d54:	08016970 	.word	0x08016970
 8011d58:	08016970 	.word	0x08016970
 8011d5c:	08016974 	.word	0x08016974

08011d60 <__swhatbuf_r>:
 8011d60:	b570      	push	{r4, r5, r6, lr}
 8011d62:	460e      	mov	r6, r1
 8011d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d68:	2900      	cmp	r1, #0
 8011d6a:	b096      	sub	sp, #88	; 0x58
 8011d6c:	4614      	mov	r4, r2
 8011d6e:	461d      	mov	r5, r3
 8011d70:	da07      	bge.n	8011d82 <__swhatbuf_r+0x22>
 8011d72:	2300      	movs	r3, #0
 8011d74:	602b      	str	r3, [r5, #0]
 8011d76:	89b3      	ldrh	r3, [r6, #12]
 8011d78:	061a      	lsls	r2, r3, #24
 8011d7a:	d410      	bmi.n	8011d9e <__swhatbuf_r+0x3e>
 8011d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d80:	e00e      	b.n	8011da0 <__swhatbuf_r+0x40>
 8011d82:	466a      	mov	r2, sp
 8011d84:	f003 f8c8 	bl	8014f18 <_fstat_r>
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	dbf2      	blt.n	8011d72 <__swhatbuf_r+0x12>
 8011d8c:	9a01      	ldr	r2, [sp, #4]
 8011d8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d96:	425a      	negs	r2, r3
 8011d98:	415a      	adcs	r2, r3
 8011d9a:	602a      	str	r2, [r5, #0]
 8011d9c:	e7ee      	b.n	8011d7c <__swhatbuf_r+0x1c>
 8011d9e:	2340      	movs	r3, #64	; 0x40
 8011da0:	2000      	movs	r0, #0
 8011da2:	6023      	str	r3, [r4, #0]
 8011da4:	b016      	add	sp, #88	; 0x58
 8011da6:	bd70      	pop	{r4, r5, r6, pc}

08011da8 <__smakebuf_r>:
 8011da8:	898b      	ldrh	r3, [r1, #12]
 8011daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011dac:	079d      	lsls	r5, r3, #30
 8011dae:	4606      	mov	r6, r0
 8011db0:	460c      	mov	r4, r1
 8011db2:	d507      	bpl.n	8011dc4 <__smakebuf_r+0x1c>
 8011db4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011db8:	6023      	str	r3, [r4, #0]
 8011dba:	6123      	str	r3, [r4, #16]
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	6163      	str	r3, [r4, #20]
 8011dc0:	b002      	add	sp, #8
 8011dc2:	bd70      	pop	{r4, r5, r6, pc}
 8011dc4:	ab01      	add	r3, sp, #4
 8011dc6:	466a      	mov	r2, sp
 8011dc8:	f7ff ffca 	bl	8011d60 <__swhatbuf_r>
 8011dcc:	9900      	ldr	r1, [sp, #0]
 8011dce:	4605      	mov	r5, r0
 8011dd0:	4630      	mov	r0, r6
 8011dd2:	f000 f88b 	bl	8011eec <_malloc_r>
 8011dd6:	b948      	cbnz	r0, 8011dec <__smakebuf_r+0x44>
 8011dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ddc:	059a      	lsls	r2, r3, #22
 8011dde:	d4ef      	bmi.n	8011dc0 <__smakebuf_r+0x18>
 8011de0:	f023 0303 	bic.w	r3, r3, #3
 8011de4:	f043 0302 	orr.w	r3, r3, #2
 8011de8:	81a3      	strh	r3, [r4, #12]
 8011dea:	e7e3      	b.n	8011db4 <__smakebuf_r+0xc>
 8011dec:	4b0d      	ldr	r3, [pc, #52]	; (8011e24 <__smakebuf_r+0x7c>)
 8011dee:	62b3      	str	r3, [r6, #40]	; 0x28
 8011df0:	89a3      	ldrh	r3, [r4, #12]
 8011df2:	6020      	str	r0, [r4, #0]
 8011df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011df8:	81a3      	strh	r3, [r4, #12]
 8011dfa:	9b00      	ldr	r3, [sp, #0]
 8011dfc:	6163      	str	r3, [r4, #20]
 8011dfe:	9b01      	ldr	r3, [sp, #4]
 8011e00:	6120      	str	r0, [r4, #16]
 8011e02:	b15b      	cbz	r3, 8011e1c <__smakebuf_r+0x74>
 8011e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e08:	4630      	mov	r0, r6
 8011e0a:	f003 fbbd 	bl	8015588 <_isatty_r>
 8011e0e:	b128      	cbz	r0, 8011e1c <__smakebuf_r+0x74>
 8011e10:	89a3      	ldrh	r3, [r4, #12]
 8011e12:	f023 0303 	bic.w	r3, r3, #3
 8011e16:	f043 0301 	orr.w	r3, r3, #1
 8011e1a:	81a3      	strh	r3, [r4, #12]
 8011e1c:	89a3      	ldrh	r3, [r4, #12]
 8011e1e:	431d      	orrs	r5, r3
 8011e20:	81a5      	strh	r5, [r4, #12]
 8011e22:	e7cd      	b.n	8011dc0 <__smakebuf_r+0x18>
 8011e24:	08011bcd 	.word	0x08011bcd

08011e28 <memcpy>:
 8011e28:	b510      	push	{r4, lr}
 8011e2a:	1e43      	subs	r3, r0, #1
 8011e2c:	440a      	add	r2, r1
 8011e2e:	4291      	cmp	r1, r2
 8011e30:	d100      	bne.n	8011e34 <memcpy+0xc>
 8011e32:	bd10      	pop	{r4, pc}
 8011e34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e3c:	e7f7      	b.n	8011e2e <memcpy+0x6>

08011e3e <memset>:
 8011e3e:	4402      	add	r2, r0
 8011e40:	4603      	mov	r3, r0
 8011e42:	4293      	cmp	r3, r2
 8011e44:	d100      	bne.n	8011e48 <memset+0xa>
 8011e46:	4770      	bx	lr
 8011e48:	f803 1b01 	strb.w	r1, [r3], #1
 8011e4c:	e7f9      	b.n	8011e42 <memset+0x4>
	...

08011e50 <_free_r>:
 8011e50:	b538      	push	{r3, r4, r5, lr}
 8011e52:	4605      	mov	r5, r0
 8011e54:	2900      	cmp	r1, #0
 8011e56:	d045      	beq.n	8011ee4 <_free_r+0x94>
 8011e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e5c:	1f0c      	subs	r4, r1, #4
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	bfb8      	it	lt
 8011e62:	18e4      	addlt	r4, r4, r3
 8011e64:	f003 fbf9 	bl	801565a <__malloc_lock>
 8011e68:	4a1f      	ldr	r2, [pc, #124]	; (8011ee8 <_free_r+0x98>)
 8011e6a:	6813      	ldr	r3, [r2, #0]
 8011e6c:	4610      	mov	r0, r2
 8011e6e:	b933      	cbnz	r3, 8011e7e <_free_r+0x2e>
 8011e70:	6063      	str	r3, [r4, #4]
 8011e72:	6014      	str	r4, [r2, #0]
 8011e74:	4628      	mov	r0, r5
 8011e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e7a:	f003 bbef 	b.w	801565c <__malloc_unlock>
 8011e7e:	42a3      	cmp	r3, r4
 8011e80:	d90c      	bls.n	8011e9c <_free_r+0x4c>
 8011e82:	6821      	ldr	r1, [r4, #0]
 8011e84:	1862      	adds	r2, r4, r1
 8011e86:	4293      	cmp	r3, r2
 8011e88:	bf04      	itt	eq
 8011e8a:	681a      	ldreq	r2, [r3, #0]
 8011e8c:	685b      	ldreq	r3, [r3, #4]
 8011e8e:	6063      	str	r3, [r4, #4]
 8011e90:	bf04      	itt	eq
 8011e92:	1852      	addeq	r2, r2, r1
 8011e94:	6022      	streq	r2, [r4, #0]
 8011e96:	6004      	str	r4, [r0, #0]
 8011e98:	e7ec      	b.n	8011e74 <_free_r+0x24>
 8011e9a:	4613      	mov	r3, r2
 8011e9c:	685a      	ldr	r2, [r3, #4]
 8011e9e:	b10a      	cbz	r2, 8011ea4 <_free_r+0x54>
 8011ea0:	42a2      	cmp	r2, r4
 8011ea2:	d9fa      	bls.n	8011e9a <_free_r+0x4a>
 8011ea4:	6819      	ldr	r1, [r3, #0]
 8011ea6:	1858      	adds	r0, r3, r1
 8011ea8:	42a0      	cmp	r0, r4
 8011eaa:	d10b      	bne.n	8011ec4 <_free_r+0x74>
 8011eac:	6820      	ldr	r0, [r4, #0]
 8011eae:	4401      	add	r1, r0
 8011eb0:	1858      	adds	r0, r3, r1
 8011eb2:	4282      	cmp	r2, r0
 8011eb4:	6019      	str	r1, [r3, #0]
 8011eb6:	d1dd      	bne.n	8011e74 <_free_r+0x24>
 8011eb8:	6810      	ldr	r0, [r2, #0]
 8011eba:	6852      	ldr	r2, [r2, #4]
 8011ebc:	605a      	str	r2, [r3, #4]
 8011ebe:	4401      	add	r1, r0
 8011ec0:	6019      	str	r1, [r3, #0]
 8011ec2:	e7d7      	b.n	8011e74 <_free_r+0x24>
 8011ec4:	d902      	bls.n	8011ecc <_free_r+0x7c>
 8011ec6:	230c      	movs	r3, #12
 8011ec8:	602b      	str	r3, [r5, #0]
 8011eca:	e7d3      	b.n	8011e74 <_free_r+0x24>
 8011ecc:	6820      	ldr	r0, [r4, #0]
 8011ece:	1821      	adds	r1, r4, r0
 8011ed0:	428a      	cmp	r2, r1
 8011ed2:	bf04      	itt	eq
 8011ed4:	6811      	ldreq	r1, [r2, #0]
 8011ed6:	6852      	ldreq	r2, [r2, #4]
 8011ed8:	6062      	str	r2, [r4, #4]
 8011eda:	bf04      	itt	eq
 8011edc:	1809      	addeq	r1, r1, r0
 8011ede:	6021      	streq	r1, [r4, #0]
 8011ee0:	605c      	str	r4, [r3, #4]
 8011ee2:	e7c7      	b.n	8011e74 <_free_r+0x24>
 8011ee4:	bd38      	pop	{r3, r4, r5, pc}
 8011ee6:	bf00      	nop
 8011ee8:	20005610 	.word	0x20005610

08011eec <_malloc_r>:
 8011eec:	b570      	push	{r4, r5, r6, lr}
 8011eee:	1ccd      	adds	r5, r1, #3
 8011ef0:	f025 0503 	bic.w	r5, r5, #3
 8011ef4:	3508      	adds	r5, #8
 8011ef6:	2d0c      	cmp	r5, #12
 8011ef8:	bf38      	it	cc
 8011efa:	250c      	movcc	r5, #12
 8011efc:	2d00      	cmp	r5, #0
 8011efe:	4606      	mov	r6, r0
 8011f00:	db01      	blt.n	8011f06 <_malloc_r+0x1a>
 8011f02:	42a9      	cmp	r1, r5
 8011f04:	d903      	bls.n	8011f0e <_malloc_r+0x22>
 8011f06:	230c      	movs	r3, #12
 8011f08:	6033      	str	r3, [r6, #0]
 8011f0a:	2000      	movs	r0, #0
 8011f0c:	bd70      	pop	{r4, r5, r6, pc}
 8011f0e:	f003 fba4 	bl	801565a <__malloc_lock>
 8011f12:	4a21      	ldr	r2, [pc, #132]	; (8011f98 <_malloc_r+0xac>)
 8011f14:	6814      	ldr	r4, [r2, #0]
 8011f16:	4621      	mov	r1, r4
 8011f18:	b991      	cbnz	r1, 8011f40 <_malloc_r+0x54>
 8011f1a:	4c20      	ldr	r4, [pc, #128]	; (8011f9c <_malloc_r+0xb0>)
 8011f1c:	6823      	ldr	r3, [r4, #0]
 8011f1e:	b91b      	cbnz	r3, 8011f28 <_malloc_r+0x3c>
 8011f20:	4630      	mov	r0, r6
 8011f22:	f001 f9ab 	bl	801327c <_sbrk_r>
 8011f26:	6020      	str	r0, [r4, #0]
 8011f28:	4629      	mov	r1, r5
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	f001 f9a6 	bl	801327c <_sbrk_r>
 8011f30:	1c43      	adds	r3, r0, #1
 8011f32:	d124      	bne.n	8011f7e <_malloc_r+0x92>
 8011f34:	230c      	movs	r3, #12
 8011f36:	6033      	str	r3, [r6, #0]
 8011f38:	4630      	mov	r0, r6
 8011f3a:	f003 fb8f 	bl	801565c <__malloc_unlock>
 8011f3e:	e7e4      	b.n	8011f0a <_malloc_r+0x1e>
 8011f40:	680b      	ldr	r3, [r1, #0]
 8011f42:	1b5b      	subs	r3, r3, r5
 8011f44:	d418      	bmi.n	8011f78 <_malloc_r+0x8c>
 8011f46:	2b0b      	cmp	r3, #11
 8011f48:	d90f      	bls.n	8011f6a <_malloc_r+0x7e>
 8011f4a:	600b      	str	r3, [r1, #0]
 8011f4c:	50cd      	str	r5, [r1, r3]
 8011f4e:	18cc      	adds	r4, r1, r3
 8011f50:	4630      	mov	r0, r6
 8011f52:	f003 fb83 	bl	801565c <__malloc_unlock>
 8011f56:	f104 000b 	add.w	r0, r4, #11
 8011f5a:	1d23      	adds	r3, r4, #4
 8011f5c:	f020 0007 	bic.w	r0, r0, #7
 8011f60:	1ac3      	subs	r3, r0, r3
 8011f62:	d0d3      	beq.n	8011f0c <_malloc_r+0x20>
 8011f64:	425a      	negs	r2, r3
 8011f66:	50e2      	str	r2, [r4, r3]
 8011f68:	e7d0      	b.n	8011f0c <_malloc_r+0x20>
 8011f6a:	428c      	cmp	r4, r1
 8011f6c:	684b      	ldr	r3, [r1, #4]
 8011f6e:	bf16      	itet	ne
 8011f70:	6063      	strne	r3, [r4, #4]
 8011f72:	6013      	streq	r3, [r2, #0]
 8011f74:	460c      	movne	r4, r1
 8011f76:	e7eb      	b.n	8011f50 <_malloc_r+0x64>
 8011f78:	460c      	mov	r4, r1
 8011f7a:	6849      	ldr	r1, [r1, #4]
 8011f7c:	e7cc      	b.n	8011f18 <_malloc_r+0x2c>
 8011f7e:	1cc4      	adds	r4, r0, #3
 8011f80:	f024 0403 	bic.w	r4, r4, #3
 8011f84:	42a0      	cmp	r0, r4
 8011f86:	d005      	beq.n	8011f94 <_malloc_r+0xa8>
 8011f88:	1a21      	subs	r1, r4, r0
 8011f8a:	4630      	mov	r0, r6
 8011f8c:	f001 f976 	bl	801327c <_sbrk_r>
 8011f90:	3001      	adds	r0, #1
 8011f92:	d0cf      	beq.n	8011f34 <_malloc_r+0x48>
 8011f94:	6025      	str	r5, [r4, #0]
 8011f96:	e7db      	b.n	8011f50 <_malloc_r+0x64>
 8011f98:	20005610 	.word	0x20005610
 8011f9c:	20005614 	.word	0x20005614

08011fa0 <__sfputc_r>:
 8011fa0:	6893      	ldr	r3, [r2, #8]
 8011fa2:	3b01      	subs	r3, #1
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	b410      	push	{r4}
 8011fa8:	6093      	str	r3, [r2, #8]
 8011faa:	da08      	bge.n	8011fbe <__sfputc_r+0x1e>
 8011fac:	6994      	ldr	r4, [r2, #24]
 8011fae:	42a3      	cmp	r3, r4
 8011fb0:	db01      	blt.n	8011fb6 <__sfputc_r+0x16>
 8011fb2:	290a      	cmp	r1, #10
 8011fb4:	d103      	bne.n	8011fbe <__sfputc_r+0x1e>
 8011fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fba:	f002 b887 	b.w	80140cc <__swbuf_r>
 8011fbe:	6813      	ldr	r3, [r2, #0]
 8011fc0:	1c58      	adds	r0, r3, #1
 8011fc2:	6010      	str	r0, [r2, #0]
 8011fc4:	7019      	strb	r1, [r3, #0]
 8011fc6:	4608      	mov	r0, r1
 8011fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fcc:	4770      	bx	lr

08011fce <__sfputs_r>:
 8011fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fd0:	4606      	mov	r6, r0
 8011fd2:	460f      	mov	r7, r1
 8011fd4:	4614      	mov	r4, r2
 8011fd6:	18d5      	adds	r5, r2, r3
 8011fd8:	42ac      	cmp	r4, r5
 8011fda:	d101      	bne.n	8011fe0 <__sfputs_r+0x12>
 8011fdc:	2000      	movs	r0, #0
 8011fde:	e007      	b.n	8011ff0 <__sfputs_r+0x22>
 8011fe0:	463a      	mov	r2, r7
 8011fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fe6:	4630      	mov	r0, r6
 8011fe8:	f7ff ffda 	bl	8011fa0 <__sfputc_r>
 8011fec:	1c43      	adds	r3, r0, #1
 8011fee:	d1f3      	bne.n	8011fd8 <__sfputs_r+0xa>
 8011ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011ff4 <_vfiprintf_r>:
 8011ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff8:	460c      	mov	r4, r1
 8011ffa:	b09d      	sub	sp, #116	; 0x74
 8011ffc:	4617      	mov	r7, r2
 8011ffe:	461d      	mov	r5, r3
 8012000:	4606      	mov	r6, r0
 8012002:	b118      	cbz	r0, 801200c <_vfiprintf_r+0x18>
 8012004:	6983      	ldr	r3, [r0, #24]
 8012006:	b90b      	cbnz	r3, 801200c <_vfiprintf_r+0x18>
 8012008:	f7ff fdfc 	bl	8011c04 <__sinit>
 801200c:	4b7c      	ldr	r3, [pc, #496]	; (8012200 <_vfiprintf_r+0x20c>)
 801200e:	429c      	cmp	r4, r3
 8012010:	d158      	bne.n	80120c4 <_vfiprintf_r+0xd0>
 8012012:	6874      	ldr	r4, [r6, #4]
 8012014:	89a3      	ldrh	r3, [r4, #12]
 8012016:	0718      	lsls	r0, r3, #28
 8012018:	d55e      	bpl.n	80120d8 <_vfiprintf_r+0xe4>
 801201a:	6923      	ldr	r3, [r4, #16]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d05b      	beq.n	80120d8 <_vfiprintf_r+0xe4>
 8012020:	2300      	movs	r3, #0
 8012022:	9309      	str	r3, [sp, #36]	; 0x24
 8012024:	2320      	movs	r3, #32
 8012026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801202a:	2330      	movs	r3, #48	; 0x30
 801202c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012030:	9503      	str	r5, [sp, #12]
 8012032:	f04f 0b01 	mov.w	fp, #1
 8012036:	46b8      	mov	r8, r7
 8012038:	4645      	mov	r5, r8
 801203a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801203e:	b10b      	cbz	r3, 8012044 <_vfiprintf_r+0x50>
 8012040:	2b25      	cmp	r3, #37	; 0x25
 8012042:	d154      	bne.n	80120ee <_vfiprintf_r+0xfa>
 8012044:	ebb8 0a07 	subs.w	sl, r8, r7
 8012048:	d00b      	beq.n	8012062 <_vfiprintf_r+0x6e>
 801204a:	4653      	mov	r3, sl
 801204c:	463a      	mov	r2, r7
 801204e:	4621      	mov	r1, r4
 8012050:	4630      	mov	r0, r6
 8012052:	f7ff ffbc 	bl	8011fce <__sfputs_r>
 8012056:	3001      	adds	r0, #1
 8012058:	f000 80c2 	beq.w	80121e0 <_vfiprintf_r+0x1ec>
 801205c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801205e:	4453      	add	r3, sl
 8012060:	9309      	str	r3, [sp, #36]	; 0x24
 8012062:	f898 3000 	ldrb.w	r3, [r8]
 8012066:	2b00      	cmp	r3, #0
 8012068:	f000 80ba 	beq.w	80121e0 <_vfiprintf_r+0x1ec>
 801206c:	2300      	movs	r3, #0
 801206e:	f04f 32ff 	mov.w	r2, #4294967295
 8012072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012076:	9304      	str	r3, [sp, #16]
 8012078:	9307      	str	r3, [sp, #28]
 801207a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801207e:	931a      	str	r3, [sp, #104]	; 0x68
 8012080:	46a8      	mov	r8, r5
 8012082:	2205      	movs	r2, #5
 8012084:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012088:	485e      	ldr	r0, [pc, #376]	; (8012204 <_vfiprintf_r+0x210>)
 801208a:	f7f5 ffe1 	bl	8008050 <memchr>
 801208e:	9b04      	ldr	r3, [sp, #16]
 8012090:	bb78      	cbnz	r0, 80120f2 <_vfiprintf_r+0xfe>
 8012092:	06d9      	lsls	r1, r3, #27
 8012094:	bf44      	itt	mi
 8012096:	2220      	movmi	r2, #32
 8012098:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801209c:	071a      	lsls	r2, r3, #28
 801209e:	bf44      	itt	mi
 80120a0:	222b      	movmi	r2, #43	; 0x2b
 80120a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80120a6:	782a      	ldrb	r2, [r5, #0]
 80120a8:	2a2a      	cmp	r2, #42	; 0x2a
 80120aa:	d02a      	beq.n	8012102 <_vfiprintf_r+0x10e>
 80120ac:	9a07      	ldr	r2, [sp, #28]
 80120ae:	46a8      	mov	r8, r5
 80120b0:	2000      	movs	r0, #0
 80120b2:	250a      	movs	r5, #10
 80120b4:	4641      	mov	r1, r8
 80120b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120ba:	3b30      	subs	r3, #48	; 0x30
 80120bc:	2b09      	cmp	r3, #9
 80120be:	d969      	bls.n	8012194 <_vfiprintf_r+0x1a0>
 80120c0:	b360      	cbz	r0, 801211c <_vfiprintf_r+0x128>
 80120c2:	e024      	b.n	801210e <_vfiprintf_r+0x11a>
 80120c4:	4b50      	ldr	r3, [pc, #320]	; (8012208 <_vfiprintf_r+0x214>)
 80120c6:	429c      	cmp	r4, r3
 80120c8:	d101      	bne.n	80120ce <_vfiprintf_r+0xda>
 80120ca:	68b4      	ldr	r4, [r6, #8]
 80120cc:	e7a2      	b.n	8012014 <_vfiprintf_r+0x20>
 80120ce:	4b4f      	ldr	r3, [pc, #316]	; (801220c <_vfiprintf_r+0x218>)
 80120d0:	429c      	cmp	r4, r3
 80120d2:	bf08      	it	eq
 80120d4:	68f4      	ldreq	r4, [r6, #12]
 80120d6:	e79d      	b.n	8012014 <_vfiprintf_r+0x20>
 80120d8:	4621      	mov	r1, r4
 80120da:	4630      	mov	r0, r6
 80120dc:	f002 f85a 	bl	8014194 <__swsetup_r>
 80120e0:	2800      	cmp	r0, #0
 80120e2:	d09d      	beq.n	8012020 <_vfiprintf_r+0x2c>
 80120e4:	f04f 30ff 	mov.w	r0, #4294967295
 80120e8:	b01d      	add	sp, #116	; 0x74
 80120ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ee:	46a8      	mov	r8, r5
 80120f0:	e7a2      	b.n	8012038 <_vfiprintf_r+0x44>
 80120f2:	4a44      	ldr	r2, [pc, #272]	; (8012204 <_vfiprintf_r+0x210>)
 80120f4:	1a80      	subs	r0, r0, r2
 80120f6:	fa0b f000 	lsl.w	r0, fp, r0
 80120fa:	4318      	orrs	r0, r3
 80120fc:	9004      	str	r0, [sp, #16]
 80120fe:	4645      	mov	r5, r8
 8012100:	e7be      	b.n	8012080 <_vfiprintf_r+0x8c>
 8012102:	9a03      	ldr	r2, [sp, #12]
 8012104:	1d11      	adds	r1, r2, #4
 8012106:	6812      	ldr	r2, [r2, #0]
 8012108:	9103      	str	r1, [sp, #12]
 801210a:	2a00      	cmp	r2, #0
 801210c:	db01      	blt.n	8012112 <_vfiprintf_r+0x11e>
 801210e:	9207      	str	r2, [sp, #28]
 8012110:	e004      	b.n	801211c <_vfiprintf_r+0x128>
 8012112:	4252      	negs	r2, r2
 8012114:	f043 0302 	orr.w	r3, r3, #2
 8012118:	9207      	str	r2, [sp, #28]
 801211a:	9304      	str	r3, [sp, #16]
 801211c:	f898 3000 	ldrb.w	r3, [r8]
 8012120:	2b2e      	cmp	r3, #46	; 0x2e
 8012122:	d10e      	bne.n	8012142 <_vfiprintf_r+0x14e>
 8012124:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012128:	2b2a      	cmp	r3, #42	; 0x2a
 801212a:	d138      	bne.n	801219e <_vfiprintf_r+0x1aa>
 801212c:	9b03      	ldr	r3, [sp, #12]
 801212e:	1d1a      	adds	r2, r3, #4
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	9203      	str	r2, [sp, #12]
 8012134:	2b00      	cmp	r3, #0
 8012136:	bfb8      	it	lt
 8012138:	f04f 33ff 	movlt.w	r3, #4294967295
 801213c:	f108 0802 	add.w	r8, r8, #2
 8012140:	9305      	str	r3, [sp, #20]
 8012142:	4d33      	ldr	r5, [pc, #204]	; (8012210 <_vfiprintf_r+0x21c>)
 8012144:	f898 1000 	ldrb.w	r1, [r8]
 8012148:	2203      	movs	r2, #3
 801214a:	4628      	mov	r0, r5
 801214c:	f7f5 ff80 	bl	8008050 <memchr>
 8012150:	b140      	cbz	r0, 8012164 <_vfiprintf_r+0x170>
 8012152:	2340      	movs	r3, #64	; 0x40
 8012154:	1b40      	subs	r0, r0, r5
 8012156:	fa03 f000 	lsl.w	r0, r3, r0
 801215a:	9b04      	ldr	r3, [sp, #16]
 801215c:	4303      	orrs	r3, r0
 801215e:	f108 0801 	add.w	r8, r8, #1
 8012162:	9304      	str	r3, [sp, #16]
 8012164:	f898 1000 	ldrb.w	r1, [r8]
 8012168:	482a      	ldr	r0, [pc, #168]	; (8012214 <_vfiprintf_r+0x220>)
 801216a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801216e:	2206      	movs	r2, #6
 8012170:	f108 0701 	add.w	r7, r8, #1
 8012174:	f7f5 ff6c 	bl	8008050 <memchr>
 8012178:	2800      	cmp	r0, #0
 801217a:	d037      	beq.n	80121ec <_vfiprintf_r+0x1f8>
 801217c:	4b26      	ldr	r3, [pc, #152]	; (8012218 <_vfiprintf_r+0x224>)
 801217e:	bb1b      	cbnz	r3, 80121c8 <_vfiprintf_r+0x1d4>
 8012180:	9b03      	ldr	r3, [sp, #12]
 8012182:	3307      	adds	r3, #7
 8012184:	f023 0307 	bic.w	r3, r3, #7
 8012188:	3308      	adds	r3, #8
 801218a:	9303      	str	r3, [sp, #12]
 801218c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801218e:	444b      	add	r3, r9
 8012190:	9309      	str	r3, [sp, #36]	; 0x24
 8012192:	e750      	b.n	8012036 <_vfiprintf_r+0x42>
 8012194:	fb05 3202 	mla	r2, r5, r2, r3
 8012198:	2001      	movs	r0, #1
 801219a:	4688      	mov	r8, r1
 801219c:	e78a      	b.n	80120b4 <_vfiprintf_r+0xc0>
 801219e:	2300      	movs	r3, #0
 80121a0:	f108 0801 	add.w	r8, r8, #1
 80121a4:	9305      	str	r3, [sp, #20]
 80121a6:	4619      	mov	r1, r3
 80121a8:	250a      	movs	r5, #10
 80121aa:	4640      	mov	r0, r8
 80121ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121b0:	3a30      	subs	r2, #48	; 0x30
 80121b2:	2a09      	cmp	r2, #9
 80121b4:	d903      	bls.n	80121be <_vfiprintf_r+0x1ca>
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d0c3      	beq.n	8012142 <_vfiprintf_r+0x14e>
 80121ba:	9105      	str	r1, [sp, #20]
 80121bc:	e7c1      	b.n	8012142 <_vfiprintf_r+0x14e>
 80121be:	fb05 2101 	mla	r1, r5, r1, r2
 80121c2:	2301      	movs	r3, #1
 80121c4:	4680      	mov	r8, r0
 80121c6:	e7f0      	b.n	80121aa <_vfiprintf_r+0x1b6>
 80121c8:	ab03      	add	r3, sp, #12
 80121ca:	9300      	str	r3, [sp, #0]
 80121cc:	4622      	mov	r2, r4
 80121ce:	4b13      	ldr	r3, [pc, #76]	; (801221c <_vfiprintf_r+0x228>)
 80121d0:	a904      	add	r1, sp, #16
 80121d2:	4630      	mov	r0, r6
 80121d4:	f000 f8b8 	bl	8012348 <_printf_float>
 80121d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80121dc:	4681      	mov	r9, r0
 80121de:	d1d5      	bne.n	801218c <_vfiprintf_r+0x198>
 80121e0:	89a3      	ldrh	r3, [r4, #12]
 80121e2:	065b      	lsls	r3, r3, #25
 80121e4:	f53f af7e 	bmi.w	80120e4 <_vfiprintf_r+0xf0>
 80121e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121ea:	e77d      	b.n	80120e8 <_vfiprintf_r+0xf4>
 80121ec:	ab03      	add	r3, sp, #12
 80121ee:	9300      	str	r3, [sp, #0]
 80121f0:	4622      	mov	r2, r4
 80121f2:	4b0a      	ldr	r3, [pc, #40]	; (801221c <_vfiprintf_r+0x228>)
 80121f4:	a904      	add	r1, sp, #16
 80121f6:	4630      	mov	r0, r6
 80121f8:	f000 fb5c 	bl	80128b4 <_printf_i>
 80121fc:	e7ec      	b.n	80121d8 <_vfiprintf_r+0x1e4>
 80121fe:	bf00      	nop
 8012200:	08016670 	.word	0x08016670
 8012204:	080166b4 	.word	0x080166b4
 8012208:	08016690 	.word	0x08016690
 801220c:	08016650 	.word	0x08016650
 8012210:	080166ba 	.word	0x080166ba
 8012214:	080166be 	.word	0x080166be
 8012218:	08012349 	.word	0x08012349
 801221c:	08011fcf 	.word	0x08011fcf

08012220 <__cvt>:
 8012220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012224:	ec55 4b10 	vmov	r4, r5, d0
 8012228:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801222a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801222e:	2d00      	cmp	r5, #0
 8012230:	460e      	mov	r6, r1
 8012232:	4691      	mov	r9, r2
 8012234:	4619      	mov	r1, r3
 8012236:	bfb8      	it	lt
 8012238:	4622      	movlt	r2, r4
 801223a:	462b      	mov	r3, r5
 801223c:	f027 0720 	bic.w	r7, r7, #32
 8012240:	bfbb      	ittet	lt
 8012242:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012246:	461d      	movlt	r5, r3
 8012248:	2300      	movge	r3, #0
 801224a:	232d      	movlt	r3, #45	; 0x2d
 801224c:	bfb8      	it	lt
 801224e:	4614      	movlt	r4, r2
 8012250:	2f46      	cmp	r7, #70	; 0x46
 8012252:	700b      	strb	r3, [r1, #0]
 8012254:	d004      	beq.n	8012260 <__cvt+0x40>
 8012256:	2f45      	cmp	r7, #69	; 0x45
 8012258:	d100      	bne.n	801225c <__cvt+0x3c>
 801225a:	3601      	adds	r6, #1
 801225c:	2102      	movs	r1, #2
 801225e:	e000      	b.n	8012262 <__cvt+0x42>
 8012260:	2103      	movs	r1, #3
 8012262:	ab03      	add	r3, sp, #12
 8012264:	9301      	str	r3, [sp, #4]
 8012266:	ab02      	add	r3, sp, #8
 8012268:	9300      	str	r3, [sp, #0]
 801226a:	4632      	mov	r2, r6
 801226c:	4653      	mov	r3, sl
 801226e:	ec45 4b10 	vmov	d0, r4, r5
 8012272:	f002 f899 	bl	80143a8 <_dtoa_r>
 8012276:	2f47      	cmp	r7, #71	; 0x47
 8012278:	4680      	mov	r8, r0
 801227a:	d102      	bne.n	8012282 <__cvt+0x62>
 801227c:	f019 0f01 	tst.w	r9, #1
 8012280:	d026      	beq.n	80122d0 <__cvt+0xb0>
 8012282:	2f46      	cmp	r7, #70	; 0x46
 8012284:	eb08 0906 	add.w	r9, r8, r6
 8012288:	d111      	bne.n	80122ae <__cvt+0x8e>
 801228a:	f898 3000 	ldrb.w	r3, [r8]
 801228e:	2b30      	cmp	r3, #48	; 0x30
 8012290:	d10a      	bne.n	80122a8 <__cvt+0x88>
 8012292:	2200      	movs	r2, #0
 8012294:	2300      	movs	r3, #0
 8012296:	4620      	mov	r0, r4
 8012298:	4629      	mov	r1, r5
 801229a:	f7f6 fb4d 	bl	8008938 <__aeabi_dcmpeq>
 801229e:	b918      	cbnz	r0, 80122a8 <__cvt+0x88>
 80122a0:	f1c6 0601 	rsb	r6, r6, #1
 80122a4:	f8ca 6000 	str.w	r6, [sl]
 80122a8:	f8da 3000 	ldr.w	r3, [sl]
 80122ac:	4499      	add	r9, r3
 80122ae:	2200      	movs	r2, #0
 80122b0:	2300      	movs	r3, #0
 80122b2:	4620      	mov	r0, r4
 80122b4:	4629      	mov	r1, r5
 80122b6:	f7f6 fb3f 	bl	8008938 <__aeabi_dcmpeq>
 80122ba:	b938      	cbnz	r0, 80122cc <__cvt+0xac>
 80122bc:	2230      	movs	r2, #48	; 0x30
 80122be:	9b03      	ldr	r3, [sp, #12]
 80122c0:	454b      	cmp	r3, r9
 80122c2:	d205      	bcs.n	80122d0 <__cvt+0xb0>
 80122c4:	1c59      	adds	r1, r3, #1
 80122c6:	9103      	str	r1, [sp, #12]
 80122c8:	701a      	strb	r2, [r3, #0]
 80122ca:	e7f8      	b.n	80122be <__cvt+0x9e>
 80122cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80122d0:	9b03      	ldr	r3, [sp, #12]
 80122d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122d4:	eba3 0308 	sub.w	r3, r3, r8
 80122d8:	4640      	mov	r0, r8
 80122da:	6013      	str	r3, [r2, #0]
 80122dc:	b004      	add	sp, #16
 80122de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080122e2 <__exponent>:
 80122e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122e4:	2900      	cmp	r1, #0
 80122e6:	4604      	mov	r4, r0
 80122e8:	bfba      	itte	lt
 80122ea:	4249      	neglt	r1, r1
 80122ec:	232d      	movlt	r3, #45	; 0x2d
 80122ee:	232b      	movge	r3, #43	; 0x2b
 80122f0:	2909      	cmp	r1, #9
 80122f2:	f804 2b02 	strb.w	r2, [r4], #2
 80122f6:	7043      	strb	r3, [r0, #1]
 80122f8:	dd20      	ble.n	801233c <__exponent+0x5a>
 80122fa:	f10d 0307 	add.w	r3, sp, #7
 80122fe:	461f      	mov	r7, r3
 8012300:	260a      	movs	r6, #10
 8012302:	fb91 f5f6 	sdiv	r5, r1, r6
 8012306:	fb06 1115 	mls	r1, r6, r5, r1
 801230a:	3130      	adds	r1, #48	; 0x30
 801230c:	2d09      	cmp	r5, #9
 801230e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012312:	f103 32ff 	add.w	r2, r3, #4294967295
 8012316:	4629      	mov	r1, r5
 8012318:	dc09      	bgt.n	801232e <__exponent+0x4c>
 801231a:	3130      	adds	r1, #48	; 0x30
 801231c:	3b02      	subs	r3, #2
 801231e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012322:	42bb      	cmp	r3, r7
 8012324:	4622      	mov	r2, r4
 8012326:	d304      	bcc.n	8012332 <__exponent+0x50>
 8012328:	1a10      	subs	r0, r2, r0
 801232a:	b003      	add	sp, #12
 801232c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801232e:	4613      	mov	r3, r2
 8012330:	e7e7      	b.n	8012302 <__exponent+0x20>
 8012332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012336:	f804 2b01 	strb.w	r2, [r4], #1
 801233a:	e7f2      	b.n	8012322 <__exponent+0x40>
 801233c:	2330      	movs	r3, #48	; 0x30
 801233e:	4419      	add	r1, r3
 8012340:	7083      	strb	r3, [r0, #2]
 8012342:	1d02      	adds	r2, r0, #4
 8012344:	70c1      	strb	r1, [r0, #3]
 8012346:	e7ef      	b.n	8012328 <__exponent+0x46>

08012348 <_printf_float>:
 8012348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801234c:	b08d      	sub	sp, #52	; 0x34
 801234e:	460c      	mov	r4, r1
 8012350:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012354:	4616      	mov	r6, r2
 8012356:	461f      	mov	r7, r3
 8012358:	4605      	mov	r5, r0
 801235a:	f003 f92b 	bl	80155b4 <_localeconv_r>
 801235e:	6803      	ldr	r3, [r0, #0]
 8012360:	9304      	str	r3, [sp, #16]
 8012362:	4618      	mov	r0, r3
 8012364:	f7f5 fe6c 	bl	8008040 <strlen>
 8012368:	2300      	movs	r3, #0
 801236a:	930a      	str	r3, [sp, #40]	; 0x28
 801236c:	f8d8 3000 	ldr.w	r3, [r8]
 8012370:	9005      	str	r0, [sp, #20]
 8012372:	3307      	adds	r3, #7
 8012374:	f023 0307 	bic.w	r3, r3, #7
 8012378:	f103 0208 	add.w	r2, r3, #8
 801237c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012380:	f8d4 b000 	ldr.w	fp, [r4]
 8012384:	f8c8 2000 	str.w	r2, [r8]
 8012388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801238c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012390:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012394:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012398:	9307      	str	r3, [sp, #28]
 801239a:	f8cd 8018 	str.w	r8, [sp, #24]
 801239e:	f04f 32ff 	mov.w	r2, #4294967295
 80123a2:	4ba7      	ldr	r3, [pc, #668]	; (8012640 <_printf_float+0x2f8>)
 80123a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123a8:	f7f6 faf8 	bl	800899c <__aeabi_dcmpun>
 80123ac:	bb70      	cbnz	r0, 801240c <_printf_float+0xc4>
 80123ae:	f04f 32ff 	mov.w	r2, #4294967295
 80123b2:	4ba3      	ldr	r3, [pc, #652]	; (8012640 <_printf_float+0x2f8>)
 80123b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123b8:	f7f6 fad2 	bl	8008960 <__aeabi_dcmple>
 80123bc:	bb30      	cbnz	r0, 801240c <_printf_float+0xc4>
 80123be:	2200      	movs	r2, #0
 80123c0:	2300      	movs	r3, #0
 80123c2:	4640      	mov	r0, r8
 80123c4:	4649      	mov	r1, r9
 80123c6:	f7f6 fac1 	bl	800894c <__aeabi_dcmplt>
 80123ca:	b110      	cbz	r0, 80123d2 <_printf_float+0x8a>
 80123cc:	232d      	movs	r3, #45	; 0x2d
 80123ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123d2:	4a9c      	ldr	r2, [pc, #624]	; (8012644 <_printf_float+0x2fc>)
 80123d4:	4b9c      	ldr	r3, [pc, #624]	; (8012648 <_printf_float+0x300>)
 80123d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80123da:	bf8c      	ite	hi
 80123dc:	4690      	movhi	r8, r2
 80123de:	4698      	movls	r8, r3
 80123e0:	2303      	movs	r3, #3
 80123e2:	f02b 0204 	bic.w	r2, fp, #4
 80123e6:	6123      	str	r3, [r4, #16]
 80123e8:	6022      	str	r2, [r4, #0]
 80123ea:	f04f 0900 	mov.w	r9, #0
 80123ee:	9700      	str	r7, [sp, #0]
 80123f0:	4633      	mov	r3, r6
 80123f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80123f4:	4621      	mov	r1, r4
 80123f6:	4628      	mov	r0, r5
 80123f8:	f000 f9e6 	bl	80127c8 <_printf_common>
 80123fc:	3001      	adds	r0, #1
 80123fe:	f040 808d 	bne.w	801251c <_printf_float+0x1d4>
 8012402:	f04f 30ff 	mov.w	r0, #4294967295
 8012406:	b00d      	add	sp, #52	; 0x34
 8012408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801240c:	4642      	mov	r2, r8
 801240e:	464b      	mov	r3, r9
 8012410:	4640      	mov	r0, r8
 8012412:	4649      	mov	r1, r9
 8012414:	f7f6 fac2 	bl	800899c <__aeabi_dcmpun>
 8012418:	b110      	cbz	r0, 8012420 <_printf_float+0xd8>
 801241a:	4a8c      	ldr	r2, [pc, #560]	; (801264c <_printf_float+0x304>)
 801241c:	4b8c      	ldr	r3, [pc, #560]	; (8012650 <_printf_float+0x308>)
 801241e:	e7da      	b.n	80123d6 <_printf_float+0x8e>
 8012420:	6861      	ldr	r1, [r4, #4]
 8012422:	1c4b      	adds	r3, r1, #1
 8012424:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012428:	a80a      	add	r0, sp, #40	; 0x28
 801242a:	d13e      	bne.n	80124aa <_printf_float+0x162>
 801242c:	2306      	movs	r3, #6
 801242e:	6063      	str	r3, [r4, #4]
 8012430:	2300      	movs	r3, #0
 8012432:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012436:	ab09      	add	r3, sp, #36	; 0x24
 8012438:	9300      	str	r3, [sp, #0]
 801243a:	ec49 8b10 	vmov	d0, r8, r9
 801243e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012442:	6022      	str	r2, [r4, #0]
 8012444:	f8cd a004 	str.w	sl, [sp, #4]
 8012448:	6861      	ldr	r1, [r4, #4]
 801244a:	4628      	mov	r0, r5
 801244c:	f7ff fee8 	bl	8012220 <__cvt>
 8012450:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012454:	2b47      	cmp	r3, #71	; 0x47
 8012456:	4680      	mov	r8, r0
 8012458:	d109      	bne.n	801246e <_printf_float+0x126>
 801245a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801245c:	1cd8      	adds	r0, r3, #3
 801245e:	db02      	blt.n	8012466 <_printf_float+0x11e>
 8012460:	6862      	ldr	r2, [r4, #4]
 8012462:	4293      	cmp	r3, r2
 8012464:	dd47      	ble.n	80124f6 <_printf_float+0x1ae>
 8012466:	f1aa 0a02 	sub.w	sl, sl, #2
 801246a:	fa5f fa8a 	uxtb.w	sl, sl
 801246e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012472:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012474:	d824      	bhi.n	80124c0 <_printf_float+0x178>
 8012476:	3901      	subs	r1, #1
 8012478:	4652      	mov	r2, sl
 801247a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801247e:	9109      	str	r1, [sp, #36]	; 0x24
 8012480:	f7ff ff2f 	bl	80122e2 <__exponent>
 8012484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012486:	1813      	adds	r3, r2, r0
 8012488:	2a01      	cmp	r2, #1
 801248a:	4681      	mov	r9, r0
 801248c:	6123      	str	r3, [r4, #16]
 801248e:	dc02      	bgt.n	8012496 <_printf_float+0x14e>
 8012490:	6822      	ldr	r2, [r4, #0]
 8012492:	07d1      	lsls	r1, r2, #31
 8012494:	d501      	bpl.n	801249a <_printf_float+0x152>
 8012496:	3301      	adds	r3, #1
 8012498:	6123      	str	r3, [r4, #16]
 801249a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d0a5      	beq.n	80123ee <_printf_float+0xa6>
 80124a2:	232d      	movs	r3, #45	; 0x2d
 80124a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124a8:	e7a1      	b.n	80123ee <_printf_float+0xa6>
 80124aa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80124ae:	f000 8177 	beq.w	80127a0 <_printf_float+0x458>
 80124b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80124b6:	d1bb      	bne.n	8012430 <_printf_float+0xe8>
 80124b8:	2900      	cmp	r1, #0
 80124ba:	d1b9      	bne.n	8012430 <_printf_float+0xe8>
 80124bc:	2301      	movs	r3, #1
 80124be:	e7b6      	b.n	801242e <_printf_float+0xe6>
 80124c0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80124c4:	d119      	bne.n	80124fa <_printf_float+0x1b2>
 80124c6:	2900      	cmp	r1, #0
 80124c8:	6863      	ldr	r3, [r4, #4]
 80124ca:	dd0c      	ble.n	80124e6 <_printf_float+0x19e>
 80124cc:	6121      	str	r1, [r4, #16]
 80124ce:	b913      	cbnz	r3, 80124d6 <_printf_float+0x18e>
 80124d0:	6822      	ldr	r2, [r4, #0]
 80124d2:	07d2      	lsls	r2, r2, #31
 80124d4:	d502      	bpl.n	80124dc <_printf_float+0x194>
 80124d6:	3301      	adds	r3, #1
 80124d8:	440b      	add	r3, r1
 80124da:	6123      	str	r3, [r4, #16]
 80124dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124de:	65a3      	str	r3, [r4, #88]	; 0x58
 80124e0:	f04f 0900 	mov.w	r9, #0
 80124e4:	e7d9      	b.n	801249a <_printf_float+0x152>
 80124e6:	b913      	cbnz	r3, 80124ee <_printf_float+0x1a6>
 80124e8:	6822      	ldr	r2, [r4, #0]
 80124ea:	07d0      	lsls	r0, r2, #31
 80124ec:	d501      	bpl.n	80124f2 <_printf_float+0x1aa>
 80124ee:	3302      	adds	r3, #2
 80124f0:	e7f3      	b.n	80124da <_printf_float+0x192>
 80124f2:	2301      	movs	r3, #1
 80124f4:	e7f1      	b.n	80124da <_printf_float+0x192>
 80124f6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80124fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80124fe:	4293      	cmp	r3, r2
 8012500:	db05      	blt.n	801250e <_printf_float+0x1c6>
 8012502:	6822      	ldr	r2, [r4, #0]
 8012504:	6123      	str	r3, [r4, #16]
 8012506:	07d1      	lsls	r1, r2, #31
 8012508:	d5e8      	bpl.n	80124dc <_printf_float+0x194>
 801250a:	3301      	adds	r3, #1
 801250c:	e7e5      	b.n	80124da <_printf_float+0x192>
 801250e:	2b00      	cmp	r3, #0
 8012510:	bfd4      	ite	le
 8012512:	f1c3 0302 	rsble	r3, r3, #2
 8012516:	2301      	movgt	r3, #1
 8012518:	4413      	add	r3, r2
 801251a:	e7de      	b.n	80124da <_printf_float+0x192>
 801251c:	6823      	ldr	r3, [r4, #0]
 801251e:	055a      	lsls	r2, r3, #21
 8012520:	d407      	bmi.n	8012532 <_printf_float+0x1ea>
 8012522:	6923      	ldr	r3, [r4, #16]
 8012524:	4642      	mov	r2, r8
 8012526:	4631      	mov	r1, r6
 8012528:	4628      	mov	r0, r5
 801252a:	47b8      	blx	r7
 801252c:	3001      	adds	r0, #1
 801252e:	d12b      	bne.n	8012588 <_printf_float+0x240>
 8012530:	e767      	b.n	8012402 <_printf_float+0xba>
 8012532:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012536:	f240 80dc 	bls.w	80126f2 <_printf_float+0x3aa>
 801253a:	2200      	movs	r2, #0
 801253c:	2300      	movs	r3, #0
 801253e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012542:	f7f6 f9f9 	bl	8008938 <__aeabi_dcmpeq>
 8012546:	2800      	cmp	r0, #0
 8012548:	d033      	beq.n	80125b2 <_printf_float+0x26a>
 801254a:	2301      	movs	r3, #1
 801254c:	4a41      	ldr	r2, [pc, #260]	; (8012654 <_printf_float+0x30c>)
 801254e:	4631      	mov	r1, r6
 8012550:	4628      	mov	r0, r5
 8012552:	47b8      	blx	r7
 8012554:	3001      	adds	r0, #1
 8012556:	f43f af54 	beq.w	8012402 <_printf_float+0xba>
 801255a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801255e:	429a      	cmp	r2, r3
 8012560:	db02      	blt.n	8012568 <_printf_float+0x220>
 8012562:	6823      	ldr	r3, [r4, #0]
 8012564:	07d8      	lsls	r0, r3, #31
 8012566:	d50f      	bpl.n	8012588 <_printf_float+0x240>
 8012568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801256c:	4631      	mov	r1, r6
 801256e:	4628      	mov	r0, r5
 8012570:	47b8      	blx	r7
 8012572:	3001      	adds	r0, #1
 8012574:	f43f af45 	beq.w	8012402 <_printf_float+0xba>
 8012578:	f04f 0800 	mov.w	r8, #0
 801257c:	f104 091a 	add.w	r9, r4, #26
 8012580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012582:	3b01      	subs	r3, #1
 8012584:	4543      	cmp	r3, r8
 8012586:	dc09      	bgt.n	801259c <_printf_float+0x254>
 8012588:	6823      	ldr	r3, [r4, #0]
 801258a:	079b      	lsls	r3, r3, #30
 801258c:	f100 8103 	bmi.w	8012796 <_printf_float+0x44e>
 8012590:	68e0      	ldr	r0, [r4, #12]
 8012592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012594:	4298      	cmp	r0, r3
 8012596:	bfb8      	it	lt
 8012598:	4618      	movlt	r0, r3
 801259a:	e734      	b.n	8012406 <_printf_float+0xbe>
 801259c:	2301      	movs	r3, #1
 801259e:	464a      	mov	r2, r9
 80125a0:	4631      	mov	r1, r6
 80125a2:	4628      	mov	r0, r5
 80125a4:	47b8      	blx	r7
 80125a6:	3001      	adds	r0, #1
 80125a8:	f43f af2b 	beq.w	8012402 <_printf_float+0xba>
 80125ac:	f108 0801 	add.w	r8, r8, #1
 80125b0:	e7e6      	b.n	8012580 <_printf_float+0x238>
 80125b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	dc2b      	bgt.n	8012610 <_printf_float+0x2c8>
 80125b8:	2301      	movs	r3, #1
 80125ba:	4a26      	ldr	r2, [pc, #152]	; (8012654 <_printf_float+0x30c>)
 80125bc:	4631      	mov	r1, r6
 80125be:	4628      	mov	r0, r5
 80125c0:	47b8      	blx	r7
 80125c2:	3001      	adds	r0, #1
 80125c4:	f43f af1d 	beq.w	8012402 <_printf_float+0xba>
 80125c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125ca:	b923      	cbnz	r3, 80125d6 <_printf_float+0x28e>
 80125cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125ce:	b913      	cbnz	r3, 80125d6 <_printf_float+0x28e>
 80125d0:	6823      	ldr	r3, [r4, #0]
 80125d2:	07d9      	lsls	r1, r3, #31
 80125d4:	d5d8      	bpl.n	8012588 <_printf_float+0x240>
 80125d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80125da:	4631      	mov	r1, r6
 80125dc:	4628      	mov	r0, r5
 80125de:	47b8      	blx	r7
 80125e0:	3001      	adds	r0, #1
 80125e2:	f43f af0e 	beq.w	8012402 <_printf_float+0xba>
 80125e6:	f04f 0900 	mov.w	r9, #0
 80125ea:	f104 0a1a 	add.w	sl, r4, #26
 80125ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125f0:	425b      	negs	r3, r3
 80125f2:	454b      	cmp	r3, r9
 80125f4:	dc01      	bgt.n	80125fa <_printf_float+0x2b2>
 80125f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125f8:	e794      	b.n	8012524 <_printf_float+0x1dc>
 80125fa:	2301      	movs	r3, #1
 80125fc:	4652      	mov	r2, sl
 80125fe:	4631      	mov	r1, r6
 8012600:	4628      	mov	r0, r5
 8012602:	47b8      	blx	r7
 8012604:	3001      	adds	r0, #1
 8012606:	f43f aefc 	beq.w	8012402 <_printf_float+0xba>
 801260a:	f109 0901 	add.w	r9, r9, #1
 801260e:	e7ee      	b.n	80125ee <_printf_float+0x2a6>
 8012610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012612:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012614:	429a      	cmp	r2, r3
 8012616:	bfa8      	it	ge
 8012618:	461a      	movge	r2, r3
 801261a:	2a00      	cmp	r2, #0
 801261c:	4691      	mov	r9, r2
 801261e:	dd07      	ble.n	8012630 <_printf_float+0x2e8>
 8012620:	4613      	mov	r3, r2
 8012622:	4631      	mov	r1, r6
 8012624:	4642      	mov	r2, r8
 8012626:	4628      	mov	r0, r5
 8012628:	47b8      	blx	r7
 801262a:	3001      	adds	r0, #1
 801262c:	f43f aee9 	beq.w	8012402 <_printf_float+0xba>
 8012630:	f104 031a 	add.w	r3, r4, #26
 8012634:	f04f 0b00 	mov.w	fp, #0
 8012638:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801263c:	9306      	str	r3, [sp, #24]
 801263e:	e015      	b.n	801266c <_printf_float+0x324>
 8012640:	7fefffff 	.word	0x7fefffff
 8012644:	080166c9 	.word	0x080166c9
 8012648:	080166c5 	.word	0x080166c5
 801264c:	080166d1 	.word	0x080166d1
 8012650:	080166cd 	.word	0x080166cd
 8012654:	080166d5 	.word	0x080166d5
 8012658:	2301      	movs	r3, #1
 801265a:	9a06      	ldr	r2, [sp, #24]
 801265c:	4631      	mov	r1, r6
 801265e:	4628      	mov	r0, r5
 8012660:	47b8      	blx	r7
 8012662:	3001      	adds	r0, #1
 8012664:	f43f aecd 	beq.w	8012402 <_printf_float+0xba>
 8012668:	f10b 0b01 	add.w	fp, fp, #1
 801266c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012670:	ebaa 0309 	sub.w	r3, sl, r9
 8012674:	455b      	cmp	r3, fp
 8012676:	dcef      	bgt.n	8012658 <_printf_float+0x310>
 8012678:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801267c:	429a      	cmp	r2, r3
 801267e:	44d0      	add	r8, sl
 8012680:	db15      	blt.n	80126ae <_printf_float+0x366>
 8012682:	6823      	ldr	r3, [r4, #0]
 8012684:	07da      	lsls	r2, r3, #31
 8012686:	d412      	bmi.n	80126ae <_printf_float+0x366>
 8012688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801268a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801268c:	eba3 020a 	sub.w	r2, r3, sl
 8012690:	eba3 0a01 	sub.w	sl, r3, r1
 8012694:	4592      	cmp	sl, r2
 8012696:	bfa8      	it	ge
 8012698:	4692      	movge	sl, r2
 801269a:	f1ba 0f00 	cmp.w	sl, #0
 801269e:	dc0e      	bgt.n	80126be <_printf_float+0x376>
 80126a0:	f04f 0800 	mov.w	r8, #0
 80126a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80126a8:	f104 091a 	add.w	r9, r4, #26
 80126ac:	e019      	b.n	80126e2 <_printf_float+0x39a>
 80126ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80126b2:	4631      	mov	r1, r6
 80126b4:	4628      	mov	r0, r5
 80126b6:	47b8      	blx	r7
 80126b8:	3001      	adds	r0, #1
 80126ba:	d1e5      	bne.n	8012688 <_printf_float+0x340>
 80126bc:	e6a1      	b.n	8012402 <_printf_float+0xba>
 80126be:	4653      	mov	r3, sl
 80126c0:	4642      	mov	r2, r8
 80126c2:	4631      	mov	r1, r6
 80126c4:	4628      	mov	r0, r5
 80126c6:	47b8      	blx	r7
 80126c8:	3001      	adds	r0, #1
 80126ca:	d1e9      	bne.n	80126a0 <_printf_float+0x358>
 80126cc:	e699      	b.n	8012402 <_printf_float+0xba>
 80126ce:	2301      	movs	r3, #1
 80126d0:	464a      	mov	r2, r9
 80126d2:	4631      	mov	r1, r6
 80126d4:	4628      	mov	r0, r5
 80126d6:	47b8      	blx	r7
 80126d8:	3001      	adds	r0, #1
 80126da:	f43f ae92 	beq.w	8012402 <_printf_float+0xba>
 80126de:	f108 0801 	add.w	r8, r8, #1
 80126e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126e6:	1a9b      	subs	r3, r3, r2
 80126e8:	eba3 030a 	sub.w	r3, r3, sl
 80126ec:	4543      	cmp	r3, r8
 80126ee:	dcee      	bgt.n	80126ce <_printf_float+0x386>
 80126f0:	e74a      	b.n	8012588 <_printf_float+0x240>
 80126f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80126f4:	2a01      	cmp	r2, #1
 80126f6:	dc01      	bgt.n	80126fc <_printf_float+0x3b4>
 80126f8:	07db      	lsls	r3, r3, #31
 80126fa:	d53a      	bpl.n	8012772 <_printf_float+0x42a>
 80126fc:	2301      	movs	r3, #1
 80126fe:	4642      	mov	r2, r8
 8012700:	4631      	mov	r1, r6
 8012702:	4628      	mov	r0, r5
 8012704:	47b8      	blx	r7
 8012706:	3001      	adds	r0, #1
 8012708:	f43f ae7b 	beq.w	8012402 <_printf_float+0xba>
 801270c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012710:	4631      	mov	r1, r6
 8012712:	4628      	mov	r0, r5
 8012714:	47b8      	blx	r7
 8012716:	3001      	adds	r0, #1
 8012718:	f108 0801 	add.w	r8, r8, #1
 801271c:	f43f ae71 	beq.w	8012402 <_printf_float+0xba>
 8012720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012722:	2200      	movs	r2, #0
 8012724:	f103 3aff 	add.w	sl, r3, #4294967295
 8012728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801272c:	2300      	movs	r3, #0
 801272e:	f7f6 f903 	bl	8008938 <__aeabi_dcmpeq>
 8012732:	b9c8      	cbnz	r0, 8012768 <_printf_float+0x420>
 8012734:	4653      	mov	r3, sl
 8012736:	4642      	mov	r2, r8
 8012738:	4631      	mov	r1, r6
 801273a:	4628      	mov	r0, r5
 801273c:	47b8      	blx	r7
 801273e:	3001      	adds	r0, #1
 8012740:	d10e      	bne.n	8012760 <_printf_float+0x418>
 8012742:	e65e      	b.n	8012402 <_printf_float+0xba>
 8012744:	2301      	movs	r3, #1
 8012746:	4652      	mov	r2, sl
 8012748:	4631      	mov	r1, r6
 801274a:	4628      	mov	r0, r5
 801274c:	47b8      	blx	r7
 801274e:	3001      	adds	r0, #1
 8012750:	f43f ae57 	beq.w	8012402 <_printf_float+0xba>
 8012754:	f108 0801 	add.w	r8, r8, #1
 8012758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801275a:	3b01      	subs	r3, #1
 801275c:	4543      	cmp	r3, r8
 801275e:	dcf1      	bgt.n	8012744 <_printf_float+0x3fc>
 8012760:	464b      	mov	r3, r9
 8012762:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012766:	e6de      	b.n	8012526 <_printf_float+0x1de>
 8012768:	f04f 0800 	mov.w	r8, #0
 801276c:	f104 0a1a 	add.w	sl, r4, #26
 8012770:	e7f2      	b.n	8012758 <_printf_float+0x410>
 8012772:	2301      	movs	r3, #1
 8012774:	e7df      	b.n	8012736 <_printf_float+0x3ee>
 8012776:	2301      	movs	r3, #1
 8012778:	464a      	mov	r2, r9
 801277a:	4631      	mov	r1, r6
 801277c:	4628      	mov	r0, r5
 801277e:	47b8      	blx	r7
 8012780:	3001      	adds	r0, #1
 8012782:	f43f ae3e 	beq.w	8012402 <_printf_float+0xba>
 8012786:	f108 0801 	add.w	r8, r8, #1
 801278a:	68e3      	ldr	r3, [r4, #12]
 801278c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801278e:	1a9b      	subs	r3, r3, r2
 8012790:	4543      	cmp	r3, r8
 8012792:	dcf0      	bgt.n	8012776 <_printf_float+0x42e>
 8012794:	e6fc      	b.n	8012590 <_printf_float+0x248>
 8012796:	f04f 0800 	mov.w	r8, #0
 801279a:	f104 0919 	add.w	r9, r4, #25
 801279e:	e7f4      	b.n	801278a <_printf_float+0x442>
 80127a0:	2900      	cmp	r1, #0
 80127a2:	f43f ae8b 	beq.w	80124bc <_printf_float+0x174>
 80127a6:	2300      	movs	r3, #0
 80127a8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80127ac:	ab09      	add	r3, sp, #36	; 0x24
 80127ae:	9300      	str	r3, [sp, #0]
 80127b0:	ec49 8b10 	vmov	d0, r8, r9
 80127b4:	6022      	str	r2, [r4, #0]
 80127b6:	f8cd a004 	str.w	sl, [sp, #4]
 80127ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80127be:	4628      	mov	r0, r5
 80127c0:	f7ff fd2e 	bl	8012220 <__cvt>
 80127c4:	4680      	mov	r8, r0
 80127c6:	e648      	b.n	801245a <_printf_float+0x112>

080127c8 <_printf_common>:
 80127c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127cc:	4691      	mov	r9, r2
 80127ce:	461f      	mov	r7, r3
 80127d0:	688a      	ldr	r2, [r1, #8]
 80127d2:	690b      	ldr	r3, [r1, #16]
 80127d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80127d8:	4293      	cmp	r3, r2
 80127da:	bfb8      	it	lt
 80127dc:	4613      	movlt	r3, r2
 80127de:	f8c9 3000 	str.w	r3, [r9]
 80127e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80127e6:	4606      	mov	r6, r0
 80127e8:	460c      	mov	r4, r1
 80127ea:	b112      	cbz	r2, 80127f2 <_printf_common+0x2a>
 80127ec:	3301      	adds	r3, #1
 80127ee:	f8c9 3000 	str.w	r3, [r9]
 80127f2:	6823      	ldr	r3, [r4, #0]
 80127f4:	0699      	lsls	r1, r3, #26
 80127f6:	bf42      	ittt	mi
 80127f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80127fc:	3302      	addmi	r3, #2
 80127fe:	f8c9 3000 	strmi.w	r3, [r9]
 8012802:	6825      	ldr	r5, [r4, #0]
 8012804:	f015 0506 	ands.w	r5, r5, #6
 8012808:	d107      	bne.n	801281a <_printf_common+0x52>
 801280a:	f104 0a19 	add.w	sl, r4, #25
 801280e:	68e3      	ldr	r3, [r4, #12]
 8012810:	f8d9 2000 	ldr.w	r2, [r9]
 8012814:	1a9b      	subs	r3, r3, r2
 8012816:	42ab      	cmp	r3, r5
 8012818:	dc28      	bgt.n	801286c <_printf_common+0xa4>
 801281a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801281e:	6822      	ldr	r2, [r4, #0]
 8012820:	3300      	adds	r3, #0
 8012822:	bf18      	it	ne
 8012824:	2301      	movne	r3, #1
 8012826:	0692      	lsls	r2, r2, #26
 8012828:	d42d      	bmi.n	8012886 <_printf_common+0xbe>
 801282a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801282e:	4639      	mov	r1, r7
 8012830:	4630      	mov	r0, r6
 8012832:	47c0      	blx	r8
 8012834:	3001      	adds	r0, #1
 8012836:	d020      	beq.n	801287a <_printf_common+0xb2>
 8012838:	6823      	ldr	r3, [r4, #0]
 801283a:	68e5      	ldr	r5, [r4, #12]
 801283c:	f8d9 2000 	ldr.w	r2, [r9]
 8012840:	f003 0306 	and.w	r3, r3, #6
 8012844:	2b04      	cmp	r3, #4
 8012846:	bf08      	it	eq
 8012848:	1aad      	subeq	r5, r5, r2
 801284a:	68a3      	ldr	r3, [r4, #8]
 801284c:	6922      	ldr	r2, [r4, #16]
 801284e:	bf0c      	ite	eq
 8012850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012854:	2500      	movne	r5, #0
 8012856:	4293      	cmp	r3, r2
 8012858:	bfc4      	itt	gt
 801285a:	1a9b      	subgt	r3, r3, r2
 801285c:	18ed      	addgt	r5, r5, r3
 801285e:	f04f 0900 	mov.w	r9, #0
 8012862:	341a      	adds	r4, #26
 8012864:	454d      	cmp	r5, r9
 8012866:	d11a      	bne.n	801289e <_printf_common+0xd6>
 8012868:	2000      	movs	r0, #0
 801286a:	e008      	b.n	801287e <_printf_common+0xb6>
 801286c:	2301      	movs	r3, #1
 801286e:	4652      	mov	r2, sl
 8012870:	4639      	mov	r1, r7
 8012872:	4630      	mov	r0, r6
 8012874:	47c0      	blx	r8
 8012876:	3001      	adds	r0, #1
 8012878:	d103      	bne.n	8012882 <_printf_common+0xba>
 801287a:	f04f 30ff 	mov.w	r0, #4294967295
 801287e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012882:	3501      	adds	r5, #1
 8012884:	e7c3      	b.n	801280e <_printf_common+0x46>
 8012886:	18e1      	adds	r1, r4, r3
 8012888:	1c5a      	adds	r2, r3, #1
 801288a:	2030      	movs	r0, #48	; 0x30
 801288c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012890:	4422      	add	r2, r4
 8012892:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012896:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801289a:	3302      	adds	r3, #2
 801289c:	e7c5      	b.n	801282a <_printf_common+0x62>
 801289e:	2301      	movs	r3, #1
 80128a0:	4622      	mov	r2, r4
 80128a2:	4639      	mov	r1, r7
 80128a4:	4630      	mov	r0, r6
 80128a6:	47c0      	blx	r8
 80128a8:	3001      	adds	r0, #1
 80128aa:	d0e6      	beq.n	801287a <_printf_common+0xb2>
 80128ac:	f109 0901 	add.w	r9, r9, #1
 80128b0:	e7d8      	b.n	8012864 <_printf_common+0x9c>
	...

080128b4 <_printf_i>:
 80128b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80128bc:	460c      	mov	r4, r1
 80128be:	7e09      	ldrb	r1, [r1, #24]
 80128c0:	b085      	sub	sp, #20
 80128c2:	296e      	cmp	r1, #110	; 0x6e
 80128c4:	4617      	mov	r7, r2
 80128c6:	4606      	mov	r6, r0
 80128c8:	4698      	mov	r8, r3
 80128ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80128cc:	f000 80b3 	beq.w	8012a36 <_printf_i+0x182>
 80128d0:	d822      	bhi.n	8012918 <_printf_i+0x64>
 80128d2:	2963      	cmp	r1, #99	; 0x63
 80128d4:	d036      	beq.n	8012944 <_printf_i+0x90>
 80128d6:	d80a      	bhi.n	80128ee <_printf_i+0x3a>
 80128d8:	2900      	cmp	r1, #0
 80128da:	f000 80b9 	beq.w	8012a50 <_printf_i+0x19c>
 80128de:	2958      	cmp	r1, #88	; 0x58
 80128e0:	f000 8083 	beq.w	80129ea <_printf_i+0x136>
 80128e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80128e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80128ec:	e032      	b.n	8012954 <_printf_i+0xa0>
 80128ee:	2964      	cmp	r1, #100	; 0x64
 80128f0:	d001      	beq.n	80128f6 <_printf_i+0x42>
 80128f2:	2969      	cmp	r1, #105	; 0x69
 80128f4:	d1f6      	bne.n	80128e4 <_printf_i+0x30>
 80128f6:	6820      	ldr	r0, [r4, #0]
 80128f8:	6813      	ldr	r3, [r2, #0]
 80128fa:	0605      	lsls	r5, r0, #24
 80128fc:	f103 0104 	add.w	r1, r3, #4
 8012900:	d52a      	bpl.n	8012958 <_printf_i+0xa4>
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	6011      	str	r1, [r2, #0]
 8012906:	2b00      	cmp	r3, #0
 8012908:	da03      	bge.n	8012912 <_printf_i+0x5e>
 801290a:	222d      	movs	r2, #45	; 0x2d
 801290c:	425b      	negs	r3, r3
 801290e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012912:	486f      	ldr	r0, [pc, #444]	; (8012ad0 <_printf_i+0x21c>)
 8012914:	220a      	movs	r2, #10
 8012916:	e039      	b.n	801298c <_printf_i+0xd8>
 8012918:	2973      	cmp	r1, #115	; 0x73
 801291a:	f000 809d 	beq.w	8012a58 <_printf_i+0x1a4>
 801291e:	d808      	bhi.n	8012932 <_printf_i+0x7e>
 8012920:	296f      	cmp	r1, #111	; 0x6f
 8012922:	d020      	beq.n	8012966 <_printf_i+0xb2>
 8012924:	2970      	cmp	r1, #112	; 0x70
 8012926:	d1dd      	bne.n	80128e4 <_printf_i+0x30>
 8012928:	6823      	ldr	r3, [r4, #0]
 801292a:	f043 0320 	orr.w	r3, r3, #32
 801292e:	6023      	str	r3, [r4, #0]
 8012930:	e003      	b.n	801293a <_printf_i+0x86>
 8012932:	2975      	cmp	r1, #117	; 0x75
 8012934:	d017      	beq.n	8012966 <_printf_i+0xb2>
 8012936:	2978      	cmp	r1, #120	; 0x78
 8012938:	d1d4      	bne.n	80128e4 <_printf_i+0x30>
 801293a:	2378      	movs	r3, #120	; 0x78
 801293c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012940:	4864      	ldr	r0, [pc, #400]	; (8012ad4 <_printf_i+0x220>)
 8012942:	e055      	b.n	80129f0 <_printf_i+0x13c>
 8012944:	6813      	ldr	r3, [r2, #0]
 8012946:	1d19      	adds	r1, r3, #4
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	6011      	str	r1, [r2, #0]
 801294c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012954:	2301      	movs	r3, #1
 8012956:	e08c      	b.n	8012a72 <_printf_i+0x1be>
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	6011      	str	r1, [r2, #0]
 801295c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012960:	bf18      	it	ne
 8012962:	b21b      	sxthne	r3, r3
 8012964:	e7cf      	b.n	8012906 <_printf_i+0x52>
 8012966:	6813      	ldr	r3, [r2, #0]
 8012968:	6825      	ldr	r5, [r4, #0]
 801296a:	1d18      	adds	r0, r3, #4
 801296c:	6010      	str	r0, [r2, #0]
 801296e:	0628      	lsls	r0, r5, #24
 8012970:	d501      	bpl.n	8012976 <_printf_i+0xc2>
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	e002      	b.n	801297c <_printf_i+0xc8>
 8012976:	0668      	lsls	r0, r5, #25
 8012978:	d5fb      	bpl.n	8012972 <_printf_i+0xbe>
 801297a:	881b      	ldrh	r3, [r3, #0]
 801297c:	4854      	ldr	r0, [pc, #336]	; (8012ad0 <_printf_i+0x21c>)
 801297e:	296f      	cmp	r1, #111	; 0x6f
 8012980:	bf14      	ite	ne
 8012982:	220a      	movne	r2, #10
 8012984:	2208      	moveq	r2, #8
 8012986:	2100      	movs	r1, #0
 8012988:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801298c:	6865      	ldr	r5, [r4, #4]
 801298e:	60a5      	str	r5, [r4, #8]
 8012990:	2d00      	cmp	r5, #0
 8012992:	f2c0 8095 	blt.w	8012ac0 <_printf_i+0x20c>
 8012996:	6821      	ldr	r1, [r4, #0]
 8012998:	f021 0104 	bic.w	r1, r1, #4
 801299c:	6021      	str	r1, [r4, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d13d      	bne.n	8012a1e <_printf_i+0x16a>
 80129a2:	2d00      	cmp	r5, #0
 80129a4:	f040 808e 	bne.w	8012ac4 <_printf_i+0x210>
 80129a8:	4665      	mov	r5, ip
 80129aa:	2a08      	cmp	r2, #8
 80129ac:	d10b      	bne.n	80129c6 <_printf_i+0x112>
 80129ae:	6823      	ldr	r3, [r4, #0]
 80129b0:	07db      	lsls	r3, r3, #31
 80129b2:	d508      	bpl.n	80129c6 <_printf_i+0x112>
 80129b4:	6923      	ldr	r3, [r4, #16]
 80129b6:	6862      	ldr	r2, [r4, #4]
 80129b8:	429a      	cmp	r2, r3
 80129ba:	bfde      	ittt	le
 80129bc:	2330      	movle	r3, #48	; 0x30
 80129be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80129c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80129c6:	ebac 0305 	sub.w	r3, ip, r5
 80129ca:	6123      	str	r3, [r4, #16]
 80129cc:	f8cd 8000 	str.w	r8, [sp]
 80129d0:	463b      	mov	r3, r7
 80129d2:	aa03      	add	r2, sp, #12
 80129d4:	4621      	mov	r1, r4
 80129d6:	4630      	mov	r0, r6
 80129d8:	f7ff fef6 	bl	80127c8 <_printf_common>
 80129dc:	3001      	adds	r0, #1
 80129de:	d14d      	bne.n	8012a7c <_printf_i+0x1c8>
 80129e0:	f04f 30ff 	mov.w	r0, #4294967295
 80129e4:	b005      	add	sp, #20
 80129e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129ea:	4839      	ldr	r0, [pc, #228]	; (8012ad0 <_printf_i+0x21c>)
 80129ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80129f0:	6813      	ldr	r3, [r2, #0]
 80129f2:	6821      	ldr	r1, [r4, #0]
 80129f4:	1d1d      	adds	r5, r3, #4
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	6015      	str	r5, [r2, #0]
 80129fa:	060a      	lsls	r2, r1, #24
 80129fc:	d50b      	bpl.n	8012a16 <_printf_i+0x162>
 80129fe:	07ca      	lsls	r2, r1, #31
 8012a00:	bf44      	itt	mi
 8012a02:	f041 0120 	orrmi.w	r1, r1, #32
 8012a06:	6021      	strmi	r1, [r4, #0]
 8012a08:	b91b      	cbnz	r3, 8012a12 <_printf_i+0x15e>
 8012a0a:	6822      	ldr	r2, [r4, #0]
 8012a0c:	f022 0220 	bic.w	r2, r2, #32
 8012a10:	6022      	str	r2, [r4, #0]
 8012a12:	2210      	movs	r2, #16
 8012a14:	e7b7      	b.n	8012986 <_printf_i+0xd2>
 8012a16:	064d      	lsls	r5, r1, #25
 8012a18:	bf48      	it	mi
 8012a1a:	b29b      	uxthmi	r3, r3
 8012a1c:	e7ef      	b.n	80129fe <_printf_i+0x14a>
 8012a1e:	4665      	mov	r5, ip
 8012a20:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a24:	fb02 3311 	mls	r3, r2, r1, r3
 8012a28:	5cc3      	ldrb	r3, [r0, r3]
 8012a2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012a2e:	460b      	mov	r3, r1
 8012a30:	2900      	cmp	r1, #0
 8012a32:	d1f5      	bne.n	8012a20 <_printf_i+0x16c>
 8012a34:	e7b9      	b.n	80129aa <_printf_i+0xf6>
 8012a36:	6813      	ldr	r3, [r2, #0]
 8012a38:	6825      	ldr	r5, [r4, #0]
 8012a3a:	6961      	ldr	r1, [r4, #20]
 8012a3c:	1d18      	adds	r0, r3, #4
 8012a3e:	6010      	str	r0, [r2, #0]
 8012a40:	0628      	lsls	r0, r5, #24
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	d501      	bpl.n	8012a4a <_printf_i+0x196>
 8012a46:	6019      	str	r1, [r3, #0]
 8012a48:	e002      	b.n	8012a50 <_printf_i+0x19c>
 8012a4a:	066a      	lsls	r2, r5, #25
 8012a4c:	d5fb      	bpl.n	8012a46 <_printf_i+0x192>
 8012a4e:	8019      	strh	r1, [r3, #0]
 8012a50:	2300      	movs	r3, #0
 8012a52:	6123      	str	r3, [r4, #16]
 8012a54:	4665      	mov	r5, ip
 8012a56:	e7b9      	b.n	80129cc <_printf_i+0x118>
 8012a58:	6813      	ldr	r3, [r2, #0]
 8012a5a:	1d19      	adds	r1, r3, #4
 8012a5c:	6011      	str	r1, [r2, #0]
 8012a5e:	681d      	ldr	r5, [r3, #0]
 8012a60:	6862      	ldr	r2, [r4, #4]
 8012a62:	2100      	movs	r1, #0
 8012a64:	4628      	mov	r0, r5
 8012a66:	f7f5 faf3 	bl	8008050 <memchr>
 8012a6a:	b108      	cbz	r0, 8012a70 <_printf_i+0x1bc>
 8012a6c:	1b40      	subs	r0, r0, r5
 8012a6e:	6060      	str	r0, [r4, #4]
 8012a70:	6863      	ldr	r3, [r4, #4]
 8012a72:	6123      	str	r3, [r4, #16]
 8012a74:	2300      	movs	r3, #0
 8012a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a7a:	e7a7      	b.n	80129cc <_printf_i+0x118>
 8012a7c:	6923      	ldr	r3, [r4, #16]
 8012a7e:	462a      	mov	r2, r5
 8012a80:	4639      	mov	r1, r7
 8012a82:	4630      	mov	r0, r6
 8012a84:	47c0      	blx	r8
 8012a86:	3001      	adds	r0, #1
 8012a88:	d0aa      	beq.n	80129e0 <_printf_i+0x12c>
 8012a8a:	6823      	ldr	r3, [r4, #0]
 8012a8c:	079b      	lsls	r3, r3, #30
 8012a8e:	d413      	bmi.n	8012ab8 <_printf_i+0x204>
 8012a90:	68e0      	ldr	r0, [r4, #12]
 8012a92:	9b03      	ldr	r3, [sp, #12]
 8012a94:	4298      	cmp	r0, r3
 8012a96:	bfb8      	it	lt
 8012a98:	4618      	movlt	r0, r3
 8012a9a:	e7a3      	b.n	80129e4 <_printf_i+0x130>
 8012a9c:	2301      	movs	r3, #1
 8012a9e:	464a      	mov	r2, r9
 8012aa0:	4639      	mov	r1, r7
 8012aa2:	4630      	mov	r0, r6
 8012aa4:	47c0      	blx	r8
 8012aa6:	3001      	adds	r0, #1
 8012aa8:	d09a      	beq.n	80129e0 <_printf_i+0x12c>
 8012aaa:	3501      	adds	r5, #1
 8012aac:	68e3      	ldr	r3, [r4, #12]
 8012aae:	9a03      	ldr	r2, [sp, #12]
 8012ab0:	1a9b      	subs	r3, r3, r2
 8012ab2:	42ab      	cmp	r3, r5
 8012ab4:	dcf2      	bgt.n	8012a9c <_printf_i+0x1e8>
 8012ab6:	e7eb      	b.n	8012a90 <_printf_i+0x1dc>
 8012ab8:	2500      	movs	r5, #0
 8012aba:	f104 0919 	add.w	r9, r4, #25
 8012abe:	e7f5      	b.n	8012aac <_printf_i+0x1f8>
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d1ac      	bne.n	8012a1e <_printf_i+0x16a>
 8012ac4:	7803      	ldrb	r3, [r0, #0]
 8012ac6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012aca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ace:	e76c      	b.n	80129aa <_printf_i+0xf6>
 8012ad0:	080166d7 	.word	0x080166d7
 8012ad4:	080166e8 	.word	0x080166e8

08012ad8 <_scanf_float>:
 8012ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012adc:	469a      	mov	sl, r3
 8012ade:	688b      	ldr	r3, [r1, #8]
 8012ae0:	4616      	mov	r6, r2
 8012ae2:	1e5a      	subs	r2, r3, #1
 8012ae4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012ae8:	b087      	sub	sp, #28
 8012aea:	bf83      	ittte	hi
 8012aec:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012af0:	189b      	addhi	r3, r3, r2
 8012af2:	9301      	strhi	r3, [sp, #4]
 8012af4:	2300      	movls	r3, #0
 8012af6:	bf86      	itte	hi
 8012af8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012afc:	608b      	strhi	r3, [r1, #8]
 8012afe:	9301      	strls	r3, [sp, #4]
 8012b00:	680b      	ldr	r3, [r1, #0]
 8012b02:	4688      	mov	r8, r1
 8012b04:	f04f 0b00 	mov.w	fp, #0
 8012b08:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012b0c:	f848 3b1c 	str.w	r3, [r8], #28
 8012b10:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012b14:	4607      	mov	r7, r0
 8012b16:	460c      	mov	r4, r1
 8012b18:	4645      	mov	r5, r8
 8012b1a:	465a      	mov	r2, fp
 8012b1c:	46d9      	mov	r9, fp
 8012b1e:	f8cd b008 	str.w	fp, [sp, #8]
 8012b22:	68a1      	ldr	r1, [r4, #8]
 8012b24:	b181      	cbz	r1, 8012b48 <_scanf_float+0x70>
 8012b26:	6833      	ldr	r3, [r6, #0]
 8012b28:	781b      	ldrb	r3, [r3, #0]
 8012b2a:	2b49      	cmp	r3, #73	; 0x49
 8012b2c:	d071      	beq.n	8012c12 <_scanf_float+0x13a>
 8012b2e:	d84d      	bhi.n	8012bcc <_scanf_float+0xf4>
 8012b30:	2b39      	cmp	r3, #57	; 0x39
 8012b32:	d840      	bhi.n	8012bb6 <_scanf_float+0xde>
 8012b34:	2b31      	cmp	r3, #49	; 0x31
 8012b36:	f080 8088 	bcs.w	8012c4a <_scanf_float+0x172>
 8012b3a:	2b2d      	cmp	r3, #45	; 0x2d
 8012b3c:	f000 8090 	beq.w	8012c60 <_scanf_float+0x188>
 8012b40:	d815      	bhi.n	8012b6e <_scanf_float+0x96>
 8012b42:	2b2b      	cmp	r3, #43	; 0x2b
 8012b44:	f000 808c 	beq.w	8012c60 <_scanf_float+0x188>
 8012b48:	f1b9 0f00 	cmp.w	r9, #0
 8012b4c:	d003      	beq.n	8012b56 <_scanf_float+0x7e>
 8012b4e:	6823      	ldr	r3, [r4, #0]
 8012b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012b54:	6023      	str	r3, [r4, #0]
 8012b56:	3a01      	subs	r2, #1
 8012b58:	2a01      	cmp	r2, #1
 8012b5a:	f200 80ea 	bhi.w	8012d32 <_scanf_float+0x25a>
 8012b5e:	4545      	cmp	r5, r8
 8012b60:	f200 80dc 	bhi.w	8012d1c <_scanf_float+0x244>
 8012b64:	2601      	movs	r6, #1
 8012b66:	4630      	mov	r0, r6
 8012b68:	b007      	add	sp, #28
 8012b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b6e:	2b2e      	cmp	r3, #46	; 0x2e
 8012b70:	f000 809f 	beq.w	8012cb2 <_scanf_float+0x1da>
 8012b74:	2b30      	cmp	r3, #48	; 0x30
 8012b76:	d1e7      	bne.n	8012b48 <_scanf_float+0x70>
 8012b78:	6820      	ldr	r0, [r4, #0]
 8012b7a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8012b7e:	d064      	beq.n	8012c4a <_scanf_float+0x172>
 8012b80:	9b01      	ldr	r3, [sp, #4]
 8012b82:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8012b86:	6020      	str	r0, [r4, #0]
 8012b88:	f109 0901 	add.w	r9, r9, #1
 8012b8c:	b11b      	cbz	r3, 8012b96 <_scanf_float+0xbe>
 8012b8e:	3b01      	subs	r3, #1
 8012b90:	3101      	adds	r1, #1
 8012b92:	9301      	str	r3, [sp, #4]
 8012b94:	60a1      	str	r1, [r4, #8]
 8012b96:	68a3      	ldr	r3, [r4, #8]
 8012b98:	3b01      	subs	r3, #1
 8012b9a:	60a3      	str	r3, [r4, #8]
 8012b9c:	6923      	ldr	r3, [r4, #16]
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	6123      	str	r3, [r4, #16]
 8012ba2:	6873      	ldr	r3, [r6, #4]
 8012ba4:	3b01      	subs	r3, #1
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	6073      	str	r3, [r6, #4]
 8012baa:	f340 80ac 	ble.w	8012d06 <_scanf_float+0x22e>
 8012bae:	6833      	ldr	r3, [r6, #0]
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	6033      	str	r3, [r6, #0]
 8012bb4:	e7b5      	b.n	8012b22 <_scanf_float+0x4a>
 8012bb6:	2b45      	cmp	r3, #69	; 0x45
 8012bb8:	f000 8085 	beq.w	8012cc6 <_scanf_float+0x1ee>
 8012bbc:	2b46      	cmp	r3, #70	; 0x46
 8012bbe:	d06a      	beq.n	8012c96 <_scanf_float+0x1be>
 8012bc0:	2b41      	cmp	r3, #65	; 0x41
 8012bc2:	d1c1      	bne.n	8012b48 <_scanf_float+0x70>
 8012bc4:	2a01      	cmp	r2, #1
 8012bc6:	d1bf      	bne.n	8012b48 <_scanf_float+0x70>
 8012bc8:	2202      	movs	r2, #2
 8012bca:	e046      	b.n	8012c5a <_scanf_float+0x182>
 8012bcc:	2b65      	cmp	r3, #101	; 0x65
 8012bce:	d07a      	beq.n	8012cc6 <_scanf_float+0x1ee>
 8012bd0:	d818      	bhi.n	8012c04 <_scanf_float+0x12c>
 8012bd2:	2b54      	cmp	r3, #84	; 0x54
 8012bd4:	d066      	beq.n	8012ca4 <_scanf_float+0x1cc>
 8012bd6:	d811      	bhi.n	8012bfc <_scanf_float+0x124>
 8012bd8:	2b4e      	cmp	r3, #78	; 0x4e
 8012bda:	d1b5      	bne.n	8012b48 <_scanf_float+0x70>
 8012bdc:	2a00      	cmp	r2, #0
 8012bde:	d146      	bne.n	8012c6e <_scanf_float+0x196>
 8012be0:	f1b9 0f00 	cmp.w	r9, #0
 8012be4:	d145      	bne.n	8012c72 <_scanf_float+0x19a>
 8012be6:	6821      	ldr	r1, [r4, #0]
 8012be8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012bec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012bf0:	d13f      	bne.n	8012c72 <_scanf_float+0x19a>
 8012bf2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012bf6:	6021      	str	r1, [r4, #0]
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	e02e      	b.n	8012c5a <_scanf_float+0x182>
 8012bfc:	2b59      	cmp	r3, #89	; 0x59
 8012bfe:	d01e      	beq.n	8012c3e <_scanf_float+0x166>
 8012c00:	2b61      	cmp	r3, #97	; 0x61
 8012c02:	e7de      	b.n	8012bc2 <_scanf_float+0xea>
 8012c04:	2b6e      	cmp	r3, #110	; 0x6e
 8012c06:	d0e9      	beq.n	8012bdc <_scanf_float+0x104>
 8012c08:	d815      	bhi.n	8012c36 <_scanf_float+0x15e>
 8012c0a:	2b66      	cmp	r3, #102	; 0x66
 8012c0c:	d043      	beq.n	8012c96 <_scanf_float+0x1be>
 8012c0e:	2b69      	cmp	r3, #105	; 0x69
 8012c10:	d19a      	bne.n	8012b48 <_scanf_float+0x70>
 8012c12:	f1bb 0f00 	cmp.w	fp, #0
 8012c16:	d138      	bne.n	8012c8a <_scanf_float+0x1b2>
 8012c18:	f1b9 0f00 	cmp.w	r9, #0
 8012c1c:	d197      	bne.n	8012b4e <_scanf_float+0x76>
 8012c1e:	6821      	ldr	r1, [r4, #0]
 8012c20:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012c24:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012c28:	d195      	bne.n	8012b56 <_scanf_float+0x7e>
 8012c2a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012c2e:	6021      	str	r1, [r4, #0]
 8012c30:	f04f 0b01 	mov.w	fp, #1
 8012c34:	e011      	b.n	8012c5a <_scanf_float+0x182>
 8012c36:	2b74      	cmp	r3, #116	; 0x74
 8012c38:	d034      	beq.n	8012ca4 <_scanf_float+0x1cc>
 8012c3a:	2b79      	cmp	r3, #121	; 0x79
 8012c3c:	d184      	bne.n	8012b48 <_scanf_float+0x70>
 8012c3e:	f1bb 0f07 	cmp.w	fp, #7
 8012c42:	d181      	bne.n	8012b48 <_scanf_float+0x70>
 8012c44:	f04f 0b08 	mov.w	fp, #8
 8012c48:	e007      	b.n	8012c5a <_scanf_float+0x182>
 8012c4a:	eb12 0f0b 	cmn.w	r2, fp
 8012c4e:	f47f af7b 	bne.w	8012b48 <_scanf_float+0x70>
 8012c52:	6821      	ldr	r1, [r4, #0]
 8012c54:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8012c58:	6021      	str	r1, [r4, #0]
 8012c5a:	702b      	strb	r3, [r5, #0]
 8012c5c:	3501      	adds	r5, #1
 8012c5e:	e79a      	b.n	8012b96 <_scanf_float+0xbe>
 8012c60:	6821      	ldr	r1, [r4, #0]
 8012c62:	0608      	lsls	r0, r1, #24
 8012c64:	f57f af70 	bpl.w	8012b48 <_scanf_float+0x70>
 8012c68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012c6c:	e7f4      	b.n	8012c58 <_scanf_float+0x180>
 8012c6e:	2a02      	cmp	r2, #2
 8012c70:	d047      	beq.n	8012d02 <_scanf_float+0x22a>
 8012c72:	f1bb 0f01 	cmp.w	fp, #1
 8012c76:	d003      	beq.n	8012c80 <_scanf_float+0x1a8>
 8012c78:	f1bb 0f04 	cmp.w	fp, #4
 8012c7c:	f47f af64 	bne.w	8012b48 <_scanf_float+0x70>
 8012c80:	f10b 0b01 	add.w	fp, fp, #1
 8012c84:	fa5f fb8b 	uxtb.w	fp, fp
 8012c88:	e7e7      	b.n	8012c5a <_scanf_float+0x182>
 8012c8a:	f1bb 0f03 	cmp.w	fp, #3
 8012c8e:	d0f7      	beq.n	8012c80 <_scanf_float+0x1a8>
 8012c90:	f1bb 0f05 	cmp.w	fp, #5
 8012c94:	e7f2      	b.n	8012c7c <_scanf_float+0x1a4>
 8012c96:	f1bb 0f02 	cmp.w	fp, #2
 8012c9a:	f47f af55 	bne.w	8012b48 <_scanf_float+0x70>
 8012c9e:	f04f 0b03 	mov.w	fp, #3
 8012ca2:	e7da      	b.n	8012c5a <_scanf_float+0x182>
 8012ca4:	f1bb 0f06 	cmp.w	fp, #6
 8012ca8:	f47f af4e 	bne.w	8012b48 <_scanf_float+0x70>
 8012cac:	f04f 0b07 	mov.w	fp, #7
 8012cb0:	e7d3      	b.n	8012c5a <_scanf_float+0x182>
 8012cb2:	6821      	ldr	r1, [r4, #0]
 8012cb4:	0588      	lsls	r0, r1, #22
 8012cb6:	f57f af47 	bpl.w	8012b48 <_scanf_float+0x70>
 8012cba:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012cbe:	6021      	str	r1, [r4, #0]
 8012cc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8012cc4:	e7c9      	b.n	8012c5a <_scanf_float+0x182>
 8012cc6:	6821      	ldr	r1, [r4, #0]
 8012cc8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012ccc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012cd0:	d006      	beq.n	8012ce0 <_scanf_float+0x208>
 8012cd2:	0548      	lsls	r0, r1, #21
 8012cd4:	f57f af38 	bpl.w	8012b48 <_scanf_float+0x70>
 8012cd8:	f1b9 0f00 	cmp.w	r9, #0
 8012cdc:	f43f af3b 	beq.w	8012b56 <_scanf_float+0x7e>
 8012ce0:	0588      	lsls	r0, r1, #22
 8012ce2:	bf58      	it	pl
 8012ce4:	9802      	ldrpl	r0, [sp, #8]
 8012ce6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012cea:	bf58      	it	pl
 8012cec:	eba9 0000 	subpl.w	r0, r9, r0
 8012cf0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012cf4:	bf58      	it	pl
 8012cf6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012cfa:	6021      	str	r1, [r4, #0]
 8012cfc:	f04f 0900 	mov.w	r9, #0
 8012d00:	e7ab      	b.n	8012c5a <_scanf_float+0x182>
 8012d02:	2203      	movs	r2, #3
 8012d04:	e7a9      	b.n	8012c5a <_scanf_float+0x182>
 8012d06:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012d0a:	9205      	str	r2, [sp, #20]
 8012d0c:	4631      	mov	r1, r6
 8012d0e:	4638      	mov	r0, r7
 8012d10:	4798      	blx	r3
 8012d12:	9a05      	ldr	r2, [sp, #20]
 8012d14:	2800      	cmp	r0, #0
 8012d16:	f43f af04 	beq.w	8012b22 <_scanf_float+0x4a>
 8012d1a:	e715      	b.n	8012b48 <_scanf_float+0x70>
 8012d1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d20:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012d24:	4632      	mov	r2, r6
 8012d26:	4638      	mov	r0, r7
 8012d28:	4798      	blx	r3
 8012d2a:	6923      	ldr	r3, [r4, #16]
 8012d2c:	3b01      	subs	r3, #1
 8012d2e:	6123      	str	r3, [r4, #16]
 8012d30:	e715      	b.n	8012b5e <_scanf_float+0x86>
 8012d32:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012d36:	2b06      	cmp	r3, #6
 8012d38:	d80a      	bhi.n	8012d50 <_scanf_float+0x278>
 8012d3a:	f1bb 0f02 	cmp.w	fp, #2
 8012d3e:	d968      	bls.n	8012e12 <_scanf_float+0x33a>
 8012d40:	f1ab 0b03 	sub.w	fp, fp, #3
 8012d44:	fa5f fb8b 	uxtb.w	fp, fp
 8012d48:	eba5 0b0b 	sub.w	fp, r5, fp
 8012d4c:	455d      	cmp	r5, fp
 8012d4e:	d14b      	bne.n	8012de8 <_scanf_float+0x310>
 8012d50:	6823      	ldr	r3, [r4, #0]
 8012d52:	05da      	lsls	r2, r3, #23
 8012d54:	d51f      	bpl.n	8012d96 <_scanf_float+0x2be>
 8012d56:	055b      	lsls	r3, r3, #21
 8012d58:	d468      	bmi.n	8012e2c <_scanf_float+0x354>
 8012d5a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012d5e:	6923      	ldr	r3, [r4, #16]
 8012d60:	2965      	cmp	r1, #101	; 0x65
 8012d62:	f103 33ff 	add.w	r3, r3, #4294967295
 8012d66:	f105 3bff 	add.w	fp, r5, #4294967295
 8012d6a:	6123      	str	r3, [r4, #16]
 8012d6c:	d00d      	beq.n	8012d8a <_scanf_float+0x2b2>
 8012d6e:	2945      	cmp	r1, #69	; 0x45
 8012d70:	d00b      	beq.n	8012d8a <_scanf_float+0x2b2>
 8012d72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d76:	4632      	mov	r2, r6
 8012d78:	4638      	mov	r0, r7
 8012d7a:	4798      	blx	r3
 8012d7c:	6923      	ldr	r3, [r4, #16]
 8012d7e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8012d82:	3b01      	subs	r3, #1
 8012d84:	f1a5 0b02 	sub.w	fp, r5, #2
 8012d88:	6123      	str	r3, [r4, #16]
 8012d8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d8e:	4632      	mov	r2, r6
 8012d90:	4638      	mov	r0, r7
 8012d92:	4798      	blx	r3
 8012d94:	465d      	mov	r5, fp
 8012d96:	6826      	ldr	r6, [r4, #0]
 8012d98:	f016 0610 	ands.w	r6, r6, #16
 8012d9c:	d17a      	bne.n	8012e94 <_scanf_float+0x3bc>
 8012d9e:	702e      	strb	r6, [r5, #0]
 8012da0:	6823      	ldr	r3, [r4, #0]
 8012da2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012daa:	d142      	bne.n	8012e32 <_scanf_float+0x35a>
 8012dac:	9b02      	ldr	r3, [sp, #8]
 8012dae:	eba9 0303 	sub.w	r3, r9, r3
 8012db2:	425a      	negs	r2, r3
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d149      	bne.n	8012e4c <_scanf_float+0x374>
 8012db8:	2200      	movs	r2, #0
 8012dba:	4641      	mov	r1, r8
 8012dbc:	4638      	mov	r0, r7
 8012dbe:	f001 f8e7 	bl	8013f90 <_strtod_r>
 8012dc2:	6825      	ldr	r5, [r4, #0]
 8012dc4:	f8da 3000 	ldr.w	r3, [sl]
 8012dc8:	f015 0f02 	tst.w	r5, #2
 8012dcc:	f103 0204 	add.w	r2, r3, #4
 8012dd0:	ec59 8b10 	vmov	r8, r9, d0
 8012dd4:	f8ca 2000 	str.w	r2, [sl]
 8012dd8:	d043      	beq.n	8012e62 <_scanf_float+0x38a>
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	e9c3 8900 	strd	r8, r9, [r3]
 8012de0:	68e3      	ldr	r3, [r4, #12]
 8012de2:	3301      	adds	r3, #1
 8012de4:	60e3      	str	r3, [r4, #12]
 8012de6:	e6be      	b.n	8012b66 <_scanf_float+0x8e>
 8012de8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012dec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012df0:	4632      	mov	r2, r6
 8012df2:	4638      	mov	r0, r7
 8012df4:	4798      	blx	r3
 8012df6:	6923      	ldr	r3, [r4, #16]
 8012df8:	3b01      	subs	r3, #1
 8012dfa:	6123      	str	r3, [r4, #16]
 8012dfc:	e7a6      	b.n	8012d4c <_scanf_float+0x274>
 8012dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e02:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012e06:	4632      	mov	r2, r6
 8012e08:	4638      	mov	r0, r7
 8012e0a:	4798      	blx	r3
 8012e0c:	6923      	ldr	r3, [r4, #16]
 8012e0e:	3b01      	subs	r3, #1
 8012e10:	6123      	str	r3, [r4, #16]
 8012e12:	4545      	cmp	r5, r8
 8012e14:	d8f3      	bhi.n	8012dfe <_scanf_float+0x326>
 8012e16:	e6a5      	b.n	8012b64 <_scanf_float+0x8c>
 8012e18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e1c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012e20:	4632      	mov	r2, r6
 8012e22:	4638      	mov	r0, r7
 8012e24:	4798      	blx	r3
 8012e26:	6923      	ldr	r3, [r4, #16]
 8012e28:	3b01      	subs	r3, #1
 8012e2a:	6123      	str	r3, [r4, #16]
 8012e2c:	4545      	cmp	r5, r8
 8012e2e:	d8f3      	bhi.n	8012e18 <_scanf_float+0x340>
 8012e30:	e698      	b.n	8012b64 <_scanf_float+0x8c>
 8012e32:	9b03      	ldr	r3, [sp, #12]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d0bf      	beq.n	8012db8 <_scanf_float+0x2e0>
 8012e38:	9904      	ldr	r1, [sp, #16]
 8012e3a:	230a      	movs	r3, #10
 8012e3c:	4632      	mov	r2, r6
 8012e3e:	3101      	adds	r1, #1
 8012e40:	4638      	mov	r0, r7
 8012e42:	f001 f931 	bl	80140a8 <_strtol_r>
 8012e46:	9b03      	ldr	r3, [sp, #12]
 8012e48:	9d04      	ldr	r5, [sp, #16]
 8012e4a:	1ac2      	subs	r2, r0, r3
 8012e4c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012e50:	429d      	cmp	r5, r3
 8012e52:	bf28      	it	cs
 8012e54:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8012e58:	490f      	ldr	r1, [pc, #60]	; (8012e98 <_scanf_float+0x3c0>)
 8012e5a:	4628      	mov	r0, r5
 8012e5c:	f000 fa24 	bl	80132a8 <siprintf>
 8012e60:	e7aa      	b.n	8012db8 <_scanf_float+0x2e0>
 8012e62:	f015 0504 	ands.w	r5, r5, #4
 8012e66:	d1b8      	bne.n	8012dda <_scanf_float+0x302>
 8012e68:	681f      	ldr	r7, [r3, #0]
 8012e6a:	ee10 2a10 	vmov	r2, s0
 8012e6e:	464b      	mov	r3, r9
 8012e70:	ee10 0a10 	vmov	r0, s0
 8012e74:	4649      	mov	r1, r9
 8012e76:	f7f5 fd91 	bl	800899c <__aeabi_dcmpun>
 8012e7a:	b128      	cbz	r0, 8012e88 <_scanf_float+0x3b0>
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	f000 fa0d 	bl	801329c <nanf>
 8012e82:	ed87 0a00 	vstr	s0, [r7]
 8012e86:	e7ab      	b.n	8012de0 <_scanf_float+0x308>
 8012e88:	4640      	mov	r0, r8
 8012e8a:	4649      	mov	r1, r9
 8012e8c:	f7f5 fde4 	bl	8008a58 <__aeabi_d2f>
 8012e90:	6038      	str	r0, [r7, #0]
 8012e92:	e7a5      	b.n	8012de0 <_scanf_float+0x308>
 8012e94:	2600      	movs	r6, #0
 8012e96:	e666      	b.n	8012b66 <_scanf_float+0x8e>
 8012e98:	080166f9 	.word	0x080166f9

08012e9c <iprintf>:
 8012e9c:	b40f      	push	{r0, r1, r2, r3}
 8012e9e:	4b0a      	ldr	r3, [pc, #40]	; (8012ec8 <iprintf+0x2c>)
 8012ea0:	b513      	push	{r0, r1, r4, lr}
 8012ea2:	681c      	ldr	r4, [r3, #0]
 8012ea4:	b124      	cbz	r4, 8012eb0 <iprintf+0x14>
 8012ea6:	69a3      	ldr	r3, [r4, #24]
 8012ea8:	b913      	cbnz	r3, 8012eb0 <iprintf+0x14>
 8012eaa:	4620      	mov	r0, r4
 8012eac:	f7fe feaa 	bl	8011c04 <__sinit>
 8012eb0:	ab05      	add	r3, sp, #20
 8012eb2:	9a04      	ldr	r2, [sp, #16]
 8012eb4:	68a1      	ldr	r1, [r4, #8]
 8012eb6:	9301      	str	r3, [sp, #4]
 8012eb8:	4620      	mov	r0, r4
 8012eba:	f7ff f89b 	bl	8011ff4 <_vfiprintf_r>
 8012ebe:	b002      	add	sp, #8
 8012ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ec4:	b004      	add	sp, #16
 8012ec6:	4770      	bx	lr
 8012ec8:	20000018 	.word	0x20000018

08012ecc <putchar>:
 8012ecc:	b538      	push	{r3, r4, r5, lr}
 8012ece:	4b08      	ldr	r3, [pc, #32]	; (8012ef0 <putchar+0x24>)
 8012ed0:	681c      	ldr	r4, [r3, #0]
 8012ed2:	4605      	mov	r5, r0
 8012ed4:	b124      	cbz	r4, 8012ee0 <putchar+0x14>
 8012ed6:	69a3      	ldr	r3, [r4, #24]
 8012ed8:	b913      	cbnz	r3, 8012ee0 <putchar+0x14>
 8012eda:	4620      	mov	r0, r4
 8012edc:	f7fe fe92 	bl	8011c04 <__sinit>
 8012ee0:	68a2      	ldr	r2, [r4, #8]
 8012ee2:	4629      	mov	r1, r5
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012eea:	f003 b93d 	b.w	8016168 <_putc_r>
 8012eee:	bf00      	nop
 8012ef0:	20000018 	.word	0x20000018

08012ef4 <_puts_r>:
 8012ef4:	b570      	push	{r4, r5, r6, lr}
 8012ef6:	460e      	mov	r6, r1
 8012ef8:	4605      	mov	r5, r0
 8012efa:	b118      	cbz	r0, 8012f04 <_puts_r+0x10>
 8012efc:	6983      	ldr	r3, [r0, #24]
 8012efe:	b90b      	cbnz	r3, 8012f04 <_puts_r+0x10>
 8012f00:	f7fe fe80 	bl	8011c04 <__sinit>
 8012f04:	69ab      	ldr	r3, [r5, #24]
 8012f06:	68ac      	ldr	r4, [r5, #8]
 8012f08:	b913      	cbnz	r3, 8012f10 <_puts_r+0x1c>
 8012f0a:	4628      	mov	r0, r5
 8012f0c:	f7fe fe7a 	bl	8011c04 <__sinit>
 8012f10:	4b23      	ldr	r3, [pc, #140]	; (8012fa0 <_puts_r+0xac>)
 8012f12:	429c      	cmp	r4, r3
 8012f14:	d117      	bne.n	8012f46 <_puts_r+0x52>
 8012f16:	686c      	ldr	r4, [r5, #4]
 8012f18:	89a3      	ldrh	r3, [r4, #12]
 8012f1a:	071b      	lsls	r3, r3, #28
 8012f1c:	d51d      	bpl.n	8012f5a <_puts_r+0x66>
 8012f1e:	6923      	ldr	r3, [r4, #16]
 8012f20:	b1db      	cbz	r3, 8012f5a <_puts_r+0x66>
 8012f22:	3e01      	subs	r6, #1
 8012f24:	68a3      	ldr	r3, [r4, #8]
 8012f26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012f2a:	3b01      	subs	r3, #1
 8012f2c:	60a3      	str	r3, [r4, #8]
 8012f2e:	b9e9      	cbnz	r1, 8012f6c <_puts_r+0x78>
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	da2e      	bge.n	8012f92 <_puts_r+0x9e>
 8012f34:	4622      	mov	r2, r4
 8012f36:	210a      	movs	r1, #10
 8012f38:	4628      	mov	r0, r5
 8012f3a:	f001 f8c7 	bl	80140cc <__swbuf_r>
 8012f3e:	3001      	adds	r0, #1
 8012f40:	d011      	beq.n	8012f66 <_puts_r+0x72>
 8012f42:	200a      	movs	r0, #10
 8012f44:	e011      	b.n	8012f6a <_puts_r+0x76>
 8012f46:	4b17      	ldr	r3, [pc, #92]	; (8012fa4 <_puts_r+0xb0>)
 8012f48:	429c      	cmp	r4, r3
 8012f4a:	d101      	bne.n	8012f50 <_puts_r+0x5c>
 8012f4c:	68ac      	ldr	r4, [r5, #8]
 8012f4e:	e7e3      	b.n	8012f18 <_puts_r+0x24>
 8012f50:	4b15      	ldr	r3, [pc, #84]	; (8012fa8 <_puts_r+0xb4>)
 8012f52:	429c      	cmp	r4, r3
 8012f54:	bf08      	it	eq
 8012f56:	68ec      	ldreq	r4, [r5, #12]
 8012f58:	e7de      	b.n	8012f18 <_puts_r+0x24>
 8012f5a:	4621      	mov	r1, r4
 8012f5c:	4628      	mov	r0, r5
 8012f5e:	f001 f919 	bl	8014194 <__swsetup_r>
 8012f62:	2800      	cmp	r0, #0
 8012f64:	d0dd      	beq.n	8012f22 <_puts_r+0x2e>
 8012f66:	f04f 30ff 	mov.w	r0, #4294967295
 8012f6a:	bd70      	pop	{r4, r5, r6, pc}
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	da04      	bge.n	8012f7a <_puts_r+0x86>
 8012f70:	69a2      	ldr	r2, [r4, #24]
 8012f72:	429a      	cmp	r2, r3
 8012f74:	dc06      	bgt.n	8012f84 <_puts_r+0x90>
 8012f76:	290a      	cmp	r1, #10
 8012f78:	d004      	beq.n	8012f84 <_puts_r+0x90>
 8012f7a:	6823      	ldr	r3, [r4, #0]
 8012f7c:	1c5a      	adds	r2, r3, #1
 8012f7e:	6022      	str	r2, [r4, #0]
 8012f80:	7019      	strb	r1, [r3, #0]
 8012f82:	e7cf      	b.n	8012f24 <_puts_r+0x30>
 8012f84:	4622      	mov	r2, r4
 8012f86:	4628      	mov	r0, r5
 8012f88:	f001 f8a0 	bl	80140cc <__swbuf_r>
 8012f8c:	3001      	adds	r0, #1
 8012f8e:	d1c9      	bne.n	8012f24 <_puts_r+0x30>
 8012f90:	e7e9      	b.n	8012f66 <_puts_r+0x72>
 8012f92:	6823      	ldr	r3, [r4, #0]
 8012f94:	200a      	movs	r0, #10
 8012f96:	1c5a      	adds	r2, r3, #1
 8012f98:	6022      	str	r2, [r4, #0]
 8012f9a:	7018      	strb	r0, [r3, #0]
 8012f9c:	e7e5      	b.n	8012f6a <_puts_r+0x76>
 8012f9e:	bf00      	nop
 8012fa0:	08016670 	.word	0x08016670
 8012fa4:	08016690 	.word	0x08016690
 8012fa8:	08016650 	.word	0x08016650

08012fac <puts>:
 8012fac:	4b02      	ldr	r3, [pc, #8]	; (8012fb8 <puts+0xc>)
 8012fae:	4601      	mov	r1, r0
 8012fb0:	6818      	ldr	r0, [r3, #0]
 8012fb2:	f7ff bf9f 	b.w	8012ef4 <_puts_r>
 8012fb6:	bf00      	nop
 8012fb8:	20000018 	.word	0x20000018

08012fbc <swapfunc>:
 8012fbc:	2b02      	cmp	r3, #2
 8012fbe:	b510      	push	{r4, lr}
 8012fc0:	d00a      	beq.n	8012fd8 <swapfunc+0x1c>
 8012fc2:	0892      	lsrs	r2, r2, #2
 8012fc4:	3a01      	subs	r2, #1
 8012fc6:	6803      	ldr	r3, [r0, #0]
 8012fc8:	680c      	ldr	r4, [r1, #0]
 8012fca:	f840 4b04 	str.w	r4, [r0], #4
 8012fce:	2a00      	cmp	r2, #0
 8012fd0:	f841 3b04 	str.w	r3, [r1], #4
 8012fd4:	dcf6      	bgt.n	8012fc4 <swapfunc+0x8>
 8012fd6:	bd10      	pop	{r4, pc}
 8012fd8:	4402      	add	r2, r0
 8012fda:	780c      	ldrb	r4, [r1, #0]
 8012fdc:	7803      	ldrb	r3, [r0, #0]
 8012fde:	f800 4b01 	strb.w	r4, [r0], #1
 8012fe2:	f801 3b01 	strb.w	r3, [r1], #1
 8012fe6:	1a13      	subs	r3, r2, r0
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	dcf6      	bgt.n	8012fda <swapfunc+0x1e>
 8012fec:	e7f3      	b.n	8012fd6 <swapfunc+0x1a>

08012fee <med3.isra.1>:
 8012fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ff0:	460c      	mov	r4, r1
 8012ff2:	4615      	mov	r5, r2
 8012ff4:	4607      	mov	r7, r0
 8012ff6:	461e      	mov	r6, r3
 8012ff8:	4798      	blx	r3
 8012ffa:	2800      	cmp	r0, #0
 8012ffc:	4629      	mov	r1, r5
 8012ffe:	4620      	mov	r0, r4
 8013000:	da0a      	bge.n	8013018 <med3.isra.1+0x2a>
 8013002:	47b0      	blx	r6
 8013004:	2800      	cmp	r0, #0
 8013006:	db05      	blt.n	8013014 <med3.isra.1+0x26>
 8013008:	4629      	mov	r1, r5
 801300a:	4638      	mov	r0, r7
 801300c:	47b0      	blx	r6
 801300e:	2800      	cmp	r0, #0
 8013010:	db0a      	blt.n	8013028 <med3.isra.1+0x3a>
 8013012:	463c      	mov	r4, r7
 8013014:	4620      	mov	r0, r4
 8013016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013018:	47b0      	blx	r6
 801301a:	2800      	cmp	r0, #0
 801301c:	dcfa      	bgt.n	8013014 <med3.isra.1+0x26>
 801301e:	4629      	mov	r1, r5
 8013020:	4638      	mov	r0, r7
 8013022:	47b0      	blx	r6
 8013024:	2800      	cmp	r0, #0
 8013026:	dbf4      	blt.n	8013012 <med3.isra.1+0x24>
 8013028:	462c      	mov	r4, r5
 801302a:	e7f3      	b.n	8013014 <med3.isra.1+0x26>

0801302c <qsort>:
 801302c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013030:	b085      	sub	sp, #20
 8013032:	4606      	mov	r6, r0
 8013034:	468a      	mov	sl, r1
 8013036:	4614      	mov	r4, r2
 8013038:	9300      	str	r3, [sp, #0]
 801303a:	07b2      	lsls	r2, r6, #30
 801303c:	d110      	bne.n	8013060 <qsort+0x34>
 801303e:	07a3      	lsls	r3, r4, #30
 8013040:	d10e      	bne.n	8013060 <qsort+0x34>
 8013042:	1f27      	subs	r7, r4, #4
 8013044:	bf18      	it	ne
 8013046:	2701      	movne	r7, #1
 8013048:	f1ba 0f06 	cmp.w	sl, #6
 801304c:	eb06 0b04 	add.w	fp, r6, r4
 8013050:	d828      	bhi.n	80130a4 <qsort+0x78>
 8013052:	fb04 6a0a 	mla	sl, r4, sl, r6
 8013056:	45da      	cmp	sl, fp
 8013058:	d80b      	bhi.n	8013072 <qsort+0x46>
 801305a:	b005      	add	sp, #20
 801305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013060:	2702      	movs	r7, #2
 8013062:	e7f1      	b.n	8013048 <qsort+0x1c>
 8013064:	463b      	mov	r3, r7
 8013066:	4622      	mov	r2, r4
 8013068:	4649      	mov	r1, r9
 801306a:	4640      	mov	r0, r8
 801306c:	f7ff ffa6 	bl	8012fbc <swapfunc>
 8013070:	e013      	b.n	801309a <qsort+0x6e>
 8013072:	46d8      	mov	r8, fp
 8013074:	e012      	b.n	801309c <qsort+0x70>
 8013076:	eba8 0904 	sub.w	r9, r8, r4
 801307a:	4641      	mov	r1, r8
 801307c:	4648      	mov	r0, r9
 801307e:	9b00      	ldr	r3, [sp, #0]
 8013080:	4798      	blx	r3
 8013082:	2800      	cmp	r0, #0
 8013084:	dd0c      	ble.n	80130a0 <qsort+0x74>
 8013086:	2f00      	cmp	r7, #0
 8013088:	d1ec      	bne.n	8013064 <qsort+0x38>
 801308a:	f8d8 3000 	ldr.w	r3, [r8]
 801308e:	f8d9 2000 	ldr.w	r2, [r9]
 8013092:	f8c8 2000 	str.w	r2, [r8]
 8013096:	f8c9 3000 	str.w	r3, [r9]
 801309a:	46c8      	mov	r8, r9
 801309c:	4546      	cmp	r6, r8
 801309e:	d3ea      	bcc.n	8013076 <qsort+0x4a>
 80130a0:	44a3      	add	fp, r4
 80130a2:	e7d8      	b.n	8013056 <qsort+0x2a>
 80130a4:	ea4f 085a 	mov.w	r8, sl, lsr #1
 80130a8:	f10a 35ff 	add.w	r5, sl, #4294967295
 80130ac:	f1ba 0f07 	cmp.w	sl, #7
 80130b0:	fb04 6808 	mla	r8, r4, r8, r6
 80130b4:	fb04 6505 	mla	r5, r4, r5, r6
 80130b8:	d027      	beq.n	801310a <qsort+0xde>
 80130ba:	f1ba 0f28 	cmp.w	sl, #40	; 0x28
 80130be:	d94a      	bls.n	8013156 <qsort+0x12a>
 80130c0:	ea4f 09da 	mov.w	r9, sl, lsr #3
 80130c4:	fb04 f909 	mul.w	r9, r4, r9
 80130c8:	eb06 0109 	add.w	r1, r6, r9
 80130cc:	eb01 0209 	add.w	r2, r1, r9
 80130d0:	9b00      	ldr	r3, [sp, #0]
 80130d2:	4630      	mov	r0, r6
 80130d4:	f7ff ff8b 	bl	8012fee <med3.isra.1>
 80130d8:	eb08 0209 	add.w	r2, r8, r9
 80130dc:	4641      	mov	r1, r8
 80130de:	9001      	str	r0, [sp, #4]
 80130e0:	9b00      	ldr	r3, [sp, #0]
 80130e2:	eba8 0009 	sub.w	r0, r8, r9
 80130e6:	f7ff ff82 	bl	8012fee <med3.isra.1>
 80130ea:	4680      	mov	r8, r0
 80130ec:	eba5 0049 	sub.w	r0, r5, r9, lsl #1
 80130f0:	462a      	mov	r2, r5
 80130f2:	9b00      	ldr	r3, [sp, #0]
 80130f4:	eb00 0109 	add.w	r1, r0, r9
 80130f8:	f7ff ff79 	bl	8012fee <med3.isra.1>
 80130fc:	4602      	mov	r2, r0
 80130fe:	4641      	mov	r1, r8
 8013100:	9b00      	ldr	r3, [sp, #0]
 8013102:	9801      	ldr	r0, [sp, #4]
 8013104:	f7ff ff73 	bl	8012fee <med3.isra.1>
 8013108:	4680      	mov	r8, r0
 801310a:	bb3f      	cbnz	r7, 801315c <qsort+0x130>
 801310c:	6833      	ldr	r3, [r6, #0]
 801310e:	f8d8 2000 	ldr.w	r2, [r8]
 8013112:	6032      	str	r2, [r6, #0]
 8013114:	f8c8 3000 	str.w	r3, [r8]
 8013118:	46d8      	mov	r8, fp
 801311a:	46a9      	mov	r9, r5
 801311c:	f8cd b004 	str.w	fp, [sp, #4]
 8013120:	2300      	movs	r3, #0
 8013122:	45a8      	cmp	r8, r5
 8013124:	d857      	bhi.n	80131d6 <qsort+0x1aa>
 8013126:	9302      	str	r3, [sp, #8]
 8013128:	4631      	mov	r1, r6
 801312a:	9b00      	ldr	r3, [sp, #0]
 801312c:	4640      	mov	r0, r8
 801312e:	4798      	blx	r3
 8013130:	2800      	cmp	r0, #0
 8013132:	9b02      	ldr	r3, [sp, #8]
 8013134:	dc2e      	bgt.n	8013194 <qsort+0x168>
 8013136:	d10c      	bne.n	8013152 <qsort+0x126>
 8013138:	b9bf      	cbnz	r7, 801316a <qsort+0x13e>
 801313a:	9b01      	ldr	r3, [sp, #4]
 801313c:	9901      	ldr	r1, [sp, #4]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f8d8 2000 	ldr.w	r2, [r8]
 8013144:	600a      	str	r2, [r1, #0]
 8013146:	f8c8 3000 	str.w	r3, [r8]
 801314a:	9b01      	ldr	r3, [sp, #4]
 801314c:	4423      	add	r3, r4
 801314e:	9301      	str	r3, [sp, #4]
 8013150:	2301      	movs	r3, #1
 8013152:	44a0      	add	r8, r4
 8013154:	e7e5      	b.n	8013122 <qsort+0xf6>
 8013156:	462a      	mov	r2, r5
 8013158:	9601      	str	r6, [sp, #4]
 801315a:	e7d0      	b.n	80130fe <qsort+0xd2>
 801315c:	463b      	mov	r3, r7
 801315e:	4622      	mov	r2, r4
 8013160:	4641      	mov	r1, r8
 8013162:	4630      	mov	r0, r6
 8013164:	f7ff ff2a 	bl	8012fbc <swapfunc>
 8013168:	e7d6      	b.n	8013118 <qsort+0xec>
 801316a:	463b      	mov	r3, r7
 801316c:	4622      	mov	r2, r4
 801316e:	4641      	mov	r1, r8
 8013170:	9801      	ldr	r0, [sp, #4]
 8013172:	f7ff ff23 	bl	8012fbc <swapfunc>
 8013176:	e7e8      	b.n	801314a <qsort+0x11e>
 8013178:	d109      	bne.n	801318e <qsort+0x162>
 801317a:	b9f7      	cbnz	r7, 80131ba <qsort+0x18e>
 801317c:	682b      	ldr	r3, [r5, #0]
 801317e:	f8d9 2000 	ldr.w	r2, [r9]
 8013182:	602a      	str	r2, [r5, #0]
 8013184:	f8c9 3000 	str.w	r3, [r9]
 8013188:	eba9 0904 	sub.w	r9, r9, r4
 801318c:	2301      	movs	r3, #1
 801318e:	9d02      	ldr	r5, [sp, #8]
 8013190:	45a8      	cmp	r8, r5
 8013192:	d820      	bhi.n	80131d6 <qsort+0x1aa>
 8013194:	9303      	str	r3, [sp, #12]
 8013196:	4631      	mov	r1, r6
 8013198:	9b00      	ldr	r3, [sp, #0]
 801319a:	4628      	mov	r0, r5
 801319c:	4798      	blx	r3
 801319e:	1b2b      	subs	r3, r5, r4
 80131a0:	2800      	cmp	r0, #0
 80131a2:	9302      	str	r3, [sp, #8]
 80131a4:	9b03      	ldr	r3, [sp, #12]
 80131a6:	dae7      	bge.n	8013178 <qsort+0x14c>
 80131a8:	b977      	cbnz	r7, 80131c8 <qsort+0x19c>
 80131aa:	f8d8 3000 	ldr.w	r3, [r8]
 80131ae:	682a      	ldr	r2, [r5, #0]
 80131b0:	f8c8 2000 	str.w	r2, [r8]
 80131b4:	602b      	str	r3, [r5, #0]
 80131b6:	9d02      	ldr	r5, [sp, #8]
 80131b8:	e7ca      	b.n	8013150 <qsort+0x124>
 80131ba:	463b      	mov	r3, r7
 80131bc:	4622      	mov	r2, r4
 80131be:	4649      	mov	r1, r9
 80131c0:	4628      	mov	r0, r5
 80131c2:	f7ff fefb 	bl	8012fbc <swapfunc>
 80131c6:	e7df      	b.n	8013188 <qsort+0x15c>
 80131c8:	463b      	mov	r3, r7
 80131ca:	4622      	mov	r2, r4
 80131cc:	4629      	mov	r1, r5
 80131ce:	4640      	mov	r0, r8
 80131d0:	f7ff fef4 	bl	8012fbc <swapfunc>
 80131d4:	e7ef      	b.n	80131b6 <qsort+0x18a>
 80131d6:	fb04 6a0a 	mla	sl, r4, sl, r6
 80131da:	bb03      	cbnz	r3, 801321e <qsort+0x1f2>
 80131dc:	45d3      	cmp	fp, sl
 80131de:	f4bf af3c 	bcs.w	801305a <qsort+0x2e>
 80131e2:	465d      	mov	r5, fp
 80131e4:	e017      	b.n	8013216 <qsort+0x1ea>
 80131e6:	463b      	mov	r3, r7
 80131e8:	4622      	mov	r2, r4
 80131ea:	4641      	mov	r1, r8
 80131ec:	4628      	mov	r0, r5
 80131ee:	f7ff fee5 	bl	8012fbc <swapfunc>
 80131f2:	e00f      	b.n	8013214 <qsort+0x1e8>
 80131f4:	eba5 0804 	sub.w	r8, r5, r4
 80131f8:	4629      	mov	r1, r5
 80131fa:	4640      	mov	r0, r8
 80131fc:	9b00      	ldr	r3, [sp, #0]
 80131fe:	4798      	blx	r3
 8013200:	2800      	cmp	r0, #0
 8013202:	dd0a      	ble.n	801321a <qsort+0x1ee>
 8013204:	2f00      	cmp	r7, #0
 8013206:	d1ee      	bne.n	80131e6 <qsort+0x1ba>
 8013208:	682b      	ldr	r3, [r5, #0]
 801320a:	f8d8 2000 	ldr.w	r2, [r8]
 801320e:	602a      	str	r2, [r5, #0]
 8013210:	f8c8 3000 	str.w	r3, [r8]
 8013214:	4645      	mov	r5, r8
 8013216:	42ae      	cmp	r6, r5
 8013218:	d3ec      	bcc.n	80131f4 <qsort+0x1c8>
 801321a:	44a3      	add	fp, r4
 801321c:	e7de      	b.n	80131dc <qsort+0x1b0>
 801321e:	9b01      	ldr	r3, [sp, #4]
 8013220:	eba8 0b03 	sub.w	fp, r8, r3
 8013224:	1b9a      	subs	r2, r3, r6
 8013226:	455a      	cmp	r2, fp
 8013228:	bfa8      	it	ge
 801322a:	465a      	movge	r2, fp
 801322c:	b12a      	cbz	r2, 801323a <qsort+0x20e>
 801322e:	463b      	mov	r3, r7
 8013230:	eba8 0102 	sub.w	r1, r8, r2
 8013234:	4630      	mov	r0, r6
 8013236:	f7ff fec1 	bl	8012fbc <swapfunc>
 801323a:	ebaa 0209 	sub.w	r2, sl, r9
 801323e:	eba9 0505 	sub.w	r5, r9, r5
 8013242:	1b12      	subs	r2, r2, r4
 8013244:	42aa      	cmp	r2, r5
 8013246:	bf28      	it	cs
 8013248:	462a      	movcs	r2, r5
 801324a:	b12a      	cbz	r2, 8013258 <qsort+0x22c>
 801324c:	463b      	mov	r3, r7
 801324e:	ebaa 0102 	sub.w	r1, sl, r2
 8013252:	4640      	mov	r0, r8
 8013254:	f7ff feb2 	bl	8012fbc <swapfunc>
 8013258:	455c      	cmp	r4, fp
 801325a:	d206      	bcs.n	801326a <qsort+0x23e>
 801325c:	fbbb f1f4 	udiv	r1, fp, r4
 8013260:	9b00      	ldr	r3, [sp, #0]
 8013262:	4622      	mov	r2, r4
 8013264:	4630      	mov	r0, r6
 8013266:	f7ff fee1 	bl	801302c <qsort>
 801326a:	42a5      	cmp	r5, r4
 801326c:	f67f aef5 	bls.w	801305a <qsort+0x2e>
 8013270:	ebaa 0605 	sub.w	r6, sl, r5
 8013274:	fbb5 faf4 	udiv	sl, r5, r4
 8013278:	e6df      	b.n	801303a <qsort+0xe>
	...

0801327c <_sbrk_r>:
 801327c:	b538      	push	{r3, r4, r5, lr}
 801327e:	4c06      	ldr	r4, [pc, #24]	; (8013298 <_sbrk_r+0x1c>)
 8013280:	2300      	movs	r3, #0
 8013282:	4605      	mov	r5, r0
 8013284:	4608      	mov	r0, r1
 8013286:	6023      	str	r3, [r4, #0]
 8013288:	f7fb f916 	bl	800e4b8 <_sbrk>
 801328c:	1c43      	adds	r3, r0, #1
 801328e:	d102      	bne.n	8013296 <_sbrk_r+0x1a>
 8013290:	6823      	ldr	r3, [r4, #0]
 8013292:	b103      	cbz	r3, 8013296 <_sbrk_r+0x1a>
 8013294:	602b      	str	r3, [r5, #0]
 8013296:	bd38      	pop	{r3, r4, r5, pc}
 8013298:	20006db8 	.word	0x20006db8

0801329c <nanf>:
 801329c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80132a4 <nanf+0x8>
 80132a0:	4770      	bx	lr
 80132a2:	bf00      	nop
 80132a4:	7fc00000 	.word	0x7fc00000

080132a8 <siprintf>:
 80132a8:	b40e      	push	{r1, r2, r3}
 80132aa:	b500      	push	{lr}
 80132ac:	b09c      	sub	sp, #112	; 0x70
 80132ae:	ab1d      	add	r3, sp, #116	; 0x74
 80132b0:	9002      	str	r0, [sp, #8]
 80132b2:	9006      	str	r0, [sp, #24]
 80132b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80132b8:	4809      	ldr	r0, [pc, #36]	; (80132e0 <siprintf+0x38>)
 80132ba:	9107      	str	r1, [sp, #28]
 80132bc:	9104      	str	r1, [sp, #16]
 80132be:	4909      	ldr	r1, [pc, #36]	; (80132e4 <siprintf+0x3c>)
 80132c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80132c4:	9105      	str	r1, [sp, #20]
 80132c6:	6800      	ldr	r0, [r0, #0]
 80132c8:	9301      	str	r3, [sp, #4]
 80132ca:	a902      	add	r1, sp, #8
 80132cc:	f002 fe54 	bl	8015f78 <_svfiprintf_r>
 80132d0:	9b02      	ldr	r3, [sp, #8]
 80132d2:	2200      	movs	r2, #0
 80132d4:	701a      	strb	r2, [r3, #0]
 80132d6:	b01c      	add	sp, #112	; 0x70
 80132d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80132dc:	b003      	add	sp, #12
 80132de:	4770      	bx	lr
 80132e0:	20000018 	.word	0x20000018
 80132e4:	ffff0208 	.word	0xffff0208

080132e8 <__sread>:
 80132e8:	b510      	push	{r4, lr}
 80132ea:	460c      	mov	r4, r1
 80132ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132f0:	f002 ff70 	bl	80161d4 <_read_r>
 80132f4:	2800      	cmp	r0, #0
 80132f6:	bfab      	itete	ge
 80132f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80132fa:	89a3      	ldrhlt	r3, [r4, #12]
 80132fc:	181b      	addge	r3, r3, r0
 80132fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013302:	bfac      	ite	ge
 8013304:	6563      	strge	r3, [r4, #84]	; 0x54
 8013306:	81a3      	strhlt	r3, [r4, #12]
 8013308:	bd10      	pop	{r4, pc}

0801330a <__swrite>:
 801330a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801330e:	461f      	mov	r7, r3
 8013310:	898b      	ldrh	r3, [r1, #12]
 8013312:	05db      	lsls	r3, r3, #23
 8013314:	4605      	mov	r5, r0
 8013316:	460c      	mov	r4, r1
 8013318:	4616      	mov	r6, r2
 801331a:	d505      	bpl.n	8013328 <__swrite+0x1e>
 801331c:	2302      	movs	r3, #2
 801331e:	2200      	movs	r2, #0
 8013320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013324:	f002 f954 	bl	80155d0 <_lseek_r>
 8013328:	89a3      	ldrh	r3, [r4, #12]
 801332a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801332e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013332:	81a3      	strh	r3, [r4, #12]
 8013334:	4632      	mov	r2, r6
 8013336:	463b      	mov	r3, r7
 8013338:	4628      	mov	r0, r5
 801333a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801333e:	f000 bf17 	b.w	8014170 <_write_r>

08013342 <__sseek>:
 8013342:	b510      	push	{r4, lr}
 8013344:	460c      	mov	r4, r1
 8013346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801334a:	f002 f941 	bl	80155d0 <_lseek_r>
 801334e:	1c43      	adds	r3, r0, #1
 8013350:	89a3      	ldrh	r3, [r4, #12]
 8013352:	bf15      	itete	ne
 8013354:	6560      	strne	r0, [r4, #84]	; 0x54
 8013356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801335a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801335e:	81a3      	strheq	r3, [r4, #12]
 8013360:	bf18      	it	ne
 8013362:	81a3      	strhne	r3, [r4, #12]
 8013364:	bd10      	pop	{r4, pc}

08013366 <__sclose>:
 8013366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801336a:	f000 bf81 	b.w	8014270 <_close_r>

0801336e <sulp>:
 801336e:	b570      	push	{r4, r5, r6, lr}
 8013370:	4604      	mov	r4, r0
 8013372:	460d      	mov	r5, r1
 8013374:	ec45 4b10 	vmov	d0, r4, r5
 8013378:	4616      	mov	r6, r2
 801337a:	f002 fc3b 	bl	8015bf4 <__ulp>
 801337e:	ec51 0b10 	vmov	r0, r1, d0
 8013382:	b17e      	cbz	r6, 80133a4 <sulp+0x36>
 8013384:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013388:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801338c:	2b00      	cmp	r3, #0
 801338e:	dd09      	ble.n	80133a4 <sulp+0x36>
 8013390:	051b      	lsls	r3, r3, #20
 8013392:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013396:	2400      	movs	r4, #0
 8013398:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801339c:	4622      	mov	r2, r4
 801339e:	462b      	mov	r3, r5
 80133a0:	f7f5 f862 	bl	8008468 <__aeabi_dmul>
 80133a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080133a8 <_strtod_l>:
 80133a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133ac:	461f      	mov	r7, r3
 80133ae:	b0a1      	sub	sp, #132	; 0x84
 80133b0:	2300      	movs	r3, #0
 80133b2:	4681      	mov	r9, r0
 80133b4:	4638      	mov	r0, r7
 80133b6:	460e      	mov	r6, r1
 80133b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80133ba:	931c      	str	r3, [sp, #112]	; 0x70
 80133bc:	f002 f8f7 	bl	80155ae <__localeconv_l>
 80133c0:	4680      	mov	r8, r0
 80133c2:	6800      	ldr	r0, [r0, #0]
 80133c4:	f7f4 fe3c 	bl	8008040 <strlen>
 80133c8:	f04f 0a00 	mov.w	sl, #0
 80133cc:	4604      	mov	r4, r0
 80133ce:	f04f 0b00 	mov.w	fp, #0
 80133d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80133d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80133d6:	781a      	ldrb	r2, [r3, #0]
 80133d8:	2a0d      	cmp	r2, #13
 80133da:	d832      	bhi.n	8013442 <_strtod_l+0x9a>
 80133dc:	2a09      	cmp	r2, #9
 80133de:	d236      	bcs.n	801344e <_strtod_l+0xa6>
 80133e0:	2a00      	cmp	r2, #0
 80133e2:	d03e      	beq.n	8013462 <_strtod_l+0xba>
 80133e4:	2300      	movs	r3, #0
 80133e6:	930d      	str	r3, [sp, #52]	; 0x34
 80133e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80133ea:	782b      	ldrb	r3, [r5, #0]
 80133ec:	2b30      	cmp	r3, #48	; 0x30
 80133ee:	f040 80ac 	bne.w	801354a <_strtod_l+0x1a2>
 80133f2:	786b      	ldrb	r3, [r5, #1]
 80133f4:	2b58      	cmp	r3, #88	; 0x58
 80133f6:	d001      	beq.n	80133fc <_strtod_l+0x54>
 80133f8:	2b78      	cmp	r3, #120	; 0x78
 80133fa:	d167      	bne.n	80134cc <_strtod_l+0x124>
 80133fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133fe:	9301      	str	r3, [sp, #4]
 8013400:	ab1c      	add	r3, sp, #112	; 0x70
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	9702      	str	r7, [sp, #8]
 8013406:	ab1d      	add	r3, sp, #116	; 0x74
 8013408:	4a88      	ldr	r2, [pc, #544]	; (801362c <_strtod_l+0x284>)
 801340a:	a91b      	add	r1, sp, #108	; 0x6c
 801340c:	4648      	mov	r0, r9
 801340e:	f001 fde4 	bl	8014fda <__gethex>
 8013412:	f010 0407 	ands.w	r4, r0, #7
 8013416:	4606      	mov	r6, r0
 8013418:	d005      	beq.n	8013426 <_strtod_l+0x7e>
 801341a:	2c06      	cmp	r4, #6
 801341c:	d12b      	bne.n	8013476 <_strtod_l+0xce>
 801341e:	3501      	adds	r5, #1
 8013420:	2300      	movs	r3, #0
 8013422:	951b      	str	r5, [sp, #108]	; 0x6c
 8013424:	930d      	str	r3, [sp, #52]	; 0x34
 8013426:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013428:	2b00      	cmp	r3, #0
 801342a:	f040 859a 	bne.w	8013f62 <_strtod_l+0xbba>
 801342e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013430:	b1e3      	cbz	r3, 801346c <_strtod_l+0xc4>
 8013432:	4652      	mov	r2, sl
 8013434:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013438:	ec43 2b10 	vmov	d0, r2, r3
 801343c:	b021      	add	sp, #132	; 0x84
 801343e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013442:	2a2b      	cmp	r2, #43	; 0x2b
 8013444:	d015      	beq.n	8013472 <_strtod_l+0xca>
 8013446:	2a2d      	cmp	r2, #45	; 0x2d
 8013448:	d004      	beq.n	8013454 <_strtod_l+0xac>
 801344a:	2a20      	cmp	r2, #32
 801344c:	d1ca      	bne.n	80133e4 <_strtod_l+0x3c>
 801344e:	3301      	adds	r3, #1
 8013450:	931b      	str	r3, [sp, #108]	; 0x6c
 8013452:	e7bf      	b.n	80133d4 <_strtod_l+0x2c>
 8013454:	2201      	movs	r2, #1
 8013456:	920d      	str	r2, [sp, #52]	; 0x34
 8013458:	1c5a      	adds	r2, r3, #1
 801345a:	921b      	str	r2, [sp, #108]	; 0x6c
 801345c:	785b      	ldrb	r3, [r3, #1]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d1c2      	bne.n	80133e8 <_strtod_l+0x40>
 8013462:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013464:	961b      	str	r6, [sp, #108]	; 0x6c
 8013466:	2b00      	cmp	r3, #0
 8013468:	f040 8579 	bne.w	8013f5e <_strtod_l+0xbb6>
 801346c:	4652      	mov	r2, sl
 801346e:	465b      	mov	r3, fp
 8013470:	e7e2      	b.n	8013438 <_strtod_l+0x90>
 8013472:	2200      	movs	r2, #0
 8013474:	e7ef      	b.n	8013456 <_strtod_l+0xae>
 8013476:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013478:	b13a      	cbz	r2, 801348a <_strtod_l+0xe2>
 801347a:	2135      	movs	r1, #53	; 0x35
 801347c:	a81e      	add	r0, sp, #120	; 0x78
 801347e:	f002 fcb1 	bl	8015de4 <__copybits>
 8013482:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013484:	4648      	mov	r0, r9
 8013486:	f002 f91e 	bl	80156c6 <_Bfree>
 801348a:	3c01      	subs	r4, #1
 801348c:	2c04      	cmp	r4, #4
 801348e:	d806      	bhi.n	801349e <_strtod_l+0xf6>
 8013490:	e8df f004 	tbb	[pc, r4]
 8013494:	1714030a 	.word	0x1714030a
 8013498:	0a          	.byte	0x0a
 8013499:	00          	.byte	0x00
 801349a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801349e:	0730      	lsls	r0, r6, #28
 80134a0:	d5c1      	bpl.n	8013426 <_strtod_l+0x7e>
 80134a2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80134a6:	e7be      	b.n	8013426 <_strtod_l+0x7e>
 80134a8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80134ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80134ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80134b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80134b6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80134ba:	e7f0      	b.n	801349e <_strtod_l+0xf6>
 80134bc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013630 <_strtod_l+0x288>
 80134c0:	e7ed      	b.n	801349e <_strtod_l+0xf6>
 80134c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80134c6:	f04f 3aff 	mov.w	sl, #4294967295
 80134ca:	e7e8      	b.n	801349e <_strtod_l+0xf6>
 80134cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80134ce:	1c5a      	adds	r2, r3, #1
 80134d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80134d2:	785b      	ldrb	r3, [r3, #1]
 80134d4:	2b30      	cmp	r3, #48	; 0x30
 80134d6:	d0f9      	beq.n	80134cc <_strtod_l+0x124>
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d0a4      	beq.n	8013426 <_strtod_l+0x7e>
 80134dc:	2301      	movs	r3, #1
 80134de:	2500      	movs	r5, #0
 80134e0:	9306      	str	r3, [sp, #24]
 80134e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80134e4:	9308      	str	r3, [sp, #32]
 80134e6:	9507      	str	r5, [sp, #28]
 80134e8:	9505      	str	r5, [sp, #20]
 80134ea:	220a      	movs	r2, #10
 80134ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80134ee:	7807      	ldrb	r7, [r0, #0]
 80134f0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80134f4:	b2d9      	uxtb	r1, r3
 80134f6:	2909      	cmp	r1, #9
 80134f8:	d929      	bls.n	801354e <_strtod_l+0x1a6>
 80134fa:	4622      	mov	r2, r4
 80134fc:	f8d8 1000 	ldr.w	r1, [r8]
 8013500:	f002 fe7a 	bl	80161f8 <strncmp>
 8013504:	2800      	cmp	r0, #0
 8013506:	d031      	beq.n	801356c <_strtod_l+0x1c4>
 8013508:	2000      	movs	r0, #0
 801350a:	9c05      	ldr	r4, [sp, #20]
 801350c:	9004      	str	r0, [sp, #16]
 801350e:	463b      	mov	r3, r7
 8013510:	4602      	mov	r2, r0
 8013512:	2b65      	cmp	r3, #101	; 0x65
 8013514:	d001      	beq.n	801351a <_strtod_l+0x172>
 8013516:	2b45      	cmp	r3, #69	; 0x45
 8013518:	d114      	bne.n	8013544 <_strtod_l+0x19c>
 801351a:	b924      	cbnz	r4, 8013526 <_strtod_l+0x17e>
 801351c:	b910      	cbnz	r0, 8013524 <_strtod_l+0x17c>
 801351e:	9b06      	ldr	r3, [sp, #24]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d09e      	beq.n	8013462 <_strtod_l+0xba>
 8013524:	2400      	movs	r4, #0
 8013526:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013528:	1c73      	adds	r3, r6, #1
 801352a:	931b      	str	r3, [sp, #108]	; 0x6c
 801352c:	7873      	ldrb	r3, [r6, #1]
 801352e:	2b2b      	cmp	r3, #43	; 0x2b
 8013530:	d078      	beq.n	8013624 <_strtod_l+0x27c>
 8013532:	2b2d      	cmp	r3, #45	; 0x2d
 8013534:	d070      	beq.n	8013618 <_strtod_l+0x270>
 8013536:	f04f 0c00 	mov.w	ip, #0
 801353a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801353e:	2f09      	cmp	r7, #9
 8013540:	d97c      	bls.n	801363c <_strtod_l+0x294>
 8013542:	961b      	str	r6, [sp, #108]	; 0x6c
 8013544:	f04f 0e00 	mov.w	lr, #0
 8013548:	e09a      	b.n	8013680 <_strtod_l+0x2d8>
 801354a:	2300      	movs	r3, #0
 801354c:	e7c7      	b.n	80134de <_strtod_l+0x136>
 801354e:	9905      	ldr	r1, [sp, #20]
 8013550:	2908      	cmp	r1, #8
 8013552:	bfdd      	ittte	le
 8013554:	9907      	ldrle	r1, [sp, #28]
 8013556:	fb02 3301 	mlale	r3, r2, r1, r3
 801355a:	9307      	strle	r3, [sp, #28]
 801355c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013560:	9b05      	ldr	r3, [sp, #20]
 8013562:	3001      	adds	r0, #1
 8013564:	3301      	adds	r3, #1
 8013566:	9305      	str	r3, [sp, #20]
 8013568:	901b      	str	r0, [sp, #108]	; 0x6c
 801356a:	e7bf      	b.n	80134ec <_strtod_l+0x144>
 801356c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801356e:	191a      	adds	r2, r3, r4
 8013570:	921b      	str	r2, [sp, #108]	; 0x6c
 8013572:	9a05      	ldr	r2, [sp, #20]
 8013574:	5d1b      	ldrb	r3, [r3, r4]
 8013576:	2a00      	cmp	r2, #0
 8013578:	d037      	beq.n	80135ea <_strtod_l+0x242>
 801357a:	9c05      	ldr	r4, [sp, #20]
 801357c:	4602      	mov	r2, r0
 801357e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013582:	2909      	cmp	r1, #9
 8013584:	d913      	bls.n	80135ae <_strtod_l+0x206>
 8013586:	2101      	movs	r1, #1
 8013588:	9104      	str	r1, [sp, #16]
 801358a:	e7c2      	b.n	8013512 <_strtod_l+0x16a>
 801358c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801358e:	1c5a      	adds	r2, r3, #1
 8013590:	921b      	str	r2, [sp, #108]	; 0x6c
 8013592:	785b      	ldrb	r3, [r3, #1]
 8013594:	3001      	adds	r0, #1
 8013596:	2b30      	cmp	r3, #48	; 0x30
 8013598:	d0f8      	beq.n	801358c <_strtod_l+0x1e4>
 801359a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801359e:	2a08      	cmp	r2, #8
 80135a0:	f200 84e4 	bhi.w	8013f6c <_strtod_l+0xbc4>
 80135a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80135a6:	9208      	str	r2, [sp, #32]
 80135a8:	4602      	mov	r2, r0
 80135aa:	2000      	movs	r0, #0
 80135ac:	4604      	mov	r4, r0
 80135ae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80135b2:	f100 0101 	add.w	r1, r0, #1
 80135b6:	d012      	beq.n	80135de <_strtod_l+0x236>
 80135b8:	440a      	add	r2, r1
 80135ba:	eb00 0c04 	add.w	ip, r0, r4
 80135be:	4621      	mov	r1, r4
 80135c0:	270a      	movs	r7, #10
 80135c2:	458c      	cmp	ip, r1
 80135c4:	d113      	bne.n	80135ee <_strtod_l+0x246>
 80135c6:	1821      	adds	r1, r4, r0
 80135c8:	2908      	cmp	r1, #8
 80135ca:	f104 0401 	add.w	r4, r4, #1
 80135ce:	4404      	add	r4, r0
 80135d0:	dc19      	bgt.n	8013606 <_strtod_l+0x25e>
 80135d2:	9b07      	ldr	r3, [sp, #28]
 80135d4:	210a      	movs	r1, #10
 80135d6:	fb01 e303 	mla	r3, r1, r3, lr
 80135da:	9307      	str	r3, [sp, #28]
 80135dc:	2100      	movs	r1, #0
 80135de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80135e0:	1c58      	adds	r0, r3, #1
 80135e2:	901b      	str	r0, [sp, #108]	; 0x6c
 80135e4:	785b      	ldrb	r3, [r3, #1]
 80135e6:	4608      	mov	r0, r1
 80135e8:	e7c9      	b.n	801357e <_strtod_l+0x1d6>
 80135ea:	9805      	ldr	r0, [sp, #20]
 80135ec:	e7d3      	b.n	8013596 <_strtod_l+0x1ee>
 80135ee:	2908      	cmp	r1, #8
 80135f0:	f101 0101 	add.w	r1, r1, #1
 80135f4:	dc03      	bgt.n	80135fe <_strtod_l+0x256>
 80135f6:	9b07      	ldr	r3, [sp, #28]
 80135f8:	437b      	muls	r3, r7
 80135fa:	9307      	str	r3, [sp, #28]
 80135fc:	e7e1      	b.n	80135c2 <_strtod_l+0x21a>
 80135fe:	2910      	cmp	r1, #16
 8013600:	bfd8      	it	le
 8013602:	437d      	mulle	r5, r7
 8013604:	e7dd      	b.n	80135c2 <_strtod_l+0x21a>
 8013606:	2c10      	cmp	r4, #16
 8013608:	bfdc      	itt	le
 801360a:	210a      	movle	r1, #10
 801360c:	fb01 e505 	mlale	r5, r1, r5, lr
 8013610:	e7e4      	b.n	80135dc <_strtod_l+0x234>
 8013612:	2301      	movs	r3, #1
 8013614:	9304      	str	r3, [sp, #16]
 8013616:	e781      	b.n	801351c <_strtod_l+0x174>
 8013618:	f04f 0c01 	mov.w	ip, #1
 801361c:	1cb3      	adds	r3, r6, #2
 801361e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013620:	78b3      	ldrb	r3, [r6, #2]
 8013622:	e78a      	b.n	801353a <_strtod_l+0x192>
 8013624:	f04f 0c00 	mov.w	ip, #0
 8013628:	e7f8      	b.n	801361c <_strtod_l+0x274>
 801362a:	bf00      	nop
 801362c:	08016700 	.word	0x08016700
 8013630:	7ff00000 	.word	0x7ff00000
 8013634:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013636:	1c5f      	adds	r7, r3, #1
 8013638:	971b      	str	r7, [sp, #108]	; 0x6c
 801363a:	785b      	ldrb	r3, [r3, #1]
 801363c:	2b30      	cmp	r3, #48	; 0x30
 801363e:	d0f9      	beq.n	8013634 <_strtod_l+0x28c>
 8013640:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013644:	2f08      	cmp	r7, #8
 8013646:	f63f af7d 	bhi.w	8013544 <_strtod_l+0x19c>
 801364a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801364e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013650:	930a      	str	r3, [sp, #40]	; 0x28
 8013652:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013654:	1c5f      	adds	r7, r3, #1
 8013656:	971b      	str	r7, [sp, #108]	; 0x6c
 8013658:	785b      	ldrb	r3, [r3, #1]
 801365a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801365e:	f1b8 0f09 	cmp.w	r8, #9
 8013662:	d937      	bls.n	80136d4 <_strtod_l+0x32c>
 8013664:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013666:	1a7f      	subs	r7, r7, r1
 8013668:	2f08      	cmp	r7, #8
 801366a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801366e:	dc37      	bgt.n	80136e0 <_strtod_l+0x338>
 8013670:	45be      	cmp	lr, r7
 8013672:	bfa8      	it	ge
 8013674:	46be      	movge	lr, r7
 8013676:	f1bc 0f00 	cmp.w	ip, #0
 801367a:	d001      	beq.n	8013680 <_strtod_l+0x2d8>
 801367c:	f1ce 0e00 	rsb	lr, lr, #0
 8013680:	2c00      	cmp	r4, #0
 8013682:	d151      	bne.n	8013728 <_strtod_l+0x380>
 8013684:	2800      	cmp	r0, #0
 8013686:	f47f aece 	bne.w	8013426 <_strtod_l+0x7e>
 801368a:	9a06      	ldr	r2, [sp, #24]
 801368c:	2a00      	cmp	r2, #0
 801368e:	f47f aeca 	bne.w	8013426 <_strtod_l+0x7e>
 8013692:	9a04      	ldr	r2, [sp, #16]
 8013694:	2a00      	cmp	r2, #0
 8013696:	f47f aee4 	bne.w	8013462 <_strtod_l+0xba>
 801369a:	2b4e      	cmp	r3, #78	; 0x4e
 801369c:	d027      	beq.n	80136ee <_strtod_l+0x346>
 801369e:	dc21      	bgt.n	80136e4 <_strtod_l+0x33c>
 80136a0:	2b49      	cmp	r3, #73	; 0x49
 80136a2:	f47f aede 	bne.w	8013462 <_strtod_l+0xba>
 80136a6:	49a0      	ldr	r1, [pc, #640]	; (8013928 <_strtod_l+0x580>)
 80136a8:	a81b      	add	r0, sp, #108	; 0x6c
 80136aa:	f001 fec9 	bl	8015440 <__match>
 80136ae:	2800      	cmp	r0, #0
 80136b0:	f43f aed7 	beq.w	8013462 <_strtod_l+0xba>
 80136b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80136b6:	499d      	ldr	r1, [pc, #628]	; (801392c <_strtod_l+0x584>)
 80136b8:	3b01      	subs	r3, #1
 80136ba:	a81b      	add	r0, sp, #108	; 0x6c
 80136bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80136be:	f001 febf 	bl	8015440 <__match>
 80136c2:	b910      	cbnz	r0, 80136ca <_strtod_l+0x322>
 80136c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80136c6:	3301      	adds	r3, #1
 80136c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80136ca:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013940 <_strtod_l+0x598>
 80136ce:	f04f 0a00 	mov.w	sl, #0
 80136d2:	e6a8      	b.n	8013426 <_strtod_l+0x7e>
 80136d4:	210a      	movs	r1, #10
 80136d6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80136da:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80136de:	e7b8      	b.n	8013652 <_strtod_l+0x2aa>
 80136e0:	46be      	mov	lr, r7
 80136e2:	e7c8      	b.n	8013676 <_strtod_l+0x2ce>
 80136e4:	2b69      	cmp	r3, #105	; 0x69
 80136e6:	d0de      	beq.n	80136a6 <_strtod_l+0x2fe>
 80136e8:	2b6e      	cmp	r3, #110	; 0x6e
 80136ea:	f47f aeba 	bne.w	8013462 <_strtod_l+0xba>
 80136ee:	4990      	ldr	r1, [pc, #576]	; (8013930 <_strtod_l+0x588>)
 80136f0:	a81b      	add	r0, sp, #108	; 0x6c
 80136f2:	f001 fea5 	bl	8015440 <__match>
 80136f6:	2800      	cmp	r0, #0
 80136f8:	f43f aeb3 	beq.w	8013462 <_strtod_l+0xba>
 80136fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80136fe:	781b      	ldrb	r3, [r3, #0]
 8013700:	2b28      	cmp	r3, #40	; 0x28
 8013702:	d10e      	bne.n	8013722 <_strtod_l+0x37a>
 8013704:	aa1e      	add	r2, sp, #120	; 0x78
 8013706:	498b      	ldr	r1, [pc, #556]	; (8013934 <_strtod_l+0x58c>)
 8013708:	a81b      	add	r0, sp, #108	; 0x6c
 801370a:	f001 fead 	bl	8015468 <__hexnan>
 801370e:	2805      	cmp	r0, #5
 8013710:	d107      	bne.n	8013722 <_strtod_l+0x37a>
 8013712:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013714:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013718:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801371c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013720:	e681      	b.n	8013426 <_strtod_l+0x7e>
 8013722:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013948 <_strtod_l+0x5a0>
 8013726:	e7d2      	b.n	80136ce <_strtod_l+0x326>
 8013728:	ebae 0302 	sub.w	r3, lr, r2
 801372c:	9306      	str	r3, [sp, #24]
 801372e:	9b05      	ldr	r3, [sp, #20]
 8013730:	9807      	ldr	r0, [sp, #28]
 8013732:	2b00      	cmp	r3, #0
 8013734:	bf08      	it	eq
 8013736:	4623      	moveq	r3, r4
 8013738:	2c10      	cmp	r4, #16
 801373a:	9305      	str	r3, [sp, #20]
 801373c:	46a0      	mov	r8, r4
 801373e:	bfa8      	it	ge
 8013740:	f04f 0810 	movge.w	r8, #16
 8013744:	f7f4 fe16 	bl	8008374 <__aeabi_ui2d>
 8013748:	2c09      	cmp	r4, #9
 801374a:	4682      	mov	sl, r0
 801374c:	468b      	mov	fp, r1
 801374e:	dc13      	bgt.n	8013778 <_strtod_l+0x3d0>
 8013750:	9b06      	ldr	r3, [sp, #24]
 8013752:	2b00      	cmp	r3, #0
 8013754:	f43f ae67 	beq.w	8013426 <_strtod_l+0x7e>
 8013758:	9b06      	ldr	r3, [sp, #24]
 801375a:	dd7a      	ble.n	8013852 <_strtod_l+0x4aa>
 801375c:	2b16      	cmp	r3, #22
 801375e:	dc61      	bgt.n	8013824 <_strtod_l+0x47c>
 8013760:	4a75      	ldr	r2, [pc, #468]	; (8013938 <_strtod_l+0x590>)
 8013762:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013766:	e9de 0100 	ldrd	r0, r1, [lr]
 801376a:	4652      	mov	r2, sl
 801376c:	465b      	mov	r3, fp
 801376e:	f7f4 fe7b 	bl	8008468 <__aeabi_dmul>
 8013772:	4682      	mov	sl, r0
 8013774:	468b      	mov	fp, r1
 8013776:	e656      	b.n	8013426 <_strtod_l+0x7e>
 8013778:	4b6f      	ldr	r3, [pc, #444]	; (8013938 <_strtod_l+0x590>)
 801377a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801377e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013782:	f7f4 fe71 	bl	8008468 <__aeabi_dmul>
 8013786:	4606      	mov	r6, r0
 8013788:	4628      	mov	r0, r5
 801378a:	460f      	mov	r7, r1
 801378c:	f7f4 fdf2 	bl	8008374 <__aeabi_ui2d>
 8013790:	4602      	mov	r2, r0
 8013792:	460b      	mov	r3, r1
 8013794:	4630      	mov	r0, r6
 8013796:	4639      	mov	r1, r7
 8013798:	f7f4 fcb0 	bl	80080fc <__adddf3>
 801379c:	2c0f      	cmp	r4, #15
 801379e:	4682      	mov	sl, r0
 80137a0:	468b      	mov	fp, r1
 80137a2:	ddd5      	ble.n	8013750 <_strtod_l+0x3a8>
 80137a4:	9b06      	ldr	r3, [sp, #24]
 80137a6:	eba4 0808 	sub.w	r8, r4, r8
 80137aa:	4498      	add	r8, r3
 80137ac:	f1b8 0f00 	cmp.w	r8, #0
 80137b0:	f340 8096 	ble.w	80138e0 <_strtod_l+0x538>
 80137b4:	f018 030f 	ands.w	r3, r8, #15
 80137b8:	d00a      	beq.n	80137d0 <_strtod_l+0x428>
 80137ba:	495f      	ldr	r1, [pc, #380]	; (8013938 <_strtod_l+0x590>)
 80137bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80137c0:	4652      	mov	r2, sl
 80137c2:	465b      	mov	r3, fp
 80137c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137c8:	f7f4 fe4e 	bl	8008468 <__aeabi_dmul>
 80137cc:	4682      	mov	sl, r0
 80137ce:	468b      	mov	fp, r1
 80137d0:	f038 080f 	bics.w	r8, r8, #15
 80137d4:	d073      	beq.n	80138be <_strtod_l+0x516>
 80137d6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80137da:	dd47      	ble.n	801386c <_strtod_l+0x4c4>
 80137dc:	2400      	movs	r4, #0
 80137de:	46a0      	mov	r8, r4
 80137e0:	9407      	str	r4, [sp, #28]
 80137e2:	9405      	str	r4, [sp, #20]
 80137e4:	2322      	movs	r3, #34	; 0x22
 80137e6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013940 <_strtod_l+0x598>
 80137ea:	f8c9 3000 	str.w	r3, [r9]
 80137ee:	f04f 0a00 	mov.w	sl, #0
 80137f2:	9b07      	ldr	r3, [sp, #28]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	f43f ae16 	beq.w	8013426 <_strtod_l+0x7e>
 80137fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80137fc:	4648      	mov	r0, r9
 80137fe:	f001 ff62 	bl	80156c6 <_Bfree>
 8013802:	9905      	ldr	r1, [sp, #20]
 8013804:	4648      	mov	r0, r9
 8013806:	f001 ff5e 	bl	80156c6 <_Bfree>
 801380a:	4641      	mov	r1, r8
 801380c:	4648      	mov	r0, r9
 801380e:	f001 ff5a 	bl	80156c6 <_Bfree>
 8013812:	9907      	ldr	r1, [sp, #28]
 8013814:	4648      	mov	r0, r9
 8013816:	f001 ff56 	bl	80156c6 <_Bfree>
 801381a:	4621      	mov	r1, r4
 801381c:	4648      	mov	r0, r9
 801381e:	f001 ff52 	bl	80156c6 <_Bfree>
 8013822:	e600      	b.n	8013426 <_strtod_l+0x7e>
 8013824:	9a06      	ldr	r2, [sp, #24]
 8013826:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801382a:	4293      	cmp	r3, r2
 801382c:	dbba      	blt.n	80137a4 <_strtod_l+0x3fc>
 801382e:	4d42      	ldr	r5, [pc, #264]	; (8013938 <_strtod_l+0x590>)
 8013830:	f1c4 040f 	rsb	r4, r4, #15
 8013834:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013838:	4652      	mov	r2, sl
 801383a:	465b      	mov	r3, fp
 801383c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013840:	f7f4 fe12 	bl	8008468 <__aeabi_dmul>
 8013844:	9b06      	ldr	r3, [sp, #24]
 8013846:	1b1c      	subs	r4, r3, r4
 8013848:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801384c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013850:	e78d      	b.n	801376e <_strtod_l+0x3c6>
 8013852:	f113 0f16 	cmn.w	r3, #22
 8013856:	dba5      	blt.n	80137a4 <_strtod_l+0x3fc>
 8013858:	4a37      	ldr	r2, [pc, #220]	; (8013938 <_strtod_l+0x590>)
 801385a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801385e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013862:	4650      	mov	r0, sl
 8013864:	4659      	mov	r1, fp
 8013866:	f7f4 ff29 	bl	80086bc <__aeabi_ddiv>
 801386a:	e782      	b.n	8013772 <_strtod_l+0x3ca>
 801386c:	2300      	movs	r3, #0
 801386e:	4e33      	ldr	r6, [pc, #204]	; (801393c <_strtod_l+0x594>)
 8013870:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013874:	4650      	mov	r0, sl
 8013876:	4659      	mov	r1, fp
 8013878:	461d      	mov	r5, r3
 801387a:	f1b8 0f01 	cmp.w	r8, #1
 801387e:	dc21      	bgt.n	80138c4 <_strtod_l+0x51c>
 8013880:	b10b      	cbz	r3, 8013886 <_strtod_l+0x4de>
 8013882:	4682      	mov	sl, r0
 8013884:	468b      	mov	fp, r1
 8013886:	4b2d      	ldr	r3, [pc, #180]	; (801393c <_strtod_l+0x594>)
 8013888:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801388c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013890:	4652      	mov	r2, sl
 8013892:	465b      	mov	r3, fp
 8013894:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013898:	f7f4 fde6 	bl	8008468 <__aeabi_dmul>
 801389c:	4b28      	ldr	r3, [pc, #160]	; (8013940 <_strtod_l+0x598>)
 801389e:	460a      	mov	r2, r1
 80138a0:	400b      	ands	r3, r1
 80138a2:	4928      	ldr	r1, [pc, #160]	; (8013944 <_strtod_l+0x59c>)
 80138a4:	428b      	cmp	r3, r1
 80138a6:	4682      	mov	sl, r0
 80138a8:	d898      	bhi.n	80137dc <_strtod_l+0x434>
 80138aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80138ae:	428b      	cmp	r3, r1
 80138b0:	bf86      	itte	hi
 80138b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801394c <_strtod_l+0x5a4>
 80138b6:	f04f 3aff 	movhi.w	sl, #4294967295
 80138ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80138be:	2300      	movs	r3, #0
 80138c0:	9304      	str	r3, [sp, #16]
 80138c2:	e077      	b.n	80139b4 <_strtod_l+0x60c>
 80138c4:	f018 0f01 	tst.w	r8, #1
 80138c8:	d006      	beq.n	80138d8 <_strtod_l+0x530>
 80138ca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80138ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d2:	f7f4 fdc9 	bl	8008468 <__aeabi_dmul>
 80138d6:	2301      	movs	r3, #1
 80138d8:	3501      	adds	r5, #1
 80138da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80138de:	e7cc      	b.n	801387a <_strtod_l+0x4d2>
 80138e0:	d0ed      	beq.n	80138be <_strtod_l+0x516>
 80138e2:	f1c8 0800 	rsb	r8, r8, #0
 80138e6:	f018 020f 	ands.w	r2, r8, #15
 80138ea:	d00a      	beq.n	8013902 <_strtod_l+0x55a>
 80138ec:	4b12      	ldr	r3, [pc, #72]	; (8013938 <_strtod_l+0x590>)
 80138ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80138f2:	4650      	mov	r0, sl
 80138f4:	4659      	mov	r1, fp
 80138f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138fa:	f7f4 fedf 	bl	80086bc <__aeabi_ddiv>
 80138fe:	4682      	mov	sl, r0
 8013900:	468b      	mov	fp, r1
 8013902:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013906:	d0da      	beq.n	80138be <_strtod_l+0x516>
 8013908:	f1b8 0f1f 	cmp.w	r8, #31
 801390c:	dd20      	ble.n	8013950 <_strtod_l+0x5a8>
 801390e:	2400      	movs	r4, #0
 8013910:	46a0      	mov	r8, r4
 8013912:	9407      	str	r4, [sp, #28]
 8013914:	9405      	str	r4, [sp, #20]
 8013916:	2322      	movs	r3, #34	; 0x22
 8013918:	f04f 0a00 	mov.w	sl, #0
 801391c:	f04f 0b00 	mov.w	fp, #0
 8013920:	f8c9 3000 	str.w	r3, [r9]
 8013924:	e765      	b.n	80137f2 <_strtod_l+0x44a>
 8013926:	bf00      	nop
 8013928:	080166ca 	.word	0x080166ca
 801392c:	08016753 	.word	0x08016753
 8013930:	080166d2 	.word	0x080166d2
 8013934:	08016714 	.word	0x08016714
 8013938:	08016790 	.word	0x08016790
 801393c:	08016768 	.word	0x08016768
 8013940:	7ff00000 	.word	0x7ff00000
 8013944:	7ca00000 	.word	0x7ca00000
 8013948:	fff80000 	.word	0xfff80000
 801394c:	7fefffff 	.word	0x7fefffff
 8013950:	f018 0310 	ands.w	r3, r8, #16
 8013954:	bf18      	it	ne
 8013956:	236a      	movne	r3, #106	; 0x6a
 8013958:	4da0      	ldr	r5, [pc, #640]	; (8013bdc <_strtod_l+0x834>)
 801395a:	9304      	str	r3, [sp, #16]
 801395c:	4650      	mov	r0, sl
 801395e:	4659      	mov	r1, fp
 8013960:	2300      	movs	r3, #0
 8013962:	f1b8 0f00 	cmp.w	r8, #0
 8013966:	f300 810a 	bgt.w	8013b7e <_strtod_l+0x7d6>
 801396a:	b10b      	cbz	r3, 8013970 <_strtod_l+0x5c8>
 801396c:	4682      	mov	sl, r0
 801396e:	468b      	mov	fp, r1
 8013970:	9b04      	ldr	r3, [sp, #16]
 8013972:	b1bb      	cbz	r3, 80139a4 <_strtod_l+0x5fc>
 8013974:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013978:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801397c:	2b00      	cmp	r3, #0
 801397e:	4659      	mov	r1, fp
 8013980:	dd10      	ble.n	80139a4 <_strtod_l+0x5fc>
 8013982:	2b1f      	cmp	r3, #31
 8013984:	f340 8107 	ble.w	8013b96 <_strtod_l+0x7ee>
 8013988:	2b34      	cmp	r3, #52	; 0x34
 801398a:	bfde      	ittt	le
 801398c:	3b20      	suble	r3, #32
 801398e:	f04f 32ff 	movle.w	r2, #4294967295
 8013992:	fa02 f303 	lslle.w	r3, r2, r3
 8013996:	f04f 0a00 	mov.w	sl, #0
 801399a:	bfcc      	ite	gt
 801399c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80139a0:	ea03 0b01 	andle.w	fp, r3, r1
 80139a4:	2200      	movs	r2, #0
 80139a6:	2300      	movs	r3, #0
 80139a8:	4650      	mov	r0, sl
 80139aa:	4659      	mov	r1, fp
 80139ac:	f7f4 ffc4 	bl	8008938 <__aeabi_dcmpeq>
 80139b0:	2800      	cmp	r0, #0
 80139b2:	d1ac      	bne.n	801390e <_strtod_l+0x566>
 80139b4:	9b07      	ldr	r3, [sp, #28]
 80139b6:	9300      	str	r3, [sp, #0]
 80139b8:	9a05      	ldr	r2, [sp, #20]
 80139ba:	9908      	ldr	r1, [sp, #32]
 80139bc:	4623      	mov	r3, r4
 80139be:	4648      	mov	r0, r9
 80139c0:	f001 fed3 	bl	801576a <__s2b>
 80139c4:	9007      	str	r0, [sp, #28]
 80139c6:	2800      	cmp	r0, #0
 80139c8:	f43f af08 	beq.w	80137dc <_strtod_l+0x434>
 80139cc:	9a06      	ldr	r2, [sp, #24]
 80139ce:	9b06      	ldr	r3, [sp, #24]
 80139d0:	2a00      	cmp	r2, #0
 80139d2:	f1c3 0300 	rsb	r3, r3, #0
 80139d6:	bfa8      	it	ge
 80139d8:	2300      	movge	r3, #0
 80139da:	930e      	str	r3, [sp, #56]	; 0x38
 80139dc:	2400      	movs	r4, #0
 80139de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80139e2:	9316      	str	r3, [sp, #88]	; 0x58
 80139e4:	46a0      	mov	r8, r4
 80139e6:	9b07      	ldr	r3, [sp, #28]
 80139e8:	4648      	mov	r0, r9
 80139ea:	6859      	ldr	r1, [r3, #4]
 80139ec:	f001 fe37 	bl	801565e <_Balloc>
 80139f0:	9005      	str	r0, [sp, #20]
 80139f2:	2800      	cmp	r0, #0
 80139f4:	f43f aef6 	beq.w	80137e4 <_strtod_l+0x43c>
 80139f8:	9b07      	ldr	r3, [sp, #28]
 80139fa:	691a      	ldr	r2, [r3, #16]
 80139fc:	3202      	adds	r2, #2
 80139fe:	f103 010c 	add.w	r1, r3, #12
 8013a02:	0092      	lsls	r2, r2, #2
 8013a04:	300c      	adds	r0, #12
 8013a06:	f7fe fa0f 	bl	8011e28 <memcpy>
 8013a0a:	aa1e      	add	r2, sp, #120	; 0x78
 8013a0c:	a91d      	add	r1, sp, #116	; 0x74
 8013a0e:	ec4b ab10 	vmov	d0, sl, fp
 8013a12:	4648      	mov	r0, r9
 8013a14:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013a18:	f002 f962 	bl	8015ce0 <__d2b>
 8013a1c:	901c      	str	r0, [sp, #112]	; 0x70
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	f43f aee0 	beq.w	80137e4 <_strtod_l+0x43c>
 8013a24:	2101      	movs	r1, #1
 8013a26:	4648      	mov	r0, r9
 8013a28:	f001 ff2b 	bl	8015882 <__i2b>
 8013a2c:	4680      	mov	r8, r0
 8013a2e:	2800      	cmp	r0, #0
 8013a30:	f43f aed8 	beq.w	80137e4 <_strtod_l+0x43c>
 8013a34:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013a36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013a38:	2e00      	cmp	r6, #0
 8013a3a:	bfab      	itete	ge
 8013a3c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013a3e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013a40:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013a42:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013a44:	bfac      	ite	ge
 8013a46:	18f7      	addge	r7, r6, r3
 8013a48:	1b9d      	sublt	r5, r3, r6
 8013a4a:	9b04      	ldr	r3, [sp, #16]
 8013a4c:	1af6      	subs	r6, r6, r3
 8013a4e:	4416      	add	r6, r2
 8013a50:	4b63      	ldr	r3, [pc, #396]	; (8013be0 <_strtod_l+0x838>)
 8013a52:	3e01      	subs	r6, #1
 8013a54:	429e      	cmp	r6, r3
 8013a56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013a5a:	f280 80af 	bge.w	8013bbc <_strtod_l+0x814>
 8013a5e:	1b9b      	subs	r3, r3, r6
 8013a60:	2b1f      	cmp	r3, #31
 8013a62:	eba2 0203 	sub.w	r2, r2, r3
 8013a66:	f04f 0101 	mov.w	r1, #1
 8013a6a:	f300 809b 	bgt.w	8013ba4 <_strtod_l+0x7fc>
 8013a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8013a72:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a74:	2300      	movs	r3, #0
 8013a76:	930a      	str	r3, [sp, #40]	; 0x28
 8013a78:	18be      	adds	r6, r7, r2
 8013a7a:	9b04      	ldr	r3, [sp, #16]
 8013a7c:	42b7      	cmp	r7, r6
 8013a7e:	4415      	add	r5, r2
 8013a80:	441d      	add	r5, r3
 8013a82:	463b      	mov	r3, r7
 8013a84:	bfa8      	it	ge
 8013a86:	4633      	movge	r3, r6
 8013a88:	42ab      	cmp	r3, r5
 8013a8a:	bfa8      	it	ge
 8013a8c:	462b      	movge	r3, r5
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	bfc2      	ittt	gt
 8013a92:	1af6      	subgt	r6, r6, r3
 8013a94:	1aed      	subgt	r5, r5, r3
 8013a96:	1aff      	subgt	r7, r7, r3
 8013a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a9a:	b1bb      	cbz	r3, 8013acc <_strtod_l+0x724>
 8013a9c:	4641      	mov	r1, r8
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	4648      	mov	r0, r9
 8013aa2:	f001 ff8d 	bl	80159c0 <__pow5mult>
 8013aa6:	4680      	mov	r8, r0
 8013aa8:	2800      	cmp	r0, #0
 8013aaa:	f43f ae9b 	beq.w	80137e4 <_strtod_l+0x43c>
 8013aae:	4601      	mov	r1, r0
 8013ab0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013ab2:	4648      	mov	r0, r9
 8013ab4:	f001 feee 	bl	8015894 <__multiply>
 8013ab8:	900c      	str	r0, [sp, #48]	; 0x30
 8013aba:	2800      	cmp	r0, #0
 8013abc:	f43f ae92 	beq.w	80137e4 <_strtod_l+0x43c>
 8013ac0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013ac2:	4648      	mov	r0, r9
 8013ac4:	f001 fdff 	bl	80156c6 <_Bfree>
 8013ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013aca:	931c      	str	r3, [sp, #112]	; 0x70
 8013acc:	2e00      	cmp	r6, #0
 8013ace:	dc7a      	bgt.n	8013bc6 <_strtod_l+0x81e>
 8013ad0:	9b06      	ldr	r3, [sp, #24]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	dd08      	ble.n	8013ae8 <_strtod_l+0x740>
 8013ad6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013ad8:	9905      	ldr	r1, [sp, #20]
 8013ada:	4648      	mov	r0, r9
 8013adc:	f001 ff70 	bl	80159c0 <__pow5mult>
 8013ae0:	9005      	str	r0, [sp, #20]
 8013ae2:	2800      	cmp	r0, #0
 8013ae4:	f43f ae7e 	beq.w	80137e4 <_strtod_l+0x43c>
 8013ae8:	2d00      	cmp	r5, #0
 8013aea:	dd08      	ble.n	8013afe <_strtod_l+0x756>
 8013aec:	462a      	mov	r2, r5
 8013aee:	9905      	ldr	r1, [sp, #20]
 8013af0:	4648      	mov	r0, r9
 8013af2:	f001 ffb3 	bl	8015a5c <__lshift>
 8013af6:	9005      	str	r0, [sp, #20]
 8013af8:	2800      	cmp	r0, #0
 8013afa:	f43f ae73 	beq.w	80137e4 <_strtod_l+0x43c>
 8013afe:	2f00      	cmp	r7, #0
 8013b00:	dd08      	ble.n	8013b14 <_strtod_l+0x76c>
 8013b02:	4641      	mov	r1, r8
 8013b04:	463a      	mov	r2, r7
 8013b06:	4648      	mov	r0, r9
 8013b08:	f001 ffa8 	bl	8015a5c <__lshift>
 8013b0c:	4680      	mov	r8, r0
 8013b0e:	2800      	cmp	r0, #0
 8013b10:	f43f ae68 	beq.w	80137e4 <_strtod_l+0x43c>
 8013b14:	9a05      	ldr	r2, [sp, #20]
 8013b16:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013b18:	4648      	mov	r0, r9
 8013b1a:	f002 f80d 	bl	8015b38 <__mdiff>
 8013b1e:	4604      	mov	r4, r0
 8013b20:	2800      	cmp	r0, #0
 8013b22:	f43f ae5f 	beq.w	80137e4 <_strtod_l+0x43c>
 8013b26:	68c3      	ldr	r3, [r0, #12]
 8013b28:	930c      	str	r3, [sp, #48]	; 0x30
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	60c3      	str	r3, [r0, #12]
 8013b2e:	4641      	mov	r1, r8
 8013b30:	f001 ffe8 	bl	8015b04 <__mcmp>
 8013b34:	2800      	cmp	r0, #0
 8013b36:	da55      	bge.n	8013be4 <_strtod_l+0x83c>
 8013b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b3a:	b9e3      	cbnz	r3, 8013b76 <_strtod_l+0x7ce>
 8013b3c:	f1ba 0f00 	cmp.w	sl, #0
 8013b40:	d119      	bne.n	8013b76 <_strtod_l+0x7ce>
 8013b42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013b46:	b9b3      	cbnz	r3, 8013b76 <_strtod_l+0x7ce>
 8013b48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013b4c:	0d1b      	lsrs	r3, r3, #20
 8013b4e:	051b      	lsls	r3, r3, #20
 8013b50:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013b54:	d90f      	bls.n	8013b76 <_strtod_l+0x7ce>
 8013b56:	6963      	ldr	r3, [r4, #20]
 8013b58:	b913      	cbnz	r3, 8013b60 <_strtod_l+0x7b8>
 8013b5a:	6923      	ldr	r3, [r4, #16]
 8013b5c:	2b01      	cmp	r3, #1
 8013b5e:	dd0a      	ble.n	8013b76 <_strtod_l+0x7ce>
 8013b60:	4621      	mov	r1, r4
 8013b62:	2201      	movs	r2, #1
 8013b64:	4648      	mov	r0, r9
 8013b66:	f001 ff79 	bl	8015a5c <__lshift>
 8013b6a:	4641      	mov	r1, r8
 8013b6c:	4604      	mov	r4, r0
 8013b6e:	f001 ffc9 	bl	8015b04 <__mcmp>
 8013b72:	2800      	cmp	r0, #0
 8013b74:	dc67      	bgt.n	8013c46 <_strtod_l+0x89e>
 8013b76:	9b04      	ldr	r3, [sp, #16]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d171      	bne.n	8013c60 <_strtod_l+0x8b8>
 8013b7c:	e63d      	b.n	80137fa <_strtod_l+0x452>
 8013b7e:	f018 0f01 	tst.w	r8, #1
 8013b82:	d004      	beq.n	8013b8e <_strtod_l+0x7e6>
 8013b84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b88:	f7f4 fc6e 	bl	8008468 <__aeabi_dmul>
 8013b8c:	2301      	movs	r3, #1
 8013b8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013b92:	3508      	adds	r5, #8
 8013b94:	e6e5      	b.n	8013962 <_strtod_l+0x5ba>
 8013b96:	f04f 32ff 	mov.w	r2, #4294967295
 8013b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8013b9e:	ea03 0a0a 	and.w	sl, r3, sl
 8013ba2:	e6ff      	b.n	80139a4 <_strtod_l+0x5fc>
 8013ba4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013ba8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013bac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013bb0:	36e2      	adds	r6, #226	; 0xe2
 8013bb2:	fa01 f306 	lsl.w	r3, r1, r6
 8013bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8013bb8:	910f      	str	r1, [sp, #60]	; 0x3c
 8013bba:	e75d      	b.n	8013a78 <_strtod_l+0x6d0>
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8013bc0:	2301      	movs	r3, #1
 8013bc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8013bc4:	e758      	b.n	8013a78 <_strtod_l+0x6d0>
 8013bc6:	4632      	mov	r2, r6
 8013bc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013bca:	4648      	mov	r0, r9
 8013bcc:	f001 ff46 	bl	8015a5c <__lshift>
 8013bd0:	901c      	str	r0, [sp, #112]	; 0x70
 8013bd2:	2800      	cmp	r0, #0
 8013bd4:	f47f af7c 	bne.w	8013ad0 <_strtod_l+0x728>
 8013bd8:	e604      	b.n	80137e4 <_strtod_l+0x43c>
 8013bda:	bf00      	nop
 8013bdc:	08016728 	.word	0x08016728
 8013be0:	fffffc02 	.word	0xfffffc02
 8013be4:	465d      	mov	r5, fp
 8013be6:	f040 8086 	bne.w	8013cf6 <_strtod_l+0x94e>
 8013bea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013bf0:	b32a      	cbz	r2, 8013c3e <_strtod_l+0x896>
 8013bf2:	4aaf      	ldr	r2, [pc, #700]	; (8013eb0 <_strtod_l+0xb08>)
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d153      	bne.n	8013ca0 <_strtod_l+0x8f8>
 8013bf8:	9b04      	ldr	r3, [sp, #16]
 8013bfa:	4650      	mov	r0, sl
 8013bfc:	b1d3      	cbz	r3, 8013c34 <_strtod_l+0x88c>
 8013bfe:	4aad      	ldr	r2, [pc, #692]	; (8013eb4 <_strtod_l+0xb0c>)
 8013c00:	402a      	ands	r2, r5
 8013c02:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013c06:	f04f 31ff 	mov.w	r1, #4294967295
 8013c0a:	d816      	bhi.n	8013c3a <_strtod_l+0x892>
 8013c0c:	0d12      	lsrs	r2, r2, #20
 8013c0e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013c12:	fa01 f303 	lsl.w	r3, r1, r3
 8013c16:	4298      	cmp	r0, r3
 8013c18:	d142      	bne.n	8013ca0 <_strtod_l+0x8f8>
 8013c1a:	4ba7      	ldr	r3, [pc, #668]	; (8013eb8 <_strtod_l+0xb10>)
 8013c1c:	429d      	cmp	r5, r3
 8013c1e:	d102      	bne.n	8013c26 <_strtod_l+0x87e>
 8013c20:	3001      	adds	r0, #1
 8013c22:	f43f addf 	beq.w	80137e4 <_strtod_l+0x43c>
 8013c26:	4ba3      	ldr	r3, [pc, #652]	; (8013eb4 <_strtod_l+0xb0c>)
 8013c28:	402b      	ands	r3, r5
 8013c2a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013c2e:	f04f 0a00 	mov.w	sl, #0
 8013c32:	e7a0      	b.n	8013b76 <_strtod_l+0x7ce>
 8013c34:	f04f 33ff 	mov.w	r3, #4294967295
 8013c38:	e7ed      	b.n	8013c16 <_strtod_l+0x86e>
 8013c3a:	460b      	mov	r3, r1
 8013c3c:	e7eb      	b.n	8013c16 <_strtod_l+0x86e>
 8013c3e:	bb7b      	cbnz	r3, 8013ca0 <_strtod_l+0x8f8>
 8013c40:	f1ba 0f00 	cmp.w	sl, #0
 8013c44:	d12c      	bne.n	8013ca0 <_strtod_l+0x8f8>
 8013c46:	9904      	ldr	r1, [sp, #16]
 8013c48:	4a9a      	ldr	r2, [pc, #616]	; (8013eb4 <_strtod_l+0xb0c>)
 8013c4a:	465b      	mov	r3, fp
 8013c4c:	b1f1      	cbz	r1, 8013c8c <_strtod_l+0x8e4>
 8013c4e:	ea02 010b 	and.w	r1, r2, fp
 8013c52:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013c56:	dc19      	bgt.n	8013c8c <_strtod_l+0x8e4>
 8013c58:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013c5c:	f77f ae5b 	ble.w	8013916 <_strtod_l+0x56e>
 8013c60:	4a96      	ldr	r2, [pc, #600]	; (8013ebc <_strtod_l+0xb14>)
 8013c62:	2300      	movs	r3, #0
 8013c64:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013c68:	4650      	mov	r0, sl
 8013c6a:	4659      	mov	r1, fp
 8013c6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013c70:	f7f4 fbfa 	bl	8008468 <__aeabi_dmul>
 8013c74:	4682      	mov	sl, r0
 8013c76:	468b      	mov	fp, r1
 8013c78:	2900      	cmp	r1, #0
 8013c7a:	f47f adbe 	bne.w	80137fa <_strtod_l+0x452>
 8013c7e:	2800      	cmp	r0, #0
 8013c80:	f47f adbb 	bne.w	80137fa <_strtod_l+0x452>
 8013c84:	2322      	movs	r3, #34	; 0x22
 8013c86:	f8c9 3000 	str.w	r3, [r9]
 8013c8a:	e5b6      	b.n	80137fa <_strtod_l+0x452>
 8013c8c:	4013      	ands	r3, r2
 8013c8e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013c92:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013c96:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013c9a:	f04f 3aff 	mov.w	sl, #4294967295
 8013c9e:	e76a      	b.n	8013b76 <_strtod_l+0x7ce>
 8013ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ca2:	b193      	cbz	r3, 8013cca <_strtod_l+0x922>
 8013ca4:	422b      	tst	r3, r5
 8013ca6:	f43f af66 	beq.w	8013b76 <_strtod_l+0x7ce>
 8013caa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cac:	9a04      	ldr	r2, [sp, #16]
 8013cae:	4650      	mov	r0, sl
 8013cb0:	4659      	mov	r1, fp
 8013cb2:	b173      	cbz	r3, 8013cd2 <_strtod_l+0x92a>
 8013cb4:	f7ff fb5b 	bl	801336e <sulp>
 8013cb8:	4602      	mov	r2, r0
 8013cba:	460b      	mov	r3, r1
 8013cbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013cc0:	f7f4 fa1c 	bl	80080fc <__adddf3>
 8013cc4:	4682      	mov	sl, r0
 8013cc6:	468b      	mov	fp, r1
 8013cc8:	e755      	b.n	8013b76 <_strtod_l+0x7ce>
 8013cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ccc:	ea13 0f0a 	tst.w	r3, sl
 8013cd0:	e7e9      	b.n	8013ca6 <_strtod_l+0x8fe>
 8013cd2:	f7ff fb4c 	bl	801336e <sulp>
 8013cd6:	4602      	mov	r2, r0
 8013cd8:	460b      	mov	r3, r1
 8013cda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013cde:	f7f4 fa0b 	bl	80080f8 <__aeabi_dsub>
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	4682      	mov	sl, r0
 8013ce8:	468b      	mov	fp, r1
 8013cea:	f7f4 fe25 	bl	8008938 <__aeabi_dcmpeq>
 8013cee:	2800      	cmp	r0, #0
 8013cf0:	f47f ae11 	bne.w	8013916 <_strtod_l+0x56e>
 8013cf4:	e73f      	b.n	8013b76 <_strtod_l+0x7ce>
 8013cf6:	4641      	mov	r1, r8
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	f002 f840 	bl	8015d7e <__ratio>
 8013cfe:	ec57 6b10 	vmov	r6, r7, d0
 8013d02:	2200      	movs	r2, #0
 8013d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013d08:	ee10 0a10 	vmov	r0, s0
 8013d0c:	4639      	mov	r1, r7
 8013d0e:	f7f4 fe27 	bl	8008960 <__aeabi_dcmple>
 8013d12:	2800      	cmp	r0, #0
 8013d14:	d077      	beq.n	8013e06 <_strtod_l+0xa5e>
 8013d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d04a      	beq.n	8013db2 <_strtod_l+0xa0a>
 8013d1c:	4b68      	ldr	r3, [pc, #416]	; (8013ec0 <_strtod_l+0xb18>)
 8013d1e:	2200      	movs	r2, #0
 8013d20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013d24:	4f66      	ldr	r7, [pc, #408]	; (8013ec0 <_strtod_l+0xb18>)
 8013d26:	2600      	movs	r6, #0
 8013d28:	4b62      	ldr	r3, [pc, #392]	; (8013eb4 <_strtod_l+0xb0c>)
 8013d2a:	402b      	ands	r3, r5
 8013d2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013d30:	4b64      	ldr	r3, [pc, #400]	; (8013ec4 <_strtod_l+0xb1c>)
 8013d32:	429a      	cmp	r2, r3
 8013d34:	f040 80ce 	bne.w	8013ed4 <_strtod_l+0xb2c>
 8013d38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013d3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013d40:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8013d44:	ec4b ab10 	vmov	d0, sl, fp
 8013d48:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8013d4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013d50:	f001 ff50 	bl	8015bf4 <__ulp>
 8013d54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013d58:	ec53 2b10 	vmov	r2, r3, d0
 8013d5c:	f7f4 fb84 	bl	8008468 <__aeabi_dmul>
 8013d60:	4652      	mov	r2, sl
 8013d62:	465b      	mov	r3, fp
 8013d64:	f7f4 f9ca 	bl	80080fc <__adddf3>
 8013d68:	460b      	mov	r3, r1
 8013d6a:	4952      	ldr	r1, [pc, #328]	; (8013eb4 <_strtod_l+0xb0c>)
 8013d6c:	4a56      	ldr	r2, [pc, #344]	; (8013ec8 <_strtod_l+0xb20>)
 8013d6e:	4019      	ands	r1, r3
 8013d70:	4291      	cmp	r1, r2
 8013d72:	4682      	mov	sl, r0
 8013d74:	d95b      	bls.n	8013e2e <_strtod_l+0xa86>
 8013d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d78:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013d7c:	4293      	cmp	r3, r2
 8013d7e:	d103      	bne.n	8013d88 <_strtod_l+0x9e0>
 8013d80:	9b08      	ldr	r3, [sp, #32]
 8013d82:	3301      	adds	r3, #1
 8013d84:	f43f ad2e 	beq.w	80137e4 <_strtod_l+0x43c>
 8013d88:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8013eb8 <_strtod_l+0xb10>
 8013d8c:	f04f 3aff 	mov.w	sl, #4294967295
 8013d90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013d92:	4648      	mov	r0, r9
 8013d94:	f001 fc97 	bl	80156c6 <_Bfree>
 8013d98:	9905      	ldr	r1, [sp, #20]
 8013d9a:	4648      	mov	r0, r9
 8013d9c:	f001 fc93 	bl	80156c6 <_Bfree>
 8013da0:	4641      	mov	r1, r8
 8013da2:	4648      	mov	r0, r9
 8013da4:	f001 fc8f 	bl	80156c6 <_Bfree>
 8013da8:	4621      	mov	r1, r4
 8013daa:	4648      	mov	r0, r9
 8013dac:	f001 fc8b 	bl	80156c6 <_Bfree>
 8013db0:	e619      	b.n	80139e6 <_strtod_l+0x63e>
 8013db2:	f1ba 0f00 	cmp.w	sl, #0
 8013db6:	d11a      	bne.n	8013dee <_strtod_l+0xa46>
 8013db8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013dbc:	b9eb      	cbnz	r3, 8013dfa <_strtod_l+0xa52>
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	4b3f      	ldr	r3, [pc, #252]	; (8013ec0 <_strtod_l+0xb18>)
 8013dc2:	4630      	mov	r0, r6
 8013dc4:	4639      	mov	r1, r7
 8013dc6:	f7f4 fdc1 	bl	800894c <__aeabi_dcmplt>
 8013dca:	b9c8      	cbnz	r0, 8013e00 <_strtod_l+0xa58>
 8013dcc:	4630      	mov	r0, r6
 8013dce:	4639      	mov	r1, r7
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	4b3e      	ldr	r3, [pc, #248]	; (8013ecc <_strtod_l+0xb24>)
 8013dd4:	f7f4 fb48 	bl	8008468 <__aeabi_dmul>
 8013dd8:	4606      	mov	r6, r0
 8013dda:	460f      	mov	r7, r1
 8013ddc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013de0:	9618      	str	r6, [sp, #96]	; 0x60
 8013de2:	9319      	str	r3, [sp, #100]	; 0x64
 8013de4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8013de8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013dec:	e79c      	b.n	8013d28 <_strtod_l+0x980>
 8013dee:	f1ba 0f01 	cmp.w	sl, #1
 8013df2:	d102      	bne.n	8013dfa <_strtod_l+0xa52>
 8013df4:	2d00      	cmp	r5, #0
 8013df6:	f43f ad8e 	beq.w	8013916 <_strtod_l+0x56e>
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	4b34      	ldr	r3, [pc, #208]	; (8013ed0 <_strtod_l+0xb28>)
 8013dfe:	e78f      	b.n	8013d20 <_strtod_l+0x978>
 8013e00:	2600      	movs	r6, #0
 8013e02:	4f32      	ldr	r7, [pc, #200]	; (8013ecc <_strtod_l+0xb24>)
 8013e04:	e7ea      	b.n	8013ddc <_strtod_l+0xa34>
 8013e06:	4b31      	ldr	r3, [pc, #196]	; (8013ecc <_strtod_l+0xb24>)
 8013e08:	4630      	mov	r0, r6
 8013e0a:	4639      	mov	r1, r7
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	f7f4 fb2b 	bl	8008468 <__aeabi_dmul>
 8013e12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e14:	4606      	mov	r6, r0
 8013e16:	460f      	mov	r7, r1
 8013e18:	b933      	cbnz	r3, 8013e28 <_strtod_l+0xa80>
 8013e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e1e:	9010      	str	r0, [sp, #64]	; 0x40
 8013e20:	9311      	str	r3, [sp, #68]	; 0x44
 8013e22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013e26:	e7df      	b.n	8013de8 <_strtod_l+0xa40>
 8013e28:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013e2c:	e7f9      	b.n	8013e22 <_strtod_l+0xa7a>
 8013e2e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013e32:	9b04      	ldr	r3, [sp, #16]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d1ab      	bne.n	8013d90 <_strtod_l+0x9e8>
 8013e38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013e3c:	0d1b      	lsrs	r3, r3, #20
 8013e3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013e40:	051b      	lsls	r3, r3, #20
 8013e42:	429a      	cmp	r2, r3
 8013e44:	465d      	mov	r5, fp
 8013e46:	d1a3      	bne.n	8013d90 <_strtod_l+0x9e8>
 8013e48:	4639      	mov	r1, r7
 8013e4a:	4630      	mov	r0, r6
 8013e4c:	f7f4 fdbc 	bl	80089c8 <__aeabi_d2iz>
 8013e50:	f7f4 faa0 	bl	8008394 <__aeabi_i2d>
 8013e54:	460b      	mov	r3, r1
 8013e56:	4602      	mov	r2, r0
 8013e58:	4639      	mov	r1, r7
 8013e5a:	4630      	mov	r0, r6
 8013e5c:	f7f4 f94c 	bl	80080f8 <__aeabi_dsub>
 8013e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e62:	4606      	mov	r6, r0
 8013e64:	460f      	mov	r7, r1
 8013e66:	b933      	cbnz	r3, 8013e76 <_strtod_l+0xace>
 8013e68:	f1ba 0f00 	cmp.w	sl, #0
 8013e6c:	d103      	bne.n	8013e76 <_strtod_l+0xace>
 8013e6e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8013e72:	2d00      	cmp	r5, #0
 8013e74:	d06d      	beq.n	8013f52 <_strtod_l+0xbaa>
 8013e76:	a30a      	add	r3, pc, #40	; (adr r3, 8013ea0 <_strtod_l+0xaf8>)
 8013e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	4639      	mov	r1, r7
 8013e80:	f7f4 fd64 	bl	800894c <__aeabi_dcmplt>
 8013e84:	2800      	cmp	r0, #0
 8013e86:	f47f acb8 	bne.w	80137fa <_strtod_l+0x452>
 8013e8a:	a307      	add	r3, pc, #28	; (adr r3, 8013ea8 <_strtod_l+0xb00>)
 8013e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e90:	4630      	mov	r0, r6
 8013e92:	4639      	mov	r1, r7
 8013e94:	f7f4 fd78 	bl	8008988 <__aeabi_dcmpgt>
 8013e98:	2800      	cmp	r0, #0
 8013e9a:	f43f af79 	beq.w	8013d90 <_strtod_l+0x9e8>
 8013e9e:	e4ac      	b.n	80137fa <_strtod_l+0x452>
 8013ea0:	94a03595 	.word	0x94a03595
 8013ea4:	3fdfffff 	.word	0x3fdfffff
 8013ea8:	35afe535 	.word	0x35afe535
 8013eac:	3fe00000 	.word	0x3fe00000
 8013eb0:	000fffff 	.word	0x000fffff
 8013eb4:	7ff00000 	.word	0x7ff00000
 8013eb8:	7fefffff 	.word	0x7fefffff
 8013ebc:	39500000 	.word	0x39500000
 8013ec0:	3ff00000 	.word	0x3ff00000
 8013ec4:	7fe00000 	.word	0x7fe00000
 8013ec8:	7c9fffff 	.word	0x7c9fffff
 8013ecc:	3fe00000 	.word	0x3fe00000
 8013ed0:	bff00000 	.word	0xbff00000
 8013ed4:	9b04      	ldr	r3, [sp, #16]
 8013ed6:	b333      	cbz	r3, 8013f26 <_strtod_l+0xb7e>
 8013ed8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013eda:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013ede:	d822      	bhi.n	8013f26 <_strtod_l+0xb7e>
 8013ee0:	a327      	add	r3, pc, #156	; (adr r3, 8013f80 <_strtod_l+0xbd8>)
 8013ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ee6:	4630      	mov	r0, r6
 8013ee8:	4639      	mov	r1, r7
 8013eea:	f7f4 fd39 	bl	8008960 <__aeabi_dcmple>
 8013eee:	b1a0      	cbz	r0, 8013f1a <_strtod_l+0xb72>
 8013ef0:	4639      	mov	r1, r7
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	f7f4 fd90 	bl	8008a18 <__aeabi_d2uiz>
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	bf08      	it	eq
 8013efc:	2001      	moveq	r0, #1
 8013efe:	f7f4 fa39 	bl	8008374 <__aeabi_ui2d>
 8013f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f04:	4606      	mov	r6, r0
 8013f06:	460f      	mov	r7, r1
 8013f08:	bb03      	cbnz	r3, 8013f4c <_strtod_l+0xba4>
 8013f0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f0e:	9012      	str	r0, [sp, #72]	; 0x48
 8013f10:	9313      	str	r3, [sp, #76]	; 0x4c
 8013f12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013f16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f1e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013f22:	1a9b      	subs	r3, r3, r2
 8013f24:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f26:	ed9d 0b08 	vldr	d0, [sp, #32]
 8013f2a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8013f2e:	f001 fe61 	bl	8015bf4 <__ulp>
 8013f32:	4650      	mov	r0, sl
 8013f34:	ec53 2b10 	vmov	r2, r3, d0
 8013f38:	4659      	mov	r1, fp
 8013f3a:	f7f4 fa95 	bl	8008468 <__aeabi_dmul>
 8013f3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013f42:	f7f4 f8db 	bl	80080fc <__adddf3>
 8013f46:	4682      	mov	sl, r0
 8013f48:	468b      	mov	fp, r1
 8013f4a:	e772      	b.n	8013e32 <_strtod_l+0xa8a>
 8013f4c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8013f50:	e7df      	b.n	8013f12 <_strtod_l+0xb6a>
 8013f52:	a30d      	add	r3, pc, #52	; (adr r3, 8013f88 <_strtod_l+0xbe0>)
 8013f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f58:	f7f4 fcf8 	bl	800894c <__aeabi_dcmplt>
 8013f5c:	e79c      	b.n	8013e98 <_strtod_l+0xaf0>
 8013f5e:	2300      	movs	r3, #0
 8013f60:	930d      	str	r3, [sp, #52]	; 0x34
 8013f62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013f64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013f66:	6013      	str	r3, [r2, #0]
 8013f68:	f7ff ba61 	b.w	801342e <_strtod_l+0x86>
 8013f6c:	2b65      	cmp	r3, #101	; 0x65
 8013f6e:	f04f 0200 	mov.w	r2, #0
 8013f72:	f43f ab4e 	beq.w	8013612 <_strtod_l+0x26a>
 8013f76:	2101      	movs	r1, #1
 8013f78:	4614      	mov	r4, r2
 8013f7a:	9104      	str	r1, [sp, #16]
 8013f7c:	f7ff bacb 	b.w	8013516 <_strtod_l+0x16e>
 8013f80:	ffc00000 	.word	0xffc00000
 8013f84:	41dfffff 	.word	0x41dfffff
 8013f88:	94a03595 	.word	0x94a03595
 8013f8c:	3fcfffff 	.word	0x3fcfffff

08013f90 <_strtod_r>:
 8013f90:	4b05      	ldr	r3, [pc, #20]	; (8013fa8 <_strtod_r+0x18>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	b410      	push	{r4}
 8013f96:	6a1b      	ldr	r3, [r3, #32]
 8013f98:	4c04      	ldr	r4, [pc, #16]	; (8013fac <_strtod_r+0x1c>)
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	bf08      	it	eq
 8013f9e:	4623      	moveq	r3, r4
 8013fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fa4:	f7ff ba00 	b.w	80133a8 <_strtod_l>
 8013fa8:	20000018 	.word	0x20000018
 8013fac:	2000007c 	.word	0x2000007c

08013fb0 <_strtol_l.isra.0>:
 8013fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fb4:	4680      	mov	r8, r0
 8013fb6:	4689      	mov	r9, r1
 8013fb8:	4692      	mov	sl, r2
 8013fba:	461e      	mov	r6, r3
 8013fbc:	460f      	mov	r7, r1
 8013fbe:	463d      	mov	r5, r7
 8013fc0:	9808      	ldr	r0, [sp, #32]
 8013fc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013fc6:	f001 faef 	bl	80155a8 <__locale_ctype_ptr_l>
 8013fca:	4420      	add	r0, r4
 8013fcc:	7843      	ldrb	r3, [r0, #1]
 8013fce:	f013 0308 	ands.w	r3, r3, #8
 8013fd2:	d132      	bne.n	801403a <_strtol_l.isra.0+0x8a>
 8013fd4:	2c2d      	cmp	r4, #45	; 0x2d
 8013fd6:	d132      	bne.n	801403e <_strtol_l.isra.0+0x8e>
 8013fd8:	787c      	ldrb	r4, [r7, #1]
 8013fda:	1cbd      	adds	r5, r7, #2
 8013fdc:	2201      	movs	r2, #1
 8013fde:	2e00      	cmp	r6, #0
 8013fe0:	d05d      	beq.n	801409e <_strtol_l.isra.0+0xee>
 8013fe2:	2e10      	cmp	r6, #16
 8013fe4:	d109      	bne.n	8013ffa <_strtol_l.isra.0+0x4a>
 8013fe6:	2c30      	cmp	r4, #48	; 0x30
 8013fe8:	d107      	bne.n	8013ffa <_strtol_l.isra.0+0x4a>
 8013fea:	782b      	ldrb	r3, [r5, #0]
 8013fec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013ff0:	2b58      	cmp	r3, #88	; 0x58
 8013ff2:	d14f      	bne.n	8014094 <_strtol_l.isra.0+0xe4>
 8013ff4:	786c      	ldrb	r4, [r5, #1]
 8013ff6:	2610      	movs	r6, #16
 8013ff8:	3502      	adds	r5, #2
 8013ffa:	2a00      	cmp	r2, #0
 8013ffc:	bf14      	ite	ne
 8013ffe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014002:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014006:	2700      	movs	r7, #0
 8014008:	fbb1 fcf6 	udiv	ip, r1, r6
 801400c:	4638      	mov	r0, r7
 801400e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014012:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014016:	2b09      	cmp	r3, #9
 8014018:	d817      	bhi.n	801404a <_strtol_l.isra.0+0x9a>
 801401a:	461c      	mov	r4, r3
 801401c:	42a6      	cmp	r6, r4
 801401e:	dd23      	ble.n	8014068 <_strtol_l.isra.0+0xb8>
 8014020:	1c7b      	adds	r3, r7, #1
 8014022:	d007      	beq.n	8014034 <_strtol_l.isra.0+0x84>
 8014024:	4584      	cmp	ip, r0
 8014026:	d31c      	bcc.n	8014062 <_strtol_l.isra.0+0xb2>
 8014028:	d101      	bne.n	801402e <_strtol_l.isra.0+0x7e>
 801402a:	45a6      	cmp	lr, r4
 801402c:	db19      	blt.n	8014062 <_strtol_l.isra.0+0xb2>
 801402e:	fb00 4006 	mla	r0, r0, r6, r4
 8014032:	2701      	movs	r7, #1
 8014034:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014038:	e7eb      	b.n	8014012 <_strtol_l.isra.0+0x62>
 801403a:	462f      	mov	r7, r5
 801403c:	e7bf      	b.n	8013fbe <_strtol_l.isra.0+0xe>
 801403e:	2c2b      	cmp	r4, #43	; 0x2b
 8014040:	bf04      	itt	eq
 8014042:	1cbd      	addeq	r5, r7, #2
 8014044:	787c      	ldrbeq	r4, [r7, #1]
 8014046:	461a      	mov	r2, r3
 8014048:	e7c9      	b.n	8013fde <_strtol_l.isra.0+0x2e>
 801404a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801404e:	2b19      	cmp	r3, #25
 8014050:	d801      	bhi.n	8014056 <_strtol_l.isra.0+0xa6>
 8014052:	3c37      	subs	r4, #55	; 0x37
 8014054:	e7e2      	b.n	801401c <_strtol_l.isra.0+0x6c>
 8014056:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801405a:	2b19      	cmp	r3, #25
 801405c:	d804      	bhi.n	8014068 <_strtol_l.isra.0+0xb8>
 801405e:	3c57      	subs	r4, #87	; 0x57
 8014060:	e7dc      	b.n	801401c <_strtol_l.isra.0+0x6c>
 8014062:	f04f 37ff 	mov.w	r7, #4294967295
 8014066:	e7e5      	b.n	8014034 <_strtol_l.isra.0+0x84>
 8014068:	1c7b      	adds	r3, r7, #1
 801406a:	d108      	bne.n	801407e <_strtol_l.isra.0+0xce>
 801406c:	2322      	movs	r3, #34	; 0x22
 801406e:	f8c8 3000 	str.w	r3, [r8]
 8014072:	4608      	mov	r0, r1
 8014074:	f1ba 0f00 	cmp.w	sl, #0
 8014078:	d107      	bne.n	801408a <_strtol_l.isra.0+0xda>
 801407a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801407e:	b102      	cbz	r2, 8014082 <_strtol_l.isra.0+0xd2>
 8014080:	4240      	negs	r0, r0
 8014082:	f1ba 0f00 	cmp.w	sl, #0
 8014086:	d0f8      	beq.n	801407a <_strtol_l.isra.0+0xca>
 8014088:	b10f      	cbz	r7, 801408e <_strtol_l.isra.0+0xde>
 801408a:	f105 39ff 	add.w	r9, r5, #4294967295
 801408e:	f8ca 9000 	str.w	r9, [sl]
 8014092:	e7f2      	b.n	801407a <_strtol_l.isra.0+0xca>
 8014094:	2430      	movs	r4, #48	; 0x30
 8014096:	2e00      	cmp	r6, #0
 8014098:	d1af      	bne.n	8013ffa <_strtol_l.isra.0+0x4a>
 801409a:	2608      	movs	r6, #8
 801409c:	e7ad      	b.n	8013ffa <_strtol_l.isra.0+0x4a>
 801409e:	2c30      	cmp	r4, #48	; 0x30
 80140a0:	d0a3      	beq.n	8013fea <_strtol_l.isra.0+0x3a>
 80140a2:	260a      	movs	r6, #10
 80140a4:	e7a9      	b.n	8013ffa <_strtol_l.isra.0+0x4a>
	...

080140a8 <_strtol_r>:
 80140a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80140aa:	4c06      	ldr	r4, [pc, #24]	; (80140c4 <_strtol_r+0x1c>)
 80140ac:	4d06      	ldr	r5, [pc, #24]	; (80140c8 <_strtol_r+0x20>)
 80140ae:	6824      	ldr	r4, [r4, #0]
 80140b0:	6a24      	ldr	r4, [r4, #32]
 80140b2:	2c00      	cmp	r4, #0
 80140b4:	bf08      	it	eq
 80140b6:	462c      	moveq	r4, r5
 80140b8:	9400      	str	r4, [sp, #0]
 80140ba:	f7ff ff79 	bl	8013fb0 <_strtol_l.isra.0>
 80140be:	b003      	add	sp, #12
 80140c0:	bd30      	pop	{r4, r5, pc}
 80140c2:	bf00      	nop
 80140c4:	20000018 	.word	0x20000018
 80140c8:	2000007c 	.word	0x2000007c

080140cc <__swbuf_r>:
 80140cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ce:	460e      	mov	r6, r1
 80140d0:	4614      	mov	r4, r2
 80140d2:	4605      	mov	r5, r0
 80140d4:	b118      	cbz	r0, 80140de <__swbuf_r+0x12>
 80140d6:	6983      	ldr	r3, [r0, #24]
 80140d8:	b90b      	cbnz	r3, 80140de <__swbuf_r+0x12>
 80140da:	f7fd fd93 	bl	8011c04 <__sinit>
 80140de:	4b21      	ldr	r3, [pc, #132]	; (8014164 <__swbuf_r+0x98>)
 80140e0:	429c      	cmp	r4, r3
 80140e2:	d12a      	bne.n	801413a <__swbuf_r+0x6e>
 80140e4:	686c      	ldr	r4, [r5, #4]
 80140e6:	69a3      	ldr	r3, [r4, #24]
 80140e8:	60a3      	str	r3, [r4, #8]
 80140ea:	89a3      	ldrh	r3, [r4, #12]
 80140ec:	071a      	lsls	r2, r3, #28
 80140ee:	d52e      	bpl.n	801414e <__swbuf_r+0x82>
 80140f0:	6923      	ldr	r3, [r4, #16]
 80140f2:	b363      	cbz	r3, 801414e <__swbuf_r+0x82>
 80140f4:	6923      	ldr	r3, [r4, #16]
 80140f6:	6820      	ldr	r0, [r4, #0]
 80140f8:	1ac0      	subs	r0, r0, r3
 80140fa:	6963      	ldr	r3, [r4, #20]
 80140fc:	b2f6      	uxtb	r6, r6
 80140fe:	4283      	cmp	r3, r0
 8014100:	4637      	mov	r7, r6
 8014102:	dc04      	bgt.n	801410e <__swbuf_r+0x42>
 8014104:	4621      	mov	r1, r4
 8014106:	4628      	mov	r0, r5
 8014108:	f7fd fd12 	bl	8011b30 <_fflush_r>
 801410c:	bb28      	cbnz	r0, 801415a <__swbuf_r+0x8e>
 801410e:	68a3      	ldr	r3, [r4, #8]
 8014110:	3b01      	subs	r3, #1
 8014112:	60a3      	str	r3, [r4, #8]
 8014114:	6823      	ldr	r3, [r4, #0]
 8014116:	1c5a      	adds	r2, r3, #1
 8014118:	6022      	str	r2, [r4, #0]
 801411a:	701e      	strb	r6, [r3, #0]
 801411c:	6963      	ldr	r3, [r4, #20]
 801411e:	3001      	adds	r0, #1
 8014120:	4283      	cmp	r3, r0
 8014122:	d004      	beq.n	801412e <__swbuf_r+0x62>
 8014124:	89a3      	ldrh	r3, [r4, #12]
 8014126:	07db      	lsls	r3, r3, #31
 8014128:	d519      	bpl.n	801415e <__swbuf_r+0x92>
 801412a:	2e0a      	cmp	r6, #10
 801412c:	d117      	bne.n	801415e <__swbuf_r+0x92>
 801412e:	4621      	mov	r1, r4
 8014130:	4628      	mov	r0, r5
 8014132:	f7fd fcfd 	bl	8011b30 <_fflush_r>
 8014136:	b190      	cbz	r0, 801415e <__swbuf_r+0x92>
 8014138:	e00f      	b.n	801415a <__swbuf_r+0x8e>
 801413a:	4b0b      	ldr	r3, [pc, #44]	; (8014168 <__swbuf_r+0x9c>)
 801413c:	429c      	cmp	r4, r3
 801413e:	d101      	bne.n	8014144 <__swbuf_r+0x78>
 8014140:	68ac      	ldr	r4, [r5, #8]
 8014142:	e7d0      	b.n	80140e6 <__swbuf_r+0x1a>
 8014144:	4b09      	ldr	r3, [pc, #36]	; (801416c <__swbuf_r+0xa0>)
 8014146:	429c      	cmp	r4, r3
 8014148:	bf08      	it	eq
 801414a:	68ec      	ldreq	r4, [r5, #12]
 801414c:	e7cb      	b.n	80140e6 <__swbuf_r+0x1a>
 801414e:	4621      	mov	r1, r4
 8014150:	4628      	mov	r0, r5
 8014152:	f000 f81f 	bl	8014194 <__swsetup_r>
 8014156:	2800      	cmp	r0, #0
 8014158:	d0cc      	beq.n	80140f4 <__swbuf_r+0x28>
 801415a:	f04f 37ff 	mov.w	r7, #4294967295
 801415e:	4638      	mov	r0, r7
 8014160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014162:	bf00      	nop
 8014164:	08016670 	.word	0x08016670
 8014168:	08016690 	.word	0x08016690
 801416c:	08016650 	.word	0x08016650

08014170 <_write_r>:
 8014170:	b538      	push	{r3, r4, r5, lr}
 8014172:	4c07      	ldr	r4, [pc, #28]	; (8014190 <_write_r+0x20>)
 8014174:	4605      	mov	r5, r0
 8014176:	4608      	mov	r0, r1
 8014178:	4611      	mov	r1, r2
 801417a:	2200      	movs	r2, #0
 801417c:	6022      	str	r2, [r4, #0]
 801417e:	461a      	mov	r2, r3
 8014180:	f7fa f97e 	bl	800e480 <_write>
 8014184:	1c43      	adds	r3, r0, #1
 8014186:	d102      	bne.n	801418e <_write_r+0x1e>
 8014188:	6823      	ldr	r3, [r4, #0]
 801418a:	b103      	cbz	r3, 801418e <_write_r+0x1e>
 801418c:	602b      	str	r3, [r5, #0]
 801418e:	bd38      	pop	{r3, r4, r5, pc}
 8014190:	20006db8 	.word	0x20006db8

08014194 <__swsetup_r>:
 8014194:	4b32      	ldr	r3, [pc, #200]	; (8014260 <__swsetup_r+0xcc>)
 8014196:	b570      	push	{r4, r5, r6, lr}
 8014198:	681d      	ldr	r5, [r3, #0]
 801419a:	4606      	mov	r6, r0
 801419c:	460c      	mov	r4, r1
 801419e:	b125      	cbz	r5, 80141aa <__swsetup_r+0x16>
 80141a0:	69ab      	ldr	r3, [r5, #24]
 80141a2:	b913      	cbnz	r3, 80141aa <__swsetup_r+0x16>
 80141a4:	4628      	mov	r0, r5
 80141a6:	f7fd fd2d 	bl	8011c04 <__sinit>
 80141aa:	4b2e      	ldr	r3, [pc, #184]	; (8014264 <__swsetup_r+0xd0>)
 80141ac:	429c      	cmp	r4, r3
 80141ae:	d10f      	bne.n	80141d0 <__swsetup_r+0x3c>
 80141b0:	686c      	ldr	r4, [r5, #4]
 80141b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141b6:	b29a      	uxth	r2, r3
 80141b8:	0715      	lsls	r5, r2, #28
 80141ba:	d42c      	bmi.n	8014216 <__swsetup_r+0x82>
 80141bc:	06d0      	lsls	r0, r2, #27
 80141be:	d411      	bmi.n	80141e4 <__swsetup_r+0x50>
 80141c0:	2209      	movs	r2, #9
 80141c2:	6032      	str	r2, [r6, #0]
 80141c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141c8:	81a3      	strh	r3, [r4, #12]
 80141ca:	f04f 30ff 	mov.w	r0, #4294967295
 80141ce:	e03e      	b.n	801424e <__swsetup_r+0xba>
 80141d0:	4b25      	ldr	r3, [pc, #148]	; (8014268 <__swsetup_r+0xd4>)
 80141d2:	429c      	cmp	r4, r3
 80141d4:	d101      	bne.n	80141da <__swsetup_r+0x46>
 80141d6:	68ac      	ldr	r4, [r5, #8]
 80141d8:	e7eb      	b.n	80141b2 <__swsetup_r+0x1e>
 80141da:	4b24      	ldr	r3, [pc, #144]	; (801426c <__swsetup_r+0xd8>)
 80141dc:	429c      	cmp	r4, r3
 80141de:	bf08      	it	eq
 80141e0:	68ec      	ldreq	r4, [r5, #12]
 80141e2:	e7e6      	b.n	80141b2 <__swsetup_r+0x1e>
 80141e4:	0751      	lsls	r1, r2, #29
 80141e6:	d512      	bpl.n	801420e <__swsetup_r+0x7a>
 80141e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141ea:	b141      	cbz	r1, 80141fe <__swsetup_r+0x6a>
 80141ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141f0:	4299      	cmp	r1, r3
 80141f2:	d002      	beq.n	80141fa <__swsetup_r+0x66>
 80141f4:	4630      	mov	r0, r6
 80141f6:	f7fd fe2b 	bl	8011e50 <_free_r>
 80141fa:	2300      	movs	r3, #0
 80141fc:	6363      	str	r3, [r4, #52]	; 0x34
 80141fe:	89a3      	ldrh	r3, [r4, #12]
 8014200:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014204:	81a3      	strh	r3, [r4, #12]
 8014206:	2300      	movs	r3, #0
 8014208:	6063      	str	r3, [r4, #4]
 801420a:	6923      	ldr	r3, [r4, #16]
 801420c:	6023      	str	r3, [r4, #0]
 801420e:	89a3      	ldrh	r3, [r4, #12]
 8014210:	f043 0308 	orr.w	r3, r3, #8
 8014214:	81a3      	strh	r3, [r4, #12]
 8014216:	6923      	ldr	r3, [r4, #16]
 8014218:	b94b      	cbnz	r3, 801422e <__swsetup_r+0x9a>
 801421a:	89a3      	ldrh	r3, [r4, #12]
 801421c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014224:	d003      	beq.n	801422e <__swsetup_r+0x9a>
 8014226:	4621      	mov	r1, r4
 8014228:	4630      	mov	r0, r6
 801422a:	f7fd fdbd 	bl	8011da8 <__smakebuf_r>
 801422e:	89a2      	ldrh	r2, [r4, #12]
 8014230:	f012 0301 	ands.w	r3, r2, #1
 8014234:	d00c      	beq.n	8014250 <__swsetup_r+0xbc>
 8014236:	2300      	movs	r3, #0
 8014238:	60a3      	str	r3, [r4, #8]
 801423a:	6963      	ldr	r3, [r4, #20]
 801423c:	425b      	negs	r3, r3
 801423e:	61a3      	str	r3, [r4, #24]
 8014240:	6923      	ldr	r3, [r4, #16]
 8014242:	b953      	cbnz	r3, 801425a <__swsetup_r+0xc6>
 8014244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014248:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801424c:	d1ba      	bne.n	80141c4 <__swsetup_r+0x30>
 801424e:	bd70      	pop	{r4, r5, r6, pc}
 8014250:	0792      	lsls	r2, r2, #30
 8014252:	bf58      	it	pl
 8014254:	6963      	ldrpl	r3, [r4, #20]
 8014256:	60a3      	str	r3, [r4, #8]
 8014258:	e7f2      	b.n	8014240 <__swsetup_r+0xac>
 801425a:	2000      	movs	r0, #0
 801425c:	e7f7      	b.n	801424e <__swsetup_r+0xba>
 801425e:	bf00      	nop
 8014260:	20000018 	.word	0x20000018
 8014264:	08016670 	.word	0x08016670
 8014268:	08016690 	.word	0x08016690
 801426c:	08016650 	.word	0x08016650

08014270 <_close_r>:
 8014270:	b538      	push	{r3, r4, r5, lr}
 8014272:	4c06      	ldr	r4, [pc, #24]	; (801428c <_close_r+0x1c>)
 8014274:	2300      	movs	r3, #0
 8014276:	4605      	mov	r5, r0
 8014278:	4608      	mov	r0, r1
 801427a:	6023      	str	r3, [r4, #0]
 801427c:	f7fa f90e 	bl	800e49c <_close>
 8014280:	1c43      	adds	r3, r0, #1
 8014282:	d102      	bne.n	801428a <_close_r+0x1a>
 8014284:	6823      	ldr	r3, [r4, #0]
 8014286:	b103      	cbz	r3, 801428a <_close_r+0x1a>
 8014288:	602b      	str	r3, [r5, #0]
 801428a:	bd38      	pop	{r3, r4, r5, pc}
 801428c:	20006db8 	.word	0x20006db8

08014290 <quorem>:
 8014290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014294:	6903      	ldr	r3, [r0, #16]
 8014296:	690c      	ldr	r4, [r1, #16]
 8014298:	42a3      	cmp	r3, r4
 801429a:	4680      	mov	r8, r0
 801429c:	f2c0 8082 	blt.w	80143a4 <quorem+0x114>
 80142a0:	3c01      	subs	r4, #1
 80142a2:	f101 0714 	add.w	r7, r1, #20
 80142a6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80142aa:	f100 0614 	add.w	r6, r0, #20
 80142ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80142b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80142b6:	eb06 030c 	add.w	r3, r6, ip
 80142ba:	3501      	adds	r5, #1
 80142bc:	eb07 090c 	add.w	r9, r7, ip
 80142c0:	9301      	str	r3, [sp, #4]
 80142c2:	fbb0 f5f5 	udiv	r5, r0, r5
 80142c6:	b395      	cbz	r5, 801432e <quorem+0x9e>
 80142c8:	f04f 0a00 	mov.w	sl, #0
 80142cc:	4638      	mov	r0, r7
 80142ce:	46b6      	mov	lr, r6
 80142d0:	46d3      	mov	fp, sl
 80142d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80142d6:	b293      	uxth	r3, r2
 80142d8:	fb05 a303 	mla	r3, r5, r3, sl
 80142dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80142e0:	b29b      	uxth	r3, r3
 80142e2:	ebab 0303 	sub.w	r3, fp, r3
 80142e6:	0c12      	lsrs	r2, r2, #16
 80142e8:	f8de b000 	ldr.w	fp, [lr]
 80142ec:	fb05 a202 	mla	r2, r5, r2, sl
 80142f0:	fa13 f38b 	uxtah	r3, r3, fp
 80142f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80142f8:	fa1f fb82 	uxth.w	fp, r2
 80142fc:	f8de 2000 	ldr.w	r2, [lr]
 8014300:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014304:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014308:	b29b      	uxth	r3, r3
 801430a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801430e:	4581      	cmp	r9, r0
 8014310:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014314:	f84e 3b04 	str.w	r3, [lr], #4
 8014318:	d2db      	bcs.n	80142d2 <quorem+0x42>
 801431a:	f856 300c 	ldr.w	r3, [r6, ip]
 801431e:	b933      	cbnz	r3, 801432e <quorem+0x9e>
 8014320:	9b01      	ldr	r3, [sp, #4]
 8014322:	3b04      	subs	r3, #4
 8014324:	429e      	cmp	r6, r3
 8014326:	461a      	mov	r2, r3
 8014328:	d330      	bcc.n	801438c <quorem+0xfc>
 801432a:	f8c8 4010 	str.w	r4, [r8, #16]
 801432e:	4640      	mov	r0, r8
 8014330:	f001 fbe8 	bl	8015b04 <__mcmp>
 8014334:	2800      	cmp	r0, #0
 8014336:	db25      	blt.n	8014384 <quorem+0xf4>
 8014338:	3501      	adds	r5, #1
 801433a:	4630      	mov	r0, r6
 801433c:	f04f 0c00 	mov.w	ip, #0
 8014340:	f857 2b04 	ldr.w	r2, [r7], #4
 8014344:	f8d0 e000 	ldr.w	lr, [r0]
 8014348:	b293      	uxth	r3, r2
 801434a:	ebac 0303 	sub.w	r3, ip, r3
 801434e:	0c12      	lsrs	r2, r2, #16
 8014350:	fa13 f38e 	uxtah	r3, r3, lr
 8014354:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801435c:	b29b      	uxth	r3, r3
 801435e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014362:	45b9      	cmp	r9, r7
 8014364:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014368:	f840 3b04 	str.w	r3, [r0], #4
 801436c:	d2e8      	bcs.n	8014340 <quorem+0xb0>
 801436e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014372:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014376:	b92a      	cbnz	r2, 8014384 <quorem+0xf4>
 8014378:	3b04      	subs	r3, #4
 801437a:	429e      	cmp	r6, r3
 801437c:	461a      	mov	r2, r3
 801437e:	d30b      	bcc.n	8014398 <quorem+0x108>
 8014380:	f8c8 4010 	str.w	r4, [r8, #16]
 8014384:	4628      	mov	r0, r5
 8014386:	b003      	add	sp, #12
 8014388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801438c:	6812      	ldr	r2, [r2, #0]
 801438e:	3b04      	subs	r3, #4
 8014390:	2a00      	cmp	r2, #0
 8014392:	d1ca      	bne.n	801432a <quorem+0x9a>
 8014394:	3c01      	subs	r4, #1
 8014396:	e7c5      	b.n	8014324 <quorem+0x94>
 8014398:	6812      	ldr	r2, [r2, #0]
 801439a:	3b04      	subs	r3, #4
 801439c:	2a00      	cmp	r2, #0
 801439e:	d1ef      	bne.n	8014380 <quorem+0xf0>
 80143a0:	3c01      	subs	r4, #1
 80143a2:	e7ea      	b.n	801437a <quorem+0xea>
 80143a4:	2000      	movs	r0, #0
 80143a6:	e7ee      	b.n	8014386 <quorem+0xf6>

080143a8 <_dtoa_r>:
 80143a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143ac:	ec57 6b10 	vmov	r6, r7, d0
 80143b0:	b097      	sub	sp, #92	; 0x5c
 80143b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80143b4:	9106      	str	r1, [sp, #24]
 80143b6:	4604      	mov	r4, r0
 80143b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80143ba:	9312      	str	r3, [sp, #72]	; 0x48
 80143bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80143c0:	e9cd 6700 	strd	r6, r7, [sp]
 80143c4:	b93d      	cbnz	r5, 80143d6 <_dtoa_r+0x2e>
 80143c6:	2010      	movs	r0, #16
 80143c8:	f001 f914 	bl	80155f4 <malloc>
 80143cc:	6260      	str	r0, [r4, #36]	; 0x24
 80143ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80143d2:	6005      	str	r5, [r0, #0]
 80143d4:	60c5      	str	r5, [r0, #12]
 80143d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143d8:	6819      	ldr	r1, [r3, #0]
 80143da:	b151      	cbz	r1, 80143f2 <_dtoa_r+0x4a>
 80143dc:	685a      	ldr	r2, [r3, #4]
 80143de:	604a      	str	r2, [r1, #4]
 80143e0:	2301      	movs	r3, #1
 80143e2:	4093      	lsls	r3, r2
 80143e4:	608b      	str	r3, [r1, #8]
 80143e6:	4620      	mov	r0, r4
 80143e8:	f001 f96d 	bl	80156c6 <_Bfree>
 80143ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143ee:	2200      	movs	r2, #0
 80143f0:	601a      	str	r2, [r3, #0]
 80143f2:	1e3b      	subs	r3, r7, #0
 80143f4:	bfbb      	ittet	lt
 80143f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80143fa:	9301      	strlt	r3, [sp, #4]
 80143fc:	2300      	movge	r3, #0
 80143fe:	2201      	movlt	r2, #1
 8014400:	bfac      	ite	ge
 8014402:	f8c8 3000 	strge.w	r3, [r8]
 8014406:	f8c8 2000 	strlt.w	r2, [r8]
 801440a:	4baf      	ldr	r3, [pc, #700]	; (80146c8 <_dtoa_r+0x320>)
 801440c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014410:	ea33 0308 	bics.w	r3, r3, r8
 8014414:	d114      	bne.n	8014440 <_dtoa_r+0x98>
 8014416:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014418:	f242 730f 	movw	r3, #9999	; 0x270f
 801441c:	6013      	str	r3, [r2, #0]
 801441e:	9b00      	ldr	r3, [sp, #0]
 8014420:	b923      	cbnz	r3, 801442c <_dtoa_r+0x84>
 8014422:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014426:	2800      	cmp	r0, #0
 8014428:	f000 8542 	beq.w	8014eb0 <_dtoa_r+0xb08>
 801442c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801442e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80146dc <_dtoa_r+0x334>
 8014432:	2b00      	cmp	r3, #0
 8014434:	f000 8544 	beq.w	8014ec0 <_dtoa_r+0xb18>
 8014438:	f10b 0303 	add.w	r3, fp, #3
 801443c:	f000 bd3e 	b.w	8014ebc <_dtoa_r+0xb14>
 8014440:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014444:	2200      	movs	r2, #0
 8014446:	2300      	movs	r3, #0
 8014448:	4630      	mov	r0, r6
 801444a:	4639      	mov	r1, r7
 801444c:	f7f4 fa74 	bl	8008938 <__aeabi_dcmpeq>
 8014450:	4681      	mov	r9, r0
 8014452:	b168      	cbz	r0, 8014470 <_dtoa_r+0xc8>
 8014454:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014456:	2301      	movs	r3, #1
 8014458:	6013      	str	r3, [r2, #0]
 801445a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801445c:	2b00      	cmp	r3, #0
 801445e:	f000 8524 	beq.w	8014eaa <_dtoa_r+0xb02>
 8014462:	4b9a      	ldr	r3, [pc, #616]	; (80146cc <_dtoa_r+0x324>)
 8014464:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014466:	f103 3bff 	add.w	fp, r3, #4294967295
 801446a:	6013      	str	r3, [r2, #0]
 801446c:	f000 bd28 	b.w	8014ec0 <_dtoa_r+0xb18>
 8014470:	aa14      	add	r2, sp, #80	; 0x50
 8014472:	a915      	add	r1, sp, #84	; 0x54
 8014474:	ec47 6b10 	vmov	d0, r6, r7
 8014478:	4620      	mov	r0, r4
 801447a:	f001 fc31 	bl	8015ce0 <__d2b>
 801447e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014482:	9004      	str	r0, [sp, #16]
 8014484:	2d00      	cmp	r5, #0
 8014486:	d07c      	beq.n	8014582 <_dtoa_r+0x1da>
 8014488:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801448c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014490:	46b2      	mov	sl, r6
 8014492:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014496:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801449a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801449e:	2200      	movs	r2, #0
 80144a0:	4b8b      	ldr	r3, [pc, #556]	; (80146d0 <_dtoa_r+0x328>)
 80144a2:	4650      	mov	r0, sl
 80144a4:	4659      	mov	r1, fp
 80144a6:	f7f3 fe27 	bl	80080f8 <__aeabi_dsub>
 80144aa:	a381      	add	r3, pc, #516	; (adr r3, 80146b0 <_dtoa_r+0x308>)
 80144ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b0:	f7f3 ffda 	bl	8008468 <__aeabi_dmul>
 80144b4:	a380      	add	r3, pc, #512	; (adr r3, 80146b8 <_dtoa_r+0x310>)
 80144b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ba:	f7f3 fe1f 	bl	80080fc <__adddf3>
 80144be:	4606      	mov	r6, r0
 80144c0:	4628      	mov	r0, r5
 80144c2:	460f      	mov	r7, r1
 80144c4:	f7f3 ff66 	bl	8008394 <__aeabi_i2d>
 80144c8:	a37d      	add	r3, pc, #500	; (adr r3, 80146c0 <_dtoa_r+0x318>)
 80144ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ce:	f7f3 ffcb 	bl	8008468 <__aeabi_dmul>
 80144d2:	4602      	mov	r2, r0
 80144d4:	460b      	mov	r3, r1
 80144d6:	4630      	mov	r0, r6
 80144d8:	4639      	mov	r1, r7
 80144da:	f7f3 fe0f 	bl	80080fc <__adddf3>
 80144de:	4606      	mov	r6, r0
 80144e0:	460f      	mov	r7, r1
 80144e2:	f7f4 fa71 	bl	80089c8 <__aeabi_d2iz>
 80144e6:	2200      	movs	r2, #0
 80144e8:	4682      	mov	sl, r0
 80144ea:	2300      	movs	r3, #0
 80144ec:	4630      	mov	r0, r6
 80144ee:	4639      	mov	r1, r7
 80144f0:	f7f4 fa2c 	bl	800894c <__aeabi_dcmplt>
 80144f4:	b148      	cbz	r0, 801450a <_dtoa_r+0x162>
 80144f6:	4650      	mov	r0, sl
 80144f8:	f7f3 ff4c 	bl	8008394 <__aeabi_i2d>
 80144fc:	4632      	mov	r2, r6
 80144fe:	463b      	mov	r3, r7
 8014500:	f7f4 fa1a 	bl	8008938 <__aeabi_dcmpeq>
 8014504:	b908      	cbnz	r0, 801450a <_dtoa_r+0x162>
 8014506:	f10a 3aff 	add.w	sl, sl, #4294967295
 801450a:	f1ba 0f16 	cmp.w	sl, #22
 801450e:	d859      	bhi.n	80145c4 <_dtoa_r+0x21c>
 8014510:	4970      	ldr	r1, [pc, #448]	; (80146d4 <_dtoa_r+0x32c>)
 8014512:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014516:	e9dd 2300 	ldrd	r2, r3, [sp]
 801451a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801451e:	f7f4 fa33 	bl	8008988 <__aeabi_dcmpgt>
 8014522:	2800      	cmp	r0, #0
 8014524:	d050      	beq.n	80145c8 <_dtoa_r+0x220>
 8014526:	f10a 3aff 	add.w	sl, sl, #4294967295
 801452a:	2300      	movs	r3, #0
 801452c:	930f      	str	r3, [sp, #60]	; 0x3c
 801452e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014530:	1b5d      	subs	r5, r3, r5
 8014532:	f1b5 0801 	subs.w	r8, r5, #1
 8014536:	bf49      	itett	mi
 8014538:	f1c5 0301 	rsbmi	r3, r5, #1
 801453c:	2300      	movpl	r3, #0
 801453e:	9305      	strmi	r3, [sp, #20]
 8014540:	f04f 0800 	movmi.w	r8, #0
 8014544:	bf58      	it	pl
 8014546:	9305      	strpl	r3, [sp, #20]
 8014548:	f1ba 0f00 	cmp.w	sl, #0
 801454c:	db3e      	blt.n	80145cc <_dtoa_r+0x224>
 801454e:	2300      	movs	r3, #0
 8014550:	44d0      	add	r8, sl
 8014552:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014556:	9307      	str	r3, [sp, #28]
 8014558:	9b06      	ldr	r3, [sp, #24]
 801455a:	2b09      	cmp	r3, #9
 801455c:	f200 8090 	bhi.w	8014680 <_dtoa_r+0x2d8>
 8014560:	2b05      	cmp	r3, #5
 8014562:	bfc4      	itt	gt
 8014564:	3b04      	subgt	r3, #4
 8014566:	9306      	strgt	r3, [sp, #24]
 8014568:	9b06      	ldr	r3, [sp, #24]
 801456a:	f1a3 0302 	sub.w	r3, r3, #2
 801456e:	bfcc      	ite	gt
 8014570:	2500      	movgt	r5, #0
 8014572:	2501      	movle	r5, #1
 8014574:	2b03      	cmp	r3, #3
 8014576:	f200 808f 	bhi.w	8014698 <_dtoa_r+0x2f0>
 801457a:	e8df f003 	tbb	[pc, r3]
 801457e:	7f7d      	.short	0x7f7d
 8014580:	7131      	.short	0x7131
 8014582:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014586:	441d      	add	r5, r3
 8014588:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801458c:	2820      	cmp	r0, #32
 801458e:	dd13      	ble.n	80145b8 <_dtoa_r+0x210>
 8014590:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014594:	9b00      	ldr	r3, [sp, #0]
 8014596:	fa08 f800 	lsl.w	r8, r8, r0
 801459a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801459e:	fa23 f000 	lsr.w	r0, r3, r0
 80145a2:	ea48 0000 	orr.w	r0, r8, r0
 80145a6:	f7f3 fee5 	bl	8008374 <__aeabi_ui2d>
 80145aa:	2301      	movs	r3, #1
 80145ac:	4682      	mov	sl, r0
 80145ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80145b2:	3d01      	subs	r5, #1
 80145b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80145b6:	e772      	b.n	801449e <_dtoa_r+0xf6>
 80145b8:	9b00      	ldr	r3, [sp, #0]
 80145ba:	f1c0 0020 	rsb	r0, r0, #32
 80145be:	fa03 f000 	lsl.w	r0, r3, r0
 80145c2:	e7f0      	b.n	80145a6 <_dtoa_r+0x1fe>
 80145c4:	2301      	movs	r3, #1
 80145c6:	e7b1      	b.n	801452c <_dtoa_r+0x184>
 80145c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80145ca:	e7b0      	b.n	801452e <_dtoa_r+0x186>
 80145cc:	9b05      	ldr	r3, [sp, #20]
 80145ce:	eba3 030a 	sub.w	r3, r3, sl
 80145d2:	9305      	str	r3, [sp, #20]
 80145d4:	f1ca 0300 	rsb	r3, sl, #0
 80145d8:	9307      	str	r3, [sp, #28]
 80145da:	2300      	movs	r3, #0
 80145dc:	930e      	str	r3, [sp, #56]	; 0x38
 80145de:	e7bb      	b.n	8014558 <_dtoa_r+0x1b0>
 80145e0:	2301      	movs	r3, #1
 80145e2:	930a      	str	r3, [sp, #40]	; 0x28
 80145e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	dd59      	ble.n	801469e <_dtoa_r+0x2f6>
 80145ea:	9302      	str	r3, [sp, #8]
 80145ec:	4699      	mov	r9, r3
 80145ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80145f0:	2200      	movs	r2, #0
 80145f2:	6072      	str	r2, [r6, #4]
 80145f4:	2204      	movs	r2, #4
 80145f6:	f102 0014 	add.w	r0, r2, #20
 80145fa:	4298      	cmp	r0, r3
 80145fc:	6871      	ldr	r1, [r6, #4]
 80145fe:	d953      	bls.n	80146a8 <_dtoa_r+0x300>
 8014600:	4620      	mov	r0, r4
 8014602:	f001 f82c 	bl	801565e <_Balloc>
 8014606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014608:	6030      	str	r0, [r6, #0]
 801460a:	f1b9 0f0e 	cmp.w	r9, #14
 801460e:	f8d3 b000 	ldr.w	fp, [r3]
 8014612:	f200 80e6 	bhi.w	80147e2 <_dtoa_r+0x43a>
 8014616:	2d00      	cmp	r5, #0
 8014618:	f000 80e3 	beq.w	80147e2 <_dtoa_r+0x43a>
 801461c:	ed9d 7b00 	vldr	d7, [sp]
 8014620:	f1ba 0f00 	cmp.w	sl, #0
 8014624:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014628:	dd74      	ble.n	8014714 <_dtoa_r+0x36c>
 801462a:	4a2a      	ldr	r2, [pc, #168]	; (80146d4 <_dtoa_r+0x32c>)
 801462c:	f00a 030f 	and.w	r3, sl, #15
 8014630:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014634:	ed93 7b00 	vldr	d7, [r3]
 8014638:	ea4f 162a 	mov.w	r6, sl, asr #4
 801463c:	06f0      	lsls	r0, r6, #27
 801463e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014642:	d565      	bpl.n	8014710 <_dtoa_r+0x368>
 8014644:	4b24      	ldr	r3, [pc, #144]	; (80146d8 <_dtoa_r+0x330>)
 8014646:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801464a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801464e:	f7f4 f835 	bl	80086bc <__aeabi_ddiv>
 8014652:	e9cd 0100 	strd	r0, r1, [sp]
 8014656:	f006 060f 	and.w	r6, r6, #15
 801465a:	2503      	movs	r5, #3
 801465c:	4f1e      	ldr	r7, [pc, #120]	; (80146d8 <_dtoa_r+0x330>)
 801465e:	e04c      	b.n	80146fa <_dtoa_r+0x352>
 8014660:	2301      	movs	r3, #1
 8014662:	930a      	str	r3, [sp, #40]	; 0x28
 8014664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014666:	4453      	add	r3, sl
 8014668:	f103 0901 	add.w	r9, r3, #1
 801466c:	9302      	str	r3, [sp, #8]
 801466e:	464b      	mov	r3, r9
 8014670:	2b01      	cmp	r3, #1
 8014672:	bfb8      	it	lt
 8014674:	2301      	movlt	r3, #1
 8014676:	e7ba      	b.n	80145ee <_dtoa_r+0x246>
 8014678:	2300      	movs	r3, #0
 801467a:	e7b2      	b.n	80145e2 <_dtoa_r+0x23a>
 801467c:	2300      	movs	r3, #0
 801467e:	e7f0      	b.n	8014662 <_dtoa_r+0x2ba>
 8014680:	2501      	movs	r5, #1
 8014682:	2300      	movs	r3, #0
 8014684:	9306      	str	r3, [sp, #24]
 8014686:	950a      	str	r5, [sp, #40]	; 0x28
 8014688:	f04f 33ff 	mov.w	r3, #4294967295
 801468c:	9302      	str	r3, [sp, #8]
 801468e:	4699      	mov	r9, r3
 8014690:	2200      	movs	r2, #0
 8014692:	2312      	movs	r3, #18
 8014694:	920b      	str	r2, [sp, #44]	; 0x2c
 8014696:	e7aa      	b.n	80145ee <_dtoa_r+0x246>
 8014698:	2301      	movs	r3, #1
 801469a:	930a      	str	r3, [sp, #40]	; 0x28
 801469c:	e7f4      	b.n	8014688 <_dtoa_r+0x2e0>
 801469e:	2301      	movs	r3, #1
 80146a0:	9302      	str	r3, [sp, #8]
 80146a2:	4699      	mov	r9, r3
 80146a4:	461a      	mov	r2, r3
 80146a6:	e7f5      	b.n	8014694 <_dtoa_r+0x2ec>
 80146a8:	3101      	adds	r1, #1
 80146aa:	6071      	str	r1, [r6, #4]
 80146ac:	0052      	lsls	r2, r2, #1
 80146ae:	e7a2      	b.n	80145f6 <_dtoa_r+0x24e>
 80146b0:	636f4361 	.word	0x636f4361
 80146b4:	3fd287a7 	.word	0x3fd287a7
 80146b8:	8b60c8b3 	.word	0x8b60c8b3
 80146bc:	3fc68a28 	.word	0x3fc68a28
 80146c0:	509f79fb 	.word	0x509f79fb
 80146c4:	3fd34413 	.word	0x3fd34413
 80146c8:	7ff00000 	.word	0x7ff00000
 80146cc:	080166d6 	.word	0x080166d6
 80146d0:	3ff80000 	.word	0x3ff80000
 80146d4:	08016790 	.word	0x08016790
 80146d8:	08016768 	.word	0x08016768
 80146dc:	08016759 	.word	0x08016759
 80146e0:	07f1      	lsls	r1, r6, #31
 80146e2:	d508      	bpl.n	80146f6 <_dtoa_r+0x34e>
 80146e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80146e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80146ec:	f7f3 febc 	bl	8008468 <__aeabi_dmul>
 80146f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80146f4:	3501      	adds	r5, #1
 80146f6:	1076      	asrs	r6, r6, #1
 80146f8:	3708      	adds	r7, #8
 80146fa:	2e00      	cmp	r6, #0
 80146fc:	d1f0      	bne.n	80146e0 <_dtoa_r+0x338>
 80146fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014702:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014706:	f7f3 ffd9 	bl	80086bc <__aeabi_ddiv>
 801470a:	e9cd 0100 	strd	r0, r1, [sp]
 801470e:	e01a      	b.n	8014746 <_dtoa_r+0x39e>
 8014710:	2502      	movs	r5, #2
 8014712:	e7a3      	b.n	801465c <_dtoa_r+0x2b4>
 8014714:	f000 80a0 	beq.w	8014858 <_dtoa_r+0x4b0>
 8014718:	f1ca 0600 	rsb	r6, sl, #0
 801471c:	4b9f      	ldr	r3, [pc, #636]	; (801499c <_dtoa_r+0x5f4>)
 801471e:	4fa0      	ldr	r7, [pc, #640]	; (80149a0 <_dtoa_r+0x5f8>)
 8014720:	f006 020f 	and.w	r2, r6, #15
 8014724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801472c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014730:	f7f3 fe9a 	bl	8008468 <__aeabi_dmul>
 8014734:	e9cd 0100 	strd	r0, r1, [sp]
 8014738:	1136      	asrs	r6, r6, #4
 801473a:	2300      	movs	r3, #0
 801473c:	2502      	movs	r5, #2
 801473e:	2e00      	cmp	r6, #0
 8014740:	d17f      	bne.n	8014842 <_dtoa_r+0x49a>
 8014742:	2b00      	cmp	r3, #0
 8014744:	d1e1      	bne.n	801470a <_dtoa_r+0x362>
 8014746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014748:	2b00      	cmp	r3, #0
 801474a:	f000 8087 	beq.w	801485c <_dtoa_r+0x4b4>
 801474e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014752:	2200      	movs	r2, #0
 8014754:	4b93      	ldr	r3, [pc, #588]	; (80149a4 <_dtoa_r+0x5fc>)
 8014756:	4630      	mov	r0, r6
 8014758:	4639      	mov	r1, r7
 801475a:	f7f4 f8f7 	bl	800894c <__aeabi_dcmplt>
 801475e:	2800      	cmp	r0, #0
 8014760:	d07c      	beq.n	801485c <_dtoa_r+0x4b4>
 8014762:	f1b9 0f00 	cmp.w	r9, #0
 8014766:	d079      	beq.n	801485c <_dtoa_r+0x4b4>
 8014768:	9b02      	ldr	r3, [sp, #8]
 801476a:	2b00      	cmp	r3, #0
 801476c:	dd35      	ble.n	80147da <_dtoa_r+0x432>
 801476e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014772:	9308      	str	r3, [sp, #32]
 8014774:	4639      	mov	r1, r7
 8014776:	2200      	movs	r2, #0
 8014778:	4b8b      	ldr	r3, [pc, #556]	; (80149a8 <_dtoa_r+0x600>)
 801477a:	4630      	mov	r0, r6
 801477c:	f7f3 fe74 	bl	8008468 <__aeabi_dmul>
 8014780:	e9cd 0100 	strd	r0, r1, [sp]
 8014784:	9f02      	ldr	r7, [sp, #8]
 8014786:	3501      	adds	r5, #1
 8014788:	4628      	mov	r0, r5
 801478a:	f7f3 fe03 	bl	8008394 <__aeabi_i2d>
 801478e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014792:	f7f3 fe69 	bl	8008468 <__aeabi_dmul>
 8014796:	2200      	movs	r2, #0
 8014798:	4b84      	ldr	r3, [pc, #528]	; (80149ac <_dtoa_r+0x604>)
 801479a:	f7f3 fcaf 	bl	80080fc <__adddf3>
 801479e:	4605      	mov	r5, r0
 80147a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80147a4:	2f00      	cmp	r7, #0
 80147a6:	d15d      	bne.n	8014864 <_dtoa_r+0x4bc>
 80147a8:	2200      	movs	r2, #0
 80147aa:	4b81      	ldr	r3, [pc, #516]	; (80149b0 <_dtoa_r+0x608>)
 80147ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147b0:	f7f3 fca2 	bl	80080f8 <__aeabi_dsub>
 80147b4:	462a      	mov	r2, r5
 80147b6:	4633      	mov	r3, r6
 80147b8:	e9cd 0100 	strd	r0, r1, [sp]
 80147bc:	f7f4 f8e4 	bl	8008988 <__aeabi_dcmpgt>
 80147c0:	2800      	cmp	r0, #0
 80147c2:	f040 8288 	bne.w	8014cd6 <_dtoa_r+0x92e>
 80147c6:	462a      	mov	r2, r5
 80147c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80147cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147d0:	f7f4 f8bc 	bl	800894c <__aeabi_dcmplt>
 80147d4:	2800      	cmp	r0, #0
 80147d6:	f040 827c 	bne.w	8014cd2 <_dtoa_r+0x92a>
 80147da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80147de:	e9cd 2300 	strd	r2, r3, [sp]
 80147e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	f2c0 8150 	blt.w	8014a8a <_dtoa_r+0x6e2>
 80147ea:	f1ba 0f0e 	cmp.w	sl, #14
 80147ee:	f300 814c 	bgt.w	8014a8a <_dtoa_r+0x6e2>
 80147f2:	4b6a      	ldr	r3, [pc, #424]	; (801499c <_dtoa_r+0x5f4>)
 80147f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80147f8:	ed93 7b00 	vldr	d7, [r3]
 80147fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147fe:	2b00      	cmp	r3, #0
 8014800:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014804:	f280 80d8 	bge.w	80149b8 <_dtoa_r+0x610>
 8014808:	f1b9 0f00 	cmp.w	r9, #0
 801480c:	f300 80d4 	bgt.w	80149b8 <_dtoa_r+0x610>
 8014810:	f040 825e 	bne.w	8014cd0 <_dtoa_r+0x928>
 8014814:	2200      	movs	r2, #0
 8014816:	4b66      	ldr	r3, [pc, #408]	; (80149b0 <_dtoa_r+0x608>)
 8014818:	ec51 0b17 	vmov	r0, r1, d7
 801481c:	f7f3 fe24 	bl	8008468 <__aeabi_dmul>
 8014820:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014824:	f7f4 f8a6 	bl	8008974 <__aeabi_dcmpge>
 8014828:	464f      	mov	r7, r9
 801482a:	464e      	mov	r6, r9
 801482c:	2800      	cmp	r0, #0
 801482e:	f040 8234 	bne.w	8014c9a <_dtoa_r+0x8f2>
 8014832:	2331      	movs	r3, #49	; 0x31
 8014834:	f10b 0501 	add.w	r5, fp, #1
 8014838:	f88b 3000 	strb.w	r3, [fp]
 801483c:	f10a 0a01 	add.w	sl, sl, #1
 8014840:	e22f      	b.n	8014ca2 <_dtoa_r+0x8fa>
 8014842:	07f2      	lsls	r2, r6, #31
 8014844:	d505      	bpl.n	8014852 <_dtoa_r+0x4aa>
 8014846:	e9d7 2300 	ldrd	r2, r3, [r7]
 801484a:	f7f3 fe0d 	bl	8008468 <__aeabi_dmul>
 801484e:	3501      	adds	r5, #1
 8014850:	2301      	movs	r3, #1
 8014852:	1076      	asrs	r6, r6, #1
 8014854:	3708      	adds	r7, #8
 8014856:	e772      	b.n	801473e <_dtoa_r+0x396>
 8014858:	2502      	movs	r5, #2
 801485a:	e774      	b.n	8014746 <_dtoa_r+0x39e>
 801485c:	f8cd a020 	str.w	sl, [sp, #32]
 8014860:	464f      	mov	r7, r9
 8014862:	e791      	b.n	8014788 <_dtoa_r+0x3e0>
 8014864:	4b4d      	ldr	r3, [pc, #308]	; (801499c <_dtoa_r+0x5f4>)
 8014866:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801486a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801486e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014870:	2b00      	cmp	r3, #0
 8014872:	d047      	beq.n	8014904 <_dtoa_r+0x55c>
 8014874:	4602      	mov	r2, r0
 8014876:	460b      	mov	r3, r1
 8014878:	2000      	movs	r0, #0
 801487a:	494e      	ldr	r1, [pc, #312]	; (80149b4 <_dtoa_r+0x60c>)
 801487c:	f7f3 ff1e 	bl	80086bc <__aeabi_ddiv>
 8014880:	462a      	mov	r2, r5
 8014882:	4633      	mov	r3, r6
 8014884:	f7f3 fc38 	bl	80080f8 <__aeabi_dsub>
 8014888:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801488c:	465d      	mov	r5, fp
 801488e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014892:	f7f4 f899 	bl	80089c8 <__aeabi_d2iz>
 8014896:	4606      	mov	r6, r0
 8014898:	f7f3 fd7c 	bl	8008394 <__aeabi_i2d>
 801489c:	4602      	mov	r2, r0
 801489e:	460b      	mov	r3, r1
 80148a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148a4:	f7f3 fc28 	bl	80080f8 <__aeabi_dsub>
 80148a8:	3630      	adds	r6, #48	; 0x30
 80148aa:	f805 6b01 	strb.w	r6, [r5], #1
 80148ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80148b2:	e9cd 0100 	strd	r0, r1, [sp]
 80148b6:	f7f4 f849 	bl	800894c <__aeabi_dcmplt>
 80148ba:	2800      	cmp	r0, #0
 80148bc:	d163      	bne.n	8014986 <_dtoa_r+0x5de>
 80148be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80148c2:	2000      	movs	r0, #0
 80148c4:	4937      	ldr	r1, [pc, #220]	; (80149a4 <_dtoa_r+0x5fc>)
 80148c6:	f7f3 fc17 	bl	80080f8 <__aeabi_dsub>
 80148ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80148ce:	f7f4 f83d 	bl	800894c <__aeabi_dcmplt>
 80148d2:	2800      	cmp	r0, #0
 80148d4:	f040 80b7 	bne.w	8014a46 <_dtoa_r+0x69e>
 80148d8:	eba5 030b 	sub.w	r3, r5, fp
 80148dc:	429f      	cmp	r7, r3
 80148de:	f77f af7c 	ble.w	80147da <_dtoa_r+0x432>
 80148e2:	2200      	movs	r2, #0
 80148e4:	4b30      	ldr	r3, [pc, #192]	; (80149a8 <_dtoa_r+0x600>)
 80148e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80148ea:	f7f3 fdbd 	bl	8008468 <__aeabi_dmul>
 80148ee:	2200      	movs	r2, #0
 80148f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80148f4:	4b2c      	ldr	r3, [pc, #176]	; (80149a8 <_dtoa_r+0x600>)
 80148f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148fa:	f7f3 fdb5 	bl	8008468 <__aeabi_dmul>
 80148fe:	e9cd 0100 	strd	r0, r1, [sp]
 8014902:	e7c4      	b.n	801488e <_dtoa_r+0x4e6>
 8014904:	462a      	mov	r2, r5
 8014906:	4633      	mov	r3, r6
 8014908:	f7f3 fdae 	bl	8008468 <__aeabi_dmul>
 801490c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014910:	eb0b 0507 	add.w	r5, fp, r7
 8014914:	465e      	mov	r6, fp
 8014916:	e9dd 0100 	ldrd	r0, r1, [sp]
 801491a:	f7f4 f855 	bl	80089c8 <__aeabi_d2iz>
 801491e:	4607      	mov	r7, r0
 8014920:	f7f3 fd38 	bl	8008394 <__aeabi_i2d>
 8014924:	3730      	adds	r7, #48	; 0x30
 8014926:	4602      	mov	r2, r0
 8014928:	460b      	mov	r3, r1
 801492a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801492e:	f7f3 fbe3 	bl	80080f8 <__aeabi_dsub>
 8014932:	f806 7b01 	strb.w	r7, [r6], #1
 8014936:	42ae      	cmp	r6, r5
 8014938:	e9cd 0100 	strd	r0, r1, [sp]
 801493c:	f04f 0200 	mov.w	r2, #0
 8014940:	d126      	bne.n	8014990 <_dtoa_r+0x5e8>
 8014942:	4b1c      	ldr	r3, [pc, #112]	; (80149b4 <_dtoa_r+0x60c>)
 8014944:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014948:	f7f3 fbd8 	bl	80080fc <__adddf3>
 801494c:	4602      	mov	r2, r0
 801494e:	460b      	mov	r3, r1
 8014950:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014954:	f7f4 f818 	bl	8008988 <__aeabi_dcmpgt>
 8014958:	2800      	cmp	r0, #0
 801495a:	d174      	bne.n	8014a46 <_dtoa_r+0x69e>
 801495c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014960:	2000      	movs	r0, #0
 8014962:	4914      	ldr	r1, [pc, #80]	; (80149b4 <_dtoa_r+0x60c>)
 8014964:	f7f3 fbc8 	bl	80080f8 <__aeabi_dsub>
 8014968:	4602      	mov	r2, r0
 801496a:	460b      	mov	r3, r1
 801496c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014970:	f7f3 ffec 	bl	800894c <__aeabi_dcmplt>
 8014974:	2800      	cmp	r0, #0
 8014976:	f43f af30 	beq.w	80147da <_dtoa_r+0x432>
 801497a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801497e:	2b30      	cmp	r3, #48	; 0x30
 8014980:	f105 32ff 	add.w	r2, r5, #4294967295
 8014984:	d002      	beq.n	801498c <_dtoa_r+0x5e4>
 8014986:	f8dd a020 	ldr.w	sl, [sp, #32]
 801498a:	e04a      	b.n	8014a22 <_dtoa_r+0x67a>
 801498c:	4615      	mov	r5, r2
 801498e:	e7f4      	b.n	801497a <_dtoa_r+0x5d2>
 8014990:	4b05      	ldr	r3, [pc, #20]	; (80149a8 <_dtoa_r+0x600>)
 8014992:	f7f3 fd69 	bl	8008468 <__aeabi_dmul>
 8014996:	e9cd 0100 	strd	r0, r1, [sp]
 801499a:	e7bc      	b.n	8014916 <_dtoa_r+0x56e>
 801499c:	08016790 	.word	0x08016790
 80149a0:	08016768 	.word	0x08016768
 80149a4:	3ff00000 	.word	0x3ff00000
 80149a8:	40240000 	.word	0x40240000
 80149ac:	401c0000 	.word	0x401c0000
 80149b0:	40140000 	.word	0x40140000
 80149b4:	3fe00000 	.word	0x3fe00000
 80149b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80149bc:	465d      	mov	r5, fp
 80149be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80149c2:	4630      	mov	r0, r6
 80149c4:	4639      	mov	r1, r7
 80149c6:	f7f3 fe79 	bl	80086bc <__aeabi_ddiv>
 80149ca:	f7f3 fffd 	bl	80089c8 <__aeabi_d2iz>
 80149ce:	4680      	mov	r8, r0
 80149d0:	f7f3 fce0 	bl	8008394 <__aeabi_i2d>
 80149d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80149d8:	f7f3 fd46 	bl	8008468 <__aeabi_dmul>
 80149dc:	4602      	mov	r2, r0
 80149de:	460b      	mov	r3, r1
 80149e0:	4630      	mov	r0, r6
 80149e2:	4639      	mov	r1, r7
 80149e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80149e8:	f7f3 fb86 	bl	80080f8 <__aeabi_dsub>
 80149ec:	f805 6b01 	strb.w	r6, [r5], #1
 80149f0:	eba5 060b 	sub.w	r6, r5, fp
 80149f4:	45b1      	cmp	r9, r6
 80149f6:	4602      	mov	r2, r0
 80149f8:	460b      	mov	r3, r1
 80149fa:	d139      	bne.n	8014a70 <_dtoa_r+0x6c8>
 80149fc:	f7f3 fb7e 	bl	80080fc <__adddf3>
 8014a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a04:	4606      	mov	r6, r0
 8014a06:	460f      	mov	r7, r1
 8014a08:	f7f3 ffbe 	bl	8008988 <__aeabi_dcmpgt>
 8014a0c:	b9c8      	cbnz	r0, 8014a42 <_dtoa_r+0x69a>
 8014a0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a12:	4630      	mov	r0, r6
 8014a14:	4639      	mov	r1, r7
 8014a16:	f7f3 ff8f 	bl	8008938 <__aeabi_dcmpeq>
 8014a1a:	b110      	cbz	r0, 8014a22 <_dtoa_r+0x67a>
 8014a1c:	f018 0f01 	tst.w	r8, #1
 8014a20:	d10f      	bne.n	8014a42 <_dtoa_r+0x69a>
 8014a22:	9904      	ldr	r1, [sp, #16]
 8014a24:	4620      	mov	r0, r4
 8014a26:	f000 fe4e 	bl	80156c6 <_Bfree>
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014a2e:	702b      	strb	r3, [r5, #0]
 8014a30:	f10a 0301 	add.w	r3, sl, #1
 8014a34:	6013      	str	r3, [r2, #0]
 8014a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	f000 8241 	beq.w	8014ec0 <_dtoa_r+0xb18>
 8014a3e:	601d      	str	r5, [r3, #0]
 8014a40:	e23e      	b.n	8014ec0 <_dtoa_r+0xb18>
 8014a42:	f8cd a020 	str.w	sl, [sp, #32]
 8014a46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014a4a:	2a39      	cmp	r2, #57	; 0x39
 8014a4c:	f105 33ff 	add.w	r3, r5, #4294967295
 8014a50:	d108      	bne.n	8014a64 <_dtoa_r+0x6bc>
 8014a52:	459b      	cmp	fp, r3
 8014a54:	d10a      	bne.n	8014a6c <_dtoa_r+0x6c4>
 8014a56:	9b08      	ldr	r3, [sp, #32]
 8014a58:	3301      	adds	r3, #1
 8014a5a:	9308      	str	r3, [sp, #32]
 8014a5c:	2330      	movs	r3, #48	; 0x30
 8014a5e:	f88b 3000 	strb.w	r3, [fp]
 8014a62:	465b      	mov	r3, fp
 8014a64:	781a      	ldrb	r2, [r3, #0]
 8014a66:	3201      	adds	r2, #1
 8014a68:	701a      	strb	r2, [r3, #0]
 8014a6a:	e78c      	b.n	8014986 <_dtoa_r+0x5de>
 8014a6c:	461d      	mov	r5, r3
 8014a6e:	e7ea      	b.n	8014a46 <_dtoa_r+0x69e>
 8014a70:	2200      	movs	r2, #0
 8014a72:	4b9b      	ldr	r3, [pc, #620]	; (8014ce0 <_dtoa_r+0x938>)
 8014a74:	f7f3 fcf8 	bl	8008468 <__aeabi_dmul>
 8014a78:	2200      	movs	r2, #0
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	4606      	mov	r6, r0
 8014a7e:	460f      	mov	r7, r1
 8014a80:	f7f3 ff5a 	bl	8008938 <__aeabi_dcmpeq>
 8014a84:	2800      	cmp	r0, #0
 8014a86:	d09a      	beq.n	80149be <_dtoa_r+0x616>
 8014a88:	e7cb      	b.n	8014a22 <_dtoa_r+0x67a>
 8014a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a8c:	2a00      	cmp	r2, #0
 8014a8e:	f000 808b 	beq.w	8014ba8 <_dtoa_r+0x800>
 8014a92:	9a06      	ldr	r2, [sp, #24]
 8014a94:	2a01      	cmp	r2, #1
 8014a96:	dc6e      	bgt.n	8014b76 <_dtoa_r+0x7ce>
 8014a98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014a9a:	2a00      	cmp	r2, #0
 8014a9c:	d067      	beq.n	8014b6e <_dtoa_r+0x7c6>
 8014a9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014aa2:	9f07      	ldr	r7, [sp, #28]
 8014aa4:	9d05      	ldr	r5, [sp, #20]
 8014aa6:	9a05      	ldr	r2, [sp, #20]
 8014aa8:	2101      	movs	r1, #1
 8014aaa:	441a      	add	r2, r3
 8014aac:	4620      	mov	r0, r4
 8014aae:	9205      	str	r2, [sp, #20]
 8014ab0:	4498      	add	r8, r3
 8014ab2:	f000 fee6 	bl	8015882 <__i2b>
 8014ab6:	4606      	mov	r6, r0
 8014ab8:	2d00      	cmp	r5, #0
 8014aba:	dd0c      	ble.n	8014ad6 <_dtoa_r+0x72e>
 8014abc:	f1b8 0f00 	cmp.w	r8, #0
 8014ac0:	dd09      	ble.n	8014ad6 <_dtoa_r+0x72e>
 8014ac2:	4545      	cmp	r5, r8
 8014ac4:	9a05      	ldr	r2, [sp, #20]
 8014ac6:	462b      	mov	r3, r5
 8014ac8:	bfa8      	it	ge
 8014aca:	4643      	movge	r3, r8
 8014acc:	1ad2      	subs	r2, r2, r3
 8014ace:	9205      	str	r2, [sp, #20]
 8014ad0:	1aed      	subs	r5, r5, r3
 8014ad2:	eba8 0803 	sub.w	r8, r8, r3
 8014ad6:	9b07      	ldr	r3, [sp, #28]
 8014ad8:	b1eb      	cbz	r3, 8014b16 <_dtoa_r+0x76e>
 8014ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d067      	beq.n	8014bb0 <_dtoa_r+0x808>
 8014ae0:	b18f      	cbz	r7, 8014b06 <_dtoa_r+0x75e>
 8014ae2:	4631      	mov	r1, r6
 8014ae4:	463a      	mov	r2, r7
 8014ae6:	4620      	mov	r0, r4
 8014ae8:	f000 ff6a 	bl	80159c0 <__pow5mult>
 8014aec:	9a04      	ldr	r2, [sp, #16]
 8014aee:	4601      	mov	r1, r0
 8014af0:	4606      	mov	r6, r0
 8014af2:	4620      	mov	r0, r4
 8014af4:	f000 fece 	bl	8015894 <__multiply>
 8014af8:	9904      	ldr	r1, [sp, #16]
 8014afa:	9008      	str	r0, [sp, #32]
 8014afc:	4620      	mov	r0, r4
 8014afe:	f000 fde2 	bl	80156c6 <_Bfree>
 8014b02:	9b08      	ldr	r3, [sp, #32]
 8014b04:	9304      	str	r3, [sp, #16]
 8014b06:	9b07      	ldr	r3, [sp, #28]
 8014b08:	1bda      	subs	r2, r3, r7
 8014b0a:	d004      	beq.n	8014b16 <_dtoa_r+0x76e>
 8014b0c:	9904      	ldr	r1, [sp, #16]
 8014b0e:	4620      	mov	r0, r4
 8014b10:	f000 ff56 	bl	80159c0 <__pow5mult>
 8014b14:	9004      	str	r0, [sp, #16]
 8014b16:	2101      	movs	r1, #1
 8014b18:	4620      	mov	r0, r4
 8014b1a:	f000 feb2 	bl	8015882 <__i2b>
 8014b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b20:	4607      	mov	r7, r0
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	f000 81d0 	beq.w	8014ec8 <_dtoa_r+0xb20>
 8014b28:	461a      	mov	r2, r3
 8014b2a:	4601      	mov	r1, r0
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	f000 ff47 	bl	80159c0 <__pow5mult>
 8014b32:	9b06      	ldr	r3, [sp, #24]
 8014b34:	2b01      	cmp	r3, #1
 8014b36:	4607      	mov	r7, r0
 8014b38:	dc40      	bgt.n	8014bbc <_dtoa_r+0x814>
 8014b3a:	9b00      	ldr	r3, [sp, #0]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d139      	bne.n	8014bb4 <_dtoa_r+0x80c>
 8014b40:	9b01      	ldr	r3, [sp, #4]
 8014b42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d136      	bne.n	8014bb8 <_dtoa_r+0x810>
 8014b4a:	9b01      	ldr	r3, [sp, #4]
 8014b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b50:	0d1b      	lsrs	r3, r3, #20
 8014b52:	051b      	lsls	r3, r3, #20
 8014b54:	b12b      	cbz	r3, 8014b62 <_dtoa_r+0x7ba>
 8014b56:	9b05      	ldr	r3, [sp, #20]
 8014b58:	3301      	adds	r3, #1
 8014b5a:	9305      	str	r3, [sp, #20]
 8014b5c:	f108 0801 	add.w	r8, r8, #1
 8014b60:	2301      	movs	r3, #1
 8014b62:	9307      	str	r3, [sp, #28]
 8014b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d12a      	bne.n	8014bc0 <_dtoa_r+0x818>
 8014b6a:	2001      	movs	r0, #1
 8014b6c:	e030      	b.n	8014bd0 <_dtoa_r+0x828>
 8014b6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014b70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014b74:	e795      	b.n	8014aa2 <_dtoa_r+0x6fa>
 8014b76:	9b07      	ldr	r3, [sp, #28]
 8014b78:	f109 37ff 	add.w	r7, r9, #4294967295
 8014b7c:	42bb      	cmp	r3, r7
 8014b7e:	bfbf      	itttt	lt
 8014b80:	9b07      	ldrlt	r3, [sp, #28]
 8014b82:	9707      	strlt	r7, [sp, #28]
 8014b84:	1afa      	sublt	r2, r7, r3
 8014b86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014b88:	bfbb      	ittet	lt
 8014b8a:	189b      	addlt	r3, r3, r2
 8014b8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014b8e:	1bdf      	subge	r7, r3, r7
 8014b90:	2700      	movlt	r7, #0
 8014b92:	f1b9 0f00 	cmp.w	r9, #0
 8014b96:	bfb5      	itete	lt
 8014b98:	9b05      	ldrlt	r3, [sp, #20]
 8014b9a:	9d05      	ldrge	r5, [sp, #20]
 8014b9c:	eba3 0509 	sublt.w	r5, r3, r9
 8014ba0:	464b      	movge	r3, r9
 8014ba2:	bfb8      	it	lt
 8014ba4:	2300      	movlt	r3, #0
 8014ba6:	e77e      	b.n	8014aa6 <_dtoa_r+0x6fe>
 8014ba8:	9f07      	ldr	r7, [sp, #28]
 8014baa:	9d05      	ldr	r5, [sp, #20]
 8014bac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014bae:	e783      	b.n	8014ab8 <_dtoa_r+0x710>
 8014bb0:	9a07      	ldr	r2, [sp, #28]
 8014bb2:	e7ab      	b.n	8014b0c <_dtoa_r+0x764>
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	e7d4      	b.n	8014b62 <_dtoa_r+0x7ba>
 8014bb8:	9b00      	ldr	r3, [sp, #0]
 8014bba:	e7d2      	b.n	8014b62 <_dtoa_r+0x7ba>
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	9307      	str	r3, [sp, #28]
 8014bc0:	693b      	ldr	r3, [r7, #16]
 8014bc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014bc6:	6918      	ldr	r0, [r3, #16]
 8014bc8:	f000 fe0d 	bl	80157e6 <__hi0bits>
 8014bcc:	f1c0 0020 	rsb	r0, r0, #32
 8014bd0:	4440      	add	r0, r8
 8014bd2:	f010 001f 	ands.w	r0, r0, #31
 8014bd6:	d047      	beq.n	8014c68 <_dtoa_r+0x8c0>
 8014bd8:	f1c0 0320 	rsb	r3, r0, #32
 8014bdc:	2b04      	cmp	r3, #4
 8014bde:	dd3b      	ble.n	8014c58 <_dtoa_r+0x8b0>
 8014be0:	9b05      	ldr	r3, [sp, #20]
 8014be2:	f1c0 001c 	rsb	r0, r0, #28
 8014be6:	4403      	add	r3, r0
 8014be8:	9305      	str	r3, [sp, #20]
 8014bea:	4405      	add	r5, r0
 8014bec:	4480      	add	r8, r0
 8014bee:	9b05      	ldr	r3, [sp, #20]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	dd05      	ble.n	8014c00 <_dtoa_r+0x858>
 8014bf4:	461a      	mov	r2, r3
 8014bf6:	9904      	ldr	r1, [sp, #16]
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	f000 ff2f 	bl	8015a5c <__lshift>
 8014bfe:	9004      	str	r0, [sp, #16]
 8014c00:	f1b8 0f00 	cmp.w	r8, #0
 8014c04:	dd05      	ble.n	8014c12 <_dtoa_r+0x86a>
 8014c06:	4639      	mov	r1, r7
 8014c08:	4642      	mov	r2, r8
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	f000 ff26 	bl	8015a5c <__lshift>
 8014c10:	4607      	mov	r7, r0
 8014c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c14:	b353      	cbz	r3, 8014c6c <_dtoa_r+0x8c4>
 8014c16:	4639      	mov	r1, r7
 8014c18:	9804      	ldr	r0, [sp, #16]
 8014c1a:	f000 ff73 	bl	8015b04 <__mcmp>
 8014c1e:	2800      	cmp	r0, #0
 8014c20:	da24      	bge.n	8014c6c <_dtoa_r+0x8c4>
 8014c22:	2300      	movs	r3, #0
 8014c24:	220a      	movs	r2, #10
 8014c26:	9904      	ldr	r1, [sp, #16]
 8014c28:	4620      	mov	r0, r4
 8014c2a:	f000 fd63 	bl	80156f4 <__multadd>
 8014c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c30:	9004      	str	r0, [sp, #16]
 8014c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	f000 814d 	beq.w	8014ed6 <_dtoa_r+0xb2e>
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	4631      	mov	r1, r6
 8014c40:	220a      	movs	r2, #10
 8014c42:	4620      	mov	r0, r4
 8014c44:	f000 fd56 	bl	80156f4 <__multadd>
 8014c48:	9b02      	ldr	r3, [sp, #8]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	4606      	mov	r6, r0
 8014c4e:	dc4f      	bgt.n	8014cf0 <_dtoa_r+0x948>
 8014c50:	9b06      	ldr	r3, [sp, #24]
 8014c52:	2b02      	cmp	r3, #2
 8014c54:	dd4c      	ble.n	8014cf0 <_dtoa_r+0x948>
 8014c56:	e011      	b.n	8014c7c <_dtoa_r+0x8d4>
 8014c58:	d0c9      	beq.n	8014bee <_dtoa_r+0x846>
 8014c5a:	9a05      	ldr	r2, [sp, #20]
 8014c5c:	331c      	adds	r3, #28
 8014c5e:	441a      	add	r2, r3
 8014c60:	9205      	str	r2, [sp, #20]
 8014c62:	441d      	add	r5, r3
 8014c64:	4498      	add	r8, r3
 8014c66:	e7c2      	b.n	8014bee <_dtoa_r+0x846>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	e7f6      	b.n	8014c5a <_dtoa_r+0x8b2>
 8014c6c:	f1b9 0f00 	cmp.w	r9, #0
 8014c70:	dc38      	bgt.n	8014ce4 <_dtoa_r+0x93c>
 8014c72:	9b06      	ldr	r3, [sp, #24]
 8014c74:	2b02      	cmp	r3, #2
 8014c76:	dd35      	ble.n	8014ce4 <_dtoa_r+0x93c>
 8014c78:	f8cd 9008 	str.w	r9, [sp, #8]
 8014c7c:	9b02      	ldr	r3, [sp, #8]
 8014c7e:	b963      	cbnz	r3, 8014c9a <_dtoa_r+0x8f2>
 8014c80:	4639      	mov	r1, r7
 8014c82:	2205      	movs	r2, #5
 8014c84:	4620      	mov	r0, r4
 8014c86:	f000 fd35 	bl	80156f4 <__multadd>
 8014c8a:	4601      	mov	r1, r0
 8014c8c:	4607      	mov	r7, r0
 8014c8e:	9804      	ldr	r0, [sp, #16]
 8014c90:	f000 ff38 	bl	8015b04 <__mcmp>
 8014c94:	2800      	cmp	r0, #0
 8014c96:	f73f adcc 	bgt.w	8014832 <_dtoa_r+0x48a>
 8014c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c9c:	465d      	mov	r5, fp
 8014c9e:	ea6f 0a03 	mvn.w	sl, r3
 8014ca2:	f04f 0900 	mov.w	r9, #0
 8014ca6:	4639      	mov	r1, r7
 8014ca8:	4620      	mov	r0, r4
 8014caa:	f000 fd0c 	bl	80156c6 <_Bfree>
 8014cae:	2e00      	cmp	r6, #0
 8014cb0:	f43f aeb7 	beq.w	8014a22 <_dtoa_r+0x67a>
 8014cb4:	f1b9 0f00 	cmp.w	r9, #0
 8014cb8:	d005      	beq.n	8014cc6 <_dtoa_r+0x91e>
 8014cba:	45b1      	cmp	r9, r6
 8014cbc:	d003      	beq.n	8014cc6 <_dtoa_r+0x91e>
 8014cbe:	4649      	mov	r1, r9
 8014cc0:	4620      	mov	r0, r4
 8014cc2:	f000 fd00 	bl	80156c6 <_Bfree>
 8014cc6:	4631      	mov	r1, r6
 8014cc8:	4620      	mov	r0, r4
 8014cca:	f000 fcfc 	bl	80156c6 <_Bfree>
 8014cce:	e6a8      	b.n	8014a22 <_dtoa_r+0x67a>
 8014cd0:	2700      	movs	r7, #0
 8014cd2:	463e      	mov	r6, r7
 8014cd4:	e7e1      	b.n	8014c9a <_dtoa_r+0x8f2>
 8014cd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014cda:	463e      	mov	r6, r7
 8014cdc:	e5a9      	b.n	8014832 <_dtoa_r+0x48a>
 8014cde:	bf00      	nop
 8014ce0:	40240000 	.word	0x40240000
 8014ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ce6:	f8cd 9008 	str.w	r9, [sp, #8]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	f000 80fa 	beq.w	8014ee4 <_dtoa_r+0xb3c>
 8014cf0:	2d00      	cmp	r5, #0
 8014cf2:	dd05      	ble.n	8014d00 <_dtoa_r+0x958>
 8014cf4:	4631      	mov	r1, r6
 8014cf6:	462a      	mov	r2, r5
 8014cf8:	4620      	mov	r0, r4
 8014cfa:	f000 feaf 	bl	8015a5c <__lshift>
 8014cfe:	4606      	mov	r6, r0
 8014d00:	9b07      	ldr	r3, [sp, #28]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d04c      	beq.n	8014da0 <_dtoa_r+0x9f8>
 8014d06:	6871      	ldr	r1, [r6, #4]
 8014d08:	4620      	mov	r0, r4
 8014d0a:	f000 fca8 	bl	801565e <_Balloc>
 8014d0e:	6932      	ldr	r2, [r6, #16]
 8014d10:	3202      	adds	r2, #2
 8014d12:	4605      	mov	r5, r0
 8014d14:	0092      	lsls	r2, r2, #2
 8014d16:	f106 010c 	add.w	r1, r6, #12
 8014d1a:	300c      	adds	r0, #12
 8014d1c:	f7fd f884 	bl	8011e28 <memcpy>
 8014d20:	2201      	movs	r2, #1
 8014d22:	4629      	mov	r1, r5
 8014d24:	4620      	mov	r0, r4
 8014d26:	f000 fe99 	bl	8015a5c <__lshift>
 8014d2a:	9b00      	ldr	r3, [sp, #0]
 8014d2c:	f8cd b014 	str.w	fp, [sp, #20]
 8014d30:	f003 0301 	and.w	r3, r3, #1
 8014d34:	46b1      	mov	r9, r6
 8014d36:	9307      	str	r3, [sp, #28]
 8014d38:	4606      	mov	r6, r0
 8014d3a:	4639      	mov	r1, r7
 8014d3c:	9804      	ldr	r0, [sp, #16]
 8014d3e:	f7ff faa7 	bl	8014290 <quorem>
 8014d42:	4649      	mov	r1, r9
 8014d44:	4605      	mov	r5, r0
 8014d46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014d4a:	9804      	ldr	r0, [sp, #16]
 8014d4c:	f000 feda 	bl	8015b04 <__mcmp>
 8014d50:	4632      	mov	r2, r6
 8014d52:	9000      	str	r0, [sp, #0]
 8014d54:	4639      	mov	r1, r7
 8014d56:	4620      	mov	r0, r4
 8014d58:	f000 feee 	bl	8015b38 <__mdiff>
 8014d5c:	68c3      	ldr	r3, [r0, #12]
 8014d5e:	4602      	mov	r2, r0
 8014d60:	bb03      	cbnz	r3, 8014da4 <_dtoa_r+0x9fc>
 8014d62:	4601      	mov	r1, r0
 8014d64:	9008      	str	r0, [sp, #32]
 8014d66:	9804      	ldr	r0, [sp, #16]
 8014d68:	f000 fecc 	bl	8015b04 <__mcmp>
 8014d6c:	9a08      	ldr	r2, [sp, #32]
 8014d6e:	4603      	mov	r3, r0
 8014d70:	4611      	mov	r1, r2
 8014d72:	4620      	mov	r0, r4
 8014d74:	9308      	str	r3, [sp, #32]
 8014d76:	f000 fca6 	bl	80156c6 <_Bfree>
 8014d7a:	9b08      	ldr	r3, [sp, #32]
 8014d7c:	b9a3      	cbnz	r3, 8014da8 <_dtoa_r+0xa00>
 8014d7e:	9a06      	ldr	r2, [sp, #24]
 8014d80:	b992      	cbnz	r2, 8014da8 <_dtoa_r+0xa00>
 8014d82:	9a07      	ldr	r2, [sp, #28]
 8014d84:	b982      	cbnz	r2, 8014da8 <_dtoa_r+0xa00>
 8014d86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014d8a:	d029      	beq.n	8014de0 <_dtoa_r+0xa38>
 8014d8c:	9b00      	ldr	r3, [sp, #0]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	dd01      	ble.n	8014d96 <_dtoa_r+0x9ee>
 8014d92:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014d96:	9b05      	ldr	r3, [sp, #20]
 8014d98:	1c5d      	adds	r5, r3, #1
 8014d9a:	f883 8000 	strb.w	r8, [r3]
 8014d9e:	e782      	b.n	8014ca6 <_dtoa_r+0x8fe>
 8014da0:	4630      	mov	r0, r6
 8014da2:	e7c2      	b.n	8014d2a <_dtoa_r+0x982>
 8014da4:	2301      	movs	r3, #1
 8014da6:	e7e3      	b.n	8014d70 <_dtoa_r+0x9c8>
 8014da8:	9a00      	ldr	r2, [sp, #0]
 8014daa:	2a00      	cmp	r2, #0
 8014dac:	db04      	blt.n	8014db8 <_dtoa_r+0xa10>
 8014dae:	d125      	bne.n	8014dfc <_dtoa_r+0xa54>
 8014db0:	9a06      	ldr	r2, [sp, #24]
 8014db2:	bb1a      	cbnz	r2, 8014dfc <_dtoa_r+0xa54>
 8014db4:	9a07      	ldr	r2, [sp, #28]
 8014db6:	bb0a      	cbnz	r2, 8014dfc <_dtoa_r+0xa54>
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	ddec      	ble.n	8014d96 <_dtoa_r+0x9ee>
 8014dbc:	2201      	movs	r2, #1
 8014dbe:	9904      	ldr	r1, [sp, #16]
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	f000 fe4b 	bl	8015a5c <__lshift>
 8014dc6:	4639      	mov	r1, r7
 8014dc8:	9004      	str	r0, [sp, #16]
 8014dca:	f000 fe9b 	bl	8015b04 <__mcmp>
 8014dce:	2800      	cmp	r0, #0
 8014dd0:	dc03      	bgt.n	8014dda <_dtoa_r+0xa32>
 8014dd2:	d1e0      	bne.n	8014d96 <_dtoa_r+0x9ee>
 8014dd4:	f018 0f01 	tst.w	r8, #1
 8014dd8:	d0dd      	beq.n	8014d96 <_dtoa_r+0x9ee>
 8014dda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014dde:	d1d8      	bne.n	8014d92 <_dtoa_r+0x9ea>
 8014de0:	9b05      	ldr	r3, [sp, #20]
 8014de2:	9a05      	ldr	r2, [sp, #20]
 8014de4:	1c5d      	adds	r5, r3, #1
 8014de6:	2339      	movs	r3, #57	; 0x39
 8014de8:	7013      	strb	r3, [r2, #0]
 8014dea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014dee:	2b39      	cmp	r3, #57	; 0x39
 8014df0:	f105 32ff 	add.w	r2, r5, #4294967295
 8014df4:	d04f      	beq.n	8014e96 <_dtoa_r+0xaee>
 8014df6:	3301      	adds	r3, #1
 8014df8:	7013      	strb	r3, [r2, #0]
 8014dfa:	e754      	b.n	8014ca6 <_dtoa_r+0x8fe>
 8014dfc:	9a05      	ldr	r2, [sp, #20]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	f102 0501 	add.w	r5, r2, #1
 8014e04:	dd06      	ble.n	8014e14 <_dtoa_r+0xa6c>
 8014e06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014e0a:	d0e9      	beq.n	8014de0 <_dtoa_r+0xa38>
 8014e0c:	f108 0801 	add.w	r8, r8, #1
 8014e10:	9b05      	ldr	r3, [sp, #20]
 8014e12:	e7c2      	b.n	8014d9a <_dtoa_r+0x9f2>
 8014e14:	9a02      	ldr	r2, [sp, #8]
 8014e16:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014e1a:	eba5 030b 	sub.w	r3, r5, fp
 8014e1e:	4293      	cmp	r3, r2
 8014e20:	d021      	beq.n	8014e66 <_dtoa_r+0xabe>
 8014e22:	2300      	movs	r3, #0
 8014e24:	220a      	movs	r2, #10
 8014e26:	9904      	ldr	r1, [sp, #16]
 8014e28:	4620      	mov	r0, r4
 8014e2a:	f000 fc63 	bl	80156f4 <__multadd>
 8014e2e:	45b1      	cmp	r9, r6
 8014e30:	9004      	str	r0, [sp, #16]
 8014e32:	f04f 0300 	mov.w	r3, #0
 8014e36:	f04f 020a 	mov.w	r2, #10
 8014e3a:	4649      	mov	r1, r9
 8014e3c:	4620      	mov	r0, r4
 8014e3e:	d105      	bne.n	8014e4c <_dtoa_r+0xaa4>
 8014e40:	f000 fc58 	bl	80156f4 <__multadd>
 8014e44:	4681      	mov	r9, r0
 8014e46:	4606      	mov	r6, r0
 8014e48:	9505      	str	r5, [sp, #20]
 8014e4a:	e776      	b.n	8014d3a <_dtoa_r+0x992>
 8014e4c:	f000 fc52 	bl	80156f4 <__multadd>
 8014e50:	4631      	mov	r1, r6
 8014e52:	4681      	mov	r9, r0
 8014e54:	2300      	movs	r3, #0
 8014e56:	220a      	movs	r2, #10
 8014e58:	4620      	mov	r0, r4
 8014e5a:	f000 fc4b 	bl	80156f4 <__multadd>
 8014e5e:	4606      	mov	r6, r0
 8014e60:	e7f2      	b.n	8014e48 <_dtoa_r+0xaa0>
 8014e62:	f04f 0900 	mov.w	r9, #0
 8014e66:	2201      	movs	r2, #1
 8014e68:	9904      	ldr	r1, [sp, #16]
 8014e6a:	4620      	mov	r0, r4
 8014e6c:	f000 fdf6 	bl	8015a5c <__lshift>
 8014e70:	4639      	mov	r1, r7
 8014e72:	9004      	str	r0, [sp, #16]
 8014e74:	f000 fe46 	bl	8015b04 <__mcmp>
 8014e78:	2800      	cmp	r0, #0
 8014e7a:	dcb6      	bgt.n	8014dea <_dtoa_r+0xa42>
 8014e7c:	d102      	bne.n	8014e84 <_dtoa_r+0xadc>
 8014e7e:	f018 0f01 	tst.w	r8, #1
 8014e82:	d1b2      	bne.n	8014dea <_dtoa_r+0xa42>
 8014e84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014e88:	2b30      	cmp	r3, #48	; 0x30
 8014e8a:	f105 32ff 	add.w	r2, r5, #4294967295
 8014e8e:	f47f af0a 	bne.w	8014ca6 <_dtoa_r+0x8fe>
 8014e92:	4615      	mov	r5, r2
 8014e94:	e7f6      	b.n	8014e84 <_dtoa_r+0xadc>
 8014e96:	4593      	cmp	fp, r2
 8014e98:	d105      	bne.n	8014ea6 <_dtoa_r+0xafe>
 8014e9a:	2331      	movs	r3, #49	; 0x31
 8014e9c:	f10a 0a01 	add.w	sl, sl, #1
 8014ea0:	f88b 3000 	strb.w	r3, [fp]
 8014ea4:	e6ff      	b.n	8014ca6 <_dtoa_r+0x8fe>
 8014ea6:	4615      	mov	r5, r2
 8014ea8:	e79f      	b.n	8014dea <_dtoa_r+0xa42>
 8014eaa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014f10 <_dtoa_r+0xb68>
 8014eae:	e007      	b.n	8014ec0 <_dtoa_r+0xb18>
 8014eb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014eb2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014f14 <_dtoa_r+0xb6c>
 8014eb6:	b11b      	cbz	r3, 8014ec0 <_dtoa_r+0xb18>
 8014eb8:	f10b 0308 	add.w	r3, fp, #8
 8014ebc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014ebe:	6013      	str	r3, [r2, #0]
 8014ec0:	4658      	mov	r0, fp
 8014ec2:	b017      	add	sp, #92	; 0x5c
 8014ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ec8:	9b06      	ldr	r3, [sp, #24]
 8014eca:	2b01      	cmp	r3, #1
 8014ecc:	f77f ae35 	ble.w	8014b3a <_dtoa_r+0x792>
 8014ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ed2:	9307      	str	r3, [sp, #28]
 8014ed4:	e649      	b.n	8014b6a <_dtoa_r+0x7c2>
 8014ed6:	9b02      	ldr	r3, [sp, #8]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	dc03      	bgt.n	8014ee4 <_dtoa_r+0xb3c>
 8014edc:	9b06      	ldr	r3, [sp, #24]
 8014ede:	2b02      	cmp	r3, #2
 8014ee0:	f73f aecc 	bgt.w	8014c7c <_dtoa_r+0x8d4>
 8014ee4:	465d      	mov	r5, fp
 8014ee6:	4639      	mov	r1, r7
 8014ee8:	9804      	ldr	r0, [sp, #16]
 8014eea:	f7ff f9d1 	bl	8014290 <quorem>
 8014eee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014ef2:	f805 8b01 	strb.w	r8, [r5], #1
 8014ef6:	9a02      	ldr	r2, [sp, #8]
 8014ef8:	eba5 030b 	sub.w	r3, r5, fp
 8014efc:	429a      	cmp	r2, r3
 8014efe:	ddb0      	ble.n	8014e62 <_dtoa_r+0xaba>
 8014f00:	2300      	movs	r3, #0
 8014f02:	220a      	movs	r2, #10
 8014f04:	9904      	ldr	r1, [sp, #16]
 8014f06:	4620      	mov	r0, r4
 8014f08:	f000 fbf4 	bl	80156f4 <__multadd>
 8014f0c:	9004      	str	r0, [sp, #16]
 8014f0e:	e7ea      	b.n	8014ee6 <_dtoa_r+0xb3e>
 8014f10:	080166d5 	.word	0x080166d5
 8014f14:	08016750 	.word	0x08016750

08014f18 <_fstat_r>:
 8014f18:	b538      	push	{r3, r4, r5, lr}
 8014f1a:	4c07      	ldr	r4, [pc, #28]	; (8014f38 <_fstat_r+0x20>)
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	4605      	mov	r5, r0
 8014f20:	4608      	mov	r0, r1
 8014f22:	4611      	mov	r1, r2
 8014f24:	6023      	str	r3, [r4, #0]
 8014f26:	f7f9 fabd 	bl	800e4a4 <_fstat>
 8014f2a:	1c43      	adds	r3, r0, #1
 8014f2c:	d102      	bne.n	8014f34 <_fstat_r+0x1c>
 8014f2e:	6823      	ldr	r3, [r4, #0]
 8014f30:	b103      	cbz	r3, 8014f34 <_fstat_r+0x1c>
 8014f32:	602b      	str	r3, [r5, #0]
 8014f34:	bd38      	pop	{r3, r4, r5, pc}
 8014f36:	bf00      	nop
 8014f38:	20006db8 	.word	0x20006db8

08014f3c <rshift>:
 8014f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f3e:	6906      	ldr	r6, [r0, #16]
 8014f40:	114b      	asrs	r3, r1, #5
 8014f42:	429e      	cmp	r6, r3
 8014f44:	f100 0414 	add.w	r4, r0, #20
 8014f48:	dd30      	ble.n	8014fac <rshift+0x70>
 8014f4a:	f011 011f 	ands.w	r1, r1, #31
 8014f4e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8014f52:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8014f56:	d108      	bne.n	8014f6a <rshift+0x2e>
 8014f58:	4621      	mov	r1, r4
 8014f5a:	42b2      	cmp	r2, r6
 8014f5c:	460b      	mov	r3, r1
 8014f5e:	d211      	bcs.n	8014f84 <rshift+0x48>
 8014f60:	f852 3b04 	ldr.w	r3, [r2], #4
 8014f64:	f841 3b04 	str.w	r3, [r1], #4
 8014f68:	e7f7      	b.n	8014f5a <rshift+0x1e>
 8014f6a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8014f6e:	f1c1 0c20 	rsb	ip, r1, #32
 8014f72:	40cd      	lsrs	r5, r1
 8014f74:	3204      	adds	r2, #4
 8014f76:	4623      	mov	r3, r4
 8014f78:	42b2      	cmp	r2, r6
 8014f7a:	4617      	mov	r7, r2
 8014f7c:	d30c      	bcc.n	8014f98 <rshift+0x5c>
 8014f7e:	601d      	str	r5, [r3, #0]
 8014f80:	b105      	cbz	r5, 8014f84 <rshift+0x48>
 8014f82:	3304      	adds	r3, #4
 8014f84:	1b1a      	subs	r2, r3, r4
 8014f86:	42a3      	cmp	r3, r4
 8014f88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014f8c:	bf08      	it	eq
 8014f8e:	2300      	moveq	r3, #0
 8014f90:	6102      	str	r2, [r0, #16]
 8014f92:	bf08      	it	eq
 8014f94:	6143      	streq	r3, [r0, #20]
 8014f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f98:	683f      	ldr	r7, [r7, #0]
 8014f9a:	fa07 f70c 	lsl.w	r7, r7, ip
 8014f9e:	433d      	orrs	r5, r7
 8014fa0:	f843 5b04 	str.w	r5, [r3], #4
 8014fa4:	f852 5b04 	ldr.w	r5, [r2], #4
 8014fa8:	40cd      	lsrs	r5, r1
 8014faa:	e7e5      	b.n	8014f78 <rshift+0x3c>
 8014fac:	4623      	mov	r3, r4
 8014fae:	e7e9      	b.n	8014f84 <rshift+0x48>

08014fb0 <__hexdig_fun>:
 8014fb0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014fb4:	2b09      	cmp	r3, #9
 8014fb6:	d802      	bhi.n	8014fbe <__hexdig_fun+0xe>
 8014fb8:	3820      	subs	r0, #32
 8014fba:	b2c0      	uxtb	r0, r0
 8014fbc:	4770      	bx	lr
 8014fbe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014fc2:	2b05      	cmp	r3, #5
 8014fc4:	d801      	bhi.n	8014fca <__hexdig_fun+0x1a>
 8014fc6:	3847      	subs	r0, #71	; 0x47
 8014fc8:	e7f7      	b.n	8014fba <__hexdig_fun+0xa>
 8014fca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014fce:	2b05      	cmp	r3, #5
 8014fd0:	d801      	bhi.n	8014fd6 <__hexdig_fun+0x26>
 8014fd2:	3827      	subs	r0, #39	; 0x27
 8014fd4:	e7f1      	b.n	8014fba <__hexdig_fun+0xa>
 8014fd6:	2000      	movs	r0, #0
 8014fd8:	4770      	bx	lr

08014fda <__gethex>:
 8014fda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fde:	b08b      	sub	sp, #44	; 0x2c
 8014fe0:	468a      	mov	sl, r1
 8014fe2:	9002      	str	r0, [sp, #8]
 8014fe4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014fe6:	9306      	str	r3, [sp, #24]
 8014fe8:	4690      	mov	r8, r2
 8014fea:	f000 fae0 	bl	80155ae <__localeconv_l>
 8014fee:	6803      	ldr	r3, [r0, #0]
 8014ff0:	9303      	str	r3, [sp, #12]
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7f3 f824 	bl	8008040 <strlen>
 8014ff8:	9b03      	ldr	r3, [sp, #12]
 8014ffa:	9001      	str	r0, [sp, #4]
 8014ffc:	4403      	add	r3, r0
 8014ffe:	f04f 0b00 	mov.w	fp, #0
 8015002:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015006:	9307      	str	r3, [sp, #28]
 8015008:	f8da 3000 	ldr.w	r3, [sl]
 801500c:	3302      	adds	r3, #2
 801500e:	461f      	mov	r7, r3
 8015010:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015014:	2830      	cmp	r0, #48	; 0x30
 8015016:	d06c      	beq.n	80150f2 <__gethex+0x118>
 8015018:	f7ff ffca 	bl	8014fb0 <__hexdig_fun>
 801501c:	4604      	mov	r4, r0
 801501e:	2800      	cmp	r0, #0
 8015020:	d16a      	bne.n	80150f8 <__gethex+0x11e>
 8015022:	9a01      	ldr	r2, [sp, #4]
 8015024:	9903      	ldr	r1, [sp, #12]
 8015026:	4638      	mov	r0, r7
 8015028:	f001 f8e6 	bl	80161f8 <strncmp>
 801502c:	2800      	cmp	r0, #0
 801502e:	d166      	bne.n	80150fe <__gethex+0x124>
 8015030:	9b01      	ldr	r3, [sp, #4]
 8015032:	5cf8      	ldrb	r0, [r7, r3]
 8015034:	18fe      	adds	r6, r7, r3
 8015036:	f7ff ffbb 	bl	8014fb0 <__hexdig_fun>
 801503a:	2800      	cmp	r0, #0
 801503c:	d062      	beq.n	8015104 <__gethex+0x12a>
 801503e:	4633      	mov	r3, r6
 8015040:	7818      	ldrb	r0, [r3, #0]
 8015042:	2830      	cmp	r0, #48	; 0x30
 8015044:	461f      	mov	r7, r3
 8015046:	f103 0301 	add.w	r3, r3, #1
 801504a:	d0f9      	beq.n	8015040 <__gethex+0x66>
 801504c:	f7ff ffb0 	bl	8014fb0 <__hexdig_fun>
 8015050:	fab0 f580 	clz	r5, r0
 8015054:	096d      	lsrs	r5, r5, #5
 8015056:	4634      	mov	r4, r6
 8015058:	f04f 0b01 	mov.w	fp, #1
 801505c:	463a      	mov	r2, r7
 801505e:	4616      	mov	r6, r2
 8015060:	3201      	adds	r2, #1
 8015062:	7830      	ldrb	r0, [r6, #0]
 8015064:	f7ff ffa4 	bl	8014fb0 <__hexdig_fun>
 8015068:	2800      	cmp	r0, #0
 801506a:	d1f8      	bne.n	801505e <__gethex+0x84>
 801506c:	9a01      	ldr	r2, [sp, #4]
 801506e:	9903      	ldr	r1, [sp, #12]
 8015070:	4630      	mov	r0, r6
 8015072:	f001 f8c1 	bl	80161f8 <strncmp>
 8015076:	b950      	cbnz	r0, 801508e <__gethex+0xb4>
 8015078:	b954      	cbnz	r4, 8015090 <__gethex+0xb6>
 801507a:	9b01      	ldr	r3, [sp, #4]
 801507c:	18f4      	adds	r4, r6, r3
 801507e:	4622      	mov	r2, r4
 8015080:	4616      	mov	r6, r2
 8015082:	3201      	adds	r2, #1
 8015084:	7830      	ldrb	r0, [r6, #0]
 8015086:	f7ff ff93 	bl	8014fb0 <__hexdig_fun>
 801508a:	2800      	cmp	r0, #0
 801508c:	d1f8      	bne.n	8015080 <__gethex+0xa6>
 801508e:	b10c      	cbz	r4, 8015094 <__gethex+0xba>
 8015090:	1ba4      	subs	r4, r4, r6
 8015092:	00a4      	lsls	r4, r4, #2
 8015094:	7833      	ldrb	r3, [r6, #0]
 8015096:	2b50      	cmp	r3, #80	; 0x50
 8015098:	d001      	beq.n	801509e <__gethex+0xc4>
 801509a:	2b70      	cmp	r3, #112	; 0x70
 801509c:	d140      	bne.n	8015120 <__gethex+0x146>
 801509e:	7873      	ldrb	r3, [r6, #1]
 80150a0:	2b2b      	cmp	r3, #43	; 0x2b
 80150a2:	d031      	beq.n	8015108 <__gethex+0x12e>
 80150a4:	2b2d      	cmp	r3, #45	; 0x2d
 80150a6:	d033      	beq.n	8015110 <__gethex+0x136>
 80150a8:	1c71      	adds	r1, r6, #1
 80150aa:	f04f 0900 	mov.w	r9, #0
 80150ae:	7808      	ldrb	r0, [r1, #0]
 80150b0:	f7ff ff7e 	bl	8014fb0 <__hexdig_fun>
 80150b4:	1e43      	subs	r3, r0, #1
 80150b6:	b2db      	uxtb	r3, r3
 80150b8:	2b18      	cmp	r3, #24
 80150ba:	d831      	bhi.n	8015120 <__gethex+0x146>
 80150bc:	f1a0 0210 	sub.w	r2, r0, #16
 80150c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80150c4:	f7ff ff74 	bl	8014fb0 <__hexdig_fun>
 80150c8:	1e43      	subs	r3, r0, #1
 80150ca:	b2db      	uxtb	r3, r3
 80150cc:	2b18      	cmp	r3, #24
 80150ce:	d922      	bls.n	8015116 <__gethex+0x13c>
 80150d0:	f1b9 0f00 	cmp.w	r9, #0
 80150d4:	d000      	beq.n	80150d8 <__gethex+0xfe>
 80150d6:	4252      	negs	r2, r2
 80150d8:	4414      	add	r4, r2
 80150da:	f8ca 1000 	str.w	r1, [sl]
 80150de:	b30d      	cbz	r5, 8015124 <__gethex+0x14a>
 80150e0:	f1bb 0f00 	cmp.w	fp, #0
 80150e4:	bf0c      	ite	eq
 80150e6:	2706      	moveq	r7, #6
 80150e8:	2700      	movne	r7, #0
 80150ea:	4638      	mov	r0, r7
 80150ec:	b00b      	add	sp, #44	; 0x2c
 80150ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150f2:	f10b 0b01 	add.w	fp, fp, #1
 80150f6:	e78a      	b.n	801500e <__gethex+0x34>
 80150f8:	2500      	movs	r5, #0
 80150fa:	462c      	mov	r4, r5
 80150fc:	e7ae      	b.n	801505c <__gethex+0x82>
 80150fe:	463e      	mov	r6, r7
 8015100:	2501      	movs	r5, #1
 8015102:	e7c7      	b.n	8015094 <__gethex+0xba>
 8015104:	4604      	mov	r4, r0
 8015106:	e7fb      	b.n	8015100 <__gethex+0x126>
 8015108:	f04f 0900 	mov.w	r9, #0
 801510c:	1cb1      	adds	r1, r6, #2
 801510e:	e7ce      	b.n	80150ae <__gethex+0xd4>
 8015110:	f04f 0901 	mov.w	r9, #1
 8015114:	e7fa      	b.n	801510c <__gethex+0x132>
 8015116:	230a      	movs	r3, #10
 8015118:	fb03 0202 	mla	r2, r3, r2, r0
 801511c:	3a10      	subs	r2, #16
 801511e:	e7cf      	b.n	80150c0 <__gethex+0xe6>
 8015120:	4631      	mov	r1, r6
 8015122:	e7da      	b.n	80150da <__gethex+0x100>
 8015124:	1bf3      	subs	r3, r6, r7
 8015126:	3b01      	subs	r3, #1
 8015128:	4629      	mov	r1, r5
 801512a:	2b07      	cmp	r3, #7
 801512c:	dc49      	bgt.n	80151c2 <__gethex+0x1e8>
 801512e:	9802      	ldr	r0, [sp, #8]
 8015130:	f000 fa95 	bl	801565e <_Balloc>
 8015134:	9b01      	ldr	r3, [sp, #4]
 8015136:	f100 0914 	add.w	r9, r0, #20
 801513a:	f04f 0b00 	mov.w	fp, #0
 801513e:	f1c3 0301 	rsb	r3, r3, #1
 8015142:	4605      	mov	r5, r0
 8015144:	f8cd 9010 	str.w	r9, [sp, #16]
 8015148:	46da      	mov	sl, fp
 801514a:	9308      	str	r3, [sp, #32]
 801514c:	42b7      	cmp	r7, r6
 801514e:	d33b      	bcc.n	80151c8 <__gethex+0x1ee>
 8015150:	9804      	ldr	r0, [sp, #16]
 8015152:	f840 ab04 	str.w	sl, [r0], #4
 8015156:	eba0 0009 	sub.w	r0, r0, r9
 801515a:	1080      	asrs	r0, r0, #2
 801515c:	6128      	str	r0, [r5, #16]
 801515e:	0147      	lsls	r7, r0, #5
 8015160:	4650      	mov	r0, sl
 8015162:	f000 fb40 	bl	80157e6 <__hi0bits>
 8015166:	f8d8 6000 	ldr.w	r6, [r8]
 801516a:	1a3f      	subs	r7, r7, r0
 801516c:	42b7      	cmp	r7, r6
 801516e:	dd64      	ble.n	801523a <__gethex+0x260>
 8015170:	1bbf      	subs	r7, r7, r6
 8015172:	4639      	mov	r1, r7
 8015174:	4628      	mov	r0, r5
 8015176:	f000 fe4f 	bl	8015e18 <__any_on>
 801517a:	4682      	mov	sl, r0
 801517c:	b178      	cbz	r0, 801519e <__gethex+0x1c4>
 801517e:	1e7b      	subs	r3, r7, #1
 8015180:	1159      	asrs	r1, r3, #5
 8015182:	f003 021f 	and.w	r2, r3, #31
 8015186:	f04f 0a01 	mov.w	sl, #1
 801518a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801518e:	fa0a f202 	lsl.w	r2, sl, r2
 8015192:	420a      	tst	r2, r1
 8015194:	d003      	beq.n	801519e <__gethex+0x1c4>
 8015196:	4553      	cmp	r3, sl
 8015198:	dc46      	bgt.n	8015228 <__gethex+0x24e>
 801519a:	f04f 0a02 	mov.w	sl, #2
 801519e:	4639      	mov	r1, r7
 80151a0:	4628      	mov	r0, r5
 80151a2:	f7ff fecb 	bl	8014f3c <rshift>
 80151a6:	443c      	add	r4, r7
 80151a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80151ac:	42a3      	cmp	r3, r4
 80151ae:	da52      	bge.n	8015256 <__gethex+0x27c>
 80151b0:	4629      	mov	r1, r5
 80151b2:	9802      	ldr	r0, [sp, #8]
 80151b4:	f000 fa87 	bl	80156c6 <_Bfree>
 80151b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80151ba:	2300      	movs	r3, #0
 80151bc:	6013      	str	r3, [r2, #0]
 80151be:	27a3      	movs	r7, #163	; 0xa3
 80151c0:	e793      	b.n	80150ea <__gethex+0x110>
 80151c2:	3101      	adds	r1, #1
 80151c4:	105b      	asrs	r3, r3, #1
 80151c6:	e7b0      	b.n	801512a <__gethex+0x150>
 80151c8:	1e73      	subs	r3, r6, #1
 80151ca:	9305      	str	r3, [sp, #20]
 80151cc:	9a07      	ldr	r2, [sp, #28]
 80151ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80151d2:	4293      	cmp	r3, r2
 80151d4:	d018      	beq.n	8015208 <__gethex+0x22e>
 80151d6:	f1bb 0f20 	cmp.w	fp, #32
 80151da:	d107      	bne.n	80151ec <__gethex+0x212>
 80151dc:	9b04      	ldr	r3, [sp, #16]
 80151de:	f8c3 a000 	str.w	sl, [r3]
 80151e2:	3304      	adds	r3, #4
 80151e4:	f04f 0a00 	mov.w	sl, #0
 80151e8:	9304      	str	r3, [sp, #16]
 80151ea:	46d3      	mov	fp, sl
 80151ec:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80151f0:	f7ff fede 	bl	8014fb0 <__hexdig_fun>
 80151f4:	f000 000f 	and.w	r0, r0, #15
 80151f8:	fa00 f00b 	lsl.w	r0, r0, fp
 80151fc:	ea4a 0a00 	orr.w	sl, sl, r0
 8015200:	f10b 0b04 	add.w	fp, fp, #4
 8015204:	9b05      	ldr	r3, [sp, #20]
 8015206:	e00d      	b.n	8015224 <__gethex+0x24a>
 8015208:	9b05      	ldr	r3, [sp, #20]
 801520a:	9a08      	ldr	r2, [sp, #32]
 801520c:	4413      	add	r3, r2
 801520e:	42bb      	cmp	r3, r7
 8015210:	d3e1      	bcc.n	80151d6 <__gethex+0x1fc>
 8015212:	4618      	mov	r0, r3
 8015214:	9a01      	ldr	r2, [sp, #4]
 8015216:	9903      	ldr	r1, [sp, #12]
 8015218:	9309      	str	r3, [sp, #36]	; 0x24
 801521a:	f000 ffed 	bl	80161f8 <strncmp>
 801521e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015220:	2800      	cmp	r0, #0
 8015222:	d1d8      	bne.n	80151d6 <__gethex+0x1fc>
 8015224:	461e      	mov	r6, r3
 8015226:	e791      	b.n	801514c <__gethex+0x172>
 8015228:	1eb9      	subs	r1, r7, #2
 801522a:	4628      	mov	r0, r5
 801522c:	f000 fdf4 	bl	8015e18 <__any_on>
 8015230:	2800      	cmp	r0, #0
 8015232:	d0b2      	beq.n	801519a <__gethex+0x1c0>
 8015234:	f04f 0a03 	mov.w	sl, #3
 8015238:	e7b1      	b.n	801519e <__gethex+0x1c4>
 801523a:	da09      	bge.n	8015250 <__gethex+0x276>
 801523c:	1bf7      	subs	r7, r6, r7
 801523e:	4629      	mov	r1, r5
 8015240:	463a      	mov	r2, r7
 8015242:	9802      	ldr	r0, [sp, #8]
 8015244:	f000 fc0a 	bl	8015a5c <__lshift>
 8015248:	1be4      	subs	r4, r4, r7
 801524a:	4605      	mov	r5, r0
 801524c:	f100 0914 	add.w	r9, r0, #20
 8015250:	f04f 0a00 	mov.w	sl, #0
 8015254:	e7a8      	b.n	80151a8 <__gethex+0x1ce>
 8015256:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801525a:	42a0      	cmp	r0, r4
 801525c:	dd6a      	ble.n	8015334 <__gethex+0x35a>
 801525e:	1b04      	subs	r4, r0, r4
 8015260:	42a6      	cmp	r6, r4
 8015262:	dc2e      	bgt.n	80152c2 <__gethex+0x2e8>
 8015264:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015268:	2b02      	cmp	r3, #2
 801526a:	d022      	beq.n	80152b2 <__gethex+0x2d8>
 801526c:	2b03      	cmp	r3, #3
 801526e:	d024      	beq.n	80152ba <__gethex+0x2e0>
 8015270:	2b01      	cmp	r3, #1
 8015272:	d115      	bne.n	80152a0 <__gethex+0x2c6>
 8015274:	42a6      	cmp	r6, r4
 8015276:	d113      	bne.n	80152a0 <__gethex+0x2c6>
 8015278:	2e01      	cmp	r6, #1
 801527a:	dc0b      	bgt.n	8015294 <__gethex+0x2ba>
 801527c:	9a06      	ldr	r2, [sp, #24]
 801527e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015282:	6013      	str	r3, [r2, #0]
 8015284:	2301      	movs	r3, #1
 8015286:	612b      	str	r3, [r5, #16]
 8015288:	f8c9 3000 	str.w	r3, [r9]
 801528c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801528e:	2762      	movs	r7, #98	; 0x62
 8015290:	601d      	str	r5, [r3, #0]
 8015292:	e72a      	b.n	80150ea <__gethex+0x110>
 8015294:	1e71      	subs	r1, r6, #1
 8015296:	4628      	mov	r0, r5
 8015298:	f000 fdbe 	bl	8015e18 <__any_on>
 801529c:	2800      	cmp	r0, #0
 801529e:	d1ed      	bne.n	801527c <__gethex+0x2a2>
 80152a0:	4629      	mov	r1, r5
 80152a2:	9802      	ldr	r0, [sp, #8]
 80152a4:	f000 fa0f 	bl	80156c6 <_Bfree>
 80152a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80152aa:	2300      	movs	r3, #0
 80152ac:	6013      	str	r3, [r2, #0]
 80152ae:	2750      	movs	r7, #80	; 0x50
 80152b0:	e71b      	b.n	80150ea <__gethex+0x110>
 80152b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d0e1      	beq.n	801527c <__gethex+0x2a2>
 80152b8:	e7f2      	b.n	80152a0 <__gethex+0x2c6>
 80152ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d1dd      	bne.n	801527c <__gethex+0x2a2>
 80152c0:	e7ee      	b.n	80152a0 <__gethex+0x2c6>
 80152c2:	1e67      	subs	r7, r4, #1
 80152c4:	f1ba 0f00 	cmp.w	sl, #0
 80152c8:	d131      	bne.n	801532e <__gethex+0x354>
 80152ca:	b127      	cbz	r7, 80152d6 <__gethex+0x2fc>
 80152cc:	4639      	mov	r1, r7
 80152ce:	4628      	mov	r0, r5
 80152d0:	f000 fda2 	bl	8015e18 <__any_on>
 80152d4:	4682      	mov	sl, r0
 80152d6:	117a      	asrs	r2, r7, #5
 80152d8:	2301      	movs	r3, #1
 80152da:	f007 071f 	and.w	r7, r7, #31
 80152de:	fa03 f707 	lsl.w	r7, r3, r7
 80152e2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80152e6:	4621      	mov	r1, r4
 80152e8:	421f      	tst	r7, r3
 80152ea:	4628      	mov	r0, r5
 80152ec:	bf18      	it	ne
 80152ee:	f04a 0a02 	orrne.w	sl, sl, #2
 80152f2:	1b36      	subs	r6, r6, r4
 80152f4:	f7ff fe22 	bl	8014f3c <rshift>
 80152f8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80152fc:	2702      	movs	r7, #2
 80152fe:	f1ba 0f00 	cmp.w	sl, #0
 8015302:	d048      	beq.n	8015396 <__gethex+0x3bc>
 8015304:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015308:	2b02      	cmp	r3, #2
 801530a:	d015      	beq.n	8015338 <__gethex+0x35e>
 801530c:	2b03      	cmp	r3, #3
 801530e:	d017      	beq.n	8015340 <__gethex+0x366>
 8015310:	2b01      	cmp	r3, #1
 8015312:	d109      	bne.n	8015328 <__gethex+0x34e>
 8015314:	f01a 0f02 	tst.w	sl, #2
 8015318:	d006      	beq.n	8015328 <__gethex+0x34e>
 801531a:	f8d9 3000 	ldr.w	r3, [r9]
 801531e:	ea4a 0a03 	orr.w	sl, sl, r3
 8015322:	f01a 0f01 	tst.w	sl, #1
 8015326:	d10e      	bne.n	8015346 <__gethex+0x36c>
 8015328:	f047 0710 	orr.w	r7, r7, #16
 801532c:	e033      	b.n	8015396 <__gethex+0x3bc>
 801532e:	f04f 0a01 	mov.w	sl, #1
 8015332:	e7d0      	b.n	80152d6 <__gethex+0x2fc>
 8015334:	2701      	movs	r7, #1
 8015336:	e7e2      	b.n	80152fe <__gethex+0x324>
 8015338:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801533a:	f1c3 0301 	rsb	r3, r3, #1
 801533e:	9315      	str	r3, [sp, #84]	; 0x54
 8015340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015342:	2b00      	cmp	r3, #0
 8015344:	d0f0      	beq.n	8015328 <__gethex+0x34e>
 8015346:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801534a:	f105 0314 	add.w	r3, r5, #20
 801534e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015352:	eb03 010a 	add.w	r1, r3, sl
 8015356:	f04f 0c00 	mov.w	ip, #0
 801535a:	4618      	mov	r0, r3
 801535c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015360:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015364:	d01c      	beq.n	80153a0 <__gethex+0x3c6>
 8015366:	3201      	adds	r2, #1
 8015368:	6002      	str	r2, [r0, #0]
 801536a:	2f02      	cmp	r7, #2
 801536c:	f105 0314 	add.w	r3, r5, #20
 8015370:	d138      	bne.n	80153e4 <__gethex+0x40a>
 8015372:	f8d8 2000 	ldr.w	r2, [r8]
 8015376:	3a01      	subs	r2, #1
 8015378:	42b2      	cmp	r2, r6
 801537a:	d10a      	bne.n	8015392 <__gethex+0x3b8>
 801537c:	1171      	asrs	r1, r6, #5
 801537e:	2201      	movs	r2, #1
 8015380:	f006 061f 	and.w	r6, r6, #31
 8015384:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015388:	fa02 f606 	lsl.w	r6, r2, r6
 801538c:	421e      	tst	r6, r3
 801538e:	bf18      	it	ne
 8015390:	4617      	movne	r7, r2
 8015392:	f047 0720 	orr.w	r7, r7, #32
 8015396:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015398:	601d      	str	r5, [r3, #0]
 801539a:	9b06      	ldr	r3, [sp, #24]
 801539c:	601c      	str	r4, [r3, #0]
 801539e:	e6a4      	b.n	80150ea <__gethex+0x110>
 80153a0:	4299      	cmp	r1, r3
 80153a2:	f843 cc04 	str.w	ip, [r3, #-4]
 80153a6:	d8d8      	bhi.n	801535a <__gethex+0x380>
 80153a8:	68ab      	ldr	r3, [r5, #8]
 80153aa:	4599      	cmp	r9, r3
 80153ac:	db12      	blt.n	80153d4 <__gethex+0x3fa>
 80153ae:	6869      	ldr	r1, [r5, #4]
 80153b0:	9802      	ldr	r0, [sp, #8]
 80153b2:	3101      	adds	r1, #1
 80153b4:	f000 f953 	bl	801565e <_Balloc>
 80153b8:	692a      	ldr	r2, [r5, #16]
 80153ba:	3202      	adds	r2, #2
 80153bc:	f105 010c 	add.w	r1, r5, #12
 80153c0:	4683      	mov	fp, r0
 80153c2:	0092      	lsls	r2, r2, #2
 80153c4:	300c      	adds	r0, #12
 80153c6:	f7fc fd2f 	bl	8011e28 <memcpy>
 80153ca:	4629      	mov	r1, r5
 80153cc:	9802      	ldr	r0, [sp, #8]
 80153ce:	f000 f97a 	bl	80156c6 <_Bfree>
 80153d2:	465d      	mov	r5, fp
 80153d4:	692b      	ldr	r3, [r5, #16]
 80153d6:	1c5a      	adds	r2, r3, #1
 80153d8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80153dc:	612a      	str	r2, [r5, #16]
 80153de:	2201      	movs	r2, #1
 80153e0:	615a      	str	r2, [r3, #20]
 80153e2:	e7c2      	b.n	801536a <__gethex+0x390>
 80153e4:	692a      	ldr	r2, [r5, #16]
 80153e6:	454a      	cmp	r2, r9
 80153e8:	dd0b      	ble.n	8015402 <__gethex+0x428>
 80153ea:	2101      	movs	r1, #1
 80153ec:	4628      	mov	r0, r5
 80153ee:	f7ff fda5 	bl	8014f3c <rshift>
 80153f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153f6:	3401      	adds	r4, #1
 80153f8:	42a3      	cmp	r3, r4
 80153fa:	f6ff aed9 	blt.w	80151b0 <__gethex+0x1d6>
 80153fe:	2701      	movs	r7, #1
 8015400:	e7c7      	b.n	8015392 <__gethex+0x3b8>
 8015402:	f016 061f 	ands.w	r6, r6, #31
 8015406:	d0fa      	beq.n	80153fe <__gethex+0x424>
 8015408:	449a      	add	sl, r3
 801540a:	f1c6 0620 	rsb	r6, r6, #32
 801540e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015412:	f000 f9e8 	bl	80157e6 <__hi0bits>
 8015416:	42b0      	cmp	r0, r6
 8015418:	dbe7      	blt.n	80153ea <__gethex+0x410>
 801541a:	e7f0      	b.n	80153fe <__gethex+0x424>

0801541c <L_shift>:
 801541c:	f1c2 0208 	rsb	r2, r2, #8
 8015420:	0092      	lsls	r2, r2, #2
 8015422:	b570      	push	{r4, r5, r6, lr}
 8015424:	f1c2 0620 	rsb	r6, r2, #32
 8015428:	6843      	ldr	r3, [r0, #4]
 801542a:	6804      	ldr	r4, [r0, #0]
 801542c:	fa03 f506 	lsl.w	r5, r3, r6
 8015430:	432c      	orrs	r4, r5
 8015432:	40d3      	lsrs	r3, r2
 8015434:	6004      	str	r4, [r0, #0]
 8015436:	f840 3f04 	str.w	r3, [r0, #4]!
 801543a:	4288      	cmp	r0, r1
 801543c:	d3f4      	bcc.n	8015428 <L_shift+0xc>
 801543e:	bd70      	pop	{r4, r5, r6, pc}

08015440 <__match>:
 8015440:	b530      	push	{r4, r5, lr}
 8015442:	6803      	ldr	r3, [r0, #0]
 8015444:	3301      	adds	r3, #1
 8015446:	f811 4b01 	ldrb.w	r4, [r1], #1
 801544a:	b914      	cbnz	r4, 8015452 <__match+0x12>
 801544c:	6003      	str	r3, [r0, #0]
 801544e:	2001      	movs	r0, #1
 8015450:	bd30      	pop	{r4, r5, pc}
 8015452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015456:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801545a:	2d19      	cmp	r5, #25
 801545c:	bf98      	it	ls
 801545e:	3220      	addls	r2, #32
 8015460:	42a2      	cmp	r2, r4
 8015462:	d0f0      	beq.n	8015446 <__match+0x6>
 8015464:	2000      	movs	r0, #0
 8015466:	e7f3      	b.n	8015450 <__match+0x10>

08015468 <__hexnan>:
 8015468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801546c:	680b      	ldr	r3, [r1, #0]
 801546e:	6801      	ldr	r1, [r0, #0]
 8015470:	115f      	asrs	r7, r3, #5
 8015472:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015476:	f013 031f 	ands.w	r3, r3, #31
 801547a:	b087      	sub	sp, #28
 801547c:	bf18      	it	ne
 801547e:	3704      	addne	r7, #4
 8015480:	2500      	movs	r5, #0
 8015482:	1f3e      	subs	r6, r7, #4
 8015484:	4682      	mov	sl, r0
 8015486:	4690      	mov	r8, r2
 8015488:	9301      	str	r3, [sp, #4]
 801548a:	f847 5c04 	str.w	r5, [r7, #-4]
 801548e:	46b1      	mov	r9, r6
 8015490:	4634      	mov	r4, r6
 8015492:	9502      	str	r5, [sp, #8]
 8015494:	46ab      	mov	fp, r5
 8015496:	784a      	ldrb	r2, [r1, #1]
 8015498:	1c4b      	adds	r3, r1, #1
 801549a:	9303      	str	r3, [sp, #12]
 801549c:	b342      	cbz	r2, 80154f0 <__hexnan+0x88>
 801549e:	4610      	mov	r0, r2
 80154a0:	9105      	str	r1, [sp, #20]
 80154a2:	9204      	str	r2, [sp, #16]
 80154a4:	f7ff fd84 	bl	8014fb0 <__hexdig_fun>
 80154a8:	2800      	cmp	r0, #0
 80154aa:	d143      	bne.n	8015534 <__hexnan+0xcc>
 80154ac:	9a04      	ldr	r2, [sp, #16]
 80154ae:	9905      	ldr	r1, [sp, #20]
 80154b0:	2a20      	cmp	r2, #32
 80154b2:	d818      	bhi.n	80154e6 <__hexnan+0x7e>
 80154b4:	9b02      	ldr	r3, [sp, #8]
 80154b6:	459b      	cmp	fp, r3
 80154b8:	dd13      	ble.n	80154e2 <__hexnan+0x7a>
 80154ba:	454c      	cmp	r4, r9
 80154bc:	d206      	bcs.n	80154cc <__hexnan+0x64>
 80154be:	2d07      	cmp	r5, #7
 80154c0:	dc04      	bgt.n	80154cc <__hexnan+0x64>
 80154c2:	462a      	mov	r2, r5
 80154c4:	4649      	mov	r1, r9
 80154c6:	4620      	mov	r0, r4
 80154c8:	f7ff ffa8 	bl	801541c <L_shift>
 80154cc:	4544      	cmp	r4, r8
 80154ce:	d944      	bls.n	801555a <__hexnan+0xf2>
 80154d0:	2300      	movs	r3, #0
 80154d2:	f1a4 0904 	sub.w	r9, r4, #4
 80154d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80154da:	f8cd b008 	str.w	fp, [sp, #8]
 80154de:	464c      	mov	r4, r9
 80154e0:	461d      	mov	r5, r3
 80154e2:	9903      	ldr	r1, [sp, #12]
 80154e4:	e7d7      	b.n	8015496 <__hexnan+0x2e>
 80154e6:	2a29      	cmp	r2, #41	; 0x29
 80154e8:	d14a      	bne.n	8015580 <__hexnan+0x118>
 80154ea:	3102      	adds	r1, #2
 80154ec:	f8ca 1000 	str.w	r1, [sl]
 80154f0:	f1bb 0f00 	cmp.w	fp, #0
 80154f4:	d044      	beq.n	8015580 <__hexnan+0x118>
 80154f6:	454c      	cmp	r4, r9
 80154f8:	d206      	bcs.n	8015508 <__hexnan+0xa0>
 80154fa:	2d07      	cmp	r5, #7
 80154fc:	dc04      	bgt.n	8015508 <__hexnan+0xa0>
 80154fe:	462a      	mov	r2, r5
 8015500:	4649      	mov	r1, r9
 8015502:	4620      	mov	r0, r4
 8015504:	f7ff ff8a 	bl	801541c <L_shift>
 8015508:	4544      	cmp	r4, r8
 801550a:	d928      	bls.n	801555e <__hexnan+0xf6>
 801550c:	4643      	mov	r3, r8
 801550e:	f854 2b04 	ldr.w	r2, [r4], #4
 8015512:	f843 2b04 	str.w	r2, [r3], #4
 8015516:	42a6      	cmp	r6, r4
 8015518:	d2f9      	bcs.n	801550e <__hexnan+0xa6>
 801551a:	2200      	movs	r2, #0
 801551c:	f843 2b04 	str.w	r2, [r3], #4
 8015520:	429e      	cmp	r6, r3
 8015522:	d2fb      	bcs.n	801551c <__hexnan+0xb4>
 8015524:	6833      	ldr	r3, [r6, #0]
 8015526:	b91b      	cbnz	r3, 8015530 <__hexnan+0xc8>
 8015528:	4546      	cmp	r6, r8
 801552a:	d127      	bne.n	801557c <__hexnan+0x114>
 801552c:	2301      	movs	r3, #1
 801552e:	6033      	str	r3, [r6, #0]
 8015530:	2005      	movs	r0, #5
 8015532:	e026      	b.n	8015582 <__hexnan+0x11a>
 8015534:	3501      	adds	r5, #1
 8015536:	2d08      	cmp	r5, #8
 8015538:	f10b 0b01 	add.w	fp, fp, #1
 801553c:	dd06      	ble.n	801554c <__hexnan+0xe4>
 801553e:	4544      	cmp	r4, r8
 8015540:	d9cf      	bls.n	80154e2 <__hexnan+0x7a>
 8015542:	2300      	movs	r3, #0
 8015544:	f844 3c04 	str.w	r3, [r4, #-4]
 8015548:	2501      	movs	r5, #1
 801554a:	3c04      	subs	r4, #4
 801554c:	6822      	ldr	r2, [r4, #0]
 801554e:	f000 000f 	and.w	r0, r0, #15
 8015552:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015556:	6020      	str	r0, [r4, #0]
 8015558:	e7c3      	b.n	80154e2 <__hexnan+0x7a>
 801555a:	2508      	movs	r5, #8
 801555c:	e7c1      	b.n	80154e2 <__hexnan+0x7a>
 801555e:	9b01      	ldr	r3, [sp, #4]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d0df      	beq.n	8015524 <__hexnan+0xbc>
 8015564:	f04f 32ff 	mov.w	r2, #4294967295
 8015568:	f1c3 0320 	rsb	r3, r3, #32
 801556c:	fa22 f303 	lsr.w	r3, r2, r3
 8015570:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015574:	401a      	ands	r2, r3
 8015576:	f847 2c04 	str.w	r2, [r7, #-4]
 801557a:	e7d3      	b.n	8015524 <__hexnan+0xbc>
 801557c:	3e04      	subs	r6, #4
 801557e:	e7d1      	b.n	8015524 <__hexnan+0xbc>
 8015580:	2004      	movs	r0, #4
 8015582:	b007      	add	sp, #28
 8015584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015588 <_isatty_r>:
 8015588:	b538      	push	{r3, r4, r5, lr}
 801558a:	4c06      	ldr	r4, [pc, #24]	; (80155a4 <_isatty_r+0x1c>)
 801558c:	2300      	movs	r3, #0
 801558e:	4605      	mov	r5, r0
 8015590:	4608      	mov	r0, r1
 8015592:	6023      	str	r3, [r4, #0]
 8015594:	f7f8 ff8c 	bl	800e4b0 <_isatty>
 8015598:	1c43      	adds	r3, r0, #1
 801559a:	d102      	bne.n	80155a2 <_isatty_r+0x1a>
 801559c:	6823      	ldr	r3, [r4, #0]
 801559e:	b103      	cbz	r3, 80155a2 <_isatty_r+0x1a>
 80155a0:	602b      	str	r3, [r5, #0]
 80155a2:	bd38      	pop	{r3, r4, r5, pc}
 80155a4:	20006db8 	.word	0x20006db8

080155a8 <__locale_ctype_ptr_l>:
 80155a8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80155ac:	4770      	bx	lr

080155ae <__localeconv_l>:
 80155ae:	30f0      	adds	r0, #240	; 0xf0
 80155b0:	4770      	bx	lr
	...

080155b4 <_localeconv_r>:
 80155b4:	4b04      	ldr	r3, [pc, #16]	; (80155c8 <_localeconv_r+0x14>)
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	6a18      	ldr	r0, [r3, #32]
 80155ba:	4b04      	ldr	r3, [pc, #16]	; (80155cc <_localeconv_r+0x18>)
 80155bc:	2800      	cmp	r0, #0
 80155be:	bf08      	it	eq
 80155c0:	4618      	moveq	r0, r3
 80155c2:	30f0      	adds	r0, #240	; 0xf0
 80155c4:	4770      	bx	lr
 80155c6:	bf00      	nop
 80155c8:	20000018 	.word	0x20000018
 80155cc:	2000007c 	.word	0x2000007c

080155d0 <_lseek_r>:
 80155d0:	b538      	push	{r3, r4, r5, lr}
 80155d2:	4c07      	ldr	r4, [pc, #28]	; (80155f0 <_lseek_r+0x20>)
 80155d4:	4605      	mov	r5, r0
 80155d6:	4608      	mov	r0, r1
 80155d8:	4611      	mov	r1, r2
 80155da:	2200      	movs	r2, #0
 80155dc:	6022      	str	r2, [r4, #0]
 80155de:	461a      	mov	r2, r3
 80155e0:	f7f8 ff68 	bl	800e4b4 <_lseek>
 80155e4:	1c43      	adds	r3, r0, #1
 80155e6:	d102      	bne.n	80155ee <_lseek_r+0x1e>
 80155e8:	6823      	ldr	r3, [r4, #0]
 80155ea:	b103      	cbz	r3, 80155ee <_lseek_r+0x1e>
 80155ec:	602b      	str	r3, [r5, #0]
 80155ee:	bd38      	pop	{r3, r4, r5, pc}
 80155f0:	20006db8 	.word	0x20006db8

080155f4 <malloc>:
 80155f4:	4b02      	ldr	r3, [pc, #8]	; (8015600 <malloc+0xc>)
 80155f6:	4601      	mov	r1, r0
 80155f8:	6818      	ldr	r0, [r3, #0]
 80155fa:	f7fc bc77 	b.w	8011eec <_malloc_r>
 80155fe:	bf00      	nop
 8015600:	20000018 	.word	0x20000018

08015604 <__ascii_mbtowc>:
 8015604:	b082      	sub	sp, #8
 8015606:	b901      	cbnz	r1, 801560a <__ascii_mbtowc+0x6>
 8015608:	a901      	add	r1, sp, #4
 801560a:	b142      	cbz	r2, 801561e <__ascii_mbtowc+0x1a>
 801560c:	b14b      	cbz	r3, 8015622 <__ascii_mbtowc+0x1e>
 801560e:	7813      	ldrb	r3, [r2, #0]
 8015610:	600b      	str	r3, [r1, #0]
 8015612:	7812      	ldrb	r2, [r2, #0]
 8015614:	1c10      	adds	r0, r2, #0
 8015616:	bf18      	it	ne
 8015618:	2001      	movne	r0, #1
 801561a:	b002      	add	sp, #8
 801561c:	4770      	bx	lr
 801561e:	4610      	mov	r0, r2
 8015620:	e7fb      	b.n	801561a <__ascii_mbtowc+0x16>
 8015622:	f06f 0001 	mvn.w	r0, #1
 8015626:	e7f8      	b.n	801561a <__ascii_mbtowc+0x16>

08015628 <memmove>:
 8015628:	4288      	cmp	r0, r1
 801562a:	b510      	push	{r4, lr}
 801562c:	eb01 0302 	add.w	r3, r1, r2
 8015630:	d807      	bhi.n	8015642 <memmove+0x1a>
 8015632:	1e42      	subs	r2, r0, #1
 8015634:	4299      	cmp	r1, r3
 8015636:	d00a      	beq.n	801564e <memmove+0x26>
 8015638:	f811 4b01 	ldrb.w	r4, [r1], #1
 801563c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015640:	e7f8      	b.n	8015634 <memmove+0xc>
 8015642:	4283      	cmp	r3, r0
 8015644:	d9f5      	bls.n	8015632 <memmove+0xa>
 8015646:	1881      	adds	r1, r0, r2
 8015648:	1ad2      	subs	r2, r2, r3
 801564a:	42d3      	cmn	r3, r2
 801564c:	d100      	bne.n	8015650 <memmove+0x28>
 801564e:	bd10      	pop	{r4, pc}
 8015650:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015654:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015658:	e7f7      	b.n	801564a <memmove+0x22>

0801565a <__malloc_lock>:
 801565a:	4770      	bx	lr

0801565c <__malloc_unlock>:
 801565c:	4770      	bx	lr

0801565e <_Balloc>:
 801565e:	b570      	push	{r4, r5, r6, lr}
 8015660:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015662:	4604      	mov	r4, r0
 8015664:	460e      	mov	r6, r1
 8015666:	b93d      	cbnz	r5, 8015678 <_Balloc+0x1a>
 8015668:	2010      	movs	r0, #16
 801566a:	f7ff ffc3 	bl	80155f4 <malloc>
 801566e:	6260      	str	r0, [r4, #36]	; 0x24
 8015670:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015674:	6005      	str	r5, [r0, #0]
 8015676:	60c5      	str	r5, [r0, #12]
 8015678:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801567a:	68eb      	ldr	r3, [r5, #12]
 801567c:	b183      	cbz	r3, 80156a0 <_Balloc+0x42>
 801567e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015680:	68db      	ldr	r3, [r3, #12]
 8015682:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015686:	b9b8      	cbnz	r0, 80156b8 <_Balloc+0x5a>
 8015688:	2101      	movs	r1, #1
 801568a:	fa01 f506 	lsl.w	r5, r1, r6
 801568e:	1d6a      	adds	r2, r5, #5
 8015690:	0092      	lsls	r2, r2, #2
 8015692:	4620      	mov	r0, r4
 8015694:	f000 fbe1 	bl	8015e5a <_calloc_r>
 8015698:	b160      	cbz	r0, 80156b4 <_Balloc+0x56>
 801569a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801569e:	e00e      	b.n	80156be <_Balloc+0x60>
 80156a0:	2221      	movs	r2, #33	; 0x21
 80156a2:	2104      	movs	r1, #4
 80156a4:	4620      	mov	r0, r4
 80156a6:	f000 fbd8 	bl	8015e5a <_calloc_r>
 80156aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80156ac:	60e8      	str	r0, [r5, #12]
 80156ae:	68db      	ldr	r3, [r3, #12]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d1e4      	bne.n	801567e <_Balloc+0x20>
 80156b4:	2000      	movs	r0, #0
 80156b6:	bd70      	pop	{r4, r5, r6, pc}
 80156b8:	6802      	ldr	r2, [r0, #0]
 80156ba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80156be:	2300      	movs	r3, #0
 80156c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80156c4:	e7f7      	b.n	80156b6 <_Balloc+0x58>

080156c6 <_Bfree>:
 80156c6:	b570      	push	{r4, r5, r6, lr}
 80156c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80156ca:	4606      	mov	r6, r0
 80156cc:	460d      	mov	r5, r1
 80156ce:	b93c      	cbnz	r4, 80156e0 <_Bfree+0x1a>
 80156d0:	2010      	movs	r0, #16
 80156d2:	f7ff ff8f 	bl	80155f4 <malloc>
 80156d6:	6270      	str	r0, [r6, #36]	; 0x24
 80156d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80156dc:	6004      	str	r4, [r0, #0]
 80156de:	60c4      	str	r4, [r0, #12]
 80156e0:	b13d      	cbz	r5, 80156f2 <_Bfree+0x2c>
 80156e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80156e4:	686a      	ldr	r2, [r5, #4]
 80156e6:	68db      	ldr	r3, [r3, #12]
 80156e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80156ec:	6029      	str	r1, [r5, #0]
 80156ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80156f2:	bd70      	pop	{r4, r5, r6, pc}

080156f4 <__multadd>:
 80156f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156f8:	690d      	ldr	r5, [r1, #16]
 80156fa:	461f      	mov	r7, r3
 80156fc:	4606      	mov	r6, r0
 80156fe:	460c      	mov	r4, r1
 8015700:	f101 0c14 	add.w	ip, r1, #20
 8015704:	2300      	movs	r3, #0
 8015706:	f8dc 0000 	ldr.w	r0, [ip]
 801570a:	b281      	uxth	r1, r0
 801570c:	fb02 7101 	mla	r1, r2, r1, r7
 8015710:	0c0f      	lsrs	r7, r1, #16
 8015712:	0c00      	lsrs	r0, r0, #16
 8015714:	fb02 7000 	mla	r0, r2, r0, r7
 8015718:	b289      	uxth	r1, r1
 801571a:	3301      	adds	r3, #1
 801571c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015720:	429d      	cmp	r5, r3
 8015722:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015726:	f84c 1b04 	str.w	r1, [ip], #4
 801572a:	dcec      	bgt.n	8015706 <__multadd+0x12>
 801572c:	b1d7      	cbz	r7, 8015764 <__multadd+0x70>
 801572e:	68a3      	ldr	r3, [r4, #8]
 8015730:	42ab      	cmp	r3, r5
 8015732:	dc12      	bgt.n	801575a <__multadd+0x66>
 8015734:	6861      	ldr	r1, [r4, #4]
 8015736:	4630      	mov	r0, r6
 8015738:	3101      	adds	r1, #1
 801573a:	f7ff ff90 	bl	801565e <_Balloc>
 801573e:	6922      	ldr	r2, [r4, #16]
 8015740:	3202      	adds	r2, #2
 8015742:	f104 010c 	add.w	r1, r4, #12
 8015746:	4680      	mov	r8, r0
 8015748:	0092      	lsls	r2, r2, #2
 801574a:	300c      	adds	r0, #12
 801574c:	f7fc fb6c 	bl	8011e28 <memcpy>
 8015750:	4621      	mov	r1, r4
 8015752:	4630      	mov	r0, r6
 8015754:	f7ff ffb7 	bl	80156c6 <_Bfree>
 8015758:	4644      	mov	r4, r8
 801575a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801575e:	3501      	adds	r5, #1
 8015760:	615f      	str	r7, [r3, #20]
 8015762:	6125      	str	r5, [r4, #16]
 8015764:	4620      	mov	r0, r4
 8015766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801576a <__s2b>:
 801576a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801576e:	460c      	mov	r4, r1
 8015770:	4615      	mov	r5, r2
 8015772:	461f      	mov	r7, r3
 8015774:	2209      	movs	r2, #9
 8015776:	3308      	adds	r3, #8
 8015778:	4606      	mov	r6, r0
 801577a:	fb93 f3f2 	sdiv	r3, r3, r2
 801577e:	2100      	movs	r1, #0
 8015780:	2201      	movs	r2, #1
 8015782:	429a      	cmp	r2, r3
 8015784:	db20      	blt.n	80157c8 <__s2b+0x5e>
 8015786:	4630      	mov	r0, r6
 8015788:	f7ff ff69 	bl	801565e <_Balloc>
 801578c:	9b08      	ldr	r3, [sp, #32]
 801578e:	6143      	str	r3, [r0, #20]
 8015790:	2d09      	cmp	r5, #9
 8015792:	f04f 0301 	mov.w	r3, #1
 8015796:	6103      	str	r3, [r0, #16]
 8015798:	dd19      	ble.n	80157ce <__s2b+0x64>
 801579a:	f104 0809 	add.w	r8, r4, #9
 801579e:	46c1      	mov	r9, r8
 80157a0:	442c      	add	r4, r5
 80157a2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80157a6:	4601      	mov	r1, r0
 80157a8:	3b30      	subs	r3, #48	; 0x30
 80157aa:	220a      	movs	r2, #10
 80157ac:	4630      	mov	r0, r6
 80157ae:	f7ff ffa1 	bl	80156f4 <__multadd>
 80157b2:	45a1      	cmp	r9, r4
 80157b4:	d1f5      	bne.n	80157a2 <__s2b+0x38>
 80157b6:	eb08 0405 	add.w	r4, r8, r5
 80157ba:	3c08      	subs	r4, #8
 80157bc:	1b2d      	subs	r5, r5, r4
 80157be:	1963      	adds	r3, r4, r5
 80157c0:	42bb      	cmp	r3, r7
 80157c2:	db07      	blt.n	80157d4 <__s2b+0x6a>
 80157c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157c8:	0052      	lsls	r2, r2, #1
 80157ca:	3101      	adds	r1, #1
 80157cc:	e7d9      	b.n	8015782 <__s2b+0x18>
 80157ce:	340a      	adds	r4, #10
 80157d0:	2509      	movs	r5, #9
 80157d2:	e7f3      	b.n	80157bc <__s2b+0x52>
 80157d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80157d8:	4601      	mov	r1, r0
 80157da:	3b30      	subs	r3, #48	; 0x30
 80157dc:	220a      	movs	r2, #10
 80157de:	4630      	mov	r0, r6
 80157e0:	f7ff ff88 	bl	80156f4 <__multadd>
 80157e4:	e7eb      	b.n	80157be <__s2b+0x54>

080157e6 <__hi0bits>:
 80157e6:	0c02      	lsrs	r2, r0, #16
 80157e8:	0412      	lsls	r2, r2, #16
 80157ea:	4603      	mov	r3, r0
 80157ec:	b9b2      	cbnz	r2, 801581c <__hi0bits+0x36>
 80157ee:	0403      	lsls	r3, r0, #16
 80157f0:	2010      	movs	r0, #16
 80157f2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80157f6:	bf04      	itt	eq
 80157f8:	021b      	lsleq	r3, r3, #8
 80157fa:	3008      	addeq	r0, #8
 80157fc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015800:	bf04      	itt	eq
 8015802:	011b      	lsleq	r3, r3, #4
 8015804:	3004      	addeq	r0, #4
 8015806:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801580a:	bf04      	itt	eq
 801580c:	009b      	lsleq	r3, r3, #2
 801580e:	3002      	addeq	r0, #2
 8015810:	2b00      	cmp	r3, #0
 8015812:	db06      	blt.n	8015822 <__hi0bits+0x3c>
 8015814:	005b      	lsls	r3, r3, #1
 8015816:	d503      	bpl.n	8015820 <__hi0bits+0x3a>
 8015818:	3001      	adds	r0, #1
 801581a:	4770      	bx	lr
 801581c:	2000      	movs	r0, #0
 801581e:	e7e8      	b.n	80157f2 <__hi0bits+0xc>
 8015820:	2020      	movs	r0, #32
 8015822:	4770      	bx	lr

08015824 <__lo0bits>:
 8015824:	6803      	ldr	r3, [r0, #0]
 8015826:	f013 0207 	ands.w	r2, r3, #7
 801582a:	4601      	mov	r1, r0
 801582c:	d00b      	beq.n	8015846 <__lo0bits+0x22>
 801582e:	07da      	lsls	r2, r3, #31
 8015830:	d423      	bmi.n	801587a <__lo0bits+0x56>
 8015832:	0798      	lsls	r0, r3, #30
 8015834:	bf49      	itett	mi
 8015836:	085b      	lsrmi	r3, r3, #1
 8015838:	089b      	lsrpl	r3, r3, #2
 801583a:	2001      	movmi	r0, #1
 801583c:	600b      	strmi	r3, [r1, #0]
 801583e:	bf5c      	itt	pl
 8015840:	600b      	strpl	r3, [r1, #0]
 8015842:	2002      	movpl	r0, #2
 8015844:	4770      	bx	lr
 8015846:	b298      	uxth	r0, r3
 8015848:	b9a8      	cbnz	r0, 8015876 <__lo0bits+0x52>
 801584a:	0c1b      	lsrs	r3, r3, #16
 801584c:	2010      	movs	r0, #16
 801584e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015852:	bf04      	itt	eq
 8015854:	0a1b      	lsreq	r3, r3, #8
 8015856:	3008      	addeq	r0, #8
 8015858:	071a      	lsls	r2, r3, #28
 801585a:	bf04      	itt	eq
 801585c:	091b      	lsreq	r3, r3, #4
 801585e:	3004      	addeq	r0, #4
 8015860:	079a      	lsls	r2, r3, #30
 8015862:	bf04      	itt	eq
 8015864:	089b      	lsreq	r3, r3, #2
 8015866:	3002      	addeq	r0, #2
 8015868:	07da      	lsls	r2, r3, #31
 801586a:	d402      	bmi.n	8015872 <__lo0bits+0x4e>
 801586c:	085b      	lsrs	r3, r3, #1
 801586e:	d006      	beq.n	801587e <__lo0bits+0x5a>
 8015870:	3001      	adds	r0, #1
 8015872:	600b      	str	r3, [r1, #0]
 8015874:	4770      	bx	lr
 8015876:	4610      	mov	r0, r2
 8015878:	e7e9      	b.n	801584e <__lo0bits+0x2a>
 801587a:	2000      	movs	r0, #0
 801587c:	4770      	bx	lr
 801587e:	2020      	movs	r0, #32
 8015880:	4770      	bx	lr

08015882 <__i2b>:
 8015882:	b510      	push	{r4, lr}
 8015884:	460c      	mov	r4, r1
 8015886:	2101      	movs	r1, #1
 8015888:	f7ff fee9 	bl	801565e <_Balloc>
 801588c:	2201      	movs	r2, #1
 801588e:	6144      	str	r4, [r0, #20]
 8015890:	6102      	str	r2, [r0, #16]
 8015892:	bd10      	pop	{r4, pc}

08015894 <__multiply>:
 8015894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015898:	4614      	mov	r4, r2
 801589a:	690a      	ldr	r2, [r1, #16]
 801589c:	6923      	ldr	r3, [r4, #16]
 801589e:	429a      	cmp	r2, r3
 80158a0:	bfb8      	it	lt
 80158a2:	460b      	movlt	r3, r1
 80158a4:	4688      	mov	r8, r1
 80158a6:	bfbc      	itt	lt
 80158a8:	46a0      	movlt	r8, r4
 80158aa:	461c      	movlt	r4, r3
 80158ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80158b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80158b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80158b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80158bc:	eb07 0609 	add.w	r6, r7, r9
 80158c0:	42b3      	cmp	r3, r6
 80158c2:	bfb8      	it	lt
 80158c4:	3101      	addlt	r1, #1
 80158c6:	f7ff feca 	bl	801565e <_Balloc>
 80158ca:	f100 0514 	add.w	r5, r0, #20
 80158ce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80158d2:	462b      	mov	r3, r5
 80158d4:	2200      	movs	r2, #0
 80158d6:	4573      	cmp	r3, lr
 80158d8:	d316      	bcc.n	8015908 <__multiply+0x74>
 80158da:	f104 0214 	add.w	r2, r4, #20
 80158de:	f108 0114 	add.w	r1, r8, #20
 80158e2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80158e6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80158ea:	9300      	str	r3, [sp, #0]
 80158ec:	9b00      	ldr	r3, [sp, #0]
 80158ee:	9201      	str	r2, [sp, #4]
 80158f0:	4293      	cmp	r3, r2
 80158f2:	d80c      	bhi.n	801590e <__multiply+0x7a>
 80158f4:	2e00      	cmp	r6, #0
 80158f6:	dd03      	ble.n	8015900 <__multiply+0x6c>
 80158f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d05d      	beq.n	80159bc <__multiply+0x128>
 8015900:	6106      	str	r6, [r0, #16]
 8015902:	b003      	add	sp, #12
 8015904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015908:	f843 2b04 	str.w	r2, [r3], #4
 801590c:	e7e3      	b.n	80158d6 <__multiply+0x42>
 801590e:	f8b2 b000 	ldrh.w	fp, [r2]
 8015912:	f1bb 0f00 	cmp.w	fp, #0
 8015916:	d023      	beq.n	8015960 <__multiply+0xcc>
 8015918:	4689      	mov	r9, r1
 801591a:	46ac      	mov	ip, r5
 801591c:	f04f 0800 	mov.w	r8, #0
 8015920:	f859 4b04 	ldr.w	r4, [r9], #4
 8015924:	f8dc a000 	ldr.w	sl, [ip]
 8015928:	b2a3      	uxth	r3, r4
 801592a:	fa1f fa8a 	uxth.w	sl, sl
 801592e:	fb0b a303 	mla	r3, fp, r3, sl
 8015932:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015936:	f8dc 4000 	ldr.w	r4, [ip]
 801593a:	4443      	add	r3, r8
 801593c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015940:	fb0b 840a 	mla	r4, fp, sl, r8
 8015944:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015948:	46e2      	mov	sl, ip
 801594a:	b29b      	uxth	r3, r3
 801594c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015950:	454f      	cmp	r7, r9
 8015952:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015956:	f84a 3b04 	str.w	r3, [sl], #4
 801595a:	d82b      	bhi.n	80159b4 <__multiply+0x120>
 801595c:	f8cc 8004 	str.w	r8, [ip, #4]
 8015960:	9b01      	ldr	r3, [sp, #4]
 8015962:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015966:	3204      	adds	r2, #4
 8015968:	f1ba 0f00 	cmp.w	sl, #0
 801596c:	d020      	beq.n	80159b0 <__multiply+0x11c>
 801596e:	682b      	ldr	r3, [r5, #0]
 8015970:	4689      	mov	r9, r1
 8015972:	46a8      	mov	r8, r5
 8015974:	f04f 0b00 	mov.w	fp, #0
 8015978:	f8b9 c000 	ldrh.w	ip, [r9]
 801597c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015980:	fb0a 440c 	mla	r4, sl, ip, r4
 8015984:	445c      	add	r4, fp
 8015986:	46c4      	mov	ip, r8
 8015988:	b29b      	uxth	r3, r3
 801598a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801598e:	f84c 3b04 	str.w	r3, [ip], #4
 8015992:	f859 3b04 	ldr.w	r3, [r9], #4
 8015996:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801599a:	0c1b      	lsrs	r3, r3, #16
 801599c:	fb0a b303 	mla	r3, sl, r3, fp
 80159a0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80159a4:	454f      	cmp	r7, r9
 80159a6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80159aa:	d805      	bhi.n	80159b8 <__multiply+0x124>
 80159ac:	f8c8 3004 	str.w	r3, [r8, #4]
 80159b0:	3504      	adds	r5, #4
 80159b2:	e79b      	b.n	80158ec <__multiply+0x58>
 80159b4:	46d4      	mov	ip, sl
 80159b6:	e7b3      	b.n	8015920 <__multiply+0x8c>
 80159b8:	46e0      	mov	r8, ip
 80159ba:	e7dd      	b.n	8015978 <__multiply+0xe4>
 80159bc:	3e01      	subs	r6, #1
 80159be:	e799      	b.n	80158f4 <__multiply+0x60>

080159c0 <__pow5mult>:
 80159c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159c4:	4615      	mov	r5, r2
 80159c6:	f012 0203 	ands.w	r2, r2, #3
 80159ca:	4606      	mov	r6, r0
 80159cc:	460f      	mov	r7, r1
 80159ce:	d007      	beq.n	80159e0 <__pow5mult+0x20>
 80159d0:	3a01      	subs	r2, #1
 80159d2:	4c21      	ldr	r4, [pc, #132]	; (8015a58 <__pow5mult+0x98>)
 80159d4:	2300      	movs	r3, #0
 80159d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80159da:	f7ff fe8b 	bl	80156f4 <__multadd>
 80159de:	4607      	mov	r7, r0
 80159e0:	10ad      	asrs	r5, r5, #2
 80159e2:	d035      	beq.n	8015a50 <__pow5mult+0x90>
 80159e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80159e6:	b93c      	cbnz	r4, 80159f8 <__pow5mult+0x38>
 80159e8:	2010      	movs	r0, #16
 80159ea:	f7ff fe03 	bl	80155f4 <malloc>
 80159ee:	6270      	str	r0, [r6, #36]	; 0x24
 80159f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80159f4:	6004      	str	r4, [r0, #0]
 80159f6:	60c4      	str	r4, [r0, #12]
 80159f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80159fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015a00:	b94c      	cbnz	r4, 8015a16 <__pow5mult+0x56>
 8015a02:	f240 2171 	movw	r1, #625	; 0x271
 8015a06:	4630      	mov	r0, r6
 8015a08:	f7ff ff3b 	bl	8015882 <__i2b>
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015a12:	4604      	mov	r4, r0
 8015a14:	6003      	str	r3, [r0, #0]
 8015a16:	f04f 0800 	mov.w	r8, #0
 8015a1a:	07eb      	lsls	r3, r5, #31
 8015a1c:	d50a      	bpl.n	8015a34 <__pow5mult+0x74>
 8015a1e:	4639      	mov	r1, r7
 8015a20:	4622      	mov	r2, r4
 8015a22:	4630      	mov	r0, r6
 8015a24:	f7ff ff36 	bl	8015894 <__multiply>
 8015a28:	4639      	mov	r1, r7
 8015a2a:	4681      	mov	r9, r0
 8015a2c:	4630      	mov	r0, r6
 8015a2e:	f7ff fe4a 	bl	80156c6 <_Bfree>
 8015a32:	464f      	mov	r7, r9
 8015a34:	106d      	asrs	r5, r5, #1
 8015a36:	d00b      	beq.n	8015a50 <__pow5mult+0x90>
 8015a38:	6820      	ldr	r0, [r4, #0]
 8015a3a:	b938      	cbnz	r0, 8015a4c <__pow5mult+0x8c>
 8015a3c:	4622      	mov	r2, r4
 8015a3e:	4621      	mov	r1, r4
 8015a40:	4630      	mov	r0, r6
 8015a42:	f7ff ff27 	bl	8015894 <__multiply>
 8015a46:	6020      	str	r0, [r4, #0]
 8015a48:	f8c0 8000 	str.w	r8, [r0]
 8015a4c:	4604      	mov	r4, r0
 8015a4e:	e7e4      	b.n	8015a1a <__pow5mult+0x5a>
 8015a50:	4638      	mov	r0, r7
 8015a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a56:	bf00      	nop
 8015a58:	08016858 	.word	0x08016858

08015a5c <__lshift>:
 8015a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a60:	460c      	mov	r4, r1
 8015a62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015a66:	6923      	ldr	r3, [r4, #16]
 8015a68:	6849      	ldr	r1, [r1, #4]
 8015a6a:	eb0a 0903 	add.w	r9, sl, r3
 8015a6e:	68a3      	ldr	r3, [r4, #8]
 8015a70:	4607      	mov	r7, r0
 8015a72:	4616      	mov	r6, r2
 8015a74:	f109 0501 	add.w	r5, r9, #1
 8015a78:	42ab      	cmp	r3, r5
 8015a7a:	db32      	blt.n	8015ae2 <__lshift+0x86>
 8015a7c:	4638      	mov	r0, r7
 8015a7e:	f7ff fdee 	bl	801565e <_Balloc>
 8015a82:	2300      	movs	r3, #0
 8015a84:	4680      	mov	r8, r0
 8015a86:	f100 0114 	add.w	r1, r0, #20
 8015a8a:	461a      	mov	r2, r3
 8015a8c:	4553      	cmp	r3, sl
 8015a8e:	db2b      	blt.n	8015ae8 <__lshift+0x8c>
 8015a90:	6920      	ldr	r0, [r4, #16]
 8015a92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015a96:	f104 0314 	add.w	r3, r4, #20
 8015a9a:	f016 021f 	ands.w	r2, r6, #31
 8015a9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015aa2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015aa6:	d025      	beq.n	8015af4 <__lshift+0x98>
 8015aa8:	f1c2 0e20 	rsb	lr, r2, #32
 8015aac:	2000      	movs	r0, #0
 8015aae:	681e      	ldr	r6, [r3, #0]
 8015ab0:	468a      	mov	sl, r1
 8015ab2:	4096      	lsls	r6, r2
 8015ab4:	4330      	orrs	r0, r6
 8015ab6:	f84a 0b04 	str.w	r0, [sl], #4
 8015aba:	f853 0b04 	ldr.w	r0, [r3], #4
 8015abe:	459c      	cmp	ip, r3
 8015ac0:	fa20 f00e 	lsr.w	r0, r0, lr
 8015ac4:	d814      	bhi.n	8015af0 <__lshift+0x94>
 8015ac6:	6048      	str	r0, [r1, #4]
 8015ac8:	b108      	cbz	r0, 8015ace <__lshift+0x72>
 8015aca:	f109 0502 	add.w	r5, r9, #2
 8015ace:	3d01      	subs	r5, #1
 8015ad0:	4638      	mov	r0, r7
 8015ad2:	f8c8 5010 	str.w	r5, [r8, #16]
 8015ad6:	4621      	mov	r1, r4
 8015ad8:	f7ff fdf5 	bl	80156c6 <_Bfree>
 8015adc:	4640      	mov	r0, r8
 8015ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ae2:	3101      	adds	r1, #1
 8015ae4:	005b      	lsls	r3, r3, #1
 8015ae6:	e7c7      	b.n	8015a78 <__lshift+0x1c>
 8015ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015aec:	3301      	adds	r3, #1
 8015aee:	e7cd      	b.n	8015a8c <__lshift+0x30>
 8015af0:	4651      	mov	r1, sl
 8015af2:	e7dc      	b.n	8015aae <__lshift+0x52>
 8015af4:	3904      	subs	r1, #4
 8015af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015afa:	f841 2f04 	str.w	r2, [r1, #4]!
 8015afe:	459c      	cmp	ip, r3
 8015b00:	d8f9      	bhi.n	8015af6 <__lshift+0x9a>
 8015b02:	e7e4      	b.n	8015ace <__lshift+0x72>

08015b04 <__mcmp>:
 8015b04:	6903      	ldr	r3, [r0, #16]
 8015b06:	690a      	ldr	r2, [r1, #16]
 8015b08:	1a9b      	subs	r3, r3, r2
 8015b0a:	b530      	push	{r4, r5, lr}
 8015b0c:	d10c      	bne.n	8015b28 <__mcmp+0x24>
 8015b0e:	0092      	lsls	r2, r2, #2
 8015b10:	3014      	adds	r0, #20
 8015b12:	3114      	adds	r1, #20
 8015b14:	1884      	adds	r4, r0, r2
 8015b16:	4411      	add	r1, r2
 8015b18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015b1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015b20:	4295      	cmp	r5, r2
 8015b22:	d003      	beq.n	8015b2c <__mcmp+0x28>
 8015b24:	d305      	bcc.n	8015b32 <__mcmp+0x2e>
 8015b26:	2301      	movs	r3, #1
 8015b28:	4618      	mov	r0, r3
 8015b2a:	bd30      	pop	{r4, r5, pc}
 8015b2c:	42a0      	cmp	r0, r4
 8015b2e:	d3f3      	bcc.n	8015b18 <__mcmp+0x14>
 8015b30:	e7fa      	b.n	8015b28 <__mcmp+0x24>
 8015b32:	f04f 33ff 	mov.w	r3, #4294967295
 8015b36:	e7f7      	b.n	8015b28 <__mcmp+0x24>

08015b38 <__mdiff>:
 8015b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b3c:	460d      	mov	r5, r1
 8015b3e:	4607      	mov	r7, r0
 8015b40:	4611      	mov	r1, r2
 8015b42:	4628      	mov	r0, r5
 8015b44:	4614      	mov	r4, r2
 8015b46:	f7ff ffdd 	bl	8015b04 <__mcmp>
 8015b4a:	1e06      	subs	r6, r0, #0
 8015b4c:	d108      	bne.n	8015b60 <__mdiff+0x28>
 8015b4e:	4631      	mov	r1, r6
 8015b50:	4638      	mov	r0, r7
 8015b52:	f7ff fd84 	bl	801565e <_Balloc>
 8015b56:	2301      	movs	r3, #1
 8015b58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b60:	bfa4      	itt	ge
 8015b62:	4623      	movge	r3, r4
 8015b64:	462c      	movge	r4, r5
 8015b66:	4638      	mov	r0, r7
 8015b68:	6861      	ldr	r1, [r4, #4]
 8015b6a:	bfa6      	itte	ge
 8015b6c:	461d      	movge	r5, r3
 8015b6e:	2600      	movge	r6, #0
 8015b70:	2601      	movlt	r6, #1
 8015b72:	f7ff fd74 	bl	801565e <_Balloc>
 8015b76:	692b      	ldr	r3, [r5, #16]
 8015b78:	60c6      	str	r6, [r0, #12]
 8015b7a:	6926      	ldr	r6, [r4, #16]
 8015b7c:	f105 0914 	add.w	r9, r5, #20
 8015b80:	f104 0214 	add.w	r2, r4, #20
 8015b84:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015b88:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015b8c:	f100 0514 	add.w	r5, r0, #20
 8015b90:	f04f 0e00 	mov.w	lr, #0
 8015b94:	f852 ab04 	ldr.w	sl, [r2], #4
 8015b98:	f859 4b04 	ldr.w	r4, [r9], #4
 8015b9c:	fa1e f18a 	uxtah	r1, lr, sl
 8015ba0:	b2a3      	uxth	r3, r4
 8015ba2:	1ac9      	subs	r1, r1, r3
 8015ba4:	0c23      	lsrs	r3, r4, #16
 8015ba6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015baa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015bae:	b289      	uxth	r1, r1
 8015bb0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015bb4:	45c8      	cmp	r8, r9
 8015bb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015bba:	4694      	mov	ip, r2
 8015bbc:	f845 3b04 	str.w	r3, [r5], #4
 8015bc0:	d8e8      	bhi.n	8015b94 <__mdiff+0x5c>
 8015bc2:	45bc      	cmp	ip, r7
 8015bc4:	d304      	bcc.n	8015bd0 <__mdiff+0x98>
 8015bc6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015bca:	b183      	cbz	r3, 8015bee <__mdiff+0xb6>
 8015bcc:	6106      	str	r6, [r0, #16]
 8015bce:	e7c5      	b.n	8015b5c <__mdiff+0x24>
 8015bd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015bd4:	fa1e f381 	uxtah	r3, lr, r1
 8015bd8:	141a      	asrs	r2, r3, #16
 8015bda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015bde:	b29b      	uxth	r3, r3
 8015be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015be4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015be8:	f845 3b04 	str.w	r3, [r5], #4
 8015bec:	e7e9      	b.n	8015bc2 <__mdiff+0x8a>
 8015bee:	3e01      	subs	r6, #1
 8015bf0:	e7e9      	b.n	8015bc6 <__mdiff+0x8e>
	...

08015bf4 <__ulp>:
 8015bf4:	4b12      	ldr	r3, [pc, #72]	; (8015c40 <__ulp+0x4c>)
 8015bf6:	ee10 2a90 	vmov	r2, s1
 8015bfa:	401a      	ands	r2, r3
 8015bfc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	dd04      	ble.n	8015c0e <__ulp+0x1a>
 8015c04:	2000      	movs	r0, #0
 8015c06:	4619      	mov	r1, r3
 8015c08:	ec41 0b10 	vmov	d0, r0, r1
 8015c0c:	4770      	bx	lr
 8015c0e:	425b      	negs	r3, r3
 8015c10:	151b      	asrs	r3, r3, #20
 8015c12:	2b13      	cmp	r3, #19
 8015c14:	f04f 0000 	mov.w	r0, #0
 8015c18:	f04f 0100 	mov.w	r1, #0
 8015c1c:	dc04      	bgt.n	8015c28 <__ulp+0x34>
 8015c1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8015c22:	fa42 f103 	asr.w	r1, r2, r3
 8015c26:	e7ef      	b.n	8015c08 <__ulp+0x14>
 8015c28:	3b14      	subs	r3, #20
 8015c2a:	2b1e      	cmp	r3, #30
 8015c2c:	f04f 0201 	mov.w	r2, #1
 8015c30:	bfda      	itte	le
 8015c32:	f1c3 031f 	rsble	r3, r3, #31
 8015c36:	fa02 f303 	lslle.w	r3, r2, r3
 8015c3a:	4613      	movgt	r3, r2
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	e7e3      	b.n	8015c08 <__ulp+0x14>
 8015c40:	7ff00000 	.word	0x7ff00000

08015c44 <__b2d>:
 8015c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c46:	6905      	ldr	r5, [r0, #16]
 8015c48:	f100 0714 	add.w	r7, r0, #20
 8015c4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015c50:	1f2e      	subs	r6, r5, #4
 8015c52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015c56:	4620      	mov	r0, r4
 8015c58:	f7ff fdc5 	bl	80157e6 <__hi0bits>
 8015c5c:	f1c0 0320 	rsb	r3, r0, #32
 8015c60:	280a      	cmp	r0, #10
 8015c62:	600b      	str	r3, [r1, #0]
 8015c64:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015cdc <__b2d+0x98>
 8015c68:	dc14      	bgt.n	8015c94 <__b2d+0x50>
 8015c6a:	f1c0 0e0b 	rsb	lr, r0, #11
 8015c6e:	fa24 f10e 	lsr.w	r1, r4, lr
 8015c72:	42b7      	cmp	r7, r6
 8015c74:	ea41 030c 	orr.w	r3, r1, ip
 8015c78:	bf34      	ite	cc
 8015c7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015c7e:	2100      	movcs	r1, #0
 8015c80:	3015      	adds	r0, #21
 8015c82:	fa04 f000 	lsl.w	r0, r4, r0
 8015c86:	fa21 f10e 	lsr.w	r1, r1, lr
 8015c8a:	ea40 0201 	orr.w	r2, r0, r1
 8015c8e:	ec43 2b10 	vmov	d0, r2, r3
 8015c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c94:	42b7      	cmp	r7, r6
 8015c96:	bf3a      	itte	cc
 8015c98:	f1a5 0608 	subcc.w	r6, r5, #8
 8015c9c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015ca0:	2100      	movcs	r1, #0
 8015ca2:	380b      	subs	r0, #11
 8015ca4:	d015      	beq.n	8015cd2 <__b2d+0x8e>
 8015ca6:	4084      	lsls	r4, r0
 8015ca8:	f1c0 0520 	rsb	r5, r0, #32
 8015cac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015cb0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015cb4:	42be      	cmp	r6, r7
 8015cb6:	fa21 fc05 	lsr.w	ip, r1, r5
 8015cba:	ea44 030c 	orr.w	r3, r4, ip
 8015cbe:	bf8c      	ite	hi
 8015cc0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015cc4:	2400      	movls	r4, #0
 8015cc6:	fa01 f000 	lsl.w	r0, r1, r0
 8015cca:	40ec      	lsrs	r4, r5
 8015ccc:	ea40 0204 	orr.w	r2, r0, r4
 8015cd0:	e7dd      	b.n	8015c8e <__b2d+0x4a>
 8015cd2:	ea44 030c 	orr.w	r3, r4, ip
 8015cd6:	460a      	mov	r2, r1
 8015cd8:	e7d9      	b.n	8015c8e <__b2d+0x4a>
 8015cda:	bf00      	nop
 8015cdc:	3ff00000 	.word	0x3ff00000

08015ce0 <__d2b>:
 8015ce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015ce4:	460e      	mov	r6, r1
 8015ce6:	2101      	movs	r1, #1
 8015ce8:	ec59 8b10 	vmov	r8, r9, d0
 8015cec:	4615      	mov	r5, r2
 8015cee:	f7ff fcb6 	bl	801565e <_Balloc>
 8015cf2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015cf6:	4607      	mov	r7, r0
 8015cf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015cfc:	bb34      	cbnz	r4, 8015d4c <__d2b+0x6c>
 8015cfe:	9301      	str	r3, [sp, #4]
 8015d00:	f1b8 0300 	subs.w	r3, r8, #0
 8015d04:	d027      	beq.n	8015d56 <__d2b+0x76>
 8015d06:	a802      	add	r0, sp, #8
 8015d08:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015d0c:	f7ff fd8a 	bl	8015824 <__lo0bits>
 8015d10:	9900      	ldr	r1, [sp, #0]
 8015d12:	b1f0      	cbz	r0, 8015d52 <__d2b+0x72>
 8015d14:	9a01      	ldr	r2, [sp, #4]
 8015d16:	f1c0 0320 	rsb	r3, r0, #32
 8015d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8015d1e:	430b      	orrs	r3, r1
 8015d20:	40c2      	lsrs	r2, r0
 8015d22:	617b      	str	r3, [r7, #20]
 8015d24:	9201      	str	r2, [sp, #4]
 8015d26:	9b01      	ldr	r3, [sp, #4]
 8015d28:	61bb      	str	r3, [r7, #24]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	bf14      	ite	ne
 8015d2e:	2102      	movne	r1, #2
 8015d30:	2101      	moveq	r1, #1
 8015d32:	6139      	str	r1, [r7, #16]
 8015d34:	b1c4      	cbz	r4, 8015d68 <__d2b+0x88>
 8015d36:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015d3a:	4404      	add	r4, r0
 8015d3c:	6034      	str	r4, [r6, #0]
 8015d3e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015d42:	6028      	str	r0, [r5, #0]
 8015d44:	4638      	mov	r0, r7
 8015d46:	b003      	add	sp, #12
 8015d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015d50:	e7d5      	b.n	8015cfe <__d2b+0x1e>
 8015d52:	6179      	str	r1, [r7, #20]
 8015d54:	e7e7      	b.n	8015d26 <__d2b+0x46>
 8015d56:	a801      	add	r0, sp, #4
 8015d58:	f7ff fd64 	bl	8015824 <__lo0bits>
 8015d5c:	9b01      	ldr	r3, [sp, #4]
 8015d5e:	617b      	str	r3, [r7, #20]
 8015d60:	2101      	movs	r1, #1
 8015d62:	6139      	str	r1, [r7, #16]
 8015d64:	3020      	adds	r0, #32
 8015d66:	e7e5      	b.n	8015d34 <__d2b+0x54>
 8015d68:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015d6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015d70:	6030      	str	r0, [r6, #0]
 8015d72:	6918      	ldr	r0, [r3, #16]
 8015d74:	f7ff fd37 	bl	80157e6 <__hi0bits>
 8015d78:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015d7c:	e7e1      	b.n	8015d42 <__d2b+0x62>

08015d7e <__ratio>:
 8015d7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d82:	4688      	mov	r8, r1
 8015d84:	4669      	mov	r1, sp
 8015d86:	4681      	mov	r9, r0
 8015d88:	f7ff ff5c 	bl	8015c44 <__b2d>
 8015d8c:	a901      	add	r1, sp, #4
 8015d8e:	4640      	mov	r0, r8
 8015d90:	ec57 6b10 	vmov	r6, r7, d0
 8015d94:	f7ff ff56 	bl	8015c44 <__b2d>
 8015d98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015d9c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015da0:	eba3 0c02 	sub.w	ip, r3, r2
 8015da4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015da8:	1a9b      	subs	r3, r3, r2
 8015daa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015dae:	ec5b ab10 	vmov	sl, fp, d0
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	bfce      	itee	gt
 8015db6:	463a      	movgt	r2, r7
 8015db8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015dbc:	465a      	movle	r2, fp
 8015dbe:	4659      	mov	r1, fp
 8015dc0:	463d      	mov	r5, r7
 8015dc2:	bfd4      	ite	le
 8015dc4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8015dc8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8015dcc:	4630      	mov	r0, r6
 8015dce:	ee10 2a10 	vmov	r2, s0
 8015dd2:	460b      	mov	r3, r1
 8015dd4:	4629      	mov	r1, r5
 8015dd6:	f7f2 fc71 	bl	80086bc <__aeabi_ddiv>
 8015dda:	ec41 0b10 	vmov	d0, r0, r1
 8015dde:	b003      	add	sp, #12
 8015de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015de4 <__copybits>:
 8015de4:	3901      	subs	r1, #1
 8015de6:	b510      	push	{r4, lr}
 8015de8:	1149      	asrs	r1, r1, #5
 8015dea:	6914      	ldr	r4, [r2, #16]
 8015dec:	3101      	adds	r1, #1
 8015dee:	f102 0314 	add.w	r3, r2, #20
 8015df2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015df6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015dfa:	42a3      	cmp	r3, r4
 8015dfc:	4602      	mov	r2, r0
 8015dfe:	d303      	bcc.n	8015e08 <__copybits+0x24>
 8015e00:	2300      	movs	r3, #0
 8015e02:	428a      	cmp	r2, r1
 8015e04:	d305      	bcc.n	8015e12 <__copybits+0x2e>
 8015e06:	bd10      	pop	{r4, pc}
 8015e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e0c:	f840 2b04 	str.w	r2, [r0], #4
 8015e10:	e7f3      	b.n	8015dfa <__copybits+0x16>
 8015e12:	f842 3b04 	str.w	r3, [r2], #4
 8015e16:	e7f4      	b.n	8015e02 <__copybits+0x1e>

08015e18 <__any_on>:
 8015e18:	f100 0214 	add.w	r2, r0, #20
 8015e1c:	6900      	ldr	r0, [r0, #16]
 8015e1e:	114b      	asrs	r3, r1, #5
 8015e20:	4298      	cmp	r0, r3
 8015e22:	b510      	push	{r4, lr}
 8015e24:	db11      	blt.n	8015e4a <__any_on+0x32>
 8015e26:	dd0a      	ble.n	8015e3e <__any_on+0x26>
 8015e28:	f011 011f 	ands.w	r1, r1, #31
 8015e2c:	d007      	beq.n	8015e3e <__any_on+0x26>
 8015e2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015e32:	fa24 f001 	lsr.w	r0, r4, r1
 8015e36:	fa00 f101 	lsl.w	r1, r0, r1
 8015e3a:	428c      	cmp	r4, r1
 8015e3c:	d10b      	bne.n	8015e56 <__any_on+0x3e>
 8015e3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015e42:	4293      	cmp	r3, r2
 8015e44:	d803      	bhi.n	8015e4e <__any_on+0x36>
 8015e46:	2000      	movs	r0, #0
 8015e48:	bd10      	pop	{r4, pc}
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	e7f7      	b.n	8015e3e <__any_on+0x26>
 8015e4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015e52:	2900      	cmp	r1, #0
 8015e54:	d0f5      	beq.n	8015e42 <__any_on+0x2a>
 8015e56:	2001      	movs	r0, #1
 8015e58:	e7f6      	b.n	8015e48 <__any_on+0x30>

08015e5a <_calloc_r>:
 8015e5a:	b538      	push	{r3, r4, r5, lr}
 8015e5c:	fb02 f401 	mul.w	r4, r2, r1
 8015e60:	4621      	mov	r1, r4
 8015e62:	f7fc f843 	bl	8011eec <_malloc_r>
 8015e66:	4605      	mov	r5, r0
 8015e68:	b118      	cbz	r0, 8015e72 <_calloc_r+0x18>
 8015e6a:	4622      	mov	r2, r4
 8015e6c:	2100      	movs	r1, #0
 8015e6e:	f7fb ffe6 	bl	8011e3e <memset>
 8015e72:	4628      	mov	r0, r5
 8015e74:	bd38      	pop	{r3, r4, r5, pc}

08015e76 <_realloc_r>:
 8015e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e78:	4607      	mov	r7, r0
 8015e7a:	4614      	mov	r4, r2
 8015e7c:	460e      	mov	r6, r1
 8015e7e:	b921      	cbnz	r1, 8015e8a <_realloc_r+0x14>
 8015e80:	4611      	mov	r1, r2
 8015e82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015e86:	f7fc b831 	b.w	8011eec <_malloc_r>
 8015e8a:	b922      	cbnz	r2, 8015e96 <_realloc_r+0x20>
 8015e8c:	f7fb ffe0 	bl	8011e50 <_free_r>
 8015e90:	4625      	mov	r5, r4
 8015e92:	4628      	mov	r0, r5
 8015e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e96:	f000 f9ce 	bl	8016236 <_malloc_usable_size_r>
 8015e9a:	42a0      	cmp	r0, r4
 8015e9c:	d20f      	bcs.n	8015ebe <_realloc_r+0x48>
 8015e9e:	4621      	mov	r1, r4
 8015ea0:	4638      	mov	r0, r7
 8015ea2:	f7fc f823 	bl	8011eec <_malloc_r>
 8015ea6:	4605      	mov	r5, r0
 8015ea8:	2800      	cmp	r0, #0
 8015eaa:	d0f2      	beq.n	8015e92 <_realloc_r+0x1c>
 8015eac:	4631      	mov	r1, r6
 8015eae:	4622      	mov	r2, r4
 8015eb0:	f7fb ffba 	bl	8011e28 <memcpy>
 8015eb4:	4631      	mov	r1, r6
 8015eb6:	4638      	mov	r0, r7
 8015eb8:	f7fb ffca 	bl	8011e50 <_free_r>
 8015ebc:	e7e9      	b.n	8015e92 <_realloc_r+0x1c>
 8015ebe:	4635      	mov	r5, r6
 8015ec0:	e7e7      	b.n	8015e92 <_realloc_r+0x1c>

08015ec2 <__ssputs_r>:
 8015ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ec6:	688e      	ldr	r6, [r1, #8]
 8015ec8:	429e      	cmp	r6, r3
 8015eca:	4682      	mov	sl, r0
 8015ecc:	460c      	mov	r4, r1
 8015ece:	4690      	mov	r8, r2
 8015ed0:	4699      	mov	r9, r3
 8015ed2:	d837      	bhi.n	8015f44 <__ssputs_r+0x82>
 8015ed4:	898a      	ldrh	r2, [r1, #12]
 8015ed6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015eda:	d031      	beq.n	8015f40 <__ssputs_r+0x7e>
 8015edc:	6825      	ldr	r5, [r4, #0]
 8015ede:	6909      	ldr	r1, [r1, #16]
 8015ee0:	1a6f      	subs	r7, r5, r1
 8015ee2:	6965      	ldr	r5, [r4, #20]
 8015ee4:	2302      	movs	r3, #2
 8015ee6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015eea:	fb95 f5f3 	sdiv	r5, r5, r3
 8015eee:	f109 0301 	add.w	r3, r9, #1
 8015ef2:	443b      	add	r3, r7
 8015ef4:	429d      	cmp	r5, r3
 8015ef6:	bf38      	it	cc
 8015ef8:	461d      	movcc	r5, r3
 8015efa:	0553      	lsls	r3, r2, #21
 8015efc:	d530      	bpl.n	8015f60 <__ssputs_r+0x9e>
 8015efe:	4629      	mov	r1, r5
 8015f00:	f7fb fff4 	bl	8011eec <_malloc_r>
 8015f04:	4606      	mov	r6, r0
 8015f06:	b950      	cbnz	r0, 8015f1e <__ssputs_r+0x5c>
 8015f08:	230c      	movs	r3, #12
 8015f0a:	f8ca 3000 	str.w	r3, [sl]
 8015f0e:	89a3      	ldrh	r3, [r4, #12]
 8015f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f14:	81a3      	strh	r3, [r4, #12]
 8015f16:	f04f 30ff 	mov.w	r0, #4294967295
 8015f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f1e:	463a      	mov	r2, r7
 8015f20:	6921      	ldr	r1, [r4, #16]
 8015f22:	f7fb ff81 	bl	8011e28 <memcpy>
 8015f26:	89a3      	ldrh	r3, [r4, #12]
 8015f28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f30:	81a3      	strh	r3, [r4, #12]
 8015f32:	6126      	str	r6, [r4, #16]
 8015f34:	6165      	str	r5, [r4, #20]
 8015f36:	443e      	add	r6, r7
 8015f38:	1bed      	subs	r5, r5, r7
 8015f3a:	6026      	str	r6, [r4, #0]
 8015f3c:	60a5      	str	r5, [r4, #8]
 8015f3e:	464e      	mov	r6, r9
 8015f40:	454e      	cmp	r6, r9
 8015f42:	d900      	bls.n	8015f46 <__ssputs_r+0x84>
 8015f44:	464e      	mov	r6, r9
 8015f46:	4632      	mov	r2, r6
 8015f48:	4641      	mov	r1, r8
 8015f4a:	6820      	ldr	r0, [r4, #0]
 8015f4c:	f7ff fb6c 	bl	8015628 <memmove>
 8015f50:	68a3      	ldr	r3, [r4, #8]
 8015f52:	1b9b      	subs	r3, r3, r6
 8015f54:	60a3      	str	r3, [r4, #8]
 8015f56:	6823      	ldr	r3, [r4, #0]
 8015f58:	441e      	add	r6, r3
 8015f5a:	6026      	str	r6, [r4, #0]
 8015f5c:	2000      	movs	r0, #0
 8015f5e:	e7dc      	b.n	8015f1a <__ssputs_r+0x58>
 8015f60:	462a      	mov	r2, r5
 8015f62:	f7ff ff88 	bl	8015e76 <_realloc_r>
 8015f66:	4606      	mov	r6, r0
 8015f68:	2800      	cmp	r0, #0
 8015f6a:	d1e2      	bne.n	8015f32 <__ssputs_r+0x70>
 8015f6c:	6921      	ldr	r1, [r4, #16]
 8015f6e:	4650      	mov	r0, sl
 8015f70:	f7fb ff6e 	bl	8011e50 <_free_r>
 8015f74:	e7c8      	b.n	8015f08 <__ssputs_r+0x46>
	...

08015f78 <_svfiprintf_r>:
 8015f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f7c:	461d      	mov	r5, r3
 8015f7e:	898b      	ldrh	r3, [r1, #12]
 8015f80:	061f      	lsls	r7, r3, #24
 8015f82:	b09d      	sub	sp, #116	; 0x74
 8015f84:	4680      	mov	r8, r0
 8015f86:	460c      	mov	r4, r1
 8015f88:	4616      	mov	r6, r2
 8015f8a:	d50f      	bpl.n	8015fac <_svfiprintf_r+0x34>
 8015f8c:	690b      	ldr	r3, [r1, #16]
 8015f8e:	b96b      	cbnz	r3, 8015fac <_svfiprintf_r+0x34>
 8015f90:	2140      	movs	r1, #64	; 0x40
 8015f92:	f7fb ffab 	bl	8011eec <_malloc_r>
 8015f96:	6020      	str	r0, [r4, #0]
 8015f98:	6120      	str	r0, [r4, #16]
 8015f9a:	b928      	cbnz	r0, 8015fa8 <_svfiprintf_r+0x30>
 8015f9c:	230c      	movs	r3, #12
 8015f9e:	f8c8 3000 	str.w	r3, [r8]
 8015fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8015fa6:	e0c8      	b.n	801613a <_svfiprintf_r+0x1c2>
 8015fa8:	2340      	movs	r3, #64	; 0x40
 8015faa:	6163      	str	r3, [r4, #20]
 8015fac:	2300      	movs	r3, #0
 8015fae:	9309      	str	r3, [sp, #36]	; 0x24
 8015fb0:	2320      	movs	r3, #32
 8015fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015fb6:	2330      	movs	r3, #48	; 0x30
 8015fb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015fbc:	9503      	str	r5, [sp, #12]
 8015fbe:	f04f 0b01 	mov.w	fp, #1
 8015fc2:	4637      	mov	r7, r6
 8015fc4:	463d      	mov	r5, r7
 8015fc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015fca:	b10b      	cbz	r3, 8015fd0 <_svfiprintf_r+0x58>
 8015fcc:	2b25      	cmp	r3, #37	; 0x25
 8015fce:	d13e      	bne.n	801604e <_svfiprintf_r+0xd6>
 8015fd0:	ebb7 0a06 	subs.w	sl, r7, r6
 8015fd4:	d00b      	beq.n	8015fee <_svfiprintf_r+0x76>
 8015fd6:	4653      	mov	r3, sl
 8015fd8:	4632      	mov	r2, r6
 8015fda:	4621      	mov	r1, r4
 8015fdc:	4640      	mov	r0, r8
 8015fde:	f7ff ff70 	bl	8015ec2 <__ssputs_r>
 8015fe2:	3001      	adds	r0, #1
 8015fe4:	f000 80a4 	beq.w	8016130 <_svfiprintf_r+0x1b8>
 8015fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fea:	4453      	add	r3, sl
 8015fec:	9309      	str	r3, [sp, #36]	; 0x24
 8015fee:	783b      	ldrb	r3, [r7, #0]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	f000 809d 	beq.w	8016130 <_svfiprintf_r+0x1b8>
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8015ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016000:	9304      	str	r3, [sp, #16]
 8016002:	9307      	str	r3, [sp, #28]
 8016004:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016008:	931a      	str	r3, [sp, #104]	; 0x68
 801600a:	462f      	mov	r7, r5
 801600c:	2205      	movs	r2, #5
 801600e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016012:	4850      	ldr	r0, [pc, #320]	; (8016154 <_svfiprintf_r+0x1dc>)
 8016014:	f7f2 f81c 	bl	8008050 <memchr>
 8016018:	9b04      	ldr	r3, [sp, #16]
 801601a:	b9d0      	cbnz	r0, 8016052 <_svfiprintf_r+0xda>
 801601c:	06d9      	lsls	r1, r3, #27
 801601e:	bf44      	itt	mi
 8016020:	2220      	movmi	r2, #32
 8016022:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016026:	071a      	lsls	r2, r3, #28
 8016028:	bf44      	itt	mi
 801602a:	222b      	movmi	r2, #43	; 0x2b
 801602c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016030:	782a      	ldrb	r2, [r5, #0]
 8016032:	2a2a      	cmp	r2, #42	; 0x2a
 8016034:	d015      	beq.n	8016062 <_svfiprintf_r+0xea>
 8016036:	9a07      	ldr	r2, [sp, #28]
 8016038:	462f      	mov	r7, r5
 801603a:	2000      	movs	r0, #0
 801603c:	250a      	movs	r5, #10
 801603e:	4639      	mov	r1, r7
 8016040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016044:	3b30      	subs	r3, #48	; 0x30
 8016046:	2b09      	cmp	r3, #9
 8016048:	d94d      	bls.n	80160e6 <_svfiprintf_r+0x16e>
 801604a:	b1b8      	cbz	r0, 801607c <_svfiprintf_r+0x104>
 801604c:	e00f      	b.n	801606e <_svfiprintf_r+0xf6>
 801604e:	462f      	mov	r7, r5
 8016050:	e7b8      	b.n	8015fc4 <_svfiprintf_r+0x4c>
 8016052:	4a40      	ldr	r2, [pc, #256]	; (8016154 <_svfiprintf_r+0x1dc>)
 8016054:	1a80      	subs	r0, r0, r2
 8016056:	fa0b f000 	lsl.w	r0, fp, r0
 801605a:	4318      	orrs	r0, r3
 801605c:	9004      	str	r0, [sp, #16]
 801605e:	463d      	mov	r5, r7
 8016060:	e7d3      	b.n	801600a <_svfiprintf_r+0x92>
 8016062:	9a03      	ldr	r2, [sp, #12]
 8016064:	1d11      	adds	r1, r2, #4
 8016066:	6812      	ldr	r2, [r2, #0]
 8016068:	9103      	str	r1, [sp, #12]
 801606a:	2a00      	cmp	r2, #0
 801606c:	db01      	blt.n	8016072 <_svfiprintf_r+0xfa>
 801606e:	9207      	str	r2, [sp, #28]
 8016070:	e004      	b.n	801607c <_svfiprintf_r+0x104>
 8016072:	4252      	negs	r2, r2
 8016074:	f043 0302 	orr.w	r3, r3, #2
 8016078:	9207      	str	r2, [sp, #28]
 801607a:	9304      	str	r3, [sp, #16]
 801607c:	783b      	ldrb	r3, [r7, #0]
 801607e:	2b2e      	cmp	r3, #46	; 0x2e
 8016080:	d10c      	bne.n	801609c <_svfiprintf_r+0x124>
 8016082:	787b      	ldrb	r3, [r7, #1]
 8016084:	2b2a      	cmp	r3, #42	; 0x2a
 8016086:	d133      	bne.n	80160f0 <_svfiprintf_r+0x178>
 8016088:	9b03      	ldr	r3, [sp, #12]
 801608a:	1d1a      	adds	r2, r3, #4
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	9203      	str	r2, [sp, #12]
 8016090:	2b00      	cmp	r3, #0
 8016092:	bfb8      	it	lt
 8016094:	f04f 33ff 	movlt.w	r3, #4294967295
 8016098:	3702      	adds	r7, #2
 801609a:	9305      	str	r3, [sp, #20]
 801609c:	4d2e      	ldr	r5, [pc, #184]	; (8016158 <_svfiprintf_r+0x1e0>)
 801609e:	7839      	ldrb	r1, [r7, #0]
 80160a0:	2203      	movs	r2, #3
 80160a2:	4628      	mov	r0, r5
 80160a4:	f7f1 ffd4 	bl	8008050 <memchr>
 80160a8:	b138      	cbz	r0, 80160ba <_svfiprintf_r+0x142>
 80160aa:	2340      	movs	r3, #64	; 0x40
 80160ac:	1b40      	subs	r0, r0, r5
 80160ae:	fa03 f000 	lsl.w	r0, r3, r0
 80160b2:	9b04      	ldr	r3, [sp, #16]
 80160b4:	4303      	orrs	r3, r0
 80160b6:	3701      	adds	r7, #1
 80160b8:	9304      	str	r3, [sp, #16]
 80160ba:	7839      	ldrb	r1, [r7, #0]
 80160bc:	4827      	ldr	r0, [pc, #156]	; (801615c <_svfiprintf_r+0x1e4>)
 80160be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80160c2:	2206      	movs	r2, #6
 80160c4:	1c7e      	adds	r6, r7, #1
 80160c6:	f7f1 ffc3 	bl	8008050 <memchr>
 80160ca:	2800      	cmp	r0, #0
 80160cc:	d038      	beq.n	8016140 <_svfiprintf_r+0x1c8>
 80160ce:	4b24      	ldr	r3, [pc, #144]	; (8016160 <_svfiprintf_r+0x1e8>)
 80160d0:	bb13      	cbnz	r3, 8016118 <_svfiprintf_r+0x1a0>
 80160d2:	9b03      	ldr	r3, [sp, #12]
 80160d4:	3307      	adds	r3, #7
 80160d6:	f023 0307 	bic.w	r3, r3, #7
 80160da:	3308      	adds	r3, #8
 80160dc:	9303      	str	r3, [sp, #12]
 80160de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160e0:	444b      	add	r3, r9
 80160e2:	9309      	str	r3, [sp, #36]	; 0x24
 80160e4:	e76d      	b.n	8015fc2 <_svfiprintf_r+0x4a>
 80160e6:	fb05 3202 	mla	r2, r5, r2, r3
 80160ea:	2001      	movs	r0, #1
 80160ec:	460f      	mov	r7, r1
 80160ee:	e7a6      	b.n	801603e <_svfiprintf_r+0xc6>
 80160f0:	2300      	movs	r3, #0
 80160f2:	3701      	adds	r7, #1
 80160f4:	9305      	str	r3, [sp, #20]
 80160f6:	4619      	mov	r1, r3
 80160f8:	250a      	movs	r5, #10
 80160fa:	4638      	mov	r0, r7
 80160fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016100:	3a30      	subs	r2, #48	; 0x30
 8016102:	2a09      	cmp	r2, #9
 8016104:	d903      	bls.n	801610e <_svfiprintf_r+0x196>
 8016106:	2b00      	cmp	r3, #0
 8016108:	d0c8      	beq.n	801609c <_svfiprintf_r+0x124>
 801610a:	9105      	str	r1, [sp, #20]
 801610c:	e7c6      	b.n	801609c <_svfiprintf_r+0x124>
 801610e:	fb05 2101 	mla	r1, r5, r1, r2
 8016112:	2301      	movs	r3, #1
 8016114:	4607      	mov	r7, r0
 8016116:	e7f0      	b.n	80160fa <_svfiprintf_r+0x182>
 8016118:	ab03      	add	r3, sp, #12
 801611a:	9300      	str	r3, [sp, #0]
 801611c:	4622      	mov	r2, r4
 801611e:	4b11      	ldr	r3, [pc, #68]	; (8016164 <_svfiprintf_r+0x1ec>)
 8016120:	a904      	add	r1, sp, #16
 8016122:	4640      	mov	r0, r8
 8016124:	f7fc f910 	bl	8012348 <_printf_float>
 8016128:	f1b0 3fff 	cmp.w	r0, #4294967295
 801612c:	4681      	mov	r9, r0
 801612e:	d1d6      	bne.n	80160de <_svfiprintf_r+0x166>
 8016130:	89a3      	ldrh	r3, [r4, #12]
 8016132:	065b      	lsls	r3, r3, #25
 8016134:	f53f af35 	bmi.w	8015fa2 <_svfiprintf_r+0x2a>
 8016138:	9809      	ldr	r0, [sp, #36]	; 0x24
 801613a:	b01d      	add	sp, #116	; 0x74
 801613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016140:	ab03      	add	r3, sp, #12
 8016142:	9300      	str	r3, [sp, #0]
 8016144:	4622      	mov	r2, r4
 8016146:	4b07      	ldr	r3, [pc, #28]	; (8016164 <_svfiprintf_r+0x1ec>)
 8016148:	a904      	add	r1, sp, #16
 801614a:	4640      	mov	r0, r8
 801614c:	f7fc fbb2 	bl	80128b4 <_printf_i>
 8016150:	e7ea      	b.n	8016128 <_svfiprintf_r+0x1b0>
 8016152:	bf00      	nop
 8016154:	080166b4 	.word	0x080166b4
 8016158:	080166ba 	.word	0x080166ba
 801615c:	080166be 	.word	0x080166be
 8016160:	08012349 	.word	0x08012349
 8016164:	08015ec3 	.word	0x08015ec3

08016168 <_putc_r>:
 8016168:	b570      	push	{r4, r5, r6, lr}
 801616a:	460d      	mov	r5, r1
 801616c:	4614      	mov	r4, r2
 801616e:	4606      	mov	r6, r0
 8016170:	b118      	cbz	r0, 801617a <_putc_r+0x12>
 8016172:	6983      	ldr	r3, [r0, #24]
 8016174:	b90b      	cbnz	r3, 801617a <_putc_r+0x12>
 8016176:	f7fb fd45 	bl	8011c04 <__sinit>
 801617a:	4b13      	ldr	r3, [pc, #76]	; (80161c8 <_putc_r+0x60>)
 801617c:	429c      	cmp	r4, r3
 801617e:	d112      	bne.n	80161a6 <_putc_r+0x3e>
 8016180:	6874      	ldr	r4, [r6, #4]
 8016182:	68a3      	ldr	r3, [r4, #8]
 8016184:	3b01      	subs	r3, #1
 8016186:	2b00      	cmp	r3, #0
 8016188:	60a3      	str	r3, [r4, #8]
 801618a:	da16      	bge.n	80161ba <_putc_r+0x52>
 801618c:	69a2      	ldr	r2, [r4, #24]
 801618e:	4293      	cmp	r3, r2
 8016190:	db02      	blt.n	8016198 <_putc_r+0x30>
 8016192:	b2eb      	uxtb	r3, r5
 8016194:	2b0a      	cmp	r3, #10
 8016196:	d110      	bne.n	80161ba <_putc_r+0x52>
 8016198:	4622      	mov	r2, r4
 801619a:	4629      	mov	r1, r5
 801619c:	4630      	mov	r0, r6
 801619e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161a2:	f7fd bf93 	b.w	80140cc <__swbuf_r>
 80161a6:	4b09      	ldr	r3, [pc, #36]	; (80161cc <_putc_r+0x64>)
 80161a8:	429c      	cmp	r4, r3
 80161aa:	d101      	bne.n	80161b0 <_putc_r+0x48>
 80161ac:	68b4      	ldr	r4, [r6, #8]
 80161ae:	e7e8      	b.n	8016182 <_putc_r+0x1a>
 80161b0:	4b07      	ldr	r3, [pc, #28]	; (80161d0 <_putc_r+0x68>)
 80161b2:	429c      	cmp	r4, r3
 80161b4:	bf08      	it	eq
 80161b6:	68f4      	ldreq	r4, [r6, #12]
 80161b8:	e7e3      	b.n	8016182 <_putc_r+0x1a>
 80161ba:	6823      	ldr	r3, [r4, #0]
 80161bc:	1c5a      	adds	r2, r3, #1
 80161be:	6022      	str	r2, [r4, #0]
 80161c0:	701d      	strb	r5, [r3, #0]
 80161c2:	b2e8      	uxtb	r0, r5
 80161c4:	bd70      	pop	{r4, r5, r6, pc}
 80161c6:	bf00      	nop
 80161c8:	08016670 	.word	0x08016670
 80161cc:	08016690 	.word	0x08016690
 80161d0:	08016650 	.word	0x08016650

080161d4 <_read_r>:
 80161d4:	b538      	push	{r3, r4, r5, lr}
 80161d6:	4c07      	ldr	r4, [pc, #28]	; (80161f4 <_read_r+0x20>)
 80161d8:	4605      	mov	r5, r0
 80161da:	4608      	mov	r0, r1
 80161dc:	4611      	mov	r1, r2
 80161de:	2200      	movs	r2, #0
 80161e0:	6022      	str	r2, [r4, #0]
 80161e2:	461a      	mov	r2, r3
 80161e4:	f7f8 f93e 	bl	800e464 <_read>
 80161e8:	1c43      	adds	r3, r0, #1
 80161ea:	d102      	bne.n	80161f2 <_read_r+0x1e>
 80161ec:	6823      	ldr	r3, [r4, #0]
 80161ee:	b103      	cbz	r3, 80161f2 <_read_r+0x1e>
 80161f0:	602b      	str	r3, [r5, #0]
 80161f2:	bd38      	pop	{r3, r4, r5, pc}
 80161f4:	20006db8 	.word	0x20006db8

080161f8 <strncmp>:
 80161f8:	b510      	push	{r4, lr}
 80161fa:	b16a      	cbz	r2, 8016218 <strncmp+0x20>
 80161fc:	3901      	subs	r1, #1
 80161fe:	1884      	adds	r4, r0, r2
 8016200:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016204:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016208:	4293      	cmp	r3, r2
 801620a:	d103      	bne.n	8016214 <strncmp+0x1c>
 801620c:	42a0      	cmp	r0, r4
 801620e:	d001      	beq.n	8016214 <strncmp+0x1c>
 8016210:	2b00      	cmp	r3, #0
 8016212:	d1f5      	bne.n	8016200 <strncmp+0x8>
 8016214:	1a98      	subs	r0, r3, r2
 8016216:	bd10      	pop	{r4, pc}
 8016218:	4610      	mov	r0, r2
 801621a:	e7fc      	b.n	8016216 <strncmp+0x1e>

0801621c <__ascii_wctomb>:
 801621c:	b149      	cbz	r1, 8016232 <__ascii_wctomb+0x16>
 801621e:	2aff      	cmp	r2, #255	; 0xff
 8016220:	bf85      	ittet	hi
 8016222:	238a      	movhi	r3, #138	; 0x8a
 8016224:	6003      	strhi	r3, [r0, #0]
 8016226:	700a      	strbls	r2, [r1, #0]
 8016228:	f04f 30ff 	movhi.w	r0, #4294967295
 801622c:	bf98      	it	ls
 801622e:	2001      	movls	r0, #1
 8016230:	4770      	bx	lr
 8016232:	4608      	mov	r0, r1
 8016234:	4770      	bx	lr

08016236 <_malloc_usable_size_r>:
 8016236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801623a:	1f18      	subs	r0, r3, #4
 801623c:	2b00      	cmp	r3, #0
 801623e:	bfbc      	itt	lt
 8016240:	580b      	ldrlt	r3, [r1, r0]
 8016242:	18c0      	addlt	r0, r0, r3
 8016244:	4770      	bx	lr
	...

08016248 <_init>:
 8016248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801624a:	bf00      	nop
 801624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801624e:	bc08      	pop	{r3}
 8016250:	469e      	mov	lr, r3
 8016252:	4770      	bx	lr

08016254 <_fini>:
 8016254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016256:	bf00      	nop
 8016258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801625a:	bc08      	pop	{r3}
 801625c:	469e      	mov	lr, r3
 801625e:	4770      	bx	lr
