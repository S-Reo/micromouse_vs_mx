
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         00010b4c  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000770  08018b50  08018b50  00028b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  080192c0  080192c0  00030208  2**0
                  CONTENTS
  6 .ARM          00000008  080192c0  080192c0  000292c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  080192c8  080192c8  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  080192c8  080192c8  000292c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  080192cc  080192cc  000292cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000208  20000000  080192d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008d44  20000208  080194d8  00030208  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008f4c  080194d8  00038f4c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002ff02  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006246  00000000  00000000  0006013a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000054bd  00000000  00000000  00066380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000018d0  00000000  00000000  0006b840  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000020f0  00000000  00000000  0006d110  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00027ea7  00000000  00000000  0006f200  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00019ee2  00000000  00000000  000970a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000cad61  00000000  00000000  000b0f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  0017bcea  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00007a34  00000000  00000000  0017bd68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000208 	.word	0x20000208
 800801c:	00000000 	.word	0x00000000
 8008020:	08018b34 	.word	0x08018b34

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	2000020c 	.word	0x2000020c
 800803c:	08018b34 	.word	0x08018b34

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <InitPosition>:
}


void InitPosition()
{
	Pos.X = 0;
 8008df8:	4b04      	ldr	r3, [pc, #16]	; (8008e0c <InitPosition+0x14>)
 8008dfa:	2200      	movs	r2, #0
	Pos.Y = 0;
	Pos.Car = north;
	Pos.Dir = front;
	Pos.Act = Wait;
 8008dfc:	2004      	movs	r0, #4
	Pos.WallSaf = wall_warn;//どっちにするか
 8008dfe:	2101      	movs	r1, #1
	Pos.Act = Wait;
 8008e00:	7198      	strb	r0, [r3, #6]
	Pos.WallSaf = wall_warn;//どっちにするか
 8008e02:	71d9      	strb	r1, [r3, #7]
	Pos.X = 0;
 8008e04:	801a      	strh	r2, [r3, #0]
	Pos.Car = north;
 8008e06:	715a      	strb	r2, [r3, #5]
	Pos.Dir = front;
 8008e08:	711a      	strb	r2, [r3, #4]

}
 8008e0a:	4770      	bx	lr
 8008e0c:	20000004 	.word	0x20000004

08008e10 <GetWallCtrlDirection>:

int GetWallCtrlDirection()
{
	//新ライブラリ用に変更
	switch(my_mouse.now.car)
 8008e10:	4a31      	ldr	r2, [pc, #196]	; (8008ed8 <GetWallCtrlDirection+0xc8>)
 8008e12:	7a93      	ldrb	r3, [r2, #10]
 8008e14:	2b06      	cmp	r3, #6
 8008e16:	d855      	bhi.n	8008ec4 <GetWallCtrlDirection+0xb4>
 8008e18:	e8df f003 	tbb	[pc, r3]
 8008e1c:	542c5440 	.word	0x542c5440
 8008e20:	5418      	.short	0x5418
 8008e22:	04          	.byte	0x04
 8008e23:	00          	.byte	0x00
		{
			return N_WALL_PID;
		}
		break;
	case west:
		if(my_mouse.now.wall.west == wall)
 8008e24:	7b13      	ldrb	r3, [r2, #12]
 8008e26:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8008e2a:	2a40      	cmp	r2, #64	; 0x40
 8008e2c:	d04c      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		{
			return F_WALL_PID;
		}
		else if ( my_mouse.now.wall.north == wall && my_mouse.now.wall.south == wall)//.westになってた。あと == south )で意味わからない処理に。
 8008e2e:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8008e32:	2a11      	cmp	r2, #17
 8008e34:	d04a      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		{
			return D_WALL_PID;
		}
		else if ( my_mouse.now.wall.north == wall )
 8008e36:	f003 0203 	and.w	r2, r3, #3
 8008e3a:	2a01      	cmp	r2, #1
 8008e3c:	d048      	beq.n	8008ed0 <GetWallCtrlDirection+0xc0>
		{
			return R_WALL_PID;
		}
		else if ( my_mouse.now.wall.south == wall )
 8008e3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e42:	2b10      	cmp	r3, #16
			return L_WALL_PID;
 8008e44:	bf14      	ite	ne
 8008e46:	2006      	movne	r0, #6
 8008e48:	2002      	moveq	r0, #2
 8008e4a:	4770      	bx	lr
		if(my_mouse.now.wall.south == wall)
 8008e4c:	7b13      	ldrb	r3, [r2, #12]
 8008e4e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8008e52:	2a10      	cmp	r2, #16
 8008e54:	d038      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		else if(my_mouse.now.wall.east == wall && my_mouse.now.wall.west == wall)
 8008e56:	f003 02cc 	and.w	r2, r3, #204	; 0xcc
 8008e5a:	2a44      	cmp	r2, #68	; 0x44
 8008e5c:	d036      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		else if(my_mouse.now.wall.east == wall)
 8008e5e:	f003 020c 	and.w	r2, r3, #12
 8008e62:	2a04      	cmp	r2, #4
 8008e64:	d036      	beq.n	8008ed4 <GetWallCtrlDirection+0xc4>
		else if(my_mouse.now.wall.west == wall)
 8008e66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e6a:	2b40      	cmp	r3, #64	; 0x40
			return R_WALL_PID;
 8008e6c:	bf14      	ite	ne
 8008e6e:	2006      	movne	r0, #6
 8008e70:	2003      	moveq	r0, #3
 8008e72:	4770      	bx	lr
		if(my_mouse.now.wall.east == wall)
 8008e74:	7b13      	ldrb	r3, [r2, #12]
 8008e76:	f003 020c 	and.w	r2, r3, #12
 8008e7a:	2a04      	cmp	r2, #4
 8008e7c:	d024      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		else if(my_mouse.now.wall.north == wall && my_mouse.now.wall.south == wall)//south)
 8008e7e:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8008e82:	2a11      	cmp	r2, #17
 8008e84:	d022      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		else if(my_mouse.now.wall.north == wall)
 8008e86:	f003 0203 	and.w	r2, r3, #3
 8008e8a:	2a01      	cmp	r2, #1
 8008e8c:	d022      	beq.n	8008ed4 <GetWallCtrlDirection+0xc4>
		else if(my_mouse.now.wall.south == wall)
 8008e8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e92:	2b10      	cmp	r3, #16
			return R_WALL_PID;
 8008e94:	bf14      	ite	ne
 8008e96:	2006      	movne	r0, #6
 8008e98:	2003      	moveq	r0, #3
 8008e9a:	4770      	bx	lr
		if(my_mouse.now.wall.north == wall) //現在の方角と、座標から、壁の存在を確認する処理
 8008e9c:	7b13      	ldrb	r3, [r2, #12]
 8008e9e:	f003 0203 	and.w	r2, r3, #3
 8008ea2:	2a01      	cmp	r2, #1
 8008ea4:	d010      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		else if(my_mouse.now.wall.east == wall && my_mouse.now.wall.west == wall)
 8008ea6:	f003 02cc 	and.w	r2, r3, #204	; 0xcc
 8008eaa:	2a44      	cmp	r2, #68	; 0x44
 8008eac:	d00e      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		else if(my_mouse.now.wall.east == wall)
 8008eae:	f003 020c 	and.w	r2, r3, #12
 8008eb2:	2a04      	cmp	r2, #4
 8008eb4:	d00c      	beq.n	8008ed0 <GetWallCtrlDirection+0xc0>
		else if(my_mouse.now.wall.west == wall)
 8008eb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008eba:	2b40      	cmp	r3, #64	; 0x40
			return L_WALL_PID;
 8008ebc:	bf14      	ite	ne
 8008ebe:	2006      	movne	r0, #6
 8008ec0:	2002      	moveq	r0, #2
 8008ec2:	4770      	bx	lr
		}
		break;

	default:
		//斜め方向
		return N_WALL_PID;
 8008ec4:	2006      	movs	r0, #6
 8008ec6:	4770      	bx	lr
			return F_WALL_PID;
 8008ec8:	2008      	movs	r0, #8
 8008eca:	4770      	bx	lr
			return D_WALL_PID;
 8008ecc:	2001      	movs	r0, #1
 8008ece:	4770      	bx	lr
			return R_WALL_PID;
 8008ed0:	2003      	movs	r0, #3
		break;
	}

}
 8008ed2:	4770      	bx	lr
			return L_WALL_PID;
 8008ed4:	2002      	movs	r0, #2
 8008ed6:	4770      	bx	lr
 8008ed8:	20008220 	.word	0x20008220

08008edc <WaitStopAndReset>:
//	KeepCounter[LEFT] = INITIAL_PULSE;
//	KeepCounter[RIGHT] = INITIAL_PULSE;
//}

void WaitStopAndReset()
{
 8008edc:	b430      	push	{r4, r5}
 8008ede:	480a      	ldr	r0, [pc, #40]	; (8008f08 <WaitStopAndReset+0x2c>)
 8008ee0:	4d0a      	ldr	r5, [pc, #40]	; (8008f0c <WaitStopAndReset+0x30>)
 8008ee2:	4c0b      	ldr	r4, [pc, #44]	; (8008f10 <WaitStopAndReset+0x34>)
 8008ee4:	490b      	ldr	r1, [pc, #44]	; (8008f14 <WaitStopAndReset+0x38>)
 8008ee6:	4a0c      	ldr	r2, [pc, #48]	; (8008f18 <WaitStopAndReset+0x3c>)
//	ControlWall();//ベイブレード対策
	do
	{

		//壁制御の更新
		TargetVelocity[BODY] = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60ab      	str	r3, [r5, #8]
		Acceleration = 0;
 8008eec:	6023      	str	r3, [r4, #0]
		//PIDChangeFlag( D_, 0);
		TargetAngularV = 0;
 8008eee:	6003      	str	r3, [r0, #0]
		AngularAcceleration = 0;
 8008ef0:	600b      	str	r3, [r1, #0]
		//AngularV = 0;
//		if(CurrentVelocity[LEFT] > 500)
//			ChangeLED(3);
			//printf("回転停止中\r\n");

	}while(CurrentVelocity[BODY] != 0);
 8008ef2:	edd2 7a02 	vldr	s15, [r2, #8]
 8008ef6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008efe:	d1f4      	bne.n	8008eea <WaitStopAndReset+0xe>
	HAL_Delay(100);
 8008f00:	2064      	movs	r0, #100	; 0x64
}
 8008f02:	bc30      	pop	{r4, r5}
	HAL_Delay(100);
 8008f04:	f005 bc32 	b.w	800e76c <HAL_Delay>
 8008f08:	20008994 	.word	0x20008994
 8008f0c:	20008984 	.word	0x20008984
 8008f10:	20007f30 	.word	0x20007f30
 8008f14:	20007f38 	.word	0x20007f38
 8008f18:	200089c0 	.word	0x200089c0
 8008f1c:	00000000 	.word	0x00000000

08008f20 <Rotate>:
	//加速度が一定。角速度が増加。角速度を積分して角度。角速度の式を作り、角速度を積分して角度を求める等式を立てる。
	//Angle = インテグラル(ang_v(t))dt
	//v = v0+at	|	t=v/a	||		ang_v = ang_v0 + ang_accel *t		||	t = ang_v/ang_accel
	//x=0.5*v*v/a	|	a = 0.5*v*v*/x		||		θ=ang_v0*t+0.5*ang_v^2/ang_accel	||	ang_accel =
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)
	float accel_deg = deg*30/90;
 8008f20:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8008f24:	ee60 6a26 	vmul.f32	s13, s0, s13
 8008f28:	ed9f 6a99 	vldr	s12, [pc, #612]	; 8009190 <Rotate+0x270>
	float const_deg = deg*30/90;
	float decel_deg = deg*30/90;
	float angular_acceleration[3] = {
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f2c:	eddf 7a99 	vldr	s15, [pc, #612]	; 8009194 <Rotate+0x274>
	TargetAngularV = 0;
 8008f30:	4b99      	ldr	r3, [pc, #612]	; (8009198 <Rotate+0x278>)
	float accel_deg = deg*30/90;
 8008f32:	ee86 7a86 	vdiv.f32	s14, s13, s12
{
 8008f36:	b510      	push	{r4, lr}
	TargetAngularV = 0;
 8008f38:	2400      	movs	r4, #0
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f3a:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8008f3e:	ee77 6a07 	vadd.f32	s13, s14, s14
 8008f42:	ee67 7aa0 	vmul.f32	s15, s15, s1
{
 8008f46:	ed2d 8b04 	vpush	{d8-d9}
			0,
			64*T1*ang_v*ang_v / (2*decel_deg)
	};
	float move_angle[3] = {
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f4a:	ee17 0a10 	vmov	r0, s14
	TargetAngularV = 0;
 8008f4e:	601c      	str	r4, [r3, #0]
{
 8008f50:	eef0 8a60 	vmov.f32	s17, s1
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f54:	ee87 8aa6 	vdiv.f32	s16, s15, s13
{
 8008f58:	eeb0 9a40 	vmov.f32	s18, s0
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f5c:	f7ff fa2c 	bl	80083b8 <__aeabi_f2d>
 8008f60:	a387      	add	r3, pc, #540	; (adr r3, 8009180 <Rotate+0x260>)
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f7ff fa7f 	bl	8008468 <__aeabi_dmul>
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	4b8b      	ldr	r3, [pc, #556]	; (800919c <Rotate+0x27c>)
 8008f6e:	f7ff fba5 	bl	80086bc <__aeabi_ddiv>
 8008f72:	f7ff fd71 	bl	8008a58 <__aeabi_d2f>
		}

	}
#endif

	if( ang_v > 0)	//右回転
 8008f76:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f7e:	ee06 0a90 	vmov	s13, r0
	if( ang_v > 0)	//右回転
 8008f82:	f340 80f2 	ble.w	800916a <Rotate+0x24a>
	{
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f86:	4b86      	ldr	r3, [pc, #536]	; (80091a0 <Rotate+0x280>)
//		ChangeLED(2);
		//ここのwhileが抜けないことがある
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f88:	4a86      	ldr	r2, [pc, #536]	; (80091a4 <Rotate+0x284>)
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f8a:	edd3 7a00 	vldr	s15, [r3]
 8008f8e:	4986      	ldr	r1, [pc, #536]	; (80091a8 <Rotate+0x288>)
 8008f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f94:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f98:	ed93 7a00 	vldr	s14, [r3]
 8008f9c:	edd2 7a00 	vldr	s15, [r2]
 8008fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa8:	dd0a      	ble.n	8008fc0 <Rotate+0xa0>
		{
			//最短走行の時だけ、Angleが大きくならない、もしくは目標角度がかなり大きい。初期化？最初の旋回なので、0radから90度ぶん目標角度がズレている必要がある。Angleが積算できていないかも。
			AngularAcceleration = angular_acceleration[0]; //ここまで
 8008faa:	ed81 8a00 	vstr	s16, [r1]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008fae:	ed93 7a00 	vldr	s14, [r3]
 8008fb2:	edd2 7a00 	vldr	s15, [r2]
 8008fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fbe:	dcf4      	bgt.n	8008faa <Rotate+0x8a>
//					printf("読み出した角速度の値 : %f, オフセット : %f, 角度 : %f\r\n", ZGyro, zg_offset, fin_angle );
//				}
//
//			}
		}
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008fc0:	edd3 7a00 	vldr	s15, [r3]
 8008fc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fc8:	edc3 7a00 	vstr	s15, [r3]
//		ChangeLED(3);
		while(TargetAngle > Angle)
 8008fcc:	ed93 7a00 	vldr	s14, [r3]
 8008fd0:	edd2 7a00 	vldr	s15, [r2]
 8008fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fdc:	dd0a      	ble.n	8008ff4 <Rotate+0xd4>
		{
			AngularAcceleration = angular_acceleration[1];//0
 8008fde:	2000      	movs	r0, #0
 8008fe0:	6008      	str	r0, [r1, #0]
		while(TargetAngle > Angle)
 8008fe2:	ed93 7a00 	vldr	s14, [r3]
 8008fe6:	edd2 7a00 	vldr	s15, [r2]
 8008fea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff2:	dcf5      	bgt.n	8008fe0 <Rotate+0xc0>
//					printf("読み出した角速度の値 : %f, オフセット : %f, 角度 : %f\r\n", ZGyro, zg_offset, fin_angle );
//				}
//
//			}
		}
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008ff4:	edd3 7a00 	vldr	s15, [r3]

		while(TargetAngle > Angle)
		{
			 AngularAcceleration = -angular_acceleration[2];
			 if( AngularV <= 0)
 8008ff8:	486c      	ldr	r0, [pc, #432]	; (80091ac <Rotate+0x28c>)
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008ffa:	ee76 6aa7 	vadd.f32	s13, s13, s15
			 AngularAcceleration = -angular_acceleration[2];
 8008ffe:	eeb1 8a48 	vneg.f32	s16, s16
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009002:	edc3 6a00 	vstr	s13, [r3]
		while(TargetAngle > Angle)
 8009006:	e008      	b.n	800901a <Rotate+0xfa>
			 AngularAcceleration = -angular_acceleration[2];
 8009008:	ed81 8a00 	vstr	s16, [r1]
			 if( AngularV <= 0)
 800900c:	edd0 7a00 	vldr	s15, [r0]
 8009010:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009018:	d908      	bls.n	800902c <Rotate+0x10c>
		while(TargetAngle > Angle)
 800901a:	ed93 7a00 	vldr	s14, [r3]
 800901e:	edd2 7a00 	vldr	s15, [r2]
 8009022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902a:	dced      	bgt.n	8009008 <Rotate+0xe8>
			 		break;
			 }
		}

	}
	AngularAcceleration = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	600b      	str	r3, [r1, #0]
	//TargetAngularV = 0;
	//printf("加速後の角速度 : %f\r\n",AngularV);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",AngularAcceleration);

	WaitStopAndReset();
 8009030:	f7ff ff54 	bl	8008edc <WaitStopAndReset>
//	ControlWall();
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009034:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80091b0 <Rotate+0x290>
 8009038:	eec9 7a27 	vdiv.f32	s15, s18, s15
 800903c:	ee17 0a90 	vmov	r0, s15
 8009040:	f7ff f9ba 	bl	80083b8 <__aeabi_f2d>
 8009044:	a350      	add	r3, pc, #320	; (adr r3, 8009188 <Rotate+0x268>)
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	f7ff fa0d 	bl	8008468 <__aeabi_dmul>
 800904e:	f7ff fcbb 	bl	80089c8 <__aeabi_d2iz>
	if(ang_v < 0)
 8009052:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 800905a:	4602      	mov	r2, r0
	if(ang_v < 0)
 800905c:	d475      	bmi.n	800914a <Rotate+0x22a>
		KeepPulse[LEFT] -= target_pulse/2;
		KeepPulse[RIGHT] += target_pulse/2;
	}
	else 	if(ang_v > 0)
	{
		KeepPulse[LEFT] += target_pulse/2;
 800905e:	4b55      	ldr	r3, [pc, #340]	; (80091b4 <Rotate+0x294>)
 8009060:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	1040      	asrs	r0, r0, #1
 8009068:	4402      	add	r2, r0
 800906a:	601a      	str	r2, [r3, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 800906c:	685a      	ldr	r2, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];

	//向いた方角を変える
//	ChangeCardinal();
	//printf("回転終了\r\n");
}
 800906e:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] -= target_pulse/2;
 8009072:	1a10      	subs	r0, r2, r0
 8009074:	6058      	str	r0, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 8009076:	689a      	ldr	r2, [r3, #8]
 8009078:	609a      	str	r2, [r3, #8]
}
 800907a:	bd10      	pop	{r4, pc}
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800907c:	4b48      	ldr	r3, [pc, #288]	; (80091a0 <Rotate+0x280>)
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800907e:	4a49      	ldr	r2, [pc, #292]	; (80091a4 <Rotate+0x284>)
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009080:	edd3 7a00 	vldr	s15, [r3]
 8009084:	4948      	ldr	r1, [pc, #288]	; (80091a8 <Rotate+0x288>)
 8009086:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800908a:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800908e:	ed93 7a00 	vldr	s14, [r3]
 8009092:	edd2 7a00 	vldr	s15, [r2]
 8009096:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800909a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800909e:	d50c      	bpl.n	80090ba <Rotate+0x19a>
 80090a0:	eeb1 6a48 	vneg.f32	s12, s16
			AngularAcceleration = -angular_acceleration[0]; //ここまで
 80090a4:	ed81 6a00 	vstr	s12, [r1]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 80090a8:	ed93 7a00 	vldr	s14, [r3]
 80090ac:	edd2 7a00 	vldr	s15, [r2]
 80090b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b8:	d4f4      	bmi.n	80090a4 <Rotate+0x184>
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090ba:	edd3 7a00 	vldr	s15, [r3]
 80090be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80090c2:	edc3 7a00 	vstr	s15, [r3]
		while(TargetAngle < Angle)
 80090c6:	ed93 7a00 	vldr	s14, [r3]
 80090ca:	edd2 7a00 	vldr	s15, [r2]
 80090ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d6:	d50a      	bpl.n	80090ee <Rotate+0x1ce>
			AngularAcceleration = angular_acceleration[1];//0
 80090d8:	2000      	movs	r0, #0
 80090da:	6008      	str	r0, [r1, #0]
		while(TargetAngle < Angle)
 80090dc:	ed93 7a00 	vldr	s14, [r3]
 80090e0:	edd2 7a00 	vldr	s15, [r2]
 80090e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ec:	d4f5      	bmi.n	80090da <Rotate+0x1ba>
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090ee:	edd3 7a00 	vldr	s15, [r3]
			 if( AngularV >= 0)
 80090f2:	482e      	ldr	r0, [pc, #184]	; (80091ac <Rotate+0x28c>)
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090f4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80090f8:	edc3 6a00 	vstr	s13, [r3]
		while(TargetAngle < Angle)
 80090fc:	e008      	b.n	8009110 <Rotate+0x1f0>
			 AngularAcceleration = angular_acceleration[2];
 80090fe:	ed81 8a00 	vstr	s16, [r1]
			 if( AngularV >= 0)
 8009102:	edd0 7a00 	vldr	s15, [r0]
 8009106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800910a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800910e:	da08      	bge.n	8009122 <Rotate+0x202>
		while(TargetAngle < Angle)
 8009110:	ed93 7a00 	vldr	s14, [r3]
 8009114:	edd2 7a00 	vldr	s15, [r2]
 8009118:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800911c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009120:	d4ed      	bmi.n	80090fe <Rotate+0x1de>
	AngularAcceleration = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	600b      	str	r3, [r1, #0]
	WaitStopAndReset();
 8009126:	f7ff fed9 	bl	8008edc <WaitStopAndReset>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 800912a:	eddf 7a21 	vldr	s15, [pc, #132]	; 80091b0 <Rotate+0x290>
 800912e:	eec9 7a27 	vdiv.f32	s15, s18, s15
 8009132:	ee17 0a90 	vmov	r0, s15
 8009136:	f7ff f93f 	bl	80083b8 <__aeabi_f2d>
 800913a:	a313      	add	r3, pc, #76	; (adr r3, 8009188 <Rotate+0x268>)
 800913c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009140:	f7ff f992 	bl	8008468 <__aeabi_dmul>
 8009144:	f7ff fc40 	bl	80089c8 <__aeabi_d2iz>
 8009148:	4602      	mov	r2, r0
		KeepPulse[LEFT] -= target_pulse/2;
 800914a:	4b1a      	ldr	r3, [pc, #104]	; (80091b4 <Rotate+0x294>)
 800914c:	6819      	ldr	r1, [r3, #0]
 800914e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8009152:	eba1 0162 	sub.w	r1, r1, r2, asr #1
 8009156:	6019      	str	r1, [r3, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 8009158:	6858      	ldr	r0, [r3, #4]
}
 800915a:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] += target_pulse/2;
 800915e:	eb00 0262 	add.w	r2, r0, r2, asr #1
 8009162:	605a      	str	r2, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	609a      	str	r2, [r3, #8]
}
 8009168:	bd10      	pop	{r4, pc}
	else if( ang_v < 0)
 800916a:	d487      	bmi.n	800907c <Rotate+0x15c>
	AngularAcceleration = 0;
 800916c:	4b0e      	ldr	r3, [pc, #56]	; (80091a8 <Rotate+0x288>)
 800916e:	601c      	str	r4, [r3, #0]
	WaitStopAndReset();
 8009170:	f7ff feb4 	bl	8008edc <WaitStopAndReset>
}
 8009174:	ecbd 8b04 	vpop	{d8-d9}
 8009178:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <Rotate+0x294>)
	KeepPulse[BODY] = KeepPulse[BODY];
 800917a:	689a      	ldr	r2, [r3, #8]
 800917c:	609a      	str	r2, [r3, #8]
}
 800917e:	bd10      	pop	{r4, pc}
 8009180:	54442d18 	.word	0x54442d18
 8009184:	400921fb 	.word	0x400921fb
 8009188:	cb326649 	.word	0xcb326649
 800918c:	40fa15d6 	.word	0x40fa15d6
 8009190:	42b40000 	.word	0x42b40000
 8009194:	3d83126f 	.word	0x3d83126f
 8009198:	20008994 	.word	0x20008994
 800919c:	40668000 	.word	0x40668000
 80091a0:	20007f44 	.word	0x20007f44
 80091a4:	20007f34 	.word	0x20007f34
 80091a8:	20007f38 	.word	0x20007f38
 80091ac:	20007f40 	.word	0x20007f40
 80091b0:	43b40000 	.word	0x43b40000
 80091b4:	200089e8 	.word	0x200089e8

080091b8 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80091b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091bc:	4c7c      	ldr	r4, [pc, #496]	; (80093b0 <SlalomRight+0x1f8>)
	float now_angv = AngularV;
 80091be:	f8df 8218 	ldr.w	r8, [pc, #536]	; 80093d8 <SlalomRight+0x220>
	float fol = Sla.Fol;         //スラローム後距離
 80091c2:	4a7c      	ldr	r2, [pc, #496]	; (80093b4 <SlalomRight+0x1fc>)
	float now_angv = AngularV;
 80091c4:	f8d8 3000 	ldr.w	r3, [r8]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091c8:	6823      	ldr	r3, [r4, #0]
 80091ca:	6860      	ldr	r0, [r4, #4]
//		}
//
//	}
//	else//なければ
//	{
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80091cc:	edd2 7a00 	vldr	s15, [r2]
 80091d0:	6821      	ldr	r1, [r4, #0]
	Control_Mode = A_VELO_PID;
 80091d2:	f8df a208 	ldr.w	sl, [pc, #520]	; 80093dc <SlalomRight+0x224>
 80091d6:	4d78      	ldr	r5, [pc, #480]	; (80093b8 <SlalomRight+0x200>)
 80091d8:	4f78      	ldr	r7, [pc, #480]	; (80093bc <SlalomRight+0x204>)
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091da:	4403      	add	r3, r0
 80091dc:	ee07 3a10 	vmov	s14, r3
{
 80091e0:	ed2d 8b06 	vpush	{d8-d10}
	float fol = Sla.Fol;         //スラローム後距離
 80091e4:	edd2 aa01 	vldr	s21, [r2, #4]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 80091e8:	edd2 8a02 	vldr	s17, [r2, #8]
	float ang1 = Sla.Theta1;         //角速度が上がるのは0からang1まで
 80091ec:	ed92 aa04 	vldr	s20, [r2, #16]
	float ang2 = Sla.Theta2;         //角速度が一定なのはang1からang2まで
 80091f0:	edd2 9a05 	vldr	s19, [r2, #20]
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
 80091f4:	ed92 9a06 	vldr	s18, [r2, #24]
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80091f8:	6862      	ldr	r2, [r4, #4]
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80091fa:	4b71      	ldr	r3, [pc, #452]	; (80093c0 <SlalomRight+0x208>)
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80091fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009200:	4411      	add	r1, r2
 8009202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009206:	ee07 1a90 	vmov	s15, r1
 800920a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	Pos.Act = slalom;
 800920e:	4a6d      	ldr	r2, [pc, #436]	; (80093c4 <SlalomRight+0x20c>)
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009210:	681e      	ldr	r6, [r3, #0]
	Pos.Act = slalom;
 8009212:	2102      	movs	r1, #2
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009214:	eeb4 7ae7 	vcmpe.f32	s14, s15
	Pos.Act = slalom;
 8009218:	7191      	strb	r1, [r2, #6]
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800921a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Control_Mode = A_VELO_PID;
 800921e:	f04f 0200 	mov.w	r2, #0
 8009222:	f8ca 2000 	str.w	r2, [sl]
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009226:	dd15      	ble.n	8009254 <SlalomRight+0x9c>
 8009228:	4a67      	ldr	r2, [pc, #412]	; (80093c8 <SlalomRight+0x210>)
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 800922a:	2100      	movs	r1, #0
 800922c:	6029      	str	r1, [r5, #0]
				AngularLeapsity = 0;
				AngularAcceleration = 0;
 800922e:	6039      	str	r1, [r7, #0]
				TargetVelocity[BODY] = v_turn;
 8009230:	6096      	str	r6, [r2, #8]
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	6860      	ldr	r0, [r4, #4]
 8009236:	4403      	add	r3, r0
 8009238:	ee07 3a90 	vmov	s15, r3
 800923c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009248:	d4f0      	bmi.n	800922c <SlalomRight+0x74>
 800924a:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80093e0 <SlalomRight+0x228>
 800924e:	f8c9 1000 	str.w	r1, [r9]
 8009252:	e001      	b.n	8009258 <SlalomRight+0xa0>
 8009254:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80093e0 <SlalomRight+0x228>

				////printf("直進1\r\n");
		}
//	}
	now_angv = AngularV;
 8009258:	f8d8 3000 	ldr.w	r3, [r8]
	ChangeLED(3);
 800925c:	2003      	movs	r0, #3
 800925e:	f004 fb83 	bl	800d968 <ChangeLED>
	float start_angle = Angle;
 8009262:	4b5a      	ldr	r3, [pc, #360]	; (80093cc <SlalomRight+0x214>)
 8009264:	ed93 7a00 	vldr	s14, [r3]
	Control_Mode = NOT_CTRL_PID;
	while(start_angle + ang1 > Angle)
 8009268:	edd3 7a00 	vldr	s15, [r3]
 800926c:	ee7a 6a07 	vadd.f32	s13, s20, s14
	Control_Mode = NOT_CTRL_PID;
 8009270:	220a      	movs	r2, #10
	while(start_angle + ang1 > Angle)
 8009272:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Control_Mode = NOT_CTRL_PID;
 800927a:	f8ca 2000 	str.w	r2, [sl]
	while(start_angle + ang1 > Angle)
 800927e:	dd0a      	ble.n	8009296 <SlalomRight+0xde>
 8009280:	4a51      	ldr	r2, [pc, #324]	; (80093c8 <SlalomRight+0x210>)

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
		//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009282:	edc7 8a00 	vstr	s17, [r7]
			TargetVelocity[BODY] = v_turn;
 8009286:	6096      	str	r6, [r2, #8]
	while(start_angle + ang1 > Angle)
 8009288:	edd3 7a00 	vldr	s15, [r3]
 800928c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009294:	d4f5      	bmi.n	8009282 <SlalomRight+0xca>
			}
#endif

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009296:	2200      	movs	r2, #0
 8009298:	603a      	str	r2, [r7, #0]
	AngularLeapsity = 0;
	now_angv = AngularV;
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 800929a:	ee79 6a87 	vadd.f32	s13, s19, s14
	now_angv = AngularV;
 800929e:	f8d8 1000 	ldr.w	r1, [r8]
	while(start_angle + ang2 > Angle)
 80092a2:	edd3 7a00 	vldr	s15, [r3]
	AngularLeapsity = 0;
 80092a6:	f8c9 2000 	str.w	r2, [r9]
	while(start_angle + ang2 > Angle)
 80092aa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80092ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b2:	dd0a      	ble.n	80092ca <SlalomRight+0x112>
 80092b4:	4a44      	ldr	r2, [pc, #272]	; (80093c8 <SlalomRight+0x210>)
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 80092b6:	6829      	ldr	r1, [r5, #0]
 80092b8:	6029      	str	r1, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 80092ba:	6096      	str	r6, [r2, #8]
	while(start_angle + ang2 > Angle)
 80092bc:	edd3 7a00 	vldr	s15, [r3]
 80092c0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80092c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c8:	d4f5      	bmi.n	80092b6 <SlalomRight+0xfe>

			}
#endif
	}

	now_angv = AngularV;
 80092ca:	f8d8 2000 	ldr.w	r2, [r8]
	while( start_angle + ang3 > Angle)
 80092ce:	edd3 7a00 	vldr	s15, [r3]
 80092d2:	ee39 7a07 	vadd.f32	s14, s18, s14
 80092d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092de:	dd1d      	ble.n	800931c <SlalomRight+0x164>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 80092e0:	eef1 8a68 	vneg.f32	s17, s17
 80092e4:	edc7 8a00 	vstr	s17, [r7]
			if(TargetAngularV < 0)
 80092e8:	edd5 7a00 	vldr	s15, [r5]
 80092ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f4:	d453      	bmi.n	800939e <SlalomRight+0x1e6>
 80092f6:	4a34      	ldr	r2, [pc, #208]	; (80093c8 <SlalomRight+0x210>)
 80092f8:	e008      	b.n	800930c <SlalomRight+0x154>
			AngularAcceleration = -alpha_turn;
 80092fa:	edc7 8a00 	vstr	s17, [r7]
			if(TargetAngularV < 0)
 80092fe:	edd5 7a00 	vldr	s15, [r5]
 8009302:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800930a:	d448      	bmi.n	800939e <SlalomRight+0x1e6>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = v_turn;
 800930c:	6096      	str	r6, [r2, #8]
	while( start_angle + ang3 > Angle)
 800930e:	edd3 7a00 	vldr	s15, [r3]
 8009312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800931a:	d4ee      	bmi.n	80092fa <SlalomRight+0x142>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 800931c:	2200      	movs	r2, #0
 800931e:	603a      	str	r2, [r7, #0]
	AngularLeapsity = 0;
	TargetAngularV = 0;
 8009320:	602a      	str	r2, [r5, #0]
	//Calc = SearchOrFast; //関数の前に別で設定する
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	6861      	ldr	r1, [r4, #4]
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
			TargetVelocity[BODY] = v_turn;
 8009326:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80093c8 <SlalomRight+0x210>
			//printf("直進2\r\n");

			//後半の直線に入ったら計算する。
			if(Calc == 0)
 800932a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80093e4 <SlalomRight+0x22c>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 800932e:	440b      	add	r3, r1
 8009330:	ee08 3a10 	vmov	s16, r3
 8009334:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
			TargetAngularV = 0;
 8009338:	4617      	mov	r7, r2
 800933a:	ee38 8a2a 	vadd.f32	s16, s16, s21
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800933e:	e005      	b.n	800934c <SlalomRight+0x194>
			TargetAngularV = 0;
 8009340:	602f      	str	r7, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 8009342:	f8c8 6008 	str.w	r6, [r8, #8]
			if(Calc == 0)
 8009346:	f8d9 3000 	ldr.w	r3, [r9]
 800934a:	b313      	cbz	r3, 8009392 <SlalomRight+0x1da>
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	6862      	ldr	r2, [r4, #4]
 8009350:	4413      	add	r3, r2
 8009352:	ee07 3a90 	vmov	s15, r3
 8009356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800935a:	eef4 7ac8 	vcmpe.f32	s15, s16
 800935e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009362:	d4ed      	bmi.n	8009340 <SlalomRight+0x188>
				updateRealSearch();
#endif
				Calc = 1;
			}
	}
	TargetAngle += 90*M_PI/180;
 8009364:	4d1a      	ldr	r5, [pc, #104]	; (80093d0 <SlalomRight+0x218>)
 8009366:	6828      	ldr	r0, [r5, #0]
 8009368:	f7ff f826 	bl	80083b8 <__aeabi_f2d>
 800936c:	a30e      	add	r3, pc, #56	; (adr r3, 80093a8 <SlalomRight+0x1f0>)
 800936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009372:	f7fe fec3 	bl	80080fc <__adddf3>
 8009376:	f7ff fb6f 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 800937a:	4a16      	ldr	r2, [pc, #88]	; (80093d4 <SlalomRight+0x21c>)
	TargetAngle += 90*M_PI/180;
 800937c:	6028      	str	r0, [r5, #0]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 800937e:	ecbd 8b06 	vpop	{d8-d10}
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009382:	68a3      	ldr	r3, [r4, #8]
 8009384:	6890      	ldr	r0, [r2, #8]
 8009386:	6891      	ldr	r1, [r2, #8]
 8009388:	1a1b      	subs	r3, r3, r0
 800938a:	440b      	add	r3, r1
 800938c:	6093      	str	r3, [r2, #8]
}
 800938e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				updateRealSearch();
 8009392:	f003 fd2f 	bl	800cdf4 <updateRealSearch>
				Calc = 1;
 8009396:	2301      	movs	r3, #1
 8009398:	f8c9 3000 	str.w	r3, [r9]
 800939c:	e7d6      	b.n	800934c <SlalomRight+0x194>
				TargetAngularV = 0;
 800939e:	2300      	movs	r3, #0
 80093a0:	602b      	str	r3, [r5, #0]
				break;
 80093a2:	e7bb      	b.n	800931c <SlalomRight+0x164>
 80093a4:	f3af 8000 	nop.w
 80093a8:	54442d18 	.word	0x54442d18
 80093ac:	3ff921fb 	.word	0x3ff921fb
 80093b0:	200089b4 	.word	0x200089b4
 80093b4:	200089cc 	.word	0x200089cc
 80093b8:	20008994 	.word	0x20008994
 80093bc:	20007f38 	.word	0x20007f38
 80093c0:	20008aa8 	.word	0x20008aa8
 80093c4:	20000004 	.word	0x20000004
 80093c8:	20008984 	.word	0x20008984
 80093cc:	20007f34 	.word	0x20007f34
 80093d0:	20007f44 	.word	0x20007f44
 80093d4:	200089e8 	.word	0x200089e8
 80093d8:	20007f40 	.word	0x20007f40
 80093dc:	20008978 	.word	0x20008978
 80093e0:	20007f3c 	.word	0x20007f3c
 80093e4:	20008c24 	.word	0x20008c24

080093e8 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80093e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80093ec:	4c70      	ldr	r4, [pc, #448]	; (80095b0 <SlalomLeft+0x1c8>)
	float fol = Sla.Fol;         //スラローム後距離
 80093ee:	4a71      	ldr	r2, [pc, #452]	; (80095b4 <SlalomLeft+0x1cc>)
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	6866      	ldr	r6, [r4, #4]
//
//
//	}
//	else//なければ
//	{
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80093f4:	6821      	ldr	r1, [r4, #0]
 80093f6:	6865      	ldr	r5, [r4, #4]
 80093f8:	edd2 7a00 	vldr	s15, [r2]
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 80093fc:	edd2 5a02 	vldr	s11, [r2, #8]
	Pos.Act = slalom;
 8009400:	486d      	ldr	r0, [pc, #436]	; (80095b8 <SlalomLeft+0x1d0>)
	Control_Mode = A_VELO_PID;
 8009402:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80095dc <SlalomLeft+0x1f4>
	float fol = Sla.Fol;         //スラローム後距離
 8009406:	ed92 4a01 	vldr	s8, [r2, #4]
	float ang1 = Sla.Theta1;         //角速度が上がるのは0からang1まで
 800940a:	ed92 6a04 	vldr	s12, [r2, #16]
	float ang2 = Sla.Theta2;         //角速度が一定なのはang1からang2まで
 800940e:	edd2 6a05 	vldr	s13, [r2, #20]
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
 8009412:	edd2 3a06 	vldr	s7, [r2, #24]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009416:	4433      	add	r3, r6
 8009418:	ee07 3a10 	vmov	s14, r3
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800941c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009420:	4429      	add	r1, r5
 8009422:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009426:	ee07 1a90 	vmov	s15, r1
 800942a:	eef8 4ae7 	vcvt.f32.s32	s9, s15
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 800942e:	4b63      	ldr	r3, [pc, #396]	; (80095bc <SlalomLeft+0x1d4>)
 8009430:	4d63      	ldr	r5, [pc, #396]	; (80095c0 <SlalomLeft+0x1d8>)
 8009432:	681e      	ldr	r6, [r3, #0]
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009434:	eeb4 7ae4 	vcmpe.f32	s14, s9
	Pos.Act = slalom;
 8009438:	2102      	movs	r1, #2
	Control_Mode = A_VELO_PID;
 800943a:	2200      	movs	r2, #0
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800943c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8009440:	ed2d 8b02 	vpush	{d8}
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 8009444:	eeb1 5a65 	vneg.f32	s10, s11
	Pos.Act = slalom;
 8009448:	7181      	strb	r1, [r0, #6]
	Control_Mode = A_VELO_PID;
 800944a:	f8cc 2000 	str.w	r2, [ip]
 800944e:	495d      	ldr	r1, [pc, #372]	; (80095c4 <SlalomLeft+0x1dc>)
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009450:	dd10      	ble.n	8009474 <SlalomLeft+0x8c>
 8009452:	4a5d      	ldr	r2, [pc, #372]	; (80095c8 <SlalomLeft+0x1e0>)
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 8009454:	2000      	movs	r0, #0
 8009456:	6028      	str	r0, [r5, #0]
				AngularAcceleration = 0;
 8009458:	6008      	str	r0, [r1, #0]
				TargetVelocity[BODY] = v_turn;
 800945a:	6096      	str	r6, [r2, #8]
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	6867      	ldr	r7, [r4, #4]
 8009460:	443b      	add	r3, r7
 8009462:	ee07 3a90 	vmov	s15, r3
 8009466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800946a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800946e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009472:	d4f0      	bmi.n	8009456 <SlalomLeft+0x6e>
				////printf("直進1\r\n");
		}
//	}

	Control_Mode = NOT_CTRL_PID;
	float start_angle = Angle;
 8009474:	4b55      	ldr	r3, [pc, #340]	; (80095cc <SlalomLeft+0x1e4>)
 8009476:	edd3 7a00 	vldr	s15, [r3]
	while(start_angle - ang1 < Angle)
 800947a:	ed93 7a00 	vldr	s14, [r3]
 800947e:	ee37 6ac6 	vsub.f32	s12, s15, s12
	Control_Mode = NOT_CTRL_PID;
 8009482:	220a      	movs	r2, #10
	while(start_angle - ang1 < Angle)
 8009484:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8009488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Control_Mode = NOT_CTRL_PID;
 800948c:	f8cc 2000 	str.w	r2, [ip]
	while(start_angle - ang1 < Angle)
 8009490:	d50a      	bpl.n	80094a8 <SlalomLeft+0xc0>
 8009492:	4a4d      	ldr	r2, [pc, #308]	; (80095c8 <SlalomLeft+0x1e0>)

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009494:	ed81 5a00 	vstr	s10, [r1]
			TargetVelocity[BODY] = v_turn;
 8009498:	6096      	str	r6, [r2, #8]
	while(start_angle - ang1 < Angle)
 800949a:	ed93 7a00 	vldr	s14, [r3]
 800949e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80094a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a6:	dcf5      	bgt.n	8009494 <SlalomLeft+0xac>

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 80094a8:	2200      	movs	r2, #0
 80094aa:	600a      	str	r2, [r1, #0]
	AngularLeapsity = 0;
	//alpha_flag = 0;

	while(start_angle - ang2 < Angle)
 80094ac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80094b0:	ed93 7a00 	vldr	s14, [r3]
	AngularLeapsity = 0;
 80094b4:	4846      	ldr	r0, [pc, #280]	; (80095d0 <SlalomLeft+0x1e8>)
	while(start_angle - ang2 < Angle)
 80094b6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80094ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	AngularLeapsity = 0;
 80094be:	6002      	str	r2, [r0, #0]
	while(start_angle - ang2 < Angle)
 80094c0:	d50a      	bpl.n	80094d8 <SlalomLeft+0xf0>
 80094c2:	4a41      	ldr	r2, [pc, #260]	; (80095c8 <SlalomLeft+0x1e0>)
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 80094c4:	6828      	ldr	r0, [r5, #0]
 80094c6:	6028      	str	r0, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 80094c8:	6096      	str	r6, [r2, #8]
	while(start_angle - ang2 < Angle)
 80094ca:	ed93 7a00 	vldr	s14, [r3]
 80094ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80094d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d6:	dcf5      	bgt.n	80094c4 <SlalomLeft+0xdc>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < Angle)
 80094d8:	ee77 7ae3 	vsub.f32	s15, s15, s7
 80094dc:	ed93 7a00 	vldr	s14, [r3]
 80094e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094e8:	d51b      	bpl.n	8009522 <SlalomLeft+0x13a>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 80094ea:	edc1 5a00 	vstr	s11, [r1]
			if(TargetAngularV > 0)
 80094ee:	ed95 7a00 	vldr	s14, [r5]
 80094f2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80094f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094fa:	dc52      	bgt.n	80095a2 <SlalomLeft+0x1ba>
 80094fc:	4a32      	ldr	r2, [pc, #200]	; (80095c8 <SlalomLeft+0x1e0>)
 80094fe:	e008      	b.n	8009512 <SlalomLeft+0x12a>
			AngularAcceleration = -alpha_turn;
 8009500:	edc1 5a00 	vstr	s11, [r1]
			if(TargetAngularV > 0)
 8009504:	ed95 7a00 	vldr	s14, [r5]
 8009508:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800950c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009510:	dc47      	bgt.n	80095a2 <SlalomLeft+0x1ba>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = v_turn;
 8009512:	6096      	str	r6, [r2, #8]
	while( start_angle - ang3 < Angle)
 8009514:	ed93 7a00 	vldr	s14, [r3]
 8009518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800951c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009520:	dcee      	bgt.n	8009500 <SlalomLeft+0x118>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009522:	2700      	movs	r7, #0
 8009524:	600f      	str	r7, [r1, #0]
	AngularLeapsity = 0;
	TargetAngularV = 0;
 8009526:	602f      	str	r7, [r5, #0]
//	Calc = SearchOrFast; //関数の前に別で設定
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009528:	6823      	ldr	r3, [r4, #0]
 800952a:	6862      	ldr	r2, [r4, #4]
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
			TargetVelocity[BODY] = v_turn;
 800952c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80095c8 <SlalomLeft+0x1e0>
			//printf("直進2\r\n");
			if(Calc == 0)
 8009530:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80095e0 <SlalomLeft+0x1f8>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009534:	4413      	add	r3, r2
 8009536:	ee08 3a10 	vmov	s16, r3
 800953a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800953e:	ee38 8a04 	vadd.f32	s16, s16, s8
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009542:	e005      	b.n	8009550 <SlalomLeft+0x168>
			TargetAngularV = 0;
 8009544:	602f      	str	r7, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 8009546:	f8c8 6008 	str.w	r6, [r8, #8]
			if(Calc == 0)
 800954a:	f8d9 3000 	ldr.w	r3, [r9]
 800954e:	b313      	cbz	r3, 8009596 <SlalomLeft+0x1ae>
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	6862      	ldr	r2, [r4, #4]
 8009554:	4413      	add	r3, r2
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800955e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009566:	dced      	bgt.n	8009544 <SlalomLeft+0x15c>
				updateRealSearch();
#endif
				Calc = 1;
			}
	}
	TargetAngle += -90*M_PI/180;
 8009568:	4d1a      	ldr	r5, [pc, #104]	; (80095d4 <SlalomLeft+0x1ec>)
 800956a:	6828      	ldr	r0, [r5, #0]
 800956c:	f7fe ff24 	bl	80083b8 <__aeabi_f2d>
 8009570:	a30d      	add	r3, pc, #52	; (adr r3, 80095a8 <SlalomLeft+0x1c0>)
 8009572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009576:	f7fe fdbf 	bl	80080f8 <__aeabi_dsub>
 800957a:	f7ff fa6d 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 800957e:	4a16      	ldr	r2, [pc, #88]	; (80095d8 <SlalomLeft+0x1f0>)
	TargetAngle += -90*M_PI/180;
 8009580:	6028      	str	r0, [r5, #0]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009582:	ecbd 8b02 	vpop	{d8}
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009586:	68a3      	ldr	r3, [r4, #8]
 8009588:	6890      	ldr	r0, [r2, #8]
 800958a:	6891      	ldr	r1, [r2, #8]
 800958c:	1a1b      	subs	r3, r3, r0
 800958e:	440b      	add	r3, r1
 8009590:	6093      	str	r3, [r2, #8]
}
 8009592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				updateRealSearch();
 8009596:	f003 fc2d 	bl	800cdf4 <updateRealSearch>
				Calc = 1;
 800959a:	2301      	movs	r3, #1
 800959c:	f8c9 3000 	str.w	r3, [r9]
 80095a0:	e7d6      	b.n	8009550 <SlalomLeft+0x168>
				TargetAngularV = 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	602b      	str	r3, [r5, #0]
				break;
 80095a6:	e7bc      	b.n	8009522 <SlalomLeft+0x13a>
 80095a8:	54442d18 	.word	0x54442d18
 80095ac:	3ff921fb 	.word	0x3ff921fb
 80095b0:	200089b4 	.word	0x200089b4
 80095b4:	200089cc 	.word	0x200089cc
 80095b8:	20000004 	.word	0x20000004
 80095bc:	20008aa8 	.word	0x20008aa8
 80095c0:	20008994 	.word	0x20008994
 80095c4:	20007f38 	.word	0x20007f38
 80095c8:	20008984 	.word	0x20008984
 80095cc:	20007f34 	.word	0x20007f34
 80095d0:	20007f3c 	.word	0x20007f3c
 80095d4:	20007f44 	.word	0x20007f44
 80095d8:	200089e8 	.word	0x200089e8
 80095dc:	20008978 	.word	0x20008978
 80095e0:	20008c24 	.word	0x20008c24
 80095e4:	00000000 	.word	0x00000000

080095e8 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
//	Pos.Act = accel;
//	ControlWall();
	TargetAngularV = 0;
 80095e8:	4a39      	ldr	r2, [pc, #228]	; (80096d0 <Accel+0xe8>)
	//printf("%f,%f,%f\r\n",additional_speed,explore_speed,CurrentVelocity[BODY]);
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulse[BODY];
//	HAL_Delay(1000);
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 80095ea:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80096d4 <Accel+0xec>
{
 80095ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TargetAngularV = 0;
 80095f2:	2100      	movs	r1, #0
	additional_speed = explore_speed - CurrentVelocity[BODY];
 80095f4:	4b38      	ldr	r3, [pc, #224]	; (80096d8 <Accel+0xf0>)
	TargetAngularV = 0;
 80095f6:	6011      	str	r1, [r2, #0]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 80095f8:	ed93 7a02 	vldr	s14, [r3, #8]
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 80095fc:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 80096e8 <Accel+0x100>
 8009600:	4d36      	ldr	r5, [pc, #216]	; (80096dc <Accel+0xf4>)
 8009602:	4e37      	ldr	r6, [pc, #220]	; (80096e0 <Accel+0xf8>)
	additional_speed = explore_speed - CurrentVelocity[BODY];
 8009604:	ee70 0ac7 	vsub.f32	s1, s1, s14
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009608:	ee30 0a00 	vadd.f32	s0, s0, s0
 800960c:	ee60 7aa7 	vmul.f32	s15, s1, s15
//	WallWarn();
	//printf("%d, %d\r\n",VelocityLeftOut,VelocityRightOut);
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009610:	ee10 0a10 	vmov	r0, s0
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009614:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8009618:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800961c:	ed8b 7a00 	vstr	s14, [fp]
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009620:	f7fe feca 	bl	80083b8 <__aeabi_f2d>
 8009624:	a326      	add	r3, pc, #152	; (adr r3, 80096c0 <Accel+0xd8>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f7ff f847 	bl	80086bc <__aeabi_ddiv>
 800962e:	f7ff f9cb 	bl	80089c8 <__aeabi_d2iz>
 8009632:	4604      	mov	r4, r0
	//90mmでうまくやるには0から60000カウントまで
	//printf("");
//	_Bool wall_cut = false;
	//ChangeLED(1);

	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009634:	e020      	b.n	8009678 <Accel+0x90>
	{
		//printf("%d, %d, %d, %f, %f, %d, %f, %f, %d, %f, %f\r\n", TotalPulse[BODY], target_pulse, KeepPulse[BODY], TargetVelocity[BODY], Acceleration, VelocityLeftOut ,TargetVelocity[LEFT], CurrentVelocity[LEFT], Pid[L_VELO_PID].out, Pid[L_VELO_PID].KP,Pid[L_VELO_PID].KI);
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009636:	f7fe fead 	bl	8008394 <__aeabi_i2d>
 800963a:	a323      	add	r3, pc, #140	; (adr r3, 80096c8 <Accel+0xe0>)
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	f7fe ff12 	bl	8008468 <__aeabi_dmul>
 8009644:	f8d5 a008 	ldr.w	sl, [r5, #8]
 8009648:	68b7      	ldr	r7, [r6, #8]
 800964a:	4680      	mov	r8, r0
 800964c:	4650      	mov	r0, sl
 800964e:	4689      	mov	r9, r1
 8009650:	f7fe fea0 	bl	8008394 <__aeabi_i2d>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4640      	mov	r0, r8
 800965a:	4649      	mov	r1, r9
 800965c:	f7fe fd4e 	bl	80080fc <__adddf3>
 8009660:	4680      	mov	r8, r0
 8009662:	4638      	mov	r0, r7
 8009664:	4689      	mov	r9, r1
 8009666:	f7fe fe95 	bl	8008394 <__aeabi_i2d>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	4640      	mov	r0, r8
 8009670:	4649      	mov	r1, r9
 8009672:	f7ff f96b 	bl	800894c <__aeabi_dcmplt>
 8009676:	b9b0      	cbnz	r0, 80096a6 <Accel+0xbe>
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009678:	68ab      	ldr	r3, [r5, #8]
 800967a:	68b2      	ldr	r2, [r6, #8]
 800967c:	4423      	add	r3, r4
 800967e:	4293      	cmp	r3, r2
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009680:	4620      	mov	r0, r4
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009682:	dcd8      	bgt.n	8009636 <Accel+0x4e>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 8009684:	2300      	movs	r3, #0
 8009686:	f8cb 3000 	str.w	r3, [fp]
	//壁読んで、
//	wall_cut = false;
//	ChangeLED(0);
	KeepPulse[BODY] += target_pulse;
 800968a:	68ab      	ldr	r3, [r5, #8]
 800968c:	4423      	add	r3, r4
 800968e:	60ab      	str	r3, [r5, #8]
	KeepPulse[LEFT] += target_pulse/2;
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8009696:	1064      	asrs	r4, r4, #1
 8009698:	4423      	add	r3, r4
 800969a:	602b      	str	r3, [r5, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800969c:	686b      	ldr	r3, [r5, #4]
 800969e:	441c      	add	r4, r3
 80096a0:	606c      	str	r4, [r5, #4]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 80096a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80096a6:	4b0f      	ldr	r3, [pc, #60]	; (80096e4 <Accel+0xfc>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1e4      	bne.n	8009678 <Accel+0x90>
			updateRealSearch();
 80096ae:	f003 fba1 	bl	800cdf4 <updateRealSearch>
			Calc = 1;
 80096b2:	4a0c      	ldr	r2, [pc, #48]	; (80096e4 <Accel+0xfc>)
 80096b4:	2301      	movs	r3, #1
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	e7de      	b.n	8009678 <Accel+0x90>
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w
 80096c0:	23ca2666 	.word	0x23ca2666
 80096c4:	3f509268 	.word	0x3f509268
 80096c8:	9999999a 	.word	0x9999999a
 80096cc:	3fe99999 	.word	0x3fe99999
 80096d0:	20008994 	.word	0x20008994
 80096d4:	3a83126f 	.word	0x3a83126f
 80096d8:	200089c0 	.word	0x200089c0
 80096dc:	200089e8 	.word	0x200089e8
 80096e0:	200089b4 	.word	0x200089b4
 80096e4:	20008c24 	.word	0x20008c24
 80096e8:	20007f30 	.word	0x20007f30
 80096ec:	00000000 	.word	0x00000000

080096f0 <Decel>:
void Decel(float dec_distance, float end_speed)
{
//	Pos.Act = decel;
	float down_speed=0;
	down_speed = CurrentVelocity[BODY] - end_speed; //end_speedが0かそうでないか
 80096f0:	4b5b      	ldr	r3, [pc, #364]	; (8009860 <Decel+0x170>)
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 80096f2:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8009864 <Decel+0x174>
	down_speed = CurrentVelocity[BODY] - end_speed; //end_speedが0かそうでないか
 80096f6:	ed93 7a02 	vldr	s14, [r3, #8]
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 80096fa:	4b5b      	ldr	r3, [pc, #364]	; (8009868 <Decel+0x178>)
	down_speed = CurrentVelocity[BODY] - end_speed; //end_speedが0かそうでないか
 80096fc:	ee37 7a60 	vsub.f32	s14, s14, s1
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009700:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009704:	ee67 7a27 	vmul.f32	s15, s14, s15
{
 8009708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 800970c:	ee67 7a87 	vmul.f32	s15, s15, s14
{
 8009710:	ed2d 8b02 	vpush	{d8}
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009714:	ee87 7a80 	vdiv.f32	s14, s15, s0
{
 8009718:	b083      	sub	sp, #12
 800971a:	4e54      	ldr	r6, [pc, #336]	; (800986c <Decel+0x17c>)
 800971c:	4d54      	ldr	r5, [pc, #336]	; (8009870 <Decel+0x180>)
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800971e:	f04f 0a00 	mov.w	sl, #0
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009722:	ee10 0a10 	vmov	r0, s0
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009726:	eef1 7a47 	vneg.f32	s15, s14
 800972a:	edc3 7a00 	vstr	s15, [r3]
{
 800972e:	eeb0 8a60 	vmov.f32	s16, s1
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009732:	f7fe fe41 	bl	80083b8 <__aeabi_f2d>
 8009736:	a346      	add	r3, pc, #280	; (adr r3, 8009850 <Decel+0x160>)
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	f7fe ffbe 	bl	80086bc <__aeabi_ddiv>
 8009740:	f7ff f942 	bl	80089c8 <__aeabi_d2iz>
 8009744:	4b4b      	ldr	r3, [pc, #300]	; (8009874 <Decel+0x184>)
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009746:	eddf 8a4c 	vldr	s17, [pc, #304]	; 8009878 <Decel+0x188>
 800974a:	f8d3 b000 	ldr.w	fp, [r3]
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 800974e:	4604      	mov	r4, r0
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009750:	e034      	b.n	80097bc <Decel+0xcc>
 8009752:	4a4a      	ldr	r2, [pc, #296]	; (800987c <Decel+0x18c>)
 8009754:	68ab      	ldr	r3, [r5, #8]
 8009756:	6892      	ldr	r2, [r2, #8]
 8009758:	4423      	add	r3, r4
 800975a:	4293      	cmp	r3, r2
 800975c:	dd58      	ble.n	8009810 <Decel+0x120>
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocity[BODY] <= end_speed) //
 800975e:	4b48      	ldr	r3, [pc, #288]	; (8009880 <Decel+0x190>)
 8009760:	edd3 7a02 	vldr	s15, [r3, #8]
 8009764:	eef4 7ac8 	vcmpe.f32	s15, s16
 8009768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800976c:	d956      	bls.n	800981c <Decel+0x12c>
//
//			ChangeLED(k);
//			k++;
			break;
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 800976e:	f7fe fe11 	bl	8008394 <__aeabi_i2d>
 8009772:	a339      	add	r3, pc, #228	; (adr r3, 8009858 <Decel+0x168>)
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	68af      	ldr	r7, [r5, #8]
 800977a:	9701      	str	r7, [sp, #4]
 800977c:	f7fe fe74 	bl	8008468 <__aeabi_dmul>
 8009780:	4680      	mov	r8, r0
 8009782:	9801      	ldr	r0, [sp, #4]
 8009784:	4f3d      	ldr	r7, [pc, #244]	; (800987c <Decel+0x18c>)
 8009786:	4689      	mov	r9, r1
 8009788:	f7fe fe04 	bl	8008394 <__aeabi_i2d>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	4640      	mov	r0, r8
 8009792:	4649      	mov	r1, r9
 8009794:	f7fe fcb2 	bl	80080fc <__adddf3>
 8009798:	68bf      	ldr	r7, [r7, #8]
 800979a:	4680      	mov	r8, r0
 800979c:	4638      	mov	r0, r7
 800979e:	4689      	mov	r9, r1
 80097a0:	f7fe fdf8 	bl	8008394 <__aeabi_i2d>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4640      	mov	r0, r8
 80097aa:	4649      	mov	r1, r9
 80097ac:	f7ff f8ce 	bl	800894c <__aeabi_dcmplt>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	bf1c      	itt	ne
 80097b4:	f04f 0a01 	movne.w	sl, #1
 80097b8:	f04f 0b00 	movne.w	fp, #0
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80097bc:	ed96 7a03 	vldr	s14, [r6, #12]
 80097c0:	edd6 7a00 	vldr	s15, [r6]
 80097c4:	ee77 7a27 	vadd.f32	s15, s14, s15
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 80097c8:	4620      	mov	r0, r4
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80097ca:	eef4 7ae8 	vcmpe.f32	s15, s17
 80097ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d2:	d4be      	bmi.n	8009752 <Decel+0x62>
 80097d4:	f1ba 0f00 	cmp.w	sl, #0
 80097d8:	d12e      	bne.n	8009838 <Decel+0x148>
 80097da:	492a      	ldr	r1, [pc, #168]	; (8009884 <Decel+0x194>)
 80097dc:	4a2a      	ldr	r2, [pc, #168]	; (8009888 <Decel+0x198>)
//			PIDChangeFlag(D_WALL_PID, 0);
//			PIDChangeFlag( A_VELO_PID , 1);
			Control_Mode = A_VELO_PID;
		}
	}
	TargetVelocity[BODY] = end_speed;
 80097de:	4828      	ldr	r0, [pc, #160]	; (8009880 <Decel+0x190>)
 80097e0:	ed80 8a02 	vstr	s16, [r0, #8]
	Acceleration = 0;
 80097e4:	4820      	ldr	r0, [pc, #128]	; (8009868 <Decel+0x178>)
 80097e6:	2300      	movs	r3, #0
 80097e8:	6003      	str	r3, [r0, #0]
	TargetAngularV = 0;
 80097ea:	600b      	str	r3, [r1, #0]
	AngularAcceleration = 0;
 80097ec:	6013      	str	r3, [r2, #0]
	//ChangeLED(2);
	KeepPulse[BODY] += target_pulse;
 80097ee:	68ab      	ldr	r3, [r5, #8]
 80097f0:	4423      	add	r3, r4
 80097f2:	60ab      	str	r3, [r5, #8]
	KeepPulse[LEFT] += target_pulse/2;
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80097fa:	1064      	asrs	r4, r4, #1
 80097fc:	4423      	add	r3, r4
 80097fe:	602b      	str	r3, [r5, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 8009800:	686b      	ldr	r3, [r5, #4]
 8009802:	441c      	add	r4, r3
 8009804:	606c      	str	r4, [r5, #4]


}
 8009806:	b003      	add	sp, #12
 8009808:	ecbd 8b02 	vpop	{d8}
 800980c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009810:	491c      	ldr	r1, [pc, #112]	; (8009884 <Decel+0x194>)
 8009812:	f1ba 0f00 	cmp.w	sl, #0
 8009816:	d113      	bne.n	8009840 <Decel+0x150>
 8009818:	4a1b      	ldr	r2, [pc, #108]	; (8009888 <Decel+0x198>)
 800981a:	e7e0      	b.n	80097de <Decel+0xee>
 800981c:	f1ba 0f00 	cmp.w	sl, #0
 8009820:	d112      	bne.n	8009848 <Decel+0x158>
			TargetVelocity[BODY] = end_speed;
 8009822:	4817      	ldr	r0, [pc, #92]	; (8009880 <Decel+0x190>)
			TargetAngularV = 0;
 8009824:	4917      	ldr	r1, [pc, #92]	; (8009884 <Decel+0x194>)
			TargetVelocity[BODY] = end_speed;
 8009826:	ed80 8a02 	vstr	s16, [r0, #8]
			AngularAcceleration = 0;
 800982a:	4a17      	ldr	r2, [pc, #92]	; (8009888 <Decel+0x198>)
			Acceleration = 0;
 800982c:	480e      	ldr	r0, [pc, #56]	; (8009868 <Decel+0x178>)
 800982e:	2300      	movs	r3, #0
 8009830:	6003      	str	r3, [r0, #0]
			TargetAngularV = 0;
 8009832:	600b      	str	r3, [r1, #0]
			AngularAcceleration = 0;
 8009834:	6013      	str	r3, [r2, #0]
			break;
 8009836:	e7d2      	b.n	80097de <Decel+0xee>
 8009838:	4b0e      	ldr	r3, [pc, #56]	; (8009874 <Decel+0x184>)
 800983a:	f8c3 b000 	str.w	fp, [r3]
 800983e:	e7cc      	b.n	80097da <Decel+0xea>
 8009840:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <Decel+0x184>)
 8009842:	f8c3 b000 	str.w	fp, [r3]
 8009846:	e7e7      	b.n	8009818 <Decel+0x128>
 8009848:	4b0a      	ldr	r3, [pc, #40]	; (8009874 <Decel+0x184>)
 800984a:	f8c3 b000 	str.w	fp, [r3]
 800984e:	e7e8      	b.n	8009822 <Decel+0x132>
 8009850:	23ca2666 	.word	0x23ca2666
 8009854:	3f509268 	.word	0x3f509268
 8009858:	cccccccd 	.word	0xcccccccd
 800985c:	3fe4cccc 	.word	0x3fe4cccc
 8009860:	200089c0 	.word	0x200089c0
 8009864:	3a83126f 	.word	0x3a83126f
 8009868:	20007f30 	.word	0x20007f30
 800986c:	200089f4 	.word	0x200089f4
 8009870:	200089e8 	.word	0x200089e8
 8009874:	20008978 	.word	0x20008978
 8009878:	456d8000 	.word	0x456d8000
 800987c:	200089b4 	.word	0x200089b4
 8009880:	20008984 	.word	0x20008984
 8009884:	20008994 	.word	0x20008994
 8009888:	20007f38 	.word	0x20007f38
 800988c:	00000000 	.word	0x00000000

08009890 <GoStraight>:
	Pid[wall_ctrl].flag = 0;
	TargetAngularV = 0;
	return 45;
}
void GoStraight(float move_distance,  float explore_speed, int accel_or_decel)
{
 8009890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	ed2d 8b02 	vpush	{d8}
	//v = v0 + at
	//x = v0t + 0.5*at^2
	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	Control_Mode = A_VELO_PID;
	//加減速時は角度制御だけにしておいてあとで困ったら追加
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009898:	ee70 7a00 	vadd.f32	s15, s0, s0
	Control_Mode = A_VELO_PID;
 800989c:	4b8e      	ldr	r3, [pc, #568]	; (8009ad8 <GoStraight+0x248>)
 800989e:	2500      	movs	r5, #0
{
 80098a0:	b083      	sub	sp, #12
 80098a2:	4604      	mov	r4, r0
	Control_Mode = A_VELO_PID;
 80098a4:	601d      	str	r5, [r3, #0]
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 80098a6:	ee17 0a90 	vmov	r0, s15
{
 80098aa:	eeb0 8a40 	vmov.f32	s16, s0
 80098ae:	eef0 8a60 	vmov.f32	s17, s1
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 80098b2:	f7fe fd81 	bl	80083b8 <__aeabi_f2d>
 80098b6:	a382      	add	r3, pc, #520	; (adr r3, 8009ac0 <GoStraight+0x230>)
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	f7fe fefe 	bl	80086bc <__aeabi_ddiv>
 80098c0:	f7ff f882 	bl	80089c8 <__aeabi_d2iz>
	if(accel_or_decel == 1) //加速するとき
 80098c4:	2c01      	cmp	r4, #1
 80098c6:	f000 8098 	beq.w	80099fa <GoStraight+0x16a>
	{
		//explore_speed += AddVelocity;
		VelocityMax = true;
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
	}
	else if(accel_or_decel == -1) //探索速度までの減速. ターン速度までの減速も後で入れる
 80098ca:	3401      	adds	r4, #1
 80098cc:	4683      	mov	fp, r0
 80098ce:	f000 80a1 	beq.w	8009a14 <GoStraight+0x184>
//		Pos.Act = straight;
//		WallSafe();
//		ControlWall();
		_Bool wall_cut=false;	//壁切れ用
		_Bool face_check  = false; //一度でも正面領域に収まったか
		int ctrl_mode = GetWallCtrlDirection();
 80098d2:	f7ff fa9d 	bl	8008e10 <GetWallCtrlDirection>
		//両壁がなければ, 角度制御しつつ柱を見たい. 細かすぎるかも.　今は角度制御
		if (ctrl_mode == N_WALL_PID )//|| ctrl_mode == F_WALL_PID)
			ctrl_mode = A_VELO_PID;
 80098d6:	4603      	mov	r3, r0
 80098d8:	2806      	cmp	r0, #6
 80098da:	bf08      	it	eq
 80098dc:	2300      	moveq	r3, #0
 80098de:	4c7f      	ldr	r4, [pc, #508]	; (8009adc <GoStraight+0x24c>)
 80098e0:	4d7f      	ldr	r5, [pc, #508]	; (8009ae0 <GoStraight+0x250>)
 80098e2:	9301      	str	r3, [sp, #4]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 80098e4:	68a3      	ldr	r3, [r4, #8]
 80098e6:	68aa      	ldr	r2, [r5, #8]
 80098e8:	445b      	add	r3, fp
 80098ea:	4293      	cmp	r3, r2
//				}//壁がなくなるのを見越して角度のみに変更
//				else{
//					Control_Mode = ctrl_mode;
//				}//少しの間壁を見て制御
//			}
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 80098ec:	4658      	mov	r0, fp
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 80098ee:	dd58      	ble.n	80099a2 <GoStraight+0x112>
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 80098f0:	f7fe fd50 	bl	8008394 <__aeabi_i2d>
 80098f4:	68a6      	ldr	r6, [r4, #8]
 80098f6:	4681      	mov	r9, r0
 80098f8:	4630      	mov	r0, r6
 80098fa:	468a      	mov	sl, r1
 80098fc:	f7fe fd4a 	bl	8008394 <__aeabi_i2d>
 8009900:	a371      	add	r3, pc, #452	; (adr r3, 8009ac8 <GoStraight+0x238>)
 8009902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009906:	4606      	mov	r6, r0
 8009908:	460f      	mov	r7, r1
 800990a:	4648      	mov	r0, r9
 800990c:	4651      	mov	r1, sl
 800990e:	f7fe fdab 	bl	8008468 <__aeabi_dmul>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4630      	mov	r0, r6
 8009918:	4639      	mov	r1, r7
 800991a:	f7fe fbef 	bl	80080fc <__adddf3>
 800991e:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009922:	4606      	mov	r6, r0
 8009924:	4640      	mov	r0, r8
 8009926:	460f      	mov	r7, r1
 8009928:	f7fe fd34 	bl	8008394 <__aeabi_i2d>
 800992c:	460b      	mov	r3, r1
 800992e:	4602      	mov	r2, r0
 8009930:	4639      	mov	r1, r7
 8009932:	4630      	mov	r0, r6
 8009934:	f7ff f80a 	bl	800894c <__aeabi_dcmplt>
				Control_Mode = A_VELO_PID;
 8009938:	2300      	movs	r3, #0
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 800993a:	2800      	cmp	r0, #0
 800993c:	d059      	beq.n	80099f2 <GoStraight+0x162>
				Control_Mode = A_VELO_PID;
 800993e:	4a66      	ldr	r2, [pc, #408]	; (8009ad8 <GoStraight+0x248>)
 8009940:	6013      	str	r3, [r2, #0]
			}
			else Control_Mode = ctrl_mode;//壁見る
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			//右か左の壁のセンサ値を見て、閾値を下回ったら、TotalPulseかKeepPulseを補正する
			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009942:	68a0      	ldr	r0, [r4, #8]
 8009944:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009948:	f7fe fd24 	bl	8008394 <__aeabi_i2d>
 800994c:	a360      	add	r3, pc, #384	; (adr r3, 8009ad0 <GoStraight+0x240>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	4606      	mov	r6, r0
 8009954:	460f      	mov	r7, r1
 8009956:	4648      	mov	r0, r9
 8009958:	4651      	mov	r1, sl
 800995a:	f7fe fd85 	bl	8008468 <__aeabi_dmul>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4630      	mov	r0, r6
 8009964:	4639      	mov	r1, r7
 8009966:	f7fe fbc9 	bl	80080fc <__adddf3>
 800996a:	4606      	mov	r6, r0
 800996c:	4640      	mov	r0, r8
 800996e:	460f      	mov	r7, r1
 8009970:	f7fe fd10 	bl	8008394 <__aeabi_i2d>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	f7fe ffe6 	bl	800894c <__aeabi_dcmplt>
 8009980:	2800      	cmp	r0, #0
 8009982:	d0af      	beq.n	80098e4 <GoStraight+0x54>
 8009984:	4b57      	ldr	r3, [pc, #348]	; (8009ae4 <GoStraight+0x254>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1ab      	bne.n	80098e4 <GoStraight+0x54>
			{
				updateRealSearch();
 800998c:	f003 fa32 	bl	800cdf4 <updateRealSearch>
				Calc = 1;
 8009990:	4a54      	ldr	r2, [pc, #336]	; (8009ae4 <GoStraight+0x254>)
 8009992:	2301      	movs	r3, #1
 8009994:	6013      	str	r3, [r2, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009996:	68a3      	ldr	r3, [r4, #8]
 8009998:	68aa      	ldr	r2, [r5, #8]
 800999a:	445b      	add	r3, fp
 800999c:	4293      	cmp	r3, r2
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 800999e:	4658      	mov	r0, fp
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 80099a0:	dca6      	bgt.n	80098f0 <GoStraight+0x60>
	//			Acceleration = 0;
	//		}
		}
		Control_Mode = A_VELO_PID;
		wall_cut = false;
		Acceleration = 0;
 80099a2:	4b51      	ldr	r3, [pc, #324]	; (8009ae8 <GoStraight+0x258>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]
		KeepPulse[BODY] += target_pulse;
 80099a8:	68a3      	ldr	r3, [r4, #8]
		Control_Mode = A_VELO_PID;
 80099aa:	4a4b      	ldr	r2, [pc, #300]	; (8009ad8 <GoStraight+0x248>)
		KeepPulse[BODY] += target_pulse;
 80099ac:	445b      	add	r3, fp
 80099ae:	60a3      	str	r3, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 80099b0:	ed94 7a00 	vldr	s14, [r4]
 80099b4:	ee07 ba90 	vmov	s15, fp
 80099b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099c0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80099c4:	eea7 7aa6 	vfma.f32	s14, s15, s13
		Control_Mode = A_VELO_PID;
 80099c8:	2300      	movs	r3, #0
 80099ca:	6013      	str	r3, [r2, #0]
		KeepPulse[LEFT] += target_pulse*0.5f;
 80099cc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80099d0:	ed84 7a00 	vstr	s14, [r4]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 80099d4:	ed94 7a01 	vldr	s14, [r4, #4]
 80099d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099dc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80099e0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80099e4:	edc4 7a01 	vstr	s15, [r4, #4]
	//WallWarn();
	//keep_pulse = TotalPulse[BODY];
	//計算は区切りのいいところで一回するだけ。移動しきるまでそのままか、条件に応じて変える。
	//Uターンは別パターン
	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。
}
 80099e8:	b003      	add	sp, #12
 80099ea:	ecbd 8b02 	vpop	{d8}
 80099ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else Control_Mode = ctrl_mode;//壁見る
 80099f2:	4b39      	ldr	r3, [pc, #228]	; (8009ad8 <GoStraight+0x248>)
 80099f4:	9a01      	ldr	r2, [sp, #4]
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	e7a3      	b.n	8009942 <GoStraight+0xb2>
		VelocityMax = true;
 80099fa:	4b3c      	ldr	r3, [pc, #240]	; (8009aec <GoStraight+0x25c>)
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 80099fc:	eef0 0a68 	vmov.f32	s1, s17
 8009a00:	eeb0 0a48 	vmov.f32	s0, s16
		VelocityMax = true;
 8009a04:	701c      	strb	r4, [r3, #0]
}
 8009a06:	b003      	add	sp, #12
 8009a08:	ecbd 8b02 	vpop	{d8}
 8009a0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009a10:	f7ff bdea 	b.w	80095e8 <Accel>
		VelocityMax = false;
 8009a14:	4b35      	ldr	r3, [pc, #212]	; (8009aec <GoStraight+0x25c>)
 8009a16:	4c31      	ldr	r4, [pc, #196]	; (8009adc <GoStraight+0x24c>)
 8009a18:	701d      	strb	r5, [r3, #0]
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009a1a:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8009a1e:	eef0 0a68 	vmov.f32	s1, s17
 8009a22:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009a26:	f7ff fe63 	bl	80096f0 <Decel>
 8009a2a:	ee07 ba90 	vmov	s15, fp
 8009a2e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8009a32:	eeb5 8a00 	vmov.f32	s16, #80	; 0x3e800000  0.250
 8009a36:	ee28 8a88 	vmul.f32	s16, s17, s16
 8009a3a:	4d29      	ldr	r5, [pc, #164]	; (8009ae0 <GoStraight+0x250>)
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009a3c:	4e29      	ldr	r6, [pc, #164]	; (8009ae4 <GoStraight+0x254>)
				Calc = 1;
 8009a3e:	2701      	movs	r7, #1
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009a40:	e001      	b.n	8009a46 <GoStraight+0x1b6>
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009a42:	6833      	ldr	r3, [r6, #0]
 8009a44:	b3bb      	cbz	r3, 8009ab6 <GoStraight+0x226>
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009a46:	edd4 7a02 	vldr	s15, [r4, #8]
 8009a4a:	ed95 7a02 	vldr	s14, [r5, #8]
 8009a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a56:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a62:	dcee      	bgt.n	8009a42 <GoStraight+0x1b2>
		KeepPulse[BODY] += target_pulse*0.2f;
 8009a64:	edd4 7a02 	vldr	s15, [r4, #8]
 8009a68:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009af0 <GoStraight+0x260>
 8009a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a70:	ee28 7a87 	vmul.f32	s14, s17, s14
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009a74:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
		KeepPulse[BODY] += target_pulse*0.2f;
 8009a78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a80:	edc4 7a02 	vstr	s15, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009a84:	edd4 7a00 	vldr	s15, [r4]
 8009a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a8c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a94:	edc4 7a00 	vstr	s15, [r4]
		KeepPulse[RIGHT] += target_pulse*0.2f*0.5f;
 8009a98:	edd4 7a01 	vldr	s15, [r4, #4]
 8009a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aa0:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009aa8:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8009aac:	b003      	add	sp, #12
 8009aae:	ecbd 8b02 	vpop	{d8}
 8009ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				updateRealSearch();
 8009ab6:	f003 f99d 	bl	800cdf4 <updateRealSearch>
				Calc = 1;
 8009aba:	6037      	str	r7, [r6, #0]
 8009abc:	e7c3      	b.n	8009a46 <GoStraight+0x1b6>
 8009abe:	bf00      	nop
 8009ac0:	23ca2666 	.word	0x23ca2666
 8009ac4:	3f509268 	.word	0x3f509268
 8009ac8:	9999999a 	.word	0x9999999a
 8009acc:	3fd99999 	.word	0x3fd99999
 8009ad0:	9999999a 	.word	0x9999999a
 8009ad4:	3fe99999 	.word	0x3fe99999
 8009ad8:	20008978 	.word	0x20008978
 8009adc:	200089e8 	.word	0x200089e8
 8009ae0:	200089b4 	.word	0x200089b4
 8009ae4:	20008c24 	.word	0x20008c24
 8009ae8:	20007f30 	.word	0x20007f30
 8009aec:	20008aa6 	.word	0x20008aa6
 8009af0:	3e4ccccd 	.word	0x3e4ccccd

08009af4 <TurnRight>:
void TurnRight(char mode)
{
	//関数呼び出しと判定処理が多いと遅い。

	switch( mode )
 8009af4:	2853      	cmp	r0, #83	; 0x53
 8009af6:	d02a      	beq.n	8009b4e <TurnRight+0x5a>
 8009af8:	2854      	cmp	r0, #84	; 0x54
 8009afa:	d127      	bne.n	8009b4c <TurnRight+0x58>
{
 8009afc:	b510      	push	{r4, lr}
	{
	case 'T' :

		Decel(45, 0);
 8009afe:	eddf 0a15 	vldr	s1, [pc, #84]	; 8009b54 <TurnRight+0x60>
 8009b02:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8009b58 <TurnRight+0x64>
//		ChangeLED(5);
		//AjustCenter();
		EmitterOFF();
//		Pid[Control_Mode].flag = 0;
//		PIDReset(Control_Mode);
		Control_Mode = NOT_CTRL_PID;
 8009b06:	4c15      	ldr	r4, [pc, #84]	; (8009b5c <TurnRight+0x68>)
		Decel(45, 0);
 8009b08:	f7ff fdf2 	bl	80096f0 <Decel>
		WaitStopAndReset();
 8009b0c:	f7ff f9e6 	bl	8008edc <WaitStopAndReset>
		EmitterOFF();
 8009b10:	f003 ff1c 	bl	800d94c <EmitterOFF>
		//二回目の減速ではマップが完全におかし
		//一回目のターン時の減速終了時は正しい
		//二回目のターン時の減速後までにマップが狂ってる

//		PIDChangeFlag(A_VELO_PID, 0);
		Rotate( 90 , 2*M_PI);//1.5
 8009b14:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009b60 <TurnRight+0x6c>
 8009b18:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8009b64 <TurnRight+0x70>
		Control_Mode = NOT_CTRL_PID;
 8009b1c:	230a      	movs	r3, #10
 8009b1e:	6023      	str	r3, [r4, #0]
		Rotate( 90 , 2*M_PI);//1.5
 8009b20:	f7ff f9fe 	bl	8008f20 <Rotate>
		my_mouse.now.car += 2;
 8009b24:	4a10      	ldr	r2, [pc, #64]	; (8009b68 <TurnRight+0x74>)
 8009b26:	7a93      	ldrb	r3, [r2, #10]
 8009b28:	3302      	adds	r3, #2
 8009b2a:	7293      	strb	r3, [r2, #10]

//		ChangeLED(0);
		//RotateTest(90);

//		float acc = AjustCenter();
		EmitterON();
 8009b2c:	f003 ff00 	bl	800d930 <EmitterON>

//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		HAL_Delay(100);
 8009b30:	2064      	movs	r0, #100	; 0x64
 8009b32:	f004 fe1b 	bl	800e76c <HAL_Delay>
//														printProfile(&my_mouse);
//														printAllWeight(&my_map, &(my_mouse.goal_lesser));
//													}
//												}
//												cc ++;
		Accel(45, ExploreVelocity);
 8009b36:	4b0d      	ldr	r3, [pc, #52]	; (8009b6c <TurnRight+0x78>)
 8009b38:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8009b58 <TurnRight+0x64>
 8009b3c:	edd3 0a00 	vldr	s1, [r3]
		Control_Mode = A_VELO_PID; //ゴールを破壊してるのはこれ
 8009b40:	2300      	movs	r3, #0
 8009b42:	6023      	str	r3, [r4, #0]
	default :
		break;
	}


}
 8009b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Accel(45, ExploreVelocity);
 8009b48:	f7ff bd4e 	b.w	80095e8 <Accel>
 8009b4c:	4770      	bx	lr
		SlalomRight();
 8009b4e:	f7ff bb33 	b.w	80091b8 <SlalomRight>
 8009b52:	bf00      	nop
 8009b54:	00000000 	.word	0x00000000
 8009b58:	42340000 	.word	0x42340000
 8009b5c:	20008978 	.word	0x20008978
 8009b60:	40c90fdb 	.word	0x40c90fdb
 8009b64:	42b40000 	.word	0x42b40000
 8009b68:	20008220 	.word	0x20008220
 8009b6c:	20008aa8 	.word	0x20008aa8

08009b70 <TurnLeft>:
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 8009b70:	2853      	cmp	r0, #83	; 0x53
 8009b72:	d02d      	beq.n	8009bd0 <TurnLeft+0x60>
 8009b74:	2854      	cmp	r0, #84	; 0x54
 8009b76:	d12a      	bne.n	8009bce <TurnLeft+0x5e>
{
 8009b78:	b510      	push	{r4, lr}
	{
	case 'T' :
		//超信地旋回
		Decel(45, 0);
 8009b7a:	eddf 0a16 	vldr	s1, [pc, #88]	; 8009bd4 <TurnLeft+0x64>
 8009b7e:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8009bd8 <TurnLeft+0x68>
		//ChangeLED(5);

		//AjustCenter();
		EmitterOFF();
//		PIDChangeFlag(A_VELO_PID, 0);
		Control_Mode = NOT_CTRL_PID;
 8009b82:	4c16      	ldr	r4, [pc, #88]	; (8009bdc <TurnLeft+0x6c>)
		Decel(45, 0);
 8009b84:	f7ff fdb4 	bl	80096f0 <Decel>
		WaitStopAndReset();
 8009b88:	f7ff f9a8 	bl	8008edc <WaitStopAndReset>
		EmitterOFF();
 8009b8c:	f003 fede 	bl	800d94c <EmitterOFF>
		Rotate( 90 , -2*M_PI);//-1.5
 8009b90:	eddf 0a13 	vldr	s1, [pc, #76]	; 8009be0 <TurnLeft+0x70>
 8009b94:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8009be4 <TurnLeft+0x74>
		Control_Mode = NOT_CTRL_PID;
 8009b98:	230a      	movs	r3, #10
 8009b9a:	6023      	str	r3, [r4, #0]
		Rotate( 90 , -2*M_PI);//-1.5
 8009b9c:	f7ff f9c0 	bl	8008f20 <Rotate>
		my_mouse.now.car -= 2;
 8009ba0:	4a11      	ldr	r2, [pc, #68]	; (8009be8 <TurnLeft+0x78>)
 8009ba2:	7a93      	ldrb	r3, [r2, #10]
 8009ba4:	3b02      	subs	r3, #2
 8009ba6:	7293      	strb	r3, [r2, #10]
		//RotateTest(-90);
//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		EmitterON();
 8009ba8:	f003 fec2 	bl	800d930 <EmitterON>
		HAL_Delay(100);
 8009bac:	2064      	movs	r0, #100	; 0x64
 8009bae:	f004 fddd 	bl	800e76c <HAL_Delay>
//		float acc = AjustCenter();
		HAL_Delay(100);
 8009bb2:	2064      	movs	r0, #100	; 0x64
 8009bb4:	f004 fdda 	bl	800e76c <HAL_Delay>
		Control_Mode = A_VELO_PID;
//		PIDChangeFlag( A_VELO_PID , 1);
		Accel(45, ExploreVelocity);
 8009bb8:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <TurnLeft+0x7c>)
 8009bba:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8009bd8 <TurnLeft+0x68>
 8009bbe:	edd3 0a00 	vldr	s1, [r3]
		Control_Mode = A_VELO_PID;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	6023      	str	r3, [r4, #0]
		break;
	default :
		break;
	}

}
 8009bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Accel(45, ExploreVelocity);
 8009bca:	f7ff bd0d 	b.w	80095e8 <Accel>
 8009bce:	4770      	bx	lr
		SlalomLeft();
 8009bd0:	f7ff bc0a 	b.w	80093e8 <SlalomLeft>
 8009bd4:	00000000 	.word	0x00000000
 8009bd8:	42340000 	.word	0x42340000
 8009bdc:	20008978 	.word	0x20008978
 8009be0:	c0c90fdb 	.word	0xc0c90fdb
 8009be4:	42b40000 	.word	0x42b40000
 8009be8:	20008220 	.word	0x20008220
 8009bec:	20008aa8 	.word	0x20008aa8

08009bf0 <GoBack>:
void GoBack()
{
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	ed2d 8b04 	vpush	{d8-d9}
	//減速して
	Decel(45, 0);
 8009bf6:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8009c5c <GoBack+0x6c>

#else
	Pos.Dir = right;
	Control_Mode = NOT_CTRL_PID;
//	PIDChangeFlag(A_VELO_PID, 0);
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 8009bfa:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8009c60 <GoBack+0x70>
 8009bfe:	eddf 8a19 	vldr	s17, [pc, #100]	; 8009c64 <GoBack+0x74>
	Pos.Dir = right;
 8009c02:	4c19      	ldr	r4, [pc, #100]	; (8009c68 <GoBack+0x78>)
	Decel(45, 0);
 8009c04:	eddf 0a19 	vldr	s1, [pc, #100]	; 8009c6c <GoBack+0x7c>
	Control_Mode = NOT_CTRL_PID;
 8009c08:	4d19      	ldr	r5, [pc, #100]	; (8009c70 <GoBack+0x80>)
	Decel(45, 0);
 8009c0a:	eeb0 0a48 	vmov.f32	s0, s16
 8009c0e:	f7ff fd6f 	bl	80096f0 <Decel>
	Pos.Dir = right;
 8009c12:	2602      	movs	r6, #2
	WaitStopAndReset();
 8009c14:	f7ff f962 	bl	8008edc <WaitStopAndReset>
	Control_Mode = NOT_CTRL_PID;
 8009c18:	230a      	movs	r3, #10
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 8009c1a:	eef0 0a49 	vmov.f32	s1, s18
 8009c1e:	eeb0 0a68 	vmov.f32	s0, s17
	Control_Mode = NOT_CTRL_PID;
 8009c22:	602b      	str	r3, [r5, #0]
	Pos.Dir = right;
 8009c24:	7126      	strb	r6, [r4, #4]
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 8009c26:	f7ff f97b 	bl	8008f20 <Rotate>
	//acc = AjustCenter();
	Pos.Dir = right;
	Rotate(90, 2*M_PI);
 8009c2a:	eef0 0a49 	vmov.f32	s1, s18
 8009c2e:	eeb0 0a68 	vmov.f32	s0, s17
	Pos.Dir = right;
 8009c32:	7126      	strb	r6, [r4, #4]
	Rotate(90, 2*M_PI);
 8009c34:	f7ff f974 	bl	8008f20 <Rotate>
	Control_Mode = A_VELO_PID;
//	PIDChangeFlag(A_VELO_PID, 1);
	Pos.Dir = back;
 8009c38:	2304      	movs	r3, #4
	Control_Mode = A_VELO_PID;
 8009c3a:	2200      	movs	r2, #0
#endif

	//acc = AjustCenter();
//	/Angle = TargetAngle;

	HAL_Delay(200);
 8009c3c:	20c8      	movs	r0, #200	; 0xc8
	Pos.Dir = back;
 8009c3e:	7123      	strb	r3, [r4, #4]
	Control_Mode = A_VELO_PID;
 8009c40:	602a      	str	r2, [r5, #0]
	HAL_Delay(200);
 8009c42:	f004 fd93 	bl	800e76c <HAL_Delay>

	Accel(45, ExploreVelocity);
 8009c46:	eeb0 0a48 	vmov.f32	s0, s16
	//ここまでで目標走行距離を完了する

}
 8009c4a:	ecbd 8b04 	vpop	{d8-d9}
	Accel(45, ExploreVelocity);
 8009c4e:	4b09      	ldr	r3, [pc, #36]	; (8009c74 <GoBack+0x84>)
}
 8009c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Accel(45, ExploreVelocity);
 8009c54:	edd3 0a00 	vldr	s1, [r3]
 8009c58:	f7ff bcc6 	b.w	80095e8 <Accel>
 8009c5c:	42340000 	.word	0x42340000
 8009c60:	40c90fdb 	.word	0x40c90fdb
 8009c64:	42b40000 	.word	0x42b40000
 8009c68:	20000004 	.word	0x20000004
 8009c6c:	00000000 	.word	0x00000000
 8009c70:	20008978 	.word	0x20008978
 8009c74:	20008aa8 	.word	0x20008aa8

08009c78 <Explore_IT>:
	//4つめが終わる前に0.5msが過ぎる説。
}


void Explore_IT()
{
 8009c78:	b570      	push	{r4, r5, r6, lr}

//*-----------------*/

	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009c7a:	4c53      	ldr	r4, [pc, #332]	; (8009dc8 <Explore_IT+0x150>)
 8009c7c:	4853      	ldr	r0, [pc, #332]	; (8009dcc <Explore_IT+0x154>)
 8009c7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009c80:	4a53      	ldr	r2, [pc, #332]	; (8009dd0 <Explore_IT+0x158>)
	TIM4->CNT = INITIAL_PULSE;

	//速度 mm/s
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009c82:	eddf 7a54 	vldr	s15, [pc, #336]	; 8009dd4 <Explore_IT+0x15c>
 8009c86:	4d54      	ldr	r5, [pc, #336]	; (8009dd8 <Explore_IT+0x160>)

	//switch文でどれかひとつに絞らせたい
	static int keep_mode = A_VELO_PID;

	//0から違うモードに変わるとき、前のモードの値をリセットしておく
	if( Control_Mode != keep_mode){
 8009c88:	4e54      	ldr	r6, [pc, #336]	; (8009ddc <Explore_IT+0x164>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009c8a:	f247 532f 	movw	r3, #29999	; 0x752f
 8009c8e:	1a59      	subs	r1, r3, r1
 8009c90:	6001      	str	r1, [r0, #0]
	TIM3->CNT = INITIAL_PULSE;
 8009c92:	6263      	str	r3, [r4, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009c94:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 8009c96:	6253      	str	r3, [r2, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009c98:	1b1b      	subs	r3, r3, r4
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009c9a:	ee07 3a10 	vmov	s14, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009c9e:	ee06 1a90 	vmov	s13, r1
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009ca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009ca6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009caa:	ee27 7a27 	vmul.f32	s14, s14, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009cae:	ee66 6aa7 	vmul.f32	s13, s13, s15
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009cb2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009cb6:	edc5 6a00 	vstr	s13, [r5]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009cba:	ed85 7a01 	vstr	s14, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009cbe:	edd5 7a00 	vldr	s15, [r5]
 8009cc2:	ed95 7a01 	vldr	s14, [r5, #4]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8009cc6:	4a46      	ldr	r2, [pc, #280]	; (8009de0 <Explore_IT+0x168>)
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009cc8:	6043      	str	r3, [r0, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009cca:	ee77 7a87 	vadd.f32	s15, s15, s14
	if( Control_Mode != keep_mode){
 8009cce:	4c45      	ldr	r4, [pc, #276]	; (8009de4 <Explore_IT+0x16c>)
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009cd0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009cd4:	edc5 7a02 	vstr	s15, [r5, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8009cd8:	6810      	ldr	r0, [r2, #0]
 8009cda:	4401      	add	r1, r0
 8009cdc:	6011      	str	r1, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 8009cde:	6851      	ldr	r1, [r2, #4]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 8009ce0:	4841      	ldr	r0, [pc, #260]	; (8009de8 <Explore_IT+0x170>)
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 8009ce2:	440b      	add	r3, r1
 8009ce4:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 8009ce6:	6813      	ldr	r3, [r2, #0]
 8009ce8:	6851      	ldr	r1, [r2, #4]
 8009cea:	440b      	add	r3, r1
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 8009cec:	493f      	ldr	r1, [pc, #252]	; (8009dec <Explore_IT+0x174>)
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 8009cee:	6093      	str	r3, [r2, #8]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 8009cf0:	f003 fcf2 	bl	800d6d8 <Update_IMU>
	if( Control_Mode != keep_mode){
 8009cf4:	6820      	ldr	r0, [r4, #0]
 8009cf6:	6833      	ldr	r3, [r6, #0]
 8009cf8:	4283      	cmp	r3, r0
 8009cfa:	d14a      	bne.n	8009d92 <Explore_IT+0x11a>
 8009cfc:	4a3c      	ldr	r2, [pc, #240]	; (8009df0 <Explore_IT+0x178>)
		PIDReset(keep_mode);
//		PIDChangeFlag(, 0);
		Pid[keep_mode].flag = 0;
	}
	Pid[Control_Mode].flag = 1;
	keep_mode = Control_Mode;
 8009cfe:	6020      	str	r0, [r4, #0]
	Pid[Control_Mode].flag = 1;
 8009d00:	232c      	movs	r3, #44	; 0x2c
 8009d02:	fb03 2300 	mla	r3, r3, r0, r2
 8009d06:	2201      	movs	r2, #1
 8009d08:	629a      	str	r2, [r3, #40]	; 0x28
					TargetAngularV = (float)ang_out;

					//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
				}
#endif
	switch(Control_Mode)
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d04c      	beq.n	8009da8 <Explore_IT+0x130>
 8009d0e:	4b39      	ldr	r3, [pc, #228]	; (8009df4 <Explore_IT+0x17c>)
//
//				//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
//			}
//		}

	TargetVelocity[BODY] += Acceleration;
 8009d10:	4c39      	ldr	r4, [pc, #228]	; (8009df8 <Explore_IT+0x180>)
 8009d12:	4a3a      	ldr	r2, [pc, #232]	; (8009dfc <Explore_IT+0x184>)
	//AngularAcceleration += AngularLeapsity;
	TargetAngularV += AngularAcceleration;
	//TargetAngularV += AngularAcceleration;
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009d14:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8009e00 <Explore_IT+0x188>
	TargetVelocity[BODY] += Acceleration;
 8009d18:	ed92 7a00 	vldr	s14, [r2]
 8009d1c:	edd4 7a02 	vldr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 8009d20:	4a38      	ldr	r2, [pc, #224]	; (8009e04 <Explore_IT+0x18c>)
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009d22:	4e39      	ldr	r6, [pc, #228]	; (8009e08 <Explore_IT+0x190>)
	TargetVelocity[BODY] += Acceleration;
 8009d24:	ee77 7a87 	vadd.f32	s15, s15, s14
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009d28:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	TargetVelocity[BODY] += Acceleration;
 8009d2c:	edc4 7a02 	vstr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 8009d30:	ed92 7a00 	vldr	s14, [r2]
 8009d34:	edd3 7a00 	vldr	s15, [r3]
 8009d38:	ee77 7a87 	vadd.f32	s15, s15, s14
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009d3c:	2004      	movs	r0, #4
	TargetAngularV += AngularAcceleration;
 8009d3e:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009d42:	edd4 7a02 	vldr	s15, [r4, #8]
 8009d46:	ed93 7a00 	vldr	s14, [r3]
 8009d4a:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 8009d4e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8009d52:	edc4 7a01 	vstr	s15, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 8009d56:	ed93 7a00 	vldr	s14, [r3]
 8009d5a:	edd4 7a01 	vldr	s15, [r4, #4]
 8009d5e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009d62:	edc4 7a00 	vstr	s15, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009d66:	ed94 0a00 	vldr	s0, [r4]
 8009d6a:	edd5 0a00 	vldr	s1, [r5]
 8009d6e:	f004 fb3b 	bl	800e3e8 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009d72:	ed94 0a01 	vldr	s0, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009d76:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009d78:	edd5 0a01 	vldr	s1, [r5, #4]
 8009d7c:	2005      	movs	r0, #5
 8009d7e:	f004 fb33 	bl	800e3e8 <PIDControl>
 8009d82:	4b22      	ldr	r3, [pc, #136]	; (8009e0c <Explore_IT+0x194>)
 8009d84:	4601      	mov	r1, r0

	//モータに出力
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 8009d86:	6830      	ldr	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009d88:	6019      	str	r1, [r3, #0]
//			ChangeLED(7);
//	else
//	{
//		ChangeLED(4);
//	}
}
 8009d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 8009d8e:	f003 bedf 	b.w	800db50 <Motor_Switch>
		PIDReset(keep_mode);
 8009d92:	f004 fb1b 	bl	800e3cc <PIDReset>
		Pid[keep_mode].flag = 0;
 8009d96:	4a16      	ldr	r2, [pc, #88]	; (8009df0 <Explore_IT+0x178>)
 8009d98:	6823      	ldr	r3, [r4, #0]
 8009d9a:	6830      	ldr	r0, [r6, #0]
 8009d9c:	212c      	movs	r1, #44	; 0x2c
 8009d9e:	fb01 2303 	mla	r3, r1, r3, r2
 8009da2:	2100      	movs	r1, #0
 8009da4:	6299      	str	r1, [r3, #40]	; 0x28
 8009da6:	e7aa      	b.n	8009cfe <Explore_IT+0x86>
		ang_out = PIDControl( Control_Mode,  TargetAngle, Angle);
 8009da8:	4b10      	ldr	r3, [pc, #64]	; (8009dec <Explore_IT+0x174>)
 8009daa:	4a19      	ldr	r2, [pc, #100]	; (8009e10 <Explore_IT+0x198>)
 8009dac:	ed92 0a00 	vldr	s0, [r2]
 8009db0:	edd3 0a00 	vldr	s1, [r3]
 8009db4:	f004 fb18 	bl	800e3e8 <PIDControl>
		TargetAngularV = (float)ang_out;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
 8009db8:	ee07 0a90 	vmov	s15, r0
 8009dbc:	4b0d      	ldr	r3, [pc, #52]	; (8009df4 <Explore_IT+0x17c>)
 8009dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dc2:	edc3 7a00 	vstr	s15, [r3]
		break;
 8009dc6:	e7a3      	b.n	8009d10 <Explore_IT+0x98>
 8009dc8:	40000400 	.word	0x40000400
 8009dcc:	20008b70 	.word	0x20008b70
 8009dd0:	40000800 	.word	0x40000800
 8009dd4:	3f8177cd 	.word	0x3f8177cd
 8009dd8:	200089c0 	.word	0x200089c0
 8009ddc:	20008978 	.word	0x20008978
 8009de0:	200089b4 	.word	0x200089b4
 8009de4:	20007f28 	.word	0x20007f28
 8009de8:	20007f40 	.word	0x20007f40
 8009dec:	20007f34 	.word	0x20007f34
 8009df0:	20008030 	.word	0x20008030
 8009df4:	20008994 	.word	0x20008994
 8009df8:	20008984 	.word	0x20008984
 8009dfc:	20007f30 	.word	0x20007f30
 8009e00:	4209999a 	.word	0x4209999a
 8009e04:	20007f38 	.word	0x20007f38
 8009e08:	20008aac 	.word	0x20008aac
 8009e0c:	20008ac8 	.word	0x20008ac8
 8009e10:	20007f44 	.word	0x20007f44
 8009e14:	00000000 	.word	0x00000000

08009e18 <WritingFree_IT>:
void WritingFree_IT()
{
 8009e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009e1c:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800a014 <WritingFree_IT+0x1fc>
 8009e20:	4969      	ldr	r1, [pc, #420]	; (8009fc8 <WritingFree_IT+0x1b0>)
 8009e22:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009e26:	4869      	ldr	r0, [pc, #420]	; (8009fcc <WritingFree_IT+0x1b4>)
	TIM4->CNT = INITIAL_PULSE;

	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009e28:	eddf 6a69 	vldr	s13, [pc, #420]	; 8009fd0 <WritingFree_IT+0x1b8>
 8009e2c:	4d69      	ldr	r5, [pc, #420]	; (8009fd4 <WritingFree_IT+0x1bc>)
//			velodebug_flag = 0;
//		}
//
//	}
	//移動量 mm/msを積算
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8009e2e:	4a6a      	ldr	r2, [pc, #424]	; (8009fd8 <WritingFree_IT+0x1c0>)
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8009e30:	4f6a      	ldr	r7, [pc, #424]	; (8009fdc <WritingFree_IT+0x1c4>)
			}
		}
#endif

	AngularAcceleration += AngularLeapsity;
	TargetVelocity[BODY] += Acceleration;
 8009e32:	4c6b      	ldr	r4, [pc, #428]	; (8009fe0 <WritingFree_IT+0x1c8>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009e34:	f247 532f 	movw	r3, #29999	; 0x752f
 8009e38:	1b9e      	subs	r6, r3, r6
{
 8009e3a:	ed2d 8b02 	vpush	{d8}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009e3e:	600e      	str	r6, [r1, #0]
	TIM3->CNT = INITIAL_PULSE;
 8009e40:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009e44:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 8009e48:	6243      	str	r3, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009e4a:	eba3 030c 	sub.w	r3, r3, ip
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009e4e:	ee07 3a90 	vmov	s15, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009e52:	ee07 6a10 	vmov	s14, r6
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009e5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009e5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009e62:	ee27 7a26 	vmul.f32	s14, s14, s13
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009e66:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009e6a:	ed85 7a00 	vstr	s14, [r5]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009e6e:	edc5 7a01 	vstr	s15, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009e72:	edd5 7a00 	vldr	s15, [r5]
 8009e76:	ed95 7a01 	vldr	s14, [r5, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009e7a:	604b      	str	r3, [r1, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
	ZGyro = ReadIMU(0x37, 0x38);
 8009e80:	2138      	movs	r1, #56	; 0x38
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009e82:	ee67 7aa8 	vmul.f32	s15, s15, s17
	ZGyro = ReadIMU(0x37, 0x38);
 8009e86:	2037      	movs	r0, #55	; 0x37
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009e88:	edc5 7a02 	vstr	s15, [r5, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8009e8c:	f8d2 c000 	ldr.w	ip, [r2]
 8009e90:	4466      	add	r6, ip
 8009e92:	6016      	str	r6, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 8009e94:	6856      	ldr	r6, [r2, #4]
 8009e96:	4433      	add	r3, r6
 8009e98:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 8009e9a:	6813      	ldr	r3, [r2, #0]
 8009e9c:	6856      	ldr	r6, [r2, #4]
 8009e9e:	4433      	add	r3, r6
 8009ea0:	6093      	str	r3, [r2, #8]
	ZGyro = ReadIMU(0x37, 0x38);
 8009ea2:	f003 fbad 	bl	800d600 <ReadIMU>
 8009ea6:	4b4f      	ldr	r3, [pc, #316]	; (8009fe4 <WritingFree_IT+0x1cc>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8009ea8:	4a4f      	ldr	r2, [pc, #316]	; (8009fe8 <WritingFree_IT+0x1d0>)
	ZGyro = ReadIMU(0x37, 0x38);
 8009eaa:	ed83 0a00 	vstr	s0, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8009eae:	ed93 8a00 	vldr	s16, [r3]
 8009eb2:	ed92 7a00 	vldr	s14, [r2]
 8009eb6:	4b4d      	ldr	r3, [pc, #308]	; (8009fec <WritingFree_IT+0x1d4>)
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8009eb8:	6838      	ldr	r0, [r7, #0]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8009eba:	edd3 7a00 	vldr	s15, [r3]
	AngularAcceleration += AngularLeapsity;
 8009ebe:	4e4c      	ldr	r6, [pc, #304]	; (8009ff0 <WritingFree_IT+0x1d8>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8009ec0:	ee38 8a47 	vsub.f32	s16, s16, s14
 8009ec4:	ee28 8a27 	vmul.f32	s16, s16, s15
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8009ec8:	f7fe fa76 	bl	80083b8 <__aeabi_f2d>
 8009ecc:	a33a      	add	r3, pc, #232	; (adr r3, 8009fb8 <WritingFree_IT+0x1a0>)
 8009ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed2:	f7fe fac9 	bl	8008468 <__aeabi_dmul>
 8009ed6:	4680      	mov	r8, r0
 8009ed8:	ee18 0a10 	vmov	r0, s16
 8009edc:	4689      	mov	r9, r1
 8009ede:	f7fe fa6b 	bl	80083b8 <__aeabi_f2d>
 8009ee2:	a337      	add	r3, pc, #220	; (adr r3, 8009fc0 <WritingFree_IT+0x1a8>)
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	f7fe fabe 	bl	8008468 <__aeabi_dmul>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4640      	mov	r0, r8
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	f7fe f902 	bl	80080fc <__adddf3>
 8009ef8:	f7fe fdae 	bl	8008a58 <__aeabi_d2f>
 8009efc:	4b3d      	ldr	r3, [pc, #244]	; (8009ff4 <WritingFree_IT+0x1dc>)
	Angle += AngularV * T1;
 8009efe:	493e      	ldr	r1, [pc, #248]	; (8009ff8 <WritingFree_IT+0x1e0>)
 8009f00:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8009ffc <WritingFree_IT+0x1e4>
	AngularAcceleration += AngularLeapsity;
 8009f04:	4a3e      	ldr	r2, [pc, #248]	; (800a000 <WritingFree_IT+0x1e8>)
 8009f06:	ed96 6a00 	vldr	s12, [r6]
	TargetVelocity[BODY] += Acceleration;
 8009f0a:	f8df c10c 	ldr.w	ip, [pc, #268]	; 800a018 <WritingFree_IT+0x200>
	TargetAngularV += AngularAcceleration;

	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009f0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a004 <WritingFree_IT+0x1ec>
    zg_last = zg_law;
 8009f12:	ed87 8a00 	vstr	s16, [r7]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8009f16:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8009f1a:	6018      	str	r0, [r3, #0]
	Angle += AngularV * T1;
 8009f1c:	edd3 5a00 	vldr	s11, [r3]
 8009f20:	ed91 7a00 	vldr	s14, [r1]
	TargetAngularV += AngularAcceleration;
 8009f24:	4b38      	ldr	r3, [pc, #224]	; (800a008 <WritingFree_IT+0x1f0>)
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009f26:	4e39      	ldr	r6, [pc, #228]	; (800a00c <WritingFree_IT+0x1f4>)
	Angle += AngularV * T1;
 8009f28:	eea5 7aa7 	vfma.f32	s14, s11, s15
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009f2c:	2004      	movs	r0, #4
	Angle += AngularV * T1;
 8009f2e:	ed81 7a00 	vstr	s14, [r1]
	AngularAcceleration += AngularLeapsity;
 8009f32:	edd2 7a00 	vldr	s15, [r2]
 8009f36:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009f3a:	edc2 7a00 	vstr	s15, [r2]
	TargetVelocity[BODY] += Acceleration;
 8009f3e:	ed9c 7a00 	vldr	s14, [ip]
 8009f42:	edd4 7a02 	vldr	s15, [r4, #8]
 8009f46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f4a:	edc4 7a02 	vstr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 8009f4e:	ed92 7a00 	vldr	s14, [r2]
 8009f52:	edd3 7a00 	vldr	s15, [r3]
 8009f56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f5a:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009f5e:	edd4 7a02 	vldr	s15, [r4, #8]
 8009f62:	ed93 7a00 	vldr	s14, [r3]
 8009f66:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 8009f6a:	eee7 7a28 	vfma.f32	s15, s14, s17
 8009f6e:	edc4 7a01 	vstr	s15, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 8009f72:	ed93 7a00 	vldr	s14, [r3]
 8009f76:	edd4 7a01 	vldr	s15, [r4, #4]
 8009f7a:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009f7e:	edc4 7a00 	vstr	s15, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009f82:	ed94 0a00 	vldr	s0, [r4]
 8009f86:	edd5 0a00 	vldr	s1, [r5]
 8009f8a:	f004 fa2d 	bl	800e3e8 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009f8e:	ed94 0a01 	vldr	s0, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009f92:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009f94:	edd5 0a01 	vldr	s1, [r5, #4]
 8009f98:	2005      	movs	r0, #5
 8009f9a:	f004 fa25 	bl	800e3e8 <PIDControl>

	Motor_Switch( VelocityLeftOut, VelocityRightOut );


}
 8009f9e:	ecbd 8b02 	vpop	{d8}
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009fa2:	4b1b      	ldr	r3, [pc, #108]	; (800a010 <WritingFree_IT+0x1f8>)
 8009fa4:	4601      	mov	r1, r0
 8009fa6:	6019      	str	r1, [r3, #0]
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 8009fa8:	6830      	ldr	r0, [r6, #0]
}
 8009faa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 8009fae:	f003 bdcf 	b.w	800db50 <Motor_Switch>
 8009fb2:	bf00      	nop
 8009fb4:	f3af 8000 	nop.w
 8009fb8:	7ae147ae 	.word	0x7ae147ae
 8009fbc:	3fefae14 	.word	0x3fefae14
 8009fc0:	47ae147b 	.word	0x47ae147b
 8009fc4:	3f847ae1 	.word	0x3f847ae1
 8009fc8:	20008b70 	.word	0x20008b70
 8009fcc:	40000800 	.word	0x40000800
 8009fd0:	3f8177cd 	.word	0x3f8177cd
 8009fd4:	200089c0 	.word	0x200089c0
 8009fd8:	200089b4 	.word	0x200089b4
 8009fdc:	20007f2c 	.word	0x20007f2c
 8009fe0:	20008984 	.word	0x20008984
 8009fe4:	20007fe0 	.word	0x20007fe0
 8009fe8:	20007fec 	.word	0x20007fec
 8009fec:	08018e0c 	.word	0x08018e0c
 8009ff0:	20007f3c 	.word	0x20007f3c
 8009ff4:	20007f40 	.word	0x20007f40
 8009ff8:	20007f34 	.word	0x20007f34
 8009ffc:	3a83126f 	.word	0x3a83126f
 800a000:	20007f38 	.word	0x20007f38
 800a004:	4209999a 	.word	0x4209999a
 800a008:	20008994 	.word	0x20008994
 800a00c:	20008aac 	.word	0x20008aac
 800a010:	20008ac8 	.word	0x20008ac8
 800a014:	40000400 	.word	0x40000400
 800a018:	20007f30 	.word	0x20007f30

0800a01c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if( htim == &htim1)
 800a01c:	4b28      	ldr	r3, [pc, #160]	; (800a0c0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800a01e:	4298      	cmp	r0, r3
{
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	4604      	mov	r4, r0
	if( htim == &htim1)
 800a024:	d003      	beq.n	800a02e <HAL_TIM_PeriodElapsedCallback+0x12>
		default :
			break;
		}
	}

	if( htim == &htim8)
 800a026:	4b27      	ldr	r3, [pc, #156]	; (800a0c4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800a028:	429c      	cmp	r4, r3
 800a02a:	d012      	beq.n	800a052 <HAL_TIM_PeriodElapsedCallback+0x36>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
	}
}
 800a02c:	bd70      	pop	{r4, r5, r6, pc}
		switch(IT_mode){
 800a02e:	4b26      	ldr	r3, [pc, #152]	; (800a0c8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b06      	cmp	r3, #6
 800a034:	d030      	beq.n	800a098 <HAL_TIM_PeriodElapsedCallback+0x7c>
 800a036:	2b07      	cmp	r3, #7
 800a038:	d02b      	beq.n	800a092 <HAL_TIM_PeriodElapsedCallback+0x76>
 800a03a:	2b05      	cmp	r3, #5
 800a03c:	d1f3      	bne.n	800a026 <HAL_TIM_PeriodElapsedCallback+0xa>
			if(timer1 < 5000)
 800a03e:	4d23      	ldr	r5, [pc, #140]	; (800a0cc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800a040:	682a      	ldr	r2, [r5, #0]
 800a042:	f241 3387 	movw	r3, #4999	; 0x1387
 800a046:	429a      	cmp	r2, r3
 800a048:	dd29      	ble.n	800a09e <HAL_TIM_PeriodElapsedCallback+0x82>
			else t = 0;
 800a04a:	4b21      	ldr	r3, [pc, #132]	; (800a0d0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	601a      	str	r2, [r3, #0]
 800a050:	e7e9      	b.n	800a026 <HAL_TIM_PeriodElapsedCallback+0xa>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a052:	4e20      	ldr	r6, [pc, #128]	; (800a0d4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800a054:	4c20      	ldr	r4, [pc, #128]	; (800a0d8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800a056:	6831      	ldr	r1, [r6, #0]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a058:	4d20      	ldr	r5, [pc, #128]	; (800a0dc <HAL_TIM_PeriodElapsedCallback+0xc0>)
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a05a:	2200      	movs	r2, #0
 800a05c:	200a      	movs	r0, #10
 800a05e:	f003 fde7 	bl	800dc30 <GetWallDataAverage>
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a062:	6871      	ldr	r1, [r6, #4]
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a064:	ed84 0a00 	vstr	s0, [r4]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a068:	2201      	movs	r2, #1
 800a06a:	200a      	movs	r0, #10
 800a06c:	f003 fde0 	bl	800dc30 <GetWallDataAverage>
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a070:	6829      	ldr	r1, [r5, #0]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a072:	ed84 0a01 	vstr	s0, [r4, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a076:	2202      	movs	r2, #2
 800a078:	200a      	movs	r0, #10
 800a07a:	f003 fdd9 	bl	800dc30 <GetWallDataAverage>
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a07e:	6869      	ldr	r1, [r5, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a080:	ed84 0a02 	vstr	s0, [r4, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a084:	2203      	movs	r2, #3
 800a086:	200a      	movs	r0, #10
 800a088:	f003 fdd2 	bl	800dc30 <GetWallDataAverage>
 800a08c:	ed84 0a03 	vstr	s0, [r4, #12]
}
 800a090:	bd70      	pop	{r4, r5, r6, pc}
			WritingFree_IT();
 800a092:	f7ff fec1 	bl	8009e18 <WritingFree_IT>
			break;
 800a096:	e7c6      	b.n	800a026 <HAL_TIM_PeriodElapsedCallback+0xa>
			Explore_IT();
 800a098:	f7ff fdee 	bl	8009c78 <Explore_IT>
			break;
 800a09c:	e7c3      	b.n	800a026 <HAL_TIM_PeriodElapsedCallback+0xa>
				Update_IMU(&AngularV, &Angle);
 800a09e:	4e10      	ldr	r6, [pc, #64]	; (800a0e0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800a0a0:	4810      	ldr	r0, [pc, #64]	; (800a0e4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	f003 fb18 	bl	800d6d8 <Update_IMU>
				timer1 += t;
 800a0a8:	4b09      	ldr	r3, [pc, #36]	; (800a0d0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
				debugVL[timer1] = Angle;
 800a0aa:	6829      	ldr	r1, [r5, #0]
 800a0ac:	4a0e      	ldr	r2, [pc, #56]	; (800a0e8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
				timer1 += t;
 800a0ae:	681b      	ldr	r3, [r3, #0]
				debugVL[timer1] = Angle;
 800a0b0:	6830      	ldr	r0, [r6, #0]
 800a0b2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
				timer1 += t;
 800a0b6:	440b      	add	r3, r1
				debugVL[timer1] = Angle;
 800a0b8:	6010      	str	r0, [r2, #0]
				timer1 += t;
 800a0ba:	602b      	str	r3, [r5, #0]
 800a0bc:	e7b3      	b.n	800a026 <HAL_TIM_PeriodElapsedCallback+0xa>
 800a0be:	bf00      	nop
 800a0c0:	20008e70 	.word	0x20008e70
 800a0c4:	20008c28 	.word	0x20008c28
 800a0c8:	20008970 	.word	0x20008970
 800a0cc:	2000897c 	.word	0x2000897c
 800a0d0:	2000896c 	.word	0x2000896c
 800a0d4:	20007fcc 	.word	0x20007fcc
 800a0d8:	200089f4 	.word	0x200089f4
 800a0dc:	20007fd8 	.word	0x20007fd8
 800a0e0:	20007f34 	.word	0x20007f34
 800a0e4:	20007f40 	.word	0x20007f40
 800a0e8:	20000228 	.word	0x20000228

0800a0ec <flashStoreNodes>:
			}
	}
}
void flashStoreNodes()
{
	uint32_t address=start_adress_sector1;
 800a0ec:	4b1b      	ldr	r3, [pc, #108]	; (800a15c <flashStoreNodes+0x70>)
{
 800a0ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t address=start_adress_sector1;
 800a0f2:	f8d3 9000 	ldr.w	r9, [r3]
 800a0f6:	f8df a068 	ldr.w	sl, [pc, #104]	; 800a160 <flashStoreNodes+0x74>
 800a0fa:	ebc9 78c9 	rsb	r8, r9, r9, lsl #31
 800a0fe:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800a102:	464c      	mov	r4, r9
 800a104:	2700      	movs	r7, #0
 800a106:	eb07 0508 	add.w	r5, r7, r8

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				FLASH_Write_Word(address+0, my_map.RawNode[i][j].existence);
 800a10a:	4455      	add	r5, sl
 800a10c:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800a110:	f815 1014 	ldrb.w	r1, [r5, r4, lsl #1]
 800a114:	4620      	mov	r0, r4
				address += 4;
 800a116:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, my_map.RawNode[i][j].existence);
 800a118:	f003 f96c 	bl	800d3f4 <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a11c:	42b4      	cmp	r4, r6
 800a11e:	d1f7      	bne.n	800a110 <flashStoreNodes+0x24>
 800a120:	3750      	adds	r7, #80	; 0x50
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a122:	f5b7 7f34 	cmp.w	r7, #720	; 0x2d0
 800a126:	f1a8 0850 	sub.w	r8, r8, #80	; 0x50
 800a12a:	d1ec      	bne.n	800a106 <flashStoreNodes+0x1a>
 800a12c:	4f0c      	ldr	r7, [pc, #48]	; (800a160 <flashStoreNodes+0x74>)
 800a12e:	f509 74b4 	add.w	r4, r9, #360	; 0x168
 800a132:	f509 7934 	add.w	r9, r9, #720	; 0x2d0
 800a136:	f104 0624 	add.w	r6, r4, #36	; 0x24
	uint32_t address=start_adress_sector1;
 800a13a:	463d      	mov	r5, r7
	//列
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				FLASH_Write_Word(address+0, my_map.ColumnNode[i][j].existence);
 800a13c:	f895 12d0 	ldrb.w	r1, [r5, #720]	; 0x2d0
 800a140:	4620      	mov	r0, r4
				address += 4;
 800a142:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, my_map.ColumnNode[i][j].existence);
 800a144:	f003 f956 	bl	800d3f4 <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a148:	42a6      	cmp	r6, r4
 800a14a:	f105 0508 	add.w	r5, r5, #8
 800a14e:	d1f5      	bne.n	800a13c <flashStoreNodes+0x50>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a150:	454e      	cmp	r6, r9
 800a152:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800a156:	d1ee      	bne.n	800a136 <flashStoreNodes+0x4a>
			}
	}
}
 800a158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15c:	08018e04 	.word	0x08018e04
 800a160:	200083cc 	.word	0x200083cc

0800a164 <wall_init>:
void wall_init(){
 800a164:	4920      	ldr	r1, [pc, #128]	; (800a1e8 <wall_init+0x84>)
 800a166:	b470      	push	{r4, r5, r6}

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800a168:	2500      	movs	r5, #0
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
				Wall[i][j].north = UNKNOWN;
 800a16a:	24aa      	movs	r4, #170	; 0xaa
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a16c:	2300      	movs	r3, #0
				Wall[i][j].north = UNKNOWN;
 800a16e:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800a172:	18c2      	adds	r2, r0, r3
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a174:	3301      	adds	r3, #1
 800a176:	2b09      	cmp	r3, #9
				Wall[i][j].north = UNKNOWN;
 800a178:	f801 4012 	strb.w	r4, [r1, r2, lsl #1]
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a17c:	d1f9      	bne.n	800a172 <wall_init+0xe>
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800a17e:	3501      	adds	r5, #1
 800a180:	2d09      	cmp	r5, #9
 800a182:	d1f3      	bne.n	800a16c <wall_init+0x8>

			}
	}

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800a184:	2300      	movs	r3, #0
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800a186:	2201      	movs	r2, #1
 800a188:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
 800a18c:	eb01 0540 	add.w	r5, r1, r0, lsl #1
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800a190:	f103 0448 	add.w	r4, r3, #72	; 0x48
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800a194:	7c2e      	ldrb	r6, [r5, #16]
 800a196:	f362 0601 	bfi	r6, r2, #0, #2
 800a19a:	742e      	strb	r6, [r5, #16]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800a19c:	f811 5014 	ldrb.w	r5, [r1, r4, lsl #1]
 800a1a0:	f362 0583 	bfi	r5, r2, #2, #2
 800a1a4:	f801 5014 	strb.w	r5, [r1, r4, lsl #1]
		Wall[n][0].south = WALL;
 800a1a8:	f811 4010 	ldrb.w	r4, [r1, r0, lsl #1]
 800a1ac:	f362 1405 	bfi	r4, r2, #4, #2
 800a1b0:	f801 4010 	strb.w	r4, [r1, r0, lsl #1]
		Wall[0][n].west = WALL;
 800a1b4:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 800a1b8:	f362 1087 	bfi	r0, r2, #6, #2
 800a1bc:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	2b09      	cmp	r3, #9
 800a1c4:	d1e0      	bne.n	800a188 <wall_init+0x24>
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
 800a1c6:	780b      	ldrb	r3, [r1, #0]
	Wall[0][0].north = NOWALL;
	Wall[1][0].west = WALL;
 800a1c8:	7c8c      	ldrb	r4, [r1, #18]
	Wall[0][1].south = NOWALL;
 800a1ca:	7888      	ldrb	r0, [r1, #2]
	Wall[0][0].east = WALL;
 800a1cc:	f362 0383 	bfi	r3, r2, #2, #2
	Wall[1][0].west = WALL;
 800a1d0:	f362 1487 	bfi	r4, r2, #6, #2
	Wall[0][0].north = NOWALL;
 800a1d4:	f36f 0301 	bfc	r3, #0, #2
	Wall[0][1].south = NOWALL;
 800a1d8:	f36f 1005 	bfc	r0, #4, #2
	Wall[1][0].west = WALL;
 800a1dc:	748c      	strb	r4, [r1, #18]
	Wall[0][0].north = NOWALL;
 800a1de:	700b      	strb	r3, [r1, #0]
	Wall[0][1].south = NOWALL;
 800a1e0:	7088      	strb	r0, [r1, #2]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800a1e2:	bc70      	pop	{r4, r5, r6}
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	20008b7c 	.word	0x20008b7c

0800a1ec <flashCopyNodesToRam>:
	}

}
//評価値マップ生成。
void flashCopyNodesToRam()
{
 800a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t address=start_adress_sector1;
 800a1f0:	4b21      	ldr	r3, [pc, #132]	; (800a278 <flashCopyNodesToRam+0x8c>)
 800a1f2:	f8df b088 	ldr.w	fp, [pc, #136]	; 800a27c <flashCopyNodesToRam+0x90>
 800a1f6:	f8d3 a000 	ldr.w	sl, [r3]
 800a1fa:	f04f 0800 	mov.w	r8, #0
 800a1fe:	ebca 79ca 	rsb	r9, sl, sl, lsl #31
{
 800a202:	b083      	sub	sp, #12
 800a204:	ea4f 0949 	mov.w	r9, r9, lsl #1
	uint32_t address=start_adress_sector1;
 800a208:	4654      	mov	r4, sl

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				uint32_t wall_data=0;
 800a20a:	4647      	mov	r7, r8
 800a20c:	eb08 0509 	add.w	r5, r8, r9
				FLASH_Read_Word(address, &wall_data);
				my_map.RawNode[i][j].existence = wall_data;
 800a210:	445d      	add	r5, fp
 800a212:	f104 0628 	add.w	r6, r4, #40	; 0x28
				FLASH_Read_Word(address, &wall_data);
 800a216:	4620      	mov	r0, r4
 800a218:	a901      	add	r1, sp, #4
				uint32_t wall_data=0;
 800a21a:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800a21c:	f003 f912 	bl	800d444 <FLASH_Read_Word>
				my_map.RawNode[i][j].existence = wall_data;
 800a220:	9b01      	ldr	r3, [sp, #4]
 800a222:	f805 3014 	strb.w	r3, [r5, r4, lsl #1]
				address += 4;
 800a226:	3404      	adds	r4, #4
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a228:	42b4      	cmp	r4, r6
 800a22a:	d1f4      	bne.n	800a216 <flashCopyNodesToRam+0x2a>
 800a22c:	f108 0850 	add.w	r8, r8, #80	; 0x50
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a230:	f5b8 7f34 	cmp.w	r8, #720	; 0x2d0
 800a234:	f1a9 0950 	sub.w	r9, r9, #80	; 0x50
 800a238:	d1e8      	bne.n	800a20c <flashCopyNodesToRam+0x20>
 800a23a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800a27c <flashCopyNodesToRam+0x90>
 800a23e:	f50a 74b4 	add.w	r4, sl, #360	; 0x168
	}
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				uint32_t wall_data=0;
 800a242:	2700      	movs	r7, #0
 800a244:	f50a 7a34 	add.w	sl, sl, #720	; 0x2d0
 800a248:	f104 0624 	add.w	r6, r4, #36	; 0x24
	uint32_t address=start_adress_sector1;
 800a24c:	4645      	mov	r5, r8
				FLASH_Read_Word(address, &wall_data);
 800a24e:	4620      	mov	r0, r4
 800a250:	a901      	add	r1, sp, #4
				my_map.ColumnNode[i][j].existence = wall_data;
				address += 4;
 800a252:	3404      	adds	r4, #4
				uint32_t wall_data=0;
 800a254:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800a256:	f003 f8f5 	bl	800d444 <FLASH_Read_Word>
				my_map.ColumnNode[i][j].existence = wall_data;
 800a25a:	9b01      	ldr	r3, [sp, #4]
 800a25c:	f885 32d0 	strb.w	r3, [r5, #720]	; 0x2d0
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a260:	42a6      	cmp	r6, r4
 800a262:	f105 0508 	add.w	r5, r5, #8
 800a266:	d1f2      	bne.n	800a24e <flashCopyNodesToRam+0x62>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a268:	4556      	cmp	r6, sl
 800a26a:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800a26e:	d1eb      	bne.n	800a248 <flashCopyNodesToRam+0x5c>
			}
	}
}
 800a270:	b003      	add	sp, #12
 800a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a276:	bf00      	nop
 800a278:	08018e04 	.word	0x08018e04
 800a27c:	200083cc 	.word	0x200083cc

0800a280 <printAllWeight>:
        printf("[北 東 南 西] = [%u %u %u %u]\r\n", route[k].wall.north, route[k].wall.east, route[k].wall.south, route[k].wall.west);
        printf("\r\n");
    }
}
void printAllWeight(maze_node *maze, position *pos)
{
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	b085      	sub	sp, #20
 800a286:	4606      	mov	r6, r0
 800a288:	9003      	str	r0, [sp, #12]
    //全出力を3桁にそろえればよさそう
    //重みが0かつゴールエリア内の座標なら赤色で出力 31;1m
    //行から表示して、
    //列を表示
    //交互に
    printf("全ノードの重み\r\n");
 800a28a:	4852      	ldr	r0, [pc, #328]	; (800a3d4 <printAllWeight+0x154>)

    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
    {
        //行
        printf("  +  ");
 800a28c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800a3e4 <printAllWeight+0x164>
            {
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
            }
            else
            {
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a290:	4d51      	ldr	r5, [pc, #324]	; (800a3d8 <printAllWeight+0x158>)
            else
            {
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
            }
            if(x < NUMBER_OF_SQUARES_X)
                printf("     ");
 800a292:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800a3e8 <printAllWeight+0x168>
{
 800a296:	460c      	mov	r4, r1
    printf("全ノードの重み\r\n");
 800a298:	f00b f822 	bl	80152e0 <puts>
 800a29c:	4633      	mov	r3, r6
 800a29e:	3340      	adds	r3, #64	; 0x40
 800a2a0:	9301      	str	r3, [sp, #4]
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	9300      	str	r3, [sp, #0]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800a2a6:	2709      	movs	r7, #9
        printf("  +  ");
 800a2a8:	4648      	mov	r0, r9
 800a2aa:	f00a ff91 	bl	80151d0 <iprintf>
 800a2ae:	9b01      	ldr	r3, [sp, #4]
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800a2b0:	f04f 0b00 	mov.w	fp, #0
 800a2b4:	f103 0608 	add.w	r6, r3, #8
 800a2b8:	e010      	b.n	800a2dc <printAllWeight+0x5c>
            if(judgeRawNodeGoal(maze, x,y) == true || ((pos->x == x) && (pos->y == y)))//辿った経路を赤で表示
 800a2ba:	7823      	ldrb	r3, [r4, #0]
 800a2bc:	455b      	cmp	r3, fp
 800a2be:	d102      	bne.n	800a2c6 <printAllWeight+0x46>
 800a2c0:	7863      	ldrb	r3, [r4, #1]
 800a2c2:	42bb      	cmp	r3, r7
 800a2c4:	d018      	beq.n	800a2f8 <printAllWeight+0x78>
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a2c6:	f00a ff83 	bl	80151d0 <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800a2ca:	f1bb 0f08 	cmp.w	fp, #8
                 printf("  +  ");
 800a2ce:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800a2d0:	d01a      	beq.n	800a308 <printAllWeight+0x88>
                 printf("  +  ");
 800a2d2:	f00a ff7d 	bl	80151d0 <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800a2d6:	f10b 0b01 	add.w	fp, fp, #1
 800a2da:	3650      	adds	r6, #80	; 0x50
    if(maze->RawNode[x][y].weight == 0)
 800a2dc:	8872      	ldrh	r2, [r6, #2]
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800a2de:	f1ab 0307 	sub.w	r3, fp, #7
 800a2e2:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	4628      	mov	r0, r5
    if(maze->RawNode[x][y].weight == 0)
 800a2e8:	2a00      	cmp	r2, #0
 800a2ea:	d1e6      	bne.n	800a2ba <printAllWeight+0x3a>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d8e4      	bhi.n	800a2ba <printAllWeight+0x3a>
 800a2f0:	1ffb      	subs	r3, r7, #7
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d8e0      	bhi.n	800a2ba <printAllWeight+0x3a>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	4838      	ldr	r0, [pc, #224]	; (800a3dc <printAllWeight+0x15c>)
 800a2fc:	f00a ff68 	bl	80151d0 <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800a300:	f1bb 0f08 	cmp.w	fp, #8
                 printf("  +  ");
 800a304:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800a306:	d1e4      	bne.n	800a2d2 <printAllWeight+0x52>
 800a308:	1e7b      	subs	r3, r7, #1
 800a30a:	461e      	mov	r6, r3
        printf("\r\n");
 800a30c:	4834      	ldr	r0, [pc, #208]	; (800a3e0 <printAllWeight+0x160>)
 800a30e:	9302      	str	r3, [sp, #8]
 800a310:	f00a ffe6 	bl	80152e0 <puts>
 800a314:	4633      	mov	r3, r6
 800a316:	b2f6      	uxtb	r6, r6
 800a318:	1af6      	subs	r6, r6, r3
 800a31a:	00f6      	lsls	r6, r6, #3
 800a31c:	f8dd a004 	ldr.w	sl, [sp, #4]
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800a320:	f04f 0b00 	mov.w	fp, #0
 800a324:	e00d      	b.n	800a342 <printAllWeight+0xc2>
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800a326:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800a32a:	f00a ff51 	bl	80151d0 <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800a32e:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800a332:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800a334:	d022      	beq.n	800a37c <printAllWeight+0xfc>
                printf("     ");
 800a336:	f00a ff4b 	bl	80151d0 <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800a33a:	f10b 0b01 	add.w	fp, fp, #1
 800a33e:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
    if(maze->ColumnNode[x][y].weight == 0)
 800a342:	eb0a 0106 	add.w	r1, sl, r6
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a346:	f1ab 0307 	sub.w	r3, fp, #7
    if(maze->ColumnNode[x][y].weight == 0)
 800a34a:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a34e:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800a350:	4628      	mov	r0, r5
    if(maze->ColumnNode[x][y].weight == 0)
 800a352:	b921      	cbnz	r1, 800a35e <printAllWeight+0xde>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a354:	2b02      	cmp	r3, #2
 800a356:	d802      	bhi.n	800a35e <printAllWeight+0xde>
 800a358:	9b00      	ldr	r3, [sp, #0]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d905      	bls.n	800a36a <printAllWeight+0xea>
            if(judgeColumnNodeGoal(maze, x,y-1) == true || ((pos->x == x) && (pos->y == y)))
 800a35e:	7823      	ldrb	r3, [r4, #0]
 800a360:	455b      	cmp	r3, fp
 800a362:	d1e0      	bne.n	800a326 <printAllWeight+0xa6>
 800a364:	7863      	ldrb	r3, [r4, #1]
 800a366:	42bb      	cmp	r3, r7
 800a368:	d1dd      	bne.n	800a326 <printAllWeight+0xa6>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->ColumnNode[x][y-1].weight);
 800a36a:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800a36e:	481b      	ldr	r0, [pc, #108]	; (800a3dc <printAllWeight+0x15c>)
 800a370:	f00a ff2e 	bl	80151d0 <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800a374:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800a378:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800a37a:	d1dc      	bne.n	800a336 <printAllWeight+0xb6>
        }
        printf("\r\n");
 800a37c:	4818      	ldr	r0, [pc, #96]	; (800a3e0 <printAllWeight+0x160>)
 800a37e:	f00a ffaf 	bl	80152e0 <puts>
 800a382:	9b00      	ldr	r3, [sp, #0]
 800a384:	9f02      	ldr	r7, [sp, #8]
 800a386:	f103 3aff 	add.w	sl, r3, #4294967295
 800a38a:	9b01      	ldr	r3, [sp, #4]
 800a38c:	3b08      	subs	r3, #8
 800a38e:	9301      	str	r3, [sp, #4]
 800a390:	fa5f f38a 	uxtb.w	r3, sl
 800a394:	9300      	str	r3, [sp, #0]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800a396:	2f00      	cmp	r7, #0
 800a398:	d186      	bne.n	800a2a8 <printAllWeight+0x28>
    }
    //y が0のときの行だけ表示
    printf("  +  ");
 800a39a:	4812      	ldr	r0, [pc, #72]	; (800a3e4 <printAllWeight+0x164>)
    for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
    {
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a39c:	4e0e      	ldr	r6, [pc, #56]	; (800a3d8 <printAllWeight+0x158>)
        if(x < NUMBER_OF_SQUARES_X-1)
                printf("  +  ");
 800a39e:	4607      	mov	r7, r0
    printf("  +  ");
 800a3a0:	f00a ff16 	bl	80151d0 <iprintf>
 800a3a4:	9b03      	ldr	r3, [sp, #12]
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	8859      	ldrh	r1, [r3, #2]
 800a3aa:	461c      	mov	r4, r3
 800a3ac:	f00a ff10 	bl	80151d0 <iprintf>
 800a3b0:	f504 7520 	add.w	r5, r4, #640	; 0x280
                printf("  +  ");
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	f00a ff0b 	bl	80151d0 <iprintf>
 800a3ba:	3450      	adds	r4, #80	; 0x50
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a3bc:	8861      	ldrh	r1, [r4, #2]
 800a3be:	4630      	mov	r0, r6
 800a3c0:	f00a ff06 	bl	80151d0 <iprintf>
        if(x < NUMBER_OF_SQUARES_X-1)
 800a3c4:	42ac      	cmp	r4, r5
 800a3c6:	d1f5      	bne.n	800a3b4 <printAllWeight+0x134>
    }
    printf("\r\n");
 800a3c8:	4805      	ldr	r0, [pc, #20]	; (800a3e0 <printAllWeight+0x160>)
    
    
}
 800a3ca:	b005      	add	sp, #20
 800a3cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800a3d0:	f00a bf86 	b.w	80152e0 <puts>
 800a3d4:	08018bb4 	.word	0x08018bb4
 800a3d8:	08018be8 	.word	0x08018be8
 800a3dc:	08018bd4 	.word	0x08018bd4
 800a3e0:	08018f40 	.word	0x08018f40
 800a3e4:	08018bcc 	.word	0x08018bcc
 800a3e8:	08018bf0 	.word	0x08018bf0

0800a3ec <initWeight>:
            maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].draw == true) ? MAX_WEIGHT : 0;     //西
        }
    }
}
void initWeight(maze_node *maze)
{
 800a3ec:	b410      	push	{r4}
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	f500 7434 	add.w	r4, r0, #720	; 0x2d0
    // }
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800a3f4:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a3f8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800a3fc:	8059      	strh	r1, [r3, #2]
 800a3fe:	3308      	adds	r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a400:	4293      	cmp	r3, r2
 800a402:	d1fb      	bne.n	800a3fc <initWeight+0x10>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a404:	42a3      	cmp	r3, r4
 800a406:	d1f7      	bne.n	800a3f8 <initWeight+0xc>
    }
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800a408:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a40c:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800a410:	f8a0 12d2 	strh.w	r1, [r0, #722]	; 0x2d2
 800a414:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a416:	4282      	cmp	r2, r0
 800a418:	d1fa      	bne.n	800a410 <initWeight+0x24>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d1f6      	bne.n	800a40c <initWeight+0x20>
        }
    }
}
 800a41e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <initMaze>:
void initMaze(maze_node *maze) //重みは別で初期化
{
 800a424:	b5f0      	push	{r4, r5, r6, r7, lr}
    //まず未探索状態にする
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a426:	2700      	movs	r7, #0
 800a428:	4604      	mov	r4, r0
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a42a:	4684      	mov	ip, r0
        {
            maze->RawNode[i][j].existence = UNKNOWN;
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800a42c:	4639      	mov	r1, r7
            maze->RawNode[i][j].existence = UNKNOWN;
 800a42e:	2602      	movs	r6, #2
 800a430:	b2fd      	uxtb	r5, r7
{
 800a432:	4663      	mov	r3, ip
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a434:	2201      	movs	r2, #1
            maze->RawNode[i][j].rc = 0;
            maze->RawNode[i][j].pos.x = i;
            maze->RawNode[i][j].pos.y = j;
 800a436:	73da      	strb	r2, [r3, #15]
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a438:	3201      	adds	r2, #1
 800a43a:	2a09      	cmp	r2, #9
            maze->RawNode[i][j].existence = UNKNOWN;
 800a43c:	721e      	strb	r6, [r3, #8]
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800a43e:	7319      	strb	r1, [r3, #12]
            maze->RawNode[i][j].rc = 0;
 800a440:	7359      	strb	r1, [r3, #13]
            maze->RawNode[i][j].pos.x = i;
 800a442:	739d      	strb	r5, [r3, #14]
 800a444:	f103 0308 	add.w	r3, r3, #8
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a448:	d1f5      	bne.n	800a436 <initMaze+0x12>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a44a:	3701      	adds	r7, #1
 800a44c:	2f09      	cmp	r7, #9
 800a44e:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800a452:	d1ed      	bne.n	800a430 <initMaze+0xc>
        }
    }
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800a454:	f04f 0c01 	mov.w	ip, #1
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].existence = UNKNOWN;
            maze->ColumnNode[i][j].draw = false;
            maze->ColumnNode[i][j].rc = 1;
 800a458:	4667      	mov	r7, ip
 800a45a:	f100 0e48 	add.w	lr, r0, #72	; 0x48
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800a45e:	2602      	movs	r6, #2
            maze->ColumnNode[i][j].draw = false;
 800a460:	2500      	movs	r5, #0
 800a462:	fa5f f18c 	uxtb.w	r1, ip
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a466:	4673      	mov	r3, lr
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a468:	2200      	movs	r2, #0
            maze->ColumnNode[i][j].pos.x = i;
            maze->ColumnNode[i][j].pos.y = j;
 800a46a:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a46e:	3201      	adds	r2, #1
 800a470:	2a09      	cmp	r2, #9
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800a472:	f883 62d0 	strb.w	r6, [r3, #720]	; 0x2d0
            maze->ColumnNode[i][j].draw = false;
 800a476:	f883 52d4 	strb.w	r5, [r3, #724]	; 0x2d4
            maze->ColumnNode[i][j].rc = 1;
 800a47a:	f883 72d5 	strb.w	r7, [r3, #725]	; 0x2d5
            maze->ColumnNode[i][j].pos.x = i;
 800a47e:	f883 12d6 	strb.w	r1, [r3, #726]	; 0x2d6
 800a482:	f103 0308 	add.w	r3, r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a486:	d1f0      	bne.n	800a46a <initMaze+0x46>
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800a488:	f10c 0c01 	add.w	ip, ip, #1
 800a48c:	f1bc 0f09 	cmp.w	ip, #9
 800a490:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 800a494:	d1e5      	bne.n	800a462 <initMaze+0x3e>
        }
    }
    
    // 壁の有無を初期化
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a496:	2200      	movs	r2, #0
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1

        maze->RawNode[i][0].draw = true;                        
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;

        maze->RawNode[i][0].rc = 0;
 800a498:	4616      	mov	r6, r2
 800a49a:	4603      	mov	r3, r0
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800a49c:	2101      	movs	r1, #1
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;

        maze->RawNode[i][0].pos.x = i;
 800a49e:	b2d5      	uxtb	r5, r2
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a4a0:	3201      	adds	r2, #1
 800a4a2:	2a09      	cmp	r2, #9
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800a4a4:	7019      	strb	r1, [r3, #0]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1
 800a4a6:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
        maze->RawNode[i][0].draw = true;                        
 800a4aa:	7119      	strb	r1, [r3, #4]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;
 800a4ac:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
        maze->RawNode[i][0].rc = 0;
 800a4b0:	715e      	strb	r6, [r3, #5]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;
 800a4b2:	f883 604d 	strb.w	r6, [r3, #77]	; 0x4d
        maze->RawNode[i][0].pos.y = NUMBER_OF_SQUARES_Y;
 800a4b6:	f883 c007 	strb.w	ip, [r3, #7]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.y = NUMBER_OF_SQUARES_Y;
 800a4ba:	f883 c04f 	strb.w	ip, [r3, #79]	; 0x4f
        maze->RawNode[i][0].pos.x = i;
 800a4be:	719d      	strb	r5, [r3, #6]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
 800a4c0:	f883 504e 	strb.w	r5, [r3, #78]	; 0x4e
 800a4c4:	f103 0350 	add.w	r3, r3, #80	; 0x50
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a4c8:	d1e9      	bne.n	800a49e <initMaze+0x7a>
    }
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a4ca:	2100      	movs	r1, #0
    {
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800a4cc:	2301      	movs	r3, #1

        maze->ColumnNode[0][j].rc = 1;
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;

        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
        maze->ColumnNode[0][j].pos.y = j;
 800a4ce:	b2cd      	uxtb	r5, r1
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a4d0:	3101      	adds	r1, #1
 800a4d2:	2909      	cmp	r1, #9
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800a4d4:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].existence = WALL;  //東壁すべて1
 800a4d8:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
        maze->ColumnNode[0][j].draw = true;                    
 800a4dc:	f884 32d4 	strb.w	r3, [r4, #724]	; 0x2d4
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;
 800a4e0:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
        maze->ColumnNode[0][j].rc = 1;
 800a4e4:	f884 32d5 	strb.w	r3, [r4, #725]	; 0x2d5
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;
 800a4e8:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
 800a4ec:	f884 22d6 	strb.w	r2, [r4, #726]	; 0x2d6
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
 800a4f0:	f884 255e 	strb.w	r2, [r4, #1374]	; 0x55e
        maze->ColumnNode[0][j].pos.y = j;
 800a4f4:	f884 52d7 	strb.w	r5, [r4, #727]	; 0x2d7
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.y = j;
 800a4f8:	f884 555f 	strb.w	r5, [r4, #1375]	; 0x55f
 800a4fc:	f104 0408 	add.w	r4, r4, #8
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a500:	d1e5      	bne.n	800a4ce <initMaze+0xaa>
    }
    maze->ColumnNode[1][0].existence = WALL;    //東1
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800a502:	2200      	movs	r2, #0
    maze->ColumnNode[1][0].existence = WALL;    //東1
 800a504:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318

    maze->ColumnNode[1][0].draw = true;    //東1
 800a508:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800a50c:	7202      	strb	r2, [r0, #8]
    maze->RawNode[0][1].draw = false;     //北0
 800a50e:	7302      	strb	r2, [r0, #12]
}
 800a510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a512:	bf00      	nop

0800a514 <printAllNodeExistence>:
        printf("\r\n");
    }
    printf("\r\n");
}
void printAllNodeExistence(maze_node *mn)
{
 800a514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a518:	4680      	mov	r8, r0
 800a51a:	4605      	mov	r5, r0
    printf("全ノードの壁の存在\r\n");
 800a51c:	481a      	ldr	r0, [pc, #104]	; (800a588 <printAllNodeExistence+0x74>)
    //行を増やして同じ処理
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            printf("%u,",mn->RawNode[i][j].existence);
 800a51e:	4f1b      	ldr	r7, [pc, #108]	; (800a58c <printAllNodeExistence+0x78>)
        }
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800a520:	4e1b      	ldr	r6, [pc, #108]	; (800a590 <printAllNodeExistence+0x7c>)
            if(j < NUMBER_OF_SQUARES_Y-1)
                printf(",");
        }
        printf("\r\n");
 800a522:	f8df a070 	ldr.w	sl, [pc, #112]	; 800a594 <printAllNodeExistence+0x80>
 800a526:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800a52a:	f505 7934 	add.w	r9, r5, #720	; 0x2d0
    printf("全ノードの壁の存在\r\n");
 800a52e:	f00a fed7 	bl	80152e0 <puts>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a532:	2401      	movs	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800a534:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 800a538:	4638      	mov	r0, r7
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a53a:	3401      	adds	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800a53c:	f00a fe48 	bl	80151d0 <iprintf>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a540:	2c0a      	cmp	r4, #10
 800a542:	d1f7      	bne.n	800a534 <printAllNodeExistence+0x20>
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800a544:	f898 12d0 	ldrb.w	r1, [r8, #720]	; 0x2d0
 800a548:	4630      	mov	r0, r6
 800a54a:	f00a fe41 	bl	80151d0 <iprintf>
 800a54e:	f108 0b40 	add.w	fp, r8, #64	; 0x40
 800a552:	4644      	mov	r4, r8
                printf(",");
 800a554:	202c      	movs	r0, #44	; 0x2c
 800a556:	f00a fe53 	bl	8015200 <putchar>
 800a55a:	3408      	adds	r4, #8
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800a55c:	f894 12d0 	ldrb.w	r1, [r4, #720]	; 0x2d0
 800a560:	4630      	mov	r0, r6
 800a562:	f00a fe35 	bl	80151d0 <iprintf>
            if(j < NUMBER_OF_SQUARES_Y-1)
 800a566:	455c      	cmp	r4, fp
 800a568:	d1f4      	bne.n	800a554 <printAllNodeExistence+0x40>
 800a56a:	f108 0848 	add.w	r8, r8, #72	; 0x48
        printf("\r\n");
 800a56e:	4650      	mov	r0, sl
 800a570:	f00a feb6 	bl	80152e0 <puts>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a574:	45c8      	cmp	r8, r9
 800a576:	f105 0550 	add.w	r5, r5, #80	; 0x50
 800a57a:	d1da      	bne.n	800a532 <printAllNodeExistence+0x1e>
    }
    printf("\r\n");
 800a57c:	4805      	ldr	r0, [pc, #20]	; (800a594 <printAllNodeExistence+0x80>)
}
 800a57e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800a582:	f00a bead 	b.w	80152e0 <puts>
 800a586:	bf00      	nop
 800a588:	08018b94 	.word	0x08018b94
 800a58c:	08018b8c 	.word	0x08018b8c
 800a590:	08018b90 	.word	0x08018b90
 800a594:	08018f40 	.word	0x08018f40

0800a598 <printMatrix16ValueFromNode>:
    return val;
}

//機体からTeraTermで出力するための関数
void printMatrix16ValueFromNode(maze_node *maze)
{
 800a598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	4604      	mov	r4, r0
 800a59e:	b083      	sub	sp, #12
    printf("機体からTeraTermへの出力用\r\n");
 800a5a0:	4822      	ldr	r0, [pc, #136]	; (800a62c <printMatrix16ValueFromNode+0x94>)
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
    {
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
        {
            printf("%u",convertNodeTo16Value(maze, i,j));
 800a5a2:	4e23      	ldr	r6, [pc, #140]	; (800a630 <printMatrix16ValueFromNode+0x98>)
    printf("機体からTeraTermへの出力用\r\n");
 800a5a4:	f00a fe9c 	bl	80152e0 <puts>
 800a5a8:	f04f 0809 	mov.w	r8, #9
 800a5ac:	f104 0348 	add.w	r3, r4, #72	; 0x48
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800a5b0:	f04f 0908 	mov.w	r9, #8
 800a5b4:	f1a3 0208 	sub.w	r2, r3, #8
 800a5b8:	eba9 0408 	sub.w	r4, r9, r8
 800a5bc:	9201      	str	r2, [sp, #4]
 800a5be:	4692      	mov	sl, r2
 800a5c0:	00e4      	lsls	r4, r4, #3
 800a5c2:	f503 7520 	add.w	r5, r3, #640	; 0x280
 800a5c6:	f503 7734 	add.w	r7, r3, #720	; 0x2d0
{
 800a5ca:	469b      	mov	fp, r3
 800a5cc:	e003      	b.n	800a5d6 <printMatrix16ValueFromNode+0x3e>
            if(i < NUMBER_OF_SQUARES_X-1)
                printf(",");
 800a5ce:	f00a fe17 	bl	8015200 <putchar>
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a5d2:	455f      	cmp	r7, fp
 800a5d4:	d01b      	beq.n	800a60e <printMatrix16ValueFromNode+0x76>
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800a5d6:	f89a 12d4 	ldrb.w	r1, [sl, #724]	; 0x2d4
    val += 2 * maze->ColumnNode[x+1][y].draw;   //東
 800a5da:	f89a e31c 	ldrb.w	lr, [sl, #796]	; 0x31c
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800a5de:	f89b 0004 	ldrb.w	r0, [fp, #4]
    val += 4 * maze->RawNode[x][y].draw;        //南
 800a5e2:	eb0b 0c04 	add.w	ip, fp, r4
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800a5e6:	00c9      	lsls	r1, r1, #3
 800a5e8:	eb01 014e 	add.w	r1, r1, lr, lsl #1
    val += 4 * maze->RawNode[x][y].draw;        //南
 800a5ec:	f89c c004 	ldrb.w	ip, [ip, #4]
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800a5f0:	4401      	add	r1, r0
 800a5f2:	eb01 018c 	add.w	r1, r1, ip, lsl #2
            printf("%u",convertNodeTo16Value(maze, i,j));
 800a5f6:	b2c9      	uxtb	r1, r1
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f00a fde9 	bl	80151d0 <iprintf>
            if(i < NUMBER_OF_SQUARES_X-1)
 800a5fe:	455d      	cmp	r5, fp
                printf(",");
 800a600:	f04f 002c 	mov.w	r0, #44	; 0x2c
 800a604:	f10b 0b50 	add.w	fp, fp, #80	; 0x50
 800a608:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
            if(i < NUMBER_OF_SQUARES_X-1)
 800a60c:	d1df      	bne.n	800a5ce <printMatrix16ValueFromNode+0x36>
        }
        printf("\r\n");
 800a60e:	4809      	ldr	r0, [pc, #36]	; (800a634 <printMatrix16ValueFromNode+0x9c>)
 800a610:	f00a fe66 	bl	80152e0 <puts>
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800a614:	f1b8 0801 	subs.w	r8, r8, #1
 800a618:	f109 39ff 	add.w	r9, r9, #4294967295
 800a61c:	9b01      	ldr	r3, [sp, #4]
 800a61e:	d1c9      	bne.n	800a5b4 <printMatrix16ValueFromNode+0x1c>
    }
    printf("\r\n");
 800a620:	4804      	ldr	r0, [pc, #16]	; (800a634 <printMatrix16ValueFromNode+0x9c>)

}
 800a622:	b003      	add	sp, #12
 800a624:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800a628:	f00a be5a 	b.w	80152e0 <puts>
 800a62c:	08018bf8 	.word	0x08018bf8
 800a630:	08018b90 	.word	0x08018b90
 800a634:	08018f40 	.word	0x08018f40

0800a638 <updateNodeThree>:


//壁があれば重みはデフォルト値を代入する
//壁がなければそのままにしておく 前左右の情報の方角に合わせた変換は別のところで
void updateNodeThree(maze_node *maze, state *st, uint8_t x, uint8_t y)
{
 800a638:	b5f0      	push	{r4, r5, r6, r7, lr}
    //壁の有無の更新。既知の壁には上書きしない。重みの更新は？既知かどうかは重複するから書かない
        //重みは？壁があればMAX値、なければそのまま   
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800a63a:	0094      	lsls	r4, r2, #2
 800a63c:	1c5f      	adds	r7, r3, #1
 800a63e:	18a5      	adds	r5, r4, r2
 800a640:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 800a644:	18a6      	adds	r6, r4, r2
 800a646:	f810 c035 	ldrb.w	ip, [r0, r5, lsl #3]
 800a64a:	f1bc 0f02 	cmp.w	ip, #2
 800a64e:	bf08      	it	eq
 800a650:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800a654:	f102 0501 	add.w	r5, r2, #1
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800a658:	eb07 0646 	add.w	r6, r7, r6, lsl #1
 800a65c:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800a660:	bf08      	it	eq
 800a662:	f00c 0c03 	andeq.w	ip, ip, #3
 800a666:	441d      	add	r5, r3
 800a668:	f800 c036 	strb.w	ip, [r0, r6, lsl #3]
 800a66c:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800a670:	eb04 0c02 	add.w	ip, r4, r2
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800a674:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800a678:	2e02      	cmp	r6, #2
 800a67a:	bf08      	it	eq
 800a67c:	790e      	ldrbeq	r6, [r1, #4]
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800a67e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800a682:	bf08      	it	eq
 800a684:	f3c6 0681 	ubfxeq	r6, r6, #2, #2
 800a688:	f885 62d0 	strb.w	r6, [r5, #720]	; 0x2d0
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800a68c:	f810 c03c 	ldrb.w	ip, [r0, ip, lsl #3]
 800a690:	f1bc 0f02 	cmp.w	ip, #2
 800a694:	bf08      	it	eq
 800a696:	f891 c004 	ldrbeq.w	ip, [r1, #4]
 800a69a:	eb04 0e02 	add.w	lr, r4, r2
 800a69e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 800a6a2:	f04f 0609 	mov.w	r6, #9
 800a6a6:	bf08      	it	eq
 800a6a8:	f3cc 1c01 	ubfxeq	ip, ip, #4, #2
 800a6ac:	fb16 3602 	smlabb	r6, r6, r2, r3
 800a6b0:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 800a6b4:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
    // maze->RawNode[x][y+1].flag = true;      //北
    // maze->ColumnNode[x+1][y].flag = true;   //東
    // maze->RawNode[x][y].flag = true;        //南
    // maze->ColumnNode[x][y].flag = true;     //西

    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800a6b8:	4414      	add	r4, r2
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800a6ba:	f896 c2d0 	ldrb.w	ip, [r6, #720]	; 0x2d0
 800a6be:	f1bc 0f02 	cmp.w	ip, #2
 800a6c2:	bf08      	it	eq
 800a6c4:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800a6c8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a6cc:	eb04 0207 	add.w	r2, r4, r7
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800a6d0:	bf08      	it	eq
 800a6d2:	ea4f 1c9c 	moveq.w	ip, ip, lsr #6
 800a6d6:	f886 c2d0 	strb.w	ip, [r6, #720]	; 0x2d0
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800a6da:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800a6de:	f1a1 0101 	sub.w	r1, r1, #1
 800a6e2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800a6e6:	fab1 f181 	clz	r1, r1
 800a6ea:	0949      	lsrs	r1, r1, #5
 800a6ec:	7111      	strb	r1, [r2, #4]
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800a6ee:	f895 22d0 	ldrb.w	r2, [r5, #720]	; 0x2d0
 800a6f2:	f1a2 0201 	sub.w	r2, r2, #1
 800a6f6:	fab2 f282 	clz	r2, r2
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800a6fa:	4423      	add	r3, r4
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800a6fc:	0952      	lsrs	r2, r2, #5
 800a6fe:	f885 22d4 	strb.w	r2, [r5, #724]	; 0x2d4
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800a702:	f810 2033 	ldrb.w	r2, [r0, r3, lsl #3]
 800a706:	f1a2 0201 	sub.w	r2, r2, #1
 800a70a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a70e:	fab2 f282 	clz	r2, r2
 800a712:	0952      	lsrs	r2, r2, #5
 800a714:	711a      	strb	r2, [r3, #4]
    maze->ColumnNode[x][y].draw = (maze->ColumnNode[x][y].existence == WALL) ? true : false;        //西
 800a716:	f896 32d0 	ldrb.w	r3, [r6, #720]	; 0x2d0
 800a71a:	f1a3 0301 	sub.w	r3, r3, #1
 800a71e:	fab3 f383 	clz	r3, r3
 800a722:	095b      	lsrs	r3, r3, #5
 800a724:	f886 32d4 	strb.w	r3, [r6, #724]	; 0x2d4
    //重みは毎回リセットして計算しなおすのでここでは要らない
    // maze->RawNode[x][y+1].weight = (maze->RawNode[x][y+1].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y+1].weight;             //北
    // maze->ColumnNode[x+1][y].weight = (maze->ColumnNode[x+1][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x+1][y].weight;    //東
    // maze->RawNode[x][y].weight = (maze->RawNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y].weight;                   //南
    // maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x][y].weight;          //西
}
 800a728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a72a:	bf00      	nop

0800a72c <initTargetAreaWeight>:
//             maze->ColumnNode[x+i][y+j].weight = 0;      //西
//         }
//     }
// }
void initTargetAreaWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size_x, uint8_t target_size_y)
{
 800a72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a730:	f89d 801c 	ldrb.w	r8, [sp, #28]
    //ゴールエリアの外堀と中のノードは全て0、壁があればMAX。
    for(int i=0; i < target_size_x; i++)
 800a734:	2b00      	cmp	r3, #0
 800a736:	d044      	beq.n	800a7c2 <initTargetAreaWeight+0x96>
 800a738:	1c4c      	adds	r4, r1, #1
 800a73a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800a73e:	250a      	movs	r5, #10
 800a740:	18a7      	adds	r7, r4, r2
 800a742:	fb15 2201 	smlabb	r2, r5, r1, r2
 800a746:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 800a74a:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
 800a74e:	f04f 0908 	mov.w	r9, #8
 800a752:	f04f 0e00 	mov.w	lr, #0
            // maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0; //東
            // maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;           //南
            // maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;     //西

        	//なぜdraw == trueでやっていたかわからない
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800a756:	f640 74ff 	movw	r4, #4095	; 0xfff
        for(int j=0; j < target_size_y; j++)
 800a75a:	f1b8 0f00 	cmp.w	r8, #0
 800a75e:	d028      	beq.n	800a7b2 <initTargetAreaWeight+0x86>
 800a760:	f1a7 0048 	sub.w	r0, r7, #72	; 0x48
 800a764:	fb19 7608 	smlabb	r6, r9, r8, r7
 800a768:	4639      	mov	r1, r7
 800a76a:	4662      	mov	r2, ip
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800a76c:	7a15      	ldrb	r5, [r2, #8]
 800a76e:	2d01      	cmp	r5, #1
 800a770:	bf14      	ite	ne
 800a772:	2500      	movne	r5, #0
 800a774:	4625      	moveq	r5, r4
 800a776:	8155      	strh	r5, [r2, #10]
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].existence == WALL) ? MAX_WEIGHT : 0; //東
 800a778:	f891 52d0 	ldrb.w	r5, [r1, #720]	; 0x2d0
 800a77c:	2d01      	cmp	r5, #1
 800a77e:	bf14      	ite	ne
 800a780:	2500      	movne	r5, #0
 800a782:	4625      	moveq	r5, r4
 800a784:	f8a1 52d2 	strh.w	r5, [r1, #722]	; 0x2d2
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;           //南
 800a788:	7815      	ldrb	r5, [r2, #0]
 800a78a:	2d01      	cmp	r5, #1
 800a78c:	bf14      	ite	ne
 800a78e:	2500      	movne	r5, #0
 800a790:	4625      	moveq	r5, r4
 800a792:	8055      	strh	r5, [r2, #2]
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800a794:	f890 52d0 	ldrb.w	r5, [r0, #720]	; 0x2d0
 800a798:	3108      	adds	r1, #8
 800a79a:	2d01      	cmp	r5, #1
 800a79c:	bf14      	ite	ne
 800a79e:	2500      	movne	r5, #0
 800a7a0:	4625      	moveq	r5, r4
        for(int j=0; j < target_size_y; j++)
 800a7a2:	42b1      	cmp	r1, r6
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800a7a4:	f8a0 52d2 	strh.w	r5, [r0, #722]	; 0x2d2
 800a7a8:	f102 0208 	add.w	r2, r2, #8
 800a7ac:	f100 0008 	add.w	r0, r0, #8
        for(int j=0; j < target_size_y; j++)
 800a7b0:	d1dc      	bne.n	800a76c <initTargetAreaWeight+0x40>
    for(int i=0; i < target_size_x; i++)
 800a7b2:	f10e 0e01 	add.w	lr, lr, #1
 800a7b6:	459e      	cmp	lr, r3
 800a7b8:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800a7bc:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800a7c0:	d1cb      	bne.n	800a75a <initTargetAreaWeight+0x2e>
        }
    }
}
 800a7c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7c6:	bf00      	nop

0800a7c8 <updateAllNodeWeight>:
    // setTargetWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size);
//ゴールノードを0に初期化
    // setGoalWeight(maze);
    
void updateAllNodeWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t area_size_x, uint8_t area_size_y, int mask)
{
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	b085      	sub	sp, #20
 800a7ce:	4680      	mov	r8, r0
 800a7d0:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 800a7d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a7d6:	f500 7c34 	add.w	ip, r0, #720	; 0x2d0
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800a7da:	f640 77ff 	movw	r7, #4095	; 0xfff
 800a7de:	f100 0550 	add.w	r5, r0, #80	; 0x50
 800a7e2:	8047      	strh	r7, [r0, #2]
 800a7e4:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a7e6:	42a8      	cmp	r0, r5
 800a7e8:	d1fb      	bne.n	800a7e2 <updateAllNodeWeight+0x1a>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a7ea:	4560      	cmp	r0, ip
 800a7ec:	d1f7      	bne.n	800a7de <updateAllNodeWeight+0x16>
 800a7ee:	4646      	mov	r6, r8
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800a7f0:	f640 7cff 	movw	ip, #4095	; 0xfff
 800a7f4:	f106 0548 	add.w	r5, r6, #72	; 0x48
 800a7f8:	f8a6 c2d2 	strh.w	ip, [r6, #722]	; 0x2d2
 800a7fc:	3608      	adds	r6, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a7fe:	42ae      	cmp	r6, r5
 800a800:	d1fa      	bne.n	800a7f8 <updateAllNodeWeight+0x30>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a802:	4286      	cmp	r6, r0
 800a804:	d1f6      	bne.n	800a7f4 <updateAllNodeWeight+0x2c>
	//全体に154/20ms = 7.7ms
    //新しい区画に入ったときに、更新

    initWeight(maze); //3/20ms
    
    initTargetAreaWeight(maze, x,y, area_size_x,area_size_y);
 800a806:	f8cd e000 	str.w	lr, [sp]
 800a80a:	4640      	mov	r0, r8
 800a80c:	f7ff ff8e 	bl	800a72c <initTargetAreaWeight>
 800a810:	4645      	mov	r5, r8
 800a812:	f108 0250 	add.w	r2, r8, #80	; 0x50
 800a816:	9203      	str	r2, [sp, #12]
 800a818:	f108 0e48 	add.w	lr, r8, #72	; 0x48
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
			{
                //1ノードずつ見る.そこから加算対象が最大6個
                //端を見ないので、一番上の列からスタート j=N; j >= 0, xを1からN-1まで
                //次に行 j=N-1から1まで xを0からN-1まで
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800a81c:	f640 72ff 	movw	r2, #4095	; 0xfff
 800a820:	46ac      	mov	ip, r5
					}
                    //南西
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
					{
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
						change_flag = true;		//値が更新されたことを示す
 800a822:	f04f 0800 	mov.w	r8, #0
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800a826:	4647      	mov	r7, r8
						change_flag = true;		//値が更新されたことを示す
 800a828:	4661      	mov	r1, ip
 800a82a:	46e2      	mov	sl, ip
 800a82c:	46c1      	mov	r9, r8
 800a82e:	f101 0848 	add.w	r8, r1, #72	; 0x48
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a832:	4645      	mov	r5, r8
 800a834:	4653      	mov	r3, sl
 800a836:	2001      	movs	r0, #1
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800a838:	895e      	ldrh	r6, [r3, #10]
 800a83a:	4296      	cmp	r6, r2
 800a83c:	d055      	beq.n	800a8ea <updateAllNodeWeight+0x122>
				if(j < NUMBER_OF_SQUARES_Y-1)   //範囲チェック. 座標のxyではなく、ノードのxy
 800a83e:	2808      	cmp	r0, #8
 800a840:	d010      	beq.n	800a864 <updateAllNodeWeight+0x9c>
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT) )	//壁がなければ(maskの意味はstatic_parametersを参照)
 800a842:	f893 b010 	ldrb.w	fp, [r3, #16]
 800a846:	ea1b 0f04 	tst.w	fp, r4
 800a84a:	d109      	bne.n	800a860 <updateAllNodeWeight+0x98>
 800a84c:	f8b3 b012 	ldrh.w	fp, [r3, #18]
 800a850:	4593      	cmp	fp, r2
 800a852:	d105      	bne.n	800a860 <updateAllNodeWeight+0x98>
						maze->RawNode[i][j+1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800a854:	f106 0907 	add.w	r9, r6, #7
 800a858:	f8a3 9012 	strh.w	r9, [r3, #18]
						change_flag = true;		//値が更新されたことを示す
 800a85c:	f04f 0901 	mov.w	r9, #1
				if(j > 1)						//範囲チェック.ミスってた
 800a860:	2801      	cmp	r0, #1
 800a862:	d00c      	beq.n	800a87e <updateAllNodeWeight+0xb6>
					if( ((maze->RawNode[i][j-1].existence & mask) == NOWALL) && (maze->RawNode[i][j-1].weight == MAX_WEIGHT) )	//壁がなければ
 800a864:	f893 b000 	ldrb.w	fp, [r3]
 800a868:	ea1b 0f04 	tst.w	fp, r4
 800a86c:	d107      	bne.n	800a87e <updateAllNodeWeight+0xb6>
 800a86e:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 800a872:	4593      	cmp	fp, r2
 800a874:	d103      	bne.n	800a87e <updateAllNodeWeight+0xb6>
						maze->RawNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800a876:	3607      	adds	r6, #7
 800a878:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800a87a:	f04f 0901 	mov.w	r9, #1
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800a87e:	2f08      	cmp	r7, #8
 800a880:	d017      	beq.n	800a8b2 <updateAllNodeWeight+0xea>
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))		//壁がなければ
 800a882:	f895 62d8 	ldrb.w	r6, [r5, #728]	; 0x2d8
 800a886:	4226      	tst	r6, r4
 800a888:	d109      	bne.n	800a89e <updateAllNodeWeight+0xd6>
 800a88a:	f8b5 62da 	ldrh.w	r6, [r5, #730]	; 0x2da
 800a88e:	4296      	cmp	r6, r2
 800a890:	d105      	bne.n	800a89e <updateAllNodeWeight+0xd6>
						maze->ColumnNode[i+1][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a892:	895e      	ldrh	r6, [r3, #10]
 800a894:	3605      	adds	r6, #5
 800a896:	f8a5 62da 	strh.w	r6, [r5, #730]	; 0x2da
						change_flag = true;		//値が更新されたことを示す
 800a89a:	f04f 0901 	mov.w	r9, #1
                    if( ((maze->ColumnNode[i+1][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j-1].weight == MAX_WEIGHT)	)		//壁がなければ
 800a89e:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800a8a2:	4226      	tst	r6, r4
 800a8a4:	d104      	bne.n	800a8b0 <updateAllNodeWeight+0xe8>
 800a8a6:	f8b5 62d2 	ldrh.w	r6, [r5, #722]	; 0x2d2
 800a8aa:	4296      	cmp	r6, r2
 800a8ac:	f000 8092 	beq.w	800a9d4 <updateAllNodeWeight+0x20c>
				if(i > 0)						//範囲チェック
 800a8b0:	b1df      	cbz	r7, 800a8ea <updateAllNodeWeight+0x122>
					if( ((maze->ColumnNode[i][j].existence & mask) == NOWALL)  && (maze->ColumnNode[i][j].weight == MAX_WEIGHT) )		//壁がなければ
 800a8b2:	f891 62d8 	ldrb.w	r6, [r1, #728]	; 0x2d8
 800a8b6:	4226      	tst	r6, r4
 800a8b8:	d109      	bne.n	800a8ce <updateAllNodeWeight+0x106>
 800a8ba:	f8b1 62da 	ldrh.w	r6, [r1, #730]	; 0x2da
 800a8be:	4296      	cmp	r6, r2
 800a8c0:	d105      	bne.n	800a8ce <updateAllNodeWeight+0x106>
							maze->ColumnNode[i][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a8c2:	895e      	ldrh	r6, [r3, #10]
 800a8c4:	3605      	adds	r6, #5
 800a8c6:	f8a1 62da 	strh.w	r6, [r1, #730]	; 0x2da
							change_flag = true;		//値が更新されたことを示す
 800a8ca:	f04f 0901 	mov.w	r9, #1
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
 800a8ce:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800a8d2:	4226      	tst	r6, r4
 800a8d4:	d109      	bne.n	800a8ea <updateAllNodeWeight+0x122>
 800a8d6:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800a8da:	4296      	cmp	r6, r2
 800a8dc:	d105      	bne.n	800a8ea <updateAllNodeWeight+0x122>
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a8de:	895e      	ldrh	r6, [r3, #10]
 800a8e0:	3605      	adds	r6, #5
 800a8e2:	f8a1 62d2 	strh.w	r6, [r1, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800a8e6:	f04f 0901 	mov.w	r9, #1
 800a8ea:	3001      	adds	r0, #1
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
 800a8ec:	2809      	cmp	r0, #9
 800a8ee:	f103 0308 	add.w	r3, r3, #8
 800a8f2:	f101 0108 	add.w	r1, r1, #8
 800a8f6:	f105 0508 	add.w	r5, r5, #8
 800a8fa:	d19d      	bne.n	800a838 <updateAllNodeWeight+0x70>
 800a8fc:	3701      	adds	r7, #1
		for( i = 0; i < NUMBER_OF_SQUARES_X; i++)			//迷路の大きさ分ループ(x座標)
 800a8fe:	2f09      	cmp	r7, #9
 800a900:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800a904:	4641      	mov	r1, r8
 800a906:	d192      	bne.n	800a82e <updateAllNodeWeight+0x66>
 800a908:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800a90c:	464f      	mov	r7, r9
 800a90e:	4671      	mov	r1, lr
 800a910:	f04f 0801 	mov.w	r8, #1
 800a914:	f101 0948 	add.w	r9, r1, #72	; 0x48
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800a918:	464d      	mov	r5, r9
 800a91a:	4653      	mov	r3, sl
 800a91c:	2000      	movs	r0, #0
        //列
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
		{
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
			{
                if(maze->ColumnNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800a91e:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800a922:	4296      	cmp	r6, r2
 800a924:	d04f      	beq.n	800a9c6 <updateAllNodeWeight+0x1fe>
					continue;
				}
                // printf("continueはクリア. Column[%d][%d]\r\n",i,j);
				
                //東側ノード
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800a926:	f1b8 0f08 	cmp.w	r8, #8
 800a92a:	d00f      	beq.n	800a94c <updateAllNodeWeight+0x184>
				{
                    // printf("列東%d,mask: %d, result: %d\r\n",maze->ColumnNode[i+1][j].existence, mask,((maze->ColumnNode[i+1][j].existence) & mask));
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))	//壁がなければ(maskの意味はstatic_parametersを参照)
 800a92c:	f895 b2d0 	ldrb.w	fp, [r5, #720]	; 0x2d0
 800a930:	ea1b 0f04 	tst.w	fp, r4
 800a934:	d107      	bne.n	800a946 <updateAllNodeWeight+0x17e>
 800a936:	f8b5 b2d2 	ldrh.w	fp, [r5, #722]	; 0x2d2
 800a93a:	4593      	cmp	fp, r2
 800a93c:	d103      	bne.n	800a946 <updateAllNodeWeight+0x17e>
					{
						maze->ColumnNode[i+1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800a93e:	3607      	adds	r6, #7
 800a940:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800a944:	2701      	movs	r7, #1
					}
                }
                //西側ノード
				if(i > 1)						//範囲チェック
 800a946:	f1b8 0f01 	cmp.w	r8, #1
 800a94a:	d00d      	beq.n	800a968 <updateAllNodeWeight+0x1a0>
				{
					if( ((maze->ColumnNode[i-1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i-1][j].weight == MAX_WEIGHT))	//壁がなければ
 800a94c:	f891 6288 	ldrb.w	r6, [r1, #648]	; 0x288
 800a950:	4226      	tst	r6, r4
 800a952:	d109      	bne.n	800a968 <updateAllNodeWeight+0x1a0>
 800a954:	f8b1 628a 	ldrh.w	r6, [r1, #650]	; 0x28a
 800a958:	4296      	cmp	r6, r2
 800a95a:	d105      	bne.n	800a968 <updateAllNodeWeight+0x1a0>
					{
						maze->ColumnNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800a95c:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800a960:	3607      	adds	r6, #7
 800a962:	f8a1 628a 	strh.w	r6, [r1, #650]	; 0x28a
						change_flag = true;		//値が更新されたことを示す
 800a966:	2701      	movs	r7, #1
					}
				}
                //北側に斜めが2方向
				if(j < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800a968:	2808      	cmp	r0, #8
 800a96a:	d013      	beq.n	800a994 <updateAllNodeWeight+0x1cc>
				{
                    //北東
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800a96c:	7a1e      	ldrb	r6, [r3, #8]
 800a96e:	4226      	tst	r6, r4
 800a970:	d107      	bne.n	800a982 <updateAllNodeWeight+0x1ba>
 800a972:	895e      	ldrh	r6, [r3, #10]
 800a974:	4296      	cmp	r6, r2
 800a976:	d104      	bne.n	800a982 <updateAllNodeWeight+0x1ba>
					{
						maze->RawNode[i][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a978:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800a97c:	3605      	adds	r6, #5
 800a97e:	815e      	strh	r6, [r3, #10]
						change_flag = true;		//値が更新されたことを示す
 800a980:	2701      	movs	r7, #1
					}
                	
                    //北西
                    if( ((maze->RawNode[i-1][j+1].existence & mask) == NOWALL) && (maze->RawNode[i-1][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800a982:	f813 6c48 	ldrb.w	r6, [r3, #-72]
 800a986:	4226      	tst	r6, r4
 800a988:	d103      	bne.n	800a992 <updateAllNodeWeight+0x1ca>
 800a98a:	f833 6c46 	ldrh.w	r6, [r3, #-70]
 800a98e:	4296      	cmp	r6, r2
 800a990:	d027      	beq.n	800a9e2 <updateAllNodeWeight+0x21a>
						change_flag = true;		//値が更新されたことを示す
					}
				}

                //南側に斜めが2方向
				if(j > 0)						//範囲チェック
 800a992:	b1d0      	cbz	r0, 800a9ca <updateAllNodeWeight+0x202>
				{
                    //南東
					if( ((maze->RawNode[i][j].existence & mask) == NOWALL) && (maze->RawNode[i][j].weight == MAX_WEIGHT)	)		//壁がなければ
 800a994:	781e      	ldrb	r6, [r3, #0]
 800a996:	4226      	tst	r6, r4
 800a998:	d107      	bne.n	800a9aa <updateAllNodeWeight+0x1e2>
 800a99a:	885e      	ldrh	r6, [r3, #2]
 800a99c:	4296      	cmp	r6, r2
 800a99e:	d104      	bne.n	800a9aa <updateAllNodeWeight+0x1e2>
					{
						maze->RawNode[i][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a9a0:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800a9a4:	3605      	adds	r6, #5
 800a9a6:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800a9a8:	2701      	movs	r7, #1
					}
                    //南西
    				if( ((maze->RawNode[i-1][j].existence & mask) == NOWALL) && (maze->RawNode[i-1][j].weight == MAX_WEIGHT))		//壁がなければ
 800a9aa:	f813 6c50 	ldrb.w	r6, [r3, #-80]
 800a9ae:	4226      	tst	r6, r4
 800a9b0:	d109      	bne.n	800a9c6 <updateAllNodeWeight+0x1fe>
 800a9b2:	f833 6c4e 	ldrh.w	r6, [r3, #-78]
 800a9b6:	4296      	cmp	r6, r2
 800a9b8:	d105      	bne.n	800a9c6 <updateAllNodeWeight+0x1fe>
					{
							maze->RawNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a9ba:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800a9be:	3605      	adds	r6, #5
 800a9c0:	f823 6c4e 	strh.w	r6, [r3, #-78]
							change_flag = true;		//値が更新されたことを示す
 800a9c4:	2701      	movs	r7, #1
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
 800a9c6:	2808      	cmp	r0, #8
 800a9c8:	d012      	beq.n	800a9f0 <updateAllNodeWeight+0x228>
 800a9ca:	3001      	adds	r0, #1
 800a9cc:	3108      	adds	r1, #8
 800a9ce:	3308      	adds	r3, #8
 800a9d0:	3508      	adds	r5, #8
 800a9d2:	e7a4      	b.n	800a91e <updateAllNodeWeight+0x156>
						maze->ColumnNode[i+1][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a9d4:	895e      	ldrh	r6, [r3, #10]
 800a9d6:	3605      	adds	r6, #5
 800a9d8:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800a9dc:	f04f 0901 	mov.w	r9, #1
 800a9e0:	e766      	b.n	800a8b0 <updateAllNodeWeight+0xe8>
						maze->RawNode[i-1][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a9e2:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800a9e6:	3605      	adds	r6, #5
 800a9e8:	f823 6c46 	strh.w	r6, [r3, #-70]
						change_flag = true;		//値が更新されたことを示す
 800a9ec:	2701      	movs	r7, #1
 800a9ee:	e7d0      	b.n	800a992 <updateAllNodeWeight+0x1ca>
 800a9f0:	f108 0801 	add.w	r8, r8, #1
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
 800a9f4:	f1b8 0f09 	cmp.w	r8, #9
 800a9f8:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800a9fc:	4649      	mov	r1, r9
 800a9fe:	d189      	bne.n	800a914 <updateAllNodeWeight+0x14c>
				}
            }
        }
        //printf("重みの更新\r\n");//一回しか呼ばれていない
        //cnt++;
	}while(change_flag == true);	//全体を作り終わるまで待つ
 800aa00:	2f00      	cmp	r7, #0
 800aa02:	f47f af0e 	bne.w	800a822 <updateAllNodeWeight+0x5a>
//    t = 0;
//	HAL_TIM_Base_Stop_IT(&htim8);
//	printf("%d/20ms, %d, %d\r\n\r\n",timer8, skip_raw, skip_column);
}
 800aa06:	b005      	add	sp, #20
 800aa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa0c <getNextNode>:
}

//ノード情報から、行けるノードを比較する
// 比較しながらアドレスを更新してしまうので注意:
node *getNextNode(maze_node *maze, cardinal car, node *now_node, int mask)
{
 800aa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t compare_weight=0;
    compare_weight = now_node->weight;

    _Bool flag=false;
    //printf("マイノードが01のどちらか:%d\r\n",now_node->rc);
    if(now_node->rc == 0)
 800aa10:	f892 c005 	ldrb.w	ip, [r2, #5]
    compare_weight = now_node->weight;
 800aa14:	8857      	ldrh	r7, [r2, #2]
 800aa16:	7991      	ldrb	r1, [r2, #6]
 800aa18:	79d4      	ldrb	r4, [r2, #7]
{
 800aa1a:	b083      	sub	sp, #12
    if(now_node->rc == 0)
 800aa1c:	f1bc 0f00 	cmp.w	ip, #0
 800aa20:	d17f      	bne.n	800ab22 <getNextNode+0x116>
        //北側ノード
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
        {

            //printf("%u\r\n",now_node->pos.y);
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800aa22:	008e      	lsls	r6, r1, #2
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800aa24:	2c07      	cmp	r4, #7
 800aa26:	f104 3eff 	add.w	lr, r4, #4294967295
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800aa2a:	9601      	str	r6, [sp, #4]
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800aa2c:	f200 80bd 	bhi.w	800abaa <getNextNode+0x19e>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800aa30:	eb06 0801 	add.w	r8, r6, r1
 800aa34:	f104 0901 	add.w	r9, r4, #1
 800aa38:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 800aa3c:	f810 a038 	ldrb.w	sl, [r0, r8, lsl #3]
 800aa40:	ea1a 0f03 	tst.w	sl, r3
 800aa44:	d115      	bne.n	800aa72 <getNextNode+0x66>
            {
            	static int cnt = 1;
//            				ChangeLED(cnt%7);
            				cnt ++;
 800aa46:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 800acf4 <getNextNode+0x2e8>


                // printf("%d\r\n", maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence);//壁があることになってた..
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800aa4a:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
            				cnt ++;
 800aa4e:	f8da 6000 	ldr.w	r6, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800aa52:	f8b8 8002 	ldrh.w	r8, [r8, #2]
            				cnt ++;
 800aa56:	f106 0b01 	add.w	fp, r6, #1
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800aa5a:	45b8      	cmp	r8, r7
            				cnt ++;
 800aa5c:	f8ca b000 	str.w	fp, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800aa60:	d207      	bcs.n	800aa72 <getNextNode+0x66>

#if DEBUG_ON
                    printf("北へ\r\n");
#endif
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800aa62:	250a      	movs	r5, #10
 800aa64:	fb15 9501 	smlabb	r5, r5, r1, r9
 800aa68:	4647      	mov	r7, r8
 800aa6a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800aa6e:	f04f 0c01 	mov.w	ip, #1
                }
            }
        }
        //南へ側ノード
        if(now_node->pos.y > 1)						//範囲チェック
 800aa72:	2c01      	cmp	r4, #1
 800aa74:	f200 8099 	bhi.w	800abaa <getNextNode+0x19e>
                    flag = true;
                }
            }
        }
        //東へ側に斜めが2方向
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800aa78:	2907      	cmp	r1, #7
 800aa7a:	d82f      	bhi.n	800aadc <getNextNode+0xd0>
        {
            //北東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800aa7c:	1c4e      	adds	r6, r1, #1
 800aa7e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800aa82:	eb06 0804 	add.w	r8, r6, r4
 800aa86:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
 800aa8a:	f898 92d0 	ldrb.w	r9, [r8, #720]	; 0x2d0
 800aa8e:	ea19 0f03 	tst.w	r9, r3
 800aa92:	d10b      	bne.n	800aaac <getNextNode+0xa0>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800aa94:	f8b8 82d2 	ldrh.w	r8, [r8, #722]	; 0x2d2
 800aa98:	45b8      	cmp	r8, r7
 800aa9a:	d207      	bcs.n	800aaac <getNextNode+0xa0>
                {
#if DEBUG_ON
                    printf("北東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800aa9c:	f104 055a 	add.w	r5, r4, #90	; 0x5a
 800aaa0:	4435      	add	r5, r6
 800aaa2:	4647      	mov	r7, r8
 800aaa4:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800aaa8:	f04f 0c01 	mov.w	ip, #1
 800aaac:	eb0e 0806 	add.w	r8, lr, r6
 800aab0:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
                }
            }

            //南へ東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800aab4:	f898 92d0 	ldrb.w	r9, [r8, #720]	; 0x2d0
 800aab8:	ea19 0f03 	tst.w	r9, r3
 800aabc:	f040 80e8 	bne.w	800ac90 <getNextNode+0x284>
            {  
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800aac0:	f8b8 82d2 	ldrh.w	r8, [r8, #722]	; 0x2d2
 800aac4:	45b8      	cmp	r8, r7
 800aac6:	f080 80e3 	bcs.w	800ac90 <getNextNode+0x284>
                {
#if DEBUG_ON
                    printf("南東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
 800aaca:	f10e 055a 	add.w	r5, lr, #90	; 0x5a
 800aace:	4435      	add	r5, r6
 800aad0:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                }
            }
        }

        //西へ側に斜めが2方向
        if(now_node->pos.x > 0)						//範囲チェック
 800aad4:	b309      	cbz	r1, 800ab1a <getNextNode+0x10e>
 800aad6:	4647      	mov	r7, r8
                    flag = true;
 800aad8:	f04f 0c01 	mov.w	ip, #1
 800aadc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800aae0:	1866      	adds	r6, r4, r1
 800aae2:	eb01 080e 	add.w	r8, r1, lr
 800aae6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800aaea:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
        {
            //北西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800aaee:	f896 92d0 	ldrb.w	r9, [r6, #720]	; 0x2d0
 800aaf2:	f898 a2d0 	ldrb.w	sl, [r8, #720]	; 0x2d0
 800aaf6:	ea19 0f03 	tst.w	r9, r3
 800aafa:	ea0a 0a03 	and.w	sl, sl, r3
 800aafe:	f000 80da 	beq.w	800acb6 <getNextNode+0x2aa>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
                    flag = true;
                }
            }
            //南へ西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800ab02:	f1ba 0f00 	cmp.w	sl, #0
 800ab06:	d104      	bne.n	800ab12 <getNextNode+0x106>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800ab08:	f8b8 32d2 	ldrh.w	r3, [r8, #722]	; 0x2d2
 800ab0c:	42bb      	cmp	r3, r7
 800ab0e:	f0c0 80e4 	bcc.w	800acda <getNextNode+0x2ce>
 800ab12:	f1bc 0f00 	cmp.w	ip, #0
 800ab16:	bf08      	it	eq
 800ab18:	4615      	moveq	r5, r2
        return now_node;//万が一更新されなかったら、今いるノードが目標ノードなので、停止するはず。
        //停止しなかった。前回の情報がそのまま反映されるだけ
    }
    return now_node; //
        
}
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	b003      	add	sp, #12
 800ab1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800ab22:	2907      	cmp	r1, #7
 800ab24:	f101 3eff 	add.w	lr, r1, #4294967295
 800ab28:	d958      	bls.n	800abdc <getNextNode+0x1d0>
    _Bool flag=false;
 800ab2a:	f04f 0800 	mov.w	r8, #0
 800ab2e:	eb0e 0ace 	add.w	sl, lr, lr, lsl #3
 800ab32:	eb0a 0604 	add.w	r6, sl, r4
 800ab36:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
            if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ
 800ab3a:	f896 92d0 	ldrb.w	r9, [r6, #720]	; 0x2d0
 800ab3e:	ea19 0f03 	tst.w	r9, r3
 800ab42:	f000 8093 	beq.w	800ac6c <getNextNode+0x260>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800ab46:	008e      	lsls	r6, r1, #2
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ab48:	2c07      	cmp	r4, #7
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800ab4a:	9601      	str	r6, [sp, #4]
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ab4c:	d95e      	bls.n	800ac0c <getNextNode+0x200>
 800ab4e:	ea4f 098e 	mov.w	r9, lr, lsl #2
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800ab52:	9e01      	ldr	r6, [sp, #4]
 800ab54:	440e      	add	r6, r1
 800ab56:	eb09 0c0e 	add.w	ip, r9, lr
 800ab5a:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 800ab5e:	eb04 0c4c 	add.w	ip, r4, ip, lsl #1
 800ab62:	f810 b036 	ldrb.w	fp, [r0, r6, lsl #3]
 800ab66:	f810 a03c 	ldrb.w	sl, [r0, ip, lsl #3]
 800ab6a:	ea1b 0f03 	tst.w	fp, r3
 800ab6e:	ea0a 0a03 	and.w	sl, sl, r3
 800ab72:	f040 8091 	bne.w	800ac98 <getNextNode+0x28c>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800ab76:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800ab7a:	8873      	ldrh	r3, [r6, #2]
 800ab7c:	42bb      	cmp	r3, r7
 800ab7e:	f080 808b 	bcs.w	800ac98 <getNextNode+0x28c>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y]);
 800ab82:	250a      	movs	r5, #10
 800ab84:	fb15 4101 	smlabb	r1, r5, r1, r4
 800ab88:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800ab8c:	f1ba 0f00 	cmp.w	sl, #0
 800ab90:	d1c3      	bne.n	800ab1a <getNextNode+0x10e>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800ab92:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800ab96:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d2bd      	bcs.n	800ab1a <getNextNode+0x10e>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y]);
 800ab9e:	44ce      	add	lr, r9
 800aba0:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 800aba4:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 800aba8:	e7b7      	b.n	800ab1a <getNextNode+0x10e>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)	//壁がなければ
 800abaa:	9e01      	ldr	r6, [sp, #4]
 800abac:	440e      	add	r6, r1
 800abae:	eb0e 0646 	add.w	r6, lr, r6, lsl #1
 800abb2:	f810 8036 	ldrb.w	r8, [r0, r6, lsl #3]
 800abb6:	ea18 0f03 	tst.w	r8, r3
 800abba:	f47f af5d 	bne.w	800aa78 <getNextNode+0x6c>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800abbe:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800abc2:	8876      	ldrh	r6, [r6, #2]
 800abc4:	42be      	cmp	r6, r7
 800abc6:	f4bf af57 	bcs.w	800aa78 <getNextNode+0x6c>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
 800abca:	250a      	movs	r5, #10
 800abcc:	fb15 e501 	smlabb	r5, r5, r1, lr
 800abd0:	4637      	mov	r7, r6
 800abd2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800abd6:	f04f 0c01 	mov.w	ip, #1
 800abda:	e74d      	b.n	800aa78 <getNextNode+0x6c>
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800abdc:	1c4e      	adds	r6, r1, #1
 800abde:	eb06 09c6 	add.w	r9, r6, r6, lsl #3
 800abe2:	eb04 0609 	add.w	r6, r4, r9
 800abe6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800abea:	f896 82d0 	ldrb.w	r8, [r6, #720]	; 0x2d0
 800abee:	ea18 0803 	ands.w	r8, r8, r3
 800abf2:	d178      	bne.n	800ace6 <getNextNode+0x2da>
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800abf4:	f8b6 a2d2 	ldrh.w	sl, [r6, #722]	; 0x2d2
 800abf8:	45ba      	cmp	sl, r7
 800abfa:	d276      	bcs.n	800acea <getNextNode+0x2de>
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800abfc:	f104 055a 	add.w	r5, r4, #90	; 0x5a
 800ac00:	444d      	add	r5, r9
 800ac02:	4657      	mov	r7, sl
 800ac04:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800ac08:	46e0      	mov	r8, ip
 800ac0a:	e06e      	b.n	800acea <getNextNode+0x2de>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800ac0c:	eb06 0901 	add.w	r9, r6, r1
 800ac10:	f104 0a01 	add.w	sl, r4, #1
 800ac14:	eb0a 0949 	add.w	r9, sl, r9, lsl #1
 800ac18:	f810 b039 	ldrb.w	fp, [r0, r9, lsl #3]
 800ac1c:	ea1b 0f03 	tst.w	fp, r3
 800ac20:	d10c      	bne.n	800ac3c <getNextNode+0x230>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800ac22:	eb00 09c9 	add.w	r9, r0, r9, lsl #3
 800ac26:	f8b9 9002 	ldrh.w	r9, [r9, #2]
 800ac2a:	45b9      	cmp	r9, r7
 800ac2c:	d206      	bcs.n	800ac3c <getNextNode+0x230>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800ac2e:	250a      	movs	r5, #10
 800ac30:	fb15 a501 	smlabb	r5, r5, r1, sl
 800ac34:	464f      	mov	r7, r9
 800ac36:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800ac3a:	46e0      	mov	r8, ip
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800ac3c:	ea4f 098e 	mov.w	r9, lr, lsl #2
 800ac40:	eb09 0b0e 	add.w	fp, r9, lr
 800ac44:	eb0a 0a4b 	add.w	sl, sl, fp, lsl #1
 800ac48:	f810 b03a 	ldrb.w	fp, [r0, sl, lsl #3]
 800ac4c:	ea1b 0f03 	tst.w	fp, r3
 800ac50:	d119      	bne.n	800ac86 <getNextNode+0x27a>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800ac52:	eb00 0aca 	add.w	sl, r0, sl, lsl #3
 800ac56:	f8ba b002 	ldrh.w	fp, [sl, #2]
 800ac5a:	45bb      	cmp	fp, r7
 800ac5c:	d213      	bcs.n	800ac86 <getNextNode+0x27a>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y+1]);
 800ac5e:	4655      	mov	r5, sl
        if(now_node->pos.y > 0)						//範囲チェック
 800ac60:	2c00      	cmp	r4, #0
 800ac62:	f43f af5a 	beq.w	800ab1a <getNextNode+0x10e>
                    flag = true;
 800ac66:	46e0      	mov	r8, ip
        if(now_node->pos.y > 0)						//範囲チェック
 800ac68:	465f      	mov	r7, fp
 800ac6a:	e772      	b.n	800ab52 <getNextNode+0x146>
                if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800ac6c:	f8b6 62d2 	ldrh.w	r6, [r6, #722]	; 0x2d2
 800ac70:	42be      	cmp	r6, r7
 800ac72:	f4bf af68 	bcs.w	800ab46 <getNextNode+0x13a>
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
 800ac76:	f104 055a 	add.w	r5, r4, #90	; 0x5a
 800ac7a:	4455      	add	r5, sl
 800ac7c:	4637      	mov	r7, r6
 800ac7e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800ac82:	46e0      	mov	r8, ip
 800ac84:	e75f      	b.n	800ab46 <getNextNode+0x13a>
        if(now_node->pos.y > 0)						//範囲チェック
 800ac86:	2c00      	cmp	r4, #0
 800ac88:	f47f af63 	bne.w	800ab52 <getNextNode+0x146>
 800ac8c:	46c4      	mov	ip, r8
 800ac8e:	e740      	b.n	800ab12 <getNextNode+0x106>
        if(now_node->pos.x > 0)						//範囲チェック
 800ac90:	2900      	cmp	r1, #0
 800ac92:	f43f af3e 	beq.w	800ab12 <getNextNode+0x106>
 800ac96:	e721      	b.n	800aadc <getNextNode+0xd0>
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800ac98:	f1ba 0f00 	cmp.w	sl, #0
 800ac9c:	d1f6      	bne.n	800ac8c <getNextNode+0x280>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800ac9e:	eb09 030e 	add.w	r3, r9, lr
 800aca2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800aca6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800acaa:	885b      	ldrh	r3, [r3, #2]
 800acac:	42bb      	cmp	r3, r7
 800acae:	f4ff af76 	bcc.w	800ab9e <getNextNode+0x192>
 800acb2:	46c4      	mov	ip, r8
 800acb4:	e72d      	b.n	800ab12 <getNextNode+0x106>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight)
 800acb6:	f8b6 32d2 	ldrh.w	r3, [r6, #722]	; 0x2d2
 800acba:	42bb      	cmp	r3, r7
 800acbc:	f4bf af21 	bcs.w	800ab02 <getNextNode+0xf6>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
 800acc0:	345a      	adds	r4, #90	; 0x5a
 800acc2:	440c      	add	r4, r1
 800acc4:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800acc8:	f1ba 0f00 	cmp.w	sl, #0
 800accc:	f47f af25 	bne.w	800ab1a <getNextNode+0x10e>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800acd0:	f8b8 22d2 	ldrh.w	r2, [r8, #722]	; 0x2d2
 800acd4:	429a      	cmp	r2, r3
 800acd6:	f4bf af20 	bcs.w	800ab1a <getNextNode+0x10e>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y-1]);
 800acda:	f10e 045a 	add.w	r4, lr, #90	; 0x5a
 800acde:	440c      	add	r4, r1
 800ace0:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 800ace4:	e719      	b.n	800ab1a <getNextNode+0x10e>
    _Bool flag=false;
 800ace6:	f04f 0800 	mov.w	r8, #0
        if(now_node->pos.x > 1)						//範囲チェック
 800acea:	2901      	cmp	r1, #1
 800acec:	f67f af2b 	bls.w	800ab46 <getNextNode+0x13a>
 800acf0:	e71d      	b.n	800ab2e <getNextNode+0x122>
 800acf2:	bf00      	nop
 800acf4:	20000000 	.word	0x20000000

0800acf8 <judgeAccelorNot>:
	uint16_t compare_weight=0;
	compare_weight = now_node->weight;

	_Bool flag=false;
	//現ノードから3方向ノードを見て、未知なら即return
	if(now_node->rc == 0)
 800acf8:	7953      	ldrb	r3, [r2, #5]
{
 800acfa:	b4f0      	push	{r4, r5, r6, r7}
	compare_weight = now_node->weight;
 800acfc:	8854      	ldrh	r4, [r2, #2]
	if(now_node->rc == 0)
 800acfe:	bba3      	cbnz	r3, 800ad6a <judgeAccelorNot+0x72>
	{
		switch(car)
 800ad00:	2900      	cmp	r1, #0
 800ad02:	f000 8090 	beq.w	800ae26 <judgeAccelorNot+0x12e>
 800ad06:	2904      	cmp	r1, #4
 800ad08:	d12c      	bne.n	800ad64 <judgeAccelorNot+0x6c>
	            }
	        }
	        break;
		case south:
			//南へ
			if(now_node->pos.y > 1)						//範囲チェック
 800ad0a:	79d1      	ldrb	r1, [r2, #7]
 800ad0c:	7992      	ldrb	r2, [r2, #6]
 800ad0e:	2901      	cmp	r1, #1
 800ad10:	f101 35ff 	add.w	r5, r1, #4294967295
 800ad14:	d90e      	bls.n	800ad34 <judgeAccelorNot+0x3c>
			{
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)	//壁がなければ
 800ad16:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800ad1a:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800ad1e:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800ad22:	2e02      	cmp	r6, #2
 800ad24:	d01e      	beq.n	800ad64 <judgeAccelorNot+0x6c>
				{
					return false;
				}
					//重みを比較して更新
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)
 800ad26:	b92e      	cbnz	r6, 800ad34 <judgeAccelorNot+0x3c>
				{
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800ad28:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ad2c:	8849      	ldrh	r1, [r1, #2]
 800ad2e:	42a1      	cmp	r1, r4
 800ad30:	f0c0 80bc 	bcc.w	800aeac <judgeAccelorNot+0x1b4>
	_Bool flag=false;
 800ad34:	461e      	mov	r6, r3
//						next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
						flag = true;
					}
				}
			}
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800ad36:	2a07      	cmp	r2, #7
 800ad38:	f200 8084 	bhi.w	800ae44 <judgeAccelorNot+0x14c>
			{
				//南へ東へ
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800ad3c:	1c51      	adds	r1, r2, #1
 800ad3e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800ad42:	4429      	add	r1, r5
 800ad44:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ad48:	f891 72d0 	ldrb.w	r7, [r1, #720]	; 0x2d0
 800ad4c:	2f02      	cmp	r7, #2
 800ad4e:	d009      	beq.n	800ad64 <judgeAccelorNot+0x6c>
				{
					return false;
				}
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800ad50:	b92f      	cbnz	r7, 800ad5e <judgeAccelorNot+0x66>
				{
					//重みを比較して更新
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800ad52:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800ad56:	42a1      	cmp	r1, r4
					{
						compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
//						next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
						flag = false;
 800ad58:	bf3c      	itt	cc
 800ad5a:	463e      	movcc	r6, r7
 800ad5c:	460c      	movcc	r4, r1
					}
				}
			}
			if(now_node->pos.x > 0)						//範囲チェック
 800ad5e:	2a00      	cmp	r2, #0
 800ad60:	d170      	bne.n	800ae44 <judgeAccelorNot+0x14c>
 800ad62:	4633      	mov	r3, r6
	}
	return flag; //壁が全部あるときもfalseになっている
	//未知があった時点でreturn false
	//直進かどうかまで見て、直進でなければfalse
	//既知でかつ直進ならtrue
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	bcf0      	pop	{r4, r5, r6, r7}
 800ad68:	4770      	bx	lr
		switch(car)
 800ad6a:	2902      	cmp	r1, #2
 800ad6c:	d03a      	beq.n	800ade4 <judgeAccelorNot+0xec>
 800ad6e:	2906      	cmp	r1, #6
 800ad70:	d155      	bne.n	800ae1e <judgeAccelorNot+0x126>
			if(now_node->pos.x > 1)						//範囲チェック
 800ad72:	7991      	ldrb	r1, [r2, #6]
 800ad74:	79d2      	ldrb	r2, [r2, #7]
 800ad76:	2901      	cmp	r1, #1
 800ad78:	f101 35ff 	add.w	r5, r1, #4294967295
 800ad7c:	d90b      	bls.n	800ad96 <judgeAccelorNot+0x9e>
 800ad7e:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800ad82:	4411      	add	r1, r2
 800ad84:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
				if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) ==UNKNOWN)	//壁がなければ
 800ad88:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800ad8c:	2e02      	cmp	r6, #2
 800ad8e:	d046      	beq.n	800ae1e <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ
 800ad90:	2e00      	cmp	r6, #0
 800ad92:	f000 8084 	beq.w	800ae9e <judgeAccelorNot+0x1a6>
	_Bool flag=false;
 800ad96:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ad98:	2a07      	cmp	r2, #7
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800ad9a:	ea4f 0185 	mov.w	r1, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ad9e:	d811      	bhi.n	800adc4 <judgeAccelorNot+0xcc>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800ada0:	194f      	adds	r7, r1, r5
 800ada2:	1c56      	adds	r6, r2, #1
 800ada4:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800ada8:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800adac:	2f02      	cmp	r7, #2
 800adae:	d036      	beq.n	800ae1e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800adb0:	b937      	cbnz	r7, 800adc0 <judgeAccelorNot+0xc8>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800adb2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800adb6:	8876      	ldrh	r6, [r6, #2]
 800adb8:	42a6      	cmp	r6, r4
 800adba:	bf3c      	itt	cc
 800adbc:	4634      	movcc	r4, r6
						flag = false;
 800adbe:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800adc0:	2a00      	cmp	r2, #0
 800adc2:	d0cf      	beq.n	800ad64 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800adc4:	440d      	add	r5, r1
 800adc6:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 800adca:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800adce:	2902      	cmp	r1, #2
 800add0:	d025      	beq.n	800ae1e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800add2:	2900      	cmp	r1, #0
 800add4:	d1c6      	bne.n	800ad64 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800add6:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800adda:	8842      	ldrh	r2, [r0, #2]
	                    flag = false;
 800addc:	42a2      	cmp	r2, r4
 800adde:	bf38      	it	cc
 800ade0:	2300      	movcc	r3, #0
 800ade2:	e7bf      	b.n	800ad64 <judgeAccelorNot+0x6c>
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800ade4:	7995      	ldrb	r5, [r2, #6]
 800ade6:	79d1      	ldrb	r1, [r2, #7]
 800ade8:	2d07      	cmp	r5, #7
 800adea:	d80b      	bhi.n	800ae04 <judgeAccelorNot+0x10c>
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800adec:	1c6a      	adds	r2, r5, #1
 800adee:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800adf2:	440a      	add	r2, r1
 800adf4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800adf8:	f892 62d0 	ldrb.w	r6, [r2, #720]	; 0x2d0
 800adfc:	2e02      	cmp	r6, #2
 800adfe:	d00e      	beq.n	800ae1e <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800ae00:	2e00      	cmp	r6, #0
 800ae02:	d056      	beq.n	800aeb2 <judgeAccelorNot+0x1ba>
	_Bool flag=false;
 800ae04:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ae06:	2907      	cmp	r1, #7
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800ae08:	ea4f 0285 	mov.w	r2, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ae0c:	d836      	bhi.n	800ae7c <judgeAccelorNot+0x184>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800ae0e:	1957      	adds	r7, r2, r5
 800ae10:	1c4e      	adds	r6, r1, #1
 800ae12:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800ae16:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800ae1a:	2f02      	cmp	r7, #2
 800ae1c:	d123      	bne.n	800ae66 <judgeAccelorNot+0x16e>
	                    flag = false;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	bcf0      	pop	{r4, r5, r6, r7}
 800ae24:	4770      	bx	lr
	        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ae26:	79d5      	ldrb	r5, [r2, #7]
 800ae28:	7992      	ldrb	r2, [r2, #6]
 800ae2a:	2d07      	cmp	r5, #7
 800ae2c:	d882      	bhi.n	800ad34 <judgeAccelorNot+0x3c>
	            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800ae2e:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 800ae32:	1c69      	adds	r1, r5, #1
 800ae34:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 800ae38:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800ae3c:	2e02      	cmp	r6, #2
 800ae3e:	f47f af72 	bne.w	800ad26 <judgeAccelorNot+0x2e>
 800ae42:	e78f      	b.n	800ad64 <judgeAccelorNot+0x6c>
 800ae44:	2109      	movs	r1, #9
 800ae46:	fb11 5202 	smlabb	r2, r1, r2, r5
 800ae4a:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
				if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800ae4e:	f890 22d0 	ldrb.w	r2, [r0, #720]	; 0x2d0
 800ae52:	2a02      	cmp	r2, #2
 800ae54:	d086      	beq.n	800ad64 <judgeAccelorNot+0x6c>
				else if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800ae56:	2a00      	cmp	r2, #0
 800ae58:	d183      	bne.n	800ad62 <judgeAccelorNot+0x6a>
					if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800ae5a:	f8b0 22d2 	ldrh.w	r2, [r0, #722]	; 0x2d2
 800ae5e:	42a2      	cmp	r2, r4
 800ae60:	bf28      	it	cs
 800ae62:	4633      	movcs	r3, r6
 800ae64:	e77e      	b.n	800ad64 <judgeAccelorNot+0x6c>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800ae66:	b937      	cbnz	r7, 800ae76 <judgeAccelorNot+0x17e>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800ae68:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800ae6c:	8876      	ldrh	r6, [r6, #2]
 800ae6e:	42a6      	cmp	r6, r4
 800ae70:	bf3c      	itt	cc
 800ae72:	4634      	movcc	r4, r6
						flag = false;
 800ae74:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800ae76:	2900      	cmp	r1, #0
 800ae78:	f43f af74 	beq.w	800ad64 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800ae7c:	4415      	add	r5, r2
 800ae7e:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800ae82:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
 800ae86:	2a02      	cmp	r2, #2
 800ae88:	d0c9      	beq.n	800ae1e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800ae8a:	2a00      	cmp	r2, #0
 800ae8c:	f47f af6a 	bne.w	800ad64 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800ae90:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ae94:	884a      	ldrh	r2, [r1, #2]
	                    flag = false;
 800ae96:	42a2      	cmp	r2, r4
 800ae98:	bf38      	it	cc
 800ae9a:	2300      	movcc	r3, #0
 800ae9c:	e762      	b.n	800ad64 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800ae9e:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800aea2:	42a1      	cmp	r1, r4
 800aea4:	f4bf af77 	bcs.w	800ad96 <judgeAccelorNot+0x9e>
 800aea8:	460c      	mov	r4, r1
 800aeaa:	e775      	b.n	800ad98 <judgeAccelorNot+0xa0>
 800aeac:	460c      	mov	r4, r1
						flag = true;
 800aeae:	2601      	movs	r6, #1
 800aeb0:	e741      	b.n	800ad36 <judgeAccelorNot+0x3e>
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800aeb2:	f8b2 22d2 	ldrh.w	r2, [r2, #722]	; 0x2d2
 800aeb6:	42a2      	cmp	r2, r4
 800aeb8:	d2a4      	bcs.n	800ae04 <judgeAccelorNot+0x10c>
 800aeba:	4614      	mov	r4, r2
 800aebc:	e7a3      	b.n	800ae06 <judgeAccelorNot+0x10e>
 800aebe:	bf00      	nop

0800aec0 <getNextState>:
//自分の状態から次の状態を得る
state *getNextState(state *now_state, state *next_state, node *next_node)
{
 800aec0:	b4f0      	push	{r4, r5, r6, r7}
    uint8_t now_x = now_state->node->pos.x;
    uint8_t now_y = now_state->node->pos.y;
    uint8_t next_x = next_node->pos.x; 
    uint8_t next_y = next_node->pos.y;
    
    switch(now_state->car%8)
 800aec2:	7883      	ldrb	r3, [r0, #2]
    uint8_t now_x = now_state->node->pos.x;
 800aec4:	6884      	ldr	r4, [r0, #8]
    uint8_t next_x = next_node->pos.x; 
 800aec6:	7996      	ldrb	r6, [r2, #6]
    uint8_t now_x = now_state->node->pos.x;
 800aec8:	79a5      	ldrb	r5, [r4, #6]
    uint8_t next_y = next_node->pos.y;
 800aeca:	79d7      	ldrb	r7, [r2, #7]
    uint8_t now_y = now_state->node->pos.y;
 800aecc:	79e4      	ldrb	r4, [r4, #7]
    switch(now_state->car%8)
 800aece:	f003 0307 	and.w	r3, r3, #7
 800aed2:	2b06      	cmp	r3, #6
 800aed4:	d81e      	bhi.n	800af14 <getNextState+0x54>
 800aed6:	e8df f003 	tbb	[pc, r3]
 800aeda:	1d04      	.short	0x1d04
 800aedc:	1d341d4e 	.word	0x1d341d4e
 800aee0:	20          	.byte	0x20
 800aee1:	00          	.byte	0x00
    {
        case north://行から、列に行くのか行に行くのかで、差分の取り方を変える
            if(next_node->rc == 0)
 800aee2:	7953      	ldrb	r3, [r2, #5]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d059      	beq.n	800af9c <getNextState+0xdc>
            if(next_node->rc == 1)
            {
                //行から列.左右のどちらか判断.あとで後ろも候補にあげる
                //右旋回
                //北向きから北東
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800aee8:	1c6b      	adds	r3, r5, #1
 800aeea:	42b3      	cmp	r3, r6
 800aeec:	f000 80c3 	beq.w	800b076 <getNextState+0x1b6>
                    return next_state;
                }

                //左旋回
                //北向きから北西
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800aef0:	42b5      	cmp	r5, r6
 800aef2:	d10f      	bne.n	800af14 <getNextState+0x54>
 800aef4:	42bc      	cmp	r4, r7
 800aef6:	f000 8119 	beq.w	800b12c <getNextState+0x26c>
 800aefa:	3c01      	subs	r4, #1
                    return next_state;
                }

                //Uターンして右旋回
                //北向きから南西
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800aefc:	42bc      	cmp	r4, r7
 800aefe:	d109      	bne.n	800af14 <getNextState+0x54>
                {
                    next_state->car = west;
 800af00:	2306      	movs	r3, #6
 800af02:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800af04:	7803      	ldrb	r3, [r0, #0]
 800af06:	3b01      	subs	r3, #1
                //Uターンして右旋回
                //西向きから南東
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
                {
                    next_state->car = south;
                    next_state->pos.x = now_state->pos.x + 1;
 800af08:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800af0a:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = backright;
 800af0c:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y - 1;
 800af0e:	3b01      	subs	r3, #1
 800af10:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backright;
 800af12:	70ca      	strb	r2, [r1, #3]
#if DEBUG_ON
    printf("エラー in function 'getNextState'.\r\n");
#endif

    return next_state; //ここまで来てしまったらエラー
}
 800af14:	4608      	mov	r0, r1
 800af16:	bcf0      	pop	{r4, r5, r6, r7}
 800af18:	4770      	bx	lr
            if(next_node->rc == 1)
 800af1a:	7953      	ldrb	r3, [r2, #5]
 800af1c:	1e6a      	subs	r2, r5, #1
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d05b      	beq.n	800afda <getNextState+0x11a>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800af22:	42b2      	cmp	r2, r6
 800af24:	f000 808f 	beq.w	800b046 <getNextState+0x186>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800af28:	3501      	adds	r5, #1
 800af2a:	42ae      	cmp	r6, r5
 800af2c:	d1f2      	bne.n	800af14 <getNextState+0x54>
 800af2e:	42bc      	cmp	r4, r7
 800af30:	d1f0      	bne.n	800af14 <getNextState+0x54>
                    next_state->car = east;
 800af32:	2302      	movs	r3, #2
 800af34:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 2;
 800af36:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = back;
 800af38:	2204      	movs	r2, #4
                    next_state->pos.x = now_state->pos.x + 2;
 800af3a:	3302      	adds	r3, #2
 800af3c:	700b      	strb	r3, [r1, #0]
                    next_state->dir = back;
 800af3e:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800af40:	e7e8      	b.n	800af14 <getNextState+0x54>
            if(next_node->rc == 0)
 800af42:	7953      	ldrb	r3, [r2, #5]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d039      	beq.n	800afbc <getNextState+0xfc>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800af48:	42b5      	cmp	r5, r6
 800af4a:	f000 80a3 	beq.w	800b094 <getNextState+0x1d4>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800af4e:	3501      	adds	r5, #1
 800af50:	42ae      	cmp	r6, r5
 800af52:	d1df      	bne.n	800af14 <getNextState+0x54>
 800af54:	1e63      	subs	r3, r4, #1
 800af56:	42bb      	cmp	r3, r7
 800af58:	f000 80e0 	beq.w	800b11c <getNextState+0x25c>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800af5c:	42bc      	cmp	r4, r7
 800af5e:	d1d9      	bne.n	800af14 <getNextState+0x54>
                    next_state->car = east;
 800af60:	2302      	movs	r3, #2
 800af62:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800af64:	7803      	ldrb	r3, [r0, #0]
 800af66:	3301      	adds	r3, #1
 800af68:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800af6a:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = backright;
 800af6c:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y + 1;
 800af6e:	3301      	adds	r3, #1
 800af70:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backright;
 800af72:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800af74:	e7ce      	b.n	800af14 <getNextState+0x54>
            if(next_node->rc == 1)
 800af76:	7953      	ldrb	r3, [r2, #5]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d042      	beq.n	800b002 <getNextState+0x142>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800af7c:	1c6b      	adds	r3, r5, #1
 800af7e:	42b3      	cmp	r3, r6
 800af80:	d056      	beq.n	800b030 <getNextState+0x170>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800af82:	3d01      	subs	r5, #1
 800af84:	42ae      	cmp	r6, r5
 800af86:	d1c5      	bne.n	800af14 <getNextState+0x54>
 800af88:	42bc      	cmp	r4, r7
 800af8a:	d1c3      	bne.n	800af14 <getNextState+0x54>
                    next_state->car = west;
 800af8c:	2306      	movs	r3, #6
 800af8e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800af90:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = back;
 800af92:	2204      	movs	r2, #4
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800af94:	3b02      	subs	r3, #2
 800af96:	700b      	strb	r3, [r1, #0]
                    next_state->dir = back;
 800af98:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800af9a:	e7bb      	b.n	800af14 <getNextState+0x54>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800af9c:	42b5      	cmp	r5, r6
 800af9e:	d1b9      	bne.n	800af14 <getNextState+0x54>
 800afa0:	1c62      	adds	r2, r4, #1
 800afa2:	42ba      	cmp	r2, r7
 800afa4:	f000 8096 	beq.w	800b0d4 <getNextState+0x214>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800afa8:	3c01      	subs	r4, #1
 800afaa:	42a7      	cmp	r7, r4
 800afac:	d1b2      	bne.n	800af14 <getNextState+0x54>
                    next_state->car = south;
 800afae:	2204      	movs	r2, #4
 800afb0:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800afb2:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = back;
 800afb4:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800afb6:	3b02      	subs	r3, #2
 800afb8:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800afba:	e7ab      	b.n	800af14 <getNextState+0x54>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800afbc:	42b5      	cmp	r5, r6
 800afbe:	d1a9      	bne.n	800af14 <getNextState+0x54>
 800afc0:	1e62      	subs	r2, r4, #1
 800afc2:	42ba      	cmp	r2, r7
 800afc4:	d07f      	beq.n	800b0c6 <getNextState+0x206>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800afc6:	3401      	adds	r4, #1
 800afc8:	42a7      	cmp	r7, r4
 800afca:	d1a3      	bne.n	800af14 <getNextState+0x54>
                    next_state->car = north;
 800afcc:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 2;
 800afce:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = back;
 800afd0:	2204      	movs	r2, #4
                    next_state->pos.y = now_state->pos.y + 2;
 800afd2:	3302      	adds	r3, #2
 800afd4:	704b      	strb	r3, [r1, #1]
                    next_state->dir = back;
 800afd6:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800afd8:	e79c      	b.n	800af14 <getNextState+0x54>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800afda:	42b2      	cmp	r2, r6
 800afdc:	d065      	beq.n	800b0aa <getNextState+0x1ea>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800afde:	42b5      	cmp	r5, r6
 800afe0:	d198      	bne.n	800af14 <getNextState+0x54>
 800afe2:	42bc      	cmp	r4, r7
 800afe4:	f000 80ad 	beq.w	800b142 <getNextState+0x282>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800afe8:	3401      	adds	r4, #1
 800afea:	42bc      	cmp	r4, r7
 800afec:	d192      	bne.n	800af14 <getNextState+0x54>
                    next_state->car = north;
 800afee:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800aff0:	7803      	ldrb	r3, [r0, #0]
 800aff2:	3301      	adds	r3, #1
 800aff4:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800aff6:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = backleft;
 800aff8:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y + 1;
 800affa:	3301      	adds	r3, #1
 800affc:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backleft;
 800affe:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b000:	e788      	b.n	800af14 <getNextState+0x54>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b002:	42b5      	cmp	r5, r6
 800b004:	d02a      	beq.n	800b05c <getNextState+0x19c>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b006:	3d01      	subs	r5, #1
 800b008:	42b5      	cmp	r5, r6
 800b00a:	d183      	bne.n	800af14 <getNextState+0x54>
 800b00c:	1c62      	adds	r2, r4, #1
 800b00e:	42ba      	cmp	r2, r7
 800b010:	f000 8093 	beq.w	800b13a <getNextState+0x27a>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b014:	42bc      	cmp	r4, r7
 800b016:	f47f af7d 	bne.w	800af14 <getNextState+0x54>
                    next_state->car = south;
 800b01a:	2304      	movs	r3, #4
 800b01c:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b01e:	7803      	ldrb	r3, [r0, #0]
 800b020:	3b01      	subs	r3, #1
 800b022:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b024:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = backleft;
 800b026:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y - 1;
 800b028:	3b01      	subs	r3, #1
 800b02a:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backleft;
 800b02c:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b02e:	e771      	b.n	800af14 <getNextState+0x54>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b030:	42bc      	cmp	r4, r7
 800b032:	f47f af6f 	bne.w	800af14 <getNextState+0x54>
                    next_state->car = east;
 800b036:	2302      	movs	r3, #2
 800b038:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b03a:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = front;
 800b03c:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x + 1;
 800b03e:	3301      	adds	r3, #1
 800b040:	700b      	strb	r3, [r1, #0]
                    next_state->dir = front;
 800b042:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b044:	e766      	b.n	800af14 <getNextState+0x54>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b046:	42bc      	cmp	r4, r7
 800b048:	f47f af64 	bne.w	800af14 <getNextState+0x54>
                    next_state->car = west;
 800b04c:	2306      	movs	r3, #6
 800b04e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b050:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = front;
 800b052:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b054:	3b01      	subs	r3, #1
 800b056:	700b      	strb	r3, [r1, #0]
                    next_state->dir = front;
 800b058:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b05a:	e75b      	b.n	800af14 <getNextState+0x54>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b05c:	42bc      	cmp	r4, r7
 800b05e:	d04d      	beq.n	800b0fc <getNextState+0x23c>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800b060:	3401      	adds	r4, #1
 800b062:	42bc      	cmp	r4, r7
 800b064:	f47f af56 	bne.w	800af14 <getNextState+0x54>
                    next_state->car = north;
 800b068:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b06a:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = left;
 800b06c:	2206      	movs	r2, #6
                    next_state->pos.y = now_state->pos.y + 1;
 800b06e:	3301      	adds	r3, #1
 800b070:	704b      	strb	r3, [r1, #1]
                    next_state->dir = left;
 800b072:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b074:	e74e      	b.n	800af14 <getNextState+0x54>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b076:	42bc      	cmp	r4, r7
 800b078:	d032      	beq.n	800b0e0 <getNextState+0x220>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b07a:	42b5      	cmp	r5, r6
 800b07c:	f104 34ff 	add.w	r4, r4, #4294967295
 800b080:	f43f af3c 	beq.w	800aefc <getNextState+0x3c>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b084:	42bc      	cmp	r4, r7
 800b086:	f47f af45 	bne.w	800af14 <getNextState+0x54>
                    next_state->car = east;
 800b08a:	2302      	movs	r3, #2
 800b08c:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b08e:	7803      	ldrb	r3, [r0, #0]
 800b090:	3301      	adds	r3, #1
 800b092:	e7c6      	b.n	800b022 <getNextState+0x162>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b094:	1e63      	subs	r3, r4, #1
 800b096:	42bb      	cmp	r3, r7
 800b098:	d038      	beq.n	800b10c <getNextState+0x24c>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b09a:	42bc      	cmp	r4, r7
 800b09c:	f47f af3a 	bne.w	800af14 <getNextState+0x54>
                    next_state->car = west;
 800b0a0:	2306      	movs	r3, #6
 800b0a2:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b0a4:	7803      	ldrb	r3, [r0, #0]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	e7a4      	b.n	800aff4 <getNextState+0x134>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b0aa:	1c62      	adds	r2, r4, #1
 800b0ac:	42ba      	cmp	r2, r7
 800b0ae:	d01e      	beq.n	800b0ee <getNextState+0x22e>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b0b0:	42bc      	cmp	r4, r7
 800b0b2:	f47f af2f 	bne.w	800af14 <getNextState+0x54>
                    next_state->car = south;
 800b0b6:	2304      	movs	r3, #4
 800b0b8:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b0ba:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = left;
 800b0bc:	2206      	movs	r2, #6
                    next_state->pos.y = now_state->pos.y - 1;
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	704b      	strb	r3, [r1, #1]
                    next_state->dir = left;
 800b0c2:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b0c4:	e726      	b.n	800af14 <getNextState+0x54>
                    next_state->car = south;
 800b0c6:	2204      	movs	r2, #4
 800b0c8:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b0ca:	7842      	ldrb	r2, [r0, #1]
                    next_state->dir = front;
 800b0cc:	70cb      	strb	r3, [r1, #3]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b0ce:	1e53      	subs	r3, r2, #1
 800b0d0:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b0d2:	e71f      	b.n	800af14 <getNextState+0x54>
                    next_state->car = north;
 800b0d4:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b0d6:	7842      	ldrb	r2, [r0, #1]
                    next_state->dir = front;
 800b0d8:	70cb      	strb	r3, [r1, #3]
                    next_state->pos.y = now_state->pos.y + 1;
 800b0da:	1c53      	adds	r3, r2, #1
 800b0dc:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b0de:	e719      	b.n	800af14 <getNextState+0x54>
                    next_state->car = east;
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b0e4:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = right;
 800b0e6:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.x = now_state->pos.x + 1;
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	700b      	strb	r3, [r1, #0]
                    return next_state;
 800b0ec:	e712      	b.n	800af14 <getNextState+0x54>
                    next_state->car = north;
 800b0ee:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b0f0:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = right;
 800b0f2:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y + 1;
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	704b      	strb	r3, [r1, #1]
                    next_state->dir = right;
 800b0f8:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b0fa:	e70b      	b.n	800af14 <getNextState+0x54>
                    next_state->car = south;
 800b0fc:	2304      	movs	r3, #4
 800b0fe:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b100:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = right;
 800b102:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y - 1;
 800b104:	3b01      	subs	r3, #1
 800b106:	704b      	strb	r3, [r1, #1]
                    next_state->dir = right;
 800b108:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b10a:	e703      	b.n	800af14 <getNextState+0x54>
                    next_state->car = west;
 800b10c:	2306      	movs	r3, #6
 800b10e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b110:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = right;
 800b112:	2202      	movs	r2, #2
                    next_state->pos.x = now_state->pos.x - 1;
 800b114:	3b01      	subs	r3, #1
 800b116:	700b      	strb	r3, [r1, #0]
                    next_state->dir = right;
 800b118:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b11a:	e6fb      	b.n	800af14 <getNextState+0x54>
                    next_state->car = east;
 800b11c:	2302      	movs	r3, #2
 800b11e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b120:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = left;
 800b122:	2206      	movs	r2, #6
                    next_state->pos.x = now_state->pos.x + 1;
 800b124:	3301      	adds	r3, #1
 800b126:	700b      	strb	r3, [r1, #0]
                    next_state->dir = left;
 800b128:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b12a:	e6f3      	b.n	800af14 <getNextState+0x54>
                    next_state->car = west;
 800b12c:	2206      	movs	r2, #6
 800b12e:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b130:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = left;
 800b132:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.x = now_state->pos.x - 1;
 800b134:	3b01      	subs	r3, #1
 800b136:	700b      	strb	r3, [r1, #0]
                    return next_state;
 800b138:	e6ec      	b.n	800af14 <getNextState+0x54>
                    next_state->car = north;
 800b13a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b13c:	7803      	ldrb	r3, [r0, #0]
 800b13e:	3b01      	subs	r3, #1
 800b140:	e712      	b.n	800af68 <getNextState+0xa8>
                    next_state->car = south;
 800b142:	2304      	movs	r3, #4
 800b144:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b146:	7803      	ldrb	r3, [r0, #0]
 800b148:	3301      	adds	r3, #1
 800b14a:	e6dd      	b.n	800af08 <getNextState+0x48>

0800b14c <initProfile>:
        // log_st[n].wall.west = WALL;
    }
    printf("い\r\n");
}
void initProfile(profile *prof, maze_node *maze)
{
 800b14c:	b430      	push	{r4, r5}
    };
    setWallExistence(&(prof->now.wall), &w_st[0]);
    setWallExistence(&(prof->next.wall), &next[0]);

    prof->now.node = &(maze->RawNode[0][0]);
    prof->next.node = &(maze->RawNode[0][1]);
 800b14e:	f101 0208 	add.w	r2, r1, #8
    pos->y = y;
 800b152:	2301      	movs	r3, #1
    existence->north = state[0];
 800b154:	2554      	movs	r5, #84	; 0x54
 800b156:	244a      	movs	r4, #74	; 0x4a
    prof->now.node = &(maze->RawNode[0][0]);
 800b158:	6101      	str	r1, [r0, #16]
    prof->next.node = &(maze->RawNode[0][1]);
 800b15a:	61c2      	str	r2, [r0, #28]
    pos->x = x;
 800b15c:	2107      	movs	r1, #7
 800b15e:	2208      	movs	r2, #8
    pos->y = y;
 800b160:	7543      	strb	r3, [r0, #21]
    pos->x = x;
 800b162:	2300      	movs	r3, #0
    existence->north = state[0];
 800b164:	7305      	strb	r5, [r0, #12]
 800b166:	7604      	strb	r4, [r0, #24]
    pos->x = x;
 800b168:	7001      	strb	r1, [r0, #0]
    pos->y = y;
 800b16a:	7041      	strb	r1, [r0, #1]
    pos->x = x;
 800b16c:	7082      	strb	r2, [r0, #2]
    pos->y = y;
 800b16e:	70c2      	strb	r2, [r0, #3]
    pos->x = x;
 800b170:	7203      	strb	r3, [r0, #8]
    pos->y = y;
 800b172:	7243      	strb	r3, [r0, #9]
    st->car = car;
 800b174:	7283      	strb	r3, [r0, #10]
    pos->x = x;
 800b176:	7503      	strb	r3, [r0, #20]
    st->car = car;
 800b178:	7583      	strb	r3, [r0, #22]
    // prof->now.node->rc = 0;
    // prof->now.node->pos.x = 0;
    // prof->now.node->pos.y = 0;
}
 800b17a:	bc30      	pop	{r4, r5}
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop

0800b180 <shiftState>:
void shiftState(profile *prof)
{
 800b180:	b410      	push	{r4}
    prof->now.car = prof->next.car;
    prof->now.pos.x = prof->next.pos.x;
 800b182:	7d01      	ldrb	r1, [r0, #20]
    prof->now.car = prof->next.car;
 800b184:	7d84      	ldrb	r4, [r0, #22]
    prof->now.pos.y = prof->next.pos.y;
 800b186:	7d42      	ldrb	r2, [r0, #21]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b188:	69c3      	ldr	r3, [r0, #28]
    prof->now.car = prof->next.car;
 800b18a:	7284      	strb	r4, [r0, #10]
    prof->now.pos.x = prof->next.pos.x;
 800b18c:	7201      	strb	r1, [r0, #8]
    prof->now.pos.y = prof->next.pos.y;
 800b18e:	7242      	strb	r2, [r0, #9]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b190:	6103      	str	r3, [r0, #16]
}
 800b192:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <InitExplore>:

	//ハード処理

}
void InitExplore()
{
 800b198:	b538      	push	{r3, r4, r5, lr}
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800b19a:	2100      	movs	r1, #0
 800b19c:	2004      	movs	r0, #4
 800b19e:	f003 f90d 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	2005      	movs	r0, #5
 800b1a6:	f003 f909 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	2002      	movs	r0, #2
 800b1ae:	f003 f905 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	2003      	movs	r0, #3
 800b1b6:	f003 f901 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	2001      	movs	r0, #1
 800b1be:	f003 f8fd 	bl	800e3bc <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	4608      	mov	r0, r1
 800b1c6:	f003 f8f9 	bl	800e3bc <PIDChangeFlag>
//									{
//										printf("adc2[1] : %lu\r\n", adc2[1]);
//
//									}
//					Signal( 2 );
	Load_Gain();
 800b1ca:	f002 fe83 	bl	800ded4 <Load_Gain>
//							  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
//							  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
//							  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);

	uint8_t imu_check;
	imu_check = IMU_init();
 800b1ce:	f002 fb35 	bl	800d83c <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b1d2:	4c33      	ldr	r4, [pc, #204]	; (800b2a0 <InitExplore+0x108>)

#endif

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
	Acceleration = 0;
 800b1d4:	4d33      	ldr	r5, [pc, #204]	; (800b2a4 <InitExplore+0x10c>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b1d6:	4601      	mov	r1, r0
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f009 fff9 	bl	80151d0 <iprintf>
	imu_check =IMU_init();
 800b1de:	f002 fb2d 	bl	800d83c <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b1e2:	4601      	mov	r1, r0
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f009 fff3 	bl	80151d0 <iprintf>
	HAL_Delay(100);
 800b1ea:	2064      	movs	r0, #100	; 0x64
 800b1ec:	f003 fabe 	bl	800e76c <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800b1f0:	2138      	movs	r1, #56	; 0x38
 800b1f2:	2037      	movs	r0, #55	; 0x37
 800b1f4:	f002 fa04 	bl	800d600 <ReadIMU>
 800b1f8:	4b2b      	ldr	r3, [pc, #172]	; (800b2a8 <InitExplore+0x110>)
	TargetVelocity[BODY] = 0;
 800b1fa:	4c2c      	ldr	r4, [pc, #176]	; (800b2ac <InitExplore+0x114>)
	ZGyro = ReadIMU(0x37, 0x38);
 800b1fc:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800b200:	6818      	ldr	r0, [r3, #0]
 800b202:	f7fd f8d9 	bl	80083b8 <__aeabi_f2d>
 800b206:	4602      	mov	r2, r0
 800b208:	460b      	mov	r3, r1
 800b20a:	4829      	ldr	r0, [pc, #164]	; (800b2b0 <InitExplore+0x118>)
 800b20c:	f009 ffe0 	bl	80151d0 <iprintf>
	Motor_PWM_Start();
 800b210:	f002 fc68 	bl	800dae4 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800b214:	f002 fb7c 	bl	800d910 <EncoderStart>
	EmitterON();
 800b218:	f002 fb8a 	bl	800d930 <EmitterON>
	ADCStart();
 800b21c:	f002 f86a 	bl	800d2f4 <ADCStart>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b220:	f247 512f 	movw	r1, #29999	; 0x752f
 800b224:	4823      	ldr	r0, [pc, #140]	; (800b2b4 <InitExplore+0x11c>)
 800b226:	f002 fcf5 	bl	800dc14 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b22a:	f247 512f 	movw	r1, #29999	; 0x752f
 800b22e:	4822      	ldr	r0, [pc, #136]	; (800b2b8 <InitExplore+0x120>)
 800b230:	f002 fcf0 	bl	800dc14 <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800b234:	4821      	ldr	r0, [pc, #132]	; (800b2bc <InitExplore+0x124>)
 800b236:	f006 f980 	bl	801153a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b23a:	4821      	ldr	r0, [pc, #132]	; (800b2c0 <InitExplore+0x128>)
 800b23c:	f006 f97d 	bl	801153a <HAL_TIM_Base_Start_IT>
	TargetAngularV = 0;
 800b240:	4920      	ldr	r1, [pc, #128]	; (800b2c4 <InitExplore+0x12c>)
	AngularAcceleration = 0;
	TotalPulse[LEFT] = 0;
 800b242:	4a21      	ldr	r2, [pc, #132]	; (800b2c8 <InitExplore+0x130>)
	AngularAcceleration = 0;
 800b244:	4821      	ldr	r0, [pc, #132]	; (800b2cc <InitExplore+0x134>)
	TargetVelocity[BODY] = 0;
 800b246:	2300      	movs	r3, #0
 800b248:	60a3      	str	r3, [r4, #8]
	TargetAngularV = 0;
 800b24a:	600b      	str	r3, [r1, #0]
	TotalPulse[LEFT] = 0;
 800b24c:	2400      	movs	r4, #0
	TargetPhoto[SR] = Photo[SR];
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
#else


	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b24e:	4920      	ldr	r1, [pc, #128]	; (800b2d0 <InitExplore+0x138>)
	Acceleration = 0;
 800b250:	602b      	str	r3, [r5, #0]
	AngularAcceleration = 0;
 800b252:	6003      	str	r3, [r0, #0]
	TotalPulse[LEFT] = 0;
 800b254:	6014      	str	r4, [r2, #0]
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b256:	4b1f      	ldr	r3, [pc, #124]	; (800b2d4 <InitExplore+0x13c>)
	TotalPulse[RIGHT] = 0;
 800b258:	6054      	str	r4, [r2, #4]
	TotalPulse[BODY] = 0;
 800b25a:	6094      	str	r4, [r2, #8]
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b25c:	6888      	ldr	r0, [r1, #8]
 800b25e:	6098      	str	r0, [r3, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800b260:	6849      	ldr	r1, [r1, #4]
 800b262:	6059      	str	r1, [r3, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b264:	edd3 7a02 	vldr	s15, [r3, #8]
 800b268:	ed93 7a01 	vldr	s14, [r3, #4]
 800b26c:	4a1a      	ldr	r2, [pc, #104]	; (800b2d8 <InitExplore+0x140>)
 800b26e:	ee77 7ac7 	vsub.f32	s15, s15, s14

#endif
	PIDReset(L_VELO_PID);
 800b272:	2004      	movs	r0, #4
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b274:	edc2 7a00 	vstr	s15, [r2]
	PIDReset(L_VELO_PID);
 800b278:	f003 f8a8 	bl	800e3cc <PIDReset>
	PIDReset(R_VELO_PID);
 800b27c:	2005      	movs	r0, #5
 800b27e:	f003 f8a5 	bl	800e3cc <PIDReset>

	PIDReset(A_VELO_PID);
 800b282:	4620      	mov	r0, r4
 800b284:	f003 f8a2 	bl	800e3cc <PIDReset>
	PIDReset(L_WALL_PID);
 800b288:	2002      	movs	r0, #2
 800b28a:	f003 f89f 	bl	800e3cc <PIDReset>
	PIDReset(R_WALL_PID);
 800b28e:	2003      	movs	r0, #3
 800b290:	f003 f89c 	bl	800e3cc <PIDReset>
	PIDReset(D_WALL_PID);
 800b294:	2001      	movs	r0, #1

#endif
}
 800b296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800b29a:	f003 b897 	b.w	800e3cc <PIDReset>
 800b29e:	bf00      	nop
 800b2a0:	08018d5c 	.word	0x08018d5c
 800b2a4:	20007f30 	.word	0x20007f30
 800b2a8:	20007fe0 	.word	0x20007fe0
 800b2ac:	20008984 	.word	0x20008984
 800b2b0:	08018d78 	.word	0x08018d78
 800b2b4:	40000424 	.word	0x40000424
 800b2b8:	40000824 	.word	0x40000824
 800b2bc:	20008e70 	.word	0x20008e70
 800b2c0:	20008c28 	.word	0x20008c28
 800b2c4:	20008994 	.word	0x20008994
 800b2c8:	200089b4 	.word	0x200089b4
 800b2cc:	20007f38 	.word	0x20007f38
 800b2d0:	200089f4 	.word	0x200089f4
 800b2d4:	20008ab4 	.word	0x20008ab4
 800b2d8:	200089a8 	.word	0x200089a8

0800b2dc <InitFastest>:

void InitFastest()
{
 800b2dc:	b538      	push	{r3, r4, r5, lr}
	Motor_PWM_Start();
 800b2de:	f002 fc01 	bl	800dae4 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800b2e2:	f002 fb15 	bl	800d910 <EncoderStart>
	EmitterON();
 800b2e6:	f002 fb23 	bl	800d930 <EmitterON>
	ADCStart();
 800b2ea:	f002 f803 	bl	800d2f4 <ADCStart>

	uint8_t imu_check;
	imu_check = IMU_init();
 800b2ee:	f002 faa5 	bl	800d83c <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b2f2:	4c3d      	ldr	r4, [pc, #244]	; (800b3e8 <InitFastest+0x10c>)

	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
 800b2f4:	4d3d      	ldr	r5, [pc, #244]	; (800b3ec <InitFastest+0x110>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b2f6:	4601      	mov	r1, r0
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f009 ff69 	bl	80151d0 <iprintf>
	imu_check =IMU_init();
 800b2fe:	f002 fa9d 	bl	800d83c <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b302:	4601      	mov	r1, r0
 800b304:	4620      	mov	r0, r4
 800b306:	f009 ff63 	bl	80151d0 <iprintf>
	HAL_Delay(100);
 800b30a:	2064      	movs	r0, #100	; 0x64
 800b30c:	f003 fa2e 	bl	800e76c <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800b310:	2138      	movs	r1, #56	; 0x38
 800b312:	2037      	movs	r0, #55	; 0x37
 800b314:	f002 f974 	bl	800d600 <ReadIMU>
 800b318:	4b35      	ldr	r3, [pc, #212]	; (800b3f0 <InitFastest+0x114>)
	TargetVelocity[BODY] = 0;
 800b31a:	4c36      	ldr	r4, [pc, #216]	; (800b3f4 <InitFastest+0x118>)
	ZGyro = ReadIMU(0x37, 0x38);
 800b31c:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800b320:	6818      	ldr	r0, [r3, #0]
 800b322:	f7fd f849 	bl	80083b8 <__aeabi_f2d>
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	4833      	ldr	r0, [pc, #204]	; (800b3f8 <InitFastest+0x11c>)
 800b32c:	f009 ff50 	bl	80151d0 <iprintf>
	PIDChangeFlag(L_VELO_PID, 0);
 800b330:	2100      	movs	r1, #0
 800b332:	2004      	movs	r0, #4
 800b334:	f003 f842 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800b338:	2100      	movs	r1, #0
 800b33a:	2005      	movs	r0, #5
 800b33c:	f003 f83e 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b340:	2100      	movs	r1, #0
 800b342:	2002      	movs	r0, #2
 800b344:	f003 f83a 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b348:	2100      	movs	r1, #0
 800b34a:	2003      	movs	r0, #3
 800b34c:	f003 f836 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b350:	2100      	movs	r1, #0
 800b352:	2001      	movs	r0, #1
 800b354:	f003 f832 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800b358:	2100      	movs	r1, #0
 800b35a:	4608      	mov	r0, r1
 800b35c:	f003 f82e 	bl	800e3bc <PIDChangeFlag>
	Load_Gain();
 800b360:	f002 fdb8 	bl	800ded4 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b364:	f247 512f 	movw	r1, #29999	; 0x752f
 800b368:	4824      	ldr	r0, [pc, #144]	; (800b3fc <InitFastest+0x120>)
 800b36a:	f002 fc53 	bl	800dc14 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b36e:	f247 512f 	movw	r1, #29999	; 0x752f
 800b372:	4823      	ldr	r0, [pc, #140]	; (800b400 <InitFastest+0x124>)
 800b374:	f002 fc4e 	bl	800dc14 <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800b378:	4822      	ldr	r0, [pc, #136]	; (800b404 <InitFastest+0x128>)
 800b37a:	f006 f8de 	bl	801153a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b37e:	4822      	ldr	r0, [pc, #136]	; (800b408 <InitFastest+0x12c>)
 800b380:	f006 f8db 	bl	801153a <HAL_TIM_Base_Start_IT>
	TargetVelocity[BODY] = 0;
 800b384:	2300      	movs	r3, #0
	Acceleration = 0;
	AngularAcceleration = 0;
	TotalPulse[LEFT] = 0;
 800b386:	4a21      	ldr	r2, [pc, #132]	; (800b40c <InitFastest+0x130>)
	Acceleration = 0;
 800b388:	4821      	ldr	r0, [pc, #132]	; (800b410 <InitFastest+0x134>)
	AngularAcceleration = 0;
 800b38a:	4922      	ldr	r1, [pc, #136]	; (800b414 <InitFastest+0x138>)
	TargetVelocity[BODY] = 0;
 800b38c:	60a3      	str	r3, [r4, #8]
	TotalPulse[LEFT] = 0;
 800b38e:	2400      	movs	r4, #0
	TargetAngularV = 0;
 800b390:	602b      	str	r3, [r5, #0]
	Acceleration = 0;
 800b392:	6003      	str	r3, [r0, #0]
	AngularAcceleration = 0;
 800b394:	600b      	str	r3, [r1, #0]
	TotalPulse[LEFT] = 0;
 800b396:	6014      	str	r4, [r2, #0]
	TotalPulse[RIGHT] = 0;
 800b398:	6054      	str	r4, [r2, #4]
	TotalPulse[BODY] = 0;
 800b39a:	6094      	str	r4, [r2, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800b39c:	f002 fa92 	bl	800d8c4 <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800b3a0:	4a1d      	ldr	r2, [pc, #116]	; (800b418 <InitFastest+0x13c>)
 800b3a2:	4b1e      	ldr	r3, [pc, #120]	; (800b41c <InitFastest+0x140>)
 800b3a4:	6890      	ldr	r0, [r2, #8]
 800b3a6:	6098      	str	r0, [r3, #8]
	TargetPhoto[SR] = Photo[SR];
 800b3a8:	6852      	ldr	r2, [r2, #4]
 800b3aa:	605a      	str	r2, [r3, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b3ac:	edd3 7a02 	vldr	s15, [r3, #8]
 800b3b0:	ed93 7a01 	vldr	s14, [r3, #4]
 800b3b4:	491a      	ldr	r1, [pc, #104]	; (800b420 <InitFastest+0x144>)
 800b3b6:	ee77 7ac7 	vsub.f32	s15, s15, s14

	PIDReset(L_VELO_PID);
 800b3ba:	2004      	movs	r0, #4
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b3bc:	edc1 7a00 	vstr	s15, [r1]
	PIDReset(L_VELO_PID);
 800b3c0:	f003 f804 	bl	800e3cc <PIDReset>
	PIDReset(R_VELO_PID);
 800b3c4:	2005      	movs	r0, #5
 800b3c6:	f003 f801 	bl	800e3cc <PIDReset>
	PIDReset(A_VELO_PID);
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f002 fffe 	bl	800e3cc <PIDReset>
	PIDReset(L_WALL_PID);
 800b3d0:	2002      	movs	r0, #2
 800b3d2:	f002 fffb 	bl	800e3cc <PIDReset>
	PIDReset(R_WALL_PID);
 800b3d6:	2003      	movs	r0, #3
 800b3d8:	f002 fff8 	bl	800e3cc <PIDReset>
	PIDReset(D_WALL_PID);
 800b3dc:	2001      	movs	r0, #1


}
 800b3de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800b3e2:	f002 bff3 	b.w	800e3cc <PIDReset>
 800b3e6:	bf00      	nop
 800b3e8:	08018d5c 	.word	0x08018d5c
 800b3ec:	20008994 	.word	0x20008994
 800b3f0:	20007fe0 	.word	0x20007fe0
 800b3f4:	20008984 	.word	0x20008984
 800b3f8:	08018d78 	.word	0x08018d78
 800b3fc:	40000424 	.word	0x40000424
 800b400:	40000824 	.word	0x40000824
 800b404:	20008e70 	.word	0x20008e70
 800b408:	20008c28 	.word	0x20008c28
 800b40c:	200089b4 	.word	0x200089b4
 800b410:	20007f30 	.word	0x20007f30
 800b414:	20007f38 	.word	0x20007f38
 800b418:	200089f4 	.word	0x200089f4
 800b41c:	20008ab4 	.word	0x20008ab4
 800b420:	200089a8 	.word	0x200089a8

0800b424 <Debug>:
void Debug()
{
 800b424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if 1
	InitExplore();
	InitPosition();
	wall_init();

	TotalPulse[RIGHT] = 0;
 800b426:	4d2a      	ldr	r5, [pc, #168]	; (800b4d0 <Debug+0xac>)
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	PIDChangeFlag(A_VELO_PID, 1);
	ExploreVelocity=0;
 800b428:	4e2a      	ldr	r6, [pc, #168]	; (800b4d4 <Debug+0xb0>)
	TotalPulse[RIGHT] = 0;
 800b42a:	2400      	movs	r4, #0
	InitExplore();
 800b42c:	f7ff feb4 	bl	800b198 <InitExplore>
	InitPosition();
 800b430:	f7fd fce2 	bl	8008df8 <InitPosition>
	wall_init();
 800b434:	f7fe fe96 	bl	800a164 <wall_init>
	PIDChangeFlag(L_VELO_PID, 1);
 800b438:	2101      	movs	r1, #1
 800b43a:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b43c:	606c      	str	r4, [r5, #4]
	TotalPulse[LEFT] = 0;
 800b43e:	602c      	str	r4, [r5, #0]
	TotalPulse[BODY] = 0;
 800b440:	60ac      	str	r4, [r5, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b442:	f002 ffbb 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b446:	2101      	movs	r1, #1
 800b448:	2005      	movs	r0, #5
 800b44a:	f002 ffb7 	bl	800e3bc <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800b44e:	68a9      	ldr	r1, [r5, #8]
 800b450:	4821      	ldr	r0, [pc, #132]	; (800b4d8 <Debug+0xb4>)
 800b452:	682a      	ldr	r2, [r5, #0]
 800b454:	686b      	ldr	r3, [r5, #4]
	}
	PIDChangeFlag(F_WALL_PID, 0);
#endif
#if 1 //直進テスト
	ExploreVelocity = 135;
	Pos.Dir = front;
 800b456:	4d21      	ldr	r5, [pc, #132]	; (800b4dc <Debug+0xb8>)
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800b458:	f009 feba 	bl	80151d0 <iprintf>
	PIDChangeFlag(D_WALL_PID, 0);
 800b45c:	4621      	mov	r1, r4
 800b45e:	2001      	movs	r0, #1
 800b460:	f002 ffac 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b464:	4621      	mov	r1, r4
 800b466:	2002      	movs	r0, #2
 800b468:	f002 ffa8 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b46c:	4621      	mov	r1, r4
 800b46e:	2003      	movs	r0, #3
 800b470:	f002 ffa4 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800b474:	2101      	movs	r1, #1
 800b476:	4620      	mov	r0, r4
 800b478:	f002 ffa0 	bl	800e3bc <PIDChangeFlag>
	ExploreVelocity=0;
 800b47c:	2700      	movs	r7, #0
	ChangeLED(3);
 800b47e:	2003      	movs	r0, #3
	ExploreVelocity=0;
 800b480:	6037      	str	r7, [r6, #0]
	ChangeLED(3);
 800b482:	f002 fa71 	bl	800d968 <ChangeLED>
	ExploreVelocity = 135;
 800b486:	eddf 0a16 	vldr	s1, [pc, #88]	; 800b4e0 <Debug+0xbc>
	IT_mode = EXPLORE;
 800b48a:	4b16      	ldr	r3, [pc, #88]	; (800b4e4 <Debug+0xc0>)
	Accel(61.75,ExploreVelocity);
 800b48c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800b4e8 <Debug+0xc4>
	ExploreVelocity = 135;
 800b490:	edc6 0a00 	vstr	s1, [r6]
	IT_mode = EXPLORE;
 800b494:	2206      	movs	r2, #6
 800b496:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800b498:	712c      	strb	r4, [r5, #4]
	Accel(61.75,ExploreVelocity);
 800b49a:	f7fe f8a5 	bl	80095e8 <Accel>
	for(int i=0; i < 1; i++)
	{
		Pos.Dir = front;
		GoStraight(90, ExploreVelocity, AddVelocity);
 800b49e:	4b13      	ldr	r3, [pc, #76]	; (800b4ec <Debug+0xc8>)
 800b4a0:	edd6 0a00 	vldr	s1, [r6]
 800b4a4:	edd3 7a00 	vldr	s15, [r3]
 800b4a8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800b4f0 <Debug+0xcc>
		Pos.Dir = front;
 800b4ac:	712c      	strb	r4, [r5, #4]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800b4ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4b2:	ee17 0a90 	vmov	r0, s15
 800b4b6:	f7fe f9eb 	bl	8009890 <GoStraight>
		//Pos.Dir = right;
		SlalomRight();
 800b4ba:	f7fd fe7d 	bl	80091b8 <SlalomRight>

	}
	Pos.Dir = front;
	//Decel(45,0);
	TargetVelocity[BODY] = 0;
 800b4be:	4b0d      	ldr	r3, [pc, #52]	; (800b4f4 <Debug+0xd0>)
	Pos.Dir = front;
 800b4c0:	712c      	strb	r4, [r5, #4]
	TargetVelocity[BODY] = 0;
 800b4c2:	609f      	str	r7, [r3, #8]
	HAL_Delay(1000);
 800b4c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	while(1)
	{
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
 800b4c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_Delay(1000);
 800b4cc:	f003 b94e 	b.w	800e76c <HAL_Delay>
 800b4d0:	200089b4 	.word	0x200089b4
 800b4d4:	20008aa8 	.word	0x20008aa8
 800b4d8:	08018ca4 	.word	0x08018ca4
 800b4dc:	20000004 	.word	0x20000004
 800b4e0:	43070000 	.word	0x43070000
 800b4e4:	20008970 	.word	0x20008970
 800b4e8:	42770000 	.word	0x42770000
 800b4ec:	20008990 	.word	0x20008990
 800b4f0:	42b40000 	.word	0x42b40000
 800b4f4:	20008984 	.word	0x20008984

0800b4f8 <ParameterSetting>:
void ParameterSetting()
{
 800b4f8:	b508      	push	{r3, lr}
	Load_Gain();
 800b4fa:	f002 fceb 	bl	800ded4 <Load_Gain>
	Change_Gain();

}
 800b4fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Change_Gain();
 800b502:	f002 bdc1 	b.w	800e088 <Change_Gain>
 800b506:	bf00      	nop

0800b508 <GainTestRWall>:
	{
		TargetVelocity[BODY] = 300;
	}
}
void GainTestRWall()
{
 800b508:	b508      	push	{r3, lr}
	IT_mode = EXPLORE;
 800b50a:	4b16      	ldr	r3, [pc, #88]	; (800b564 <GainTestRWall+0x5c>)
 800b50c:	2206      	movs	r2, #6
 800b50e:	601a      	str	r2, [r3, #0]
	InitExplore();
 800b510:	f7ff fe42 	bl	800b198 <InitExplore>
	InitPosition();
 800b514:	f7fd fc70 	bl	8008df8 <InitPosition>
	wall_init();
 800b518:	f7fe fe24 	bl	800a164 <wall_init>
	TotalPulse[RIGHT] = 0;
 800b51c:	4b12      	ldr	r3, [pc, #72]	; (800b568 <GainTestRWall+0x60>)
 800b51e:	2500      	movs	r5, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800b520:	2101      	movs	r1, #1
 800b522:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b524:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b526:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800b528:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b52a:	f002 ff47 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b52e:	2101      	movs	r1, #1
 800b530:	2005      	movs	r0, #5
 800b532:	f002 ff43 	bl	800e3bc <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800b536:	4629      	mov	r1, r5
 800b538:	2001      	movs	r0, #1
 800b53a:	f002 ff3f 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b53e:	4629      	mov	r1, r5
 800b540:	2002      	movs	r0, #2
 800b542:	f002 ff3b 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800b546:	2101      	movs	r1, #1
 800b548:	2003      	movs	r0, #3
 800b54a:	f002 ff37 	bl	800e3bc <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800b54e:	4b07      	ldr	r3, [pc, #28]	; (800b56c <GainTestRWall+0x64>)
 800b550:	2400      	movs	r4, #0
	ChangeLED(1);
 800b552:	2001      	movs	r0, #1
	ExploreVelocity=0;
 800b554:	601c      	str	r4, [r3, #0]
	ChangeLED(1);
 800b556:	f002 fa07 	bl	800d968 <ChangeLED>
 800b55a:	4a05      	ldr	r2, [pc, #20]	; (800b570 <GainTestRWall+0x68>)
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800b55c:	4623      	mov	r3, r4
 800b55e:	6093      	str	r3, [r2, #8]
 800b560:	e7fd      	b.n	800b55e <GainTestRWall+0x56>
 800b562:	bf00      	nop
 800b564:	20008970 	.word	0x20008970
 800b568:	200089b4 	.word	0x200089b4
 800b56c:	20008aa8 	.word	0x20008aa8
 800b570:	20008984 	.word	0x20008984

0800b574 <GainTestDWall>:

	}
}
void GainTestDWall()
{
 800b574:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	IT_mode = EXPLORE;
 800b578:	4b28      	ldr	r3, [pc, #160]	; (800b61c <GainTestDWall+0xa8>)
	//PIDChangeFlagStraight(D_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 1);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800b57a:	ed9f 8a29 	vldr	s16, [pc, #164]	; 800b620 <GainTestDWall+0xac>
 800b57e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800b630 <GainTestDWall+0xbc>
 800b582:	4c28      	ldr	r4, [pc, #160]	; (800b624 <GainTestDWall+0xb0>)
	ChangeLED(2);
	while(1)
	{
		TargetVelocity[BODY] = 0;
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800b584:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b634 <GainTestDWall+0xc0>
	IT_mode = EXPLORE;
 800b588:	2206      	movs	r2, #6
{
 800b58a:	b087      	sub	sp, #28
	IT_mode = EXPLORE;
 800b58c:	601a      	str	r2, [r3, #0]
	InitExplore();
 800b58e:	f7ff fe03 	bl	800b198 <InitExplore>
	InitPosition();
 800b592:	f7fd fc31 	bl	8008df8 <InitPosition>
	wall_init();
 800b596:	f7fe fde5 	bl	800a164 <wall_init>
	TotalPulse[RIGHT] = 0;
 800b59a:	4b23      	ldr	r3, [pc, #140]	; (800b628 <GainTestDWall+0xb4>)
 800b59c:	2500      	movs	r5, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800b59e:	2101      	movs	r1, #1
 800b5a0:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b5a2:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b5a4:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800b5a6:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b5a8:	f002 ff08 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	2005      	movs	r0, #5
 800b5b0:	f002 ff04 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 1);
 800b5b4:	2101      	movs	r1, #1
 800b5b6:	4608      	mov	r0, r1
 800b5b8:	f002 ff00 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b5bc:	4629      	mov	r1, r5
 800b5be:	2002      	movs	r0, #2
 800b5c0:	f002 fefc 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b5c4:	2003      	movs	r0, #3
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	f002 fef8 	bl	800e3bc <PIDChangeFlag>
	ExploreVelocity=0;
 800b5cc:	4b17      	ldr	r3, [pc, #92]	; (800b62c <GainTestDWall+0xb8>)
	ChangeLED(2);
 800b5ce:	2002      	movs	r0, #2
	ExploreVelocity=0;
 800b5d0:	ed83 8a00 	vstr	s16, [r3]
	ChangeLED(2);
 800b5d4:	f002 f9c8 	bl	800d968 <ChangeLED>
		TargetVelocity[BODY] = 0;
 800b5d8:	ed8b 8a02 	vstr	s16, [fp, #8]
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800b5dc:	6820      	ldr	r0, [r4, #0]
 800b5de:	68e5      	ldr	r5, [r4, #12]
 800b5e0:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800b5e4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b5e8:	f7fc fee6 	bl	80083b8 <__aeabi_f2d>
 800b5ec:	4606      	mov	r6, r0
 800b5ee:	4648      	mov	r0, r9
 800b5f0:	460f      	mov	r7, r1
 800b5f2:	f7fc fee1 	bl	80083b8 <__aeabi_f2d>
 800b5f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5fa:	4640      	mov	r0, r8
 800b5fc:	f7fc fedc 	bl	80083b8 <__aeabi_f2d>
 800b600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b604:	4628      	mov	r0, r5
 800b606:	f7fc fed7 	bl	80083b8 <__aeabi_f2d>
 800b60a:	4632      	mov	r2, r6
 800b60c:	e9cd 0100 	strd	r0, r1, [sp]
 800b610:	463b      	mov	r3, r7
 800b612:	4650      	mov	r0, sl
 800b614:	f009 fddc 	bl	80151d0 <iprintf>
 800b618:	e7de      	b.n	800b5d8 <GainTestDWall+0x64>
 800b61a:	bf00      	nop
 800b61c:	20008970 	.word	0x20008970
 800b620:	00000000 	.word	0x00000000
 800b624:	200089f4 	.word	0x200089f4
 800b628:	200089b4 	.word	0x200089b4
 800b62c:	20008aa8 	.word	0x20008aa8
 800b630:	20008984 	.word	0x20008984
 800b634:	08018d2c 	.word	0x08018d2c

0800b638 <WritingFree>:
		//printf("%f, %f\r\n", AngularV, Angle);

	}
}
void WritingFree()
{
 800b638:	b538      	push	{r3, r4, r5, lr}
	IT_mode = WRITINGFREE;
 800b63a:	4b34      	ldr	r3, [pc, #208]	; (800b70c <WritingFree+0xd4>)
{
 800b63c:	ed2d 8b02 	vpush	{d8}
	IT_mode = WRITINGFREE;
 800b640:	2507      	movs	r5, #7
 800b642:	601d      	str	r5, [r3, #0]

	InitExplore();
 800b644:	f7ff fda8 	bl	800b198 <InitExplore>

	printf("3\r\n");
 800b648:	4831      	ldr	r0, [pc, #196]	; (800b710 <WritingFree+0xd8>)
	Calc = 1;
	Accel(61.5, 240);

	for(int i=0; i < 4; i ++)
	{
		GoStraight(90, 240, 1);
 800b64a:	eddf 8a32 	vldr	s17, [pc, #200]	; 800b714 <WritingFree+0xdc>
 800b64e:	ed9f 8a32 	vldr	s16, [pc, #200]	; 800b718 <WritingFree+0xe0>
	printf("3\r\n");
 800b652:	f009 fe45 	bl	80152e0 <puts>
	InitPosition();
 800b656:	f7fd fbcf 	bl	8008df8 <InitPosition>
	wall_init();
 800b65a:	f7fe fd83 	bl	800a164 <wall_init>
	printf("4\r\n");
 800b65e:	482f      	ldr	r0, [pc, #188]	; (800b71c <WritingFree+0xe4>)
 800b660:	f009 fe3e 	bl	80152e0 <puts>
	TotalPulse[RIGHT] = 0;
 800b664:	4b2e      	ldr	r3, [pc, #184]	; (800b720 <WritingFree+0xe8>)
 800b666:	2400      	movs	r4, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800b668:	2101      	movs	r1, #1
 800b66a:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b66c:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b66e:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800b670:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b672:	f002 fea3 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b676:	2101      	movs	r1, #1
 800b678:	2005      	movs	r0, #5
 800b67a:	f002 fe9f 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b67e:	4621      	mov	r1, r4
 800b680:	2001      	movs	r0, #1
 800b682:	f002 fe9b 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b686:	4621      	mov	r1, r4
 800b688:	2002      	movs	r0, #2
 800b68a:	f002 fe97 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b68e:	4621      	mov	r1, r4
 800b690:	2003      	movs	r0, #3
 800b692:	f002 fe93 	bl	800e3bc <PIDChangeFlag>
	ExploreVelocity=0;
 800b696:	4b23      	ldr	r3, [pc, #140]	; (800b724 <WritingFree+0xec>)
 800b698:	2200      	movs	r2, #0
	ChangeLED(7);
 800b69a:	4628      	mov	r0, r5
	ExploreVelocity=0;
 800b69c:	601a      	str	r2, [r3, #0]
	ChangeLED(7);
 800b69e:	f002 f963 	bl	800d968 <ChangeLED>
	Calc = 1;
 800b6a2:	4b21      	ldr	r3, [pc, #132]	; (800b728 <WritingFree+0xf0>)
	Accel(61.5, 240);
 800b6a4:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b72c <WritingFree+0xf4>
	Calc = 1;
 800b6a8:	2201      	movs	r2, #1
	Accel(61.5, 240);
 800b6aa:	eef0 0a68 	vmov.f32	s1, s17
	Calc = 1;
 800b6ae:	601a      	str	r2, [r3, #0]
	Accel(61.5, 240);
 800b6b0:	f7fd ff9a 	bl	80095e8 <Accel>
 800b6b4:	2404      	movs	r4, #4
		GoStraight(90, 240, 1);
 800b6b6:	2001      	movs	r0, #1
 800b6b8:	eef0 0a68 	vmov.f32	s1, s17
 800b6bc:	eeb0 0a48 	vmov.f32	s0, s16
 800b6c0:	f7fe f8e6 	bl	8009890 <GoStraight>
	for(int i=0; i < 4; i ++)
 800b6c4:	3c01      	subs	r4, #1
 800b6c6:	d1f6      	bne.n	800b6b6 <WritingFree+0x7e>
	}
	for(int i=0; i < 4; i ++)
	{
		GoStraight(90, 240, -1);
 800b6c8:	eddf 8a12 	vldr	s17, [pc, #72]	; 800b714 <WritingFree+0xdc>
 800b6cc:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800b718 <WritingFree+0xe0>
 800b6d0:	2404      	movs	r4, #4
 800b6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d6:	eef0 0a68 	vmov.f32	s1, s17
 800b6da:	eeb0 0a48 	vmov.f32	s0, s16
 800b6de:	f7fe f8d7 	bl	8009890 <GoStraight>
	for(int i=0; i < 4; i ++)
 800b6e2:	3c01      	subs	r4, #1
 800b6e4:	d1f5      	bne.n	800b6d2 <WritingFree+0x9a>
	}
	Decel(45, 0);
 800b6e6:	eddf 0a12 	vldr	s1, [pc, #72]	; 800b730 <WritingFree+0xf8>
 800b6ea:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800b734 <WritingFree+0xfc>
 800b6ee:	f7fd ffff 	bl	80096f0 <Decel>
	//	initSearchData(&my_map, &my_mouse);
		t = 0;
		HAL_TIM_Base_Stop_IT(&htim1);
		printf("%dms\r\n",timer1);
#else
	printf("初期化時重み更新タイム\r\n");
 800b6f2:	4811      	ldr	r0, [pc, #68]	; (800b738 <WritingFree+0x100>)
 800b6f4:	f009 fdf4 	bl	80152e0 <puts>
	initSearchData(&my_map, &my_mouse); //全体8.4ms . 初期化処理で1.2ms + 全体の重み更新で7.2ms
 800b6f8:	4910      	ldr	r1, [pc, #64]	; (800b73c <WritingFree+0x104>)
 800b6fa:	4811      	ldr	r0, [pc, #68]	; (800b740 <WritingFree+0x108>)
 800b6fc:	f001 fb5e 	bl	800cdbc <initSearchData>

	printf("走行時タイム\r\n");
 800b700:	4810      	ldr	r0, [pc, #64]	; (800b744 <WritingFree+0x10c>)
 800b702:	f009 fded 	bl	80152e0 <puts>
	updateRealSearch();	//7.6ms
 800b706:	f001 fb75 	bl	800cdf4 <updateRealSearch>
 800b70a:	e7fe      	b.n	800b70a <WritingFree+0xd2>
 800b70c:	20008970 	.word	0x20008970
 800b710:	08018dac 	.word	0x08018dac
 800b714:	43700000 	.word	0x43700000
 800b718:	42b40000 	.word	0x42b40000
 800b71c:	08018db0 	.word	0x08018db0
 800b720:	200089b4 	.word	0x200089b4
 800b724:	20008aa8 	.word	0x20008aa8
 800b728:	20008c24 	.word	0x20008c24
 800b72c:	42760000 	.word	0x42760000
 800b730:	00000000 	.word	0x00000000
 800b734:	42340000 	.word	0x42340000
 800b738:	08018db4 	.word	0x08018db4
 800b73c:	20008220 	.word	0x20008220
 800b740:	200083cc 	.word	0x200083cc
 800b744:	08018dd8 	.word	0x08018dd8

0800b748 <FastestRun>:
	Sla.Theta1 = 30*M_PI/180;
	Sla.Theta2 = 60*M_PI/180;
	Sla.Theta3 = 90*M_PI/180;
}
void FastestRun()
{
 800b748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b74c:	ed2d 8b02 	vpush	{d8}
	IT_mode = EXPLORE;
 800b750:	4bbd      	ldr	r3, [pc, #756]	; (800ba48 <FastestRun+0x300>)
	InitPosition();


//	wall_init();

	TotalPulse[RIGHT] = 0;
 800b752:	4ebe      	ldr	r6, [pc, #760]	; (800ba4c <FastestRun+0x304>)
{
 800b754:	b085      	sub	sp, #20
	IT_mode = EXPLORE;
 800b756:	2206      	movs	r2, #6
	HAL_Delay(100);
 800b758:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800b75a:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800b75c:	f003 f806 	bl	800e76c <HAL_Delay>
	int8_t mode=1;
 800b760:	aa04      	add	r2, sp, #16
 800b762:	2501      	movs	r5, #1
 800b764:	f802 5d02 	strb.w	r5, [r2, #-2]!
	  ModeSelect( 1, 2, &mode);
 800b768:	2102      	movs	r1, #2
 800b76a:	4628      	mov	r0, r5
 800b76c:	f002 ff00 	bl	800e570 <ModeSelect>
	  Signal( mode );
 800b770:	f99d 000e 	ldrsb.w	r0, [sp, #14]
 800b774:	f002 fe90 	bl	800e498 <Signal>
		HAL_Delay(100);
 800b778:	2064      	movs	r0, #100	; 0x64
 800b77a:	f002 fff7 	bl	800e76c <HAL_Delay>
		  int8_t mode2=1;
 800b77e:	aa04      	add	r2, sp, #16
		  ModeSelect( 1, 4, &mode2);
 800b780:	2104      	movs	r1, #4
		  int8_t mode2=1;
 800b782:	f802 5d01 	strb.w	r5, [r2, #-1]!
		  ModeSelect( 1, 4, &mode2);
 800b786:	4628      	mov	r0, r5
 800b788:	f002 fef2 	bl	800e570 <ModeSelect>
		  Signal( mode2 );
 800b78c:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800b790:	f002 fe82 	bl	800e498 <Signal>
	TotalPulse[RIGHT] = 0;
 800b794:	2400      	movs	r4, #0
		  PhotoSwitch();
 800b796:	f002 fec1 	bl	800e51c <PhotoSwitch>
	InitFastest();
 800b79a:	f7ff fd9f 	bl	800b2dc <InitFastest>
	InitPosition();
 800b79e:	f7fd fb2b 	bl	8008df8 <InitPosition>
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b7a6:	6074      	str	r4, [r6, #4]
	TotalPulse[LEFT] = 0;
 800b7a8:	6034      	str	r4, [r6, #0]
	TotalPulse[BODY] = 0;
 800b7aa:	60b4      	str	r4, [r6, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b7ac:	f002 fe06 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	2005      	movs	r0, #5
 800b7b4:	f002 fe02 	bl	800e3bc <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800b7b8:	68b1      	ldr	r1, [r6, #8]
 800b7ba:	48a5      	ldr	r0, [pc, #660]	; (800ba50 <FastestRun+0x308>)
 800b7bc:	6832      	ldr	r2, [r6, #0]
 800b7be:	6873      	ldr	r3, [r6, #4]
 800b7c0:	f009 fd06 	bl	80151d0 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	f002 fdf8 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	2002      	movs	r0, #2
 800b7d0:	f002 fdf4 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b7d4:	4621      	mov	r1, r4
 800b7d6:	2003      	movs	r0, #3
 800b7d8:	f002 fdf0 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800b7dc:	4621      	mov	r1, r4
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f002 fdec 	bl	800e3bc <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode = 'T';
	if(mode == 1)
 800b7e4:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 800b7e8:	42ab      	cmp	r3, r5
 800b7ea:	d012      	beq.n	800b812 <FastestRun+0xca>
		ExploreVelocity = 400;
		turn_mode = 'T';
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	4f99      	ldr	r7, [pc, #612]	; (800ba54 <FastestRun+0x30c>)
 800b7f0:	bf14      	ite	ne
 800b7f2:	f04f 0954 	movne.w	r9, #84	; 0x54
 800b7f6:	f04f 0953 	moveq.w	r9, #83	; 0x53
	}

	switch(mode2)
 800b7fa:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 800b7fe:	3b01      	subs	r3, #1
 800b800:	2b03      	cmp	r3, #3
 800b802:	f200 817a 	bhi.w	800bafa <FastestRun+0x3b2>
 800b806:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b80a:	016e      	.short	0x016e
 800b80c:	01100165 	.word	0x01100165
 800b810:	000a      	.short	0x000a
		ExploreVelocity = 400;
 800b812:	4f90      	ldr	r7, [pc, #576]	; (800ba54 <FastestRun+0x30c>)
 800b814:	4b90      	ldr	r3, [pc, #576]	; (800ba58 <FastestRun+0x310>)
 800b816:	603b      	str	r3, [r7, #0]
		turn_mode = 'T';
 800b818:	f04f 0954 	mov.w	r9, #84	; 0x54
 800b81c:	e7ed      	b.n	800b7fa <FastestRun+0xb2>
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
		Sla.Pre = 3;
 800b81e:	4c8f      	ldr	r4, [pc, #572]	; (800ba5c <FastestRun+0x314>)
		ExploreVelocity=300;
 800b820:	4a8f      	ldr	r2, [pc, #572]	; (800ba60 <FastestRun+0x318>)
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800b822:	4b90      	ldr	r3, [pc, #576]	; (800ba64 <FastestRun+0x31c>)
		ExploreVelocity=300;
 800b824:	603a      	str	r2, [r7, #0]
		Sla.Pre = 3;
 800b826:	4990      	ldr	r1, [pc, #576]	; (800ba68 <FastestRun+0x320>)
		Sla.Fol = 5;
 800b828:	4a90      	ldr	r2, [pc, #576]	; (800ba6c <FastestRun+0x324>)
		Sla.Pre = 3;
 800b82a:	6021      	str	r1, [r4, #0]
		Sla.Fol = 5;
 800b82c:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.117;
 800b82e:	60a3      	str	r3, [r4, #8]
	Sla.Pre *=  2/MM_PER_PULSE;
 800b830:	6820      	ldr	r0, [r4, #0]
	initSlalomParam();
	ChangeLED(4);

	VelocityMax = false;

	SearchOrFast = 1;
 800b832:	f8df 8294 	ldr.w	r8, [pc, #660]	; 800bac8 <FastestRun+0x380>
	Calc = SearchOrFast;
 800b836:	4e8e      	ldr	r6, [pc, #568]	; (800ba70 <FastestRun+0x328>)
//			HAL_Delay(300);
//			break;
//	}
	//shiftPos();

	TargetVelocity[BODY] = 0;
 800b838:	ed9f 8a8e 	vldr	s16, [pc, #568]	; 800ba74 <FastestRun+0x32c>
 800b83c:	4d8e      	ldr	r5, [pc, #568]	; (800ba78 <FastestRun+0x330>)
        	case back:
        		//Uターンして直進.加速できる
        		Calc = 1;//マップ更新したくないときは1を代入。
        		GoBack();
        		Calc = SearchOrFast;
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800b83e:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800ba7c <FastestRun+0x334>
	Sla.Pre *=  2/MM_PER_PULSE;
 800b842:	f7fc fdb9 	bl	80083b8 <__aeabi_f2d>
 800b846:	a37e      	add	r3, pc, #504	; (adr r3, 800ba40 <FastestRun+0x2f8>)
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	f7fc fe0c 	bl	8008468 <__aeabi_dmul>
 800b850:	f7fd f902 	bl	8008a58 <__aeabi_d2f>
 800b854:	6020      	str	r0, [r4, #0]
	Sla.Fol *=  2/MM_PER_PULSE;
 800b856:	6860      	ldr	r0, [r4, #4]
 800b858:	f7fc fdae 	bl	80083b8 <__aeabi_f2d>
 800b85c:	a378      	add	r3, pc, #480	; (adr r3, 800ba40 <FastestRun+0x2f8>)
 800b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b862:	f7fc fe01 	bl	8008468 <__aeabi_dmul>
 800b866:	f7fd f8f7 	bl	8008a58 <__aeabi_d2f>
	Sla.Theta3 = 90*M_PI/180;
 800b86a:	4b85      	ldr	r3, [pc, #532]	; (800ba80 <FastestRun+0x338>)
	Sla.Theta1 = 30*M_PI/180;
 800b86c:	4985      	ldr	r1, [pc, #532]	; (800ba84 <FastestRun+0x33c>)
	Sla.Theta2 = 60*M_PI/180;
 800b86e:	4a86      	ldr	r2, [pc, #536]	; (800ba88 <FastestRun+0x340>)
	Sla.Fol *=  2/MM_PER_PULSE;
 800b870:	6060      	str	r0, [r4, #4]
	ChangeLED(4);
 800b872:	2004      	movs	r0, #4
	Sla.Theta3 = 90*M_PI/180;
 800b874:	61a3      	str	r3, [r4, #24]
	Sla.Theta1 = 30*M_PI/180;
 800b876:	6121      	str	r1, [r4, #16]
	Sla.Theta2 = 60*M_PI/180;
 800b878:	6162      	str	r2, [r4, #20]
	ChangeLED(4);
 800b87a:	f002 f875 	bl	800d968 <ChangeLED>
	VelocityMax = false;
 800b87e:	4a83      	ldr	r2, [pc, #524]	; (800ba8c <FastestRun+0x344>)
	TargetVelocity[BODY] = 0;
 800b880:	4883      	ldr	r0, [pc, #524]	; (800ba90 <FastestRun+0x348>)
	Acceleration = 0;
 800b882:	4984      	ldr	r1, [pc, #528]	; (800ba94 <FastestRun+0x34c>)
	SearchOrFast = 1;
 800b884:	f04f 0b01 	mov.w	fp, #1
	VelocityMax = false;
 800b888:	2400      	movs	r4, #0
 800b88a:	7014      	strb	r4, [r2, #0]
	SearchOrFast = 1;
 800b88c:	f8c8 b000 	str.w	fp, [r8]
	Calc = SearchOrFast;
 800b890:	f8d8 2000 	ldr.w	r2, [r8]
 800b894:	6032      	str	r2, [r6, #0]
	TargetAngularV = 0;
 800b896:	4a80      	ldr	r2, [pc, #512]	; (800ba98 <FastestRun+0x350>)
	TargetVelocity[BODY] = 0;
 800b898:	ed80 8a02 	vstr	s16, [r0, #8]
	TargetAngle = 0;
 800b89c:	487f      	ldr	r0, [pc, #508]	; (800ba9c <FastestRun+0x354>)
	Acceleration = 0;
 800b89e:	ed81 8a00 	vstr	s16, [r1]
	Angle = 0;
 800b8a2:	497f      	ldr	r1, [pc, #508]	; (800baa0 <FastestRun+0x358>)
	TargetAngularV = 0;
 800b8a4:	ed82 8a00 	vstr	s16, [r2]
	goal_edge_num = GOAL_SIZE_X;
 800b8a8:	4a7e      	ldr	r2, [pc, #504]	; (800baa4 <FastestRun+0x35c>)
	TargetAngle = 0;
 800b8aa:	ed80 8a00 	vstr	s16, [r0]
	goal_edge_num = GOAL_SIZE_X;
 800b8ae:	f04f 0a02 	mov.w	sl, #2
	PIDReset(L_VELO_PID);
 800b8b2:	2004      	movs	r0, #4
	goal_edge_num = GOAL_SIZE_X;
 800b8b4:	f882 a000 	strb.w	sl, [r2]
	Angle = 0;
 800b8b8:	ed81 8a00 	vstr	s16, [r1]
	PIDReset(L_VELO_PID);
 800b8bc:	f002 fd86 	bl	800e3cc <PIDReset>
	PIDReset(R_VELO_PID);
 800b8c0:	2005      	movs	r0, #5
 800b8c2:	f002 fd83 	bl	800e3cc <PIDReset>
	PIDReset(A_VELO_PID);
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f002 fd80 	bl	800e3cc <PIDReset>
	PIDReset(L_WALL_PID);
 800b8cc:	4650      	mov	r0, sl
 800b8ce:	f002 fd7d 	bl	800e3cc <PIDReset>
	PIDReset(R_WALL_PID);
 800b8d2:	2003      	movs	r0, #3
 800b8d4:	f002 fd7a 	bl	800e3cc <PIDReset>
	PIDReset(D_WALL_PID);
 800b8d8:	4658      	mov	r0, fp
 800b8da:	f002 fd77 	bl	800e3cc <PIDReset>
	initSearchData(&my_map, &my_mouse);
 800b8de:	4629      	mov	r1, r5
 800b8e0:	4871      	ldr	r0, [pc, #452]	; (800baa8 <FastestRun+0x360>)
 800b8e2:	f001 fa6b 	bl	800cdbc <initSearchData>
	flashCopyNodesToRam(); //existenceだけ
 800b8e6:	f7fe fc81 	bl	800a1ec <flashCopyNodesToRam>
	updateAllNodeWeight(&my_map, GOAL_X, GOAL_Y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x03);
 800b8ea:	2207      	movs	r2, #7
 800b8ec:	2103      	movs	r1, #3
 800b8ee:	4653      	mov	r3, sl
 800b8f0:	f8cd a000 	str.w	sl, [sp]
 800b8f4:	9101      	str	r1, [sp, #4]
 800b8f6:	486c      	ldr	r0, [pc, #432]	; (800baa8 <FastestRun+0x360>)
 800b8f8:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 800bacc <FastestRun+0x384>
 800b8fc:	4611      	mov	r1, r2
 800b8fe:	f7fe ff63 	bl	800a7c8 <updateAllNodeWeight>
	HAL_Delay(200);
 800b902:	20c8      	movs	r0, #200	; 0xc8
 800b904:	f002 ff32 	bl	800e76c <HAL_Delay>
	Accel(61.5, ExploreVelocity);
 800b908:	edd7 0a00 	vldr	s1, [r7]
 800b90c:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800baac <FastestRun+0x364>
        shiftState(&my_mouse);
 800b910:	46ab      	mov	fp, r5
	Accel(61.5, ExploreVelocity);
 800b912:	f7fd fe69 	bl	80095e8 <Accel>
    while(! ((my_mouse.goal_lesser.x <= my_mouse.next.pos.x && my_mouse.next.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.next.pos.y && my_mouse.next.pos.y <= my_mouse.goal_larger.y)))
 800b916:	7d2b      	ldrb	r3, [r5, #20]
 800b918:	782a      	ldrb	r2, [r5, #0]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d809      	bhi.n	800b932 <FastestRun+0x1ea>
 800b91e:	78aa      	ldrb	r2, [r5, #2]
 800b920:	429a      	cmp	r2, r3
 800b922:	d306      	bcc.n	800b932 <FastestRun+0x1ea>
 800b924:	7d6b      	ldrb	r3, [r5, #21]
 800b926:	786a      	ldrb	r2, [r5, #1]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d802      	bhi.n	800b932 <FastestRun+0x1ea>
 800b92c:	78ea      	ldrb	r2, [r5, #3]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d263      	bcs.n	800b9fa <FastestRun+0x2b2>
        shiftState(&my_mouse);
 800b932:	4658      	mov	r0, fp
 800b934:	f7ff fc24 	bl	800b180 <shiftState>
        my_mouse.next.node = getNextNode(&my_map, my_mouse.now.car, my_mouse.now.node, 0x03);//これらの引数のどれかがいけない. 迷路、方角、ノードポインタ. 一発目の、ノードの重みがfffなのはなぜ？
 800b938:	2303      	movs	r3, #3
 800b93a:	692a      	ldr	r2, [r5, #16]
 800b93c:	7aa9      	ldrb	r1, [r5, #10]
 800b93e:	485a      	ldr	r0, [pc, #360]	; (800baa8 <FastestRun+0x360>)
 800b940:	f7ff f864 	bl	800aa0c <getNextNode>
        getNextState(&(my_mouse.now),&(my_mouse.next),my_mouse.next.node);
 800b944:	495a      	ldr	r1, [pc, #360]	; (800bab0 <FastestRun+0x368>)
        my_mouse.next.node = getNextNode(&my_map, my_mouse.now.car, my_mouse.now.node, 0x03);//これらの引数のどれかがいけない. 迷路、方角、ノードポインタ. 一発目の、ノードの重みがfffなのはなぜ？
 800b946:	61e8      	str	r0, [r5, #28]
 800b948:	4602      	mov	r2, r0
        getNextState(&(my_mouse.now),&(my_mouse.next),my_mouse.next.node);
 800b94a:	f1a1 000c 	sub.w	r0, r1, #12
 800b94e:	f7ff fab7 	bl	800aec0 <getNextState>
        	switch(my_mouse.next.dir%8)
 800b952:	7deb      	ldrb	r3, [r5, #23]
        AddVelocity = 0;
 800b954:	ed8a 8a00 	vstr	s16, [sl]
        	switch(my_mouse.next.dir%8)
 800b958:	f003 0307 	and.w	r3, r3, #7
 800b95c:	2b06      	cmp	r3, #6
 800b95e:	d80b      	bhi.n	800b978 <FastestRun+0x230>
 800b960:	e8df f003 	tbb	[pc, r3]
 800b964:	350c0a16 	.word	0x350c0a16
 800b968:	4021      	.short	0x4021
 800b96a:	04          	.byte	0x04
 800b96b:	00          	.byte	0x00
        		Calc = SearchOrFast;
        		TurnLeft(turn_mode);
        		break;
        	case left:
        		//左旋回
        		Calc = SearchOrFast;
 800b96c:	f8d8 3000 	ldr.w	r3, [r8]
 800b970:	6033      	str	r3, [r6, #0]
        		TurnLeft(turn_mode);
 800b972:	4648      	mov	r0, r9
 800b974:	f7fe f8fc 	bl	8009b70 <TurnLeft>
        		break;
        	}
        cnt++;
 800b978:	3401      	adds	r4, #1
 800b97a:	e7cc      	b.n	800b916 <FastestRun+0x1ce>
        		ChangeLED(1);
 800b97c:	2001      	movs	r0, #1
 800b97e:	f001 fff3 	bl	800d968 <ChangeLED>
        		Calc = SearchOrFast;
 800b982:	f8d8 3000 	ldr.w	r3, [r8]
 800b986:	6033      	str	r3, [r6, #0]
        		TurnRight(turn_mode);
 800b988:	4648      	mov	r0, r9
 800b98a:	f7fe f8b3 	bl	8009af4 <TurnRight>
        		break;
 800b98e:	e7f3      	b.n	800b978 <FastestRun+0x230>
        		Calc = SearchOrFast;
 800b990:	f8d8 3000 	ldr.w	r3, [r8]
        		GoStraight(90, ExploreVelocity , 0);
 800b994:	edd7 0a00 	vldr	s1, [r7]
        		Calc = SearchOrFast;
 800b998:	6033      	str	r3, [r6, #0]
        		GoStraight(90, ExploreVelocity , 0);
 800b99a:	2000      	movs	r0, #0
 800b99c:	eeb0 0a68 	vmov.f32	s0, s17
 800b9a0:	f7fd ff76 	bl	8009890 <GoStraight>
        		break;
 800b9a4:	e7e8      	b.n	800b978 <FastestRun+0x230>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	6033      	str	r3, [r6, #0]
        		GoBack();
 800b9aa:	f7fe f921 	bl	8009bf0 <GoBack>
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800b9ae:	edda 7a00 	vldr	s15, [sl]
        		Calc = SearchOrFast;
 800b9b2:	f8d8 3000 	ldr.w	r3, [r8]
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800b9b6:	edd7 0a00 	vldr	s1, [r7]
        		Calc = SearchOrFast;
 800b9ba:	6033      	str	r3, [r6, #0]
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800b9bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9c0:	eeb0 0a68 	vmov.f32	s0, s17
 800b9c4:	ee17 0a90 	vmov	r0, s15
 800b9c8:	f7fd ff62 	bl	8009890 <GoStraight>
        		break;
 800b9cc:	e7d4      	b.n	800b978 <FastestRun+0x230>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	6033      	str	r3, [r6, #0]
        		GoBack();
 800b9d2:	f7fe f90d 	bl	8009bf0 <GoBack>
        		Calc = SearchOrFast;
 800b9d6:	f8d8 3000 	ldr.w	r3, [r8]
 800b9da:	6033      	str	r3, [r6, #0]
        		TurnRight(turn_mode);
 800b9dc:	4648      	mov	r0, r9
 800b9de:	f7fe f889 	bl	8009af4 <TurnRight>
        		break;
 800b9e2:	e7c9      	b.n	800b978 <FastestRun+0x230>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	6033      	str	r3, [r6, #0]
        		GoBack();
 800b9e8:	f7fe f902 	bl	8009bf0 <GoBack>
        		Calc = SearchOrFast;
 800b9ec:	f8d8 3000 	ldr.w	r3, [r8]
 800b9f0:	6033      	str	r3, [r6, #0]
        		TurnLeft(turn_mode);
 800b9f2:	4648      	mov	r0, r9
 800b9f4:	f7fe f8bc 	bl	8009b70 <TurnLeft>
        		break;
 800b9f8:	e7be      	b.n	800b978 <FastestRun+0x230>
//    outputDataToFile(maze);

	//fast_run( X_GOAL_LESSER, Y_GOAL_LESSER,X_GOAL_LARGER,Y_GOAL_LARGER, turn_mode,0x03);

	//ゴールしたら減速して、停止。
	Decel(45,0);
 800b9fa:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800ba74 <FastestRun+0x32c>
 800b9fe:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800bab4 <FastestRun+0x36c>
 800ba02:	4d29      	ldr	r5, [pc, #164]	; (800baa8 <FastestRun+0x360>)
	//終了合図
	Signal(7);

	while(1)
	{
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",cnt, my_map.RawNode[0][1].weight);
 800ba04:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800bad0 <FastestRun+0x388>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800ba08:	4f2b      	ldr	r7, [pc, #172]	; (800bab8 <FastestRun+0x370>)
	Decel(45,0);
 800ba0a:	f7fd fe71 	bl	80096f0 <Decel>
	Signal(7);
 800ba0e:	2007      	movs	r0, #7
 800ba10:	f002 fd42 	bl	800e498 <Signal>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800ba14:	462e      	mov	r6, r5
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",cnt, my_map.RawNode[0][1].weight);
 800ba16:	4621      	mov	r1, r4
 800ba18:	896a      	ldrh	r2, [r5, #10]
 800ba1a:	4640      	mov	r0, r8
 800ba1c:	f009 fbd8 	bl	80151d0 <iprintf>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800ba20:	4639      	mov	r1, r7
 800ba22:	4630      	mov	r0, r6
 800ba24:	f7fe fc2c 	bl	800a280 <printAllWeight>
 800ba28:	e7f5      	b.n	800ba16 <FastestRun+0x2ce>
		Sla.Pre = 2;
 800ba2a:	4c0c      	ldr	r4, [pc, #48]	; (800ba5c <FastestRun+0x314>)
		ExploreVelocity=180;
 800ba2c:	4a23      	ldr	r2, [pc, #140]	; (800babc <FastestRun+0x374>)
		Sla.Alpha = 0.04;
 800ba2e:	4b24      	ldr	r3, [pc, #144]	; (800bac0 <FastestRun+0x378>)
		ExploreVelocity=180;
 800ba30:	603a      	str	r2, [r7, #0]
		Sla.Pre = 2;
 800ba32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		Sla.Fol = 3.5;
 800ba36:	4a23      	ldr	r2, [pc, #140]	; (800bac4 <FastestRun+0x37c>)
		Sla.Pre = 2;
 800ba38:	6021      	str	r1, [r4, #0]
		Sla.Fol = 3.5;
 800ba3a:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.04;
 800ba3c:	60a3      	str	r3, [r4, #8]
		break;
 800ba3e:	e6f7      	b.n	800b830 <FastestRun+0xe8>
 800ba40:	9f8f0d54 	.word	0x9f8f0d54
 800ba44:	409ee54a 	.word	0x409ee54a
 800ba48:	20008970 	.word	0x20008970
 800ba4c:	200089b4 	.word	0x200089b4
 800ba50:	08018ca4 	.word	0x08018ca4
 800ba54:	20008aa8 	.word	0x20008aa8
 800ba58:	43c80000 	.word	0x43c80000
 800ba5c:	200089cc 	.word	0x200089cc
 800ba60:	43960000 	.word	0x43960000
 800ba64:	3def9db2 	.word	0x3def9db2
 800ba68:	40400000 	.word	0x40400000
 800ba6c:	40a00000 	.word	0x40a00000
 800ba70:	20008c24 	.word	0x20008c24
 800ba74:	00000000 	.word	0x00000000
 800ba78:	20008220 	.word	0x20008220
 800ba7c:	42b40000 	.word	0x42b40000
 800ba80:	3fc90fdb 	.word	0x3fc90fdb
 800ba84:	3f060a92 	.word	0x3f060a92
 800ba88:	3f860a92 	.word	0x3f860a92
 800ba8c:	20008aa6 	.word	0x20008aa6
 800ba90:	20008984 	.word	0x20008984
 800ba94:	20007f30 	.word	0x20007f30
 800ba98:	20008994 	.word	0x20008994
 800ba9c:	20007f44 	.word	0x20007f44
 800baa0:	20007f34 	.word	0x20007f34
 800baa4:	200089b0 	.word	0x200089b0
 800baa8:	200083cc 	.word	0x200083cc
 800baac:	42760000 	.word	0x42760000
 800bab0:	20008234 	.word	0x20008234
 800bab4:	42340000 	.word	0x42340000
 800bab8:	20008228 	.word	0x20008228
 800babc:	43340000 	.word	0x43340000
 800bac0:	3d23d70a 	.word	0x3d23d70a
 800bac4:	40600000 	.word	0x40600000
 800bac8:	20008c20 	.word	0x20008c20
 800bacc:	20008990 	.word	0x20008990
 800bad0:	08018cd8 	.word	0x08018cd8
		Sla.Pre = 5;
 800bad4:	4c0a      	ldr	r4, [pc, #40]	; (800bb00 <FastestRun+0x3b8>)
		ExploreVelocity=135;
 800bad6:	4b0b      	ldr	r3, [pc, #44]	; (800bb04 <FastestRun+0x3bc>)
		Sla.Alpha = 0.0273;
 800bad8:	4a0b      	ldr	r2, [pc, #44]	; (800bb08 <FastestRun+0x3c0>)
		ExploreVelocity=135;
 800bada:	603b      	str	r3, [r7, #0]
		Sla.Pre = 5;
 800badc:	4b0b      	ldr	r3, [pc, #44]	; (800bb0c <FastestRun+0x3c4>)
		Sla.Alpha = 0.0273;
 800bade:	60a2      	str	r2, [r4, #8]
		Sla.Pre = 5;
 800bae0:	6023      	str	r3, [r4, #0]
		Sla.Fol = 5;
 800bae2:	6063      	str	r3, [r4, #4]
		break;
 800bae4:	e6a4      	b.n	800b830 <FastestRun+0xe8>
		Sla.Pre = 7;//9;
 800bae6:	4c06      	ldr	r4, [pc, #24]	; (800bb00 <FastestRun+0x3b8>)
		ExploreVelocity=90;
 800bae8:	4a09      	ldr	r2, [pc, #36]	; (800bb10 <FastestRun+0x3c8>)
		Sla.Alpha = 0.014;
 800baea:	4b0a      	ldr	r3, [pc, #40]	; (800bb14 <FastestRun+0x3cc>)
		ExploreVelocity=90;
 800baec:	603a      	str	r2, [r7, #0]
		Sla.Pre = 7;//9;
 800baee:	490a      	ldr	r1, [pc, #40]	; (800bb18 <FastestRun+0x3d0>)
		Sla.Fol = 11;//13;
 800baf0:	4a0a      	ldr	r2, [pc, #40]	; (800bb1c <FastestRun+0x3d4>)
		Sla.Pre = 7;//9;
 800baf2:	6021      	str	r1, [r4, #0]
		Sla.Fol = 11;//13;
 800baf4:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.014;
 800baf6:	60a3      	str	r3, [r4, #8]
		break;
 800baf8:	e69a      	b.n	800b830 <FastestRun+0xe8>
 800bafa:	4c01      	ldr	r4, [pc, #4]	; (800bb00 <FastestRun+0x3b8>)
 800bafc:	e698      	b.n	800b830 <FastestRun+0xe8>
 800bafe:	bf00      	nop
 800bb00:	200089cc 	.word	0x200089cc
 800bb04:	43070000 	.word	0x43070000
 800bb08:	3cdfa440 	.word	0x3cdfa440
 800bb0c:	40a00000 	.word	0x40a00000
 800bb10:	42b40000 	.word	0x42b40000
 800bb14:	3c656042 	.word	0x3c656042
 800bb18:	40e00000 	.word	0x40e00000
 800bb1c:	41300000 	.word	0x41300000

0800bb20 <Explore>:
	}
}
void Explore()
{
 800bb20:	b5f0      	push	{r4, r5, r6, r7, lr}
	IT_mode = EXPLORE;
 800bb22:	4b7f      	ldr	r3, [pc, #508]	; (800bd20 <Explore+0x200>)
{
 800bb24:	b083      	sub	sp, #12
	IT_mode = EXPLORE;
 800bb26:	2206      	movs	r2, #6
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800bb28:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800bb2a:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800bb2c:	f002 fe1e 	bl	800e76c <HAL_Delay>
	int8_t mode=1;
 800bb30:	aa02      	add	r2, sp, #8
 800bb32:	2501      	movs	r5, #1
 800bb34:	f802 5d02 	strb.w	r5, [r2, #-2]!
	ModeSelect( 1, 2, &mode);
 800bb38:	2102      	movs	r1, #2
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	f002 fd18 	bl	800e570 <ModeSelect>
	Signal( mode );
 800bb40:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 800bb44:	f002 fca8 	bl	800e498 <Signal>
	HAL_Delay(100);
 800bb48:	2064      	movs	r0, #100	; 0x64
 800bb4a:	f002 fe0f 	bl	800e76c <HAL_Delay>

	int8_t mode2=1;
 800bb4e:	aa02      	add	r2, sp, #8
	ModeSelect( 1, 4, &mode2);
 800bb50:	2104      	movs	r1, #4
	int8_t mode2=1;
 800bb52:	f802 5d01 	strb.w	r5, [r2, #-1]!
	ModeSelect( 1, 4, &mode2);
 800bb56:	4628      	mov	r0, r5
 800bb58:	f002 fd0a 	bl	800e570 <ModeSelect>
	Signal( mode2 );
 800bb5c:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800bb60:	f002 fc9a 	bl	800e498 <Signal>
	PhotoSwitch();
 800bb64:	f002 fcda 	bl	800e51c <PhotoSwitch>
	//printf("test\r\n");
	//HAL_Delay(2000);

	InitExplore();
 800bb68:	f7ff fb16 	bl	800b198 <InitExplore>

	InitPosition();
 800bb6c:	f7fd f944 	bl	8008df8 <InitPosition>

//	printf("旧式の壁初期化\r\n");
//	wall_init();
//
//	printf("色々セット\r\n");
	TotalPulse[RIGHT] = 0;
 800bb70:	4b6c      	ldr	r3, [pc, #432]	; (800bd24 <Explore+0x204>)
 800bb72:	2400      	movs	r4, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800bb74:	4629      	mov	r1, r5
 800bb76:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bb78:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bb7a:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800bb7c:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bb7e:	f002 fc1d 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bb82:	4629      	mov	r1, r5
 800bb84:	2005      	movs	r0, #5
 800bb86:	f002 fc19 	bl	800e3bc <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	f002 fc15 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bb92:	4621      	mov	r1, r4
 800bb94:	2002      	movs	r0, #2
 800bb96:	f002 fc11 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bb9a:	4621      	mov	r1, r4
 800bb9c:	2003      	movs	r0, #3
 800bb9e:	f002 fc0d 	bl	800e3bc <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800bba2:	4621      	mov	r1, r4
 800bba4:	4620      	mov	r0, r4
 800bba6:	f002 fc09 	bl	800e3bc <PIDChangeFlag>

//	ChangeLED(2);

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode = 'T';
	if(mode == 1)
 800bbaa:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 800bbae:	42ab      	cmp	r3, r5
 800bbb0:	d00e      	beq.n	800bbd0 <Explore+0xb0>
		turn_mode = 'T';
		ExploreVelocity=300;
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	4e5c      	ldr	r6, [pc, #368]	; (800bd28 <Explore+0x208>)
 800bbb6:	bf14      	ite	ne
 800bbb8:	2754      	movne	r7, #84	; 0x54
 800bbba:	2753      	moveq	r7, #83	; 0x53
	}

	switch(mode2)
 800bbbc:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	2b03      	cmp	r3, #3
 800bbc4:	f200 80a4 	bhi.w	800bd10 <Explore+0x1f0>
 800bbc8:	e8df f003 	tbb	[pc, r3]
 800bbcc:	07818d98 	.word	0x07818d98
		ExploreVelocity=300;
 800bbd0:	4e55      	ldr	r6, [pc, #340]	; (800bd28 <Explore+0x208>)
 800bbd2:	4b56      	ldr	r3, [pc, #344]	; (800bd2c <Explore+0x20c>)
 800bbd4:	6033      	str	r3, [r6, #0]
		turn_mode = 'T';
 800bbd6:	2754      	movs	r7, #84	; 0x54
 800bbd8:	e7f0      	b.n	800bbbc <Explore+0x9c>
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
		Sla.Pre = 3;
 800bbda:	4c55      	ldr	r4, [pc, #340]	; (800bd30 <Explore+0x210>)
		ExploreVelocity=300;
 800bbdc:	4a53      	ldr	r2, [pc, #332]	; (800bd2c <Explore+0x20c>)
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800bbde:	4b55      	ldr	r3, [pc, #340]	; (800bd34 <Explore+0x214>)
		ExploreVelocity=300;
 800bbe0:	6032      	str	r2, [r6, #0]
		Sla.Pre = 3;
 800bbe2:	4955      	ldr	r1, [pc, #340]	; (800bd38 <Explore+0x218>)
		Sla.Fol = 5;
 800bbe4:	4a55      	ldr	r2, [pc, #340]	; (800bd3c <Explore+0x21c>)
		Sla.Pre = 3;
 800bbe6:	6021      	str	r1, [r4, #0]
		Sla.Fol = 5;
 800bbe8:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.117;
 800bbea:	60a3      	str	r3, [r4, #8]
	Sla.Pre *=  2/MM_PER_PULSE;
 800bbec:	6820      	ldr	r0, [r4, #0]
 800bbee:	4d54      	ldr	r5, [pc, #336]	; (800bd40 <Explore+0x220>)
 800bbf0:	f7fc fbe2 	bl	80083b8 <__aeabi_f2d>
 800bbf4:	a348      	add	r3, pc, #288	; (adr r3, 800bd18 <Explore+0x1f8>)
 800bbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfa:	f7fc fc35 	bl	8008468 <__aeabi_dmul>
 800bbfe:	f7fc ff2b 	bl	8008a58 <__aeabi_d2f>
 800bc02:	6020      	str	r0, [r4, #0]
	Sla.Fol *=  2/MM_PER_PULSE;
 800bc04:	6860      	ldr	r0, [r4, #4]
 800bc06:	f7fc fbd7 	bl	80083b8 <__aeabi_f2d>
 800bc0a:	a343      	add	r3, pc, #268	; (adr r3, 800bd18 <Explore+0x1f8>)
 800bc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc10:	f7fc fc2a 	bl	8008468 <__aeabi_dmul>
 800bc14:	f7fc ff20 	bl	8008a58 <__aeabi_d2f>
//			HAL_Delay(1000);
//		}
//	Pos.TargetX = X_GOAL_LESSER;
//	Pos.TargetY = Y_GOAL_LESSER;
//	goal_edge_num = two;
	VelocityMax = false;
 800bc18:	494a      	ldr	r1, [pc, #296]	; (800bd44 <Explore+0x224>)
	SearchOrFast = 0;
 800bc1a:	f8df c178 	ldr.w	ip, [pc, #376]	; 800bd94 <Explore+0x274>
	Calc = 0;
 800bc1e:	4a4a      	ldr	r2, [pc, #296]	; (800bd48 <Explore+0x228>)
	Sla.Fol *=  2/MM_PER_PULSE;
 800bc20:	6060      	str	r0, [r4, #4]
	VelocityMax = false;
 800bc22:	2300      	movs	r3, #0
 800bc24:	700b      	strb	r3, [r1, #0]

//	PhotoSwitch();
	Control_Mode=A_VELO_PID; //初期値が0. 減速時に
 800bc26:	4949      	ldr	r1, [pc, #292]	; (800bd4c <Explore+0x22c>)
	Sla.Theta1 = 30*M_PI/180;
 800bc28:	4849      	ldr	r0, [pc, #292]	; (800bd50 <Explore+0x230>)
	SearchOrFast = 0;
 800bc2a:	f8cc 3000 	str.w	r3, [ip]
	Control_Mode=A_VELO_PID; //初期値が0. 減速時に
 800bc2e:	600b      	str	r3, [r1, #0]
	Calc = 0;
 800bc30:	6013      	str	r3, [r2, #0]
	Sla.Theta1 = 30*M_PI/180;
 800bc32:	6120      	str	r0, [r4, #16]
	Sla.Theta2 = 60*M_PI/180;
 800bc34:	4a47      	ldr	r2, [pc, #284]	; (800bd54 <Explore+0x234>)
	Sla.Theta3 = 90*M_PI/180;
 800bc36:	4b48      	ldr	r3, [pc, #288]	; (800bd58 <Explore+0x238>)
//	Pos.Car = north;
//	Pos.NextX = Pos.X;
//	Pos.NextY = Pos.Y + 1;
//	Pos.NextCar = north;

	initSearchData(&my_map, &my_mouse);
 800bc38:	4848      	ldr	r0, [pc, #288]	; (800bd5c <Explore+0x23c>)
	Sla.Theta2 = 60*M_PI/180;
 800bc3a:	6162      	str	r2, [r4, #20]
	initSearchData(&my_map, &my_mouse);
 800bc3c:	4629      	mov	r1, r5
	Sla.Theta3 = 90*M_PI/180;
 800bc3e:	61a3      	str	r3, [r4, #24]
	initSearchData(&my_map, &my_mouse);
 800bc40:	f001 f8bc 	bl	800cdbc <initSearchData>
//	printGoal(&my_mouse);
//	printAllWeight(&my_map, &(my_mouse.goal_lesser)); //この時点で右上が0スタート.　合ってる
	dbc = 1;
 800bc44:	4b46      	ldr	r3, [pc, #280]	; (800bd60 <Explore+0x240>)
	Accel(61.5, ExploreVelocity);
 800bc46:	edd6 0a00 	vldr	s1, [r6]
 800bc4a:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800bd64 <Explore+0x244>

//		//ChangeLED(Pos.Car);
//		KyushinJudge();
//		SelectAction(turn_mode);
//		shiftPos();
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800bc4e:	4e43      	ldr	r6, [pc, #268]	; (800bd5c <Explore+0x23c>)
	dbc = 1;
 800bc50:	2201      	movs	r2, #1
 800bc52:	601a      	str	r2, [r3, #0]
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800bc54:	462c      	mov	r4, r5
	Accel(61.5, ExploreVelocity);
 800bc56:	f7fd fcc7 	bl	80095e8 <Accel>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800bc5a:	e001      	b.n	800bc60 <Explore+0x140>
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800bc5c:	f001 f9b8 	bl	800cfd0 <getNextDirection>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800bc60:	782a      	ldrb	r2, [r5, #0]
 800bc62:	7a2b      	ldrb	r3, [r5, #8]
 800bc64:	429a      	cmp	r2, r3
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800bc66:	4621      	mov	r1, r4
 800bc68:	463a      	mov	r2, r7
 800bc6a:	4630      	mov	r0, r6
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800bc6c:	d8f6      	bhi.n	800bc5c <Explore+0x13c>
 800bc6e:	f895 c002 	ldrb.w	ip, [r5, #2]
 800bc72:	459c      	cmp	ip, r3
 800bc74:	d3f2      	bcc.n	800bc5c <Explore+0x13c>
 800bc76:	7a6b      	ldrb	r3, [r5, #9]
 800bc78:	f895 c001 	ldrb.w	ip, [r5, #1]
 800bc7c:	459c      	cmp	ip, r3
 800bc7e:	d8ed      	bhi.n	800bc5c <Explore+0x13c>
 800bc80:	f895 c003 	ldrb.w	ip, [r5, #3]
 800bc84:	459c      	cmp	ip, r3
 800bc86:	d3e9      	bcc.n	800bc5c <Explore+0x13c>
	}
//	while(1)
//	{
//		TargetVelocity[BODY] = 0;
//	}
	Decel(45, 0);
 800bc88:	eddf 0a37 	vldr	s1, [pc, #220]	; 800bd68 <Explore+0x248>
 800bc8c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800bd6c <Explore+0x24c>


while(1)
{
	//迷路データの出力
	printAllNodeExistence(&my_map);
 800bc90:	4c32      	ldr	r4, [pc, #200]	; (800bd5c <Explore+0x23c>)
	Decel(45, 0);
 800bc92:	f7fd fd2d 	bl	80096f0 <Decel>
	WaitStopAndReset();//これがないとガクンとなる.
 800bc96:	f7fd f921 	bl	8008edc <WaitStopAndReset>
	shiftState(&my_mouse);
 800bc9a:	4829      	ldr	r0, [pc, #164]	; (800bd40 <Explore+0x220>)
 800bc9c:	f7ff fa70 	bl	800b180 <shiftState>
	PIDChangeFlag(A_VELO_PID, 0);
 800bca0:	2100      	movs	r1, #0
 800bca2:	4608      	mov	r0, r1
 800bca4:	f002 fb8a 	bl	800e3bc <PIDChangeFlag>
	Flash_clear_sector1();
 800bca8:	f001 fc4a 	bl	800d540 <Flash_clear_sector1>
	flashStoreNodes();
 800bcac:	f7fe fa1e 	bl	800a0ec <flashStoreNodes>
	Signal(7);
 800bcb0:	2007      	movs	r0, #7
 800bcb2:	f002 fbf1 	bl	800e498 <Signal>
	printAllNodeExistence(&my_map);
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f7fe fc2c 	bl	800a514 <printAllNodeExistence>
	//printAllNode(&my_map); //drawを読み出す
	printMatrix16ValueFromNode(&my_map);
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f7fe fc6b 	bl	800a598 <printMatrix16ValueFromNode>
	printAllWeight(&my_map, &(my_mouse.now.node->pos) );
 800bcc2:	6929      	ldr	r1, [r5, #16]
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	3106      	adds	r1, #6
 800bcc8:	f7fe fada 	bl	800a280 <printAllWeight>
 800bccc:	e7f3      	b.n	800bcb6 <Explore+0x196>
		Sla.Pre = 2;
 800bcce:	4c18      	ldr	r4, [pc, #96]	; (800bd30 <Explore+0x210>)
		ExploreVelocity=240;
 800bcd0:	4a27      	ldr	r2, [pc, #156]	; (800bd70 <Explore+0x250>)
		Sla.Alpha = 0.078;
 800bcd2:	4b28      	ldr	r3, [pc, #160]	; (800bd74 <Explore+0x254>)
		ExploreVelocity=240;
 800bcd4:	6032      	str	r2, [r6, #0]
		Sla.Pre = 2;
 800bcd6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		Sla.Fol = 16;
 800bcda:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
		Sla.Pre = 2;
 800bcde:	6021      	str	r1, [r4, #0]
		Sla.Fol = 16;
 800bce0:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.078;
 800bce2:	60a3      	str	r3, [r4, #8]
		break;
 800bce4:	e782      	b.n	800bbec <Explore+0xcc>
		Sla.Pre = 2;
 800bce6:	4c12      	ldr	r4, [pc, #72]	; (800bd30 <Explore+0x210>)
		ExploreVelocity=180;
 800bce8:	4923      	ldr	r1, [pc, #140]	; (800bd78 <Explore+0x258>)
		Sla.Fol = 16.5;
 800bcea:	4a24      	ldr	r2, [pc, #144]	; (800bd7c <Explore+0x25c>)
		Sla.Alpha = 0.043;
 800bcec:	4b24      	ldr	r3, [pc, #144]	; (800bd80 <Explore+0x260>)
		ExploreVelocity=180;
 800bcee:	6031      	str	r1, [r6, #0]
		Sla.Pre = 2;
 800bcf0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bcf4:	6021      	str	r1, [r4, #0]
		Sla.Fol = 16.5;
 800bcf6:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.043;
 800bcf8:	60a3      	str	r3, [r4, #8]
		break;
 800bcfa:	e777      	b.n	800bbec <Explore+0xcc>
		Sla.Pre = 9;
 800bcfc:	4c0c      	ldr	r4, [pc, #48]	; (800bd30 <Explore+0x210>)
		ExploreVelocity=90;
 800bcfe:	4a21      	ldr	r2, [pc, #132]	; (800bd84 <Explore+0x264>)
		Sla.Alpha = 0.014;
 800bd00:	4b21      	ldr	r3, [pc, #132]	; (800bd88 <Explore+0x268>)
		ExploreVelocity=90;
 800bd02:	6032      	str	r2, [r6, #0]
		Sla.Pre = 9;
 800bd04:	4921      	ldr	r1, [pc, #132]	; (800bd8c <Explore+0x26c>)
		Sla.Fol = 20;
 800bd06:	4a22      	ldr	r2, [pc, #136]	; (800bd90 <Explore+0x270>)
		Sla.Pre = 9;
 800bd08:	6021      	str	r1, [r4, #0]
		Sla.Fol = 20;
 800bd0a:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.014;
 800bd0c:	60a3      	str	r3, [r4, #8]
		break;
 800bd0e:	e76d      	b.n	800bbec <Explore+0xcc>
 800bd10:	4c07      	ldr	r4, [pc, #28]	; (800bd30 <Explore+0x210>)
 800bd12:	e76b      	b.n	800bbec <Explore+0xcc>
 800bd14:	f3af 8000 	nop.w
 800bd18:	9f8f0d54 	.word	0x9f8f0d54
 800bd1c:	409ee54a 	.word	0x409ee54a
 800bd20:	20008970 	.word	0x20008970
 800bd24:	200089b4 	.word	0x200089b4
 800bd28:	20008aa8 	.word	0x20008aa8
 800bd2c:	43960000 	.word	0x43960000
 800bd30:	200089cc 	.word	0x200089cc
 800bd34:	3def9db2 	.word	0x3def9db2
 800bd38:	40400000 	.word	0x40400000
 800bd3c:	40a00000 	.word	0x40a00000
 800bd40:	20008220 	.word	0x20008220
 800bd44:	20008aa6 	.word	0x20008aa6
 800bd48:	20008c24 	.word	0x20008c24
 800bd4c:	20008978 	.word	0x20008978
 800bd50:	3f060a92 	.word	0x3f060a92
 800bd54:	3f860a92 	.word	0x3f860a92
 800bd58:	3fc90fdb 	.word	0x3fc90fdb
 800bd5c:	200083cc 	.word	0x200083cc
 800bd60:	20000224 	.word	0x20000224
 800bd64:	42760000 	.word	0x42760000
 800bd68:	00000000 	.word	0x00000000
 800bd6c:	42340000 	.word	0x42340000
 800bd70:	43700000 	.word	0x43700000
 800bd74:	3d9fbe77 	.word	0x3d9fbe77
 800bd78:	43340000 	.word	0x43340000
 800bd7c:	41840000 	.word	0x41840000
 800bd80:	3d3020c5 	.word	0x3d3020c5
 800bd84:	42b40000 	.word	0x42b40000
 800bd88:	3c656042 	.word	0x3c656042
 800bd8c:	41100000 	.word	0x41100000
 800bd90:	41a00000 	.word	0x41a00000
 800bd94:	20008c20 	.word	0x20008c20

0800bd98 <TestIMU>:
	//合っているか確認する
	printAllNodeExistence(&my_map);
}

void TestIMU()
{
 800bd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IT_mode = IMU_TEST;
 800bd9a:	4b2c      	ldr	r3, [pc, #176]	; (800be4c <TestIMU+0xb4>)
		printf("gyro : %f\r\n",ZGyro);

//		printf("%d, %hd, %f, %f, %f\r\n", m,ZGFilterd,  ZGyro, AngularV, Angle);

		timer1 = 0;
		t = 1;
 800bd9c:	4d2c      	ldr	r5, [pc, #176]	; (800be50 <TestIMU+0xb8>)
	IT_mode = IMU_TEST;
 800bd9e:	2205      	movs	r2, #5
 800bda0:	601a      	str	r2, [r3, #0]
		imu_check = IMU_init();
 800bda2:	f001 fd4b 	bl	800d83c <IMU_init>
		printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bda6:	4601      	mov	r1, r0
 800bda8:	482a      	ldr	r0, [pc, #168]	; (800be54 <TestIMU+0xbc>)
 800bdaa:	f009 fa11 	bl	80151d0 <iprintf>
		imu_check =IMU_init();
 800bdae:	f001 fd45 	bl	800d83c <IMU_init>
		printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bdb2:	4601      	mov	r1, r0
 800bdb4:	4827      	ldr	r0, [pc, #156]	; (800be54 <TestIMU+0xbc>)
 800bdb6:	f009 fa0b 	bl	80151d0 <iprintf>
		HAL_Delay(100);
 800bdba:	2064      	movs	r0, #100	; 0x64
 800bdbc:	f002 fcd6 	bl	800e76c <HAL_Delay>
		ZGyro = ReadIMU(0x37, 0x38);
 800bdc0:	2138      	movs	r1, #56	; 0x38
 800bdc2:	2037      	movs	r0, #55	; 0x37
 800bdc4:	f001 fc1c 	bl	800d600 <ReadIMU>
 800bdc8:	4b23      	ldr	r3, [pc, #140]	; (800be58 <TestIMU+0xc0>)
 800bdca:	ed83 0a00 	vstr	s0, [r3]
		printf("gyro : %f\r\n",ZGyro);
 800bdce:	6818      	ldr	r0, [r3, #0]
 800bdd0:	f7fc faf2 	bl	80083b8 <__aeabi_f2d>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	4820      	ldr	r0, [pc, #128]	; (800be5c <TestIMU+0xc4>)
 800bdda:	f009 f9f9 	bl	80151d0 <iprintf>
		//割り込みを有効化

		printf("timer1 : %d, 角度 : %f\r\n",timer1, Angle);
 800bdde:	4b20      	ldr	r3, [pc, #128]	; (800be60 <TestIMU+0xc8>)
		timer1 = 0;
 800bde0:	4a20      	ldr	r2, [pc, #128]	; (800be64 <TestIMU+0xcc>)
		printf("timer1 : %d, 角度 : %f\r\n",timer1, Angle);
 800bde2:	6818      	ldr	r0, [r3, #0]
		timer1 = 0;
 800bde4:	2400      	movs	r4, #0
		t = 1;
 800bde6:	2301      	movs	r3, #1
		timer1 = 0;
 800bde8:	6014      	str	r4, [r2, #0]
		t = 1;
 800bdea:	602b      	str	r3, [r5, #0]
		printf("timer1 : %d, 角度 : %f\r\n",timer1, Angle);
 800bdec:	f7fc fae4 	bl	80083b8 <__aeabi_f2d>
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	481c      	ldr	r0, [pc, #112]	; (800be68 <TestIMU+0xd0>)
 800bdf8:	f009 f9ea 	bl	80151d0 <iprintf>
		HAL_TIM_Base_Start_IT(&htim1);
 800bdfc:	481b      	ldr	r0, [pc, #108]	; (800be6c <TestIMU+0xd4>)
 800bdfe:	f005 fb9c 	bl	801153a <HAL_TIM_Base_Start_IT>
		while(t == 1) //10s
 800be02:	682b      	ldr	r3, [r5, #0]
 800be04:	2b01      	cmp	r3, #1
 800be06:	d106      	bne.n	800be16 <TestIMU+0x7e>
		{
			printf("\r\n");
 800be08:	4c19      	ldr	r4, [pc, #100]	; (800be70 <TestIMU+0xd8>)
 800be0a:	4620      	mov	r0, r4
 800be0c:	f009 fa68 	bl	80152e0 <puts>
		while(t == 1) //10s
 800be10:	682b      	ldr	r3, [r5, #0]
 800be12:	2b01      	cmp	r3, #1
 800be14:	d0f9      	beq.n	800be0a <TestIMU+0x72>
		}

//		ag = Angle;
		t = 0;
 800be16:	2400      	movs	r4, #0
		HAL_TIM_Base_Stop_IT(&htim1);
 800be18:	4814      	ldr	r0, [pc, #80]	; (800be6c <TestIMU+0xd4>)
		t = 0;
 800be1a:	602c      	str	r4, [r5, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 800be1c:	f005 fbb1 	bl	8011582 <HAL_TIM_Base_Stop_IT>
		HAL_Delay(1000);
 800be20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800be24:	f002 fca2 	bl	800e76c <HAL_Delay>
 800be28:	4d12      	ldr	r5, [pc, #72]	; (800be74 <TestIMU+0xdc>)



			for(int i=0; i < 5000; i++) //0.007495 / 5000
				printf("%d, %f\r\n",i, debugVL[i]); //-0.001331
 800be2a:	4f13      	ldr	r7, [pc, #76]	; (800be78 <TestIMU+0xe0>)
			for(int i=0; i < 5000; i++) //0.007495 / 5000
 800be2c:	f241 3688 	movw	r6, #5000	; 0x1388
				printf("%d, %f\r\n",i, debugVL[i]); //-0.001331
 800be30:	f855 0b04 	ldr.w	r0, [r5], #4
 800be34:	f7fc fac0 	bl	80083b8 <__aeabi_f2d>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4638      	mov	r0, r7
 800be3e:	4621      	mov	r1, r4
			for(int i=0; i < 5000; i++) //0.007495 / 5000
 800be40:	3401      	adds	r4, #1
				printf("%d, %f\r\n",i, debugVL[i]); //-0.001331
 800be42:	f009 f9c5 	bl	80151d0 <iprintf>
			for(int i=0; i < 5000; i++) //0.007495 / 5000
 800be46:	42b4      	cmp	r4, r6
 800be48:	d1f2      	bne.n	800be30 <TestIMU+0x98>
 800be4a:	e7fe      	b.n	800be4a <TestIMU+0xb2>
 800be4c:	20008970 	.word	0x20008970
 800be50:	2000896c 	.word	0x2000896c
 800be54:	08018d5c 	.word	0x08018d5c
 800be58:	20007fe0 	.word	0x20007fe0
 800be5c:	08018d78 	.word	0x08018d78
 800be60:	20007f34 	.word	0x20007f34
 800be64:	2000897c 	.word	0x2000897c
 800be68:	08018d84 	.word	0x08018d84
 800be6c:	20008e70 	.word	0x20008e70
 800be70:	08018f40 	.word	0x08018f40
 800be74:	20000228 	.word	0x20000228
 800be78:	08018da0 	.word	0x08018da0

0800be7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800be7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be80:	2400      	movs	r4, #0
{
 800be82:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be84:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800be88:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800be8c:	4b45      	ldr	r3, [pc, #276]	; (800bfa4 <MX_GPIO_Init+0x128>)
 800be8e:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be90:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800be92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800be94:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800bfb4 <MX_GPIO_Init+0x138>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800be98:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800bfb8 <MX_GPIO_Init+0x13c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800be9c:	4f42      	ldr	r7, [pc, #264]	; (800bfa8 <MX_GPIO_Init+0x12c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800be9e:	4e43      	ldr	r6, [pc, #268]	; (800bfac <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bea0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bea4:	631a      	str	r2, [r3, #48]	; 0x30
 800bea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bea8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800beac:	9200      	str	r2, [sp, #0]
 800beae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800beb0:	9401      	str	r4, [sp, #4]
 800beb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800beb4:	f042 0204 	orr.w	r2, r2, #4
 800beb8:	631a      	str	r2, [r3, #48]	; 0x30
 800beba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bebc:	f002 0204 	and.w	r2, r2, #4
 800bec0:	9201      	str	r2, [sp, #4]
 800bec2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bec4:	9402      	str	r4, [sp, #8]
 800bec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bec8:	f042 0201 	orr.w	r2, r2, #1
 800becc:	631a      	str	r2, [r3, #48]	; 0x30
 800bece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bed0:	f002 0201 	and.w	r2, r2, #1
 800bed4:	9202      	str	r2, [sp, #8]
 800bed6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bed8:	9403      	str	r4, [sp, #12]
 800beda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bedc:	f042 0202 	orr.w	r2, r2, #2
 800bee0:	631a      	str	r2, [r3, #48]	; 0x30
 800bee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bee4:	f002 0202 	and.w	r2, r2, #2
 800bee8:	9203      	str	r2, [sp, #12]
 800beea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800beec:	9404      	str	r4, [sp, #16]
 800beee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bef0:	f042 0208 	orr.w	r2, r2, #8
 800bef4:	631a      	str	r2, [r3, #48]	; 0x30
 800bef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef8:	f003 0308 	and.w	r3, r3, #8
 800befc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800befe:	4622      	mov	r2, r4
 800bf00:	4648      	mov	r0, r9
 800bf02:	2105      	movs	r1, #5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bf04:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800bf06:	f004 f905 	bl	8010114 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800bf0a:	4622      	mov	r2, r4
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	f44f 7140 	mov.w	r1, #768	; 0x300
 800bf12:	f004 f8ff 	bl	8010114 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800bf16:	4622      	mov	r2, r4
 800bf18:	4638      	mov	r0, r7
 800bf1a:	2104      	movs	r1, #4
 800bf1c:	f004 f8fa 	bl	8010114 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800bf20:	4622      	mov	r2, r4
 800bf22:	4630      	mov	r0, r6
 800bf24:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bf28:	f004 f8f4 	bl	8010114 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf2c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf2e:	4648      	mov	r0, r9
 800bf30:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800bf32:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf34:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf38:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf3c:	f003 ff50 	bl	800fde0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bf40:	4b1b      	ldr	r3, [pc, #108]	; (800bfb0 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf42:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800bf44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf48:	a905      	add	r1, sp, #20
 800bf4a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bf4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf50:	f003 ff46 	bl	800fde0 <HAL_GPIO_Init>
  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bf54:	4640      	mov	r0, r8
 800bf56:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800bf58:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bf5c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf5e:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf62:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bf64:	f003 ff3c 	bl	800fde0 <HAL_GPIO_Init>
  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bf68:	4638      	mov	r0, r7
 800bf6a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800bf6c:	2304      	movs	r3, #4
 800bf6e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf70:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf74:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bf76:	f003 ff33 	bl	800fde0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bf7a:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf7e:	a905      	add	r1, sp, #20
 800bf80:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bf82:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf84:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf88:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf8a:	f003 ff29 	bl	800fde0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800bf8e:	4622      	mov	r2, r4
 800bf90:	4621      	mov	r1, r4
 800bf92:	2028      	movs	r0, #40	; 0x28
 800bf94:	f003 f925 	bl	800f1e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800bf98:	2028      	movs	r0, #40	; 0x28
 800bf9a:	f003 f93e 	bl	800f21a <HAL_NVIC_EnableIRQ>

}
 800bf9e:	b00b      	add	sp, #44	; 0x2c
 800bfa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfa4:	40023800 	.word	0x40023800
 800bfa8:	40020c00 	.word	0x40020c00
 800bfac:	40020400 	.word	0x40020400
 800bfb0:	10110000 	.word	0x10110000
 800bfb4:	40020000 	.word	0x40020000
 800bfb8:	40020800 	.word	0x40020800

0800bfbc <MX_DMA_Init>:
{
 800bfbc:	b510      	push	{r4, lr}
 800bfbe:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800bfc0:	2400      	movs	r4, #0
 800bfc2:	4b0f      	ldr	r3, [pc, #60]	; (800c000 <MX_DMA_Init+0x44>)
 800bfc4:	9401      	str	r4, [sp, #4]
 800bfc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfc8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800bfcc:	631a      	str	r2, [r3, #48]	; 0x30
 800bfce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800bfd8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800bfda:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800bfdc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800bfde:	f003 f900 	bl	800f1e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800bfe2:	2038      	movs	r0, #56	; 0x38
 800bfe4:	f003 f919 	bl	800f21a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800bfe8:	4622      	mov	r2, r4
 800bfea:	4621      	mov	r1, r4
 800bfec:	203a      	movs	r0, #58	; 0x3a
 800bfee:	f003 f8f8 	bl	800f1e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800bff2:	203a      	movs	r0, #58	; 0x3a
}
 800bff4:	b002      	add	sp, #8
 800bff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800bffa:	f003 b90e 	b.w	800f21a <HAL_NVIC_EnableIRQ>
 800bffe:	bf00      	nop
 800c000:	40023800 	.word	0x40023800

0800c004 <MX_ADC1_Init>:
{
 800c004:	b570      	push	{r4, r5, r6, lr}
  hadc1.Instance = ADC1;
 800c006:	4c21      	ldr	r4, [pc, #132]	; (800c08c <MX_ADC1_Init+0x88>)
 800c008:	4b21      	ldr	r3, [pc, #132]	; (800c090 <MX_ADC1_Init+0x8c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c00a:	4a22      	ldr	r2, [pc, #136]	; (800c094 <MX_ADC1_Init+0x90>)
  hadc1.Instance = ADC1;
 800c00c:	6023      	str	r3, [r4, #0]
{
 800c00e:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800c010:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 800c012:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c014:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc1.Init.NbrOfConversion = 3;
 800c018:	2603      	movs	r6, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c01a:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c01c:	6061      	str	r1, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c01e:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c020:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c022:	9300      	str	r3, [sp, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c024:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c028:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c02a:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c02c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800c030:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ENABLE;
 800c032:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800c034:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800c036:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c03a:	6165      	str	r5, [r4, #20]
  hadc1.Init.NbrOfConversion = 3;
 800c03c:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c03e:	f002 fbb7 	bl	800e7b0 <HAL_ADC_Init>
 800c042:	b108      	cbz	r0, 800c048 <MX_ADC1_Init+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c044:	b672      	cpsid	i
 800c046:	e7fe      	b.n	800c046 <MX_ADC1_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_10;
 800c048:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c04a:	4669      	mov	r1, sp
 800c04c:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800c04e:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c050:	9602      	str	r6, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_10;
 800c052:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c054:	f002 fd4a 	bl	800eaec <HAL_ADC_ConfigChannel>
 800c058:	b108      	cbz	r0, 800c05e <MX_ADC1_Init+0x5a>
 800c05a:	b672      	cpsid	i
 800c05c:	e7fe      	b.n	800c05c <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_14;
 800c05e:	220e      	movs	r2, #14
  sConfig.Rank = 2;
 800c060:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c062:	4669      	mov	r1, sp
 800c064:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 800c066:	9200      	str	r2, [sp, #0]
  sConfig.Rank = 2;
 800c068:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c06a:	f002 fd3f 	bl	800eaec <HAL_ADC_ConfigChannel>
 800c06e:	b108      	cbz	r0, 800c074 <MX_ADC1_Init+0x70>
 800c070:	b672      	cpsid	i
 800c072:	e7fe      	b.n	800c072 <MX_ADC1_Init+0x6e>
  sConfig.Channel = ADC_CHANNEL_9;
 800c074:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c076:	4669      	mov	r1, sp
 800c078:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 800c07a:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c07e:	f002 fd35 	bl	800eaec <HAL_ADC_ConfigChannel>
 800c082:	b108      	cbz	r0, 800c088 <MX_ADC1_Init+0x84>
 800c084:	b672      	cpsid	i
 800c086:	e7fe      	b.n	800c086 <MX_ADC1_Init+0x82>
}
 800c088:	b004      	add	sp, #16
 800c08a:	bd70      	pop	{r4, r5, r6, pc}
 800c08c:	20008d88 	.word	0x20008d88
 800c090:	40012000 	.word	0x40012000
 800c094:	0f000001 	.word	0x0f000001

0800c098 <MX_ADC2_Init>:
{
 800c098:	b570      	push	{r4, r5, r6, lr}
  hadc2.Instance = ADC2;
 800c09a:	4c1c      	ldr	r4, [pc, #112]	; (800c10c <MX_ADC2_Init+0x74>)
 800c09c:	4b1c      	ldr	r3, [pc, #112]	; (800c110 <MX_ADC2_Init+0x78>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c09e:	4a1d      	ldr	r2, [pc, #116]	; (800c114 <MX_ADC2_Init+0x7c>)
  hadc2.Instance = ADC2;
 800c0a0:	6023      	str	r3, [r4, #0]
{
 800c0a2:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800c0a4:	2300      	movs	r3, #0
  hadc2.Init.ScanConvMode = ENABLE;
 800c0a6:	2501      	movs	r5, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c0a8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc2.Init.NbrOfConversion = 2;
 800c0ac:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800c0ae:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c0b0:	6061      	str	r1, [r4, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c0b2:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800c0b4:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c0b6:	9300      	str	r3, [sp, #0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800c0b8:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c0bc:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c0be:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c0c0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800c0c4:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ENABLE;
 800c0c6:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800c0c8:	7625      	strb	r5, [r4, #24]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800c0ca:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c0ce:	6165      	str	r5, [r4, #20]
  hadc2.Init.NbrOfConversion = 2;
 800c0d0:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800c0d2:	f002 fb6d 	bl	800e7b0 <HAL_ADC_Init>
 800c0d6:	b108      	cbz	r0, 800c0dc <MX_ADC2_Init+0x44>
 800c0d8:	b672      	cpsid	i
 800c0da:	e7fe      	b.n	800c0da <MX_ADC2_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_11;
 800c0dc:	220b      	movs	r2, #11
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c0de:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c0e0:	4669      	mov	r1, sp
 800c0e2:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800c0e4:	9501      	str	r5, [sp, #4]
  sConfig.Channel = ADC_CHANNEL_11;
 800c0e6:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c0e8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c0ea:	f002 fcff 	bl	800eaec <HAL_ADC_ConfigChannel>
 800c0ee:	b108      	cbz	r0, 800c0f4 <MX_ADC2_Init+0x5c>
 800c0f0:	b672      	cpsid	i
 800c0f2:	e7fe      	b.n	800c0f2 <MX_ADC2_Init+0x5a>
  sConfig.Channel = ADC_CHANNEL_15;
 800c0f4:	230f      	movs	r3, #15
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c0f6:	4669      	mov	r1, sp
 800c0f8:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_15;
 800c0fa:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c0fe:	f002 fcf5 	bl	800eaec <HAL_ADC_ConfigChannel>
 800c102:	b108      	cbz	r0, 800c108 <MX_ADC2_Init+0x70>
 800c104:	b672      	cpsid	i
 800c106:	e7fe      	b.n	800c106 <MX_ADC2_Init+0x6e>
}
 800c108:	b004      	add	sp, #16
 800c10a:	bd70      	pop	{r4, r5, r6, pc}
 800c10c:	20008ca8 	.word	0x20008ca8
 800c110:	40012100 	.word	0x40012100
 800c114:	0f000001 	.word	0x0f000001

0800c118 <MX_TIM3_Init>:
{
 800c118:	b530      	push	{r4, r5, lr}
 800c11a:	b08d      	sub	sp, #52	; 0x34
  htim3.Instance = TIM3;
 800c11c:	4c14      	ldr	r4, [pc, #80]	; (800c170 <MX_TIM3_Init+0x58>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 800c11e:	2220      	movs	r2, #32
 800c120:	2100      	movs	r1, #0
 800c122:	a804      	add	r0, sp, #16
 800c124:	f007 fd55 	bl	8013bd2 <memset>
  htim3.Instance = TIM3;
 800c128:	4b12      	ldr	r3, [pc, #72]	; (800c174 <MX_TIM3_Init+0x5c>)
 800c12a:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 60000-1;
 800c12c:	f64e 225f 	movw	r2, #59999	; 0xea5f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c130:	2300      	movs	r3, #0
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c132:	2503      	movs	r5, #3
  htim3.Init.Period = 60000-1;
 800c134:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c136:	4620      	mov	r0, r4
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c138:	2201      	movs	r2, #1
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c13a:	a903      	add	r1, sp, #12
  htim3.Init.Prescaler = 0;
 800c13c:	6063      	str	r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c13e:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c140:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c142:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c144:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c146:	9302      	str	r3, [sp, #8]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c148:	9503      	str	r5, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c14a:	9205      	str	r2, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c14c:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c14e:	f005 fc63 	bl	8011a18 <HAL_TIM_Encoder_Init>
 800c152:	b108      	cbz	r0, 800c158 <MX_TIM3_Init+0x40>
 800c154:	b672      	cpsid	i
 800c156:	e7fe      	b.n	800c156 <MX_TIM3_Init+0x3e>
 800c158:	4603      	mov	r3, r0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c15a:	a901      	add	r1, sp, #4
 800c15c:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c15e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c162:	f006 fc51 	bl	8012a08 <HAL_TIMEx_MasterConfigSynchronization>
 800c166:	b108      	cbz	r0, 800c16c <MX_TIM3_Init+0x54>
 800c168:	b672      	cpsid	i
 800c16a:	e7fe      	b.n	800c16a <MX_TIM3_Init+0x52>
}
 800c16c:	b00d      	add	sp, #52	; 0x34
 800c16e:	bd30      	pop	{r4, r5, pc}
 800c170:	20008cf0 	.word	0x20008cf0
 800c174:	40000400 	.word	0x40000400

0800c178 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 800c178:	4b0a      	ldr	r3, [pc, #40]	; (800c1a4 <MX_USART1_UART_Init+0x2c>)
 800c17a:	4a0b      	ldr	r2, [pc, #44]	; (800c1a8 <MX_USART1_UART_Init+0x30>)
{
 800c17c:	b510      	push	{r4, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c17e:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 800c180:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800c182:	f44f 5416 	mov.w	r4, #9600	; 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c186:	2200      	movs	r2, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c188:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 9600;
 800c18a:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c18c:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c18e:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c192:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c194:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c198:	f006 fd3d 	bl	8012c16 <HAL_UART_Init>
 800c19c:	b108      	cbz	r0, 800c1a2 <MX_USART1_UART_Init+0x2a>
 800c19e:	b672      	cpsid	i
 800c1a0:	e7fe      	b.n	800c1a0 <MX_USART1_UART_Init+0x28>
}
 800c1a2:	bd10      	pop	{r4, pc}
 800c1a4:	20008dd0 	.word	0x20008dd0
 800c1a8:	40011000 	.word	0x40011000

0800c1ac <__io_putchar>:
PUTCHAR_PROTOTYPE {
 800c1ac:	b500      	push	{lr}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800c1b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
PUTCHAR_PROTOTYPE {
 800c1b6:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	4803      	ldr	r0, [pc, #12]	; (800c1cc <__io_putchar+0x20>)
 800c1be:	f006 fd77 	bl	8012cb0 <HAL_UART_Transmit>
}
 800c1c2:	9801      	ldr	r0, [sp, #4]
 800c1c4:	b003      	add	sp, #12
 800c1c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1ca:	bf00      	nop
 800c1cc:	20008dd0 	.word	0x20008dd0

0800c1d0 <__io_getchar>:
int __io_getchar(void) {
 800c1d0:	b510      	push	{r4, lr}
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800c1d2:	4c07      	ldr	r4, [pc, #28]	; (800c1f0 <__io_getchar+0x20>)
int __io_getchar(void) {
 800c1d4:	b082      	sub	sp, #8
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800c1d6:	230a      	movs	r3, #10
 800c1d8:	2201      	movs	r2, #1
 800c1da:	f10d 0107 	add.w	r1, sp, #7
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f006 fdff 	bl	8012de2 <HAL_UART_Receive>
while(Status != HAL_OK)
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d1f6      	bne.n	800c1d6 <__io_getchar+0x6>
}
 800c1e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c1ec:	b002      	add	sp, #8
 800c1ee:	bd10      	pop	{r4, pc}
 800c1f0:	20008dd0 	.word	0x20008dd0

0800c1f4 <SystemClock_Config>:
{
 800c1f4:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c1f6:	2300      	movs	r3, #0
{
 800c1f8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c1fa:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800c1fe:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c202:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800c206:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c20a:	4920      	ldr	r1, [pc, #128]	; (800c28c <SystemClock_Config+0x98>)
 800c20c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c20e:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c210:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c212:	4a1f      	ldr	r2, [pc, #124]	; (800c290 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800c214:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800c218:	6408      	str	r0, [r1, #64]	; 0x40
 800c21a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c21c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800c220:	9101      	str	r1, [sp, #4]
 800c222:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c224:	9302      	str	r3, [sp, #8]
 800c226:	6813      	ldr	r3, [r2, #0]
 800c228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c22c:	6013      	str	r3, [r2, #0]
 800c22e:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c230:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c238:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c23a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c23c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c23e:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c240:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c244:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c246:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c248:	22a8      	movs	r2, #168	; 0xa8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c24a:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c24c:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c24e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c250:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c252:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c256:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c258:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c25a:	f003 ff8d 	bl	8010178 <HAL_RCC_OscConfig>
 800c25e:	b108      	cbz	r0, 800c264 <SystemClock_Config+0x70>
 800c260:	b672      	cpsid	i
 800c262:	e7fe      	b.n	800c262 <SystemClock_Config+0x6e>
 800c264:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c266:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c268:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c26c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c270:	a803      	add	r0, sp, #12
 800c272:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c274:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c276:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c278:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c27a:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c27e:	f004 f9eb 	bl	8010658 <HAL_RCC_ClockConfig>
 800c282:	b108      	cbz	r0, 800c288 <SystemClock_Config+0x94>
 800c284:	b672      	cpsid	i
 800c286:	e7fe      	b.n	800c286 <SystemClock_Config+0x92>
}
 800c288:	b014      	add	sp, #80	; 0x50
 800c28a:	bd70      	pop	{r4, r5, r6, pc}
 800c28c:	40023800 	.word	0x40023800
 800c290:	40007000 	.word	0x40007000

0800c294 <main>:
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 800c298:	f002 f9f6 	bl	800e688 <HAL_Init>
  MX_GPIO_Init();
 800c29c:	f7ff fdee 	bl	800be7c <MX_GPIO_Init>
  MX_DMA_Init();
 800c2a0:	f7ff fe8c 	bl	800bfbc <MX_DMA_Init>
  MX_ADC1_Init();
 800c2a4:	f7ff feae 	bl	800c004 <MX_ADC1_Init>
  MX_ADC2_Init();
 800c2a8:	f7ff fef6 	bl	800c098 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800c2ac:	f7ff ff64 	bl	800c178 <MX_USART1_UART_Init>
	ADCStart();
 800c2b0:	f001 f820 	bl	800d2f4 <ADCStart>
	MX_TIM3_Init();
 800c2b4:	f7ff ff30 	bl	800c118 <MX_TIM3_Init>
	BatteryCheck( (int)adc1[2] );
 800c2b8:	4ba0      	ldr	r3, [pc, #640]	; (800c53c <main+0x2a8>)
  htim2.Instance = TIM2;
 800c2ba:	4ca1      	ldr	r4, [pc, #644]	; (800c540 <main+0x2ac>)
	BatteryCheck( (int)adc1[2] );
 800c2bc:	6898      	ldr	r0, [r3, #8]
 800c2be:	f002 f8fd 	bl	800e4bc <BatteryCheck>
	ADCStop();
 800c2c2:	f001 f837 	bl	800d334 <ADCStop>
	ModeSelect(0, 7, &startup_mode);
 800c2c6:	f10d 0207 	add.w	r2, sp, #7
 800c2ca:	2107      	movs	r1, #7
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	f002 f94f 	bl	800e570 <ModeSelect>
	Signal( startup_mode );
 800c2d2:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800c2d6:	f002 f8df 	bl	800e498 <Signal>
  htim2.Init.Period = 4200-1;
 800c2da:	f241 0667 	movw	r6, #4199	; 0x1067
  SystemClock_Config();
 800c2de:	f7ff ff89 	bl	800c1f4 <SystemClock_Config>
  MX_GPIO_Init();
 800c2e2:	f7ff fdcb 	bl	800be7c <MX_GPIO_Init>
  MX_DMA_Init();
 800c2e6:	f7ff fe69 	bl	800bfbc <MX_DMA_Init>
  MX_ADC1_Init();
 800c2ea:	f7ff fe8b 	bl	800c004 <MX_ADC1_Init>
  MX_ADC2_Init();
 800c2ee:	f7ff fed3 	bl	800c098 <MX_ADC2_Init>
  MX_TIM3_Init();
 800c2f2:	f7ff ff11 	bl	800c118 <MX_TIM3_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c2f6:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 800c2f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c2fc:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 800c2fe:	6022      	str	r2, [r4, #0]
  htim2.Init.Prescaler = 0;
 800c300:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c302:	9308      	str	r3, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c304:	9304      	str	r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c306:	930f      	str	r3, [sp, #60]	; 0x3c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c308:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c30a:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c30c:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c30e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800c312:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c314:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c316:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800c31a:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 800c31e:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  htim2.Init.Period = 4200-1;
 800c322:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c324:	f005 f8de 	bl	80114e4 <HAL_TIM_Base_Init>
 800c328:	b108      	cbz	r0, 800c32e <main+0x9a>
 800c32a:	b672      	cpsid	i
 800c32c:	e7fe      	b.n	800c32c <main+0x98>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c32e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c332:	a908      	add	r1, sp, #32
 800c334:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c336:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c338:	f005 feac 	bl	8012094 <HAL_TIM_ConfigClockSource>
 800c33c:	b108      	cbz	r0, 800c342 <main+0xae>
 800c33e:	b672      	cpsid	i
 800c340:	e7fe      	b.n	800c340 <main+0xac>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c342:	4620      	mov	r0, r4
 800c344:	f005 fa9c 	bl	8011880 <HAL_TIM_PWM_Init>
 800c348:	4603      	mov	r3, r0
 800c34a:	b108      	cbz	r0, 800c350 <main+0xbc>
 800c34c:	b672      	cpsid	i
 800c34e:	e7fe      	b.n	800c34e <main+0xba>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c350:	a904      	add	r1, sp, #16
 800c352:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c354:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c358:	f006 fb56 	bl	8012a08 <HAL_TIMEx_MasterConfigSynchronization>
 800c35c:	b108      	cbz	r0, 800c362 <main+0xce>
 800c35e:	b672      	cpsid	i
 800c360:	e7fe      	b.n	800c360 <main+0xcc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c362:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c364:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c368:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c36a:	220c      	movs	r2, #12
 800c36c:	a90f      	add	r1, sp, #60	; 0x3c
 800c36e:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c370:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c372:	f005 fdc9 	bl	8011f08 <HAL_TIM_PWM_ConfigChannel>
 800c376:	4605      	mov	r5, r0
 800c378:	b108      	cbz	r0, 800c37e <main+0xea>
 800c37a:	b672      	cpsid	i
 800c37c:	e7fe      	b.n	800c37c <main+0xe8>
  HAL_TIM_MspPostInit(&htim2);
 800c37e:	4620      	mov	r0, r4
 800c380:	f000 fbc0 	bl	800cb04 <HAL_TIM_MspPostInit>
  hspi3.Instance = SPI3;
 800c384:	4b6f      	ldr	r3, [pc, #444]	; (800c544 <main+0x2b0>)
 800c386:	4a70      	ldr	r2, [pc, #448]	; (800c548 <main+0x2b4>)
 800c388:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c38a:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c38e:	2202      	movs	r2, #2
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c390:	6059      	str	r1, [r3, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c392:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c394:	2101      	movs	r1, #1
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c396:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c39a:	6159      	str	r1, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c39c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c39e:	2128      	movs	r1, #40	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800c3a0:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c3a2:	4618      	mov	r0, r3
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800c3a4:	e9c3 5502 	strd	r5, r5, [r3, #8]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800c3a8:	e9c3 5508 	strd	r5, r5, [r3, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c3ac:	629d      	str	r5, [r3, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c3ae:	61d9      	str	r1, [r3, #28]
  hspi3.Init.CRCPolynomial = 10;
 800c3b0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c3b2:	f004 fb43 	bl	8010a3c <HAL_SPI_Init>
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	b108      	cbz	r0, 800c3be <main+0x12a>
 800c3ba:	b672      	cpsid	i
 800c3bc:	e7fe      	b.n	800c3bc <main+0x128>
  htim5.Instance = TIM5;
 800c3be:	4d63      	ldr	r5, [pc, #396]	; (800c54c <main+0x2b8>)
  MX_USART1_UART_Init();
 800c3c0:	f7ff feda 	bl	800c178 <MX_USART1_UART_Init>
  htim5.Instance = TIM5;
 800c3c4:	4b62      	ldr	r3, [pc, #392]	; (800c550 <main+0x2bc>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c3c6:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c3c8:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c3ca:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800c3ce:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c3d2:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c3d6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800c3da:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 800c3de:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c3e2:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim5.Init.Period = 4200-1;
 800c3e6:	60ee      	str	r6, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c3e8:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c3ea:	61ac      	str	r4, [r5, #24]
  htim5.Instance = TIM5;
 800c3ec:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c3ee:	f005 f879 	bl	80114e4 <HAL_TIM_Base_Init>
 800c3f2:	b108      	cbz	r0, 800c3f8 <main+0x164>
 800c3f4:	b672      	cpsid	i
 800c3f6:	e7fe      	b.n	800c3f6 <main+0x162>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c3f8:	a908      	add	r1, sp, #32
 800c3fa:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c3fc:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c3fe:	f005 fe49 	bl	8012094 <HAL_TIM_ConfigClockSource>
 800c402:	b108      	cbz	r0, 800c408 <main+0x174>
 800c404:	b672      	cpsid	i
 800c406:	e7fe      	b.n	800c406 <main+0x172>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800c408:	4628      	mov	r0, r5
 800c40a:	f005 fa39 	bl	8011880 <HAL_TIM_PWM_Init>
 800c40e:	4603      	mov	r3, r0
 800c410:	b108      	cbz	r0, 800c416 <main+0x182>
 800c412:	b672      	cpsid	i
 800c414:	e7fe      	b.n	800c414 <main+0x180>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c416:	4628      	mov	r0, r5
 800c418:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c41a:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c41e:	f006 faf3 	bl	8012a08 <HAL_TIMEx_MasterConfigSynchronization>
 800c422:	b108      	cbz	r0, 800c428 <main+0x194>
 800c424:	b672      	cpsid	i
 800c426:	e7fe      	b.n	800c426 <main+0x192>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c428:	2060      	movs	r0, #96	; 0x60
  sConfigOC.Pulse = 0;
 800c42a:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c42c:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c42e:	2204      	movs	r2, #4
 800c430:	a90f      	add	r1, sp, #60	; 0x3c
 800c432:	4846      	ldr	r0, [pc, #280]	; (800c54c <main+0x2b8>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c434:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c436:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c43a:	f005 fd65 	bl	8011f08 <HAL_TIM_PWM_ConfigChannel>
 800c43e:	4605      	mov	r5, r0
 800c440:	b108      	cbz	r0, 800c446 <main+0x1b2>
 800c442:	b672      	cpsid	i
 800c444:	e7fe      	b.n	800c444 <main+0x1b0>
  HAL_TIM_MspPostInit(&htim5);
 800c446:	4841      	ldr	r0, [pc, #260]	; (800c54c <main+0x2b8>)
  htim4.Instance = TIM4;
 800c448:	4c42      	ldr	r4, [pc, #264]	; (800c554 <main+0x2c0>)
  HAL_TIM_MspPostInit(&htim5);
 800c44a:	f000 fb5b 	bl	800cb04 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800c44e:	2220      	movs	r2, #32
 800c450:	4629      	mov	r1, r5
 800c452:	a810      	add	r0, sp, #64	; 0x40
 800c454:	f007 fbbd 	bl	8013bd2 <memset>
  htim4.Instance = TIM4;
 800c458:	4b3f      	ldr	r3, [pc, #252]	; (800c558 <main+0x2c4>)
 800c45a:	6023      	str	r3, [r4, #0]
  htim4.Init.Period = 60000-1;
 800c45c:	f64e 215f 	movw	r1, #59999	; 0xea5f
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c460:	2301      	movs	r3, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c462:	2203      	movs	r2, #3
  htim4.Init.Period = 60000-1;
 800c464:	60e1      	str	r1, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800c466:	4620      	mov	r0, r4
 800c468:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c46a:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c46c:	9315      	str	r3, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c46e:	9508      	str	r5, [sp, #32]
 800c470:	9509      	str	r5, [sp, #36]	; 0x24
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c472:	e9c4 5501 	strd	r5, r5, [r4, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c476:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c478:	61a5      	str	r5, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c47a:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800c47c:	f005 facc 	bl	8011a18 <HAL_TIM_Encoder_Init>
 800c480:	4603      	mov	r3, r0
 800c482:	b108      	cbz	r0, 800c488 <main+0x1f4>
 800c484:	b672      	cpsid	i
 800c486:	e7fe      	b.n	800c486 <main+0x1f2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800c488:	4620      	mov	r0, r4
 800c48a:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c48c:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800c490:	f006 faba 	bl	8012a08 <HAL_TIMEx_MasterConfigSynchronization>
 800c494:	4604      	mov	r4, r0
 800c496:	b108      	cbz	r0, 800c49c <main+0x208>
 800c498:	b672      	cpsid	i
 800c49a:	e7fe      	b.n	800c49a <main+0x206>
  htim8.Instance = TIM8;
 800c49c:	4d2f      	ldr	r5, [pc, #188]	; (800c55c <main+0x2c8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c49e:	9004      	str	r0, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c4a0:	4601      	mov	r1, r0
 800c4a2:	2220      	movs	r2, #32
 800c4a4:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c4a6:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800c4aa:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c4ac:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c4ae:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800c4b2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800c4b6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800c4ba:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c4bc:	9403      	str	r4, [sp, #12]
  htim8.Init.Prescaler = 168-1;
 800c4be:	26a7      	movs	r6, #167	; 0xa7
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c4c0:	f007 fb87 	bl	8013bd2 <memset>
  htim8.Instance = TIM8;
 800c4c4:	4926      	ldr	r1, [pc, #152]	; (800c560 <main+0x2cc>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c4c6:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 50-1;
 800c4c8:	2231      	movs	r2, #49	; 0x31
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c4ca:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c4cc:	4628      	mov	r0, r5
  htim8.Init.RepetitionCounter = 0;
 800c4ce:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim8.Instance = TIM8;
 800c4d2:	6029      	str	r1, [r5, #0]
  htim8.Init.Period = 50-1;
 800c4d4:	60ea      	str	r2, [r5, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c4d6:	61ab      	str	r3, [r5, #24]
  htim8.Init.Prescaler = 168-1;
 800c4d8:	606e      	str	r6, [r5, #4]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c4da:	f005 f803 	bl	80114e4 <HAL_TIM_Base_Init>
 800c4de:	b108      	cbz	r0, 800c4e4 <main+0x250>
 800c4e0:	b672      	cpsid	i
 800c4e2:	e7fe      	b.n	800c4e2 <main+0x24e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c4e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800c4e8:	a904      	add	r1, sp, #16
 800c4ea:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c4ec:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800c4ee:	f005 fdd1 	bl	8012094 <HAL_TIM_ConfigClockSource>
 800c4f2:	b108      	cbz	r0, 800c4f8 <main+0x264>
 800c4f4:	b672      	cpsid	i
 800c4f6:	e7fe      	b.n	800c4f6 <main+0x262>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	f005 f86d 	bl	80115d8 <HAL_TIM_OC_Init>
 800c4fe:	4603      	mov	r3, r0
 800c500:	b108      	cbz	r0, 800c506 <main+0x272>
 800c502:	b672      	cpsid	i
 800c504:	e7fe      	b.n	800c504 <main+0x270>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c506:	a902      	add	r1, sp, #8
 800c508:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c50a:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c50e:	f006 fa7b 	bl	8012a08 <HAL_TIMEx_MasterConfigSynchronization>
 800c512:	b108      	cbz	r0, 800c518 <main+0x284>
 800c514:	b672      	cpsid	i
 800c516:	e7fe      	b.n	800c516 <main+0x282>
  sConfigOC.Pulse = 25-1;
 800c518:	2318      	movs	r3, #24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c51a:	4602      	mov	r2, r0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c51c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c520:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c524:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c526:	2430      	movs	r4, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c528:	a908      	add	r1, sp, #32
 800c52a:	4628      	mov	r0, r5
  sConfigOC.Pulse = 25-1;
 800c52c:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c52e:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c530:	f005 fc8a 	bl	8011e48 <HAL_TIM_OC_ConfigChannel>
 800c534:	4603      	mov	r3, r0
 800c536:	b1a8      	cbz	r0, 800c564 <main+0x2d0>
 800c538:	b672      	cpsid	i
 800c53a:	e7fe      	b.n	800c53a <main+0x2a6>
 800c53c:	20007fcc 	.word	0x20007fcc
 800c540:	20007f4c 	.word	0x20007f4c
 800c544:	20008d30 	.word	0x20008d30
 800c548:	40003c00 	.word	0x40003c00
 800c54c:	20007f8c 	.word	0x20007f8c
 800c550:	40000c00 	.word	0x40000c00
 800c554:	20008c68 	.word	0x20008c68
 800c558:	40000800 	.word	0x40000800
 800c55c:	20008c28 	.word	0x20008c28
 800c560:	40010400 	.word	0x40010400
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800c564:	6829      	ldr	r1, [r5, #0]
 800c566:	698a      	ldr	r2, [r1, #24]
 800c568:	f042 0208 	orr.w	r2, r2, #8
 800c56c:	618a      	str	r2, [r1, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c56e:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c570:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c574:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800c576:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 800c57a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800c57e:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800c580:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c582:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c584:	f006 fabc 	bl	8012b00 <HAL_TIMEx_ConfigBreakDeadTime>
 800c588:	4604      	mov	r4, r0
 800c58a:	b108      	cbz	r0, 800c590 <main+0x2fc>
 800c58c:	b672      	cpsid	i
 800c58e:	e7fe      	b.n	800c58e <main+0x2fa>
  HAL_TIM_MspPostInit(&htim8);
 800c590:	4628      	mov	r0, r5
 800c592:	f000 fab7 	bl	800cb04 <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 800c596:	4b2d      	ldr	r3, [pc, #180]	; (800c64c <main+0x3b8>)
 800c598:	492d      	ldr	r1, [pc, #180]	; (800c650 <main+0x3bc>)
  htim1.Init.Prescaler = 168-1;
 800c59a:	605e      	str	r6, [r3, #4]
  htim1.Init.Period = 1000-1;
 800c59c:	f240 32e7 	movw	r2, #999	; 0x3e7
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800c5a0:	4618      	mov	r0, r3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c5a2:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800c5a6:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c5aa:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c5ae:	609c      	str	r4, [r3, #8]
  htim1.Init.RepetitionCounter = 0;
 800c5b0:	e9c3 4404 	strd	r4, r4, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c5b4:	619c      	str	r4, [r3, #24]
  htim1.Instance = TIM1;
 800c5b6:	6019      	str	r1, [r3, #0]
  htim1.Init.Period = 1000-1;
 800c5b8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800c5ba:	f004 ff93 	bl	80114e4 <HAL_TIM_Base_Init>
 800c5be:	b108      	cbz	r0, 800c5c4 <main+0x330>
 800c5c0:	b672      	cpsid	i
 800c5c2:	e7fe      	b.n	800c5c2 <main+0x32e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c5c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800c5c8:	a90f      	add	r1, sp, #60	; 0x3c
 800c5ca:	4820      	ldr	r0, [pc, #128]	; (800c64c <main+0x3b8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c5cc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800c5ce:	f005 fd61 	bl	8012094 <HAL_TIM_ConfigClockSource>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	b108      	cbz	r0, 800c5da <main+0x346>
 800c5d6:	b672      	cpsid	i
 800c5d8:	e7fe      	b.n	800c5d8 <main+0x344>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800c5da:	a908      	add	r1, sp, #32
 800c5dc:	481b      	ldr	r0, [pc, #108]	; (800c64c <main+0x3b8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c5de:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800c5e2:	f006 fa11 	bl	8012a08 <HAL_TIMEx_MasterConfigSynchronization>
 800c5e6:	b118      	cbz	r0, 800c5f0 <main+0x35c>
 800c5e8:	b672      	cpsid	i
 800c5ea:	e7fe      	b.n	800c5ea <main+0x356>
		  Explore();
 800c5ec:	f7ff fa98 	bl	800bb20 <Explore>
	  switch( startup_mode )
 800c5f0:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800c5f4:	2b07      	cmp	r3, #7
 800c5f6:	d8fd      	bhi.n	800c5f4 <main+0x360>
 800c5f8:	a201      	add	r2, pc, #4	; (adr r2, 800c600 <main+0x36c>)
 800c5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5fe:	bf00      	nop
 800c600:	0800c621 	.word	0x0800c621
 800c604:	0800c645 	.word	0x0800c645
 800c608:	0800c63f 	.word	0x0800c63f
 800c60c:	0800c639 	.word	0x0800c639
 800c610:	0800c633 	.word	0x0800c633
 800c614:	0800c62d 	.word	0x0800c62d
 800c618:	0800c5ed 	.word	0x0800c5ed
 800c61c:	0800c627 	.word	0x0800c627
		  ParameterSetting();
 800c620:	f7fe ff6a 	bl	800b4f8 <ParameterSetting>
		  break;
 800c624:	e7e4      	b.n	800c5f0 <main+0x35c>
		  WritingFree();
 800c626:	f7ff f807 	bl	800b638 <WritingFree>
		  break;
 800c62a:	e7e1      	b.n	800c5f0 <main+0x35c>
		  TestIMU();
 800c62c:	f7ff fbb4 	bl	800bd98 <TestIMU>
		  break;
 800c630:	e7de      	b.n	800c5f0 <main+0x35c>
		  FastestRun();
 800c632:	f7ff f889 	bl	800b748 <FastestRun>
		  break;
 800c636:	e7db      	b.n	800c5f0 <main+0x35c>
		  Debug();
 800c638:	f7fe fef4 	bl	800b424 <Debug>
		  break;
 800c63c:	e7d8      	b.n	800c5f0 <main+0x35c>
		  GainTestDWall();
 800c63e:	f7fe ff99 	bl	800b574 <GainTestDWall>
		  break;
 800c642:	e7d5      	b.n	800c5f0 <main+0x35c>
		  GainTestRWall();
 800c644:	f7fe ff60 	bl	800b508 <GainTestRWall>
		  break;
 800c648:	e7d2      	b.n	800c5f0 <main+0x35c>
 800c64a:	bf00      	nop
 800c64c:	20008e70 	.word	0x20008e70
 800c650:	40010000 	.word	0x40010000

0800c654 <Error_Handler>:
 800c654:	b672      	cpsid	i
 800c656:	e7fe      	b.n	800c656 <Error_Handler+0x2>

0800c658 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c65e:	2300      	movs	r3, #0
 800c660:	607b      	str	r3, [r7, #4]
 800c662:	4b10      	ldr	r3, [pc, #64]	; (800c6a4 <HAL_MspInit+0x4c>)
 800c664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c666:	4a0f      	ldr	r2, [pc, #60]	; (800c6a4 <HAL_MspInit+0x4c>)
 800c668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c66c:	6453      	str	r3, [r2, #68]	; 0x44
 800c66e:	4b0d      	ldr	r3, [pc, #52]	; (800c6a4 <HAL_MspInit+0x4c>)
 800c670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c676:	607b      	str	r3, [r7, #4]
 800c678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c67a:	2300      	movs	r3, #0
 800c67c:	603b      	str	r3, [r7, #0]
 800c67e:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <HAL_MspInit+0x4c>)
 800c680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c682:	4a08      	ldr	r2, [pc, #32]	; (800c6a4 <HAL_MspInit+0x4c>)
 800c684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c688:	6413      	str	r3, [r2, #64]	; 0x40
 800c68a:	4b06      	ldr	r3, [pc, #24]	; (800c6a4 <HAL_MspInit+0x4c>)
 800c68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c68e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c692:	603b      	str	r3, [r7, #0]
 800c694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c696:	bf00      	nop
 800c698:	370c      	adds	r7, #12
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	40023800 	.word	0x40023800

0800c6a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08c      	sub	sp, #48	; 0x30
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6b0:	f107 031c 	add.w	r3, r7, #28
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	605a      	str	r2, [r3, #4]
 800c6ba:	609a      	str	r2, [r3, #8]
 800c6bc:	60da      	str	r2, [r3, #12]
 800c6be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a6b      	ldr	r2, [pc, #428]	; (800c874 <HAL_ADC_MspInit+0x1cc>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d172      	bne.n	800c7b0 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	61bb      	str	r3, [r7, #24]
 800c6ce:	4b6a      	ldr	r3, [pc, #424]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c6d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6d2:	4a69      	ldr	r2, [pc, #420]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c6d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6d8:	6453      	str	r3, [r2, #68]	; 0x44
 800c6da:	4b67      	ldr	r3, [pc, #412]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6e2:	61bb      	str	r3, [r7, #24]
 800c6e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	617b      	str	r3, [r7, #20]
 800c6ea:	4b63      	ldr	r3, [pc, #396]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ee:	4a62      	ldr	r2, [pc, #392]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c6f0:	f043 0304 	orr.w	r3, r3, #4
 800c6f4:	6313      	str	r3, [r2, #48]	; 0x30
 800c6f6:	4b60      	ldr	r3, [pc, #384]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6fa:	f003 0304 	and.w	r3, r3, #4
 800c6fe:	617b      	str	r3, [r7, #20]
 800c700:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c702:	2300      	movs	r3, #0
 800c704:	613b      	str	r3, [r7, #16]
 800c706:	4b5c      	ldr	r3, [pc, #368]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c70a:	4a5b      	ldr	r2, [pc, #364]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c70c:	f043 0302 	orr.w	r3, r3, #2
 800c710:	6313      	str	r3, [r2, #48]	; 0x30
 800c712:	4b59      	ldr	r3, [pc, #356]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c716:	f003 0302 	and.w	r3, r3, #2
 800c71a:	613b      	str	r3, [r7, #16]
 800c71c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800c71e:	2311      	movs	r3, #17
 800c720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c722:	2303      	movs	r3, #3
 800c724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c726:	2300      	movs	r3, #0
 800c728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c72a:	f107 031c 	add.w	r3, r7, #28
 800c72e:	4619      	mov	r1, r3
 800c730:	4852      	ldr	r0, [pc, #328]	; (800c87c <HAL_ADC_MspInit+0x1d4>)
 800c732:	f003 fb55 	bl	800fde0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c736:	2302      	movs	r3, #2
 800c738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c73a:	2303      	movs	r3, #3
 800c73c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c73e:	2300      	movs	r3, #0
 800c740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c742:	f107 031c 	add.w	r3, r7, #28
 800c746:	4619      	mov	r1, r3
 800c748:	484d      	ldr	r0, [pc, #308]	; (800c880 <HAL_ADC_MspInit+0x1d8>)
 800c74a:	f003 fb49 	bl	800fde0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800c74e:	4b4d      	ldr	r3, [pc, #308]	; (800c884 <HAL_ADC_MspInit+0x1dc>)
 800c750:	4a4d      	ldr	r2, [pc, #308]	; (800c888 <HAL_ADC_MspInit+0x1e0>)
 800c752:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c754:	4b4b      	ldr	r3, [pc, #300]	; (800c884 <HAL_ADC_MspInit+0x1dc>)
 800c756:	2200      	movs	r2, #0
 800c758:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c75a:	4b4a      	ldr	r3, [pc, #296]	; (800c884 <HAL_ADC_MspInit+0x1dc>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c760:	4b48      	ldr	r3, [pc, #288]	; (800c884 <HAL_ADC_MspInit+0x1dc>)
 800c762:	2200      	movs	r2, #0
 800c764:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c766:	4b47      	ldr	r3, [pc, #284]	; (800c884 <HAL_ADC_MspInit+0x1dc>)
 800c768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c76c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c76e:	4b45      	ldr	r3, [pc, #276]	; (800c884 <HAL_ADC_MspInit+0x1dc>)
 800c770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c774:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c776:	4b43      	ldr	r3, [pc, #268]	; (800c884 <HAL_ADC_MspInit+0x1dc>)
 800c778:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c77c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c77e:	4b41      	ldr	r3, [pc, #260]	; (800c884 <HAL_ADC_MspInit+0x1dc>)
 800c780:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c784:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800c786:	4b3f      	ldr	r3, [pc, #252]	; (800c884 <HAL_ADC_MspInit+0x1dc>)
 800c788:	2200      	movs	r2, #0
 800c78a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c78c:	4b3d      	ldr	r3, [pc, #244]	; (800c884 <HAL_ADC_MspInit+0x1dc>)
 800c78e:	2200      	movs	r2, #0
 800c790:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c792:	483c      	ldr	r0, [pc, #240]	; (800c884 <HAL_ADC_MspInit+0x1dc>)
 800c794:	f002 fd5c 	bl	800f250 <HAL_DMA_Init>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800c79e:	f7ff ff59 	bl	800c654 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4a37      	ldr	r2, [pc, #220]	; (800c884 <HAL_ADC_MspInit+0x1dc>)
 800c7a6:	639a      	str	r2, [r3, #56]	; 0x38
 800c7a8:	4a36      	ldr	r2, [pc, #216]	; (800c884 <HAL_ADC_MspInit+0x1dc>)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800c7ae:	e05d      	b.n	800c86c <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a35      	ldr	r2, [pc, #212]	; (800c88c <HAL_ADC_MspInit+0x1e4>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d158      	bne.n	800c86c <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	60fb      	str	r3, [r7, #12]
 800c7be:	4b2e      	ldr	r3, [pc, #184]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7c2:	4a2d      	ldr	r2, [pc, #180]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c7c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c7c8:	6453      	str	r3, [r2, #68]	; 0x44
 800c7ca:	4b2b      	ldr	r3, [pc, #172]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c7d2:	60fb      	str	r3, [r7, #12]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	60bb      	str	r3, [r7, #8]
 800c7da:	4b27      	ldr	r3, [pc, #156]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7de:	4a26      	ldr	r2, [pc, #152]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c7e0:	f043 0304 	orr.w	r3, r3, #4
 800c7e4:	6313      	str	r3, [r2, #48]	; 0x30
 800c7e6:	4b24      	ldr	r3, [pc, #144]	; (800c878 <HAL_ADC_MspInit+0x1d0>)
 800c7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ea:	f003 0304 	and.w	r3, r3, #4
 800c7ee:	60bb      	str	r3, [r7, #8]
 800c7f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800c7f2:	2322      	movs	r3, #34	; 0x22
 800c7f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c7f6:	2303      	movs	r3, #3
 800c7f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c7fe:	f107 031c 	add.w	r3, r7, #28
 800c802:	4619      	mov	r1, r3
 800c804:	481d      	ldr	r0, [pc, #116]	; (800c87c <HAL_ADC_MspInit+0x1d4>)
 800c806:	f003 faeb 	bl	800fde0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800c80a:	4b21      	ldr	r3, [pc, #132]	; (800c890 <HAL_ADC_MspInit+0x1e8>)
 800c80c:	4a21      	ldr	r2, [pc, #132]	; (800c894 <HAL_ADC_MspInit+0x1ec>)
 800c80e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800c810:	4b1f      	ldr	r3, [pc, #124]	; (800c890 <HAL_ADC_MspInit+0x1e8>)
 800c812:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c816:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c818:	4b1d      	ldr	r3, [pc, #116]	; (800c890 <HAL_ADC_MspInit+0x1e8>)
 800c81a:	2200      	movs	r2, #0
 800c81c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c81e:	4b1c      	ldr	r3, [pc, #112]	; (800c890 <HAL_ADC_MspInit+0x1e8>)
 800c820:	2200      	movs	r2, #0
 800c822:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800c824:	4b1a      	ldr	r3, [pc, #104]	; (800c890 <HAL_ADC_MspInit+0x1e8>)
 800c826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c82a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c82c:	4b18      	ldr	r3, [pc, #96]	; (800c890 <HAL_ADC_MspInit+0x1e8>)
 800c82e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c832:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c834:	4b16      	ldr	r3, [pc, #88]	; (800c890 <HAL_ADC_MspInit+0x1e8>)
 800c836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c83a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800c83c:	4b14      	ldr	r3, [pc, #80]	; (800c890 <HAL_ADC_MspInit+0x1e8>)
 800c83e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c842:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800c844:	4b12      	ldr	r3, [pc, #72]	; (800c890 <HAL_ADC_MspInit+0x1e8>)
 800c846:	2200      	movs	r2, #0
 800c848:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c84a:	4b11      	ldr	r3, [pc, #68]	; (800c890 <HAL_ADC_MspInit+0x1e8>)
 800c84c:	2200      	movs	r2, #0
 800c84e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800c850:	480f      	ldr	r0, [pc, #60]	; (800c890 <HAL_ADC_MspInit+0x1e8>)
 800c852:	f002 fcfd 	bl	800f250 <HAL_DMA_Init>
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d001      	beq.n	800c860 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800c85c:	f7ff fefa 	bl	800c654 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4a0b      	ldr	r2, [pc, #44]	; (800c890 <HAL_ADC_MspInit+0x1e8>)
 800c864:	639a      	str	r2, [r3, #56]	; 0x38
 800c866:	4a0a      	ldr	r2, [pc, #40]	; (800c890 <HAL_ADC_MspInit+0x1e8>)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800c86c:	bf00      	nop
 800c86e:	3730      	adds	r7, #48	; 0x30
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	40012000 	.word	0x40012000
 800c878:	40023800 	.word	0x40023800
 800c87c:	40020800 	.word	0x40020800
 800c880:	40020400 	.word	0x40020400
 800c884:	20008e10 	.word	0x20008e10
 800c888:	40026410 	.word	0x40026410
 800c88c:	40012100 	.word	0x40012100
 800c890:	20008eb0 	.word	0x20008eb0
 800c894:	40026440 	.word	0x40026440

0800c898 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b08a      	sub	sp, #40	; 0x28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8a0:	f107 0314 	add.w	r3, r7, #20
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	601a      	str	r2, [r3, #0]
 800c8a8:	605a      	str	r2, [r3, #4]
 800c8aa:	609a      	str	r2, [r3, #8]
 800c8ac:	60da      	str	r2, [r3, #12]
 800c8ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a19      	ldr	r2, [pc, #100]	; (800c91c <HAL_SPI_MspInit+0x84>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d12c      	bne.n	800c914 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	613b      	str	r3, [r7, #16]
 800c8be:	4b18      	ldr	r3, [pc, #96]	; (800c920 <HAL_SPI_MspInit+0x88>)
 800c8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c2:	4a17      	ldr	r2, [pc, #92]	; (800c920 <HAL_SPI_MspInit+0x88>)
 800c8c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c8c8:	6413      	str	r3, [r2, #64]	; 0x40
 800c8ca:	4b15      	ldr	r3, [pc, #84]	; (800c920 <HAL_SPI_MspInit+0x88>)
 800c8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8d2:	613b      	str	r3, [r7, #16]
 800c8d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	60fb      	str	r3, [r7, #12]
 800c8da:	4b11      	ldr	r3, [pc, #68]	; (800c920 <HAL_SPI_MspInit+0x88>)
 800c8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8de:	4a10      	ldr	r2, [pc, #64]	; (800c920 <HAL_SPI_MspInit+0x88>)
 800c8e0:	f043 0304 	orr.w	r3, r3, #4
 800c8e4:	6313      	str	r3, [r2, #48]	; 0x30
 800c8e6:	4b0e      	ldr	r3, [pc, #56]	; (800c920 <HAL_SPI_MspInit+0x88>)
 800c8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ea:	f003 0304 	and.w	r3, r3, #4
 800c8ee:	60fb      	str	r3, [r7, #12]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800c8f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c8f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8f8:	2302      	movs	r3, #2
 800c8fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c900:	2303      	movs	r3, #3
 800c902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800c904:	2306      	movs	r3, #6
 800c906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c908:	f107 0314 	add.w	r3, r7, #20
 800c90c:	4619      	mov	r1, r3
 800c90e:	4805      	ldr	r0, [pc, #20]	; (800c924 <HAL_SPI_MspInit+0x8c>)
 800c910:	f003 fa66 	bl	800fde0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800c914:	bf00      	nop
 800c916:	3728      	adds	r7, #40	; 0x28
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	40003c00 	.word	0x40003c00
 800c920:	40023800 	.word	0x40023800
 800c924:	40020800 	.word	0x40020800

0800c928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a30      	ldr	r2, [pc, #192]	; (800c9f8 <HAL_TIM_Base_MspInit+0xd0>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d116      	bne.n	800c968 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c93a:	2300      	movs	r3, #0
 800c93c:	617b      	str	r3, [r7, #20]
 800c93e:	4b2f      	ldr	r3, [pc, #188]	; (800c9fc <HAL_TIM_Base_MspInit+0xd4>)
 800c940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c942:	4a2e      	ldr	r2, [pc, #184]	; (800c9fc <HAL_TIM_Base_MspInit+0xd4>)
 800c944:	f043 0301 	orr.w	r3, r3, #1
 800c948:	6453      	str	r3, [r2, #68]	; 0x44
 800c94a:	4b2c      	ldr	r3, [pc, #176]	; (800c9fc <HAL_TIM_Base_MspInit+0xd4>)
 800c94c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c94e:	f003 0301 	and.w	r3, r3, #1
 800c952:	617b      	str	r3, [r7, #20]
 800c954:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800c956:	2200      	movs	r2, #0
 800c958:	2100      	movs	r1, #0
 800c95a:	2019      	movs	r0, #25
 800c95c:	f002 fc41 	bl	800f1e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800c960:	2019      	movs	r0, #25
 800c962:	f002 fc5a 	bl	800f21a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800c966:	e042      	b.n	800c9ee <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c970:	d10e      	bne.n	800c990 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c972:	2300      	movs	r3, #0
 800c974:	613b      	str	r3, [r7, #16]
 800c976:	4b21      	ldr	r3, [pc, #132]	; (800c9fc <HAL_TIM_Base_MspInit+0xd4>)
 800c978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97a:	4a20      	ldr	r2, [pc, #128]	; (800c9fc <HAL_TIM_Base_MspInit+0xd4>)
 800c97c:	f043 0301 	orr.w	r3, r3, #1
 800c980:	6413      	str	r3, [r2, #64]	; 0x40
 800c982:	4b1e      	ldr	r3, [pc, #120]	; (800c9fc <HAL_TIM_Base_MspInit+0xd4>)
 800c984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c986:	f003 0301 	and.w	r3, r3, #1
 800c98a:	613b      	str	r3, [r7, #16]
 800c98c:	693b      	ldr	r3, [r7, #16]
}
 800c98e:	e02e      	b.n	800c9ee <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a1a      	ldr	r2, [pc, #104]	; (800ca00 <HAL_TIM_Base_MspInit+0xd8>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d10e      	bne.n	800c9b8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800c99a:	2300      	movs	r3, #0
 800c99c:	60fb      	str	r3, [r7, #12]
 800c99e:	4b17      	ldr	r3, [pc, #92]	; (800c9fc <HAL_TIM_Base_MspInit+0xd4>)
 800c9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a2:	4a16      	ldr	r2, [pc, #88]	; (800c9fc <HAL_TIM_Base_MspInit+0xd4>)
 800c9a4:	f043 0308 	orr.w	r3, r3, #8
 800c9a8:	6413      	str	r3, [r2, #64]	; 0x40
 800c9aa:	4b14      	ldr	r3, [pc, #80]	; (800c9fc <HAL_TIM_Base_MspInit+0xd4>)
 800c9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ae:	f003 0308 	and.w	r3, r3, #8
 800c9b2:	60fb      	str	r3, [r7, #12]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
}
 800c9b6:	e01a      	b.n	800c9ee <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a11      	ldr	r2, [pc, #68]	; (800ca04 <HAL_TIM_Base_MspInit+0xdc>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d115      	bne.n	800c9ee <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	60bb      	str	r3, [r7, #8]
 800c9c6:	4b0d      	ldr	r3, [pc, #52]	; (800c9fc <HAL_TIM_Base_MspInit+0xd4>)
 800c9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ca:	4a0c      	ldr	r2, [pc, #48]	; (800c9fc <HAL_TIM_Base_MspInit+0xd4>)
 800c9cc:	f043 0302 	orr.w	r3, r3, #2
 800c9d0:	6453      	str	r3, [r2, #68]	; 0x44
 800c9d2:	4b0a      	ldr	r3, [pc, #40]	; (800c9fc <HAL_TIM_Base_MspInit+0xd4>)
 800c9d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9d6:	f003 0302 	and.w	r3, r3, #2
 800c9da:	60bb      	str	r3, [r7, #8]
 800c9dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800c9de:	2200      	movs	r2, #0
 800c9e0:	2101      	movs	r1, #1
 800c9e2:	202c      	movs	r0, #44	; 0x2c
 800c9e4:	f002 fbfd 	bl	800f1e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800c9e8:	202c      	movs	r0, #44	; 0x2c
 800c9ea:	f002 fc16 	bl	800f21a <HAL_NVIC_EnableIRQ>
}
 800c9ee:	bf00      	nop
 800c9f0:	3718      	adds	r7, #24
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	40010000 	.word	0x40010000
 800c9fc:	40023800 	.word	0x40023800
 800ca00:	40000c00 	.word	0x40000c00
 800ca04:	40010400 	.word	0x40010400

0800ca08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b08c      	sub	sp, #48	; 0x30
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca10:	f107 031c 	add.w	r3, r7, #28
 800ca14:	2200      	movs	r2, #0
 800ca16:	601a      	str	r2, [r3, #0]
 800ca18:	605a      	str	r2, [r3, #4]
 800ca1a:	609a      	str	r2, [r3, #8]
 800ca1c:	60da      	str	r2, [r3, #12]
 800ca1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a32      	ldr	r2, [pc, #200]	; (800caf0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d12c      	bne.n	800ca84 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	61bb      	str	r3, [r7, #24]
 800ca2e:	4b31      	ldr	r3, [pc, #196]	; (800caf4 <HAL_TIM_Encoder_MspInit+0xec>)
 800ca30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca32:	4a30      	ldr	r2, [pc, #192]	; (800caf4 <HAL_TIM_Encoder_MspInit+0xec>)
 800ca34:	f043 0302 	orr.w	r3, r3, #2
 800ca38:	6413      	str	r3, [r2, #64]	; 0x40
 800ca3a:	4b2e      	ldr	r3, [pc, #184]	; (800caf4 <HAL_TIM_Encoder_MspInit+0xec>)
 800ca3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca3e:	f003 0302 	and.w	r3, r3, #2
 800ca42:	61bb      	str	r3, [r7, #24]
 800ca44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca46:	2300      	movs	r3, #0
 800ca48:	617b      	str	r3, [r7, #20]
 800ca4a:	4b2a      	ldr	r3, [pc, #168]	; (800caf4 <HAL_TIM_Encoder_MspInit+0xec>)
 800ca4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca4e:	4a29      	ldr	r2, [pc, #164]	; (800caf4 <HAL_TIM_Encoder_MspInit+0xec>)
 800ca50:	f043 0301 	orr.w	r3, r3, #1
 800ca54:	6313      	str	r3, [r2, #48]	; 0x30
 800ca56:	4b27      	ldr	r3, [pc, #156]	; (800caf4 <HAL_TIM_Encoder_MspInit+0xec>)
 800ca58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca5a:	f003 0301 	and.w	r3, r3, #1
 800ca5e:	617b      	str	r3, [r7, #20]
 800ca60:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ca62:	23c0      	movs	r3, #192	; 0xc0
 800ca64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca66:	2302      	movs	r3, #2
 800ca68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ca72:	2302      	movs	r3, #2
 800ca74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca76:	f107 031c 	add.w	r3, r7, #28
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	481e      	ldr	r0, [pc, #120]	; (800caf8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800ca7e:	f003 f9af 	bl	800fde0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800ca82:	e030      	b.n	800cae6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a1c      	ldr	r2, [pc, #112]	; (800cafc <HAL_TIM_Encoder_MspInit+0xf4>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d12b      	bne.n	800cae6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ca8e:	2300      	movs	r3, #0
 800ca90:	613b      	str	r3, [r7, #16]
 800ca92:	4b18      	ldr	r3, [pc, #96]	; (800caf4 <HAL_TIM_Encoder_MspInit+0xec>)
 800ca94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca96:	4a17      	ldr	r2, [pc, #92]	; (800caf4 <HAL_TIM_Encoder_MspInit+0xec>)
 800ca98:	f043 0304 	orr.w	r3, r3, #4
 800ca9c:	6413      	str	r3, [r2, #64]	; 0x40
 800ca9e:	4b15      	ldr	r3, [pc, #84]	; (800caf4 <HAL_TIM_Encoder_MspInit+0xec>)
 800caa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa2:	f003 0304 	and.w	r3, r3, #4
 800caa6:	613b      	str	r3, [r7, #16]
 800caa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800caaa:	2300      	movs	r3, #0
 800caac:	60fb      	str	r3, [r7, #12]
 800caae:	4b11      	ldr	r3, [pc, #68]	; (800caf4 <HAL_TIM_Encoder_MspInit+0xec>)
 800cab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab2:	4a10      	ldr	r2, [pc, #64]	; (800caf4 <HAL_TIM_Encoder_MspInit+0xec>)
 800cab4:	f043 0302 	orr.w	r3, r3, #2
 800cab8:	6313      	str	r3, [r2, #48]	; 0x30
 800caba:	4b0e      	ldr	r3, [pc, #56]	; (800caf4 <HAL_TIM_Encoder_MspInit+0xec>)
 800cabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cabe:	f003 0302 	and.w	r3, r3, #2
 800cac2:	60fb      	str	r3, [r7, #12]
 800cac4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cac6:	23c0      	movs	r3, #192	; 0xc0
 800cac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caca:	2302      	movs	r3, #2
 800cacc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cace:	2300      	movs	r3, #0
 800cad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cad2:	2300      	movs	r3, #0
 800cad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800cad6:	2302      	movs	r3, #2
 800cad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cada:	f107 031c 	add.w	r3, r7, #28
 800cade:	4619      	mov	r1, r3
 800cae0:	4807      	ldr	r0, [pc, #28]	; (800cb00 <HAL_TIM_Encoder_MspInit+0xf8>)
 800cae2:	f003 f97d 	bl	800fde0 <HAL_GPIO_Init>
}
 800cae6:	bf00      	nop
 800cae8:	3730      	adds	r7, #48	; 0x30
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	40000400 	.word	0x40000400
 800caf4:	40023800 	.word	0x40023800
 800caf8:	40020000 	.word	0x40020000
 800cafc:	40000800 	.word	0x40000800
 800cb00:	40020400 	.word	0x40020400

0800cb04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b08c      	sub	sp, #48	; 0x30
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb0c:	f107 031c 	add.w	r3, r7, #28
 800cb10:	2200      	movs	r2, #0
 800cb12:	601a      	str	r2, [r3, #0]
 800cb14:	605a      	str	r2, [r3, #4]
 800cb16:	609a      	str	r2, [r3, #8]
 800cb18:	60da      	str	r2, [r3, #12]
 800cb1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb24:	d11e      	bne.n	800cb64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb26:	2300      	movs	r3, #0
 800cb28:	61bb      	str	r3, [r7, #24]
 800cb2a:	4b43      	ldr	r3, [pc, #268]	; (800cc38 <HAL_TIM_MspPostInit+0x134>)
 800cb2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb2e:	4a42      	ldr	r2, [pc, #264]	; (800cc38 <HAL_TIM_MspPostInit+0x134>)
 800cb30:	f043 0301 	orr.w	r3, r3, #1
 800cb34:	6313      	str	r3, [r2, #48]	; 0x30
 800cb36:	4b40      	ldr	r3, [pc, #256]	; (800cc38 <HAL_TIM_MspPostInit+0x134>)
 800cb38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	61bb      	str	r3, [r7, #24]
 800cb40:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800cb42:	2308      	movs	r3, #8
 800cb44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb46:	2302      	movs	r3, #2
 800cb48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb4e:	2303      	movs	r3, #3
 800cb50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800cb52:	2301      	movs	r3, #1
 800cb54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb56:	f107 031c 	add.w	r3, r7, #28
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	4837      	ldr	r0, [pc, #220]	; (800cc3c <HAL_TIM_MspPostInit+0x138>)
 800cb5e:	f003 f93f 	bl	800fde0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800cb62:	e064      	b.n	800cc2e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a35      	ldr	r2, [pc, #212]	; (800cc40 <HAL_TIM_MspPostInit+0x13c>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d11e      	bne.n	800cbac <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb6e:	2300      	movs	r3, #0
 800cb70:	617b      	str	r3, [r7, #20]
 800cb72:	4b31      	ldr	r3, [pc, #196]	; (800cc38 <HAL_TIM_MspPostInit+0x134>)
 800cb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb76:	4a30      	ldr	r2, [pc, #192]	; (800cc38 <HAL_TIM_MspPostInit+0x134>)
 800cb78:	f043 0301 	orr.w	r3, r3, #1
 800cb7c:	6313      	str	r3, [r2, #48]	; 0x30
 800cb7e:	4b2e      	ldr	r3, [pc, #184]	; (800cc38 <HAL_TIM_MspPostInit+0x134>)
 800cb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb82:	f003 0301 	and.w	r3, r3, #1
 800cb86:	617b      	str	r3, [r7, #20]
 800cb88:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb8e:	2302      	movs	r3, #2
 800cb90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb92:	2300      	movs	r3, #0
 800cb94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb96:	2300      	movs	r3, #0
 800cb98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800cb9a:	2302      	movs	r3, #2
 800cb9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb9e:	f107 031c 	add.w	r3, r7, #28
 800cba2:	4619      	mov	r1, r3
 800cba4:	4825      	ldr	r0, [pc, #148]	; (800cc3c <HAL_TIM_MspPostInit+0x138>)
 800cba6:	f003 f91b 	bl	800fde0 <HAL_GPIO_Init>
}
 800cbaa:	e040      	b.n	800cc2e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a24      	ldr	r2, [pc, #144]	; (800cc44 <HAL_TIM_MspPostInit+0x140>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d13b      	bne.n	800cc2e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	613b      	str	r3, [r7, #16]
 800cbba:	4b1f      	ldr	r3, [pc, #124]	; (800cc38 <HAL_TIM_MspPostInit+0x134>)
 800cbbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbbe:	4a1e      	ldr	r2, [pc, #120]	; (800cc38 <HAL_TIM_MspPostInit+0x134>)
 800cbc0:	f043 0301 	orr.w	r3, r3, #1
 800cbc4:	6313      	str	r3, [r2, #48]	; 0x30
 800cbc6:	4b1c      	ldr	r3, [pc, #112]	; (800cc38 <HAL_TIM_MspPostInit+0x134>)
 800cbc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbca:	f003 0301 	and.w	r3, r3, #1
 800cbce:	613b      	str	r3, [r7, #16]
 800cbd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	60fb      	str	r3, [r7, #12]
 800cbd6:	4b18      	ldr	r3, [pc, #96]	; (800cc38 <HAL_TIM_MspPostInit+0x134>)
 800cbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbda:	4a17      	ldr	r2, [pc, #92]	; (800cc38 <HAL_TIM_MspPostInit+0x134>)
 800cbdc:	f043 0304 	orr.w	r3, r3, #4
 800cbe0:	6313      	str	r3, [r2, #48]	; 0x30
 800cbe2:	4b15      	ldr	r3, [pc, #84]	; (800cc38 <HAL_TIM_MspPostInit+0x134>)
 800cbe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbe6:	f003 0304 	and.w	r3, r3, #4
 800cbea:	60fb      	str	r3, [r7, #12]
 800cbec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800cbee:	2320      	movs	r3, #32
 800cbf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbf2:	2302      	movs	r3, #2
 800cbf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cbfe:	2303      	movs	r3, #3
 800cc00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc02:	f107 031c 	add.w	r3, r7, #28
 800cc06:	4619      	mov	r1, r3
 800cc08:	480c      	ldr	r0, [pc, #48]	; (800cc3c <HAL_TIM_MspPostInit+0x138>)
 800cc0a:	f003 f8e9 	bl	800fde0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800cc0e:	2340      	movs	r3, #64	; 0x40
 800cc10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc12:	2302      	movs	r3, #2
 800cc14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc16:	2300      	movs	r3, #0
 800cc18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cc1e:	2303      	movs	r3, #3
 800cc20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc22:	f107 031c 	add.w	r3, r7, #28
 800cc26:	4619      	mov	r1, r3
 800cc28:	4807      	ldr	r0, [pc, #28]	; (800cc48 <HAL_TIM_MspPostInit+0x144>)
 800cc2a:	f003 f8d9 	bl	800fde0 <HAL_GPIO_Init>
}
 800cc2e:	bf00      	nop
 800cc30:	3730      	adds	r7, #48	; 0x30
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	40023800 	.word	0x40023800
 800cc3c:	40020000 	.word	0x40020000
 800cc40:	40000c00 	.word	0x40000c00
 800cc44:	40010400 	.word	0x40010400
 800cc48:	40020800 	.word	0x40020800

0800cc4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b08a      	sub	sp, #40	; 0x28
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc54:	f107 0314 	add.w	r3, r7, #20
 800cc58:	2200      	movs	r2, #0
 800cc5a:	601a      	str	r2, [r3, #0]
 800cc5c:	605a      	str	r2, [r3, #4]
 800cc5e:	609a      	str	r2, [r3, #8]
 800cc60:	60da      	str	r2, [r3, #12]
 800cc62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a19      	ldr	r2, [pc, #100]	; (800ccd0 <HAL_UART_MspInit+0x84>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d12c      	bne.n	800ccc8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800cc6e:	2300      	movs	r3, #0
 800cc70:	613b      	str	r3, [r7, #16]
 800cc72:	4b18      	ldr	r3, [pc, #96]	; (800ccd4 <HAL_UART_MspInit+0x88>)
 800cc74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc76:	4a17      	ldr	r2, [pc, #92]	; (800ccd4 <HAL_UART_MspInit+0x88>)
 800cc78:	f043 0310 	orr.w	r3, r3, #16
 800cc7c:	6453      	str	r3, [r2, #68]	; 0x44
 800cc7e:	4b15      	ldr	r3, [pc, #84]	; (800ccd4 <HAL_UART_MspInit+0x88>)
 800cc80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc82:	f003 0310 	and.w	r3, r3, #16
 800cc86:	613b      	str	r3, [r7, #16]
 800cc88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	60fb      	str	r3, [r7, #12]
 800cc8e:	4b11      	ldr	r3, [pc, #68]	; (800ccd4 <HAL_UART_MspInit+0x88>)
 800cc90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc92:	4a10      	ldr	r2, [pc, #64]	; (800ccd4 <HAL_UART_MspInit+0x88>)
 800cc94:	f043 0301 	orr.w	r3, r3, #1
 800cc98:	6313      	str	r3, [r2, #48]	; 0x30
 800cc9a:	4b0e      	ldr	r3, [pc, #56]	; (800ccd4 <HAL_UART_MspInit+0x88>)
 800cc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9e:	f003 0301 	and.w	r3, r3, #1
 800cca2:	60fb      	str	r3, [r7, #12]
 800cca4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cca6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ccaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccac:	2302      	movs	r3, #2
 800ccae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ccb8:	2307      	movs	r3, #7
 800ccba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ccbc:	f107 0314 	add.w	r3, r7, #20
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	4805      	ldr	r0, [pc, #20]	; (800ccd8 <HAL_UART_MspInit+0x8c>)
 800ccc4:	f003 f88c 	bl	800fde0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800ccc8:	bf00      	nop
 800ccca:	3728      	adds	r7, #40	; 0x28
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	40011000 	.word	0x40011000
 800ccd4:	40023800 	.word	0x40023800
 800ccd8:	40020000 	.word	0x40020000

0800ccdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800cce0:	e7fe      	b.n	800cce0 <NMI_Handler+0x4>

0800cce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cce2:	b480      	push	{r7}
 800cce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cce6:	e7fe      	b.n	800cce6 <HardFault_Handler+0x4>

0800cce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cce8:	b480      	push	{r7}
 800ccea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ccec:	e7fe      	b.n	800ccec <MemManage_Handler+0x4>

0800ccee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ccee:	b480      	push	{r7}
 800ccf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ccf2:	e7fe      	b.n	800ccf2 <BusFault_Handler+0x4>

0800ccf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ccf8:	e7fe      	b.n	800ccf8 <UsageFault_Handler+0x4>

0800ccfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ccfa:	b480      	push	{r7}
 800ccfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ccfe:	bf00      	nop
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cd0c:	bf00      	nop
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cd16:	b480      	push	{r7}
 800cd18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cd1a:	bf00      	nop
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cd28:	f001 fd00 	bl	800e72c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cd2c:	bf00      	nop
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cd34:	4802      	ldr	r0, [pc, #8]	; (800cd40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800cd36:	f004 ff7f 	bl	8011c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800cd3a:	bf00      	nop
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	20008e70 	.word	0x20008e70

0800cd44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800cd48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800cd4c:	f003 f9fc 	bl	8010148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800cd50:	bf00      	nop
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cd58:	4802      	ldr	r0, [pc, #8]	; (800cd64 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800cd5a:	f004 ff6d 	bl	8011c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800cd5e:	bf00      	nop
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	20008c28 	.word	0x20008c28

0800cd68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800cd6c:	4802      	ldr	r0, [pc, #8]	; (800cd78 <DMA2_Stream0_IRQHandler+0x10>)
 800cd6e:	f002 fbe5 	bl	800f53c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800cd72:	bf00      	nop
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	20008e10 	.word	0x20008e10

0800cd7c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800cd80:	4802      	ldr	r0, [pc, #8]	; (800cd8c <DMA2_Stream2_IRQHandler+0x10>)
 800cd82:	f002 fbdb 	bl	800f53c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800cd86:	bf00      	nop
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	20008eb0 	.word	0x20008eb0

0800cd90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cd90:	b480      	push	{r7}
 800cd92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cd94:	4b08      	ldr	r3, [pc, #32]	; (800cdb8 <SystemInit+0x28>)
 800cd96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd9a:	4a07      	ldr	r2, [pc, #28]	; (800cdb8 <SystemInit+0x28>)
 800cd9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cda0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cda4:	4b04      	ldr	r3, [pc, #16]	; (800cdb8 <SystemInit+0x28>)
 800cda6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cdaa:	609a      	str	r2, [r3, #8]
#endif
}
 800cdac:	bf00      	nop
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop
 800cdb8:	e000ed00 	.word	0xe000ed00

0800cdbc <initSearchData>:
#include "MicroMouse.h"
#include "Action.h"
#include "Search.h"

void initSearchData(maze_node *my_maze, profile *Mouse)
{
 800cdbc:	b570      	push	{r4, r5, r6, lr}
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	460d      	mov	r5, r1
    initMaze(my_maze);
 800cdc4:	f7fd fb2e 	bl	800a424 <initMaze>
    initWeight(my_maze); //3/20ms
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f7fd fb0f 	bl	800a3ec <initWeight>

    //状態の初期化
    initProfile(Mouse, my_maze);
 800cdce:	4621      	mov	r1, r4
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	f7fe f9bb 	bl	800b14c <initProfile>
    Mouse->now.node = &(my_maze->RawNode[0][0]);
    Mouse->next.node = &(my_maze->RawNode[0][1]);
 800cdd6:	f104 0308 	add.w	r3, r4, #8
 800cdda:	61eb      	str	r3, [r5, #28]

    //スタート座標にいる状態で、現在の重みを更新
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800cddc:	2601      	movs	r6, #1
 800cdde:	2302      	movs	r3, #2
 800cde0:	786a      	ldrb	r2, [r5, #1]
 800cde2:	7829      	ldrb	r1, [r5, #0]
    Mouse->now.node = &(my_maze->RawNode[0][0]);
 800cde4:	612c      	str	r4, [r5, #16]
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800cde6:	4620      	mov	r0, r4
 800cde8:	e9cd 3600 	strd	r3, r6, [sp]
 800cdec:	f7fd fcec 	bl	800a7c8 <updateAllNodeWeight>
//     updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
}
 800cdf0:	b002      	add	sp, #8
 800cdf2:	bd70      	pop	{r4, r5, r6, pc}

0800cdf4 <updateRealSearch>:

void updateRealSearch()
{
 800cdf4:	b570      	push	{r4, r5, r6, lr}
	//wall_state wall_st[4]={0};

	//壁センサ値を読んで、各方角の壁の有無を判定
		//区画進入直前なので、更新予定の方角と座標がNextに入っているはず
		//前後左右の値として入れる
	shiftState(&my_mouse);
 800cdf6:	4d6f      	ldr	r5, [pc, #444]	; (800cfb4 <updateRealSearch+0x1c0>)
{
 800cdf8:	b082      	sub	sp, #8
	shiftState(&my_mouse);
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	f7fe f9c0 	bl	800b180 <shiftState>

    switch (my_mouse.now.car)
 800ce00:	7aab      	ldrb	r3, [r5, #10]
 800ce02:	2b06      	cmp	r3, #6
 800ce04:	f200 80d0 	bhi.w	800cfa8 <updateRealSearch+0x1b4>
 800ce08:	e8df f003 	tbb	[pc, r3]
 800ce0c:	ce76cea2 	.word	0xce76cea2
 800ce10:	ce4a      	.short	0xce4a
 800ce12:	04          	.byte	0x04
 800ce13:	00          	.byte	0x00
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
    	wall_dir[0] = NOWALL;
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
        break;
    case west:
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ce14:	4b68      	ldr	r3, [pc, #416]	; (800cfb8 <updateRealSearch+0x1c4>)
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800ce16:	eddf 5a69 	vldr	s11, [pc, #420]	; 800cfbc <updateRealSearch+0x1c8>
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ce1a:	edd3 7a00 	vldr	s15, [r3]
 800ce1e:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800ce22:	ed93 5a01 	vldr	s10, [r3, #4]
    	wall_dir[1] = NOWALL;
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800ce26:	eddf 6a66 	vldr	s13, [pc, #408]	; 800cfc0 <updateRealSearch+0x1cc>
 800ce2a:	ed93 6a02 	vldr	s12, [r3, #8]
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ce2e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800cfc4 <updateRealSearch+0x1d0>
 800ce32:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800ce36:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800ce3a:	eeb4 5ae5 	vcmpe.f32	s10, s11
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ce3e:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800ce42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800ce46:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800ce4a:	bfcc      	ite	gt
 800ce4c:	2601      	movgt	r6, #1
 800ce4e:	2600      	movle	r6, #0
 800ce50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ce54:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce58:	bfcc      	ite	gt
 800ce5a:	2101      	movgt	r1, #1
 800ce5c:	2100      	movle	r1, #0
 800ce5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce62:	bfcc      	ite	gt
 800ce64:	2201      	movgt	r2, #1
 800ce66:	2200      	movle	r2, #0
        break;
 800ce68:	2000      	movs	r0, #0
//	Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
//	Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
//	Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
//	Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
    //アクションが終わるときがノードの上にいる状態なので、状態シフト済みとする（この関数はアクション中に呼び出される想定）
    my_mouse.now.wall.north = wall_dir[0];
 800ce6a:	7b2c      	ldrb	r4, [r5, #12]

	//getWallNow(&(my_mouse->now), &wall[0]);

    //現在方角、壁は、合ってる。座標とノードは？
    //ここで壁の存在を反映
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800ce6c:	7a6b      	ldrb	r3, [r5, #9]
    my_mouse.now.wall.north = wall_dir[0];
 800ce6e:	f366 0401 	bfi	r4, r6, #0, #2
    my_mouse.now.wall.east = wall_dir[1];
 800ce72:	f360 0483 	bfi	r4, r0, #2, #2
    my_mouse.now.wall.south = wall_dir[2];
 800ce76:	f361 1405 	bfi	r4, r1, #4, #2
    my_mouse.now.wall.west = wall_dir[3];
 800ce7a:	f362 1487 	bfi	r4, r2, #6, #2
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800ce7e:	4952      	ldr	r1, [pc, #328]	; (800cfc8 <updateRealSearch+0x1d4>)
 800ce80:	7a2a      	ldrb	r2, [r5, #8]
 800ce82:	4852      	ldr	r0, [pc, #328]	; (800cfcc <updateRealSearch+0x1d8>)
    my_mouse.now.wall.west = wall_dir[3];
 800ce84:	732c      	strb	r4, [r5, #12]
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800ce86:	f7fd fbd7 	bl	800a638 <updateNodeThree>

	//壁の存在を基に重みマップを更新
	updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800ce8a:	2401      	movs	r4, #1
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	786a      	ldrb	r2, [r5, #1]
 800ce90:	7829      	ldrb	r1, [r5, #0]
 800ce92:	484e      	ldr	r0, [pc, #312]	; (800cfcc <updateRealSearch+0x1d8>)
 800ce94:	e9cd 3400 	strd	r3, r4, [sp]
 800ce98:	f7fd fc96 	bl	800a7c8 <updateAllNodeWeight>
}
 800ce9c:	b002      	add	sp, #8
 800ce9e:	bd70      	pop	{r4, r5, r6, pc}
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cea0:	4b45      	ldr	r3, [pc, #276]	; (800cfb8 <updateRealSearch+0x1c4>)
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cea2:	eddf 5a47 	vldr	s11, [pc, #284]	; 800cfc0 <updateRealSearch+0x1cc>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cea6:	edd3 7a00 	vldr	s15, [r3]
 800ceaa:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800ceae:	edd3 6a01 	vldr	s13, [r3, #4]
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800ceb2:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ceb6:	ed9f 6a43 	vldr	s12, [pc, #268]	; 800cfc4 <updateRealSearch+0x1d0>
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800ceba:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800cfbc <updateRealSearch+0x1c8>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cebe:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800cec2:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800cec6:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800ceca:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800cece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ced2:	eef4 7ac6 	vcmpe.f32	s15, s12
 800ced6:	bfcc      	ite	gt
 800ced8:	2001      	movgt	r0, #1
 800ceda:	2000      	movle	r0, #0
 800cedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cee0:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cee4:	bfcc      	ite	gt
 800cee6:	2101      	movgt	r1, #1
 800cee8:	2100      	movle	r1, #0
 800ceea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceee:	bfcc      	ite	gt
 800cef0:	2201      	movgt	r2, #1
 800cef2:	2200      	movle	r2, #0
        break;
 800cef4:	2600      	movs	r6, #0
 800cef6:	e7b8      	b.n	800ce6a <updateRealSearch+0x76>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cef8:	4b2f      	ldr	r3, [pc, #188]	; (800cfb8 <updateRealSearch+0x1c4>)
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cefa:	eddf 5a31 	vldr	s11, [pc, #196]	; 800cfc0 <updateRealSearch+0x1cc>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cefe:	edd3 7a00 	vldr	s15, [r3]
 800cf02:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cf06:	edd3 6a01 	vldr	s13, [r3, #4]
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cf0a:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cf0e:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800cfc4 <updateRealSearch+0x1d0>
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cf12:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800cfbc <updateRealSearch+0x1c8>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cf16:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800cf1a:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800cf1e:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cf22:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800cf26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cf2a:	eef4 7ac6 	vcmpe.f32	s15, s12
 800cf2e:	bfcc      	ite	gt
 800cf30:	2601      	movgt	r6, #1
 800cf32:	2600      	movle	r6, #0
 800cf34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cf38:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cf3c:	bfcc      	ite	gt
 800cf3e:	2001      	movgt	r0, #1
 800cf40:	2000      	movle	r0, #0
 800cf42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf46:	bfcc      	ite	gt
 800cf48:	2101      	movgt	r1, #1
 800cf4a:	2100      	movle	r1, #0
        break;
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	e78c      	b.n	800ce6a <updateRealSearch+0x76>
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cf50:	4b19      	ldr	r3, [pc, #100]	; (800cfb8 <updateRealSearch+0x1c4>)
 800cf52:	ed9f 5a1c 	vldr	s10, [pc, #112]	; 800cfc4 <updateRealSearch+0x1d0>
 800cf56:	edd3 7a00 	vldr	s15, [r3]
 800cf5a:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cf5e:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800cfbc <updateRealSearch+0x1c8>
 800cf62:	edd3 5a01 	vldr	s11, [r3, #4]
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cf66:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800cfc0 <updateRealSearch+0x1cc>
 800cf6a:	edd3 6a02 	vldr	s13, [r3, #8]
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cf6e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800cf72:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800cf76:	ee67 7aa4 	vmul.f32	s15, s15, s9
        break;
 800cf7a:	2100      	movs	r1, #0
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cf7c:	eef4 7ac5 	vcmpe.f32	s15, s10
 800cf80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cf84:	eef4 5ac6 	vcmpe.f32	s11, s12
 800cf88:	bfcc      	ite	gt
 800cf8a:	2601      	movgt	r6, #1
 800cf8c:	460e      	movle	r6, r1
 800cf8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cf92:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cf96:	bfcc      	ite	gt
 800cf98:	2001      	movgt	r0, #1
 800cf9a:	4608      	movle	r0, r1
 800cf9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa0:	bfcc      	ite	gt
 800cfa2:	2201      	movgt	r2, #1
 800cfa4:	460a      	movle	r2, r1
        break;
 800cfa6:	e760      	b.n	800ce6a <updateRealSearch+0x76>
    switch (my_mouse.now.car)
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	4611      	mov	r1, r2
 800cfac:	4610      	mov	r0, r2
 800cfae:	4616      	mov	r6, r2
 800cfb0:	e75b      	b.n	800ce6a <updateRealSearch+0x76>
 800cfb2:	bf00      	nop
 800cfb4:	20008220 	.word	0x20008220
 800cfb8:	200089f4 	.word	0x200089f4
 800cfbc:	42b40000 	.word	0x42b40000
 800cfc0:	42c80000 	.word	0x42c80000
 800cfc4:	42340000 	.word	0x42340000
 800cfc8:	20008228 	.word	0x20008228
 800cfcc:	200083cc 	.word	0x200083cc

0800cfd0 <getNextDirection>:
//↑と↓は新ノードに来た時の処理なので、アクションの区切りをずらせばよさそう。
//現情報と次情報から次の進行方向を得る処理

void getNextDirection(maze_node *my_maze, profile *Mouse, char turn_mode)
{
 800cfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd4:	460c      	mov	r4, r1
	//選ぶノードがおかしい
	//重みが、壁がある方が小さくなってしまっている.
	//

	//メインでノード選択
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	7a89      	ldrb	r1, [r1, #10]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);

	//既知区間加速このswitch文中で書くかも
		//コマンドキューのときはここでコマンドを発行してキューに渡す
	AddVelocity = 0;
 800cfda:	4d6a      	ldr	r5, [pc, #424]	; (800d184 <getNextDirection+0x1b4>)
{
 800cfdc:	4616      	mov	r6, r2
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800cfde:	6922      	ldr	r2, [r4, #16]
{
 800cfe0:	4607      	mov	r7, r0
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800cfe2:	f7fd fd13 	bl	800aa0c <getNextNode>
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 800cfe6:	f104 0114 	add.w	r1, r4, #20
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800cfea:	4602      	mov	r2, r0
 800cfec:	61e0      	str	r0, [r4, #28]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 800cfee:	f104 0008 	add.w	r0, r4, #8
 800cff2:	f7fd ff65 	bl	800aec0 <getNextState>
	//2つのアクションを組み合わせたときに壁とマップの更新が入ってしまわないようにする
	_Bool accel_or_not = false;
	int accel_or_decel = 0;
	switch(Mouse->next.dir%8) //次の方角からアクションを選択
 800cff6:	7de3      	ldrb	r3, [r4, #23]
	AddVelocity = 0;
 800cff8:	2200      	movs	r2, #0
	switch(Mouse->next.dir%8) //次の方角からアクションを選択
 800cffa:	f003 0307 	and.w	r3, r3, #7
	AddVelocity = 0;
 800cffe:	602a      	str	r2, [r5, #0]
	switch(Mouse->next.dir%8) //次の方角からアクションを選択
 800d000:	2b06      	cmp	r3, #6
 800d002:	d86d      	bhi.n	800d0e0 <getNextDirection+0x110>
 800d004:	e8df f003 	tbb	[pc, r3]
 800d008:	5c256c10 	.word	0x5c256c10
 800d00c:	4c31      	.short	0x4c31
 800d00e:	04          	.byte	0x04
 800d00f:	00          	.byte	0x00
		GoBack();
		Calc = SearchOrFast;
		TurnLeft(turn_mode);
		break;
	case left:
		ChangeLED(0);
 800d010:	2000      	movs	r0, #0
 800d012:	f000 fca9 	bl	800d968 <ChangeLED>
		//左旋回
		Calc = SearchOrFast;
 800d016:	4a5c      	ldr	r2, [pc, #368]	; (800d188 <getNextDirection+0x1b8>)
 800d018:	4b5c      	ldr	r3, [pc, #368]	; (800d18c <getNextDirection+0x1bc>)
 800d01a:	6812      	ldr	r2, [r2, #0]
 800d01c:	601a      	str	r2, [r3, #0]
//		ChangeLED(4);
		TurnLeft(turn_mode);
 800d01e:	4630      	mov	r0, r6
		break;
	}

}
 800d020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode);
 800d024:	f7fc bda4 	b.w	8009b70 <TurnLeft>
		ChangeLED(0);
 800d028:	2000      	movs	r0, #0
 800d02a:	f000 fc9d 	bl	800d968 <ChangeLED>
		accel_or_not = judgeAccelorNot(my_maze, Mouse->next.car, Mouse->next.node);
 800d02e:	4638      	mov	r0, r7
 800d030:	69e2      	ldr	r2, [r4, #28]
 800d032:	7da1      	ldrb	r1, [r4, #22]
 800d034:	f7fd fe60 	bl	800acf8 <judgeAccelorNot>
			if(VelocityMax == true)
 800d038:	4b55      	ldr	r3, [pc, #340]	; (800d190 <getNextDirection+0x1c0>)
 800d03a:	781b      	ldrb	r3, [r3, #0]
		if(accel_or_not == true) //既知で.直進
 800d03c:	2800      	cmp	r0, #0
 800d03e:	d051      	beq.n	800d0e4 <getNextDirection+0x114>
				AddVelocity = 245;
 800d040:	eddf 7a54 	vldr	s15, [pc, #336]	; 800d194 <getNextDirection+0x1c4>
			if(VelocityMax == true)
 800d044:	2b00      	cmp	r3, #0
 800d046:	f000 8098 	beq.w	800d17a <getNextDirection+0x1aa>
				accel_or_decel = 0; //そのまま
 800d04a:	2000      	movs	r0, #0
				AddVelocity = 245;
 800d04c:	edc5 7a00 	vstr	s15, [r5]
 800d050:	e052      	b.n	800d0f8 <getNextDirection+0x128>
		ChangeLED(0);
 800d052:	2000      	movs	r0, #0
 800d054:	f000 fc88 	bl	800d968 <ChangeLED>
		Calc = SearchOrFast;
 800d058:	4a4b      	ldr	r2, [pc, #300]	; (800d188 <getNextDirection+0x1b8>)
 800d05a:	4b4c      	ldr	r3, [pc, #304]	; (800d18c <getNextDirection+0x1bc>)
 800d05c:	6812      	ldr	r2, [r2, #0]
 800d05e:	601a      	str	r2, [r3, #0]
		TurnRight(turn_mode);
 800d060:	4630      	mov	r0, r6
}
 800d062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode);
 800d066:	f7fc bd45 	b.w	8009af4 <TurnRight>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d06a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800d18c <getNextDirection+0x1bc>
		ChangeLED(0);
 800d06e:	2000      	movs	r0, #0
		Calc = 1;//マップ更新したくないときは1を代入。
 800d070:	2601      	movs	r6, #1
		ChangeLED(0);
 800d072:	f000 fc79 	bl	800d968 <ChangeLED>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d076:	f8c8 6000 	str.w	r6, [r8]
		GoBack();
 800d07a:	f7fc fdb9 	bl	8009bf0 <GoBack>
				accel_or_not = judgeAccelorNot(my_maze, Mouse->next.car, Mouse->next.node);
 800d07e:	4638      	mov	r0, r7
 800d080:	69e2      	ldr	r2, [r4, #28]
 800d082:	7da1      	ldrb	r1, [r4, #22]
 800d084:	f7fd fe38 	bl	800acf8 <judgeAccelorNot>
					if(VelocityMax == true)
 800d088:	4b41      	ldr	r3, [pc, #260]	; (800d190 <getNextDirection+0x1c0>)
 800d08a:	781b      	ldrb	r3, [r3, #0]
				if(accel_or_not == true) //既知で.直進
 800d08c:	2800      	cmp	r0, #0
 800d08e:	d042      	beq.n	800d116 <getNextDirection+0x146>
						AddVelocity = 245;
 800d090:	eddf 7a40 	vldr	s15, [pc, #256]	; 800d194 <getNextDirection+0x1c4>
					if(VelocityMax == true)
 800d094:	2b00      	cmp	r3, #0
 800d096:	d06c      	beq.n	800d172 <getNextDirection+0x1a2>
						accel_or_decel = 0; //そのまま
 800d098:	2000      	movs	r0, #0
						AddVelocity = 245;
 800d09a:	edc5 7a00 	vstr	s15, [r5]
 800d09e:	e043      	b.n	800d128 <getNextDirection+0x158>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d0a0:	4c3a      	ldr	r4, [pc, #232]	; (800d18c <getNextDirection+0x1bc>)
		ChangeLED(4);
 800d0a2:	2004      	movs	r0, #4
 800d0a4:	f000 fc60 	bl	800d968 <ChangeLED>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	6023      	str	r3, [r4, #0]
		GoBack();
 800d0ac:	f7fc fda0 	bl	8009bf0 <GoBack>
		Calc = SearchOrFast;
 800d0b0:	4b35      	ldr	r3, [pc, #212]	; (800d188 <getNextDirection+0x1b8>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	6023      	str	r3, [r4, #0]
		TurnLeft(turn_mode);
 800d0b6:	4630      	mov	r0, r6
}
 800d0b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode);
 800d0bc:	f7fc bd58 	b.w	8009b70 <TurnLeft>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d0c0:	4c32      	ldr	r4, [pc, #200]	; (800d18c <getNextDirection+0x1bc>)
		ChangeLED(1);
 800d0c2:	2001      	movs	r0, #1
 800d0c4:	f000 fc50 	bl	800d968 <ChangeLED>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	6023      	str	r3, [r4, #0]
		GoBack(); //間の座標変動を
 800d0cc:	f7fc fd90 	bl	8009bf0 <GoBack>
		Calc = SearchOrFast;
 800d0d0:	4b2d      	ldr	r3, [pc, #180]	; (800d188 <getNextDirection+0x1b8>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	6023      	str	r3, [r4, #0]
		TurnRight(turn_mode);
 800d0d6:	4630      	mov	r0, r6
}
 800d0d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode);
 800d0dc:	f7fc bd0a 	b.w	8009af4 <TurnRight>
}
 800d0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(VelocityMax == true)
 800d0e4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d137      	bne.n	800d15c <getNextDirection+0x18c>
				AddVelocity = 0;
 800d0ec:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d198 <getNextDirection+0x1c8>
 800d0f0:	eef0 7a47 	vmov.f32	s15, s14
 800d0f4:	ed85 7a00 	vstr	s14, [r5]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d0f8:	4b28      	ldr	r3, [pc, #160]	; (800d19c <getNextDirection+0x1cc>)
		Calc = SearchOrFast;
 800d0fa:	4a23      	ldr	r2, [pc, #140]	; (800d188 <getNextDirection+0x1b8>)
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d0fc:	edd3 0a00 	vldr	s1, [r3]
		Calc = SearchOrFast;
 800d100:	4b22      	ldr	r3, [pc, #136]	; (800d18c <getNextDirection+0x1bc>)
 800d102:	6812      	ldr	r2, [r2, #0]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d104:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800d1a0 <getNextDirection+0x1d0>
		Calc = SearchOrFast;
 800d108:	601a      	str	r2, [r3, #0]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d10a:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800d10e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d112:	f7fc bbbd 	b.w	8009890 <GoStraight>
					if(VelocityMax == true)
 800d116:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800d11a:	b9a3      	cbnz	r3, 800d146 <getNextDirection+0x176>
						AddVelocity = 0;
 800d11c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d198 <getNextDirection+0x1c8>
 800d120:	eef0 7a47 	vmov.f32	s15, s14
 800d124:	ed85 7a00 	vstr	s14, [r5]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d128:	4a1c      	ldr	r2, [pc, #112]	; (800d19c <getNextDirection+0x1cc>)
		Calc = SearchOrFast;
 800d12a:	4b17      	ldr	r3, [pc, #92]	; (800d188 <getNextDirection+0x1b8>)
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d12c:	edd2 0a00 	vldr	s1, [r2]
		Calc = SearchOrFast;
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f8c8 3000 	str.w	r3, [r8]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d136:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800d1a0 <getNextDirection+0x1d0>
 800d13a:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800d13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d142:	f7fc bba5 	b.w	8009890 <GoStraight>
						cnt += 2;
 800d146:	4a17      	ldr	r2, [pc, #92]	; (800d1a4 <getNextDirection+0x1d4>)
						AddVelocity = 0;
 800d148:	eddf 7a13 	vldr	s15, [pc, #76]	; 800d198 <getNextDirection+0x1c8>
						cnt += 2;
 800d14c:	6813      	ldr	r3, [r2, #0]
						AddVelocity = 0;
 800d14e:	edc5 7a00 	vstr	s15, [r5]
						cnt += 2;
 800d152:	3302      	adds	r3, #2
 800d154:	6013      	str	r3, [r2, #0]
						accel_or_decel = -1; //減速
 800d156:	f04f 30ff 	mov.w	r0, #4294967295
 800d15a:	e7e5      	b.n	800d128 <getNextDirection+0x158>
				cnt += 2;
 800d15c:	4a12      	ldr	r2, [pc, #72]	; (800d1a8 <getNextDirection+0x1d8>)
				AddVelocity = 0;
 800d15e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800d198 <getNextDirection+0x1c8>
				cnt += 2;
 800d162:	6813      	ldr	r3, [r2, #0]
				AddVelocity = 0;
 800d164:	edc5 7a00 	vstr	s15, [r5]
				cnt += 2;
 800d168:	3302      	adds	r3, #2
 800d16a:	6013      	str	r3, [r2, #0]
				accel_or_decel = -1; //減速
 800d16c:	f04f 30ff 	mov.w	r0, #4294967295
 800d170:	e7c2      	b.n	800d0f8 <getNextDirection+0x128>
						accel_or_decel = 1; //加速
 800d172:	4630      	mov	r0, r6
						AddVelocity = 245;
 800d174:	edc5 7a00 	vstr	s15, [r5]
 800d178:	e7d6      	b.n	800d128 <getNextDirection+0x158>
				accel_or_decel = 1; //加速
 800d17a:	2001      	movs	r0, #1
				AddVelocity = 245;
 800d17c:	edc5 7a00 	vstr	s15, [r5]
 800d180:	e7ba      	b.n	800d0f8 <getNextDirection+0x128>
 800d182:	bf00      	nop
 800d184:	20008990 	.word	0x20008990
 800d188:	20008c20 	.word	0x20008c20
 800d18c:	20008c24 	.word	0x20008c24
 800d190:	20008aa6 	.word	0x20008aa6
 800d194:	43750000 	.word	0x43750000
 800d198:	00000000 	.word	0x00000000
 800d19c:	20008aa8 	.word	0x20008aa8
 800d1a0:	42b40000 	.word	0x42b40000
 800d1a4:	2000002c 	.word	0x2000002c
 800d1a8:	20000028 	.word	0x20000028

0800d1ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b086      	sub	sp, #24
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	617b      	str	r3, [r7, #20]
 800d1bc:	e00a      	b.n	800d1d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800d1be:	f7ff f807 	bl	800c1d0 <__io_getchar>
 800d1c2:	4601      	mov	r1, r0
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	1c5a      	adds	r2, r3, #1
 800d1c8:	60ba      	str	r2, [r7, #8]
 800d1ca:	b2ca      	uxtb	r2, r1
 800d1cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	617b      	str	r3, [r7, #20]
 800d1d4:	697a      	ldr	r2, [r7, #20]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	dbf0      	blt.n	800d1be <_read+0x12>
	}

return len;
 800d1dc:	687b      	ldr	r3, [r7, #4]
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3718      	adds	r7, #24
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b086      	sub	sp, #24
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	60f8      	str	r0, [r7, #12]
 800d1ee:	60b9      	str	r1, [r7, #8]
 800d1f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	617b      	str	r3, [r7, #20]
 800d1f6:	e009      	b.n	800d20c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	1c5a      	adds	r2, r3, #1
 800d1fc:	60ba      	str	r2, [r7, #8]
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	4618      	mov	r0, r3
 800d202:	f7fe ffd3 	bl	800c1ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	3301      	adds	r3, #1
 800d20a:	617b      	str	r3, [r7, #20]
 800d20c:	697a      	ldr	r2, [r7, #20]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	429a      	cmp	r2, r3
 800d212:	dbf1      	blt.n	800d1f8 <_write+0x12>
	}
	return len;
 800d214:	687b      	ldr	r3, [r7, #4]
}
 800d216:	4618      	mov	r0, r3
 800d218:	3718      	adds	r7, #24
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <_close>:

int _close(int file)
{
 800d21e:	b480      	push	{r7}
 800d220:	b083      	sub	sp, #12
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
	return -1;
 800d226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	370c      	adds	r7, #12
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr

0800d236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d236:	b480      	push	{r7}
 800d238:	b083      	sub	sp, #12
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
 800d23e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d246:	605a      	str	r2, [r3, #4]
	return 0;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	370c      	adds	r7, #12
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr

0800d256 <_isatty>:

int _isatty(int file)
{
 800d256:	b480      	push	{r7}
 800d258:	b083      	sub	sp, #12
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
	return 1;
 800d25e:	2301      	movs	r3, #1
}
 800d260:	4618      	mov	r0, r3
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
	return 0;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3714      	adds	r7, #20
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
	...

0800d288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d290:	4a14      	ldr	r2, [pc, #80]	; (800d2e4 <_sbrk+0x5c>)
 800d292:	4b15      	ldr	r3, [pc, #84]	; (800d2e8 <_sbrk+0x60>)
 800d294:	1ad3      	subs	r3, r2, r3
 800d296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d29c:	4b13      	ldr	r3, [pc, #76]	; (800d2ec <_sbrk+0x64>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d102      	bne.n	800d2aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d2a4:	4b11      	ldr	r3, [pc, #68]	; (800d2ec <_sbrk+0x64>)
 800d2a6:	4a12      	ldr	r2, [pc, #72]	; (800d2f0 <_sbrk+0x68>)
 800d2a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d2aa:	4b10      	ldr	r3, [pc, #64]	; (800d2ec <_sbrk+0x64>)
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	693a      	ldr	r2, [r7, #16]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d207      	bcs.n	800d2c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d2b8:	f006 fa4a 	bl	8013750 <__errno>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	230c      	movs	r3, #12
 800d2c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800d2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c6:	e009      	b.n	800d2dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d2c8:	4b08      	ldr	r3, [pc, #32]	; (800d2ec <_sbrk+0x64>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d2ce:	4b07      	ldr	r3, [pc, #28]	; (800d2ec <_sbrk+0x64>)
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	4a05      	ldr	r2, [pc, #20]	; (800d2ec <_sbrk+0x64>)
 800d2d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d2da:	68fb      	ldr	r3, [r7, #12]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3718      	adds	r7, #24
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	20020000 	.word	0x20020000
 800d2e8:	00000400 	.word	0x00000400
 800d2ec:	20007f48 	.word	0x20007f48
 800d2f0:	20008f50 	.word	0x20008f50

0800d2f4 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800d2f8:	2203      	movs	r2, #3
 800d2fa:	490a      	ldr	r1, [pc, #40]	; (800d324 <ADCStart+0x30>)
 800d2fc:	480a      	ldr	r0, [pc, #40]	; (800d328 <ADCStart+0x34>)
 800d2fe:	f001 fa9b 	bl	800e838 <HAL_ADC_Start_DMA>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d001      	beq.n	800d30c <ADCStart+0x18>
	{
		Error_Handler();
 800d308:	f7ff f9a4 	bl	800c654 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800d30c:	2202      	movs	r2, #2
 800d30e:	4907      	ldr	r1, [pc, #28]	; (800d32c <ADCStart+0x38>)
 800d310:	4807      	ldr	r0, [pc, #28]	; (800d330 <ADCStart+0x3c>)
 800d312:	f001 fa91 	bl	800e838 <HAL_ADC_Start_DMA>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d001      	beq.n	800d320 <ADCStart+0x2c>
	{
		Error_Handler();
 800d31c:	f7ff f99a 	bl	800c654 <Error_Handler>
	}

}
 800d320:	bf00      	nop
 800d322:	bd80      	pop	{r7, pc}
 800d324:	20007fcc 	.word	0x20007fcc
 800d328:	20008d88 	.word	0x20008d88
 800d32c:	20007fd8 	.word	0x20007fd8
 800d330:	20008ca8 	.word	0x20008ca8

0800d334 <ADCStop>:
void ADCStop()
{
 800d334:	b580      	push	{r7, lr}
 800d336:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800d338:	480e      	ldr	r0, [pc, #56]	; (800d374 <ADCStop+0x40>)
 800d33a:	f001 fb6f 	bl	800ea1c <HAL_ADC_Stop_DMA>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d007      	beq.n	800d354 <ADCStop+0x20>
	{
		printf("な\r\n");
 800d344:	480c      	ldr	r0, [pc, #48]	; (800d378 <ADCStop+0x44>)
 800d346:	f007 ffcb 	bl	80152e0 <puts>
		Error_Handler();
 800d34a:	f7ff f983 	bl	800c654 <Error_Handler>
		printf("に\r\n");
 800d34e:	480b      	ldr	r0, [pc, #44]	; (800d37c <ADCStop+0x48>)
 800d350:	f007 ffc6 	bl	80152e0 <puts>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800d354:	480a      	ldr	r0, [pc, #40]	; (800d380 <ADCStop+0x4c>)
 800d356:	f001 fb61 	bl	800ea1c <HAL_ADC_Stop_DMA>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d007      	beq.n	800d370 <ADCStop+0x3c>
	{
		printf("ぬ\r\n");
 800d360:	4808      	ldr	r0, [pc, #32]	; (800d384 <ADCStop+0x50>)
 800d362:	f007 ffbd 	bl	80152e0 <puts>
		Error_Handler();
 800d366:	f7ff f975 	bl	800c654 <Error_Handler>
		printf("ね\r\n");
 800d36a:	4807      	ldr	r0, [pc, #28]	; (800d388 <ADCStop+0x54>)
 800d36c:	f007 ffb8 	bl	80152e0 <puts>
	}
}
 800d370:	bf00      	nop
 800d372:	bd80      	pop	{r7, pc}
 800d374:	20008d88 	.word	0x20008d88
 800d378:	08018b50 	.word	0x08018b50
 800d37c:	08018b58 	.word	0x08018b58
 800d380:	20008ca8 	.word	0x20008ca8
 800d384:	08018b60 	.word	0x08018b60
 800d388:	08018b68 	.word	0x08018b68

0800d38c <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 800d38c:	b480      	push	{r7}
 800d38e:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800d390:	4b05      	ldr	r3, [pc, #20]	; (800d3a8 <FLASH_Unlock+0x1c>)
 800d392:	4a06      	ldr	r2, [pc, #24]	; (800d3ac <FLASH_Unlock+0x20>)
 800d394:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800d396:	4b04      	ldr	r3, [pc, #16]	; (800d3a8 <FLASH_Unlock+0x1c>)
 800d398:	4a05      	ldr	r2, [pc, #20]	; (800d3b0 <FLASH_Unlock+0x24>)
 800d39a:	605a      	str	r2, [r3, #4]
}
 800d39c:	bf00      	nop
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop
 800d3a8:	40023c00 	.word	0x40023c00
 800d3ac:	45670123 	.word	0x45670123
 800d3b0:	cdef89ab 	.word	0xcdef89ab

0800d3b4 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800d3b8:	4b05      	ldr	r3, [pc, #20]	; (800d3d0 <FLASH_Lock+0x1c>)
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	4a04      	ldr	r2, [pc, #16]	; (800d3d0 <FLASH_Lock+0x1c>)
 800d3be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d3c2:	6113      	str	r3, [r2, #16]

}
 800d3c4:	bf00      	nop
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	40023c00 	.word	0x40023c00

0800d3d4 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d3d8:	bf00      	nop
 800d3da:	4b05      	ldr	r3, [pc, #20]	; (800d3f0 <FLASH_WaitBusy+0x1c>)
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1f9      	bne.n	800d3da <FLASH_WaitBusy+0x6>
}
 800d3e6:	bf00      	nop
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr
 800d3f0:	40023c00 	.word	0x40023c00

0800d3f4 <FLASH_Write_Word>:

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800d3fe:	f7ff ffc5 	bl	800d38c <FLASH_Unlock>

	FLASH_WaitBusy();
 800d402:	f7ff ffe7 	bl	800d3d4 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d406:	4b0e      	ldr	r3, [pc, #56]	; (800d440 <FLASH_Write_Word+0x4c>)
 800d408:	691b      	ldr	r3, [r3, #16]
 800d40a:	4a0d      	ldr	r2, [pc, #52]	; (800d440 <FLASH_Write_Word+0x4c>)
 800d40c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d410:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d412:	4b0b      	ldr	r3, [pc, #44]	; (800d440 <FLASH_Write_Word+0x4c>)
 800d414:	691b      	ldr	r3, [r3, #16]
 800d416:	4a0a      	ldr	r2, [pc, #40]	; (800d440 <FLASH_Write_Word+0x4c>)
 800d418:	f043 0301 	orr.w	r3, r3, #1
 800d41c:	6113      	str	r3, [r2, #16]

	*(__IO uint32_t*)address = data;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	683a      	ldr	r2, [r7, #0]
 800d422:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800d424:	f7ff ffd6 	bl	800d3d4 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800d428:	4b05      	ldr	r3, [pc, #20]	; (800d440 <FLASH_Write_Word+0x4c>)
 800d42a:	691b      	ldr	r3, [r3, #16]
 800d42c:	4a04      	ldr	r2, [pc, #16]	; (800d440 <FLASH_Write_Word+0x4c>)
 800d42e:	f023 0301 	bic.w	r3, r3, #1
 800d432:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800d434:	f7ff ffbe 	bl	800d3b4 <FLASH_Lock>
}
 800d438:	bf00      	nop
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	40023c00 	.word	0x40023c00

0800d444 <FLASH_Read_Word>:
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800d44e:	f7ff ff9d 	bl	800d38c <FLASH_Unlock>

	FLASH_WaitBusy();
 800d452:	f7ff ffbf 	bl	800d3d4 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d456:	4b0f      	ldr	r3, [pc, #60]	; (800d494 <FLASH_Read_Word+0x50>)
 800d458:	691b      	ldr	r3, [r3, #16]
 800d45a:	4a0e      	ldr	r2, [pc, #56]	; (800d494 <FLASH_Read_Word+0x50>)
 800d45c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d460:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d462:	4b0c      	ldr	r3, [pc, #48]	; (800d494 <FLASH_Read_Word+0x50>)
 800d464:	691b      	ldr	r3, [r3, #16]
 800d466:	4a0b      	ldr	r2, [pc, #44]	; (800d494 <FLASH_Read_Word+0x50>)
 800d468:	f043 0301 	orr.w	r3, r3, #1
 800d46c:	6113      	str	r3, [r2, #16]

	* data = *(__IO uint32_t*)address;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800d476:	f7ff ffad 	bl	800d3d4 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800d47a:	4b06      	ldr	r3, [pc, #24]	; (800d494 <FLASH_Read_Word+0x50>)
 800d47c:	691b      	ldr	r3, [r3, #16]
 800d47e:	4a05      	ldr	r2, [pc, #20]	; (800d494 <FLASH_Read_Word+0x50>)
 800d480:	f023 0301 	bic.w	r3, r3, #1
 800d484:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800d486:	f7ff ff95 	bl	800d3b4 <FLASH_Lock>
}
 800d48a:	bf00      	nop
 800d48c:	3708      	adds	r7, #8
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	40023c00 	.word	0x40023c00

0800d498 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 800d4a4:	f7ff ff72 	bl	800d38c <FLASH_Unlock>

	FLASH_WaitBusy();
 800d4a8:	f7ff ff94 	bl	800d3d4 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d4ac:	4b0e      	ldr	r3, [pc, #56]	; (800d4e8 <FLASH_Write_Word_F+0x50>)
 800d4ae:	691b      	ldr	r3, [r3, #16]
 800d4b0:	4a0d      	ldr	r2, [pc, #52]	; (800d4e8 <FLASH_Write_Word_F+0x50>)
 800d4b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d4b6:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d4b8:	4b0b      	ldr	r3, [pc, #44]	; (800d4e8 <FLASH_Write_Word_F+0x50>)
 800d4ba:	691b      	ldr	r3, [r3, #16]
 800d4bc:	4a0a      	ldr	r2, [pc, #40]	; (800d4e8 <FLASH_Write_Word_F+0x50>)
 800d4be:	f043 0301 	orr.w	r3, r3, #1
 800d4c2:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	683a      	ldr	r2, [r7, #0]
 800d4c8:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800d4ca:	f7ff ff83 	bl	800d3d4 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800d4ce:	4b06      	ldr	r3, [pc, #24]	; (800d4e8 <FLASH_Write_Word_F+0x50>)
 800d4d0:	691b      	ldr	r3, [r3, #16]
 800d4d2:	4a05      	ldr	r2, [pc, #20]	; (800d4e8 <FLASH_Write_Word_F+0x50>)
 800d4d4:	f023 0301 	bic.w	r3, r3, #1
 800d4d8:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800d4da:	f7ff ff6b 	bl	800d3b4 <FLASH_Lock>
}
 800d4de:	bf00      	nop
 800d4e0:	3708      	adds	r7, #8
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	40023c00 	.word	0x40023c00

0800d4ec <FLASH_Read_Word_F>:
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800d4f6:	f7ff ff49 	bl	800d38c <FLASH_Unlock>

	FLASH_WaitBusy();
 800d4fa:	f7ff ff6b 	bl	800d3d4 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d4fe:	4b0f      	ldr	r3, [pc, #60]	; (800d53c <FLASH_Read_Word_F+0x50>)
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	4a0e      	ldr	r2, [pc, #56]	; (800d53c <FLASH_Read_Word_F+0x50>)
 800d504:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d508:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d50a:	4b0c      	ldr	r3, [pc, #48]	; (800d53c <FLASH_Read_Word_F+0x50>)
 800d50c:	691b      	ldr	r3, [r3, #16]
 800d50e:	4a0b      	ldr	r2, [pc, #44]	; (800d53c <FLASH_Read_Word_F+0x50>)
 800d510:	f043 0301 	orr.w	r3, r3, #1
 800d514:	6113      	str	r3, [r2, #16]

	* data = *(__IO float*)address;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800d51e:	f7ff ff59 	bl	800d3d4 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800d522:	4b06      	ldr	r3, [pc, #24]	; (800d53c <FLASH_Read_Word_F+0x50>)
 800d524:	691b      	ldr	r3, [r3, #16]
 800d526:	4a05      	ldr	r2, [pc, #20]	; (800d53c <FLASH_Read_Word_F+0x50>)
 800d528:	f023 0301 	bic.w	r3, r3, #1
 800d52c:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800d52e:	f7ff ff41 	bl	800d3b4 <FLASH_Lock>
}
 800d532:	bf00      	nop
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	40023c00 	.word	0x40023c00

0800d540 <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b088      	sub	sp, #32
 800d544:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800d546:	f002 fa61 	bl	800fa0c <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d54a:	2300      	movs	r3, #0
 800d54c:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800d54e:	2301      	movs	r3, #1
 800d550:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800d552:	2302      	movs	r3, #2
 800d554:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800d556:	2301      	movs	r3, #1
 800d558:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800d55a:	1d3a      	adds	r2, r7, #4
 800d55c:	f107 0308 	add.w	r3, r7, #8
 800d560:	4611      	mov	r1, r2
 800d562:	4618      	mov	r0, r3
 800d564:	f002 fb1a 	bl	800fb9c <HAL_FLASHEx_Erase>
 800d568:	4603      	mov	r3, r0
 800d56a:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800d56c:	f002 fa70 	bl	800fa50 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800d570:	7ffb      	ldrb	r3, [r7, #31]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d105      	bne.n	800d582 <Flash_clear_sector1+0x42>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d57c:	d101      	bne.n	800d582 <Flash_clear_sector1+0x42>
 800d57e:	2301      	movs	r3, #1
 800d580:	e000      	b.n	800d584 <Flash_clear_sector1+0x44>
 800d582:	2300      	movs	r3, #0
 800d584:	f003 0301 	and.w	r3, r3, #1
 800d588:	b2db      	uxtb	r3, r3
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3720      	adds	r7, #32
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b088      	sub	sp, #32
 800d596:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800d598:	f002 fa38 	bl	800fa0c <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d59c:	2300      	movs	r3, #0
 800d59e:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800d5a0:	2309      	movs	r3, #9
 800d5a2:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800d5a4:	2302      	movs	r3, #2
 800d5a6:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	617b      	str	r3, [r7, #20]

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800d5ac:	1d3a      	adds	r2, r7, #4
 800d5ae:	f107 0308 	add.w	r3, r7, #8
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f002 faf1 	bl	800fb9c <HAL_FLASHEx_Erase>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	77fb      	strb	r3, [r7, #31]

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800d5be:	f002 fa47 	bl	800fa50 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800d5c2:	7ffb      	ldrb	r3, [r7, #31]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d105      	bne.n	800d5d4 <Flash_clear_sector9+0x42>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ce:	d101      	bne.n	800d5d4 <Flash_clear_sector9+0x42>
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e000      	b.n	800d5d6 <Flash_clear_sector9+0x44>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	b2db      	uxtb	r3, r3
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3720      	adds	r7, #32
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <compare_num>:
}


int compare_num(const void * n1, const void * n2)
{
	if (*(int16_t *)n1 > *(int16_t *)n2)
 800d5e4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d5e8:	f9b1 3000 	ldrsh.w	r3, [r1]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	dc04      	bgt.n	800d5fa <compare_num+0x16>
	{
		return 1;
	}
	else if (*(int16_t *)n1 < *(int16_t *)n2)
 800d5f0:	bfb4      	ite	lt
 800d5f2:	f04f 30ff 	movlt.w	r0, #4294967295
 800d5f6:	2000      	movge	r0, #0
 800d5f8:	4770      	bx	lr
		return 1;
 800d5fa:	2001      	movs	r0, #1
	}
	else
	{
		return 0;
	}
}
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop

0800d600 <ReadIMU>:
inline float ReadIMU(uint8_t a, uint8_t b) {
 800d600:	b570      	push	{r4, r5, r6, lr}
	CS_RESET;
 800d602:	4c23      	ldr	r4, [pc, #140]	; (800d690 <ReadIMU+0x90>)
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d604:	4d23      	ldr	r5, [pc, #140]	; (800d694 <ReadIMU+0x94>)
inline float ReadIMU(uint8_t a, uint8_t b) {
 800d606:	b082      	sub	sp, #8
	ret2 = ret[1] | 0x80;
 800d608:	f061 037f 	orn	r3, r1, #127	; 0x7f
	ret1 = ret[0] | 0x80;
 800d60c:	f060 067f 	orn	r6, r0, #127	; 0x7f
	CS_RESET;
 800d610:	2200      	movs	r2, #0
 800d612:	4620      	mov	r0, r4
 800d614:	2104      	movs	r1, #4
	ret2 = ret[1] | 0x80;
 800d616:	f88d 3005 	strb.w	r3, [sp, #5]
	ret1 = ret[0] | 0x80;
 800d61a:	f88d 6004 	strb.w	r6, [sp, #4]
	CS_RESET;
 800d61e:	f002 fd79 	bl	8010114 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d622:	a901      	add	r1, sp, #4
 800d624:	4628      	mov	r0, r5
 800d626:	2364      	movs	r3, #100	; 0x64
 800d628:	2201      	movs	r2, #1
 800d62a:	f003 fa6b 	bl	8010b04 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800d62e:	2364      	movs	r3, #100	; 0x64
 800d630:	f10d 0106 	add.w	r1, sp, #6
 800d634:	4628      	mov	r0, r5
 800d636:	2201      	movs	r2, #1
 800d638:	f003 fb98 	bl	8010d6c <HAL_SPI_Receive>
	CS_SET;
 800d63c:	4620      	mov	r0, r4
 800d63e:	2201      	movs	r2, #1
 800d640:	2104      	movs	r1, #4
 800d642:	f002 fd67 	bl	8010114 <HAL_GPIO_WritePin>
	CS_RESET;
 800d646:	4620      	mov	r0, r4
 800d648:	2200      	movs	r2, #0
 800d64a:	2104      	movs	r1, #4
 800d64c:	f002 fd62 	bl	8010114 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800d650:	f10d 0105 	add.w	r1, sp, #5
 800d654:	4628      	mov	r0, r5
 800d656:	2364      	movs	r3, #100	; 0x64
 800d658:	2201      	movs	r2, #1
 800d65a:	f003 fa53 	bl	8010b04 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800d65e:	2364      	movs	r3, #100	; 0x64
 800d660:	f10d 0107 	add.w	r1, sp, #7
 800d664:	4628      	mov	r0, r5
 800d666:	2201      	movs	r2, #1
 800d668:	f003 fb80 	bl	8010d6c <HAL_SPI_Receive>
	CS_SET;
 800d66c:	4620      	mov	r0, r4
 800d66e:	2201      	movs	r2, #1
 800d670:	2104      	movs	r1, #4
 800d672:	f002 fd4f 	bl	8010114 <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800d676:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d67a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d67e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	res = (float)law_data;
 800d682:	b21b      	sxth	r3, r3
 800d684:	ee00 3a10 	vmov	s0, r3
}
 800d688:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800d68c:	b002      	add	sp, #8
 800d68e:	bd70      	pop	{r4, r5, r6, pc}
 800d690:	40020c00 	.word	0x40020c00
 800d694:	20008d30 	.word	0x20008d30

0800d698 <median_filter>:
int16_t median_filter(int16_t *new_data) //中身変更しないが、値のコピーを避けて速度維持のためにアドレス
{
 800d698:	b530      	push	{r4, r5, lr}
	filter[cnt+1] = filter[cnt+2];
	filter[cnt+2] = filter[cnt+3];
	filter[cnt+3] = filter[cnt+4];
	filter[cnt+4] = new_data;
#else
	filter[0] = filter[1];
 800d69a:	4c0d      	ldr	r4, [pc, #52]	; (800d6d0 <median_filter+0x38>)
	filter[1] = filter[2];
	filter[2] = *new_data;//filter[3];
 800d69c:	f9b0 1000 	ldrsh.w	r1, [r0]
	filter[1] = filter[2];
 800d6a0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
	filter[0] = filter[1];
 800d6a4:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
	filter[2] = *new_data;//filter[3];
 800d6a8:	80a1      	strh	r1, [r4, #4]
{
 800d6aa:	b083      	sub	sp, #12
	filter[1] = filter[2];
 800d6ac:	8060      	strh	r0, [r4, #2]
//	filter[3] = filter[4];
//	filter[4] = *new_data;

	sorted[0] = filter[0];
	sorted[1] = filter[1];
	sorted[2] = *new_data;//filter[2];
 800d6ae:	f8ad 1004 	strh.w	r1, [sp, #4]
	sorted[1] = filter[1];
 800d6b2:	f8ad 0002 	strh.w	r0, [sp, #2]
//	sorted[4] = filter[4];
#endif


	//ソートする
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800d6b6:	4b07      	ldr	r3, [pc, #28]	; (800d6d4 <median_filter+0x3c>)
	filter[0] = filter[1];
 800d6b8:	8025      	strh	r5, [r4, #0]
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800d6ba:	4668      	mov	r0, sp
 800d6bc:	2202      	movs	r2, #2
 800d6be:	2103      	movs	r1, #3
	sorted[0] = filter[0];
 800d6c0:	f8ad 5000 	strh.w	r5, [sp]
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800d6c4:	f007 fe4c 	bl	8015360 <qsort>
	//qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int),compare_num);
	//中央値を返す
	return sorted[1];
}
 800d6c8:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 800d6cc:	b003      	add	sp, #12
 800d6ce:	bd30      	pop	{r4, r5, pc}
 800d6d0:	20007fe4 	.word	0x20007fe4
 800d6d4:	0800d5e5 	.word	0x0800d5e5

0800d6d8 <Update_IMU>:
//割込み内で呼ぶセット
void Update_IMU(float *angv, float *angle )
{
 800d6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
				0x38,
		};
		int16_t law_data;
		ret1 = ret[0] | 0x80;
		ret2 = ret[1] | 0x80;
		CS_RESET;
 800d6da:	4c3f      	ldr	r4, [pc, #252]	; (800d7d8 <Update_IMU+0x100>)
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d6dc:	4d3f      	ldr	r5, [pc, #252]	; (800d7dc <Update_IMU+0x104>)
{
 800d6de:	b083      	sub	sp, #12
		ret1 = ret[0] | 0x80;
 800d6e0:	f04f 0cb7 	mov.w	ip, #183	; 0xb7
{
 800d6e4:	460e      	mov	r6, r1
 800d6e6:	4607      	mov	r7, r0
		ret2 = ret[1] | 0x80;
 800d6e8:	23b8      	movs	r3, #184	; 0xb8
		CS_RESET;
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	2104      	movs	r1, #4
		ret1 = ret[0] | 0x80;
 800d6f0:	f88d c002 	strb.w	ip, [sp, #2]
		ret2 = ret[1] | 0x80;
 800d6f4:	f88d 3003 	strb.w	r3, [sp, #3]
		CS_RESET;
 800d6f8:	f002 fd0c 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d6fc:	f10d 0102 	add.w	r1, sp, #2
 800d700:	4628      	mov	r0, r5
 800d702:	2364      	movs	r3, #100	; 0x64
 800d704:	2201      	movs	r2, #1
 800d706:	f003 f9fd 	bl	8010b04 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val1,1,100);
 800d70a:	2364      	movs	r3, #100	; 0x64
 800d70c:	a901      	add	r1, sp, #4
 800d70e:	4628      	mov	r0, r5
 800d710:	2201      	movs	r2, #1
 800d712:	f003 fb2b 	bl	8010d6c <HAL_SPI_Receive>
		CS_SET;
 800d716:	4620      	mov	r0, r4
 800d718:	2201      	movs	r2, #1
 800d71a:	2104      	movs	r1, #4
 800d71c:	f002 fcfa 	bl	8010114 <HAL_GPIO_WritePin>

		CS_RESET;
 800d720:	4620      	mov	r0, r4
 800d722:	2200      	movs	r2, #0
 800d724:	2104      	movs	r1, #4
 800d726:	f002 fcf5 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800d72a:	f10d 0103 	add.w	r1, sp, #3
 800d72e:	4628      	mov	r0, r5
 800d730:	2364      	movs	r3, #100	; 0x64
 800d732:	2201      	movs	r2, #1
 800d734:	f003 f9e6 	bl	8010b04 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val2,1,100);
 800d738:	2364      	movs	r3, #100	; 0x64
 800d73a:	f10d 0105 	add.w	r1, sp, #5
 800d73e:	4628      	mov	r0, r5
 800d740:	2201      	movs	r2, #1
 800d742:	f003 fb13 	bl	8010d6c <HAL_SPI_Receive>
		CS_SET;
 800d746:	4620      	mov	r0, r4
 800d748:	2104      	movs	r1, #4
 800d74a:	2201      	movs	r2, #1
 800d74c:	f002 fce2 	bl	8010114 <HAL_GPIO_WritePin>
		law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );
 800d750:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d754:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d758:	a802      	add	r0, sp, #8
 800d75a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d75e:	f820 3d02 	strh.w	r3, [r0, #-2]!

		//static int16_t zg_last=0;
		int16_t zg_median;

		//2000回目で0.17
		zg_median = median_filter(&law_data);
 800d762:	f7ff ff99 	bl	800d698 <median_filter>
		ZGFilterd = zg_median;
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800d766:	ee07 0a90 	vmov	s15, r0
 800d76a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800d7e0 <Update_IMU+0x108>
 800d76e:	4b1d      	ldr	r3, [pc, #116]	; (800d7e4 <Update_IMU+0x10c>)
		ZGFilterd = zg_median;
 800d770:	4a1d      	ldr	r2, [pc, #116]	; (800d7e8 <Update_IMU+0x110>)
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800d772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ZGFilterd = zg_median;
 800d776:	8010      	strh	r0, [r2, #0]
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800d778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d77c:	edc3 7a00 	vstr	s15, [r3]
		*angv = -((0.01*ZGyro) + (0.99)* (zg_last));
		zg_last = ZGyro;
		//Angle;
		*angle += *angv *0.001;
#else
		*angv = -ZGyro; //角速度 rad / s
 800d780:	edd3 7a00 	vldr	s15, [r3]
 800d784:	eef1 7a67 	vneg.f32	s15, s15
 800d788:	edc7 7a00 	vstr	s15, [r7]

		//Angle;
		*angle += *angv * 0.001  - 0.000001784;//- 0.0000018432; //角度 rad
 800d78c:	ee17 0a90 	vmov	r0, s15
 800d790:	f7fa fe12 	bl	80083b8 <__aeabi_f2d>
 800d794:	a30c      	add	r3, pc, #48	; (adr r3, 800d7c8 <Update_IMU+0xf0>)
 800d796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79a:	f7fa fe65 	bl	8008468 <__aeabi_dmul>
 800d79e:	a30c      	add	r3, pc, #48	; (adr r3, 800d7d0 <Update_IMU+0xf8>)
 800d7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a4:	f7fa fca8 	bl	80080f8 <__aeabi_dsub>
 800d7a8:	4604      	mov	r4, r0
 800d7aa:	6830      	ldr	r0, [r6, #0]
 800d7ac:	460d      	mov	r5, r1
 800d7ae:	f7fa fe03 	bl	80083b8 <__aeabi_f2d>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	f7fa fc9f 	bl	80080fc <__adddf3>
 800d7be:	f7fb f94b 	bl	8008a58 <__aeabi_d2f>
 800d7c2:	6030      	str	r0, [r6, #0]
	//*angv = -((0.01*zg_law) + (0.99)* (zg_last));
	zg_last = zg_law;
	//Angle;
	*angle += *angv *0.001;
#endif
}
 800d7c4:	b003      	add	sp, #12
 800d7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7c8:	d2f1a9fc 	.word	0xd2f1a9fc
 800d7cc:	3f50624d 	.word	0x3f50624d
 800d7d0:	be73a9d7 	.word	0xbe73a9d7
 800d7d4:	3ebdee38 	.word	0x3ebdee38
 800d7d8:	40020c00 	.word	0x40020c00
 800d7dc:	20008d30 	.word	0x20008d30
 800d7e0:	3a8b7d78 	.word	0x3a8b7d78
 800d7e4:	20007fe0 	.word	0x20007fe0
 800d7e8:	20008f18 	.word	0x20008f18

0800d7ec <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	b084      	sub	sp, #16
	uint8_t ret;

	ret = reg & 0x7F;
 800d7f0:	ac04      	add	r4, sp, #16
	CS_RESET;
 800d7f2:	4d10      	ldr	r5, [pc, #64]	; (800d834 <write_byte+0x48>)
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800d7f4:	4e10      	ldr	r6, [pc, #64]	; (800d838 <write_byte+0x4c>)
void write_byte( uint8_t reg, uint8_t val )  {
 800d7f6:	f88d 1007 	strb.w	r1, [sp, #7]
	ret = reg & 0x7F;
 800d7fa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d7fe:	f804 0d01 	strb.w	r0, [r4, #-1]!
	CS_RESET;
 800d802:	2200      	movs	r2, #0
 800d804:	4628      	mov	r0, r5
 800d806:	2104      	movs	r1, #4
 800d808:	f002 fc84 	bl	8010114 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800d80c:	4621      	mov	r1, r4
 800d80e:	4630      	mov	r0, r6
 800d810:	2364      	movs	r3, #100	; 0x64
 800d812:	2201      	movs	r2, #1
 800d814:	f003 f976 	bl	8010b04 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800d818:	2364      	movs	r3, #100	; 0x64
 800d81a:	f10d 0107 	add.w	r1, sp, #7
 800d81e:	4630      	mov	r0, r6
 800d820:	2201      	movs	r2, #1
 800d822:	f003 f96f 	bl	8010b04 <HAL_SPI_Transmit>
	CS_SET;
 800d826:	4628      	mov	r0, r5
 800d828:	2201      	movs	r2, #1
 800d82a:	2104      	movs	r1, #4
 800d82c:	f002 fc72 	bl	8010114 <HAL_GPIO_WritePin>
}
 800d830:	b004      	add	sp, #16
 800d832:	bd70      	pop	{r4, r5, r6, pc}
 800d834:	40020c00 	.word	0x40020c00
 800d838:	20008d30 	.word	0x20008d30

0800d83c <IMU_init>:

uint8_t IMU_init() {
 800d83c:	b510      	push	{r4, lr}
 800d83e:	b082      	sub	sp, #8
	ret = reg | 0x80;
 800d840:	ac02      	add	r4, sp, #8
 800d842:	2380      	movs	r3, #128	; 0x80
 800d844:	f804 3d02 	strb.w	r3, [r4, #-2]!
	CS_RESET;
 800d848:	2200      	movs	r2, #0
 800d84a:	2104      	movs	r1, #4
 800d84c:	481b      	ldr	r0, [pc, #108]	; (800d8bc <IMU_init+0x80>)
 800d84e:	f002 fc61 	bl	8010114 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800d852:	4621      	mov	r1, r4
 800d854:	2364      	movs	r3, #100	; 0x64
 800d856:	2201      	movs	r2, #1
 800d858:	4819      	ldr	r0, [pc, #100]	; (800d8c0 <IMU_init+0x84>)
 800d85a:	f003 f953 	bl	8010b04 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800d85e:	2364      	movs	r3, #100	; 0x64
 800d860:	2201      	movs	r2, #1
 800d862:	f10d 0107 	add.w	r1, sp, #7
 800d866:	4816      	ldr	r0, [pc, #88]	; (800d8c0 <IMU_init+0x84>)
 800d868:	f003 fa80 	bl	8010d6c <HAL_SPI_Receive>
	CS_SET;
 800d86c:	2201      	movs	r2, #1
 800d86e:	2104      	movs	r1, #4
 800d870:	4812      	ldr	r0, [pc, #72]	; (800d8bc <IMU_init+0x80>)
 800d872:	f002 fc4f 	bl	8010114 <HAL_GPIO_WritePin>
	return val;
 800d876:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
	if ( who_am_i == 0xE0 ) {
 800d87a:	2be0      	cmp	r3, #224	; 0xe0
 800d87c:	d002      	beq.n	800d884 <IMU_init+0x48>
		write_byte(0x7F,0x00);	//USER_BANK0
	}
	return ret;
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 800d87e:	2001      	movs	r0, #1
 800d880:	b002      	add	sp, #8
 800d882:	bd10      	pop	{r4, pc}
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800d884:	2101      	movs	r1, #1
 800d886:	2006      	movs	r0, #6
 800d888:	f7ff ffb0 	bl	800d7ec <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800d88c:	2110      	movs	r1, #16
 800d88e:	2003      	movs	r0, #3
 800d890:	f7ff ffac 	bl	800d7ec <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800d894:	2120      	movs	r1, #32
 800d896:	207f      	movs	r0, #127	; 0x7f
 800d898:	f7ff ffa8 	bl	800d7ec <write_byte>
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800d89c:	2117      	movs	r1, #23
 800d89e:	2001      	movs	r0, #1
 800d8a0:	f7ff ffa4 	bl	800d7ec <write_byte>
		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 800d8a4:	2117      	movs	r1, #23
 800d8a6:	2014      	movs	r0, #20
 800d8a8:	f7ff ffa0 	bl	800d7ec <write_byte>
		write_byte(0x7F,0x00);	//USER_BANK0
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	207f      	movs	r0, #127	; 0x7f
 800d8b0:	f7ff ff9c 	bl	800d7ec <write_byte>
}
 800d8b4:	2001      	movs	r0, #1
 800d8b6:	b002      	add	sp, #8
 800d8b8:	bd10      	pop	{r4, pc}
 800d8ba:	bf00      	nop
 800d8bc:	40020c00 	.word	0x40020c00
 800d8c0:	20008d30 	.word	0x20008d30

0800d8c4 <IMU_Calib>:
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
}

void IMU_Calib(){
 800d8c4:	b538      	push	{r3, r4, r5, lr}


	HAL_Delay(100);
 800d8c6:	2064      	movs	r0, #100	; 0x64
void IMU_Calib(){
 800d8c8:	ed2d 8b02 	vpush	{d8}
	HAL_Delay(100);
 800d8cc:	f000 ff4e 	bl	800e76c <HAL_Delay>

	int num = 2000;
	float zg_vals[2000]={0.0f};
	float sum=0;
 800d8d0:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 800d900 <IMU_Calib+0x3c>
 800d8d4:	4d0b      	ldr	r5, [pc, #44]	; (800d904 <IMU_Calib+0x40>)
	HAL_Delay(100);
 800d8d6:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	for(int i = 0; i < num; i++){
		zg_vals[i] = ZGyro;
 800d8da:	edd5 7a00 	vldr	s15, [r5]
		sum += zg_vals[i];
		HAL_Delay(2);
 800d8de:	2002      	movs	r0, #2
		sum += zg_vals[i];
 800d8e0:	ee38 8a27 	vadd.f32	s16, s16, s15
		HAL_Delay(2);
 800d8e4:	f000 ff42 	bl	800e76c <HAL_Delay>
	for(int i = 0; i < num; i++){
 800d8e8:	3c01      	subs	r4, #1
 800d8ea:	d1f6      	bne.n	800d8da <IMU_Calib+0x16>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / 2000.0f;
 800d8ec:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800d908 <IMU_Calib+0x44>
 800d8f0:	4b06      	ldr	r3, [pc, #24]	; (800d90c <IMU_Calib+0x48>)
 800d8f2:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 800d8f6:	ecbd 8b02 	vpop	{d8}
	zg_offset = sum / 2000.0f;
 800d8fa:	edc3 7a00 	vstr	s15, [r3]
}
 800d8fe:	bd38      	pop	{r3, r4, r5, pc}
 800d900:	00000000 	.word	0x00000000
 800d904:	20007fe0 	.word	0x20007fe0
 800d908:	44fa0000 	.word	0x44fa0000
 800d90c:	20007fec 	.word	0x20007fec

0800d910 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800d910:	b580      	push	{r7, lr}
 800d912:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800d914:	213c      	movs	r1, #60	; 0x3c
 800d916:	4804      	ldr	r0, [pc, #16]	; (800d928 <EncoderStart+0x18>)
 800d918:	f004 f910 	bl	8011b3c <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800d91c:	213c      	movs	r1, #60	; 0x3c
 800d91e:	4803      	ldr	r0, [pc, #12]	; (800d92c <EncoderStart+0x1c>)
 800d920:	f004 f90c 	bl	8011b3c <HAL_TIM_Encoder_Start>
}
 800d924:	bf00      	nop
 800d926:	bd80      	pop	{r7, pc}
 800d928:	20008cf0 	.word	0x20008cf0
 800d92c:	20008c68 	.word	0x20008c68

0800d930 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800d930:	b580      	push	{r7, lr}
 800d932:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800d934:	2100      	movs	r1, #0
 800d936:	4804      	ldr	r0, [pc, #16]	; (800d948 <EmitterON+0x18>)
 800d938:	f003 fe84 	bl	8011644 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800d93c:	2100      	movs	r1, #0
 800d93e:	4802      	ldr	r0, [pc, #8]	; (800d948 <EmitterON+0x18>)
 800d940:	f004 ff97 	bl	8012872 <HAL_TIMEx_OCN_Start_IT>

}
 800d944:	bf00      	nop
 800d946:	bd80      	pop	{r7, pc}
 800d948:	20008c28 	.word	0x20008c28

0800d94c <EmitterOFF>:
void EmitterOFF()
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800d950:	2100      	movs	r1, #0
 800d952:	4804      	ldr	r0, [pc, #16]	; (800d964 <EmitterOFF+0x18>)
 800d954:	f003 fefa 	bl	801174c <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800d958:	2100      	movs	r1, #0
 800d95a:	4802      	ldr	r0, [pc, #8]	; (800d964 <EmitterOFF+0x18>)
 800d95c:	f004 ffde 	bl	801291c <HAL_TIMEx_OCN_Stop_IT>

}
 800d960:	bf00      	nop
 800d962:	bd80      	pop	{r7, pc}
 800d964:	20008c28 	.word	0x20008c28

0800d968 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2b07      	cmp	r3, #7
 800d974:	f200 80ac 	bhi.w	800dad0 <ChangeLED+0x168>
 800d978:	a201      	add	r2, pc, #4	; (adr r2, 800d980 <ChangeLED+0x18>)
 800d97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d97e:	bf00      	nop
 800d980:	0800d9a1 	.word	0x0800d9a1
 800d984:	0800d9c7 	.word	0x0800d9c7
 800d988:	0800d9ed 	.word	0x0800d9ed
 800d98c:	0800da13 	.word	0x0800da13
 800d990:	0800da39 	.word	0x0800da39
 800d994:	0800da5f 	.word	0x0800da5f
 800d998:	0800da85 	.word	0x0800da85
 800d99c:	0800daab 	.word	0x0800daab
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9a6:	484d      	ldr	r0, [pc, #308]	; (800dadc <ChangeLED+0x174>)
 800d9a8:	f002 fbb4 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d9b2:	484a      	ldr	r0, [pc, #296]	; (800dadc <ChangeLED+0x174>)
 800d9b4:	f002 fbae 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9be:	4848      	ldr	r0, [pc, #288]	; (800dae0 <ChangeLED+0x178>)
 800d9c0:	f002 fba8 	bl	8010114 <HAL_GPIO_WritePin>
		break;
 800d9c4:	e085      	b.n	800dad2 <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9cc:	4843      	ldr	r0, [pc, #268]	; (800dadc <ChangeLED+0x174>)
 800d9ce:	f002 fba1 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d9d8:	4840      	ldr	r0, [pc, #256]	; (800dadc <ChangeLED+0x174>)
 800d9da:	f002 fb9b 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9e4:	483e      	ldr	r0, [pc, #248]	; (800dae0 <ChangeLED+0x178>)
 800d9e6:	f002 fb95 	bl	8010114 <HAL_GPIO_WritePin>
		break;
 800d9ea:	e072      	b.n	800dad2 <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9f2:	483a      	ldr	r0, [pc, #232]	; (800dadc <ChangeLED+0x174>)
 800d9f4:	f002 fb8e 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d9fe:	4837      	ldr	r0, [pc, #220]	; (800dadc <ChangeLED+0x174>)
 800da00:	f002 fb88 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800da04:	2200      	movs	r2, #0
 800da06:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da0a:	4835      	ldr	r0, [pc, #212]	; (800dae0 <ChangeLED+0x178>)
 800da0c:	f002 fb82 	bl	8010114 <HAL_GPIO_WritePin>

		break;
 800da10:	e05f      	b.n	800dad2 <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800da12:	2201      	movs	r2, #1
 800da14:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da18:	4830      	ldr	r0, [pc, #192]	; (800dadc <ChangeLED+0x174>)
 800da1a:	f002 fb7b 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800da1e:	2201      	movs	r2, #1
 800da20:	f44f 7180 	mov.w	r1, #256	; 0x100
 800da24:	482d      	ldr	r0, [pc, #180]	; (800dadc <ChangeLED+0x174>)
 800da26:	f002 fb75 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800da2a:	2200      	movs	r2, #0
 800da2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da30:	482b      	ldr	r0, [pc, #172]	; (800dae0 <ChangeLED+0x178>)
 800da32:	f002 fb6f 	bl	8010114 <HAL_GPIO_WritePin>
		break;
 800da36:	e04c      	b.n	800dad2 <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800da38:	2200      	movs	r2, #0
 800da3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da3e:	4827      	ldr	r0, [pc, #156]	; (800dadc <ChangeLED+0x174>)
 800da40:	f002 fb68 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800da44:	2200      	movs	r2, #0
 800da46:	f44f 7180 	mov.w	r1, #256	; 0x100
 800da4a:	4824      	ldr	r0, [pc, #144]	; (800dadc <ChangeLED+0x174>)
 800da4c:	f002 fb62 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800da50:	2201      	movs	r2, #1
 800da52:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da56:	4822      	ldr	r0, [pc, #136]	; (800dae0 <ChangeLED+0x178>)
 800da58:	f002 fb5c 	bl	8010114 <HAL_GPIO_WritePin>
		break;
 800da5c:	e039      	b.n	800dad2 <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800da5e:	2201      	movs	r2, #1
 800da60:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da64:	481d      	ldr	r0, [pc, #116]	; (800dadc <ChangeLED+0x174>)
 800da66:	f002 fb55 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800da6a:	2200      	movs	r2, #0
 800da6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800da70:	481a      	ldr	r0, [pc, #104]	; (800dadc <ChangeLED+0x174>)
 800da72:	f002 fb4f 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800da76:	2201      	movs	r2, #1
 800da78:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da7c:	4818      	ldr	r0, [pc, #96]	; (800dae0 <ChangeLED+0x178>)
 800da7e:	f002 fb49 	bl	8010114 <HAL_GPIO_WritePin>
		break;
 800da82:	e026      	b.n	800dad2 <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800da84:	2200      	movs	r2, #0
 800da86:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da8a:	4814      	ldr	r0, [pc, #80]	; (800dadc <ChangeLED+0x174>)
 800da8c:	f002 fb42 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800da90:	2201      	movs	r2, #1
 800da92:	f44f 7180 	mov.w	r1, #256	; 0x100
 800da96:	4811      	ldr	r0, [pc, #68]	; (800dadc <ChangeLED+0x174>)
 800da98:	f002 fb3c 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800da9c:	2201      	movs	r2, #1
 800da9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800daa2:	480f      	ldr	r0, [pc, #60]	; (800dae0 <ChangeLED+0x178>)
 800daa4:	f002 fb36 	bl	8010114 <HAL_GPIO_WritePin>

		break;
 800daa8:	e013      	b.n	800dad2 <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800daaa:	2201      	movs	r2, #1
 800daac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dab0:	480a      	ldr	r0, [pc, #40]	; (800dadc <ChangeLED+0x174>)
 800dab2:	f002 fb2f 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800dab6:	2201      	movs	r2, #1
 800dab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dabc:	4807      	ldr	r0, [pc, #28]	; (800dadc <ChangeLED+0x174>)
 800dabe:	f002 fb29 	bl	8010114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800dac2:	2201      	movs	r2, #1
 800dac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dac8:	4805      	ldr	r0, [pc, #20]	; (800dae0 <ChangeLED+0x178>)
 800daca:	f002 fb23 	bl	8010114 <HAL_GPIO_WritePin>

		break;
 800dace:	e000      	b.n	800dad2 <ChangeLED+0x16a>
	default: break;
 800dad0:	bf00      	nop

	}
}
 800dad2:	bf00      	nop
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	40020800 	.word	0x40020800
 800dae0:	40020400 	.word	0x40020400

0800dae4 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800dae4:	b580      	push	{r7, lr}
 800dae6:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800dae8:	210c      	movs	r1, #12
 800daea:	4809      	ldr	r0, [pc, #36]	; (800db10 <Motor_PWM_Start+0x2c>)
 800daec:	f003 fefe 	bl	80118ec <HAL_TIM_PWM_Start>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d001      	beq.n	800dafa <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800daf6:	f7fe fdad 	bl	800c654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800dafa:	2104      	movs	r1, #4
 800dafc:	4805      	ldr	r0, [pc, #20]	; (800db14 <Motor_PWM_Start+0x30>)
 800dafe:	f003 fef5 	bl	80118ec <HAL_TIM_PWM_Start>
 800db02:	4603      	mov	r3, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	d001      	beq.n	800db0c <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800db08:	f7fe fda4 	bl	800c654 <Error_Handler>
  }
#endif
}
 800db0c:	bf00      	nop
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	20007f4c 	.word	0x20007f4c
 800db14:	20007f8c 	.word	0x20007f8c

0800db18 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800db18:	b580      	push	{r7, lr}
 800db1a:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800db1c:	210c      	movs	r1, #12
 800db1e:	4809      	ldr	r0, [pc, #36]	; (800db44 <Motor_PWM_Stop+0x2c>)
 800db20:	f003 ff22 	bl	8011968 <HAL_TIM_PWM_Stop>
 800db24:	4603      	mov	r3, r0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d001      	beq.n	800db2e <Motor_PWM_Stop+0x16>
  {
	  Error_Handler();
 800db2a:	f7fe fd93 	bl	800c654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800db2e:	2104      	movs	r1, #4
 800db30:	4805      	ldr	r0, [pc, #20]	; (800db48 <Motor_PWM_Stop+0x30>)
 800db32:	f003 ff19 	bl	8011968 <HAL_TIM_PWM_Stop>
 800db36:	4603      	mov	r3, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d001      	beq.n	800db40 <Motor_PWM_Stop+0x28>
  {
	  Error_Handler();
 800db3c:	f7fe fd8a 	bl	800c654 <Error_Handler>
  }
#endif
}
 800db40:	bf00      	nop
 800db42:	bd80      	pop	{r7, pc}
 800db44:	20007f4c 	.word	0x20007f4c
 800db48:	20007f8c 	.word	0x20007f8c
 800db4c:	00000000 	.word	0x00000000

0800db50 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	dd05      	ble.n	800db6c <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800db60:	2201      	movs	r2, #1
 800db62:	2104      	movs	r1, #4
 800db64:	4828      	ldr	r0, [pc, #160]	; (800dc08 <Motor_Switch+0xb8>)
 800db66:	f002 fad5 	bl	8010114 <HAL_GPIO_WritePin>
 800db6a:	e00a      	b.n	800db82 <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	da07      	bge.n	800db82 <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800db72:	2200      	movs	r2, #0
 800db74:	2104      	movs	r1, #4
 800db76:	4824      	ldr	r0, [pc, #144]	; (800dc08 <Motor_Switch+0xb8>)
 800db78:	f002 facc 	bl	8010114 <HAL_GPIO_WritePin>
		left = -left;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	425b      	negs	r3, r3
 800db80:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	dd05      	ble.n	800db94 <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800db88:	2200      	movs	r2, #0
 800db8a:	2101      	movs	r1, #1
 800db8c:	481e      	ldr	r0, [pc, #120]	; (800dc08 <Motor_Switch+0xb8>)
 800db8e:	f002 fac1 	bl	8010114 <HAL_GPIO_WritePin>
 800db92:	e00a      	b.n	800dbaa <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	da07      	bge.n	800dbaa <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800db9a:	2201      	movs	r2, #1
 800db9c:	2101      	movs	r1, #1
 800db9e:	481a      	ldr	r0, [pc, #104]	; (800dc08 <Motor_Switch+0xb8>)
 800dba0:	f002 fab8 	bl	8010114 <HAL_GPIO_WritePin>
	  	right = -right;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	425b      	negs	r3, r3
 800dba8:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f7fa fbf2 	bl	8008394 <__aeabi_i2d>
 800dbb0:	a313      	add	r3, pc, #76	; (adr r3, 800dc00 <Motor_Switch+0xb0>)
 800dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb6:	f7fa fee7 	bl	8008988 <__aeabi_dcmpgt>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d002      	beq.n	800dbc6 <Motor_Switch+0x76>
 800dbc0:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800dbc4:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800dbc6:	6838      	ldr	r0, [r7, #0]
 800dbc8:	f7fa fbe4 	bl	8008394 <__aeabi_i2d>
 800dbcc:	a30c      	add	r3, pc, #48	; (adr r3, 800dc00 <Motor_Switch+0xb0>)
 800dbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd2:	f7fa fed9 	bl	8008988 <__aeabi_dcmpgt>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d002      	beq.n	800dbe2 <Motor_Switch+0x92>
 800dbdc:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800dbe0:	603b      	str	r3, [r7, #0]


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800dbe2:	4b0a      	ldr	r3, [pc, #40]	; (800dc0c <Motor_Switch+0xbc>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	683a      	ldr	r2, [r7, #0]
 800dbe8:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800dbea:	4b09      	ldr	r3, [pc, #36]	; (800dc10 <Motor_Switch+0xc0>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	641a      	str	r2, [r3, #64]	; 0x40
}
 800dbf2:	bf00      	nop
 800dbf4:	3708      	adds	r7, #8
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	f3af 8000 	nop.w
 800dc00:	00000000 	.word	0x00000000
 800dc04:	40a3b000 	.word	0x40a3b000
 800dc08:	40020000 	.word	0x40020000
 800dc0c:	20007f8c 	.word	0x20007f8c
 800dc10:	20007f4c 	.word	0x20007f4c

0800dc14 <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	683a      	ldr	r2, [r7, #0]
 800dc22:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800dc24:	bf00      	nop
 800dc26:	370c      	adds	r7, #12
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b087      	sub	sp, #28
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	60f8      	str	r0, [r7, #12]
 800dc38:	60b9      	str	r1, [r7, #8]
 800dc3a:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 800dc40:	4a2c      	ldr	r2, [pc, #176]	; (800dcf4 <GetWallDataAverage+0xc4>)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	1ad3      	subs	r3, r2, r3
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	bfb8      	it	lt
 800dc50:	425b      	neglt	r3, r3
 800dc52:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 800dc54:	4927      	ldr	r1, [pc, #156]	; (800dcf4 <GetWallDataAverage+0xc4>)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	697a      	ldr	r2, [r7, #20]
 800dc5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 800dc5e:	4a26      	ldr	r2, [pc, #152]	; (800dcf8 <GetWallDataAverage+0xc8>)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	441a      	add	r2, r3
 800dc6a:	4923      	ldr	r1, [pc, #140]	; (800dcf8 <GetWallDataAverage+0xc8>)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 800dc72:	4a22      	ldr	r2, [pc, #136]	; (800dcfc <GetWallDataAverage+0xcc>)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc7a:	1c5a      	adds	r2, r3, #1
 800dc7c:	491f      	ldr	r1, [pc, #124]	; (800dcfc <GetWallDataAverage+0xcc>)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800dc84:	4a1d      	ldr	r2, [pc, #116]	; (800dcfc <GetWallDataAverage+0xcc>)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc8c:	68fa      	ldr	r2, [r7, #12]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d121      	bne.n	800dcd6 <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800dc92:	4a19      	ldr	r2, [pc, #100]	; (800dcf8 <GetWallDataAverage+0xc8>)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc9a:	ee07 3a90 	vmov	s15, r3
 800dc9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800dca2:	4a16      	ldr	r2, [pc, #88]	; (800dcfc <GetWallDataAverage+0xcc>)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcaa:	ee07 3a90 	vmov	s15, r3
 800dcae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dcb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcb6:	4a12      	ldr	r2, [pc, #72]	; (800dd00 <GetWallDataAverage+0xd0>)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	4413      	add	r3, r2
 800dcbe:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 800dcc2:	4a0d      	ldr	r2, [pc, #52]	; (800dcf8 <GetWallDataAverage+0xc8>)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2100      	movs	r1, #0
 800dcc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 800dccc:	4a0b      	ldr	r2, [pc, #44]	; (800dcfc <GetWallDataAverage+0xcc>)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2100      	movs	r1, #0
 800dcd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 800dcd6:	4a0a      	ldr	r2, [pc, #40]	; (800dd00 <GetWallDataAverage+0xd0>)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	4413      	add	r3, r2
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	ee07 3a90 	vmov	s15, r3
}
 800dce4:	eeb0 0a67 	vmov.f32	s0, s15
 800dce8:	371c      	adds	r7, #28
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	20007ff0 	.word	0x20007ff0
 800dcf8:	20008000 	.word	0x20008000
 800dcfc:	20008010 	.word	0x20008010
 800dd00:	20008020 	.word	0x20008020

0800dd04 <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 800dd04:	b480      	push	{r7}
 800dd06:	b087      	sub	sp, #28
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	ed87 0a02 	vstr	s0, [r7, #8]
 800dd10:	edc7 0a01 	vstr	s1, [r7, #4]
 800dd14:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 800dd18:	f04f 0300 	mov.w	r3, #0
 800dd1c:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	ee07 3a90 	vmov	s15, r3
 800dd24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dd28:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd30:	edd7 7a01 	vldr	s15, [r7, #4]
 800dd34:	ee67 6a27 	vmul.f32	s13, s14, s15
 800dd38:	ed97 7a00 	vldr	s14, [r7]
 800dd3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd40:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	ee07 3a90 	vmov	s15, r3
}
 800dd4a:	eeb0 0a67 	vmov.f32	s0, s15
 800dd4e:	371c      	adds	r7, #28
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b085      	sub	sp, #20
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 800dd62:	2301      	movs	r3, #1
 800dd64:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800dd66:	2300      	movs	r3, #0
 800dd68:	60bb      	str	r3, [r7, #8]
 800dd6a:	e007      	b.n	800dd7c <IntegerPower+0x24>
	{
		pattern_num *= integer;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	fb02 f303 	mul.w	r3, r2, r3
 800dd74:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	3301      	adds	r3, #1
 800dd7a:	60bb      	str	r3, [r7, #8]
 800dd7c:	68ba      	ldr	r2, [r7, #8]
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	dbf3      	blt.n	800dd6c <IntegerPower+0x14>
	}
	return pattern_num;
 800dd84:	68fb      	ldr	r3, [r7, #12]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3714      	adds	r7, #20
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr

0800dd92 <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 800dd92:	b480      	push	{r7}
 800dd94:	b08b      	sub	sp, #44	; 0x2c
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	ed87 0a03 	vstr	s0, [r7, #12]
 800dd9c:	edc7 0a02 	vstr	s1, [r7, #8]
 800dda0:	ed87 1a01 	vstr	s2, [r7, #4]
 800dda4:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 800dda6:	edd7 6a03 	vldr	s13, [r7, #12]
 800ddaa:	ed97 7a01 	vldr	s14, [r7, #4]
 800ddae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddb2:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 800ddb6:	edd7 6a02 	vldr	s13, [r7, #8]
 800ddba:	ed97 7a01 	vldr	s14, [r7, #4]
 800ddbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddc2:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800ddc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddca:	edd7 7a06 	vldr	s15, [r7, #24]
 800ddce:	ee77 6a67 	vsub.f32	s13, s14, s15
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	ee07 3a90 	vmov	s15, r3
 800ddd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dde0:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 800dde4:	2300      	movs	r3, #0
 800dde6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800dde8:	2300      	movs	r3, #0
 800ddea:	623b      	str	r3, [r7, #32]
 800ddec:	e018      	b.n	800de20 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800ddee:	6a3b      	ldr	r3, [r7, #32]
 800ddf0:	ee07 3a90 	vmov	s15, r3
 800ddf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ddf8:	edd7 7a05 	vldr	s15, [r7, #20]
 800ddfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de00:	edd7 7a06 	vldr	s15, [r7, #24]
 800de04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de08:	ed97 7a07 	vldr	s14, [r7, #28]
 800de0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de14:	db01      	blt.n	800de1a <GetBatteryLevel+0x88>
		{
			pattern = i;
 800de16:	6a3b      	ldr	r3, [r7, #32]
 800de18:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800de1a:	6a3b      	ldr	r3, [r7, #32]
 800de1c:	3301      	adds	r3, #1
 800de1e:	623b      	str	r3, [r7, #32]
 800de20:	6a3a      	ldr	r2, [r7, #32]
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	429a      	cmp	r2, r3
 800de26:	dbe2      	blt.n	800ddee <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 800de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	372c      	adds	r7, #44	; 0x2c
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr
	...

0800de38 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 800de38:	b510      	push	{r4, lr}
	  setbuf(stdout,NULL);
 800de3a:	4c06      	ldr	r4, [pc, #24]	; (800de54 <Buffering+0x1c>)
 800de3c:	6823      	ldr	r3, [r4, #0]
 800de3e:	2100      	movs	r1, #0
 800de40:	6898      	ldr	r0, [r3, #8]
 800de42:	f007 fca3 	bl	801578c <setbuf>
	  setbuf(stdin,NULL);
 800de46:	6823      	ldr	r3, [r4, #0]
 800de48:	2100      	movs	r1, #0
 800de4a:	6858      	ldr	r0, [r3, #4]
}
 800de4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  setbuf(stdin,NULL);
 800de50:	f007 bc9c 	b.w	801578c <setbuf>
 800de54:	20000038 	.word	0x20000038

0800de58 <Copy_Gain>:
void Copy_Gain()
{
 800de58:	b570      	push	{r4, r5, r6, lr}
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
	float data[16]={0};
	data[0] = Pid[L_VELO_PID].KP;
 800de5a:	4b1c      	ldr	r3, [pc, #112]	; (800decc <Copy_Gain+0x74>)
	uint32_t address = start_adress_sector9;
 800de5c:	4c1c      	ldr	r4, [pc, #112]	; (800ded0 <Copy_Gain+0x78>)
	data[1] = Pid[L_VELO_PID].KI;
 800de5e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
	data[2] = Pid[L_VELO_PID].KD;
 800de62:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8

	data[3] = Pid[A_VELO_PID].KP;
 800de66:	6818      	ldr	r0, [r3, #0]
	data[4] = Pid[A_VELO_PID].KI;
 800de68:	6859      	ldr	r1, [r3, #4]
	data[0] = Pid[L_VELO_PID].KP;
 800de6a:	ed93 0a2c 	vldr	s0, [r3, #176]	; 0xb0
	data[6] = Pid[L_WALL_PID].KP;
	data[7] = Pid[L_WALL_PID].KI;
	data[8] = Pid[L_WALL_PID].KD;

	data[9] = Pid[R_WALL_PID].KP;
	data[10] = Pid[R_WALL_PID].KI;
 800de6e:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
	uint32_t address = start_adress_sector9;
 800de72:	6824      	ldr	r4, [r4, #0]
{
 800de74:	b090      	sub	sp, #64	; 0x40
	data[0] = Pid[L_VELO_PID].KP;
 800de76:	ed8d 0a00 	vstr	s0, [sp]
	data[1] = Pid[L_VELO_PID].KI;
 800de7a:	9201      	str	r2, [sp, #4]
	data[5] = Pid[A_VELO_PID].KD;
 800de7c:	689a      	ldr	r2, [r3, #8]
	data[2] = Pid[L_VELO_PID].KD;
 800de7e:	9502      	str	r5, [sp, #8]
	data[3] = Pid[A_VELO_PID].KP;
 800de80:	9003      	str	r0, [sp, #12]
	data[6] = Pid[L_WALL_PID].KP;
 800de82:	6d9d      	ldr	r5, [r3, #88]	; 0x58
	data[7] = Pid[L_WALL_PID].KI;
 800de84:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
	data[4] = Pid[A_VELO_PID].KI;
 800de86:	9104      	str	r1, [sp, #16]
	data[5] = Pid[A_VELO_PID].KD;
 800de88:	9205      	str	r2, [sp, #20]
	data[8] = Pid[L_WALL_PID].KD;
 800de8a:	6e19      	ldr	r1, [r3, #96]	; 0x60
	data[9] = Pid[R_WALL_PID].KP;
 800de8c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	data[6] = Pid[L_WALL_PID].KP;
 800de90:	9506      	str	r5, [sp, #24]
	data[7] = Pid[L_WALL_PID].KI;
 800de92:	9007      	str	r0, [sp, #28]
	data[11] = Pid[R_WALL_PID].KD;
 800de94:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c

	data[12] = Pid[D_WALL_PID].KP;
 800de98:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
	data[8] = Pid[L_WALL_PID].KD;
 800de9a:	9108      	str	r1, [sp, #32]
	data[9] = Pid[R_WALL_PID].KP;
 800de9c:	9209      	str	r2, [sp, #36]	; 0x24
	data[13] = Pid[D_WALL_PID].KI;
 800de9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
	data[14] = Pid[D_WALL_PID].KD;
 800dea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	data[10] = Pid[R_WALL_PID].KI;
 800dea2:	960a      	str	r6, [sp, #40]	; 0x28
	float data[16]={0};
 800dea4:	2300      	movs	r3, #0
	data[11] = Pid[R_WALL_PID].KD;
 800dea6:	950b      	str	r5, [sp, #44]	; 0x2c
	data[12] = Pid[D_WALL_PID].KP;
 800dea8:	900c      	str	r0, [sp, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 800deaa:	910d      	str	r1, [sp, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 800deac:	920e      	str	r2, [sp, #56]	; 0x38
 800deae:	ad01      	add	r5, sp, #4
	float data[16]={0};
 800deb0:	930f      	str	r3, [sp, #60]	; 0x3c
 800deb2:	ae0f      	add	r6, sp, #60	; 0x3c
 800deb4:	e001      	b.n	800deba <Copy_Gain+0x62>
 800deb6:	ecb5 0a01 	vldmia	r5!, {s0}
	for(int i=0; i < 15; i++)
	{

		FLASH_Write_Word_F( address, data[i]);
 800deba:	4620      	mov	r0, r4
 800debc:	f7ff faec 	bl	800d498 <FLASH_Write_Word_F>
	for(int i=0; i < 15; i++)
 800dec0:	42b5      	cmp	r5, r6
		address += 0x04;
 800dec2:	f104 0404 	add.w	r4, r4, #4
	for(int i=0; i < 15; i++)
 800dec6:	d1f6      	bne.n	800deb6 <Copy_Gain+0x5e>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 800dec8:	b010      	add	sp, #64	; 0x40
 800deca:	bd70      	pop	{r4, r5, r6, pc}
 800decc:	20008030 	.word	0x20008030
 800ded0:	08018e08 	.word	0x08018e08

0800ded4 <Load_Gain>:
void Load_Gain()
{
 800ded4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ded8:	ed2d 8b02 	vpush	{d8}
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 800dedc:	4b61      	ldr	r3, [pc, #388]	; (800e064 <Load_Gain+0x190>)
	uint8_t j=0;
	for(int i=0; i < 15; i++)
	{
		FLASH_Read_Word_F( address, &data[i]);
		address += 0x04;
		printf("%d, %f\r\n",i,data[i]);
 800dede:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800e080 <Load_Gain+0x1ac>
	uint32_t address = start_adress_sector9;//こっちか
 800dee2:	681f      	ldr	r7, [r3, #0]
		judge = isnanf(data[i]); //nanでなければ0
		printf("judge : %d\r\n", judge);
 800dee4:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800e084 <Load_Gain+0x1b0>
{
 800dee8:	b090      	sub	sp, #64	; 0x40
	float data[16]={0};//1個多く要素を作る。
 800deea:	4668      	mov	r0, sp
 800deec:	2240      	movs	r2, #64	; 0x40
 800deee:	2100      	movs	r1, #0
 800def0:	f005 fe6f 	bl	8013bd2 <memset>
 800def4:	466c      	mov	r4, sp
	for(int i=0; i < 15; i++)
 800def6:	2500      	movs	r5, #0
 800def8:	1b3f      	subs	r7, r7, r4
	uint8_t j=0;
 800defa:	46aa      	mov	sl, r5
		FLASH_Read_Word_F( address, &data[i]);
 800defc:	4621      	mov	r1, r4
 800defe:	1938      	adds	r0, r7, r4
 800df00:	f7ff faf4 	bl	800d4ec <FLASH_Read_Word_F>
		printf("%d, %f\r\n",i,data[i]);
 800df04:	6820      	ldr	r0, [r4, #0]
 800df06:	f7fa fa57 	bl	80083b8 <__aeabi_f2d>
 800df0a:	4602      	mov	r2, r0
 800df0c:	460b      	mov	r3, r1
 800df0e:	4648      	mov	r0, r9
 800df10:	4629      	mov	r1, r5
 800df12:	f007 f95d 	bl	80151d0 <iprintf>
		judge = isnanf(data[i]); //nanでなければ0
 800df16:	ecb4 8a01 	vldmia	r4!, {s16}
 800df1a:	eeb4 8a48 	vcmp.f32	s16, s16
 800df1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		printf("judge : %d\r\n", judge);
 800df22:	bf6c      	ite	vs
 800df24:	2101      	movvs	r1, #1
 800df26:	2100      	movvc	r1, #0
 800df28:	4640      	mov	r0, r8
 800df2a:	f007 f951 	bl	80151d0 <iprintf>
		if(judge == 1) //コンパイラでisnanfの結果が変わる
 800df2e:	eeb4 8a48 	vcmp.f32	s16, s16
 800df32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		{
			j++;
 800df36:	bf68      	it	vs
 800df38:	f10a 0a01 	addvs.w	sl, sl, #1
	for(int i=0; i < 15; i++)
 800df3c:	f105 0501 	add.w	r5, r5, #1
			j++;
 800df40:	bf68      	it	vs
 800df42:	fa5f fa8a 	uxtbvs.w	sl, sl
	for(int i=0; i < 15; i++)
 800df46:	2d0f      	cmp	r5, #15
 800df48:	d1d8      	bne.n	800defc <Load_Gain+0x28>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 800df4a:	4651      	mov	r1, sl
 800df4c:	4846      	ldr	r0, [pc, #280]	; (800e068 <Load_Gain+0x194>)
 800df4e:	f007 f93f 	bl	80151d0 <iprintf>
		if(j == 15)//全てnan0であれば
 800df52:	f1ba 0f0f 	cmp.w	sl, #15
 800df56:	d03a      	beq.n	800dfce <Load_Gain+0xfa>
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			//2回目以降こっちが呼ばれる
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 800df58:	ed9d 1a02 	vldr	s2, [sp, #8]
 800df5c:	eddd 0a01 	vldr	s1, [sp, #4]
 800df60:	ed9d 0a00 	vldr	s0, [sp]
 800df64:	2004      	movs	r0, #4
 800df66:	f000 fa1b 	bl	800e3a0 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 800df6a:	ed9d 1a02 	vldr	s2, [sp, #8]
 800df6e:	eddd 0a01 	vldr	s1, [sp, #4]
 800df72:	ed9d 0a00 	vldr	s0, [sp]
 800df76:	2005      	movs	r0, #5
 800df78:	f000 fa12 	bl	800e3a0 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800df7c:	ed9d 1a05 	vldr	s2, [sp, #20]
 800df80:	eddd 0a04 	vldr	s1, [sp, #16]
 800df84:	ed9d 0a03 	vldr	s0, [sp, #12]
 800df88:	2000      	movs	r0, #0
 800df8a:	f000 fa09 	bl	800e3a0 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 800df8e:	ed9d 1a08 	vldr	s2, [sp, #32]
 800df92:	eddd 0a07 	vldr	s1, [sp, #28]
 800df96:	ed9d 0a06 	vldr	s0, [sp, #24]
 800df9a:	2002      	movs	r0, #2
 800df9c:	f000 fa00 	bl	800e3a0 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 800dfa0:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
 800dfa4:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
 800dfa8:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 800dfac:	2003      	movs	r0, #3
 800dfae:	f000 f9f7 	bl	800e3a0 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 800dfb2:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
 800dfb6:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
 800dfba:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
 800dfbe:	2001      	movs	r0, #1
 800dfc0:	f000 f9ee 	bl	800e3a0 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 800dfc4:	b010      	add	sp, #64	; 0x40
 800dfc6:	ecbd 8b02 	vpop	{d8}
 800dfca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("デフォルトゲインセット\r\n");
 800dfce:	4827      	ldr	r0, [pc, #156]	; (800e06c <Load_Gain+0x198>)
 800dfd0:	f007 f986 	bl	80152e0 <puts>
		  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);
 800dfd4:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800e070 <Load_Gain+0x19c>
 800dfd8:	eddf 0a26 	vldr	s1, [pc, #152]	; 800e074 <Load_Gain+0x1a0>
 800dfdc:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800e078 <Load_Gain+0x1a4>
 800dfe0:	2004      	movs	r0, #4
 800dfe2:	f000 f9dd 	bl	800e3a0 <PIDSetGain>
		  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);
 800dfe6:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800e070 <Load_Gain+0x19c>
 800dfea:	eddf 0a22 	vldr	s1, [pc, #136]	; 800e074 <Load_Gain+0x1a0>
 800dfee:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800e078 <Load_Gain+0x1a4>
 800dff2:	2005      	movs	r0, #5
 800dff4:	f000 f9d4 	bl	800e3a0 <PIDSetGain>
		  PIDSetGain(A_VELO_PID, 14.6,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800dff8:	ed9f 1a20 	vldr	s2, [pc, #128]	; 800e07c <Load_Gain+0x1a8>
 800dffc:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800e078 <Load_Gain+0x1a4>
 800e000:	eef0 0a41 	vmov.f32	s1, s2
 800e004:	2000      	movs	r0, #0
 800e006:	f000 f9cb 	bl	800e3a0 <PIDSetGain>
		  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800e00a:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 800e07c <Load_Gain+0x1a8>
 800e00e:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800e078 <Load_Gain+0x1a4>
 800e012:	eef0 0a41 	vmov.f32	s1, s2
 800e016:	2008      	movs	r0, #8
 800e018:	f000 f9c2 	bl	800e3a0 <PIDSetGain>
		  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800e01c:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800e07c <Load_Gain+0x1a8>
 800e020:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800e024:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800e028:	2001      	movs	r0, #1
 800e02a:	f000 f9b9 	bl	800e3a0 <PIDSetGain>
		  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800e02e:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800e07c <Load_Gain+0x1a8>
 800e032:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800e036:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e03a:	2002      	movs	r0, #2
 800e03c:	f000 f9b0 	bl	800e3a0 <PIDSetGain>
		  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800e040:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 800e07c <Load_Gain+0x1a8>
 800e044:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800e048:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e04c:	2003      	movs	r0, #3
 800e04e:	f000 f9a7 	bl	800e3a0 <PIDSetGain>
			Flash_clear_sector9();
 800e052:	f7ff fa9e 	bl	800d592 <Flash_clear_sector9>
			Copy_Gain();
 800e056:	f7ff feff 	bl	800de58 <Copy_Gain>
}
 800e05a:	b010      	add	sp, #64	; 0x40
 800e05c:	ecbd 8b02 	vpop	{d8}
 800e060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e064:	08018e08 	.word	0x08018e08
 800e068:	08018f4c 	.word	0x08018f4c
 800e06c:	08018f54 	.word	0x08018f54
 800e070:	3a83126f 	.word	0x3a83126f
 800e074:	452f0000 	.word	0x452f0000
 800e078:	4169999a 	.word	0x4169999a
 800e07c:	00000000 	.word	0x00000000
 800e080:	08018da0 	.word	0x08018da0
 800e084:	08018f44 	.word	0x08018f44

0800e088 <Change_Gain>:
void Change_Gain()
{
 800e088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 800e08c:	48a4      	ldr	r0, [pc, #656]	; (800e320 <Change_Gain+0x298>)
 800e08e:	4ca5      	ldr	r4, [pc, #660]	; (800e324 <Change_Gain+0x29c>)
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 800e090:	f8df 8304 	ldr.w	r8, [pc, #772]	; 800e398 <Change_Gain+0x310>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800e094:	4da4      	ldr	r5, [pc, #656]	; (800e328 <Change_Gain+0x2a0>)
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800e096:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800e39c <Change_Gain+0x314>
{
 800e09a:	b087      	sub	sp, #28
	HAL_TIM_Base_Stop_IT(&htim1);
 800e09c:	f003 fa71 	bl	8011582 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800e0a0:	48a2      	ldr	r0, [pc, #648]	; (800e32c <Change_Gain+0x2a4>)
 800e0a2:	f003 fa6e 	bl	8011582 <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 800e0a6:	f7ff fd37 	bl	800db18 <Motor_PWM_Stop>
	EmitterOFF();
 800e0aa:	f7ff fc4f 	bl	800d94c <EmitterOFF>
	HAL_Delay(200);
 800e0ae:	20c8      	movs	r0, #200	; 0xc8
 800e0b0:	f000 fb5c 	bl	800e76c <HAL_Delay>
	char change_mode='0';
 800e0b4:	2330      	movs	r3, #48	; 0x30
 800e0b6:	f88d 3015 	strb.w	r3, [sp, #21]
	char pid = '0';
 800e0ba:	f88d 3016 	strb.w	r3, [sp, #22]
		printf("現在のPIDゲイン\r\n");
 800e0be:	4640      	mov	r0, r8
 800e0c0:	f007 f90e 	bl	80152e0 <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800e0c4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800e0c8:	f7fa f976 	bl	80083b8 <__aeabi_f2d>
 800e0cc:	4606      	mov	r6, r0
 800e0ce:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800e0d2:	460f      	mov	r7, r1
 800e0d4:	f7fa f970 	bl	80083b8 <__aeabi_f2d>
 800e0d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0dc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800e0e0:	f7fa f96a 	bl	80083b8 <__aeabi_f2d>
 800e0e4:	4632      	mov	r2, r6
 800e0e6:	463b      	mov	r3, r7
 800e0e8:	e9cd 0100 	strd	r0, r1, [sp]
 800e0ec:	4628      	mov	r0, r5
 800e0ee:	f007 f86f 	bl	80151d0 <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800e0f2:	6820      	ldr	r0, [r4, #0]
 800e0f4:	f7fa f960 	bl	80083b8 <__aeabi_f2d>
 800e0f8:	4606      	mov	r6, r0
 800e0fa:	68a0      	ldr	r0, [r4, #8]
 800e0fc:	460f      	mov	r7, r1
 800e0fe:	f7fa f95b 	bl	80083b8 <__aeabi_f2d>
 800e102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e106:	6860      	ldr	r0, [r4, #4]
 800e108:	f7fa f956 	bl	80083b8 <__aeabi_f2d>
 800e10c:	4632      	mov	r2, r6
 800e10e:	463b      	mov	r3, r7
 800e110:	e9cd 0100 	strd	r0, r1, [sp]
 800e114:	4648      	mov	r0, r9
 800e116:	f007 f85b 	bl	80151d0 <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 800e11a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e11c:	f7fa f94c 	bl	80083b8 <__aeabi_f2d>
 800e120:	4606      	mov	r6, r0
 800e122:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800e124:	460f      	mov	r7, r1
 800e126:	f7fa f947 	bl	80083b8 <__aeabi_f2d>
 800e12a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e12e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800e130:	f7fa f942 	bl	80083b8 <__aeabi_f2d>
 800e134:	4632      	mov	r2, r6
 800e136:	463b      	mov	r3, r7
 800e138:	e9cd 0100 	strd	r0, r1, [sp]
 800e13c:	487c      	ldr	r0, [pc, #496]	; (800e330 <Change_Gain+0x2a8>)
 800e13e:	f007 f847 	bl	80151d0 <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 800e142:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800e146:	f7fa f937 	bl	80083b8 <__aeabi_f2d>
 800e14a:	4606      	mov	r6, r0
 800e14c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800e150:	460f      	mov	r7, r1
 800e152:	f7fa f931 	bl	80083b8 <__aeabi_f2d>
 800e156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e15a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800e15e:	f7fa f92b 	bl	80083b8 <__aeabi_f2d>
 800e162:	4632      	mov	r2, r6
 800e164:	463b      	mov	r3, r7
 800e166:	e9cd 0100 	strd	r0, r1, [sp]
 800e16a:	4872      	ldr	r0, [pc, #456]	; (800e334 <Change_Gain+0x2ac>)
 800e16c:	f007 f830 	bl	80151d0 <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 800e170:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e172:	f7fa f921 	bl	80083b8 <__aeabi_f2d>
 800e176:	4606      	mov	r6, r0
 800e178:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e17a:	460f      	mov	r7, r1
 800e17c:	f7fa f91c 	bl	80083b8 <__aeabi_f2d>
 800e180:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e184:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e186:	f7fa f917 	bl	80083b8 <__aeabi_f2d>
 800e18a:	463b      	mov	r3, r7
 800e18c:	e9cd 0100 	strd	r0, r1, [sp]
 800e190:	4632      	mov	r2, r6
 800e192:	4869      	ldr	r0, [pc, #420]	; (800e338 <Change_Gain+0x2b0>)
 800e194:	f007 f81c 	bl	80151d0 <iprintf>

		Buffering();
 800e198:	f7ff fe4e 	bl	800de38 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 800e19c:	4867      	ldr	r0, [pc, #412]	; (800e33c <Change_Gain+0x2b4>)
 800e19e:	f007 f817 	bl	80151d0 <iprintf>
 800e1a2:	f10d 0115 	add.w	r1, sp, #21
 800e1a6:	4866      	ldr	r0, [pc, #408]	; (800e340 <Change_Gain+0x2b8>)
 800e1a8:	f007 faa6 	bl	80156f8 <iscanf>
		if(change_mode == '0')
 800e1ac:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800e1b0:	2b30      	cmp	r3, #48	; 0x30
 800e1b2:	d066      	beq.n	800e282 <Change_Gain+0x1fa>
			break;
		}
		else
		{

			Buffering();
 800e1b4:	f7ff fe40 	bl	800de38 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 800e1b8:	4862      	ldr	r0, [pc, #392]	; (800e344 <Change_Gain+0x2bc>)
 800e1ba:	f007 f809 	bl	80151d0 <iprintf>
 800e1be:	f10d 0116 	add.w	r1, sp, #22
 800e1c2:	485f      	ldr	r0, [pc, #380]	; (800e340 <Change_Gain+0x2b8>)
 800e1c4:	f007 fa98 	bl	80156f8 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 800e1c8:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800e1cc:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800e1d0:	485d      	ldr	r0, [pc, #372]	; (800e348 <Change_Gain+0x2c0>)
 800e1d2:	f006 fffd 	bl	80151d0 <iprintf>

			Buffering();
 800e1d6:	f7ff fe2f 	bl	800de38 <Buffering>
			printf("\r\n値を入力 : ");
 800e1da:	485c      	ldr	r0, [pc, #368]	; (800e34c <Change_Gain+0x2c4>)
 800e1dc:	f006 fff8 	bl	80151d0 <iprintf>

			switch(change_mode)
 800e1e0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800e1e4:	3b31      	subs	r3, #49	; 0x31
 800e1e6:	2b04      	cmp	r3, #4
 800e1e8:	d85e      	bhi.n	800e2a8 <Change_Gain+0x220>
 800e1ea:	e8df f003 	tbb	[pc, r3]
 800e1ee:	303d      	.short	0x303d
 800e1f0:	1623      	.short	0x1623
 800e1f2:	03          	.byte	0x03
 800e1f3:	00          	.byte	0x00
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
			case '5'://壁制御ゲイン
				if(pid == 'p')
 800e1f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e1f8:	2b70      	cmp	r3, #112	; 0x70
 800e1fa:	d068      	beq.n	800e2ce <Change_Gain+0x246>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
				}
				else if(pid == 'i')
 800e1fc:	2b69      	cmp	r3, #105	; 0x69
 800e1fe:	d07f      	beq.n	800e300 <Change_Gain+0x278>
				{
					scanf("%f",&Pid[D_WALL_PID].KI);
				}
				else if(pid == 'd')
 800e200:	2b64      	cmp	r3, #100	; 0x64
 800e202:	d055      	beq.n	800e2b0 <Change_Gain+0x228>
				break;
			default :
				printf("該当しません\r\n");
				break;
			}
			Buffering();
 800e204:	f7ff fe18 	bl	800de38 <Buffering>
			scanf("%c",&nl);
 800e208:	f10d 0117 	add.w	r1, sp, #23
 800e20c:	484c      	ldr	r0, [pc, #304]	; (800e340 <Change_Gain+0x2b8>)
 800e20e:	f007 fa73 	bl	80156f8 <iscanf>
			printf("\r\n");
 800e212:	484f      	ldr	r0, [pc, #316]	; (800e350 <Change_Gain+0x2c8>)
 800e214:	f007 f864 	bl	80152e0 <puts>
		printf("現在のPIDゲイン\r\n");
 800e218:	e751      	b.n	800e0be <Change_Gain+0x36>
				if(pid == 'p')
 800e21a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e21e:	2b70      	cmp	r3, #112	; 0x70
 800e220:	d05a      	beq.n	800e2d8 <Change_Gain+0x250>
				else if(pid == 'i')
 800e222:	2b69      	cmp	r3, #105	; 0x69
 800e224:	d071      	beq.n	800e30a <Change_Gain+0x282>
				else if(pid == 'd')
 800e226:	2b64      	cmp	r3, #100	; 0x64
 800e228:	d1ec      	bne.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KD);
 800e22a:	494a      	ldr	r1, [pc, #296]	; (800e354 <Change_Gain+0x2cc>)
 800e22c:	484a      	ldr	r0, [pc, #296]	; (800e358 <Change_Gain+0x2d0>)
 800e22e:	f007 fa63 	bl	80156f8 <iscanf>
 800e232:	e7e7      	b.n	800e204 <Change_Gain+0x17c>
				if(pid == 'p')
 800e234:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e238:	2b70      	cmp	r3, #112	; 0x70
 800e23a:	d052      	beq.n	800e2e2 <Change_Gain+0x25a>
				else if(pid == 'i')
 800e23c:	2b69      	cmp	r3, #105	; 0x69
 800e23e:	d069      	beq.n	800e314 <Change_Gain+0x28c>
				else if(pid == 'd')
 800e240:	2b64      	cmp	r3, #100	; 0x64
 800e242:	d1df      	bne.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 800e244:	4945      	ldr	r1, [pc, #276]	; (800e35c <Change_Gain+0x2d4>)
 800e246:	4844      	ldr	r0, [pc, #272]	; (800e358 <Change_Gain+0x2d0>)
 800e248:	f007 fa56 	bl	80156f8 <iscanf>
 800e24c:	e7da      	b.n	800e204 <Change_Gain+0x17c>
				if(pid == 'p')
 800e24e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e252:	2b70      	cmp	r3, #112	; 0x70
 800e254:	d036      	beq.n	800e2c4 <Change_Gain+0x23c>
				else if(pid == 'i')
 800e256:	2b69      	cmp	r3, #105	; 0x69
 800e258:	d04d      	beq.n	800e2f6 <Change_Gain+0x26e>
				else if(pid == 'd')
 800e25a:	2b64      	cmp	r3, #100	; 0x64
 800e25c:	d1d2      	bne.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KD);
 800e25e:	4940      	ldr	r1, [pc, #256]	; (800e360 <Change_Gain+0x2d8>)
 800e260:	483d      	ldr	r0, [pc, #244]	; (800e358 <Change_Gain+0x2d0>)
 800e262:	f007 fa49 	bl	80156f8 <iscanf>
 800e266:	e7cd      	b.n	800e204 <Change_Gain+0x17c>
				if(pid == 'p')
 800e268:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e26c:	2b70      	cmp	r3, #112	; 0x70
 800e26e:	d024      	beq.n	800e2ba <Change_Gain+0x232>
				else if(pid == 'i')
 800e270:	2b69      	cmp	r3, #105	; 0x69
 800e272:	d03b      	beq.n	800e2ec <Change_Gain+0x264>
				else if(pid == 'd')
 800e274:	2b64      	cmp	r3, #100	; 0x64
 800e276:	d1c5      	bne.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KD);
 800e278:	493a      	ldr	r1, [pc, #232]	; (800e364 <Change_Gain+0x2dc>)
 800e27a:	4837      	ldr	r0, [pc, #220]	; (800e358 <Change_Gain+0x2d0>)
 800e27c:	f007 fa3c 	bl	80156f8 <iscanf>
 800e280:	e7c0      	b.n	800e204 <Change_Gain+0x17c>
		}

	}
	printf("\r\n完了\r\n");
 800e282:	4839      	ldr	r0, [pc, #228]	; (800e368 <Change_Gain+0x2e0>)
 800e284:	f007 f82c 	bl	80152e0 <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 800e288:	f7ff f983 	bl	800d592 <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 800e28c:	f7ff fde4 	bl	800de58 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 800e290:	2007      	movs	r0, #7
 800e292:	f7ff fb69 	bl	800d968 <ChangeLED>
	HAL_Delay(200);
 800e296:	20c8      	movs	r0, #200	; 0xc8
 800e298:	f000 fa68 	bl	800e76c <HAL_Delay>
	ChangeLED(0);
 800e29c:	2000      	movs	r0, #0
 800e29e:	f7ff fb63 	bl	800d968 <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 800e2a2:	b007      	add	sp, #28
 800e2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				printf("該当しません\r\n");
 800e2a8:	4830      	ldr	r0, [pc, #192]	; (800e36c <Change_Gain+0x2e4>)
 800e2aa:	f007 f819 	bl	80152e0 <puts>
				break;
 800e2ae:	e7a9      	b.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KD);
 800e2b0:	492f      	ldr	r1, [pc, #188]	; (800e370 <Change_Gain+0x2e8>)
 800e2b2:	4829      	ldr	r0, [pc, #164]	; (800e358 <Change_Gain+0x2d0>)
 800e2b4:	f007 fa20 	bl	80156f8 <iscanf>
 800e2b8:	e7a4      	b.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KP);
 800e2ba:	492e      	ldr	r1, [pc, #184]	; (800e374 <Change_Gain+0x2ec>)
 800e2bc:	4826      	ldr	r0, [pc, #152]	; (800e358 <Change_Gain+0x2d0>)
 800e2be:	f007 fa1b 	bl	80156f8 <iscanf>
 800e2c2:	e79f      	b.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KP);
 800e2c4:	4917      	ldr	r1, [pc, #92]	; (800e324 <Change_Gain+0x29c>)
 800e2c6:	4824      	ldr	r0, [pc, #144]	; (800e358 <Change_Gain+0x2d0>)
 800e2c8:	f007 fa16 	bl	80156f8 <iscanf>
 800e2cc:	e79a      	b.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KP);
 800e2ce:	492a      	ldr	r1, [pc, #168]	; (800e378 <Change_Gain+0x2f0>)
 800e2d0:	4821      	ldr	r0, [pc, #132]	; (800e358 <Change_Gain+0x2d0>)
 800e2d2:	f007 fa11 	bl	80156f8 <iscanf>
 800e2d6:	e795      	b.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KP);
 800e2d8:	4928      	ldr	r1, [pc, #160]	; (800e37c <Change_Gain+0x2f4>)
 800e2da:	481f      	ldr	r0, [pc, #124]	; (800e358 <Change_Gain+0x2d0>)
 800e2dc:	f007 fa0c 	bl	80156f8 <iscanf>
 800e2e0:	e790      	b.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KP);
 800e2e2:	4927      	ldr	r1, [pc, #156]	; (800e380 <Change_Gain+0x2f8>)
 800e2e4:	481c      	ldr	r0, [pc, #112]	; (800e358 <Change_Gain+0x2d0>)
 800e2e6:	f007 fa07 	bl	80156f8 <iscanf>
 800e2ea:	e78b      	b.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KI);
 800e2ec:	4925      	ldr	r1, [pc, #148]	; (800e384 <Change_Gain+0x2fc>)
 800e2ee:	481a      	ldr	r0, [pc, #104]	; (800e358 <Change_Gain+0x2d0>)
 800e2f0:	f007 fa02 	bl	80156f8 <iscanf>
 800e2f4:	e786      	b.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KI);
 800e2f6:	4924      	ldr	r1, [pc, #144]	; (800e388 <Change_Gain+0x300>)
 800e2f8:	4817      	ldr	r0, [pc, #92]	; (800e358 <Change_Gain+0x2d0>)
 800e2fa:	f007 f9fd 	bl	80156f8 <iscanf>
 800e2fe:	e781      	b.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KI);
 800e300:	4922      	ldr	r1, [pc, #136]	; (800e38c <Change_Gain+0x304>)
 800e302:	4815      	ldr	r0, [pc, #84]	; (800e358 <Change_Gain+0x2d0>)
 800e304:	f007 f9f8 	bl	80156f8 <iscanf>
 800e308:	e77c      	b.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KI);
 800e30a:	4921      	ldr	r1, [pc, #132]	; (800e390 <Change_Gain+0x308>)
 800e30c:	4812      	ldr	r0, [pc, #72]	; (800e358 <Change_Gain+0x2d0>)
 800e30e:	f007 f9f3 	bl	80156f8 <iscanf>
 800e312:	e777      	b.n	800e204 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KI);
 800e314:	491f      	ldr	r1, [pc, #124]	; (800e394 <Change_Gain+0x30c>)
 800e316:	4810      	ldr	r0, [pc, #64]	; (800e358 <Change_Gain+0x2d0>)
 800e318:	f007 f9ee 	bl	80156f8 <iscanf>
 800e31c:	e772      	b.n	800e204 <Change_Gain+0x17c>
 800e31e:	bf00      	nop
 800e320:	20008e70 	.word	0x20008e70
 800e324:	20008030 	.word	0x20008030
 800e328:	08018e28 	.word	0x08018e28
 800e32c:	20008c28 	.word	0x20008c28
 800e330:	08018e64 	.word	0x08018e64
 800e334:	08018e80 	.word	0x08018e80
 800e338:	08018e9c 	.word	0x08018e9c
 800e33c:	08018eb8 	.word	0x08018eb8
 800e340:	08018ed0 	.word	0x08018ed0
 800e344:	08018ed4 	.word	0x08018ed4
 800e348:	08018ee8 	.word	0x08018ee8
 800e34c:	08018f0c 	.word	0x08018f0c
 800e350:	08018f40 	.word	0x08018f40
 800e354:	200080bc 	.word	0x200080bc
 800e358:	08018f20 	.word	0x08018f20
 800e35c:	20008090 	.word	0x20008090
 800e360:	20008038 	.word	0x20008038
 800e364:	200080e8 	.word	0x200080e8
 800e368:	08018f38 	.word	0x08018f38
 800e36c:	08018f24 	.word	0x08018f24
 800e370:	20008064 	.word	0x20008064
 800e374:	200080e0 	.word	0x200080e0
 800e378:	2000805c 	.word	0x2000805c
 800e37c:	200080b4 	.word	0x200080b4
 800e380:	20008088 	.word	0x20008088
 800e384:	200080e4 	.word	0x200080e4
 800e388:	20008034 	.word	0x20008034
 800e38c:	20008060 	.word	0x20008060
 800e390:	200080b8 	.word	0x200080b8
 800e394:	2000808c 	.word	0x2000808c
 800e398:	08018e10 	.word	0x08018e10
 800e39c:	08018e48 	.word	0x08018e48

0800e3a0 <PIDSetGain>:
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
	Pid[n].KP = kp;
 800e3a0:	4a05      	ldr	r2, [pc, #20]	; (800e3b8 <PIDSetGain+0x18>)
 800e3a2:	232c      	movs	r3, #44	; 0x2c
 800e3a4:	fb03 2000 	mla	r0, r3, r0, r2
 800e3a8:	ed80 0a00 	vstr	s0, [r0]
	Pid[n].KI = ki;
 800e3ac:	edc0 0a01 	vstr	s1, [r0, #4]
	Pid[n].KD = kd;
 800e3b0:	ed80 1a02 	vstr	s2, [r0, #8]

}
 800e3b4:	4770      	bx	lr
 800e3b6:	bf00      	nop
 800e3b8:	20008030 	.word	0x20008030

0800e3bc <PIDChangeFlag>:
//	elast[n] = 0;
//}

void PIDChangeFlag(int n, int on_or_off)
{
	Pid[n].flag = on_or_off;
 800e3bc:	4a02      	ldr	r2, [pc, #8]	; (800e3c8 <PIDChangeFlag+0xc>)
 800e3be:	232c      	movs	r3, #44	; 0x2c
 800e3c0:	fb03 2000 	mla	r0, r3, r0, r2
 800e3c4:	6281      	str	r1, [r0, #40]	; 0x28
}
 800e3c6:	4770      	bx	lr
 800e3c8:	20008030 	.word	0x20008030

0800e3cc <PIDReset>:
	return Pid[n].flag;
}
void PIDReset(int n)
{
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800e3cc:	4905      	ldr	r1, [pc, #20]	; (800e3e4 <PIDReset+0x18>)
 800e3ce:	232c      	movs	r3, #44	; 0x2c
 800e3d0:	fb03 1000 	mla	r0, r3, r0, r1
 800e3d4:	2200      	movs	r2, #0
	Pid[n].ei = 0;
	Pid[n].ed = 0;
	Pid[n].elast = 0;
	Pid[n].out = 0;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	6243      	str	r3, [r0, #36]	; 0x24
	Pid[n].e = 0;
 800e3da:	60c2      	str	r2, [r0, #12]
	Pid[n].ei = 0;
 800e3dc:	6102      	str	r2, [r0, #16]
	Pid[n].ed = 0;
 800e3de:	6142      	str	r2, [r0, #20]
	Pid[n].elast = 0;
 800e3e0:	6182      	str	r2, [r0, #24]
}
 800e3e2:	4770      	bx	lr
 800e3e4:	20008030 	.word	0x20008030

0800e3e8 <PIDControl>:
inline int PIDControl(int n, float target, float current)
{
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800e3e8:	4b21      	ldr	r3, [pc, #132]	; (800e470 <PIDControl+0x88>)
{
 800e3ea:	b510      	push	{r4, lr}
	if(Pid[n].flag == 0)
 800e3ec:	242c      	movs	r4, #44	; 0x2c
 800e3ee:	fb04 3400 	mla	r4, r4, r0, r3
 800e3f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e3f4:	b3a8      	cbz	r0, 800e462 <PIDControl+0x7a>
	else
	{
		Pid[n].target = target;
		Pid[n].current = current;

		Pid[n].e = Pid[n].target - Pid[n].current;
 800e3f6:	ee70 6a60 	vsub.f32	s13, s0, s1
		Pid[n].ei += Pid[n].e * pid_T;
 800e3fa:	ed9f 4a1e 	vldr	s8, [pc, #120]	; 800e474 <PIDControl+0x8c>
 800e3fe:	ed94 6a04 	vldr	s12, [r4, #16]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
		Pid[n].elast = Pid[n].e;
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e402:	ed94 7a01 	vldr	s14, [r4, #4]
 800e406:	ed94 5a00 	vldr	s10, [r4]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e40a:	edd4 7a06 	vldr	s15, [r4, #24]
 800e40e:	eddf 4a1a 	vldr	s9, [pc, #104]	; 800e478 <PIDControl+0x90>
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e412:	edd4 5a02 	vldr	s11, [r4, #8]
		Pid[n].e = Pid[n].target - Pid[n].current;
 800e416:	edc4 6a03 	vstr	s13, [r4, #12]
		Pid[n].ei += Pid[n].e * pid_T;
 800e41a:	eea6 6a84 	vfma.f32	s12, s13, s8
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e41e:	ee76 7ae7 	vsub.f32	s15, s13, s15
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e422:	ee26 7a07 	vmul.f32	s14, s12, s14
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e426:	ee67 7aa4 	vmul.f32	s15, s15, s9
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e42a:	eea6 7a85 	vfma.f32	s14, s13, s10
		Pid[n].ei += Pid[n].e * pid_T;
 800e42e:	ed84 6a04 	vstr	s12, [r4, #16]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e432:	eea7 7aa5 	vfma.f32	s14, s15, s11
		Pid[n].elast = Pid[n].e;
 800e436:	edc4 6a06 	vstr	s13, [r4, #24]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e43a:	edc4 7a05 	vstr	s15, [r4, #20]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e43e:	ee17 0a10 	vmov	r0, s14
		Pid[n].target = target;
 800e442:	ed84 0a08 	vstr	s0, [r4, #32]
		Pid[n].current = current;
 800e446:	edc4 0a07 	vstr	s1, [r4, #28]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e44a:	f7f9 ffb5 	bl	80083b8 <__aeabi_f2d>
 800e44e:	ec41 0b10 	vmov	d0, r0, r1
 800e452:	f005 f933 	bl	80136bc <round>
 800e456:	ec51 0b10 	vmov	r0, r1, d0
 800e45a:	f7fa fab5 	bl	80089c8 <__aeabi_d2iz>
 800e45e:	6260      	str	r0, [r4, #36]	; 0x24
		return Pid[n].out;
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 800e460:	bd10      	pop	{r4, pc}
		Pid[n].e = 0.0f;
 800e462:	2300      	movs	r3, #0
		Pid[n].out = 0;
 800e464:	6260      	str	r0, [r4, #36]	; 0x24
		Pid[n].e = 0.0f;
 800e466:	60e3      	str	r3, [r4, #12]
		Pid[n].ei = 0.0f;
 800e468:	6123      	str	r3, [r4, #16]
		Pid[n].ed = 0.0f;
 800e46a:	6163      	str	r3, [r4, #20]
		Pid[n].elast = 0.0f;
 800e46c:	61a3      	str	r3, [r4, #24]
}
 800e46e:	bd10      	pop	{r4, pc}
 800e470:	20008030 	.word	0x20008030
 800e474:	3a83126f 	.word	0x3a83126f
 800e478:	4479ffff 	.word	0x4479ffff

0800e47c <HAL_GPIO_EXTI_Callback>:
#include <stdio.h>
#include <math.h>
//中間モジュール。
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_12)
 800e47c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800e480:	d106      	bne.n	800e490 <HAL_GPIO_EXTI_Callback+0x14>
	{
	  gpio_callback_count++;
 800e482:	4a04      	ldr	r2, [pc, #16]	; (800e494 <HAL_GPIO_EXTI_Callback+0x18>)
 800e484:	6813      	ldr	r3, [r2, #0]
 800e486:	3301      	adds	r3, #1
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 800e488:	2b01      	cmp	r3, #1
 800e48a:	bfc8      	it	gt
 800e48c:	2300      	movgt	r3, #0
 800e48e:	6013      	str	r3, [r2, #0]
	}
}
 800e490:	4770      	bx	lr
 800e492:	bf00      	nop
 800e494:	20008214 	.word	0x20008214

0800e498 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int8_t mode)
{
 800e498:	b538      	push	{r3, r4, r5, lr}
 800e49a:	4605      	mov	r5, r0
 800e49c:	2405      	movs	r4, #5
	for(int i=0; i < 5; i++)
	{
		ChangeLED(mode);
 800e49e:	4628      	mov	r0, r5
 800e4a0:	f7ff fa62 	bl	800d968 <ChangeLED>
		HAL_Delay(100);
 800e4a4:	2064      	movs	r0, #100	; 0x64
 800e4a6:	f000 f961 	bl	800e76c <HAL_Delay>
		ChangeLED(0);
 800e4aa:	2000      	movs	r0, #0
 800e4ac:	f7ff fa5c 	bl	800d968 <ChangeLED>
		HAL_Delay(100);
 800e4b0:	2064      	movs	r0, #100	; 0x64
 800e4b2:	f000 f95b 	bl	800e76c <HAL_Delay>
	for(int i=0; i < 5; i++)
 800e4b6:	3c01      	subs	r4, #1
 800e4b8:	d1f1      	bne.n	800e49e <Signal+0x6>
	}
}
 800e4ba:	bd38      	pop	{r3, r4, r5, pc}

0800e4bc <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800e4bc:	b510      	push	{r4, lr}

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e4be:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800e508 <BatteryCheck+0x4c>
 800e4c2:	eddf 0a12 	vldr	s1, [pc, #72]	; 800e50c <BatteryCheck+0x50>
{
 800e4c6:	ed2d 8b02 	vpush	{d8}
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e4ca:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800e4ce:	f7ff fc19 	bl	800dd04 <ADCToBatteryVoltage>

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800e4d2:	2103      	movs	r1, #3
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e4d4:	eeb0 8a40 	vmov.f32	s16, s0
	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800e4d8:	2002      	movs	r0, #2
 800e4da:	f7ff fc3d 	bl	800dd58 <IntegerPower>

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800e4de:	eeb0 0a48 	vmov.f32	s0, s16
 800e4e2:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800e510 <BatteryCheck+0x54>
 800e4e6:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800e514 <BatteryCheck+0x58>
 800e4ea:	f7ff fc52 	bl	800dd92 <GetBatteryLevel>
 800e4ee:	4604      	mov	r4, r0

	printf("%d\r\n", battery_level);
 800e4f0:	4601      	mov	r1, r0
 800e4f2:	4809      	ldr	r0, [pc, #36]	; (800e518 <BatteryCheck+0x5c>)
 800e4f4:	f006 fe6c 	bl	80151d0 <iprintf>
	Signal( battery_level );
}
 800e4f8:	ecbd 8b02 	vpop	{d8}
	Signal( battery_level );
 800e4fc:	b260      	sxtb	r0, r4
}
 800e4fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Signal( battery_level );
 800e502:	f7ff bfc9 	b.w	800e498 <Signal>
 800e506:	bf00      	nop
 800e508:	45800000 	.word	0x45800000
 800e50c:	40533333 	.word	0x40533333
 800e510:	41066666 	.word	0x41066666
 800e514:	40e66666 	.word	0x40e66666
 800e518:	08018f4c 	.word	0x08018f4c

0800e51c <PhotoSwitch>:

//ここ書いたら大事な処理を書き始められる
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。
void PhotoSwitch()
{
 800e51c:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2);
 800e51e:	4c10      	ldr	r4, [pc, #64]	; (800e560 <PhotoSwitch+0x44>)
 800e520:	4810      	ldr	r0, [pc, #64]	; (800e564 <PhotoSwitch+0x48>)
 800e522:	4621      	mov	r1, r4
 800e524:	2202      	movs	r2, #2
 800e526:	f000 f987 	bl	800e838 <HAL_ADC_Start_DMA>
	//tim8のduty比を下げて電流消費を削減
	HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1);
 800e52a:	2100      	movs	r1, #0
 800e52c:	480e      	ldr	r0, [pc, #56]	; (800e568 <PhotoSwitch+0x4c>)
 800e52e:	f004 f9a0 	bl	8012872 <HAL_TIMEx_OCN_Start_IT>

	while(adc2[1] < 200)
 800e532:	6861      	ldr	r1, [r4, #4]
 800e534:	29c7      	cmp	r1, #199	; 0xc7
 800e536:	d806      	bhi.n	800e546 <PhotoSwitch+0x2a>
	{
		printf("adc2[1] : %lu\r\n", adc2[1]);
 800e538:	4d0c      	ldr	r5, [pc, #48]	; (800e56c <PhotoSwitch+0x50>)
 800e53a:	4628      	mov	r0, r5
 800e53c:	f006 fe48 	bl	80151d0 <iprintf>
	while(adc2[1] < 200)
 800e540:	6861      	ldr	r1, [r4, #4]
 800e542:	29c7      	cmp	r1, #199	; 0xc7
 800e544:	d9f9      	bls.n	800e53a <PhotoSwitch+0x1e>

	}
	HAL_ADC_Stop_DMA(&hadc2);
 800e546:	4807      	ldr	r0, [pc, #28]	; (800e564 <PhotoSwitch+0x48>)
 800e548:	f000 fa68 	bl	800ea1c <HAL_ADC_Stop_DMA>
	HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1);
 800e54c:	2100      	movs	r1, #0
 800e54e:	4806      	ldr	r0, [pc, #24]	; (800e568 <PhotoSwitch+0x4c>)
 800e550:	f004 f9e4 	bl	801291c <HAL_TIMEx_OCN_Stop_IT>
	Signal( 7 );
 800e554:	2007      	movs	r0, #7
}
 800e556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Signal( 7 );
 800e55a:	f7ff bf9d 	b.w	800e498 <Signal>
 800e55e:	bf00      	nop
 800e560:	20007fd8 	.word	0x20007fd8
 800e564:	20008ca8 	.word	0x20008ca8
 800e568:	20008c28 	.word	0x20008c28
 800e56c:	08018f78 	.word	0x08018f78

0800e570 <ModeSelect>:

void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800e570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e574:	4606      	mov	r6, r0
 800e576:	ed2d 8b04 	vpush	{d8-d9}
 800e57a:	460f      	mov	r7, r1
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ

	//エンコーダ開始。初期値セット込み
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800e57c:	4828      	ldr	r0, [pc, #160]	; (800e620 <ModeSelect+0xb0>)
	*pMode=min;

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	TIM3->CNT = INITIAL_PULSE;
	gpio_callback_count = 0;
 800e57e:	4c29      	ldr	r4, [pc, #164]	; (800e624 <ModeSelect+0xb4>)
	{
		//printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800e580:	ed9f 9a29 	vldr	s18, [pc, #164]	; 800e628 <ModeSelect+0xb8>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800e584:	eddf 8a29 	vldr	s17, [pc, #164]	; 800e62c <ModeSelect+0xbc>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800e588:	2100      	movs	r1, #0
{
 800e58a:	4690      	mov	r8, r2
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800e58c:	f003 fad6 	bl	8011b3c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 800e590:	2104      	movs	r1, #4
 800e592:	4823      	ldr	r0, [pc, #140]	; (800e620 <ModeSelect+0xb0>)
 800e594:	f003 fad2 	bl	8011b3c <HAL_TIM_Encoder_Start>
	TIM3->CNT = INITIAL_PULSE;
 800e598:	4a25      	ldr	r2, [pc, #148]	; (800e630 <ModeSelect+0xc0>)
	*pMode=min;
 800e59a:	f888 6000 	strb.w	r6, [r8]
	TIM3->CNT = INITIAL_PULSE;
 800e59e:	f247 552f 	movw	r5, #29999	; 0x752f
	gpio_callback_count = 0;
 800e5a2:	2300      	movs	r3, #0
	TIM3->CNT = INITIAL_PULSE;
 800e5a4:	6255      	str	r5, [r2, #36]	; 0x24
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800e5a6:	4691      	mov	r9, r2
	gpio_callback_count = 0;
 800e5a8:	6023      	str	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800e5aa:	b9eb      	cbnz	r3, 800e5e8 <ModeSelect+0x78>
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800e5ac:	ed99 8a09 	vldr	s16, [r9, #36]	; 0x24
		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800e5b0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800e5b4:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800e5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5bc:	db0c      	blt.n	800e5d8 <ModeSelect+0x68>
		  	  *pMode += 1;
 800e5be:	f898 0000 	ldrb.w	r0, [r8]
 800e5c2:	3001      	adds	r0, #1
 800e5c4:	b240      	sxtb	r0, r0
		  		  *pMode = min;
 800e5c6:	42b8      	cmp	r0, r7
 800e5c8:	bfc8      	it	gt
 800e5ca:	4630      	movgt	r0, r6
 800e5cc:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800e5d0:	f7ff f9ca 	bl	800d968 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800e5d4:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800e5d8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5e0:	d910      	bls.n	800e604 <ModeSelect+0x94>
 800e5e2:	6823      	ldr	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d0e1      	beq.n	800e5ac <ModeSelect+0x3c>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;
		  }
	}
	gpio_callback_count = 0;
 800e5e8:	2300      	movs	r3, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	480c      	ldr	r0, [pc, #48]	; (800e620 <ModeSelect+0xb0>)
	gpio_callback_count = 0;
 800e5ee:	6023      	str	r3, [r4, #0]
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800e5f0:	f003 fadb 	bl	8011baa <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
}
 800e5f4:	ecbd 8b04 	vpop	{d8-d9}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800e5f8:	2104      	movs	r1, #4
 800e5fa:	4809      	ldr	r0, [pc, #36]	; (800e620 <ModeSelect+0xb0>)
}
 800e5fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800e600:	f003 bad3 	b.w	8011baa <HAL_TIM_Encoder_Stop>
		  	  *pMode -= 1;
 800e604:	f898 0000 	ldrb.w	r0, [r8]
 800e608:	3801      	subs	r0, #1
 800e60a:	b240      	sxtb	r0, r0
 800e60c:	42b0      	cmp	r0, r6
 800e60e:	bfb8      	it	lt
 800e610:	4638      	movlt	r0, r7
 800e612:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800e616:	f7ff f9a7 	bl	800d968 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800e61a:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
 800e61e:	e7e0      	b.n	800e5e2 <ModeSelect+0x72>
 800e620:	20008cf0 	.word	0x20008cf0
 800e624:	20008214 	.word	0x20008214
 800e628:	47352f00 	.word	0x47352f00
 800e62c:	4654bc00 	.word	0x4654bc00
 800e630:	40000400 	.word	0x40000400

0800e634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e66c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e638:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e63a:	e003      	b.n	800e644 <LoopCopyDataInit>

0800e63c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e63c:	4b0c      	ldr	r3, [pc, #48]	; (800e670 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e63e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e640:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e642:	3104      	adds	r1, #4

0800e644 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e644:	480b      	ldr	r0, [pc, #44]	; (800e674 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e646:	4b0c      	ldr	r3, [pc, #48]	; (800e678 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e648:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e64a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e64c:	d3f6      	bcc.n	800e63c <CopyDataInit>
  ldr  r2, =_sbss
 800e64e:	4a0b      	ldr	r2, [pc, #44]	; (800e67c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e650:	e002      	b.n	800e658 <LoopFillZerobss>

0800e652 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e652:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e654:	f842 3b04 	str.w	r3, [r2], #4

0800e658 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e658:	4b09      	ldr	r3, [pc, #36]	; (800e680 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e65a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e65c:	d3f9      	bcc.n	800e652 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e65e:	f7fe fb97 	bl	800cd90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e662:	f005 fa23 	bl	8013aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e666:	f7fd fe15 	bl	800c294 <main>
  bx  lr    
 800e66a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e66c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e670:	080192d0 	.word	0x080192d0
  ldr  r0, =_sdata
 800e674:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e678:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 800e67c:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 800e680:	20008f4c 	.word	0x20008f4c

0800e684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e684:	e7fe      	b.n	800e684 <ADC_IRQHandler>
	...

0800e688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e68c:	4b0e      	ldr	r3, [pc, #56]	; (800e6c8 <HAL_Init+0x40>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4a0d      	ldr	r2, [pc, #52]	; (800e6c8 <HAL_Init+0x40>)
 800e692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e698:	4b0b      	ldr	r3, [pc, #44]	; (800e6c8 <HAL_Init+0x40>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a0a      	ldr	r2, [pc, #40]	; (800e6c8 <HAL_Init+0x40>)
 800e69e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e6a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e6a4:	4b08      	ldr	r3, [pc, #32]	; (800e6c8 <HAL_Init+0x40>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a07      	ldr	r2, [pc, #28]	; (800e6c8 <HAL_Init+0x40>)
 800e6aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e6b0:	2003      	movs	r0, #3
 800e6b2:	f000 fd8b 	bl	800f1cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e6b6:	2000      	movs	r0, #0
 800e6b8:	f000 f808 	bl	800e6cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e6bc:	f7fd ffcc 	bl	800c658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e6c0:	2300      	movs	r3, #0
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	40023c00 	.word	0x40023c00

0800e6cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e6d4:	4b12      	ldr	r3, [pc, #72]	; (800e720 <HAL_InitTick+0x54>)
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	4b12      	ldr	r3, [pc, #72]	; (800e724 <HAL_InitTick+0x58>)
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	4619      	mov	r1, r3
 800e6de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e6e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e6e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f000 fda3 	bl	800f236 <HAL_SYSTICK_Config>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d001      	beq.n	800e6fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	e00e      	b.n	800e718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2b0f      	cmp	r3, #15
 800e6fe:	d80a      	bhi.n	800e716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e700:	2200      	movs	r2, #0
 800e702:	6879      	ldr	r1, [r7, #4]
 800e704:	f04f 30ff 	mov.w	r0, #4294967295
 800e708:	f000 fd6b 	bl	800f1e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e70c:	4a06      	ldr	r2, [pc, #24]	; (800e728 <HAL_InitTick+0x5c>)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e712:	2300      	movs	r3, #0
 800e714:	e000      	b.n	800e718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e716:	2301      	movs	r3, #1
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	20000024 	.word	0x20000024
 800e724:	20000034 	.word	0x20000034
 800e728:	20000030 	.word	0x20000030

0800e72c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e72c:	b480      	push	{r7}
 800e72e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e730:	4b06      	ldr	r3, [pc, #24]	; (800e74c <HAL_IncTick+0x20>)
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	461a      	mov	r2, r3
 800e736:	4b06      	ldr	r3, [pc, #24]	; (800e750 <HAL_IncTick+0x24>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4413      	add	r3, r2
 800e73c:	4a04      	ldr	r2, [pc, #16]	; (800e750 <HAL_IncTick+0x24>)
 800e73e:	6013      	str	r3, [r2, #0]
}
 800e740:	bf00      	nop
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop
 800e74c:	20000034 	.word	0x20000034
 800e750:	20008f24 	.word	0x20008f24

0800e754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e754:	b480      	push	{r7}
 800e756:	af00      	add	r7, sp, #0
  return uwTick;
 800e758:	4b03      	ldr	r3, [pc, #12]	; (800e768 <HAL_GetTick+0x14>)
 800e75a:	681b      	ldr	r3, [r3, #0]
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	46bd      	mov	sp, r7
 800e760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e764:	4770      	bx	lr
 800e766:	bf00      	nop
 800e768:	20008f24 	.word	0x20008f24

0800e76c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e774:	f7ff ffee 	bl	800e754 <HAL_GetTick>
 800e778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e784:	d005      	beq.n	800e792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e786:	4b09      	ldr	r3, [pc, #36]	; (800e7ac <HAL_Delay+0x40>)
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	461a      	mov	r2, r3
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	4413      	add	r3, r2
 800e790:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e792:	bf00      	nop
 800e794:	f7ff ffde 	bl	800e754 <HAL_GetTick>
 800e798:	4602      	mov	r2, r0
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	1ad3      	subs	r3, r2, r3
 800e79e:	68fa      	ldr	r2, [r7, #12]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d8f7      	bhi.n	800e794 <HAL_Delay+0x28>
  {
  }
}
 800e7a4:	bf00      	nop
 800e7a6:	3710      	adds	r7, #16
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	20000034 	.word	0x20000034

0800e7b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d101      	bne.n	800e7c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	e033      	b.n	800e82e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d109      	bne.n	800e7e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f7fd ff6a 	bl	800c6a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7e6:	f003 0310 	and.w	r3, r3, #16
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d118      	bne.n	800e820 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800e7f6:	f023 0302 	bic.w	r3, r3, #2
 800e7fa:	f043 0202 	orr.w	r2, r3, #2
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 fa94 	bl	800ed30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e812:	f023 0303 	bic.w	r3, r3, #3
 800e816:	f043 0201 	orr.w	r2, r3, #1
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	641a      	str	r2, [r3, #64]	; 0x40
 800e81e:	e001      	b.n	800e824 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800e820:	2301      	movs	r3, #1
 800e822:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2200      	movs	r2, #0
 800e828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800e82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
	...

0800e838 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b086      	sub	sp, #24
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	60f8      	str	r0, [r7, #12]
 800e840:	60b9      	str	r1, [r7, #8]
 800e842:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800e844:	2300      	movs	r3, #0
 800e846:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d101      	bne.n	800e856 <HAL_ADC_Start_DMA+0x1e>
 800e852:	2302      	movs	r3, #2
 800e854:	e0cc      	b.n	800e9f0 <HAL_ADC_Start_DMA+0x1b8>
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2201      	movs	r2, #1
 800e85a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	689b      	ldr	r3, [r3, #8]
 800e864:	f003 0301 	and.w	r3, r3, #1
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d018      	beq.n	800e89e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	689a      	ldr	r2, [r3, #8]
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f042 0201 	orr.w	r2, r2, #1
 800e87a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800e87c:	4b5e      	ldr	r3, [pc, #376]	; (800e9f8 <HAL_ADC_Start_DMA+0x1c0>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a5e      	ldr	r2, [pc, #376]	; (800e9fc <HAL_ADC_Start_DMA+0x1c4>)
 800e882:	fba2 2303 	umull	r2, r3, r2, r3
 800e886:	0c9a      	lsrs	r2, r3, #18
 800e888:	4613      	mov	r3, r2
 800e88a:	005b      	lsls	r3, r3, #1
 800e88c:	4413      	add	r3, r2
 800e88e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800e890:	e002      	b.n	800e898 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	3b01      	subs	r3, #1
 800e896:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d1f9      	bne.n	800e892 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	f003 0301 	and.w	r3, r3, #1
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	f040 80a0 	bne.w	800e9ee <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800e8b6:	f023 0301 	bic.w	r3, r3, #1
 800e8ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d007      	beq.n	800e8e0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e8d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e8e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8ec:	d106      	bne.n	800e8fc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8f2:	f023 0206 	bic.w	r2, r3, #6
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	645a      	str	r2, [r3, #68]	; 0x44
 800e8fa:	e002      	b.n	800e902 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	2200      	movs	r2, #0
 800e906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e90a:	4b3d      	ldr	r3, [pc, #244]	; (800ea00 <HAL_ADC_Start_DMA+0x1c8>)
 800e90c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e912:	4a3c      	ldr	r2, [pc, #240]	; (800ea04 <HAL_ADC_Start_DMA+0x1cc>)
 800e914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e91a:	4a3b      	ldr	r2, [pc, #236]	; (800ea08 <HAL_ADC_Start_DMA+0x1d0>)
 800e91c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e922:	4a3a      	ldr	r2, [pc, #232]	; (800ea0c <HAL_ADC_Start_DMA+0x1d4>)
 800e924:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800e92e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	685a      	ldr	r2, [r3, #4]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e93e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	689a      	ldr	r2, [r3, #8]
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e94e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	334c      	adds	r3, #76	; 0x4c
 800e95a:	4619      	mov	r1, r3
 800e95c:	68ba      	ldr	r2, [r7, #8]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f000 fd24 	bl	800f3ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	685b      	ldr	r3, [r3, #4]
 800e968:	f003 031f 	and.w	r3, r3, #31
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d12a      	bne.n	800e9c6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4a26      	ldr	r2, [pc, #152]	; (800ea10 <HAL_ADC_Start_DMA+0x1d8>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d015      	beq.n	800e9a6 <HAL_ADC_Start_DMA+0x16e>
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4a25      	ldr	r2, [pc, #148]	; (800ea14 <HAL_ADC_Start_DMA+0x1dc>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d105      	bne.n	800e990 <HAL_ADC_Start_DMA+0x158>
 800e984:	4b1e      	ldr	r3, [pc, #120]	; (800ea00 <HAL_ADC_Start_DMA+0x1c8>)
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	f003 031f 	and.w	r3, r3, #31
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d00a      	beq.n	800e9a6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a20      	ldr	r2, [pc, #128]	; (800ea18 <HAL_ADC_Start_DMA+0x1e0>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d129      	bne.n	800e9ee <HAL_ADC_Start_DMA+0x1b6>
 800e99a:	4b19      	ldr	r3, [pc, #100]	; (800ea00 <HAL_ADC_Start_DMA+0x1c8>)
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	f003 031f 	and.w	r3, r3, #31
 800e9a2:	2b0f      	cmp	r3, #15
 800e9a4:	d823      	bhi.n	800e9ee <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	689b      	ldr	r3, [r3, #8]
 800e9ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d11c      	bne.n	800e9ee <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	689a      	ldr	r2, [r3, #8]
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e9c2:	609a      	str	r2, [r3, #8]
 800e9c4:	e013      	b.n	800e9ee <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4a11      	ldr	r2, [pc, #68]	; (800ea10 <HAL_ADC_Start_DMA+0x1d8>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d10e      	bne.n	800e9ee <HAL_ADC_Start_DMA+0x1b6>
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d107      	bne.n	800e9ee <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	689a      	ldr	r2, [r3, #8]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e9ec:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800e9ee:	2300      	movs	r3, #0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3718      	adds	r7, #24
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	20000024 	.word	0x20000024
 800e9fc:	431bde83 	.word	0x431bde83
 800ea00:	40012300 	.word	0x40012300
 800ea04:	0800ef29 	.word	0x0800ef29
 800ea08:	0800efe3 	.word	0x0800efe3
 800ea0c:	0800efff 	.word	0x0800efff
 800ea10:	40012000 	.word	0x40012000
 800ea14:	40012100 	.word	0x40012100
 800ea18:	40012200 	.word	0x40012200

0800ea1c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ea24:	2300      	movs	r3, #0
 800ea26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d101      	bne.n	800ea36 <HAL_ADC_Stop_DMA+0x1a>
 800ea32:	2302      	movs	r3, #2
 800ea34:	e038      	b.n	800eaa8 <HAL_ADC_Stop_DMA+0x8c>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	689a      	ldr	r2, [r3, #8]
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f022 0201 	bic.w	r2, r2, #1
 800ea4c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	f003 0301 	and.w	r3, r3, #1
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d120      	bne.n	800ea9e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	689a      	ldr	r2, [r3, #8]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ea6a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea70:	4618      	mov	r0, r3
 800ea72:	f000 fcf3 	bl	800f45c <HAL_DMA_Abort>
 800ea76:	4603      	mov	r3, r0
 800ea78:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	685a      	ldr	r2, [r3, #4]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800ea88:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ea92:	f023 0301 	bic.w	r3, r3, #1
 800ea96:	f043 0201 	orr.w	r2, r3, #1
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800eaa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3710      	adds	r7, #16
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800eab8:	bf00      	nop
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800eacc:	bf00      	nop
 800eace:	370c      	adds	r7, #12
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr

0800ead8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800eae0:	bf00      	nop
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b085      	sub	sp, #20
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d101      	bne.n	800eb08 <HAL_ADC_ConfigChannel+0x1c>
 800eb04:	2302      	movs	r3, #2
 800eb06:	e105      	b.n	800ed14 <HAL_ADC_ConfigChannel+0x228>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2b09      	cmp	r3, #9
 800eb16:	d925      	bls.n	800eb64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	68d9      	ldr	r1, [r3, #12]
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	461a      	mov	r2, r3
 800eb26:	4613      	mov	r3, r2
 800eb28:	005b      	lsls	r3, r3, #1
 800eb2a:	4413      	add	r3, r2
 800eb2c:	3b1e      	subs	r3, #30
 800eb2e:	2207      	movs	r2, #7
 800eb30:	fa02 f303 	lsl.w	r3, r2, r3
 800eb34:	43da      	mvns	r2, r3
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	400a      	ands	r2, r1
 800eb3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	68d9      	ldr	r1, [r3, #12]
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	689a      	ldr	r2, [r3, #8]
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	4618      	mov	r0, r3
 800eb50:	4603      	mov	r3, r0
 800eb52:	005b      	lsls	r3, r3, #1
 800eb54:	4403      	add	r3, r0
 800eb56:	3b1e      	subs	r3, #30
 800eb58:	409a      	lsls	r2, r3
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	430a      	orrs	r2, r1
 800eb60:	60da      	str	r2, [r3, #12]
 800eb62:	e022      	b.n	800ebaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	6919      	ldr	r1, [r3, #16]
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	461a      	mov	r2, r3
 800eb72:	4613      	mov	r3, r2
 800eb74:	005b      	lsls	r3, r3, #1
 800eb76:	4413      	add	r3, r2
 800eb78:	2207      	movs	r2, #7
 800eb7a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb7e:	43da      	mvns	r2, r3
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	400a      	ands	r2, r1
 800eb86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	6919      	ldr	r1, [r3, #16]
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	689a      	ldr	r2, [r3, #8]
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	4618      	mov	r0, r3
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	005b      	lsls	r3, r3, #1
 800eb9e:	4403      	add	r3, r0
 800eba0:	409a      	lsls	r2, r3
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	430a      	orrs	r2, r1
 800eba8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	2b06      	cmp	r3, #6
 800ebb0:	d824      	bhi.n	800ebfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	685a      	ldr	r2, [r3, #4]
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	4413      	add	r3, r2
 800ebc2:	3b05      	subs	r3, #5
 800ebc4:	221f      	movs	r2, #31
 800ebc6:	fa02 f303 	lsl.w	r3, r2, r3
 800ebca:	43da      	mvns	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	400a      	ands	r2, r1
 800ebd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	685a      	ldr	r2, [r3, #4]
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	009b      	lsls	r3, r3, #2
 800ebea:	4413      	add	r3, r2
 800ebec:	3b05      	subs	r3, #5
 800ebee:	fa00 f203 	lsl.w	r2, r0, r3
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	430a      	orrs	r2, r1
 800ebf8:	635a      	str	r2, [r3, #52]	; 0x34
 800ebfa:	e04c      	b.n	800ec96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	2b0c      	cmp	r3, #12
 800ec02:	d824      	bhi.n	800ec4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	685a      	ldr	r2, [r3, #4]
 800ec0e:	4613      	mov	r3, r2
 800ec10:	009b      	lsls	r3, r3, #2
 800ec12:	4413      	add	r3, r2
 800ec14:	3b23      	subs	r3, #35	; 0x23
 800ec16:	221f      	movs	r2, #31
 800ec18:	fa02 f303 	lsl.w	r3, r2, r3
 800ec1c:	43da      	mvns	r2, r3
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	400a      	ands	r2, r1
 800ec24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	4618      	mov	r0, r3
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	685a      	ldr	r2, [r3, #4]
 800ec38:	4613      	mov	r3, r2
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	4413      	add	r3, r2
 800ec3e:	3b23      	subs	r3, #35	; 0x23
 800ec40:	fa00 f203 	lsl.w	r2, r0, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	430a      	orrs	r2, r1
 800ec4a:	631a      	str	r2, [r3, #48]	; 0x30
 800ec4c:	e023      	b.n	800ec96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	685a      	ldr	r2, [r3, #4]
 800ec58:	4613      	mov	r3, r2
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	4413      	add	r3, r2
 800ec5e:	3b41      	subs	r3, #65	; 0x41
 800ec60:	221f      	movs	r2, #31
 800ec62:	fa02 f303 	lsl.w	r3, r2, r3
 800ec66:	43da      	mvns	r2, r3
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	400a      	ands	r2, r1
 800ec6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	685a      	ldr	r2, [r3, #4]
 800ec82:	4613      	mov	r3, r2
 800ec84:	009b      	lsls	r3, r3, #2
 800ec86:	4413      	add	r3, r2
 800ec88:	3b41      	subs	r3, #65	; 0x41
 800ec8a:	fa00 f203 	lsl.w	r2, r0, r3
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	430a      	orrs	r2, r1
 800ec94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ec96:	4b22      	ldr	r3, [pc, #136]	; (800ed20 <HAL_ADC_ConfigChannel+0x234>)
 800ec98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4a21      	ldr	r2, [pc, #132]	; (800ed24 <HAL_ADC_ConfigChannel+0x238>)
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d109      	bne.n	800ecb8 <HAL_ADC_ConfigChannel+0x1cc>
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2b12      	cmp	r3, #18
 800ecaa:	d105      	bne.n	800ecb8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4a19      	ldr	r2, [pc, #100]	; (800ed24 <HAL_ADC_ConfigChannel+0x238>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d123      	bne.n	800ed0a <HAL_ADC_ConfigChannel+0x21e>
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2b10      	cmp	r3, #16
 800ecc8:	d003      	beq.n	800ecd2 <HAL_ADC_ConfigChannel+0x1e6>
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2b11      	cmp	r3, #17
 800ecd0:	d11b      	bne.n	800ed0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	2b10      	cmp	r3, #16
 800ece4:	d111      	bne.n	800ed0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ece6:	4b10      	ldr	r3, [pc, #64]	; (800ed28 <HAL_ADC_ConfigChannel+0x23c>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4a10      	ldr	r2, [pc, #64]	; (800ed2c <HAL_ADC_ConfigChannel+0x240>)
 800ecec:	fba2 2303 	umull	r2, r3, r2, r3
 800ecf0:	0c9a      	lsrs	r2, r3, #18
 800ecf2:	4613      	mov	r3, r2
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	4413      	add	r3, r2
 800ecf8:	005b      	lsls	r3, r3, #1
 800ecfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ecfc:	e002      	b.n	800ed04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	3b01      	subs	r3, #1
 800ed02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1f9      	bne.n	800ecfe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ed12:	2300      	movs	r3, #0
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3714      	adds	r7, #20
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr
 800ed20:	40012300 	.word	0x40012300
 800ed24:	40012000 	.word	0x40012000
 800ed28:	20000024 	.word	0x20000024
 800ed2c:	431bde83 	.word	0x431bde83

0800ed30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b085      	sub	sp, #20
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ed38:	4b79      	ldr	r3, [pc, #484]	; (800ef20 <ADC_Init+0x1f0>)
 800ed3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	685a      	ldr	r2, [r3, #4]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	431a      	orrs	r2, r3
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	685a      	ldr	r2, [r3, #4]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ed64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	6859      	ldr	r1, [r3, #4]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	691b      	ldr	r3, [r3, #16]
 800ed70:	021a      	lsls	r2, r3, #8
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	430a      	orrs	r2, r1
 800ed78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	685a      	ldr	r2, [r3, #4]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800ed88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	6859      	ldr	r1, [r3, #4]
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	689a      	ldr	r2, [r3, #8]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	430a      	orrs	r2, r1
 800ed9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	689a      	ldr	r2, [r3, #8]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800edaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	6899      	ldr	r1, [r3, #8]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	68da      	ldr	r2, [r3, #12]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	430a      	orrs	r2, r1
 800edbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edc2:	4a58      	ldr	r2, [pc, #352]	; (800ef24 <ADC_Init+0x1f4>)
 800edc4:	4293      	cmp	r3, r2
 800edc6:	d022      	beq.n	800ee0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	689a      	ldr	r2, [r3, #8]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800edd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	6899      	ldr	r1, [r3, #8]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	430a      	orrs	r2, r1
 800ede8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	689a      	ldr	r2, [r3, #8]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800edf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	6899      	ldr	r1, [r3, #8]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	430a      	orrs	r2, r1
 800ee0a:	609a      	str	r2, [r3, #8]
 800ee0c:	e00f      	b.n	800ee2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	689a      	ldr	r2, [r3, #8]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ee1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	689a      	ldr	r2, [r3, #8]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ee2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	689a      	ldr	r2, [r3, #8]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f022 0202 	bic.w	r2, r2, #2
 800ee3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	6899      	ldr	r1, [r3, #8]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	7e1b      	ldrb	r3, [r3, #24]
 800ee48:	005a      	lsls	r2, r3, #1
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	430a      	orrs	r2, r1
 800ee50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d01b      	beq.n	800ee94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	685a      	ldr	r2, [r3, #4]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	685a      	ldr	r2, [r3, #4]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ee7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	6859      	ldr	r1, [r3, #4]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee86:	3b01      	subs	r3, #1
 800ee88:	035a      	lsls	r2, r3, #13
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	430a      	orrs	r2, r1
 800ee90:	605a      	str	r2, [r3, #4]
 800ee92:	e007      	b.n	800eea4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	685a      	ldr	r2, [r3, #4]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eea2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800eeb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	69db      	ldr	r3, [r3, #28]
 800eebe:	3b01      	subs	r3, #1
 800eec0:	051a      	lsls	r2, r3, #20
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	430a      	orrs	r2, r1
 800eec8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	689a      	ldr	r2, [r3, #8]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800eed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	6899      	ldr	r1, [r3, #8]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eee6:	025a      	lsls	r2, r3, #9
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	430a      	orrs	r2, r1
 800eeee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	689a      	ldr	r2, [r3, #8]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eefe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	6899      	ldr	r1, [r3, #8]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	695b      	ldr	r3, [r3, #20]
 800ef0a:	029a      	lsls	r2, r3, #10
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	430a      	orrs	r2, r1
 800ef12:	609a      	str	r2, [r3, #8]
}
 800ef14:	bf00      	nop
 800ef16:	3714      	adds	r7, #20
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr
 800ef20:	40012300 	.word	0x40012300
 800ef24:	0f000001 	.word	0x0f000001

0800ef28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d13c      	bne.n	800efbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d12b      	bne.n	800efb4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d127      	bne.n	800efb4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d006      	beq.n	800ef80 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	689b      	ldr	r3, [r3, #8]
 800ef78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d119      	bne.n	800efb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	685a      	ldr	r2, [r3, #4]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f022 0220 	bic.w	r2, r2, #32
 800ef8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d105      	bne.n	800efb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efac:	f043 0201 	orr.w	r2, r3, #1
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800efb4:	68f8      	ldr	r0, [r7, #12]
 800efb6:	f7ff fd7b 	bl	800eab0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800efba:	e00e      	b.n	800efda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efc0:	f003 0310 	and.w	r3, r3, #16
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d003      	beq.n	800efd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800efc8:	68f8      	ldr	r0, [r7, #12]
 800efca:	f7ff fd85 	bl	800ead8 <HAL_ADC_ErrorCallback>
}
 800efce:	e004      	b.n	800efda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	4798      	blx	r3
}
 800efda:	bf00      	nop
 800efdc:	3710      	adds	r7, #16
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b084      	sub	sp, #16
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800eff0:	68f8      	ldr	r0, [r7, #12]
 800eff2:	f7ff fd67 	bl	800eac4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800eff6:	bf00      	nop
 800eff8:	3710      	adds	r7, #16
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}

0800effe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800effe:	b580      	push	{r7, lr}
 800f000:	b084      	sub	sp, #16
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f00a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2240      	movs	r2, #64	; 0x40
 800f010:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f016:	f043 0204 	orr.w	r2, r3, #4
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f7ff fd5a 	bl	800ead8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f024:	bf00      	nop
 800f026:	3710      	adds	r7, #16
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f02c:	b480      	push	{r7}
 800f02e:	b085      	sub	sp, #20
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f003 0307 	and.w	r3, r3, #7
 800f03a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f03c:	4b0c      	ldr	r3, [pc, #48]	; (800f070 <__NVIC_SetPriorityGrouping+0x44>)
 800f03e:	68db      	ldr	r3, [r3, #12]
 800f040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f042:	68ba      	ldr	r2, [r7, #8]
 800f044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f048:	4013      	ands	r3, r2
 800f04a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f05c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f05e:	4a04      	ldr	r2, [pc, #16]	; (800f070 <__NVIC_SetPriorityGrouping+0x44>)
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	60d3      	str	r3, [r2, #12]
}
 800f064:	bf00      	nop
 800f066:	3714      	adds	r7, #20
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr
 800f070:	e000ed00 	.word	0xe000ed00

0800f074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f074:	b480      	push	{r7}
 800f076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f078:	4b04      	ldr	r3, [pc, #16]	; (800f08c <__NVIC_GetPriorityGrouping+0x18>)
 800f07a:	68db      	ldr	r3, [r3, #12]
 800f07c:	0a1b      	lsrs	r3, r3, #8
 800f07e:	f003 0307 	and.w	r3, r3, #7
}
 800f082:	4618      	mov	r0, r3
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr
 800f08c:	e000ed00 	.word	0xe000ed00

0800f090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	4603      	mov	r3, r0
 800f098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f09a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	db0b      	blt.n	800f0ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f0a2:	79fb      	ldrb	r3, [r7, #7]
 800f0a4:	f003 021f 	and.w	r2, r3, #31
 800f0a8:	4907      	ldr	r1, [pc, #28]	; (800f0c8 <__NVIC_EnableIRQ+0x38>)
 800f0aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0ae:	095b      	lsrs	r3, r3, #5
 800f0b0:	2001      	movs	r0, #1
 800f0b2:	fa00 f202 	lsl.w	r2, r0, r2
 800f0b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f0ba:	bf00      	nop
 800f0bc:	370c      	adds	r7, #12
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop
 800f0c8:	e000e100 	.word	0xe000e100

0800f0cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b083      	sub	sp, #12
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	6039      	str	r1, [r7, #0]
 800f0d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f0d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	db0a      	blt.n	800f0f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	b2da      	uxtb	r2, r3
 800f0e4:	490c      	ldr	r1, [pc, #48]	; (800f118 <__NVIC_SetPriority+0x4c>)
 800f0e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0ea:	0112      	lsls	r2, r2, #4
 800f0ec:	b2d2      	uxtb	r2, r2
 800f0ee:	440b      	add	r3, r1
 800f0f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f0f4:	e00a      	b.n	800f10c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	b2da      	uxtb	r2, r3
 800f0fa:	4908      	ldr	r1, [pc, #32]	; (800f11c <__NVIC_SetPriority+0x50>)
 800f0fc:	79fb      	ldrb	r3, [r7, #7]
 800f0fe:	f003 030f 	and.w	r3, r3, #15
 800f102:	3b04      	subs	r3, #4
 800f104:	0112      	lsls	r2, r2, #4
 800f106:	b2d2      	uxtb	r2, r2
 800f108:	440b      	add	r3, r1
 800f10a:	761a      	strb	r2, [r3, #24]
}
 800f10c:	bf00      	nop
 800f10e:	370c      	adds	r7, #12
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr
 800f118:	e000e100 	.word	0xe000e100
 800f11c:	e000ed00 	.word	0xe000ed00

0800f120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f120:	b480      	push	{r7}
 800f122:	b089      	sub	sp, #36	; 0x24
 800f124:	af00      	add	r7, sp, #0
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f003 0307 	and.w	r3, r3, #7
 800f132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f134:	69fb      	ldr	r3, [r7, #28]
 800f136:	f1c3 0307 	rsb	r3, r3, #7
 800f13a:	2b04      	cmp	r3, #4
 800f13c:	bf28      	it	cs
 800f13e:	2304      	movcs	r3, #4
 800f140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f142:	69fb      	ldr	r3, [r7, #28]
 800f144:	3304      	adds	r3, #4
 800f146:	2b06      	cmp	r3, #6
 800f148:	d902      	bls.n	800f150 <NVIC_EncodePriority+0x30>
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	3b03      	subs	r3, #3
 800f14e:	e000      	b.n	800f152 <NVIC_EncodePriority+0x32>
 800f150:	2300      	movs	r3, #0
 800f152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f154:	f04f 32ff 	mov.w	r2, #4294967295
 800f158:	69bb      	ldr	r3, [r7, #24]
 800f15a:	fa02 f303 	lsl.w	r3, r2, r3
 800f15e:	43da      	mvns	r2, r3
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	401a      	ands	r2, r3
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f168:	f04f 31ff 	mov.w	r1, #4294967295
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	fa01 f303 	lsl.w	r3, r1, r3
 800f172:	43d9      	mvns	r1, r3
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f178:	4313      	orrs	r3, r2
         );
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3724      	adds	r7, #36	; 0x24
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr
	...

0800f188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	3b01      	subs	r3, #1
 800f194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f198:	d301      	bcc.n	800f19e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f19a:	2301      	movs	r3, #1
 800f19c:	e00f      	b.n	800f1be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f19e:	4a0a      	ldr	r2, [pc, #40]	; (800f1c8 <SysTick_Config+0x40>)
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	3b01      	subs	r3, #1
 800f1a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f1a6:	210f      	movs	r1, #15
 800f1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ac:	f7ff ff8e 	bl	800f0cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f1b0:	4b05      	ldr	r3, [pc, #20]	; (800f1c8 <SysTick_Config+0x40>)
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f1b6:	4b04      	ldr	r3, [pc, #16]	; (800f1c8 <SysTick_Config+0x40>)
 800f1b8:	2207      	movs	r2, #7
 800f1ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f1bc:	2300      	movs	r3, #0
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	e000e010 	.word	0xe000e010

0800f1cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7ff ff29 	bl	800f02c <__NVIC_SetPriorityGrouping>
}
 800f1da:	bf00      	nop
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}

0800f1e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b086      	sub	sp, #24
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	60b9      	str	r1, [r7, #8]
 800f1ec:	607a      	str	r2, [r7, #4]
 800f1ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f1f4:	f7ff ff3e 	bl	800f074 <__NVIC_GetPriorityGrouping>
 800f1f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	68b9      	ldr	r1, [r7, #8]
 800f1fe:	6978      	ldr	r0, [r7, #20]
 800f200:	f7ff ff8e 	bl	800f120 <NVIC_EncodePriority>
 800f204:	4602      	mov	r2, r0
 800f206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f20a:	4611      	mov	r1, r2
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7ff ff5d 	bl	800f0cc <__NVIC_SetPriority>
}
 800f212:	bf00      	nop
 800f214:	3718      	adds	r7, #24
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}

0800f21a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b082      	sub	sp, #8
 800f21e:	af00      	add	r7, sp, #0
 800f220:	4603      	mov	r3, r0
 800f222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f228:	4618      	mov	r0, r3
 800f22a:	f7ff ff31 	bl	800f090 <__NVIC_EnableIRQ>
}
 800f22e:	bf00      	nop
 800f230:	3708      	adds	r7, #8
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}

0800f236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f236:	b580      	push	{r7, lr}
 800f238:	b082      	sub	sp, #8
 800f23a:	af00      	add	r7, sp, #0
 800f23c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f7ff ffa2 	bl	800f188 <SysTick_Config>
 800f244:	4603      	mov	r3, r0
}
 800f246:	4618      	mov	r0, r3
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
	...

0800f250 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b086      	sub	sp, #24
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f258:	2300      	movs	r3, #0
 800f25a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f25c:	f7ff fa7a 	bl	800e754 <HAL_GetTick>
 800f260:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d101      	bne.n	800f26c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f268:	2301      	movs	r3, #1
 800f26a:	e099      	b.n	800f3a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2202      	movs	r2, #2
 800f278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f022 0201 	bic.w	r2, r2, #1
 800f28a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f28c:	e00f      	b.n	800f2ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f28e:	f7ff fa61 	bl	800e754 <HAL_GetTick>
 800f292:	4602      	mov	r2, r0
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	1ad3      	subs	r3, r2, r3
 800f298:	2b05      	cmp	r3, #5
 800f29a:	d908      	bls.n	800f2ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2220      	movs	r2, #32
 800f2a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2203      	movs	r2, #3
 800f2a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f2aa:	2303      	movs	r3, #3
 800f2ac:	e078      	b.n	800f3a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f003 0301 	and.w	r3, r3, #1
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d1e8      	bne.n	800f28e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f2c4:	697a      	ldr	r2, [r7, #20]
 800f2c6:	4b38      	ldr	r3, [pc, #224]	; (800f3a8 <HAL_DMA_Init+0x158>)
 800f2c8:	4013      	ands	r3, r2
 800f2ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	685a      	ldr	r2, [r3, #4]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f2da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	691b      	ldr	r3, [r3, #16]
 800f2e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f2e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	699b      	ldr	r3, [r3, #24]
 800f2ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f2f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6a1b      	ldr	r3, [r3, #32]
 800f2f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f2fa:	697a      	ldr	r2, [r7, #20]
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f304:	2b04      	cmp	r3, #4
 800f306:	d107      	bne.n	800f318 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f310:	4313      	orrs	r3, r2
 800f312:	697a      	ldr	r2, [r7, #20]
 800f314:	4313      	orrs	r3, r2
 800f316:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	697a      	ldr	r2, [r7, #20]
 800f31e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	695b      	ldr	r3, [r3, #20]
 800f326:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	f023 0307 	bic.w	r3, r3, #7
 800f32e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f334:	697a      	ldr	r2, [r7, #20]
 800f336:	4313      	orrs	r3, r2
 800f338:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f33e:	2b04      	cmp	r3, #4
 800f340:	d117      	bne.n	800f372 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f346:	697a      	ldr	r2, [r7, #20]
 800f348:	4313      	orrs	r3, r2
 800f34a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f350:	2b00      	cmp	r3, #0
 800f352:	d00e      	beq.n	800f372 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 fadf 	bl	800f918 <DMA_CheckFifoParam>
 800f35a:	4603      	mov	r3, r0
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d008      	beq.n	800f372 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2240      	movs	r2, #64	; 0x40
 800f364:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2201      	movs	r2, #1
 800f36a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f36e:	2301      	movs	r3, #1
 800f370:	e016      	b.n	800f3a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	697a      	ldr	r2, [r7, #20]
 800f378:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 fa96 	bl	800f8ac <DMA_CalcBaseAndBitshift>
 800f380:	4603      	mov	r3, r0
 800f382:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f388:	223f      	movs	r2, #63	; 0x3f
 800f38a:	409a      	lsls	r2, r3
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2200      	movs	r2, #0
 800f394:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2201      	movs	r2, #1
 800f39a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f39e:	2300      	movs	r3, #0
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3718      	adds	r7, #24
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	f010803f 	.word	0xf010803f

0800f3ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b086      	sub	sp, #24
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
 800f3b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	d101      	bne.n	800f3d2 <HAL_DMA_Start_IT+0x26>
 800f3ce:	2302      	movs	r3, #2
 800f3d0:	e040      	b.n	800f454 <HAL_DMA_Start_IT+0xa8>
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d12f      	bne.n	800f446 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2202      	movs	r2, #2
 800f3ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	687a      	ldr	r2, [r7, #4]
 800f3f8:	68b9      	ldr	r1, [r7, #8]
 800f3fa:	68f8      	ldr	r0, [r7, #12]
 800f3fc:	f000 fa28 	bl	800f850 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f404:	223f      	movs	r2, #63	; 0x3f
 800f406:	409a      	lsls	r2, r3
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	681a      	ldr	r2, [r3, #0]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f042 0216 	orr.w	r2, r2, #22
 800f41a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f420:	2b00      	cmp	r3, #0
 800f422:	d007      	beq.n	800f434 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f042 0208 	orr.w	r2, r2, #8
 800f432:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	681a      	ldr	r2, [r3, #0]
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f042 0201 	orr.w	r2, r2, #1
 800f442:	601a      	str	r2, [r3, #0]
 800f444:	e005      	b.n	800f452 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2200      	movs	r2, #0
 800f44a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f44e:	2302      	movs	r3, #2
 800f450:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f452:	7dfb      	ldrb	r3, [r7, #23]
}
 800f454:	4618      	mov	r0, r3
 800f456:	3718      	adds	r7, #24
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}

0800f45c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f468:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800f46a:	f7ff f973 	bl	800e754 <HAL_GetTick>
 800f46e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f476:	b2db      	uxtb	r3, r3
 800f478:	2b02      	cmp	r3, #2
 800f47a:	d008      	beq.n	800f48e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2280      	movs	r2, #128	; 0x80
 800f480:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2200      	movs	r2, #0
 800f486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	e052      	b.n	800f534 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f022 0216 	bic.w	r2, r2, #22
 800f49c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	695a      	ldr	r2, [r3, #20]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f4ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d103      	bne.n	800f4be <HAL_DMA_Abort+0x62>
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d007      	beq.n	800f4ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	681a      	ldr	r2, [r3, #0]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f022 0208 	bic.w	r2, r2, #8
 800f4cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f022 0201 	bic.w	r2, r2, #1
 800f4dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f4de:	e013      	b.n	800f508 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f4e0:	f7ff f938 	bl	800e754 <HAL_GetTick>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	1ad3      	subs	r3, r2, r3
 800f4ea:	2b05      	cmp	r3, #5
 800f4ec:	d90c      	bls.n	800f508 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2220      	movs	r2, #32
 800f4f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2203      	movs	r2, #3
 800f500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800f504:	2303      	movs	r3, #3
 800f506:	e015      	b.n	800f534 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f003 0301 	and.w	r3, r3, #1
 800f512:	2b00      	cmp	r3, #0
 800f514:	d1e4      	bne.n	800f4e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f51a:	223f      	movs	r2, #63	; 0x3f
 800f51c:	409a      	lsls	r2, r3
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2200      	movs	r2, #0
 800f526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2201      	movs	r2, #1
 800f52e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800f532:	2300      	movs	r3, #0
}
 800f534:	4618      	mov	r0, r3
 800f536:	3710      	adds	r7, #16
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b086      	sub	sp, #24
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f544:	2300      	movs	r3, #0
 800f546:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f548:	4b92      	ldr	r3, [pc, #584]	; (800f794 <HAL_DMA_IRQHandler+0x258>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	4a92      	ldr	r2, [pc, #584]	; (800f798 <HAL_DMA_IRQHandler+0x25c>)
 800f54e:	fba2 2303 	umull	r2, r3, r2, r3
 800f552:	0a9b      	lsrs	r3, r3, #10
 800f554:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f55a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f566:	2208      	movs	r2, #8
 800f568:	409a      	lsls	r2, r3
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	4013      	ands	r3, r2
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d01a      	beq.n	800f5a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	f003 0304 	and.w	r3, r3, #4
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d013      	beq.n	800f5a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f022 0204 	bic.w	r2, r2, #4
 800f58e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f594:	2208      	movs	r2, #8
 800f596:	409a      	lsls	r2, r3
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5a0:	f043 0201 	orr.w	r2, r3, #1
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	409a      	lsls	r2, r3
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	4013      	ands	r3, r2
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d012      	beq.n	800f5de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	695b      	ldr	r3, [r3, #20]
 800f5be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d00b      	beq.n	800f5de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	409a      	lsls	r2, r3
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5d6:	f043 0202 	orr.w	r2, r3, #2
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5e2:	2204      	movs	r2, #4
 800f5e4:	409a      	lsls	r2, r3
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	4013      	ands	r3, r2
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d012      	beq.n	800f614 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f003 0302 	and.w	r3, r3, #2
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d00b      	beq.n	800f614 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f600:	2204      	movs	r2, #4
 800f602:	409a      	lsls	r2, r3
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f60c:	f043 0204 	orr.w	r2, r3, #4
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f618:	2210      	movs	r2, #16
 800f61a:	409a      	lsls	r2, r3
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	4013      	ands	r3, r2
 800f620:	2b00      	cmp	r3, #0
 800f622:	d043      	beq.n	800f6ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f003 0308 	and.w	r3, r3, #8
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d03c      	beq.n	800f6ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f636:	2210      	movs	r2, #16
 800f638:	409a      	lsls	r2, r3
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d018      	beq.n	800f67e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f656:	2b00      	cmp	r3, #0
 800f658:	d108      	bne.n	800f66c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d024      	beq.n	800f6ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	4798      	blx	r3
 800f66a:	e01f      	b.n	800f6ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f670:	2b00      	cmp	r3, #0
 800f672:	d01b      	beq.n	800f6ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	4798      	blx	r3
 800f67c:	e016      	b.n	800f6ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d107      	bne.n	800f69c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	681a      	ldr	r2, [r3, #0]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f022 0208 	bic.w	r2, r2, #8
 800f69a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d003      	beq.n	800f6ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6b0:	2220      	movs	r2, #32
 800f6b2:	409a      	lsls	r2, r3
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	4013      	ands	r3, r2
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f000 808e 	beq.w	800f7da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f003 0310 	and.w	r3, r3, #16
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	f000 8086 	beq.w	800f7da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6d2:	2220      	movs	r2, #32
 800f6d4:	409a      	lsls	r2, r3
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	2b05      	cmp	r3, #5
 800f6e4:	d136      	bne.n	800f754 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f022 0216 	bic.w	r2, r2, #22
 800f6f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	695a      	ldr	r2, [r3, #20]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f704:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d103      	bne.n	800f716 <HAL_DMA_IRQHandler+0x1da>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f712:	2b00      	cmp	r3, #0
 800f714:	d007      	beq.n	800f726 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f022 0208 	bic.w	r2, r2, #8
 800f724:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f72a:	223f      	movs	r2, #63	; 0x3f
 800f72c:	409a      	lsls	r2, r3
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2200      	movs	r2, #0
 800f736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2201      	movs	r2, #1
 800f73e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f746:	2b00      	cmp	r3, #0
 800f748:	d07d      	beq.n	800f846 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	4798      	blx	r3
        }
        return;
 800f752:	e078      	b.n	800f846 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d01c      	beq.n	800f79c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d108      	bne.n	800f782 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f774:	2b00      	cmp	r3, #0
 800f776:	d030      	beq.n	800f7da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	4798      	blx	r3
 800f780:	e02b      	b.n	800f7da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f786:	2b00      	cmp	r3, #0
 800f788:	d027      	beq.n	800f7da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	4798      	blx	r3
 800f792:	e022      	b.n	800f7da <HAL_DMA_IRQHandler+0x29e>
 800f794:	20000024 	.word	0x20000024
 800f798:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d10f      	bne.n	800f7ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	681a      	ldr	r2, [r3, #0]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	f022 0210 	bic.w	r2, r2, #16
 800f7b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d003      	beq.n	800f7da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d032      	beq.n	800f848 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7e6:	f003 0301 	and.w	r3, r3, #1
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d022      	beq.n	800f834 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2205      	movs	r2, #5
 800f7f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f022 0201 	bic.w	r2, r2, #1
 800f804:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	3301      	adds	r3, #1
 800f80a:	60bb      	str	r3, [r7, #8]
 800f80c:	697a      	ldr	r2, [r7, #20]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d307      	bcc.n	800f822 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	f003 0301 	and.w	r3, r3, #1
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d1f2      	bne.n	800f806 <HAL_DMA_IRQHandler+0x2ca>
 800f820:	e000      	b.n	800f824 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800f822:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2200      	movs	r2, #0
 800f828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2201      	movs	r2, #1
 800f830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d005      	beq.n	800f848 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	4798      	blx	r3
 800f844:	e000      	b.n	800f848 <HAL_DMA_IRQHandler+0x30c>
        return;
 800f846:	bf00      	nop
    }
  }
}
 800f848:	3718      	adds	r7, #24
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop

0800f850 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f850:	b480      	push	{r7}
 800f852:	b085      	sub	sp, #20
 800f854:	af00      	add	r7, sp, #0
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	60b9      	str	r1, [r7, #8]
 800f85a:	607a      	str	r2, [r7, #4]
 800f85c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f86c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	683a      	ldr	r2, [r7, #0]
 800f874:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	2b40      	cmp	r3, #64	; 0x40
 800f87c:	d108      	bne.n	800f890 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	68ba      	ldr	r2, [r7, #8]
 800f88c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800f88e:	e007      	b.n	800f8a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	68ba      	ldr	r2, [r7, #8]
 800f896:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	687a      	ldr	r2, [r7, #4]
 800f89e:	60da      	str	r2, [r3, #12]
}
 800f8a0:	bf00      	nop
 800f8a2:	3714      	adds	r7, #20
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b085      	sub	sp, #20
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	3b10      	subs	r3, #16
 800f8bc:	4a14      	ldr	r2, [pc, #80]	; (800f910 <DMA_CalcBaseAndBitshift+0x64>)
 800f8be:	fba2 2303 	umull	r2, r3, r2, r3
 800f8c2:	091b      	lsrs	r3, r3, #4
 800f8c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f8c6:	4a13      	ldr	r2, [pc, #76]	; (800f914 <DMA_CalcBaseAndBitshift+0x68>)
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	4413      	add	r3, r2
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	2b03      	cmp	r3, #3
 800f8d8:	d909      	bls.n	800f8ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f8e2:	f023 0303 	bic.w	r3, r3, #3
 800f8e6:	1d1a      	adds	r2, r3, #4
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	659a      	str	r2, [r3, #88]	; 0x58
 800f8ec:	e007      	b.n	800f8fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f8f6:	f023 0303 	bic.w	r3, r3, #3
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800f902:	4618      	mov	r0, r3
 800f904:	3714      	adds	r7, #20
 800f906:	46bd      	mov	sp, r7
 800f908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90c:	4770      	bx	lr
 800f90e:	bf00      	nop
 800f910:	aaaaaaab 	.word	0xaaaaaaab
 800f914:	08018f88 	.word	0x08018f88

0800f918 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f918:	b480      	push	{r7}
 800f91a:	b085      	sub	sp, #20
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f920:	2300      	movs	r3, #0
 800f922:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f928:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	699b      	ldr	r3, [r3, #24]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d11f      	bne.n	800f972 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	2b03      	cmp	r3, #3
 800f936:	d855      	bhi.n	800f9e4 <DMA_CheckFifoParam+0xcc>
 800f938:	a201      	add	r2, pc, #4	; (adr r2, 800f940 <DMA_CheckFifoParam+0x28>)
 800f93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f93e:	bf00      	nop
 800f940:	0800f951 	.word	0x0800f951
 800f944:	0800f963 	.word	0x0800f963
 800f948:	0800f951 	.word	0x0800f951
 800f94c:	0800f9e5 	.word	0x0800f9e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d045      	beq.n	800f9e8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800f95c:	2301      	movs	r3, #1
 800f95e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f960:	e042      	b.n	800f9e8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f966:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f96a:	d13f      	bne.n	800f9ec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800f96c:	2301      	movs	r3, #1
 800f96e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f970:	e03c      	b.n	800f9ec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	699b      	ldr	r3, [r3, #24]
 800f976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f97a:	d121      	bne.n	800f9c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	2b03      	cmp	r3, #3
 800f980:	d836      	bhi.n	800f9f0 <DMA_CheckFifoParam+0xd8>
 800f982:	a201      	add	r2, pc, #4	; (adr r2, 800f988 <DMA_CheckFifoParam+0x70>)
 800f984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f988:	0800f999 	.word	0x0800f999
 800f98c:	0800f99f 	.word	0x0800f99f
 800f990:	0800f999 	.word	0x0800f999
 800f994:	0800f9b1 	.word	0x0800f9b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800f998:	2301      	movs	r3, #1
 800f99a:	73fb      	strb	r3, [r7, #15]
      break;
 800f99c:	e02f      	b.n	800f9fe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d024      	beq.n	800f9f4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f9ae:	e021      	b.n	800f9f4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f9b8:	d11e      	bne.n	800f9f8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800f9be:	e01b      	b.n	800f9f8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	2b02      	cmp	r3, #2
 800f9c4:	d902      	bls.n	800f9cc <DMA_CheckFifoParam+0xb4>
 800f9c6:	2b03      	cmp	r3, #3
 800f9c8:	d003      	beq.n	800f9d2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800f9ca:	e018      	b.n	800f9fe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	73fb      	strb	r3, [r7, #15]
      break;
 800f9d0:	e015      	b.n	800f9fe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d00e      	beq.n	800f9fc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800f9de:	2301      	movs	r3, #1
 800f9e0:	73fb      	strb	r3, [r7, #15]
      break;
 800f9e2:	e00b      	b.n	800f9fc <DMA_CheckFifoParam+0xe4>
      break;
 800f9e4:	bf00      	nop
 800f9e6:	e00a      	b.n	800f9fe <DMA_CheckFifoParam+0xe6>
      break;
 800f9e8:	bf00      	nop
 800f9ea:	e008      	b.n	800f9fe <DMA_CheckFifoParam+0xe6>
      break;
 800f9ec:	bf00      	nop
 800f9ee:	e006      	b.n	800f9fe <DMA_CheckFifoParam+0xe6>
      break;
 800f9f0:	bf00      	nop
 800f9f2:	e004      	b.n	800f9fe <DMA_CheckFifoParam+0xe6>
      break;
 800f9f4:	bf00      	nop
 800f9f6:	e002      	b.n	800f9fe <DMA_CheckFifoParam+0xe6>
      break;   
 800f9f8:	bf00      	nop
 800f9fa:	e000      	b.n	800f9fe <DMA_CheckFifoParam+0xe6>
      break;
 800f9fc:	bf00      	nop
    }
  } 
  
  return status; 
 800f9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3714      	adds	r7, #20
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr

0800fa0c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	b083      	sub	sp, #12
 800fa10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800fa12:	2300      	movs	r3, #0
 800fa14:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800fa16:	4b0b      	ldr	r3, [pc, #44]	; (800fa44 <HAL_FLASH_Unlock+0x38>)
 800fa18:	691b      	ldr	r3, [r3, #16]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	da0b      	bge.n	800fa36 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800fa1e:	4b09      	ldr	r3, [pc, #36]	; (800fa44 <HAL_FLASH_Unlock+0x38>)
 800fa20:	4a09      	ldr	r2, [pc, #36]	; (800fa48 <HAL_FLASH_Unlock+0x3c>)
 800fa22:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800fa24:	4b07      	ldr	r3, [pc, #28]	; (800fa44 <HAL_FLASH_Unlock+0x38>)
 800fa26:	4a09      	ldr	r2, [pc, #36]	; (800fa4c <HAL_FLASH_Unlock+0x40>)
 800fa28:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800fa2a:	4b06      	ldr	r3, [pc, #24]	; (800fa44 <HAL_FLASH_Unlock+0x38>)
 800fa2c:	691b      	ldr	r3, [r3, #16]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	da01      	bge.n	800fa36 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800fa32:	2301      	movs	r3, #1
 800fa34:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800fa36:	79fb      	ldrb	r3, [r7, #7]
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	370c      	adds	r7, #12
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr
 800fa44:	40023c00 	.word	0x40023c00
 800fa48:	45670123 	.word	0x45670123
 800fa4c:	cdef89ab 	.word	0xcdef89ab

0800fa50 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800fa50:	b480      	push	{r7}
 800fa52:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800fa54:	4b05      	ldr	r3, [pc, #20]	; (800fa6c <HAL_FLASH_Lock+0x1c>)
 800fa56:	691b      	ldr	r3, [r3, #16]
 800fa58:	4a04      	ldr	r2, [pc, #16]	; (800fa6c <HAL_FLASH_Lock+0x1c>)
 800fa5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fa5e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800fa60:	2300      	movs	r3, #0
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr
 800fa6c:	40023c00 	.word	0x40023c00

0800fa70 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b084      	sub	sp, #16
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fa7c:	4b1a      	ldr	r3, [pc, #104]	; (800fae8 <FLASH_WaitForLastOperation+0x78>)
 800fa7e:	2200      	movs	r2, #0
 800fa80:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800fa82:	f7fe fe67 	bl	800e754 <HAL_GetTick>
 800fa86:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800fa88:	e010      	b.n	800faac <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa90:	d00c      	beq.n	800faac <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d007      	beq.n	800faa8 <FLASH_WaitForLastOperation+0x38>
 800fa98:	f7fe fe5c 	bl	800e754 <HAL_GetTick>
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	1ad3      	subs	r3, r2, r3
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d201      	bcs.n	800faac <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800faa8:	2303      	movs	r3, #3
 800faaa:	e019      	b.n	800fae0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800faac:	4b0f      	ldr	r3, [pc, #60]	; (800faec <FLASH_WaitForLastOperation+0x7c>)
 800faae:	68db      	ldr	r3, [r3, #12]
 800fab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d1e8      	bne.n	800fa8a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800fab8:	4b0c      	ldr	r3, [pc, #48]	; (800faec <FLASH_WaitForLastOperation+0x7c>)
 800faba:	68db      	ldr	r3, [r3, #12]
 800fabc:	f003 0301 	and.w	r3, r3, #1
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d002      	beq.n	800faca <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fac4:	4b09      	ldr	r3, [pc, #36]	; (800faec <FLASH_WaitForLastOperation+0x7c>)
 800fac6:	2201      	movs	r2, #1
 800fac8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800faca:	4b08      	ldr	r3, [pc, #32]	; (800faec <FLASH_WaitForLastOperation+0x7c>)
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d003      	beq.n	800fade <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800fad6:	f000 f80b 	bl	800faf0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fada:	2301      	movs	r3, #1
 800fadc:	e000      	b.n	800fae0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800fade:	2300      	movs	r3, #0
  
}  
 800fae0:	4618      	mov	r0, r3
 800fae2:	3710      	adds	r7, #16
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	20008f28 	.word	0x20008f28
 800faec:	40023c00 	.word	0x40023c00

0800faf0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800faf0:	b480      	push	{r7}
 800faf2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800faf4:	4b27      	ldr	r3, [pc, #156]	; (800fb94 <FLASH_SetErrorCode+0xa4>)
 800faf6:	68db      	ldr	r3, [r3, #12]
 800faf8:	f003 0310 	and.w	r3, r3, #16
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d008      	beq.n	800fb12 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fb00:	4b25      	ldr	r3, [pc, #148]	; (800fb98 <FLASH_SetErrorCode+0xa8>)
 800fb02:	69db      	ldr	r3, [r3, #28]
 800fb04:	f043 0310 	orr.w	r3, r3, #16
 800fb08:	4a23      	ldr	r2, [pc, #140]	; (800fb98 <FLASH_SetErrorCode+0xa8>)
 800fb0a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800fb0c:	4b21      	ldr	r3, [pc, #132]	; (800fb94 <FLASH_SetErrorCode+0xa4>)
 800fb0e:	2210      	movs	r2, #16
 800fb10:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800fb12:	4b20      	ldr	r3, [pc, #128]	; (800fb94 <FLASH_SetErrorCode+0xa4>)
 800fb14:	68db      	ldr	r3, [r3, #12]
 800fb16:	f003 0320 	and.w	r3, r3, #32
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d008      	beq.n	800fb30 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800fb1e:	4b1e      	ldr	r3, [pc, #120]	; (800fb98 <FLASH_SetErrorCode+0xa8>)
 800fb20:	69db      	ldr	r3, [r3, #28]
 800fb22:	f043 0308 	orr.w	r3, r3, #8
 800fb26:	4a1c      	ldr	r2, [pc, #112]	; (800fb98 <FLASH_SetErrorCode+0xa8>)
 800fb28:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800fb2a:	4b1a      	ldr	r3, [pc, #104]	; (800fb94 <FLASH_SetErrorCode+0xa4>)
 800fb2c:	2220      	movs	r2, #32
 800fb2e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800fb30:	4b18      	ldr	r3, [pc, #96]	; (800fb94 <FLASH_SetErrorCode+0xa4>)
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d008      	beq.n	800fb4e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800fb3c:	4b16      	ldr	r3, [pc, #88]	; (800fb98 <FLASH_SetErrorCode+0xa8>)
 800fb3e:	69db      	ldr	r3, [r3, #28]
 800fb40:	f043 0304 	orr.w	r3, r3, #4
 800fb44:	4a14      	ldr	r2, [pc, #80]	; (800fb98 <FLASH_SetErrorCode+0xa8>)
 800fb46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800fb48:	4b12      	ldr	r3, [pc, #72]	; (800fb94 <FLASH_SetErrorCode+0xa4>)
 800fb4a:	2240      	movs	r2, #64	; 0x40
 800fb4c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800fb4e:	4b11      	ldr	r3, [pc, #68]	; (800fb94 <FLASH_SetErrorCode+0xa4>)
 800fb50:	68db      	ldr	r3, [r3, #12]
 800fb52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d008      	beq.n	800fb6c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800fb5a:	4b0f      	ldr	r3, [pc, #60]	; (800fb98 <FLASH_SetErrorCode+0xa8>)
 800fb5c:	69db      	ldr	r3, [r3, #28]
 800fb5e:	f043 0302 	orr.w	r3, r3, #2
 800fb62:	4a0d      	ldr	r2, [pc, #52]	; (800fb98 <FLASH_SetErrorCode+0xa8>)
 800fb64:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800fb66:	4b0b      	ldr	r3, [pc, #44]	; (800fb94 <FLASH_SetErrorCode+0xa4>)
 800fb68:	2280      	movs	r2, #128	; 0x80
 800fb6a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800fb6c:	4b09      	ldr	r3, [pc, #36]	; (800fb94 <FLASH_SetErrorCode+0xa4>)
 800fb6e:	68db      	ldr	r3, [r3, #12]
 800fb70:	f003 0302 	and.w	r3, r3, #2
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d008      	beq.n	800fb8a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800fb78:	4b07      	ldr	r3, [pc, #28]	; (800fb98 <FLASH_SetErrorCode+0xa8>)
 800fb7a:	69db      	ldr	r3, [r3, #28]
 800fb7c:	f043 0320 	orr.w	r3, r3, #32
 800fb80:	4a05      	ldr	r2, [pc, #20]	; (800fb98 <FLASH_SetErrorCode+0xa8>)
 800fb82:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800fb84:	4b03      	ldr	r3, [pc, #12]	; (800fb94 <FLASH_SetErrorCode+0xa4>)
 800fb86:	2202      	movs	r2, #2
 800fb88:	60da      	str	r2, [r3, #12]
  }
}
 800fb8a:	bf00      	nop
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr
 800fb94:	40023c00 	.word	0x40023c00
 800fb98:	20008f28 	.word	0x20008f28

0800fb9c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b084      	sub	sp, #16
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fba6:	2301      	movs	r3, #1
 800fba8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fbae:	4b31      	ldr	r3, [pc, #196]	; (800fc74 <HAL_FLASHEx_Erase+0xd8>)
 800fbb0:	7e1b      	ldrb	r3, [r3, #24]
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d101      	bne.n	800fbba <HAL_FLASHEx_Erase+0x1e>
 800fbb6:	2302      	movs	r3, #2
 800fbb8:	e058      	b.n	800fc6c <HAL_FLASHEx_Erase+0xd0>
 800fbba:	4b2e      	ldr	r3, [pc, #184]	; (800fc74 <HAL_FLASHEx_Erase+0xd8>)
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fbc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fbc4:	f7ff ff54 	bl	800fa70 <FLASH_WaitForLastOperation>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800fbcc:	7bfb      	ldrb	r3, [r7, #15]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d148      	bne.n	800fc64 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	f04f 32ff 	mov.w	r2, #4294967295
 800fbd8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d115      	bne.n	800fc0e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	691b      	ldr	r3, [r3, #16]
 800fbe6:	b2da      	uxtb	r2, r3
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	4619      	mov	r1, r3
 800fbee:	4610      	mov	r0, r2
 800fbf0:	f000 f844 	bl	800fc7c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fbf4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fbf8:	f7ff ff3a 	bl	800fa70 <FLASH_WaitForLastOperation>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800fc00:	4b1d      	ldr	r3, [pc, #116]	; (800fc78 <HAL_FLASHEx_Erase+0xdc>)
 800fc02:	691b      	ldr	r3, [r3, #16]
 800fc04:	4a1c      	ldr	r2, [pc, #112]	; (800fc78 <HAL_FLASHEx_Erase+0xdc>)
 800fc06:	f023 0304 	bic.w	r3, r3, #4
 800fc0a:	6113      	str	r3, [r2, #16]
 800fc0c:	e028      	b.n	800fc60 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	689b      	ldr	r3, [r3, #8]
 800fc12:	60bb      	str	r3, [r7, #8]
 800fc14:	e01c      	b.n	800fc50 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	691b      	ldr	r3, [r3, #16]
 800fc1a:	b2db      	uxtb	r3, r3
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	68b8      	ldr	r0, [r7, #8]
 800fc20:	f000 f850 	bl	800fcc4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fc24:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fc28:	f7ff ff22 	bl	800fa70 <FLASH_WaitForLastOperation>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800fc30:	4b11      	ldr	r3, [pc, #68]	; (800fc78 <HAL_FLASHEx_Erase+0xdc>)
 800fc32:	691b      	ldr	r3, [r3, #16]
 800fc34:	4a10      	ldr	r2, [pc, #64]	; (800fc78 <HAL_FLASHEx_Erase+0xdc>)
 800fc36:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800fc3a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800fc3c:	7bfb      	ldrb	r3, [r7, #15]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d003      	beq.n	800fc4a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	68ba      	ldr	r2, [r7, #8]
 800fc46:	601a      	str	r2, [r3, #0]
          break;
 800fc48:	e00a      	b.n	800fc60 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	60bb      	str	r3, [r7, #8]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	68da      	ldr	r2, [r3, #12]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	4413      	add	r3, r2
 800fc5a:	68ba      	ldr	r2, [r7, #8]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d3da      	bcc.n	800fc16 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800fc60:	f000 f878 	bl	800fd54 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800fc64:	4b03      	ldr	r3, [pc, #12]	; (800fc74 <HAL_FLASHEx_Erase+0xd8>)
 800fc66:	2200      	movs	r2, #0
 800fc68:	761a      	strb	r2, [r3, #24]

  return status;
 800fc6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3710      	adds	r7, #16
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	20008f28 	.word	0x20008f28
 800fc78:	40023c00 	.word	0x40023c00

0800fc7c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	4603      	mov	r3, r0
 800fc84:	6039      	str	r1, [r7, #0]
 800fc86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fc88:	4b0d      	ldr	r3, [pc, #52]	; (800fcc0 <FLASH_MassErase+0x44>)
 800fc8a:	691b      	ldr	r3, [r3, #16]
 800fc8c:	4a0c      	ldr	r2, [pc, #48]	; (800fcc0 <FLASH_MassErase+0x44>)
 800fc8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800fc94:	4b0a      	ldr	r3, [pc, #40]	; (800fcc0 <FLASH_MassErase+0x44>)
 800fc96:	691b      	ldr	r3, [r3, #16]
 800fc98:	4a09      	ldr	r2, [pc, #36]	; (800fcc0 <FLASH_MassErase+0x44>)
 800fc9a:	f043 0304 	orr.w	r3, r3, #4
 800fc9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800fca0:	4b07      	ldr	r3, [pc, #28]	; (800fcc0 <FLASH_MassErase+0x44>)
 800fca2:	691a      	ldr	r2, [r3, #16]
 800fca4:	79fb      	ldrb	r3, [r7, #7]
 800fca6:	021b      	lsls	r3, r3, #8
 800fca8:	4313      	orrs	r3, r2
 800fcaa:	4a05      	ldr	r2, [pc, #20]	; (800fcc0 <FLASH_MassErase+0x44>)
 800fcac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fcb0:	6113      	str	r3, [r2, #16]
}
 800fcb2:	bf00      	nop
 800fcb4:	370c      	adds	r7, #12
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbc:	4770      	bx	lr
 800fcbe:	bf00      	nop
 800fcc0:	40023c00 	.word	0x40023c00

0800fcc4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b085      	sub	sp, #20
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	460b      	mov	r3, r1
 800fcce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800fcd4:	78fb      	ldrb	r3, [r7, #3]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d102      	bne.n	800fce0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	60fb      	str	r3, [r7, #12]
 800fcde:	e010      	b.n	800fd02 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800fce0:	78fb      	ldrb	r3, [r7, #3]
 800fce2:	2b01      	cmp	r3, #1
 800fce4:	d103      	bne.n	800fcee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800fce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fcea:	60fb      	str	r3, [r7, #12]
 800fcec:	e009      	b.n	800fd02 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800fcee:	78fb      	ldrb	r3, [r7, #3]
 800fcf0:	2b02      	cmp	r3, #2
 800fcf2:	d103      	bne.n	800fcfc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800fcf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fcf8:	60fb      	str	r3, [r7, #12]
 800fcfa:	e002      	b.n	800fd02 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800fcfc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800fd00:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fd02:	4b13      	ldr	r3, [pc, #76]	; (800fd50 <FLASH_Erase_Sector+0x8c>)
 800fd04:	691b      	ldr	r3, [r3, #16]
 800fd06:	4a12      	ldr	r2, [pc, #72]	; (800fd50 <FLASH_Erase_Sector+0x8c>)
 800fd08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800fd0e:	4b10      	ldr	r3, [pc, #64]	; (800fd50 <FLASH_Erase_Sector+0x8c>)
 800fd10:	691a      	ldr	r2, [r3, #16]
 800fd12:	490f      	ldr	r1, [pc, #60]	; (800fd50 <FLASH_Erase_Sector+0x8c>)
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	4313      	orrs	r3, r2
 800fd18:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800fd1a:	4b0d      	ldr	r3, [pc, #52]	; (800fd50 <FLASH_Erase_Sector+0x8c>)
 800fd1c:	691b      	ldr	r3, [r3, #16]
 800fd1e:	4a0c      	ldr	r2, [pc, #48]	; (800fd50 <FLASH_Erase_Sector+0x8c>)
 800fd20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800fd24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800fd26:	4b0a      	ldr	r3, [pc, #40]	; (800fd50 <FLASH_Erase_Sector+0x8c>)
 800fd28:	691a      	ldr	r2, [r3, #16]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	00db      	lsls	r3, r3, #3
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	4a07      	ldr	r2, [pc, #28]	; (800fd50 <FLASH_Erase_Sector+0x8c>)
 800fd32:	f043 0302 	orr.w	r3, r3, #2
 800fd36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800fd38:	4b05      	ldr	r3, [pc, #20]	; (800fd50 <FLASH_Erase_Sector+0x8c>)
 800fd3a:	691b      	ldr	r3, [r3, #16]
 800fd3c:	4a04      	ldr	r2, [pc, #16]	; (800fd50 <FLASH_Erase_Sector+0x8c>)
 800fd3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fd42:	6113      	str	r3, [r2, #16]
}
 800fd44:	bf00      	nop
 800fd46:	3714      	adds	r7, #20
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr
 800fd50:	40023c00 	.word	0x40023c00

0800fd54 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800fd54:	b480      	push	{r7}
 800fd56:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800fd58:	4b20      	ldr	r3, [pc, #128]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d017      	beq.n	800fd94 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800fd64:	4b1d      	ldr	r3, [pc, #116]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4a1c      	ldr	r2, [pc, #112]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fd6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fd6e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800fd70:	4b1a      	ldr	r3, [pc, #104]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	4a19      	ldr	r2, [pc, #100]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fd76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fd7a:	6013      	str	r3, [r2, #0]
 800fd7c:	4b17      	ldr	r3, [pc, #92]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	4a16      	ldr	r2, [pc, #88]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fd82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd86:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800fd88:	4b14      	ldr	r3, [pc, #80]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	4a13      	ldr	r2, [pc, #76]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fd8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fd92:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800fd94:	4b11      	ldr	r3, [pc, #68]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d017      	beq.n	800fdd0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800fda0:	4b0e      	ldr	r3, [pc, #56]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4a0d      	ldr	r2, [pc, #52]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fda6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fdaa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800fdac:	4b0b      	ldr	r3, [pc, #44]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a0a      	ldr	r2, [pc, #40]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fdb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fdb6:	6013      	str	r3, [r2, #0]
 800fdb8:	4b08      	ldr	r3, [pc, #32]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	4a07      	ldr	r2, [pc, #28]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fdbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fdc2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800fdc4:	4b05      	ldr	r3, [pc, #20]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	4a04      	ldr	r2, [pc, #16]	; (800fddc <FLASH_FlushCaches+0x88>)
 800fdca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fdce:	6013      	str	r3, [r2, #0]
  }
}
 800fdd0:	bf00      	nop
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr
 800fdda:	bf00      	nop
 800fddc:	40023c00 	.word	0x40023c00

0800fde0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b089      	sub	sp, #36	; 0x24
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fdea:	2300      	movs	r3, #0
 800fdec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	61fb      	str	r3, [r7, #28]
 800fdfa:	e16b      	b.n	80100d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	69fb      	ldr	r3, [r7, #28]
 800fe00:	fa02 f303 	lsl.w	r3, r2, r3
 800fe04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	697a      	ldr	r2, [r7, #20]
 800fe0c:	4013      	ands	r3, r2
 800fe0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800fe10:	693a      	ldr	r2, [r7, #16]
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	f040 815a 	bne.w	80100ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	2b01      	cmp	r3, #1
 800fe20:	d00b      	beq.n	800fe3a <HAL_GPIO_Init+0x5a>
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	685b      	ldr	r3, [r3, #4]
 800fe26:	2b02      	cmp	r3, #2
 800fe28:	d007      	beq.n	800fe3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fe2e:	2b11      	cmp	r3, #17
 800fe30:	d003      	beq.n	800fe3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	2b12      	cmp	r3, #18
 800fe38:	d130      	bne.n	800fe9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	689b      	ldr	r3, [r3, #8]
 800fe3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fe40:	69fb      	ldr	r3, [r7, #28]
 800fe42:	005b      	lsls	r3, r3, #1
 800fe44:	2203      	movs	r2, #3
 800fe46:	fa02 f303 	lsl.w	r3, r2, r3
 800fe4a:	43db      	mvns	r3, r3
 800fe4c:	69ba      	ldr	r2, [r7, #24]
 800fe4e:	4013      	ands	r3, r2
 800fe50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	68da      	ldr	r2, [r3, #12]
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	005b      	lsls	r3, r3, #1
 800fe5a:	fa02 f303 	lsl.w	r3, r2, r3
 800fe5e:	69ba      	ldr	r2, [r7, #24]
 800fe60:	4313      	orrs	r3, r2
 800fe62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	69ba      	ldr	r2, [r7, #24]
 800fe68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fe70:	2201      	movs	r2, #1
 800fe72:	69fb      	ldr	r3, [r7, #28]
 800fe74:	fa02 f303 	lsl.w	r3, r2, r3
 800fe78:	43db      	mvns	r3, r3
 800fe7a:	69ba      	ldr	r2, [r7, #24]
 800fe7c:	4013      	ands	r3, r2
 800fe7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	091b      	lsrs	r3, r3, #4
 800fe86:	f003 0201 	and.w	r2, r3, #1
 800fe8a:	69fb      	ldr	r3, [r7, #28]
 800fe8c:	fa02 f303 	lsl.w	r3, r2, r3
 800fe90:	69ba      	ldr	r2, [r7, #24]
 800fe92:	4313      	orrs	r3, r2
 800fe94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	69ba      	ldr	r2, [r7, #24]
 800fe9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fea2:	69fb      	ldr	r3, [r7, #28]
 800fea4:	005b      	lsls	r3, r3, #1
 800fea6:	2203      	movs	r2, #3
 800fea8:	fa02 f303 	lsl.w	r3, r2, r3
 800feac:	43db      	mvns	r3, r3
 800feae:	69ba      	ldr	r2, [r7, #24]
 800feb0:	4013      	ands	r3, r2
 800feb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	689a      	ldr	r2, [r3, #8]
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	005b      	lsls	r3, r3, #1
 800febc:	fa02 f303 	lsl.w	r3, r2, r3
 800fec0:	69ba      	ldr	r2, [r7, #24]
 800fec2:	4313      	orrs	r3, r2
 800fec4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	69ba      	ldr	r2, [r7, #24]
 800feca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	2b02      	cmp	r3, #2
 800fed2:	d003      	beq.n	800fedc <HAL_GPIO_Init+0xfc>
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	2b12      	cmp	r3, #18
 800feda:	d123      	bne.n	800ff24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	08da      	lsrs	r2, r3, #3
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	3208      	adds	r2, #8
 800fee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800feea:	69fb      	ldr	r3, [r7, #28]
 800feec:	f003 0307 	and.w	r3, r3, #7
 800fef0:	009b      	lsls	r3, r3, #2
 800fef2:	220f      	movs	r2, #15
 800fef4:	fa02 f303 	lsl.w	r3, r2, r3
 800fef8:	43db      	mvns	r3, r3
 800fefa:	69ba      	ldr	r2, [r7, #24]
 800fefc:	4013      	ands	r3, r2
 800fefe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	691a      	ldr	r2, [r3, #16]
 800ff04:	69fb      	ldr	r3, [r7, #28]
 800ff06:	f003 0307 	and.w	r3, r3, #7
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ff10:	69ba      	ldr	r2, [r7, #24]
 800ff12:	4313      	orrs	r3, r2
 800ff14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ff16:	69fb      	ldr	r3, [r7, #28]
 800ff18:	08da      	lsrs	r2, r3, #3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	3208      	adds	r2, #8
 800ff1e:	69b9      	ldr	r1, [r7, #24]
 800ff20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ff2a:	69fb      	ldr	r3, [r7, #28]
 800ff2c:	005b      	lsls	r3, r3, #1
 800ff2e:	2203      	movs	r2, #3
 800ff30:	fa02 f303 	lsl.w	r3, r2, r3
 800ff34:	43db      	mvns	r3, r3
 800ff36:	69ba      	ldr	r2, [r7, #24]
 800ff38:	4013      	ands	r3, r2
 800ff3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	f003 0203 	and.w	r2, r3, #3
 800ff44:	69fb      	ldr	r3, [r7, #28]
 800ff46:	005b      	lsls	r3, r3, #1
 800ff48:	fa02 f303 	lsl.w	r3, r2, r3
 800ff4c:	69ba      	ldr	r2, [r7, #24]
 800ff4e:	4313      	orrs	r3, r2
 800ff50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	69ba      	ldr	r2, [r7, #24]
 800ff56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	f000 80b4 	beq.w	80100ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ff66:	2300      	movs	r3, #0
 800ff68:	60fb      	str	r3, [r7, #12]
 800ff6a:	4b5f      	ldr	r3, [pc, #380]	; (80100e8 <HAL_GPIO_Init+0x308>)
 800ff6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff6e:	4a5e      	ldr	r2, [pc, #376]	; (80100e8 <HAL_GPIO_Init+0x308>)
 800ff70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ff74:	6453      	str	r3, [r2, #68]	; 0x44
 800ff76:	4b5c      	ldr	r3, [pc, #368]	; (80100e8 <HAL_GPIO_Init+0x308>)
 800ff78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff7e:	60fb      	str	r3, [r7, #12]
 800ff80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ff82:	4a5a      	ldr	r2, [pc, #360]	; (80100ec <HAL_GPIO_Init+0x30c>)
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	089b      	lsrs	r3, r3, #2
 800ff88:	3302      	adds	r3, #2
 800ff8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	f003 0303 	and.w	r3, r3, #3
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	220f      	movs	r2, #15
 800ff9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ff9e:	43db      	mvns	r3, r3
 800ffa0:	69ba      	ldr	r2, [r7, #24]
 800ffa2:	4013      	ands	r3, r2
 800ffa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	4a51      	ldr	r2, [pc, #324]	; (80100f0 <HAL_GPIO_Init+0x310>)
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	d02b      	beq.n	8010006 <HAL_GPIO_Init+0x226>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	4a50      	ldr	r2, [pc, #320]	; (80100f4 <HAL_GPIO_Init+0x314>)
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d025      	beq.n	8010002 <HAL_GPIO_Init+0x222>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	4a4f      	ldr	r2, [pc, #316]	; (80100f8 <HAL_GPIO_Init+0x318>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d01f      	beq.n	800fffe <HAL_GPIO_Init+0x21e>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	4a4e      	ldr	r2, [pc, #312]	; (80100fc <HAL_GPIO_Init+0x31c>)
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d019      	beq.n	800fffa <HAL_GPIO_Init+0x21a>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	4a4d      	ldr	r2, [pc, #308]	; (8010100 <HAL_GPIO_Init+0x320>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d013      	beq.n	800fff6 <HAL_GPIO_Init+0x216>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4a4c      	ldr	r2, [pc, #304]	; (8010104 <HAL_GPIO_Init+0x324>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d00d      	beq.n	800fff2 <HAL_GPIO_Init+0x212>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4a4b      	ldr	r2, [pc, #300]	; (8010108 <HAL_GPIO_Init+0x328>)
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d007      	beq.n	800ffee <HAL_GPIO_Init+0x20e>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	4a4a      	ldr	r2, [pc, #296]	; (801010c <HAL_GPIO_Init+0x32c>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d101      	bne.n	800ffea <HAL_GPIO_Init+0x20a>
 800ffe6:	2307      	movs	r3, #7
 800ffe8:	e00e      	b.n	8010008 <HAL_GPIO_Init+0x228>
 800ffea:	2308      	movs	r3, #8
 800ffec:	e00c      	b.n	8010008 <HAL_GPIO_Init+0x228>
 800ffee:	2306      	movs	r3, #6
 800fff0:	e00a      	b.n	8010008 <HAL_GPIO_Init+0x228>
 800fff2:	2305      	movs	r3, #5
 800fff4:	e008      	b.n	8010008 <HAL_GPIO_Init+0x228>
 800fff6:	2304      	movs	r3, #4
 800fff8:	e006      	b.n	8010008 <HAL_GPIO_Init+0x228>
 800fffa:	2303      	movs	r3, #3
 800fffc:	e004      	b.n	8010008 <HAL_GPIO_Init+0x228>
 800fffe:	2302      	movs	r3, #2
 8010000:	e002      	b.n	8010008 <HAL_GPIO_Init+0x228>
 8010002:	2301      	movs	r3, #1
 8010004:	e000      	b.n	8010008 <HAL_GPIO_Init+0x228>
 8010006:	2300      	movs	r3, #0
 8010008:	69fa      	ldr	r2, [r7, #28]
 801000a:	f002 0203 	and.w	r2, r2, #3
 801000e:	0092      	lsls	r2, r2, #2
 8010010:	4093      	lsls	r3, r2
 8010012:	69ba      	ldr	r2, [r7, #24]
 8010014:	4313      	orrs	r3, r2
 8010016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010018:	4934      	ldr	r1, [pc, #208]	; (80100ec <HAL_GPIO_Init+0x30c>)
 801001a:	69fb      	ldr	r3, [r7, #28]
 801001c:	089b      	lsrs	r3, r3, #2
 801001e:	3302      	adds	r3, #2
 8010020:	69ba      	ldr	r2, [r7, #24]
 8010022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010026:	4b3a      	ldr	r3, [pc, #232]	; (8010110 <HAL_GPIO_Init+0x330>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	43db      	mvns	r3, r3
 8010030:	69ba      	ldr	r2, [r7, #24]
 8010032:	4013      	ands	r3, r2
 8010034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801003e:	2b00      	cmp	r3, #0
 8010040:	d003      	beq.n	801004a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8010042:	69ba      	ldr	r2, [r7, #24]
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	4313      	orrs	r3, r2
 8010048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801004a:	4a31      	ldr	r2, [pc, #196]	; (8010110 <HAL_GPIO_Init+0x330>)
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8010050:	4b2f      	ldr	r3, [pc, #188]	; (8010110 <HAL_GPIO_Init+0x330>)
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	43db      	mvns	r3, r3
 801005a:	69ba      	ldr	r2, [r7, #24]
 801005c:	4013      	ands	r3, r2
 801005e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010068:	2b00      	cmp	r3, #0
 801006a:	d003      	beq.n	8010074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 801006c:	69ba      	ldr	r2, [r7, #24]
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	4313      	orrs	r3, r2
 8010072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010074:	4a26      	ldr	r2, [pc, #152]	; (8010110 <HAL_GPIO_Init+0x330>)
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801007a:	4b25      	ldr	r3, [pc, #148]	; (8010110 <HAL_GPIO_Init+0x330>)
 801007c:	689b      	ldr	r3, [r3, #8]
 801007e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	43db      	mvns	r3, r3
 8010084:	69ba      	ldr	r2, [r7, #24]
 8010086:	4013      	ands	r3, r2
 8010088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010092:	2b00      	cmp	r3, #0
 8010094:	d003      	beq.n	801009e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8010096:	69ba      	ldr	r2, [r7, #24]
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	4313      	orrs	r3, r2
 801009c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801009e:	4a1c      	ldr	r2, [pc, #112]	; (8010110 <HAL_GPIO_Init+0x330>)
 80100a0:	69bb      	ldr	r3, [r7, #24]
 80100a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80100a4:	4b1a      	ldr	r3, [pc, #104]	; (8010110 <HAL_GPIO_Init+0x330>)
 80100a6:	68db      	ldr	r3, [r3, #12]
 80100a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80100aa:	693b      	ldr	r3, [r7, #16]
 80100ac:	43db      	mvns	r3, r3
 80100ae:	69ba      	ldr	r2, [r7, #24]
 80100b0:	4013      	ands	r3, r2
 80100b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d003      	beq.n	80100c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80100c0:	69ba      	ldr	r2, [r7, #24]
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	4313      	orrs	r3, r2
 80100c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80100c8:	4a11      	ldr	r2, [pc, #68]	; (8010110 <HAL_GPIO_Init+0x330>)
 80100ca:	69bb      	ldr	r3, [r7, #24]
 80100cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	3301      	adds	r3, #1
 80100d2:	61fb      	str	r3, [r7, #28]
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	2b0f      	cmp	r3, #15
 80100d8:	f67f ae90 	bls.w	800fdfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80100dc:	bf00      	nop
 80100de:	3724      	adds	r7, #36	; 0x24
 80100e0:	46bd      	mov	sp, r7
 80100e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e6:	4770      	bx	lr
 80100e8:	40023800 	.word	0x40023800
 80100ec:	40013800 	.word	0x40013800
 80100f0:	40020000 	.word	0x40020000
 80100f4:	40020400 	.word	0x40020400
 80100f8:	40020800 	.word	0x40020800
 80100fc:	40020c00 	.word	0x40020c00
 8010100:	40021000 	.word	0x40021000
 8010104:	40021400 	.word	0x40021400
 8010108:	40021800 	.word	0x40021800
 801010c:	40021c00 	.word	0x40021c00
 8010110:	40013c00 	.word	0x40013c00

08010114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	460b      	mov	r3, r1
 801011e:	807b      	strh	r3, [r7, #2]
 8010120:	4613      	mov	r3, r2
 8010122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010124:	787b      	ldrb	r3, [r7, #1]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d003      	beq.n	8010132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801012a:	887a      	ldrh	r2, [r7, #2]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8010130:	e003      	b.n	801013a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8010132:	887b      	ldrh	r3, [r7, #2]
 8010134:	041a      	lsls	r2, r3, #16
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	619a      	str	r2, [r3, #24]
}
 801013a:	bf00      	nop
 801013c:	370c      	adds	r7, #12
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr
	...

08010148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	4603      	mov	r3, r0
 8010150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8010152:	4b08      	ldr	r3, [pc, #32]	; (8010174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010154:	695a      	ldr	r2, [r3, #20]
 8010156:	88fb      	ldrh	r3, [r7, #6]
 8010158:	4013      	ands	r3, r2
 801015a:	2b00      	cmp	r3, #0
 801015c:	d006      	beq.n	801016c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801015e:	4a05      	ldr	r2, [pc, #20]	; (8010174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010160:	88fb      	ldrh	r3, [r7, #6]
 8010162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010164:	88fb      	ldrh	r3, [r7, #6]
 8010166:	4618      	mov	r0, r3
 8010168:	f7fe f988 	bl	800e47c <HAL_GPIO_EXTI_Callback>
  }
}
 801016c:	bf00      	nop
 801016e:	3708      	adds	r7, #8
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	40013c00 	.word	0x40013c00

08010178 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b086      	sub	sp, #24
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d101      	bne.n	801018a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010186:	2301      	movs	r3, #1
 8010188:	e25b      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f003 0301 	and.w	r3, r3, #1
 8010192:	2b00      	cmp	r3, #0
 8010194:	d075      	beq.n	8010282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8010196:	4ba3      	ldr	r3, [pc, #652]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 8010198:	689b      	ldr	r3, [r3, #8]
 801019a:	f003 030c 	and.w	r3, r3, #12
 801019e:	2b04      	cmp	r3, #4
 80101a0:	d00c      	beq.n	80101bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80101a2:	4ba0      	ldr	r3, [pc, #640]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80101a4:	689b      	ldr	r3, [r3, #8]
 80101a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80101aa:	2b08      	cmp	r3, #8
 80101ac:	d112      	bne.n	80101d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80101ae:	4b9d      	ldr	r3, [pc, #628]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80101b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80101ba:	d10b      	bne.n	80101d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80101bc:	4b99      	ldr	r3, [pc, #612]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d05b      	beq.n	8010280 <HAL_RCC_OscConfig+0x108>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d157      	bne.n	8010280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80101d0:	2301      	movs	r3, #1
 80101d2:	e236      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101dc:	d106      	bne.n	80101ec <HAL_RCC_OscConfig+0x74>
 80101de:	4b91      	ldr	r3, [pc, #580]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	4a90      	ldr	r2, [pc, #576]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80101e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80101e8:	6013      	str	r3, [r2, #0]
 80101ea:	e01d      	b.n	8010228 <HAL_RCC_OscConfig+0xb0>
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80101f4:	d10c      	bne.n	8010210 <HAL_RCC_OscConfig+0x98>
 80101f6:	4b8b      	ldr	r3, [pc, #556]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	4a8a      	ldr	r2, [pc, #552]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80101fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010200:	6013      	str	r3, [r2, #0]
 8010202:	4b88      	ldr	r3, [pc, #544]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4a87      	ldr	r2, [pc, #540]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 8010208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801020c:	6013      	str	r3, [r2, #0]
 801020e:	e00b      	b.n	8010228 <HAL_RCC_OscConfig+0xb0>
 8010210:	4b84      	ldr	r3, [pc, #528]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	4a83      	ldr	r2, [pc, #524]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 8010216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801021a:	6013      	str	r3, [r2, #0]
 801021c:	4b81      	ldr	r3, [pc, #516]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	4a80      	ldr	r2, [pc, #512]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 8010222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d013      	beq.n	8010258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010230:	f7fe fa90 	bl	800e754 <HAL_GetTick>
 8010234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010236:	e008      	b.n	801024a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010238:	f7fe fa8c 	bl	800e754 <HAL_GetTick>
 801023c:	4602      	mov	r2, r0
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	2b64      	cmp	r3, #100	; 0x64
 8010244:	d901      	bls.n	801024a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8010246:	2303      	movs	r3, #3
 8010248:	e1fb      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801024a:	4b76      	ldr	r3, [pc, #472]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010252:	2b00      	cmp	r3, #0
 8010254:	d0f0      	beq.n	8010238 <HAL_RCC_OscConfig+0xc0>
 8010256:	e014      	b.n	8010282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010258:	f7fe fa7c 	bl	800e754 <HAL_GetTick>
 801025c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801025e:	e008      	b.n	8010272 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010260:	f7fe fa78 	bl	800e754 <HAL_GetTick>
 8010264:	4602      	mov	r2, r0
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	1ad3      	subs	r3, r2, r3
 801026a:	2b64      	cmp	r3, #100	; 0x64
 801026c:	d901      	bls.n	8010272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801026e:	2303      	movs	r3, #3
 8010270:	e1e7      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010272:	4b6c      	ldr	r3, [pc, #432]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801027a:	2b00      	cmp	r3, #0
 801027c:	d1f0      	bne.n	8010260 <HAL_RCC_OscConfig+0xe8>
 801027e:	e000      	b.n	8010282 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f003 0302 	and.w	r3, r3, #2
 801028a:	2b00      	cmp	r3, #0
 801028c:	d063      	beq.n	8010356 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801028e:	4b65      	ldr	r3, [pc, #404]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 8010290:	689b      	ldr	r3, [r3, #8]
 8010292:	f003 030c 	and.w	r3, r3, #12
 8010296:	2b00      	cmp	r3, #0
 8010298:	d00b      	beq.n	80102b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801029a:	4b62      	ldr	r3, [pc, #392]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 801029c:	689b      	ldr	r3, [r3, #8]
 801029e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80102a2:	2b08      	cmp	r3, #8
 80102a4:	d11c      	bne.n	80102e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80102a6:	4b5f      	ldr	r3, [pc, #380]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d116      	bne.n	80102e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80102b2:	4b5c      	ldr	r3, [pc, #368]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	f003 0302 	and.w	r3, r3, #2
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d005      	beq.n	80102ca <HAL_RCC_OscConfig+0x152>
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	68db      	ldr	r3, [r3, #12]
 80102c2:	2b01      	cmp	r3, #1
 80102c4:	d001      	beq.n	80102ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80102c6:	2301      	movs	r3, #1
 80102c8:	e1bb      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80102ca:	4b56      	ldr	r3, [pc, #344]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	691b      	ldr	r3, [r3, #16]
 80102d6:	00db      	lsls	r3, r3, #3
 80102d8:	4952      	ldr	r1, [pc, #328]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80102da:	4313      	orrs	r3, r2
 80102dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80102de:	e03a      	b.n	8010356 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d020      	beq.n	801032a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80102e8:	4b4f      	ldr	r3, [pc, #316]	; (8010428 <HAL_RCC_OscConfig+0x2b0>)
 80102ea:	2201      	movs	r2, #1
 80102ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80102ee:	f7fe fa31 	bl	800e754 <HAL_GetTick>
 80102f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80102f4:	e008      	b.n	8010308 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80102f6:	f7fe fa2d 	bl	800e754 <HAL_GetTick>
 80102fa:	4602      	mov	r2, r0
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	1ad3      	subs	r3, r2, r3
 8010300:	2b02      	cmp	r3, #2
 8010302:	d901      	bls.n	8010308 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8010304:	2303      	movs	r3, #3
 8010306:	e19c      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010308:	4b46      	ldr	r3, [pc, #280]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	f003 0302 	and.w	r3, r3, #2
 8010310:	2b00      	cmp	r3, #0
 8010312:	d0f0      	beq.n	80102f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010314:	4b43      	ldr	r3, [pc, #268]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	691b      	ldr	r3, [r3, #16]
 8010320:	00db      	lsls	r3, r3, #3
 8010322:	4940      	ldr	r1, [pc, #256]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 8010324:	4313      	orrs	r3, r2
 8010326:	600b      	str	r3, [r1, #0]
 8010328:	e015      	b.n	8010356 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801032a:	4b3f      	ldr	r3, [pc, #252]	; (8010428 <HAL_RCC_OscConfig+0x2b0>)
 801032c:	2200      	movs	r2, #0
 801032e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010330:	f7fe fa10 	bl	800e754 <HAL_GetTick>
 8010334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010336:	e008      	b.n	801034a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010338:	f7fe fa0c 	bl	800e754 <HAL_GetTick>
 801033c:	4602      	mov	r2, r0
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	1ad3      	subs	r3, r2, r3
 8010342:	2b02      	cmp	r3, #2
 8010344:	d901      	bls.n	801034a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8010346:	2303      	movs	r3, #3
 8010348:	e17b      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801034a:	4b36      	ldr	r3, [pc, #216]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	f003 0302 	and.w	r3, r3, #2
 8010352:	2b00      	cmp	r3, #0
 8010354:	d1f0      	bne.n	8010338 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	f003 0308 	and.w	r3, r3, #8
 801035e:	2b00      	cmp	r3, #0
 8010360:	d030      	beq.n	80103c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	695b      	ldr	r3, [r3, #20]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d016      	beq.n	8010398 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801036a:	4b30      	ldr	r3, [pc, #192]	; (801042c <HAL_RCC_OscConfig+0x2b4>)
 801036c:	2201      	movs	r2, #1
 801036e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010370:	f7fe f9f0 	bl	800e754 <HAL_GetTick>
 8010374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010376:	e008      	b.n	801038a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010378:	f7fe f9ec 	bl	800e754 <HAL_GetTick>
 801037c:	4602      	mov	r2, r0
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	2b02      	cmp	r3, #2
 8010384:	d901      	bls.n	801038a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8010386:	2303      	movs	r3, #3
 8010388:	e15b      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801038a:	4b26      	ldr	r3, [pc, #152]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 801038c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801038e:	f003 0302 	and.w	r3, r3, #2
 8010392:	2b00      	cmp	r3, #0
 8010394:	d0f0      	beq.n	8010378 <HAL_RCC_OscConfig+0x200>
 8010396:	e015      	b.n	80103c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010398:	4b24      	ldr	r3, [pc, #144]	; (801042c <HAL_RCC_OscConfig+0x2b4>)
 801039a:	2200      	movs	r2, #0
 801039c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801039e:	f7fe f9d9 	bl	800e754 <HAL_GetTick>
 80103a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80103a4:	e008      	b.n	80103b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80103a6:	f7fe f9d5 	bl	800e754 <HAL_GetTick>
 80103aa:	4602      	mov	r2, r0
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	1ad3      	subs	r3, r2, r3
 80103b0:	2b02      	cmp	r3, #2
 80103b2:	d901      	bls.n	80103b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80103b4:	2303      	movs	r3, #3
 80103b6:	e144      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80103b8:	4b1a      	ldr	r3, [pc, #104]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80103ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103bc:	f003 0302 	and.w	r3, r3, #2
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d1f0      	bne.n	80103a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f003 0304 	and.w	r3, r3, #4
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	f000 80a0 	beq.w	8010512 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80103d2:	2300      	movs	r3, #0
 80103d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80103d6:	4b13      	ldr	r3, [pc, #76]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80103d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d10f      	bne.n	8010402 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80103e2:	2300      	movs	r3, #0
 80103e4:	60bb      	str	r3, [r7, #8]
 80103e6:	4b0f      	ldr	r3, [pc, #60]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80103e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ea:	4a0e      	ldr	r2, [pc, #56]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80103ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80103f0:	6413      	str	r3, [r2, #64]	; 0x40
 80103f2:	4b0c      	ldr	r3, [pc, #48]	; (8010424 <HAL_RCC_OscConfig+0x2ac>)
 80103f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80103fa:	60bb      	str	r3, [r7, #8]
 80103fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80103fe:	2301      	movs	r3, #1
 8010400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010402:	4b0b      	ldr	r3, [pc, #44]	; (8010430 <HAL_RCC_OscConfig+0x2b8>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801040a:	2b00      	cmp	r3, #0
 801040c:	d121      	bne.n	8010452 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801040e:	4b08      	ldr	r3, [pc, #32]	; (8010430 <HAL_RCC_OscConfig+0x2b8>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	4a07      	ldr	r2, [pc, #28]	; (8010430 <HAL_RCC_OscConfig+0x2b8>)
 8010414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801041a:	f7fe f99b 	bl	800e754 <HAL_GetTick>
 801041e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010420:	e011      	b.n	8010446 <HAL_RCC_OscConfig+0x2ce>
 8010422:	bf00      	nop
 8010424:	40023800 	.word	0x40023800
 8010428:	42470000 	.word	0x42470000
 801042c:	42470e80 	.word	0x42470e80
 8010430:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010434:	f7fe f98e 	bl	800e754 <HAL_GetTick>
 8010438:	4602      	mov	r2, r0
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	1ad3      	subs	r3, r2, r3
 801043e:	2b02      	cmp	r3, #2
 8010440:	d901      	bls.n	8010446 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8010442:	2303      	movs	r3, #3
 8010444:	e0fd      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010446:	4b81      	ldr	r3, [pc, #516]	; (801064c <HAL_RCC_OscConfig+0x4d4>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801044e:	2b00      	cmp	r3, #0
 8010450:	d0f0      	beq.n	8010434 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	689b      	ldr	r3, [r3, #8]
 8010456:	2b01      	cmp	r3, #1
 8010458:	d106      	bne.n	8010468 <HAL_RCC_OscConfig+0x2f0>
 801045a:	4b7d      	ldr	r3, [pc, #500]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 801045c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801045e:	4a7c      	ldr	r2, [pc, #496]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 8010460:	f043 0301 	orr.w	r3, r3, #1
 8010464:	6713      	str	r3, [r2, #112]	; 0x70
 8010466:	e01c      	b.n	80104a2 <HAL_RCC_OscConfig+0x32a>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	689b      	ldr	r3, [r3, #8]
 801046c:	2b05      	cmp	r3, #5
 801046e:	d10c      	bne.n	801048a <HAL_RCC_OscConfig+0x312>
 8010470:	4b77      	ldr	r3, [pc, #476]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 8010472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010474:	4a76      	ldr	r2, [pc, #472]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 8010476:	f043 0304 	orr.w	r3, r3, #4
 801047a:	6713      	str	r3, [r2, #112]	; 0x70
 801047c:	4b74      	ldr	r3, [pc, #464]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 801047e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010480:	4a73      	ldr	r2, [pc, #460]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 8010482:	f043 0301 	orr.w	r3, r3, #1
 8010486:	6713      	str	r3, [r2, #112]	; 0x70
 8010488:	e00b      	b.n	80104a2 <HAL_RCC_OscConfig+0x32a>
 801048a:	4b71      	ldr	r3, [pc, #452]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 801048c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801048e:	4a70      	ldr	r2, [pc, #448]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 8010490:	f023 0301 	bic.w	r3, r3, #1
 8010494:	6713      	str	r3, [r2, #112]	; 0x70
 8010496:	4b6e      	ldr	r3, [pc, #440]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 8010498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801049a:	4a6d      	ldr	r2, [pc, #436]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 801049c:	f023 0304 	bic.w	r3, r3, #4
 80104a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	689b      	ldr	r3, [r3, #8]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d015      	beq.n	80104d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80104aa:	f7fe f953 	bl	800e754 <HAL_GetTick>
 80104ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80104b0:	e00a      	b.n	80104c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80104b2:	f7fe f94f 	bl	800e754 <HAL_GetTick>
 80104b6:	4602      	mov	r2, r0
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	1ad3      	subs	r3, r2, r3
 80104bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80104c0:	4293      	cmp	r3, r2
 80104c2:	d901      	bls.n	80104c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80104c4:	2303      	movs	r3, #3
 80104c6:	e0bc      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80104c8:	4b61      	ldr	r3, [pc, #388]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 80104ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104cc:	f003 0302 	and.w	r3, r3, #2
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d0ee      	beq.n	80104b2 <HAL_RCC_OscConfig+0x33a>
 80104d4:	e014      	b.n	8010500 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80104d6:	f7fe f93d 	bl	800e754 <HAL_GetTick>
 80104da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80104dc:	e00a      	b.n	80104f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80104de:	f7fe f939 	bl	800e754 <HAL_GetTick>
 80104e2:	4602      	mov	r2, r0
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	1ad3      	subs	r3, r2, r3
 80104e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80104ec:	4293      	cmp	r3, r2
 80104ee:	d901      	bls.n	80104f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80104f0:	2303      	movs	r3, #3
 80104f2:	e0a6      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80104f4:	4b56      	ldr	r3, [pc, #344]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 80104f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104f8:	f003 0302 	and.w	r3, r3, #2
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d1ee      	bne.n	80104de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010500:	7dfb      	ldrb	r3, [r7, #23]
 8010502:	2b01      	cmp	r3, #1
 8010504:	d105      	bne.n	8010512 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010506:	4b52      	ldr	r3, [pc, #328]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 8010508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801050a:	4a51      	ldr	r2, [pc, #324]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 801050c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010510:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	699b      	ldr	r3, [r3, #24]
 8010516:	2b00      	cmp	r3, #0
 8010518:	f000 8092 	beq.w	8010640 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801051c:	4b4c      	ldr	r3, [pc, #304]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 801051e:	689b      	ldr	r3, [r3, #8]
 8010520:	f003 030c 	and.w	r3, r3, #12
 8010524:	2b08      	cmp	r3, #8
 8010526:	d05c      	beq.n	80105e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	699b      	ldr	r3, [r3, #24]
 801052c:	2b02      	cmp	r3, #2
 801052e:	d141      	bne.n	80105b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010530:	4b48      	ldr	r3, [pc, #288]	; (8010654 <HAL_RCC_OscConfig+0x4dc>)
 8010532:	2200      	movs	r2, #0
 8010534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010536:	f7fe f90d 	bl	800e754 <HAL_GetTick>
 801053a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801053c:	e008      	b.n	8010550 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801053e:	f7fe f909 	bl	800e754 <HAL_GetTick>
 8010542:	4602      	mov	r2, r0
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	1ad3      	subs	r3, r2, r3
 8010548:	2b02      	cmp	r3, #2
 801054a:	d901      	bls.n	8010550 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801054c:	2303      	movs	r3, #3
 801054e:	e078      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010550:	4b3f      	ldr	r3, [pc, #252]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010558:	2b00      	cmp	r3, #0
 801055a:	d1f0      	bne.n	801053e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	69da      	ldr	r2, [r3, #28]
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6a1b      	ldr	r3, [r3, #32]
 8010564:	431a      	orrs	r2, r3
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801056a:	019b      	lsls	r3, r3, #6
 801056c:	431a      	orrs	r2, r3
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010572:	085b      	lsrs	r3, r3, #1
 8010574:	3b01      	subs	r3, #1
 8010576:	041b      	lsls	r3, r3, #16
 8010578:	431a      	orrs	r2, r3
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801057e:	061b      	lsls	r3, r3, #24
 8010580:	4933      	ldr	r1, [pc, #204]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 8010582:	4313      	orrs	r3, r2
 8010584:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010586:	4b33      	ldr	r3, [pc, #204]	; (8010654 <HAL_RCC_OscConfig+0x4dc>)
 8010588:	2201      	movs	r2, #1
 801058a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801058c:	f7fe f8e2 	bl	800e754 <HAL_GetTick>
 8010590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010592:	e008      	b.n	80105a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010594:	f7fe f8de 	bl	800e754 <HAL_GetTick>
 8010598:	4602      	mov	r2, r0
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	2b02      	cmp	r3, #2
 80105a0:	d901      	bls.n	80105a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80105a2:	2303      	movs	r3, #3
 80105a4:	e04d      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80105a6:	4b2a      	ldr	r3, [pc, #168]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d0f0      	beq.n	8010594 <HAL_RCC_OscConfig+0x41c>
 80105b2:	e045      	b.n	8010640 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80105b4:	4b27      	ldr	r3, [pc, #156]	; (8010654 <HAL_RCC_OscConfig+0x4dc>)
 80105b6:	2200      	movs	r2, #0
 80105b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80105ba:	f7fe f8cb 	bl	800e754 <HAL_GetTick>
 80105be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80105c0:	e008      	b.n	80105d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80105c2:	f7fe f8c7 	bl	800e754 <HAL_GetTick>
 80105c6:	4602      	mov	r2, r0
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	2b02      	cmp	r3, #2
 80105ce:	d901      	bls.n	80105d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80105d0:	2303      	movs	r3, #3
 80105d2:	e036      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80105d4:	4b1e      	ldr	r3, [pc, #120]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d1f0      	bne.n	80105c2 <HAL_RCC_OscConfig+0x44a>
 80105e0:	e02e      	b.n	8010640 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	699b      	ldr	r3, [r3, #24]
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d101      	bne.n	80105ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80105ea:	2301      	movs	r3, #1
 80105ec:	e029      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80105ee:	4b18      	ldr	r3, [pc, #96]	; (8010650 <HAL_RCC_OscConfig+0x4d8>)
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	69db      	ldr	r3, [r3, #28]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d11c      	bne.n	801063c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801060c:	429a      	cmp	r2, r3
 801060e:	d115      	bne.n	801063c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010610:	68fa      	ldr	r2, [r7, #12]
 8010612:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010616:	4013      	ands	r3, r2
 8010618:	687a      	ldr	r2, [r7, #4]
 801061a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801061c:	4293      	cmp	r3, r2
 801061e:	d10d      	bne.n	801063c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801062a:	429a      	cmp	r2, r3
 801062c:	d106      	bne.n	801063c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010638:	429a      	cmp	r2, r3
 801063a:	d001      	beq.n	8010640 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 801063c:	2301      	movs	r3, #1
 801063e:	e000      	b.n	8010642 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8010640:	2300      	movs	r3, #0
}
 8010642:	4618      	mov	r0, r3
 8010644:	3718      	adds	r7, #24
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	40007000 	.word	0x40007000
 8010650:	40023800 	.word	0x40023800
 8010654:	42470060 	.word	0x42470060

08010658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d101      	bne.n	801066c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010668:	2301      	movs	r3, #1
 801066a:	e0cc      	b.n	8010806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801066c:	4b68      	ldr	r3, [pc, #416]	; (8010810 <HAL_RCC_ClockConfig+0x1b8>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	f003 030f 	and.w	r3, r3, #15
 8010674:	683a      	ldr	r2, [r7, #0]
 8010676:	429a      	cmp	r2, r3
 8010678:	d90c      	bls.n	8010694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801067a:	4b65      	ldr	r3, [pc, #404]	; (8010810 <HAL_RCC_ClockConfig+0x1b8>)
 801067c:	683a      	ldr	r2, [r7, #0]
 801067e:	b2d2      	uxtb	r2, r2
 8010680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010682:	4b63      	ldr	r3, [pc, #396]	; (8010810 <HAL_RCC_ClockConfig+0x1b8>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f003 030f 	and.w	r3, r3, #15
 801068a:	683a      	ldr	r2, [r7, #0]
 801068c:	429a      	cmp	r2, r3
 801068e:	d001      	beq.n	8010694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010690:	2301      	movs	r3, #1
 8010692:	e0b8      	b.n	8010806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	f003 0302 	and.w	r3, r3, #2
 801069c:	2b00      	cmp	r3, #0
 801069e:	d020      	beq.n	80106e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	f003 0304 	and.w	r3, r3, #4
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d005      	beq.n	80106b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80106ac:	4b59      	ldr	r3, [pc, #356]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 80106ae:	689b      	ldr	r3, [r3, #8]
 80106b0:	4a58      	ldr	r2, [pc, #352]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 80106b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80106b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	f003 0308 	and.w	r3, r3, #8
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d005      	beq.n	80106d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80106c4:	4b53      	ldr	r3, [pc, #332]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	4a52      	ldr	r2, [pc, #328]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 80106ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80106ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80106d0:	4b50      	ldr	r3, [pc, #320]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 80106d2:	689b      	ldr	r3, [r3, #8]
 80106d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	689b      	ldr	r3, [r3, #8]
 80106dc:	494d      	ldr	r1, [pc, #308]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 80106de:	4313      	orrs	r3, r2
 80106e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f003 0301 	and.w	r3, r3, #1
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d044      	beq.n	8010778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	2b01      	cmp	r3, #1
 80106f4:	d107      	bne.n	8010706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80106f6:	4b47      	ldr	r3, [pc, #284]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d119      	bne.n	8010736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010702:	2301      	movs	r3, #1
 8010704:	e07f      	b.n	8010806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	2b02      	cmp	r3, #2
 801070c:	d003      	beq.n	8010716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010712:	2b03      	cmp	r3, #3
 8010714:	d107      	bne.n	8010726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010716:	4b3f      	ldr	r3, [pc, #252]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801071e:	2b00      	cmp	r3, #0
 8010720:	d109      	bne.n	8010736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010722:	2301      	movs	r3, #1
 8010724:	e06f      	b.n	8010806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010726:	4b3b      	ldr	r3, [pc, #236]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	f003 0302 	and.w	r3, r3, #2
 801072e:	2b00      	cmp	r3, #0
 8010730:	d101      	bne.n	8010736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010732:	2301      	movs	r3, #1
 8010734:	e067      	b.n	8010806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010736:	4b37      	ldr	r3, [pc, #220]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 8010738:	689b      	ldr	r3, [r3, #8]
 801073a:	f023 0203 	bic.w	r2, r3, #3
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	685b      	ldr	r3, [r3, #4]
 8010742:	4934      	ldr	r1, [pc, #208]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 8010744:	4313      	orrs	r3, r2
 8010746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010748:	f7fe f804 	bl	800e754 <HAL_GetTick>
 801074c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801074e:	e00a      	b.n	8010766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010750:	f7fe f800 	bl	800e754 <HAL_GetTick>
 8010754:	4602      	mov	r2, r0
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	1ad3      	subs	r3, r2, r3
 801075a:	f241 3288 	movw	r2, #5000	; 0x1388
 801075e:	4293      	cmp	r3, r2
 8010760:	d901      	bls.n	8010766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010762:	2303      	movs	r3, #3
 8010764:	e04f      	b.n	8010806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010766:	4b2b      	ldr	r3, [pc, #172]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 8010768:	689b      	ldr	r3, [r3, #8]
 801076a:	f003 020c 	and.w	r2, r3, #12
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	685b      	ldr	r3, [r3, #4]
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	429a      	cmp	r2, r3
 8010776:	d1eb      	bne.n	8010750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010778:	4b25      	ldr	r3, [pc, #148]	; (8010810 <HAL_RCC_ClockConfig+0x1b8>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	f003 030f 	and.w	r3, r3, #15
 8010780:	683a      	ldr	r2, [r7, #0]
 8010782:	429a      	cmp	r2, r3
 8010784:	d20c      	bcs.n	80107a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010786:	4b22      	ldr	r3, [pc, #136]	; (8010810 <HAL_RCC_ClockConfig+0x1b8>)
 8010788:	683a      	ldr	r2, [r7, #0]
 801078a:	b2d2      	uxtb	r2, r2
 801078c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801078e:	4b20      	ldr	r3, [pc, #128]	; (8010810 <HAL_RCC_ClockConfig+0x1b8>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f003 030f 	and.w	r3, r3, #15
 8010796:	683a      	ldr	r2, [r7, #0]
 8010798:	429a      	cmp	r2, r3
 801079a:	d001      	beq.n	80107a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801079c:	2301      	movs	r3, #1
 801079e:	e032      	b.n	8010806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f003 0304 	and.w	r3, r3, #4
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d008      	beq.n	80107be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80107ac:	4b19      	ldr	r3, [pc, #100]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 80107ae:	689b      	ldr	r3, [r3, #8]
 80107b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	4916      	ldr	r1, [pc, #88]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 80107ba:	4313      	orrs	r3, r2
 80107bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f003 0308 	and.w	r3, r3, #8
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d009      	beq.n	80107de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80107ca:	4b12      	ldr	r3, [pc, #72]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 80107cc:	689b      	ldr	r3, [r3, #8]
 80107ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	691b      	ldr	r3, [r3, #16]
 80107d6:	00db      	lsls	r3, r3, #3
 80107d8:	490e      	ldr	r1, [pc, #56]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 80107da:	4313      	orrs	r3, r2
 80107dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80107de:	f000 f821 	bl	8010824 <HAL_RCC_GetSysClockFreq>
 80107e2:	4601      	mov	r1, r0
 80107e4:	4b0b      	ldr	r3, [pc, #44]	; (8010814 <HAL_RCC_ClockConfig+0x1bc>)
 80107e6:	689b      	ldr	r3, [r3, #8]
 80107e8:	091b      	lsrs	r3, r3, #4
 80107ea:	f003 030f 	and.w	r3, r3, #15
 80107ee:	4a0a      	ldr	r2, [pc, #40]	; (8010818 <HAL_RCC_ClockConfig+0x1c0>)
 80107f0:	5cd3      	ldrb	r3, [r2, r3]
 80107f2:	fa21 f303 	lsr.w	r3, r1, r3
 80107f6:	4a09      	ldr	r2, [pc, #36]	; (801081c <HAL_RCC_ClockConfig+0x1c4>)
 80107f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80107fa:	4b09      	ldr	r3, [pc, #36]	; (8010820 <HAL_RCC_ClockConfig+0x1c8>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	4618      	mov	r0, r3
 8010800:	f7fd ff64 	bl	800e6cc <HAL_InitTick>

  return HAL_OK;
 8010804:	2300      	movs	r3, #0
}
 8010806:	4618      	mov	r0, r3
 8010808:	3710      	adds	r7, #16
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	40023c00 	.word	0x40023c00
 8010814:	40023800 	.word	0x40023800
 8010818:	08018dec 	.word	0x08018dec
 801081c:	20000024 	.word	0x20000024
 8010820:	20000030 	.word	0x20000030

08010824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010826:	b085      	sub	sp, #20
 8010828:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801082a:	2300      	movs	r3, #0
 801082c:	607b      	str	r3, [r7, #4]
 801082e:	2300      	movs	r3, #0
 8010830:	60fb      	str	r3, [r7, #12]
 8010832:	2300      	movs	r3, #0
 8010834:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8010836:	2300      	movs	r3, #0
 8010838:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801083a:	4b63      	ldr	r3, [pc, #396]	; (80109c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	f003 030c 	and.w	r3, r3, #12
 8010842:	2b04      	cmp	r3, #4
 8010844:	d007      	beq.n	8010856 <HAL_RCC_GetSysClockFreq+0x32>
 8010846:	2b08      	cmp	r3, #8
 8010848:	d008      	beq.n	801085c <HAL_RCC_GetSysClockFreq+0x38>
 801084a:	2b00      	cmp	r3, #0
 801084c:	f040 80b4 	bne.w	80109b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010850:	4b5e      	ldr	r3, [pc, #376]	; (80109cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010852:	60bb      	str	r3, [r7, #8]
       break;
 8010854:	e0b3      	b.n	80109be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010856:	4b5e      	ldr	r3, [pc, #376]	; (80109d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8010858:	60bb      	str	r3, [r7, #8]
      break;
 801085a:	e0b0      	b.n	80109be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801085c:	4b5a      	ldr	r3, [pc, #360]	; (80109c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010864:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010866:	4b58      	ldr	r3, [pc, #352]	; (80109c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010868:	685b      	ldr	r3, [r3, #4]
 801086a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801086e:	2b00      	cmp	r3, #0
 8010870:	d04a      	beq.n	8010908 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010872:	4b55      	ldr	r3, [pc, #340]	; (80109c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010874:	685b      	ldr	r3, [r3, #4]
 8010876:	099b      	lsrs	r3, r3, #6
 8010878:	f04f 0400 	mov.w	r4, #0
 801087c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010880:	f04f 0200 	mov.w	r2, #0
 8010884:	ea03 0501 	and.w	r5, r3, r1
 8010888:	ea04 0602 	and.w	r6, r4, r2
 801088c:	4629      	mov	r1, r5
 801088e:	4632      	mov	r2, r6
 8010890:	f04f 0300 	mov.w	r3, #0
 8010894:	f04f 0400 	mov.w	r4, #0
 8010898:	0154      	lsls	r4, r2, #5
 801089a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801089e:	014b      	lsls	r3, r1, #5
 80108a0:	4619      	mov	r1, r3
 80108a2:	4622      	mov	r2, r4
 80108a4:	1b49      	subs	r1, r1, r5
 80108a6:	eb62 0206 	sbc.w	r2, r2, r6
 80108aa:	f04f 0300 	mov.w	r3, #0
 80108ae:	f04f 0400 	mov.w	r4, #0
 80108b2:	0194      	lsls	r4, r2, #6
 80108b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80108b8:	018b      	lsls	r3, r1, #6
 80108ba:	1a5b      	subs	r3, r3, r1
 80108bc:	eb64 0402 	sbc.w	r4, r4, r2
 80108c0:	f04f 0100 	mov.w	r1, #0
 80108c4:	f04f 0200 	mov.w	r2, #0
 80108c8:	00e2      	lsls	r2, r4, #3
 80108ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80108ce:	00d9      	lsls	r1, r3, #3
 80108d0:	460b      	mov	r3, r1
 80108d2:	4614      	mov	r4, r2
 80108d4:	195b      	adds	r3, r3, r5
 80108d6:	eb44 0406 	adc.w	r4, r4, r6
 80108da:	f04f 0100 	mov.w	r1, #0
 80108de:	f04f 0200 	mov.w	r2, #0
 80108e2:	0262      	lsls	r2, r4, #9
 80108e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80108e8:	0259      	lsls	r1, r3, #9
 80108ea:	460b      	mov	r3, r1
 80108ec:	4614      	mov	r4, r2
 80108ee:	4618      	mov	r0, r3
 80108f0:	4621      	mov	r1, r4
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f04f 0400 	mov.w	r4, #0
 80108f8:	461a      	mov	r2, r3
 80108fa:	4623      	mov	r3, r4
 80108fc:	f7f8 f8fc 	bl	8008af8 <__aeabi_uldivmod>
 8010900:	4603      	mov	r3, r0
 8010902:	460c      	mov	r4, r1
 8010904:	60fb      	str	r3, [r7, #12]
 8010906:	e049      	b.n	801099c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010908:	4b2f      	ldr	r3, [pc, #188]	; (80109c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	099b      	lsrs	r3, r3, #6
 801090e:	f04f 0400 	mov.w	r4, #0
 8010912:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010916:	f04f 0200 	mov.w	r2, #0
 801091a:	ea03 0501 	and.w	r5, r3, r1
 801091e:	ea04 0602 	and.w	r6, r4, r2
 8010922:	4629      	mov	r1, r5
 8010924:	4632      	mov	r2, r6
 8010926:	f04f 0300 	mov.w	r3, #0
 801092a:	f04f 0400 	mov.w	r4, #0
 801092e:	0154      	lsls	r4, r2, #5
 8010930:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8010934:	014b      	lsls	r3, r1, #5
 8010936:	4619      	mov	r1, r3
 8010938:	4622      	mov	r2, r4
 801093a:	1b49      	subs	r1, r1, r5
 801093c:	eb62 0206 	sbc.w	r2, r2, r6
 8010940:	f04f 0300 	mov.w	r3, #0
 8010944:	f04f 0400 	mov.w	r4, #0
 8010948:	0194      	lsls	r4, r2, #6
 801094a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801094e:	018b      	lsls	r3, r1, #6
 8010950:	1a5b      	subs	r3, r3, r1
 8010952:	eb64 0402 	sbc.w	r4, r4, r2
 8010956:	f04f 0100 	mov.w	r1, #0
 801095a:	f04f 0200 	mov.w	r2, #0
 801095e:	00e2      	lsls	r2, r4, #3
 8010960:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8010964:	00d9      	lsls	r1, r3, #3
 8010966:	460b      	mov	r3, r1
 8010968:	4614      	mov	r4, r2
 801096a:	195b      	adds	r3, r3, r5
 801096c:	eb44 0406 	adc.w	r4, r4, r6
 8010970:	f04f 0100 	mov.w	r1, #0
 8010974:	f04f 0200 	mov.w	r2, #0
 8010978:	02a2      	lsls	r2, r4, #10
 801097a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801097e:	0299      	lsls	r1, r3, #10
 8010980:	460b      	mov	r3, r1
 8010982:	4614      	mov	r4, r2
 8010984:	4618      	mov	r0, r3
 8010986:	4621      	mov	r1, r4
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f04f 0400 	mov.w	r4, #0
 801098e:	461a      	mov	r2, r3
 8010990:	4623      	mov	r3, r4
 8010992:	f7f8 f8b1 	bl	8008af8 <__aeabi_uldivmod>
 8010996:	4603      	mov	r3, r0
 8010998:	460c      	mov	r4, r1
 801099a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801099c:	4b0a      	ldr	r3, [pc, #40]	; (80109c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801099e:	685b      	ldr	r3, [r3, #4]
 80109a0:	0c1b      	lsrs	r3, r3, #16
 80109a2:	f003 0303 	and.w	r3, r3, #3
 80109a6:	3301      	adds	r3, #1
 80109a8:	005b      	lsls	r3, r3, #1
 80109aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80109ac:	68fa      	ldr	r2, [r7, #12]
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80109b4:	60bb      	str	r3, [r7, #8]
      break;
 80109b6:	e002      	b.n	80109be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80109b8:	4b04      	ldr	r3, [pc, #16]	; (80109cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80109ba:	60bb      	str	r3, [r7, #8]
      break;
 80109bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80109be:	68bb      	ldr	r3, [r7, #8]
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3714      	adds	r7, #20
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109c8:	40023800 	.word	0x40023800
 80109cc:	00f42400 	.word	0x00f42400
 80109d0:	007a1200 	.word	0x007a1200

080109d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80109d4:	b480      	push	{r7}
 80109d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80109d8:	4b03      	ldr	r3, [pc, #12]	; (80109e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80109da:	681b      	ldr	r3, [r3, #0]
}
 80109dc:	4618      	mov	r0, r3
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr
 80109e6:	bf00      	nop
 80109e8:	20000024 	.word	0x20000024

080109ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80109f0:	f7ff fff0 	bl	80109d4 <HAL_RCC_GetHCLKFreq>
 80109f4:	4601      	mov	r1, r0
 80109f6:	4b05      	ldr	r3, [pc, #20]	; (8010a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80109f8:	689b      	ldr	r3, [r3, #8]
 80109fa:	0a9b      	lsrs	r3, r3, #10
 80109fc:	f003 0307 	and.w	r3, r3, #7
 8010a00:	4a03      	ldr	r2, [pc, #12]	; (8010a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010a02:	5cd3      	ldrb	r3, [r2, r3]
 8010a04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	bd80      	pop	{r7, pc}
 8010a0c:	40023800 	.word	0x40023800
 8010a10:	08018dfc 	.word	0x08018dfc

08010a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010a18:	f7ff ffdc 	bl	80109d4 <HAL_RCC_GetHCLKFreq>
 8010a1c:	4601      	mov	r1, r0
 8010a1e:	4b05      	ldr	r3, [pc, #20]	; (8010a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010a20:	689b      	ldr	r3, [r3, #8]
 8010a22:	0b5b      	lsrs	r3, r3, #13
 8010a24:	f003 0307 	and.w	r3, r3, #7
 8010a28:	4a03      	ldr	r2, [pc, #12]	; (8010a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010a2a:	5cd3      	ldrb	r3, [r2, r3]
 8010a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	bd80      	pop	{r7, pc}
 8010a34:	40023800 	.word	0x40023800
 8010a38:	08018dfc 	.word	0x08018dfc

08010a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b082      	sub	sp, #8
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d101      	bne.n	8010a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	e056      	b.n	8010afc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2200      	movs	r2, #0
 8010a52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d106      	bne.n	8010a6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2200      	movs	r2, #0
 8010a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f7fb ff15 	bl	800c898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2202      	movs	r2, #2
 8010a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	681a      	ldr	r2, [r3, #0]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	685a      	ldr	r2, [r3, #4]
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	689b      	ldr	r3, [r3, #8]
 8010a8e:	431a      	orrs	r2, r3
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	431a      	orrs	r2, r3
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	691b      	ldr	r3, [r3, #16]
 8010a9a:	431a      	orrs	r2, r3
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	695b      	ldr	r3, [r3, #20]
 8010aa0:	431a      	orrs	r2, r3
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	699b      	ldr	r3, [r3, #24]
 8010aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010aaa:	431a      	orrs	r2, r3
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	69db      	ldr	r3, [r3, #28]
 8010ab0:	431a      	orrs	r2, r3
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6a1b      	ldr	r3, [r3, #32]
 8010ab6:	ea42 0103 	orr.w	r1, r2, r3
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	430a      	orrs	r2, r1
 8010ac4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	699b      	ldr	r3, [r3, #24]
 8010aca:	0c1b      	lsrs	r3, r3, #16
 8010acc:	f003 0104 	and.w	r1, r3, #4
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	430a      	orrs	r2, r1
 8010ada:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	69da      	ldr	r2, [r3, #28]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010aea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2200      	movs	r2, #0
 8010af0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2201      	movs	r2, #1
 8010af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010afa:	2300      	movs	r3, #0
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3708      	adds	r7, #8
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b088      	sub	sp, #32
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	60b9      	str	r1, [r7, #8]
 8010b0e:	603b      	str	r3, [r7, #0]
 8010b10:	4613      	mov	r3, r2
 8010b12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010b14:	2300      	movs	r3, #0
 8010b16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010b1e:	2b01      	cmp	r3, #1
 8010b20:	d101      	bne.n	8010b26 <HAL_SPI_Transmit+0x22>
 8010b22:	2302      	movs	r3, #2
 8010b24:	e11e      	b.n	8010d64 <HAL_SPI_Transmit+0x260>
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	2201      	movs	r2, #1
 8010b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010b2e:	f7fd fe11 	bl	800e754 <HAL_GetTick>
 8010b32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010b34:	88fb      	ldrh	r3, [r7, #6]
 8010b36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010b3e:	b2db      	uxtb	r3, r3
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	d002      	beq.n	8010b4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010b44:	2302      	movs	r3, #2
 8010b46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010b48:	e103      	b.n	8010d52 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d002      	beq.n	8010b56 <HAL_SPI_Transmit+0x52>
 8010b50:	88fb      	ldrh	r3, [r7, #6]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d102      	bne.n	8010b5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010b56:	2301      	movs	r3, #1
 8010b58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010b5a:	e0fa      	b.n	8010d52 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2203      	movs	r2, #3
 8010b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	2200      	movs	r2, #0
 8010b68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	68ba      	ldr	r2, [r7, #8]
 8010b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	88fa      	ldrh	r2, [r7, #6]
 8010b74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	88fa      	ldrh	r2, [r7, #6]
 8010b7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2200      	movs	r2, #0
 8010b86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2200      	movs	r2, #0
 8010b92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2200      	movs	r2, #0
 8010b98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	689b      	ldr	r3, [r3, #8]
 8010b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ba2:	d107      	bne.n	8010bb4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010bb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bbe:	2b40      	cmp	r3, #64	; 0x40
 8010bc0:	d007      	beq.n	8010bd2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	681a      	ldr	r2, [r3, #0]
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010bd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	68db      	ldr	r3, [r3, #12]
 8010bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010bda:	d14b      	bne.n	8010c74 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d002      	beq.n	8010bea <HAL_SPI_Transmit+0xe6>
 8010be4:	8afb      	ldrh	r3, [r7, #22]
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d13e      	bne.n	8010c68 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bee:	881a      	ldrh	r2, [r3, #0]
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bfa:	1c9a      	adds	r2, r3, #2
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	3b01      	subs	r3, #1
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010c0e:	e02b      	b.n	8010c68 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	689b      	ldr	r3, [r3, #8]
 8010c16:	f003 0302 	and.w	r3, r3, #2
 8010c1a:	2b02      	cmp	r3, #2
 8010c1c:	d112      	bne.n	8010c44 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c22:	881a      	ldrh	r2, [r3, #0]
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c2e:	1c9a      	adds	r2, r3, #2
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010c38:	b29b      	uxth	r3, r3
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	86da      	strh	r2, [r3, #54]	; 0x36
 8010c42:	e011      	b.n	8010c68 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010c44:	f7fd fd86 	bl	800e754 <HAL_GetTick>
 8010c48:	4602      	mov	r2, r0
 8010c4a:	69bb      	ldr	r3, [r7, #24]
 8010c4c:	1ad3      	subs	r3, r2, r3
 8010c4e:	683a      	ldr	r2, [r7, #0]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d803      	bhi.n	8010c5c <HAL_SPI_Transmit+0x158>
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c5a:	d102      	bne.n	8010c62 <HAL_SPI_Transmit+0x15e>
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d102      	bne.n	8010c68 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8010c62:	2303      	movs	r3, #3
 8010c64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010c66:	e074      	b.n	8010d52 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d1ce      	bne.n	8010c10 <HAL_SPI_Transmit+0x10c>
 8010c72:	e04c      	b.n	8010d0e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	685b      	ldr	r3, [r3, #4]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d002      	beq.n	8010c82 <HAL_SPI_Transmit+0x17e>
 8010c7c:	8afb      	ldrh	r3, [r7, #22]
 8010c7e:	2b01      	cmp	r3, #1
 8010c80:	d140      	bne.n	8010d04 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	330c      	adds	r3, #12
 8010c8c:	7812      	ldrb	r2, [r2, #0]
 8010c8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c94:	1c5a      	adds	r2, r3, #1
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	3b01      	subs	r3, #1
 8010ca2:	b29a      	uxth	r2, r3
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8010ca8:	e02c      	b.n	8010d04 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	689b      	ldr	r3, [r3, #8]
 8010cb0:	f003 0302 	and.w	r3, r3, #2
 8010cb4:	2b02      	cmp	r3, #2
 8010cb6:	d113      	bne.n	8010ce0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	330c      	adds	r3, #12
 8010cc2:	7812      	ldrb	r2, [r2, #0]
 8010cc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cca:	1c5a      	adds	r2, r3, #1
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	3b01      	subs	r3, #1
 8010cd8:	b29a      	uxth	r2, r3
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	86da      	strh	r2, [r3, #54]	; 0x36
 8010cde:	e011      	b.n	8010d04 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010ce0:	f7fd fd38 	bl	800e754 <HAL_GetTick>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	69bb      	ldr	r3, [r7, #24]
 8010ce8:	1ad3      	subs	r3, r2, r3
 8010cea:	683a      	ldr	r2, [r7, #0]
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d803      	bhi.n	8010cf8 <HAL_SPI_Transmit+0x1f4>
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cf6:	d102      	bne.n	8010cfe <HAL_SPI_Transmit+0x1fa>
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d102      	bne.n	8010d04 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8010cfe:	2303      	movs	r3, #3
 8010d00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010d02:	e026      	b.n	8010d52 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d1cd      	bne.n	8010caa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010d0e:	69ba      	ldr	r2, [r7, #24]
 8010d10:	6839      	ldr	r1, [r7, #0]
 8010d12:	68f8      	ldr	r0, [r7, #12]
 8010d14:	f000 fba4 	bl	8011460 <SPI_EndRxTxTransaction>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d002      	beq.n	8010d24 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2220      	movs	r2, #32
 8010d22:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	689b      	ldr	r3, [r3, #8]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d10a      	bne.n	8010d42 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	613b      	str	r3, [r7, #16]
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	68db      	ldr	r3, [r3, #12]
 8010d36:	613b      	str	r3, [r7, #16]
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	689b      	ldr	r3, [r3, #8]
 8010d3e:	613b      	str	r3, [r7, #16]
 8010d40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d002      	beq.n	8010d50 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	77fb      	strb	r3, [r7, #31]
 8010d4e:	e000      	b.n	8010d52 <HAL_SPI_Transmit+0x24e>
  }

error:
 8010d50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	2201      	movs	r2, #1
 8010d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010d62:	7ffb      	ldrb	r3, [r7, #31]
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3720      	adds	r7, #32
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b088      	sub	sp, #32
 8010d70:	af02      	add	r7, sp, #8
 8010d72:	60f8      	str	r0, [r7, #12]
 8010d74:	60b9      	str	r1, [r7, #8]
 8010d76:	603b      	str	r3, [r7, #0]
 8010d78:	4613      	mov	r3, r2
 8010d7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010d88:	d112      	bne.n	8010db0 <HAL_SPI_Receive+0x44>
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	689b      	ldr	r3, [r3, #8]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d10e      	bne.n	8010db0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	2204      	movs	r2, #4
 8010d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010d9a:	88fa      	ldrh	r2, [r7, #6]
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	9300      	str	r3, [sp, #0]
 8010da0:	4613      	mov	r3, r2
 8010da2:	68ba      	ldr	r2, [r7, #8]
 8010da4:	68b9      	ldr	r1, [r7, #8]
 8010da6:	68f8      	ldr	r0, [r7, #12]
 8010da8:	f000 f8e9 	bl	8010f7e <HAL_SPI_TransmitReceive>
 8010dac:	4603      	mov	r3, r0
 8010dae:	e0e2      	b.n	8010f76 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010db6:	2b01      	cmp	r3, #1
 8010db8:	d101      	bne.n	8010dbe <HAL_SPI_Receive+0x52>
 8010dba:	2302      	movs	r3, #2
 8010dbc:	e0db      	b.n	8010f76 <HAL_SPI_Receive+0x20a>
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	2201      	movs	r2, #1
 8010dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010dc6:	f7fd fcc5 	bl	800e754 <HAL_GetTick>
 8010dca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010dd2:	b2db      	uxtb	r3, r3
 8010dd4:	2b01      	cmp	r3, #1
 8010dd6:	d002      	beq.n	8010dde <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8010dd8:	2302      	movs	r3, #2
 8010dda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010ddc:	e0c2      	b.n	8010f64 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d002      	beq.n	8010dea <HAL_SPI_Receive+0x7e>
 8010de4:	88fb      	ldrh	r3, [r7, #6]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d102      	bne.n	8010df0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8010dea:	2301      	movs	r3, #1
 8010dec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010dee:	e0b9      	b.n	8010f64 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2204      	movs	r2, #4
 8010df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	68ba      	ldr	r2, [r7, #8]
 8010e02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	88fa      	ldrh	r2, [r7, #6]
 8010e08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	88fa      	ldrh	r2, [r7, #6]
 8010e0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	2200      	movs	r2, #0
 8010e14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	2200      	movs	r2, #0
 8010e26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	689b      	ldr	r3, [r3, #8]
 8010e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e36:	d107      	bne.n	8010e48 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010e46:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e52:	2b40      	cmp	r3, #64	; 0x40
 8010e54:	d007      	beq.n	8010e66 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	681a      	ldr	r2, [r3, #0]
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010e64:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d162      	bne.n	8010f34 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8010e6e:	e02e      	b.n	8010ece <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	689b      	ldr	r3, [r3, #8]
 8010e76:	f003 0301 	and.w	r3, r3, #1
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d115      	bne.n	8010eaa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f103 020c 	add.w	r2, r3, #12
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e8a:	7812      	ldrb	r2, [r2, #0]
 8010e8c:	b2d2      	uxtb	r2, r2
 8010e8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e94:	1c5a      	adds	r2, r3, #1
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	3b01      	subs	r3, #1
 8010ea2:	b29a      	uxth	r2, r3
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010ea8:	e011      	b.n	8010ece <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010eaa:	f7fd fc53 	bl	800e754 <HAL_GetTick>
 8010eae:	4602      	mov	r2, r0
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	1ad3      	subs	r3, r2, r3
 8010eb4:	683a      	ldr	r2, [r7, #0]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d803      	bhi.n	8010ec2 <HAL_SPI_Receive+0x156>
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ec0:	d102      	bne.n	8010ec8 <HAL_SPI_Receive+0x15c>
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d102      	bne.n	8010ece <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8010ec8:	2303      	movs	r3, #3
 8010eca:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010ecc:	e04a      	b.n	8010f64 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ed2:	b29b      	uxth	r3, r3
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d1cb      	bne.n	8010e70 <HAL_SPI_Receive+0x104>
 8010ed8:	e031      	b.n	8010f3e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	689b      	ldr	r3, [r3, #8]
 8010ee0:	f003 0301 	and.w	r3, r3, #1
 8010ee4:	2b01      	cmp	r3, #1
 8010ee6:	d113      	bne.n	8010f10 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	68da      	ldr	r2, [r3, #12]
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ef2:	b292      	uxth	r2, r2
 8010ef4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010efa:	1c9a      	adds	r2, r3, #2
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f04:	b29b      	uxth	r3, r3
 8010f06:	3b01      	subs	r3, #1
 8010f08:	b29a      	uxth	r2, r3
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010f0e:	e011      	b.n	8010f34 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010f10:	f7fd fc20 	bl	800e754 <HAL_GetTick>
 8010f14:	4602      	mov	r2, r0
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	1ad3      	subs	r3, r2, r3
 8010f1a:	683a      	ldr	r2, [r7, #0]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d803      	bhi.n	8010f28 <HAL_SPI_Receive+0x1bc>
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f26:	d102      	bne.n	8010f2e <HAL_SPI_Receive+0x1c2>
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d102      	bne.n	8010f34 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8010f2e:	2303      	movs	r3, #3
 8010f30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010f32:	e017      	b.n	8010f64 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f38:	b29b      	uxth	r3, r3
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d1cd      	bne.n	8010eda <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010f3e:	693a      	ldr	r2, [r7, #16]
 8010f40:	6839      	ldr	r1, [r7, #0]
 8010f42:	68f8      	ldr	r0, [r7, #12]
 8010f44:	f000 fa27 	bl	8011396 <SPI_EndRxTransaction>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d002      	beq.n	8010f54 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2220      	movs	r2, #32
 8010f52:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d002      	beq.n	8010f62 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	75fb      	strb	r3, [r7, #23]
 8010f60:	e000      	b.n	8010f64 <HAL_SPI_Receive+0x1f8>
  }

error :
 8010f62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	2201      	movs	r2, #1
 8010f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3718      	adds	r7, #24
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}

08010f7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010f7e:	b580      	push	{r7, lr}
 8010f80:	b08c      	sub	sp, #48	; 0x30
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	60f8      	str	r0, [r7, #12]
 8010f86:	60b9      	str	r1, [r7, #8]
 8010f88:	607a      	str	r2, [r7, #4]
 8010f8a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010f90:	2300      	movs	r3, #0
 8010f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010f9c:	2b01      	cmp	r3, #1
 8010f9e:	d101      	bne.n	8010fa4 <HAL_SPI_TransmitReceive+0x26>
 8010fa0:	2302      	movs	r3, #2
 8010fa2:	e18a      	b.n	80112ba <HAL_SPI_TransmitReceive+0x33c>
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010fac:	f7fd fbd2 	bl	800e754 <HAL_GetTick>
 8010fb0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010fc2:	887b      	ldrh	r3, [r7, #2]
 8010fc4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010fc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010fca:	2b01      	cmp	r3, #1
 8010fcc:	d00f      	beq.n	8010fee <HAL_SPI_TransmitReceive+0x70>
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010fd4:	d107      	bne.n	8010fe6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	689b      	ldr	r3, [r3, #8]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d103      	bne.n	8010fe6 <HAL_SPI_TransmitReceive+0x68>
 8010fde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010fe2:	2b04      	cmp	r3, #4
 8010fe4:	d003      	beq.n	8010fee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8010fe6:	2302      	movs	r3, #2
 8010fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010fec:	e15b      	b.n	80112a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d005      	beq.n	8011000 <HAL_SPI_TransmitReceive+0x82>
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d002      	beq.n	8011000 <HAL_SPI_TransmitReceive+0x82>
 8010ffa:	887b      	ldrh	r3, [r7, #2]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d103      	bne.n	8011008 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8011000:	2301      	movs	r3, #1
 8011002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011006:	e14e      	b.n	80112a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801100e:	b2db      	uxtb	r3, r3
 8011010:	2b04      	cmp	r3, #4
 8011012:	d003      	beq.n	801101c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2205      	movs	r2, #5
 8011018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2200      	movs	r2, #0
 8011020:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	687a      	ldr	r2, [r7, #4]
 8011026:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	887a      	ldrh	r2, [r7, #2]
 801102c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	887a      	ldrh	r2, [r7, #2]
 8011032:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	68ba      	ldr	r2, [r7, #8]
 8011038:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	887a      	ldrh	r2, [r7, #2]
 801103e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	887a      	ldrh	r2, [r7, #2]
 8011044:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	2200      	movs	r2, #0
 801104a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	2200      	movs	r2, #0
 8011050:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801105c:	2b40      	cmp	r3, #64	; 0x40
 801105e:	d007      	beq.n	8011070 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	681a      	ldr	r2, [r3, #0]
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801106e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	68db      	ldr	r3, [r3, #12]
 8011074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011078:	d178      	bne.n	801116c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d002      	beq.n	8011088 <HAL_SPI_TransmitReceive+0x10a>
 8011082:	8b7b      	ldrh	r3, [r7, #26]
 8011084:	2b01      	cmp	r3, #1
 8011086:	d166      	bne.n	8011156 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801108c:	881a      	ldrh	r2, [r3, #0]
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011098:	1c9a      	adds	r2, r3, #2
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	3b01      	subs	r3, #1
 80110a6:	b29a      	uxth	r2, r3
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80110ac:	e053      	b.n	8011156 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	689b      	ldr	r3, [r3, #8]
 80110b4:	f003 0302 	and.w	r3, r3, #2
 80110b8:	2b02      	cmp	r3, #2
 80110ba:	d11b      	bne.n	80110f4 <HAL_SPI_TransmitReceive+0x176>
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d016      	beq.n	80110f4 <HAL_SPI_TransmitReceive+0x176>
 80110c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d113      	bne.n	80110f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110d0:	881a      	ldrh	r2, [r3, #0]
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110dc:	1c9a      	adds	r2, r3, #2
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	3b01      	subs	r3, #1
 80110ea:	b29a      	uxth	r2, r3
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80110f0:	2300      	movs	r3, #0
 80110f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	689b      	ldr	r3, [r3, #8]
 80110fa:	f003 0301 	and.w	r3, r3, #1
 80110fe:	2b01      	cmp	r3, #1
 8011100:	d119      	bne.n	8011136 <HAL_SPI_TransmitReceive+0x1b8>
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011106:	b29b      	uxth	r3, r3
 8011108:	2b00      	cmp	r3, #0
 801110a:	d014      	beq.n	8011136 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	68da      	ldr	r2, [r3, #12]
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011116:	b292      	uxth	r2, r2
 8011118:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801111e:	1c9a      	adds	r2, r3, #2
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011128:	b29b      	uxth	r3, r3
 801112a:	3b01      	subs	r3, #1
 801112c:	b29a      	uxth	r2, r3
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011132:	2301      	movs	r3, #1
 8011134:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011136:	f7fd fb0d 	bl	800e754 <HAL_GetTick>
 801113a:	4602      	mov	r2, r0
 801113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011142:	429a      	cmp	r2, r3
 8011144:	d807      	bhi.n	8011156 <HAL_SPI_TransmitReceive+0x1d8>
 8011146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011148:	f1b3 3fff 	cmp.w	r3, #4294967295
 801114c:	d003      	beq.n	8011156 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801114e:	2303      	movs	r3, #3
 8011150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011154:	e0a7      	b.n	80112a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801115a:	b29b      	uxth	r3, r3
 801115c:	2b00      	cmp	r3, #0
 801115e:	d1a6      	bne.n	80110ae <HAL_SPI_TransmitReceive+0x130>
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011164:	b29b      	uxth	r3, r3
 8011166:	2b00      	cmp	r3, #0
 8011168:	d1a1      	bne.n	80110ae <HAL_SPI_TransmitReceive+0x130>
 801116a:	e07c      	b.n	8011266 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	685b      	ldr	r3, [r3, #4]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d002      	beq.n	801117a <HAL_SPI_TransmitReceive+0x1fc>
 8011174:	8b7b      	ldrh	r3, [r7, #26]
 8011176:	2b01      	cmp	r3, #1
 8011178:	d16b      	bne.n	8011252 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	330c      	adds	r3, #12
 8011184:	7812      	ldrb	r2, [r2, #0]
 8011186:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801118c:	1c5a      	adds	r2, r3, #1
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011196:	b29b      	uxth	r3, r3
 8011198:	3b01      	subs	r3, #1
 801119a:	b29a      	uxth	r2, r3
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80111a0:	e057      	b.n	8011252 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	689b      	ldr	r3, [r3, #8]
 80111a8:	f003 0302 	and.w	r3, r3, #2
 80111ac:	2b02      	cmp	r3, #2
 80111ae:	d11c      	bne.n	80111ea <HAL_SPI_TransmitReceive+0x26c>
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80111b4:	b29b      	uxth	r3, r3
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d017      	beq.n	80111ea <HAL_SPI_TransmitReceive+0x26c>
 80111ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d114      	bne.n	80111ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	330c      	adds	r3, #12
 80111ca:	7812      	ldrb	r2, [r2, #0]
 80111cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111d2:	1c5a      	adds	r2, r3, #1
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80111dc:	b29b      	uxth	r3, r3
 80111de:	3b01      	subs	r3, #1
 80111e0:	b29a      	uxth	r2, r3
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80111e6:	2300      	movs	r3, #0
 80111e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	689b      	ldr	r3, [r3, #8]
 80111f0:	f003 0301 	and.w	r3, r3, #1
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	d119      	bne.n	801122c <HAL_SPI_TransmitReceive+0x2ae>
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80111fc:	b29b      	uxth	r3, r3
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d014      	beq.n	801122c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	68da      	ldr	r2, [r3, #12]
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801120c:	b2d2      	uxtb	r2, r2
 801120e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011214:	1c5a      	adds	r2, r3, #1
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801121e:	b29b      	uxth	r3, r3
 8011220:	3b01      	subs	r3, #1
 8011222:	b29a      	uxth	r2, r3
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011228:	2301      	movs	r3, #1
 801122a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801122c:	f7fd fa92 	bl	800e754 <HAL_GetTick>
 8011230:	4602      	mov	r2, r0
 8011232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011234:	1ad3      	subs	r3, r2, r3
 8011236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011238:	429a      	cmp	r2, r3
 801123a:	d803      	bhi.n	8011244 <HAL_SPI_TransmitReceive+0x2c6>
 801123c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801123e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011242:	d102      	bne.n	801124a <HAL_SPI_TransmitReceive+0x2cc>
 8011244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011246:	2b00      	cmp	r3, #0
 8011248:	d103      	bne.n	8011252 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801124a:	2303      	movs	r3, #3
 801124c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011250:	e029      	b.n	80112a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011256:	b29b      	uxth	r3, r3
 8011258:	2b00      	cmp	r3, #0
 801125a:	d1a2      	bne.n	80111a2 <HAL_SPI_TransmitReceive+0x224>
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011260:	b29b      	uxth	r3, r3
 8011262:	2b00      	cmp	r3, #0
 8011264:	d19d      	bne.n	80111a2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011268:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	f000 f8f8 	bl	8011460 <SPI_EndRxTxTransaction>
 8011270:	4603      	mov	r3, r0
 8011272:	2b00      	cmp	r3, #0
 8011274:	d006      	beq.n	8011284 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8011276:	2301      	movs	r3, #1
 8011278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2220      	movs	r2, #32
 8011280:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8011282:	e010      	b.n	80112a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	689b      	ldr	r3, [r3, #8]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d10b      	bne.n	80112a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801128c:	2300      	movs	r3, #0
 801128e:	617b      	str	r3, [r7, #20]
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	68db      	ldr	r3, [r3, #12]
 8011296:	617b      	str	r3, [r7, #20]
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	689b      	ldr	r3, [r3, #8]
 801129e:	617b      	str	r3, [r7, #20]
 80112a0:	697b      	ldr	r3, [r7, #20]
 80112a2:	e000      	b.n	80112a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80112a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	2201      	movs	r2, #1
 80112aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	2200      	movs	r2, #0
 80112b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80112b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3730      	adds	r7, #48	; 0x30
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}

080112c2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80112c2:	b580      	push	{r7, lr}
 80112c4:	b084      	sub	sp, #16
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	60f8      	str	r0, [r7, #12]
 80112ca:	60b9      	str	r1, [r7, #8]
 80112cc:	603b      	str	r3, [r7, #0]
 80112ce:	4613      	mov	r3, r2
 80112d0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80112d2:	e04c      	b.n	801136e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112da:	d048      	beq.n	801136e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80112dc:	f7fd fa3a 	bl	800e754 <HAL_GetTick>
 80112e0:	4602      	mov	r2, r0
 80112e2:	69bb      	ldr	r3, [r7, #24]
 80112e4:	1ad3      	subs	r3, r2, r3
 80112e6:	683a      	ldr	r2, [r7, #0]
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d902      	bls.n	80112f2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d13d      	bne.n	801136e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	685a      	ldr	r2, [r3, #4]
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011300:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801130a:	d111      	bne.n	8011330 <SPI_WaitFlagStateUntilTimeout+0x6e>
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	689b      	ldr	r3, [r3, #8]
 8011310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011314:	d004      	beq.n	8011320 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	689b      	ldr	r3, [r3, #8]
 801131a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801131e:	d107      	bne.n	8011330 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801132e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011338:	d10f      	bne.n	801135a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	681a      	ldr	r2, [r3, #0]
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011348:	601a      	str	r2, [r3, #0]
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	681a      	ldr	r2, [r3, #0]
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011358:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2201      	movs	r2, #1
 801135e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2200      	movs	r2, #0
 8011366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801136a:	2303      	movs	r3, #3
 801136c:	e00f      	b.n	801138e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	689a      	ldr	r2, [r3, #8]
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	4013      	ands	r3, r2
 8011378:	68ba      	ldr	r2, [r7, #8]
 801137a:	429a      	cmp	r2, r3
 801137c:	bf0c      	ite	eq
 801137e:	2301      	moveq	r3, #1
 8011380:	2300      	movne	r3, #0
 8011382:	b2db      	uxtb	r3, r3
 8011384:	461a      	mov	r2, r3
 8011386:	79fb      	ldrb	r3, [r7, #7]
 8011388:	429a      	cmp	r2, r3
 801138a:	d1a3      	bne.n	80112d4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 801138c:	2300      	movs	r3, #0
}
 801138e:	4618      	mov	r0, r3
 8011390:	3710      	adds	r7, #16
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}

08011396 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011396:	b580      	push	{r7, lr}
 8011398:	b086      	sub	sp, #24
 801139a:	af02      	add	r7, sp, #8
 801139c:	60f8      	str	r0, [r7, #12]
 801139e:	60b9      	str	r1, [r7, #8]
 80113a0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	685b      	ldr	r3, [r3, #4]
 80113a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80113aa:	d111      	bne.n	80113d0 <SPI_EndRxTransaction+0x3a>
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	689b      	ldr	r3, [r3, #8]
 80113b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80113b4:	d004      	beq.n	80113c0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	689b      	ldr	r3, [r3, #8]
 80113ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80113be:	d107      	bne.n	80113d0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	681a      	ldr	r2, [r3, #0]
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80113ce:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	685b      	ldr	r3, [r3, #4]
 80113d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80113d8:	d12a      	bne.n	8011430 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	689b      	ldr	r3, [r3, #8]
 80113de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80113e2:	d012      	beq.n	801140a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	9300      	str	r3, [sp, #0]
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	2200      	movs	r2, #0
 80113ec:	2180      	movs	r1, #128	; 0x80
 80113ee:	68f8      	ldr	r0, [r7, #12]
 80113f0:	f7ff ff67 	bl	80112c2 <SPI_WaitFlagStateUntilTimeout>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d02d      	beq.n	8011456 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113fe:	f043 0220 	orr.w	r2, r3, #32
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011406:	2303      	movs	r3, #3
 8011408:	e026      	b.n	8011458 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	9300      	str	r3, [sp, #0]
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	2200      	movs	r2, #0
 8011412:	2101      	movs	r1, #1
 8011414:	68f8      	ldr	r0, [r7, #12]
 8011416:	f7ff ff54 	bl	80112c2 <SPI_WaitFlagStateUntilTimeout>
 801141a:	4603      	mov	r3, r0
 801141c:	2b00      	cmp	r3, #0
 801141e:	d01a      	beq.n	8011456 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011424:	f043 0220 	orr.w	r2, r3, #32
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801142c:	2303      	movs	r3, #3
 801142e:	e013      	b.n	8011458 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	9300      	str	r3, [sp, #0]
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	2200      	movs	r2, #0
 8011438:	2101      	movs	r1, #1
 801143a:	68f8      	ldr	r0, [r7, #12]
 801143c:	f7ff ff41 	bl	80112c2 <SPI_WaitFlagStateUntilTimeout>
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	d007      	beq.n	8011456 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801144a:	f043 0220 	orr.w	r2, r3, #32
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8011452:	2303      	movs	r3, #3
 8011454:	e000      	b.n	8011458 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8011456:	2300      	movs	r3, #0
}
 8011458:	4618      	mov	r0, r3
 801145a:	3710      	adds	r7, #16
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}

08011460 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b088      	sub	sp, #32
 8011464:	af02      	add	r7, sp, #8
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	60b9      	str	r1, [r7, #8]
 801146a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801146c:	4b1b      	ldr	r3, [pc, #108]	; (80114dc <SPI_EndRxTxTransaction+0x7c>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	4a1b      	ldr	r2, [pc, #108]	; (80114e0 <SPI_EndRxTxTransaction+0x80>)
 8011472:	fba2 2303 	umull	r2, r3, r2, r3
 8011476:	0d5b      	lsrs	r3, r3, #21
 8011478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801147c:	fb02 f303 	mul.w	r3, r2, r3
 8011480:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801148a:	d112      	bne.n	80114b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	9300      	str	r3, [sp, #0]
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	2200      	movs	r2, #0
 8011494:	2180      	movs	r1, #128	; 0x80
 8011496:	68f8      	ldr	r0, [r7, #12]
 8011498:	f7ff ff13 	bl	80112c2 <SPI_WaitFlagStateUntilTimeout>
 801149c:	4603      	mov	r3, r0
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d016      	beq.n	80114d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114a6:	f043 0220 	orr.w	r2, r3, #32
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80114ae:	2303      	movs	r3, #3
 80114b0:	e00f      	b.n	80114d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d00a      	beq.n	80114ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	3b01      	subs	r3, #1
 80114bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	689b      	ldr	r3, [r3, #8]
 80114c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114c8:	2b80      	cmp	r3, #128	; 0x80
 80114ca:	d0f2      	beq.n	80114b2 <SPI_EndRxTxTransaction+0x52>
 80114cc:	e000      	b.n	80114d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80114ce:	bf00      	nop
  }

  return HAL_OK;
 80114d0:	2300      	movs	r3, #0
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3718      	adds	r7, #24
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}
 80114da:	bf00      	nop
 80114dc:	20000024 	.word	0x20000024
 80114e0:	165e9f81 	.word	0x165e9f81

080114e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b082      	sub	sp, #8
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d101      	bne.n	80114f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80114f2:	2301      	movs	r3, #1
 80114f4:	e01d      	b.n	8011532 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80114fc:	b2db      	uxtb	r3, r3
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d106      	bne.n	8011510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2200      	movs	r2, #0
 8011506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f7fb fa0c 	bl	800c928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2202      	movs	r2, #2
 8011514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681a      	ldr	r2, [r3, #0]
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	3304      	adds	r3, #4
 8011520:	4619      	mov	r1, r3
 8011522:	4610      	mov	r0, r2
 8011524:	f000 fe96 	bl	8012254 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2201      	movs	r2, #1
 801152c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011530:	2300      	movs	r3, #0
}
 8011532:	4618      	mov	r0, r3
 8011534:	3708      	adds	r7, #8
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}

0801153a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801153a:	b480      	push	{r7}
 801153c:	b085      	sub	sp, #20
 801153e:	af00      	add	r7, sp, #0
 8011540:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	68da      	ldr	r2, [r3, #12]
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	f042 0201 	orr.w	r2, r2, #1
 8011550:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	689b      	ldr	r3, [r3, #8]
 8011558:	f003 0307 	and.w	r3, r3, #7
 801155c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2b06      	cmp	r3, #6
 8011562:	d007      	beq.n	8011574 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f042 0201 	orr.w	r2, r2, #1
 8011572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011574:	2300      	movs	r3, #0
}
 8011576:	4618      	mov	r0, r3
 8011578:	3714      	adds	r7, #20
 801157a:	46bd      	mov	sp, r7
 801157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011580:	4770      	bx	lr

08011582 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8011582:	b480      	push	{r7}
 8011584:	b083      	sub	sp, #12
 8011586:	af00      	add	r7, sp, #0
 8011588:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	68da      	ldr	r2, [r3, #12]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	f022 0201 	bic.w	r2, r2, #1
 8011598:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	6a1a      	ldr	r2, [r3, #32]
 80115a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80115a4:	4013      	ands	r3, r2
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d10f      	bne.n	80115ca <HAL_TIM_Base_Stop_IT+0x48>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	6a1a      	ldr	r2, [r3, #32]
 80115b0:	f240 4344 	movw	r3, #1092	; 0x444
 80115b4:	4013      	ands	r3, r2
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d107      	bne.n	80115ca <HAL_TIM_Base_Stop_IT+0x48>
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	f022 0201 	bic.w	r2, r2, #1
 80115c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80115ca:	2300      	movs	r3, #0
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	370c      	adds	r7, #12
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr

080115d8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b082      	sub	sp, #8
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d101      	bne.n	80115ea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80115e6:	2301      	movs	r3, #1
 80115e8:	e01d      	b.n	8011626 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80115f0:	b2db      	uxtb	r3, r3
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d106      	bne.n	8011604 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2200      	movs	r2, #0
 80115fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f000 f815 	bl	801162e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2202      	movs	r2, #2
 8011608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	3304      	adds	r3, #4
 8011614:	4619      	mov	r1, r3
 8011616:	4610      	mov	r0, r2
 8011618:	f000 fe1c 	bl	8012254 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2201      	movs	r2, #1
 8011620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011624:	2300      	movs	r3, #0
}
 8011626:	4618      	mov	r0, r3
 8011628:	3708      	adds	r7, #8
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}

0801162e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 801162e:	b480      	push	{r7}
 8011630:	b083      	sub	sp, #12
 8011632:	af00      	add	r7, sp, #0
 8011634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8011636:	bf00      	nop
 8011638:	370c      	adds	r7, #12
 801163a:	46bd      	mov	sp, r7
 801163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011640:	4770      	bx	lr
	...

08011644 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	2b0c      	cmp	r3, #12
 8011652:	d841      	bhi.n	80116d8 <HAL_TIM_OC_Start_IT+0x94>
 8011654:	a201      	add	r2, pc, #4	; (adr r2, 801165c <HAL_TIM_OC_Start_IT+0x18>)
 8011656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801165a:	bf00      	nop
 801165c:	08011691 	.word	0x08011691
 8011660:	080116d9 	.word	0x080116d9
 8011664:	080116d9 	.word	0x080116d9
 8011668:	080116d9 	.word	0x080116d9
 801166c:	080116a3 	.word	0x080116a3
 8011670:	080116d9 	.word	0x080116d9
 8011674:	080116d9 	.word	0x080116d9
 8011678:	080116d9 	.word	0x080116d9
 801167c:	080116b5 	.word	0x080116b5
 8011680:	080116d9 	.word	0x080116d9
 8011684:	080116d9 	.word	0x080116d9
 8011688:	080116d9 	.word	0x080116d9
 801168c:	080116c7 	.word	0x080116c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	68da      	ldr	r2, [r3, #12]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f042 0202 	orr.w	r2, r2, #2
 801169e:	60da      	str	r2, [r3, #12]
      break;
 80116a0:	e01b      	b.n	80116da <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	68da      	ldr	r2, [r3, #12]
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f042 0204 	orr.w	r2, r2, #4
 80116b0:	60da      	str	r2, [r3, #12]
      break;
 80116b2:	e012      	b.n	80116da <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	68da      	ldr	r2, [r3, #12]
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	f042 0208 	orr.w	r2, r2, #8
 80116c2:	60da      	str	r2, [r3, #12]
      break;
 80116c4:	e009      	b.n	80116da <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	68da      	ldr	r2, [r3, #12]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f042 0210 	orr.w	r2, r2, #16
 80116d4:	60da      	str	r2, [r3, #12]
      break;
 80116d6:	e000      	b.n	80116da <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80116d8:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	2201      	movs	r2, #1
 80116e0:	6839      	ldr	r1, [r7, #0]
 80116e2:	4618      	mov	r0, r3
 80116e4:	f001 f8a0 	bl	8012828 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	4a15      	ldr	r2, [pc, #84]	; (8011744 <HAL_TIM_OC_Start_IT+0x100>)
 80116ee:	4293      	cmp	r3, r2
 80116f0:	d004      	beq.n	80116fc <HAL_TIM_OC_Start_IT+0xb8>
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	4a14      	ldr	r2, [pc, #80]	; (8011748 <HAL_TIM_OC_Start_IT+0x104>)
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d101      	bne.n	8011700 <HAL_TIM_OC_Start_IT+0xbc>
 80116fc:	2301      	movs	r3, #1
 80116fe:	e000      	b.n	8011702 <HAL_TIM_OC_Start_IT+0xbe>
 8011700:	2300      	movs	r3, #0
 8011702:	2b00      	cmp	r3, #0
 8011704:	d007      	beq.n	8011716 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011714:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	689b      	ldr	r3, [r3, #8]
 801171c:	f003 0307 	and.w	r3, r3, #7
 8011720:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	2b06      	cmp	r3, #6
 8011726:	d007      	beq.n	8011738 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	681a      	ldr	r2, [r3, #0]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	f042 0201 	orr.w	r2, r2, #1
 8011736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011738:	2300      	movs	r3, #0
}
 801173a:	4618      	mov	r0, r3
 801173c:	3710      	adds	r7, #16
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
 8011742:	bf00      	nop
 8011744:	40010000 	.word	0x40010000
 8011748:	40010400 	.word	0x40010400

0801174c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	2b0c      	cmp	r3, #12
 801175a:	d841      	bhi.n	80117e0 <HAL_TIM_OC_Stop_IT+0x94>
 801175c:	a201      	add	r2, pc, #4	; (adr r2, 8011764 <HAL_TIM_OC_Stop_IT+0x18>)
 801175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011762:	bf00      	nop
 8011764:	08011799 	.word	0x08011799
 8011768:	080117e1 	.word	0x080117e1
 801176c:	080117e1 	.word	0x080117e1
 8011770:	080117e1 	.word	0x080117e1
 8011774:	080117ab 	.word	0x080117ab
 8011778:	080117e1 	.word	0x080117e1
 801177c:	080117e1 	.word	0x080117e1
 8011780:	080117e1 	.word	0x080117e1
 8011784:	080117bd 	.word	0x080117bd
 8011788:	080117e1 	.word	0x080117e1
 801178c:	080117e1 	.word	0x080117e1
 8011790:	080117e1 	.word	0x080117e1
 8011794:	080117cf 	.word	0x080117cf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	68da      	ldr	r2, [r3, #12]
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	f022 0202 	bic.w	r2, r2, #2
 80117a6:	60da      	str	r2, [r3, #12]
      break;
 80117a8:	e01b      	b.n	80117e2 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	68da      	ldr	r2, [r3, #12]
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	f022 0204 	bic.w	r2, r2, #4
 80117b8:	60da      	str	r2, [r3, #12]
      break;
 80117ba:	e012      	b.n	80117e2 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	68da      	ldr	r2, [r3, #12]
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	f022 0208 	bic.w	r2, r2, #8
 80117ca:	60da      	str	r2, [r3, #12]
      break;
 80117cc:	e009      	b.n	80117e2 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	68da      	ldr	r2, [r3, #12]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	f022 0210 	bic.w	r2, r2, #16
 80117dc:	60da      	str	r2, [r3, #12]
      break;
 80117de:	e000      	b.n	80117e2 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 80117e0:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	2200      	movs	r2, #0
 80117e8:	6839      	ldr	r1, [r7, #0]
 80117ea:	4618      	mov	r0, r3
 80117ec:	f001 f81c 	bl	8012828 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	4a20      	ldr	r2, [pc, #128]	; (8011878 <HAL_TIM_OC_Stop_IT+0x12c>)
 80117f6:	4293      	cmp	r3, r2
 80117f8:	d004      	beq.n	8011804 <HAL_TIM_OC_Stop_IT+0xb8>
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	4a1f      	ldr	r2, [pc, #124]	; (801187c <HAL_TIM_OC_Stop_IT+0x130>)
 8011800:	4293      	cmp	r3, r2
 8011802:	d101      	bne.n	8011808 <HAL_TIM_OC_Stop_IT+0xbc>
 8011804:	2301      	movs	r3, #1
 8011806:	e000      	b.n	801180a <HAL_TIM_OC_Stop_IT+0xbe>
 8011808:	2300      	movs	r3, #0
 801180a:	2b00      	cmp	r3, #0
 801180c:	d017      	beq.n	801183e <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	6a1a      	ldr	r2, [r3, #32]
 8011814:	f241 1311 	movw	r3, #4369	; 0x1111
 8011818:	4013      	ands	r3, r2
 801181a:	2b00      	cmp	r3, #0
 801181c:	d10f      	bne.n	801183e <HAL_TIM_OC_Stop_IT+0xf2>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	6a1a      	ldr	r2, [r3, #32]
 8011824:	f240 4344 	movw	r3, #1092	; 0x444
 8011828:	4013      	ands	r3, r2
 801182a:	2b00      	cmp	r3, #0
 801182c:	d107      	bne.n	801183e <HAL_TIM_OC_Stop_IT+0xf2>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801183c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	6a1a      	ldr	r2, [r3, #32]
 8011844:	f241 1311 	movw	r3, #4369	; 0x1111
 8011848:	4013      	ands	r3, r2
 801184a:	2b00      	cmp	r3, #0
 801184c:	d10f      	bne.n	801186e <HAL_TIM_OC_Stop_IT+0x122>
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	6a1a      	ldr	r2, [r3, #32]
 8011854:	f240 4344 	movw	r3, #1092	; 0x444
 8011858:	4013      	ands	r3, r2
 801185a:	2b00      	cmp	r3, #0
 801185c:	d107      	bne.n	801186e <HAL_TIM_OC_Stop_IT+0x122>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	681a      	ldr	r2, [r3, #0]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	f022 0201 	bic.w	r2, r2, #1
 801186c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801186e:	2300      	movs	r3, #0
}
 8011870:	4618      	mov	r0, r3
 8011872:	3708      	adds	r7, #8
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}
 8011878:	40010000 	.word	0x40010000
 801187c:	40010400 	.word	0x40010400

08011880 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b082      	sub	sp, #8
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d101      	bne.n	8011892 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801188e:	2301      	movs	r3, #1
 8011890:	e01d      	b.n	80118ce <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011898:	b2db      	uxtb	r3, r3
 801189a:	2b00      	cmp	r3, #0
 801189c:	d106      	bne.n	80118ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2200      	movs	r2, #0
 80118a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f000 f815 	bl	80118d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2202      	movs	r2, #2
 80118b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	3304      	adds	r3, #4
 80118bc:	4619      	mov	r1, r3
 80118be:	4610      	mov	r0, r2
 80118c0:	f000 fcc8 	bl	8012254 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2201      	movs	r2, #1
 80118c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80118cc:	2300      	movs	r3, #0
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	3708      	adds	r7, #8
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}

080118d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80118d6:	b480      	push	{r7}
 80118d8:	b083      	sub	sp, #12
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80118de:	bf00      	nop
 80118e0:	370c      	adds	r7, #12
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr
	...

080118ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	2201      	movs	r2, #1
 80118fc:	6839      	ldr	r1, [r7, #0]
 80118fe:	4618      	mov	r0, r3
 8011900:	f000 ff92 	bl	8012828 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	4a15      	ldr	r2, [pc, #84]	; (8011960 <HAL_TIM_PWM_Start+0x74>)
 801190a:	4293      	cmp	r3, r2
 801190c:	d004      	beq.n	8011918 <HAL_TIM_PWM_Start+0x2c>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	4a14      	ldr	r2, [pc, #80]	; (8011964 <HAL_TIM_PWM_Start+0x78>)
 8011914:	4293      	cmp	r3, r2
 8011916:	d101      	bne.n	801191c <HAL_TIM_PWM_Start+0x30>
 8011918:	2301      	movs	r3, #1
 801191a:	e000      	b.n	801191e <HAL_TIM_PWM_Start+0x32>
 801191c:	2300      	movs	r3, #0
 801191e:	2b00      	cmp	r3, #0
 8011920:	d007      	beq.n	8011932 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011930:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	689b      	ldr	r3, [r3, #8]
 8011938:	f003 0307 	and.w	r3, r3, #7
 801193c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2b06      	cmp	r3, #6
 8011942:	d007      	beq.n	8011954 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	681a      	ldr	r2, [r3, #0]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	f042 0201 	orr.w	r2, r2, #1
 8011952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011954:	2300      	movs	r3, #0
}
 8011956:	4618      	mov	r0, r3
 8011958:	3710      	adds	r7, #16
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
 801195e:	bf00      	nop
 8011960:	40010000 	.word	0x40010000
 8011964:	40010400 	.word	0x40010400

08011968 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b082      	sub	sp, #8
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2200      	movs	r2, #0
 8011978:	6839      	ldr	r1, [r7, #0]
 801197a:	4618      	mov	r0, r3
 801197c:	f000 ff54 	bl	8012828 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	4a22      	ldr	r2, [pc, #136]	; (8011a10 <HAL_TIM_PWM_Stop+0xa8>)
 8011986:	4293      	cmp	r3, r2
 8011988:	d004      	beq.n	8011994 <HAL_TIM_PWM_Stop+0x2c>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	4a21      	ldr	r2, [pc, #132]	; (8011a14 <HAL_TIM_PWM_Stop+0xac>)
 8011990:	4293      	cmp	r3, r2
 8011992:	d101      	bne.n	8011998 <HAL_TIM_PWM_Stop+0x30>
 8011994:	2301      	movs	r3, #1
 8011996:	e000      	b.n	801199a <HAL_TIM_PWM_Stop+0x32>
 8011998:	2300      	movs	r3, #0
 801199a:	2b00      	cmp	r3, #0
 801199c:	d017      	beq.n	80119ce <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	6a1a      	ldr	r2, [r3, #32]
 80119a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80119a8:	4013      	ands	r3, r2
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d10f      	bne.n	80119ce <HAL_TIM_PWM_Stop+0x66>
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	6a1a      	ldr	r2, [r3, #32]
 80119b4:	f240 4344 	movw	r3, #1092	; 0x444
 80119b8:	4013      	ands	r3, r2
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d107      	bne.n	80119ce <HAL_TIM_PWM_Stop+0x66>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80119cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	6a1a      	ldr	r2, [r3, #32]
 80119d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80119d8:	4013      	ands	r3, r2
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d10f      	bne.n	80119fe <HAL_TIM_PWM_Stop+0x96>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	6a1a      	ldr	r2, [r3, #32]
 80119e4:	f240 4344 	movw	r3, #1092	; 0x444
 80119e8:	4013      	ands	r3, r2
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d107      	bne.n	80119fe <HAL_TIM_PWM_Stop+0x96>
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	681a      	ldr	r2, [r3, #0]
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	f022 0201 	bic.w	r2, r2, #1
 80119fc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2201      	movs	r2, #1
 8011a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8011a06:	2300      	movs	r3, #0
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	3708      	adds	r7, #8
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	40010000 	.word	0x40010000
 8011a14:	40010400 	.word	0x40010400

08011a18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b086      	sub	sp, #24
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d101      	bne.n	8011a2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8011a28:	2301      	movs	r3, #1
 8011a2a:	e083      	b.n	8011b34 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a32:	b2db      	uxtb	r3, r3
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d106      	bne.n	8011a46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f7fa ffe1 	bl	800ca08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2202      	movs	r2, #2
 8011a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	689b      	ldr	r3, [r3, #8]
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	6812      	ldr	r2, [r2, #0]
 8011a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011a5c:	f023 0307 	bic.w	r3, r3, #7
 8011a60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681a      	ldr	r2, [r3, #0]
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	3304      	adds	r3, #4
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	4610      	mov	r0, r2
 8011a6e:	f000 fbf1 	bl	8012254 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	689b      	ldr	r3, [r3, #8]
 8011a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	699b      	ldr	r3, [r3, #24]
 8011a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	6a1b      	ldr	r3, [r3, #32]
 8011a88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	697a      	ldr	r2, [r7, #20]
 8011a90:	4313      	orrs	r3, r2
 8011a92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011a9a:	f023 0303 	bic.w	r3, r3, #3
 8011a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	689a      	ldr	r2, [r3, #8]
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	699b      	ldr	r3, [r3, #24]
 8011aa8:	021b      	lsls	r3, r3, #8
 8011aaa:	4313      	orrs	r3, r2
 8011aac:	693a      	ldr	r2, [r7, #16]
 8011aae:	4313      	orrs	r3, r2
 8011ab0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8011ab8:	f023 030c 	bic.w	r3, r3, #12
 8011abc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8011abe:	693b      	ldr	r3, [r7, #16]
 8011ac0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011ac4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	68da      	ldr	r2, [r3, #12]
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	69db      	ldr	r3, [r3, #28]
 8011ad2:	021b      	lsls	r3, r3, #8
 8011ad4:	4313      	orrs	r3, r2
 8011ad6:	693a      	ldr	r2, [r7, #16]
 8011ad8:	4313      	orrs	r3, r2
 8011ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	691b      	ldr	r3, [r3, #16]
 8011ae0:	011a      	lsls	r2, r3, #4
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	6a1b      	ldr	r3, [r3, #32]
 8011ae6:	031b      	lsls	r3, r3, #12
 8011ae8:	4313      	orrs	r3, r2
 8011aea:	693a      	ldr	r2, [r7, #16]
 8011aec:	4313      	orrs	r3, r2
 8011aee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8011af6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8011afe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	685a      	ldr	r2, [r3, #4]
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	695b      	ldr	r3, [r3, #20]
 8011b08:	011b      	lsls	r3, r3, #4
 8011b0a:	4313      	orrs	r3, r2
 8011b0c:	68fa      	ldr	r2, [r7, #12]
 8011b0e:	4313      	orrs	r3, r2
 8011b10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	697a      	ldr	r2, [r7, #20]
 8011b18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	693a      	ldr	r2, [r7, #16]
 8011b20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	68fa      	ldr	r2, [r7, #12]
 8011b28:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2201      	movs	r2, #1
 8011b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011b32:	2300      	movs	r3, #0
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3718      	adds	r7, #24
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}

08011b3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d002      	beq.n	8011b52 <HAL_TIM_Encoder_Start+0x16>
 8011b4c:	2b04      	cmp	r3, #4
 8011b4e:	d008      	beq.n	8011b62 <HAL_TIM_Encoder_Start+0x26>
 8011b50:	e00f      	b.n	8011b72 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	2201      	movs	r2, #1
 8011b58:	2100      	movs	r1, #0
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f000 fe64 	bl	8012828 <TIM_CCxChannelCmd>
      break;
 8011b60:	e016      	b.n	8011b90 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	2201      	movs	r2, #1
 8011b68:	2104      	movs	r1, #4
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f000 fe5c 	bl	8012828 <TIM_CCxChannelCmd>
      break;
 8011b70:	e00e      	b.n	8011b90 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	2201      	movs	r2, #1
 8011b78:	2100      	movs	r1, #0
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f000 fe54 	bl	8012828 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	2201      	movs	r2, #1
 8011b86:	2104      	movs	r1, #4
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f000 fe4d 	bl	8012828 <TIM_CCxChannelCmd>
      break;
 8011b8e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	681a      	ldr	r2, [r3, #0]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	f042 0201 	orr.w	r2, r2, #1
 8011b9e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011ba0:	2300      	movs	r3, #0
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3708      	adds	r7, #8
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}

08011baa <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011baa:	b580      	push	{r7, lr}
 8011bac:	b082      	sub	sp, #8
 8011bae:	af00      	add	r7, sp, #0
 8011bb0:	6078      	str	r0, [r7, #4]
 8011bb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d002      	beq.n	8011bc0 <HAL_TIM_Encoder_Stop+0x16>
 8011bba:	2b04      	cmp	r3, #4
 8011bbc:	d008      	beq.n	8011bd0 <HAL_TIM_Encoder_Stop+0x26>
 8011bbe:	e00f      	b.n	8011be0 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	2100      	movs	r1, #0
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f000 fe2d 	bl	8012828 <TIM_CCxChannelCmd>
      break;
 8011bce:	e016      	b.n	8011bfe <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	2104      	movs	r1, #4
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f000 fe25 	bl	8012828 <TIM_CCxChannelCmd>
      break;
 8011bde:	e00e      	b.n	8011bfe <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	2200      	movs	r2, #0
 8011be6:	2100      	movs	r1, #0
 8011be8:	4618      	mov	r0, r3
 8011bea:	f000 fe1d 	bl	8012828 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	2104      	movs	r1, #4
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f000 fe16 	bl	8012828 <TIM_CCxChannelCmd>
      break;
 8011bfc:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	6a1a      	ldr	r2, [r3, #32]
 8011c04:	f241 1311 	movw	r3, #4369	; 0x1111
 8011c08:	4013      	ands	r3, r2
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d10f      	bne.n	8011c2e <HAL_TIM_Encoder_Stop+0x84>
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	6a1a      	ldr	r2, [r3, #32]
 8011c14:	f240 4344 	movw	r3, #1092	; 0x444
 8011c18:	4013      	ands	r3, r2
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d107      	bne.n	8011c2e <HAL_TIM_Encoder_Stop+0x84>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	681a      	ldr	r2, [r3, #0]
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	f022 0201 	bic.w	r2, r2, #1
 8011c2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011c2e:	2300      	movs	r3, #0
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	3708      	adds	r7, #8
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}

08011c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b082      	sub	sp, #8
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	691b      	ldr	r3, [r3, #16]
 8011c46:	f003 0302 	and.w	r3, r3, #2
 8011c4a:	2b02      	cmp	r3, #2
 8011c4c:	d122      	bne.n	8011c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	68db      	ldr	r3, [r3, #12]
 8011c54:	f003 0302 	and.w	r3, r3, #2
 8011c58:	2b02      	cmp	r3, #2
 8011c5a:	d11b      	bne.n	8011c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f06f 0202 	mvn.w	r2, #2
 8011c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2201      	movs	r2, #1
 8011c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	699b      	ldr	r3, [r3, #24]
 8011c72:	f003 0303 	and.w	r3, r3, #3
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d003      	beq.n	8011c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f000 facb 	bl	8012216 <HAL_TIM_IC_CaptureCallback>
 8011c80:	e005      	b.n	8011c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	f000 fabd 	bl	8012202 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f000 face 	bl	801222a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2200      	movs	r2, #0
 8011c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	691b      	ldr	r3, [r3, #16]
 8011c9a:	f003 0304 	and.w	r3, r3, #4
 8011c9e:	2b04      	cmp	r3, #4
 8011ca0:	d122      	bne.n	8011ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	68db      	ldr	r3, [r3, #12]
 8011ca8:	f003 0304 	and.w	r3, r3, #4
 8011cac:	2b04      	cmp	r3, #4
 8011cae:	d11b      	bne.n	8011ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	f06f 0204 	mvn.w	r2, #4
 8011cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	2202      	movs	r2, #2
 8011cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	699b      	ldr	r3, [r3, #24]
 8011cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d003      	beq.n	8011cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f000 faa1 	bl	8012216 <HAL_TIM_IC_CaptureCallback>
 8011cd4:	e005      	b.n	8011ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f000 fa93 	bl	8012202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f000 faa4 	bl	801222a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	691b      	ldr	r3, [r3, #16]
 8011cee:	f003 0308 	and.w	r3, r3, #8
 8011cf2:	2b08      	cmp	r3, #8
 8011cf4:	d122      	bne.n	8011d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	68db      	ldr	r3, [r3, #12]
 8011cfc:	f003 0308 	and.w	r3, r3, #8
 8011d00:	2b08      	cmp	r3, #8
 8011d02:	d11b      	bne.n	8011d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f06f 0208 	mvn.w	r2, #8
 8011d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2204      	movs	r2, #4
 8011d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	69db      	ldr	r3, [r3, #28]
 8011d1a:	f003 0303 	and.w	r3, r3, #3
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d003      	beq.n	8011d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f000 fa77 	bl	8012216 <HAL_TIM_IC_CaptureCallback>
 8011d28:	e005      	b.n	8011d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f000 fa69 	bl	8012202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f000 fa7a 	bl	801222a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2200      	movs	r2, #0
 8011d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	691b      	ldr	r3, [r3, #16]
 8011d42:	f003 0310 	and.w	r3, r3, #16
 8011d46:	2b10      	cmp	r3, #16
 8011d48:	d122      	bne.n	8011d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	68db      	ldr	r3, [r3, #12]
 8011d50:	f003 0310 	and.w	r3, r3, #16
 8011d54:	2b10      	cmp	r3, #16
 8011d56:	d11b      	bne.n	8011d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	f06f 0210 	mvn.w	r2, #16
 8011d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2208      	movs	r2, #8
 8011d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	69db      	ldr	r3, [r3, #28]
 8011d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d003      	beq.n	8011d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f000 fa4d 	bl	8012216 <HAL_TIM_IC_CaptureCallback>
 8011d7c:	e005      	b.n	8011d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f000 fa3f 	bl	8012202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f000 fa50 	bl	801222a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	691b      	ldr	r3, [r3, #16]
 8011d96:	f003 0301 	and.w	r3, r3, #1
 8011d9a:	2b01      	cmp	r3, #1
 8011d9c:	d10e      	bne.n	8011dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	68db      	ldr	r3, [r3, #12]
 8011da4:	f003 0301 	and.w	r3, r3, #1
 8011da8:	2b01      	cmp	r3, #1
 8011daa:	d107      	bne.n	8011dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f06f 0201 	mvn.w	r2, #1
 8011db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f7f8 f930 	bl	800a01c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	691b      	ldr	r3, [r3, #16]
 8011dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011dc6:	2b80      	cmp	r3, #128	; 0x80
 8011dc8:	d10e      	bne.n	8011de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011dd4:	2b80      	cmp	r3, #128	; 0x80
 8011dd6:	d107      	bne.n	8011de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f000 fee8 	bl	8012bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	691b      	ldr	r3, [r3, #16]
 8011dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011df2:	2b40      	cmp	r3, #64	; 0x40
 8011df4:	d10e      	bne.n	8011e14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	68db      	ldr	r3, [r3, #12]
 8011dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e00:	2b40      	cmp	r3, #64	; 0x40
 8011e02:	d107      	bne.n	8011e14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f000 fa15 	bl	801223e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	691b      	ldr	r3, [r3, #16]
 8011e1a:	f003 0320 	and.w	r3, r3, #32
 8011e1e:	2b20      	cmp	r3, #32
 8011e20:	d10e      	bne.n	8011e40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	f003 0320 	and.w	r3, r3, #32
 8011e2c:	2b20      	cmp	r3, #32
 8011e2e:	d107      	bne.n	8011e40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f06f 0220 	mvn.w	r2, #32
 8011e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 feb2 	bl	8012ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011e40:	bf00      	nop
 8011e42:	3708      	adds	r7, #8
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}

08011e48 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b084      	sub	sp, #16
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	60f8      	str	r0, [r7, #12]
 8011e50:	60b9      	str	r1, [r7, #8]
 8011e52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011e5a:	2b01      	cmp	r3, #1
 8011e5c:	d101      	bne.n	8011e62 <HAL_TIM_OC_ConfigChannel+0x1a>
 8011e5e:	2302      	movs	r3, #2
 8011e60:	e04e      	b.n	8011f00 <HAL_TIM_OC_ConfigChannel+0xb8>
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	2201      	movs	r2, #1
 8011e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	2202      	movs	r2, #2
 8011e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2b0c      	cmp	r3, #12
 8011e76:	d839      	bhi.n	8011eec <HAL_TIM_OC_ConfigChannel+0xa4>
 8011e78:	a201      	add	r2, pc, #4	; (adr r2, 8011e80 <HAL_TIM_OC_ConfigChannel+0x38>)
 8011e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e7e:	bf00      	nop
 8011e80:	08011eb5 	.word	0x08011eb5
 8011e84:	08011eed 	.word	0x08011eed
 8011e88:	08011eed 	.word	0x08011eed
 8011e8c:	08011eed 	.word	0x08011eed
 8011e90:	08011ec3 	.word	0x08011ec3
 8011e94:	08011eed 	.word	0x08011eed
 8011e98:	08011eed 	.word	0x08011eed
 8011e9c:	08011eed 	.word	0x08011eed
 8011ea0:	08011ed1 	.word	0x08011ed1
 8011ea4:	08011eed 	.word	0x08011eed
 8011ea8:	08011eed 	.word	0x08011eed
 8011eac:	08011eed 	.word	0x08011eed
 8011eb0:	08011edf 	.word	0x08011edf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	68b9      	ldr	r1, [r7, #8]
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f000 fa6a 	bl	8012394 <TIM_OC1_SetConfig>
      break;
 8011ec0:	e015      	b.n	8011eee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	68b9      	ldr	r1, [r7, #8]
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f000 fad3 	bl	8012474 <TIM_OC2_SetConfig>
      break;
 8011ece:	e00e      	b.n	8011eee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	68b9      	ldr	r1, [r7, #8]
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f000 fb42 	bl	8012560 <TIM_OC3_SetConfig>
      break;
 8011edc:	e007      	b.n	8011eee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	68b9      	ldr	r1, [r7, #8]
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f000 fbaf 	bl	8012648 <TIM_OC4_SetConfig>
      break;
 8011eea:	e000      	b.n	8011eee <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8011eec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	2201      	movs	r2, #1
 8011ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011efe:	2300      	movs	r3, #0
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3710      	adds	r7, #16
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}

08011f08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	60f8      	str	r0, [r7, #12]
 8011f10:	60b9      	str	r1, [r7, #8]
 8011f12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011f1a:	2b01      	cmp	r3, #1
 8011f1c:	d101      	bne.n	8011f22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8011f1e:	2302      	movs	r3, #2
 8011f20:	e0b4      	b.n	801208c <HAL_TIM_PWM_ConfigChannel+0x184>
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	2201      	movs	r2, #1
 8011f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	2202      	movs	r2, #2
 8011f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2b0c      	cmp	r3, #12
 8011f36:	f200 809f 	bhi.w	8012078 <HAL_TIM_PWM_ConfigChannel+0x170>
 8011f3a:	a201      	add	r2, pc, #4	; (adr r2, 8011f40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8011f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f40:	08011f75 	.word	0x08011f75
 8011f44:	08012079 	.word	0x08012079
 8011f48:	08012079 	.word	0x08012079
 8011f4c:	08012079 	.word	0x08012079
 8011f50:	08011fb5 	.word	0x08011fb5
 8011f54:	08012079 	.word	0x08012079
 8011f58:	08012079 	.word	0x08012079
 8011f5c:	08012079 	.word	0x08012079
 8011f60:	08011ff7 	.word	0x08011ff7
 8011f64:	08012079 	.word	0x08012079
 8011f68:	08012079 	.word	0x08012079
 8011f6c:	08012079 	.word	0x08012079
 8011f70:	08012037 	.word	0x08012037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	68b9      	ldr	r1, [r7, #8]
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f000 fa0a 	bl	8012394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	699a      	ldr	r2, [r3, #24]
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	f042 0208 	orr.w	r2, r2, #8
 8011f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	699a      	ldr	r2, [r3, #24]
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	f022 0204 	bic.w	r2, r2, #4
 8011f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	6999      	ldr	r1, [r3, #24]
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	691a      	ldr	r2, [r3, #16]
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	430a      	orrs	r2, r1
 8011fb0:	619a      	str	r2, [r3, #24]
      break;
 8011fb2:	e062      	b.n	801207a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	68b9      	ldr	r1, [r7, #8]
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f000 fa5a 	bl	8012474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	699a      	ldr	r2, [r3, #24]
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	699a      	ldr	r2, [r3, #24]
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	6999      	ldr	r1, [r3, #24]
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	691b      	ldr	r3, [r3, #16]
 8011fea:	021a      	lsls	r2, r3, #8
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	430a      	orrs	r2, r1
 8011ff2:	619a      	str	r2, [r3, #24]
      break;
 8011ff4:	e041      	b.n	801207a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	68b9      	ldr	r1, [r7, #8]
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f000 faaf 	bl	8012560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	69da      	ldr	r2, [r3, #28]
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	f042 0208 	orr.w	r2, r2, #8
 8012010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	69da      	ldr	r2, [r3, #28]
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	f022 0204 	bic.w	r2, r2, #4
 8012020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	69d9      	ldr	r1, [r3, #28]
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	691a      	ldr	r2, [r3, #16]
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	430a      	orrs	r2, r1
 8012032:	61da      	str	r2, [r3, #28]
      break;
 8012034:	e021      	b.n	801207a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	68b9      	ldr	r1, [r7, #8]
 801203c:	4618      	mov	r0, r3
 801203e:	f000 fb03 	bl	8012648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	69da      	ldr	r2, [r3, #28]
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	69da      	ldr	r2, [r3, #28]
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	69d9      	ldr	r1, [r3, #28]
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	691b      	ldr	r3, [r3, #16]
 801206c:	021a      	lsls	r2, r3, #8
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	430a      	orrs	r2, r1
 8012074:	61da      	str	r2, [r3, #28]
      break;
 8012076:	e000      	b.n	801207a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8012078:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	2201      	movs	r2, #1
 801207e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	2200      	movs	r2, #0
 8012086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801208a:	2300      	movs	r3, #0
}
 801208c:	4618      	mov	r0, r3
 801208e:	3710      	adds	r7, #16
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}

08012094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80120a4:	2b01      	cmp	r3, #1
 80120a6:	d101      	bne.n	80120ac <HAL_TIM_ConfigClockSource+0x18>
 80120a8:	2302      	movs	r3, #2
 80120aa:	e0a6      	b.n	80121fa <HAL_TIM_ConfigClockSource+0x166>
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2201      	movs	r2, #1
 80120b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2202      	movs	r2, #2
 80120b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	689b      	ldr	r3, [r3, #8]
 80120c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80120ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80120d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	68fa      	ldr	r2, [r7, #12]
 80120da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	2b40      	cmp	r3, #64	; 0x40
 80120e2:	d067      	beq.n	80121b4 <HAL_TIM_ConfigClockSource+0x120>
 80120e4:	2b40      	cmp	r3, #64	; 0x40
 80120e6:	d80b      	bhi.n	8012100 <HAL_TIM_ConfigClockSource+0x6c>
 80120e8:	2b10      	cmp	r3, #16
 80120ea:	d073      	beq.n	80121d4 <HAL_TIM_ConfigClockSource+0x140>
 80120ec:	2b10      	cmp	r3, #16
 80120ee:	d802      	bhi.n	80120f6 <HAL_TIM_ConfigClockSource+0x62>
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d06f      	beq.n	80121d4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80120f4:	e078      	b.n	80121e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80120f6:	2b20      	cmp	r3, #32
 80120f8:	d06c      	beq.n	80121d4 <HAL_TIM_ConfigClockSource+0x140>
 80120fa:	2b30      	cmp	r3, #48	; 0x30
 80120fc:	d06a      	beq.n	80121d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80120fe:	e073      	b.n	80121e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8012100:	2b70      	cmp	r3, #112	; 0x70
 8012102:	d00d      	beq.n	8012120 <HAL_TIM_ConfigClockSource+0x8c>
 8012104:	2b70      	cmp	r3, #112	; 0x70
 8012106:	d804      	bhi.n	8012112 <HAL_TIM_ConfigClockSource+0x7e>
 8012108:	2b50      	cmp	r3, #80	; 0x50
 801210a:	d033      	beq.n	8012174 <HAL_TIM_ConfigClockSource+0xe0>
 801210c:	2b60      	cmp	r3, #96	; 0x60
 801210e:	d041      	beq.n	8012194 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8012110:	e06a      	b.n	80121e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8012112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012116:	d066      	beq.n	80121e6 <HAL_TIM_ConfigClockSource+0x152>
 8012118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801211c:	d017      	beq.n	801214e <HAL_TIM_ConfigClockSource+0xba>
      break;
 801211e:	e063      	b.n	80121e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6818      	ldr	r0, [r3, #0]
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	6899      	ldr	r1, [r3, #8]
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	685a      	ldr	r2, [r3, #4]
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	68db      	ldr	r3, [r3, #12]
 8012130:	f000 fb5a 	bl	80127e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	689b      	ldr	r3, [r3, #8]
 801213a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012142:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	68fa      	ldr	r2, [r7, #12]
 801214a:	609a      	str	r2, [r3, #8]
      break;
 801214c:	e04c      	b.n	80121e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6818      	ldr	r0, [r3, #0]
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	6899      	ldr	r1, [r3, #8]
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	685a      	ldr	r2, [r3, #4]
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	68db      	ldr	r3, [r3, #12]
 801215e:	f000 fb43 	bl	80127e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	689a      	ldr	r2, [r3, #8]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012170:	609a      	str	r2, [r3, #8]
      break;
 8012172:	e039      	b.n	80121e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	6818      	ldr	r0, [r3, #0]
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	6859      	ldr	r1, [r3, #4]
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	68db      	ldr	r3, [r3, #12]
 8012180:	461a      	mov	r2, r3
 8012182:	f000 fab7 	bl	80126f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	2150      	movs	r1, #80	; 0x50
 801218c:	4618      	mov	r0, r3
 801218e:	f000 fb10 	bl	80127b2 <TIM_ITRx_SetConfig>
      break;
 8012192:	e029      	b.n	80121e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6818      	ldr	r0, [r3, #0]
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	6859      	ldr	r1, [r3, #4]
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	68db      	ldr	r3, [r3, #12]
 80121a0:	461a      	mov	r2, r3
 80121a2:	f000 fad6 	bl	8012752 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	2160      	movs	r1, #96	; 0x60
 80121ac:	4618      	mov	r0, r3
 80121ae:	f000 fb00 	bl	80127b2 <TIM_ITRx_SetConfig>
      break;
 80121b2:	e019      	b.n	80121e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6818      	ldr	r0, [r3, #0]
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	6859      	ldr	r1, [r3, #4]
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	68db      	ldr	r3, [r3, #12]
 80121c0:	461a      	mov	r2, r3
 80121c2:	f000 fa97 	bl	80126f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	2140      	movs	r1, #64	; 0x40
 80121cc:	4618      	mov	r0, r3
 80121ce:	f000 faf0 	bl	80127b2 <TIM_ITRx_SetConfig>
      break;
 80121d2:	e009      	b.n	80121e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681a      	ldr	r2, [r3, #0]
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	4619      	mov	r1, r3
 80121de:	4610      	mov	r0, r2
 80121e0:	f000 fae7 	bl	80127b2 <TIM_ITRx_SetConfig>
      break;
 80121e4:	e000      	b.n	80121e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80121e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2201      	movs	r2, #1
 80121ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2200      	movs	r2, #0
 80121f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80121f8:	2300      	movs	r3, #0
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3710      	adds	r7, #16
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}

08012202 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012202:	b480      	push	{r7}
 8012204:	b083      	sub	sp, #12
 8012206:	af00      	add	r7, sp, #0
 8012208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801220a:	bf00      	nop
 801220c:	370c      	adds	r7, #12
 801220e:	46bd      	mov	sp, r7
 8012210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012214:	4770      	bx	lr

08012216 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012216:	b480      	push	{r7}
 8012218:	b083      	sub	sp, #12
 801221a:	af00      	add	r7, sp, #0
 801221c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801221e:	bf00      	nop
 8012220:	370c      	adds	r7, #12
 8012222:	46bd      	mov	sp, r7
 8012224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012228:	4770      	bx	lr

0801222a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801222a:	b480      	push	{r7}
 801222c:	b083      	sub	sp, #12
 801222e:	af00      	add	r7, sp, #0
 8012230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012232:	bf00      	nop
 8012234:	370c      	adds	r7, #12
 8012236:	46bd      	mov	sp, r7
 8012238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223c:	4770      	bx	lr

0801223e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801223e:	b480      	push	{r7}
 8012240:	b083      	sub	sp, #12
 8012242:	af00      	add	r7, sp, #0
 8012244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012246:	bf00      	nop
 8012248:	370c      	adds	r7, #12
 801224a:	46bd      	mov	sp, r7
 801224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012250:	4770      	bx	lr
	...

08012254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012254:	b480      	push	{r7}
 8012256:	b085      	sub	sp, #20
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
 801225c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	4a40      	ldr	r2, [pc, #256]	; (8012368 <TIM_Base_SetConfig+0x114>)
 8012268:	4293      	cmp	r3, r2
 801226a:	d013      	beq.n	8012294 <TIM_Base_SetConfig+0x40>
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012272:	d00f      	beq.n	8012294 <TIM_Base_SetConfig+0x40>
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	4a3d      	ldr	r2, [pc, #244]	; (801236c <TIM_Base_SetConfig+0x118>)
 8012278:	4293      	cmp	r3, r2
 801227a:	d00b      	beq.n	8012294 <TIM_Base_SetConfig+0x40>
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	4a3c      	ldr	r2, [pc, #240]	; (8012370 <TIM_Base_SetConfig+0x11c>)
 8012280:	4293      	cmp	r3, r2
 8012282:	d007      	beq.n	8012294 <TIM_Base_SetConfig+0x40>
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	4a3b      	ldr	r2, [pc, #236]	; (8012374 <TIM_Base_SetConfig+0x120>)
 8012288:	4293      	cmp	r3, r2
 801228a:	d003      	beq.n	8012294 <TIM_Base_SetConfig+0x40>
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	4a3a      	ldr	r2, [pc, #232]	; (8012378 <TIM_Base_SetConfig+0x124>)
 8012290:	4293      	cmp	r3, r2
 8012292:	d108      	bne.n	80122a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801229a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	68fa      	ldr	r2, [r7, #12]
 80122a2:	4313      	orrs	r3, r2
 80122a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	4a2f      	ldr	r2, [pc, #188]	; (8012368 <TIM_Base_SetConfig+0x114>)
 80122aa:	4293      	cmp	r3, r2
 80122ac:	d02b      	beq.n	8012306 <TIM_Base_SetConfig+0xb2>
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80122b4:	d027      	beq.n	8012306 <TIM_Base_SetConfig+0xb2>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	4a2c      	ldr	r2, [pc, #176]	; (801236c <TIM_Base_SetConfig+0x118>)
 80122ba:	4293      	cmp	r3, r2
 80122bc:	d023      	beq.n	8012306 <TIM_Base_SetConfig+0xb2>
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	4a2b      	ldr	r2, [pc, #172]	; (8012370 <TIM_Base_SetConfig+0x11c>)
 80122c2:	4293      	cmp	r3, r2
 80122c4:	d01f      	beq.n	8012306 <TIM_Base_SetConfig+0xb2>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	4a2a      	ldr	r2, [pc, #168]	; (8012374 <TIM_Base_SetConfig+0x120>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d01b      	beq.n	8012306 <TIM_Base_SetConfig+0xb2>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	4a29      	ldr	r2, [pc, #164]	; (8012378 <TIM_Base_SetConfig+0x124>)
 80122d2:	4293      	cmp	r3, r2
 80122d4:	d017      	beq.n	8012306 <TIM_Base_SetConfig+0xb2>
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	4a28      	ldr	r2, [pc, #160]	; (801237c <TIM_Base_SetConfig+0x128>)
 80122da:	4293      	cmp	r3, r2
 80122dc:	d013      	beq.n	8012306 <TIM_Base_SetConfig+0xb2>
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	4a27      	ldr	r2, [pc, #156]	; (8012380 <TIM_Base_SetConfig+0x12c>)
 80122e2:	4293      	cmp	r3, r2
 80122e4:	d00f      	beq.n	8012306 <TIM_Base_SetConfig+0xb2>
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	4a26      	ldr	r2, [pc, #152]	; (8012384 <TIM_Base_SetConfig+0x130>)
 80122ea:	4293      	cmp	r3, r2
 80122ec:	d00b      	beq.n	8012306 <TIM_Base_SetConfig+0xb2>
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	4a25      	ldr	r2, [pc, #148]	; (8012388 <TIM_Base_SetConfig+0x134>)
 80122f2:	4293      	cmp	r3, r2
 80122f4:	d007      	beq.n	8012306 <TIM_Base_SetConfig+0xb2>
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	4a24      	ldr	r2, [pc, #144]	; (801238c <TIM_Base_SetConfig+0x138>)
 80122fa:	4293      	cmp	r3, r2
 80122fc:	d003      	beq.n	8012306 <TIM_Base_SetConfig+0xb2>
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	4a23      	ldr	r2, [pc, #140]	; (8012390 <TIM_Base_SetConfig+0x13c>)
 8012302:	4293      	cmp	r3, r2
 8012304:	d108      	bne.n	8012318 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801230c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	68db      	ldr	r3, [r3, #12]
 8012312:	68fa      	ldr	r2, [r7, #12]
 8012314:	4313      	orrs	r3, r2
 8012316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	695b      	ldr	r3, [r3, #20]
 8012322:	4313      	orrs	r3, r2
 8012324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	68fa      	ldr	r2, [r7, #12]
 801232a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	689a      	ldr	r2, [r3, #8]
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	681a      	ldr	r2, [r3, #0]
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	4a0a      	ldr	r2, [pc, #40]	; (8012368 <TIM_Base_SetConfig+0x114>)
 8012340:	4293      	cmp	r3, r2
 8012342:	d003      	beq.n	801234c <TIM_Base_SetConfig+0xf8>
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	4a0c      	ldr	r2, [pc, #48]	; (8012378 <TIM_Base_SetConfig+0x124>)
 8012348:	4293      	cmp	r3, r2
 801234a:	d103      	bne.n	8012354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	691a      	ldr	r2, [r3, #16]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2201      	movs	r2, #1
 8012358:	615a      	str	r2, [r3, #20]
}
 801235a:	bf00      	nop
 801235c:	3714      	adds	r7, #20
 801235e:	46bd      	mov	sp, r7
 8012360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop
 8012368:	40010000 	.word	0x40010000
 801236c:	40000400 	.word	0x40000400
 8012370:	40000800 	.word	0x40000800
 8012374:	40000c00 	.word	0x40000c00
 8012378:	40010400 	.word	0x40010400
 801237c:	40014000 	.word	0x40014000
 8012380:	40014400 	.word	0x40014400
 8012384:	40014800 	.word	0x40014800
 8012388:	40001800 	.word	0x40001800
 801238c:	40001c00 	.word	0x40001c00
 8012390:	40002000 	.word	0x40002000

08012394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012394:	b480      	push	{r7}
 8012396:	b087      	sub	sp, #28
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6a1b      	ldr	r3, [r3, #32]
 80123a2:	f023 0201 	bic.w	r2, r3, #1
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6a1b      	ldr	r3, [r3, #32]
 80123ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	685b      	ldr	r3, [r3, #4]
 80123b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	699b      	ldr	r3, [r3, #24]
 80123ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80123c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	f023 0303 	bic.w	r3, r3, #3
 80123ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	68fa      	ldr	r2, [r7, #12]
 80123d2:	4313      	orrs	r3, r2
 80123d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	f023 0302 	bic.w	r3, r3, #2
 80123dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	689b      	ldr	r3, [r3, #8]
 80123e2:	697a      	ldr	r2, [r7, #20]
 80123e4:	4313      	orrs	r3, r2
 80123e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	4a20      	ldr	r2, [pc, #128]	; (801246c <TIM_OC1_SetConfig+0xd8>)
 80123ec:	4293      	cmp	r3, r2
 80123ee:	d003      	beq.n	80123f8 <TIM_OC1_SetConfig+0x64>
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	4a1f      	ldr	r2, [pc, #124]	; (8012470 <TIM_OC1_SetConfig+0xdc>)
 80123f4:	4293      	cmp	r3, r2
 80123f6:	d10c      	bne.n	8012412 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80123f8:	697b      	ldr	r3, [r7, #20]
 80123fa:	f023 0308 	bic.w	r3, r3, #8
 80123fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	68db      	ldr	r3, [r3, #12]
 8012404:	697a      	ldr	r2, [r7, #20]
 8012406:	4313      	orrs	r3, r2
 8012408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	f023 0304 	bic.w	r3, r3, #4
 8012410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	4a15      	ldr	r2, [pc, #84]	; (801246c <TIM_OC1_SetConfig+0xd8>)
 8012416:	4293      	cmp	r3, r2
 8012418:	d003      	beq.n	8012422 <TIM_OC1_SetConfig+0x8e>
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	4a14      	ldr	r2, [pc, #80]	; (8012470 <TIM_OC1_SetConfig+0xdc>)
 801241e:	4293      	cmp	r3, r2
 8012420:	d111      	bne.n	8012446 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012422:	693b      	ldr	r3, [r7, #16]
 8012424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	695b      	ldr	r3, [r3, #20]
 8012436:	693a      	ldr	r2, [r7, #16]
 8012438:	4313      	orrs	r3, r2
 801243a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	699b      	ldr	r3, [r3, #24]
 8012440:	693a      	ldr	r2, [r7, #16]
 8012442:	4313      	orrs	r3, r2
 8012444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	693a      	ldr	r2, [r7, #16]
 801244a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	68fa      	ldr	r2, [r7, #12]
 8012450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	685a      	ldr	r2, [r3, #4]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	697a      	ldr	r2, [r7, #20]
 801245e:	621a      	str	r2, [r3, #32]
}
 8012460:	bf00      	nop
 8012462:	371c      	adds	r7, #28
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr
 801246c:	40010000 	.word	0x40010000
 8012470:	40010400 	.word	0x40010400

08012474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012474:	b480      	push	{r7}
 8012476:	b087      	sub	sp, #28
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6a1b      	ldr	r3, [r3, #32]
 8012482:	f023 0210 	bic.w	r2, r3, #16
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6a1b      	ldr	r3, [r3, #32]
 801248e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	699b      	ldr	r3, [r3, #24]
 801249a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80124a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80124aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	021b      	lsls	r3, r3, #8
 80124b2:	68fa      	ldr	r2, [r7, #12]
 80124b4:	4313      	orrs	r3, r2
 80124b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	f023 0320 	bic.w	r3, r3, #32
 80124be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	689b      	ldr	r3, [r3, #8]
 80124c4:	011b      	lsls	r3, r3, #4
 80124c6:	697a      	ldr	r2, [r7, #20]
 80124c8:	4313      	orrs	r3, r2
 80124ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	4a22      	ldr	r2, [pc, #136]	; (8012558 <TIM_OC2_SetConfig+0xe4>)
 80124d0:	4293      	cmp	r3, r2
 80124d2:	d003      	beq.n	80124dc <TIM_OC2_SetConfig+0x68>
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	4a21      	ldr	r2, [pc, #132]	; (801255c <TIM_OC2_SetConfig+0xe8>)
 80124d8:	4293      	cmp	r3, r2
 80124da:	d10d      	bne.n	80124f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80124e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	68db      	ldr	r3, [r3, #12]
 80124e8:	011b      	lsls	r3, r3, #4
 80124ea:	697a      	ldr	r2, [r7, #20]
 80124ec:	4313      	orrs	r3, r2
 80124ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80124f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	4a17      	ldr	r2, [pc, #92]	; (8012558 <TIM_OC2_SetConfig+0xe4>)
 80124fc:	4293      	cmp	r3, r2
 80124fe:	d003      	beq.n	8012508 <TIM_OC2_SetConfig+0x94>
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	4a16      	ldr	r2, [pc, #88]	; (801255c <TIM_OC2_SetConfig+0xe8>)
 8012504:	4293      	cmp	r3, r2
 8012506:	d113      	bne.n	8012530 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801250e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012516:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	695b      	ldr	r3, [r3, #20]
 801251c:	009b      	lsls	r3, r3, #2
 801251e:	693a      	ldr	r2, [r7, #16]
 8012520:	4313      	orrs	r3, r2
 8012522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	699b      	ldr	r3, [r3, #24]
 8012528:	009b      	lsls	r3, r3, #2
 801252a:	693a      	ldr	r2, [r7, #16]
 801252c:	4313      	orrs	r3, r2
 801252e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	693a      	ldr	r2, [r7, #16]
 8012534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	68fa      	ldr	r2, [r7, #12]
 801253a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	685a      	ldr	r2, [r3, #4]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	697a      	ldr	r2, [r7, #20]
 8012548:	621a      	str	r2, [r3, #32]
}
 801254a:	bf00      	nop
 801254c:	371c      	adds	r7, #28
 801254e:	46bd      	mov	sp, r7
 8012550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012554:	4770      	bx	lr
 8012556:	bf00      	nop
 8012558:	40010000 	.word	0x40010000
 801255c:	40010400 	.word	0x40010400

08012560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012560:	b480      	push	{r7}
 8012562:	b087      	sub	sp, #28
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6a1b      	ldr	r3, [r3, #32]
 801256e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6a1b      	ldr	r3, [r3, #32]
 801257a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	685b      	ldr	r3, [r3, #4]
 8012580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	69db      	ldr	r3, [r3, #28]
 8012586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801258e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	f023 0303 	bic.w	r3, r3, #3
 8012596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	68fa      	ldr	r2, [r7, #12]
 801259e:	4313      	orrs	r3, r2
 80125a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80125a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	689b      	ldr	r3, [r3, #8]
 80125ae:	021b      	lsls	r3, r3, #8
 80125b0:	697a      	ldr	r2, [r7, #20]
 80125b2:	4313      	orrs	r3, r2
 80125b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	4a21      	ldr	r2, [pc, #132]	; (8012640 <TIM_OC3_SetConfig+0xe0>)
 80125ba:	4293      	cmp	r3, r2
 80125bc:	d003      	beq.n	80125c6 <TIM_OC3_SetConfig+0x66>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	4a20      	ldr	r2, [pc, #128]	; (8012644 <TIM_OC3_SetConfig+0xe4>)
 80125c2:	4293      	cmp	r3, r2
 80125c4:	d10d      	bne.n	80125e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80125cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	68db      	ldr	r3, [r3, #12]
 80125d2:	021b      	lsls	r3, r3, #8
 80125d4:	697a      	ldr	r2, [r7, #20]
 80125d6:	4313      	orrs	r3, r2
 80125d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80125e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	4a16      	ldr	r2, [pc, #88]	; (8012640 <TIM_OC3_SetConfig+0xe0>)
 80125e6:	4293      	cmp	r3, r2
 80125e8:	d003      	beq.n	80125f2 <TIM_OC3_SetConfig+0x92>
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	4a15      	ldr	r2, [pc, #84]	; (8012644 <TIM_OC3_SetConfig+0xe4>)
 80125ee:	4293      	cmp	r3, r2
 80125f0:	d113      	bne.n	801261a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80125f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80125fa:	693b      	ldr	r3, [r7, #16]
 80125fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	695b      	ldr	r3, [r3, #20]
 8012606:	011b      	lsls	r3, r3, #4
 8012608:	693a      	ldr	r2, [r7, #16]
 801260a:	4313      	orrs	r3, r2
 801260c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	699b      	ldr	r3, [r3, #24]
 8012612:	011b      	lsls	r3, r3, #4
 8012614:	693a      	ldr	r2, [r7, #16]
 8012616:	4313      	orrs	r3, r2
 8012618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	693a      	ldr	r2, [r7, #16]
 801261e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	68fa      	ldr	r2, [r7, #12]
 8012624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	685a      	ldr	r2, [r3, #4]
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	697a      	ldr	r2, [r7, #20]
 8012632:	621a      	str	r2, [r3, #32]
}
 8012634:	bf00      	nop
 8012636:	371c      	adds	r7, #28
 8012638:	46bd      	mov	sp, r7
 801263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263e:	4770      	bx	lr
 8012640:	40010000 	.word	0x40010000
 8012644:	40010400 	.word	0x40010400

08012648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012648:	b480      	push	{r7}
 801264a:	b087      	sub	sp, #28
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
 8012650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6a1b      	ldr	r3, [r3, #32]
 8012656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6a1b      	ldr	r3, [r3, #32]
 8012662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	69db      	ldr	r3, [r3, #28]
 801266e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801267e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	021b      	lsls	r3, r3, #8
 8012686:	68fa      	ldr	r2, [r7, #12]
 8012688:	4313      	orrs	r3, r2
 801268a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801268c:	693b      	ldr	r3, [r7, #16]
 801268e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	689b      	ldr	r3, [r3, #8]
 8012698:	031b      	lsls	r3, r3, #12
 801269a:	693a      	ldr	r2, [r7, #16]
 801269c:	4313      	orrs	r3, r2
 801269e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	4a12      	ldr	r2, [pc, #72]	; (80126ec <TIM_OC4_SetConfig+0xa4>)
 80126a4:	4293      	cmp	r3, r2
 80126a6:	d003      	beq.n	80126b0 <TIM_OC4_SetConfig+0x68>
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	4a11      	ldr	r2, [pc, #68]	; (80126f0 <TIM_OC4_SetConfig+0xa8>)
 80126ac:	4293      	cmp	r3, r2
 80126ae:	d109      	bne.n	80126c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80126b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	695b      	ldr	r3, [r3, #20]
 80126bc:	019b      	lsls	r3, r3, #6
 80126be:	697a      	ldr	r2, [r7, #20]
 80126c0:	4313      	orrs	r3, r2
 80126c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	697a      	ldr	r2, [r7, #20]
 80126c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	68fa      	ldr	r2, [r7, #12]
 80126ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	685a      	ldr	r2, [r3, #4]
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	693a      	ldr	r2, [r7, #16]
 80126dc:	621a      	str	r2, [r3, #32]
}
 80126de:	bf00      	nop
 80126e0:	371c      	adds	r7, #28
 80126e2:	46bd      	mov	sp, r7
 80126e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e8:	4770      	bx	lr
 80126ea:	bf00      	nop
 80126ec:	40010000 	.word	0x40010000
 80126f0:	40010400 	.word	0x40010400

080126f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80126f4:	b480      	push	{r7}
 80126f6:	b087      	sub	sp, #28
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	60f8      	str	r0, [r7, #12]
 80126fc:	60b9      	str	r1, [r7, #8]
 80126fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	6a1b      	ldr	r3, [r3, #32]
 8012704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	6a1b      	ldr	r3, [r3, #32]
 801270a:	f023 0201 	bic.w	r2, r3, #1
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	699b      	ldr	r3, [r3, #24]
 8012716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012718:	693b      	ldr	r3, [r7, #16]
 801271a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801271e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	011b      	lsls	r3, r3, #4
 8012724:	693a      	ldr	r2, [r7, #16]
 8012726:	4313      	orrs	r3, r2
 8012728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	f023 030a 	bic.w	r3, r3, #10
 8012730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012732:	697a      	ldr	r2, [r7, #20]
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	4313      	orrs	r3, r2
 8012738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	693a      	ldr	r2, [r7, #16]
 801273e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	697a      	ldr	r2, [r7, #20]
 8012744:	621a      	str	r2, [r3, #32]
}
 8012746:	bf00      	nop
 8012748:	371c      	adds	r7, #28
 801274a:	46bd      	mov	sp, r7
 801274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012750:	4770      	bx	lr

08012752 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012752:	b480      	push	{r7}
 8012754:	b087      	sub	sp, #28
 8012756:	af00      	add	r7, sp, #0
 8012758:	60f8      	str	r0, [r7, #12]
 801275a:	60b9      	str	r1, [r7, #8]
 801275c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	6a1b      	ldr	r3, [r3, #32]
 8012762:	f023 0210 	bic.w	r2, r3, #16
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	699b      	ldr	r3, [r3, #24]
 801276e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	6a1b      	ldr	r3, [r3, #32]
 8012774:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801277c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	031b      	lsls	r3, r3, #12
 8012782:	697a      	ldr	r2, [r7, #20]
 8012784:	4313      	orrs	r3, r2
 8012786:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801278e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	011b      	lsls	r3, r3, #4
 8012794:	693a      	ldr	r2, [r7, #16]
 8012796:	4313      	orrs	r3, r2
 8012798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	697a      	ldr	r2, [r7, #20]
 801279e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	693a      	ldr	r2, [r7, #16]
 80127a4:	621a      	str	r2, [r3, #32]
}
 80127a6:	bf00      	nop
 80127a8:	371c      	adds	r7, #28
 80127aa:	46bd      	mov	sp, r7
 80127ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b0:	4770      	bx	lr

080127b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80127b2:	b480      	push	{r7}
 80127b4:	b085      	sub	sp, #20
 80127b6:	af00      	add	r7, sp, #0
 80127b8:	6078      	str	r0, [r7, #4]
 80127ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	689b      	ldr	r3, [r3, #8]
 80127c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80127c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80127ca:	683a      	ldr	r2, [r7, #0]
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	4313      	orrs	r3, r2
 80127d0:	f043 0307 	orr.w	r3, r3, #7
 80127d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	68fa      	ldr	r2, [r7, #12]
 80127da:	609a      	str	r2, [r3, #8]
}
 80127dc:	bf00      	nop
 80127de:	3714      	adds	r7, #20
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr

080127e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80127e8:	b480      	push	{r7}
 80127ea:	b087      	sub	sp, #28
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	60f8      	str	r0, [r7, #12]
 80127f0:	60b9      	str	r1, [r7, #8]
 80127f2:	607a      	str	r2, [r7, #4]
 80127f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	689b      	ldr	r3, [r3, #8]
 80127fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	021a      	lsls	r2, r3, #8
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	431a      	orrs	r2, r3
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	4313      	orrs	r3, r2
 8012810:	697a      	ldr	r2, [r7, #20]
 8012812:	4313      	orrs	r3, r2
 8012814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	697a      	ldr	r2, [r7, #20]
 801281a:	609a      	str	r2, [r3, #8]
}
 801281c:	bf00      	nop
 801281e:	371c      	adds	r7, #28
 8012820:	46bd      	mov	sp, r7
 8012822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012826:	4770      	bx	lr

08012828 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012828:	b480      	push	{r7}
 801282a:	b087      	sub	sp, #28
 801282c:	af00      	add	r7, sp, #0
 801282e:	60f8      	str	r0, [r7, #12]
 8012830:	60b9      	str	r1, [r7, #8]
 8012832:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	f003 031f 	and.w	r3, r3, #31
 801283a:	2201      	movs	r2, #1
 801283c:	fa02 f303 	lsl.w	r3, r2, r3
 8012840:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	6a1a      	ldr	r2, [r3, #32]
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	43db      	mvns	r3, r3
 801284a:	401a      	ands	r2, r3
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	6a1a      	ldr	r2, [r3, #32]
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	f003 031f 	and.w	r3, r3, #31
 801285a:	6879      	ldr	r1, [r7, #4]
 801285c:	fa01 f303 	lsl.w	r3, r1, r3
 8012860:	431a      	orrs	r2, r3
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	621a      	str	r2, [r3, #32]
}
 8012866:	bf00      	nop
 8012868:	371c      	adds	r7, #28
 801286a:	46bd      	mov	sp, r7
 801286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012870:	4770      	bx	lr

08012872 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012872:	b580      	push	{r7, lr}
 8012874:	b084      	sub	sp, #16
 8012876:	af00      	add	r7, sp, #0
 8012878:	6078      	str	r0, [r7, #4]
 801287a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	2b04      	cmp	r3, #4
 8012880:	d00d      	beq.n	801289e <HAL_TIMEx_OCN_Start_IT+0x2c>
 8012882:	2b08      	cmp	r3, #8
 8012884:	d014      	beq.n	80128b0 <HAL_TIMEx_OCN_Start_IT+0x3e>
 8012886:	2b00      	cmp	r3, #0
 8012888:	d000      	beq.n	801288c <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 801288a:	e01a      	b.n	80128c2 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	68da      	ldr	r2, [r3, #12]
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	f042 0202 	orr.w	r2, r2, #2
 801289a:	60da      	str	r2, [r3, #12]
      break;
 801289c:	e011      	b.n	80128c2 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	68da      	ldr	r2, [r3, #12]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f042 0204 	orr.w	r2, r2, #4
 80128ac:	60da      	str	r2, [r3, #12]
      break;
 80128ae:	e008      	b.n	80128c2 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	68da      	ldr	r2, [r3, #12]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	f042 0208 	orr.w	r2, r2, #8
 80128be:	60da      	str	r2, [r3, #12]
      break;
 80128c0:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	68da      	ldr	r2, [r3, #12]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80128d0:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	2204      	movs	r2, #4
 80128d8:	6839      	ldr	r1, [r7, #0]
 80128da:	4618      	mov	r0, r3
 80128dc:	f000 f976 	bl	8012bcc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80128ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	689b      	ldr	r3, [r3, #8]
 80128f6:	f003 0307 	and.w	r3, r3, #7
 80128fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	2b06      	cmp	r3, #6
 8012900:	d007      	beq.n	8012912 <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	681a      	ldr	r2, [r3, #0]
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	f042 0201 	orr.w	r2, r2, #1
 8012910:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012912:	2300      	movs	r3, #0
}
 8012914:	4618      	mov	r0, r3
 8012916:	3710      	adds	r7, #16
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b084      	sub	sp, #16
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	2b04      	cmp	r3, #4
 801292a:	d00d      	beq.n	8012948 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 801292c:	2b08      	cmp	r3, #8
 801292e:	d014      	beq.n	801295a <HAL_TIMEx_OCN_Stop_IT+0x3e>
 8012930:	2b00      	cmp	r3, #0
 8012932:	d000      	beq.n	8012936 <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8012934:	e01a      	b.n	801296c <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	68da      	ldr	r2, [r3, #12]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	f022 0202 	bic.w	r2, r2, #2
 8012944:	60da      	str	r2, [r3, #12]
      break;
 8012946:	e011      	b.n	801296c <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	68da      	ldr	r2, [r3, #12]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	f022 0204 	bic.w	r2, r2, #4
 8012956:	60da      	str	r2, [r3, #12]
      break;
 8012958:	e008      	b.n	801296c <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	68da      	ldr	r2, [r3, #12]
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	f022 0208 	bic.w	r2, r2, #8
 8012968:	60da      	str	r2, [r3, #12]
      break;
 801296a:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	2200      	movs	r2, #0
 8012972:	6839      	ldr	r1, [r7, #0]
 8012974:	4618      	mov	r0, r3
 8012976:	f000 f929 	bl	8012bcc <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	6a1b      	ldr	r3, [r3, #32]
 8012980:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8012982:	68fa      	ldr	r2, [r7, #12]
 8012984:	f240 4344 	movw	r3, #1092	; 0x444
 8012988:	4013      	ands	r3, r2
 801298a:	2b00      	cmp	r3, #0
 801298c:	d107      	bne.n	801299e <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	68da      	ldr	r2, [r3, #12]
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801299c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	6a1a      	ldr	r2, [r3, #32]
 80129a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80129a8:	4013      	ands	r3, r2
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d10f      	bne.n	80129ce <HAL_TIMEx_OCN_Stop_IT+0xb2>
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	6a1a      	ldr	r2, [r3, #32]
 80129b4:	f240 4344 	movw	r3, #1092	; 0x444
 80129b8:	4013      	ands	r3, r2
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d107      	bne.n	80129ce <HAL_TIMEx_OCN_Stop_IT+0xb2>
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80129cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	6a1a      	ldr	r2, [r3, #32]
 80129d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80129d8:	4013      	ands	r3, r2
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d10f      	bne.n	80129fe <HAL_TIMEx_OCN_Stop_IT+0xe2>
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	6a1a      	ldr	r2, [r3, #32]
 80129e4:	f240 4344 	movw	r3, #1092	; 0x444
 80129e8:	4013      	ands	r3, r2
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d107      	bne.n	80129fe <HAL_TIMEx_OCN_Stop_IT+0xe2>
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f022 0201 	bic.w	r2, r2, #1
 80129fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80129fe:	2300      	movs	r3, #0
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3710      	adds	r7, #16
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}

08012a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b085      	sub	sp, #20
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012a18:	2b01      	cmp	r3, #1
 8012a1a:	d101      	bne.n	8012a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012a1c:	2302      	movs	r3, #2
 8012a1e:	e05a      	b.n	8012ad6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2201      	movs	r2, #1
 8012a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2202      	movs	r2, #2
 8012a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	685b      	ldr	r3, [r3, #4]
 8012a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	689b      	ldr	r3, [r3, #8]
 8012a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012a48:	683b      	ldr	r3, [r7, #0]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	68fa      	ldr	r2, [r7, #12]
 8012a4e:	4313      	orrs	r3, r2
 8012a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	68fa      	ldr	r2, [r7, #12]
 8012a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	4a21      	ldr	r2, [pc, #132]	; (8012ae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8012a60:	4293      	cmp	r3, r2
 8012a62:	d022      	beq.n	8012aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a6c:	d01d      	beq.n	8012aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	4a1d      	ldr	r2, [pc, #116]	; (8012ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8012a74:	4293      	cmp	r3, r2
 8012a76:	d018      	beq.n	8012aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	4a1b      	ldr	r2, [pc, #108]	; (8012aec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8012a7e:	4293      	cmp	r3, r2
 8012a80:	d013      	beq.n	8012aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	4a1a      	ldr	r2, [pc, #104]	; (8012af0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8012a88:	4293      	cmp	r3, r2
 8012a8a:	d00e      	beq.n	8012aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	4a18      	ldr	r2, [pc, #96]	; (8012af4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8012a92:	4293      	cmp	r3, r2
 8012a94:	d009      	beq.n	8012aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	4a17      	ldr	r2, [pc, #92]	; (8012af8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8012a9c:	4293      	cmp	r3, r2
 8012a9e:	d004      	beq.n	8012aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	4a15      	ldr	r2, [pc, #84]	; (8012afc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8012aa6:	4293      	cmp	r3, r2
 8012aa8:	d10c      	bne.n	8012ac4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	68ba      	ldr	r2, [r7, #8]
 8012ab8:	4313      	orrs	r3, r2
 8012aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	68ba      	ldr	r2, [r7, #8]
 8012ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012ad4:	2300      	movs	r3, #0
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	3714      	adds	r7, #20
 8012ada:	46bd      	mov	sp, r7
 8012adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae0:	4770      	bx	lr
 8012ae2:	bf00      	nop
 8012ae4:	40010000 	.word	0x40010000
 8012ae8:	40000400 	.word	0x40000400
 8012aec:	40000800 	.word	0x40000800
 8012af0:	40000c00 	.word	0x40000c00
 8012af4:	40010400 	.word	0x40010400
 8012af8:	40014000 	.word	0x40014000
 8012afc:	40001800 	.word	0x40001800

08012b00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012b00:	b480      	push	{r7}
 8012b02:	b085      	sub	sp, #20
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
 8012b08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b14:	2b01      	cmp	r3, #1
 8012b16:	d101      	bne.n	8012b1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012b18:	2302      	movs	r3, #2
 8012b1a:	e03d      	b.n	8012b98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2201      	movs	r2, #1
 8012b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	4313      	orrs	r3, r2
 8012b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	689b      	ldr	r3, [r3, #8]
 8012b3c:	4313      	orrs	r3, r2
 8012b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	685b      	ldr	r3, [r3, #4]
 8012b4a:	4313      	orrs	r3, r2
 8012b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	4313      	orrs	r3, r2
 8012b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	691b      	ldr	r3, [r3, #16]
 8012b66:	4313      	orrs	r3, r2
 8012b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	695b      	ldr	r3, [r3, #20]
 8012b74:	4313      	orrs	r3, r2
 8012b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	69db      	ldr	r3, [r3, #28]
 8012b82:	4313      	orrs	r3, r2
 8012b84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	68fa      	ldr	r2, [r7, #12]
 8012b8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2200      	movs	r2, #0
 8012b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012b96:	2300      	movs	r3, #0
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3714      	adds	r7, #20
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba2:	4770      	bx	lr

08012ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012bac:	bf00      	nop
 8012bae:	370c      	adds	r7, #12
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb6:	4770      	bx	lr

08012bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012bb8:	b480      	push	{r7}
 8012bba:	b083      	sub	sp, #12
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012bc0:	bf00      	nop
 8012bc2:	370c      	adds	r7, #12
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bca:	4770      	bx	lr

08012bcc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b087      	sub	sp, #28
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	60f8      	str	r0, [r7, #12]
 8012bd4:	60b9      	str	r1, [r7, #8]
 8012bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	f003 031f 	and.w	r3, r3, #31
 8012bde:	2204      	movs	r2, #4
 8012be0:	fa02 f303 	lsl.w	r3, r2, r3
 8012be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	6a1a      	ldr	r2, [r3, #32]
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	43db      	mvns	r3, r3
 8012bee:	401a      	ands	r2, r3
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	6a1a      	ldr	r2, [r3, #32]
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	f003 031f 	and.w	r3, r3, #31
 8012bfe:	6879      	ldr	r1, [r7, #4]
 8012c00:	fa01 f303 	lsl.w	r3, r1, r3
 8012c04:	431a      	orrs	r2, r3
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	621a      	str	r2, [r3, #32]
}
 8012c0a:	bf00      	nop
 8012c0c:	371c      	adds	r7, #28
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c14:	4770      	bx	lr

08012c16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012c16:	b580      	push	{r7, lr}
 8012c18:	b082      	sub	sp, #8
 8012c1a:	af00      	add	r7, sp, #0
 8012c1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d101      	bne.n	8012c28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012c24:	2301      	movs	r3, #1
 8012c26:	e03f      	b.n	8012ca8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012c2e:	b2db      	uxtb	r3, r3
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d106      	bne.n	8012c42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2200      	movs	r2, #0
 8012c38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f7fa f805 	bl	800cc4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2224      	movs	r2, #36	; 0x24
 8012c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	68da      	ldr	r2, [r3, #12]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012c58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8012c5a:	6878      	ldr	r0, [r7, #4]
 8012c5c:	f000 f9b2 	bl	8012fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	691a      	ldr	r2, [r3, #16]
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012c6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	695a      	ldr	r2, [r3, #20]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012c7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	68da      	ldr	r2, [r3, #12]
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012c8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2200      	movs	r2, #0
 8012c94:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2220      	movs	r2, #32
 8012c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2220      	movs	r2, #32
 8012ca2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8012ca6:	2300      	movs	r3, #0
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3708      	adds	r7, #8
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b088      	sub	sp, #32
 8012cb4:	af02      	add	r7, sp, #8
 8012cb6:	60f8      	str	r0, [r7, #12]
 8012cb8:	60b9      	str	r1, [r7, #8]
 8012cba:	603b      	str	r3, [r7, #0]
 8012cbc:	4613      	mov	r3, r2
 8012cbe:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012cca:	b2db      	uxtb	r3, r3
 8012ccc:	2b20      	cmp	r3, #32
 8012cce:	f040 8083 	bne.w	8012dd8 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8012cd2:	68bb      	ldr	r3, [r7, #8]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d002      	beq.n	8012cde <HAL_UART_Transmit+0x2e>
 8012cd8:	88fb      	ldrh	r3, [r7, #6]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d101      	bne.n	8012ce2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8012cde:	2301      	movs	r3, #1
 8012ce0:	e07b      	b.n	8012dda <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012ce8:	2b01      	cmp	r3, #1
 8012cea:	d101      	bne.n	8012cf0 <HAL_UART_Transmit+0x40>
 8012cec:	2302      	movs	r3, #2
 8012cee:	e074      	b.n	8012dda <HAL_UART_Transmit+0x12a>
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	2221      	movs	r2, #33	; 0x21
 8012d02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8012d06:	f7fb fd25 	bl	800e754 <HAL_GetTick>
 8012d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	88fa      	ldrh	r2, [r7, #6]
 8012d10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	88fa      	ldrh	r2, [r7, #6]
 8012d16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8012d20:	e042      	b.n	8012da8 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	3b01      	subs	r3, #1
 8012d2a:	b29a      	uxth	r2, r3
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	689b      	ldr	r3, [r3, #8]
 8012d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012d38:	d122      	bne.n	8012d80 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	9300      	str	r3, [sp, #0]
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	2200      	movs	r2, #0
 8012d42:	2180      	movs	r1, #128	; 0x80
 8012d44:	68f8      	ldr	r0, [r7, #12]
 8012d46:	f000 f8f2 	bl	8012f2e <UART_WaitOnFlagUntilTimeout>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d001      	beq.n	8012d54 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8012d50:	2303      	movs	r3, #3
 8012d52:	e042      	b.n	8012dda <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	881b      	ldrh	r3, [r3, #0]
 8012d5c:	461a      	mov	r2, r3
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012d66:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	691b      	ldr	r3, [r3, #16]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d103      	bne.n	8012d78 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	3302      	adds	r3, #2
 8012d74:	60bb      	str	r3, [r7, #8]
 8012d76:	e017      	b.n	8012da8 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	60bb      	str	r3, [r7, #8]
 8012d7e:	e013      	b.n	8012da8 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	9300      	str	r3, [sp, #0]
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	2200      	movs	r2, #0
 8012d88:	2180      	movs	r1, #128	; 0x80
 8012d8a:	68f8      	ldr	r0, [r7, #12]
 8012d8c:	f000 f8cf 	bl	8012f2e <UART_WaitOnFlagUntilTimeout>
 8012d90:	4603      	mov	r3, r0
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d001      	beq.n	8012d9a <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8012d96:	2303      	movs	r3, #3
 8012d98:	e01f      	b.n	8012dda <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	1c5a      	adds	r2, r3, #1
 8012d9e:	60ba      	str	r2, [r7, #8]
 8012da0:	781a      	ldrb	r2, [r3, #0]
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012dac:	b29b      	uxth	r3, r3
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d1b7      	bne.n	8012d22 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	9300      	str	r3, [sp, #0]
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	2200      	movs	r2, #0
 8012dba:	2140      	movs	r1, #64	; 0x40
 8012dbc:	68f8      	ldr	r0, [r7, #12]
 8012dbe:	f000 f8b6 	bl	8012f2e <UART_WaitOnFlagUntilTimeout>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d001      	beq.n	8012dcc <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8012dc8:	2303      	movs	r3, #3
 8012dca:	e006      	b.n	8012dda <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	2220      	movs	r2, #32
 8012dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	e000      	b.n	8012dda <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8012dd8:	2302      	movs	r3, #2
  }
}
 8012dda:	4618      	mov	r0, r3
 8012ddc:	3718      	adds	r7, #24
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}

08012de2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012de2:	b580      	push	{r7, lr}
 8012de4:	b088      	sub	sp, #32
 8012de6:	af02      	add	r7, sp, #8
 8012de8:	60f8      	str	r0, [r7, #12]
 8012dea:	60b9      	str	r1, [r7, #8]
 8012dec:	603b      	str	r3, [r7, #0]
 8012dee:	4613      	mov	r3, r2
 8012df0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8012df2:	2300      	movs	r3, #0
 8012df4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	2b20      	cmp	r3, #32
 8012e00:	f040 8090 	bne.w	8012f24 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d002      	beq.n	8012e10 <HAL_UART_Receive+0x2e>
 8012e0a:	88fb      	ldrh	r3, [r7, #6]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d101      	bne.n	8012e14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8012e10:	2301      	movs	r3, #1
 8012e12:	e088      	b.n	8012f26 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012e1a:	2b01      	cmp	r3, #1
 8012e1c:	d101      	bne.n	8012e22 <HAL_UART_Receive+0x40>
 8012e1e:	2302      	movs	r3, #2
 8012e20:	e081      	b.n	8012f26 <HAL_UART_Receive+0x144>
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	2201      	movs	r2, #1
 8012e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	2222      	movs	r2, #34	; 0x22
 8012e34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8012e38:	f7fb fc8c 	bl	800e754 <HAL_GetTick>
 8012e3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	88fa      	ldrh	r2, [r7, #6]
 8012e42:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	88fa      	ldrh	r2, [r7, #6]
 8012e48:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8012e52:	e05c      	b.n	8012f0e <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012e58:	b29b      	uxth	r3, r3
 8012e5a:	3b01      	subs	r3, #1
 8012e5c:	b29a      	uxth	r2, r3
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	689b      	ldr	r3, [r3, #8]
 8012e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012e6a:	d12b      	bne.n	8012ec4 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	9300      	str	r3, [sp, #0]
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	2200      	movs	r2, #0
 8012e74:	2120      	movs	r1, #32
 8012e76:	68f8      	ldr	r0, [r7, #12]
 8012e78:	f000 f859 	bl	8012f2e <UART_WaitOnFlagUntilTimeout>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d001      	beq.n	8012e86 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8012e82:	2303      	movs	r3, #3
 8012e84:	e04f      	b.n	8012f26 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	691b      	ldr	r3, [r3, #16]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d10c      	bne.n	8012eac <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	b29b      	uxth	r3, r3
 8012e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e9e:	b29a      	uxth	r2, r3
 8012ea0:	693b      	ldr	r3, [r7, #16]
 8012ea2:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	3302      	adds	r3, #2
 8012ea8:	60bb      	str	r3, [r7, #8]
 8012eaa:	e030      	b.n	8012f0e <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	685b      	ldr	r3, [r3, #4]
 8012eb2:	b29b      	uxth	r3, r3
 8012eb4:	b2db      	uxtb	r3, r3
 8012eb6:	b29a      	uxth	r2, r3
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	3301      	adds	r3, #1
 8012ec0:	60bb      	str	r3, [r7, #8]
 8012ec2:	e024      	b.n	8012f0e <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	9300      	str	r3, [sp, #0]
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	2120      	movs	r1, #32
 8012ece:	68f8      	ldr	r0, [r7, #12]
 8012ed0:	f000 f82d 	bl	8012f2e <UART_WaitOnFlagUntilTimeout>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d001      	beq.n	8012ede <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8012eda:	2303      	movs	r3, #3
 8012edc:	e023      	b.n	8012f26 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	691b      	ldr	r3, [r3, #16]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d108      	bne.n	8012ef8 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	6859      	ldr	r1, [r3, #4]
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	1c5a      	adds	r2, r3, #1
 8012ef0:	60ba      	str	r2, [r7, #8]
 8012ef2:	b2ca      	uxtb	r2, r1
 8012ef4:	701a      	strb	r2, [r3, #0]
 8012ef6:	e00a      	b.n	8012f0e <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	685b      	ldr	r3, [r3, #4]
 8012efe:	b2da      	uxtb	r2, r3
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	1c59      	adds	r1, r3, #1
 8012f04:	60b9      	str	r1, [r7, #8]
 8012f06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012f0a:	b2d2      	uxtb	r2, r2
 8012f0c:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012f12:	b29b      	uxth	r3, r3
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d19d      	bne.n	8012e54 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	2220      	movs	r2, #32
 8012f1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8012f20:	2300      	movs	r3, #0
 8012f22:	e000      	b.n	8012f26 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8012f24:	2302      	movs	r3, #2
  }
}
 8012f26:	4618      	mov	r0, r3
 8012f28:	3718      	adds	r7, #24
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}

08012f2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8012f2e:	b580      	push	{r7, lr}
 8012f30:	b084      	sub	sp, #16
 8012f32:	af00      	add	r7, sp, #0
 8012f34:	60f8      	str	r0, [r7, #12]
 8012f36:	60b9      	str	r1, [r7, #8]
 8012f38:	603b      	str	r3, [r7, #0]
 8012f3a:	4613      	mov	r3, r2
 8012f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012f3e:	e02c      	b.n	8012f9a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012f40:	69bb      	ldr	r3, [r7, #24]
 8012f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f46:	d028      	beq.n	8012f9a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8012f48:	69bb      	ldr	r3, [r7, #24]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d007      	beq.n	8012f5e <UART_WaitOnFlagUntilTimeout+0x30>
 8012f4e:	f7fb fc01 	bl	800e754 <HAL_GetTick>
 8012f52:	4602      	mov	r2, r0
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	1ad3      	subs	r3, r2, r3
 8012f58:	69ba      	ldr	r2, [r7, #24]
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d21d      	bcs.n	8012f9a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	68da      	ldr	r2, [r3, #12]
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012f6c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	695a      	ldr	r2, [r3, #20]
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	f022 0201 	bic.w	r2, r2, #1
 8012f7c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	2220      	movs	r2, #32
 8012f82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	2220      	movs	r2, #32
 8012f8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	2200      	movs	r2, #0
 8012f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8012f96:	2303      	movs	r3, #3
 8012f98:	e00f      	b.n	8012fba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	681a      	ldr	r2, [r3, #0]
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	4013      	ands	r3, r2
 8012fa4:	68ba      	ldr	r2, [r7, #8]
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	bf0c      	ite	eq
 8012faa:	2301      	moveq	r3, #1
 8012fac:	2300      	movne	r3, #0
 8012fae:	b2db      	uxtb	r3, r3
 8012fb0:	461a      	mov	r2, r3
 8012fb2:	79fb      	ldrb	r3, [r7, #7]
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d0c3      	beq.n	8012f40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012fb8:	2300      	movs	r3, #0
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3710      	adds	r7, #16
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
	...

08012fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fc8:	b085      	sub	sp, #20
 8012fca:	af00      	add	r7, sp, #0
 8012fcc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	691b      	ldr	r3, [r3, #16]
 8012fd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	68da      	ldr	r2, [r3, #12]
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	430a      	orrs	r2, r1
 8012fe2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	689a      	ldr	r2, [r3, #8]
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	691b      	ldr	r3, [r3, #16]
 8012fec:	431a      	orrs	r2, r3
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	695b      	ldr	r3, [r3, #20]
 8012ff2:	431a      	orrs	r2, r3
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	69db      	ldr	r3, [r3, #28]
 8012ff8:	4313      	orrs	r3, r2
 8012ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	68db      	ldr	r3, [r3, #12]
 8013002:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8013006:	f023 030c 	bic.w	r3, r3, #12
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	6812      	ldr	r2, [r2, #0]
 801300e:	68f9      	ldr	r1, [r7, #12]
 8013010:	430b      	orrs	r3, r1
 8013012:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	695b      	ldr	r3, [r3, #20]
 801301a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	699a      	ldr	r2, [r3, #24]
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	430a      	orrs	r2, r1
 8013028:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	69db      	ldr	r3, [r3, #28]
 801302e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013032:	f040 818b 	bne.w	801334c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	4ac1      	ldr	r2, [pc, #772]	; (8013340 <UART_SetConfig+0x37c>)
 801303c:	4293      	cmp	r3, r2
 801303e:	d005      	beq.n	801304c <UART_SetConfig+0x88>
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	4abf      	ldr	r2, [pc, #764]	; (8013344 <UART_SetConfig+0x380>)
 8013046:	4293      	cmp	r3, r2
 8013048:	f040 80bd 	bne.w	80131c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801304c:	f7fd fce2 	bl	8010a14 <HAL_RCC_GetPCLK2Freq>
 8013050:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	461d      	mov	r5, r3
 8013056:	f04f 0600 	mov.w	r6, #0
 801305a:	46a8      	mov	r8, r5
 801305c:	46b1      	mov	r9, r6
 801305e:	eb18 0308 	adds.w	r3, r8, r8
 8013062:	eb49 0409 	adc.w	r4, r9, r9
 8013066:	4698      	mov	r8, r3
 8013068:	46a1      	mov	r9, r4
 801306a:	eb18 0805 	adds.w	r8, r8, r5
 801306e:	eb49 0906 	adc.w	r9, r9, r6
 8013072:	f04f 0100 	mov.w	r1, #0
 8013076:	f04f 0200 	mov.w	r2, #0
 801307a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801307e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013082:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013086:	4688      	mov	r8, r1
 8013088:	4691      	mov	r9, r2
 801308a:	eb18 0005 	adds.w	r0, r8, r5
 801308e:	eb49 0106 	adc.w	r1, r9, r6
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	461d      	mov	r5, r3
 8013098:	f04f 0600 	mov.w	r6, #0
 801309c:	196b      	adds	r3, r5, r5
 801309e:	eb46 0406 	adc.w	r4, r6, r6
 80130a2:	461a      	mov	r2, r3
 80130a4:	4623      	mov	r3, r4
 80130a6:	f7f5 fd27 	bl	8008af8 <__aeabi_uldivmod>
 80130aa:	4603      	mov	r3, r0
 80130ac:	460c      	mov	r4, r1
 80130ae:	461a      	mov	r2, r3
 80130b0:	4ba5      	ldr	r3, [pc, #660]	; (8013348 <UART_SetConfig+0x384>)
 80130b2:	fba3 2302 	umull	r2, r3, r3, r2
 80130b6:	095b      	lsrs	r3, r3, #5
 80130b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80130bc:	68bb      	ldr	r3, [r7, #8]
 80130be:	461d      	mov	r5, r3
 80130c0:	f04f 0600 	mov.w	r6, #0
 80130c4:	46a9      	mov	r9, r5
 80130c6:	46b2      	mov	sl, r6
 80130c8:	eb19 0309 	adds.w	r3, r9, r9
 80130cc:	eb4a 040a 	adc.w	r4, sl, sl
 80130d0:	4699      	mov	r9, r3
 80130d2:	46a2      	mov	sl, r4
 80130d4:	eb19 0905 	adds.w	r9, r9, r5
 80130d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80130dc:	f04f 0100 	mov.w	r1, #0
 80130e0:	f04f 0200 	mov.w	r2, #0
 80130e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80130e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80130ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80130f0:	4689      	mov	r9, r1
 80130f2:	4692      	mov	sl, r2
 80130f4:	eb19 0005 	adds.w	r0, r9, r5
 80130f8:	eb4a 0106 	adc.w	r1, sl, r6
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	685b      	ldr	r3, [r3, #4]
 8013100:	461d      	mov	r5, r3
 8013102:	f04f 0600 	mov.w	r6, #0
 8013106:	196b      	adds	r3, r5, r5
 8013108:	eb46 0406 	adc.w	r4, r6, r6
 801310c:	461a      	mov	r2, r3
 801310e:	4623      	mov	r3, r4
 8013110:	f7f5 fcf2 	bl	8008af8 <__aeabi_uldivmod>
 8013114:	4603      	mov	r3, r0
 8013116:	460c      	mov	r4, r1
 8013118:	461a      	mov	r2, r3
 801311a:	4b8b      	ldr	r3, [pc, #556]	; (8013348 <UART_SetConfig+0x384>)
 801311c:	fba3 1302 	umull	r1, r3, r3, r2
 8013120:	095b      	lsrs	r3, r3, #5
 8013122:	2164      	movs	r1, #100	; 0x64
 8013124:	fb01 f303 	mul.w	r3, r1, r3
 8013128:	1ad3      	subs	r3, r2, r3
 801312a:	00db      	lsls	r3, r3, #3
 801312c:	3332      	adds	r3, #50	; 0x32
 801312e:	4a86      	ldr	r2, [pc, #536]	; (8013348 <UART_SetConfig+0x384>)
 8013130:	fba2 2303 	umull	r2, r3, r2, r3
 8013134:	095b      	lsrs	r3, r3, #5
 8013136:	005b      	lsls	r3, r3, #1
 8013138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801313c:	4498      	add	r8, r3
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	461d      	mov	r5, r3
 8013142:	f04f 0600 	mov.w	r6, #0
 8013146:	46a9      	mov	r9, r5
 8013148:	46b2      	mov	sl, r6
 801314a:	eb19 0309 	adds.w	r3, r9, r9
 801314e:	eb4a 040a 	adc.w	r4, sl, sl
 8013152:	4699      	mov	r9, r3
 8013154:	46a2      	mov	sl, r4
 8013156:	eb19 0905 	adds.w	r9, r9, r5
 801315a:	eb4a 0a06 	adc.w	sl, sl, r6
 801315e:	f04f 0100 	mov.w	r1, #0
 8013162:	f04f 0200 	mov.w	r2, #0
 8013166:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801316a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801316e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013172:	4689      	mov	r9, r1
 8013174:	4692      	mov	sl, r2
 8013176:	eb19 0005 	adds.w	r0, r9, r5
 801317a:	eb4a 0106 	adc.w	r1, sl, r6
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	461d      	mov	r5, r3
 8013184:	f04f 0600 	mov.w	r6, #0
 8013188:	196b      	adds	r3, r5, r5
 801318a:	eb46 0406 	adc.w	r4, r6, r6
 801318e:	461a      	mov	r2, r3
 8013190:	4623      	mov	r3, r4
 8013192:	f7f5 fcb1 	bl	8008af8 <__aeabi_uldivmod>
 8013196:	4603      	mov	r3, r0
 8013198:	460c      	mov	r4, r1
 801319a:	461a      	mov	r2, r3
 801319c:	4b6a      	ldr	r3, [pc, #424]	; (8013348 <UART_SetConfig+0x384>)
 801319e:	fba3 1302 	umull	r1, r3, r3, r2
 80131a2:	095b      	lsrs	r3, r3, #5
 80131a4:	2164      	movs	r1, #100	; 0x64
 80131a6:	fb01 f303 	mul.w	r3, r1, r3
 80131aa:	1ad3      	subs	r3, r2, r3
 80131ac:	00db      	lsls	r3, r3, #3
 80131ae:	3332      	adds	r3, #50	; 0x32
 80131b0:	4a65      	ldr	r2, [pc, #404]	; (8013348 <UART_SetConfig+0x384>)
 80131b2:	fba2 2303 	umull	r2, r3, r2, r3
 80131b6:	095b      	lsrs	r3, r3, #5
 80131b8:	f003 0207 	and.w	r2, r3, #7
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	4442      	add	r2, r8
 80131c2:	609a      	str	r2, [r3, #8]
 80131c4:	e26f      	b.n	80136a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80131c6:	f7fd fc11 	bl	80109ec <HAL_RCC_GetPCLK1Freq>
 80131ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	461d      	mov	r5, r3
 80131d0:	f04f 0600 	mov.w	r6, #0
 80131d4:	46a8      	mov	r8, r5
 80131d6:	46b1      	mov	r9, r6
 80131d8:	eb18 0308 	adds.w	r3, r8, r8
 80131dc:	eb49 0409 	adc.w	r4, r9, r9
 80131e0:	4698      	mov	r8, r3
 80131e2:	46a1      	mov	r9, r4
 80131e4:	eb18 0805 	adds.w	r8, r8, r5
 80131e8:	eb49 0906 	adc.w	r9, r9, r6
 80131ec:	f04f 0100 	mov.w	r1, #0
 80131f0:	f04f 0200 	mov.w	r2, #0
 80131f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80131f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80131fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013200:	4688      	mov	r8, r1
 8013202:	4691      	mov	r9, r2
 8013204:	eb18 0005 	adds.w	r0, r8, r5
 8013208:	eb49 0106 	adc.w	r1, r9, r6
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	685b      	ldr	r3, [r3, #4]
 8013210:	461d      	mov	r5, r3
 8013212:	f04f 0600 	mov.w	r6, #0
 8013216:	196b      	adds	r3, r5, r5
 8013218:	eb46 0406 	adc.w	r4, r6, r6
 801321c:	461a      	mov	r2, r3
 801321e:	4623      	mov	r3, r4
 8013220:	f7f5 fc6a 	bl	8008af8 <__aeabi_uldivmod>
 8013224:	4603      	mov	r3, r0
 8013226:	460c      	mov	r4, r1
 8013228:	461a      	mov	r2, r3
 801322a:	4b47      	ldr	r3, [pc, #284]	; (8013348 <UART_SetConfig+0x384>)
 801322c:	fba3 2302 	umull	r2, r3, r3, r2
 8013230:	095b      	lsrs	r3, r3, #5
 8013232:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	461d      	mov	r5, r3
 801323a:	f04f 0600 	mov.w	r6, #0
 801323e:	46a9      	mov	r9, r5
 8013240:	46b2      	mov	sl, r6
 8013242:	eb19 0309 	adds.w	r3, r9, r9
 8013246:	eb4a 040a 	adc.w	r4, sl, sl
 801324a:	4699      	mov	r9, r3
 801324c:	46a2      	mov	sl, r4
 801324e:	eb19 0905 	adds.w	r9, r9, r5
 8013252:	eb4a 0a06 	adc.w	sl, sl, r6
 8013256:	f04f 0100 	mov.w	r1, #0
 801325a:	f04f 0200 	mov.w	r2, #0
 801325e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013262:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013266:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801326a:	4689      	mov	r9, r1
 801326c:	4692      	mov	sl, r2
 801326e:	eb19 0005 	adds.w	r0, r9, r5
 8013272:	eb4a 0106 	adc.w	r1, sl, r6
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	685b      	ldr	r3, [r3, #4]
 801327a:	461d      	mov	r5, r3
 801327c:	f04f 0600 	mov.w	r6, #0
 8013280:	196b      	adds	r3, r5, r5
 8013282:	eb46 0406 	adc.w	r4, r6, r6
 8013286:	461a      	mov	r2, r3
 8013288:	4623      	mov	r3, r4
 801328a:	f7f5 fc35 	bl	8008af8 <__aeabi_uldivmod>
 801328e:	4603      	mov	r3, r0
 8013290:	460c      	mov	r4, r1
 8013292:	461a      	mov	r2, r3
 8013294:	4b2c      	ldr	r3, [pc, #176]	; (8013348 <UART_SetConfig+0x384>)
 8013296:	fba3 1302 	umull	r1, r3, r3, r2
 801329a:	095b      	lsrs	r3, r3, #5
 801329c:	2164      	movs	r1, #100	; 0x64
 801329e:	fb01 f303 	mul.w	r3, r1, r3
 80132a2:	1ad3      	subs	r3, r2, r3
 80132a4:	00db      	lsls	r3, r3, #3
 80132a6:	3332      	adds	r3, #50	; 0x32
 80132a8:	4a27      	ldr	r2, [pc, #156]	; (8013348 <UART_SetConfig+0x384>)
 80132aa:	fba2 2303 	umull	r2, r3, r2, r3
 80132ae:	095b      	lsrs	r3, r3, #5
 80132b0:	005b      	lsls	r3, r3, #1
 80132b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80132b6:	4498      	add	r8, r3
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	461d      	mov	r5, r3
 80132bc:	f04f 0600 	mov.w	r6, #0
 80132c0:	46a9      	mov	r9, r5
 80132c2:	46b2      	mov	sl, r6
 80132c4:	eb19 0309 	adds.w	r3, r9, r9
 80132c8:	eb4a 040a 	adc.w	r4, sl, sl
 80132cc:	4699      	mov	r9, r3
 80132ce:	46a2      	mov	sl, r4
 80132d0:	eb19 0905 	adds.w	r9, r9, r5
 80132d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80132d8:	f04f 0100 	mov.w	r1, #0
 80132dc:	f04f 0200 	mov.w	r2, #0
 80132e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80132e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80132e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80132ec:	4689      	mov	r9, r1
 80132ee:	4692      	mov	sl, r2
 80132f0:	eb19 0005 	adds.w	r0, r9, r5
 80132f4:	eb4a 0106 	adc.w	r1, sl, r6
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	685b      	ldr	r3, [r3, #4]
 80132fc:	461d      	mov	r5, r3
 80132fe:	f04f 0600 	mov.w	r6, #0
 8013302:	196b      	adds	r3, r5, r5
 8013304:	eb46 0406 	adc.w	r4, r6, r6
 8013308:	461a      	mov	r2, r3
 801330a:	4623      	mov	r3, r4
 801330c:	f7f5 fbf4 	bl	8008af8 <__aeabi_uldivmod>
 8013310:	4603      	mov	r3, r0
 8013312:	460c      	mov	r4, r1
 8013314:	461a      	mov	r2, r3
 8013316:	4b0c      	ldr	r3, [pc, #48]	; (8013348 <UART_SetConfig+0x384>)
 8013318:	fba3 1302 	umull	r1, r3, r3, r2
 801331c:	095b      	lsrs	r3, r3, #5
 801331e:	2164      	movs	r1, #100	; 0x64
 8013320:	fb01 f303 	mul.w	r3, r1, r3
 8013324:	1ad3      	subs	r3, r2, r3
 8013326:	00db      	lsls	r3, r3, #3
 8013328:	3332      	adds	r3, #50	; 0x32
 801332a:	4a07      	ldr	r2, [pc, #28]	; (8013348 <UART_SetConfig+0x384>)
 801332c:	fba2 2303 	umull	r2, r3, r2, r3
 8013330:	095b      	lsrs	r3, r3, #5
 8013332:	f003 0207 	and.w	r2, r3, #7
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	4442      	add	r2, r8
 801333c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801333e:	e1b2      	b.n	80136a6 <UART_SetConfig+0x6e2>
 8013340:	40011000 	.word	0x40011000
 8013344:	40011400 	.word	0x40011400
 8013348:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	4ad7      	ldr	r2, [pc, #860]	; (80136b0 <UART_SetConfig+0x6ec>)
 8013352:	4293      	cmp	r3, r2
 8013354:	d005      	beq.n	8013362 <UART_SetConfig+0x39e>
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	4ad6      	ldr	r2, [pc, #856]	; (80136b4 <UART_SetConfig+0x6f0>)
 801335c:	4293      	cmp	r3, r2
 801335e:	f040 80d1 	bne.w	8013504 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8013362:	f7fd fb57 	bl	8010a14 <HAL_RCC_GetPCLK2Freq>
 8013366:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	469a      	mov	sl, r3
 801336c:	f04f 0b00 	mov.w	fp, #0
 8013370:	46d0      	mov	r8, sl
 8013372:	46d9      	mov	r9, fp
 8013374:	eb18 0308 	adds.w	r3, r8, r8
 8013378:	eb49 0409 	adc.w	r4, r9, r9
 801337c:	4698      	mov	r8, r3
 801337e:	46a1      	mov	r9, r4
 8013380:	eb18 080a 	adds.w	r8, r8, sl
 8013384:	eb49 090b 	adc.w	r9, r9, fp
 8013388:	f04f 0100 	mov.w	r1, #0
 801338c:	f04f 0200 	mov.w	r2, #0
 8013390:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013394:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013398:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801339c:	4688      	mov	r8, r1
 801339e:	4691      	mov	r9, r2
 80133a0:	eb1a 0508 	adds.w	r5, sl, r8
 80133a4:	eb4b 0609 	adc.w	r6, fp, r9
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	685b      	ldr	r3, [r3, #4]
 80133ac:	4619      	mov	r1, r3
 80133ae:	f04f 0200 	mov.w	r2, #0
 80133b2:	f04f 0300 	mov.w	r3, #0
 80133b6:	f04f 0400 	mov.w	r4, #0
 80133ba:	0094      	lsls	r4, r2, #2
 80133bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80133c0:	008b      	lsls	r3, r1, #2
 80133c2:	461a      	mov	r2, r3
 80133c4:	4623      	mov	r3, r4
 80133c6:	4628      	mov	r0, r5
 80133c8:	4631      	mov	r1, r6
 80133ca:	f7f5 fb95 	bl	8008af8 <__aeabi_uldivmod>
 80133ce:	4603      	mov	r3, r0
 80133d0:	460c      	mov	r4, r1
 80133d2:	461a      	mov	r2, r3
 80133d4:	4bb8      	ldr	r3, [pc, #736]	; (80136b8 <UART_SetConfig+0x6f4>)
 80133d6:	fba3 2302 	umull	r2, r3, r3, r2
 80133da:	095b      	lsrs	r3, r3, #5
 80133dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	469b      	mov	fp, r3
 80133e4:	f04f 0c00 	mov.w	ip, #0
 80133e8:	46d9      	mov	r9, fp
 80133ea:	46e2      	mov	sl, ip
 80133ec:	eb19 0309 	adds.w	r3, r9, r9
 80133f0:	eb4a 040a 	adc.w	r4, sl, sl
 80133f4:	4699      	mov	r9, r3
 80133f6:	46a2      	mov	sl, r4
 80133f8:	eb19 090b 	adds.w	r9, r9, fp
 80133fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013400:	f04f 0100 	mov.w	r1, #0
 8013404:	f04f 0200 	mov.w	r2, #0
 8013408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801340c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013410:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013414:	4689      	mov	r9, r1
 8013416:	4692      	mov	sl, r2
 8013418:	eb1b 0509 	adds.w	r5, fp, r9
 801341c:	eb4c 060a 	adc.w	r6, ip, sl
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	685b      	ldr	r3, [r3, #4]
 8013424:	4619      	mov	r1, r3
 8013426:	f04f 0200 	mov.w	r2, #0
 801342a:	f04f 0300 	mov.w	r3, #0
 801342e:	f04f 0400 	mov.w	r4, #0
 8013432:	0094      	lsls	r4, r2, #2
 8013434:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013438:	008b      	lsls	r3, r1, #2
 801343a:	461a      	mov	r2, r3
 801343c:	4623      	mov	r3, r4
 801343e:	4628      	mov	r0, r5
 8013440:	4631      	mov	r1, r6
 8013442:	f7f5 fb59 	bl	8008af8 <__aeabi_uldivmod>
 8013446:	4603      	mov	r3, r0
 8013448:	460c      	mov	r4, r1
 801344a:	461a      	mov	r2, r3
 801344c:	4b9a      	ldr	r3, [pc, #616]	; (80136b8 <UART_SetConfig+0x6f4>)
 801344e:	fba3 1302 	umull	r1, r3, r3, r2
 8013452:	095b      	lsrs	r3, r3, #5
 8013454:	2164      	movs	r1, #100	; 0x64
 8013456:	fb01 f303 	mul.w	r3, r1, r3
 801345a:	1ad3      	subs	r3, r2, r3
 801345c:	011b      	lsls	r3, r3, #4
 801345e:	3332      	adds	r3, #50	; 0x32
 8013460:	4a95      	ldr	r2, [pc, #596]	; (80136b8 <UART_SetConfig+0x6f4>)
 8013462:	fba2 2303 	umull	r2, r3, r2, r3
 8013466:	095b      	lsrs	r3, r3, #5
 8013468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801346c:	4498      	add	r8, r3
 801346e:	68bb      	ldr	r3, [r7, #8]
 8013470:	469b      	mov	fp, r3
 8013472:	f04f 0c00 	mov.w	ip, #0
 8013476:	46d9      	mov	r9, fp
 8013478:	46e2      	mov	sl, ip
 801347a:	eb19 0309 	adds.w	r3, r9, r9
 801347e:	eb4a 040a 	adc.w	r4, sl, sl
 8013482:	4699      	mov	r9, r3
 8013484:	46a2      	mov	sl, r4
 8013486:	eb19 090b 	adds.w	r9, r9, fp
 801348a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801348e:	f04f 0100 	mov.w	r1, #0
 8013492:	f04f 0200 	mov.w	r2, #0
 8013496:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801349a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801349e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80134a2:	4689      	mov	r9, r1
 80134a4:	4692      	mov	sl, r2
 80134a6:	eb1b 0509 	adds.w	r5, fp, r9
 80134aa:	eb4c 060a 	adc.w	r6, ip, sl
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	685b      	ldr	r3, [r3, #4]
 80134b2:	4619      	mov	r1, r3
 80134b4:	f04f 0200 	mov.w	r2, #0
 80134b8:	f04f 0300 	mov.w	r3, #0
 80134bc:	f04f 0400 	mov.w	r4, #0
 80134c0:	0094      	lsls	r4, r2, #2
 80134c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80134c6:	008b      	lsls	r3, r1, #2
 80134c8:	461a      	mov	r2, r3
 80134ca:	4623      	mov	r3, r4
 80134cc:	4628      	mov	r0, r5
 80134ce:	4631      	mov	r1, r6
 80134d0:	f7f5 fb12 	bl	8008af8 <__aeabi_uldivmod>
 80134d4:	4603      	mov	r3, r0
 80134d6:	460c      	mov	r4, r1
 80134d8:	461a      	mov	r2, r3
 80134da:	4b77      	ldr	r3, [pc, #476]	; (80136b8 <UART_SetConfig+0x6f4>)
 80134dc:	fba3 1302 	umull	r1, r3, r3, r2
 80134e0:	095b      	lsrs	r3, r3, #5
 80134e2:	2164      	movs	r1, #100	; 0x64
 80134e4:	fb01 f303 	mul.w	r3, r1, r3
 80134e8:	1ad3      	subs	r3, r2, r3
 80134ea:	011b      	lsls	r3, r3, #4
 80134ec:	3332      	adds	r3, #50	; 0x32
 80134ee:	4a72      	ldr	r2, [pc, #456]	; (80136b8 <UART_SetConfig+0x6f4>)
 80134f0:	fba2 2303 	umull	r2, r3, r2, r3
 80134f4:	095b      	lsrs	r3, r3, #5
 80134f6:	f003 020f 	and.w	r2, r3, #15
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	4442      	add	r2, r8
 8013500:	609a      	str	r2, [r3, #8]
 8013502:	e0d0      	b.n	80136a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8013504:	f7fd fa72 	bl	80109ec <HAL_RCC_GetPCLK1Freq>
 8013508:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	469a      	mov	sl, r3
 801350e:	f04f 0b00 	mov.w	fp, #0
 8013512:	46d0      	mov	r8, sl
 8013514:	46d9      	mov	r9, fp
 8013516:	eb18 0308 	adds.w	r3, r8, r8
 801351a:	eb49 0409 	adc.w	r4, r9, r9
 801351e:	4698      	mov	r8, r3
 8013520:	46a1      	mov	r9, r4
 8013522:	eb18 080a 	adds.w	r8, r8, sl
 8013526:	eb49 090b 	adc.w	r9, r9, fp
 801352a:	f04f 0100 	mov.w	r1, #0
 801352e:	f04f 0200 	mov.w	r2, #0
 8013532:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013536:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801353a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801353e:	4688      	mov	r8, r1
 8013540:	4691      	mov	r9, r2
 8013542:	eb1a 0508 	adds.w	r5, sl, r8
 8013546:	eb4b 0609 	adc.w	r6, fp, r9
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	685b      	ldr	r3, [r3, #4]
 801354e:	4619      	mov	r1, r3
 8013550:	f04f 0200 	mov.w	r2, #0
 8013554:	f04f 0300 	mov.w	r3, #0
 8013558:	f04f 0400 	mov.w	r4, #0
 801355c:	0094      	lsls	r4, r2, #2
 801355e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013562:	008b      	lsls	r3, r1, #2
 8013564:	461a      	mov	r2, r3
 8013566:	4623      	mov	r3, r4
 8013568:	4628      	mov	r0, r5
 801356a:	4631      	mov	r1, r6
 801356c:	f7f5 fac4 	bl	8008af8 <__aeabi_uldivmod>
 8013570:	4603      	mov	r3, r0
 8013572:	460c      	mov	r4, r1
 8013574:	461a      	mov	r2, r3
 8013576:	4b50      	ldr	r3, [pc, #320]	; (80136b8 <UART_SetConfig+0x6f4>)
 8013578:	fba3 2302 	umull	r2, r3, r3, r2
 801357c:	095b      	lsrs	r3, r3, #5
 801357e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	469b      	mov	fp, r3
 8013586:	f04f 0c00 	mov.w	ip, #0
 801358a:	46d9      	mov	r9, fp
 801358c:	46e2      	mov	sl, ip
 801358e:	eb19 0309 	adds.w	r3, r9, r9
 8013592:	eb4a 040a 	adc.w	r4, sl, sl
 8013596:	4699      	mov	r9, r3
 8013598:	46a2      	mov	sl, r4
 801359a:	eb19 090b 	adds.w	r9, r9, fp
 801359e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80135a2:	f04f 0100 	mov.w	r1, #0
 80135a6:	f04f 0200 	mov.w	r2, #0
 80135aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80135ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80135b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80135b6:	4689      	mov	r9, r1
 80135b8:	4692      	mov	sl, r2
 80135ba:	eb1b 0509 	adds.w	r5, fp, r9
 80135be:	eb4c 060a 	adc.w	r6, ip, sl
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	685b      	ldr	r3, [r3, #4]
 80135c6:	4619      	mov	r1, r3
 80135c8:	f04f 0200 	mov.w	r2, #0
 80135cc:	f04f 0300 	mov.w	r3, #0
 80135d0:	f04f 0400 	mov.w	r4, #0
 80135d4:	0094      	lsls	r4, r2, #2
 80135d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80135da:	008b      	lsls	r3, r1, #2
 80135dc:	461a      	mov	r2, r3
 80135de:	4623      	mov	r3, r4
 80135e0:	4628      	mov	r0, r5
 80135e2:	4631      	mov	r1, r6
 80135e4:	f7f5 fa88 	bl	8008af8 <__aeabi_uldivmod>
 80135e8:	4603      	mov	r3, r0
 80135ea:	460c      	mov	r4, r1
 80135ec:	461a      	mov	r2, r3
 80135ee:	4b32      	ldr	r3, [pc, #200]	; (80136b8 <UART_SetConfig+0x6f4>)
 80135f0:	fba3 1302 	umull	r1, r3, r3, r2
 80135f4:	095b      	lsrs	r3, r3, #5
 80135f6:	2164      	movs	r1, #100	; 0x64
 80135f8:	fb01 f303 	mul.w	r3, r1, r3
 80135fc:	1ad3      	subs	r3, r2, r3
 80135fe:	011b      	lsls	r3, r3, #4
 8013600:	3332      	adds	r3, #50	; 0x32
 8013602:	4a2d      	ldr	r2, [pc, #180]	; (80136b8 <UART_SetConfig+0x6f4>)
 8013604:	fba2 2303 	umull	r2, r3, r2, r3
 8013608:	095b      	lsrs	r3, r3, #5
 801360a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801360e:	4498      	add	r8, r3
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	469b      	mov	fp, r3
 8013614:	f04f 0c00 	mov.w	ip, #0
 8013618:	46d9      	mov	r9, fp
 801361a:	46e2      	mov	sl, ip
 801361c:	eb19 0309 	adds.w	r3, r9, r9
 8013620:	eb4a 040a 	adc.w	r4, sl, sl
 8013624:	4699      	mov	r9, r3
 8013626:	46a2      	mov	sl, r4
 8013628:	eb19 090b 	adds.w	r9, r9, fp
 801362c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013630:	f04f 0100 	mov.w	r1, #0
 8013634:	f04f 0200 	mov.w	r2, #0
 8013638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801363c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013640:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013644:	4689      	mov	r9, r1
 8013646:	4692      	mov	sl, r2
 8013648:	eb1b 0509 	adds.w	r5, fp, r9
 801364c:	eb4c 060a 	adc.w	r6, ip, sl
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	685b      	ldr	r3, [r3, #4]
 8013654:	4619      	mov	r1, r3
 8013656:	f04f 0200 	mov.w	r2, #0
 801365a:	f04f 0300 	mov.w	r3, #0
 801365e:	f04f 0400 	mov.w	r4, #0
 8013662:	0094      	lsls	r4, r2, #2
 8013664:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013668:	008b      	lsls	r3, r1, #2
 801366a:	461a      	mov	r2, r3
 801366c:	4623      	mov	r3, r4
 801366e:	4628      	mov	r0, r5
 8013670:	4631      	mov	r1, r6
 8013672:	f7f5 fa41 	bl	8008af8 <__aeabi_uldivmod>
 8013676:	4603      	mov	r3, r0
 8013678:	460c      	mov	r4, r1
 801367a:	461a      	mov	r2, r3
 801367c:	4b0e      	ldr	r3, [pc, #56]	; (80136b8 <UART_SetConfig+0x6f4>)
 801367e:	fba3 1302 	umull	r1, r3, r3, r2
 8013682:	095b      	lsrs	r3, r3, #5
 8013684:	2164      	movs	r1, #100	; 0x64
 8013686:	fb01 f303 	mul.w	r3, r1, r3
 801368a:	1ad3      	subs	r3, r2, r3
 801368c:	011b      	lsls	r3, r3, #4
 801368e:	3332      	adds	r3, #50	; 0x32
 8013690:	4a09      	ldr	r2, [pc, #36]	; (80136b8 <UART_SetConfig+0x6f4>)
 8013692:	fba2 2303 	umull	r2, r3, r2, r3
 8013696:	095b      	lsrs	r3, r3, #5
 8013698:	f003 020f 	and.w	r2, r3, #15
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	4442      	add	r2, r8
 80136a2:	609a      	str	r2, [r3, #8]
}
 80136a4:	e7ff      	b.n	80136a6 <UART_SetConfig+0x6e2>
 80136a6:	bf00      	nop
 80136a8:	3714      	adds	r7, #20
 80136aa:	46bd      	mov	sp, r7
 80136ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136b0:	40011000 	.word	0x40011000
 80136b4:	40011400 	.word	0x40011400
 80136b8:	51eb851f 	.word	0x51eb851f

080136bc <round>:
 80136bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136be:	ec57 6b10 	vmov	r6, r7, d0
 80136c2:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80136c6:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80136ca:	2c13      	cmp	r4, #19
 80136cc:	463b      	mov	r3, r7
 80136ce:	463d      	mov	r5, r7
 80136d0:	dc17      	bgt.n	8013702 <round+0x46>
 80136d2:	2c00      	cmp	r4, #0
 80136d4:	da09      	bge.n	80136ea <round+0x2e>
 80136d6:	3401      	adds	r4, #1
 80136d8:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80136dc:	d103      	bne.n	80136e6 <round+0x2a>
 80136de:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80136e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80136e6:	2100      	movs	r1, #0
 80136e8:	e02c      	b.n	8013744 <round+0x88>
 80136ea:	4a18      	ldr	r2, [pc, #96]	; (801374c <round+0x90>)
 80136ec:	4122      	asrs	r2, r4
 80136ee:	4217      	tst	r7, r2
 80136f0:	d100      	bne.n	80136f4 <round+0x38>
 80136f2:	b19e      	cbz	r6, 801371c <round+0x60>
 80136f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80136f8:	4123      	asrs	r3, r4
 80136fa:	442b      	add	r3, r5
 80136fc:	ea23 0302 	bic.w	r3, r3, r2
 8013700:	e7f1      	b.n	80136e6 <round+0x2a>
 8013702:	2c33      	cmp	r4, #51	; 0x33
 8013704:	dd0d      	ble.n	8013722 <round+0x66>
 8013706:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801370a:	d107      	bne.n	801371c <round+0x60>
 801370c:	4630      	mov	r0, r6
 801370e:	4639      	mov	r1, r7
 8013710:	ee10 2a10 	vmov	r2, s0
 8013714:	f7f4 fcf2 	bl	80080fc <__adddf3>
 8013718:	4606      	mov	r6, r0
 801371a:	460f      	mov	r7, r1
 801371c:	ec47 6b10 	vmov	d0, r6, r7
 8013720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013722:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8013726:	f04f 30ff 	mov.w	r0, #4294967295
 801372a:	40d0      	lsrs	r0, r2
 801372c:	4206      	tst	r6, r0
 801372e:	d0f5      	beq.n	801371c <round+0x60>
 8013730:	2201      	movs	r2, #1
 8013732:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8013736:	fa02 f404 	lsl.w	r4, r2, r4
 801373a:	1931      	adds	r1, r6, r4
 801373c:	bf28      	it	cs
 801373e:	189b      	addcs	r3, r3, r2
 8013740:	ea21 0100 	bic.w	r1, r1, r0
 8013744:	461f      	mov	r7, r3
 8013746:	460e      	mov	r6, r1
 8013748:	e7e8      	b.n	801371c <round+0x60>
 801374a:	bf00      	nop
 801374c:	000fffff 	.word	0x000fffff

08013750 <__errno>:
 8013750:	4b01      	ldr	r3, [pc, #4]	; (8013758 <__errno+0x8>)
 8013752:	6818      	ldr	r0, [r3, #0]
 8013754:	4770      	bx	lr
 8013756:	bf00      	nop
 8013758:	20000038 	.word	0x20000038

0801375c <__sflush_r>:
 801375c:	898a      	ldrh	r2, [r1, #12]
 801375e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013762:	4605      	mov	r5, r0
 8013764:	0710      	lsls	r0, r2, #28
 8013766:	460c      	mov	r4, r1
 8013768:	d458      	bmi.n	801381c <__sflush_r+0xc0>
 801376a:	684b      	ldr	r3, [r1, #4]
 801376c:	2b00      	cmp	r3, #0
 801376e:	dc05      	bgt.n	801377c <__sflush_r+0x20>
 8013770:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013772:	2b00      	cmp	r3, #0
 8013774:	dc02      	bgt.n	801377c <__sflush_r+0x20>
 8013776:	2000      	movs	r0, #0
 8013778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801377c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801377e:	2e00      	cmp	r6, #0
 8013780:	d0f9      	beq.n	8013776 <__sflush_r+0x1a>
 8013782:	2300      	movs	r3, #0
 8013784:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013788:	682f      	ldr	r7, [r5, #0]
 801378a:	6a21      	ldr	r1, [r4, #32]
 801378c:	602b      	str	r3, [r5, #0]
 801378e:	d032      	beq.n	80137f6 <__sflush_r+0x9a>
 8013790:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013792:	89a3      	ldrh	r3, [r4, #12]
 8013794:	075a      	lsls	r2, r3, #29
 8013796:	d505      	bpl.n	80137a4 <__sflush_r+0x48>
 8013798:	6863      	ldr	r3, [r4, #4]
 801379a:	1ac0      	subs	r0, r0, r3
 801379c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801379e:	b10b      	cbz	r3, 80137a4 <__sflush_r+0x48>
 80137a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80137a2:	1ac0      	subs	r0, r0, r3
 80137a4:	2300      	movs	r3, #0
 80137a6:	4602      	mov	r2, r0
 80137a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80137aa:	6a21      	ldr	r1, [r4, #32]
 80137ac:	4628      	mov	r0, r5
 80137ae:	47b0      	blx	r6
 80137b0:	1c43      	adds	r3, r0, #1
 80137b2:	89a3      	ldrh	r3, [r4, #12]
 80137b4:	d106      	bne.n	80137c4 <__sflush_r+0x68>
 80137b6:	6829      	ldr	r1, [r5, #0]
 80137b8:	291d      	cmp	r1, #29
 80137ba:	d848      	bhi.n	801384e <__sflush_r+0xf2>
 80137bc:	4a29      	ldr	r2, [pc, #164]	; (8013864 <__sflush_r+0x108>)
 80137be:	40ca      	lsrs	r2, r1
 80137c0:	07d6      	lsls	r6, r2, #31
 80137c2:	d544      	bpl.n	801384e <__sflush_r+0xf2>
 80137c4:	2200      	movs	r2, #0
 80137c6:	6062      	str	r2, [r4, #4]
 80137c8:	04d9      	lsls	r1, r3, #19
 80137ca:	6922      	ldr	r2, [r4, #16]
 80137cc:	6022      	str	r2, [r4, #0]
 80137ce:	d504      	bpl.n	80137da <__sflush_r+0x7e>
 80137d0:	1c42      	adds	r2, r0, #1
 80137d2:	d101      	bne.n	80137d8 <__sflush_r+0x7c>
 80137d4:	682b      	ldr	r3, [r5, #0]
 80137d6:	b903      	cbnz	r3, 80137da <__sflush_r+0x7e>
 80137d8:	6560      	str	r0, [r4, #84]	; 0x54
 80137da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80137dc:	602f      	str	r7, [r5, #0]
 80137de:	2900      	cmp	r1, #0
 80137e0:	d0c9      	beq.n	8013776 <__sflush_r+0x1a>
 80137e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80137e6:	4299      	cmp	r1, r3
 80137e8:	d002      	beq.n	80137f0 <__sflush_r+0x94>
 80137ea:	4628      	mov	r0, r5
 80137ec:	f000 f9fa 	bl	8013be4 <_free_r>
 80137f0:	2000      	movs	r0, #0
 80137f2:	6360      	str	r0, [r4, #52]	; 0x34
 80137f4:	e7c0      	b.n	8013778 <__sflush_r+0x1c>
 80137f6:	2301      	movs	r3, #1
 80137f8:	4628      	mov	r0, r5
 80137fa:	47b0      	blx	r6
 80137fc:	1c41      	adds	r1, r0, #1
 80137fe:	d1c8      	bne.n	8013792 <__sflush_r+0x36>
 8013800:	682b      	ldr	r3, [r5, #0]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d0c5      	beq.n	8013792 <__sflush_r+0x36>
 8013806:	2b1d      	cmp	r3, #29
 8013808:	d001      	beq.n	801380e <__sflush_r+0xb2>
 801380a:	2b16      	cmp	r3, #22
 801380c:	d101      	bne.n	8013812 <__sflush_r+0xb6>
 801380e:	602f      	str	r7, [r5, #0]
 8013810:	e7b1      	b.n	8013776 <__sflush_r+0x1a>
 8013812:	89a3      	ldrh	r3, [r4, #12]
 8013814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013818:	81a3      	strh	r3, [r4, #12]
 801381a:	e7ad      	b.n	8013778 <__sflush_r+0x1c>
 801381c:	690f      	ldr	r7, [r1, #16]
 801381e:	2f00      	cmp	r7, #0
 8013820:	d0a9      	beq.n	8013776 <__sflush_r+0x1a>
 8013822:	0793      	lsls	r3, r2, #30
 8013824:	680e      	ldr	r6, [r1, #0]
 8013826:	bf08      	it	eq
 8013828:	694b      	ldreq	r3, [r1, #20]
 801382a:	600f      	str	r7, [r1, #0]
 801382c:	bf18      	it	ne
 801382e:	2300      	movne	r3, #0
 8013830:	eba6 0807 	sub.w	r8, r6, r7
 8013834:	608b      	str	r3, [r1, #8]
 8013836:	f1b8 0f00 	cmp.w	r8, #0
 801383a:	dd9c      	ble.n	8013776 <__sflush_r+0x1a>
 801383c:	4643      	mov	r3, r8
 801383e:	463a      	mov	r2, r7
 8013840:	6a21      	ldr	r1, [r4, #32]
 8013842:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013844:	4628      	mov	r0, r5
 8013846:	47b0      	blx	r6
 8013848:	2800      	cmp	r0, #0
 801384a:	dc06      	bgt.n	801385a <__sflush_r+0xfe>
 801384c:	89a3      	ldrh	r3, [r4, #12]
 801384e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013852:	81a3      	strh	r3, [r4, #12]
 8013854:	f04f 30ff 	mov.w	r0, #4294967295
 8013858:	e78e      	b.n	8013778 <__sflush_r+0x1c>
 801385a:	4407      	add	r7, r0
 801385c:	eba8 0800 	sub.w	r8, r8, r0
 8013860:	e7e9      	b.n	8013836 <__sflush_r+0xda>
 8013862:	bf00      	nop
 8013864:	20400001 	.word	0x20400001

08013868 <_fflush_r>:
 8013868:	b538      	push	{r3, r4, r5, lr}
 801386a:	690b      	ldr	r3, [r1, #16]
 801386c:	4605      	mov	r5, r0
 801386e:	460c      	mov	r4, r1
 8013870:	b1db      	cbz	r3, 80138aa <_fflush_r+0x42>
 8013872:	b118      	cbz	r0, 801387c <_fflush_r+0x14>
 8013874:	6983      	ldr	r3, [r0, #24]
 8013876:	b90b      	cbnz	r3, 801387c <_fflush_r+0x14>
 8013878:	f000 f872 	bl	8013960 <__sinit>
 801387c:	4b0c      	ldr	r3, [pc, #48]	; (80138b0 <_fflush_r+0x48>)
 801387e:	429c      	cmp	r4, r3
 8013880:	d109      	bne.n	8013896 <_fflush_r+0x2e>
 8013882:	686c      	ldr	r4, [r5, #4]
 8013884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013888:	b17b      	cbz	r3, 80138aa <_fflush_r+0x42>
 801388a:	4621      	mov	r1, r4
 801388c:	4628      	mov	r0, r5
 801388e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013892:	f7ff bf63 	b.w	801375c <__sflush_r>
 8013896:	4b07      	ldr	r3, [pc, #28]	; (80138b4 <_fflush_r+0x4c>)
 8013898:	429c      	cmp	r4, r3
 801389a:	d101      	bne.n	80138a0 <_fflush_r+0x38>
 801389c:	68ac      	ldr	r4, [r5, #8]
 801389e:	e7f1      	b.n	8013884 <_fflush_r+0x1c>
 80138a0:	4b05      	ldr	r3, [pc, #20]	; (80138b8 <_fflush_r+0x50>)
 80138a2:	429c      	cmp	r4, r3
 80138a4:	bf08      	it	eq
 80138a6:	68ec      	ldreq	r4, [r5, #12]
 80138a8:	e7ec      	b.n	8013884 <_fflush_r+0x1c>
 80138aa:	2000      	movs	r0, #0
 80138ac:	bd38      	pop	{r3, r4, r5, pc}
 80138ae:	bf00      	nop
 80138b0:	08018fb0 	.word	0x08018fb0
 80138b4:	08018fd0 	.word	0x08018fd0
 80138b8:	08018f90 	.word	0x08018f90

080138bc <fflush>:
 80138bc:	4601      	mov	r1, r0
 80138be:	b920      	cbnz	r0, 80138ca <fflush+0xe>
 80138c0:	4b04      	ldr	r3, [pc, #16]	; (80138d4 <fflush+0x18>)
 80138c2:	4905      	ldr	r1, [pc, #20]	; (80138d8 <fflush+0x1c>)
 80138c4:	6818      	ldr	r0, [r3, #0]
 80138c6:	f000 b8d3 	b.w	8013a70 <_fwalk_reent>
 80138ca:	4b04      	ldr	r3, [pc, #16]	; (80138dc <fflush+0x20>)
 80138cc:	6818      	ldr	r0, [r3, #0]
 80138ce:	f7ff bfcb 	b.w	8013868 <_fflush_r>
 80138d2:	bf00      	nop
 80138d4:	08018ff0 	.word	0x08018ff0
 80138d8:	08013869 	.word	0x08013869
 80138dc:	20000038 	.word	0x20000038

080138e0 <std>:
 80138e0:	2300      	movs	r3, #0
 80138e2:	b510      	push	{r4, lr}
 80138e4:	4604      	mov	r4, r0
 80138e6:	e9c0 3300 	strd	r3, r3, [r0]
 80138ea:	6083      	str	r3, [r0, #8]
 80138ec:	8181      	strh	r1, [r0, #12]
 80138ee:	6643      	str	r3, [r0, #100]	; 0x64
 80138f0:	81c2      	strh	r2, [r0, #14]
 80138f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80138f6:	6183      	str	r3, [r0, #24]
 80138f8:	4619      	mov	r1, r3
 80138fa:	2208      	movs	r2, #8
 80138fc:	305c      	adds	r0, #92	; 0x5c
 80138fe:	f000 f968 	bl	8013bd2 <memset>
 8013902:	4b05      	ldr	r3, [pc, #20]	; (8013918 <std+0x38>)
 8013904:	6263      	str	r3, [r4, #36]	; 0x24
 8013906:	4b05      	ldr	r3, [pc, #20]	; (801391c <std+0x3c>)
 8013908:	62a3      	str	r3, [r4, #40]	; 0x28
 801390a:	4b05      	ldr	r3, [pc, #20]	; (8013920 <std+0x40>)
 801390c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801390e:	4b05      	ldr	r3, [pc, #20]	; (8013924 <std+0x44>)
 8013910:	6224      	str	r4, [r4, #32]
 8013912:	6323      	str	r3, [r4, #48]	; 0x30
 8013914:	bd10      	pop	{r4, pc}
 8013916:	bf00      	nop
 8013918:	08015945 	.word	0x08015945
 801391c:	08015967 	.word	0x08015967
 8013920:	0801599f 	.word	0x0801599f
 8013924:	080159c3 	.word	0x080159c3

08013928 <_cleanup_r>:
 8013928:	4901      	ldr	r1, [pc, #4]	; (8013930 <_cleanup_r+0x8>)
 801392a:	f000 b8a1 	b.w	8013a70 <_fwalk_reent>
 801392e:	bf00      	nop
 8013930:	08013869 	.word	0x08013869

08013934 <__sfmoreglue>:
 8013934:	b570      	push	{r4, r5, r6, lr}
 8013936:	1e4a      	subs	r2, r1, #1
 8013938:	2568      	movs	r5, #104	; 0x68
 801393a:	4355      	muls	r5, r2
 801393c:	460e      	mov	r6, r1
 801393e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013942:	f000 f99d 	bl	8013c80 <_malloc_r>
 8013946:	4604      	mov	r4, r0
 8013948:	b140      	cbz	r0, 801395c <__sfmoreglue+0x28>
 801394a:	2100      	movs	r1, #0
 801394c:	e9c0 1600 	strd	r1, r6, [r0]
 8013950:	300c      	adds	r0, #12
 8013952:	60a0      	str	r0, [r4, #8]
 8013954:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013958:	f000 f93b 	bl	8013bd2 <memset>
 801395c:	4620      	mov	r0, r4
 801395e:	bd70      	pop	{r4, r5, r6, pc}

08013960 <__sinit>:
 8013960:	6983      	ldr	r3, [r0, #24]
 8013962:	b510      	push	{r4, lr}
 8013964:	4604      	mov	r4, r0
 8013966:	bb33      	cbnz	r3, 80139b6 <__sinit+0x56>
 8013968:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801396c:	6503      	str	r3, [r0, #80]	; 0x50
 801396e:	4b12      	ldr	r3, [pc, #72]	; (80139b8 <__sinit+0x58>)
 8013970:	4a12      	ldr	r2, [pc, #72]	; (80139bc <__sinit+0x5c>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	6282      	str	r2, [r0, #40]	; 0x28
 8013976:	4298      	cmp	r0, r3
 8013978:	bf04      	itt	eq
 801397a:	2301      	moveq	r3, #1
 801397c:	6183      	streq	r3, [r0, #24]
 801397e:	f000 f81f 	bl	80139c0 <__sfp>
 8013982:	6060      	str	r0, [r4, #4]
 8013984:	4620      	mov	r0, r4
 8013986:	f000 f81b 	bl	80139c0 <__sfp>
 801398a:	60a0      	str	r0, [r4, #8]
 801398c:	4620      	mov	r0, r4
 801398e:	f000 f817 	bl	80139c0 <__sfp>
 8013992:	2200      	movs	r2, #0
 8013994:	60e0      	str	r0, [r4, #12]
 8013996:	2104      	movs	r1, #4
 8013998:	6860      	ldr	r0, [r4, #4]
 801399a:	f7ff ffa1 	bl	80138e0 <std>
 801399e:	2201      	movs	r2, #1
 80139a0:	2109      	movs	r1, #9
 80139a2:	68a0      	ldr	r0, [r4, #8]
 80139a4:	f7ff ff9c 	bl	80138e0 <std>
 80139a8:	2202      	movs	r2, #2
 80139aa:	2112      	movs	r1, #18
 80139ac:	68e0      	ldr	r0, [r4, #12]
 80139ae:	f7ff ff97 	bl	80138e0 <std>
 80139b2:	2301      	movs	r3, #1
 80139b4:	61a3      	str	r3, [r4, #24]
 80139b6:	bd10      	pop	{r4, pc}
 80139b8:	08018ff0 	.word	0x08018ff0
 80139bc:	08013929 	.word	0x08013929

080139c0 <__sfp>:
 80139c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139c2:	4b1b      	ldr	r3, [pc, #108]	; (8013a30 <__sfp+0x70>)
 80139c4:	681e      	ldr	r6, [r3, #0]
 80139c6:	69b3      	ldr	r3, [r6, #24]
 80139c8:	4607      	mov	r7, r0
 80139ca:	b913      	cbnz	r3, 80139d2 <__sfp+0x12>
 80139cc:	4630      	mov	r0, r6
 80139ce:	f7ff ffc7 	bl	8013960 <__sinit>
 80139d2:	3648      	adds	r6, #72	; 0x48
 80139d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80139d8:	3b01      	subs	r3, #1
 80139da:	d503      	bpl.n	80139e4 <__sfp+0x24>
 80139dc:	6833      	ldr	r3, [r6, #0]
 80139de:	b133      	cbz	r3, 80139ee <__sfp+0x2e>
 80139e0:	6836      	ldr	r6, [r6, #0]
 80139e2:	e7f7      	b.n	80139d4 <__sfp+0x14>
 80139e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80139e8:	b16d      	cbz	r5, 8013a06 <__sfp+0x46>
 80139ea:	3468      	adds	r4, #104	; 0x68
 80139ec:	e7f4      	b.n	80139d8 <__sfp+0x18>
 80139ee:	2104      	movs	r1, #4
 80139f0:	4638      	mov	r0, r7
 80139f2:	f7ff ff9f 	bl	8013934 <__sfmoreglue>
 80139f6:	6030      	str	r0, [r6, #0]
 80139f8:	2800      	cmp	r0, #0
 80139fa:	d1f1      	bne.n	80139e0 <__sfp+0x20>
 80139fc:	230c      	movs	r3, #12
 80139fe:	603b      	str	r3, [r7, #0]
 8013a00:	4604      	mov	r4, r0
 8013a02:	4620      	mov	r0, r4
 8013a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a06:	4b0b      	ldr	r3, [pc, #44]	; (8013a34 <__sfp+0x74>)
 8013a08:	6665      	str	r5, [r4, #100]	; 0x64
 8013a0a:	e9c4 5500 	strd	r5, r5, [r4]
 8013a0e:	60a5      	str	r5, [r4, #8]
 8013a10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013a14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013a18:	2208      	movs	r2, #8
 8013a1a:	4629      	mov	r1, r5
 8013a1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013a20:	f000 f8d7 	bl	8013bd2 <memset>
 8013a24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013a28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013a2c:	e7e9      	b.n	8013a02 <__sfp+0x42>
 8013a2e:	bf00      	nop
 8013a30:	08018ff0 	.word	0x08018ff0
 8013a34:	ffff0001 	.word	0xffff0001

08013a38 <_fwalk>:
 8013a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a3c:	4688      	mov	r8, r1
 8013a3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013a42:	2600      	movs	r6, #0
 8013a44:	b914      	cbnz	r4, 8013a4c <_fwalk+0x14>
 8013a46:	4630      	mov	r0, r6
 8013a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a4c:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013a50:	3f01      	subs	r7, #1
 8013a52:	d501      	bpl.n	8013a58 <_fwalk+0x20>
 8013a54:	6824      	ldr	r4, [r4, #0]
 8013a56:	e7f5      	b.n	8013a44 <_fwalk+0xc>
 8013a58:	89ab      	ldrh	r3, [r5, #12]
 8013a5a:	2b01      	cmp	r3, #1
 8013a5c:	d906      	bls.n	8013a6c <_fwalk+0x34>
 8013a5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013a62:	3301      	adds	r3, #1
 8013a64:	d002      	beq.n	8013a6c <_fwalk+0x34>
 8013a66:	4628      	mov	r0, r5
 8013a68:	47c0      	blx	r8
 8013a6a:	4306      	orrs	r6, r0
 8013a6c:	3568      	adds	r5, #104	; 0x68
 8013a6e:	e7ef      	b.n	8013a50 <_fwalk+0x18>

08013a70 <_fwalk_reent>:
 8013a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a74:	4680      	mov	r8, r0
 8013a76:	4689      	mov	r9, r1
 8013a78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013a7c:	2600      	movs	r6, #0
 8013a7e:	b914      	cbnz	r4, 8013a86 <_fwalk_reent+0x16>
 8013a80:	4630      	mov	r0, r6
 8013a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013a8a:	3f01      	subs	r7, #1
 8013a8c:	d501      	bpl.n	8013a92 <_fwalk_reent+0x22>
 8013a8e:	6824      	ldr	r4, [r4, #0]
 8013a90:	e7f5      	b.n	8013a7e <_fwalk_reent+0xe>
 8013a92:	89ab      	ldrh	r3, [r5, #12]
 8013a94:	2b01      	cmp	r3, #1
 8013a96:	d907      	bls.n	8013aa8 <_fwalk_reent+0x38>
 8013a98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013a9c:	3301      	adds	r3, #1
 8013a9e:	d003      	beq.n	8013aa8 <_fwalk_reent+0x38>
 8013aa0:	4629      	mov	r1, r5
 8013aa2:	4640      	mov	r0, r8
 8013aa4:	47c8      	blx	r9
 8013aa6:	4306      	orrs	r6, r0
 8013aa8:	3568      	adds	r5, #104	; 0x68
 8013aaa:	e7ee      	b.n	8013a8a <_fwalk_reent+0x1a>

08013aac <__libc_init_array>:
 8013aac:	b570      	push	{r4, r5, r6, lr}
 8013aae:	4e0d      	ldr	r6, [pc, #52]	; (8013ae4 <__libc_init_array+0x38>)
 8013ab0:	4c0d      	ldr	r4, [pc, #52]	; (8013ae8 <__libc_init_array+0x3c>)
 8013ab2:	1ba4      	subs	r4, r4, r6
 8013ab4:	10a4      	asrs	r4, r4, #2
 8013ab6:	2500      	movs	r5, #0
 8013ab8:	42a5      	cmp	r5, r4
 8013aba:	d109      	bne.n	8013ad0 <__libc_init_array+0x24>
 8013abc:	4e0b      	ldr	r6, [pc, #44]	; (8013aec <__libc_init_array+0x40>)
 8013abe:	4c0c      	ldr	r4, [pc, #48]	; (8013af0 <__libc_init_array+0x44>)
 8013ac0:	f005 f838 	bl	8018b34 <_init>
 8013ac4:	1ba4      	subs	r4, r4, r6
 8013ac6:	10a4      	asrs	r4, r4, #2
 8013ac8:	2500      	movs	r5, #0
 8013aca:	42a5      	cmp	r5, r4
 8013acc:	d105      	bne.n	8013ada <__libc_init_array+0x2e>
 8013ace:	bd70      	pop	{r4, r5, r6, pc}
 8013ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013ad4:	4798      	blx	r3
 8013ad6:	3501      	adds	r5, #1
 8013ad8:	e7ee      	b.n	8013ab8 <__libc_init_array+0xc>
 8013ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013ade:	4798      	blx	r3
 8013ae0:	3501      	adds	r5, #1
 8013ae2:	e7f2      	b.n	8013aca <__libc_init_array+0x1e>
 8013ae4:	080192c8 	.word	0x080192c8
 8013ae8:	080192c8 	.word	0x080192c8
 8013aec:	080192c8 	.word	0x080192c8
 8013af0:	080192cc 	.word	0x080192cc

08013af4 <__swhatbuf_r>:
 8013af4:	b570      	push	{r4, r5, r6, lr}
 8013af6:	460e      	mov	r6, r1
 8013af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013afc:	2900      	cmp	r1, #0
 8013afe:	b096      	sub	sp, #88	; 0x58
 8013b00:	4614      	mov	r4, r2
 8013b02:	461d      	mov	r5, r3
 8013b04:	da07      	bge.n	8013b16 <__swhatbuf_r+0x22>
 8013b06:	2300      	movs	r3, #0
 8013b08:	602b      	str	r3, [r5, #0]
 8013b0a:	89b3      	ldrh	r3, [r6, #12]
 8013b0c:	061a      	lsls	r2, r3, #24
 8013b0e:	d410      	bmi.n	8013b32 <__swhatbuf_r+0x3e>
 8013b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b14:	e00e      	b.n	8013b34 <__swhatbuf_r+0x40>
 8013b16:	466a      	mov	r2, sp
 8013b18:	f003 fe66 	bl	80177e8 <_fstat_r>
 8013b1c:	2800      	cmp	r0, #0
 8013b1e:	dbf2      	blt.n	8013b06 <__swhatbuf_r+0x12>
 8013b20:	9a01      	ldr	r2, [sp, #4]
 8013b22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013b26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013b2a:	425a      	negs	r2, r3
 8013b2c:	415a      	adcs	r2, r3
 8013b2e:	602a      	str	r2, [r5, #0]
 8013b30:	e7ee      	b.n	8013b10 <__swhatbuf_r+0x1c>
 8013b32:	2340      	movs	r3, #64	; 0x40
 8013b34:	2000      	movs	r0, #0
 8013b36:	6023      	str	r3, [r4, #0]
 8013b38:	b016      	add	sp, #88	; 0x58
 8013b3a:	bd70      	pop	{r4, r5, r6, pc}

08013b3c <__smakebuf_r>:
 8013b3c:	898b      	ldrh	r3, [r1, #12]
 8013b3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b40:	079d      	lsls	r5, r3, #30
 8013b42:	4606      	mov	r6, r0
 8013b44:	460c      	mov	r4, r1
 8013b46:	d507      	bpl.n	8013b58 <__smakebuf_r+0x1c>
 8013b48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013b4c:	6023      	str	r3, [r4, #0]
 8013b4e:	6123      	str	r3, [r4, #16]
 8013b50:	2301      	movs	r3, #1
 8013b52:	6163      	str	r3, [r4, #20]
 8013b54:	b002      	add	sp, #8
 8013b56:	bd70      	pop	{r4, r5, r6, pc}
 8013b58:	ab01      	add	r3, sp, #4
 8013b5a:	466a      	mov	r2, sp
 8013b5c:	f7ff ffca 	bl	8013af4 <__swhatbuf_r>
 8013b60:	9900      	ldr	r1, [sp, #0]
 8013b62:	4605      	mov	r5, r0
 8013b64:	4630      	mov	r0, r6
 8013b66:	f000 f88b 	bl	8013c80 <_malloc_r>
 8013b6a:	b948      	cbnz	r0, 8013b80 <__smakebuf_r+0x44>
 8013b6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b70:	059a      	lsls	r2, r3, #22
 8013b72:	d4ef      	bmi.n	8013b54 <__smakebuf_r+0x18>
 8013b74:	f023 0303 	bic.w	r3, r3, #3
 8013b78:	f043 0302 	orr.w	r3, r3, #2
 8013b7c:	81a3      	strh	r3, [r4, #12]
 8013b7e:	e7e3      	b.n	8013b48 <__smakebuf_r+0xc>
 8013b80:	4b0d      	ldr	r3, [pc, #52]	; (8013bb8 <__smakebuf_r+0x7c>)
 8013b82:	62b3      	str	r3, [r6, #40]	; 0x28
 8013b84:	89a3      	ldrh	r3, [r4, #12]
 8013b86:	6020      	str	r0, [r4, #0]
 8013b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b8c:	81a3      	strh	r3, [r4, #12]
 8013b8e:	9b00      	ldr	r3, [sp, #0]
 8013b90:	6163      	str	r3, [r4, #20]
 8013b92:	9b01      	ldr	r3, [sp, #4]
 8013b94:	6120      	str	r0, [r4, #16]
 8013b96:	b15b      	cbz	r3, 8013bb0 <__smakebuf_r+0x74>
 8013b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b9c:	4630      	mov	r0, r6
 8013b9e:	f004 f95b 	bl	8017e58 <_isatty_r>
 8013ba2:	b128      	cbz	r0, 8013bb0 <__smakebuf_r+0x74>
 8013ba4:	89a3      	ldrh	r3, [r4, #12]
 8013ba6:	f023 0303 	bic.w	r3, r3, #3
 8013baa:	f043 0301 	orr.w	r3, r3, #1
 8013bae:	81a3      	strh	r3, [r4, #12]
 8013bb0:	89a3      	ldrh	r3, [r4, #12]
 8013bb2:	431d      	orrs	r5, r3
 8013bb4:	81a5      	strh	r5, [r4, #12]
 8013bb6:	e7cd      	b.n	8013b54 <__smakebuf_r+0x18>
 8013bb8:	08013929 	.word	0x08013929

08013bbc <memcpy>:
 8013bbc:	b510      	push	{r4, lr}
 8013bbe:	1e43      	subs	r3, r0, #1
 8013bc0:	440a      	add	r2, r1
 8013bc2:	4291      	cmp	r1, r2
 8013bc4:	d100      	bne.n	8013bc8 <memcpy+0xc>
 8013bc6:	bd10      	pop	{r4, pc}
 8013bc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013bcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013bd0:	e7f7      	b.n	8013bc2 <memcpy+0x6>

08013bd2 <memset>:
 8013bd2:	4402      	add	r2, r0
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	4293      	cmp	r3, r2
 8013bd8:	d100      	bne.n	8013bdc <memset+0xa>
 8013bda:	4770      	bx	lr
 8013bdc:	f803 1b01 	strb.w	r1, [r3], #1
 8013be0:	e7f9      	b.n	8013bd6 <memset+0x4>
	...

08013be4 <_free_r>:
 8013be4:	b538      	push	{r3, r4, r5, lr}
 8013be6:	4605      	mov	r5, r0
 8013be8:	2900      	cmp	r1, #0
 8013bea:	d045      	beq.n	8013c78 <_free_r+0x94>
 8013bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bf0:	1f0c      	subs	r4, r1, #4
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	bfb8      	it	lt
 8013bf6:	18e4      	addlt	r4, r4, r3
 8013bf8:	f004 f9a5 	bl	8017f46 <__malloc_lock>
 8013bfc:	4a1f      	ldr	r2, [pc, #124]	; (8013c7c <_free_r+0x98>)
 8013bfe:	6813      	ldr	r3, [r2, #0]
 8013c00:	4610      	mov	r0, r2
 8013c02:	b933      	cbnz	r3, 8013c12 <_free_r+0x2e>
 8013c04:	6063      	str	r3, [r4, #4]
 8013c06:	6014      	str	r4, [r2, #0]
 8013c08:	4628      	mov	r0, r5
 8013c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c0e:	f004 b99b 	b.w	8017f48 <__malloc_unlock>
 8013c12:	42a3      	cmp	r3, r4
 8013c14:	d90c      	bls.n	8013c30 <_free_r+0x4c>
 8013c16:	6821      	ldr	r1, [r4, #0]
 8013c18:	1862      	adds	r2, r4, r1
 8013c1a:	4293      	cmp	r3, r2
 8013c1c:	bf04      	itt	eq
 8013c1e:	681a      	ldreq	r2, [r3, #0]
 8013c20:	685b      	ldreq	r3, [r3, #4]
 8013c22:	6063      	str	r3, [r4, #4]
 8013c24:	bf04      	itt	eq
 8013c26:	1852      	addeq	r2, r2, r1
 8013c28:	6022      	streq	r2, [r4, #0]
 8013c2a:	6004      	str	r4, [r0, #0]
 8013c2c:	e7ec      	b.n	8013c08 <_free_r+0x24>
 8013c2e:	4613      	mov	r3, r2
 8013c30:	685a      	ldr	r2, [r3, #4]
 8013c32:	b10a      	cbz	r2, 8013c38 <_free_r+0x54>
 8013c34:	42a2      	cmp	r2, r4
 8013c36:	d9fa      	bls.n	8013c2e <_free_r+0x4a>
 8013c38:	6819      	ldr	r1, [r3, #0]
 8013c3a:	1858      	adds	r0, r3, r1
 8013c3c:	42a0      	cmp	r0, r4
 8013c3e:	d10b      	bne.n	8013c58 <_free_r+0x74>
 8013c40:	6820      	ldr	r0, [r4, #0]
 8013c42:	4401      	add	r1, r0
 8013c44:	1858      	adds	r0, r3, r1
 8013c46:	4282      	cmp	r2, r0
 8013c48:	6019      	str	r1, [r3, #0]
 8013c4a:	d1dd      	bne.n	8013c08 <_free_r+0x24>
 8013c4c:	6810      	ldr	r0, [r2, #0]
 8013c4e:	6852      	ldr	r2, [r2, #4]
 8013c50:	605a      	str	r2, [r3, #4]
 8013c52:	4401      	add	r1, r0
 8013c54:	6019      	str	r1, [r3, #0]
 8013c56:	e7d7      	b.n	8013c08 <_free_r+0x24>
 8013c58:	d902      	bls.n	8013c60 <_free_r+0x7c>
 8013c5a:	230c      	movs	r3, #12
 8013c5c:	602b      	str	r3, [r5, #0]
 8013c5e:	e7d3      	b.n	8013c08 <_free_r+0x24>
 8013c60:	6820      	ldr	r0, [r4, #0]
 8013c62:	1821      	adds	r1, r4, r0
 8013c64:	428a      	cmp	r2, r1
 8013c66:	bf04      	itt	eq
 8013c68:	6811      	ldreq	r1, [r2, #0]
 8013c6a:	6852      	ldreq	r2, [r2, #4]
 8013c6c:	6062      	str	r2, [r4, #4]
 8013c6e:	bf04      	itt	eq
 8013c70:	1809      	addeq	r1, r1, r0
 8013c72:	6021      	streq	r1, [r4, #0]
 8013c74:	605c      	str	r4, [r3, #4]
 8013c76:	e7c7      	b.n	8013c08 <_free_r+0x24>
 8013c78:	bd38      	pop	{r3, r4, r5, pc}
 8013c7a:	bf00      	nop
 8013c7c:	20008218 	.word	0x20008218

08013c80 <_malloc_r>:
 8013c80:	b570      	push	{r4, r5, r6, lr}
 8013c82:	1ccd      	adds	r5, r1, #3
 8013c84:	f025 0503 	bic.w	r5, r5, #3
 8013c88:	3508      	adds	r5, #8
 8013c8a:	2d0c      	cmp	r5, #12
 8013c8c:	bf38      	it	cc
 8013c8e:	250c      	movcc	r5, #12
 8013c90:	2d00      	cmp	r5, #0
 8013c92:	4606      	mov	r6, r0
 8013c94:	db01      	blt.n	8013c9a <_malloc_r+0x1a>
 8013c96:	42a9      	cmp	r1, r5
 8013c98:	d903      	bls.n	8013ca2 <_malloc_r+0x22>
 8013c9a:	230c      	movs	r3, #12
 8013c9c:	6033      	str	r3, [r6, #0]
 8013c9e:	2000      	movs	r0, #0
 8013ca0:	bd70      	pop	{r4, r5, r6, pc}
 8013ca2:	f004 f950 	bl	8017f46 <__malloc_lock>
 8013ca6:	4a21      	ldr	r2, [pc, #132]	; (8013d2c <_malloc_r+0xac>)
 8013ca8:	6814      	ldr	r4, [r2, #0]
 8013caa:	4621      	mov	r1, r4
 8013cac:	b991      	cbnz	r1, 8013cd4 <_malloc_r+0x54>
 8013cae:	4c20      	ldr	r4, [pc, #128]	; (8013d30 <_malloc_r+0xb0>)
 8013cb0:	6823      	ldr	r3, [r4, #0]
 8013cb2:	b91b      	cbnz	r3, 8013cbc <_malloc_r+0x3c>
 8013cb4:	4630      	mov	r0, r6
 8013cb6:	f001 fd0f 	bl	80156d8 <_sbrk_r>
 8013cba:	6020      	str	r0, [r4, #0]
 8013cbc:	4629      	mov	r1, r5
 8013cbe:	4630      	mov	r0, r6
 8013cc0:	f001 fd0a 	bl	80156d8 <_sbrk_r>
 8013cc4:	1c43      	adds	r3, r0, #1
 8013cc6:	d124      	bne.n	8013d12 <_malloc_r+0x92>
 8013cc8:	230c      	movs	r3, #12
 8013cca:	6033      	str	r3, [r6, #0]
 8013ccc:	4630      	mov	r0, r6
 8013cce:	f004 f93b 	bl	8017f48 <__malloc_unlock>
 8013cd2:	e7e4      	b.n	8013c9e <_malloc_r+0x1e>
 8013cd4:	680b      	ldr	r3, [r1, #0]
 8013cd6:	1b5b      	subs	r3, r3, r5
 8013cd8:	d418      	bmi.n	8013d0c <_malloc_r+0x8c>
 8013cda:	2b0b      	cmp	r3, #11
 8013cdc:	d90f      	bls.n	8013cfe <_malloc_r+0x7e>
 8013cde:	600b      	str	r3, [r1, #0]
 8013ce0:	50cd      	str	r5, [r1, r3]
 8013ce2:	18cc      	adds	r4, r1, r3
 8013ce4:	4630      	mov	r0, r6
 8013ce6:	f004 f92f 	bl	8017f48 <__malloc_unlock>
 8013cea:	f104 000b 	add.w	r0, r4, #11
 8013cee:	1d23      	adds	r3, r4, #4
 8013cf0:	f020 0007 	bic.w	r0, r0, #7
 8013cf4:	1ac3      	subs	r3, r0, r3
 8013cf6:	d0d3      	beq.n	8013ca0 <_malloc_r+0x20>
 8013cf8:	425a      	negs	r2, r3
 8013cfa:	50e2      	str	r2, [r4, r3]
 8013cfc:	e7d0      	b.n	8013ca0 <_malloc_r+0x20>
 8013cfe:	428c      	cmp	r4, r1
 8013d00:	684b      	ldr	r3, [r1, #4]
 8013d02:	bf16      	itet	ne
 8013d04:	6063      	strne	r3, [r4, #4]
 8013d06:	6013      	streq	r3, [r2, #0]
 8013d08:	460c      	movne	r4, r1
 8013d0a:	e7eb      	b.n	8013ce4 <_malloc_r+0x64>
 8013d0c:	460c      	mov	r4, r1
 8013d0e:	6849      	ldr	r1, [r1, #4]
 8013d10:	e7cc      	b.n	8013cac <_malloc_r+0x2c>
 8013d12:	1cc4      	adds	r4, r0, #3
 8013d14:	f024 0403 	bic.w	r4, r4, #3
 8013d18:	42a0      	cmp	r0, r4
 8013d1a:	d005      	beq.n	8013d28 <_malloc_r+0xa8>
 8013d1c:	1a21      	subs	r1, r4, r0
 8013d1e:	4630      	mov	r0, r6
 8013d20:	f001 fcda 	bl	80156d8 <_sbrk_r>
 8013d24:	3001      	adds	r0, #1
 8013d26:	d0cf      	beq.n	8013cc8 <_malloc_r+0x48>
 8013d28:	6025      	str	r5, [r4, #0]
 8013d2a:	e7db      	b.n	8013ce4 <_malloc_r+0x64>
 8013d2c:	20008218 	.word	0x20008218
 8013d30:	2000821c 	.word	0x2000821c

08013d34 <__sfputc_r>:
 8013d34:	6893      	ldr	r3, [r2, #8]
 8013d36:	3b01      	subs	r3, #1
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	b410      	push	{r4}
 8013d3c:	6093      	str	r3, [r2, #8]
 8013d3e:	da08      	bge.n	8013d52 <__sfputc_r+0x1e>
 8013d40:	6994      	ldr	r4, [r2, #24]
 8013d42:	42a3      	cmp	r3, r4
 8013d44:	db01      	blt.n	8013d4a <__sfputc_r+0x16>
 8013d46:	290a      	cmp	r1, #10
 8013d48:	d103      	bne.n	8013d52 <__sfputc_r+0x1e>
 8013d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d4e:	f002 be25 	b.w	801699c <__swbuf_r>
 8013d52:	6813      	ldr	r3, [r2, #0]
 8013d54:	1c58      	adds	r0, r3, #1
 8013d56:	6010      	str	r0, [r2, #0]
 8013d58:	7019      	strb	r1, [r3, #0]
 8013d5a:	4608      	mov	r0, r1
 8013d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d60:	4770      	bx	lr

08013d62 <__sfputs_r>:
 8013d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d64:	4606      	mov	r6, r0
 8013d66:	460f      	mov	r7, r1
 8013d68:	4614      	mov	r4, r2
 8013d6a:	18d5      	adds	r5, r2, r3
 8013d6c:	42ac      	cmp	r4, r5
 8013d6e:	d101      	bne.n	8013d74 <__sfputs_r+0x12>
 8013d70:	2000      	movs	r0, #0
 8013d72:	e007      	b.n	8013d84 <__sfputs_r+0x22>
 8013d74:	463a      	mov	r2, r7
 8013d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d7a:	4630      	mov	r0, r6
 8013d7c:	f7ff ffda 	bl	8013d34 <__sfputc_r>
 8013d80:	1c43      	adds	r3, r0, #1
 8013d82:	d1f3      	bne.n	8013d6c <__sfputs_r+0xa>
 8013d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013d88 <_vfiprintf_r>:
 8013d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d8c:	460c      	mov	r4, r1
 8013d8e:	b09d      	sub	sp, #116	; 0x74
 8013d90:	4617      	mov	r7, r2
 8013d92:	461d      	mov	r5, r3
 8013d94:	4606      	mov	r6, r0
 8013d96:	b118      	cbz	r0, 8013da0 <_vfiprintf_r+0x18>
 8013d98:	6983      	ldr	r3, [r0, #24]
 8013d9a:	b90b      	cbnz	r3, 8013da0 <_vfiprintf_r+0x18>
 8013d9c:	f7ff fde0 	bl	8013960 <__sinit>
 8013da0:	4b7c      	ldr	r3, [pc, #496]	; (8013f94 <_vfiprintf_r+0x20c>)
 8013da2:	429c      	cmp	r4, r3
 8013da4:	d158      	bne.n	8013e58 <_vfiprintf_r+0xd0>
 8013da6:	6874      	ldr	r4, [r6, #4]
 8013da8:	89a3      	ldrh	r3, [r4, #12]
 8013daa:	0718      	lsls	r0, r3, #28
 8013dac:	d55e      	bpl.n	8013e6c <_vfiprintf_r+0xe4>
 8013dae:	6923      	ldr	r3, [r4, #16]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d05b      	beq.n	8013e6c <_vfiprintf_r+0xe4>
 8013db4:	2300      	movs	r3, #0
 8013db6:	9309      	str	r3, [sp, #36]	; 0x24
 8013db8:	2320      	movs	r3, #32
 8013dba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013dbe:	2330      	movs	r3, #48	; 0x30
 8013dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013dc4:	9503      	str	r5, [sp, #12]
 8013dc6:	f04f 0b01 	mov.w	fp, #1
 8013dca:	46b8      	mov	r8, r7
 8013dcc:	4645      	mov	r5, r8
 8013dce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013dd2:	b10b      	cbz	r3, 8013dd8 <_vfiprintf_r+0x50>
 8013dd4:	2b25      	cmp	r3, #37	; 0x25
 8013dd6:	d154      	bne.n	8013e82 <_vfiprintf_r+0xfa>
 8013dd8:	ebb8 0a07 	subs.w	sl, r8, r7
 8013ddc:	d00b      	beq.n	8013df6 <_vfiprintf_r+0x6e>
 8013dde:	4653      	mov	r3, sl
 8013de0:	463a      	mov	r2, r7
 8013de2:	4621      	mov	r1, r4
 8013de4:	4630      	mov	r0, r6
 8013de6:	f7ff ffbc 	bl	8013d62 <__sfputs_r>
 8013dea:	3001      	adds	r0, #1
 8013dec:	f000 80c2 	beq.w	8013f74 <_vfiprintf_r+0x1ec>
 8013df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013df2:	4453      	add	r3, sl
 8013df4:	9309      	str	r3, [sp, #36]	; 0x24
 8013df6:	f898 3000 	ldrb.w	r3, [r8]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	f000 80ba 	beq.w	8013f74 <_vfiprintf_r+0x1ec>
 8013e00:	2300      	movs	r3, #0
 8013e02:	f04f 32ff 	mov.w	r2, #4294967295
 8013e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e0a:	9304      	str	r3, [sp, #16]
 8013e0c:	9307      	str	r3, [sp, #28]
 8013e0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e12:	931a      	str	r3, [sp, #104]	; 0x68
 8013e14:	46a8      	mov	r8, r5
 8013e16:	2205      	movs	r2, #5
 8013e18:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013e1c:	485e      	ldr	r0, [pc, #376]	; (8013f98 <_vfiprintf_r+0x210>)
 8013e1e:	f7f4 f917 	bl	8008050 <memchr>
 8013e22:	9b04      	ldr	r3, [sp, #16]
 8013e24:	bb78      	cbnz	r0, 8013e86 <_vfiprintf_r+0xfe>
 8013e26:	06d9      	lsls	r1, r3, #27
 8013e28:	bf44      	itt	mi
 8013e2a:	2220      	movmi	r2, #32
 8013e2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013e30:	071a      	lsls	r2, r3, #28
 8013e32:	bf44      	itt	mi
 8013e34:	222b      	movmi	r2, #43	; 0x2b
 8013e36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013e3a:	782a      	ldrb	r2, [r5, #0]
 8013e3c:	2a2a      	cmp	r2, #42	; 0x2a
 8013e3e:	d02a      	beq.n	8013e96 <_vfiprintf_r+0x10e>
 8013e40:	9a07      	ldr	r2, [sp, #28]
 8013e42:	46a8      	mov	r8, r5
 8013e44:	2000      	movs	r0, #0
 8013e46:	250a      	movs	r5, #10
 8013e48:	4641      	mov	r1, r8
 8013e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e4e:	3b30      	subs	r3, #48	; 0x30
 8013e50:	2b09      	cmp	r3, #9
 8013e52:	d969      	bls.n	8013f28 <_vfiprintf_r+0x1a0>
 8013e54:	b360      	cbz	r0, 8013eb0 <_vfiprintf_r+0x128>
 8013e56:	e024      	b.n	8013ea2 <_vfiprintf_r+0x11a>
 8013e58:	4b50      	ldr	r3, [pc, #320]	; (8013f9c <_vfiprintf_r+0x214>)
 8013e5a:	429c      	cmp	r4, r3
 8013e5c:	d101      	bne.n	8013e62 <_vfiprintf_r+0xda>
 8013e5e:	68b4      	ldr	r4, [r6, #8]
 8013e60:	e7a2      	b.n	8013da8 <_vfiprintf_r+0x20>
 8013e62:	4b4f      	ldr	r3, [pc, #316]	; (8013fa0 <_vfiprintf_r+0x218>)
 8013e64:	429c      	cmp	r4, r3
 8013e66:	bf08      	it	eq
 8013e68:	68f4      	ldreq	r4, [r6, #12]
 8013e6a:	e79d      	b.n	8013da8 <_vfiprintf_r+0x20>
 8013e6c:	4621      	mov	r1, r4
 8013e6e:	4630      	mov	r0, r6
 8013e70:	f002 fdf8 	bl	8016a64 <__swsetup_r>
 8013e74:	2800      	cmp	r0, #0
 8013e76:	d09d      	beq.n	8013db4 <_vfiprintf_r+0x2c>
 8013e78:	f04f 30ff 	mov.w	r0, #4294967295
 8013e7c:	b01d      	add	sp, #116	; 0x74
 8013e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e82:	46a8      	mov	r8, r5
 8013e84:	e7a2      	b.n	8013dcc <_vfiprintf_r+0x44>
 8013e86:	4a44      	ldr	r2, [pc, #272]	; (8013f98 <_vfiprintf_r+0x210>)
 8013e88:	1a80      	subs	r0, r0, r2
 8013e8a:	fa0b f000 	lsl.w	r0, fp, r0
 8013e8e:	4318      	orrs	r0, r3
 8013e90:	9004      	str	r0, [sp, #16]
 8013e92:	4645      	mov	r5, r8
 8013e94:	e7be      	b.n	8013e14 <_vfiprintf_r+0x8c>
 8013e96:	9a03      	ldr	r2, [sp, #12]
 8013e98:	1d11      	adds	r1, r2, #4
 8013e9a:	6812      	ldr	r2, [r2, #0]
 8013e9c:	9103      	str	r1, [sp, #12]
 8013e9e:	2a00      	cmp	r2, #0
 8013ea0:	db01      	blt.n	8013ea6 <_vfiprintf_r+0x11e>
 8013ea2:	9207      	str	r2, [sp, #28]
 8013ea4:	e004      	b.n	8013eb0 <_vfiprintf_r+0x128>
 8013ea6:	4252      	negs	r2, r2
 8013ea8:	f043 0302 	orr.w	r3, r3, #2
 8013eac:	9207      	str	r2, [sp, #28]
 8013eae:	9304      	str	r3, [sp, #16]
 8013eb0:	f898 3000 	ldrb.w	r3, [r8]
 8013eb4:	2b2e      	cmp	r3, #46	; 0x2e
 8013eb6:	d10e      	bne.n	8013ed6 <_vfiprintf_r+0x14e>
 8013eb8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8013ebe:	d138      	bne.n	8013f32 <_vfiprintf_r+0x1aa>
 8013ec0:	9b03      	ldr	r3, [sp, #12]
 8013ec2:	1d1a      	adds	r2, r3, #4
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	9203      	str	r2, [sp, #12]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	bfb8      	it	lt
 8013ecc:	f04f 33ff 	movlt.w	r3, #4294967295
 8013ed0:	f108 0802 	add.w	r8, r8, #2
 8013ed4:	9305      	str	r3, [sp, #20]
 8013ed6:	4d33      	ldr	r5, [pc, #204]	; (8013fa4 <_vfiprintf_r+0x21c>)
 8013ed8:	f898 1000 	ldrb.w	r1, [r8]
 8013edc:	2203      	movs	r2, #3
 8013ede:	4628      	mov	r0, r5
 8013ee0:	f7f4 f8b6 	bl	8008050 <memchr>
 8013ee4:	b140      	cbz	r0, 8013ef8 <_vfiprintf_r+0x170>
 8013ee6:	2340      	movs	r3, #64	; 0x40
 8013ee8:	1b40      	subs	r0, r0, r5
 8013eea:	fa03 f000 	lsl.w	r0, r3, r0
 8013eee:	9b04      	ldr	r3, [sp, #16]
 8013ef0:	4303      	orrs	r3, r0
 8013ef2:	f108 0801 	add.w	r8, r8, #1
 8013ef6:	9304      	str	r3, [sp, #16]
 8013ef8:	f898 1000 	ldrb.w	r1, [r8]
 8013efc:	482a      	ldr	r0, [pc, #168]	; (8013fa8 <_vfiprintf_r+0x220>)
 8013efe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f02:	2206      	movs	r2, #6
 8013f04:	f108 0701 	add.w	r7, r8, #1
 8013f08:	f7f4 f8a2 	bl	8008050 <memchr>
 8013f0c:	2800      	cmp	r0, #0
 8013f0e:	d037      	beq.n	8013f80 <_vfiprintf_r+0x1f8>
 8013f10:	4b26      	ldr	r3, [pc, #152]	; (8013fac <_vfiprintf_r+0x224>)
 8013f12:	bb1b      	cbnz	r3, 8013f5c <_vfiprintf_r+0x1d4>
 8013f14:	9b03      	ldr	r3, [sp, #12]
 8013f16:	3307      	adds	r3, #7
 8013f18:	f023 0307 	bic.w	r3, r3, #7
 8013f1c:	3308      	adds	r3, #8
 8013f1e:	9303      	str	r3, [sp, #12]
 8013f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f22:	444b      	add	r3, r9
 8013f24:	9309      	str	r3, [sp, #36]	; 0x24
 8013f26:	e750      	b.n	8013dca <_vfiprintf_r+0x42>
 8013f28:	fb05 3202 	mla	r2, r5, r2, r3
 8013f2c:	2001      	movs	r0, #1
 8013f2e:	4688      	mov	r8, r1
 8013f30:	e78a      	b.n	8013e48 <_vfiprintf_r+0xc0>
 8013f32:	2300      	movs	r3, #0
 8013f34:	f108 0801 	add.w	r8, r8, #1
 8013f38:	9305      	str	r3, [sp, #20]
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	250a      	movs	r5, #10
 8013f3e:	4640      	mov	r0, r8
 8013f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f44:	3a30      	subs	r2, #48	; 0x30
 8013f46:	2a09      	cmp	r2, #9
 8013f48:	d903      	bls.n	8013f52 <_vfiprintf_r+0x1ca>
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d0c3      	beq.n	8013ed6 <_vfiprintf_r+0x14e>
 8013f4e:	9105      	str	r1, [sp, #20]
 8013f50:	e7c1      	b.n	8013ed6 <_vfiprintf_r+0x14e>
 8013f52:	fb05 2101 	mla	r1, r5, r1, r2
 8013f56:	2301      	movs	r3, #1
 8013f58:	4680      	mov	r8, r0
 8013f5a:	e7f0      	b.n	8013f3e <_vfiprintf_r+0x1b6>
 8013f5c:	ab03      	add	r3, sp, #12
 8013f5e:	9300      	str	r3, [sp, #0]
 8013f60:	4622      	mov	r2, r4
 8013f62:	4b13      	ldr	r3, [pc, #76]	; (8013fb0 <_vfiprintf_r+0x228>)
 8013f64:	a904      	add	r1, sp, #16
 8013f66:	4630      	mov	r0, r6
 8013f68:	f000 f8b8 	bl	80140dc <_printf_float>
 8013f6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013f70:	4681      	mov	r9, r0
 8013f72:	d1d5      	bne.n	8013f20 <_vfiprintf_r+0x198>
 8013f74:	89a3      	ldrh	r3, [r4, #12]
 8013f76:	065b      	lsls	r3, r3, #25
 8013f78:	f53f af7e 	bmi.w	8013e78 <_vfiprintf_r+0xf0>
 8013f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f7e:	e77d      	b.n	8013e7c <_vfiprintf_r+0xf4>
 8013f80:	ab03      	add	r3, sp, #12
 8013f82:	9300      	str	r3, [sp, #0]
 8013f84:	4622      	mov	r2, r4
 8013f86:	4b0a      	ldr	r3, [pc, #40]	; (8013fb0 <_vfiprintf_r+0x228>)
 8013f88:	a904      	add	r1, sp, #16
 8013f8a:	4630      	mov	r0, r6
 8013f8c:	f000 fb5c 	bl	8014648 <_printf_i>
 8013f90:	e7ec      	b.n	8013f6c <_vfiprintf_r+0x1e4>
 8013f92:	bf00      	nop
 8013f94:	08018fb0 	.word	0x08018fb0
 8013f98:	08018ff4 	.word	0x08018ff4
 8013f9c:	08018fd0 	.word	0x08018fd0
 8013fa0:	08018f90 	.word	0x08018f90
 8013fa4:	08018ffa 	.word	0x08018ffa
 8013fa8:	08018ffe 	.word	0x08018ffe
 8013fac:	080140dd 	.word	0x080140dd
 8013fb0:	08013d63 	.word	0x08013d63

08013fb4 <__cvt>:
 8013fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013fb8:	ec55 4b10 	vmov	r4, r5, d0
 8013fbc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013fbe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013fc2:	2d00      	cmp	r5, #0
 8013fc4:	460e      	mov	r6, r1
 8013fc6:	4691      	mov	r9, r2
 8013fc8:	4619      	mov	r1, r3
 8013fca:	bfb8      	it	lt
 8013fcc:	4622      	movlt	r2, r4
 8013fce:	462b      	mov	r3, r5
 8013fd0:	f027 0720 	bic.w	r7, r7, #32
 8013fd4:	bfbb      	ittet	lt
 8013fd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013fda:	461d      	movlt	r5, r3
 8013fdc:	2300      	movge	r3, #0
 8013fde:	232d      	movlt	r3, #45	; 0x2d
 8013fe0:	bfb8      	it	lt
 8013fe2:	4614      	movlt	r4, r2
 8013fe4:	2f46      	cmp	r7, #70	; 0x46
 8013fe6:	700b      	strb	r3, [r1, #0]
 8013fe8:	d004      	beq.n	8013ff4 <__cvt+0x40>
 8013fea:	2f45      	cmp	r7, #69	; 0x45
 8013fec:	d100      	bne.n	8013ff0 <__cvt+0x3c>
 8013fee:	3601      	adds	r6, #1
 8013ff0:	2102      	movs	r1, #2
 8013ff2:	e000      	b.n	8013ff6 <__cvt+0x42>
 8013ff4:	2103      	movs	r1, #3
 8013ff6:	ab03      	add	r3, sp, #12
 8013ff8:	9301      	str	r3, [sp, #4]
 8013ffa:	ab02      	add	r3, sp, #8
 8013ffc:	9300      	str	r3, [sp, #0]
 8013ffe:	4632      	mov	r2, r6
 8014000:	4653      	mov	r3, sl
 8014002:	ec45 4b10 	vmov	d0, r4, r5
 8014006:	f002 fe37 	bl	8016c78 <_dtoa_r>
 801400a:	2f47      	cmp	r7, #71	; 0x47
 801400c:	4680      	mov	r8, r0
 801400e:	d102      	bne.n	8014016 <__cvt+0x62>
 8014010:	f019 0f01 	tst.w	r9, #1
 8014014:	d026      	beq.n	8014064 <__cvt+0xb0>
 8014016:	2f46      	cmp	r7, #70	; 0x46
 8014018:	eb08 0906 	add.w	r9, r8, r6
 801401c:	d111      	bne.n	8014042 <__cvt+0x8e>
 801401e:	f898 3000 	ldrb.w	r3, [r8]
 8014022:	2b30      	cmp	r3, #48	; 0x30
 8014024:	d10a      	bne.n	801403c <__cvt+0x88>
 8014026:	2200      	movs	r2, #0
 8014028:	2300      	movs	r3, #0
 801402a:	4620      	mov	r0, r4
 801402c:	4629      	mov	r1, r5
 801402e:	f7f4 fc83 	bl	8008938 <__aeabi_dcmpeq>
 8014032:	b918      	cbnz	r0, 801403c <__cvt+0x88>
 8014034:	f1c6 0601 	rsb	r6, r6, #1
 8014038:	f8ca 6000 	str.w	r6, [sl]
 801403c:	f8da 3000 	ldr.w	r3, [sl]
 8014040:	4499      	add	r9, r3
 8014042:	2200      	movs	r2, #0
 8014044:	2300      	movs	r3, #0
 8014046:	4620      	mov	r0, r4
 8014048:	4629      	mov	r1, r5
 801404a:	f7f4 fc75 	bl	8008938 <__aeabi_dcmpeq>
 801404e:	b938      	cbnz	r0, 8014060 <__cvt+0xac>
 8014050:	2230      	movs	r2, #48	; 0x30
 8014052:	9b03      	ldr	r3, [sp, #12]
 8014054:	454b      	cmp	r3, r9
 8014056:	d205      	bcs.n	8014064 <__cvt+0xb0>
 8014058:	1c59      	adds	r1, r3, #1
 801405a:	9103      	str	r1, [sp, #12]
 801405c:	701a      	strb	r2, [r3, #0]
 801405e:	e7f8      	b.n	8014052 <__cvt+0x9e>
 8014060:	f8cd 900c 	str.w	r9, [sp, #12]
 8014064:	9b03      	ldr	r3, [sp, #12]
 8014066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014068:	eba3 0308 	sub.w	r3, r3, r8
 801406c:	4640      	mov	r0, r8
 801406e:	6013      	str	r3, [r2, #0]
 8014070:	b004      	add	sp, #16
 8014072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014076 <__exponent>:
 8014076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014078:	2900      	cmp	r1, #0
 801407a:	4604      	mov	r4, r0
 801407c:	bfba      	itte	lt
 801407e:	4249      	neglt	r1, r1
 8014080:	232d      	movlt	r3, #45	; 0x2d
 8014082:	232b      	movge	r3, #43	; 0x2b
 8014084:	2909      	cmp	r1, #9
 8014086:	f804 2b02 	strb.w	r2, [r4], #2
 801408a:	7043      	strb	r3, [r0, #1]
 801408c:	dd20      	ble.n	80140d0 <__exponent+0x5a>
 801408e:	f10d 0307 	add.w	r3, sp, #7
 8014092:	461f      	mov	r7, r3
 8014094:	260a      	movs	r6, #10
 8014096:	fb91 f5f6 	sdiv	r5, r1, r6
 801409a:	fb06 1115 	mls	r1, r6, r5, r1
 801409e:	3130      	adds	r1, #48	; 0x30
 80140a0:	2d09      	cmp	r5, #9
 80140a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80140a6:	f103 32ff 	add.w	r2, r3, #4294967295
 80140aa:	4629      	mov	r1, r5
 80140ac:	dc09      	bgt.n	80140c2 <__exponent+0x4c>
 80140ae:	3130      	adds	r1, #48	; 0x30
 80140b0:	3b02      	subs	r3, #2
 80140b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80140b6:	42bb      	cmp	r3, r7
 80140b8:	4622      	mov	r2, r4
 80140ba:	d304      	bcc.n	80140c6 <__exponent+0x50>
 80140bc:	1a10      	subs	r0, r2, r0
 80140be:	b003      	add	sp, #12
 80140c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140c2:	4613      	mov	r3, r2
 80140c4:	e7e7      	b.n	8014096 <__exponent+0x20>
 80140c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140ca:	f804 2b01 	strb.w	r2, [r4], #1
 80140ce:	e7f2      	b.n	80140b6 <__exponent+0x40>
 80140d0:	2330      	movs	r3, #48	; 0x30
 80140d2:	4419      	add	r1, r3
 80140d4:	7083      	strb	r3, [r0, #2]
 80140d6:	1d02      	adds	r2, r0, #4
 80140d8:	70c1      	strb	r1, [r0, #3]
 80140da:	e7ef      	b.n	80140bc <__exponent+0x46>

080140dc <_printf_float>:
 80140dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140e0:	b08d      	sub	sp, #52	; 0x34
 80140e2:	460c      	mov	r4, r1
 80140e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80140e8:	4616      	mov	r6, r2
 80140ea:	461f      	mov	r7, r3
 80140ec:	4605      	mov	r5, r0
 80140ee:	f003 fed7 	bl	8017ea0 <_localeconv_r>
 80140f2:	6803      	ldr	r3, [r0, #0]
 80140f4:	9304      	str	r3, [sp, #16]
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7f3 ffa2 	bl	8008040 <strlen>
 80140fc:	2300      	movs	r3, #0
 80140fe:	930a      	str	r3, [sp, #40]	; 0x28
 8014100:	f8d8 3000 	ldr.w	r3, [r8]
 8014104:	9005      	str	r0, [sp, #20]
 8014106:	3307      	adds	r3, #7
 8014108:	f023 0307 	bic.w	r3, r3, #7
 801410c:	f103 0208 	add.w	r2, r3, #8
 8014110:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014114:	f8d4 b000 	ldr.w	fp, [r4]
 8014118:	f8c8 2000 	str.w	r2, [r8]
 801411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014120:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014124:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014128:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801412c:	9307      	str	r3, [sp, #28]
 801412e:	f8cd 8018 	str.w	r8, [sp, #24]
 8014132:	f04f 32ff 	mov.w	r2, #4294967295
 8014136:	4ba7      	ldr	r3, [pc, #668]	; (80143d4 <_printf_float+0x2f8>)
 8014138:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801413c:	f7f4 fc2e 	bl	800899c <__aeabi_dcmpun>
 8014140:	bb70      	cbnz	r0, 80141a0 <_printf_float+0xc4>
 8014142:	f04f 32ff 	mov.w	r2, #4294967295
 8014146:	4ba3      	ldr	r3, [pc, #652]	; (80143d4 <_printf_float+0x2f8>)
 8014148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801414c:	f7f4 fc08 	bl	8008960 <__aeabi_dcmple>
 8014150:	bb30      	cbnz	r0, 80141a0 <_printf_float+0xc4>
 8014152:	2200      	movs	r2, #0
 8014154:	2300      	movs	r3, #0
 8014156:	4640      	mov	r0, r8
 8014158:	4649      	mov	r1, r9
 801415a:	f7f4 fbf7 	bl	800894c <__aeabi_dcmplt>
 801415e:	b110      	cbz	r0, 8014166 <_printf_float+0x8a>
 8014160:	232d      	movs	r3, #45	; 0x2d
 8014162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014166:	4a9c      	ldr	r2, [pc, #624]	; (80143d8 <_printf_float+0x2fc>)
 8014168:	4b9c      	ldr	r3, [pc, #624]	; (80143dc <_printf_float+0x300>)
 801416a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801416e:	bf8c      	ite	hi
 8014170:	4690      	movhi	r8, r2
 8014172:	4698      	movls	r8, r3
 8014174:	2303      	movs	r3, #3
 8014176:	f02b 0204 	bic.w	r2, fp, #4
 801417a:	6123      	str	r3, [r4, #16]
 801417c:	6022      	str	r2, [r4, #0]
 801417e:	f04f 0900 	mov.w	r9, #0
 8014182:	9700      	str	r7, [sp, #0]
 8014184:	4633      	mov	r3, r6
 8014186:	aa0b      	add	r2, sp, #44	; 0x2c
 8014188:	4621      	mov	r1, r4
 801418a:	4628      	mov	r0, r5
 801418c:	f000 f9e6 	bl	801455c <_printf_common>
 8014190:	3001      	adds	r0, #1
 8014192:	f040 808d 	bne.w	80142b0 <_printf_float+0x1d4>
 8014196:	f04f 30ff 	mov.w	r0, #4294967295
 801419a:	b00d      	add	sp, #52	; 0x34
 801419c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141a0:	4642      	mov	r2, r8
 80141a2:	464b      	mov	r3, r9
 80141a4:	4640      	mov	r0, r8
 80141a6:	4649      	mov	r1, r9
 80141a8:	f7f4 fbf8 	bl	800899c <__aeabi_dcmpun>
 80141ac:	b110      	cbz	r0, 80141b4 <_printf_float+0xd8>
 80141ae:	4a8c      	ldr	r2, [pc, #560]	; (80143e0 <_printf_float+0x304>)
 80141b0:	4b8c      	ldr	r3, [pc, #560]	; (80143e4 <_printf_float+0x308>)
 80141b2:	e7da      	b.n	801416a <_printf_float+0x8e>
 80141b4:	6861      	ldr	r1, [r4, #4]
 80141b6:	1c4b      	adds	r3, r1, #1
 80141b8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80141bc:	a80a      	add	r0, sp, #40	; 0x28
 80141be:	d13e      	bne.n	801423e <_printf_float+0x162>
 80141c0:	2306      	movs	r3, #6
 80141c2:	6063      	str	r3, [r4, #4]
 80141c4:	2300      	movs	r3, #0
 80141c6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80141ca:	ab09      	add	r3, sp, #36	; 0x24
 80141cc:	9300      	str	r3, [sp, #0]
 80141ce:	ec49 8b10 	vmov	d0, r8, r9
 80141d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80141d6:	6022      	str	r2, [r4, #0]
 80141d8:	f8cd a004 	str.w	sl, [sp, #4]
 80141dc:	6861      	ldr	r1, [r4, #4]
 80141de:	4628      	mov	r0, r5
 80141e0:	f7ff fee8 	bl	8013fb4 <__cvt>
 80141e4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80141e8:	2b47      	cmp	r3, #71	; 0x47
 80141ea:	4680      	mov	r8, r0
 80141ec:	d109      	bne.n	8014202 <_printf_float+0x126>
 80141ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141f0:	1cd8      	adds	r0, r3, #3
 80141f2:	db02      	blt.n	80141fa <_printf_float+0x11e>
 80141f4:	6862      	ldr	r2, [r4, #4]
 80141f6:	4293      	cmp	r3, r2
 80141f8:	dd47      	ble.n	801428a <_printf_float+0x1ae>
 80141fa:	f1aa 0a02 	sub.w	sl, sl, #2
 80141fe:	fa5f fa8a 	uxtb.w	sl, sl
 8014202:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014206:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014208:	d824      	bhi.n	8014254 <_printf_float+0x178>
 801420a:	3901      	subs	r1, #1
 801420c:	4652      	mov	r2, sl
 801420e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014212:	9109      	str	r1, [sp, #36]	; 0x24
 8014214:	f7ff ff2f 	bl	8014076 <__exponent>
 8014218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801421a:	1813      	adds	r3, r2, r0
 801421c:	2a01      	cmp	r2, #1
 801421e:	4681      	mov	r9, r0
 8014220:	6123      	str	r3, [r4, #16]
 8014222:	dc02      	bgt.n	801422a <_printf_float+0x14e>
 8014224:	6822      	ldr	r2, [r4, #0]
 8014226:	07d1      	lsls	r1, r2, #31
 8014228:	d501      	bpl.n	801422e <_printf_float+0x152>
 801422a:	3301      	adds	r3, #1
 801422c:	6123      	str	r3, [r4, #16]
 801422e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014232:	2b00      	cmp	r3, #0
 8014234:	d0a5      	beq.n	8014182 <_printf_float+0xa6>
 8014236:	232d      	movs	r3, #45	; 0x2d
 8014238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801423c:	e7a1      	b.n	8014182 <_printf_float+0xa6>
 801423e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014242:	f000 8177 	beq.w	8014534 <_printf_float+0x458>
 8014246:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801424a:	d1bb      	bne.n	80141c4 <_printf_float+0xe8>
 801424c:	2900      	cmp	r1, #0
 801424e:	d1b9      	bne.n	80141c4 <_printf_float+0xe8>
 8014250:	2301      	movs	r3, #1
 8014252:	e7b6      	b.n	80141c2 <_printf_float+0xe6>
 8014254:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014258:	d119      	bne.n	801428e <_printf_float+0x1b2>
 801425a:	2900      	cmp	r1, #0
 801425c:	6863      	ldr	r3, [r4, #4]
 801425e:	dd0c      	ble.n	801427a <_printf_float+0x19e>
 8014260:	6121      	str	r1, [r4, #16]
 8014262:	b913      	cbnz	r3, 801426a <_printf_float+0x18e>
 8014264:	6822      	ldr	r2, [r4, #0]
 8014266:	07d2      	lsls	r2, r2, #31
 8014268:	d502      	bpl.n	8014270 <_printf_float+0x194>
 801426a:	3301      	adds	r3, #1
 801426c:	440b      	add	r3, r1
 801426e:	6123      	str	r3, [r4, #16]
 8014270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014272:	65a3      	str	r3, [r4, #88]	; 0x58
 8014274:	f04f 0900 	mov.w	r9, #0
 8014278:	e7d9      	b.n	801422e <_printf_float+0x152>
 801427a:	b913      	cbnz	r3, 8014282 <_printf_float+0x1a6>
 801427c:	6822      	ldr	r2, [r4, #0]
 801427e:	07d0      	lsls	r0, r2, #31
 8014280:	d501      	bpl.n	8014286 <_printf_float+0x1aa>
 8014282:	3302      	adds	r3, #2
 8014284:	e7f3      	b.n	801426e <_printf_float+0x192>
 8014286:	2301      	movs	r3, #1
 8014288:	e7f1      	b.n	801426e <_printf_float+0x192>
 801428a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801428e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014292:	4293      	cmp	r3, r2
 8014294:	db05      	blt.n	80142a2 <_printf_float+0x1c6>
 8014296:	6822      	ldr	r2, [r4, #0]
 8014298:	6123      	str	r3, [r4, #16]
 801429a:	07d1      	lsls	r1, r2, #31
 801429c:	d5e8      	bpl.n	8014270 <_printf_float+0x194>
 801429e:	3301      	adds	r3, #1
 80142a0:	e7e5      	b.n	801426e <_printf_float+0x192>
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	bfd4      	ite	le
 80142a6:	f1c3 0302 	rsble	r3, r3, #2
 80142aa:	2301      	movgt	r3, #1
 80142ac:	4413      	add	r3, r2
 80142ae:	e7de      	b.n	801426e <_printf_float+0x192>
 80142b0:	6823      	ldr	r3, [r4, #0]
 80142b2:	055a      	lsls	r2, r3, #21
 80142b4:	d407      	bmi.n	80142c6 <_printf_float+0x1ea>
 80142b6:	6923      	ldr	r3, [r4, #16]
 80142b8:	4642      	mov	r2, r8
 80142ba:	4631      	mov	r1, r6
 80142bc:	4628      	mov	r0, r5
 80142be:	47b8      	blx	r7
 80142c0:	3001      	adds	r0, #1
 80142c2:	d12b      	bne.n	801431c <_printf_float+0x240>
 80142c4:	e767      	b.n	8014196 <_printf_float+0xba>
 80142c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80142ca:	f240 80dc 	bls.w	8014486 <_printf_float+0x3aa>
 80142ce:	2200      	movs	r2, #0
 80142d0:	2300      	movs	r3, #0
 80142d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80142d6:	f7f4 fb2f 	bl	8008938 <__aeabi_dcmpeq>
 80142da:	2800      	cmp	r0, #0
 80142dc:	d033      	beq.n	8014346 <_printf_float+0x26a>
 80142de:	2301      	movs	r3, #1
 80142e0:	4a41      	ldr	r2, [pc, #260]	; (80143e8 <_printf_float+0x30c>)
 80142e2:	4631      	mov	r1, r6
 80142e4:	4628      	mov	r0, r5
 80142e6:	47b8      	blx	r7
 80142e8:	3001      	adds	r0, #1
 80142ea:	f43f af54 	beq.w	8014196 <_printf_float+0xba>
 80142ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80142f2:	429a      	cmp	r2, r3
 80142f4:	db02      	blt.n	80142fc <_printf_float+0x220>
 80142f6:	6823      	ldr	r3, [r4, #0]
 80142f8:	07d8      	lsls	r0, r3, #31
 80142fa:	d50f      	bpl.n	801431c <_printf_float+0x240>
 80142fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014300:	4631      	mov	r1, r6
 8014302:	4628      	mov	r0, r5
 8014304:	47b8      	blx	r7
 8014306:	3001      	adds	r0, #1
 8014308:	f43f af45 	beq.w	8014196 <_printf_float+0xba>
 801430c:	f04f 0800 	mov.w	r8, #0
 8014310:	f104 091a 	add.w	r9, r4, #26
 8014314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014316:	3b01      	subs	r3, #1
 8014318:	4543      	cmp	r3, r8
 801431a:	dc09      	bgt.n	8014330 <_printf_float+0x254>
 801431c:	6823      	ldr	r3, [r4, #0]
 801431e:	079b      	lsls	r3, r3, #30
 8014320:	f100 8103 	bmi.w	801452a <_printf_float+0x44e>
 8014324:	68e0      	ldr	r0, [r4, #12]
 8014326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014328:	4298      	cmp	r0, r3
 801432a:	bfb8      	it	lt
 801432c:	4618      	movlt	r0, r3
 801432e:	e734      	b.n	801419a <_printf_float+0xbe>
 8014330:	2301      	movs	r3, #1
 8014332:	464a      	mov	r2, r9
 8014334:	4631      	mov	r1, r6
 8014336:	4628      	mov	r0, r5
 8014338:	47b8      	blx	r7
 801433a:	3001      	adds	r0, #1
 801433c:	f43f af2b 	beq.w	8014196 <_printf_float+0xba>
 8014340:	f108 0801 	add.w	r8, r8, #1
 8014344:	e7e6      	b.n	8014314 <_printf_float+0x238>
 8014346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014348:	2b00      	cmp	r3, #0
 801434a:	dc2b      	bgt.n	80143a4 <_printf_float+0x2c8>
 801434c:	2301      	movs	r3, #1
 801434e:	4a26      	ldr	r2, [pc, #152]	; (80143e8 <_printf_float+0x30c>)
 8014350:	4631      	mov	r1, r6
 8014352:	4628      	mov	r0, r5
 8014354:	47b8      	blx	r7
 8014356:	3001      	adds	r0, #1
 8014358:	f43f af1d 	beq.w	8014196 <_printf_float+0xba>
 801435c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801435e:	b923      	cbnz	r3, 801436a <_printf_float+0x28e>
 8014360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014362:	b913      	cbnz	r3, 801436a <_printf_float+0x28e>
 8014364:	6823      	ldr	r3, [r4, #0]
 8014366:	07d9      	lsls	r1, r3, #31
 8014368:	d5d8      	bpl.n	801431c <_printf_float+0x240>
 801436a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801436e:	4631      	mov	r1, r6
 8014370:	4628      	mov	r0, r5
 8014372:	47b8      	blx	r7
 8014374:	3001      	adds	r0, #1
 8014376:	f43f af0e 	beq.w	8014196 <_printf_float+0xba>
 801437a:	f04f 0900 	mov.w	r9, #0
 801437e:	f104 0a1a 	add.w	sl, r4, #26
 8014382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014384:	425b      	negs	r3, r3
 8014386:	454b      	cmp	r3, r9
 8014388:	dc01      	bgt.n	801438e <_printf_float+0x2b2>
 801438a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801438c:	e794      	b.n	80142b8 <_printf_float+0x1dc>
 801438e:	2301      	movs	r3, #1
 8014390:	4652      	mov	r2, sl
 8014392:	4631      	mov	r1, r6
 8014394:	4628      	mov	r0, r5
 8014396:	47b8      	blx	r7
 8014398:	3001      	adds	r0, #1
 801439a:	f43f aefc 	beq.w	8014196 <_printf_float+0xba>
 801439e:	f109 0901 	add.w	r9, r9, #1
 80143a2:	e7ee      	b.n	8014382 <_printf_float+0x2a6>
 80143a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80143a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80143a8:	429a      	cmp	r2, r3
 80143aa:	bfa8      	it	ge
 80143ac:	461a      	movge	r2, r3
 80143ae:	2a00      	cmp	r2, #0
 80143b0:	4691      	mov	r9, r2
 80143b2:	dd07      	ble.n	80143c4 <_printf_float+0x2e8>
 80143b4:	4613      	mov	r3, r2
 80143b6:	4631      	mov	r1, r6
 80143b8:	4642      	mov	r2, r8
 80143ba:	4628      	mov	r0, r5
 80143bc:	47b8      	blx	r7
 80143be:	3001      	adds	r0, #1
 80143c0:	f43f aee9 	beq.w	8014196 <_printf_float+0xba>
 80143c4:	f104 031a 	add.w	r3, r4, #26
 80143c8:	f04f 0b00 	mov.w	fp, #0
 80143cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80143d0:	9306      	str	r3, [sp, #24]
 80143d2:	e015      	b.n	8014400 <_printf_float+0x324>
 80143d4:	7fefffff 	.word	0x7fefffff
 80143d8:	08019009 	.word	0x08019009
 80143dc:	08019005 	.word	0x08019005
 80143e0:	08019011 	.word	0x08019011
 80143e4:	0801900d 	.word	0x0801900d
 80143e8:	08019052 	.word	0x08019052
 80143ec:	2301      	movs	r3, #1
 80143ee:	9a06      	ldr	r2, [sp, #24]
 80143f0:	4631      	mov	r1, r6
 80143f2:	4628      	mov	r0, r5
 80143f4:	47b8      	blx	r7
 80143f6:	3001      	adds	r0, #1
 80143f8:	f43f aecd 	beq.w	8014196 <_printf_float+0xba>
 80143fc:	f10b 0b01 	add.w	fp, fp, #1
 8014400:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014404:	ebaa 0309 	sub.w	r3, sl, r9
 8014408:	455b      	cmp	r3, fp
 801440a:	dcef      	bgt.n	80143ec <_printf_float+0x310>
 801440c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014410:	429a      	cmp	r2, r3
 8014412:	44d0      	add	r8, sl
 8014414:	db15      	blt.n	8014442 <_printf_float+0x366>
 8014416:	6823      	ldr	r3, [r4, #0]
 8014418:	07da      	lsls	r2, r3, #31
 801441a:	d412      	bmi.n	8014442 <_printf_float+0x366>
 801441c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801441e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014420:	eba3 020a 	sub.w	r2, r3, sl
 8014424:	eba3 0a01 	sub.w	sl, r3, r1
 8014428:	4592      	cmp	sl, r2
 801442a:	bfa8      	it	ge
 801442c:	4692      	movge	sl, r2
 801442e:	f1ba 0f00 	cmp.w	sl, #0
 8014432:	dc0e      	bgt.n	8014452 <_printf_float+0x376>
 8014434:	f04f 0800 	mov.w	r8, #0
 8014438:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801443c:	f104 091a 	add.w	r9, r4, #26
 8014440:	e019      	b.n	8014476 <_printf_float+0x39a>
 8014442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014446:	4631      	mov	r1, r6
 8014448:	4628      	mov	r0, r5
 801444a:	47b8      	blx	r7
 801444c:	3001      	adds	r0, #1
 801444e:	d1e5      	bne.n	801441c <_printf_float+0x340>
 8014450:	e6a1      	b.n	8014196 <_printf_float+0xba>
 8014452:	4653      	mov	r3, sl
 8014454:	4642      	mov	r2, r8
 8014456:	4631      	mov	r1, r6
 8014458:	4628      	mov	r0, r5
 801445a:	47b8      	blx	r7
 801445c:	3001      	adds	r0, #1
 801445e:	d1e9      	bne.n	8014434 <_printf_float+0x358>
 8014460:	e699      	b.n	8014196 <_printf_float+0xba>
 8014462:	2301      	movs	r3, #1
 8014464:	464a      	mov	r2, r9
 8014466:	4631      	mov	r1, r6
 8014468:	4628      	mov	r0, r5
 801446a:	47b8      	blx	r7
 801446c:	3001      	adds	r0, #1
 801446e:	f43f ae92 	beq.w	8014196 <_printf_float+0xba>
 8014472:	f108 0801 	add.w	r8, r8, #1
 8014476:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801447a:	1a9b      	subs	r3, r3, r2
 801447c:	eba3 030a 	sub.w	r3, r3, sl
 8014480:	4543      	cmp	r3, r8
 8014482:	dcee      	bgt.n	8014462 <_printf_float+0x386>
 8014484:	e74a      	b.n	801431c <_printf_float+0x240>
 8014486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014488:	2a01      	cmp	r2, #1
 801448a:	dc01      	bgt.n	8014490 <_printf_float+0x3b4>
 801448c:	07db      	lsls	r3, r3, #31
 801448e:	d53a      	bpl.n	8014506 <_printf_float+0x42a>
 8014490:	2301      	movs	r3, #1
 8014492:	4642      	mov	r2, r8
 8014494:	4631      	mov	r1, r6
 8014496:	4628      	mov	r0, r5
 8014498:	47b8      	blx	r7
 801449a:	3001      	adds	r0, #1
 801449c:	f43f ae7b 	beq.w	8014196 <_printf_float+0xba>
 80144a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80144a4:	4631      	mov	r1, r6
 80144a6:	4628      	mov	r0, r5
 80144a8:	47b8      	blx	r7
 80144aa:	3001      	adds	r0, #1
 80144ac:	f108 0801 	add.w	r8, r8, #1
 80144b0:	f43f ae71 	beq.w	8014196 <_printf_float+0xba>
 80144b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144b6:	2200      	movs	r2, #0
 80144b8:	f103 3aff 	add.w	sl, r3, #4294967295
 80144bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80144c0:	2300      	movs	r3, #0
 80144c2:	f7f4 fa39 	bl	8008938 <__aeabi_dcmpeq>
 80144c6:	b9c8      	cbnz	r0, 80144fc <_printf_float+0x420>
 80144c8:	4653      	mov	r3, sl
 80144ca:	4642      	mov	r2, r8
 80144cc:	4631      	mov	r1, r6
 80144ce:	4628      	mov	r0, r5
 80144d0:	47b8      	blx	r7
 80144d2:	3001      	adds	r0, #1
 80144d4:	d10e      	bne.n	80144f4 <_printf_float+0x418>
 80144d6:	e65e      	b.n	8014196 <_printf_float+0xba>
 80144d8:	2301      	movs	r3, #1
 80144da:	4652      	mov	r2, sl
 80144dc:	4631      	mov	r1, r6
 80144de:	4628      	mov	r0, r5
 80144e0:	47b8      	blx	r7
 80144e2:	3001      	adds	r0, #1
 80144e4:	f43f ae57 	beq.w	8014196 <_printf_float+0xba>
 80144e8:	f108 0801 	add.w	r8, r8, #1
 80144ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144ee:	3b01      	subs	r3, #1
 80144f0:	4543      	cmp	r3, r8
 80144f2:	dcf1      	bgt.n	80144d8 <_printf_float+0x3fc>
 80144f4:	464b      	mov	r3, r9
 80144f6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80144fa:	e6de      	b.n	80142ba <_printf_float+0x1de>
 80144fc:	f04f 0800 	mov.w	r8, #0
 8014500:	f104 0a1a 	add.w	sl, r4, #26
 8014504:	e7f2      	b.n	80144ec <_printf_float+0x410>
 8014506:	2301      	movs	r3, #1
 8014508:	e7df      	b.n	80144ca <_printf_float+0x3ee>
 801450a:	2301      	movs	r3, #1
 801450c:	464a      	mov	r2, r9
 801450e:	4631      	mov	r1, r6
 8014510:	4628      	mov	r0, r5
 8014512:	47b8      	blx	r7
 8014514:	3001      	adds	r0, #1
 8014516:	f43f ae3e 	beq.w	8014196 <_printf_float+0xba>
 801451a:	f108 0801 	add.w	r8, r8, #1
 801451e:	68e3      	ldr	r3, [r4, #12]
 8014520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014522:	1a9b      	subs	r3, r3, r2
 8014524:	4543      	cmp	r3, r8
 8014526:	dcf0      	bgt.n	801450a <_printf_float+0x42e>
 8014528:	e6fc      	b.n	8014324 <_printf_float+0x248>
 801452a:	f04f 0800 	mov.w	r8, #0
 801452e:	f104 0919 	add.w	r9, r4, #25
 8014532:	e7f4      	b.n	801451e <_printf_float+0x442>
 8014534:	2900      	cmp	r1, #0
 8014536:	f43f ae8b 	beq.w	8014250 <_printf_float+0x174>
 801453a:	2300      	movs	r3, #0
 801453c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014540:	ab09      	add	r3, sp, #36	; 0x24
 8014542:	9300      	str	r3, [sp, #0]
 8014544:	ec49 8b10 	vmov	d0, r8, r9
 8014548:	6022      	str	r2, [r4, #0]
 801454a:	f8cd a004 	str.w	sl, [sp, #4]
 801454e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014552:	4628      	mov	r0, r5
 8014554:	f7ff fd2e 	bl	8013fb4 <__cvt>
 8014558:	4680      	mov	r8, r0
 801455a:	e648      	b.n	80141ee <_printf_float+0x112>

0801455c <_printf_common>:
 801455c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014560:	4691      	mov	r9, r2
 8014562:	461f      	mov	r7, r3
 8014564:	688a      	ldr	r2, [r1, #8]
 8014566:	690b      	ldr	r3, [r1, #16]
 8014568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801456c:	4293      	cmp	r3, r2
 801456e:	bfb8      	it	lt
 8014570:	4613      	movlt	r3, r2
 8014572:	f8c9 3000 	str.w	r3, [r9]
 8014576:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801457a:	4606      	mov	r6, r0
 801457c:	460c      	mov	r4, r1
 801457e:	b112      	cbz	r2, 8014586 <_printf_common+0x2a>
 8014580:	3301      	adds	r3, #1
 8014582:	f8c9 3000 	str.w	r3, [r9]
 8014586:	6823      	ldr	r3, [r4, #0]
 8014588:	0699      	lsls	r1, r3, #26
 801458a:	bf42      	ittt	mi
 801458c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014590:	3302      	addmi	r3, #2
 8014592:	f8c9 3000 	strmi.w	r3, [r9]
 8014596:	6825      	ldr	r5, [r4, #0]
 8014598:	f015 0506 	ands.w	r5, r5, #6
 801459c:	d107      	bne.n	80145ae <_printf_common+0x52>
 801459e:	f104 0a19 	add.w	sl, r4, #25
 80145a2:	68e3      	ldr	r3, [r4, #12]
 80145a4:	f8d9 2000 	ldr.w	r2, [r9]
 80145a8:	1a9b      	subs	r3, r3, r2
 80145aa:	42ab      	cmp	r3, r5
 80145ac:	dc28      	bgt.n	8014600 <_printf_common+0xa4>
 80145ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80145b2:	6822      	ldr	r2, [r4, #0]
 80145b4:	3300      	adds	r3, #0
 80145b6:	bf18      	it	ne
 80145b8:	2301      	movne	r3, #1
 80145ba:	0692      	lsls	r2, r2, #26
 80145bc:	d42d      	bmi.n	801461a <_printf_common+0xbe>
 80145be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80145c2:	4639      	mov	r1, r7
 80145c4:	4630      	mov	r0, r6
 80145c6:	47c0      	blx	r8
 80145c8:	3001      	adds	r0, #1
 80145ca:	d020      	beq.n	801460e <_printf_common+0xb2>
 80145cc:	6823      	ldr	r3, [r4, #0]
 80145ce:	68e5      	ldr	r5, [r4, #12]
 80145d0:	f8d9 2000 	ldr.w	r2, [r9]
 80145d4:	f003 0306 	and.w	r3, r3, #6
 80145d8:	2b04      	cmp	r3, #4
 80145da:	bf08      	it	eq
 80145dc:	1aad      	subeq	r5, r5, r2
 80145de:	68a3      	ldr	r3, [r4, #8]
 80145e0:	6922      	ldr	r2, [r4, #16]
 80145e2:	bf0c      	ite	eq
 80145e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80145e8:	2500      	movne	r5, #0
 80145ea:	4293      	cmp	r3, r2
 80145ec:	bfc4      	itt	gt
 80145ee:	1a9b      	subgt	r3, r3, r2
 80145f0:	18ed      	addgt	r5, r5, r3
 80145f2:	f04f 0900 	mov.w	r9, #0
 80145f6:	341a      	adds	r4, #26
 80145f8:	454d      	cmp	r5, r9
 80145fa:	d11a      	bne.n	8014632 <_printf_common+0xd6>
 80145fc:	2000      	movs	r0, #0
 80145fe:	e008      	b.n	8014612 <_printf_common+0xb6>
 8014600:	2301      	movs	r3, #1
 8014602:	4652      	mov	r2, sl
 8014604:	4639      	mov	r1, r7
 8014606:	4630      	mov	r0, r6
 8014608:	47c0      	blx	r8
 801460a:	3001      	adds	r0, #1
 801460c:	d103      	bne.n	8014616 <_printf_common+0xba>
 801460e:	f04f 30ff 	mov.w	r0, #4294967295
 8014612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014616:	3501      	adds	r5, #1
 8014618:	e7c3      	b.n	80145a2 <_printf_common+0x46>
 801461a:	18e1      	adds	r1, r4, r3
 801461c:	1c5a      	adds	r2, r3, #1
 801461e:	2030      	movs	r0, #48	; 0x30
 8014620:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014624:	4422      	add	r2, r4
 8014626:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801462a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801462e:	3302      	adds	r3, #2
 8014630:	e7c5      	b.n	80145be <_printf_common+0x62>
 8014632:	2301      	movs	r3, #1
 8014634:	4622      	mov	r2, r4
 8014636:	4639      	mov	r1, r7
 8014638:	4630      	mov	r0, r6
 801463a:	47c0      	blx	r8
 801463c:	3001      	adds	r0, #1
 801463e:	d0e6      	beq.n	801460e <_printf_common+0xb2>
 8014640:	f109 0901 	add.w	r9, r9, #1
 8014644:	e7d8      	b.n	80145f8 <_printf_common+0x9c>
	...

08014648 <_printf_i>:
 8014648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801464c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014650:	460c      	mov	r4, r1
 8014652:	7e09      	ldrb	r1, [r1, #24]
 8014654:	b085      	sub	sp, #20
 8014656:	296e      	cmp	r1, #110	; 0x6e
 8014658:	4617      	mov	r7, r2
 801465a:	4606      	mov	r6, r0
 801465c:	4698      	mov	r8, r3
 801465e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014660:	f000 80b3 	beq.w	80147ca <_printf_i+0x182>
 8014664:	d822      	bhi.n	80146ac <_printf_i+0x64>
 8014666:	2963      	cmp	r1, #99	; 0x63
 8014668:	d036      	beq.n	80146d8 <_printf_i+0x90>
 801466a:	d80a      	bhi.n	8014682 <_printf_i+0x3a>
 801466c:	2900      	cmp	r1, #0
 801466e:	f000 80b9 	beq.w	80147e4 <_printf_i+0x19c>
 8014672:	2958      	cmp	r1, #88	; 0x58
 8014674:	f000 8083 	beq.w	801477e <_printf_i+0x136>
 8014678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801467c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014680:	e032      	b.n	80146e8 <_printf_i+0xa0>
 8014682:	2964      	cmp	r1, #100	; 0x64
 8014684:	d001      	beq.n	801468a <_printf_i+0x42>
 8014686:	2969      	cmp	r1, #105	; 0x69
 8014688:	d1f6      	bne.n	8014678 <_printf_i+0x30>
 801468a:	6820      	ldr	r0, [r4, #0]
 801468c:	6813      	ldr	r3, [r2, #0]
 801468e:	0605      	lsls	r5, r0, #24
 8014690:	f103 0104 	add.w	r1, r3, #4
 8014694:	d52a      	bpl.n	80146ec <_printf_i+0xa4>
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	6011      	str	r1, [r2, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	da03      	bge.n	80146a6 <_printf_i+0x5e>
 801469e:	222d      	movs	r2, #45	; 0x2d
 80146a0:	425b      	negs	r3, r3
 80146a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80146a6:	486f      	ldr	r0, [pc, #444]	; (8014864 <_printf_i+0x21c>)
 80146a8:	220a      	movs	r2, #10
 80146aa:	e039      	b.n	8014720 <_printf_i+0xd8>
 80146ac:	2973      	cmp	r1, #115	; 0x73
 80146ae:	f000 809d 	beq.w	80147ec <_printf_i+0x1a4>
 80146b2:	d808      	bhi.n	80146c6 <_printf_i+0x7e>
 80146b4:	296f      	cmp	r1, #111	; 0x6f
 80146b6:	d020      	beq.n	80146fa <_printf_i+0xb2>
 80146b8:	2970      	cmp	r1, #112	; 0x70
 80146ba:	d1dd      	bne.n	8014678 <_printf_i+0x30>
 80146bc:	6823      	ldr	r3, [r4, #0]
 80146be:	f043 0320 	orr.w	r3, r3, #32
 80146c2:	6023      	str	r3, [r4, #0]
 80146c4:	e003      	b.n	80146ce <_printf_i+0x86>
 80146c6:	2975      	cmp	r1, #117	; 0x75
 80146c8:	d017      	beq.n	80146fa <_printf_i+0xb2>
 80146ca:	2978      	cmp	r1, #120	; 0x78
 80146cc:	d1d4      	bne.n	8014678 <_printf_i+0x30>
 80146ce:	2378      	movs	r3, #120	; 0x78
 80146d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80146d4:	4864      	ldr	r0, [pc, #400]	; (8014868 <_printf_i+0x220>)
 80146d6:	e055      	b.n	8014784 <_printf_i+0x13c>
 80146d8:	6813      	ldr	r3, [r2, #0]
 80146da:	1d19      	adds	r1, r3, #4
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	6011      	str	r1, [r2, #0]
 80146e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80146e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80146e8:	2301      	movs	r3, #1
 80146ea:	e08c      	b.n	8014806 <_printf_i+0x1be>
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	6011      	str	r1, [r2, #0]
 80146f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80146f4:	bf18      	it	ne
 80146f6:	b21b      	sxthne	r3, r3
 80146f8:	e7cf      	b.n	801469a <_printf_i+0x52>
 80146fa:	6813      	ldr	r3, [r2, #0]
 80146fc:	6825      	ldr	r5, [r4, #0]
 80146fe:	1d18      	adds	r0, r3, #4
 8014700:	6010      	str	r0, [r2, #0]
 8014702:	0628      	lsls	r0, r5, #24
 8014704:	d501      	bpl.n	801470a <_printf_i+0xc2>
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	e002      	b.n	8014710 <_printf_i+0xc8>
 801470a:	0668      	lsls	r0, r5, #25
 801470c:	d5fb      	bpl.n	8014706 <_printf_i+0xbe>
 801470e:	881b      	ldrh	r3, [r3, #0]
 8014710:	4854      	ldr	r0, [pc, #336]	; (8014864 <_printf_i+0x21c>)
 8014712:	296f      	cmp	r1, #111	; 0x6f
 8014714:	bf14      	ite	ne
 8014716:	220a      	movne	r2, #10
 8014718:	2208      	moveq	r2, #8
 801471a:	2100      	movs	r1, #0
 801471c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014720:	6865      	ldr	r5, [r4, #4]
 8014722:	60a5      	str	r5, [r4, #8]
 8014724:	2d00      	cmp	r5, #0
 8014726:	f2c0 8095 	blt.w	8014854 <_printf_i+0x20c>
 801472a:	6821      	ldr	r1, [r4, #0]
 801472c:	f021 0104 	bic.w	r1, r1, #4
 8014730:	6021      	str	r1, [r4, #0]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d13d      	bne.n	80147b2 <_printf_i+0x16a>
 8014736:	2d00      	cmp	r5, #0
 8014738:	f040 808e 	bne.w	8014858 <_printf_i+0x210>
 801473c:	4665      	mov	r5, ip
 801473e:	2a08      	cmp	r2, #8
 8014740:	d10b      	bne.n	801475a <_printf_i+0x112>
 8014742:	6823      	ldr	r3, [r4, #0]
 8014744:	07db      	lsls	r3, r3, #31
 8014746:	d508      	bpl.n	801475a <_printf_i+0x112>
 8014748:	6923      	ldr	r3, [r4, #16]
 801474a:	6862      	ldr	r2, [r4, #4]
 801474c:	429a      	cmp	r2, r3
 801474e:	bfde      	ittt	le
 8014750:	2330      	movle	r3, #48	; 0x30
 8014752:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014756:	f105 35ff 	addle.w	r5, r5, #4294967295
 801475a:	ebac 0305 	sub.w	r3, ip, r5
 801475e:	6123      	str	r3, [r4, #16]
 8014760:	f8cd 8000 	str.w	r8, [sp]
 8014764:	463b      	mov	r3, r7
 8014766:	aa03      	add	r2, sp, #12
 8014768:	4621      	mov	r1, r4
 801476a:	4630      	mov	r0, r6
 801476c:	f7ff fef6 	bl	801455c <_printf_common>
 8014770:	3001      	adds	r0, #1
 8014772:	d14d      	bne.n	8014810 <_printf_i+0x1c8>
 8014774:	f04f 30ff 	mov.w	r0, #4294967295
 8014778:	b005      	add	sp, #20
 801477a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801477e:	4839      	ldr	r0, [pc, #228]	; (8014864 <_printf_i+0x21c>)
 8014780:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014784:	6813      	ldr	r3, [r2, #0]
 8014786:	6821      	ldr	r1, [r4, #0]
 8014788:	1d1d      	adds	r5, r3, #4
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	6015      	str	r5, [r2, #0]
 801478e:	060a      	lsls	r2, r1, #24
 8014790:	d50b      	bpl.n	80147aa <_printf_i+0x162>
 8014792:	07ca      	lsls	r2, r1, #31
 8014794:	bf44      	itt	mi
 8014796:	f041 0120 	orrmi.w	r1, r1, #32
 801479a:	6021      	strmi	r1, [r4, #0]
 801479c:	b91b      	cbnz	r3, 80147a6 <_printf_i+0x15e>
 801479e:	6822      	ldr	r2, [r4, #0]
 80147a0:	f022 0220 	bic.w	r2, r2, #32
 80147a4:	6022      	str	r2, [r4, #0]
 80147a6:	2210      	movs	r2, #16
 80147a8:	e7b7      	b.n	801471a <_printf_i+0xd2>
 80147aa:	064d      	lsls	r5, r1, #25
 80147ac:	bf48      	it	mi
 80147ae:	b29b      	uxthmi	r3, r3
 80147b0:	e7ef      	b.n	8014792 <_printf_i+0x14a>
 80147b2:	4665      	mov	r5, ip
 80147b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80147b8:	fb02 3311 	mls	r3, r2, r1, r3
 80147bc:	5cc3      	ldrb	r3, [r0, r3]
 80147be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80147c2:	460b      	mov	r3, r1
 80147c4:	2900      	cmp	r1, #0
 80147c6:	d1f5      	bne.n	80147b4 <_printf_i+0x16c>
 80147c8:	e7b9      	b.n	801473e <_printf_i+0xf6>
 80147ca:	6813      	ldr	r3, [r2, #0]
 80147cc:	6825      	ldr	r5, [r4, #0]
 80147ce:	6961      	ldr	r1, [r4, #20]
 80147d0:	1d18      	adds	r0, r3, #4
 80147d2:	6010      	str	r0, [r2, #0]
 80147d4:	0628      	lsls	r0, r5, #24
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	d501      	bpl.n	80147de <_printf_i+0x196>
 80147da:	6019      	str	r1, [r3, #0]
 80147dc:	e002      	b.n	80147e4 <_printf_i+0x19c>
 80147de:	066a      	lsls	r2, r5, #25
 80147e0:	d5fb      	bpl.n	80147da <_printf_i+0x192>
 80147e2:	8019      	strh	r1, [r3, #0]
 80147e4:	2300      	movs	r3, #0
 80147e6:	6123      	str	r3, [r4, #16]
 80147e8:	4665      	mov	r5, ip
 80147ea:	e7b9      	b.n	8014760 <_printf_i+0x118>
 80147ec:	6813      	ldr	r3, [r2, #0]
 80147ee:	1d19      	adds	r1, r3, #4
 80147f0:	6011      	str	r1, [r2, #0]
 80147f2:	681d      	ldr	r5, [r3, #0]
 80147f4:	6862      	ldr	r2, [r4, #4]
 80147f6:	2100      	movs	r1, #0
 80147f8:	4628      	mov	r0, r5
 80147fa:	f7f3 fc29 	bl	8008050 <memchr>
 80147fe:	b108      	cbz	r0, 8014804 <_printf_i+0x1bc>
 8014800:	1b40      	subs	r0, r0, r5
 8014802:	6060      	str	r0, [r4, #4]
 8014804:	6863      	ldr	r3, [r4, #4]
 8014806:	6123      	str	r3, [r4, #16]
 8014808:	2300      	movs	r3, #0
 801480a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801480e:	e7a7      	b.n	8014760 <_printf_i+0x118>
 8014810:	6923      	ldr	r3, [r4, #16]
 8014812:	462a      	mov	r2, r5
 8014814:	4639      	mov	r1, r7
 8014816:	4630      	mov	r0, r6
 8014818:	47c0      	blx	r8
 801481a:	3001      	adds	r0, #1
 801481c:	d0aa      	beq.n	8014774 <_printf_i+0x12c>
 801481e:	6823      	ldr	r3, [r4, #0]
 8014820:	079b      	lsls	r3, r3, #30
 8014822:	d413      	bmi.n	801484c <_printf_i+0x204>
 8014824:	68e0      	ldr	r0, [r4, #12]
 8014826:	9b03      	ldr	r3, [sp, #12]
 8014828:	4298      	cmp	r0, r3
 801482a:	bfb8      	it	lt
 801482c:	4618      	movlt	r0, r3
 801482e:	e7a3      	b.n	8014778 <_printf_i+0x130>
 8014830:	2301      	movs	r3, #1
 8014832:	464a      	mov	r2, r9
 8014834:	4639      	mov	r1, r7
 8014836:	4630      	mov	r0, r6
 8014838:	47c0      	blx	r8
 801483a:	3001      	adds	r0, #1
 801483c:	d09a      	beq.n	8014774 <_printf_i+0x12c>
 801483e:	3501      	adds	r5, #1
 8014840:	68e3      	ldr	r3, [r4, #12]
 8014842:	9a03      	ldr	r2, [sp, #12]
 8014844:	1a9b      	subs	r3, r3, r2
 8014846:	42ab      	cmp	r3, r5
 8014848:	dcf2      	bgt.n	8014830 <_printf_i+0x1e8>
 801484a:	e7eb      	b.n	8014824 <_printf_i+0x1dc>
 801484c:	2500      	movs	r5, #0
 801484e:	f104 0919 	add.w	r9, r4, #25
 8014852:	e7f5      	b.n	8014840 <_printf_i+0x1f8>
 8014854:	2b00      	cmp	r3, #0
 8014856:	d1ac      	bne.n	80147b2 <_printf_i+0x16a>
 8014858:	7803      	ldrb	r3, [r0, #0]
 801485a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801485e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014862:	e76c      	b.n	801473e <_printf_i+0xf6>
 8014864:	08019015 	.word	0x08019015
 8014868:	08019026 	.word	0x08019026

0801486c <__svfiscanf_r>:
 801486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014870:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8014874:	460c      	mov	r4, r1
 8014876:	2100      	movs	r1, #0
 8014878:	9144      	str	r1, [sp, #272]	; 0x110
 801487a:	9145      	str	r1, [sp, #276]	; 0x114
 801487c:	499f      	ldr	r1, [pc, #636]	; (8014afc <__svfiscanf_r+0x290>)
 801487e:	91a0      	str	r1, [sp, #640]	; 0x280
 8014880:	f10d 0804 	add.w	r8, sp, #4
 8014884:	499e      	ldr	r1, [pc, #632]	; (8014b00 <__svfiscanf_r+0x294>)
 8014886:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8014b04 <__svfiscanf_r+0x298>
 801488a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801488e:	4606      	mov	r6, r0
 8014890:	4692      	mov	sl, r2
 8014892:	91a1      	str	r1, [sp, #644]	; 0x284
 8014894:	9300      	str	r3, [sp, #0]
 8014896:	270a      	movs	r7, #10
 8014898:	f89a 3000 	ldrb.w	r3, [sl]
 801489c:	2b00      	cmp	r3, #0
 801489e:	f000 812a 	beq.w	8014af6 <__svfiscanf_r+0x28a>
 80148a2:	4655      	mov	r5, sl
 80148a4:	f003 faec 	bl	8017e80 <__locale_ctype_ptr>
 80148a8:	f815 bb01 	ldrb.w	fp, [r5], #1
 80148ac:	4458      	add	r0, fp
 80148ae:	7843      	ldrb	r3, [r0, #1]
 80148b0:	f013 0308 	ands.w	r3, r3, #8
 80148b4:	d01c      	beq.n	80148f0 <__svfiscanf_r+0x84>
 80148b6:	6863      	ldr	r3, [r4, #4]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	dd12      	ble.n	80148e2 <__svfiscanf_r+0x76>
 80148bc:	f003 fae0 	bl	8017e80 <__locale_ctype_ptr>
 80148c0:	6823      	ldr	r3, [r4, #0]
 80148c2:	781a      	ldrb	r2, [r3, #0]
 80148c4:	4410      	add	r0, r2
 80148c6:	7842      	ldrb	r2, [r0, #1]
 80148c8:	0712      	lsls	r2, r2, #28
 80148ca:	d401      	bmi.n	80148d0 <__svfiscanf_r+0x64>
 80148cc:	46aa      	mov	sl, r5
 80148ce:	e7e3      	b.n	8014898 <__svfiscanf_r+0x2c>
 80148d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80148d2:	3201      	adds	r2, #1
 80148d4:	9245      	str	r2, [sp, #276]	; 0x114
 80148d6:	6862      	ldr	r2, [r4, #4]
 80148d8:	3301      	adds	r3, #1
 80148da:	3a01      	subs	r2, #1
 80148dc:	6062      	str	r2, [r4, #4]
 80148de:	6023      	str	r3, [r4, #0]
 80148e0:	e7e9      	b.n	80148b6 <__svfiscanf_r+0x4a>
 80148e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80148e4:	4621      	mov	r1, r4
 80148e6:	4630      	mov	r0, r6
 80148e8:	4798      	blx	r3
 80148ea:	2800      	cmp	r0, #0
 80148ec:	d0e6      	beq.n	80148bc <__svfiscanf_r+0x50>
 80148ee:	e7ed      	b.n	80148cc <__svfiscanf_r+0x60>
 80148f0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80148f4:	f040 8082 	bne.w	80149fc <__svfiscanf_r+0x190>
 80148f8:	9343      	str	r3, [sp, #268]	; 0x10c
 80148fa:	9341      	str	r3, [sp, #260]	; 0x104
 80148fc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8014900:	2b2a      	cmp	r3, #42	; 0x2a
 8014902:	d103      	bne.n	801490c <__svfiscanf_r+0xa0>
 8014904:	2310      	movs	r3, #16
 8014906:	9341      	str	r3, [sp, #260]	; 0x104
 8014908:	f10a 0502 	add.w	r5, sl, #2
 801490c:	46aa      	mov	sl, r5
 801490e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8014912:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014916:	2a09      	cmp	r2, #9
 8014918:	d922      	bls.n	8014960 <__svfiscanf_r+0xf4>
 801491a:	2203      	movs	r2, #3
 801491c:	4879      	ldr	r0, [pc, #484]	; (8014b04 <__svfiscanf_r+0x298>)
 801491e:	f7f3 fb97 	bl	8008050 <memchr>
 8014922:	b138      	cbz	r0, 8014934 <__svfiscanf_r+0xc8>
 8014924:	eba0 0309 	sub.w	r3, r0, r9
 8014928:	2001      	movs	r0, #1
 801492a:	4098      	lsls	r0, r3
 801492c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801492e:	4318      	orrs	r0, r3
 8014930:	9041      	str	r0, [sp, #260]	; 0x104
 8014932:	46aa      	mov	sl, r5
 8014934:	f89a 3000 	ldrb.w	r3, [sl]
 8014938:	2b67      	cmp	r3, #103	; 0x67
 801493a:	f10a 0501 	add.w	r5, sl, #1
 801493e:	d82b      	bhi.n	8014998 <__svfiscanf_r+0x12c>
 8014940:	2b65      	cmp	r3, #101	; 0x65
 8014942:	f080 809f 	bcs.w	8014a84 <__svfiscanf_r+0x218>
 8014946:	2b47      	cmp	r3, #71	; 0x47
 8014948:	d810      	bhi.n	801496c <__svfiscanf_r+0x100>
 801494a:	2b45      	cmp	r3, #69	; 0x45
 801494c:	f080 809a 	bcs.w	8014a84 <__svfiscanf_r+0x218>
 8014950:	2b00      	cmp	r3, #0
 8014952:	d06c      	beq.n	8014a2e <__svfiscanf_r+0x1c2>
 8014954:	2b25      	cmp	r3, #37	; 0x25
 8014956:	d051      	beq.n	80149fc <__svfiscanf_r+0x190>
 8014958:	2303      	movs	r3, #3
 801495a:	9347      	str	r3, [sp, #284]	; 0x11c
 801495c:	9742      	str	r7, [sp, #264]	; 0x108
 801495e:	e027      	b.n	80149b0 <__svfiscanf_r+0x144>
 8014960:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014962:	fb07 1303 	mla	r3, r7, r3, r1
 8014966:	3b30      	subs	r3, #48	; 0x30
 8014968:	9343      	str	r3, [sp, #268]	; 0x10c
 801496a:	e7cf      	b.n	801490c <__svfiscanf_r+0xa0>
 801496c:	2b5b      	cmp	r3, #91	; 0x5b
 801496e:	d06a      	beq.n	8014a46 <__svfiscanf_r+0x1da>
 8014970:	d80c      	bhi.n	801498c <__svfiscanf_r+0x120>
 8014972:	2b58      	cmp	r3, #88	; 0x58
 8014974:	d1f0      	bne.n	8014958 <__svfiscanf_r+0xec>
 8014976:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801497c:	9241      	str	r2, [sp, #260]	; 0x104
 801497e:	2210      	movs	r2, #16
 8014980:	9242      	str	r2, [sp, #264]	; 0x108
 8014982:	2b6e      	cmp	r3, #110	; 0x6e
 8014984:	bf8c      	ite	hi
 8014986:	2304      	movhi	r3, #4
 8014988:	2303      	movls	r3, #3
 801498a:	e010      	b.n	80149ae <__svfiscanf_r+0x142>
 801498c:	2b63      	cmp	r3, #99	; 0x63
 801498e:	d065      	beq.n	8014a5c <__svfiscanf_r+0x1f0>
 8014990:	2b64      	cmp	r3, #100	; 0x64
 8014992:	d1e1      	bne.n	8014958 <__svfiscanf_r+0xec>
 8014994:	9742      	str	r7, [sp, #264]	; 0x108
 8014996:	e7f4      	b.n	8014982 <__svfiscanf_r+0x116>
 8014998:	2b70      	cmp	r3, #112	; 0x70
 801499a:	d04b      	beq.n	8014a34 <__svfiscanf_r+0x1c8>
 801499c:	d826      	bhi.n	80149ec <__svfiscanf_r+0x180>
 801499e:	2b6e      	cmp	r3, #110	; 0x6e
 80149a0:	d062      	beq.n	8014a68 <__svfiscanf_r+0x1fc>
 80149a2:	d84c      	bhi.n	8014a3e <__svfiscanf_r+0x1d2>
 80149a4:	2b69      	cmp	r3, #105	; 0x69
 80149a6:	d1d7      	bne.n	8014958 <__svfiscanf_r+0xec>
 80149a8:	2300      	movs	r3, #0
 80149aa:	9342      	str	r3, [sp, #264]	; 0x108
 80149ac:	2303      	movs	r3, #3
 80149ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80149b0:	6863      	ldr	r3, [r4, #4]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	dd68      	ble.n	8014a88 <__svfiscanf_r+0x21c>
 80149b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80149b8:	0659      	lsls	r1, r3, #25
 80149ba:	d407      	bmi.n	80149cc <__svfiscanf_r+0x160>
 80149bc:	f003 fa60 	bl	8017e80 <__locale_ctype_ptr>
 80149c0:	6823      	ldr	r3, [r4, #0]
 80149c2:	781a      	ldrb	r2, [r3, #0]
 80149c4:	4410      	add	r0, r2
 80149c6:	7842      	ldrb	r2, [r0, #1]
 80149c8:	0712      	lsls	r2, r2, #28
 80149ca:	d464      	bmi.n	8014a96 <__svfiscanf_r+0x22a>
 80149cc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80149ce:	2b02      	cmp	r3, #2
 80149d0:	dc73      	bgt.n	8014aba <__svfiscanf_r+0x24e>
 80149d2:	466b      	mov	r3, sp
 80149d4:	4622      	mov	r2, r4
 80149d6:	a941      	add	r1, sp, #260	; 0x104
 80149d8:	4630      	mov	r0, r6
 80149da:	f000 faa1 	bl	8014f20 <_scanf_chars>
 80149de:	2801      	cmp	r0, #1
 80149e0:	f000 8089 	beq.w	8014af6 <__svfiscanf_r+0x28a>
 80149e4:	2802      	cmp	r0, #2
 80149e6:	f47f af71 	bne.w	80148cc <__svfiscanf_r+0x60>
 80149ea:	e01d      	b.n	8014a28 <__svfiscanf_r+0x1bc>
 80149ec:	2b75      	cmp	r3, #117	; 0x75
 80149ee:	d0d1      	beq.n	8014994 <__svfiscanf_r+0x128>
 80149f0:	2b78      	cmp	r3, #120	; 0x78
 80149f2:	d0c0      	beq.n	8014976 <__svfiscanf_r+0x10a>
 80149f4:	2b73      	cmp	r3, #115	; 0x73
 80149f6:	d1af      	bne.n	8014958 <__svfiscanf_r+0xec>
 80149f8:	2302      	movs	r3, #2
 80149fa:	e7d8      	b.n	80149ae <__svfiscanf_r+0x142>
 80149fc:	6863      	ldr	r3, [r4, #4]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	dd0c      	ble.n	8014a1c <__svfiscanf_r+0x1b0>
 8014a02:	6823      	ldr	r3, [r4, #0]
 8014a04:	781a      	ldrb	r2, [r3, #0]
 8014a06:	455a      	cmp	r2, fp
 8014a08:	d175      	bne.n	8014af6 <__svfiscanf_r+0x28a>
 8014a0a:	3301      	adds	r3, #1
 8014a0c:	6862      	ldr	r2, [r4, #4]
 8014a0e:	6023      	str	r3, [r4, #0]
 8014a10:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8014a12:	3a01      	subs	r2, #1
 8014a14:	3301      	adds	r3, #1
 8014a16:	6062      	str	r2, [r4, #4]
 8014a18:	9345      	str	r3, [sp, #276]	; 0x114
 8014a1a:	e757      	b.n	80148cc <__svfiscanf_r+0x60>
 8014a1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014a1e:	4621      	mov	r1, r4
 8014a20:	4630      	mov	r0, r6
 8014a22:	4798      	blx	r3
 8014a24:	2800      	cmp	r0, #0
 8014a26:	d0ec      	beq.n	8014a02 <__svfiscanf_r+0x196>
 8014a28:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014a2a:	2800      	cmp	r0, #0
 8014a2c:	d159      	bne.n	8014ae2 <__svfiscanf_r+0x276>
 8014a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8014a32:	e05c      	b.n	8014aee <__svfiscanf_r+0x282>
 8014a34:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014a36:	f042 0220 	orr.w	r2, r2, #32
 8014a3a:	9241      	str	r2, [sp, #260]	; 0x104
 8014a3c:	e79b      	b.n	8014976 <__svfiscanf_r+0x10a>
 8014a3e:	2308      	movs	r3, #8
 8014a40:	9342      	str	r3, [sp, #264]	; 0x108
 8014a42:	2304      	movs	r3, #4
 8014a44:	e7b3      	b.n	80149ae <__svfiscanf_r+0x142>
 8014a46:	4629      	mov	r1, r5
 8014a48:	4640      	mov	r0, r8
 8014a4a:	f000 fe6d 	bl	8015728 <__sccl>
 8014a4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a54:	9341      	str	r3, [sp, #260]	; 0x104
 8014a56:	4605      	mov	r5, r0
 8014a58:	2301      	movs	r3, #1
 8014a5a:	e7a8      	b.n	80149ae <__svfiscanf_r+0x142>
 8014a5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a62:	9341      	str	r3, [sp, #260]	; 0x104
 8014a64:	2300      	movs	r3, #0
 8014a66:	e7a2      	b.n	80149ae <__svfiscanf_r+0x142>
 8014a68:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014a6a:	06c3      	lsls	r3, r0, #27
 8014a6c:	f53f af2e 	bmi.w	80148cc <__svfiscanf_r+0x60>
 8014a70:	9b00      	ldr	r3, [sp, #0]
 8014a72:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014a74:	1d19      	adds	r1, r3, #4
 8014a76:	9100      	str	r1, [sp, #0]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	07c0      	lsls	r0, r0, #31
 8014a7c:	bf4c      	ite	mi
 8014a7e:	801a      	strhmi	r2, [r3, #0]
 8014a80:	601a      	strpl	r2, [r3, #0]
 8014a82:	e723      	b.n	80148cc <__svfiscanf_r+0x60>
 8014a84:	2305      	movs	r3, #5
 8014a86:	e792      	b.n	80149ae <__svfiscanf_r+0x142>
 8014a88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014a8a:	4621      	mov	r1, r4
 8014a8c:	4630      	mov	r0, r6
 8014a8e:	4798      	blx	r3
 8014a90:	2800      	cmp	r0, #0
 8014a92:	d090      	beq.n	80149b6 <__svfiscanf_r+0x14a>
 8014a94:	e7c8      	b.n	8014a28 <__svfiscanf_r+0x1bc>
 8014a96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014a98:	3201      	adds	r2, #1
 8014a9a:	9245      	str	r2, [sp, #276]	; 0x114
 8014a9c:	6862      	ldr	r2, [r4, #4]
 8014a9e:	3a01      	subs	r2, #1
 8014aa0:	2a00      	cmp	r2, #0
 8014aa2:	6062      	str	r2, [r4, #4]
 8014aa4:	dd02      	ble.n	8014aac <__svfiscanf_r+0x240>
 8014aa6:	3301      	adds	r3, #1
 8014aa8:	6023      	str	r3, [r4, #0]
 8014aaa:	e787      	b.n	80149bc <__svfiscanf_r+0x150>
 8014aac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014aae:	4621      	mov	r1, r4
 8014ab0:	4630      	mov	r0, r6
 8014ab2:	4798      	blx	r3
 8014ab4:	2800      	cmp	r0, #0
 8014ab6:	d081      	beq.n	80149bc <__svfiscanf_r+0x150>
 8014ab8:	e7b6      	b.n	8014a28 <__svfiscanf_r+0x1bc>
 8014aba:	2b04      	cmp	r3, #4
 8014abc:	dc06      	bgt.n	8014acc <__svfiscanf_r+0x260>
 8014abe:	466b      	mov	r3, sp
 8014ac0:	4622      	mov	r2, r4
 8014ac2:	a941      	add	r1, sp, #260	; 0x104
 8014ac4:	4630      	mov	r0, r6
 8014ac6:	f000 fa8f 	bl	8014fe8 <_scanf_i>
 8014aca:	e788      	b.n	80149de <__svfiscanf_r+0x172>
 8014acc:	4b0e      	ldr	r3, [pc, #56]	; (8014b08 <__svfiscanf_r+0x29c>)
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	f43f aefc 	beq.w	80148cc <__svfiscanf_r+0x60>
 8014ad4:	466b      	mov	r3, sp
 8014ad6:	4622      	mov	r2, r4
 8014ad8:	a941      	add	r1, sp, #260	; 0x104
 8014ada:	4630      	mov	r0, r6
 8014adc:	f000 f83e 	bl	8014b5c <_scanf_float>
 8014ae0:	e77d      	b.n	80149de <__svfiscanf_r+0x172>
 8014ae2:	89a3      	ldrh	r3, [r4, #12]
 8014ae4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014ae8:	bf18      	it	ne
 8014aea:	f04f 30ff 	movne.w	r0, #4294967295
 8014aee:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8014af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014af6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014af8:	e7f9      	b.n	8014aee <__svfiscanf_r+0x282>
 8014afa:	bf00      	nop
 8014afc:	080168b9 	.word	0x080168b9
 8014b00:	080155c1 	.word	0x080155c1
 8014b04:	08018ffa 	.word	0x08018ffa
 8014b08:	08014b5d 	.word	0x08014b5d

08014b0c <_vfiscanf_r>:
 8014b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b10:	460c      	mov	r4, r1
 8014b12:	4616      	mov	r6, r2
 8014b14:	461f      	mov	r7, r3
 8014b16:	4605      	mov	r5, r0
 8014b18:	b118      	cbz	r0, 8014b22 <_vfiscanf_r+0x16>
 8014b1a:	6983      	ldr	r3, [r0, #24]
 8014b1c:	b90b      	cbnz	r3, 8014b22 <_vfiscanf_r+0x16>
 8014b1e:	f7fe ff1f 	bl	8013960 <__sinit>
 8014b22:	4b0b      	ldr	r3, [pc, #44]	; (8014b50 <_vfiscanf_r+0x44>)
 8014b24:	429c      	cmp	r4, r3
 8014b26:	d108      	bne.n	8014b3a <_vfiscanf_r+0x2e>
 8014b28:	686c      	ldr	r4, [r5, #4]
 8014b2a:	463b      	mov	r3, r7
 8014b2c:	4632      	mov	r2, r6
 8014b2e:	4621      	mov	r1, r4
 8014b30:	4628      	mov	r0, r5
 8014b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b36:	f7ff be99 	b.w	801486c <__svfiscanf_r>
 8014b3a:	4b06      	ldr	r3, [pc, #24]	; (8014b54 <_vfiscanf_r+0x48>)
 8014b3c:	429c      	cmp	r4, r3
 8014b3e:	d101      	bne.n	8014b44 <_vfiscanf_r+0x38>
 8014b40:	68ac      	ldr	r4, [r5, #8]
 8014b42:	e7f2      	b.n	8014b2a <_vfiscanf_r+0x1e>
 8014b44:	4b04      	ldr	r3, [pc, #16]	; (8014b58 <_vfiscanf_r+0x4c>)
 8014b46:	429c      	cmp	r4, r3
 8014b48:	bf08      	it	eq
 8014b4a:	68ec      	ldreq	r4, [r5, #12]
 8014b4c:	e7ed      	b.n	8014b2a <_vfiscanf_r+0x1e>
 8014b4e:	bf00      	nop
 8014b50:	08018fb0 	.word	0x08018fb0
 8014b54:	08018fd0 	.word	0x08018fd0
 8014b58:	08018f90 	.word	0x08018f90

08014b5c <_scanf_float>:
 8014b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b60:	469a      	mov	sl, r3
 8014b62:	688b      	ldr	r3, [r1, #8]
 8014b64:	4616      	mov	r6, r2
 8014b66:	1e5a      	subs	r2, r3, #1
 8014b68:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014b6c:	b087      	sub	sp, #28
 8014b6e:	bf83      	ittte	hi
 8014b70:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8014b74:	189b      	addhi	r3, r3, r2
 8014b76:	9301      	strhi	r3, [sp, #4]
 8014b78:	2300      	movls	r3, #0
 8014b7a:	bf86      	itte	hi
 8014b7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014b80:	608b      	strhi	r3, [r1, #8]
 8014b82:	9301      	strls	r3, [sp, #4]
 8014b84:	680b      	ldr	r3, [r1, #0]
 8014b86:	4688      	mov	r8, r1
 8014b88:	f04f 0b00 	mov.w	fp, #0
 8014b8c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014b90:	f848 3b1c 	str.w	r3, [r8], #28
 8014b94:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8014b98:	4607      	mov	r7, r0
 8014b9a:	460c      	mov	r4, r1
 8014b9c:	4645      	mov	r5, r8
 8014b9e:	465a      	mov	r2, fp
 8014ba0:	46d9      	mov	r9, fp
 8014ba2:	f8cd b008 	str.w	fp, [sp, #8]
 8014ba6:	68a1      	ldr	r1, [r4, #8]
 8014ba8:	b181      	cbz	r1, 8014bcc <_scanf_float+0x70>
 8014baa:	6833      	ldr	r3, [r6, #0]
 8014bac:	781b      	ldrb	r3, [r3, #0]
 8014bae:	2b49      	cmp	r3, #73	; 0x49
 8014bb0:	d071      	beq.n	8014c96 <_scanf_float+0x13a>
 8014bb2:	d84d      	bhi.n	8014c50 <_scanf_float+0xf4>
 8014bb4:	2b39      	cmp	r3, #57	; 0x39
 8014bb6:	d840      	bhi.n	8014c3a <_scanf_float+0xde>
 8014bb8:	2b31      	cmp	r3, #49	; 0x31
 8014bba:	f080 8088 	bcs.w	8014cce <_scanf_float+0x172>
 8014bbe:	2b2d      	cmp	r3, #45	; 0x2d
 8014bc0:	f000 8090 	beq.w	8014ce4 <_scanf_float+0x188>
 8014bc4:	d815      	bhi.n	8014bf2 <_scanf_float+0x96>
 8014bc6:	2b2b      	cmp	r3, #43	; 0x2b
 8014bc8:	f000 808c 	beq.w	8014ce4 <_scanf_float+0x188>
 8014bcc:	f1b9 0f00 	cmp.w	r9, #0
 8014bd0:	d003      	beq.n	8014bda <_scanf_float+0x7e>
 8014bd2:	6823      	ldr	r3, [r4, #0]
 8014bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014bd8:	6023      	str	r3, [r4, #0]
 8014bda:	3a01      	subs	r2, #1
 8014bdc:	2a01      	cmp	r2, #1
 8014bde:	f200 80ea 	bhi.w	8014db6 <_scanf_float+0x25a>
 8014be2:	4545      	cmp	r5, r8
 8014be4:	f200 80dc 	bhi.w	8014da0 <_scanf_float+0x244>
 8014be8:	2601      	movs	r6, #1
 8014bea:	4630      	mov	r0, r6
 8014bec:	b007      	add	sp, #28
 8014bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8014bf4:	f000 809f 	beq.w	8014d36 <_scanf_float+0x1da>
 8014bf8:	2b30      	cmp	r3, #48	; 0x30
 8014bfa:	d1e7      	bne.n	8014bcc <_scanf_float+0x70>
 8014bfc:	6820      	ldr	r0, [r4, #0]
 8014bfe:	f410 7f80 	tst.w	r0, #256	; 0x100
 8014c02:	d064      	beq.n	8014cce <_scanf_float+0x172>
 8014c04:	9b01      	ldr	r3, [sp, #4]
 8014c06:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8014c0a:	6020      	str	r0, [r4, #0]
 8014c0c:	f109 0901 	add.w	r9, r9, #1
 8014c10:	b11b      	cbz	r3, 8014c1a <_scanf_float+0xbe>
 8014c12:	3b01      	subs	r3, #1
 8014c14:	3101      	adds	r1, #1
 8014c16:	9301      	str	r3, [sp, #4]
 8014c18:	60a1      	str	r1, [r4, #8]
 8014c1a:	68a3      	ldr	r3, [r4, #8]
 8014c1c:	3b01      	subs	r3, #1
 8014c1e:	60a3      	str	r3, [r4, #8]
 8014c20:	6923      	ldr	r3, [r4, #16]
 8014c22:	3301      	adds	r3, #1
 8014c24:	6123      	str	r3, [r4, #16]
 8014c26:	6873      	ldr	r3, [r6, #4]
 8014c28:	3b01      	subs	r3, #1
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	6073      	str	r3, [r6, #4]
 8014c2e:	f340 80ac 	ble.w	8014d8a <_scanf_float+0x22e>
 8014c32:	6833      	ldr	r3, [r6, #0]
 8014c34:	3301      	adds	r3, #1
 8014c36:	6033      	str	r3, [r6, #0]
 8014c38:	e7b5      	b.n	8014ba6 <_scanf_float+0x4a>
 8014c3a:	2b45      	cmp	r3, #69	; 0x45
 8014c3c:	f000 8085 	beq.w	8014d4a <_scanf_float+0x1ee>
 8014c40:	2b46      	cmp	r3, #70	; 0x46
 8014c42:	d06a      	beq.n	8014d1a <_scanf_float+0x1be>
 8014c44:	2b41      	cmp	r3, #65	; 0x41
 8014c46:	d1c1      	bne.n	8014bcc <_scanf_float+0x70>
 8014c48:	2a01      	cmp	r2, #1
 8014c4a:	d1bf      	bne.n	8014bcc <_scanf_float+0x70>
 8014c4c:	2202      	movs	r2, #2
 8014c4e:	e046      	b.n	8014cde <_scanf_float+0x182>
 8014c50:	2b65      	cmp	r3, #101	; 0x65
 8014c52:	d07a      	beq.n	8014d4a <_scanf_float+0x1ee>
 8014c54:	d818      	bhi.n	8014c88 <_scanf_float+0x12c>
 8014c56:	2b54      	cmp	r3, #84	; 0x54
 8014c58:	d066      	beq.n	8014d28 <_scanf_float+0x1cc>
 8014c5a:	d811      	bhi.n	8014c80 <_scanf_float+0x124>
 8014c5c:	2b4e      	cmp	r3, #78	; 0x4e
 8014c5e:	d1b5      	bne.n	8014bcc <_scanf_float+0x70>
 8014c60:	2a00      	cmp	r2, #0
 8014c62:	d146      	bne.n	8014cf2 <_scanf_float+0x196>
 8014c64:	f1b9 0f00 	cmp.w	r9, #0
 8014c68:	d145      	bne.n	8014cf6 <_scanf_float+0x19a>
 8014c6a:	6821      	ldr	r1, [r4, #0]
 8014c6c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014c70:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014c74:	d13f      	bne.n	8014cf6 <_scanf_float+0x19a>
 8014c76:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014c7a:	6021      	str	r1, [r4, #0]
 8014c7c:	2201      	movs	r2, #1
 8014c7e:	e02e      	b.n	8014cde <_scanf_float+0x182>
 8014c80:	2b59      	cmp	r3, #89	; 0x59
 8014c82:	d01e      	beq.n	8014cc2 <_scanf_float+0x166>
 8014c84:	2b61      	cmp	r3, #97	; 0x61
 8014c86:	e7de      	b.n	8014c46 <_scanf_float+0xea>
 8014c88:	2b6e      	cmp	r3, #110	; 0x6e
 8014c8a:	d0e9      	beq.n	8014c60 <_scanf_float+0x104>
 8014c8c:	d815      	bhi.n	8014cba <_scanf_float+0x15e>
 8014c8e:	2b66      	cmp	r3, #102	; 0x66
 8014c90:	d043      	beq.n	8014d1a <_scanf_float+0x1be>
 8014c92:	2b69      	cmp	r3, #105	; 0x69
 8014c94:	d19a      	bne.n	8014bcc <_scanf_float+0x70>
 8014c96:	f1bb 0f00 	cmp.w	fp, #0
 8014c9a:	d138      	bne.n	8014d0e <_scanf_float+0x1b2>
 8014c9c:	f1b9 0f00 	cmp.w	r9, #0
 8014ca0:	d197      	bne.n	8014bd2 <_scanf_float+0x76>
 8014ca2:	6821      	ldr	r1, [r4, #0]
 8014ca4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014ca8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014cac:	d195      	bne.n	8014bda <_scanf_float+0x7e>
 8014cae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014cb2:	6021      	str	r1, [r4, #0]
 8014cb4:	f04f 0b01 	mov.w	fp, #1
 8014cb8:	e011      	b.n	8014cde <_scanf_float+0x182>
 8014cba:	2b74      	cmp	r3, #116	; 0x74
 8014cbc:	d034      	beq.n	8014d28 <_scanf_float+0x1cc>
 8014cbe:	2b79      	cmp	r3, #121	; 0x79
 8014cc0:	d184      	bne.n	8014bcc <_scanf_float+0x70>
 8014cc2:	f1bb 0f07 	cmp.w	fp, #7
 8014cc6:	d181      	bne.n	8014bcc <_scanf_float+0x70>
 8014cc8:	f04f 0b08 	mov.w	fp, #8
 8014ccc:	e007      	b.n	8014cde <_scanf_float+0x182>
 8014cce:	eb12 0f0b 	cmn.w	r2, fp
 8014cd2:	f47f af7b 	bne.w	8014bcc <_scanf_float+0x70>
 8014cd6:	6821      	ldr	r1, [r4, #0]
 8014cd8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8014cdc:	6021      	str	r1, [r4, #0]
 8014cde:	702b      	strb	r3, [r5, #0]
 8014ce0:	3501      	adds	r5, #1
 8014ce2:	e79a      	b.n	8014c1a <_scanf_float+0xbe>
 8014ce4:	6821      	ldr	r1, [r4, #0]
 8014ce6:	0608      	lsls	r0, r1, #24
 8014ce8:	f57f af70 	bpl.w	8014bcc <_scanf_float+0x70>
 8014cec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014cf0:	e7f4      	b.n	8014cdc <_scanf_float+0x180>
 8014cf2:	2a02      	cmp	r2, #2
 8014cf4:	d047      	beq.n	8014d86 <_scanf_float+0x22a>
 8014cf6:	f1bb 0f01 	cmp.w	fp, #1
 8014cfa:	d003      	beq.n	8014d04 <_scanf_float+0x1a8>
 8014cfc:	f1bb 0f04 	cmp.w	fp, #4
 8014d00:	f47f af64 	bne.w	8014bcc <_scanf_float+0x70>
 8014d04:	f10b 0b01 	add.w	fp, fp, #1
 8014d08:	fa5f fb8b 	uxtb.w	fp, fp
 8014d0c:	e7e7      	b.n	8014cde <_scanf_float+0x182>
 8014d0e:	f1bb 0f03 	cmp.w	fp, #3
 8014d12:	d0f7      	beq.n	8014d04 <_scanf_float+0x1a8>
 8014d14:	f1bb 0f05 	cmp.w	fp, #5
 8014d18:	e7f2      	b.n	8014d00 <_scanf_float+0x1a4>
 8014d1a:	f1bb 0f02 	cmp.w	fp, #2
 8014d1e:	f47f af55 	bne.w	8014bcc <_scanf_float+0x70>
 8014d22:	f04f 0b03 	mov.w	fp, #3
 8014d26:	e7da      	b.n	8014cde <_scanf_float+0x182>
 8014d28:	f1bb 0f06 	cmp.w	fp, #6
 8014d2c:	f47f af4e 	bne.w	8014bcc <_scanf_float+0x70>
 8014d30:	f04f 0b07 	mov.w	fp, #7
 8014d34:	e7d3      	b.n	8014cde <_scanf_float+0x182>
 8014d36:	6821      	ldr	r1, [r4, #0]
 8014d38:	0588      	lsls	r0, r1, #22
 8014d3a:	f57f af47 	bpl.w	8014bcc <_scanf_float+0x70>
 8014d3e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8014d42:	6021      	str	r1, [r4, #0]
 8014d44:	f8cd 9008 	str.w	r9, [sp, #8]
 8014d48:	e7c9      	b.n	8014cde <_scanf_float+0x182>
 8014d4a:	6821      	ldr	r1, [r4, #0]
 8014d4c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8014d50:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014d54:	d006      	beq.n	8014d64 <_scanf_float+0x208>
 8014d56:	0548      	lsls	r0, r1, #21
 8014d58:	f57f af38 	bpl.w	8014bcc <_scanf_float+0x70>
 8014d5c:	f1b9 0f00 	cmp.w	r9, #0
 8014d60:	f43f af3b 	beq.w	8014bda <_scanf_float+0x7e>
 8014d64:	0588      	lsls	r0, r1, #22
 8014d66:	bf58      	it	pl
 8014d68:	9802      	ldrpl	r0, [sp, #8]
 8014d6a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014d6e:	bf58      	it	pl
 8014d70:	eba9 0000 	subpl.w	r0, r9, r0
 8014d74:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8014d78:	bf58      	it	pl
 8014d7a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8014d7e:	6021      	str	r1, [r4, #0]
 8014d80:	f04f 0900 	mov.w	r9, #0
 8014d84:	e7ab      	b.n	8014cde <_scanf_float+0x182>
 8014d86:	2203      	movs	r2, #3
 8014d88:	e7a9      	b.n	8014cde <_scanf_float+0x182>
 8014d8a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014d8e:	9205      	str	r2, [sp, #20]
 8014d90:	4631      	mov	r1, r6
 8014d92:	4638      	mov	r0, r7
 8014d94:	4798      	blx	r3
 8014d96:	9a05      	ldr	r2, [sp, #20]
 8014d98:	2800      	cmp	r0, #0
 8014d9a:	f43f af04 	beq.w	8014ba6 <_scanf_float+0x4a>
 8014d9e:	e715      	b.n	8014bcc <_scanf_float+0x70>
 8014da0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014da4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014da8:	4632      	mov	r2, r6
 8014daa:	4638      	mov	r0, r7
 8014dac:	4798      	blx	r3
 8014dae:	6923      	ldr	r3, [r4, #16]
 8014db0:	3b01      	subs	r3, #1
 8014db2:	6123      	str	r3, [r4, #16]
 8014db4:	e715      	b.n	8014be2 <_scanf_float+0x86>
 8014db6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8014dba:	2b06      	cmp	r3, #6
 8014dbc:	d80a      	bhi.n	8014dd4 <_scanf_float+0x278>
 8014dbe:	f1bb 0f02 	cmp.w	fp, #2
 8014dc2:	d968      	bls.n	8014e96 <_scanf_float+0x33a>
 8014dc4:	f1ab 0b03 	sub.w	fp, fp, #3
 8014dc8:	fa5f fb8b 	uxtb.w	fp, fp
 8014dcc:	eba5 0b0b 	sub.w	fp, r5, fp
 8014dd0:	455d      	cmp	r5, fp
 8014dd2:	d14b      	bne.n	8014e6c <_scanf_float+0x310>
 8014dd4:	6823      	ldr	r3, [r4, #0]
 8014dd6:	05da      	lsls	r2, r3, #23
 8014dd8:	d51f      	bpl.n	8014e1a <_scanf_float+0x2be>
 8014dda:	055b      	lsls	r3, r3, #21
 8014ddc:	d468      	bmi.n	8014eb0 <_scanf_float+0x354>
 8014dde:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014de2:	6923      	ldr	r3, [r4, #16]
 8014de4:	2965      	cmp	r1, #101	; 0x65
 8014de6:	f103 33ff 	add.w	r3, r3, #4294967295
 8014dea:	f105 3bff 	add.w	fp, r5, #4294967295
 8014dee:	6123      	str	r3, [r4, #16]
 8014df0:	d00d      	beq.n	8014e0e <_scanf_float+0x2b2>
 8014df2:	2945      	cmp	r1, #69	; 0x45
 8014df4:	d00b      	beq.n	8014e0e <_scanf_float+0x2b2>
 8014df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014dfa:	4632      	mov	r2, r6
 8014dfc:	4638      	mov	r0, r7
 8014dfe:	4798      	blx	r3
 8014e00:	6923      	ldr	r3, [r4, #16]
 8014e02:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8014e06:	3b01      	subs	r3, #1
 8014e08:	f1a5 0b02 	sub.w	fp, r5, #2
 8014e0c:	6123      	str	r3, [r4, #16]
 8014e0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014e12:	4632      	mov	r2, r6
 8014e14:	4638      	mov	r0, r7
 8014e16:	4798      	blx	r3
 8014e18:	465d      	mov	r5, fp
 8014e1a:	6826      	ldr	r6, [r4, #0]
 8014e1c:	f016 0610 	ands.w	r6, r6, #16
 8014e20:	d17a      	bne.n	8014f18 <_scanf_float+0x3bc>
 8014e22:	702e      	strb	r6, [r5, #0]
 8014e24:	6823      	ldr	r3, [r4, #0]
 8014e26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014e2e:	d142      	bne.n	8014eb6 <_scanf_float+0x35a>
 8014e30:	9b02      	ldr	r3, [sp, #8]
 8014e32:	eba9 0303 	sub.w	r3, r9, r3
 8014e36:	425a      	negs	r2, r3
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d149      	bne.n	8014ed0 <_scanf_float+0x374>
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	4641      	mov	r1, r8
 8014e40:	4638      	mov	r0, r7
 8014e42:	f001 fbd5 	bl	80165f0 <_strtod_r>
 8014e46:	6825      	ldr	r5, [r4, #0]
 8014e48:	f8da 3000 	ldr.w	r3, [sl]
 8014e4c:	f015 0f02 	tst.w	r5, #2
 8014e50:	f103 0204 	add.w	r2, r3, #4
 8014e54:	ec59 8b10 	vmov	r8, r9, d0
 8014e58:	f8ca 2000 	str.w	r2, [sl]
 8014e5c:	d043      	beq.n	8014ee6 <_scanf_float+0x38a>
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	e9c3 8900 	strd	r8, r9, [r3]
 8014e64:	68e3      	ldr	r3, [r4, #12]
 8014e66:	3301      	adds	r3, #1
 8014e68:	60e3      	str	r3, [r4, #12]
 8014e6a:	e6be      	b.n	8014bea <_scanf_float+0x8e>
 8014e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014e70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014e74:	4632      	mov	r2, r6
 8014e76:	4638      	mov	r0, r7
 8014e78:	4798      	blx	r3
 8014e7a:	6923      	ldr	r3, [r4, #16]
 8014e7c:	3b01      	subs	r3, #1
 8014e7e:	6123      	str	r3, [r4, #16]
 8014e80:	e7a6      	b.n	8014dd0 <_scanf_float+0x274>
 8014e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014e86:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014e8a:	4632      	mov	r2, r6
 8014e8c:	4638      	mov	r0, r7
 8014e8e:	4798      	blx	r3
 8014e90:	6923      	ldr	r3, [r4, #16]
 8014e92:	3b01      	subs	r3, #1
 8014e94:	6123      	str	r3, [r4, #16]
 8014e96:	4545      	cmp	r5, r8
 8014e98:	d8f3      	bhi.n	8014e82 <_scanf_float+0x326>
 8014e9a:	e6a5      	b.n	8014be8 <_scanf_float+0x8c>
 8014e9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014ea0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014ea4:	4632      	mov	r2, r6
 8014ea6:	4638      	mov	r0, r7
 8014ea8:	4798      	blx	r3
 8014eaa:	6923      	ldr	r3, [r4, #16]
 8014eac:	3b01      	subs	r3, #1
 8014eae:	6123      	str	r3, [r4, #16]
 8014eb0:	4545      	cmp	r5, r8
 8014eb2:	d8f3      	bhi.n	8014e9c <_scanf_float+0x340>
 8014eb4:	e698      	b.n	8014be8 <_scanf_float+0x8c>
 8014eb6:	9b03      	ldr	r3, [sp, #12]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d0bf      	beq.n	8014e3c <_scanf_float+0x2e0>
 8014ebc:	9904      	ldr	r1, [sp, #16]
 8014ebe:	230a      	movs	r3, #10
 8014ec0:	4632      	mov	r2, r6
 8014ec2:	3101      	adds	r1, #1
 8014ec4:	4638      	mov	r0, r7
 8014ec6:	f001 fc1f 	bl	8016708 <_strtol_r>
 8014eca:	9b03      	ldr	r3, [sp, #12]
 8014ecc:	9d04      	ldr	r5, [sp, #16]
 8014ece:	1ac2      	subs	r2, r0, r3
 8014ed0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014ed4:	429d      	cmp	r5, r3
 8014ed6:	bf28      	it	cs
 8014ed8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8014edc:	490f      	ldr	r1, [pc, #60]	; (8014f1c <_scanf_float+0x3c0>)
 8014ede:	4628      	mov	r0, r5
 8014ee0:	f000 fd10 	bl	8015904 <siprintf>
 8014ee4:	e7aa      	b.n	8014e3c <_scanf_float+0x2e0>
 8014ee6:	f015 0504 	ands.w	r5, r5, #4
 8014eea:	d1b8      	bne.n	8014e5e <_scanf_float+0x302>
 8014eec:	681f      	ldr	r7, [r3, #0]
 8014eee:	ee10 2a10 	vmov	r2, s0
 8014ef2:	464b      	mov	r3, r9
 8014ef4:	ee10 0a10 	vmov	r0, s0
 8014ef8:	4649      	mov	r1, r9
 8014efa:	f7f3 fd4f 	bl	800899c <__aeabi_dcmpun>
 8014efe:	b128      	cbz	r0, 8014f0c <_scanf_float+0x3b0>
 8014f00:	4628      	mov	r0, r5
 8014f02:	f000 fcf9 	bl	80158f8 <nanf>
 8014f06:	ed87 0a00 	vstr	s0, [r7]
 8014f0a:	e7ab      	b.n	8014e64 <_scanf_float+0x308>
 8014f0c:	4640      	mov	r0, r8
 8014f0e:	4649      	mov	r1, r9
 8014f10:	f7f3 fda2 	bl	8008a58 <__aeabi_d2f>
 8014f14:	6038      	str	r0, [r7, #0]
 8014f16:	e7a5      	b.n	8014e64 <_scanf_float+0x308>
 8014f18:	2600      	movs	r6, #0
 8014f1a:	e666      	b.n	8014bea <_scanf_float+0x8e>
 8014f1c:	08019037 	.word	0x08019037

08014f20 <_scanf_chars>:
 8014f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f24:	4615      	mov	r5, r2
 8014f26:	688a      	ldr	r2, [r1, #8]
 8014f28:	4680      	mov	r8, r0
 8014f2a:	460c      	mov	r4, r1
 8014f2c:	b932      	cbnz	r2, 8014f3c <_scanf_chars+0x1c>
 8014f2e:	698a      	ldr	r2, [r1, #24]
 8014f30:	2a00      	cmp	r2, #0
 8014f32:	bf14      	ite	ne
 8014f34:	f04f 32ff 	movne.w	r2, #4294967295
 8014f38:	2201      	moveq	r2, #1
 8014f3a:	608a      	str	r2, [r1, #8]
 8014f3c:	6822      	ldr	r2, [r4, #0]
 8014f3e:	06d1      	lsls	r1, r2, #27
 8014f40:	bf5f      	itttt	pl
 8014f42:	681a      	ldrpl	r2, [r3, #0]
 8014f44:	1d11      	addpl	r1, r2, #4
 8014f46:	6019      	strpl	r1, [r3, #0]
 8014f48:	6817      	ldrpl	r7, [r2, #0]
 8014f4a:	2600      	movs	r6, #0
 8014f4c:	69a3      	ldr	r3, [r4, #24]
 8014f4e:	b1db      	cbz	r3, 8014f88 <_scanf_chars+0x68>
 8014f50:	2b01      	cmp	r3, #1
 8014f52:	d107      	bne.n	8014f64 <_scanf_chars+0x44>
 8014f54:	682b      	ldr	r3, [r5, #0]
 8014f56:	6962      	ldr	r2, [r4, #20]
 8014f58:	781b      	ldrb	r3, [r3, #0]
 8014f5a:	5cd3      	ldrb	r3, [r2, r3]
 8014f5c:	b9a3      	cbnz	r3, 8014f88 <_scanf_chars+0x68>
 8014f5e:	2e00      	cmp	r6, #0
 8014f60:	d132      	bne.n	8014fc8 <_scanf_chars+0xa8>
 8014f62:	e006      	b.n	8014f72 <_scanf_chars+0x52>
 8014f64:	2b02      	cmp	r3, #2
 8014f66:	d007      	beq.n	8014f78 <_scanf_chars+0x58>
 8014f68:	2e00      	cmp	r6, #0
 8014f6a:	d12d      	bne.n	8014fc8 <_scanf_chars+0xa8>
 8014f6c:	69a3      	ldr	r3, [r4, #24]
 8014f6e:	2b01      	cmp	r3, #1
 8014f70:	d12a      	bne.n	8014fc8 <_scanf_chars+0xa8>
 8014f72:	2001      	movs	r0, #1
 8014f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f78:	f002 ff82 	bl	8017e80 <__locale_ctype_ptr>
 8014f7c:	682b      	ldr	r3, [r5, #0]
 8014f7e:	781b      	ldrb	r3, [r3, #0]
 8014f80:	4418      	add	r0, r3
 8014f82:	7843      	ldrb	r3, [r0, #1]
 8014f84:	071b      	lsls	r3, r3, #28
 8014f86:	d4ef      	bmi.n	8014f68 <_scanf_chars+0x48>
 8014f88:	6823      	ldr	r3, [r4, #0]
 8014f8a:	06da      	lsls	r2, r3, #27
 8014f8c:	bf5e      	ittt	pl
 8014f8e:	682b      	ldrpl	r3, [r5, #0]
 8014f90:	781b      	ldrbpl	r3, [r3, #0]
 8014f92:	703b      	strbpl	r3, [r7, #0]
 8014f94:	682a      	ldr	r2, [r5, #0]
 8014f96:	686b      	ldr	r3, [r5, #4]
 8014f98:	f102 0201 	add.w	r2, r2, #1
 8014f9c:	602a      	str	r2, [r5, #0]
 8014f9e:	68a2      	ldr	r2, [r4, #8]
 8014fa0:	f103 33ff 	add.w	r3, r3, #4294967295
 8014fa4:	f102 32ff 	add.w	r2, r2, #4294967295
 8014fa8:	606b      	str	r3, [r5, #4]
 8014faa:	f106 0601 	add.w	r6, r6, #1
 8014fae:	bf58      	it	pl
 8014fb0:	3701      	addpl	r7, #1
 8014fb2:	60a2      	str	r2, [r4, #8]
 8014fb4:	b142      	cbz	r2, 8014fc8 <_scanf_chars+0xa8>
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	dcc8      	bgt.n	8014f4c <_scanf_chars+0x2c>
 8014fba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014fbe:	4629      	mov	r1, r5
 8014fc0:	4640      	mov	r0, r8
 8014fc2:	4798      	blx	r3
 8014fc4:	2800      	cmp	r0, #0
 8014fc6:	d0c1      	beq.n	8014f4c <_scanf_chars+0x2c>
 8014fc8:	6823      	ldr	r3, [r4, #0]
 8014fca:	f013 0310 	ands.w	r3, r3, #16
 8014fce:	d105      	bne.n	8014fdc <_scanf_chars+0xbc>
 8014fd0:	68e2      	ldr	r2, [r4, #12]
 8014fd2:	3201      	adds	r2, #1
 8014fd4:	60e2      	str	r2, [r4, #12]
 8014fd6:	69a2      	ldr	r2, [r4, #24]
 8014fd8:	b102      	cbz	r2, 8014fdc <_scanf_chars+0xbc>
 8014fda:	703b      	strb	r3, [r7, #0]
 8014fdc:	6923      	ldr	r3, [r4, #16]
 8014fde:	441e      	add	r6, r3
 8014fe0:	6126      	str	r6, [r4, #16]
 8014fe2:	2000      	movs	r0, #0
 8014fe4:	e7c6      	b.n	8014f74 <_scanf_chars+0x54>
	...

08014fe8 <_scanf_i>:
 8014fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fec:	469a      	mov	sl, r3
 8014fee:	4b74      	ldr	r3, [pc, #464]	; (80151c0 <_scanf_i+0x1d8>)
 8014ff0:	460c      	mov	r4, r1
 8014ff2:	4683      	mov	fp, r0
 8014ff4:	4616      	mov	r6, r2
 8014ff6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014ffa:	b087      	sub	sp, #28
 8014ffc:	ab03      	add	r3, sp, #12
 8014ffe:	68a7      	ldr	r7, [r4, #8]
 8015000:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015004:	4b6f      	ldr	r3, [pc, #444]	; (80151c4 <_scanf_i+0x1dc>)
 8015006:	69a1      	ldr	r1, [r4, #24]
 8015008:	4a6f      	ldr	r2, [pc, #444]	; (80151c8 <_scanf_i+0x1e0>)
 801500a:	2903      	cmp	r1, #3
 801500c:	bf08      	it	eq
 801500e:	461a      	moveq	r2, r3
 8015010:	1e7b      	subs	r3, r7, #1
 8015012:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8015016:	bf84      	itt	hi
 8015018:	f240 135d 	movwhi	r3, #349	; 0x15d
 801501c:	60a3      	strhi	r3, [r4, #8]
 801501e:	6823      	ldr	r3, [r4, #0]
 8015020:	9200      	str	r2, [sp, #0]
 8015022:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8015026:	bf88      	it	hi
 8015028:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801502c:	f104 091c 	add.w	r9, r4, #28
 8015030:	6023      	str	r3, [r4, #0]
 8015032:	bf8c      	ite	hi
 8015034:	197f      	addhi	r7, r7, r5
 8015036:	2700      	movls	r7, #0
 8015038:	464b      	mov	r3, r9
 801503a:	f04f 0800 	mov.w	r8, #0
 801503e:	9301      	str	r3, [sp, #4]
 8015040:	6831      	ldr	r1, [r6, #0]
 8015042:	ab03      	add	r3, sp, #12
 8015044:	2202      	movs	r2, #2
 8015046:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801504a:	7809      	ldrb	r1, [r1, #0]
 801504c:	f7f3 f800 	bl	8008050 <memchr>
 8015050:	9b01      	ldr	r3, [sp, #4]
 8015052:	b330      	cbz	r0, 80150a2 <_scanf_i+0xba>
 8015054:	f1b8 0f01 	cmp.w	r8, #1
 8015058:	d15a      	bne.n	8015110 <_scanf_i+0x128>
 801505a:	6862      	ldr	r2, [r4, #4]
 801505c:	b92a      	cbnz	r2, 801506a <_scanf_i+0x82>
 801505e:	6822      	ldr	r2, [r4, #0]
 8015060:	2108      	movs	r1, #8
 8015062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015066:	6061      	str	r1, [r4, #4]
 8015068:	6022      	str	r2, [r4, #0]
 801506a:	6822      	ldr	r2, [r4, #0]
 801506c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8015070:	6022      	str	r2, [r4, #0]
 8015072:	68a2      	ldr	r2, [r4, #8]
 8015074:	1e51      	subs	r1, r2, #1
 8015076:	60a1      	str	r1, [r4, #8]
 8015078:	b19a      	cbz	r2, 80150a2 <_scanf_i+0xba>
 801507a:	6832      	ldr	r2, [r6, #0]
 801507c:	1c51      	adds	r1, r2, #1
 801507e:	6031      	str	r1, [r6, #0]
 8015080:	7812      	ldrb	r2, [r2, #0]
 8015082:	701a      	strb	r2, [r3, #0]
 8015084:	1c5d      	adds	r5, r3, #1
 8015086:	6873      	ldr	r3, [r6, #4]
 8015088:	3b01      	subs	r3, #1
 801508a:	2b00      	cmp	r3, #0
 801508c:	6073      	str	r3, [r6, #4]
 801508e:	dc07      	bgt.n	80150a0 <_scanf_i+0xb8>
 8015090:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015094:	4631      	mov	r1, r6
 8015096:	4658      	mov	r0, fp
 8015098:	4798      	blx	r3
 801509a:	2800      	cmp	r0, #0
 801509c:	f040 8086 	bne.w	80151ac <_scanf_i+0x1c4>
 80150a0:	462b      	mov	r3, r5
 80150a2:	f108 0801 	add.w	r8, r8, #1
 80150a6:	f1b8 0f03 	cmp.w	r8, #3
 80150aa:	d1c8      	bne.n	801503e <_scanf_i+0x56>
 80150ac:	6862      	ldr	r2, [r4, #4]
 80150ae:	b90a      	cbnz	r2, 80150b4 <_scanf_i+0xcc>
 80150b0:	220a      	movs	r2, #10
 80150b2:	6062      	str	r2, [r4, #4]
 80150b4:	6862      	ldr	r2, [r4, #4]
 80150b6:	4945      	ldr	r1, [pc, #276]	; (80151cc <_scanf_i+0x1e4>)
 80150b8:	6960      	ldr	r0, [r4, #20]
 80150ba:	9301      	str	r3, [sp, #4]
 80150bc:	1a89      	subs	r1, r1, r2
 80150be:	f000 fb33 	bl	8015728 <__sccl>
 80150c2:	9b01      	ldr	r3, [sp, #4]
 80150c4:	f04f 0800 	mov.w	r8, #0
 80150c8:	461d      	mov	r5, r3
 80150ca:	68a3      	ldr	r3, [r4, #8]
 80150cc:	6822      	ldr	r2, [r4, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d03a      	beq.n	8015148 <_scanf_i+0x160>
 80150d2:	6831      	ldr	r1, [r6, #0]
 80150d4:	6960      	ldr	r0, [r4, #20]
 80150d6:	f891 c000 	ldrb.w	ip, [r1]
 80150da:	f810 000c 	ldrb.w	r0, [r0, ip]
 80150de:	2800      	cmp	r0, #0
 80150e0:	d032      	beq.n	8015148 <_scanf_i+0x160>
 80150e2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80150e6:	d121      	bne.n	801512c <_scanf_i+0x144>
 80150e8:	0510      	lsls	r0, r2, #20
 80150ea:	d51f      	bpl.n	801512c <_scanf_i+0x144>
 80150ec:	f108 0801 	add.w	r8, r8, #1
 80150f0:	b117      	cbz	r7, 80150f8 <_scanf_i+0x110>
 80150f2:	3301      	adds	r3, #1
 80150f4:	3f01      	subs	r7, #1
 80150f6:	60a3      	str	r3, [r4, #8]
 80150f8:	6873      	ldr	r3, [r6, #4]
 80150fa:	3b01      	subs	r3, #1
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	6073      	str	r3, [r6, #4]
 8015100:	dd1b      	ble.n	801513a <_scanf_i+0x152>
 8015102:	6833      	ldr	r3, [r6, #0]
 8015104:	3301      	adds	r3, #1
 8015106:	6033      	str	r3, [r6, #0]
 8015108:	68a3      	ldr	r3, [r4, #8]
 801510a:	3b01      	subs	r3, #1
 801510c:	60a3      	str	r3, [r4, #8]
 801510e:	e7dc      	b.n	80150ca <_scanf_i+0xe2>
 8015110:	f1b8 0f02 	cmp.w	r8, #2
 8015114:	d1ad      	bne.n	8015072 <_scanf_i+0x8a>
 8015116:	6822      	ldr	r2, [r4, #0]
 8015118:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801511c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8015120:	d1bf      	bne.n	80150a2 <_scanf_i+0xba>
 8015122:	2110      	movs	r1, #16
 8015124:	6061      	str	r1, [r4, #4]
 8015126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801512a:	e7a1      	b.n	8015070 <_scanf_i+0x88>
 801512c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8015130:	6022      	str	r2, [r4, #0]
 8015132:	780b      	ldrb	r3, [r1, #0]
 8015134:	702b      	strb	r3, [r5, #0]
 8015136:	3501      	adds	r5, #1
 8015138:	e7de      	b.n	80150f8 <_scanf_i+0x110>
 801513a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801513e:	4631      	mov	r1, r6
 8015140:	4658      	mov	r0, fp
 8015142:	4798      	blx	r3
 8015144:	2800      	cmp	r0, #0
 8015146:	d0df      	beq.n	8015108 <_scanf_i+0x120>
 8015148:	6823      	ldr	r3, [r4, #0]
 801514a:	05d9      	lsls	r1, r3, #23
 801514c:	d50c      	bpl.n	8015168 <_scanf_i+0x180>
 801514e:	454d      	cmp	r5, r9
 8015150:	d908      	bls.n	8015164 <_scanf_i+0x17c>
 8015152:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015156:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801515a:	4632      	mov	r2, r6
 801515c:	4658      	mov	r0, fp
 801515e:	4798      	blx	r3
 8015160:	1e6f      	subs	r7, r5, #1
 8015162:	463d      	mov	r5, r7
 8015164:	454d      	cmp	r5, r9
 8015166:	d029      	beq.n	80151bc <_scanf_i+0x1d4>
 8015168:	6822      	ldr	r2, [r4, #0]
 801516a:	f012 0210 	ands.w	r2, r2, #16
 801516e:	d113      	bne.n	8015198 <_scanf_i+0x1b0>
 8015170:	702a      	strb	r2, [r5, #0]
 8015172:	6863      	ldr	r3, [r4, #4]
 8015174:	9e00      	ldr	r6, [sp, #0]
 8015176:	4649      	mov	r1, r9
 8015178:	4658      	mov	r0, fp
 801517a:	47b0      	blx	r6
 801517c:	f8da 3000 	ldr.w	r3, [sl]
 8015180:	6821      	ldr	r1, [r4, #0]
 8015182:	1d1a      	adds	r2, r3, #4
 8015184:	f8ca 2000 	str.w	r2, [sl]
 8015188:	f011 0f20 	tst.w	r1, #32
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	d010      	beq.n	80151b2 <_scanf_i+0x1ca>
 8015190:	6018      	str	r0, [r3, #0]
 8015192:	68e3      	ldr	r3, [r4, #12]
 8015194:	3301      	adds	r3, #1
 8015196:	60e3      	str	r3, [r4, #12]
 8015198:	eba5 0509 	sub.w	r5, r5, r9
 801519c:	44a8      	add	r8, r5
 801519e:	6925      	ldr	r5, [r4, #16]
 80151a0:	4445      	add	r5, r8
 80151a2:	6125      	str	r5, [r4, #16]
 80151a4:	2000      	movs	r0, #0
 80151a6:	b007      	add	sp, #28
 80151a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151ac:	f04f 0800 	mov.w	r8, #0
 80151b0:	e7ca      	b.n	8015148 <_scanf_i+0x160>
 80151b2:	07ca      	lsls	r2, r1, #31
 80151b4:	bf4c      	ite	mi
 80151b6:	8018      	strhmi	r0, [r3, #0]
 80151b8:	6018      	strpl	r0, [r3, #0]
 80151ba:	e7ea      	b.n	8015192 <_scanf_i+0x1aa>
 80151bc:	2001      	movs	r0, #1
 80151be:	e7f2      	b.n	80151a6 <_scanf_i+0x1be>
 80151c0:	08018b70 	.word	0x08018b70
 80151c4:	08016709 	.word	0x08016709
 80151c8:	08016821 	.word	0x08016821
 80151cc:	0801904c 	.word	0x0801904c

080151d0 <iprintf>:
 80151d0:	b40f      	push	{r0, r1, r2, r3}
 80151d2:	4b0a      	ldr	r3, [pc, #40]	; (80151fc <iprintf+0x2c>)
 80151d4:	b513      	push	{r0, r1, r4, lr}
 80151d6:	681c      	ldr	r4, [r3, #0]
 80151d8:	b124      	cbz	r4, 80151e4 <iprintf+0x14>
 80151da:	69a3      	ldr	r3, [r4, #24]
 80151dc:	b913      	cbnz	r3, 80151e4 <iprintf+0x14>
 80151de:	4620      	mov	r0, r4
 80151e0:	f7fe fbbe 	bl	8013960 <__sinit>
 80151e4:	ab05      	add	r3, sp, #20
 80151e6:	9a04      	ldr	r2, [sp, #16]
 80151e8:	68a1      	ldr	r1, [r4, #8]
 80151ea:	9301      	str	r3, [sp, #4]
 80151ec:	4620      	mov	r0, r4
 80151ee:	f7fe fdcb 	bl	8013d88 <_vfiprintf_r>
 80151f2:	b002      	add	sp, #8
 80151f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151f8:	b004      	add	sp, #16
 80151fa:	4770      	bx	lr
 80151fc:	20000038 	.word	0x20000038

08015200 <putchar>:
 8015200:	b538      	push	{r3, r4, r5, lr}
 8015202:	4b08      	ldr	r3, [pc, #32]	; (8015224 <putchar+0x24>)
 8015204:	681c      	ldr	r4, [r3, #0]
 8015206:	4605      	mov	r5, r0
 8015208:	b124      	cbz	r4, 8015214 <putchar+0x14>
 801520a:	69a3      	ldr	r3, [r4, #24]
 801520c:	b913      	cbnz	r3, 8015214 <putchar+0x14>
 801520e:	4620      	mov	r0, r4
 8015210:	f7fe fba6 	bl	8013960 <__sinit>
 8015214:	68a2      	ldr	r2, [r4, #8]
 8015216:	4629      	mov	r1, r5
 8015218:	4620      	mov	r0, r4
 801521a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801521e:	f003 bc19 	b.w	8018a54 <_putc_r>
 8015222:	bf00      	nop
 8015224:	20000038 	.word	0x20000038

08015228 <_puts_r>:
 8015228:	b570      	push	{r4, r5, r6, lr}
 801522a:	460e      	mov	r6, r1
 801522c:	4605      	mov	r5, r0
 801522e:	b118      	cbz	r0, 8015238 <_puts_r+0x10>
 8015230:	6983      	ldr	r3, [r0, #24]
 8015232:	b90b      	cbnz	r3, 8015238 <_puts_r+0x10>
 8015234:	f7fe fb94 	bl	8013960 <__sinit>
 8015238:	69ab      	ldr	r3, [r5, #24]
 801523a:	68ac      	ldr	r4, [r5, #8]
 801523c:	b913      	cbnz	r3, 8015244 <_puts_r+0x1c>
 801523e:	4628      	mov	r0, r5
 8015240:	f7fe fb8e 	bl	8013960 <__sinit>
 8015244:	4b23      	ldr	r3, [pc, #140]	; (80152d4 <_puts_r+0xac>)
 8015246:	429c      	cmp	r4, r3
 8015248:	d117      	bne.n	801527a <_puts_r+0x52>
 801524a:	686c      	ldr	r4, [r5, #4]
 801524c:	89a3      	ldrh	r3, [r4, #12]
 801524e:	071b      	lsls	r3, r3, #28
 8015250:	d51d      	bpl.n	801528e <_puts_r+0x66>
 8015252:	6923      	ldr	r3, [r4, #16]
 8015254:	b1db      	cbz	r3, 801528e <_puts_r+0x66>
 8015256:	3e01      	subs	r6, #1
 8015258:	68a3      	ldr	r3, [r4, #8]
 801525a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801525e:	3b01      	subs	r3, #1
 8015260:	60a3      	str	r3, [r4, #8]
 8015262:	b9e9      	cbnz	r1, 80152a0 <_puts_r+0x78>
 8015264:	2b00      	cmp	r3, #0
 8015266:	da2e      	bge.n	80152c6 <_puts_r+0x9e>
 8015268:	4622      	mov	r2, r4
 801526a:	210a      	movs	r1, #10
 801526c:	4628      	mov	r0, r5
 801526e:	f001 fb95 	bl	801699c <__swbuf_r>
 8015272:	3001      	adds	r0, #1
 8015274:	d011      	beq.n	801529a <_puts_r+0x72>
 8015276:	200a      	movs	r0, #10
 8015278:	e011      	b.n	801529e <_puts_r+0x76>
 801527a:	4b17      	ldr	r3, [pc, #92]	; (80152d8 <_puts_r+0xb0>)
 801527c:	429c      	cmp	r4, r3
 801527e:	d101      	bne.n	8015284 <_puts_r+0x5c>
 8015280:	68ac      	ldr	r4, [r5, #8]
 8015282:	e7e3      	b.n	801524c <_puts_r+0x24>
 8015284:	4b15      	ldr	r3, [pc, #84]	; (80152dc <_puts_r+0xb4>)
 8015286:	429c      	cmp	r4, r3
 8015288:	bf08      	it	eq
 801528a:	68ec      	ldreq	r4, [r5, #12]
 801528c:	e7de      	b.n	801524c <_puts_r+0x24>
 801528e:	4621      	mov	r1, r4
 8015290:	4628      	mov	r0, r5
 8015292:	f001 fbe7 	bl	8016a64 <__swsetup_r>
 8015296:	2800      	cmp	r0, #0
 8015298:	d0dd      	beq.n	8015256 <_puts_r+0x2e>
 801529a:	f04f 30ff 	mov.w	r0, #4294967295
 801529e:	bd70      	pop	{r4, r5, r6, pc}
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	da04      	bge.n	80152ae <_puts_r+0x86>
 80152a4:	69a2      	ldr	r2, [r4, #24]
 80152a6:	429a      	cmp	r2, r3
 80152a8:	dc06      	bgt.n	80152b8 <_puts_r+0x90>
 80152aa:	290a      	cmp	r1, #10
 80152ac:	d004      	beq.n	80152b8 <_puts_r+0x90>
 80152ae:	6823      	ldr	r3, [r4, #0]
 80152b0:	1c5a      	adds	r2, r3, #1
 80152b2:	6022      	str	r2, [r4, #0]
 80152b4:	7019      	strb	r1, [r3, #0]
 80152b6:	e7cf      	b.n	8015258 <_puts_r+0x30>
 80152b8:	4622      	mov	r2, r4
 80152ba:	4628      	mov	r0, r5
 80152bc:	f001 fb6e 	bl	801699c <__swbuf_r>
 80152c0:	3001      	adds	r0, #1
 80152c2:	d1c9      	bne.n	8015258 <_puts_r+0x30>
 80152c4:	e7e9      	b.n	801529a <_puts_r+0x72>
 80152c6:	6823      	ldr	r3, [r4, #0]
 80152c8:	200a      	movs	r0, #10
 80152ca:	1c5a      	adds	r2, r3, #1
 80152cc:	6022      	str	r2, [r4, #0]
 80152ce:	7018      	strb	r0, [r3, #0]
 80152d0:	e7e5      	b.n	801529e <_puts_r+0x76>
 80152d2:	bf00      	nop
 80152d4:	08018fb0 	.word	0x08018fb0
 80152d8:	08018fd0 	.word	0x08018fd0
 80152dc:	08018f90 	.word	0x08018f90

080152e0 <puts>:
 80152e0:	4b02      	ldr	r3, [pc, #8]	; (80152ec <puts+0xc>)
 80152e2:	4601      	mov	r1, r0
 80152e4:	6818      	ldr	r0, [r3, #0]
 80152e6:	f7ff bf9f 	b.w	8015228 <_puts_r>
 80152ea:	bf00      	nop
 80152ec:	20000038 	.word	0x20000038

080152f0 <swapfunc>:
 80152f0:	2b02      	cmp	r3, #2
 80152f2:	b510      	push	{r4, lr}
 80152f4:	d00a      	beq.n	801530c <swapfunc+0x1c>
 80152f6:	0892      	lsrs	r2, r2, #2
 80152f8:	3a01      	subs	r2, #1
 80152fa:	6803      	ldr	r3, [r0, #0]
 80152fc:	680c      	ldr	r4, [r1, #0]
 80152fe:	f840 4b04 	str.w	r4, [r0], #4
 8015302:	2a00      	cmp	r2, #0
 8015304:	f841 3b04 	str.w	r3, [r1], #4
 8015308:	dcf6      	bgt.n	80152f8 <swapfunc+0x8>
 801530a:	bd10      	pop	{r4, pc}
 801530c:	4402      	add	r2, r0
 801530e:	780c      	ldrb	r4, [r1, #0]
 8015310:	7803      	ldrb	r3, [r0, #0]
 8015312:	f800 4b01 	strb.w	r4, [r0], #1
 8015316:	f801 3b01 	strb.w	r3, [r1], #1
 801531a:	1a13      	subs	r3, r2, r0
 801531c:	2b00      	cmp	r3, #0
 801531e:	dcf6      	bgt.n	801530e <swapfunc+0x1e>
 8015320:	e7f3      	b.n	801530a <swapfunc+0x1a>

08015322 <med3.isra.1>:
 8015322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015324:	460c      	mov	r4, r1
 8015326:	4615      	mov	r5, r2
 8015328:	4607      	mov	r7, r0
 801532a:	461e      	mov	r6, r3
 801532c:	4798      	blx	r3
 801532e:	2800      	cmp	r0, #0
 8015330:	4629      	mov	r1, r5
 8015332:	4620      	mov	r0, r4
 8015334:	da0a      	bge.n	801534c <med3.isra.1+0x2a>
 8015336:	47b0      	blx	r6
 8015338:	2800      	cmp	r0, #0
 801533a:	db05      	blt.n	8015348 <med3.isra.1+0x26>
 801533c:	4629      	mov	r1, r5
 801533e:	4638      	mov	r0, r7
 8015340:	47b0      	blx	r6
 8015342:	2800      	cmp	r0, #0
 8015344:	db0a      	blt.n	801535c <med3.isra.1+0x3a>
 8015346:	463c      	mov	r4, r7
 8015348:	4620      	mov	r0, r4
 801534a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801534c:	47b0      	blx	r6
 801534e:	2800      	cmp	r0, #0
 8015350:	dcfa      	bgt.n	8015348 <med3.isra.1+0x26>
 8015352:	4629      	mov	r1, r5
 8015354:	4638      	mov	r0, r7
 8015356:	47b0      	blx	r6
 8015358:	2800      	cmp	r0, #0
 801535a:	dbf4      	blt.n	8015346 <med3.isra.1+0x24>
 801535c:	462c      	mov	r4, r5
 801535e:	e7f3      	b.n	8015348 <med3.isra.1+0x26>

08015360 <qsort>:
 8015360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015364:	b085      	sub	sp, #20
 8015366:	4606      	mov	r6, r0
 8015368:	468a      	mov	sl, r1
 801536a:	4614      	mov	r4, r2
 801536c:	9300      	str	r3, [sp, #0]
 801536e:	07b2      	lsls	r2, r6, #30
 8015370:	d110      	bne.n	8015394 <qsort+0x34>
 8015372:	07a3      	lsls	r3, r4, #30
 8015374:	d10e      	bne.n	8015394 <qsort+0x34>
 8015376:	1f27      	subs	r7, r4, #4
 8015378:	bf18      	it	ne
 801537a:	2701      	movne	r7, #1
 801537c:	f1ba 0f06 	cmp.w	sl, #6
 8015380:	eb06 0b04 	add.w	fp, r6, r4
 8015384:	d828      	bhi.n	80153d8 <qsort+0x78>
 8015386:	fb04 6a0a 	mla	sl, r4, sl, r6
 801538a:	45da      	cmp	sl, fp
 801538c:	d80b      	bhi.n	80153a6 <qsort+0x46>
 801538e:	b005      	add	sp, #20
 8015390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015394:	2702      	movs	r7, #2
 8015396:	e7f1      	b.n	801537c <qsort+0x1c>
 8015398:	463b      	mov	r3, r7
 801539a:	4622      	mov	r2, r4
 801539c:	4649      	mov	r1, r9
 801539e:	4640      	mov	r0, r8
 80153a0:	f7ff ffa6 	bl	80152f0 <swapfunc>
 80153a4:	e013      	b.n	80153ce <qsort+0x6e>
 80153a6:	46d8      	mov	r8, fp
 80153a8:	e012      	b.n	80153d0 <qsort+0x70>
 80153aa:	eba8 0904 	sub.w	r9, r8, r4
 80153ae:	4641      	mov	r1, r8
 80153b0:	4648      	mov	r0, r9
 80153b2:	9b00      	ldr	r3, [sp, #0]
 80153b4:	4798      	blx	r3
 80153b6:	2800      	cmp	r0, #0
 80153b8:	dd0c      	ble.n	80153d4 <qsort+0x74>
 80153ba:	2f00      	cmp	r7, #0
 80153bc:	d1ec      	bne.n	8015398 <qsort+0x38>
 80153be:	f8d8 3000 	ldr.w	r3, [r8]
 80153c2:	f8d9 2000 	ldr.w	r2, [r9]
 80153c6:	f8c8 2000 	str.w	r2, [r8]
 80153ca:	f8c9 3000 	str.w	r3, [r9]
 80153ce:	46c8      	mov	r8, r9
 80153d0:	4546      	cmp	r6, r8
 80153d2:	d3ea      	bcc.n	80153aa <qsort+0x4a>
 80153d4:	44a3      	add	fp, r4
 80153d6:	e7d8      	b.n	801538a <qsort+0x2a>
 80153d8:	ea4f 085a 	mov.w	r8, sl, lsr #1
 80153dc:	f10a 35ff 	add.w	r5, sl, #4294967295
 80153e0:	f1ba 0f07 	cmp.w	sl, #7
 80153e4:	fb04 6808 	mla	r8, r4, r8, r6
 80153e8:	fb04 6505 	mla	r5, r4, r5, r6
 80153ec:	d027      	beq.n	801543e <qsort+0xde>
 80153ee:	f1ba 0f28 	cmp.w	sl, #40	; 0x28
 80153f2:	d94a      	bls.n	801548a <qsort+0x12a>
 80153f4:	ea4f 09da 	mov.w	r9, sl, lsr #3
 80153f8:	fb04 f909 	mul.w	r9, r4, r9
 80153fc:	eb06 0109 	add.w	r1, r6, r9
 8015400:	eb01 0209 	add.w	r2, r1, r9
 8015404:	9b00      	ldr	r3, [sp, #0]
 8015406:	4630      	mov	r0, r6
 8015408:	f7ff ff8b 	bl	8015322 <med3.isra.1>
 801540c:	eb08 0209 	add.w	r2, r8, r9
 8015410:	4641      	mov	r1, r8
 8015412:	9001      	str	r0, [sp, #4]
 8015414:	9b00      	ldr	r3, [sp, #0]
 8015416:	eba8 0009 	sub.w	r0, r8, r9
 801541a:	f7ff ff82 	bl	8015322 <med3.isra.1>
 801541e:	4680      	mov	r8, r0
 8015420:	eba5 0049 	sub.w	r0, r5, r9, lsl #1
 8015424:	462a      	mov	r2, r5
 8015426:	9b00      	ldr	r3, [sp, #0]
 8015428:	eb00 0109 	add.w	r1, r0, r9
 801542c:	f7ff ff79 	bl	8015322 <med3.isra.1>
 8015430:	4602      	mov	r2, r0
 8015432:	4641      	mov	r1, r8
 8015434:	9b00      	ldr	r3, [sp, #0]
 8015436:	9801      	ldr	r0, [sp, #4]
 8015438:	f7ff ff73 	bl	8015322 <med3.isra.1>
 801543c:	4680      	mov	r8, r0
 801543e:	bb3f      	cbnz	r7, 8015490 <qsort+0x130>
 8015440:	6833      	ldr	r3, [r6, #0]
 8015442:	f8d8 2000 	ldr.w	r2, [r8]
 8015446:	6032      	str	r2, [r6, #0]
 8015448:	f8c8 3000 	str.w	r3, [r8]
 801544c:	46d8      	mov	r8, fp
 801544e:	46a9      	mov	r9, r5
 8015450:	f8cd b004 	str.w	fp, [sp, #4]
 8015454:	2300      	movs	r3, #0
 8015456:	45a8      	cmp	r8, r5
 8015458:	d857      	bhi.n	801550a <qsort+0x1aa>
 801545a:	9302      	str	r3, [sp, #8]
 801545c:	4631      	mov	r1, r6
 801545e:	9b00      	ldr	r3, [sp, #0]
 8015460:	4640      	mov	r0, r8
 8015462:	4798      	blx	r3
 8015464:	2800      	cmp	r0, #0
 8015466:	9b02      	ldr	r3, [sp, #8]
 8015468:	dc2e      	bgt.n	80154c8 <qsort+0x168>
 801546a:	d10c      	bne.n	8015486 <qsort+0x126>
 801546c:	b9bf      	cbnz	r7, 801549e <qsort+0x13e>
 801546e:	9b01      	ldr	r3, [sp, #4]
 8015470:	9901      	ldr	r1, [sp, #4]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	f8d8 2000 	ldr.w	r2, [r8]
 8015478:	600a      	str	r2, [r1, #0]
 801547a:	f8c8 3000 	str.w	r3, [r8]
 801547e:	9b01      	ldr	r3, [sp, #4]
 8015480:	4423      	add	r3, r4
 8015482:	9301      	str	r3, [sp, #4]
 8015484:	2301      	movs	r3, #1
 8015486:	44a0      	add	r8, r4
 8015488:	e7e5      	b.n	8015456 <qsort+0xf6>
 801548a:	462a      	mov	r2, r5
 801548c:	9601      	str	r6, [sp, #4]
 801548e:	e7d0      	b.n	8015432 <qsort+0xd2>
 8015490:	463b      	mov	r3, r7
 8015492:	4622      	mov	r2, r4
 8015494:	4641      	mov	r1, r8
 8015496:	4630      	mov	r0, r6
 8015498:	f7ff ff2a 	bl	80152f0 <swapfunc>
 801549c:	e7d6      	b.n	801544c <qsort+0xec>
 801549e:	463b      	mov	r3, r7
 80154a0:	4622      	mov	r2, r4
 80154a2:	4641      	mov	r1, r8
 80154a4:	9801      	ldr	r0, [sp, #4]
 80154a6:	f7ff ff23 	bl	80152f0 <swapfunc>
 80154aa:	e7e8      	b.n	801547e <qsort+0x11e>
 80154ac:	d109      	bne.n	80154c2 <qsort+0x162>
 80154ae:	b9f7      	cbnz	r7, 80154ee <qsort+0x18e>
 80154b0:	682b      	ldr	r3, [r5, #0]
 80154b2:	f8d9 2000 	ldr.w	r2, [r9]
 80154b6:	602a      	str	r2, [r5, #0]
 80154b8:	f8c9 3000 	str.w	r3, [r9]
 80154bc:	eba9 0904 	sub.w	r9, r9, r4
 80154c0:	2301      	movs	r3, #1
 80154c2:	9d02      	ldr	r5, [sp, #8]
 80154c4:	45a8      	cmp	r8, r5
 80154c6:	d820      	bhi.n	801550a <qsort+0x1aa>
 80154c8:	9303      	str	r3, [sp, #12]
 80154ca:	4631      	mov	r1, r6
 80154cc:	9b00      	ldr	r3, [sp, #0]
 80154ce:	4628      	mov	r0, r5
 80154d0:	4798      	blx	r3
 80154d2:	1b2b      	subs	r3, r5, r4
 80154d4:	2800      	cmp	r0, #0
 80154d6:	9302      	str	r3, [sp, #8]
 80154d8:	9b03      	ldr	r3, [sp, #12]
 80154da:	dae7      	bge.n	80154ac <qsort+0x14c>
 80154dc:	b977      	cbnz	r7, 80154fc <qsort+0x19c>
 80154de:	f8d8 3000 	ldr.w	r3, [r8]
 80154e2:	682a      	ldr	r2, [r5, #0]
 80154e4:	f8c8 2000 	str.w	r2, [r8]
 80154e8:	602b      	str	r3, [r5, #0]
 80154ea:	9d02      	ldr	r5, [sp, #8]
 80154ec:	e7ca      	b.n	8015484 <qsort+0x124>
 80154ee:	463b      	mov	r3, r7
 80154f0:	4622      	mov	r2, r4
 80154f2:	4649      	mov	r1, r9
 80154f4:	4628      	mov	r0, r5
 80154f6:	f7ff fefb 	bl	80152f0 <swapfunc>
 80154fa:	e7df      	b.n	80154bc <qsort+0x15c>
 80154fc:	463b      	mov	r3, r7
 80154fe:	4622      	mov	r2, r4
 8015500:	4629      	mov	r1, r5
 8015502:	4640      	mov	r0, r8
 8015504:	f7ff fef4 	bl	80152f0 <swapfunc>
 8015508:	e7ef      	b.n	80154ea <qsort+0x18a>
 801550a:	fb04 6a0a 	mla	sl, r4, sl, r6
 801550e:	bb03      	cbnz	r3, 8015552 <qsort+0x1f2>
 8015510:	45d3      	cmp	fp, sl
 8015512:	f4bf af3c 	bcs.w	801538e <qsort+0x2e>
 8015516:	465d      	mov	r5, fp
 8015518:	e017      	b.n	801554a <qsort+0x1ea>
 801551a:	463b      	mov	r3, r7
 801551c:	4622      	mov	r2, r4
 801551e:	4641      	mov	r1, r8
 8015520:	4628      	mov	r0, r5
 8015522:	f7ff fee5 	bl	80152f0 <swapfunc>
 8015526:	e00f      	b.n	8015548 <qsort+0x1e8>
 8015528:	eba5 0804 	sub.w	r8, r5, r4
 801552c:	4629      	mov	r1, r5
 801552e:	4640      	mov	r0, r8
 8015530:	9b00      	ldr	r3, [sp, #0]
 8015532:	4798      	blx	r3
 8015534:	2800      	cmp	r0, #0
 8015536:	dd0a      	ble.n	801554e <qsort+0x1ee>
 8015538:	2f00      	cmp	r7, #0
 801553a:	d1ee      	bne.n	801551a <qsort+0x1ba>
 801553c:	682b      	ldr	r3, [r5, #0]
 801553e:	f8d8 2000 	ldr.w	r2, [r8]
 8015542:	602a      	str	r2, [r5, #0]
 8015544:	f8c8 3000 	str.w	r3, [r8]
 8015548:	4645      	mov	r5, r8
 801554a:	42ae      	cmp	r6, r5
 801554c:	d3ec      	bcc.n	8015528 <qsort+0x1c8>
 801554e:	44a3      	add	fp, r4
 8015550:	e7de      	b.n	8015510 <qsort+0x1b0>
 8015552:	9b01      	ldr	r3, [sp, #4]
 8015554:	eba8 0b03 	sub.w	fp, r8, r3
 8015558:	1b9a      	subs	r2, r3, r6
 801555a:	455a      	cmp	r2, fp
 801555c:	bfa8      	it	ge
 801555e:	465a      	movge	r2, fp
 8015560:	b12a      	cbz	r2, 801556e <qsort+0x20e>
 8015562:	463b      	mov	r3, r7
 8015564:	eba8 0102 	sub.w	r1, r8, r2
 8015568:	4630      	mov	r0, r6
 801556a:	f7ff fec1 	bl	80152f0 <swapfunc>
 801556e:	ebaa 0209 	sub.w	r2, sl, r9
 8015572:	eba9 0505 	sub.w	r5, r9, r5
 8015576:	1b12      	subs	r2, r2, r4
 8015578:	42aa      	cmp	r2, r5
 801557a:	bf28      	it	cs
 801557c:	462a      	movcs	r2, r5
 801557e:	b12a      	cbz	r2, 801558c <qsort+0x22c>
 8015580:	463b      	mov	r3, r7
 8015582:	ebaa 0102 	sub.w	r1, sl, r2
 8015586:	4640      	mov	r0, r8
 8015588:	f7ff feb2 	bl	80152f0 <swapfunc>
 801558c:	455c      	cmp	r4, fp
 801558e:	d206      	bcs.n	801559e <qsort+0x23e>
 8015590:	fbbb f1f4 	udiv	r1, fp, r4
 8015594:	9b00      	ldr	r3, [sp, #0]
 8015596:	4622      	mov	r2, r4
 8015598:	4630      	mov	r0, r6
 801559a:	f7ff fee1 	bl	8015360 <qsort>
 801559e:	42a5      	cmp	r5, r4
 80155a0:	f67f aef5 	bls.w	801538e <qsort+0x2e>
 80155a4:	ebaa 0605 	sub.w	r6, sl, r5
 80155a8:	fbb5 faf4 	udiv	sl, r5, r4
 80155ac:	e6df      	b.n	801536e <qsort+0xe>

080155ae <lflush>:
 80155ae:	8983      	ldrh	r3, [r0, #12]
 80155b0:	f003 0309 	and.w	r3, r3, #9
 80155b4:	2b09      	cmp	r3, #9
 80155b6:	d101      	bne.n	80155bc <lflush+0xe>
 80155b8:	f7fe b980 	b.w	80138bc <fflush>
 80155bc:	2000      	movs	r0, #0
 80155be:	4770      	bx	lr

080155c0 <__srefill_r>:
 80155c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155c2:	460c      	mov	r4, r1
 80155c4:	4605      	mov	r5, r0
 80155c6:	b118      	cbz	r0, 80155d0 <__srefill_r+0x10>
 80155c8:	6983      	ldr	r3, [r0, #24]
 80155ca:	b90b      	cbnz	r3, 80155d0 <__srefill_r+0x10>
 80155cc:	f7fe f9c8 	bl	8013960 <__sinit>
 80155d0:	4b3c      	ldr	r3, [pc, #240]	; (80156c4 <__srefill_r+0x104>)
 80155d2:	429c      	cmp	r4, r3
 80155d4:	d10a      	bne.n	80155ec <__srefill_r+0x2c>
 80155d6:	686c      	ldr	r4, [r5, #4]
 80155d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80155dc:	2300      	movs	r3, #0
 80155de:	6063      	str	r3, [r4, #4]
 80155e0:	b293      	uxth	r3, r2
 80155e2:	069e      	lsls	r6, r3, #26
 80155e4:	d50c      	bpl.n	8015600 <__srefill_r+0x40>
 80155e6:	f04f 30ff 	mov.w	r0, #4294967295
 80155ea:	e067      	b.n	80156bc <__srefill_r+0xfc>
 80155ec:	4b36      	ldr	r3, [pc, #216]	; (80156c8 <__srefill_r+0x108>)
 80155ee:	429c      	cmp	r4, r3
 80155f0:	d101      	bne.n	80155f6 <__srefill_r+0x36>
 80155f2:	68ac      	ldr	r4, [r5, #8]
 80155f4:	e7f0      	b.n	80155d8 <__srefill_r+0x18>
 80155f6:	4b35      	ldr	r3, [pc, #212]	; (80156cc <__srefill_r+0x10c>)
 80155f8:	429c      	cmp	r4, r3
 80155fa:	bf08      	it	eq
 80155fc:	68ec      	ldreq	r4, [r5, #12]
 80155fe:	e7eb      	b.n	80155d8 <__srefill_r+0x18>
 8015600:	0758      	lsls	r0, r3, #29
 8015602:	d449      	bmi.n	8015698 <__srefill_r+0xd8>
 8015604:	06d9      	lsls	r1, r3, #27
 8015606:	d405      	bmi.n	8015614 <__srefill_r+0x54>
 8015608:	2309      	movs	r3, #9
 801560a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801560e:	602b      	str	r3, [r5, #0]
 8015610:	81a2      	strh	r2, [r4, #12]
 8015612:	e7e8      	b.n	80155e6 <__srefill_r+0x26>
 8015614:	071a      	lsls	r2, r3, #28
 8015616:	d50b      	bpl.n	8015630 <__srefill_r+0x70>
 8015618:	4621      	mov	r1, r4
 801561a:	4628      	mov	r0, r5
 801561c:	f7fe f924 	bl	8013868 <_fflush_r>
 8015620:	2800      	cmp	r0, #0
 8015622:	d1e0      	bne.n	80155e6 <__srefill_r+0x26>
 8015624:	89a3      	ldrh	r3, [r4, #12]
 8015626:	60a0      	str	r0, [r4, #8]
 8015628:	f023 0308 	bic.w	r3, r3, #8
 801562c:	81a3      	strh	r3, [r4, #12]
 801562e:	61a0      	str	r0, [r4, #24]
 8015630:	89a3      	ldrh	r3, [r4, #12]
 8015632:	f043 0304 	orr.w	r3, r3, #4
 8015636:	81a3      	strh	r3, [r4, #12]
 8015638:	6923      	ldr	r3, [r4, #16]
 801563a:	b91b      	cbnz	r3, 8015644 <__srefill_r+0x84>
 801563c:	4621      	mov	r1, r4
 801563e:	4628      	mov	r0, r5
 8015640:	f7fe fa7c 	bl	8013b3c <__smakebuf_r>
 8015644:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8015648:	b2be      	uxth	r6, r7
 801564a:	07b3      	lsls	r3, r6, #30
 801564c:	d00f      	beq.n	801566e <__srefill_r+0xae>
 801564e:	2301      	movs	r3, #1
 8015650:	81a3      	strh	r3, [r4, #12]
 8015652:	4b1f      	ldr	r3, [pc, #124]	; (80156d0 <__srefill_r+0x110>)
 8015654:	491f      	ldr	r1, [pc, #124]	; (80156d4 <__srefill_r+0x114>)
 8015656:	6818      	ldr	r0, [r3, #0]
 8015658:	f006 0609 	and.w	r6, r6, #9
 801565c:	f7fe f9ec 	bl	8013a38 <_fwalk>
 8015660:	2e09      	cmp	r6, #9
 8015662:	81a7      	strh	r7, [r4, #12]
 8015664:	d103      	bne.n	801566e <__srefill_r+0xae>
 8015666:	4621      	mov	r1, r4
 8015668:	4628      	mov	r0, r5
 801566a:	f7fe f877 	bl	801375c <__sflush_r>
 801566e:	6922      	ldr	r2, [r4, #16]
 8015670:	6022      	str	r2, [r4, #0]
 8015672:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015674:	6963      	ldr	r3, [r4, #20]
 8015676:	6a21      	ldr	r1, [r4, #32]
 8015678:	4628      	mov	r0, r5
 801567a:	47b0      	blx	r6
 801567c:	2800      	cmp	r0, #0
 801567e:	6060      	str	r0, [r4, #4]
 8015680:	dc1d      	bgt.n	80156be <__srefill_r+0xfe>
 8015682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015686:	bf17      	itett	ne
 8015688:	2200      	movne	r2, #0
 801568a:	f043 0320 	orreq.w	r3, r3, #32
 801568e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8015692:	6062      	strne	r2, [r4, #4]
 8015694:	81a3      	strh	r3, [r4, #12]
 8015696:	e7a6      	b.n	80155e6 <__srefill_r+0x26>
 8015698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801569a:	2900      	cmp	r1, #0
 801569c:	d0cc      	beq.n	8015638 <__srefill_r+0x78>
 801569e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80156a2:	4299      	cmp	r1, r3
 80156a4:	d002      	beq.n	80156ac <__srefill_r+0xec>
 80156a6:	4628      	mov	r0, r5
 80156a8:	f7fe fa9c 	bl	8013be4 <_free_r>
 80156ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80156ae:	6063      	str	r3, [r4, #4]
 80156b0:	2000      	movs	r0, #0
 80156b2:	6360      	str	r0, [r4, #52]	; 0x34
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d0bf      	beq.n	8015638 <__srefill_r+0x78>
 80156b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80156ba:	6023      	str	r3, [r4, #0]
 80156bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156be:	2000      	movs	r0, #0
 80156c0:	e7fc      	b.n	80156bc <__srefill_r+0xfc>
 80156c2:	bf00      	nop
 80156c4:	08018fb0 	.word	0x08018fb0
 80156c8:	08018fd0 	.word	0x08018fd0
 80156cc:	08018f90 	.word	0x08018f90
 80156d0:	08018ff0 	.word	0x08018ff0
 80156d4:	080155af 	.word	0x080155af

080156d8 <_sbrk_r>:
 80156d8:	b538      	push	{r3, r4, r5, lr}
 80156da:	4c06      	ldr	r4, [pc, #24]	; (80156f4 <_sbrk_r+0x1c>)
 80156dc:	2300      	movs	r3, #0
 80156de:	4605      	mov	r5, r0
 80156e0:	4608      	mov	r0, r1
 80156e2:	6023      	str	r3, [r4, #0]
 80156e4:	f7f7 fdd0 	bl	800d288 <_sbrk>
 80156e8:	1c43      	adds	r3, r0, #1
 80156ea:	d102      	bne.n	80156f2 <_sbrk_r+0x1a>
 80156ec:	6823      	ldr	r3, [r4, #0]
 80156ee:	b103      	cbz	r3, 80156f2 <_sbrk_r+0x1a>
 80156f0:	602b      	str	r3, [r5, #0]
 80156f2:	bd38      	pop	{r3, r4, r5, pc}
 80156f4:	20008f48 	.word	0x20008f48

080156f8 <iscanf>:
 80156f8:	b40f      	push	{r0, r1, r2, r3}
 80156fa:	4b0a      	ldr	r3, [pc, #40]	; (8015724 <iscanf+0x2c>)
 80156fc:	b513      	push	{r0, r1, r4, lr}
 80156fe:	681c      	ldr	r4, [r3, #0]
 8015700:	b124      	cbz	r4, 801570c <iscanf+0x14>
 8015702:	69a3      	ldr	r3, [r4, #24]
 8015704:	b913      	cbnz	r3, 801570c <iscanf+0x14>
 8015706:	4620      	mov	r0, r4
 8015708:	f7fe f92a 	bl	8013960 <__sinit>
 801570c:	ab05      	add	r3, sp, #20
 801570e:	9a04      	ldr	r2, [sp, #16]
 8015710:	6861      	ldr	r1, [r4, #4]
 8015712:	9301      	str	r3, [sp, #4]
 8015714:	4620      	mov	r0, r4
 8015716:	f7ff f9f9 	bl	8014b0c <_vfiscanf_r>
 801571a:	b002      	add	sp, #8
 801571c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015720:	b004      	add	sp, #16
 8015722:	4770      	bx	lr
 8015724:	20000038 	.word	0x20000038

08015728 <__sccl>:
 8015728:	b570      	push	{r4, r5, r6, lr}
 801572a:	780b      	ldrb	r3, [r1, #0]
 801572c:	2b5e      	cmp	r3, #94	; 0x5e
 801572e:	bf13      	iteet	ne
 8015730:	1c4a      	addne	r2, r1, #1
 8015732:	1c8a      	addeq	r2, r1, #2
 8015734:	784b      	ldrbeq	r3, [r1, #1]
 8015736:	2100      	movne	r1, #0
 8015738:	bf08      	it	eq
 801573a:	2101      	moveq	r1, #1
 801573c:	1e44      	subs	r4, r0, #1
 801573e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8015742:	f804 1f01 	strb.w	r1, [r4, #1]!
 8015746:	42ac      	cmp	r4, r5
 8015748:	d1fb      	bne.n	8015742 <__sccl+0x1a>
 801574a:	b913      	cbnz	r3, 8015752 <__sccl+0x2a>
 801574c:	3a01      	subs	r2, #1
 801574e:	4610      	mov	r0, r2
 8015750:	bd70      	pop	{r4, r5, r6, pc}
 8015752:	f081 0401 	eor.w	r4, r1, #1
 8015756:	54c4      	strb	r4, [r0, r3]
 8015758:	1c51      	adds	r1, r2, #1
 801575a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801575e:	2d2d      	cmp	r5, #45	; 0x2d
 8015760:	f101 36ff 	add.w	r6, r1, #4294967295
 8015764:	460a      	mov	r2, r1
 8015766:	d006      	beq.n	8015776 <__sccl+0x4e>
 8015768:	2d5d      	cmp	r5, #93	; 0x5d
 801576a:	d0f0      	beq.n	801574e <__sccl+0x26>
 801576c:	b90d      	cbnz	r5, 8015772 <__sccl+0x4a>
 801576e:	4632      	mov	r2, r6
 8015770:	e7ed      	b.n	801574e <__sccl+0x26>
 8015772:	462b      	mov	r3, r5
 8015774:	e7ef      	b.n	8015756 <__sccl+0x2e>
 8015776:	780e      	ldrb	r6, [r1, #0]
 8015778:	2e5d      	cmp	r6, #93	; 0x5d
 801577a:	d0fa      	beq.n	8015772 <__sccl+0x4a>
 801577c:	42b3      	cmp	r3, r6
 801577e:	dcf8      	bgt.n	8015772 <__sccl+0x4a>
 8015780:	3301      	adds	r3, #1
 8015782:	429e      	cmp	r6, r3
 8015784:	54c4      	strb	r4, [r0, r3]
 8015786:	dcfb      	bgt.n	8015780 <__sccl+0x58>
 8015788:	3102      	adds	r1, #2
 801578a:	e7e6      	b.n	801575a <__sccl+0x32>

0801578c <setbuf>:
 801578c:	2900      	cmp	r1, #0
 801578e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015792:	bf0c      	ite	eq
 8015794:	2202      	moveq	r2, #2
 8015796:	2200      	movne	r2, #0
 8015798:	f000 b800 	b.w	801579c <setvbuf>

0801579c <setvbuf>:
 801579c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80157a0:	461d      	mov	r5, r3
 80157a2:	4b51      	ldr	r3, [pc, #324]	; (80158e8 <setvbuf+0x14c>)
 80157a4:	681e      	ldr	r6, [r3, #0]
 80157a6:	4604      	mov	r4, r0
 80157a8:	460f      	mov	r7, r1
 80157aa:	4690      	mov	r8, r2
 80157ac:	b126      	cbz	r6, 80157b8 <setvbuf+0x1c>
 80157ae:	69b3      	ldr	r3, [r6, #24]
 80157b0:	b913      	cbnz	r3, 80157b8 <setvbuf+0x1c>
 80157b2:	4630      	mov	r0, r6
 80157b4:	f7fe f8d4 	bl	8013960 <__sinit>
 80157b8:	4b4c      	ldr	r3, [pc, #304]	; (80158ec <setvbuf+0x150>)
 80157ba:	429c      	cmp	r4, r3
 80157bc:	d152      	bne.n	8015864 <setvbuf+0xc8>
 80157be:	6874      	ldr	r4, [r6, #4]
 80157c0:	f1b8 0f02 	cmp.w	r8, #2
 80157c4:	d006      	beq.n	80157d4 <setvbuf+0x38>
 80157c6:	f1b8 0f01 	cmp.w	r8, #1
 80157ca:	f200 8089 	bhi.w	80158e0 <setvbuf+0x144>
 80157ce:	2d00      	cmp	r5, #0
 80157d0:	f2c0 8086 	blt.w	80158e0 <setvbuf+0x144>
 80157d4:	4621      	mov	r1, r4
 80157d6:	4630      	mov	r0, r6
 80157d8:	f7fe f846 	bl	8013868 <_fflush_r>
 80157dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80157de:	b141      	cbz	r1, 80157f2 <setvbuf+0x56>
 80157e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157e4:	4299      	cmp	r1, r3
 80157e6:	d002      	beq.n	80157ee <setvbuf+0x52>
 80157e8:	4630      	mov	r0, r6
 80157ea:	f7fe f9fb 	bl	8013be4 <_free_r>
 80157ee:	2300      	movs	r3, #0
 80157f0:	6363      	str	r3, [r4, #52]	; 0x34
 80157f2:	2300      	movs	r3, #0
 80157f4:	61a3      	str	r3, [r4, #24]
 80157f6:	6063      	str	r3, [r4, #4]
 80157f8:	89a3      	ldrh	r3, [r4, #12]
 80157fa:	061b      	lsls	r3, r3, #24
 80157fc:	d503      	bpl.n	8015806 <setvbuf+0x6a>
 80157fe:	6921      	ldr	r1, [r4, #16]
 8015800:	4630      	mov	r0, r6
 8015802:	f7fe f9ef 	bl	8013be4 <_free_r>
 8015806:	89a3      	ldrh	r3, [r4, #12]
 8015808:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801580c:	f023 0303 	bic.w	r3, r3, #3
 8015810:	f1b8 0f02 	cmp.w	r8, #2
 8015814:	81a3      	strh	r3, [r4, #12]
 8015816:	d05d      	beq.n	80158d4 <setvbuf+0x138>
 8015818:	ab01      	add	r3, sp, #4
 801581a:	466a      	mov	r2, sp
 801581c:	4621      	mov	r1, r4
 801581e:	4630      	mov	r0, r6
 8015820:	f7fe f968 	bl	8013af4 <__swhatbuf_r>
 8015824:	89a3      	ldrh	r3, [r4, #12]
 8015826:	4318      	orrs	r0, r3
 8015828:	81a0      	strh	r0, [r4, #12]
 801582a:	bb2d      	cbnz	r5, 8015878 <setvbuf+0xdc>
 801582c:	9d00      	ldr	r5, [sp, #0]
 801582e:	4628      	mov	r0, r5
 8015830:	f002 fb56 	bl	8017ee0 <malloc>
 8015834:	4607      	mov	r7, r0
 8015836:	2800      	cmp	r0, #0
 8015838:	d14e      	bne.n	80158d8 <setvbuf+0x13c>
 801583a:	f8dd 9000 	ldr.w	r9, [sp]
 801583e:	45a9      	cmp	r9, r5
 8015840:	d13c      	bne.n	80158bc <setvbuf+0x120>
 8015842:	f04f 30ff 	mov.w	r0, #4294967295
 8015846:	89a3      	ldrh	r3, [r4, #12]
 8015848:	f043 0302 	orr.w	r3, r3, #2
 801584c:	81a3      	strh	r3, [r4, #12]
 801584e:	2300      	movs	r3, #0
 8015850:	60a3      	str	r3, [r4, #8]
 8015852:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015856:	6023      	str	r3, [r4, #0]
 8015858:	6123      	str	r3, [r4, #16]
 801585a:	2301      	movs	r3, #1
 801585c:	6163      	str	r3, [r4, #20]
 801585e:	b003      	add	sp, #12
 8015860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015864:	4b22      	ldr	r3, [pc, #136]	; (80158f0 <setvbuf+0x154>)
 8015866:	429c      	cmp	r4, r3
 8015868:	d101      	bne.n	801586e <setvbuf+0xd2>
 801586a:	68b4      	ldr	r4, [r6, #8]
 801586c:	e7a8      	b.n	80157c0 <setvbuf+0x24>
 801586e:	4b21      	ldr	r3, [pc, #132]	; (80158f4 <setvbuf+0x158>)
 8015870:	429c      	cmp	r4, r3
 8015872:	bf08      	it	eq
 8015874:	68f4      	ldreq	r4, [r6, #12]
 8015876:	e7a3      	b.n	80157c0 <setvbuf+0x24>
 8015878:	2f00      	cmp	r7, #0
 801587a:	d0d8      	beq.n	801582e <setvbuf+0x92>
 801587c:	69b3      	ldr	r3, [r6, #24]
 801587e:	b913      	cbnz	r3, 8015886 <setvbuf+0xea>
 8015880:	4630      	mov	r0, r6
 8015882:	f7fe f86d 	bl	8013960 <__sinit>
 8015886:	f1b8 0f01 	cmp.w	r8, #1
 801588a:	bf08      	it	eq
 801588c:	89a3      	ldrheq	r3, [r4, #12]
 801588e:	6027      	str	r7, [r4, #0]
 8015890:	bf04      	itt	eq
 8015892:	f043 0301 	orreq.w	r3, r3, #1
 8015896:	81a3      	strheq	r3, [r4, #12]
 8015898:	89a3      	ldrh	r3, [r4, #12]
 801589a:	f013 0008 	ands.w	r0, r3, #8
 801589e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80158a2:	d01b      	beq.n	80158dc <setvbuf+0x140>
 80158a4:	f013 0001 	ands.w	r0, r3, #1
 80158a8:	bf18      	it	ne
 80158aa:	426d      	negne	r5, r5
 80158ac:	f04f 0300 	mov.w	r3, #0
 80158b0:	bf1d      	ittte	ne
 80158b2:	60a3      	strne	r3, [r4, #8]
 80158b4:	61a5      	strne	r5, [r4, #24]
 80158b6:	4618      	movne	r0, r3
 80158b8:	60a5      	streq	r5, [r4, #8]
 80158ba:	e7d0      	b.n	801585e <setvbuf+0xc2>
 80158bc:	4648      	mov	r0, r9
 80158be:	f002 fb0f 	bl	8017ee0 <malloc>
 80158c2:	4607      	mov	r7, r0
 80158c4:	2800      	cmp	r0, #0
 80158c6:	d0bc      	beq.n	8015842 <setvbuf+0xa6>
 80158c8:	89a3      	ldrh	r3, [r4, #12]
 80158ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158ce:	81a3      	strh	r3, [r4, #12]
 80158d0:	464d      	mov	r5, r9
 80158d2:	e7d3      	b.n	801587c <setvbuf+0xe0>
 80158d4:	2000      	movs	r0, #0
 80158d6:	e7b6      	b.n	8015846 <setvbuf+0xaa>
 80158d8:	46a9      	mov	r9, r5
 80158da:	e7f5      	b.n	80158c8 <setvbuf+0x12c>
 80158dc:	60a0      	str	r0, [r4, #8]
 80158de:	e7be      	b.n	801585e <setvbuf+0xc2>
 80158e0:	f04f 30ff 	mov.w	r0, #4294967295
 80158e4:	e7bb      	b.n	801585e <setvbuf+0xc2>
 80158e6:	bf00      	nop
 80158e8:	20000038 	.word	0x20000038
 80158ec:	08018fb0 	.word	0x08018fb0
 80158f0:	08018fd0 	.word	0x08018fd0
 80158f4:	08018f90 	.word	0x08018f90

080158f8 <nanf>:
 80158f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015900 <nanf+0x8>
 80158fc:	4770      	bx	lr
 80158fe:	bf00      	nop
 8015900:	7fc00000 	.word	0x7fc00000

08015904 <siprintf>:
 8015904:	b40e      	push	{r1, r2, r3}
 8015906:	b500      	push	{lr}
 8015908:	b09c      	sub	sp, #112	; 0x70
 801590a:	ab1d      	add	r3, sp, #116	; 0x74
 801590c:	9002      	str	r0, [sp, #8]
 801590e:	9006      	str	r0, [sp, #24]
 8015910:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015914:	4809      	ldr	r0, [pc, #36]	; (801593c <siprintf+0x38>)
 8015916:	9107      	str	r1, [sp, #28]
 8015918:	9104      	str	r1, [sp, #16]
 801591a:	4909      	ldr	r1, [pc, #36]	; (8015940 <siprintf+0x3c>)
 801591c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015920:	9105      	str	r1, [sp, #20]
 8015922:	6800      	ldr	r0, [r0, #0]
 8015924:	9301      	str	r3, [sp, #4]
 8015926:	a902      	add	r1, sp, #8
 8015928:	f002 ff9c 	bl	8018864 <_svfiprintf_r>
 801592c:	9b02      	ldr	r3, [sp, #8]
 801592e:	2200      	movs	r2, #0
 8015930:	701a      	strb	r2, [r3, #0]
 8015932:	b01c      	add	sp, #112	; 0x70
 8015934:	f85d eb04 	ldr.w	lr, [sp], #4
 8015938:	b003      	add	sp, #12
 801593a:	4770      	bx	lr
 801593c:	20000038 	.word	0x20000038
 8015940:	ffff0208 	.word	0xffff0208

08015944 <__sread>:
 8015944:	b510      	push	{r4, lr}
 8015946:	460c      	mov	r4, r1
 8015948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801594c:	f003 f8b8 	bl	8018ac0 <_read_r>
 8015950:	2800      	cmp	r0, #0
 8015952:	bfab      	itete	ge
 8015954:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015956:	89a3      	ldrhlt	r3, [r4, #12]
 8015958:	181b      	addge	r3, r3, r0
 801595a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801595e:	bfac      	ite	ge
 8015960:	6563      	strge	r3, [r4, #84]	; 0x54
 8015962:	81a3      	strhlt	r3, [r4, #12]
 8015964:	bd10      	pop	{r4, pc}

08015966 <__swrite>:
 8015966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801596a:	461f      	mov	r7, r3
 801596c:	898b      	ldrh	r3, [r1, #12]
 801596e:	05db      	lsls	r3, r3, #23
 8015970:	4605      	mov	r5, r0
 8015972:	460c      	mov	r4, r1
 8015974:	4616      	mov	r6, r2
 8015976:	d505      	bpl.n	8015984 <__swrite+0x1e>
 8015978:	2302      	movs	r3, #2
 801597a:	2200      	movs	r2, #0
 801597c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015980:	f002 fa9c 	bl	8017ebc <_lseek_r>
 8015984:	89a3      	ldrh	r3, [r4, #12]
 8015986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801598a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801598e:	81a3      	strh	r3, [r4, #12]
 8015990:	4632      	mov	r2, r6
 8015992:	463b      	mov	r3, r7
 8015994:	4628      	mov	r0, r5
 8015996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801599a:	f001 b851 	b.w	8016a40 <_write_r>

0801599e <__sseek>:
 801599e:	b510      	push	{r4, lr}
 80159a0:	460c      	mov	r4, r1
 80159a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159a6:	f002 fa89 	bl	8017ebc <_lseek_r>
 80159aa:	1c43      	adds	r3, r0, #1
 80159ac:	89a3      	ldrh	r3, [r4, #12]
 80159ae:	bf15      	itete	ne
 80159b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80159b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80159b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80159ba:	81a3      	strheq	r3, [r4, #12]
 80159bc:	bf18      	it	ne
 80159be:	81a3      	strhne	r3, [r4, #12]
 80159c0:	bd10      	pop	{r4, pc}

080159c2 <__sclose>:
 80159c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159c6:	f001 b8bb 	b.w	8016b40 <_close_r>

080159ca <sulp>:
 80159ca:	b570      	push	{r4, r5, r6, lr}
 80159cc:	4604      	mov	r4, r0
 80159ce:	460d      	mov	r5, r1
 80159d0:	ec45 4b10 	vmov	d0, r4, r5
 80159d4:	4616      	mov	r6, r2
 80159d6:	f002 fd83 	bl	80184e0 <__ulp>
 80159da:	ec51 0b10 	vmov	r0, r1, d0
 80159de:	b17e      	cbz	r6, 8015a00 <sulp+0x36>
 80159e0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80159e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	dd09      	ble.n	8015a00 <sulp+0x36>
 80159ec:	051b      	lsls	r3, r3, #20
 80159ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80159f2:	2400      	movs	r4, #0
 80159f4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80159f8:	4622      	mov	r2, r4
 80159fa:	462b      	mov	r3, r5
 80159fc:	f7f2 fd34 	bl	8008468 <__aeabi_dmul>
 8015a00:	bd70      	pop	{r4, r5, r6, pc}
 8015a02:	0000      	movs	r0, r0
 8015a04:	0000      	movs	r0, r0
	...

08015a08 <_strtod_l>:
 8015a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a0c:	461f      	mov	r7, r3
 8015a0e:	b0a1      	sub	sp, #132	; 0x84
 8015a10:	2300      	movs	r3, #0
 8015a12:	4681      	mov	r9, r0
 8015a14:	4638      	mov	r0, r7
 8015a16:	460e      	mov	r6, r1
 8015a18:	9217      	str	r2, [sp, #92]	; 0x5c
 8015a1a:	931c      	str	r3, [sp, #112]	; 0x70
 8015a1c:	f002 fa3e 	bl	8017e9c <__localeconv_l>
 8015a20:	4680      	mov	r8, r0
 8015a22:	6800      	ldr	r0, [r0, #0]
 8015a24:	f7f2 fb0c 	bl	8008040 <strlen>
 8015a28:	f04f 0a00 	mov.w	sl, #0
 8015a2c:	4604      	mov	r4, r0
 8015a2e:	f04f 0b00 	mov.w	fp, #0
 8015a32:	961b      	str	r6, [sp, #108]	; 0x6c
 8015a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a36:	781a      	ldrb	r2, [r3, #0]
 8015a38:	2a0d      	cmp	r2, #13
 8015a3a:	d832      	bhi.n	8015aa2 <_strtod_l+0x9a>
 8015a3c:	2a09      	cmp	r2, #9
 8015a3e:	d236      	bcs.n	8015aae <_strtod_l+0xa6>
 8015a40:	2a00      	cmp	r2, #0
 8015a42:	d03e      	beq.n	8015ac2 <_strtod_l+0xba>
 8015a44:	2300      	movs	r3, #0
 8015a46:	930d      	str	r3, [sp, #52]	; 0x34
 8015a48:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015a4a:	782b      	ldrb	r3, [r5, #0]
 8015a4c:	2b30      	cmp	r3, #48	; 0x30
 8015a4e:	f040 80ac 	bne.w	8015baa <_strtod_l+0x1a2>
 8015a52:	786b      	ldrb	r3, [r5, #1]
 8015a54:	2b58      	cmp	r3, #88	; 0x58
 8015a56:	d001      	beq.n	8015a5c <_strtod_l+0x54>
 8015a58:	2b78      	cmp	r3, #120	; 0x78
 8015a5a:	d167      	bne.n	8015b2c <_strtod_l+0x124>
 8015a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a5e:	9301      	str	r3, [sp, #4]
 8015a60:	ab1c      	add	r3, sp, #112	; 0x70
 8015a62:	9300      	str	r3, [sp, #0]
 8015a64:	9702      	str	r7, [sp, #8]
 8015a66:	ab1d      	add	r3, sp, #116	; 0x74
 8015a68:	4a88      	ldr	r2, [pc, #544]	; (8015c8c <_strtod_l+0x284>)
 8015a6a:	a91b      	add	r1, sp, #108	; 0x6c
 8015a6c:	4648      	mov	r0, r9
 8015a6e:	f001 ff1c 	bl	80178aa <__gethex>
 8015a72:	f010 0407 	ands.w	r4, r0, #7
 8015a76:	4606      	mov	r6, r0
 8015a78:	d005      	beq.n	8015a86 <_strtod_l+0x7e>
 8015a7a:	2c06      	cmp	r4, #6
 8015a7c:	d12b      	bne.n	8015ad6 <_strtod_l+0xce>
 8015a7e:	3501      	adds	r5, #1
 8015a80:	2300      	movs	r3, #0
 8015a82:	951b      	str	r5, [sp, #108]	; 0x6c
 8015a84:	930d      	str	r3, [sp, #52]	; 0x34
 8015a86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	f040 859a 	bne.w	80165c2 <_strtod_l+0xbba>
 8015a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a90:	b1e3      	cbz	r3, 8015acc <_strtod_l+0xc4>
 8015a92:	4652      	mov	r2, sl
 8015a94:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015a98:	ec43 2b10 	vmov	d0, r2, r3
 8015a9c:	b021      	add	sp, #132	; 0x84
 8015a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aa2:	2a2b      	cmp	r2, #43	; 0x2b
 8015aa4:	d015      	beq.n	8015ad2 <_strtod_l+0xca>
 8015aa6:	2a2d      	cmp	r2, #45	; 0x2d
 8015aa8:	d004      	beq.n	8015ab4 <_strtod_l+0xac>
 8015aaa:	2a20      	cmp	r2, #32
 8015aac:	d1ca      	bne.n	8015a44 <_strtod_l+0x3c>
 8015aae:	3301      	adds	r3, #1
 8015ab0:	931b      	str	r3, [sp, #108]	; 0x6c
 8015ab2:	e7bf      	b.n	8015a34 <_strtod_l+0x2c>
 8015ab4:	2201      	movs	r2, #1
 8015ab6:	920d      	str	r2, [sp, #52]	; 0x34
 8015ab8:	1c5a      	adds	r2, r3, #1
 8015aba:	921b      	str	r2, [sp, #108]	; 0x6c
 8015abc:	785b      	ldrb	r3, [r3, #1]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d1c2      	bne.n	8015a48 <_strtod_l+0x40>
 8015ac2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ac4:	961b      	str	r6, [sp, #108]	; 0x6c
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	f040 8579 	bne.w	80165be <_strtod_l+0xbb6>
 8015acc:	4652      	mov	r2, sl
 8015ace:	465b      	mov	r3, fp
 8015ad0:	e7e2      	b.n	8015a98 <_strtod_l+0x90>
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	e7ef      	b.n	8015ab6 <_strtod_l+0xae>
 8015ad6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015ad8:	b13a      	cbz	r2, 8015aea <_strtod_l+0xe2>
 8015ada:	2135      	movs	r1, #53	; 0x35
 8015adc:	a81e      	add	r0, sp, #120	; 0x78
 8015ade:	f002 fdf7 	bl	80186d0 <__copybits>
 8015ae2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015ae4:	4648      	mov	r0, r9
 8015ae6:	f002 fa64 	bl	8017fb2 <_Bfree>
 8015aea:	3c01      	subs	r4, #1
 8015aec:	2c04      	cmp	r4, #4
 8015aee:	d806      	bhi.n	8015afe <_strtod_l+0xf6>
 8015af0:	e8df f004 	tbb	[pc, r4]
 8015af4:	1714030a 	.word	0x1714030a
 8015af8:	0a          	.byte	0x0a
 8015af9:	00          	.byte	0x00
 8015afa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015afe:	0730      	lsls	r0, r6, #28
 8015b00:	d5c1      	bpl.n	8015a86 <_strtod_l+0x7e>
 8015b02:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015b06:	e7be      	b.n	8015a86 <_strtod_l+0x7e>
 8015b08:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015b0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015b0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015b12:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015b16:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015b1a:	e7f0      	b.n	8015afe <_strtod_l+0xf6>
 8015b1c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015c90 <_strtod_l+0x288>
 8015b20:	e7ed      	b.n	8015afe <_strtod_l+0xf6>
 8015b22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015b26:	f04f 3aff 	mov.w	sl, #4294967295
 8015b2a:	e7e8      	b.n	8015afe <_strtod_l+0xf6>
 8015b2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015b2e:	1c5a      	adds	r2, r3, #1
 8015b30:	921b      	str	r2, [sp, #108]	; 0x6c
 8015b32:	785b      	ldrb	r3, [r3, #1]
 8015b34:	2b30      	cmp	r3, #48	; 0x30
 8015b36:	d0f9      	beq.n	8015b2c <_strtod_l+0x124>
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d0a4      	beq.n	8015a86 <_strtod_l+0x7e>
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	2500      	movs	r5, #0
 8015b40:	9306      	str	r3, [sp, #24]
 8015b42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015b44:	9308      	str	r3, [sp, #32]
 8015b46:	9507      	str	r5, [sp, #28]
 8015b48:	9505      	str	r5, [sp, #20]
 8015b4a:	220a      	movs	r2, #10
 8015b4c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015b4e:	7807      	ldrb	r7, [r0, #0]
 8015b50:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015b54:	b2d9      	uxtb	r1, r3
 8015b56:	2909      	cmp	r1, #9
 8015b58:	d929      	bls.n	8015bae <_strtod_l+0x1a6>
 8015b5a:	4622      	mov	r2, r4
 8015b5c:	f8d8 1000 	ldr.w	r1, [r8]
 8015b60:	f002 ffc0 	bl	8018ae4 <strncmp>
 8015b64:	2800      	cmp	r0, #0
 8015b66:	d031      	beq.n	8015bcc <_strtod_l+0x1c4>
 8015b68:	2000      	movs	r0, #0
 8015b6a:	9c05      	ldr	r4, [sp, #20]
 8015b6c:	9004      	str	r0, [sp, #16]
 8015b6e:	463b      	mov	r3, r7
 8015b70:	4602      	mov	r2, r0
 8015b72:	2b65      	cmp	r3, #101	; 0x65
 8015b74:	d001      	beq.n	8015b7a <_strtod_l+0x172>
 8015b76:	2b45      	cmp	r3, #69	; 0x45
 8015b78:	d114      	bne.n	8015ba4 <_strtod_l+0x19c>
 8015b7a:	b924      	cbnz	r4, 8015b86 <_strtod_l+0x17e>
 8015b7c:	b910      	cbnz	r0, 8015b84 <_strtod_l+0x17c>
 8015b7e:	9b06      	ldr	r3, [sp, #24]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d09e      	beq.n	8015ac2 <_strtod_l+0xba>
 8015b84:	2400      	movs	r4, #0
 8015b86:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015b88:	1c73      	adds	r3, r6, #1
 8015b8a:	931b      	str	r3, [sp, #108]	; 0x6c
 8015b8c:	7873      	ldrb	r3, [r6, #1]
 8015b8e:	2b2b      	cmp	r3, #43	; 0x2b
 8015b90:	d078      	beq.n	8015c84 <_strtod_l+0x27c>
 8015b92:	2b2d      	cmp	r3, #45	; 0x2d
 8015b94:	d070      	beq.n	8015c78 <_strtod_l+0x270>
 8015b96:	f04f 0c00 	mov.w	ip, #0
 8015b9a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015b9e:	2f09      	cmp	r7, #9
 8015ba0:	d97c      	bls.n	8015c9c <_strtod_l+0x294>
 8015ba2:	961b      	str	r6, [sp, #108]	; 0x6c
 8015ba4:	f04f 0e00 	mov.w	lr, #0
 8015ba8:	e09a      	b.n	8015ce0 <_strtod_l+0x2d8>
 8015baa:	2300      	movs	r3, #0
 8015bac:	e7c7      	b.n	8015b3e <_strtod_l+0x136>
 8015bae:	9905      	ldr	r1, [sp, #20]
 8015bb0:	2908      	cmp	r1, #8
 8015bb2:	bfdd      	ittte	le
 8015bb4:	9907      	ldrle	r1, [sp, #28]
 8015bb6:	fb02 3301 	mlale	r3, r2, r1, r3
 8015bba:	9307      	strle	r3, [sp, #28]
 8015bbc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015bc0:	9b05      	ldr	r3, [sp, #20]
 8015bc2:	3001      	adds	r0, #1
 8015bc4:	3301      	adds	r3, #1
 8015bc6:	9305      	str	r3, [sp, #20]
 8015bc8:	901b      	str	r0, [sp, #108]	; 0x6c
 8015bca:	e7bf      	b.n	8015b4c <_strtod_l+0x144>
 8015bcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015bce:	191a      	adds	r2, r3, r4
 8015bd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8015bd2:	9a05      	ldr	r2, [sp, #20]
 8015bd4:	5d1b      	ldrb	r3, [r3, r4]
 8015bd6:	2a00      	cmp	r2, #0
 8015bd8:	d037      	beq.n	8015c4a <_strtod_l+0x242>
 8015bda:	9c05      	ldr	r4, [sp, #20]
 8015bdc:	4602      	mov	r2, r0
 8015bde:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015be2:	2909      	cmp	r1, #9
 8015be4:	d913      	bls.n	8015c0e <_strtod_l+0x206>
 8015be6:	2101      	movs	r1, #1
 8015be8:	9104      	str	r1, [sp, #16]
 8015bea:	e7c2      	b.n	8015b72 <_strtod_l+0x16a>
 8015bec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015bee:	1c5a      	adds	r2, r3, #1
 8015bf0:	921b      	str	r2, [sp, #108]	; 0x6c
 8015bf2:	785b      	ldrb	r3, [r3, #1]
 8015bf4:	3001      	adds	r0, #1
 8015bf6:	2b30      	cmp	r3, #48	; 0x30
 8015bf8:	d0f8      	beq.n	8015bec <_strtod_l+0x1e4>
 8015bfa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015bfe:	2a08      	cmp	r2, #8
 8015c00:	f200 84e4 	bhi.w	80165cc <_strtod_l+0xbc4>
 8015c04:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015c06:	9208      	str	r2, [sp, #32]
 8015c08:	4602      	mov	r2, r0
 8015c0a:	2000      	movs	r0, #0
 8015c0c:	4604      	mov	r4, r0
 8015c0e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8015c12:	f100 0101 	add.w	r1, r0, #1
 8015c16:	d012      	beq.n	8015c3e <_strtod_l+0x236>
 8015c18:	440a      	add	r2, r1
 8015c1a:	eb00 0c04 	add.w	ip, r0, r4
 8015c1e:	4621      	mov	r1, r4
 8015c20:	270a      	movs	r7, #10
 8015c22:	458c      	cmp	ip, r1
 8015c24:	d113      	bne.n	8015c4e <_strtod_l+0x246>
 8015c26:	1821      	adds	r1, r4, r0
 8015c28:	2908      	cmp	r1, #8
 8015c2a:	f104 0401 	add.w	r4, r4, #1
 8015c2e:	4404      	add	r4, r0
 8015c30:	dc19      	bgt.n	8015c66 <_strtod_l+0x25e>
 8015c32:	9b07      	ldr	r3, [sp, #28]
 8015c34:	210a      	movs	r1, #10
 8015c36:	fb01 e303 	mla	r3, r1, r3, lr
 8015c3a:	9307      	str	r3, [sp, #28]
 8015c3c:	2100      	movs	r1, #0
 8015c3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015c40:	1c58      	adds	r0, r3, #1
 8015c42:	901b      	str	r0, [sp, #108]	; 0x6c
 8015c44:	785b      	ldrb	r3, [r3, #1]
 8015c46:	4608      	mov	r0, r1
 8015c48:	e7c9      	b.n	8015bde <_strtod_l+0x1d6>
 8015c4a:	9805      	ldr	r0, [sp, #20]
 8015c4c:	e7d3      	b.n	8015bf6 <_strtod_l+0x1ee>
 8015c4e:	2908      	cmp	r1, #8
 8015c50:	f101 0101 	add.w	r1, r1, #1
 8015c54:	dc03      	bgt.n	8015c5e <_strtod_l+0x256>
 8015c56:	9b07      	ldr	r3, [sp, #28]
 8015c58:	437b      	muls	r3, r7
 8015c5a:	9307      	str	r3, [sp, #28]
 8015c5c:	e7e1      	b.n	8015c22 <_strtod_l+0x21a>
 8015c5e:	2910      	cmp	r1, #16
 8015c60:	bfd8      	it	le
 8015c62:	437d      	mulle	r5, r7
 8015c64:	e7dd      	b.n	8015c22 <_strtod_l+0x21a>
 8015c66:	2c10      	cmp	r4, #16
 8015c68:	bfdc      	itt	le
 8015c6a:	210a      	movle	r1, #10
 8015c6c:	fb01 e505 	mlale	r5, r1, r5, lr
 8015c70:	e7e4      	b.n	8015c3c <_strtod_l+0x234>
 8015c72:	2301      	movs	r3, #1
 8015c74:	9304      	str	r3, [sp, #16]
 8015c76:	e781      	b.n	8015b7c <_strtod_l+0x174>
 8015c78:	f04f 0c01 	mov.w	ip, #1
 8015c7c:	1cb3      	adds	r3, r6, #2
 8015c7e:	931b      	str	r3, [sp, #108]	; 0x6c
 8015c80:	78b3      	ldrb	r3, [r6, #2]
 8015c82:	e78a      	b.n	8015b9a <_strtod_l+0x192>
 8015c84:	f04f 0c00 	mov.w	ip, #0
 8015c88:	e7f8      	b.n	8015c7c <_strtod_l+0x274>
 8015c8a:	bf00      	nop
 8015c8c:	08019058 	.word	0x08019058
 8015c90:	7ff00000 	.word	0x7ff00000
 8015c94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015c96:	1c5f      	adds	r7, r3, #1
 8015c98:	971b      	str	r7, [sp, #108]	; 0x6c
 8015c9a:	785b      	ldrb	r3, [r3, #1]
 8015c9c:	2b30      	cmp	r3, #48	; 0x30
 8015c9e:	d0f9      	beq.n	8015c94 <_strtod_l+0x28c>
 8015ca0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8015ca4:	2f08      	cmp	r7, #8
 8015ca6:	f63f af7d 	bhi.w	8015ba4 <_strtod_l+0x19c>
 8015caa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015cae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015cb0:	930a      	str	r3, [sp, #40]	; 0x28
 8015cb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015cb4:	1c5f      	adds	r7, r3, #1
 8015cb6:	971b      	str	r7, [sp, #108]	; 0x6c
 8015cb8:	785b      	ldrb	r3, [r3, #1]
 8015cba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8015cbe:	f1b8 0f09 	cmp.w	r8, #9
 8015cc2:	d937      	bls.n	8015d34 <_strtod_l+0x32c>
 8015cc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015cc6:	1a7f      	subs	r7, r7, r1
 8015cc8:	2f08      	cmp	r7, #8
 8015cca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015cce:	dc37      	bgt.n	8015d40 <_strtod_l+0x338>
 8015cd0:	45be      	cmp	lr, r7
 8015cd2:	bfa8      	it	ge
 8015cd4:	46be      	movge	lr, r7
 8015cd6:	f1bc 0f00 	cmp.w	ip, #0
 8015cda:	d001      	beq.n	8015ce0 <_strtod_l+0x2d8>
 8015cdc:	f1ce 0e00 	rsb	lr, lr, #0
 8015ce0:	2c00      	cmp	r4, #0
 8015ce2:	d151      	bne.n	8015d88 <_strtod_l+0x380>
 8015ce4:	2800      	cmp	r0, #0
 8015ce6:	f47f aece 	bne.w	8015a86 <_strtod_l+0x7e>
 8015cea:	9a06      	ldr	r2, [sp, #24]
 8015cec:	2a00      	cmp	r2, #0
 8015cee:	f47f aeca 	bne.w	8015a86 <_strtod_l+0x7e>
 8015cf2:	9a04      	ldr	r2, [sp, #16]
 8015cf4:	2a00      	cmp	r2, #0
 8015cf6:	f47f aee4 	bne.w	8015ac2 <_strtod_l+0xba>
 8015cfa:	2b4e      	cmp	r3, #78	; 0x4e
 8015cfc:	d027      	beq.n	8015d4e <_strtod_l+0x346>
 8015cfe:	dc21      	bgt.n	8015d44 <_strtod_l+0x33c>
 8015d00:	2b49      	cmp	r3, #73	; 0x49
 8015d02:	f47f aede 	bne.w	8015ac2 <_strtod_l+0xba>
 8015d06:	49a0      	ldr	r1, [pc, #640]	; (8015f88 <_strtod_l+0x580>)
 8015d08:	a81b      	add	r0, sp, #108	; 0x6c
 8015d0a:	f002 f801 	bl	8017d10 <__match>
 8015d0e:	2800      	cmp	r0, #0
 8015d10:	f43f aed7 	beq.w	8015ac2 <_strtod_l+0xba>
 8015d14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d16:	499d      	ldr	r1, [pc, #628]	; (8015f8c <_strtod_l+0x584>)
 8015d18:	3b01      	subs	r3, #1
 8015d1a:	a81b      	add	r0, sp, #108	; 0x6c
 8015d1c:	931b      	str	r3, [sp, #108]	; 0x6c
 8015d1e:	f001 fff7 	bl	8017d10 <__match>
 8015d22:	b910      	cbnz	r0, 8015d2a <_strtod_l+0x322>
 8015d24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d26:	3301      	adds	r3, #1
 8015d28:	931b      	str	r3, [sp, #108]	; 0x6c
 8015d2a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015fa0 <_strtod_l+0x598>
 8015d2e:	f04f 0a00 	mov.w	sl, #0
 8015d32:	e6a8      	b.n	8015a86 <_strtod_l+0x7e>
 8015d34:	210a      	movs	r1, #10
 8015d36:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015d3a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015d3e:	e7b8      	b.n	8015cb2 <_strtod_l+0x2aa>
 8015d40:	46be      	mov	lr, r7
 8015d42:	e7c8      	b.n	8015cd6 <_strtod_l+0x2ce>
 8015d44:	2b69      	cmp	r3, #105	; 0x69
 8015d46:	d0de      	beq.n	8015d06 <_strtod_l+0x2fe>
 8015d48:	2b6e      	cmp	r3, #110	; 0x6e
 8015d4a:	f47f aeba 	bne.w	8015ac2 <_strtod_l+0xba>
 8015d4e:	4990      	ldr	r1, [pc, #576]	; (8015f90 <_strtod_l+0x588>)
 8015d50:	a81b      	add	r0, sp, #108	; 0x6c
 8015d52:	f001 ffdd 	bl	8017d10 <__match>
 8015d56:	2800      	cmp	r0, #0
 8015d58:	f43f aeb3 	beq.w	8015ac2 <_strtod_l+0xba>
 8015d5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d5e:	781b      	ldrb	r3, [r3, #0]
 8015d60:	2b28      	cmp	r3, #40	; 0x28
 8015d62:	d10e      	bne.n	8015d82 <_strtod_l+0x37a>
 8015d64:	aa1e      	add	r2, sp, #120	; 0x78
 8015d66:	498b      	ldr	r1, [pc, #556]	; (8015f94 <_strtod_l+0x58c>)
 8015d68:	a81b      	add	r0, sp, #108	; 0x6c
 8015d6a:	f001 ffe5 	bl	8017d38 <__hexnan>
 8015d6e:	2805      	cmp	r0, #5
 8015d70:	d107      	bne.n	8015d82 <_strtod_l+0x37a>
 8015d72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015d74:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015d78:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015d7c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015d80:	e681      	b.n	8015a86 <_strtod_l+0x7e>
 8015d82:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015fa8 <_strtod_l+0x5a0>
 8015d86:	e7d2      	b.n	8015d2e <_strtod_l+0x326>
 8015d88:	ebae 0302 	sub.w	r3, lr, r2
 8015d8c:	9306      	str	r3, [sp, #24]
 8015d8e:	9b05      	ldr	r3, [sp, #20]
 8015d90:	9807      	ldr	r0, [sp, #28]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	bf08      	it	eq
 8015d96:	4623      	moveq	r3, r4
 8015d98:	2c10      	cmp	r4, #16
 8015d9a:	9305      	str	r3, [sp, #20]
 8015d9c:	46a0      	mov	r8, r4
 8015d9e:	bfa8      	it	ge
 8015da0:	f04f 0810 	movge.w	r8, #16
 8015da4:	f7f2 fae6 	bl	8008374 <__aeabi_ui2d>
 8015da8:	2c09      	cmp	r4, #9
 8015daa:	4682      	mov	sl, r0
 8015dac:	468b      	mov	fp, r1
 8015dae:	dc13      	bgt.n	8015dd8 <_strtod_l+0x3d0>
 8015db0:	9b06      	ldr	r3, [sp, #24]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	f43f ae67 	beq.w	8015a86 <_strtod_l+0x7e>
 8015db8:	9b06      	ldr	r3, [sp, #24]
 8015dba:	dd7a      	ble.n	8015eb2 <_strtod_l+0x4aa>
 8015dbc:	2b16      	cmp	r3, #22
 8015dbe:	dc61      	bgt.n	8015e84 <_strtod_l+0x47c>
 8015dc0:	4a75      	ldr	r2, [pc, #468]	; (8015f98 <_strtod_l+0x590>)
 8015dc2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015dc6:	e9de 0100 	ldrd	r0, r1, [lr]
 8015dca:	4652      	mov	r2, sl
 8015dcc:	465b      	mov	r3, fp
 8015dce:	f7f2 fb4b 	bl	8008468 <__aeabi_dmul>
 8015dd2:	4682      	mov	sl, r0
 8015dd4:	468b      	mov	fp, r1
 8015dd6:	e656      	b.n	8015a86 <_strtod_l+0x7e>
 8015dd8:	4b6f      	ldr	r3, [pc, #444]	; (8015f98 <_strtod_l+0x590>)
 8015dda:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015dde:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015de2:	f7f2 fb41 	bl	8008468 <__aeabi_dmul>
 8015de6:	4606      	mov	r6, r0
 8015de8:	4628      	mov	r0, r5
 8015dea:	460f      	mov	r7, r1
 8015dec:	f7f2 fac2 	bl	8008374 <__aeabi_ui2d>
 8015df0:	4602      	mov	r2, r0
 8015df2:	460b      	mov	r3, r1
 8015df4:	4630      	mov	r0, r6
 8015df6:	4639      	mov	r1, r7
 8015df8:	f7f2 f980 	bl	80080fc <__adddf3>
 8015dfc:	2c0f      	cmp	r4, #15
 8015dfe:	4682      	mov	sl, r0
 8015e00:	468b      	mov	fp, r1
 8015e02:	ddd5      	ble.n	8015db0 <_strtod_l+0x3a8>
 8015e04:	9b06      	ldr	r3, [sp, #24]
 8015e06:	eba4 0808 	sub.w	r8, r4, r8
 8015e0a:	4498      	add	r8, r3
 8015e0c:	f1b8 0f00 	cmp.w	r8, #0
 8015e10:	f340 8096 	ble.w	8015f40 <_strtod_l+0x538>
 8015e14:	f018 030f 	ands.w	r3, r8, #15
 8015e18:	d00a      	beq.n	8015e30 <_strtod_l+0x428>
 8015e1a:	495f      	ldr	r1, [pc, #380]	; (8015f98 <_strtod_l+0x590>)
 8015e1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015e20:	4652      	mov	r2, sl
 8015e22:	465b      	mov	r3, fp
 8015e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e28:	f7f2 fb1e 	bl	8008468 <__aeabi_dmul>
 8015e2c:	4682      	mov	sl, r0
 8015e2e:	468b      	mov	fp, r1
 8015e30:	f038 080f 	bics.w	r8, r8, #15
 8015e34:	d073      	beq.n	8015f1e <_strtod_l+0x516>
 8015e36:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015e3a:	dd47      	ble.n	8015ecc <_strtod_l+0x4c4>
 8015e3c:	2400      	movs	r4, #0
 8015e3e:	46a0      	mov	r8, r4
 8015e40:	9407      	str	r4, [sp, #28]
 8015e42:	9405      	str	r4, [sp, #20]
 8015e44:	2322      	movs	r3, #34	; 0x22
 8015e46:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015fa0 <_strtod_l+0x598>
 8015e4a:	f8c9 3000 	str.w	r3, [r9]
 8015e4e:	f04f 0a00 	mov.w	sl, #0
 8015e52:	9b07      	ldr	r3, [sp, #28]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	f43f ae16 	beq.w	8015a86 <_strtod_l+0x7e>
 8015e5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015e5c:	4648      	mov	r0, r9
 8015e5e:	f002 f8a8 	bl	8017fb2 <_Bfree>
 8015e62:	9905      	ldr	r1, [sp, #20]
 8015e64:	4648      	mov	r0, r9
 8015e66:	f002 f8a4 	bl	8017fb2 <_Bfree>
 8015e6a:	4641      	mov	r1, r8
 8015e6c:	4648      	mov	r0, r9
 8015e6e:	f002 f8a0 	bl	8017fb2 <_Bfree>
 8015e72:	9907      	ldr	r1, [sp, #28]
 8015e74:	4648      	mov	r0, r9
 8015e76:	f002 f89c 	bl	8017fb2 <_Bfree>
 8015e7a:	4621      	mov	r1, r4
 8015e7c:	4648      	mov	r0, r9
 8015e7e:	f002 f898 	bl	8017fb2 <_Bfree>
 8015e82:	e600      	b.n	8015a86 <_strtod_l+0x7e>
 8015e84:	9a06      	ldr	r2, [sp, #24]
 8015e86:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015e8a:	4293      	cmp	r3, r2
 8015e8c:	dbba      	blt.n	8015e04 <_strtod_l+0x3fc>
 8015e8e:	4d42      	ldr	r5, [pc, #264]	; (8015f98 <_strtod_l+0x590>)
 8015e90:	f1c4 040f 	rsb	r4, r4, #15
 8015e94:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015e98:	4652      	mov	r2, sl
 8015e9a:	465b      	mov	r3, fp
 8015e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ea0:	f7f2 fae2 	bl	8008468 <__aeabi_dmul>
 8015ea4:	9b06      	ldr	r3, [sp, #24]
 8015ea6:	1b1c      	subs	r4, r3, r4
 8015ea8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015eac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015eb0:	e78d      	b.n	8015dce <_strtod_l+0x3c6>
 8015eb2:	f113 0f16 	cmn.w	r3, #22
 8015eb6:	dba5      	blt.n	8015e04 <_strtod_l+0x3fc>
 8015eb8:	4a37      	ldr	r2, [pc, #220]	; (8015f98 <_strtod_l+0x590>)
 8015eba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015ebe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015ec2:	4650      	mov	r0, sl
 8015ec4:	4659      	mov	r1, fp
 8015ec6:	f7f2 fbf9 	bl	80086bc <__aeabi_ddiv>
 8015eca:	e782      	b.n	8015dd2 <_strtod_l+0x3ca>
 8015ecc:	2300      	movs	r3, #0
 8015ece:	4e33      	ldr	r6, [pc, #204]	; (8015f9c <_strtod_l+0x594>)
 8015ed0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015ed4:	4650      	mov	r0, sl
 8015ed6:	4659      	mov	r1, fp
 8015ed8:	461d      	mov	r5, r3
 8015eda:	f1b8 0f01 	cmp.w	r8, #1
 8015ede:	dc21      	bgt.n	8015f24 <_strtod_l+0x51c>
 8015ee0:	b10b      	cbz	r3, 8015ee6 <_strtod_l+0x4de>
 8015ee2:	4682      	mov	sl, r0
 8015ee4:	468b      	mov	fp, r1
 8015ee6:	4b2d      	ldr	r3, [pc, #180]	; (8015f9c <_strtod_l+0x594>)
 8015ee8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015eec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015ef0:	4652      	mov	r2, sl
 8015ef2:	465b      	mov	r3, fp
 8015ef4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015ef8:	f7f2 fab6 	bl	8008468 <__aeabi_dmul>
 8015efc:	4b28      	ldr	r3, [pc, #160]	; (8015fa0 <_strtod_l+0x598>)
 8015efe:	460a      	mov	r2, r1
 8015f00:	400b      	ands	r3, r1
 8015f02:	4928      	ldr	r1, [pc, #160]	; (8015fa4 <_strtod_l+0x59c>)
 8015f04:	428b      	cmp	r3, r1
 8015f06:	4682      	mov	sl, r0
 8015f08:	d898      	bhi.n	8015e3c <_strtod_l+0x434>
 8015f0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015f0e:	428b      	cmp	r3, r1
 8015f10:	bf86      	itte	hi
 8015f12:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015fac <_strtod_l+0x5a4>
 8015f16:	f04f 3aff 	movhi.w	sl, #4294967295
 8015f1a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015f1e:	2300      	movs	r3, #0
 8015f20:	9304      	str	r3, [sp, #16]
 8015f22:	e077      	b.n	8016014 <_strtod_l+0x60c>
 8015f24:	f018 0f01 	tst.w	r8, #1
 8015f28:	d006      	beq.n	8015f38 <_strtod_l+0x530>
 8015f2a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f32:	f7f2 fa99 	bl	8008468 <__aeabi_dmul>
 8015f36:	2301      	movs	r3, #1
 8015f38:	3501      	adds	r5, #1
 8015f3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015f3e:	e7cc      	b.n	8015eda <_strtod_l+0x4d2>
 8015f40:	d0ed      	beq.n	8015f1e <_strtod_l+0x516>
 8015f42:	f1c8 0800 	rsb	r8, r8, #0
 8015f46:	f018 020f 	ands.w	r2, r8, #15
 8015f4a:	d00a      	beq.n	8015f62 <_strtod_l+0x55a>
 8015f4c:	4b12      	ldr	r3, [pc, #72]	; (8015f98 <_strtod_l+0x590>)
 8015f4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015f52:	4650      	mov	r0, sl
 8015f54:	4659      	mov	r1, fp
 8015f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f5a:	f7f2 fbaf 	bl	80086bc <__aeabi_ddiv>
 8015f5e:	4682      	mov	sl, r0
 8015f60:	468b      	mov	fp, r1
 8015f62:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015f66:	d0da      	beq.n	8015f1e <_strtod_l+0x516>
 8015f68:	f1b8 0f1f 	cmp.w	r8, #31
 8015f6c:	dd20      	ble.n	8015fb0 <_strtod_l+0x5a8>
 8015f6e:	2400      	movs	r4, #0
 8015f70:	46a0      	mov	r8, r4
 8015f72:	9407      	str	r4, [sp, #28]
 8015f74:	9405      	str	r4, [sp, #20]
 8015f76:	2322      	movs	r3, #34	; 0x22
 8015f78:	f04f 0a00 	mov.w	sl, #0
 8015f7c:	f04f 0b00 	mov.w	fp, #0
 8015f80:	f8c9 3000 	str.w	r3, [r9]
 8015f84:	e765      	b.n	8015e52 <_strtod_l+0x44a>
 8015f86:	bf00      	nop
 8015f88:	0801900a 	.word	0x0801900a
 8015f8c:	080190ab 	.word	0x080190ab
 8015f90:	08019012 	.word	0x08019012
 8015f94:	0801906c 	.word	0x0801906c
 8015f98:	080190e8 	.word	0x080190e8
 8015f9c:	080190c0 	.word	0x080190c0
 8015fa0:	7ff00000 	.word	0x7ff00000
 8015fa4:	7ca00000 	.word	0x7ca00000
 8015fa8:	fff80000 	.word	0xfff80000
 8015fac:	7fefffff 	.word	0x7fefffff
 8015fb0:	f018 0310 	ands.w	r3, r8, #16
 8015fb4:	bf18      	it	ne
 8015fb6:	236a      	movne	r3, #106	; 0x6a
 8015fb8:	4da0      	ldr	r5, [pc, #640]	; (801623c <_strtod_l+0x834>)
 8015fba:	9304      	str	r3, [sp, #16]
 8015fbc:	4650      	mov	r0, sl
 8015fbe:	4659      	mov	r1, fp
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	f1b8 0f00 	cmp.w	r8, #0
 8015fc6:	f300 810a 	bgt.w	80161de <_strtod_l+0x7d6>
 8015fca:	b10b      	cbz	r3, 8015fd0 <_strtod_l+0x5c8>
 8015fcc:	4682      	mov	sl, r0
 8015fce:	468b      	mov	fp, r1
 8015fd0:	9b04      	ldr	r3, [sp, #16]
 8015fd2:	b1bb      	cbz	r3, 8016004 <_strtod_l+0x5fc>
 8015fd4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015fd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	4659      	mov	r1, fp
 8015fe0:	dd10      	ble.n	8016004 <_strtod_l+0x5fc>
 8015fe2:	2b1f      	cmp	r3, #31
 8015fe4:	f340 8107 	ble.w	80161f6 <_strtod_l+0x7ee>
 8015fe8:	2b34      	cmp	r3, #52	; 0x34
 8015fea:	bfde      	ittt	le
 8015fec:	3b20      	suble	r3, #32
 8015fee:	f04f 32ff 	movle.w	r2, #4294967295
 8015ff2:	fa02 f303 	lslle.w	r3, r2, r3
 8015ff6:	f04f 0a00 	mov.w	sl, #0
 8015ffa:	bfcc      	ite	gt
 8015ffc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016000:	ea03 0b01 	andle.w	fp, r3, r1
 8016004:	2200      	movs	r2, #0
 8016006:	2300      	movs	r3, #0
 8016008:	4650      	mov	r0, sl
 801600a:	4659      	mov	r1, fp
 801600c:	f7f2 fc94 	bl	8008938 <__aeabi_dcmpeq>
 8016010:	2800      	cmp	r0, #0
 8016012:	d1ac      	bne.n	8015f6e <_strtod_l+0x566>
 8016014:	9b07      	ldr	r3, [sp, #28]
 8016016:	9300      	str	r3, [sp, #0]
 8016018:	9a05      	ldr	r2, [sp, #20]
 801601a:	9908      	ldr	r1, [sp, #32]
 801601c:	4623      	mov	r3, r4
 801601e:	4648      	mov	r0, r9
 8016020:	f002 f819 	bl	8018056 <__s2b>
 8016024:	9007      	str	r0, [sp, #28]
 8016026:	2800      	cmp	r0, #0
 8016028:	f43f af08 	beq.w	8015e3c <_strtod_l+0x434>
 801602c:	9a06      	ldr	r2, [sp, #24]
 801602e:	9b06      	ldr	r3, [sp, #24]
 8016030:	2a00      	cmp	r2, #0
 8016032:	f1c3 0300 	rsb	r3, r3, #0
 8016036:	bfa8      	it	ge
 8016038:	2300      	movge	r3, #0
 801603a:	930e      	str	r3, [sp, #56]	; 0x38
 801603c:	2400      	movs	r4, #0
 801603e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016042:	9316      	str	r3, [sp, #88]	; 0x58
 8016044:	46a0      	mov	r8, r4
 8016046:	9b07      	ldr	r3, [sp, #28]
 8016048:	4648      	mov	r0, r9
 801604a:	6859      	ldr	r1, [r3, #4]
 801604c:	f001 ff7d 	bl	8017f4a <_Balloc>
 8016050:	9005      	str	r0, [sp, #20]
 8016052:	2800      	cmp	r0, #0
 8016054:	f43f aef6 	beq.w	8015e44 <_strtod_l+0x43c>
 8016058:	9b07      	ldr	r3, [sp, #28]
 801605a:	691a      	ldr	r2, [r3, #16]
 801605c:	3202      	adds	r2, #2
 801605e:	f103 010c 	add.w	r1, r3, #12
 8016062:	0092      	lsls	r2, r2, #2
 8016064:	300c      	adds	r0, #12
 8016066:	f7fd fda9 	bl	8013bbc <memcpy>
 801606a:	aa1e      	add	r2, sp, #120	; 0x78
 801606c:	a91d      	add	r1, sp, #116	; 0x74
 801606e:	ec4b ab10 	vmov	d0, sl, fp
 8016072:	4648      	mov	r0, r9
 8016074:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016078:	f002 faa8 	bl	80185cc <__d2b>
 801607c:	901c      	str	r0, [sp, #112]	; 0x70
 801607e:	2800      	cmp	r0, #0
 8016080:	f43f aee0 	beq.w	8015e44 <_strtod_l+0x43c>
 8016084:	2101      	movs	r1, #1
 8016086:	4648      	mov	r0, r9
 8016088:	f002 f871 	bl	801816e <__i2b>
 801608c:	4680      	mov	r8, r0
 801608e:	2800      	cmp	r0, #0
 8016090:	f43f aed8 	beq.w	8015e44 <_strtod_l+0x43c>
 8016094:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016096:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016098:	2e00      	cmp	r6, #0
 801609a:	bfab      	itete	ge
 801609c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801609e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80160a0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80160a2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80160a4:	bfac      	ite	ge
 80160a6:	18f7      	addge	r7, r6, r3
 80160a8:	1b9d      	sublt	r5, r3, r6
 80160aa:	9b04      	ldr	r3, [sp, #16]
 80160ac:	1af6      	subs	r6, r6, r3
 80160ae:	4416      	add	r6, r2
 80160b0:	4b63      	ldr	r3, [pc, #396]	; (8016240 <_strtod_l+0x838>)
 80160b2:	3e01      	subs	r6, #1
 80160b4:	429e      	cmp	r6, r3
 80160b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80160ba:	f280 80af 	bge.w	801621c <_strtod_l+0x814>
 80160be:	1b9b      	subs	r3, r3, r6
 80160c0:	2b1f      	cmp	r3, #31
 80160c2:	eba2 0203 	sub.w	r2, r2, r3
 80160c6:	f04f 0101 	mov.w	r1, #1
 80160ca:	f300 809b 	bgt.w	8016204 <_strtod_l+0x7fc>
 80160ce:	fa01 f303 	lsl.w	r3, r1, r3
 80160d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80160d4:	2300      	movs	r3, #0
 80160d6:	930a      	str	r3, [sp, #40]	; 0x28
 80160d8:	18be      	adds	r6, r7, r2
 80160da:	9b04      	ldr	r3, [sp, #16]
 80160dc:	42b7      	cmp	r7, r6
 80160de:	4415      	add	r5, r2
 80160e0:	441d      	add	r5, r3
 80160e2:	463b      	mov	r3, r7
 80160e4:	bfa8      	it	ge
 80160e6:	4633      	movge	r3, r6
 80160e8:	42ab      	cmp	r3, r5
 80160ea:	bfa8      	it	ge
 80160ec:	462b      	movge	r3, r5
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	bfc2      	ittt	gt
 80160f2:	1af6      	subgt	r6, r6, r3
 80160f4:	1aed      	subgt	r5, r5, r3
 80160f6:	1aff      	subgt	r7, r7, r3
 80160f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160fa:	b1bb      	cbz	r3, 801612c <_strtod_l+0x724>
 80160fc:	4641      	mov	r1, r8
 80160fe:	461a      	mov	r2, r3
 8016100:	4648      	mov	r0, r9
 8016102:	f002 f8d3 	bl	80182ac <__pow5mult>
 8016106:	4680      	mov	r8, r0
 8016108:	2800      	cmp	r0, #0
 801610a:	f43f ae9b 	beq.w	8015e44 <_strtod_l+0x43c>
 801610e:	4601      	mov	r1, r0
 8016110:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016112:	4648      	mov	r0, r9
 8016114:	f002 f834 	bl	8018180 <__multiply>
 8016118:	900c      	str	r0, [sp, #48]	; 0x30
 801611a:	2800      	cmp	r0, #0
 801611c:	f43f ae92 	beq.w	8015e44 <_strtod_l+0x43c>
 8016120:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016122:	4648      	mov	r0, r9
 8016124:	f001 ff45 	bl	8017fb2 <_Bfree>
 8016128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801612a:	931c      	str	r3, [sp, #112]	; 0x70
 801612c:	2e00      	cmp	r6, #0
 801612e:	dc7a      	bgt.n	8016226 <_strtod_l+0x81e>
 8016130:	9b06      	ldr	r3, [sp, #24]
 8016132:	2b00      	cmp	r3, #0
 8016134:	dd08      	ble.n	8016148 <_strtod_l+0x740>
 8016136:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016138:	9905      	ldr	r1, [sp, #20]
 801613a:	4648      	mov	r0, r9
 801613c:	f002 f8b6 	bl	80182ac <__pow5mult>
 8016140:	9005      	str	r0, [sp, #20]
 8016142:	2800      	cmp	r0, #0
 8016144:	f43f ae7e 	beq.w	8015e44 <_strtod_l+0x43c>
 8016148:	2d00      	cmp	r5, #0
 801614a:	dd08      	ble.n	801615e <_strtod_l+0x756>
 801614c:	462a      	mov	r2, r5
 801614e:	9905      	ldr	r1, [sp, #20]
 8016150:	4648      	mov	r0, r9
 8016152:	f002 f8f9 	bl	8018348 <__lshift>
 8016156:	9005      	str	r0, [sp, #20]
 8016158:	2800      	cmp	r0, #0
 801615a:	f43f ae73 	beq.w	8015e44 <_strtod_l+0x43c>
 801615e:	2f00      	cmp	r7, #0
 8016160:	dd08      	ble.n	8016174 <_strtod_l+0x76c>
 8016162:	4641      	mov	r1, r8
 8016164:	463a      	mov	r2, r7
 8016166:	4648      	mov	r0, r9
 8016168:	f002 f8ee 	bl	8018348 <__lshift>
 801616c:	4680      	mov	r8, r0
 801616e:	2800      	cmp	r0, #0
 8016170:	f43f ae68 	beq.w	8015e44 <_strtod_l+0x43c>
 8016174:	9a05      	ldr	r2, [sp, #20]
 8016176:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016178:	4648      	mov	r0, r9
 801617a:	f002 f953 	bl	8018424 <__mdiff>
 801617e:	4604      	mov	r4, r0
 8016180:	2800      	cmp	r0, #0
 8016182:	f43f ae5f 	beq.w	8015e44 <_strtod_l+0x43c>
 8016186:	68c3      	ldr	r3, [r0, #12]
 8016188:	930c      	str	r3, [sp, #48]	; 0x30
 801618a:	2300      	movs	r3, #0
 801618c:	60c3      	str	r3, [r0, #12]
 801618e:	4641      	mov	r1, r8
 8016190:	f002 f92e 	bl	80183f0 <__mcmp>
 8016194:	2800      	cmp	r0, #0
 8016196:	da55      	bge.n	8016244 <_strtod_l+0x83c>
 8016198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801619a:	b9e3      	cbnz	r3, 80161d6 <_strtod_l+0x7ce>
 801619c:	f1ba 0f00 	cmp.w	sl, #0
 80161a0:	d119      	bne.n	80161d6 <_strtod_l+0x7ce>
 80161a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80161a6:	b9b3      	cbnz	r3, 80161d6 <_strtod_l+0x7ce>
 80161a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80161ac:	0d1b      	lsrs	r3, r3, #20
 80161ae:	051b      	lsls	r3, r3, #20
 80161b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80161b4:	d90f      	bls.n	80161d6 <_strtod_l+0x7ce>
 80161b6:	6963      	ldr	r3, [r4, #20]
 80161b8:	b913      	cbnz	r3, 80161c0 <_strtod_l+0x7b8>
 80161ba:	6923      	ldr	r3, [r4, #16]
 80161bc:	2b01      	cmp	r3, #1
 80161be:	dd0a      	ble.n	80161d6 <_strtod_l+0x7ce>
 80161c0:	4621      	mov	r1, r4
 80161c2:	2201      	movs	r2, #1
 80161c4:	4648      	mov	r0, r9
 80161c6:	f002 f8bf 	bl	8018348 <__lshift>
 80161ca:	4641      	mov	r1, r8
 80161cc:	4604      	mov	r4, r0
 80161ce:	f002 f90f 	bl	80183f0 <__mcmp>
 80161d2:	2800      	cmp	r0, #0
 80161d4:	dc67      	bgt.n	80162a6 <_strtod_l+0x89e>
 80161d6:	9b04      	ldr	r3, [sp, #16]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d171      	bne.n	80162c0 <_strtod_l+0x8b8>
 80161dc:	e63d      	b.n	8015e5a <_strtod_l+0x452>
 80161de:	f018 0f01 	tst.w	r8, #1
 80161e2:	d004      	beq.n	80161ee <_strtod_l+0x7e6>
 80161e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80161e8:	f7f2 f93e 	bl	8008468 <__aeabi_dmul>
 80161ec:	2301      	movs	r3, #1
 80161ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80161f2:	3508      	adds	r5, #8
 80161f4:	e6e5      	b.n	8015fc2 <_strtod_l+0x5ba>
 80161f6:	f04f 32ff 	mov.w	r2, #4294967295
 80161fa:	fa02 f303 	lsl.w	r3, r2, r3
 80161fe:	ea03 0a0a 	and.w	sl, r3, sl
 8016202:	e6ff      	b.n	8016004 <_strtod_l+0x5fc>
 8016204:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016208:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801620c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016210:	36e2      	adds	r6, #226	; 0xe2
 8016212:	fa01 f306 	lsl.w	r3, r1, r6
 8016216:	930a      	str	r3, [sp, #40]	; 0x28
 8016218:	910f      	str	r1, [sp, #60]	; 0x3c
 801621a:	e75d      	b.n	80160d8 <_strtod_l+0x6d0>
 801621c:	2300      	movs	r3, #0
 801621e:	930a      	str	r3, [sp, #40]	; 0x28
 8016220:	2301      	movs	r3, #1
 8016222:	930f      	str	r3, [sp, #60]	; 0x3c
 8016224:	e758      	b.n	80160d8 <_strtod_l+0x6d0>
 8016226:	4632      	mov	r2, r6
 8016228:	991c      	ldr	r1, [sp, #112]	; 0x70
 801622a:	4648      	mov	r0, r9
 801622c:	f002 f88c 	bl	8018348 <__lshift>
 8016230:	901c      	str	r0, [sp, #112]	; 0x70
 8016232:	2800      	cmp	r0, #0
 8016234:	f47f af7c 	bne.w	8016130 <_strtod_l+0x728>
 8016238:	e604      	b.n	8015e44 <_strtod_l+0x43c>
 801623a:	bf00      	nop
 801623c:	08019080 	.word	0x08019080
 8016240:	fffffc02 	.word	0xfffffc02
 8016244:	465d      	mov	r5, fp
 8016246:	f040 8086 	bne.w	8016356 <_strtod_l+0x94e>
 801624a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801624c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016250:	b32a      	cbz	r2, 801629e <_strtod_l+0x896>
 8016252:	4aaf      	ldr	r2, [pc, #700]	; (8016510 <_strtod_l+0xb08>)
 8016254:	4293      	cmp	r3, r2
 8016256:	d153      	bne.n	8016300 <_strtod_l+0x8f8>
 8016258:	9b04      	ldr	r3, [sp, #16]
 801625a:	4650      	mov	r0, sl
 801625c:	b1d3      	cbz	r3, 8016294 <_strtod_l+0x88c>
 801625e:	4aad      	ldr	r2, [pc, #692]	; (8016514 <_strtod_l+0xb0c>)
 8016260:	402a      	ands	r2, r5
 8016262:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016266:	f04f 31ff 	mov.w	r1, #4294967295
 801626a:	d816      	bhi.n	801629a <_strtod_l+0x892>
 801626c:	0d12      	lsrs	r2, r2, #20
 801626e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016272:	fa01 f303 	lsl.w	r3, r1, r3
 8016276:	4298      	cmp	r0, r3
 8016278:	d142      	bne.n	8016300 <_strtod_l+0x8f8>
 801627a:	4ba7      	ldr	r3, [pc, #668]	; (8016518 <_strtod_l+0xb10>)
 801627c:	429d      	cmp	r5, r3
 801627e:	d102      	bne.n	8016286 <_strtod_l+0x87e>
 8016280:	3001      	adds	r0, #1
 8016282:	f43f addf 	beq.w	8015e44 <_strtod_l+0x43c>
 8016286:	4ba3      	ldr	r3, [pc, #652]	; (8016514 <_strtod_l+0xb0c>)
 8016288:	402b      	ands	r3, r5
 801628a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801628e:	f04f 0a00 	mov.w	sl, #0
 8016292:	e7a0      	b.n	80161d6 <_strtod_l+0x7ce>
 8016294:	f04f 33ff 	mov.w	r3, #4294967295
 8016298:	e7ed      	b.n	8016276 <_strtod_l+0x86e>
 801629a:	460b      	mov	r3, r1
 801629c:	e7eb      	b.n	8016276 <_strtod_l+0x86e>
 801629e:	bb7b      	cbnz	r3, 8016300 <_strtod_l+0x8f8>
 80162a0:	f1ba 0f00 	cmp.w	sl, #0
 80162a4:	d12c      	bne.n	8016300 <_strtod_l+0x8f8>
 80162a6:	9904      	ldr	r1, [sp, #16]
 80162a8:	4a9a      	ldr	r2, [pc, #616]	; (8016514 <_strtod_l+0xb0c>)
 80162aa:	465b      	mov	r3, fp
 80162ac:	b1f1      	cbz	r1, 80162ec <_strtod_l+0x8e4>
 80162ae:	ea02 010b 	and.w	r1, r2, fp
 80162b2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80162b6:	dc19      	bgt.n	80162ec <_strtod_l+0x8e4>
 80162b8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80162bc:	f77f ae5b 	ble.w	8015f76 <_strtod_l+0x56e>
 80162c0:	4a96      	ldr	r2, [pc, #600]	; (801651c <_strtod_l+0xb14>)
 80162c2:	2300      	movs	r3, #0
 80162c4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80162c8:	4650      	mov	r0, sl
 80162ca:	4659      	mov	r1, fp
 80162cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80162d0:	f7f2 f8ca 	bl	8008468 <__aeabi_dmul>
 80162d4:	4682      	mov	sl, r0
 80162d6:	468b      	mov	fp, r1
 80162d8:	2900      	cmp	r1, #0
 80162da:	f47f adbe 	bne.w	8015e5a <_strtod_l+0x452>
 80162de:	2800      	cmp	r0, #0
 80162e0:	f47f adbb 	bne.w	8015e5a <_strtod_l+0x452>
 80162e4:	2322      	movs	r3, #34	; 0x22
 80162e6:	f8c9 3000 	str.w	r3, [r9]
 80162ea:	e5b6      	b.n	8015e5a <_strtod_l+0x452>
 80162ec:	4013      	ands	r3, r2
 80162ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80162f2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80162f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80162fa:	f04f 3aff 	mov.w	sl, #4294967295
 80162fe:	e76a      	b.n	80161d6 <_strtod_l+0x7ce>
 8016300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016302:	b193      	cbz	r3, 801632a <_strtod_l+0x922>
 8016304:	422b      	tst	r3, r5
 8016306:	f43f af66 	beq.w	80161d6 <_strtod_l+0x7ce>
 801630a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801630c:	9a04      	ldr	r2, [sp, #16]
 801630e:	4650      	mov	r0, sl
 8016310:	4659      	mov	r1, fp
 8016312:	b173      	cbz	r3, 8016332 <_strtod_l+0x92a>
 8016314:	f7ff fb59 	bl	80159ca <sulp>
 8016318:	4602      	mov	r2, r0
 801631a:	460b      	mov	r3, r1
 801631c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016320:	f7f1 feec 	bl	80080fc <__adddf3>
 8016324:	4682      	mov	sl, r0
 8016326:	468b      	mov	fp, r1
 8016328:	e755      	b.n	80161d6 <_strtod_l+0x7ce>
 801632a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801632c:	ea13 0f0a 	tst.w	r3, sl
 8016330:	e7e9      	b.n	8016306 <_strtod_l+0x8fe>
 8016332:	f7ff fb4a 	bl	80159ca <sulp>
 8016336:	4602      	mov	r2, r0
 8016338:	460b      	mov	r3, r1
 801633a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801633e:	f7f1 fedb 	bl	80080f8 <__aeabi_dsub>
 8016342:	2200      	movs	r2, #0
 8016344:	2300      	movs	r3, #0
 8016346:	4682      	mov	sl, r0
 8016348:	468b      	mov	fp, r1
 801634a:	f7f2 faf5 	bl	8008938 <__aeabi_dcmpeq>
 801634e:	2800      	cmp	r0, #0
 8016350:	f47f ae11 	bne.w	8015f76 <_strtod_l+0x56e>
 8016354:	e73f      	b.n	80161d6 <_strtod_l+0x7ce>
 8016356:	4641      	mov	r1, r8
 8016358:	4620      	mov	r0, r4
 801635a:	f002 f986 	bl	801866a <__ratio>
 801635e:	ec57 6b10 	vmov	r6, r7, d0
 8016362:	2200      	movs	r2, #0
 8016364:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016368:	ee10 0a10 	vmov	r0, s0
 801636c:	4639      	mov	r1, r7
 801636e:	f7f2 faf7 	bl	8008960 <__aeabi_dcmple>
 8016372:	2800      	cmp	r0, #0
 8016374:	d077      	beq.n	8016466 <_strtod_l+0xa5e>
 8016376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016378:	2b00      	cmp	r3, #0
 801637a:	d04a      	beq.n	8016412 <_strtod_l+0xa0a>
 801637c:	4b68      	ldr	r3, [pc, #416]	; (8016520 <_strtod_l+0xb18>)
 801637e:	2200      	movs	r2, #0
 8016380:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016384:	4f66      	ldr	r7, [pc, #408]	; (8016520 <_strtod_l+0xb18>)
 8016386:	2600      	movs	r6, #0
 8016388:	4b62      	ldr	r3, [pc, #392]	; (8016514 <_strtod_l+0xb0c>)
 801638a:	402b      	ands	r3, r5
 801638c:	930f      	str	r3, [sp, #60]	; 0x3c
 801638e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016390:	4b64      	ldr	r3, [pc, #400]	; (8016524 <_strtod_l+0xb1c>)
 8016392:	429a      	cmp	r2, r3
 8016394:	f040 80ce 	bne.w	8016534 <_strtod_l+0xb2c>
 8016398:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801639c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80163a0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80163a4:	ec4b ab10 	vmov	d0, sl, fp
 80163a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80163ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80163b0:	f002 f896 	bl	80184e0 <__ulp>
 80163b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80163b8:	ec53 2b10 	vmov	r2, r3, d0
 80163bc:	f7f2 f854 	bl	8008468 <__aeabi_dmul>
 80163c0:	4652      	mov	r2, sl
 80163c2:	465b      	mov	r3, fp
 80163c4:	f7f1 fe9a 	bl	80080fc <__adddf3>
 80163c8:	460b      	mov	r3, r1
 80163ca:	4952      	ldr	r1, [pc, #328]	; (8016514 <_strtod_l+0xb0c>)
 80163cc:	4a56      	ldr	r2, [pc, #344]	; (8016528 <_strtod_l+0xb20>)
 80163ce:	4019      	ands	r1, r3
 80163d0:	4291      	cmp	r1, r2
 80163d2:	4682      	mov	sl, r0
 80163d4:	d95b      	bls.n	801648e <_strtod_l+0xa86>
 80163d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163d8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80163dc:	4293      	cmp	r3, r2
 80163de:	d103      	bne.n	80163e8 <_strtod_l+0x9e0>
 80163e0:	9b08      	ldr	r3, [sp, #32]
 80163e2:	3301      	adds	r3, #1
 80163e4:	f43f ad2e 	beq.w	8015e44 <_strtod_l+0x43c>
 80163e8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016518 <_strtod_l+0xb10>
 80163ec:	f04f 3aff 	mov.w	sl, #4294967295
 80163f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80163f2:	4648      	mov	r0, r9
 80163f4:	f001 fddd 	bl	8017fb2 <_Bfree>
 80163f8:	9905      	ldr	r1, [sp, #20]
 80163fa:	4648      	mov	r0, r9
 80163fc:	f001 fdd9 	bl	8017fb2 <_Bfree>
 8016400:	4641      	mov	r1, r8
 8016402:	4648      	mov	r0, r9
 8016404:	f001 fdd5 	bl	8017fb2 <_Bfree>
 8016408:	4621      	mov	r1, r4
 801640a:	4648      	mov	r0, r9
 801640c:	f001 fdd1 	bl	8017fb2 <_Bfree>
 8016410:	e619      	b.n	8016046 <_strtod_l+0x63e>
 8016412:	f1ba 0f00 	cmp.w	sl, #0
 8016416:	d11a      	bne.n	801644e <_strtod_l+0xa46>
 8016418:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801641c:	b9eb      	cbnz	r3, 801645a <_strtod_l+0xa52>
 801641e:	2200      	movs	r2, #0
 8016420:	4b3f      	ldr	r3, [pc, #252]	; (8016520 <_strtod_l+0xb18>)
 8016422:	4630      	mov	r0, r6
 8016424:	4639      	mov	r1, r7
 8016426:	f7f2 fa91 	bl	800894c <__aeabi_dcmplt>
 801642a:	b9c8      	cbnz	r0, 8016460 <_strtod_l+0xa58>
 801642c:	4630      	mov	r0, r6
 801642e:	4639      	mov	r1, r7
 8016430:	2200      	movs	r2, #0
 8016432:	4b3e      	ldr	r3, [pc, #248]	; (801652c <_strtod_l+0xb24>)
 8016434:	f7f2 f818 	bl	8008468 <__aeabi_dmul>
 8016438:	4606      	mov	r6, r0
 801643a:	460f      	mov	r7, r1
 801643c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016440:	9618      	str	r6, [sp, #96]	; 0x60
 8016442:	9319      	str	r3, [sp, #100]	; 0x64
 8016444:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016448:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801644c:	e79c      	b.n	8016388 <_strtod_l+0x980>
 801644e:	f1ba 0f01 	cmp.w	sl, #1
 8016452:	d102      	bne.n	801645a <_strtod_l+0xa52>
 8016454:	2d00      	cmp	r5, #0
 8016456:	f43f ad8e 	beq.w	8015f76 <_strtod_l+0x56e>
 801645a:	2200      	movs	r2, #0
 801645c:	4b34      	ldr	r3, [pc, #208]	; (8016530 <_strtod_l+0xb28>)
 801645e:	e78f      	b.n	8016380 <_strtod_l+0x978>
 8016460:	2600      	movs	r6, #0
 8016462:	4f32      	ldr	r7, [pc, #200]	; (801652c <_strtod_l+0xb24>)
 8016464:	e7ea      	b.n	801643c <_strtod_l+0xa34>
 8016466:	4b31      	ldr	r3, [pc, #196]	; (801652c <_strtod_l+0xb24>)
 8016468:	4630      	mov	r0, r6
 801646a:	4639      	mov	r1, r7
 801646c:	2200      	movs	r2, #0
 801646e:	f7f1 fffb 	bl	8008468 <__aeabi_dmul>
 8016472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016474:	4606      	mov	r6, r0
 8016476:	460f      	mov	r7, r1
 8016478:	b933      	cbnz	r3, 8016488 <_strtod_l+0xa80>
 801647a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801647e:	9010      	str	r0, [sp, #64]	; 0x40
 8016480:	9311      	str	r3, [sp, #68]	; 0x44
 8016482:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016486:	e7df      	b.n	8016448 <_strtod_l+0xa40>
 8016488:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801648c:	e7f9      	b.n	8016482 <_strtod_l+0xa7a>
 801648e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016492:	9b04      	ldr	r3, [sp, #16]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d1ab      	bne.n	80163f0 <_strtod_l+0x9e8>
 8016498:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801649c:	0d1b      	lsrs	r3, r3, #20
 801649e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80164a0:	051b      	lsls	r3, r3, #20
 80164a2:	429a      	cmp	r2, r3
 80164a4:	465d      	mov	r5, fp
 80164a6:	d1a3      	bne.n	80163f0 <_strtod_l+0x9e8>
 80164a8:	4639      	mov	r1, r7
 80164aa:	4630      	mov	r0, r6
 80164ac:	f7f2 fa8c 	bl	80089c8 <__aeabi_d2iz>
 80164b0:	f7f1 ff70 	bl	8008394 <__aeabi_i2d>
 80164b4:	460b      	mov	r3, r1
 80164b6:	4602      	mov	r2, r0
 80164b8:	4639      	mov	r1, r7
 80164ba:	4630      	mov	r0, r6
 80164bc:	f7f1 fe1c 	bl	80080f8 <__aeabi_dsub>
 80164c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164c2:	4606      	mov	r6, r0
 80164c4:	460f      	mov	r7, r1
 80164c6:	b933      	cbnz	r3, 80164d6 <_strtod_l+0xace>
 80164c8:	f1ba 0f00 	cmp.w	sl, #0
 80164cc:	d103      	bne.n	80164d6 <_strtod_l+0xace>
 80164ce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80164d2:	2d00      	cmp	r5, #0
 80164d4:	d06d      	beq.n	80165b2 <_strtod_l+0xbaa>
 80164d6:	a30a      	add	r3, pc, #40	; (adr r3, 8016500 <_strtod_l+0xaf8>)
 80164d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164dc:	4630      	mov	r0, r6
 80164de:	4639      	mov	r1, r7
 80164e0:	f7f2 fa34 	bl	800894c <__aeabi_dcmplt>
 80164e4:	2800      	cmp	r0, #0
 80164e6:	f47f acb8 	bne.w	8015e5a <_strtod_l+0x452>
 80164ea:	a307      	add	r3, pc, #28	; (adr r3, 8016508 <_strtod_l+0xb00>)
 80164ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f0:	4630      	mov	r0, r6
 80164f2:	4639      	mov	r1, r7
 80164f4:	f7f2 fa48 	bl	8008988 <__aeabi_dcmpgt>
 80164f8:	2800      	cmp	r0, #0
 80164fa:	f43f af79 	beq.w	80163f0 <_strtod_l+0x9e8>
 80164fe:	e4ac      	b.n	8015e5a <_strtod_l+0x452>
 8016500:	94a03595 	.word	0x94a03595
 8016504:	3fdfffff 	.word	0x3fdfffff
 8016508:	35afe535 	.word	0x35afe535
 801650c:	3fe00000 	.word	0x3fe00000
 8016510:	000fffff 	.word	0x000fffff
 8016514:	7ff00000 	.word	0x7ff00000
 8016518:	7fefffff 	.word	0x7fefffff
 801651c:	39500000 	.word	0x39500000
 8016520:	3ff00000 	.word	0x3ff00000
 8016524:	7fe00000 	.word	0x7fe00000
 8016528:	7c9fffff 	.word	0x7c9fffff
 801652c:	3fe00000 	.word	0x3fe00000
 8016530:	bff00000 	.word	0xbff00000
 8016534:	9b04      	ldr	r3, [sp, #16]
 8016536:	b333      	cbz	r3, 8016586 <_strtod_l+0xb7e>
 8016538:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801653a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801653e:	d822      	bhi.n	8016586 <_strtod_l+0xb7e>
 8016540:	a327      	add	r3, pc, #156	; (adr r3, 80165e0 <_strtod_l+0xbd8>)
 8016542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016546:	4630      	mov	r0, r6
 8016548:	4639      	mov	r1, r7
 801654a:	f7f2 fa09 	bl	8008960 <__aeabi_dcmple>
 801654e:	b1a0      	cbz	r0, 801657a <_strtod_l+0xb72>
 8016550:	4639      	mov	r1, r7
 8016552:	4630      	mov	r0, r6
 8016554:	f7f2 fa60 	bl	8008a18 <__aeabi_d2uiz>
 8016558:	2800      	cmp	r0, #0
 801655a:	bf08      	it	eq
 801655c:	2001      	moveq	r0, #1
 801655e:	f7f1 ff09 	bl	8008374 <__aeabi_ui2d>
 8016562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016564:	4606      	mov	r6, r0
 8016566:	460f      	mov	r7, r1
 8016568:	bb03      	cbnz	r3, 80165ac <_strtod_l+0xba4>
 801656a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801656e:	9012      	str	r0, [sp, #72]	; 0x48
 8016570:	9313      	str	r3, [sp, #76]	; 0x4c
 8016572:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016576:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801657a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801657c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801657e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016582:	1a9b      	subs	r3, r3, r2
 8016584:	930b      	str	r3, [sp, #44]	; 0x2c
 8016586:	ed9d 0b08 	vldr	d0, [sp, #32]
 801658a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801658e:	f001 ffa7 	bl	80184e0 <__ulp>
 8016592:	4650      	mov	r0, sl
 8016594:	ec53 2b10 	vmov	r2, r3, d0
 8016598:	4659      	mov	r1, fp
 801659a:	f7f1 ff65 	bl	8008468 <__aeabi_dmul>
 801659e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80165a2:	f7f1 fdab 	bl	80080fc <__adddf3>
 80165a6:	4682      	mov	sl, r0
 80165a8:	468b      	mov	fp, r1
 80165aa:	e772      	b.n	8016492 <_strtod_l+0xa8a>
 80165ac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80165b0:	e7df      	b.n	8016572 <_strtod_l+0xb6a>
 80165b2:	a30d      	add	r3, pc, #52	; (adr r3, 80165e8 <_strtod_l+0xbe0>)
 80165b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165b8:	f7f2 f9c8 	bl	800894c <__aeabi_dcmplt>
 80165bc:	e79c      	b.n	80164f8 <_strtod_l+0xaf0>
 80165be:	2300      	movs	r3, #0
 80165c0:	930d      	str	r3, [sp, #52]	; 0x34
 80165c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80165c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80165c6:	6013      	str	r3, [r2, #0]
 80165c8:	f7ff ba61 	b.w	8015a8e <_strtod_l+0x86>
 80165cc:	2b65      	cmp	r3, #101	; 0x65
 80165ce:	f04f 0200 	mov.w	r2, #0
 80165d2:	f43f ab4e 	beq.w	8015c72 <_strtod_l+0x26a>
 80165d6:	2101      	movs	r1, #1
 80165d8:	4614      	mov	r4, r2
 80165da:	9104      	str	r1, [sp, #16]
 80165dc:	f7ff bacb 	b.w	8015b76 <_strtod_l+0x16e>
 80165e0:	ffc00000 	.word	0xffc00000
 80165e4:	41dfffff 	.word	0x41dfffff
 80165e8:	94a03595 	.word	0x94a03595
 80165ec:	3fcfffff 	.word	0x3fcfffff

080165f0 <_strtod_r>:
 80165f0:	4b05      	ldr	r3, [pc, #20]	; (8016608 <_strtod_r+0x18>)
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	b410      	push	{r4}
 80165f6:	6a1b      	ldr	r3, [r3, #32]
 80165f8:	4c04      	ldr	r4, [pc, #16]	; (801660c <_strtod_r+0x1c>)
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	bf08      	it	eq
 80165fe:	4623      	moveq	r3, r4
 8016600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016604:	f7ff ba00 	b.w	8015a08 <_strtod_l>
 8016608:	20000038 	.word	0x20000038
 801660c:	2000009c 	.word	0x2000009c

08016610 <_strtol_l.isra.0>:
 8016610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016614:	4680      	mov	r8, r0
 8016616:	4689      	mov	r9, r1
 8016618:	4692      	mov	sl, r2
 801661a:	461e      	mov	r6, r3
 801661c:	460f      	mov	r7, r1
 801661e:	463d      	mov	r5, r7
 8016620:	9808      	ldr	r0, [sp, #32]
 8016622:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016626:	f001 fc27 	bl	8017e78 <__locale_ctype_ptr_l>
 801662a:	4420      	add	r0, r4
 801662c:	7843      	ldrb	r3, [r0, #1]
 801662e:	f013 0308 	ands.w	r3, r3, #8
 8016632:	d132      	bne.n	801669a <_strtol_l.isra.0+0x8a>
 8016634:	2c2d      	cmp	r4, #45	; 0x2d
 8016636:	d132      	bne.n	801669e <_strtol_l.isra.0+0x8e>
 8016638:	787c      	ldrb	r4, [r7, #1]
 801663a:	1cbd      	adds	r5, r7, #2
 801663c:	2201      	movs	r2, #1
 801663e:	2e00      	cmp	r6, #0
 8016640:	d05d      	beq.n	80166fe <_strtol_l.isra.0+0xee>
 8016642:	2e10      	cmp	r6, #16
 8016644:	d109      	bne.n	801665a <_strtol_l.isra.0+0x4a>
 8016646:	2c30      	cmp	r4, #48	; 0x30
 8016648:	d107      	bne.n	801665a <_strtol_l.isra.0+0x4a>
 801664a:	782b      	ldrb	r3, [r5, #0]
 801664c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016650:	2b58      	cmp	r3, #88	; 0x58
 8016652:	d14f      	bne.n	80166f4 <_strtol_l.isra.0+0xe4>
 8016654:	786c      	ldrb	r4, [r5, #1]
 8016656:	2610      	movs	r6, #16
 8016658:	3502      	adds	r5, #2
 801665a:	2a00      	cmp	r2, #0
 801665c:	bf14      	ite	ne
 801665e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016662:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016666:	2700      	movs	r7, #0
 8016668:	fbb1 fcf6 	udiv	ip, r1, r6
 801666c:	4638      	mov	r0, r7
 801666e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016672:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016676:	2b09      	cmp	r3, #9
 8016678:	d817      	bhi.n	80166aa <_strtol_l.isra.0+0x9a>
 801667a:	461c      	mov	r4, r3
 801667c:	42a6      	cmp	r6, r4
 801667e:	dd23      	ble.n	80166c8 <_strtol_l.isra.0+0xb8>
 8016680:	1c7b      	adds	r3, r7, #1
 8016682:	d007      	beq.n	8016694 <_strtol_l.isra.0+0x84>
 8016684:	4584      	cmp	ip, r0
 8016686:	d31c      	bcc.n	80166c2 <_strtol_l.isra.0+0xb2>
 8016688:	d101      	bne.n	801668e <_strtol_l.isra.0+0x7e>
 801668a:	45a6      	cmp	lr, r4
 801668c:	db19      	blt.n	80166c2 <_strtol_l.isra.0+0xb2>
 801668e:	fb00 4006 	mla	r0, r0, r6, r4
 8016692:	2701      	movs	r7, #1
 8016694:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016698:	e7eb      	b.n	8016672 <_strtol_l.isra.0+0x62>
 801669a:	462f      	mov	r7, r5
 801669c:	e7bf      	b.n	801661e <_strtol_l.isra.0+0xe>
 801669e:	2c2b      	cmp	r4, #43	; 0x2b
 80166a0:	bf04      	itt	eq
 80166a2:	1cbd      	addeq	r5, r7, #2
 80166a4:	787c      	ldrbeq	r4, [r7, #1]
 80166a6:	461a      	mov	r2, r3
 80166a8:	e7c9      	b.n	801663e <_strtol_l.isra.0+0x2e>
 80166aa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80166ae:	2b19      	cmp	r3, #25
 80166b0:	d801      	bhi.n	80166b6 <_strtol_l.isra.0+0xa6>
 80166b2:	3c37      	subs	r4, #55	; 0x37
 80166b4:	e7e2      	b.n	801667c <_strtol_l.isra.0+0x6c>
 80166b6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80166ba:	2b19      	cmp	r3, #25
 80166bc:	d804      	bhi.n	80166c8 <_strtol_l.isra.0+0xb8>
 80166be:	3c57      	subs	r4, #87	; 0x57
 80166c0:	e7dc      	b.n	801667c <_strtol_l.isra.0+0x6c>
 80166c2:	f04f 37ff 	mov.w	r7, #4294967295
 80166c6:	e7e5      	b.n	8016694 <_strtol_l.isra.0+0x84>
 80166c8:	1c7b      	adds	r3, r7, #1
 80166ca:	d108      	bne.n	80166de <_strtol_l.isra.0+0xce>
 80166cc:	2322      	movs	r3, #34	; 0x22
 80166ce:	f8c8 3000 	str.w	r3, [r8]
 80166d2:	4608      	mov	r0, r1
 80166d4:	f1ba 0f00 	cmp.w	sl, #0
 80166d8:	d107      	bne.n	80166ea <_strtol_l.isra.0+0xda>
 80166da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166de:	b102      	cbz	r2, 80166e2 <_strtol_l.isra.0+0xd2>
 80166e0:	4240      	negs	r0, r0
 80166e2:	f1ba 0f00 	cmp.w	sl, #0
 80166e6:	d0f8      	beq.n	80166da <_strtol_l.isra.0+0xca>
 80166e8:	b10f      	cbz	r7, 80166ee <_strtol_l.isra.0+0xde>
 80166ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80166ee:	f8ca 9000 	str.w	r9, [sl]
 80166f2:	e7f2      	b.n	80166da <_strtol_l.isra.0+0xca>
 80166f4:	2430      	movs	r4, #48	; 0x30
 80166f6:	2e00      	cmp	r6, #0
 80166f8:	d1af      	bne.n	801665a <_strtol_l.isra.0+0x4a>
 80166fa:	2608      	movs	r6, #8
 80166fc:	e7ad      	b.n	801665a <_strtol_l.isra.0+0x4a>
 80166fe:	2c30      	cmp	r4, #48	; 0x30
 8016700:	d0a3      	beq.n	801664a <_strtol_l.isra.0+0x3a>
 8016702:	260a      	movs	r6, #10
 8016704:	e7a9      	b.n	801665a <_strtol_l.isra.0+0x4a>
	...

08016708 <_strtol_r>:
 8016708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801670a:	4c06      	ldr	r4, [pc, #24]	; (8016724 <_strtol_r+0x1c>)
 801670c:	4d06      	ldr	r5, [pc, #24]	; (8016728 <_strtol_r+0x20>)
 801670e:	6824      	ldr	r4, [r4, #0]
 8016710:	6a24      	ldr	r4, [r4, #32]
 8016712:	2c00      	cmp	r4, #0
 8016714:	bf08      	it	eq
 8016716:	462c      	moveq	r4, r5
 8016718:	9400      	str	r4, [sp, #0]
 801671a:	f7ff ff79 	bl	8016610 <_strtol_l.isra.0>
 801671e:	b003      	add	sp, #12
 8016720:	bd30      	pop	{r4, r5, pc}
 8016722:	bf00      	nop
 8016724:	20000038 	.word	0x20000038
 8016728:	2000009c 	.word	0x2000009c

0801672c <_strtoul_l.isra.0>:
 801672c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016730:	4680      	mov	r8, r0
 8016732:	4689      	mov	r9, r1
 8016734:	4692      	mov	sl, r2
 8016736:	461e      	mov	r6, r3
 8016738:	460f      	mov	r7, r1
 801673a:	463d      	mov	r5, r7
 801673c:	9808      	ldr	r0, [sp, #32]
 801673e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016742:	f001 fb99 	bl	8017e78 <__locale_ctype_ptr_l>
 8016746:	4420      	add	r0, r4
 8016748:	7843      	ldrb	r3, [r0, #1]
 801674a:	f013 0308 	ands.w	r3, r3, #8
 801674e:	d130      	bne.n	80167b2 <_strtoul_l.isra.0+0x86>
 8016750:	2c2d      	cmp	r4, #45	; 0x2d
 8016752:	d130      	bne.n	80167b6 <_strtoul_l.isra.0+0x8a>
 8016754:	787c      	ldrb	r4, [r7, #1]
 8016756:	1cbd      	adds	r5, r7, #2
 8016758:	2101      	movs	r1, #1
 801675a:	2e00      	cmp	r6, #0
 801675c:	d05c      	beq.n	8016818 <_strtoul_l.isra.0+0xec>
 801675e:	2e10      	cmp	r6, #16
 8016760:	d109      	bne.n	8016776 <_strtoul_l.isra.0+0x4a>
 8016762:	2c30      	cmp	r4, #48	; 0x30
 8016764:	d107      	bne.n	8016776 <_strtoul_l.isra.0+0x4a>
 8016766:	782b      	ldrb	r3, [r5, #0]
 8016768:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801676c:	2b58      	cmp	r3, #88	; 0x58
 801676e:	d14e      	bne.n	801680e <_strtoul_l.isra.0+0xe2>
 8016770:	786c      	ldrb	r4, [r5, #1]
 8016772:	2610      	movs	r6, #16
 8016774:	3502      	adds	r5, #2
 8016776:	f04f 32ff 	mov.w	r2, #4294967295
 801677a:	2300      	movs	r3, #0
 801677c:	fbb2 f2f6 	udiv	r2, r2, r6
 8016780:	fb06 fc02 	mul.w	ip, r6, r2
 8016784:	ea6f 0c0c 	mvn.w	ip, ip
 8016788:	4618      	mov	r0, r3
 801678a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801678e:	2f09      	cmp	r7, #9
 8016790:	d817      	bhi.n	80167c2 <_strtoul_l.isra.0+0x96>
 8016792:	463c      	mov	r4, r7
 8016794:	42a6      	cmp	r6, r4
 8016796:	dd23      	ble.n	80167e0 <_strtoul_l.isra.0+0xb4>
 8016798:	2b00      	cmp	r3, #0
 801679a:	db1e      	blt.n	80167da <_strtoul_l.isra.0+0xae>
 801679c:	4282      	cmp	r2, r0
 801679e:	d31c      	bcc.n	80167da <_strtoul_l.isra.0+0xae>
 80167a0:	d101      	bne.n	80167a6 <_strtoul_l.isra.0+0x7a>
 80167a2:	45a4      	cmp	ip, r4
 80167a4:	db19      	blt.n	80167da <_strtoul_l.isra.0+0xae>
 80167a6:	fb00 4006 	mla	r0, r0, r6, r4
 80167aa:	2301      	movs	r3, #1
 80167ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80167b0:	e7eb      	b.n	801678a <_strtoul_l.isra.0+0x5e>
 80167b2:	462f      	mov	r7, r5
 80167b4:	e7c1      	b.n	801673a <_strtoul_l.isra.0+0xe>
 80167b6:	2c2b      	cmp	r4, #43	; 0x2b
 80167b8:	bf04      	itt	eq
 80167ba:	1cbd      	addeq	r5, r7, #2
 80167bc:	787c      	ldrbeq	r4, [r7, #1]
 80167be:	4619      	mov	r1, r3
 80167c0:	e7cb      	b.n	801675a <_strtoul_l.isra.0+0x2e>
 80167c2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80167c6:	2f19      	cmp	r7, #25
 80167c8:	d801      	bhi.n	80167ce <_strtoul_l.isra.0+0xa2>
 80167ca:	3c37      	subs	r4, #55	; 0x37
 80167cc:	e7e2      	b.n	8016794 <_strtoul_l.isra.0+0x68>
 80167ce:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80167d2:	2f19      	cmp	r7, #25
 80167d4:	d804      	bhi.n	80167e0 <_strtoul_l.isra.0+0xb4>
 80167d6:	3c57      	subs	r4, #87	; 0x57
 80167d8:	e7dc      	b.n	8016794 <_strtoul_l.isra.0+0x68>
 80167da:	f04f 33ff 	mov.w	r3, #4294967295
 80167de:	e7e5      	b.n	80167ac <_strtoul_l.isra.0+0x80>
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	da09      	bge.n	80167f8 <_strtoul_l.isra.0+0xcc>
 80167e4:	2322      	movs	r3, #34	; 0x22
 80167e6:	f8c8 3000 	str.w	r3, [r8]
 80167ea:	f04f 30ff 	mov.w	r0, #4294967295
 80167ee:	f1ba 0f00 	cmp.w	sl, #0
 80167f2:	d107      	bne.n	8016804 <_strtoul_l.isra.0+0xd8>
 80167f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167f8:	b101      	cbz	r1, 80167fc <_strtoul_l.isra.0+0xd0>
 80167fa:	4240      	negs	r0, r0
 80167fc:	f1ba 0f00 	cmp.w	sl, #0
 8016800:	d0f8      	beq.n	80167f4 <_strtoul_l.isra.0+0xc8>
 8016802:	b10b      	cbz	r3, 8016808 <_strtoul_l.isra.0+0xdc>
 8016804:	f105 39ff 	add.w	r9, r5, #4294967295
 8016808:	f8ca 9000 	str.w	r9, [sl]
 801680c:	e7f2      	b.n	80167f4 <_strtoul_l.isra.0+0xc8>
 801680e:	2430      	movs	r4, #48	; 0x30
 8016810:	2e00      	cmp	r6, #0
 8016812:	d1b0      	bne.n	8016776 <_strtoul_l.isra.0+0x4a>
 8016814:	2608      	movs	r6, #8
 8016816:	e7ae      	b.n	8016776 <_strtoul_l.isra.0+0x4a>
 8016818:	2c30      	cmp	r4, #48	; 0x30
 801681a:	d0a4      	beq.n	8016766 <_strtoul_l.isra.0+0x3a>
 801681c:	260a      	movs	r6, #10
 801681e:	e7aa      	b.n	8016776 <_strtoul_l.isra.0+0x4a>

08016820 <_strtoul_r>:
 8016820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016822:	4c06      	ldr	r4, [pc, #24]	; (801683c <_strtoul_r+0x1c>)
 8016824:	4d06      	ldr	r5, [pc, #24]	; (8016840 <_strtoul_r+0x20>)
 8016826:	6824      	ldr	r4, [r4, #0]
 8016828:	6a24      	ldr	r4, [r4, #32]
 801682a:	2c00      	cmp	r4, #0
 801682c:	bf08      	it	eq
 801682e:	462c      	moveq	r4, r5
 8016830:	9400      	str	r4, [sp, #0]
 8016832:	f7ff ff7b 	bl	801672c <_strtoul_l.isra.0>
 8016836:	b003      	add	sp, #12
 8016838:	bd30      	pop	{r4, r5, pc}
 801683a:	bf00      	nop
 801683c:	20000038 	.word	0x20000038
 8016840:	2000009c 	.word	0x2000009c

08016844 <__submore>:
 8016844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016848:	460c      	mov	r4, r1
 801684a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801684c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016850:	4299      	cmp	r1, r3
 8016852:	d11d      	bne.n	8016890 <__submore+0x4c>
 8016854:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016858:	f7fd fa12 	bl	8013c80 <_malloc_r>
 801685c:	b918      	cbnz	r0, 8016866 <__submore+0x22>
 801685e:	f04f 30ff 	mov.w	r0, #4294967295
 8016862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801686a:	63a3      	str	r3, [r4, #56]	; 0x38
 801686c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016870:	6360      	str	r0, [r4, #52]	; 0x34
 8016872:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016876:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801687a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801687e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016882:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016886:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801688a:	6020      	str	r0, [r4, #0]
 801688c:	2000      	movs	r0, #0
 801688e:	e7e8      	b.n	8016862 <__submore+0x1e>
 8016890:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016892:	0077      	lsls	r7, r6, #1
 8016894:	463a      	mov	r2, r7
 8016896:	f001 ff64 	bl	8018762 <_realloc_r>
 801689a:	4605      	mov	r5, r0
 801689c:	2800      	cmp	r0, #0
 801689e:	d0de      	beq.n	801685e <__submore+0x1a>
 80168a0:	eb00 0806 	add.w	r8, r0, r6
 80168a4:	4601      	mov	r1, r0
 80168a6:	4632      	mov	r2, r6
 80168a8:	4640      	mov	r0, r8
 80168aa:	f7fd f987 	bl	8013bbc <memcpy>
 80168ae:	f8c4 8000 	str.w	r8, [r4]
 80168b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80168b6:	e7e9      	b.n	801688c <__submore+0x48>

080168b8 <_ungetc_r>:
 80168b8:	1c4b      	adds	r3, r1, #1
 80168ba:	b570      	push	{r4, r5, r6, lr}
 80168bc:	4606      	mov	r6, r0
 80168be:	460d      	mov	r5, r1
 80168c0:	4614      	mov	r4, r2
 80168c2:	d103      	bne.n	80168cc <_ungetc_r+0x14>
 80168c4:	f04f 35ff 	mov.w	r5, #4294967295
 80168c8:	4628      	mov	r0, r5
 80168ca:	bd70      	pop	{r4, r5, r6, pc}
 80168cc:	b118      	cbz	r0, 80168d6 <_ungetc_r+0x1e>
 80168ce:	6983      	ldr	r3, [r0, #24]
 80168d0:	b90b      	cbnz	r3, 80168d6 <_ungetc_r+0x1e>
 80168d2:	f7fd f845 	bl	8013960 <__sinit>
 80168d6:	4b2e      	ldr	r3, [pc, #184]	; (8016990 <_ungetc_r+0xd8>)
 80168d8:	429c      	cmp	r4, r3
 80168da:	d12c      	bne.n	8016936 <_ungetc_r+0x7e>
 80168dc:	6874      	ldr	r4, [r6, #4]
 80168de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168e2:	f023 0320 	bic.w	r3, r3, #32
 80168e6:	81a3      	strh	r3, [r4, #12]
 80168e8:	b29b      	uxth	r3, r3
 80168ea:	0759      	lsls	r1, r3, #29
 80168ec:	d413      	bmi.n	8016916 <_ungetc_r+0x5e>
 80168ee:	06da      	lsls	r2, r3, #27
 80168f0:	d5e8      	bpl.n	80168c4 <_ungetc_r+0xc>
 80168f2:	071b      	lsls	r3, r3, #28
 80168f4:	d50b      	bpl.n	801690e <_ungetc_r+0x56>
 80168f6:	4621      	mov	r1, r4
 80168f8:	4630      	mov	r0, r6
 80168fa:	f7fc ffb5 	bl	8013868 <_fflush_r>
 80168fe:	2800      	cmp	r0, #0
 8016900:	d1e0      	bne.n	80168c4 <_ungetc_r+0xc>
 8016902:	89a3      	ldrh	r3, [r4, #12]
 8016904:	60a0      	str	r0, [r4, #8]
 8016906:	f023 0308 	bic.w	r3, r3, #8
 801690a:	81a3      	strh	r3, [r4, #12]
 801690c:	61a0      	str	r0, [r4, #24]
 801690e:	89a3      	ldrh	r3, [r4, #12]
 8016910:	f043 0304 	orr.w	r3, r3, #4
 8016914:	81a3      	strh	r3, [r4, #12]
 8016916:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016918:	6862      	ldr	r2, [r4, #4]
 801691a:	b2ed      	uxtb	r5, r5
 801691c:	b1e3      	cbz	r3, 8016958 <_ungetc_r+0xa0>
 801691e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016920:	4293      	cmp	r3, r2
 8016922:	dd12      	ble.n	801694a <_ungetc_r+0x92>
 8016924:	6823      	ldr	r3, [r4, #0]
 8016926:	1e5a      	subs	r2, r3, #1
 8016928:	6022      	str	r2, [r4, #0]
 801692a:	f803 5c01 	strb.w	r5, [r3, #-1]
 801692e:	6863      	ldr	r3, [r4, #4]
 8016930:	3301      	adds	r3, #1
 8016932:	6063      	str	r3, [r4, #4]
 8016934:	e7c8      	b.n	80168c8 <_ungetc_r+0x10>
 8016936:	4b17      	ldr	r3, [pc, #92]	; (8016994 <_ungetc_r+0xdc>)
 8016938:	429c      	cmp	r4, r3
 801693a:	d101      	bne.n	8016940 <_ungetc_r+0x88>
 801693c:	68b4      	ldr	r4, [r6, #8]
 801693e:	e7ce      	b.n	80168de <_ungetc_r+0x26>
 8016940:	4b15      	ldr	r3, [pc, #84]	; (8016998 <_ungetc_r+0xe0>)
 8016942:	429c      	cmp	r4, r3
 8016944:	bf08      	it	eq
 8016946:	68f4      	ldreq	r4, [r6, #12]
 8016948:	e7c9      	b.n	80168de <_ungetc_r+0x26>
 801694a:	4621      	mov	r1, r4
 801694c:	4630      	mov	r0, r6
 801694e:	f7ff ff79 	bl	8016844 <__submore>
 8016952:	2800      	cmp	r0, #0
 8016954:	d0e6      	beq.n	8016924 <_ungetc_r+0x6c>
 8016956:	e7b5      	b.n	80168c4 <_ungetc_r+0xc>
 8016958:	6921      	ldr	r1, [r4, #16]
 801695a:	6823      	ldr	r3, [r4, #0]
 801695c:	b151      	cbz	r1, 8016974 <_ungetc_r+0xbc>
 801695e:	4299      	cmp	r1, r3
 8016960:	d208      	bcs.n	8016974 <_ungetc_r+0xbc>
 8016962:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016966:	42a9      	cmp	r1, r5
 8016968:	d104      	bne.n	8016974 <_ungetc_r+0xbc>
 801696a:	3b01      	subs	r3, #1
 801696c:	3201      	adds	r2, #1
 801696e:	6023      	str	r3, [r4, #0]
 8016970:	6062      	str	r2, [r4, #4]
 8016972:	e7a9      	b.n	80168c8 <_ungetc_r+0x10>
 8016974:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801697c:	6363      	str	r3, [r4, #52]	; 0x34
 801697e:	2303      	movs	r3, #3
 8016980:	63a3      	str	r3, [r4, #56]	; 0x38
 8016982:	4623      	mov	r3, r4
 8016984:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016988:	6023      	str	r3, [r4, #0]
 801698a:	2301      	movs	r3, #1
 801698c:	e7d1      	b.n	8016932 <_ungetc_r+0x7a>
 801698e:	bf00      	nop
 8016990:	08018fb0 	.word	0x08018fb0
 8016994:	08018fd0 	.word	0x08018fd0
 8016998:	08018f90 	.word	0x08018f90

0801699c <__swbuf_r>:
 801699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801699e:	460e      	mov	r6, r1
 80169a0:	4614      	mov	r4, r2
 80169a2:	4605      	mov	r5, r0
 80169a4:	b118      	cbz	r0, 80169ae <__swbuf_r+0x12>
 80169a6:	6983      	ldr	r3, [r0, #24]
 80169a8:	b90b      	cbnz	r3, 80169ae <__swbuf_r+0x12>
 80169aa:	f7fc ffd9 	bl	8013960 <__sinit>
 80169ae:	4b21      	ldr	r3, [pc, #132]	; (8016a34 <__swbuf_r+0x98>)
 80169b0:	429c      	cmp	r4, r3
 80169b2:	d12a      	bne.n	8016a0a <__swbuf_r+0x6e>
 80169b4:	686c      	ldr	r4, [r5, #4]
 80169b6:	69a3      	ldr	r3, [r4, #24]
 80169b8:	60a3      	str	r3, [r4, #8]
 80169ba:	89a3      	ldrh	r3, [r4, #12]
 80169bc:	071a      	lsls	r2, r3, #28
 80169be:	d52e      	bpl.n	8016a1e <__swbuf_r+0x82>
 80169c0:	6923      	ldr	r3, [r4, #16]
 80169c2:	b363      	cbz	r3, 8016a1e <__swbuf_r+0x82>
 80169c4:	6923      	ldr	r3, [r4, #16]
 80169c6:	6820      	ldr	r0, [r4, #0]
 80169c8:	1ac0      	subs	r0, r0, r3
 80169ca:	6963      	ldr	r3, [r4, #20]
 80169cc:	b2f6      	uxtb	r6, r6
 80169ce:	4283      	cmp	r3, r0
 80169d0:	4637      	mov	r7, r6
 80169d2:	dc04      	bgt.n	80169de <__swbuf_r+0x42>
 80169d4:	4621      	mov	r1, r4
 80169d6:	4628      	mov	r0, r5
 80169d8:	f7fc ff46 	bl	8013868 <_fflush_r>
 80169dc:	bb28      	cbnz	r0, 8016a2a <__swbuf_r+0x8e>
 80169de:	68a3      	ldr	r3, [r4, #8]
 80169e0:	3b01      	subs	r3, #1
 80169e2:	60a3      	str	r3, [r4, #8]
 80169e4:	6823      	ldr	r3, [r4, #0]
 80169e6:	1c5a      	adds	r2, r3, #1
 80169e8:	6022      	str	r2, [r4, #0]
 80169ea:	701e      	strb	r6, [r3, #0]
 80169ec:	6963      	ldr	r3, [r4, #20]
 80169ee:	3001      	adds	r0, #1
 80169f0:	4283      	cmp	r3, r0
 80169f2:	d004      	beq.n	80169fe <__swbuf_r+0x62>
 80169f4:	89a3      	ldrh	r3, [r4, #12]
 80169f6:	07db      	lsls	r3, r3, #31
 80169f8:	d519      	bpl.n	8016a2e <__swbuf_r+0x92>
 80169fa:	2e0a      	cmp	r6, #10
 80169fc:	d117      	bne.n	8016a2e <__swbuf_r+0x92>
 80169fe:	4621      	mov	r1, r4
 8016a00:	4628      	mov	r0, r5
 8016a02:	f7fc ff31 	bl	8013868 <_fflush_r>
 8016a06:	b190      	cbz	r0, 8016a2e <__swbuf_r+0x92>
 8016a08:	e00f      	b.n	8016a2a <__swbuf_r+0x8e>
 8016a0a:	4b0b      	ldr	r3, [pc, #44]	; (8016a38 <__swbuf_r+0x9c>)
 8016a0c:	429c      	cmp	r4, r3
 8016a0e:	d101      	bne.n	8016a14 <__swbuf_r+0x78>
 8016a10:	68ac      	ldr	r4, [r5, #8]
 8016a12:	e7d0      	b.n	80169b6 <__swbuf_r+0x1a>
 8016a14:	4b09      	ldr	r3, [pc, #36]	; (8016a3c <__swbuf_r+0xa0>)
 8016a16:	429c      	cmp	r4, r3
 8016a18:	bf08      	it	eq
 8016a1a:	68ec      	ldreq	r4, [r5, #12]
 8016a1c:	e7cb      	b.n	80169b6 <__swbuf_r+0x1a>
 8016a1e:	4621      	mov	r1, r4
 8016a20:	4628      	mov	r0, r5
 8016a22:	f000 f81f 	bl	8016a64 <__swsetup_r>
 8016a26:	2800      	cmp	r0, #0
 8016a28:	d0cc      	beq.n	80169c4 <__swbuf_r+0x28>
 8016a2a:	f04f 37ff 	mov.w	r7, #4294967295
 8016a2e:	4638      	mov	r0, r7
 8016a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a32:	bf00      	nop
 8016a34:	08018fb0 	.word	0x08018fb0
 8016a38:	08018fd0 	.word	0x08018fd0
 8016a3c:	08018f90 	.word	0x08018f90

08016a40 <_write_r>:
 8016a40:	b538      	push	{r3, r4, r5, lr}
 8016a42:	4c07      	ldr	r4, [pc, #28]	; (8016a60 <_write_r+0x20>)
 8016a44:	4605      	mov	r5, r0
 8016a46:	4608      	mov	r0, r1
 8016a48:	4611      	mov	r1, r2
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	6022      	str	r2, [r4, #0]
 8016a4e:	461a      	mov	r2, r3
 8016a50:	f7f6 fbc9 	bl	800d1e6 <_write>
 8016a54:	1c43      	adds	r3, r0, #1
 8016a56:	d102      	bne.n	8016a5e <_write_r+0x1e>
 8016a58:	6823      	ldr	r3, [r4, #0]
 8016a5a:	b103      	cbz	r3, 8016a5e <_write_r+0x1e>
 8016a5c:	602b      	str	r3, [r5, #0]
 8016a5e:	bd38      	pop	{r3, r4, r5, pc}
 8016a60:	20008f48 	.word	0x20008f48

08016a64 <__swsetup_r>:
 8016a64:	4b32      	ldr	r3, [pc, #200]	; (8016b30 <__swsetup_r+0xcc>)
 8016a66:	b570      	push	{r4, r5, r6, lr}
 8016a68:	681d      	ldr	r5, [r3, #0]
 8016a6a:	4606      	mov	r6, r0
 8016a6c:	460c      	mov	r4, r1
 8016a6e:	b125      	cbz	r5, 8016a7a <__swsetup_r+0x16>
 8016a70:	69ab      	ldr	r3, [r5, #24]
 8016a72:	b913      	cbnz	r3, 8016a7a <__swsetup_r+0x16>
 8016a74:	4628      	mov	r0, r5
 8016a76:	f7fc ff73 	bl	8013960 <__sinit>
 8016a7a:	4b2e      	ldr	r3, [pc, #184]	; (8016b34 <__swsetup_r+0xd0>)
 8016a7c:	429c      	cmp	r4, r3
 8016a7e:	d10f      	bne.n	8016aa0 <__swsetup_r+0x3c>
 8016a80:	686c      	ldr	r4, [r5, #4]
 8016a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a86:	b29a      	uxth	r2, r3
 8016a88:	0715      	lsls	r5, r2, #28
 8016a8a:	d42c      	bmi.n	8016ae6 <__swsetup_r+0x82>
 8016a8c:	06d0      	lsls	r0, r2, #27
 8016a8e:	d411      	bmi.n	8016ab4 <__swsetup_r+0x50>
 8016a90:	2209      	movs	r2, #9
 8016a92:	6032      	str	r2, [r6, #0]
 8016a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a98:	81a3      	strh	r3, [r4, #12]
 8016a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8016a9e:	e03e      	b.n	8016b1e <__swsetup_r+0xba>
 8016aa0:	4b25      	ldr	r3, [pc, #148]	; (8016b38 <__swsetup_r+0xd4>)
 8016aa2:	429c      	cmp	r4, r3
 8016aa4:	d101      	bne.n	8016aaa <__swsetup_r+0x46>
 8016aa6:	68ac      	ldr	r4, [r5, #8]
 8016aa8:	e7eb      	b.n	8016a82 <__swsetup_r+0x1e>
 8016aaa:	4b24      	ldr	r3, [pc, #144]	; (8016b3c <__swsetup_r+0xd8>)
 8016aac:	429c      	cmp	r4, r3
 8016aae:	bf08      	it	eq
 8016ab0:	68ec      	ldreq	r4, [r5, #12]
 8016ab2:	e7e6      	b.n	8016a82 <__swsetup_r+0x1e>
 8016ab4:	0751      	lsls	r1, r2, #29
 8016ab6:	d512      	bpl.n	8016ade <__swsetup_r+0x7a>
 8016ab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016aba:	b141      	cbz	r1, 8016ace <__swsetup_r+0x6a>
 8016abc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ac0:	4299      	cmp	r1, r3
 8016ac2:	d002      	beq.n	8016aca <__swsetup_r+0x66>
 8016ac4:	4630      	mov	r0, r6
 8016ac6:	f7fd f88d 	bl	8013be4 <_free_r>
 8016aca:	2300      	movs	r3, #0
 8016acc:	6363      	str	r3, [r4, #52]	; 0x34
 8016ace:	89a3      	ldrh	r3, [r4, #12]
 8016ad0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016ad4:	81a3      	strh	r3, [r4, #12]
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	6063      	str	r3, [r4, #4]
 8016ada:	6923      	ldr	r3, [r4, #16]
 8016adc:	6023      	str	r3, [r4, #0]
 8016ade:	89a3      	ldrh	r3, [r4, #12]
 8016ae0:	f043 0308 	orr.w	r3, r3, #8
 8016ae4:	81a3      	strh	r3, [r4, #12]
 8016ae6:	6923      	ldr	r3, [r4, #16]
 8016ae8:	b94b      	cbnz	r3, 8016afe <__swsetup_r+0x9a>
 8016aea:	89a3      	ldrh	r3, [r4, #12]
 8016aec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016af4:	d003      	beq.n	8016afe <__swsetup_r+0x9a>
 8016af6:	4621      	mov	r1, r4
 8016af8:	4630      	mov	r0, r6
 8016afa:	f7fd f81f 	bl	8013b3c <__smakebuf_r>
 8016afe:	89a2      	ldrh	r2, [r4, #12]
 8016b00:	f012 0301 	ands.w	r3, r2, #1
 8016b04:	d00c      	beq.n	8016b20 <__swsetup_r+0xbc>
 8016b06:	2300      	movs	r3, #0
 8016b08:	60a3      	str	r3, [r4, #8]
 8016b0a:	6963      	ldr	r3, [r4, #20]
 8016b0c:	425b      	negs	r3, r3
 8016b0e:	61a3      	str	r3, [r4, #24]
 8016b10:	6923      	ldr	r3, [r4, #16]
 8016b12:	b953      	cbnz	r3, 8016b2a <__swsetup_r+0xc6>
 8016b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b18:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016b1c:	d1ba      	bne.n	8016a94 <__swsetup_r+0x30>
 8016b1e:	bd70      	pop	{r4, r5, r6, pc}
 8016b20:	0792      	lsls	r2, r2, #30
 8016b22:	bf58      	it	pl
 8016b24:	6963      	ldrpl	r3, [r4, #20]
 8016b26:	60a3      	str	r3, [r4, #8]
 8016b28:	e7f2      	b.n	8016b10 <__swsetup_r+0xac>
 8016b2a:	2000      	movs	r0, #0
 8016b2c:	e7f7      	b.n	8016b1e <__swsetup_r+0xba>
 8016b2e:	bf00      	nop
 8016b30:	20000038 	.word	0x20000038
 8016b34:	08018fb0 	.word	0x08018fb0
 8016b38:	08018fd0 	.word	0x08018fd0
 8016b3c:	08018f90 	.word	0x08018f90

08016b40 <_close_r>:
 8016b40:	b538      	push	{r3, r4, r5, lr}
 8016b42:	4c06      	ldr	r4, [pc, #24]	; (8016b5c <_close_r+0x1c>)
 8016b44:	2300      	movs	r3, #0
 8016b46:	4605      	mov	r5, r0
 8016b48:	4608      	mov	r0, r1
 8016b4a:	6023      	str	r3, [r4, #0]
 8016b4c:	f7f6 fb67 	bl	800d21e <_close>
 8016b50:	1c43      	adds	r3, r0, #1
 8016b52:	d102      	bne.n	8016b5a <_close_r+0x1a>
 8016b54:	6823      	ldr	r3, [r4, #0]
 8016b56:	b103      	cbz	r3, 8016b5a <_close_r+0x1a>
 8016b58:	602b      	str	r3, [r5, #0]
 8016b5a:	bd38      	pop	{r3, r4, r5, pc}
 8016b5c:	20008f48 	.word	0x20008f48

08016b60 <quorem>:
 8016b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b64:	6903      	ldr	r3, [r0, #16]
 8016b66:	690c      	ldr	r4, [r1, #16]
 8016b68:	42a3      	cmp	r3, r4
 8016b6a:	4680      	mov	r8, r0
 8016b6c:	f2c0 8082 	blt.w	8016c74 <quorem+0x114>
 8016b70:	3c01      	subs	r4, #1
 8016b72:	f101 0714 	add.w	r7, r1, #20
 8016b76:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016b7a:	f100 0614 	add.w	r6, r0, #20
 8016b7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016b82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016b86:	eb06 030c 	add.w	r3, r6, ip
 8016b8a:	3501      	adds	r5, #1
 8016b8c:	eb07 090c 	add.w	r9, r7, ip
 8016b90:	9301      	str	r3, [sp, #4]
 8016b92:	fbb0 f5f5 	udiv	r5, r0, r5
 8016b96:	b395      	cbz	r5, 8016bfe <quorem+0x9e>
 8016b98:	f04f 0a00 	mov.w	sl, #0
 8016b9c:	4638      	mov	r0, r7
 8016b9e:	46b6      	mov	lr, r6
 8016ba0:	46d3      	mov	fp, sl
 8016ba2:	f850 2b04 	ldr.w	r2, [r0], #4
 8016ba6:	b293      	uxth	r3, r2
 8016ba8:	fb05 a303 	mla	r3, r5, r3, sl
 8016bac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016bb0:	b29b      	uxth	r3, r3
 8016bb2:	ebab 0303 	sub.w	r3, fp, r3
 8016bb6:	0c12      	lsrs	r2, r2, #16
 8016bb8:	f8de b000 	ldr.w	fp, [lr]
 8016bbc:	fb05 a202 	mla	r2, r5, r2, sl
 8016bc0:	fa13 f38b 	uxtah	r3, r3, fp
 8016bc4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016bc8:	fa1f fb82 	uxth.w	fp, r2
 8016bcc:	f8de 2000 	ldr.w	r2, [lr]
 8016bd0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016bd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016bd8:	b29b      	uxth	r3, r3
 8016bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016bde:	4581      	cmp	r9, r0
 8016be0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016be4:	f84e 3b04 	str.w	r3, [lr], #4
 8016be8:	d2db      	bcs.n	8016ba2 <quorem+0x42>
 8016bea:	f856 300c 	ldr.w	r3, [r6, ip]
 8016bee:	b933      	cbnz	r3, 8016bfe <quorem+0x9e>
 8016bf0:	9b01      	ldr	r3, [sp, #4]
 8016bf2:	3b04      	subs	r3, #4
 8016bf4:	429e      	cmp	r6, r3
 8016bf6:	461a      	mov	r2, r3
 8016bf8:	d330      	bcc.n	8016c5c <quorem+0xfc>
 8016bfa:	f8c8 4010 	str.w	r4, [r8, #16]
 8016bfe:	4640      	mov	r0, r8
 8016c00:	f001 fbf6 	bl	80183f0 <__mcmp>
 8016c04:	2800      	cmp	r0, #0
 8016c06:	db25      	blt.n	8016c54 <quorem+0xf4>
 8016c08:	3501      	adds	r5, #1
 8016c0a:	4630      	mov	r0, r6
 8016c0c:	f04f 0c00 	mov.w	ip, #0
 8016c10:	f857 2b04 	ldr.w	r2, [r7], #4
 8016c14:	f8d0 e000 	ldr.w	lr, [r0]
 8016c18:	b293      	uxth	r3, r2
 8016c1a:	ebac 0303 	sub.w	r3, ip, r3
 8016c1e:	0c12      	lsrs	r2, r2, #16
 8016c20:	fa13 f38e 	uxtah	r3, r3, lr
 8016c24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016c28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016c2c:	b29b      	uxth	r3, r3
 8016c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016c32:	45b9      	cmp	r9, r7
 8016c34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016c38:	f840 3b04 	str.w	r3, [r0], #4
 8016c3c:	d2e8      	bcs.n	8016c10 <quorem+0xb0>
 8016c3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016c42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016c46:	b92a      	cbnz	r2, 8016c54 <quorem+0xf4>
 8016c48:	3b04      	subs	r3, #4
 8016c4a:	429e      	cmp	r6, r3
 8016c4c:	461a      	mov	r2, r3
 8016c4e:	d30b      	bcc.n	8016c68 <quorem+0x108>
 8016c50:	f8c8 4010 	str.w	r4, [r8, #16]
 8016c54:	4628      	mov	r0, r5
 8016c56:	b003      	add	sp, #12
 8016c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c5c:	6812      	ldr	r2, [r2, #0]
 8016c5e:	3b04      	subs	r3, #4
 8016c60:	2a00      	cmp	r2, #0
 8016c62:	d1ca      	bne.n	8016bfa <quorem+0x9a>
 8016c64:	3c01      	subs	r4, #1
 8016c66:	e7c5      	b.n	8016bf4 <quorem+0x94>
 8016c68:	6812      	ldr	r2, [r2, #0]
 8016c6a:	3b04      	subs	r3, #4
 8016c6c:	2a00      	cmp	r2, #0
 8016c6e:	d1ef      	bne.n	8016c50 <quorem+0xf0>
 8016c70:	3c01      	subs	r4, #1
 8016c72:	e7ea      	b.n	8016c4a <quorem+0xea>
 8016c74:	2000      	movs	r0, #0
 8016c76:	e7ee      	b.n	8016c56 <quorem+0xf6>

08016c78 <_dtoa_r>:
 8016c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c7c:	ec57 6b10 	vmov	r6, r7, d0
 8016c80:	b097      	sub	sp, #92	; 0x5c
 8016c82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016c84:	9106      	str	r1, [sp, #24]
 8016c86:	4604      	mov	r4, r0
 8016c88:	920b      	str	r2, [sp, #44]	; 0x2c
 8016c8a:	9312      	str	r3, [sp, #72]	; 0x48
 8016c8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016c90:	e9cd 6700 	strd	r6, r7, [sp]
 8016c94:	b93d      	cbnz	r5, 8016ca6 <_dtoa_r+0x2e>
 8016c96:	2010      	movs	r0, #16
 8016c98:	f001 f922 	bl	8017ee0 <malloc>
 8016c9c:	6260      	str	r0, [r4, #36]	; 0x24
 8016c9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016ca2:	6005      	str	r5, [r0, #0]
 8016ca4:	60c5      	str	r5, [r0, #12]
 8016ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ca8:	6819      	ldr	r1, [r3, #0]
 8016caa:	b151      	cbz	r1, 8016cc2 <_dtoa_r+0x4a>
 8016cac:	685a      	ldr	r2, [r3, #4]
 8016cae:	604a      	str	r2, [r1, #4]
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	4093      	lsls	r3, r2
 8016cb4:	608b      	str	r3, [r1, #8]
 8016cb6:	4620      	mov	r0, r4
 8016cb8:	f001 f97b 	bl	8017fb2 <_Bfree>
 8016cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016cbe:	2200      	movs	r2, #0
 8016cc0:	601a      	str	r2, [r3, #0]
 8016cc2:	1e3b      	subs	r3, r7, #0
 8016cc4:	bfbb      	ittet	lt
 8016cc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016cca:	9301      	strlt	r3, [sp, #4]
 8016ccc:	2300      	movge	r3, #0
 8016cce:	2201      	movlt	r2, #1
 8016cd0:	bfac      	ite	ge
 8016cd2:	f8c8 3000 	strge.w	r3, [r8]
 8016cd6:	f8c8 2000 	strlt.w	r2, [r8]
 8016cda:	4baf      	ldr	r3, [pc, #700]	; (8016f98 <_dtoa_r+0x320>)
 8016cdc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016ce0:	ea33 0308 	bics.w	r3, r3, r8
 8016ce4:	d114      	bne.n	8016d10 <_dtoa_r+0x98>
 8016ce6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016ce8:	f242 730f 	movw	r3, #9999	; 0x270f
 8016cec:	6013      	str	r3, [r2, #0]
 8016cee:	9b00      	ldr	r3, [sp, #0]
 8016cf0:	b923      	cbnz	r3, 8016cfc <_dtoa_r+0x84>
 8016cf2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016cf6:	2800      	cmp	r0, #0
 8016cf8:	f000 8542 	beq.w	8017780 <_dtoa_r+0xb08>
 8016cfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016cfe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8016fac <_dtoa_r+0x334>
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	f000 8544 	beq.w	8017790 <_dtoa_r+0xb18>
 8016d08:	f10b 0303 	add.w	r3, fp, #3
 8016d0c:	f000 bd3e 	b.w	801778c <_dtoa_r+0xb14>
 8016d10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016d14:	2200      	movs	r2, #0
 8016d16:	2300      	movs	r3, #0
 8016d18:	4630      	mov	r0, r6
 8016d1a:	4639      	mov	r1, r7
 8016d1c:	f7f1 fe0c 	bl	8008938 <__aeabi_dcmpeq>
 8016d20:	4681      	mov	r9, r0
 8016d22:	b168      	cbz	r0, 8016d40 <_dtoa_r+0xc8>
 8016d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016d26:	2301      	movs	r3, #1
 8016d28:	6013      	str	r3, [r2, #0]
 8016d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	f000 8524 	beq.w	801777a <_dtoa_r+0xb02>
 8016d32:	4b9a      	ldr	r3, [pc, #616]	; (8016f9c <_dtoa_r+0x324>)
 8016d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016d36:	f103 3bff 	add.w	fp, r3, #4294967295
 8016d3a:	6013      	str	r3, [r2, #0]
 8016d3c:	f000 bd28 	b.w	8017790 <_dtoa_r+0xb18>
 8016d40:	aa14      	add	r2, sp, #80	; 0x50
 8016d42:	a915      	add	r1, sp, #84	; 0x54
 8016d44:	ec47 6b10 	vmov	d0, r6, r7
 8016d48:	4620      	mov	r0, r4
 8016d4a:	f001 fc3f 	bl	80185cc <__d2b>
 8016d4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016d52:	9004      	str	r0, [sp, #16]
 8016d54:	2d00      	cmp	r5, #0
 8016d56:	d07c      	beq.n	8016e52 <_dtoa_r+0x1da>
 8016d58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016d5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016d60:	46b2      	mov	sl, r6
 8016d62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016d66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016d6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016d6e:	2200      	movs	r2, #0
 8016d70:	4b8b      	ldr	r3, [pc, #556]	; (8016fa0 <_dtoa_r+0x328>)
 8016d72:	4650      	mov	r0, sl
 8016d74:	4659      	mov	r1, fp
 8016d76:	f7f1 f9bf 	bl	80080f8 <__aeabi_dsub>
 8016d7a:	a381      	add	r3, pc, #516	; (adr r3, 8016f80 <_dtoa_r+0x308>)
 8016d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d80:	f7f1 fb72 	bl	8008468 <__aeabi_dmul>
 8016d84:	a380      	add	r3, pc, #512	; (adr r3, 8016f88 <_dtoa_r+0x310>)
 8016d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d8a:	f7f1 f9b7 	bl	80080fc <__adddf3>
 8016d8e:	4606      	mov	r6, r0
 8016d90:	4628      	mov	r0, r5
 8016d92:	460f      	mov	r7, r1
 8016d94:	f7f1 fafe 	bl	8008394 <__aeabi_i2d>
 8016d98:	a37d      	add	r3, pc, #500	; (adr r3, 8016f90 <_dtoa_r+0x318>)
 8016d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d9e:	f7f1 fb63 	bl	8008468 <__aeabi_dmul>
 8016da2:	4602      	mov	r2, r0
 8016da4:	460b      	mov	r3, r1
 8016da6:	4630      	mov	r0, r6
 8016da8:	4639      	mov	r1, r7
 8016daa:	f7f1 f9a7 	bl	80080fc <__adddf3>
 8016dae:	4606      	mov	r6, r0
 8016db0:	460f      	mov	r7, r1
 8016db2:	f7f1 fe09 	bl	80089c8 <__aeabi_d2iz>
 8016db6:	2200      	movs	r2, #0
 8016db8:	4682      	mov	sl, r0
 8016dba:	2300      	movs	r3, #0
 8016dbc:	4630      	mov	r0, r6
 8016dbe:	4639      	mov	r1, r7
 8016dc0:	f7f1 fdc4 	bl	800894c <__aeabi_dcmplt>
 8016dc4:	b148      	cbz	r0, 8016dda <_dtoa_r+0x162>
 8016dc6:	4650      	mov	r0, sl
 8016dc8:	f7f1 fae4 	bl	8008394 <__aeabi_i2d>
 8016dcc:	4632      	mov	r2, r6
 8016dce:	463b      	mov	r3, r7
 8016dd0:	f7f1 fdb2 	bl	8008938 <__aeabi_dcmpeq>
 8016dd4:	b908      	cbnz	r0, 8016dda <_dtoa_r+0x162>
 8016dd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016dda:	f1ba 0f16 	cmp.w	sl, #22
 8016dde:	d859      	bhi.n	8016e94 <_dtoa_r+0x21c>
 8016de0:	4970      	ldr	r1, [pc, #448]	; (8016fa4 <_dtoa_r+0x32c>)
 8016de2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016de6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016dee:	f7f1 fdcb 	bl	8008988 <__aeabi_dcmpgt>
 8016df2:	2800      	cmp	r0, #0
 8016df4:	d050      	beq.n	8016e98 <_dtoa_r+0x220>
 8016df6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8016dfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e00:	1b5d      	subs	r5, r3, r5
 8016e02:	f1b5 0801 	subs.w	r8, r5, #1
 8016e06:	bf49      	itett	mi
 8016e08:	f1c5 0301 	rsbmi	r3, r5, #1
 8016e0c:	2300      	movpl	r3, #0
 8016e0e:	9305      	strmi	r3, [sp, #20]
 8016e10:	f04f 0800 	movmi.w	r8, #0
 8016e14:	bf58      	it	pl
 8016e16:	9305      	strpl	r3, [sp, #20]
 8016e18:	f1ba 0f00 	cmp.w	sl, #0
 8016e1c:	db3e      	blt.n	8016e9c <_dtoa_r+0x224>
 8016e1e:	2300      	movs	r3, #0
 8016e20:	44d0      	add	r8, sl
 8016e22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016e26:	9307      	str	r3, [sp, #28]
 8016e28:	9b06      	ldr	r3, [sp, #24]
 8016e2a:	2b09      	cmp	r3, #9
 8016e2c:	f200 8090 	bhi.w	8016f50 <_dtoa_r+0x2d8>
 8016e30:	2b05      	cmp	r3, #5
 8016e32:	bfc4      	itt	gt
 8016e34:	3b04      	subgt	r3, #4
 8016e36:	9306      	strgt	r3, [sp, #24]
 8016e38:	9b06      	ldr	r3, [sp, #24]
 8016e3a:	f1a3 0302 	sub.w	r3, r3, #2
 8016e3e:	bfcc      	ite	gt
 8016e40:	2500      	movgt	r5, #0
 8016e42:	2501      	movle	r5, #1
 8016e44:	2b03      	cmp	r3, #3
 8016e46:	f200 808f 	bhi.w	8016f68 <_dtoa_r+0x2f0>
 8016e4a:	e8df f003 	tbb	[pc, r3]
 8016e4e:	7f7d      	.short	0x7f7d
 8016e50:	7131      	.short	0x7131
 8016e52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016e56:	441d      	add	r5, r3
 8016e58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016e5c:	2820      	cmp	r0, #32
 8016e5e:	dd13      	ble.n	8016e88 <_dtoa_r+0x210>
 8016e60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016e64:	9b00      	ldr	r3, [sp, #0]
 8016e66:	fa08 f800 	lsl.w	r8, r8, r0
 8016e6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016e6e:	fa23 f000 	lsr.w	r0, r3, r0
 8016e72:	ea48 0000 	orr.w	r0, r8, r0
 8016e76:	f7f1 fa7d 	bl	8008374 <__aeabi_ui2d>
 8016e7a:	2301      	movs	r3, #1
 8016e7c:	4682      	mov	sl, r0
 8016e7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016e82:	3d01      	subs	r5, #1
 8016e84:	9313      	str	r3, [sp, #76]	; 0x4c
 8016e86:	e772      	b.n	8016d6e <_dtoa_r+0xf6>
 8016e88:	9b00      	ldr	r3, [sp, #0]
 8016e8a:	f1c0 0020 	rsb	r0, r0, #32
 8016e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8016e92:	e7f0      	b.n	8016e76 <_dtoa_r+0x1fe>
 8016e94:	2301      	movs	r3, #1
 8016e96:	e7b1      	b.n	8016dfc <_dtoa_r+0x184>
 8016e98:	900f      	str	r0, [sp, #60]	; 0x3c
 8016e9a:	e7b0      	b.n	8016dfe <_dtoa_r+0x186>
 8016e9c:	9b05      	ldr	r3, [sp, #20]
 8016e9e:	eba3 030a 	sub.w	r3, r3, sl
 8016ea2:	9305      	str	r3, [sp, #20]
 8016ea4:	f1ca 0300 	rsb	r3, sl, #0
 8016ea8:	9307      	str	r3, [sp, #28]
 8016eaa:	2300      	movs	r3, #0
 8016eac:	930e      	str	r3, [sp, #56]	; 0x38
 8016eae:	e7bb      	b.n	8016e28 <_dtoa_r+0x1b0>
 8016eb0:	2301      	movs	r3, #1
 8016eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8016eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	dd59      	ble.n	8016f6e <_dtoa_r+0x2f6>
 8016eba:	9302      	str	r3, [sp, #8]
 8016ebc:	4699      	mov	r9, r3
 8016ebe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	6072      	str	r2, [r6, #4]
 8016ec4:	2204      	movs	r2, #4
 8016ec6:	f102 0014 	add.w	r0, r2, #20
 8016eca:	4298      	cmp	r0, r3
 8016ecc:	6871      	ldr	r1, [r6, #4]
 8016ece:	d953      	bls.n	8016f78 <_dtoa_r+0x300>
 8016ed0:	4620      	mov	r0, r4
 8016ed2:	f001 f83a 	bl	8017f4a <_Balloc>
 8016ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ed8:	6030      	str	r0, [r6, #0]
 8016eda:	f1b9 0f0e 	cmp.w	r9, #14
 8016ede:	f8d3 b000 	ldr.w	fp, [r3]
 8016ee2:	f200 80e6 	bhi.w	80170b2 <_dtoa_r+0x43a>
 8016ee6:	2d00      	cmp	r5, #0
 8016ee8:	f000 80e3 	beq.w	80170b2 <_dtoa_r+0x43a>
 8016eec:	ed9d 7b00 	vldr	d7, [sp]
 8016ef0:	f1ba 0f00 	cmp.w	sl, #0
 8016ef4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016ef8:	dd74      	ble.n	8016fe4 <_dtoa_r+0x36c>
 8016efa:	4a2a      	ldr	r2, [pc, #168]	; (8016fa4 <_dtoa_r+0x32c>)
 8016efc:	f00a 030f 	and.w	r3, sl, #15
 8016f00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016f04:	ed93 7b00 	vldr	d7, [r3]
 8016f08:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016f0c:	06f0      	lsls	r0, r6, #27
 8016f0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016f12:	d565      	bpl.n	8016fe0 <_dtoa_r+0x368>
 8016f14:	4b24      	ldr	r3, [pc, #144]	; (8016fa8 <_dtoa_r+0x330>)
 8016f16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016f1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016f1e:	f7f1 fbcd 	bl	80086bc <__aeabi_ddiv>
 8016f22:	e9cd 0100 	strd	r0, r1, [sp]
 8016f26:	f006 060f 	and.w	r6, r6, #15
 8016f2a:	2503      	movs	r5, #3
 8016f2c:	4f1e      	ldr	r7, [pc, #120]	; (8016fa8 <_dtoa_r+0x330>)
 8016f2e:	e04c      	b.n	8016fca <_dtoa_r+0x352>
 8016f30:	2301      	movs	r3, #1
 8016f32:	930a      	str	r3, [sp, #40]	; 0x28
 8016f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f36:	4453      	add	r3, sl
 8016f38:	f103 0901 	add.w	r9, r3, #1
 8016f3c:	9302      	str	r3, [sp, #8]
 8016f3e:	464b      	mov	r3, r9
 8016f40:	2b01      	cmp	r3, #1
 8016f42:	bfb8      	it	lt
 8016f44:	2301      	movlt	r3, #1
 8016f46:	e7ba      	b.n	8016ebe <_dtoa_r+0x246>
 8016f48:	2300      	movs	r3, #0
 8016f4a:	e7b2      	b.n	8016eb2 <_dtoa_r+0x23a>
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	e7f0      	b.n	8016f32 <_dtoa_r+0x2ba>
 8016f50:	2501      	movs	r5, #1
 8016f52:	2300      	movs	r3, #0
 8016f54:	9306      	str	r3, [sp, #24]
 8016f56:	950a      	str	r5, [sp, #40]	; 0x28
 8016f58:	f04f 33ff 	mov.w	r3, #4294967295
 8016f5c:	9302      	str	r3, [sp, #8]
 8016f5e:	4699      	mov	r9, r3
 8016f60:	2200      	movs	r2, #0
 8016f62:	2312      	movs	r3, #18
 8016f64:	920b      	str	r2, [sp, #44]	; 0x2c
 8016f66:	e7aa      	b.n	8016ebe <_dtoa_r+0x246>
 8016f68:	2301      	movs	r3, #1
 8016f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8016f6c:	e7f4      	b.n	8016f58 <_dtoa_r+0x2e0>
 8016f6e:	2301      	movs	r3, #1
 8016f70:	9302      	str	r3, [sp, #8]
 8016f72:	4699      	mov	r9, r3
 8016f74:	461a      	mov	r2, r3
 8016f76:	e7f5      	b.n	8016f64 <_dtoa_r+0x2ec>
 8016f78:	3101      	adds	r1, #1
 8016f7a:	6071      	str	r1, [r6, #4]
 8016f7c:	0052      	lsls	r2, r2, #1
 8016f7e:	e7a2      	b.n	8016ec6 <_dtoa_r+0x24e>
 8016f80:	636f4361 	.word	0x636f4361
 8016f84:	3fd287a7 	.word	0x3fd287a7
 8016f88:	8b60c8b3 	.word	0x8b60c8b3
 8016f8c:	3fc68a28 	.word	0x3fc68a28
 8016f90:	509f79fb 	.word	0x509f79fb
 8016f94:	3fd34413 	.word	0x3fd34413
 8016f98:	7ff00000 	.word	0x7ff00000
 8016f9c:	08019053 	.word	0x08019053
 8016fa0:	3ff80000 	.word	0x3ff80000
 8016fa4:	080190e8 	.word	0x080190e8
 8016fa8:	080190c0 	.word	0x080190c0
 8016fac:	080190b1 	.word	0x080190b1
 8016fb0:	07f1      	lsls	r1, r6, #31
 8016fb2:	d508      	bpl.n	8016fc6 <_dtoa_r+0x34e>
 8016fb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016fbc:	f7f1 fa54 	bl	8008468 <__aeabi_dmul>
 8016fc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016fc4:	3501      	adds	r5, #1
 8016fc6:	1076      	asrs	r6, r6, #1
 8016fc8:	3708      	adds	r7, #8
 8016fca:	2e00      	cmp	r6, #0
 8016fcc:	d1f0      	bne.n	8016fb0 <_dtoa_r+0x338>
 8016fce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016fd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016fd6:	f7f1 fb71 	bl	80086bc <__aeabi_ddiv>
 8016fda:	e9cd 0100 	strd	r0, r1, [sp]
 8016fde:	e01a      	b.n	8017016 <_dtoa_r+0x39e>
 8016fe0:	2502      	movs	r5, #2
 8016fe2:	e7a3      	b.n	8016f2c <_dtoa_r+0x2b4>
 8016fe4:	f000 80a0 	beq.w	8017128 <_dtoa_r+0x4b0>
 8016fe8:	f1ca 0600 	rsb	r6, sl, #0
 8016fec:	4b9f      	ldr	r3, [pc, #636]	; (801726c <_dtoa_r+0x5f4>)
 8016fee:	4fa0      	ldr	r7, [pc, #640]	; (8017270 <_dtoa_r+0x5f8>)
 8016ff0:	f006 020f 	and.w	r2, r6, #15
 8016ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ffc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017000:	f7f1 fa32 	bl	8008468 <__aeabi_dmul>
 8017004:	e9cd 0100 	strd	r0, r1, [sp]
 8017008:	1136      	asrs	r6, r6, #4
 801700a:	2300      	movs	r3, #0
 801700c:	2502      	movs	r5, #2
 801700e:	2e00      	cmp	r6, #0
 8017010:	d17f      	bne.n	8017112 <_dtoa_r+0x49a>
 8017012:	2b00      	cmp	r3, #0
 8017014:	d1e1      	bne.n	8016fda <_dtoa_r+0x362>
 8017016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017018:	2b00      	cmp	r3, #0
 801701a:	f000 8087 	beq.w	801712c <_dtoa_r+0x4b4>
 801701e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017022:	2200      	movs	r2, #0
 8017024:	4b93      	ldr	r3, [pc, #588]	; (8017274 <_dtoa_r+0x5fc>)
 8017026:	4630      	mov	r0, r6
 8017028:	4639      	mov	r1, r7
 801702a:	f7f1 fc8f 	bl	800894c <__aeabi_dcmplt>
 801702e:	2800      	cmp	r0, #0
 8017030:	d07c      	beq.n	801712c <_dtoa_r+0x4b4>
 8017032:	f1b9 0f00 	cmp.w	r9, #0
 8017036:	d079      	beq.n	801712c <_dtoa_r+0x4b4>
 8017038:	9b02      	ldr	r3, [sp, #8]
 801703a:	2b00      	cmp	r3, #0
 801703c:	dd35      	ble.n	80170aa <_dtoa_r+0x432>
 801703e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017042:	9308      	str	r3, [sp, #32]
 8017044:	4639      	mov	r1, r7
 8017046:	2200      	movs	r2, #0
 8017048:	4b8b      	ldr	r3, [pc, #556]	; (8017278 <_dtoa_r+0x600>)
 801704a:	4630      	mov	r0, r6
 801704c:	f7f1 fa0c 	bl	8008468 <__aeabi_dmul>
 8017050:	e9cd 0100 	strd	r0, r1, [sp]
 8017054:	9f02      	ldr	r7, [sp, #8]
 8017056:	3501      	adds	r5, #1
 8017058:	4628      	mov	r0, r5
 801705a:	f7f1 f99b 	bl	8008394 <__aeabi_i2d>
 801705e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017062:	f7f1 fa01 	bl	8008468 <__aeabi_dmul>
 8017066:	2200      	movs	r2, #0
 8017068:	4b84      	ldr	r3, [pc, #528]	; (801727c <_dtoa_r+0x604>)
 801706a:	f7f1 f847 	bl	80080fc <__adddf3>
 801706e:	4605      	mov	r5, r0
 8017070:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017074:	2f00      	cmp	r7, #0
 8017076:	d15d      	bne.n	8017134 <_dtoa_r+0x4bc>
 8017078:	2200      	movs	r2, #0
 801707a:	4b81      	ldr	r3, [pc, #516]	; (8017280 <_dtoa_r+0x608>)
 801707c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017080:	f7f1 f83a 	bl	80080f8 <__aeabi_dsub>
 8017084:	462a      	mov	r2, r5
 8017086:	4633      	mov	r3, r6
 8017088:	e9cd 0100 	strd	r0, r1, [sp]
 801708c:	f7f1 fc7c 	bl	8008988 <__aeabi_dcmpgt>
 8017090:	2800      	cmp	r0, #0
 8017092:	f040 8288 	bne.w	80175a6 <_dtoa_r+0x92e>
 8017096:	462a      	mov	r2, r5
 8017098:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801709c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80170a0:	f7f1 fc54 	bl	800894c <__aeabi_dcmplt>
 80170a4:	2800      	cmp	r0, #0
 80170a6:	f040 827c 	bne.w	80175a2 <_dtoa_r+0x92a>
 80170aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80170ae:	e9cd 2300 	strd	r2, r3, [sp]
 80170b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	f2c0 8150 	blt.w	801735a <_dtoa_r+0x6e2>
 80170ba:	f1ba 0f0e 	cmp.w	sl, #14
 80170be:	f300 814c 	bgt.w	801735a <_dtoa_r+0x6e2>
 80170c2:	4b6a      	ldr	r3, [pc, #424]	; (801726c <_dtoa_r+0x5f4>)
 80170c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80170c8:	ed93 7b00 	vldr	d7, [r3]
 80170cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80170d4:	f280 80d8 	bge.w	8017288 <_dtoa_r+0x610>
 80170d8:	f1b9 0f00 	cmp.w	r9, #0
 80170dc:	f300 80d4 	bgt.w	8017288 <_dtoa_r+0x610>
 80170e0:	f040 825e 	bne.w	80175a0 <_dtoa_r+0x928>
 80170e4:	2200      	movs	r2, #0
 80170e6:	4b66      	ldr	r3, [pc, #408]	; (8017280 <_dtoa_r+0x608>)
 80170e8:	ec51 0b17 	vmov	r0, r1, d7
 80170ec:	f7f1 f9bc 	bl	8008468 <__aeabi_dmul>
 80170f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80170f4:	f7f1 fc3e 	bl	8008974 <__aeabi_dcmpge>
 80170f8:	464f      	mov	r7, r9
 80170fa:	464e      	mov	r6, r9
 80170fc:	2800      	cmp	r0, #0
 80170fe:	f040 8234 	bne.w	801756a <_dtoa_r+0x8f2>
 8017102:	2331      	movs	r3, #49	; 0x31
 8017104:	f10b 0501 	add.w	r5, fp, #1
 8017108:	f88b 3000 	strb.w	r3, [fp]
 801710c:	f10a 0a01 	add.w	sl, sl, #1
 8017110:	e22f      	b.n	8017572 <_dtoa_r+0x8fa>
 8017112:	07f2      	lsls	r2, r6, #31
 8017114:	d505      	bpl.n	8017122 <_dtoa_r+0x4aa>
 8017116:	e9d7 2300 	ldrd	r2, r3, [r7]
 801711a:	f7f1 f9a5 	bl	8008468 <__aeabi_dmul>
 801711e:	3501      	adds	r5, #1
 8017120:	2301      	movs	r3, #1
 8017122:	1076      	asrs	r6, r6, #1
 8017124:	3708      	adds	r7, #8
 8017126:	e772      	b.n	801700e <_dtoa_r+0x396>
 8017128:	2502      	movs	r5, #2
 801712a:	e774      	b.n	8017016 <_dtoa_r+0x39e>
 801712c:	f8cd a020 	str.w	sl, [sp, #32]
 8017130:	464f      	mov	r7, r9
 8017132:	e791      	b.n	8017058 <_dtoa_r+0x3e0>
 8017134:	4b4d      	ldr	r3, [pc, #308]	; (801726c <_dtoa_r+0x5f4>)
 8017136:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801713a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801713e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017140:	2b00      	cmp	r3, #0
 8017142:	d047      	beq.n	80171d4 <_dtoa_r+0x55c>
 8017144:	4602      	mov	r2, r0
 8017146:	460b      	mov	r3, r1
 8017148:	2000      	movs	r0, #0
 801714a:	494e      	ldr	r1, [pc, #312]	; (8017284 <_dtoa_r+0x60c>)
 801714c:	f7f1 fab6 	bl	80086bc <__aeabi_ddiv>
 8017150:	462a      	mov	r2, r5
 8017152:	4633      	mov	r3, r6
 8017154:	f7f0 ffd0 	bl	80080f8 <__aeabi_dsub>
 8017158:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801715c:	465d      	mov	r5, fp
 801715e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017162:	f7f1 fc31 	bl	80089c8 <__aeabi_d2iz>
 8017166:	4606      	mov	r6, r0
 8017168:	f7f1 f914 	bl	8008394 <__aeabi_i2d>
 801716c:	4602      	mov	r2, r0
 801716e:	460b      	mov	r3, r1
 8017170:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017174:	f7f0 ffc0 	bl	80080f8 <__aeabi_dsub>
 8017178:	3630      	adds	r6, #48	; 0x30
 801717a:	f805 6b01 	strb.w	r6, [r5], #1
 801717e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017182:	e9cd 0100 	strd	r0, r1, [sp]
 8017186:	f7f1 fbe1 	bl	800894c <__aeabi_dcmplt>
 801718a:	2800      	cmp	r0, #0
 801718c:	d163      	bne.n	8017256 <_dtoa_r+0x5de>
 801718e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017192:	2000      	movs	r0, #0
 8017194:	4937      	ldr	r1, [pc, #220]	; (8017274 <_dtoa_r+0x5fc>)
 8017196:	f7f0 ffaf 	bl	80080f8 <__aeabi_dsub>
 801719a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801719e:	f7f1 fbd5 	bl	800894c <__aeabi_dcmplt>
 80171a2:	2800      	cmp	r0, #0
 80171a4:	f040 80b7 	bne.w	8017316 <_dtoa_r+0x69e>
 80171a8:	eba5 030b 	sub.w	r3, r5, fp
 80171ac:	429f      	cmp	r7, r3
 80171ae:	f77f af7c 	ble.w	80170aa <_dtoa_r+0x432>
 80171b2:	2200      	movs	r2, #0
 80171b4:	4b30      	ldr	r3, [pc, #192]	; (8017278 <_dtoa_r+0x600>)
 80171b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80171ba:	f7f1 f955 	bl	8008468 <__aeabi_dmul>
 80171be:	2200      	movs	r2, #0
 80171c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80171c4:	4b2c      	ldr	r3, [pc, #176]	; (8017278 <_dtoa_r+0x600>)
 80171c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171ca:	f7f1 f94d 	bl	8008468 <__aeabi_dmul>
 80171ce:	e9cd 0100 	strd	r0, r1, [sp]
 80171d2:	e7c4      	b.n	801715e <_dtoa_r+0x4e6>
 80171d4:	462a      	mov	r2, r5
 80171d6:	4633      	mov	r3, r6
 80171d8:	f7f1 f946 	bl	8008468 <__aeabi_dmul>
 80171dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80171e0:	eb0b 0507 	add.w	r5, fp, r7
 80171e4:	465e      	mov	r6, fp
 80171e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171ea:	f7f1 fbed 	bl	80089c8 <__aeabi_d2iz>
 80171ee:	4607      	mov	r7, r0
 80171f0:	f7f1 f8d0 	bl	8008394 <__aeabi_i2d>
 80171f4:	3730      	adds	r7, #48	; 0x30
 80171f6:	4602      	mov	r2, r0
 80171f8:	460b      	mov	r3, r1
 80171fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171fe:	f7f0 ff7b 	bl	80080f8 <__aeabi_dsub>
 8017202:	f806 7b01 	strb.w	r7, [r6], #1
 8017206:	42ae      	cmp	r6, r5
 8017208:	e9cd 0100 	strd	r0, r1, [sp]
 801720c:	f04f 0200 	mov.w	r2, #0
 8017210:	d126      	bne.n	8017260 <_dtoa_r+0x5e8>
 8017212:	4b1c      	ldr	r3, [pc, #112]	; (8017284 <_dtoa_r+0x60c>)
 8017214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017218:	f7f0 ff70 	bl	80080fc <__adddf3>
 801721c:	4602      	mov	r2, r0
 801721e:	460b      	mov	r3, r1
 8017220:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017224:	f7f1 fbb0 	bl	8008988 <__aeabi_dcmpgt>
 8017228:	2800      	cmp	r0, #0
 801722a:	d174      	bne.n	8017316 <_dtoa_r+0x69e>
 801722c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017230:	2000      	movs	r0, #0
 8017232:	4914      	ldr	r1, [pc, #80]	; (8017284 <_dtoa_r+0x60c>)
 8017234:	f7f0 ff60 	bl	80080f8 <__aeabi_dsub>
 8017238:	4602      	mov	r2, r0
 801723a:	460b      	mov	r3, r1
 801723c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017240:	f7f1 fb84 	bl	800894c <__aeabi_dcmplt>
 8017244:	2800      	cmp	r0, #0
 8017246:	f43f af30 	beq.w	80170aa <_dtoa_r+0x432>
 801724a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801724e:	2b30      	cmp	r3, #48	; 0x30
 8017250:	f105 32ff 	add.w	r2, r5, #4294967295
 8017254:	d002      	beq.n	801725c <_dtoa_r+0x5e4>
 8017256:	f8dd a020 	ldr.w	sl, [sp, #32]
 801725a:	e04a      	b.n	80172f2 <_dtoa_r+0x67a>
 801725c:	4615      	mov	r5, r2
 801725e:	e7f4      	b.n	801724a <_dtoa_r+0x5d2>
 8017260:	4b05      	ldr	r3, [pc, #20]	; (8017278 <_dtoa_r+0x600>)
 8017262:	f7f1 f901 	bl	8008468 <__aeabi_dmul>
 8017266:	e9cd 0100 	strd	r0, r1, [sp]
 801726a:	e7bc      	b.n	80171e6 <_dtoa_r+0x56e>
 801726c:	080190e8 	.word	0x080190e8
 8017270:	080190c0 	.word	0x080190c0
 8017274:	3ff00000 	.word	0x3ff00000
 8017278:	40240000 	.word	0x40240000
 801727c:	401c0000 	.word	0x401c0000
 8017280:	40140000 	.word	0x40140000
 8017284:	3fe00000 	.word	0x3fe00000
 8017288:	e9dd 6700 	ldrd	r6, r7, [sp]
 801728c:	465d      	mov	r5, fp
 801728e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017292:	4630      	mov	r0, r6
 8017294:	4639      	mov	r1, r7
 8017296:	f7f1 fa11 	bl	80086bc <__aeabi_ddiv>
 801729a:	f7f1 fb95 	bl	80089c8 <__aeabi_d2iz>
 801729e:	4680      	mov	r8, r0
 80172a0:	f7f1 f878 	bl	8008394 <__aeabi_i2d>
 80172a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80172a8:	f7f1 f8de 	bl	8008468 <__aeabi_dmul>
 80172ac:	4602      	mov	r2, r0
 80172ae:	460b      	mov	r3, r1
 80172b0:	4630      	mov	r0, r6
 80172b2:	4639      	mov	r1, r7
 80172b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80172b8:	f7f0 ff1e 	bl	80080f8 <__aeabi_dsub>
 80172bc:	f805 6b01 	strb.w	r6, [r5], #1
 80172c0:	eba5 060b 	sub.w	r6, r5, fp
 80172c4:	45b1      	cmp	r9, r6
 80172c6:	4602      	mov	r2, r0
 80172c8:	460b      	mov	r3, r1
 80172ca:	d139      	bne.n	8017340 <_dtoa_r+0x6c8>
 80172cc:	f7f0 ff16 	bl	80080fc <__adddf3>
 80172d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80172d4:	4606      	mov	r6, r0
 80172d6:	460f      	mov	r7, r1
 80172d8:	f7f1 fb56 	bl	8008988 <__aeabi_dcmpgt>
 80172dc:	b9c8      	cbnz	r0, 8017312 <_dtoa_r+0x69a>
 80172de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80172e2:	4630      	mov	r0, r6
 80172e4:	4639      	mov	r1, r7
 80172e6:	f7f1 fb27 	bl	8008938 <__aeabi_dcmpeq>
 80172ea:	b110      	cbz	r0, 80172f2 <_dtoa_r+0x67a>
 80172ec:	f018 0f01 	tst.w	r8, #1
 80172f0:	d10f      	bne.n	8017312 <_dtoa_r+0x69a>
 80172f2:	9904      	ldr	r1, [sp, #16]
 80172f4:	4620      	mov	r0, r4
 80172f6:	f000 fe5c 	bl	8017fb2 <_Bfree>
 80172fa:	2300      	movs	r3, #0
 80172fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80172fe:	702b      	strb	r3, [r5, #0]
 8017300:	f10a 0301 	add.w	r3, sl, #1
 8017304:	6013      	str	r3, [r2, #0]
 8017306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017308:	2b00      	cmp	r3, #0
 801730a:	f000 8241 	beq.w	8017790 <_dtoa_r+0xb18>
 801730e:	601d      	str	r5, [r3, #0]
 8017310:	e23e      	b.n	8017790 <_dtoa_r+0xb18>
 8017312:	f8cd a020 	str.w	sl, [sp, #32]
 8017316:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801731a:	2a39      	cmp	r2, #57	; 0x39
 801731c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017320:	d108      	bne.n	8017334 <_dtoa_r+0x6bc>
 8017322:	459b      	cmp	fp, r3
 8017324:	d10a      	bne.n	801733c <_dtoa_r+0x6c4>
 8017326:	9b08      	ldr	r3, [sp, #32]
 8017328:	3301      	adds	r3, #1
 801732a:	9308      	str	r3, [sp, #32]
 801732c:	2330      	movs	r3, #48	; 0x30
 801732e:	f88b 3000 	strb.w	r3, [fp]
 8017332:	465b      	mov	r3, fp
 8017334:	781a      	ldrb	r2, [r3, #0]
 8017336:	3201      	adds	r2, #1
 8017338:	701a      	strb	r2, [r3, #0]
 801733a:	e78c      	b.n	8017256 <_dtoa_r+0x5de>
 801733c:	461d      	mov	r5, r3
 801733e:	e7ea      	b.n	8017316 <_dtoa_r+0x69e>
 8017340:	2200      	movs	r2, #0
 8017342:	4b9b      	ldr	r3, [pc, #620]	; (80175b0 <_dtoa_r+0x938>)
 8017344:	f7f1 f890 	bl	8008468 <__aeabi_dmul>
 8017348:	2200      	movs	r2, #0
 801734a:	2300      	movs	r3, #0
 801734c:	4606      	mov	r6, r0
 801734e:	460f      	mov	r7, r1
 8017350:	f7f1 faf2 	bl	8008938 <__aeabi_dcmpeq>
 8017354:	2800      	cmp	r0, #0
 8017356:	d09a      	beq.n	801728e <_dtoa_r+0x616>
 8017358:	e7cb      	b.n	80172f2 <_dtoa_r+0x67a>
 801735a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801735c:	2a00      	cmp	r2, #0
 801735e:	f000 808b 	beq.w	8017478 <_dtoa_r+0x800>
 8017362:	9a06      	ldr	r2, [sp, #24]
 8017364:	2a01      	cmp	r2, #1
 8017366:	dc6e      	bgt.n	8017446 <_dtoa_r+0x7ce>
 8017368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801736a:	2a00      	cmp	r2, #0
 801736c:	d067      	beq.n	801743e <_dtoa_r+0x7c6>
 801736e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017372:	9f07      	ldr	r7, [sp, #28]
 8017374:	9d05      	ldr	r5, [sp, #20]
 8017376:	9a05      	ldr	r2, [sp, #20]
 8017378:	2101      	movs	r1, #1
 801737a:	441a      	add	r2, r3
 801737c:	4620      	mov	r0, r4
 801737e:	9205      	str	r2, [sp, #20]
 8017380:	4498      	add	r8, r3
 8017382:	f000 fef4 	bl	801816e <__i2b>
 8017386:	4606      	mov	r6, r0
 8017388:	2d00      	cmp	r5, #0
 801738a:	dd0c      	ble.n	80173a6 <_dtoa_r+0x72e>
 801738c:	f1b8 0f00 	cmp.w	r8, #0
 8017390:	dd09      	ble.n	80173a6 <_dtoa_r+0x72e>
 8017392:	4545      	cmp	r5, r8
 8017394:	9a05      	ldr	r2, [sp, #20]
 8017396:	462b      	mov	r3, r5
 8017398:	bfa8      	it	ge
 801739a:	4643      	movge	r3, r8
 801739c:	1ad2      	subs	r2, r2, r3
 801739e:	9205      	str	r2, [sp, #20]
 80173a0:	1aed      	subs	r5, r5, r3
 80173a2:	eba8 0803 	sub.w	r8, r8, r3
 80173a6:	9b07      	ldr	r3, [sp, #28]
 80173a8:	b1eb      	cbz	r3, 80173e6 <_dtoa_r+0x76e>
 80173aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d067      	beq.n	8017480 <_dtoa_r+0x808>
 80173b0:	b18f      	cbz	r7, 80173d6 <_dtoa_r+0x75e>
 80173b2:	4631      	mov	r1, r6
 80173b4:	463a      	mov	r2, r7
 80173b6:	4620      	mov	r0, r4
 80173b8:	f000 ff78 	bl	80182ac <__pow5mult>
 80173bc:	9a04      	ldr	r2, [sp, #16]
 80173be:	4601      	mov	r1, r0
 80173c0:	4606      	mov	r6, r0
 80173c2:	4620      	mov	r0, r4
 80173c4:	f000 fedc 	bl	8018180 <__multiply>
 80173c8:	9904      	ldr	r1, [sp, #16]
 80173ca:	9008      	str	r0, [sp, #32]
 80173cc:	4620      	mov	r0, r4
 80173ce:	f000 fdf0 	bl	8017fb2 <_Bfree>
 80173d2:	9b08      	ldr	r3, [sp, #32]
 80173d4:	9304      	str	r3, [sp, #16]
 80173d6:	9b07      	ldr	r3, [sp, #28]
 80173d8:	1bda      	subs	r2, r3, r7
 80173da:	d004      	beq.n	80173e6 <_dtoa_r+0x76e>
 80173dc:	9904      	ldr	r1, [sp, #16]
 80173de:	4620      	mov	r0, r4
 80173e0:	f000 ff64 	bl	80182ac <__pow5mult>
 80173e4:	9004      	str	r0, [sp, #16]
 80173e6:	2101      	movs	r1, #1
 80173e8:	4620      	mov	r0, r4
 80173ea:	f000 fec0 	bl	801816e <__i2b>
 80173ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173f0:	4607      	mov	r7, r0
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	f000 81d0 	beq.w	8017798 <_dtoa_r+0xb20>
 80173f8:	461a      	mov	r2, r3
 80173fa:	4601      	mov	r1, r0
 80173fc:	4620      	mov	r0, r4
 80173fe:	f000 ff55 	bl	80182ac <__pow5mult>
 8017402:	9b06      	ldr	r3, [sp, #24]
 8017404:	2b01      	cmp	r3, #1
 8017406:	4607      	mov	r7, r0
 8017408:	dc40      	bgt.n	801748c <_dtoa_r+0x814>
 801740a:	9b00      	ldr	r3, [sp, #0]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d139      	bne.n	8017484 <_dtoa_r+0x80c>
 8017410:	9b01      	ldr	r3, [sp, #4]
 8017412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017416:	2b00      	cmp	r3, #0
 8017418:	d136      	bne.n	8017488 <_dtoa_r+0x810>
 801741a:	9b01      	ldr	r3, [sp, #4]
 801741c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017420:	0d1b      	lsrs	r3, r3, #20
 8017422:	051b      	lsls	r3, r3, #20
 8017424:	b12b      	cbz	r3, 8017432 <_dtoa_r+0x7ba>
 8017426:	9b05      	ldr	r3, [sp, #20]
 8017428:	3301      	adds	r3, #1
 801742a:	9305      	str	r3, [sp, #20]
 801742c:	f108 0801 	add.w	r8, r8, #1
 8017430:	2301      	movs	r3, #1
 8017432:	9307      	str	r3, [sp, #28]
 8017434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017436:	2b00      	cmp	r3, #0
 8017438:	d12a      	bne.n	8017490 <_dtoa_r+0x818>
 801743a:	2001      	movs	r0, #1
 801743c:	e030      	b.n	80174a0 <_dtoa_r+0x828>
 801743e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017440:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017444:	e795      	b.n	8017372 <_dtoa_r+0x6fa>
 8017446:	9b07      	ldr	r3, [sp, #28]
 8017448:	f109 37ff 	add.w	r7, r9, #4294967295
 801744c:	42bb      	cmp	r3, r7
 801744e:	bfbf      	itttt	lt
 8017450:	9b07      	ldrlt	r3, [sp, #28]
 8017452:	9707      	strlt	r7, [sp, #28]
 8017454:	1afa      	sublt	r2, r7, r3
 8017456:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017458:	bfbb      	ittet	lt
 801745a:	189b      	addlt	r3, r3, r2
 801745c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801745e:	1bdf      	subge	r7, r3, r7
 8017460:	2700      	movlt	r7, #0
 8017462:	f1b9 0f00 	cmp.w	r9, #0
 8017466:	bfb5      	itete	lt
 8017468:	9b05      	ldrlt	r3, [sp, #20]
 801746a:	9d05      	ldrge	r5, [sp, #20]
 801746c:	eba3 0509 	sublt.w	r5, r3, r9
 8017470:	464b      	movge	r3, r9
 8017472:	bfb8      	it	lt
 8017474:	2300      	movlt	r3, #0
 8017476:	e77e      	b.n	8017376 <_dtoa_r+0x6fe>
 8017478:	9f07      	ldr	r7, [sp, #28]
 801747a:	9d05      	ldr	r5, [sp, #20]
 801747c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801747e:	e783      	b.n	8017388 <_dtoa_r+0x710>
 8017480:	9a07      	ldr	r2, [sp, #28]
 8017482:	e7ab      	b.n	80173dc <_dtoa_r+0x764>
 8017484:	2300      	movs	r3, #0
 8017486:	e7d4      	b.n	8017432 <_dtoa_r+0x7ba>
 8017488:	9b00      	ldr	r3, [sp, #0]
 801748a:	e7d2      	b.n	8017432 <_dtoa_r+0x7ba>
 801748c:	2300      	movs	r3, #0
 801748e:	9307      	str	r3, [sp, #28]
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017496:	6918      	ldr	r0, [r3, #16]
 8017498:	f000 fe1b 	bl	80180d2 <__hi0bits>
 801749c:	f1c0 0020 	rsb	r0, r0, #32
 80174a0:	4440      	add	r0, r8
 80174a2:	f010 001f 	ands.w	r0, r0, #31
 80174a6:	d047      	beq.n	8017538 <_dtoa_r+0x8c0>
 80174a8:	f1c0 0320 	rsb	r3, r0, #32
 80174ac:	2b04      	cmp	r3, #4
 80174ae:	dd3b      	ble.n	8017528 <_dtoa_r+0x8b0>
 80174b0:	9b05      	ldr	r3, [sp, #20]
 80174b2:	f1c0 001c 	rsb	r0, r0, #28
 80174b6:	4403      	add	r3, r0
 80174b8:	9305      	str	r3, [sp, #20]
 80174ba:	4405      	add	r5, r0
 80174bc:	4480      	add	r8, r0
 80174be:	9b05      	ldr	r3, [sp, #20]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	dd05      	ble.n	80174d0 <_dtoa_r+0x858>
 80174c4:	461a      	mov	r2, r3
 80174c6:	9904      	ldr	r1, [sp, #16]
 80174c8:	4620      	mov	r0, r4
 80174ca:	f000 ff3d 	bl	8018348 <__lshift>
 80174ce:	9004      	str	r0, [sp, #16]
 80174d0:	f1b8 0f00 	cmp.w	r8, #0
 80174d4:	dd05      	ble.n	80174e2 <_dtoa_r+0x86a>
 80174d6:	4639      	mov	r1, r7
 80174d8:	4642      	mov	r2, r8
 80174da:	4620      	mov	r0, r4
 80174dc:	f000 ff34 	bl	8018348 <__lshift>
 80174e0:	4607      	mov	r7, r0
 80174e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174e4:	b353      	cbz	r3, 801753c <_dtoa_r+0x8c4>
 80174e6:	4639      	mov	r1, r7
 80174e8:	9804      	ldr	r0, [sp, #16]
 80174ea:	f000 ff81 	bl	80183f0 <__mcmp>
 80174ee:	2800      	cmp	r0, #0
 80174f0:	da24      	bge.n	801753c <_dtoa_r+0x8c4>
 80174f2:	2300      	movs	r3, #0
 80174f4:	220a      	movs	r2, #10
 80174f6:	9904      	ldr	r1, [sp, #16]
 80174f8:	4620      	mov	r0, r4
 80174fa:	f000 fd71 	bl	8017fe0 <__multadd>
 80174fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017500:	9004      	str	r0, [sp, #16]
 8017502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017506:	2b00      	cmp	r3, #0
 8017508:	f000 814d 	beq.w	80177a6 <_dtoa_r+0xb2e>
 801750c:	2300      	movs	r3, #0
 801750e:	4631      	mov	r1, r6
 8017510:	220a      	movs	r2, #10
 8017512:	4620      	mov	r0, r4
 8017514:	f000 fd64 	bl	8017fe0 <__multadd>
 8017518:	9b02      	ldr	r3, [sp, #8]
 801751a:	2b00      	cmp	r3, #0
 801751c:	4606      	mov	r6, r0
 801751e:	dc4f      	bgt.n	80175c0 <_dtoa_r+0x948>
 8017520:	9b06      	ldr	r3, [sp, #24]
 8017522:	2b02      	cmp	r3, #2
 8017524:	dd4c      	ble.n	80175c0 <_dtoa_r+0x948>
 8017526:	e011      	b.n	801754c <_dtoa_r+0x8d4>
 8017528:	d0c9      	beq.n	80174be <_dtoa_r+0x846>
 801752a:	9a05      	ldr	r2, [sp, #20]
 801752c:	331c      	adds	r3, #28
 801752e:	441a      	add	r2, r3
 8017530:	9205      	str	r2, [sp, #20]
 8017532:	441d      	add	r5, r3
 8017534:	4498      	add	r8, r3
 8017536:	e7c2      	b.n	80174be <_dtoa_r+0x846>
 8017538:	4603      	mov	r3, r0
 801753a:	e7f6      	b.n	801752a <_dtoa_r+0x8b2>
 801753c:	f1b9 0f00 	cmp.w	r9, #0
 8017540:	dc38      	bgt.n	80175b4 <_dtoa_r+0x93c>
 8017542:	9b06      	ldr	r3, [sp, #24]
 8017544:	2b02      	cmp	r3, #2
 8017546:	dd35      	ble.n	80175b4 <_dtoa_r+0x93c>
 8017548:	f8cd 9008 	str.w	r9, [sp, #8]
 801754c:	9b02      	ldr	r3, [sp, #8]
 801754e:	b963      	cbnz	r3, 801756a <_dtoa_r+0x8f2>
 8017550:	4639      	mov	r1, r7
 8017552:	2205      	movs	r2, #5
 8017554:	4620      	mov	r0, r4
 8017556:	f000 fd43 	bl	8017fe0 <__multadd>
 801755a:	4601      	mov	r1, r0
 801755c:	4607      	mov	r7, r0
 801755e:	9804      	ldr	r0, [sp, #16]
 8017560:	f000 ff46 	bl	80183f0 <__mcmp>
 8017564:	2800      	cmp	r0, #0
 8017566:	f73f adcc 	bgt.w	8017102 <_dtoa_r+0x48a>
 801756a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801756c:	465d      	mov	r5, fp
 801756e:	ea6f 0a03 	mvn.w	sl, r3
 8017572:	f04f 0900 	mov.w	r9, #0
 8017576:	4639      	mov	r1, r7
 8017578:	4620      	mov	r0, r4
 801757a:	f000 fd1a 	bl	8017fb2 <_Bfree>
 801757e:	2e00      	cmp	r6, #0
 8017580:	f43f aeb7 	beq.w	80172f2 <_dtoa_r+0x67a>
 8017584:	f1b9 0f00 	cmp.w	r9, #0
 8017588:	d005      	beq.n	8017596 <_dtoa_r+0x91e>
 801758a:	45b1      	cmp	r9, r6
 801758c:	d003      	beq.n	8017596 <_dtoa_r+0x91e>
 801758e:	4649      	mov	r1, r9
 8017590:	4620      	mov	r0, r4
 8017592:	f000 fd0e 	bl	8017fb2 <_Bfree>
 8017596:	4631      	mov	r1, r6
 8017598:	4620      	mov	r0, r4
 801759a:	f000 fd0a 	bl	8017fb2 <_Bfree>
 801759e:	e6a8      	b.n	80172f2 <_dtoa_r+0x67a>
 80175a0:	2700      	movs	r7, #0
 80175a2:	463e      	mov	r6, r7
 80175a4:	e7e1      	b.n	801756a <_dtoa_r+0x8f2>
 80175a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80175aa:	463e      	mov	r6, r7
 80175ac:	e5a9      	b.n	8017102 <_dtoa_r+0x48a>
 80175ae:	bf00      	nop
 80175b0:	40240000 	.word	0x40240000
 80175b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	f000 80fa 	beq.w	80177b4 <_dtoa_r+0xb3c>
 80175c0:	2d00      	cmp	r5, #0
 80175c2:	dd05      	ble.n	80175d0 <_dtoa_r+0x958>
 80175c4:	4631      	mov	r1, r6
 80175c6:	462a      	mov	r2, r5
 80175c8:	4620      	mov	r0, r4
 80175ca:	f000 febd 	bl	8018348 <__lshift>
 80175ce:	4606      	mov	r6, r0
 80175d0:	9b07      	ldr	r3, [sp, #28]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d04c      	beq.n	8017670 <_dtoa_r+0x9f8>
 80175d6:	6871      	ldr	r1, [r6, #4]
 80175d8:	4620      	mov	r0, r4
 80175da:	f000 fcb6 	bl	8017f4a <_Balloc>
 80175de:	6932      	ldr	r2, [r6, #16]
 80175e0:	3202      	adds	r2, #2
 80175e2:	4605      	mov	r5, r0
 80175e4:	0092      	lsls	r2, r2, #2
 80175e6:	f106 010c 	add.w	r1, r6, #12
 80175ea:	300c      	adds	r0, #12
 80175ec:	f7fc fae6 	bl	8013bbc <memcpy>
 80175f0:	2201      	movs	r2, #1
 80175f2:	4629      	mov	r1, r5
 80175f4:	4620      	mov	r0, r4
 80175f6:	f000 fea7 	bl	8018348 <__lshift>
 80175fa:	9b00      	ldr	r3, [sp, #0]
 80175fc:	f8cd b014 	str.w	fp, [sp, #20]
 8017600:	f003 0301 	and.w	r3, r3, #1
 8017604:	46b1      	mov	r9, r6
 8017606:	9307      	str	r3, [sp, #28]
 8017608:	4606      	mov	r6, r0
 801760a:	4639      	mov	r1, r7
 801760c:	9804      	ldr	r0, [sp, #16]
 801760e:	f7ff faa7 	bl	8016b60 <quorem>
 8017612:	4649      	mov	r1, r9
 8017614:	4605      	mov	r5, r0
 8017616:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801761a:	9804      	ldr	r0, [sp, #16]
 801761c:	f000 fee8 	bl	80183f0 <__mcmp>
 8017620:	4632      	mov	r2, r6
 8017622:	9000      	str	r0, [sp, #0]
 8017624:	4639      	mov	r1, r7
 8017626:	4620      	mov	r0, r4
 8017628:	f000 fefc 	bl	8018424 <__mdiff>
 801762c:	68c3      	ldr	r3, [r0, #12]
 801762e:	4602      	mov	r2, r0
 8017630:	bb03      	cbnz	r3, 8017674 <_dtoa_r+0x9fc>
 8017632:	4601      	mov	r1, r0
 8017634:	9008      	str	r0, [sp, #32]
 8017636:	9804      	ldr	r0, [sp, #16]
 8017638:	f000 feda 	bl	80183f0 <__mcmp>
 801763c:	9a08      	ldr	r2, [sp, #32]
 801763e:	4603      	mov	r3, r0
 8017640:	4611      	mov	r1, r2
 8017642:	4620      	mov	r0, r4
 8017644:	9308      	str	r3, [sp, #32]
 8017646:	f000 fcb4 	bl	8017fb2 <_Bfree>
 801764a:	9b08      	ldr	r3, [sp, #32]
 801764c:	b9a3      	cbnz	r3, 8017678 <_dtoa_r+0xa00>
 801764e:	9a06      	ldr	r2, [sp, #24]
 8017650:	b992      	cbnz	r2, 8017678 <_dtoa_r+0xa00>
 8017652:	9a07      	ldr	r2, [sp, #28]
 8017654:	b982      	cbnz	r2, 8017678 <_dtoa_r+0xa00>
 8017656:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801765a:	d029      	beq.n	80176b0 <_dtoa_r+0xa38>
 801765c:	9b00      	ldr	r3, [sp, #0]
 801765e:	2b00      	cmp	r3, #0
 8017660:	dd01      	ble.n	8017666 <_dtoa_r+0x9ee>
 8017662:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017666:	9b05      	ldr	r3, [sp, #20]
 8017668:	1c5d      	adds	r5, r3, #1
 801766a:	f883 8000 	strb.w	r8, [r3]
 801766e:	e782      	b.n	8017576 <_dtoa_r+0x8fe>
 8017670:	4630      	mov	r0, r6
 8017672:	e7c2      	b.n	80175fa <_dtoa_r+0x982>
 8017674:	2301      	movs	r3, #1
 8017676:	e7e3      	b.n	8017640 <_dtoa_r+0x9c8>
 8017678:	9a00      	ldr	r2, [sp, #0]
 801767a:	2a00      	cmp	r2, #0
 801767c:	db04      	blt.n	8017688 <_dtoa_r+0xa10>
 801767e:	d125      	bne.n	80176cc <_dtoa_r+0xa54>
 8017680:	9a06      	ldr	r2, [sp, #24]
 8017682:	bb1a      	cbnz	r2, 80176cc <_dtoa_r+0xa54>
 8017684:	9a07      	ldr	r2, [sp, #28]
 8017686:	bb0a      	cbnz	r2, 80176cc <_dtoa_r+0xa54>
 8017688:	2b00      	cmp	r3, #0
 801768a:	ddec      	ble.n	8017666 <_dtoa_r+0x9ee>
 801768c:	2201      	movs	r2, #1
 801768e:	9904      	ldr	r1, [sp, #16]
 8017690:	4620      	mov	r0, r4
 8017692:	f000 fe59 	bl	8018348 <__lshift>
 8017696:	4639      	mov	r1, r7
 8017698:	9004      	str	r0, [sp, #16]
 801769a:	f000 fea9 	bl	80183f0 <__mcmp>
 801769e:	2800      	cmp	r0, #0
 80176a0:	dc03      	bgt.n	80176aa <_dtoa_r+0xa32>
 80176a2:	d1e0      	bne.n	8017666 <_dtoa_r+0x9ee>
 80176a4:	f018 0f01 	tst.w	r8, #1
 80176a8:	d0dd      	beq.n	8017666 <_dtoa_r+0x9ee>
 80176aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80176ae:	d1d8      	bne.n	8017662 <_dtoa_r+0x9ea>
 80176b0:	9b05      	ldr	r3, [sp, #20]
 80176b2:	9a05      	ldr	r2, [sp, #20]
 80176b4:	1c5d      	adds	r5, r3, #1
 80176b6:	2339      	movs	r3, #57	; 0x39
 80176b8:	7013      	strb	r3, [r2, #0]
 80176ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80176be:	2b39      	cmp	r3, #57	; 0x39
 80176c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80176c4:	d04f      	beq.n	8017766 <_dtoa_r+0xaee>
 80176c6:	3301      	adds	r3, #1
 80176c8:	7013      	strb	r3, [r2, #0]
 80176ca:	e754      	b.n	8017576 <_dtoa_r+0x8fe>
 80176cc:	9a05      	ldr	r2, [sp, #20]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	f102 0501 	add.w	r5, r2, #1
 80176d4:	dd06      	ble.n	80176e4 <_dtoa_r+0xa6c>
 80176d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80176da:	d0e9      	beq.n	80176b0 <_dtoa_r+0xa38>
 80176dc:	f108 0801 	add.w	r8, r8, #1
 80176e0:	9b05      	ldr	r3, [sp, #20]
 80176e2:	e7c2      	b.n	801766a <_dtoa_r+0x9f2>
 80176e4:	9a02      	ldr	r2, [sp, #8]
 80176e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80176ea:	eba5 030b 	sub.w	r3, r5, fp
 80176ee:	4293      	cmp	r3, r2
 80176f0:	d021      	beq.n	8017736 <_dtoa_r+0xabe>
 80176f2:	2300      	movs	r3, #0
 80176f4:	220a      	movs	r2, #10
 80176f6:	9904      	ldr	r1, [sp, #16]
 80176f8:	4620      	mov	r0, r4
 80176fa:	f000 fc71 	bl	8017fe0 <__multadd>
 80176fe:	45b1      	cmp	r9, r6
 8017700:	9004      	str	r0, [sp, #16]
 8017702:	f04f 0300 	mov.w	r3, #0
 8017706:	f04f 020a 	mov.w	r2, #10
 801770a:	4649      	mov	r1, r9
 801770c:	4620      	mov	r0, r4
 801770e:	d105      	bne.n	801771c <_dtoa_r+0xaa4>
 8017710:	f000 fc66 	bl	8017fe0 <__multadd>
 8017714:	4681      	mov	r9, r0
 8017716:	4606      	mov	r6, r0
 8017718:	9505      	str	r5, [sp, #20]
 801771a:	e776      	b.n	801760a <_dtoa_r+0x992>
 801771c:	f000 fc60 	bl	8017fe0 <__multadd>
 8017720:	4631      	mov	r1, r6
 8017722:	4681      	mov	r9, r0
 8017724:	2300      	movs	r3, #0
 8017726:	220a      	movs	r2, #10
 8017728:	4620      	mov	r0, r4
 801772a:	f000 fc59 	bl	8017fe0 <__multadd>
 801772e:	4606      	mov	r6, r0
 8017730:	e7f2      	b.n	8017718 <_dtoa_r+0xaa0>
 8017732:	f04f 0900 	mov.w	r9, #0
 8017736:	2201      	movs	r2, #1
 8017738:	9904      	ldr	r1, [sp, #16]
 801773a:	4620      	mov	r0, r4
 801773c:	f000 fe04 	bl	8018348 <__lshift>
 8017740:	4639      	mov	r1, r7
 8017742:	9004      	str	r0, [sp, #16]
 8017744:	f000 fe54 	bl	80183f0 <__mcmp>
 8017748:	2800      	cmp	r0, #0
 801774a:	dcb6      	bgt.n	80176ba <_dtoa_r+0xa42>
 801774c:	d102      	bne.n	8017754 <_dtoa_r+0xadc>
 801774e:	f018 0f01 	tst.w	r8, #1
 8017752:	d1b2      	bne.n	80176ba <_dtoa_r+0xa42>
 8017754:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017758:	2b30      	cmp	r3, #48	; 0x30
 801775a:	f105 32ff 	add.w	r2, r5, #4294967295
 801775e:	f47f af0a 	bne.w	8017576 <_dtoa_r+0x8fe>
 8017762:	4615      	mov	r5, r2
 8017764:	e7f6      	b.n	8017754 <_dtoa_r+0xadc>
 8017766:	4593      	cmp	fp, r2
 8017768:	d105      	bne.n	8017776 <_dtoa_r+0xafe>
 801776a:	2331      	movs	r3, #49	; 0x31
 801776c:	f10a 0a01 	add.w	sl, sl, #1
 8017770:	f88b 3000 	strb.w	r3, [fp]
 8017774:	e6ff      	b.n	8017576 <_dtoa_r+0x8fe>
 8017776:	4615      	mov	r5, r2
 8017778:	e79f      	b.n	80176ba <_dtoa_r+0xa42>
 801777a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80177e0 <_dtoa_r+0xb68>
 801777e:	e007      	b.n	8017790 <_dtoa_r+0xb18>
 8017780:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017782:	f8df b060 	ldr.w	fp, [pc, #96]	; 80177e4 <_dtoa_r+0xb6c>
 8017786:	b11b      	cbz	r3, 8017790 <_dtoa_r+0xb18>
 8017788:	f10b 0308 	add.w	r3, fp, #8
 801778c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801778e:	6013      	str	r3, [r2, #0]
 8017790:	4658      	mov	r0, fp
 8017792:	b017      	add	sp, #92	; 0x5c
 8017794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017798:	9b06      	ldr	r3, [sp, #24]
 801779a:	2b01      	cmp	r3, #1
 801779c:	f77f ae35 	ble.w	801740a <_dtoa_r+0x792>
 80177a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177a2:	9307      	str	r3, [sp, #28]
 80177a4:	e649      	b.n	801743a <_dtoa_r+0x7c2>
 80177a6:	9b02      	ldr	r3, [sp, #8]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	dc03      	bgt.n	80177b4 <_dtoa_r+0xb3c>
 80177ac:	9b06      	ldr	r3, [sp, #24]
 80177ae:	2b02      	cmp	r3, #2
 80177b0:	f73f aecc 	bgt.w	801754c <_dtoa_r+0x8d4>
 80177b4:	465d      	mov	r5, fp
 80177b6:	4639      	mov	r1, r7
 80177b8:	9804      	ldr	r0, [sp, #16]
 80177ba:	f7ff f9d1 	bl	8016b60 <quorem>
 80177be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80177c2:	f805 8b01 	strb.w	r8, [r5], #1
 80177c6:	9a02      	ldr	r2, [sp, #8]
 80177c8:	eba5 030b 	sub.w	r3, r5, fp
 80177cc:	429a      	cmp	r2, r3
 80177ce:	ddb0      	ble.n	8017732 <_dtoa_r+0xaba>
 80177d0:	2300      	movs	r3, #0
 80177d2:	220a      	movs	r2, #10
 80177d4:	9904      	ldr	r1, [sp, #16]
 80177d6:	4620      	mov	r0, r4
 80177d8:	f000 fc02 	bl	8017fe0 <__multadd>
 80177dc:	9004      	str	r0, [sp, #16]
 80177de:	e7ea      	b.n	80177b6 <_dtoa_r+0xb3e>
 80177e0:	08019052 	.word	0x08019052
 80177e4:	080190a8 	.word	0x080190a8

080177e8 <_fstat_r>:
 80177e8:	b538      	push	{r3, r4, r5, lr}
 80177ea:	4c07      	ldr	r4, [pc, #28]	; (8017808 <_fstat_r+0x20>)
 80177ec:	2300      	movs	r3, #0
 80177ee:	4605      	mov	r5, r0
 80177f0:	4608      	mov	r0, r1
 80177f2:	4611      	mov	r1, r2
 80177f4:	6023      	str	r3, [r4, #0]
 80177f6:	f7f5 fd1e 	bl	800d236 <_fstat>
 80177fa:	1c43      	adds	r3, r0, #1
 80177fc:	d102      	bne.n	8017804 <_fstat_r+0x1c>
 80177fe:	6823      	ldr	r3, [r4, #0]
 8017800:	b103      	cbz	r3, 8017804 <_fstat_r+0x1c>
 8017802:	602b      	str	r3, [r5, #0]
 8017804:	bd38      	pop	{r3, r4, r5, pc}
 8017806:	bf00      	nop
 8017808:	20008f48 	.word	0x20008f48

0801780c <rshift>:
 801780c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801780e:	6906      	ldr	r6, [r0, #16]
 8017810:	114b      	asrs	r3, r1, #5
 8017812:	429e      	cmp	r6, r3
 8017814:	f100 0414 	add.w	r4, r0, #20
 8017818:	dd30      	ble.n	801787c <rshift+0x70>
 801781a:	f011 011f 	ands.w	r1, r1, #31
 801781e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017822:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017826:	d108      	bne.n	801783a <rshift+0x2e>
 8017828:	4621      	mov	r1, r4
 801782a:	42b2      	cmp	r2, r6
 801782c:	460b      	mov	r3, r1
 801782e:	d211      	bcs.n	8017854 <rshift+0x48>
 8017830:	f852 3b04 	ldr.w	r3, [r2], #4
 8017834:	f841 3b04 	str.w	r3, [r1], #4
 8017838:	e7f7      	b.n	801782a <rshift+0x1e>
 801783a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801783e:	f1c1 0c20 	rsb	ip, r1, #32
 8017842:	40cd      	lsrs	r5, r1
 8017844:	3204      	adds	r2, #4
 8017846:	4623      	mov	r3, r4
 8017848:	42b2      	cmp	r2, r6
 801784a:	4617      	mov	r7, r2
 801784c:	d30c      	bcc.n	8017868 <rshift+0x5c>
 801784e:	601d      	str	r5, [r3, #0]
 8017850:	b105      	cbz	r5, 8017854 <rshift+0x48>
 8017852:	3304      	adds	r3, #4
 8017854:	1b1a      	subs	r2, r3, r4
 8017856:	42a3      	cmp	r3, r4
 8017858:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801785c:	bf08      	it	eq
 801785e:	2300      	moveq	r3, #0
 8017860:	6102      	str	r2, [r0, #16]
 8017862:	bf08      	it	eq
 8017864:	6143      	streq	r3, [r0, #20]
 8017866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017868:	683f      	ldr	r7, [r7, #0]
 801786a:	fa07 f70c 	lsl.w	r7, r7, ip
 801786e:	433d      	orrs	r5, r7
 8017870:	f843 5b04 	str.w	r5, [r3], #4
 8017874:	f852 5b04 	ldr.w	r5, [r2], #4
 8017878:	40cd      	lsrs	r5, r1
 801787a:	e7e5      	b.n	8017848 <rshift+0x3c>
 801787c:	4623      	mov	r3, r4
 801787e:	e7e9      	b.n	8017854 <rshift+0x48>

08017880 <__hexdig_fun>:
 8017880:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017884:	2b09      	cmp	r3, #9
 8017886:	d802      	bhi.n	801788e <__hexdig_fun+0xe>
 8017888:	3820      	subs	r0, #32
 801788a:	b2c0      	uxtb	r0, r0
 801788c:	4770      	bx	lr
 801788e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017892:	2b05      	cmp	r3, #5
 8017894:	d801      	bhi.n	801789a <__hexdig_fun+0x1a>
 8017896:	3847      	subs	r0, #71	; 0x47
 8017898:	e7f7      	b.n	801788a <__hexdig_fun+0xa>
 801789a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801789e:	2b05      	cmp	r3, #5
 80178a0:	d801      	bhi.n	80178a6 <__hexdig_fun+0x26>
 80178a2:	3827      	subs	r0, #39	; 0x27
 80178a4:	e7f1      	b.n	801788a <__hexdig_fun+0xa>
 80178a6:	2000      	movs	r0, #0
 80178a8:	4770      	bx	lr

080178aa <__gethex>:
 80178aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178ae:	b08b      	sub	sp, #44	; 0x2c
 80178b0:	468a      	mov	sl, r1
 80178b2:	9002      	str	r0, [sp, #8]
 80178b4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80178b6:	9306      	str	r3, [sp, #24]
 80178b8:	4690      	mov	r8, r2
 80178ba:	f000 faef 	bl	8017e9c <__localeconv_l>
 80178be:	6803      	ldr	r3, [r0, #0]
 80178c0:	9303      	str	r3, [sp, #12]
 80178c2:	4618      	mov	r0, r3
 80178c4:	f7f0 fbbc 	bl	8008040 <strlen>
 80178c8:	9b03      	ldr	r3, [sp, #12]
 80178ca:	9001      	str	r0, [sp, #4]
 80178cc:	4403      	add	r3, r0
 80178ce:	f04f 0b00 	mov.w	fp, #0
 80178d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80178d6:	9307      	str	r3, [sp, #28]
 80178d8:	f8da 3000 	ldr.w	r3, [sl]
 80178dc:	3302      	adds	r3, #2
 80178de:	461f      	mov	r7, r3
 80178e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80178e4:	2830      	cmp	r0, #48	; 0x30
 80178e6:	d06c      	beq.n	80179c2 <__gethex+0x118>
 80178e8:	f7ff ffca 	bl	8017880 <__hexdig_fun>
 80178ec:	4604      	mov	r4, r0
 80178ee:	2800      	cmp	r0, #0
 80178f0:	d16a      	bne.n	80179c8 <__gethex+0x11e>
 80178f2:	9a01      	ldr	r2, [sp, #4]
 80178f4:	9903      	ldr	r1, [sp, #12]
 80178f6:	4638      	mov	r0, r7
 80178f8:	f001 f8f4 	bl	8018ae4 <strncmp>
 80178fc:	2800      	cmp	r0, #0
 80178fe:	d166      	bne.n	80179ce <__gethex+0x124>
 8017900:	9b01      	ldr	r3, [sp, #4]
 8017902:	5cf8      	ldrb	r0, [r7, r3]
 8017904:	18fe      	adds	r6, r7, r3
 8017906:	f7ff ffbb 	bl	8017880 <__hexdig_fun>
 801790a:	2800      	cmp	r0, #0
 801790c:	d062      	beq.n	80179d4 <__gethex+0x12a>
 801790e:	4633      	mov	r3, r6
 8017910:	7818      	ldrb	r0, [r3, #0]
 8017912:	2830      	cmp	r0, #48	; 0x30
 8017914:	461f      	mov	r7, r3
 8017916:	f103 0301 	add.w	r3, r3, #1
 801791a:	d0f9      	beq.n	8017910 <__gethex+0x66>
 801791c:	f7ff ffb0 	bl	8017880 <__hexdig_fun>
 8017920:	fab0 f580 	clz	r5, r0
 8017924:	096d      	lsrs	r5, r5, #5
 8017926:	4634      	mov	r4, r6
 8017928:	f04f 0b01 	mov.w	fp, #1
 801792c:	463a      	mov	r2, r7
 801792e:	4616      	mov	r6, r2
 8017930:	3201      	adds	r2, #1
 8017932:	7830      	ldrb	r0, [r6, #0]
 8017934:	f7ff ffa4 	bl	8017880 <__hexdig_fun>
 8017938:	2800      	cmp	r0, #0
 801793a:	d1f8      	bne.n	801792e <__gethex+0x84>
 801793c:	9a01      	ldr	r2, [sp, #4]
 801793e:	9903      	ldr	r1, [sp, #12]
 8017940:	4630      	mov	r0, r6
 8017942:	f001 f8cf 	bl	8018ae4 <strncmp>
 8017946:	b950      	cbnz	r0, 801795e <__gethex+0xb4>
 8017948:	b954      	cbnz	r4, 8017960 <__gethex+0xb6>
 801794a:	9b01      	ldr	r3, [sp, #4]
 801794c:	18f4      	adds	r4, r6, r3
 801794e:	4622      	mov	r2, r4
 8017950:	4616      	mov	r6, r2
 8017952:	3201      	adds	r2, #1
 8017954:	7830      	ldrb	r0, [r6, #0]
 8017956:	f7ff ff93 	bl	8017880 <__hexdig_fun>
 801795a:	2800      	cmp	r0, #0
 801795c:	d1f8      	bne.n	8017950 <__gethex+0xa6>
 801795e:	b10c      	cbz	r4, 8017964 <__gethex+0xba>
 8017960:	1ba4      	subs	r4, r4, r6
 8017962:	00a4      	lsls	r4, r4, #2
 8017964:	7833      	ldrb	r3, [r6, #0]
 8017966:	2b50      	cmp	r3, #80	; 0x50
 8017968:	d001      	beq.n	801796e <__gethex+0xc4>
 801796a:	2b70      	cmp	r3, #112	; 0x70
 801796c:	d140      	bne.n	80179f0 <__gethex+0x146>
 801796e:	7873      	ldrb	r3, [r6, #1]
 8017970:	2b2b      	cmp	r3, #43	; 0x2b
 8017972:	d031      	beq.n	80179d8 <__gethex+0x12e>
 8017974:	2b2d      	cmp	r3, #45	; 0x2d
 8017976:	d033      	beq.n	80179e0 <__gethex+0x136>
 8017978:	1c71      	adds	r1, r6, #1
 801797a:	f04f 0900 	mov.w	r9, #0
 801797e:	7808      	ldrb	r0, [r1, #0]
 8017980:	f7ff ff7e 	bl	8017880 <__hexdig_fun>
 8017984:	1e43      	subs	r3, r0, #1
 8017986:	b2db      	uxtb	r3, r3
 8017988:	2b18      	cmp	r3, #24
 801798a:	d831      	bhi.n	80179f0 <__gethex+0x146>
 801798c:	f1a0 0210 	sub.w	r2, r0, #16
 8017990:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017994:	f7ff ff74 	bl	8017880 <__hexdig_fun>
 8017998:	1e43      	subs	r3, r0, #1
 801799a:	b2db      	uxtb	r3, r3
 801799c:	2b18      	cmp	r3, #24
 801799e:	d922      	bls.n	80179e6 <__gethex+0x13c>
 80179a0:	f1b9 0f00 	cmp.w	r9, #0
 80179a4:	d000      	beq.n	80179a8 <__gethex+0xfe>
 80179a6:	4252      	negs	r2, r2
 80179a8:	4414      	add	r4, r2
 80179aa:	f8ca 1000 	str.w	r1, [sl]
 80179ae:	b30d      	cbz	r5, 80179f4 <__gethex+0x14a>
 80179b0:	f1bb 0f00 	cmp.w	fp, #0
 80179b4:	bf0c      	ite	eq
 80179b6:	2706      	moveq	r7, #6
 80179b8:	2700      	movne	r7, #0
 80179ba:	4638      	mov	r0, r7
 80179bc:	b00b      	add	sp, #44	; 0x2c
 80179be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179c2:	f10b 0b01 	add.w	fp, fp, #1
 80179c6:	e78a      	b.n	80178de <__gethex+0x34>
 80179c8:	2500      	movs	r5, #0
 80179ca:	462c      	mov	r4, r5
 80179cc:	e7ae      	b.n	801792c <__gethex+0x82>
 80179ce:	463e      	mov	r6, r7
 80179d0:	2501      	movs	r5, #1
 80179d2:	e7c7      	b.n	8017964 <__gethex+0xba>
 80179d4:	4604      	mov	r4, r0
 80179d6:	e7fb      	b.n	80179d0 <__gethex+0x126>
 80179d8:	f04f 0900 	mov.w	r9, #0
 80179dc:	1cb1      	adds	r1, r6, #2
 80179de:	e7ce      	b.n	801797e <__gethex+0xd4>
 80179e0:	f04f 0901 	mov.w	r9, #1
 80179e4:	e7fa      	b.n	80179dc <__gethex+0x132>
 80179e6:	230a      	movs	r3, #10
 80179e8:	fb03 0202 	mla	r2, r3, r2, r0
 80179ec:	3a10      	subs	r2, #16
 80179ee:	e7cf      	b.n	8017990 <__gethex+0xe6>
 80179f0:	4631      	mov	r1, r6
 80179f2:	e7da      	b.n	80179aa <__gethex+0x100>
 80179f4:	1bf3      	subs	r3, r6, r7
 80179f6:	3b01      	subs	r3, #1
 80179f8:	4629      	mov	r1, r5
 80179fa:	2b07      	cmp	r3, #7
 80179fc:	dc49      	bgt.n	8017a92 <__gethex+0x1e8>
 80179fe:	9802      	ldr	r0, [sp, #8]
 8017a00:	f000 faa3 	bl	8017f4a <_Balloc>
 8017a04:	9b01      	ldr	r3, [sp, #4]
 8017a06:	f100 0914 	add.w	r9, r0, #20
 8017a0a:	f04f 0b00 	mov.w	fp, #0
 8017a0e:	f1c3 0301 	rsb	r3, r3, #1
 8017a12:	4605      	mov	r5, r0
 8017a14:	f8cd 9010 	str.w	r9, [sp, #16]
 8017a18:	46da      	mov	sl, fp
 8017a1a:	9308      	str	r3, [sp, #32]
 8017a1c:	42b7      	cmp	r7, r6
 8017a1e:	d33b      	bcc.n	8017a98 <__gethex+0x1ee>
 8017a20:	9804      	ldr	r0, [sp, #16]
 8017a22:	f840 ab04 	str.w	sl, [r0], #4
 8017a26:	eba0 0009 	sub.w	r0, r0, r9
 8017a2a:	1080      	asrs	r0, r0, #2
 8017a2c:	6128      	str	r0, [r5, #16]
 8017a2e:	0147      	lsls	r7, r0, #5
 8017a30:	4650      	mov	r0, sl
 8017a32:	f000 fb4e 	bl	80180d2 <__hi0bits>
 8017a36:	f8d8 6000 	ldr.w	r6, [r8]
 8017a3a:	1a3f      	subs	r7, r7, r0
 8017a3c:	42b7      	cmp	r7, r6
 8017a3e:	dd64      	ble.n	8017b0a <__gethex+0x260>
 8017a40:	1bbf      	subs	r7, r7, r6
 8017a42:	4639      	mov	r1, r7
 8017a44:	4628      	mov	r0, r5
 8017a46:	f000 fe5d 	bl	8018704 <__any_on>
 8017a4a:	4682      	mov	sl, r0
 8017a4c:	b178      	cbz	r0, 8017a6e <__gethex+0x1c4>
 8017a4e:	1e7b      	subs	r3, r7, #1
 8017a50:	1159      	asrs	r1, r3, #5
 8017a52:	f003 021f 	and.w	r2, r3, #31
 8017a56:	f04f 0a01 	mov.w	sl, #1
 8017a5a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017a5e:	fa0a f202 	lsl.w	r2, sl, r2
 8017a62:	420a      	tst	r2, r1
 8017a64:	d003      	beq.n	8017a6e <__gethex+0x1c4>
 8017a66:	4553      	cmp	r3, sl
 8017a68:	dc46      	bgt.n	8017af8 <__gethex+0x24e>
 8017a6a:	f04f 0a02 	mov.w	sl, #2
 8017a6e:	4639      	mov	r1, r7
 8017a70:	4628      	mov	r0, r5
 8017a72:	f7ff fecb 	bl	801780c <rshift>
 8017a76:	443c      	add	r4, r7
 8017a78:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a7c:	42a3      	cmp	r3, r4
 8017a7e:	da52      	bge.n	8017b26 <__gethex+0x27c>
 8017a80:	4629      	mov	r1, r5
 8017a82:	9802      	ldr	r0, [sp, #8]
 8017a84:	f000 fa95 	bl	8017fb2 <_Bfree>
 8017a88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	6013      	str	r3, [r2, #0]
 8017a8e:	27a3      	movs	r7, #163	; 0xa3
 8017a90:	e793      	b.n	80179ba <__gethex+0x110>
 8017a92:	3101      	adds	r1, #1
 8017a94:	105b      	asrs	r3, r3, #1
 8017a96:	e7b0      	b.n	80179fa <__gethex+0x150>
 8017a98:	1e73      	subs	r3, r6, #1
 8017a9a:	9305      	str	r3, [sp, #20]
 8017a9c:	9a07      	ldr	r2, [sp, #28]
 8017a9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017aa2:	4293      	cmp	r3, r2
 8017aa4:	d018      	beq.n	8017ad8 <__gethex+0x22e>
 8017aa6:	f1bb 0f20 	cmp.w	fp, #32
 8017aaa:	d107      	bne.n	8017abc <__gethex+0x212>
 8017aac:	9b04      	ldr	r3, [sp, #16]
 8017aae:	f8c3 a000 	str.w	sl, [r3]
 8017ab2:	3304      	adds	r3, #4
 8017ab4:	f04f 0a00 	mov.w	sl, #0
 8017ab8:	9304      	str	r3, [sp, #16]
 8017aba:	46d3      	mov	fp, sl
 8017abc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017ac0:	f7ff fede 	bl	8017880 <__hexdig_fun>
 8017ac4:	f000 000f 	and.w	r0, r0, #15
 8017ac8:	fa00 f00b 	lsl.w	r0, r0, fp
 8017acc:	ea4a 0a00 	orr.w	sl, sl, r0
 8017ad0:	f10b 0b04 	add.w	fp, fp, #4
 8017ad4:	9b05      	ldr	r3, [sp, #20]
 8017ad6:	e00d      	b.n	8017af4 <__gethex+0x24a>
 8017ad8:	9b05      	ldr	r3, [sp, #20]
 8017ada:	9a08      	ldr	r2, [sp, #32]
 8017adc:	4413      	add	r3, r2
 8017ade:	42bb      	cmp	r3, r7
 8017ae0:	d3e1      	bcc.n	8017aa6 <__gethex+0x1fc>
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	9a01      	ldr	r2, [sp, #4]
 8017ae6:	9903      	ldr	r1, [sp, #12]
 8017ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8017aea:	f000 fffb 	bl	8018ae4 <strncmp>
 8017aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017af0:	2800      	cmp	r0, #0
 8017af2:	d1d8      	bne.n	8017aa6 <__gethex+0x1fc>
 8017af4:	461e      	mov	r6, r3
 8017af6:	e791      	b.n	8017a1c <__gethex+0x172>
 8017af8:	1eb9      	subs	r1, r7, #2
 8017afa:	4628      	mov	r0, r5
 8017afc:	f000 fe02 	bl	8018704 <__any_on>
 8017b00:	2800      	cmp	r0, #0
 8017b02:	d0b2      	beq.n	8017a6a <__gethex+0x1c0>
 8017b04:	f04f 0a03 	mov.w	sl, #3
 8017b08:	e7b1      	b.n	8017a6e <__gethex+0x1c4>
 8017b0a:	da09      	bge.n	8017b20 <__gethex+0x276>
 8017b0c:	1bf7      	subs	r7, r6, r7
 8017b0e:	4629      	mov	r1, r5
 8017b10:	463a      	mov	r2, r7
 8017b12:	9802      	ldr	r0, [sp, #8]
 8017b14:	f000 fc18 	bl	8018348 <__lshift>
 8017b18:	1be4      	subs	r4, r4, r7
 8017b1a:	4605      	mov	r5, r0
 8017b1c:	f100 0914 	add.w	r9, r0, #20
 8017b20:	f04f 0a00 	mov.w	sl, #0
 8017b24:	e7a8      	b.n	8017a78 <__gethex+0x1ce>
 8017b26:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017b2a:	42a0      	cmp	r0, r4
 8017b2c:	dd6a      	ble.n	8017c04 <__gethex+0x35a>
 8017b2e:	1b04      	subs	r4, r0, r4
 8017b30:	42a6      	cmp	r6, r4
 8017b32:	dc2e      	bgt.n	8017b92 <__gethex+0x2e8>
 8017b34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017b38:	2b02      	cmp	r3, #2
 8017b3a:	d022      	beq.n	8017b82 <__gethex+0x2d8>
 8017b3c:	2b03      	cmp	r3, #3
 8017b3e:	d024      	beq.n	8017b8a <__gethex+0x2e0>
 8017b40:	2b01      	cmp	r3, #1
 8017b42:	d115      	bne.n	8017b70 <__gethex+0x2c6>
 8017b44:	42a6      	cmp	r6, r4
 8017b46:	d113      	bne.n	8017b70 <__gethex+0x2c6>
 8017b48:	2e01      	cmp	r6, #1
 8017b4a:	dc0b      	bgt.n	8017b64 <__gethex+0x2ba>
 8017b4c:	9a06      	ldr	r2, [sp, #24]
 8017b4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017b52:	6013      	str	r3, [r2, #0]
 8017b54:	2301      	movs	r3, #1
 8017b56:	612b      	str	r3, [r5, #16]
 8017b58:	f8c9 3000 	str.w	r3, [r9]
 8017b5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017b5e:	2762      	movs	r7, #98	; 0x62
 8017b60:	601d      	str	r5, [r3, #0]
 8017b62:	e72a      	b.n	80179ba <__gethex+0x110>
 8017b64:	1e71      	subs	r1, r6, #1
 8017b66:	4628      	mov	r0, r5
 8017b68:	f000 fdcc 	bl	8018704 <__any_on>
 8017b6c:	2800      	cmp	r0, #0
 8017b6e:	d1ed      	bne.n	8017b4c <__gethex+0x2a2>
 8017b70:	4629      	mov	r1, r5
 8017b72:	9802      	ldr	r0, [sp, #8]
 8017b74:	f000 fa1d 	bl	8017fb2 <_Bfree>
 8017b78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	6013      	str	r3, [r2, #0]
 8017b7e:	2750      	movs	r7, #80	; 0x50
 8017b80:	e71b      	b.n	80179ba <__gethex+0x110>
 8017b82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d0e1      	beq.n	8017b4c <__gethex+0x2a2>
 8017b88:	e7f2      	b.n	8017b70 <__gethex+0x2c6>
 8017b8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d1dd      	bne.n	8017b4c <__gethex+0x2a2>
 8017b90:	e7ee      	b.n	8017b70 <__gethex+0x2c6>
 8017b92:	1e67      	subs	r7, r4, #1
 8017b94:	f1ba 0f00 	cmp.w	sl, #0
 8017b98:	d131      	bne.n	8017bfe <__gethex+0x354>
 8017b9a:	b127      	cbz	r7, 8017ba6 <__gethex+0x2fc>
 8017b9c:	4639      	mov	r1, r7
 8017b9e:	4628      	mov	r0, r5
 8017ba0:	f000 fdb0 	bl	8018704 <__any_on>
 8017ba4:	4682      	mov	sl, r0
 8017ba6:	117a      	asrs	r2, r7, #5
 8017ba8:	2301      	movs	r3, #1
 8017baa:	f007 071f 	and.w	r7, r7, #31
 8017bae:	fa03 f707 	lsl.w	r7, r3, r7
 8017bb2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017bb6:	4621      	mov	r1, r4
 8017bb8:	421f      	tst	r7, r3
 8017bba:	4628      	mov	r0, r5
 8017bbc:	bf18      	it	ne
 8017bbe:	f04a 0a02 	orrne.w	sl, sl, #2
 8017bc2:	1b36      	subs	r6, r6, r4
 8017bc4:	f7ff fe22 	bl	801780c <rshift>
 8017bc8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017bcc:	2702      	movs	r7, #2
 8017bce:	f1ba 0f00 	cmp.w	sl, #0
 8017bd2:	d048      	beq.n	8017c66 <__gethex+0x3bc>
 8017bd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017bd8:	2b02      	cmp	r3, #2
 8017bda:	d015      	beq.n	8017c08 <__gethex+0x35e>
 8017bdc:	2b03      	cmp	r3, #3
 8017bde:	d017      	beq.n	8017c10 <__gethex+0x366>
 8017be0:	2b01      	cmp	r3, #1
 8017be2:	d109      	bne.n	8017bf8 <__gethex+0x34e>
 8017be4:	f01a 0f02 	tst.w	sl, #2
 8017be8:	d006      	beq.n	8017bf8 <__gethex+0x34e>
 8017bea:	f8d9 3000 	ldr.w	r3, [r9]
 8017bee:	ea4a 0a03 	orr.w	sl, sl, r3
 8017bf2:	f01a 0f01 	tst.w	sl, #1
 8017bf6:	d10e      	bne.n	8017c16 <__gethex+0x36c>
 8017bf8:	f047 0710 	orr.w	r7, r7, #16
 8017bfc:	e033      	b.n	8017c66 <__gethex+0x3bc>
 8017bfe:	f04f 0a01 	mov.w	sl, #1
 8017c02:	e7d0      	b.n	8017ba6 <__gethex+0x2fc>
 8017c04:	2701      	movs	r7, #1
 8017c06:	e7e2      	b.n	8017bce <__gethex+0x324>
 8017c08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c0a:	f1c3 0301 	rsb	r3, r3, #1
 8017c0e:	9315      	str	r3, [sp, #84]	; 0x54
 8017c10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d0f0      	beq.n	8017bf8 <__gethex+0x34e>
 8017c16:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017c1a:	f105 0314 	add.w	r3, r5, #20
 8017c1e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017c22:	eb03 010a 	add.w	r1, r3, sl
 8017c26:	f04f 0c00 	mov.w	ip, #0
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c30:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017c34:	d01c      	beq.n	8017c70 <__gethex+0x3c6>
 8017c36:	3201      	adds	r2, #1
 8017c38:	6002      	str	r2, [r0, #0]
 8017c3a:	2f02      	cmp	r7, #2
 8017c3c:	f105 0314 	add.w	r3, r5, #20
 8017c40:	d138      	bne.n	8017cb4 <__gethex+0x40a>
 8017c42:	f8d8 2000 	ldr.w	r2, [r8]
 8017c46:	3a01      	subs	r2, #1
 8017c48:	42b2      	cmp	r2, r6
 8017c4a:	d10a      	bne.n	8017c62 <__gethex+0x3b8>
 8017c4c:	1171      	asrs	r1, r6, #5
 8017c4e:	2201      	movs	r2, #1
 8017c50:	f006 061f 	and.w	r6, r6, #31
 8017c54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017c58:	fa02 f606 	lsl.w	r6, r2, r6
 8017c5c:	421e      	tst	r6, r3
 8017c5e:	bf18      	it	ne
 8017c60:	4617      	movne	r7, r2
 8017c62:	f047 0720 	orr.w	r7, r7, #32
 8017c66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017c68:	601d      	str	r5, [r3, #0]
 8017c6a:	9b06      	ldr	r3, [sp, #24]
 8017c6c:	601c      	str	r4, [r3, #0]
 8017c6e:	e6a4      	b.n	80179ba <__gethex+0x110>
 8017c70:	4299      	cmp	r1, r3
 8017c72:	f843 cc04 	str.w	ip, [r3, #-4]
 8017c76:	d8d8      	bhi.n	8017c2a <__gethex+0x380>
 8017c78:	68ab      	ldr	r3, [r5, #8]
 8017c7a:	4599      	cmp	r9, r3
 8017c7c:	db12      	blt.n	8017ca4 <__gethex+0x3fa>
 8017c7e:	6869      	ldr	r1, [r5, #4]
 8017c80:	9802      	ldr	r0, [sp, #8]
 8017c82:	3101      	adds	r1, #1
 8017c84:	f000 f961 	bl	8017f4a <_Balloc>
 8017c88:	692a      	ldr	r2, [r5, #16]
 8017c8a:	3202      	adds	r2, #2
 8017c8c:	f105 010c 	add.w	r1, r5, #12
 8017c90:	4683      	mov	fp, r0
 8017c92:	0092      	lsls	r2, r2, #2
 8017c94:	300c      	adds	r0, #12
 8017c96:	f7fb ff91 	bl	8013bbc <memcpy>
 8017c9a:	4629      	mov	r1, r5
 8017c9c:	9802      	ldr	r0, [sp, #8]
 8017c9e:	f000 f988 	bl	8017fb2 <_Bfree>
 8017ca2:	465d      	mov	r5, fp
 8017ca4:	692b      	ldr	r3, [r5, #16]
 8017ca6:	1c5a      	adds	r2, r3, #1
 8017ca8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017cac:	612a      	str	r2, [r5, #16]
 8017cae:	2201      	movs	r2, #1
 8017cb0:	615a      	str	r2, [r3, #20]
 8017cb2:	e7c2      	b.n	8017c3a <__gethex+0x390>
 8017cb4:	692a      	ldr	r2, [r5, #16]
 8017cb6:	454a      	cmp	r2, r9
 8017cb8:	dd0b      	ble.n	8017cd2 <__gethex+0x428>
 8017cba:	2101      	movs	r1, #1
 8017cbc:	4628      	mov	r0, r5
 8017cbe:	f7ff fda5 	bl	801780c <rshift>
 8017cc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017cc6:	3401      	adds	r4, #1
 8017cc8:	42a3      	cmp	r3, r4
 8017cca:	f6ff aed9 	blt.w	8017a80 <__gethex+0x1d6>
 8017cce:	2701      	movs	r7, #1
 8017cd0:	e7c7      	b.n	8017c62 <__gethex+0x3b8>
 8017cd2:	f016 061f 	ands.w	r6, r6, #31
 8017cd6:	d0fa      	beq.n	8017cce <__gethex+0x424>
 8017cd8:	449a      	add	sl, r3
 8017cda:	f1c6 0620 	rsb	r6, r6, #32
 8017cde:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017ce2:	f000 f9f6 	bl	80180d2 <__hi0bits>
 8017ce6:	42b0      	cmp	r0, r6
 8017ce8:	dbe7      	blt.n	8017cba <__gethex+0x410>
 8017cea:	e7f0      	b.n	8017cce <__gethex+0x424>

08017cec <L_shift>:
 8017cec:	f1c2 0208 	rsb	r2, r2, #8
 8017cf0:	0092      	lsls	r2, r2, #2
 8017cf2:	b570      	push	{r4, r5, r6, lr}
 8017cf4:	f1c2 0620 	rsb	r6, r2, #32
 8017cf8:	6843      	ldr	r3, [r0, #4]
 8017cfa:	6804      	ldr	r4, [r0, #0]
 8017cfc:	fa03 f506 	lsl.w	r5, r3, r6
 8017d00:	432c      	orrs	r4, r5
 8017d02:	40d3      	lsrs	r3, r2
 8017d04:	6004      	str	r4, [r0, #0]
 8017d06:	f840 3f04 	str.w	r3, [r0, #4]!
 8017d0a:	4288      	cmp	r0, r1
 8017d0c:	d3f4      	bcc.n	8017cf8 <L_shift+0xc>
 8017d0e:	bd70      	pop	{r4, r5, r6, pc}

08017d10 <__match>:
 8017d10:	b530      	push	{r4, r5, lr}
 8017d12:	6803      	ldr	r3, [r0, #0]
 8017d14:	3301      	adds	r3, #1
 8017d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d1a:	b914      	cbnz	r4, 8017d22 <__match+0x12>
 8017d1c:	6003      	str	r3, [r0, #0]
 8017d1e:	2001      	movs	r0, #1
 8017d20:	bd30      	pop	{r4, r5, pc}
 8017d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017d2a:	2d19      	cmp	r5, #25
 8017d2c:	bf98      	it	ls
 8017d2e:	3220      	addls	r2, #32
 8017d30:	42a2      	cmp	r2, r4
 8017d32:	d0f0      	beq.n	8017d16 <__match+0x6>
 8017d34:	2000      	movs	r0, #0
 8017d36:	e7f3      	b.n	8017d20 <__match+0x10>

08017d38 <__hexnan>:
 8017d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d3c:	680b      	ldr	r3, [r1, #0]
 8017d3e:	6801      	ldr	r1, [r0, #0]
 8017d40:	115f      	asrs	r7, r3, #5
 8017d42:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017d46:	f013 031f 	ands.w	r3, r3, #31
 8017d4a:	b087      	sub	sp, #28
 8017d4c:	bf18      	it	ne
 8017d4e:	3704      	addne	r7, #4
 8017d50:	2500      	movs	r5, #0
 8017d52:	1f3e      	subs	r6, r7, #4
 8017d54:	4682      	mov	sl, r0
 8017d56:	4690      	mov	r8, r2
 8017d58:	9301      	str	r3, [sp, #4]
 8017d5a:	f847 5c04 	str.w	r5, [r7, #-4]
 8017d5e:	46b1      	mov	r9, r6
 8017d60:	4634      	mov	r4, r6
 8017d62:	9502      	str	r5, [sp, #8]
 8017d64:	46ab      	mov	fp, r5
 8017d66:	784a      	ldrb	r2, [r1, #1]
 8017d68:	1c4b      	adds	r3, r1, #1
 8017d6a:	9303      	str	r3, [sp, #12]
 8017d6c:	b342      	cbz	r2, 8017dc0 <__hexnan+0x88>
 8017d6e:	4610      	mov	r0, r2
 8017d70:	9105      	str	r1, [sp, #20]
 8017d72:	9204      	str	r2, [sp, #16]
 8017d74:	f7ff fd84 	bl	8017880 <__hexdig_fun>
 8017d78:	2800      	cmp	r0, #0
 8017d7a:	d143      	bne.n	8017e04 <__hexnan+0xcc>
 8017d7c:	9a04      	ldr	r2, [sp, #16]
 8017d7e:	9905      	ldr	r1, [sp, #20]
 8017d80:	2a20      	cmp	r2, #32
 8017d82:	d818      	bhi.n	8017db6 <__hexnan+0x7e>
 8017d84:	9b02      	ldr	r3, [sp, #8]
 8017d86:	459b      	cmp	fp, r3
 8017d88:	dd13      	ble.n	8017db2 <__hexnan+0x7a>
 8017d8a:	454c      	cmp	r4, r9
 8017d8c:	d206      	bcs.n	8017d9c <__hexnan+0x64>
 8017d8e:	2d07      	cmp	r5, #7
 8017d90:	dc04      	bgt.n	8017d9c <__hexnan+0x64>
 8017d92:	462a      	mov	r2, r5
 8017d94:	4649      	mov	r1, r9
 8017d96:	4620      	mov	r0, r4
 8017d98:	f7ff ffa8 	bl	8017cec <L_shift>
 8017d9c:	4544      	cmp	r4, r8
 8017d9e:	d944      	bls.n	8017e2a <__hexnan+0xf2>
 8017da0:	2300      	movs	r3, #0
 8017da2:	f1a4 0904 	sub.w	r9, r4, #4
 8017da6:	f844 3c04 	str.w	r3, [r4, #-4]
 8017daa:	f8cd b008 	str.w	fp, [sp, #8]
 8017dae:	464c      	mov	r4, r9
 8017db0:	461d      	mov	r5, r3
 8017db2:	9903      	ldr	r1, [sp, #12]
 8017db4:	e7d7      	b.n	8017d66 <__hexnan+0x2e>
 8017db6:	2a29      	cmp	r2, #41	; 0x29
 8017db8:	d14a      	bne.n	8017e50 <__hexnan+0x118>
 8017dba:	3102      	adds	r1, #2
 8017dbc:	f8ca 1000 	str.w	r1, [sl]
 8017dc0:	f1bb 0f00 	cmp.w	fp, #0
 8017dc4:	d044      	beq.n	8017e50 <__hexnan+0x118>
 8017dc6:	454c      	cmp	r4, r9
 8017dc8:	d206      	bcs.n	8017dd8 <__hexnan+0xa0>
 8017dca:	2d07      	cmp	r5, #7
 8017dcc:	dc04      	bgt.n	8017dd8 <__hexnan+0xa0>
 8017dce:	462a      	mov	r2, r5
 8017dd0:	4649      	mov	r1, r9
 8017dd2:	4620      	mov	r0, r4
 8017dd4:	f7ff ff8a 	bl	8017cec <L_shift>
 8017dd8:	4544      	cmp	r4, r8
 8017dda:	d928      	bls.n	8017e2e <__hexnan+0xf6>
 8017ddc:	4643      	mov	r3, r8
 8017dde:	f854 2b04 	ldr.w	r2, [r4], #4
 8017de2:	f843 2b04 	str.w	r2, [r3], #4
 8017de6:	42a6      	cmp	r6, r4
 8017de8:	d2f9      	bcs.n	8017dde <__hexnan+0xa6>
 8017dea:	2200      	movs	r2, #0
 8017dec:	f843 2b04 	str.w	r2, [r3], #4
 8017df0:	429e      	cmp	r6, r3
 8017df2:	d2fb      	bcs.n	8017dec <__hexnan+0xb4>
 8017df4:	6833      	ldr	r3, [r6, #0]
 8017df6:	b91b      	cbnz	r3, 8017e00 <__hexnan+0xc8>
 8017df8:	4546      	cmp	r6, r8
 8017dfa:	d127      	bne.n	8017e4c <__hexnan+0x114>
 8017dfc:	2301      	movs	r3, #1
 8017dfe:	6033      	str	r3, [r6, #0]
 8017e00:	2005      	movs	r0, #5
 8017e02:	e026      	b.n	8017e52 <__hexnan+0x11a>
 8017e04:	3501      	adds	r5, #1
 8017e06:	2d08      	cmp	r5, #8
 8017e08:	f10b 0b01 	add.w	fp, fp, #1
 8017e0c:	dd06      	ble.n	8017e1c <__hexnan+0xe4>
 8017e0e:	4544      	cmp	r4, r8
 8017e10:	d9cf      	bls.n	8017db2 <__hexnan+0x7a>
 8017e12:	2300      	movs	r3, #0
 8017e14:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e18:	2501      	movs	r5, #1
 8017e1a:	3c04      	subs	r4, #4
 8017e1c:	6822      	ldr	r2, [r4, #0]
 8017e1e:	f000 000f 	and.w	r0, r0, #15
 8017e22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017e26:	6020      	str	r0, [r4, #0]
 8017e28:	e7c3      	b.n	8017db2 <__hexnan+0x7a>
 8017e2a:	2508      	movs	r5, #8
 8017e2c:	e7c1      	b.n	8017db2 <__hexnan+0x7a>
 8017e2e:	9b01      	ldr	r3, [sp, #4]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d0df      	beq.n	8017df4 <__hexnan+0xbc>
 8017e34:	f04f 32ff 	mov.w	r2, #4294967295
 8017e38:	f1c3 0320 	rsb	r3, r3, #32
 8017e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8017e40:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017e44:	401a      	ands	r2, r3
 8017e46:	f847 2c04 	str.w	r2, [r7, #-4]
 8017e4a:	e7d3      	b.n	8017df4 <__hexnan+0xbc>
 8017e4c:	3e04      	subs	r6, #4
 8017e4e:	e7d1      	b.n	8017df4 <__hexnan+0xbc>
 8017e50:	2004      	movs	r0, #4
 8017e52:	b007      	add	sp, #28
 8017e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017e58 <_isatty_r>:
 8017e58:	b538      	push	{r3, r4, r5, lr}
 8017e5a:	4c06      	ldr	r4, [pc, #24]	; (8017e74 <_isatty_r+0x1c>)
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	4605      	mov	r5, r0
 8017e60:	4608      	mov	r0, r1
 8017e62:	6023      	str	r3, [r4, #0]
 8017e64:	f7f5 f9f7 	bl	800d256 <_isatty>
 8017e68:	1c43      	adds	r3, r0, #1
 8017e6a:	d102      	bne.n	8017e72 <_isatty_r+0x1a>
 8017e6c:	6823      	ldr	r3, [r4, #0]
 8017e6e:	b103      	cbz	r3, 8017e72 <_isatty_r+0x1a>
 8017e70:	602b      	str	r3, [r5, #0]
 8017e72:	bd38      	pop	{r3, r4, r5, pc}
 8017e74:	20008f48 	.word	0x20008f48

08017e78 <__locale_ctype_ptr_l>:
 8017e78:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017e7c:	4770      	bx	lr
	...

08017e80 <__locale_ctype_ptr>:
 8017e80:	4b04      	ldr	r3, [pc, #16]	; (8017e94 <__locale_ctype_ptr+0x14>)
 8017e82:	4a05      	ldr	r2, [pc, #20]	; (8017e98 <__locale_ctype_ptr+0x18>)
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	6a1b      	ldr	r3, [r3, #32]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	bf08      	it	eq
 8017e8c:	4613      	moveq	r3, r2
 8017e8e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017e92:	4770      	bx	lr
 8017e94:	20000038 	.word	0x20000038
 8017e98:	2000009c 	.word	0x2000009c

08017e9c <__localeconv_l>:
 8017e9c:	30f0      	adds	r0, #240	; 0xf0
 8017e9e:	4770      	bx	lr

08017ea0 <_localeconv_r>:
 8017ea0:	4b04      	ldr	r3, [pc, #16]	; (8017eb4 <_localeconv_r+0x14>)
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	6a18      	ldr	r0, [r3, #32]
 8017ea6:	4b04      	ldr	r3, [pc, #16]	; (8017eb8 <_localeconv_r+0x18>)
 8017ea8:	2800      	cmp	r0, #0
 8017eaa:	bf08      	it	eq
 8017eac:	4618      	moveq	r0, r3
 8017eae:	30f0      	adds	r0, #240	; 0xf0
 8017eb0:	4770      	bx	lr
 8017eb2:	bf00      	nop
 8017eb4:	20000038 	.word	0x20000038
 8017eb8:	2000009c 	.word	0x2000009c

08017ebc <_lseek_r>:
 8017ebc:	b538      	push	{r3, r4, r5, lr}
 8017ebe:	4c07      	ldr	r4, [pc, #28]	; (8017edc <_lseek_r+0x20>)
 8017ec0:	4605      	mov	r5, r0
 8017ec2:	4608      	mov	r0, r1
 8017ec4:	4611      	mov	r1, r2
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	6022      	str	r2, [r4, #0]
 8017eca:	461a      	mov	r2, r3
 8017ecc:	f7f5 f9ce 	bl	800d26c <_lseek>
 8017ed0:	1c43      	adds	r3, r0, #1
 8017ed2:	d102      	bne.n	8017eda <_lseek_r+0x1e>
 8017ed4:	6823      	ldr	r3, [r4, #0]
 8017ed6:	b103      	cbz	r3, 8017eda <_lseek_r+0x1e>
 8017ed8:	602b      	str	r3, [r5, #0]
 8017eda:	bd38      	pop	{r3, r4, r5, pc}
 8017edc:	20008f48 	.word	0x20008f48

08017ee0 <malloc>:
 8017ee0:	4b02      	ldr	r3, [pc, #8]	; (8017eec <malloc+0xc>)
 8017ee2:	4601      	mov	r1, r0
 8017ee4:	6818      	ldr	r0, [r3, #0]
 8017ee6:	f7fb becb 	b.w	8013c80 <_malloc_r>
 8017eea:	bf00      	nop
 8017eec:	20000038 	.word	0x20000038

08017ef0 <__ascii_mbtowc>:
 8017ef0:	b082      	sub	sp, #8
 8017ef2:	b901      	cbnz	r1, 8017ef6 <__ascii_mbtowc+0x6>
 8017ef4:	a901      	add	r1, sp, #4
 8017ef6:	b142      	cbz	r2, 8017f0a <__ascii_mbtowc+0x1a>
 8017ef8:	b14b      	cbz	r3, 8017f0e <__ascii_mbtowc+0x1e>
 8017efa:	7813      	ldrb	r3, [r2, #0]
 8017efc:	600b      	str	r3, [r1, #0]
 8017efe:	7812      	ldrb	r2, [r2, #0]
 8017f00:	1c10      	adds	r0, r2, #0
 8017f02:	bf18      	it	ne
 8017f04:	2001      	movne	r0, #1
 8017f06:	b002      	add	sp, #8
 8017f08:	4770      	bx	lr
 8017f0a:	4610      	mov	r0, r2
 8017f0c:	e7fb      	b.n	8017f06 <__ascii_mbtowc+0x16>
 8017f0e:	f06f 0001 	mvn.w	r0, #1
 8017f12:	e7f8      	b.n	8017f06 <__ascii_mbtowc+0x16>

08017f14 <memmove>:
 8017f14:	4288      	cmp	r0, r1
 8017f16:	b510      	push	{r4, lr}
 8017f18:	eb01 0302 	add.w	r3, r1, r2
 8017f1c:	d807      	bhi.n	8017f2e <memmove+0x1a>
 8017f1e:	1e42      	subs	r2, r0, #1
 8017f20:	4299      	cmp	r1, r3
 8017f22:	d00a      	beq.n	8017f3a <memmove+0x26>
 8017f24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f28:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017f2c:	e7f8      	b.n	8017f20 <memmove+0xc>
 8017f2e:	4283      	cmp	r3, r0
 8017f30:	d9f5      	bls.n	8017f1e <memmove+0xa>
 8017f32:	1881      	adds	r1, r0, r2
 8017f34:	1ad2      	subs	r2, r2, r3
 8017f36:	42d3      	cmn	r3, r2
 8017f38:	d100      	bne.n	8017f3c <memmove+0x28>
 8017f3a:	bd10      	pop	{r4, pc}
 8017f3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017f40:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017f44:	e7f7      	b.n	8017f36 <memmove+0x22>

08017f46 <__malloc_lock>:
 8017f46:	4770      	bx	lr

08017f48 <__malloc_unlock>:
 8017f48:	4770      	bx	lr

08017f4a <_Balloc>:
 8017f4a:	b570      	push	{r4, r5, r6, lr}
 8017f4c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017f4e:	4604      	mov	r4, r0
 8017f50:	460e      	mov	r6, r1
 8017f52:	b93d      	cbnz	r5, 8017f64 <_Balloc+0x1a>
 8017f54:	2010      	movs	r0, #16
 8017f56:	f7ff ffc3 	bl	8017ee0 <malloc>
 8017f5a:	6260      	str	r0, [r4, #36]	; 0x24
 8017f5c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017f60:	6005      	str	r5, [r0, #0]
 8017f62:	60c5      	str	r5, [r0, #12]
 8017f64:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017f66:	68eb      	ldr	r3, [r5, #12]
 8017f68:	b183      	cbz	r3, 8017f8c <_Balloc+0x42>
 8017f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f6c:	68db      	ldr	r3, [r3, #12]
 8017f6e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017f72:	b9b8      	cbnz	r0, 8017fa4 <_Balloc+0x5a>
 8017f74:	2101      	movs	r1, #1
 8017f76:	fa01 f506 	lsl.w	r5, r1, r6
 8017f7a:	1d6a      	adds	r2, r5, #5
 8017f7c:	0092      	lsls	r2, r2, #2
 8017f7e:	4620      	mov	r0, r4
 8017f80:	f000 fbe1 	bl	8018746 <_calloc_r>
 8017f84:	b160      	cbz	r0, 8017fa0 <_Balloc+0x56>
 8017f86:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017f8a:	e00e      	b.n	8017faa <_Balloc+0x60>
 8017f8c:	2221      	movs	r2, #33	; 0x21
 8017f8e:	2104      	movs	r1, #4
 8017f90:	4620      	mov	r0, r4
 8017f92:	f000 fbd8 	bl	8018746 <_calloc_r>
 8017f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f98:	60e8      	str	r0, [r5, #12]
 8017f9a:	68db      	ldr	r3, [r3, #12]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d1e4      	bne.n	8017f6a <_Balloc+0x20>
 8017fa0:	2000      	movs	r0, #0
 8017fa2:	bd70      	pop	{r4, r5, r6, pc}
 8017fa4:	6802      	ldr	r2, [r0, #0]
 8017fa6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017faa:	2300      	movs	r3, #0
 8017fac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017fb0:	e7f7      	b.n	8017fa2 <_Balloc+0x58>

08017fb2 <_Bfree>:
 8017fb2:	b570      	push	{r4, r5, r6, lr}
 8017fb4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017fb6:	4606      	mov	r6, r0
 8017fb8:	460d      	mov	r5, r1
 8017fba:	b93c      	cbnz	r4, 8017fcc <_Bfree+0x1a>
 8017fbc:	2010      	movs	r0, #16
 8017fbe:	f7ff ff8f 	bl	8017ee0 <malloc>
 8017fc2:	6270      	str	r0, [r6, #36]	; 0x24
 8017fc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017fc8:	6004      	str	r4, [r0, #0]
 8017fca:	60c4      	str	r4, [r0, #12]
 8017fcc:	b13d      	cbz	r5, 8017fde <_Bfree+0x2c>
 8017fce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017fd0:	686a      	ldr	r2, [r5, #4]
 8017fd2:	68db      	ldr	r3, [r3, #12]
 8017fd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017fd8:	6029      	str	r1, [r5, #0]
 8017fda:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017fde:	bd70      	pop	{r4, r5, r6, pc}

08017fe0 <__multadd>:
 8017fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fe4:	690d      	ldr	r5, [r1, #16]
 8017fe6:	461f      	mov	r7, r3
 8017fe8:	4606      	mov	r6, r0
 8017fea:	460c      	mov	r4, r1
 8017fec:	f101 0c14 	add.w	ip, r1, #20
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	f8dc 0000 	ldr.w	r0, [ip]
 8017ff6:	b281      	uxth	r1, r0
 8017ff8:	fb02 7101 	mla	r1, r2, r1, r7
 8017ffc:	0c0f      	lsrs	r7, r1, #16
 8017ffe:	0c00      	lsrs	r0, r0, #16
 8018000:	fb02 7000 	mla	r0, r2, r0, r7
 8018004:	b289      	uxth	r1, r1
 8018006:	3301      	adds	r3, #1
 8018008:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801800c:	429d      	cmp	r5, r3
 801800e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018012:	f84c 1b04 	str.w	r1, [ip], #4
 8018016:	dcec      	bgt.n	8017ff2 <__multadd+0x12>
 8018018:	b1d7      	cbz	r7, 8018050 <__multadd+0x70>
 801801a:	68a3      	ldr	r3, [r4, #8]
 801801c:	42ab      	cmp	r3, r5
 801801e:	dc12      	bgt.n	8018046 <__multadd+0x66>
 8018020:	6861      	ldr	r1, [r4, #4]
 8018022:	4630      	mov	r0, r6
 8018024:	3101      	adds	r1, #1
 8018026:	f7ff ff90 	bl	8017f4a <_Balloc>
 801802a:	6922      	ldr	r2, [r4, #16]
 801802c:	3202      	adds	r2, #2
 801802e:	f104 010c 	add.w	r1, r4, #12
 8018032:	4680      	mov	r8, r0
 8018034:	0092      	lsls	r2, r2, #2
 8018036:	300c      	adds	r0, #12
 8018038:	f7fb fdc0 	bl	8013bbc <memcpy>
 801803c:	4621      	mov	r1, r4
 801803e:	4630      	mov	r0, r6
 8018040:	f7ff ffb7 	bl	8017fb2 <_Bfree>
 8018044:	4644      	mov	r4, r8
 8018046:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801804a:	3501      	adds	r5, #1
 801804c:	615f      	str	r7, [r3, #20]
 801804e:	6125      	str	r5, [r4, #16]
 8018050:	4620      	mov	r0, r4
 8018052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018056 <__s2b>:
 8018056:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801805a:	460c      	mov	r4, r1
 801805c:	4615      	mov	r5, r2
 801805e:	461f      	mov	r7, r3
 8018060:	2209      	movs	r2, #9
 8018062:	3308      	adds	r3, #8
 8018064:	4606      	mov	r6, r0
 8018066:	fb93 f3f2 	sdiv	r3, r3, r2
 801806a:	2100      	movs	r1, #0
 801806c:	2201      	movs	r2, #1
 801806e:	429a      	cmp	r2, r3
 8018070:	db20      	blt.n	80180b4 <__s2b+0x5e>
 8018072:	4630      	mov	r0, r6
 8018074:	f7ff ff69 	bl	8017f4a <_Balloc>
 8018078:	9b08      	ldr	r3, [sp, #32]
 801807a:	6143      	str	r3, [r0, #20]
 801807c:	2d09      	cmp	r5, #9
 801807e:	f04f 0301 	mov.w	r3, #1
 8018082:	6103      	str	r3, [r0, #16]
 8018084:	dd19      	ble.n	80180ba <__s2b+0x64>
 8018086:	f104 0809 	add.w	r8, r4, #9
 801808a:	46c1      	mov	r9, r8
 801808c:	442c      	add	r4, r5
 801808e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018092:	4601      	mov	r1, r0
 8018094:	3b30      	subs	r3, #48	; 0x30
 8018096:	220a      	movs	r2, #10
 8018098:	4630      	mov	r0, r6
 801809a:	f7ff ffa1 	bl	8017fe0 <__multadd>
 801809e:	45a1      	cmp	r9, r4
 80180a0:	d1f5      	bne.n	801808e <__s2b+0x38>
 80180a2:	eb08 0405 	add.w	r4, r8, r5
 80180a6:	3c08      	subs	r4, #8
 80180a8:	1b2d      	subs	r5, r5, r4
 80180aa:	1963      	adds	r3, r4, r5
 80180ac:	42bb      	cmp	r3, r7
 80180ae:	db07      	blt.n	80180c0 <__s2b+0x6a>
 80180b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180b4:	0052      	lsls	r2, r2, #1
 80180b6:	3101      	adds	r1, #1
 80180b8:	e7d9      	b.n	801806e <__s2b+0x18>
 80180ba:	340a      	adds	r4, #10
 80180bc:	2509      	movs	r5, #9
 80180be:	e7f3      	b.n	80180a8 <__s2b+0x52>
 80180c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80180c4:	4601      	mov	r1, r0
 80180c6:	3b30      	subs	r3, #48	; 0x30
 80180c8:	220a      	movs	r2, #10
 80180ca:	4630      	mov	r0, r6
 80180cc:	f7ff ff88 	bl	8017fe0 <__multadd>
 80180d0:	e7eb      	b.n	80180aa <__s2b+0x54>

080180d2 <__hi0bits>:
 80180d2:	0c02      	lsrs	r2, r0, #16
 80180d4:	0412      	lsls	r2, r2, #16
 80180d6:	4603      	mov	r3, r0
 80180d8:	b9b2      	cbnz	r2, 8018108 <__hi0bits+0x36>
 80180da:	0403      	lsls	r3, r0, #16
 80180dc:	2010      	movs	r0, #16
 80180de:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80180e2:	bf04      	itt	eq
 80180e4:	021b      	lsleq	r3, r3, #8
 80180e6:	3008      	addeq	r0, #8
 80180e8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80180ec:	bf04      	itt	eq
 80180ee:	011b      	lsleq	r3, r3, #4
 80180f0:	3004      	addeq	r0, #4
 80180f2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80180f6:	bf04      	itt	eq
 80180f8:	009b      	lsleq	r3, r3, #2
 80180fa:	3002      	addeq	r0, #2
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	db06      	blt.n	801810e <__hi0bits+0x3c>
 8018100:	005b      	lsls	r3, r3, #1
 8018102:	d503      	bpl.n	801810c <__hi0bits+0x3a>
 8018104:	3001      	adds	r0, #1
 8018106:	4770      	bx	lr
 8018108:	2000      	movs	r0, #0
 801810a:	e7e8      	b.n	80180de <__hi0bits+0xc>
 801810c:	2020      	movs	r0, #32
 801810e:	4770      	bx	lr

08018110 <__lo0bits>:
 8018110:	6803      	ldr	r3, [r0, #0]
 8018112:	f013 0207 	ands.w	r2, r3, #7
 8018116:	4601      	mov	r1, r0
 8018118:	d00b      	beq.n	8018132 <__lo0bits+0x22>
 801811a:	07da      	lsls	r2, r3, #31
 801811c:	d423      	bmi.n	8018166 <__lo0bits+0x56>
 801811e:	0798      	lsls	r0, r3, #30
 8018120:	bf49      	itett	mi
 8018122:	085b      	lsrmi	r3, r3, #1
 8018124:	089b      	lsrpl	r3, r3, #2
 8018126:	2001      	movmi	r0, #1
 8018128:	600b      	strmi	r3, [r1, #0]
 801812a:	bf5c      	itt	pl
 801812c:	600b      	strpl	r3, [r1, #0]
 801812e:	2002      	movpl	r0, #2
 8018130:	4770      	bx	lr
 8018132:	b298      	uxth	r0, r3
 8018134:	b9a8      	cbnz	r0, 8018162 <__lo0bits+0x52>
 8018136:	0c1b      	lsrs	r3, r3, #16
 8018138:	2010      	movs	r0, #16
 801813a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801813e:	bf04      	itt	eq
 8018140:	0a1b      	lsreq	r3, r3, #8
 8018142:	3008      	addeq	r0, #8
 8018144:	071a      	lsls	r2, r3, #28
 8018146:	bf04      	itt	eq
 8018148:	091b      	lsreq	r3, r3, #4
 801814a:	3004      	addeq	r0, #4
 801814c:	079a      	lsls	r2, r3, #30
 801814e:	bf04      	itt	eq
 8018150:	089b      	lsreq	r3, r3, #2
 8018152:	3002      	addeq	r0, #2
 8018154:	07da      	lsls	r2, r3, #31
 8018156:	d402      	bmi.n	801815e <__lo0bits+0x4e>
 8018158:	085b      	lsrs	r3, r3, #1
 801815a:	d006      	beq.n	801816a <__lo0bits+0x5a>
 801815c:	3001      	adds	r0, #1
 801815e:	600b      	str	r3, [r1, #0]
 8018160:	4770      	bx	lr
 8018162:	4610      	mov	r0, r2
 8018164:	e7e9      	b.n	801813a <__lo0bits+0x2a>
 8018166:	2000      	movs	r0, #0
 8018168:	4770      	bx	lr
 801816a:	2020      	movs	r0, #32
 801816c:	4770      	bx	lr

0801816e <__i2b>:
 801816e:	b510      	push	{r4, lr}
 8018170:	460c      	mov	r4, r1
 8018172:	2101      	movs	r1, #1
 8018174:	f7ff fee9 	bl	8017f4a <_Balloc>
 8018178:	2201      	movs	r2, #1
 801817a:	6144      	str	r4, [r0, #20]
 801817c:	6102      	str	r2, [r0, #16]
 801817e:	bd10      	pop	{r4, pc}

08018180 <__multiply>:
 8018180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018184:	4614      	mov	r4, r2
 8018186:	690a      	ldr	r2, [r1, #16]
 8018188:	6923      	ldr	r3, [r4, #16]
 801818a:	429a      	cmp	r2, r3
 801818c:	bfb8      	it	lt
 801818e:	460b      	movlt	r3, r1
 8018190:	4688      	mov	r8, r1
 8018192:	bfbc      	itt	lt
 8018194:	46a0      	movlt	r8, r4
 8018196:	461c      	movlt	r4, r3
 8018198:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801819c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80181a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80181a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80181a8:	eb07 0609 	add.w	r6, r7, r9
 80181ac:	42b3      	cmp	r3, r6
 80181ae:	bfb8      	it	lt
 80181b0:	3101      	addlt	r1, #1
 80181b2:	f7ff feca 	bl	8017f4a <_Balloc>
 80181b6:	f100 0514 	add.w	r5, r0, #20
 80181ba:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80181be:	462b      	mov	r3, r5
 80181c0:	2200      	movs	r2, #0
 80181c2:	4573      	cmp	r3, lr
 80181c4:	d316      	bcc.n	80181f4 <__multiply+0x74>
 80181c6:	f104 0214 	add.w	r2, r4, #20
 80181ca:	f108 0114 	add.w	r1, r8, #20
 80181ce:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80181d2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80181d6:	9300      	str	r3, [sp, #0]
 80181d8:	9b00      	ldr	r3, [sp, #0]
 80181da:	9201      	str	r2, [sp, #4]
 80181dc:	4293      	cmp	r3, r2
 80181de:	d80c      	bhi.n	80181fa <__multiply+0x7a>
 80181e0:	2e00      	cmp	r6, #0
 80181e2:	dd03      	ble.n	80181ec <__multiply+0x6c>
 80181e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d05d      	beq.n	80182a8 <__multiply+0x128>
 80181ec:	6106      	str	r6, [r0, #16]
 80181ee:	b003      	add	sp, #12
 80181f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181f4:	f843 2b04 	str.w	r2, [r3], #4
 80181f8:	e7e3      	b.n	80181c2 <__multiply+0x42>
 80181fa:	f8b2 b000 	ldrh.w	fp, [r2]
 80181fe:	f1bb 0f00 	cmp.w	fp, #0
 8018202:	d023      	beq.n	801824c <__multiply+0xcc>
 8018204:	4689      	mov	r9, r1
 8018206:	46ac      	mov	ip, r5
 8018208:	f04f 0800 	mov.w	r8, #0
 801820c:	f859 4b04 	ldr.w	r4, [r9], #4
 8018210:	f8dc a000 	ldr.w	sl, [ip]
 8018214:	b2a3      	uxth	r3, r4
 8018216:	fa1f fa8a 	uxth.w	sl, sl
 801821a:	fb0b a303 	mla	r3, fp, r3, sl
 801821e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018222:	f8dc 4000 	ldr.w	r4, [ip]
 8018226:	4443      	add	r3, r8
 8018228:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801822c:	fb0b 840a 	mla	r4, fp, sl, r8
 8018230:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018234:	46e2      	mov	sl, ip
 8018236:	b29b      	uxth	r3, r3
 8018238:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801823c:	454f      	cmp	r7, r9
 801823e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018242:	f84a 3b04 	str.w	r3, [sl], #4
 8018246:	d82b      	bhi.n	80182a0 <__multiply+0x120>
 8018248:	f8cc 8004 	str.w	r8, [ip, #4]
 801824c:	9b01      	ldr	r3, [sp, #4]
 801824e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018252:	3204      	adds	r2, #4
 8018254:	f1ba 0f00 	cmp.w	sl, #0
 8018258:	d020      	beq.n	801829c <__multiply+0x11c>
 801825a:	682b      	ldr	r3, [r5, #0]
 801825c:	4689      	mov	r9, r1
 801825e:	46a8      	mov	r8, r5
 8018260:	f04f 0b00 	mov.w	fp, #0
 8018264:	f8b9 c000 	ldrh.w	ip, [r9]
 8018268:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801826c:	fb0a 440c 	mla	r4, sl, ip, r4
 8018270:	445c      	add	r4, fp
 8018272:	46c4      	mov	ip, r8
 8018274:	b29b      	uxth	r3, r3
 8018276:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801827a:	f84c 3b04 	str.w	r3, [ip], #4
 801827e:	f859 3b04 	ldr.w	r3, [r9], #4
 8018282:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018286:	0c1b      	lsrs	r3, r3, #16
 8018288:	fb0a b303 	mla	r3, sl, r3, fp
 801828c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018290:	454f      	cmp	r7, r9
 8018292:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018296:	d805      	bhi.n	80182a4 <__multiply+0x124>
 8018298:	f8c8 3004 	str.w	r3, [r8, #4]
 801829c:	3504      	adds	r5, #4
 801829e:	e79b      	b.n	80181d8 <__multiply+0x58>
 80182a0:	46d4      	mov	ip, sl
 80182a2:	e7b3      	b.n	801820c <__multiply+0x8c>
 80182a4:	46e0      	mov	r8, ip
 80182a6:	e7dd      	b.n	8018264 <__multiply+0xe4>
 80182a8:	3e01      	subs	r6, #1
 80182aa:	e799      	b.n	80181e0 <__multiply+0x60>

080182ac <__pow5mult>:
 80182ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182b0:	4615      	mov	r5, r2
 80182b2:	f012 0203 	ands.w	r2, r2, #3
 80182b6:	4606      	mov	r6, r0
 80182b8:	460f      	mov	r7, r1
 80182ba:	d007      	beq.n	80182cc <__pow5mult+0x20>
 80182bc:	3a01      	subs	r2, #1
 80182be:	4c21      	ldr	r4, [pc, #132]	; (8018344 <__pow5mult+0x98>)
 80182c0:	2300      	movs	r3, #0
 80182c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80182c6:	f7ff fe8b 	bl	8017fe0 <__multadd>
 80182ca:	4607      	mov	r7, r0
 80182cc:	10ad      	asrs	r5, r5, #2
 80182ce:	d035      	beq.n	801833c <__pow5mult+0x90>
 80182d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80182d2:	b93c      	cbnz	r4, 80182e4 <__pow5mult+0x38>
 80182d4:	2010      	movs	r0, #16
 80182d6:	f7ff fe03 	bl	8017ee0 <malloc>
 80182da:	6270      	str	r0, [r6, #36]	; 0x24
 80182dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80182e0:	6004      	str	r4, [r0, #0]
 80182e2:	60c4      	str	r4, [r0, #12]
 80182e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80182e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80182ec:	b94c      	cbnz	r4, 8018302 <__pow5mult+0x56>
 80182ee:	f240 2171 	movw	r1, #625	; 0x271
 80182f2:	4630      	mov	r0, r6
 80182f4:	f7ff ff3b 	bl	801816e <__i2b>
 80182f8:	2300      	movs	r3, #0
 80182fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80182fe:	4604      	mov	r4, r0
 8018300:	6003      	str	r3, [r0, #0]
 8018302:	f04f 0800 	mov.w	r8, #0
 8018306:	07eb      	lsls	r3, r5, #31
 8018308:	d50a      	bpl.n	8018320 <__pow5mult+0x74>
 801830a:	4639      	mov	r1, r7
 801830c:	4622      	mov	r2, r4
 801830e:	4630      	mov	r0, r6
 8018310:	f7ff ff36 	bl	8018180 <__multiply>
 8018314:	4639      	mov	r1, r7
 8018316:	4681      	mov	r9, r0
 8018318:	4630      	mov	r0, r6
 801831a:	f7ff fe4a 	bl	8017fb2 <_Bfree>
 801831e:	464f      	mov	r7, r9
 8018320:	106d      	asrs	r5, r5, #1
 8018322:	d00b      	beq.n	801833c <__pow5mult+0x90>
 8018324:	6820      	ldr	r0, [r4, #0]
 8018326:	b938      	cbnz	r0, 8018338 <__pow5mult+0x8c>
 8018328:	4622      	mov	r2, r4
 801832a:	4621      	mov	r1, r4
 801832c:	4630      	mov	r0, r6
 801832e:	f7ff ff27 	bl	8018180 <__multiply>
 8018332:	6020      	str	r0, [r4, #0]
 8018334:	f8c0 8000 	str.w	r8, [r0]
 8018338:	4604      	mov	r4, r0
 801833a:	e7e4      	b.n	8018306 <__pow5mult+0x5a>
 801833c:	4638      	mov	r0, r7
 801833e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018342:	bf00      	nop
 8018344:	080191b0 	.word	0x080191b0

08018348 <__lshift>:
 8018348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801834c:	460c      	mov	r4, r1
 801834e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018352:	6923      	ldr	r3, [r4, #16]
 8018354:	6849      	ldr	r1, [r1, #4]
 8018356:	eb0a 0903 	add.w	r9, sl, r3
 801835a:	68a3      	ldr	r3, [r4, #8]
 801835c:	4607      	mov	r7, r0
 801835e:	4616      	mov	r6, r2
 8018360:	f109 0501 	add.w	r5, r9, #1
 8018364:	42ab      	cmp	r3, r5
 8018366:	db32      	blt.n	80183ce <__lshift+0x86>
 8018368:	4638      	mov	r0, r7
 801836a:	f7ff fdee 	bl	8017f4a <_Balloc>
 801836e:	2300      	movs	r3, #0
 8018370:	4680      	mov	r8, r0
 8018372:	f100 0114 	add.w	r1, r0, #20
 8018376:	461a      	mov	r2, r3
 8018378:	4553      	cmp	r3, sl
 801837a:	db2b      	blt.n	80183d4 <__lshift+0x8c>
 801837c:	6920      	ldr	r0, [r4, #16]
 801837e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018382:	f104 0314 	add.w	r3, r4, #20
 8018386:	f016 021f 	ands.w	r2, r6, #31
 801838a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801838e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018392:	d025      	beq.n	80183e0 <__lshift+0x98>
 8018394:	f1c2 0e20 	rsb	lr, r2, #32
 8018398:	2000      	movs	r0, #0
 801839a:	681e      	ldr	r6, [r3, #0]
 801839c:	468a      	mov	sl, r1
 801839e:	4096      	lsls	r6, r2
 80183a0:	4330      	orrs	r0, r6
 80183a2:	f84a 0b04 	str.w	r0, [sl], #4
 80183a6:	f853 0b04 	ldr.w	r0, [r3], #4
 80183aa:	459c      	cmp	ip, r3
 80183ac:	fa20 f00e 	lsr.w	r0, r0, lr
 80183b0:	d814      	bhi.n	80183dc <__lshift+0x94>
 80183b2:	6048      	str	r0, [r1, #4]
 80183b4:	b108      	cbz	r0, 80183ba <__lshift+0x72>
 80183b6:	f109 0502 	add.w	r5, r9, #2
 80183ba:	3d01      	subs	r5, #1
 80183bc:	4638      	mov	r0, r7
 80183be:	f8c8 5010 	str.w	r5, [r8, #16]
 80183c2:	4621      	mov	r1, r4
 80183c4:	f7ff fdf5 	bl	8017fb2 <_Bfree>
 80183c8:	4640      	mov	r0, r8
 80183ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183ce:	3101      	adds	r1, #1
 80183d0:	005b      	lsls	r3, r3, #1
 80183d2:	e7c7      	b.n	8018364 <__lshift+0x1c>
 80183d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80183d8:	3301      	adds	r3, #1
 80183da:	e7cd      	b.n	8018378 <__lshift+0x30>
 80183dc:	4651      	mov	r1, sl
 80183de:	e7dc      	b.n	801839a <__lshift+0x52>
 80183e0:	3904      	subs	r1, #4
 80183e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80183e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80183ea:	459c      	cmp	ip, r3
 80183ec:	d8f9      	bhi.n	80183e2 <__lshift+0x9a>
 80183ee:	e7e4      	b.n	80183ba <__lshift+0x72>

080183f0 <__mcmp>:
 80183f0:	6903      	ldr	r3, [r0, #16]
 80183f2:	690a      	ldr	r2, [r1, #16]
 80183f4:	1a9b      	subs	r3, r3, r2
 80183f6:	b530      	push	{r4, r5, lr}
 80183f8:	d10c      	bne.n	8018414 <__mcmp+0x24>
 80183fa:	0092      	lsls	r2, r2, #2
 80183fc:	3014      	adds	r0, #20
 80183fe:	3114      	adds	r1, #20
 8018400:	1884      	adds	r4, r0, r2
 8018402:	4411      	add	r1, r2
 8018404:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018408:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801840c:	4295      	cmp	r5, r2
 801840e:	d003      	beq.n	8018418 <__mcmp+0x28>
 8018410:	d305      	bcc.n	801841e <__mcmp+0x2e>
 8018412:	2301      	movs	r3, #1
 8018414:	4618      	mov	r0, r3
 8018416:	bd30      	pop	{r4, r5, pc}
 8018418:	42a0      	cmp	r0, r4
 801841a:	d3f3      	bcc.n	8018404 <__mcmp+0x14>
 801841c:	e7fa      	b.n	8018414 <__mcmp+0x24>
 801841e:	f04f 33ff 	mov.w	r3, #4294967295
 8018422:	e7f7      	b.n	8018414 <__mcmp+0x24>

08018424 <__mdiff>:
 8018424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018428:	460d      	mov	r5, r1
 801842a:	4607      	mov	r7, r0
 801842c:	4611      	mov	r1, r2
 801842e:	4628      	mov	r0, r5
 8018430:	4614      	mov	r4, r2
 8018432:	f7ff ffdd 	bl	80183f0 <__mcmp>
 8018436:	1e06      	subs	r6, r0, #0
 8018438:	d108      	bne.n	801844c <__mdiff+0x28>
 801843a:	4631      	mov	r1, r6
 801843c:	4638      	mov	r0, r7
 801843e:	f7ff fd84 	bl	8017f4a <_Balloc>
 8018442:	2301      	movs	r3, #1
 8018444:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801844c:	bfa4      	itt	ge
 801844e:	4623      	movge	r3, r4
 8018450:	462c      	movge	r4, r5
 8018452:	4638      	mov	r0, r7
 8018454:	6861      	ldr	r1, [r4, #4]
 8018456:	bfa6      	itte	ge
 8018458:	461d      	movge	r5, r3
 801845a:	2600      	movge	r6, #0
 801845c:	2601      	movlt	r6, #1
 801845e:	f7ff fd74 	bl	8017f4a <_Balloc>
 8018462:	692b      	ldr	r3, [r5, #16]
 8018464:	60c6      	str	r6, [r0, #12]
 8018466:	6926      	ldr	r6, [r4, #16]
 8018468:	f105 0914 	add.w	r9, r5, #20
 801846c:	f104 0214 	add.w	r2, r4, #20
 8018470:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018474:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018478:	f100 0514 	add.w	r5, r0, #20
 801847c:	f04f 0e00 	mov.w	lr, #0
 8018480:	f852 ab04 	ldr.w	sl, [r2], #4
 8018484:	f859 4b04 	ldr.w	r4, [r9], #4
 8018488:	fa1e f18a 	uxtah	r1, lr, sl
 801848c:	b2a3      	uxth	r3, r4
 801848e:	1ac9      	subs	r1, r1, r3
 8018490:	0c23      	lsrs	r3, r4, #16
 8018492:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018496:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801849a:	b289      	uxth	r1, r1
 801849c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80184a0:	45c8      	cmp	r8, r9
 80184a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80184a6:	4694      	mov	ip, r2
 80184a8:	f845 3b04 	str.w	r3, [r5], #4
 80184ac:	d8e8      	bhi.n	8018480 <__mdiff+0x5c>
 80184ae:	45bc      	cmp	ip, r7
 80184b0:	d304      	bcc.n	80184bc <__mdiff+0x98>
 80184b2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80184b6:	b183      	cbz	r3, 80184da <__mdiff+0xb6>
 80184b8:	6106      	str	r6, [r0, #16]
 80184ba:	e7c5      	b.n	8018448 <__mdiff+0x24>
 80184bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80184c0:	fa1e f381 	uxtah	r3, lr, r1
 80184c4:	141a      	asrs	r2, r3, #16
 80184c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80184ca:	b29b      	uxth	r3, r3
 80184cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80184d0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80184d4:	f845 3b04 	str.w	r3, [r5], #4
 80184d8:	e7e9      	b.n	80184ae <__mdiff+0x8a>
 80184da:	3e01      	subs	r6, #1
 80184dc:	e7e9      	b.n	80184b2 <__mdiff+0x8e>
	...

080184e0 <__ulp>:
 80184e0:	4b12      	ldr	r3, [pc, #72]	; (801852c <__ulp+0x4c>)
 80184e2:	ee10 2a90 	vmov	r2, s1
 80184e6:	401a      	ands	r2, r3
 80184e8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	dd04      	ble.n	80184fa <__ulp+0x1a>
 80184f0:	2000      	movs	r0, #0
 80184f2:	4619      	mov	r1, r3
 80184f4:	ec41 0b10 	vmov	d0, r0, r1
 80184f8:	4770      	bx	lr
 80184fa:	425b      	negs	r3, r3
 80184fc:	151b      	asrs	r3, r3, #20
 80184fe:	2b13      	cmp	r3, #19
 8018500:	f04f 0000 	mov.w	r0, #0
 8018504:	f04f 0100 	mov.w	r1, #0
 8018508:	dc04      	bgt.n	8018514 <__ulp+0x34>
 801850a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801850e:	fa42 f103 	asr.w	r1, r2, r3
 8018512:	e7ef      	b.n	80184f4 <__ulp+0x14>
 8018514:	3b14      	subs	r3, #20
 8018516:	2b1e      	cmp	r3, #30
 8018518:	f04f 0201 	mov.w	r2, #1
 801851c:	bfda      	itte	le
 801851e:	f1c3 031f 	rsble	r3, r3, #31
 8018522:	fa02 f303 	lslle.w	r3, r2, r3
 8018526:	4613      	movgt	r3, r2
 8018528:	4618      	mov	r0, r3
 801852a:	e7e3      	b.n	80184f4 <__ulp+0x14>
 801852c:	7ff00000 	.word	0x7ff00000

08018530 <__b2d>:
 8018530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018532:	6905      	ldr	r5, [r0, #16]
 8018534:	f100 0714 	add.w	r7, r0, #20
 8018538:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801853c:	1f2e      	subs	r6, r5, #4
 801853e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018542:	4620      	mov	r0, r4
 8018544:	f7ff fdc5 	bl	80180d2 <__hi0bits>
 8018548:	f1c0 0320 	rsb	r3, r0, #32
 801854c:	280a      	cmp	r0, #10
 801854e:	600b      	str	r3, [r1, #0]
 8018550:	f8df c074 	ldr.w	ip, [pc, #116]	; 80185c8 <__b2d+0x98>
 8018554:	dc14      	bgt.n	8018580 <__b2d+0x50>
 8018556:	f1c0 0e0b 	rsb	lr, r0, #11
 801855a:	fa24 f10e 	lsr.w	r1, r4, lr
 801855e:	42b7      	cmp	r7, r6
 8018560:	ea41 030c 	orr.w	r3, r1, ip
 8018564:	bf34      	ite	cc
 8018566:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801856a:	2100      	movcs	r1, #0
 801856c:	3015      	adds	r0, #21
 801856e:	fa04 f000 	lsl.w	r0, r4, r0
 8018572:	fa21 f10e 	lsr.w	r1, r1, lr
 8018576:	ea40 0201 	orr.w	r2, r0, r1
 801857a:	ec43 2b10 	vmov	d0, r2, r3
 801857e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018580:	42b7      	cmp	r7, r6
 8018582:	bf3a      	itte	cc
 8018584:	f1a5 0608 	subcc.w	r6, r5, #8
 8018588:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801858c:	2100      	movcs	r1, #0
 801858e:	380b      	subs	r0, #11
 8018590:	d015      	beq.n	80185be <__b2d+0x8e>
 8018592:	4084      	lsls	r4, r0
 8018594:	f1c0 0520 	rsb	r5, r0, #32
 8018598:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801859c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80185a0:	42be      	cmp	r6, r7
 80185a2:	fa21 fc05 	lsr.w	ip, r1, r5
 80185a6:	ea44 030c 	orr.w	r3, r4, ip
 80185aa:	bf8c      	ite	hi
 80185ac:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80185b0:	2400      	movls	r4, #0
 80185b2:	fa01 f000 	lsl.w	r0, r1, r0
 80185b6:	40ec      	lsrs	r4, r5
 80185b8:	ea40 0204 	orr.w	r2, r0, r4
 80185bc:	e7dd      	b.n	801857a <__b2d+0x4a>
 80185be:	ea44 030c 	orr.w	r3, r4, ip
 80185c2:	460a      	mov	r2, r1
 80185c4:	e7d9      	b.n	801857a <__b2d+0x4a>
 80185c6:	bf00      	nop
 80185c8:	3ff00000 	.word	0x3ff00000

080185cc <__d2b>:
 80185cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80185d0:	460e      	mov	r6, r1
 80185d2:	2101      	movs	r1, #1
 80185d4:	ec59 8b10 	vmov	r8, r9, d0
 80185d8:	4615      	mov	r5, r2
 80185da:	f7ff fcb6 	bl	8017f4a <_Balloc>
 80185de:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80185e2:	4607      	mov	r7, r0
 80185e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80185e8:	bb34      	cbnz	r4, 8018638 <__d2b+0x6c>
 80185ea:	9301      	str	r3, [sp, #4]
 80185ec:	f1b8 0300 	subs.w	r3, r8, #0
 80185f0:	d027      	beq.n	8018642 <__d2b+0x76>
 80185f2:	a802      	add	r0, sp, #8
 80185f4:	f840 3d08 	str.w	r3, [r0, #-8]!
 80185f8:	f7ff fd8a 	bl	8018110 <__lo0bits>
 80185fc:	9900      	ldr	r1, [sp, #0]
 80185fe:	b1f0      	cbz	r0, 801863e <__d2b+0x72>
 8018600:	9a01      	ldr	r2, [sp, #4]
 8018602:	f1c0 0320 	rsb	r3, r0, #32
 8018606:	fa02 f303 	lsl.w	r3, r2, r3
 801860a:	430b      	orrs	r3, r1
 801860c:	40c2      	lsrs	r2, r0
 801860e:	617b      	str	r3, [r7, #20]
 8018610:	9201      	str	r2, [sp, #4]
 8018612:	9b01      	ldr	r3, [sp, #4]
 8018614:	61bb      	str	r3, [r7, #24]
 8018616:	2b00      	cmp	r3, #0
 8018618:	bf14      	ite	ne
 801861a:	2102      	movne	r1, #2
 801861c:	2101      	moveq	r1, #1
 801861e:	6139      	str	r1, [r7, #16]
 8018620:	b1c4      	cbz	r4, 8018654 <__d2b+0x88>
 8018622:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018626:	4404      	add	r4, r0
 8018628:	6034      	str	r4, [r6, #0]
 801862a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801862e:	6028      	str	r0, [r5, #0]
 8018630:	4638      	mov	r0, r7
 8018632:	b003      	add	sp, #12
 8018634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801863c:	e7d5      	b.n	80185ea <__d2b+0x1e>
 801863e:	6179      	str	r1, [r7, #20]
 8018640:	e7e7      	b.n	8018612 <__d2b+0x46>
 8018642:	a801      	add	r0, sp, #4
 8018644:	f7ff fd64 	bl	8018110 <__lo0bits>
 8018648:	9b01      	ldr	r3, [sp, #4]
 801864a:	617b      	str	r3, [r7, #20]
 801864c:	2101      	movs	r1, #1
 801864e:	6139      	str	r1, [r7, #16]
 8018650:	3020      	adds	r0, #32
 8018652:	e7e5      	b.n	8018620 <__d2b+0x54>
 8018654:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018658:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801865c:	6030      	str	r0, [r6, #0]
 801865e:	6918      	ldr	r0, [r3, #16]
 8018660:	f7ff fd37 	bl	80180d2 <__hi0bits>
 8018664:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018668:	e7e1      	b.n	801862e <__d2b+0x62>

0801866a <__ratio>:
 801866a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801866e:	4688      	mov	r8, r1
 8018670:	4669      	mov	r1, sp
 8018672:	4681      	mov	r9, r0
 8018674:	f7ff ff5c 	bl	8018530 <__b2d>
 8018678:	a901      	add	r1, sp, #4
 801867a:	4640      	mov	r0, r8
 801867c:	ec57 6b10 	vmov	r6, r7, d0
 8018680:	f7ff ff56 	bl	8018530 <__b2d>
 8018684:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018688:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801868c:	eba3 0c02 	sub.w	ip, r3, r2
 8018690:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018694:	1a9b      	subs	r3, r3, r2
 8018696:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801869a:	ec5b ab10 	vmov	sl, fp, d0
 801869e:	2b00      	cmp	r3, #0
 80186a0:	bfce      	itee	gt
 80186a2:	463a      	movgt	r2, r7
 80186a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80186a8:	465a      	movle	r2, fp
 80186aa:	4659      	mov	r1, fp
 80186ac:	463d      	mov	r5, r7
 80186ae:	bfd4      	ite	le
 80186b0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80186b4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80186b8:	4630      	mov	r0, r6
 80186ba:	ee10 2a10 	vmov	r2, s0
 80186be:	460b      	mov	r3, r1
 80186c0:	4629      	mov	r1, r5
 80186c2:	f7ef fffb 	bl	80086bc <__aeabi_ddiv>
 80186c6:	ec41 0b10 	vmov	d0, r0, r1
 80186ca:	b003      	add	sp, #12
 80186cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186d0 <__copybits>:
 80186d0:	3901      	subs	r1, #1
 80186d2:	b510      	push	{r4, lr}
 80186d4:	1149      	asrs	r1, r1, #5
 80186d6:	6914      	ldr	r4, [r2, #16]
 80186d8:	3101      	adds	r1, #1
 80186da:	f102 0314 	add.w	r3, r2, #20
 80186de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80186e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80186e6:	42a3      	cmp	r3, r4
 80186e8:	4602      	mov	r2, r0
 80186ea:	d303      	bcc.n	80186f4 <__copybits+0x24>
 80186ec:	2300      	movs	r3, #0
 80186ee:	428a      	cmp	r2, r1
 80186f0:	d305      	bcc.n	80186fe <__copybits+0x2e>
 80186f2:	bd10      	pop	{r4, pc}
 80186f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80186f8:	f840 2b04 	str.w	r2, [r0], #4
 80186fc:	e7f3      	b.n	80186e6 <__copybits+0x16>
 80186fe:	f842 3b04 	str.w	r3, [r2], #4
 8018702:	e7f4      	b.n	80186ee <__copybits+0x1e>

08018704 <__any_on>:
 8018704:	f100 0214 	add.w	r2, r0, #20
 8018708:	6900      	ldr	r0, [r0, #16]
 801870a:	114b      	asrs	r3, r1, #5
 801870c:	4298      	cmp	r0, r3
 801870e:	b510      	push	{r4, lr}
 8018710:	db11      	blt.n	8018736 <__any_on+0x32>
 8018712:	dd0a      	ble.n	801872a <__any_on+0x26>
 8018714:	f011 011f 	ands.w	r1, r1, #31
 8018718:	d007      	beq.n	801872a <__any_on+0x26>
 801871a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801871e:	fa24 f001 	lsr.w	r0, r4, r1
 8018722:	fa00 f101 	lsl.w	r1, r0, r1
 8018726:	428c      	cmp	r4, r1
 8018728:	d10b      	bne.n	8018742 <__any_on+0x3e>
 801872a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801872e:	4293      	cmp	r3, r2
 8018730:	d803      	bhi.n	801873a <__any_on+0x36>
 8018732:	2000      	movs	r0, #0
 8018734:	bd10      	pop	{r4, pc}
 8018736:	4603      	mov	r3, r0
 8018738:	e7f7      	b.n	801872a <__any_on+0x26>
 801873a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801873e:	2900      	cmp	r1, #0
 8018740:	d0f5      	beq.n	801872e <__any_on+0x2a>
 8018742:	2001      	movs	r0, #1
 8018744:	e7f6      	b.n	8018734 <__any_on+0x30>

08018746 <_calloc_r>:
 8018746:	b538      	push	{r3, r4, r5, lr}
 8018748:	fb02 f401 	mul.w	r4, r2, r1
 801874c:	4621      	mov	r1, r4
 801874e:	f7fb fa97 	bl	8013c80 <_malloc_r>
 8018752:	4605      	mov	r5, r0
 8018754:	b118      	cbz	r0, 801875e <_calloc_r+0x18>
 8018756:	4622      	mov	r2, r4
 8018758:	2100      	movs	r1, #0
 801875a:	f7fb fa3a 	bl	8013bd2 <memset>
 801875e:	4628      	mov	r0, r5
 8018760:	bd38      	pop	{r3, r4, r5, pc}

08018762 <_realloc_r>:
 8018762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018764:	4607      	mov	r7, r0
 8018766:	4614      	mov	r4, r2
 8018768:	460e      	mov	r6, r1
 801876a:	b921      	cbnz	r1, 8018776 <_realloc_r+0x14>
 801876c:	4611      	mov	r1, r2
 801876e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018772:	f7fb ba85 	b.w	8013c80 <_malloc_r>
 8018776:	b922      	cbnz	r2, 8018782 <_realloc_r+0x20>
 8018778:	f7fb fa34 	bl	8013be4 <_free_r>
 801877c:	4625      	mov	r5, r4
 801877e:	4628      	mov	r0, r5
 8018780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018782:	f000 f9ce 	bl	8018b22 <_malloc_usable_size_r>
 8018786:	42a0      	cmp	r0, r4
 8018788:	d20f      	bcs.n	80187aa <_realloc_r+0x48>
 801878a:	4621      	mov	r1, r4
 801878c:	4638      	mov	r0, r7
 801878e:	f7fb fa77 	bl	8013c80 <_malloc_r>
 8018792:	4605      	mov	r5, r0
 8018794:	2800      	cmp	r0, #0
 8018796:	d0f2      	beq.n	801877e <_realloc_r+0x1c>
 8018798:	4631      	mov	r1, r6
 801879a:	4622      	mov	r2, r4
 801879c:	f7fb fa0e 	bl	8013bbc <memcpy>
 80187a0:	4631      	mov	r1, r6
 80187a2:	4638      	mov	r0, r7
 80187a4:	f7fb fa1e 	bl	8013be4 <_free_r>
 80187a8:	e7e9      	b.n	801877e <_realloc_r+0x1c>
 80187aa:	4635      	mov	r5, r6
 80187ac:	e7e7      	b.n	801877e <_realloc_r+0x1c>

080187ae <__ssputs_r>:
 80187ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187b2:	688e      	ldr	r6, [r1, #8]
 80187b4:	429e      	cmp	r6, r3
 80187b6:	4682      	mov	sl, r0
 80187b8:	460c      	mov	r4, r1
 80187ba:	4690      	mov	r8, r2
 80187bc:	4699      	mov	r9, r3
 80187be:	d837      	bhi.n	8018830 <__ssputs_r+0x82>
 80187c0:	898a      	ldrh	r2, [r1, #12]
 80187c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80187c6:	d031      	beq.n	801882c <__ssputs_r+0x7e>
 80187c8:	6825      	ldr	r5, [r4, #0]
 80187ca:	6909      	ldr	r1, [r1, #16]
 80187cc:	1a6f      	subs	r7, r5, r1
 80187ce:	6965      	ldr	r5, [r4, #20]
 80187d0:	2302      	movs	r3, #2
 80187d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80187d6:	fb95 f5f3 	sdiv	r5, r5, r3
 80187da:	f109 0301 	add.w	r3, r9, #1
 80187de:	443b      	add	r3, r7
 80187e0:	429d      	cmp	r5, r3
 80187e2:	bf38      	it	cc
 80187e4:	461d      	movcc	r5, r3
 80187e6:	0553      	lsls	r3, r2, #21
 80187e8:	d530      	bpl.n	801884c <__ssputs_r+0x9e>
 80187ea:	4629      	mov	r1, r5
 80187ec:	f7fb fa48 	bl	8013c80 <_malloc_r>
 80187f0:	4606      	mov	r6, r0
 80187f2:	b950      	cbnz	r0, 801880a <__ssputs_r+0x5c>
 80187f4:	230c      	movs	r3, #12
 80187f6:	f8ca 3000 	str.w	r3, [sl]
 80187fa:	89a3      	ldrh	r3, [r4, #12]
 80187fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018800:	81a3      	strh	r3, [r4, #12]
 8018802:	f04f 30ff 	mov.w	r0, #4294967295
 8018806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801880a:	463a      	mov	r2, r7
 801880c:	6921      	ldr	r1, [r4, #16]
 801880e:	f7fb f9d5 	bl	8013bbc <memcpy>
 8018812:	89a3      	ldrh	r3, [r4, #12]
 8018814:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801881c:	81a3      	strh	r3, [r4, #12]
 801881e:	6126      	str	r6, [r4, #16]
 8018820:	6165      	str	r5, [r4, #20]
 8018822:	443e      	add	r6, r7
 8018824:	1bed      	subs	r5, r5, r7
 8018826:	6026      	str	r6, [r4, #0]
 8018828:	60a5      	str	r5, [r4, #8]
 801882a:	464e      	mov	r6, r9
 801882c:	454e      	cmp	r6, r9
 801882e:	d900      	bls.n	8018832 <__ssputs_r+0x84>
 8018830:	464e      	mov	r6, r9
 8018832:	4632      	mov	r2, r6
 8018834:	4641      	mov	r1, r8
 8018836:	6820      	ldr	r0, [r4, #0]
 8018838:	f7ff fb6c 	bl	8017f14 <memmove>
 801883c:	68a3      	ldr	r3, [r4, #8]
 801883e:	1b9b      	subs	r3, r3, r6
 8018840:	60a3      	str	r3, [r4, #8]
 8018842:	6823      	ldr	r3, [r4, #0]
 8018844:	441e      	add	r6, r3
 8018846:	6026      	str	r6, [r4, #0]
 8018848:	2000      	movs	r0, #0
 801884a:	e7dc      	b.n	8018806 <__ssputs_r+0x58>
 801884c:	462a      	mov	r2, r5
 801884e:	f7ff ff88 	bl	8018762 <_realloc_r>
 8018852:	4606      	mov	r6, r0
 8018854:	2800      	cmp	r0, #0
 8018856:	d1e2      	bne.n	801881e <__ssputs_r+0x70>
 8018858:	6921      	ldr	r1, [r4, #16]
 801885a:	4650      	mov	r0, sl
 801885c:	f7fb f9c2 	bl	8013be4 <_free_r>
 8018860:	e7c8      	b.n	80187f4 <__ssputs_r+0x46>
	...

08018864 <_svfiprintf_r>:
 8018864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018868:	461d      	mov	r5, r3
 801886a:	898b      	ldrh	r3, [r1, #12]
 801886c:	061f      	lsls	r7, r3, #24
 801886e:	b09d      	sub	sp, #116	; 0x74
 8018870:	4680      	mov	r8, r0
 8018872:	460c      	mov	r4, r1
 8018874:	4616      	mov	r6, r2
 8018876:	d50f      	bpl.n	8018898 <_svfiprintf_r+0x34>
 8018878:	690b      	ldr	r3, [r1, #16]
 801887a:	b96b      	cbnz	r3, 8018898 <_svfiprintf_r+0x34>
 801887c:	2140      	movs	r1, #64	; 0x40
 801887e:	f7fb f9ff 	bl	8013c80 <_malloc_r>
 8018882:	6020      	str	r0, [r4, #0]
 8018884:	6120      	str	r0, [r4, #16]
 8018886:	b928      	cbnz	r0, 8018894 <_svfiprintf_r+0x30>
 8018888:	230c      	movs	r3, #12
 801888a:	f8c8 3000 	str.w	r3, [r8]
 801888e:	f04f 30ff 	mov.w	r0, #4294967295
 8018892:	e0c8      	b.n	8018a26 <_svfiprintf_r+0x1c2>
 8018894:	2340      	movs	r3, #64	; 0x40
 8018896:	6163      	str	r3, [r4, #20]
 8018898:	2300      	movs	r3, #0
 801889a:	9309      	str	r3, [sp, #36]	; 0x24
 801889c:	2320      	movs	r3, #32
 801889e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80188a2:	2330      	movs	r3, #48	; 0x30
 80188a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80188a8:	9503      	str	r5, [sp, #12]
 80188aa:	f04f 0b01 	mov.w	fp, #1
 80188ae:	4637      	mov	r7, r6
 80188b0:	463d      	mov	r5, r7
 80188b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80188b6:	b10b      	cbz	r3, 80188bc <_svfiprintf_r+0x58>
 80188b8:	2b25      	cmp	r3, #37	; 0x25
 80188ba:	d13e      	bne.n	801893a <_svfiprintf_r+0xd6>
 80188bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80188c0:	d00b      	beq.n	80188da <_svfiprintf_r+0x76>
 80188c2:	4653      	mov	r3, sl
 80188c4:	4632      	mov	r2, r6
 80188c6:	4621      	mov	r1, r4
 80188c8:	4640      	mov	r0, r8
 80188ca:	f7ff ff70 	bl	80187ae <__ssputs_r>
 80188ce:	3001      	adds	r0, #1
 80188d0:	f000 80a4 	beq.w	8018a1c <_svfiprintf_r+0x1b8>
 80188d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188d6:	4453      	add	r3, sl
 80188d8:	9309      	str	r3, [sp, #36]	; 0x24
 80188da:	783b      	ldrb	r3, [r7, #0]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	f000 809d 	beq.w	8018a1c <_svfiprintf_r+0x1b8>
 80188e2:	2300      	movs	r3, #0
 80188e4:	f04f 32ff 	mov.w	r2, #4294967295
 80188e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80188ec:	9304      	str	r3, [sp, #16]
 80188ee:	9307      	str	r3, [sp, #28]
 80188f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80188f4:	931a      	str	r3, [sp, #104]	; 0x68
 80188f6:	462f      	mov	r7, r5
 80188f8:	2205      	movs	r2, #5
 80188fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80188fe:	4850      	ldr	r0, [pc, #320]	; (8018a40 <_svfiprintf_r+0x1dc>)
 8018900:	f7ef fba6 	bl	8008050 <memchr>
 8018904:	9b04      	ldr	r3, [sp, #16]
 8018906:	b9d0      	cbnz	r0, 801893e <_svfiprintf_r+0xda>
 8018908:	06d9      	lsls	r1, r3, #27
 801890a:	bf44      	itt	mi
 801890c:	2220      	movmi	r2, #32
 801890e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018912:	071a      	lsls	r2, r3, #28
 8018914:	bf44      	itt	mi
 8018916:	222b      	movmi	r2, #43	; 0x2b
 8018918:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801891c:	782a      	ldrb	r2, [r5, #0]
 801891e:	2a2a      	cmp	r2, #42	; 0x2a
 8018920:	d015      	beq.n	801894e <_svfiprintf_r+0xea>
 8018922:	9a07      	ldr	r2, [sp, #28]
 8018924:	462f      	mov	r7, r5
 8018926:	2000      	movs	r0, #0
 8018928:	250a      	movs	r5, #10
 801892a:	4639      	mov	r1, r7
 801892c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018930:	3b30      	subs	r3, #48	; 0x30
 8018932:	2b09      	cmp	r3, #9
 8018934:	d94d      	bls.n	80189d2 <_svfiprintf_r+0x16e>
 8018936:	b1b8      	cbz	r0, 8018968 <_svfiprintf_r+0x104>
 8018938:	e00f      	b.n	801895a <_svfiprintf_r+0xf6>
 801893a:	462f      	mov	r7, r5
 801893c:	e7b8      	b.n	80188b0 <_svfiprintf_r+0x4c>
 801893e:	4a40      	ldr	r2, [pc, #256]	; (8018a40 <_svfiprintf_r+0x1dc>)
 8018940:	1a80      	subs	r0, r0, r2
 8018942:	fa0b f000 	lsl.w	r0, fp, r0
 8018946:	4318      	orrs	r0, r3
 8018948:	9004      	str	r0, [sp, #16]
 801894a:	463d      	mov	r5, r7
 801894c:	e7d3      	b.n	80188f6 <_svfiprintf_r+0x92>
 801894e:	9a03      	ldr	r2, [sp, #12]
 8018950:	1d11      	adds	r1, r2, #4
 8018952:	6812      	ldr	r2, [r2, #0]
 8018954:	9103      	str	r1, [sp, #12]
 8018956:	2a00      	cmp	r2, #0
 8018958:	db01      	blt.n	801895e <_svfiprintf_r+0xfa>
 801895a:	9207      	str	r2, [sp, #28]
 801895c:	e004      	b.n	8018968 <_svfiprintf_r+0x104>
 801895e:	4252      	negs	r2, r2
 8018960:	f043 0302 	orr.w	r3, r3, #2
 8018964:	9207      	str	r2, [sp, #28]
 8018966:	9304      	str	r3, [sp, #16]
 8018968:	783b      	ldrb	r3, [r7, #0]
 801896a:	2b2e      	cmp	r3, #46	; 0x2e
 801896c:	d10c      	bne.n	8018988 <_svfiprintf_r+0x124>
 801896e:	787b      	ldrb	r3, [r7, #1]
 8018970:	2b2a      	cmp	r3, #42	; 0x2a
 8018972:	d133      	bne.n	80189dc <_svfiprintf_r+0x178>
 8018974:	9b03      	ldr	r3, [sp, #12]
 8018976:	1d1a      	adds	r2, r3, #4
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	9203      	str	r2, [sp, #12]
 801897c:	2b00      	cmp	r3, #0
 801897e:	bfb8      	it	lt
 8018980:	f04f 33ff 	movlt.w	r3, #4294967295
 8018984:	3702      	adds	r7, #2
 8018986:	9305      	str	r3, [sp, #20]
 8018988:	4d2e      	ldr	r5, [pc, #184]	; (8018a44 <_svfiprintf_r+0x1e0>)
 801898a:	7839      	ldrb	r1, [r7, #0]
 801898c:	2203      	movs	r2, #3
 801898e:	4628      	mov	r0, r5
 8018990:	f7ef fb5e 	bl	8008050 <memchr>
 8018994:	b138      	cbz	r0, 80189a6 <_svfiprintf_r+0x142>
 8018996:	2340      	movs	r3, #64	; 0x40
 8018998:	1b40      	subs	r0, r0, r5
 801899a:	fa03 f000 	lsl.w	r0, r3, r0
 801899e:	9b04      	ldr	r3, [sp, #16]
 80189a0:	4303      	orrs	r3, r0
 80189a2:	3701      	adds	r7, #1
 80189a4:	9304      	str	r3, [sp, #16]
 80189a6:	7839      	ldrb	r1, [r7, #0]
 80189a8:	4827      	ldr	r0, [pc, #156]	; (8018a48 <_svfiprintf_r+0x1e4>)
 80189aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80189ae:	2206      	movs	r2, #6
 80189b0:	1c7e      	adds	r6, r7, #1
 80189b2:	f7ef fb4d 	bl	8008050 <memchr>
 80189b6:	2800      	cmp	r0, #0
 80189b8:	d038      	beq.n	8018a2c <_svfiprintf_r+0x1c8>
 80189ba:	4b24      	ldr	r3, [pc, #144]	; (8018a4c <_svfiprintf_r+0x1e8>)
 80189bc:	bb13      	cbnz	r3, 8018a04 <_svfiprintf_r+0x1a0>
 80189be:	9b03      	ldr	r3, [sp, #12]
 80189c0:	3307      	adds	r3, #7
 80189c2:	f023 0307 	bic.w	r3, r3, #7
 80189c6:	3308      	adds	r3, #8
 80189c8:	9303      	str	r3, [sp, #12]
 80189ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189cc:	444b      	add	r3, r9
 80189ce:	9309      	str	r3, [sp, #36]	; 0x24
 80189d0:	e76d      	b.n	80188ae <_svfiprintf_r+0x4a>
 80189d2:	fb05 3202 	mla	r2, r5, r2, r3
 80189d6:	2001      	movs	r0, #1
 80189d8:	460f      	mov	r7, r1
 80189da:	e7a6      	b.n	801892a <_svfiprintf_r+0xc6>
 80189dc:	2300      	movs	r3, #0
 80189de:	3701      	adds	r7, #1
 80189e0:	9305      	str	r3, [sp, #20]
 80189e2:	4619      	mov	r1, r3
 80189e4:	250a      	movs	r5, #10
 80189e6:	4638      	mov	r0, r7
 80189e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80189ec:	3a30      	subs	r2, #48	; 0x30
 80189ee:	2a09      	cmp	r2, #9
 80189f0:	d903      	bls.n	80189fa <_svfiprintf_r+0x196>
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d0c8      	beq.n	8018988 <_svfiprintf_r+0x124>
 80189f6:	9105      	str	r1, [sp, #20]
 80189f8:	e7c6      	b.n	8018988 <_svfiprintf_r+0x124>
 80189fa:	fb05 2101 	mla	r1, r5, r1, r2
 80189fe:	2301      	movs	r3, #1
 8018a00:	4607      	mov	r7, r0
 8018a02:	e7f0      	b.n	80189e6 <_svfiprintf_r+0x182>
 8018a04:	ab03      	add	r3, sp, #12
 8018a06:	9300      	str	r3, [sp, #0]
 8018a08:	4622      	mov	r2, r4
 8018a0a:	4b11      	ldr	r3, [pc, #68]	; (8018a50 <_svfiprintf_r+0x1ec>)
 8018a0c:	a904      	add	r1, sp, #16
 8018a0e:	4640      	mov	r0, r8
 8018a10:	f7fb fb64 	bl	80140dc <_printf_float>
 8018a14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018a18:	4681      	mov	r9, r0
 8018a1a:	d1d6      	bne.n	80189ca <_svfiprintf_r+0x166>
 8018a1c:	89a3      	ldrh	r3, [r4, #12]
 8018a1e:	065b      	lsls	r3, r3, #25
 8018a20:	f53f af35 	bmi.w	801888e <_svfiprintf_r+0x2a>
 8018a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a26:	b01d      	add	sp, #116	; 0x74
 8018a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a2c:	ab03      	add	r3, sp, #12
 8018a2e:	9300      	str	r3, [sp, #0]
 8018a30:	4622      	mov	r2, r4
 8018a32:	4b07      	ldr	r3, [pc, #28]	; (8018a50 <_svfiprintf_r+0x1ec>)
 8018a34:	a904      	add	r1, sp, #16
 8018a36:	4640      	mov	r0, r8
 8018a38:	f7fb fe06 	bl	8014648 <_printf_i>
 8018a3c:	e7ea      	b.n	8018a14 <_svfiprintf_r+0x1b0>
 8018a3e:	bf00      	nop
 8018a40:	08018ff4 	.word	0x08018ff4
 8018a44:	08018ffa 	.word	0x08018ffa
 8018a48:	08018ffe 	.word	0x08018ffe
 8018a4c:	080140dd 	.word	0x080140dd
 8018a50:	080187af 	.word	0x080187af

08018a54 <_putc_r>:
 8018a54:	b570      	push	{r4, r5, r6, lr}
 8018a56:	460d      	mov	r5, r1
 8018a58:	4614      	mov	r4, r2
 8018a5a:	4606      	mov	r6, r0
 8018a5c:	b118      	cbz	r0, 8018a66 <_putc_r+0x12>
 8018a5e:	6983      	ldr	r3, [r0, #24]
 8018a60:	b90b      	cbnz	r3, 8018a66 <_putc_r+0x12>
 8018a62:	f7fa ff7d 	bl	8013960 <__sinit>
 8018a66:	4b13      	ldr	r3, [pc, #76]	; (8018ab4 <_putc_r+0x60>)
 8018a68:	429c      	cmp	r4, r3
 8018a6a:	d112      	bne.n	8018a92 <_putc_r+0x3e>
 8018a6c:	6874      	ldr	r4, [r6, #4]
 8018a6e:	68a3      	ldr	r3, [r4, #8]
 8018a70:	3b01      	subs	r3, #1
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	60a3      	str	r3, [r4, #8]
 8018a76:	da16      	bge.n	8018aa6 <_putc_r+0x52>
 8018a78:	69a2      	ldr	r2, [r4, #24]
 8018a7a:	4293      	cmp	r3, r2
 8018a7c:	db02      	blt.n	8018a84 <_putc_r+0x30>
 8018a7e:	b2eb      	uxtb	r3, r5
 8018a80:	2b0a      	cmp	r3, #10
 8018a82:	d110      	bne.n	8018aa6 <_putc_r+0x52>
 8018a84:	4622      	mov	r2, r4
 8018a86:	4629      	mov	r1, r5
 8018a88:	4630      	mov	r0, r6
 8018a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a8e:	f7fd bf85 	b.w	801699c <__swbuf_r>
 8018a92:	4b09      	ldr	r3, [pc, #36]	; (8018ab8 <_putc_r+0x64>)
 8018a94:	429c      	cmp	r4, r3
 8018a96:	d101      	bne.n	8018a9c <_putc_r+0x48>
 8018a98:	68b4      	ldr	r4, [r6, #8]
 8018a9a:	e7e8      	b.n	8018a6e <_putc_r+0x1a>
 8018a9c:	4b07      	ldr	r3, [pc, #28]	; (8018abc <_putc_r+0x68>)
 8018a9e:	429c      	cmp	r4, r3
 8018aa0:	bf08      	it	eq
 8018aa2:	68f4      	ldreq	r4, [r6, #12]
 8018aa4:	e7e3      	b.n	8018a6e <_putc_r+0x1a>
 8018aa6:	6823      	ldr	r3, [r4, #0]
 8018aa8:	1c5a      	adds	r2, r3, #1
 8018aaa:	6022      	str	r2, [r4, #0]
 8018aac:	701d      	strb	r5, [r3, #0]
 8018aae:	b2e8      	uxtb	r0, r5
 8018ab0:	bd70      	pop	{r4, r5, r6, pc}
 8018ab2:	bf00      	nop
 8018ab4:	08018fb0 	.word	0x08018fb0
 8018ab8:	08018fd0 	.word	0x08018fd0
 8018abc:	08018f90 	.word	0x08018f90

08018ac0 <_read_r>:
 8018ac0:	b538      	push	{r3, r4, r5, lr}
 8018ac2:	4c07      	ldr	r4, [pc, #28]	; (8018ae0 <_read_r+0x20>)
 8018ac4:	4605      	mov	r5, r0
 8018ac6:	4608      	mov	r0, r1
 8018ac8:	4611      	mov	r1, r2
 8018aca:	2200      	movs	r2, #0
 8018acc:	6022      	str	r2, [r4, #0]
 8018ace:	461a      	mov	r2, r3
 8018ad0:	f7f4 fb6c 	bl	800d1ac <_read>
 8018ad4:	1c43      	adds	r3, r0, #1
 8018ad6:	d102      	bne.n	8018ade <_read_r+0x1e>
 8018ad8:	6823      	ldr	r3, [r4, #0]
 8018ada:	b103      	cbz	r3, 8018ade <_read_r+0x1e>
 8018adc:	602b      	str	r3, [r5, #0]
 8018ade:	bd38      	pop	{r3, r4, r5, pc}
 8018ae0:	20008f48 	.word	0x20008f48

08018ae4 <strncmp>:
 8018ae4:	b510      	push	{r4, lr}
 8018ae6:	b16a      	cbz	r2, 8018b04 <strncmp+0x20>
 8018ae8:	3901      	subs	r1, #1
 8018aea:	1884      	adds	r4, r0, r2
 8018aec:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018af0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018af4:	4293      	cmp	r3, r2
 8018af6:	d103      	bne.n	8018b00 <strncmp+0x1c>
 8018af8:	42a0      	cmp	r0, r4
 8018afa:	d001      	beq.n	8018b00 <strncmp+0x1c>
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d1f5      	bne.n	8018aec <strncmp+0x8>
 8018b00:	1a98      	subs	r0, r3, r2
 8018b02:	bd10      	pop	{r4, pc}
 8018b04:	4610      	mov	r0, r2
 8018b06:	e7fc      	b.n	8018b02 <strncmp+0x1e>

08018b08 <__ascii_wctomb>:
 8018b08:	b149      	cbz	r1, 8018b1e <__ascii_wctomb+0x16>
 8018b0a:	2aff      	cmp	r2, #255	; 0xff
 8018b0c:	bf85      	ittet	hi
 8018b0e:	238a      	movhi	r3, #138	; 0x8a
 8018b10:	6003      	strhi	r3, [r0, #0]
 8018b12:	700a      	strbls	r2, [r1, #0]
 8018b14:	f04f 30ff 	movhi.w	r0, #4294967295
 8018b18:	bf98      	it	ls
 8018b1a:	2001      	movls	r0, #1
 8018b1c:	4770      	bx	lr
 8018b1e:	4608      	mov	r0, r1
 8018b20:	4770      	bx	lr

08018b22 <_malloc_usable_size_r>:
 8018b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b26:	1f18      	subs	r0, r3, #4
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	bfbc      	itt	lt
 8018b2c:	580b      	ldrlt	r3, [r1, r0]
 8018b2e:	18c0      	addlt	r0, r0, r3
 8018b30:	4770      	bx	lr
	...

08018b34 <_init>:
 8018b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b36:	bf00      	nop
 8018b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b3a:	bc08      	pop	{r3}
 8018b3c:	469e      	mov	lr, r3
 8018b3e:	4770      	bx	lr

08018b40 <_fini>:
 8018b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b42:	bf00      	nop
 8018b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b46:	bc08      	pop	{r3}
 8018b48:	469e      	mov	lr, r3
 8018b4a:	4770      	bx	lr
