
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000e16c  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000758  08016170  08016170  00026170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  080168c8  080168c8  00030208  2**0
                  CONTENTS
  6 .ARM          00000008  080168c8  080168c8  000268c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  080168d0  080168d0  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  080168d0  080168d0  000268d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  080168d4  080168d4  000268d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000208  20000000  080168d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000ff8  20000208  08016ae0  00030208  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20001200  08016ae0  00031200  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033971  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006d53  00000000  00000000  00063ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00010f50  00000000  00000000  0006a8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00001510  00000000  00000000  0007b850  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000028d0  00000000  00000000  0007cd60  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  000288c0  00000000  00000000  0007f630  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0001a889  00000000  00000000  000a7ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000cacf0  00000000  00000000  000c2779  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  0018d469  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00005d98  00000000  00000000  0018d4e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000208 	.word	0x20000208
 800801c:	00000000 	.word	0x00000000
 8008020:	08016154 	.word	0x08016154

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	2000020c 	.word	0x2000020c
 800803c:	08016154 	.word	0x08016154

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <InitPosition>:
}


void InitPosition()
{
	Pos.X = 0;
 8008df8:	4b04      	ldr	r3, [pc, #16]	; (8008e0c <InitPosition+0x14>)
 8008dfa:	2200      	movs	r2, #0
	Pos.Y = 0;
	Pos.Car = north;
	Pos.Dir = front;
	Pos.Act = Wait;
 8008dfc:	2004      	movs	r0, #4
	Pos.WallSaf = wall_warn;//どっちにするか
 8008dfe:	2101      	movs	r1, #1
	Pos.Act = Wait;
 8008e00:	7198      	strb	r0, [r3, #6]
	Pos.WallSaf = wall_warn;//どっちにするか
 8008e02:	71d9      	strb	r1, [r3, #7]
	Pos.X = 0;
 8008e04:	801a      	strh	r2, [r3, #0]
	Pos.Car = north;
 8008e06:	715a      	strb	r2, [r3, #5]
	Pos.Dir = front;
 8008e08:	711a      	strb	r2, [r3, #4]

}
 8008e0a:	4770      	bx	lr
 8008e0c:	20000004 	.word	0x20000004

08008e10 <WaitStopAndReset>:
//	KeepCounter[LEFT] = INITIAL_PULSE;
//	KeepCounter[RIGHT] = INITIAL_PULSE;
//}

void WaitStopAndReset()
{
 8008e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e14:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008e88 <WaitStopAndReset+0x78>
 8008e18:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8008e8c <WaitStopAndReset+0x7c>
 8008e1c:	4f16      	ldr	r7, [pc, #88]	; (8008e78 <WaitStopAndReset+0x68>)
 8008e1e:	4e17      	ldr	r6, [pc, #92]	; (8008e7c <WaitStopAndReset+0x6c>)
 8008e20:	4d17      	ldr	r5, [pc, #92]	; (8008e80 <WaitStopAndReset+0x70>)
 8008e22:	ed2d 8b02 	vpush	{d8}
//	ControlWall();//ベイブレード対策
	do
	{

		//壁制御の更新
		TargetVelocity[BODY] = 0;
 8008e26:	2400      	movs	r4, #0
		Acceleration = 0;
		//PIDChangeFlag( D_, 0);
		TargetAngularV = 0;
		AngularAcceleration = 0;
		//AngularV = 0;
		if(CurrentVelocity[LEFT] > 500)
 8008e28:	ed9f 8a16 	vldr	s16, [pc, #88]	; 8008e84 <WaitStopAndReset+0x74>
 8008e2c:	e006      	b.n	8008e3c <WaitStopAndReset+0x2c>
			ChangeLED(2);
			//printf("回転停止中\r\n");

	}while(CurrentVelocity[BODY] != 0);
 8008e2e:	edd5 7a02 	vldr	s15, [r5, #8]
 8008e32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3a:	d016      	beq.n	8008e6a <WaitStopAndReset+0x5a>
		TargetVelocity[BODY] = 0;
 8008e3c:	f8c9 4008 	str.w	r4, [r9, #8]
		Acceleration = 0;
 8008e40:	f8c8 4000 	str.w	r4, [r8]
		TargetAngularV = 0;
 8008e44:	603c      	str	r4, [r7, #0]
		AngularAcceleration = 0;
 8008e46:	6034      	str	r4, [r6, #0]
		if(CurrentVelocity[LEFT] > 500)
 8008e48:	edd5 7a00 	vldr	s15, [r5]
 8008e4c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8008e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e54:	ddeb      	ble.n	8008e2e <WaitStopAndReset+0x1e>
			ChangeLED(2);
 8008e56:	2002      	movs	r0, #2
 8008e58:	f004 fd92 	bl	800d980 <ChangeLED>
	}while(CurrentVelocity[BODY] != 0);
 8008e5c:	edd5 7a02 	vldr	s15, [r5, #8]
 8008e60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e68:	d1e8      	bne.n	8008e3c <WaitStopAndReset+0x2c>
	HAL_Delay(100);
}
 8008e6a:	ecbd 8b02 	vpop	{d8}
	HAL_Delay(100);
 8008e6e:	2064      	movs	r0, #100	; 0x64
}
 8008e70:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(100);
 8008e74:	f005 bb64 	b.w	800e540 <HAL_Delay>
 8008e78:	20000c5c 	.word	0x20000c5c
 8008e7c:	20000238 	.word	0x20000238
 8008e80:	20000c88 	.word	0x20000c88
 8008e84:	43fa0000 	.word	0x43fa0000
 8008e88:	20000c4c 	.word	0x20000c4c
 8008e8c:	20000230 	.word	0x20000230

08008e90 <Rotate>:
	//加速度が一定。角速度が増加。角速度を積分して角度。角速度の式を作り、角速度を積分して角度を求める等式を立てる。
	//Angle = インテグラル(ang_v(t))dt
	//v = v0+at	|	t=v/a	||		ang_v = ang_v0 + ang_accel *t		||	t = ang_v/ang_accel
	//x=0.5*v*v/a	|	a = 0.5*v*v*/x		||		θ=ang_v0*t+0.5*ang_v^2/ang_accel	||	ang_accel =
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)
	float accel_deg = deg*30/90;
 8008e90:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8008e94:	ee60 6a26 	vmul.f32	s13, s0, s13
 8008e98:	ed9f 6a9d 	vldr	s12, [pc, #628]	; 8009110 <Rotate+0x280>
	float const_deg = deg*30/90;
	float decel_deg = deg*30/90;
	float angular_acceleration[3] = {
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008e9c:	eddf 7a9d 	vldr	s15, [pc, #628]	; 8009114 <Rotate+0x284>
	TargetAngularV = 0;
 8008ea0:	4b9d      	ldr	r3, [pc, #628]	; (8009118 <Rotate+0x288>)
	float accel_deg = deg*30/90;
 8008ea2:	ee86 7a86 	vdiv.f32	s14, s13, s12
{
 8008ea6:	b570      	push	{r4, r5, r6, lr}
	TargetAngularV = 0;
 8008ea8:	2400      	movs	r4, #0
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008eaa:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8008eae:	ee77 6a07 	vadd.f32	s13, s14, s14
 8008eb2:	ee67 7aa0 	vmul.f32	s15, s15, s1
{
 8008eb6:	ed2d 8b04 	vpush	{d8-d9}
			0,
			64*T1*ang_v*ang_v / (2*decel_deg)
	};
	float move_angle[3] = {
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008eba:	ee17 0a10 	vmov	r0, s14
	TargetAngularV = 0;
 8008ebe:	601c      	str	r4, [r3, #0]
{
 8008ec0:	eeb0 9a60 	vmov.f32	s18, s1
 8008ec4:	eef0 8a40 	vmov.f32	s17, s0
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008ec8:	ee87 8aa6 	vdiv.f32	s16, s15, s13
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008ecc:	f7ff fa74 	bl	80083b8 <__aeabi_f2d>
 8008ed0:	a38b      	add	r3, pc, #556	; (adr r3, 8009100 <Rotate+0x270>)
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	f7ff fac7 	bl	8008468 <__aeabi_dmul>
 8008eda:	2200      	movs	r2, #0
 8008edc:	4b8f      	ldr	r3, [pc, #572]	; (800911c <Rotate+0x28c>)
 8008ede:	f7ff fbed 	bl	80086bc <__aeabi_ddiv>
 8008ee2:	f7ff fdb9 	bl	8008a58 <__aeabi_d2f>
		}

	}
#endif

	if( ang_v > 0)	//右回転
 8008ee6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8008eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008eee:	ee09 0a90 	vmov	s19, r0
	if( ang_v > 0)	//右回転
 8008ef2:	dc0b      	bgt.n	8008f0c <Rotate+0x7c>
				 break;
			 }
		}

	}
	else if( ang_v < 0)
 8008ef4:	f100 808b 	bmi.w	800900e <Rotate+0x17e>
			 		break;
			 }
		}

	}
	AngularAcceleration = 0;
 8008ef8:	4b89      	ldr	r3, [pc, #548]	; (8009120 <Rotate+0x290>)
 8008efa:	601c      	str	r4, [r3, #0]
	//TargetAngularV = 0;
	//printf("加速後の角速度 : %f\r\n",AngularV);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",AngularAcceleration);

	WaitStopAndReset();
 8008efc:	f7ff ff88 	bl	8008e10 <WaitStopAndReset>
	KeepPulse[BODY] = KeepPulse[BODY];

	//向いた方角を変える
//	ChangeCardinal();
	//printf("回転終了\r\n");
}
 8008f00:	ecbd 8b04 	vpop	{d8-d9}
 8008f04:	4b87      	ldr	r3, [pc, #540]	; (8009124 <Rotate+0x294>)
	KeepPulse[BODY] = KeepPulse[BODY];
 8008f06:	689a      	ldr	r2, [r3, #8]
 8008f08:	609a      	str	r2, [r3, #8]
}
 8008f0a:	bd70      	pop	{r4, r5, r6, pc}
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f0c:	4c86      	ldr	r4, [pc, #536]	; (8009128 <Rotate+0x298>)
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f0e:	4d87      	ldr	r5, [pc, #540]	; (800912c <Rotate+0x29c>)
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f10:	edd4 7a00 	vldr	s15, [r4]
 8008f14:	4e82      	ldr	r6, [pc, #520]	; (8009120 <Rotate+0x290>)
 8008f16:	ee79 7aa7 	vadd.f32	s15, s19, s15
		ChangeLED(2);
 8008f1a:	2002      	movs	r0, #2
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f1c:	edc4 7a00 	vstr	s15, [r4]
		ChangeLED(2);
 8008f20:	f004 fd2e 	bl	800d980 <ChangeLED>
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f24:	ed94 7a00 	vldr	s14, [r4]
 8008f28:	edd5 7a00 	vldr	s15, [r5]
 8008f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f34:	dd0a      	ble.n	8008f4c <Rotate+0xbc>
			AngularAcceleration = angular_acceleration[0]; //ここまで
 8008f36:	ed86 8a00 	vstr	s16, [r6]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f3a:	ed94 7a00 	vldr	s14, [r4]
 8008f3e:	edd5 7a00 	vldr	s15, [r5]
 8008f42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f4a:	dcf4      	bgt.n	8008f36 <Rotate+0xa6>
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f4c:	edd4 7a00 	vldr	s15, [r4]
 8008f50:	ee79 7aa7 	vadd.f32	s15, s19, s15
		ChangeLED(3);
 8008f54:	2003      	movs	r0, #3
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f56:	edc4 7a00 	vstr	s15, [r4]
		ChangeLED(3);
 8008f5a:	f004 fd11 	bl	800d980 <ChangeLED>
		while(TargetAngle > Angle)
 8008f5e:	ed94 7a00 	vldr	s14, [r4]
 8008f62:	edd5 7a00 	vldr	s15, [r5]
 8008f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f6e:	dd0a      	ble.n	8008f86 <Rotate+0xf6>
			AngularAcceleration = angular_acceleration[1];//0
 8008f70:	2300      	movs	r3, #0
 8008f72:	6033      	str	r3, [r6, #0]
		while(TargetAngle > Angle)
 8008f74:	ed94 7a00 	vldr	s14, [r4]
 8008f78:	edd5 7a00 	vldr	s15, [r5]
 8008f7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f84:	dcf5      	bgt.n	8008f72 <Rotate+0xe2>
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f86:	edd4 7a00 	vldr	s15, [r4]
			 if( AngularV <= 0)
 8008f8a:	4b69      	ldr	r3, [pc, #420]	; (8009130 <Rotate+0x2a0>)
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f8c:	ee79 9aa7 	vadd.f32	s19, s19, s15
			 AngularAcceleration = -angular_acceleration[2];
 8008f90:	eeb1 8a48 	vneg.f32	s16, s16
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f94:	edc4 9a00 	vstr	s19, [r4]
		while(TargetAngle > Angle)
 8008f98:	e008      	b.n	8008fac <Rotate+0x11c>
			 AngularAcceleration = -angular_acceleration[2];
 8008f9a:	ed86 8a00 	vstr	s16, [r6]
			 if( AngularV <= 0)
 8008f9e:	edd3 7a00 	vldr	s15, [r3]
 8008fa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008faa:	d908      	bls.n	8008fbe <Rotate+0x12e>
		while(TargetAngle > Angle)
 8008fac:	ed94 7a00 	vldr	s14, [r4]
 8008fb0:	edd5 7a00 	vldr	s15, [r5]
 8008fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fbc:	dced      	bgt.n	8008f9a <Rotate+0x10a>
	AngularAcceleration = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	6033      	str	r3, [r6, #0]
	WaitStopAndReset();
 8008fc2:	f7ff ff25 	bl	8008e10 <WaitStopAndReset>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8008fc6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8009134 <Rotate+0x2a4>
 8008fca:	eec8 7aa7 	vdiv.f32	s15, s17, s15
 8008fce:	ee17 0a90 	vmov	r0, s15
 8008fd2:	f7ff f9f1 	bl	80083b8 <__aeabi_f2d>
 8008fd6:	a34c      	add	r3, pc, #304	; (adr r3, 8009108 <Rotate+0x278>)
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f7ff fa44 	bl	8008468 <__aeabi_dmul>
 8008fe0:	f7ff fcf2 	bl	80089c8 <__aeabi_d2iz>
	if(ang_v < 0)
 8008fe4:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8008fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8008fec:	4602      	mov	r2, r0
	if(ang_v < 0)
 8008fee:	d475      	bmi.n	80090dc <Rotate+0x24c>
		KeepPulse[LEFT] += target_pulse/2;
 8008ff0:	4b4c      	ldr	r3, [pc, #304]	; (8009124 <Rotate+0x294>)
 8008ff2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	1040      	asrs	r0, r0, #1
 8008ffa:	4402      	add	r2, r0
 8008ffc:	601a      	str	r2, [r3, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 8008ffe:	685a      	ldr	r2, [r3, #4]
}
 8009000:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] -= target_pulse/2;
 8009004:	1a10      	subs	r0, r2, r0
 8009006:	6058      	str	r0, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 8009008:	689a      	ldr	r2, [r3, #8]
 800900a:	609a      	str	r2, [r3, #8]
}
 800900c:	bd70      	pop	{r4, r5, r6, pc}
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800900e:	4c46      	ldr	r4, [pc, #280]	; (8009128 <Rotate+0x298>)
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009010:	4d46      	ldr	r5, [pc, #280]	; (800912c <Rotate+0x29c>)
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009012:	edd4 7a00 	vldr	s15, [r4]
 8009016:	4e42      	ldr	r6, [pc, #264]	; (8009120 <Rotate+0x290>)
 8009018:	ee77 7ae9 	vsub.f32	s15, s15, s19
 800901c:	edc4 7a00 	vstr	s15, [r4]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009020:	ed94 7a00 	vldr	s14, [r4]
 8009024:	edd5 7a00 	vldr	s15, [r5]
 8009028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800902c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009030:	d50c      	bpl.n	800904c <Rotate+0x1bc>
 8009032:	eef1 6a48 	vneg.f32	s13, s16
			AngularAcceleration = -angular_acceleration[0]; //ここまで
 8009036:	edc6 6a00 	vstr	s13, [r6]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800903a:	ed94 7a00 	vldr	s14, [r4]
 800903e:	edd5 7a00 	vldr	s15, [r5]
 8009042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800904a:	d4f4      	bmi.n	8009036 <Rotate+0x1a6>
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800904c:	edd4 7a00 	vldr	s15, [r4]
 8009050:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8009054:	edc4 7a00 	vstr	s15, [r4]
		while(TargetAngle < Angle)
 8009058:	ed94 7a00 	vldr	s14, [r4]
 800905c:	edd5 7a00 	vldr	s15, [r5]
 8009060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009068:	d50a      	bpl.n	8009080 <Rotate+0x1f0>
			AngularAcceleration = angular_acceleration[1];//0
 800906a:	2300      	movs	r3, #0
 800906c:	6033      	str	r3, [r6, #0]
		while(TargetAngle < Angle)
 800906e:	ed94 7a00 	vldr	s14, [r4]
 8009072:	edd5 7a00 	vldr	s15, [r5]
 8009076:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800907a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800907e:	d4f5      	bmi.n	800906c <Rotate+0x1dc>
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009080:	edd4 7a00 	vldr	s15, [r4]
			 if( AngularV >= 0)
 8009084:	4b2a      	ldr	r3, [pc, #168]	; (8009130 <Rotate+0x2a0>)
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009086:	ee77 9ae9 	vsub.f32	s19, s15, s19
 800908a:	edc4 9a00 	vstr	s19, [r4]
		while(TargetAngle < Angle)
 800908e:	e008      	b.n	80090a2 <Rotate+0x212>
			 AngularAcceleration = angular_acceleration[2];
 8009090:	ed86 8a00 	vstr	s16, [r6]
			 if( AngularV >= 0)
 8009094:	edd3 7a00 	vldr	s15, [r3]
 8009098:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800909c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a0:	da08      	bge.n	80090b4 <Rotate+0x224>
		while(TargetAngle < Angle)
 80090a2:	ed94 7a00 	vldr	s14, [r4]
 80090a6:	edd5 7a00 	vldr	s15, [r5]
 80090aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b2:	d4ed      	bmi.n	8009090 <Rotate+0x200>
	AngularAcceleration = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	6033      	str	r3, [r6, #0]
	WaitStopAndReset();
 80090b8:	f7ff feaa 	bl	8008e10 <WaitStopAndReset>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 80090bc:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8009134 <Rotate+0x2a4>
 80090c0:	eec8 7aa7 	vdiv.f32	s15, s17, s15
 80090c4:	ee17 0a90 	vmov	r0, s15
 80090c8:	f7ff f976 	bl	80083b8 <__aeabi_f2d>
 80090cc:	a30e      	add	r3, pc, #56	; (adr r3, 8009108 <Rotate+0x278>)
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	f7ff f9c9 	bl	8008468 <__aeabi_dmul>
 80090d6:	f7ff fc77 	bl	80089c8 <__aeabi_d2iz>
 80090da:	4602      	mov	r2, r0
		KeepPulse[LEFT] -= target_pulse/2;
 80090dc:	4b11      	ldr	r3, [pc, #68]	; (8009124 <Rotate+0x294>)
 80090de:	6819      	ldr	r1, [r3, #0]
 80090e0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80090e4:	eba1 0162 	sub.w	r1, r1, r2, asr #1
 80090e8:	6019      	str	r1, [r3, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 80090ea:	6858      	ldr	r0, [r3, #4]
}
 80090ec:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] += target_pulse/2;
 80090f0:	eb00 0262 	add.w	r2, r0, r2, asr #1
 80090f4:	605a      	str	r2, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	609a      	str	r2, [r3, #8]
}
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	f3af 8000 	nop.w
 8009100:	54442d18 	.word	0x54442d18
 8009104:	400921fb 	.word	0x400921fb
 8009108:	cb326649 	.word	0xcb326649
 800910c:	40fa15d6 	.word	0x40fa15d6
 8009110:	42b40000 	.word	0x42b40000
 8009114:	3d83126f 	.word	0x3d83126f
 8009118:	20000c5c 	.word	0x20000c5c
 800911c:	40668000 	.word	0x40668000
 8009120:	20000238 	.word	0x20000238
 8009124:	20000cb0 	.word	0x20000cb0
 8009128:	20000244 	.word	0x20000244
 800912c:	20000234 	.word	0x20000234
 8009130:	20000240 	.word	0x20000240
 8009134:	43b40000 	.word	0x43b40000

08009138 <getFrontWall>:
}

int getFrontWall()
{

	switch(Pos.Car)//方角に合わせて、
 8009138:	4b1b      	ldr	r3, [pc, #108]	; (80091a8 <getFrontWall+0x70>)
 800913a:	795a      	ldrb	r2, [r3, #5]
 800913c:	2a06      	cmp	r2, #6
 800913e:	d830      	bhi.n	80091a2 <getFrontWall+0x6a>
 8009140:	e8df f002 	tbb	[pc, r2]
 8009144:	2f192f24 	.word	0x2f192f24
 8009148:	2f0e      	.short	0x2f0e
 800914a:	04          	.byte	0x04
 800914b:	00          	.byte	0x00

	break;

	case west:

	return Wall[Pos.X][Pos.Y].west;
 800914c:	781a      	ldrb	r2, [r3, #0]
 800914e:	7859      	ldrb	r1, [r3, #1]
 8009150:	4b16      	ldr	r3, [pc, #88]	; (80091ac <getFrontWall+0x74>)
 8009152:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8009156:	440a      	add	r2, r1
 8009158:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800915c:	0980      	lsrs	r0, r0, #6
 800915e:	4770      	bx	lr
	return Wall[Pos.X][Pos.Y].south;
 8009160:	781a      	ldrb	r2, [r3, #0]
 8009162:	7859      	ldrb	r1, [r3, #1]
 8009164:	4b11      	ldr	r3, [pc, #68]	; (80091ac <getFrontWall+0x74>)
 8009166:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800916a:	440a      	add	r2, r1
 800916c:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8009170:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8009174:	4770      	bx	lr
	return Wall[Pos.X][Pos.Y].east;
 8009176:	781a      	ldrb	r2, [r3, #0]
 8009178:	7859      	ldrb	r1, [r3, #1]
 800917a:	4b0c      	ldr	r3, [pc, #48]	; (80091ac <getFrontWall+0x74>)
 800917c:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8009180:	440a      	add	r2, r1
 8009182:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8009186:	f3c0 0081 	ubfx	r0, r0, #2, #2
 800918a:	4770      	bx	lr
	return Wall[Pos.X][Pos.Y].north;
 800918c:	781a      	ldrb	r2, [r3, #0]
 800918e:	7859      	ldrb	r1, [r3, #1]
 8009190:	4b06      	ldr	r3, [pc, #24]	; (80091ac <getFrontWall+0x74>)
 8009192:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8009196:	440a      	add	r2, r1
 8009198:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800919c:	f000 0003 	and.w	r0, r0, #3
 80091a0:	4770      	bx	lr

	break;

	default:
		return 999;
 80091a2:	f240 30e7 	movw	r0, #999	; 0x3e7
	break;

	}

}
 80091a6:	4770      	bx	lr
 80091a8:	20000004 	.word	0x20000004
 80091ac:	20000e44 	.word	0x20000e44

080091b0 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80091b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
	float pre = Sla.Pre;         //スラローム前距離
	float fol = Sla.Fol;         //スラローム後距離
 80091b4:	4dc4      	ldr	r5, [pc, #784]	; (80094c8 <SlalomRight+0x318>)
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80091b6:	4bc5      	ldr	r3, [pc, #788]	; (80094cc <SlalomRight+0x31c>)
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
	//float alalpha_turn = Sla.Alalpha;
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 80091b8:	6928      	ldr	r0, [r5, #16]
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80091ba:	f8d3 a000 	ldr.w	sl, [r3]
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
 80091be:	f8df b344 	ldr.w	fp, [pc, #836]	; 8009504 <SlalomRight+0x354>
	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091c2:	4cc3      	ldr	r4, [pc, #780]	; (80094d0 <SlalomRight+0x320>)
{
 80091c4:	ed2d 8b06 	vpush	{d8-d10}
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 80091c8:	f7ff f8f6 	bl	80083b8 <__aeabi_f2d>
 80091cc:	a3b8      	add	r3, pc, #736	; (adr r3, 80094b0 <SlalomRight+0x300>)
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	f7ff f949 	bl	8008468 <__aeabi_dmul>
 80091d6:	2200      	movs	r2, #0
 80091d8:	4bbe      	ldr	r3, [pc, #760]	; (80094d4 <SlalomRight+0x324>)
	float fol = Sla.Fol;         //スラローム後距離
 80091da:	edd5 9a01 	vldr	s19, [r5, #4]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 80091de:	ed95 8a02 	vldr	s16, [r5, #8]
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 80091e2:	f7ff fa6b 	bl	80086bc <__aeabi_ddiv>
 80091e6:	f7ff fc37 	bl	8008a58 <__aeabi_d2f>
 80091ea:	ee0a 0a10 	vmov	s20, r0
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 80091ee:	6968      	ldr	r0, [r5, #20]
 80091f0:	f7ff f8e2 	bl	80083b8 <__aeabi_f2d>
 80091f4:	a3ae      	add	r3, pc, #696	; (adr r3, 80094b0 <SlalomRight+0x300>)
 80091f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fa:	f7ff f935 	bl	8008468 <__aeabi_dmul>
 80091fe:	2200      	movs	r2, #0
 8009200:	4bb4      	ldr	r3, [pc, #720]	; (80094d4 <SlalomRight+0x324>)
 8009202:	f7ff fa5b 	bl	80086bc <__aeabi_ddiv>
 8009206:	f7ff fc27 	bl	8008a58 <__aeabi_d2f>
 800920a:	ee09 0a10 	vmov	s18, r0
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 800920e:	69a8      	ldr	r0, [r5, #24]
 8009210:	f7ff f8d2 	bl	80083b8 <__aeabi_f2d>
 8009214:	a3a6      	add	r3, pc, #664	; (adr r3, 80094b0 <SlalomRight+0x300>)
 8009216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921a:	f7ff f925 	bl	8008468 <__aeabi_dmul>
 800921e:	2200      	movs	r2, #0
 8009220:	4bac      	ldr	r3, [pc, #688]	; (80094d4 <SlalomRight+0x324>)
 8009222:	f7ff fa4b 	bl	80086bc <__aeabi_ddiv>
 8009226:	f7ff fc17 	bl	8008a58 <__aeabi_d2f>
	float now_angv = AngularV;
 800922a:	f8db 3000 	ldr.w	r3, [fp]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 800922e:	f8d4 9000 	ldr.w	r9, [r4]
 8009232:	f8d4 8004 	ldr.w	r8, [r4, #4]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009236:	ee08 0a90 	vmov	s17, r0
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 800923a:	f7ff ff7d 	bl	8009138 <getFrontWall>
 800923e:	2801      	cmp	r0, #1
 8009240:	d044      	beq.n	80092cc <SlalomRight+0x11c>


	}
	else//なければ
	{
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009242:	edd5 7a00 	vldr	s15, [r5]
 8009246:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800924a:	ee17 0a90 	vmov	r0, s15
 800924e:	f7ff f8b3 	bl	80083b8 <__aeabi_f2d>
 8009252:	a399      	add	r3, pc, #612	; (adr r3, 80094b8 <SlalomRight+0x308>)
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	f7ff fa30 	bl	80086bc <__aeabi_ddiv>
 800925c:	4606      	mov	r6, r0
 800925e:	eb09 0008 	add.w	r0, r9, r8
 8009262:	460f      	mov	r7, r1
 8009264:	f7ff f896 	bl	8008394 <__aeabi_i2d>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	4630      	mov	r0, r6
 800926e:	4639      	mov	r1, r7
 8009270:	f7fe ff44 	bl	80080fc <__adddf3>
 8009274:	4606      	mov	r6, r0
 8009276:	6820      	ldr	r0, [r4, #0]
 8009278:	6863      	ldr	r3, [r4, #4]
 800927a:	4418      	add	r0, r3
 800927c:	460f      	mov	r7, r1
 800927e:	f7ff f889 	bl	8008394 <__aeabi_i2d>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4630      	mov	r0, r6
 8009288:	4639      	mov	r1, r7
 800928a:	f7ff fb7d 	bl	8008988 <__aeabi_dcmpgt>
 800928e:	2800      	cmp	r0, #0
 8009290:	f000 8104 	beq.w	800949c <SlalomRight+0x2ec>
 8009294:	4d90      	ldr	r5, [pc, #576]	; (80094d8 <SlalomRight+0x328>)
 8009296:	f8df 9270 	ldr.w	r9, [pc, #624]	; 8009508 <SlalomRight+0x358>
 800929a:	f8df 8254 	ldr.w	r8, [pc, #596]	; 80094f0 <SlalomRight+0x340>
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 800929e:	eddf aa8f 	vldr	s21, [pc, #572]	; 80094dc <SlalomRight+0x32c>
 80092a2:	edc5 aa00 	vstr	s21, [r5]
				AngularLeapsity = 0;
				AngularAcceleration = 0;
 80092a6:	edc9 aa00 	vstr	s21, [r9]
				TargetVelocity[BODY] = v_turn;
 80092aa:	f8c8 a008 	str.w	sl, [r8, #8]
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80092ae:	6820      	ldr	r0, [r4, #0]
 80092b0:	6863      	ldr	r3, [r4, #4]
 80092b2:	4418      	add	r0, r3
 80092b4:	f7ff f86e 	bl	8008394 <__aeabi_i2d>
 80092b8:	4632      	mov	r2, r6
 80092ba:	463b      	mov	r3, r7
 80092bc:	f7ff fb46 	bl	800894c <__aeabi_dcmplt>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d1ee      	bne.n	80092a2 <SlalomRight+0xf2>
 80092c4:	4e86      	ldr	r6, [pc, #536]	; (80094e0 <SlalomRight+0x330>)
 80092c6:	edc6 aa00 	vstr	s21, [r6]
 80092ca:	e025      	b.n	8009318 <SlalomRight+0x168>
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80092cc:	4b85      	ldr	r3, [pc, #532]	; (80094e4 <SlalomRight+0x334>)
 80092ce:	4e84      	ldr	r6, [pc, #528]	; (80094e0 <SlalomRight+0x330>)
 80092d0:	ed93 7a00 	vldr	s14, [r3]
 80092d4:	ed93 6a03 	vldr	s12, [r3, #12]
 80092d8:	6831      	ldr	r1, [r6, #0]
 80092da:	4d7f      	ldr	r5, [pc, #508]	; (80094d8 <SlalomRight+0x328>)
 80092dc:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8009508 <SlalomRight+0x358>
 80092e0:	eddf 7a81 	vldr	s15, [pc, #516]	; 80094e8 <SlalomRight+0x338>
 80092e4:	eddf 6a81 	vldr	s13, [pc, #516]	; 80094ec <SlalomRight+0x33c>
			TargetVelocity[BODY] = v_turn;
 80092e8:	4881      	ldr	r0, [pc, #516]	; (80094f0 <SlalomRight+0x340>)
			TargetAngularV = 0;
 80092ea:	2300      	movs	r3, #0
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80092ec:	2200      	movs	r2, #0
 80092ee:	e006      	b.n	80092fe <SlalomRight+0x14e>
			TargetAngularV = 0;
 80092f0:	602b      	str	r3, [r5, #0]
			AngularLeapsity = 0;
 80092f2:	4619      	mov	r1, r3
			AngularAcceleration = 0;
 80092f4:	f8c9 3000 	str.w	r3, [r9]
 80092f8:	2201      	movs	r2, #1
			TargetVelocity[BODY] = v_turn;
 80092fa:	f8c0 a008 	str.w	sl, [r0, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80092fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009306:	d4f3      	bmi.n	80092f0 <SlalomRight+0x140>
 8009308:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800930c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009310:	d4ee      	bmi.n	80092f0 <SlalomRight+0x140>
 8009312:	2a00      	cmp	r2, #0
 8009314:	f040 80c7 	bne.w	80094a6 <SlalomRight+0x2f6>
				////printf("直進1\r\n");
		}
	}
	now_angv = AngularV;

	float start_angle = Angle;
 8009318:	4b76      	ldr	r3, [pc, #472]	; (80094f4 <SlalomRight+0x344>)
	now_angv = AngularV;
 800931a:	f8db 2000 	ldr.w	r2, [fp]
	float start_angle = Angle;
 800931e:	ed93 7a00 	vldr	s14, [r3]

	while(start_angle + ang1 > Angle)
 8009322:	edd3 7a00 	vldr	s15, [r3]
 8009326:	ee7a 6a07 	vadd.f32	s13, s20, s14
 800932a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800932e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009332:	dd0c      	ble.n	800934e <SlalomRight+0x19e>
 8009334:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80094f0 <SlalomRight+0x340>

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
		//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009338:	ed89 8a00 	vstr	s16, [r9]
			TargetVelocity[BODY] = v_turn;
 800933c:	f8c8 a008 	str.w	sl, [r8, #8]
	while(start_angle + ang1 > Angle)
 8009340:	edd3 7a00 	vldr	s15, [r3]
 8009344:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934c:	d4f4      	bmi.n	8009338 <SlalomRight+0x188>
			}
#endif

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 800934e:	2200      	movs	r2, #0
 8009350:	f8c9 2000 	str.w	r2, [r9]
	AngularLeapsity = 0;
	now_angv = AngularV;
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 8009354:	ee79 6a07 	vadd.f32	s13, s18, s14
	now_angv = AngularV;
 8009358:	f8db 1000 	ldr.w	r1, [fp]
	while(start_angle + ang2 > Angle)
 800935c:	edd3 7a00 	vldr	s15, [r3]
	AngularLeapsity = 0;
 8009360:	6032      	str	r2, [r6, #0]
	while(start_angle + ang2 > Angle)
 8009362:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800936a:	dd0c      	ble.n	8009386 <SlalomRight+0x1d6>
 800936c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80094f0 <SlalomRight+0x340>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009370:	682a      	ldr	r2, [r5, #0]
 8009372:	602a      	str	r2, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 8009374:	f8c8 a008 	str.w	sl, [r8, #8]
	while(start_angle + ang2 > Angle)
 8009378:	edd3 7a00 	vldr	s15, [r3]
 800937c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009384:	d4f4      	bmi.n	8009370 <SlalomRight+0x1c0>

			}
#endif
	}

	now_angv = AngularV;
 8009386:	f8db 2000 	ldr.w	r2, [fp]
	while( start_angle + ang3 > Angle)
 800938a:	edd3 7a00 	vldr	s15, [r3]
 800938e:	ee38 7a87 	vadd.f32	s14, s17, s14
 8009392:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800939a:	dd1f      	ble.n	80093dc <SlalomRight+0x22c>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 800939c:	eeb1 8a48 	vneg.f32	s16, s16
 80093a0:	ed89 8a00 	vstr	s16, [r9]
			if(TargetAngularV < 0)
 80093a4:	edd5 7a00 	vldr	s15, [r5]
 80093a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b0:	d471      	bmi.n	8009496 <SlalomRight+0x2e6>
 80093b2:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80094f0 <SlalomRight+0x340>
 80093b6:	e008      	b.n	80093ca <SlalomRight+0x21a>
			AngularAcceleration = -alpha_turn;
 80093b8:	ed89 8a00 	vstr	s16, [r9]
			if(TargetAngularV < 0)
 80093bc:	edd5 7a00 	vldr	s15, [r5]
 80093c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093c8:	d465      	bmi.n	8009496 <SlalomRight+0x2e6>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = v_turn;
 80093ca:	f8c8 a008 	str.w	sl, [r8, #8]
	while( start_angle + ang3 > Angle)
 80093ce:	edd3 7a00 	vldr	s15, [r3]
 80093d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093da:	d4ed      	bmi.n	80093b8 <SlalomRight+0x208>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 80093dc:	f04f 0b00 	mov.w	fp, #0
	AngularLeapsity = 0;
	TargetAngularV = 0;
	Calc = SearchOrFast;
 80093e0:	4b45      	ldr	r3, [pc, #276]	; (80094f8 <SlalomRight+0x348>)
	AngularAcceleration = 0;
 80093e2:	f8c9 b000 	str.w	fp, [r9]
	Calc = SearchOrFast;
 80093e6:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800950c <SlalomRight+0x35c>
	TargetAngularV = 0;
 80093ea:	f8c5 b000 	str.w	fp, [r5]
	Calc = SearchOrFast;
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f8c8 3000 	str.w	r3, [r8]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 80093f4:	6820      	ldr	r0, [r4, #0]
 80093f6:	6863      	ldr	r3, [r4, #4]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
			TargetVelocity[BODY] = v_turn;
 80093f8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80094f0 <SlalomRight+0x340>
 80093fc:	4418      	add	r0, r3
 80093fe:	f7fe ffc9 	bl	8008394 <__aeabi_i2d>
 8009402:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8009406:	4606      	mov	r6, r0
 8009408:	ee17 0a90 	vmov	r0, s15
 800940c:	460f      	mov	r7, r1
 800940e:	f7fe ffd3 	bl	80083b8 <__aeabi_f2d>
 8009412:	a329      	add	r3, pc, #164	; (adr r3, 80094b8 <SlalomRight+0x308>)
 8009414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009418:	f7ff f950 	bl	80086bc <__aeabi_ddiv>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4630      	mov	r0, r6
 8009422:	4639      	mov	r1, r7
 8009424:	f7fe fe6a 	bl	80080fc <__adddf3>
 8009428:	4606      	mov	r6, r0
 800942a:	460f      	mov	r7, r1
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800942c:	e006      	b.n	800943c <SlalomRight+0x28c>
			TargetAngularV = 0;
 800942e:	f8c5 b000 	str.w	fp, [r5]
			TargetVelocity[BODY] = v_turn;
 8009432:	f8c9 a008 	str.w	sl, [r9, #8]
			//printf("直進2\r\n");

			//後半の直線に入ったら計算する。
			if(Calc == 0)
 8009436:	f8d8 3000 	ldr.w	r3, [r8]
 800943a:	b30b      	cbz	r3, 8009480 <SlalomRight+0x2d0>
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800943c:	6820      	ldr	r0, [r4, #0]
 800943e:	6863      	ldr	r3, [r4, #4]
 8009440:	4418      	add	r0, r3
 8009442:	f7fe ffa7 	bl	8008394 <__aeabi_i2d>
 8009446:	4632      	mov	r2, r6
 8009448:	463b      	mov	r3, r7
 800944a:	f7ff fa7f 	bl	800894c <__aeabi_dcmplt>
 800944e:	2800      	cmp	r0, #0
 8009450:	d1ed      	bne.n	800942e <SlalomRight+0x27e>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
			}
	}
	TargetAngle += 90*M_PI/180;
 8009452:	4d2a      	ldr	r5, [pc, #168]	; (80094fc <SlalomRight+0x34c>)
 8009454:	6828      	ldr	r0, [r5, #0]
 8009456:	f7fe ffaf 	bl	80083b8 <__aeabi_f2d>
 800945a:	a319      	add	r3, pc, #100	; (adr r3, 80094c0 <SlalomRight+0x310>)
 800945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009460:	f7fe fe4c 	bl	80080fc <__adddf3>
 8009464:	f7ff faf8 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009468:	4a25      	ldr	r2, [pc, #148]	; (8009500 <SlalomRight+0x350>)
	TargetAngle += 90*M_PI/180;
 800946a:	6028      	str	r0, [r5, #0]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 800946c:	ecbd 8b06 	vpop	{d8-d10}
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009470:	68a3      	ldr	r3, [r4, #8]
 8009472:	6890      	ldr	r0, [r2, #8]
 8009474:	6891      	ldr	r1, [r2, #8]
 8009476:	1a1b      	subs	r3, r3, r0
 8009478:	440b      	add	r3, r1
 800947a:	6093      	str	r3, [r2, #8]
}
 800947c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009480:	f001 f85a 	bl	800a538 <wall_set>
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009484:	2107      	movs	r1, #7
 8009486:	4608      	mov	r0, r1
 8009488:	2201      	movs	r2, #1
 800948a:	f001 f901 	bl	800a690 <make_map>
				Calc = 1;
 800948e:	2301      	movs	r3, #1
 8009490:	f8c8 3000 	str.w	r3, [r8]
 8009494:	e7d2      	b.n	800943c <SlalomRight+0x28c>
				TargetAngularV = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	602b      	str	r3, [r5, #0]
				break;
 800949a:	e79f      	b.n	80093dc <SlalomRight+0x22c>
 800949c:	4e10      	ldr	r6, [pc, #64]	; (80094e0 <SlalomRight+0x330>)
 800949e:	4d0e      	ldr	r5, [pc, #56]	; (80094d8 <SlalomRight+0x328>)
 80094a0:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8009508 <SlalomRight+0x358>
 80094a4:	e738      	b.n	8009318 <SlalomRight+0x168>
 80094a6:	6031      	str	r1, [r6, #0]
 80094a8:	e736      	b.n	8009318 <SlalomRight+0x168>
 80094aa:	bf00      	nop
 80094ac:	f3af 8000 	nop.w
 80094b0:	54442d18 	.word	0x54442d18
 80094b4:	400921fb 	.word	0x400921fb
 80094b8:	23ca2666 	.word	0x23ca2666
 80094bc:	3f509268 	.word	0x3f509268
 80094c0:	54442d18 	.word	0x54442d18
 80094c4:	3ff921fb 	.word	0x3ff921fb
 80094c8:	20000c94 	.word	0x20000c94
 80094cc:	20000d70 	.word	0x20000d70
 80094d0:	20000c7c 	.word	0x20000c7c
 80094d4:	40668000 	.word	0x40668000
 80094d8:	20000c5c 	.word	0x20000c5c
 80094dc:	00000000 	.word	0x00000000
 80094e0:	2000023c 	.word	0x2000023c
 80094e4:	20000cbc 	.word	0x20000cbc
 80094e8:	43480000 	.word	0x43480000
 80094ec:	437a0000 	.word	0x437a0000
 80094f0:	20000c4c 	.word	0x20000c4c
 80094f4:	20000234 	.word	0x20000234
 80094f8:	20000ee8 	.word	0x20000ee8
 80094fc:	20000244 	.word	0x20000244
 8009500:	20000cb0 	.word	0x20000cb0
 8009504:	20000240 	.word	0x20000240
 8009508:	20000238 	.word	0x20000238
 800950c:	20000eec 	.word	0x20000eec

08009510 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009514:	4abc      	ldr	r2, [pc, #752]	; (8009808 <SlalomLeft+0x2f8>)
	float pre = Sla.Pre;         //スラローム前距離
	float fol = Sla.Fol;         //スラローム後距離
 8009516:	4dbd      	ldr	r5, [pc, #756]	; (800980c <SlalomLeft+0x2fc>)
	Pos.Act = slalom;
 8009518:	4bbd      	ldr	r3, [pc, #756]	; (8009810 <SlalomLeft+0x300>)
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 800951a:	6816      	ldr	r6, [r2, #0]
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
	//float alalpha_turn = -Sla.Alalpha;
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 800951c:	6928      	ldr	r0, [r5, #16]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 800951e:	4cbd      	ldr	r4, [pc, #756]	; (8009814 <SlalomLeft+0x304>)
	Pos.Act = slalom;
 8009520:	2202      	movs	r2, #2
{
 8009522:	ed2d 8b06 	vpush	{d8-d10}
	Pos.Act = slalom;
 8009526:	719a      	strb	r2, [r3, #6]
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009528:	f7fe ff46 	bl	80083b8 <__aeabi_f2d>
 800952c:	a3b0      	add	r3, pc, #704	; (adr r3, 80097f0 <SlalomLeft+0x2e0>)
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	f7fe ff99 	bl	8008468 <__aeabi_dmul>
 8009536:	2200      	movs	r2, #0
 8009538:	4bb7      	ldr	r3, [pc, #732]	; (8009818 <SlalomLeft+0x308>)
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 800953a:	ed95 9a02 	vldr	s18, [r5, #8]
	float fol = Sla.Fol;         //スラローム後距離
 800953e:	edd5 9a01 	vldr	s19, [r5, #4]
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009542:	f7ff f8bb 	bl	80086bc <__aeabi_ddiv>
 8009546:	f7ff fa87 	bl	8008a58 <__aeabi_d2f>
 800954a:	ee08 0a90 	vmov	s17, r0
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 800954e:	6968      	ldr	r0, [r5, #20]
 8009550:	f7fe ff32 	bl	80083b8 <__aeabi_f2d>
 8009554:	a3a6      	add	r3, pc, #664	; (adr r3, 80097f0 <SlalomLeft+0x2e0>)
 8009556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955a:	f7fe ff85 	bl	8008468 <__aeabi_dmul>
 800955e:	2200      	movs	r2, #0
 8009560:	4bad      	ldr	r3, [pc, #692]	; (8009818 <SlalomLeft+0x308>)
 8009562:	f7ff f8ab 	bl	80086bc <__aeabi_ddiv>
 8009566:	f7ff fa77 	bl	8008a58 <__aeabi_d2f>
 800956a:	ee08 0a10 	vmov	s16, r0
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 800956e:	69a8      	ldr	r0, [r5, #24]
 8009570:	f7fe ff22 	bl	80083b8 <__aeabi_f2d>
 8009574:	a39e      	add	r3, pc, #632	; (adr r3, 80097f0 <SlalomLeft+0x2e0>)
 8009576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957a:	f7fe ff75 	bl	8008468 <__aeabi_dmul>
 800957e:	2200      	movs	r2, #0
 8009580:	4ba5      	ldr	r3, [pc, #660]	; (8009818 <SlalomLeft+0x308>)
 8009582:	f7ff f89b 	bl	80086bc <__aeabi_ddiv>
 8009586:	f7ff fa67 	bl	8008a58 <__aeabi_d2f>
 800958a:	ee0a 0a90 	vmov	s21, r0
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 800958e:	f7ff fdd3 	bl	8009138 <getFrontWall>
 8009592:	2801      	cmp	r0, #1
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009594:	f8d4 a000 	ldr.w	sl, [r4]
 8009598:	6867      	ldr	r7, [r4, #4]
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 800959a:	eeb1 aa49 	vneg.f32	s20, s18
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 800959e:	f000 80f5 	beq.w	800978c <SlalomLeft+0x27c>


	}
	else//なければ
	{
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80095a2:	edd5 7a00 	vldr	s15, [r5]
 80095a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80095aa:	ee17 0a90 	vmov	r0, s15
 80095ae:	f7fe ff03 	bl	80083b8 <__aeabi_f2d>
 80095b2:	a391      	add	r3, pc, #580	; (adr r3, 80097f8 <SlalomLeft+0x2e8>)
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	f7ff f880 	bl	80086bc <__aeabi_ddiv>
 80095bc:	4680      	mov	r8, r0
 80095be:	eb0a 0007 	add.w	r0, sl, r7
 80095c2:	4689      	mov	r9, r1
 80095c4:	f7fe fee6 	bl	8008394 <__aeabi_i2d>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4640      	mov	r0, r8
 80095ce:	4649      	mov	r1, r9
 80095d0:	f7fe fd94 	bl	80080fc <__adddf3>
 80095d4:	4680      	mov	r8, r0
 80095d6:	6820      	ldr	r0, [r4, #0]
 80095d8:	6863      	ldr	r3, [r4, #4]
 80095da:	4418      	add	r0, r3
 80095dc:	4689      	mov	r9, r1
 80095de:	f7fe fed9 	bl	8008394 <__aeabi_i2d>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	4640      	mov	r0, r8
 80095e8:	4649      	mov	r1, r9
 80095ea:	f7ff f9cd 	bl	8008988 <__aeabi_dcmpgt>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	f000 80f6 	beq.w	80097e0 <SlalomLeft+0x2d0>
 80095f4:	4d89      	ldr	r5, [pc, #548]	; (800981c <SlalomLeft+0x30c>)
 80095f6:	f8df a250 	ldr.w	sl, [pc, #592]	; 8009848 <SlalomLeft+0x338>
 80095fa:	4f89      	ldr	r7, [pc, #548]	; (8009820 <SlalomLeft+0x310>)
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 80095fc:	f04f 0b00 	mov.w	fp, #0
 8009600:	f8c5 b000 	str.w	fp, [r5]
				AngularAcceleration = 0;
 8009604:	f8ca b000 	str.w	fp, [sl]
				TargetVelocity[BODY] = v_turn;
 8009608:	60be      	str	r6, [r7, #8]
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800960a:	6820      	ldr	r0, [r4, #0]
 800960c:	6863      	ldr	r3, [r4, #4]
 800960e:	4418      	add	r0, r3
 8009610:	f7fe fec0 	bl	8008394 <__aeabi_i2d>
 8009614:	4642      	mov	r2, r8
 8009616:	464b      	mov	r3, r9
 8009618:	f7ff f998 	bl	800894c <__aeabi_dcmplt>
 800961c:	2800      	cmp	r0, #0
 800961e:	d1ef      	bne.n	8009600 <SlalomLeft+0xf0>
 8009620:	f8df c228 	ldr.w	ip, [pc, #552]	; 800984c <SlalomLeft+0x33c>
				////printf("直進1\r\n");
		}
	}


	float start_angle = Angle;
 8009624:	4b7f      	ldr	r3, [pc, #508]	; (8009824 <SlalomLeft+0x314>)
 8009626:	edd3 7a00 	vldr	s15, [r3]
	while(start_angle - ang1 < Angle)
 800962a:	ed93 7a00 	vldr	s14, [r3]
 800962e:	ee77 6ae8 	vsub.f32	s13, s15, s17
 8009632:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963a:	d50a      	bpl.n	8009652 <SlalomLeft+0x142>
 800963c:	4f78      	ldr	r7, [pc, #480]	; (8009820 <SlalomLeft+0x310>)

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 800963e:	ed8a aa00 	vstr	s20, [sl]
			TargetVelocity[BODY] = v_turn;
 8009642:	60be      	str	r6, [r7, #8]
	while(start_angle - ang1 < Angle)
 8009644:	ed93 7a00 	vldr	s14, [r3]
 8009648:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800964c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009650:	dcf5      	bgt.n	800963e <SlalomLeft+0x12e>

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009652:	2200      	movs	r2, #0
 8009654:	f8ca 2000 	str.w	r2, [sl]
	AngularLeapsity = 0;
	//alpha_flag = 0;

	while(start_angle - ang2 < Angle)
 8009658:	ee77 6ac8 	vsub.f32	s13, s15, s16
 800965c:	ed93 7a00 	vldr	s14, [r3]
	AngularLeapsity = 0;
 8009660:	f8cc 2000 	str.w	r2, [ip]
	while(start_angle - ang2 < Angle)
 8009664:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800966c:	d50a      	bpl.n	8009684 <SlalomLeft+0x174>
 800966e:	4f6c      	ldr	r7, [pc, #432]	; (8009820 <SlalomLeft+0x310>)
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009670:	682a      	ldr	r2, [r5, #0]
 8009672:	602a      	str	r2, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 8009674:	60be      	str	r6, [r7, #8]
	while(start_angle - ang2 < Angle)
 8009676:	ed93 7a00 	vldr	s14, [r3]
 800967a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800967e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009682:	dcf5      	bgt.n	8009670 <SlalomLeft+0x160>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < Angle)
 8009684:	ee77 7aea 	vsub.f32	s15, s15, s21
 8009688:	ed93 7a00 	vldr	s14, [r3]
 800968c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009694:	d51b      	bpl.n	80096ce <SlalomLeft+0x1be>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 8009696:	ed8a 9a00 	vstr	s18, [sl]
			if(TargetAngularV > 0)
 800969a:	ed95 7a00 	vldr	s14, [r5]
 800969e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80096a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a6:	dc6e      	bgt.n	8009786 <SlalomLeft+0x276>
 80096a8:	4f5d      	ldr	r7, [pc, #372]	; (8009820 <SlalomLeft+0x310>)
 80096aa:	e008      	b.n	80096be <SlalomLeft+0x1ae>
			AngularAcceleration = -alpha_turn;
 80096ac:	ed8a 9a00 	vstr	s18, [sl]
			if(TargetAngularV > 0)
 80096b0:	ed95 7a00 	vldr	s14, [r5]
 80096b4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80096b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096bc:	dc63      	bgt.n	8009786 <SlalomLeft+0x276>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = v_turn;
 80096be:	60be      	str	r6, [r7, #8]
	while( start_angle - ang3 < Angle)
 80096c0:	ed93 7a00 	vldr	s14, [r3]
 80096c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80096c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096cc:	dcee      	bgt.n	80096ac <SlalomLeft+0x19c>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 80096ce:	ed9f 8a56 	vldr	s16, [pc, #344]	; 8009828 <SlalomLeft+0x318>
	AngularLeapsity = 0;
	TargetAngularV = 0;
	Calc = SearchOrFast;
 80096d2:	4b56      	ldr	r3, [pc, #344]	; (800982c <SlalomLeft+0x31c>)
	AngularAcceleration = 0;
 80096d4:	ed8a 8a00 	vstr	s16, [sl]
 80096d8:	ee79 7aa9 	vadd.f32	s15, s19, s19
	TargetAngularV = 0;
 80096dc:	ed85 8a00 	vstr	s16, [r5]
	Calc = SearchOrFast;
 80096e0:	4f53      	ldr	r7, [pc, #332]	; (8009830 <SlalomLeft+0x320>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	603b      	str	r3, [r7, #0]
 80096e6:	ee17 0a90 	vmov	r0, s15
 80096ea:	f7fe fe65 	bl	80083b8 <__aeabi_f2d>
 80096ee:	a342      	add	r3, pc, #264	; (adr r3, 80097f8 <SlalomLeft+0x2e8>)
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	f7fe ffe2 	bl	80086bc <__aeabi_ddiv>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 80096f8:	f8d4 b000 	ldr.w	fp, [r4]
 80096fc:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8009700:	4680      	mov	r8, r0
 8009702:	eb0b 000a 	add.w	r0, fp, sl
 8009706:	4689      	mov	r9, r1
 8009708:	f7fe fe44 	bl	8008394 <__aeabi_i2d>
 800970c:	4602      	mov	r2, r0
 800970e:	460b      	mov	r3, r1
 8009710:	4640      	mov	r0, r8
 8009712:	4649      	mov	r1, r9
 8009714:	f7fe fcf2 	bl	80080fc <__adddf3>
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
			TargetVelocity[BODY] = v_turn;
 8009718:	f8df a104 	ldr.w	sl, [pc, #260]	; 8009820 <SlalomLeft+0x310>
 800971c:	4680      	mov	r8, r0
 800971e:	4689      	mov	r9, r1
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009720:	e005      	b.n	800972e <SlalomLeft+0x21e>
			TargetAngularV = 0;
 8009722:	ed85 8a00 	vstr	s16, [r5]
			TargetVelocity[BODY] = v_turn;
 8009726:	f8ca 6008 	str.w	r6, [sl, #8]
			//printf("直進2\r\n");
			if(Calc == 0)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	b30b      	cbz	r3, 8009772 <SlalomLeft+0x262>
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800972e:	6820      	ldr	r0, [r4, #0]
 8009730:	6863      	ldr	r3, [r4, #4]
 8009732:	4418      	add	r0, r3
 8009734:	f7fe fe2e 	bl	8008394 <__aeabi_i2d>
 8009738:	4642      	mov	r2, r8
 800973a:	464b      	mov	r3, r9
 800973c:	f7ff f906 	bl	800894c <__aeabi_dcmplt>
 8009740:	2800      	cmp	r0, #0
 8009742:	d1ee      	bne.n	8009722 <SlalomLeft+0x212>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
			}
	}
	TargetAngle += -90*M_PI/180;
 8009744:	4d3b      	ldr	r5, [pc, #236]	; (8009834 <SlalomLeft+0x324>)
 8009746:	6828      	ldr	r0, [r5, #0]
 8009748:	f7fe fe36 	bl	80083b8 <__aeabi_f2d>
 800974c:	a32c      	add	r3, pc, #176	; (adr r3, 8009800 <SlalomLeft+0x2f0>)
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	f7fe fcd1 	bl	80080f8 <__aeabi_dsub>
 8009756:	f7ff f97f 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 800975a:	4a37      	ldr	r2, [pc, #220]	; (8009838 <SlalomLeft+0x328>)
	TargetAngle += -90*M_PI/180;
 800975c:	6028      	str	r0, [r5, #0]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 800975e:	ecbd 8b06 	vpop	{d8-d10}
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009762:	68a3      	ldr	r3, [r4, #8]
 8009764:	6890      	ldr	r0, [r2, #8]
 8009766:	6891      	ldr	r1, [r2, #8]
 8009768:	1a1b      	subs	r3, r3, r0
 800976a:	440b      	add	r3, r1
 800976c:	6093      	str	r3, [r2, #8]
}
 800976e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009772:	f000 fee1 	bl	800a538 <wall_set>
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009776:	2107      	movs	r1, #7
 8009778:	4608      	mov	r0, r1
 800977a:	2201      	movs	r2, #1
 800977c:	f000 ff88 	bl	800a690 <make_map>
				Calc = 1;
 8009780:	2301      	movs	r3, #1
 8009782:	603b      	str	r3, [r7, #0]
 8009784:	e7d3      	b.n	800972e <SlalomLeft+0x21e>
				TargetAngularV = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	602b      	str	r3, [r5, #0]
				break;
 800978a:	e7a0      	b.n	80096ce <SlalomLeft+0x1be>
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 800978c:	4b2b      	ldr	r3, [pc, #172]	; (800983c <SlalomLeft+0x32c>)
 800978e:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 800984c <SlalomLeft+0x33c>
 8009792:	ed93 7a00 	vldr	s14, [r3]
 8009796:	ed93 6a03 	vldr	s12, [r3, #12]
 800979a:	f8dc 1000 	ldr.w	r1, [ip]
 800979e:	4d1f      	ldr	r5, [pc, #124]	; (800981c <SlalomLeft+0x30c>)
 80097a0:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8009848 <SlalomLeft+0x338>
 80097a4:	eddf 7a26 	vldr	s15, [pc, #152]	; 8009840 <SlalomLeft+0x330>
 80097a8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009844 <SlalomLeft+0x334>
			TargetVelocity[BODY] = v_turn;
 80097ac:	481c      	ldr	r0, [pc, #112]	; (8009820 <SlalomLeft+0x310>)
			TargetAngularV = 0;
 80097ae:	2300      	movs	r3, #0
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80097b0:	2200      	movs	r2, #0
 80097b2:	e005      	b.n	80097c0 <SlalomLeft+0x2b0>
			TargetAngularV = 0;
 80097b4:	602b      	str	r3, [r5, #0]
			AngularLeapsity = 0;
 80097b6:	4619      	mov	r1, r3
			AngularAcceleration = 0;
 80097b8:	f8ca 3000 	str.w	r3, [sl]
 80097bc:	2201      	movs	r2, #1
			TargetVelocity[BODY] = v_turn;
 80097be:	6086      	str	r6, [r0, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80097c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c8:	d4f4      	bmi.n	80097b4 <SlalomLeft+0x2a4>
 80097ca:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80097ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d2:	d4ef      	bmi.n	80097b4 <SlalomLeft+0x2a4>
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	f43f af25 	beq.w	8009624 <SlalomLeft+0x114>
 80097da:	f8cc 1000 	str.w	r1, [ip]
 80097de:	e721      	b.n	8009624 <SlalomLeft+0x114>
 80097e0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800984c <SlalomLeft+0x33c>
 80097e4:	4d0d      	ldr	r5, [pc, #52]	; (800981c <SlalomLeft+0x30c>)
 80097e6:	f8df a060 	ldr.w	sl, [pc, #96]	; 8009848 <SlalomLeft+0x338>
 80097ea:	e71b      	b.n	8009624 <SlalomLeft+0x114>
 80097ec:	f3af 8000 	nop.w
 80097f0:	54442d18 	.word	0x54442d18
 80097f4:	400921fb 	.word	0x400921fb
 80097f8:	23ca2666 	.word	0x23ca2666
 80097fc:	3f509268 	.word	0x3f509268
 8009800:	54442d18 	.word	0x54442d18
 8009804:	3ff921fb 	.word	0x3ff921fb
 8009808:	20000d70 	.word	0x20000d70
 800980c:	20000c94 	.word	0x20000c94
 8009810:	20000004 	.word	0x20000004
 8009814:	20000c7c 	.word	0x20000c7c
 8009818:	40668000 	.word	0x40668000
 800981c:	20000c5c 	.word	0x20000c5c
 8009820:	20000c4c 	.word	0x20000c4c
 8009824:	20000234 	.word	0x20000234
 8009828:	00000000 	.word	0x00000000
 800982c:	20000ee8 	.word	0x20000ee8
 8009830:	20000eec 	.word	0x20000eec
 8009834:	20000244 	.word	0x20000244
 8009838:	20000cb0 	.word	0x20000cb0
 800983c:	20000cbc 	.word	0x20000cbc
 8009840:	43480000 	.word	0x43480000
 8009844:	437a0000 	.word	0x437a0000
 8009848:	20000238 	.word	0x20000238
 800984c:	2000023c 	.word	0x2000023c

08009850 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
//	Pos.Act = accel;
//	ControlWall();
	TargetAngularV = 0;
 8009850:	4a39      	ldr	r2, [pc, #228]	; (8009938 <Accel+0xe8>)
	additional_speed = explore_speed - CurrentVelocity[BODY];
	//printf("%f,%f,%f\r\n",additional_speed,explore_speed,CurrentVelocity[BODY]);
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulse[BODY];
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009852:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800993c <Accel+0xec>
{
 8009856:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TargetAngularV = 0;
 800985a:	2100      	movs	r1, #0
	additional_speed = explore_speed - CurrentVelocity[BODY];
 800985c:	4b38      	ldr	r3, [pc, #224]	; (8009940 <Accel+0xf0>)
	TargetAngularV = 0;
 800985e:	6011      	str	r1, [r2, #0]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 8009860:	ed93 7a02 	vldr	s14, [r3, #8]
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009864:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8009950 <Accel+0x100>
 8009868:	4d36      	ldr	r5, [pc, #216]	; (8009944 <Accel+0xf4>)
 800986a:	4e37      	ldr	r6, [pc, #220]	; (8009948 <Accel+0xf8>)
	additional_speed = explore_speed - CurrentVelocity[BODY];
 800986c:	ee70 0ac7 	vsub.f32	s1, s1, s14
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009870:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009874:	ee60 7aa7 	vmul.f32	s15, s1, s15
//	WallWarn();
	//printf("%d, %d\r\n",VelocityLeftOut,VelocityRightOut);
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009878:	ee10 0a10 	vmov	r0, s0
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 800987c:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8009880:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8009884:	ed8b 7a00 	vstr	s14, [fp]
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009888:	f7fe fd96 	bl	80083b8 <__aeabi_f2d>
 800988c:	a326      	add	r3, pc, #152	; (adr r3, 8009928 <Accel+0xd8>)
 800988e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009892:	f7fe ff13 	bl	80086bc <__aeabi_ddiv>
 8009896:	f7ff f897 	bl	80089c8 <__aeabi_d2iz>
 800989a:	4604      	mov	r4, r0
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	//printf("");
	_Bool wall_cut = false;
	//ChangeLED(1);
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800989c:	e020      	b.n	80098e0 <Accel+0x90>
	{
		//printf("%d, %d, %d, %f, %f, %d, %f, %f, %d, %f, %f\r\n", TotalPulse[BODY], target_pulse, KeepPulse[BODY], TargetVelocity[BODY], Acceleration, VelocityLeftOut ,TargetVelocity[LEFT], CurrentVelocity[LEFT], Pid[L_VELO_PID].out, Pid[L_VELO_PID].KP,Pid[L_VELO_PID].KI);
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800989e:	f7fe fd79 	bl	8008394 <__aeabi_i2d>
 80098a2:	a323      	add	r3, pc, #140	; (adr r3, 8009930 <Accel+0xe0>)
 80098a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a8:	f7fe fdde 	bl	8008468 <__aeabi_dmul>
 80098ac:	f8d5 a008 	ldr.w	sl, [r5, #8]
 80098b0:	68b7      	ldr	r7, [r6, #8]
 80098b2:	4680      	mov	r8, r0
 80098b4:	4650      	mov	r0, sl
 80098b6:	4689      	mov	r9, r1
 80098b8:	f7fe fd6c 	bl	8008394 <__aeabi_i2d>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4640      	mov	r0, r8
 80098c2:	4649      	mov	r1, r9
 80098c4:	f7fe fc1a 	bl	80080fc <__adddf3>
 80098c8:	4680      	mov	r8, r0
 80098ca:	4638      	mov	r0, r7
 80098cc:	4689      	mov	r9, r1
 80098ce:	f7fe fd61 	bl	8008394 <__aeabi_i2d>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4640      	mov	r0, r8
 80098d8:	4649      	mov	r1, r9
 80098da:	f7ff f837 	bl	800894c <__aeabi_dcmplt>
 80098de:	b9b0      	cbnz	r0, 800990e <Accel+0xbe>
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 80098e0:	68ab      	ldr	r3, [r5, #8]
 80098e2:	68b2      	ldr	r2, [r6, #8]
 80098e4:	4423      	add	r3, r4
 80098e6:	4293      	cmp	r3, r2
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80098e8:	4620      	mov	r0, r4
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 80098ea:	dcd8      	bgt.n	800989e <Accel+0x4e>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	f8cb 3000 	str.w	r3, [fp]
	//壁読んで、
	wall_cut = false;
//	ChangeLED(0);
	KeepPulse[BODY] += target_pulse;
 80098f2:	68ab      	ldr	r3, [r5, #8]
 80098f4:	4423      	add	r3, r4
 80098f6:	60ab      	str	r3, [r5, #8]
	KeepPulse[LEFT] += target_pulse/2;
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80098fe:	1064      	asrs	r4, r4, #1
 8009900:	4423      	add	r3, r4
 8009902:	602b      	str	r3, [r5, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 8009904:	686b      	ldr	r3, [r5, #4]
 8009906:	441c      	add	r4, r3
 8009908:	606c      	str	r4, [r5, #4]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 800990a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800990e:	4b0f      	ldr	r3, [pc, #60]	; (800994c <Accel+0xfc>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e4      	bne.n	80098e0 <Accel+0x90>
			updateRealSearch();
 8009916:	f003 fbd5 	bl	800d0c4 <updateRealSearch>
			Calc = 1;
 800991a:	4a0c      	ldr	r2, [pc, #48]	; (800994c <Accel+0xfc>)
 800991c:	2301      	movs	r3, #1
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	e7de      	b.n	80098e0 <Accel+0x90>
 8009922:	bf00      	nop
 8009924:	f3af 8000 	nop.w
 8009928:	23ca2666 	.word	0x23ca2666
 800992c:	3f509268 	.word	0x3f509268
 8009930:	9999999a 	.word	0x9999999a
 8009934:	3fe99999 	.word	0x3fe99999
 8009938:	20000c5c 	.word	0x20000c5c
 800993c:	3a83126f 	.word	0x3a83126f
 8009940:	20000c88 	.word	0x20000c88
 8009944:	20000cb0 	.word	0x20000cb0
 8009948:	20000c7c 	.word	0x20000c7c
 800994c:	20000eec 	.word	0x20000eec
 8009950:	20000230 	.word	0x20000230
 8009954:	00000000 	.word	0x00000000

08009958 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 8009958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
//	Pos.Act = decel;
	float down_speed=0;
	down_speed = CurrentVelocity[BODY] - end_speed;
 800995c:	4b4c      	ldr	r3, [pc, #304]	; (8009a90 <Decel+0x138>)
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 800995e:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009a94 <Decel+0x13c>
	down_speed = CurrentVelocity[BODY] - end_speed;
 8009962:	ed93 7a02 	vldr	s14, [r3, #8]
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009966:	4b4c      	ldr	r3, [pc, #304]	; (8009a98 <Decel+0x140>)
 8009968:	f8df a148 	ldr.w	sl, [pc, #328]	; 8009ab4 <Decel+0x15c>
 800996c:	4d4b      	ldr	r5, [pc, #300]	; (8009a9c <Decel+0x144>)
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800996e:	4e4c      	ldr	r6, [pc, #304]	; (8009aa0 <Decel+0x148>)
	down_speed = CurrentVelocity[BODY] - end_speed;
 8009970:	ee37 7a60 	vsub.f32	s14, s14, s1
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009974:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009978:	ee67 7a27 	vmul.f32	s15, s14, s15
{
 800997c:	ed2d 8b04 	vpush	{d8-d9}
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009980:	ee67 7a87 	vmul.f32	s15, s15, s14
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009984:	ee10 0a10 	vmov	r0, s0
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009988:	ee87 7a80 	vdiv.f32	s14, s15, s0
{
 800998c:	eef0 8a60 	vmov.f32	s17, s1
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009990:	eef1 7a47 	vneg.f32	s15, s14
 8009994:	edc3 7a00 	vstr	s15, [r3]
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009998:	f7fe fd0e 	bl	80083b8 <__aeabi_f2d>
 800999c:	a338      	add	r3, pc, #224	; (adr r3, 8009a80 <Decel+0x128>)
 800999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a2:	f7fe fe8b 	bl	80086bc <__aeabi_ddiv>
 80099a6:	f7ff f80f 	bl	80089c8 <__aeabi_d2iz>
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80099aa:	ed9f 9a3e 	vldr	s18, [pc, #248]	; 8009aa4 <Decel+0x14c>
 80099ae:	4607      	mov	r7, r0
 80099b0:	4b3d      	ldr	r3, [pc, #244]	; (8009aa8 <Decel+0x150>)
 80099b2:	ed93 8a03 	vldr	s16, [r3, #12]
 80099b6:	edd3 7a00 	vldr	s15, [r3]
 80099ba:	ee38 8a27 	vadd.f32	s16, s16, s15
 80099be:	e02c      	b.n	8009a1a <Decel+0xc2>
 80099c0:	68ab      	ldr	r3, [r5, #8]
 80099c2:	68b2      	ldr	r2, [r6, #8]
 80099c4:	443b      	add	r3, r7
 80099c6:	4293      	cmp	r3, r2
 80099c8:	dd2d      	ble.n	8009a26 <Decel+0xce>
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocity[BODY] <= end_speed)
 80099ca:	edda 7a02 	vldr	s15, [sl, #8]
 80099ce:	eef4 7ae8 	vcmpe.f32	s15, s17
 80099d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099d6:	d940      	bls.n	8009a5a <Decel+0x102>
			Acceleration = 0;
			TargetAngularV = 0;
			AngularAcceleration = 0;
			break;
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 80099d8:	f7fe fcdc 	bl	8008394 <__aeabi_i2d>
 80099dc:	a32a      	add	r3, pc, #168	; (adr r3, 8009a88 <Decel+0x130>)
 80099de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e2:	f7fe fd41 	bl	8008468 <__aeabi_dmul>
 80099e6:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80099ea:	68b4      	ldr	r4, [r6, #8]
 80099ec:	4680      	mov	r8, r0
 80099ee:	4658      	mov	r0, fp
 80099f0:	4689      	mov	r9, r1
 80099f2:	f7fe fccf 	bl	8008394 <__aeabi_i2d>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4640      	mov	r0, r8
 80099fc:	4649      	mov	r1, r9
 80099fe:	f7fe fb7d 	bl	80080fc <__adddf3>
 8009a02:	4680      	mov	r8, r0
 8009a04:	4620      	mov	r0, r4
 8009a06:	4689      	mov	r9, r1
 8009a08:	f7fe fcc4 	bl	8008394 <__aeabi_i2d>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4640      	mov	r0, r8
 8009a12:	4649      	mov	r1, r9
 8009a14:	f7fe ff9a 	bl	800894c <__aeabi_dcmplt>
 8009a18:	bb68      	cbnz	r0, 8009a76 <Decel+0x11e>
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009a1a:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8009a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 8009a22:	4638      	mov	r0, r7
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009a24:	d4cc      	bmi.n	80099c0 <Decel+0x68>
 8009a26:	4921      	ldr	r1, [pc, #132]	; (8009aac <Decel+0x154>)
 8009a28:	4a21      	ldr	r2, [pc, #132]	; (8009ab0 <Decel+0x158>)
 8009a2a:	463c      	mov	r4, r7
			PIDChangeFlag( A_VELO_PID , 1);

		}
	}
	TargetVelocity[BODY] = end_speed;
	Acceleration = 0;
 8009a2c:	481a      	ldr	r0, [pc, #104]	; (8009a98 <Decel+0x140>)
	TargetVelocity[BODY] = end_speed;
 8009a2e:	edca 8a02 	vstr	s17, [sl, #8]
	Acceleration = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	6003      	str	r3, [r0, #0]
	TargetAngularV = 0;
 8009a36:	600b      	str	r3, [r1, #0]
	AngularAcceleration = 0;
 8009a38:	6013      	str	r3, [r2, #0]
	//ChangeLED(2);
	KeepPulse[BODY] += target_pulse;
 8009a3a:	68ab      	ldr	r3, [r5, #8]
 8009a3c:	4423      	add	r3, r4
 8009a3e:	60ab      	str	r3, [r5, #8]
	KeepPulse[LEFT] += target_pulse/2;
 8009a40:	682b      	ldr	r3, [r5, #0]
 8009a42:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8009a46:	1064      	asrs	r4, r4, #1
 8009a48:	4423      	add	r3, r4
	KeepPulse[RIGHT] += target_pulse/2;


}
 8009a4a:	ecbd 8b04 	vpop	{d8-d9}
	KeepPulse[LEFT] += target_pulse/2;
 8009a4e:	602b      	str	r3, [r5, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 8009a50:	686b      	ldr	r3, [r5, #4]
 8009a52:	441c      	add	r4, r3
 8009a54:	606c      	str	r4, [r5, #4]
}
 8009a56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ChangeLED(7);
 8009a5a:	2007      	movs	r0, #7
 8009a5c:	f003 ff90 	bl	800d980 <ChangeLED>
			TargetAngularV = 0;
 8009a60:	4912      	ldr	r1, [pc, #72]	; (8009aac <Decel+0x154>)
			AngularAcceleration = 0;
 8009a62:	4a13      	ldr	r2, [pc, #76]	; (8009ab0 <Decel+0x158>)
			Acceleration = 0;
 8009a64:	480c      	ldr	r0, [pc, #48]	; (8009a98 <Decel+0x140>)
			TargetVelocity[BODY] = end_speed;
 8009a66:	edca 8a02 	vstr	s17, [sl, #8]
			Acceleration = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	6003      	str	r3, [r0, #0]
 8009a6e:	463c      	mov	r4, r7
			TargetAngularV = 0;
 8009a70:	600b      	str	r3, [r1, #0]
			AngularAcceleration = 0;
 8009a72:	6013      	str	r3, [r2, #0]
			break;
 8009a74:	e7da      	b.n	8009a2c <Decel+0xd4>
			PIDChangeFlag( A_VELO_PID , 1);
 8009a76:	2101      	movs	r1, #1
 8009a78:	2000      	movs	r0, #0
 8009a7a:	f004 fbab 	bl	800e1d4 <PIDChangeFlag>
 8009a7e:	e797      	b.n	80099b0 <Decel+0x58>
 8009a80:	23ca2666 	.word	0x23ca2666
 8009a84:	3f509268 	.word	0x3f509268
 8009a88:	cccccccd 	.word	0xcccccccd
 8009a8c:	3fe4cccc 	.word	0x3fe4cccc
 8009a90:	20000c88 	.word	0x20000c88
 8009a94:	3a83126f 	.word	0x3a83126f
 8009a98:	20000230 	.word	0x20000230
 8009a9c:	20000cb0 	.word	0x20000cb0
 8009aa0:	20000c7c 	.word	0x20000c7c
 8009aa4:	456d8000 	.word	0x456d8000
 8009aa8:	20000cbc 	.word	0x20000cbc
 8009aac:	20000c5c 	.word	0x20000c5c
 8009ab0:	20000238 	.word	0x20000238
 8009ab4:	20000c4c 	.word	0x20000c4c

08009ab8 <GoStraight>:
	Pid[wall_ctrl].flag = 0;
	TargetAngularV = 0;
	return 45;
}
void GoStraight(float move_distance,  float explore_speed, int accel_or_decel)
{
 8009ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//explore_speed += accel;

	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	//int keep_pulse = TotalPulse[BODY];
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009abc:	ee70 7a00 	vadd.f32	s15, s0, s0
{
 8009ac0:	ed2d 8b02 	vpush	{d8}
 8009ac4:	4604      	mov	r4, r0
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009ac6:	ee17 0a90 	vmov	r0, s15
{
 8009aca:	eeb0 8a40 	vmov.f32	s16, s0
 8009ace:	eef0 8a60 	vmov.f32	s17, s1
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009ad2:	f7fe fc71 	bl	80083b8 <__aeabi_f2d>
 8009ad6:	a38c      	add	r3, pc, #560	; (adr r3, 8009d08 <GoStraight+0x250>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f7fe fdee 	bl	80086bc <__aeabi_ddiv>
 8009ae0:	f7fe ff72 	bl	80089c8 <__aeabi_d2iz>

	if(accel_or_decel == 1) //加速するとき
 8009ae4:	2c01      	cmp	r4, #1
 8009ae6:	f000 808e 	beq.w	8009c06 <GoStraight+0x14e>
		//explore_speed += AddVelocity;
		VelocityMax = true;

		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
	}
	else if(accel_or_decel == -1) //探索速度までの減速. ターン速度までの減速も後で入れる
 8009aea:	3401      	adds	r4, #1
 8009aec:	4683      	mov	fp, r0
 8009aee:	f000 8099 	beq.w	8009c24 <GoStraight+0x16c>
 8009af2:	4c7f      	ldr	r4, [pc, #508]	; (8009cf0 <GoStraight+0x238>)
 8009af4:	4d7f      	ldr	r5, [pc, #508]	; (8009cf4 <GoStraight+0x23c>)
//		Pos.Act = straight;
//		WallSafe();
//		ControlWall();
//		Calc = SearchOrFast;
		_Bool wall_cut=false;
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009af6:	68a3      	ldr	r3, [r4, #8]
 8009af8:	68aa      	ldr	r2, [r5, #8]
 8009afa:	445b      	add	r3, fp
 8009afc:	4293      	cmp	r3, r2
		{
			//最初の45mmで加速をストップ
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 8009afe:	4658      	mov	r0, fp
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009b00:	dd55      	ble.n	8009bae <GoStraight+0xf6>
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 8009b02:	f7fe fc47 	bl	8008394 <__aeabi_i2d>
 8009b06:	68a6      	ldr	r6, [r4, #8]
 8009b08:	4681      	mov	r9, r0
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	468a      	mov	sl, r1
 8009b0e:	f7fe fc41 	bl	8008394 <__aeabi_i2d>
 8009b12:	a373      	add	r3, pc, #460	; (adr r3, 8009ce0 <GoStraight+0x228>)
 8009b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b18:	4606      	mov	r6, r0
 8009b1a:	460f      	mov	r7, r1
 8009b1c:	4648      	mov	r0, r9
 8009b1e:	4651      	mov	r1, sl
 8009b20:	f7fe fca2 	bl	8008468 <__aeabi_dmul>
 8009b24:	4602      	mov	r2, r0
 8009b26:	460b      	mov	r3, r1
 8009b28:	4630      	mov	r0, r6
 8009b2a:	4639      	mov	r1, r7
 8009b2c:	f7fe fae6 	bl	80080fc <__adddf3>
 8009b30:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009b34:	4606      	mov	r6, r0
 8009b36:	4640      	mov	r0, r8
 8009b38:	460f      	mov	r7, r1
 8009b3a:	f7fe fc2b 	bl	8008394 <__aeabi_i2d>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	4630      	mov	r0, r6
 8009b44:	4639      	mov	r1, r7
 8009b46:	f7fe ff01 	bl	800894c <__aeabi_dcmplt>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d156      	bne.n	8009bfc <GoStraight+0x144>
//				PIDChangeFlag(D_WALL_PID, 0);
				PIDChangeFlag( A_VELO_PID , 1);
				//右か左の壁のセンサ値を見て、閾値を下回ったら、TotalPulseかKeepPulseを補正する
			}

			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009b4e:	68a0      	ldr	r0, [r4, #8]
 8009b50:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009b54:	f7fe fc1e 	bl	8008394 <__aeabi_i2d>
 8009b58:	a363      	add	r3, pc, #396	; (adr r3, 8009ce8 <GoStraight+0x230>)
 8009b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460f      	mov	r7, r1
 8009b62:	4648      	mov	r0, r9
 8009b64:	4651      	mov	r1, sl
 8009b66:	f7fe fc7f 	bl	8008468 <__aeabi_dmul>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4630      	mov	r0, r6
 8009b70:	4639      	mov	r1, r7
 8009b72:	f7fe fac3 	bl	80080fc <__adddf3>
 8009b76:	4606      	mov	r6, r0
 8009b78:	4640      	mov	r0, r8
 8009b7a:	460f      	mov	r7, r1
 8009b7c:	f7fe fc0a 	bl	8008394 <__aeabi_i2d>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	4630      	mov	r0, r6
 8009b86:	4639      	mov	r1, r7
 8009b88:	f7fe fee0 	bl	800894c <__aeabi_dcmplt>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d0b2      	beq.n	8009af6 <GoStraight+0x3e>
 8009b90:	4b59      	ldr	r3, [pc, #356]	; (8009cf8 <GoStraight+0x240>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1ae      	bne.n	8009af6 <GoStraight+0x3e>
			{
//				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
//				//計算して
//				make_map(Pos.TargetX, Pos.TargetY, 0x01);
				updateRealSearch();
 8009b98:	f003 fa94 	bl	800d0c4 <updateRealSearch>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 8009b9c:	4a56      	ldr	r2, [pc, #344]	; (8009cf8 <GoStraight+0x240>)
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	6013      	str	r3, [r2, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009ba2:	68a3      	ldr	r3, [r4, #8]
 8009ba4:	68aa      	ldr	r2, [r5, #8]
 8009ba6:	445b      	add	r3, fp
 8009ba8:	4293      	cmp	r3, r2
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 8009baa:	4658      	mov	r0, fp
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009bac:	dca9      	bgt.n	8009b02 <GoStraight+0x4a>
	//		{
	//			Acceleration = 0;
	//		}
		}
		wall_cut = false;
		Acceleration = 0;
 8009bae:	4b53      	ldr	r3, [pc, #332]	; (8009cfc <GoStraight+0x244>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	601a      	str	r2, [r3, #0]
		KeepPulse[BODY] += target_pulse;
 8009bb4:	68a3      	ldr	r3, [r4, #8]
 8009bb6:	445b      	add	r3, fp
 8009bb8:	60a3      	str	r3, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009bba:	ed94 7a00 	vldr	s14, [r4]
 8009bbe:	ee07 ba90 	vmov	s15, fp
 8009bc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009bce:	eea7 7aa6 	vfma.f32	s14, s15, s13

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 8009bd2:	ecbd 8b02 	vpop	{d8}
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009bd6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	ChangeLED(0);
 8009bda:	2000      	movs	r0, #0
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009bdc:	ed84 7a00 	vstr	s14, [r4]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 8009be0:	ed94 7a01 	vldr	s14, [r4, #4]
 8009be4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009be8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009bec:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8009bf0:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8009bf4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ChangeLED(0);
 8009bf8:	f003 bec2 	b.w	800d980 <ChangeLED>
				PIDChangeFlag( A_VELO_PID , 1);
 8009bfc:	2101      	movs	r1, #1
 8009bfe:	2000      	movs	r0, #0
 8009c00:	f004 fae8 	bl	800e1d4 <PIDChangeFlag>
 8009c04:	e7a3      	b.n	8009b4e <GoStraight+0x96>
		VelocityMax = true;
 8009c06:	4b3e      	ldr	r3, [pc, #248]	; (8009d00 <GoStraight+0x248>)
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009c08:	eef0 0a68 	vmov.f32	s1, s17
 8009c0c:	eeb0 0a48 	vmov.f32	s0, s16
		VelocityMax = true;
 8009c10:	701c      	strb	r4, [r3, #0]
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009c12:	f7ff fe1d 	bl	8009850 <Accel>
}
 8009c16:	ecbd 8b02 	vpop	{d8}
	ChangeLED(0);
 8009c1a:	2000      	movs	r0, #0
}
 8009c1c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ChangeLED(0);
 8009c20:	f003 beae 	b.w	800d980 <ChangeLED>
		VelocityMax = false;
 8009c24:	4b36      	ldr	r3, [pc, #216]	; (8009d00 <GoStraight+0x248>)
 8009c26:	4c32      	ldr	r4, [pc, #200]	; (8009cf0 <GoStraight+0x238>)
 8009c28:	4d32      	ldr	r5, [pc, #200]	; (8009cf4 <GoStraight+0x23c>)
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009c2a:	4e33      	ldr	r6, [pc, #204]	; (8009cf8 <GoStraight+0x240>)
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009c2c:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8009c30:	eef0 0a68 	vmov.f32	s1, s17
		VelocityMax = false;
 8009c34:	2200      	movs	r2, #0
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009c36:	ee28 0a00 	vmul.f32	s0, s16, s0
		VelocityMax = false;
 8009c3a:	701a      	strb	r2, [r3, #0]
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009c3c:	f7ff fe8c 	bl	8009958 <Decel>
		ChangeLED(6);
 8009c40:	2006      	movs	r0, #6
 8009c42:	f003 fe9d 	bl	800d980 <ChangeLED>
 8009c46:	ee07 ba90 	vmov	s15, fp
 8009c4a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8009c4e:	eeb5 8a00 	vmov.f32	s16, #80	; 0x3e800000  0.250
 8009c52:	ee28 8a88 	vmul.f32	s16, s17, s16
				Calc = 1;
 8009c56:	2701      	movs	r7, #1
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009c58:	e001      	b.n	8009c5e <GoStraight+0x1a6>
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009c5a:	6833      	ldr	r3, [r6, #0]
 8009c5c:	b3cb      	cbz	r3, 8009cd2 <GoStraight+0x21a>
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009c5e:	edd4 7a02 	vldr	s15, [r4, #8]
 8009c62:	ed95 7a02 	vldr	s14, [r5, #8]
 8009c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009c6e:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7a:	dcee      	bgt.n	8009c5a <GoStraight+0x1a2>
		KeepPulse[BODY] += target_pulse*0.2f;
 8009c7c:	edd4 7a02 	vldr	s15, [r4, #8]
 8009c80:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009d04 <GoStraight+0x24c>
 8009c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c88:	ee28 7a87 	vmul.f32	s14, s17, s14
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009c8c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
		KeepPulse[BODY] += target_pulse*0.2f;
 8009c90:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8009c94:	ecbd 8b02 	vpop	{d8}
		KeepPulse[BODY] += target_pulse*0.2f;
 8009c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	ChangeLED(0);
 8009c9c:	2000      	movs	r0, #0
		KeepPulse[BODY] += target_pulse*0.2f;
 8009c9e:	edc4 7a02 	vstr	s15, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009ca2:	edd4 7a00 	vldr	s15, [r4]
 8009ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009caa:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cb2:	edc4 7a00 	vstr	s15, [r4]
		KeepPulse[RIGHT] += target_pulse*0.2f*0.5f;
 8009cb6:	edd4 7a01 	vldr	s15, [r4, #4]
 8009cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cbe:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cc6:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8009cca:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ChangeLED(0);
 8009cce:	f003 be57 	b.w	800d980 <ChangeLED>
				updateRealSearch();
 8009cd2:	f003 f9f7 	bl	800d0c4 <updateRealSearch>
				Calc = 1;
 8009cd6:	6037      	str	r7, [r6, #0]
 8009cd8:	e7c1      	b.n	8009c5e <GoStraight+0x1a6>
 8009cda:	bf00      	nop
 8009cdc:	f3af 8000 	nop.w
 8009ce0:	9999999a 	.word	0x9999999a
 8009ce4:	3fd99999 	.word	0x3fd99999
 8009ce8:	9999999a 	.word	0x9999999a
 8009cec:	3fe99999 	.word	0x3fe99999
 8009cf0:	20000cb0 	.word	0x20000cb0
 8009cf4:	20000c7c 	.word	0x20000c7c
 8009cf8:	20000eec 	.word	0x20000eec
 8009cfc:	20000230 	.word	0x20000230
 8009d00:	20000d6e 	.word	0x20000d6e
 8009d04:	3e4ccccd 	.word	0x3e4ccccd
 8009d08:	23ca2666 	.word	0x23ca2666
 8009d0c:	3f509268 	.word	0x3f509268

08009d10 <TurnRight>:
void TurnRight(char mode)
{
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 8009d10:	2853      	cmp	r0, #83	; 0x53
 8009d12:	d02f      	beq.n	8009d74 <TurnRight+0x64>
 8009d14:	2854      	cmp	r0, #84	; 0x54
 8009d16:	d12c      	bne.n	8009d72 <TurnRight+0x62>
{
 8009d18:	b508      	push	{r3, lr}
	{
	case 'T' :

		Decel(45, 0);
 8009d1a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8009d78 <TurnRight+0x68>
 8009d1e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8009d7c <TurnRight+0x6c>
 8009d22:	f7ff fe19 	bl	8009958 <Decel>
		WaitStopAndReset();
 8009d26:	f7ff f873 	bl	8008e10 <WaitStopAndReset>
		ChangeLED(5);
 8009d2a:	2005      	movs	r0, #5
 8009d2c:	f003 fe28 	bl	800d980 <ChangeLED>
		//AjustCenter();
		EmitterOFF();
 8009d30:	f003 fe18 	bl	800d964 <EmitterOFF>
		PIDChangeFlag(A_VELO_PID, 0);
 8009d34:	2100      	movs	r1, #0
 8009d36:	4608      	mov	r0, r1
 8009d38:	f004 fa4c 	bl	800e1d4 <PIDChangeFlag>
		Rotate( 90 , 2*M_PI);//1.5
 8009d3c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8009d80 <TurnRight+0x70>
 8009d40:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009d84 <TurnRight+0x74>
 8009d44:	f7ff f8a4 	bl	8008e90 <Rotate>
		ChangeLED(0);
 8009d48:	2000      	movs	r0, #0
 8009d4a:	f003 fe19 	bl	800d980 <ChangeLED>
		//RotateTest(90);

//		float acc = AjustCenter();
		EmitterON();
 8009d4e:	f003 fdfb 	bl	800d948 <EmitterON>

//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		HAL_Delay(100);
 8009d52:	2064      	movs	r0, #100	; 0x64
 8009d54:	f004 fbf4 	bl	800e540 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 8009d58:	2101      	movs	r1, #1
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	f004 fa3a 	bl	800e1d4 <PIDChangeFlag>
		Accel(45, ExploreVelocity);
 8009d60:	4b09      	ldr	r3, [pc, #36]	; (8009d88 <TurnRight+0x78>)
 8009d62:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8009d7c <TurnRight+0x6c>
 8009d66:	edd3 0a00 	vldr	s1, [r3]
	default :
		break;
	}


}
 8009d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Accel(45, ExploreVelocity);
 8009d6e:	f7ff bd6f 	b.w	8009850 <Accel>
 8009d72:	4770      	bx	lr
		SlalomRight();
 8009d74:	f7ff ba1c 	b.w	80091b0 <SlalomRight>
 8009d78:	00000000 	.word	0x00000000
 8009d7c:	42340000 	.word	0x42340000
 8009d80:	40c90fdb 	.word	0x40c90fdb
 8009d84:	42b40000 	.word	0x42b40000
 8009d88:	20000d70 	.word	0x20000d70

08009d8c <TurnLeft>:
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 8009d8c:	2853      	cmp	r0, #83	; 0x53
 8009d8e:	d02c      	beq.n	8009dea <TurnLeft+0x5e>
 8009d90:	2854      	cmp	r0, #84	; 0x54
 8009d92:	d129      	bne.n	8009de8 <TurnLeft+0x5c>
{
 8009d94:	b508      	push	{r3, lr}
	{
	case 'T' :
		//超信地旋回
		Decel(45, 0);
 8009d96:	eddf 0a16 	vldr	s1, [pc, #88]	; 8009df0 <TurnLeft+0x64>
 8009d9a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8009df4 <TurnLeft+0x68>
 8009d9e:	f7ff fddb 	bl	8009958 <Decel>
		WaitStopAndReset();
 8009da2:	f7ff f835 	bl	8008e10 <WaitStopAndReset>
		//ChangeLED(5);

		//AjustCenter();
		EmitterOFF();
 8009da6:	f003 fddd 	bl	800d964 <EmitterOFF>
		PIDChangeFlag(A_VELO_PID, 0);
 8009daa:	2100      	movs	r1, #0
 8009dac:	4608      	mov	r0, r1
 8009dae:	f004 fa11 	bl	800e1d4 <PIDChangeFlag>
		Rotate( 90 , -2*M_PI);//-1.5
 8009db2:	eddf 0a11 	vldr	s1, [pc, #68]	; 8009df8 <TurnLeft+0x6c>
 8009db6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8009dfc <TurnLeft+0x70>
 8009dba:	f7ff f869 	bl	8008e90 <Rotate>
		//RotateTest(-90);
//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		EmitterON();
 8009dbe:	f003 fdc3 	bl	800d948 <EmitterON>
		HAL_Delay(100);
 8009dc2:	2064      	movs	r0, #100	; 0x64
 8009dc4:	f004 fbbc 	bl	800e540 <HAL_Delay>
//		float acc = AjustCenter();
		HAL_Delay(100);
 8009dc8:	2064      	movs	r0, #100	; 0x64
 8009dca:	f004 fbb9 	bl	800e540 <HAL_Delay>

		PIDChangeFlag( A_VELO_PID , 1);
 8009dce:	2101      	movs	r1, #1
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	f004 f9ff 	bl	800e1d4 <PIDChangeFlag>
		Accel(45, ExploreVelocity);
 8009dd6:	4b0a      	ldr	r3, [pc, #40]	; (8009e00 <TurnLeft+0x74>)
 8009dd8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8009df4 <TurnLeft+0x68>
 8009ddc:	edd3 0a00 	vldr	s1, [r3]
		break;
	default :
		break;
	}

}
 8009de0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Accel(45, ExploreVelocity);
 8009de4:	f7ff bd34 	b.w	8009850 <Accel>
 8009de8:	4770      	bx	lr
		SlalomLeft();
 8009dea:	f7ff bb91 	b.w	8009510 <SlalomLeft>
 8009dee:	bf00      	nop
 8009df0:	00000000 	.word	0x00000000
 8009df4:	42340000 	.word	0x42340000
 8009df8:	c0c90fdb 	.word	0xc0c90fdb
 8009dfc:	42b40000 	.word	0x42b40000
 8009e00:	20000d70 	.word	0x20000d70

08009e04 <GoBack>:
void GoBack()
{
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	ed2d 8b04 	vpush	{d8-d9}
	//減速して
	Decel(45, 0);
 8009e0a:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8009e7c <GoBack+0x78>
 8009e0e:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009e80 <GoBack+0x7c>

	Rotate(180, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
	EmitterON();

#else
	Pos.Dir = right;
 8009e12:	4c1c      	ldr	r4, [pc, #112]	; (8009e84 <GoBack+0x80>)
	PIDChangeFlag(A_VELO_PID, 0);
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 8009e14:	ed9f 9a1c 	vldr	s18, [pc, #112]	; 8009e88 <GoBack+0x84>
 8009e18:	eddf 8a1c 	vldr	s17, [pc, #112]	; 8009e8c <GoBack+0x88>
	Decel(45, 0);
 8009e1c:	eeb0 0a48 	vmov.f32	s0, s16
 8009e20:	f7ff fd9a 	bl	8009958 <Decel>
	WaitStopAndReset();
 8009e24:	f7fe fff4 	bl	8008e10 <WaitStopAndReset>
	ChangeLED(5);
 8009e28:	2005      	movs	r0, #5
 8009e2a:	f003 fda9 	bl	800d980 <ChangeLED>
	PIDChangeFlag(A_VELO_PID, 0);
 8009e2e:	2100      	movs	r1, #0
 8009e30:	4608      	mov	r0, r1
	Pos.Dir = right;
 8009e32:	2501      	movs	r5, #1
 8009e34:	7125      	strb	r5, [r4, #4]
	PIDChangeFlag(A_VELO_PID, 0);
 8009e36:	f004 f9cd 	bl	800e1d4 <PIDChangeFlag>
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 8009e3a:	eef0 0a49 	vmov.f32	s1, s18
 8009e3e:	eeb0 0a68 	vmov.f32	s0, s17
 8009e42:	f7ff f825 	bl	8008e90 <Rotate>
	//acc = AjustCenter();
	Pos.Dir = right;
	Rotate(90, 2*M_PI);
 8009e46:	eef0 0a49 	vmov.f32	s1, s18
 8009e4a:	eeb0 0a68 	vmov.f32	s0, s17
	Pos.Dir = right;
 8009e4e:	7125      	strb	r5, [r4, #4]
	Rotate(90, 2*M_PI);
 8009e50:	f7ff f81e 	bl	8008e90 <Rotate>
	PIDChangeFlag(A_VELO_PID, 1);
 8009e54:	4629      	mov	r1, r5
 8009e56:	2000      	movs	r0, #0
 8009e58:	f004 f9bc 	bl	800e1d4 <PIDChangeFlag>
	Pos.Dir = back;
 8009e5c:	2303      	movs	r3, #3
#endif

	//acc = AjustCenter();
//	/Angle = TargetAngle;

	HAL_Delay(200);
 8009e5e:	20c8      	movs	r0, #200	; 0xc8
	Pos.Dir = back;
 8009e60:	7123      	strb	r3, [r4, #4]
	HAL_Delay(200);
 8009e62:	f004 fb6d 	bl	800e540 <HAL_Delay>

	Accel(45, ExploreVelocity);
 8009e66:	eeb0 0a48 	vmov.f32	s0, s16
	//ここまでで目標走行距離を完了する

}
 8009e6a:	ecbd 8b04 	vpop	{d8-d9}
	Accel(45, ExploreVelocity);
 8009e6e:	4b08      	ldr	r3, [pc, #32]	; (8009e90 <GoBack+0x8c>)
 8009e70:	edd3 0a00 	vldr	s1, [r3]
}
 8009e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Accel(45, ExploreVelocity);
 8009e78:	f7ff bcea 	b.w	8009850 <Accel>
 8009e7c:	42340000 	.word	0x42340000
 8009e80:	00000000 	.word	0x00000000
 8009e84:	20000004 	.word	0x20000004
 8009e88:	40c90fdb 	.word	0x40c90fdb
 8009e8c:	42b40000 	.word	0x42b40000
 8009e90:	20000d70 	.word	0x20000d70
 8009e94:	00000000 	.word	0x00000000

08009e98 <Explore_IT>:
void Explore_IT()
{

//*-----------------*/

	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009e98:	f8df c304 	ldr.w	ip, [pc, #772]	; 800a1a0 <Explore_IT+0x308>
 8009e9c:	49a6      	ldr	r1, [pc, #664]	; (800a138 <Explore_IT+0x2a0>)
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009e9e:	48a7      	ldr	r0, [pc, #668]	; (800a13c <Explore_IT+0x2a4>)
	TIM4->CNT = INITIAL_PULSE;

	//速度 mm/s
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009ea0:	eddf 7aa7 	vldr	s15, [pc, #668]	; 800a140 <Explore_IT+0x2a8>
//	}


	//移動量 mm/msを積算

	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8009ea4:	4aa7      	ldr	r2, [pc, #668]	; (800a144 <Explore_IT+0x2ac>)
{
 8009ea6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009eaa:	f8dc 4024 	ldr.w	r4, [ip, #36]	; 0x24
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009eae:	4da6      	ldr	r5, [pc, #664]	; (800a148 <Explore_IT+0x2b0>)
	volatile static float zg_last=0;
	volatile float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8009eb0:	4fa6      	ldr	r7, [pc, #664]	; (800a14c <Explore_IT+0x2b4>)
    zg_last = zg_law;
	Angle += AngularV * T1;
 8009eb2:	4ea7      	ldr	r6, [pc, #668]	; (800a150 <Explore_IT+0x2b8>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009eb4:	f247 532f 	movw	r3, #29999	; 0x752f
 8009eb8:	1b1c      	subs	r4, r3, r4
 8009eba:	600c      	str	r4, [r1, #0]
	TIM3->CNT = INITIAL_PULSE;
 8009ebc:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009ec0:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 8009ec4:	6243      	str	r3, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009ec6:	eba3 030c 	sub.w	r3, r3, ip
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009eca:	ee07 3a10 	vmov	s14, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009ece:	ee06 4a90 	vmov	s13, r4
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009ed2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009ed6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009eda:	ee27 7a27 	vmul.f32	s14, s14, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009ede:	ee66 6aa7 	vmul.f32	s13, s13, s15
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009ee2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009ee6:	edc5 6a00 	vstr	s13, [r5]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009eea:	ed85 7a01 	vstr	s14, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009eee:	edd5 7a00 	vldr	s15, [r5]
 8009ef2:	ed95 7a01 	vldr	s14, [r5, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009ef6:	604b      	str	r3, [r1, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009ef8:	ee77 7a87 	vadd.f32	s15, s15, s14
{
 8009efc:	b083      	sub	sp, #12
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009efe:	ee67 7a86 	vmul.f32	s15, s15, s12
	ZGyro = ReadIMU(0x37, 0x38);
 8009f02:	2138      	movs	r1, #56	; 0x38
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009f04:	edc5 7a02 	vstr	s15, [r5, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8009f08:	f8d2 c000 	ldr.w	ip, [r2]
 8009f0c:	4464      	add	r4, ip
 8009f0e:	6014      	str	r4, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 8009f10:	6854      	ldr	r4, [r2, #4]
 8009f12:	4423      	add	r3, r4
 8009f14:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 8009f16:	6813      	ldr	r3, [r2, #0]
 8009f18:	6854      	ldr	r4, [r2, #4]
	ZGyro = ReadIMU(0x37, 0x38);
 8009f1a:	2037      	movs	r0, #55	; 0x37
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 8009f1c:	4423      	add	r3, r4
 8009f1e:	6093      	str	r3, [r2, #8]
	ZGyro = ReadIMU(0x37, 0x38);
 8009f20:	f003 fc24 	bl	800d76c <ReadIMU>
 8009f24:	4b8b      	ldr	r3, [pc, #556]	; (800a154 <Explore_IT+0x2bc>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8009f26:	4a8c      	ldr	r2, [pc, #560]	; (800a158 <Explore_IT+0x2c0>)
	ZGyro = ReadIMU(0x37, 0x38);
 8009f28:	ed83 0a00 	vstr	s0, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8009f2c:	edd3 7a00 	vldr	s15, [r3]
 8009f30:	edd2 6a00 	vldr	s13, [r2]
 8009f34:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800a15c <Explore_IT+0x2c4>
 8009f38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f40:	edcd 7a01 	vstr	s15, [sp, #4]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8009f44:	9801      	ldr	r0, [sp, #4]
 8009f46:	683c      	ldr	r4, [r7, #0]
 8009f48:	f7fe fa36 	bl	80083b8 <__aeabi_f2d>
 8009f4c:	a374      	add	r3, pc, #464	; (adr r3, 800a120 <Explore_IT+0x288>)
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	f7fe fa89 	bl	8008468 <__aeabi_dmul>
 8009f56:	4680      	mov	r8, r0
 8009f58:	4620      	mov	r0, r4
 8009f5a:	4689      	mov	r9, r1
 8009f5c:	f7fe fa2c 	bl	80083b8 <__aeabi_f2d>
 8009f60:	a371      	add	r3, pc, #452	; (adr r3, 800a128 <Explore_IT+0x290>)
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	f7fe fa7f 	bl	8008468 <__aeabi_dmul>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4640      	mov	r0, r8
 8009f70:	4649      	mov	r1, r9
 8009f72:	f7fe f8c3 	bl	80080fc <__adddf3>
 8009f76:	f7fe fd6f 	bl	8008a58 <__aeabi_d2f>
 8009f7a:	4b79      	ldr	r3, [pc, #484]	; (800a160 <Explore_IT+0x2c8>)
	Angle += AngularV * T1;
 8009f7c:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800a164 <Explore_IT+0x2cc>
#endif

	int wall_d =0,wall_l =0,wall_r =0,wall_f=0;
		int ang_out=0;

		if( Pos.Dir == front || Pos.Act == compensate || Pos.Act == rotate)
 8009f80:	4a79      	ldr	r2, [pc, #484]	; (800a168 <Explore_IT+0x2d0>)
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8009f82:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8009f86:	6018      	str	r0, [r3, #0]
    zg_last = zg_law;
 8009f88:	9801      	ldr	r0, [sp, #4]
 8009f8a:	6038      	str	r0, [r7, #0]
	Angle += AngularV * T1;
 8009f8c:	edd3 6a00 	vldr	s13, [r3]
 8009f90:	edd6 7a00 	vldr	s15, [r6]
		if( Pos.Dir == front || Pos.Act == compensate || Pos.Act == rotate)
 8009f94:	7911      	ldrb	r1, [r2, #4]
	Angle += AngularV * T1;
 8009f96:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009f9a:	edc6 7a00 	vstr	s15, [r6]
		if( Pos.Dir == front || Pos.Act == compensate || Pos.Act == rotate)
 8009f9e:	b121      	cbz	r1, 8009faa <Explore_IT+0x112>
 8009fa0:	7993      	ldrb	r3, [r2, #6]
 8009fa2:	2b06      	cmp	r3, #6
 8009fa4:	d001      	beq.n	8009faa <Explore_IT+0x112>
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	d113      	bne.n	8009fd2 <Explore_IT+0x13a>
		{
			if( Pid[A_VELO_PID].flag == 1 )
 8009faa:	4b70      	ldr	r3, [pc, #448]	; (800a16c <Explore_IT+0x2d4>)
 8009fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fae:	2a01      	cmp	r2, #1
 8009fb0:	d06e      	beq.n	800a090 <Explore_IT+0x1f8>
			{
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
				TargetAngularV = (float)ang_out;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
			}
			else if( Pid[D_WALL_PID].flag == 1 )
 8009fb2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009fb4:	2801      	cmp	r0, #1
 8009fb6:	d07c      	beq.n	800a0b2 <Explore_IT+0x21a>
			{
				wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
				TargetAngularV = (float)wall_d*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
			}
			else if( Pid[L_WALL_PID].flag == 1 )
 8009fb8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009fbc:	2a01      	cmp	r2, #1
 8009fbe:	d04b      	beq.n	800a058 <Explore_IT+0x1c0>
			{
				wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
				TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。

			}
			else if( Pid[R_WALL_PID].flag == 1 )
 8009fc0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009fc4:	2a01      	cmp	r2, #1
 8009fc6:	f000 809f 	beq.w	800a108 <Explore_IT+0x270>
			{
				wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
			}
			else if( Pid[F_WALL_PID].flag == 1)
 8009fca:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d07b      	beq.n	800a0ca <Explore_IT+0x232>
 8009fd2:	4b67      	ldr	r3, [pc, #412]	; (800a170 <Explore_IT+0x2d8>)
 8009fd4:	4c67      	ldr	r4, [pc, #412]	; (800a174 <Explore_IT+0x2dc>)

				//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
			}
		}

	TargetVelocity[BODY] += Acceleration;
 8009fd6:	4968      	ldr	r1, [pc, #416]	; (800a178 <Explore_IT+0x2e0>)
	//AngularAcceleration += AngularLeapsity;
	TargetAngularV += AngularAcceleration;
 8009fd8:	4a68      	ldr	r2, [pc, #416]	; (800a17c <Explore_IT+0x2e4>)
	TargetVelocity[BODY] += Acceleration;
 8009fda:	ed91 7a00 	vldr	s14, [r1]
 8009fde:	edd4 7a02 	vldr	s15, [r4, #8]
	//TargetAngularV += AngularAcceleration;
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009fe2:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a180 <Explore_IT+0x2e8>
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009fe6:	4e67      	ldr	r6, [pc, #412]	; (800a184 <Explore_IT+0x2ec>)
	TargetVelocity[BODY] += Acceleration;
 8009fe8:	ee77 7a87 	vadd.f32	s15, s15, s14
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009fec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	TargetVelocity[BODY] += Acceleration;
 8009ff0:	edc4 7a02 	vstr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 8009ff4:	ed92 7a00 	vldr	s14, [r2]
 8009ff8:	edd3 7a00 	vldr	s15, [r3]
 8009ffc:	ee77 7a87 	vadd.f32	s15, s15, s14
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a000:	2004      	movs	r0, #4
	TargetAngularV += AngularAcceleration;
 800a002:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a006:	edd4 7a02 	vldr	s15, [r4, #8]
 800a00a:	ed93 7a00 	vldr	s14, [r3]
 800a00e:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800a012:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a016:	edc4 7a01 	vstr	s15, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a01a:	ed93 7a00 	vldr	s14, [r3]
 800a01e:	edd4 7a01 	vldr	s15, [r4, #4]
 800a022:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a026:	edc4 7a00 	vstr	s15, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a02a:	ed94 0a00 	vldr	s0, [r4]
 800a02e:	edd5 0a00 	vldr	s1, [r5]
 800a032:	f004 f8e5 	bl	800e200 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a036:	ed94 0a01 	vldr	s0, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a03a:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a03c:	edd5 0a01 	vldr	s1, [r5, #4]
 800a040:	2005      	movs	r0, #5
 800a042:	f004 f8dd 	bl	800e200 <PIDControl>
 800a046:	4b50      	ldr	r3, [pc, #320]	; (800a188 <Explore_IT+0x2f0>)
 800a048:	4601      	mov	r1, r0

	//モータに出力
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a04a:	6830      	ldr	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a04c:	6019      	str	r1, [r3, #0]

}
 800a04e:	b003      	add	sp, #12
 800a050:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a054:	f003 bd20 	b.w	800da98 <Motor_Switch>
				wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
 800a058:	4a4c      	ldr	r2, [pc, #304]	; (800a18c <Explore_IT+0x2f4>)
 800a05a:	4b4d      	ldr	r3, [pc, #308]	; (800a190 <Explore_IT+0x2f8>)
 800a05c:	edd2 0a02 	vldr	s1, [r2, #8]
 800a060:	ed93 0a02 	vldr	s0, [r3, #8]
 800a064:	4c43      	ldr	r4, [pc, #268]	; (800a174 <Explore_IT+0x2dc>)
 800a066:	2002      	movs	r0, #2
				wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800a068:	f004 f8ca 	bl	800e200 <PIDControl>
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800a06c:	ee07 0a90 	vmov	s15, r0
 800a070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a074:	ee17 0a90 	vmov	r0, s15
 800a078:	f7fe f99e 	bl	80083b8 <__aeabi_f2d>
 800a07c:	a32c      	add	r3, pc, #176	; (adr r3, 800a130 <Explore_IT+0x298>)
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	f7fe f9f1 	bl	8008468 <__aeabi_dmul>
 800a086:	f7fe fce7 	bl	8008a58 <__aeabi_d2f>
 800a08a:	4b39      	ldr	r3, [pc, #228]	; (800a170 <Explore_IT+0x2d8>)
 800a08c:	6018      	str	r0, [r3, #0]
 800a08e:	e7a2      	b.n	8009fd6 <Explore_IT+0x13e>
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a090:	4b40      	ldr	r3, [pc, #256]	; (800a194 <Explore_IT+0x2fc>)
 800a092:	4c38      	ldr	r4, [pc, #224]	; (800a174 <Explore_IT+0x2dc>)
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a094:	ed93 0a00 	vldr	s0, [r3]
 800a098:	edd6 0a00 	vldr	s1, [r6]
 800a09c:	2000      	movs	r0, #0
 800a09e:	f004 f8af 	bl	800e200 <PIDControl>
				TargetAngularV = (float)ang_out;
 800a0a2:	ee07 0a90 	vmov	s15, r0
 800a0a6:	4b32      	ldr	r3, [pc, #200]	; (800a170 <Explore_IT+0x2d8>)
 800a0a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0ac:	edc3 7a00 	vstr	s15, [r3]
 800a0b0:	e791      	b.n	8009fd6 <Explore_IT+0x13e>
				wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800a0b2:	4b37      	ldr	r3, [pc, #220]	; (800a190 <Explore_IT+0x2f8>)
 800a0b4:	4a38      	ldr	r2, [pc, #224]	; (800a198 <Explore_IT+0x300>)
 800a0b6:	edd3 0a01 	vldr	s1, [r3, #4]
 800a0ba:	edd2 7a00 	vldr	s15, [r2]
 800a0be:	ed93 0a02 	vldr	s0, [r3, #8]
 800a0c2:	4c2c      	ldr	r4, [pc, #176]	; (800a174 <Explore_IT+0x2dc>)
 800a0c4:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800a0c8:	e7ce      	b.n	800a068 <Explore_IT+0x1d0>
				wall_f = PIDControl( F_WALL_PID,   4000, (	(Photo[FR]+Photo[FL])));
 800a0ca:	4b31      	ldr	r3, [pc, #196]	; (800a190 <Explore_IT+0x2f8>)
 800a0cc:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800a19c <Explore_IT+0x304>
 800a0d0:	edd3 7a00 	vldr	s15, [r3]
 800a0d4:	edd3 0a03 	vldr	s1, [r3, #12]
				TargetVelocity[BODY] = (float)wall_f*0.001;
 800a0d8:	4c26      	ldr	r4, [pc, #152]	; (800a174 <Explore_IT+0x2dc>)
				wall_f = PIDControl( F_WALL_PID,   4000, (	(Photo[FR]+Photo[FL])));
 800a0da:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800a0de:	2008      	movs	r0, #8
 800a0e0:	f004 f88e 	bl	800e200 <PIDControl>
				TargetVelocity[BODY] = (float)wall_f*0.001;
 800a0e4:	ee07 0a90 	vmov	s15, r0
 800a0e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0ec:	ee17 0a90 	vmov	r0, s15
 800a0f0:	f7fe f962 	bl	80083b8 <__aeabi_f2d>
 800a0f4:	a30e      	add	r3, pc, #56	; (adr r3, 800a130 <Explore_IT+0x298>)
 800a0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fa:	f7fe f9b5 	bl	8008468 <__aeabi_dmul>
 800a0fe:	f7fe fcab 	bl	8008a58 <__aeabi_d2f>
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a102:	4b24      	ldr	r3, [pc, #144]	; (800a194 <Explore_IT+0x2fc>)
				TargetVelocity[BODY] = (float)wall_f*0.001;
 800a104:	60a0      	str	r0, [r4, #8]
 800a106:	e7c5      	b.n	800a094 <Explore_IT+0x1fc>
				wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800a108:	4a21      	ldr	r2, [pc, #132]	; (800a190 <Explore_IT+0x2f8>)
 800a10a:	4b20      	ldr	r3, [pc, #128]	; (800a18c <Explore_IT+0x2f4>)
 800a10c:	edd2 0a01 	vldr	s1, [r2, #4]
 800a110:	ed93 0a01 	vldr	s0, [r3, #4]
 800a114:	4c17      	ldr	r4, [pc, #92]	; (800a174 <Explore_IT+0x2dc>)
 800a116:	2003      	movs	r0, #3
 800a118:	e7a6      	b.n	800a068 <Explore_IT+0x1d0>
 800a11a:	bf00      	nop
 800a11c:	f3af 8000 	nop.w
 800a120:	47ae147b 	.word	0x47ae147b
 800a124:	3f847ae1 	.word	0x3f847ae1
 800a128:	7ae147ae 	.word	0x7ae147ae
 800a12c:	3fefae14 	.word	0x3fefae14
 800a130:	d2f1a9fc 	.word	0xd2f1a9fc
 800a134:	3f50624d 	.word	0x3f50624d
 800a138:	20000e38 	.word	0x20000e38
 800a13c:	40000800 	.word	0x40000800
 800a140:	3f8177cd 	.word	0x3f8177cd
 800a144:	20000c7c 	.word	0x20000c7c
 800a148:	20000c88 	.word	0x20000c88
 800a14c:	20000228 	.word	0x20000228
 800a150:	20000234 	.word	0x20000234
 800a154:	200002e0 	.word	0x200002e0
 800a158:	200002e4 	.word	0x200002e4
 800a15c:	3a8b7d78 	.word	0x3a8b7d78
 800a160:	20000240 	.word	0x20000240
 800a164:	3a83126f 	.word	0x3a83126f
 800a168:	20000004 	.word	0x20000004
 800a16c:	20000328 	.word	0x20000328
 800a170:	20000c5c 	.word	0x20000c5c
 800a174:	20000c4c 	.word	0x20000c4c
 800a178:	20000230 	.word	0x20000230
 800a17c:	20000238 	.word	0x20000238
 800a180:	4209999a 	.word	0x4209999a
 800a184:	20000d74 	.word	0x20000d74
 800a188:	20000d90 	.word	0x20000d90
 800a18c:	20000d7c 	.word	0x20000d7c
 800a190:	20000cbc 	.word	0x20000cbc
 800a194:	20000244 	.word	0x20000244
 800a198:	20000c70 	.word	0x20000c70
 800a19c:	457a0000 	.word	0x457a0000
 800a1a0:	40000400 	.word	0x40000400
 800a1a4:	00000000 	.word	0x00000000

0800a1a8 <WritingFree_IT>:
void WritingFree_IT()
{
 800a1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a1ac:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 800a39c <WritingFree_IT+0x1f4>
 800a1b0:	4967      	ldr	r1, [pc, #412]	; (800a350 <WritingFree_IT+0x1a8>)
 800a1b2:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a1b6:	4867      	ldr	r0, [pc, #412]	; (800a354 <WritingFree_IT+0x1ac>)
	TIM4->CNT = INITIAL_PULSE;

	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a1b8:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a358 <WritingFree_IT+0x1b0>
 800a1bc:	4d67      	ldr	r5, [pc, #412]	; (800a35c <WritingFree_IT+0x1b4>)
//			velodebug_flag = 0;
//		}
//
//	}
	//移動量 mm/msを積算
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a1be:	4a68      	ldr	r2, [pc, #416]	; (800a360 <WritingFree_IT+0x1b8>)
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a1c0:	4f68      	ldr	r7, [pc, #416]	; (800a364 <WritingFree_IT+0x1bc>)
			}
		}
#endif

	AngularAcceleration += AngularLeapsity;
	TargetVelocity[BODY] += Acceleration;
 800a1c2:	4c69      	ldr	r4, [pc, #420]	; (800a368 <WritingFree_IT+0x1c0>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a1c4:	f247 532f 	movw	r3, #29999	; 0x752f
 800a1c8:	1b9e      	subs	r6, r3, r6
{
 800a1ca:	ed2d 8b02 	vpush	{d8}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a1ce:	600e      	str	r6, [r1, #0]
	TIM3->CNT = INITIAL_PULSE;
 800a1d0:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a1d4:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 800a1d8:	6243      	str	r3, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a1da:	eba3 030c 	sub.w	r3, r3, ip
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a1de:	ee07 3a90 	vmov	s15, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a1e2:	ee07 6a10 	vmov	s14, r6
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a1e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a1ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a1ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a1f2:	ee27 7a26 	vmul.f32	s14, s14, s13
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a1f6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a1fa:	ed85 7a00 	vstr	s14, [r5]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a1fe:	edc5 7a01 	vstr	s15, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a202:	edd5 7a00 	vldr	s15, [r5]
 800a206:	ed95 7a01 	vldr	s14, [r5, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a20a:	604b      	str	r3, [r1, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a20c:	ee77 7a87 	vadd.f32	s15, s15, s14
	ZGyro = ReadIMU(0x37, 0x38);
 800a210:	2138      	movs	r1, #56	; 0x38
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a212:	ee67 7aa8 	vmul.f32	s15, s15, s17
	ZGyro = ReadIMU(0x37, 0x38);
 800a216:	2037      	movs	r0, #55	; 0x37
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a218:	edc5 7a02 	vstr	s15, [r5, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a21c:	f8d2 c000 	ldr.w	ip, [r2]
 800a220:	4466      	add	r6, ip
 800a222:	6016      	str	r6, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a224:	6856      	ldr	r6, [r2, #4]
 800a226:	4433      	add	r3, r6
 800a228:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a22a:	6813      	ldr	r3, [r2, #0]
 800a22c:	6856      	ldr	r6, [r2, #4]
 800a22e:	4433      	add	r3, r6
 800a230:	6093      	str	r3, [r2, #8]
	ZGyro = ReadIMU(0x37, 0x38);
 800a232:	f003 fa9b 	bl	800d76c <ReadIMU>
 800a236:	4b4d      	ldr	r3, [pc, #308]	; (800a36c <WritingFree_IT+0x1c4>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a238:	4a4d      	ldr	r2, [pc, #308]	; (800a370 <WritingFree_IT+0x1c8>)
	ZGyro = ReadIMU(0x37, 0x38);
 800a23a:	ed83 0a00 	vstr	s0, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a23e:	ed93 8a00 	vldr	s16, [r3]
 800a242:	ed92 7a00 	vldr	s14, [r2]
 800a246:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800a374 <WritingFree_IT+0x1cc>
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a24a:	6838      	ldr	r0, [r7, #0]
	AngularAcceleration += AngularLeapsity;
 800a24c:	4e4a      	ldr	r6, [pc, #296]	; (800a378 <WritingFree_IT+0x1d0>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a24e:	ee38 8a47 	vsub.f32	s16, s16, s14
 800a252:	ee28 8a27 	vmul.f32	s16, s16, s15
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a256:	f7fe f8af 	bl	80083b8 <__aeabi_f2d>
 800a25a:	a339      	add	r3, pc, #228	; (adr r3, 800a340 <WritingFree_IT+0x198>)
 800a25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a260:	f7fe f902 	bl	8008468 <__aeabi_dmul>
 800a264:	4680      	mov	r8, r0
 800a266:	ee18 0a10 	vmov	r0, s16
 800a26a:	4689      	mov	r9, r1
 800a26c:	f7fe f8a4 	bl	80083b8 <__aeabi_f2d>
 800a270:	a335      	add	r3, pc, #212	; (adr r3, 800a348 <WritingFree_IT+0x1a0>)
 800a272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a276:	f7fe f8f7 	bl	8008468 <__aeabi_dmul>
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	4640      	mov	r0, r8
 800a280:	4649      	mov	r1, r9
 800a282:	f7fd ff3b 	bl	80080fc <__adddf3>
 800a286:	f7fe fbe7 	bl	8008a58 <__aeabi_d2f>
 800a28a:	4b3c      	ldr	r3, [pc, #240]	; (800a37c <WritingFree_IT+0x1d4>)
	Angle += AngularV * T1;
 800a28c:	493c      	ldr	r1, [pc, #240]	; (800a380 <WritingFree_IT+0x1d8>)
 800a28e:	eddf 7a3d 	vldr	s15, [pc, #244]	; 800a384 <WritingFree_IT+0x1dc>
	AngularAcceleration += AngularLeapsity;
 800a292:	4a3d      	ldr	r2, [pc, #244]	; (800a388 <WritingFree_IT+0x1e0>)
 800a294:	ed96 6a00 	vldr	s12, [r6]
	TargetVelocity[BODY] += Acceleration;
 800a298:	f8df c104 	ldr.w	ip, [pc, #260]	; 800a3a0 <WritingFree_IT+0x1f8>
	TargetAngularV += AngularAcceleration;

	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a29c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a38c <WritingFree_IT+0x1e4>
    zg_last = zg_law;
 800a2a0:	ed87 8a00 	vstr	s16, [r7]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a2a4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800a2a8:	6018      	str	r0, [r3, #0]
	Angle += AngularV * T1;
 800a2aa:	edd3 5a00 	vldr	s11, [r3]
 800a2ae:	ed91 7a00 	vldr	s14, [r1]
	TargetAngularV += AngularAcceleration;
 800a2b2:	4b37      	ldr	r3, [pc, #220]	; (800a390 <WritingFree_IT+0x1e8>)
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a2b4:	4e37      	ldr	r6, [pc, #220]	; (800a394 <WritingFree_IT+0x1ec>)
	Angle += AngularV * T1;
 800a2b6:	eea5 7aa7 	vfma.f32	s14, s11, s15
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a2ba:	2004      	movs	r0, #4
	Angle += AngularV * T1;
 800a2bc:	ed81 7a00 	vstr	s14, [r1]
	AngularAcceleration += AngularLeapsity;
 800a2c0:	edd2 7a00 	vldr	s15, [r2]
 800a2c4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a2c8:	edc2 7a00 	vstr	s15, [r2]
	TargetVelocity[BODY] += Acceleration;
 800a2cc:	ed9c 7a00 	vldr	s14, [ip]
 800a2d0:	edd4 7a02 	vldr	s15, [r4, #8]
 800a2d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2d8:	edc4 7a02 	vstr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 800a2dc:	ed92 7a00 	vldr	s14, [r2]
 800a2e0:	edd3 7a00 	vldr	s15, [r3]
 800a2e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2e8:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a2ec:	edd4 7a02 	vldr	s15, [r4, #8]
 800a2f0:	ed93 7a00 	vldr	s14, [r3]
 800a2f4:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800a2f8:	eee7 7a28 	vfma.f32	s15, s14, s17
 800a2fc:	edc4 7a01 	vstr	s15, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a300:	ed93 7a00 	vldr	s14, [r3]
 800a304:	edd4 7a01 	vldr	s15, [r4, #4]
 800a308:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a30c:	edc4 7a00 	vstr	s15, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a310:	ed94 0a00 	vldr	s0, [r4]
 800a314:	edd5 0a00 	vldr	s1, [r5]
 800a318:	f003 ff72 	bl	800e200 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a31c:	ed94 0a01 	vldr	s0, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a320:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a322:	edd5 0a01 	vldr	s1, [r5, #4]
 800a326:	2005      	movs	r0, #5
 800a328:	f003 ff6a 	bl	800e200 <PIDControl>

	Motor_Switch( VelocityLeftOut, VelocityRightOut );


}
 800a32c:	ecbd 8b02 	vpop	{d8}
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a330:	4b19      	ldr	r3, [pc, #100]	; (800a398 <WritingFree_IT+0x1f0>)
 800a332:	4601      	mov	r1, r0
 800a334:	6019      	str	r1, [r3, #0]
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a336:	6830      	ldr	r0, [r6, #0]
}
 800a338:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a33c:	f003 bbac 	b.w	800da98 <Motor_Switch>
 800a340:	7ae147ae 	.word	0x7ae147ae
 800a344:	3fefae14 	.word	0x3fefae14
 800a348:	47ae147b 	.word	0x47ae147b
 800a34c:	3f847ae1 	.word	0x3f847ae1
 800a350:	20000e38 	.word	0x20000e38
 800a354:	40000800 	.word	0x40000800
 800a358:	3f8177cd 	.word	0x3f8177cd
 800a35c:	20000c88 	.word	0x20000c88
 800a360:	20000c7c 	.word	0x20000c7c
 800a364:	2000022c 	.word	0x2000022c
 800a368:	20000c4c 	.word	0x20000c4c
 800a36c:	200002e0 	.word	0x200002e0
 800a370:	200002e4 	.word	0x200002e4
 800a374:	3a8b7d78 	.word	0x3a8b7d78
 800a378:	2000023c 	.word	0x2000023c
 800a37c:	20000240 	.word	0x20000240
 800a380:	20000234 	.word	0x20000234
 800a384:	3a83126f 	.word	0x3a83126f
 800a388:	20000238 	.word	0x20000238
 800a38c:	4209999a 	.word	0x4209999a
 800a390:	20000c5c 	.word	0x20000c5c
 800a394:	20000d74 	.word	0x20000d74
 800a398:	20000d90 	.word	0x20000d90
 800a39c:	40000400 	.word	0x40000400
 800a3a0:	20000230 	.word	0x20000230

0800a3a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3a4:	b570      	push	{r4, r5, r6, lr}
	if( htim == &htim1)
 800a3a6:	4b1e      	ldr	r3, [pc, #120]	; (800a420 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800a3a8:	4298      	cmp	r0, r3
{
 800a3aa:	b082      	sub	sp, #8
	if( htim == &htim1)
 800a3ac:	d004      	beq.n	800a3b8 <HAL_TIM_PeriodElapsedCallback+0x14>
		default :
			break;
		}
	}

	if( htim == &htim8)
 800a3ae:	4b1d      	ldr	r3, [pc, #116]	; (800a424 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800a3b0:	4298      	cmp	r0, r3
 800a3b2:	d00e      	beq.n	800a3d2 <HAL_TIM_PeriodElapsedCallback+0x2e>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
	}
}
 800a3b4:	b002      	add	sp, #8
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
		switch(IT_mode){
 800a3b8:	4b1b      	ldr	r3, [pc, #108]	; (800a428 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b06      	cmp	r3, #6
 800a3be:	d029      	beq.n	800a414 <HAL_TIM_PeriodElapsedCallback+0x70>
 800a3c0:	2b07      	cmp	r3, #7
 800a3c2:	d1f4      	bne.n	800a3ae <HAL_TIM_PeriodElapsedCallback+0xa>
 800a3c4:	9001      	str	r0, [sp, #4]
			WritingFree_IT();
 800a3c6:	f7ff feef 	bl	800a1a8 <WritingFree_IT>
 800a3ca:	9801      	ldr	r0, [sp, #4]
	if( htim == &htim8)
 800a3cc:	4b15      	ldr	r3, [pc, #84]	; (800a424 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800a3ce:	4298      	cmp	r0, r3
 800a3d0:	d1f0      	bne.n	800a3b4 <HAL_TIM_PeriodElapsedCallback+0x10>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a3d2:	4e16      	ldr	r6, [pc, #88]	; (800a42c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800a3d4:	4c16      	ldr	r4, [pc, #88]	; (800a430 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800a3d6:	6831      	ldr	r1, [r6, #0]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a3d8:	4d16      	ldr	r5, [pc, #88]	; (800a434 <HAL_TIM_PeriodElapsedCallback+0x90>)
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a3da:	2200      	movs	r2, #0
 800a3dc:	200a      	movs	r0, #10
 800a3de:	f003 fbb7 	bl	800db50 <GetWallDataAverage>
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a3e2:	6871      	ldr	r1, [r6, #4]
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a3e4:	ed84 0a00 	vstr	s0, [r4]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	200a      	movs	r0, #10
 800a3ec:	f003 fbb0 	bl	800db50 <GetWallDataAverage>
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a3f0:	6829      	ldr	r1, [r5, #0]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a3f2:	ed84 0a01 	vstr	s0, [r4, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	200a      	movs	r0, #10
 800a3fa:	f003 fba9 	bl	800db50 <GetWallDataAverage>
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a3fe:	6869      	ldr	r1, [r5, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a400:	ed84 0a02 	vstr	s0, [r4, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a404:	2203      	movs	r2, #3
 800a406:	200a      	movs	r0, #10
 800a408:	f003 fba2 	bl	800db50 <GetWallDataAverage>
 800a40c:	ed84 0a03 	vstr	s0, [r4, #12]
}
 800a410:	b002      	add	sp, #8
 800a412:	bd70      	pop	{r4, r5, r6, pc}
 800a414:	9001      	str	r0, [sp, #4]
			Explore_IT();
 800a416:	f7ff fd3f 	bl	8009e98 <Explore_IT>
			break;
 800a41a:	9801      	ldr	r0, [sp, #4]
 800a41c:	e7c7      	b.n	800a3ae <HAL_TIM_PeriodElapsedCallback+0xa>
 800a41e:	bf00      	nop
 800a420:	20001138 	.word	0x20001138
 800a424:	20000ef0 	.word	0x20000ef0
 800a428:	20000c3c 	.word	0x20000c3c
 800a42c:	200002cc 	.word	0x200002cc
 800a430:	20000cbc 	.word	0x20000cbc
 800a434:	200002d8 	.word	0x200002d8

0800a438 <flashStoreNodes>:
			}
	}
}
void flashStoreNodes()
{
	uint32_t address=start_adress_sector1;
 800a438:	4b1b      	ldr	r3, [pc, #108]	; (800a4a8 <flashStoreNodes+0x70>)
{
 800a43a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t address=start_adress_sector1;
 800a43e:	f8d3 9000 	ldr.w	r9, [r3]
 800a442:	f8df a068 	ldr.w	sl, [pc, #104]	; 800a4ac <flashStoreNodes+0x74>
 800a446:	ebc9 78c9 	rsb	r8, r9, r9, lsl #31
 800a44a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800a44e:	464c      	mov	r4, r9
 800a450:	2700      	movs	r7, #0
 800a452:	eb07 0508 	add.w	r5, r7, r8

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				FLASH_Write_Word(address+0, my_map.RawNode[i][j].existence);
 800a456:	4455      	add	r5, sl
 800a458:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800a45c:	f815 1014 	ldrb.w	r1, [r5, r4, lsl #1]
 800a460:	4620      	mov	r0, r4
				address += 4;
 800a462:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, my_map.RawNode[i][j].existence);
 800a464:	f003 f8a6 	bl	800d5b4 <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a468:	42b4      	cmp	r4, r6
 800a46a:	d1f7      	bne.n	800a45c <flashStoreNodes+0x24>
 800a46c:	3750      	adds	r7, #80	; 0x50
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a46e:	f5b7 7f34 	cmp.w	r7, #720	; 0x2d0
 800a472:	f1a8 0850 	sub.w	r8, r8, #80	; 0x50
 800a476:	d1ec      	bne.n	800a452 <flashStoreNodes+0x1a>
 800a478:	4f0c      	ldr	r7, [pc, #48]	; (800a4ac <flashStoreNodes+0x74>)
 800a47a:	f509 74b4 	add.w	r4, r9, #360	; 0x168
 800a47e:	f509 7934 	add.w	r9, r9, #720	; 0x2d0
 800a482:	f104 0624 	add.w	r6, r4, #36	; 0x24
	uint32_t address=start_adress_sector1;
 800a486:	463d      	mov	r5, r7
	//列
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				FLASH_Write_Word(address+0, my_map.ColumnNode[i][j].existence);
 800a488:	f895 12d0 	ldrb.w	r1, [r5, #720]	; 0x2d0
 800a48c:	4620      	mov	r0, r4
				address += 4;
 800a48e:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, my_map.ColumnNode[i][j].existence);
 800a490:	f003 f890 	bl	800d5b4 <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a494:	42a6      	cmp	r6, r4
 800a496:	f105 0508 	add.w	r5, r5, #8
 800a49a:	d1f5      	bne.n	800a488 <flashStoreNodes+0x50>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a49c:	454e      	cmp	r6, r9
 800a49e:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800a4a2:	d1ee      	bne.n	800a482 <flashStoreNodes+0x4a>
			}
	}
}
 800a4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4a8:	08016400 	.word	0x08016400
 800a4ac:	20000698 	.word	0x20000698

0800a4b0 <wall_init>:
void wall_init(){
 800a4b0:	4920      	ldr	r1, [pc, #128]	; (800a534 <wall_init+0x84>)
 800a4b2:	b470      	push	{r4, r5, r6}

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800a4b4:	2500      	movs	r5, #0
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
				Wall[i][j].north = UNKNOWN;
 800a4b6:	24aa      	movs	r4, #170	; 0xaa
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a4b8:	2300      	movs	r3, #0
				Wall[i][j].north = UNKNOWN;
 800a4ba:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800a4be:	18c2      	adds	r2, r0, r3
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	2b09      	cmp	r3, #9
				Wall[i][j].north = UNKNOWN;
 800a4c4:	f801 4012 	strb.w	r4, [r1, r2, lsl #1]
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a4c8:	d1f9      	bne.n	800a4be <wall_init+0xe>
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800a4ca:	3501      	adds	r5, #1
 800a4cc:	2d09      	cmp	r5, #9
 800a4ce:	d1f3      	bne.n	800a4b8 <wall_init+0x8>

			}
	}

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800a4d0:	2300      	movs	r3, #0
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
 800a4d8:	eb01 0540 	add.w	r5, r1, r0, lsl #1
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800a4dc:	f103 0448 	add.w	r4, r3, #72	; 0x48
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800a4e0:	7c2e      	ldrb	r6, [r5, #16]
 800a4e2:	f362 0601 	bfi	r6, r2, #0, #2
 800a4e6:	742e      	strb	r6, [r5, #16]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800a4e8:	f811 5014 	ldrb.w	r5, [r1, r4, lsl #1]
 800a4ec:	f362 0583 	bfi	r5, r2, #2, #2
 800a4f0:	f801 5014 	strb.w	r5, [r1, r4, lsl #1]
		Wall[n][0].south = WALL;
 800a4f4:	f811 4010 	ldrb.w	r4, [r1, r0, lsl #1]
 800a4f8:	f362 1405 	bfi	r4, r2, #4, #2
 800a4fc:	f801 4010 	strb.w	r4, [r1, r0, lsl #1]
		Wall[0][n].west = WALL;
 800a500:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 800a504:	f362 1087 	bfi	r0, r2, #6, #2
 800a508:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800a50c:	3301      	adds	r3, #1
 800a50e:	2b09      	cmp	r3, #9
 800a510:	d1e0      	bne.n	800a4d4 <wall_init+0x24>
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
 800a512:	780b      	ldrb	r3, [r1, #0]
	Wall[0][0].north = NOWALL;
	Wall[1][0].west = WALL;
 800a514:	7c8c      	ldrb	r4, [r1, #18]
	Wall[0][1].south = NOWALL;
 800a516:	7888      	ldrb	r0, [r1, #2]
	Wall[0][0].east = WALL;
 800a518:	f362 0383 	bfi	r3, r2, #2, #2
	Wall[1][0].west = WALL;
 800a51c:	f362 1487 	bfi	r4, r2, #6, #2
	Wall[0][0].north = NOWALL;
 800a520:	f36f 0301 	bfc	r3, #0, #2
	Wall[0][1].south = NOWALL;
 800a524:	f36f 1005 	bfc	r0, #4, #2
	Wall[1][0].west = WALL;
 800a528:	748c      	strb	r4, [r1, #18]
	Wall[0][0].north = NOWALL;
 800a52a:	700b      	strb	r3, [r1, #0]
	Wall[0][1].south = NOWALL;
 800a52c:	7088      	strb	r0, [r1, #2]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800a52e:	bc70      	pop	{r4, r5, r6}
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	20000e44 	.word	0x20000e44

0800a538 <wall_set>:
}
//壁の更新xyグローバル
void wall_set(){
	uint8_t wall_dir[4];
	//壁センサ値を読んで、各方角の壁の有無を判定
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800a538:	4b4f      	ldr	r3, [pc, #316]	; (800a678 <wall_set+0x140>)
 800a53a:	4950      	ldr	r1, [pc, #320]	; (800a67c <wall_set+0x144>)
 800a53c:	edd3 4a03 	vldr	s9, [r3, #12]
 800a540:	edd3 7a00 	vldr	s15, [r3]
 800a544:	ed9f 5a4e 	vldr	s10, [pc, #312]	; 800a680 <wall_set+0x148>
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800a548:	edd3 5a01 	vldr	s11, [r3, #4]
 800a54c:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 800a684 <wall_set+0x14c>
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800a550:	edd3 6a02 	vldr	s13, [r3, #8]
 800a554:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800a688 <wall_set+0x150>
void wall_set(){
 800a558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800a55c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800a560:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800a564:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800a568:	7acd      	ldrb	r5, [r1, #11]

	  //各方角の壁に壁の有無を代入
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800a56a:	7a0a      	ldrb	r2, [r1, #8]
 800a56c:	7a48      	ldrb	r0, [r1, #9]
 800a56e:	4947      	ldr	r1, [pc, #284]	; (800a68c <wall_set+0x154>)
void wall_set(){
 800a570:	b083      	sub	sp, #12
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800a572:	eef4 7ac5 	vcmpe.f32	s15, s10
 800a576:	ae02      	add	r6, sp, #8
 800a578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800a57c:	f105 0c01 	add.w	ip, r5, #1
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800a580:	f105 0402 	add.w	r4, r5, #2
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800a584:	eef4 5ac6 	vcmpe.f32	s11, s12
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800a588:	f105 0303 	add.w	r3, r5, #3
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800a58c:	bfcc      	ite	gt
 800a58e:	2701      	movgt	r7, #1
 800a590:	2700      	movle	r7, #0
 800a592:	4435      	add	r5, r6
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800a594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a598:	f00c 0c03 	and.w	ip, ip, #3
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800a59c:	f004 0403 	and.w	r4, r4, #3
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800a5a0:	f003 0303 	and.w	r3, r3, #3
 800a5a4:	eef4 6ac7 	vcmpe.f32	s13, s14
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800a5a8:	44b4      	add	ip, r6
 800a5aa:	bfcc      	ite	gt
 800a5ac:	f04f 0801 	movgt.w	r8, #1
 800a5b0:	f04f 0800 	movle.w	r8, #0
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800a5b4:	4434      	add	r4, r6
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800a5b6:	4433      	add	r3, r6
 800a5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800a5bc:	f04f 0900 	mov.w	r9, #0
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800a5c0:	ea4f 06c2 	mov.w	r6, r2, lsl #3
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800a5c4:	f805 7c04 	strb.w	r7, [r5, #-4]
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800a5c8:	bfcc      	ite	gt
 800a5ca:	f04f 0e01 	movgt.w	lr, #1
 800a5ce:	46ce      	movle	lr, r9
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800a5d0:	18b7      	adds	r7, r6, r2
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800a5d2:	f80c 8c04 	strb.w	r8, [ip, #-4]
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800a5d6:	f804 9c04 	strb.w	r9, [r4, #-4]
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800a5da:	eb07 0c00 	add.w	ip, r7, r0
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800a5de:	f803 ec04 	strb.w	lr, [r3, #-4]
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800a5e2:	f89d 8004 	ldrb.w	r8, [sp, #4]
 800a5e6:	f811 301c 	ldrb.w	r3, [r1, ip, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
 800a5ea:	f89d e005 	ldrb.w	lr, [sp, #5]
	  Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
 800a5ee:	f89d 5006 	ldrb.w	r5, [sp, #6]
	  Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
 800a5f2:	f89d 4007 	ldrb.w	r4, [sp, #7]
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800a5f6:	f008 0803 	and.w	r8, r8, #3
 800a5fa:	f368 0301 	bfi	r3, r8, #0, #2
	  Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
 800a5fe:	f00e 0e03 	and.w	lr, lr, #3
 800a602:	f36e 0383 	bfi	r3, lr, #2, #2
	  Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
 800a606:	f005 0503 	and.w	r5, r5, #3
 800a60a:	f365 1305 	bfi	r3, r5, #4, #2
	  Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
 800a60e:	f004 0403 	and.w	r4, r4, #3
 800a612:	f364 1387 	bfi	r3, r4, #6, #2

	  //端の座標でなければ反対の壁も記入
	  //uint32_t address;
	  if(Pos.NextY < (NUMBER_OF_SQUARES-1) )
 800a616:	2807      	cmp	r0, #7
	  Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
 800a618:	f801 301c 	strb.w	r3, [r1, ip, lsl #1]
	  if(Pos.NextY < (NUMBER_OF_SQUARES-1) )
 800a61c:	d807      	bhi.n	800a62e <wall_set+0xf6>
	  {
		  Wall[Pos.NextX][Pos.NextY+1].south = wall_dir[0];//北端でなければ
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	441f      	add	r7, r3
 800a622:	f811 3017 	ldrb.w	r3, [r1, r7, lsl #1]
 800a626:	f368 1305 	bfi	r3, r8, #4, #2
 800a62a:	f801 3017 	strb.w	r3, [r1, r7, lsl #1]
		  //address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY+1)*16*(NUMBER_OF_SQUARES) );
		  //FLASH_Write_Word(address+8, Wall[Pos.NextX][Pos.NextY+1].south);
	  }
	  if(Pos.NextX < (NUMBER_OF_SQUARES-1) )
 800a62e:	2a07      	cmp	r2, #7
 800a630:	d809      	bhi.n	800a646 <wall_set+0x10e>
	  {
		  Wall[Pos.NextX+1][Pos.NextY].west = wall_dir[1];//東端でなければ
 800a632:	1c53      	adds	r3, r2, #1
 800a634:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800a638:	4403      	add	r3, r0
 800a63a:	f811 7013 	ldrb.w	r7, [r1, r3, lsl #1]
 800a63e:	f36e 1787 	bfi	r7, lr, #6, #2
 800a642:	f801 7013 	strb.w	r7, [r1, r3, lsl #1]
//		  address = start_adress_sector1 + ( (Pos.NextX+1)*16) + ( (Pos.NextY)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+12, Wall[Pos.NextX+1][Pos.NextY].west);
	  }
	  if(Pos.NextY > 0 )
 800a646:	b140      	cbz	r0, 800a65a <wall_set+0x122>
	  {
		  Wall[Pos.NextX][Pos.NextY-1].north = wall_dir[2];//南端でなければ
 800a648:	18b3      	adds	r3, r6, r2
 800a64a:	1e46      	subs	r6, r0, #1
 800a64c:	4433      	add	r3, r6
 800a64e:	f811 6013 	ldrb.w	r6, [r1, r3, lsl #1]
 800a652:	f365 0601 	bfi	r6, r5, #0, #2
 800a656:	f801 6013 	strb.w	r6, [r1, r3, lsl #1]
//		  address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY-1)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+0, Wall[Pos.NextX][Pos.NextY-1].north);
	  }
	  if(Pos.NextX > 0 )
 800a65a:	b14a      	cbz	r2, 800a670 <wall_set+0x138>
	  {
		  Wall[Pos.NextX-1][Pos.NextY].east = wall_dir[3];//西端でなければ
 800a65c:	3a01      	subs	r2, #1
 800a65e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800a662:	4402      	add	r2, r0
 800a664:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a668:	f364 0383 	bfi	r3, r4, #2, #2
 800a66c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]


	  //一旦flashお休み。
	  //flashに書き込む
//	  wall_store_running(Pos.X,Pos.Y);
}
 800a670:	b003      	add	sp, #12
 800a672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a676:	bf00      	nop
 800a678:	20000cbc 	.word	0x20000cbc
 800a67c:	20000004 	.word	0x20000004
 800a680:	42340000 	.word	0x42340000
 800a684:	42b40000 	.word	0x42b40000
 800a688:	42c80000 	.word	0x42c80000
 800a68c:	20000e44 	.word	0x20000e44

0800a690 <make_map>:
	//set_walk_val_goal(x, y,2);			//ゴール座標の歩数を０に設定
}


void make_map(uint8_t x, uint8_t y, int mask)	//歩数マップを作成する
{
 800a690:	4b55      	ldr	r3, [pc, #340]	; (800a7e8 <make_map+0x158>)
 800a692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a696:	f103 0902 	add.w	r9, r3, #2
 800a69a:	f109 06a0 	add.w	r6, r9, #160	; 0xa0
			walk_map[i][j] = 255;	//すべて255で埋める
 800a69e:	25ff      	movs	r5, #255	; 0xff
 800a6a0:	f103 0412 	add.w	r4, r3, #18
 800a6a4:	f823 5f02 	strh.w	r5, [r3, #2]!
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800a6a8:	42a3      	cmp	r3, r4
 800a6aa:	d1fb      	bne.n	800a6a4 <make_map+0x14>
	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800a6ac:	42b3      	cmp	r3, r6
 800a6ae:	d1f7      	bne.n	800a6a0 <make_map+0x10>
			goal_x + goal_edge_num,
 800a6b0:	4b4e      	ldr	r3, [pc, #312]	; (800a7ec <make_map+0x15c>)
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	18c4      	adds	r4, r0, r3
	for(; goal_x < n[0]; goal_x++)
 800a6b6:	b2e4      	uxtb	r4, r4
			goal_y + goal_edge_num
 800a6b8:	18cd      	adds	r5, r1, r3
	for(; goal_x < n[0]; goal_x++)
 800a6ba:	42a0      	cmp	r0, r4
			goal_y + goal_edge_num
 800a6bc:	b2ed      	uxtb	r5, r5
	for(; goal_x < n[0]; goal_x++)
 800a6be:	d21c      	bcs.n	800a6fa <make_map+0x6a>
 800a6c0:	1e5e      	subs	r6, r3, #1
 800a6c2:	1c43      	adds	r3, r0, #1
 800a6c4:	fa53 f686 	uxtab	r6, r3, r6
 800a6c8:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 800a6cc:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800a6d0:	1e6f      	subs	r7, r5, #1
			walk_map[goal_x][goal_y] = 0;
 800a6d2:	2000      	movs	r0, #0
		for(; goal_y < n[1]; goal_y++)
 800a6d4:	42a9      	cmp	r1, r5
 800a6d6:	d20d      	bcs.n	800a6f4 <make_map+0x64>
 800a6d8:	190b      	adds	r3, r1, r4
 800a6da:	1a79      	subs	r1, r7, r1
 800a6dc:	fa53 f181 	uxtab	r1, r3, r1
 800a6e0:	eb09 0343 	add.w	r3, r9, r3, lsl #1
 800a6e4:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 800a6e8:	3b02      	subs	r3, #2
			walk_map[goal_x][goal_y] = 0;
 800a6ea:	f823 0f02 	strh.w	r0, [r3, #2]!
		for(; goal_y < n[1]; goal_y++)
 800a6ee:	428b      	cmp	r3, r1
 800a6f0:	d1fb      	bne.n	800a6ea <make_map+0x5a>
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	3409      	adds	r4, #9
	for(; goal_x < n[0]; goal_x++)
 800a6f6:	42b4      	cmp	r4, r6
 800a6f8:	d1ec      	bne.n	800a6d4 <make_map+0x44>
				}
				//探索のときは
				//最短のときは、未探索壁の経路は重みを更新しない
				if(j < NUMBER_OF_SQUARES-1)					//範囲チェック
				{
					if( (Wall[i][j].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800a6fa:	4c3d      	ldr	r4, [pc, #244]	; (800a7f0 <make_map+0x160>)
 800a6fc:	f1a9 0902 	sub.w	r9, r9, #2
					if( (Wall[i][j].west & mask) == NOWALL)		//壁がなければ
					{
						if(walk_map[i-1][j] == 255)			//値が入っていなければ
						{
							walk_map[i-1][j] = walk_map[i][j] + 1;	//値を代入
							change_flag = true;		//値が更新されたことを示す
 800a700:	f04f 0c00 	mov.w	ip, #0
 800a704:	4667      	mov	r7, ip
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800a706:	46e0      	mov	r8, ip
							change_flag = true;		//値が更新されたことを示す
 800a708:	f04f 0e12 	mov.w	lr, #18
 800a70c:	eba9 010c 	sub.w	r1, r9, ip
		for(; goal_y < n[1]; goal_y++)
 800a710:	2300      	movs	r3, #0
					if( (Wall[i][j].west & mask) == NOWALL)		//壁がなければ
 800a712:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
				if(walk_map[i][j] == 255)		//255の場合は次へ
 800a716:	f831 6f02 	ldrh.w	r6, [r1, #2]!
 800a71a:	2eff      	cmp	r6, #255	; 0xff
 800a71c:	d03c      	beq.n	800a798 <make_map+0x108>
				if(j < NUMBER_OF_SQUARES-1)					//範囲チェック
 800a71e:	2b08      	cmp	r3, #8
 800a720:	d00d      	beq.n	800a73e <make_map+0xae>
					if( (Wall[i][j].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800a722:	18c5      	adds	r5, r0, r3
 800a724:	f814 5015 	ldrb.w	r5, [r4, r5, lsl #1]
 800a728:	f005 0503 	and.w	r5, r5, #3
 800a72c:	4215      	tst	r5, r2
 800a72e:	d106      	bne.n	800a73e <make_map+0xae>
						if(walk_map[i][j+1] == 255)			//まだ値が入っていなければ
 800a730:	884d      	ldrh	r5, [r1, #2]
 800a732:	2dff      	cmp	r5, #255	; 0xff
 800a734:	d103      	bne.n	800a73e <make_map+0xae>
							walk_map[i][j+1] = walk_map[i][j] + 1;	//値を代入
 800a736:	1c75      	adds	r5, r6, #1
 800a738:	804d      	strh	r5, [r1, #2]
							change_flag = true;		//値が更新されたことを示す
 800a73a:	f04f 0801 	mov.w	r8, #1
				if(i < NUMBER_OF_SQUARES-1)					//範囲チェック
 800a73e:	2f08      	cmp	r7, #8
 800a740:	d046      	beq.n	800a7d0 <make_map+0x140>
					if( (Wall[i][j].east & mask) == NOWALL)		//壁がなければ
 800a742:	18c5      	adds	r5, r0, r3
 800a744:	f814 5015 	ldrb.w	r5, [r4, r5, lsl #1]
 800a748:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800a74c:	4215      	tst	r5, r2
 800a74e:	d106      	bne.n	800a75e <make_map+0xce>
 800a750:	eb01 050c 	add.w	r5, r1, ip
						if(walk_map[i+1][j] == 255)			//値が入っていなければ
 800a754:	f835 a00e 	ldrh.w	sl, [r5, lr]
 800a758:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800a75c:	d02b      	beq.n	800a7b6 <make_map+0x126>
				if(j > 0)						//範囲チェック
 800a75e:	b153      	cbz	r3, 800a776 <make_map+0xe6>
					if( (Wall[i][j].south & mask) == NOWALL)	//壁がなければ
 800a760:	18c5      	adds	r5, r0, r3
 800a762:	f814 5015 	ldrb.w	r5, [r4, r5, lsl #1]
 800a766:	f3c5 1501 	ubfx	r5, r5, #4, #2
 800a76a:	4215      	tst	r5, r2
 800a76c:	d103      	bne.n	800a776 <make_map+0xe6>
						if(walk_map[i][j-1] == 255)			//値が入っていなければ
 800a76e:	f831 5c02 	ldrh.w	r5, [r1, #-2]
 800a772:	2dff      	cmp	r5, #255	; 0xff
 800a774:	d025      	beq.n	800a7c2 <make_map+0x132>
				if(i > 0)						//範囲チェック
 800a776:	b17f      	cbz	r7, 800a798 <make_map+0x108>
					if( (Wall[i][j].west & mask) == NOWALL)		//壁がなければ
 800a778:	18c5      	adds	r5, r0, r3
 800a77a:	f814 5015 	ldrb.w	r5, [r4, r5, lsl #1]
 800a77e:	ea12 1595 	ands.w	r5, r2, r5, lsr #6
 800a782:	d109      	bne.n	800a798 <make_map+0x108>
						if(walk_map[i-1][j] == 255)			//値が入っていなければ
 800a784:	f831 5c12 	ldrh.w	r5, [r1, #-18]
 800a788:	2dff      	cmp	r5, #255	; 0xff
 800a78a:	d105      	bne.n	800a798 <make_map+0x108>
							walk_map[i-1][j] = walk_map[i][j] + 1;	//値を代入
 800a78c:	880d      	ldrh	r5, [r1, #0]
 800a78e:	3501      	adds	r5, #1
 800a790:	f821 5c12 	strh.w	r5, [r1, #-18]
							change_flag = true;		//値が更新されたことを示す
 800a794:	f04f 0801 	mov.w	r8, #1
 800a798:	3301      	adds	r3, #1
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800a79a:	2b09      	cmp	r3, #9
 800a79c:	d1bb      	bne.n	800a716 <make_map+0x86>
 800a79e:	3701      	adds	r7, #1
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800a7a0:	2f09      	cmp	r7, #9
 800a7a2:	f1ac 0c12 	sub.w	ip, ip, #18
 800a7a6:	f10e 0e12 	add.w	lr, lr, #18
 800a7aa:	d1af      	bne.n	800a70c <make_map+0x7c>

			}

		}

	}while(change_flag == true);	//全体を作り終わるまで待つ
 800a7ac:	f1b8 0f00 	cmp.w	r8, #0
 800a7b0:	d1a6      	bne.n	800a700 <make_map+0x70>

}
 800a7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							walk_map[i+1][j] = walk_map[i][j] + 1;	//値を代入
 800a7b6:	3601      	adds	r6, #1
 800a7b8:	f825 600e 	strh.w	r6, [r5, lr]
							change_flag = true;		//値が更新されたことを示す
 800a7bc:	f04f 0801 	mov.w	r8, #1
 800a7c0:	e7cd      	b.n	800a75e <make_map+0xce>
							walk_map[i][j-1] = walk_map[i][j] + 1;	//値を代入
 800a7c2:	880d      	ldrh	r5, [r1, #0]
 800a7c4:	3501      	adds	r5, #1
 800a7c6:	f821 5c02 	strh.w	r5, [r1, #-2]
							change_flag = true;		//値が更新されたことを示す
 800a7ca:	f04f 0801 	mov.w	r8, #1
 800a7ce:	e7d2      	b.n	800a776 <make_map+0xe6>
				if(j > 0)						//範囲チェック
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d0d1      	beq.n	800a778 <make_map+0xe8>
					if( (Wall[i][j].south & mask) == NOWALL)	//壁がなければ
 800a7d4:	f103 0548 	add.w	r5, r3, #72	; 0x48
 800a7d8:	f814 5015 	ldrb.w	r5, [r4, r5, lsl #1]
 800a7dc:	f3c5 1501 	ubfx	r5, r5, #4, #2
 800a7e0:	4215      	tst	r5, r2
 800a7e2:	d1c9      	bne.n	800a778 <make_map+0xe8>
 800a7e4:	e7c3      	b.n	800a76e <make_map+0xde>
 800a7e6:	bf00      	nop
 800a7e8:	20000cca 	.word	0x20000cca
 800a7ec:	20000c78 	.word	0x20000c78
 800a7f0:	20000e44 	.word	0x20000e44

0800a7f4 <flashCopyNodesToRam>:
	}

}
//評価値マップ生成。
void flashCopyNodesToRam()
{
 800a7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t address=start_adress_sector1;
 800a7f8:	4b21      	ldr	r3, [pc, #132]	; (800a880 <flashCopyNodesToRam+0x8c>)
 800a7fa:	f8df b088 	ldr.w	fp, [pc, #136]	; 800a884 <flashCopyNodesToRam+0x90>
 800a7fe:	f8d3 a000 	ldr.w	sl, [r3]
 800a802:	f04f 0800 	mov.w	r8, #0
 800a806:	ebca 79ca 	rsb	r9, sl, sl, lsl #31
{
 800a80a:	b083      	sub	sp, #12
 800a80c:	ea4f 0949 	mov.w	r9, r9, lsl #1
	uint32_t address=start_adress_sector1;
 800a810:	4654      	mov	r4, sl

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				uint32_t wall_data=0;
 800a812:	4647      	mov	r7, r8
 800a814:	eb08 0509 	add.w	r5, r8, r9
				FLASH_Read_Word(address, &wall_data);
				my_map.RawNode[i][j].existence = wall_data;
 800a818:	445d      	add	r5, fp
 800a81a:	f104 0628 	add.w	r6, r4, #40	; 0x28
				FLASH_Read_Word(address, &wall_data);
 800a81e:	4620      	mov	r0, r4
 800a820:	a901      	add	r1, sp, #4
				uint32_t wall_data=0;
 800a822:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800a824:	f002 feee 	bl	800d604 <FLASH_Read_Word>
				my_map.RawNode[i][j].existence = wall_data;
 800a828:	9b01      	ldr	r3, [sp, #4]
 800a82a:	f805 3014 	strb.w	r3, [r5, r4, lsl #1]
				address += 4;
 800a82e:	3404      	adds	r4, #4
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a830:	42b4      	cmp	r4, r6
 800a832:	d1f4      	bne.n	800a81e <flashCopyNodesToRam+0x2a>
 800a834:	f108 0850 	add.w	r8, r8, #80	; 0x50
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a838:	f5b8 7f34 	cmp.w	r8, #720	; 0x2d0
 800a83c:	f1a9 0950 	sub.w	r9, r9, #80	; 0x50
 800a840:	d1e8      	bne.n	800a814 <flashCopyNodesToRam+0x20>
 800a842:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800a884 <flashCopyNodesToRam+0x90>
 800a846:	f50a 74b4 	add.w	r4, sl, #360	; 0x168
	}
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				uint32_t wall_data=0;
 800a84a:	2700      	movs	r7, #0
 800a84c:	f50a 7a34 	add.w	sl, sl, #720	; 0x2d0
 800a850:	f104 0624 	add.w	r6, r4, #36	; 0x24
	uint32_t address=start_adress_sector1;
 800a854:	4645      	mov	r5, r8
				FLASH_Read_Word(address, &wall_data);
 800a856:	4620      	mov	r0, r4
 800a858:	a901      	add	r1, sp, #4
				my_map.ColumnNode[i][j].existence = wall_data;
				address += 4;
 800a85a:	3404      	adds	r4, #4
				uint32_t wall_data=0;
 800a85c:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800a85e:	f002 fed1 	bl	800d604 <FLASH_Read_Word>
				my_map.ColumnNode[i][j].existence = wall_data;
 800a862:	9b01      	ldr	r3, [sp, #4]
 800a864:	f885 32d0 	strb.w	r3, [r5, #720]	; 0x2d0
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a868:	42a6      	cmp	r6, r4
 800a86a:	f105 0508 	add.w	r5, r5, #8
 800a86e:	d1f2      	bne.n	800a856 <flashCopyNodesToRam+0x62>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a870:	4556      	cmp	r6, sl
 800a872:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800a876:	d1eb      	bne.n	800a850 <flashCopyNodesToRam+0x5c>
			}
	}
}
 800a878:	b003      	add	sp, #12
 800a87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87e:	bf00      	nop
 800a880:	08016400 	.word	0x08016400
 800a884:	20000698 	.word	0x20000698

0800a888 <printAllWeight>:
        printf("[北 東 南 西] = [%u %u %u %u]\r\n", route[k].wall.north, route[k].wall.east, route[k].wall.south, route[k].wall.west);
        printf("\r\n");
    }
}
void printAllWeight(maze_node *maze, position *pos)
{
 800a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	b085      	sub	sp, #20
 800a88e:	4606      	mov	r6, r0
 800a890:	9003      	str	r0, [sp, #12]
    //全出力を3桁にそろえればよさそう
    //重みが0かつゴールエリア内の座標なら赤色で出力 31;1m
    //行から表示して、
    //列を表示
    //交互に
    printf("全ノードの重み\r\n");
 800a892:	4852      	ldr	r0, [pc, #328]	; (800a9dc <printAllWeight+0x154>)

    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
    {
        //行
        printf("  +  ");
 800a894:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800a9ec <printAllWeight+0x164>
            {
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
            }
            else
            {
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a898:	4d51      	ldr	r5, [pc, #324]	; (800a9e0 <printAllWeight+0x158>)
            else
            {
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
            }
            if(x < NUMBER_OF_SQUARES_X)
                printf("     ");
 800a89a:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800a9f0 <printAllWeight+0x168>
{
 800a89e:	460c      	mov	r4, r1
    printf("全ノードの重み\r\n");
 800a8a0:	f008 f98e 	bl	8012bc0 <puts>
 800a8a4:	4633      	mov	r3, r6
 800a8a6:	3340      	adds	r3, #64	; 0x40
 800a8a8:	9301      	str	r3, [sp, #4]
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	9300      	str	r3, [sp, #0]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800a8ae:	2709      	movs	r7, #9
        printf("  +  ");
 800a8b0:	4648      	mov	r0, r9
 800a8b2:	f008 f8fd 	bl	8012ab0 <iprintf>
 800a8b6:	9b01      	ldr	r3, [sp, #4]
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800a8b8:	f04f 0b00 	mov.w	fp, #0
 800a8bc:	f103 0608 	add.w	r6, r3, #8
 800a8c0:	e010      	b.n	800a8e4 <printAllWeight+0x5c>
            if(judgeRawNodeGoal(maze, x,y) == true || ((pos->x == x) && (pos->y == y)))//辿った経路を赤で表示
 800a8c2:	7823      	ldrb	r3, [r4, #0]
 800a8c4:	455b      	cmp	r3, fp
 800a8c6:	d102      	bne.n	800a8ce <printAllWeight+0x46>
 800a8c8:	7863      	ldrb	r3, [r4, #1]
 800a8ca:	42bb      	cmp	r3, r7
 800a8cc:	d018      	beq.n	800a900 <printAllWeight+0x78>
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a8ce:	f008 f8ef 	bl	8012ab0 <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800a8d2:	f1bb 0f08 	cmp.w	fp, #8
                 printf("  +  ");
 800a8d6:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800a8d8:	d01a      	beq.n	800a910 <printAllWeight+0x88>
                 printf("  +  ");
 800a8da:	f008 f8e9 	bl	8012ab0 <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800a8de:	f10b 0b01 	add.w	fp, fp, #1
 800a8e2:	3650      	adds	r6, #80	; 0x50
    if(maze->RawNode[x][y].weight == 0)
 800a8e4:	8872      	ldrh	r2, [r6, #2]
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800a8e6:	f1ab 0307 	sub.w	r3, fp, #7
 800a8ea:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	4628      	mov	r0, r5
    if(maze->RawNode[x][y].weight == 0)
 800a8f0:	2a00      	cmp	r2, #0
 800a8f2:	d1e6      	bne.n	800a8c2 <printAllWeight+0x3a>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d8e4      	bhi.n	800a8c2 <printAllWeight+0x3a>
 800a8f8:	1ffb      	subs	r3, r7, #7
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d8e0      	bhi.n	800a8c2 <printAllWeight+0x3a>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
 800a900:	4611      	mov	r1, r2
 800a902:	4838      	ldr	r0, [pc, #224]	; (800a9e4 <printAllWeight+0x15c>)
 800a904:	f008 f8d4 	bl	8012ab0 <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800a908:	f1bb 0f08 	cmp.w	fp, #8
                 printf("  +  ");
 800a90c:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800a90e:	d1e4      	bne.n	800a8da <printAllWeight+0x52>
 800a910:	1e7b      	subs	r3, r7, #1
 800a912:	461e      	mov	r6, r3
        printf("\r\n");
 800a914:	4834      	ldr	r0, [pc, #208]	; (800a9e8 <printAllWeight+0x160>)
 800a916:	9302      	str	r3, [sp, #8]
 800a918:	f008 f952 	bl	8012bc0 <puts>
 800a91c:	4633      	mov	r3, r6
 800a91e:	b2f6      	uxtb	r6, r6
 800a920:	1af6      	subs	r6, r6, r3
 800a922:	00f6      	lsls	r6, r6, #3
 800a924:	f8dd a004 	ldr.w	sl, [sp, #4]
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800a928:	f04f 0b00 	mov.w	fp, #0
 800a92c:	e00d      	b.n	800a94a <printAllWeight+0xc2>
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800a92e:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800a932:	f008 f8bd 	bl	8012ab0 <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800a936:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800a93a:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800a93c:	d022      	beq.n	800a984 <printAllWeight+0xfc>
                printf("     ");
 800a93e:	f008 f8b7 	bl	8012ab0 <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800a942:	f10b 0b01 	add.w	fp, fp, #1
 800a946:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
    if(maze->ColumnNode[x][y].weight == 0)
 800a94a:	eb0a 0106 	add.w	r1, sl, r6
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a94e:	f1ab 0307 	sub.w	r3, fp, #7
    if(maze->ColumnNode[x][y].weight == 0)
 800a952:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a956:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800a958:	4628      	mov	r0, r5
    if(maze->ColumnNode[x][y].weight == 0)
 800a95a:	b921      	cbnz	r1, 800a966 <printAllWeight+0xde>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d802      	bhi.n	800a966 <printAllWeight+0xde>
 800a960:	9b00      	ldr	r3, [sp, #0]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d905      	bls.n	800a972 <printAllWeight+0xea>
            if(judgeColumnNodeGoal(maze, x,y-1) == true || ((pos->x == x) && (pos->y == y)))
 800a966:	7823      	ldrb	r3, [r4, #0]
 800a968:	455b      	cmp	r3, fp
 800a96a:	d1e0      	bne.n	800a92e <printAllWeight+0xa6>
 800a96c:	7863      	ldrb	r3, [r4, #1]
 800a96e:	42bb      	cmp	r3, r7
 800a970:	d1dd      	bne.n	800a92e <printAllWeight+0xa6>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->ColumnNode[x][y-1].weight);
 800a972:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800a976:	481b      	ldr	r0, [pc, #108]	; (800a9e4 <printAllWeight+0x15c>)
 800a978:	f008 f89a 	bl	8012ab0 <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800a97c:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800a980:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800a982:	d1dc      	bne.n	800a93e <printAllWeight+0xb6>
        }
        printf("\r\n");
 800a984:	4818      	ldr	r0, [pc, #96]	; (800a9e8 <printAllWeight+0x160>)
 800a986:	f008 f91b 	bl	8012bc0 <puts>
 800a98a:	9b00      	ldr	r3, [sp, #0]
 800a98c:	9f02      	ldr	r7, [sp, #8]
 800a98e:	f103 3aff 	add.w	sl, r3, #4294967295
 800a992:	9b01      	ldr	r3, [sp, #4]
 800a994:	3b08      	subs	r3, #8
 800a996:	9301      	str	r3, [sp, #4]
 800a998:	fa5f f38a 	uxtb.w	r3, sl
 800a99c:	9300      	str	r3, [sp, #0]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800a99e:	2f00      	cmp	r7, #0
 800a9a0:	d186      	bne.n	800a8b0 <printAllWeight+0x28>
    }
    //y が0のときの行だけ表示
    printf("  +  ");
 800a9a2:	4812      	ldr	r0, [pc, #72]	; (800a9ec <printAllWeight+0x164>)
    for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
    {
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a9a4:	4e0e      	ldr	r6, [pc, #56]	; (800a9e0 <printAllWeight+0x158>)
        if(x < NUMBER_OF_SQUARES_X-1)
                printf("  +  ");
 800a9a6:	4607      	mov	r7, r0
    printf("  +  ");
 800a9a8:	f008 f882 	bl	8012ab0 <iprintf>
 800a9ac:	9b03      	ldr	r3, [sp, #12]
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	8859      	ldrh	r1, [r3, #2]
 800a9b2:	461c      	mov	r4, r3
 800a9b4:	f008 f87c 	bl	8012ab0 <iprintf>
 800a9b8:	f504 7520 	add.w	r5, r4, #640	; 0x280
                printf("  +  ");
 800a9bc:	4638      	mov	r0, r7
 800a9be:	f008 f877 	bl	8012ab0 <iprintf>
 800a9c2:	3450      	adds	r4, #80	; 0x50
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a9c4:	8861      	ldrh	r1, [r4, #2]
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f008 f872 	bl	8012ab0 <iprintf>
        if(x < NUMBER_OF_SQUARES_X-1)
 800a9cc:	42ac      	cmp	r4, r5
 800a9ce:	d1f5      	bne.n	800a9bc <printAllWeight+0x134>
    }
    printf("\r\n");
 800a9d0:	4805      	ldr	r0, [pc, #20]	; (800a9e8 <printAllWeight+0x160>)
    
    
}
 800a9d2:	b005      	add	sp, #20
 800a9d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800a9d8:	f008 b8f2 	b.w	8012bc0 <puts>
 800a9dc:	080161b4 	.word	0x080161b4
 800a9e0:	080161e8 	.word	0x080161e8
 800a9e4:	080161d4 	.word	0x080161d4
 800a9e8:	08016538 	.word	0x08016538
 800a9ec:	080161cc 	.word	0x080161cc
 800a9f0:	080161f0 	.word	0x080161f0

0800a9f4 <initWeight>:
            maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].draw == true) ? MAX_WEIGHT : 0;     //西
        }
    }
}
void initWeight(maze_node *maze)
{
 800a9f4:	b410      	push	{r4}
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	f500 7434 	add.w	r4, r0, #720	; 0x2d0
    // }
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800a9fc:	f640 71ff 	movw	r1, #4095	; 0xfff
 800aa00:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800aa04:	8059      	strh	r1, [r3, #2]
 800aa06:	3308      	adds	r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d1fb      	bne.n	800aa04 <initWeight+0x10>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800aa0c:	42a3      	cmp	r3, r4
 800aa0e:	d1f7      	bne.n	800aa00 <initWeight+0xc>
    }
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800aa10:	f640 71ff 	movw	r1, #4095	; 0xfff
 800aa14:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800aa18:	f8a0 12d2 	strh.w	r1, [r0, #722]	; 0x2d2
 800aa1c:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800aa1e:	4282      	cmp	r2, r0
 800aa20:	d1fa      	bne.n	800aa18 <initWeight+0x24>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d1f6      	bne.n	800aa14 <initWeight+0x20>
        }
    }
}
 800aa26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <initMaze>:
void initMaze(maze_node *maze) //重みは別で初期化
{
 800aa2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    //まず未探索状態にする
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800aa2e:	2700      	movs	r7, #0
 800aa30:	4604      	mov	r4, r0
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800aa32:	4684      	mov	ip, r0
        {
            maze->RawNode[i][j].existence = UNKNOWN;
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800aa34:	4639      	mov	r1, r7
            maze->RawNode[i][j].existence = UNKNOWN;
 800aa36:	2602      	movs	r6, #2
 800aa38:	b2fd      	uxtb	r5, r7
{
 800aa3a:	4663      	mov	r3, ip
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800aa3c:	2201      	movs	r2, #1
            maze->RawNode[i][j].rc = 0;
            maze->RawNode[i][j].pos.x = i;
            maze->RawNode[i][j].pos.y = j;
 800aa3e:	73da      	strb	r2, [r3, #15]
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800aa40:	3201      	adds	r2, #1
 800aa42:	2a09      	cmp	r2, #9
            maze->RawNode[i][j].existence = UNKNOWN;
 800aa44:	721e      	strb	r6, [r3, #8]
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800aa46:	7319      	strb	r1, [r3, #12]
            maze->RawNode[i][j].rc = 0;
 800aa48:	7359      	strb	r1, [r3, #13]
            maze->RawNode[i][j].pos.x = i;
 800aa4a:	739d      	strb	r5, [r3, #14]
 800aa4c:	f103 0308 	add.w	r3, r3, #8
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800aa50:	d1f5      	bne.n	800aa3e <initMaze+0x12>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800aa52:	3701      	adds	r7, #1
 800aa54:	2f09      	cmp	r7, #9
 800aa56:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800aa5a:	d1ed      	bne.n	800aa38 <initMaze+0xc>
        }
    }
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800aa5c:	f04f 0c01 	mov.w	ip, #1
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].existence = UNKNOWN;
            maze->ColumnNode[i][j].draw = false;
            maze->ColumnNode[i][j].rc = 1;
 800aa60:	4667      	mov	r7, ip
 800aa62:	f100 0e48 	add.w	lr, r0, #72	; 0x48
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800aa66:	2602      	movs	r6, #2
            maze->ColumnNode[i][j].draw = false;
 800aa68:	2500      	movs	r5, #0
 800aa6a:	fa5f f18c 	uxtb.w	r1, ip
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800aa6e:	4673      	mov	r3, lr
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800aa70:	2200      	movs	r2, #0
            maze->ColumnNode[i][j].pos.x = i;
            maze->ColumnNode[i][j].pos.y = j;
 800aa72:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800aa76:	3201      	adds	r2, #1
 800aa78:	2a09      	cmp	r2, #9
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800aa7a:	f883 62d0 	strb.w	r6, [r3, #720]	; 0x2d0
            maze->ColumnNode[i][j].draw = false;
 800aa7e:	f883 52d4 	strb.w	r5, [r3, #724]	; 0x2d4
            maze->ColumnNode[i][j].rc = 1;
 800aa82:	f883 72d5 	strb.w	r7, [r3, #725]	; 0x2d5
            maze->ColumnNode[i][j].pos.x = i;
 800aa86:	f883 12d6 	strb.w	r1, [r3, #726]	; 0x2d6
 800aa8a:	f103 0308 	add.w	r3, r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800aa8e:	d1f0      	bne.n	800aa72 <initMaze+0x46>
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800aa90:	f10c 0c01 	add.w	ip, ip, #1
 800aa94:	f1bc 0f09 	cmp.w	ip, #9
 800aa98:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 800aa9c:	d1e5      	bne.n	800aa6a <initMaze+0x3e>
        }
    }
    
    // 壁の有無を初期化
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800aa9e:	2200      	movs	r2, #0
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1

        maze->RawNode[i][0].draw = true;                        
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;

        maze->RawNode[i][0].rc = 0;
 800aaa0:	4616      	mov	r6, r2
 800aaa2:	4603      	mov	r3, r0
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800aaa4:	2101      	movs	r1, #1
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;

        maze->RawNode[i][0].pos.x = i;
 800aaa6:	b2d5      	uxtb	r5, r2
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800aaa8:	3201      	adds	r2, #1
 800aaaa:	2a09      	cmp	r2, #9
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800aaac:	7019      	strb	r1, [r3, #0]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1
 800aaae:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
        maze->RawNode[i][0].draw = true;                        
 800aab2:	7119      	strb	r1, [r3, #4]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;
 800aab4:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
        maze->RawNode[i][0].rc = 0;
 800aab8:	715e      	strb	r6, [r3, #5]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;
 800aaba:	f883 604d 	strb.w	r6, [r3, #77]	; 0x4d
        maze->RawNode[i][0].pos.y = NUMBER_OF_SQUARES_Y;
 800aabe:	f883 c007 	strb.w	ip, [r3, #7]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.y = NUMBER_OF_SQUARES_Y;
 800aac2:	f883 c04f 	strb.w	ip, [r3, #79]	; 0x4f
        maze->RawNode[i][0].pos.x = i;
 800aac6:	719d      	strb	r5, [r3, #6]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
 800aac8:	f883 504e 	strb.w	r5, [r3, #78]	; 0x4e
 800aacc:	f103 0350 	add.w	r3, r3, #80	; 0x50
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800aad0:	d1e9      	bne.n	800aaa6 <initMaze+0x7a>
    }
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800aad2:	2100      	movs	r1, #0
    {
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800aad4:	2301      	movs	r3, #1

        maze->ColumnNode[0][j].rc = 1;
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;

        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
        maze->ColumnNode[0][j].pos.y = j;
 800aad6:	b2cd      	uxtb	r5, r1
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800aad8:	3101      	adds	r1, #1
 800aada:	2909      	cmp	r1, #9
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800aadc:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].existence = WALL;  //東壁すべて1
 800aae0:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
        maze->ColumnNode[0][j].draw = true;                    
 800aae4:	f884 32d4 	strb.w	r3, [r4, #724]	; 0x2d4
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;
 800aae8:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
        maze->ColumnNode[0][j].rc = 1;
 800aaec:	f884 32d5 	strb.w	r3, [r4, #725]	; 0x2d5
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;
 800aaf0:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
 800aaf4:	f884 22d6 	strb.w	r2, [r4, #726]	; 0x2d6
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
 800aaf8:	f884 255e 	strb.w	r2, [r4, #1374]	; 0x55e
        maze->ColumnNode[0][j].pos.y = j;
 800aafc:	f884 52d7 	strb.w	r5, [r4, #727]	; 0x2d7
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.y = j;
 800ab00:	f884 555f 	strb.w	r5, [r4, #1375]	; 0x55f
 800ab04:	f104 0408 	add.w	r4, r4, #8
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800ab08:	d1e5      	bne.n	800aad6 <initMaze+0xaa>
    }
    maze->ColumnNode[1][0].existence = WALL;    //東1
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800ab0a:	2200      	movs	r2, #0
    maze->ColumnNode[1][0].existence = WALL;    //東1
 800ab0c:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318

    maze->ColumnNode[1][0].draw = true;    //東1
 800ab10:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800ab14:	7202      	strb	r2, [r0, #8]
    maze->RawNode[0][1].draw = false;     //北0
 800ab16:	7302      	strb	r2, [r0, #12]
}
 800ab18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab1a:	bf00      	nop

0800ab1c <printAllNodeExistence>:
        printf("\r\n");
    }
    printf("\r\n");
}
void printAllNodeExistence(maze_node *mn)
{
 800ab1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab20:	4680      	mov	r8, r0
 800ab22:	4605      	mov	r5, r0
    printf("全ノードの壁の存在\r\n");
 800ab24:	481a      	ldr	r0, [pc, #104]	; (800ab90 <printAllNodeExistence+0x74>)
    //行を増やして同じ処理
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            printf("%u,",mn->RawNode[i][j].existence);
 800ab26:	4f1b      	ldr	r7, [pc, #108]	; (800ab94 <printAllNodeExistence+0x78>)
        }
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800ab28:	4e1b      	ldr	r6, [pc, #108]	; (800ab98 <printAllNodeExistence+0x7c>)
            if(j < NUMBER_OF_SQUARES_Y-1)
                printf(",");
        }
        printf("\r\n");
 800ab2a:	f8df a070 	ldr.w	sl, [pc, #112]	; 800ab9c <printAllNodeExistence+0x80>
 800ab2e:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800ab32:	f505 7934 	add.w	r9, r5, #720	; 0x2d0
    printf("全ノードの壁の存在\r\n");
 800ab36:	f008 f843 	bl	8012bc0 <puts>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800ab3a:	2401      	movs	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800ab3c:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 800ab40:	4638      	mov	r0, r7
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800ab42:	3401      	adds	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800ab44:	f007 ffb4 	bl	8012ab0 <iprintf>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800ab48:	2c0a      	cmp	r4, #10
 800ab4a:	d1f7      	bne.n	800ab3c <printAllNodeExistence+0x20>
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800ab4c:	f898 12d0 	ldrb.w	r1, [r8, #720]	; 0x2d0
 800ab50:	4630      	mov	r0, r6
 800ab52:	f007 ffad 	bl	8012ab0 <iprintf>
 800ab56:	f108 0b40 	add.w	fp, r8, #64	; 0x40
 800ab5a:	4644      	mov	r4, r8
                printf(",");
 800ab5c:	202c      	movs	r0, #44	; 0x2c
 800ab5e:	f007 ffbf 	bl	8012ae0 <putchar>
 800ab62:	3408      	adds	r4, #8
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800ab64:	f894 12d0 	ldrb.w	r1, [r4, #720]	; 0x2d0
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f007 ffa1 	bl	8012ab0 <iprintf>
            if(j < NUMBER_OF_SQUARES_Y-1)
 800ab6e:	455c      	cmp	r4, fp
 800ab70:	d1f4      	bne.n	800ab5c <printAllNodeExistence+0x40>
 800ab72:	f108 0848 	add.w	r8, r8, #72	; 0x48
        printf("\r\n");
 800ab76:	4650      	mov	r0, sl
 800ab78:	f008 f822 	bl	8012bc0 <puts>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800ab7c:	45c8      	cmp	r8, r9
 800ab7e:	f105 0550 	add.w	r5, r5, #80	; 0x50
 800ab82:	d1da      	bne.n	800ab3a <printAllNodeExistence+0x1e>
    }
    printf("\r\n");
 800ab84:	4805      	ldr	r0, [pc, #20]	; (800ab9c <printAllNodeExistence+0x80>)
}
 800ab86:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800ab8a:	f008 b819 	b.w	8012bc0 <puts>
 800ab8e:	bf00      	nop
 800ab90:	08016194 	.word	0x08016194
 800ab94:	0801618c 	.word	0x0801618c
 800ab98:	08016190 	.word	0x08016190
 800ab9c:	08016538 	.word	0x08016538

0800aba0 <printMatrix16ValueFromNode>:
    return val;
}

//機体からTeraTermで出力するための関数
void printMatrix16ValueFromNode(maze_node *maze)
{
 800aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba4:	4604      	mov	r4, r0
 800aba6:	b083      	sub	sp, #12
    printf("機体からTeraTermへの出力用\r\n");
 800aba8:	4822      	ldr	r0, [pc, #136]	; (800ac34 <printMatrix16ValueFromNode+0x94>)
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
    {
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
        {
            printf("%u",convertNodeTo16Value(maze, i,j));
 800abaa:	4e23      	ldr	r6, [pc, #140]	; (800ac38 <printMatrix16ValueFromNode+0x98>)
    printf("機体からTeraTermへの出力用\r\n");
 800abac:	f008 f808 	bl	8012bc0 <puts>
 800abb0:	f04f 0809 	mov.w	r8, #9
 800abb4:	f104 0348 	add.w	r3, r4, #72	; 0x48
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800abb8:	f04f 0908 	mov.w	r9, #8
 800abbc:	f1a3 0208 	sub.w	r2, r3, #8
 800abc0:	eba9 0408 	sub.w	r4, r9, r8
 800abc4:	9201      	str	r2, [sp, #4]
 800abc6:	4692      	mov	sl, r2
 800abc8:	00e4      	lsls	r4, r4, #3
 800abca:	f503 7520 	add.w	r5, r3, #640	; 0x280
 800abce:	f503 7734 	add.w	r7, r3, #720	; 0x2d0
{
 800abd2:	469b      	mov	fp, r3
 800abd4:	e003      	b.n	800abde <printMatrix16ValueFromNode+0x3e>
            if(i < NUMBER_OF_SQUARES_X-1)
                printf(",");
 800abd6:	f007 ff83 	bl	8012ae0 <putchar>
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800abda:	455f      	cmp	r7, fp
 800abdc:	d01b      	beq.n	800ac16 <printMatrix16ValueFromNode+0x76>
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800abde:	f89a 12d4 	ldrb.w	r1, [sl, #724]	; 0x2d4
    val += 2 * maze->ColumnNode[x+1][y].draw;   //東
 800abe2:	f89a e31c 	ldrb.w	lr, [sl, #796]	; 0x31c
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800abe6:	f89b 0004 	ldrb.w	r0, [fp, #4]
    val += 4 * maze->RawNode[x][y].draw;        //南
 800abea:	eb0b 0c04 	add.w	ip, fp, r4
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800abee:	00c9      	lsls	r1, r1, #3
 800abf0:	eb01 014e 	add.w	r1, r1, lr, lsl #1
    val += 4 * maze->RawNode[x][y].draw;        //南
 800abf4:	f89c c004 	ldrb.w	ip, [ip, #4]
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800abf8:	4401      	add	r1, r0
 800abfa:	eb01 018c 	add.w	r1, r1, ip, lsl #2
            printf("%u",convertNodeTo16Value(maze, i,j));
 800abfe:	b2c9      	uxtb	r1, r1
 800ac00:	4630      	mov	r0, r6
 800ac02:	f007 ff55 	bl	8012ab0 <iprintf>
            if(i < NUMBER_OF_SQUARES_X-1)
 800ac06:	455d      	cmp	r5, fp
                printf(",");
 800ac08:	f04f 002c 	mov.w	r0, #44	; 0x2c
 800ac0c:	f10b 0b50 	add.w	fp, fp, #80	; 0x50
 800ac10:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
            if(i < NUMBER_OF_SQUARES_X-1)
 800ac14:	d1df      	bne.n	800abd6 <printMatrix16ValueFromNode+0x36>
        }
        printf("\r\n");
 800ac16:	4809      	ldr	r0, [pc, #36]	; (800ac3c <printMatrix16ValueFromNode+0x9c>)
 800ac18:	f007 ffd2 	bl	8012bc0 <puts>
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800ac1c:	f1b8 0801 	subs.w	r8, r8, #1
 800ac20:	f109 39ff 	add.w	r9, r9, #4294967295
 800ac24:	9b01      	ldr	r3, [sp, #4]
 800ac26:	d1c9      	bne.n	800abbc <printMatrix16ValueFromNode+0x1c>
    }
    printf("\r\n");
 800ac28:	4804      	ldr	r0, [pc, #16]	; (800ac3c <printMatrix16ValueFromNode+0x9c>)

}
 800ac2a:	b003      	add	sp, #12
 800ac2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800ac30:	f007 bfc6 	b.w	8012bc0 <puts>
 800ac34:	080161f8 	.word	0x080161f8
 800ac38:	08016190 	.word	0x08016190
 800ac3c:	08016538 	.word	0x08016538

0800ac40 <updateNodeThree>:


//壁があれば重みはデフォルト値を代入する
//壁がなければそのままにしておく 前左右の情報の方角に合わせた変換は別のところで
void updateNodeThree(maze_node *maze, state *st, uint8_t x, uint8_t y)
{
 800ac40:	b5f0      	push	{r4, r5, r6, r7, lr}
    //壁の有無の更新。既知の壁には上書きしない。重みの更新は？既知かどうかは重複するから書かない
        //重みは？壁があればMAX値、なければそのまま   
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800ac42:	0094      	lsls	r4, r2, #2
 800ac44:	1c5f      	adds	r7, r3, #1
 800ac46:	18a5      	adds	r5, r4, r2
 800ac48:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 800ac4c:	18a6      	adds	r6, r4, r2
 800ac4e:	f810 c035 	ldrb.w	ip, [r0, r5, lsl #3]
 800ac52:	f1bc 0f02 	cmp.w	ip, #2
 800ac56:	bf08      	it	eq
 800ac58:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800ac5c:	f102 0501 	add.w	r5, r2, #1
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800ac60:	eb07 0646 	add.w	r6, r7, r6, lsl #1
 800ac64:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800ac68:	bf08      	it	eq
 800ac6a:	f00c 0c03 	andeq.w	ip, ip, #3
 800ac6e:	441d      	add	r5, r3
 800ac70:	f800 c036 	strb.w	ip, [r0, r6, lsl #3]
 800ac74:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800ac78:	eb04 0c02 	add.w	ip, r4, r2
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800ac7c:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800ac80:	2e02      	cmp	r6, #2
 800ac82:	bf08      	it	eq
 800ac84:	790e      	ldrbeq	r6, [r1, #4]
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800ac86:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800ac8a:	bf08      	it	eq
 800ac8c:	f3c6 0681 	ubfxeq	r6, r6, #2, #2
 800ac90:	f885 62d0 	strb.w	r6, [r5, #720]	; 0x2d0
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800ac94:	f810 c03c 	ldrb.w	ip, [r0, ip, lsl #3]
 800ac98:	f1bc 0f02 	cmp.w	ip, #2
 800ac9c:	bf08      	it	eq
 800ac9e:	f891 c004 	ldrbeq.w	ip, [r1, #4]
 800aca2:	eb04 0e02 	add.w	lr, r4, r2
 800aca6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 800acaa:	f04f 0609 	mov.w	r6, #9
 800acae:	bf08      	it	eq
 800acb0:	f3cc 1c01 	ubfxeq	ip, ip, #4, #2
 800acb4:	fb16 3602 	smlabb	r6, r6, r2, r3
 800acb8:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 800acbc:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
    // maze->RawNode[x][y+1].flag = true;      //北
    // maze->ColumnNode[x+1][y].flag = true;   //東
    // maze->RawNode[x][y].flag = true;        //南
    // maze->ColumnNode[x][y].flag = true;     //西

    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800acc0:	4414      	add	r4, r2
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800acc2:	f896 c2d0 	ldrb.w	ip, [r6, #720]	; 0x2d0
 800acc6:	f1bc 0f02 	cmp.w	ip, #2
 800acca:	bf08      	it	eq
 800accc:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800acd0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800acd4:	eb04 0207 	add.w	r2, r4, r7
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800acd8:	bf08      	it	eq
 800acda:	ea4f 1c9c 	moveq.w	ip, ip, lsr #6
 800acde:	f886 c2d0 	strb.w	ip, [r6, #720]	; 0x2d0
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800ace2:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800ace6:	f1a1 0101 	sub.w	r1, r1, #1
 800acea:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800acee:	fab1 f181 	clz	r1, r1
 800acf2:	0949      	lsrs	r1, r1, #5
 800acf4:	7111      	strb	r1, [r2, #4]
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800acf6:	f895 22d0 	ldrb.w	r2, [r5, #720]	; 0x2d0
 800acfa:	f1a2 0201 	sub.w	r2, r2, #1
 800acfe:	fab2 f282 	clz	r2, r2
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800ad02:	4423      	add	r3, r4
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800ad04:	0952      	lsrs	r2, r2, #5
 800ad06:	f885 22d4 	strb.w	r2, [r5, #724]	; 0x2d4
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800ad0a:	f810 2033 	ldrb.w	r2, [r0, r3, lsl #3]
 800ad0e:	f1a2 0201 	sub.w	r2, r2, #1
 800ad12:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ad16:	fab2 f282 	clz	r2, r2
 800ad1a:	0952      	lsrs	r2, r2, #5
 800ad1c:	711a      	strb	r2, [r3, #4]
    maze->ColumnNode[x][y].draw = (maze->ColumnNode[x][y].existence == WALL) ? true : false;        //西
 800ad1e:	f896 32d0 	ldrb.w	r3, [r6, #720]	; 0x2d0
 800ad22:	f1a3 0301 	sub.w	r3, r3, #1
 800ad26:	fab3 f383 	clz	r3, r3
 800ad2a:	095b      	lsrs	r3, r3, #5
 800ad2c:	f886 32d4 	strb.w	r3, [r6, #724]	; 0x2d4
    //重みは毎回リセットして計算しなおすのでここでは要らない
    // maze->RawNode[x][y+1].weight = (maze->RawNode[x][y+1].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y+1].weight;             //北
    // maze->ColumnNode[x+1][y].weight = (maze->ColumnNode[x+1][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x+1][y].weight;    //東
    // maze->RawNode[x][y].weight = (maze->RawNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y].weight;                   //南
    // maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x][y].weight;          //西
}
 800ad30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad32:	bf00      	nop

0800ad34 <initTargetAreaWeight>:
//             maze->ColumnNode[x+i][y+j].weight = 0;      //西
//         }
//     }
// }
void initTargetAreaWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size_x, uint8_t target_size_y)
{
 800ad34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad38:	f89d 801c 	ldrb.w	r8, [sp, #28]
    //ゴールエリアの外堀と中のノードは全て0、壁があればMAX。
    for(int i=0; i < target_size_x; i++)
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d044      	beq.n	800adca <initTargetAreaWeight+0x96>
 800ad40:	1c4c      	adds	r4, r1, #1
 800ad42:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800ad46:	250a      	movs	r5, #10
 800ad48:	18a7      	adds	r7, r4, r2
 800ad4a:	fb15 2201 	smlabb	r2, r5, r1, r2
 800ad4e:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 800ad52:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
 800ad56:	f04f 0908 	mov.w	r9, #8
 800ad5a:	f04f 0e00 	mov.w	lr, #0
            // maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0; //東
            // maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;           //南
            // maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;     //西

        	//なぜdraw == trueでやっていたかわからない
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800ad5e:	f640 74ff 	movw	r4, #4095	; 0xfff
        for(int j=0; j < target_size_y; j++)
 800ad62:	f1b8 0f00 	cmp.w	r8, #0
 800ad66:	d028      	beq.n	800adba <initTargetAreaWeight+0x86>
 800ad68:	f1a7 0048 	sub.w	r0, r7, #72	; 0x48
 800ad6c:	fb19 7608 	smlabb	r6, r9, r8, r7
 800ad70:	4639      	mov	r1, r7
 800ad72:	4662      	mov	r2, ip
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800ad74:	7a15      	ldrb	r5, [r2, #8]
 800ad76:	2d01      	cmp	r5, #1
 800ad78:	bf14      	ite	ne
 800ad7a:	2500      	movne	r5, #0
 800ad7c:	4625      	moveq	r5, r4
 800ad7e:	8155      	strh	r5, [r2, #10]
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].existence == WALL) ? MAX_WEIGHT : 0; //東
 800ad80:	f891 52d0 	ldrb.w	r5, [r1, #720]	; 0x2d0
 800ad84:	2d01      	cmp	r5, #1
 800ad86:	bf14      	ite	ne
 800ad88:	2500      	movne	r5, #0
 800ad8a:	4625      	moveq	r5, r4
 800ad8c:	f8a1 52d2 	strh.w	r5, [r1, #722]	; 0x2d2
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;           //南
 800ad90:	7815      	ldrb	r5, [r2, #0]
 800ad92:	2d01      	cmp	r5, #1
 800ad94:	bf14      	ite	ne
 800ad96:	2500      	movne	r5, #0
 800ad98:	4625      	moveq	r5, r4
 800ad9a:	8055      	strh	r5, [r2, #2]
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800ad9c:	f890 52d0 	ldrb.w	r5, [r0, #720]	; 0x2d0
 800ada0:	3108      	adds	r1, #8
 800ada2:	2d01      	cmp	r5, #1
 800ada4:	bf14      	ite	ne
 800ada6:	2500      	movne	r5, #0
 800ada8:	4625      	moveq	r5, r4
        for(int j=0; j < target_size_y; j++)
 800adaa:	42b1      	cmp	r1, r6
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800adac:	f8a0 52d2 	strh.w	r5, [r0, #722]	; 0x2d2
 800adb0:	f102 0208 	add.w	r2, r2, #8
 800adb4:	f100 0008 	add.w	r0, r0, #8
        for(int j=0; j < target_size_y; j++)
 800adb8:	d1dc      	bne.n	800ad74 <initTargetAreaWeight+0x40>
    for(int i=0; i < target_size_x; i++)
 800adba:	f10e 0e01 	add.w	lr, lr, #1
 800adbe:	459e      	cmp	lr, r3
 800adc0:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800adc4:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800adc8:	d1cb      	bne.n	800ad62 <initTargetAreaWeight+0x2e>
        }
    }
}
 800adca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adce:	bf00      	nop

0800add0 <updateAllNodeWeight>:
    // setTargetWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size);
//ゴールノードを0に初期化
    // setGoalWeight(maze);
    
void updateAllNodeWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t area_size_x, uint8_t area_size_y, int mask)
{
 800add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	b085      	sub	sp, #20
 800add6:	4680      	mov	r8, r0
 800add8:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 800addc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800adde:	f500 7c34 	add.w	ip, r0, #720	; 0x2d0
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800ade2:	f640 77ff 	movw	r7, #4095	; 0xfff
 800ade6:	f100 0550 	add.w	r5, r0, #80	; 0x50
 800adea:	8047      	strh	r7, [r0, #2]
 800adec:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800adee:	42a8      	cmp	r0, r5
 800adf0:	d1fb      	bne.n	800adea <updateAllNodeWeight+0x1a>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800adf2:	4560      	cmp	r0, ip
 800adf4:	d1f7      	bne.n	800ade6 <updateAllNodeWeight+0x16>
 800adf6:	4646      	mov	r6, r8
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800adf8:	f640 7cff 	movw	ip, #4095	; 0xfff
 800adfc:	f106 0548 	add.w	r5, r6, #72	; 0x48
 800ae00:	f8a6 c2d2 	strh.w	ip, [r6, #722]	; 0x2d2
 800ae04:	3608      	adds	r6, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800ae06:	42ae      	cmp	r6, r5
 800ae08:	d1fa      	bne.n	800ae00 <updateAllNodeWeight+0x30>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800ae0a:	4286      	cmp	r6, r0
 800ae0c:	d1f6      	bne.n	800adfc <updateAllNodeWeight+0x2c>
	//全体に154/20ms = 7.7ms
    //新しい区画に入ったときに、更新

    initWeight(maze); //3/20ms
    
    initTargetAreaWeight(maze, x,y, area_size_x,area_size_y);
 800ae0e:	f8cd e000 	str.w	lr, [sp]
 800ae12:	4640      	mov	r0, r8
 800ae14:	f7ff ff8e 	bl	800ad34 <initTargetAreaWeight>
 800ae18:	4645      	mov	r5, r8
 800ae1a:	f108 0250 	add.w	r2, r8, #80	; 0x50
 800ae1e:	9203      	str	r2, [sp, #12]
 800ae20:	f108 0e48 	add.w	lr, r8, #72	; 0x48
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
			{
                //1ノードずつ見る.そこから加算対象が最大6個
                //端を見ないので、一番上の列からスタート j=N; j >= 0, xを1からN-1まで
                //次に行 j=N-1から1まで xを0からN-1まで
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800ae24:	f640 72ff 	movw	r2, #4095	; 0xfff
 800ae28:	46ac      	mov	ip, r5
					}
                    //南西
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
					{
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
						change_flag = true;		//値が更新されたことを示す
 800ae2a:	f04f 0800 	mov.w	r8, #0
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800ae2e:	4647      	mov	r7, r8
						change_flag = true;		//値が更新されたことを示す
 800ae30:	4661      	mov	r1, ip
 800ae32:	46e2      	mov	sl, ip
 800ae34:	46c1      	mov	r9, r8
 800ae36:	f101 0848 	add.w	r8, r1, #72	; 0x48
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800ae3a:	4645      	mov	r5, r8
 800ae3c:	4653      	mov	r3, sl
 800ae3e:	2001      	movs	r0, #1
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800ae40:	895e      	ldrh	r6, [r3, #10]
 800ae42:	4296      	cmp	r6, r2
 800ae44:	d055      	beq.n	800aef2 <updateAllNodeWeight+0x122>
				if(j < NUMBER_OF_SQUARES_Y-1)   //範囲チェック. 座標のxyではなく、ノードのxy
 800ae46:	2808      	cmp	r0, #8
 800ae48:	d010      	beq.n	800ae6c <updateAllNodeWeight+0x9c>
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT) )	//壁がなければ(maskの意味はstatic_parametersを参照)
 800ae4a:	f893 b010 	ldrb.w	fp, [r3, #16]
 800ae4e:	ea1b 0f04 	tst.w	fp, r4
 800ae52:	d109      	bne.n	800ae68 <updateAllNodeWeight+0x98>
 800ae54:	f8b3 b012 	ldrh.w	fp, [r3, #18]
 800ae58:	4593      	cmp	fp, r2
 800ae5a:	d105      	bne.n	800ae68 <updateAllNodeWeight+0x98>
						maze->RawNode[i][j+1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800ae5c:	f106 0907 	add.w	r9, r6, #7
 800ae60:	f8a3 9012 	strh.w	r9, [r3, #18]
						change_flag = true;		//値が更新されたことを示す
 800ae64:	f04f 0901 	mov.w	r9, #1
				if(j > 1)						//範囲チェック.ミスってた
 800ae68:	2801      	cmp	r0, #1
 800ae6a:	d00c      	beq.n	800ae86 <updateAllNodeWeight+0xb6>
					if( ((maze->RawNode[i][j-1].existence & mask) == NOWALL) && (maze->RawNode[i][j-1].weight == MAX_WEIGHT) )	//壁がなければ
 800ae6c:	f893 b000 	ldrb.w	fp, [r3]
 800ae70:	ea1b 0f04 	tst.w	fp, r4
 800ae74:	d107      	bne.n	800ae86 <updateAllNodeWeight+0xb6>
 800ae76:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 800ae7a:	4593      	cmp	fp, r2
 800ae7c:	d103      	bne.n	800ae86 <updateAllNodeWeight+0xb6>
						maze->RawNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800ae7e:	3607      	adds	r6, #7
 800ae80:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800ae82:	f04f 0901 	mov.w	r9, #1
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800ae86:	2f08      	cmp	r7, #8
 800ae88:	d017      	beq.n	800aeba <updateAllNodeWeight+0xea>
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))		//壁がなければ
 800ae8a:	f895 62d8 	ldrb.w	r6, [r5, #728]	; 0x2d8
 800ae8e:	4226      	tst	r6, r4
 800ae90:	d109      	bne.n	800aea6 <updateAllNodeWeight+0xd6>
 800ae92:	f8b5 62da 	ldrh.w	r6, [r5, #730]	; 0x2da
 800ae96:	4296      	cmp	r6, r2
 800ae98:	d105      	bne.n	800aea6 <updateAllNodeWeight+0xd6>
						maze->ColumnNode[i+1][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ae9a:	895e      	ldrh	r6, [r3, #10]
 800ae9c:	3605      	adds	r6, #5
 800ae9e:	f8a5 62da 	strh.w	r6, [r5, #730]	; 0x2da
						change_flag = true;		//値が更新されたことを示す
 800aea2:	f04f 0901 	mov.w	r9, #1
                    if( ((maze->ColumnNode[i+1][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j-1].weight == MAX_WEIGHT)	)		//壁がなければ
 800aea6:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800aeaa:	4226      	tst	r6, r4
 800aeac:	d104      	bne.n	800aeb8 <updateAllNodeWeight+0xe8>
 800aeae:	f8b5 62d2 	ldrh.w	r6, [r5, #722]	; 0x2d2
 800aeb2:	4296      	cmp	r6, r2
 800aeb4:	f000 8092 	beq.w	800afdc <updateAllNodeWeight+0x20c>
				if(i > 0)						//範囲チェック
 800aeb8:	b1df      	cbz	r7, 800aef2 <updateAllNodeWeight+0x122>
					if( ((maze->ColumnNode[i][j].existence & mask) == NOWALL)  && (maze->ColumnNode[i][j].weight == MAX_WEIGHT) )		//壁がなければ
 800aeba:	f891 62d8 	ldrb.w	r6, [r1, #728]	; 0x2d8
 800aebe:	4226      	tst	r6, r4
 800aec0:	d109      	bne.n	800aed6 <updateAllNodeWeight+0x106>
 800aec2:	f8b1 62da 	ldrh.w	r6, [r1, #730]	; 0x2da
 800aec6:	4296      	cmp	r6, r2
 800aec8:	d105      	bne.n	800aed6 <updateAllNodeWeight+0x106>
							maze->ColumnNode[i][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aeca:	895e      	ldrh	r6, [r3, #10]
 800aecc:	3605      	adds	r6, #5
 800aece:	f8a1 62da 	strh.w	r6, [r1, #730]	; 0x2da
							change_flag = true;		//値が更新されたことを示す
 800aed2:	f04f 0901 	mov.w	r9, #1
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
 800aed6:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800aeda:	4226      	tst	r6, r4
 800aedc:	d109      	bne.n	800aef2 <updateAllNodeWeight+0x122>
 800aede:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800aee2:	4296      	cmp	r6, r2
 800aee4:	d105      	bne.n	800aef2 <updateAllNodeWeight+0x122>
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aee6:	895e      	ldrh	r6, [r3, #10]
 800aee8:	3605      	adds	r6, #5
 800aeea:	f8a1 62d2 	strh.w	r6, [r1, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800aeee:	f04f 0901 	mov.w	r9, #1
 800aef2:	3001      	adds	r0, #1
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
 800aef4:	2809      	cmp	r0, #9
 800aef6:	f103 0308 	add.w	r3, r3, #8
 800aefa:	f101 0108 	add.w	r1, r1, #8
 800aefe:	f105 0508 	add.w	r5, r5, #8
 800af02:	d19d      	bne.n	800ae40 <updateAllNodeWeight+0x70>
 800af04:	3701      	adds	r7, #1
		for( i = 0; i < NUMBER_OF_SQUARES_X; i++)			//迷路の大きさ分ループ(x座標)
 800af06:	2f09      	cmp	r7, #9
 800af08:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800af0c:	4641      	mov	r1, r8
 800af0e:	d192      	bne.n	800ae36 <updateAllNodeWeight+0x66>
 800af10:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800af14:	464f      	mov	r7, r9
 800af16:	4671      	mov	r1, lr
 800af18:	f04f 0801 	mov.w	r8, #1
 800af1c:	f101 0948 	add.w	r9, r1, #72	; 0x48
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800af20:	464d      	mov	r5, r9
 800af22:	4653      	mov	r3, sl
 800af24:	2000      	movs	r0, #0
        //列
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
		{
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
			{
                if(maze->ColumnNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800af26:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800af2a:	4296      	cmp	r6, r2
 800af2c:	d04f      	beq.n	800afce <updateAllNodeWeight+0x1fe>
					continue;
				}
                // printf("continueはクリア. Column[%d][%d]\r\n",i,j);
				
                //東側ノード
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800af2e:	f1b8 0f08 	cmp.w	r8, #8
 800af32:	d00f      	beq.n	800af54 <updateAllNodeWeight+0x184>
				{
                    // printf("列東%d,mask: %d, result: %d\r\n",maze->ColumnNode[i+1][j].existence, mask,((maze->ColumnNode[i+1][j].existence) & mask));
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))	//壁がなければ(maskの意味はstatic_parametersを参照)
 800af34:	f895 b2d0 	ldrb.w	fp, [r5, #720]	; 0x2d0
 800af38:	ea1b 0f04 	tst.w	fp, r4
 800af3c:	d107      	bne.n	800af4e <updateAllNodeWeight+0x17e>
 800af3e:	f8b5 b2d2 	ldrh.w	fp, [r5, #722]	; 0x2d2
 800af42:	4593      	cmp	fp, r2
 800af44:	d103      	bne.n	800af4e <updateAllNodeWeight+0x17e>
					{
						maze->ColumnNode[i+1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800af46:	3607      	adds	r6, #7
 800af48:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800af4c:	2701      	movs	r7, #1
					}
                }
                //西側ノード
				if(i > 1)						//範囲チェック
 800af4e:	f1b8 0f01 	cmp.w	r8, #1
 800af52:	d00d      	beq.n	800af70 <updateAllNodeWeight+0x1a0>
				{
					if( ((maze->ColumnNode[i-1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i-1][j].weight == MAX_WEIGHT))	//壁がなければ
 800af54:	f891 6288 	ldrb.w	r6, [r1, #648]	; 0x288
 800af58:	4226      	tst	r6, r4
 800af5a:	d109      	bne.n	800af70 <updateAllNodeWeight+0x1a0>
 800af5c:	f8b1 628a 	ldrh.w	r6, [r1, #650]	; 0x28a
 800af60:	4296      	cmp	r6, r2
 800af62:	d105      	bne.n	800af70 <updateAllNodeWeight+0x1a0>
					{
						maze->ColumnNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800af64:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800af68:	3607      	adds	r6, #7
 800af6a:	f8a1 628a 	strh.w	r6, [r1, #650]	; 0x28a
						change_flag = true;		//値が更新されたことを示す
 800af6e:	2701      	movs	r7, #1
					}
				}
                //北側に斜めが2方向
				if(j < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800af70:	2808      	cmp	r0, #8
 800af72:	d013      	beq.n	800af9c <updateAllNodeWeight+0x1cc>
				{
                    //北東
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800af74:	7a1e      	ldrb	r6, [r3, #8]
 800af76:	4226      	tst	r6, r4
 800af78:	d107      	bne.n	800af8a <updateAllNodeWeight+0x1ba>
 800af7a:	895e      	ldrh	r6, [r3, #10]
 800af7c:	4296      	cmp	r6, r2
 800af7e:	d104      	bne.n	800af8a <updateAllNodeWeight+0x1ba>
					{
						maze->RawNode[i][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800af80:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800af84:	3605      	adds	r6, #5
 800af86:	815e      	strh	r6, [r3, #10]
						change_flag = true;		//値が更新されたことを示す
 800af88:	2701      	movs	r7, #1
					}
                	
                    //北西
                    if( ((maze->RawNode[i-1][j+1].existence & mask) == NOWALL) && (maze->RawNode[i-1][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800af8a:	f813 6c48 	ldrb.w	r6, [r3, #-72]
 800af8e:	4226      	tst	r6, r4
 800af90:	d103      	bne.n	800af9a <updateAllNodeWeight+0x1ca>
 800af92:	f833 6c46 	ldrh.w	r6, [r3, #-70]
 800af96:	4296      	cmp	r6, r2
 800af98:	d027      	beq.n	800afea <updateAllNodeWeight+0x21a>
						change_flag = true;		//値が更新されたことを示す
					}
				}

                //南側に斜めが2方向
				if(j > 0)						//範囲チェック
 800af9a:	b1d0      	cbz	r0, 800afd2 <updateAllNodeWeight+0x202>
				{
                    //南東
					if( ((maze->RawNode[i][j].existence & mask) == NOWALL) && (maze->RawNode[i][j].weight == MAX_WEIGHT)	)		//壁がなければ
 800af9c:	781e      	ldrb	r6, [r3, #0]
 800af9e:	4226      	tst	r6, r4
 800afa0:	d107      	bne.n	800afb2 <updateAllNodeWeight+0x1e2>
 800afa2:	885e      	ldrh	r6, [r3, #2]
 800afa4:	4296      	cmp	r6, r2
 800afa6:	d104      	bne.n	800afb2 <updateAllNodeWeight+0x1e2>
					{
						maze->RawNode[i][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800afa8:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800afac:	3605      	adds	r6, #5
 800afae:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800afb0:	2701      	movs	r7, #1
					}
                    //南西
    				if( ((maze->RawNode[i-1][j].existence & mask) == NOWALL) && (maze->RawNode[i-1][j].weight == MAX_WEIGHT))		//壁がなければ
 800afb2:	f813 6c50 	ldrb.w	r6, [r3, #-80]
 800afb6:	4226      	tst	r6, r4
 800afb8:	d109      	bne.n	800afce <updateAllNodeWeight+0x1fe>
 800afba:	f833 6c4e 	ldrh.w	r6, [r3, #-78]
 800afbe:	4296      	cmp	r6, r2
 800afc0:	d105      	bne.n	800afce <updateAllNodeWeight+0x1fe>
					{
							maze->RawNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800afc2:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800afc6:	3605      	adds	r6, #5
 800afc8:	f823 6c4e 	strh.w	r6, [r3, #-78]
							change_flag = true;		//値が更新されたことを示す
 800afcc:	2701      	movs	r7, #1
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
 800afce:	2808      	cmp	r0, #8
 800afd0:	d012      	beq.n	800aff8 <updateAllNodeWeight+0x228>
 800afd2:	3001      	adds	r0, #1
 800afd4:	3108      	adds	r1, #8
 800afd6:	3308      	adds	r3, #8
 800afd8:	3508      	adds	r5, #8
 800afda:	e7a4      	b.n	800af26 <updateAllNodeWeight+0x156>
						maze->ColumnNode[i+1][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800afdc:	895e      	ldrh	r6, [r3, #10]
 800afde:	3605      	adds	r6, #5
 800afe0:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800afe4:	f04f 0901 	mov.w	r9, #1
 800afe8:	e766      	b.n	800aeb8 <updateAllNodeWeight+0xe8>
						maze->RawNode[i-1][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800afea:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800afee:	3605      	adds	r6, #5
 800aff0:	f823 6c46 	strh.w	r6, [r3, #-70]
						change_flag = true;		//値が更新されたことを示す
 800aff4:	2701      	movs	r7, #1
 800aff6:	e7d0      	b.n	800af9a <updateAllNodeWeight+0x1ca>
 800aff8:	f108 0801 	add.w	r8, r8, #1
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
 800affc:	f1b8 0f09 	cmp.w	r8, #9
 800b000:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800b004:	4649      	mov	r1, r9
 800b006:	d189      	bne.n	800af1c <updateAllNodeWeight+0x14c>
				}
            }
        }
        //printf("重みの更新\r\n");//一回しか呼ばれていない
        //cnt++;
	}while(change_flag == true);	//全体を作り終わるまで待つ
 800b008:	2f00      	cmp	r7, #0
 800b00a:	f47f af0e 	bne.w	800ae2a <updateAllNodeWeight+0x5a>
//    t = 0;
//	HAL_TIM_Base_Stop_IT(&htim8);
//	printf("%d/20ms, %d, %d\r\n\r\n",timer8, skip_raw, skip_column);
}
 800b00e:	b005      	add	sp, #20
 800b010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b014 <getNextNode>:
}

//ノード情報から、行けるノードを比較する
// 比較しながらアドレスを更新してしまうので注意:
node *getNextNode(maze_node *maze, cardinal car, node *now_node, int mask)
{
 800b014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t compare_weight=0;
    compare_weight = now_node->weight;

    _Bool flag=false;
    //printf("マイノードが01のどちらか:%d\r\n",now_node->rc);
    if(now_node->rc == 0)
 800b018:	f892 9005 	ldrb.w	r9, [r2, #5]
    compare_weight = now_node->weight;
 800b01c:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 800b020:	7991      	ldrb	r1, [r2, #6]
 800b022:	79d4      	ldrb	r4, [r2, #7]
{
 800b024:	b083      	sub	sp, #12
 800b026:	4605      	mov	r5, r0
    if(now_node->rc == 0)
 800b028:	f1b9 0f00 	cmp.w	r9, #0
 800b02c:	d176      	bne.n	800b11c <getNextNode+0x108>
#endif
        //条件がおかしい？printしている全ノードの重みと、アドレスを入れたはずのマイノードの重みが違う
        
        //行にいるとき
        //北側ノード
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b02e:	2c07      	cmp	r4, #7
 800b030:	f240 80cf 	bls.w	800b1d2 <getNextNode+0x1be>
    _Bool flag=false;
 800b034:	46cc      	mov	ip, r9
 800b036:	1e60      	subs	r0, r4, #1
 800b038:	008e      	lsls	r6, r1, #2
            }
        }
        //南へ側ノード
        if(now_node->pos.y > 1)						//範囲チェック
        {
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)	//壁がなければ
 800b03a:	440e      	add	r6, r1
 800b03c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800b040:	f815 e036 	ldrb.w	lr, [r5, r6, lsl #3]
 800b044:	ea1e 0f03 	tst.w	lr, r3
 800b048:	d109      	bne.n	800b05e <getNextNode+0x4a>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b04a:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800b04e:	f8b6 e002 	ldrh.w	lr, [r6, #2]
 800b052:	45c6      	cmp	lr, r8
 800b054:	d203      	bcs.n	800b05e <getNextNode+0x4a>
                {
#if DEBUG_ON
                    printf("南へ\r\n");
#endif
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight;
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
 800b056:	4637      	mov	r7, r6
 800b058:	46f0      	mov	r8, lr
                    flag = true;
 800b05a:	f04f 0c01 	mov.w	ip, #1
                }
            }
        }
        //東へ側に斜めが2方向
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b05e:	2907      	cmp	r1, #7
 800b060:	d831      	bhi.n	800b0c6 <getNextNode+0xb2>
        {
            //北東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b062:	1c4e      	adds	r6, r1, #1
 800b064:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800b068:	eb06 0e04 	add.w	lr, r6, r4
 800b06c:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 800b070:	f89e 92d0 	ldrb.w	r9, [lr, #720]	; 0x2d0
 800b074:	ea19 0f03 	tst.w	r9, r3
 800b078:	d10b      	bne.n	800b092 <getNextNode+0x7e>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800b07a:	f8be e2d2 	ldrh.w	lr, [lr, #722]	; 0x2d2
 800b07e:	45c6      	cmp	lr, r8
 800b080:	d207      	bcs.n	800b092 <getNextNode+0x7e>
                {
#if DEBUG_ON
                    printf("北東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800b082:	f104 075a 	add.w	r7, r4, #90	; 0x5a
 800b086:	4437      	add	r7, r6
 800b088:	46f0      	mov	r8, lr
 800b08a:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800b08e:	f04f 0c01 	mov.w	ip, #1
 800b092:	eb00 0e06 	add.w	lr, r0, r6
 800b096:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
                }
            }

            //南へ東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800b09a:	f89e 92d0 	ldrb.w	r9, [lr, #720]	; 0x2d0
 800b09e:	ea19 0f03 	tst.w	r9, r3
 800b0a2:	f040 80e9 	bne.w	800b278 <getNextNode+0x264>
            {  
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800b0a6:	f8be e2d2 	ldrh.w	lr, [lr, #722]	; 0x2d2
 800b0aa:	45c6      	cmp	lr, r8
 800b0ac:	f080 80e4 	bcs.w	800b278 <getNextNode+0x264>
                {
#if DEBUG_ON
                    printf("南東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
 800b0b0:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 800b0b4:	4437      	add	r7, r6
 800b0b6:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                }
            }
        }

        //西へ側に斜めが2方向
        if(now_node->pos.x > 0)						//範囲チェック
 800b0ba:	2900      	cmp	r1, #0
 800b0bc:	f000 80c3 	beq.w	800b246 <getNextNode+0x232>
 800b0c0:	46f0      	mov	r8, lr
                    flag = true;
 800b0c2:	f04f 0c01 	mov.w	ip, #1
 800b0c6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800b0ca:	190e      	adds	r6, r1, r4
 800b0cc:	eb01 0e00 	add.w	lr, r1, r0
 800b0d0:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800b0d4:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
        {
            //北西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b0d8:	f896 92d0 	ldrb.w	r9, [r6, #720]	; 0x2d0
 800b0dc:	f89e a2d0 	ldrb.w	sl, [lr, #720]	; 0x2d0
 800b0e0:	ea19 0f03 	tst.w	r9, r3
 800b0e4:	ea0a 0a03 	and.w	sl, sl, r3
 800b0e8:	f040 80be 	bne.w	800b268 <getNextNode+0x254>
            {
                //重みを比較して更新
               
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight)
 800b0ec:	f8b6 32d2 	ldrh.w	r3, [r6, #722]	; 0x2d2
 800b0f0:	4543      	cmp	r3, r8
 800b0f2:	f080 80b9 	bcs.w	800b268 <getNextNode+0x254>
                {
#if DEBUG_ON
                    printf("北西へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
 800b0f6:	f104 075a 	add.w	r7, r4, #90	; 0x5a
 800b0fa:	440f      	add	r7, r1
 800b0fc:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
                }
            }
            //南へ西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800b100:	f1ba 0f00 	cmp.w	sl, #0
 800b104:	f040 809f 	bne.w	800b246 <getNextNode+0x232>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b108:	f8be 22d2 	ldrh.w	r2, [lr, #722]	; 0x2d2
 800b10c:	429a      	cmp	r2, r3
 800b10e:	f080 809a 	bcs.w	800b246 <getNextNode+0x232>
                {
#if DEBUG_ON
                    printf("南西へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y-1]);
 800b112:	305a      	adds	r0, #90	; 0x5a
 800b114:	4401      	add	r1, r0
 800b116:	eb05 07c1 	add.w	r7, r5, r1, lsl #3
 800b11a:	e094      	b.n	800b246 <getNextNode+0x232>
        //列にいるとき
#if DEBUG_ON
        printf("列ノードから");
#endif
        //東へ側ノード
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b11c:	2907      	cmp	r1, #7
 800b11e:	f101 30ff 	add.w	r0, r1, #4294967295
 800b122:	d93e      	bls.n	800b1a2 <getNextNode+0x18e>
    _Bool flag=false;
 800b124:	f04f 0c00 	mov.w	ip, #0
 800b128:	eb00 0ac0 	add.w	sl, r0, r0, lsl #3
 800b12c:	eb0a 0604 	add.w	r6, sl, r4
 800b130:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
            }
        }
        //西へ側ノード
        if(now_node->pos.x > 1)						//範囲チェック
        {
            if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ
 800b134:	f896 e2d0 	ldrb.w	lr, [r6, #720]	; 0x2d0
 800b138:	ea1e 0f03 	tst.w	lr, r3
 800b13c:	f000 8087 	beq.w	800b24e <getNextNode+0x23a>
                    flag = true;
                }
            }
        }
        //北側に斜めが2方向
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b140:	2c07      	cmp	r4, #7
        {
            //北東へ
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800b142:	ea4f 0681 	mov.w	r6, r1, lsl #2
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b146:	d955      	bls.n	800b1f4 <getNextNode+0x1e0>
 800b148:	ea4f 0a80 	mov.w	sl, r0, lsl #2

        //南へ側に斜めが2方向
        if(now_node->pos.y > 0)						//範囲チェック
        {
            //南へ東へ
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b14c:	440e      	add	r6, r1
 800b14e:	eb0a 0e00 	add.w	lr, sl, r0
 800b152:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 800b156:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 800b15a:	f815 b036 	ldrb.w	fp, [r5, r6, lsl #3]
 800b15e:	f815 903e 	ldrb.w	r9, [r5, lr, lsl #3]
 800b162:	ea1b 0f03 	tst.w	fp, r3
 800b166:	ea09 0903 	and.w	r9, r9, r3
 800b16a:	f040 8088 	bne.w	800b27e <getNextNode+0x26a>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800b16e:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800b172:	8873      	ldrh	r3, [r6, #2]
 800b174:	4543      	cmp	r3, r8
 800b176:	f080 8082 	bcs.w	800b27e <getNextNode+0x26a>
                {
#if DEBUG_ON
                    printf("南東へ\r\n");
#endif
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y].weight;
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y]);
 800b17a:	270a      	movs	r7, #10
 800b17c:	fb17 4101 	smlabb	r1, r7, r1, r4
 800b180:	eb05 07c1 	add.w	r7, r5, r1, lsl #3
                    flag = true;
                }
            }
            //南へ西へ
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b184:	f1b9 0f00 	cmp.w	r9, #0
 800b188:	d15d      	bne.n	800b246 <getNextNode+0x232>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b18a:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 800b18e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b192:	429a      	cmp	r2, r3
 800b194:	d257      	bcs.n	800b246 <getNextNode+0x232>
                {
#if DEBUG_ON
                    printf("南西へ\r\n");
#endif
                    compare_weight = maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight;
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y]);
 800b196:	4450      	add	r0, sl
 800b198:	eb04 0440 	add.w	r4, r4, r0, lsl #1
 800b19c:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
 800b1a0:	e051      	b.n	800b246 <getNextNode+0x232>
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b1a2:	1c4e      	adds	r6, r1, #1
 800b1a4:	eb06 0ec6 	add.w	lr, r6, r6, lsl #3
 800b1a8:	eb04 060e 	add.w	r6, r4, lr
 800b1ac:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800b1b0:	f896 c2d0 	ldrb.w	ip, [r6, #720]	; 0x2d0
 800b1b4:	ea1c 0c03 	ands.w	ip, ip, r3
 800b1b8:	d16e      	bne.n	800b298 <getNextNode+0x284>
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800b1ba:	f8b6 a2d2 	ldrh.w	sl, [r6, #722]	; 0x2d2
 800b1be:	45c2      	cmp	sl, r8
 800b1c0:	d26c      	bcs.n	800b29c <getNextNode+0x288>
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800b1c2:	f104 065a 	add.w	r6, r4, #90	; 0x5a
 800b1c6:	4476      	add	r6, lr
 800b1c8:	46d0      	mov	r8, sl
 800b1ca:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
                    flag = true;
 800b1ce:	46cc      	mov	ip, r9
 800b1d0:	e064      	b.n	800b29c <getNextNode+0x288>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b1d2:	008e      	lsls	r6, r1, #2
 800b1d4:	eb06 0c01 	add.w	ip, r6, r1
 800b1d8:	1c60      	adds	r0, r4, #1
 800b1da:	eb00 004c 	add.w	r0, r0, ip, lsl #1
 800b1de:	f815 0030 	ldrb.w	r0, [r5, r0, lsl #3]
 800b1e2:	4218      	tst	r0, r3
 800b1e4:	d06a      	beq.n	800b2bc <getNextNode+0x2a8>
        if(now_node->pos.y > 1)						//範囲チェック
 800b1e6:	2c01      	cmp	r4, #1
 800b1e8:	f104 30ff 	add.w	r0, r4, #4294967295
 800b1ec:	46cc      	mov	ip, r9
 800b1ee:	f67f af36 	bls.w	800b05e <getNextNode+0x4a>
 800b1f2:	e722      	b.n	800b03a <getNextNode+0x26>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800b1f4:	eb06 0a01 	add.w	sl, r6, r1
 800b1f8:	f104 0e01 	add.w	lr, r4, #1
 800b1fc:	eb0e 0a4a 	add.w	sl, lr, sl, lsl #1
 800b200:	f815 b03a 	ldrb.w	fp, [r5, sl, lsl #3]
 800b204:	ea1b 0f03 	tst.w	fp, r3
 800b208:	d10c      	bne.n	800b224 <getNextNode+0x210>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b20a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800b20e:	f8ba a002 	ldrh.w	sl, [sl, #2]
 800b212:	45c2      	cmp	sl, r8
 800b214:	d206      	bcs.n	800b224 <getNextNode+0x210>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800b216:	270a      	movs	r7, #10
 800b218:	fb17 e701 	smlabb	r7, r7, r1, lr
 800b21c:	46d0      	mov	r8, sl
 800b21e:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800b222:	46cc      	mov	ip, r9
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800b224:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 800b228:	eb0a 0b00 	add.w	fp, sl, r0
 800b22c:	eb0e 0e4b 	add.w	lr, lr, fp, lsl #1
 800b230:	f815 b03e 	ldrb.w	fp, [r5, lr, lsl #3]
 800b234:	ea1b 0f03 	tst.w	fp, r3
 800b238:	d034      	beq.n	800b2a4 <getNextNode+0x290>
        if(now_node->pos.y > 0)						//範囲チェック
 800b23a:	2c00      	cmp	r4, #0
 800b23c:	d186      	bne.n	800b14c <getNextNode+0x138>
 800b23e:	f1bc 0f00 	cmp.w	ip, #0
 800b242:	bf08      	it	eq
 800b244:	4617      	moveq	r7, r2
        return now_node;//万が一更新されなかったら、今いるノードが目標ノードなので、停止するはず。
        //停止しなかった。前回の情報がそのまま反映されるだけ
    }
    return now_node; //
        
}
 800b246:	4638      	mov	r0, r7
 800b248:	b003      	add	sp, #12
 800b24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b24e:	f8b6 62d2 	ldrh.w	r6, [r6, #722]	; 0x2d2
 800b252:	4546      	cmp	r6, r8
 800b254:	f4bf af74 	bcs.w	800b140 <getNextNode+0x12c>
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
 800b258:	f104 075a 	add.w	r7, r4, #90	; 0x5a
 800b25c:	4457      	add	r7, sl
 800b25e:	46b0      	mov	r8, r6
 800b260:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800b264:	46cc      	mov	ip, r9
 800b266:	e76b      	b.n	800b140 <getNextNode+0x12c>
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800b268:	f1ba 0f00 	cmp.w	sl, #0
 800b26c:	d1e7      	bne.n	800b23e <getNextNode+0x22a>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b26e:	f8be 32d2 	ldrh.w	r3, [lr, #722]	; 0x2d2
 800b272:	4543      	cmp	r3, r8
 800b274:	d2e3      	bcs.n	800b23e <getNextNode+0x22a>
 800b276:	e74c      	b.n	800b112 <getNextNode+0xfe>
        if(now_node->pos.x > 0)						//範囲チェック
 800b278:	2900      	cmp	r1, #0
 800b27a:	d0e0      	beq.n	800b23e <getNextNode+0x22a>
 800b27c:	e723      	b.n	800b0c6 <getNextNode+0xb2>
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b27e:	f1b9 0f00 	cmp.w	r9, #0
 800b282:	d1dc      	bne.n	800b23e <getNextNode+0x22a>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b284:	eb0a 0300 	add.w	r3, sl, r0
 800b288:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800b28c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800b290:	885b      	ldrh	r3, [r3, #2]
 800b292:	4543      	cmp	r3, r8
 800b294:	d2d3      	bcs.n	800b23e <getNextNode+0x22a>
 800b296:	e77e      	b.n	800b196 <getNextNode+0x182>
    _Bool flag=false;
 800b298:	f04f 0c00 	mov.w	ip, #0
        if(now_node->pos.x > 1)						//範囲チェック
 800b29c:	2901      	cmp	r1, #1
 800b29e:	f67f af4f 	bls.w	800b140 <getNextNode+0x12c>
 800b2a2:	e741      	b.n	800b128 <getNextNode+0x114>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800b2a4:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 800b2a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b2ac:	45c3      	cmp	fp, r8
 800b2ae:	d2c4      	bcs.n	800b23a <getNextNode+0x226>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y+1]);
 800b2b0:	4677      	mov	r7, lr
        if(now_node->pos.y > 0)						//範囲チェック
 800b2b2:	2c00      	cmp	r4, #0
 800b2b4:	d0c7      	beq.n	800b246 <getNextNode+0x232>
                    flag = true;
 800b2b6:	46cc      	mov	ip, r9
        if(now_node->pos.y > 0)						//範囲チェック
 800b2b8:	46d8      	mov	r8, fp
 800b2ba:	e747      	b.n	800b14c <getNextNode+0x138>
            				ChangeLED(cnt%7);
 800b2bc:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b324 <getNextNode+0x310>
 800b2c0:	4917      	ldr	r1, [pc, #92]	; (800b320 <getNextNode+0x30c>)
 800b2c2:	f8da 0000 	ldr.w	r0, [sl]
 800b2c6:	e9cd 2300 	strd	r2, r3, [sp]
 800b2ca:	fb81 3100 	smull	r3, r1, r1, r0
 800b2ce:	180c      	adds	r4, r1, r0
 800b2d0:	17c1      	asrs	r1, r0, #31
 800b2d2:	ebc1 01a4 	rsb	r1, r1, r4, asr #2
 800b2d6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b2da:	1a40      	subs	r0, r0, r1
 800b2dc:	f002 fb50 	bl	800d980 <ChangeLED>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b2e0:	9a00      	ldr	r2, [sp, #0]
            				cnt ++;
 800b2e2:	f8da 0000 	ldr.w	r0, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b2e6:	7991      	ldrb	r1, [r2, #6]
 800b2e8:	79d4      	ldrb	r4, [r2, #7]
 800b2ea:	9b01      	ldr	r3, [sp, #4]
 800b2ec:	008e      	lsls	r6, r1, #2
 800b2ee:	eb06 0c01 	add.w	ip, r6, r1
 800b2f2:	f104 0e01 	add.w	lr, r4, #1
 800b2f6:	eb0e 0c4c 	add.w	ip, lr, ip, lsl #1
 800b2fa:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
            				cnt ++;
 800b2fe:	3001      	adds	r0, #1
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b300:	f8bc c002 	ldrh.w	ip, [ip, #2]
            				cnt ++;
 800b304:	f8ca 0000 	str.w	r0, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b308:	45c4      	cmp	ip, r8
 800b30a:	f4bf af6c 	bcs.w	800b1e6 <getNextNode+0x1d2>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800b30e:	270a      	movs	r7, #10
 800b310:	fb17 e701 	smlabb	r7, r7, r1, lr
 800b314:	46e0      	mov	r8, ip
 800b316:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800b31a:	f04f 0901 	mov.w	r9, #1
 800b31e:	e762      	b.n	800b1e6 <getNextNode+0x1d2>
 800b320:	92492493 	.word	0x92492493
 800b324:	20000000 	.word	0x20000000

0800b328 <judgeAccelorNot>:
	uint16_t compare_weight=0;
	compare_weight = now_node->weight;

	_Bool flag=false;
	//現ノードから3方向ノードを見て、未知なら即return
	if(now_node->rc == 0)
 800b328:	7953      	ldrb	r3, [r2, #5]
{
 800b32a:	b4f0      	push	{r4, r5, r6, r7}
	compare_weight = now_node->weight;
 800b32c:	8854      	ldrh	r4, [r2, #2]
	if(now_node->rc == 0)
 800b32e:	bba3      	cbnz	r3, 800b39a <judgeAccelorNot+0x72>
	{
		switch(car)
 800b330:	2900      	cmp	r1, #0
 800b332:	f000 8090 	beq.w	800b456 <judgeAccelorNot+0x12e>
 800b336:	2904      	cmp	r1, #4
 800b338:	d12c      	bne.n	800b394 <judgeAccelorNot+0x6c>
	            }
	        }
	        break;
		case south:
			//南へ
			if(now_node->pos.y > 1)						//範囲チェック
 800b33a:	79d1      	ldrb	r1, [r2, #7]
 800b33c:	7992      	ldrb	r2, [r2, #6]
 800b33e:	2901      	cmp	r1, #1
 800b340:	f101 35ff 	add.w	r5, r1, #4294967295
 800b344:	d90e      	bls.n	800b364 <judgeAccelorNot+0x3c>
			{
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)	//壁がなければ
 800b346:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800b34a:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800b34e:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800b352:	2e02      	cmp	r6, #2
 800b354:	d01e      	beq.n	800b394 <judgeAccelorNot+0x6c>
				{
					return false;
				}
					//重みを比較して更新
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)
 800b356:	b92e      	cbnz	r6, 800b364 <judgeAccelorNot+0x3c>
				{
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b358:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b35c:	8849      	ldrh	r1, [r1, #2]
 800b35e:	42a1      	cmp	r1, r4
 800b360:	f0c0 80bc 	bcc.w	800b4dc <judgeAccelorNot+0x1b4>
	_Bool flag=false;
 800b364:	461e      	mov	r6, r3
//						next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
						flag = true;
					}
				}
			}
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b366:	2a07      	cmp	r2, #7
 800b368:	f200 8084 	bhi.w	800b474 <judgeAccelorNot+0x14c>
			{
				//南へ東へ
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800b36c:	1c51      	adds	r1, r2, #1
 800b36e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800b372:	4429      	add	r1, r5
 800b374:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b378:	f891 72d0 	ldrb.w	r7, [r1, #720]	; 0x2d0
 800b37c:	2f02      	cmp	r7, #2
 800b37e:	d009      	beq.n	800b394 <judgeAccelorNot+0x6c>
				{
					return false;
				}
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800b380:	b92f      	cbnz	r7, 800b38e <judgeAccelorNot+0x66>
				{
					//重みを比較して更新
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800b382:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800b386:	42a1      	cmp	r1, r4
					{
						compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
//						next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
						flag = false;
 800b388:	bf3c      	itt	cc
 800b38a:	463e      	movcc	r6, r7
 800b38c:	460c      	movcc	r4, r1
					}
				}
			}
			if(now_node->pos.x > 0)						//範囲チェック
 800b38e:	2a00      	cmp	r2, #0
 800b390:	d170      	bne.n	800b474 <judgeAccelorNot+0x14c>
 800b392:	4633      	mov	r3, r6
	}
	return flag; //壁が全部あるときもfalseになっている
	//未知があった時点でreturn false
	//直進かどうかまで見て、直進でなければfalse
	//既知でかつ直進ならtrue
}
 800b394:	4618      	mov	r0, r3
 800b396:	bcf0      	pop	{r4, r5, r6, r7}
 800b398:	4770      	bx	lr
		switch(car)
 800b39a:	2902      	cmp	r1, #2
 800b39c:	d03a      	beq.n	800b414 <judgeAccelorNot+0xec>
 800b39e:	2906      	cmp	r1, #6
 800b3a0:	d155      	bne.n	800b44e <judgeAccelorNot+0x126>
			if(now_node->pos.x > 1)						//範囲チェック
 800b3a2:	7991      	ldrb	r1, [r2, #6]
 800b3a4:	79d2      	ldrb	r2, [r2, #7]
 800b3a6:	2901      	cmp	r1, #1
 800b3a8:	f101 35ff 	add.w	r5, r1, #4294967295
 800b3ac:	d90b      	bls.n	800b3c6 <judgeAccelorNot+0x9e>
 800b3ae:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800b3b2:	4411      	add	r1, r2
 800b3b4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
				if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) ==UNKNOWN)	//壁がなければ
 800b3b8:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800b3bc:	2e02      	cmp	r6, #2
 800b3be:	d046      	beq.n	800b44e <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ
 800b3c0:	2e00      	cmp	r6, #0
 800b3c2:	f000 8084 	beq.w	800b4ce <judgeAccelorNot+0x1a6>
	_Bool flag=false;
 800b3c6:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b3c8:	2a07      	cmp	r2, #7
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b3ca:	ea4f 0185 	mov.w	r1, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b3ce:	d811      	bhi.n	800b3f4 <judgeAccelorNot+0xcc>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b3d0:	194f      	adds	r7, r1, r5
 800b3d2:	1c56      	adds	r6, r2, #1
 800b3d4:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800b3d8:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800b3dc:	2f02      	cmp	r7, #2
 800b3de:	d036      	beq.n	800b44e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800b3e0:	b937      	cbnz	r7, 800b3f0 <judgeAccelorNot+0xc8>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800b3e2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b3e6:	8876      	ldrh	r6, [r6, #2]
 800b3e8:	42a6      	cmp	r6, r4
 800b3ea:	bf3c      	itt	cc
 800b3ec:	4634      	movcc	r4, r6
						flag = false;
 800b3ee:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800b3f0:	2a00      	cmp	r2, #0
 800b3f2:	d0cf      	beq.n	800b394 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800b3f4:	440d      	add	r5, r1
 800b3f6:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 800b3fa:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800b3fe:	2902      	cmp	r1, #2
 800b400:	d025      	beq.n	800b44e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800b402:	2900      	cmp	r1, #0
 800b404:	d1c6      	bne.n	800b394 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b406:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800b40a:	8842      	ldrh	r2, [r0, #2]
	                    flag = false;
 800b40c:	42a2      	cmp	r2, r4
 800b40e:	bf38      	it	cc
 800b410:	2300      	movcc	r3, #0
 800b412:	e7bf      	b.n	800b394 <judgeAccelorNot+0x6c>
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b414:	7995      	ldrb	r5, [r2, #6]
 800b416:	79d1      	ldrb	r1, [r2, #7]
 800b418:	2d07      	cmp	r5, #7
 800b41a:	d80b      	bhi.n	800b434 <judgeAccelorNot+0x10c>
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b41c:	1c6a      	adds	r2, r5, #1
 800b41e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800b422:	440a      	add	r2, r1
 800b424:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800b428:	f892 62d0 	ldrb.w	r6, [r2, #720]	; 0x2d0
 800b42c:	2e02      	cmp	r6, #2
 800b42e:	d00e      	beq.n	800b44e <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b430:	2e00      	cmp	r6, #0
 800b432:	d056      	beq.n	800b4e2 <judgeAccelorNot+0x1ba>
	_Bool flag=false;
 800b434:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b436:	2907      	cmp	r1, #7
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b438:	ea4f 0285 	mov.w	r2, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b43c:	d836      	bhi.n	800b4ac <judgeAccelorNot+0x184>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b43e:	1957      	adds	r7, r2, r5
 800b440:	1c4e      	adds	r6, r1, #1
 800b442:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800b446:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800b44a:	2f02      	cmp	r7, #2
 800b44c:	d123      	bne.n	800b496 <judgeAccelorNot+0x16e>
	                    flag = false;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	bcf0      	pop	{r4, r5, r6, r7}
 800b454:	4770      	bx	lr
	        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b456:	79d5      	ldrb	r5, [r2, #7]
 800b458:	7992      	ldrb	r2, [r2, #6]
 800b45a:	2d07      	cmp	r5, #7
 800b45c:	d882      	bhi.n	800b364 <judgeAccelorNot+0x3c>
	            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b45e:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 800b462:	1c69      	adds	r1, r5, #1
 800b464:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 800b468:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800b46c:	2e02      	cmp	r6, #2
 800b46e:	f47f af72 	bne.w	800b356 <judgeAccelorNot+0x2e>
 800b472:	e78f      	b.n	800b394 <judgeAccelorNot+0x6c>
 800b474:	2109      	movs	r1, #9
 800b476:	fb11 5202 	smlabb	r2, r1, r2, r5
 800b47a:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
				if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800b47e:	f890 22d0 	ldrb.w	r2, [r0, #720]	; 0x2d0
 800b482:	2a02      	cmp	r2, #2
 800b484:	d086      	beq.n	800b394 <judgeAccelorNot+0x6c>
				else if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800b486:	2a00      	cmp	r2, #0
 800b488:	d183      	bne.n	800b392 <judgeAccelorNot+0x6a>
					if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b48a:	f8b0 22d2 	ldrh.w	r2, [r0, #722]	; 0x2d2
 800b48e:	42a2      	cmp	r2, r4
 800b490:	bf28      	it	cs
 800b492:	4633      	movcs	r3, r6
 800b494:	e77e      	b.n	800b394 <judgeAccelorNot+0x6c>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800b496:	b937      	cbnz	r7, 800b4a6 <judgeAccelorNot+0x17e>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b498:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b49c:	8876      	ldrh	r6, [r6, #2]
 800b49e:	42a6      	cmp	r6, r4
 800b4a0:	bf3c      	itt	cc
 800b4a2:	4634      	movcc	r4, r6
						flag = false;
 800b4a4:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800b4a6:	2900      	cmp	r1, #0
 800b4a8:	f43f af74 	beq.w	800b394 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800b4ac:	4415      	add	r5, r2
 800b4ae:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800b4b2:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
 800b4b6:	2a02      	cmp	r2, #2
 800b4b8:	d0c9      	beq.n	800b44e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800b4ba:	2a00      	cmp	r2, #0
 800b4bc:	f47f af6a 	bne.w	800b394 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800b4c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b4c4:	884a      	ldrh	r2, [r1, #2]
	                    flag = false;
 800b4c6:	42a2      	cmp	r2, r4
 800b4c8:	bf38      	it	cc
 800b4ca:	2300      	movcc	r3, #0
 800b4cc:	e762      	b.n	800b394 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b4ce:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800b4d2:	42a1      	cmp	r1, r4
 800b4d4:	f4bf af77 	bcs.w	800b3c6 <judgeAccelorNot+0x9e>
 800b4d8:	460c      	mov	r4, r1
 800b4da:	e775      	b.n	800b3c8 <judgeAccelorNot+0xa0>
 800b4dc:	460c      	mov	r4, r1
						flag = true;
 800b4de:	2601      	movs	r6, #1
 800b4e0:	e741      	b.n	800b366 <judgeAccelorNot+0x3e>
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800b4e2:	f8b2 22d2 	ldrh.w	r2, [r2, #722]	; 0x2d2
 800b4e6:	42a2      	cmp	r2, r4
 800b4e8:	d2a4      	bcs.n	800b434 <judgeAccelorNot+0x10c>
 800b4ea:	4614      	mov	r4, r2
 800b4ec:	e7a3      	b.n	800b436 <judgeAccelorNot+0x10e>
 800b4ee:	bf00      	nop

0800b4f0 <getNextState>:
//自分の状態から次の状態を得る
state *getNextState(state *now_state, state *next_state, node *next_node)
{
 800b4f0:	b4f0      	push	{r4, r5, r6, r7}
 800b4f2:	4603      	mov	r3, r0
    //state *next_state;
    //差分を見て、次の状態を定義
    //状態の種類に応じて後で追加:探索時と最短時、既知区間走行でうまく変える
    //ノードと方角と座標を使って、次の方角と座標を得る
    
    uint8_t now_x = now_state->node->pos.x;
 800b4f4:	6880      	ldr	r0, [r0, #8]
    uint8_t now_y = now_state->node->pos.y;
    uint8_t next_x = next_node->pos.x; 
    uint8_t next_y = next_node->pos.y;
    
    switch(now_state->car)
 800b4f6:	789c      	ldrb	r4, [r3, #2]
    uint8_t now_x = now_state->node->pos.x;
 800b4f8:	7985      	ldrb	r5, [r0, #6]
    uint8_t now_y = now_state->node->pos.y;
 800b4fa:	79c6      	ldrb	r6, [r0, #7]
    uint8_t next_y = next_node->pos.y;
 800b4fc:	79d7      	ldrb	r7, [r2, #7]
    uint8_t next_x = next_node->pos.x; 
 800b4fe:	7990      	ldrb	r0, [r2, #6]
    switch(now_state->car)
 800b500:	2c06      	cmp	r4, #6
 800b502:	d81e      	bhi.n	800b542 <getNextState+0x52>
 800b504:	e8df f004 	tbb	[pc, r4]
 800b508:	1d4d1d04 	.word	0x1d4d1d04
 800b50c:	1d34      	.short	0x1d34
 800b50e:	20          	.byte	0x20
 800b50f:	00          	.byte	0x00
    {
        case north://行から、列に行くのか行に行くのかで、差分の取り方を変える
            if(next_node->rc == 0)
 800b510:	7952      	ldrb	r2, [r2, #5]
 800b512:	2a00      	cmp	r2, #0
 800b514:	d058      	beq.n	800b5c8 <getNextState+0xd8>
            if(next_node->rc == 1)
            {
                //行から列.左右のどちらか判断.あとで後ろも候補にあげる
                //右旋回
                //北向きから北東
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b516:	1c6a      	adds	r2, r5, #1
 800b518:	4282      	cmp	r2, r0
 800b51a:	f000 80c3 	beq.w	800b6a4 <getNextState+0x1b4>
                    return next_state;
                }

                //左旋回
                //北向きから北西
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b51e:	4285      	cmp	r5, r0
 800b520:	d10f      	bne.n	800b542 <getNextState+0x52>
 800b522:	42be      	cmp	r6, r7
 800b524:	f000 8120 	beq.w	800b768 <getNextState+0x278>
 800b528:	3e01      	subs	r6, #1
                    return next_state;
                }

                //Uターンして右旋回
                //北向きから南西
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b52a:	42be      	cmp	r6, r7
 800b52c:	d109      	bne.n	800b542 <getNextState+0x52>
                {
                    next_state->car = west;
 800b52e:	2206      	movs	r2, #6
 800b530:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b532:	781a      	ldrb	r2, [r3, #0]
 800b534:	3a01      	subs	r2, #1
                //Uターンして右旋回
                //西向きから南東
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
                {
                    next_state->car = south;
                    next_state->pos.x = now_state->pos.x + 1;
 800b536:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b538:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backright;
 800b53a:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y - 1;
 800b53c:	3b01      	subs	r3, #1
 800b53e:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backright;
 800b540:	70ca      	strb	r2, [r1, #3]
#if DEBUG_ON
    printf("エラー in function 'getNextState'.\r\n");
#endif

    return next_state; //ここまで来てしまったらエラー
}
 800b542:	4608      	mov	r0, r1
 800b544:	bcf0      	pop	{r4, r5, r6, r7}
 800b546:	4770      	bx	lr
            if(next_node->rc == 1)
 800b548:	7952      	ldrb	r2, [r2, #5]
 800b54a:	1e6c      	subs	r4, r5, #1
 800b54c:	2a00      	cmp	r2, #0
 800b54e:	d05c      	beq.n	800b60a <getNextState+0x11a>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b550:	4284      	cmp	r4, r0
 800b552:	f000 808f 	beq.w	800b674 <getNextState+0x184>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b556:	3501      	adds	r5, #1
 800b558:	42a8      	cmp	r0, r5
 800b55a:	d1f2      	bne.n	800b542 <getNextState+0x52>
 800b55c:	42be      	cmp	r6, r7
 800b55e:	d1f0      	bne.n	800b542 <getNextState+0x52>
                    next_state->car = east;
 800b560:	2202      	movs	r2, #2
 800b562:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 2;
 800b564:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = back;
 800b566:	2203      	movs	r2, #3
                    next_state->pos.x = now_state->pos.x + 2;
 800b568:	3302      	adds	r3, #2
 800b56a:	700b      	strb	r3, [r1, #0]
                    next_state->dir = back;
 800b56c:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b56e:	e7e8      	b.n	800b542 <getNextState+0x52>
            if(next_node->rc == 0)
 800b570:	7952      	ldrb	r2, [r2, #5]
 800b572:	2a00      	cmp	r2, #0
 800b574:	d039      	beq.n	800b5ea <getNextState+0xfa>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b576:	4285      	cmp	r5, r0
 800b578:	f000 80a9 	beq.w	800b6ce <getNextState+0x1de>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b57c:	3501      	adds	r5, #1
 800b57e:	42a8      	cmp	r0, r5
 800b580:	d1df      	bne.n	800b542 <getNextState+0x52>
 800b582:	1e72      	subs	r2, r6, #1
 800b584:	42ba      	cmp	r2, r7
 800b586:	f000 80e7 	beq.w	800b758 <getNextState+0x268>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b58a:	42be      	cmp	r6, r7
 800b58c:	d1d9      	bne.n	800b542 <getNextState+0x52>
                    next_state->car = east;
 800b58e:	2002      	movs	r0, #2
 800b590:	7088      	strb	r0, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b592:	781a      	ldrb	r2, [r3, #0]
 800b594:	3201      	adds	r2, #1
 800b596:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b598:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backright;
 800b59a:	70c8      	strb	r0, [r1, #3]
                    next_state->pos.y = now_state->pos.y + 1;
 800b59c:	3301      	adds	r3, #1
 800b59e:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b5a0:	e7cf      	b.n	800b542 <getNextState+0x52>
            if(next_node->rc == 1)
 800b5a2:	7952      	ldrb	r2, [r2, #5]
 800b5a4:	2a00      	cmp	r2, #0
 800b5a6:	d044      	beq.n	800b632 <getNextState+0x142>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b5a8:	1c6a      	adds	r2, r5, #1
 800b5aa:	4282      	cmp	r2, r0
 800b5ac:	d057      	beq.n	800b65e <getNextState+0x16e>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b5ae:	3d01      	subs	r5, #1
 800b5b0:	42a8      	cmp	r0, r5
 800b5b2:	d1c6      	bne.n	800b542 <getNextState+0x52>
 800b5b4:	42be      	cmp	r6, r7
 800b5b6:	d1c4      	bne.n	800b542 <getNextState+0x52>
                    next_state->car = west;
 800b5b8:	2206      	movs	r2, #6
 800b5ba:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b5bc:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = back;
 800b5be:	2203      	movs	r2, #3
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b5c0:	3b02      	subs	r3, #2
 800b5c2:	700b      	strb	r3, [r1, #0]
                    next_state->dir = back;
 800b5c4:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b5c6:	e7bc      	b.n	800b542 <getNextState+0x52>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800b5c8:	4285      	cmp	r5, r0
 800b5ca:	d1ba      	bne.n	800b542 <getNextState+0x52>
 800b5cc:	1c70      	adds	r0, r6, #1
 800b5ce:	42b8      	cmp	r0, r7
 800b5d0:	f000 809d 	beq.w	800b70e <getNextState+0x21e>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800b5d4:	3e01      	subs	r6, #1
 800b5d6:	42b7      	cmp	r7, r6
 800b5d8:	d1b3      	bne.n	800b542 <getNextState+0x52>
                    next_state->car = south;
 800b5da:	2204      	movs	r2, #4
 800b5dc:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b5de:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = back;
 800b5e0:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b5e2:	3b02      	subs	r3, #2
 800b5e4:	704b      	strb	r3, [r1, #1]
                    next_state->dir = back;
 800b5e6:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b5e8:	e7ab      	b.n	800b542 <getNextState+0x52>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800b5ea:	4285      	cmp	r5, r0
 800b5ec:	d1a9      	bne.n	800b542 <getNextState+0x52>
 800b5ee:	1e70      	subs	r0, r6, #1
 800b5f0:	42b8      	cmp	r0, r7
 800b5f2:	f000 8085 	beq.w	800b700 <getNextState+0x210>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800b5f6:	3601      	adds	r6, #1
 800b5f8:	42b7      	cmp	r7, r6
 800b5fa:	d1a2      	bne.n	800b542 <getNextState+0x52>
                    next_state->car = north;
 800b5fc:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 2;
 800b5fe:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = back;
 800b600:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y + 2;
 800b602:	3302      	adds	r3, #2
 800b604:	704b      	strb	r3, [r1, #1]
                    next_state->dir = back;
 800b606:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b608:	e79b      	b.n	800b542 <getNextState+0x52>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b60a:	4284      	cmp	r4, r0
 800b60c:	d06a      	beq.n	800b6e4 <getNextState+0x1f4>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b60e:	4285      	cmp	r5, r0
 800b610:	d197      	bne.n	800b542 <getNextState+0x52>
 800b612:	42be      	cmp	r6, r7
 800b614:	f000 80ba 	beq.w	800b78c <getNextState+0x29c>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800b618:	3601      	adds	r6, #1
 800b61a:	42be      	cmp	r6, r7
 800b61c:	d191      	bne.n	800b542 <getNextState+0x52>
                    next_state->car = north;
 800b61e:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b620:	781a      	ldrb	r2, [r3, #0]
 800b622:	3201      	adds	r2, #1
 800b624:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b626:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backleft;
 800b628:	2204      	movs	r2, #4
                    next_state->pos.y = now_state->pos.y + 1;
 800b62a:	3301      	adds	r3, #1
 800b62c:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backleft;
 800b62e:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b630:	e787      	b.n	800b542 <getNextState+0x52>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b632:	4285      	cmp	r5, r0
 800b634:	d029      	beq.n	800b68a <getNextState+0x19a>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b636:	3d01      	subs	r5, #1
 800b638:	4285      	cmp	r5, r0
 800b63a:	d182      	bne.n	800b542 <getNextState+0x52>
 800b63c:	1c70      	adds	r0, r6, #1
 800b63e:	42b8      	cmp	r0, r7
 800b640:	f000 809a 	beq.w	800b778 <getNextState+0x288>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b644:	42be      	cmp	r6, r7
 800b646:	f47f af7c 	bne.w	800b542 <getNextState+0x52>
                    next_state->car = south;
 800b64a:	2004      	movs	r0, #4
 800b64c:	7088      	strb	r0, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b64e:	781a      	ldrb	r2, [r3, #0]
 800b650:	3a01      	subs	r2, #1
 800b652:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b654:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backleft;
 800b656:	70c8      	strb	r0, [r1, #3]
                    next_state->pos.y = now_state->pos.y - 1;
 800b658:	3b01      	subs	r3, #1
 800b65a:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b65c:	e771      	b.n	800b542 <getNextState+0x52>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b65e:	42be      	cmp	r6, r7
 800b660:	f47f af6f 	bne.w	800b542 <getNextState+0x52>
                    next_state->car = east;
 800b664:	2202      	movs	r2, #2
 800b666:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b668:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = front;
 800b66a:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x + 1;
 800b66c:	3301      	adds	r3, #1
 800b66e:	700b      	strb	r3, [r1, #0]
                    next_state->dir = front;
 800b670:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b672:	e766      	b.n	800b542 <getNextState+0x52>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b674:	42be      	cmp	r6, r7
 800b676:	f47f af64 	bne.w	800b542 <getNextState+0x52>
                    next_state->car = west;
 800b67a:	2206      	movs	r2, #6
 800b67c:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b67e:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = front;
 800b680:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b682:	3b01      	subs	r3, #1
 800b684:	700b      	strb	r3, [r1, #0]
                    next_state->dir = front;
 800b686:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b688:	e75b      	b.n	800b542 <getNextState+0x52>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b68a:	42be      	cmp	r6, r7
 800b68c:	d054      	beq.n	800b738 <getNextState+0x248>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800b68e:	3601      	adds	r6, #1
 800b690:	42be      	cmp	r6, r7
 800b692:	f47f af56 	bne.w	800b542 <getNextState+0x52>
                    next_state->car = north;
 800b696:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b698:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = left;
 800b69a:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y + 1;
 800b69c:	3301      	adds	r3, #1
 800b69e:	704b      	strb	r3, [r1, #1]
                    next_state->dir = left;
 800b6a0:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b6a2:	e74e      	b.n	800b542 <getNextState+0x52>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b6a4:	42be      	cmp	r6, r7
 800b6a6:	d038      	beq.n	800b71a <getNextState+0x22a>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b6a8:	4285      	cmp	r5, r0
 800b6aa:	f106 36ff 	add.w	r6, r6, #4294967295
 800b6ae:	f43f af3c 	beq.w	800b52a <getNextState+0x3a>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b6b2:	42be      	cmp	r6, r7
 800b6b4:	f47f af45 	bne.w	800b542 <getNextState+0x52>
                    next_state->car = east;
 800b6b8:	2202      	movs	r2, #2
 800b6ba:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b6bc:	781a      	ldrb	r2, [r3, #0]
 800b6be:	3201      	adds	r2, #1
 800b6c0:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b6c2:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backleft;
 800b6c4:	2204      	movs	r2, #4
                    next_state->pos.y = now_state->pos.y - 1;
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backleft;
 800b6ca:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b6cc:	e739      	b.n	800b542 <getNextState+0x52>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b6ce:	1e72      	subs	r2, r6, #1
 800b6d0:	42ba      	cmp	r2, r7
 800b6d2:	d039      	beq.n	800b748 <getNextState+0x258>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b6d4:	42be      	cmp	r6, r7
 800b6d6:	f47f af34 	bne.w	800b542 <getNextState+0x52>
                    next_state->car = west;
 800b6da:	2206      	movs	r2, #6
 800b6dc:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b6de:	781a      	ldrb	r2, [r3, #0]
 800b6e0:	3a01      	subs	r2, #1
 800b6e2:	e79f      	b.n	800b624 <getNextState+0x134>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b6e4:	1c70      	adds	r0, r6, #1
 800b6e6:	42b8      	cmp	r0, r7
 800b6e8:	d01f      	beq.n	800b72a <getNextState+0x23a>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b6ea:	42be      	cmp	r6, r7
 800b6ec:	f47f af29 	bne.w	800b542 <getNextState+0x52>
                    next_state->car = south;
 800b6f0:	2204      	movs	r2, #4
 800b6f2:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b6f4:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = left;
 800b6f6:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y - 1;
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	704b      	strb	r3, [r1, #1]
                    next_state->dir = left;
 800b6fc:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b6fe:	e720      	b.n	800b542 <getNextState+0x52>
                    next_state->car = south;
 800b700:	2004      	movs	r0, #4
 800b702:	7088      	strb	r0, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b704:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = front;
 800b706:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b708:	3b01      	subs	r3, #1
 800b70a:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b70c:	e719      	b.n	800b542 <getNextState+0x52>
                    next_state->car = north;
 800b70e:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b710:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = front;
 800b712:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.y = now_state->pos.y + 1;
 800b714:	3301      	adds	r3, #1
 800b716:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b718:	e713      	b.n	800b542 <getNextState+0x52>
                    next_state->car = east;
 800b71a:	2202      	movs	r2, #2
 800b71c:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b71e:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = right;
 800b720:	2201      	movs	r2, #1
                    next_state->pos.x = now_state->pos.x + 1;
 800b722:	4413      	add	r3, r2
 800b724:	700b      	strb	r3, [r1, #0]
                    next_state->dir = right;
 800b726:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b728:	e70b      	b.n	800b542 <getNextState+0x52>
                    next_state->car = north;
 800b72a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b72c:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = right;
 800b72e:	2201      	movs	r2, #1
                    next_state->pos.y = now_state->pos.y + 1;
 800b730:	4413      	add	r3, r2
 800b732:	704b      	strb	r3, [r1, #1]
                    next_state->dir = right;
 800b734:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b736:	e704      	b.n	800b542 <getNextState+0x52>
                    next_state->car = south;
 800b738:	2204      	movs	r2, #4
 800b73a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b73c:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = right;
 800b73e:	2201      	movs	r2, #1
                    next_state->pos.y = now_state->pos.y - 1;
 800b740:	3b01      	subs	r3, #1
 800b742:	704b      	strb	r3, [r1, #1]
                    next_state->dir = right;
 800b744:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b746:	e6fc      	b.n	800b542 <getNextState+0x52>
                    next_state->car = west;
 800b748:	2206      	movs	r2, #6
 800b74a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b74c:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = right;
 800b74e:	2201      	movs	r2, #1
                    next_state->pos.x = now_state->pos.x - 1;
 800b750:	3b01      	subs	r3, #1
 800b752:	700b      	strb	r3, [r1, #0]
                    next_state->dir = right;
 800b754:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b756:	e6f4      	b.n	800b542 <getNextState+0x52>
                    next_state->car = east;
 800b758:	2202      	movs	r2, #2
 800b75a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b75c:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = left;
 800b75e:	2205      	movs	r2, #5
                    next_state->pos.x = now_state->pos.x + 1;
 800b760:	3301      	adds	r3, #1
 800b762:	700b      	strb	r3, [r1, #0]
                    next_state->dir = left;
 800b764:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b766:	e6ec      	b.n	800b542 <getNextState+0x52>
                    next_state->car = west;
 800b768:	2206      	movs	r2, #6
 800b76a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b76c:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = left;
 800b76e:	2205      	movs	r2, #5
                    next_state->pos.x = now_state->pos.x - 1;
 800b770:	3b01      	subs	r3, #1
 800b772:	700b      	strb	r3, [r1, #0]
                    next_state->dir = left;
 800b774:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b776:	e6e4      	b.n	800b542 <getNextState+0x52>
                    next_state->car = north;
 800b778:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b77a:	781a      	ldrb	r2, [r3, #0]
 800b77c:	3a01      	subs	r2, #1
 800b77e:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b780:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backright;
 800b782:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y + 1;
 800b784:	3301      	adds	r3, #1
 800b786:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backright;
 800b788:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b78a:	e6da      	b.n	800b542 <getNextState+0x52>
                    next_state->car = south;
 800b78c:	2204      	movs	r2, #4
 800b78e:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b790:	781a      	ldrb	r2, [r3, #0]
 800b792:	3201      	adds	r2, #1
 800b794:	e6cf      	b.n	800b536 <getNextState+0x46>
 800b796:	bf00      	nop

0800b798 <initProfile>:
        // log_st[n].wall.west = WALL;
    }
    printf("い\r\n");
}
void initProfile(profile *prof, maze_node *maze)
{
 800b798:	b430      	push	{r4, r5}
    };
    setWallExistence(&(prof->now.wall), &w_st[0]);
    setWallExistence(&(prof->next.wall), &next[0]);

    prof->now.node = &(maze->RawNode[0][0]);
    prof->next.node = &(maze->RawNode[0][1]);
 800b79a:	f101 0208 	add.w	r2, r1, #8
    pos->y = y;
 800b79e:	2301      	movs	r3, #1
    existence->north = state[0];
 800b7a0:	2554      	movs	r5, #84	; 0x54
 800b7a2:	244a      	movs	r4, #74	; 0x4a
    prof->now.node = &(maze->RawNode[0][0]);
 800b7a4:	6101      	str	r1, [r0, #16]
    prof->next.node = &(maze->RawNode[0][1]);
 800b7a6:	61c2      	str	r2, [r0, #28]
    pos->x = x;
 800b7a8:	2107      	movs	r1, #7
 800b7aa:	2208      	movs	r2, #8
    pos->y = y;
 800b7ac:	7543      	strb	r3, [r0, #21]
    pos->x = x;
 800b7ae:	2300      	movs	r3, #0
    existence->north = state[0];
 800b7b0:	7305      	strb	r5, [r0, #12]
 800b7b2:	7604      	strb	r4, [r0, #24]
    pos->x = x;
 800b7b4:	7001      	strb	r1, [r0, #0]
    pos->y = y;
 800b7b6:	7041      	strb	r1, [r0, #1]
    pos->x = x;
 800b7b8:	7082      	strb	r2, [r0, #2]
    pos->y = y;
 800b7ba:	70c2      	strb	r2, [r0, #3]
    pos->x = x;
 800b7bc:	7203      	strb	r3, [r0, #8]
    pos->y = y;
 800b7be:	7243      	strb	r3, [r0, #9]
    st->car = car;
 800b7c0:	7283      	strb	r3, [r0, #10]
    pos->x = x;
 800b7c2:	7503      	strb	r3, [r0, #20]
    st->car = car;
 800b7c4:	7583      	strb	r3, [r0, #22]
    // prof->now.node->rc = 0;
    // prof->now.node->pos.x = 0;
    // prof->now.node->pos.y = 0;
}
 800b7c6:	bc30      	pop	{r4, r5}
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop

0800b7cc <shiftState>:
void shiftState(profile *prof)
{
 800b7cc:	b410      	push	{r4}
    prof->now.car = prof->next.car;
    prof->now.pos.x = prof->next.pos.x;
 800b7ce:	7d01      	ldrb	r1, [r0, #20]
    prof->now.car = prof->next.car;
 800b7d0:	7d84      	ldrb	r4, [r0, #22]
    prof->now.pos.y = prof->next.pos.y;
 800b7d2:	7d42      	ldrb	r2, [r0, #21]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b7d4:	69c3      	ldr	r3, [r0, #28]
    prof->now.car = prof->next.car;
 800b7d6:	7284      	strb	r4, [r0, #10]
    prof->now.pos.x = prof->next.pos.x;
 800b7d8:	7201      	strb	r1, [r0, #8]
    prof->now.pos.y = prof->next.pos.y;
 800b7da:	7242      	strb	r2, [r0, #9]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b7dc:	6103      	str	r3, [r0, #16]
}
 800b7de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <InitExplore>:

	//ハード処理

}
void InitExplore()
{
 800b7e4:	b538      	push	{r3, r4, r5, lr}
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	2004      	movs	r0, #4
 800b7ea:	f002 fcf3 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	2005      	movs	r0, #5
 800b7f2:	f002 fcef 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	2002      	movs	r0, #2
 800b7fa:	f002 fceb 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b7fe:	2100      	movs	r1, #0
 800b800:	2003      	movs	r0, #3
 800b802:	f002 fce7 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b806:	2100      	movs	r1, #0
 800b808:	2001      	movs	r0, #1
 800b80a:	f002 fce3 	bl	800e1d4 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800b80e:	2100      	movs	r1, #0
 800b810:	4608      	mov	r0, r1
 800b812:	f002 fcdf 	bl	800e1d4 <PIDChangeFlag>


	Load_Gain();
 800b816:	f002 fa69 	bl	800dcec <Load_Gain>
	uint8_t imu_check;
	imu_check = IMU_init();
 800b81a:	f002 f81b 	bl	800d854 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b81e:	4c38      	ldr	r4, [pc, #224]	; (800b900 <InitExplore+0x11c>)
	}

#endif

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
 800b820:	4d38      	ldr	r5, [pc, #224]	; (800b904 <InitExplore+0x120>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b822:	4601      	mov	r1, r0
 800b824:	4620      	mov	r0, r4
 800b826:	f007 f943 	bl	8012ab0 <iprintf>
	imu_check =IMU_init();
 800b82a:	f002 f813 	bl	800d854 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b82e:	4601      	mov	r1, r0
 800b830:	4620      	mov	r0, r4
 800b832:	f007 f93d 	bl	8012ab0 <iprintf>
	HAL_Delay(100);
 800b836:	2064      	movs	r0, #100	; 0x64
 800b838:	f002 fe82 	bl	800e540 <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800b83c:	2138      	movs	r1, #56	; 0x38
 800b83e:	2037      	movs	r0, #55	; 0x37
 800b840:	f001 ff94 	bl	800d76c <ReadIMU>
 800b844:	4b30      	ldr	r3, [pc, #192]	; (800b908 <InitExplore+0x124>)
	TargetVelocity[BODY] = 0;
 800b846:	4c31      	ldr	r4, [pc, #196]	; (800b90c <InitExplore+0x128>)
	ZGyro = ReadIMU(0x37, 0x38);
 800b848:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800b84c:	6818      	ldr	r0, [r3, #0]
 800b84e:	f7fc fdb3 	bl	80083b8 <__aeabi_f2d>
 800b852:	4602      	mov	r2, r0
 800b854:	460b      	mov	r3, r1
 800b856:	482e      	ldr	r0, [pc, #184]	; (800b910 <InitExplore+0x12c>)
 800b858:	f007 f92a 	bl	8012ab0 <iprintf>
	Motor_PWM_Start();
 800b85c:	f002 f8ea 	bl	800da34 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800b860:	f002 f862 	bl	800d928 <EncoderStart>
	EmitterON();
 800b864:	f002 f870 	bl	800d948 <EmitterON>
	ADCStart();
 800b868:	f001 fe5c 	bl	800d524 <ADCStart>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b86c:	f247 512f 	movw	r1, #29999	; 0x752f
 800b870:	4828      	ldr	r0, [pc, #160]	; (800b914 <InitExplore+0x130>)
 800b872:	f002 f96b 	bl	800db4c <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b876:	f247 512f 	movw	r1, #29999	; 0x752f
 800b87a:	4827      	ldr	r0, [pc, #156]	; (800b918 <InitExplore+0x134>)
 800b87c:	f002 f966 	bl	800db4c <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800b880:	4826      	ldr	r0, [pc, #152]	; (800b91c <InitExplore+0x138>)
 800b882:	f004 fc35 	bl	80100f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b886:	4826      	ldr	r0, [pc, #152]	; (800b920 <InitExplore+0x13c>)
 800b888:	f004 fc32 	bl	80100f0 <HAL_TIM_Base_Start_IT>
	TargetVelocity[BODY] = 0;
 800b88c:	2300      	movs	r3, #0
	Acceleration = 0;
	AngularAcceleration = 0;
	TotalPulse[LEFT] = 0;
 800b88e:	4a25      	ldr	r2, [pc, #148]	; (800b924 <InitExplore+0x140>)
	Acceleration = 0;
 800b890:	4825      	ldr	r0, [pc, #148]	; (800b928 <InitExplore+0x144>)
	AngularAcceleration = 0;
 800b892:	4926      	ldr	r1, [pc, #152]	; (800b92c <InitExplore+0x148>)
	TargetVelocity[BODY] = 0;
 800b894:	60a3      	str	r3, [r4, #8]
	TotalPulse[LEFT] = 0;
 800b896:	2400      	movs	r4, #0
	TargetAngularV = 0;
 800b898:	602b      	str	r3, [r5, #0]
	Acceleration = 0;
 800b89a:	6003      	str	r3, [r0, #0]
	AngularAcceleration = 0;
 800b89c:	600b      	str	r3, [r1, #0]
	TotalPulse[LEFT] = 0;
 800b89e:	6014      	str	r4, [r2, #0]
	TotalPulse[RIGHT] = 0;
 800b8a0:	6054      	str	r4, [r2, #4]
	TotalPulse[BODY] = 0;
 800b8a2:	6094      	str	r4, [r2, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800b8a4:	f002 f81a 	bl	800d8dc <IMU_Calib>
	printf("calib ok : %f\r\n",zg_offset);
 800b8a8:	4b21      	ldr	r3, [pc, #132]	; (800b930 <InitExplore+0x14c>)
 800b8aa:	6818      	ldr	r0, [r3, #0]
 800b8ac:	f7fc fd84 	bl	80083b8 <__aeabi_f2d>
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	481f      	ldr	r0, [pc, #124]	; (800b934 <InitExplore+0x150>)
 800b8b6:	f007 f8fb 	bl	8012ab0 <iprintf>
	TargetPhoto[SR] = Photo[SR];
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
#else


	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b8ba:	4b1f      	ldr	r3, [pc, #124]	; (800b938 <InitExplore+0x154>)
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b8bc:	4a1f      	ldr	r2, [pc, #124]	; (800b93c <InitExplore+0x158>)
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b8be:	ed93 7a02 	vldr	s14, [r3, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800b8c2:	edd3 7a01 	vldr	s15, [r3, #4]
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b8c6:	4b1e      	ldr	r3, [pc, #120]	; (800b940 <InitExplore+0x15c>)
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b8c8:	ee77 6a67 	vsub.f32	s13, s14, s15

#endif
	PIDReset(L_VELO_PID);
 800b8cc:	2004      	movs	r0, #4
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b8ce:	ed83 7a02 	vstr	s14, [r3, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800b8d2:	edc3 7a01 	vstr	s15, [r3, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b8d6:	edc2 6a00 	vstr	s13, [r2]
	PIDReset(L_VELO_PID);
 800b8da:	f002 fc83 	bl	800e1e4 <PIDReset>
	PIDReset(R_VELO_PID);
 800b8de:	2005      	movs	r0, #5
 800b8e0:	f002 fc80 	bl	800e1e4 <PIDReset>

	PIDReset(A_VELO_PID);
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f002 fc7d 	bl	800e1e4 <PIDReset>
	PIDReset(L_WALL_PID);
 800b8ea:	2002      	movs	r0, #2
 800b8ec:	f002 fc7a 	bl	800e1e4 <PIDReset>
	PIDReset(R_WALL_PID);
 800b8f0:	2003      	movs	r0, #3
 800b8f2:	f002 fc77 	bl	800e1e4 <PIDReset>
	PIDReset(D_WALL_PID);
 800b8f6:	2001      	movs	r0, #1

#endif
}
 800b8f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800b8fc:	f002 bc72 	b.w	800e1e4 <PIDReset>
 800b900:	08016388 	.word	0x08016388
 800b904:	20000c5c 	.word	0x20000c5c
 800b908:	200002e0 	.word	0x200002e0
 800b90c:	20000c4c 	.word	0x20000c4c
 800b910:	080163a4 	.word	0x080163a4
 800b914:	40000424 	.word	0x40000424
 800b918:	40000824 	.word	0x40000824
 800b91c:	20001138 	.word	0x20001138
 800b920:	20000ef0 	.word	0x20000ef0
 800b924:	20000c7c 	.word	0x20000c7c
 800b928:	20000230 	.word	0x20000230
 800b92c:	20000238 	.word	0x20000238
 800b930:	200002e4 	.word	0x200002e4
 800b934:	080163b0 	.word	0x080163b0
 800b938:	20000cbc 	.word	0x20000cbc
 800b93c:	20000c70 	.word	0x20000c70
 800b940:	20000d7c 	.word	0x20000d7c

0800b944 <InitFastest>:

void InitFastest()
{
 800b944:	b538      	push	{r3, r4, r5, lr}
	Motor_PWM_Start();
 800b946:	f002 f875 	bl	800da34 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800b94a:	f001 ffed 	bl	800d928 <EncoderStart>
	EmitterON();
 800b94e:	f001 fffb 	bl	800d948 <EmitterON>
	ADCStart();
 800b952:	f001 fde7 	bl	800d524 <ADCStart>

	uint8_t imu_check;
	imu_check = IMU_init();
 800b956:	f001 ff7d 	bl	800d854 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b95a:	4c3d      	ldr	r4, [pc, #244]	; (800ba50 <InitFastest+0x10c>)

	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
 800b95c:	4d3d      	ldr	r5, [pc, #244]	; (800ba54 <InitFastest+0x110>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b95e:	4601      	mov	r1, r0
 800b960:	4620      	mov	r0, r4
 800b962:	f007 f8a5 	bl	8012ab0 <iprintf>
	imu_check =IMU_init();
 800b966:	f001 ff75 	bl	800d854 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b96a:	4601      	mov	r1, r0
 800b96c:	4620      	mov	r0, r4
 800b96e:	f007 f89f 	bl	8012ab0 <iprintf>
	HAL_Delay(100);
 800b972:	2064      	movs	r0, #100	; 0x64
 800b974:	f002 fde4 	bl	800e540 <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800b978:	2138      	movs	r1, #56	; 0x38
 800b97a:	2037      	movs	r0, #55	; 0x37
 800b97c:	f001 fef6 	bl	800d76c <ReadIMU>
 800b980:	4b35      	ldr	r3, [pc, #212]	; (800ba58 <InitFastest+0x114>)
	TargetVelocity[BODY] = 0;
 800b982:	4c36      	ldr	r4, [pc, #216]	; (800ba5c <InitFastest+0x118>)
	ZGyro = ReadIMU(0x37, 0x38);
 800b984:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800b988:	6818      	ldr	r0, [r3, #0]
 800b98a:	f7fc fd15 	bl	80083b8 <__aeabi_f2d>
 800b98e:	4602      	mov	r2, r0
 800b990:	460b      	mov	r3, r1
 800b992:	4833      	ldr	r0, [pc, #204]	; (800ba60 <InitFastest+0x11c>)
 800b994:	f007 f88c 	bl	8012ab0 <iprintf>
	PIDChangeFlag(L_VELO_PID, 0);
 800b998:	2100      	movs	r1, #0
 800b99a:	2004      	movs	r0, #4
 800b99c:	f002 fc1a 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	2005      	movs	r0, #5
 800b9a4:	f002 fc16 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	2002      	movs	r0, #2
 800b9ac:	f002 fc12 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	2003      	movs	r0, #3
 800b9b4:	f002 fc0e 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	2001      	movs	r0, #1
 800b9bc:	f002 fc0a 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	4608      	mov	r0, r1
 800b9c4:	f002 fc06 	bl	800e1d4 <PIDChangeFlag>
	Load_Gain();
 800b9c8:	f002 f990 	bl	800dcec <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b9cc:	f247 512f 	movw	r1, #29999	; 0x752f
 800b9d0:	4824      	ldr	r0, [pc, #144]	; (800ba64 <InitFastest+0x120>)
 800b9d2:	f002 f8bb 	bl	800db4c <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b9d6:	f247 512f 	movw	r1, #29999	; 0x752f
 800b9da:	4823      	ldr	r0, [pc, #140]	; (800ba68 <InitFastest+0x124>)
 800b9dc:	f002 f8b6 	bl	800db4c <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800b9e0:	4822      	ldr	r0, [pc, #136]	; (800ba6c <InitFastest+0x128>)
 800b9e2:	f004 fb85 	bl	80100f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b9e6:	4822      	ldr	r0, [pc, #136]	; (800ba70 <InitFastest+0x12c>)
 800b9e8:	f004 fb82 	bl	80100f0 <HAL_TIM_Base_Start_IT>
	Acceleration = 0;
	AngularAcceleration = 0;
 800b9ec:	4921      	ldr	r1, [pc, #132]	; (800ba74 <InitFastest+0x130>)
	TotalPulse[LEFT] = 0;
 800b9ee:	4a22      	ldr	r2, [pc, #136]	; (800ba78 <InitFastest+0x134>)
	Acceleration = 0;
 800b9f0:	4822      	ldr	r0, [pc, #136]	; (800ba7c <InitFastest+0x138>)
	TargetVelocity[BODY] = 0;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	60a3      	str	r3, [r4, #8]
	TotalPulse[LEFT] = 0;
 800b9f6:	2400      	movs	r4, #0
	TargetAngularV = 0;
 800b9f8:	602b      	str	r3, [r5, #0]
	Acceleration = 0;
 800b9fa:	6003      	str	r3, [r0, #0]
	AngularAcceleration = 0;
 800b9fc:	600b      	str	r3, [r1, #0]
	TotalPulse[LEFT] = 0;
 800b9fe:	6014      	str	r4, [r2, #0]
	TotalPulse[RIGHT] = 0;
 800ba00:	6054      	str	r4, [r2, #4]
	TotalPulse[BODY] = 0;
 800ba02:	6094      	str	r4, [r2, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800ba04:	f001 ff6a 	bl	800d8dc <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800ba08:	4b1d      	ldr	r3, [pc, #116]	; (800ba80 <InitFastest+0x13c>)
	TargetPhoto[SR] = Photo[SR];
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800ba0a:	4a1e      	ldr	r2, [pc, #120]	; (800ba84 <InitFastest+0x140>)
	TargetPhoto[SL] = Photo[SL];
 800ba0c:	ed93 7a02 	vldr	s14, [r3, #8]
	TargetPhoto[SR] = Photo[SR];
 800ba10:	edd3 7a01 	vldr	s15, [r3, #4]
	TargetPhoto[SL] = Photo[SL];
 800ba14:	4b1c      	ldr	r3, [pc, #112]	; (800ba88 <InitFastest+0x144>)
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800ba16:	ee77 6a67 	vsub.f32	s13, s14, s15

	PIDReset(L_VELO_PID);
 800ba1a:	2004      	movs	r0, #4
	TargetPhoto[SL] = Photo[SL];
 800ba1c:	ed83 7a02 	vstr	s14, [r3, #8]
	TargetPhoto[SR] = Photo[SR];
 800ba20:	edc3 7a01 	vstr	s15, [r3, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800ba24:	edc2 6a00 	vstr	s13, [r2]
	PIDReset(L_VELO_PID);
 800ba28:	f002 fbdc 	bl	800e1e4 <PIDReset>
	PIDReset(R_VELO_PID);
 800ba2c:	2005      	movs	r0, #5
 800ba2e:	f002 fbd9 	bl	800e1e4 <PIDReset>
	PIDReset(A_VELO_PID);
 800ba32:	4620      	mov	r0, r4
 800ba34:	f002 fbd6 	bl	800e1e4 <PIDReset>
	PIDReset(L_WALL_PID);
 800ba38:	2002      	movs	r0, #2
 800ba3a:	f002 fbd3 	bl	800e1e4 <PIDReset>
	PIDReset(R_WALL_PID);
 800ba3e:	2003      	movs	r0, #3
 800ba40:	f002 fbd0 	bl	800e1e4 <PIDReset>
	PIDReset(D_WALL_PID);
 800ba44:	2001      	movs	r0, #1


}
 800ba46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800ba4a:	f002 bbcb 	b.w	800e1e4 <PIDReset>
 800ba4e:	bf00      	nop
 800ba50:	08016388 	.word	0x08016388
 800ba54:	20000c5c 	.word	0x20000c5c
 800ba58:	200002e0 	.word	0x200002e0
 800ba5c:	20000c4c 	.word	0x20000c4c
 800ba60:	080163a4 	.word	0x080163a4
 800ba64:	40000424 	.word	0x40000424
 800ba68:	40000824 	.word	0x40000824
 800ba6c:	20001138 	.word	0x20001138
 800ba70:	20000ef0 	.word	0x20000ef0
 800ba74:	20000238 	.word	0x20000238
 800ba78:	20000c7c 	.word	0x20000c7c
 800ba7c:	20000230 	.word	0x20000230
 800ba80:	20000cbc 	.word	0x20000cbc
 800ba84:	20000c70 	.word	0x20000c70
 800ba88:	20000d7c 	.word	0x20000d7c

0800ba8c <Debug>:
void Debug()
{
 800ba8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if 1
	InitExplore();
	InitPosition();
	wall_init();

	TotalPulse[RIGHT] = 0;
 800ba8e:	4d2a      	ldr	r5, [pc, #168]	; (800bb38 <Debug+0xac>)
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	PIDChangeFlag(A_VELO_PID, 1);
	ExploreVelocity=0;
 800ba90:	4e2a      	ldr	r6, [pc, #168]	; (800bb3c <Debug+0xb0>)
	TotalPulse[RIGHT] = 0;
 800ba92:	2400      	movs	r4, #0
	InitExplore();
 800ba94:	f7ff fea6 	bl	800b7e4 <InitExplore>
	InitPosition();
 800ba98:	f7fd f9ae 	bl	8008df8 <InitPosition>
	wall_init();
 800ba9c:	f7fe fd08 	bl	800a4b0 <wall_init>
	PIDChangeFlag(L_VELO_PID, 1);
 800baa0:	2101      	movs	r1, #1
 800baa2:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800baa4:	606c      	str	r4, [r5, #4]
	TotalPulse[LEFT] = 0;
 800baa6:	602c      	str	r4, [r5, #0]
	TotalPulse[BODY] = 0;
 800baa8:	60ac      	str	r4, [r5, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800baaa:	f002 fb93 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800baae:	2101      	movs	r1, #1
 800bab0:	2005      	movs	r0, #5
 800bab2:	f002 fb8f 	bl	800e1d4 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800bab6:	68a9      	ldr	r1, [r5, #8]
 800bab8:	4821      	ldr	r0, [pc, #132]	; (800bb40 <Debug+0xb4>)
 800baba:	682a      	ldr	r2, [r5, #0]
 800babc:	686b      	ldr	r3, [r5, #4]
	}
	PIDChangeFlag(F_WALL_PID, 0);
#endif
#if 1 //直進テスト
	ExploreVelocity = 135;
	Pos.Dir = front;
 800babe:	4d21      	ldr	r5, [pc, #132]	; (800bb44 <Debug+0xb8>)
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800bac0:	f006 fff6 	bl	8012ab0 <iprintf>
	PIDChangeFlag(D_WALL_PID, 0);
 800bac4:	4621      	mov	r1, r4
 800bac6:	2001      	movs	r0, #1
 800bac8:	f002 fb84 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bacc:	4621      	mov	r1, r4
 800bace:	2002      	movs	r0, #2
 800bad0:	f002 fb80 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bad4:	4621      	mov	r1, r4
 800bad6:	2003      	movs	r0, #3
 800bad8:	f002 fb7c 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800badc:	2101      	movs	r1, #1
 800bade:	4620      	mov	r0, r4
 800bae0:	f002 fb78 	bl	800e1d4 <PIDChangeFlag>
	ExploreVelocity=0;
 800bae4:	2700      	movs	r7, #0
	ChangeLED(3);
 800bae6:	2003      	movs	r0, #3
	ExploreVelocity=0;
 800bae8:	6037      	str	r7, [r6, #0]
	ChangeLED(3);
 800baea:	f001 ff49 	bl	800d980 <ChangeLED>
	ExploreVelocity = 135;
 800baee:	eddf 0a16 	vldr	s1, [pc, #88]	; 800bb48 <Debug+0xbc>
	IT_mode = EXPLORE;
 800baf2:	4b16      	ldr	r3, [pc, #88]	; (800bb4c <Debug+0xc0>)
	Accel(61.75,ExploreVelocity);
 800baf4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800bb50 <Debug+0xc4>
	ExploreVelocity = 135;
 800baf8:	edc6 0a00 	vstr	s1, [r6]
	IT_mode = EXPLORE;
 800bafc:	2206      	movs	r2, #6
 800bafe:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800bb00:	712c      	strb	r4, [r5, #4]
	Accel(61.75,ExploreVelocity);
 800bb02:	f7fd fea5 	bl	8009850 <Accel>
	for(int i=0; i < 1; i++)
	{
		Pos.Dir = front;
		GoStraight(90, ExploreVelocity, AddVelocity);
 800bb06:	4b13      	ldr	r3, [pc, #76]	; (800bb54 <Debug+0xc8>)
 800bb08:	edd6 0a00 	vldr	s1, [r6]
 800bb0c:	edd3 7a00 	vldr	s15, [r3]
 800bb10:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800bb58 <Debug+0xcc>
		Pos.Dir = front;
 800bb14:	712c      	strb	r4, [r5, #4]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800bb16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb1a:	ee17 0a90 	vmov	r0, s15
 800bb1e:	f7fd ffcb 	bl	8009ab8 <GoStraight>
		//Pos.Dir = right;
		SlalomRight();
 800bb22:	f7fd fb45 	bl	80091b0 <SlalomRight>

	}
	Pos.Dir = front;
	//Decel(45,0);
	TargetVelocity[BODY] = 0;
 800bb26:	4b0d      	ldr	r3, [pc, #52]	; (800bb5c <Debug+0xd0>)
	Pos.Dir = front;
 800bb28:	712c      	strb	r4, [r5, #4]
	TargetVelocity[BODY] = 0;
 800bb2a:	609f      	str	r7, [r3, #8]
	HAL_Delay(1000);
 800bb2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	while(1)
	{
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
 800bb30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_Delay(1000);
 800bb34:	f002 bd04 	b.w	800e540 <HAL_Delay>
 800bb38:	20000c7c 	.word	0x20000c7c
 800bb3c:	20000d70 	.word	0x20000d70
 800bb40:	080162a4 	.word	0x080162a4
 800bb44:	20000004 	.word	0x20000004
 800bb48:	43070000 	.word	0x43070000
 800bb4c:	20000c3c 	.word	0x20000c3c
 800bb50:	42770000 	.word	0x42770000
 800bb54:	20000c58 	.word	0x20000c58
 800bb58:	42b40000 	.word	0x42b40000
 800bb5c:	20000c4c 	.word	0x20000c4c

0800bb60 <ParameterSetting>:
void ParameterSetting()
{
 800bb60:	b508      	push	{r3, lr}
	Load_Gain();
 800bb62:	f002 f8c3 	bl	800dcec <Load_Gain>
	Change_Gain();

}
 800bb66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Change_Gain();
 800bb6a:	f002 b999 	b.w	800dea0 <Change_Gain>
 800bb6e:	bf00      	nop

0800bb70 <GainTestRWall>:
	{
		TargetVelocity[BODY] = 300;
	}
}
void GainTestRWall()
{
 800bb70:	b508      	push	{r3, lr}
	IT_mode = EXPLORE;
 800bb72:	4b16      	ldr	r3, [pc, #88]	; (800bbcc <GainTestRWall+0x5c>)
 800bb74:	2206      	movs	r2, #6
 800bb76:	601a      	str	r2, [r3, #0]
	InitExplore();
 800bb78:	f7ff fe34 	bl	800b7e4 <InitExplore>
	InitPosition();
 800bb7c:	f7fd f93c 	bl	8008df8 <InitPosition>
	wall_init();
 800bb80:	f7fe fc96 	bl	800a4b0 <wall_init>
	TotalPulse[RIGHT] = 0;
 800bb84:	4b12      	ldr	r3, [pc, #72]	; (800bbd0 <GainTestRWall+0x60>)
 800bb86:	2500      	movs	r5, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800bb88:	2101      	movs	r1, #1
 800bb8a:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bb8c:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bb8e:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800bb90:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bb92:	f002 fb1f 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bb96:	2101      	movs	r1, #1
 800bb98:	2005      	movs	r0, #5
 800bb9a:	f002 fb1b 	bl	800e1d4 <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800bb9e:	4629      	mov	r1, r5
 800bba0:	2001      	movs	r0, #1
 800bba2:	f002 fb17 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bba6:	4629      	mov	r1, r5
 800bba8:	2002      	movs	r0, #2
 800bbaa:	f002 fb13 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800bbae:	2101      	movs	r1, #1
 800bbb0:	2003      	movs	r0, #3
 800bbb2:	f002 fb0f 	bl	800e1d4 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800bbb6:	4b07      	ldr	r3, [pc, #28]	; (800bbd4 <GainTestRWall+0x64>)
 800bbb8:	2400      	movs	r4, #0
	ChangeLED(1);
 800bbba:	2001      	movs	r0, #1
	ExploreVelocity=0;
 800bbbc:	601c      	str	r4, [r3, #0]
	ChangeLED(1);
 800bbbe:	f001 fedf 	bl	800d980 <ChangeLED>
 800bbc2:	4a05      	ldr	r2, [pc, #20]	; (800bbd8 <GainTestRWall+0x68>)
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800bbc4:	4623      	mov	r3, r4
 800bbc6:	6093      	str	r3, [r2, #8]
 800bbc8:	e7fd      	b.n	800bbc6 <GainTestRWall+0x56>
 800bbca:	bf00      	nop
 800bbcc:	20000c3c 	.word	0x20000c3c
 800bbd0:	20000c7c 	.word	0x20000c7c
 800bbd4:	20000d70 	.word	0x20000d70
 800bbd8:	20000c4c 	.word	0x20000c4c

0800bbdc <GainTestDWall>:

	}
}
void GainTestDWall()
{
 800bbdc:	b580      	push	{r7, lr}
	IT_mode = EXPLORE;
 800bbde:	4b25      	ldr	r3, [pc, #148]	; (800bc74 <GainTestDWall+0x98>)
 800bbe0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800bc84 <GainTestDWall+0xa8>
 800bbe4:	4c24      	ldr	r4, [pc, #144]	; (800bc78 <GainTestDWall+0x9c>)
	ExploreVelocity=0;
	ChangeLED(2);
	while(1)
	{
		TargetVelocity[BODY] = 0;
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800bbe6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800bc88 <GainTestDWall+0xac>
	IT_mode = EXPLORE;
 800bbea:	2206      	movs	r2, #6
{
 800bbec:	b086      	sub	sp, #24
	IT_mode = EXPLORE;
 800bbee:	601a      	str	r2, [r3, #0]
	InitExplore();
 800bbf0:	f7ff fdf8 	bl	800b7e4 <InitExplore>
	InitPosition();
 800bbf4:	f7fd f900 	bl	8008df8 <InitPosition>
	wall_init();
 800bbf8:	f7fe fc5a 	bl	800a4b0 <wall_init>
	TotalPulse[RIGHT] = 0;
 800bbfc:	4b1f      	ldr	r3, [pc, #124]	; (800bc7c <GainTestDWall+0xa0>)
 800bbfe:	2600      	movs	r6, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800bc00:	2101      	movs	r1, #1
 800bc02:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bc04:	605e      	str	r6, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bc06:	601e      	str	r6, [r3, #0]
	TotalPulse[BODY] = 0;
 800bc08:	609e      	str	r6, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bc0a:	f002 fae3 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bc0e:	2101      	movs	r1, #1
 800bc10:	2005      	movs	r0, #5
 800bc12:	f002 fadf 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 1);
 800bc16:	2101      	movs	r1, #1
 800bc18:	4608      	mov	r0, r1
 800bc1a:	f002 fadb 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bc1e:	4631      	mov	r1, r6
 800bc20:	2002      	movs	r0, #2
 800bc22:	f002 fad7 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bc26:	2003      	movs	r0, #3
 800bc28:	4631      	mov	r1, r6
 800bc2a:	f002 fad3 	bl	800e1d4 <PIDChangeFlag>
	ExploreVelocity=0;
 800bc2e:	4b14      	ldr	r3, [pc, #80]	; (800bc80 <GainTestDWall+0xa4>)
 800bc30:	2500      	movs	r5, #0
	ChangeLED(2);
 800bc32:	2002      	movs	r0, #2
	ExploreVelocity=0;
 800bc34:	601d      	str	r5, [r3, #0]
	ChangeLED(2);
 800bc36:	f001 fea3 	bl	800d980 <ChangeLED>
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800bc3a:	6820      	ldr	r0, [r4, #0]
		TargetVelocity[BODY] = 0;
 800bc3c:	f8c9 5008 	str.w	r5, [r9, #8]
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800bc40:	f7fc fbba 	bl	80083b8 <__aeabi_f2d>
 800bc44:	4606      	mov	r6, r0
 800bc46:	6860      	ldr	r0, [r4, #4]
 800bc48:	460f      	mov	r7, r1
 800bc4a:	f7fc fbb5 	bl	80083b8 <__aeabi_f2d>
 800bc4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc52:	68a0      	ldr	r0, [r4, #8]
 800bc54:	f7fc fbb0 	bl	80083b8 <__aeabi_f2d>
 800bc58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc5c:	68e0      	ldr	r0, [r4, #12]
 800bc5e:	f7fc fbab 	bl	80083b8 <__aeabi_f2d>
 800bc62:	4632      	mov	r2, r6
 800bc64:	e9cd 0100 	strd	r0, r1, [sp]
 800bc68:	463b      	mov	r3, r7
 800bc6a:	4640      	mov	r0, r8
 800bc6c:	f006 ff20 	bl	8012ab0 <iprintf>
 800bc70:	e7e3      	b.n	800bc3a <GainTestDWall+0x5e>
 800bc72:	bf00      	nop
 800bc74:	20000c3c 	.word	0x20000c3c
 800bc78:	20000cbc 	.word	0x20000cbc
 800bc7c:	20000c7c 	.word	0x20000c7c
 800bc80:	20000d70 	.word	0x20000d70
 800bc84:	20000c4c 	.word	0x20000c4c
 800bc88:	08016358 	.word	0x08016358

0800bc8c <GainTestAVelo>:
	}
}

void GainTestAVelo()
{
 800bc8c:	b508      	push	{r3, lr}
	IT_mode = EXPLORE;
 800bc8e:	4b18      	ldr	r3, [pc, #96]	; (800bcf0 <GainTestAVelo+0x64>)
 800bc90:	2206      	movs	r2, #6
 800bc92:	601a      	str	r2, [r3, #0]
	InitExplore();
 800bc94:	f7ff fda6 	bl	800b7e4 <InitExplore>
	InitPosition();
 800bc98:	f7fd f8ae 	bl	8008df8 <InitPosition>
	wall_init();
 800bc9c:	f7fe fc08 	bl	800a4b0 <wall_init>
	TotalPulse[RIGHT] = 0;
 800bca0:	4b14      	ldr	r3, [pc, #80]	; (800bcf4 <GainTestAVelo+0x68>)
 800bca2:	2500      	movs	r5, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800bca4:	2101      	movs	r1, #1
 800bca6:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bca8:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bcaa:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800bcac:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bcae:	f002 fa91 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bcb2:	2101      	movs	r1, #1
 800bcb4:	2005      	movs	r0, #5
 800bcb6:	f002 fa8d 	bl	800e1d4 <PIDChangeFlag>
	//PIDChangeFlagStraight(A_VELO_PID);
	PIDChangeFlag(A_VELO_PID, 1);
 800bcba:	4628      	mov	r0, r5
 800bcbc:	2101      	movs	r1, #1
 800bcbe:	f002 fa89 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	2001      	movs	r0, #1
 800bcc6:	f002 fa85 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bcca:	4629      	mov	r1, r5
 800bccc:	2002      	movs	r0, #2
 800bcce:	f002 fa81 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	2003      	movs	r0, #3
 800bcd6:	f002 fa7d 	bl	800e1d4 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800bcda:	4b07      	ldr	r3, [pc, #28]	; (800bcf8 <GainTestAVelo+0x6c>)
 800bcdc:	2400      	movs	r4, #0
	ChangeLED(5);
 800bcde:	2005      	movs	r0, #5
	ExploreVelocity=0;
 800bce0:	601c      	str	r4, [r3, #0]
	ChangeLED(5);
 800bce2:	f001 fe4d 	bl	800d980 <ChangeLED>
 800bce6:	4a05      	ldr	r2, [pc, #20]	; (800bcfc <GainTestAVelo+0x70>)
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800bce8:	4623      	mov	r3, r4
 800bcea:	6093      	str	r3, [r2, #8]
 800bcec:	e7fd      	b.n	800bcea <GainTestAVelo+0x5e>
 800bcee:	bf00      	nop
 800bcf0:	20000c3c 	.word	0x20000c3c
 800bcf4:	20000c7c 	.word	0x20000c7c
 800bcf8:	20000d70 	.word	0x20000d70
 800bcfc:	20000c4c 	.word	0x20000c4c

0800bd00 <WritingFree>:
		//printf("%f, %f\r\n", AngularV, Angle);

	}
}
void WritingFree()
{
 800bd00:	b508      	push	{r3, lr}
	IT_mode = WRITINGFREE;
 800bd02:	4b1a      	ldr	r3, [pc, #104]	; (800bd6c <WritingFree+0x6c>)
 800bd04:	2507      	movs	r5, #7
 800bd06:	601d      	str	r5, [r3, #0]

	InitExplore();
 800bd08:	f7ff fd6c 	bl	800b7e4 <InitExplore>

	printf("3\r\n");
 800bd0c:	4818      	ldr	r0, [pc, #96]	; (800bd70 <WritingFree+0x70>)
 800bd0e:	f006 ff57 	bl	8012bc0 <puts>

	InitPosition();
 800bd12:	f7fd f871 	bl	8008df8 <InitPosition>

	wall_init();
 800bd16:	f7fe fbcb 	bl	800a4b0 <wall_init>
	printf("4\r\n");
 800bd1a:	4816      	ldr	r0, [pc, #88]	; (800bd74 <WritingFree+0x74>)
 800bd1c:	f006 ff50 	bl	8012bc0 <puts>

	TotalPulse[RIGHT] = 0;
 800bd20:	4b15      	ldr	r3, [pc, #84]	; (800bd78 <WritingFree+0x78>)
 800bd22:	2400      	movs	r4, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800bd24:	2101      	movs	r1, #1
 800bd26:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bd28:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bd2a:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800bd2c:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bd2e:	f002 fa51 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bd32:	2101      	movs	r1, #1
 800bd34:	2005      	movs	r0, #5
 800bd36:	f002 fa4d 	bl	800e1d4 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	2001      	movs	r0, #1
 800bd3e:	f002 fa49 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bd42:	4621      	mov	r1, r4
 800bd44:	2002      	movs	r0, #2
 800bd46:	f002 fa45 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bd4a:	2003      	movs	r0, #3
 800bd4c:	4621      	mov	r1, r4
 800bd4e:	f002 fa41 	bl	800e1d4 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800bd52:	4b0a      	ldr	r3, [pc, #40]	; (800bd7c <WritingFree+0x7c>)
 800bd54:	2200      	movs	r2, #0
	ChangeLED(7);
 800bd56:	4628      	mov	r0, r5
	ExploreVelocity=0;
 800bd58:	601a      	str	r2, [r3, #0]
	ChangeLED(7);
 800bd5a:	f001 fe11 	bl	800d980 <ChangeLED>


	while(1)
	{
		Motor_Switch( 500, 500 );
 800bd5e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bd62:	4608      	mov	r0, r1
 800bd64:	f001 fe98 	bl	800da98 <Motor_Switch>
 800bd68:	e7f9      	b.n	800bd5e <WritingFree+0x5e>
 800bd6a:	bf00      	nop
 800bd6c:	20000c3c 	.word	0x20000c3c
 800bd70:	080163c0 	.word	0x080163c0
 800bd74:	080163c4 	.word	0x080163c4
 800bd78:	20000c7c 	.word	0x20000c7c
 800bd7c:	20000d70 	.word	0x20000d70

0800bd80 <FastestRun>:
	}
	//探索の場合は迷路とステータスの準備
}

void FastestRun()
{
 800bd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd84:	ed2d 8b02 	vpush	{d8}
	IT_mode = EXPLORE;
 800bd88:	4bb4      	ldr	r3, [pc, #720]	; (800c05c <FastestRun+0x2dc>)
	InitPosition();


	wall_init();

	TotalPulse[RIGHT] = 0;
 800bd8a:	4eb5      	ldr	r6, [pc, #724]	; (800c060 <FastestRun+0x2e0>)
{
 800bd8c:	b085      	sub	sp, #20
	IT_mode = EXPLORE;
 800bd8e:	2206      	movs	r2, #6
	HAL_Delay(100);
 800bd90:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800bd92:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800bd94:	f002 fbd4 	bl	800e540 <HAL_Delay>
	int8_t mode=1;
 800bd98:	aa04      	add	r2, sp, #16
 800bd9a:	2401      	movs	r4, #1
 800bd9c:	f802 4d02 	strb.w	r4, [r2, #-2]!
	  ModeSelect( 1, 2, &mode);
 800bda0:	2102      	movs	r1, #2
 800bda2:	4620      	mov	r0, r4
 800bda4:	f002 faf0 	bl	800e388 <ModeSelect>
	  Signal( mode );
 800bda8:	f99d 000e 	ldrsb.w	r0, [sp, #14]
 800bdac:	f002 fa80 	bl	800e2b0 <Signal>
		HAL_Delay(100);
 800bdb0:	2064      	movs	r0, #100	; 0x64
 800bdb2:	f002 fbc5 	bl	800e540 <HAL_Delay>
		  int8_t mode2=1;
 800bdb6:	aa04      	add	r2, sp, #16
		  ModeSelect( 1, 4, &mode2);
 800bdb8:	2104      	movs	r1, #4
		  int8_t mode2=1;
 800bdba:	f802 4d01 	strb.w	r4, [r2, #-1]!
		  ModeSelect( 1, 4, &mode2);
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f002 fae2 	bl	800e388 <ModeSelect>
		  Signal( mode2 );
 800bdc4:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800bdc8:	f002 fa72 	bl	800e2b0 <Signal>
	TotalPulse[RIGHT] = 0;
 800bdcc:	2500      	movs	r5, #0
		  PhotoSwitch();
 800bdce:	f002 fab1 	bl	800e334 <PhotoSwitch>
	InitFastest();
 800bdd2:	f7ff fdb7 	bl	800b944 <InitFastest>
	InitPosition();
 800bdd6:	f7fd f80f 	bl	8008df8 <InitPosition>
	wall_init();
 800bdda:	f7fe fb69 	bl	800a4b0 <wall_init>
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800bdde:	4621      	mov	r1, r4
 800bde0:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bde2:	6075      	str	r5, [r6, #4]
	TotalPulse[LEFT] = 0;
 800bde4:	6035      	str	r5, [r6, #0]
	TotalPulse[BODY] = 0;
 800bde6:	60b5      	str	r5, [r6, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bde8:	f002 f9f4 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bdec:	4621      	mov	r1, r4
 800bdee:	2005      	movs	r0, #5
 800bdf0:	f002 f9f0 	bl	800e1d4 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800bdf4:	68b1      	ldr	r1, [r6, #8]
 800bdf6:	489b      	ldr	r0, [pc, #620]	; (800c064 <FastestRun+0x2e4>)
 800bdf8:	6832      	ldr	r2, [r6, #0]
 800bdfa:	6873      	ldr	r3, [r6, #4]
 800bdfc:	f006 fe58 	bl	8012ab0 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800be00:	4629      	mov	r1, r5
 800be02:	4620      	mov	r0, r4
 800be04:	f002 f9e6 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800be08:	4629      	mov	r1, r5
 800be0a:	2002      	movs	r0, #2
 800be0c:	f002 f9e2 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800be10:	4629      	mov	r1, r5
 800be12:	2003      	movs	r0, #3
 800be14:	f002 f9de 	bl	800e1d4 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode = 'T';
	if(mode == 1)
 800be18:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 800be1c:	42a3      	cmp	r3, r4
 800be1e:	f000 80fa 	beq.w	800c016 <FastestRun+0x296>
		ExploreVelocity = 400;
		turn_mode = 'T';
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800be22:	2b02      	cmp	r3, #2
 800be24:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 800c0e0 <FastestRun+0x360>
 800be28:	bf14      	ite	ne
 800be2a:	f04f 0a54 	movne.w	sl, #84	; 0x54
 800be2e:	f04f 0a53 	moveq.w	sl, #83	; 0x53
	}

	switch(mode2)
 800be32:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 800be36:	3b01      	subs	r3, #1
 800be38:	2b03      	cmp	r3, #3
 800be3a:	d815      	bhi.n	800be68 <FastestRun+0xe8>
 800be3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800be40:	00fe0158 	.word	0x00fe0158
 800be44:	000400f3 	.word	0x000400f3
		Sla.Theta1 = 30;
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
 800be48:	4a87      	ldr	r2, [pc, #540]	; (800c068 <FastestRun+0x2e8>)
		Sla.Pre = 3;
 800be4a:	4b88      	ldr	r3, [pc, #544]	; (800c06c <FastestRun+0x2ec>)
		ExploreVelocity=300;
 800be4c:	f8c8 2000 	str.w	r2, [r8]
		Sla.Pre = 3;
 800be50:	4a87      	ldr	r2, [pc, #540]	; (800c070 <FastestRun+0x2f0>)
 800be52:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800be54:	4887      	ldr	r0, [pc, #540]	; (800c074 <FastestRun+0x2f4>)
		Sla.Theta1 = 30;
		Sla.Theta2 = 60;
 800be56:	4988      	ldr	r1, [pc, #544]	; (800c078 <FastestRun+0x2f8>)
		Sla.Fol = 5;
 800be58:	4a88      	ldr	r2, [pc, #544]	; (800c07c <FastestRun+0x2fc>)
 800be5a:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.117;
 800be5c:	6098      	str	r0, [r3, #8]
		Sla.Theta3 = 90;
 800be5e:	4a88      	ldr	r2, [pc, #544]	; (800c080 <FastestRun+0x300>)
		Sla.Theta1 = 30;
 800be60:	4888      	ldr	r0, [pc, #544]	; (800c084 <FastestRun+0x304>)
 800be62:	6118      	str	r0, [r3, #16]
		Sla.Theta2 = 60;
 800be64:	6159      	str	r1, [r3, #20]
		Sla.Theta3 = 90;
 800be66:	619a      	str	r2, [r3, #24]
		break;

	}

	ChangeLED(4);
 800be68:	2004      	movs	r0, #4
 800be6a:	f001 fd89 	bl	800d980 <ChangeLED>

	VelocityMax = false;
 800be6e:	4b86      	ldr	r3, [pc, #536]	; (800c088 <FastestRun+0x308>)

	SearchOrFast = 1;
 800be70:	f8df 9270 	ldr.w	r9, [pc, #624]	; 800c0e4 <FastestRun+0x364>
//			HAL_Delay(300);
//			break;
//	}
	//shiftPos();

	TargetVelocity[BODY] = 0;
 800be74:	ed9f 8a85 	vldr	s16, [pc, #532]	; 800c08c <FastestRun+0x30c>
 800be78:	4a85      	ldr	r2, [pc, #532]	; (800c090 <FastestRun+0x310>)
	Calc = SearchOrFast;
 800be7a:	4f86      	ldr	r7, [pc, #536]	; (800c094 <FastestRun+0x314>)
	Acceleration = 0;
 800be7c:	4d86      	ldr	r5, [pc, #536]	; (800c098 <FastestRun+0x318>)
	TargetAngularV = 0;
 800be7e:	4887      	ldr	r0, [pc, #540]	; (800c09c <FastestRun+0x31c>)
	TargetAngle = 0;
 800be80:	4987      	ldr	r1, [pc, #540]	; (800c0a0 <FastestRun+0x320>)
        	case back:
        		//Uターンして直進.加速できる
        		Calc = 1;//マップ更新したくないときは1を代入。
        		GoBack();
        		Calc = SearchOrFast;
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800be82:	eddf 8a88 	vldr	s17, [pc, #544]	; 800c0a4 <FastestRun+0x324>
 800be86:	f8df b260 	ldr.w	fp, [pc, #608]	; 800c0e8 <FastestRun+0x368>
	VelocityMax = false;
 800be8a:	2400      	movs	r4, #0
 800be8c:	701c      	strb	r4, [r3, #0]
	SearchOrFast = 1;
 800be8e:	2301      	movs	r3, #1
 800be90:	f8c9 3000 	str.w	r3, [r9]
	Calc = SearchOrFast;
 800be94:	f8d9 3000 	ldr.w	r3, [r9]
 800be98:	603b      	str	r3, [r7, #0]
	Angle = 0;
 800be9a:	4b83      	ldr	r3, [pc, #524]	; (800c0a8 <FastestRun+0x328>)
	TargetVelocity[BODY] = 0;
 800be9c:	ed82 8a02 	vstr	s16, [r2, #8]
	goal_edge_num = GOAL_SIZE_X;
 800bea0:	4a82      	ldr	r2, [pc, #520]	; (800c0ac <FastestRun+0x32c>)
	Acceleration = 0;
 800bea2:	ed85 8a00 	vstr	s16, [r5]
	goal_edge_num = GOAL_SIZE_X;
 800bea6:	2602      	movs	r6, #2
	TargetAngularV = 0;
 800bea8:	ed80 8a00 	vstr	s16, [r0]
	PIDReset(L_VELO_PID);
 800beac:	2004      	movs	r0, #4
	goal_edge_num = GOAL_SIZE_X;
 800beae:	7016      	strb	r6, [r2, #0]
	TargetAngle = 0;
 800beb0:	ed81 8a00 	vstr	s16, [r1]
	Angle = 0;
 800beb4:	ed83 8a00 	vstr	s16, [r3]
	PIDReset(L_VELO_PID);
 800beb8:	f002 f994 	bl	800e1e4 <PIDReset>
	PIDReset(R_VELO_PID);
 800bebc:	2005      	movs	r0, #5
 800bebe:	f002 f991 	bl	800e1e4 <PIDReset>
	PIDReset(A_VELO_PID);
 800bec2:	4620      	mov	r0, r4
 800bec4:	f002 f98e 	bl	800e1e4 <PIDReset>
	PIDReset(L_WALL_PID);
 800bec8:	4630      	mov	r0, r6
 800beca:	f002 f98b 	bl	800e1e4 <PIDReset>
	PIDReset(R_WALL_PID);
 800bece:	2003      	movs	r0, #3
 800bed0:	f002 f988 	bl	800e1e4 <PIDReset>
	initSearchData(&my_map, &my_mouse);
 800bed4:	4976      	ldr	r1, [pc, #472]	; (800c0b0 <FastestRun+0x330>)
 800bed6:	4877      	ldr	r0, [pc, #476]	; (800c0b4 <FastestRun+0x334>)
 800bed8:	460d      	mov	r5, r1
 800beda:	f001 f8d7 	bl	800d08c <initSearchData>
	flashCopyNodesToRam(); //existenceだけ
 800bede:	f7fe fc89 	bl	800a7f4 <flashCopyNodesToRam>
	updateAllNodeWeight(&my_map, GOAL_X, GOAL_Y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x03);
 800bee2:	2207      	movs	r2, #7
 800bee4:	2103      	movs	r1, #3
 800bee6:	4633      	mov	r3, r6
 800bee8:	9600      	str	r6, [sp, #0]
 800beea:	9101      	str	r1, [sp, #4]
 800beec:	4871      	ldr	r0, [pc, #452]	; (800c0b4 <FastestRun+0x334>)
 800beee:	4611      	mov	r1, r2
 800bef0:	f7fe ff6e 	bl	800add0 <updateAllNodeWeight>
	HAL_Delay(200);
 800bef4:	20c8      	movs	r0, #200	; 0xc8
 800bef6:	f002 fb23 	bl	800e540 <HAL_Delay>
	Accel(61.5, ExploreVelocity);
 800befa:	edd8 0a00 	vldr	s1, [r8]
 800befe:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 800c0b8 <FastestRun+0x338>
        shiftState(&my_mouse);
 800bf02:	462e      	mov	r6, r5
	Accel(61.5, ExploreVelocity);
 800bf04:	f7fd fca4 	bl	8009850 <Accel>
    while(! ((my_mouse.goal_lesser.x <= my_mouse.next.pos.x && my_mouse.next.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.next.pos.y && my_mouse.next.pos.y <= my_mouse.goal_larger.y)))
 800bf08:	7d2b      	ldrb	r3, [r5, #20]
 800bf0a:	782a      	ldrb	r2, [r5, #0]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d809      	bhi.n	800bf24 <FastestRun+0x1a4>
 800bf10:	78aa      	ldrb	r2, [r5, #2]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d306      	bcc.n	800bf24 <FastestRun+0x1a4>
 800bf16:	7d6b      	ldrb	r3, [r5, #21]
 800bf18:	786a      	ldrb	r2, [r5, #1]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d802      	bhi.n	800bf24 <FastestRun+0x1a4>
 800bf1e:	78ea      	ldrb	r2, [r5, #3]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d260      	bcs.n	800bfe6 <FastestRun+0x266>
        shiftState(&my_mouse);
 800bf24:	4630      	mov	r0, r6
 800bf26:	f7ff fc51 	bl	800b7cc <shiftState>
        my_mouse.next.node = getNextNode(&my_map, my_mouse.now.car, my_mouse.now.node, 0x03);//これらの引数のどれかがいけない. 迷路、方角、ノードポインタ. 一発目の、ノードの重みがfffなのはなぜ？
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	692a      	ldr	r2, [r5, #16]
 800bf2e:	7aa9      	ldrb	r1, [r5, #10]
 800bf30:	4860      	ldr	r0, [pc, #384]	; (800c0b4 <FastestRun+0x334>)
 800bf32:	f7ff f86f 	bl	800b014 <getNextNode>
        getNextState(&(my_mouse.now),&(my_mouse.next),my_mouse.next.node);
 800bf36:	4961      	ldr	r1, [pc, #388]	; (800c0bc <FastestRun+0x33c>)
        my_mouse.next.node = getNextNode(&my_map, my_mouse.now.car, my_mouse.now.node, 0x03);//これらの引数のどれかがいけない. 迷路、方角、ノードポインタ. 一発目の、ノードの重みがfffなのはなぜ？
 800bf38:	61e8      	str	r0, [r5, #28]
 800bf3a:	4602      	mov	r2, r0
        getNextState(&(my_mouse.now),&(my_mouse.next),my_mouse.next.node);
 800bf3c:	f1a1 000c 	sub.w	r0, r1, #12
 800bf40:	f7ff fad6 	bl	800b4f0 <getNextState>
        	switch(my_mouse.next.dir)
 800bf44:	7deb      	ldrb	r3, [r5, #23]
        AddVelocity = 0;
 800bf46:	ed8b 8a00 	vstr	s16, [fp]
        	switch(my_mouse.next.dir)
 800bf4a:	2b05      	cmp	r3, #5
 800bf4c:	d80a      	bhi.n	800bf64 <FastestRun+0x1e4>
 800bf4e:	e8df f003 	tbb	[pc, r3]
 800bf52:	400b      	.short	0x400b
 800bf54:	03162135 	.word	0x03162135
        		Calc = SearchOrFast;
        		TurnLeft(turn_mode);
        		break;
        	case left:
        		//左旋回
        		Calc = SearchOrFast;
 800bf58:	f8d9 3000 	ldr.w	r3, [r9]
 800bf5c:	603b      	str	r3, [r7, #0]
        		TurnLeft(turn_mode);
 800bf5e:	4650      	mov	r0, sl
 800bf60:	f7fd ff14 	bl	8009d8c <TurnLeft>
        		break;
        	}
        cnt++;
 800bf64:	3401      	adds	r4, #1
 800bf66:	e7cf      	b.n	800bf08 <FastestRun+0x188>
        		Calc = SearchOrFast;
 800bf68:	f8d9 3000 	ldr.w	r3, [r9]
        		GoStraight(90, ExploreVelocity , 0);
 800bf6c:	edd8 0a00 	vldr	s1, [r8]
        		Calc = SearchOrFast;
 800bf70:	603b      	str	r3, [r7, #0]
        		GoStraight(90, ExploreVelocity , 0);
 800bf72:	2000      	movs	r0, #0
 800bf74:	eeb0 0a68 	vmov.f32	s0, s17
 800bf78:	f7fd fd9e 	bl	8009ab8 <GoStraight>
        		break;
 800bf7c:	e7f2      	b.n	800bf64 <FastestRun+0x1e4>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800bf7e:	2301      	movs	r3, #1
 800bf80:	603b      	str	r3, [r7, #0]
        		GoBack();
 800bf82:	f7fd ff3f 	bl	8009e04 <GoBack>
        		Calc = SearchOrFast;
 800bf86:	f8d9 3000 	ldr.w	r3, [r9]
 800bf8a:	603b      	str	r3, [r7, #0]
        		TurnLeft(turn_mode);
 800bf8c:	4650      	mov	r0, sl
 800bf8e:	f7fd fefd 	bl	8009d8c <TurnLeft>
        		break;
 800bf92:	e7e7      	b.n	800bf64 <FastestRun+0x1e4>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800bf94:	2301      	movs	r3, #1
 800bf96:	603b      	str	r3, [r7, #0]
        		GoBack();
 800bf98:	f7fd ff34 	bl	8009e04 <GoBack>
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800bf9c:	eddb 7a00 	vldr	s15, [fp]
        		Calc = SearchOrFast;
 800bfa0:	f8d9 3000 	ldr.w	r3, [r9]
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800bfa4:	edd8 0a00 	vldr	s1, [r8]
        		Calc = SearchOrFast;
 800bfa8:	603b      	str	r3, [r7, #0]
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800bfaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfae:	eeb0 0a68 	vmov.f32	s0, s17
 800bfb2:	ee17 0a90 	vmov	r0, s15
 800bfb6:	f7fd fd7f 	bl	8009ab8 <GoStraight>
        		break;
 800bfba:	e7d3      	b.n	800bf64 <FastestRun+0x1e4>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	603b      	str	r3, [r7, #0]
        		GoBack();
 800bfc0:	f7fd ff20 	bl	8009e04 <GoBack>
        		Calc = SearchOrFast;
 800bfc4:	f8d9 3000 	ldr.w	r3, [r9]
 800bfc8:	603b      	str	r3, [r7, #0]
        		TurnRight(turn_mode);
 800bfca:	4650      	mov	r0, sl
 800bfcc:	f7fd fea0 	bl	8009d10 <TurnRight>
        		break;
 800bfd0:	e7c8      	b.n	800bf64 <FastestRun+0x1e4>
        		ChangeLED(1);
 800bfd2:	2001      	movs	r0, #1
 800bfd4:	f001 fcd4 	bl	800d980 <ChangeLED>
        		Calc = SearchOrFast;
 800bfd8:	f8d9 3000 	ldr.w	r3, [r9]
 800bfdc:	603b      	str	r3, [r7, #0]
        		TurnRight(turn_mode);
 800bfde:	4650      	mov	r0, sl
 800bfe0:	f7fd fe96 	bl	8009d10 <TurnRight>
        		break;
 800bfe4:	e7be      	b.n	800bf64 <FastestRun+0x1e4>
//    outputDataToFile(maze);

	//fast_run( X_GOAL_LESSER, Y_GOAL_LESSER,X_GOAL_LARGER,Y_GOAL_LARGER, turn_mode,0x03);

	//ゴールしたら減速して、停止。
	Decel(45,0);
 800bfe6:	eddf 0a29 	vldr	s1, [pc, #164]	; 800c08c <FastestRun+0x30c>
 800bfea:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800c0c0 <FastestRun+0x340>
 800bfee:	4d31      	ldr	r5, [pc, #196]	; (800c0b4 <FastestRun+0x334>)
	//終了合図
	Signal(7);

	while(1)
	{
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",cnt, my_map.RawNode[0][1].weight);
 800bff0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800c0ec <FastestRun+0x36c>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800bff4:	4f33      	ldr	r7, [pc, #204]	; (800c0c4 <FastestRun+0x344>)
	Decel(45,0);
 800bff6:	f7fd fcaf 	bl	8009958 <Decel>
	Signal(7);
 800bffa:	2007      	movs	r0, #7
 800bffc:	f002 f958 	bl	800e2b0 <Signal>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800c000:	462e      	mov	r6, r5
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",cnt, my_map.RawNode[0][1].weight);
 800c002:	4621      	mov	r1, r4
 800c004:	896a      	ldrh	r2, [r5, #10]
 800c006:	4640      	mov	r0, r8
 800c008:	f006 fd52 	bl	8012ab0 <iprintf>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800c00c:	4639      	mov	r1, r7
 800c00e:	4630      	mov	r0, r6
 800c010:	f7fe fc3a 	bl	800a888 <printAllWeight>
 800c014:	e7f5      	b.n	800c002 <FastestRun+0x282>
		ExploreVelocity = 400;
 800c016:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800c0e0 <FastestRun+0x360>
 800c01a:	4b2b      	ldr	r3, [pc, #172]	; (800c0c8 <FastestRun+0x348>)
 800c01c:	f8c8 3000 	str.w	r3, [r8]
		turn_mode = 'T';
 800c020:	f04f 0a54 	mov.w	sl, #84	; 0x54
 800c024:	e705      	b.n	800be32 <FastestRun+0xb2>
		ExploreVelocity=180;
 800c026:	4a29      	ldr	r2, [pc, #164]	; (800c0cc <FastestRun+0x34c>)
		Sla.Pre = 2;
 800c028:	4b10      	ldr	r3, [pc, #64]	; (800c06c <FastestRun+0x2ec>)
		ExploreVelocity=180;
 800c02a:	f8c8 2000 	str.w	r2, [r8]
		Sla.Pre = 2;
 800c02e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c032:	601a      	str	r2, [r3, #0]
		Sla.Alpha = 0.04;
 800c034:	4826      	ldr	r0, [pc, #152]	; (800c0d0 <FastestRun+0x350>)
		Sla.Theta2 = 60;
 800c036:	4910      	ldr	r1, [pc, #64]	; (800c078 <FastestRun+0x2f8>)
		Sla.Fol = 3.5;
 800c038:	4a26      	ldr	r2, [pc, #152]	; (800c0d4 <FastestRun+0x354>)
 800c03a:	e70e      	b.n	800be5a <FastestRun+0xda>
		Sla.Pre = 5;
 800c03c:	4b0b      	ldr	r3, [pc, #44]	; (800c06c <FastestRun+0x2ec>)
		Sla.Alpha = 0.0273;
 800c03e:	4a26      	ldr	r2, [pc, #152]	; (800c0d8 <FastestRun+0x358>)
		ExploreVelocity=135;
 800c040:	4926      	ldr	r1, [pc, #152]	; (800c0dc <FastestRun+0x35c>)
		Sla.Alpha = 0.0273;
 800c042:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c044:	4a0f      	ldr	r2, [pc, #60]	; (800c084 <FastestRun+0x304>)
		Sla.Theta2 = 60;
 800c046:	480c      	ldr	r0, [pc, #48]	; (800c078 <FastestRun+0x2f8>)
		ExploreVelocity=135;
 800c048:	f8c8 1000 	str.w	r1, [r8]
		Sla.Theta1 = 30;
 800c04c:	611a      	str	r2, [r3, #16]
		Sla.Theta3 = 90;
 800c04e:	490c      	ldr	r1, [pc, #48]	; (800c080 <FastestRun+0x300>)
		Sla.Pre = 5;
 800c050:	4a0a      	ldr	r2, [pc, #40]	; (800c07c <FastestRun+0x2fc>)
		Sla.Theta2 = 60;
 800c052:	6158      	str	r0, [r3, #20]
		Sla.Theta3 = 90;
 800c054:	6199      	str	r1, [r3, #24]
		Sla.Pre = 5;
 800c056:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800c058:	605a      	str	r2, [r3, #4]
		break;
 800c05a:	e705      	b.n	800be68 <FastestRun+0xe8>
 800c05c:	20000c3c 	.word	0x20000c3c
 800c060:	20000c7c 	.word	0x20000c7c
 800c064:	080162a4 	.word	0x080162a4
 800c068:	43960000 	.word	0x43960000
 800c06c:	20000c94 	.word	0x20000c94
 800c070:	40400000 	.word	0x40400000
 800c074:	3def9db2 	.word	0x3def9db2
 800c078:	42700000 	.word	0x42700000
 800c07c:	40a00000 	.word	0x40a00000
 800c080:	42b40000 	.word	0x42b40000
 800c084:	41f00000 	.word	0x41f00000
 800c088:	20000d6e 	.word	0x20000d6e
 800c08c:	00000000 	.word	0x00000000
 800c090:	20000c4c 	.word	0x20000c4c
 800c094:	20000eec 	.word	0x20000eec
 800c098:	20000230 	.word	0x20000230
 800c09c:	20000c5c 	.word	0x20000c5c
 800c0a0:	20000244 	.word	0x20000244
 800c0a4:	42b40000 	.word	0x42b40000
 800c0a8:	20000234 	.word	0x20000234
 800c0ac:	20000c78 	.word	0x20000c78
 800c0b0:	200004ec 	.word	0x200004ec
 800c0b4:	20000698 	.word	0x20000698
 800c0b8:	42760000 	.word	0x42760000
 800c0bc:	20000500 	.word	0x20000500
 800c0c0:	42340000 	.word	0x42340000
 800c0c4:	200004f4 	.word	0x200004f4
 800c0c8:	43c80000 	.word	0x43c80000
 800c0cc:	43340000 	.word	0x43340000
 800c0d0:	3d23d70a 	.word	0x3d23d70a
 800c0d4:	40600000 	.word	0x40600000
 800c0d8:	3cdfa440 	.word	0x3cdfa440
 800c0dc:	43070000 	.word	0x43070000
 800c0e0:	20000d70 	.word	0x20000d70
 800c0e4:	20000ee8 	.word	0x20000ee8
 800c0e8:	20000c58 	.word	0x20000c58
 800c0ec:	08016304 	.word	0x08016304
		Sla.Pre = 7;//9;
 800c0f0:	4b07      	ldr	r3, [pc, #28]	; (800c110 <FastestRun+0x390>)
		ExploreVelocity=90;
 800c0f2:	4a08      	ldr	r2, [pc, #32]	; (800c114 <FastestRun+0x394>)
 800c0f4:	f8c8 2000 	str.w	r2, [r8]
		Sla.Theta3 = 90;
 800c0f8:	619a      	str	r2, [r3, #24]
		Sla.Pre = 7;//9;
 800c0fa:	4a07      	ldr	r2, [pc, #28]	; (800c118 <FastestRun+0x398>)
 800c0fc:	601a      	str	r2, [r3, #0]
		Sla.Fol = 11;//13;
 800c0fe:	4a07      	ldr	r2, [pc, #28]	; (800c11c <FastestRun+0x39c>)
		Sla.Alpha = 0.014;
 800c100:	4807      	ldr	r0, [pc, #28]	; (800c120 <FastestRun+0x3a0>)
		Sla.Theta2 = 60;
 800c102:	4908      	ldr	r1, [pc, #32]	; (800c124 <FastestRun+0x3a4>)
		Sla.Fol = 11;//13;
 800c104:	605a      	str	r2, [r3, #4]
		Sla.Theta1 = 30;
 800c106:	4a08      	ldr	r2, [pc, #32]	; (800c128 <FastestRun+0x3a8>)
		Sla.Alpha = 0.014;
 800c108:	6098      	str	r0, [r3, #8]
		Sla.Theta1 = 30;
 800c10a:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c10c:	6159      	str	r1, [r3, #20]
		break;
 800c10e:	e6ab      	b.n	800be68 <FastestRun+0xe8>
 800c110:	20000c94 	.word	0x20000c94
 800c114:	42b40000 	.word	0x42b40000
 800c118:	40e00000 	.word	0x40e00000
 800c11c:	41300000 	.word	0x41300000
 800c120:	3c656042 	.word	0x3c656042
 800c124:	42700000 	.word	0x42700000
 800c128:	41f00000 	.word	0x41f00000

0800c12c <Explore>:
	}
}
void Explore()
{
 800c12c:	b5f0      	push	{r4, r5, r6, r7, lr}
	IT_mode = EXPLORE;
 800c12e:	4b71      	ldr	r3, [pc, #452]	; (800c2f4 <Explore+0x1c8>)
{
 800c130:	b083      	sub	sp, #12
	IT_mode = EXPLORE;
 800c132:	2206      	movs	r2, #6
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800c134:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800c136:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800c138:	f002 fa02 	bl	800e540 <HAL_Delay>
	int8_t mode=1;
 800c13c:	aa02      	add	r2, sp, #8
 800c13e:	2401      	movs	r4, #1
 800c140:	f802 4d02 	strb.w	r4, [r2, #-2]!
	ModeSelect( 1, 2, &mode);
 800c144:	2102      	movs	r1, #2
 800c146:	4620      	mov	r0, r4
 800c148:	f002 f91e 	bl	800e388 <ModeSelect>
	Signal( mode );
 800c14c:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 800c150:	f002 f8ae 	bl	800e2b0 <Signal>
	HAL_Delay(100);
 800c154:	2064      	movs	r0, #100	; 0x64
 800c156:	f002 f9f3 	bl	800e540 <HAL_Delay>

	int8_t mode2=1;
 800c15a:	aa02      	add	r2, sp, #8
	ModeSelect( 1, 4, &mode2);
 800c15c:	2104      	movs	r1, #4
	int8_t mode2=1;
 800c15e:	f802 4d01 	strb.w	r4, [r2, #-1]!
	ModeSelect( 1, 4, &mode2);
 800c162:	4620      	mov	r0, r4
 800c164:	f002 f910 	bl	800e388 <ModeSelect>
	Signal( mode2 );
 800c168:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800c16c:	f002 f8a0 	bl	800e2b0 <Signal>
	PhotoSwitch();
 800c170:	f002 f8e0 	bl	800e334 <PhotoSwitch>
	//printf("test\r\n");
	InitExplore();
 800c174:	f7ff fb36 	bl	800b7e4 <InitExplore>
	InitPosition();
 800c178:	f7fc fe3e 	bl	8008df8 <InitPosition>
	printf("旧式の壁初期化\r\n");
 800c17c:	485e      	ldr	r0, [pc, #376]	; (800c2f8 <Explore+0x1cc>)
 800c17e:	f006 fd1f 	bl	8012bc0 <puts>
	wall_init();
 800c182:	f7fe f995 	bl	800a4b0 <wall_init>

	printf("色々セット\r\n");
 800c186:	485d      	ldr	r0, [pc, #372]	; (800c2fc <Explore+0x1d0>)
 800c188:	f006 fd1a 	bl	8012bc0 <puts>
	TotalPulse[RIGHT] = 0;
 800c18c:	4b5c      	ldr	r3, [pc, #368]	; (800c300 <Explore+0x1d4>)
 800c18e:	2500      	movs	r5, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800c190:	4621      	mov	r1, r4
 800c192:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800c194:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c196:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800c198:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800c19a:	f002 f81b 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c19e:	4621      	mov	r1, r4
 800c1a0:	2005      	movs	r0, #5
 800c1a2:	f002 f817 	bl	800e1d4 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f002 f813 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	2002      	movs	r0, #2
 800c1b2:	f002 f80f 	bl	800e1d4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	2003      	movs	r0, #3
 800c1ba:	f002 f80b 	bl	800e1d4 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	ChangeLED(2);
 800c1be:	2002      	movs	r0, #2
 800c1c0:	f001 fbde 	bl	800d980 <ChangeLED>

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode = 'T';
	if(mode == 1)
 800c1c4:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 800c1c8:	42a3      	cmp	r3, r4
 800c1ca:	d06a      	beq.n	800c2a2 <Explore+0x176>
		turn_mode = 'T';
		ExploreVelocity=300;
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	4c4d      	ldr	r4, [pc, #308]	; (800c304 <Explore+0x1d8>)
 800c1d0:	bf14      	ite	ne
 800c1d2:	2654      	movne	r6, #84	; 0x54
 800c1d4:	2653      	moveq	r6, #83	; 0x53
	}

	switch(mode2)
 800c1d6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	2b03      	cmp	r3, #3
 800c1de:	d812      	bhi.n	800c206 <Explore+0xda>
 800c1e0:	e8df f003 	tbb	[pc, r3]
 800c1e4:	02646f79 	.word	0x02646f79
		Sla.Theta1 = 30;
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
 800c1e8:	4a47      	ldr	r2, [pc, #284]	; (800c308 <Explore+0x1dc>)
		Sla.Pre = 3;
 800c1ea:	4b48      	ldr	r3, [pc, #288]	; (800c30c <Explore+0x1e0>)
		ExploreVelocity=300;
 800c1ec:	6022      	str	r2, [r4, #0]
		Sla.Pre = 3;
 800c1ee:	4a48      	ldr	r2, [pc, #288]	; (800c310 <Explore+0x1e4>)
 800c1f0:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800c1f2:	4848      	ldr	r0, [pc, #288]	; (800c314 <Explore+0x1e8>)
		Sla.Theta1 = 30;
		Sla.Theta2 = 60;
 800c1f4:	4948      	ldr	r1, [pc, #288]	; (800c318 <Explore+0x1ec>)
		Sla.Fol = 5;
 800c1f6:	4a49      	ldr	r2, [pc, #292]	; (800c31c <Explore+0x1f0>)
 800c1f8:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.117;
 800c1fa:	6098      	str	r0, [r3, #8]
		Sla.Theta3 = 90;
 800c1fc:	4a48      	ldr	r2, [pc, #288]	; (800c320 <Explore+0x1f4>)
		Sla.Theta1 = 30;
 800c1fe:	4849      	ldr	r0, [pc, #292]	; (800c324 <Explore+0x1f8>)
 800c200:	6118      	str	r0, [r3, #16]
		Sla.Theta2 = 60;
 800c202:	6159      	str	r1, [r3, #20]
		Sla.Theta3 = 90;
 800c204:	619a      	str	r2, [r3, #24]
//			HAL_Delay(1000);
//		}
//	Pos.TargetX = X_GOAL_LESSER;
//	Pos.TargetY = Y_GOAL_LESSER;
//	goal_edge_num = two;
	VelocityMax = false;
 800c206:	4d48      	ldr	r5, [pc, #288]	; (800c328 <Explore+0x1fc>)
	SearchOrFast = 0;
 800c208:	4848      	ldr	r0, [pc, #288]	; (800c32c <Explore+0x200>)
	Calc = 0;
 800c20a:	4a49      	ldr	r2, [pc, #292]	; (800c330 <Explore+0x204>)
//	Pos.Car = north;
//	Pos.NextX = Pos.X;
//	Pos.NextY = Pos.Y + 1;
//	Pos.NextCar = north;

	initSearchData(&my_map, &my_mouse);
 800c20c:	4949      	ldr	r1, [pc, #292]	; (800c334 <Explore+0x208>)

//		//ChangeLED(Pos.Car);
//		KyushinJudge();
//		SelectAction(turn_mode);
//		shiftPos();
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c20e:	4f4a      	ldr	r7, [pc, #296]	; (800c338 <Explore+0x20c>)
	VelocityMax = false;
 800c210:	2300      	movs	r3, #0
 800c212:	702b      	strb	r3, [r5, #0]
	SearchOrFast = 0;
 800c214:	6003      	str	r3, [r0, #0]
	initSearchData(&my_map, &my_mouse);
 800c216:	4848      	ldr	r0, [pc, #288]	; (800c338 <Explore+0x20c>)
	Calc = 0;
 800c218:	6013      	str	r3, [r2, #0]
	initSearchData(&my_map, &my_mouse);
 800c21a:	f000 ff37 	bl	800d08c <initSearchData>
	dbc = 1;
 800c21e:	4b47      	ldr	r3, [pc, #284]	; (800c33c <Explore+0x210>)
	Accel(61.5, ExploreVelocity);
 800c220:	edd4 0a00 	vldr	s1, [r4]
 800c224:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800c340 <Explore+0x214>
 800c228:	4d42      	ldr	r5, [pc, #264]	; (800c334 <Explore+0x208>)
	dbc = 1;
 800c22a:	2201      	movs	r2, #1
 800c22c:	601a      	str	r2, [r3, #0]
	Accel(61.5, ExploreVelocity);
 800c22e:	f7fd fb0f 	bl	8009850 <Accel>
	ChangeLED(6);
 800c232:	2006      	movs	r0, #6
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c234:	462c      	mov	r4, r5
	ChangeLED(6);
 800c236:	f001 fba3 	bl	800d980 <ChangeLED>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c23a:	e001      	b.n	800c240 <Explore+0x114>
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c23c:	f001 f830 	bl	800d2a0 <getNextDirection>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c240:	782a      	ldrb	r2, [r5, #0]
 800c242:	7a2b      	ldrb	r3, [r5, #8]
 800c244:	429a      	cmp	r2, r3
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c246:	4621      	mov	r1, r4
 800c248:	4632      	mov	r2, r6
 800c24a:	4638      	mov	r0, r7
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c24c:	d8f6      	bhi.n	800c23c <Explore+0x110>
 800c24e:	f895 c002 	ldrb.w	ip, [r5, #2]
 800c252:	459c      	cmp	ip, r3
 800c254:	d3f2      	bcc.n	800c23c <Explore+0x110>
 800c256:	7a6b      	ldrb	r3, [r5, #9]
 800c258:	f895 c001 	ldrb.w	ip, [r5, #1]
 800c25c:	459c      	cmp	ip, r3
 800c25e:	d8ed      	bhi.n	800c23c <Explore+0x110>
 800c260:	f895 c003 	ldrb.w	ip, [r5, #3]
 800c264:	459c      	cmp	ip, r3
 800c266:	d3e9      	bcc.n	800c23c <Explore+0x110>
	}
//	while(1)
//	{
//		TargetVelocity[BODY] = 0;
//	}
	Decel(45, 0);
 800c268:	eddf 0a36 	vldr	s1, [pc, #216]	; 800c344 <Explore+0x218>
 800c26c:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800c348 <Explore+0x21c>


while(1)
{
	//迷路データの出力
	printAllNodeExistence(&my_map);
 800c270:	4c31      	ldr	r4, [pc, #196]	; (800c338 <Explore+0x20c>)
	Decel(45, 0);
 800c272:	f7fd fb71 	bl	8009958 <Decel>
	shiftState(&my_mouse);
 800c276:	482f      	ldr	r0, [pc, #188]	; (800c334 <Explore+0x208>)
 800c278:	f7ff faa8 	bl	800b7cc <shiftState>
	Flash_clear_sector1();
 800c27c:	f001 fa38 	bl	800d6f0 <Flash_clear_sector1>
	flashStoreNodes();
 800c280:	f7fe f8da 	bl	800a438 <flashStoreNodes>
	Signal(7);
 800c284:	2007      	movs	r0, #7
 800c286:	f002 f813 	bl	800e2b0 <Signal>
	printAllNodeExistence(&my_map);
 800c28a:	4620      	mov	r0, r4
 800c28c:	f7fe fc46 	bl	800ab1c <printAllNodeExistence>
	//printAllNode(&my_map); //drawを読み出す
	printMatrix16ValueFromNode(&my_map);
 800c290:	4620      	mov	r0, r4
 800c292:	f7fe fc85 	bl	800aba0 <printMatrix16ValueFromNode>
	printAllWeight(&my_map, &(my_mouse.now.node->pos) );
 800c296:	6929      	ldr	r1, [r5, #16]
 800c298:	4620      	mov	r0, r4
 800c29a:	3106      	adds	r1, #6
 800c29c:	f7fe faf4 	bl	800a888 <printAllWeight>
 800c2a0:	e7f3      	b.n	800c28a <Explore+0x15e>
		ExploreVelocity=300;
 800c2a2:	4c18      	ldr	r4, [pc, #96]	; (800c304 <Explore+0x1d8>)
 800c2a4:	4b18      	ldr	r3, [pc, #96]	; (800c308 <Explore+0x1dc>)
 800c2a6:	6023      	str	r3, [r4, #0]
		turn_mode = 'T';
 800c2a8:	2654      	movs	r6, #84	; 0x54
 800c2aa:	e794      	b.n	800c1d6 <Explore+0xaa>
		ExploreVelocity=240;
 800c2ac:	4a27      	ldr	r2, [pc, #156]	; (800c34c <Explore+0x220>)
		Sla.Pre = 2;
 800c2ae:	4b17      	ldr	r3, [pc, #92]	; (800c30c <Explore+0x1e0>)
		ExploreVelocity=240;
 800c2b0:	6022      	str	r2, [r4, #0]
		Sla.Pre = 2;
 800c2b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c2b6:	601a      	str	r2, [r3, #0]
		Sla.Alpha = 0.078;
 800c2b8:	4825      	ldr	r0, [pc, #148]	; (800c350 <Explore+0x224>)
		Sla.Theta2 = 60;
 800c2ba:	4917      	ldr	r1, [pc, #92]	; (800c318 <Explore+0x1ec>)
		Sla.Fol = 16;
 800c2bc:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800c2c0:	e79a      	b.n	800c1f8 <Explore+0xcc>
		ExploreVelocity=180;
 800c2c2:	4924      	ldr	r1, [pc, #144]	; (800c354 <Explore+0x228>)
		Sla.Pre = 2;
 800c2c4:	4b11      	ldr	r3, [pc, #68]	; (800c30c <Explore+0x1e0>)
		ExploreVelocity=180;
 800c2c6:	6021      	str	r1, [r4, #0]
		Sla.Pre = 2;
 800c2c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c2cc:	6019      	str	r1, [r3, #0]
		Sla.Fol = 16.5;
 800c2ce:	4a22      	ldr	r2, [pc, #136]	; (800c358 <Explore+0x22c>)
		Sla.Alpha = 0.043;
 800c2d0:	4822      	ldr	r0, [pc, #136]	; (800c35c <Explore+0x230>)
		Sla.Theta2 = 60;
 800c2d2:	4911      	ldr	r1, [pc, #68]	; (800c318 <Explore+0x1ec>)
 800c2d4:	e790      	b.n	800c1f8 <Explore+0xcc>
		Sla.Pre = 9;
 800c2d6:	4b0d      	ldr	r3, [pc, #52]	; (800c30c <Explore+0x1e0>)
		ExploreVelocity=90;
 800c2d8:	4a11      	ldr	r2, [pc, #68]	; (800c320 <Explore+0x1f4>)
 800c2da:	6022      	str	r2, [r4, #0]
		Sla.Theta3 = 90;
 800c2dc:	619a      	str	r2, [r3, #24]
		Sla.Pre = 9;
 800c2de:	4a20      	ldr	r2, [pc, #128]	; (800c360 <Explore+0x234>)
 800c2e0:	601a      	str	r2, [r3, #0]
		Sla.Fol = 20;
 800c2e2:	4a20      	ldr	r2, [pc, #128]	; (800c364 <Explore+0x238>)
		Sla.Alpha = 0.014;
 800c2e4:	4820      	ldr	r0, [pc, #128]	; (800c368 <Explore+0x23c>)
		Sla.Theta2 = 60;
 800c2e6:	490c      	ldr	r1, [pc, #48]	; (800c318 <Explore+0x1ec>)
		Sla.Fol = 20;
 800c2e8:	605a      	str	r2, [r3, #4]
		Sla.Theta1 = 30;
 800c2ea:	4a0e      	ldr	r2, [pc, #56]	; (800c324 <Explore+0x1f8>)
		Sla.Alpha = 0.014;
 800c2ec:	6098      	str	r0, [r3, #8]
		Sla.Theta1 = 30;
 800c2ee:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c2f0:	6159      	str	r1, [r3, #20]
		break;
 800c2f2:	e788      	b.n	800c206 <Explore+0xda>
 800c2f4:	20000c3c 	.word	0x20000c3c
 800c2f8:	080162d8 	.word	0x080162d8
 800c2fc:	080162f0 	.word	0x080162f0
 800c300:	20000c7c 	.word	0x20000c7c
 800c304:	20000d70 	.word	0x20000d70
 800c308:	43960000 	.word	0x43960000
 800c30c:	20000c94 	.word	0x20000c94
 800c310:	40400000 	.word	0x40400000
 800c314:	3def9db2 	.word	0x3def9db2
 800c318:	42700000 	.word	0x42700000
 800c31c:	40a00000 	.word	0x40a00000
 800c320:	42b40000 	.word	0x42b40000
 800c324:	41f00000 	.word	0x41f00000
 800c328:	20000d6e 	.word	0x20000d6e
 800c32c:	20000ee8 	.word	0x20000ee8
 800c330:	20000eec 	.word	0x20000eec
 800c334:	200004ec 	.word	0x200004ec
 800c338:	20000698 	.word	0x20000698
 800c33c:	20000224 	.word	0x20000224
 800c340:	42760000 	.word	0x42760000
 800c344:	00000000 	.word	0x00000000
 800c348:	42340000 	.word	0x42340000
 800c34c:	43700000 	.word	0x43700000
 800c350:	3d9fbe77 	.word	0x3d9fbe77
 800c354:	43340000 	.word	0x43340000
 800c358:	41840000 	.word	0x41840000
 800c35c:	3d3020c5 	.word	0x3d3020c5
 800c360:	41100000 	.word	0x41100000
 800c364:	41a00000 	.word	0x41a00000
 800c368:	3c656042 	.word	0x3c656042

0800c36c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c36c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c370:	2400      	movs	r4, #0
{
 800c372:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c374:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800c378:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c37c:	4b45      	ldr	r3, [pc, #276]	; (800c494 <MX_GPIO_Init+0x128>)
 800c37e:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c380:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c384:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800c4a4 <MX_GPIO_Init+0x138>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800c388:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800c4a8 <MX_GPIO_Init+0x13c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800c38c:	4f42      	ldr	r7, [pc, #264]	; (800c498 <MX_GPIO_Init+0x12c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800c38e:	4e43      	ldr	r6, [pc, #268]	; (800c49c <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c390:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c394:	631a      	str	r2, [r3, #48]	; 0x30
 800c396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c398:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c39c:	9200      	str	r2, [sp, #0]
 800c39e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c3a0:	9401      	str	r4, [sp, #4]
 800c3a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3a4:	f042 0204 	orr.w	r2, r2, #4
 800c3a8:	631a      	str	r2, [r3, #48]	; 0x30
 800c3aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3ac:	f002 0204 	and.w	r2, r2, #4
 800c3b0:	9201      	str	r2, [sp, #4]
 800c3b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3b4:	9402      	str	r4, [sp, #8]
 800c3b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3b8:	f042 0201 	orr.w	r2, r2, #1
 800c3bc:	631a      	str	r2, [r3, #48]	; 0x30
 800c3be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3c0:	f002 0201 	and.w	r2, r2, #1
 800c3c4:	9202      	str	r2, [sp, #8]
 800c3c6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c3c8:	9403      	str	r4, [sp, #12]
 800c3ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3cc:	f042 0202 	orr.w	r2, r2, #2
 800c3d0:	631a      	str	r2, [r3, #48]	; 0x30
 800c3d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3d4:	f002 0202 	and.w	r2, r2, #2
 800c3d8:	9203      	str	r2, [sp, #12]
 800c3da:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c3dc:	9404      	str	r4, [sp, #16]
 800c3de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3e0:	f042 0208 	orr.w	r2, r2, #8
 800c3e4:	631a      	str	r2, [r3, #48]	; 0x30
 800c3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e8:	f003 0308 	and.w	r3, r3, #8
 800c3ec:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c3ee:	4622      	mov	r2, r4
 800c3f0:	4648      	mov	r0, r9
 800c3f2:	2105      	movs	r1, #5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c3f4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c3f6:	f002 ffd1 	bl	800f39c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800c3fa:	4622      	mov	r2, r4
 800c3fc:	4640      	mov	r0, r8
 800c3fe:	f44f 7140 	mov.w	r1, #768	; 0x300
 800c402:	f002 ffcb 	bl	800f39c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800c406:	4622      	mov	r2, r4
 800c408:	4638      	mov	r0, r7
 800c40a:	2104      	movs	r1, #4
 800c40c:	f002 ffc6 	bl	800f39c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800c410:	4622      	mov	r2, r4
 800c412:	4630      	mov	r0, r6
 800c414:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c418:	f002 ffc0 	bl	800f39c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c41c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c41e:	4648      	mov	r0, r9
 800c420:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800c422:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c424:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c428:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c42c:	f002 feb2 	bl	800f194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c430:	4b1b      	ldr	r3, [pc, #108]	; (800c4a0 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c432:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800c434:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c438:	a905      	add	r1, sp, #20
 800c43a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c43c:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c440:	f002 fea8 	bl	800f194 <HAL_GPIO_Init>
  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c444:	4640      	mov	r0, r8
 800c446:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800c448:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c44c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c44e:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c452:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c454:	f002 fe9e 	bl	800f194 <HAL_GPIO_Init>
  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c458:	4638      	mov	r0, r7
 800c45a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c45c:	2304      	movs	r3, #4
 800c45e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c460:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c464:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c466:	f002 fe95 	bl	800f194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c46a:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c46e:	a905      	add	r1, sp, #20
 800c470:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c472:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c474:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c478:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c47a:	f002 fe8b 	bl	800f194 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800c47e:	4622      	mov	r2, r4
 800c480:	4621      	mov	r1, r4
 800c482:	2028      	movs	r0, #40	; 0x28
 800c484:	f002 fafa 	bl	800ea7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800c488:	2028      	movs	r0, #40	; 0x28
 800c48a:	f002 fb2d 	bl	800eae8 <HAL_NVIC_EnableIRQ>

}
 800c48e:	b00b      	add	sp, #44	; 0x2c
 800c490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c494:	40023800 	.word	0x40023800
 800c498:	40020c00 	.word	0x40020c00
 800c49c:	40020400 	.word	0x40020400
 800c4a0:	10110000 	.word	0x10110000
 800c4a4:	40020000 	.word	0x40020000
 800c4a8:	40020800 	.word	0x40020800

0800c4ac <MX_DMA_Init>:
{
 800c4ac:	b510      	push	{r4, lr}
 800c4ae:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c4b0:	2400      	movs	r4, #0
 800c4b2:	4b0f      	ldr	r3, [pc, #60]	; (800c4f0 <MX_DMA_Init+0x44>)
 800c4b4:	9401      	str	r4, [sp, #4]
 800c4b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4b8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c4bc:	631a      	str	r2, [r3, #48]	; 0x30
 800c4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c4c4:	4622      	mov	r2, r4
 800c4c6:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c4c8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c4ca:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c4cc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c4ce:	f002 fad5 	bl	800ea7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c4d2:	2038      	movs	r0, #56	; 0x38
 800c4d4:	f002 fb08 	bl	800eae8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800c4d8:	4622      	mov	r2, r4
 800c4da:	4621      	mov	r1, r4
 800c4dc:	203a      	movs	r0, #58	; 0x3a
 800c4de:	f002 facd 	bl	800ea7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800c4e2:	203a      	movs	r0, #58	; 0x3a
}
 800c4e4:	b002      	add	sp, #8
 800c4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800c4ea:	f002 bafd 	b.w	800eae8 <HAL_NVIC_EnableIRQ>
 800c4ee:	bf00      	nop
 800c4f0:	40023800 	.word	0x40023800

0800c4f4 <MX_ADC1_Init>:
{
 800c4f4:	b570      	push	{r4, r5, r6, lr}
  hadc1.Instance = ADC1;
 800c4f6:	4c21      	ldr	r4, [pc, #132]	; (800c57c <MX_ADC1_Init+0x88>)
 800c4f8:	4b21      	ldr	r3, [pc, #132]	; (800c580 <MX_ADC1_Init+0x8c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c4fa:	4a22      	ldr	r2, [pc, #136]	; (800c584 <MX_ADC1_Init+0x90>)
  hadc1.Instance = ADC1;
 800c4fc:	6023      	str	r3, [r4, #0]
{
 800c4fe:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800c500:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 800c502:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c504:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc1.Init.NbrOfConversion = 3;
 800c508:	2603      	movs	r6, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c50a:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c50c:	6061      	str	r1, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c50e:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c510:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c512:	9300      	str	r3, [sp, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c514:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c518:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c51a:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c51c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800c520:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ENABLE;
 800c522:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800c524:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800c526:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c52a:	6165      	str	r5, [r4, #20]
  hadc1.Init.NbrOfConversion = 3;
 800c52c:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c52e:	f002 f819 	bl	800e564 <HAL_ADC_Init>
 800c532:	b108      	cbz	r0, 800c538 <MX_ADC1_Init+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c534:	b672      	cpsid	i
 800c536:	e7fe      	b.n	800c536 <MX_ADC1_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_10;
 800c538:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c53a:	4669      	mov	r1, sp
 800c53c:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800c53e:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c540:	9602      	str	r6, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_10;
 800c542:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c544:	f002 f9e0 	bl	800e908 <HAL_ADC_ConfigChannel>
 800c548:	b108      	cbz	r0, 800c54e <MX_ADC1_Init+0x5a>
 800c54a:	b672      	cpsid	i
 800c54c:	e7fe      	b.n	800c54c <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_14;
 800c54e:	220e      	movs	r2, #14
  sConfig.Rank = 2;
 800c550:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c552:	4669      	mov	r1, sp
 800c554:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 800c556:	9200      	str	r2, [sp, #0]
  sConfig.Rank = 2;
 800c558:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c55a:	f002 f9d5 	bl	800e908 <HAL_ADC_ConfigChannel>
 800c55e:	b108      	cbz	r0, 800c564 <MX_ADC1_Init+0x70>
 800c560:	b672      	cpsid	i
 800c562:	e7fe      	b.n	800c562 <MX_ADC1_Init+0x6e>
  sConfig.Channel = ADC_CHANNEL_9;
 800c564:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c566:	4669      	mov	r1, sp
 800c568:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 800c56a:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c56e:	f002 f9cb 	bl	800e908 <HAL_ADC_ConfigChannel>
 800c572:	b108      	cbz	r0, 800c578 <MX_ADC1_Init+0x84>
 800c574:	b672      	cpsid	i
 800c576:	e7fe      	b.n	800c576 <MX_ADC1_Init+0x82>
}
 800c578:	b004      	add	sp, #16
 800c57a:	bd70      	pop	{r4, r5, r6, pc}
 800c57c:	20001050 	.word	0x20001050
 800c580:	40012000 	.word	0x40012000
 800c584:	0f000001 	.word	0x0f000001

0800c588 <MX_ADC2_Init>:
{
 800c588:	b570      	push	{r4, r5, r6, lr}
  hadc2.Instance = ADC2;
 800c58a:	4c1c      	ldr	r4, [pc, #112]	; (800c5fc <MX_ADC2_Init+0x74>)
 800c58c:	4b1c      	ldr	r3, [pc, #112]	; (800c600 <MX_ADC2_Init+0x78>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c58e:	4a1d      	ldr	r2, [pc, #116]	; (800c604 <MX_ADC2_Init+0x7c>)
  hadc2.Instance = ADC2;
 800c590:	6023      	str	r3, [r4, #0]
{
 800c592:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800c594:	2300      	movs	r3, #0
  hadc2.Init.ScanConvMode = ENABLE;
 800c596:	2501      	movs	r5, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c598:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc2.Init.NbrOfConversion = 2;
 800c59c:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800c59e:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c5a0:	6061      	str	r1, [r4, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c5a2:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800c5a4:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c5a6:	9300      	str	r3, [sp, #0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800c5a8:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c5ac:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c5ae:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c5b0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800c5b4:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ENABLE;
 800c5b6:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800c5b8:	7625      	strb	r5, [r4, #24]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800c5ba:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c5be:	6165      	str	r5, [r4, #20]
  hadc2.Init.NbrOfConversion = 2;
 800c5c0:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800c5c2:	f001 ffcf 	bl	800e564 <HAL_ADC_Init>
 800c5c6:	b108      	cbz	r0, 800c5cc <MX_ADC2_Init+0x44>
 800c5c8:	b672      	cpsid	i
 800c5ca:	e7fe      	b.n	800c5ca <MX_ADC2_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_11;
 800c5cc:	220b      	movs	r2, #11
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c5ce:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c5d0:	4669      	mov	r1, sp
 800c5d2:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800c5d4:	9501      	str	r5, [sp, #4]
  sConfig.Channel = ADC_CHANNEL_11;
 800c5d6:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c5d8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c5da:	f002 f995 	bl	800e908 <HAL_ADC_ConfigChannel>
 800c5de:	b108      	cbz	r0, 800c5e4 <MX_ADC2_Init+0x5c>
 800c5e0:	b672      	cpsid	i
 800c5e2:	e7fe      	b.n	800c5e2 <MX_ADC2_Init+0x5a>
  sConfig.Channel = ADC_CHANNEL_15;
 800c5e4:	230f      	movs	r3, #15
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c5e6:	4669      	mov	r1, sp
 800c5e8:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_15;
 800c5ea:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c5ee:	f002 f98b 	bl	800e908 <HAL_ADC_ConfigChannel>
 800c5f2:	b108      	cbz	r0, 800c5f8 <MX_ADC2_Init+0x70>
 800c5f4:	b672      	cpsid	i
 800c5f6:	e7fe      	b.n	800c5f6 <MX_ADC2_Init+0x6e>
}
 800c5f8:	b004      	add	sp, #16
 800c5fa:	bd70      	pop	{r4, r5, r6, pc}
 800c5fc:	20000f70 	.word	0x20000f70
 800c600:	40012100 	.word	0x40012100
 800c604:	0f000001 	.word	0x0f000001

0800c608 <MX_TIM3_Init>:
{
 800c608:	b530      	push	{r4, r5, lr}
 800c60a:	b08d      	sub	sp, #52	; 0x34
  htim3.Instance = TIM3;
 800c60c:	4c14      	ldr	r4, [pc, #80]	; (800c660 <MX_TIM3_Init+0x58>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 800c60e:	2220      	movs	r2, #32
 800c610:	2100      	movs	r1, #0
 800c612:	a804      	add	r0, sp, #16
 800c614:	f004 ff4d 	bl	80114b2 <memset>
  htim3.Instance = TIM3;
 800c618:	4b12      	ldr	r3, [pc, #72]	; (800c664 <MX_TIM3_Init+0x5c>)
 800c61a:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 60000-1;
 800c61c:	f64e 225f 	movw	r2, #59999	; 0xea5f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c620:	2300      	movs	r3, #0
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c622:	2503      	movs	r5, #3
  htim3.Init.Period = 60000-1;
 800c624:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c626:	4620      	mov	r0, r4
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c628:	2201      	movs	r2, #1
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c62a:	a903      	add	r1, sp, #12
  htim3.Init.Prescaler = 0;
 800c62c:	6063      	str	r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c62e:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c630:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c632:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c634:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c636:	9302      	str	r3, [sp, #8]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c638:	9503      	str	r5, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c63a:	9205      	str	r2, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c63c:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c63e:	f004 f8ef 	bl	8010820 <HAL_TIM_Encoder_Init>
 800c642:	b108      	cbz	r0, 800c648 <MX_TIM3_Init+0x40>
 800c644:	b672      	cpsid	i
 800c646:	e7fe      	b.n	800c646 <MX_TIM3_Init+0x3e>
 800c648:	4603      	mov	r3, r0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c64a:	a901      	add	r1, sp, #4
 800c64c:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c64e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c652:	f004 fa95 	bl	8010b80 <HAL_TIMEx_MasterConfigSynchronization>
 800c656:	b108      	cbz	r0, 800c65c <MX_TIM3_Init+0x54>
 800c658:	b672      	cpsid	i
 800c65a:	e7fe      	b.n	800c65a <MX_TIM3_Init+0x52>
}
 800c65c:	b00d      	add	sp, #52	; 0x34
 800c65e:	bd30      	pop	{r4, r5, pc}
 800c660:	20000fb8 	.word	0x20000fb8
 800c664:	40000400 	.word	0x40000400

0800c668 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 800c668:	4b0a      	ldr	r3, [pc, #40]	; (800c694 <MX_USART1_UART_Init+0x2c>)
 800c66a:	4a0b      	ldr	r2, [pc, #44]	; (800c698 <MX_USART1_UART_Init+0x30>)
{
 800c66c:	b510      	push	{r4, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c66e:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 800c670:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800c672:	f44f 5416 	mov.w	r4, #9600	; 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c676:	2200      	movs	r2, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c678:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 9600;
 800c67a:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c67c:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c67e:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c682:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c684:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c688:	f004 fb92 	bl	8010db0 <HAL_UART_Init>
 800c68c:	b108      	cbz	r0, 800c692 <MX_USART1_UART_Init+0x2a>
 800c68e:	b672      	cpsid	i
 800c690:	e7fe      	b.n	800c690 <MX_USART1_UART_Init+0x28>
}
 800c692:	bd10      	pop	{r4, pc}
 800c694:	20001098 	.word	0x20001098
 800c698:	40011000 	.word	0x40011000

0800c69c <__io_putchar>:
PUTCHAR_PROTOTYPE {
 800c69c:	b500      	push	{lr}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800c6a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
PUTCHAR_PROTOTYPE {
 800c6a6:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	4803      	ldr	r0, [pc, #12]	; (800c6bc <__io_putchar+0x20>)
 800c6ae:	f004 fbaf 	bl	8010e10 <HAL_UART_Transmit>
}
 800c6b2:	9801      	ldr	r0, [sp, #4]
 800c6b4:	b003      	add	sp, #12
 800c6b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c6ba:	bf00      	nop
 800c6bc:	20001098 	.word	0x20001098

0800c6c0 <__io_getchar>:
int __io_getchar(void) {
 800c6c0:	b510      	push	{r4, lr}
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800c6c2:	4c07      	ldr	r4, [pc, #28]	; (800c6e0 <__io_getchar+0x20>)
int __io_getchar(void) {
 800c6c4:	b082      	sub	sp, #8
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800c6c6:	230a      	movs	r3, #10
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	f10d 0107 	add.w	r1, sp, #7
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	f004 fbfc 	bl	8010ecc <HAL_UART_Receive>
while(Status != HAL_OK)
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d1f6      	bne.n	800c6c6 <__io_getchar+0x6>
}
 800c6d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c6dc:	b002      	add	sp, #8
 800c6de:	bd10      	pop	{r4, pc}
 800c6e0:	20001098 	.word	0x20001098

0800c6e4 <SystemClock_Config>:
{
 800c6e4:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c6e6:	2300      	movs	r3, #0
{
 800c6e8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c6ea:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800c6ee:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c6f2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800c6f6:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c6fa:	4920      	ldr	r1, [pc, #128]	; (800c77c <SystemClock_Config+0x98>)
 800c6fc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c6fe:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c700:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c702:	4a1f      	ldr	r2, [pc, #124]	; (800c780 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800c704:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800c708:	6408      	str	r0, [r1, #64]	; 0x40
 800c70a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c70c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800c710:	9101      	str	r1, [sp, #4]
 800c712:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c714:	9302      	str	r3, [sp, #8]
 800c716:	6813      	ldr	r3, [r2, #0]
 800c718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c71c:	6013      	str	r3, [r2, #0]
 800c71e:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c720:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c728:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c72a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c72c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c72e:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c730:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c734:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c736:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c738:	22a8      	movs	r2, #168	; 0xa8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c73a:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c73c:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c73e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c740:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c742:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c746:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c748:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c74a:	f002 fe37 	bl	800f3bc <HAL_RCC_OscConfig>
 800c74e:	b108      	cbz	r0, 800c754 <SystemClock_Config+0x70>
 800c750:	b672      	cpsid	i
 800c752:	e7fe      	b.n	800c752 <SystemClock_Config+0x6e>
 800c754:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c756:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c758:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c75c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c760:	a803      	add	r0, sp, #12
 800c762:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c764:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c766:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c768:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c76a:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c76e:	f003 f839 	bl	800f7e4 <HAL_RCC_ClockConfig>
 800c772:	b108      	cbz	r0, 800c778 <SystemClock_Config+0x94>
 800c774:	b672      	cpsid	i
 800c776:	e7fe      	b.n	800c776 <SystemClock_Config+0x92>
}
 800c778:	b014      	add	sp, #80	; 0x50
 800c77a:	bd70      	pop	{r4, r5, r6, pc}
 800c77c:	40023800 	.word	0x40023800
 800c780:	40007000 	.word	0x40007000

0800c784 <main>:
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 800c788:	f001 feae 	bl	800e4e8 <HAL_Init>
  MX_GPIO_Init();
 800c78c:	f7ff fdee 	bl	800c36c <MX_GPIO_Init>
  MX_DMA_Init();
 800c790:	f7ff fe8c 	bl	800c4ac <MX_DMA_Init>
  MX_ADC1_Init();
 800c794:	f7ff feae 	bl	800c4f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800c798:	f7ff fef6 	bl	800c588 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800c79c:	f7ff ff64 	bl	800c668 <MX_USART1_UART_Init>
	ADCStart();
 800c7a0:	f000 fec0 	bl	800d524 <ADCStart>
	MX_TIM3_Init();
 800c7a4:	f7ff ff30 	bl	800c608 <MX_TIM3_Init>
	BatteryCheck( (int)adc1[2] );
 800c7a8:	4ba0      	ldr	r3, [pc, #640]	; (800ca2c <main+0x2a8>)
  htim2.Instance = TIM2;
 800c7aa:	4ca1      	ldr	r4, [pc, #644]	; (800ca30 <main+0x2ac>)
	BatteryCheck( (int)adc1[2] );
 800c7ac:	6898      	ldr	r0, [r3, #8]
 800c7ae:	f001 fd91 	bl	800e2d4 <BatteryCheck>
	ADCStop();
 800c7b2:	f000 fed5 	bl	800d560 <ADCStop>
	ModeSelect(0, 7, &startup_mode);
 800c7b6:	f10d 0207 	add.w	r2, sp, #7
 800c7ba:	2107      	movs	r1, #7
 800c7bc:	2000      	movs	r0, #0
 800c7be:	f001 fde3 	bl	800e388 <ModeSelect>
	Signal( startup_mode );
 800c7c2:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800c7c6:	f001 fd73 	bl	800e2b0 <Signal>
  htim2.Init.Period = 4200-1;
 800c7ca:	f241 0667 	movw	r6, #4199	; 0x1067
  SystemClock_Config();
 800c7ce:	f7ff ff89 	bl	800c6e4 <SystemClock_Config>
  MX_GPIO_Init();
 800c7d2:	f7ff fdcb 	bl	800c36c <MX_GPIO_Init>
  MX_DMA_Init();
 800c7d6:	f7ff fe69 	bl	800c4ac <MX_DMA_Init>
  MX_ADC1_Init();
 800c7da:	f7ff fe8b 	bl	800c4f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800c7de:	f7ff fed3 	bl	800c588 <MX_ADC2_Init>
  MX_TIM3_Init();
 800c7e2:	f7ff ff11 	bl	800c608 <MX_TIM3_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c7e6:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 800c7e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c7ec:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 800c7ee:	6022      	str	r2, [r4, #0]
  htim2.Init.Prescaler = 0;
 800c7f0:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c7f2:	9308      	str	r3, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c7f4:	9304      	str	r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c7f6:	930f      	str	r3, [sp, #60]	; 0x3c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c7f8:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c7fa:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c7fc:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c7fe:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800c802:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c804:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c806:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800c80a:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 800c80e:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  htim2.Init.Period = 4200-1;
 800c812:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c814:	f003 ffb0 	bl	8010778 <HAL_TIM_Base_Init>
 800c818:	b108      	cbz	r0, 800c81e <main+0x9a>
 800c81a:	b672      	cpsid	i
 800c81c:	e7fe      	b.n	800c81c <main+0x98>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c81e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c822:	a908      	add	r1, sp, #32
 800c824:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c826:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c828:	f003 fddc 	bl	80103e4 <HAL_TIM_ConfigClockSource>
 800c82c:	b108      	cbz	r0, 800c832 <main+0xae>
 800c82e:	b672      	cpsid	i
 800c830:	e7fe      	b.n	800c830 <main+0xac>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c832:	4620      	mov	r0, r4
 800c834:	f003 ffd8 	bl	80107e8 <HAL_TIM_PWM_Init>
 800c838:	4603      	mov	r3, r0
 800c83a:	b108      	cbz	r0, 800c840 <main+0xbc>
 800c83c:	b672      	cpsid	i
 800c83e:	e7fe      	b.n	800c83e <main+0xba>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c840:	a904      	add	r1, sp, #16
 800c842:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c844:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c848:	f004 f99a 	bl	8010b80 <HAL_TIMEx_MasterConfigSynchronization>
 800c84c:	b108      	cbz	r0, 800c852 <main+0xce>
 800c84e:	b672      	cpsid	i
 800c850:	e7fe      	b.n	800c850 <main+0xcc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c852:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c854:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c858:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c85a:	220c      	movs	r2, #12
 800c85c:	a90f      	add	r1, sp, #60	; 0x3c
 800c85e:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c860:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c862:	f004 f893 	bl	801098c <HAL_TIM_PWM_ConfigChannel>
 800c866:	4605      	mov	r5, r0
 800c868:	b108      	cbz	r0, 800c86e <main+0xea>
 800c86a:	b672      	cpsid	i
 800c86c:	e7fe      	b.n	800c86c <main+0xe8>
  HAL_TIM_MspPostInit(&htim2);
 800c86e:	4620      	mov	r0, r4
 800c870:	f000 fb20 	bl	800ceb4 <HAL_TIM_MspPostInit>
  hspi3.Instance = SPI3;
 800c874:	4b6f      	ldr	r3, [pc, #444]	; (800ca34 <main+0x2b0>)
 800c876:	4a70      	ldr	r2, [pc, #448]	; (800ca38 <main+0x2b4>)
 800c878:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c87a:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c87e:	2202      	movs	r2, #2
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c880:	6059      	str	r1, [r3, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c882:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c884:	2101      	movs	r1, #1
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c886:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c88a:	6159      	str	r1, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c88c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c88e:	2128      	movs	r1, #40	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800c890:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c892:	4618      	mov	r0, r3
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800c894:	e9c3 5502 	strd	r5, r5, [r3, #8]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800c898:	e9c3 5508 	strd	r5, r5, [r3, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c89c:	629d      	str	r5, [r3, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c89e:	61d9      	str	r1, [r3, #28]
  hspi3.Init.CRCPolynomial = 10;
 800c8a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c8a2:	f003 f9f5 	bl	800fc90 <HAL_SPI_Init>
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	b108      	cbz	r0, 800c8ae <main+0x12a>
 800c8aa:	b672      	cpsid	i
 800c8ac:	e7fe      	b.n	800c8ac <main+0x128>
  htim5.Instance = TIM5;
 800c8ae:	4d63      	ldr	r5, [pc, #396]	; (800ca3c <main+0x2b8>)
  MX_USART1_UART_Init();
 800c8b0:	f7ff feda 	bl	800c668 <MX_USART1_UART_Init>
  htim5.Instance = TIM5;
 800c8b4:	4b62      	ldr	r3, [pc, #392]	; (800ca40 <main+0x2bc>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c8b6:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c8b8:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c8ba:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800c8be:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c8c2:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c8c6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800c8ca:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 800c8ce:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c8d2:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim5.Init.Period = 4200-1;
 800c8d6:	60ee      	str	r6, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c8d8:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c8da:	61ac      	str	r4, [r5, #24]
  htim5.Instance = TIM5;
 800c8dc:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c8de:	f003 ff4b 	bl	8010778 <HAL_TIM_Base_Init>
 800c8e2:	b108      	cbz	r0, 800c8e8 <main+0x164>
 800c8e4:	b672      	cpsid	i
 800c8e6:	e7fe      	b.n	800c8e6 <main+0x162>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c8e8:	a908      	add	r1, sp, #32
 800c8ea:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c8ec:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c8ee:	f003 fd79 	bl	80103e4 <HAL_TIM_ConfigClockSource>
 800c8f2:	b108      	cbz	r0, 800c8f8 <main+0x174>
 800c8f4:	b672      	cpsid	i
 800c8f6:	e7fe      	b.n	800c8f6 <main+0x172>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	f003 ff75 	bl	80107e8 <HAL_TIM_PWM_Init>
 800c8fe:	4603      	mov	r3, r0
 800c900:	b108      	cbz	r0, 800c906 <main+0x182>
 800c902:	b672      	cpsid	i
 800c904:	e7fe      	b.n	800c904 <main+0x180>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c906:	4628      	mov	r0, r5
 800c908:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c90a:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c90e:	f004 f937 	bl	8010b80 <HAL_TIMEx_MasterConfigSynchronization>
 800c912:	b108      	cbz	r0, 800c918 <main+0x194>
 800c914:	b672      	cpsid	i
 800c916:	e7fe      	b.n	800c916 <main+0x192>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c918:	2060      	movs	r0, #96	; 0x60
  sConfigOC.Pulse = 0;
 800c91a:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c91c:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c91e:	2204      	movs	r2, #4
 800c920:	a90f      	add	r1, sp, #60	; 0x3c
 800c922:	4846      	ldr	r0, [pc, #280]	; (800ca3c <main+0x2b8>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c924:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c926:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c92a:	f004 f82f 	bl	801098c <HAL_TIM_PWM_ConfigChannel>
 800c92e:	4605      	mov	r5, r0
 800c930:	b108      	cbz	r0, 800c936 <main+0x1b2>
 800c932:	b672      	cpsid	i
 800c934:	e7fe      	b.n	800c934 <main+0x1b0>
  HAL_TIM_MspPostInit(&htim5);
 800c936:	4841      	ldr	r0, [pc, #260]	; (800ca3c <main+0x2b8>)
  htim4.Instance = TIM4;
 800c938:	4c42      	ldr	r4, [pc, #264]	; (800ca44 <main+0x2c0>)
  HAL_TIM_MspPostInit(&htim5);
 800c93a:	f000 fabb 	bl	800ceb4 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800c93e:	2220      	movs	r2, #32
 800c940:	4629      	mov	r1, r5
 800c942:	a810      	add	r0, sp, #64	; 0x40
 800c944:	f004 fdb5 	bl	80114b2 <memset>
  htim4.Instance = TIM4;
 800c948:	4b3f      	ldr	r3, [pc, #252]	; (800ca48 <main+0x2c4>)
 800c94a:	6023      	str	r3, [r4, #0]
  htim4.Init.Period = 60000-1;
 800c94c:	f64e 215f 	movw	r1, #59999	; 0xea5f
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c950:	2301      	movs	r3, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c952:	2203      	movs	r2, #3
  htim4.Init.Period = 60000-1;
 800c954:	60e1      	str	r1, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800c956:	4620      	mov	r0, r4
 800c958:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c95a:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c95c:	9315      	str	r3, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c95e:	9508      	str	r5, [sp, #32]
 800c960:	9509      	str	r5, [sp, #36]	; 0x24
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c962:	e9c4 5501 	strd	r5, r5, [r4, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c966:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c968:	61a5      	str	r5, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c96a:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800c96c:	f003 ff58 	bl	8010820 <HAL_TIM_Encoder_Init>
 800c970:	4603      	mov	r3, r0
 800c972:	b108      	cbz	r0, 800c978 <main+0x1f4>
 800c974:	b672      	cpsid	i
 800c976:	e7fe      	b.n	800c976 <main+0x1f2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800c978:	4620      	mov	r0, r4
 800c97a:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c97c:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800c980:	f004 f8fe 	bl	8010b80 <HAL_TIMEx_MasterConfigSynchronization>
 800c984:	4604      	mov	r4, r0
 800c986:	b108      	cbz	r0, 800c98c <main+0x208>
 800c988:	b672      	cpsid	i
 800c98a:	e7fe      	b.n	800c98a <main+0x206>
  htim8.Instance = TIM8;
 800c98c:	4d2f      	ldr	r5, [pc, #188]	; (800ca4c <main+0x2c8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c98e:	9004      	str	r0, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c990:	4601      	mov	r1, r0
 800c992:	2220      	movs	r2, #32
 800c994:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c996:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800c99a:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c99c:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c99e:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800c9a2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800c9a6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800c9aa:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c9ac:	9403      	str	r4, [sp, #12]
  htim8.Init.Prescaler = 168-1;
 800c9ae:	26a7      	movs	r6, #167	; 0xa7
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c9b0:	f004 fd7f 	bl	80114b2 <memset>
  htim8.Instance = TIM8;
 800c9b4:	4926      	ldr	r1, [pc, #152]	; (800ca50 <main+0x2cc>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c9b6:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 50-1;
 800c9b8:	2231      	movs	r2, #49	; 0x31
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c9ba:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c9bc:	4628      	mov	r0, r5
  htim8.Init.RepetitionCounter = 0;
 800c9be:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim8.Instance = TIM8;
 800c9c2:	6029      	str	r1, [r5, #0]
  htim8.Init.Period = 50-1;
 800c9c4:	60ea      	str	r2, [r5, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c9c6:	61ab      	str	r3, [r5, #24]
  htim8.Init.Prescaler = 168-1;
 800c9c8:	606e      	str	r6, [r5, #4]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c9ca:	f003 fed5 	bl	8010778 <HAL_TIM_Base_Init>
 800c9ce:	b108      	cbz	r0, 800c9d4 <main+0x250>
 800c9d0:	b672      	cpsid	i
 800c9d2:	e7fe      	b.n	800c9d2 <main+0x24e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c9d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800c9d8:	a904      	add	r1, sp, #16
 800c9da:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c9dc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800c9de:	f003 fd01 	bl	80103e4 <HAL_TIM_ConfigClockSource>
 800c9e2:	b108      	cbz	r0, 800c9e8 <main+0x264>
 800c9e4:	b672      	cpsid	i
 800c9e6:	e7fe      	b.n	800c9e6 <main+0x262>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	f003 fee1 	bl	80107b0 <HAL_TIM_OC_Init>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	b108      	cbz	r0, 800c9f6 <main+0x272>
 800c9f2:	b672      	cpsid	i
 800c9f4:	e7fe      	b.n	800c9f4 <main+0x270>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c9f6:	a902      	add	r1, sp, #8
 800c9f8:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c9fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c9fe:	f004 f8bf 	bl	8010b80 <HAL_TIMEx_MasterConfigSynchronization>
 800ca02:	b108      	cbz	r0, 800ca08 <main+0x284>
 800ca04:	b672      	cpsid	i
 800ca06:	e7fe      	b.n	800ca06 <main+0x282>
  sConfigOC.Pulse = 25-1;
 800ca08:	2318      	movs	r3, #24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ca0a:	4602      	mov	r2, r0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ca0c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ca10:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ca14:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800ca16:	2430      	movs	r4, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ca18:	a908      	add	r1, sp, #32
 800ca1a:	4628      	mov	r0, r5
  sConfigOC.Pulse = 25-1;
 800ca1c:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800ca1e:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ca20:	f003 ff84 	bl	801092c <HAL_TIM_OC_ConfigChannel>
 800ca24:	4603      	mov	r3, r0
 800ca26:	b1a8      	cbz	r0, 800ca54 <main+0x2d0>
 800ca28:	b672      	cpsid	i
 800ca2a:	e7fe      	b.n	800ca2a <main+0x2a6>
 800ca2c:	200002cc 	.word	0x200002cc
 800ca30:	2000024c 	.word	0x2000024c
 800ca34:	20000ff8 	.word	0x20000ff8
 800ca38:	40003c00 	.word	0x40003c00
 800ca3c:	2000028c 	.word	0x2000028c
 800ca40:	40000c00 	.word	0x40000c00
 800ca44:	20000f30 	.word	0x20000f30
 800ca48:	40000800 	.word	0x40000800
 800ca4c:	20000ef0 	.word	0x20000ef0
 800ca50:	40010400 	.word	0x40010400
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800ca54:	6829      	ldr	r1, [r5, #0]
 800ca56:	698a      	ldr	r2, [r1, #24]
 800ca58:	f042 0208 	orr.w	r2, r2, #8
 800ca5c:	618a      	str	r2, [r1, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800ca5e:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ca60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800ca64:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ca66:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 800ca6a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ca6e:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ca70:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ca72:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800ca74:	f004 f8ca 	bl	8010c0c <HAL_TIMEx_ConfigBreakDeadTime>
 800ca78:	4604      	mov	r4, r0
 800ca7a:	b108      	cbz	r0, 800ca80 <main+0x2fc>
 800ca7c:	b672      	cpsid	i
 800ca7e:	e7fe      	b.n	800ca7e <main+0x2fa>
  HAL_TIM_MspPostInit(&htim8);
 800ca80:	4628      	mov	r0, r5
 800ca82:	f000 fa17 	bl	800ceb4 <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 800ca86:	4b2d      	ldr	r3, [pc, #180]	; (800cb3c <main+0x3b8>)
 800ca88:	492d      	ldr	r1, [pc, #180]	; (800cb40 <main+0x3bc>)
  htim1.Init.Prescaler = 168-1;
 800ca8a:	605e      	str	r6, [r3, #4]
  htim1.Init.Period = 1000-1;
 800ca8c:	f240 32e7 	movw	r2, #999	; 0x3e7
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ca90:	4618      	mov	r0, r3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ca92:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800ca96:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ca9a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca9e:	609c      	str	r4, [r3, #8]
  htim1.Init.RepetitionCounter = 0;
 800caa0:	e9c3 4404 	strd	r4, r4, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800caa4:	619c      	str	r4, [r3, #24]
  htim1.Instance = TIM1;
 800caa6:	6019      	str	r1, [r3, #0]
  htim1.Init.Period = 1000-1;
 800caa8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800caaa:	f003 fe65 	bl	8010778 <HAL_TIM_Base_Init>
 800caae:	b108      	cbz	r0, 800cab4 <main+0x330>
 800cab0:	b672      	cpsid	i
 800cab2:	e7fe      	b.n	800cab2 <main+0x32e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800cab8:	a90f      	add	r1, sp, #60	; 0x3c
 800caba:	4820      	ldr	r0, [pc, #128]	; (800cb3c <main+0x3b8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cabc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800cabe:	f003 fc91 	bl	80103e4 <HAL_TIM_ConfigClockSource>
 800cac2:	4603      	mov	r3, r0
 800cac4:	b108      	cbz	r0, 800caca <main+0x346>
 800cac6:	b672      	cpsid	i
 800cac8:	e7fe      	b.n	800cac8 <main+0x344>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800caca:	a908      	add	r1, sp, #32
 800cacc:	481b      	ldr	r0, [pc, #108]	; (800cb3c <main+0x3b8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cace:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800cad2:	f004 f855 	bl	8010b80 <HAL_TIMEx_MasterConfigSynchronization>
 800cad6:	b118      	cbz	r0, 800cae0 <main+0x35c>
 800cad8:	b672      	cpsid	i
 800cada:	e7fe      	b.n	800cada <main+0x356>
		  Explore();
 800cadc:	f7ff fb26 	bl	800c12c <Explore>
	  switch( startup_mode )
 800cae0:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800cae4:	2b07      	cmp	r3, #7
 800cae6:	d8fd      	bhi.n	800cae4 <main+0x360>
 800cae8:	a201      	add	r2, pc, #4	; (adr r2, 800caf0 <main+0x36c>)
 800caea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caee:	bf00      	nop
 800caf0:	0800cb11 	.word	0x0800cb11
 800caf4:	0800cb35 	.word	0x0800cb35
 800caf8:	0800cb2f 	.word	0x0800cb2f
 800cafc:	0800cb29 	.word	0x0800cb29
 800cb00:	0800cb23 	.word	0x0800cb23
 800cb04:	0800cb1d 	.word	0x0800cb1d
 800cb08:	0800cadd 	.word	0x0800cadd
 800cb0c:	0800cb17 	.word	0x0800cb17
		  ParameterSetting();
 800cb10:	f7ff f826 	bl	800bb60 <ParameterSetting>
		  break;
 800cb14:	e7e4      	b.n	800cae0 <main+0x35c>
		  WritingFree();
 800cb16:	f7ff f8f3 	bl	800bd00 <WritingFree>
		  break;
 800cb1a:	e7e1      	b.n	800cae0 <main+0x35c>
		  GainTestAVelo();
 800cb1c:	f7ff f8b6 	bl	800bc8c <GainTestAVelo>
		  break;
 800cb20:	e7de      	b.n	800cae0 <main+0x35c>
		  FastestRun();
 800cb22:	f7ff f92d 	bl	800bd80 <FastestRun>
		  break;
 800cb26:	e7db      	b.n	800cae0 <main+0x35c>
		  Debug();
 800cb28:	f7fe ffb0 	bl	800ba8c <Debug>
		  break;
 800cb2c:	e7d8      	b.n	800cae0 <main+0x35c>
		  GainTestDWall();
 800cb2e:	f7ff f855 	bl	800bbdc <GainTestDWall>
		  break;
 800cb32:	e7d5      	b.n	800cae0 <main+0x35c>
		  GainTestRWall();
 800cb34:	f7ff f81c 	bl	800bb70 <GainTestRWall>
		  break;
 800cb38:	e7d2      	b.n	800cae0 <main+0x35c>
 800cb3a:	bf00      	nop
 800cb3c:	20001138 	.word	0x20001138
 800cb40:	40010000 	.word	0x40010000

0800cb44 <Error_Handler>:
 800cb44:	b672      	cpsid	i
 800cb46:	e7fe      	b.n	800cb46 <Error_Handler+0x2>

0800cb48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cb48:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb4a:	4b0c      	ldr	r3, [pc, #48]	; (800cb7c <HAL_MspInit+0x34>)
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	9100      	str	r1, [sp, #0]
 800cb50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb56:	645a      	str	r2, [r3, #68]	; 0x44
 800cb58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb5a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800cb5e:	9200      	str	r2, [sp, #0]
 800cb60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cb62:	9101      	str	r1, [sp, #4]
 800cb64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800cb6a:	641a      	str	r2, [r3, #64]	; 0x40
 800cb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb72:	9301      	str	r3, [sp, #4]
 800cb74:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cb76:	b002      	add	sp, #8
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	40023800 	.word	0x40023800

0800cb80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800cb80:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800cb82:	6803      	ldr	r3, [r0, #0]
 800cb84:	4a47      	ldr	r2, [pc, #284]	; (800cca4 <HAL_ADC_MspInit+0x124>)
{
 800cb86:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb88:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800cb8a:	4293      	cmp	r3, r2
{
 800cb8c:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb8e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800cb92:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800cb96:	9409      	str	r4, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 800cb98:	d004      	beq.n	800cba4 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800cb9a:	4a43      	ldr	r2, [pc, #268]	; (800cca8 <HAL_ADC_MspInit+0x128>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d04e      	beq.n	800cc3e <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800cba0:	b00b      	add	sp, #44	; 0x2c
 800cba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800cba4:	4b41      	ldr	r3, [pc, #260]	; (800ccac <HAL_ADC_MspInit+0x12c>)
 800cba6:	9400      	str	r4, [sp, #0]
 800cba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 800cbaa:	4e41      	ldr	r6, [pc, #260]	; (800ccb0 <HAL_ADC_MspInit+0x130>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cbac:	4841      	ldr	r0, [pc, #260]	; (800ccb4 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800cbae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cbb2:	645a      	str	r2, [r3, #68]	; 0x44
 800cbb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbb6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800cbba:	9200      	str	r2, [sp, #0]
 800cbbc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cbbe:	9401      	str	r4, [sp, #4]
 800cbc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbc2:	f042 0204 	orr.w	r2, r2, #4
 800cbc6:	631a      	str	r2, [r3, #48]	; 0x30
 800cbc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbca:	f002 0204 	and.w	r2, r2, #4
 800cbce:	9201      	str	r2, [sp, #4]
 800cbd0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cbd2:	9402      	str	r4, [sp, #8]
 800cbd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbd6:	f042 0202 	orr.w	r2, r2, #2
 800cbda:	631a      	str	r2, [r3, #48]	; 0x30
 800cbdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbde:	f003 0302 	and.w	r3, r3, #2
 800cbe2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cbe4:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800cbe6:	2311      	movs	r3, #17
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cbe8:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cbea:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800cbec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cbee:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cbf0:	f002 fad0 	bl	800f194 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800cbf4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cbf6:	a905      	add	r1, sp, #20
 800cbf8:	482f      	ldr	r0, [pc, #188]	; (800ccb8 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800cbfa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbfc:	e9cd 7406 	strd	r7, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc00:	f002 fac8 	bl	800f194 <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800cc04:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cc08:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc1.Instance = DMA2_Stream0;
 800cc0c:	482b      	ldr	r0, [pc, #172]	; (800ccbc <HAL_ADC_MspInit+0x13c>)
 800cc0e:	6030      	str	r0, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800cc10:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800cc14:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800cc16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800cc1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800cc1e:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800cc22:	4630      	mov	r0, r6
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800cc24:	6137      	str	r7, [r6, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800cc26:	e9c6 1205 	strd	r1, r2, [r6, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800cc2a:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800cc2c:	f001 ff84 	bl	800eb38 <HAL_DMA_Init>
 800cc30:	b108      	cbz	r0, 800cc36 <HAL_ADC_MspInit+0xb6>
      Error_Handler();
 800cc32:	f7ff ff87 	bl	800cb44 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800cc36:	63ae      	str	r6, [r5, #56]	; 0x38
 800cc38:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800cc3a:	b00b      	add	sp, #44	; 0x2c
 800cc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 800cc3e:	4b1b      	ldr	r3, [pc, #108]	; (800ccac <HAL_ADC_MspInit+0x12c>)
 800cc40:	9403      	str	r4, [sp, #12]
 800cc42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc2.Instance = DMA2_Stream2;
 800cc44:	4e1e      	ldr	r6, [pc, #120]	; (800ccc0 <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc46:	481b      	ldr	r0, [pc, #108]	; (800ccb4 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800cc48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc4c:	645a      	str	r2, [r3, #68]	; 0x44
 800cc4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc50:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800cc54:	9203      	str	r2, [sp, #12]
 800cc56:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc58:	9404      	str	r4, [sp, #16]
 800cc5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc5c:	f042 0204 	orr.w	r2, r2, #4
 800cc60:	631a      	str	r2, [r3, #48]	; 0x30
 800cc62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc64:	f003 0304 	and.w	r3, r3, #4
 800cc68:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800cc6a:	2322      	movs	r3, #34	; 0x22
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc6c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800cc6e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cc70:	2303      	movs	r3, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc72:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cc74:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc76:	f002 fa8d 	bl	800f194 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800cc7a:	4a12      	ldr	r2, [pc, #72]	; (800ccc4 <HAL_ADC_MspInit+0x144>)
 800cc7c:	6032      	str	r2, [r6, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800cc7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800cc82:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800cc86:	6073      	str	r3, [r6, #4]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800cc88:	6130      	str	r0, [r6, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cc8a:	60b4      	str	r4, [r6, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800cc8c:	60f4      	str	r4, [r6, #12]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cc8e:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800cc92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800cc96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800cc9a:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800cc9e:	4630      	mov	r0, r6
 800cca0:	e7c1      	b.n	800cc26 <HAL_ADC_MspInit+0xa6>
 800cca2:	bf00      	nop
 800cca4:	40012000 	.word	0x40012000
 800cca8:	40012100 	.word	0x40012100
 800ccac:	40023800 	.word	0x40023800
 800ccb0:	200010d8 	.word	0x200010d8
 800ccb4:	40020800 	.word	0x40020800
 800ccb8:	40020400 	.word	0x40020400
 800ccbc:	40026410 	.word	0x40026410
 800ccc0:	20001178 	.word	0x20001178
 800ccc4:	40026440 	.word	0x40026440

0800ccc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ccc8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI3)
 800ccca:	6801      	ldr	r1, [r0, #0]
 800cccc:	4a18      	ldr	r2, [pc, #96]	; (800cd30 <HAL_SPI_MspInit+0x68>)
{
 800ccce:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccd0:	2300      	movs	r3, #0
  if(hspi->Instance==SPI3)
 800ccd2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccd4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ccd8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ccdc:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 800ccde:	d001      	beq.n	800cce4 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800cce0:	b008      	add	sp, #32
 800cce2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 800cce4:	f502 32fe 	add.w	r2, r2, #130048	; 0x1fc00
 800cce8:	9301      	str	r3, [sp, #4]
 800ccea:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ccec:	4811      	ldr	r0, [pc, #68]	; (800cd34 <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800ccee:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800ccf2:	6411      	str	r1, [r2, #64]	; 0x40
 800ccf4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ccf6:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
 800ccfa:	9101      	str	r1, [sp, #4]
 800ccfc:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ccfe:	9302      	str	r3, [sp, #8]
 800cd00:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cd02:	f043 0304 	orr.w	r3, r3, #4
 800cd06:	6313      	str	r3, [r2, #48]	; 0x30
 800cd08:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cd0a:	f003 0304 	and.w	r3, r3, #4
 800cd0e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd10:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800cd12:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd14:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800cd16:	f44f 55e0 	mov.w	r5, #7168	; 0x1c00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd1a:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cd1c:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd1e:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800cd22:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd26:	f002 fa35 	bl	800f194 <HAL_GPIO_Init>
}
 800cd2a:	b008      	add	sp, #32
 800cd2c:	bd70      	pop	{r4, r5, r6, pc}
 800cd2e:	bf00      	nop
 800cd30:	40003c00 	.word	0x40003c00
 800cd34:	40020800 	.word	0x40020800

0800cd38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800cd38:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 800cd3a:	6803      	ldr	r3, [r0, #0]
 800cd3c:	4a2b      	ldr	r2, [pc, #172]	; (800cdec <HAL_TIM_Base_MspInit+0xb4>)
 800cd3e:	4293      	cmp	r3, r2
{
 800cd40:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 800cd42:	d02a      	beq.n	800cd9a <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800cd44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd48:	d008      	beq.n	800cd5c <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 800cd4a:	4a29      	ldr	r2, [pc, #164]	; (800cdf0 <HAL_TIM_Base_MspInit+0xb8>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d015      	beq.n	800cd7c <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 800cd50:	4a28      	ldr	r2, [pc, #160]	; (800cdf4 <HAL_TIM_Base_MspInit+0xbc>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d037      	beq.n	800cdc6 <HAL_TIM_Base_MspInit+0x8e>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800cd56:	b005      	add	sp, #20
 800cd58:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cd5c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800cd60:	2200      	movs	r2, #0
 800cd62:	9201      	str	r2, [sp, #4]
 800cd64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd66:	f042 0201 	orr.w	r2, r2, #1
 800cd6a:	641a      	str	r2, [r3, #64]	; 0x40
 800cd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd6e:	f003 0301 	and.w	r3, r3, #1
 800cd72:	9301      	str	r3, [sp, #4]
 800cd74:	9b01      	ldr	r3, [sp, #4]
}
 800cd76:	b005      	add	sp, #20
 800cd78:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 800cd7c:	4b1e      	ldr	r3, [pc, #120]	; (800cdf8 <HAL_TIM_Base_MspInit+0xc0>)
 800cd7e:	2200      	movs	r2, #0
 800cd80:	9202      	str	r2, [sp, #8]
 800cd82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd84:	f042 0208 	orr.w	r2, r2, #8
 800cd88:	641a      	str	r2, [r3, #64]	; 0x40
 800cd8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd8c:	f003 0308 	and.w	r3, r3, #8
 800cd90:	9302      	str	r3, [sp, #8]
 800cd92:	9b02      	ldr	r3, [sp, #8]
}
 800cd94:	b005      	add	sp, #20
 800cd96:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	4b16      	ldr	r3, [pc, #88]	; (800cdf8 <HAL_TIM_Base_MspInit+0xc0>)
 800cd9e:	9200      	str	r2, [sp, #0]
 800cda0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800cda2:	f041 0101 	orr.w	r1, r1, #1
 800cda6:	6459      	str	r1, [r3, #68]	; 0x44
 800cda8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdaa:	f003 0301 	and.w	r3, r3, #1
 800cdae:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800cdb0:	2019      	movs	r0, #25
 800cdb2:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800cdb4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800cdb6:	f001 fe61 	bl	800ea7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800cdba:	2019      	movs	r0, #25
}
 800cdbc:	b005      	add	sp, #20
 800cdbe:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800cdc2:	f001 be91 	b.w	800eae8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800cdc6:	4b0c      	ldr	r3, [pc, #48]	; (800cdf8 <HAL_TIM_Base_MspInit+0xc0>)
 800cdc8:	2200      	movs	r2, #0
 800cdca:	9203      	str	r2, [sp, #12]
 800cdcc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800cdce:	f041 0102 	orr.w	r1, r1, #2
 800cdd2:	6459      	str	r1, [r3, #68]	; 0x44
 800cdd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdd6:	f003 0302 	and.w	r3, r3, #2
 800cdda:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800cddc:	202c      	movs	r0, #44	; 0x2c
 800cdde:	2101      	movs	r1, #1
    __HAL_RCC_TIM8_CLK_ENABLE();
 800cde0:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800cde2:	f001 fe4b 	bl	800ea7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800cde6:	202c      	movs	r0, #44	; 0x2c
 800cde8:	e7e8      	b.n	800cdbc <HAL_TIM_Base_MspInit+0x84>
 800cdea:	bf00      	nop
 800cdec:	40010000 	.word	0x40010000
 800cdf0:	40000c00 	.word	0x40000c00
 800cdf4:	40010400 	.word	0x40010400
 800cdf8:	40023800 	.word	0x40023800

0800cdfc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800cdfc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM3)
 800cdfe:	6802      	ldr	r2, [r0, #0]
 800ce00:	4927      	ldr	r1, [pc, #156]	; (800cea0 <HAL_TIM_Encoder_MspInit+0xa4>)
{
 800ce02:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce04:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM3)
 800ce06:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce08:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ce0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ce10:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim_encoder->Instance==TIM3)
 800ce12:	d024      	beq.n	800ce5e <HAL_TIM_Encoder_MspInit+0x62>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM4)
 800ce14:	4923      	ldr	r1, [pc, #140]	; (800cea4 <HAL_TIM_Encoder_MspInit+0xa8>)
 800ce16:	428a      	cmp	r2, r1
 800ce18:	d001      	beq.n	800ce1e <HAL_TIM_Encoder_MspInit+0x22>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800ce1a:	b00a      	add	sp, #40	; 0x28
 800ce1c:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ce1e:	4a22      	ldr	r2, [pc, #136]	; (800cea8 <HAL_TIM_Encoder_MspInit+0xac>)
 800ce20:	9303      	str	r3, [sp, #12]
 800ce22:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce24:	4821      	ldr	r0, [pc, #132]	; (800ceac <HAL_TIM_Encoder_MspInit+0xb0>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ce26:	f041 0104 	orr.w	r1, r1, #4
 800ce2a:	6411      	str	r1, [r2, #64]	; 0x40
 800ce2c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ce2e:	f001 0104 	and.w	r1, r1, #4
 800ce32:	9103      	str	r1, [sp, #12]
 800ce34:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ce36:	9304      	str	r3, [sp, #16]
 800ce38:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ce3a:	f043 0302 	orr.w	r3, r3, #2
 800ce3e:	6313      	str	r3, [r2, #48]	; 0x30
 800ce40:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ce42:	f003 0302 	and.w	r3, r3, #2
 800ce46:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ce48:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce4a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce4c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ce4e:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800ce50:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce52:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce56:	f002 f99d 	bl	800f194 <HAL_GPIO_Init>
}
 800ce5a:	b00a      	add	sp, #40	; 0x28
 800ce5c:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ce5e:	4a12      	ldr	r2, [pc, #72]	; (800cea8 <HAL_TIM_Encoder_MspInit+0xac>)
 800ce60:	9301      	str	r3, [sp, #4]
 800ce62:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce64:	4812      	ldr	r0, [pc, #72]	; (800ceb0 <HAL_TIM_Encoder_MspInit+0xb4>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ce66:	f041 0102 	orr.w	r1, r1, #2
 800ce6a:	6411      	str	r1, [r2, #64]	; 0x40
 800ce6c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ce6e:	f001 0102 	and.w	r1, r1, #2
 800ce72:	9101      	str	r1, [sp, #4]
 800ce74:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce76:	9302      	str	r3, [sp, #8]
 800ce78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ce7a:	f043 0301 	orr.w	r3, r3, #1
 800ce7e:	6313      	str	r3, [r2, #48]	; 0x30
 800ce80:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ce82:	f003 0301 	and.w	r3, r3, #1
 800ce86:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ce88:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce8a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce8c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce8e:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ce90:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce92:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce96:	f002 f97d 	bl	800f194 <HAL_GPIO_Init>
}
 800ce9a:	b00a      	add	sp, #40	; 0x28
 800ce9c:	bd10      	pop	{r4, pc}
 800ce9e:	bf00      	nop
 800cea0:	40000400 	.word	0x40000400
 800cea4:	40000800 	.word	0x40000800
 800cea8:	40023800 	.word	0x40023800
 800ceac:	40020400 	.word	0x40020400
 800ceb0:	40020000 	.word	0x40020000

0800ceb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ceb4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM2)
 800ceb6:	6803      	ldr	r3, [r0, #0]
{
 800ceb8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ceba:	2400      	movs	r4, #0
  if(htim->Instance==TIM2)
 800cebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cec0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800cec4:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800cec8:	9409      	str	r4, [sp, #36]	; 0x24
  if(htim->Instance==TIM2)
 800ceca:	d007      	beq.n	800cedc <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 800cecc:	4a30      	ldr	r2, [pc, #192]	; (800cf90 <HAL_TIM_MspPostInit+0xdc>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d049      	beq.n	800cf66 <HAL_TIM_MspPostInit+0xb2>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM8)
 800ced2:	4a30      	ldr	r2, [pc, #192]	; (800cf94 <HAL_TIM_MspPostInit+0xe0>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d01b      	beq.n	800cf10 <HAL_TIM_MspPostInit+0x5c>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800ced8:	b00a      	add	sp, #40	; 0x28
 800ceda:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cedc:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800cee0:	9401      	str	r4, [sp, #4]
 800cee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cee4:	482c      	ldr	r0, [pc, #176]	; (800cf98 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cee6:	f042 0201 	orr.w	r2, r2, #1
 800ceea:	631a      	str	r2, [r3, #48]	; 0x30
 800ceec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceee:	f003 0301 	and.w	r3, r3, #1
 800cef2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cef4:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800cef6:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cef8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800cefa:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cefc:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cefe:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf00:	e9cd 5405 	strd	r5, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800cf04:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf08:	f002 f944 	bl	800f194 <HAL_GPIO_Init>
}
 800cf0c:	b00a      	add	sp, #40	; 0x28
 800cf0e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf10:	4b22      	ldr	r3, [pc, #136]	; (800cf9c <HAL_TIM_MspPostInit+0xe8>)
 800cf12:	9403      	str	r4, [sp, #12]
 800cf14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf16:	4820      	ldr	r0, [pc, #128]	; (800cf98 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf18:	f042 0201 	orr.w	r2, r2, #1
 800cf1c:	631a      	str	r2, [r3, #48]	; 0x30
 800cf1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf20:	f002 0201 	and.w	r2, r2, #1
 800cf24:	9203      	str	r2, [sp, #12]
 800cf26:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf28:	9404      	str	r4, [sp, #16]
 800cf2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf2c:	f042 0204 	orr.w	r2, r2, #4
 800cf30:	631a      	str	r2, [r3, #48]	; 0x30
 800cf32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf34:	f003 0304 	and.w	r3, r3, #4
 800cf38:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf3a:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800cf3c:	2320      	movs	r3, #32
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cf3e:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf40:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf42:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cf44:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf46:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf4a:	f002 f923 	bl	800f194 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800cf4e:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf50:	a905      	add	r1, sp, #20
 800cf52:	4813      	ldr	r0, [pc, #76]	; (800cfa0 <HAL_TIM_MspPostInit+0xec>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf54:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cf56:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf58:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800cf5c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf5e:	f002 f919 	bl	800f194 <HAL_GPIO_Init>
}
 800cf62:	b00a      	add	sp, #40	; 0x28
 800cf64:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf66:	4b0d      	ldr	r3, [pc, #52]	; (800cf9c <HAL_TIM_MspPostInit+0xe8>)
 800cf68:	9402      	str	r4, [sp, #8]
 800cf6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf6c:	480a      	ldr	r0, [pc, #40]	; (800cf98 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf6e:	f042 0201 	orr.w	r2, r2, #1
 800cf72:	631a      	str	r2, [r3, #48]	; 0x30
 800cf74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf76:	f003 0301 	and.w	r3, r3, #1
 800cf7a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf7c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800cf7e:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf80:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800cf82:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf84:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf88:	f002 f904 	bl	800f194 <HAL_GPIO_Init>
}
 800cf8c:	b00a      	add	sp, #40	; 0x28
 800cf8e:	bd70      	pop	{r4, r5, r6, pc}
 800cf90:	40000c00 	.word	0x40000c00
 800cf94:	40010400 	.word	0x40010400
 800cf98:	40020000 	.word	0x40020000
 800cf9c:	40023800 	.word	0x40023800
 800cfa0:	40020800 	.word	0x40020800

0800cfa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cfa4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800cfa6:	6801      	ldr	r1, [r0, #0]
 800cfa8:	4a18      	ldr	r2, [pc, #96]	; (800d00c <HAL_UART_MspInit+0x68>)
{
 800cfaa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfac:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 800cfae:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfb0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800cfb4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800cfb8:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800cfba:	d001      	beq.n	800cfc0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800cfbc:	b008      	add	sp, #32
 800cfbe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800cfc0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800cfc4:	9301      	str	r3, [sp, #4]
 800cfc6:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfc8:	4811      	ldr	r0, [pc, #68]	; (800d010 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800cfca:	f041 0110 	orr.w	r1, r1, #16
 800cfce:	6451      	str	r1, [r2, #68]	; 0x44
 800cfd0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800cfd2:	f001 0110 	and.w	r1, r1, #16
 800cfd6:	9101      	str	r1, [sp, #4]
 800cfd8:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cfda:	9302      	str	r3, [sp, #8]
 800cfdc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cfde:	f043 0301 	orr.w	r3, r3, #1
 800cfe2:	6313      	str	r3, [r2, #48]	; 0x30
 800cfe4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cfe6:	f003 0301 	and.w	r3, r3, #1
 800cfea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cfec:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cfee:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cff0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cff2:	f44f 65c0 	mov.w	r5, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cff6:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cff8:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cffa:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cffe:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d002:	f002 f8c7 	bl	800f194 <HAL_GPIO_Init>
}
 800d006:	b008      	add	sp, #32
 800d008:	bd70      	pop	{r4, r5, r6, pc}
 800d00a:	bf00      	nop
 800d00c:	40011000 	.word	0x40011000
 800d010:	40020000 	.word	0x40020000

0800d014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d014:	e7fe      	b.n	800d014 <NMI_Handler>
 800d016:	bf00      	nop

0800d018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d018:	e7fe      	b.n	800d018 <HardFault_Handler>
 800d01a:	bf00      	nop

0800d01c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d01c:	e7fe      	b.n	800d01c <MemManage_Handler>
 800d01e:	bf00      	nop

0800d020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d020:	e7fe      	b.n	800d020 <BusFault_Handler>
 800d022:	bf00      	nop

0800d024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d024:	e7fe      	b.n	800d024 <UsageFault_Handler>
 800d026:	bf00      	nop

0800d028 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop

0800d02c <DebugMon_Handler>:
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop

0800d030 <PendSV_Handler>:
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop

0800d034 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d034:	f001 ba72 	b.w	800e51c <HAL_IncTick>

0800d038 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d038:	4801      	ldr	r0, [pc, #4]	; (800d040 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800d03a:	f003 ba81 	b.w	8010540 <HAL_TIM_IRQHandler>
 800d03e:	bf00      	nop
 800d040:	20001138 	.word	0x20001138

0800d044 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800d044:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d048:	f002 b9ac 	b.w	800f3a4 <HAL_GPIO_EXTI_IRQHandler>

0800d04c <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d04c:	4801      	ldr	r0, [pc, #4]	; (800d054 <TIM8_UP_TIM13_IRQHandler+0x8>)
 800d04e:	f003 ba77 	b.w	8010540 <HAL_TIM_IRQHandler>
 800d052:	bf00      	nop
 800d054:	20000ef0 	.word	0x20000ef0

0800d058 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800d058:	4801      	ldr	r0, [pc, #4]	; (800d060 <DMA2_Stream0_IRQHandler+0x8>)
 800d05a:	f001 be8d 	b.w	800ed78 <HAL_DMA_IRQHandler>
 800d05e:	bf00      	nop
 800d060:	200010d8 	.word	0x200010d8

0800d064 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800d064:	4801      	ldr	r0, [pc, #4]	; (800d06c <DMA2_Stream2_IRQHandler+0x8>)
 800d066:	f001 be87 	b.w	800ed78 <HAL_DMA_IRQHandler>
 800d06a:	bf00      	nop
 800d06c:	20001178 	.word	0x20001178

0800d070 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d070:	4b05      	ldr	r3, [pc, #20]	; (800d088 <SystemInit+0x18>)
 800d072:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d076:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d07a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800d07e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d082:	6099      	str	r1, [r3, #8]
#endif
}
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	e000ed00 	.word	0xe000ed00

0800d08c <initSearchData>:
#include "MicroMouse.h"
#include "Action.h"
#include "Search.h"

void initSearchData(maze_node *my_maze, profile *Mouse)
{
 800d08c:	b570      	push	{r4, r5, r6, lr}
 800d08e:	4604      	mov	r4, r0
 800d090:	b082      	sub	sp, #8
 800d092:	460d      	mov	r5, r1
    initMaze(my_maze);
 800d094:	f7fd fcca 	bl	800aa2c <initMaze>
    initWeight(my_maze); //3/20ms
 800d098:	4620      	mov	r0, r4
 800d09a:	f7fd fcab 	bl	800a9f4 <initWeight>

    //状態の初期化
    initProfile(Mouse, my_maze);
 800d09e:	4621      	mov	r1, r4
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	f7fe fb79 	bl	800b798 <initProfile>
    Mouse->now.node = &(my_maze->RawNode[0][0]);
    Mouse->next.node = &(my_maze->RawNode[0][1]);
 800d0a6:	f104 0308 	add.w	r3, r4, #8
 800d0aa:	61eb      	str	r3, [r5, #28]

    //スタート座標にいる状態で、現在の重みを更新
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800d0ac:	2601      	movs	r6, #1
 800d0ae:	2302      	movs	r3, #2
 800d0b0:	786a      	ldrb	r2, [r5, #1]
 800d0b2:	7829      	ldrb	r1, [r5, #0]
    Mouse->now.node = &(my_maze->RawNode[0][0]);
 800d0b4:	612c      	str	r4, [r5, #16]
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	e9cd 3600 	strd	r3, r6, [sp]
 800d0bc:	f7fd fe88 	bl	800add0 <updateAllNodeWeight>
}
 800d0c0:	b002      	add	sp, #8
 800d0c2:	bd70      	pop	{r4, r5, r6, pc}

0800d0c4 <updateRealSearch>:

void updateRealSearch()
{
 800d0c4:	b570      	push	{r4, r5, r6, lr}
	//wall_state wall_st[4]={0};

	//壁センサ値を読んで、各方角の壁の有無を判定
		//区画進入直前なので、更新予定の方角と座標がNextに入っているはず
		//前後左右の値として入れる
	shiftState(&my_mouse);
 800d0c6:	4d6f      	ldr	r5, [pc, #444]	; (800d284 <updateRealSearch+0x1c0>)
{
 800d0c8:	b082      	sub	sp, #8
	shiftState(&my_mouse);
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	f7fe fb7e 	bl	800b7cc <shiftState>

    switch (my_mouse.now.car)
 800d0d0:	7aab      	ldrb	r3, [r5, #10]
 800d0d2:	2b06      	cmp	r3, #6
 800d0d4:	f200 80d0 	bhi.w	800d278 <updateRealSearch+0x1b4>
 800d0d8:	e8df f003 	tbb	[pc, r3]
 800d0dc:	ce76cea2 	.word	0xce76cea2
 800d0e0:	ce4a      	.short	0xce4a
 800d0e2:	04          	.byte	0x04
 800d0e3:	00          	.byte	0x00
    	wall_dir[0] = NOWALL;
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
        break;
    case west:
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d0e4:	4b68      	ldr	r3, [pc, #416]	; (800d288 <updateRealSearch+0x1c4>)
 800d0e6:	ed9f 5a69 	vldr	s10, [pc, #420]	; 800d28c <updateRealSearch+0x1c8>
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d0ea:	edd3 5a03 	vldr	s11, [r3, #12]
 800d0ee:	edd3 7a00 	vldr	s15, [r3]
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d0f2:	edd3 4a01 	vldr	s9, [r3, #4]
    	wall_dir[1] = NOWALL;
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d0f6:	ed93 6a02 	vldr	s12, [r3, #8]
 800d0fa:	eddf 6a65 	vldr	s13, [pc, #404]	; 800d290 <updateRealSearch+0x1cc>
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d0fe:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800d294 <updateRealSearch+0x1d0>
 800d102:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d106:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d10a:	eef4 4ac5 	vcmpe.f32	s9, s10
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d10e:	ee67 7aa5 	vmul.f32	s15, s15, s11
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d116:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800d11a:	bfcc      	ite	gt
 800d11c:	2601      	movgt	r6, #1
 800d11e:	2600      	movle	r6, #0
 800d120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d124:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d128:	bfcc      	ite	gt
 800d12a:	2101      	movgt	r1, #1
 800d12c:	2100      	movle	r1, #0
 800d12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d132:	bfcc      	ite	gt
 800d134:	2201      	movgt	r2, #1
 800d136:	2200      	movle	r2, #0
        break;
 800d138:	2000      	movs	r0, #0
//	Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
//	Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
//	Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
//	Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
    //アクションが終わるときがノードの上にいる状態なので、状態シフト済みとする（この関数はアクション中に呼び出される想定）
    my_mouse.now.wall.north = wall_dir[0];
 800d13a:	7b2c      	ldrb	r4, [r5, #12]
    my_mouse.now.wall.south = wall_dir[2];
    my_mouse.now.wall.west = wall_dir[3];

	//getWallNow(&(my_mouse->now), &wall[0]);

	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800d13c:	7a6b      	ldrb	r3, [r5, #9]
    my_mouse.now.wall.north = wall_dir[0];
 800d13e:	f366 0401 	bfi	r4, r6, #0, #2
    my_mouse.now.wall.east = wall_dir[1];
 800d142:	f360 0483 	bfi	r4, r0, #2, #2
    my_mouse.now.wall.south = wall_dir[2];
 800d146:	f361 1405 	bfi	r4, r1, #4, #2
    my_mouse.now.wall.west = wall_dir[3];
 800d14a:	f362 1487 	bfi	r4, r2, #6, #2
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800d14e:	4952      	ldr	r1, [pc, #328]	; (800d298 <updateRealSearch+0x1d4>)
 800d150:	7a2a      	ldrb	r2, [r5, #8]
 800d152:	4852      	ldr	r0, [pc, #328]	; (800d29c <updateRealSearch+0x1d8>)
    my_mouse.now.wall.west = wall_dir[3];
 800d154:	732c      	strb	r4, [r5, #12]
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800d156:	f7fd fd73 	bl	800ac40 <updateNodeThree>

	updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800d15a:	2401      	movs	r4, #1
 800d15c:	2302      	movs	r3, #2
 800d15e:	786a      	ldrb	r2, [r5, #1]
 800d160:	7829      	ldrb	r1, [r5, #0]
 800d162:	484e      	ldr	r0, [pc, #312]	; (800d29c <updateRealSearch+0x1d8>)
 800d164:	e9cd 3400 	strd	r3, r4, [sp]
 800d168:	f7fd fe32 	bl	800add0 <updateAllNodeWeight>
}
 800d16c:	b002      	add	sp, #8
 800d16e:	bd70      	pop	{r4, r5, r6, pc}
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d170:	4b45      	ldr	r3, [pc, #276]	; (800d288 <updateRealSearch+0x1c4>)
 800d172:	eddf 5a47 	vldr	s11, [pc, #284]	; 800d290 <updateRealSearch+0x1cc>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d176:	edd3 4a03 	vldr	s9, [r3, #12]
 800d17a:	edd3 7a00 	vldr	s15, [r3]
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d17e:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d182:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800d294 <updateRealSearch+0x1d0>
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d186:	edd3 6a01 	vldr	s13, [r3, #4]
 800d18a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800d28c <updateRealSearch+0x1c8>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d18e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d192:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800d196:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d19a:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800d19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1a2:	eef4 7ac6 	vcmpe.f32	s15, s12
 800d1a6:	bfcc      	ite	gt
 800d1a8:	2001      	movgt	r0, #1
 800d1aa:	2000      	movle	r0, #0
 800d1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d1b0:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d1b4:	bfcc      	ite	gt
 800d1b6:	2101      	movgt	r1, #1
 800d1b8:	2100      	movle	r1, #0
 800d1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1be:	bfcc      	ite	gt
 800d1c0:	2201      	movgt	r2, #1
 800d1c2:	2200      	movle	r2, #0
        break;
 800d1c4:	2600      	movs	r6, #0
 800d1c6:	e7b8      	b.n	800d13a <updateRealSearch+0x76>
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d1c8:	4b2f      	ldr	r3, [pc, #188]	; (800d288 <updateRealSearch+0x1c4>)
 800d1ca:	eddf 5a31 	vldr	s11, [pc, #196]	; 800d290 <updateRealSearch+0x1cc>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1ce:	edd3 4a03 	vldr	s9, [r3, #12]
 800d1d2:	edd3 7a00 	vldr	s15, [r3]
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d1d6:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1da:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800d294 <updateRealSearch+0x1d0>
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d1de:	edd3 6a01 	vldr	s13, [r3, #4]
 800d1e2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d28c <updateRealSearch+0x1c8>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1e6:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d1ea:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800d1ee:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d1f2:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800d1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1fa:	eef4 7ac6 	vcmpe.f32	s15, s12
 800d1fe:	bfcc      	ite	gt
 800d200:	2601      	movgt	r6, #1
 800d202:	2600      	movle	r6, #0
 800d204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d208:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d20c:	bfcc      	ite	gt
 800d20e:	2001      	movgt	r0, #1
 800d210:	2000      	movle	r0, #0
 800d212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d216:	bfcc      	ite	gt
 800d218:	2101      	movgt	r1, #1
 800d21a:	2100      	movle	r1, #0
        break;
 800d21c:	2200      	movs	r2, #0
 800d21e:	e78c      	b.n	800d13a <updateRealSearch+0x76>
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d220:	4b19      	ldr	r3, [pc, #100]	; (800d288 <updateRealSearch+0x1c4>)
 800d222:	ed9f 5a1c 	vldr	s10, [pc, #112]	; 800d294 <updateRealSearch+0x1d0>
 800d226:	edd3 4a03 	vldr	s9, [r3, #12]
 800d22a:	edd3 7a00 	vldr	s15, [r3]
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d22e:	edd3 5a01 	vldr	s11, [r3, #4]
 800d232:	ed9f 6a16 	vldr	s12, [pc, #88]	; 800d28c <updateRealSearch+0x1c8>
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d236:	edd3 6a02 	vldr	s13, [r3, #8]
 800d23a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800d290 <updateRealSearch+0x1cc>
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d23e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d242:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800d246:	ee67 7aa4 	vmul.f32	s15, s15, s9
        break;
 800d24a:	2100      	movs	r1, #0
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d24c:	eef4 7ac5 	vcmpe.f32	s15, s10
 800d250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d254:	eef4 5ac6 	vcmpe.f32	s11, s12
 800d258:	bfcc      	ite	gt
 800d25a:	2601      	movgt	r6, #1
 800d25c:	460e      	movle	r6, r1
 800d25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d262:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d266:	bfcc      	ite	gt
 800d268:	2001      	movgt	r0, #1
 800d26a:	4608      	movle	r0, r1
 800d26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d270:	bfcc      	ite	gt
 800d272:	2201      	movgt	r2, #1
 800d274:	460a      	movle	r2, r1
        break;
 800d276:	e760      	b.n	800d13a <updateRealSearch+0x76>
    switch (my_mouse.now.car)
 800d278:	2200      	movs	r2, #0
 800d27a:	4611      	mov	r1, r2
 800d27c:	4610      	mov	r0, r2
 800d27e:	4616      	mov	r6, r2
 800d280:	e75b      	b.n	800d13a <updateRealSearch+0x76>
 800d282:	bf00      	nop
 800d284:	200004ec 	.word	0x200004ec
 800d288:	20000cbc 	.word	0x20000cbc
 800d28c:	42b40000 	.word	0x42b40000
 800d290:	42c80000 	.word	0x42c80000
 800d294:	42340000 	.word	0x42340000
 800d298:	200004f4 	.word	0x200004f4
 800d29c:	20000698 	.word	0x20000698

0800d2a0 <getNextDirection>:
//↑と↓は新ノードに来た時の処理なので、アクションの区切りをずらせばよさそう。
//現情報と次情報から次の進行方向を得る処理
void getNextDirection(maze_node *my_maze, profile *Mouse, char turn_mode)
{
 800d2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a4:	460c      	mov	r4, r1
	//メインでノード選択
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	7a89      	ldrb	r1, [r1, #10]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);

	//既知区間加速このswitch文中で書くかも
		//コマンドキューのときはここでコマンドを発行してキューに渡す
	AddVelocity = 0;
 800d2aa:	4d6e      	ldr	r5, [pc, #440]	; (800d464 <getNextDirection+0x1c4>)
{
 800d2ac:	4616      	mov	r6, r2
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800d2ae:	6922      	ldr	r2, [r4, #16]
{
 800d2b0:	4607      	mov	r7, r0
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800d2b2:	f7fd feaf 	bl	800b014 <getNextNode>
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 800d2b6:	f104 0114 	add.w	r1, r4, #20
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	61e0      	str	r0, [r4, #28]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 800d2be:	f104 0008 	add.w	r0, r4, #8
 800d2c2:	f7fe f915 	bl	800b4f0 <getNextState>
	//2つのアクションを組み合わせたときに壁とマップの更新が入ってしまわないようにする
	_Bool accel_or_not = false;
	int accel_or_decel = 0;
	switch(Mouse->next.dir)
 800d2c6:	7de3      	ldrb	r3, [r4, #23]
	AddVelocity = 0;
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	602a      	str	r2, [r5, #0]
	switch(Mouse->next.dir)
 800d2cc:	2b05      	cmp	r3, #5
 800d2ce:	d863      	bhi.n	800d398 <getNextDirection+0xf8>
 800d2d0:	e8df f003 	tbb	[pc, r3]
 800d2d4:	2d55240f 	.word	0x2d55240f
 800d2d8:	0348      	.short	0x0348
		Calc = SearchOrFast;
		TurnLeft(turn_mode);
		break;
	case left:
		//左旋回
		Calc = SearchOrFast;
 800d2da:	4a63      	ldr	r2, [pc, #396]	; (800d468 <getNextDirection+0x1c8>)
 800d2dc:	4b63      	ldr	r3, [pc, #396]	; (800d46c <getNextDirection+0x1cc>)
 800d2de:	6812      	ldr	r2, [r2, #0]
 800d2e0:	601a      	str	r2, [r3, #0]
		ChangeLED(4);
 800d2e2:	2004      	movs	r0, #4
 800d2e4:	f000 fb4c 	bl	800d980 <ChangeLED>
		TurnLeft(turn_mode);
 800d2e8:	4630      	mov	r0, r6
		break;
	}

}
 800d2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode);
 800d2ee:	f7fc bd4d 	b.w	8009d8c <TurnLeft>
		accel_or_not = judgeAccelorNot(my_maze, Mouse->next.car, Mouse->next.node);
 800d2f2:	4638      	mov	r0, r7
 800d2f4:	69e2      	ldr	r2, [r4, #28]
 800d2f6:	7da1      	ldrb	r1, [r4, #22]
 800d2f8:	f7fe f816 	bl	800b328 <judgeAccelorNot>
			if(VelocityMax == true)
 800d2fc:	4b5c      	ldr	r3, [pc, #368]	; (800d470 <getNextDirection+0x1d0>)
 800d2fe:	781b      	ldrb	r3, [r3, #0]
		if(accel_or_not == true) //既知で.直進
 800d300:	2800      	cmp	r0, #0
 800d302:	d04b      	beq.n	800d39c <getNextDirection+0xfc>
			if(VelocityMax == true)
 800d304:	2b00      	cmp	r3, #0
 800d306:	f000 80a3 	beq.w	800d450 <getNextDirection+0x1b0>
				AddVelocity = 245;
 800d30a:	4b5a      	ldr	r3, [pc, #360]	; (800d474 <getNextDirection+0x1d4>)
 800d30c:	602b      	str	r3, [r5, #0]
				ChangeLED(0);
 800d30e:	2000      	movs	r0, #0
 800d310:	f000 fb36 	bl	800d980 <ChangeLED>
 800d314:	edd5 7a00 	vldr	s15, [r5]
				accel_or_decel = 0; //そのまま
 800d318:	2000      	movs	r0, #0
 800d31a:	e04b      	b.n	800d3b4 <getNextDirection+0x114>
		Calc = SearchOrFast;
 800d31c:	4a52      	ldr	r2, [pc, #328]	; (800d468 <getNextDirection+0x1c8>)
 800d31e:	4b53      	ldr	r3, [pc, #332]	; (800d46c <getNextDirection+0x1cc>)
 800d320:	6812      	ldr	r2, [r2, #0]
 800d322:	601a      	str	r2, [r3, #0]
		TurnRight(turn_mode);
 800d324:	4630      	mov	r0, r6
}
 800d326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode);
 800d32a:	f7fc bcf1 	b.w	8009d10 <TurnRight>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d32e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800d46c <getNextDirection+0x1cc>
 800d332:	2601      	movs	r6, #1
 800d334:	f8c8 6000 	str.w	r6, [r8]
		GoBack();
 800d338:	f7fc fd64 	bl	8009e04 <GoBack>
				accel_or_not = judgeAccelorNot(my_maze, Mouse->next.car, Mouse->next.node);
 800d33c:	4638      	mov	r0, r7
 800d33e:	69e2      	ldr	r2, [r4, #28]
 800d340:	7da1      	ldrb	r1, [r4, #22]
 800d342:	f7fd fff1 	bl	800b328 <judgeAccelorNot>
					if(VelocityMax == true)
 800d346:	4b4a      	ldr	r3, [pc, #296]	; (800d470 <getNextDirection+0x1d0>)
 800d348:	781b      	ldrb	r3, [r3, #0]
				if(accel_or_not == true) //既知で.直進
 800d34a:	2800      	cmp	r0, #0
 800d34c:	d041      	beq.n	800d3d2 <getNextDirection+0x132>
					if(VelocityMax == true)
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d075      	beq.n	800d43e <getNextDirection+0x19e>
						AddVelocity = 245;
 800d352:	4b48      	ldr	r3, [pc, #288]	; (800d474 <getNextDirection+0x1d4>)
 800d354:	602b      	str	r3, [r5, #0]
						ChangeLED(0);
 800d356:	2000      	movs	r0, #0
 800d358:	f000 fb12 	bl	800d980 <ChangeLED>
 800d35c:	edd5 7a00 	vldr	s15, [r5]
						accel_or_decel = 0; //そのまま
 800d360:	2000      	movs	r0, #0
 800d362:	e041      	b.n	800d3e8 <getNextDirection+0x148>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d364:	4c41      	ldr	r4, [pc, #260]	; (800d46c <getNextDirection+0x1cc>)
 800d366:	2301      	movs	r3, #1
 800d368:	6023      	str	r3, [r4, #0]
		GoBack();
 800d36a:	f7fc fd4b 	bl	8009e04 <GoBack>
		Calc = SearchOrFast;
 800d36e:	4b3e      	ldr	r3, [pc, #248]	; (800d468 <getNextDirection+0x1c8>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	6023      	str	r3, [r4, #0]
		TurnLeft(turn_mode);
 800d374:	4630      	mov	r0, r6
}
 800d376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode);
 800d37a:	f7fc bd07 	b.w	8009d8c <TurnLeft>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d37e:	4c3b      	ldr	r4, [pc, #236]	; (800d46c <getNextDirection+0x1cc>)
 800d380:	2301      	movs	r3, #1
 800d382:	6023      	str	r3, [r4, #0]
		GoBack();
 800d384:	f7fc fd3e 	bl	8009e04 <GoBack>
		Calc = SearchOrFast;
 800d388:	4b37      	ldr	r3, [pc, #220]	; (800d468 <getNextDirection+0x1c8>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	6023      	str	r3, [r4, #0]
		TurnRight(turn_mode);
 800d38e:	4630      	mov	r0, r6
}
 800d390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode);
 800d394:	f7fc bcbc 	b.w	8009d10 <TurnRight>
}
 800d398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(VelocityMax == true)
 800d39c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d13e      	bne.n	800d422 <getNextDirection+0x182>
				AddVelocity = 0;
 800d3a4:	2300      	movs	r3, #0
				ChangeLED(2);
 800d3a6:	2002      	movs	r0, #2
				AddVelocity = 0;
 800d3a8:	602b      	str	r3, [r5, #0]
				ChangeLED(2);
 800d3aa:	f000 fae9 	bl	800d980 <ChangeLED>
 800d3ae:	edd5 7a00 	vldr	s15, [r5]
				accel_or_decel = 0; //そのまま
 800d3b2:	4620      	mov	r0, r4
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d3b4:	4b30      	ldr	r3, [pc, #192]	; (800d478 <getNextDirection+0x1d8>)
		Calc = SearchOrFast;
 800d3b6:	4a2c      	ldr	r2, [pc, #176]	; (800d468 <getNextDirection+0x1c8>)
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d3b8:	edd3 0a00 	vldr	s1, [r3]
		Calc = SearchOrFast;
 800d3bc:	4b2b      	ldr	r3, [pc, #172]	; (800d46c <getNextDirection+0x1cc>)
 800d3be:	6812      	ldr	r2, [r2, #0]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d3c0:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800d47c <getNextDirection+0x1dc>
		Calc = SearchOrFast;
 800d3c4:	601a      	str	r2, [r3, #0]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d3c6:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800d3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d3ce:	f7fc bb73 	b.w	8009ab8 <GoStraight>
					if(VelocityMax == true)
 800d3d2:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 800d3d6:	b9b3      	cbnz	r3, 800d406 <getNextDirection+0x166>
						AddVelocity = 0;
 800d3d8:	2300      	movs	r3, #0
						ChangeLED(2);
 800d3da:	2002      	movs	r0, #2
						AddVelocity = 0;
 800d3dc:	602b      	str	r3, [r5, #0]
						ChangeLED(2);
 800d3de:	f000 facf 	bl	800d980 <ChangeLED>
 800d3e2:	edd5 7a00 	vldr	s15, [r5]
						accel_or_decel = 0; //そのまま
 800d3e6:	4630      	mov	r0, r6
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d3e8:	4a23      	ldr	r2, [pc, #140]	; (800d478 <getNextDirection+0x1d8>)
		Calc = SearchOrFast;
 800d3ea:	4b1f      	ldr	r3, [pc, #124]	; (800d468 <getNextDirection+0x1c8>)
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d3ec:	edd2 0a00 	vldr	s1, [r2]
		Calc = SearchOrFast;
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f8c8 3000 	str.w	r3, [r8]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d3f6:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800d47c <getNextDirection+0x1dc>
 800d3fa:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800d3fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d402:	f7fc bb59 	b.w	8009ab8 <GoStraight>
						ChangeLED(cnt);
 800d406:	4c1e      	ldr	r4, [pc, #120]	; (800d480 <getNextDirection+0x1e0>)
 800d408:	6820      	ldr	r0, [r4, #0]
 800d40a:	f000 fab9 	bl	800d980 <ChangeLED>
						cnt += 2;
 800d40e:	6823      	ldr	r3, [r4, #0]
						AddVelocity = 0;
 800d410:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800d484 <getNextDirection+0x1e4>
						cnt += 2;
 800d414:	3302      	adds	r3, #2
 800d416:	6023      	str	r3, [r4, #0]
						AddVelocity = 0;
 800d418:	edc5 7a00 	vstr	s15, [r5]
						accel_or_decel = -1; //減速
 800d41c:	f04f 30ff 	mov.w	r0, #4294967295
 800d420:	e7e2      	b.n	800d3e8 <getNextDirection+0x148>
				ChangeLED(cnt);
 800d422:	4c19      	ldr	r4, [pc, #100]	; (800d488 <getNextDirection+0x1e8>)
 800d424:	6820      	ldr	r0, [r4, #0]
 800d426:	f000 faab 	bl	800d980 <ChangeLED>
				cnt += 2;
 800d42a:	6823      	ldr	r3, [r4, #0]
				AddVelocity = 0;
 800d42c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800d484 <getNextDirection+0x1e4>
				cnt += 2;
 800d430:	3302      	adds	r3, #2
 800d432:	6023      	str	r3, [r4, #0]
				AddVelocity = 0;
 800d434:	edc5 7a00 	vstr	s15, [r5]
				accel_or_decel = -1; //減速
 800d438:	f04f 30ff 	mov.w	r0, #4294967295
 800d43c:	e7ba      	b.n	800d3b4 <getNextDirection+0x114>
						AddVelocity = 245;
 800d43e:	4b0d      	ldr	r3, [pc, #52]	; (800d474 <getNextDirection+0x1d4>)
 800d440:	602b      	str	r3, [r5, #0]
						ChangeLED(7);
 800d442:	2007      	movs	r0, #7
 800d444:	f000 fa9c 	bl	800d980 <ChangeLED>
						accel_or_decel = 1; //加速
 800d448:	4630      	mov	r0, r6
 800d44a:	edd5 7a00 	vldr	s15, [r5]
 800d44e:	e7cb      	b.n	800d3e8 <getNextDirection+0x148>
				AddVelocity = 245;
 800d450:	4b08      	ldr	r3, [pc, #32]	; (800d474 <getNextDirection+0x1d4>)
 800d452:	602b      	str	r3, [r5, #0]
				ChangeLED(7);
 800d454:	2007      	movs	r0, #7
 800d456:	f000 fa93 	bl	800d980 <ChangeLED>
 800d45a:	edd5 7a00 	vldr	s15, [r5]
				accel_or_decel = 1; //加速
 800d45e:	2001      	movs	r0, #1
 800d460:	e7a8      	b.n	800d3b4 <getNextDirection+0x114>
 800d462:	bf00      	nop
 800d464:	20000c58 	.word	0x20000c58
 800d468:	20000ee8 	.word	0x20000ee8
 800d46c:	20000eec 	.word	0x20000eec
 800d470:	20000d6e 	.word	0x20000d6e
 800d474:	43750000 	.word	0x43750000
 800d478:	20000d70 	.word	0x20000d70
 800d47c:	42b40000 	.word	0x42b40000
 800d480:	2000002c 	.word	0x2000002c
 800d484:	00000000 	.word	0x00000000
 800d488:	20000028 	.word	0x20000028

0800d48c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d48c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d48e:	1e16      	subs	r6, r2, #0
 800d490:	dd07      	ble.n	800d4a2 <_read+0x16>
 800d492:	460c      	mov	r4, r1
 800d494:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800d496:	f7ff f913 	bl	800c6c0 <__io_getchar>
 800d49a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d49e:	42a5      	cmp	r5, r4
 800d4a0:	d1f9      	bne.n	800d496 <_read+0xa>
	}

return len;
}
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	bd70      	pop	{r4, r5, r6, pc}
 800d4a6:	bf00      	nop

0800d4a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d4a8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d4aa:	1e16      	subs	r6, r2, #0
 800d4ac:	dd07      	ble.n	800d4be <_write+0x16>
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800d4b2:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d4b6:	f7ff f8f1 	bl	800c69c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d4ba:	42ac      	cmp	r4, r5
 800d4bc:	d1f9      	bne.n	800d4b2 <_write+0xa>
	}
	return len;
}
 800d4be:	4630      	mov	r0, r6
 800d4c0:	bd70      	pop	{r4, r5, r6, pc}
 800d4c2:	bf00      	nop

0800d4c4 <_close>:

int _close(int file)
{
	return -1;
}
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop

0800d4cc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800d4cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d4d0:	604b      	str	r3, [r1, #4]
	return 0;
}
 800d4d2:	2000      	movs	r0, #0
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop

0800d4d8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800d4d8:	2001      	movs	r0, #1
 800d4da:	4770      	bx	lr

0800d4dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800d4dc:	2000      	movs	r0, #0
 800d4de:	4770      	bx	lr

0800d4e0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d4e0:	490c      	ldr	r1, [pc, #48]	; (800d514 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d4e2:	4a0d      	ldr	r2, [pc, #52]	; (800d518 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800d4e4:	680b      	ldr	r3, [r1, #0]
{
 800d4e6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d4e8:	4c0c      	ldr	r4, [pc, #48]	; (800d51c <_sbrk+0x3c>)
 800d4ea:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800d4ec:	b12b      	cbz	r3, 800d4fa <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d4ee:	4418      	add	r0, r3
 800d4f0:	4290      	cmp	r0, r2
 800d4f2:	d807      	bhi.n	800d504 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800d4f4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800d4fa:	4b09      	ldr	r3, [pc, #36]	; (800d520 <_sbrk+0x40>)
 800d4fc:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800d4fe:	4418      	add	r0, r3
 800d500:	4290      	cmp	r0, r2
 800d502:	d9f7      	bls.n	800d4f4 <_sbrk+0x14>
    errno = ENOMEM;
 800d504:	f003 fd94 	bl	8011030 <__errno>
 800d508:	230c      	movs	r3, #12
 800d50a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800d50c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d510:	4618      	mov	r0, r3
 800d512:	bd10      	pop	{r4, pc}
 800d514:	20000248 	.word	0x20000248
 800d518:	20020000 	.word	0x20020000
 800d51c:	00000400 	.word	0x00000400
 800d520:	20001200 	.word	0x20001200

0800d524 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800d524:	b508      	push	{r3, lr}
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800d526:	2203      	movs	r2, #3
 800d528:	4909      	ldr	r1, [pc, #36]	; (800d550 <ADCStart+0x2c>)
 800d52a:	480a      	ldr	r0, [pc, #40]	; (800d554 <ADCStart+0x30>)
 800d52c:	f001 f8cc 	bl	800e6c8 <HAL_ADC_Start_DMA>
 800d530:	b950      	cbnz	r0, 800d548 <ADCStart+0x24>
	{
		Error_Handler();
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800d532:	2202      	movs	r2, #2
 800d534:	4908      	ldr	r1, [pc, #32]	; (800d558 <ADCStart+0x34>)
 800d536:	4809      	ldr	r0, [pc, #36]	; (800d55c <ADCStart+0x38>)
 800d538:	f001 f8c6 	bl	800e6c8 <HAL_ADC_Start_DMA>
 800d53c:	b900      	cbnz	r0, 800d540 <ADCStart+0x1c>
	{
		Error_Handler();
	}

}
 800d53e:	bd08      	pop	{r3, pc}
 800d540:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 800d544:	f7ff bafe 	b.w	800cb44 <Error_Handler>
		Error_Handler();
 800d548:	f7ff fafc 	bl	800cb44 <Error_Handler>
 800d54c:	e7f1      	b.n	800d532 <ADCStart+0xe>
 800d54e:	bf00      	nop
 800d550:	200002cc 	.word	0x200002cc
 800d554:	20001050 	.word	0x20001050
 800d558:	200002d8 	.word	0x200002d8
 800d55c:	20000f70 	.word	0x20000f70

0800d560 <ADCStop>:
void ADCStop()
{
 800d560:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800d562:	480e      	ldr	r0, [pc, #56]	; (800d59c <ADCStop+0x3c>)
 800d564:	f001 f952 	bl	800e80c <HAL_ADC_Stop_DMA>
 800d568:	b970      	cbnz	r0, 800d588 <ADCStop+0x28>
	{
		printf("な\r\n");
		Error_Handler();
		printf("に\r\n");
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800d56a:	480d      	ldr	r0, [pc, #52]	; (800d5a0 <ADCStop+0x40>)
 800d56c:	f001 f94e 	bl	800e80c <HAL_ADC_Stop_DMA>
 800d570:	b900      	cbnz	r0, 800d574 <ADCStop+0x14>
	{
		printf("ぬ\r\n");
		Error_Handler();
		printf("ね\r\n");
	}
}
 800d572:	bd08      	pop	{r3, pc}
		printf("ぬ\r\n");
 800d574:	480b      	ldr	r0, [pc, #44]	; (800d5a4 <ADCStop+0x44>)
 800d576:	f005 fb23 	bl	8012bc0 <puts>
		Error_Handler();
 800d57a:	f7ff fae3 	bl	800cb44 <Error_Handler>
		printf("ね\r\n");
 800d57e:	480a      	ldr	r0, [pc, #40]	; (800d5a8 <ADCStop+0x48>)
}
 800d580:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printf("ね\r\n");
 800d584:	f005 bb1c 	b.w	8012bc0 <puts>
		printf("な\r\n");
 800d588:	4808      	ldr	r0, [pc, #32]	; (800d5ac <ADCStop+0x4c>)
 800d58a:	f005 fb19 	bl	8012bc0 <puts>
		Error_Handler();
 800d58e:	f7ff fad9 	bl	800cb44 <Error_Handler>
		printf("に\r\n");
 800d592:	4807      	ldr	r0, [pc, #28]	; (800d5b0 <ADCStop+0x50>)
 800d594:	f005 fb14 	bl	8012bc0 <puts>
 800d598:	e7e7      	b.n	800d56a <ADCStop+0xa>
 800d59a:	bf00      	nop
 800d59c:	20001050 	.word	0x20001050
 800d5a0:	20000f70 	.word	0x20000f70
 800d5a4:	080163f0 	.word	0x080163f0
 800d5a8:	080163f8 	.word	0x080163f8
 800d5ac:	080163e0 	.word	0x080163e0
 800d5b0:	080163e8 	.word	0x080163e8

0800d5b4 <FLASH_Write_Word>:
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
	FLASH->KEYR =  0x45670123;
 800d5b4:	4b10      	ldr	r3, [pc, #64]	; (800d5f8 <FLASH_Write_Word+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800d5b6:	4a11      	ldr	r2, [pc, #68]	; (800d5fc <FLASH_Write_Word+0x48>)

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800d5b8:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800d5ba:	4c11      	ldr	r4, [pc, #68]	; (800d600 <FLASH_Write_Word+0x4c>)
 800d5bc:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800d5be:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d5c0:	68da      	ldr	r2, [r3, #12]
 800d5c2:	03d2      	lsls	r2, r2, #15
 800d5c4:	d4fc      	bmi.n	800d5c0 <FLASH_Write_Word+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d5c6:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d5c8:	4a0b      	ldr	r2, [pc, #44]	; (800d5f8 <FLASH_Write_Word+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800d5ca:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800d5ce:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d5d0:	691c      	ldr	r4, [r3, #16]
 800d5d2:	f044 0401 	orr.w	r4, r4, #1
 800d5d6:	611c      	str	r4, [r3, #16]

	*(__IO uint32_t*)address = data;
 800d5d8:	6001      	str	r1, [r0, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d5da:	68d3      	ldr	r3, [r2, #12]
 800d5dc:	03db      	lsls	r3, r3, #15
 800d5de:	d4fc      	bmi.n	800d5da <FLASH_Write_Word+0x26>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800d5e0:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800d5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800d5e6:	f023 0301 	bic.w	r3, r3, #1
 800d5ea:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800d5ec:	6913      	ldr	r3, [r2, #16]
 800d5ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d5f2:	6113      	str	r3, [r2, #16]
}
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop
 800d5f8:	40023c00 	.word	0x40023c00
 800d5fc:	cdef89ab 	.word	0xcdef89ab
 800d600:	45670123 	.word	0x45670123

0800d604 <FLASH_Read_Word>:
	FLASH->KEYR =  0x45670123;
 800d604:	4b10      	ldr	r3, [pc, #64]	; (800d648 <FLASH_Read_Word+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800d606:	4a11      	ldr	r2, [pc, #68]	; (800d64c <FLASH_Read_Word+0x48>)
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800d608:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800d60a:	4c11      	ldr	r4, [pc, #68]	; (800d650 <FLASH_Read_Word+0x4c>)
 800d60c:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800d60e:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d610:	68da      	ldr	r2, [r3, #12]
 800d612:	03d2      	lsls	r2, r2, #15
 800d614:	d4fc      	bmi.n	800d610 <FLASH_Read_Word+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d616:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d618:	4a0b      	ldr	r2, [pc, #44]	; (800d648 <FLASH_Read_Word+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800d61a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800d61e:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d620:	691c      	ldr	r4, [r3, #16]
 800d622:	f044 0401 	orr.w	r4, r4, #1
 800d626:	611c      	str	r4, [r3, #16]

	* data = *(__IO uint32_t*)address;
 800d628:	6803      	ldr	r3, [r0, #0]
 800d62a:	600b      	str	r3, [r1, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d62c:	68d3      	ldr	r3, [r2, #12]
 800d62e:	03db      	lsls	r3, r3, #15
 800d630:	d4fc      	bmi.n	800d62c <FLASH_Read_Word+0x28>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800d632:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800d634:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800d638:	f023 0301 	bic.w	r3, r3, #1
 800d63c:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800d63e:	6913      	ldr	r3, [r2, #16]
 800d640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d644:	6113      	str	r3, [r2, #16]
}
 800d646:	4770      	bx	lr
 800d648:	40023c00 	.word	0x40023c00
 800d64c:	cdef89ab 	.word	0xcdef89ab
 800d650:	45670123 	.word	0x45670123

0800d654 <FLASH_Write_Word_F>:
	FLASH->KEYR =  0x45670123;
 800d654:	4b0f      	ldr	r3, [pc, #60]	; (800d694 <FLASH_Write_Word_F+0x40>)
 800d656:	4910      	ldr	r1, [pc, #64]	; (800d698 <FLASH_Write_Word_F+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800d658:	4a10      	ldr	r2, [pc, #64]	; (800d69c <FLASH_Write_Word_F+0x48>)
	FLASH->KEYR =  0x45670123;
 800d65a:	6059      	str	r1, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800d65c:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d65e:	68da      	ldr	r2, [r3, #12]
 800d660:	03d2      	lsls	r2, r2, #15
 800d662:	d4fc      	bmi.n	800d65e <FLASH_Write_Word_F+0xa>
{
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d664:	6919      	ldr	r1, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d666:	4a0b      	ldr	r2, [pc, #44]	; (800d694 <FLASH_Write_Word_F+0x40>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800d668:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800d66c:	6119      	str	r1, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d66e:	6919      	ldr	r1, [r3, #16]
 800d670:	f041 0101 	orr.w	r1, r1, #1
 800d674:	6119      	str	r1, [r3, #16]

	*(__IO float*)address = data;
 800d676:	ed80 0a00 	vstr	s0, [r0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d67a:	68d3      	ldr	r3, [r2, #12]
 800d67c:	03db      	lsls	r3, r3, #15
 800d67e:	d4fc      	bmi.n	800d67a <FLASH_Write_Word_F+0x26>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800d680:	6913      	ldr	r3, [r2, #16]
 800d682:	f023 0301 	bic.w	r3, r3, #1
 800d686:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800d688:	6913      	ldr	r3, [r2, #16]
 800d68a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d68e:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
}
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	40023c00 	.word	0x40023c00
 800d698:	45670123 	.word	0x45670123
 800d69c:	cdef89ab 	.word	0xcdef89ab

0800d6a0 <FLASH_Read_Word_F>:
	FLASH->KEYR =  0x45670123;
 800d6a0:	4b10      	ldr	r3, [pc, #64]	; (800d6e4 <FLASH_Read_Word_F+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800d6a2:	4a11      	ldr	r2, [pc, #68]	; (800d6e8 <FLASH_Read_Word_F+0x48>)
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800d6a4:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800d6a6:	4c11      	ldr	r4, [pc, #68]	; (800d6ec <FLASH_Read_Word_F+0x4c>)
 800d6a8:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800d6aa:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d6ac:	68da      	ldr	r2, [r3, #12]
 800d6ae:	03d2      	lsls	r2, r2, #15
 800d6b0:	d4fc      	bmi.n	800d6ac <FLASH_Read_Word_F+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d6b2:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d6b4:	4a0b      	ldr	r2, [pc, #44]	; (800d6e4 <FLASH_Read_Word_F+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800d6b6:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800d6ba:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d6bc:	691c      	ldr	r4, [r3, #16]
 800d6be:	f044 0401 	orr.w	r4, r4, #1
 800d6c2:	611c      	str	r4, [r3, #16]

	* data = *(__IO float*)address;
 800d6c4:	6803      	ldr	r3, [r0, #0]
 800d6c6:	600b      	str	r3, [r1, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d6c8:	68d3      	ldr	r3, [r2, #12]
 800d6ca:	03db      	lsls	r3, r3, #15
 800d6cc:	d4fc      	bmi.n	800d6c8 <FLASH_Read_Word_F+0x28>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800d6ce:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800d6d0:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800d6d4:	f023 0301 	bic.w	r3, r3, #1
 800d6d8:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800d6da:	6913      	ldr	r3, [r2, #16]
 800d6dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d6e0:	6113      	str	r3, [r2, #16]
}
 800d6e2:	4770      	bx	lr
 800d6e4:	40023c00 	.word	0x40023c00
 800d6e8:	cdef89ab 	.word	0xcdef89ab
 800d6ec:	45670123 	.word	0x45670123

0800d6f0 <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800d6f0:	b530      	push	{r4, r5, lr}
 800d6f2:	b087      	sub	sp, #28
    HAL_FLASH_Unlock();
 800d6f4:	f001 fc52 	bl	800ef9c <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d6f8:	2400      	movs	r4, #0
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800d6fa:	2301      	movs	r3, #1
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800d6fc:	2202      	movs	r2, #2
    EraseInitStruct.NbSectors = 1;

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800d6fe:	4669      	mov	r1, sp
 800d700:	a801      	add	r0, sp, #4
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d702:	9401      	str	r4, [sp, #4]
    EraseInitStruct.NbSectors = 1;
 800d704:	e9cd 3303 	strd	r3, r3, [sp, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800d708:	9205      	str	r2, [sp, #20]
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800d70a:	f001 fce1 	bl	800f0d0 <HAL_FLASHEx_Erase>
 800d70e:	4605      	mov	r5, r0

    HAL_FLASH_Lock();
 800d710:	f001 fc58 	bl	800efc4 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800d714:	b93d      	cbnz	r5, 800d726 <Flash_clear_sector1+0x36>
 800d716:	9800      	ldr	r0, [sp, #0]
 800d718:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 800d71c:	fab0 f080 	clz	r0, r0
 800d720:	0940      	lsrs	r0, r0, #5
}
 800d722:	b007      	add	sp, #28
 800d724:	bd30      	pop	{r4, r5, pc}
 800d726:	4620      	mov	r0, r4
 800d728:	b007      	add	sp, #28
 800d72a:	bd30      	pop	{r4, r5, pc}

0800d72c <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800d72c:	b530      	push	{r4, r5, lr}
 800d72e:	b087      	sub	sp, #28
    HAL_FLASH_Unlock();
 800d730:	f001 fc34 	bl	800ef9c <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800d734:	2509      	movs	r5, #9
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800d736:	2202      	movs	r2, #2
    EraseInitStruct.NbSectors = 1;
 800d738:	2301      	movs	r3, #1
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d73a:	2400      	movs	r4, #0

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800d73c:	4669      	mov	r1, sp
 800d73e:	a801      	add	r0, sp, #4
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800d740:	9503      	str	r5, [sp, #12]
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d742:	9401      	str	r4, [sp, #4]
    EraseInitStruct.NbSectors = 1;
 800d744:	e9cd 3204 	strd	r3, r2, [sp, #16]
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800d748:	f001 fcc2 	bl	800f0d0 <HAL_FLASHEx_Erase>
 800d74c:	4605      	mov	r5, r0

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800d74e:	f001 fc39 	bl	800efc4 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800d752:	b93d      	cbnz	r5, 800d764 <Flash_clear_sector9+0x38>
 800d754:	9800      	ldr	r0, [sp, #0]
 800d756:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 800d75a:	fab0 f080 	clz	r0, r0
 800d75e:	0940      	lsrs	r0, r0, #5
}
 800d760:	b007      	add	sp, #28
 800d762:	bd30      	pop	{r4, r5, pc}
 800d764:	4620      	mov	r0, r4
 800d766:	b007      	add	sp, #28
 800d768:	bd30      	pop	{r4, r5, pc}
 800d76a:	bf00      	nop

0800d76c <ReadIMU>:
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return val;
}
inline float ReadIMU(uint8_t a, uint8_t b) {
 800d76c:	b570      	push	{r4, r5, r6, lr}
	ret2 = ret[1] | 0x80;
//	reg[0] = 0x37;
//	reg[1] = 0x38;
//
//	ret = reg[0] | 0x80;
	CS_RESET;
 800d76e:	4c23      	ldr	r4, [pc, #140]	; (800d7fc <ReadIMU+0x90>)
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d770:	4d23      	ldr	r5, [pc, #140]	; (800d800 <ReadIMU+0x94>)
inline float ReadIMU(uint8_t a, uint8_t b) {
 800d772:	b082      	sub	sp, #8
	ret2 = ret[1] | 0x80;
 800d774:	f061 037f 	orn	r3, r1, #127	; 0x7f
	ret1 = ret[0] | 0x80;
 800d778:	f060 067f 	orn	r6, r0, #127	; 0x7f
	CS_RESET;
 800d77c:	2200      	movs	r2, #0
 800d77e:	4620      	mov	r0, r4
 800d780:	2104      	movs	r1, #4
	ret2 = ret[1] | 0x80;
 800d782:	f88d 3005 	strb.w	r3, [sp, #5]
	ret1 = ret[0] | 0x80;
 800d786:	f88d 6004 	strb.w	r6, [sp, #4]
	CS_RESET;
 800d78a:	f001 fe07 	bl	800f39c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d78e:	a901      	add	r1, sp, #4
 800d790:	4628      	mov	r0, r5
 800d792:	2364      	movs	r3, #100	; 0x64
 800d794:	2201      	movs	r2, #1
 800d796:	f002 fabb 	bl	800fd10 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800d79a:	2364      	movs	r3, #100	; 0x64
 800d79c:	f10d 0106 	add.w	r1, sp, #6
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	f002 fb72 	bl	800fe8c <HAL_SPI_Receive>
	CS_SET;
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	2104      	movs	r1, #4
 800d7ae:	f001 fdf5 	bl	800f39c <HAL_GPIO_WritePin>

//	ret = reg[1] | 0x80;
	CS_RESET;
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	2104      	movs	r1, #4
 800d7b8:	f001 fdf0 	bl	800f39c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800d7bc:	f10d 0105 	add.w	r1, sp, #5
 800d7c0:	4628      	mov	r0, r5
 800d7c2:	2364      	movs	r3, #100	; 0x64
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	f002 faa3 	bl	800fd10 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800d7ca:	2364      	movs	r3, #100	; 0x64
 800d7cc:	f10d 0107 	add.w	r1, sp, #7
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	f002 fb5a 	bl	800fe8c <HAL_SPI_Receive>
	CS_SET;
 800d7d8:	4620      	mov	r0, r4
 800d7da:	2201      	movs	r2, #1
 800d7dc:	2104      	movs	r1, #4
 800d7de:	f001 fddd 	bl	800f39c <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800d7e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d7e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d7ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	res = (float)law_data;
 800d7ee:	b21b      	sxth	r3, r3
 800d7f0:	ee00 3a10 	vmov	s0, r3
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return res;
}
 800d7f4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800d7f8:	b002      	add	sp, #8
 800d7fa:	bd70      	pop	{r4, r5, r6, pc}
 800d7fc:	40020c00 	.word	0x40020c00
 800d800:	20000ff8 	.word	0x20000ff8

0800d804 <write_byte>:
void write_byte( uint8_t reg, uint8_t val )  {
 800d804:	b570      	push	{r4, r5, r6, lr}
 800d806:	b084      	sub	sp, #16
	uint8_t ret;

	ret = reg & 0x7F;
 800d808:	ac04      	add	r4, sp, #16
	CS_RESET;
 800d80a:	4d10      	ldr	r5, [pc, #64]	; (800d84c <write_byte+0x48>)
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800d80c:	4e10      	ldr	r6, [pc, #64]	; (800d850 <write_byte+0x4c>)
void write_byte( uint8_t reg, uint8_t val )  {
 800d80e:	f88d 1007 	strb.w	r1, [sp, #7]
	ret = reg & 0x7F;
 800d812:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d816:	f804 0d01 	strb.w	r0, [r4, #-1]!
	CS_RESET;
 800d81a:	2200      	movs	r2, #0
 800d81c:	4628      	mov	r0, r5
 800d81e:	2104      	movs	r1, #4
 800d820:	f001 fdbc 	bl	800f39c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800d824:	4621      	mov	r1, r4
 800d826:	4630      	mov	r0, r6
 800d828:	2364      	movs	r3, #100	; 0x64
 800d82a:	2201      	movs	r2, #1
 800d82c:	f002 fa70 	bl	800fd10 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800d830:	2364      	movs	r3, #100	; 0x64
 800d832:	f10d 0107 	add.w	r1, sp, #7
 800d836:	4630      	mov	r0, r6
 800d838:	2201      	movs	r2, #1
 800d83a:	f002 fa69 	bl	800fd10 <HAL_SPI_Transmit>
	CS_SET;
 800d83e:	4628      	mov	r0, r5
 800d840:	2201      	movs	r2, #1
 800d842:	2104      	movs	r1, #4
 800d844:	f001 fdaa 	bl	800f39c <HAL_GPIO_WritePin>
}
 800d848:	b004      	add	sp, #16
 800d84a:	bd70      	pop	{r4, r5, r6, pc}
 800d84c:	40020c00 	.word	0x40020c00
 800d850:	20000ff8 	.word	0x20000ff8

0800d854 <IMU_init>:

uint8_t IMU_init() {
 800d854:	b510      	push	{r4, lr}
 800d856:	b082      	sub	sp, #8
	ret = reg | 0x80;
 800d858:	ac02      	add	r4, sp, #8
 800d85a:	2380      	movs	r3, #128	; 0x80
 800d85c:	f804 3d02 	strb.w	r3, [r4, #-2]!
	CS_RESET;
 800d860:	2200      	movs	r2, #0
 800d862:	2104      	movs	r1, #4
 800d864:	481b      	ldr	r0, [pc, #108]	; (800d8d4 <IMU_init+0x80>)
 800d866:	f001 fd99 	bl	800f39c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800d86a:	4621      	mov	r1, r4
 800d86c:	2364      	movs	r3, #100	; 0x64
 800d86e:	2201      	movs	r2, #1
 800d870:	4819      	ldr	r0, [pc, #100]	; (800d8d8 <IMU_init+0x84>)
 800d872:	f002 fa4d 	bl	800fd10 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800d876:	2364      	movs	r3, #100	; 0x64
 800d878:	2201      	movs	r2, #1
 800d87a:	f10d 0107 	add.w	r1, sp, #7
 800d87e:	4816      	ldr	r0, [pc, #88]	; (800d8d8 <IMU_init+0x84>)
 800d880:	f002 fb04 	bl	800fe8c <HAL_SPI_Receive>
	CS_SET;
 800d884:	2201      	movs	r2, #1
 800d886:	2104      	movs	r1, #4
 800d888:	4812      	ldr	r0, [pc, #72]	; (800d8d4 <IMU_init+0x80>)
 800d88a:	f001 fd87 	bl	800f39c <HAL_GPIO_WritePin>
	return val;
 800d88e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
	if ( who_am_i == 0xE0 ) {
 800d892:	2be0      	cmp	r3, #224	; 0xe0
 800d894:	d002      	beq.n	800d89c <IMU_init+0x48>
		write_byte(0x7F,0x00);	//USER_BANK0
	}
	return ret;
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 800d896:	2001      	movs	r0, #1
 800d898:	b002      	add	sp, #8
 800d89a:	bd10      	pop	{r4, pc}
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800d89c:	2101      	movs	r1, #1
 800d89e:	2006      	movs	r0, #6
 800d8a0:	f7ff ffb0 	bl	800d804 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800d8a4:	2110      	movs	r1, #16
 800d8a6:	2003      	movs	r0, #3
 800d8a8:	f7ff ffac 	bl	800d804 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800d8ac:	2120      	movs	r1, #32
 800d8ae:	207f      	movs	r0, #127	; 0x7f
 800d8b0:	f7ff ffa8 	bl	800d804 <write_byte>
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800d8b4:	2117      	movs	r1, #23
 800d8b6:	2001      	movs	r0, #1
 800d8b8:	f7ff ffa4 	bl	800d804 <write_byte>
		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 800d8bc:	2117      	movs	r1, #23
 800d8be:	2014      	movs	r0, #20
 800d8c0:	f7ff ffa0 	bl	800d804 <write_byte>
		write_byte(0x7F,0x00);	//USER_BANK0
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	207f      	movs	r0, #127	; 0x7f
 800d8c8:	f7ff ff9c 	bl	800d804 <write_byte>
}
 800d8cc:	2001      	movs	r0, #1
 800d8ce:	b002      	add	sp, #8
 800d8d0:	bd10      	pop	{r4, pc}
 800d8d2:	bf00      	nop
 800d8d4:	40020c00 	.word	0x40020c00
 800d8d8:	20000ff8 	.word	0x20000ff8

0800d8dc <IMU_Calib>:
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
}

void IMU_Calib(){
 800d8dc:	b538      	push	{r3, r4, r5, lr}


	HAL_Delay(100);
 800d8de:	2064      	movs	r0, #100	; 0x64
void IMU_Calib(){
 800d8e0:	ed2d 8b02 	vpush	{d8}
	HAL_Delay(100);
 800d8e4:	f000 fe2c 	bl	800e540 <HAL_Delay>

	int num = 2000;
	float zg_vals[2000]={0.0f};
	float sum=0;
 800d8e8:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 800d918 <IMU_Calib+0x3c>
 800d8ec:	4d0b      	ldr	r5, [pc, #44]	; (800d91c <IMU_Calib+0x40>)
	HAL_Delay(100);
 800d8ee:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	for(int i = 0; i < num; i++){
		zg_vals[i] = ZGyro;
 800d8f2:	edd5 7a00 	vldr	s15, [r5]
		sum += zg_vals[i];
		HAL_Delay(2);
 800d8f6:	2002      	movs	r0, #2
		sum += zg_vals[i];
 800d8f8:	ee38 8a27 	vadd.f32	s16, s16, s15
		HAL_Delay(2);
 800d8fc:	f000 fe20 	bl	800e540 <HAL_Delay>
	for(int i = 0; i < num; i++){
 800d900:	3c01      	subs	r4, #1
 800d902:	d1f6      	bne.n	800d8f2 <IMU_Calib+0x16>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / 2000.0f;
 800d904:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800d920 <IMU_Calib+0x44>
 800d908:	4b06      	ldr	r3, [pc, #24]	; (800d924 <IMU_Calib+0x48>)
 800d90a:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 800d90e:	ecbd 8b02 	vpop	{d8}
	zg_offset = sum / 2000.0f;
 800d912:	edc3 7a00 	vstr	s15, [r3]
}
 800d916:	bd38      	pop	{r3, r4, r5, pc}
 800d918:	00000000 	.word	0x00000000
 800d91c:	200002e0 	.word	0x200002e0
 800d920:	44fa0000 	.word	0x44fa0000
 800d924:	200002e4 	.word	0x200002e4

0800d928 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800d928:	b508      	push	{r3, lr}
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800d92a:	213c      	movs	r1, #60	; 0x3c
 800d92c:	4804      	ldr	r0, [pc, #16]	; (800d940 <EncoderStart+0x18>)
 800d92e:	f002 fd0d 	bl	801034c <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800d932:	213c      	movs	r1, #60	; 0x3c
 800d934:	4803      	ldr	r0, [pc, #12]	; (800d944 <EncoderStart+0x1c>)
}
 800d936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800d93a:	f002 bd07 	b.w	801034c <HAL_TIM_Encoder_Start>
 800d93e:	bf00      	nop
 800d940:	20000fb8 	.word	0x20000fb8
 800d944:	20000f30 	.word	0x20000f30

0800d948 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800d948:	b510      	push	{r4, lr}
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800d94a:	4c05      	ldr	r4, [pc, #20]	; (800d960 <EmitterON+0x18>)
 800d94c:	2100      	movs	r1, #0
 800d94e:	4620      	mov	r0, r4
 800d950:	f002 fc20 	bl	8010194 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800d954:	4620      	mov	r0, r4
 800d956:	2100      	movs	r1, #0

}
 800d958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800d95c:	f003 b892 	b.w	8010a84 <HAL_TIMEx_OCN_Start_IT>
 800d960:	20000ef0 	.word	0x20000ef0

0800d964 <EmitterOFF>:
void EmitterOFF()
{
 800d964:	b510      	push	{r4, lr}
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800d966:	4c05      	ldr	r4, [pc, #20]	; (800d97c <EmitterOFF+0x18>)
 800d968:	2100      	movs	r1, #0
 800d96a:	4620      	mov	r0, r4
 800d96c:	f002 fc5a 	bl	8010224 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800d970:	4620      	mov	r0, r4
 800d972:	2100      	movs	r1, #0

}
 800d974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800d978:	f003 b8b8 	b.w	8010aec <HAL_TIMEx_OCN_Stop_IT>
 800d97c:	20000ef0 	.word	0x20000ef0

0800d980 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800d980:	b508      	push	{r3, lr}
	//Switch
	switch(mode){
 800d982:	2807      	cmp	r0, #7
 800d984:	d851      	bhi.n	800da2a <ChangeLED+0xaa>
 800d986:	e8df f000 	tbb	[pc, r0]
 800d98a:	2c18      	.short	0x2c18
 800d98c:	463e362e 	.word	0x463e362e
 800d990:	044e      	.short	0x044e
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);

		break;
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d992:	2201      	movs	r2, #1
 800d994:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d998:	4824      	ldr	r0, [pc, #144]	; (800da2c <ChangeLED+0xac>)
 800d99a:	f001 fcff 	bl	800f39c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800d99e:	2201      	movs	r2, #1
 800d9a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d9a4:	4821      	ldr	r0, [pc, #132]	; (800da2c <ChangeLED+0xac>)
 800d9a6:	f001 fcf9 	bl	800f39c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9b0:	481f      	ldr	r0, [pc, #124]	; (800da30 <ChangeLED+0xb0>)

		break;
	default: break;

	}
}
 800d9b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800d9b6:	f001 bcf1 	b.w	800f39c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d9ba:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d9bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9c0:	481a      	ldr	r0, [pc, #104]	; (800da2c <ChangeLED+0xac>)
 800d9c2:	f001 fceb 	bl	800f39c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d9cc:	4817      	ldr	r0, [pc, #92]	; (800da2c <ChangeLED+0xac>)
 800d9ce:	f001 fce5 	bl	800f39c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9d8:	4815      	ldr	r0, [pc, #84]	; (800da30 <ChangeLED+0xb0>)
}
 800d9da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d9de:	f001 bcdd 	b.w	800f39c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	e7ea      	b.n	800d9bc <ChangeLED+0x3c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9ec:	480f      	ldr	r0, [pc, #60]	; (800da2c <ChangeLED+0xac>)
 800d9ee:	f001 fcd5 	bl	800f39c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	e7e8      	b.n	800d9c8 <ChangeLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9fc:	480b      	ldr	r0, [pc, #44]	; (800da2c <ChangeLED+0xac>)
 800d9fe:	f001 fccd 	bl	800f39c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800da02:	2201      	movs	r2, #1
 800da04:	e7e0      	b.n	800d9c8 <ChangeLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800da06:	2200      	movs	r2, #0
 800da08:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da0c:	4807      	ldr	r0, [pc, #28]	; (800da2c <ChangeLED+0xac>)
 800da0e:	f001 fcc5 	bl	800f39c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800da12:	2200      	movs	r2, #0
 800da14:	e7c4      	b.n	800d9a0 <ChangeLED+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800da16:	2201      	movs	r2, #1
 800da18:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da1c:	4803      	ldr	r0, [pc, #12]	; (800da2c <ChangeLED+0xac>)
 800da1e:	f001 fcbd 	bl	800f39c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800da22:	2200      	movs	r2, #0
 800da24:	e7bc      	b.n	800d9a0 <ChangeLED+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800da26:	2200      	movs	r2, #0
 800da28:	e7b4      	b.n	800d994 <ChangeLED+0x14>
}
 800da2a:	bd08      	pop	{r3, pc}
 800da2c:	40020800 	.word	0x40020800
 800da30:	40020400 	.word	0x40020400

0800da34 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800da34:	b508      	push	{r3, lr}
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800da36:	210c      	movs	r1, #12
 800da38:	4808      	ldr	r0, [pc, #32]	; (800da5c <Motor_PWM_Start+0x28>)
 800da3a:	f002 fc4b 	bl	80102d4 <HAL_TIM_PWM_Start>
 800da3e:	b948      	cbnz	r0, 800da54 <Motor_PWM_Start+0x20>
  {
	  Error_Handler();
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800da40:	2104      	movs	r1, #4
 800da42:	4807      	ldr	r0, [pc, #28]	; (800da60 <Motor_PWM_Start+0x2c>)
 800da44:	f002 fc46 	bl	80102d4 <HAL_TIM_PWM_Start>
 800da48:	b900      	cbnz	r0, 800da4c <Motor_PWM_Start+0x18>
  {
	  Error_Handler();
  }
#endif
}
 800da4a:	bd08      	pop	{r3, pc}
 800da4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 800da50:	f7ff b878 	b.w	800cb44 <Error_Handler>
	  Error_Handler();
 800da54:	f7ff f876 	bl	800cb44 <Error_Handler>
 800da58:	e7f2      	b.n	800da40 <Motor_PWM_Start+0xc>
 800da5a:	bf00      	nop
 800da5c:	2000024c 	.word	0x2000024c
 800da60:	2000028c 	.word	0x2000028c

0800da64 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800da64:	b508      	push	{r3, lr}
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800da66:	210c      	movs	r1, #12
 800da68:	4808      	ldr	r0, [pc, #32]	; (800da8c <Motor_PWM_Stop+0x28>)
 800da6a:	f002 fc35 	bl	80102d8 <HAL_TIM_PWM_Stop>
 800da6e:	b948      	cbnz	r0, 800da84 <Motor_PWM_Stop+0x20>
  {
	  Error_Handler();
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800da70:	2104      	movs	r1, #4
 800da72:	4807      	ldr	r0, [pc, #28]	; (800da90 <Motor_PWM_Stop+0x2c>)
 800da74:	f002 fc30 	bl	80102d8 <HAL_TIM_PWM_Stop>
 800da78:	b900      	cbnz	r0, 800da7c <Motor_PWM_Stop+0x18>
  {
	  Error_Handler();
  }
#endif
}
 800da7a:	bd08      	pop	{r3, pc}
 800da7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 800da80:	f7ff b860 	b.w	800cb44 <Error_Handler>
	  Error_Handler();
 800da84:	f7ff f85e 	bl	800cb44 <Error_Handler>
 800da88:	e7f2      	b.n	800da70 <Motor_PWM_Stop+0xc>
 800da8a:	bf00      	nop
 800da8c:	2000024c 	.word	0x2000024c
 800da90:	2000028c 	.word	0x2000028c
 800da94:	00000000 	.word	0x00000000

0800da98 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 800da98:	b570      	push	{r4, r5, r6, lr}
	if (left > 0 ){
 800da9a:	1e05      	subs	r5, r0, #0
inline void Motor_Switch(int left, int right){
 800da9c:	460c      	mov	r4, r1
	if (left > 0 ){
 800da9e:	dc35      	bgt.n	800db0c <Motor_Switch+0x74>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転

	}
	else  if (left < 0){
 800daa0:	d141      	bne.n	800db26 <Motor_Switch+0x8e>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
		left = -left;
	}
	if (right > 0){
 800daa2:	2c00      	cmp	r4, #0
 800daa4:	dc14      	bgt.n	800dad0 <Motor_Switch+0x38>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転

	}

	else if (right < 0){
 800daa6:	d137      	bne.n	800db18 <Motor_Switch+0x80>
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
	  	right = -right;
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800daa8:	4628      	mov	r0, r5
 800daaa:	f7fa fc73 	bl	8008394 <__aeabi_i2d>
 800daae:	a322      	add	r3, pc, #136	; (adr r3, 800db38 <Motor_Switch+0xa0>)
 800dab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab4:	f7fa ff68 	bl	8008988 <__aeabi_dcmpgt>
 800dab8:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800dabc:	2800      	cmp	r0, #0
 800dabe:	bf18      	it	ne
 800dac0:	461d      	movne	r5, r3
	if(right > 4200*0.6) right = 4200*0.6;


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800dac2:	4a1f      	ldr	r2, [pc, #124]	; (800db40 <Motor_Switch+0xa8>)
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800dac4:	4b1f      	ldr	r3, [pc, #124]	; (800db44 <Motor_Switch+0xac>)
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800dac6:	6812      	ldr	r2, [r2, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800dac8:	681b      	ldr	r3, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800daca:	6394      	str	r4, [r2, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800dacc:	641d      	str	r5, [r3, #64]	; 0x40
}
 800dace:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800dad0:	2200      	movs	r2, #0
 800dad2:	2101      	movs	r1, #1
 800dad4:	481c      	ldr	r0, [pc, #112]	; (800db48 <Motor_Switch+0xb0>)
 800dad6:	f001 fc61 	bl	800f39c <HAL_GPIO_WritePin>
	if(left > 4200*0.6) left = 4200*0.6;
 800dada:	4628      	mov	r0, r5
 800dadc:	f7fa fc5a 	bl	8008394 <__aeabi_i2d>
 800dae0:	a315      	add	r3, pc, #84	; (adr r3, 800db38 <Motor_Switch+0xa0>)
 800dae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae6:	f7fa ff4f 	bl	8008988 <__aeabi_dcmpgt>
 800daea:	f640 16d8 	movw	r6, #2520	; 0x9d8
 800daee:	2800      	cmp	r0, #0
 800daf0:	bf18      	it	ne
 800daf2:	4635      	movne	r5, r6
	if(right > 4200*0.6) right = 4200*0.6;
 800daf4:	4620      	mov	r0, r4
 800daf6:	f7fa fc4d 	bl	8008394 <__aeabi_i2d>
 800dafa:	a30f      	add	r3, pc, #60	; (adr r3, 800db38 <Motor_Switch+0xa0>)
 800dafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db00:	f7fa ff42 	bl	8008988 <__aeabi_dcmpgt>
 800db04:	2800      	cmp	r0, #0
 800db06:	bf18      	it	ne
 800db08:	4634      	movne	r4, r6
 800db0a:	e7da      	b.n	800dac2 <Motor_Switch+0x2a>
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800db0c:	2201      	movs	r2, #1
 800db0e:	2104      	movs	r1, #4
 800db10:	480d      	ldr	r0, [pc, #52]	; (800db48 <Motor_Switch+0xb0>)
 800db12:	f001 fc43 	bl	800f39c <HAL_GPIO_WritePin>
 800db16:	e7c4      	b.n	800daa2 <Motor_Switch+0xa>
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800db18:	2201      	movs	r2, #1
 800db1a:	4611      	mov	r1, r2
 800db1c:	480a      	ldr	r0, [pc, #40]	; (800db48 <Motor_Switch+0xb0>)
 800db1e:	f001 fc3d 	bl	800f39c <HAL_GPIO_WritePin>
	  	right = -right;
 800db22:	4264      	negs	r4, r4
 800db24:	e7d9      	b.n	800dada <Motor_Switch+0x42>
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800db26:	2200      	movs	r2, #0
 800db28:	2104      	movs	r1, #4
 800db2a:	4807      	ldr	r0, [pc, #28]	; (800db48 <Motor_Switch+0xb0>)
 800db2c:	f001 fc36 	bl	800f39c <HAL_GPIO_WritePin>
		left = -left;
 800db30:	426d      	negs	r5, r5
 800db32:	e7b6      	b.n	800daa2 <Motor_Switch+0xa>
 800db34:	f3af 8000 	nop.w
 800db38:	00000000 	.word	0x00000000
 800db3c:	40a3b000 	.word	0x40a3b000
 800db40:	2000028c 	.word	0x2000028c
 800db44:	2000024c 	.word	0x2000024c
 800db48:	40020000 	.word	0x40020000

0800db4c <InitPulse>:
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
	* timer_counter = initial_pulse;
 800db4c:	6001      	str	r1, [r0, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800db4e:	4770      	bx	lr

0800db50 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800db50:	b4f0      	push	{r4, r5, r6, r7}
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
	error = abs( last[receiver_num] - raw );
 800db52:	4e1a      	ldr	r6, [pc, #104]	; (800dbbc <GetWallDataAverage+0x6c>)
	last[receiver_num] = raw;
	integrate[receiver_num] += error;

	count[receiver_num]++;
 800db54:	4c1a      	ldr	r4, [pc, #104]	; (800dbc0 <GetWallDataAverage+0x70>)
	error = abs( last[receiver_num] - raw );
 800db56:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
	integrate[receiver_num] += error;
 800db5a:	4d1a      	ldr	r5, [pc, #104]	; (800dbc4 <GetWallDataAverage+0x74>)
	last[receiver_num] = raw;
 800db5c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800db60:	1a5b      	subs	r3, r3, r1
	count[receiver_num]++;
 800db62:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
	integrate[receiver_num] += error;
 800db66:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	bfb8      	it	lt
 800db6e:	425b      	neglt	r3, r3
	count[receiver_num]++;
 800db70:	3101      	adds	r1, #1
	integrate[receiver_num] += error;
 800db72:	443b      	add	r3, r7
	if(count[receiver_num] == average_of_n_times)
 800db74:	4281      	cmp	r1, r0
	integrate[receiver_num] += error;
 800db76:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
	count[receiver_num]++;
 800db7a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800db7e:	d006      	beq.n	800db8e <GetWallDataAverage+0x3e>
 800db80:	4b11      	ldr	r3, [pc, #68]	; (800dbc8 <GetWallDataAverage+0x78>)
 800db82:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800db86:	ed92 0a00 	vldr	s0, [r2]
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
		integrate[receiver_num] = 0;
		count[receiver_num] = 0;
	}
	return average[receiver_num];
}
 800db8a:	bcf0      	pop	{r4, r5, r6, r7}
 800db8c:	4770      	bx	lr
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800db8e:	ee07 3a90 	vmov	s15, r3
 800db92:	ee07 1a10 	vmov	s14, r1
 800db96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800db9e:	4b0a      	ldr	r3, [pc, #40]	; (800dbc8 <GetWallDataAverage+0x78>)
 800dba0:	ee87 0a87 	vdiv.f32	s0, s15, s14
		integrate[receiver_num] = 0;
 800dba4:	2100      	movs	r1, #0
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800dba6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		integrate[receiver_num] = 0;
 800dbaa:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
		count[receiver_num] = 0;
 800dbae:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}
 800dbb2:	bcf0      	pop	{r4, r5, r6, r7}
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800dbb4:	ed83 0a00 	vstr	s0, [r3]
}
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop
 800dbbc:	20000318 	.word	0x20000318
 800dbc0:	200002f8 	.word	0x200002f8
 800dbc4:	20000308 	.word	0x20000308
 800dbc8:	200002e8 	.word	0x200002e8

0800dbcc <ADCToBatteryVoltage>:
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
	float battery_voltage = 0;
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800dbcc:	ee07 0a90 	vmov	s15, r0
 800dbd0:	ee60 0a20 	vmul.f32	s1, s0, s1
 800dbd4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800dbd8:	ee20 0a20 	vmul.f32	s0, s0, s1
	return battery_voltage;
}
 800dbdc:	ee80 0a01 	vdiv.f32	s0, s0, s2
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop

0800dbe4 <IntegerPower>:
//-------------------------//

int IntegerPower(int integer, int exponential)
{
	int pattern_num = 1;
	for(int i=0; i < exponential ; i++)
 800dbe4:	2900      	cmp	r1, #0
 800dbe6:	dd08      	ble.n	800dbfa <IntegerPower+0x16>
 800dbe8:	2300      	movs	r3, #0
	int pattern_num = 1;
 800dbea:	2201      	movs	r2, #1
	for(int i=0; i < exponential ; i++)
 800dbec:	3301      	adds	r3, #1
 800dbee:	4299      	cmp	r1, r3
	{
		pattern_num *= integer;
 800dbf0:	fb00 f202 	mul.w	r2, r0, r2
	for(int i=0; i < exponential ; i++)
 800dbf4:	d1fa      	bne.n	800dbec <IntegerPower+0x8>
	}
	return pattern_num;
}
 800dbf6:	4610      	mov	r0, r2
 800dbf8:	4770      	bx	lr
	int pattern_num = 1;
 800dbfa:	2201      	movs	r2, #1
}
 800dbfc:	4610      	mov	r0, r2
 800dbfe:	4770      	bx	lr

0800dc00 <GetBatteryLevel>:

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
	float current_percentage = current_voltage / battery_max;
	float lowest_percentage =  battery_min / battery_max;
 800dc00:	eec0 0a81 	vdiv.f32	s1, s1, s2

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;

	int pattern = 0;
	for(int i=0; i < level_num; i++)
 800dc04:	2800      	cmp	r0, #0
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800dc06:	ee07 0a10 	vmov	s14, r0
 800dc0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dc0e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800dc12:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	float current_percentage = current_voltage / battery_max;
 800dc16:	ee80 0a01 	vdiv.f32	s0, s0, s2
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800dc1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	for(int i=0; i < level_num; i++)
 800dc1e:	dd14      	ble.n	800dc4a <GetBatteryLevel+0x4a>
 800dc20:	2300      	movs	r3, #0
	int pattern = 0;
 800dc22:	461a      	mov	r2, r3
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800dc24:	ee07 3a90 	vmov	s15, r3
 800dc28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc2c:	eef0 6a60 	vmov.f32	s13, s1
 800dc30:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dc34:	eeb4 0a66 	vcmp.f32	s0, s13
 800dc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc3c:	bfa8      	it	ge
 800dc3e:	461a      	movge	r2, r3
	for(int i=0; i < level_num; i++)
 800dc40:	3301      	adds	r3, #1
 800dc42:	4298      	cmp	r0, r3
 800dc44:	d1ee      	bne.n	800dc24 <GetBatteryLevel+0x24>
		{
			pattern = i;
		}
	}
	return pattern;
}
 800dc46:	4610      	mov	r0, r2
 800dc48:	4770      	bx	lr
	int pattern = 0;
 800dc4a:	2200      	movs	r2, #0
}
 800dc4c:	4610      	mov	r0, r2
 800dc4e:	4770      	bx	lr

0800dc50 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 800dc50:	b510      	push	{r4, lr}
	  setbuf(stdout,NULL);
 800dc52:	4c06      	ldr	r4, [pc, #24]	; (800dc6c <Buffering+0x1c>)
 800dc54:	6823      	ldr	r3, [r4, #0]
 800dc56:	2100      	movs	r1, #0
 800dc58:	6898      	ldr	r0, [r3, #8]
 800dc5a:	f005 f8a9 	bl	8012db0 <setbuf>
	  setbuf(stdin,NULL);
 800dc5e:	6823      	ldr	r3, [r4, #0]
 800dc60:	2100      	movs	r1, #0
 800dc62:	6858      	ldr	r0, [r3, #4]
}
 800dc64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  setbuf(stdin,NULL);
 800dc68:	f005 b8a2 	b.w	8012db0 <setbuf>
 800dc6c:	20000038 	.word	0x20000038

0800dc70 <Copy_Gain>:
void Copy_Gain()
{
 800dc70:	b570      	push	{r4, r5, r6, lr}
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
	float data[16]={0};
	data[0] = Pid[L_VELO_PID].KP;
 800dc72:	4b1c      	ldr	r3, [pc, #112]	; (800dce4 <Copy_Gain+0x74>)
	uint32_t address = start_adress_sector9;
 800dc74:	4c1c      	ldr	r4, [pc, #112]	; (800dce8 <Copy_Gain+0x78>)
	data[1] = Pid[L_VELO_PID].KI;
 800dc76:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
	data[2] = Pid[L_VELO_PID].KD;
 800dc7a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8

	data[3] = Pid[A_VELO_PID].KP;
 800dc7e:	6818      	ldr	r0, [r3, #0]
	data[4] = Pid[A_VELO_PID].KI;
 800dc80:	6859      	ldr	r1, [r3, #4]
	data[0] = Pid[L_VELO_PID].KP;
 800dc82:	ed93 0a2c 	vldr	s0, [r3, #176]	; 0xb0
	data[6] = Pid[L_WALL_PID].KP;
	data[7] = Pid[L_WALL_PID].KI;
	data[8] = Pid[L_WALL_PID].KD;

	data[9] = Pid[R_WALL_PID].KP;
	data[10] = Pid[R_WALL_PID].KI;
 800dc86:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
	uint32_t address = start_adress_sector9;
 800dc8a:	6824      	ldr	r4, [r4, #0]
{
 800dc8c:	b090      	sub	sp, #64	; 0x40
	data[0] = Pid[L_VELO_PID].KP;
 800dc8e:	ed8d 0a00 	vstr	s0, [sp]
	data[1] = Pid[L_VELO_PID].KI;
 800dc92:	9201      	str	r2, [sp, #4]
	data[5] = Pid[A_VELO_PID].KD;
 800dc94:	689a      	ldr	r2, [r3, #8]
	data[2] = Pid[L_VELO_PID].KD;
 800dc96:	9502      	str	r5, [sp, #8]
	data[3] = Pid[A_VELO_PID].KP;
 800dc98:	9003      	str	r0, [sp, #12]
	data[6] = Pid[L_WALL_PID].KP;
 800dc9a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
	data[7] = Pid[L_WALL_PID].KI;
 800dc9c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
	data[4] = Pid[A_VELO_PID].KI;
 800dc9e:	9104      	str	r1, [sp, #16]
	data[5] = Pid[A_VELO_PID].KD;
 800dca0:	9205      	str	r2, [sp, #20]
	data[8] = Pid[L_WALL_PID].KD;
 800dca2:	6e19      	ldr	r1, [r3, #96]	; 0x60
	data[9] = Pid[R_WALL_PID].KP;
 800dca4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	data[6] = Pid[L_WALL_PID].KP;
 800dca8:	9506      	str	r5, [sp, #24]
	data[7] = Pid[L_WALL_PID].KI;
 800dcaa:	9007      	str	r0, [sp, #28]
	data[11] = Pid[R_WALL_PID].KD;
 800dcac:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c

	data[12] = Pid[D_WALL_PID].KP;
 800dcb0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
	data[8] = Pid[L_WALL_PID].KD;
 800dcb2:	9108      	str	r1, [sp, #32]
	data[9] = Pid[R_WALL_PID].KP;
 800dcb4:	9209      	str	r2, [sp, #36]	; 0x24
	data[13] = Pid[D_WALL_PID].KI;
 800dcb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
	data[14] = Pid[D_WALL_PID].KD;
 800dcb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	data[10] = Pid[R_WALL_PID].KI;
 800dcba:	960a      	str	r6, [sp, #40]	; 0x28
	float data[16]={0};
 800dcbc:	2300      	movs	r3, #0
	data[11] = Pid[R_WALL_PID].KD;
 800dcbe:	950b      	str	r5, [sp, #44]	; 0x2c
	data[12] = Pid[D_WALL_PID].KP;
 800dcc0:	900c      	str	r0, [sp, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 800dcc2:	910d      	str	r1, [sp, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 800dcc4:	920e      	str	r2, [sp, #56]	; 0x38
 800dcc6:	ad01      	add	r5, sp, #4
	float data[16]={0};
 800dcc8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcca:	ae0f      	add	r6, sp, #60	; 0x3c
 800dccc:	e001      	b.n	800dcd2 <Copy_Gain+0x62>
 800dcce:	ecb5 0a01 	vldmia	r5!, {s0}
	for(int i=0; i < 15; i++)
	{

		FLASH_Write_Word_F( address, data[i]);
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f7ff fcbe 	bl	800d654 <FLASH_Write_Word_F>
	for(int i=0; i < 15; i++)
 800dcd8:	42b5      	cmp	r5, r6
		address += 0x04;
 800dcda:	f104 0404 	add.w	r4, r4, #4
	for(int i=0; i < 15; i++)
 800dcde:	d1f6      	bne.n	800dcce <Copy_Gain+0x5e>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 800dce0:	b010      	add	sp, #64	; 0x40
 800dce2:	bd70      	pop	{r4, r5, r6, pc}
 800dce4:	20000328 	.word	0x20000328
 800dce8:	08016404 	.word	0x08016404

0800dcec <Load_Gain>:
void Load_Gain()
{
 800dcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcf0:	ed2d 8b02 	vpush	{d8}
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 800dcf4:	4b61      	ldr	r3, [pc, #388]	; (800de7c <Load_Gain+0x190>)
	uint8_t j=0;
	for(int i=0; i < 15; i++)
	{
		FLASH_Read_Word_F( address, &data[i]);
		address += 0x04;
		printf("%d, %f\r\n",i,data[i]);
 800dcf6:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800de98 <Load_Gain+0x1ac>
	uint32_t address = start_adress_sector9;//こっちか
 800dcfa:	681f      	ldr	r7, [r3, #0]
		judge = isnanf(data[i]); //nanでなければ0
		printf("judge : %d\r\n", judge);
 800dcfc:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800de9c <Load_Gain+0x1b0>
{
 800dd00:	b090      	sub	sp, #64	; 0x40
	float data[16]={0};//1個多く要素を作る。
 800dd02:	4668      	mov	r0, sp
 800dd04:	2240      	movs	r2, #64	; 0x40
 800dd06:	2100      	movs	r1, #0
 800dd08:	f003 fbd3 	bl	80114b2 <memset>
 800dd0c:	466c      	mov	r4, sp
	for(int i=0; i < 15; i++)
 800dd0e:	2500      	movs	r5, #0
 800dd10:	1b3f      	subs	r7, r7, r4
	uint8_t j=0;
 800dd12:	46aa      	mov	sl, r5
		FLASH_Read_Word_F( address, &data[i]);
 800dd14:	4621      	mov	r1, r4
 800dd16:	1938      	adds	r0, r7, r4
 800dd18:	f7ff fcc2 	bl	800d6a0 <FLASH_Read_Word_F>
		printf("%d, %f\r\n",i,data[i]);
 800dd1c:	6820      	ldr	r0, [r4, #0]
 800dd1e:	f7fa fb4b 	bl	80083b8 <__aeabi_f2d>
 800dd22:	4602      	mov	r2, r0
 800dd24:	460b      	mov	r3, r1
 800dd26:	4648      	mov	r0, r9
 800dd28:	4629      	mov	r1, r5
 800dd2a:	f004 fec1 	bl	8012ab0 <iprintf>
		judge = isnanf(data[i]); //nanでなければ0
 800dd2e:	ecb4 8a01 	vldmia	r4!, {s16}
 800dd32:	eeb4 8a48 	vcmp.f32	s16, s16
 800dd36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		printf("judge : %d\r\n", judge);
 800dd3a:	bf6c      	ite	vs
 800dd3c:	2101      	movvs	r1, #1
 800dd3e:	2100      	movvc	r1, #0
 800dd40:	4640      	mov	r0, r8
 800dd42:	f004 feb5 	bl	8012ab0 <iprintf>
		if(judge == 1) //コンパイラでisnanfの結果が変わる
 800dd46:	eeb4 8a48 	vcmp.f32	s16, s16
 800dd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		{
			j++;
 800dd4e:	bf68      	it	vs
 800dd50:	f10a 0a01 	addvs.w	sl, sl, #1
	for(int i=0; i < 15; i++)
 800dd54:	f105 0501 	add.w	r5, r5, #1
			j++;
 800dd58:	bf68      	it	vs
 800dd5a:	fa5f fa8a 	uxtbvs.w	sl, sl
	for(int i=0; i < 15; i++)
 800dd5e:	2d0f      	cmp	r5, #15
 800dd60:	d1d8      	bne.n	800dd14 <Load_Gain+0x28>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 800dd62:	4651      	mov	r1, sl
 800dd64:	4846      	ldr	r0, [pc, #280]	; (800de80 <Load_Gain+0x194>)
 800dd66:	f004 fea3 	bl	8012ab0 <iprintf>
		if(j == 15)//全てnan0であれば
 800dd6a:	f1ba 0f0f 	cmp.w	sl, #15
 800dd6e:	d03a      	beq.n	800dde6 <Load_Gain+0xfa>
//			Pid[A_VELO_PID].KD = data[5];
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 800dd70:	ed9d 1a02 	vldr	s2, [sp, #8]
 800dd74:	eddd 0a01 	vldr	s1, [sp, #4]
 800dd78:	ed9d 0a00 	vldr	s0, [sp]
 800dd7c:	2004      	movs	r0, #4
 800dd7e:	f000 fa1b 	bl	800e1b8 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 800dd82:	ed9d 1a02 	vldr	s2, [sp, #8]
 800dd86:	eddd 0a01 	vldr	s1, [sp, #4]
 800dd8a:	ed9d 0a00 	vldr	s0, [sp]
 800dd8e:	2005      	movs	r0, #5
 800dd90:	f000 fa12 	bl	800e1b8 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800dd94:	ed9d 1a05 	vldr	s2, [sp, #20]
 800dd98:	eddd 0a04 	vldr	s1, [sp, #16]
 800dd9c:	ed9d 0a03 	vldr	s0, [sp, #12]
 800dda0:	2000      	movs	r0, #0
 800dda2:	f000 fa09 	bl	800e1b8 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 800dda6:	ed9d 1a08 	vldr	s2, [sp, #32]
 800ddaa:	eddd 0a07 	vldr	s1, [sp, #28]
 800ddae:	ed9d 0a06 	vldr	s0, [sp, #24]
 800ddb2:	2002      	movs	r0, #2
 800ddb4:	f000 fa00 	bl	800e1b8 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 800ddb8:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
 800ddbc:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
 800ddc0:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 800ddc4:	2003      	movs	r0, #3
 800ddc6:	f000 f9f7 	bl	800e1b8 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 800ddca:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
 800ddce:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
 800ddd2:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
 800ddd6:	2001      	movs	r0, #1
 800ddd8:	f000 f9ee 	bl	800e1b8 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 800dddc:	b010      	add	sp, #64	; 0x40
 800ddde:	ecbd 8b02 	vpop	{d8}
 800dde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("デフォルトゲインセット\r\n");
 800dde6:	4827      	ldr	r0, [pc, #156]	; (800de84 <Load_Gain+0x198>)
 800dde8:	f004 feea 	bl	8012bc0 <puts>
		  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);//1200,0);//2430,0);//7.3,1215,0);//40kHzの//14.6, 2430,0);//(20khzのと??��?��?);//1200,0.0);//2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);////D0.0036 //I2430くら 36.6*0.6=18+3.96
 800ddec:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800de88 <Load_Gain+0x19c>
 800ddf0:	eddf 0a26 	vldr	s1, [pc, #152]	; 800de8c <Load_Gain+0x1a0>
 800ddf4:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800de90 <Load_Gain+0x1a4>
 800ddf8:	2004      	movs	r0, #4
 800ddfa:	f000 f9dd 	bl	800e1b8 <PIDSetGain>
		  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);// 1200,0);//2430,0);//7.3,1215,0);//14.6, 2430,0);//1200,0.0);//, 2430,0);//17.5//2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);//I150,
 800ddfe:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800de88 <Load_Gain+0x19c>
 800de02:	eddf 0a22 	vldr	s1, [pc, #136]	; 800de8c <Load_Gain+0x1a0>
 800de06:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800de90 <Load_Gain+0x1a4>
 800de0a:	2005      	movs	r0, #5
 800de0c:	f000 f9d4 	bl	800e1b8 <PIDSetGain>
		  PIDSetGain(A_VELO_PID, 12,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800de10:	ed9f 1a20 	vldr	s2, [pc, #128]	; 800de94 <Load_Gain+0x1a8>
 800de14:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800de18:	eef0 0a41 	vmov.f32	s1, s2
 800de1c:	2000      	movs	r0, #0
 800de1e:	f000 f9cb 	bl	800e1b8 <PIDSetGain>
		  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800de22:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 800de94 <Load_Gain+0x1a8>
 800de26:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800de90 <Load_Gain+0x1a4>
 800de2a:	eef0 0a41 	vmov.f32	s1, s2
 800de2e:	2008      	movs	r0, #8
 800de30:	f000 f9c2 	bl	800e1b8 <PIDSetGain>
		  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800de34:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800de94 <Load_Gain+0x1a8>
 800de38:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800de3c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800de40:	2001      	movs	r0, #1
 800de42:	f000 f9b9 	bl	800e1b8 <PIDSetGain>
		  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800de46:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800de94 <Load_Gain+0x1a8>
 800de4a:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800de4e:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800de52:	2002      	movs	r0, #2
 800de54:	f000 f9b0 	bl	800e1b8 <PIDSetGain>
		  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800de58:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 800de94 <Load_Gain+0x1a8>
 800de5c:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800de60:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800de64:	2003      	movs	r0, #3
 800de66:	f000 f9a7 	bl	800e1b8 <PIDSetGain>
			Flash_clear_sector9();
 800de6a:	f7ff fc5f 	bl	800d72c <Flash_clear_sector9>
			Copy_Gain();
 800de6e:	f7ff feff 	bl	800dc70 <Copy_Gain>
}
 800de72:	b010      	add	sp, #64	; 0x40
 800de74:	ecbd 8b02 	vpop	{d8}
 800de78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de7c:	08016404 	.word	0x08016404
 800de80:	08016550 	.word	0x08016550
 800de84:	08016558 	.word	0x08016558
 800de88:	3a83126f 	.word	0x3a83126f
 800de8c:	452f0000 	.word	0x452f0000
 800de90:	4169999a 	.word	0x4169999a
 800de94:	00000000 	.word	0x00000000
 800de98:	0801653c 	.word	0x0801653c
 800de9c:	08016548 	.word	0x08016548

0800dea0 <Change_Gain>:
void Change_Gain()
{
 800dea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 800dea4:	48a4      	ldr	r0, [pc, #656]	; (800e138 <Change_Gain+0x298>)
 800dea6:	4ca5      	ldr	r4, [pc, #660]	; (800e13c <Change_Gain+0x29c>)
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 800dea8:	f8df 8304 	ldr.w	r8, [pc, #772]	; 800e1b0 <Change_Gain+0x310>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800deac:	4da4      	ldr	r5, [pc, #656]	; (800e140 <Change_Gain+0x2a0>)
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800deae:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800e1b4 <Change_Gain+0x314>
{
 800deb2:	b087      	sub	sp, #28
	HAL_TIM_Base_Stop_IT(&htim1);
 800deb4:	f002 f92c 	bl	8010110 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800deb8:	48a2      	ldr	r0, [pc, #648]	; (800e144 <Change_Gain+0x2a4>)
 800deba:	f002 f929 	bl	8010110 <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 800debe:	f7ff fdd1 	bl	800da64 <Motor_PWM_Stop>
	EmitterOFF();
 800dec2:	f7ff fd4f 	bl	800d964 <EmitterOFF>
	HAL_Delay(200);
 800dec6:	20c8      	movs	r0, #200	; 0xc8
 800dec8:	f000 fb3a 	bl	800e540 <HAL_Delay>
	char change_mode='0';
 800decc:	2330      	movs	r3, #48	; 0x30
 800dece:	f88d 3015 	strb.w	r3, [sp, #21]
	char pid = '0';
 800ded2:	f88d 3016 	strb.w	r3, [sp, #22]
		printf("現在のPIDゲイン\r\n");
 800ded6:	4640      	mov	r0, r8
 800ded8:	f004 fe72 	bl	8012bc0 <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800dedc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800dee0:	f7fa fa6a 	bl	80083b8 <__aeabi_f2d>
 800dee4:	4606      	mov	r6, r0
 800dee6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800deea:	460f      	mov	r7, r1
 800deec:	f7fa fa64 	bl	80083b8 <__aeabi_f2d>
 800def0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800def4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800def8:	f7fa fa5e 	bl	80083b8 <__aeabi_f2d>
 800defc:	4632      	mov	r2, r6
 800defe:	463b      	mov	r3, r7
 800df00:	e9cd 0100 	strd	r0, r1, [sp]
 800df04:	4628      	mov	r0, r5
 800df06:	f004 fdd3 	bl	8012ab0 <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800df0a:	6820      	ldr	r0, [r4, #0]
 800df0c:	f7fa fa54 	bl	80083b8 <__aeabi_f2d>
 800df10:	4606      	mov	r6, r0
 800df12:	68a0      	ldr	r0, [r4, #8]
 800df14:	460f      	mov	r7, r1
 800df16:	f7fa fa4f 	bl	80083b8 <__aeabi_f2d>
 800df1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df1e:	6860      	ldr	r0, [r4, #4]
 800df20:	f7fa fa4a 	bl	80083b8 <__aeabi_f2d>
 800df24:	4632      	mov	r2, r6
 800df26:	463b      	mov	r3, r7
 800df28:	e9cd 0100 	strd	r0, r1, [sp]
 800df2c:	4648      	mov	r0, r9
 800df2e:	f004 fdbf 	bl	8012ab0 <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 800df32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df34:	f7fa fa40 	bl	80083b8 <__aeabi_f2d>
 800df38:	4606      	mov	r6, r0
 800df3a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800df3c:	460f      	mov	r7, r1
 800df3e:	f7fa fa3b 	bl	80083b8 <__aeabi_f2d>
 800df42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df46:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800df48:	f7fa fa36 	bl	80083b8 <__aeabi_f2d>
 800df4c:	4632      	mov	r2, r6
 800df4e:	463b      	mov	r3, r7
 800df50:	e9cd 0100 	strd	r0, r1, [sp]
 800df54:	487c      	ldr	r0, [pc, #496]	; (800e148 <Change_Gain+0x2a8>)
 800df56:	f004 fdab 	bl	8012ab0 <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 800df5a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800df5e:	f7fa fa2b 	bl	80083b8 <__aeabi_f2d>
 800df62:	4606      	mov	r6, r0
 800df64:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800df68:	460f      	mov	r7, r1
 800df6a:	f7fa fa25 	bl	80083b8 <__aeabi_f2d>
 800df6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df72:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800df76:	f7fa fa1f 	bl	80083b8 <__aeabi_f2d>
 800df7a:	4632      	mov	r2, r6
 800df7c:	463b      	mov	r3, r7
 800df7e:	e9cd 0100 	strd	r0, r1, [sp]
 800df82:	4872      	ldr	r0, [pc, #456]	; (800e14c <Change_Gain+0x2ac>)
 800df84:	f004 fd94 	bl	8012ab0 <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 800df88:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800df8a:	f7fa fa15 	bl	80083b8 <__aeabi_f2d>
 800df8e:	4606      	mov	r6, r0
 800df90:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800df92:	460f      	mov	r7, r1
 800df94:	f7fa fa10 	bl	80083b8 <__aeabi_f2d>
 800df98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df9c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800df9e:	f7fa fa0b 	bl	80083b8 <__aeabi_f2d>
 800dfa2:	463b      	mov	r3, r7
 800dfa4:	e9cd 0100 	strd	r0, r1, [sp]
 800dfa8:	4632      	mov	r2, r6
 800dfaa:	4869      	ldr	r0, [pc, #420]	; (800e150 <Change_Gain+0x2b0>)
 800dfac:	f004 fd80 	bl	8012ab0 <iprintf>

		Buffering();
 800dfb0:	f7ff fe4e 	bl	800dc50 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 800dfb4:	4867      	ldr	r0, [pc, #412]	; (800e154 <Change_Gain+0x2b4>)
 800dfb6:	f004 fd7b 	bl	8012ab0 <iprintf>
 800dfba:	f10d 0115 	add.w	r1, sp, #21
 800dfbe:	4866      	ldr	r0, [pc, #408]	; (800e158 <Change_Gain+0x2b8>)
 800dfc0:	f004 feac 	bl	8012d1c <iscanf>
		if(change_mode == '0')
 800dfc4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800dfc8:	2b30      	cmp	r3, #48	; 0x30
 800dfca:	d066      	beq.n	800e09a <Change_Gain+0x1fa>
			break;
		}
		else
		{

			Buffering();
 800dfcc:	f7ff fe40 	bl	800dc50 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 800dfd0:	4862      	ldr	r0, [pc, #392]	; (800e15c <Change_Gain+0x2bc>)
 800dfd2:	f004 fd6d 	bl	8012ab0 <iprintf>
 800dfd6:	f10d 0116 	add.w	r1, sp, #22
 800dfda:	485f      	ldr	r0, [pc, #380]	; (800e158 <Change_Gain+0x2b8>)
 800dfdc:	f004 fe9e 	bl	8012d1c <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 800dfe0:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800dfe4:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800dfe8:	485d      	ldr	r0, [pc, #372]	; (800e160 <Change_Gain+0x2c0>)
 800dfea:	f004 fd61 	bl	8012ab0 <iprintf>

			Buffering();
 800dfee:	f7ff fe2f 	bl	800dc50 <Buffering>
			printf("\r\n値を入力 : ");
 800dff2:	485c      	ldr	r0, [pc, #368]	; (800e164 <Change_Gain+0x2c4>)
 800dff4:	f004 fd5c 	bl	8012ab0 <iprintf>

			switch(change_mode)
 800dff8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800dffc:	3b31      	subs	r3, #49	; 0x31
 800dffe:	2b04      	cmp	r3, #4
 800e000:	d85e      	bhi.n	800e0c0 <Change_Gain+0x220>
 800e002:	e8df f003 	tbb	[pc, r3]
 800e006:	303d      	.short	0x303d
 800e008:	1623      	.short	0x1623
 800e00a:	03          	.byte	0x03
 800e00b:	00          	.byte	0x00
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
			case '5'://壁制御ゲイン
				if(pid == 'p')
 800e00c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e010:	2b70      	cmp	r3, #112	; 0x70
 800e012:	d068      	beq.n	800e0e6 <Change_Gain+0x246>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
				}
				else if(pid == 'i')
 800e014:	2b69      	cmp	r3, #105	; 0x69
 800e016:	d07f      	beq.n	800e118 <Change_Gain+0x278>
				{
					scanf("%f",&Pid[D_WALL_PID].KI);
				}
				else if(pid == 'd')
 800e018:	2b64      	cmp	r3, #100	; 0x64
 800e01a:	d055      	beq.n	800e0c8 <Change_Gain+0x228>
				break;
			default :
				printf("該当しません\r\n");
				break;
			}
			Buffering();
 800e01c:	f7ff fe18 	bl	800dc50 <Buffering>
			scanf("%c",&nl);
 800e020:	f10d 0117 	add.w	r1, sp, #23
 800e024:	484c      	ldr	r0, [pc, #304]	; (800e158 <Change_Gain+0x2b8>)
 800e026:	f004 fe79 	bl	8012d1c <iscanf>
			printf("\r\n");
 800e02a:	484f      	ldr	r0, [pc, #316]	; (800e168 <Change_Gain+0x2c8>)
 800e02c:	f004 fdc8 	bl	8012bc0 <puts>
		printf("現在のPIDゲイン\r\n");
 800e030:	e751      	b.n	800ded6 <Change_Gain+0x36>
				if(pid == 'p')
 800e032:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e036:	2b70      	cmp	r3, #112	; 0x70
 800e038:	d05a      	beq.n	800e0f0 <Change_Gain+0x250>
				else if(pid == 'i')
 800e03a:	2b69      	cmp	r3, #105	; 0x69
 800e03c:	d071      	beq.n	800e122 <Change_Gain+0x282>
				else if(pid == 'd')
 800e03e:	2b64      	cmp	r3, #100	; 0x64
 800e040:	d1ec      	bne.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KD);
 800e042:	494a      	ldr	r1, [pc, #296]	; (800e16c <Change_Gain+0x2cc>)
 800e044:	484a      	ldr	r0, [pc, #296]	; (800e170 <Change_Gain+0x2d0>)
 800e046:	f004 fe69 	bl	8012d1c <iscanf>
 800e04a:	e7e7      	b.n	800e01c <Change_Gain+0x17c>
				if(pid == 'p')
 800e04c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e050:	2b70      	cmp	r3, #112	; 0x70
 800e052:	d052      	beq.n	800e0fa <Change_Gain+0x25a>
				else if(pid == 'i')
 800e054:	2b69      	cmp	r3, #105	; 0x69
 800e056:	d069      	beq.n	800e12c <Change_Gain+0x28c>
				else if(pid == 'd')
 800e058:	2b64      	cmp	r3, #100	; 0x64
 800e05a:	d1df      	bne.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 800e05c:	4945      	ldr	r1, [pc, #276]	; (800e174 <Change_Gain+0x2d4>)
 800e05e:	4844      	ldr	r0, [pc, #272]	; (800e170 <Change_Gain+0x2d0>)
 800e060:	f004 fe5c 	bl	8012d1c <iscanf>
 800e064:	e7da      	b.n	800e01c <Change_Gain+0x17c>
				if(pid == 'p')
 800e066:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e06a:	2b70      	cmp	r3, #112	; 0x70
 800e06c:	d036      	beq.n	800e0dc <Change_Gain+0x23c>
				else if(pid == 'i')
 800e06e:	2b69      	cmp	r3, #105	; 0x69
 800e070:	d04d      	beq.n	800e10e <Change_Gain+0x26e>
				else if(pid == 'd')
 800e072:	2b64      	cmp	r3, #100	; 0x64
 800e074:	d1d2      	bne.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KD);
 800e076:	4940      	ldr	r1, [pc, #256]	; (800e178 <Change_Gain+0x2d8>)
 800e078:	483d      	ldr	r0, [pc, #244]	; (800e170 <Change_Gain+0x2d0>)
 800e07a:	f004 fe4f 	bl	8012d1c <iscanf>
 800e07e:	e7cd      	b.n	800e01c <Change_Gain+0x17c>
				if(pid == 'p')
 800e080:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e084:	2b70      	cmp	r3, #112	; 0x70
 800e086:	d024      	beq.n	800e0d2 <Change_Gain+0x232>
				else if(pid == 'i')
 800e088:	2b69      	cmp	r3, #105	; 0x69
 800e08a:	d03b      	beq.n	800e104 <Change_Gain+0x264>
				else if(pid == 'd')
 800e08c:	2b64      	cmp	r3, #100	; 0x64
 800e08e:	d1c5      	bne.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KD);
 800e090:	493a      	ldr	r1, [pc, #232]	; (800e17c <Change_Gain+0x2dc>)
 800e092:	4837      	ldr	r0, [pc, #220]	; (800e170 <Change_Gain+0x2d0>)
 800e094:	f004 fe42 	bl	8012d1c <iscanf>
 800e098:	e7c0      	b.n	800e01c <Change_Gain+0x17c>
		}

	}
	printf("\r\n完了\r\n");
 800e09a:	4839      	ldr	r0, [pc, #228]	; (800e180 <Change_Gain+0x2e0>)
 800e09c:	f004 fd90 	bl	8012bc0 <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 800e0a0:	f7ff fb44 	bl	800d72c <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 800e0a4:	f7ff fde4 	bl	800dc70 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 800e0a8:	2007      	movs	r0, #7
 800e0aa:	f7ff fc69 	bl	800d980 <ChangeLED>
	HAL_Delay(200);
 800e0ae:	20c8      	movs	r0, #200	; 0xc8
 800e0b0:	f000 fa46 	bl	800e540 <HAL_Delay>
	ChangeLED(0);
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	f7ff fc63 	bl	800d980 <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 800e0ba:	b007      	add	sp, #28
 800e0bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				printf("該当しません\r\n");
 800e0c0:	4830      	ldr	r0, [pc, #192]	; (800e184 <Change_Gain+0x2e4>)
 800e0c2:	f004 fd7d 	bl	8012bc0 <puts>
				break;
 800e0c6:	e7a9      	b.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KD);
 800e0c8:	492f      	ldr	r1, [pc, #188]	; (800e188 <Change_Gain+0x2e8>)
 800e0ca:	4829      	ldr	r0, [pc, #164]	; (800e170 <Change_Gain+0x2d0>)
 800e0cc:	f004 fe26 	bl	8012d1c <iscanf>
 800e0d0:	e7a4      	b.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KP);
 800e0d2:	492e      	ldr	r1, [pc, #184]	; (800e18c <Change_Gain+0x2ec>)
 800e0d4:	4826      	ldr	r0, [pc, #152]	; (800e170 <Change_Gain+0x2d0>)
 800e0d6:	f004 fe21 	bl	8012d1c <iscanf>
 800e0da:	e79f      	b.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KP);
 800e0dc:	4917      	ldr	r1, [pc, #92]	; (800e13c <Change_Gain+0x29c>)
 800e0de:	4824      	ldr	r0, [pc, #144]	; (800e170 <Change_Gain+0x2d0>)
 800e0e0:	f004 fe1c 	bl	8012d1c <iscanf>
 800e0e4:	e79a      	b.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KP);
 800e0e6:	492a      	ldr	r1, [pc, #168]	; (800e190 <Change_Gain+0x2f0>)
 800e0e8:	4821      	ldr	r0, [pc, #132]	; (800e170 <Change_Gain+0x2d0>)
 800e0ea:	f004 fe17 	bl	8012d1c <iscanf>
 800e0ee:	e795      	b.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KP);
 800e0f0:	4928      	ldr	r1, [pc, #160]	; (800e194 <Change_Gain+0x2f4>)
 800e0f2:	481f      	ldr	r0, [pc, #124]	; (800e170 <Change_Gain+0x2d0>)
 800e0f4:	f004 fe12 	bl	8012d1c <iscanf>
 800e0f8:	e790      	b.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KP);
 800e0fa:	4927      	ldr	r1, [pc, #156]	; (800e198 <Change_Gain+0x2f8>)
 800e0fc:	481c      	ldr	r0, [pc, #112]	; (800e170 <Change_Gain+0x2d0>)
 800e0fe:	f004 fe0d 	bl	8012d1c <iscanf>
 800e102:	e78b      	b.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KI);
 800e104:	4925      	ldr	r1, [pc, #148]	; (800e19c <Change_Gain+0x2fc>)
 800e106:	481a      	ldr	r0, [pc, #104]	; (800e170 <Change_Gain+0x2d0>)
 800e108:	f004 fe08 	bl	8012d1c <iscanf>
 800e10c:	e786      	b.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KI);
 800e10e:	4924      	ldr	r1, [pc, #144]	; (800e1a0 <Change_Gain+0x300>)
 800e110:	4817      	ldr	r0, [pc, #92]	; (800e170 <Change_Gain+0x2d0>)
 800e112:	f004 fe03 	bl	8012d1c <iscanf>
 800e116:	e781      	b.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KI);
 800e118:	4922      	ldr	r1, [pc, #136]	; (800e1a4 <Change_Gain+0x304>)
 800e11a:	4815      	ldr	r0, [pc, #84]	; (800e170 <Change_Gain+0x2d0>)
 800e11c:	f004 fdfe 	bl	8012d1c <iscanf>
 800e120:	e77c      	b.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KI);
 800e122:	4921      	ldr	r1, [pc, #132]	; (800e1a8 <Change_Gain+0x308>)
 800e124:	4812      	ldr	r0, [pc, #72]	; (800e170 <Change_Gain+0x2d0>)
 800e126:	f004 fdf9 	bl	8012d1c <iscanf>
 800e12a:	e777      	b.n	800e01c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KI);
 800e12c:	491f      	ldr	r1, [pc, #124]	; (800e1ac <Change_Gain+0x30c>)
 800e12e:	4810      	ldr	r0, [pc, #64]	; (800e170 <Change_Gain+0x2d0>)
 800e130:	f004 fdf4 	bl	8012d1c <iscanf>
 800e134:	e772      	b.n	800e01c <Change_Gain+0x17c>
 800e136:	bf00      	nop
 800e138:	20001138 	.word	0x20001138
 800e13c:	20000328 	.word	0x20000328
 800e140:	08016420 	.word	0x08016420
 800e144:	20000ef0 	.word	0x20000ef0
 800e148:	0801645c 	.word	0x0801645c
 800e14c:	08016478 	.word	0x08016478
 800e150:	08016494 	.word	0x08016494
 800e154:	080164b0 	.word	0x080164b0
 800e158:	080164c8 	.word	0x080164c8
 800e15c:	080164cc 	.word	0x080164cc
 800e160:	080164e0 	.word	0x080164e0
 800e164:	08016504 	.word	0x08016504
 800e168:	08016538 	.word	0x08016538
 800e16c:	200003b4 	.word	0x200003b4
 800e170:	08016518 	.word	0x08016518
 800e174:	20000388 	.word	0x20000388
 800e178:	20000330 	.word	0x20000330
 800e17c:	200003e0 	.word	0x200003e0
 800e180:	08016530 	.word	0x08016530
 800e184:	0801651c 	.word	0x0801651c
 800e188:	2000035c 	.word	0x2000035c
 800e18c:	200003d8 	.word	0x200003d8
 800e190:	20000354 	.word	0x20000354
 800e194:	200003ac 	.word	0x200003ac
 800e198:	20000380 	.word	0x20000380
 800e19c:	200003dc 	.word	0x200003dc
 800e1a0:	2000032c 	.word	0x2000032c
 800e1a4:	20000358 	.word	0x20000358
 800e1a8:	200003b0 	.word	0x200003b0
 800e1ac:	20000384 	.word	0x20000384
 800e1b0:	08016408 	.word	0x08016408
 800e1b4:	08016440 	.word	0x08016440

0800e1b8 <PIDSetGain>:
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
	Pid[n].KP = kp;
 800e1b8:	4a05      	ldr	r2, [pc, #20]	; (800e1d0 <PIDSetGain+0x18>)
 800e1ba:	232c      	movs	r3, #44	; 0x2c
 800e1bc:	fb03 2000 	mla	r0, r3, r0, r2
 800e1c0:	ed80 0a00 	vstr	s0, [r0]
	Pid[n].KI = ki;
 800e1c4:	edc0 0a01 	vstr	s1, [r0, #4]
	Pid[n].KD = kd;
 800e1c8:	ed80 1a02 	vstr	s2, [r0, #8]

}
 800e1cc:	4770      	bx	lr
 800e1ce:	bf00      	nop
 800e1d0:	20000328 	.word	0x20000328

0800e1d4 <PIDChangeFlag>:
//	elast[n] = 0;
//}

void PIDChangeFlag(int n, int on_or_off)
{
	Pid[n].flag = on_or_off;
 800e1d4:	4a02      	ldr	r2, [pc, #8]	; (800e1e0 <PIDChangeFlag+0xc>)
 800e1d6:	232c      	movs	r3, #44	; 0x2c
 800e1d8:	fb03 2000 	mla	r0, r3, r0, r2
 800e1dc:	6281      	str	r1, [r0, #40]	; 0x28
}
 800e1de:	4770      	bx	lr
 800e1e0:	20000328 	.word	0x20000328

0800e1e4 <PIDReset>:
	return Pid[n].flag;
}
void PIDReset(int n)
{
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800e1e4:	4905      	ldr	r1, [pc, #20]	; (800e1fc <PIDReset+0x18>)
 800e1e6:	232c      	movs	r3, #44	; 0x2c
 800e1e8:	fb03 1000 	mla	r0, r3, r0, r1
 800e1ec:	2200      	movs	r2, #0
	Pid[n].ei = 0;
	Pid[n].ed = 0;
	Pid[n].elast = 0;
	Pid[n].out = 0;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	6243      	str	r3, [r0, #36]	; 0x24
	Pid[n].e = 0;
 800e1f2:	60c2      	str	r2, [r0, #12]
	Pid[n].ei = 0;
 800e1f4:	6102      	str	r2, [r0, #16]
	Pid[n].ed = 0;
 800e1f6:	6142      	str	r2, [r0, #20]
	Pid[n].elast = 0;
 800e1f8:	6182      	str	r2, [r0, #24]
}
 800e1fa:	4770      	bx	lr
 800e1fc:	20000328 	.word	0x20000328

0800e200 <PIDControl>:
inline int PIDControl(int n, float target, float current)
{
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800e200:	4b21      	ldr	r3, [pc, #132]	; (800e288 <PIDControl+0x88>)
{
 800e202:	b510      	push	{r4, lr}
	if(Pid[n].flag == 0)
 800e204:	242c      	movs	r4, #44	; 0x2c
 800e206:	fb04 3400 	mla	r4, r4, r0, r3
 800e20a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e20c:	b3a8      	cbz	r0, 800e27a <PIDControl+0x7a>
	else
	{
		Pid[n].target = target;
		Pid[n].current = current;

		Pid[n].e = Pid[n].target - Pid[n].current;
 800e20e:	ee70 6a60 	vsub.f32	s13, s0, s1
		Pid[n].ei += Pid[n].e * pid_T;
 800e212:	ed9f 4a1e 	vldr	s8, [pc, #120]	; 800e28c <PIDControl+0x8c>
 800e216:	ed94 6a04 	vldr	s12, [r4, #16]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
		Pid[n].elast = Pid[n].e;
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e21a:	ed94 7a01 	vldr	s14, [r4, #4]
 800e21e:	ed94 5a00 	vldr	s10, [r4]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e222:	edd4 7a06 	vldr	s15, [r4, #24]
 800e226:	eddf 4a1a 	vldr	s9, [pc, #104]	; 800e290 <PIDControl+0x90>
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e22a:	edd4 5a02 	vldr	s11, [r4, #8]
		Pid[n].e = Pid[n].target - Pid[n].current;
 800e22e:	edc4 6a03 	vstr	s13, [r4, #12]
		Pid[n].ei += Pid[n].e * pid_T;
 800e232:	eea6 6a84 	vfma.f32	s12, s13, s8
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e236:	ee76 7ae7 	vsub.f32	s15, s13, s15
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e23a:	ee26 7a07 	vmul.f32	s14, s12, s14
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e23e:	ee67 7aa4 	vmul.f32	s15, s15, s9
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e242:	eea6 7a85 	vfma.f32	s14, s13, s10
		Pid[n].ei += Pid[n].e * pid_T;
 800e246:	ed84 6a04 	vstr	s12, [r4, #16]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e24a:	eea7 7aa5 	vfma.f32	s14, s15, s11
		Pid[n].elast = Pid[n].e;
 800e24e:	edc4 6a06 	vstr	s13, [r4, #24]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e252:	edc4 7a05 	vstr	s15, [r4, #20]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e256:	ee17 0a10 	vmov	r0, s14
		Pid[n].target = target;
 800e25a:	ed84 0a08 	vstr	s0, [r4, #32]
		Pid[n].current = current;
 800e25e:	edc4 0a07 	vstr	s1, [r4, #28]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e262:	f7fa f8a9 	bl	80083b8 <__aeabi_f2d>
 800e266:	ec41 0b10 	vmov	d0, r0, r1
 800e26a:	f002 fe97 	bl	8010f9c <round>
 800e26e:	ec51 0b10 	vmov	r0, r1, d0
 800e272:	f7fa fba9 	bl	80089c8 <__aeabi_d2iz>
 800e276:	6260      	str	r0, [r4, #36]	; 0x24
		return Pid[n].out;
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 800e278:	bd10      	pop	{r4, pc}
		Pid[n].e = 0.0f;
 800e27a:	2300      	movs	r3, #0
		Pid[n].out = 0;
 800e27c:	6260      	str	r0, [r4, #36]	; 0x24
		Pid[n].e = 0.0f;
 800e27e:	60e3      	str	r3, [r4, #12]
		Pid[n].ei = 0.0f;
 800e280:	6123      	str	r3, [r4, #16]
		Pid[n].ed = 0.0f;
 800e282:	6163      	str	r3, [r4, #20]
		Pid[n].elast = 0.0f;
 800e284:	61a3      	str	r3, [r4, #24]
}
 800e286:	bd10      	pop	{r4, pc}
 800e288:	20000328 	.word	0x20000328
 800e28c:	3a83126f 	.word	0x3a83126f
 800e290:	4479ffff 	.word	0x4479ffff

0800e294 <HAL_GPIO_EXTI_Callback>:
#include <stdio.h>
#include <math.h>
//中間モジュール。
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_12)
 800e294:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800e298:	d106      	bne.n	800e2a8 <HAL_GPIO_EXTI_Callback+0x14>
	{
	  gpio_callback_count++;
 800e29a:	4a04      	ldr	r2, [pc, #16]	; (800e2ac <HAL_GPIO_EXTI_Callback+0x18>)
 800e29c:	6813      	ldr	r3, [r2, #0]
 800e29e:	3301      	adds	r3, #1
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	bfc8      	it	gt
 800e2a4:	2300      	movgt	r3, #0
 800e2a6:	6013      	str	r3, [r2, #0]
	}
}
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	200004e0 	.word	0x200004e0

0800e2b0 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int8_t mode)
{
 800e2b0:	b538      	push	{r3, r4, r5, lr}
 800e2b2:	4605      	mov	r5, r0
 800e2b4:	2405      	movs	r4, #5
	for(int i=0; i < 5; i++)
	{
		ChangeLED(mode);
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	f7ff fb62 	bl	800d980 <ChangeLED>
		HAL_Delay(100);
 800e2bc:	2064      	movs	r0, #100	; 0x64
 800e2be:	f000 f93f 	bl	800e540 <HAL_Delay>
		ChangeLED(0);
 800e2c2:	2000      	movs	r0, #0
 800e2c4:	f7ff fb5c 	bl	800d980 <ChangeLED>
		HAL_Delay(100);
 800e2c8:	2064      	movs	r0, #100	; 0x64
 800e2ca:	f000 f939 	bl	800e540 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800e2ce:	3c01      	subs	r4, #1
 800e2d0:	d1f1      	bne.n	800e2b6 <Signal+0x6>
	}
}
 800e2d2:	bd38      	pop	{r3, r4, r5, pc}

0800e2d4 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800e2d4:	b510      	push	{r4, lr}

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e2d6:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800e320 <BatteryCheck+0x4c>
 800e2da:	eddf 0a12 	vldr	s1, [pc, #72]	; 800e324 <BatteryCheck+0x50>
{
 800e2de:	ed2d 8b02 	vpush	{d8}
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e2e2:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800e2e6:	f7ff fc71 	bl	800dbcc <ADCToBatteryVoltage>

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800e2ea:	2103      	movs	r1, #3
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e2ec:	eeb0 8a40 	vmov.f32	s16, s0
	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800e2f0:	2002      	movs	r0, #2
 800e2f2:	f7ff fc77 	bl	800dbe4 <IntegerPower>

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800e2f6:	eeb0 0a48 	vmov.f32	s0, s16
 800e2fa:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800e328 <BatteryCheck+0x54>
 800e2fe:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800e32c <BatteryCheck+0x58>
 800e302:	f7ff fc7d 	bl	800dc00 <GetBatteryLevel>
 800e306:	4604      	mov	r4, r0

	printf("%d\r\n", battery_level);
 800e308:	4601      	mov	r1, r0
 800e30a:	4809      	ldr	r0, [pc, #36]	; (800e330 <BatteryCheck+0x5c>)
 800e30c:	f004 fbd0 	bl	8012ab0 <iprintf>
	Signal( battery_level );
}
 800e310:	ecbd 8b02 	vpop	{d8}
	Signal( battery_level );
 800e314:	b260      	sxtb	r0, r4
}
 800e316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Signal( battery_level );
 800e31a:	f7ff bfc9 	b.w	800e2b0 <Signal>
 800e31e:	bf00      	nop
 800e320:	45800000 	.word	0x45800000
 800e324:	40533333 	.word	0x40533333
 800e328:	41066666 	.word	0x41066666
 800e32c:	40e66666 	.word	0x40e66666
 800e330:	08016550 	.word	0x08016550

0800e334 <PhotoSwitch>:

//ここ書いたら大事な処理を書き始められる
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。
void PhotoSwitch()
{
 800e334:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2);
 800e336:	4c10      	ldr	r4, [pc, #64]	; (800e378 <PhotoSwitch+0x44>)
 800e338:	4810      	ldr	r0, [pc, #64]	; (800e37c <PhotoSwitch+0x48>)
 800e33a:	4621      	mov	r1, r4
 800e33c:	2202      	movs	r2, #2
 800e33e:	f000 f9c3 	bl	800e6c8 <HAL_ADC_Start_DMA>
	//tim8のduty比を下げて電流消費を削減
	HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1);
 800e342:	2100      	movs	r1, #0
 800e344:	480e      	ldr	r0, [pc, #56]	; (800e380 <PhotoSwitch+0x4c>)
 800e346:	f002 fb9d 	bl	8010a84 <HAL_TIMEx_OCN_Start_IT>

	while(adc2[1] < 200)
 800e34a:	6861      	ldr	r1, [r4, #4]
 800e34c:	29c7      	cmp	r1, #199	; 0xc7
 800e34e:	d806      	bhi.n	800e35e <PhotoSwitch+0x2a>
	{
		printf("adc2[1] : %lu\r\n", adc2[1]);
 800e350:	4d0c      	ldr	r5, [pc, #48]	; (800e384 <PhotoSwitch+0x50>)
 800e352:	4628      	mov	r0, r5
 800e354:	f004 fbac 	bl	8012ab0 <iprintf>
	while(adc2[1] < 200)
 800e358:	6861      	ldr	r1, [r4, #4]
 800e35a:	29c7      	cmp	r1, #199	; 0xc7
 800e35c:	d9f9      	bls.n	800e352 <PhotoSwitch+0x1e>

	}
	HAL_ADC_Stop_DMA(&hadc2);
 800e35e:	4807      	ldr	r0, [pc, #28]	; (800e37c <PhotoSwitch+0x48>)
 800e360:	f000 fa54 	bl	800e80c <HAL_ADC_Stop_DMA>
	HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1);
 800e364:	2100      	movs	r1, #0
 800e366:	4806      	ldr	r0, [pc, #24]	; (800e380 <PhotoSwitch+0x4c>)
 800e368:	f002 fbc0 	bl	8010aec <HAL_TIMEx_OCN_Stop_IT>
	Signal( 7 );
 800e36c:	2007      	movs	r0, #7
}
 800e36e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Signal( 7 );
 800e372:	f7ff bf9d 	b.w	800e2b0 <Signal>
 800e376:	bf00      	nop
 800e378:	200002d8 	.word	0x200002d8
 800e37c:	20000f70 	.word	0x20000f70
 800e380:	20000ef0 	.word	0x20000ef0
 800e384:	0801657c 	.word	0x0801657c

0800e388 <ModeSelect>:

void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800e388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e38c:	4606      	mov	r6, r0
 800e38e:	ed2d 8b04 	vpush	{d8-d9}
 800e392:	460f      	mov	r7, r1
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ

	//エンコーダ開始。初期値セット込み
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800e394:	4828      	ldr	r0, [pc, #160]	; (800e438 <ModeSelect+0xb0>)
	*pMode=min;

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	TIM3->CNT = INITIAL_PULSE;
	gpio_callback_count = 0;
 800e396:	4c29      	ldr	r4, [pc, #164]	; (800e43c <ModeSelect+0xb4>)
	{
		//printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800e398:	ed9f 9a29 	vldr	s18, [pc, #164]	; 800e440 <ModeSelect+0xb8>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800e39c:	eddf 8a29 	vldr	s17, [pc, #164]	; 800e444 <ModeSelect+0xbc>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800e3a0:	2100      	movs	r1, #0
{
 800e3a2:	4690      	mov	r8, r2
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800e3a4:	f001 ffd2 	bl	801034c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 800e3a8:	2104      	movs	r1, #4
 800e3aa:	4823      	ldr	r0, [pc, #140]	; (800e438 <ModeSelect+0xb0>)
 800e3ac:	f001 ffce 	bl	801034c <HAL_TIM_Encoder_Start>
	TIM3->CNT = INITIAL_PULSE;
 800e3b0:	4a25      	ldr	r2, [pc, #148]	; (800e448 <ModeSelect+0xc0>)
	*pMode=min;
 800e3b2:	f888 6000 	strb.w	r6, [r8]
	TIM3->CNT = INITIAL_PULSE;
 800e3b6:	f247 552f 	movw	r5, #29999	; 0x752f
	gpio_callback_count = 0;
 800e3ba:	2300      	movs	r3, #0
	TIM3->CNT = INITIAL_PULSE;
 800e3bc:	6255      	str	r5, [r2, #36]	; 0x24
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800e3be:	4691      	mov	r9, r2
	gpio_callback_count = 0;
 800e3c0:	6023      	str	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800e3c2:	b9eb      	cbnz	r3, 800e400 <ModeSelect+0x78>
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800e3c4:	ed99 8a09 	vldr	s16, [r9, #36]	; 0x24
		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800e3c8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800e3cc:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800e3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d4:	db0c      	blt.n	800e3f0 <ModeSelect+0x68>
		  	  *pMode += 1;
 800e3d6:	f898 0000 	ldrb.w	r0, [r8]
 800e3da:	3001      	adds	r0, #1
 800e3dc:	b240      	sxtb	r0, r0
		  		  *pMode = min;
 800e3de:	42b8      	cmp	r0, r7
 800e3e0:	bfc8      	it	gt
 800e3e2:	4630      	movgt	r0, r6
 800e3e4:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800e3e8:	f7ff faca 	bl	800d980 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800e3ec:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800e3f0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f8:	d910      	bls.n	800e41c <ModeSelect+0x94>
 800e3fa:	6823      	ldr	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d0e1      	beq.n	800e3c4 <ModeSelect+0x3c>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;
		  }
	}
	gpio_callback_count = 0;
 800e400:	2300      	movs	r3, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800e402:	4619      	mov	r1, r3
 800e404:	480c      	ldr	r0, [pc, #48]	; (800e438 <ModeSelect+0xb0>)
	gpio_callback_count = 0;
 800e406:	6023      	str	r3, [r4, #0]
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800e408:	f001 ffc4 	bl	8010394 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
}
 800e40c:	ecbd 8b04 	vpop	{d8-d9}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800e410:	2104      	movs	r1, #4
 800e412:	4809      	ldr	r0, [pc, #36]	; (800e438 <ModeSelect+0xb0>)
}
 800e414:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800e418:	f001 bfbc 	b.w	8010394 <HAL_TIM_Encoder_Stop>
		  	  *pMode -= 1;
 800e41c:	f898 0000 	ldrb.w	r0, [r8]
 800e420:	3801      	subs	r0, #1
 800e422:	b240      	sxtb	r0, r0
 800e424:	42b0      	cmp	r0, r6
 800e426:	bfb8      	it	lt
 800e428:	4638      	movlt	r0, r7
 800e42a:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800e42e:	f7ff faa7 	bl	800d980 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800e432:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
 800e436:	e7e0      	b.n	800e3fa <ModeSelect+0x72>
 800e438:	20000fb8 	.word	0x20000fb8
 800e43c:	200004e0 	.word	0x200004e0
 800e440:	47352f00 	.word	0x47352f00
 800e444:	4654bc00 	.word	0x4654bc00
 800e448:	40000400 	.word	0x40000400

0800e44c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e44c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e484 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e450:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e452:	e003      	b.n	800e45c <LoopCopyDataInit>

0800e454 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e454:	4b0c      	ldr	r3, [pc, #48]	; (800e488 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e456:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e458:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e45a:	3104      	adds	r1, #4

0800e45c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e45c:	480b      	ldr	r0, [pc, #44]	; (800e48c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e45e:	4b0c      	ldr	r3, [pc, #48]	; (800e490 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e460:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e462:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e464:	d3f6      	bcc.n	800e454 <CopyDataInit>
  ldr  r2, =_sbss
 800e466:	4a0b      	ldr	r2, [pc, #44]	; (800e494 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e468:	e002      	b.n	800e470 <LoopFillZerobss>

0800e46a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e46a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e46c:	f842 3b04 	str.w	r3, [r2], #4

0800e470 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e470:	4b09      	ldr	r3, [pc, #36]	; (800e498 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e472:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e474:	d3f9      	bcc.n	800e46a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e476:	f7fe fdfb 	bl	800d070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e47a:	f002 ff87 	bl	801138c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e47e:	f7fe f981 	bl	800c784 <main>
  bx  lr    
 800e482:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e484:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e488:	080168d8 	.word	0x080168d8
  ldr  r0, =_sdata
 800e48c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e490:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 800e494:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 800e498:	20001200 	.word	0x20001200

0800e49c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e49c:	e7fe      	b.n	800e49c <ADC_IRQHandler>
	...

0800e4a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e4a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e4a2:	4a0e      	ldr	r2, [pc, #56]	; (800e4dc <HAL_InitTick+0x3c>)
 800e4a4:	4b0e      	ldr	r3, [pc, #56]	; (800e4e0 <HAL_InitTick+0x40>)
 800e4a6:	7812      	ldrb	r2, [r2, #0]
 800e4a8:	681b      	ldr	r3, [r3, #0]
{
 800e4aa:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e4ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e4b0:	fbb0 f0f2 	udiv	r0, r0, r2
 800e4b4:	fbb3 f0f0 	udiv	r0, r3, r0
 800e4b8:	f000 fb24 	bl	800eb04 <HAL_SYSTICK_Config>
 800e4bc:	b908      	cbnz	r0, 800e4c2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e4be:	2d0f      	cmp	r5, #15
 800e4c0:	d901      	bls.n	800e4c6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800e4c2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800e4c4:	bd38      	pop	{r3, r4, r5, pc}
 800e4c6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	4629      	mov	r1, r5
 800e4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d0:	f000 fad4 	bl	800ea7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e4d4:	4b03      	ldr	r3, [pc, #12]	; (800e4e4 <HAL_InitTick+0x44>)
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	601d      	str	r5, [r3, #0]
}
 800e4da:	bd38      	pop	{r3, r4, r5, pc}
 800e4dc:	20000030 	.word	0x20000030
 800e4e0:	20000024 	.word	0x20000024
 800e4e4:	20000034 	.word	0x20000034

0800e4e8 <HAL_Init>:
{
 800e4e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e4ea:	4b0b      	ldr	r3, [pc, #44]	; (800e518 <HAL_Init+0x30>)
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e4f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e4fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e502:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e504:	2003      	movs	r0, #3
 800e506:	f000 faa7 	bl	800ea58 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800e50a:	2000      	movs	r0, #0
 800e50c:	f7ff ffc8 	bl	800e4a0 <HAL_InitTick>
  HAL_MspInit();
 800e510:	f7fe fb1a 	bl	800cb48 <HAL_MspInit>
}
 800e514:	2000      	movs	r0, #0
 800e516:	bd08      	pop	{r3, pc}
 800e518:	40023c00 	.word	0x40023c00

0800e51c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800e51c:	4a03      	ldr	r2, [pc, #12]	; (800e52c <HAL_IncTick+0x10>)
 800e51e:	4b04      	ldr	r3, [pc, #16]	; (800e530 <HAL_IncTick+0x14>)
 800e520:	6811      	ldr	r1, [r2, #0]
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	440b      	add	r3, r1
 800e526:	6013      	str	r3, [r2, #0]
}
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop
 800e52c:	200011d8 	.word	0x200011d8
 800e530:	20000030 	.word	0x20000030

0800e534 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800e534:	4b01      	ldr	r3, [pc, #4]	; (800e53c <HAL_GetTick+0x8>)
 800e536:	6818      	ldr	r0, [r3, #0]
}
 800e538:	4770      	bx	lr
 800e53a:	bf00      	nop
 800e53c:	200011d8 	.word	0x200011d8

0800e540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e540:	b538      	push	{r3, r4, r5, lr}
 800e542:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800e544:	f7ff fff6 	bl	800e534 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e548:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800e54a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800e54c:	d002      	beq.n	800e554 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800e54e:	4b04      	ldr	r3, [pc, #16]	; (800e560 <HAL_Delay+0x20>)
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e554:	f7ff ffee 	bl	800e534 <HAL_GetTick>
 800e558:	1b40      	subs	r0, r0, r5
 800e55a:	42a0      	cmp	r0, r4
 800e55c:	d3fa      	bcc.n	800e554 <HAL_Delay+0x14>
  {
  }
}
 800e55e:	bd38      	pop	{r3, r4, r5, pc}
 800e560:	20000030 	.word	0x20000030

0800e564 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800e564:	2800      	cmp	r0, #0
 800e566:	f000 8091 	beq.w	800e68c <HAL_ADC_Init+0x128>
{
 800e56a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800e56c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800e56e:	4604      	mov	r4, r0
 800e570:	2d00      	cmp	r5, #0
 800e572:	f000 8081 	beq.w	800e678 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e578:	06db      	lsls	r3, r3, #27
 800e57a:	d504      	bpl.n	800e586 <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800e57c:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800e57e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800e580:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800e584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800e586:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800e588:	494d      	ldr	r1, [pc, #308]	; (800e6c0 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800e58a:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e58c:	4d4d      	ldr	r5, [pc, #308]	; (800e6c4 <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 800e58e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800e592:	f022 0202 	bic.w	r2, r2, #2
 800e596:	f042 0202 	orr.w	r2, r2, #2
 800e59a:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800e59c:	684a      	ldr	r2, [r1, #4]
 800e59e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800e5a2:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800e5a4:	684a      	ldr	r2, [r1, #4]
 800e5a6:	6860      	ldr	r0, [r4, #4]
 800e5a8:	4302      	orrs	r2, r0
 800e5aa:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800e5ac:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800e5ae:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800e5b0:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800e5b2:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800e5b4:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800e5b8:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800e5ba:	685a      	ldr	r2, [r3, #4]
 800e5bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e5c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800e5c2:	6858      	ldr	r0, [r3, #4]
 800e5c4:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800e5c8:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800e5ca:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e5cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800e5ce:	4339      	orrs	r1, r7
 800e5d0:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800e5d2:	6899      	ldr	r1, [r3, #8]
 800e5d4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800e5d8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800e5da:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e5dc:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800e5de:	ea42 0206 	orr.w	r2, r2, r6
 800e5e2:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e5e4:	d054      	beq.n	800e690 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e5e6:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800e5e8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e5ea:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800e5ee:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800e5f0:	689a      	ldr	r2, [r3, #8]
 800e5f2:	4310      	orrs	r0, r2
 800e5f4:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800e5f6:	6899      	ldr	r1, [r3, #8]
 800e5f8:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800e5fc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800e5fe:	689a      	ldr	r2, [r3, #8]
 800e600:	432a      	orrs	r2, r5
 800e602:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800e604:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800e606:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800e608:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800e60c:	f021 0102 	bic.w	r1, r1, #2
 800e610:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800e612:	689a      	ldr	r2, [r3, #8]
 800e614:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800e618:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800e61a:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800e61c:	2800      	cmp	r0, #0
 800e61e:	d140      	bne.n	800e6a2 <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800e620:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e624:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800e626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800e628:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800e62a:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800e62e:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800e630:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800e634:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800e636:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e638:	3d01      	subs	r5, #1
 800e63a:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 800e63e:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800e640:	6898      	ldr	r0, [r3, #8]
 800e642:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 800e646:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800e648:	6899      	ldr	r1, [r3, #8]
 800e64a:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 800e64e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800e650:	6899      	ldr	r1, [r3, #8]
 800e652:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800e656:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800e658:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800e65a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800e65c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800e660:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800e662:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800e664:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e666:	f023 0303 	bic.w	r3, r3, #3
 800e66a:	f043 0301 	orr.w	r3, r3, #1
 800e66e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800e670:	2300      	movs	r3, #0
 800e672:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800e676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 800e678:	f7fe fa82 	bl	800cb80 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800e67c:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e67e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800e680:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e684:	06db      	lsls	r3, r3, #27
 800e686:	f53f af79 	bmi.w	800e57c <HAL_ADC_Init+0x18>
 800e68a:	e77c      	b.n	800e586 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 800e68c:	2001      	movs	r0, #1
}
 800e68e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e690:	689a      	ldr	r2, [r3, #8]
 800e692:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e696:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800e698:	689a      	ldr	r2, [r3, #8]
 800e69a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e69e:	609a      	str	r2, [r3, #8]
 800e6a0:	e7b0      	b.n	800e604 <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800e6a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800e6a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800e6a8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800e6aa:	685a      	ldr	r2, [r3, #4]
 800e6ac:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800e6b0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800e6b2:	685a      	ldr	r2, [r3, #4]
 800e6b4:	3901      	subs	r1, #1
 800e6b6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800e6ba:	605a      	str	r2, [r3, #4]
 800e6bc:	e7b3      	b.n	800e626 <HAL_ADC_Init+0xc2>
 800e6be:	bf00      	nop
 800e6c0:	40012300 	.word	0x40012300
 800e6c4:	0f000001 	.word	0x0f000001

0800e6c8 <HAL_ADC_Start_DMA>:
{
 800e6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800e6ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800e6ce:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 800e6d0:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 800e6d2:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800e6d4:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 800e6d6:	f000 8081 	beq.w	800e7dc <HAL_ADC_Start_DMA+0x114>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800e6da:	6805      	ldr	r5, [r0, #0]
 800e6dc:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 800e6de:	2401      	movs	r4, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800e6e0:	07df      	lsls	r7, r3, #31
  __HAL_LOCK(hadc);
 800e6e2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800e6e6:	d414      	bmi.n	800e712 <HAL_ADC_Start_DMA+0x4a>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800e6e8:	4b40      	ldr	r3, [pc, #256]	; (800e7ec <HAL_ADC_Start_DMA+0x124>)
 800e6ea:	4e41      	ldr	r6, [pc, #260]	; (800e7f0 <HAL_ADC_Start_DMA+0x128>)
 800e6ec:	681c      	ldr	r4, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 800e6ee:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800e6f0:	fba6 6404 	umull	r6, r4, r6, r4
 800e6f4:	0ca4      	lsrs	r4, r4, #18
    __HAL_ADC_ENABLE(hadc);
 800e6f6:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800e6fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    __HAL_ADC_ENABLE(hadc);
 800e6fe:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800e700:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800e702:	9b01      	ldr	r3, [sp, #4]
 800e704:	b12b      	cbz	r3, 800e712 <HAL_ADC_Start_DMA+0x4a>
      counter--;
 800e706:	9c01      	ldr	r4, [sp, #4]
 800e708:	3c01      	subs	r4, #1
 800e70a:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800e70c:	9c01      	ldr	r4, [sp, #4]
 800e70e:	2c00      	cmp	r4, #0
 800e710:	d1f9      	bne.n	800e706 <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800e712:	68ab      	ldr	r3, [r5, #8]
 800e714:	07de      	lsls	r6, r3, #31
 800e716:	d543      	bpl.n	800e7a0 <HAL_ADC_Start_DMA+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 800e718:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800e71a:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 800e71e:	f024 0401 	bic.w	r4, r4, #1
 800e722:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800e726:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800e728:	686b      	ldr	r3, [r5, #4]
 800e72a:	055c      	lsls	r4, r3, #21
 800e72c:	d505      	bpl.n	800e73a <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800e72e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e730:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e734:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e738:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e73a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800e73c:	4e2d      	ldr	r6, [pc, #180]	; (800e7f4 <HAL_ADC_Start_DMA+0x12c>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e73e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800e742:	bf1c      	itt	ne
 800e744:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 800e746:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800e74a:	6443      	str	r3, [r0, #68]	; 0x44
 800e74c:	4604      	mov	r4, r0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800e74e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e750:	4613      	mov	r3, r2
    __HAL_UNLOCK(hadc);   
 800e752:	2700      	movs	r7, #0
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800e754:	4a28      	ldr	r2, [pc, #160]	; (800e7f8 <HAL_ADC_Start_DMA+0x130>)
    __HAL_UNLOCK(hadc);   
 800e756:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800e75a:	63c6      	str	r6, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800e75c:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800e75e:	4e27      	ldr	r6, [pc, #156]	; (800e7fc <HAL_ADC_Start_DMA+0x134>)
 800e760:	64c6      	str	r6, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800e762:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800e766:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800e768:	686e      	ldr	r6, [r5, #4]
 800e76a:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
 800e76e:	606e      	str	r6, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800e770:	68ae      	ldr	r6, [r5, #8]
 800e772:	f446 7680 	orr.w	r6, r6, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800e776:	460a      	mov	r2, r1
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800e778:	60ae      	str	r6, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800e77a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800e77e:	f000 fa75 	bl	800ec6c <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800e782:	4b1f      	ldr	r3, [pc, #124]	; (800e800 <HAL_ADC_Start_DMA+0x138>)
 800e784:	685a      	ldr	r2, [r3, #4]
 800e786:	06d2      	lsls	r2, r2, #27
 800e788:	d10d      	bne.n	800e7a6 <HAL_ADC_Start_DMA+0xde>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800e78a:	6822      	ldr	r2, [r4, #0]
 800e78c:	491d      	ldr	r1, [pc, #116]	; (800e804 <HAL_ADC_Start_DMA+0x13c>)
 800e78e:	428a      	cmp	r2, r1
 800e790:	d01b      	beq.n	800e7ca <HAL_ADC_Start_DMA+0x102>
 800e792:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800e796:	428a      	cmp	r2, r1
 800e798:	d023      	beq.n	800e7e2 <HAL_ADC_Start_DMA+0x11a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800e79a:	491b      	ldr	r1, [pc, #108]	; (800e808 <HAL_ADC_Start_DMA+0x140>)
 800e79c:	428a      	cmp	r2, r1
 800e79e:	d00f      	beq.n	800e7c0 <HAL_ADC_Start_DMA+0xf8>
  return HAL_OK;
 800e7a0:	2000      	movs	r0, #0
}
 800e7a2:	b003      	add	sp, #12
 800e7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800e7a6:	6823      	ldr	r3, [r4, #0]
 800e7a8:	4a16      	ldr	r2, [pc, #88]	; (800e804 <HAL_ADC_Start_DMA+0x13c>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d1f8      	bne.n	800e7a0 <HAL_ADC_Start_DMA+0xd8>
 800e7ae:	6898      	ldr	r0, [r3, #8]
 800e7b0:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800e7b4:	d1f4      	bne.n	800e7a0 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e7b6:	689a      	ldr	r2, [r3, #8]
 800e7b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e7bc:	609a      	str	r2, [r3, #8]
 800e7be:	e7f0      	b.n	800e7a2 <HAL_ADC_Start_DMA+0xda>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	f003 031f 	and.w	r3, r3, #31
 800e7c6:	2b0f      	cmp	r3, #15
 800e7c8:	d8ea      	bhi.n	800e7a0 <HAL_ADC_Start_DMA+0xd8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800e7ca:	6890      	ldr	r0, [r2, #8]
 800e7cc:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800e7d0:	d1e6      	bne.n	800e7a0 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e7d2:	6893      	ldr	r3, [r2, #8]
 800e7d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e7d8:	6093      	str	r3, [r2, #8]
 800e7da:	e7e2      	b.n	800e7a2 <HAL_ADC_Start_DMA+0xda>
  __HAL_LOCK(hadc);
 800e7dc:	2002      	movs	r0, #2
}
 800e7de:	b003      	add	sp, #12
 800e7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	06db      	lsls	r3, r3, #27
 800e7e6:	d0f0      	beq.n	800e7ca <HAL_ADC_Start_DMA+0x102>
 800e7e8:	e7da      	b.n	800e7a0 <HAL_ADC_Start_DMA+0xd8>
 800e7ea:	bf00      	nop
 800e7ec:	20000024 	.word	0x20000024
 800e7f0:	431bde83 	.word	0x431bde83
 800e7f4:	0800e89d 	.word	0x0800e89d
 800e7f8:	0800e875 	.word	0x0800e875
 800e7fc:	0800e885 	.word	0x0800e885
 800e800:	40012300 	.word	0x40012300
 800e804:	40012000 	.word	0x40012000
 800e808:	40012200 	.word	0x40012200

0800e80c <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 800e80c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800e810:	2b01      	cmp	r3, #1
 800e812:	d029      	beq.n	800e868 <HAL_ADC_Stop_DMA+0x5c>
  __HAL_ADC_DISABLE(hadc);
 800e814:	6803      	ldr	r3, [r0, #0]
 800e816:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800e818:	2101      	movs	r1, #1
  __HAL_ADC_DISABLE(hadc);
 800e81a:	f022 0201 	bic.w	r2, r2, #1
{
 800e81e:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800e820:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800e824:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800e826:	689a      	ldr	r2, [r3, #8]
 800e828:	07d2      	lsls	r2, r2, #31
 800e82a:	4604      	mov	r4, r0
 800e82c:	d504      	bpl.n	800e838 <HAL_ADC_Stop_DMA+0x2c>
  __HAL_UNLOCK(hadc);
 800e82e:	2300      	movs	r3, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e830:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800e832:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800e836:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800e838:	689a      	ldr	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800e83a:	6b80      	ldr	r0, [r0, #56]	; 0x38
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800e83c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e840:	609a      	str	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800e842:	f000 fa51 	bl	800ece8 <HAL_DMA_Abort>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800e846:	6822      	ldr	r2, [r4, #0]
 800e848:	6853      	ldr	r3, [r2, #4]
 800e84a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e84e:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800e850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e852:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800e856:	f023 0301 	bic.w	r3, r3, #1
 800e85a:	f043 0301 	orr.w	r3, r3, #1
 800e85e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800e860:	2300      	movs	r3, #0
 800e862:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800e866:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800e868:	2002      	movs	r0, #2
}
 800e86a:	4770      	bx	lr

0800e86c <HAL_ADC_ConvCpltCallback>:
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop

0800e870 <HAL_ADC_ConvHalfCpltCallback>:
 800e870:	4770      	bx	lr
 800e872:	bf00      	nop

0800e874 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800e874:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800e876:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e878:	f7ff fffa 	bl	800e870 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e87c:	bd08      	pop	{r3, pc}
 800e87e:	bf00      	nop

0800e880 <HAL_ADC_ErrorCallback>:
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop

0800e884 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e884:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800e886:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800e888:	2340      	movs	r3, #64	; 0x40
 800e88a:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800e88c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e88e:	f043 0304 	orr.w	r3, r3, #4
 800e892:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800e894:	f7ff fff4 	bl	800e880 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e898:	bd08      	pop	{r3, pc}
 800e89a:	bf00      	nop

0800e89c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e89c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800e89e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e8a0:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 800e8a4:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e8a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800e8a8:	d123      	bne.n	800e8f2 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e8aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e8ae:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e8b0:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e8b2:	688a      	ldr	r2, [r1, #8]
 800e8b4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800e8b8:	d117      	bne.n	800e8ea <ADC_DMAConvCplt+0x4e>
 800e8ba:	7e1a      	ldrb	r2, [r3, #24]
 800e8bc:	b9aa      	cbnz	r2, 800e8ea <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e8be:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e8c0:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800e8c4:	d002      	beq.n	800e8cc <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800e8c6:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e8c8:	0550      	lsls	r0, r2, #21
 800e8ca:	d40e      	bmi.n	800e8ea <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800e8cc:	684a      	ldr	r2, [r1, #4]
 800e8ce:	f022 0220 	bic.w	r2, r2, #32
 800e8d2:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800e8d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e8d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e8da:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e8dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e8de:	04d1      	lsls	r1, r2, #19
 800e8e0:	d403      	bmi.n	800e8ea <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e8e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e8e4:	f042 0201 	orr.w	r2, r2, #1
 800e8e8:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7ff ffbe 	bl	800e86c <HAL_ADC_ConvCpltCallback>
}
 800e8f0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800e8f2:	06d2      	lsls	r2, r2, #27
 800e8f4:	d404      	bmi.n	800e900 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800e8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800e8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800e8fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8fe:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 800e900:	4618      	mov	r0, r3
 800e902:	f7ff ffbd 	bl	800e880 <HAL_ADC_ErrorCallback>
}
 800e906:	bd10      	pop	{r4, pc}

0800e908 <HAL_ADC_ConfigChannel>:
{
 800e908:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800e90a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800e90e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800e910:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800e912:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800e914:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800e916:	f000 8095 	beq.w	800ea44 <HAL_ADC_ConfigChannel+0x13c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800e91a:	680d      	ldr	r5, [r1, #0]
 800e91c:	688a      	ldr	r2, [r1, #8]
 800e91e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 800e920:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800e922:	2d09      	cmp	r5, #9
 800e924:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 800e926:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800e92a:	d829      	bhi.n	800e980 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800e92c:	691c      	ldr	r4, [r3, #16]
 800e92e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800e932:	f04f 0c07 	mov.w	ip, #7
 800e936:	fa0c fc06 	lsl.w	ip, ip, r6
 800e93a:	ea24 040c 	bic.w	r4, r4, ip
 800e93e:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800e940:	691c      	ldr	r4, [r3, #16]
 800e942:	fa02 f606 	lsl.w	r6, r2, r6
 800e946:	4326      	orrs	r6, r4
 800e948:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 800e94a:	684e      	ldr	r6, [r1, #4]
 800e94c:	2e06      	cmp	r6, #6
 800e94e:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800e952:	d82a      	bhi.n	800e9aa <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800e954:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e956:	3a05      	subs	r2, #5
 800e958:	241f      	movs	r4, #31
 800e95a:	4094      	lsls	r4, r2
 800e95c:	ea21 0104 	bic.w	r1, r1, r4
 800e960:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800e962:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e964:	fa07 f202 	lsl.w	r2, r7, r2
 800e968:	430a      	orrs	r2, r1
 800e96a:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800e96c:	4a37      	ldr	r2, [pc, #220]	; (800ea4c <HAL_ADC_ConfigChannel+0x144>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d02d      	beq.n	800e9ce <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 800e972:	2300      	movs	r3, #0
 800e974:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800e978:	4618      	mov	r0, r3
}
 800e97a:	b002      	add	sp, #8
 800e97c:	bcf0      	pop	{r4, r5, r6, r7}
 800e97e:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800e980:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800e984:	68dc      	ldr	r4, [r3, #12]
 800e986:	3e1e      	subs	r6, #30
 800e988:	f04f 0c07 	mov.w	ip, #7
 800e98c:	fa0c fc06 	lsl.w	ip, ip, r6
 800e990:	ea24 040c 	bic.w	r4, r4, ip
 800e994:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800e996:	68dc      	ldr	r4, [r3, #12]
 800e998:	fa02 f606 	lsl.w	r6, r2, r6
 800e99c:	4326      	orrs	r6, r4
 800e99e:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 800e9a0:	684e      	ldr	r6, [r1, #4]
 800e9a2:	2e06      	cmp	r6, #6
 800e9a4:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800e9a8:	d9d4      	bls.n	800e954 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800e9aa:	2e0c      	cmp	r6, #12
 800e9ac:	d835      	bhi.n	800ea1a <HAL_ADC_ConfigChannel+0x112>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800e9ae:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 800e9b2:	211f      	movs	r1, #31
 800e9b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9b6:	40a1      	lsls	r1, r4
 800e9b8:	ea22 0201 	bic.w	r2, r2, r1
 800e9bc:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800e9be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e9c0:	fa07 f204 	lsl.w	r2, r7, r4
 800e9c4:	430a      	orrs	r2, r1
 800e9c6:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800e9c8:	4a20      	ldr	r2, [pc, #128]	; (800ea4c <HAL_ADC_ConfigChannel+0x144>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d1d1      	bne.n	800e972 <HAL_ADC_ConfigChannel+0x6a>
 800e9ce:	2d12      	cmp	r5, #18
 800e9d0:	d031      	beq.n	800ea36 <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800e9d2:	f1a5 0310 	sub.w	r3, r5, #16
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d8cb      	bhi.n	800e972 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800e9da:	4a1d      	ldr	r2, [pc, #116]	; (800ea50 <HAL_ADC_ConfigChannel+0x148>)
 800e9dc:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800e9de:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800e9e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e9e4:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800e9e6:	d1c4      	bne.n	800e972 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800e9e8:	4b1a      	ldr	r3, [pc, #104]	; (800ea54 <HAL_ADC_ConfigChannel+0x14c>)
 800e9ea:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800e9ee:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f202 3283 	addw	r2, r2, #899	; 0x383
 800e9f8:	fba2 2303 	umull	r2, r3, r2, r3
 800e9fc:	0c9b      	lsrs	r3, r3, #18
 800e9fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ea02:	005b      	lsls	r3, r3, #1
 800ea04:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800ea06:	9b01      	ldr	r3, [sp, #4]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d0b2      	beq.n	800e972 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800ea0c:	9b01      	ldr	r3, [sp, #4]
 800ea0e:	3b01      	subs	r3, #1
 800ea10:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800ea12:	9b01      	ldr	r3, [sp, #4]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1f9      	bne.n	800ea0c <HAL_ADC_ConfigChannel+0x104>
 800ea18:	e7ab      	b.n	800e972 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ea1a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800ea1e:	241f      	movs	r4, #31
 800ea20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea22:	408c      	lsls	r4, r1
 800ea24:	ea22 0204 	bic.w	r2, r2, r4
 800ea28:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ea2a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800ea2c:	fa07 f201 	lsl.w	r2, r7, r1
 800ea30:	4322      	orrs	r2, r4
 800ea32:	62da      	str	r2, [r3, #44]	; 0x2c
 800ea34:	e79a      	b.n	800e96c <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ea36:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800ea3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ea3e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 800ea42:	e796      	b.n	800e972 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 800ea44:	2002      	movs	r0, #2
}
 800ea46:	b002      	add	sp, #8
 800ea48:	bcf0      	pop	{r4, r5, r6, r7}
 800ea4a:	4770      	bx	lr
 800ea4c:	40012000 	.word	0x40012000
 800ea50:	40012300 	.word	0x40012300
 800ea54:	20000024 	.word	0x20000024

0800ea58 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ea58:	4a07      	ldr	r2, [pc, #28]	; (800ea78 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800ea5a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ea5c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800ea60:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ea62:	0200      	lsls	r0, r0, #8
 800ea64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ea68:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800ea6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800ea70:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800ea72:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop
 800ea78:	e000ed00 	.word	0xe000ed00

0800ea7c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ea7c:	4b18      	ldr	r3, [pc, #96]	; (800eae0 <HAL_NVIC_SetPriority+0x64>)
 800ea7e:	68db      	ldr	r3, [r3, #12]
 800ea80:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ea84:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ea86:	f1c3 0507 	rsb	r5, r3, #7
 800ea8a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ea8c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ea90:	bf28      	it	cs
 800ea92:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ea94:	2c06      	cmp	r4, #6
 800ea96:	d919      	bls.n	800eacc <HAL_NVIC_SetPriority+0x50>
 800ea98:	3b03      	subs	r3, #3
 800ea9a:	f04f 34ff 	mov.w	r4, #4294967295
 800ea9e:	409c      	lsls	r4, r3
 800eaa0:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800eaa4:	f04f 32ff 	mov.w	r2, #4294967295
 800eaa8:	40aa      	lsls	r2, r5
 800eaaa:	ea21 0102 	bic.w	r1, r1, r2
 800eaae:	fa01 f203 	lsl.w	r2, r1, r3
 800eab2:	4322      	orrs	r2, r4
 800eab4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800eab6:	2800      	cmp	r0, #0
 800eab8:	b2d2      	uxtb	r2, r2
 800eaba:	db0a      	blt.n	800ead2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eabc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800eac0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800eac4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800eac8:	bc30      	pop	{r4, r5}
 800eaca:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800eacc:	2400      	movs	r4, #0
 800eace:	4623      	mov	r3, r4
 800ead0:	e7e8      	b.n	800eaa4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ead2:	4b04      	ldr	r3, [pc, #16]	; (800eae4 <HAL_NVIC_SetPriority+0x68>)
 800ead4:	f000 000f 	and.w	r0, r0, #15
 800ead8:	4403      	add	r3, r0
 800eada:	761a      	strb	r2, [r3, #24]
 800eadc:	bc30      	pop	{r4, r5}
 800eade:	4770      	bx	lr
 800eae0:	e000ed00 	.word	0xe000ed00
 800eae4:	e000ecfc 	.word	0xe000ecfc

0800eae8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800eae8:	2800      	cmp	r0, #0
 800eaea:	db07      	blt.n	800eafc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800eaec:	f000 011f 	and.w	r1, r0, #31
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	0940      	lsrs	r0, r0, #5
 800eaf4:	4a02      	ldr	r2, [pc, #8]	; (800eb00 <HAL_NVIC_EnableIRQ+0x18>)
 800eaf6:	408b      	lsls	r3, r1
 800eaf8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	e000e100 	.word	0xe000e100

0800eb04 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800eb04:	3801      	subs	r0, #1
 800eb06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800eb0a:	d20e      	bcs.n	800eb2a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800eb0c:	4b08      	ldr	r3, [pc, #32]	; (800eb30 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800eb0e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eb10:	4c08      	ldr	r4, [pc, #32]	; (800eb34 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800eb12:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eb14:	20f0      	movs	r0, #240	; 0xf0
 800eb16:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800eb1a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800eb1c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800eb1e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800eb20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800eb22:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800eb24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb28:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800eb2a:	2001      	movs	r0, #1
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop
 800eb30:	e000e010 	.word	0xe000e010
 800eb34:	e000ed00 	.word	0xe000ed00

0800eb38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800eb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb3a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800eb3c:	f7ff fcfa 	bl	800e534 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800eb40:	2c00      	cmp	r4, #0
 800eb42:	d054      	beq.n	800ebee <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800eb44:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800eb46:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800eb48:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800eb4c:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 800eb4e:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 800eb50:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 800eb54:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800eb58:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 800eb5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800eb5c:	e005      	b.n	800eb6a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800eb5e:	f7ff fce9 	bl	800e534 <HAL_GetTick>
 800eb62:	1b40      	subs	r0, r0, r5
 800eb64:	2805      	cmp	r0, #5
 800eb66:	d83b      	bhi.n	800ebe0 <HAL_DMA_Init+0xa8>
 800eb68:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800eb6a:	681a      	ldr	r2, [r3, #0]
 800eb6c:	07d1      	lsls	r1, r2, #31
 800eb6e:	d4f6      	bmi.n	800eb5e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800eb70:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800eb74:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800eb78:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800eb7a:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 800eb7c:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800eb7e:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800eb80:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800eb84:	430a      	orrs	r2, r1
 800eb86:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800eb88:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800eb8a:	4835      	ldr	r0, [pc, #212]	; (800ec60 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800eb8c:	4332      	orrs	r2, r6
 800eb8e:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800eb90:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800eb92:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800eb94:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800eb96:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800eb98:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800eb9c:	d029      	beq.n	800ebf2 <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800eb9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800eba0:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800eba2:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800eba6:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800eba8:	b2da      	uxtb	r2, r3
 800ebaa:	482e      	ldr	r0, [pc, #184]	; (800ec64 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 800ebac:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ebae:	3a10      	subs	r2, #16
 800ebb0:	fba0 1202 	umull	r1, r2, r0, r2
 800ebb4:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ebb6:	492c      	ldr	r1, [pc, #176]	; (800ec68 <HAL_DMA_Init+0x130>)
 800ebb8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ebbc:	5c89      	ldrb	r1, [r1, r2]
 800ebbe:	65e1      	str	r1, [r4, #92]	; 0x5c
 800ebc0:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 800ebc4:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ebc6:	bf88      	it	hi
 800ebc8:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ebca:	223f      	movs	r2, #63	; 0x3f
 800ebcc:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 800ebce:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ebd0:	2100      	movs	r1, #0
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ebd2:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 800ebd4:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ebd6:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ebd8:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800ebda:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800ebde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ebe0:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ebe2:	2220      	movs	r2, #32
 800ebe4:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800ebe6:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ebe8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800ebec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800ebee:	2001      	movs	r0, #1
}
 800ebf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ebf2:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 800ebf6:	4301      	orrs	r1, r0
 800ebf8:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 800ebfa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 800ebfc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800ebfe:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800ec00:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ec04:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 800ec08:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ec0a:	2800      	cmp	r0, #0
 800ec0c:	d0cc      	beq.n	800eba8 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ec0e:	b17e      	cbz	r6, 800ec30 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ec10:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800ec14:	d016      	beq.n	800ec44 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ec16:	2d02      	cmp	r5, #2
 800ec18:	d903      	bls.n	800ec22 <HAL_DMA_Init+0xea>
 800ec1a:	2d03      	cmp	r5, #3
 800ec1c:	d1c4      	bne.n	800eba8 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ec1e:	01c2      	lsls	r2, r0, #7
 800ec20:	d5c2      	bpl.n	800eba8 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800ec22:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ec24:	2240      	movs	r2, #64	; 0x40
 800ec26:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 800ec28:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 800ec2a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800ec2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 800ec30:	2d01      	cmp	r5, #1
 800ec32:	d003      	beq.n	800ec3c <HAL_DMA_Init+0x104>
 800ec34:	d3f3      	bcc.n	800ec1e <HAL_DMA_Init+0xe6>
 800ec36:	2d02      	cmp	r5, #2
 800ec38:	d1b6      	bne.n	800eba8 <HAL_DMA_Init+0x70>
 800ec3a:	e7f0      	b.n	800ec1e <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ec3c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800ec40:	d1b2      	bne.n	800eba8 <HAL_DMA_Init+0x70>
 800ec42:	e7ee      	b.n	800ec22 <HAL_DMA_Init+0xea>
    switch (tmp)
 800ec44:	2d03      	cmp	r5, #3
 800ec46:	d8af      	bhi.n	800eba8 <HAL_DMA_Init+0x70>
 800ec48:	a201      	add	r2, pc, #4	; (adr r2, 800ec50 <HAL_DMA_Init+0x118>)
 800ec4a:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800ec4e:	bf00      	nop
 800ec50:	0800ec23 	.word	0x0800ec23
 800ec54:	0800ec1f 	.word	0x0800ec1f
 800ec58:	0800ec23 	.word	0x0800ec23
 800ec5c:	0800ec3d 	.word	0x0800ec3d
 800ec60:	f010803f 	.word	0xf010803f
 800ec64:	aaaaaaab 	.word	0xaaaaaaab
 800ec68:	0801658c 	.word	0x0801658c

0800ec6c <HAL_DMA_Start_IT>:
{
 800ec6c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800ec6e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800ec72:	2c01      	cmp	r4, #1
 800ec74:	d035      	beq.n	800ece2 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 800ec76:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ec7a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800ec7c:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800ec7e:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 800ec80:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800ec84:	d127      	bne.n	800ecd6 <HAL_DMA_Start_IT+0x6a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ec86:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800ec88:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ec8a:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800ec8c:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ec90:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ec92:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ec94:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ec96:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ec9a:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ec9c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800ec9e:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 800eca0:	bf0a      	itet	eq
 800eca2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800eca4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800eca6:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800eca8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 800ecaa:	bf18      	it	ne
 800ecac:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ecae:	233f      	movs	r3, #63	; 0x3f
 800ecb0:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 800ecb2:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ecb4:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ecb6:	6823      	ldr	r3, [r4, #0]
 800ecb8:	f043 0316 	orr.w	r3, r3, #22
 800ecbc:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800ecbe:	b11a      	cbz	r2, 800ecc8 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 800ecc0:	6823      	ldr	r3, [r4, #0]
 800ecc2:	f043 0308 	orr.w	r3, r3, #8
 800ecc6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800ecc8:	6823      	ldr	r3, [r4, #0]
 800ecca:	f043 0301 	orr.w	r3, r3, #1
 800ecce:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ecd0:	2000      	movs	r0, #0
}
 800ecd2:	bcf0      	pop	{r4, r5, r6, r7}
 800ecd4:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 800ecdc:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800ecde:	2002      	movs	r0, #2
}
 800ece0:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800ece2:	2002      	movs	r0, #2
}
 800ece4:	bcf0      	pop	{r4, r5, r6, r7}
 800ece6:	4770      	bx	lr

0800ece8 <HAL_DMA_Abort>:
{
 800ece8:	b570      	push	{r4, r5, r6, lr}
 800ecea:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ecec:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800ecee:	f7ff fc21 	bl	800e534 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ecf2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800ecf6:	2b02      	cmp	r3, #2
 800ecf8:	d006      	beq.n	800ed08 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ecfa:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800ecfc:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ecfe:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800ed00:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800ed04:	2001      	movs	r0, #1
}
 800ed06:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ed08:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ed0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	f022 0216 	bic.w	r2, r2, #22
 800ed12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ed14:	695a      	ldr	r2, [r3, #20]
 800ed16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ed1a:	4605      	mov	r5, r0
 800ed1c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ed1e:	b331      	cbz	r1, 800ed6e <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	f022 0208 	bic.w	r2, r2, #8
 800ed26:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800ed28:	681a      	ldr	r2, [r3, #0]
 800ed2a:	f022 0201 	bic.w	r2, r2, #1
 800ed2e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ed30:	e005      	b.n	800ed3e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ed32:	f7ff fbff 	bl	800e534 <HAL_GetTick>
 800ed36:	1b40      	subs	r0, r0, r5
 800ed38:	2805      	cmp	r0, #5
 800ed3a:	d80f      	bhi.n	800ed5c <HAL_DMA_Abort+0x74>
 800ed3c:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f013 0301 	ands.w	r3, r3, #1
 800ed44:	d1f5      	bne.n	800ed32 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ed46:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ed48:	223f      	movs	r2, #63	; 0x3f
 800ed4a:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800ed4c:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ed4e:	60b2      	str	r2, [r6, #8]
  return HAL_OK;
 800ed50:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 800ed52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800ed56:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 800ed5a:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ed5c:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 800ed5e:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ed60:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ed62:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800ed64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ed68:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800ed6c:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ed6e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ed70:	2a00      	cmp	r2, #0
 800ed72:	d1d5      	bne.n	800ed20 <HAL_DMA_Abort+0x38>
 800ed74:	e7d8      	b.n	800ed28 <HAL_DMA_Abort+0x40>
 800ed76:	bf00      	nop

0800ed78 <HAL_DMA_IRQHandler>:
{
 800ed78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed7a:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800ed7c:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ed7e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 800ed80:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ed82:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800ed84:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ed86:	4965      	ldr	r1, [pc, #404]	; (800ef1c <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ed88:	2208      	movs	r2, #8
 800ed8a:	409a      	lsls	r2, r3
 800ed8c:	422a      	tst	r2, r5
{
 800ed8e:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800ed90:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ed92:	d003      	beq.n	800ed9c <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ed94:	6801      	ldr	r1, [r0, #0]
 800ed96:	6808      	ldr	r0, [r1, #0]
 800ed98:	0740      	lsls	r0, r0, #29
 800ed9a:	d459      	bmi.n	800ee50 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	409a      	lsls	r2, r3
 800eda0:	422a      	tst	r2, r5
 800eda2:	d003      	beq.n	800edac <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800eda4:	6821      	ldr	r1, [r4, #0]
 800eda6:	6949      	ldr	r1, [r1, #20]
 800eda8:	0608      	lsls	r0, r1, #24
 800edaa:	d474      	bmi.n	800ee96 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800edac:	2204      	movs	r2, #4
 800edae:	409a      	lsls	r2, r3
 800edb0:	422a      	tst	r2, r5
 800edb2:	d003      	beq.n	800edbc <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800edb4:	6821      	ldr	r1, [r4, #0]
 800edb6:	6809      	ldr	r1, [r1, #0]
 800edb8:	0789      	lsls	r1, r1, #30
 800edba:	d466      	bmi.n	800ee8a <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800edbc:	2210      	movs	r2, #16
 800edbe:	409a      	lsls	r2, r3
 800edc0:	422a      	tst	r2, r5
 800edc2:	d003      	beq.n	800edcc <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800edc4:	6821      	ldr	r1, [r4, #0]
 800edc6:	6808      	ldr	r0, [r1, #0]
 800edc8:	0700      	lsls	r0, r0, #28
 800edca:	d44b      	bmi.n	800ee64 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800edcc:	2220      	movs	r2, #32
 800edce:	409a      	lsls	r2, r3
 800edd0:	422a      	tst	r2, r5
 800edd2:	d014      	beq.n	800edfe <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800edd4:	6821      	ldr	r1, [r4, #0]
 800edd6:	6808      	ldr	r0, [r1, #0]
 800edd8:	06c0      	lsls	r0, r0, #27
 800edda:	d510      	bpl.n	800edfe <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800eddc:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800edde:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800ede2:	2a05      	cmp	r2, #5
 800ede4:	d063      	beq.n	800eeae <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ede6:	680b      	ldr	r3, [r1, #0]
 800ede8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800edec:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800edee:	d07e      	beq.n	800eeee <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800edf0:	0319      	lsls	r1, r3, #12
 800edf2:	f140 8089 	bpl.w	800ef08 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800edf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800edf8:	b10b      	cbz	r3, 800edfe <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800edfa:	4620      	mov	r0, r4
 800edfc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800edfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ee00:	b323      	cbz	r3, 800ee4c <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ee02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ee04:	07da      	lsls	r2, r3, #31
 800ee06:	d51a      	bpl.n	800ee3e <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 800ee08:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800ee0a:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800ee0c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800ee10:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ee12:	4943      	ldr	r1, [pc, #268]	; (800ef20 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 800ee14:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800ee18:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 800ee1c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ee1e:	0ab6      	lsrs	r6, r6, #10
 800ee20:	e002      	b.n	800ee28 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ee22:	6813      	ldr	r3, [r2, #0]
 800ee24:	07db      	lsls	r3, r3, #31
 800ee26:	d504      	bpl.n	800ee32 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 800ee28:	9b01      	ldr	r3, [sp, #4]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	42b3      	cmp	r3, r6
 800ee2e:	9301      	str	r3, [sp, #4]
 800ee30:	d9f7      	bls.n	800ee22 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 800ee32:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 800ee34:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800ee36:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800ee3a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800ee3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ee40:	b123      	cbz	r3, 800ee4c <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800ee42:	4620      	mov	r0, r4
}
 800ee44:	b003      	add	sp, #12
 800ee46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800ee4a:	4718      	bx	r3
}
 800ee4c:	b003      	add	sp, #12
 800ee4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ee50:	6808      	ldr	r0, [r1, #0]
 800ee52:	f020 0004 	bic.w	r0, r0, #4
 800ee56:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ee58:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ee5a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800ee5c:	f042 0201 	orr.w	r2, r2, #1
 800ee60:	6562      	str	r2, [r4, #84]	; 0x54
 800ee62:	e79b      	b.n	800ed9c <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ee64:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ee66:	680a      	ldr	r2, [r1, #0]
 800ee68:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ee6c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ee6e:	d118      	bne.n	800eea2 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ee70:	05d2      	lsls	r2, r2, #23
 800ee72:	d403      	bmi.n	800ee7c <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ee74:	680a      	ldr	r2, [r1, #0]
 800ee76:	f022 0208 	bic.w	r2, r2, #8
 800ee7a:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800ee7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ee7e:	2a00      	cmp	r2, #0
 800ee80:	d0a4      	beq.n	800edcc <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800ee82:	4620      	mov	r0, r4
 800ee84:	4790      	blx	r2
 800ee86:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ee88:	e7a0      	b.n	800edcc <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ee8a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ee8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800ee8e:	f042 0204 	orr.w	r2, r2, #4
 800ee92:	6562      	str	r2, [r4, #84]	; 0x54
 800ee94:	e792      	b.n	800edbc <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ee96:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ee98:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800ee9a:	f042 0202 	orr.w	r2, r2, #2
 800ee9e:	6562      	str	r2, [r4, #84]	; 0x54
 800eea0:	e784      	b.n	800edac <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800eea2:	0311      	lsls	r1, r2, #12
 800eea4:	d5ea      	bpl.n	800ee7c <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800eea6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800eea8:	2a00      	cmp	r2, #0
 800eeaa:	d1ea      	bne.n	800ee82 <HAL_DMA_IRQHandler+0x10a>
 800eeac:	e78e      	b.n	800edcc <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800eeae:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800eeb0:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800eeb2:	f022 0216 	bic.w	r2, r2, #22
 800eeb6:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800eeb8:	694a      	ldr	r2, [r1, #20]
 800eeba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eebe:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800eec0:	b338      	cbz	r0, 800ef12 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800eec2:	680a      	ldr	r2, [r1, #0]
 800eec4:	f022 0208 	bic.w	r2, r2, #8
 800eec8:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800eeca:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800eecc:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800eece:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800eed2:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 800eed4:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800eed6:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800eed8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800eedc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800eee0:	2900      	cmp	r1, #0
 800eee2:	d0b3      	beq.n	800ee4c <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 800eee4:	4620      	mov	r0, r4
}
 800eee6:	b003      	add	sp, #12
 800eee8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800eeec:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800eeee:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800eef2:	d180      	bne.n	800edf6 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800eef4:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800eef6:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800eef8:	f022 0210 	bic.w	r2, r2, #16
 800eefc:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800eefe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800ef02:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800ef06:	e776      	b.n	800edf6 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 800ef08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	f47f af75 	bne.w	800edfa <HAL_DMA_IRQHandler+0x82>
 800ef10:	e775      	b.n	800edfe <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ef12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ef14:	2a00      	cmp	r2, #0
 800ef16:	d1d4      	bne.n	800eec2 <HAL_DMA_IRQHandler+0x14a>
 800ef18:	e7d7      	b.n	800eeca <HAL_DMA_IRQHandler+0x152>
 800ef1a:	bf00      	nop
 800ef1c:	20000024 	.word	0x20000024
 800ef20:	1b4e81b5 	.word	0x1b4e81b5

0800ef24 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ef24:	4b1b      	ldr	r3, [pc, #108]	; (800ef94 <FLASH_SetErrorCode+0x70>)
 800ef26:	68da      	ldr	r2, [r3, #12]
 800ef28:	06d1      	lsls	r1, r2, #27
 800ef2a:	d505      	bpl.n	800ef38 <FLASH_SetErrorCode+0x14>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ef2c:	491a      	ldr	r1, [pc, #104]	; (800ef98 <FLASH_SetErrorCode+0x74>)
 800ef2e:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ef30:	2010      	movs	r0, #16
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ef32:	4302      	orrs	r2, r0
 800ef34:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ef36:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ef38:	4b16      	ldr	r3, [pc, #88]	; (800ef94 <FLASH_SetErrorCode+0x70>)
 800ef3a:	68da      	ldr	r2, [r3, #12]
 800ef3c:	0692      	lsls	r2, r2, #26
 800ef3e:	d506      	bpl.n	800ef4e <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ef40:	4915      	ldr	r1, [pc, #84]	; (800ef98 <FLASH_SetErrorCode+0x74>)
 800ef42:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ef44:	2020      	movs	r0, #32
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ef46:	f042 0208 	orr.w	r2, r2, #8
 800ef4a:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ef4c:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ef4e:	4b11      	ldr	r3, [pc, #68]	; (800ef94 <FLASH_SetErrorCode+0x70>)
 800ef50:	68da      	ldr	r2, [r3, #12]
 800ef52:	0650      	lsls	r0, r2, #25
 800ef54:	d506      	bpl.n	800ef64 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ef56:	4910      	ldr	r1, [pc, #64]	; (800ef98 <FLASH_SetErrorCode+0x74>)
 800ef58:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ef5a:	2040      	movs	r0, #64	; 0x40
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ef5c:	f042 0204 	orr.w	r2, r2, #4
 800ef60:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ef62:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ef64:	4b0b      	ldr	r3, [pc, #44]	; (800ef94 <FLASH_SetErrorCode+0x70>)
 800ef66:	68da      	ldr	r2, [r3, #12]
 800ef68:	0611      	lsls	r1, r2, #24
 800ef6a:	d506      	bpl.n	800ef7a <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ef6c:	490a      	ldr	r1, [pc, #40]	; (800ef98 <FLASH_SetErrorCode+0x74>)
 800ef6e:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ef70:	2080      	movs	r0, #128	; 0x80
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ef72:	f042 0202 	orr.w	r2, r2, #2
 800ef76:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ef78:	60d8      	str	r0, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800ef7a:	4b06      	ldr	r3, [pc, #24]	; (800ef94 <FLASH_SetErrorCode+0x70>)
 800ef7c:	68da      	ldr	r2, [r3, #12]
 800ef7e:	0792      	lsls	r2, r2, #30
 800ef80:	d506      	bpl.n	800ef90 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ef82:	4905      	ldr	r1, [pc, #20]	; (800ef98 <FLASH_SetErrorCode+0x74>)
 800ef84:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ef86:	2002      	movs	r0, #2
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ef88:	f042 0220 	orr.w	r2, r2, #32
 800ef8c:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ef8e:	60d8      	str	r0, [r3, #12]
  }
}
 800ef90:	4770      	bx	lr
 800ef92:	bf00      	nop
 800ef94:	40023c00 	.word	0x40023c00
 800ef98:	200011dc 	.word	0x200011dc

0800ef9c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ef9c:	4b06      	ldr	r3, [pc, #24]	; (800efb8 <HAL_FLASH_Unlock+0x1c>)
 800ef9e:	691a      	ldr	r2, [r3, #16]
 800efa0:	2a00      	cmp	r2, #0
 800efa2:	db01      	blt.n	800efa8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800efa4:	2000      	movs	r0, #0
}
 800efa6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800efa8:	4904      	ldr	r1, [pc, #16]	; (800efbc <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800efaa:	4a05      	ldr	r2, [pc, #20]	; (800efc0 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800efac:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800efae:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800efb0:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800efb2:	0fc0      	lsrs	r0, r0, #31
 800efb4:	4770      	bx	lr
 800efb6:	bf00      	nop
 800efb8:	40023c00 	.word	0x40023c00
 800efbc:	45670123 	.word	0x45670123
 800efc0:	cdef89ab 	.word	0xcdef89ab

0800efc4 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800efc4:	4a03      	ldr	r2, [pc, #12]	; (800efd4 <HAL_FLASH_Lock+0x10>)
 800efc6:	6913      	ldr	r3, [r2, #16]
 800efc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800efcc:	6113      	str	r3, [r2, #16]
}
 800efce:	2000      	movs	r0, #0
 800efd0:	4770      	bx	lr
 800efd2:	bf00      	nop
 800efd4:	40023c00 	.word	0x40023c00

0800efd8 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800efd8:	4b12      	ldr	r3, [pc, #72]	; (800f024 <FLASH_WaitForLastOperation+0x4c>)
{ 
 800efda:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800efdc:	2200      	movs	r2, #0
{ 
 800efde:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800efe0:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 800efe2:	f7ff faa7 	bl	800e534 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800efe6:	4c10      	ldr	r4, [pc, #64]	; (800f028 <FLASH_WaitForLastOperation+0x50>)
  tickstart = HAL_GetTick();
 800efe8:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800efea:	e001      	b.n	800eff0 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800efec:	1c69      	adds	r1, r5, #1
 800efee:	d10d      	bne.n	800f00c <FLASH_WaitForLastOperation+0x34>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800eff0:	68e3      	ldr	r3, [r4, #12]
 800eff2:	03da      	lsls	r2, r3, #15
 800eff4:	d4fa      	bmi.n	800efec <FLASH_WaitForLastOperation+0x14>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800eff6:	68e3      	ldr	r3, [r4, #12]
 800eff8:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800effa:	bf44      	itt	mi
 800effc:	2301      	movmi	r3, #1
 800effe:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800f000:	4b09      	ldr	r3, [pc, #36]	; (800f028 <FLASH_WaitForLastOperation+0x50>)
 800f002:	68d8      	ldr	r0, [r3, #12]
 800f004:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 800f008:	d108      	bne.n	800f01c <FLASH_WaitForLastOperation+0x44>
}  
 800f00a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800f00c:	b125      	cbz	r5, 800f018 <FLASH_WaitForLastOperation+0x40>
 800f00e:	f7ff fa91 	bl	800e534 <HAL_GetTick>
 800f012:	1b80      	subs	r0, r0, r6
 800f014:	42a8      	cmp	r0, r5
 800f016:	d9eb      	bls.n	800eff0 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800f018:	2003      	movs	r0, #3
}  
 800f01a:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800f01c:	f7ff ff82 	bl	800ef24 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800f020:	2001      	movs	r0, #1
}  
 800f022:	bd70      	pop	{r4, r5, r6, pc}
 800f024:	200011dc 	.word	0x200011dc
 800f028:	40023c00 	.word	0x40023c00

0800f02c <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800f02c:	b139      	cbz	r1, 800f03e <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800f02e:	2901      	cmp	r1, #1
 800f030:	d01c      	beq.n	800f06c <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800f032:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800f034:	bf0c      	ite	eq
 800f036:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800f03a:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f03e:	4b0d      	ldr	r3, [pc, #52]	; (800f074 <FLASH_Erase_Sector+0x48>)
 800f040:	691a      	ldr	r2, [r3, #16]
 800f042:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f046:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800f048:	691a      	ldr	r2, [r3, #16]
 800f04a:	4311      	orrs	r1, r2
 800f04c:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800f04e:	691a      	ldr	r2, [r3, #16]
 800f050:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800f054:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800f056:	691a      	ldr	r2, [r3, #16]
 800f058:	f042 0202 	orr.w	r2, r2, #2
 800f05c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800f060:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800f062:	691a      	ldr	r2, [r3, #16]
 800f064:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f068:	611a      	str	r2, [r3, #16]
}
 800f06a:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800f06c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f070:	e7e5      	b.n	800f03e <FLASH_Erase_Sector+0x12>
 800f072:	bf00      	nop
 800f074:	40023c00 	.word	0x40023c00

0800f078 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800f078:	4b14      	ldr	r3, [pc, #80]	; (800f0cc <FLASH_FlushCaches+0x54>)
 800f07a:	681a      	ldr	r2, [r3, #0]
 800f07c:	0591      	lsls	r1, r2, #22
 800f07e:	d50f      	bpl.n	800f0a0 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800f080:	681a      	ldr	r2, [r3, #0]
 800f082:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f086:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f08e:	601a      	str	r2, [r3, #0]
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f096:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f09e:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800f0a0:	4b0a      	ldr	r3, [pc, #40]	; (800f0cc <FLASH_FlushCaches+0x54>)
 800f0a2:	681a      	ldr	r2, [r3, #0]
 800f0a4:	0552      	lsls	r2, r2, #21
 800f0a6:	d50f      	bpl.n	800f0c8 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f0ae:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800f0b0:	681a      	ldr	r2, [r3, #0]
 800f0b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f0b6:	601a      	str	r2, [r3, #0]
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f0be:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800f0c0:	681a      	ldr	r2, [r3, #0]
 800f0c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f0c6:	601a      	str	r2, [r3, #0]
  }
}
 800f0c8:	4770      	bx	lr
 800f0ca:	bf00      	nop
 800f0cc:	40023c00 	.word	0x40023c00

0800f0d0 <HAL_FLASHEx_Erase>:
{
 800f0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800f0d4:	4e2d      	ldr	r6, [pc, #180]	; (800f18c <HAL_FLASHEx_Erase+0xbc>)
 800f0d6:	7e33      	ldrb	r3, [r6, #24]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d038      	beq.n	800f14e <HAL_FLASHEx_Erase+0x7e>
 800f0dc:	2301      	movs	r3, #1
 800f0de:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f0e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f0e4:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800f0e6:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f0e8:	f7ff ff76 	bl	800efd8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800f0ec:	4607      	mov	r7, r0
 800f0ee:	bb48      	cbnz	r0, 800f144 <HAL_FLASHEx_Erase+0x74>
    *SectorError = 0xFFFFFFFFU;
 800f0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f4:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800f0f8:	6823      	ldr	r3, [r4, #0]
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d02b      	beq.n	800f156 <HAL_FLASHEx_Erase+0x86>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f0fe:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800f102:	442b      	add	r3, r5
 800f104:	429d      	cmp	r5, r3
 800f106:	d21b      	bcs.n	800f140 <HAL_FLASHEx_Erase+0x70>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800f108:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800f190 <HAL_FLASHEx_Erase+0xc0>
 800f10c:	e005      	b.n	800f11a <HAL_FLASHEx_Erase+0x4a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f10e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800f112:	3501      	adds	r5, #1
 800f114:	4413      	add	r3, r2
 800f116:	42ab      	cmp	r3, r5
 800f118:	d912      	bls.n	800f140 <HAL_FLASHEx_Erase+0x70>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800f11a:	7c21      	ldrb	r1, [r4, #16]
 800f11c:	4628      	mov	r0, r5
 800f11e:	f7ff ff85 	bl	800f02c <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f122:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f126:	f7ff ff57 	bl	800efd8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800f12a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f12e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800f132:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800f136:	2800      	cmp	r0, #0
 800f138:	d0e9      	beq.n	800f10e <HAL_FLASHEx_Erase+0x3e>
          *SectorError = index;
 800f13a:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f13e:	4607      	mov	r7, r0
    FLASH_FlushCaches();    
 800f140:	f7ff ff9a 	bl	800f078 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800f144:	2300      	movs	r3, #0
 800f146:	7633      	strb	r3, [r6, #24]
}
 800f148:	4638      	mov	r0, r7
 800f14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800f14e:	2702      	movs	r7, #2
}
 800f150:	4638      	mov	r0, r7
 800f152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f156:	4d0e      	ldr	r5, [pc, #56]	; (800f190 <HAL_FLASHEx_Erase+0xc0>)
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800f158:	6923      	ldr	r3, [r4, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f15a:	692a      	ldr	r2, [r5, #16]
 800f15c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f160:	612a      	str	r2, [r5, #16]
  FLASH->CR |= FLASH_CR_MER;
 800f162:	692a      	ldr	r2, [r5, #16]
 800f164:	f042 0204 	orr.w	r2, r2, #4
 800f168:	612a      	str	r2, [r5, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800f16a:	692a      	ldr	r2, [r5, #16]
 800f16c:	021b      	lsls	r3, r3, #8
 800f16e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f172:	b29b      	uxth	r3, r3
 800f174:	4313      	orrs	r3, r2
 800f176:	612b      	str	r3, [r5, #16]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f178:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f17c:	f7ff ff2c 	bl	800efd8 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800f180:	692b      	ldr	r3, [r5, #16]
 800f182:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f186:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800f188:	612b      	str	r3, [r5, #16]
 800f18a:	e7d9      	b.n	800f140 <HAL_FLASHEx_Erase+0x70>
 800f18c:	200011dc 	.word	0x200011dc
 800f190:	40023c00 	.word	0x40023c00

0800f194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f198:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f19c:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 800f394 <HAL_GPIO_Init+0x200>
{
 800f1a0:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f1a2:	2400      	movs	r4, #0
 800f1a4:	e003      	b.n	800f1ae <HAL_GPIO_Init+0x1a>
 800f1a6:	3401      	adds	r4, #1
 800f1a8:	2c10      	cmp	r4, #16
 800f1aa:	f000 808c 	beq.w	800f2c6 <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f1b2:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d1f5      	bne.n	800f1a6 <HAL_GPIO_Init+0x12>
 800f1ba:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f1be:	f026 0910 	bic.w	r9, r6, #16
 800f1c2:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 800f1c6:	2303      	movs	r3, #3
 800f1c8:	f109 37ff 	add.w	r7, r9, #4294967295
 800f1cc:	fa03 f30c 	lsl.w	r3, r3, ip
 800f1d0:	2f01      	cmp	r7, #1
 800f1d2:	ea6f 0303 	mvn.w	r3, r3
 800f1d6:	fa05 f50c 	lsl.w	r5, r5, ip
 800f1da:	d977      	bls.n	800f2cc <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 800f1dc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f1de:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f1e0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800f1e2:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 800f1e4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f1e6:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f1ea:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f1ec:	fa05 f30c 	lsl.w	r3, r5, ip
 800f1f0:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 800f1f2:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f1f4:	00f3      	lsls	r3, r6, #3
 800f1f6:	d5d6      	bpl.n	800f1a6 <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f1f8:	4d5f      	ldr	r5, [pc, #380]	; (800f378 <HAL_GPIO_Init+0x1e4>)
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	9301      	str	r3, [sp, #4]
 800f1fe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800f200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f204:	646b      	str	r3, [r5, #68]	; 0x44
 800f206:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 800f208:	f024 0303 	bic.w	r3, r4, #3
 800f20c:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800f210:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f214:	9501      	str	r5, [sp, #4]
 800f216:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f21a:	f004 0503 	and.w	r5, r4, #3
 800f21e:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f222:	4d56      	ldr	r5, [pc, #344]	; (800f37c <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f224:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800f226:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f22a:	270f      	movs	r7, #15
 800f22c:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f230:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f232:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f236:	d01f      	beq.n	800f278 <HAL_GPIO_Init+0xe4>
 800f238:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800f23c:	42a8      	cmp	r0, r5
 800f23e:	d076      	beq.n	800f32e <HAL_GPIO_Init+0x19a>
 800f240:	4d4f      	ldr	r5, [pc, #316]	; (800f380 <HAL_GPIO_Init+0x1ec>)
 800f242:	42a8      	cmp	r0, r5
 800f244:	d079      	beq.n	800f33a <HAL_GPIO_Init+0x1a6>
 800f246:	4d4f      	ldr	r5, [pc, #316]	; (800f384 <HAL_GPIO_Init+0x1f0>)
 800f248:	42a8      	cmp	r0, r5
 800f24a:	d07c      	beq.n	800f346 <HAL_GPIO_Init+0x1b2>
 800f24c:	4d4e      	ldr	r5, [pc, #312]	; (800f388 <HAL_GPIO_Init+0x1f4>)
 800f24e:	42a8      	cmp	r0, r5
 800f250:	d07f      	beq.n	800f352 <HAL_GPIO_Init+0x1be>
 800f252:	4d4e      	ldr	r5, [pc, #312]	; (800f38c <HAL_GPIO_Init+0x1f8>)
 800f254:	42a8      	cmp	r0, r5
 800f256:	f000 8082 	beq.w	800f35e <HAL_GPIO_Init+0x1ca>
 800f25a:	4d4d      	ldr	r5, [pc, #308]	; (800f390 <HAL_GPIO_Init+0x1fc>)
 800f25c:	42a8      	cmp	r0, r5
 800f25e:	f000 8084 	beq.w	800f36a <HAL_GPIO_Init+0x1d6>
 800f262:	f8df c134 	ldr.w	ip, [pc, #308]	; 800f398 <HAL_GPIO_Init+0x204>
 800f266:	4560      	cmp	r0, ip
 800f268:	bf0c      	ite	eq
 800f26a:	f04f 0c07 	moveq.w	ip, #7
 800f26e:	f04f 0c08 	movne.w	ip, #8
 800f272:	fa0c f509 	lsl.w	r5, ip, r9
 800f276:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f278:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800f27a:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 800f27e:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f280:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 800f282:	bf54      	ite	pl
 800f284:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800f286:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 800f288:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800f28c:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f290:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 800f292:	bf54      	ite	pl
 800f294:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800f296:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 800f298:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f29c:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f2a0:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 800f2a2:	bf54      	ite	pl
 800f2a4:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800f2a6:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 800f2a8:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800f2ac:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f2b0:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f2b2:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 800f2b6:	bf54      	ite	pl
 800f2b8:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800f2ba:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f2bc:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 800f2be:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f2c2:	f47f af74 	bne.w	800f1ae <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 800f2c6:	b003      	add	sp, #12
 800f2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800f2cc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f2ce:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f2d2:	68cf      	ldr	r7, [r1, #12]
 800f2d4:	fa07 f70c 	lsl.w	r7, r7, ip
 800f2d8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800f2dc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800f2de:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800f2e2:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f2e6:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800f2ea:	40a7      	lsls	r7, r4
 800f2ec:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800f2f0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800f2f2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f2f4:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f2f6:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f2f8:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 800f2fc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f2fe:	f47f af71 	bne.w	800f1e4 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 800f302:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800f306:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f30a:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 800f30e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f312:	00bf      	lsls	r7, r7, #2
 800f314:	f04f 0b0f 	mov.w	fp, #15
 800f318:	fa0b fb07 	lsl.w	fp, fp, r7
 800f31c:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800f320:	690d      	ldr	r5, [r1, #16]
 800f322:	40bd      	lsls	r5, r7
 800f324:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 800f328:	f8c9 5020 	str.w	r5, [r9, #32]
 800f32c:	e75a      	b.n	800f1e4 <HAL_GPIO_Init+0x50>
 800f32e:	f04f 0c01 	mov.w	ip, #1
 800f332:	fa0c f509 	lsl.w	r5, ip, r9
 800f336:	432f      	orrs	r7, r5
 800f338:	e79e      	b.n	800f278 <HAL_GPIO_Init+0xe4>
 800f33a:	f04f 0c02 	mov.w	ip, #2
 800f33e:	fa0c f509 	lsl.w	r5, ip, r9
 800f342:	432f      	orrs	r7, r5
 800f344:	e798      	b.n	800f278 <HAL_GPIO_Init+0xe4>
 800f346:	f04f 0c03 	mov.w	ip, #3
 800f34a:	fa0c f509 	lsl.w	r5, ip, r9
 800f34e:	432f      	orrs	r7, r5
 800f350:	e792      	b.n	800f278 <HAL_GPIO_Init+0xe4>
 800f352:	f04f 0c04 	mov.w	ip, #4
 800f356:	fa0c f509 	lsl.w	r5, ip, r9
 800f35a:	432f      	orrs	r7, r5
 800f35c:	e78c      	b.n	800f278 <HAL_GPIO_Init+0xe4>
 800f35e:	f04f 0c05 	mov.w	ip, #5
 800f362:	fa0c f509 	lsl.w	r5, ip, r9
 800f366:	432f      	orrs	r7, r5
 800f368:	e786      	b.n	800f278 <HAL_GPIO_Init+0xe4>
 800f36a:	f04f 0c06 	mov.w	ip, #6
 800f36e:	fa0c f509 	lsl.w	r5, ip, r9
 800f372:	432f      	orrs	r7, r5
 800f374:	e780      	b.n	800f278 <HAL_GPIO_Init+0xe4>
 800f376:	bf00      	nop
 800f378:	40023800 	.word	0x40023800
 800f37c:	40020000 	.word	0x40020000
 800f380:	40020800 	.word	0x40020800
 800f384:	40020c00 	.word	0x40020c00
 800f388:	40021000 	.word	0x40021000
 800f38c:	40021400 	.word	0x40021400
 800f390:	40021800 	.word	0x40021800
 800f394:	40013c00 	.word	0x40013c00
 800f398:	40021c00 	.word	0x40021c00

0800f39c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f39c:	b902      	cbnz	r2, 800f3a0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800f39e:	0409      	lsls	r1, r1, #16
 800f3a0:	6181      	str	r1, [r0, #24]
  }
}
 800f3a2:	4770      	bx	lr

0800f3a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f3a4:	4a04      	ldr	r2, [pc, #16]	; (800f3b8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800f3a6:	6951      	ldr	r1, [r2, #20]
 800f3a8:	4201      	tst	r1, r0
 800f3aa:	d100      	bne.n	800f3ae <HAL_GPIO_EXTI_IRQHandler+0xa>
 800f3ac:	4770      	bx	lr
{
 800f3ae:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f3b0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f3b2:	f7fe ff6f 	bl	800e294 <HAL_GPIO_EXTI_Callback>
  }
}
 800f3b6:	bd08      	pop	{r3, pc}
 800f3b8:	40013c00 	.word	0x40013c00

0800f3bc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	f000 8132 	beq.w	800f626 <HAL_RCC_OscConfig+0x26a>
{
 800f3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f3c6:	6803      	ldr	r3, [r0, #0]
 800f3c8:	07dd      	lsls	r5, r3, #31
{
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f3ce:	d52f      	bpl.n	800f430 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f3d0:	49ac      	ldr	r1, [pc, #688]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
 800f3d2:	688a      	ldr	r2, [r1, #8]
 800f3d4:	f002 020c 	and.w	r2, r2, #12
 800f3d8:	2a04      	cmp	r2, #4
 800f3da:	f000 80ea 	beq.w	800f5b2 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f3de:	688a      	ldr	r2, [r1, #8]
 800f3e0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f3e4:	2a08      	cmp	r2, #8
 800f3e6:	f000 80e0 	beq.w	800f5aa <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f3ea:	6863      	ldr	r3, [r4, #4]
 800f3ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3f0:	f000 80e9 	beq.w	800f5c6 <HAL_RCC_OscConfig+0x20a>
 800f3f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f3f8:	f000 8178 	beq.w	800f6ec <HAL_RCC_OscConfig+0x330>
 800f3fc:	4da1      	ldr	r5, [pc, #644]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
 800f3fe:	682a      	ldr	r2, [r5, #0]
 800f400:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f404:	602a      	str	r2, [r5, #0]
 800f406:	682a      	ldr	r2, [r5, #0]
 800f408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f40c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f40e:	2b00      	cmp	r3, #0
 800f410:	f040 80de 	bne.w	800f5d0 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f414:	f7ff f88e 	bl	800e534 <HAL_GetTick>
 800f418:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f41a:	e005      	b.n	800f428 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f41c:	f7ff f88a 	bl	800e534 <HAL_GetTick>
 800f420:	1b80      	subs	r0, r0, r6
 800f422:	2864      	cmp	r0, #100	; 0x64
 800f424:	f200 80f2 	bhi.w	800f60c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f428:	682b      	ldr	r3, [r5, #0]
 800f42a:	039b      	lsls	r3, r3, #14
 800f42c:	d4f6      	bmi.n	800f41c <HAL_RCC_OscConfig+0x60>
 800f42e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f430:	079f      	lsls	r7, r3, #30
 800f432:	d475      	bmi.n	800f520 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f434:	071a      	lsls	r2, r3, #28
 800f436:	d515      	bpl.n	800f464 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f438:	6963      	ldr	r3, [r4, #20]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	f000 80a5 	beq.w	800f58a <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f440:	4b91      	ldr	r3, [pc, #580]	; (800f688 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f442:	4d90      	ldr	r5, [pc, #576]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 800f444:	2201      	movs	r2, #1
 800f446:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800f448:	f7ff f874 	bl	800e534 <HAL_GetTick>
 800f44c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f44e:	e005      	b.n	800f45c <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f450:	f7ff f870 	bl	800e534 <HAL_GetTick>
 800f454:	1b80      	subs	r0, r0, r6
 800f456:	2802      	cmp	r0, #2
 800f458:	f200 80d8 	bhi.w	800f60c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f45c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800f45e:	079b      	lsls	r3, r3, #30
 800f460:	d5f6      	bpl.n	800f450 <HAL_RCC_OscConfig+0x94>
 800f462:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f464:	0758      	lsls	r0, r3, #29
 800f466:	d53b      	bpl.n	800f4e0 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f468:	4a86      	ldr	r2, [pc, #536]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
 800f46a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f46c:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800f470:	f040 80db 	bne.w	800f62a <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f474:	9301      	str	r3, [sp, #4]
 800f476:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f47c:	6413      	str	r3, [r2, #64]	; 0x40
 800f47e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f484:	9301      	str	r3, [sp, #4]
 800f486:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800f488:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f48a:	4d80      	ldr	r5, [pc, #512]	; (800f68c <HAL_RCC_OscConfig+0x2d0>)
 800f48c:	682a      	ldr	r2, [r5, #0]
 800f48e:	05d1      	lsls	r1, r2, #23
 800f490:	f140 80ac 	bpl.w	800f5ec <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f494:	68a3      	ldr	r3, [r4, #8]
 800f496:	2b01      	cmp	r3, #1
 800f498:	f000 80c9 	beq.w	800f62e <HAL_RCC_OscConfig+0x272>
 800f49c:	2b05      	cmp	r3, #5
 800f49e:	f000 812f 	beq.w	800f700 <HAL_RCC_OscConfig+0x344>
 800f4a2:	4d78      	ldr	r5, [pc, #480]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
 800f4a4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800f4a6:	f022 0201 	bic.w	r2, r2, #1
 800f4aa:	672a      	str	r2, [r5, #112]	; 0x70
 800f4ac:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800f4ae:	f022 0204 	bic.w	r2, r2, #4
 800f4b2:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	f040 80bf 	bne.w	800f638 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f4ba:	f7ff f83b 	bl	800e534 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f4be:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800f4c2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f4c4:	e006      	b.n	800f4d4 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f4c6:	f7ff f835 	bl	800e534 <HAL_GetTick>
 800f4ca:	eba0 0008 	sub.w	r0, r0, r8
 800f4ce:	42b8      	cmp	r0, r7
 800f4d0:	f200 809c 	bhi.w	800f60c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f4d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f4d6:	0798      	lsls	r0, r3, #30
 800f4d8:	d4f5      	bmi.n	800f4c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f4da:	2e00      	cmp	r6, #0
 800f4dc:	f040 80dc 	bne.w	800f698 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f4e0:	69a0      	ldr	r0, [r4, #24]
 800f4e2:	b1c8      	cbz	r0, 800f518 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f4e4:	4d67      	ldr	r5, [pc, #412]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
 800f4e6:	68aa      	ldr	r2, [r5, #8]
 800f4e8:	f002 020c 	and.w	r2, r2, #12
 800f4ec:	2a08      	cmp	r2, #8
 800f4ee:	f000 80d9 	beq.w	800f6a4 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f4f2:	4a67      	ldr	r2, [pc, #412]	; (800f690 <HAL_RCC_OscConfig+0x2d4>)
 800f4f4:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f4f6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800f4f8:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f4fa:	f000 810b 	beq.w	800f714 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f4fe:	f7ff f819 	bl	800e534 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f502:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800f504:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f506:	e004      	b.n	800f512 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f508:	f7ff f814 	bl	800e534 <HAL_GetTick>
 800f50c:	1b40      	subs	r0, r0, r5
 800f50e:	2802      	cmp	r0, #2
 800f510:	d87c      	bhi.n	800f60c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f512:	6823      	ldr	r3, [r4, #0]
 800f514:	019b      	lsls	r3, r3, #6
 800f516:	d4f7      	bmi.n	800f508 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800f518:	2000      	movs	r0, #0
}
 800f51a:	b002      	add	sp, #8
 800f51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f520:	4a58      	ldr	r2, [pc, #352]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
 800f522:	6891      	ldr	r1, [r2, #8]
 800f524:	f011 0f0c 	tst.w	r1, #12
 800f528:	d024      	beq.n	800f574 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f52a:	6891      	ldr	r1, [r2, #8]
 800f52c:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f530:	2908      	cmp	r1, #8
 800f532:	d01c      	beq.n	800f56e <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f534:	68e3      	ldr	r3, [r4, #12]
 800f536:	2b00      	cmp	r3, #0
 800f538:	f000 8092 	beq.w	800f660 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 800f53c:	4b55      	ldr	r3, [pc, #340]	; (800f694 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f53e:	4d51      	ldr	r5, [pc, #324]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 800f540:	2201      	movs	r2, #1
 800f542:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800f544:	f7fe fff6 	bl	800e534 <HAL_GetTick>
 800f548:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f54a:	e004      	b.n	800f556 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f54c:	f7fe fff2 	bl	800e534 <HAL_GetTick>
 800f550:	1b80      	subs	r0, r0, r6
 800f552:	2802      	cmp	r0, #2
 800f554:	d85a      	bhi.n	800f60c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f556:	682b      	ldr	r3, [r5, #0]
 800f558:	0798      	lsls	r0, r3, #30
 800f55a:	d5f7      	bpl.n	800f54c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f55c:	682b      	ldr	r3, [r5, #0]
 800f55e:	6922      	ldr	r2, [r4, #16]
 800f560:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f564:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f568:	602b      	str	r3, [r5, #0]
 800f56a:	6823      	ldr	r3, [r4, #0]
 800f56c:	e762      	b.n	800f434 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f56e:	6852      	ldr	r2, [r2, #4]
 800f570:	0256      	lsls	r6, r2, #9
 800f572:	d4df      	bmi.n	800f534 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f574:	4a43      	ldr	r2, [pc, #268]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
 800f576:	6812      	ldr	r2, [r2, #0]
 800f578:	0795      	lsls	r5, r2, #30
 800f57a:	d54b      	bpl.n	800f614 <HAL_RCC_OscConfig+0x258>
 800f57c:	68e2      	ldr	r2, [r4, #12]
 800f57e:	2a01      	cmp	r2, #1
 800f580:	d048      	beq.n	800f614 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 800f582:	2001      	movs	r0, #1
}
 800f584:	b002      	add	sp, #8
 800f586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800f58a:	4a3f      	ldr	r2, [pc, #252]	; (800f688 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f58c:	4d3d      	ldr	r5, [pc, #244]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800f58e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800f590:	f7fe ffd0 	bl	800e534 <HAL_GetTick>
 800f594:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f596:	e004      	b.n	800f5a2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f598:	f7fe ffcc 	bl	800e534 <HAL_GetTick>
 800f59c:	1b80      	subs	r0, r0, r6
 800f59e:	2802      	cmp	r0, #2
 800f5a0:	d834      	bhi.n	800f60c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f5a2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800f5a4:	079f      	lsls	r7, r3, #30
 800f5a6:	d4f7      	bmi.n	800f598 <HAL_RCC_OscConfig+0x1dc>
 800f5a8:	e75b      	b.n	800f462 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f5aa:	684a      	ldr	r2, [r1, #4]
 800f5ac:	0250      	lsls	r0, r2, #9
 800f5ae:	f57f af1c 	bpl.w	800f3ea <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f5b2:	4a34      	ldr	r2, [pc, #208]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
 800f5b4:	6812      	ldr	r2, [r2, #0]
 800f5b6:	0391      	lsls	r1, r2, #14
 800f5b8:	f57f af3a 	bpl.w	800f430 <HAL_RCC_OscConfig+0x74>
 800f5bc:	6862      	ldr	r2, [r4, #4]
 800f5be:	2a00      	cmp	r2, #0
 800f5c0:	f47f af36 	bne.w	800f430 <HAL_RCC_OscConfig+0x74>
 800f5c4:	e7dd      	b.n	800f582 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f5c6:	4a2f      	ldr	r2, [pc, #188]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
 800f5c8:	6813      	ldr	r3, [r2, #0]
 800f5ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f5ce:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800f5d0:	f7fe ffb0 	bl	800e534 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f5d4:	4d2b      	ldr	r5, [pc, #172]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800f5d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f5d8:	e004      	b.n	800f5e4 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f5da:	f7fe ffab 	bl	800e534 <HAL_GetTick>
 800f5de:	1b80      	subs	r0, r0, r6
 800f5e0:	2864      	cmp	r0, #100	; 0x64
 800f5e2:	d813      	bhi.n	800f60c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f5e4:	682b      	ldr	r3, [r5, #0]
 800f5e6:	039a      	lsls	r2, r3, #14
 800f5e8:	d5f7      	bpl.n	800f5da <HAL_RCC_OscConfig+0x21e>
 800f5ea:	e720      	b.n	800f42e <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f5ec:	682a      	ldr	r2, [r5, #0]
 800f5ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f5f2:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 800f5f4:	f7fe ff9e 	bl	800e534 <HAL_GetTick>
 800f5f8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f5fa:	682b      	ldr	r3, [r5, #0]
 800f5fc:	05da      	lsls	r2, r3, #23
 800f5fe:	f53f af49 	bmi.w	800f494 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f602:	f7fe ff97 	bl	800e534 <HAL_GetTick>
 800f606:	1bc0      	subs	r0, r0, r7
 800f608:	2802      	cmp	r0, #2
 800f60a:	d9f6      	bls.n	800f5fa <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 800f60c:	2003      	movs	r0, #3
}
 800f60e:	b002      	add	sp, #8
 800f610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f614:	491b      	ldr	r1, [pc, #108]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
 800f616:	6920      	ldr	r0, [r4, #16]
 800f618:	680a      	ldr	r2, [r1, #0]
 800f61a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800f61e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800f622:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f624:	e706      	b.n	800f434 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 800f626:	2001      	movs	r0, #1
}
 800f628:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800f62a:	2600      	movs	r6, #0
 800f62c:	e72d      	b.n	800f48a <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f62e:	4a15      	ldr	r2, [pc, #84]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
 800f630:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800f632:	f043 0301 	orr.w	r3, r3, #1
 800f636:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800f638:	f7fe ff7c 	bl	800e534 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f63c:	4d11      	ldr	r5, [pc, #68]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800f63e:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f640:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f644:	e005      	b.n	800f652 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f646:	f7fe ff75 	bl	800e534 <HAL_GetTick>
 800f64a:	eba0 0008 	sub.w	r0, r0, r8
 800f64e:	42b8      	cmp	r0, r7
 800f650:	d8dc      	bhi.n	800f60c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f652:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f654:	079b      	lsls	r3, r3, #30
 800f656:	d5f6      	bpl.n	800f646 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 800f658:	2e00      	cmp	r6, #0
 800f65a:	f43f af41 	beq.w	800f4e0 <HAL_RCC_OscConfig+0x124>
 800f65e:	e01b      	b.n	800f698 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 800f660:	4a0c      	ldr	r2, [pc, #48]	; (800f694 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f662:	4d08      	ldr	r5, [pc, #32]	; (800f684 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 800f664:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800f666:	f7fe ff65 	bl	800e534 <HAL_GetTick>
 800f66a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f66c:	e004      	b.n	800f678 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f66e:	f7fe ff61 	bl	800e534 <HAL_GetTick>
 800f672:	1b80      	subs	r0, r0, r6
 800f674:	2802      	cmp	r0, #2
 800f676:	d8c9      	bhi.n	800f60c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f678:	682b      	ldr	r3, [r5, #0]
 800f67a:	0799      	lsls	r1, r3, #30
 800f67c:	d4f7      	bmi.n	800f66e <HAL_RCC_OscConfig+0x2b2>
 800f67e:	6823      	ldr	r3, [r4, #0]
 800f680:	e6d8      	b.n	800f434 <HAL_RCC_OscConfig+0x78>
 800f682:	bf00      	nop
 800f684:	40023800 	.word	0x40023800
 800f688:	42470e80 	.word	0x42470e80
 800f68c:	40007000 	.word	0x40007000
 800f690:	42470060 	.word	0x42470060
 800f694:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 800f698:	4a35      	ldr	r2, [pc, #212]	; (800f770 <HAL_RCC_OscConfig+0x3b4>)
 800f69a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f69c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f6a0:	6413      	str	r3, [r2, #64]	; 0x40
 800f6a2:	e71d      	b.n	800f4e0 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f6a4:	2801      	cmp	r0, #1
 800f6a6:	f43f af6d 	beq.w	800f584 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 800f6aa:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f6ac:	69e2      	ldr	r2, [r4, #28]
 800f6ae:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800f6b2:	4291      	cmp	r1, r2
 800f6b4:	f47f af65 	bne.w	800f582 <HAL_RCC_OscConfig+0x1c6>
 800f6b8:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f6ba:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f6be:	4291      	cmp	r1, r2
 800f6c0:	f47f af5f 	bne.w	800f582 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f6c4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f6c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f6ca:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f6cc:	428a      	cmp	r2, r1
 800f6ce:	f47f af58 	bne.w	800f582 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f6d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f6d4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f6d8:	4291      	cmp	r1, r2
 800f6da:	f47f af52 	bne.w	800f582 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f6de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800f6e0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 800f6e4:	1a18      	subs	r0, r3, r0
 800f6e6:	bf18      	it	ne
 800f6e8:	2001      	movne	r0, #1
 800f6ea:	e74b      	b.n	800f584 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f6ec:	4b20      	ldr	r3, [pc, #128]	; (800f770 <HAL_RCC_OscConfig+0x3b4>)
 800f6ee:	681a      	ldr	r2, [r3, #0]
 800f6f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f6f4:	601a      	str	r2, [r3, #0]
 800f6f6:	681a      	ldr	r2, [r3, #0]
 800f6f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f6fc:	601a      	str	r2, [r3, #0]
 800f6fe:	e767      	b.n	800f5d0 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f700:	4b1b      	ldr	r3, [pc, #108]	; (800f770 <HAL_RCC_OscConfig+0x3b4>)
 800f702:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f704:	f042 0204 	orr.w	r2, r2, #4
 800f708:	671a      	str	r2, [r3, #112]	; 0x70
 800f70a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f70c:	f042 0201 	orr.w	r2, r2, #1
 800f710:	671a      	str	r2, [r3, #112]	; 0x70
 800f712:	e791      	b.n	800f638 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 800f714:	f7fe ff0e 	bl	800e534 <HAL_GetTick>
 800f718:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f71a:	e005      	b.n	800f728 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f71c:	f7fe ff0a 	bl	800e534 <HAL_GetTick>
 800f720:	1b80      	subs	r0, r0, r6
 800f722:	2802      	cmp	r0, #2
 800f724:	f63f af72 	bhi.w	800f60c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f728:	682b      	ldr	r3, [r5, #0]
 800f72a:	0199      	lsls	r1, r3, #6
 800f72c:	d4f6      	bmi.n	800f71c <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f72e:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 800f732:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800f736:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f738:	4c0d      	ldr	r4, [pc, #52]	; (800f770 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f73a:	4333      	orrs	r3, r6
 800f73c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800f740:	0852      	lsrs	r2, r2, #1
 800f742:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800f746:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800f748:	490a      	ldr	r1, [pc, #40]	; (800f774 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f74a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800f74e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f750:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800f752:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 800f754:	f7fe feee 	bl	800e534 <HAL_GetTick>
 800f758:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f75a:	e005      	b.n	800f768 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f75c:	f7fe feea 	bl	800e534 <HAL_GetTick>
 800f760:	1b40      	subs	r0, r0, r5
 800f762:	2802      	cmp	r0, #2
 800f764:	f63f af52 	bhi.w	800f60c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f768:	6823      	ldr	r3, [r4, #0]
 800f76a:	019a      	lsls	r2, r3, #6
 800f76c:	d5f6      	bpl.n	800f75c <HAL_RCC_OscConfig+0x3a0>
 800f76e:	e6d3      	b.n	800f518 <HAL_RCC_OscConfig+0x15c>
 800f770:	40023800 	.word	0x40023800
 800f774:	42470060 	.word	0x42470060

0800f778 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f778:	4917      	ldr	r1, [pc, #92]	; (800f7d8 <HAL_RCC_GetSysClockFreq+0x60>)
{
 800f77a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f77c:	688b      	ldr	r3, [r1, #8]
 800f77e:	f003 030c 	and.w	r3, r3, #12
 800f782:	2b04      	cmp	r3, #4
 800f784:	d01b      	beq.n	800f7be <HAL_RCC_GetSysClockFreq+0x46>
 800f786:	2b08      	cmp	r3, #8
 800f788:	d117      	bne.n	800f7ba <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f78a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f78c:	684b      	ldr	r3, [r1, #4]
 800f78e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f792:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f796:	d114      	bne.n	800f7c2 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f798:	6849      	ldr	r1, [r1, #4]
 800f79a:	4810      	ldr	r0, [pc, #64]	; (800f7dc <HAL_RCC_GetSysClockFreq+0x64>)
 800f79c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800f7a0:	fba1 0100 	umull	r0, r1, r1, r0
 800f7a4:	f7f9 f9a8 	bl	8008af8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f7a8:	4b0b      	ldr	r3, [pc, #44]	; (800f7d8 <HAL_RCC_GetSysClockFreq+0x60>)
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800f7b4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800f7b8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800f7ba:	4808      	ldr	r0, [pc, #32]	; (800f7dc <HAL_RCC_GetSysClockFreq+0x64>)
}
 800f7bc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800f7be:	4808      	ldr	r0, [pc, #32]	; (800f7e0 <HAL_RCC_GetSysClockFreq+0x68>)
}
 800f7c0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f7c2:	684b      	ldr	r3, [r1, #4]
 800f7c4:	4806      	ldr	r0, [pc, #24]	; (800f7e0 <HAL_RCC_GetSysClockFreq+0x68>)
 800f7c6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800f7ca:	fba3 0100 	umull	r0, r1, r3, r0
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	f7f9 f992 	bl	8008af8 <__aeabi_uldivmod>
 800f7d4:	e7e8      	b.n	800f7a8 <HAL_RCC_GetSysClockFreq+0x30>
 800f7d6:	bf00      	nop
 800f7d8:	40023800 	.word	0x40023800
 800f7dc:	00f42400 	.word	0x00f42400
 800f7e0:	007a1200 	.word	0x007a1200

0800f7e4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800f7e4:	b160      	cbz	r0, 800f800 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f7e6:	4a49      	ldr	r2, [pc, #292]	; (800f90c <HAL_RCC_ClockConfig+0x128>)
 800f7e8:	6813      	ldr	r3, [r2, #0]
 800f7ea:	f003 030f 	and.w	r3, r3, #15
 800f7ee:	428b      	cmp	r3, r1
 800f7f0:	d208      	bcs.n	800f804 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f7f2:	b2cb      	uxtb	r3, r1
 800f7f4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f7f6:	6813      	ldr	r3, [r2, #0]
 800f7f8:	f003 030f 	and.w	r3, r3, #15
 800f7fc:	428b      	cmp	r3, r1
 800f7fe:	d001      	beq.n	800f804 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 800f800:	2001      	movs	r0, #1
}
 800f802:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f804:	6803      	ldr	r3, [r0, #0]
{
 800f806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f80a:	079d      	lsls	r5, r3, #30
 800f80c:	d514      	bpl.n	800f838 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f80e:	075c      	lsls	r4, r3, #29
 800f810:	d504      	bpl.n	800f81c <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f812:	4c3f      	ldr	r4, [pc, #252]	; (800f910 <HAL_RCC_ClockConfig+0x12c>)
 800f814:	68a2      	ldr	r2, [r4, #8]
 800f816:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800f81a:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f81c:	071a      	lsls	r2, r3, #28
 800f81e:	d504      	bpl.n	800f82a <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f820:	4c3b      	ldr	r4, [pc, #236]	; (800f910 <HAL_RCC_ClockConfig+0x12c>)
 800f822:	68a2      	ldr	r2, [r4, #8]
 800f824:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800f828:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f82a:	4c39      	ldr	r4, [pc, #228]	; (800f910 <HAL_RCC_ClockConfig+0x12c>)
 800f82c:	6885      	ldr	r5, [r0, #8]
 800f82e:	68a2      	ldr	r2, [r4, #8]
 800f830:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800f834:	432a      	orrs	r2, r5
 800f836:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f838:	07df      	lsls	r7, r3, #31
 800f83a:	4604      	mov	r4, r0
 800f83c:	460d      	mov	r5, r1
 800f83e:	d522      	bpl.n	800f886 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f840:	6842      	ldr	r2, [r0, #4]
 800f842:	2a01      	cmp	r2, #1
 800f844:	d057      	beq.n	800f8f6 <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f846:	1e93      	subs	r3, r2, #2
 800f848:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f84a:	4b31      	ldr	r3, [pc, #196]	; (800f910 <HAL_RCC_ClockConfig+0x12c>)
 800f84c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f84e:	d959      	bls.n	800f904 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f850:	0799      	lsls	r1, r3, #30
 800f852:	d525      	bpl.n	800f8a0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f854:	4e2e      	ldr	r6, [pc, #184]	; (800f910 <HAL_RCC_ClockConfig+0x12c>)
 800f856:	68b3      	ldr	r3, [r6, #8]
 800f858:	f023 0303 	bic.w	r3, r3, #3
 800f85c:	4313      	orrs	r3, r2
 800f85e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800f860:	f7fe fe68 	bl	800e534 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f864:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800f868:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f86a:	e005      	b.n	800f878 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f86c:	f7fe fe62 	bl	800e534 <HAL_GetTick>
 800f870:	eba0 0008 	sub.w	r0, r0, r8
 800f874:	42b8      	cmp	r0, r7
 800f876:	d843      	bhi.n	800f900 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f878:	68b3      	ldr	r3, [r6, #8]
 800f87a:	6862      	ldr	r2, [r4, #4]
 800f87c:	f003 030c 	and.w	r3, r3, #12
 800f880:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800f884:	d1f2      	bne.n	800f86c <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f886:	4a21      	ldr	r2, [pc, #132]	; (800f90c <HAL_RCC_ClockConfig+0x128>)
 800f888:	6813      	ldr	r3, [r2, #0]
 800f88a:	f003 030f 	and.w	r3, r3, #15
 800f88e:	42ab      	cmp	r3, r5
 800f890:	d909      	bls.n	800f8a6 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f892:	b2eb      	uxtb	r3, r5
 800f894:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f896:	6813      	ldr	r3, [r2, #0]
 800f898:	f003 030f 	and.w	r3, r3, #15
 800f89c:	42ab      	cmp	r3, r5
 800f89e:	d002      	beq.n	800f8a6 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 800f8a0:	2001      	movs	r0, #1
}
 800f8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f8a6:	6823      	ldr	r3, [r4, #0]
 800f8a8:	075a      	lsls	r2, r3, #29
 800f8aa:	d506      	bpl.n	800f8ba <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f8ac:	4918      	ldr	r1, [pc, #96]	; (800f910 <HAL_RCC_ClockConfig+0x12c>)
 800f8ae:	68e0      	ldr	r0, [r4, #12]
 800f8b0:	688a      	ldr	r2, [r1, #8]
 800f8b2:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800f8b6:	4302      	orrs	r2, r0
 800f8b8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f8ba:	071b      	lsls	r3, r3, #28
 800f8bc:	d412      	bmi.n	800f8e4 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f8be:	f7ff ff5b 	bl	800f778 <HAL_RCC_GetSysClockFreq>
 800f8c2:	4b13      	ldr	r3, [pc, #76]	; (800f910 <HAL_RCC_ClockConfig+0x12c>)
 800f8c4:	4c13      	ldr	r4, [pc, #76]	; (800f914 <HAL_RCC_ClockConfig+0x130>)
 800f8c6:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 800f8c8:	4913      	ldr	r1, [pc, #76]	; (800f918 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f8ca:	4a14      	ldr	r2, [pc, #80]	; (800f91c <HAL_RCC_ClockConfig+0x138>)
 800f8cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800f8d0:	5ce3      	ldrb	r3, [r4, r3]
 800f8d2:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 800f8d6:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f8d8:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800f8da:	f7fe fde1 	bl	800e4a0 <HAL_InitTick>
  return HAL_OK;
 800f8de:	2000      	movs	r0, #0
}
 800f8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f8e4:	4a0a      	ldr	r2, [pc, #40]	; (800f910 <HAL_RCC_ClockConfig+0x12c>)
 800f8e6:	6921      	ldr	r1, [r4, #16]
 800f8e8:	6893      	ldr	r3, [r2, #8]
 800f8ea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800f8ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800f8f2:	6093      	str	r3, [r2, #8]
 800f8f4:	e7e3      	b.n	800f8be <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f8f6:	4b06      	ldr	r3, [pc, #24]	; (800f910 <HAL_RCC_ClockConfig+0x12c>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	039e      	lsls	r6, r3, #14
 800f8fc:	d4aa      	bmi.n	800f854 <HAL_RCC_ClockConfig+0x70>
 800f8fe:	e7cf      	b.n	800f8a0 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 800f900:	2003      	movs	r0, #3
 800f902:	e7ed      	b.n	800f8e0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f904:	0198      	lsls	r0, r3, #6
 800f906:	d4a5      	bmi.n	800f854 <HAL_RCC_ClockConfig+0x70>
 800f908:	e7ca      	b.n	800f8a0 <HAL_RCC_ClockConfig+0xbc>
 800f90a:	bf00      	nop
 800f90c:	40023c00 	.word	0x40023c00
 800f910:	40023800 	.word	0x40023800
 800f914:	080163c8 	.word	0x080163c8
 800f918:	20000034 	.word	0x20000034
 800f91c:	20000024 	.word	0x20000024

0800f920 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f920:	4b04      	ldr	r3, [pc, #16]	; (800f934 <HAL_RCC_GetPCLK1Freq+0x14>)
 800f922:	4a05      	ldr	r2, [pc, #20]	; (800f938 <HAL_RCC_GetPCLK1Freq+0x18>)
 800f924:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800f926:	4905      	ldr	r1, [pc, #20]	; (800f93c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f928:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800f92c:	6808      	ldr	r0, [r1, #0]
 800f92e:	5cd3      	ldrb	r3, [r2, r3]
}
 800f930:	40d8      	lsrs	r0, r3
 800f932:	4770      	bx	lr
 800f934:	40023800 	.word	0x40023800
 800f938:	080163d8 	.word	0x080163d8
 800f93c:	20000024 	.word	0x20000024

0800f940 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f940:	4b04      	ldr	r3, [pc, #16]	; (800f954 <HAL_RCC_GetPCLK2Freq+0x14>)
 800f942:	4a05      	ldr	r2, [pc, #20]	; (800f958 <HAL_RCC_GetPCLK2Freq+0x18>)
 800f944:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800f946:	4905      	ldr	r1, [pc, #20]	; (800f95c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f948:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800f94c:	6808      	ldr	r0, [r1, #0]
 800f94e:	5cd3      	ldrb	r3, [r2, r3]
}
 800f950:	40d8      	lsrs	r0, r3
 800f952:	4770      	bx	lr
 800f954:	40023800 	.word	0x40023800
 800f958:	080163d8 	.word	0x080163d8
 800f95c:	20000024 	.word	0x20000024

0800f960 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800f960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f964:	4607      	mov	r7, r0
 800f966:	460d      	mov	r5, r1
 800f968:	4616      	mov	r6, r2
 800f96a:	4698      	mov	r8, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f96c:	683c      	ldr	r4, [r7, #0]
 800f96e:	e001      	b.n	800f974 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x14>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f970:	1c73      	adds	r3, r6, #1
 800f972:	d106      	bne.n	800f982 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x22>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f974:	68a0      	ldr	r0, [r4, #8]
 800f976:	ea35 0300 	bics.w	r3, r5, r0
 800f97a:	d0f9      	beq.n	800f970 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800f97c:	2000      	movs	r0, #0
}
 800f97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f982:	f7fe fdd7 	bl	800e534 <HAL_GetTick>
 800f986:	eba0 0008 	sub.w	r0, r0, r8
 800f98a:	4286      	cmp	r6, r0
 800f98c:	d8ee      	bhi.n	800f96c <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f98e:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f992:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f994:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f998:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f99c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f99e:	d014      	beq.n	800f9ca <SPI_WaitFlagStateUntilTimeout.constprop.7+0x6a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f9a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9a2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f9a6:	d007      	beq.n	800f9b8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x58>
        hspi->State = HAL_SPI_STATE_READY;
 800f9a8:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800f9aa:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800f9ac:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800f9b0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800f9b4:	2003      	movs	r0, #3
 800f9b6:	e7e2      	b.n	800f97e <SPI_WaitFlagStateUntilTimeout.constprop.7+0x1e>
          SPI_RESET_CRC(hspi);
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f9be:	601a      	str	r2, [r3, #0]
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f9c6:	601a      	str	r2, [r3, #0]
 800f9c8:	e7ee      	b.n	800f9a8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f9ca:	68ba      	ldr	r2, [r7, #8]
 800f9cc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800f9d0:	d002      	beq.n	800f9d8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f9d2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800f9d6:	d1e3      	bne.n	800f9a0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x40>
          __HAL_SPI_DISABLE(hspi);
 800f9d8:	681a      	ldr	r2, [r3, #0]
 800f9da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f9de:	601a      	str	r2, [r3, #0]
 800f9e0:	e7de      	b.n	800f9a0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x40>
 800f9e2:	bf00      	nop

0800f9e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f9e4:	b570      	push	{r4, r5, r6, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f9e6:	6845      	ldr	r5, [r0, #4]
 800f9e8:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 800f9ec:	4604      	mov	r4, r0
 800f9ee:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f9f0:	d006      	beq.n	800fa00 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f9f2:	460a      	mov	r2, r1
 800f9f4:	2101      	movs	r1, #1
 800f9f6:	f7ff ffb3 	bl	800f960 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 800f9fa:	b998      	cbnz	r0, 800fa24 <SPI_EndRxTransaction+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800f9fc:	2000      	movs	r0, #0
}
 800f9fe:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa00:	6882      	ldr	r2, [r0, #8]
 800fa02:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800fa06:	d013      	beq.n	800fa30 <SPI_EndRxTransaction+0x4c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fa08:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800fa0c:	d115      	bne.n	800fa3a <SPI_EndRxTransaction+0x56>
    __HAL_SPI_DISABLE(hspi);
 800fa0e:	6806      	ldr	r6, [r0, #0]
 800fa10:	6835      	ldr	r5, [r6, #0]
 800fa12:	f025 0540 	bic.w	r5, r5, #64	; 0x40
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800fa16:	460a      	mov	r2, r1
    __HAL_SPI_DISABLE(hspi);
 800fa18:	6035      	str	r5, [r6, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800fa1a:	2101      	movs	r1, #1
 800fa1c:	f7ff ffa0 	bl	800f960 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 800fa20:	2800      	cmp	r0, #0
 800fa22:	d0eb      	beq.n	800f9fc <SPI_EndRxTransaction+0x18>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800fa26:	f043 0320 	orr.w	r3, r3, #32
 800fa2a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800fa2c:	2003      	movs	r0, #3
}
 800fa2e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SPI_DISABLE(hspi);
 800fa30:	6800      	ldr	r0, [r0, #0]
 800fa32:	6802      	ldr	r2, [r0, #0]
 800fa34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa38:	6002      	str	r2, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fa3a:	460a      	mov	r2, r1
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	2180      	movs	r1, #128	; 0x80
 800fa40:	f7ff ff8e 	bl	800f960 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 800fa44:	2800      	cmp	r0, #0
 800fa46:	d1ed      	bne.n	800fa24 <SPI_EndRxTransaction+0x40>
  return HAL_OK;
 800fa48:	2000      	movs	r0, #0
 800fa4a:	e7d8      	b.n	800f9fe <SPI_EndRxTransaction+0x1a>

0800fa4c <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fa4c:	4b16      	ldr	r3, [pc, #88]	; (800faa8 <SPI_EndRxTxTransaction+0x5c>)
{
 800fa4e:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	4d16      	ldr	r5, [pc, #88]	; (800faac <SPI_EndRxTxTransaction+0x60>)
 800fa54:	fba5 5303 	umull	r5, r3, r5, r3
 800fa58:	0d5b      	lsrs	r3, r3, #21
 800fa5a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800fa5e:	fb05 f303 	mul.w	r3, r5, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fa62:	6845      	ldr	r5, [r0, #4]
{
 800fa64:	b083      	sub	sp, #12
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fa66:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 800fa6a:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fa6c:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fa6e:	d107      	bne.n	800fa80 <SPI_EndRxTxTransaction+0x34>
 800fa70:	e00c      	b.n	800fa8c <SPI_EndRxTxTransaction+0x40>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800fa72:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fa74:	6822      	ldr	r2, [r4, #0]
      count--;
 800fa76:	3b01      	subs	r3, #1
 800fa78:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fa7a:	6893      	ldr	r3, [r2, #8]
 800fa7c:	061b      	lsls	r3, r3, #24
 800fa7e:	d502      	bpl.n	800fa86 <SPI_EndRxTxTransaction+0x3a>
      if (count == 0U)
 800fa80:	9b01      	ldr	r3, [sp, #4]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d1f5      	bne.n	800fa72 <SPI_EndRxTxTransaction+0x26>
  }

  return HAL_OK;
 800fa86:	2000      	movs	r0, #0
}
 800fa88:	b003      	add	sp, #12
 800fa8a:	bd30      	pop	{r4, r5, pc}
 800fa8c:	4613      	mov	r3, r2
 800fa8e:	460a      	mov	r2, r1
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fa90:	2180      	movs	r1, #128	; 0x80
 800fa92:	f7ff ff65 	bl	800f960 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 800fa96:	2800      	cmp	r0, #0
 800fa98:	d0f5      	beq.n	800fa86 <SPI_EndRxTxTransaction+0x3a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800fa9c:	f043 0320 	orr.w	r3, r3, #32
 800faa0:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800faa2:	2003      	movs	r0, #3
 800faa4:	e7f0      	b.n	800fa88 <SPI_EndRxTxTransaction+0x3c>
 800faa6:	bf00      	nop
 800faa8:	20000024 	.word	0x20000024
 800faac:	165e9f81 	.word	0x165e9f81

0800fab0 <HAL_SPI_TransmitReceive.part.3>:
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 800fab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fab4:	4604      	mov	r4, r0
 800fab6:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 800fab8:	2001      	movs	r0, #1
 800faba:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 800fabe:	4691      	mov	r9, r2
 800fac0:	4698      	mov	r8, r3
 800fac2:	460f      	mov	r7, r1
 800fac4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  tickstart = HAL_GetTick();
 800fac6:	f7fe fd35 	bl	800e534 <HAL_GetTick>
  tmp_state           = hspi->State;
 800faca:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 800face:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 800fad0:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fad2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800fad4:	4606      	mov	r6, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fad6:	d011      	beq.n	800fafc <HAL_SPI_TransmitReceive.part.3+0x4c>
 800fad8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800fadc:	d009      	beq.n	800faf2 <HAL_SPI_TransmitReceive.part.3+0x42>
    errorcode = HAL_BUSY;
 800fade:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800fae0:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800fae2:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800fae4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800fae8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800faec:	b003      	add	sp, #12
 800faee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800faf2:	68a1      	ldr	r1, [r4, #8]
 800faf4:	2900      	cmp	r1, #0
 800faf6:	d1f2      	bne.n	800fade <HAL_SPI_TransmitReceive.part.3+0x2e>
 800faf8:	2b04      	cmp	r3, #4
 800fafa:	d1f0      	bne.n	800fade <HAL_SPI_TransmitReceive.part.3+0x2e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fafc:	2f00      	cmp	r7, #0
 800fafe:	d064      	beq.n	800fbca <HAL_SPI_TransmitReceive.part.3+0x11a>
 800fb00:	f1b9 0f00 	cmp.w	r9, #0
 800fb04:	d061      	beq.n	800fbca <HAL_SPI_TransmitReceive.part.3+0x11a>
 800fb06:	f1b8 0f00 	cmp.w	r8, #0
 800fb0a:	d05e      	beq.n	800fbca <HAL_SPI_TransmitReceive.part.3+0x11a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fb0c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fb10:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fb12:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fb16:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fb18:	bf1c      	itt	ne
 800fb1a:	2305      	movne	r3, #5
 800fb1c:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fb20:	2300      	movs	r3, #0
 800fb22:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 800fb24:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800fb28:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fb2c:	6808      	ldr	r0, [r1, #0]
  hspi->RxXferSize  = Size;
 800fb2e:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fb32:	0640      	lsls	r0, r0, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800fb34:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800fb36:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 800fb3a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fb3e:	d546      	bpl.n	800fbce <HAL_SPI_TransmitReceive.part.3+0x11e>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800fb40:	68e3      	ldr	r3, [r4, #12]
 800fb42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb46:	d056      	beq.n	800fbf6 <HAL_SPI_TransmitReceive.part.3+0x146>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fb48:	2a00      	cmp	r2, #0
 800fb4a:	d145      	bne.n	800fbd8 <HAL_SPI_TransmitReceive.part.3+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fb4c:	783b      	ldrb	r3, [r7, #0]
 800fb4e:	730b      	strb	r3, [r1, #12]
      hspi->TxXferCount--;
 800fb50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fb52:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800fb54:	3b01      	subs	r3, #1
 800fb56:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fb58:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 800fb5a:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fb5c:	6322      	str	r2, [r4, #48]	; 0x30
        txallowed = 1U;
 800fb5e:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fb60:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	b91b      	cbnz	r3, 800fb6e <HAL_SPI_TransmitReceive.part.3+0xbe>
 800fb66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d038      	beq.n	800fbe0 <HAL_SPI_TransmitReceive.part.3+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fb6e:	6823      	ldr	r3, [r4, #0]
 800fb70:	689a      	ldr	r2, [r3, #8]
 800fb72:	0791      	lsls	r1, r2, #30
 800fb74:	d50f      	bpl.n	800fb96 <HAL_SPI_TransmitReceive.part.3+0xe6>
 800fb76:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800fb78:	b292      	uxth	r2, r2
 800fb7a:	b162      	cbz	r2, 800fb96 <HAL_SPI_TransmitReceive.part.3+0xe6>
 800fb7c:	b15f      	cbz	r7, 800fb96 <HAL_SPI_TransmitReceive.part.3+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800fb7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fb80:	7812      	ldrb	r2, [r2, #0]
 800fb82:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800fb84:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800fb86:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fb88:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 800fb8a:	3a01      	subs	r2, #1
 800fb8c:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 800fb8e:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 800fb90:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800fb92:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 800fb94:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fb96:	689a      	ldr	r2, [r3, #8]
 800fb98:	07d2      	lsls	r2, r2, #31
 800fb9a:	d50d      	bpl.n	800fbb8 <HAL_SPI_TransmitReceive.part.3+0x108>
 800fb9c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800fb9e:	b292      	uxth	r2, r2
 800fba0:	b152      	cbz	r2, 800fbb8 <HAL_SPI_TransmitReceive.part.3+0x108>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800fba2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fba4:	68db      	ldr	r3, [r3, #12]
 800fba6:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800fba8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800fbaa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800fbac:	3b01      	subs	r3, #1
 800fbae:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 800fbb0:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800fbb2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800fbb4:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 800fbb6:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800fbb8:	f7fe fcbc 	bl	800e534 <HAL_GetTick>
 800fbbc:	1b80      	subs	r0, r0, r6
 800fbbe:	4285      	cmp	r5, r0
 800fbc0:	d8ce      	bhi.n	800fb60 <HAL_SPI_TransmitReceive.part.3+0xb0>
 800fbc2:	1c6b      	adds	r3, r5, #1
 800fbc4:	d0cc      	beq.n	800fb60 <HAL_SPI_TransmitReceive.part.3+0xb0>
        errorcode = HAL_TIMEOUT;
 800fbc6:	2003      	movs	r0, #3
 800fbc8:	e78a      	b.n	800fae0 <HAL_SPI_TransmitReceive.part.3+0x30>
    errorcode = HAL_ERROR;
 800fbca:	2001      	movs	r0, #1
 800fbcc:	e788      	b.n	800fae0 <HAL_SPI_TransmitReceive.part.3+0x30>
    __HAL_SPI_ENABLE(hspi);
 800fbce:	680b      	ldr	r3, [r1, #0]
 800fbd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbd4:	600b      	str	r3, [r1, #0]
 800fbd6:	e7b3      	b.n	800fb40 <HAL_SPI_TransmitReceive.part.3+0x90>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fbd8:	f1b8 0f01 	cmp.w	r8, #1
 800fbdc:	d1bf      	bne.n	800fb5e <HAL_SPI_TransmitReceive.part.3+0xae>
 800fbde:	e7b5      	b.n	800fb4c <HAL_SPI_TransmitReceive.part.3+0x9c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fbe0:	4632      	mov	r2, r6
 800fbe2:	4629      	mov	r1, r5
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f7ff ff31 	bl	800fa4c <SPI_EndRxTxTransaction>
 800fbea:	2800      	cmp	r0, #0
 800fbec:	d043      	beq.n	800fc76 <HAL_SPI_TransmitReceive.part.3+0x1c6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fbee:	2320      	movs	r3, #32
 800fbf0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800fbf2:	2001      	movs	r0, #1
 800fbf4:	e774      	b.n	800fae0 <HAL_SPI_TransmitReceive.part.3+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fbf6:	2a00      	cmp	r2, #0
 800fbf8:	d034      	beq.n	800fc64 <HAL_SPI_TransmitReceive.part.3+0x1b4>
 800fbfa:	f1b8 0f01 	cmp.w	r8, #1
 800fbfe:	d031      	beq.n	800fc64 <HAL_SPI_TransmitReceive.part.3+0x1b4>
        txallowed = 1U;
 800fc00:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fc02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	b91b      	cbnz	r3, 800fc10 <HAL_SPI_TransmitReceive.part.3+0x160>
 800fc08:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d0e7      	beq.n	800fbe0 <HAL_SPI_TransmitReceive.part.3+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fc10:	6823      	ldr	r3, [r4, #0]
 800fc12:	689a      	ldr	r2, [r3, #8]
 800fc14:	0791      	lsls	r1, r2, #30
 800fc16:	d50d      	bpl.n	800fc34 <HAL_SPI_TransmitReceive.part.3+0x184>
 800fc18:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800fc1a:	b292      	uxth	r2, r2
 800fc1c:	b152      	cbz	r2, 800fc34 <HAL_SPI_TransmitReceive.part.3+0x184>
 800fc1e:	b14f      	cbz	r7, 800fc34 <HAL_SPI_TransmitReceive.part.3+0x184>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fc20:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fc22:	f831 2b02 	ldrh.w	r2, [r1], #2
 800fc26:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800fc28:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fc2a:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800fc2c:	3a01      	subs	r2, #1
 800fc2e:	b292      	uxth	r2, r2
 800fc30:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 800fc32:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fc34:	689a      	ldr	r2, [r3, #8]
 800fc36:	07d2      	lsls	r2, r2, #31
 800fc38:	d50c      	bpl.n	800fc54 <HAL_SPI_TransmitReceive.part.3+0x1a4>
 800fc3a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800fc3c:	b292      	uxth	r2, r2
 800fc3e:	b14a      	cbz	r2, 800fc54 <HAL_SPI_TransmitReceive.part.3+0x1a4>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fc40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fc42:	68db      	ldr	r3, [r3, #12]
 800fc44:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800fc48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fc4a:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800fc4c:	3b01      	subs	r3, #1
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800fc52:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800fc54:	f7fe fc6e 	bl	800e534 <HAL_GetTick>
 800fc58:	1b80      	subs	r0, r0, r6
 800fc5a:	42a8      	cmp	r0, r5
 800fc5c:	d3d1      	bcc.n	800fc02 <HAL_SPI_TransmitReceive.part.3+0x152>
 800fc5e:	1c68      	adds	r0, r5, #1
 800fc60:	d0cf      	beq.n	800fc02 <HAL_SPI_TransmitReceive.part.3+0x152>
 800fc62:	e7b0      	b.n	800fbc6 <HAL_SPI_TransmitReceive.part.3+0x116>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fc64:	f837 3b02 	ldrh.w	r3, [r7], #2
 800fc68:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 800fc6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fc6c:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800fc6e:	3b01      	subs	r3, #1
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	86e3      	strh	r3, [r4, #54]	; 0x36
 800fc74:	e7c4      	b.n	800fc00 <HAL_SPI_TransmitReceive.part.3+0x150>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fc76:	68a3      	ldr	r3, [r4, #8]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f47f af31 	bne.w	800fae0 <HAL_SPI_TransmitReceive.part.3+0x30>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fc7e:	6823      	ldr	r3, [r4, #0]
 800fc80:	9001      	str	r0, [sp, #4]
 800fc82:	68da      	ldr	r2, [r3, #12]
 800fc84:	9201      	str	r2, [sp, #4]
 800fc86:	689b      	ldr	r3, [r3, #8]
 800fc88:	9301      	str	r3, [sp, #4]
 800fc8a:	9b01      	ldr	r3, [sp, #4]
 800fc8c:	e728      	b.n	800fae0 <HAL_SPI_TransmitReceive.part.3+0x30>
 800fc8e:	bf00      	nop

0800fc90 <HAL_SPI_Init>:
  if (hspi == NULL)
 800fc90:	2800      	cmp	r0, #0
 800fc92:	d03b      	beq.n	800fd0c <HAL_SPI_Init+0x7c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800fc94:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fc98:	2300      	movs	r3, #0
{
 800fc9a:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 800fc9c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800fca0:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fca2:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800fca4:	b362      	cbz	r2, 800fd00 <HAL_SPI_Init+0x70>
 800fca6:	4618      	mov	r0, r3
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fca8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fcac:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800fcb0:	432b      	orrs	r3, r5
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	6962      	ldr	r2, [r4, #20]
 800fcb6:	69e5      	ldr	r5, [r4, #28]
 800fcb8:	6a26      	ldr	r6, [r4, #32]
 800fcba:	430b      	orrs	r3, r1
 800fcbc:	4313      	orrs	r3, r2
 800fcbe:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800fcc0:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fcc2:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 800fcc4:	2502      	movs	r5, #2
 800fcc6:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fcca:	4333      	orrs	r3, r6
 800fccc:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 800fcd0:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fcd2:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800fcd4:	0c12      	lsrs	r2, r2, #16
 800fcd6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fcd8:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fcdc:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800fcde:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 800fce0:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 800fce4:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fce6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800fce8:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fcea:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fcec:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fcee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800fcf2:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fcf4:	61cb      	str	r3, [r1, #28]
  return HAL_OK;
 800fcf6:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fcf8:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800fcfa:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 800fcfe:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800fd00:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800fd04:	f7fc ffe0 	bl	800ccc8 <HAL_SPI_MspInit>
 800fd08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800fd0a:	e7cd      	b.n	800fca8 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800fd0c:	2001      	movs	r0, #1
}
 800fd0e:	4770      	bx	lr

0800fd10 <HAL_SPI_Transmit>:
{
 800fd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 800fd14:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800fd18:	2c01      	cmp	r4, #1
{
 800fd1a:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800fd1c:	d073      	beq.n	800fe06 <HAL_SPI_Transmit+0xf6>
 800fd1e:	461d      	mov	r5, r3
 800fd20:	2301      	movs	r3, #1
 800fd22:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800fd26:	4604      	mov	r4, r0
 800fd28:	4617      	mov	r7, r2
 800fd2a:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 800fd2c:	f7fe fc02 	bl	800e534 <HAL_GetTick>
 800fd30:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800fd32:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800fd36:	b2c0      	uxtb	r0, r0
 800fd38:	2801      	cmp	r0, #1
 800fd3a:	d009      	beq.n	800fd50 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 800fd3c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800fd3e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800fd40:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800fd42:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800fd46:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800fd4a:	b002      	add	sp, #8
 800fd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800fd50:	f1b8 0f00 	cmp.w	r8, #0
 800fd54:	d0f3      	beq.n	800fd3e <HAL_SPI_Transmit+0x2e>
 800fd56:	2f00      	cmp	r7, #0
 800fd58:	d0f1      	beq.n	800fd3e <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd5a:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fd5c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fd60:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fd62:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd64:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fd68:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fd6c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fd6e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferSize  = 0U;
 800fd70:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800fd72:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800fd76:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800fd78:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxXferCount = 0U;
 800fd7a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800fd7c:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd7e:	d103      	bne.n	800fd88 <HAL_SPI_Transmit+0x78>
    SPI_1LINE_TX(hspi);
 800fd80:	681a      	ldr	r2, [r3, #0]
 800fd82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fd86:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	0652      	lsls	r2, r2, #25
 800fd8c:	d53f      	bpl.n	800fe0e <HAL_SPI_Transmit+0xfe>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800fd8e:	68e2      	ldr	r2, [r4, #12]
 800fd90:	6861      	ldr	r1, [r4, #4]
 800fd92:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800fd96:	d04b      	beq.n	800fe30 <HAL_SPI_Transmit+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fd98:	2900      	cmp	r1, #0
 800fd9a:	d13d      	bne.n	800fe18 <HAL_SPI_Transmit+0x108>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fd9c:	f898 2000 	ldrb.w	r2, [r8]
 800fda0:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 800fda2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fda4:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800fda6:	3b01      	subs	r3, #1
 800fda8:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fdaa:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 800fdac:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fdae:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800fdb0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	b18b      	cbz	r3, 800fdda <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fdb6:	6823      	ldr	r3, [r4, #0]
 800fdb8:	689a      	ldr	r2, [r3, #8]
 800fdba:	0792      	lsls	r2, r2, #30
 800fdbc:	d52f      	bpl.n	800fe1e <HAL_SPI_Transmit+0x10e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fdbe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fdc0:	7812      	ldrb	r2, [r2, #0]
 800fdc2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800fdc4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fdc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800fdc8:	3b01      	subs	r3, #1
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800fdce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fdd0:	3101      	adds	r1, #1
    while (hspi->TxXferCount > 0U)
 800fdd2:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fdd4:	6321      	str	r1, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d1ed      	bne.n	800fdb6 <HAL_SPI_Transmit+0xa6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fdda:	4632      	mov	r2, r6
 800fddc:	4629      	mov	r1, r5
 800fdde:	4620      	mov	r0, r4
 800fde0:	f7ff fe34 	bl	800fa4c <SPI_EndRxTxTransaction>
 800fde4:	b108      	cbz	r0, 800fdea <HAL_SPI_Transmit+0xda>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fde6:	2320      	movs	r3, #32
 800fde8:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fdea:	68a3      	ldr	r3, [r4, #8]
 800fdec:	b933      	cbnz	r3, 800fdfc <HAL_SPI_Transmit+0xec>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fdee:	6822      	ldr	r2, [r4, #0]
 800fdf0:	9301      	str	r3, [sp, #4]
 800fdf2:	68d3      	ldr	r3, [r2, #12]
 800fdf4:	9301      	str	r3, [sp, #4]
 800fdf6:	6893      	ldr	r3, [r2, #8]
 800fdf8:	9301      	str	r3, [sp, #4]
 800fdfa:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fdfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800fdfe:	3000      	adds	r0, #0
 800fe00:	bf18      	it	ne
 800fe02:	2001      	movne	r0, #1
error:
 800fe04:	e79b      	b.n	800fd3e <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 800fe06:	2002      	movs	r0, #2
}
 800fe08:	b002      	add	sp, #8
 800fe0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fe14:	601a      	str	r2, [r3, #0]
 800fe16:	e7ba      	b.n	800fd8e <HAL_SPI_Transmit+0x7e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fe18:	2f01      	cmp	r7, #1
 800fe1a:	d1c9      	bne.n	800fdb0 <HAL_SPI_Transmit+0xa0>
 800fe1c:	e7be      	b.n	800fd9c <HAL_SPI_Transmit+0x8c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe1e:	f7fe fb89 	bl	800e534 <HAL_GetTick>
 800fe22:	1b80      	subs	r0, r0, r6
 800fe24:	42a8      	cmp	r0, r5
 800fe26:	d3c3      	bcc.n	800fdb0 <HAL_SPI_Transmit+0xa0>
 800fe28:	1c6b      	adds	r3, r5, #1
 800fe2a:	d0c1      	beq.n	800fdb0 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 800fe2c:	2003      	movs	r0, #3
 800fe2e:	e786      	b.n	800fd3e <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fe30:	b311      	cbz	r1, 800fe78 <HAL_SPI_Transmit+0x168>
 800fe32:	2f01      	cmp	r7, #1
 800fe34:	d020      	beq.n	800fe78 <HAL_SPI_Transmit+0x168>
    while (hspi->TxXferCount > 0U)
 800fe36:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800fe38:	b29b      	uxth	r3, r3
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d0cd      	beq.n	800fdda <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fe3e:	6823      	ldr	r3, [r4, #0]
 800fe40:	689a      	ldr	r2, [r3, #8]
 800fe42:	0790      	lsls	r0, r2, #30
 800fe44:	d510      	bpl.n	800fe68 <HAL_SPI_Transmit+0x158>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fe46:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fe48:	f832 1b02 	ldrh.w	r1, [r2], #2
 800fe4c:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800fe4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe50:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800fe52:	3b01      	subs	r3, #1
 800fe54:	b29b      	uxth	r3, r3
 800fe56:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800fe58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d0bc      	beq.n	800fdda <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fe60:	6823      	ldr	r3, [r4, #0]
 800fe62:	689a      	ldr	r2, [r3, #8]
 800fe64:	0790      	lsls	r0, r2, #30
 800fe66:	d4ee      	bmi.n	800fe46 <HAL_SPI_Transmit+0x136>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe68:	f7fe fb64 	bl	800e534 <HAL_GetTick>
 800fe6c:	1b80      	subs	r0, r0, r6
 800fe6e:	42a8      	cmp	r0, r5
 800fe70:	d3e1      	bcc.n	800fe36 <HAL_SPI_Transmit+0x126>
 800fe72:	1c69      	adds	r1, r5, #1
 800fe74:	d0df      	beq.n	800fe36 <HAL_SPI_Transmit+0x126>
 800fe76:	e7d9      	b.n	800fe2c <HAL_SPI_Transmit+0x11c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fe78:	4641      	mov	r1, r8
 800fe7a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800fe7e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800fe80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe82:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800fe84:	3b01      	subs	r3, #1
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	86e3      	strh	r3, [r4, #54]	; 0x36
 800fe8a:	e7d4      	b.n	800fe36 <HAL_SPI_Transmit+0x126>

0800fe8c <HAL_SPI_Receive>:
{
 800fe8c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 800fe90:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800fe92:	6842      	ldr	r2, [r0, #4]
 800fe94:	f890 5050 	ldrb.w	r5, [r0, #80]	; 0x50
 800fe98:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800fe9c:	b082      	sub	sp, #8
 800fe9e:	4604      	mov	r4, r0
 800fea0:	461f      	mov	r7, r3
 800fea2:	4689      	mov	r9, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800fea4:	d016      	beq.n	800fed4 <HAL_SPI_Receive+0x48>
  __HAL_LOCK(hspi);
 800fea6:	2d01      	cmp	r5, #1
 800fea8:	d024      	beq.n	800fef4 <HAL_SPI_Receive+0x68>
 800feaa:	2301      	movs	r3, #1
 800feac:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800feb0:	f7fe fb40 	bl	800e534 <HAL_GetTick>
 800feb4:	4605      	mov	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800feb6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800feba:	b2c0      	uxtb	r0, r0
 800febc:	2801      	cmp	r0, #1
 800febe:	d01d      	beq.n	800fefc <HAL_SPI_Receive+0x70>
    errorcode = HAL_BUSY;
 800fec0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800fec2:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800fec4:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800fec6:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800feca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800fece:	b002      	add	sp, #8
 800fed0:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800fed4:	6883      	ldr	r3, [r0, #8]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d1e5      	bne.n	800fea6 <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800feda:	2304      	movs	r3, #4
  __HAL_LOCK(hspi);
 800fedc:	2d01      	cmp	r5, #1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800fede:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_LOCK(hspi);
 800fee2:	d007      	beq.n	800fef4 <HAL_SPI_Receive+0x68>
 800fee4:	9700      	str	r7, [sp, #0]
 800fee6:	4633      	mov	r3, r6
 800fee8:	460a      	mov	r2, r1
 800feea:	f7ff fde1 	bl	800fab0 <HAL_SPI_TransmitReceive.part.3>
}
 800feee:	b002      	add	sp, #8
 800fef0:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  __HAL_LOCK(hspi);
 800fef4:	2002      	movs	r0, #2
}
 800fef6:	b002      	add	sp, #8
 800fef8:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 800fefc:	f1b9 0f00 	cmp.w	r9, #0
 800ff00:	d0df      	beq.n	800fec2 <HAL_SPI_Receive+0x36>
 800ff02:	2e00      	cmp	r6, #0
 800ff04:	d0dd      	beq.n	800fec2 <HAL_SPI_Receive+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff06:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ff08:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ff0c:	2304      	movs	r3, #4
 800ff0e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff12:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ff16:	f04f 0300 	mov.w	r3, #0
 800ff1a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ff1c:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ff1e:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 800ff20:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800ff24:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ff26:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800ff28:	86e3      	strh	r3, [r4, #54]	; 0x36
 800ff2a:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff2c:	d050      	beq.n	800ffd0 <HAL_SPI_Receive+0x144>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ff2e:	681a      	ldr	r2, [r3, #0]
 800ff30:	0656      	lsls	r6, r2, #25
 800ff32:	d403      	bmi.n	800ff3c <HAL_SPI_Receive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 800ff34:	681a      	ldr	r2, [r3, #0]
 800ff36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ff3a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ff3c:	68e3      	ldr	r3, [r4, #12]
 800ff3e:	bb43      	cbnz	r3, 800ff92 <HAL_SPI_Receive+0x106>
    while (hspi->RxXferCount > 0U)
 800ff40:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800ff42:	b289      	uxth	r1, r1
 800ff44:	b189      	cbz	r1, 800ff6a <HAL_SPI_Receive+0xde>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ff46:	6823      	ldr	r3, [r4, #0]
 800ff48:	689a      	ldr	r2, [r3, #8]
 800ff4a:	07d0      	lsls	r0, r2, #31
 800ff4c:	d537      	bpl.n	800ffbe <HAL_SPI_Receive+0x132>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ff4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ff50:	7b1b      	ldrb	r3, [r3, #12]
 800ff52:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800ff54:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ff56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800ff58:	3b01      	subs	r3, #1
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 800ff5e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ff60:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 800ff62:	b289      	uxth	r1, r1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ff64:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 800ff66:	2900      	cmp	r1, #0
 800ff68:	d1ed      	bne.n	800ff46 <HAL_SPI_Receive+0xba>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ff6a:	462a      	mov	r2, r5
 800ff6c:	4639      	mov	r1, r7
 800ff6e:	4620      	mov	r0, r4
 800ff70:	f7ff fd38 	bl	800f9e4 <SPI_EndRxTransaction>
 800ff74:	b108      	cbz	r0, 800ff7a <HAL_SPI_Receive+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ff76:	2320      	movs	r3, #32
 800ff78:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ff7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800ff7c:	3000      	adds	r0, #0
 800ff7e:	bf18      	it	ne
 800ff80:	2001      	movne	r0, #1
error :
 800ff82:	e79e      	b.n	800fec2 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff84:	f7fe fad6 	bl	800e534 <HAL_GetTick>
 800ff88:	1b40      	subs	r0, r0, r5
 800ff8a:	42b8      	cmp	r0, r7
 800ff8c:	d301      	bcc.n	800ff92 <HAL_SPI_Receive+0x106>
 800ff8e:	1c7b      	adds	r3, r7, #1
 800ff90:	d11c      	bne.n	800ffcc <HAL_SPI_Receive+0x140>
    while (hspi->RxXferCount > 0U)
 800ff92:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800ff94:	b289      	uxth	r1, r1
 800ff96:	2900      	cmp	r1, #0
 800ff98:	d0e7      	beq.n	800ff6a <HAL_SPI_Receive+0xde>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ff9a:	6823      	ldr	r3, [r4, #0]
 800ff9c:	689a      	ldr	r2, [r3, #8]
 800ff9e:	07d2      	lsls	r2, r2, #31
 800ffa0:	d5f0      	bpl.n	800ff84 <HAL_SPI_Receive+0xf8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ffa2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ffa4:	68db      	ldr	r3, [r3, #12]
 800ffa6:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800ffaa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ffac:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	b29b      	uxth	r3, r3
 800ffb2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 800ffb4:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800ffb6:	b289      	uxth	r1, r1
 800ffb8:	2900      	cmp	r1, #0
 800ffba:	d1ee      	bne.n	800ff9a <HAL_SPI_Receive+0x10e>
 800ffbc:	e7d5      	b.n	800ff6a <HAL_SPI_Receive+0xde>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ffbe:	f7fe fab9 	bl	800e534 <HAL_GetTick>
 800ffc2:	1b40      	subs	r0, r0, r5
 800ffc4:	42b8      	cmp	r0, r7
 800ffc6:	d3bb      	bcc.n	800ff40 <HAL_SPI_Receive+0xb4>
 800ffc8:	1c79      	adds	r1, r7, #1
 800ffca:	d0b9      	beq.n	800ff40 <HAL_SPI_Receive+0xb4>
          errorcode = HAL_TIMEOUT;
 800ffcc:	2003      	movs	r0, #3
 800ffce:	e778      	b.n	800fec2 <HAL_SPI_Receive+0x36>
    SPI_1LINE_RX(hspi);
 800ffd0:	681a      	ldr	r2, [r3, #0]
 800ffd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ffd6:	601a      	str	r2, [r3, #0]
 800ffd8:	e7a9      	b.n	800ff2e <HAL_SPI_Receive+0xa2>
 800ffda:	bf00      	nop

0800ffdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ffdc:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ffde:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ffe0:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800ffe2:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ffe4:	4d14      	ldr	r5, [pc, #80]	; (8010038 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ffe6:	f024 0401 	bic.w	r4, r4, #1
 800ffea:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800ffec:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800ffee:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800fff0:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800fff2:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fff6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fffa:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 800fffc:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 8010000:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010004:	d00a      	beq.n	801001c <TIM_OC1_SetConfig+0x40>
 8010006:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801000a:	42a8      	cmp	r0, r5
 801000c:	d006      	beq.n	801001c <TIM_OC1_SetConfig+0x40>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801000e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8010010:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8010012:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8010014:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8010016:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8010018:	6203      	str	r3, [r0, #32]
}
 801001a:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 801001c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 801001e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8010022:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8010024:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010028:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 801002c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 801002e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8010032:	432c      	orrs	r4, r5
 8010034:	e7eb      	b.n	801000e <TIM_OC1_SetConfig+0x32>
 8010036:	bf00      	nop
 8010038:	40010000 	.word	0x40010000

0801003c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801003c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801003e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010040:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8010042:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010044:	4d15      	ldr	r5, [pc, #84]	; (801009c <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010046:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 801004a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 801004c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 801004e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8010050:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8010052:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010056:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801005a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801005c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8010060:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010064:	d00a      	beq.n	801007c <TIM_OC3_SetConfig+0x40>
 8010066:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801006a:	42a8      	cmp	r0, r5
 801006c:	d006      	beq.n	801007c <TIM_OC3_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801006e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8010070:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8010072:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8010074:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8010076:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8010078:	6203      	str	r3, [r0, #32]
}
 801007a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801007c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 801007e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010082:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010086:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801008a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801008e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8010090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010094:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8010098:	e7e9      	b.n	801006e <TIM_OC3_SetConfig+0x32>
 801009a:	bf00      	nop
 801009c:	40010000 	.word	0x40010000

080100a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80100a0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80100a2:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80100a4:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80100a6:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100a8:	4d10      	ldr	r5, [pc, #64]	; (80100ec <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80100aa:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80100ae:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80100b0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80100b2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80100b4:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80100b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80100ba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100be:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80100c0:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80100c4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100c8:	d00a      	beq.n	80100e0 <TIM_OC4_SetConfig+0x40>
 80100ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80100ce:	42a8      	cmp	r0, r5
 80100d0:	d006      	beq.n	80100e0 <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80100d2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80100d4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80100d6:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80100d8:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 80100da:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80100dc:	6203      	str	r3, [r0, #32]
}
 80100de:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80100e0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80100e2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80100e6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80100ea:	e7f2      	b.n	80100d2 <TIM_OC4_SetConfig+0x32>
 80100ec:	40010000 	.word	0x40010000

080100f0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80100f0:	6803      	ldr	r3, [r0, #0]
 80100f2:	68da      	ldr	r2, [r3, #12]
 80100f4:	f042 0201 	orr.w	r2, r2, #1
 80100f8:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80100fa:	689a      	ldr	r2, [r3, #8]
 80100fc:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010100:	2a06      	cmp	r2, #6
 8010102:	d003      	beq.n	801010c <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8010104:	681a      	ldr	r2, [r3, #0]
 8010106:	f042 0201 	orr.w	r2, r2, #1
 801010a:	601a      	str	r2, [r3, #0]
}
 801010c:	2000      	movs	r0, #0
 801010e:	4770      	bx	lr

08010110 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8010110:	6803      	ldr	r3, [r0, #0]
 8010112:	68da      	ldr	r2, [r3, #12]
 8010114:	f022 0201 	bic.w	r2, r2, #1
 8010118:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 801011a:	6a19      	ldr	r1, [r3, #32]
 801011c:	f241 1211 	movw	r2, #4369	; 0x1111
 8010120:	4211      	tst	r1, r2
 8010122:	d108      	bne.n	8010136 <HAL_TIM_Base_Stop_IT+0x26>
 8010124:	6a19      	ldr	r1, [r3, #32]
 8010126:	f240 4244 	movw	r2, #1092	; 0x444
 801012a:	4211      	tst	r1, r2
 801012c:	d103      	bne.n	8010136 <HAL_TIM_Base_Stop_IT+0x26>
 801012e:	681a      	ldr	r2, [r3, #0]
 8010130:	f022 0201 	bic.w	r2, r2, #1
 8010134:	601a      	str	r2, [r3, #0]
}
 8010136:	2000      	movs	r0, #0
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop

0801013c <HAL_TIM_OC_MspInit>:
 801013c:	4770      	bx	lr
 801013e:	bf00      	nop

08010140 <HAL_TIM_OC_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010140:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010142:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010144:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010146:	f001 011f 	and.w	r1, r1, #31
 801014a:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 801014e:	ea20 0001 	bic.w	r0, r0, r1
{
 8010152:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8010154:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010156:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010158:	4c0c      	ldr	r4, [pc, #48]	; (801018c <HAL_TIM_OC_Start+0x4c>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801015a:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801015c:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801015e:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010160:	d00f      	beq.n	8010182 <HAL_TIM_OC_Start+0x42>
 8010162:	4a0b      	ldr	r2, [pc, #44]	; (8010190 <HAL_TIM_OC_Start+0x50>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d00c      	beq.n	8010182 <HAL_TIM_OC_Start+0x42>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010168:	689a      	ldr	r2, [r3, #8]
 801016a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801016e:	2a06      	cmp	r2, #6
 8010170:	d003      	beq.n	801017a <HAL_TIM_OC_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8010172:	681a      	ldr	r2, [r3, #0]
 8010174:	f042 0201 	orr.w	r2, r2, #1
 8010178:	601a      	str	r2, [r3, #0]
}
 801017a:	2000      	movs	r0, #0
 801017c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010180:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8010182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010184:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010188:	645a      	str	r2, [r3, #68]	; 0x44
 801018a:	e7ed      	b.n	8010168 <HAL_TIM_OC_Start+0x28>
 801018c:	40010000 	.word	0x40010000
 8010190:	40010400 	.word	0x40010400

08010194 <HAL_TIM_OC_Start_IT>:
{
 8010194:	b410      	push	{r4}
 8010196:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010198:	290c      	cmp	r1, #12
 801019a:	d80c      	bhi.n	80101b6 <HAL_TIM_OC_Start_IT+0x22>
 801019c:	e8df f001 	tbb	[pc, r1]
 80101a0:	0b0b0b07 	.word	0x0b0b0b07
 80101a4:	0b0b0b39 	.word	0x0b0b0b39
 80101a8:	0b0b0b34 	.word	0x0b0b0b34
 80101ac:	2f          	.byte	0x2f
 80101ad:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80101ae:	68da      	ldr	r2, [r3, #12]
 80101b0:	f042 0202 	orr.w	r2, r2, #2
 80101b4:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 80101b6:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80101b8:	4c18      	ldr	r4, [pc, #96]	; (801021c <HAL_TIM_OC_Start_IT+0x88>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80101ba:	f001 021f 	and.w	r2, r1, #31
 80101be:	2101      	movs	r1, #1
 80101c0:	4091      	lsls	r1, r2
  TIMx->CCER &= ~tmp;
 80101c2:	ea20 0001 	bic.w	r0, r0, r1
 80101c6:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80101c8:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80101ca:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80101cc:	ea41 0102 	orr.w	r1, r1, r2
 80101d0:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80101d2:	d00f      	beq.n	80101f4 <HAL_TIM_OC_Start_IT+0x60>
 80101d4:	4a12      	ldr	r2, [pc, #72]	; (8010220 <HAL_TIM_OC_Start_IT+0x8c>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d00c      	beq.n	80101f4 <HAL_TIM_OC_Start_IT+0x60>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80101da:	689a      	ldr	r2, [r3, #8]
 80101dc:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101e0:	2a06      	cmp	r2, #6
 80101e2:	d003      	beq.n	80101ec <HAL_TIM_OC_Start_IT+0x58>
    __HAL_TIM_ENABLE(htim);
 80101e4:	681a      	ldr	r2, [r3, #0]
 80101e6:	f042 0201 	orr.w	r2, r2, #1
 80101ea:	601a      	str	r2, [r3, #0]
}
 80101ec:	2000      	movs	r0, #0
 80101ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101f2:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 80101f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80101f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80101fa:	645a      	str	r2, [r3, #68]	; 0x44
 80101fc:	e7ed      	b.n	80101da <HAL_TIM_OC_Start_IT+0x46>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80101fe:	68da      	ldr	r2, [r3, #12]
 8010200:	f042 0210 	orr.w	r2, r2, #16
 8010204:	60da      	str	r2, [r3, #12]
      break;
 8010206:	e7d6      	b.n	80101b6 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010208:	68da      	ldr	r2, [r3, #12]
 801020a:	f042 0208 	orr.w	r2, r2, #8
 801020e:	60da      	str	r2, [r3, #12]
      break;
 8010210:	e7d1      	b.n	80101b6 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010212:	68da      	ldr	r2, [r3, #12]
 8010214:	f042 0204 	orr.w	r2, r2, #4
 8010218:	60da      	str	r2, [r3, #12]
      break;
 801021a:	e7cc      	b.n	80101b6 <HAL_TIM_OC_Start_IT+0x22>
 801021c:	40010000 	.word	0x40010000
 8010220:	40010400 	.word	0x40010400

08010224 <HAL_TIM_OC_Stop_IT>:
{
 8010224:	b410      	push	{r4}
 8010226:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010228:	290c      	cmp	r1, #12
 801022a:	d80c      	bhi.n	8010246 <HAL_TIM_OC_Stop_IT+0x22>
 801022c:	e8df f001 	tbb	[pc, r1]
 8010230:	0b0b0b07 	.word	0x0b0b0b07
 8010234:	0b0b0b47 	.word	0x0b0b0b47
 8010238:	0b0b0b42 	.word	0x0b0b0b42
 801023c:	3d          	.byte	0x3d
 801023d:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 801023e:	68da      	ldr	r2, [r3, #12]
 8010240:	f022 0202 	bic.w	r2, r2, #2
 8010244:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8010246:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010248:	4c1f      	ldr	r4, [pc, #124]	; (80102c8 <HAL_TIM_OC_Stop_IT+0xa4>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801024a:	f001 011f 	and.w	r1, r1, #31
 801024e:	2001      	movs	r0, #1
 8010250:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &= ~tmp;
 8010254:	ea22 0101 	bic.w	r1, r2, r1
 8010258:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801025a:	6a1a      	ldr	r2, [r3, #32]
 801025c:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801025e:	42a3      	cmp	r3, r4
 8010260:	d014      	beq.n	801028c <HAL_TIM_OC_Stop_IT+0x68>
 8010262:	4a1a      	ldr	r2, [pc, #104]	; (80102cc <HAL_TIM_OC_Stop_IT+0xa8>)
 8010264:	4293      	cmp	r3, r2
 8010266:	d011      	beq.n	801028c <HAL_TIM_OC_Stop_IT+0x68>
  __HAL_TIM_DISABLE(htim);
 8010268:	6a19      	ldr	r1, [r3, #32]
 801026a:	f241 1211 	movw	r2, #4369	; 0x1111
 801026e:	4211      	tst	r1, r2
 8010270:	d108      	bne.n	8010284 <HAL_TIM_OC_Stop_IT+0x60>
 8010272:	6a19      	ldr	r1, [r3, #32]
 8010274:	f240 4244 	movw	r2, #1092	; 0x444
 8010278:	4211      	tst	r1, r2
 801027a:	d103      	bne.n	8010284 <HAL_TIM_OC_Stop_IT+0x60>
 801027c:	681a      	ldr	r2, [r3, #0]
 801027e:	f022 0201 	bic.w	r2, r2, #1
 8010282:	601a      	str	r2, [r3, #0]
}
 8010284:	2000      	movs	r0, #0
 8010286:	f85d 4b04 	ldr.w	r4, [sp], #4
 801028a:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 801028c:	6a19      	ldr	r1, [r3, #32]
 801028e:	f241 1211 	movw	r2, #4369	; 0x1111
 8010292:	4211      	tst	r1, r2
 8010294:	d1e8      	bne.n	8010268 <HAL_TIM_OC_Stop_IT+0x44>
 8010296:	6a19      	ldr	r1, [r3, #32]
 8010298:	f240 4244 	movw	r2, #1092	; 0x444
 801029c:	4211      	tst	r1, r2
 801029e:	d1e3      	bne.n	8010268 <HAL_TIM_OC_Stop_IT+0x44>
 80102a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80102a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80102a6:	645a      	str	r2, [r3, #68]	; 0x44
 80102a8:	e7de      	b.n	8010268 <HAL_TIM_OC_Stop_IT+0x44>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80102aa:	68da      	ldr	r2, [r3, #12]
 80102ac:	f022 0210 	bic.w	r2, r2, #16
 80102b0:	60da      	str	r2, [r3, #12]
      break;
 80102b2:	e7c8      	b.n	8010246 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80102b4:	68da      	ldr	r2, [r3, #12]
 80102b6:	f022 0208 	bic.w	r2, r2, #8
 80102ba:	60da      	str	r2, [r3, #12]
      break;
 80102bc:	e7c3      	b.n	8010246 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80102be:	68da      	ldr	r2, [r3, #12]
 80102c0:	f022 0204 	bic.w	r2, r2, #4
 80102c4:	60da      	str	r2, [r3, #12]
      break;
 80102c6:	e7be      	b.n	8010246 <HAL_TIM_OC_Stop_IT+0x22>
 80102c8:	40010000 	.word	0x40010000
 80102cc:	40010400 	.word	0x40010400

080102d0 <HAL_TIM_PWM_MspInit>:
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop

080102d4 <HAL_TIM_PWM_Start>:
 80102d4:	f7ff bf34 	b.w	8010140 <HAL_TIM_OC_Start>

080102d8 <HAL_TIM_PWM_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80102d8:	6803      	ldr	r3, [r0, #0]
{
 80102da:	b430      	push	{r4, r5}
  TIMx->CCER &= ~tmp;
 80102dc:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80102de:	4c19      	ldr	r4, [pc, #100]	; (8010344 <HAL_TIM_PWM_Stop+0x6c>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80102e0:	f001 051f 	and.w	r5, r1, #31
 80102e4:	2101      	movs	r1, #1
 80102e6:	40a9      	lsls	r1, r5
  TIMx->CCER &= ~tmp;
 80102e8:	ea22 0101 	bic.w	r1, r2, r1
 80102ec:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80102ee:	6a1a      	ldr	r2, [r3, #32]
 80102f0:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80102f2:	42a3      	cmp	r3, r4
 80102f4:	d016      	beq.n	8010324 <HAL_TIM_PWM_Stop+0x4c>
 80102f6:	4a14      	ldr	r2, [pc, #80]	; (8010348 <HAL_TIM_PWM_Stop+0x70>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d013      	beq.n	8010324 <HAL_TIM_PWM_Stop+0x4c>
  __HAL_TIM_DISABLE(htim);
 80102fc:	6a19      	ldr	r1, [r3, #32]
 80102fe:	f241 1211 	movw	r2, #4369	; 0x1111
 8010302:	4211      	tst	r1, r2
 8010304:	d108      	bne.n	8010318 <HAL_TIM_PWM_Stop+0x40>
 8010306:	6a19      	ldr	r1, [r3, #32]
 8010308:	f240 4244 	movw	r2, #1092	; 0x444
 801030c:	4211      	tst	r1, r2
 801030e:	d103      	bne.n	8010318 <HAL_TIM_PWM_Stop+0x40>
 8010310:	681a      	ldr	r2, [r3, #0]
 8010312:	f022 0201 	bic.w	r2, r2, #1
 8010316:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8010318:	2301      	movs	r3, #1
 801031a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 801031e:	bc30      	pop	{r4, r5}
 8010320:	2000      	movs	r0, #0
 8010322:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8010324:	6a19      	ldr	r1, [r3, #32]
 8010326:	f241 1211 	movw	r2, #4369	; 0x1111
 801032a:	4211      	tst	r1, r2
 801032c:	d1e6      	bne.n	80102fc <HAL_TIM_PWM_Stop+0x24>
 801032e:	6a19      	ldr	r1, [r3, #32]
 8010330:	f240 4244 	movw	r2, #1092	; 0x444
 8010334:	4211      	tst	r1, r2
 8010336:	d1e1      	bne.n	80102fc <HAL_TIM_PWM_Stop+0x24>
 8010338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801033a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801033e:	645a      	str	r2, [r3, #68]	; 0x44
 8010340:	e7dc      	b.n	80102fc <HAL_TIM_PWM_Stop+0x24>
 8010342:	bf00      	nop
 8010344:	40010000 	.word	0x40010000
 8010348:	40010400 	.word	0x40010400

0801034c <HAL_TIM_Encoder_Start>:
{
 801034c:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 801034e:	b1c1      	cbz	r1, 8010382 <HAL_TIM_Encoder_Start+0x36>
 8010350:	2904      	cmp	r1, #4
 8010352:	d10d      	bne.n	8010370 <HAL_TIM_Encoder_Start+0x24>
  TIMx->CCER &= ~tmp;
 8010354:	6a1a      	ldr	r2, [r3, #32]
 8010356:	f022 0210 	bic.w	r2, r2, #16
 801035a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801035c:	6a1a      	ldr	r2, [r3, #32]
 801035e:	f042 0210 	orr.w	r2, r2, #16
 8010362:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8010364:	681a      	ldr	r2, [r3, #0]
 8010366:	f042 0201 	orr.w	r2, r2, #1
 801036a:	601a      	str	r2, [r3, #0]
}
 801036c:	2000      	movs	r0, #0
 801036e:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 8010370:	6a1a      	ldr	r2, [r3, #32]
 8010372:	f022 0201 	bic.w	r2, r2, #1
 8010376:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010378:	6a1a      	ldr	r2, [r3, #32]
 801037a:	f042 0201 	orr.w	r2, r2, #1
 801037e:	621a      	str	r2, [r3, #32]
 8010380:	e7e8      	b.n	8010354 <HAL_TIM_Encoder_Start+0x8>
  TIMx->CCER &= ~tmp;
 8010382:	6a1a      	ldr	r2, [r3, #32]
 8010384:	f022 0201 	bic.w	r2, r2, #1
 8010388:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801038a:	6a1a      	ldr	r2, [r3, #32]
 801038c:	f042 0201 	orr.w	r2, r2, #1
 8010390:	621a      	str	r2, [r3, #32]
 8010392:	e7e7      	b.n	8010364 <HAL_TIM_Encoder_Start+0x18>

08010394 <HAL_TIM_Encoder_Stop>:
{
 8010394:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010396:	b1f1      	cbz	r1, 80103d6 <HAL_TIM_Encoder_Stop+0x42>
 8010398:	2904      	cmp	r1, #4
 801039a:	d115      	bne.n	80103c8 <HAL_TIM_Encoder_Stop+0x34>
  TIMx->CCER &= ~tmp;
 801039c:	6a1a      	ldr	r2, [r3, #32]
 801039e:	f022 0210 	bic.w	r2, r2, #16
 80103a2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80103a4:	6a1a      	ldr	r2, [r3, #32]
 80103a6:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 80103a8:	6a19      	ldr	r1, [r3, #32]
 80103aa:	f241 1211 	movw	r2, #4369	; 0x1111
 80103ae:	4211      	tst	r1, r2
 80103b0:	d108      	bne.n	80103c4 <HAL_TIM_Encoder_Stop+0x30>
 80103b2:	6a19      	ldr	r1, [r3, #32]
 80103b4:	f240 4244 	movw	r2, #1092	; 0x444
 80103b8:	4211      	tst	r1, r2
 80103ba:	d103      	bne.n	80103c4 <HAL_TIM_Encoder_Stop+0x30>
 80103bc:	681a      	ldr	r2, [r3, #0]
 80103be:	f022 0201 	bic.w	r2, r2, #1
 80103c2:	601a      	str	r2, [r3, #0]
}
 80103c4:	2000      	movs	r0, #0
 80103c6:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 80103c8:	6a1a      	ldr	r2, [r3, #32]
 80103ca:	f022 0201 	bic.w	r2, r2, #1
 80103ce:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80103d0:	6a1a      	ldr	r2, [r3, #32]
 80103d2:	621a      	str	r2, [r3, #32]
 80103d4:	e7e2      	b.n	801039c <HAL_TIM_Encoder_Stop+0x8>
  TIMx->CCER &= ~tmp;
 80103d6:	6a1a      	ldr	r2, [r3, #32]
 80103d8:	f022 0201 	bic.w	r2, r2, #1
 80103dc:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80103de:	6a1a      	ldr	r2, [r3, #32]
 80103e0:	621a      	str	r2, [r3, #32]
 80103e2:	e7e1      	b.n	80103a8 <HAL_TIM_Encoder_Stop+0x14>

080103e4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80103e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d05a      	beq.n	80104a2 <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 80103ec:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80103ee:	6803      	ldr	r3, [r0, #0]
{
 80103f0:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80103f2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80103f6:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80103f8:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80103fa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80103fe:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 8010402:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 8010404:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8010406:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 801040a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 801040c:	d074      	beq.n	80104f8 <HAL_TIM_ConfigClockSource+0x114>
 801040e:	d94a      	bls.n	80104a6 <HAL_TIM_ConfigClockSource+0xc2>
 8010410:	2c60      	cmp	r4, #96	; 0x60
 8010412:	d02d      	beq.n	8010470 <HAL_TIM_ConfigClockSource+0x8c>
 8010414:	d956      	bls.n	80104c4 <HAL_TIM_ConfigClockSource+0xe0>
 8010416:	2c70      	cmp	r4, #112	; 0x70
 8010418:	d01a      	beq.n	8010450 <HAL_TIM_ConfigClockSource+0x6c>
 801041a:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 801041e:	d10e      	bne.n	801043e <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010420:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8010424:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8010426:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010428:	432a      	orrs	r2, r5
 801042a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801042e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010432:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8010434:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010436:	689a      	ldr	r2, [r3, #8]
 8010438:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801043c:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 801043e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8010440:	2201      	movs	r2, #1
 8010442:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010446:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 801044a:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 801044c:	4618      	mov	r0, r3
}
 801044e:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010450:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8010454:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8010456:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010458:	432a      	orrs	r2, r5
 801045a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801045e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010462:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8010464:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8010466:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010468:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 801046c:	609a      	str	r2, [r3, #8]
      break;
 801046e:	e7e6      	b.n	801043e <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010470:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010472:	684d      	ldr	r5, [r1, #4]
 8010474:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010476:	f024 0410 	bic.w	r4, r4, #16
 801047a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801047c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 801047e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010480:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010484:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8010488:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801048c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8010490:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8010492:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010494:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010496:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801049a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 801049e:	609a      	str	r2, [r3, #8]
 80104a0:	e7cd      	b.n	801043e <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80104a2:	2002      	movs	r0, #2
}
 80104a4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80104a6:	2c10      	cmp	r4, #16
 80104a8:	d004      	beq.n	80104b4 <HAL_TIM_ConfigClockSource+0xd0>
 80104aa:	d93d      	bls.n	8010528 <HAL_TIM_ConfigClockSource+0x144>
 80104ac:	2c20      	cmp	r4, #32
 80104ae:	d001      	beq.n	80104b4 <HAL_TIM_ConfigClockSource+0xd0>
 80104b0:	2c30      	cmp	r4, #48	; 0x30
 80104b2:	d1c4      	bne.n	801043e <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 80104b4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80104b6:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80104ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80104be:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 80104c0:	609c      	str	r4, [r3, #8]
 80104c2:	e7bc      	b.n	801043e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80104c4:	2c50      	cmp	r4, #80	; 0x50
 80104c6:	d1ba      	bne.n	801043e <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80104c8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80104ca:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80104cc:	684c      	ldr	r4, [r1, #4]
 80104ce:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80104d0:	f026 0601 	bic.w	r6, r6, #1
 80104d4:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80104d6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80104d8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80104dc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80104e0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80104e4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80104e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80104e8:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80104ea:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80104ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80104f0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80104f4:	609a      	str	r2, [r3, #8]
 80104f6:	e7a2      	b.n	801043e <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80104f8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80104fa:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80104fc:	684c      	ldr	r4, [r1, #4]
 80104fe:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010500:	f026 0601 	bic.w	r6, r6, #1
 8010504:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010506:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010508:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801050c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010510:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8010514:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8010516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010518:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 801051a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 801051c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010520:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8010524:	609a      	str	r2, [r3, #8]
 8010526:	e78a      	b.n	801043e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8010528:	2c00      	cmp	r4, #0
 801052a:	d0c3      	beq.n	80104b4 <HAL_TIM_ConfigClockSource+0xd0>
 801052c:	e787      	b.n	801043e <HAL_TIM_ConfigClockSource+0x5a>
 801052e:	bf00      	nop

08010530 <HAL_TIM_OC_DelayElapsedCallback>:
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop

08010534 <HAL_TIM_IC_CaptureCallback>:
 8010534:	4770      	bx	lr
 8010536:	bf00      	nop

08010538 <HAL_TIM_PWM_PulseFinishedCallback>:
 8010538:	4770      	bx	lr
 801053a:	bf00      	nop

0801053c <HAL_TIM_TriggerCallback>:
 801053c:	4770      	bx	lr
 801053e:	bf00      	nop

08010540 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010540:	6803      	ldr	r3, [r0, #0]
 8010542:	691a      	ldr	r2, [r3, #16]
 8010544:	0791      	lsls	r1, r2, #30
{
 8010546:	b510      	push	{r4, lr}
 8010548:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801054a:	d502      	bpl.n	8010552 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801054c:	68da      	ldr	r2, [r3, #12]
 801054e:	0792      	lsls	r2, r2, #30
 8010550:	d45f      	bmi.n	8010612 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010552:	691a      	ldr	r2, [r3, #16]
 8010554:	0750      	lsls	r0, r2, #29
 8010556:	d502      	bpl.n	801055e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010558:	68da      	ldr	r2, [r3, #12]
 801055a:	0751      	lsls	r1, r2, #29
 801055c:	d446      	bmi.n	80105ec <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801055e:	691a      	ldr	r2, [r3, #16]
 8010560:	0712      	lsls	r2, r2, #28
 8010562:	d502      	bpl.n	801056a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010564:	68da      	ldr	r2, [r3, #12]
 8010566:	0710      	lsls	r0, r2, #28
 8010568:	d42e      	bmi.n	80105c8 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801056a:	691a      	ldr	r2, [r3, #16]
 801056c:	06d2      	lsls	r2, r2, #27
 801056e:	d502      	bpl.n	8010576 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010570:	68da      	ldr	r2, [r3, #12]
 8010572:	06d0      	lsls	r0, r2, #27
 8010574:	d418      	bmi.n	80105a8 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010576:	691a      	ldr	r2, [r3, #16]
 8010578:	07d1      	lsls	r1, r2, #31
 801057a:	d502      	bpl.n	8010582 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801057c:	68da      	ldr	r2, [r3, #12]
 801057e:	07d2      	lsls	r2, r2, #31
 8010580:	d45d      	bmi.n	801063e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010582:	691a      	ldr	r2, [r3, #16]
 8010584:	0610      	lsls	r0, r2, #24
 8010586:	d502      	bpl.n	801058e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010588:	68da      	ldr	r2, [r3, #12]
 801058a:	0611      	lsls	r1, r2, #24
 801058c:	d45f      	bmi.n	801064e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801058e:	691a      	ldr	r2, [r3, #16]
 8010590:	0652      	lsls	r2, r2, #25
 8010592:	d502      	bpl.n	801059a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010594:	68da      	ldr	r2, [r3, #12]
 8010596:	0650      	lsls	r0, r2, #25
 8010598:	d461      	bmi.n	801065e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801059a:	691a      	ldr	r2, [r3, #16]
 801059c:	0691      	lsls	r1, r2, #26
 801059e:	d502      	bpl.n	80105a6 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80105a0:	68da      	ldr	r2, [r3, #12]
 80105a2:	0692      	lsls	r2, r2, #26
 80105a4:	d443      	bmi.n	801062e <HAL_TIM_IRQHandler+0xee>
}
 80105a6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80105a8:	f06f 0210 	mvn.w	r2, #16
 80105ac:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80105ae:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80105b0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80105b2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80105b6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80105b8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80105ba:	d064      	beq.n	8010686 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80105bc:	f7ff ffba 	bl	8010534 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80105c0:	2200      	movs	r2, #0
 80105c2:	6823      	ldr	r3, [r4, #0]
 80105c4:	7722      	strb	r2, [r4, #28]
 80105c6:	e7d6      	b.n	8010576 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80105c8:	f06f 0208 	mvn.w	r2, #8
 80105cc:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80105ce:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80105d0:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80105d2:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80105d4:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80105d6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80105d8:	d152      	bne.n	8010680 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80105da:	f7ff ffa9 	bl	8010530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80105de:	4620      	mov	r0, r4
 80105e0:	f7ff ffaa 	bl	8010538 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80105e4:	2200      	movs	r2, #0
 80105e6:	6823      	ldr	r3, [r4, #0]
 80105e8:	7722      	strb	r2, [r4, #28]
 80105ea:	e7be      	b.n	801056a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80105ec:	f06f 0204 	mvn.w	r2, #4
 80105f0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80105f2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80105f4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80105f6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80105fa:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80105fc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80105fe:	d13c      	bne.n	801067a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010600:	f7ff ff96 	bl	8010530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010604:	4620      	mov	r0, r4
 8010606:	f7ff ff97 	bl	8010538 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801060a:	2200      	movs	r2, #0
 801060c:	6823      	ldr	r3, [r4, #0]
 801060e:	7722      	strb	r2, [r4, #28]
 8010610:	e7a5      	b.n	801055e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010612:	f06f 0202 	mvn.w	r2, #2
 8010616:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010618:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801061a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801061c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801061e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010620:	d025      	beq.n	801066e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8010622:	f7ff ff87 	bl	8010534 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010626:	2200      	movs	r2, #0
 8010628:	6823      	ldr	r3, [r4, #0]
 801062a:	7722      	strb	r2, [r4, #28]
 801062c:	e791      	b.n	8010552 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801062e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8010632:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010634:	611a      	str	r2, [r3, #16]
}
 8010636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 801063a:	f000 bb11 	b.w	8010c60 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801063e:	f06f 0201 	mvn.w	r2, #1
 8010642:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8010644:	4620      	mov	r0, r4
 8010646:	f7f9 fead 	bl	800a3a4 <HAL_TIM_PeriodElapsedCallback>
 801064a:	6823      	ldr	r3, [r4, #0]
 801064c:	e799      	b.n	8010582 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801064e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010652:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8010654:	4620      	mov	r0, r4
 8010656:	f000 fb05 	bl	8010c64 <HAL_TIMEx_BreakCallback>
 801065a:	6823      	ldr	r3, [r4, #0]
 801065c:	e797      	b.n	801058e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801065e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010662:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8010664:	4620      	mov	r0, r4
 8010666:	f7ff ff69 	bl	801053c <HAL_TIM_TriggerCallback>
 801066a:	6823      	ldr	r3, [r4, #0]
 801066c:	e795      	b.n	801059a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801066e:	f7ff ff5f 	bl	8010530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010672:	4620      	mov	r0, r4
 8010674:	f7ff ff60 	bl	8010538 <HAL_TIM_PWM_PulseFinishedCallback>
 8010678:	e7d5      	b.n	8010626 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 801067a:	f7ff ff5b 	bl	8010534 <HAL_TIM_IC_CaptureCallback>
 801067e:	e7c4      	b.n	801060a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8010680:	f7ff ff58 	bl	8010534 <HAL_TIM_IC_CaptureCallback>
 8010684:	e7ae      	b.n	80105e4 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010686:	f7ff ff53 	bl	8010530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801068a:	4620      	mov	r0, r4
 801068c:	f7ff ff54 	bl	8010538 <HAL_TIM_PWM_PulseFinishedCallback>
 8010690:	e796      	b.n	80105c0 <HAL_TIM_IRQHandler+0x80>
 8010692:	bf00      	nop

08010694 <TIM_Base_SetConfig>:
{
 8010694:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010696:	4e36      	ldr	r6, [pc, #216]	; (8010770 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 8010698:	6803      	ldr	r3, [r0, #0]
 801069a:	694d      	ldr	r5, [r1, #20]
 801069c:	688c      	ldr	r4, [r1, #8]
 801069e:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80106a0:	42b0      	cmp	r0, r6
 80106a2:	d055      	beq.n	8010750 <TIM_Base_SetConfig+0xbc>
 80106a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80106a8:	d029      	beq.n	80106fe <TIM_Base_SetConfig+0x6a>
 80106aa:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80106ae:	42b0      	cmp	r0, r6
 80106b0:	d037      	beq.n	8010722 <TIM_Base_SetConfig+0x8e>
 80106b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80106b6:	42b0      	cmp	r0, r6
 80106b8:	d033      	beq.n	8010722 <TIM_Base_SetConfig+0x8e>
 80106ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80106be:	42b0      	cmp	r0, r6
 80106c0:	d02f      	beq.n	8010722 <TIM_Base_SetConfig+0x8e>
 80106c2:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80106c6:	42b0      	cmp	r0, r6
 80106c8:	d02b      	beq.n	8010722 <TIM_Base_SetConfig+0x8e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80106ca:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80106ce:	42b0      	cmp	r0, r6
 80106d0:	d013      	beq.n	80106fa <TIM_Base_SetConfig+0x66>
 80106d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80106d6:	42b0      	cmp	r0, r6
 80106d8:	d00f      	beq.n	80106fa <TIM_Base_SetConfig+0x66>
 80106da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80106de:	42b0      	cmp	r0, r6
 80106e0:	d00b      	beq.n	80106fa <TIM_Base_SetConfig+0x66>
 80106e2:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 80106e6:	42b0      	cmp	r0, r6
 80106e8:	d007      	beq.n	80106fa <TIM_Base_SetConfig+0x66>
 80106ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80106ee:	42b0      	cmp	r0, r6
 80106f0:	d003      	beq.n	80106fa <TIM_Base_SetConfig+0x66>
 80106f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80106f6:	42b0      	cmp	r0, r6
 80106f8:	d109      	bne.n	801070e <TIM_Base_SetConfig+0x7a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80106fa:	68c9      	ldr	r1, [r1, #12]
 80106fc:	e004      	b.n	8010708 <TIM_Base_SetConfig+0x74>
    tmpcr1 |= Structure->CounterMode;
 80106fe:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010700:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010706:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8010708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801070c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801070e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010712:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8010714:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010716:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010718:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 801071a:	2301      	movs	r3, #1
 801071c:	6143      	str	r3, [r0, #20]
}
 801071e:	bcf0      	pop	{r4, r5, r6, r7}
 8010720:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8010722:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010724:	4f13      	ldr	r7, [pc, #76]	; (8010774 <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801072a:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801072c:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 801072e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010732:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010738:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801073a:	42b8      	cmp	r0, r7
  TIMx->CR1 = tmpcr1;
 801073c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801073e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010740:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010742:	d1ea      	bne.n	801071a <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 8010744:	690b      	ldr	r3, [r1, #16]
 8010746:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8010748:	2301      	movs	r3, #1
 801074a:	6143      	str	r3, [r0, #20]
}
 801074c:	bcf0      	pop	{r4, r5, r6, r7}
 801074e:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8010750:	684f      	ldr	r7, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010752:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010758:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 801075a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801075e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010764:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8010766:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010768:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 801076a:	6282      	str	r2, [r0, #40]	; 0x28
 801076c:	e7ea      	b.n	8010744 <TIM_Base_SetConfig+0xb0>
 801076e:	bf00      	nop
 8010770:	40010000 	.word	0x40010000
 8010774:	40010400 	.word	0x40010400

08010778 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8010778:	b1b8      	cbz	r0, 80107aa <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 801077a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 801077e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8010780:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010784:	4604      	mov	r4, r0
 8010786:	b15b      	cbz	r3, 80107a0 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8010788:	2302      	movs	r3, #2
 801078a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801078e:	6820      	ldr	r0, [r4, #0]
 8010790:	1d21      	adds	r1, r4, #4
 8010792:	f7ff ff7f 	bl	8010694 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8010796:	2301      	movs	r3, #1
 8010798:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 801079c:	2000      	movs	r0, #0
}
 801079e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80107a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80107a4:	f7fc fac8 	bl	800cd38 <HAL_TIM_Base_MspInit>
 80107a8:	e7ee      	b.n	8010788 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80107aa:	2001      	movs	r0, #1
}
 80107ac:	4770      	bx	lr
 80107ae:	bf00      	nop

080107b0 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80107b0:	b1b8      	cbz	r0, 80107e2 <HAL_TIM_OC_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 80107b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80107b6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80107b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80107bc:	4604      	mov	r4, r0
 80107be:	b15b      	cbz	r3, 80107d8 <HAL_TIM_OC_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 80107c0:	2302      	movs	r3, #2
 80107c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80107c6:	6820      	ldr	r0, [r4, #0]
 80107c8:	1d21      	adds	r1, r4, #4
 80107ca:	f7ff ff63 	bl	8010694 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80107ce:	2301      	movs	r3, #1
 80107d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80107d4:	2000      	movs	r0, #0
}
 80107d6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80107d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80107dc:	f7ff fcae 	bl	801013c <HAL_TIM_OC_MspInit>
 80107e0:	e7ee      	b.n	80107c0 <HAL_TIM_OC_Init+0x10>
    return HAL_ERROR;
 80107e2:	2001      	movs	r0, #1
}
 80107e4:	4770      	bx	lr
 80107e6:	bf00      	nop

080107e8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80107e8:	b1b8      	cbz	r0, 801081a <HAL_TIM_PWM_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 80107ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80107ee:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80107f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80107f4:	4604      	mov	r4, r0
 80107f6:	b15b      	cbz	r3, 8010810 <HAL_TIM_PWM_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 80107f8:	2302      	movs	r3, #2
 80107fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80107fe:	6820      	ldr	r0, [r4, #0]
 8010800:	1d21      	adds	r1, r4, #4
 8010802:	f7ff ff47 	bl	8010694 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8010806:	2301      	movs	r3, #1
 8010808:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 801080c:	2000      	movs	r0, #0
}
 801080e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8010810:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8010814:	f7ff fd5c 	bl	80102d0 <HAL_TIM_PWM_MspInit>
 8010818:	e7ee      	b.n	80107f8 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 801081a:	2001      	movs	r0, #1
}
 801081c:	4770      	bx	lr
 801081e:	bf00      	nop

08010820 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8010820:	2800      	cmp	r0, #0
 8010822:	d04f      	beq.n	80108c4 <HAL_TIM_Encoder_Init+0xa4>
{
 8010824:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8010826:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 801082a:	b083      	sub	sp, #12
 801082c:	4605      	mov	r5, r0
 801082e:	460c      	mov	r4, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 8010830:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010834:	2b00      	cmp	r3, #0
 8010836:	d040      	beq.n	80108ba <HAL_TIM_Encoder_Init+0x9a>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010838:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 801083a:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801083c:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8010840:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010844:	6883      	ldr	r3, [r0, #8]
 8010846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801084a:	f023 0307 	bic.w	r3, r3, #7
 801084e:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010850:	f7ff ff20 	bl	8010694 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8010854:	6829      	ldr	r1, [r5, #0]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8010856:	6923      	ldr	r3, [r4, #16]
  tmpsmcr = htim->Instance->SMCR;
 8010858:	6888      	ldr	r0, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 801085a:	698e      	ldr	r6, [r1, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801085c:	69a7      	ldr	r7, [r4, #24]
 801085e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8010860:	f8d4 c000 	ldr.w	ip, [r4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8010864:	f426 7e40 	bic.w	lr, r6, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8010868:	69e6      	ldr	r6, [r4, #28]
 801086a:	011b      	lsls	r3, r3, #4
 801086c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8010870:	6a26      	ldr	r6, [r4, #32]
 8010872:	9601      	str	r6, [sp, #4]
 8010874:	68e6      	ldr	r6, [r4, #12]
 8010876:	4333      	orrs	r3, r6
 8010878:	9e01      	ldr	r6, [sp, #4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801087a:	f02e 0e03 	bic.w	lr, lr, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801087e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8010882:	ea42 020e 	orr.w	r2, r2, lr
  tmpccer = htim->Instance->CCER;
 8010886:	6a0f      	ldr	r7, [r1, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8010888:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801088c:	6966      	ldr	r6, [r4, #20]
 801088e:	6864      	ldr	r4, [r4, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8010890:	f422 427c 	bic.w	r2, r2, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8010894:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 8010898:	ea40 000c 	orr.w	r0, r0, ip
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801089c:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80108a0:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  htim->Instance->SMCR = tmpsmcr;
 80108a4:	6088      	str	r0, [r1, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80108a6:	4327      	orrs	r7, r4
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80108a8:	4313      	orrs	r3, r2
  htim->State = HAL_TIM_STATE_READY;
 80108aa:	2401      	movs	r4, #1
  return HAL_OK;
 80108ac:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 80108ae:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 80108b0:	620f      	str	r7, [r1, #32]
  htim->State = HAL_TIM_STATE_READY;
 80108b2:	f885 403d 	strb.w	r4, [r5, #61]	; 0x3d
}
 80108b6:	b003      	add	sp, #12
 80108b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 80108ba:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80108be:	f7fc fa9d 	bl	800cdfc <HAL_TIM_Encoder_MspInit>
 80108c2:	e7b9      	b.n	8010838 <HAL_TIM_Encoder_Init+0x18>
    return HAL_ERROR;
 80108c4:	2001      	movs	r0, #1
}
 80108c6:	4770      	bx	lr

080108c8 <TIM_OC2_SetConfig>:
{
 80108c8:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80108ca:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80108cc:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80108ce:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80108d0:	4d15      	ldr	r5, [pc, #84]	; (8010928 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80108d2:	f024 0410 	bic.w	r4, r4, #16
 80108d6:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80108d8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80108da:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80108dc:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80108de:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80108e2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80108e6:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80108e8:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80108ec:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80108f0:	d00a      	beq.n	8010908 <TIM_OC2_SetConfig+0x40>
 80108f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80108f6:	42a8      	cmp	r0, r5
 80108f8:	d006      	beq.n	8010908 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 80108fa:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80108fc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80108fe:	6182      	str	r2, [r0, #24]
}
 8010900:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8010902:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8010904:	6203      	str	r3, [r0, #32]
}
 8010906:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010908:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 801090a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801090e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010912:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010916:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801091a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 801091c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010920:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8010924:	e7e9      	b.n	80108fa <TIM_OC2_SetConfig+0x32>
 8010926:	bf00      	nop
 8010928:	40010000 	.word	0x40010000

0801092c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 801092c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010930:	2b01      	cmp	r3, #1
 8010932:	d028      	beq.n	8010986 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8010934:	b510      	push	{r4, lr}
 8010936:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8010938:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 801093a:	2001      	movs	r0, #1
 801093c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8010940:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 8010944:	2a0c      	cmp	r2, #12
 8010946:	d80b      	bhi.n	8010960 <HAL_TIM_OC_ConfigChannel+0x34>
 8010948:	e8df f002 	tbb	[pc, r2]
 801094c:	0a0a0a07 	.word	0x0a0a0a07
 8010950:	0a0a0a15 	.word	0x0a0a0a15
 8010954:	0a0a0a19 	.word	0x0a0a0a19
 8010958:	11          	.byte	0x11
 8010959:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801095a:	6820      	ldr	r0, [r4, #0]
 801095c:	f7ff fb3e 	bl	800ffdc <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8010960:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8010962:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8010964:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010968:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 801096c:	bd10      	pop	{r4, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801096e:	6820      	ldr	r0, [r4, #0]
 8010970:	f7ff fb96 	bl	80100a0 <TIM_OC4_SetConfig>
      break;
 8010974:	e7f4      	b.n	8010960 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010976:	6820      	ldr	r0, [r4, #0]
 8010978:	f7ff ffa6 	bl	80108c8 <TIM_OC2_SetConfig>
      break;
 801097c:	e7f0      	b.n	8010960 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801097e:	6820      	ldr	r0, [r4, #0]
 8010980:	f7ff fb5c 	bl	801003c <TIM_OC3_SetConfig>
      break;
 8010984:	e7ec      	b.n	8010960 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 8010986:	2002      	movs	r0, #2
}
 8010988:	4770      	bx	lr
 801098a:	bf00      	nop

0801098c <HAL_TIM_PWM_ConfigChannel>:
{
 801098c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 801098e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010992:	2b01      	cmp	r3, #1
 8010994:	d074      	beq.n	8010a80 <HAL_TIM_PWM_ConfigChannel+0xf4>
 8010996:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8010998:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 801099a:	2101      	movs	r1, #1
 801099c:	4604      	mov	r4, r0
 801099e:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80109a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80109a6:	2a0c      	cmp	r2, #12
 80109a8:	d819      	bhi.n	80109de <HAL_TIM_PWM_ConfigChannel+0x52>
 80109aa:	e8df f002 	tbb	[pc, r2]
 80109ae:	1807      	.short	0x1807
 80109b0:	18381818 	.word	0x18381818
 80109b4:	18511818 	.word	0x18511818
 80109b8:	1818      	.short	0x1818
 80109ba:	1f          	.byte	0x1f
 80109bb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80109bc:	4629      	mov	r1, r5
 80109be:	6800      	ldr	r0, [r0, #0]
 80109c0:	f7ff fb0c 	bl	800ffdc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80109c4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80109c6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80109c8:	6999      	ldr	r1, [r3, #24]
 80109ca:	f041 0108 	orr.w	r1, r1, #8
 80109ce:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80109d0:	6999      	ldr	r1, [r3, #24]
 80109d2:	f021 0104 	bic.w	r1, r1, #4
 80109d6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80109d8:	699a      	ldr	r2, [r3, #24]
 80109da:	4302      	orrs	r2, r0
 80109dc:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80109de:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80109e0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80109e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80109e6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80109ea:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80109ec:	4629      	mov	r1, r5
 80109ee:	6800      	ldr	r0, [r0, #0]
 80109f0:	f7ff fb56 	bl	80100a0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80109f4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80109f6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80109f8:	69d9      	ldr	r1, [r3, #28]
 80109fa:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80109fe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010a00:	69d9      	ldr	r1, [r3, #28]
 8010a02:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8010a06:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010a08:	69da      	ldr	r2, [r3, #28]
 8010a0a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8010a0e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8010a10:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8010a12:	2301      	movs	r3, #1
 8010a14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010a18:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8010a1c:	e7e5      	b.n	80109ea <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010a1e:	4629      	mov	r1, r5
 8010a20:	6800      	ldr	r0, [r0, #0]
 8010a22:	f7ff ff51 	bl	80108c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010a26:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010a28:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010a2a:	6999      	ldr	r1, [r3, #24]
 8010a2c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010a30:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010a32:	6999      	ldr	r1, [r3, #24]
 8010a34:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8010a38:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010a3a:	699a      	ldr	r2, [r3, #24]
 8010a3c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8010a40:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8010a42:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8010a44:	2301      	movs	r3, #1
 8010a46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010a4a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8010a4e:	e7cc      	b.n	80109ea <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010a50:	4629      	mov	r1, r5
 8010a52:	6800      	ldr	r0, [r0, #0]
 8010a54:	f7ff faf2 	bl	801003c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010a58:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010a5a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010a5c:	69d9      	ldr	r1, [r3, #28]
 8010a5e:	f041 0108 	orr.w	r1, r1, #8
 8010a62:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010a64:	69d9      	ldr	r1, [r3, #28]
 8010a66:	f021 0104 	bic.w	r1, r1, #4
 8010a6a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010a6c:	69da      	ldr	r2, [r3, #28]
 8010a6e:	4302      	orrs	r2, r0
 8010a70:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8010a72:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8010a74:	2301      	movs	r3, #1
 8010a76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010a7a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8010a7e:	e7b4      	b.n	80109ea <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8010a80:	2002      	movs	r0, #2
}
 8010a82:	bd38      	pop	{r3, r4, r5, pc}

08010a84 <HAL_TIMEx_OCN_Start_IT>:
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8010a84:	2904      	cmp	r1, #4
 8010a86:	6803      	ldr	r3, [r0, #0]
 8010a88:	d02a      	beq.n	8010ae0 <HAL_TIMEx_OCN_Start_IT+0x5c>
 8010a8a:	2908      	cmp	r1, #8
 8010a8c:	d023      	beq.n	8010ad6 <HAL_TIMEx_OCN_Start_IT+0x52>
 8010a8e:	b1e9      	cbz	r1, 8010acc <HAL_TIMEx_OCN_Start_IT+0x48>
    default:
      break;
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8010a90:	68da      	ldr	r2, [r3, #12]
 8010a92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010a96:	60da      	str	r2, [r3, #12]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8010a98:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010a9a:	f001 021f 	and.w	r2, r1, #31
 8010a9e:	2104      	movs	r1, #4
 8010aa0:	4091      	lsls	r1, r2
  TIMx->CCER &=  ~tmp;
 8010aa2:	ea20 0001 	bic.w	r0, r0, r1
 8010aa6:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010aa8:	6a1a      	ldr	r2, [r3, #32]
 8010aaa:	4311      	orrs	r1, r2
 8010aac:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8010aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ab0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010ab4:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010ab6:	689a      	ldr	r2, [r3, #8]
 8010ab8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010abc:	2a06      	cmp	r2, #6
 8010abe:	d003      	beq.n	8010ac8 <HAL_TIMEx_OCN_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8010ac0:	681a      	ldr	r2, [r3, #0]
 8010ac2:	f042 0201 	orr.w	r2, r2, #1
 8010ac6:	601a      	str	r2, [r3, #0]
}
 8010ac8:	2000      	movs	r0, #0
 8010aca:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010acc:	68da      	ldr	r2, [r3, #12]
 8010ace:	f042 0202 	orr.w	r2, r2, #2
 8010ad2:	60da      	str	r2, [r3, #12]
      break;
 8010ad4:	e7dc      	b.n	8010a90 <HAL_TIMEx_OCN_Start_IT+0xc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010ad6:	68da      	ldr	r2, [r3, #12]
 8010ad8:	f042 0208 	orr.w	r2, r2, #8
 8010adc:	60da      	str	r2, [r3, #12]
      break;
 8010ade:	e7d7      	b.n	8010a90 <HAL_TIMEx_OCN_Start_IT+0xc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010ae0:	68da      	ldr	r2, [r3, #12]
 8010ae2:	f042 0204 	orr.w	r2, r2, #4
 8010ae6:	60da      	str	r2, [r3, #12]
      break;
 8010ae8:	e7d2      	b.n	8010a90 <HAL_TIMEx_OCN_Start_IT+0xc>
 8010aea:	bf00      	nop

08010aec <HAL_TIMEx_OCN_Stop_IT>:
  switch (Channel)
 8010aec:	2904      	cmp	r1, #4
 8010aee:	6803      	ldr	r3, [r0, #0]
 8010af0:	d040      	beq.n	8010b74 <HAL_TIMEx_OCN_Stop_IT+0x88>
 8010af2:	2908      	cmp	r1, #8
 8010af4:	d039      	beq.n	8010b6a <HAL_TIMEx_OCN_Stop_IT+0x7e>
 8010af6:	2900      	cmp	r1, #0
 8010af8:	d032      	beq.n	8010b60 <HAL_TIMEx_OCN_Stop_IT+0x74>
  TIMx->CCER &=  ~tmp;
 8010afa:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010afc:	f001 011f 	and.w	r1, r1, #31
 8010b00:	2004      	movs	r0, #4
 8010b02:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &=  ~tmp;
 8010b06:	ea22 0101 	bic.w	r1, r2, r1
 8010b0a:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010b0c:	6a1a      	ldr	r2, [r3, #32]
 8010b0e:	621a      	str	r2, [r3, #32]
  tmpccer = htim->Instance->CCER;
 8010b10:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8010b12:	f240 4244 	movw	r2, #1092	; 0x444
 8010b16:	4211      	tst	r1, r2
 8010b18:	d103      	bne.n	8010b22 <HAL_TIMEx_OCN_Stop_IT+0x36>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8010b1a:	68da      	ldr	r2, [r3, #12]
 8010b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010b20:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 8010b22:	6a19      	ldr	r1, [r3, #32]
 8010b24:	f241 1211 	movw	r2, #4369	; 0x1111
 8010b28:	4211      	tst	r1, r2
 8010b2a:	d104      	bne.n	8010b36 <HAL_TIMEx_OCN_Stop_IT+0x4a>
 8010b2c:	6a19      	ldr	r1, [r3, #32]
 8010b2e:	f240 4244 	movw	r2, #1092	; 0x444
 8010b32:	4211      	tst	r1, r2
 8010b34:	d00f      	beq.n	8010b56 <HAL_TIMEx_OCN_Stop_IT+0x6a>
  __HAL_TIM_DISABLE(htim);
 8010b36:	6a19      	ldr	r1, [r3, #32]
 8010b38:	f241 1211 	movw	r2, #4369	; 0x1111
 8010b3c:	4211      	tst	r1, r2
 8010b3e:	d108      	bne.n	8010b52 <HAL_TIMEx_OCN_Stop_IT+0x66>
 8010b40:	6a19      	ldr	r1, [r3, #32]
 8010b42:	f240 4244 	movw	r2, #1092	; 0x444
 8010b46:	4211      	tst	r1, r2
 8010b48:	d103      	bne.n	8010b52 <HAL_TIMEx_OCN_Stop_IT+0x66>
 8010b4a:	681a      	ldr	r2, [r3, #0]
 8010b4c:	f022 0201 	bic.w	r2, r2, #1
 8010b50:	601a      	str	r2, [r3, #0]
}
 8010b52:	2000      	movs	r0, #0
 8010b54:	4770      	bx	lr
  __HAL_TIM_MOE_DISABLE(htim);
 8010b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010b5c:	645a      	str	r2, [r3, #68]	; 0x44
 8010b5e:	e7ea      	b.n	8010b36 <HAL_TIMEx_OCN_Stop_IT+0x4a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010b60:	68da      	ldr	r2, [r3, #12]
 8010b62:	f022 0202 	bic.w	r2, r2, #2
 8010b66:	60da      	str	r2, [r3, #12]
      break;
 8010b68:	e7c7      	b.n	8010afa <HAL_TIMEx_OCN_Stop_IT+0xe>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010b6a:	68da      	ldr	r2, [r3, #12]
 8010b6c:	f022 0208 	bic.w	r2, r2, #8
 8010b70:	60da      	str	r2, [r3, #12]
      break;
 8010b72:	e7c2      	b.n	8010afa <HAL_TIMEx_OCN_Stop_IT+0xe>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010b74:	68da      	ldr	r2, [r3, #12]
 8010b76:	f022 0204 	bic.w	r2, r2, #4
 8010b7a:	60da      	str	r2, [r3, #12]
      break;
 8010b7c:	e7bd      	b.n	8010afa <HAL_TIMEx_OCN_Stop_IT+0xe>
 8010b7e:	bf00      	nop

08010b80 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8010b80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010b84:	2b01      	cmp	r3, #1
 8010b86:	d03a      	beq.n	8010bfe <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  tmpcr2 = htim->Instance->CR2;
 8010b88:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8010b8a:	2202      	movs	r2, #2
{
 8010b8c:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8010b8e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8010b92:	685a      	ldr	r2, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010b94:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b96:	4d1b      	ldr	r5, [pc, #108]	; (8010c04 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 8010b98:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8010b9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010b9e:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ba0:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8010ba2:	f04f 0601 	mov.w	r6, #1
 8010ba6:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 8010baa:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010bac:	d019      	beq.n	8010be2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8010bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010bb2:	d016      	beq.n	8010be2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8010bb4:	4a14      	ldr	r2, [pc, #80]	; (8010c08 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8010bb6:	4293      	cmp	r3, r2
 8010bb8:	d013      	beq.n	8010be2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8010bba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d00f      	beq.n	8010be2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8010bc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d00b      	beq.n	8010be2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8010bca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d007      	beq.n	8010be2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8010bd2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	d003      	beq.n	8010be2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8010bda:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d104      	bne.n	8010bec <HAL_TIMEx_MasterConfigSynchronization+0x6c>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010be2:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010be4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010be8:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 8010bea:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(htim);
 8010bec:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8010bee:	2201      	movs	r2, #1
 8010bf0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010bf4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8010bf8:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8010bfa:	4618      	mov	r0, r3
}
 8010bfc:	4770      	bx	lr
  __HAL_LOCK(htim);
 8010bfe:	2002      	movs	r0, #2
}
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	40010000 	.word	0x40010000
 8010c08:	40000400 	.word	0x40000400

08010c0c <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8010c0c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010c10:	2b01      	cmp	r3, #1
 8010c12:	d021      	beq.n	8010c58 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 8010c14:	b430      	push	{r4, r5}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010c16:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010c1a:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c22:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010c28:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010c2e:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010c32:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010c38:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010c3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010c3e:	69c9      	ldr	r1, [r1, #28]
  htim->Instance->BDTR = tmpbdtr;
 8010c40:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010c42:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010c44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010c48:	430b      	orrs	r3, r1
  __HAL_UNLOCK(htim);
 8010c4a:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8010c4c:	6453      	str	r3, [r2, #68]	; 0x44
}
 8010c4e:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 8010c50:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 8010c54:	4608      	mov	r0, r1
 8010c56:	4770      	bx	lr
  __HAL_LOCK(htim);
 8010c58:	2302      	movs	r3, #2
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop

08010c60 <HAL_TIMEx_CommutCallback>:
 8010c60:	4770      	bx	lr
 8010c62:	bf00      	nop

08010c64 <HAL_TIMEx_BreakCallback>:
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop

08010c68 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c68:	6802      	ldr	r2, [r0, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010c6a:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c6c:	6911      	ldr	r1, [r2, #16]
{
 8010c6e:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c70:	68c5      	ldr	r5, [r0, #12]
 8010c72:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
{
 8010c76:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c78:	4329      	orrs	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010c7a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c7c:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 8010c7e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010c80:	6965      	ldr	r5, [r4, #20]
 8010c82:	4303      	orrs	r3, r0
 8010c84:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8010c86:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010c8a:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 8010c8c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010c90:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8010c92:	430b      	orrs	r3, r1
 8010c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010c96:	6953      	ldr	r3, [r2, #20]
 8010c98:	69a1      	ldr	r1, [r4, #24]
 8010c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c9e:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ca0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010ca4:	6153      	str	r3, [r2, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010ca6:	4b2a      	ldr	r3, [pc, #168]	; (8010d50 <UART_SetConfig+0xe8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ca8:	d023      	beq.n	8010cf2 <UART_SetConfig+0x8a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d01e      	beq.n	8010cec <UART_SetConfig+0x84>
 8010cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d01a      	beq.n	8010cec <UART_SetConfig+0x84>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010cb6:	f7fe fe33 	bl	800f920 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010cba:	6863      	ldr	r3, [r4, #4]
 8010cbc:	2219      	movs	r2, #25
 8010cbe:	fba0 0102 	umull	r0, r1, r0, r2
 8010cc2:	009a      	lsls	r2, r3, #2
 8010cc4:	0f9b      	lsrs	r3, r3, #30
 8010cc6:	f7f7 ff17 	bl	8008af8 <__aeabi_uldivmod>
 8010cca:	4922      	ldr	r1, [pc, #136]	; (8010d54 <UART_SetConfig+0xec>)
 8010ccc:	6824      	ldr	r4, [r4, #0]
 8010cce:	fba1 3200 	umull	r3, r2, r1, r0
 8010cd2:	0952      	lsrs	r2, r2, #5
 8010cd4:	2364      	movs	r3, #100	; 0x64
 8010cd6:	fb03 0312 	mls	r3, r3, r2, r0
 8010cda:	011b      	lsls	r3, r3, #4
 8010cdc:	3332      	adds	r3, #50	; 0x32
 8010cde:	fba1 1303 	umull	r1, r3, r1, r3
 8010ce2:	0112      	lsls	r2, r2, #4
 8010ce4:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8010ce8:	60a3      	str	r3, [r4, #8]
    }
  }
}
 8010cea:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8010cec:	f7fe fe28 	bl	800f940 <HAL_RCC_GetPCLK2Freq>
 8010cf0:	e7e3      	b.n	8010cba <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d028      	beq.n	8010d48 <UART_SetConfig+0xe0>
 8010cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d024      	beq.n	8010d48 <UART_SetConfig+0xe0>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010cfe:	f7fe fe0f 	bl	800f920 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010d02:	6862      	ldr	r2, [r4, #4]
 8010d04:	4d13      	ldr	r5, [pc, #76]	; (8010d54 <UART_SetConfig+0xec>)
 8010d06:	1892      	adds	r2, r2, r2
 8010d08:	f04f 0119 	mov.w	r1, #25
 8010d0c:	f04f 0600 	mov.w	r6, #0
 8010d10:	eb46 0306 	adc.w	r3, r6, r6
 8010d14:	fba0 0101 	umull	r0, r1, r0, r1
 8010d18:	f7f7 feee 	bl	8008af8 <__aeabi_uldivmod>
 8010d1c:	fba5 3200 	umull	r3, r2, r5, r0
 8010d20:	0951      	lsrs	r1, r2, #5
 8010d22:	2364      	movs	r3, #100	; 0x64
 8010d24:	fb03 0311 	mls	r3, r3, r1, r0
 8010d28:	00db      	lsls	r3, r3, #3
 8010d2a:	3332      	adds	r3, #50	; 0x32
 8010d2c:	fba5 2303 	umull	r2, r3, r5, r3
 8010d30:	095b      	lsrs	r3, r3, #5
 8010d32:	f003 0207 	and.w	r2, r3, #7
 8010d36:	005b      	lsls	r3, r3, #1
 8010d38:	6824      	ldr	r4, [r4, #0]
 8010d3a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010d3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010d42:	4413      	add	r3, r2
 8010d44:	60a3      	str	r3, [r4, #8]
}
 8010d46:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8010d48:	f7fe fdfa 	bl	800f940 <HAL_RCC_GetPCLK2Freq>
 8010d4c:	e7d9      	b.n	8010d02 <UART_SetConfig+0x9a>
 8010d4e:	bf00      	nop
 8010d50:	40011000 	.word	0x40011000
 8010d54:	51eb851f 	.word	0x51eb851f

08010d58 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8010d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d5c:	4607      	mov	r7, r0
 8010d5e:	460e      	mov	r6, r1
 8010d60:	4690      	mov	r8, r2
 8010d62:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010d64:	683c      	ldr	r4, [r7, #0]
 8010d66:	e001      	b.n	8010d6c <UART_WaitOnFlagUntilTimeout.constprop.3+0x14>
    if (Timeout != HAL_MAX_DELAY)
 8010d68:	1c6b      	adds	r3, r5, #1
 8010d6a:	d106      	bne.n	8010d7a <UART_WaitOnFlagUntilTimeout.constprop.3+0x22>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010d6c:	6820      	ldr	r0, [r4, #0]
 8010d6e:	ea36 0300 	bics.w	r3, r6, r0
 8010d72:	d1f9      	bne.n	8010d68 <UART_WaitOnFlagUntilTimeout.constprop.3+0x10>
  return HAL_OK;
 8010d74:	2000      	movs	r0, #0
}
 8010d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010d7a:	b135      	cbz	r5, 8010d8a <UART_WaitOnFlagUntilTimeout.constprop.3+0x32>
 8010d7c:	f7fd fbda 	bl	800e534 <HAL_GetTick>
 8010d80:	eba0 0008 	sub.w	r0, r0, r8
 8010d84:	4285      	cmp	r5, r0
 8010d86:	d2ed      	bcs.n	8010d64 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
 8010d88:	683c      	ldr	r4, [r7, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010d8a:	68e3      	ldr	r3, [r4, #12]
 8010d8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010d90:	60e3      	str	r3, [r4, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d92:	6963      	ldr	r3, [r4, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8010d94:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d96:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8010d9a:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d9c:	6163      	str	r3, [r4, #20]
        __HAL_UNLOCK(huart);
 8010d9e:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8010da0:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8010da4:	f887 1038 	strb.w	r1, [r7, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8010da8:	f887 203a 	strb.w	r2, [r7, #58]	; 0x3a
 8010dac:	e7e3      	b.n	8010d76 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>
 8010dae:	bf00      	nop

08010db0 <HAL_UART_Init>:
  if (huart == NULL)
 8010db0:	b360      	cbz	r0, 8010e0c <HAL_UART_Init+0x5c>
{
 8010db2:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8010db4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8010db8:	4604      	mov	r4, r0
 8010dba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010dbe:	b303      	cbz	r3, 8010e02 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8010dc0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8010dc2:	2324      	movs	r3, #36	; 0x24
 8010dc4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8010dc8:	68d3      	ldr	r3, [r2, #12]
 8010dca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010dce:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	f7ff ff49 	bl	8010c68 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010dd6:	6823      	ldr	r3, [r4, #0]
 8010dd8:	691a      	ldr	r2, [r3, #16]
 8010dda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010dde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010de0:	695a      	ldr	r2, [r3, #20]
 8010de2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010de6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8010de8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010dea:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8010dec:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8010dee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010df2:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8010df4:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010df6:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010df8:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010dfc:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8010e00:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8010e02:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8010e06:	f7fc f8cd 	bl	800cfa4 <HAL_UART_MspInit>
 8010e0a:	e7d9      	b.n	8010dc0 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8010e0c:	2001      	movs	r0, #1
}
 8010e0e:	4770      	bx	lr

08010e10 <HAL_UART_Transmit>:
{
 8010e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e14:	460f      	mov	r7, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8010e16:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8010e1a:	2920      	cmp	r1, #32
{
 8010e1c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8010e1e:	d130      	bne.n	8010e82 <HAL_UART_Transmit+0x72>
    if ((pData == NULL) || (Size == 0U))
 8010e20:	2f00      	cmp	r7, #0
 8010e22:	d032      	beq.n	8010e8a <HAL_UART_Transmit+0x7a>
 8010e24:	9201      	str	r2, [sp, #4]
 8010e26:	b382      	cbz	r2, 8010e8a <HAL_UART_Transmit+0x7a>
 8010e28:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 8010e2a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8010e2e:	2b01      	cmp	r3, #1
 8010e30:	4604      	mov	r4, r0
 8010e32:	d026      	beq.n	8010e82 <HAL_UART_Transmit+0x72>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e34:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8010e36:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010e38:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e3a:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8010e3c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010e40:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8010e44:	f7fd fb76 	bl	800e534 <HAL_GetTick>
    huart->TxXferSize = Size;
 8010e48:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8010e4a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8010e4e:	4681      	mov	r9, r0
    huart->TxXferSize = Size;
 8010e50:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8010e52:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8010e54:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
 8010e56:	b2ad      	uxth	r5, r5
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010e58:	4643      	mov	r3, r8
 8010e5a:	464a      	mov	r2, r9
 8010e5c:	2180      	movs	r1, #128	; 0x80
 8010e5e:	4620      	mov	r0, r4
    while (huart->TxXferCount > 0U)
 8010e60:	b355      	cbz	r5, 8010eb8 <HAL_UART_Transmit+0xa8>
      huart->TxXferCount--;
 8010e62:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010e64:	68a6      	ldr	r6, [r4, #8]
      huart->TxXferCount--;
 8010e66:	3d01      	subs	r5, #1
 8010e68:	b2ad      	uxth	r5, r5
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010e6a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
      huart->TxXferCount--;
 8010e6e:	84e5      	strh	r5, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010e70:	d00f      	beq.n	8010e92 <HAL_UART_Transmit+0x82>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010e72:	f7ff ff71 	bl	8010d58 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8010e76:	b9e8      	cbnz	r0, 8010eb4 <HAL_UART_Transmit+0xa4>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8010e78:	6823      	ldr	r3, [r4, #0]
 8010e7a:	783a      	ldrb	r2, [r7, #0]
 8010e7c:	605a      	str	r2, [r3, #4]
 8010e7e:	3701      	adds	r7, #1
 8010e80:	e7e8      	b.n	8010e54 <HAL_UART_Transmit+0x44>
    return HAL_BUSY;
 8010e82:	2002      	movs	r0, #2
}
 8010e84:	b003      	add	sp, #12
 8010e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8010e8a:	2001      	movs	r0, #1
}
 8010e8c:	b003      	add	sp, #12
 8010e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010e92:	4643      	mov	r3, r8
 8010e94:	464a      	mov	r2, r9
 8010e96:	2180      	movs	r1, #128	; 0x80
 8010e98:	4620      	mov	r0, r4
 8010e9a:	f7ff ff5d 	bl	8010d58 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8010e9e:	b948      	cbnz	r0, 8010eb4 <HAL_UART_Transmit+0xa4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010ea0:	883b      	ldrh	r3, [r7, #0]
 8010ea2:	6821      	ldr	r1, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010ea4:	6922      	ldr	r2, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010eaa:	604b      	str	r3, [r1, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010eac:	2a00      	cmp	r2, #0
 8010eae:	d1e6      	bne.n	8010e7e <HAL_UART_Transmit+0x6e>
          pData += 2U;
 8010eb0:	3702      	adds	r7, #2
 8010eb2:	e7cf      	b.n	8010e54 <HAL_UART_Transmit+0x44>
          return HAL_TIMEOUT;
 8010eb4:	2003      	movs	r0, #3
 8010eb6:	e7e5      	b.n	8010e84 <HAL_UART_Transmit+0x74>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010eb8:	2140      	movs	r1, #64	; 0x40
 8010eba:	f7ff ff4d 	bl	8010d58 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	d1f8      	bne.n	8010eb4 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8010ec2:	2320      	movs	r3, #32
 8010ec4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8010ec8:	e7dc      	b.n	8010e84 <HAL_UART_Transmit+0x74>
 8010eca:	bf00      	nop

08010ecc <HAL_UART_Receive>:
{
 8010ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ed0:	460f      	mov	r7, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8010ed2:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
 8010ed6:	2920      	cmp	r1, #32
{
 8010ed8:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8010eda:	d135      	bne.n	8010f48 <HAL_UART_Receive+0x7c>
    if ((pData == NULL) || (Size == 0U))
 8010edc:	2f00      	cmp	r7, #0
 8010ede:	d037      	beq.n	8010f50 <HAL_UART_Receive+0x84>
 8010ee0:	9201      	str	r2, [sp, #4]
 8010ee2:	2a00      	cmp	r2, #0
 8010ee4:	d034      	beq.n	8010f50 <HAL_UART_Receive+0x84>
 8010ee6:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 8010ee8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8010eec:	2b01      	cmp	r3, #1
 8010eee:	4604      	mov	r4, r0
 8010ef0:	d02a      	beq.n	8010f48 <HAL_UART_Receive+0x7c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ef2:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8010ef4:	2101      	movs	r1, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010ef6:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ef8:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8010efa:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010efe:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8010f02:	f7fd fb17 	bl	800e534 <HAL_GetTick>
    huart->RxXferSize = Size;
 8010f06:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8010f08:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8010f0c:	4681      	mov	r9, r0
    huart->RxXferSize = Size;
 8010f0e:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8010f10:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8010f12:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8010f14:	b2ad      	uxth	r5, r5
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010f16:	4643      	mov	r3, r8
 8010f18:	464a      	mov	r2, r9
 8010f1a:	2120      	movs	r1, #32
 8010f1c:	4620      	mov	r0, r4
    while (huart->RxXferCount > 0U)
 8010f1e:	2d00      	cmp	r5, #0
 8010f20:	d036      	beq.n	8010f90 <HAL_UART_Receive+0xc4>
      huart->RxXferCount--;
 8010f22:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010f24:	68a6      	ldr	r6, [r4, #8]
      huart->RxXferCount--;
 8010f26:	3d01      	subs	r5, #1
 8010f28:	b2ad      	uxth	r5, r5
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010f2a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
      huart->RxXferCount--;
 8010f2e:	85e5      	strh	r5, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010f30:	d012      	beq.n	8010f58 <HAL_UART_Receive+0x8c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010f32:	f7ff ff11 	bl	8010d58 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8010f36:	bb78      	cbnz	r0, 8010f98 <HAL_UART_Receive+0xcc>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010f38:	6923      	ldr	r3, [r4, #16]
 8010f3a:	6821      	ldr	r1, [r4, #0]
 8010f3c:	1c7a      	adds	r2, r7, #1
 8010f3e:	b9db      	cbnz	r3, 8010f78 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010f40:	684b      	ldr	r3, [r1, #4]
 8010f42:	703b      	strb	r3, [r7, #0]
 8010f44:	4617      	mov	r7, r2
 8010f46:	e7e4      	b.n	8010f12 <HAL_UART_Receive+0x46>
    return HAL_BUSY;
 8010f48:	2002      	movs	r0, #2
}
 8010f4a:	b003      	add	sp, #12
 8010f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8010f50:	2001      	movs	r0, #1
}
 8010f52:	b003      	add	sp, #12
 8010f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010f58:	4643      	mov	r3, r8
 8010f5a:	464a      	mov	r2, r9
 8010f5c:	2120      	movs	r1, #32
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f7ff fefa 	bl	8010d58 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8010f64:	b9c0      	cbnz	r0, 8010f98 <HAL_UART_Receive+0xcc>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010f66:	6923      	ldr	r3, [r4, #16]
 8010f68:	b963      	cbnz	r3, 8010f84 <HAL_UART_Receive+0xb8>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010f6a:	6823      	ldr	r3, [r4, #0]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f72:	f827 3b02 	strh.w	r3, [r7], #2
 8010f76:	e7cc      	b.n	8010f12 <HAL_UART_Receive+0x46>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010f78:	684b      	ldr	r3, [r1, #4]
 8010f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f7e:	703b      	strb	r3, [r7, #0]
 8010f80:	4617      	mov	r7, r2
 8010f82:	e7c6      	b.n	8010f12 <HAL_UART_Receive+0x46>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010f84:	6823      	ldr	r3, [r4, #0]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	f827 3b01 	strh.w	r3, [r7], #1
 8010f8e:	e7c0      	b.n	8010f12 <HAL_UART_Receive+0x46>
    return HAL_OK;
 8010f90:	4628      	mov	r0, r5
    huart->RxState = HAL_UART_STATE_READY;
 8010f92:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
    return HAL_OK;
 8010f96:	e7d8      	b.n	8010f4a <HAL_UART_Receive+0x7e>
          return HAL_TIMEOUT;
 8010f98:	2003      	movs	r0, #3
 8010f9a:	e7d6      	b.n	8010f4a <HAL_UART_Receive+0x7e>

08010f9c <round>:
 8010f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f9e:	ec57 6b10 	vmov	r6, r7, d0
 8010fa2:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8010fa6:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8010faa:	2c13      	cmp	r4, #19
 8010fac:	463b      	mov	r3, r7
 8010fae:	463d      	mov	r5, r7
 8010fb0:	dc17      	bgt.n	8010fe2 <round+0x46>
 8010fb2:	2c00      	cmp	r4, #0
 8010fb4:	da09      	bge.n	8010fca <round+0x2e>
 8010fb6:	3401      	adds	r4, #1
 8010fb8:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8010fbc:	d103      	bne.n	8010fc6 <round+0x2a>
 8010fbe:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010fc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010fc6:	2100      	movs	r1, #0
 8010fc8:	e02c      	b.n	8011024 <round+0x88>
 8010fca:	4a18      	ldr	r2, [pc, #96]	; (801102c <round+0x90>)
 8010fcc:	4122      	asrs	r2, r4
 8010fce:	4217      	tst	r7, r2
 8010fd0:	d100      	bne.n	8010fd4 <round+0x38>
 8010fd2:	b19e      	cbz	r6, 8010ffc <round+0x60>
 8010fd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010fd8:	4123      	asrs	r3, r4
 8010fda:	442b      	add	r3, r5
 8010fdc:	ea23 0302 	bic.w	r3, r3, r2
 8010fe0:	e7f1      	b.n	8010fc6 <round+0x2a>
 8010fe2:	2c33      	cmp	r4, #51	; 0x33
 8010fe4:	dd0d      	ble.n	8011002 <round+0x66>
 8010fe6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8010fea:	d107      	bne.n	8010ffc <round+0x60>
 8010fec:	4630      	mov	r0, r6
 8010fee:	4639      	mov	r1, r7
 8010ff0:	ee10 2a10 	vmov	r2, s0
 8010ff4:	f7f7 f882 	bl	80080fc <__adddf3>
 8010ff8:	4606      	mov	r6, r0
 8010ffa:	460f      	mov	r7, r1
 8010ffc:	ec47 6b10 	vmov	d0, r6, r7
 8011000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011002:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8011006:	f04f 30ff 	mov.w	r0, #4294967295
 801100a:	40d0      	lsrs	r0, r2
 801100c:	4206      	tst	r6, r0
 801100e:	d0f5      	beq.n	8010ffc <round+0x60>
 8011010:	2201      	movs	r2, #1
 8011012:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011016:	fa02 f404 	lsl.w	r4, r2, r4
 801101a:	1931      	adds	r1, r6, r4
 801101c:	bf28      	it	cs
 801101e:	189b      	addcs	r3, r3, r2
 8011020:	ea21 0100 	bic.w	r1, r1, r0
 8011024:	461f      	mov	r7, r3
 8011026:	460e      	mov	r6, r1
 8011028:	e7e8      	b.n	8010ffc <round+0x60>
 801102a:	bf00      	nop
 801102c:	000fffff 	.word	0x000fffff

08011030 <__errno>:
 8011030:	4b01      	ldr	r3, [pc, #4]	; (8011038 <__errno+0x8>)
 8011032:	6818      	ldr	r0, [r3, #0]
 8011034:	4770      	bx	lr
 8011036:	bf00      	nop
 8011038:	20000038 	.word	0x20000038

0801103c <__sflush_r>:
 801103c:	898a      	ldrh	r2, [r1, #12]
 801103e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011042:	4605      	mov	r5, r0
 8011044:	0710      	lsls	r0, r2, #28
 8011046:	460c      	mov	r4, r1
 8011048:	d458      	bmi.n	80110fc <__sflush_r+0xc0>
 801104a:	684b      	ldr	r3, [r1, #4]
 801104c:	2b00      	cmp	r3, #0
 801104e:	dc05      	bgt.n	801105c <__sflush_r+0x20>
 8011050:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011052:	2b00      	cmp	r3, #0
 8011054:	dc02      	bgt.n	801105c <__sflush_r+0x20>
 8011056:	2000      	movs	r0, #0
 8011058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801105c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801105e:	2e00      	cmp	r6, #0
 8011060:	d0f9      	beq.n	8011056 <__sflush_r+0x1a>
 8011062:	2300      	movs	r3, #0
 8011064:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011068:	682f      	ldr	r7, [r5, #0]
 801106a:	6a21      	ldr	r1, [r4, #32]
 801106c:	602b      	str	r3, [r5, #0]
 801106e:	d032      	beq.n	80110d6 <__sflush_r+0x9a>
 8011070:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011072:	89a3      	ldrh	r3, [r4, #12]
 8011074:	075a      	lsls	r2, r3, #29
 8011076:	d505      	bpl.n	8011084 <__sflush_r+0x48>
 8011078:	6863      	ldr	r3, [r4, #4]
 801107a:	1ac0      	subs	r0, r0, r3
 801107c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801107e:	b10b      	cbz	r3, 8011084 <__sflush_r+0x48>
 8011080:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011082:	1ac0      	subs	r0, r0, r3
 8011084:	2300      	movs	r3, #0
 8011086:	4602      	mov	r2, r0
 8011088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801108a:	6a21      	ldr	r1, [r4, #32]
 801108c:	4628      	mov	r0, r5
 801108e:	47b0      	blx	r6
 8011090:	1c43      	adds	r3, r0, #1
 8011092:	89a3      	ldrh	r3, [r4, #12]
 8011094:	d106      	bne.n	80110a4 <__sflush_r+0x68>
 8011096:	6829      	ldr	r1, [r5, #0]
 8011098:	291d      	cmp	r1, #29
 801109a:	d848      	bhi.n	801112e <__sflush_r+0xf2>
 801109c:	4a29      	ldr	r2, [pc, #164]	; (8011144 <__sflush_r+0x108>)
 801109e:	40ca      	lsrs	r2, r1
 80110a0:	07d6      	lsls	r6, r2, #31
 80110a2:	d544      	bpl.n	801112e <__sflush_r+0xf2>
 80110a4:	2200      	movs	r2, #0
 80110a6:	6062      	str	r2, [r4, #4]
 80110a8:	04d9      	lsls	r1, r3, #19
 80110aa:	6922      	ldr	r2, [r4, #16]
 80110ac:	6022      	str	r2, [r4, #0]
 80110ae:	d504      	bpl.n	80110ba <__sflush_r+0x7e>
 80110b0:	1c42      	adds	r2, r0, #1
 80110b2:	d101      	bne.n	80110b8 <__sflush_r+0x7c>
 80110b4:	682b      	ldr	r3, [r5, #0]
 80110b6:	b903      	cbnz	r3, 80110ba <__sflush_r+0x7e>
 80110b8:	6560      	str	r0, [r4, #84]	; 0x54
 80110ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110bc:	602f      	str	r7, [r5, #0]
 80110be:	2900      	cmp	r1, #0
 80110c0:	d0c9      	beq.n	8011056 <__sflush_r+0x1a>
 80110c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110c6:	4299      	cmp	r1, r3
 80110c8:	d002      	beq.n	80110d0 <__sflush_r+0x94>
 80110ca:	4628      	mov	r0, r5
 80110cc:	f000 f9fa 	bl	80114c4 <_free_r>
 80110d0:	2000      	movs	r0, #0
 80110d2:	6360      	str	r0, [r4, #52]	; 0x34
 80110d4:	e7c0      	b.n	8011058 <__sflush_r+0x1c>
 80110d6:	2301      	movs	r3, #1
 80110d8:	4628      	mov	r0, r5
 80110da:	47b0      	blx	r6
 80110dc:	1c41      	adds	r1, r0, #1
 80110de:	d1c8      	bne.n	8011072 <__sflush_r+0x36>
 80110e0:	682b      	ldr	r3, [r5, #0]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d0c5      	beq.n	8011072 <__sflush_r+0x36>
 80110e6:	2b1d      	cmp	r3, #29
 80110e8:	d001      	beq.n	80110ee <__sflush_r+0xb2>
 80110ea:	2b16      	cmp	r3, #22
 80110ec:	d101      	bne.n	80110f2 <__sflush_r+0xb6>
 80110ee:	602f      	str	r7, [r5, #0]
 80110f0:	e7b1      	b.n	8011056 <__sflush_r+0x1a>
 80110f2:	89a3      	ldrh	r3, [r4, #12]
 80110f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110f8:	81a3      	strh	r3, [r4, #12]
 80110fa:	e7ad      	b.n	8011058 <__sflush_r+0x1c>
 80110fc:	690f      	ldr	r7, [r1, #16]
 80110fe:	2f00      	cmp	r7, #0
 8011100:	d0a9      	beq.n	8011056 <__sflush_r+0x1a>
 8011102:	0793      	lsls	r3, r2, #30
 8011104:	680e      	ldr	r6, [r1, #0]
 8011106:	bf08      	it	eq
 8011108:	694b      	ldreq	r3, [r1, #20]
 801110a:	600f      	str	r7, [r1, #0]
 801110c:	bf18      	it	ne
 801110e:	2300      	movne	r3, #0
 8011110:	eba6 0807 	sub.w	r8, r6, r7
 8011114:	608b      	str	r3, [r1, #8]
 8011116:	f1b8 0f00 	cmp.w	r8, #0
 801111a:	dd9c      	ble.n	8011056 <__sflush_r+0x1a>
 801111c:	4643      	mov	r3, r8
 801111e:	463a      	mov	r2, r7
 8011120:	6a21      	ldr	r1, [r4, #32]
 8011122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011124:	4628      	mov	r0, r5
 8011126:	47b0      	blx	r6
 8011128:	2800      	cmp	r0, #0
 801112a:	dc06      	bgt.n	801113a <__sflush_r+0xfe>
 801112c:	89a3      	ldrh	r3, [r4, #12]
 801112e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011132:	81a3      	strh	r3, [r4, #12]
 8011134:	f04f 30ff 	mov.w	r0, #4294967295
 8011138:	e78e      	b.n	8011058 <__sflush_r+0x1c>
 801113a:	4407      	add	r7, r0
 801113c:	eba8 0800 	sub.w	r8, r8, r0
 8011140:	e7e9      	b.n	8011116 <__sflush_r+0xda>
 8011142:	bf00      	nop
 8011144:	20400001 	.word	0x20400001

08011148 <_fflush_r>:
 8011148:	b538      	push	{r3, r4, r5, lr}
 801114a:	690b      	ldr	r3, [r1, #16]
 801114c:	4605      	mov	r5, r0
 801114e:	460c      	mov	r4, r1
 8011150:	b1db      	cbz	r3, 801118a <_fflush_r+0x42>
 8011152:	b118      	cbz	r0, 801115c <_fflush_r+0x14>
 8011154:	6983      	ldr	r3, [r0, #24]
 8011156:	b90b      	cbnz	r3, 801115c <_fflush_r+0x14>
 8011158:	f000 f872 	bl	8011240 <__sinit>
 801115c:	4b0c      	ldr	r3, [pc, #48]	; (8011190 <_fflush_r+0x48>)
 801115e:	429c      	cmp	r4, r3
 8011160:	d109      	bne.n	8011176 <_fflush_r+0x2e>
 8011162:	686c      	ldr	r4, [r5, #4]
 8011164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011168:	b17b      	cbz	r3, 801118a <_fflush_r+0x42>
 801116a:	4621      	mov	r1, r4
 801116c:	4628      	mov	r0, r5
 801116e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011172:	f7ff bf63 	b.w	801103c <__sflush_r>
 8011176:	4b07      	ldr	r3, [pc, #28]	; (8011194 <_fflush_r+0x4c>)
 8011178:	429c      	cmp	r4, r3
 801117a:	d101      	bne.n	8011180 <_fflush_r+0x38>
 801117c:	68ac      	ldr	r4, [r5, #8]
 801117e:	e7f1      	b.n	8011164 <_fflush_r+0x1c>
 8011180:	4b05      	ldr	r3, [pc, #20]	; (8011198 <_fflush_r+0x50>)
 8011182:	429c      	cmp	r4, r3
 8011184:	bf08      	it	eq
 8011186:	68ec      	ldreq	r4, [r5, #12]
 8011188:	e7ec      	b.n	8011164 <_fflush_r+0x1c>
 801118a:	2000      	movs	r0, #0
 801118c:	bd38      	pop	{r3, r4, r5, pc}
 801118e:	bf00      	nop
 8011190:	080165b4 	.word	0x080165b4
 8011194:	080165d4 	.word	0x080165d4
 8011198:	08016594 	.word	0x08016594

0801119c <fflush>:
 801119c:	4601      	mov	r1, r0
 801119e:	b920      	cbnz	r0, 80111aa <fflush+0xe>
 80111a0:	4b04      	ldr	r3, [pc, #16]	; (80111b4 <fflush+0x18>)
 80111a2:	4905      	ldr	r1, [pc, #20]	; (80111b8 <fflush+0x1c>)
 80111a4:	6818      	ldr	r0, [r3, #0]
 80111a6:	f000 b8d3 	b.w	8011350 <_fwalk_reent>
 80111aa:	4b04      	ldr	r3, [pc, #16]	; (80111bc <fflush+0x20>)
 80111ac:	6818      	ldr	r0, [r3, #0]
 80111ae:	f7ff bfcb 	b.w	8011148 <_fflush_r>
 80111b2:	bf00      	nop
 80111b4:	080165f4 	.word	0x080165f4
 80111b8:	08011149 	.word	0x08011149
 80111bc:	20000038 	.word	0x20000038

080111c0 <std>:
 80111c0:	2300      	movs	r3, #0
 80111c2:	b510      	push	{r4, lr}
 80111c4:	4604      	mov	r4, r0
 80111c6:	e9c0 3300 	strd	r3, r3, [r0]
 80111ca:	6083      	str	r3, [r0, #8]
 80111cc:	8181      	strh	r1, [r0, #12]
 80111ce:	6643      	str	r3, [r0, #100]	; 0x64
 80111d0:	81c2      	strh	r2, [r0, #14]
 80111d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80111d6:	6183      	str	r3, [r0, #24]
 80111d8:	4619      	mov	r1, r3
 80111da:	2208      	movs	r2, #8
 80111dc:	305c      	adds	r0, #92	; 0x5c
 80111de:	f000 f968 	bl	80114b2 <memset>
 80111e2:	4b05      	ldr	r3, [pc, #20]	; (80111f8 <std+0x38>)
 80111e4:	6263      	str	r3, [r4, #36]	; 0x24
 80111e6:	4b05      	ldr	r3, [pc, #20]	; (80111fc <std+0x3c>)
 80111e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80111ea:	4b05      	ldr	r3, [pc, #20]	; (8011200 <std+0x40>)
 80111ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80111ee:	4b05      	ldr	r3, [pc, #20]	; (8011204 <std+0x44>)
 80111f0:	6224      	str	r4, [r4, #32]
 80111f2:	6323      	str	r3, [r4, #48]	; 0x30
 80111f4:	bd10      	pop	{r4, pc}
 80111f6:	bf00      	nop
 80111f8:	08012f69 	.word	0x08012f69
 80111fc:	08012f8b 	.word	0x08012f8b
 8011200:	08012fc3 	.word	0x08012fc3
 8011204:	08012fe7 	.word	0x08012fe7

08011208 <_cleanup_r>:
 8011208:	4901      	ldr	r1, [pc, #4]	; (8011210 <_cleanup_r+0x8>)
 801120a:	f000 b8a1 	b.w	8011350 <_fwalk_reent>
 801120e:	bf00      	nop
 8011210:	08011149 	.word	0x08011149

08011214 <__sfmoreglue>:
 8011214:	b570      	push	{r4, r5, r6, lr}
 8011216:	1e4a      	subs	r2, r1, #1
 8011218:	2568      	movs	r5, #104	; 0x68
 801121a:	4355      	muls	r5, r2
 801121c:	460e      	mov	r6, r1
 801121e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011222:	f000 f99d 	bl	8011560 <_malloc_r>
 8011226:	4604      	mov	r4, r0
 8011228:	b140      	cbz	r0, 801123c <__sfmoreglue+0x28>
 801122a:	2100      	movs	r1, #0
 801122c:	e9c0 1600 	strd	r1, r6, [r0]
 8011230:	300c      	adds	r0, #12
 8011232:	60a0      	str	r0, [r4, #8]
 8011234:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011238:	f000 f93b 	bl	80114b2 <memset>
 801123c:	4620      	mov	r0, r4
 801123e:	bd70      	pop	{r4, r5, r6, pc}

08011240 <__sinit>:
 8011240:	6983      	ldr	r3, [r0, #24]
 8011242:	b510      	push	{r4, lr}
 8011244:	4604      	mov	r4, r0
 8011246:	bb33      	cbnz	r3, 8011296 <__sinit+0x56>
 8011248:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801124c:	6503      	str	r3, [r0, #80]	; 0x50
 801124e:	4b12      	ldr	r3, [pc, #72]	; (8011298 <__sinit+0x58>)
 8011250:	4a12      	ldr	r2, [pc, #72]	; (801129c <__sinit+0x5c>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	6282      	str	r2, [r0, #40]	; 0x28
 8011256:	4298      	cmp	r0, r3
 8011258:	bf04      	itt	eq
 801125a:	2301      	moveq	r3, #1
 801125c:	6183      	streq	r3, [r0, #24]
 801125e:	f000 f81f 	bl	80112a0 <__sfp>
 8011262:	6060      	str	r0, [r4, #4]
 8011264:	4620      	mov	r0, r4
 8011266:	f000 f81b 	bl	80112a0 <__sfp>
 801126a:	60a0      	str	r0, [r4, #8]
 801126c:	4620      	mov	r0, r4
 801126e:	f000 f817 	bl	80112a0 <__sfp>
 8011272:	2200      	movs	r2, #0
 8011274:	60e0      	str	r0, [r4, #12]
 8011276:	2104      	movs	r1, #4
 8011278:	6860      	ldr	r0, [r4, #4]
 801127a:	f7ff ffa1 	bl	80111c0 <std>
 801127e:	2201      	movs	r2, #1
 8011280:	2109      	movs	r1, #9
 8011282:	68a0      	ldr	r0, [r4, #8]
 8011284:	f7ff ff9c 	bl	80111c0 <std>
 8011288:	2202      	movs	r2, #2
 801128a:	2112      	movs	r1, #18
 801128c:	68e0      	ldr	r0, [r4, #12]
 801128e:	f7ff ff97 	bl	80111c0 <std>
 8011292:	2301      	movs	r3, #1
 8011294:	61a3      	str	r3, [r4, #24]
 8011296:	bd10      	pop	{r4, pc}
 8011298:	080165f4 	.word	0x080165f4
 801129c:	08011209 	.word	0x08011209

080112a0 <__sfp>:
 80112a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112a2:	4b1b      	ldr	r3, [pc, #108]	; (8011310 <__sfp+0x70>)
 80112a4:	681e      	ldr	r6, [r3, #0]
 80112a6:	69b3      	ldr	r3, [r6, #24]
 80112a8:	4607      	mov	r7, r0
 80112aa:	b913      	cbnz	r3, 80112b2 <__sfp+0x12>
 80112ac:	4630      	mov	r0, r6
 80112ae:	f7ff ffc7 	bl	8011240 <__sinit>
 80112b2:	3648      	adds	r6, #72	; 0x48
 80112b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80112b8:	3b01      	subs	r3, #1
 80112ba:	d503      	bpl.n	80112c4 <__sfp+0x24>
 80112bc:	6833      	ldr	r3, [r6, #0]
 80112be:	b133      	cbz	r3, 80112ce <__sfp+0x2e>
 80112c0:	6836      	ldr	r6, [r6, #0]
 80112c2:	e7f7      	b.n	80112b4 <__sfp+0x14>
 80112c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80112c8:	b16d      	cbz	r5, 80112e6 <__sfp+0x46>
 80112ca:	3468      	adds	r4, #104	; 0x68
 80112cc:	e7f4      	b.n	80112b8 <__sfp+0x18>
 80112ce:	2104      	movs	r1, #4
 80112d0:	4638      	mov	r0, r7
 80112d2:	f7ff ff9f 	bl	8011214 <__sfmoreglue>
 80112d6:	6030      	str	r0, [r6, #0]
 80112d8:	2800      	cmp	r0, #0
 80112da:	d1f1      	bne.n	80112c0 <__sfp+0x20>
 80112dc:	230c      	movs	r3, #12
 80112de:	603b      	str	r3, [r7, #0]
 80112e0:	4604      	mov	r4, r0
 80112e2:	4620      	mov	r0, r4
 80112e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112e6:	4b0b      	ldr	r3, [pc, #44]	; (8011314 <__sfp+0x74>)
 80112e8:	6665      	str	r5, [r4, #100]	; 0x64
 80112ea:	e9c4 5500 	strd	r5, r5, [r4]
 80112ee:	60a5      	str	r5, [r4, #8]
 80112f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80112f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80112f8:	2208      	movs	r2, #8
 80112fa:	4629      	mov	r1, r5
 80112fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011300:	f000 f8d7 	bl	80114b2 <memset>
 8011304:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011308:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801130c:	e7e9      	b.n	80112e2 <__sfp+0x42>
 801130e:	bf00      	nop
 8011310:	080165f4 	.word	0x080165f4
 8011314:	ffff0001 	.word	0xffff0001

08011318 <_fwalk>:
 8011318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801131c:	4688      	mov	r8, r1
 801131e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011322:	2600      	movs	r6, #0
 8011324:	b914      	cbnz	r4, 801132c <_fwalk+0x14>
 8011326:	4630      	mov	r0, r6
 8011328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801132c:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011330:	3f01      	subs	r7, #1
 8011332:	d501      	bpl.n	8011338 <_fwalk+0x20>
 8011334:	6824      	ldr	r4, [r4, #0]
 8011336:	e7f5      	b.n	8011324 <_fwalk+0xc>
 8011338:	89ab      	ldrh	r3, [r5, #12]
 801133a:	2b01      	cmp	r3, #1
 801133c:	d906      	bls.n	801134c <_fwalk+0x34>
 801133e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011342:	3301      	adds	r3, #1
 8011344:	d002      	beq.n	801134c <_fwalk+0x34>
 8011346:	4628      	mov	r0, r5
 8011348:	47c0      	blx	r8
 801134a:	4306      	orrs	r6, r0
 801134c:	3568      	adds	r5, #104	; 0x68
 801134e:	e7ef      	b.n	8011330 <_fwalk+0x18>

08011350 <_fwalk_reent>:
 8011350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011354:	4680      	mov	r8, r0
 8011356:	4689      	mov	r9, r1
 8011358:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801135c:	2600      	movs	r6, #0
 801135e:	b914      	cbnz	r4, 8011366 <_fwalk_reent+0x16>
 8011360:	4630      	mov	r0, r6
 8011362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011366:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801136a:	3f01      	subs	r7, #1
 801136c:	d501      	bpl.n	8011372 <_fwalk_reent+0x22>
 801136e:	6824      	ldr	r4, [r4, #0]
 8011370:	e7f5      	b.n	801135e <_fwalk_reent+0xe>
 8011372:	89ab      	ldrh	r3, [r5, #12]
 8011374:	2b01      	cmp	r3, #1
 8011376:	d907      	bls.n	8011388 <_fwalk_reent+0x38>
 8011378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801137c:	3301      	adds	r3, #1
 801137e:	d003      	beq.n	8011388 <_fwalk_reent+0x38>
 8011380:	4629      	mov	r1, r5
 8011382:	4640      	mov	r0, r8
 8011384:	47c8      	blx	r9
 8011386:	4306      	orrs	r6, r0
 8011388:	3568      	adds	r5, #104	; 0x68
 801138a:	e7ee      	b.n	801136a <_fwalk_reent+0x1a>

0801138c <__libc_init_array>:
 801138c:	b570      	push	{r4, r5, r6, lr}
 801138e:	4e0d      	ldr	r6, [pc, #52]	; (80113c4 <__libc_init_array+0x38>)
 8011390:	4c0d      	ldr	r4, [pc, #52]	; (80113c8 <__libc_init_array+0x3c>)
 8011392:	1ba4      	subs	r4, r4, r6
 8011394:	10a4      	asrs	r4, r4, #2
 8011396:	2500      	movs	r5, #0
 8011398:	42a5      	cmp	r5, r4
 801139a:	d109      	bne.n	80113b0 <__libc_init_array+0x24>
 801139c:	4e0b      	ldr	r6, [pc, #44]	; (80113cc <__libc_init_array+0x40>)
 801139e:	4c0c      	ldr	r4, [pc, #48]	; (80113d0 <__libc_init_array+0x44>)
 80113a0:	f004 fed8 	bl	8016154 <_init>
 80113a4:	1ba4      	subs	r4, r4, r6
 80113a6:	10a4      	asrs	r4, r4, #2
 80113a8:	2500      	movs	r5, #0
 80113aa:	42a5      	cmp	r5, r4
 80113ac:	d105      	bne.n	80113ba <__libc_init_array+0x2e>
 80113ae:	bd70      	pop	{r4, r5, r6, pc}
 80113b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80113b4:	4798      	blx	r3
 80113b6:	3501      	adds	r5, #1
 80113b8:	e7ee      	b.n	8011398 <__libc_init_array+0xc>
 80113ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80113be:	4798      	blx	r3
 80113c0:	3501      	adds	r5, #1
 80113c2:	e7f2      	b.n	80113aa <__libc_init_array+0x1e>
 80113c4:	080168d0 	.word	0x080168d0
 80113c8:	080168d0 	.word	0x080168d0
 80113cc:	080168d0 	.word	0x080168d0
 80113d0:	080168d4 	.word	0x080168d4

080113d4 <__swhatbuf_r>:
 80113d4:	b570      	push	{r4, r5, r6, lr}
 80113d6:	460e      	mov	r6, r1
 80113d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113dc:	2900      	cmp	r1, #0
 80113de:	b096      	sub	sp, #88	; 0x58
 80113e0:	4614      	mov	r4, r2
 80113e2:	461d      	mov	r5, r3
 80113e4:	da07      	bge.n	80113f6 <__swhatbuf_r+0x22>
 80113e6:	2300      	movs	r3, #0
 80113e8:	602b      	str	r3, [r5, #0]
 80113ea:	89b3      	ldrh	r3, [r6, #12]
 80113ec:	061a      	lsls	r2, r3, #24
 80113ee:	d410      	bmi.n	8011412 <__swhatbuf_r+0x3e>
 80113f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113f4:	e00e      	b.n	8011414 <__swhatbuf_r+0x40>
 80113f6:	466a      	mov	r2, sp
 80113f8:	f003 fd06 	bl	8014e08 <_fstat_r>
 80113fc:	2800      	cmp	r0, #0
 80113fe:	dbf2      	blt.n	80113e6 <__swhatbuf_r+0x12>
 8011400:	9a01      	ldr	r2, [sp, #4]
 8011402:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011406:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801140a:	425a      	negs	r2, r3
 801140c:	415a      	adcs	r2, r3
 801140e:	602a      	str	r2, [r5, #0]
 8011410:	e7ee      	b.n	80113f0 <__swhatbuf_r+0x1c>
 8011412:	2340      	movs	r3, #64	; 0x40
 8011414:	2000      	movs	r0, #0
 8011416:	6023      	str	r3, [r4, #0]
 8011418:	b016      	add	sp, #88	; 0x58
 801141a:	bd70      	pop	{r4, r5, r6, pc}

0801141c <__smakebuf_r>:
 801141c:	898b      	ldrh	r3, [r1, #12]
 801141e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011420:	079d      	lsls	r5, r3, #30
 8011422:	4606      	mov	r6, r0
 8011424:	460c      	mov	r4, r1
 8011426:	d507      	bpl.n	8011438 <__smakebuf_r+0x1c>
 8011428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801142c:	6023      	str	r3, [r4, #0]
 801142e:	6123      	str	r3, [r4, #16]
 8011430:	2301      	movs	r3, #1
 8011432:	6163      	str	r3, [r4, #20]
 8011434:	b002      	add	sp, #8
 8011436:	bd70      	pop	{r4, r5, r6, pc}
 8011438:	ab01      	add	r3, sp, #4
 801143a:	466a      	mov	r2, sp
 801143c:	f7ff ffca 	bl	80113d4 <__swhatbuf_r>
 8011440:	9900      	ldr	r1, [sp, #0]
 8011442:	4605      	mov	r5, r0
 8011444:	4630      	mov	r0, r6
 8011446:	f000 f88b 	bl	8011560 <_malloc_r>
 801144a:	b948      	cbnz	r0, 8011460 <__smakebuf_r+0x44>
 801144c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011450:	059a      	lsls	r2, r3, #22
 8011452:	d4ef      	bmi.n	8011434 <__smakebuf_r+0x18>
 8011454:	f023 0303 	bic.w	r3, r3, #3
 8011458:	f043 0302 	orr.w	r3, r3, #2
 801145c:	81a3      	strh	r3, [r4, #12]
 801145e:	e7e3      	b.n	8011428 <__smakebuf_r+0xc>
 8011460:	4b0d      	ldr	r3, [pc, #52]	; (8011498 <__smakebuf_r+0x7c>)
 8011462:	62b3      	str	r3, [r6, #40]	; 0x28
 8011464:	89a3      	ldrh	r3, [r4, #12]
 8011466:	6020      	str	r0, [r4, #0]
 8011468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801146c:	81a3      	strh	r3, [r4, #12]
 801146e:	9b00      	ldr	r3, [sp, #0]
 8011470:	6163      	str	r3, [r4, #20]
 8011472:	9b01      	ldr	r3, [sp, #4]
 8011474:	6120      	str	r0, [r4, #16]
 8011476:	b15b      	cbz	r3, 8011490 <__smakebuf_r+0x74>
 8011478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801147c:	4630      	mov	r0, r6
 801147e:	f003 fffb 	bl	8015478 <_isatty_r>
 8011482:	b128      	cbz	r0, 8011490 <__smakebuf_r+0x74>
 8011484:	89a3      	ldrh	r3, [r4, #12]
 8011486:	f023 0303 	bic.w	r3, r3, #3
 801148a:	f043 0301 	orr.w	r3, r3, #1
 801148e:	81a3      	strh	r3, [r4, #12]
 8011490:	89a3      	ldrh	r3, [r4, #12]
 8011492:	431d      	orrs	r5, r3
 8011494:	81a5      	strh	r5, [r4, #12]
 8011496:	e7cd      	b.n	8011434 <__smakebuf_r+0x18>
 8011498:	08011209 	.word	0x08011209

0801149c <memcpy>:
 801149c:	b510      	push	{r4, lr}
 801149e:	1e43      	subs	r3, r0, #1
 80114a0:	440a      	add	r2, r1
 80114a2:	4291      	cmp	r1, r2
 80114a4:	d100      	bne.n	80114a8 <memcpy+0xc>
 80114a6:	bd10      	pop	{r4, pc}
 80114a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80114b0:	e7f7      	b.n	80114a2 <memcpy+0x6>

080114b2 <memset>:
 80114b2:	4402      	add	r2, r0
 80114b4:	4603      	mov	r3, r0
 80114b6:	4293      	cmp	r3, r2
 80114b8:	d100      	bne.n	80114bc <memset+0xa>
 80114ba:	4770      	bx	lr
 80114bc:	f803 1b01 	strb.w	r1, [r3], #1
 80114c0:	e7f9      	b.n	80114b6 <memset+0x4>
	...

080114c4 <_free_r>:
 80114c4:	b538      	push	{r3, r4, r5, lr}
 80114c6:	4605      	mov	r5, r0
 80114c8:	2900      	cmp	r1, #0
 80114ca:	d045      	beq.n	8011558 <_free_r+0x94>
 80114cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114d0:	1f0c      	subs	r4, r1, #4
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	bfb8      	it	lt
 80114d6:	18e4      	addlt	r4, r4, r3
 80114d8:	f004 f845 	bl	8015566 <__malloc_lock>
 80114dc:	4a1f      	ldr	r2, [pc, #124]	; (801155c <_free_r+0x98>)
 80114de:	6813      	ldr	r3, [r2, #0]
 80114e0:	4610      	mov	r0, r2
 80114e2:	b933      	cbnz	r3, 80114f2 <_free_r+0x2e>
 80114e4:	6063      	str	r3, [r4, #4]
 80114e6:	6014      	str	r4, [r2, #0]
 80114e8:	4628      	mov	r0, r5
 80114ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114ee:	f004 b83b 	b.w	8015568 <__malloc_unlock>
 80114f2:	42a3      	cmp	r3, r4
 80114f4:	d90c      	bls.n	8011510 <_free_r+0x4c>
 80114f6:	6821      	ldr	r1, [r4, #0]
 80114f8:	1862      	adds	r2, r4, r1
 80114fa:	4293      	cmp	r3, r2
 80114fc:	bf04      	itt	eq
 80114fe:	681a      	ldreq	r2, [r3, #0]
 8011500:	685b      	ldreq	r3, [r3, #4]
 8011502:	6063      	str	r3, [r4, #4]
 8011504:	bf04      	itt	eq
 8011506:	1852      	addeq	r2, r2, r1
 8011508:	6022      	streq	r2, [r4, #0]
 801150a:	6004      	str	r4, [r0, #0]
 801150c:	e7ec      	b.n	80114e8 <_free_r+0x24>
 801150e:	4613      	mov	r3, r2
 8011510:	685a      	ldr	r2, [r3, #4]
 8011512:	b10a      	cbz	r2, 8011518 <_free_r+0x54>
 8011514:	42a2      	cmp	r2, r4
 8011516:	d9fa      	bls.n	801150e <_free_r+0x4a>
 8011518:	6819      	ldr	r1, [r3, #0]
 801151a:	1858      	adds	r0, r3, r1
 801151c:	42a0      	cmp	r0, r4
 801151e:	d10b      	bne.n	8011538 <_free_r+0x74>
 8011520:	6820      	ldr	r0, [r4, #0]
 8011522:	4401      	add	r1, r0
 8011524:	1858      	adds	r0, r3, r1
 8011526:	4282      	cmp	r2, r0
 8011528:	6019      	str	r1, [r3, #0]
 801152a:	d1dd      	bne.n	80114e8 <_free_r+0x24>
 801152c:	6810      	ldr	r0, [r2, #0]
 801152e:	6852      	ldr	r2, [r2, #4]
 8011530:	605a      	str	r2, [r3, #4]
 8011532:	4401      	add	r1, r0
 8011534:	6019      	str	r1, [r3, #0]
 8011536:	e7d7      	b.n	80114e8 <_free_r+0x24>
 8011538:	d902      	bls.n	8011540 <_free_r+0x7c>
 801153a:	230c      	movs	r3, #12
 801153c:	602b      	str	r3, [r5, #0]
 801153e:	e7d3      	b.n	80114e8 <_free_r+0x24>
 8011540:	6820      	ldr	r0, [r4, #0]
 8011542:	1821      	adds	r1, r4, r0
 8011544:	428a      	cmp	r2, r1
 8011546:	bf04      	itt	eq
 8011548:	6811      	ldreq	r1, [r2, #0]
 801154a:	6852      	ldreq	r2, [r2, #4]
 801154c:	6062      	str	r2, [r4, #4]
 801154e:	bf04      	itt	eq
 8011550:	1809      	addeq	r1, r1, r0
 8011552:	6021      	streq	r1, [r4, #0]
 8011554:	605c      	str	r4, [r3, #4]
 8011556:	e7c7      	b.n	80114e8 <_free_r+0x24>
 8011558:	bd38      	pop	{r3, r4, r5, pc}
 801155a:	bf00      	nop
 801155c:	200004e4 	.word	0x200004e4

08011560 <_malloc_r>:
 8011560:	b570      	push	{r4, r5, r6, lr}
 8011562:	1ccd      	adds	r5, r1, #3
 8011564:	f025 0503 	bic.w	r5, r5, #3
 8011568:	3508      	adds	r5, #8
 801156a:	2d0c      	cmp	r5, #12
 801156c:	bf38      	it	cc
 801156e:	250c      	movcc	r5, #12
 8011570:	2d00      	cmp	r5, #0
 8011572:	4606      	mov	r6, r0
 8011574:	db01      	blt.n	801157a <_malloc_r+0x1a>
 8011576:	42a9      	cmp	r1, r5
 8011578:	d903      	bls.n	8011582 <_malloc_r+0x22>
 801157a:	230c      	movs	r3, #12
 801157c:	6033      	str	r3, [r6, #0]
 801157e:	2000      	movs	r0, #0
 8011580:	bd70      	pop	{r4, r5, r6, pc}
 8011582:	f003 fff0 	bl	8015566 <__malloc_lock>
 8011586:	4a21      	ldr	r2, [pc, #132]	; (801160c <_malloc_r+0xac>)
 8011588:	6814      	ldr	r4, [r2, #0]
 801158a:	4621      	mov	r1, r4
 801158c:	b991      	cbnz	r1, 80115b4 <_malloc_r+0x54>
 801158e:	4c20      	ldr	r4, [pc, #128]	; (8011610 <_malloc_r+0xb0>)
 8011590:	6823      	ldr	r3, [r4, #0]
 8011592:	b91b      	cbnz	r3, 801159c <_malloc_r+0x3c>
 8011594:	4630      	mov	r0, r6
 8011596:	f001 fbb1 	bl	8012cfc <_sbrk_r>
 801159a:	6020      	str	r0, [r4, #0]
 801159c:	4629      	mov	r1, r5
 801159e:	4630      	mov	r0, r6
 80115a0:	f001 fbac 	bl	8012cfc <_sbrk_r>
 80115a4:	1c43      	adds	r3, r0, #1
 80115a6:	d124      	bne.n	80115f2 <_malloc_r+0x92>
 80115a8:	230c      	movs	r3, #12
 80115aa:	6033      	str	r3, [r6, #0]
 80115ac:	4630      	mov	r0, r6
 80115ae:	f003 ffdb 	bl	8015568 <__malloc_unlock>
 80115b2:	e7e4      	b.n	801157e <_malloc_r+0x1e>
 80115b4:	680b      	ldr	r3, [r1, #0]
 80115b6:	1b5b      	subs	r3, r3, r5
 80115b8:	d418      	bmi.n	80115ec <_malloc_r+0x8c>
 80115ba:	2b0b      	cmp	r3, #11
 80115bc:	d90f      	bls.n	80115de <_malloc_r+0x7e>
 80115be:	600b      	str	r3, [r1, #0]
 80115c0:	50cd      	str	r5, [r1, r3]
 80115c2:	18cc      	adds	r4, r1, r3
 80115c4:	4630      	mov	r0, r6
 80115c6:	f003 ffcf 	bl	8015568 <__malloc_unlock>
 80115ca:	f104 000b 	add.w	r0, r4, #11
 80115ce:	1d23      	adds	r3, r4, #4
 80115d0:	f020 0007 	bic.w	r0, r0, #7
 80115d4:	1ac3      	subs	r3, r0, r3
 80115d6:	d0d3      	beq.n	8011580 <_malloc_r+0x20>
 80115d8:	425a      	negs	r2, r3
 80115da:	50e2      	str	r2, [r4, r3]
 80115dc:	e7d0      	b.n	8011580 <_malloc_r+0x20>
 80115de:	428c      	cmp	r4, r1
 80115e0:	684b      	ldr	r3, [r1, #4]
 80115e2:	bf16      	itet	ne
 80115e4:	6063      	strne	r3, [r4, #4]
 80115e6:	6013      	streq	r3, [r2, #0]
 80115e8:	460c      	movne	r4, r1
 80115ea:	e7eb      	b.n	80115c4 <_malloc_r+0x64>
 80115ec:	460c      	mov	r4, r1
 80115ee:	6849      	ldr	r1, [r1, #4]
 80115f0:	e7cc      	b.n	801158c <_malloc_r+0x2c>
 80115f2:	1cc4      	adds	r4, r0, #3
 80115f4:	f024 0403 	bic.w	r4, r4, #3
 80115f8:	42a0      	cmp	r0, r4
 80115fa:	d005      	beq.n	8011608 <_malloc_r+0xa8>
 80115fc:	1a21      	subs	r1, r4, r0
 80115fe:	4630      	mov	r0, r6
 8011600:	f001 fb7c 	bl	8012cfc <_sbrk_r>
 8011604:	3001      	adds	r0, #1
 8011606:	d0cf      	beq.n	80115a8 <_malloc_r+0x48>
 8011608:	6025      	str	r5, [r4, #0]
 801160a:	e7db      	b.n	80115c4 <_malloc_r+0x64>
 801160c:	200004e4 	.word	0x200004e4
 8011610:	200004e8 	.word	0x200004e8

08011614 <__sfputc_r>:
 8011614:	6893      	ldr	r3, [r2, #8]
 8011616:	3b01      	subs	r3, #1
 8011618:	2b00      	cmp	r3, #0
 801161a:	b410      	push	{r4}
 801161c:	6093      	str	r3, [r2, #8]
 801161e:	da08      	bge.n	8011632 <__sfputc_r+0x1e>
 8011620:	6994      	ldr	r4, [r2, #24]
 8011622:	42a3      	cmp	r3, r4
 8011624:	db01      	blt.n	801162a <__sfputc_r+0x16>
 8011626:	290a      	cmp	r1, #10
 8011628:	d103      	bne.n	8011632 <__sfputc_r+0x1e>
 801162a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801162e:	f002 bcc5 	b.w	8013fbc <__swbuf_r>
 8011632:	6813      	ldr	r3, [r2, #0]
 8011634:	1c58      	adds	r0, r3, #1
 8011636:	6010      	str	r0, [r2, #0]
 8011638:	7019      	strb	r1, [r3, #0]
 801163a:	4608      	mov	r0, r1
 801163c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011640:	4770      	bx	lr

08011642 <__sfputs_r>:
 8011642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011644:	4606      	mov	r6, r0
 8011646:	460f      	mov	r7, r1
 8011648:	4614      	mov	r4, r2
 801164a:	18d5      	adds	r5, r2, r3
 801164c:	42ac      	cmp	r4, r5
 801164e:	d101      	bne.n	8011654 <__sfputs_r+0x12>
 8011650:	2000      	movs	r0, #0
 8011652:	e007      	b.n	8011664 <__sfputs_r+0x22>
 8011654:	463a      	mov	r2, r7
 8011656:	f814 1b01 	ldrb.w	r1, [r4], #1
 801165a:	4630      	mov	r0, r6
 801165c:	f7ff ffda 	bl	8011614 <__sfputc_r>
 8011660:	1c43      	adds	r3, r0, #1
 8011662:	d1f3      	bne.n	801164c <__sfputs_r+0xa>
 8011664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011668 <_vfiprintf_r>:
 8011668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801166c:	460c      	mov	r4, r1
 801166e:	b09d      	sub	sp, #116	; 0x74
 8011670:	4617      	mov	r7, r2
 8011672:	461d      	mov	r5, r3
 8011674:	4606      	mov	r6, r0
 8011676:	b118      	cbz	r0, 8011680 <_vfiprintf_r+0x18>
 8011678:	6983      	ldr	r3, [r0, #24]
 801167a:	b90b      	cbnz	r3, 8011680 <_vfiprintf_r+0x18>
 801167c:	f7ff fde0 	bl	8011240 <__sinit>
 8011680:	4b7c      	ldr	r3, [pc, #496]	; (8011874 <_vfiprintf_r+0x20c>)
 8011682:	429c      	cmp	r4, r3
 8011684:	d158      	bne.n	8011738 <_vfiprintf_r+0xd0>
 8011686:	6874      	ldr	r4, [r6, #4]
 8011688:	89a3      	ldrh	r3, [r4, #12]
 801168a:	0718      	lsls	r0, r3, #28
 801168c:	d55e      	bpl.n	801174c <_vfiprintf_r+0xe4>
 801168e:	6923      	ldr	r3, [r4, #16]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d05b      	beq.n	801174c <_vfiprintf_r+0xe4>
 8011694:	2300      	movs	r3, #0
 8011696:	9309      	str	r3, [sp, #36]	; 0x24
 8011698:	2320      	movs	r3, #32
 801169a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801169e:	2330      	movs	r3, #48	; 0x30
 80116a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116a4:	9503      	str	r5, [sp, #12]
 80116a6:	f04f 0b01 	mov.w	fp, #1
 80116aa:	46b8      	mov	r8, r7
 80116ac:	4645      	mov	r5, r8
 80116ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80116b2:	b10b      	cbz	r3, 80116b8 <_vfiprintf_r+0x50>
 80116b4:	2b25      	cmp	r3, #37	; 0x25
 80116b6:	d154      	bne.n	8011762 <_vfiprintf_r+0xfa>
 80116b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80116bc:	d00b      	beq.n	80116d6 <_vfiprintf_r+0x6e>
 80116be:	4653      	mov	r3, sl
 80116c0:	463a      	mov	r2, r7
 80116c2:	4621      	mov	r1, r4
 80116c4:	4630      	mov	r0, r6
 80116c6:	f7ff ffbc 	bl	8011642 <__sfputs_r>
 80116ca:	3001      	adds	r0, #1
 80116cc:	f000 80c2 	beq.w	8011854 <_vfiprintf_r+0x1ec>
 80116d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116d2:	4453      	add	r3, sl
 80116d4:	9309      	str	r3, [sp, #36]	; 0x24
 80116d6:	f898 3000 	ldrb.w	r3, [r8]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	f000 80ba 	beq.w	8011854 <_vfiprintf_r+0x1ec>
 80116e0:	2300      	movs	r3, #0
 80116e2:	f04f 32ff 	mov.w	r2, #4294967295
 80116e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116ea:	9304      	str	r3, [sp, #16]
 80116ec:	9307      	str	r3, [sp, #28]
 80116ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80116f2:	931a      	str	r3, [sp, #104]	; 0x68
 80116f4:	46a8      	mov	r8, r5
 80116f6:	2205      	movs	r2, #5
 80116f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80116fc:	485e      	ldr	r0, [pc, #376]	; (8011878 <_vfiprintf_r+0x210>)
 80116fe:	f7f6 fca7 	bl	8008050 <memchr>
 8011702:	9b04      	ldr	r3, [sp, #16]
 8011704:	bb78      	cbnz	r0, 8011766 <_vfiprintf_r+0xfe>
 8011706:	06d9      	lsls	r1, r3, #27
 8011708:	bf44      	itt	mi
 801170a:	2220      	movmi	r2, #32
 801170c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011710:	071a      	lsls	r2, r3, #28
 8011712:	bf44      	itt	mi
 8011714:	222b      	movmi	r2, #43	; 0x2b
 8011716:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801171a:	782a      	ldrb	r2, [r5, #0]
 801171c:	2a2a      	cmp	r2, #42	; 0x2a
 801171e:	d02a      	beq.n	8011776 <_vfiprintf_r+0x10e>
 8011720:	9a07      	ldr	r2, [sp, #28]
 8011722:	46a8      	mov	r8, r5
 8011724:	2000      	movs	r0, #0
 8011726:	250a      	movs	r5, #10
 8011728:	4641      	mov	r1, r8
 801172a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801172e:	3b30      	subs	r3, #48	; 0x30
 8011730:	2b09      	cmp	r3, #9
 8011732:	d969      	bls.n	8011808 <_vfiprintf_r+0x1a0>
 8011734:	b360      	cbz	r0, 8011790 <_vfiprintf_r+0x128>
 8011736:	e024      	b.n	8011782 <_vfiprintf_r+0x11a>
 8011738:	4b50      	ldr	r3, [pc, #320]	; (801187c <_vfiprintf_r+0x214>)
 801173a:	429c      	cmp	r4, r3
 801173c:	d101      	bne.n	8011742 <_vfiprintf_r+0xda>
 801173e:	68b4      	ldr	r4, [r6, #8]
 8011740:	e7a2      	b.n	8011688 <_vfiprintf_r+0x20>
 8011742:	4b4f      	ldr	r3, [pc, #316]	; (8011880 <_vfiprintf_r+0x218>)
 8011744:	429c      	cmp	r4, r3
 8011746:	bf08      	it	eq
 8011748:	68f4      	ldreq	r4, [r6, #12]
 801174a:	e79d      	b.n	8011688 <_vfiprintf_r+0x20>
 801174c:	4621      	mov	r1, r4
 801174e:	4630      	mov	r0, r6
 8011750:	f002 fc98 	bl	8014084 <__swsetup_r>
 8011754:	2800      	cmp	r0, #0
 8011756:	d09d      	beq.n	8011694 <_vfiprintf_r+0x2c>
 8011758:	f04f 30ff 	mov.w	r0, #4294967295
 801175c:	b01d      	add	sp, #116	; 0x74
 801175e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011762:	46a8      	mov	r8, r5
 8011764:	e7a2      	b.n	80116ac <_vfiprintf_r+0x44>
 8011766:	4a44      	ldr	r2, [pc, #272]	; (8011878 <_vfiprintf_r+0x210>)
 8011768:	1a80      	subs	r0, r0, r2
 801176a:	fa0b f000 	lsl.w	r0, fp, r0
 801176e:	4318      	orrs	r0, r3
 8011770:	9004      	str	r0, [sp, #16]
 8011772:	4645      	mov	r5, r8
 8011774:	e7be      	b.n	80116f4 <_vfiprintf_r+0x8c>
 8011776:	9a03      	ldr	r2, [sp, #12]
 8011778:	1d11      	adds	r1, r2, #4
 801177a:	6812      	ldr	r2, [r2, #0]
 801177c:	9103      	str	r1, [sp, #12]
 801177e:	2a00      	cmp	r2, #0
 8011780:	db01      	blt.n	8011786 <_vfiprintf_r+0x11e>
 8011782:	9207      	str	r2, [sp, #28]
 8011784:	e004      	b.n	8011790 <_vfiprintf_r+0x128>
 8011786:	4252      	negs	r2, r2
 8011788:	f043 0302 	orr.w	r3, r3, #2
 801178c:	9207      	str	r2, [sp, #28]
 801178e:	9304      	str	r3, [sp, #16]
 8011790:	f898 3000 	ldrb.w	r3, [r8]
 8011794:	2b2e      	cmp	r3, #46	; 0x2e
 8011796:	d10e      	bne.n	80117b6 <_vfiprintf_r+0x14e>
 8011798:	f898 3001 	ldrb.w	r3, [r8, #1]
 801179c:	2b2a      	cmp	r3, #42	; 0x2a
 801179e:	d138      	bne.n	8011812 <_vfiprintf_r+0x1aa>
 80117a0:	9b03      	ldr	r3, [sp, #12]
 80117a2:	1d1a      	adds	r2, r3, #4
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	9203      	str	r2, [sp, #12]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	bfb8      	it	lt
 80117ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80117b0:	f108 0802 	add.w	r8, r8, #2
 80117b4:	9305      	str	r3, [sp, #20]
 80117b6:	4d33      	ldr	r5, [pc, #204]	; (8011884 <_vfiprintf_r+0x21c>)
 80117b8:	f898 1000 	ldrb.w	r1, [r8]
 80117bc:	2203      	movs	r2, #3
 80117be:	4628      	mov	r0, r5
 80117c0:	f7f6 fc46 	bl	8008050 <memchr>
 80117c4:	b140      	cbz	r0, 80117d8 <_vfiprintf_r+0x170>
 80117c6:	2340      	movs	r3, #64	; 0x40
 80117c8:	1b40      	subs	r0, r0, r5
 80117ca:	fa03 f000 	lsl.w	r0, r3, r0
 80117ce:	9b04      	ldr	r3, [sp, #16]
 80117d0:	4303      	orrs	r3, r0
 80117d2:	f108 0801 	add.w	r8, r8, #1
 80117d6:	9304      	str	r3, [sp, #16]
 80117d8:	f898 1000 	ldrb.w	r1, [r8]
 80117dc:	482a      	ldr	r0, [pc, #168]	; (8011888 <_vfiprintf_r+0x220>)
 80117de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117e2:	2206      	movs	r2, #6
 80117e4:	f108 0701 	add.w	r7, r8, #1
 80117e8:	f7f6 fc32 	bl	8008050 <memchr>
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d037      	beq.n	8011860 <_vfiprintf_r+0x1f8>
 80117f0:	4b26      	ldr	r3, [pc, #152]	; (801188c <_vfiprintf_r+0x224>)
 80117f2:	bb1b      	cbnz	r3, 801183c <_vfiprintf_r+0x1d4>
 80117f4:	9b03      	ldr	r3, [sp, #12]
 80117f6:	3307      	adds	r3, #7
 80117f8:	f023 0307 	bic.w	r3, r3, #7
 80117fc:	3308      	adds	r3, #8
 80117fe:	9303      	str	r3, [sp, #12]
 8011800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011802:	444b      	add	r3, r9
 8011804:	9309      	str	r3, [sp, #36]	; 0x24
 8011806:	e750      	b.n	80116aa <_vfiprintf_r+0x42>
 8011808:	fb05 3202 	mla	r2, r5, r2, r3
 801180c:	2001      	movs	r0, #1
 801180e:	4688      	mov	r8, r1
 8011810:	e78a      	b.n	8011728 <_vfiprintf_r+0xc0>
 8011812:	2300      	movs	r3, #0
 8011814:	f108 0801 	add.w	r8, r8, #1
 8011818:	9305      	str	r3, [sp, #20]
 801181a:	4619      	mov	r1, r3
 801181c:	250a      	movs	r5, #10
 801181e:	4640      	mov	r0, r8
 8011820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011824:	3a30      	subs	r2, #48	; 0x30
 8011826:	2a09      	cmp	r2, #9
 8011828:	d903      	bls.n	8011832 <_vfiprintf_r+0x1ca>
 801182a:	2b00      	cmp	r3, #0
 801182c:	d0c3      	beq.n	80117b6 <_vfiprintf_r+0x14e>
 801182e:	9105      	str	r1, [sp, #20]
 8011830:	e7c1      	b.n	80117b6 <_vfiprintf_r+0x14e>
 8011832:	fb05 2101 	mla	r1, r5, r1, r2
 8011836:	2301      	movs	r3, #1
 8011838:	4680      	mov	r8, r0
 801183a:	e7f0      	b.n	801181e <_vfiprintf_r+0x1b6>
 801183c:	ab03      	add	r3, sp, #12
 801183e:	9300      	str	r3, [sp, #0]
 8011840:	4622      	mov	r2, r4
 8011842:	4b13      	ldr	r3, [pc, #76]	; (8011890 <_vfiprintf_r+0x228>)
 8011844:	a904      	add	r1, sp, #16
 8011846:	4630      	mov	r0, r6
 8011848:	f000 f8b8 	bl	80119bc <_printf_float>
 801184c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011850:	4681      	mov	r9, r0
 8011852:	d1d5      	bne.n	8011800 <_vfiprintf_r+0x198>
 8011854:	89a3      	ldrh	r3, [r4, #12]
 8011856:	065b      	lsls	r3, r3, #25
 8011858:	f53f af7e 	bmi.w	8011758 <_vfiprintf_r+0xf0>
 801185c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801185e:	e77d      	b.n	801175c <_vfiprintf_r+0xf4>
 8011860:	ab03      	add	r3, sp, #12
 8011862:	9300      	str	r3, [sp, #0]
 8011864:	4622      	mov	r2, r4
 8011866:	4b0a      	ldr	r3, [pc, #40]	; (8011890 <_vfiprintf_r+0x228>)
 8011868:	a904      	add	r1, sp, #16
 801186a:	4630      	mov	r0, r6
 801186c:	f000 fb5c 	bl	8011f28 <_printf_i>
 8011870:	e7ec      	b.n	801184c <_vfiprintf_r+0x1e4>
 8011872:	bf00      	nop
 8011874:	080165b4 	.word	0x080165b4
 8011878:	080165f8 	.word	0x080165f8
 801187c:	080165d4 	.word	0x080165d4
 8011880:	08016594 	.word	0x08016594
 8011884:	080165fe 	.word	0x080165fe
 8011888:	08016602 	.word	0x08016602
 801188c:	080119bd 	.word	0x080119bd
 8011890:	08011643 	.word	0x08011643

08011894 <__cvt>:
 8011894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011898:	ec55 4b10 	vmov	r4, r5, d0
 801189c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801189e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80118a2:	2d00      	cmp	r5, #0
 80118a4:	460e      	mov	r6, r1
 80118a6:	4691      	mov	r9, r2
 80118a8:	4619      	mov	r1, r3
 80118aa:	bfb8      	it	lt
 80118ac:	4622      	movlt	r2, r4
 80118ae:	462b      	mov	r3, r5
 80118b0:	f027 0720 	bic.w	r7, r7, #32
 80118b4:	bfbb      	ittet	lt
 80118b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80118ba:	461d      	movlt	r5, r3
 80118bc:	2300      	movge	r3, #0
 80118be:	232d      	movlt	r3, #45	; 0x2d
 80118c0:	bfb8      	it	lt
 80118c2:	4614      	movlt	r4, r2
 80118c4:	2f46      	cmp	r7, #70	; 0x46
 80118c6:	700b      	strb	r3, [r1, #0]
 80118c8:	d004      	beq.n	80118d4 <__cvt+0x40>
 80118ca:	2f45      	cmp	r7, #69	; 0x45
 80118cc:	d100      	bne.n	80118d0 <__cvt+0x3c>
 80118ce:	3601      	adds	r6, #1
 80118d0:	2102      	movs	r1, #2
 80118d2:	e000      	b.n	80118d6 <__cvt+0x42>
 80118d4:	2103      	movs	r1, #3
 80118d6:	ab03      	add	r3, sp, #12
 80118d8:	9301      	str	r3, [sp, #4]
 80118da:	ab02      	add	r3, sp, #8
 80118dc:	9300      	str	r3, [sp, #0]
 80118de:	4632      	mov	r2, r6
 80118e0:	4653      	mov	r3, sl
 80118e2:	ec45 4b10 	vmov	d0, r4, r5
 80118e6:	f002 fcd7 	bl	8014298 <_dtoa_r>
 80118ea:	2f47      	cmp	r7, #71	; 0x47
 80118ec:	4680      	mov	r8, r0
 80118ee:	d102      	bne.n	80118f6 <__cvt+0x62>
 80118f0:	f019 0f01 	tst.w	r9, #1
 80118f4:	d026      	beq.n	8011944 <__cvt+0xb0>
 80118f6:	2f46      	cmp	r7, #70	; 0x46
 80118f8:	eb08 0906 	add.w	r9, r8, r6
 80118fc:	d111      	bne.n	8011922 <__cvt+0x8e>
 80118fe:	f898 3000 	ldrb.w	r3, [r8]
 8011902:	2b30      	cmp	r3, #48	; 0x30
 8011904:	d10a      	bne.n	801191c <__cvt+0x88>
 8011906:	2200      	movs	r2, #0
 8011908:	2300      	movs	r3, #0
 801190a:	4620      	mov	r0, r4
 801190c:	4629      	mov	r1, r5
 801190e:	f7f7 f813 	bl	8008938 <__aeabi_dcmpeq>
 8011912:	b918      	cbnz	r0, 801191c <__cvt+0x88>
 8011914:	f1c6 0601 	rsb	r6, r6, #1
 8011918:	f8ca 6000 	str.w	r6, [sl]
 801191c:	f8da 3000 	ldr.w	r3, [sl]
 8011920:	4499      	add	r9, r3
 8011922:	2200      	movs	r2, #0
 8011924:	2300      	movs	r3, #0
 8011926:	4620      	mov	r0, r4
 8011928:	4629      	mov	r1, r5
 801192a:	f7f7 f805 	bl	8008938 <__aeabi_dcmpeq>
 801192e:	b938      	cbnz	r0, 8011940 <__cvt+0xac>
 8011930:	2230      	movs	r2, #48	; 0x30
 8011932:	9b03      	ldr	r3, [sp, #12]
 8011934:	454b      	cmp	r3, r9
 8011936:	d205      	bcs.n	8011944 <__cvt+0xb0>
 8011938:	1c59      	adds	r1, r3, #1
 801193a:	9103      	str	r1, [sp, #12]
 801193c:	701a      	strb	r2, [r3, #0]
 801193e:	e7f8      	b.n	8011932 <__cvt+0x9e>
 8011940:	f8cd 900c 	str.w	r9, [sp, #12]
 8011944:	9b03      	ldr	r3, [sp, #12]
 8011946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011948:	eba3 0308 	sub.w	r3, r3, r8
 801194c:	4640      	mov	r0, r8
 801194e:	6013      	str	r3, [r2, #0]
 8011950:	b004      	add	sp, #16
 8011952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011956 <__exponent>:
 8011956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011958:	2900      	cmp	r1, #0
 801195a:	4604      	mov	r4, r0
 801195c:	bfba      	itte	lt
 801195e:	4249      	neglt	r1, r1
 8011960:	232d      	movlt	r3, #45	; 0x2d
 8011962:	232b      	movge	r3, #43	; 0x2b
 8011964:	2909      	cmp	r1, #9
 8011966:	f804 2b02 	strb.w	r2, [r4], #2
 801196a:	7043      	strb	r3, [r0, #1]
 801196c:	dd20      	ble.n	80119b0 <__exponent+0x5a>
 801196e:	f10d 0307 	add.w	r3, sp, #7
 8011972:	461f      	mov	r7, r3
 8011974:	260a      	movs	r6, #10
 8011976:	fb91 f5f6 	sdiv	r5, r1, r6
 801197a:	fb06 1115 	mls	r1, r6, r5, r1
 801197e:	3130      	adds	r1, #48	; 0x30
 8011980:	2d09      	cmp	r5, #9
 8011982:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011986:	f103 32ff 	add.w	r2, r3, #4294967295
 801198a:	4629      	mov	r1, r5
 801198c:	dc09      	bgt.n	80119a2 <__exponent+0x4c>
 801198e:	3130      	adds	r1, #48	; 0x30
 8011990:	3b02      	subs	r3, #2
 8011992:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011996:	42bb      	cmp	r3, r7
 8011998:	4622      	mov	r2, r4
 801199a:	d304      	bcc.n	80119a6 <__exponent+0x50>
 801199c:	1a10      	subs	r0, r2, r0
 801199e:	b003      	add	sp, #12
 80119a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119a2:	4613      	mov	r3, r2
 80119a4:	e7e7      	b.n	8011976 <__exponent+0x20>
 80119a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119aa:	f804 2b01 	strb.w	r2, [r4], #1
 80119ae:	e7f2      	b.n	8011996 <__exponent+0x40>
 80119b0:	2330      	movs	r3, #48	; 0x30
 80119b2:	4419      	add	r1, r3
 80119b4:	7083      	strb	r3, [r0, #2]
 80119b6:	1d02      	adds	r2, r0, #4
 80119b8:	70c1      	strb	r1, [r0, #3]
 80119ba:	e7ef      	b.n	801199c <__exponent+0x46>

080119bc <_printf_float>:
 80119bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c0:	b08d      	sub	sp, #52	; 0x34
 80119c2:	460c      	mov	r4, r1
 80119c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80119c8:	4616      	mov	r6, r2
 80119ca:	461f      	mov	r7, r3
 80119cc:	4605      	mov	r5, r0
 80119ce:	f003 fd77 	bl	80154c0 <_localeconv_r>
 80119d2:	6803      	ldr	r3, [r0, #0]
 80119d4:	9304      	str	r3, [sp, #16]
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7f6 fb32 	bl	8008040 <strlen>
 80119dc:	2300      	movs	r3, #0
 80119de:	930a      	str	r3, [sp, #40]	; 0x28
 80119e0:	f8d8 3000 	ldr.w	r3, [r8]
 80119e4:	9005      	str	r0, [sp, #20]
 80119e6:	3307      	adds	r3, #7
 80119e8:	f023 0307 	bic.w	r3, r3, #7
 80119ec:	f103 0208 	add.w	r2, r3, #8
 80119f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80119f4:	f8d4 b000 	ldr.w	fp, [r4]
 80119f8:	f8c8 2000 	str.w	r2, [r8]
 80119fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a00:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011a04:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011a08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011a0c:	9307      	str	r3, [sp, #28]
 8011a0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8011a12:	f04f 32ff 	mov.w	r2, #4294967295
 8011a16:	4ba7      	ldr	r3, [pc, #668]	; (8011cb4 <_printf_float+0x2f8>)
 8011a18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a1c:	f7f6 ffbe 	bl	800899c <__aeabi_dcmpun>
 8011a20:	bb70      	cbnz	r0, 8011a80 <_printf_float+0xc4>
 8011a22:	f04f 32ff 	mov.w	r2, #4294967295
 8011a26:	4ba3      	ldr	r3, [pc, #652]	; (8011cb4 <_printf_float+0x2f8>)
 8011a28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a2c:	f7f6 ff98 	bl	8008960 <__aeabi_dcmple>
 8011a30:	bb30      	cbnz	r0, 8011a80 <_printf_float+0xc4>
 8011a32:	2200      	movs	r2, #0
 8011a34:	2300      	movs	r3, #0
 8011a36:	4640      	mov	r0, r8
 8011a38:	4649      	mov	r1, r9
 8011a3a:	f7f6 ff87 	bl	800894c <__aeabi_dcmplt>
 8011a3e:	b110      	cbz	r0, 8011a46 <_printf_float+0x8a>
 8011a40:	232d      	movs	r3, #45	; 0x2d
 8011a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a46:	4a9c      	ldr	r2, [pc, #624]	; (8011cb8 <_printf_float+0x2fc>)
 8011a48:	4b9c      	ldr	r3, [pc, #624]	; (8011cbc <_printf_float+0x300>)
 8011a4a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011a4e:	bf8c      	ite	hi
 8011a50:	4690      	movhi	r8, r2
 8011a52:	4698      	movls	r8, r3
 8011a54:	2303      	movs	r3, #3
 8011a56:	f02b 0204 	bic.w	r2, fp, #4
 8011a5a:	6123      	str	r3, [r4, #16]
 8011a5c:	6022      	str	r2, [r4, #0]
 8011a5e:	f04f 0900 	mov.w	r9, #0
 8011a62:	9700      	str	r7, [sp, #0]
 8011a64:	4633      	mov	r3, r6
 8011a66:	aa0b      	add	r2, sp, #44	; 0x2c
 8011a68:	4621      	mov	r1, r4
 8011a6a:	4628      	mov	r0, r5
 8011a6c:	f000 f9e6 	bl	8011e3c <_printf_common>
 8011a70:	3001      	adds	r0, #1
 8011a72:	f040 808d 	bne.w	8011b90 <_printf_float+0x1d4>
 8011a76:	f04f 30ff 	mov.w	r0, #4294967295
 8011a7a:	b00d      	add	sp, #52	; 0x34
 8011a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a80:	4642      	mov	r2, r8
 8011a82:	464b      	mov	r3, r9
 8011a84:	4640      	mov	r0, r8
 8011a86:	4649      	mov	r1, r9
 8011a88:	f7f6 ff88 	bl	800899c <__aeabi_dcmpun>
 8011a8c:	b110      	cbz	r0, 8011a94 <_printf_float+0xd8>
 8011a8e:	4a8c      	ldr	r2, [pc, #560]	; (8011cc0 <_printf_float+0x304>)
 8011a90:	4b8c      	ldr	r3, [pc, #560]	; (8011cc4 <_printf_float+0x308>)
 8011a92:	e7da      	b.n	8011a4a <_printf_float+0x8e>
 8011a94:	6861      	ldr	r1, [r4, #4]
 8011a96:	1c4b      	adds	r3, r1, #1
 8011a98:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011a9c:	a80a      	add	r0, sp, #40	; 0x28
 8011a9e:	d13e      	bne.n	8011b1e <_printf_float+0x162>
 8011aa0:	2306      	movs	r3, #6
 8011aa2:	6063      	str	r3, [r4, #4]
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011aaa:	ab09      	add	r3, sp, #36	; 0x24
 8011aac:	9300      	str	r3, [sp, #0]
 8011aae:	ec49 8b10 	vmov	d0, r8, r9
 8011ab2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011ab6:	6022      	str	r2, [r4, #0]
 8011ab8:	f8cd a004 	str.w	sl, [sp, #4]
 8011abc:	6861      	ldr	r1, [r4, #4]
 8011abe:	4628      	mov	r0, r5
 8011ac0:	f7ff fee8 	bl	8011894 <__cvt>
 8011ac4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8011ac8:	2b47      	cmp	r3, #71	; 0x47
 8011aca:	4680      	mov	r8, r0
 8011acc:	d109      	bne.n	8011ae2 <_printf_float+0x126>
 8011ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ad0:	1cd8      	adds	r0, r3, #3
 8011ad2:	db02      	blt.n	8011ada <_printf_float+0x11e>
 8011ad4:	6862      	ldr	r2, [r4, #4]
 8011ad6:	4293      	cmp	r3, r2
 8011ad8:	dd47      	ble.n	8011b6a <_printf_float+0x1ae>
 8011ada:	f1aa 0a02 	sub.w	sl, sl, #2
 8011ade:	fa5f fa8a 	uxtb.w	sl, sl
 8011ae2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011ae6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ae8:	d824      	bhi.n	8011b34 <_printf_float+0x178>
 8011aea:	3901      	subs	r1, #1
 8011aec:	4652      	mov	r2, sl
 8011aee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011af2:	9109      	str	r1, [sp, #36]	; 0x24
 8011af4:	f7ff ff2f 	bl	8011956 <__exponent>
 8011af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011afa:	1813      	adds	r3, r2, r0
 8011afc:	2a01      	cmp	r2, #1
 8011afe:	4681      	mov	r9, r0
 8011b00:	6123      	str	r3, [r4, #16]
 8011b02:	dc02      	bgt.n	8011b0a <_printf_float+0x14e>
 8011b04:	6822      	ldr	r2, [r4, #0]
 8011b06:	07d1      	lsls	r1, r2, #31
 8011b08:	d501      	bpl.n	8011b0e <_printf_float+0x152>
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	6123      	str	r3, [r4, #16]
 8011b0e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d0a5      	beq.n	8011a62 <_printf_float+0xa6>
 8011b16:	232d      	movs	r3, #45	; 0x2d
 8011b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b1c:	e7a1      	b.n	8011a62 <_printf_float+0xa6>
 8011b1e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8011b22:	f000 8177 	beq.w	8011e14 <_printf_float+0x458>
 8011b26:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011b2a:	d1bb      	bne.n	8011aa4 <_printf_float+0xe8>
 8011b2c:	2900      	cmp	r1, #0
 8011b2e:	d1b9      	bne.n	8011aa4 <_printf_float+0xe8>
 8011b30:	2301      	movs	r3, #1
 8011b32:	e7b6      	b.n	8011aa2 <_printf_float+0xe6>
 8011b34:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8011b38:	d119      	bne.n	8011b6e <_printf_float+0x1b2>
 8011b3a:	2900      	cmp	r1, #0
 8011b3c:	6863      	ldr	r3, [r4, #4]
 8011b3e:	dd0c      	ble.n	8011b5a <_printf_float+0x19e>
 8011b40:	6121      	str	r1, [r4, #16]
 8011b42:	b913      	cbnz	r3, 8011b4a <_printf_float+0x18e>
 8011b44:	6822      	ldr	r2, [r4, #0]
 8011b46:	07d2      	lsls	r2, r2, #31
 8011b48:	d502      	bpl.n	8011b50 <_printf_float+0x194>
 8011b4a:	3301      	adds	r3, #1
 8011b4c:	440b      	add	r3, r1
 8011b4e:	6123      	str	r3, [r4, #16]
 8011b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b52:	65a3      	str	r3, [r4, #88]	; 0x58
 8011b54:	f04f 0900 	mov.w	r9, #0
 8011b58:	e7d9      	b.n	8011b0e <_printf_float+0x152>
 8011b5a:	b913      	cbnz	r3, 8011b62 <_printf_float+0x1a6>
 8011b5c:	6822      	ldr	r2, [r4, #0]
 8011b5e:	07d0      	lsls	r0, r2, #31
 8011b60:	d501      	bpl.n	8011b66 <_printf_float+0x1aa>
 8011b62:	3302      	adds	r3, #2
 8011b64:	e7f3      	b.n	8011b4e <_printf_float+0x192>
 8011b66:	2301      	movs	r3, #1
 8011b68:	e7f1      	b.n	8011b4e <_printf_float+0x192>
 8011b6a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011b6e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011b72:	4293      	cmp	r3, r2
 8011b74:	db05      	blt.n	8011b82 <_printf_float+0x1c6>
 8011b76:	6822      	ldr	r2, [r4, #0]
 8011b78:	6123      	str	r3, [r4, #16]
 8011b7a:	07d1      	lsls	r1, r2, #31
 8011b7c:	d5e8      	bpl.n	8011b50 <_printf_float+0x194>
 8011b7e:	3301      	adds	r3, #1
 8011b80:	e7e5      	b.n	8011b4e <_printf_float+0x192>
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	bfd4      	ite	le
 8011b86:	f1c3 0302 	rsble	r3, r3, #2
 8011b8a:	2301      	movgt	r3, #1
 8011b8c:	4413      	add	r3, r2
 8011b8e:	e7de      	b.n	8011b4e <_printf_float+0x192>
 8011b90:	6823      	ldr	r3, [r4, #0]
 8011b92:	055a      	lsls	r2, r3, #21
 8011b94:	d407      	bmi.n	8011ba6 <_printf_float+0x1ea>
 8011b96:	6923      	ldr	r3, [r4, #16]
 8011b98:	4642      	mov	r2, r8
 8011b9a:	4631      	mov	r1, r6
 8011b9c:	4628      	mov	r0, r5
 8011b9e:	47b8      	blx	r7
 8011ba0:	3001      	adds	r0, #1
 8011ba2:	d12b      	bne.n	8011bfc <_printf_float+0x240>
 8011ba4:	e767      	b.n	8011a76 <_printf_float+0xba>
 8011ba6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011baa:	f240 80dc 	bls.w	8011d66 <_printf_float+0x3aa>
 8011bae:	2200      	movs	r2, #0
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011bb6:	f7f6 febf 	bl	8008938 <__aeabi_dcmpeq>
 8011bba:	2800      	cmp	r0, #0
 8011bbc:	d033      	beq.n	8011c26 <_printf_float+0x26a>
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	4a41      	ldr	r2, [pc, #260]	; (8011cc8 <_printf_float+0x30c>)
 8011bc2:	4631      	mov	r1, r6
 8011bc4:	4628      	mov	r0, r5
 8011bc6:	47b8      	blx	r7
 8011bc8:	3001      	adds	r0, #1
 8011bca:	f43f af54 	beq.w	8011a76 <_printf_float+0xba>
 8011bce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	db02      	blt.n	8011bdc <_printf_float+0x220>
 8011bd6:	6823      	ldr	r3, [r4, #0]
 8011bd8:	07d8      	lsls	r0, r3, #31
 8011bda:	d50f      	bpl.n	8011bfc <_printf_float+0x240>
 8011bdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011be0:	4631      	mov	r1, r6
 8011be2:	4628      	mov	r0, r5
 8011be4:	47b8      	blx	r7
 8011be6:	3001      	adds	r0, #1
 8011be8:	f43f af45 	beq.w	8011a76 <_printf_float+0xba>
 8011bec:	f04f 0800 	mov.w	r8, #0
 8011bf0:	f104 091a 	add.w	r9, r4, #26
 8011bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bf6:	3b01      	subs	r3, #1
 8011bf8:	4543      	cmp	r3, r8
 8011bfa:	dc09      	bgt.n	8011c10 <_printf_float+0x254>
 8011bfc:	6823      	ldr	r3, [r4, #0]
 8011bfe:	079b      	lsls	r3, r3, #30
 8011c00:	f100 8103 	bmi.w	8011e0a <_printf_float+0x44e>
 8011c04:	68e0      	ldr	r0, [r4, #12]
 8011c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c08:	4298      	cmp	r0, r3
 8011c0a:	bfb8      	it	lt
 8011c0c:	4618      	movlt	r0, r3
 8011c0e:	e734      	b.n	8011a7a <_printf_float+0xbe>
 8011c10:	2301      	movs	r3, #1
 8011c12:	464a      	mov	r2, r9
 8011c14:	4631      	mov	r1, r6
 8011c16:	4628      	mov	r0, r5
 8011c18:	47b8      	blx	r7
 8011c1a:	3001      	adds	r0, #1
 8011c1c:	f43f af2b 	beq.w	8011a76 <_printf_float+0xba>
 8011c20:	f108 0801 	add.w	r8, r8, #1
 8011c24:	e7e6      	b.n	8011bf4 <_printf_float+0x238>
 8011c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	dc2b      	bgt.n	8011c84 <_printf_float+0x2c8>
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	4a26      	ldr	r2, [pc, #152]	; (8011cc8 <_printf_float+0x30c>)
 8011c30:	4631      	mov	r1, r6
 8011c32:	4628      	mov	r0, r5
 8011c34:	47b8      	blx	r7
 8011c36:	3001      	adds	r0, #1
 8011c38:	f43f af1d 	beq.w	8011a76 <_printf_float+0xba>
 8011c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c3e:	b923      	cbnz	r3, 8011c4a <_printf_float+0x28e>
 8011c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c42:	b913      	cbnz	r3, 8011c4a <_printf_float+0x28e>
 8011c44:	6823      	ldr	r3, [r4, #0]
 8011c46:	07d9      	lsls	r1, r3, #31
 8011c48:	d5d8      	bpl.n	8011bfc <_printf_float+0x240>
 8011c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c4e:	4631      	mov	r1, r6
 8011c50:	4628      	mov	r0, r5
 8011c52:	47b8      	blx	r7
 8011c54:	3001      	adds	r0, #1
 8011c56:	f43f af0e 	beq.w	8011a76 <_printf_float+0xba>
 8011c5a:	f04f 0900 	mov.w	r9, #0
 8011c5e:	f104 0a1a 	add.w	sl, r4, #26
 8011c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c64:	425b      	negs	r3, r3
 8011c66:	454b      	cmp	r3, r9
 8011c68:	dc01      	bgt.n	8011c6e <_printf_float+0x2b2>
 8011c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c6c:	e794      	b.n	8011b98 <_printf_float+0x1dc>
 8011c6e:	2301      	movs	r3, #1
 8011c70:	4652      	mov	r2, sl
 8011c72:	4631      	mov	r1, r6
 8011c74:	4628      	mov	r0, r5
 8011c76:	47b8      	blx	r7
 8011c78:	3001      	adds	r0, #1
 8011c7a:	f43f aefc 	beq.w	8011a76 <_printf_float+0xba>
 8011c7e:	f109 0901 	add.w	r9, r9, #1
 8011c82:	e7ee      	b.n	8011c62 <_printf_float+0x2a6>
 8011c84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	bfa8      	it	ge
 8011c8c:	461a      	movge	r2, r3
 8011c8e:	2a00      	cmp	r2, #0
 8011c90:	4691      	mov	r9, r2
 8011c92:	dd07      	ble.n	8011ca4 <_printf_float+0x2e8>
 8011c94:	4613      	mov	r3, r2
 8011c96:	4631      	mov	r1, r6
 8011c98:	4642      	mov	r2, r8
 8011c9a:	4628      	mov	r0, r5
 8011c9c:	47b8      	blx	r7
 8011c9e:	3001      	adds	r0, #1
 8011ca0:	f43f aee9 	beq.w	8011a76 <_printf_float+0xba>
 8011ca4:	f104 031a 	add.w	r3, r4, #26
 8011ca8:	f04f 0b00 	mov.w	fp, #0
 8011cac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011cb0:	9306      	str	r3, [sp, #24]
 8011cb2:	e015      	b.n	8011ce0 <_printf_float+0x324>
 8011cb4:	7fefffff 	.word	0x7fefffff
 8011cb8:	0801660d 	.word	0x0801660d
 8011cbc:	08016609 	.word	0x08016609
 8011cc0:	08016615 	.word	0x08016615
 8011cc4:	08016611 	.word	0x08016611
 8011cc8:	08016656 	.word	0x08016656
 8011ccc:	2301      	movs	r3, #1
 8011cce:	9a06      	ldr	r2, [sp, #24]
 8011cd0:	4631      	mov	r1, r6
 8011cd2:	4628      	mov	r0, r5
 8011cd4:	47b8      	blx	r7
 8011cd6:	3001      	adds	r0, #1
 8011cd8:	f43f aecd 	beq.w	8011a76 <_printf_float+0xba>
 8011cdc:	f10b 0b01 	add.w	fp, fp, #1
 8011ce0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011ce4:	ebaa 0309 	sub.w	r3, sl, r9
 8011ce8:	455b      	cmp	r3, fp
 8011cea:	dcef      	bgt.n	8011ccc <_printf_float+0x310>
 8011cec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	44d0      	add	r8, sl
 8011cf4:	db15      	blt.n	8011d22 <_printf_float+0x366>
 8011cf6:	6823      	ldr	r3, [r4, #0]
 8011cf8:	07da      	lsls	r2, r3, #31
 8011cfa:	d412      	bmi.n	8011d22 <_printf_float+0x366>
 8011cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d00:	eba3 020a 	sub.w	r2, r3, sl
 8011d04:	eba3 0a01 	sub.w	sl, r3, r1
 8011d08:	4592      	cmp	sl, r2
 8011d0a:	bfa8      	it	ge
 8011d0c:	4692      	movge	sl, r2
 8011d0e:	f1ba 0f00 	cmp.w	sl, #0
 8011d12:	dc0e      	bgt.n	8011d32 <_printf_float+0x376>
 8011d14:	f04f 0800 	mov.w	r8, #0
 8011d18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d1c:	f104 091a 	add.w	r9, r4, #26
 8011d20:	e019      	b.n	8011d56 <_printf_float+0x39a>
 8011d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d26:	4631      	mov	r1, r6
 8011d28:	4628      	mov	r0, r5
 8011d2a:	47b8      	blx	r7
 8011d2c:	3001      	adds	r0, #1
 8011d2e:	d1e5      	bne.n	8011cfc <_printf_float+0x340>
 8011d30:	e6a1      	b.n	8011a76 <_printf_float+0xba>
 8011d32:	4653      	mov	r3, sl
 8011d34:	4642      	mov	r2, r8
 8011d36:	4631      	mov	r1, r6
 8011d38:	4628      	mov	r0, r5
 8011d3a:	47b8      	blx	r7
 8011d3c:	3001      	adds	r0, #1
 8011d3e:	d1e9      	bne.n	8011d14 <_printf_float+0x358>
 8011d40:	e699      	b.n	8011a76 <_printf_float+0xba>
 8011d42:	2301      	movs	r3, #1
 8011d44:	464a      	mov	r2, r9
 8011d46:	4631      	mov	r1, r6
 8011d48:	4628      	mov	r0, r5
 8011d4a:	47b8      	blx	r7
 8011d4c:	3001      	adds	r0, #1
 8011d4e:	f43f ae92 	beq.w	8011a76 <_printf_float+0xba>
 8011d52:	f108 0801 	add.w	r8, r8, #1
 8011d56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d5a:	1a9b      	subs	r3, r3, r2
 8011d5c:	eba3 030a 	sub.w	r3, r3, sl
 8011d60:	4543      	cmp	r3, r8
 8011d62:	dcee      	bgt.n	8011d42 <_printf_float+0x386>
 8011d64:	e74a      	b.n	8011bfc <_printf_float+0x240>
 8011d66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d68:	2a01      	cmp	r2, #1
 8011d6a:	dc01      	bgt.n	8011d70 <_printf_float+0x3b4>
 8011d6c:	07db      	lsls	r3, r3, #31
 8011d6e:	d53a      	bpl.n	8011de6 <_printf_float+0x42a>
 8011d70:	2301      	movs	r3, #1
 8011d72:	4642      	mov	r2, r8
 8011d74:	4631      	mov	r1, r6
 8011d76:	4628      	mov	r0, r5
 8011d78:	47b8      	blx	r7
 8011d7a:	3001      	adds	r0, #1
 8011d7c:	f43f ae7b 	beq.w	8011a76 <_printf_float+0xba>
 8011d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d84:	4631      	mov	r1, r6
 8011d86:	4628      	mov	r0, r5
 8011d88:	47b8      	blx	r7
 8011d8a:	3001      	adds	r0, #1
 8011d8c:	f108 0801 	add.w	r8, r8, #1
 8011d90:	f43f ae71 	beq.w	8011a76 <_printf_float+0xba>
 8011d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d96:	2200      	movs	r2, #0
 8011d98:	f103 3aff 	add.w	sl, r3, #4294967295
 8011d9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011da0:	2300      	movs	r3, #0
 8011da2:	f7f6 fdc9 	bl	8008938 <__aeabi_dcmpeq>
 8011da6:	b9c8      	cbnz	r0, 8011ddc <_printf_float+0x420>
 8011da8:	4653      	mov	r3, sl
 8011daa:	4642      	mov	r2, r8
 8011dac:	4631      	mov	r1, r6
 8011dae:	4628      	mov	r0, r5
 8011db0:	47b8      	blx	r7
 8011db2:	3001      	adds	r0, #1
 8011db4:	d10e      	bne.n	8011dd4 <_printf_float+0x418>
 8011db6:	e65e      	b.n	8011a76 <_printf_float+0xba>
 8011db8:	2301      	movs	r3, #1
 8011dba:	4652      	mov	r2, sl
 8011dbc:	4631      	mov	r1, r6
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	47b8      	blx	r7
 8011dc2:	3001      	adds	r0, #1
 8011dc4:	f43f ae57 	beq.w	8011a76 <_printf_float+0xba>
 8011dc8:	f108 0801 	add.w	r8, r8, #1
 8011dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dce:	3b01      	subs	r3, #1
 8011dd0:	4543      	cmp	r3, r8
 8011dd2:	dcf1      	bgt.n	8011db8 <_printf_float+0x3fc>
 8011dd4:	464b      	mov	r3, r9
 8011dd6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011dda:	e6de      	b.n	8011b9a <_printf_float+0x1de>
 8011ddc:	f04f 0800 	mov.w	r8, #0
 8011de0:	f104 0a1a 	add.w	sl, r4, #26
 8011de4:	e7f2      	b.n	8011dcc <_printf_float+0x410>
 8011de6:	2301      	movs	r3, #1
 8011de8:	e7df      	b.n	8011daa <_printf_float+0x3ee>
 8011dea:	2301      	movs	r3, #1
 8011dec:	464a      	mov	r2, r9
 8011dee:	4631      	mov	r1, r6
 8011df0:	4628      	mov	r0, r5
 8011df2:	47b8      	blx	r7
 8011df4:	3001      	adds	r0, #1
 8011df6:	f43f ae3e 	beq.w	8011a76 <_printf_float+0xba>
 8011dfa:	f108 0801 	add.w	r8, r8, #1
 8011dfe:	68e3      	ldr	r3, [r4, #12]
 8011e00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011e02:	1a9b      	subs	r3, r3, r2
 8011e04:	4543      	cmp	r3, r8
 8011e06:	dcf0      	bgt.n	8011dea <_printf_float+0x42e>
 8011e08:	e6fc      	b.n	8011c04 <_printf_float+0x248>
 8011e0a:	f04f 0800 	mov.w	r8, #0
 8011e0e:	f104 0919 	add.w	r9, r4, #25
 8011e12:	e7f4      	b.n	8011dfe <_printf_float+0x442>
 8011e14:	2900      	cmp	r1, #0
 8011e16:	f43f ae8b 	beq.w	8011b30 <_printf_float+0x174>
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011e20:	ab09      	add	r3, sp, #36	; 0x24
 8011e22:	9300      	str	r3, [sp, #0]
 8011e24:	ec49 8b10 	vmov	d0, r8, r9
 8011e28:	6022      	str	r2, [r4, #0]
 8011e2a:	f8cd a004 	str.w	sl, [sp, #4]
 8011e2e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011e32:	4628      	mov	r0, r5
 8011e34:	f7ff fd2e 	bl	8011894 <__cvt>
 8011e38:	4680      	mov	r8, r0
 8011e3a:	e648      	b.n	8011ace <_printf_float+0x112>

08011e3c <_printf_common>:
 8011e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e40:	4691      	mov	r9, r2
 8011e42:	461f      	mov	r7, r3
 8011e44:	688a      	ldr	r2, [r1, #8]
 8011e46:	690b      	ldr	r3, [r1, #16]
 8011e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e4c:	4293      	cmp	r3, r2
 8011e4e:	bfb8      	it	lt
 8011e50:	4613      	movlt	r3, r2
 8011e52:	f8c9 3000 	str.w	r3, [r9]
 8011e56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e5a:	4606      	mov	r6, r0
 8011e5c:	460c      	mov	r4, r1
 8011e5e:	b112      	cbz	r2, 8011e66 <_printf_common+0x2a>
 8011e60:	3301      	adds	r3, #1
 8011e62:	f8c9 3000 	str.w	r3, [r9]
 8011e66:	6823      	ldr	r3, [r4, #0]
 8011e68:	0699      	lsls	r1, r3, #26
 8011e6a:	bf42      	ittt	mi
 8011e6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011e70:	3302      	addmi	r3, #2
 8011e72:	f8c9 3000 	strmi.w	r3, [r9]
 8011e76:	6825      	ldr	r5, [r4, #0]
 8011e78:	f015 0506 	ands.w	r5, r5, #6
 8011e7c:	d107      	bne.n	8011e8e <_printf_common+0x52>
 8011e7e:	f104 0a19 	add.w	sl, r4, #25
 8011e82:	68e3      	ldr	r3, [r4, #12]
 8011e84:	f8d9 2000 	ldr.w	r2, [r9]
 8011e88:	1a9b      	subs	r3, r3, r2
 8011e8a:	42ab      	cmp	r3, r5
 8011e8c:	dc28      	bgt.n	8011ee0 <_printf_common+0xa4>
 8011e8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011e92:	6822      	ldr	r2, [r4, #0]
 8011e94:	3300      	adds	r3, #0
 8011e96:	bf18      	it	ne
 8011e98:	2301      	movne	r3, #1
 8011e9a:	0692      	lsls	r2, r2, #26
 8011e9c:	d42d      	bmi.n	8011efa <_printf_common+0xbe>
 8011e9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ea2:	4639      	mov	r1, r7
 8011ea4:	4630      	mov	r0, r6
 8011ea6:	47c0      	blx	r8
 8011ea8:	3001      	adds	r0, #1
 8011eaa:	d020      	beq.n	8011eee <_printf_common+0xb2>
 8011eac:	6823      	ldr	r3, [r4, #0]
 8011eae:	68e5      	ldr	r5, [r4, #12]
 8011eb0:	f8d9 2000 	ldr.w	r2, [r9]
 8011eb4:	f003 0306 	and.w	r3, r3, #6
 8011eb8:	2b04      	cmp	r3, #4
 8011eba:	bf08      	it	eq
 8011ebc:	1aad      	subeq	r5, r5, r2
 8011ebe:	68a3      	ldr	r3, [r4, #8]
 8011ec0:	6922      	ldr	r2, [r4, #16]
 8011ec2:	bf0c      	ite	eq
 8011ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ec8:	2500      	movne	r5, #0
 8011eca:	4293      	cmp	r3, r2
 8011ecc:	bfc4      	itt	gt
 8011ece:	1a9b      	subgt	r3, r3, r2
 8011ed0:	18ed      	addgt	r5, r5, r3
 8011ed2:	f04f 0900 	mov.w	r9, #0
 8011ed6:	341a      	adds	r4, #26
 8011ed8:	454d      	cmp	r5, r9
 8011eda:	d11a      	bne.n	8011f12 <_printf_common+0xd6>
 8011edc:	2000      	movs	r0, #0
 8011ede:	e008      	b.n	8011ef2 <_printf_common+0xb6>
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	4652      	mov	r2, sl
 8011ee4:	4639      	mov	r1, r7
 8011ee6:	4630      	mov	r0, r6
 8011ee8:	47c0      	blx	r8
 8011eea:	3001      	adds	r0, #1
 8011eec:	d103      	bne.n	8011ef6 <_printf_common+0xba>
 8011eee:	f04f 30ff 	mov.w	r0, #4294967295
 8011ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ef6:	3501      	adds	r5, #1
 8011ef8:	e7c3      	b.n	8011e82 <_printf_common+0x46>
 8011efa:	18e1      	adds	r1, r4, r3
 8011efc:	1c5a      	adds	r2, r3, #1
 8011efe:	2030      	movs	r0, #48	; 0x30
 8011f00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f04:	4422      	add	r2, r4
 8011f06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f0e:	3302      	adds	r3, #2
 8011f10:	e7c5      	b.n	8011e9e <_printf_common+0x62>
 8011f12:	2301      	movs	r3, #1
 8011f14:	4622      	mov	r2, r4
 8011f16:	4639      	mov	r1, r7
 8011f18:	4630      	mov	r0, r6
 8011f1a:	47c0      	blx	r8
 8011f1c:	3001      	adds	r0, #1
 8011f1e:	d0e6      	beq.n	8011eee <_printf_common+0xb2>
 8011f20:	f109 0901 	add.w	r9, r9, #1
 8011f24:	e7d8      	b.n	8011ed8 <_printf_common+0x9c>
	...

08011f28 <_printf_i>:
 8011f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011f30:	460c      	mov	r4, r1
 8011f32:	7e09      	ldrb	r1, [r1, #24]
 8011f34:	b085      	sub	sp, #20
 8011f36:	296e      	cmp	r1, #110	; 0x6e
 8011f38:	4617      	mov	r7, r2
 8011f3a:	4606      	mov	r6, r0
 8011f3c:	4698      	mov	r8, r3
 8011f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f40:	f000 80b3 	beq.w	80120aa <_printf_i+0x182>
 8011f44:	d822      	bhi.n	8011f8c <_printf_i+0x64>
 8011f46:	2963      	cmp	r1, #99	; 0x63
 8011f48:	d036      	beq.n	8011fb8 <_printf_i+0x90>
 8011f4a:	d80a      	bhi.n	8011f62 <_printf_i+0x3a>
 8011f4c:	2900      	cmp	r1, #0
 8011f4e:	f000 80b9 	beq.w	80120c4 <_printf_i+0x19c>
 8011f52:	2958      	cmp	r1, #88	; 0x58
 8011f54:	f000 8083 	beq.w	801205e <_printf_i+0x136>
 8011f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011f60:	e032      	b.n	8011fc8 <_printf_i+0xa0>
 8011f62:	2964      	cmp	r1, #100	; 0x64
 8011f64:	d001      	beq.n	8011f6a <_printf_i+0x42>
 8011f66:	2969      	cmp	r1, #105	; 0x69
 8011f68:	d1f6      	bne.n	8011f58 <_printf_i+0x30>
 8011f6a:	6820      	ldr	r0, [r4, #0]
 8011f6c:	6813      	ldr	r3, [r2, #0]
 8011f6e:	0605      	lsls	r5, r0, #24
 8011f70:	f103 0104 	add.w	r1, r3, #4
 8011f74:	d52a      	bpl.n	8011fcc <_printf_i+0xa4>
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	6011      	str	r1, [r2, #0]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	da03      	bge.n	8011f86 <_printf_i+0x5e>
 8011f7e:	222d      	movs	r2, #45	; 0x2d
 8011f80:	425b      	negs	r3, r3
 8011f82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011f86:	486f      	ldr	r0, [pc, #444]	; (8012144 <_printf_i+0x21c>)
 8011f88:	220a      	movs	r2, #10
 8011f8a:	e039      	b.n	8012000 <_printf_i+0xd8>
 8011f8c:	2973      	cmp	r1, #115	; 0x73
 8011f8e:	f000 809d 	beq.w	80120cc <_printf_i+0x1a4>
 8011f92:	d808      	bhi.n	8011fa6 <_printf_i+0x7e>
 8011f94:	296f      	cmp	r1, #111	; 0x6f
 8011f96:	d020      	beq.n	8011fda <_printf_i+0xb2>
 8011f98:	2970      	cmp	r1, #112	; 0x70
 8011f9a:	d1dd      	bne.n	8011f58 <_printf_i+0x30>
 8011f9c:	6823      	ldr	r3, [r4, #0]
 8011f9e:	f043 0320 	orr.w	r3, r3, #32
 8011fa2:	6023      	str	r3, [r4, #0]
 8011fa4:	e003      	b.n	8011fae <_printf_i+0x86>
 8011fa6:	2975      	cmp	r1, #117	; 0x75
 8011fa8:	d017      	beq.n	8011fda <_printf_i+0xb2>
 8011faa:	2978      	cmp	r1, #120	; 0x78
 8011fac:	d1d4      	bne.n	8011f58 <_printf_i+0x30>
 8011fae:	2378      	movs	r3, #120	; 0x78
 8011fb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011fb4:	4864      	ldr	r0, [pc, #400]	; (8012148 <_printf_i+0x220>)
 8011fb6:	e055      	b.n	8012064 <_printf_i+0x13c>
 8011fb8:	6813      	ldr	r3, [r2, #0]
 8011fba:	1d19      	adds	r1, r3, #4
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	6011      	str	r1, [r2, #0]
 8011fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011fc8:	2301      	movs	r3, #1
 8011fca:	e08c      	b.n	80120e6 <_printf_i+0x1be>
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	6011      	str	r1, [r2, #0]
 8011fd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011fd4:	bf18      	it	ne
 8011fd6:	b21b      	sxthne	r3, r3
 8011fd8:	e7cf      	b.n	8011f7a <_printf_i+0x52>
 8011fda:	6813      	ldr	r3, [r2, #0]
 8011fdc:	6825      	ldr	r5, [r4, #0]
 8011fde:	1d18      	adds	r0, r3, #4
 8011fe0:	6010      	str	r0, [r2, #0]
 8011fe2:	0628      	lsls	r0, r5, #24
 8011fe4:	d501      	bpl.n	8011fea <_printf_i+0xc2>
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	e002      	b.n	8011ff0 <_printf_i+0xc8>
 8011fea:	0668      	lsls	r0, r5, #25
 8011fec:	d5fb      	bpl.n	8011fe6 <_printf_i+0xbe>
 8011fee:	881b      	ldrh	r3, [r3, #0]
 8011ff0:	4854      	ldr	r0, [pc, #336]	; (8012144 <_printf_i+0x21c>)
 8011ff2:	296f      	cmp	r1, #111	; 0x6f
 8011ff4:	bf14      	ite	ne
 8011ff6:	220a      	movne	r2, #10
 8011ff8:	2208      	moveq	r2, #8
 8011ffa:	2100      	movs	r1, #0
 8011ffc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012000:	6865      	ldr	r5, [r4, #4]
 8012002:	60a5      	str	r5, [r4, #8]
 8012004:	2d00      	cmp	r5, #0
 8012006:	f2c0 8095 	blt.w	8012134 <_printf_i+0x20c>
 801200a:	6821      	ldr	r1, [r4, #0]
 801200c:	f021 0104 	bic.w	r1, r1, #4
 8012010:	6021      	str	r1, [r4, #0]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d13d      	bne.n	8012092 <_printf_i+0x16a>
 8012016:	2d00      	cmp	r5, #0
 8012018:	f040 808e 	bne.w	8012138 <_printf_i+0x210>
 801201c:	4665      	mov	r5, ip
 801201e:	2a08      	cmp	r2, #8
 8012020:	d10b      	bne.n	801203a <_printf_i+0x112>
 8012022:	6823      	ldr	r3, [r4, #0]
 8012024:	07db      	lsls	r3, r3, #31
 8012026:	d508      	bpl.n	801203a <_printf_i+0x112>
 8012028:	6923      	ldr	r3, [r4, #16]
 801202a:	6862      	ldr	r2, [r4, #4]
 801202c:	429a      	cmp	r2, r3
 801202e:	bfde      	ittt	le
 8012030:	2330      	movle	r3, #48	; 0x30
 8012032:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012036:	f105 35ff 	addle.w	r5, r5, #4294967295
 801203a:	ebac 0305 	sub.w	r3, ip, r5
 801203e:	6123      	str	r3, [r4, #16]
 8012040:	f8cd 8000 	str.w	r8, [sp]
 8012044:	463b      	mov	r3, r7
 8012046:	aa03      	add	r2, sp, #12
 8012048:	4621      	mov	r1, r4
 801204a:	4630      	mov	r0, r6
 801204c:	f7ff fef6 	bl	8011e3c <_printf_common>
 8012050:	3001      	adds	r0, #1
 8012052:	d14d      	bne.n	80120f0 <_printf_i+0x1c8>
 8012054:	f04f 30ff 	mov.w	r0, #4294967295
 8012058:	b005      	add	sp, #20
 801205a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801205e:	4839      	ldr	r0, [pc, #228]	; (8012144 <_printf_i+0x21c>)
 8012060:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012064:	6813      	ldr	r3, [r2, #0]
 8012066:	6821      	ldr	r1, [r4, #0]
 8012068:	1d1d      	adds	r5, r3, #4
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	6015      	str	r5, [r2, #0]
 801206e:	060a      	lsls	r2, r1, #24
 8012070:	d50b      	bpl.n	801208a <_printf_i+0x162>
 8012072:	07ca      	lsls	r2, r1, #31
 8012074:	bf44      	itt	mi
 8012076:	f041 0120 	orrmi.w	r1, r1, #32
 801207a:	6021      	strmi	r1, [r4, #0]
 801207c:	b91b      	cbnz	r3, 8012086 <_printf_i+0x15e>
 801207e:	6822      	ldr	r2, [r4, #0]
 8012080:	f022 0220 	bic.w	r2, r2, #32
 8012084:	6022      	str	r2, [r4, #0]
 8012086:	2210      	movs	r2, #16
 8012088:	e7b7      	b.n	8011ffa <_printf_i+0xd2>
 801208a:	064d      	lsls	r5, r1, #25
 801208c:	bf48      	it	mi
 801208e:	b29b      	uxthmi	r3, r3
 8012090:	e7ef      	b.n	8012072 <_printf_i+0x14a>
 8012092:	4665      	mov	r5, ip
 8012094:	fbb3 f1f2 	udiv	r1, r3, r2
 8012098:	fb02 3311 	mls	r3, r2, r1, r3
 801209c:	5cc3      	ldrb	r3, [r0, r3]
 801209e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80120a2:	460b      	mov	r3, r1
 80120a4:	2900      	cmp	r1, #0
 80120a6:	d1f5      	bne.n	8012094 <_printf_i+0x16c>
 80120a8:	e7b9      	b.n	801201e <_printf_i+0xf6>
 80120aa:	6813      	ldr	r3, [r2, #0]
 80120ac:	6825      	ldr	r5, [r4, #0]
 80120ae:	6961      	ldr	r1, [r4, #20]
 80120b0:	1d18      	adds	r0, r3, #4
 80120b2:	6010      	str	r0, [r2, #0]
 80120b4:	0628      	lsls	r0, r5, #24
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	d501      	bpl.n	80120be <_printf_i+0x196>
 80120ba:	6019      	str	r1, [r3, #0]
 80120bc:	e002      	b.n	80120c4 <_printf_i+0x19c>
 80120be:	066a      	lsls	r2, r5, #25
 80120c0:	d5fb      	bpl.n	80120ba <_printf_i+0x192>
 80120c2:	8019      	strh	r1, [r3, #0]
 80120c4:	2300      	movs	r3, #0
 80120c6:	6123      	str	r3, [r4, #16]
 80120c8:	4665      	mov	r5, ip
 80120ca:	e7b9      	b.n	8012040 <_printf_i+0x118>
 80120cc:	6813      	ldr	r3, [r2, #0]
 80120ce:	1d19      	adds	r1, r3, #4
 80120d0:	6011      	str	r1, [r2, #0]
 80120d2:	681d      	ldr	r5, [r3, #0]
 80120d4:	6862      	ldr	r2, [r4, #4]
 80120d6:	2100      	movs	r1, #0
 80120d8:	4628      	mov	r0, r5
 80120da:	f7f5 ffb9 	bl	8008050 <memchr>
 80120de:	b108      	cbz	r0, 80120e4 <_printf_i+0x1bc>
 80120e0:	1b40      	subs	r0, r0, r5
 80120e2:	6060      	str	r0, [r4, #4]
 80120e4:	6863      	ldr	r3, [r4, #4]
 80120e6:	6123      	str	r3, [r4, #16]
 80120e8:	2300      	movs	r3, #0
 80120ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120ee:	e7a7      	b.n	8012040 <_printf_i+0x118>
 80120f0:	6923      	ldr	r3, [r4, #16]
 80120f2:	462a      	mov	r2, r5
 80120f4:	4639      	mov	r1, r7
 80120f6:	4630      	mov	r0, r6
 80120f8:	47c0      	blx	r8
 80120fa:	3001      	adds	r0, #1
 80120fc:	d0aa      	beq.n	8012054 <_printf_i+0x12c>
 80120fe:	6823      	ldr	r3, [r4, #0]
 8012100:	079b      	lsls	r3, r3, #30
 8012102:	d413      	bmi.n	801212c <_printf_i+0x204>
 8012104:	68e0      	ldr	r0, [r4, #12]
 8012106:	9b03      	ldr	r3, [sp, #12]
 8012108:	4298      	cmp	r0, r3
 801210a:	bfb8      	it	lt
 801210c:	4618      	movlt	r0, r3
 801210e:	e7a3      	b.n	8012058 <_printf_i+0x130>
 8012110:	2301      	movs	r3, #1
 8012112:	464a      	mov	r2, r9
 8012114:	4639      	mov	r1, r7
 8012116:	4630      	mov	r0, r6
 8012118:	47c0      	blx	r8
 801211a:	3001      	adds	r0, #1
 801211c:	d09a      	beq.n	8012054 <_printf_i+0x12c>
 801211e:	3501      	adds	r5, #1
 8012120:	68e3      	ldr	r3, [r4, #12]
 8012122:	9a03      	ldr	r2, [sp, #12]
 8012124:	1a9b      	subs	r3, r3, r2
 8012126:	42ab      	cmp	r3, r5
 8012128:	dcf2      	bgt.n	8012110 <_printf_i+0x1e8>
 801212a:	e7eb      	b.n	8012104 <_printf_i+0x1dc>
 801212c:	2500      	movs	r5, #0
 801212e:	f104 0919 	add.w	r9, r4, #25
 8012132:	e7f5      	b.n	8012120 <_printf_i+0x1f8>
 8012134:	2b00      	cmp	r3, #0
 8012136:	d1ac      	bne.n	8012092 <_printf_i+0x16a>
 8012138:	7803      	ldrb	r3, [r0, #0]
 801213a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801213e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012142:	e76c      	b.n	801201e <_printf_i+0xf6>
 8012144:	08016619 	.word	0x08016619
 8012148:	0801662a 	.word	0x0801662a

0801214c <__svfiscanf_r>:
 801214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012150:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8012154:	460c      	mov	r4, r1
 8012156:	2100      	movs	r1, #0
 8012158:	9144      	str	r1, [sp, #272]	; 0x110
 801215a:	9145      	str	r1, [sp, #276]	; 0x114
 801215c:	499f      	ldr	r1, [pc, #636]	; (80123dc <__svfiscanf_r+0x290>)
 801215e:	91a0      	str	r1, [sp, #640]	; 0x280
 8012160:	f10d 0804 	add.w	r8, sp, #4
 8012164:	499e      	ldr	r1, [pc, #632]	; (80123e0 <__svfiscanf_r+0x294>)
 8012166:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80123e4 <__svfiscanf_r+0x298>
 801216a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801216e:	4606      	mov	r6, r0
 8012170:	4692      	mov	sl, r2
 8012172:	91a1      	str	r1, [sp, #644]	; 0x284
 8012174:	9300      	str	r3, [sp, #0]
 8012176:	270a      	movs	r7, #10
 8012178:	f89a 3000 	ldrb.w	r3, [sl]
 801217c:	2b00      	cmp	r3, #0
 801217e:	f000 812a 	beq.w	80123d6 <__svfiscanf_r+0x28a>
 8012182:	4655      	mov	r5, sl
 8012184:	f003 f98c 	bl	80154a0 <__locale_ctype_ptr>
 8012188:	f815 bb01 	ldrb.w	fp, [r5], #1
 801218c:	4458      	add	r0, fp
 801218e:	7843      	ldrb	r3, [r0, #1]
 8012190:	f013 0308 	ands.w	r3, r3, #8
 8012194:	d01c      	beq.n	80121d0 <__svfiscanf_r+0x84>
 8012196:	6863      	ldr	r3, [r4, #4]
 8012198:	2b00      	cmp	r3, #0
 801219a:	dd12      	ble.n	80121c2 <__svfiscanf_r+0x76>
 801219c:	f003 f980 	bl	80154a0 <__locale_ctype_ptr>
 80121a0:	6823      	ldr	r3, [r4, #0]
 80121a2:	781a      	ldrb	r2, [r3, #0]
 80121a4:	4410      	add	r0, r2
 80121a6:	7842      	ldrb	r2, [r0, #1]
 80121a8:	0712      	lsls	r2, r2, #28
 80121aa:	d401      	bmi.n	80121b0 <__svfiscanf_r+0x64>
 80121ac:	46aa      	mov	sl, r5
 80121ae:	e7e3      	b.n	8012178 <__svfiscanf_r+0x2c>
 80121b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80121b2:	3201      	adds	r2, #1
 80121b4:	9245      	str	r2, [sp, #276]	; 0x114
 80121b6:	6862      	ldr	r2, [r4, #4]
 80121b8:	3301      	adds	r3, #1
 80121ba:	3a01      	subs	r2, #1
 80121bc:	6062      	str	r2, [r4, #4]
 80121be:	6023      	str	r3, [r4, #0]
 80121c0:	e7e9      	b.n	8012196 <__svfiscanf_r+0x4a>
 80121c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80121c4:	4621      	mov	r1, r4
 80121c6:	4630      	mov	r0, r6
 80121c8:	4798      	blx	r3
 80121ca:	2800      	cmp	r0, #0
 80121cc:	d0e6      	beq.n	801219c <__svfiscanf_r+0x50>
 80121ce:	e7ed      	b.n	80121ac <__svfiscanf_r+0x60>
 80121d0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80121d4:	f040 8082 	bne.w	80122dc <__svfiscanf_r+0x190>
 80121d8:	9343      	str	r3, [sp, #268]	; 0x10c
 80121da:	9341      	str	r3, [sp, #260]	; 0x104
 80121dc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80121e0:	2b2a      	cmp	r3, #42	; 0x2a
 80121e2:	d103      	bne.n	80121ec <__svfiscanf_r+0xa0>
 80121e4:	2310      	movs	r3, #16
 80121e6:	9341      	str	r3, [sp, #260]	; 0x104
 80121e8:	f10a 0502 	add.w	r5, sl, #2
 80121ec:	46aa      	mov	sl, r5
 80121ee:	f815 1b01 	ldrb.w	r1, [r5], #1
 80121f2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80121f6:	2a09      	cmp	r2, #9
 80121f8:	d922      	bls.n	8012240 <__svfiscanf_r+0xf4>
 80121fa:	2203      	movs	r2, #3
 80121fc:	4879      	ldr	r0, [pc, #484]	; (80123e4 <__svfiscanf_r+0x298>)
 80121fe:	f7f5 ff27 	bl	8008050 <memchr>
 8012202:	b138      	cbz	r0, 8012214 <__svfiscanf_r+0xc8>
 8012204:	eba0 0309 	sub.w	r3, r0, r9
 8012208:	2001      	movs	r0, #1
 801220a:	4098      	lsls	r0, r3
 801220c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801220e:	4318      	orrs	r0, r3
 8012210:	9041      	str	r0, [sp, #260]	; 0x104
 8012212:	46aa      	mov	sl, r5
 8012214:	f89a 3000 	ldrb.w	r3, [sl]
 8012218:	2b67      	cmp	r3, #103	; 0x67
 801221a:	f10a 0501 	add.w	r5, sl, #1
 801221e:	d82b      	bhi.n	8012278 <__svfiscanf_r+0x12c>
 8012220:	2b65      	cmp	r3, #101	; 0x65
 8012222:	f080 809f 	bcs.w	8012364 <__svfiscanf_r+0x218>
 8012226:	2b47      	cmp	r3, #71	; 0x47
 8012228:	d810      	bhi.n	801224c <__svfiscanf_r+0x100>
 801222a:	2b45      	cmp	r3, #69	; 0x45
 801222c:	f080 809a 	bcs.w	8012364 <__svfiscanf_r+0x218>
 8012230:	2b00      	cmp	r3, #0
 8012232:	d06c      	beq.n	801230e <__svfiscanf_r+0x1c2>
 8012234:	2b25      	cmp	r3, #37	; 0x25
 8012236:	d051      	beq.n	80122dc <__svfiscanf_r+0x190>
 8012238:	2303      	movs	r3, #3
 801223a:	9347      	str	r3, [sp, #284]	; 0x11c
 801223c:	9742      	str	r7, [sp, #264]	; 0x108
 801223e:	e027      	b.n	8012290 <__svfiscanf_r+0x144>
 8012240:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012242:	fb07 1303 	mla	r3, r7, r3, r1
 8012246:	3b30      	subs	r3, #48	; 0x30
 8012248:	9343      	str	r3, [sp, #268]	; 0x10c
 801224a:	e7cf      	b.n	80121ec <__svfiscanf_r+0xa0>
 801224c:	2b5b      	cmp	r3, #91	; 0x5b
 801224e:	d06a      	beq.n	8012326 <__svfiscanf_r+0x1da>
 8012250:	d80c      	bhi.n	801226c <__svfiscanf_r+0x120>
 8012252:	2b58      	cmp	r3, #88	; 0x58
 8012254:	d1f0      	bne.n	8012238 <__svfiscanf_r+0xec>
 8012256:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801225c:	9241      	str	r2, [sp, #260]	; 0x104
 801225e:	2210      	movs	r2, #16
 8012260:	9242      	str	r2, [sp, #264]	; 0x108
 8012262:	2b6e      	cmp	r3, #110	; 0x6e
 8012264:	bf8c      	ite	hi
 8012266:	2304      	movhi	r3, #4
 8012268:	2303      	movls	r3, #3
 801226a:	e010      	b.n	801228e <__svfiscanf_r+0x142>
 801226c:	2b63      	cmp	r3, #99	; 0x63
 801226e:	d065      	beq.n	801233c <__svfiscanf_r+0x1f0>
 8012270:	2b64      	cmp	r3, #100	; 0x64
 8012272:	d1e1      	bne.n	8012238 <__svfiscanf_r+0xec>
 8012274:	9742      	str	r7, [sp, #264]	; 0x108
 8012276:	e7f4      	b.n	8012262 <__svfiscanf_r+0x116>
 8012278:	2b70      	cmp	r3, #112	; 0x70
 801227a:	d04b      	beq.n	8012314 <__svfiscanf_r+0x1c8>
 801227c:	d826      	bhi.n	80122cc <__svfiscanf_r+0x180>
 801227e:	2b6e      	cmp	r3, #110	; 0x6e
 8012280:	d062      	beq.n	8012348 <__svfiscanf_r+0x1fc>
 8012282:	d84c      	bhi.n	801231e <__svfiscanf_r+0x1d2>
 8012284:	2b69      	cmp	r3, #105	; 0x69
 8012286:	d1d7      	bne.n	8012238 <__svfiscanf_r+0xec>
 8012288:	2300      	movs	r3, #0
 801228a:	9342      	str	r3, [sp, #264]	; 0x108
 801228c:	2303      	movs	r3, #3
 801228e:	9347      	str	r3, [sp, #284]	; 0x11c
 8012290:	6863      	ldr	r3, [r4, #4]
 8012292:	2b00      	cmp	r3, #0
 8012294:	dd68      	ble.n	8012368 <__svfiscanf_r+0x21c>
 8012296:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012298:	0659      	lsls	r1, r3, #25
 801229a:	d407      	bmi.n	80122ac <__svfiscanf_r+0x160>
 801229c:	f003 f900 	bl	80154a0 <__locale_ctype_ptr>
 80122a0:	6823      	ldr	r3, [r4, #0]
 80122a2:	781a      	ldrb	r2, [r3, #0]
 80122a4:	4410      	add	r0, r2
 80122a6:	7842      	ldrb	r2, [r0, #1]
 80122a8:	0712      	lsls	r2, r2, #28
 80122aa:	d464      	bmi.n	8012376 <__svfiscanf_r+0x22a>
 80122ac:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80122ae:	2b02      	cmp	r3, #2
 80122b0:	dc73      	bgt.n	801239a <__svfiscanf_r+0x24e>
 80122b2:	466b      	mov	r3, sp
 80122b4:	4622      	mov	r2, r4
 80122b6:	a941      	add	r1, sp, #260	; 0x104
 80122b8:	4630      	mov	r0, r6
 80122ba:	f000 faa1 	bl	8012800 <_scanf_chars>
 80122be:	2801      	cmp	r0, #1
 80122c0:	f000 8089 	beq.w	80123d6 <__svfiscanf_r+0x28a>
 80122c4:	2802      	cmp	r0, #2
 80122c6:	f47f af71 	bne.w	80121ac <__svfiscanf_r+0x60>
 80122ca:	e01d      	b.n	8012308 <__svfiscanf_r+0x1bc>
 80122cc:	2b75      	cmp	r3, #117	; 0x75
 80122ce:	d0d1      	beq.n	8012274 <__svfiscanf_r+0x128>
 80122d0:	2b78      	cmp	r3, #120	; 0x78
 80122d2:	d0c0      	beq.n	8012256 <__svfiscanf_r+0x10a>
 80122d4:	2b73      	cmp	r3, #115	; 0x73
 80122d6:	d1af      	bne.n	8012238 <__svfiscanf_r+0xec>
 80122d8:	2302      	movs	r3, #2
 80122da:	e7d8      	b.n	801228e <__svfiscanf_r+0x142>
 80122dc:	6863      	ldr	r3, [r4, #4]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	dd0c      	ble.n	80122fc <__svfiscanf_r+0x1b0>
 80122e2:	6823      	ldr	r3, [r4, #0]
 80122e4:	781a      	ldrb	r2, [r3, #0]
 80122e6:	455a      	cmp	r2, fp
 80122e8:	d175      	bne.n	80123d6 <__svfiscanf_r+0x28a>
 80122ea:	3301      	adds	r3, #1
 80122ec:	6862      	ldr	r2, [r4, #4]
 80122ee:	6023      	str	r3, [r4, #0]
 80122f0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80122f2:	3a01      	subs	r2, #1
 80122f4:	3301      	adds	r3, #1
 80122f6:	6062      	str	r2, [r4, #4]
 80122f8:	9345      	str	r3, [sp, #276]	; 0x114
 80122fa:	e757      	b.n	80121ac <__svfiscanf_r+0x60>
 80122fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80122fe:	4621      	mov	r1, r4
 8012300:	4630      	mov	r0, r6
 8012302:	4798      	blx	r3
 8012304:	2800      	cmp	r0, #0
 8012306:	d0ec      	beq.n	80122e2 <__svfiscanf_r+0x196>
 8012308:	9844      	ldr	r0, [sp, #272]	; 0x110
 801230a:	2800      	cmp	r0, #0
 801230c:	d159      	bne.n	80123c2 <__svfiscanf_r+0x276>
 801230e:	f04f 30ff 	mov.w	r0, #4294967295
 8012312:	e05c      	b.n	80123ce <__svfiscanf_r+0x282>
 8012314:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012316:	f042 0220 	orr.w	r2, r2, #32
 801231a:	9241      	str	r2, [sp, #260]	; 0x104
 801231c:	e79b      	b.n	8012256 <__svfiscanf_r+0x10a>
 801231e:	2308      	movs	r3, #8
 8012320:	9342      	str	r3, [sp, #264]	; 0x108
 8012322:	2304      	movs	r3, #4
 8012324:	e7b3      	b.n	801228e <__svfiscanf_r+0x142>
 8012326:	4629      	mov	r1, r5
 8012328:	4640      	mov	r0, r8
 801232a:	f000 fd0f 	bl	8012d4c <__sccl>
 801232e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012334:	9341      	str	r3, [sp, #260]	; 0x104
 8012336:	4605      	mov	r5, r0
 8012338:	2301      	movs	r3, #1
 801233a:	e7a8      	b.n	801228e <__svfiscanf_r+0x142>
 801233c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801233e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012342:	9341      	str	r3, [sp, #260]	; 0x104
 8012344:	2300      	movs	r3, #0
 8012346:	e7a2      	b.n	801228e <__svfiscanf_r+0x142>
 8012348:	9841      	ldr	r0, [sp, #260]	; 0x104
 801234a:	06c3      	lsls	r3, r0, #27
 801234c:	f53f af2e 	bmi.w	80121ac <__svfiscanf_r+0x60>
 8012350:	9b00      	ldr	r3, [sp, #0]
 8012352:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012354:	1d19      	adds	r1, r3, #4
 8012356:	9100      	str	r1, [sp, #0]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	07c0      	lsls	r0, r0, #31
 801235c:	bf4c      	ite	mi
 801235e:	801a      	strhmi	r2, [r3, #0]
 8012360:	601a      	strpl	r2, [r3, #0]
 8012362:	e723      	b.n	80121ac <__svfiscanf_r+0x60>
 8012364:	2305      	movs	r3, #5
 8012366:	e792      	b.n	801228e <__svfiscanf_r+0x142>
 8012368:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801236a:	4621      	mov	r1, r4
 801236c:	4630      	mov	r0, r6
 801236e:	4798      	blx	r3
 8012370:	2800      	cmp	r0, #0
 8012372:	d090      	beq.n	8012296 <__svfiscanf_r+0x14a>
 8012374:	e7c8      	b.n	8012308 <__svfiscanf_r+0x1bc>
 8012376:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012378:	3201      	adds	r2, #1
 801237a:	9245      	str	r2, [sp, #276]	; 0x114
 801237c:	6862      	ldr	r2, [r4, #4]
 801237e:	3a01      	subs	r2, #1
 8012380:	2a00      	cmp	r2, #0
 8012382:	6062      	str	r2, [r4, #4]
 8012384:	dd02      	ble.n	801238c <__svfiscanf_r+0x240>
 8012386:	3301      	adds	r3, #1
 8012388:	6023      	str	r3, [r4, #0]
 801238a:	e787      	b.n	801229c <__svfiscanf_r+0x150>
 801238c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801238e:	4621      	mov	r1, r4
 8012390:	4630      	mov	r0, r6
 8012392:	4798      	blx	r3
 8012394:	2800      	cmp	r0, #0
 8012396:	d081      	beq.n	801229c <__svfiscanf_r+0x150>
 8012398:	e7b6      	b.n	8012308 <__svfiscanf_r+0x1bc>
 801239a:	2b04      	cmp	r3, #4
 801239c:	dc06      	bgt.n	80123ac <__svfiscanf_r+0x260>
 801239e:	466b      	mov	r3, sp
 80123a0:	4622      	mov	r2, r4
 80123a2:	a941      	add	r1, sp, #260	; 0x104
 80123a4:	4630      	mov	r0, r6
 80123a6:	f000 fa8f 	bl	80128c8 <_scanf_i>
 80123aa:	e788      	b.n	80122be <__svfiscanf_r+0x172>
 80123ac:	4b0e      	ldr	r3, [pc, #56]	; (80123e8 <__svfiscanf_r+0x29c>)
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	f43f aefc 	beq.w	80121ac <__svfiscanf_r+0x60>
 80123b4:	466b      	mov	r3, sp
 80123b6:	4622      	mov	r2, r4
 80123b8:	a941      	add	r1, sp, #260	; 0x104
 80123ba:	4630      	mov	r0, r6
 80123bc:	f000 f83e 	bl	801243c <_scanf_float>
 80123c0:	e77d      	b.n	80122be <__svfiscanf_r+0x172>
 80123c2:	89a3      	ldrh	r3, [r4, #12]
 80123c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80123c8:	bf18      	it	ne
 80123ca:	f04f 30ff 	movne.w	r0, #4294967295
 80123ce:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80123d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123d6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80123d8:	e7f9      	b.n	80123ce <__svfiscanf_r+0x282>
 80123da:	bf00      	nop
 80123dc:	08013ed9 	.word	0x08013ed9
 80123e0:	08012be5 	.word	0x08012be5
 80123e4:	080165fe 	.word	0x080165fe
 80123e8:	0801243d 	.word	0x0801243d

080123ec <_vfiscanf_r>:
 80123ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123f0:	460c      	mov	r4, r1
 80123f2:	4616      	mov	r6, r2
 80123f4:	461f      	mov	r7, r3
 80123f6:	4605      	mov	r5, r0
 80123f8:	b118      	cbz	r0, 8012402 <_vfiscanf_r+0x16>
 80123fa:	6983      	ldr	r3, [r0, #24]
 80123fc:	b90b      	cbnz	r3, 8012402 <_vfiscanf_r+0x16>
 80123fe:	f7fe ff1f 	bl	8011240 <__sinit>
 8012402:	4b0b      	ldr	r3, [pc, #44]	; (8012430 <_vfiscanf_r+0x44>)
 8012404:	429c      	cmp	r4, r3
 8012406:	d108      	bne.n	801241a <_vfiscanf_r+0x2e>
 8012408:	686c      	ldr	r4, [r5, #4]
 801240a:	463b      	mov	r3, r7
 801240c:	4632      	mov	r2, r6
 801240e:	4621      	mov	r1, r4
 8012410:	4628      	mov	r0, r5
 8012412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012416:	f7ff be99 	b.w	801214c <__svfiscanf_r>
 801241a:	4b06      	ldr	r3, [pc, #24]	; (8012434 <_vfiscanf_r+0x48>)
 801241c:	429c      	cmp	r4, r3
 801241e:	d101      	bne.n	8012424 <_vfiscanf_r+0x38>
 8012420:	68ac      	ldr	r4, [r5, #8]
 8012422:	e7f2      	b.n	801240a <_vfiscanf_r+0x1e>
 8012424:	4b04      	ldr	r3, [pc, #16]	; (8012438 <_vfiscanf_r+0x4c>)
 8012426:	429c      	cmp	r4, r3
 8012428:	bf08      	it	eq
 801242a:	68ec      	ldreq	r4, [r5, #12]
 801242c:	e7ed      	b.n	801240a <_vfiscanf_r+0x1e>
 801242e:	bf00      	nop
 8012430:	080165b4 	.word	0x080165b4
 8012434:	080165d4 	.word	0x080165d4
 8012438:	08016594 	.word	0x08016594

0801243c <_scanf_float>:
 801243c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012440:	469a      	mov	sl, r3
 8012442:	688b      	ldr	r3, [r1, #8]
 8012444:	4616      	mov	r6, r2
 8012446:	1e5a      	subs	r2, r3, #1
 8012448:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801244c:	b087      	sub	sp, #28
 801244e:	bf83      	ittte	hi
 8012450:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012454:	189b      	addhi	r3, r3, r2
 8012456:	9301      	strhi	r3, [sp, #4]
 8012458:	2300      	movls	r3, #0
 801245a:	bf86      	itte	hi
 801245c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012460:	608b      	strhi	r3, [r1, #8]
 8012462:	9301      	strls	r3, [sp, #4]
 8012464:	680b      	ldr	r3, [r1, #0]
 8012466:	4688      	mov	r8, r1
 8012468:	f04f 0b00 	mov.w	fp, #0
 801246c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012470:	f848 3b1c 	str.w	r3, [r8], #28
 8012474:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012478:	4607      	mov	r7, r0
 801247a:	460c      	mov	r4, r1
 801247c:	4645      	mov	r5, r8
 801247e:	465a      	mov	r2, fp
 8012480:	46d9      	mov	r9, fp
 8012482:	f8cd b008 	str.w	fp, [sp, #8]
 8012486:	68a1      	ldr	r1, [r4, #8]
 8012488:	b181      	cbz	r1, 80124ac <_scanf_float+0x70>
 801248a:	6833      	ldr	r3, [r6, #0]
 801248c:	781b      	ldrb	r3, [r3, #0]
 801248e:	2b49      	cmp	r3, #73	; 0x49
 8012490:	d071      	beq.n	8012576 <_scanf_float+0x13a>
 8012492:	d84d      	bhi.n	8012530 <_scanf_float+0xf4>
 8012494:	2b39      	cmp	r3, #57	; 0x39
 8012496:	d840      	bhi.n	801251a <_scanf_float+0xde>
 8012498:	2b31      	cmp	r3, #49	; 0x31
 801249a:	f080 8088 	bcs.w	80125ae <_scanf_float+0x172>
 801249e:	2b2d      	cmp	r3, #45	; 0x2d
 80124a0:	f000 8090 	beq.w	80125c4 <_scanf_float+0x188>
 80124a4:	d815      	bhi.n	80124d2 <_scanf_float+0x96>
 80124a6:	2b2b      	cmp	r3, #43	; 0x2b
 80124a8:	f000 808c 	beq.w	80125c4 <_scanf_float+0x188>
 80124ac:	f1b9 0f00 	cmp.w	r9, #0
 80124b0:	d003      	beq.n	80124ba <_scanf_float+0x7e>
 80124b2:	6823      	ldr	r3, [r4, #0]
 80124b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80124b8:	6023      	str	r3, [r4, #0]
 80124ba:	3a01      	subs	r2, #1
 80124bc:	2a01      	cmp	r2, #1
 80124be:	f200 80ea 	bhi.w	8012696 <_scanf_float+0x25a>
 80124c2:	4545      	cmp	r5, r8
 80124c4:	f200 80dc 	bhi.w	8012680 <_scanf_float+0x244>
 80124c8:	2601      	movs	r6, #1
 80124ca:	4630      	mov	r0, r6
 80124cc:	b007      	add	sp, #28
 80124ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d2:	2b2e      	cmp	r3, #46	; 0x2e
 80124d4:	f000 809f 	beq.w	8012616 <_scanf_float+0x1da>
 80124d8:	2b30      	cmp	r3, #48	; 0x30
 80124da:	d1e7      	bne.n	80124ac <_scanf_float+0x70>
 80124dc:	6820      	ldr	r0, [r4, #0]
 80124de:	f410 7f80 	tst.w	r0, #256	; 0x100
 80124e2:	d064      	beq.n	80125ae <_scanf_float+0x172>
 80124e4:	9b01      	ldr	r3, [sp, #4]
 80124e6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80124ea:	6020      	str	r0, [r4, #0]
 80124ec:	f109 0901 	add.w	r9, r9, #1
 80124f0:	b11b      	cbz	r3, 80124fa <_scanf_float+0xbe>
 80124f2:	3b01      	subs	r3, #1
 80124f4:	3101      	adds	r1, #1
 80124f6:	9301      	str	r3, [sp, #4]
 80124f8:	60a1      	str	r1, [r4, #8]
 80124fa:	68a3      	ldr	r3, [r4, #8]
 80124fc:	3b01      	subs	r3, #1
 80124fe:	60a3      	str	r3, [r4, #8]
 8012500:	6923      	ldr	r3, [r4, #16]
 8012502:	3301      	adds	r3, #1
 8012504:	6123      	str	r3, [r4, #16]
 8012506:	6873      	ldr	r3, [r6, #4]
 8012508:	3b01      	subs	r3, #1
 801250a:	2b00      	cmp	r3, #0
 801250c:	6073      	str	r3, [r6, #4]
 801250e:	f340 80ac 	ble.w	801266a <_scanf_float+0x22e>
 8012512:	6833      	ldr	r3, [r6, #0]
 8012514:	3301      	adds	r3, #1
 8012516:	6033      	str	r3, [r6, #0]
 8012518:	e7b5      	b.n	8012486 <_scanf_float+0x4a>
 801251a:	2b45      	cmp	r3, #69	; 0x45
 801251c:	f000 8085 	beq.w	801262a <_scanf_float+0x1ee>
 8012520:	2b46      	cmp	r3, #70	; 0x46
 8012522:	d06a      	beq.n	80125fa <_scanf_float+0x1be>
 8012524:	2b41      	cmp	r3, #65	; 0x41
 8012526:	d1c1      	bne.n	80124ac <_scanf_float+0x70>
 8012528:	2a01      	cmp	r2, #1
 801252a:	d1bf      	bne.n	80124ac <_scanf_float+0x70>
 801252c:	2202      	movs	r2, #2
 801252e:	e046      	b.n	80125be <_scanf_float+0x182>
 8012530:	2b65      	cmp	r3, #101	; 0x65
 8012532:	d07a      	beq.n	801262a <_scanf_float+0x1ee>
 8012534:	d818      	bhi.n	8012568 <_scanf_float+0x12c>
 8012536:	2b54      	cmp	r3, #84	; 0x54
 8012538:	d066      	beq.n	8012608 <_scanf_float+0x1cc>
 801253a:	d811      	bhi.n	8012560 <_scanf_float+0x124>
 801253c:	2b4e      	cmp	r3, #78	; 0x4e
 801253e:	d1b5      	bne.n	80124ac <_scanf_float+0x70>
 8012540:	2a00      	cmp	r2, #0
 8012542:	d146      	bne.n	80125d2 <_scanf_float+0x196>
 8012544:	f1b9 0f00 	cmp.w	r9, #0
 8012548:	d145      	bne.n	80125d6 <_scanf_float+0x19a>
 801254a:	6821      	ldr	r1, [r4, #0]
 801254c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012550:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012554:	d13f      	bne.n	80125d6 <_scanf_float+0x19a>
 8012556:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801255a:	6021      	str	r1, [r4, #0]
 801255c:	2201      	movs	r2, #1
 801255e:	e02e      	b.n	80125be <_scanf_float+0x182>
 8012560:	2b59      	cmp	r3, #89	; 0x59
 8012562:	d01e      	beq.n	80125a2 <_scanf_float+0x166>
 8012564:	2b61      	cmp	r3, #97	; 0x61
 8012566:	e7de      	b.n	8012526 <_scanf_float+0xea>
 8012568:	2b6e      	cmp	r3, #110	; 0x6e
 801256a:	d0e9      	beq.n	8012540 <_scanf_float+0x104>
 801256c:	d815      	bhi.n	801259a <_scanf_float+0x15e>
 801256e:	2b66      	cmp	r3, #102	; 0x66
 8012570:	d043      	beq.n	80125fa <_scanf_float+0x1be>
 8012572:	2b69      	cmp	r3, #105	; 0x69
 8012574:	d19a      	bne.n	80124ac <_scanf_float+0x70>
 8012576:	f1bb 0f00 	cmp.w	fp, #0
 801257a:	d138      	bne.n	80125ee <_scanf_float+0x1b2>
 801257c:	f1b9 0f00 	cmp.w	r9, #0
 8012580:	d197      	bne.n	80124b2 <_scanf_float+0x76>
 8012582:	6821      	ldr	r1, [r4, #0]
 8012584:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012588:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801258c:	d195      	bne.n	80124ba <_scanf_float+0x7e>
 801258e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012592:	6021      	str	r1, [r4, #0]
 8012594:	f04f 0b01 	mov.w	fp, #1
 8012598:	e011      	b.n	80125be <_scanf_float+0x182>
 801259a:	2b74      	cmp	r3, #116	; 0x74
 801259c:	d034      	beq.n	8012608 <_scanf_float+0x1cc>
 801259e:	2b79      	cmp	r3, #121	; 0x79
 80125a0:	d184      	bne.n	80124ac <_scanf_float+0x70>
 80125a2:	f1bb 0f07 	cmp.w	fp, #7
 80125a6:	d181      	bne.n	80124ac <_scanf_float+0x70>
 80125a8:	f04f 0b08 	mov.w	fp, #8
 80125ac:	e007      	b.n	80125be <_scanf_float+0x182>
 80125ae:	eb12 0f0b 	cmn.w	r2, fp
 80125b2:	f47f af7b 	bne.w	80124ac <_scanf_float+0x70>
 80125b6:	6821      	ldr	r1, [r4, #0]
 80125b8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80125bc:	6021      	str	r1, [r4, #0]
 80125be:	702b      	strb	r3, [r5, #0]
 80125c0:	3501      	adds	r5, #1
 80125c2:	e79a      	b.n	80124fa <_scanf_float+0xbe>
 80125c4:	6821      	ldr	r1, [r4, #0]
 80125c6:	0608      	lsls	r0, r1, #24
 80125c8:	f57f af70 	bpl.w	80124ac <_scanf_float+0x70>
 80125cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80125d0:	e7f4      	b.n	80125bc <_scanf_float+0x180>
 80125d2:	2a02      	cmp	r2, #2
 80125d4:	d047      	beq.n	8012666 <_scanf_float+0x22a>
 80125d6:	f1bb 0f01 	cmp.w	fp, #1
 80125da:	d003      	beq.n	80125e4 <_scanf_float+0x1a8>
 80125dc:	f1bb 0f04 	cmp.w	fp, #4
 80125e0:	f47f af64 	bne.w	80124ac <_scanf_float+0x70>
 80125e4:	f10b 0b01 	add.w	fp, fp, #1
 80125e8:	fa5f fb8b 	uxtb.w	fp, fp
 80125ec:	e7e7      	b.n	80125be <_scanf_float+0x182>
 80125ee:	f1bb 0f03 	cmp.w	fp, #3
 80125f2:	d0f7      	beq.n	80125e4 <_scanf_float+0x1a8>
 80125f4:	f1bb 0f05 	cmp.w	fp, #5
 80125f8:	e7f2      	b.n	80125e0 <_scanf_float+0x1a4>
 80125fa:	f1bb 0f02 	cmp.w	fp, #2
 80125fe:	f47f af55 	bne.w	80124ac <_scanf_float+0x70>
 8012602:	f04f 0b03 	mov.w	fp, #3
 8012606:	e7da      	b.n	80125be <_scanf_float+0x182>
 8012608:	f1bb 0f06 	cmp.w	fp, #6
 801260c:	f47f af4e 	bne.w	80124ac <_scanf_float+0x70>
 8012610:	f04f 0b07 	mov.w	fp, #7
 8012614:	e7d3      	b.n	80125be <_scanf_float+0x182>
 8012616:	6821      	ldr	r1, [r4, #0]
 8012618:	0588      	lsls	r0, r1, #22
 801261a:	f57f af47 	bpl.w	80124ac <_scanf_float+0x70>
 801261e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012622:	6021      	str	r1, [r4, #0]
 8012624:	f8cd 9008 	str.w	r9, [sp, #8]
 8012628:	e7c9      	b.n	80125be <_scanf_float+0x182>
 801262a:	6821      	ldr	r1, [r4, #0]
 801262c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012630:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012634:	d006      	beq.n	8012644 <_scanf_float+0x208>
 8012636:	0548      	lsls	r0, r1, #21
 8012638:	f57f af38 	bpl.w	80124ac <_scanf_float+0x70>
 801263c:	f1b9 0f00 	cmp.w	r9, #0
 8012640:	f43f af3b 	beq.w	80124ba <_scanf_float+0x7e>
 8012644:	0588      	lsls	r0, r1, #22
 8012646:	bf58      	it	pl
 8012648:	9802      	ldrpl	r0, [sp, #8]
 801264a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801264e:	bf58      	it	pl
 8012650:	eba9 0000 	subpl.w	r0, r9, r0
 8012654:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012658:	bf58      	it	pl
 801265a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801265e:	6021      	str	r1, [r4, #0]
 8012660:	f04f 0900 	mov.w	r9, #0
 8012664:	e7ab      	b.n	80125be <_scanf_float+0x182>
 8012666:	2203      	movs	r2, #3
 8012668:	e7a9      	b.n	80125be <_scanf_float+0x182>
 801266a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801266e:	9205      	str	r2, [sp, #20]
 8012670:	4631      	mov	r1, r6
 8012672:	4638      	mov	r0, r7
 8012674:	4798      	blx	r3
 8012676:	9a05      	ldr	r2, [sp, #20]
 8012678:	2800      	cmp	r0, #0
 801267a:	f43f af04 	beq.w	8012486 <_scanf_float+0x4a>
 801267e:	e715      	b.n	80124ac <_scanf_float+0x70>
 8012680:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012684:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012688:	4632      	mov	r2, r6
 801268a:	4638      	mov	r0, r7
 801268c:	4798      	blx	r3
 801268e:	6923      	ldr	r3, [r4, #16]
 8012690:	3b01      	subs	r3, #1
 8012692:	6123      	str	r3, [r4, #16]
 8012694:	e715      	b.n	80124c2 <_scanf_float+0x86>
 8012696:	f10b 33ff 	add.w	r3, fp, #4294967295
 801269a:	2b06      	cmp	r3, #6
 801269c:	d80a      	bhi.n	80126b4 <_scanf_float+0x278>
 801269e:	f1bb 0f02 	cmp.w	fp, #2
 80126a2:	d968      	bls.n	8012776 <_scanf_float+0x33a>
 80126a4:	f1ab 0b03 	sub.w	fp, fp, #3
 80126a8:	fa5f fb8b 	uxtb.w	fp, fp
 80126ac:	eba5 0b0b 	sub.w	fp, r5, fp
 80126b0:	455d      	cmp	r5, fp
 80126b2:	d14b      	bne.n	801274c <_scanf_float+0x310>
 80126b4:	6823      	ldr	r3, [r4, #0]
 80126b6:	05da      	lsls	r2, r3, #23
 80126b8:	d51f      	bpl.n	80126fa <_scanf_float+0x2be>
 80126ba:	055b      	lsls	r3, r3, #21
 80126bc:	d468      	bmi.n	8012790 <_scanf_float+0x354>
 80126be:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80126c2:	6923      	ldr	r3, [r4, #16]
 80126c4:	2965      	cmp	r1, #101	; 0x65
 80126c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80126ca:	f105 3bff 	add.w	fp, r5, #4294967295
 80126ce:	6123      	str	r3, [r4, #16]
 80126d0:	d00d      	beq.n	80126ee <_scanf_float+0x2b2>
 80126d2:	2945      	cmp	r1, #69	; 0x45
 80126d4:	d00b      	beq.n	80126ee <_scanf_float+0x2b2>
 80126d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80126da:	4632      	mov	r2, r6
 80126dc:	4638      	mov	r0, r7
 80126de:	4798      	blx	r3
 80126e0:	6923      	ldr	r3, [r4, #16]
 80126e2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80126e6:	3b01      	subs	r3, #1
 80126e8:	f1a5 0b02 	sub.w	fp, r5, #2
 80126ec:	6123      	str	r3, [r4, #16]
 80126ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80126f2:	4632      	mov	r2, r6
 80126f4:	4638      	mov	r0, r7
 80126f6:	4798      	blx	r3
 80126f8:	465d      	mov	r5, fp
 80126fa:	6826      	ldr	r6, [r4, #0]
 80126fc:	f016 0610 	ands.w	r6, r6, #16
 8012700:	d17a      	bne.n	80127f8 <_scanf_float+0x3bc>
 8012702:	702e      	strb	r6, [r5, #0]
 8012704:	6823      	ldr	r3, [r4, #0]
 8012706:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801270e:	d142      	bne.n	8012796 <_scanf_float+0x35a>
 8012710:	9b02      	ldr	r3, [sp, #8]
 8012712:	eba9 0303 	sub.w	r3, r9, r3
 8012716:	425a      	negs	r2, r3
 8012718:	2b00      	cmp	r3, #0
 801271a:	d149      	bne.n	80127b0 <_scanf_float+0x374>
 801271c:	2200      	movs	r2, #0
 801271e:	4641      	mov	r1, r8
 8012720:	4638      	mov	r0, r7
 8012722:	f001 fa75 	bl	8013c10 <_strtod_r>
 8012726:	6825      	ldr	r5, [r4, #0]
 8012728:	f8da 3000 	ldr.w	r3, [sl]
 801272c:	f015 0f02 	tst.w	r5, #2
 8012730:	f103 0204 	add.w	r2, r3, #4
 8012734:	ec59 8b10 	vmov	r8, r9, d0
 8012738:	f8ca 2000 	str.w	r2, [sl]
 801273c:	d043      	beq.n	80127c6 <_scanf_float+0x38a>
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	e9c3 8900 	strd	r8, r9, [r3]
 8012744:	68e3      	ldr	r3, [r4, #12]
 8012746:	3301      	adds	r3, #1
 8012748:	60e3      	str	r3, [r4, #12]
 801274a:	e6be      	b.n	80124ca <_scanf_float+0x8e>
 801274c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012750:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012754:	4632      	mov	r2, r6
 8012756:	4638      	mov	r0, r7
 8012758:	4798      	blx	r3
 801275a:	6923      	ldr	r3, [r4, #16]
 801275c:	3b01      	subs	r3, #1
 801275e:	6123      	str	r3, [r4, #16]
 8012760:	e7a6      	b.n	80126b0 <_scanf_float+0x274>
 8012762:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012766:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801276a:	4632      	mov	r2, r6
 801276c:	4638      	mov	r0, r7
 801276e:	4798      	blx	r3
 8012770:	6923      	ldr	r3, [r4, #16]
 8012772:	3b01      	subs	r3, #1
 8012774:	6123      	str	r3, [r4, #16]
 8012776:	4545      	cmp	r5, r8
 8012778:	d8f3      	bhi.n	8012762 <_scanf_float+0x326>
 801277a:	e6a5      	b.n	80124c8 <_scanf_float+0x8c>
 801277c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012780:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012784:	4632      	mov	r2, r6
 8012786:	4638      	mov	r0, r7
 8012788:	4798      	blx	r3
 801278a:	6923      	ldr	r3, [r4, #16]
 801278c:	3b01      	subs	r3, #1
 801278e:	6123      	str	r3, [r4, #16]
 8012790:	4545      	cmp	r5, r8
 8012792:	d8f3      	bhi.n	801277c <_scanf_float+0x340>
 8012794:	e698      	b.n	80124c8 <_scanf_float+0x8c>
 8012796:	9b03      	ldr	r3, [sp, #12]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d0bf      	beq.n	801271c <_scanf_float+0x2e0>
 801279c:	9904      	ldr	r1, [sp, #16]
 801279e:	230a      	movs	r3, #10
 80127a0:	4632      	mov	r2, r6
 80127a2:	3101      	adds	r1, #1
 80127a4:	4638      	mov	r0, r7
 80127a6:	f001 fabf 	bl	8013d28 <_strtol_r>
 80127aa:	9b03      	ldr	r3, [sp, #12]
 80127ac:	9d04      	ldr	r5, [sp, #16]
 80127ae:	1ac2      	subs	r2, r0, r3
 80127b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80127b4:	429d      	cmp	r5, r3
 80127b6:	bf28      	it	cs
 80127b8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80127bc:	490f      	ldr	r1, [pc, #60]	; (80127fc <_scanf_float+0x3c0>)
 80127be:	4628      	mov	r0, r5
 80127c0:	f000 fbb2 	bl	8012f28 <siprintf>
 80127c4:	e7aa      	b.n	801271c <_scanf_float+0x2e0>
 80127c6:	f015 0504 	ands.w	r5, r5, #4
 80127ca:	d1b8      	bne.n	801273e <_scanf_float+0x302>
 80127cc:	681f      	ldr	r7, [r3, #0]
 80127ce:	ee10 2a10 	vmov	r2, s0
 80127d2:	464b      	mov	r3, r9
 80127d4:	ee10 0a10 	vmov	r0, s0
 80127d8:	4649      	mov	r1, r9
 80127da:	f7f6 f8df 	bl	800899c <__aeabi_dcmpun>
 80127de:	b128      	cbz	r0, 80127ec <_scanf_float+0x3b0>
 80127e0:	4628      	mov	r0, r5
 80127e2:	f000 fb9b 	bl	8012f1c <nanf>
 80127e6:	ed87 0a00 	vstr	s0, [r7]
 80127ea:	e7ab      	b.n	8012744 <_scanf_float+0x308>
 80127ec:	4640      	mov	r0, r8
 80127ee:	4649      	mov	r1, r9
 80127f0:	f7f6 f932 	bl	8008a58 <__aeabi_d2f>
 80127f4:	6038      	str	r0, [r7, #0]
 80127f6:	e7a5      	b.n	8012744 <_scanf_float+0x308>
 80127f8:	2600      	movs	r6, #0
 80127fa:	e666      	b.n	80124ca <_scanf_float+0x8e>
 80127fc:	0801663b 	.word	0x0801663b

08012800 <_scanf_chars>:
 8012800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012804:	4615      	mov	r5, r2
 8012806:	688a      	ldr	r2, [r1, #8]
 8012808:	4680      	mov	r8, r0
 801280a:	460c      	mov	r4, r1
 801280c:	b932      	cbnz	r2, 801281c <_scanf_chars+0x1c>
 801280e:	698a      	ldr	r2, [r1, #24]
 8012810:	2a00      	cmp	r2, #0
 8012812:	bf14      	ite	ne
 8012814:	f04f 32ff 	movne.w	r2, #4294967295
 8012818:	2201      	moveq	r2, #1
 801281a:	608a      	str	r2, [r1, #8]
 801281c:	6822      	ldr	r2, [r4, #0]
 801281e:	06d1      	lsls	r1, r2, #27
 8012820:	bf5f      	itttt	pl
 8012822:	681a      	ldrpl	r2, [r3, #0]
 8012824:	1d11      	addpl	r1, r2, #4
 8012826:	6019      	strpl	r1, [r3, #0]
 8012828:	6817      	ldrpl	r7, [r2, #0]
 801282a:	2600      	movs	r6, #0
 801282c:	69a3      	ldr	r3, [r4, #24]
 801282e:	b1db      	cbz	r3, 8012868 <_scanf_chars+0x68>
 8012830:	2b01      	cmp	r3, #1
 8012832:	d107      	bne.n	8012844 <_scanf_chars+0x44>
 8012834:	682b      	ldr	r3, [r5, #0]
 8012836:	6962      	ldr	r2, [r4, #20]
 8012838:	781b      	ldrb	r3, [r3, #0]
 801283a:	5cd3      	ldrb	r3, [r2, r3]
 801283c:	b9a3      	cbnz	r3, 8012868 <_scanf_chars+0x68>
 801283e:	2e00      	cmp	r6, #0
 8012840:	d132      	bne.n	80128a8 <_scanf_chars+0xa8>
 8012842:	e006      	b.n	8012852 <_scanf_chars+0x52>
 8012844:	2b02      	cmp	r3, #2
 8012846:	d007      	beq.n	8012858 <_scanf_chars+0x58>
 8012848:	2e00      	cmp	r6, #0
 801284a:	d12d      	bne.n	80128a8 <_scanf_chars+0xa8>
 801284c:	69a3      	ldr	r3, [r4, #24]
 801284e:	2b01      	cmp	r3, #1
 8012850:	d12a      	bne.n	80128a8 <_scanf_chars+0xa8>
 8012852:	2001      	movs	r0, #1
 8012854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012858:	f002 fe22 	bl	80154a0 <__locale_ctype_ptr>
 801285c:	682b      	ldr	r3, [r5, #0]
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	4418      	add	r0, r3
 8012862:	7843      	ldrb	r3, [r0, #1]
 8012864:	071b      	lsls	r3, r3, #28
 8012866:	d4ef      	bmi.n	8012848 <_scanf_chars+0x48>
 8012868:	6823      	ldr	r3, [r4, #0]
 801286a:	06da      	lsls	r2, r3, #27
 801286c:	bf5e      	ittt	pl
 801286e:	682b      	ldrpl	r3, [r5, #0]
 8012870:	781b      	ldrbpl	r3, [r3, #0]
 8012872:	703b      	strbpl	r3, [r7, #0]
 8012874:	682a      	ldr	r2, [r5, #0]
 8012876:	686b      	ldr	r3, [r5, #4]
 8012878:	f102 0201 	add.w	r2, r2, #1
 801287c:	602a      	str	r2, [r5, #0]
 801287e:	68a2      	ldr	r2, [r4, #8]
 8012880:	f103 33ff 	add.w	r3, r3, #4294967295
 8012884:	f102 32ff 	add.w	r2, r2, #4294967295
 8012888:	606b      	str	r3, [r5, #4]
 801288a:	f106 0601 	add.w	r6, r6, #1
 801288e:	bf58      	it	pl
 8012890:	3701      	addpl	r7, #1
 8012892:	60a2      	str	r2, [r4, #8]
 8012894:	b142      	cbz	r2, 80128a8 <_scanf_chars+0xa8>
 8012896:	2b00      	cmp	r3, #0
 8012898:	dcc8      	bgt.n	801282c <_scanf_chars+0x2c>
 801289a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801289e:	4629      	mov	r1, r5
 80128a0:	4640      	mov	r0, r8
 80128a2:	4798      	blx	r3
 80128a4:	2800      	cmp	r0, #0
 80128a6:	d0c1      	beq.n	801282c <_scanf_chars+0x2c>
 80128a8:	6823      	ldr	r3, [r4, #0]
 80128aa:	f013 0310 	ands.w	r3, r3, #16
 80128ae:	d105      	bne.n	80128bc <_scanf_chars+0xbc>
 80128b0:	68e2      	ldr	r2, [r4, #12]
 80128b2:	3201      	adds	r2, #1
 80128b4:	60e2      	str	r2, [r4, #12]
 80128b6:	69a2      	ldr	r2, [r4, #24]
 80128b8:	b102      	cbz	r2, 80128bc <_scanf_chars+0xbc>
 80128ba:	703b      	strb	r3, [r7, #0]
 80128bc:	6923      	ldr	r3, [r4, #16]
 80128be:	441e      	add	r6, r3
 80128c0:	6126      	str	r6, [r4, #16]
 80128c2:	2000      	movs	r0, #0
 80128c4:	e7c6      	b.n	8012854 <_scanf_chars+0x54>
	...

080128c8 <_scanf_i>:
 80128c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128cc:	469a      	mov	sl, r3
 80128ce:	4b74      	ldr	r3, [pc, #464]	; (8012aa0 <_scanf_i+0x1d8>)
 80128d0:	460c      	mov	r4, r1
 80128d2:	4683      	mov	fp, r0
 80128d4:	4616      	mov	r6, r2
 80128d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80128da:	b087      	sub	sp, #28
 80128dc:	ab03      	add	r3, sp, #12
 80128de:	68a7      	ldr	r7, [r4, #8]
 80128e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80128e4:	4b6f      	ldr	r3, [pc, #444]	; (8012aa4 <_scanf_i+0x1dc>)
 80128e6:	69a1      	ldr	r1, [r4, #24]
 80128e8:	4a6f      	ldr	r2, [pc, #444]	; (8012aa8 <_scanf_i+0x1e0>)
 80128ea:	2903      	cmp	r1, #3
 80128ec:	bf08      	it	eq
 80128ee:	461a      	moveq	r2, r3
 80128f0:	1e7b      	subs	r3, r7, #1
 80128f2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80128f6:	bf84      	itt	hi
 80128f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80128fc:	60a3      	strhi	r3, [r4, #8]
 80128fe:	6823      	ldr	r3, [r4, #0]
 8012900:	9200      	str	r2, [sp, #0]
 8012902:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012906:	bf88      	it	hi
 8012908:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801290c:	f104 091c 	add.w	r9, r4, #28
 8012910:	6023      	str	r3, [r4, #0]
 8012912:	bf8c      	ite	hi
 8012914:	197f      	addhi	r7, r7, r5
 8012916:	2700      	movls	r7, #0
 8012918:	464b      	mov	r3, r9
 801291a:	f04f 0800 	mov.w	r8, #0
 801291e:	9301      	str	r3, [sp, #4]
 8012920:	6831      	ldr	r1, [r6, #0]
 8012922:	ab03      	add	r3, sp, #12
 8012924:	2202      	movs	r2, #2
 8012926:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801292a:	7809      	ldrb	r1, [r1, #0]
 801292c:	f7f5 fb90 	bl	8008050 <memchr>
 8012930:	9b01      	ldr	r3, [sp, #4]
 8012932:	b330      	cbz	r0, 8012982 <_scanf_i+0xba>
 8012934:	f1b8 0f01 	cmp.w	r8, #1
 8012938:	d15a      	bne.n	80129f0 <_scanf_i+0x128>
 801293a:	6862      	ldr	r2, [r4, #4]
 801293c:	b92a      	cbnz	r2, 801294a <_scanf_i+0x82>
 801293e:	6822      	ldr	r2, [r4, #0]
 8012940:	2108      	movs	r1, #8
 8012942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012946:	6061      	str	r1, [r4, #4]
 8012948:	6022      	str	r2, [r4, #0]
 801294a:	6822      	ldr	r2, [r4, #0]
 801294c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012950:	6022      	str	r2, [r4, #0]
 8012952:	68a2      	ldr	r2, [r4, #8]
 8012954:	1e51      	subs	r1, r2, #1
 8012956:	60a1      	str	r1, [r4, #8]
 8012958:	b19a      	cbz	r2, 8012982 <_scanf_i+0xba>
 801295a:	6832      	ldr	r2, [r6, #0]
 801295c:	1c51      	adds	r1, r2, #1
 801295e:	6031      	str	r1, [r6, #0]
 8012960:	7812      	ldrb	r2, [r2, #0]
 8012962:	701a      	strb	r2, [r3, #0]
 8012964:	1c5d      	adds	r5, r3, #1
 8012966:	6873      	ldr	r3, [r6, #4]
 8012968:	3b01      	subs	r3, #1
 801296a:	2b00      	cmp	r3, #0
 801296c:	6073      	str	r3, [r6, #4]
 801296e:	dc07      	bgt.n	8012980 <_scanf_i+0xb8>
 8012970:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012974:	4631      	mov	r1, r6
 8012976:	4658      	mov	r0, fp
 8012978:	4798      	blx	r3
 801297a:	2800      	cmp	r0, #0
 801297c:	f040 8086 	bne.w	8012a8c <_scanf_i+0x1c4>
 8012980:	462b      	mov	r3, r5
 8012982:	f108 0801 	add.w	r8, r8, #1
 8012986:	f1b8 0f03 	cmp.w	r8, #3
 801298a:	d1c8      	bne.n	801291e <_scanf_i+0x56>
 801298c:	6862      	ldr	r2, [r4, #4]
 801298e:	b90a      	cbnz	r2, 8012994 <_scanf_i+0xcc>
 8012990:	220a      	movs	r2, #10
 8012992:	6062      	str	r2, [r4, #4]
 8012994:	6862      	ldr	r2, [r4, #4]
 8012996:	4945      	ldr	r1, [pc, #276]	; (8012aac <_scanf_i+0x1e4>)
 8012998:	6960      	ldr	r0, [r4, #20]
 801299a:	9301      	str	r3, [sp, #4]
 801299c:	1a89      	subs	r1, r1, r2
 801299e:	f000 f9d5 	bl	8012d4c <__sccl>
 80129a2:	9b01      	ldr	r3, [sp, #4]
 80129a4:	f04f 0800 	mov.w	r8, #0
 80129a8:	461d      	mov	r5, r3
 80129aa:	68a3      	ldr	r3, [r4, #8]
 80129ac:	6822      	ldr	r2, [r4, #0]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d03a      	beq.n	8012a28 <_scanf_i+0x160>
 80129b2:	6831      	ldr	r1, [r6, #0]
 80129b4:	6960      	ldr	r0, [r4, #20]
 80129b6:	f891 c000 	ldrb.w	ip, [r1]
 80129ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 80129be:	2800      	cmp	r0, #0
 80129c0:	d032      	beq.n	8012a28 <_scanf_i+0x160>
 80129c2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80129c6:	d121      	bne.n	8012a0c <_scanf_i+0x144>
 80129c8:	0510      	lsls	r0, r2, #20
 80129ca:	d51f      	bpl.n	8012a0c <_scanf_i+0x144>
 80129cc:	f108 0801 	add.w	r8, r8, #1
 80129d0:	b117      	cbz	r7, 80129d8 <_scanf_i+0x110>
 80129d2:	3301      	adds	r3, #1
 80129d4:	3f01      	subs	r7, #1
 80129d6:	60a3      	str	r3, [r4, #8]
 80129d8:	6873      	ldr	r3, [r6, #4]
 80129da:	3b01      	subs	r3, #1
 80129dc:	2b00      	cmp	r3, #0
 80129de:	6073      	str	r3, [r6, #4]
 80129e0:	dd1b      	ble.n	8012a1a <_scanf_i+0x152>
 80129e2:	6833      	ldr	r3, [r6, #0]
 80129e4:	3301      	adds	r3, #1
 80129e6:	6033      	str	r3, [r6, #0]
 80129e8:	68a3      	ldr	r3, [r4, #8]
 80129ea:	3b01      	subs	r3, #1
 80129ec:	60a3      	str	r3, [r4, #8]
 80129ee:	e7dc      	b.n	80129aa <_scanf_i+0xe2>
 80129f0:	f1b8 0f02 	cmp.w	r8, #2
 80129f4:	d1ad      	bne.n	8012952 <_scanf_i+0x8a>
 80129f6:	6822      	ldr	r2, [r4, #0]
 80129f8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80129fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012a00:	d1bf      	bne.n	8012982 <_scanf_i+0xba>
 8012a02:	2110      	movs	r1, #16
 8012a04:	6061      	str	r1, [r4, #4]
 8012a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012a0a:	e7a1      	b.n	8012950 <_scanf_i+0x88>
 8012a0c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012a10:	6022      	str	r2, [r4, #0]
 8012a12:	780b      	ldrb	r3, [r1, #0]
 8012a14:	702b      	strb	r3, [r5, #0]
 8012a16:	3501      	adds	r5, #1
 8012a18:	e7de      	b.n	80129d8 <_scanf_i+0x110>
 8012a1a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012a1e:	4631      	mov	r1, r6
 8012a20:	4658      	mov	r0, fp
 8012a22:	4798      	blx	r3
 8012a24:	2800      	cmp	r0, #0
 8012a26:	d0df      	beq.n	80129e8 <_scanf_i+0x120>
 8012a28:	6823      	ldr	r3, [r4, #0]
 8012a2a:	05d9      	lsls	r1, r3, #23
 8012a2c:	d50c      	bpl.n	8012a48 <_scanf_i+0x180>
 8012a2e:	454d      	cmp	r5, r9
 8012a30:	d908      	bls.n	8012a44 <_scanf_i+0x17c>
 8012a32:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012a36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a3a:	4632      	mov	r2, r6
 8012a3c:	4658      	mov	r0, fp
 8012a3e:	4798      	blx	r3
 8012a40:	1e6f      	subs	r7, r5, #1
 8012a42:	463d      	mov	r5, r7
 8012a44:	454d      	cmp	r5, r9
 8012a46:	d029      	beq.n	8012a9c <_scanf_i+0x1d4>
 8012a48:	6822      	ldr	r2, [r4, #0]
 8012a4a:	f012 0210 	ands.w	r2, r2, #16
 8012a4e:	d113      	bne.n	8012a78 <_scanf_i+0x1b0>
 8012a50:	702a      	strb	r2, [r5, #0]
 8012a52:	6863      	ldr	r3, [r4, #4]
 8012a54:	9e00      	ldr	r6, [sp, #0]
 8012a56:	4649      	mov	r1, r9
 8012a58:	4658      	mov	r0, fp
 8012a5a:	47b0      	blx	r6
 8012a5c:	f8da 3000 	ldr.w	r3, [sl]
 8012a60:	6821      	ldr	r1, [r4, #0]
 8012a62:	1d1a      	adds	r2, r3, #4
 8012a64:	f8ca 2000 	str.w	r2, [sl]
 8012a68:	f011 0f20 	tst.w	r1, #32
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	d010      	beq.n	8012a92 <_scanf_i+0x1ca>
 8012a70:	6018      	str	r0, [r3, #0]
 8012a72:	68e3      	ldr	r3, [r4, #12]
 8012a74:	3301      	adds	r3, #1
 8012a76:	60e3      	str	r3, [r4, #12]
 8012a78:	eba5 0509 	sub.w	r5, r5, r9
 8012a7c:	44a8      	add	r8, r5
 8012a7e:	6925      	ldr	r5, [r4, #16]
 8012a80:	4445      	add	r5, r8
 8012a82:	6125      	str	r5, [r4, #16]
 8012a84:	2000      	movs	r0, #0
 8012a86:	b007      	add	sp, #28
 8012a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a8c:	f04f 0800 	mov.w	r8, #0
 8012a90:	e7ca      	b.n	8012a28 <_scanf_i+0x160>
 8012a92:	07ca      	lsls	r2, r1, #31
 8012a94:	bf4c      	ite	mi
 8012a96:	8018      	strhmi	r0, [r3, #0]
 8012a98:	6018      	strpl	r0, [r3, #0]
 8012a9a:	e7ea      	b.n	8012a72 <_scanf_i+0x1aa>
 8012a9c:	2001      	movs	r0, #1
 8012a9e:	e7f2      	b.n	8012a86 <_scanf_i+0x1be>
 8012aa0:	08016170 	.word	0x08016170
 8012aa4:	08013d29 	.word	0x08013d29
 8012aa8:	08013e41 	.word	0x08013e41
 8012aac:	08016650 	.word	0x08016650

08012ab0 <iprintf>:
 8012ab0:	b40f      	push	{r0, r1, r2, r3}
 8012ab2:	4b0a      	ldr	r3, [pc, #40]	; (8012adc <iprintf+0x2c>)
 8012ab4:	b513      	push	{r0, r1, r4, lr}
 8012ab6:	681c      	ldr	r4, [r3, #0]
 8012ab8:	b124      	cbz	r4, 8012ac4 <iprintf+0x14>
 8012aba:	69a3      	ldr	r3, [r4, #24]
 8012abc:	b913      	cbnz	r3, 8012ac4 <iprintf+0x14>
 8012abe:	4620      	mov	r0, r4
 8012ac0:	f7fe fbbe 	bl	8011240 <__sinit>
 8012ac4:	ab05      	add	r3, sp, #20
 8012ac6:	9a04      	ldr	r2, [sp, #16]
 8012ac8:	68a1      	ldr	r1, [r4, #8]
 8012aca:	9301      	str	r3, [sp, #4]
 8012acc:	4620      	mov	r0, r4
 8012ace:	f7fe fdcb 	bl	8011668 <_vfiprintf_r>
 8012ad2:	b002      	add	sp, #8
 8012ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ad8:	b004      	add	sp, #16
 8012ada:	4770      	bx	lr
 8012adc:	20000038 	.word	0x20000038

08012ae0 <putchar>:
 8012ae0:	b538      	push	{r3, r4, r5, lr}
 8012ae2:	4b08      	ldr	r3, [pc, #32]	; (8012b04 <putchar+0x24>)
 8012ae4:	681c      	ldr	r4, [r3, #0]
 8012ae6:	4605      	mov	r5, r0
 8012ae8:	b124      	cbz	r4, 8012af4 <putchar+0x14>
 8012aea:	69a3      	ldr	r3, [r4, #24]
 8012aec:	b913      	cbnz	r3, 8012af4 <putchar+0x14>
 8012aee:	4620      	mov	r0, r4
 8012af0:	f7fe fba6 	bl	8011240 <__sinit>
 8012af4:	68a2      	ldr	r2, [r4, #8]
 8012af6:	4629      	mov	r1, r5
 8012af8:	4620      	mov	r0, r4
 8012afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012afe:	f003 bab9 	b.w	8016074 <_putc_r>
 8012b02:	bf00      	nop
 8012b04:	20000038 	.word	0x20000038

08012b08 <_puts_r>:
 8012b08:	b570      	push	{r4, r5, r6, lr}
 8012b0a:	460e      	mov	r6, r1
 8012b0c:	4605      	mov	r5, r0
 8012b0e:	b118      	cbz	r0, 8012b18 <_puts_r+0x10>
 8012b10:	6983      	ldr	r3, [r0, #24]
 8012b12:	b90b      	cbnz	r3, 8012b18 <_puts_r+0x10>
 8012b14:	f7fe fb94 	bl	8011240 <__sinit>
 8012b18:	69ab      	ldr	r3, [r5, #24]
 8012b1a:	68ac      	ldr	r4, [r5, #8]
 8012b1c:	b913      	cbnz	r3, 8012b24 <_puts_r+0x1c>
 8012b1e:	4628      	mov	r0, r5
 8012b20:	f7fe fb8e 	bl	8011240 <__sinit>
 8012b24:	4b23      	ldr	r3, [pc, #140]	; (8012bb4 <_puts_r+0xac>)
 8012b26:	429c      	cmp	r4, r3
 8012b28:	d117      	bne.n	8012b5a <_puts_r+0x52>
 8012b2a:	686c      	ldr	r4, [r5, #4]
 8012b2c:	89a3      	ldrh	r3, [r4, #12]
 8012b2e:	071b      	lsls	r3, r3, #28
 8012b30:	d51d      	bpl.n	8012b6e <_puts_r+0x66>
 8012b32:	6923      	ldr	r3, [r4, #16]
 8012b34:	b1db      	cbz	r3, 8012b6e <_puts_r+0x66>
 8012b36:	3e01      	subs	r6, #1
 8012b38:	68a3      	ldr	r3, [r4, #8]
 8012b3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012b3e:	3b01      	subs	r3, #1
 8012b40:	60a3      	str	r3, [r4, #8]
 8012b42:	b9e9      	cbnz	r1, 8012b80 <_puts_r+0x78>
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	da2e      	bge.n	8012ba6 <_puts_r+0x9e>
 8012b48:	4622      	mov	r2, r4
 8012b4a:	210a      	movs	r1, #10
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	f001 fa35 	bl	8013fbc <__swbuf_r>
 8012b52:	3001      	adds	r0, #1
 8012b54:	d011      	beq.n	8012b7a <_puts_r+0x72>
 8012b56:	200a      	movs	r0, #10
 8012b58:	e011      	b.n	8012b7e <_puts_r+0x76>
 8012b5a:	4b17      	ldr	r3, [pc, #92]	; (8012bb8 <_puts_r+0xb0>)
 8012b5c:	429c      	cmp	r4, r3
 8012b5e:	d101      	bne.n	8012b64 <_puts_r+0x5c>
 8012b60:	68ac      	ldr	r4, [r5, #8]
 8012b62:	e7e3      	b.n	8012b2c <_puts_r+0x24>
 8012b64:	4b15      	ldr	r3, [pc, #84]	; (8012bbc <_puts_r+0xb4>)
 8012b66:	429c      	cmp	r4, r3
 8012b68:	bf08      	it	eq
 8012b6a:	68ec      	ldreq	r4, [r5, #12]
 8012b6c:	e7de      	b.n	8012b2c <_puts_r+0x24>
 8012b6e:	4621      	mov	r1, r4
 8012b70:	4628      	mov	r0, r5
 8012b72:	f001 fa87 	bl	8014084 <__swsetup_r>
 8012b76:	2800      	cmp	r0, #0
 8012b78:	d0dd      	beq.n	8012b36 <_puts_r+0x2e>
 8012b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8012b7e:	bd70      	pop	{r4, r5, r6, pc}
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	da04      	bge.n	8012b8e <_puts_r+0x86>
 8012b84:	69a2      	ldr	r2, [r4, #24]
 8012b86:	429a      	cmp	r2, r3
 8012b88:	dc06      	bgt.n	8012b98 <_puts_r+0x90>
 8012b8a:	290a      	cmp	r1, #10
 8012b8c:	d004      	beq.n	8012b98 <_puts_r+0x90>
 8012b8e:	6823      	ldr	r3, [r4, #0]
 8012b90:	1c5a      	adds	r2, r3, #1
 8012b92:	6022      	str	r2, [r4, #0]
 8012b94:	7019      	strb	r1, [r3, #0]
 8012b96:	e7cf      	b.n	8012b38 <_puts_r+0x30>
 8012b98:	4622      	mov	r2, r4
 8012b9a:	4628      	mov	r0, r5
 8012b9c:	f001 fa0e 	bl	8013fbc <__swbuf_r>
 8012ba0:	3001      	adds	r0, #1
 8012ba2:	d1c9      	bne.n	8012b38 <_puts_r+0x30>
 8012ba4:	e7e9      	b.n	8012b7a <_puts_r+0x72>
 8012ba6:	6823      	ldr	r3, [r4, #0]
 8012ba8:	200a      	movs	r0, #10
 8012baa:	1c5a      	adds	r2, r3, #1
 8012bac:	6022      	str	r2, [r4, #0]
 8012bae:	7018      	strb	r0, [r3, #0]
 8012bb0:	e7e5      	b.n	8012b7e <_puts_r+0x76>
 8012bb2:	bf00      	nop
 8012bb4:	080165b4 	.word	0x080165b4
 8012bb8:	080165d4 	.word	0x080165d4
 8012bbc:	08016594 	.word	0x08016594

08012bc0 <puts>:
 8012bc0:	4b02      	ldr	r3, [pc, #8]	; (8012bcc <puts+0xc>)
 8012bc2:	4601      	mov	r1, r0
 8012bc4:	6818      	ldr	r0, [r3, #0]
 8012bc6:	f7ff bf9f 	b.w	8012b08 <_puts_r>
 8012bca:	bf00      	nop
 8012bcc:	20000038 	.word	0x20000038

08012bd0 <lflush>:
 8012bd0:	8983      	ldrh	r3, [r0, #12]
 8012bd2:	f003 0309 	and.w	r3, r3, #9
 8012bd6:	2b09      	cmp	r3, #9
 8012bd8:	d101      	bne.n	8012bde <lflush+0xe>
 8012bda:	f7fe badf 	b.w	801119c <fflush>
 8012bde:	2000      	movs	r0, #0
 8012be0:	4770      	bx	lr
	...

08012be4 <__srefill_r>:
 8012be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012be6:	460c      	mov	r4, r1
 8012be8:	4605      	mov	r5, r0
 8012bea:	b118      	cbz	r0, 8012bf4 <__srefill_r+0x10>
 8012bec:	6983      	ldr	r3, [r0, #24]
 8012bee:	b90b      	cbnz	r3, 8012bf4 <__srefill_r+0x10>
 8012bf0:	f7fe fb26 	bl	8011240 <__sinit>
 8012bf4:	4b3c      	ldr	r3, [pc, #240]	; (8012ce8 <__srefill_r+0x104>)
 8012bf6:	429c      	cmp	r4, r3
 8012bf8:	d10a      	bne.n	8012c10 <__srefill_r+0x2c>
 8012bfa:	686c      	ldr	r4, [r5, #4]
 8012bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c00:	2300      	movs	r3, #0
 8012c02:	6063      	str	r3, [r4, #4]
 8012c04:	b293      	uxth	r3, r2
 8012c06:	069e      	lsls	r6, r3, #26
 8012c08:	d50c      	bpl.n	8012c24 <__srefill_r+0x40>
 8012c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8012c0e:	e067      	b.n	8012ce0 <__srefill_r+0xfc>
 8012c10:	4b36      	ldr	r3, [pc, #216]	; (8012cec <__srefill_r+0x108>)
 8012c12:	429c      	cmp	r4, r3
 8012c14:	d101      	bne.n	8012c1a <__srefill_r+0x36>
 8012c16:	68ac      	ldr	r4, [r5, #8]
 8012c18:	e7f0      	b.n	8012bfc <__srefill_r+0x18>
 8012c1a:	4b35      	ldr	r3, [pc, #212]	; (8012cf0 <__srefill_r+0x10c>)
 8012c1c:	429c      	cmp	r4, r3
 8012c1e:	bf08      	it	eq
 8012c20:	68ec      	ldreq	r4, [r5, #12]
 8012c22:	e7eb      	b.n	8012bfc <__srefill_r+0x18>
 8012c24:	0758      	lsls	r0, r3, #29
 8012c26:	d449      	bmi.n	8012cbc <__srefill_r+0xd8>
 8012c28:	06d9      	lsls	r1, r3, #27
 8012c2a:	d405      	bmi.n	8012c38 <__srefill_r+0x54>
 8012c2c:	2309      	movs	r3, #9
 8012c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012c32:	602b      	str	r3, [r5, #0]
 8012c34:	81a2      	strh	r2, [r4, #12]
 8012c36:	e7e8      	b.n	8012c0a <__srefill_r+0x26>
 8012c38:	071a      	lsls	r2, r3, #28
 8012c3a:	d50b      	bpl.n	8012c54 <__srefill_r+0x70>
 8012c3c:	4621      	mov	r1, r4
 8012c3e:	4628      	mov	r0, r5
 8012c40:	f7fe fa82 	bl	8011148 <_fflush_r>
 8012c44:	2800      	cmp	r0, #0
 8012c46:	d1e0      	bne.n	8012c0a <__srefill_r+0x26>
 8012c48:	89a3      	ldrh	r3, [r4, #12]
 8012c4a:	60a0      	str	r0, [r4, #8]
 8012c4c:	f023 0308 	bic.w	r3, r3, #8
 8012c50:	81a3      	strh	r3, [r4, #12]
 8012c52:	61a0      	str	r0, [r4, #24]
 8012c54:	89a3      	ldrh	r3, [r4, #12]
 8012c56:	f043 0304 	orr.w	r3, r3, #4
 8012c5a:	81a3      	strh	r3, [r4, #12]
 8012c5c:	6923      	ldr	r3, [r4, #16]
 8012c5e:	b91b      	cbnz	r3, 8012c68 <__srefill_r+0x84>
 8012c60:	4621      	mov	r1, r4
 8012c62:	4628      	mov	r0, r5
 8012c64:	f7fe fbda 	bl	801141c <__smakebuf_r>
 8012c68:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8012c6c:	b2be      	uxth	r6, r7
 8012c6e:	07b3      	lsls	r3, r6, #30
 8012c70:	d00f      	beq.n	8012c92 <__srefill_r+0xae>
 8012c72:	2301      	movs	r3, #1
 8012c74:	81a3      	strh	r3, [r4, #12]
 8012c76:	4b1f      	ldr	r3, [pc, #124]	; (8012cf4 <__srefill_r+0x110>)
 8012c78:	491f      	ldr	r1, [pc, #124]	; (8012cf8 <__srefill_r+0x114>)
 8012c7a:	6818      	ldr	r0, [r3, #0]
 8012c7c:	f006 0609 	and.w	r6, r6, #9
 8012c80:	f7fe fb4a 	bl	8011318 <_fwalk>
 8012c84:	2e09      	cmp	r6, #9
 8012c86:	81a7      	strh	r7, [r4, #12]
 8012c88:	d103      	bne.n	8012c92 <__srefill_r+0xae>
 8012c8a:	4621      	mov	r1, r4
 8012c8c:	4628      	mov	r0, r5
 8012c8e:	f7fe f9d5 	bl	801103c <__sflush_r>
 8012c92:	6922      	ldr	r2, [r4, #16]
 8012c94:	6022      	str	r2, [r4, #0]
 8012c96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012c98:	6963      	ldr	r3, [r4, #20]
 8012c9a:	6a21      	ldr	r1, [r4, #32]
 8012c9c:	4628      	mov	r0, r5
 8012c9e:	47b0      	blx	r6
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	6060      	str	r0, [r4, #4]
 8012ca4:	dc1d      	bgt.n	8012ce2 <__srefill_r+0xfe>
 8012ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012caa:	bf17      	itett	ne
 8012cac:	2200      	movne	r2, #0
 8012cae:	f043 0320 	orreq.w	r3, r3, #32
 8012cb2:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8012cb6:	6062      	strne	r2, [r4, #4]
 8012cb8:	81a3      	strh	r3, [r4, #12]
 8012cba:	e7a6      	b.n	8012c0a <__srefill_r+0x26>
 8012cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012cbe:	2900      	cmp	r1, #0
 8012cc0:	d0cc      	beq.n	8012c5c <__srefill_r+0x78>
 8012cc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012cc6:	4299      	cmp	r1, r3
 8012cc8:	d002      	beq.n	8012cd0 <__srefill_r+0xec>
 8012cca:	4628      	mov	r0, r5
 8012ccc:	f7fe fbfa 	bl	80114c4 <_free_r>
 8012cd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012cd2:	6063      	str	r3, [r4, #4]
 8012cd4:	2000      	movs	r0, #0
 8012cd6:	6360      	str	r0, [r4, #52]	; 0x34
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d0bf      	beq.n	8012c5c <__srefill_r+0x78>
 8012cdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012cde:	6023      	str	r3, [r4, #0]
 8012ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ce2:	2000      	movs	r0, #0
 8012ce4:	e7fc      	b.n	8012ce0 <__srefill_r+0xfc>
 8012ce6:	bf00      	nop
 8012ce8:	080165b4 	.word	0x080165b4
 8012cec:	080165d4 	.word	0x080165d4
 8012cf0:	08016594 	.word	0x08016594
 8012cf4:	080165f4 	.word	0x080165f4
 8012cf8:	08012bd1 	.word	0x08012bd1

08012cfc <_sbrk_r>:
 8012cfc:	b538      	push	{r3, r4, r5, lr}
 8012cfe:	4c06      	ldr	r4, [pc, #24]	; (8012d18 <_sbrk_r+0x1c>)
 8012d00:	2300      	movs	r3, #0
 8012d02:	4605      	mov	r5, r0
 8012d04:	4608      	mov	r0, r1
 8012d06:	6023      	str	r3, [r4, #0]
 8012d08:	f7fa fbea 	bl	800d4e0 <_sbrk>
 8012d0c:	1c43      	adds	r3, r0, #1
 8012d0e:	d102      	bne.n	8012d16 <_sbrk_r+0x1a>
 8012d10:	6823      	ldr	r3, [r4, #0]
 8012d12:	b103      	cbz	r3, 8012d16 <_sbrk_r+0x1a>
 8012d14:	602b      	str	r3, [r5, #0]
 8012d16:	bd38      	pop	{r3, r4, r5, pc}
 8012d18:	200011fc 	.word	0x200011fc

08012d1c <iscanf>:
 8012d1c:	b40f      	push	{r0, r1, r2, r3}
 8012d1e:	4b0a      	ldr	r3, [pc, #40]	; (8012d48 <iscanf+0x2c>)
 8012d20:	b513      	push	{r0, r1, r4, lr}
 8012d22:	681c      	ldr	r4, [r3, #0]
 8012d24:	b124      	cbz	r4, 8012d30 <iscanf+0x14>
 8012d26:	69a3      	ldr	r3, [r4, #24]
 8012d28:	b913      	cbnz	r3, 8012d30 <iscanf+0x14>
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	f7fe fa88 	bl	8011240 <__sinit>
 8012d30:	ab05      	add	r3, sp, #20
 8012d32:	9a04      	ldr	r2, [sp, #16]
 8012d34:	6861      	ldr	r1, [r4, #4]
 8012d36:	9301      	str	r3, [sp, #4]
 8012d38:	4620      	mov	r0, r4
 8012d3a:	f7ff fb57 	bl	80123ec <_vfiscanf_r>
 8012d3e:	b002      	add	sp, #8
 8012d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d44:	b004      	add	sp, #16
 8012d46:	4770      	bx	lr
 8012d48:	20000038 	.word	0x20000038

08012d4c <__sccl>:
 8012d4c:	b570      	push	{r4, r5, r6, lr}
 8012d4e:	780b      	ldrb	r3, [r1, #0]
 8012d50:	2b5e      	cmp	r3, #94	; 0x5e
 8012d52:	bf13      	iteet	ne
 8012d54:	1c4a      	addne	r2, r1, #1
 8012d56:	1c8a      	addeq	r2, r1, #2
 8012d58:	784b      	ldrbeq	r3, [r1, #1]
 8012d5a:	2100      	movne	r1, #0
 8012d5c:	bf08      	it	eq
 8012d5e:	2101      	moveq	r1, #1
 8012d60:	1e44      	subs	r4, r0, #1
 8012d62:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8012d66:	f804 1f01 	strb.w	r1, [r4, #1]!
 8012d6a:	42ac      	cmp	r4, r5
 8012d6c:	d1fb      	bne.n	8012d66 <__sccl+0x1a>
 8012d6e:	b913      	cbnz	r3, 8012d76 <__sccl+0x2a>
 8012d70:	3a01      	subs	r2, #1
 8012d72:	4610      	mov	r0, r2
 8012d74:	bd70      	pop	{r4, r5, r6, pc}
 8012d76:	f081 0401 	eor.w	r4, r1, #1
 8012d7a:	54c4      	strb	r4, [r0, r3]
 8012d7c:	1c51      	adds	r1, r2, #1
 8012d7e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8012d82:	2d2d      	cmp	r5, #45	; 0x2d
 8012d84:	f101 36ff 	add.w	r6, r1, #4294967295
 8012d88:	460a      	mov	r2, r1
 8012d8a:	d006      	beq.n	8012d9a <__sccl+0x4e>
 8012d8c:	2d5d      	cmp	r5, #93	; 0x5d
 8012d8e:	d0f0      	beq.n	8012d72 <__sccl+0x26>
 8012d90:	b90d      	cbnz	r5, 8012d96 <__sccl+0x4a>
 8012d92:	4632      	mov	r2, r6
 8012d94:	e7ed      	b.n	8012d72 <__sccl+0x26>
 8012d96:	462b      	mov	r3, r5
 8012d98:	e7ef      	b.n	8012d7a <__sccl+0x2e>
 8012d9a:	780e      	ldrb	r6, [r1, #0]
 8012d9c:	2e5d      	cmp	r6, #93	; 0x5d
 8012d9e:	d0fa      	beq.n	8012d96 <__sccl+0x4a>
 8012da0:	42b3      	cmp	r3, r6
 8012da2:	dcf8      	bgt.n	8012d96 <__sccl+0x4a>
 8012da4:	3301      	adds	r3, #1
 8012da6:	429e      	cmp	r6, r3
 8012da8:	54c4      	strb	r4, [r0, r3]
 8012daa:	dcfb      	bgt.n	8012da4 <__sccl+0x58>
 8012dac:	3102      	adds	r1, #2
 8012dae:	e7e6      	b.n	8012d7e <__sccl+0x32>

08012db0 <setbuf>:
 8012db0:	2900      	cmp	r1, #0
 8012db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012db6:	bf0c      	ite	eq
 8012db8:	2202      	moveq	r2, #2
 8012dba:	2200      	movne	r2, #0
 8012dbc:	f000 b800 	b.w	8012dc0 <setvbuf>

08012dc0 <setvbuf>:
 8012dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012dc4:	461d      	mov	r5, r3
 8012dc6:	4b51      	ldr	r3, [pc, #324]	; (8012f0c <setvbuf+0x14c>)
 8012dc8:	681e      	ldr	r6, [r3, #0]
 8012dca:	4604      	mov	r4, r0
 8012dcc:	460f      	mov	r7, r1
 8012dce:	4690      	mov	r8, r2
 8012dd0:	b126      	cbz	r6, 8012ddc <setvbuf+0x1c>
 8012dd2:	69b3      	ldr	r3, [r6, #24]
 8012dd4:	b913      	cbnz	r3, 8012ddc <setvbuf+0x1c>
 8012dd6:	4630      	mov	r0, r6
 8012dd8:	f7fe fa32 	bl	8011240 <__sinit>
 8012ddc:	4b4c      	ldr	r3, [pc, #304]	; (8012f10 <setvbuf+0x150>)
 8012dde:	429c      	cmp	r4, r3
 8012de0:	d152      	bne.n	8012e88 <setvbuf+0xc8>
 8012de2:	6874      	ldr	r4, [r6, #4]
 8012de4:	f1b8 0f02 	cmp.w	r8, #2
 8012de8:	d006      	beq.n	8012df8 <setvbuf+0x38>
 8012dea:	f1b8 0f01 	cmp.w	r8, #1
 8012dee:	f200 8089 	bhi.w	8012f04 <setvbuf+0x144>
 8012df2:	2d00      	cmp	r5, #0
 8012df4:	f2c0 8086 	blt.w	8012f04 <setvbuf+0x144>
 8012df8:	4621      	mov	r1, r4
 8012dfa:	4630      	mov	r0, r6
 8012dfc:	f7fe f9a4 	bl	8011148 <_fflush_r>
 8012e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e02:	b141      	cbz	r1, 8012e16 <setvbuf+0x56>
 8012e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e08:	4299      	cmp	r1, r3
 8012e0a:	d002      	beq.n	8012e12 <setvbuf+0x52>
 8012e0c:	4630      	mov	r0, r6
 8012e0e:	f7fe fb59 	bl	80114c4 <_free_r>
 8012e12:	2300      	movs	r3, #0
 8012e14:	6363      	str	r3, [r4, #52]	; 0x34
 8012e16:	2300      	movs	r3, #0
 8012e18:	61a3      	str	r3, [r4, #24]
 8012e1a:	6063      	str	r3, [r4, #4]
 8012e1c:	89a3      	ldrh	r3, [r4, #12]
 8012e1e:	061b      	lsls	r3, r3, #24
 8012e20:	d503      	bpl.n	8012e2a <setvbuf+0x6a>
 8012e22:	6921      	ldr	r1, [r4, #16]
 8012e24:	4630      	mov	r0, r6
 8012e26:	f7fe fb4d 	bl	80114c4 <_free_r>
 8012e2a:	89a3      	ldrh	r3, [r4, #12]
 8012e2c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8012e30:	f023 0303 	bic.w	r3, r3, #3
 8012e34:	f1b8 0f02 	cmp.w	r8, #2
 8012e38:	81a3      	strh	r3, [r4, #12]
 8012e3a:	d05d      	beq.n	8012ef8 <setvbuf+0x138>
 8012e3c:	ab01      	add	r3, sp, #4
 8012e3e:	466a      	mov	r2, sp
 8012e40:	4621      	mov	r1, r4
 8012e42:	4630      	mov	r0, r6
 8012e44:	f7fe fac6 	bl	80113d4 <__swhatbuf_r>
 8012e48:	89a3      	ldrh	r3, [r4, #12]
 8012e4a:	4318      	orrs	r0, r3
 8012e4c:	81a0      	strh	r0, [r4, #12]
 8012e4e:	bb2d      	cbnz	r5, 8012e9c <setvbuf+0xdc>
 8012e50:	9d00      	ldr	r5, [sp, #0]
 8012e52:	4628      	mov	r0, r5
 8012e54:	f002 fb54 	bl	8015500 <malloc>
 8012e58:	4607      	mov	r7, r0
 8012e5a:	2800      	cmp	r0, #0
 8012e5c:	d14e      	bne.n	8012efc <setvbuf+0x13c>
 8012e5e:	f8dd 9000 	ldr.w	r9, [sp]
 8012e62:	45a9      	cmp	r9, r5
 8012e64:	d13c      	bne.n	8012ee0 <setvbuf+0x120>
 8012e66:	f04f 30ff 	mov.w	r0, #4294967295
 8012e6a:	89a3      	ldrh	r3, [r4, #12]
 8012e6c:	f043 0302 	orr.w	r3, r3, #2
 8012e70:	81a3      	strh	r3, [r4, #12]
 8012e72:	2300      	movs	r3, #0
 8012e74:	60a3      	str	r3, [r4, #8]
 8012e76:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012e7a:	6023      	str	r3, [r4, #0]
 8012e7c:	6123      	str	r3, [r4, #16]
 8012e7e:	2301      	movs	r3, #1
 8012e80:	6163      	str	r3, [r4, #20]
 8012e82:	b003      	add	sp, #12
 8012e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e88:	4b22      	ldr	r3, [pc, #136]	; (8012f14 <setvbuf+0x154>)
 8012e8a:	429c      	cmp	r4, r3
 8012e8c:	d101      	bne.n	8012e92 <setvbuf+0xd2>
 8012e8e:	68b4      	ldr	r4, [r6, #8]
 8012e90:	e7a8      	b.n	8012de4 <setvbuf+0x24>
 8012e92:	4b21      	ldr	r3, [pc, #132]	; (8012f18 <setvbuf+0x158>)
 8012e94:	429c      	cmp	r4, r3
 8012e96:	bf08      	it	eq
 8012e98:	68f4      	ldreq	r4, [r6, #12]
 8012e9a:	e7a3      	b.n	8012de4 <setvbuf+0x24>
 8012e9c:	2f00      	cmp	r7, #0
 8012e9e:	d0d8      	beq.n	8012e52 <setvbuf+0x92>
 8012ea0:	69b3      	ldr	r3, [r6, #24]
 8012ea2:	b913      	cbnz	r3, 8012eaa <setvbuf+0xea>
 8012ea4:	4630      	mov	r0, r6
 8012ea6:	f7fe f9cb 	bl	8011240 <__sinit>
 8012eaa:	f1b8 0f01 	cmp.w	r8, #1
 8012eae:	bf08      	it	eq
 8012eb0:	89a3      	ldrheq	r3, [r4, #12]
 8012eb2:	6027      	str	r7, [r4, #0]
 8012eb4:	bf04      	itt	eq
 8012eb6:	f043 0301 	orreq.w	r3, r3, #1
 8012eba:	81a3      	strheq	r3, [r4, #12]
 8012ebc:	89a3      	ldrh	r3, [r4, #12]
 8012ebe:	f013 0008 	ands.w	r0, r3, #8
 8012ec2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8012ec6:	d01b      	beq.n	8012f00 <setvbuf+0x140>
 8012ec8:	f013 0001 	ands.w	r0, r3, #1
 8012ecc:	bf18      	it	ne
 8012ece:	426d      	negne	r5, r5
 8012ed0:	f04f 0300 	mov.w	r3, #0
 8012ed4:	bf1d      	ittte	ne
 8012ed6:	60a3      	strne	r3, [r4, #8]
 8012ed8:	61a5      	strne	r5, [r4, #24]
 8012eda:	4618      	movne	r0, r3
 8012edc:	60a5      	streq	r5, [r4, #8]
 8012ede:	e7d0      	b.n	8012e82 <setvbuf+0xc2>
 8012ee0:	4648      	mov	r0, r9
 8012ee2:	f002 fb0d 	bl	8015500 <malloc>
 8012ee6:	4607      	mov	r7, r0
 8012ee8:	2800      	cmp	r0, #0
 8012eea:	d0bc      	beq.n	8012e66 <setvbuf+0xa6>
 8012eec:	89a3      	ldrh	r3, [r4, #12]
 8012eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ef2:	81a3      	strh	r3, [r4, #12]
 8012ef4:	464d      	mov	r5, r9
 8012ef6:	e7d3      	b.n	8012ea0 <setvbuf+0xe0>
 8012ef8:	2000      	movs	r0, #0
 8012efa:	e7b6      	b.n	8012e6a <setvbuf+0xaa>
 8012efc:	46a9      	mov	r9, r5
 8012efe:	e7f5      	b.n	8012eec <setvbuf+0x12c>
 8012f00:	60a0      	str	r0, [r4, #8]
 8012f02:	e7be      	b.n	8012e82 <setvbuf+0xc2>
 8012f04:	f04f 30ff 	mov.w	r0, #4294967295
 8012f08:	e7bb      	b.n	8012e82 <setvbuf+0xc2>
 8012f0a:	bf00      	nop
 8012f0c:	20000038 	.word	0x20000038
 8012f10:	080165b4 	.word	0x080165b4
 8012f14:	080165d4 	.word	0x080165d4
 8012f18:	08016594 	.word	0x08016594

08012f1c <nanf>:
 8012f1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012f24 <nanf+0x8>
 8012f20:	4770      	bx	lr
 8012f22:	bf00      	nop
 8012f24:	7fc00000 	.word	0x7fc00000

08012f28 <siprintf>:
 8012f28:	b40e      	push	{r1, r2, r3}
 8012f2a:	b500      	push	{lr}
 8012f2c:	b09c      	sub	sp, #112	; 0x70
 8012f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8012f30:	9002      	str	r0, [sp, #8]
 8012f32:	9006      	str	r0, [sp, #24]
 8012f34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012f38:	4809      	ldr	r0, [pc, #36]	; (8012f60 <siprintf+0x38>)
 8012f3a:	9107      	str	r1, [sp, #28]
 8012f3c:	9104      	str	r1, [sp, #16]
 8012f3e:	4909      	ldr	r1, [pc, #36]	; (8012f64 <siprintf+0x3c>)
 8012f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f44:	9105      	str	r1, [sp, #20]
 8012f46:	6800      	ldr	r0, [r0, #0]
 8012f48:	9301      	str	r3, [sp, #4]
 8012f4a:	a902      	add	r1, sp, #8
 8012f4c:	f002 ff9a 	bl	8015e84 <_svfiprintf_r>
 8012f50:	9b02      	ldr	r3, [sp, #8]
 8012f52:	2200      	movs	r2, #0
 8012f54:	701a      	strb	r2, [r3, #0]
 8012f56:	b01c      	add	sp, #112	; 0x70
 8012f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f5c:	b003      	add	sp, #12
 8012f5e:	4770      	bx	lr
 8012f60:	20000038 	.word	0x20000038
 8012f64:	ffff0208 	.word	0xffff0208

08012f68 <__sread>:
 8012f68:	b510      	push	{r4, lr}
 8012f6a:	460c      	mov	r4, r1
 8012f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f70:	f003 f8b6 	bl	80160e0 <_read_r>
 8012f74:	2800      	cmp	r0, #0
 8012f76:	bfab      	itete	ge
 8012f78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8012f7c:	181b      	addge	r3, r3, r0
 8012f7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f82:	bfac      	ite	ge
 8012f84:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f86:	81a3      	strhlt	r3, [r4, #12]
 8012f88:	bd10      	pop	{r4, pc}

08012f8a <__swrite>:
 8012f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f8e:	461f      	mov	r7, r3
 8012f90:	898b      	ldrh	r3, [r1, #12]
 8012f92:	05db      	lsls	r3, r3, #23
 8012f94:	4605      	mov	r5, r0
 8012f96:	460c      	mov	r4, r1
 8012f98:	4616      	mov	r6, r2
 8012f9a:	d505      	bpl.n	8012fa8 <__swrite+0x1e>
 8012f9c:	2302      	movs	r3, #2
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fa4:	f002 fa9a 	bl	80154dc <_lseek_r>
 8012fa8:	89a3      	ldrh	r3, [r4, #12]
 8012faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012fb2:	81a3      	strh	r3, [r4, #12]
 8012fb4:	4632      	mov	r2, r6
 8012fb6:	463b      	mov	r3, r7
 8012fb8:	4628      	mov	r0, r5
 8012fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fbe:	f001 b84f 	b.w	8014060 <_write_r>

08012fc2 <__sseek>:
 8012fc2:	b510      	push	{r4, lr}
 8012fc4:	460c      	mov	r4, r1
 8012fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fca:	f002 fa87 	bl	80154dc <_lseek_r>
 8012fce:	1c43      	adds	r3, r0, #1
 8012fd0:	89a3      	ldrh	r3, [r4, #12]
 8012fd2:	bf15      	itete	ne
 8012fd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8012fd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012fda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012fde:	81a3      	strheq	r3, [r4, #12]
 8012fe0:	bf18      	it	ne
 8012fe2:	81a3      	strhne	r3, [r4, #12]
 8012fe4:	bd10      	pop	{r4, pc}

08012fe6 <__sclose>:
 8012fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fea:	f001 b8b9 	b.w	8014160 <_close_r>

08012fee <sulp>:
 8012fee:	b570      	push	{r4, r5, r6, lr}
 8012ff0:	4604      	mov	r4, r0
 8012ff2:	460d      	mov	r5, r1
 8012ff4:	ec45 4b10 	vmov	d0, r4, r5
 8012ff8:	4616      	mov	r6, r2
 8012ffa:	f002 fd81 	bl	8015b00 <__ulp>
 8012ffe:	ec51 0b10 	vmov	r0, r1, d0
 8013002:	b17e      	cbz	r6, 8013024 <sulp+0x36>
 8013004:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013008:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801300c:	2b00      	cmp	r3, #0
 801300e:	dd09      	ble.n	8013024 <sulp+0x36>
 8013010:	051b      	lsls	r3, r3, #20
 8013012:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013016:	2400      	movs	r4, #0
 8013018:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801301c:	4622      	mov	r2, r4
 801301e:	462b      	mov	r3, r5
 8013020:	f7f5 fa22 	bl	8008468 <__aeabi_dmul>
 8013024:	bd70      	pop	{r4, r5, r6, pc}
	...

08013028 <_strtod_l>:
 8013028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801302c:	461f      	mov	r7, r3
 801302e:	b0a1      	sub	sp, #132	; 0x84
 8013030:	2300      	movs	r3, #0
 8013032:	4681      	mov	r9, r0
 8013034:	4638      	mov	r0, r7
 8013036:	460e      	mov	r6, r1
 8013038:	9217      	str	r2, [sp, #92]	; 0x5c
 801303a:	931c      	str	r3, [sp, #112]	; 0x70
 801303c:	f002 fa3e 	bl	80154bc <__localeconv_l>
 8013040:	4680      	mov	r8, r0
 8013042:	6800      	ldr	r0, [r0, #0]
 8013044:	f7f4 fffc 	bl	8008040 <strlen>
 8013048:	f04f 0a00 	mov.w	sl, #0
 801304c:	4604      	mov	r4, r0
 801304e:	f04f 0b00 	mov.w	fp, #0
 8013052:	961b      	str	r6, [sp, #108]	; 0x6c
 8013054:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013056:	781a      	ldrb	r2, [r3, #0]
 8013058:	2a0d      	cmp	r2, #13
 801305a:	d832      	bhi.n	80130c2 <_strtod_l+0x9a>
 801305c:	2a09      	cmp	r2, #9
 801305e:	d236      	bcs.n	80130ce <_strtod_l+0xa6>
 8013060:	2a00      	cmp	r2, #0
 8013062:	d03e      	beq.n	80130e2 <_strtod_l+0xba>
 8013064:	2300      	movs	r3, #0
 8013066:	930d      	str	r3, [sp, #52]	; 0x34
 8013068:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801306a:	782b      	ldrb	r3, [r5, #0]
 801306c:	2b30      	cmp	r3, #48	; 0x30
 801306e:	f040 80ac 	bne.w	80131ca <_strtod_l+0x1a2>
 8013072:	786b      	ldrb	r3, [r5, #1]
 8013074:	2b58      	cmp	r3, #88	; 0x58
 8013076:	d001      	beq.n	801307c <_strtod_l+0x54>
 8013078:	2b78      	cmp	r3, #120	; 0x78
 801307a:	d167      	bne.n	801314c <_strtod_l+0x124>
 801307c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801307e:	9301      	str	r3, [sp, #4]
 8013080:	ab1c      	add	r3, sp, #112	; 0x70
 8013082:	9300      	str	r3, [sp, #0]
 8013084:	9702      	str	r7, [sp, #8]
 8013086:	ab1d      	add	r3, sp, #116	; 0x74
 8013088:	4a88      	ldr	r2, [pc, #544]	; (80132ac <_strtod_l+0x284>)
 801308a:	a91b      	add	r1, sp, #108	; 0x6c
 801308c:	4648      	mov	r0, r9
 801308e:	f001 ff1c 	bl	8014eca <__gethex>
 8013092:	f010 0407 	ands.w	r4, r0, #7
 8013096:	4606      	mov	r6, r0
 8013098:	d005      	beq.n	80130a6 <_strtod_l+0x7e>
 801309a:	2c06      	cmp	r4, #6
 801309c:	d12b      	bne.n	80130f6 <_strtod_l+0xce>
 801309e:	3501      	adds	r5, #1
 80130a0:	2300      	movs	r3, #0
 80130a2:	951b      	str	r5, [sp, #108]	; 0x6c
 80130a4:	930d      	str	r3, [sp, #52]	; 0x34
 80130a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	f040 859a 	bne.w	8013be2 <_strtod_l+0xbba>
 80130ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130b0:	b1e3      	cbz	r3, 80130ec <_strtod_l+0xc4>
 80130b2:	4652      	mov	r2, sl
 80130b4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80130b8:	ec43 2b10 	vmov	d0, r2, r3
 80130bc:	b021      	add	sp, #132	; 0x84
 80130be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130c2:	2a2b      	cmp	r2, #43	; 0x2b
 80130c4:	d015      	beq.n	80130f2 <_strtod_l+0xca>
 80130c6:	2a2d      	cmp	r2, #45	; 0x2d
 80130c8:	d004      	beq.n	80130d4 <_strtod_l+0xac>
 80130ca:	2a20      	cmp	r2, #32
 80130cc:	d1ca      	bne.n	8013064 <_strtod_l+0x3c>
 80130ce:	3301      	adds	r3, #1
 80130d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80130d2:	e7bf      	b.n	8013054 <_strtod_l+0x2c>
 80130d4:	2201      	movs	r2, #1
 80130d6:	920d      	str	r2, [sp, #52]	; 0x34
 80130d8:	1c5a      	adds	r2, r3, #1
 80130da:	921b      	str	r2, [sp, #108]	; 0x6c
 80130dc:	785b      	ldrb	r3, [r3, #1]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d1c2      	bne.n	8013068 <_strtod_l+0x40>
 80130e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80130e4:	961b      	str	r6, [sp, #108]	; 0x6c
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	f040 8579 	bne.w	8013bde <_strtod_l+0xbb6>
 80130ec:	4652      	mov	r2, sl
 80130ee:	465b      	mov	r3, fp
 80130f0:	e7e2      	b.n	80130b8 <_strtod_l+0x90>
 80130f2:	2200      	movs	r2, #0
 80130f4:	e7ef      	b.n	80130d6 <_strtod_l+0xae>
 80130f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80130f8:	b13a      	cbz	r2, 801310a <_strtod_l+0xe2>
 80130fa:	2135      	movs	r1, #53	; 0x35
 80130fc:	a81e      	add	r0, sp, #120	; 0x78
 80130fe:	f002 fdf7 	bl	8015cf0 <__copybits>
 8013102:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013104:	4648      	mov	r0, r9
 8013106:	f002 fa64 	bl	80155d2 <_Bfree>
 801310a:	3c01      	subs	r4, #1
 801310c:	2c04      	cmp	r4, #4
 801310e:	d806      	bhi.n	801311e <_strtod_l+0xf6>
 8013110:	e8df f004 	tbb	[pc, r4]
 8013114:	1714030a 	.word	0x1714030a
 8013118:	0a          	.byte	0x0a
 8013119:	00          	.byte	0x00
 801311a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801311e:	0730      	lsls	r0, r6, #28
 8013120:	d5c1      	bpl.n	80130a6 <_strtod_l+0x7e>
 8013122:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013126:	e7be      	b.n	80130a6 <_strtod_l+0x7e>
 8013128:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801312c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801312e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013132:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013136:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801313a:	e7f0      	b.n	801311e <_strtod_l+0xf6>
 801313c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80132b0 <_strtod_l+0x288>
 8013140:	e7ed      	b.n	801311e <_strtod_l+0xf6>
 8013142:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013146:	f04f 3aff 	mov.w	sl, #4294967295
 801314a:	e7e8      	b.n	801311e <_strtod_l+0xf6>
 801314c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801314e:	1c5a      	adds	r2, r3, #1
 8013150:	921b      	str	r2, [sp, #108]	; 0x6c
 8013152:	785b      	ldrb	r3, [r3, #1]
 8013154:	2b30      	cmp	r3, #48	; 0x30
 8013156:	d0f9      	beq.n	801314c <_strtod_l+0x124>
 8013158:	2b00      	cmp	r3, #0
 801315a:	d0a4      	beq.n	80130a6 <_strtod_l+0x7e>
 801315c:	2301      	movs	r3, #1
 801315e:	2500      	movs	r5, #0
 8013160:	9306      	str	r3, [sp, #24]
 8013162:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013164:	9308      	str	r3, [sp, #32]
 8013166:	9507      	str	r5, [sp, #28]
 8013168:	9505      	str	r5, [sp, #20]
 801316a:	220a      	movs	r2, #10
 801316c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801316e:	7807      	ldrb	r7, [r0, #0]
 8013170:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013174:	b2d9      	uxtb	r1, r3
 8013176:	2909      	cmp	r1, #9
 8013178:	d929      	bls.n	80131ce <_strtod_l+0x1a6>
 801317a:	4622      	mov	r2, r4
 801317c:	f8d8 1000 	ldr.w	r1, [r8]
 8013180:	f002 ffc0 	bl	8016104 <strncmp>
 8013184:	2800      	cmp	r0, #0
 8013186:	d031      	beq.n	80131ec <_strtod_l+0x1c4>
 8013188:	2000      	movs	r0, #0
 801318a:	9c05      	ldr	r4, [sp, #20]
 801318c:	9004      	str	r0, [sp, #16]
 801318e:	463b      	mov	r3, r7
 8013190:	4602      	mov	r2, r0
 8013192:	2b65      	cmp	r3, #101	; 0x65
 8013194:	d001      	beq.n	801319a <_strtod_l+0x172>
 8013196:	2b45      	cmp	r3, #69	; 0x45
 8013198:	d114      	bne.n	80131c4 <_strtod_l+0x19c>
 801319a:	b924      	cbnz	r4, 80131a6 <_strtod_l+0x17e>
 801319c:	b910      	cbnz	r0, 80131a4 <_strtod_l+0x17c>
 801319e:	9b06      	ldr	r3, [sp, #24]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d09e      	beq.n	80130e2 <_strtod_l+0xba>
 80131a4:	2400      	movs	r4, #0
 80131a6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80131a8:	1c73      	adds	r3, r6, #1
 80131aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80131ac:	7873      	ldrb	r3, [r6, #1]
 80131ae:	2b2b      	cmp	r3, #43	; 0x2b
 80131b0:	d078      	beq.n	80132a4 <_strtod_l+0x27c>
 80131b2:	2b2d      	cmp	r3, #45	; 0x2d
 80131b4:	d070      	beq.n	8013298 <_strtod_l+0x270>
 80131b6:	f04f 0c00 	mov.w	ip, #0
 80131ba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80131be:	2f09      	cmp	r7, #9
 80131c0:	d97c      	bls.n	80132bc <_strtod_l+0x294>
 80131c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80131c4:	f04f 0e00 	mov.w	lr, #0
 80131c8:	e09a      	b.n	8013300 <_strtod_l+0x2d8>
 80131ca:	2300      	movs	r3, #0
 80131cc:	e7c7      	b.n	801315e <_strtod_l+0x136>
 80131ce:	9905      	ldr	r1, [sp, #20]
 80131d0:	2908      	cmp	r1, #8
 80131d2:	bfdd      	ittte	le
 80131d4:	9907      	ldrle	r1, [sp, #28]
 80131d6:	fb02 3301 	mlale	r3, r2, r1, r3
 80131da:	9307      	strle	r3, [sp, #28]
 80131dc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80131e0:	9b05      	ldr	r3, [sp, #20]
 80131e2:	3001      	adds	r0, #1
 80131e4:	3301      	adds	r3, #1
 80131e6:	9305      	str	r3, [sp, #20]
 80131e8:	901b      	str	r0, [sp, #108]	; 0x6c
 80131ea:	e7bf      	b.n	801316c <_strtod_l+0x144>
 80131ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80131ee:	191a      	adds	r2, r3, r4
 80131f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80131f2:	9a05      	ldr	r2, [sp, #20]
 80131f4:	5d1b      	ldrb	r3, [r3, r4]
 80131f6:	2a00      	cmp	r2, #0
 80131f8:	d037      	beq.n	801326a <_strtod_l+0x242>
 80131fa:	9c05      	ldr	r4, [sp, #20]
 80131fc:	4602      	mov	r2, r0
 80131fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013202:	2909      	cmp	r1, #9
 8013204:	d913      	bls.n	801322e <_strtod_l+0x206>
 8013206:	2101      	movs	r1, #1
 8013208:	9104      	str	r1, [sp, #16]
 801320a:	e7c2      	b.n	8013192 <_strtod_l+0x16a>
 801320c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801320e:	1c5a      	adds	r2, r3, #1
 8013210:	921b      	str	r2, [sp, #108]	; 0x6c
 8013212:	785b      	ldrb	r3, [r3, #1]
 8013214:	3001      	adds	r0, #1
 8013216:	2b30      	cmp	r3, #48	; 0x30
 8013218:	d0f8      	beq.n	801320c <_strtod_l+0x1e4>
 801321a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801321e:	2a08      	cmp	r2, #8
 8013220:	f200 84e4 	bhi.w	8013bec <_strtod_l+0xbc4>
 8013224:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013226:	9208      	str	r2, [sp, #32]
 8013228:	4602      	mov	r2, r0
 801322a:	2000      	movs	r0, #0
 801322c:	4604      	mov	r4, r0
 801322e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013232:	f100 0101 	add.w	r1, r0, #1
 8013236:	d012      	beq.n	801325e <_strtod_l+0x236>
 8013238:	440a      	add	r2, r1
 801323a:	eb00 0c04 	add.w	ip, r0, r4
 801323e:	4621      	mov	r1, r4
 8013240:	270a      	movs	r7, #10
 8013242:	458c      	cmp	ip, r1
 8013244:	d113      	bne.n	801326e <_strtod_l+0x246>
 8013246:	1821      	adds	r1, r4, r0
 8013248:	2908      	cmp	r1, #8
 801324a:	f104 0401 	add.w	r4, r4, #1
 801324e:	4404      	add	r4, r0
 8013250:	dc19      	bgt.n	8013286 <_strtod_l+0x25e>
 8013252:	9b07      	ldr	r3, [sp, #28]
 8013254:	210a      	movs	r1, #10
 8013256:	fb01 e303 	mla	r3, r1, r3, lr
 801325a:	9307      	str	r3, [sp, #28]
 801325c:	2100      	movs	r1, #0
 801325e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013260:	1c58      	adds	r0, r3, #1
 8013262:	901b      	str	r0, [sp, #108]	; 0x6c
 8013264:	785b      	ldrb	r3, [r3, #1]
 8013266:	4608      	mov	r0, r1
 8013268:	e7c9      	b.n	80131fe <_strtod_l+0x1d6>
 801326a:	9805      	ldr	r0, [sp, #20]
 801326c:	e7d3      	b.n	8013216 <_strtod_l+0x1ee>
 801326e:	2908      	cmp	r1, #8
 8013270:	f101 0101 	add.w	r1, r1, #1
 8013274:	dc03      	bgt.n	801327e <_strtod_l+0x256>
 8013276:	9b07      	ldr	r3, [sp, #28]
 8013278:	437b      	muls	r3, r7
 801327a:	9307      	str	r3, [sp, #28]
 801327c:	e7e1      	b.n	8013242 <_strtod_l+0x21a>
 801327e:	2910      	cmp	r1, #16
 8013280:	bfd8      	it	le
 8013282:	437d      	mulle	r5, r7
 8013284:	e7dd      	b.n	8013242 <_strtod_l+0x21a>
 8013286:	2c10      	cmp	r4, #16
 8013288:	bfdc      	itt	le
 801328a:	210a      	movle	r1, #10
 801328c:	fb01 e505 	mlale	r5, r1, r5, lr
 8013290:	e7e4      	b.n	801325c <_strtod_l+0x234>
 8013292:	2301      	movs	r3, #1
 8013294:	9304      	str	r3, [sp, #16]
 8013296:	e781      	b.n	801319c <_strtod_l+0x174>
 8013298:	f04f 0c01 	mov.w	ip, #1
 801329c:	1cb3      	adds	r3, r6, #2
 801329e:	931b      	str	r3, [sp, #108]	; 0x6c
 80132a0:	78b3      	ldrb	r3, [r6, #2]
 80132a2:	e78a      	b.n	80131ba <_strtod_l+0x192>
 80132a4:	f04f 0c00 	mov.w	ip, #0
 80132a8:	e7f8      	b.n	801329c <_strtod_l+0x274>
 80132aa:	bf00      	nop
 80132ac:	0801665c 	.word	0x0801665c
 80132b0:	7ff00000 	.word	0x7ff00000
 80132b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80132b6:	1c5f      	adds	r7, r3, #1
 80132b8:	971b      	str	r7, [sp, #108]	; 0x6c
 80132ba:	785b      	ldrb	r3, [r3, #1]
 80132bc:	2b30      	cmp	r3, #48	; 0x30
 80132be:	d0f9      	beq.n	80132b4 <_strtod_l+0x28c>
 80132c0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80132c4:	2f08      	cmp	r7, #8
 80132c6:	f63f af7d 	bhi.w	80131c4 <_strtod_l+0x19c>
 80132ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80132ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80132d0:	930a      	str	r3, [sp, #40]	; 0x28
 80132d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80132d4:	1c5f      	adds	r7, r3, #1
 80132d6:	971b      	str	r7, [sp, #108]	; 0x6c
 80132d8:	785b      	ldrb	r3, [r3, #1]
 80132da:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80132de:	f1b8 0f09 	cmp.w	r8, #9
 80132e2:	d937      	bls.n	8013354 <_strtod_l+0x32c>
 80132e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80132e6:	1a7f      	subs	r7, r7, r1
 80132e8:	2f08      	cmp	r7, #8
 80132ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80132ee:	dc37      	bgt.n	8013360 <_strtod_l+0x338>
 80132f0:	45be      	cmp	lr, r7
 80132f2:	bfa8      	it	ge
 80132f4:	46be      	movge	lr, r7
 80132f6:	f1bc 0f00 	cmp.w	ip, #0
 80132fa:	d001      	beq.n	8013300 <_strtod_l+0x2d8>
 80132fc:	f1ce 0e00 	rsb	lr, lr, #0
 8013300:	2c00      	cmp	r4, #0
 8013302:	d151      	bne.n	80133a8 <_strtod_l+0x380>
 8013304:	2800      	cmp	r0, #0
 8013306:	f47f aece 	bne.w	80130a6 <_strtod_l+0x7e>
 801330a:	9a06      	ldr	r2, [sp, #24]
 801330c:	2a00      	cmp	r2, #0
 801330e:	f47f aeca 	bne.w	80130a6 <_strtod_l+0x7e>
 8013312:	9a04      	ldr	r2, [sp, #16]
 8013314:	2a00      	cmp	r2, #0
 8013316:	f47f aee4 	bne.w	80130e2 <_strtod_l+0xba>
 801331a:	2b4e      	cmp	r3, #78	; 0x4e
 801331c:	d027      	beq.n	801336e <_strtod_l+0x346>
 801331e:	dc21      	bgt.n	8013364 <_strtod_l+0x33c>
 8013320:	2b49      	cmp	r3, #73	; 0x49
 8013322:	f47f aede 	bne.w	80130e2 <_strtod_l+0xba>
 8013326:	49a0      	ldr	r1, [pc, #640]	; (80135a8 <_strtod_l+0x580>)
 8013328:	a81b      	add	r0, sp, #108	; 0x6c
 801332a:	f002 f801 	bl	8015330 <__match>
 801332e:	2800      	cmp	r0, #0
 8013330:	f43f aed7 	beq.w	80130e2 <_strtod_l+0xba>
 8013334:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013336:	499d      	ldr	r1, [pc, #628]	; (80135ac <_strtod_l+0x584>)
 8013338:	3b01      	subs	r3, #1
 801333a:	a81b      	add	r0, sp, #108	; 0x6c
 801333c:	931b      	str	r3, [sp, #108]	; 0x6c
 801333e:	f001 fff7 	bl	8015330 <__match>
 8013342:	b910      	cbnz	r0, 801334a <_strtod_l+0x322>
 8013344:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013346:	3301      	adds	r3, #1
 8013348:	931b      	str	r3, [sp, #108]	; 0x6c
 801334a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80135c0 <_strtod_l+0x598>
 801334e:	f04f 0a00 	mov.w	sl, #0
 8013352:	e6a8      	b.n	80130a6 <_strtod_l+0x7e>
 8013354:	210a      	movs	r1, #10
 8013356:	fb01 3e0e 	mla	lr, r1, lr, r3
 801335a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801335e:	e7b8      	b.n	80132d2 <_strtod_l+0x2aa>
 8013360:	46be      	mov	lr, r7
 8013362:	e7c8      	b.n	80132f6 <_strtod_l+0x2ce>
 8013364:	2b69      	cmp	r3, #105	; 0x69
 8013366:	d0de      	beq.n	8013326 <_strtod_l+0x2fe>
 8013368:	2b6e      	cmp	r3, #110	; 0x6e
 801336a:	f47f aeba 	bne.w	80130e2 <_strtod_l+0xba>
 801336e:	4990      	ldr	r1, [pc, #576]	; (80135b0 <_strtod_l+0x588>)
 8013370:	a81b      	add	r0, sp, #108	; 0x6c
 8013372:	f001 ffdd 	bl	8015330 <__match>
 8013376:	2800      	cmp	r0, #0
 8013378:	f43f aeb3 	beq.w	80130e2 <_strtod_l+0xba>
 801337c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801337e:	781b      	ldrb	r3, [r3, #0]
 8013380:	2b28      	cmp	r3, #40	; 0x28
 8013382:	d10e      	bne.n	80133a2 <_strtod_l+0x37a>
 8013384:	aa1e      	add	r2, sp, #120	; 0x78
 8013386:	498b      	ldr	r1, [pc, #556]	; (80135b4 <_strtod_l+0x58c>)
 8013388:	a81b      	add	r0, sp, #108	; 0x6c
 801338a:	f001 ffe5 	bl	8015358 <__hexnan>
 801338e:	2805      	cmp	r0, #5
 8013390:	d107      	bne.n	80133a2 <_strtod_l+0x37a>
 8013392:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013394:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013398:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801339c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80133a0:	e681      	b.n	80130a6 <_strtod_l+0x7e>
 80133a2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80135c8 <_strtod_l+0x5a0>
 80133a6:	e7d2      	b.n	801334e <_strtod_l+0x326>
 80133a8:	ebae 0302 	sub.w	r3, lr, r2
 80133ac:	9306      	str	r3, [sp, #24]
 80133ae:	9b05      	ldr	r3, [sp, #20]
 80133b0:	9807      	ldr	r0, [sp, #28]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	bf08      	it	eq
 80133b6:	4623      	moveq	r3, r4
 80133b8:	2c10      	cmp	r4, #16
 80133ba:	9305      	str	r3, [sp, #20]
 80133bc:	46a0      	mov	r8, r4
 80133be:	bfa8      	it	ge
 80133c0:	f04f 0810 	movge.w	r8, #16
 80133c4:	f7f4 ffd6 	bl	8008374 <__aeabi_ui2d>
 80133c8:	2c09      	cmp	r4, #9
 80133ca:	4682      	mov	sl, r0
 80133cc:	468b      	mov	fp, r1
 80133ce:	dc13      	bgt.n	80133f8 <_strtod_l+0x3d0>
 80133d0:	9b06      	ldr	r3, [sp, #24]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	f43f ae67 	beq.w	80130a6 <_strtod_l+0x7e>
 80133d8:	9b06      	ldr	r3, [sp, #24]
 80133da:	dd7a      	ble.n	80134d2 <_strtod_l+0x4aa>
 80133dc:	2b16      	cmp	r3, #22
 80133de:	dc61      	bgt.n	80134a4 <_strtod_l+0x47c>
 80133e0:	4a75      	ldr	r2, [pc, #468]	; (80135b8 <_strtod_l+0x590>)
 80133e2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80133e6:	e9de 0100 	ldrd	r0, r1, [lr]
 80133ea:	4652      	mov	r2, sl
 80133ec:	465b      	mov	r3, fp
 80133ee:	f7f5 f83b 	bl	8008468 <__aeabi_dmul>
 80133f2:	4682      	mov	sl, r0
 80133f4:	468b      	mov	fp, r1
 80133f6:	e656      	b.n	80130a6 <_strtod_l+0x7e>
 80133f8:	4b6f      	ldr	r3, [pc, #444]	; (80135b8 <_strtod_l+0x590>)
 80133fa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80133fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013402:	f7f5 f831 	bl	8008468 <__aeabi_dmul>
 8013406:	4606      	mov	r6, r0
 8013408:	4628      	mov	r0, r5
 801340a:	460f      	mov	r7, r1
 801340c:	f7f4 ffb2 	bl	8008374 <__aeabi_ui2d>
 8013410:	4602      	mov	r2, r0
 8013412:	460b      	mov	r3, r1
 8013414:	4630      	mov	r0, r6
 8013416:	4639      	mov	r1, r7
 8013418:	f7f4 fe70 	bl	80080fc <__adddf3>
 801341c:	2c0f      	cmp	r4, #15
 801341e:	4682      	mov	sl, r0
 8013420:	468b      	mov	fp, r1
 8013422:	ddd5      	ble.n	80133d0 <_strtod_l+0x3a8>
 8013424:	9b06      	ldr	r3, [sp, #24]
 8013426:	eba4 0808 	sub.w	r8, r4, r8
 801342a:	4498      	add	r8, r3
 801342c:	f1b8 0f00 	cmp.w	r8, #0
 8013430:	f340 8096 	ble.w	8013560 <_strtod_l+0x538>
 8013434:	f018 030f 	ands.w	r3, r8, #15
 8013438:	d00a      	beq.n	8013450 <_strtod_l+0x428>
 801343a:	495f      	ldr	r1, [pc, #380]	; (80135b8 <_strtod_l+0x590>)
 801343c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013440:	4652      	mov	r2, sl
 8013442:	465b      	mov	r3, fp
 8013444:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013448:	f7f5 f80e 	bl	8008468 <__aeabi_dmul>
 801344c:	4682      	mov	sl, r0
 801344e:	468b      	mov	fp, r1
 8013450:	f038 080f 	bics.w	r8, r8, #15
 8013454:	d073      	beq.n	801353e <_strtod_l+0x516>
 8013456:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801345a:	dd47      	ble.n	80134ec <_strtod_l+0x4c4>
 801345c:	2400      	movs	r4, #0
 801345e:	46a0      	mov	r8, r4
 8013460:	9407      	str	r4, [sp, #28]
 8013462:	9405      	str	r4, [sp, #20]
 8013464:	2322      	movs	r3, #34	; 0x22
 8013466:	f8df b158 	ldr.w	fp, [pc, #344]	; 80135c0 <_strtod_l+0x598>
 801346a:	f8c9 3000 	str.w	r3, [r9]
 801346e:	f04f 0a00 	mov.w	sl, #0
 8013472:	9b07      	ldr	r3, [sp, #28]
 8013474:	2b00      	cmp	r3, #0
 8013476:	f43f ae16 	beq.w	80130a6 <_strtod_l+0x7e>
 801347a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801347c:	4648      	mov	r0, r9
 801347e:	f002 f8a8 	bl	80155d2 <_Bfree>
 8013482:	9905      	ldr	r1, [sp, #20]
 8013484:	4648      	mov	r0, r9
 8013486:	f002 f8a4 	bl	80155d2 <_Bfree>
 801348a:	4641      	mov	r1, r8
 801348c:	4648      	mov	r0, r9
 801348e:	f002 f8a0 	bl	80155d2 <_Bfree>
 8013492:	9907      	ldr	r1, [sp, #28]
 8013494:	4648      	mov	r0, r9
 8013496:	f002 f89c 	bl	80155d2 <_Bfree>
 801349a:	4621      	mov	r1, r4
 801349c:	4648      	mov	r0, r9
 801349e:	f002 f898 	bl	80155d2 <_Bfree>
 80134a2:	e600      	b.n	80130a6 <_strtod_l+0x7e>
 80134a4:	9a06      	ldr	r2, [sp, #24]
 80134a6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80134aa:	4293      	cmp	r3, r2
 80134ac:	dbba      	blt.n	8013424 <_strtod_l+0x3fc>
 80134ae:	4d42      	ldr	r5, [pc, #264]	; (80135b8 <_strtod_l+0x590>)
 80134b0:	f1c4 040f 	rsb	r4, r4, #15
 80134b4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80134b8:	4652      	mov	r2, sl
 80134ba:	465b      	mov	r3, fp
 80134bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134c0:	f7f4 ffd2 	bl	8008468 <__aeabi_dmul>
 80134c4:	9b06      	ldr	r3, [sp, #24]
 80134c6:	1b1c      	subs	r4, r3, r4
 80134c8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80134cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80134d0:	e78d      	b.n	80133ee <_strtod_l+0x3c6>
 80134d2:	f113 0f16 	cmn.w	r3, #22
 80134d6:	dba5      	blt.n	8013424 <_strtod_l+0x3fc>
 80134d8:	4a37      	ldr	r2, [pc, #220]	; (80135b8 <_strtod_l+0x590>)
 80134da:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80134de:	e9d2 2300 	ldrd	r2, r3, [r2]
 80134e2:	4650      	mov	r0, sl
 80134e4:	4659      	mov	r1, fp
 80134e6:	f7f5 f8e9 	bl	80086bc <__aeabi_ddiv>
 80134ea:	e782      	b.n	80133f2 <_strtod_l+0x3ca>
 80134ec:	2300      	movs	r3, #0
 80134ee:	4e33      	ldr	r6, [pc, #204]	; (80135bc <_strtod_l+0x594>)
 80134f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80134f4:	4650      	mov	r0, sl
 80134f6:	4659      	mov	r1, fp
 80134f8:	461d      	mov	r5, r3
 80134fa:	f1b8 0f01 	cmp.w	r8, #1
 80134fe:	dc21      	bgt.n	8013544 <_strtod_l+0x51c>
 8013500:	b10b      	cbz	r3, 8013506 <_strtod_l+0x4de>
 8013502:	4682      	mov	sl, r0
 8013504:	468b      	mov	fp, r1
 8013506:	4b2d      	ldr	r3, [pc, #180]	; (80135bc <_strtod_l+0x594>)
 8013508:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801350c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013510:	4652      	mov	r2, sl
 8013512:	465b      	mov	r3, fp
 8013514:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013518:	f7f4 ffa6 	bl	8008468 <__aeabi_dmul>
 801351c:	4b28      	ldr	r3, [pc, #160]	; (80135c0 <_strtod_l+0x598>)
 801351e:	460a      	mov	r2, r1
 8013520:	400b      	ands	r3, r1
 8013522:	4928      	ldr	r1, [pc, #160]	; (80135c4 <_strtod_l+0x59c>)
 8013524:	428b      	cmp	r3, r1
 8013526:	4682      	mov	sl, r0
 8013528:	d898      	bhi.n	801345c <_strtod_l+0x434>
 801352a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801352e:	428b      	cmp	r3, r1
 8013530:	bf86      	itte	hi
 8013532:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80135cc <_strtod_l+0x5a4>
 8013536:	f04f 3aff 	movhi.w	sl, #4294967295
 801353a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801353e:	2300      	movs	r3, #0
 8013540:	9304      	str	r3, [sp, #16]
 8013542:	e077      	b.n	8013634 <_strtod_l+0x60c>
 8013544:	f018 0f01 	tst.w	r8, #1
 8013548:	d006      	beq.n	8013558 <_strtod_l+0x530>
 801354a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013552:	f7f4 ff89 	bl	8008468 <__aeabi_dmul>
 8013556:	2301      	movs	r3, #1
 8013558:	3501      	adds	r5, #1
 801355a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801355e:	e7cc      	b.n	80134fa <_strtod_l+0x4d2>
 8013560:	d0ed      	beq.n	801353e <_strtod_l+0x516>
 8013562:	f1c8 0800 	rsb	r8, r8, #0
 8013566:	f018 020f 	ands.w	r2, r8, #15
 801356a:	d00a      	beq.n	8013582 <_strtod_l+0x55a>
 801356c:	4b12      	ldr	r3, [pc, #72]	; (80135b8 <_strtod_l+0x590>)
 801356e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013572:	4650      	mov	r0, sl
 8013574:	4659      	mov	r1, fp
 8013576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801357a:	f7f5 f89f 	bl	80086bc <__aeabi_ddiv>
 801357e:	4682      	mov	sl, r0
 8013580:	468b      	mov	fp, r1
 8013582:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013586:	d0da      	beq.n	801353e <_strtod_l+0x516>
 8013588:	f1b8 0f1f 	cmp.w	r8, #31
 801358c:	dd20      	ble.n	80135d0 <_strtod_l+0x5a8>
 801358e:	2400      	movs	r4, #0
 8013590:	46a0      	mov	r8, r4
 8013592:	9407      	str	r4, [sp, #28]
 8013594:	9405      	str	r4, [sp, #20]
 8013596:	2322      	movs	r3, #34	; 0x22
 8013598:	f04f 0a00 	mov.w	sl, #0
 801359c:	f04f 0b00 	mov.w	fp, #0
 80135a0:	f8c9 3000 	str.w	r3, [r9]
 80135a4:	e765      	b.n	8013472 <_strtod_l+0x44a>
 80135a6:	bf00      	nop
 80135a8:	0801660e 	.word	0x0801660e
 80135ac:	080166b3 	.word	0x080166b3
 80135b0:	08016616 	.word	0x08016616
 80135b4:	08016670 	.word	0x08016670
 80135b8:	080166f0 	.word	0x080166f0
 80135bc:	080166c8 	.word	0x080166c8
 80135c0:	7ff00000 	.word	0x7ff00000
 80135c4:	7ca00000 	.word	0x7ca00000
 80135c8:	fff80000 	.word	0xfff80000
 80135cc:	7fefffff 	.word	0x7fefffff
 80135d0:	f018 0310 	ands.w	r3, r8, #16
 80135d4:	bf18      	it	ne
 80135d6:	236a      	movne	r3, #106	; 0x6a
 80135d8:	4da0      	ldr	r5, [pc, #640]	; (801385c <_strtod_l+0x834>)
 80135da:	9304      	str	r3, [sp, #16]
 80135dc:	4650      	mov	r0, sl
 80135de:	4659      	mov	r1, fp
 80135e0:	2300      	movs	r3, #0
 80135e2:	f1b8 0f00 	cmp.w	r8, #0
 80135e6:	f300 810a 	bgt.w	80137fe <_strtod_l+0x7d6>
 80135ea:	b10b      	cbz	r3, 80135f0 <_strtod_l+0x5c8>
 80135ec:	4682      	mov	sl, r0
 80135ee:	468b      	mov	fp, r1
 80135f0:	9b04      	ldr	r3, [sp, #16]
 80135f2:	b1bb      	cbz	r3, 8013624 <_strtod_l+0x5fc>
 80135f4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80135f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	4659      	mov	r1, fp
 8013600:	dd10      	ble.n	8013624 <_strtod_l+0x5fc>
 8013602:	2b1f      	cmp	r3, #31
 8013604:	f340 8107 	ble.w	8013816 <_strtod_l+0x7ee>
 8013608:	2b34      	cmp	r3, #52	; 0x34
 801360a:	bfde      	ittt	le
 801360c:	3b20      	suble	r3, #32
 801360e:	f04f 32ff 	movle.w	r2, #4294967295
 8013612:	fa02 f303 	lslle.w	r3, r2, r3
 8013616:	f04f 0a00 	mov.w	sl, #0
 801361a:	bfcc      	ite	gt
 801361c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013620:	ea03 0b01 	andle.w	fp, r3, r1
 8013624:	2200      	movs	r2, #0
 8013626:	2300      	movs	r3, #0
 8013628:	4650      	mov	r0, sl
 801362a:	4659      	mov	r1, fp
 801362c:	f7f5 f984 	bl	8008938 <__aeabi_dcmpeq>
 8013630:	2800      	cmp	r0, #0
 8013632:	d1ac      	bne.n	801358e <_strtod_l+0x566>
 8013634:	9b07      	ldr	r3, [sp, #28]
 8013636:	9300      	str	r3, [sp, #0]
 8013638:	9a05      	ldr	r2, [sp, #20]
 801363a:	9908      	ldr	r1, [sp, #32]
 801363c:	4623      	mov	r3, r4
 801363e:	4648      	mov	r0, r9
 8013640:	f002 f819 	bl	8015676 <__s2b>
 8013644:	9007      	str	r0, [sp, #28]
 8013646:	2800      	cmp	r0, #0
 8013648:	f43f af08 	beq.w	801345c <_strtod_l+0x434>
 801364c:	9a06      	ldr	r2, [sp, #24]
 801364e:	9b06      	ldr	r3, [sp, #24]
 8013650:	2a00      	cmp	r2, #0
 8013652:	f1c3 0300 	rsb	r3, r3, #0
 8013656:	bfa8      	it	ge
 8013658:	2300      	movge	r3, #0
 801365a:	930e      	str	r3, [sp, #56]	; 0x38
 801365c:	2400      	movs	r4, #0
 801365e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013662:	9316      	str	r3, [sp, #88]	; 0x58
 8013664:	46a0      	mov	r8, r4
 8013666:	9b07      	ldr	r3, [sp, #28]
 8013668:	4648      	mov	r0, r9
 801366a:	6859      	ldr	r1, [r3, #4]
 801366c:	f001 ff7d 	bl	801556a <_Balloc>
 8013670:	9005      	str	r0, [sp, #20]
 8013672:	2800      	cmp	r0, #0
 8013674:	f43f aef6 	beq.w	8013464 <_strtod_l+0x43c>
 8013678:	9b07      	ldr	r3, [sp, #28]
 801367a:	691a      	ldr	r2, [r3, #16]
 801367c:	3202      	adds	r2, #2
 801367e:	f103 010c 	add.w	r1, r3, #12
 8013682:	0092      	lsls	r2, r2, #2
 8013684:	300c      	adds	r0, #12
 8013686:	f7fd ff09 	bl	801149c <memcpy>
 801368a:	aa1e      	add	r2, sp, #120	; 0x78
 801368c:	a91d      	add	r1, sp, #116	; 0x74
 801368e:	ec4b ab10 	vmov	d0, sl, fp
 8013692:	4648      	mov	r0, r9
 8013694:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013698:	f002 faa8 	bl	8015bec <__d2b>
 801369c:	901c      	str	r0, [sp, #112]	; 0x70
 801369e:	2800      	cmp	r0, #0
 80136a0:	f43f aee0 	beq.w	8013464 <_strtod_l+0x43c>
 80136a4:	2101      	movs	r1, #1
 80136a6:	4648      	mov	r0, r9
 80136a8:	f002 f871 	bl	801578e <__i2b>
 80136ac:	4680      	mov	r8, r0
 80136ae:	2800      	cmp	r0, #0
 80136b0:	f43f aed8 	beq.w	8013464 <_strtod_l+0x43c>
 80136b4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80136b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80136b8:	2e00      	cmp	r6, #0
 80136ba:	bfab      	itete	ge
 80136bc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80136be:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80136c0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80136c2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80136c4:	bfac      	ite	ge
 80136c6:	18f7      	addge	r7, r6, r3
 80136c8:	1b9d      	sublt	r5, r3, r6
 80136ca:	9b04      	ldr	r3, [sp, #16]
 80136cc:	1af6      	subs	r6, r6, r3
 80136ce:	4416      	add	r6, r2
 80136d0:	4b63      	ldr	r3, [pc, #396]	; (8013860 <_strtod_l+0x838>)
 80136d2:	3e01      	subs	r6, #1
 80136d4:	429e      	cmp	r6, r3
 80136d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80136da:	f280 80af 	bge.w	801383c <_strtod_l+0x814>
 80136de:	1b9b      	subs	r3, r3, r6
 80136e0:	2b1f      	cmp	r3, #31
 80136e2:	eba2 0203 	sub.w	r2, r2, r3
 80136e6:	f04f 0101 	mov.w	r1, #1
 80136ea:	f300 809b 	bgt.w	8013824 <_strtod_l+0x7fc>
 80136ee:	fa01 f303 	lsl.w	r3, r1, r3
 80136f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80136f4:	2300      	movs	r3, #0
 80136f6:	930a      	str	r3, [sp, #40]	; 0x28
 80136f8:	18be      	adds	r6, r7, r2
 80136fa:	9b04      	ldr	r3, [sp, #16]
 80136fc:	42b7      	cmp	r7, r6
 80136fe:	4415      	add	r5, r2
 8013700:	441d      	add	r5, r3
 8013702:	463b      	mov	r3, r7
 8013704:	bfa8      	it	ge
 8013706:	4633      	movge	r3, r6
 8013708:	42ab      	cmp	r3, r5
 801370a:	bfa8      	it	ge
 801370c:	462b      	movge	r3, r5
 801370e:	2b00      	cmp	r3, #0
 8013710:	bfc2      	ittt	gt
 8013712:	1af6      	subgt	r6, r6, r3
 8013714:	1aed      	subgt	r5, r5, r3
 8013716:	1aff      	subgt	r7, r7, r3
 8013718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801371a:	b1bb      	cbz	r3, 801374c <_strtod_l+0x724>
 801371c:	4641      	mov	r1, r8
 801371e:	461a      	mov	r2, r3
 8013720:	4648      	mov	r0, r9
 8013722:	f002 f8d3 	bl	80158cc <__pow5mult>
 8013726:	4680      	mov	r8, r0
 8013728:	2800      	cmp	r0, #0
 801372a:	f43f ae9b 	beq.w	8013464 <_strtod_l+0x43c>
 801372e:	4601      	mov	r1, r0
 8013730:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013732:	4648      	mov	r0, r9
 8013734:	f002 f834 	bl	80157a0 <__multiply>
 8013738:	900c      	str	r0, [sp, #48]	; 0x30
 801373a:	2800      	cmp	r0, #0
 801373c:	f43f ae92 	beq.w	8013464 <_strtod_l+0x43c>
 8013740:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013742:	4648      	mov	r0, r9
 8013744:	f001 ff45 	bl	80155d2 <_Bfree>
 8013748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801374a:	931c      	str	r3, [sp, #112]	; 0x70
 801374c:	2e00      	cmp	r6, #0
 801374e:	dc7a      	bgt.n	8013846 <_strtod_l+0x81e>
 8013750:	9b06      	ldr	r3, [sp, #24]
 8013752:	2b00      	cmp	r3, #0
 8013754:	dd08      	ble.n	8013768 <_strtod_l+0x740>
 8013756:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013758:	9905      	ldr	r1, [sp, #20]
 801375a:	4648      	mov	r0, r9
 801375c:	f002 f8b6 	bl	80158cc <__pow5mult>
 8013760:	9005      	str	r0, [sp, #20]
 8013762:	2800      	cmp	r0, #0
 8013764:	f43f ae7e 	beq.w	8013464 <_strtod_l+0x43c>
 8013768:	2d00      	cmp	r5, #0
 801376a:	dd08      	ble.n	801377e <_strtod_l+0x756>
 801376c:	462a      	mov	r2, r5
 801376e:	9905      	ldr	r1, [sp, #20]
 8013770:	4648      	mov	r0, r9
 8013772:	f002 f8f9 	bl	8015968 <__lshift>
 8013776:	9005      	str	r0, [sp, #20]
 8013778:	2800      	cmp	r0, #0
 801377a:	f43f ae73 	beq.w	8013464 <_strtod_l+0x43c>
 801377e:	2f00      	cmp	r7, #0
 8013780:	dd08      	ble.n	8013794 <_strtod_l+0x76c>
 8013782:	4641      	mov	r1, r8
 8013784:	463a      	mov	r2, r7
 8013786:	4648      	mov	r0, r9
 8013788:	f002 f8ee 	bl	8015968 <__lshift>
 801378c:	4680      	mov	r8, r0
 801378e:	2800      	cmp	r0, #0
 8013790:	f43f ae68 	beq.w	8013464 <_strtod_l+0x43c>
 8013794:	9a05      	ldr	r2, [sp, #20]
 8013796:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013798:	4648      	mov	r0, r9
 801379a:	f002 f953 	bl	8015a44 <__mdiff>
 801379e:	4604      	mov	r4, r0
 80137a0:	2800      	cmp	r0, #0
 80137a2:	f43f ae5f 	beq.w	8013464 <_strtod_l+0x43c>
 80137a6:	68c3      	ldr	r3, [r0, #12]
 80137a8:	930c      	str	r3, [sp, #48]	; 0x30
 80137aa:	2300      	movs	r3, #0
 80137ac:	60c3      	str	r3, [r0, #12]
 80137ae:	4641      	mov	r1, r8
 80137b0:	f002 f92e 	bl	8015a10 <__mcmp>
 80137b4:	2800      	cmp	r0, #0
 80137b6:	da55      	bge.n	8013864 <_strtod_l+0x83c>
 80137b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137ba:	b9e3      	cbnz	r3, 80137f6 <_strtod_l+0x7ce>
 80137bc:	f1ba 0f00 	cmp.w	sl, #0
 80137c0:	d119      	bne.n	80137f6 <_strtod_l+0x7ce>
 80137c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80137c6:	b9b3      	cbnz	r3, 80137f6 <_strtod_l+0x7ce>
 80137c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80137cc:	0d1b      	lsrs	r3, r3, #20
 80137ce:	051b      	lsls	r3, r3, #20
 80137d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80137d4:	d90f      	bls.n	80137f6 <_strtod_l+0x7ce>
 80137d6:	6963      	ldr	r3, [r4, #20]
 80137d8:	b913      	cbnz	r3, 80137e0 <_strtod_l+0x7b8>
 80137da:	6923      	ldr	r3, [r4, #16]
 80137dc:	2b01      	cmp	r3, #1
 80137de:	dd0a      	ble.n	80137f6 <_strtod_l+0x7ce>
 80137e0:	4621      	mov	r1, r4
 80137e2:	2201      	movs	r2, #1
 80137e4:	4648      	mov	r0, r9
 80137e6:	f002 f8bf 	bl	8015968 <__lshift>
 80137ea:	4641      	mov	r1, r8
 80137ec:	4604      	mov	r4, r0
 80137ee:	f002 f90f 	bl	8015a10 <__mcmp>
 80137f2:	2800      	cmp	r0, #0
 80137f4:	dc67      	bgt.n	80138c6 <_strtod_l+0x89e>
 80137f6:	9b04      	ldr	r3, [sp, #16]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d171      	bne.n	80138e0 <_strtod_l+0x8b8>
 80137fc:	e63d      	b.n	801347a <_strtod_l+0x452>
 80137fe:	f018 0f01 	tst.w	r8, #1
 8013802:	d004      	beq.n	801380e <_strtod_l+0x7e6>
 8013804:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013808:	f7f4 fe2e 	bl	8008468 <__aeabi_dmul>
 801380c:	2301      	movs	r3, #1
 801380e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013812:	3508      	adds	r5, #8
 8013814:	e6e5      	b.n	80135e2 <_strtod_l+0x5ba>
 8013816:	f04f 32ff 	mov.w	r2, #4294967295
 801381a:	fa02 f303 	lsl.w	r3, r2, r3
 801381e:	ea03 0a0a 	and.w	sl, r3, sl
 8013822:	e6ff      	b.n	8013624 <_strtod_l+0x5fc>
 8013824:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013828:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801382c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013830:	36e2      	adds	r6, #226	; 0xe2
 8013832:	fa01 f306 	lsl.w	r3, r1, r6
 8013836:	930a      	str	r3, [sp, #40]	; 0x28
 8013838:	910f      	str	r1, [sp, #60]	; 0x3c
 801383a:	e75d      	b.n	80136f8 <_strtod_l+0x6d0>
 801383c:	2300      	movs	r3, #0
 801383e:	930a      	str	r3, [sp, #40]	; 0x28
 8013840:	2301      	movs	r3, #1
 8013842:	930f      	str	r3, [sp, #60]	; 0x3c
 8013844:	e758      	b.n	80136f8 <_strtod_l+0x6d0>
 8013846:	4632      	mov	r2, r6
 8013848:	991c      	ldr	r1, [sp, #112]	; 0x70
 801384a:	4648      	mov	r0, r9
 801384c:	f002 f88c 	bl	8015968 <__lshift>
 8013850:	901c      	str	r0, [sp, #112]	; 0x70
 8013852:	2800      	cmp	r0, #0
 8013854:	f47f af7c 	bne.w	8013750 <_strtod_l+0x728>
 8013858:	e604      	b.n	8013464 <_strtod_l+0x43c>
 801385a:	bf00      	nop
 801385c:	08016688 	.word	0x08016688
 8013860:	fffffc02 	.word	0xfffffc02
 8013864:	465d      	mov	r5, fp
 8013866:	f040 8086 	bne.w	8013976 <_strtod_l+0x94e>
 801386a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801386c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013870:	b32a      	cbz	r2, 80138be <_strtod_l+0x896>
 8013872:	4aaf      	ldr	r2, [pc, #700]	; (8013b30 <_strtod_l+0xb08>)
 8013874:	4293      	cmp	r3, r2
 8013876:	d153      	bne.n	8013920 <_strtod_l+0x8f8>
 8013878:	9b04      	ldr	r3, [sp, #16]
 801387a:	4650      	mov	r0, sl
 801387c:	b1d3      	cbz	r3, 80138b4 <_strtod_l+0x88c>
 801387e:	4aad      	ldr	r2, [pc, #692]	; (8013b34 <_strtod_l+0xb0c>)
 8013880:	402a      	ands	r2, r5
 8013882:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013886:	f04f 31ff 	mov.w	r1, #4294967295
 801388a:	d816      	bhi.n	80138ba <_strtod_l+0x892>
 801388c:	0d12      	lsrs	r2, r2, #20
 801388e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013892:	fa01 f303 	lsl.w	r3, r1, r3
 8013896:	4298      	cmp	r0, r3
 8013898:	d142      	bne.n	8013920 <_strtod_l+0x8f8>
 801389a:	4ba7      	ldr	r3, [pc, #668]	; (8013b38 <_strtod_l+0xb10>)
 801389c:	429d      	cmp	r5, r3
 801389e:	d102      	bne.n	80138a6 <_strtod_l+0x87e>
 80138a0:	3001      	adds	r0, #1
 80138a2:	f43f addf 	beq.w	8013464 <_strtod_l+0x43c>
 80138a6:	4ba3      	ldr	r3, [pc, #652]	; (8013b34 <_strtod_l+0xb0c>)
 80138a8:	402b      	ands	r3, r5
 80138aa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80138ae:	f04f 0a00 	mov.w	sl, #0
 80138b2:	e7a0      	b.n	80137f6 <_strtod_l+0x7ce>
 80138b4:	f04f 33ff 	mov.w	r3, #4294967295
 80138b8:	e7ed      	b.n	8013896 <_strtod_l+0x86e>
 80138ba:	460b      	mov	r3, r1
 80138bc:	e7eb      	b.n	8013896 <_strtod_l+0x86e>
 80138be:	bb7b      	cbnz	r3, 8013920 <_strtod_l+0x8f8>
 80138c0:	f1ba 0f00 	cmp.w	sl, #0
 80138c4:	d12c      	bne.n	8013920 <_strtod_l+0x8f8>
 80138c6:	9904      	ldr	r1, [sp, #16]
 80138c8:	4a9a      	ldr	r2, [pc, #616]	; (8013b34 <_strtod_l+0xb0c>)
 80138ca:	465b      	mov	r3, fp
 80138cc:	b1f1      	cbz	r1, 801390c <_strtod_l+0x8e4>
 80138ce:	ea02 010b 	and.w	r1, r2, fp
 80138d2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80138d6:	dc19      	bgt.n	801390c <_strtod_l+0x8e4>
 80138d8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80138dc:	f77f ae5b 	ble.w	8013596 <_strtod_l+0x56e>
 80138e0:	4a96      	ldr	r2, [pc, #600]	; (8013b3c <_strtod_l+0xb14>)
 80138e2:	2300      	movs	r3, #0
 80138e4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80138e8:	4650      	mov	r0, sl
 80138ea:	4659      	mov	r1, fp
 80138ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80138f0:	f7f4 fdba 	bl	8008468 <__aeabi_dmul>
 80138f4:	4682      	mov	sl, r0
 80138f6:	468b      	mov	fp, r1
 80138f8:	2900      	cmp	r1, #0
 80138fa:	f47f adbe 	bne.w	801347a <_strtod_l+0x452>
 80138fe:	2800      	cmp	r0, #0
 8013900:	f47f adbb 	bne.w	801347a <_strtod_l+0x452>
 8013904:	2322      	movs	r3, #34	; 0x22
 8013906:	f8c9 3000 	str.w	r3, [r9]
 801390a:	e5b6      	b.n	801347a <_strtod_l+0x452>
 801390c:	4013      	ands	r3, r2
 801390e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013912:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013916:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801391a:	f04f 3aff 	mov.w	sl, #4294967295
 801391e:	e76a      	b.n	80137f6 <_strtod_l+0x7ce>
 8013920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013922:	b193      	cbz	r3, 801394a <_strtod_l+0x922>
 8013924:	422b      	tst	r3, r5
 8013926:	f43f af66 	beq.w	80137f6 <_strtod_l+0x7ce>
 801392a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801392c:	9a04      	ldr	r2, [sp, #16]
 801392e:	4650      	mov	r0, sl
 8013930:	4659      	mov	r1, fp
 8013932:	b173      	cbz	r3, 8013952 <_strtod_l+0x92a>
 8013934:	f7ff fb5b 	bl	8012fee <sulp>
 8013938:	4602      	mov	r2, r0
 801393a:	460b      	mov	r3, r1
 801393c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013940:	f7f4 fbdc 	bl	80080fc <__adddf3>
 8013944:	4682      	mov	sl, r0
 8013946:	468b      	mov	fp, r1
 8013948:	e755      	b.n	80137f6 <_strtod_l+0x7ce>
 801394a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801394c:	ea13 0f0a 	tst.w	r3, sl
 8013950:	e7e9      	b.n	8013926 <_strtod_l+0x8fe>
 8013952:	f7ff fb4c 	bl	8012fee <sulp>
 8013956:	4602      	mov	r2, r0
 8013958:	460b      	mov	r3, r1
 801395a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801395e:	f7f4 fbcb 	bl	80080f8 <__aeabi_dsub>
 8013962:	2200      	movs	r2, #0
 8013964:	2300      	movs	r3, #0
 8013966:	4682      	mov	sl, r0
 8013968:	468b      	mov	fp, r1
 801396a:	f7f4 ffe5 	bl	8008938 <__aeabi_dcmpeq>
 801396e:	2800      	cmp	r0, #0
 8013970:	f47f ae11 	bne.w	8013596 <_strtod_l+0x56e>
 8013974:	e73f      	b.n	80137f6 <_strtod_l+0x7ce>
 8013976:	4641      	mov	r1, r8
 8013978:	4620      	mov	r0, r4
 801397a:	f002 f986 	bl	8015c8a <__ratio>
 801397e:	ec57 6b10 	vmov	r6, r7, d0
 8013982:	2200      	movs	r2, #0
 8013984:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013988:	ee10 0a10 	vmov	r0, s0
 801398c:	4639      	mov	r1, r7
 801398e:	f7f4 ffe7 	bl	8008960 <__aeabi_dcmple>
 8013992:	2800      	cmp	r0, #0
 8013994:	d077      	beq.n	8013a86 <_strtod_l+0xa5e>
 8013996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013998:	2b00      	cmp	r3, #0
 801399a:	d04a      	beq.n	8013a32 <_strtod_l+0xa0a>
 801399c:	4b68      	ldr	r3, [pc, #416]	; (8013b40 <_strtod_l+0xb18>)
 801399e:	2200      	movs	r2, #0
 80139a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80139a4:	4f66      	ldr	r7, [pc, #408]	; (8013b40 <_strtod_l+0xb18>)
 80139a6:	2600      	movs	r6, #0
 80139a8:	4b62      	ldr	r3, [pc, #392]	; (8013b34 <_strtod_l+0xb0c>)
 80139aa:	402b      	ands	r3, r5
 80139ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80139ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80139b0:	4b64      	ldr	r3, [pc, #400]	; (8013b44 <_strtod_l+0xb1c>)
 80139b2:	429a      	cmp	r2, r3
 80139b4:	f040 80ce 	bne.w	8013b54 <_strtod_l+0xb2c>
 80139b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80139bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80139c0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80139c4:	ec4b ab10 	vmov	d0, sl, fp
 80139c8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80139cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80139d0:	f002 f896 	bl	8015b00 <__ulp>
 80139d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80139d8:	ec53 2b10 	vmov	r2, r3, d0
 80139dc:	f7f4 fd44 	bl	8008468 <__aeabi_dmul>
 80139e0:	4652      	mov	r2, sl
 80139e2:	465b      	mov	r3, fp
 80139e4:	f7f4 fb8a 	bl	80080fc <__adddf3>
 80139e8:	460b      	mov	r3, r1
 80139ea:	4952      	ldr	r1, [pc, #328]	; (8013b34 <_strtod_l+0xb0c>)
 80139ec:	4a56      	ldr	r2, [pc, #344]	; (8013b48 <_strtod_l+0xb20>)
 80139ee:	4019      	ands	r1, r3
 80139f0:	4291      	cmp	r1, r2
 80139f2:	4682      	mov	sl, r0
 80139f4:	d95b      	bls.n	8013aae <_strtod_l+0xa86>
 80139f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139f8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80139fc:	4293      	cmp	r3, r2
 80139fe:	d103      	bne.n	8013a08 <_strtod_l+0x9e0>
 8013a00:	9b08      	ldr	r3, [sp, #32]
 8013a02:	3301      	adds	r3, #1
 8013a04:	f43f ad2e 	beq.w	8013464 <_strtod_l+0x43c>
 8013a08:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8013b38 <_strtod_l+0xb10>
 8013a0c:	f04f 3aff 	mov.w	sl, #4294967295
 8013a10:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013a12:	4648      	mov	r0, r9
 8013a14:	f001 fddd 	bl	80155d2 <_Bfree>
 8013a18:	9905      	ldr	r1, [sp, #20]
 8013a1a:	4648      	mov	r0, r9
 8013a1c:	f001 fdd9 	bl	80155d2 <_Bfree>
 8013a20:	4641      	mov	r1, r8
 8013a22:	4648      	mov	r0, r9
 8013a24:	f001 fdd5 	bl	80155d2 <_Bfree>
 8013a28:	4621      	mov	r1, r4
 8013a2a:	4648      	mov	r0, r9
 8013a2c:	f001 fdd1 	bl	80155d2 <_Bfree>
 8013a30:	e619      	b.n	8013666 <_strtod_l+0x63e>
 8013a32:	f1ba 0f00 	cmp.w	sl, #0
 8013a36:	d11a      	bne.n	8013a6e <_strtod_l+0xa46>
 8013a38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013a3c:	b9eb      	cbnz	r3, 8013a7a <_strtod_l+0xa52>
 8013a3e:	2200      	movs	r2, #0
 8013a40:	4b3f      	ldr	r3, [pc, #252]	; (8013b40 <_strtod_l+0xb18>)
 8013a42:	4630      	mov	r0, r6
 8013a44:	4639      	mov	r1, r7
 8013a46:	f7f4 ff81 	bl	800894c <__aeabi_dcmplt>
 8013a4a:	b9c8      	cbnz	r0, 8013a80 <_strtod_l+0xa58>
 8013a4c:	4630      	mov	r0, r6
 8013a4e:	4639      	mov	r1, r7
 8013a50:	2200      	movs	r2, #0
 8013a52:	4b3e      	ldr	r3, [pc, #248]	; (8013b4c <_strtod_l+0xb24>)
 8013a54:	f7f4 fd08 	bl	8008468 <__aeabi_dmul>
 8013a58:	4606      	mov	r6, r0
 8013a5a:	460f      	mov	r7, r1
 8013a5c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013a60:	9618      	str	r6, [sp, #96]	; 0x60
 8013a62:	9319      	str	r3, [sp, #100]	; 0x64
 8013a64:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8013a68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013a6c:	e79c      	b.n	80139a8 <_strtod_l+0x980>
 8013a6e:	f1ba 0f01 	cmp.w	sl, #1
 8013a72:	d102      	bne.n	8013a7a <_strtod_l+0xa52>
 8013a74:	2d00      	cmp	r5, #0
 8013a76:	f43f ad8e 	beq.w	8013596 <_strtod_l+0x56e>
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	4b34      	ldr	r3, [pc, #208]	; (8013b50 <_strtod_l+0xb28>)
 8013a7e:	e78f      	b.n	80139a0 <_strtod_l+0x978>
 8013a80:	2600      	movs	r6, #0
 8013a82:	4f32      	ldr	r7, [pc, #200]	; (8013b4c <_strtod_l+0xb24>)
 8013a84:	e7ea      	b.n	8013a5c <_strtod_l+0xa34>
 8013a86:	4b31      	ldr	r3, [pc, #196]	; (8013b4c <_strtod_l+0xb24>)
 8013a88:	4630      	mov	r0, r6
 8013a8a:	4639      	mov	r1, r7
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	f7f4 fceb 	bl	8008468 <__aeabi_dmul>
 8013a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a94:	4606      	mov	r6, r0
 8013a96:	460f      	mov	r7, r1
 8013a98:	b933      	cbnz	r3, 8013aa8 <_strtod_l+0xa80>
 8013a9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a9e:	9010      	str	r0, [sp, #64]	; 0x40
 8013aa0:	9311      	str	r3, [sp, #68]	; 0x44
 8013aa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013aa6:	e7df      	b.n	8013a68 <_strtod_l+0xa40>
 8013aa8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013aac:	e7f9      	b.n	8013aa2 <_strtod_l+0xa7a>
 8013aae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013ab2:	9b04      	ldr	r3, [sp, #16]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d1ab      	bne.n	8013a10 <_strtod_l+0x9e8>
 8013ab8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013abc:	0d1b      	lsrs	r3, r3, #20
 8013abe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013ac0:	051b      	lsls	r3, r3, #20
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	465d      	mov	r5, fp
 8013ac6:	d1a3      	bne.n	8013a10 <_strtod_l+0x9e8>
 8013ac8:	4639      	mov	r1, r7
 8013aca:	4630      	mov	r0, r6
 8013acc:	f7f4 ff7c 	bl	80089c8 <__aeabi_d2iz>
 8013ad0:	f7f4 fc60 	bl	8008394 <__aeabi_i2d>
 8013ad4:	460b      	mov	r3, r1
 8013ad6:	4602      	mov	r2, r0
 8013ad8:	4639      	mov	r1, r7
 8013ada:	4630      	mov	r0, r6
 8013adc:	f7f4 fb0c 	bl	80080f8 <__aeabi_dsub>
 8013ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ae2:	4606      	mov	r6, r0
 8013ae4:	460f      	mov	r7, r1
 8013ae6:	b933      	cbnz	r3, 8013af6 <_strtod_l+0xace>
 8013ae8:	f1ba 0f00 	cmp.w	sl, #0
 8013aec:	d103      	bne.n	8013af6 <_strtod_l+0xace>
 8013aee:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8013af2:	2d00      	cmp	r5, #0
 8013af4:	d06d      	beq.n	8013bd2 <_strtod_l+0xbaa>
 8013af6:	a30a      	add	r3, pc, #40	; (adr r3, 8013b20 <_strtod_l+0xaf8>)
 8013af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013afc:	4630      	mov	r0, r6
 8013afe:	4639      	mov	r1, r7
 8013b00:	f7f4 ff24 	bl	800894c <__aeabi_dcmplt>
 8013b04:	2800      	cmp	r0, #0
 8013b06:	f47f acb8 	bne.w	801347a <_strtod_l+0x452>
 8013b0a:	a307      	add	r3, pc, #28	; (adr r3, 8013b28 <_strtod_l+0xb00>)
 8013b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b10:	4630      	mov	r0, r6
 8013b12:	4639      	mov	r1, r7
 8013b14:	f7f4 ff38 	bl	8008988 <__aeabi_dcmpgt>
 8013b18:	2800      	cmp	r0, #0
 8013b1a:	f43f af79 	beq.w	8013a10 <_strtod_l+0x9e8>
 8013b1e:	e4ac      	b.n	801347a <_strtod_l+0x452>
 8013b20:	94a03595 	.word	0x94a03595
 8013b24:	3fdfffff 	.word	0x3fdfffff
 8013b28:	35afe535 	.word	0x35afe535
 8013b2c:	3fe00000 	.word	0x3fe00000
 8013b30:	000fffff 	.word	0x000fffff
 8013b34:	7ff00000 	.word	0x7ff00000
 8013b38:	7fefffff 	.word	0x7fefffff
 8013b3c:	39500000 	.word	0x39500000
 8013b40:	3ff00000 	.word	0x3ff00000
 8013b44:	7fe00000 	.word	0x7fe00000
 8013b48:	7c9fffff 	.word	0x7c9fffff
 8013b4c:	3fe00000 	.word	0x3fe00000
 8013b50:	bff00000 	.word	0xbff00000
 8013b54:	9b04      	ldr	r3, [sp, #16]
 8013b56:	b333      	cbz	r3, 8013ba6 <_strtod_l+0xb7e>
 8013b58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013b5a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013b5e:	d822      	bhi.n	8013ba6 <_strtod_l+0xb7e>
 8013b60:	a327      	add	r3, pc, #156	; (adr r3, 8013c00 <_strtod_l+0xbd8>)
 8013b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b66:	4630      	mov	r0, r6
 8013b68:	4639      	mov	r1, r7
 8013b6a:	f7f4 fef9 	bl	8008960 <__aeabi_dcmple>
 8013b6e:	b1a0      	cbz	r0, 8013b9a <_strtod_l+0xb72>
 8013b70:	4639      	mov	r1, r7
 8013b72:	4630      	mov	r0, r6
 8013b74:	f7f4 ff50 	bl	8008a18 <__aeabi_d2uiz>
 8013b78:	2800      	cmp	r0, #0
 8013b7a:	bf08      	it	eq
 8013b7c:	2001      	moveq	r0, #1
 8013b7e:	f7f4 fbf9 	bl	8008374 <__aeabi_ui2d>
 8013b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b84:	4606      	mov	r6, r0
 8013b86:	460f      	mov	r7, r1
 8013b88:	bb03      	cbnz	r3, 8013bcc <_strtod_l+0xba4>
 8013b8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b8e:	9012      	str	r0, [sp, #72]	; 0x48
 8013b90:	9313      	str	r3, [sp, #76]	; 0x4c
 8013b92:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013b96:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013b9e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013ba2:	1a9b      	subs	r3, r3, r2
 8013ba4:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ba6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8013baa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8013bae:	f001 ffa7 	bl	8015b00 <__ulp>
 8013bb2:	4650      	mov	r0, sl
 8013bb4:	ec53 2b10 	vmov	r2, r3, d0
 8013bb8:	4659      	mov	r1, fp
 8013bba:	f7f4 fc55 	bl	8008468 <__aeabi_dmul>
 8013bbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013bc2:	f7f4 fa9b 	bl	80080fc <__adddf3>
 8013bc6:	4682      	mov	sl, r0
 8013bc8:	468b      	mov	fp, r1
 8013bca:	e772      	b.n	8013ab2 <_strtod_l+0xa8a>
 8013bcc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8013bd0:	e7df      	b.n	8013b92 <_strtod_l+0xb6a>
 8013bd2:	a30d      	add	r3, pc, #52	; (adr r3, 8013c08 <_strtod_l+0xbe0>)
 8013bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd8:	f7f4 feb8 	bl	800894c <__aeabi_dcmplt>
 8013bdc:	e79c      	b.n	8013b18 <_strtod_l+0xaf0>
 8013bde:	2300      	movs	r3, #0
 8013be0:	930d      	str	r3, [sp, #52]	; 0x34
 8013be2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013be4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013be6:	6013      	str	r3, [r2, #0]
 8013be8:	f7ff ba61 	b.w	80130ae <_strtod_l+0x86>
 8013bec:	2b65      	cmp	r3, #101	; 0x65
 8013bee:	f04f 0200 	mov.w	r2, #0
 8013bf2:	f43f ab4e 	beq.w	8013292 <_strtod_l+0x26a>
 8013bf6:	2101      	movs	r1, #1
 8013bf8:	4614      	mov	r4, r2
 8013bfa:	9104      	str	r1, [sp, #16]
 8013bfc:	f7ff bacb 	b.w	8013196 <_strtod_l+0x16e>
 8013c00:	ffc00000 	.word	0xffc00000
 8013c04:	41dfffff 	.word	0x41dfffff
 8013c08:	94a03595 	.word	0x94a03595
 8013c0c:	3fcfffff 	.word	0x3fcfffff

08013c10 <_strtod_r>:
 8013c10:	4b05      	ldr	r3, [pc, #20]	; (8013c28 <_strtod_r+0x18>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	b410      	push	{r4}
 8013c16:	6a1b      	ldr	r3, [r3, #32]
 8013c18:	4c04      	ldr	r4, [pc, #16]	; (8013c2c <_strtod_r+0x1c>)
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	bf08      	it	eq
 8013c1e:	4623      	moveq	r3, r4
 8013c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c24:	f7ff ba00 	b.w	8013028 <_strtod_l>
 8013c28:	20000038 	.word	0x20000038
 8013c2c:	2000009c 	.word	0x2000009c

08013c30 <_strtol_l.isra.0>:
 8013c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c34:	4680      	mov	r8, r0
 8013c36:	4689      	mov	r9, r1
 8013c38:	4692      	mov	sl, r2
 8013c3a:	461e      	mov	r6, r3
 8013c3c:	460f      	mov	r7, r1
 8013c3e:	463d      	mov	r5, r7
 8013c40:	9808      	ldr	r0, [sp, #32]
 8013c42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c46:	f001 fc27 	bl	8015498 <__locale_ctype_ptr_l>
 8013c4a:	4420      	add	r0, r4
 8013c4c:	7843      	ldrb	r3, [r0, #1]
 8013c4e:	f013 0308 	ands.w	r3, r3, #8
 8013c52:	d132      	bne.n	8013cba <_strtol_l.isra.0+0x8a>
 8013c54:	2c2d      	cmp	r4, #45	; 0x2d
 8013c56:	d132      	bne.n	8013cbe <_strtol_l.isra.0+0x8e>
 8013c58:	787c      	ldrb	r4, [r7, #1]
 8013c5a:	1cbd      	adds	r5, r7, #2
 8013c5c:	2201      	movs	r2, #1
 8013c5e:	2e00      	cmp	r6, #0
 8013c60:	d05d      	beq.n	8013d1e <_strtol_l.isra.0+0xee>
 8013c62:	2e10      	cmp	r6, #16
 8013c64:	d109      	bne.n	8013c7a <_strtol_l.isra.0+0x4a>
 8013c66:	2c30      	cmp	r4, #48	; 0x30
 8013c68:	d107      	bne.n	8013c7a <_strtol_l.isra.0+0x4a>
 8013c6a:	782b      	ldrb	r3, [r5, #0]
 8013c6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013c70:	2b58      	cmp	r3, #88	; 0x58
 8013c72:	d14f      	bne.n	8013d14 <_strtol_l.isra.0+0xe4>
 8013c74:	786c      	ldrb	r4, [r5, #1]
 8013c76:	2610      	movs	r6, #16
 8013c78:	3502      	adds	r5, #2
 8013c7a:	2a00      	cmp	r2, #0
 8013c7c:	bf14      	ite	ne
 8013c7e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013c82:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013c86:	2700      	movs	r7, #0
 8013c88:	fbb1 fcf6 	udiv	ip, r1, r6
 8013c8c:	4638      	mov	r0, r7
 8013c8e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013c92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013c96:	2b09      	cmp	r3, #9
 8013c98:	d817      	bhi.n	8013cca <_strtol_l.isra.0+0x9a>
 8013c9a:	461c      	mov	r4, r3
 8013c9c:	42a6      	cmp	r6, r4
 8013c9e:	dd23      	ble.n	8013ce8 <_strtol_l.isra.0+0xb8>
 8013ca0:	1c7b      	adds	r3, r7, #1
 8013ca2:	d007      	beq.n	8013cb4 <_strtol_l.isra.0+0x84>
 8013ca4:	4584      	cmp	ip, r0
 8013ca6:	d31c      	bcc.n	8013ce2 <_strtol_l.isra.0+0xb2>
 8013ca8:	d101      	bne.n	8013cae <_strtol_l.isra.0+0x7e>
 8013caa:	45a6      	cmp	lr, r4
 8013cac:	db19      	blt.n	8013ce2 <_strtol_l.isra.0+0xb2>
 8013cae:	fb00 4006 	mla	r0, r0, r6, r4
 8013cb2:	2701      	movs	r7, #1
 8013cb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013cb8:	e7eb      	b.n	8013c92 <_strtol_l.isra.0+0x62>
 8013cba:	462f      	mov	r7, r5
 8013cbc:	e7bf      	b.n	8013c3e <_strtol_l.isra.0+0xe>
 8013cbe:	2c2b      	cmp	r4, #43	; 0x2b
 8013cc0:	bf04      	itt	eq
 8013cc2:	1cbd      	addeq	r5, r7, #2
 8013cc4:	787c      	ldrbeq	r4, [r7, #1]
 8013cc6:	461a      	mov	r2, r3
 8013cc8:	e7c9      	b.n	8013c5e <_strtol_l.isra.0+0x2e>
 8013cca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013cce:	2b19      	cmp	r3, #25
 8013cd0:	d801      	bhi.n	8013cd6 <_strtol_l.isra.0+0xa6>
 8013cd2:	3c37      	subs	r4, #55	; 0x37
 8013cd4:	e7e2      	b.n	8013c9c <_strtol_l.isra.0+0x6c>
 8013cd6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8013cda:	2b19      	cmp	r3, #25
 8013cdc:	d804      	bhi.n	8013ce8 <_strtol_l.isra.0+0xb8>
 8013cde:	3c57      	subs	r4, #87	; 0x57
 8013ce0:	e7dc      	b.n	8013c9c <_strtol_l.isra.0+0x6c>
 8013ce2:	f04f 37ff 	mov.w	r7, #4294967295
 8013ce6:	e7e5      	b.n	8013cb4 <_strtol_l.isra.0+0x84>
 8013ce8:	1c7b      	adds	r3, r7, #1
 8013cea:	d108      	bne.n	8013cfe <_strtol_l.isra.0+0xce>
 8013cec:	2322      	movs	r3, #34	; 0x22
 8013cee:	f8c8 3000 	str.w	r3, [r8]
 8013cf2:	4608      	mov	r0, r1
 8013cf4:	f1ba 0f00 	cmp.w	sl, #0
 8013cf8:	d107      	bne.n	8013d0a <_strtol_l.isra.0+0xda>
 8013cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cfe:	b102      	cbz	r2, 8013d02 <_strtol_l.isra.0+0xd2>
 8013d00:	4240      	negs	r0, r0
 8013d02:	f1ba 0f00 	cmp.w	sl, #0
 8013d06:	d0f8      	beq.n	8013cfa <_strtol_l.isra.0+0xca>
 8013d08:	b10f      	cbz	r7, 8013d0e <_strtol_l.isra.0+0xde>
 8013d0a:	f105 39ff 	add.w	r9, r5, #4294967295
 8013d0e:	f8ca 9000 	str.w	r9, [sl]
 8013d12:	e7f2      	b.n	8013cfa <_strtol_l.isra.0+0xca>
 8013d14:	2430      	movs	r4, #48	; 0x30
 8013d16:	2e00      	cmp	r6, #0
 8013d18:	d1af      	bne.n	8013c7a <_strtol_l.isra.0+0x4a>
 8013d1a:	2608      	movs	r6, #8
 8013d1c:	e7ad      	b.n	8013c7a <_strtol_l.isra.0+0x4a>
 8013d1e:	2c30      	cmp	r4, #48	; 0x30
 8013d20:	d0a3      	beq.n	8013c6a <_strtol_l.isra.0+0x3a>
 8013d22:	260a      	movs	r6, #10
 8013d24:	e7a9      	b.n	8013c7a <_strtol_l.isra.0+0x4a>
	...

08013d28 <_strtol_r>:
 8013d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d2a:	4c06      	ldr	r4, [pc, #24]	; (8013d44 <_strtol_r+0x1c>)
 8013d2c:	4d06      	ldr	r5, [pc, #24]	; (8013d48 <_strtol_r+0x20>)
 8013d2e:	6824      	ldr	r4, [r4, #0]
 8013d30:	6a24      	ldr	r4, [r4, #32]
 8013d32:	2c00      	cmp	r4, #0
 8013d34:	bf08      	it	eq
 8013d36:	462c      	moveq	r4, r5
 8013d38:	9400      	str	r4, [sp, #0]
 8013d3a:	f7ff ff79 	bl	8013c30 <_strtol_l.isra.0>
 8013d3e:	b003      	add	sp, #12
 8013d40:	bd30      	pop	{r4, r5, pc}
 8013d42:	bf00      	nop
 8013d44:	20000038 	.word	0x20000038
 8013d48:	2000009c 	.word	0x2000009c

08013d4c <_strtoul_l.isra.0>:
 8013d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d50:	4680      	mov	r8, r0
 8013d52:	4689      	mov	r9, r1
 8013d54:	4692      	mov	sl, r2
 8013d56:	461e      	mov	r6, r3
 8013d58:	460f      	mov	r7, r1
 8013d5a:	463d      	mov	r5, r7
 8013d5c:	9808      	ldr	r0, [sp, #32]
 8013d5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d62:	f001 fb99 	bl	8015498 <__locale_ctype_ptr_l>
 8013d66:	4420      	add	r0, r4
 8013d68:	7843      	ldrb	r3, [r0, #1]
 8013d6a:	f013 0308 	ands.w	r3, r3, #8
 8013d6e:	d130      	bne.n	8013dd2 <_strtoul_l.isra.0+0x86>
 8013d70:	2c2d      	cmp	r4, #45	; 0x2d
 8013d72:	d130      	bne.n	8013dd6 <_strtoul_l.isra.0+0x8a>
 8013d74:	787c      	ldrb	r4, [r7, #1]
 8013d76:	1cbd      	adds	r5, r7, #2
 8013d78:	2101      	movs	r1, #1
 8013d7a:	2e00      	cmp	r6, #0
 8013d7c:	d05c      	beq.n	8013e38 <_strtoul_l.isra.0+0xec>
 8013d7e:	2e10      	cmp	r6, #16
 8013d80:	d109      	bne.n	8013d96 <_strtoul_l.isra.0+0x4a>
 8013d82:	2c30      	cmp	r4, #48	; 0x30
 8013d84:	d107      	bne.n	8013d96 <_strtoul_l.isra.0+0x4a>
 8013d86:	782b      	ldrb	r3, [r5, #0]
 8013d88:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013d8c:	2b58      	cmp	r3, #88	; 0x58
 8013d8e:	d14e      	bne.n	8013e2e <_strtoul_l.isra.0+0xe2>
 8013d90:	786c      	ldrb	r4, [r5, #1]
 8013d92:	2610      	movs	r6, #16
 8013d94:	3502      	adds	r5, #2
 8013d96:	f04f 32ff 	mov.w	r2, #4294967295
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	fbb2 f2f6 	udiv	r2, r2, r6
 8013da0:	fb06 fc02 	mul.w	ip, r6, r2
 8013da4:	ea6f 0c0c 	mvn.w	ip, ip
 8013da8:	4618      	mov	r0, r3
 8013daa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013dae:	2f09      	cmp	r7, #9
 8013db0:	d817      	bhi.n	8013de2 <_strtoul_l.isra.0+0x96>
 8013db2:	463c      	mov	r4, r7
 8013db4:	42a6      	cmp	r6, r4
 8013db6:	dd23      	ble.n	8013e00 <_strtoul_l.isra.0+0xb4>
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	db1e      	blt.n	8013dfa <_strtoul_l.isra.0+0xae>
 8013dbc:	4282      	cmp	r2, r0
 8013dbe:	d31c      	bcc.n	8013dfa <_strtoul_l.isra.0+0xae>
 8013dc0:	d101      	bne.n	8013dc6 <_strtoul_l.isra.0+0x7a>
 8013dc2:	45a4      	cmp	ip, r4
 8013dc4:	db19      	blt.n	8013dfa <_strtoul_l.isra.0+0xae>
 8013dc6:	fb00 4006 	mla	r0, r0, r6, r4
 8013dca:	2301      	movs	r3, #1
 8013dcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013dd0:	e7eb      	b.n	8013daa <_strtoul_l.isra.0+0x5e>
 8013dd2:	462f      	mov	r7, r5
 8013dd4:	e7c1      	b.n	8013d5a <_strtoul_l.isra.0+0xe>
 8013dd6:	2c2b      	cmp	r4, #43	; 0x2b
 8013dd8:	bf04      	itt	eq
 8013dda:	1cbd      	addeq	r5, r7, #2
 8013ddc:	787c      	ldrbeq	r4, [r7, #1]
 8013dde:	4619      	mov	r1, r3
 8013de0:	e7cb      	b.n	8013d7a <_strtoul_l.isra.0+0x2e>
 8013de2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013de6:	2f19      	cmp	r7, #25
 8013de8:	d801      	bhi.n	8013dee <_strtoul_l.isra.0+0xa2>
 8013dea:	3c37      	subs	r4, #55	; 0x37
 8013dec:	e7e2      	b.n	8013db4 <_strtoul_l.isra.0+0x68>
 8013dee:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013df2:	2f19      	cmp	r7, #25
 8013df4:	d804      	bhi.n	8013e00 <_strtoul_l.isra.0+0xb4>
 8013df6:	3c57      	subs	r4, #87	; 0x57
 8013df8:	e7dc      	b.n	8013db4 <_strtoul_l.isra.0+0x68>
 8013dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8013dfe:	e7e5      	b.n	8013dcc <_strtoul_l.isra.0+0x80>
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	da09      	bge.n	8013e18 <_strtoul_l.isra.0+0xcc>
 8013e04:	2322      	movs	r3, #34	; 0x22
 8013e06:	f8c8 3000 	str.w	r3, [r8]
 8013e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8013e0e:	f1ba 0f00 	cmp.w	sl, #0
 8013e12:	d107      	bne.n	8013e24 <_strtoul_l.isra.0+0xd8>
 8013e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e18:	b101      	cbz	r1, 8013e1c <_strtoul_l.isra.0+0xd0>
 8013e1a:	4240      	negs	r0, r0
 8013e1c:	f1ba 0f00 	cmp.w	sl, #0
 8013e20:	d0f8      	beq.n	8013e14 <_strtoul_l.isra.0+0xc8>
 8013e22:	b10b      	cbz	r3, 8013e28 <_strtoul_l.isra.0+0xdc>
 8013e24:	f105 39ff 	add.w	r9, r5, #4294967295
 8013e28:	f8ca 9000 	str.w	r9, [sl]
 8013e2c:	e7f2      	b.n	8013e14 <_strtoul_l.isra.0+0xc8>
 8013e2e:	2430      	movs	r4, #48	; 0x30
 8013e30:	2e00      	cmp	r6, #0
 8013e32:	d1b0      	bne.n	8013d96 <_strtoul_l.isra.0+0x4a>
 8013e34:	2608      	movs	r6, #8
 8013e36:	e7ae      	b.n	8013d96 <_strtoul_l.isra.0+0x4a>
 8013e38:	2c30      	cmp	r4, #48	; 0x30
 8013e3a:	d0a4      	beq.n	8013d86 <_strtoul_l.isra.0+0x3a>
 8013e3c:	260a      	movs	r6, #10
 8013e3e:	e7aa      	b.n	8013d96 <_strtoul_l.isra.0+0x4a>

08013e40 <_strtoul_r>:
 8013e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e42:	4c06      	ldr	r4, [pc, #24]	; (8013e5c <_strtoul_r+0x1c>)
 8013e44:	4d06      	ldr	r5, [pc, #24]	; (8013e60 <_strtoul_r+0x20>)
 8013e46:	6824      	ldr	r4, [r4, #0]
 8013e48:	6a24      	ldr	r4, [r4, #32]
 8013e4a:	2c00      	cmp	r4, #0
 8013e4c:	bf08      	it	eq
 8013e4e:	462c      	moveq	r4, r5
 8013e50:	9400      	str	r4, [sp, #0]
 8013e52:	f7ff ff7b 	bl	8013d4c <_strtoul_l.isra.0>
 8013e56:	b003      	add	sp, #12
 8013e58:	bd30      	pop	{r4, r5, pc}
 8013e5a:	bf00      	nop
 8013e5c:	20000038 	.word	0x20000038
 8013e60:	2000009c 	.word	0x2000009c

08013e64 <__submore>:
 8013e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e68:	460c      	mov	r4, r1
 8013e6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e70:	4299      	cmp	r1, r3
 8013e72:	d11d      	bne.n	8013eb0 <__submore+0x4c>
 8013e74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013e78:	f7fd fb72 	bl	8011560 <_malloc_r>
 8013e7c:	b918      	cbnz	r0, 8013e86 <__submore+0x22>
 8013e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8013e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e8a:	63a3      	str	r3, [r4, #56]	; 0x38
 8013e8c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013e90:	6360      	str	r0, [r4, #52]	; 0x34
 8013e92:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013e96:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013e9a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013e9e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013ea2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013ea6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013eaa:	6020      	str	r0, [r4, #0]
 8013eac:	2000      	movs	r0, #0
 8013eae:	e7e8      	b.n	8013e82 <__submore+0x1e>
 8013eb0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013eb2:	0077      	lsls	r7, r6, #1
 8013eb4:	463a      	mov	r2, r7
 8013eb6:	f001 ff64 	bl	8015d82 <_realloc_r>
 8013eba:	4605      	mov	r5, r0
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	d0de      	beq.n	8013e7e <__submore+0x1a>
 8013ec0:	eb00 0806 	add.w	r8, r0, r6
 8013ec4:	4601      	mov	r1, r0
 8013ec6:	4632      	mov	r2, r6
 8013ec8:	4640      	mov	r0, r8
 8013eca:	f7fd fae7 	bl	801149c <memcpy>
 8013ece:	f8c4 8000 	str.w	r8, [r4]
 8013ed2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013ed6:	e7e9      	b.n	8013eac <__submore+0x48>

08013ed8 <_ungetc_r>:
 8013ed8:	1c4b      	adds	r3, r1, #1
 8013eda:	b570      	push	{r4, r5, r6, lr}
 8013edc:	4606      	mov	r6, r0
 8013ede:	460d      	mov	r5, r1
 8013ee0:	4614      	mov	r4, r2
 8013ee2:	d103      	bne.n	8013eec <_ungetc_r+0x14>
 8013ee4:	f04f 35ff 	mov.w	r5, #4294967295
 8013ee8:	4628      	mov	r0, r5
 8013eea:	bd70      	pop	{r4, r5, r6, pc}
 8013eec:	b118      	cbz	r0, 8013ef6 <_ungetc_r+0x1e>
 8013eee:	6983      	ldr	r3, [r0, #24]
 8013ef0:	b90b      	cbnz	r3, 8013ef6 <_ungetc_r+0x1e>
 8013ef2:	f7fd f9a5 	bl	8011240 <__sinit>
 8013ef6:	4b2e      	ldr	r3, [pc, #184]	; (8013fb0 <_ungetc_r+0xd8>)
 8013ef8:	429c      	cmp	r4, r3
 8013efa:	d12c      	bne.n	8013f56 <_ungetc_r+0x7e>
 8013efc:	6874      	ldr	r4, [r6, #4]
 8013efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f02:	f023 0320 	bic.w	r3, r3, #32
 8013f06:	81a3      	strh	r3, [r4, #12]
 8013f08:	b29b      	uxth	r3, r3
 8013f0a:	0759      	lsls	r1, r3, #29
 8013f0c:	d413      	bmi.n	8013f36 <_ungetc_r+0x5e>
 8013f0e:	06da      	lsls	r2, r3, #27
 8013f10:	d5e8      	bpl.n	8013ee4 <_ungetc_r+0xc>
 8013f12:	071b      	lsls	r3, r3, #28
 8013f14:	d50b      	bpl.n	8013f2e <_ungetc_r+0x56>
 8013f16:	4621      	mov	r1, r4
 8013f18:	4630      	mov	r0, r6
 8013f1a:	f7fd f915 	bl	8011148 <_fflush_r>
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	d1e0      	bne.n	8013ee4 <_ungetc_r+0xc>
 8013f22:	89a3      	ldrh	r3, [r4, #12]
 8013f24:	60a0      	str	r0, [r4, #8]
 8013f26:	f023 0308 	bic.w	r3, r3, #8
 8013f2a:	81a3      	strh	r3, [r4, #12]
 8013f2c:	61a0      	str	r0, [r4, #24]
 8013f2e:	89a3      	ldrh	r3, [r4, #12]
 8013f30:	f043 0304 	orr.w	r3, r3, #4
 8013f34:	81a3      	strh	r3, [r4, #12]
 8013f36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f38:	6862      	ldr	r2, [r4, #4]
 8013f3a:	b2ed      	uxtb	r5, r5
 8013f3c:	b1e3      	cbz	r3, 8013f78 <_ungetc_r+0xa0>
 8013f3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013f40:	4293      	cmp	r3, r2
 8013f42:	dd12      	ble.n	8013f6a <_ungetc_r+0x92>
 8013f44:	6823      	ldr	r3, [r4, #0]
 8013f46:	1e5a      	subs	r2, r3, #1
 8013f48:	6022      	str	r2, [r4, #0]
 8013f4a:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013f4e:	6863      	ldr	r3, [r4, #4]
 8013f50:	3301      	adds	r3, #1
 8013f52:	6063      	str	r3, [r4, #4]
 8013f54:	e7c8      	b.n	8013ee8 <_ungetc_r+0x10>
 8013f56:	4b17      	ldr	r3, [pc, #92]	; (8013fb4 <_ungetc_r+0xdc>)
 8013f58:	429c      	cmp	r4, r3
 8013f5a:	d101      	bne.n	8013f60 <_ungetc_r+0x88>
 8013f5c:	68b4      	ldr	r4, [r6, #8]
 8013f5e:	e7ce      	b.n	8013efe <_ungetc_r+0x26>
 8013f60:	4b15      	ldr	r3, [pc, #84]	; (8013fb8 <_ungetc_r+0xe0>)
 8013f62:	429c      	cmp	r4, r3
 8013f64:	bf08      	it	eq
 8013f66:	68f4      	ldreq	r4, [r6, #12]
 8013f68:	e7c9      	b.n	8013efe <_ungetc_r+0x26>
 8013f6a:	4621      	mov	r1, r4
 8013f6c:	4630      	mov	r0, r6
 8013f6e:	f7ff ff79 	bl	8013e64 <__submore>
 8013f72:	2800      	cmp	r0, #0
 8013f74:	d0e6      	beq.n	8013f44 <_ungetc_r+0x6c>
 8013f76:	e7b5      	b.n	8013ee4 <_ungetc_r+0xc>
 8013f78:	6921      	ldr	r1, [r4, #16]
 8013f7a:	6823      	ldr	r3, [r4, #0]
 8013f7c:	b151      	cbz	r1, 8013f94 <_ungetc_r+0xbc>
 8013f7e:	4299      	cmp	r1, r3
 8013f80:	d208      	bcs.n	8013f94 <_ungetc_r+0xbc>
 8013f82:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013f86:	42a9      	cmp	r1, r5
 8013f88:	d104      	bne.n	8013f94 <_ungetc_r+0xbc>
 8013f8a:	3b01      	subs	r3, #1
 8013f8c:	3201      	adds	r2, #1
 8013f8e:	6023      	str	r3, [r4, #0]
 8013f90:	6062      	str	r2, [r4, #4]
 8013f92:	e7a9      	b.n	8013ee8 <_ungetc_r+0x10>
 8013f94:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f9c:	6363      	str	r3, [r4, #52]	; 0x34
 8013f9e:	2303      	movs	r3, #3
 8013fa0:	63a3      	str	r3, [r4, #56]	; 0x38
 8013fa2:	4623      	mov	r3, r4
 8013fa4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013fa8:	6023      	str	r3, [r4, #0]
 8013faa:	2301      	movs	r3, #1
 8013fac:	e7d1      	b.n	8013f52 <_ungetc_r+0x7a>
 8013fae:	bf00      	nop
 8013fb0:	080165b4 	.word	0x080165b4
 8013fb4:	080165d4 	.word	0x080165d4
 8013fb8:	08016594 	.word	0x08016594

08013fbc <__swbuf_r>:
 8013fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fbe:	460e      	mov	r6, r1
 8013fc0:	4614      	mov	r4, r2
 8013fc2:	4605      	mov	r5, r0
 8013fc4:	b118      	cbz	r0, 8013fce <__swbuf_r+0x12>
 8013fc6:	6983      	ldr	r3, [r0, #24]
 8013fc8:	b90b      	cbnz	r3, 8013fce <__swbuf_r+0x12>
 8013fca:	f7fd f939 	bl	8011240 <__sinit>
 8013fce:	4b21      	ldr	r3, [pc, #132]	; (8014054 <__swbuf_r+0x98>)
 8013fd0:	429c      	cmp	r4, r3
 8013fd2:	d12a      	bne.n	801402a <__swbuf_r+0x6e>
 8013fd4:	686c      	ldr	r4, [r5, #4]
 8013fd6:	69a3      	ldr	r3, [r4, #24]
 8013fd8:	60a3      	str	r3, [r4, #8]
 8013fda:	89a3      	ldrh	r3, [r4, #12]
 8013fdc:	071a      	lsls	r2, r3, #28
 8013fde:	d52e      	bpl.n	801403e <__swbuf_r+0x82>
 8013fe0:	6923      	ldr	r3, [r4, #16]
 8013fe2:	b363      	cbz	r3, 801403e <__swbuf_r+0x82>
 8013fe4:	6923      	ldr	r3, [r4, #16]
 8013fe6:	6820      	ldr	r0, [r4, #0]
 8013fe8:	1ac0      	subs	r0, r0, r3
 8013fea:	6963      	ldr	r3, [r4, #20]
 8013fec:	b2f6      	uxtb	r6, r6
 8013fee:	4283      	cmp	r3, r0
 8013ff0:	4637      	mov	r7, r6
 8013ff2:	dc04      	bgt.n	8013ffe <__swbuf_r+0x42>
 8013ff4:	4621      	mov	r1, r4
 8013ff6:	4628      	mov	r0, r5
 8013ff8:	f7fd f8a6 	bl	8011148 <_fflush_r>
 8013ffc:	bb28      	cbnz	r0, 801404a <__swbuf_r+0x8e>
 8013ffe:	68a3      	ldr	r3, [r4, #8]
 8014000:	3b01      	subs	r3, #1
 8014002:	60a3      	str	r3, [r4, #8]
 8014004:	6823      	ldr	r3, [r4, #0]
 8014006:	1c5a      	adds	r2, r3, #1
 8014008:	6022      	str	r2, [r4, #0]
 801400a:	701e      	strb	r6, [r3, #0]
 801400c:	6963      	ldr	r3, [r4, #20]
 801400e:	3001      	adds	r0, #1
 8014010:	4283      	cmp	r3, r0
 8014012:	d004      	beq.n	801401e <__swbuf_r+0x62>
 8014014:	89a3      	ldrh	r3, [r4, #12]
 8014016:	07db      	lsls	r3, r3, #31
 8014018:	d519      	bpl.n	801404e <__swbuf_r+0x92>
 801401a:	2e0a      	cmp	r6, #10
 801401c:	d117      	bne.n	801404e <__swbuf_r+0x92>
 801401e:	4621      	mov	r1, r4
 8014020:	4628      	mov	r0, r5
 8014022:	f7fd f891 	bl	8011148 <_fflush_r>
 8014026:	b190      	cbz	r0, 801404e <__swbuf_r+0x92>
 8014028:	e00f      	b.n	801404a <__swbuf_r+0x8e>
 801402a:	4b0b      	ldr	r3, [pc, #44]	; (8014058 <__swbuf_r+0x9c>)
 801402c:	429c      	cmp	r4, r3
 801402e:	d101      	bne.n	8014034 <__swbuf_r+0x78>
 8014030:	68ac      	ldr	r4, [r5, #8]
 8014032:	e7d0      	b.n	8013fd6 <__swbuf_r+0x1a>
 8014034:	4b09      	ldr	r3, [pc, #36]	; (801405c <__swbuf_r+0xa0>)
 8014036:	429c      	cmp	r4, r3
 8014038:	bf08      	it	eq
 801403a:	68ec      	ldreq	r4, [r5, #12]
 801403c:	e7cb      	b.n	8013fd6 <__swbuf_r+0x1a>
 801403e:	4621      	mov	r1, r4
 8014040:	4628      	mov	r0, r5
 8014042:	f000 f81f 	bl	8014084 <__swsetup_r>
 8014046:	2800      	cmp	r0, #0
 8014048:	d0cc      	beq.n	8013fe4 <__swbuf_r+0x28>
 801404a:	f04f 37ff 	mov.w	r7, #4294967295
 801404e:	4638      	mov	r0, r7
 8014050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014052:	bf00      	nop
 8014054:	080165b4 	.word	0x080165b4
 8014058:	080165d4 	.word	0x080165d4
 801405c:	08016594 	.word	0x08016594

08014060 <_write_r>:
 8014060:	b538      	push	{r3, r4, r5, lr}
 8014062:	4c07      	ldr	r4, [pc, #28]	; (8014080 <_write_r+0x20>)
 8014064:	4605      	mov	r5, r0
 8014066:	4608      	mov	r0, r1
 8014068:	4611      	mov	r1, r2
 801406a:	2200      	movs	r2, #0
 801406c:	6022      	str	r2, [r4, #0]
 801406e:	461a      	mov	r2, r3
 8014070:	f7f9 fa1a 	bl	800d4a8 <_write>
 8014074:	1c43      	adds	r3, r0, #1
 8014076:	d102      	bne.n	801407e <_write_r+0x1e>
 8014078:	6823      	ldr	r3, [r4, #0]
 801407a:	b103      	cbz	r3, 801407e <_write_r+0x1e>
 801407c:	602b      	str	r3, [r5, #0]
 801407e:	bd38      	pop	{r3, r4, r5, pc}
 8014080:	200011fc 	.word	0x200011fc

08014084 <__swsetup_r>:
 8014084:	4b32      	ldr	r3, [pc, #200]	; (8014150 <__swsetup_r+0xcc>)
 8014086:	b570      	push	{r4, r5, r6, lr}
 8014088:	681d      	ldr	r5, [r3, #0]
 801408a:	4606      	mov	r6, r0
 801408c:	460c      	mov	r4, r1
 801408e:	b125      	cbz	r5, 801409a <__swsetup_r+0x16>
 8014090:	69ab      	ldr	r3, [r5, #24]
 8014092:	b913      	cbnz	r3, 801409a <__swsetup_r+0x16>
 8014094:	4628      	mov	r0, r5
 8014096:	f7fd f8d3 	bl	8011240 <__sinit>
 801409a:	4b2e      	ldr	r3, [pc, #184]	; (8014154 <__swsetup_r+0xd0>)
 801409c:	429c      	cmp	r4, r3
 801409e:	d10f      	bne.n	80140c0 <__swsetup_r+0x3c>
 80140a0:	686c      	ldr	r4, [r5, #4]
 80140a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140a6:	b29a      	uxth	r2, r3
 80140a8:	0715      	lsls	r5, r2, #28
 80140aa:	d42c      	bmi.n	8014106 <__swsetup_r+0x82>
 80140ac:	06d0      	lsls	r0, r2, #27
 80140ae:	d411      	bmi.n	80140d4 <__swsetup_r+0x50>
 80140b0:	2209      	movs	r2, #9
 80140b2:	6032      	str	r2, [r6, #0]
 80140b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140b8:	81a3      	strh	r3, [r4, #12]
 80140ba:	f04f 30ff 	mov.w	r0, #4294967295
 80140be:	e03e      	b.n	801413e <__swsetup_r+0xba>
 80140c0:	4b25      	ldr	r3, [pc, #148]	; (8014158 <__swsetup_r+0xd4>)
 80140c2:	429c      	cmp	r4, r3
 80140c4:	d101      	bne.n	80140ca <__swsetup_r+0x46>
 80140c6:	68ac      	ldr	r4, [r5, #8]
 80140c8:	e7eb      	b.n	80140a2 <__swsetup_r+0x1e>
 80140ca:	4b24      	ldr	r3, [pc, #144]	; (801415c <__swsetup_r+0xd8>)
 80140cc:	429c      	cmp	r4, r3
 80140ce:	bf08      	it	eq
 80140d0:	68ec      	ldreq	r4, [r5, #12]
 80140d2:	e7e6      	b.n	80140a2 <__swsetup_r+0x1e>
 80140d4:	0751      	lsls	r1, r2, #29
 80140d6:	d512      	bpl.n	80140fe <__swsetup_r+0x7a>
 80140d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80140da:	b141      	cbz	r1, 80140ee <__swsetup_r+0x6a>
 80140dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80140e0:	4299      	cmp	r1, r3
 80140e2:	d002      	beq.n	80140ea <__swsetup_r+0x66>
 80140e4:	4630      	mov	r0, r6
 80140e6:	f7fd f9ed 	bl	80114c4 <_free_r>
 80140ea:	2300      	movs	r3, #0
 80140ec:	6363      	str	r3, [r4, #52]	; 0x34
 80140ee:	89a3      	ldrh	r3, [r4, #12]
 80140f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80140f4:	81a3      	strh	r3, [r4, #12]
 80140f6:	2300      	movs	r3, #0
 80140f8:	6063      	str	r3, [r4, #4]
 80140fa:	6923      	ldr	r3, [r4, #16]
 80140fc:	6023      	str	r3, [r4, #0]
 80140fe:	89a3      	ldrh	r3, [r4, #12]
 8014100:	f043 0308 	orr.w	r3, r3, #8
 8014104:	81a3      	strh	r3, [r4, #12]
 8014106:	6923      	ldr	r3, [r4, #16]
 8014108:	b94b      	cbnz	r3, 801411e <__swsetup_r+0x9a>
 801410a:	89a3      	ldrh	r3, [r4, #12]
 801410c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014114:	d003      	beq.n	801411e <__swsetup_r+0x9a>
 8014116:	4621      	mov	r1, r4
 8014118:	4630      	mov	r0, r6
 801411a:	f7fd f97f 	bl	801141c <__smakebuf_r>
 801411e:	89a2      	ldrh	r2, [r4, #12]
 8014120:	f012 0301 	ands.w	r3, r2, #1
 8014124:	d00c      	beq.n	8014140 <__swsetup_r+0xbc>
 8014126:	2300      	movs	r3, #0
 8014128:	60a3      	str	r3, [r4, #8]
 801412a:	6963      	ldr	r3, [r4, #20]
 801412c:	425b      	negs	r3, r3
 801412e:	61a3      	str	r3, [r4, #24]
 8014130:	6923      	ldr	r3, [r4, #16]
 8014132:	b953      	cbnz	r3, 801414a <__swsetup_r+0xc6>
 8014134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014138:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801413c:	d1ba      	bne.n	80140b4 <__swsetup_r+0x30>
 801413e:	bd70      	pop	{r4, r5, r6, pc}
 8014140:	0792      	lsls	r2, r2, #30
 8014142:	bf58      	it	pl
 8014144:	6963      	ldrpl	r3, [r4, #20]
 8014146:	60a3      	str	r3, [r4, #8]
 8014148:	e7f2      	b.n	8014130 <__swsetup_r+0xac>
 801414a:	2000      	movs	r0, #0
 801414c:	e7f7      	b.n	801413e <__swsetup_r+0xba>
 801414e:	bf00      	nop
 8014150:	20000038 	.word	0x20000038
 8014154:	080165b4 	.word	0x080165b4
 8014158:	080165d4 	.word	0x080165d4
 801415c:	08016594 	.word	0x08016594

08014160 <_close_r>:
 8014160:	b538      	push	{r3, r4, r5, lr}
 8014162:	4c06      	ldr	r4, [pc, #24]	; (801417c <_close_r+0x1c>)
 8014164:	2300      	movs	r3, #0
 8014166:	4605      	mov	r5, r0
 8014168:	4608      	mov	r0, r1
 801416a:	6023      	str	r3, [r4, #0]
 801416c:	f7f9 f9aa 	bl	800d4c4 <_close>
 8014170:	1c43      	adds	r3, r0, #1
 8014172:	d102      	bne.n	801417a <_close_r+0x1a>
 8014174:	6823      	ldr	r3, [r4, #0]
 8014176:	b103      	cbz	r3, 801417a <_close_r+0x1a>
 8014178:	602b      	str	r3, [r5, #0]
 801417a:	bd38      	pop	{r3, r4, r5, pc}
 801417c:	200011fc 	.word	0x200011fc

08014180 <quorem>:
 8014180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014184:	6903      	ldr	r3, [r0, #16]
 8014186:	690c      	ldr	r4, [r1, #16]
 8014188:	42a3      	cmp	r3, r4
 801418a:	4680      	mov	r8, r0
 801418c:	f2c0 8082 	blt.w	8014294 <quorem+0x114>
 8014190:	3c01      	subs	r4, #1
 8014192:	f101 0714 	add.w	r7, r1, #20
 8014196:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801419a:	f100 0614 	add.w	r6, r0, #20
 801419e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80141a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80141a6:	eb06 030c 	add.w	r3, r6, ip
 80141aa:	3501      	adds	r5, #1
 80141ac:	eb07 090c 	add.w	r9, r7, ip
 80141b0:	9301      	str	r3, [sp, #4]
 80141b2:	fbb0 f5f5 	udiv	r5, r0, r5
 80141b6:	b395      	cbz	r5, 801421e <quorem+0x9e>
 80141b8:	f04f 0a00 	mov.w	sl, #0
 80141bc:	4638      	mov	r0, r7
 80141be:	46b6      	mov	lr, r6
 80141c0:	46d3      	mov	fp, sl
 80141c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80141c6:	b293      	uxth	r3, r2
 80141c8:	fb05 a303 	mla	r3, r5, r3, sl
 80141cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80141d0:	b29b      	uxth	r3, r3
 80141d2:	ebab 0303 	sub.w	r3, fp, r3
 80141d6:	0c12      	lsrs	r2, r2, #16
 80141d8:	f8de b000 	ldr.w	fp, [lr]
 80141dc:	fb05 a202 	mla	r2, r5, r2, sl
 80141e0:	fa13 f38b 	uxtah	r3, r3, fp
 80141e4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80141e8:	fa1f fb82 	uxth.w	fp, r2
 80141ec:	f8de 2000 	ldr.w	r2, [lr]
 80141f0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80141f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80141f8:	b29b      	uxth	r3, r3
 80141fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141fe:	4581      	cmp	r9, r0
 8014200:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014204:	f84e 3b04 	str.w	r3, [lr], #4
 8014208:	d2db      	bcs.n	80141c2 <quorem+0x42>
 801420a:	f856 300c 	ldr.w	r3, [r6, ip]
 801420e:	b933      	cbnz	r3, 801421e <quorem+0x9e>
 8014210:	9b01      	ldr	r3, [sp, #4]
 8014212:	3b04      	subs	r3, #4
 8014214:	429e      	cmp	r6, r3
 8014216:	461a      	mov	r2, r3
 8014218:	d330      	bcc.n	801427c <quorem+0xfc>
 801421a:	f8c8 4010 	str.w	r4, [r8, #16]
 801421e:	4640      	mov	r0, r8
 8014220:	f001 fbf6 	bl	8015a10 <__mcmp>
 8014224:	2800      	cmp	r0, #0
 8014226:	db25      	blt.n	8014274 <quorem+0xf4>
 8014228:	3501      	adds	r5, #1
 801422a:	4630      	mov	r0, r6
 801422c:	f04f 0c00 	mov.w	ip, #0
 8014230:	f857 2b04 	ldr.w	r2, [r7], #4
 8014234:	f8d0 e000 	ldr.w	lr, [r0]
 8014238:	b293      	uxth	r3, r2
 801423a:	ebac 0303 	sub.w	r3, ip, r3
 801423e:	0c12      	lsrs	r2, r2, #16
 8014240:	fa13 f38e 	uxtah	r3, r3, lr
 8014244:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014248:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801424c:	b29b      	uxth	r3, r3
 801424e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014252:	45b9      	cmp	r9, r7
 8014254:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014258:	f840 3b04 	str.w	r3, [r0], #4
 801425c:	d2e8      	bcs.n	8014230 <quorem+0xb0>
 801425e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014262:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014266:	b92a      	cbnz	r2, 8014274 <quorem+0xf4>
 8014268:	3b04      	subs	r3, #4
 801426a:	429e      	cmp	r6, r3
 801426c:	461a      	mov	r2, r3
 801426e:	d30b      	bcc.n	8014288 <quorem+0x108>
 8014270:	f8c8 4010 	str.w	r4, [r8, #16]
 8014274:	4628      	mov	r0, r5
 8014276:	b003      	add	sp, #12
 8014278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801427c:	6812      	ldr	r2, [r2, #0]
 801427e:	3b04      	subs	r3, #4
 8014280:	2a00      	cmp	r2, #0
 8014282:	d1ca      	bne.n	801421a <quorem+0x9a>
 8014284:	3c01      	subs	r4, #1
 8014286:	e7c5      	b.n	8014214 <quorem+0x94>
 8014288:	6812      	ldr	r2, [r2, #0]
 801428a:	3b04      	subs	r3, #4
 801428c:	2a00      	cmp	r2, #0
 801428e:	d1ef      	bne.n	8014270 <quorem+0xf0>
 8014290:	3c01      	subs	r4, #1
 8014292:	e7ea      	b.n	801426a <quorem+0xea>
 8014294:	2000      	movs	r0, #0
 8014296:	e7ee      	b.n	8014276 <quorem+0xf6>

08014298 <_dtoa_r>:
 8014298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801429c:	ec57 6b10 	vmov	r6, r7, d0
 80142a0:	b097      	sub	sp, #92	; 0x5c
 80142a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80142a4:	9106      	str	r1, [sp, #24]
 80142a6:	4604      	mov	r4, r0
 80142a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80142aa:	9312      	str	r3, [sp, #72]	; 0x48
 80142ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80142b0:	e9cd 6700 	strd	r6, r7, [sp]
 80142b4:	b93d      	cbnz	r5, 80142c6 <_dtoa_r+0x2e>
 80142b6:	2010      	movs	r0, #16
 80142b8:	f001 f922 	bl	8015500 <malloc>
 80142bc:	6260      	str	r0, [r4, #36]	; 0x24
 80142be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80142c2:	6005      	str	r5, [r0, #0]
 80142c4:	60c5      	str	r5, [r0, #12]
 80142c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142c8:	6819      	ldr	r1, [r3, #0]
 80142ca:	b151      	cbz	r1, 80142e2 <_dtoa_r+0x4a>
 80142cc:	685a      	ldr	r2, [r3, #4]
 80142ce:	604a      	str	r2, [r1, #4]
 80142d0:	2301      	movs	r3, #1
 80142d2:	4093      	lsls	r3, r2
 80142d4:	608b      	str	r3, [r1, #8]
 80142d6:	4620      	mov	r0, r4
 80142d8:	f001 f97b 	bl	80155d2 <_Bfree>
 80142dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142de:	2200      	movs	r2, #0
 80142e0:	601a      	str	r2, [r3, #0]
 80142e2:	1e3b      	subs	r3, r7, #0
 80142e4:	bfbb      	ittet	lt
 80142e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80142ea:	9301      	strlt	r3, [sp, #4]
 80142ec:	2300      	movge	r3, #0
 80142ee:	2201      	movlt	r2, #1
 80142f0:	bfac      	ite	ge
 80142f2:	f8c8 3000 	strge.w	r3, [r8]
 80142f6:	f8c8 2000 	strlt.w	r2, [r8]
 80142fa:	4baf      	ldr	r3, [pc, #700]	; (80145b8 <_dtoa_r+0x320>)
 80142fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014300:	ea33 0308 	bics.w	r3, r3, r8
 8014304:	d114      	bne.n	8014330 <_dtoa_r+0x98>
 8014306:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014308:	f242 730f 	movw	r3, #9999	; 0x270f
 801430c:	6013      	str	r3, [r2, #0]
 801430e:	9b00      	ldr	r3, [sp, #0]
 8014310:	b923      	cbnz	r3, 801431c <_dtoa_r+0x84>
 8014312:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014316:	2800      	cmp	r0, #0
 8014318:	f000 8542 	beq.w	8014da0 <_dtoa_r+0xb08>
 801431c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801431e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80145cc <_dtoa_r+0x334>
 8014322:	2b00      	cmp	r3, #0
 8014324:	f000 8544 	beq.w	8014db0 <_dtoa_r+0xb18>
 8014328:	f10b 0303 	add.w	r3, fp, #3
 801432c:	f000 bd3e 	b.w	8014dac <_dtoa_r+0xb14>
 8014330:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014334:	2200      	movs	r2, #0
 8014336:	2300      	movs	r3, #0
 8014338:	4630      	mov	r0, r6
 801433a:	4639      	mov	r1, r7
 801433c:	f7f4 fafc 	bl	8008938 <__aeabi_dcmpeq>
 8014340:	4681      	mov	r9, r0
 8014342:	b168      	cbz	r0, 8014360 <_dtoa_r+0xc8>
 8014344:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014346:	2301      	movs	r3, #1
 8014348:	6013      	str	r3, [r2, #0]
 801434a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801434c:	2b00      	cmp	r3, #0
 801434e:	f000 8524 	beq.w	8014d9a <_dtoa_r+0xb02>
 8014352:	4b9a      	ldr	r3, [pc, #616]	; (80145bc <_dtoa_r+0x324>)
 8014354:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014356:	f103 3bff 	add.w	fp, r3, #4294967295
 801435a:	6013      	str	r3, [r2, #0]
 801435c:	f000 bd28 	b.w	8014db0 <_dtoa_r+0xb18>
 8014360:	aa14      	add	r2, sp, #80	; 0x50
 8014362:	a915      	add	r1, sp, #84	; 0x54
 8014364:	ec47 6b10 	vmov	d0, r6, r7
 8014368:	4620      	mov	r0, r4
 801436a:	f001 fc3f 	bl	8015bec <__d2b>
 801436e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014372:	9004      	str	r0, [sp, #16]
 8014374:	2d00      	cmp	r5, #0
 8014376:	d07c      	beq.n	8014472 <_dtoa_r+0x1da>
 8014378:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801437c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014380:	46b2      	mov	sl, r6
 8014382:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801438a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801438e:	2200      	movs	r2, #0
 8014390:	4b8b      	ldr	r3, [pc, #556]	; (80145c0 <_dtoa_r+0x328>)
 8014392:	4650      	mov	r0, sl
 8014394:	4659      	mov	r1, fp
 8014396:	f7f3 feaf 	bl	80080f8 <__aeabi_dsub>
 801439a:	a381      	add	r3, pc, #516	; (adr r3, 80145a0 <_dtoa_r+0x308>)
 801439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a0:	f7f4 f862 	bl	8008468 <__aeabi_dmul>
 80143a4:	a380      	add	r3, pc, #512	; (adr r3, 80145a8 <_dtoa_r+0x310>)
 80143a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143aa:	f7f3 fea7 	bl	80080fc <__adddf3>
 80143ae:	4606      	mov	r6, r0
 80143b0:	4628      	mov	r0, r5
 80143b2:	460f      	mov	r7, r1
 80143b4:	f7f3 ffee 	bl	8008394 <__aeabi_i2d>
 80143b8:	a37d      	add	r3, pc, #500	; (adr r3, 80145b0 <_dtoa_r+0x318>)
 80143ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143be:	f7f4 f853 	bl	8008468 <__aeabi_dmul>
 80143c2:	4602      	mov	r2, r0
 80143c4:	460b      	mov	r3, r1
 80143c6:	4630      	mov	r0, r6
 80143c8:	4639      	mov	r1, r7
 80143ca:	f7f3 fe97 	bl	80080fc <__adddf3>
 80143ce:	4606      	mov	r6, r0
 80143d0:	460f      	mov	r7, r1
 80143d2:	f7f4 faf9 	bl	80089c8 <__aeabi_d2iz>
 80143d6:	2200      	movs	r2, #0
 80143d8:	4682      	mov	sl, r0
 80143da:	2300      	movs	r3, #0
 80143dc:	4630      	mov	r0, r6
 80143de:	4639      	mov	r1, r7
 80143e0:	f7f4 fab4 	bl	800894c <__aeabi_dcmplt>
 80143e4:	b148      	cbz	r0, 80143fa <_dtoa_r+0x162>
 80143e6:	4650      	mov	r0, sl
 80143e8:	f7f3 ffd4 	bl	8008394 <__aeabi_i2d>
 80143ec:	4632      	mov	r2, r6
 80143ee:	463b      	mov	r3, r7
 80143f0:	f7f4 faa2 	bl	8008938 <__aeabi_dcmpeq>
 80143f4:	b908      	cbnz	r0, 80143fa <_dtoa_r+0x162>
 80143f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80143fa:	f1ba 0f16 	cmp.w	sl, #22
 80143fe:	d859      	bhi.n	80144b4 <_dtoa_r+0x21c>
 8014400:	4970      	ldr	r1, [pc, #448]	; (80145c4 <_dtoa_r+0x32c>)
 8014402:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014406:	e9dd 2300 	ldrd	r2, r3, [sp]
 801440a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801440e:	f7f4 fabb 	bl	8008988 <__aeabi_dcmpgt>
 8014412:	2800      	cmp	r0, #0
 8014414:	d050      	beq.n	80144b8 <_dtoa_r+0x220>
 8014416:	f10a 3aff 	add.w	sl, sl, #4294967295
 801441a:	2300      	movs	r3, #0
 801441c:	930f      	str	r3, [sp, #60]	; 0x3c
 801441e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014420:	1b5d      	subs	r5, r3, r5
 8014422:	f1b5 0801 	subs.w	r8, r5, #1
 8014426:	bf49      	itett	mi
 8014428:	f1c5 0301 	rsbmi	r3, r5, #1
 801442c:	2300      	movpl	r3, #0
 801442e:	9305      	strmi	r3, [sp, #20]
 8014430:	f04f 0800 	movmi.w	r8, #0
 8014434:	bf58      	it	pl
 8014436:	9305      	strpl	r3, [sp, #20]
 8014438:	f1ba 0f00 	cmp.w	sl, #0
 801443c:	db3e      	blt.n	80144bc <_dtoa_r+0x224>
 801443e:	2300      	movs	r3, #0
 8014440:	44d0      	add	r8, sl
 8014442:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014446:	9307      	str	r3, [sp, #28]
 8014448:	9b06      	ldr	r3, [sp, #24]
 801444a:	2b09      	cmp	r3, #9
 801444c:	f200 8090 	bhi.w	8014570 <_dtoa_r+0x2d8>
 8014450:	2b05      	cmp	r3, #5
 8014452:	bfc4      	itt	gt
 8014454:	3b04      	subgt	r3, #4
 8014456:	9306      	strgt	r3, [sp, #24]
 8014458:	9b06      	ldr	r3, [sp, #24]
 801445a:	f1a3 0302 	sub.w	r3, r3, #2
 801445e:	bfcc      	ite	gt
 8014460:	2500      	movgt	r5, #0
 8014462:	2501      	movle	r5, #1
 8014464:	2b03      	cmp	r3, #3
 8014466:	f200 808f 	bhi.w	8014588 <_dtoa_r+0x2f0>
 801446a:	e8df f003 	tbb	[pc, r3]
 801446e:	7f7d      	.short	0x7f7d
 8014470:	7131      	.short	0x7131
 8014472:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014476:	441d      	add	r5, r3
 8014478:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801447c:	2820      	cmp	r0, #32
 801447e:	dd13      	ble.n	80144a8 <_dtoa_r+0x210>
 8014480:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014484:	9b00      	ldr	r3, [sp, #0]
 8014486:	fa08 f800 	lsl.w	r8, r8, r0
 801448a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801448e:	fa23 f000 	lsr.w	r0, r3, r0
 8014492:	ea48 0000 	orr.w	r0, r8, r0
 8014496:	f7f3 ff6d 	bl	8008374 <__aeabi_ui2d>
 801449a:	2301      	movs	r3, #1
 801449c:	4682      	mov	sl, r0
 801449e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80144a2:	3d01      	subs	r5, #1
 80144a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80144a6:	e772      	b.n	801438e <_dtoa_r+0xf6>
 80144a8:	9b00      	ldr	r3, [sp, #0]
 80144aa:	f1c0 0020 	rsb	r0, r0, #32
 80144ae:	fa03 f000 	lsl.w	r0, r3, r0
 80144b2:	e7f0      	b.n	8014496 <_dtoa_r+0x1fe>
 80144b4:	2301      	movs	r3, #1
 80144b6:	e7b1      	b.n	801441c <_dtoa_r+0x184>
 80144b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80144ba:	e7b0      	b.n	801441e <_dtoa_r+0x186>
 80144bc:	9b05      	ldr	r3, [sp, #20]
 80144be:	eba3 030a 	sub.w	r3, r3, sl
 80144c2:	9305      	str	r3, [sp, #20]
 80144c4:	f1ca 0300 	rsb	r3, sl, #0
 80144c8:	9307      	str	r3, [sp, #28]
 80144ca:	2300      	movs	r3, #0
 80144cc:	930e      	str	r3, [sp, #56]	; 0x38
 80144ce:	e7bb      	b.n	8014448 <_dtoa_r+0x1b0>
 80144d0:	2301      	movs	r3, #1
 80144d2:	930a      	str	r3, [sp, #40]	; 0x28
 80144d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	dd59      	ble.n	801458e <_dtoa_r+0x2f6>
 80144da:	9302      	str	r3, [sp, #8]
 80144dc:	4699      	mov	r9, r3
 80144de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80144e0:	2200      	movs	r2, #0
 80144e2:	6072      	str	r2, [r6, #4]
 80144e4:	2204      	movs	r2, #4
 80144e6:	f102 0014 	add.w	r0, r2, #20
 80144ea:	4298      	cmp	r0, r3
 80144ec:	6871      	ldr	r1, [r6, #4]
 80144ee:	d953      	bls.n	8014598 <_dtoa_r+0x300>
 80144f0:	4620      	mov	r0, r4
 80144f2:	f001 f83a 	bl	801556a <_Balloc>
 80144f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80144f8:	6030      	str	r0, [r6, #0]
 80144fa:	f1b9 0f0e 	cmp.w	r9, #14
 80144fe:	f8d3 b000 	ldr.w	fp, [r3]
 8014502:	f200 80e6 	bhi.w	80146d2 <_dtoa_r+0x43a>
 8014506:	2d00      	cmp	r5, #0
 8014508:	f000 80e3 	beq.w	80146d2 <_dtoa_r+0x43a>
 801450c:	ed9d 7b00 	vldr	d7, [sp]
 8014510:	f1ba 0f00 	cmp.w	sl, #0
 8014514:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014518:	dd74      	ble.n	8014604 <_dtoa_r+0x36c>
 801451a:	4a2a      	ldr	r2, [pc, #168]	; (80145c4 <_dtoa_r+0x32c>)
 801451c:	f00a 030f 	and.w	r3, sl, #15
 8014520:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014524:	ed93 7b00 	vldr	d7, [r3]
 8014528:	ea4f 162a 	mov.w	r6, sl, asr #4
 801452c:	06f0      	lsls	r0, r6, #27
 801452e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014532:	d565      	bpl.n	8014600 <_dtoa_r+0x368>
 8014534:	4b24      	ldr	r3, [pc, #144]	; (80145c8 <_dtoa_r+0x330>)
 8014536:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801453a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801453e:	f7f4 f8bd 	bl	80086bc <__aeabi_ddiv>
 8014542:	e9cd 0100 	strd	r0, r1, [sp]
 8014546:	f006 060f 	and.w	r6, r6, #15
 801454a:	2503      	movs	r5, #3
 801454c:	4f1e      	ldr	r7, [pc, #120]	; (80145c8 <_dtoa_r+0x330>)
 801454e:	e04c      	b.n	80145ea <_dtoa_r+0x352>
 8014550:	2301      	movs	r3, #1
 8014552:	930a      	str	r3, [sp, #40]	; 0x28
 8014554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014556:	4453      	add	r3, sl
 8014558:	f103 0901 	add.w	r9, r3, #1
 801455c:	9302      	str	r3, [sp, #8]
 801455e:	464b      	mov	r3, r9
 8014560:	2b01      	cmp	r3, #1
 8014562:	bfb8      	it	lt
 8014564:	2301      	movlt	r3, #1
 8014566:	e7ba      	b.n	80144de <_dtoa_r+0x246>
 8014568:	2300      	movs	r3, #0
 801456a:	e7b2      	b.n	80144d2 <_dtoa_r+0x23a>
 801456c:	2300      	movs	r3, #0
 801456e:	e7f0      	b.n	8014552 <_dtoa_r+0x2ba>
 8014570:	2501      	movs	r5, #1
 8014572:	2300      	movs	r3, #0
 8014574:	9306      	str	r3, [sp, #24]
 8014576:	950a      	str	r5, [sp, #40]	; 0x28
 8014578:	f04f 33ff 	mov.w	r3, #4294967295
 801457c:	9302      	str	r3, [sp, #8]
 801457e:	4699      	mov	r9, r3
 8014580:	2200      	movs	r2, #0
 8014582:	2312      	movs	r3, #18
 8014584:	920b      	str	r2, [sp, #44]	; 0x2c
 8014586:	e7aa      	b.n	80144de <_dtoa_r+0x246>
 8014588:	2301      	movs	r3, #1
 801458a:	930a      	str	r3, [sp, #40]	; 0x28
 801458c:	e7f4      	b.n	8014578 <_dtoa_r+0x2e0>
 801458e:	2301      	movs	r3, #1
 8014590:	9302      	str	r3, [sp, #8]
 8014592:	4699      	mov	r9, r3
 8014594:	461a      	mov	r2, r3
 8014596:	e7f5      	b.n	8014584 <_dtoa_r+0x2ec>
 8014598:	3101      	adds	r1, #1
 801459a:	6071      	str	r1, [r6, #4]
 801459c:	0052      	lsls	r2, r2, #1
 801459e:	e7a2      	b.n	80144e6 <_dtoa_r+0x24e>
 80145a0:	636f4361 	.word	0x636f4361
 80145a4:	3fd287a7 	.word	0x3fd287a7
 80145a8:	8b60c8b3 	.word	0x8b60c8b3
 80145ac:	3fc68a28 	.word	0x3fc68a28
 80145b0:	509f79fb 	.word	0x509f79fb
 80145b4:	3fd34413 	.word	0x3fd34413
 80145b8:	7ff00000 	.word	0x7ff00000
 80145bc:	08016657 	.word	0x08016657
 80145c0:	3ff80000 	.word	0x3ff80000
 80145c4:	080166f0 	.word	0x080166f0
 80145c8:	080166c8 	.word	0x080166c8
 80145cc:	080166b9 	.word	0x080166b9
 80145d0:	07f1      	lsls	r1, r6, #31
 80145d2:	d508      	bpl.n	80145e6 <_dtoa_r+0x34e>
 80145d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80145d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80145dc:	f7f3 ff44 	bl	8008468 <__aeabi_dmul>
 80145e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80145e4:	3501      	adds	r5, #1
 80145e6:	1076      	asrs	r6, r6, #1
 80145e8:	3708      	adds	r7, #8
 80145ea:	2e00      	cmp	r6, #0
 80145ec:	d1f0      	bne.n	80145d0 <_dtoa_r+0x338>
 80145ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80145f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80145f6:	f7f4 f861 	bl	80086bc <__aeabi_ddiv>
 80145fa:	e9cd 0100 	strd	r0, r1, [sp]
 80145fe:	e01a      	b.n	8014636 <_dtoa_r+0x39e>
 8014600:	2502      	movs	r5, #2
 8014602:	e7a3      	b.n	801454c <_dtoa_r+0x2b4>
 8014604:	f000 80a0 	beq.w	8014748 <_dtoa_r+0x4b0>
 8014608:	f1ca 0600 	rsb	r6, sl, #0
 801460c:	4b9f      	ldr	r3, [pc, #636]	; (801488c <_dtoa_r+0x5f4>)
 801460e:	4fa0      	ldr	r7, [pc, #640]	; (8014890 <_dtoa_r+0x5f8>)
 8014610:	f006 020f 	and.w	r2, r6, #15
 8014614:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801461c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014620:	f7f3 ff22 	bl	8008468 <__aeabi_dmul>
 8014624:	e9cd 0100 	strd	r0, r1, [sp]
 8014628:	1136      	asrs	r6, r6, #4
 801462a:	2300      	movs	r3, #0
 801462c:	2502      	movs	r5, #2
 801462e:	2e00      	cmp	r6, #0
 8014630:	d17f      	bne.n	8014732 <_dtoa_r+0x49a>
 8014632:	2b00      	cmp	r3, #0
 8014634:	d1e1      	bne.n	80145fa <_dtoa_r+0x362>
 8014636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014638:	2b00      	cmp	r3, #0
 801463a:	f000 8087 	beq.w	801474c <_dtoa_r+0x4b4>
 801463e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014642:	2200      	movs	r2, #0
 8014644:	4b93      	ldr	r3, [pc, #588]	; (8014894 <_dtoa_r+0x5fc>)
 8014646:	4630      	mov	r0, r6
 8014648:	4639      	mov	r1, r7
 801464a:	f7f4 f97f 	bl	800894c <__aeabi_dcmplt>
 801464e:	2800      	cmp	r0, #0
 8014650:	d07c      	beq.n	801474c <_dtoa_r+0x4b4>
 8014652:	f1b9 0f00 	cmp.w	r9, #0
 8014656:	d079      	beq.n	801474c <_dtoa_r+0x4b4>
 8014658:	9b02      	ldr	r3, [sp, #8]
 801465a:	2b00      	cmp	r3, #0
 801465c:	dd35      	ble.n	80146ca <_dtoa_r+0x432>
 801465e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014662:	9308      	str	r3, [sp, #32]
 8014664:	4639      	mov	r1, r7
 8014666:	2200      	movs	r2, #0
 8014668:	4b8b      	ldr	r3, [pc, #556]	; (8014898 <_dtoa_r+0x600>)
 801466a:	4630      	mov	r0, r6
 801466c:	f7f3 fefc 	bl	8008468 <__aeabi_dmul>
 8014670:	e9cd 0100 	strd	r0, r1, [sp]
 8014674:	9f02      	ldr	r7, [sp, #8]
 8014676:	3501      	adds	r5, #1
 8014678:	4628      	mov	r0, r5
 801467a:	f7f3 fe8b 	bl	8008394 <__aeabi_i2d>
 801467e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014682:	f7f3 fef1 	bl	8008468 <__aeabi_dmul>
 8014686:	2200      	movs	r2, #0
 8014688:	4b84      	ldr	r3, [pc, #528]	; (801489c <_dtoa_r+0x604>)
 801468a:	f7f3 fd37 	bl	80080fc <__adddf3>
 801468e:	4605      	mov	r5, r0
 8014690:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014694:	2f00      	cmp	r7, #0
 8014696:	d15d      	bne.n	8014754 <_dtoa_r+0x4bc>
 8014698:	2200      	movs	r2, #0
 801469a:	4b81      	ldr	r3, [pc, #516]	; (80148a0 <_dtoa_r+0x608>)
 801469c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146a0:	f7f3 fd2a 	bl	80080f8 <__aeabi_dsub>
 80146a4:	462a      	mov	r2, r5
 80146a6:	4633      	mov	r3, r6
 80146a8:	e9cd 0100 	strd	r0, r1, [sp]
 80146ac:	f7f4 f96c 	bl	8008988 <__aeabi_dcmpgt>
 80146b0:	2800      	cmp	r0, #0
 80146b2:	f040 8288 	bne.w	8014bc6 <_dtoa_r+0x92e>
 80146b6:	462a      	mov	r2, r5
 80146b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80146bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146c0:	f7f4 f944 	bl	800894c <__aeabi_dcmplt>
 80146c4:	2800      	cmp	r0, #0
 80146c6:	f040 827c 	bne.w	8014bc2 <_dtoa_r+0x92a>
 80146ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80146ce:	e9cd 2300 	strd	r2, r3, [sp]
 80146d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	f2c0 8150 	blt.w	801497a <_dtoa_r+0x6e2>
 80146da:	f1ba 0f0e 	cmp.w	sl, #14
 80146de:	f300 814c 	bgt.w	801497a <_dtoa_r+0x6e2>
 80146e2:	4b6a      	ldr	r3, [pc, #424]	; (801488c <_dtoa_r+0x5f4>)
 80146e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80146e8:	ed93 7b00 	vldr	d7, [r3]
 80146ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80146f4:	f280 80d8 	bge.w	80148a8 <_dtoa_r+0x610>
 80146f8:	f1b9 0f00 	cmp.w	r9, #0
 80146fc:	f300 80d4 	bgt.w	80148a8 <_dtoa_r+0x610>
 8014700:	f040 825e 	bne.w	8014bc0 <_dtoa_r+0x928>
 8014704:	2200      	movs	r2, #0
 8014706:	4b66      	ldr	r3, [pc, #408]	; (80148a0 <_dtoa_r+0x608>)
 8014708:	ec51 0b17 	vmov	r0, r1, d7
 801470c:	f7f3 feac 	bl	8008468 <__aeabi_dmul>
 8014710:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014714:	f7f4 f92e 	bl	8008974 <__aeabi_dcmpge>
 8014718:	464f      	mov	r7, r9
 801471a:	464e      	mov	r6, r9
 801471c:	2800      	cmp	r0, #0
 801471e:	f040 8234 	bne.w	8014b8a <_dtoa_r+0x8f2>
 8014722:	2331      	movs	r3, #49	; 0x31
 8014724:	f10b 0501 	add.w	r5, fp, #1
 8014728:	f88b 3000 	strb.w	r3, [fp]
 801472c:	f10a 0a01 	add.w	sl, sl, #1
 8014730:	e22f      	b.n	8014b92 <_dtoa_r+0x8fa>
 8014732:	07f2      	lsls	r2, r6, #31
 8014734:	d505      	bpl.n	8014742 <_dtoa_r+0x4aa>
 8014736:	e9d7 2300 	ldrd	r2, r3, [r7]
 801473a:	f7f3 fe95 	bl	8008468 <__aeabi_dmul>
 801473e:	3501      	adds	r5, #1
 8014740:	2301      	movs	r3, #1
 8014742:	1076      	asrs	r6, r6, #1
 8014744:	3708      	adds	r7, #8
 8014746:	e772      	b.n	801462e <_dtoa_r+0x396>
 8014748:	2502      	movs	r5, #2
 801474a:	e774      	b.n	8014636 <_dtoa_r+0x39e>
 801474c:	f8cd a020 	str.w	sl, [sp, #32]
 8014750:	464f      	mov	r7, r9
 8014752:	e791      	b.n	8014678 <_dtoa_r+0x3e0>
 8014754:	4b4d      	ldr	r3, [pc, #308]	; (801488c <_dtoa_r+0x5f4>)
 8014756:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801475a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801475e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014760:	2b00      	cmp	r3, #0
 8014762:	d047      	beq.n	80147f4 <_dtoa_r+0x55c>
 8014764:	4602      	mov	r2, r0
 8014766:	460b      	mov	r3, r1
 8014768:	2000      	movs	r0, #0
 801476a:	494e      	ldr	r1, [pc, #312]	; (80148a4 <_dtoa_r+0x60c>)
 801476c:	f7f3 ffa6 	bl	80086bc <__aeabi_ddiv>
 8014770:	462a      	mov	r2, r5
 8014772:	4633      	mov	r3, r6
 8014774:	f7f3 fcc0 	bl	80080f8 <__aeabi_dsub>
 8014778:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801477c:	465d      	mov	r5, fp
 801477e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014782:	f7f4 f921 	bl	80089c8 <__aeabi_d2iz>
 8014786:	4606      	mov	r6, r0
 8014788:	f7f3 fe04 	bl	8008394 <__aeabi_i2d>
 801478c:	4602      	mov	r2, r0
 801478e:	460b      	mov	r3, r1
 8014790:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014794:	f7f3 fcb0 	bl	80080f8 <__aeabi_dsub>
 8014798:	3630      	adds	r6, #48	; 0x30
 801479a:	f805 6b01 	strb.w	r6, [r5], #1
 801479e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80147a2:	e9cd 0100 	strd	r0, r1, [sp]
 80147a6:	f7f4 f8d1 	bl	800894c <__aeabi_dcmplt>
 80147aa:	2800      	cmp	r0, #0
 80147ac:	d163      	bne.n	8014876 <_dtoa_r+0x5de>
 80147ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80147b2:	2000      	movs	r0, #0
 80147b4:	4937      	ldr	r1, [pc, #220]	; (8014894 <_dtoa_r+0x5fc>)
 80147b6:	f7f3 fc9f 	bl	80080f8 <__aeabi_dsub>
 80147ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80147be:	f7f4 f8c5 	bl	800894c <__aeabi_dcmplt>
 80147c2:	2800      	cmp	r0, #0
 80147c4:	f040 80b7 	bne.w	8014936 <_dtoa_r+0x69e>
 80147c8:	eba5 030b 	sub.w	r3, r5, fp
 80147cc:	429f      	cmp	r7, r3
 80147ce:	f77f af7c 	ble.w	80146ca <_dtoa_r+0x432>
 80147d2:	2200      	movs	r2, #0
 80147d4:	4b30      	ldr	r3, [pc, #192]	; (8014898 <_dtoa_r+0x600>)
 80147d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80147da:	f7f3 fe45 	bl	8008468 <__aeabi_dmul>
 80147de:	2200      	movs	r2, #0
 80147e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80147e4:	4b2c      	ldr	r3, [pc, #176]	; (8014898 <_dtoa_r+0x600>)
 80147e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147ea:	f7f3 fe3d 	bl	8008468 <__aeabi_dmul>
 80147ee:	e9cd 0100 	strd	r0, r1, [sp]
 80147f2:	e7c4      	b.n	801477e <_dtoa_r+0x4e6>
 80147f4:	462a      	mov	r2, r5
 80147f6:	4633      	mov	r3, r6
 80147f8:	f7f3 fe36 	bl	8008468 <__aeabi_dmul>
 80147fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014800:	eb0b 0507 	add.w	r5, fp, r7
 8014804:	465e      	mov	r6, fp
 8014806:	e9dd 0100 	ldrd	r0, r1, [sp]
 801480a:	f7f4 f8dd 	bl	80089c8 <__aeabi_d2iz>
 801480e:	4607      	mov	r7, r0
 8014810:	f7f3 fdc0 	bl	8008394 <__aeabi_i2d>
 8014814:	3730      	adds	r7, #48	; 0x30
 8014816:	4602      	mov	r2, r0
 8014818:	460b      	mov	r3, r1
 801481a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801481e:	f7f3 fc6b 	bl	80080f8 <__aeabi_dsub>
 8014822:	f806 7b01 	strb.w	r7, [r6], #1
 8014826:	42ae      	cmp	r6, r5
 8014828:	e9cd 0100 	strd	r0, r1, [sp]
 801482c:	f04f 0200 	mov.w	r2, #0
 8014830:	d126      	bne.n	8014880 <_dtoa_r+0x5e8>
 8014832:	4b1c      	ldr	r3, [pc, #112]	; (80148a4 <_dtoa_r+0x60c>)
 8014834:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014838:	f7f3 fc60 	bl	80080fc <__adddf3>
 801483c:	4602      	mov	r2, r0
 801483e:	460b      	mov	r3, r1
 8014840:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014844:	f7f4 f8a0 	bl	8008988 <__aeabi_dcmpgt>
 8014848:	2800      	cmp	r0, #0
 801484a:	d174      	bne.n	8014936 <_dtoa_r+0x69e>
 801484c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014850:	2000      	movs	r0, #0
 8014852:	4914      	ldr	r1, [pc, #80]	; (80148a4 <_dtoa_r+0x60c>)
 8014854:	f7f3 fc50 	bl	80080f8 <__aeabi_dsub>
 8014858:	4602      	mov	r2, r0
 801485a:	460b      	mov	r3, r1
 801485c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014860:	f7f4 f874 	bl	800894c <__aeabi_dcmplt>
 8014864:	2800      	cmp	r0, #0
 8014866:	f43f af30 	beq.w	80146ca <_dtoa_r+0x432>
 801486a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801486e:	2b30      	cmp	r3, #48	; 0x30
 8014870:	f105 32ff 	add.w	r2, r5, #4294967295
 8014874:	d002      	beq.n	801487c <_dtoa_r+0x5e4>
 8014876:	f8dd a020 	ldr.w	sl, [sp, #32]
 801487a:	e04a      	b.n	8014912 <_dtoa_r+0x67a>
 801487c:	4615      	mov	r5, r2
 801487e:	e7f4      	b.n	801486a <_dtoa_r+0x5d2>
 8014880:	4b05      	ldr	r3, [pc, #20]	; (8014898 <_dtoa_r+0x600>)
 8014882:	f7f3 fdf1 	bl	8008468 <__aeabi_dmul>
 8014886:	e9cd 0100 	strd	r0, r1, [sp]
 801488a:	e7bc      	b.n	8014806 <_dtoa_r+0x56e>
 801488c:	080166f0 	.word	0x080166f0
 8014890:	080166c8 	.word	0x080166c8
 8014894:	3ff00000 	.word	0x3ff00000
 8014898:	40240000 	.word	0x40240000
 801489c:	401c0000 	.word	0x401c0000
 80148a0:	40140000 	.word	0x40140000
 80148a4:	3fe00000 	.word	0x3fe00000
 80148a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80148ac:	465d      	mov	r5, fp
 80148ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148b2:	4630      	mov	r0, r6
 80148b4:	4639      	mov	r1, r7
 80148b6:	f7f3 ff01 	bl	80086bc <__aeabi_ddiv>
 80148ba:	f7f4 f885 	bl	80089c8 <__aeabi_d2iz>
 80148be:	4680      	mov	r8, r0
 80148c0:	f7f3 fd68 	bl	8008394 <__aeabi_i2d>
 80148c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148c8:	f7f3 fdce 	bl	8008468 <__aeabi_dmul>
 80148cc:	4602      	mov	r2, r0
 80148ce:	460b      	mov	r3, r1
 80148d0:	4630      	mov	r0, r6
 80148d2:	4639      	mov	r1, r7
 80148d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80148d8:	f7f3 fc0e 	bl	80080f8 <__aeabi_dsub>
 80148dc:	f805 6b01 	strb.w	r6, [r5], #1
 80148e0:	eba5 060b 	sub.w	r6, r5, fp
 80148e4:	45b1      	cmp	r9, r6
 80148e6:	4602      	mov	r2, r0
 80148e8:	460b      	mov	r3, r1
 80148ea:	d139      	bne.n	8014960 <_dtoa_r+0x6c8>
 80148ec:	f7f3 fc06 	bl	80080fc <__adddf3>
 80148f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148f4:	4606      	mov	r6, r0
 80148f6:	460f      	mov	r7, r1
 80148f8:	f7f4 f846 	bl	8008988 <__aeabi_dcmpgt>
 80148fc:	b9c8      	cbnz	r0, 8014932 <_dtoa_r+0x69a>
 80148fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014902:	4630      	mov	r0, r6
 8014904:	4639      	mov	r1, r7
 8014906:	f7f4 f817 	bl	8008938 <__aeabi_dcmpeq>
 801490a:	b110      	cbz	r0, 8014912 <_dtoa_r+0x67a>
 801490c:	f018 0f01 	tst.w	r8, #1
 8014910:	d10f      	bne.n	8014932 <_dtoa_r+0x69a>
 8014912:	9904      	ldr	r1, [sp, #16]
 8014914:	4620      	mov	r0, r4
 8014916:	f000 fe5c 	bl	80155d2 <_Bfree>
 801491a:	2300      	movs	r3, #0
 801491c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801491e:	702b      	strb	r3, [r5, #0]
 8014920:	f10a 0301 	add.w	r3, sl, #1
 8014924:	6013      	str	r3, [r2, #0]
 8014926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014928:	2b00      	cmp	r3, #0
 801492a:	f000 8241 	beq.w	8014db0 <_dtoa_r+0xb18>
 801492e:	601d      	str	r5, [r3, #0]
 8014930:	e23e      	b.n	8014db0 <_dtoa_r+0xb18>
 8014932:	f8cd a020 	str.w	sl, [sp, #32]
 8014936:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801493a:	2a39      	cmp	r2, #57	; 0x39
 801493c:	f105 33ff 	add.w	r3, r5, #4294967295
 8014940:	d108      	bne.n	8014954 <_dtoa_r+0x6bc>
 8014942:	459b      	cmp	fp, r3
 8014944:	d10a      	bne.n	801495c <_dtoa_r+0x6c4>
 8014946:	9b08      	ldr	r3, [sp, #32]
 8014948:	3301      	adds	r3, #1
 801494a:	9308      	str	r3, [sp, #32]
 801494c:	2330      	movs	r3, #48	; 0x30
 801494e:	f88b 3000 	strb.w	r3, [fp]
 8014952:	465b      	mov	r3, fp
 8014954:	781a      	ldrb	r2, [r3, #0]
 8014956:	3201      	adds	r2, #1
 8014958:	701a      	strb	r2, [r3, #0]
 801495a:	e78c      	b.n	8014876 <_dtoa_r+0x5de>
 801495c:	461d      	mov	r5, r3
 801495e:	e7ea      	b.n	8014936 <_dtoa_r+0x69e>
 8014960:	2200      	movs	r2, #0
 8014962:	4b9b      	ldr	r3, [pc, #620]	; (8014bd0 <_dtoa_r+0x938>)
 8014964:	f7f3 fd80 	bl	8008468 <__aeabi_dmul>
 8014968:	2200      	movs	r2, #0
 801496a:	2300      	movs	r3, #0
 801496c:	4606      	mov	r6, r0
 801496e:	460f      	mov	r7, r1
 8014970:	f7f3 ffe2 	bl	8008938 <__aeabi_dcmpeq>
 8014974:	2800      	cmp	r0, #0
 8014976:	d09a      	beq.n	80148ae <_dtoa_r+0x616>
 8014978:	e7cb      	b.n	8014912 <_dtoa_r+0x67a>
 801497a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801497c:	2a00      	cmp	r2, #0
 801497e:	f000 808b 	beq.w	8014a98 <_dtoa_r+0x800>
 8014982:	9a06      	ldr	r2, [sp, #24]
 8014984:	2a01      	cmp	r2, #1
 8014986:	dc6e      	bgt.n	8014a66 <_dtoa_r+0x7ce>
 8014988:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801498a:	2a00      	cmp	r2, #0
 801498c:	d067      	beq.n	8014a5e <_dtoa_r+0x7c6>
 801498e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014992:	9f07      	ldr	r7, [sp, #28]
 8014994:	9d05      	ldr	r5, [sp, #20]
 8014996:	9a05      	ldr	r2, [sp, #20]
 8014998:	2101      	movs	r1, #1
 801499a:	441a      	add	r2, r3
 801499c:	4620      	mov	r0, r4
 801499e:	9205      	str	r2, [sp, #20]
 80149a0:	4498      	add	r8, r3
 80149a2:	f000 fef4 	bl	801578e <__i2b>
 80149a6:	4606      	mov	r6, r0
 80149a8:	2d00      	cmp	r5, #0
 80149aa:	dd0c      	ble.n	80149c6 <_dtoa_r+0x72e>
 80149ac:	f1b8 0f00 	cmp.w	r8, #0
 80149b0:	dd09      	ble.n	80149c6 <_dtoa_r+0x72e>
 80149b2:	4545      	cmp	r5, r8
 80149b4:	9a05      	ldr	r2, [sp, #20]
 80149b6:	462b      	mov	r3, r5
 80149b8:	bfa8      	it	ge
 80149ba:	4643      	movge	r3, r8
 80149bc:	1ad2      	subs	r2, r2, r3
 80149be:	9205      	str	r2, [sp, #20]
 80149c0:	1aed      	subs	r5, r5, r3
 80149c2:	eba8 0803 	sub.w	r8, r8, r3
 80149c6:	9b07      	ldr	r3, [sp, #28]
 80149c8:	b1eb      	cbz	r3, 8014a06 <_dtoa_r+0x76e>
 80149ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d067      	beq.n	8014aa0 <_dtoa_r+0x808>
 80149d0:	b18f      	cbz	r7, 80149f6 <_dtoa_r+0x75e>
 80149d2:	4631      	mov	r1, r6
 80149d4:	463a      	mov	r2, r7
 80149d6:	4620      	mov	r0, r4
 80149d8:	f000 ff78 	bl	80158cc <__pow5mult>
 80149dc:	9a04      	ldr	r2, [sp, #16]
 80149de:	4601      	mov	r1, r0
 80149e0:	4606      	mov	r6, r0
 80149e2:	4620      	mov	r0, r4
 80149e4:	f000 fedc 	bl	80157a0 <__multiply>
 80149e8:	9904      	ldr	r1, [sp, #16]
 80149ea:	9008      	str	r0, [sp, #32]
 80149ec:	4620      	mov	r0, r4
 80149ee:	f000 fdf0 	bl	80155d2 <_Bfree>
 80149f2:	9b08      	ldr	r3, [sp, #32]
 80149f4:	9304      	str	r3, [sp, #16]
 80149f6:	9b07      	ldr	r3, [sp, #28]
 80149f8:	1bda      	subs	r2, r3, r7
 80149fa:	d004      	beq.n	8014a06 <_dtoa_r+0x76e>
 80149fc:	9904      	ldr	r1, [sp, #16]
 80149fe:	4620      	mov	r0, r4
 8014a00:	f000 ff64 	bl	80158cc <__pow5mult>
 8014a04:	9004      	str	r0, [sp, #16]
 8014a06:	2101      	movs	r1, #1
 8014a08:	4620      	mov	r0, r4
 8014a0a:	f000 fec0 	bl	801578e <__i2b>
 8014a0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a10:	4607      	mov	r7, r0
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	f000 81d0 	beq.w	8014db8 <_dtoa_r+0xb20>
 8014a18:	461a      	mov	r2, r3
 8014a1a:	4601      	mov	r1, r0
 8014a1c:	4620      	mov	r0, r4
 8014a1e:	f000 ff55 	bl	80158cc <__pow5mult>
 8014a22:	9b06      	ldr	r3, [sp, #24]
 8014a24:	2b01      	cmp	r3, #1
 8014a26:	4607      	mov	r7, r0
 8014a28:	dc40      	bgt.n	8014aac <_dtoa_r+0x814>
 8014a2a:	9b00      	ldr	r3, [sp, #0]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d139      	bne.n	8014aa4 <_dtoa_r+0x80c>
 8014a30:	9b01      	ldr	r3, [sp, #4]
 8014a32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d136      	bne.n	8014aa8 <_dtoa_r+0x810>
 8014a3a:	9b01      	ldr	r3, [sp, #4]
 8014a3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014a40:	0d1b      	lsrs	r3, r3, #20
 8014a42:	051b      	lsls	r3, r3, #20
 8014a44:	b12b      	cbz	r3, 8014a52 <_dtoa_r+0x7ba>
 8014a46:	9b05      	ldr	r3, [sp, #20]
 8014a48:	3301      	adds	r3, #1
 8014a4a:	9305      	str	r3, [sp, #20]
 8014a4c:	f108 0801 	add.w	r8, r8, #1
 8014a50:	2301      	movs	r3, #1
 8014a52:	9307      	str	r3, [sp, #28]
 8014a54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d12a      	bne.n	8014ab0 <_dtoa_r+0x818>
 8014a5a:	2001      	movs	r0, #1
 8014a5c:	e030      	b.n	8014ac0 <_dtoa_r+0x828>
 8014a5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014a64:	e795      	b.n	8014992 <_dtoa_r+0x6fa>
 8014a66:	9b07      	ldr	r3, [sp, #28]
 8014a68:	f109 37ff 	add.w	r7, r9, #4294967295
 8014a6c:	42bb      	cmp	r3, r7
 8014a6e:	bfbf      	itttt	lt
 8014a70:	9b07      	ldrlt	r3, [sp, #28]
 8014a72:	9707      	strlt	r7, [sp, #28]
 8014a74:	1afa      	sublt	r2, r7, r3
 8014a76:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014a78:	bfbb      	ittet	lt
 8014a7a:	189b      	addlt	r3, r3, r2
 8014a7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014a7e:	1bdf      	subge	r7, r3, r7
 8014a80:	2700      	movlt	r7, #0
 8014a82:	f1b9 0f00 	cmp.w	r9, #0
 8014a86:	bfb5      	itete	lt
 8014a88:	9b05      	ldrlt	r3, [sp, #20]
 8014a8a:	9d05      	ldrge	r5, [sp, #20]
 8014a8c:	eba3 0509 	sublt.w	r5, r3, r9
 8014a90:	464b      	movge	r3, r9
 8014a92:	bfb8      	it	lt
 8014a94:	2300      	movlt	r3, #0
 8014a96:	e77e      	b.n	8014996 <_dtoa_r+0x6fe>
 8014a98:	9f07      	ldr	r7, [sp, #28]
 8014a9a:	9d05      	ldr	r5, [sp, #20]
 8014a9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014a9e:	e783      	b.n	80149a8 <_dtoa_r+0x710>
 8014aa0:	9a07      	ldr	r2, [sp, #28]
 8014aa2:	e7ab      	b.n	80149fc <_dtoa_r+0x764>
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	e7d4      	b.n	8014a52 <_dtoa_r+0x7ba>
 8014aa8:	9b00      	ldr	r3, [sp, #0]
 8014aaa:	e7d2      	b.n	8014a52 <_dtoa_r+0x7ba>
 8014aac:	2300      	movs	r3, #0
 8014aae:	9307      	str	r3, [sp, #28]
 8014ab0:	693b      	ldr	r3, [r7, #16]
 8014ab2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014ab6:	6918      	ldr	r0, [r3, #16]
 8014ab8:	f000 fe1b 	bl	80156f2 <__hi0bits>
 8014abc:	f1c0 0020 	rsb	r0, r0, #32
 8014ac0:	4440      	add	r0, r8
 8014ac2:	f010 001f 	ands.w	r0, r0, #31
 8014ac6:	d047      	beq.n	8014b58 <_dtoa_r+0x8c0>
 8014ac8:	f1c0 0320 	rsb	r3, r0, #32
 8014acc:	2b04      	cmp	r3, #4
 8014ace:	dd3b      	ble.n	8014b48 <_dtoa_r+0x8b0>
 8014ad0:	9b05      	ldr	r3, [sp, #20]
 8014ad2:	f1c0 001c 	rsb	r0, r0, #28
 8014ad6:	4403      	add	r3, r0
 8014ad8:	9305      	str	r3, [sp, #20]
 8014ada:	4405      	add	r5, r0
 8014adc:	4480      	add	r8, r0
 8014ade:	9b05      	ldr	r3, [sp, #20]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	dd05      	ble.n	8014af0 <_dtoa_r+0x858>
 8014ae4:	461a      	mov	r2, r3
 8014ae6:	9904      	ldr	r1, [sp, #16]
 8014ae8:	4620      	mov	r0, r4
 8014aea:	f000 ff3d 	bl	8015968 <__lshift>
 8014aee:	9004      	str	r0, [sp, #16]
 8014af0:	f1b8 0f00 	cmp.w	r8, #0
 8014af4:	dd05      	ble.n	8014b02 <_dtoa_r+0x86a>
 8014af6:	4639      	mov	r1, r7
 8014af8:	4642      	mov	r2, r8
 8014afa:	4620      	mov	r0, r4
 8014afc:	f000 ff34 	bl	8015968 <__lshift>
 8014b00:	4607      	mov	r7, r0
 8014b02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b04:	b353      	cbz	r3, 8014b5c <_dtoa_r+0x8c4>
 8014b06:	4639      	mov	r1, r7
 8014b08:	9804      	ldr	r0, [sp, #16]
 8014b0a:	f000 ff81 	bl	8015a10 <__mcmp>
 8014b0e:	2800      	cmp	r0, #0
 8014b10:	da24      	bge.n	8014b5c <_dtoa_r+0x8c4>
 8014b12:	2300      	movs	r3, #0
 8014b14:	220a      	movs	r2, #10
 8014b16:	9904      	ldr	r1, [sp, #16]
 8014b18:	4620      	mov	r0, r4
 8014b1a:	f000 fd71 	bl	8015600 <__multadd>
 8014b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b20:	9004      	str	r0, [sp, #16]
 8014b22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	f000 814d 	beq.w	8014dc6 <_dtoa_r+0xb2e>
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	4631      	mov	r1, r6
 8014b30:	220a      	movs	r2, #10
 8014b32:	4620      	mov	r0, r4
 8014b34:	f000 fd64 	bl	8015600 <__multadd>
 8014b38:	9b02      	ldr	r3, [sp, #8]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	4606      	mov	r6, r0
 8014b3e:	dc4f      	bgt.n	8014be0 <_dtoa_r+0x948>
 8014b40:	9b06      	ldr	r3, [sp, #24]
 8014b42:	2b02      	cmp	r3, #2
 8014b44:	dd4c      	ble.n	8014be0 <_dtoa_r+0x948>
 8014b46:	e011      	b.n	8014b6c <_dtoa_r+0x8d4>
 8014b48:	d0c9      	beq.n	8014ade <_dtoa_r+0x846>
 8014b4a:	9a05      	ldr	r2, [sp, #20]
 8014b4c:	331c      	adds	r3, #28
 8014b4e:	441a      	add	r2, r3
 8014b50:	9205      	str	r2, [sp, #20]
 8014b52:	441d      	add	r5, r3
 8014b54:	4498      	add	r8, r3
 8014b56:	e7c2      	b.n	8014ade <_dtoa_r+0x846>
 8014b58:	4603      	mov	r3, r0
 8014b5a:	e7f6      	b.n	8014b4a <_dtoa_r+0x8b2>
 8014b5c:	f1b9 0f00 	cmp.w	r9, #0
 8014b60:	dc38      	bgt.n	8014bd4 <_dtoa_r+0x93c>
 8014b62:	9b06      	ldr	r3, [sp, #24]
 8014b64:	2b02      	cmp	r3, #2
 8014b66:	dd35      	ble.n	8014bd4 <_dtoa_r+0x93c>
 8014b68:	f8cd 9008 	str.w	r9, [sp, #8]
 8014b6c:	9b02      	ldr	r3, [sp, #8]
 8014b6e:	b963      	cbnz	r3, 8014b8a <_dtoa_r+0x8f2>
 8014b70:	4639      	mov	r1, r7
 8014b72:	2205      	movs	r2, #5
 8014b74:	4620      	mov	r0, r4
 8014b76:	f000 fd43 	bl	8015600 <__multadd>
 8014b7a:	4601      	mov	r1, r0
 8014b7c:	4607      	mov	r7, r0
 8014b7e:	9804      	ldr	r0, [sp, #16]
 8014b80:	f000 ff46 	bl	8015a10 <__mcmp>
 8014b84:	2800      	cmp	r0, #0
 8014b86:	f73f adcc 	bgt.w	8014722 <_dtoa_r+0x48a>
 8014b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b8c:	465d      	mov	r5, fp
 8014b8e:	ea6f 0a03 	mvn.w	sl, r3
 8014b92:	f04f 0900 	mov.w	r9, #0
 8014b96:	4639      	mov	r1, r7
 8014b98:	4620      	mov	r0, r4
 8014b9a:	f000 fd1a 	bl	80155d2 <_Bfree>
 8014b9e:	2e00      	cmp	r6, #0
 8014ba0:	f43f aeb7 	beq.w	8014912 <_dtoa_r+0x67a>
 8014ba4:	f1b9 0f00 	cmp.w	r9, #0
 8014ba8:	d005      	beq.n	8014bb6 <_dtoa_r+0x91e>
 8014baa:	45b1      	cmp	r9, r6
 8014bac:	d003      	beq.n	8014bb6 <_dtoa_r+0x91e>
 8014bae:	4649      	mov	r1, r9
 8014bb0:	4620      	mov	r0, r4
 8014bb2:	f000 fd0e 	bl	80155d2 <_Bfree>
 8014bb6:	4631      	mov	r1, r6
 8014bb8:	4620      	mov	r0, r4
 8014bba:	f000 fd0a 	bl	80155d2 <_Bfree>
 8014bbe:	e6a8      	b.n	8014912 <_dtoa_r+0x67a>
 8014bc0:	2700      	movs	r7, #0
 8014bc2:	463e      	mov	r6, r7
 8014bc4:	e7e1      	b.n	8014b8a <_dtoa_r+0x8f2>
 8014bc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014bca:	463e      	mov	r6, r7
 8014bcc:	e5a9      	b.n	8014722 <_dtoa_r+0x48a>
 8014bce:	bf00      	nop
 8014bd0:	40240000 	.word	0x40240000
 8014bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	f000 80fa 	beq.w	8014dd4 <_dtoa_r+0xb3c>
 8014be0:	2d00      	cmp	r5, #0
 8014be2:	dd05      	ble.n	8014bf0 <_dtoa_r+0x958>
 8014be4:	4631      	mov	r1, r6
 8014be6:	462a      	mov	r2, r5
 8014be8:	4620      	mov	r0, r4
 8014bea:	f000 febd 	bl	8015968 <__lshift>
 8014bee:	4606      	mov	r6, r0
 8014bf0:	9b07      	ldr	r3, [sp, #28]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d04c      	beq.n	8014c90 <_dtoa_r+0x9f8>
 8014bf6:	6871      	ldr	r1, [r6, #4]
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	f000 fcb6 	bl	801556a <_Balloc>
 8014bfe:	6932      	ldr	r2, [r6, #16]
 8014c00:	3202      	adds	r2, #2
 8014c02:	4605      	mov	r5, r0
 8014c04:	0092      	lsls	r2, r2, #2
 8014c06:	f106 010c 	add.w	r1, r6, #12
 8014c0a:	300c      	adds	r0, #12
 8014c0c:	f7fc fc46 	bl	801149c <memcpy>
 8014c10:	2201      	movs	r2, #1
 8014c12:	4629      	mov	r1, r5
 8014c14:	4620      	mov	r0, r4
 8014c16:	f000 fea7 	bl	8015968 <__lshift>
 8014c1a:	9b00      	ldr	r3, [sp, #0]
 8014c1c:	f8cd b014 	str.w	fp, [sp, #20]
 8014c20:	f003 0301 	and.w	r3, r3, #1
 8014c24:	46b1      	mov	r9, r6
 8014c26:	9307      	str	r3, [sp, #28]
 8014c28:	4606      	mov	r6, r0
 8014c2a:	4639      	mov	r1, r7
 8014c2c:	9804      	ldr	r0, [sp, #16]
 8014c2e:	f7ff faa7 	bl	8014180 <quorem>
 8014c32:	4649      	mov	r1, r9
 8014c34:	4605      	mov	r5, r0
 8014c36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014c3a:	9804      	ldr	r0, [sp, #16]
 8014c3c:	f000 fee8 	bl	8015a10 <__mcmp>
 8014c40:	4632      	mov	r2, r6
 8014c42:	9000      	str	r0, [sp, #0]
 8014c44:	4639      	mov	r1, r7
 8014c46:	4620      	mov	r0, r4
 8014c48:	f000 fefc 	bl	8015a44 <__mdiff>
 8014c4c:	68c3      	ldr	r3, [r0, #12]
 8014c4e:	4602      	mov	r2, r0
 8014c50:	bb03      	cbnz	r3, 8014c94 <_dtoa_r+0x9fc>
 8014c52:	4601      	mov	r1, r0
 8014c54:	9008      	str	r0, [sp, #32]
 8014c56:	9804      	ldr	r0, [sp, #16]
 8014c58:	f000 feda 	bl	8015a10 <__mcmp>
 8014c5c:	9a08      	ldr	r2, [sp, #32]
 8014c5e:	4603      	mov	r3, r0
 8014c60:	4611      	mov	r1, r2
 8014c62:	4620      	mov	r0, r4
 8014c64:	9308      	str	r3, [sp, #32]
 8014c66:	f000 fcb4 	bl	80155d2 <_Bfree>
 8014c6a:	9b08      	ldr	r3, [sp, #32]
 8014c6c:	b9a3      	cbnz	r3, 8014c98 <_dtoa_r+0xa00>
 8014c6e:	9a06      	ldr	r2, [sp, #24]
 8014c70:	b992      	cbnz	r2, 8014c98 <_dtoa_r+0xa00>
 8014c72:	9a07      	ldr	r2, [sp, #28]
 8014c74:	b982      	cbnz	r2, 8014c98 <_dtoa_r+0xa00>
 8014c76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014c7a:	d029      	beq.n	8014cd0 <_dtoa_r+0xa38>
 8014c7c:	9b00      	ldr	r3, [sp, #0]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	dd01      	ble.n	8014c86 <_dtoa_r+0x9ee>
 8014c82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014c86:	9b05      	ldr	r3, [sp, #20]
 8014c88:	1c5d      	adds	r5, r3, #1
 8014c8a:	f883 8000 	strb.w	r8, [r3]
 8014c8e:	e782      	b.n	8014b96 <_dtoa_r+0x8fe>
 8014c90:	4630      	mov	r0, r6
 8014c92:	e7c2      	b.n	8014c1a <_dtoa_r+0x982>
 8014c94:	2301      	movs	r3, #1
 8014c96:	e7e3      	b.n	8014c60 <_dtoa_r+0x9c8>
 8014c98:	9a00      	ldr	r2, [sp, #0]
 8014c9a:	2a00      	cmp	r2, #0
 8014c9c:	db04      	blt.n	8014ca8 <_dtoa_r+0xa10>
 8014c9e:	d125      	bne.n	8014cec <_dtoa_r+0xa54>
 8014ca0:	9a06      	ldr	r2, [sp, #24]
 8014ca2:	bb1a      	cbnz	r2, 8014cec <_dtoa_r+0xa54>
 8014ca4:	9a07      	ldr	r2, [sp, #28]
 8014ca6:	bb0a      	cbnz	r2, 8014cec <_dtoa_r+0xa54>
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	ddec      	ble.n	8014c86 <_dtoa_r+0x9ee>
 8014cac:	2201      	movs	r2, #1
 8014cae:	9904      	ldr	r1, [sp, #16]
 8014cb0:	4620      	mov	r0, r4
 8014cb2:	f000 fe59 	bl	8015968 <__lshift>
 8014cb6:	4639      	mov	r1, r7
 8014cb8:	9004      	str	r0, [sp, #16]
 8014cba:	f000 fea9 	bl	8015a10 <__mcmp>
 8014cbe:	2800      	cmp	r0, #0
 8014cc0:	dc03      	bgt.n	8014cca <_dtoa_r+0xa32>
 8014cc2:	d1e0      	bne.n	8014c86 <_dtoa_r+0x9ee>
 8014cc4:	f018 0f01 	tst.w	r8, #1
 8014cc8:	d0dd      	beq.n	8014c86 <_dtoa_r+0x9ee>
 8014cca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014cce:	d1d8      	bne.n	8014c82 <_dtoa_r+0x9ea>
 8014cd0:	9b05      	ldr	r3, [sp, #20]
 8014cd2:	9a05      	ldr	r2, [sp, #20]
 8014cd4:	1c5d      	adds	r5, r3, #1
 8014cd6:	2339      	movs	r3, #57	; 0x39
 8014cd8:	7013      	strb	r3, [r2, #0]
 8014cda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014cde:	2b39      	cmp	r3, #57	; 0x39
 8014ce0:	f105 32ff 	add.w	r2, r5, #4294967295
 8014ce4:	d04f      	beq.n	8014d86 <_dtoa_r+0xaee>
 8014ce6:	3301      	adds	r3, #1
 8014ce8:	7013      	strb	r3, [r2, #0]
 8014cea:	e754      	b.n	8014b96 <_dtoa_r+0x8fe>
 8014cec:	9a05      	ldr	r2, [sp, #20]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	f102 0501 	add.w	r5, r2, #1
 8014cf4:	dd06      	ble.n	8014d04 <_dtoa_r+0xa6c>
 8014cf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014cfa:	d0e9      	beq.n	8014cd0 <_dtoa_r+0xa38>
 8014cfc:	f108 0801 	add.w	r8, r8, #1
 8014d00:	9b05      	ldr	r3, [sp, #20]
 8014d02:	e7c2      	b.n	8014c8a <_dtoa_r+0x9f2>
 8014d04:	9a02      	ldr	r2, [sp, #8]
 8014d06:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014d0a:	eba5 030b 	sub.w	r3, r5, fp
 8014d0e:	4293      	cmp	r3, r2
 8014d10:	d021      	beq.n	8014d56 <_dtoa_r+0xabe>
 8014d12:	2300      	movs	r3, #0
 8014d14:	220a      	movs	r2, #10
 8014d16:	9904      	ldr	r1, [sp, #16]
 8014d18:	4620      	mov	r0, r4
 8014d1a:	f000 fc71 	bl	8015600 <__multadd>
 8014d1e:	45b1      	cmp	r9, r6
 8014d20:	9004      	str	r0, [sp, #16]
 8014d22:	f04f 0300 	mov.w	r3, #0
 8014d26:	f04f 020a 	mov.w	r2, #10
 8014d2a:	4649      	mov	r1, r9
 8014d2c:	4620      	mov	r0, r4
 8014d2e:	d105      	bne.n	8014d3c <_dtoa_r+0xaa4>
 8014d30:	f000 fc66 	bl	8015600 <__multadd>
 8014d34:	4681      	mov	r9, r0
 8014d36:	4606      	mov	r6, r0
 8014d38:	9505      	str	r5, [sp, #20]
 8014d3a:	e776      	b.n	8014c2a <_dtoa_r+0x992>
 8014d3c:	f000 fc60 	bl	8015600 <__multadd>
 8014d40:	4631      	mov	r1, r6
 8014d42:	4681      	mov	r9, r0
 8014d44:	2300      	movs	r3, #0
 8014d46:	220a      	movs	r2, #10
 8014d48:	4620      	mov	r0, r4
 8014d4a:	f000 fc59 	bl	8015600 <__multadd>
 8014d4e:	4606      	mov	r6, r0
 8014d50:	e7f2      	b.n	8014d38 <_dtoa_r+0xaa0>
 8014d52:	f04f 0900 	mov.w	r9, #0
 8014d56:	2201      	movs	r2, #1
 8014d58:	9904      	ldr	r1, [sp, #16]
 8014d5a:	4620      	mov	r0, r4
 8014d5c:	f000 fe04 	bl	8015968 <__lshift>
 8014d60:	4639      	mov	r1, r7
 8014d62:	9004      	str	r0, [sp, #16]
 8014d64:	f000 fe54 	bl	8015a10 <__mcmp>
 8014d68:	2800      	cmp	r0, #0
 8014d6a:	dcb6      	bgt.n	8014cda <_dtoa_r+0xa42>
 8014d6c:	d102      	bne.n	8014d74 <_dtoa_r+0xadc>
 8014d6e:	f018 0f01 	tst.w	r8, #1
 8014d72:	d1b2      	bne.n	8014cda <_dtoa_r+0xa42>
 8014d74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014d78:	2b30      	cmp	r3, #48	; 0x30
 8014d7a:	f105 32ff 	add.w	r2, r5, #4294967295
 8014d7e:	f47f af0a 	bne.w	8014b96 <_dtoa_r+0x8fe>
 8014d82:	4615      	mov	r5, r2
 8014d84:	e7f6      	b.n	8014d74 <_dtoa_r+0xadc>
 8014d86:	4593      	cmp	fp, r2
 8014d88:	d105      	bne.n	8014d96 <_dtoa_r+0xafe>
 8014d8a:	2331      	movs	r3, #49	; 0x31
 8014d8c:	f10a 0a01 	add.w	sl, sl, #1
 8014d90:	f88b 3000 	strb.w	r3, [fp]
 8014d94:	e6ff      	b.n	8014b96 <_dtoa_r+0x8fe>
 8014d96:	4615      	mov	r5, r2
 8014d98:	e79f      	b.n	8014cda <_dtoa_r+0xa42>
 8014d9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014e00 <_dtoa_r+0xb68>
 8014d9e:	e007      	b.n	8014db0 <_dtoa_r+0xb18>
 8014da0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014da2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014e04 <_dtoa_r+0xb6c>
 8014da6:	b11b      	cbz	r3, 8014db0 <_dtoa_r+0xb18>
 8014da8:	f10b 0308 	add.w	r3, fp, #8
 8014dac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014dae:	6013      	str	r3, [r2, #0]
 8014db0:	4658      	mov	r0, fp
 8014db2:	b017      	add	sp, #92	; 0x5c
 8014db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014db8:	9b06      	ldr	r3, [sp, #24]
 8014dba:	2b01      	cmp	r3, #1
 8014dbc:	f77f ae35 	ble.w	8014a2a <_dtoa_r+0x792>
 8014dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014dc2:	9307      	str	r3, [sp, #28]
 8014dc4:	e649      	b.n	8014a5a <_dtoa_r+0x7c2>
 8014dc6:	9b02      	ldr	r3, [sp, #8]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	dc03      	bgt.n	8014dd4 <_dtoa_r+0xb3c>
 8014dcc:	9b06      	ldr	r3, [sp, #24]
 8014dce:	2b02      	cmp	r3, #2
 8014dd0:	f73f aecc 	bgt.w	8014b6c <_dtoa_r+0x8d4>
 8014dd4:	465d      	mov	r5, fp
 8014dd6:	4639      	mov	r1, r7
 8014dd8:	9804      	ldr	r0, [sp, #16]
 8014dda:	f7ff f9d1 	bl	8014180 <quorem>
 8014dde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014de2:	f805 8b01 	strb.w	r8, [r5], #1
 8014de6:	9a02      	ldr	r2, [sp, #8]
 8014de8:	eba5 030b 	sub.w	r3, r5, fp
 8014dec:	429a      	cmp	r2, r3
 8014dee:	ddb0      	ble.n	8014d52 <_dtoa_r+0xaba>
 8014df0:	2300      	movs	r3, #0
 8014df2:	220a      	movs	r2, #10
 8014df4:	9904      	ldr	r1, [sp, #16]
 8014df6:	4620      	mov	r0, r4
 8014df8:	f000 fc02 	bl	8015600 <__multadd>
 8014dfc:	9004      	str	r0, [sp, #16]
 8014dfe:	e7ea      	b.n	8014dd6 <_dtoa_r+0xb3e>
 8014e00:	08016656 	.word	0x08016656
 8014e04:	080166b0 	.word	0x080166b0

08014e08 <_fstat_r>:
 8014e08:	b538      	push	{r3, r4, r5, lr}
 8014e0a:	4c07      	ldr	r4, [pc, #28]	; (8014e28 <_fstat_r+0x20>)
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	4605      	mov	r5, r0
 8014e10:	4608      	mov	r0, r1
 8014e12:	4611      	mov	r1, r2
 8014e14:	6023      	str	r3, [r4, #0]
 8014e16:	f7f8 fb59 	bl	800d4cc <_fstat>
 8014e1a:	1c43      	adds	r3, r0, #1
 8014e1c:	d102      	bne.n	8014e24 <_fstat_r+0x1c>
 8014e1e:	6823      	ldr	r3, [r4, #0]
 8014e20:	b103      	cbz	r3, 8014e24 <_fstat_r+0x1c>
 8014e22:	602b      	str	r3, [r5, #0]
 8014e24:	bd38      	pop	{r3, r4, r5, pc}
 8014e26:	bf00      	nop
 8014e28:	200011fc 	.word	0x200011fc

08014e2c <rshift>:
 8014e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e2e:	6906      	ldr	r6, [r0, #16]
 8014e30:	114b      	asrs	r3, r1, #5
 8014e32:	429e      	cmp	r6, r3
 8014e34:	f100 0414 	add.w	r4, r0, #20
 8014e38:	dd30      	ble.n	8014e9c <rshift+0x70>
 8014e3a:	f011 011f 	ands.w	r1, r1, #31
 8014e3e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8014e42:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8014e46:	d108      	bne.n	8014e5a <rshift+0x2e>
 8014e48:	4621      	mov	r1, r4
 8014e4a:	42b2      	cmp	r2, r6
 8014e4c:	460b      	mov	r3, r1
 8014e4e:	d211      	bcs.n	8014e74 <rshift+0x48>
 8014e50:	f852 3b04 	ldr.w	r3, [r2], #4
 8014e54:	f841 3b04 	str.w	r3, [r1], #4
 8014e58:	e7f7      	b.n	8014e4a <rshift+0x1e>
 8014e5a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8014e5e:	f1c1 0c20 	rsb	ip, r1, #32
 8014e62:	40cd      	lsrs	r5, r1
 8014e64:	3204      	adds	r2, #4
 8014e66:	4623      	mov	r3, r4
 8014e68:	42b2      	cmp	r2, r6
 8014e6a:	4617      	mov	r7, r2
 8014e6c:	d30c      	bcc.n	8014e88 <rshift+0x5c>
 8014e6e:	601d      	str	r5, [r3, #0]
 8014e70:	b105      	cbz	r5, 8014e74 <rshift+0x48>
 8014e72:	3304      	adds	r3, #4
 8014e74:	1b1a      	subs	r2, r3, r4
 8014e76:	42a3      	cmp	r3, r4
 8014e78:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014e7c:	bf08      	it	eq
 8014e7e:	2300      	moveq	r3, #0
 8014e80:	6102      	str	r2, [r0, #16]
 8014e82:	bf08      	it	eq
 8014e84:	6143      	streq	r3, [r0, #20]
 8014e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e88:	683f      	ldr	r7, [r7, #0]
 8014e8a:	fa07 f70c 	lsl.w	r7, r7, ip
 8014e8e:	433d      	orrs	r5, r7
 8014e90:	f843 5b04 	str.w	r5, [r3], #4
 8014e94:	f852 5b04 	ldr.w	r5, [r2], #4
 8014e98:	40cd      	lsrs	r5, r1
 8014e9a:	e7e5      	b.n	8014e68 <rshift+0x3c>
 8014e9c:	4623      	mov	r3, r4
 8014e9e:	e7e9      	b.n	8014e74 <rshift+0x48>

08014ea0 <__hexdig_fun>:
 8014ea0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014ea4:	2b09      	cmp	r3, #9
 8014ea6:	d802      	bhi.n	8014eae <__hexdig_fun+0xe>
 8014ea8:	3820      	subs	r0, #32
 8014eaa:	b2c0      	uxtb	r0, r0
 8014eac:	4770      	bx	lr
 8014eae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014eb2:	2b05      	cmp	r3, #5
 8014eb4:	d801      	bhi.n	8014eba <__hexdig_fun+0x1a>
 8014eb6:	3847      	subs	r0, #71	; 0x47
 8014eb8:	e7f7      	b.n	8014eaa <__hexdig_fun+0xa>
 8014eba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014ebe:	2b05      	cmp	r3, #5
 8014ec0:	d801      	bhi.n	8014ec6 <__hexdig_fun+0x26>
 8014ec2:	3827      	subs	r0, #39	; 0x27
 8014ec4:	e7f1      	b.n	8014eaa <__hexdig_fun+0xa>
 8014ec6:	2000      	movs	r0, #0
 8014ec8:	4770      	bx	lr

08014eca <__gethex>:
 8014eca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ece:	b08b      	sub	sp, #44	; 0x2c
 8014ed0:	468a      	mov	sl, r1
 8014ed2:	9002      	str	r0, [sp, #8]
 8014ed4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014ed6:	9306      	str	r3, [sp, #24]
 8014ed8:	4690      	mov	r8, r2
 8014eda:	f000 faef 	bl	80154bc <__localeconv_l>
 8014ede:	6803      	ldr	r3, [r0, #0]
 8014ee0:	9303      	str	r3, [sp, #12]
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f7f3 f8ac 	bl	8008040 <strlen>
 8014ee8:	9b03      	ldr	r3, [sp, #12]
 8014eea:	9001      	str	r0, [sp, #4]
 8014eec:	4403      	add	r3, r0
 8014eee:	f04f 0b00 	mov.w	fp, #0
 8014ef2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014ef6:	9307      	str	r3, [sp, #28]
 8014ef8:	f8da 3000 	ldr.w	r3, [sl]
 8014efc:	3302      	adds	r3, #2
 8014efe:	461f      	mov	r7, r3
 8014f00:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014f04:	2830      	cmp	r0, #48	; 0x30
 8014f06:	d06c      	beq.n	8014fe2 <__gethex+0x118>
 8014f08:	f7ff ffca 	bl	8014ea0 <__hexdig_fun>
 8014f0c:	4604      	mov	r4, r0
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	d16a      	bne.n	8014fe8 <__gethex+0x11e>
 8014f12:	9a01      	ldr	r2, [sp, #4]
 8014f14:	9903      	ldr	r1, [sp, #12]
 8014f16:	4638      	mov	r0, r7
 8014f18:	f001 f8f4 	bl	8016104 <strncmp>
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	d166      	bne.n	8014fee <__gethex+0x124>
 8014f20:	9b01      	ldr	r3, [sp, #4]
 8014f22:	5cf8      	ldrb	r0, [r7, r3]
 8014f24:	18fe      	adds	r6, r7, r3
 8014f26:	f7ff ffbb 	bl	8014ea0 <__hexdig_fun>
 8014f2a:	2800      	cmp	r0, #0
 8014f2c:	d062      	beq.n	8014ff4 <__gethex+0x12a>
 8014f2e:	4633      	mov	r3, r6
 8014f30:	7818      	ldrb	r0, [r3, #0]
 8014f32:	2830      	cmp	r0, #48	; 0x30
 8014f34:	461f      	mov	r7, r3
 8014f36:	f103 0301 	add.w	r3, r3, #1
 8014f3a:	d0f9      	beq.n	8014f30 <__gethex+0x66>
 8014f3c:	f7ff ffb0 	bl	8014ea0 <__hexdig_fun>
 8014f40:	fab0 f580 	clz	r5, r0
 8014f44:	096d      	lsrs	r5, r5, #5
 8014f46:	4634      	mov	r4, r6
 8014f48:	f04f 0b01 	mov.w	fp, #1
 8014f4c:	463a      	mov	r2, r7
 8014f4e:	4616      	mov	r6, r2
 8014f50:	3201      	adds	r2, #1
 8014f52:	7830      	ldrb	r0, [r6, #0]
 8014f54:	f7ff ffa4 	bl	8014ea0 <__hexdig_fun>
 8014f58:	2800      	cmp	r0, #0
 8014f5a:	d1f8      	bne.n	8014f4e <__gethex+0x84>
 8014f5c:	9a01      	ldr	r2, [sp, #4]
 8014f5e:	9903      	ldr	r1, [sp, #12]
 8014f60:	4630      	mov	r0, r6
 8014f62:	f001 f8cf 	bl	8016104 <strncmp>
 8014f66:	b950      	cbnz	r0, 8014f7e <__gethex+0xb4>
 8014f68:	b954      	cbnz	r4, 8014f80 <__gethex+0xb6>
 8014f6a:	9b01      	ldr	r3, [sp, #4]
 8014f6c:	18f4      	adds	r4, r6, r3
 8014f6e:	4622      	mov	r2, r4
 8014f70:	4616      	mov	r6, r2
 8014f72:	3201      	adds	r2, #1
 8014f74:	7830      	ldrb	r0, [r6, #0]
 8014f76:	f7ff ff93 	bl	8014ea0 <__hexdig_fun>
 8014f7a:	2800      	cmp	r0, #0
 8014f7c:	d1f8      	bne.n	8014f70 <__gethex+0xa6>
 8014f7e:	b10c      	cbz	r4, 8014f84 <__gethex+0xba>
 8014f80:	1ba4      	subs	r4, r4, r6
 8014f82:	00a4      	lsls	r4, r4, #2
 8014f84:	7833      	ldrb	r3, [r6, #0]
 8014f86:	2b50      	cmp	r3, #80	; 0x50
 8014f88:	d001      	beq.n	8014f8e <__gethex+0xc4>
 8014f8a:	2b70      	cmp	r3, #112	; 0x70
 8014f8c:	d140      	bne.n	8015010 <__gethex+0x146>
 8014f8e:	7873      	ldrb	r3, [r6, #1]
 8014f90:	2b2b      	cmp	r3, #43	; 0x2b
 8014f92:	d031      	beq.n	8014ff8 <__gethex+0x12e>
 8014f94:	2b2d      	cmp	r3, #45	; 0x2d
 8014f96:	d033      	beq.n	8015000 <__gethex+0x136>
 8014f98:	1c71      	adds	r1, r6, #1
 8014f9a:	f04f 0900 	mov.w	r9, #0
 8014f9e:	7808      	ldrb	r0, [r1, #0]
 8014fa0:	f7ff ff7e 	bl	8014ea0 <__hexdig_fun>
 8014fa4:	1e43      	subs	r3, r0, #1
 8014fa6:	b2db      	uxtb	r3, r3
 8014fa8:	2b18      	cmp	r3, #24
 8014faa:	d831      	bhi.n	8015010 <__gethex+0x146>
 8014fac:	f1a0 0210 	sub.w	r2, r0, #16
 8014fb0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014fb4:	f7ff ff74 	bl	8014ea0 <__hexdig_fun>
 8014fb8:	1e43      	subs	r3, r0, #1
 8014fba:	b2db      	uxtb	r3, r3
 8014fbc:	2b18      	cmp	r3, #24
 8014fbe:	d922      	bls.n	8015006 <__gethex+0x13c>
 8014fc0:	f1b9 0f00 	cmp.w	r9, #0
 8014fc4:	d000      	beq.n	8014fc8 <__gethex+0xfe>
 8014fc6:	4252      	negs	r2, r2
 8014fc8:	4414      	add	r4, r2
 8014fca:	f8ca 1000 	str.w	r1, [sl]
 8014fce:	b30d      	cbz	r5, 8015014 <__gethex+0x14a>
 8014fd0:	f1bb 0f00 	cmp.w	fp, #0
 8014fd4:	bf0c      	ite	eq
 8014fd6:	2706      	moveq	r7, #6
 8014fd8:	2700      	movne	r7, #0
 8014fda:	4638      	mov	r0, r7
 8014fdc:	b00b      	add	sp, #44	; 0x2c
 8014fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fe2:	f10b 0b01 	add.w	fp, fp, #1
 8014fe6:	e78a      	b.n	8014efe <__gethex+0x34>
 8014fe8:	2500      	movs	r5, #0
 8014fea:	462c      	mov	r4, r5
 8014fec:	e7ae      	b.n	8014f4c <__gethex+0x82>
 8014fee:	463e      	mov	r6, r7
 8014ff0:	2501      	movs	r5, #1
 8014ff2:	e7c7      	b.n	8014f84 <__gethex+0xba>
 8014ff4:	4604      	mov	r4, r0
 8014ff6:	e7fb      	b.n	8014ff0 <__gethex+0x126>
 8014ff8:	f04f 0900 	mov.w	r9, #0
 8014ffc:	1cb1      	adds	r1, r6, #2
 8014ffe:	e7ce      	b.n	8014f9e <__gethex+0xd4>
 8015000:	f04f 0901 	mov.w	r9, #1
 8015004:	e7fa      	b.n	8014ffc <__gethex+0x132>
 8015006:	230a      	movs	r3, #10
 8015008:	fb03 0202 	mla	r2, r3, r2, r0
 801500c:	3a10      	subs	r2, #16
 801500e:	e7cf      	b.n	8014fb0 <__gethex+0xe6>
 8015010:	4631      	mov	r1, r6
 8015012:	e7da      	b.n	8014fca <__gethex+0x100>
 8015014:	1bf3      	subs	r3, r6, r7
 8015016:	3b01      	subs	r3, #1
 8015018:	4629      	mov	r1, r5
 801501a:	2b07      	cmp	r3, #7
 801501c:	dc49      	bgt.n	80150b2 <__gethex+0x1e8>
 801501e:	9802      	ldr	r0, [sp, #8]
 8015020:	f000 faa3 	bl	801556a <_Balloc>
 8015024:	9b01      	ldr	r3, [sp, #4]
 8015026:	f100 0914 	add.w	r9, r0, #20
 801502a:	f04f 0b00 	mov.w	fp, #0
 801502e:	f1c3 0301 	rsb	r3, r3, #1
 8015032:	4605      	mov	r5, r0
 8015034:	f8cd 9010 	str.w	r9, [sp, #16]
 8015038:	46da      	mov	sl, fp
 801503a:	9308      	str	r3, [sp, #32]
 801503c:	42b7      	cmp	r7, r6
 801503e:	d33b      	bcc.n	80150b8 <__gethex+0x1ee>
 8015040:	9804      	ldr	r0, [sp, #16]
 8015042:	f840 ab04 	str.w	sl, [r0], #4
 8015046:	eba0 0009 	sub.w	r0, r0, r9
 801504a:	1080      	asrs	r0, r0, #2
 801504c:	6128      	str	r0, [r5, #16]
 801504e:	0147      	lsls	r7, r0, #5
 8015050:	4650      	mov	r0, sl
 8015052:	f000 fb4e 	bl	80156f2 <__hi0bits>
 8015056:	f8d8 6000 	ldr.w	r6, [r8]
 801505a:	1a3f      	subs	r7, r7, r0
 801505c:	42b7      	cmp	r7, r6
 801505e:	dd64      	ble.n	801512a <__gethex+0x260>
 8015060:	1bbf      	subs	r7, r7, r6
 8015062:	4639      	mov	r1, r7
 8015064:	4628      	mov	r0, r5
 8015066:	f000 fe5d 	bl	8015d24 <__any_on>
 801506a:	4682      	mov	sl, r0
 801506c:	b178      	cbz	r0, 801508e <__gethex+0x1c4>
 801506e:	1e7b      	subs	r3, r7, #1
 8015070:	1159      	asrs	r1, r3, #5
 8015072:	f003 021f 	and.w	r2, r3, #31
 8015076:	f04f 0a01 	mov.w	sl, #1
 801507a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801507e:	fa0a f202 	lsl.w	r2, sl, r2
 8015082:	420a      	tst	r2, r1
 8015084:	d003      	beq.n	801508e <__gethex+0x1c4>
 8015086:	4553      	cmp	r3, sl
 8015088:	dc46      	bgt.n	8015118 <__gethex+0x24e>
 801508a:	f04f 0a02 	mov.w	sl, #2
 801508e:	4639      	mov	r1, r7
 8015090:	4628      	mov	r0, r5
 8015092:	f7ff fecb 	bl	8014e2c <rshift>
 8015096:	443c      	add	r4, r7
 8015098:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801509c:	42a3      	cmp	r3, r4
 801509e:	da52      	bge.n	8015146 <__gethex+0x27c>
 80150a0:	4629      	mov	r1, r5
 80150a2:	9802      	ldr	r0, [sp, #8]
 80150a4:	f000 fa95 	bl	80155d2 <_Bfree>
 80150a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80150aa:	2300      	movs	r3, #0
 80150ac:	6013      	str	r3, [r2, #0]
 80150ae:	27a3      	movs	r7, #163	; 0xa3
 80150b0:	e793      	b.n	8014fda <__gethex+0x110>
 80150b2:	3101      	adds	r1, #1
 80150b4:	105b      	asrs	r3, r3, #1
 80150b6:	e7b0      	b.n	801501a <__gethex+0x150>
 80150b8:	1e73      	subs	r3, r6, #1
 80150ba:	9305      	str	r3, [sp, #20]
 80150bc:	9a07      	ldr	r2, [sp, #28]
 80150be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80150c2:	4293      	cmp	r3, r2
 80150c4:	d018      	beq.n	80150f8 <__gethex+0x22e>
 80150c6:	f1bb 0f20 	cmp.w	fp, #32
 80150ca:	d107      	bne.n	80150dc <__gethex+0x212>
 80150cc:	9b04      	ldr	r3, [sp, #16]
 80150ce:	f8c3 a000 	str.w	sl, [r3]
 80150d2:	3304      	adds	r3, #4
 80150d4:	f04f 0a00 	mov.w	sl, #0
 80150d8:	9304      	str	r3, [sp, #16]
 80150da:	46d3      	mov	fp, sl
 80150dc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80150e0:	f7ff fede 	bl	8014ea0 <__hexdig_fun>
 80150e4:	f000 000f 	and.w	r0, r0, #15
 80150e8:	fa00 f00b 	lsl.w	r0, r0, fp
 80150ec:	ea4a 0a00 	orr.w	sl, sl, r0
 80150f0:	f10b 0b04 	add.w	fp, fp, #4
 80150f4:	9b05      	ldr	r3, [sp, #20]
 80150f6:	e00d      	b.n	8015114 <__gethex+0x24a>
 80150f8:	9b05      	ldr	r3, [sp, #20]
 80150fa:	9a08      	ldr	r2, [sp, #32]
 80150fc:	4413      	add	r3, r2
 80150fe:	42bb      	cmp	r3, r7
 8015100:	d3e1      	bcc.n	80150c6 <__gethex+0x1fc>
 8015102:	4618      	mov	r0, r3
 8015104:	9a01      	ldr	r2, [sp, #4]
 8015106:	9903      	ldr	r1, [sp, #12]
 8015108:	9309      	str	r3, [sp, #36]	; 0x24
 801510a:	f000 fffb 	bl	8016104 <strncmp>
 801510e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015110:	2800      	cmp	r0, #0
 8015112:	d1d8      	bne.n	80150c6 <__gethex+0x1fc>
 8015114:	461e      	mov	r6, r3
 8015116:	e791      	b.n	801503c <__gethex+0x172>
 8015118:	1eb9      	subs	r1, r7, #2
 801511a:	4628      	mov	r0, r5
 801511c:	f000 fe02 	bl	8015d24 <__any_on>
 8015120:	2800      	cmp	r0, #0
 8015122:	d0b2      	beq.n	801508a <__gethex+0x1c0>
 8015124:	f04f 0a03 	mov.w	sl, #3
 8015128:	e7b1      	b.n	801508e <__gethex+0x1c4>
 801512a:	da09      	bge.n	8015140 <__gethex+0x276>
 801512c:	1bf7      	subs	r7, r6, r7
 801512e:	4629      	mov	r1, r5
 8015130:	463a      	mov	r2, r7
 8015132:	9802      	ldr	r0, [sp, #8]
 8015134:	f000 fc18 	bl	8015968 <__lshift>
 8015138:	1be4      	subs	r4, r4, r7
 801513a:	4605      	mov	r5, r0
 801513c:	f100 0914 	add.w	r9, r0, #20
 8015140:	f04f 0a00 	mov.w	sl, #0
 8015144:	e7a8      	b.n	8015098 <__gethex+0x1ce>
 8015146:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801514a:	42a0      	cmp	r0, r4
 801514c:	dd6a      	ble.n	8015224 <__gethex+0x35a>
 801514e:	1b04      	subs	r4, r0, r4
 8015150:	42a6      	cmp	r6, r4
 8015152:	dc2e      	bgt.n	80151b2 <__gethex+0x2e8>
 8015154:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015158:	2b02      	cmp	r3, #2
 801515a:	d022      	beq.n	80151a2 <__gethex+0x2d8>
 801515c:	2b03      	cmp	r3, #3
 801515e:	d024      	beq.n	80151aa <__gethex+0x2e0>
 8015160:	2b01      	cmp	r3, #1
 8015162:	d115      	bne.n	8015190 <__gethex+0x2c6>
 8015164:	42a6      	cmp	r6, r4
 8015166:	d113      	bne.n	8015190 <__gethex+0x2c6>
 8015168:	2e01      	cmp	r6, #1
 801516a:	dc0b      	bgt.n	8015184 <__gethex+0x2ba>
 801516c:	9a06      	ldr	r2, [sp, #24]
 801516e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015172:	6013      	str	r3, [r2, #0]
 8015174:	2301      	movs	r3, #1
 8015176:	612b      	str	r3, [r5, #16]
 8015178:	f8c9 3000 	str.w	r3, [r9]
 801517c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801517e:	2762      	movs	r7, #98	; 0x62
 8015180:	601d      	str	r5, [r3, #0]
 8015182:	e72a      	b.n	8014fda <__gethex+0x110>
 8015184:	1e71      	subs	r1, r6, #1
 8015186:	4628      	mov	r0, r5
 8015188:	f000 fdcc 	bl	8015d24 <__any_on>
 801518c:	2800      	cmp	r0, #0
 801518e:	d1ed      	bne.n	801516c <__gethex+0x2a2>
 8015190:	4629      	mov	r1, r5
 8015192:	9802      	ldr	r0, [sp, #8]
 8015194:	f000 fa1d 	bl	80155d2 <_Bfree>
 8015198:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801519a:	2300      	movs	r3, #0
 801519c:	6013      	str	r3, [r2, #0]
 801519e:	2750      	movs	r7, #80	; 0x50
 80151a0:	e71b      	b.n	8014fda <__gethex+0x110>
 80151a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d0e1      	beq.n	801516c <__gethex+0x2a2>
 80151a8:	e7f2      	b.n	8015190 <__gethex+0x2c6>
 80151aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d1dd      	bne.n	801516c <__gethex+0x2a2>
 80151b0:	e7ee      	b.n	8015190 <__gethex+0x2c6>
 80151b2:	1e67      	subs	r7, r4, #1
 80151b4:	f1ba 0f00 	cmp.w	sl, #0
 80151b8:	d131      	bne.n	801521e <__gethex+0x354>
 80151ba:	b127      	cbz	r7, 80151c6 <__gethex+0x2fc>
 80151bc:	4639      	mov	r1, r7
 80151be:	4628      	mov	r0, r5
 80151c0:	f000 fdb0 	bl	8015d24 <__any_on>
 80151c4:	4682      	mov	sl, r0
 80151c6:	117a      	asrs	r2, r7, #5
 80151c8:	2301      	movs	r3, #1
 80151ca:	f007 071f 	and.w	r7, r7, #31
 80151ce:	fa03 f707 	lsl.w	r7, r3, r7
 80151d2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80151d6:	4621      	mov	r1, r4
 80151d8:	421f      	tst	r7, r3
 80151da:	4628      	mov	r0, r5
 80151dc:	bf18      	it	ne
 80151de:	f04a 0a02 	orrne.w	sl, sl, #2
 80151e2:	1b36      	subs	r6, r6, r4
 80151e4:	f7ff fe22 	bl	8014e2c <rshift>
 80151e8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80151ec:	2702      	movs	r7, #2
 80151ee:	f1ba 0f00 	cmp.w	sl, #0
 80151f2:	d048      	beq.n	8015286 <__gethex+0x3bc>
 80151f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80151f8:	2b02      	cmp	r3, #2
 80151fa:	d015      	beq.n	8015228 <__gethex+0x35e>
 80151fc:	2b03      	cmp	r3, #3
 80151fe:	d017      	beq.n	8015230 <__gethex+0x366>
 8015200:	2b01      	cmp	r3, #1
 8015202:	d109      	bne.n	8015218 <__gethex+0x34e>
 8015204:	f01a 0f02 	tst.w	sl, #2
 8015208:	d006      	beq.n	8015218 <__gethex+0x34e>
 801520a:	f8d9 3000 	ldr.w	r3, [r9]
 801520e:	ea4a 0a03 	orr.w	sl, sl, r3
 8015212:	f01a 0f01 	tst.w	sl, #1
 8015216:	d10e      	bne.n	8015236 <__gethex+0x36c>
 8015218:	f047 0710 	orr.w	r7, r7, #16
 801521c:	e033      	b.n	8015286 <__gethex+0x3bc>
 801521e:	f04f 0a01 	mov.w	sl, #1
 8015222:	e7d0      	b.n	80151c6 <__gethex+0x2fc>
 8015224:	2701      	movs	r7, #1
 8015226:	e7e2      	b.n	80151ee <__gethex+0x324>
 8015228:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801522a:	f1c3 0301 	rsb	r3, r3, #1
 801522e:	9315      	str	r3, [sp, #84]	; 0x54
 8015230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015232:	2b00      	cmp	r3, #0
 8015234:	d0f0      	beq.n	8015218 <__gethex+0x34e>
 8015236:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801523a:	f105 0314 	add.w	r3, r5, #20
 801523e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015242:	eb03 010a 	add.w	r1, r3, sl
 8015246:	f04f 0c00 	mov.w	ip, #0
 801524a:	4618      	mov	r0, r3
 801524c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015250:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015254:	d01c      	beq.n	8015290 <__gethex+0x3c6>
 8015256:	3201      	adds	r2, #1
 8015258:	6002      	str	r2, [r0, #0]
 801525a:	2f02      	cmp	r7, #2
 801525c:	f105 0314 	add.w	r3, r5, #20
 8015260:	d138      	bne.n	80152d4 <__gethex+0x40a>
 8015262:	f8d8 2000 	ldr.w	r2, [r8]
 8015266:	3a01      	subs	r2, #1
 8015268:	42b2      	cmp	r2, r6
 801526a:	d10a      	bne.n	8015282 <__gethex+0x3b8>
 801526c:	1171      	asrs	r1, r6, #5
 801526e:	2201      	movs	r2, #1
 8015270:	f006 061f 	and.w	r6, r6, #31
 8015274:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015278:	fa02 f606 	lsl.w	r6, r2, r6
 801527c:	421e      	tst	r6, r3
 801527e:	bf18      	it	ne
 8015280:	4617      	movne	r7, r2
 8015282:	f047 0720 	orr.w	r7, r7, #32
 8015286:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015288:	601d      	str	r5, [r3, #0]
 801528a:	9b06      	ldr	r3, [sp, #24]
 801528c:	601c      	str	r4, [r3, #0]
 801528e:	e6a4      	b.n	8014fda <__gethex+0x110>
 8015290:	4299      	cmp	r1, r3
 8015292:	f843 cc04 	str.w	ip, [r3, #-4]
 8015296:	d8d8      	bhi.n	801524a <__gethex+0x380>
 8015298:	68ab      	ldr	r3, [r5, #8]
 801529a:	4599      	cmp	r9, r3
 801529c:	db12      	blt.n	80152c4 <__gethex+0x3fa>
 801529e:	6869      	ldr	r1, [r5, #4]
 80152a0:	9802      	ldr	r0, [sp, #8]
 80152a2:	3101      	adds	r1, #1
 80152a4:	f000 f961 	bl	801556a <_Balloc>
 80152a8:	692a      	ldr	r2, [r5, #16]
 80152aa:	3202      	adds	r2, #2
 80152ac:	f105 010c 	add.w	r1, r5, #12
 80152b0:	4683      	mov	fp, r0
 80152b2:	0092      	lsls	r2, r2, #2
 80152b4:	300c      	adds	r0, #12
 80152b6:	f7fc f8f1 	bl	801149c <memcpy>
 80152ba:	4629      	mov	r1, r5
 80152bc:	9802      	ldr	r0, [sp, #8]
 80152be:	f000 f988 	bl	80155d2 <_Bfree>
 80152c2:	465d      	mov	r5, fp
 80152c4:	692b      	ldr	r3, [r5, #16]
 80152c6:	1c5a      	adds	r2, r3, #1
 80152c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80152cc:	612a      	str	r2, [r5, #16]
 80152ce:	2201      	movs	r2, #1
 80152d0:	615a      	str	r2, [r3, #20]
 80152d2:	e7c2      	b.n	801525a <__gethex+0x390>
 80152d4:	692a      	ldr	r2, [r5, #16]
 80152d6:	454a      	cmp	r2, r9
 80152d8:	dd0b      	ble.n	80152f2 <__gethex+0x428>
 80152da:	2101      	movs	r1, #1
 80152dc:	4628      	mov	r0, r5
 80152de:	f7ff fda5 	bl	8014e2c <rshift>
 80152e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80152e6:	3401      	adds	r4, #1
 80152e8:	42a3      	cmp	r3, r4
 80152ea:	f6ff aed9 	blt.w	80150a0 <__gethex+0x1d6>
 80152ee:	2701      	movs	r7, #1
 80152f0:	e7c7      	b.n	8015282 <__gethex+0x3b8>
 80152f2:	f016 061f 	ands.w	r6, r6, #31
 80152f6:	d0fa      	beq.n	80152ee <__gethex+0x424>
 80152f8:	449a      	add	sl, r3
 80152fa:	f1c6 0620 	rsb	r6, r6, #32
 80152fe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015302:	f000 f9f6 	bl	80156f2 <__hi0bits>
 8015306:	42b0      	cmp	r0, r6
 8015308:	dbe7      	blt.n	80152da <__gethex+0x410>
 801530a:	e7f0      	b.n	80152ee <__gethex+0x424>

0801530c <L_shift>:
 801530c:	f1c2 0208 	rsb	r2, r2, #8
 8015310:	0092      	lsls	r2, r2, #2
 8015312:	b570      	push	{r4, r5, r6, lr}
 8015314:	f1c2 0620 	rsb	r6, r2, #32
 8015318:	6843      	ldr	r3, [r0, #4]
 801531a:	6804      	ldr	r4, [r0, #0]
 801531c:	fa03 f506 	lsl.w	r5, r3, r6
 8015320:	432c      	orrs	r4, r5
 8015322:	40d3      	lsrs	r3, r2
 8015324:	6004      	str	r4, [r0, #0]
 8015326:	f840 3f04 	str.w	r3, [r0, #4]!
 801532a:	4288      	cmp	r0, r1
 801532c:	d3f4      	bcc.n	8015318 <L_shift+0xc>
 801532e:	bd70      	pop	{r4, r5, r6, pc}

08015330 <__match>:
 8015330:	b530      	push	{r4, r5, lr}
 8015332:	6803      	ldr	r3, [r0, #0]
 8015334:	3301      	adds	r3, #1
 8015336:	f811 4b01 	ldrb.w	r4, [r1], #1
 801533a:	b914      	cbnz	r4, 8015342 <__match+0x12>
 801533c:	6003      	str	r3, [r0, #0]
 801533e:	2001      	movs	r0, #1
 8015340:	bd30      	pop	{r4, r5, pc}
 8015342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015346:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801534a:	2d19      	cmp	r5, #25
 801534c:	bf98      	it	ls
 801534e:	3220      	addls	r2, #32
 8015350:	42a2      	cmp	r2, r4
 8015352:	d0f0      	beq.n	8015336 <__match+0x6>
 8015354:	2000      	movs	r0, #0
 8015356:	e7f3      	b.n	8015340 <__match+0x10>

08015358 <__hexnan>:
 8015358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801535c:	680b      	ldr	r3, [r1, #0]
 801535e:	6801      	ldr	r1, [r0, #0]
 8015360:	115f      	asrs	r7, r3, #5
 8015362:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015366:	f013 031f 	ands.w	r3, r3, #31
 801536a:	b087      	sub	sp, #28
 801536c:	bf18      	it	ne
 801536e:	3704      	addne	r7, #4
 8015370:	2500      	movs	r5, #0
 8015372:	1f3e      	subs	r6, r7, #4
 8015374:	4682      	mov	sl, r0
 8015376:	4690      	mov	r8, r2
 8015378:	9301      	str	r3, [sp, #4]
 801537a:	f847 5c04 	str.w	r5, [r7, #-4]
 801537e:	46b1      	mov	r9, r6
 8015380:	4634      	mov	r4, r6
 8015382:	9502      	str	r5, [sp, #8]
 8015384:	46ab      	mov	fp, r5
 8015386:	784a      	ldrb	r2, [r1, #1]
 8015388:	1c4b      	adds	r3, r1, #1
 801538a:	9303      	str	r3, [sp, #12]
 801538c:	b342      	cbz	r2, 80153e0 <__hexnan+0x88>
 801538e:	4610      	mov	r0, r2
 8015390:	9105      	str	r1, [sp, #20]
 8015392:	9204      	str	r2, [sp, #16]
 8015394:	f7ff fd84 	bl	8014ea0 <__hexdig_fun>
 8015398:	2800      	cmp	r0, #0
 801539a:	d143      	bne.n	8015424 <__hexnan+0xcc>
 801539c:	9a04      	ldr	r2, [sp, #16]
 801539e:	9905      	ldr	r1, [sp, #20]
 80153a0:	2a20      	cmp	r2, #32
 80153a2:	d818      	bhi.n	80153d6 <__hexnan+0x7e>
 80153a4:	9b02      	ldr	r3, [sp, #8]
 80153a6:	459b      	cmp	fp, r3
 80153a8:	dd13      	ble.n	80153d2 <__hexnan+0x7a>
 80153aa:	454c      	cmp	r4, r9
 80153ac:	d206      	bcs.n	80153bc <__hexnan+0x64>
 80153ae:	2d07      	cmp	r5, #7
 80153b0:	dc04      	bgt.n	80153bc <__hexnan+0x64>
 80153b2:	462a      	mov	r2, r5
 80153b4:	4649      	mov	r1, r9
 80153b6:	4620      	mov	r0, r4
 80153b8:	f7ff ffa8 	bl	801530c <L_shift>
 80153bc:	4544      	cmp	r4, r8
 80153be:	d944      	bls.n	801544a <__hexnan+0xf2>
 80153c0:	2300      	movs	r3, #0
 80153c2:	f1a4 0904 	sub.w	r9, r4, #4
 80153c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80153ca:	f8cd b008 	str.w	fp, [sp, #8]
 80153ce:	464c      	mov	r4, r9
 80153d0:	461d      	mov	r5, r3
 80153d2:	9903      	ldr	r1, [sp, #12]
 80153d4:	e7d7      	b.n	8015386 <__hexnan+0x2e>
 80153d6:	2a29      	cmp	r2, #41	; 0x29
 80153d8:	d14a      	bne.n	8015470 <__hexnan+0x118>
 80153da:	3102      	adds	r1, #2
 80153dc:	f8ca 1000 	str.w	r1, [sl]
 80153e0:	f1bb 0f00 	cmp.w	fp, #0
 80153e4:	d044      	beq.n	8015470 <__hexnan+0x118>
 80153e6:	454c      	cmp	r4, r9
 80153e8:	d206      	bcs.n	80153f8 <__hexnan+0xa0>
 80153ea:	2d07      	cmp	r5, #7
 80153ec:	dc04      	bgt.n	80153f8 <__hexnan+0xa0>
 80153ee:	462a      	mov	r2, r5
 80153f0:	4649      	mov	r1, r9
 80153f2:	4620      	mov	r0, r4
 80153f4:	f7ff ff8a 	bl	801530c <L_shift>
 80153f8:	4544      	cmp	r4, r8
 80153fa:	d928      	bls.n	801544e <__hexnan+0xf6>
 80153fc:	4643      	mov	r3, r8
 80153fe:	f854 2b04 	ldr.w	r2, [r4], #4
 8015402:	f843 2b04 	str.w	r2, [r3], #4
 8015406:	42a6      	cmp	r6, r4
 8015408:	d2f9      	bcs.n	80153fe <__hexnan+0xa6>
 801540a:	2200      	movs	r2, #0
 801540c:	f843 2b04 	str.w	r2, [r3], #4
 8015410:	429e      	cmp	r6, r3
 8015412:	d2fb      	bcs.n	801540c <__hexnan+0xb4>
 8015414:	6833      	ldr	r3, [r6, #0]
 8015416:	b91b      	cbnz	r3, 8015420 <__hexnan+0xc8>
 8015418:	4546      	cmp	r6, r8
 801541a:	d127      	bne.n	801546c <__hexnan+0x114>
 801541c:	2301      	movs	r3, #1
 801541e:	6033      	str	r3, [r6, #0]
 8015420:	2005      	movs	r0, #5
 8015422:	e026      	b.n	8015472 <__hexnan+0x11a>
 8015424:	3501      	adds	r5, #1
 8015426:	2d08      	cmp	r5, #8
 8015428:	f10b 0b01 	add.w	fp, fp, #1
 801542c:	dd06      	ble.n	801543c <__hexnan+0xe4>
 801542e:	4544      	cmp	r4, r8
 8015430:	d9cf      	bls.n	80153d2 <__hexnan+0x7a>
 8015432:	2300      	movs	r3, #0
 8015434:	f844 3c04 	str.w	r3, [r4, #-4]
 8015438:	2501      	movs	r5, #1
 801543a:	3c04      	subs	r4, #4
 801543c:	6822      	ldr	r2, [r4, #0]
 801543e:	f000 000f 	and.w	r0, r0, #15
 8015442:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015446:	6020      	str	r0, [r4, #0]
 8015448:	e7c3      	b.n	80153d2 <__hexnan+0x7a>
 801544a:	2508      	movs	r5, #8
 801544c:	e7c1      	b.n	80153d2 <__hexnan+0x7a>
 801544e:	9b01      	ldr	r3, [sp, #4]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d0df      	beq.n	8015414 <__hexnan+0xbc>
 8015454:	f04f 32ff 	mov.w	r2, #4294967295
 8015458:	f1c3 0320 	rsb	r3, r3, #32
 801545c:	fa22 f303 	lsr.w	r3, r2, r3
 8015460:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015464:	401a      	ands	r2, r3
 8015466:	f847 2c04 	str.w	r2, [r7, #-4]
 801546a:	e7d3      	b.n	8015414 <__hexnan+0xbc>
 801546c:	3e04      	subs	r6, #4
 801546e:	e7d1      	b.n	8015414 <__hexnan+0xbc>
 8015470:	2004      	movs	r0, #4
 8015472:	b007      	add	sp, #28
 8015474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015478 <_isatty_r>:
 8015478:	b538      	push	{r3, r4, r5, lr}
 801547a:	4c06      	ldr	r4, [pc, #24]	; (8015494 <_isatty_r+0x1c>)
 801547c:	2300      	movs	r3, #0
 801547e:	4605      	mov	r5, r0
 8015480:	4608      	mov	r0, r1
 8015482:	6023      	str	r3, [r4, #0]
 8015484:	f7f8 f828 	bl	800d4d8 <_isatty>
 8015488:	1c43      	adds	r3, r0, #1
 801548a:	d102      	bne.n	8015492 <_isatty_r+0x1a>
 801548c:	6823      	ldr	r3, [r4, #0]
 801548e:	b103      	cbz	r3, 8015492 <_isatty_r+0x1a>
 8015490:	602b      	str	r3, [r5, #0]
 8015492:	bd38      	pop	{r3, r4, r5, pc}
 8015494:	200011fc 	.word	0x200011fc

08015498 <__locale_ctype_ptr_l>:
 8015498:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801549c:	4770      	bx	lr
	...

080154a0 <__locale_ctype_ptr>:
 80154a0:	4b04      	ldr	r3, [pc, #16]	; (80154b4 <__locale_ctype_ptr+0x14>)
 80154a2:	4a05      	ldr	r2, [pc, #20]	; (80154b8 <__locale_ctype_ptr+0x18>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	6a1b      	ldr	r3, [r3, #32]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	bf08      	it	eq
 80154ac:	4613      	moveq	r3, r2
 80154ae:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80154b2:	4770      	bx	lr
 80154b4:	20000038 	.word	0x20000038
 80154b8:	2000009c 	.word	0x2000009c

080154bc <__localeconv_l>:
 80154bc:	30f0      	adds	r0, #240	; 0xf0
 80154be:	4770      	bx	lr

080154c0 <_localeconv_r>:
 80154c0:	4b04      	ldr	r3, [pc, #16]	; (80154d4 <_localeconv_r+0x14>)
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	6a18      	ldr	r0, [r3, #32]
 80154c6:	4b04      	ldr	r3, [pc, #16]	; (80154d8 <_localeconv_r+0x18>)
 80154c8:	2800      	cmp	r0, #0
 80154ca:	bf08      	it	eq
 80154cc:	4618      	moveq	r0, r3
 80154ce:	30f0      	adds	r0, #240	; 0xf0
 80154d0:	4770      	bx	lr
 80154d2:	bf00      	nop
 80154d4:	20000038 	.word	0x20000038
 80154d8:	2000009c 	.word	0x2000009c

080154dc <_lseek_r>:
 80154dc:	b538      	push	{r3, r4, r5, lr}
 80154de:	4c07      	ldr	r4, [pc, #28]	; (80154fc <_lseek_r+0x20>)
 80154e0:	4605      	mov	r5, r0
 80154e2:	4608      	mov	r0, r1
 80154e4:	4611      	mov	r1, r2
 80154e6:	2200      	movs	r2, #0
 80154e8:	6022      	str	r2, [r4, #0]
 80154ea:	461a      	mov	r2, r3
 80154ec:	f7f7 fff6 	bl	800d4dc <_lseek>
 80154f0:	1c43      	adds	r3, r0, #1
 80154f2:	d102      	bne.n	80154fa <_lseek_r+0x1e>
 80154f4:	6823      	ldr	r3, [r4, #0]
 80154f6:	b103      	cbz	r3, 80154fa <_lseek_r+0x1e>
 80154f8:	602b      	str	r3, [r5, #0]
 80154fa:	bd38      	pop	{r3, r4, r5, pc}
 80154fc:	200011fc 	.word	0x200011fc

08015500 <malloc>:
 8015500:	4b02      	ldr	r3, [pc, #8]	; (801550c <malloc+0xc>)
 8015502:	4601      	mov	r1, r0
 8015504:	6818      	ldr	r0, [r3, #0]
 8015506:	f7fc b82b 	b.w	8011560 <_malloc_r>
 801550a:	bf00      	nop
 801550c:	20000038 	.word	0x20000038

08015510 <__ascii_mbtowc>:
 8015510:	b082      	sub	sp, #8
 8015512:	b901      	cbnz	r1, 8015516 <__ascii_mbtowc+0x6>
 8015514:	a901      	add	r1, sp, #4
 8015516:	b142      	cbz	r2, 801552a <__ascii_mbtowc+0x1a>
 8015518:	b14b      	cbz	r3, 801552e <__ascii_mbtowc+0x1e>
 801551a:	7813      	ldrb	r3, [r2, #0]
 801551c:	600b      	str	r3, [r1, #0]
 801551e:	7812      	ldrb	r2, [r2, #0]
 8015520:	1c10      	adds	r0, r2, #0
 8015522:	bf18      	it	ne
 8015524:	2001      	movne	r0, #1
 8015526:	b002      	add	sp, #8
 8015528:	4770      	bx	lr
 801552a:	4610      	mov	r0, r2
 801552c:	e7fb      	b.n	8015526 <__ascii_mbtowc+0x16>
 801552e:	f06f 0001 	mvn.w	r0, #1
 8015532:	e7f8      	b.n	8015526 <__ascii_mbtowc+0x16>

08015534 <memmove>:
 8015534:	4288      	cmp	r0, r1
 8015536:	b510      	push	{r4, lr}
 8015538:	eb01 0302 	add.w	r3, r1, r2
 801553c:	d807      	bhi.n	801554e <memmove+0x1a>
 801553e:	1e42      	subs	r2, r0, #1
 8015540:	4299      	cmp	r1, r3
 8015542:	d00a      	beq.n	801555a <memmove+0x26>
 8015544:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015548:	f802 4f01 	strb.w	r4, [r2, #1]!
 801554c:	e7f8      	b.n	8015540 <memmove+0xc>
 801554e:	4283      	cmp	r3, r0
 8015550:	d9f5      	bls.n	801553e <memmove+0xa>
 8015552:	1881      	adds	r1, r0, r2
 8015554:	1ad2      	subs	r2, r2, r3
 8015556:	42d3      	cmn	r3, r2
 8015558:	d100      	bne.n	801555c <memmove+0x28>
 801555a:	bd10      	pop	{r4, pc}
 801555c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015560:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015564:	e7f7      	b.n	8015556 <memmove+0x22>

08015566 <__malloc_lock>:
 8015566:	4770      	bx	lr

08015568 <__malloc_unlock>:
 8015568:	4770      	bx	lr

0801556a <_Balloc>:
 801556a:	b570      	push	{r4, r5, r6, lr}
 801556c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801556e:	4604      	mov	r4, r0
 8015570:	460e      	mov	r6, r1
 8015572:	b93d      	cbnz	r5, 8015584 <_Balloc+0x1a>
 8015574:	2010      	movs	r0, #16
 8015576:	f7ff ffc3 	bl	8015500 <malloc>
 801557a:	6260      	str	r0, [r4, #36]	; 0x24
 801557c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015580:	6005      	str	r5, [r0, #0]
 8015582:	60c5      	str	r5, [r0, #12]
 8015584:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015586:	68eb      	ldr	r3, [r5, #12]
 8015588:	b183      	cbz	r3, 80155ac <_Balloc+0x42>
 801558a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801558c:	68db      	ldr	r3, [r3, #12]
 801558e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015592:	b9b8      	cbnz	r0, 80155c4 <_Balloc+0x5a>
 8015594:	2101      	movs	r1, #1
 8015596:	fa01 f506 	lsl.w	r5, r1, r6
 801559a:	1d6a      	adds	r2, r5, #5
 801559c:	0092      	lsls	r2, r2, #2
 801559e:	4620      	mov	r0, r4
 80155a0:	f000 fbe1 	bl	8015d66 <_calloc_r>
 80155a4:	b160      	cbz	r0, 80155c0 <_Balloc+0x56>
 80155a6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80155aa:	e00e      	b.n	80155ca <_Balloc+0x60>
 80155ac:	2221      	movs	r2, #33	; 0x21
 80155ae:	2104      	movs	r1, #4
 80155b0:	4620      	mov	r0, r4
 80155b2:	f000 fbd8 	bl	8015d66 <_calloc_r>
 80155b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155b8:	60e8      	str	r0, [r5, #12]
 80155ba:	68db      	ldr	r3, [r3, #12]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d1e4      	bne.n	801558a <_Balloc+0x20>
 80155c0:	2000      	movs	r0, #0
 80155c2:	bd70      	pop	{r4, r5, r6, pc}
 80155c4:	6802      	ldr	r2, [r0, #0]
 80155c6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80155ca:	2300      	movs	r3, #0
 80155cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80155d0:	e7f7      	b.n	80155c2 <_Balloc+0x58>

080155d2 <_Bfree>:
 80155d2:	b570      	push	{r4, r5, r6, lr}
 80155d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80155d6:	4606      	mov	r6, r0
 80155d8:	460d      	mov	r5, r1
 80155da:	b93c      	cbnz	r4, 80155ec <_Bfree+0x1a>
 80155dc:	2010      	movs	r0, #16
 80155de:	f7ff ff8f 	bl	8015500 <malloc>
 80155e2:	6270      	str	r0, [r6, #36]	; 0x24
 80155e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80155e8:	6004      	str	r4, [r0, #0]
 80155ea:	60c4      	str	r4, [r0, #12]
 80155ec:	b13d      	cbz	r5, 80155fe <_Bfree+0x2c>
 80155ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80155f0:	686a      	ldr	r2, [r5, #4]
 80155f2:	68db      	ldr	r3, [r3, #12]
 80155f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80155f8:	6029      	str	r1, [r5, #0]
 80155fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80155fe:	bd70      	pop	{r4, r5, r6, pc}

08015600 <__multadd>:
 8015600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015604:	690d      	ldr	r5, [r1, #16]
 8015606:	461f      	mov	r7, r3
 8015608:	4606      	mov	r6, r0
 801560a:	460c      	mov	r4, r1
 801560c:	f101 0c14 	add.w	ip, r1, #20
 8015610:	2300      	movs	r3, #0
 8015612:	f8dc 0000 	ldr.w	r0, [ip]
 8015616:	b281      	uxth	r1, r0
 8015618:	fb02 7101 	mla	r1, r2, r1, r7
 801561c:	0c0f      	lsrs	r7, r1, #16
 801561e:	0c00      	lsrs	r0, r0, #16
 8015620:	fb02 7000 	mla	r0, r2, r0, r7
 8015624:	b289      	uxth	r1, r1
 8015626:	3301      	adds	r3, #1
 8015628:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801562c:	429d      	cmp	r5, r3
 801562e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015632:	f84c 1b04 	str.w	r1, [ip], #4
 8015636:	dcec      	bgt.n	8015612 <__multadd+0x12>
 8015638:	b1d7      	cbz	r7, 8015670 <__multadd+0x70>
 801563a:	68a3      	ldr	r3, [r4, #8]
 801563c:	42ab      	cmp	r3, r5
 801563e:	dc12      	bgt.n	8015666 <__multadd+0x66>
 8015640:	6861      	ldr	r1, [r4, #4]
 8015642:	4630      	mov	r0, r6
 8015644:	3101      	adds	r1, #1
 8015646:	f7ff ff90 	bl	801556a <_Balloc>
 801564a:	6922      	ldr	r2, [r4, #16]
 801564c:	3202      	adds	r2, #2
 801564e:	f104 010c 	add.w	r1, r4, #12
 8015652:	4680      	mov	r8, r0
 8015654:	0092      	lsls	r2, r2, #2
 8015656:	300c      	adds	r0, #12
 8015658:	f7fb ff20 	bl	801149c <memcpy>
 801565c:	4621      	mov	r1, r4
 801565e:	4630      	mov	r0, r6
 8015660:	f7ff ffb7 	bl	80155d2 <_Bfree>
 8015664:	4644      	mov	r4, r8
 8015666:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801566a:	3501      	adds	r5, #1
 801566c:	615f      	str	r7, [r3, #20]
 801566e:	6125      	str	r5, [r4, #16]
 8015670:	4620      	mov	r0, r4
 8015672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015676 <__s2b>:
 8015676:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801567a:	460c      	mov	r4, r1
 801567c:	4615      	mov	r5, r2
 801567e:	461f      	mov	r7, r3
 8015680:	2209      	movs	r2, #9
 8015682:	3308      	adds	r3, #8
 8015684:	4606      	mov	r6, r0
 8015686:	fb93 f3f2 	sdiv	r3, r3, r2
 801568a:	2100      	movs	r1, #0
 801568c:	2201      	movs	r2, #1
 801568e:	429a      	cmp	r2, r3
 8015690:	db20      	blt.n	80156d4 <__s2b+0x5e>
 8015692:	4630      	mov	r0, r6
 8015694:	f7ff ff69 	bl	801556a <_Balloc>
 8015698:	9b08      	ldr	r3, [sp, #32]
 801569a:	6143      	str	r3, [r0, #20]
 801569c:	2d09      	cmp	r5, #9
 801569e:	f04f 0301 	mov.w	r3, #1
 80156a2:	6103      	str	r3, [r0, #16]
 80156a4:	dd19      	ble.n	80156da <__s2b+0x64>
 80156a6:	f104 0809 	add.w	r8, r4, #9
 80156aa:	46c1      	mov	r9, r8
 80156ac:	442c      	add	r4, r5
 80156ae:	f819 3b01 	ldrb.w	r3, [r9], #1
 80156b2:	4601      	mov	r1, r0
 80156b4:	3b30      	subs	r3, #48	; 0x30
 80156b6:	220a      	movs	r2, #10
 80156b8:	4630      	mov	r0, r6
 80156ba:	f7ff ffa1 	bl	8015600 <__multadd>
 80156be:	45a1      	cmp	r9, r4
 80156c0:	d1f5      	bne.n	80156ae <__s2b+0x38>
 80156c2:	eb08 0405 	add.w	r4, r8, r5
 80156c6:	3c08      	subs	r4, #8
 80156c8:	1b2d      	subs	r5, r5, r4
 80156ca:	1963      	adds	r3, r4, r5
 80156cc:	42bb      	cmp	r3, r7
 80156ce:	db07      	blt.n	80156e0 <__s2b+0x6a>
 80156d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156d4:	0052      	lsls	r2, r2, #1
 80156d6:	3101      	adds	r1, #1
 80156d8:	e7d9      	b.n	801568e <__s2b+0x18>
 80156da:	340a      	adds	r4, #10
 80156dc:	2509      	movs	r5, #9
 80156de:	e7f3      	b.n	80156c8 <__s2b+0x52>
 80156e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80156e4:	4601      	mov	r1, r0
 80156e6:	3b30      	subs	r3, #48	; 0x30
 80156e8:	220a      	movs	r2, #10
 80156ea:	4630      	mov	r0, r6
 80156ec:	f7ff ff88 	bl	8015600 <__multadd>
 80156f0:	e7eb      	b.n	80156ca <__s2b+0x54>

080156f2 <__hi0bits>:
 80156f2:	0c02      	lsrs	r2, r0, #16
 80156f4:	0412      	lsls	r2, r2, #16
 80156f6:	4603      	mov	r3, r0
 80156f8:	b9b2      	cbnz	r2, 8015728 <__hi0bits+0x36>
 80156fa:	0403      	lsls	r3, r0, #16
 80156fc:	2010      	movs	r0, #16
 80156fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015702:	bf04      	itt	eq
 8015704:	021b      	lsleq	r3, r3, #8
 8015706:	3008      	addeq	r0, #8
 8015708:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801570c:	bf04      	itt	eq
 801570e:	011b      	lsleq	r3, r3, #4
 8015710:	3004      	addeq	r0, #4
 8015712:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015716:	bf04      	itt	eq
 8015718:	009b      	lsleq	r3, r3, #2
 801571a:	3002      	addeq	r0, #2
 801571c:	2b00      	cmp	r3, #0
 801571e:	db06      	blt.n	801572e <__hi0bits+0x3c>
 8015720:	005b      	lsls	r3, r3, #1
 8015722:	d503      	bpl.n	801572c <__hi0bits+0x3a>
 8015724:	3001      	adds	r0, #1
 8015726:	4770      	bx	lr
 8015728:	2000      	movs	r0, #0
 801572a:	e7e8      	b.n	80156fe <__hi0bits+0xc>
 801572c:	2020      	movs	r0, #32
 801572e:	4770      	bx	lr

08015730 <__lo0bits>:
 8015730:	6803      	ldr	r3, [r0, #0]
 8015732:	f013 0207 	ands.w	r2, r3, #7
 8015736:	4601      	mov	r1, r0
 8015738:	d00b      	beq.n	8015752 <__lo0bits+0x22>
 801573a:	07da      	lsls	r2, r3, #31
 801573c:	d423      	bmi.n	8015786 <__lo0bits+0x56>
 801573e:	0798      	lsls	r0, r3, #30
 8015740:	bf49      	itett	mi
 8015742:	085b      	lsrmi	r3, r3, #1
 8015744:	089b      	lsrpl	r3, r3, #2
 8015746:	2001      	movmi	r0, #1
 8015748:	600b      	strmi	r3, [r1, #0]
 801574a:	bf5c      	itt	pl
 801574c:	600b      	strpl	r3, [r1, #0]
 801574e:	2002      	movpl	r0, #2
 8015750:	4770      	bx	lr
 8015752:	b298      	uxth	r0, r3
 8015754:	b9a8      	cbnz	r0, 8015782 <__lo0bits+0x52>
 8015756:	0c1b      	lsrs	r3, r3, #16
 8015758:	2010      	movs	r0, #16
 801575a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801575e:	bf04      	itt	eq
 8015760:	0a1b      	lsreq	r3, r3, #8
 8015762:	3008      	addeq	r0, #8
 8015764:	071a      	lsls	r2, r3, #28
 8015766:	bf04      	itt	eq
 8015768:	091b      	lsreq	r3, r3, #4
 801576a:	3004      	addeq	r0, #4
 801576c:	079a      	lsls	r2, r3, #30
 801576e:	bf04      	itt	eq
 8015770:	089b      	lsreq	r3, r3, #2
 8015772:	3002      	addeq	r0, #2
 8015774:	07da      	lsls	r2, r3, #31
 8015776:	d402      	bmi.n	801577e <__lo0bits+0x4e>
 8015778:	085b      	lsrs	r3, r3, #1
 801577a:	d006      	beq.n	801578a <__lo0bits+0x5a>
 801577c:	3001      	adds	r0, #1
 801577e:	600b      	str	r3, [r1, #0]
 8015780:	4770      	bx	lr
 8015782:	4610      	mov	r0, r2
 8015784:	e7e9      	b.n	801575a <__lo0bits+0x2a>
 8015786:	2000      	movs	r0, #0
 8015788:	4770      	bx	lr
 801578a:	2020      	movs	r0, #32
 801578c:	4770      	bx	lr

0801578e <__i2b>:
 801578e:	b510      	push	{r4, lr}
 8015790:	460c      	mov	r4, r1
 8015792:	2101      	movs	r1, #1
 8015794:	f7ff fee9 	bl	801556a <_Balloc>
 8015798:	2201      	movs	r2, #1
 801579a:	6144      	str	r4, [r0, #20]
 801579c:	6102      	str	r2, [r0, #16]
 801579e:	bd10      	pop	{r4, pc}

080157a0 <__multiply>:
 80157a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157a4:	4614      	mov	r4, r2
 80157a6:	690a      	ldr	r2, [r1, #16]
 80157a8:	6923      	ldr	r3, [r4, #16]
 80157aa:	429a      	cmp	r2, r3
 80157ac:	bfb8      	it	lt
 80157ae:	460b      	movlt	r3, r1
 80157b0:	4688      	mov	r8, r1
 80157b2:	bfbc      	itt	lt
 80157b4:	46a0      	movlt	r8, r4
 80157b6:	461c      	movlt	r4, r3
 80157b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80157bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80157c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80157c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80157c8:	eb07 0609 	add.w	r6, r7, r9
 80157cc:	42b3      	cmp	r3, r6
 80157ce:	bfb8      	it	lt
 80157d0:	3101      	addlt	r1, #1
 80157d2:	f7ff feca 	bl	801556a <_Balloc>
 80157d6:	f100 0514 	add.w	r5, r0, #20
 80157da:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80157de:	462b      	mov	r3, r5
 80157e0:	2200      	movs	r2, #0
 80157e2:	4573      	cmp	r3, lr
 80157e4:	d316      	bcc.n	8015814 <__multiply+0x74>
 80157e6:	f104 0214 	add.w	r2, r4, #20
 80157ea:	f108 0114 	add.w	r1, r8, #20
 80157ee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80157f2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80157f6:	9300      	str	r3, [sp, #0]
 80157f8:	9b00      	ldr	r3, [sp, #0]
 80157fa:	9201      	str	r2, [sp, #4]
 80157fc:	4293      	cmp	r3, r2
 80157fe:	d80c      	bhi.n	801581a <__multiply+0x7a>
 8015800:	2e00      	cmp	r6, #0
 8015802:	dd03      	ble.n	801580c <__multiply+0x6c>
 8015804:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015808:	2b00      	cmp	r3, #0
 801580a:	d05d      	beq.n	80158c8 <__multiply+0x128>
 801580c:	6106      	str	r6, [r0, #16]
 801580e:	b003      	add	sp, #12
 8015810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015814:	f843 2b04 	str.w	r2, [r3], #4
 8015818:	e7e3      	b.n	80157e2 <__multiply+0x42>
 801581a:	f8b2 b000 	ldrh.w	fp, [r2]
 801581e:	f1bb 0f00 	cmp.w	fp, #0
 8015822:	d023      	beq.n	801586c <__multiply+0xcc>
 8015824:	4689      	mov	r9, r1
 8015826:	46ac      	mov	ip, r5
 8015828:	f04f 0800 	mov.w	r8, #0
 801582c:	f859 4b04 	ldr.w	r4, [r9], #4
 8015830:	f8dc a000 	ldr.w	sl, [ip]
 8015834:	b2a3      	uxth	r3, r4
 8015836:	fa1f fa8a 	uxth.w	sl, sl
 801583a:	fb0b a303 	mla	r3, fp, r3, sl
 801583e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015842:	f8dc 4000 	ldr.w	r4, [ip]
 8015846:	4443      	add	r3, r8
 8015848:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801584c:	fb0b 840a 	mla	r4, fp, sl, r8
 8015850:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015854:	46e2      	mov	sl, ip
 8015856:	b29b      	uxth	r3, r3
 8015858:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801585c:	454f      	cmp	r7, r9
 801585e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015862:	f84a 3b04 	str.w	r3, [sl], #4
 8015866:	d82b      	bhi.n	80158c0 <__multiply+0x120>
 8015868:	f8cc 8004 	str.w	r8, [ip, #4]
 801586c:	9b01      	ldr	r3, [sp, #4]
 801586e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015872:	3204      	adds	r2, #4
 8015874:	f1ba 0f00 	cmp.w	sl, #0
 8015878:	d020      	beq.n	80158bc <__multiply+0x11c>
 801587a:	682b      	ldr	r3, [r5, #0]
 801587c:	4689      	mov	r9, r1
 801587e:	46a8      	mov	r8, r5
 8015880:	f04f 0b00 	mov.w	fp, #0
 8015884:	f8b9 c000 	ldrh.w	ip, [r9]
 8015888:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801588c:	fb0a 440c 	mla	r4, sl, ip, r4
 8015890:	445c      	add	r4, fp
 8015892:	46c4      	mov	ip, r8
 8015894:	b29b      	uxth	r3, r3
 8015896:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801589a:	f84c 3b04 	str.w	r3, [ip], #4
 801589e:	f859 3b04 	ldr.w	r3, [r9], #4
 80158a2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80158a6:	0c1b      	lsrs	r3, r3, #16
 80158a8:	fb0a b303 	mla	r3, sl, r3, fp
 80158ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80158b0:	454f      	cmp	r7, r9
 80158b2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80158b6:	d805      	bhi.n	80158c4 <__multiply+0x124>
 80158b8:	f8c8 3004 	str.w	r3, [r8, #4]
 80158bc:	3504      	adds	r5, #4
 80158be:	e79b      	b.n	80157f8 <__multiply+0x58>
 80158c0:	46d4      	mov	ip, sl
 80158c2:	e7b3      	b.n	801582c <__multiply+0x8c>
 80158c4:	46e0      	mov	r8, ip
 80158c6:	e7dd      	b.n	8015884 <__multiply+0xe4>
 80158c8:	3e01      	subs	r6, #1
 80158ca:	e799      	b.n	8015800 <__multiply+0x60>

080158cc <__pow5mult>:
 80158cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158d0:	4615      	mov	r5, r2
 80158d2:	f012 0203 	ands.w	r2, r2, #3
 80158d6:	4606      	mov	r6, r0
 80158d8:	460f      	mov	r7, r1
 80158da:	d007      	beq.n	80158ec <__pow5mult+0x20>
 80158dc:	3a01      	subs	r2, #1
 80158de:	4c21      	ldr	r4, [pc, #132]	; (8015964 <__pow5mult+0x98>)
 80158e0:	2300      	movs	r3, #0
 80158e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80158e6:	f7ff fe8b 	bl	8015600 <__multadd>
 80158ea:	4607      	mov	r7, r0
 80158ec:	10ad      	asrs	r5, r5, #2
 80158ee:	d035      	beq.n	801595c <__pow5mult+0x90>
 80158f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80158f2:	b93c      	cbnz	r4, 8015904 <__pow5mult+0x38>
 80158f4:	2010      	movs	r0, #16
 80158f6:	f7ff fe03 	bl	8015500 <malloc>
 80158fa:	6270      	str	r0, [r6, #36]	; 0x24
 80158fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015900:	6004      	str	r4, [r0, #0]
 8015902:	60c4      	str	r4, [r0, #12]
 8015904:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801590c:	b94c      	cbnz	r4, 8015922 <__pow5mult+0x56>
 801590e:	f240 2171 	movw	r1, #625	; 0x271
 8015912:	4630      	mov	r0, r6
 8015914:	f7ff ff3b 	bl	801578e <__i2b>
 8015918:	2300      	movs	r3, #0
 801591a:	f8c8 0008 	str.w	r0, [r8, #8]
 801591e:	4604      	mov	r4, r0
 8015920:	6003      	str	r3, [r0, #0]
 8015922:	f04f 0800 	mov.w	r8, #0
 8015926:	07eb      	lsls	r3, r5, #31
 8015928:	d50a      	bpl.n	8015940 <__pow5mult+0x74>
 801592a:	4639      	mov	r1, r7
 801592c:	4622      	mov	r2, r4
 801592e:	4630      	mov	r0, r6
 8015930:	f7ff ff36 	bl	80157a0 <__multiply>
 8015934:	4639      	mov	r1, r7
 8015936:	4681      	mov	r9, r0
 8015938:	4630      	mov	r0, r6
 801593a:	f7ff fe4a 	bl	80155d2 <_Bfree>
 801593e:	464f      	mov	r7, r9
 8015940:	106d      	asrs	r5, r5, #1
 8015942:	d00b      	beq.n	801595c <__pow5mult+0x90>
 8015944:	6820      	ldr	r0, [r4, #0]
 8015946:	b938      	cbnz	r0, 8015958 <__pow5mult+0x8c>
 8015948:	4622      	mov	r2, r4
 801594a:	4621      	mov	r1, r4
 801594c:	4630      	mov	r0, r6
 801594e:	f7ff ff27 	bl	80157a0 <__multiply>
 8015952:	6020      	str	r0, [r4, #0]
 8015954:	f8c0 8000 	str.w	r8, [r0]
 8015958:	4604      	mov	r4, r0
 801595a:	e7e4      	b.n	8015926 <__pow5mult+0x5a>
 801595c:	4638      	mov	r0, r7
 801595e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015962:	bf00      	nop
 8015964:	080167b8 	.word	0x080167b8

08015968 <__lshift>:
 8015968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801596c:	460c      	mov	r4, r1
 801596e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015972:	6923      	ldr	r3, [r4, #16]
 8015974:	6849      	ldr	r1, [r1, #4]
 8015976:	eb0a 0903 	add.w	r9, sl, r3
 801597a:	68a3      	ldr	r3, [r4, #8]
 801597c:	4607      	mov	r7, r0
 801597e:	4616      	mov	r6, r2
 8015980:	f109 0501 	add.w	r5, r9, #1
 8015984:	42ab      	cmp	r3, r5
 8015986:	db32      	blt.n	80159ee <__lshift+0x86>
 8015988:	4638      	mov	r0, r7
 801598a:	f7ff fdee 	bl	801556a <_Balloc>
 801598e:	2300      	movs	r3, #0
 8015990:	4680      	mov	r8, r0
 8015992:	f100 0114 	add.w	r1, r0, #20
 8015996:	461a      	mov	r2, r3
 8015998:	4553      	cmp	r3, sl
 801599a:	db2b      	blt.n	80159f4 <__lshift+0x8c>
 801599c:	6920      	ldr	r0, [r4, #16]
 801599e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80159a2:	f104 0314 	add.w	r3, r4, #20
 80159a6:	f016 021f 	ands.w	r2, r6, #31
 80159aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80159ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80159b2:	d025      	beq.n	8015a00 <__lshift+0x98>
 80159b4:	f1c2 0e20 	rsb	lr, r2, #32
 80159b8:	2000      	movs	r0, #0
 80159ba:	681e      	ldr	r6, [r3, #0]
 80159bc:	468a      	mov	sl, r1
 80159be:	4096      	lsls	r6, r2
 80159c0:	4330      	orrs	r0, r6
 80159c2:	f84a 0b04 	str.w	r0, [sl], #4
 80159c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80159ca:	459c      	cmp	ip, r3
 80159cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80159d0:	d814      	bhi.n	80159fc <__lshift+0x94>
 80159d2:	6048      	str	r0, [r1, #4]
 80159d4:	b108      	cbz	r0, 80159da <__lshift+0x72>
 80159d6:	f109 0502 	add.w	r5, r9, #2
 80159da:	3d01      	subs	r5, #1
 80159dc:	4638      	mov	r0, r7
 80159de:	f8c8 5010 	str.w	r5, [r8, #16]
 80159e2:	4621      	mov	r1, r4
 80159e4:	f7ff fdf5 	bl	80155d2 <_Bfree>
 80159e8:	4640      	mov	r0, r8
 80159ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159ee:	3101      	adds	r1, #1
 80159f0:	005b      	lsls	r3, r3, #1
 80159f2:	e7c7      	b.n	8015984 <__lshift+0x1c>
 80159f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80159f8:	3301      	adds	r3, #1
 80159fa:	e7cd      	b.n	8015998 <__lshift+0x30>
 80159fc:	4651      	mov	r1, sl
 80159fe:	e7dc      	b.n	80159ba <__lshift+0x52>
 8015a00:	3904      	subs	r1, #4
 8015a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a06:	f841 2f04 	str.w	r2, [r1, #4]!
 8015a0a:	459c      	cmp	ip, r3
 8015a0c:	d8f9      	bhi.n	8015a02 <__lshift+0x9a>
 8015a0e:	e7e4      	b.n	80159da <__lshift+0x72>

08015a10 <__mcmp>:
 8015a10:	6903      	ldr	r3, [r0, #16]
 8015a12:	690a      	ldr	r2, [r1, #16]
 8015a14:	1a9b      	subs	r3, r3, r2
 8015a16:	b530      	push	{r4, r5, lr}
 8015a18:	d10c      	bne.n	8015a34 <__mcmp+0x24>
 8015a1a:	0092      	lsls	r2, r2, #2
 8015a1c:	3014      	adds	r0, #20
 8015a1e:	3114      	adds	r1, #20
 8015a20:	1884      	adds	r4, r0, r2
 8015a22:	4411      	add	r1, r2
 8015a24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015a28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015a2c:	4295      	cmp	r5, r2
 8015a2e:	d003      	beq.n	8015a38 <__mcmp+0x28>
 8015a30:	d305      	bcc.n	8015a3e <__mcmp+0x2e>
 8015a32:	2301      	movs	r3, #1
 8015a34:	4618      	mov	r0, r3
 8015a36:	bd30      	pop	{r4, r5, pc}
 8015a38:	42a0      	cmp	r0, r4
 8015a3a:	d3f3      	bcc.n	8015a24 <__mcmp+0x14>
 8015a3c:	e7fa      	b.n	8015a34 <__mcmp+0x24>
 8015a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8015a42:	e7f7      	b.n	8015a34 <__mcmp+0x24>

08015a44 <__mdiff>:
 8015a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a48:	460d      	mov	r5, r1
 8015a4a:	4607      	mov	r7, r0
 8015a4c:	4611      	mov	r1, r2
 8015a4e:	4628      	mov	r0, r5
 8015a50:	4614      	mov	r4, r2
 8015a52:	f7ff ffdd 	bl	8015a10 <__mcmp>
 8015a56:	1e06      	subs	r6, r0, #0
 8015a58:	d108      	bne.n	8015a6c <__mdiff+0x28>
 8015a5a:	4631      	mov	r1, r6
 8015a5c:	4638      	mov	r0, r7
 8015a5e:	f7ff fd84 	bl	801556a <_Balloc>
 8015a62:	2301      	movs	r3, #1
 8015a64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a6c:	bfa4      	itt	ge
 8015a6e:	4623      	movge	r3, r4
 8015a70:	462c      	movge	r4, r5
 8015a72:	4638      	mov	r0, r7
 8015a74:	6861      	ldr	r1, [r4, #4]
 8015a76:	bfa6      	itte	ge
 8015a78:	461d      	movge	r5, r3
 8015a7a:	2600      	movge	r6, #0
 8015a7c:	2601      	movlt	r6, #1
 8015a7e:	f7ff fd74 	bl	801556a <_Balloc>
 8015a82:	692b      	ldr	r3, [r5, #16]
 8015a84:	60c6      	str	r6, [r0, #12]
 8015a86:	6926      	ldr	r6, [r4, #16]
 8015a88:	f105 0914 	add.w	r9, r5, #20
 8015a8c:	f104 0214 	add.w	r2, r4, #20
 8015a90:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015a94:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015a98:	f100 0514 	add.w	r5, r0, #20
 8015a9c:	f04f 0e00 	mov.w	lr, #0
 8015aa0:	f852 ab04 	ldr.w	sl, [r2], #4
 8015aa4:	f859 4b04 	ldr.w	r4, [r9], #4
 8015aa8:	fa1e f18a 	uxtah	r1, lr, sl
 8015aac:	b2a3      	uxth	r3, r4
 8015aae:	1ac9      	subs	r1, r1, r3
 8015ab0:	0c23      	lsrs	r3, r4, #16
 8015ab2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015ab6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015aba:	b289      	uxth	r1, r1
 8015abc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015ac0:	45c8      	cmp	r8, r9
 8015ac2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015ac6:	4694      	mov	ip, r2
 8015ac8:	f845 3b04 	str.w	r3, [r5], #4
 8015acc:	d8e8      	bhi.n	8015aa0 <__mdiff+0x5c>
 8015ace:	45bc      	cmp	ip, r7
 8015ad0:	d304      	bcc.n	8015adc <__mdiff+0x98>
 8015ad2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015ad6:	b183      	cbz	r3, 8015afa <__mdiff+0xb6>
 8015ad8:	6106      	str	r6, [r0, #16]
 8015ada:	e7c5      	b.n	8015a68 <__mdiff+0x24>
 8015adc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015ae0:	fa1e f381 	uxtah	r3, lr, r1
 8015ae4:	141a      	asrs	r2, r3, #16
 8015ae6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015aea:	b29b      	uxth	r3, r3
 8015aec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015af0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015af4:	f845 3b04 	str.w	r3, [r5], #4
 8015af8:	e7e9      	b.n	8015ace <__mdiff+0x8a>
 8015afa:	3e01      	subs	r6, #1
 8015afc:	e7e9      	b.n	8015ad2 <__mdiff+0x8e>
	...

08015b00 <__ulp>:
 8015b00:	4b12      	ldr	r3, [pc, #72]	; (8015b4c <__ulp+0x4c>)
 8015b02:	ee10 2a90 	vmov	r2, s1
 8015b06:	401a      	ands	r2, r3
 8015b08:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	dd04      	ble.n	8015b1a <__ulp+0x1a>
 8015b10:	2000      	movs	r0, #0
 8015b12:	4619      	mov	r1, r3
 8015b14:	ec41 0b10 	vmov	d0, r0, r1
 8015b18:	4770      	bx	lr
 8015b1a:	425b      	negs	r3, r3
 8015b1c:	151b      	asrs	r3, r3, #20
 8015b1e:	2b13      	cmp	r3, #19
 8015b20:	f04f 0000 	mov.w	r0, #0
 8015b24:	f04f 0100 	mov.w	r1, #0
 8015b28:	dc04      	bgt.n	8015b34 <__ulp+0x34>
 8015b2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8015b2e:	fa42 f103 	asr.w	r1, r2, r3
 8015b32:	e7ef      	b.n	8015b14 <__ulp+0x14>
 8015b34:	3b14      	subs	r3, #20
 8015b36:	2b1e      	cmp	r3, #30
 8015b38:	f04f 0201 	mov.w	r2, #1
 8015b3c:	bfda      	itte	le
 8015b3e:	f1c3 031f 	rsble	r3, r3, #31
 8015b42:	fa02 f303 	lslle.w	r3, r2, r3
 8015b46:	4613      	movgt	r3, r2
 8015b48:	4618      	mov	r0, r3
 8015b4a:	e7e3      	b.n	8015b14 <__ulp+0x14>
 8015b4c:	7ff00000 	.word	0x7ff00000

08015b50 <__b2d>:
 8015b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b52:	6905      	ldr	r5, [r0, #16]
 8015b54:	f100 0714 	add.w	r7, r0, #20
 8015b58:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015b5c:	1f2e      	subs	r6, r5, #4
 8015b5e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015b62:	4620      	mov	r0, r4
 8015b64:	f7ff fdc5 	bl	80156f2 <__hi0bits>
 8015b68:	f1c0 0320 	rsb	r3, r0, #32
 8015b6c:	280a      	cmp	r0, #10
 8015b6e:	600b      	str	r3, [r1, #0]
 8015b70:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015be8 <__b2d+0x98>
 8015b74:	dc14      	bgt.n	8015ba0 <__b2d+0x50>
 8015b76:	f1c0 0e0b 	rsb	lr, r0, #11
 8015b7a:	fa24 f10e 	lsr.w	r1, r4, lr
 8015b7e:	42b7      	cmp	r7, r6
 8015b80:	ea41 030c 	orr.w	r3, r1, ip
 8015b84:	bf34      	ite	cc
 8015b86:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015b8a:	2100      	movcs	r1, #0
 8015b8c:	3015      	adds	r0, #21
 8015b8e:	fa04 f000 	lsl.w	r0, r4, r0
 8015b92:	fa21 f10e 	lsr.w	r1, r1, lr
 8015b96:	ea40 0201 	orr.w	r2, r0, r1
 8015b9a:	ec43 2b10 	vmov	d0, r2, r3
 8015b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ba0:	42b7      	cmp	r7, r6
 8015ba2:	bf3a      	itte	cc
 8015ba4:	f1a5 0608 	subcc.w	r6, r5, #8
 8015ba8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015bac:	2100      	movcs	r1, #0
 8015bae:	380b      	subs	r0, #11
 8015bb0:	d015      	beq.n	8015bde <__b2d+0x8e>
 8015bb2:	4084      	lsls	r4, r0
 8015bb4:	f1c0 0520 	rsb	r5, r0, #32
 8015bb8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015bbc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015bc0:	42be      	cmp	r6, r7
 8015bc2:	fa21 fc05 	lsr.w	ip, r1, r5
 8015bc6:	ea44 030c 	orr.w	r3, r4, ip
 8015bca:	bf8c      	ite	hi
 8015bcc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015bd0:	2400      	movls	r4, #0
 8015bd2:	fa01 f000 	lsl.w	r0, r1, r0
 8015bd6:	40ec      	lsrs	r4, r5
 8015bd8:	ea40 0204 	orr.w	r2, r0, r4
 8015bdc:	e7dd      	b.n	8015b9a <__b2d+0x4a>
 8015bde:	ea44 030c 	orr.w	r3, r4, ip
 8015be2:	460a      	mov	r2, r1
 8015be4:	e7d9      	b.n	8015b9a <__b2d+0x4a>
 8015be6:	bf00      	nop
 8015be8:	3ff00000 	.word	0x3ff00000

08015bec <__d2b>:
 8015bec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015bf0:	460e      	mov	r6, r1
 8015bf2:	2101      	movs	r1, #1
 8015bf4:	ec59 8b10 	vmov	r8, r9, d0
 8015bf8:	4615      	mov	r5, r2
 8015bfa:	f7ff fcb6 	bl	801556a <_Balloc>
 8015bfe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015c02:	4607      	mov	r7, r0
 8015c04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015c08:	bb34      	cbnz	r4, 8015c58 <__d2b+0x6c>
 8015c0a:	9301      	str	r3, [sp, #4]
 8015c0c:	f1b8 0300 	subs.w	r3, r8, #0
 8015c10:	d027      	beq.n	8015c62 <__d2b+0x76>
 8015c12:	a802      	add	r0, sp, #8
 8015c14:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015c18:	f7ff fd8a 	bl	8015730 <__lo0bits>
 8015c1c:	9900      	ldr	r1, [sp, #0]
 8015c1e:	b1f0      	cbz	r0, 8015c5e <__d2b+0x72>
 8015c20:	9a01      	ldr	r2, [sp, #4]
 8015c22:	f1c0 0320 	rsb	r3, r0, #32
 8015c26:	fa02 f303 	lsl.w	r3, r2, r3
 8015c2a:	430b      	orrs	r3, r1
 8015c2c:	40c2      	lsrs	r2, r0
 8015c2e:	617b      	str	r3, [r7, #20]
 8015c30:	9201      	str	r2, [sp, #4]
 8015c32:	9b01      	ldr	r3, [sp, #4]
 8015c34:	61bb      	str	r3, [r7, #24]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	bf14      	ite	ne
 8015c3a:	2102      	movne	r1, #2
 8015c3c:	2101      	moveq	r1, #1
 8015c3e:	6139      	str	r1, [r7, #16]
 8015c40:	b1c4      	cbz	r4, 8015c74 <__d2b+0x88>
 8015c42:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015c46:	4404      	add	r4, r0
 8015c48:	6034      	str	r4, [r6, #0]
 8015c4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015c4e:	6028      	str	r0, [r5, #0]
 8015c50:	4638      	mov	r0, r7
 8015c52:	b003      	add	sp, #12
 8015c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015c5c:	e7d5      	b.n	8015c0a <__d2b+0x1e>
 8015c5e:	6179      	str	r1, [r7, #20]
 8015c60:	e7e7      	b.n	8015c32 <__d2b+0x46>
 8015c62:	a801      	add	r0, sp, #4
 8015c64:	f7ff fd64 	bl	8015730 <__lo0bits>
 8015c68:	9b01      	ldr	r3, [sp, #4]
 8015c6a:	617b      	str	r3, [r7, #20]
 8015c6c:	2101      	movs	r1, #1
 8015c6e:	6139      	str	r1, [r7, #16]
 8015c70:	3020      	adds	r0, #32
 8015c72:	e7e5      	b.n	8015c40 <__d2b+0x54>
 8015c74:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015c78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015c7c:	6030      	str	r0, [r6, #0]
 8015c7e:	6918      	ldr	r0, [r3, #16]
 8015c80:	f7ff fd37 	bl	80156f2 <__hi0bits>
 8015c84:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015c88:	e7e1      	b.n	8015c4e <__d2b+0x62>

08015c8a <__ratio>:
 8015c8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c8e:	4688      	mov	r8, r1
 8015c90:	4669      	mov	r1, sp
 8015c92:	4681      	mov	r9, r0
 8015c94:	f7ff ff5c 	bl	8015b50 <__b2d>
 8015c98:	a901      	add	r1, sp, #4
 8015c9a:	4640      	mov	r0, r8
 8015c9c:	ec57 6b10 	vmov	r6, r7, d0
 8015ca0:	f7ff ff56 	bl	8015b50 <__b2d>
 8015ca4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015ca8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015cac:	eba3 0c02 	sub.w	ip, r3, r2
 8015cb0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015cb4:	1a9b      	subs	r3, r3, r2
 8015cb6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015cba:	ec5b ab10 	vmov	sl, fp, d0
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	bfce      	itee	gt
 8015cc2:	463a      	movgt	r2, r7
 8015cc4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015cc8:	465a      	movle	r2, fp
 8015cca:	4659      	mov	r1, fp
 8015ccc:	463d      	mov	r5, r7
 8015cce:	bfd4      	ite	le
 8015cd0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8015cd4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8015cd8:	4630      	mov	r0, r6
 8015cda:	ee10 2a10 	vmov	r2, s0
 8015cde:	460b      	mov	r3, r1
 8015ce0:	4629      	mov	r1, r5
 8015ce2:	f7f2 fceb 	bl	80086bc <__aeabi_ddiv>
 8015ce6:	ec41 0b10 	vmov	d0, r0, r1
 8015cea:	b003      	add	sp, #12
 8015cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015cf0 <__copybits>:
 8015cf0:	3901      	subs	r1, #1
 8015cf2:	b510      	push	{r4, lr}
 8015cf4:	1149      	asrs	r1, r1, #5
 8015cf6:	6914      	ldr	r4, [r2, #16]
 8015cf8:	3101      	adds	r1, #1
 8015cfa:	f102 0314 	add.w	r3, r2, #20
 8015cfe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015d02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015d06:	42a3      	cmp	r3, r4
 8015d08:	4602      	mov	r2, r0
 8015d0a:	d303      	bcc.n	8015d14 <__copybits+0x24>
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	428a      	cmp	r2, r1
 8015d10:	d305      	bcc.n	8015d1e <__copybits+0x2e>
 8015d12:	bd10      	pop	{r4, pc}
 8015d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d18:	f840 2b04 	str.w	r2, [r0], #4
 8015d1c:	e7f3      	b.n	8015d06 <__copybits+0x16>
 8015d1e:	f842 3b04 	str.w	r3, [r2], #4
 8015d22:	e7f4      	b.n	8015d0e <__copybits+0x1e>

08015d24 <__any_on>:
 8015d24:	f100 0214 	add.w	r2, r0, #20
 8015d28:	6900      	ldr	r0, [r0, #16]
 8015d2a:	114b      	asrs	r3, r1, #5
 8015d2c:	4298      	cmp	r0, r3
 8015d2e:	b510      	push	{r4, lr}
 8015d30:	db11      	blt.n	8015d56 <__any_on+0x32>
 8015d32:	dd0a      	ble.n	8015d4a <__any_on+0x26>
 8015d34:	f011 011f 	ands.w	r1, r1, #31
 8015d38:	d007      	beq.n	8015d4a <__any_on+0x26>
 8015d3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015d3e:	fa24 f001 	lsr.w	r0, r4, r1
 8015d42:	fa00 f101 	lsl.w	r1, r0, r1
 8015d46:	428c      	cmp	r4, r1
 8015d48:	d10b      	bne.n	8015d62 <__any_on+0x3e>
 8015d4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015d4e:	4293      	cmp	r3, r2
 8015d50:	d803      	bhi.n	8015d5a <__any_on+0x36>
 8015d52:	2000      	movs	r0, #0
 8015d54:	bd10      	pop	{r4, pc}
 8015d56:	4603      	mov	r3, r0
 8015d58:	e7f7      	b.n	8015d4a <__any_on+0x26>
 8015d5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015d5e:	2900      	cmp	r1, #0
 8015d60:	d0f5      	beq.n	8015d4e <__any_on+0x2a>
 8015d62:	2001      	movs	r0, #1
 8015d64:	e7f6      	b.n	8015d54 <__any_on+0x30>

08015d66 <_calloc_r>:
 8015d66:	b538      	push	{r3, r4, r5, lr}
 8015d68:	fb02 f401 	mul.w	r4, r2, r1
 8015d6c:	4621      	mov	r1, r4
 8015d6e:	f7fb fbf7 	bl	8011560 <_malloc_r>
 8015d72:	4605      	mov	r5, r0
 8015d74:	b118      	cbz	r0, 8015d7e <_calloc_r+0x18>
 8015d76:	4622      	mov	r2, r4
 8015d78:	2100      	movs	r1, #0
 8015d7a:	f7fb fb9a 	bl	80114b2 <memset>
 8015d7e:	4628      	mov	r0, r5
 8015d80:	bd38      	pop	{r3, r4, r5, pc}

08015d82 <_realloc_r>:
 8015d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d84:	4607      	mov	r7, r0
 8015d86:	4614      	mov	r4, r2
 8015d88:	460e      	mov	r6, r1
 8015d8a:	b921      	cbnz	r1, 8015d96 <_realloc_r+0x14>
 8015d8c:	4611      	mov	r1, r2
 8015d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015d92:	f7fb bbe5 	b.w	8011560 <_malloc_r>
 8015d96:	b922      	cbnz	r2, 8015da2 <_realloc_r+0x20>
 8015d98:	f7fb fb94 	bl	80114c4 <_free_r>
 8015d9c:	4625      	mov	r5, r4
 8015d9e:	4628      	mov	r0, r5
 8015da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015da2:	f000 f9ce 	bl	8016142 <_malloc_usable_size_r>
 8015da6:	42a0      	cmp	r0, r4
 8015da8:	d20f      	bcs.n	8015dca <_realloc_r+0x48>
 8015daa:	4621      	mov	r1, r4
 8015dac:	4638      	mov	r0, r7
 8015dae:	f7fb fbd7 	bl	8011560 <_malloc_r>
 8015db2:	4605      	mov	r5, r0
 8015db4:	2800      	cmp	r0, #0
 8015db6:	d0f2      	beq.n	8015d9e <_realloc_r+0x1c>
 8015db8:	4631      	mov	r1, r6
 8015dba:	4622      	mov	r2, r4
 8015dbc:	f7fb fb6e 	bl	801149c <memcpy>
 8015dc0:	4631      	mov	r1, r6
 8015dc2:	4638      	mov	r0, r7
 8015dc4:	f7fb fb7e 	bl	80114c4 <_free_r>
 8015dc8:	e7e9      	b.n	8015d9e <_realloc_r+0x1c>
 8015dca:	4635      	mov	r5, r6
 8015dcc:	e7e7      	b.n	8015d9e <_realloc_r+0x1c>

08015dce <__ssputs_r>:
 8015dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dd2:	688e      	ldr	r6, [r1, #8]
 8015dd4:	429e      	cmp	r6, r3
 8015dd6:	4682      	mov	sl, r0
 8015dd8:	460c      	mov	r4, r1
 8015dda:	4690      	mov	r8, r2
 8015ddc:	4699      	mov	r9, r3
 8015dde:	d837      	bhi.n	8015e50 <__ssputs_r+0x82>
 8015de0:	898a      	ldrh	r2, [r1, #12]
 8015de2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015de6:	d031      	beq.n	8015e4c <__ssputs_r+0x7e>
 8015de8:	6825      	ldr	r5, [r4, #0]
 8015dea:	6909      	ldr	r1, [r1, #16]
 8015dec:	1a6f      	subs	r7, r5, r1
 8015dee:	6965      	ldr	r5, [r4, #20]
 8015df0:	2302      	movs	r3, #2
 8015df2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015df6:	fb95 f5f3 	sdiv	r5, r5, r3
 8015dfa:	f109 0301 	add.w	r3, r9, #1
 8015dfe:	443b      	add	r3, r7
 8015e00:	429d      	cmp	r5, r3
 8015e02:	bf38      	it	cc
 8015e04:	461d      	movcc	r5, r3
 8015e06:	0553      	lsls	r3, r2, #21
 8015e08:	d530      	bpl.n	8015e6c <__ssputs_r+0x9e>
 8015e0a:	4629      	mov	r1, r5
 8015e0c:	f7fb fba8 	bl	8011560 <_malloc_r>
 8015e10:	4606      	mov	r6, r0
 8015e12:	b950      	cbnz	r0, 8015e2a <__ssputs_r+0x5c>
 8015e14:	230c      	movs	r3, #12
 8015e16:	f8ca 3000 	str.w	r3, [sl]
 8015e1a:	89a3      	ldrh	r3, [r4, #12]
 8015e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e20:	81a3      	strh	r3, [r4, #12]
 8015e22:	f04f 30ff 	mov.w	r0, #4294967295
 8015e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e2a:	463a      	mov	r2, r7
 8015e2c:	6921      	ldr	r1, [r4, #16]
 8015e2e:	f7fb fb35 	bl	801149c <memcpy>
 8015e32:	89a3      	ldrh	r3, [r4, #12]
 8015e34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e3c:	81a3      	strh	r3, [r4, #12]
 8015e3e:	6126      	str	r6, [r4, #16]
 8015e40:	6165      	str	r5, [r4, #20]
 8015e42:	443e      	add	r6, r7
 8015e44:	1bed      	subs	r5, r5, r7
 8015e46:	6026      	str	r6, [r4, #0]
 8015e48:	60a5      	str	r5, [r4, #8]
 8015e4a:	464e      	mov	r6, r9
 8015e4c:	454e      	cmp	r6, r9
 8015e4e:	d900      	bls.n	8015e52 <__ssputs_r+0x84>
 8015e50:	464e      	mov	r6, r9
 8015e52:	4632      	mov	r2, r6
 8015e54:	4641      	mov	r1, r8
 8015e56:	6820      	ldr	r0, [r4, #0]
 8015e58:	f7ff fb6c 	bl	8015534 <memmove>
 8015e5c:	68a3      	ldr	r3, [r4, #8]
 8015e5e:	1b9b      	subs	r3, r3, r6
 8015e60:	60a3      	str	r3, [r4, #8]
 8015e62:	6823      	ldr	r3, [r4, #0]
 8015e64:	441e      	add	r6, r3
 8015e66:	6026      	str	r6, [r4, #0]
 8015e68:	2000      	movs	r0, #0
 8015e6a:	e7dc      	b.n	8015e26 <__ssputs_r+0x58>
 8015e6c:	462a      	mov	r2, r5
 8015e6e:	f7ff ff88 	bl	8015d82 <_realloc_r>
 8015e72:	4606      	mov	r6, r0
 8015e74:	2800      	cmp	r0, #0
 8015e76:	d1e2      	bne.n	8015e3e <__ssputs_r+0x70>
 8015e78:	6921      	ldr	r1, [r4, #16]
 8015e7a:	4650      	mov	r0, sl
 8015e7c:	f7fb fb22 	bl	80114c4 <_free_r>
 8015e80:	e7c8      	b.n	8015e14 <__ssputs_r+0x46>
	...

08015e84 <_svfiprintf_r>:
 8015e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e88:	461d      	mov	r5, r3
 8015e8a:	898b      	ldrh	r3, [r1, #12]
 8015e8c:	061f      	lsls	r7, r3, #24
 8015e8e:	b09d      	sub	sp, #116	; 0x74
 8015e90:	4680      	mov	r8, r0
 8015e92:	460c      	mov	r4, r1
 8015e94:	4616      	mov	r6, r2
 8015e96:	d50f      	bpl.n	8015eb8 <_svfiprintf_r+0x34>
 8015e98:	690b      	ldr	r3, [r1, #16]
 8015e9a:	b96b      	cbnz	r3, 8015eb8 <_svfiprintf_r+0x34>
 8015e9c:	2140      	movs	r1, #64	; 0x40
 8015e9e:	f7fb fb5f 	bl	8011560 <_malloc_r>
 8015ea2:	6020      	str	r0, [r4, #0]
 8015ea4:	6120      	str	r0, [r4, #16]
 8015ea6:	b928      	cbnz	r0, 8015eb4 <_svfiprintf_r+0x30>
 8015ea8:	230c      	movs	r3, #12
 8015eaa:	f8c8 3000 	str.w	r3, [r8]
 8015eae:	f04f 30ff 	mov.w	r0, #4294967295
 8015eb2:	e0c8      	b.n	8016046 <_svfiprintf_r+0x1c2>
 8015eb4:	2340      	movs	r3, #64	; 0x40
 8015eb6:	6163      	str	r3, [r4, #20]
 8015eb8:	2300      	movs	r3, #0
 8015eba:	9309      	str	r3, [sp, #36]	; 0x24
 8015ebc:	2320      	movs	r3, #32
 8015ebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ec2:	2330      	movs	r3, #48	; 0x30
 8015ec4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ec8:	9503      	str	r5, [sp, #12]
 8015eca:	f04f 0b01 	mov.w	fp, #1
 8015ece:	4637      	mov	r7, r6
 8015ed0:	463d      	mov	r5, r7
 8015ed2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015ed6:	b10b      	cbz	r3, 8015edc <_svfiprintf_r+0x58>
 8015ed8:	2b25      	cmp	r3, #37	; 0x25
 8015eda:	d13e      	bne.n	8015f5a <_svfiprintf_r+0xd6>
 8015edc:	ebb7 0a06 	subs.w	sl, r7, r6
 8015ee0:	d00b      	beq.n	8015efa <_svfiprintf_r+0x76>
 8015ee2:	4653      	mov	r3, sl
 8015ee4:	4632      	mov	r2, r6
 8015ee6:	4621      	mov	r1, r4
 8015ee8:	4640      	mov	r0, r8
 8015eea:	f7ff ff70 	bl	8015dce <__ssputs_r>
 8015eee:	3001      	adds	r0, #1
 8015ef0:	f000 80a4 	beq.w	801603c <_svfiprintf_r+0x1b8>
 8015ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ef6:	4453      	add	r3, sl
 8015ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8015efa:	783b      	ldrb	r3, [r7, #0]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	f000 809d 	beq.w	801603c <_svfiprintf_r+0x1b8>
 8015f02:	2300      	movs	r3, #0
 8015f04:	f04f 32ff 	mov.w	r2, #4294967295
 8015f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f0c:	9304      	str	r3, [sp, #16]
 8015f0e:	9307      	str	r3, [sp, #28]
 8015f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f14:	931a      	str	r3, [sp, #104]	; 0x68
 8015f16:	462f      	mov	r7, r5
 8015f18:	2205      	movs	r2, #5
 8015f1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015f1e:	4850      	ldr	r0, [pc, #320]	; (8016060 <_svfiprintf_r+0x1dc>)
 8015f20:	f7f2 f896 	bl	8008050 <memchr>
 8015f24:	9b04      	ldr	r3, [sp, #16]
 8015f26:	b9d0      	cbnz	r0, 8015f5e <_svfiprintf_r+0xda>
 8015f28:	06d9      	lsls	r1, r3, #27
 8015f2a:	bf44      	itt	mi
 8015f2c:	2220      	movmi	r2, #32
 8015f2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015f32:	071a      	lsls	r2, r3, #28
 8015f34:	bf44      	itt	mi
 8015f36:	222b      	movmi	r2, #43	; 0x2b
 8015f38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015f3c:	782a      	ldrb	r2, [r5, #0]
 8015f3e:	2a2a      	cmp	r2, #42	; 0x2a
 8015f40:	d015      	beq.n	8015f6e <_svfiprintf_r+0xea>
 8015f42:	9a07      	ldr	r2, [sp, #28]
 8015f44:	462f      	mov	r7, r5
 8015f46:	2000      	movs	r0, #0
 8015f48:	250a      	movs	r5, #10
 8015f4a:	4639      	mov	r1, r7
 8015f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f50:	3b30      	subs	r3, #48	; 0x30
 8015f52:	2b09      	cmp	r3, #9
 8015f54:	d94d      	bls.n	8015ff2 <_svfiprintf_r+0x16e>
 8015f56:	b1b8      	cbz	r0, 8015f88 <_svfiprintf_r+0x104>
 8015f58:	e00f      	b.n	8015f7a <_svfiprintf_r+0xf6>
 8015f5a:	462f      	mov	r7, r5
 8015f5c:	e7b8      	b.n	8015ed0 <_svfiprintf_r+0x4c>
 8015f5e:	4a40      	ldr	r2, [pc, #256]	; (8016060 <_svfiprintf_r+0x1dc>)
 8015f60:	1a80      	subs	r0, r0, r2
 8015f62:	fa0b f000 	lsl.w	r0, fp, r0
 8015f66:	4318      	orrs	r0, r3
 8015f68:	9004      	str	r0, [sp, #16]
 8015f6a:	463d      	mov	r5, r7
 8015f6c:	e7d3      	b.n	8015f16 <_svfiprintf_r+0x92>
 8015f6e:	9a03      	ldr	r2, [sp, #12]
 8015f70:	1d11      	adds	r1, r2, #4
 8015f72:	6812      	ldr	r2, [r2, #0]
 8015f74:	9103      	str	r1, [sp, #12]
 8015f76:	2a00      	cmp	r2, #0
 8015f78:	db01      	blt.n	8015f7e <_svfiprintf_r+0xfa>
 8015f7a:	9207      	str	r2, [sp, #28]
 8015f7c:	e004      	b.n	8015f88 <_svfiprintf_r+0x104>
 8015f7e:	4252      	negs	r2, r2
 8015f80:	f043 0302 	orr.w	r3, r3, #2
 8015f84:	9207      	str	r2, [sp, #28]
 8015f86:	9304      	str	r3, [sp, #16]
 8015f88:	783b      	ldrb	r3, [r7, #0]
 8015f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8015f8c:	d10c      	bne.n	8015fa8 <_svfiprintf_r+0x124>
 8015f8e:	787b      	ldrb	r3, [r7, #1]
 8015f90:	2b2a      	cmp	r3, #42	; 0x2a
 8015f92:	d133      	bne.n	8015ffc <_svfiprintf_r+0x178>
 8015f94:	9b03      	ldr	r3, [sp, #12]
 8015f96:	1d1a      	adds	r2, r3, #4
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	9203      	str	r2, [sp, #12]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	bfb8      	it	lt
 8015fa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8015fa4:	3702      	adds	r7, #2
 8015fa6:	9305      	str	r3, [sp, #20]
 8015fa8:	4d2e      	ldr	r5, [pc, #184]	; (8016064 <_svfiprintf_r+0x1e0>)
 8015faa:	7839      	ldrb	r1, [r7, #0]
 8015fac:	2203      	movs	r2, #3
 8015fae:	4628      	mov	r0, r5
 8015fb0:	f7f2 f84e 	bl	8008050 <memchr>
 8015fb4:	b138      	cbz	r0, 8015fc6 <_svfiprintf_r+0x142>
 8015fb6:	2340      	movs	r3, #64	; 0x40
 8015fb8:	1b40      	subs	r0, r0, r5
 8015fba:	fa03 f000 	lsl.w	r0, r3, r0
 8015fbe:	9b04      	ldr	r3, [sp, #16]
 8015fc0:	4303      	orrs	r3, r0
 8015fc2:	3701      	adds	r7, #1
 8015fc4:	9304      	str	r3, [sp, #16]
 8015fc6:	7839      	ldrb	r1, [r7, #0]
 8015fc8:	4827      	ldr	r0, [pc, #156]	; (8016068 <_svfiprintf_r+0x1e4>)
 8015fca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015fce:	2206      	movs	r2, #6
 8015fd0:	1c7e      	adds	r6, r7, #1
 8015fd2:	f7f2 f83d 	bl	8008050 <memchr>
 8015fd6:	2800      	cmp	r0, #0
 8015fd8:	d038      	beq.n	801604c <_svfiprintf_r+0x1c8>
 8015fda:	4b24      	ldr	r3, [pc, #144]	; (801606c <_svfiprintf_r+0x1e8>)
 8015fdc:	bb13      	cbnz	r3, 8016024 <_svfiprintf_r+0x1a0>
 8015fde:	9b03      	ldr	r3, [sp, #12]
 8015fe0:	3307      	adds	r3, #7
 8015fe2:	f023 0307 	bic.w	r3, r3, #7
 8015fe6:	3308      	adds	r3, #8
 8015fe8:	9303      	str	r3, [sp, #12]
 8015fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fec:	444b      	add	r3, r9
 8015fee:	9309      	str	r3, [sp, #36]	; 0x24
 8015ff0:	e76d      	b.n	8015ece <_svfiprintf_r+0x4a>
 8015ff2:	fb05 3202 	mla	r2, r5, r2, r3
 8015ff6:	2001      	movs	r0, #1
 8015ff8:	460f      	mov	r7, r1
 8015ffa:	e7a6      	b.n	8015f4a <_svfiprintf_r+0xc6>
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	3701      	adds	r7, #1
 8016000:	9305      	str	r3, [sp, #20]
 8016002:	4619      	mov	r1, r3
 8016004:	250a      	movs	r5, #10
 8016006:	4638      	mov	r0, r7
 8016008:	f810 2b01 	ldrb.w	r2, [r0], #1
 801600c:	3a30      	subs	r2, #48	; 0x30
 801600e:	2a09      	cmp	r2, #9
 8016010:	d903      	bls.n	801601a <_svfiprintf_r+0x196>
 8016012:	2b00      	cmp	r3, #0
 8016014:	d0c8      	beq.n	8015fa8 <_svfiprintf_r+0x124>
 8016016:	9105      	str	r1, [sp, #20]
 8016018:	e7c6      	b.n	8015fa8 <_svfiprintf_r+0x124>
 801601a:	fb05 2101 	mla	r1, r5, r1, r2
 801601e:	2301      	movs	r3, #1
 8016020:	4607      	mov	r7, r0
 8016022:	e7f0      	b.n	8016006 <_svfiprintf_r+0x182>
 8016024:	ab03      	add	r3, sp, #12
 8016026:	9300      	str	r3, [sp, #0]
 8016028:	4622      	mov	r2, r4
 801602a:	4b11      	ldr	r3, [pc, #68]	; (8016070 <_svfiprintf_r+0x1ec>)
 801602c:	a904      	add	r1, sp, #16
 801602e:	4640      	mov	r0, r8
 8016030:	f7fb fcc4 	bl	80119bc <_printf_float>
 8016034:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016038:	4681      	mov	r9, r0
 801603a:	d1d6      	bne.n	8015fea <_svfiprintf_r+0x166>
 801603c:	89a3      	ldrh	r3, [r4, #12]
 801603e:	065b      	lsls	r3, r3, #25
 8016040:	f53f af35 	bmi.w	8015eae <_svfiprintf_r+0x2a>
 8016044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016046:	b01d      	add	sp, #116	; 0x74
 8016048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801604c:	ab03      	add	r3, sp, #12
 801604e:	9300      	str	r3, [sp, #0]
 8016050:	4622      	mov	r2, r4
 8016052:	4b07      	ldr	r3, [pc, #28]	; (8016070 <_svfiprintf_r+0x1ec>)
 8016054:	a904      	add	r1, sp, #16
 8016056:	4640      	mov	r0, r8
 8016058:	f7fb ff66 	bl	8011f28 <_printf_i>
 801605c:	e7ea      	b.n	8016034 <_svfiprintf_r+0x1b0>
 801605e:	bf00      	nop
 8016060:	080165f8 	.word	0x080165f8
 8016064:	080165fe 	.word	0x080165fe
 8016068:	08016602 	.word	0x08016602
 801606c:	080119bd 	.word	0x080119bd
 8016070:	08015dcf 	.word	0x08015dcf

08016074 <_putc_r>:
 8016074:	b570      	push	{r4, r5, r6, lr}
 8016076:	460d      	mov	r5, r1
 8016078:	4614      	mov	r4, r2
 801607a:	4606      	mov	r6, r0
 801607c:	b118      	cbz	r0, 8016086 <_putc_r+0x12>
 801607e:	6983      	ldr	r3, [r0, #24]
 8016080:	b90b      	cbnz	r3, 8016086 <_putc_r+0x12>
 8016082:	f7fb f8dd 	bl	8011240 <__sinit>
 8016086:	4b13      	ldr	r3, [pc, #76]	; (80160d4 <_putc_r+0x60>)
 8016088:	429c      	cmp	r4, r3
 801608a:	d112      	bne.n	80160b2 <_putc_r+0x3e>
 801608c:	6874      	ldr	r4, [r6, #4]
 801608e:	68a3      	ldr	r3, [r4, #8]
 8016090:	3b01      	subs	r3, #1
 8016092:	2b00      	cmp	r3, #0
 8016094:	60a3      	str	r3, [r4, #8]
 8016096:	da16      	bge.n	80160c6 <_putc_r+0x52>
 8016098:	69a2      	ldr	r2, [r4, #24]
 801609a:	4293      	cmp	r3, r2
 801609c:	db02      	blt.n	80160a4 <_putc_r+0x30>
 801609e:	b2eb      	uxtb	r3, r5
 80160a0:	2b0a      	cmp	r3, #10
 80160a2:	d110      	bne.n	80160c6 <_putc_r+0x52>
 80160a4:	4622      	mov	r2, r4
 80160a6:	4629      	mov	r1, r5
 80160a8:	4630      	mov	r0, r6
 80160aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160ae:	f7fd bf85 	b.w	8013fbc <__swbuf_r>
 80160b2:	4b09      	ldr	r3, [pc, #36]	; (80160d8 <_putc_r+0x64>)
 80160b4:	429c      	cmp	r4, r3
 80160b6:	d101      	bne.n	80160bc <_putc_r+0x48>
 80160b8:	68b4      	ldr	r4, [r6, #8]
 80160ba:	e7e8      	b.n	801608e <_putc_r+0x1a>
 80160bc:	4b07      	ldr	r3, [pc, #28]	; (80160dc <_putc_r+0x68>)
 80160be:	429c      	cmp	r4, r3
 80160c0:	bf08      	it	eq
 80160c2:	68f4      	ldreq	r4, [r6, #12]
 80160c4:	e7e3      	b.n	801608e <_putc_r+0x1a>
 80160c6:	6823      	ldr	r3, [r4, #0]
 80160c8:	1c5a      	adds	r2, r3, #1
 80160ca:	6022      	str	r2, [r4, #0]
 80160cc:	701d      	strb	r5, [r3, #0]
 80160ce:	b2e8      	uxtb	r0, r5
 80160d0:	bd70      	pop	{r4, r5, r6, pc}
 80160d2:	bf00      	nop
 80160d4:	080165b4 	.word	0x080165b4
 80160d8:	080165d4 	.word	0x080165d4
 80160dc:	08016594 	.word	0x08016594

080160e0 <_read_r>:
 80160e0:	b538      	push	{r3, r4, r5, lr}
 80160e2:	4c07      	ldr	r4, [pc, #28]	; (8016100 <_read_r+0x20>)
 80160e4:	4605      	mov	r5, r0
 80160e6:	4608      	mov	r0, r1
 80160e8:	4611      	mov	r1, r2
 80160ea:	2200      	movs	r2, #0
 80160ec:	6022      	str	r2, [r4, #0]
 80160ee:	461a      	mov	r2, r3
 80160f0:	f7f7 f9cc 	bl	800d48c <_read>
 80160f4:	1c43      	adds	r3, r0, #1
 80160f6:	d102      	bne.n	80160fe <_read_r+0x1e>
 80160f8:	6823      	ldr	r3, [r4, #0]
 80160fa:	b103      	cbz	r3, 80160fe <_read_r+0x1e>
 80160fc:	602b      	str	r3, [r5, #0]
 80160fe:	bd38      	pop	{r3, r4, r5, pc}
 8016100:	200011fc 	.word	0x200011fc

08016104 <strncmp>:
 8016104:	b510      	push	{r4, lr}
 8016106:	b16a      	cbz	r2, 8016124 <strncmp+0x20>
 8016108:	3901      	subs	r1, #1
 801610a:	1884      	adds	r4, r0, r2
 801610c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016110:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016114:	4293      	cmp	r3, r2
 8016116:	d103      	bne.n	8016120 <strncmp+0x1c>
 8016118:	42a0      	cmp	r0, r4
 801611a:	d001      	beq.n	8016120 <strncmp+0x1c>
 801611c:	2b00      	cmp	r3, #0
 801611e:	d1f5      	bne.n	801610c <strncmp+0x8>
 8016120:	1a98      	subs	r0, r3, r2
 8016122:	bd10      	pop	{r4, pc}
 8016124:	4610      	mov	r0, r2
 8016126:	e7fc      	b.n	8016122 <strncmp+0x1e>

08016128 <__ascii_wctomb>:
 8016128:	b149      	cbz	r1, 801613e <__ascii_wctomb+0x16>
 801612a:	2aff      	cmp	r2, #255	; 0xff
 801612c:	bf85      	ittet	hi
 801612e:	238a      	movhi	r3, #138	; 0x8a
 8016130:	6003      	strhi	r3, [r0, #0]
 8016132:	700a      	strbls	r2, [r1, #0]
 8016134:	f04f 30ff 	movhi.w	r0, #4294967295
 8016138:	bf98      	it	ls
 801613a:	2001      	movls	r0, #1
 801613c:	4770      	bx	lr
 801613e:	4608      	mov	r0, r1
 8016140:	4770      	bx	lr

08016142 <_malloc_usable_size_r>:
 8016142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016146:	1f18      	subs	r0, r3, #4
 8016148:	2b00      	cmp	r3, #0
 801614a:	bfbc      	itt	lt
 801614c:	580b      	ldrlt	r3, [r1, r0]
 801614e:	18c0      	addlt	r0, r0, r3
 8016150:	4770      	bx	lr
	...

08016154 <_init>:
 8016154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016156:	bf00      	nop
 8016158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801615a:	bc08      	pop	{r3}
 801615c:	469e      	mov	lr, r3
 801615e:	4770      	bx	lr

08016160 <_fini>:
 8016160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016162:	bf00      	nop
 8016164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016166:	bc08      	pop	{r3}
 8016168:	469e      	mov	lr, r3
 801616a:	4770      	bx	lr
