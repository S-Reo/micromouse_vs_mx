
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         00009af8  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000440  08011af8  08011af8  00021af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08011f38  08011f38  000301fc  2**0
                  CONTENTS
  6 .ARM          00000008  08011f38  08011f38  00021f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08011f40  08011f40  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08011f40  08011f40  00021f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08011f44  08011f44  00021f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001fc  20000000  08011f48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001b28  200001fc  08012144  000301fc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20001d24  08012144  00031d24  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002cff3  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00005a36  00000000  00000000  0005d21f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000127f5  00000000  00000000  00062c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000012a0  00000000  00000000  00075450  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000031a8  00000000  00000000  000766f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00027433  00000000  00000000  00079898  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00016e0b  00000000  00000000  000a0ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000ca685  00000000  00000000  000b7ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  0018215b  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000054e0  00000000  00000000  001821d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001fc 	.word	0x200001fc
 800801c:	00000000 	.word	0x00000000
 8008020:	08011ae0 	.word	0x08011ae0

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000200 	.word	0x20000200
 800803c:	08011ae0 	.word	0x08011ae0

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <Explore_IT>:
	//4つめが終わる前に0.5msが過ぎる説。
}


void Explore_IT()
{
 8008df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

//*-----------------*/

	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8008dfc:	f8df c2f8 	ldr.w	ip, [pc, #760]	; 80090f8 <Explore_IT+0x300>
 8008e00:	49a3      	ldr	r1, [pc, #652]	; (8009090 <Explore_IT+0x298>)
 8008e02:	f8dc 4024 	ldr.w	r4, [ip, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8008e06:	48a3      	ldr	r0, [pc, #652]	; (8009094 <Explore_IT+0x29c>)
	TIM4->CNT = INITIAL_PULSE;

	//速度 mm/s
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8008e08:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8009098 <Explore_IT+0x2a0>
 8008e0c:	4da3      	ldr	r5, [pc, #652]	; (800909c <Explore_IT+0x2a4>)
//	}


	//移動量 mm/msを積算

	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8008e0e:	4aa4      	ldr	r2, [pc, #656]	; (80090a0 <Explore_IT+0x2a8>)
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8008e10:	4fa4      	ldr	r7, [pc, #656]	; (80090a4 <Explore_IT+0x2ac>)
    zg_last = zg_law;
	Angle += AngularV * T1;
 8008e12:	4ea5      	ldr	r6, [pc, #660]	; (80090a8 <Explore_IT+0x2b0>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8008e14:	f247 532f 	movw	r3, #29999	; 0x752f
 8008e18:	1b1c      	subs	r4, r3, r4
{
 8008e1a:	ed2d 8b02 	vpush	{d8}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8008e1e:	600c      	str	r4, [r1, #0]
	TIM3->CNT = INITIAL_PULSE;
 8008e20:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8008e24:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 8008e28:	6243      	str	r3, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8008e2a:	eba3 030c 	sub.w	r3, r3, ip
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8008e2e:	ee07 3a10 	vmov	s14, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8008e32:	ee06 4a90 	vmov	s13, r4
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8008e36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8008e3a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8008e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8008e42:	ee66 6aa7 	vmul.f32	s13, s13, s15
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8008e46:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8008e4a:	edc5 6a00 	vstr	s13, [r5]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8008e4e:	ed85 7a01 	vstr	s14, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8008e52:	edd5 7a00 	vldr	s15, [r5]
 8008e56:	ed95 7a01 	vldr	s14, [r5, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8008e5a:	604b      	str	r3, [r1, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8008e5c:	ee77 7a87 	vadd.f32	s15, s15, s14
	ZGyro = ReadIMU(0x37, 0x38);
 8008e60:	2138      	movs	r1, #56	; 0x38
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8008e62:	ee67 7a86 	vmul.f32	s15, s15, s12
	ZGyro = ReadIMU(0x37, 0x38);
 8008e66:	2037      	movs	r0, #55	; 0x37
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8008e68:	edc5 7a02 	vstr	s15, [r5, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8008e6c:	f8d2 c000 	ldr.w	ip, [r2]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8008e70:	ed9f 8a8e 	vldr	s16, [pc, #568]	; 80090ac <Explore_IT+0x2b4>
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8008e74:	4464      	add	r4, ip
 8008e76:	6014      	str	r4, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 8008e78:	6854      	ldr	r4, [r2, #4]
 8008e7a:	4423      	add	r3, r4
 8008e7c:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 8008e7e:	6813      	ldr	r3, [r2, #0]
 8008e80:	6854      	ldr	r4, [r2, #4]
 8008e82:	4423      	add	r3, r4
 8008e84:	6093      	str	r3, [r2, #8]
	ZGyro = ReadIMU(0x37, 0x38);
 8008e86:	f001 fadb 	bl	800a440 <ReadIMU>
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8008e8a:	4a89      	ldr	r2, [pc, #548]	; (80090b0 <Explore_IT+0x2b8>)
	ZGyro = ReadIMU(0x37, 0x38);
 8008e8c:	4b89      	ldr	r3, [pc, #548]	; (80090b4 <Explore_IT+0x2bc>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8008e8e:	edd2 7a00 	vldr	s15, [r2]
	ZGyro = ReadIMU(0x37, 0x38);
 8008e92:	ed83 0a00 	vstr	s0, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8008e96:	ee30 0a67 	vsub.f32	s0, s0, s15
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8008e9a:	6838      	ldr	r0, [r7, #0]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8008e9c:	ee20 8a08 	vmul.f32	s16, s0, s16
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8008ea0:	f7ff fa8a 	bl	80083b8 <__aeabi_f2d>
 8008ea4:	a374      	add	r3, pc, #464	; (adr r3, 8009078 <Explore_IT+0x280>)
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	f7ff fadd 	bl	8008468 <__aeabi_dmul>
 8008eae:	4680      	mov	r8, r0
 8008eb0:	ee18 0a10 	vmov	r0, s16
 8008eb4:	4689      	mov	r9, r1
 8008eb6:	f7ff fa7f 	bl	80083b8 <__aeabi_f2d>
 8008eba:	a371      	add	r3, pc, #452	; (adr r3, 8009080 <Explore_IT+0x288>)
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	f7ff fad2 	bl	8008468 <__aeabi_dmul>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4640      	mov	r0, r8
 8008eca:	4649      	mov	r1, r9
 8008ecc:	f7ff f916 	bl	80080fc <__adddf3>
 8008ed0:	f7ff fdc2 	bl	8008a58 <__aeabi_d2f>
 8008ed4:	4b78      	ldr	r3, [pc, #480]	; (80090b8 <Explore_IT+0x2c0>)
	Angle += AngularV * T1;
 8008ed6:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80090bc <Explore_IT+0x2c4>
#endif

	int wall_d =0,wall_l =0,wall_r =0,wall_f=0;
		int ang_out=0;

		if( Pos.Dir == front || Pos.Act == compensate || Pos.Act == rotate)
 8008eda:	4a79      	ldr	r2, [pc, #484]	; (80090c0 <Explore_IT+0x2c8>)
    zg_last = zg_law;
 8008edc:	ed87 8a00 	vstr	s16, [r7]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8008ee0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8008ee4:	6018      	str	r0, [r3, #0]
	Angle += AngularV * T1;
 8008ee6:	edd3 6a00 	vldr	s13, [r3]
 8008eea:	edd6 7a00 	vldr	s15, [r6]
		if( Pos.Dir == front || Pos.Act == compensate || Pos.Act == rotate)
 8008eee:	7913      	ldrb	r3, [r2, #4]
	Angle += AngularV * T1;
 8008ef0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008ef4:	edc6 7a00 	vstr	s15, [r6]
		if( Pos.Dir == front || Pos.Act == compensate || Pos.Act == rotate)
 8008ef8:	b123      	cbz	r3, 8008f04 <Explore_IT+0x10c>
 8008efa:	7993      	ldrb	r3, [r2, #6]
 8008efc:	2b06      	cmp	r3, #6
 8008efe:	d001      	beq.n	8008f04 <Explore_IT+0x10c>
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d113      	bne.n	8008f2c <Explore_IT+0x134>
		{
			if( Pid[A_VELO_PID].flag == 1 )
 8008f04:	4b6f      	ldr	r3, [pc, #444]	; (80090c4 <Explore_IT+0x2cc>)
 8008f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f08:	2a01      	cmp	r2, #1
 8008f0a:	d06f      	beq.n	8008fec <Explore_IT+0x1f4>
			{
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
				TargetAngularV = (float)ang_out;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
			}
			else if( Pid[D_WALL_PID].flag == 1 )
 8008f0c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008f0e:	2801      	cmp	r0, #1
 8008f10:	d07d      	beq.n	800900e <Explore_IT+0x216>
			{
				wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
				TargetAngularV = (float)wall_d*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
			}
			else if( Pid[L_WALL_PID].flag == 1 )
 8008f12:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008f16:	2a01      	cmp	r2, #1
 8008f18:	d04c      	beq.n	8008fb4 <Explore_IT+0x1bc>
			{
				wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
				TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。

			}
			else if( Pid[R_WALL_PID].flag == 1 )
 8008f1a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008f1e:	2a01      	cmp	r2, #1
 8008f20:	f000 80a0 	beq.w	8009064 <Explore_IT+0x26c>
			{
				wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
			}
			else if( Pid[F_WALL_PID].flag == 1)
 8008f24:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d07c      	beq.n	8009026 <Explore_IT+0x22e>
 8008f2c:	4b66      	ldr	r3, [pc, #408]	; (80090c8 <Explore_IT+0x2d0>)
 8008f2e:	4c67      	ldr	r4, [pc, #412]	; (80090cc <Explore_IT+0x2d4>)

				//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
			}
		}

	TargetVelocity[BODY] += Acceleration;
 8008f30:	4967      	ldr	r1, [pc, #412]	; (80090d0 <Explore_IT+0x2d8>)
	//AngularAcceleration += AngularLeapsity;
	TargetAngularV += AngularAcceleration;
 8008f32:	4a68      	ldr	r2, [pc, #416]	; (80090d4 <Explore_IT+0x2dc>)
	TargetVelocity[BODY] += Acceleration;
 8008f34:	ed91 7a00 	vldr	s14, [r1]
 8008f38:	edd4 7a02 	vldr	s15, [r4, #8]
	//TargetAngularV += AngularAcceleration;
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8008f3c:	eddf 6a66 	vldr	s13, [pc, #408]	; 80090d8 <Explore_IT+0x2e0>
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8008f40:	4e66      	ldr	r6, [pc, #408]	; (80090dc <Explore_IT+0x2e4>)
	TargetVelocity[BODY] += Acceleration;
 8008f42:	ee77 7a87 	vadd.f32	s15, s15, s14
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8008f46:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	TargetVelocity[BODY] += Acceleration;
 8008f4a:	edc4 7a02 	vstr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 8008f4e:	ed92 7a00 	vldr	s14, [r2]
 8008f52:	edd3 7a00 	vldr	s15, [r3]
 8008f56:	ee77 7a87 	vadd.f32	s15, s15, s14
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8008f5a:	2004      	movs	r0, #4
	TargetAngularV += AngularAcceleration;
 8008f5c:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8008f60:	edd4 7a02 	vldr	s15, [r4, #8]
 8008f64:	ed93 7a00 	vldr	s14, [r3]
 8008f68:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 8008f6c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008f70:	edc4 7a01 	vstr	s15, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 8008f74:	ed93 7a00 	vldr	s14, [r3]
 8008f78:	edd4 7a01 	vldr	s15, [r4, #4]
 8008f7c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8008f80:	edc4 7a00 	vstr	s15, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8008f84:	ed94 0a00 	vldr	s0, [r4]
 8008f88:	edd5 0a00 	vldr	s1, [r5]
 8008f8c:	f001 fbde 	bl	800a74c <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8008f90:	ed94 0a01 	vldr	s0, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8008f94:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8008f96:	edd5 0a01 	vldr	s1, [r5, #4]
 8008f9a:	2005      	movs	r0, #5
 8008f9c:	f001 fbd6 	bl	800a74c <PIDControl>

	//モータに出力
	Motor_Switch( VelocityLeftOut, VelocityRightOut );

}
 8008fa0:	ecbd 8b02 	vpop	{d8}
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8008fa4:	4b4e      	ldr	r3, [pc, #312]	; (80090e0 <Explore_IT+0x2e8>)
 8008fa6:	4601      	mov	r1, r0
 8008fa8:	6019      	str	r1, [r3, #0]
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 8008faa:	6830      	ldr	r0, [r6, #0]
}
 8008fac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 8008fb0:	f001 baee 	b.w	800a590 <Motor_Switch>
				wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
 8008fb4:	4a4b      	ldr	r2, [pc, #300]	; (80090e4 <Explore_IT+0x2ec>)
 8008fb6:	4b4c      	ldr	r3, [pc, #304]	; (80090e8 <Explore_IT+0x2f0>)
 8008fb8:	edd2 0a02 	vldr	s1, [r2, #8]
 8008fbc:	ed93 0a02 	vldr	s0, [r3, #8]
 8008fc0:	4c42      	ldr	r4, [pc, #264]	; (80090cc <Explore_IT+0x2d4>)
 8008fc2:	2002      	movs	r0, #2
				wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 8008fc4:	f001 fbc2 	bl	800a74c <PIDControl>
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 8008fc8:	ee07 0a90 	vmov	s15, r0
 8008fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fd0:	ee17 0a90 	vmov	r0, s15
 8008fd4:	f7ff f9f0 	bl	80083b8 <__aeabi_f2d>
 8008fd8:	a32b      	add	r3, pc, #172	; (adr r3, 8009088 <Explore_IT+0x290>)
 8008fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fde:	f7ff fa43 	bl	8008468 <__aeabi_dmul>
 8008fe2:	f7ff fd39 	bl	8008a58 <__aeabi_d2f>
 8008fe6:	4b38      	ldr	r3, [pc, #224]	; (80090c8 <Explore_IT+0x2d0>)
 8008fe8:	6018      	str	r0, [r3, #0]
 8008fea:	e7a1      	b.n	8008f30 <Explore_IT+0x138>
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 8008fec:	4b3f      	ldr	r3, [pc, #252]	; (80090ec <Explore_IT+0x2f4>)
 8008fee:	4c37      	ldr	r4, [pc, #220]	; (80090cc <Explore_IT+0x2d4>)
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 8008ff0:	ed93 0a00 	vldr	s0, [r3]
 8008ff4:	edd6 0a00 	vldr	s1, [r6]
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	f001 fba7 	bl	800a74c <PIDControl>
				TargetAngularV = (float)ang_out;
 8008ffe:	ee07 0a90 	vmov	s15, r0
 8009002:	4b31      	ldr	r3, [pc, #196]	; (80090c8 <Explore_IT+0x2d0>)
 8009004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009008:	edc3 7a00 	vstr	s15, [r3]
 800900c:	e790      	b.n	8008f30 <Explore_IT+0x138>
				wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800900e:	4b36      	ldr	r3, [pc, #216]	; (80090e8 <Explore_IT+0x2f0>)
 8009010:	4a37      	ldr	r2, [pc, #220]	; (80090f0 <Explore_IT+0x2f8>)
 8009012:	edd3 0a01 	vldr	s1, [r3, #4]
 8009016:	edd2 7a00 	vldr	s15, [r2]
 800901a:	ed93 0a02 	vldr	s0, [r3, #8]
 800901e:	4c2b      	ldr	r4, [pc, #172]	; (80090cc <Explore_IT+0x2d4>)
 8009020:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8009024:	e7ce      	b.n	8008fc4 <Explore_IT+0x1cc>
				wall_f = PIDControl( F_WALL_PID,   4000, (	(Photo[FR]+Photo[FL])));
 8009026:	4b30      	ldr	r3, [pc, #192]	; (80090e8 <Explore_IT+0x2f0>)
 8009028:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80090f4 <Explore_IT+0x2fc>
 800902c:	edd3 7a00 	vldr	s15, [r3]
 8009030:	edd3 0a03 	vldr	s1, [r3, #12]
				TargetVelocity[BODY] = (float)wall_f*0.001;
 8009034:	4c25      	ldr	r4, [pc, #148]	; (80090cc <Explore_IT+0x2d4>)
				wall_f = PIDControl( F_WALL_PID,   4000, (	(Photo[FR]+Photo[FL])));
 8009036:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800903a:	2008      	movs	r0, #8
 800903c:	f001 fb86 	bl	800a74c <PIDControl>
				TargetVelocity[BODY] = (float)wall_f*0.001;
 8009040:	ee07 0a90 	vmov	s15, r0
 8009044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009048:	ee17 0a90 	vmov	r0, s15
 800904c:	f7ff f9b4 	bl	80083b8 <__aeabi_f2d>
 8009050:	a30d      	add	r3, pc, #52	; (adr r3, 8009088 <Explore_IT+0x290>)
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	f7ff fa07 	bl	8008468 <__aeabi_dmul>
 800905a:	f7ff fcfd 	bl	8008a58 <__aeabi_d2f>
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800905e:	4b23      	ldr	r3, [pc, #140]	; (80090ec <Explore_IT+0x2f4>)
				TargetVelocity[BODY] = (float)wall_f*0.001;
 8009060:	60a0      	str	r0, [r4, #8]
 8009062:	e7c5      	b.n	8008ff0 <Explore_IT+0x1f8>
				wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 8009064:	4a20      	ldr	r2, [pc, #128]	; (80090e8 <Explore_IT+0x2f0>)
 8009066:	4b1f      	ldr	r3, [pc, #124]	; (80090e4 <Explore_IT+0x2ec>)
 8009068:	edd2 0a01 	vldr	s1, [r2, #4]
 800906c:	ed93 0a01 	vldr	s0, [r3, #4]
 8009070:	4c16      	ldr	r4, [pc, #88]	; (80090cc <Explore_IT+0x2d4>)
 8009072:	2003      	movs	r0, #3
 8009074:	e7a6      	b.n	8008fc4 <Explore_IT+0x1cc>
 8009076:	bf00      	nop
 8009078:	7ae147ae 	.word	0x7ae147ae
 800907c:	3fefae14 	.word	0x3fefae14
 8009080:	47ae147b 	.word	0x47ae147b
 8009084:	3f847ae1 	.word	0x3f847ae1
 8009088:	d2f1a9fc 	.word	0xd2f1a9fc
 800908c:	3f50624d 	.word	0x3f50624d
 8009090:	20001984 	.word	0x20001984
 8009094:	40000800 	.word	0x40000800
 8009098:	3f8177cd 	.word	0x3f8177cd
 800909c:	200017d4 	.word	0x200017d4
 80090a0:	200017c8 	.word	0x200017c8
 80090a4:	20000218 	.word	0x20000218
 80090a8:	20000224 	.word	0x20000224
 80090ac:	3a8b7d78 	.word	0x3a8b7d78
 80090b0:	200002d0 	.word	0x200002d0
 80090b4:	200002cc 	.word	0x200002cc
 80090b8:	20000230 	.word	0x20000230
 80090bc:	3a83126f 	.word	0x3a83126f
 80090c0:	20000000 	.word	0x20000000
 80090c4:	20000314 	.word	0x20000314
 80090c8:	200017a4 	.word	0x200017a4
 80090cc:	20001794 	.word	0x20001794
 80090d0:	20000220 	.word	0x20000220
 80090d4:	20000228 	.word	0x20000228
 80090d8:	4209999a 	.word	0x4209999a
 80090dc:	200018c0 	.word	0x200018c0
 80090e0:	200018dc 	.word	0x200018dc
 80090e4:	200018c8 	.word	0x200018c8
 80090e8:	20001808 	.word	0x20001808
 80090ec:	200017c0 	.word	0x200017c0
 80090f0:	200017b8 	.word	0x200017b8
 80090f4:	457a0000 	.word	0x457a0000
 80090f8:	40000400 	.word	0x40000400
 80090fc:	00000000 	.word	0x00000000

08009100 <WritingFree_IT>:
void WritingFree_IT()
{
 8009100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009104:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 80092f4 <WritingFree_IT+0x1f4>
 8009108:	4967      	ldr	r1, [pc, #412]	; (80092a8 <WritingFree_IT+0x1a8>)
 800910a:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800910e:	4867      	ldr	r0, [pc, #412]	; (80092ac <WritingFree_IT+0x1ac>)
	TIM4->CNT = INITIAL_PULSE;

	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009110:	eddf 6a67 	vldr	s13, [pc, #412]	; 80092b0 <WritingFree_IT+0x1b0>
 8009114:	4d67      	ldr	r5, [pc, #412]	; (80092b4 <WritingFree_IT+0x1b4>)
//			velodebug_flag = 0;
//		}
//
//	}
	//移動量 mm/msを積算
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8009116:	4a68      	ldr	r2, [pc, #416]	; (80092b8 <WritingFree_IT+0x1b8>)
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8009118:	4f68      	ldr	r7, [pc, #416]	; (80092bc <WritingFree_IT+0x1bc>)
			}
		}
#endif

	AngularAcceleration += AngularLeapsity;
	TargetVelocity[BODY] += Acceleration;
 800911a:	4c69      	ldr	r4, [pc, #420]	; (80092c0 <WritingFree_IT+0x1c0>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800911c:	f247 532f 	movw	r3, #29999	; 0x752f
 8009120:	1b9e      	subs	r6, r3, r6
{
 8009122:	ed2d 8b02 	vpush	{d8}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009126:	600e      	str	r6, [r1, #0]
	TIM3->CNT = INITIAL_PULSE;
 8009128:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800912c:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 8009130:	6243      	str	r3, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009132:	eba3 030c 	sub.w	r3, r3, ip
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009136:	ee07 3a90 	vmov	s15, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800913a:	ee07 6a10 	vmov	s14, r6
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800913e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009142:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009146:	ee67 7aa6 	vmul.f32	s15, s15, s13
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800914a:	ee27 7a26 	vmul.f32	s14, s14, s13
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800914e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009152:	ed85 7a00 	vstr	s14, [r5]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009156:	edc5 7a01 	vstr	s15, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800915a:	edd5 7a00 	vldr	s15, [r5]
 800915e:	ed95 7a01 	vldr	s14, [r5, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009162:	604b      	str	r3, [r1, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009164:	ee77 7a87 	vadd.f32	s15, s15, s14
	ZGyro = ReadIMU(0x37, 0x38);
 8009168:	2138      	movs	r1, #56	; 0x38
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800916a:	ee67 7aa8 	vmul.f32	s15, s15, s17
	ZGyro = ReadIMU(0x37, 0x38);
 800916e:	2037      	movs	r0, #55	; 0x37
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009170:	edc5 7a02 	vstr	s15, [r5, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8009174:	f8d2 c000 	ldr.w	ip, [r2]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8009178:	ed9f 8a52 	vldr	s16, [pc, #328]	; 80092c4 <WritingFree_IT+0x1c4>
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800917c:	4466      	add	r6, ip
 800917e:	6016      	str	r6, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 8009180:	6856      	ldr	r6, [r2, #4]
 8009182:	4433      	add	r3, r6
 8009184:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 8009186:	6813      	ldr	r3, [r2, #0]
 8009188:	6856      	ldr	r6, [r2, #4]
 800918a:	4433      	add	r3, r6
 800918c:	6093      	str	r3, [r2, #8]
	ZGyro = ReadIMU(0x37, 0x38);
 800918e:	f001 f957 	bl	800a440 <ReadIMU>
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8009192:	4a4d      	ldr	r2, [pc, #308]	; (80092c8 <WritingFree_IT+0x1c8>)
	ZGyro = ReadIMU(0x37, 0x38);
 8009194:	4b4d      	ldr	r3, [pc, #308]	; (80092cc <WritingFree_IT+0x1cc>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8009196:	edd2 7a00 	vldr	s15, [r2]
	ZGyro = ReadIMU(0x37, 0x38);
 800919a:	ed83 0a00 	vstr	s0, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800919e:	ee30 0a67 	vsub.f32	s0, s0, s15
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 80091a2:	6838      	ldr	r0, [r7, #0]
	AngularAcceleration += AngularLeapsity;
 80091a4:	4e4a      	ldr	r6, [pc, #296]	; (80092d0 <WritingFree_IT+0x1d0>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 80091a6:	ee20 8a08 	vmul.f32	s16, s0, s16
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 80091aa:	f7ff f905 	bl	80083b8 <__aeabi_f2d>
 80091ae:	a33a      	add	r3, pc, #232	; (adr r3, 8009298 <WritingFree_IT+0x198>)
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	f7ff f958 	bl	8008468 <__aeabi_dmul>
 80091b8:	4680      	mov	r8, r0
 80091ba:	ee18 0a10 	vmov	r0, s16
 80091be:	4689      	mov	r9, r1
 80091c0:	f7ff f8fa 	bl	80083b8 <__aeabi_f2d>
 80091c4:	a336      	add	r3, pc, #216	; (adr r3, 80092a0 <WritingFree_IT+0x1a0>)
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	f7ff f94d 	bl	8008468 <__aeabi_dmul>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4640      	mov	r0, r8
 80091d4:	4649      	mov	r1, r9
 80091d6:	f7fe ff91 	bl	80080fc <__adddf3>
 80091da:	f7ff fc3d 	bl	8008a58 <__aeabi_d2f>
 80091de:	4b3d      	ldr	r3, [pc, #244]	; (80092d4 <WritingFree_IT+0x1d4>)
	Angle += AngularV * T1;
 80091e0:	493d      	ldr	r1, [pc, #244]	; (80092d8 <WritingFree_IT+0x1d8>)
 80091e2:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80092dc <WritingFree_IT+0x1dc>
	AngularAcceleration += AngularLeapsity;
 80091e6:	4a3e      	ldr	r2, [pc, #248]	; (80092e0 <WritingFree_IT+0x1e0>)
 80091e8:	ed96 6a00 	vldr	s12, [r6]
	TargetVelocity[BODY] += Acceleration;
 80091ec:	f8df c108 	ldr.w	ip, [pc, #264]	; 80092f8 <WritingFree_IT+0x1f8>
	TargetAngularV += AngularAcceleration;

	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 80091f0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80092e4 <WritingFree_IT+0x1e4>
    zg_last = zg_law;
 80091f4:	ed87 8a00 	vstr	s16, [r7]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 80091f8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80091fc:	6018      	str	r0, [r3, #0]
	Angle += AngularV * T1;
 80091fe:	edd3 5a00 	vldr	s11, [r3]
 8009202:	ed91 7a00 	vldr	s14, [r1]
	TargetAngularV += AngularAcceleration;
 8009206:	4b38      	ldr	r3, [pc, #224]	; (80092e8 <WritingFree_IT+0x1e8>)
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009208:	4e38      	ldr	r6, [pc, #224]	; (80092ec <WritingFree_IT+0x1ec>)
	Angle += AngularV * T1;
 800920a:	eea5 7aa7 	vfma.f32	s14, s11, s15
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800920e:	2004      	movs	r0, #4
	Angle += AngularV * T1;
 8009210:	ed81 7a00 	vstr	s14, [r1]
	AngularAcceleration += AngularLeapsity;
 8009214:	edd2 7a00 	vldr	s15, [r2]
 8009218:	ee77 7a86 	vadd.f32	s15, s15, s12
 800921c:	edc2 7a00 	vstr	s15, [r2]
	TargetVelocity[BODY] += Acceleration;
 8009220:	ed9c 7a00 	vldr	s14, [ip]
 8009224:	edd4 7a02 	vldr	s15, [r4, #8]
 8009228:	ee77 7a87 	vadd.f32	s15, s15, s14
 800922c:	edc4 7a02 	vstr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 8009230:	ed92 7a00 	vldr	s14, [r2]
 8009234:	edd3 7a00 	vldr	s15, [r3]
 8009238:	ee77 7a87 	vadd.f32	s15, s15, s14
 800923c:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009240:	edd4 7a02 	vldr	s15, [r4, #8]
 8009244:	ed93 7a00 	vldr	s14, [r3]
 8009248:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800924c:	eee7 7a28 	vfma.f32	s15, s14, s17
 8009250:	edc4 7a01 	vstr	s15, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 8009254:	ed93 7a00 	vldr	s14, [r3]
 8009258:	edd4 7a01 	vldr	s15, [r4, #4]
 800925c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009260:	edc4 7a00 	vstr	s15, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009264:	ed94 0a00 	vldr	s0, [r4]
 8009268:	edd5 0a00 	vldr	s1, [r5]
 800926c:	f001 fa6e 	bl	800a74c <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009270:	ed94 0a01 	vldr	s0, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009274:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009276:	edd5 0a01 	vldr	s1, [r5, #4]
 800927a:	2005      	movs	r0, #5
 800927c:	f001 fa66 	bl	800a74c <PIDControl>

	Motor_Switch( VelocityLeftOut, VelocityRightOut );


}
 8009280:	ecbd 8b02 	vpop	{d8}
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009284:	4b1a      	ldr	r3, [pc, #104]	; (80092f0 <WritingFree_IT+0x1f0>)
 8009286:	4601      	mov	r1, r0
 8009288:	6019      	str	r1, [r3, #0]
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800928a:	6830      	ldr	r0, [r6, #0]
}
 800928c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 8009290:	f001 b97e 	b.w	800a590 <Motor_Switch>
 8009294:	f3af 8000 	nop.w
 8009298:	7ae147ae 	.word	0x7ae147ae
 800929c:	3fefae14 	.word	0x3fefae14
 80092a0:	47ae147b 	.word	0x47ae147b
 80092a4:	3f847ae1 	.word	0x3f847ae1
 80092a8:	20001984 	.word	0x20001984
 80092ac:	40000800 	.word	0x40000800
 80092b0:	3f8177cd 	.word	0x3f8177cd
 80092b4:	200017d4 	.word	0x200017d4
 80092b8:	200017c8 	.word	0x200017c8
 80092bc:	2000021c 	.word	0x2000021c
 80092c0:	20001794 	.word	0x20001794
 80092c4:	3a8b7d78 	.word	0x3a8b7d78
 80092c8:	200002d0 	.word	0x200002d0
 80092cc:	200002cc 	.word	0x200002cc
 80092d0:	2000022c 	.word	0x2000022c
 80092d4:	20000230 	.word	0x20000230
 80092d8:	20000224 	.word	0x20000224
 80092dc:	3a83126f 	.word	0x3a83126f
 80092e0:	20000228 	.word	0x20000228
 80092e4:	4209999a 	.word	0x4209999a
 80092e8:	200017a4 	.word	0x200017a4
 80092ec:	200018c0 	.word	0x200018c0
 80092f0:	200018dc 	.word	0x200018dc
 80092f4:	40000400 	.word	0x40000400
 80092f8:	20000220 	.word	0x20000220

080092fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092fc:	b570      	push	{r4, r5, r6, lr}
	if( htim == &htim1)
 80092fe:	4b1e      	ldr	r3, [pc, #120]	; (8009378 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8009300:	4298      	cmp	r0, r3
{
 8009302:	b082      	sub	sp, #8
	if( htim == &htim1)
 8009304:	d004      	beq.n	8009310 <HAL_TIM_PeriodElapsedCallback+0x14>
		default :
			break;
		}
	}

	if( htim == &htim8)
 8009306:	4b1d      	ldr	r3, [pc, #116]	; (800937c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8009308:	4298      	cmp	r0, r3
 800930a:	d00e      	beq.n	800932a <HAL_TIM_PeriodElapsedCallback+0x2e>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
	}
}
 800930c:	b002      	add	sp, #8
 800930e:	bd70      	pop	{r4, r5, r6, pc}
		switch(IT_mode){
 8009310:	4b1b      	ldr	r3, [pc, #108]	; (8009380 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b06      	cmp	r3, #6
 8009316:	d029      	beq.n	800936c <HAL_TIM_PeriodElapsedCallback+0x70>
 8009318:	2b07      	cmp	r3, #7
 800931a:	d1f4      	bne.n	8009306 <HAL_TIM_PeriodElapsedCallback+0xa>
 800931c:	9001      	str	r0, [sp, #4]
			WritingFree_IT();
 800931e:	f7ff feef 	bl	8009100 <WritingFree_IT>
 8009322:	9801      	ldr	r0, [sp, #4]
	if( htim == &htim8)
 8009324:	4b15      	ldr	r3, [pc, #84]	; (800937c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8009326:	4298      	cmp	r0, r3
 8009328:	d1f0      	bne.n	800930c <HAL_TIM_PeriodElapsedCallback+0x10>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800932a:	4e16      	ldr	r6, [pc, #88]	; (8009384 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800932c:	4c16      	ldr	r4, [pc, #88]	; (8009388 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800932e:	6831      	ldr	r1, [r6, #0]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 8009330:	4d16      	ldr	r5, [pc, #88]	; (800938c <HAL_TIM_PeriodElapsedCallback+0x90>)
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 8009332:	2200      	movs	r2, #0
 8009334:	200a      	movs	r0, #10
 8009336:	f001 f989 	bl	800a64c <GetWallDataAverage>
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800933a:	6871      	ldr	r1, [r6, #4]
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800933c:	ed84 0a00 	vstr	s0, [r4]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 8009340:	2201      	movs	r2, #1
 8009342:	200a      	movs	r0, #10
 8009344:	f001 f982 	bl	800a64c <GetWallDataAverage>
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 8009348:	6829      	ldr	r1, [r5, #0]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800934a:	ed84 0a01 	vstr	s0, [r4, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800934e:	2202      	movs	r2, #2
 8009350:	200a      	movs	r0, #10
 8009352:	f001 f97b 	bl	800a64c <GetWallDataAverage>
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 8009356:	6869      	ldr	r1, [r5, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 8009358:	ed84 0a02 	vstr	s0, [r4, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800935c:	2203      	movs	r2, #3
 800935e:	200a      	movs	r0, #10
 8009360:	f001 f974 	bl	800a64c <GetWallDataAverage>
 8009364:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8009368:	b002      	add	sp, #8
 800936a:	bd70      	pop	{r4, r5, r6, pc}
 800936c:	9001      	str	r0, [sp, #4]
			Explore_IT();
 800936e:	f7ff fd43 	bl	8008df8 <Explore_IT>
			break;
 8009372:	9801      	ldr	r0, [sp, #4]
 8009374:	e7c7      	b.n	8009306 <HAL_TIM_PeriodElapsedCallback+0xa>
 8009376:	bf00      	nop
 8009378:	20001c7c 	.word	0x20001c7c
 800937c:	20001a34 	.word	0x20001a34
 8009380:	20001788 	.word	0x20001788
 8009384:	200002b8 	.word	0x200002b8
 8009388:	20001808 	.word	0x20001808
 800938c:	200002c4 	.word	0x200002c4

08009390 <flashStoreNodes>:
			}
	}
}
void flashStoreNodes()
{
	uint32_t address=start_adress_sector1;
 8009390:	4b1b      	ldr	r3, [pc, #108]	; (8009400 <flashStoreNodes+0x70>)
{
 8009392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t address=start_adress_sector1;
 8009396:	f8d3 9000 	ldr.w	r9, [r3]
 800939a:	f8df a068 	ldr.w	sl, [pc, #104]	; 8009404 <flashStoreNodes+0x74>
 800939e:	ebc9 7889 	rsb	r8, r9, r9, lsl #30
 80093a2:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80093a6:	464c      	mov	r4, r9
 80093a8:	2700      	movs	r7, #0
 80093aa:	eb07 0508 	add.w	r5, r7, r8

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				FLASH_Write_HalfWord(address+0,my_map.RawNode[i][j].existence);
 80093ae:	4455      	add	r5, sl
 80093b0:	f104 0622 	add.w	r6, r4, #34	; 0x22
 80093b4:	f815 1024 	ldrb.w	r1, [r5, r4, lsl #2]
 80093b8:	4620      	mov	r0, r4
				address += 2;
 80093ba:	3402      	adds	r4, #2
				FLASH_Write_HalfWord(address+0,my_map.RawNode[i][j].existence);
 80093bc:	f000 fff0 	bl	800a3a0 <FLASH_Write_HalfWord>
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 80093c0:	42b4      	cmp	r4, r6
 80093c2:	d1f7      	bne.n	80093b4 <flashStoreNodes+0x24>
 80093c4:	3788      	adds	r7, #136	; 0x88
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 80093c6:	f5b7 6f08 	cmp.w	r7, #2176	; 0x880
 80093ca:	f1a8 0888 	sub.w	r8, r8, #136	; 0x88
 80093ce:	d1ec      	bne.n	80093aa <flashStoreNodes+0x1a>
 80093d0:	4f0c      	ldr	r7, [pc, #48]	; (8009404 <flashStoreNodes+0x74>)
 80093d2:	f509 7408 	add.w	r4, r9, #544	; 0x220
 80093d6:	f509 6988 	add.w	r9, r9, #1088	; 0x440
 80093da:	f104 0620 	add.w	r6, r4, #32
	uint32_t address=start_adress_sector1;
 80093de:	463d      	mov	r5, r7
	//列
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				FLASH_Write_HalfWord(address+0,my_map.ColumnNode[i][j].existence);
 80093e0:	f895 1880 	ldrb.w	r1, [r5, #2176]	; 0x880
 80093e4:	4620      	mov	r0, r4
				address += 2;
 80093e6:	3402      	adds	r4, #2
				FLASH_Write_HalfWord(address+0,my_map.ColumnNode[i][j].existence);
 80093e8:	f000 ffda 	bl	800a3a0 <FLASH_Write_HalfWord>
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 80093ec:	42a6      	cmp	r6, r4
 80093ee:	f105 0508 	add.w	r5, r5, #8
 80093f2:	d1f5      	bne.n	80093e0 <flashStoreNodes+0x50>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 80093f4:	454e      	cmp	r6, r9
 80093f6:	f107 0780 	add.w	r7, r7, #128	; 0x80
 80093fa:	d1ee      	bne.n	80093da <flashStoreNodes+0x4a>
			}
	}
}
 80093fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009400:	08011c0c 	.word	0x08011c0c
 8009404:	20000684 	.word	0x20000684

08009408 <flashCopyNodesToRam>:
	}

}
//評価値マップ生成。
void flashCopyNodesToRam()
{
 8009408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t address=start_adress_sector1;
 800940c:	4b21      	ldr	r3, [pc, #132]	; (8009494 <flashCopyNodesToRam+0x8c>)
 800940e:	f8df b088 	ldr.w	fp, [pc, #136]	; 8009498 <flashCopyNodesToRam+0x90>
 8009412:	f8d3 a000 	ldr.w	sl, [r3]
 8009416:	f04f 0800 	mov.w	r8, #0
 800941a:	ebca 798a 	rsb	r9, sl, sl, lsl #30
{
 800941e:	b083      	sub	sp, #12
 8009420:	ea4f 0989 	mov.w	r9, r9, lsl #2
	uint32_t address=start_adress_sector1;
 8009424:	4654      	mov	r4, sl

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				uint32_t wall_data=0;
 8009426:	4647      	mov	r7, r8
 8009428:	eb08 0509 	add.w	r5, r8, r9
				FLASH_Read_Word(address, &wall_data);
				my_map.RawNode[i][j].existence = wall_data;
 800942c:	445d      	add	r5, fp
 800942e:	f104 0622 	add.w	r6, r4, #34	; 0x22
				FLASH_Read_Word(address, &wall_data);
 8009432:	4620      	mov	r0, r4
 8009434:	a901      	add	r1, sp, #4
				uint32_t wall_data=0;
 8009436:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 8009438:	f000 ffda 	bl	800a3f0 <FLASH_Read_Word>
				my_map.RawNode[i][j].existence = wall_data;
 800943c:	9b01      	ldr	r3, [sp, #4]
 800943e:	f805 3024 	strb.w	r3, [r5, r4, lsl #2]
				address += 2;
 8009442:	3402      	adds	r4, #2
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 8009444:	42b4      	cmp	r4, r6
 8009446:	d1f4      	bne.n	8009432 <flashCopyNodesToRam+0x2a>
 8009448:	f108 0888 	add.w	r8, r8, #136	; 0x88
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800944c:	f5b8 6f08 	cmp.w	r8, #2176	; 0x880
 8009450:	f1a9 0988 	sub.w	r9, r9, #136	; 0x88
 8009454:	d1e8      	bne.n	8009428 <flashCopyNodesToRam+0x20>
 8009456:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8009498 <flashCopyNodesToRam+0x90>
 800945a:	f50a 7408 	add.w	r4, sl, #544	; 0x220
	}
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				uint32_t wall_data=0;
 800945e:	2700      	movs	r7, #0
 8009460:	f50a 6a88 	add.w	sl, sl, #1088	; 0x440
 8009464:	f104 0620 	add.w	r6, r4, #32
	uint32_t address=start_adress_sector1;
 8009468:	4645      	mov	r5, r8
				FLASH_Read_Word(address, &wall_data);
 800946a:	4620      	mov	r0, r4
 800946c:	a901      	add	r1, sp, #4
				my_map.ColumnNode[i][j].existence = wall_data;
				address += 2;
 800946e:	3402      	adds	r4, #2
				uint32_t wall_data=0;
 8009470:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 8009472:	f000 ffbd 	bl	800a3f0 <FLASH_Read_Word>
				my_map.ColumnNode[i][j].existence = wall_data;
 8009476:	9b01      	ldr	r3, [sp, #4]
 8009478:	f885 3880 	strb.w	r3, [r5, #2176]	; 0x880
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800947c:	42a6      	cmp	r6, r4
 800947e:	f105 0508 	add.w	r5, r5, #8
 8009482:	d1f2      	bne.n	800946a <flashCopyNodesToRam+0x62>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 8009484:	4556      	cmp	r6, sl
 8009486:	f108 0880 	add.w	r8, r8, #128	; 0x80
 800948a:	d1eb      	bne.n	8009464 <flashCopyNodesToRam+0x5c>
			}
	}
}
 800948c:	b003      	add	sp, #12
 800948e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009492:	bf00      	nop
 8009494:	08011c0c 	.word	0x08011c0c
 8009498:	20000684 	.word	0x20000684

0800949c <printAllNodeExistence>:
        printf("\r\n");
    }
    printf("\r\n");
}
void printAllNodeExistence(maze_node *mn)
{
 800949c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a0:	4680      	mov	r8, r0
 80094a2:	4605      	mov	r5, r0
    printf("全ノードの壁の存在\r\n");
 80094a4:	481a      	ldr	r0, [pc, #104]	; (8009510 <printAllNodeExistence+0x74>)
    //行を増やして同じ処理
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            printf("%u,",mn->RawNode[i][j].existence);
 80094a6:	4e1b      	ldr	r6, [pc, #108]	; (8009514 <printAllNodeExistence+0x78>)
        }
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            printf("%u",mn->ColumnNode[i+1][j].existence);
 80094a8:	4f1b      	ldr	r7, [pc, #108]	; (8009518 <printAllNodeExistence+0x7c>)
            if(j < NUMBER_OF_SQUARES_Y-1)
                printf(",");
        }
        printf("\r\n");
 80094aa:	f8df a070 	ldr.w	sl, [pc, #112]	; 800951c <printAllNodeExistence+0x80>
 80094ae:	f108 0880 	add.w	r8, r8, #128	; 0x80
 80094b2:	f505 6908 	add.w	r9, r5, #2176	; 0x880
    printf("全ノードの壁の存在\r\n");
 80094b6:	f005 fb25 	bl	800eb04 <puts>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 80094ba:	2401      	movs	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 80094bc:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 80094c0:	4630      	mov	r0, r6
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 80094c2:	3401      	adds	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 80094c4:	f005 fa96 	bl	800e9f4 <iprintf>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 80094c8:	2c11      	cmp	r4, #17
 80094ca:	d1f7      	bne.n	80094bc <printAllNodeExistence+0x20>
            printf("%u",mn->ColumnNode[i+1][j].existence);
 80094cc:	f898 1880 	ldrb.w	r1, [r8, #2176]	; 0x880
 80094d0:	4638      	mov	r0, r7
 80094d2:	f005 fa8f 	bl	800e9f4 <iprintf>
 80094d6:	f108 0b78 	add.w	fp, r8, #120	; 0x78
 80094da:	4644      	mov	r4, r8
                printf(",");
 80094dc:	202c      	movs	r0, #44	; 0x2c
 80094de:	f005 faa1 	bl	800ea24 <putchar>
 80094e2:	3408      	adds	r4, #8
            printf("%u",mn->ColumnNode[i+1][j].existence);
 80094e4:	f894 1880 	ldrb.w	r1, [r4, #2176]	; 0x880
 80094e8:	4638      	mov	r0, r7
 80094ea:	f005 fa83 	bl	800e9f4 <iprintf>
            if(j < NUMBER_OF_SQUARES_Y-1)
 80094ee:	455c      	cmp	r4, fp
 80094f0:	d1f4      	bne.n	80094dc <printAllNodeExistence+0x40>
 80094f2:	f108 0880 	add.w	r8, r8, #128	; 0x80
        printf("\r\n");
 80094f6:	4650      	mov	r0, sl
 80094f8:	f005 fb04 	bl	800eb04 <puts>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 80094fc:	45c8      	cmp	r8, r9
 80094fe:	f105 0588 	add.w	r5, r5, #136	; 0x88
 8009502:	d1da      	bne.n	80094ba <printAllNodeExistence+0x1e>
    }
    printf("\r\n");
 8009504:	4805      	ldr	r0, [pc, #20]	; (800951c <printAllNodeExistence+0x80>)
}
 8009506:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800950a:	f005 bafb 	b.w	800eb04 <puts>
 800950e:	bf00      	nop
 8009510:	08011b10 	.word	0x08011b10
 8009514:	08011b08 	.word	0x08011b08
 8009518:	08011b0c 	.word	0x08011b0c
 800951c:	08011b04 	.word	0x08011b04

08009520 <Simu>:



}
void Simu()
{
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d20      	ldr	r5, [pc, #128]	; (80095a4 <Simu+0x84>)
	//マップに仮でデータを入れる
	printAllNodeExistence(&my_map);
 8009524:	4628      	mov	r0, r5
 8009526:	f7ff ffb9 	bl	800949c <printAllNodeExistence>
 800952a:	f505 6008 	add.w	r0, r5, #2176	; 0x880
 800952e:	462a      	mov	r2, r5
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				my_map.RawNode[i][j].existence = 2;
 8009530:	2102      	movs	r1, #2
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 8009532:	2300      	movs	r3, #0
				my_map.RawNode[i][j].existence = 2;
 8009534:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 8009538:	3301      	adds	r3, #1
 800953a:	2b11      	cmp	r3, #17
 800953c:	d1fa      	bne.n	8009534 <Simu+0x14>
 800953e:	3288      	adds	r2, #136	; 0x88
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 8009540:	4282      	cmp	r2, r0
 8009542:	d1f6      	bne.n	8009532 <Simu+0x12>
 8009544:	4c17      	ldr	r4, [pc, #92]	; (80095a4 <Simu+0x84>)
	}
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				my_map.ColumnNode[i][j].existence = 3;
 8009546:	2103      	movs	r1, #3
 8009548:	f104 0380 	add.w	r3, r4, #128	; 0x80
 800954c:	f884 1880 	strb.w	r1, [r4, #2176]	; 0x880
 8009550:	3408      	adds	r4, #8
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 8009552:	429c      	cmp	r4, r3
 8009554:	d1fa      	bne.n	800954c <Simu+0x2c>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 8009556:	4294      	cmp	r4, r2
 8009558:	d1f6      	bne.n	8009548 <Simu+0x28>
			}
	}
	printAllNodeExistence(&my_map);
 800955a:	4812      	ldr	r0, [pc, #72]	; (80095a4 <Simu+0x84>)
 800955c:	f7ff ff9e 	bl	800949c <printAllNodeExistence>
	//フラッシュに書き込む
	flashStoreNodes();
 8009560:	f7ff ff16 	bl	8009390 <flashStoreNodes>
 8009564:	4a0f      	ldr	r2, [pc, #60]	; (80095a4 <Simu+0x84>)
	//ramをリセット
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
		{
				for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
				{
					my_map.RawNode[i][j].existence = 0;
 8009566:	2100      	movs	r1, #0
				for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 8009568:	2300      	movs	r3, #0
					my_map.RawNode[i][j].existence = 0;
 800956a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
				for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800956e:	3301      	adds	r3, #1
 8009570:	2b11      	cmp	r3, #17
 8009572:	d1fa      	bne.n	800956a <Simu+0x4a>
 8009574:	3288      	adds	r2, #136	; 0x88
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 8009576:	42a2      	cmp	r2, r4
 8009578:	d1f6      	bne.n	8009568 <Simu+0x48>
		}
		for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
		{
				for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
				{
					my_map.ColumnNode[i][j].existence = 0;
 800957a:	2200      	movs	r2, #0
 800957c:	f105 0380 	add.w	r3, r5, #128	; 0x80
 8009580:	f885 2880 	strb.w	r2, [r5, #2176]	; 0x880
 8009584:	3508      	adds	r5, #8
				for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 8009586:	42ab      	cmp	r3, r5
 8009588:	d1fa      	bne.n	8009580 <Simu+0x60>
		for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800958a:	42a3      	cmp	r3, r4
 800958c:	d1f6      	bne.n	800957c <Simu+0x5c>
				}
		}
		printAllNodeExistence(&my_map);
 800958e:	4805      	ldr	r0, [pc, #20]	; (80095a4 <Simu+0x84>)
 8009590:	f7ff ff84 	bl	800949c <printAllNodeExistence>
	//フラッシュを読み出す
	flashCopyNodesToRam();
 8009594:	f7ff ff38 	bl	8009408 <flashCopyNodesToRam>
	//合っているか確認する
	printAllNodeExistence(&my_map);
 8009598:	4802      	ldr	r0, [pc, #8]	; (80095a4 <Simu+0x84>)
}
 800959a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printAllNodeExistence(&my_map);
 800959e:	f7ff bf7d 	b.w	800949c <printAllNodeExistence>
 80095a2:	bf00      	nop
 80095a4:	20000684 	.word	0x20000684

080095a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80095a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095ac:	2400      	movs	r4, #0
{
 80095ae:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095b0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80095b4:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80095b8:	4b45      	ldr	r3, [pc, #276]	; (80096d0 <MX_GPIO_Init+0x128>)
 80095ba:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095bc:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80095be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 80095c0:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80096e0 <MX_GPIO_Init+0x138>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80095c4:	f8df 811c 	ldr.w	r8, [pc, #284]	; 80096e4 <MX_GPIO_Init+0x13c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80095c8:	4f42      	ldr	r7, [pc, #264]	; (80096d4 <MX_GPIO_Init+0x12c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80095ca:	4e43      	ldr	r6, [pc, #268]	; (80096d8 <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80095cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80095d0:	631a      	str	r2, [r3, #48]	; 0x30
 80095d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095d4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80095d8:	9200      	str	r2, [sp, #0]
 80095da:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80095dc:	9401      	str	r4, [sp, #4]
 80095de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095e0:	f042 0204 	orr.w	r2, r2, #4
 80095e4:	631a      	str	r2, [r3, #48]	; 0x30
 80095e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095e8:	f002 0204 	and.w	r2, r2, #4
 80095ec:	9201      	str	r2, [sp, #4]
 80095ee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80095f0:	9402      	str	r4, [sp, #8]
 80095f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095f4:	f042 0201 	orr.w	r2, r2, #1
 80095f8:	631a      	str	r2, [r3, #48]	; 0x30
 80095fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095fc:	f002 0201 	and.w	r2, r2, #1
 8009600:	9202      	str	r2, [sp, #8]
 8009602:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009604:	9403      	str	r4, [sp, #12]
 8009606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009608:	f042 0202 	orr.w	r2, r2, #2
 800960c:	631a      	str	r2, [r3, #48]	; 0x30
 800960e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009610:	f002 0202 	and.w	r2, r2, #2
 8009614:	9203      	str	r2, [sp, #12]
 8009616:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009618:	9404      	str	r4, [sp, #16]
 800961a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800961c:	f042 0208 	orr.w	r2, r2, #8
 8009620:	631a      	str	r2, [r3, #48]	; 0x30
 8009622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009624:	f003 0308 	and.w	r3, r3, #8
 8009628:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800962a:	4622      	mov	r2, r4
 800962c:	4648      	mov	r0, r9
 800962e:	2105      	movs	r1, #5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009630:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 8009632:	f001 fff7 	bl	800b624 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8009636:	4622      	mov	r2, r4
 8009638:	4640      	mov	r0, r8
 800963a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800963e:	f001 fff1 	bl	800b624 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8009642:	4622      	mov	r2, r4
 8009644:	4638      	mov	r0, r7
 8009646:	2104      	movs	r1, #4
 8009648:	f001 ffec 	bl	800b624 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800964c:	4622      	mov	r2, r4
 800964e:	4630      	mov	r0, r6
 8009650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009654:	f001 ffe6 	bl	800b624 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009658:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800965a:	4648      	mov	r0, r9
 800965c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800965e:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009660:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009664:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009668:	f001 fed8 	bl	800b41c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800966c:	4b1b      	ldr	r3, [pc, #108]	; (80096dc <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800966e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009674:	a905      	add	r1, sp, #20
 8009676:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009678:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800967c:	f001 fece 	bl	800b41c <HAL_GPIO_Init>
  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009680:	4640      	mov	r0, r8
 8009682:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009684:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009688:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800968a:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800968e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009690:	f001 fec4 	bl	800b41c <HAL_GPIO_Init>
  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009694:	4638      	mov	r0, r7
 8009696:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009698:	2304      	movs	r3, #4
 800969a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800969c:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096a0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80096a2:	f001 febb 	bl	800b41c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80096a6:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096aa:	a905      	add	r1, sp, #20
 80096ac:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80096ae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096b0:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096b4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096b6:	f001 feb1 	bl	800b41c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80096ba:	4622      	mov	r2, r4
 80096bc:	4621      	mov	r1, r4
 80096be:	2028      	movs	r0, #40	; 0x28
 80096c0:	f001 fc58 	bl	800af74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80096c4:	2028      	movs	r0, #40	; 0x28
 80096c6:	f001 fc8b 	bl	800afe0 <HAL_NVIC_EnableIRQ>

}
 80096ca:	b00b      	add	sp, #44	; 0x2c
 80096cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096d0:	40023800 	.word	0x40023800
 80096d4:	40020c00 	.word	0x40020c00
 80096d8:	40020400 	.word	0x40020400
 80096dc:	10110000 	.word	0x10110000
 80096e0:	40020000 	.word	0x40020000
 80096e4:	40020800 	.word	0x40020800

080096e8 <MX_DMA_Init>:
{
 80096e8:	b510      	push	{r4, lr}
 80096ea:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 80096ec:	2400      	movs	r4, #0
 80096ee:	4b0f      	ldr	r3, [pc, #60]	; (800972c <MX_DMA_Init+0x44>)
 80096f0:	9401      	str	r4, [sp, #4]
 80096f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80096f8:	631a      	str	r2, [r3, #48]	; 0x30
 80096fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8009700:	4622      	mov	r2, r4
 8009702:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009704:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8009706:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009708:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800970a:	f001 fc33 	bl	800af74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800970e:	2038      	movs	r0, #56	; 0x38
 8009710:	f001 fc66 	bl	800afe0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8009714:	4622      	mov	r2, r4
 8009716:	4621      	mov	r1, r4
 8009718:	203a      	movs	r0, #58	; 0x3a
 800971a:	f001 fc2b 	bl	800af74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800971e:	203a      	movs	r0, #58	; 0x3a
}
 8009720:	b002      	add	sp, #8
 8009722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8009726:	f001 bc5b 	b.w	800afe0 <HAL_NVIC_EnableIRQ>
 800972a:	bf00      	nop
 800972c:	40023800 	.word	0x40023800

08009730 <MX_ADC1_Init>:
{
 8009730:	b570      	push	{r4, r5, r6, lr}
  hadc1.Instance = ADC1;
 8009732:	4c21      	ldr	r4, [pc, #132]	; (80097b8 <MX_ADC1_Init+0x88>)
 8009734:	4b21      	ldr	r3, [pc, #132]	; (80097bc <MX_ADC1_Init+0x8c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009736:	4a22      	ldr	r2, [pc, #136]	; (80097c0 <MX_ADC1_Init+0x90>)
  hadc1.Instance = ADC1;
 8009738:	6023      	str	r3, [r4, #0]
{
 800973a:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800973c:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 800973e:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8009740:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc1.Init.NbrOfConversion = 3;
 8009744:	2603      	movs	r6, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009746:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8009748:	6061      	str	r1, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800974a:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800974c:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800974e:	9300      	str	r3, [sp, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009750:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009754:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009756:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8009758:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800975c:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ENABLE;
 800975e:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8009760:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009762:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009766:	6165      	str	r5, [r4, #20]
  hadc1.Init.NbrOfConversion = 3;
 8009768:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800976a:	f001 f977 	bl	800aa5c <HAL_ADC_Init>
 800976e:	b108      	cbz	r0, 8009774 <MX_ADC1_Init+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009770:	b672      	cpsid	i
 8009772:	e7fe      	b.n	8009772 <MX_ADC1_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_10;
 8009774:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009776:	4669      	mov	r1, sp
 8009778:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800977a:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800977c:	9602      	str	r6, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_10;
 800977e:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009780:	f001 fb3e 	bl	800ae00 <HAL_ADC_ConfigChannel>
 8009784:	b108      	cbz	r0, 800978a <MX_ADC1_Init+0x5a>
 8009786:	b672      	cpsid	i
 8009788:	e7fe      	b.n	8009788 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_14;
 800978a:	220e      	movs	r2, #14
  sConfig.Rank = 2;
 800978c:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800978e:	4669      	mov	r1, sp
 8009790:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 8009792:	9200      	str	r2, [sp, #0]
  sConfig.Rank = 2;
 8009794:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009796:	f001 fb33 	bl	800ae00 <HAL_ADC_ConfigChannel>
 800979a:	b108      	cbz	r0, 80097a0 <MX_ADC1_Init+0x70>
 800979c:	b672      	cpsid	i
 800979e:	e7fe      	b.n	800979e <MX_ADC1_Init+0x6e>
  sConfig.Channel = ADC_CHANNEL_9;
 80097a0:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80097a2:	4669      	mov	r1, sp
 80097a4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 80097a6:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80097aa:	f001 fb29 	bl	800ae00 <HAL_ADC_ConfigChannel>
 80097ae:	b108      	cbz	r0, 80097b4 <MX_ADC1_Init+0x84>
 80097b0:	b672      	cpsid	i
 80097b2:	e7fe      	b.n	80097b2 <MX_ADC1_Init+0x82>
}
 80097b4:	b004      	add	sp, #16
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	20001b94 	.word	0x20001b94
 80097bc:	40012000 	.word	0x40012000
 80097c0:	0f000001 	.word	0x0f000001

080097c4 <MX_ADC2_Init>:
{
 80097c4:	b570      	push	{r4, r5, r6, lr}
  hadc2.Instance = ADC2;
 80097c6:	4c1c      	ldr	r4, [pc, #112]	; (8009838 <MX_ADC2_Init+0x74>)
 80097c8:	4b1c      	ldr	r3, [pc, #112]	; (800983c <MX_ADC2_Init+0x78>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80097ca:	4a1d      	ldr	r2, [pc, #116]	; (8009840 <MX_ADC2_Init+0x7c>)
  hadc2.Instance = ADC2;
 80097cc:	6023      	str	r3, [r4, #0]
{
 80097ce:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 80097d0:	2300      	movs	r3, #0
  hadc2.Init.ScanConvMode = ENABLE;
 80097d2:	2501      	movs	r5, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80097d4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc2.Init.NbrOfConversion = 2;
 80097d8:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80097da:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80097dc:	6061      	str	r1, [r4, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80097de:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80097e0:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80097e2:	9300      	str	r3, [sp, #0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80097e4:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80097e8:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80097ea:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 80097ec:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80097f0:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ENABLE;
 80097f2:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80097f4:	7625      	strb	r5, [r4, #24]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80097f6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80097fa:	6165      	str	r5, [r4, #20]
  hadc2.Init.NbrOfConversion = 2;
 80097fc:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80097fe:	f001 f92d 	bl	800aa5c <HAL_ADC_Init>
 8009802:	b108      	cbz	r0, 8009808 <MX_ADC2_Init+0x44>
 8009804:	b672      	cpsid	i
 8009806:	e7fe      	b.n	8009806 <MX_ADC2_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_11;
 8009808:	220b      	movs	r2, #11
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800980a:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800980c:	4669      	mov	r1, sp
 800980e:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 8009810:	9501      	str	r5, [sp, #4]
  sConfig.Channel = ADC_CHANNEL_11;
 8009812:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8009814:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009816:	f001 faf3 	bl	800ae00 <HAL_ADC_ConfigChannel>
 800981a:	b108      	cbz	r0, 8009820 <MX_ADC2_Init+0x5c>
 800981c:	b672      	cpsid	i
 800981e:	e7fe      	b.n	800981e <MX_ADC2_Init+0x5a>
  sConfig.Channel = ADC_CHANNEL_15;
 8009820:	230f      	movs	r3, #15
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009822:	4669      	mov	r1, sp
 8009824:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_15;
 8009826:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800982a:	f001 fae9 	bl	800ae00 <HAL_ADC_ConfigChannel>
 800982e:	b108      	cbz	r0, 8009834 <MX_ADC2_Init+0x70>
 8009830:	b672      	cpsid	i
 8009832:	e7fe      	b.n	8009832 <MX_ADC2_Init+0x6e>
}
 8009834:	b004      	add	sp, #16
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	20001ab4 	.word	0x20001ab4
 800983c:	40012100 	.word	0x40012100
 8009840:	0f000001 	.word	0x0f000001

08009844 <MX_TIM3_Init>:
{
 8009844:	b530      	push	{r4, r5, lr}
 8009846:	b08d      	sub	sp, #52	; 0x34
  htim3.Instance = TIM3;
 8009848:	4c14      	ldr	r4, [pc, #80]	; (800989c <MX_TIM3_Init+0x58>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 800984a:	2220      	movs	r2, #32
 800984c:	2100      	movs	r1, #0
 800984e:	a804      	add	r0, sp, #16
 8009850:	f004 f8a1 	bl	800d996 <memset>
  htim3.Instance = TIM3;
 8009854:	4b12      	ldr	r3, [pc, #72]	; (80098a0 <MX_TIM3_Init+0x5c>)
 8009856:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 60000-1;
 8009858:	f64e 225f 	movw	r2, #59999	; 0xea5f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800985c:	2300      	movs	r3, #0
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800985e:	2503      	movs	r5, #3
  htim3.Init.Period = 60000-1;
 8009860:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009862:	4620      	mov	r0, r4
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009864:	2201      	movs	r2, #1
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009866:	a903      	add	r1, sp, #12
  htim3.Init.Prescaler = 0;
 8009868:	6063      	str	r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800986a:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800986c:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800986e:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009870:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009872:	9302      	str	r3, [sp, #8]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009874:	9503      	str	r5, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009876:	9205      	str	r2, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009878:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800987a:	f002 ffa9 	bl	800c7d0 <HAL_TIM_Encoder_Init>
 800987e:	b108      	cbz	r0, 8009884 <MX_TIM3_Init+0x40>
 8009880:	b672      	cpsid	i
 8009882:	e7fe      	b.n	8009882 <MX_TIM3_Init+0x3e>
 8009884:	4603      	mov	r3, r0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009886:	a901      	add	r1, sp, #4
 8009888:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800988a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800988e:	f003 fbe5 	bl	800d05c <HAL_TIMEx_MasterConfigSynchronization>
 8009892:	b108      	cbz	r0, 8009898 <MX_TIM3_Init+0x54>
 8009894:	b672      	cpsid	i
 8009896:	e7fe      	b.n	8009896 <MX_TIM3_Init+0x52>
}
 8009898:	b00d      	add	sp, #52	; 0x34
 800989a:	bd30      	pop	{r4, r5, pc}
 800989c:	20001afc 	.word	0x20001afc
 80098a0:	40000400 	.word	0x40000400

080098a4 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 80098a4:	b500      	push	{lr}
 80098a6:	b083      	sub	sp, #12
 80098a8:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80098aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
PUTCHAR_PROTOTYPE {
 80098ae:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80098b2:	2201      	movs	r2, #1
 80098b4:	4803      	ldr	r0, [pc, #12]	; (80098c4 <__io_putchar+0x20>)
 80098b6:	f003 fce7 	bl	800d288 <HAL_UART_Transmit>
}
 80098ba:	9801      	ldr	r0, [sp, #4]
 80098bc:	b003      	add	sp, #12
 80098be:	f85d fb04 	ldr.w	pc, [sp], #4
 80098c2:	bf00      	nop
 80098c4:	20001bdc 	.word	0x20001bdc

080098c8 <__io_getchar>:
int __io_getchar(void) {
 80098c8:	b510      	push	{r4, lr}
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 80098ca:	4c07      	ldr	r4, [pc, #28]	; (80098e8 <__io_getchar+0x20>)
int __io_getchar(void) {
 80098cc:	b082      	sub	sp, #8
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 80098ce:	230a      	movs	r3, #10
 80098d0:	2201      	movs	r2, #1
 80098d2:	f10d 0107 	add.w	r1, sp, #7
 80098d6:	4620      	mov	r0, r4
 80098d8:	f003 fd64 	bl	800d3a4 <HAL_UART_Receive>
while(Status != HAL_OK)
 80098dc:	2800      	cmp	r0, #0
 80098de:	d1f6      	bne.n	80098ce <__io_getchar+0x6>
}
 80098e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80098e4:	b002      	add	sp, #8
 80098e6:	bd10      	pop	{r4, pc}
 80098e8:	20001bdc 	.word	0x20001bdc

080098ec <SystemClock_Config>:
{
 80098ec:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80098ee:	2300      	movs	r3, #0
{
 80098f0:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80098f2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80098f6:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80098fa:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80098fe:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009902:	4920      	ldr	r1, [pc, #128]	; (8009984 <SystemClock_Config+0x98>)
 8009904:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009906:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009908:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800990a:	4a1f      	ldr	r2, [pc, #124]	; (8009988 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800990c:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8009910:	6408      	str	r0, [r1, #64]	; 0x40
 8009912:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009914:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8009918:	9101      	str	r1, [sp, #4]
 800991a:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800991c:	9302      	str	r3, [sp, #8]
 800991e:	6813      	ldr	r3, [r2, #0]
 8009920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009924:	6013      	str	r3, [r2, #0]
 8009926:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009928:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800992c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009930:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009932:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009934:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009936:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009938:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800993c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800993e:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009940:	22a8      	movs	r2, #168	; 0xa8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009942:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009944:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009946:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009948:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 800994a:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800994e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009950:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009952:	f001 fe77 	bl	800b644 <HAL_RCC_OscConfig>
 8009956:	b108      	cbz	r0, 800995c <SystemClock_Config+0x70>
 8009958:	b672      	cpsid	i
 800995a:	e7fe      	b.n	800995a <SystemClock_Config+0x6e>
 800995c:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800995e:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009960:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009964:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009968:	a803      	add	r0, sp, #12
 800996a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800996c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800996e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009970:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009972:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009976:	f002 f879 	bl	800ba6c <HAL_RCC_ClockConfig>
 800997a:	b108      	cbz	r0, 8009980 <SystemClock_Config+0x94>
 800997c:	b672      	cpsid	i
 800997e:	e7fe      	b.n	800997e <SystemClock_Config+0x92>
}
 8009980:	b014      	add	sp, #80	; 0x50
 8009982:	bd70      	pop	{r4, r5, r6, pc}
 8009984:	40023800 	.word	0x40023800
 8009988:	40007000 	.word	0x40007000

0800998c <main>:
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 8009990:	f001 f826 	bl	800a9e0 <HAL_Init>
  MX_GPIO_Init();
 8009994:	f7ff fe08 	bl	80095a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8009998:	f7ff fea6 	bl	80096e8 <MX_DMA_Init>
  MX_ADC1_Init();
 800999c:	f7ff fec8 	bl	8009730 <MX_ADC1_Init>
  MX_ADC2_Init();
 80099a0:	f7ff ff10 	bl	80097c4 <MX_ADC2_Init>
  ADCStart();
 80099a4:	f000 fcb4 	bl	800a310 <ADCStart>
  BatteryCheck( (int)adc1[2] );
 80099a8:	4ba0      	ldr	r3, [pc, #640]	; (8009c2c <main+0x2a0>)
  htim2.Instance = TIM2;
 80099aa:	4ca1      	ldr	r4, [pc, #644]	; (8009c30 <main+0x2a4>)
  BatteryCheck( (int)adc1[2] );
 80099ac:	6898      	ldr	r0, [r3, #8]
 80099ae:	f000 ff37 	bl	800a820 <BatteryCheck>
  ADCStop();
 80099b2:	f000 fccb 	bl	800a34c <ADCStop>
  MX_TIM3_Init();
 80099b6:	f7ff ff45 	bl	8009844 <MX_TIM3_Init>
  ModeSelect(0, 7, &startup_mode);
 80099ba:	f10d 0207 	add.w	r2, sp, #7
 80099be:	2107      	movs	r1, #7
 80099c0:	2000      	movs	r0, #0
 80099c2:	f000 ff5d 	bl	800a880 <ModeSelect>
  Signal( startup_mode );
 80099c6:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 80099ca:	f000 ff17 	bl	800a7fc <Signal>
  htim2.Init.Period = 4200-1;
 80099ce:	f241 0567 	movw	r5, #4199	; 0x1067
  SystemClock_Config();
 80099d2:	f7ff ff8b 	bl	80098ec <SystemClock_Config>
  MX_GPIO_Init();
 80099d6:	f7ff fde7 	bl	80095a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80099da:	f7ff fe85 	bl	80096e8 <MX_DMA_Init>
  MX_ADC1_Init();
 80099de:	f7ff fea7 	bl	8009730 <MX_ADC1_Init>
  MX_ADC2_Init();
 80099e2:	f7ff feef 	bl	80097c4 <MX_ADC2_Init>
  MX_TIM3_Init();
 80099e6:	f7ff ff2d 	bl	8009844 <MX_TIM3_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80099ea:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 80099ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80099f0:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 80099f2:	6022      	str	r2, [r4, #0]
  htim2.Init.Prescaler = 0;
 80099f4:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80099f6:	9308      	str	r3, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099f8:	9304      	str	r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80099fa:	930f      	str	r3, [sp, #60]	; 0x3c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099fc:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099fe:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a00:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009a02:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8009a06:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a08:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a0a:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8009a0e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8009a12:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  htim2.Init.Period = 4200-1;
 8009a16:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009a18:	f002 fd4a 	bl	800c4b0 <HAL_TIM_Base_Init>
 8009a1c:	b108      	cbz	r0, 8009a22 <main+0x96>
 8009a1e:	b672      	cpsid	i
 8009a20:	e7fe      	b.n	8009a20 <main+0x94>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a22:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009a26:	a908      	add	r1, sp, #32
 8009a28:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a2a:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009a2c:	f003 f9be 	bl	800cdac <HAL_TIM_ConfigClockSource>
 8009a30:	b108      	cbz	r0, 8009a36 <main+0xaa>
 8009a32:	b672      	cpsid	i
 8009a34:	e7fe      	b.n	8009a34 <main+0xa8>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009a36:	4620      	mov	r0, r4
 8009a38:	f002 fe46 	bl	800c6c8 <HAL_TIM_PWM_Init>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	b108      	cbz	r0, 8009a44 <main+0xb8>
 8009a40:	b672      	cpsid	i
 8009a42:	e7fe      	b.n	8009a42 <main+0xb6>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009a44:	a904      	add	r1, sp, #16
 8009a46:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a48:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009a4c:	f003 fb06 	bl	800d05c <HAL_TIMEx_MasterConfigSynchronization>
 8009a50:	b108      	cbz	r0, 8009a56 <main+0xca>
 8009a52:	b672      	cpsid	i
 8009a54:	e7fe      	b.n	8009a54 <main+0xc8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a56:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a58:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a5c:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009a5e:	220c      	movs	r2, #12
 8009a60:	a90f      	add	r1, sp, #60	; 0x3c
 8009a62:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a64:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009a66:	f003 f897 	bl	800cb98 <HAL_TIM_PWM_ConfigChannel>
 8009a6a:	4607      	mov	r7, r0
 8009a6c:	b108      	cbz	r0, 8009a72 <main+0xe6>
 8009a6e:	b672      	cpsid	i
 8009a70:	e7fe      	b.n	8009a70 <main+0xe4>
  HAL_TIM_MspPostInit(&htim2);
 8009a72:	4620      	mov	r0, r4
 8009a74:	f000 fb14 	bl	800a0a0 <HAL_TIM_MspPostInit>
  hspi3.Instance = SPI3;
 8009a78:	4b6e      	ldr	r3, [pc, #440]	; (8009c34 <main+0x2a8>)
 8009a7a:	4a6f      	ldr	r2, [pc, #444]	; (8009c38 <main+0x2ac>)
 8009a7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009a7e:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8009a82:	2202      	movs	r2, #2
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009a84:	6059      	str	r1, [r3, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8009a86:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009a88:	2101      	movs	r1, #1
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009a8e:	6159      	str	r1, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009a90:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8009a92:	2128      	movs	r1, #40	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8009a94:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009a96:	4618      	mov	r0, r3
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8009a98:	e9c3 7702 	strd	r7, r7, [r3, #8]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009a9c:	e9c3 7708 	strd	r7, r7, [r3, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009aa0:	629f      	str	r7, [r3, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8009aa2:	61d9      	str	r1, [r3, #28]
  hspi3.Init.CRCPolynomial = 10;
 8009aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009aa6:	f002 f89f 	bl	800bbe8 <HAL_SPI_Init>
 8009aaa:	b108      	cbz	r0, 8009ab0 <main+0x124>
 8009aac:	b672      	cpsid	i
 8009aae:	e7fe      	b.n	8009aae <main+0x122>
  huart1.Instance = USART1;
 8009ab0:	4b62      	ldr	r3, [pc, #392]	; (8009c3c <main+0x2b0>)
 8009ab2:	4a63      	ldr	r2, [pc, #396]	; (8009c40 <main+0x2b4>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8009ab4:	6118      	str	r0, [r3, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009ab6:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009aba:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart1.Instance = USART1;
 8009abe:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009ac0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009ac4:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009ac6:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 8009ac8:	6059      	str	r1, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009aca:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009acc:	f003 fb3a 	bl	800d144 <HAL_UART_Init>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	b108      	cbz	r0, 8009ad8 <main+0x14c>
 8009ad4:	b672      	cpsid	i
 8009ad6:	e7fe      	b.n	8009ad6 <main+0x14a>
  htim5.Instance = TIM5;
 8009ad8:	4c5a      	ldr	r4, [pc, #360]	; (8009c44 <main+0x2b8>)
 8009ada:	4a5b      	ldr	r2, [pc, #364]	; (8009c48 <main+0x2bc>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009adc:	9015      	str	r0, [sp, #84]	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009ade:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8009ae2:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ae6:	e9cd 0004 	strd	r0, r0, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009aea:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 8009aee:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
 8009af2:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009af6:	e9c4 0001 	strd	r0, r0, [r4, #4]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009afa:	4620      	mov	r0, r4
  htim5.Init.Period = 4200-1;
 8009afc:	60e5      	str	r5, [r4, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009afe:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b00:	61a3      	str	r3, [r4, #24]
  htim5.Instance = TIM5;
 8009b02:	6022      	str	r2, [r4, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009b04:	f002 fcd4 	bl	800c4b0 <HAL_TIM_Base_Init>
 8009b08:	b108      	cbz	r0, 8009b0e <main+0x182>
 8009b0a:	b672      	cpsid	i
 8009b0c:	e7fe      	b.n	8009b0c <main+0x180>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009b0e:	a908      	add	r1, sp, #32
 8009b10:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b12:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009b14:	f003 f94a 	bl	800cdac <HAL_TIM_ConfigClockSource>
 8009b18:	b108      	cbz	r0, 8009b1e <main+0x192>
 8009b1a:	b672      	cpsid	i
 8009b1c:	e7fe      	b.n	8009b1c <main+0x190>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f002 fdd2 	bl	800c6c8 <HAL_TIM_PWM_Init>
 8009b24:	b108      	cbz	r0, 8009b2a <main+0x19e>
 8009b26:	b672      	cpsid	i
 8009b28:	e7fe      	b.n	8009b28 <main+0x19c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b2a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009b2c:	a904      	add	r1, sp, #16
 8009b2e:	4845      	ldr	r0, [pc, #276]	; (8009c44 <main+0x2b8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b30:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009b34:	f003 fa92 	bl	800d05c <HAL_TIMEx_MasterConfigSynchronization>
 8009b38:	b108      	cbz	r0, 8009b3e <main+0x1b2>
 8009b3a:	b672      	cpsid	i
 8009b3c:	e7fe      	b.n	8009b3c <main+0x1b0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009b3e:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b40:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b44:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009b46:	2204      	movs	r2, #4
 8009b48:	a90f      	add	r1, sp, #60	; 0x3c
 8009b4a:	483e      	ldr	r0, [pc, #248]	; (8009c44 <main+0x2b8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009b4c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009b4e:	f003 f823 	bl	800cb98 <HAL_TIM_PWM_ConfigChannel>
 8009b52:	4605      	mov	r5, r0
 8009b54:	b108      	cbz	r0, 8009b5a <main+0x1ce>
 8009b56:	b672      	cpsid	i
 8009b58:	e7fe      	b.n	8009b58 <main+0x1cc>
  HAL_TIM_MspPostInit(&htim5);
 8009b5a:	483a      	ldr	r0, [pc, #232]	; (8009c44 <main+0x2b8>)
  htim4.Instance = TIM4;
 8009b5c:	4c3b      	ldr	r4, [pc, #236]	; (8009c4c <main+0x2c0>)
  HAL_TIM_MspPostInit(&htim5);
 8009b5e:	f000 fa9f 	bl	800a0a0 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8009b62:	2220      	movs	r2, #32
 8009b64:	4629      	mov	r1, r5
 8009b66:	a810      	add	r0, sp, #64	; 0x40
 8009b68:	f003 ff15 	bl	800d996 <memset>
  htim4.Instance = TIM4;
 8009b6c:	4b38      	ldr	r3, [pc, #224]	; (8009c50 <main+0x2c4>)
 8009b6e:	6023      	str	r3, [r4, #0]
  htim4.Init.Period = 60000-1;
 8009b70:	f64e 215f 	movw	r1, #59999	; 0xea5f
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009b74:	2301      	movs	r3, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009b76:	2203      	movs	r2, #3
  htim4.Init.Period = 60000-1;
 8009b78:	60e1      	str	r1, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009b7e:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009b80:	9315      	str	r3, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b82:	9508      	str	r5, [sp, #32]
 8009b84:	9509      	str	r5, [sp, #36]	; 0x24
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b86:	e9c4 5501 	strd	r5, r5, [r4, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b8a:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b8c:	61a5      	str	r5, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009b8e:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8009b90:	f002 fe1e 	bl	800c7d0 <HAL_TIM_Encoder_Init>
 8009b94:	4603      	mov	r3, r0
 8009b96:	b108      	cbz	r0, 8009b9c <main+0x210>
 8009b98:	b672      	cpsid	i
 8009b9a:	e7fe      	b.n	8009b9a <main+0x20e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ba0:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009ba4:	f003 fa5a 	bl	800d05c <HAL_TIMEx_MasterConfigSynchronization>
 8009ba8:	4604      	mov	r4, r0
 8009baa:	b108      	cbz	r0, 8009bb0 <main+0x224>
 8009bac:	b672      	cpsid	i
 8009bae:	e7fe      	b.n	8009bae <main+0x222>
  htim8.Instance = TIM8;
 8009bb0:	4d28      	ldr	r5, [pc, #160]	; (8009c54 <main+0x2c8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009bb2:	9004      	str	r0, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009bb4:	4601      	mov	r1, r0
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009bba:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8009bbe:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009bc0:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009bc2:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8009bc6:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8009bca:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8009bce:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009bd0:	9403      	str	r4, [sp, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009bd2:	f003 fee0 	bl	800d996 <memset>
  htim8.Instance = TIM8;
 8009bd6:	4820      	ldr	r0, [pc, #128]	; (8009c58 <main+0x2cc>)
 8009bd8:	6028      	str	r0, [r5, #0]
  htim8.Init.Prescaler = 168-1;
 8009bda:	21a7      	movs	r1, #167	; 0xa7
  htim8.Init.Period = 50-1;
 8009bdc:	2231      	movs	r2, #49	; 0x31
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009bde:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009be0:	4628      	mov	r0, r5
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009be2:	60ac      	str	r4, [r5, #8]
  htim8.Init.RepetitionCounter = 0;
 8009be4:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim8.Init.Prescaler = 168-1;
 8009be8:	6069      	str	r1, [r5, #4]
  htim8.Init.Period = 50-1;
 8009bea:	60ea      	str	r2, [r5, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009bec:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009bee:	f002 fc5f 	bl	800c4b0 <HAL_TIM_Base_Init>
 8009bf2:	b108      	cbz	r0, 8009bf8 <main+0x26c>
 8009bf4:	b672      	cpsid	i
 8009bf6:	e7fe      	b.n	8009bf6 <main+0x26a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009bfc:	a904      	add	r1, sp, #16
 8009bfe:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009c00:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009c02:	f003 f8d3 	bl	800cdac <HAL_TIM_ConfigClockSource>
 8009c06:	b108      	cbz	r0, 8009c0c <main+0x280>
 8009c08:	b672      	cpsid	i
 8009c0a:	e7fe      	b.n	8009c0a <main+0x27e>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	f002 fcd5 	bl	800c5bc <HAL_TIM_OC_Init>
 8009c12:	4603      	mov	r3, r0
 8009c14:	b108      	cbz	r0, 8009c1a <main+0x28e>
 8009c16:	b672      	cpsid	i
 8009c18:	e7fe      	b.n	8009c18 <main+0x28c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009c1a:	a902      	add	r1, sp, #8
 8009c1c:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009c22:	f003 fa1b 	bl	800d05c <HAL_TIMEx_MasterConfigSynchronization>
 8009c26:	b1c8      	cbz	r0, 8009c5c <main+0x2d0>
 8009c28:	b672      	cpsid	i
 8009c2a:	e7fe      	b.n	8009c2a <main+0x29e>
 8009c2c:	200002b8 	.word	0x200002b8
 8009c30:	20000238 	.word	0x20000238
 8009c34:	20001b3c 	.word	0x20001b3c
 8009c38:	40003c00 	.word	0x40003c00
 8009c3c:	20001bdc 	.word	0x20001bdc
 8009c40:	40011000 	.word	0x40011000
 8009c44:	20000278 	.word	0x20000278
 8009c48:	40000c00 	.word	0x40000c00
 8009c4c:	20001a74 	.word	0x20001a74
 8009c50:	40000800 	.word	0x40000800
 8009c54:	20001a34 	.word	0x20001a34
 8009c58:	40010400 	.word	0x40010400
  sConfigOC.Pulse = 25-1;
 8009c5c:	2318      	movs	r3, #24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009c5e:	4602      	mov	r2, r0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009c60:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009c64:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009c68:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8009c6a:	2430      	movs	r4, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009c6c:	a908      	add	r1, sp, #32
 8009c6e:	4628      	mov	r0, r5
  sConfigOC.Pulse = 25-1;
 8009c70:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8009c72:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009c74:	f002 feb8 	bl	800c9e8 <HAL_TIM_OC_ConfigChannel>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	b108      	cbz	r0, 8009c80 <main+0x2f4>
 8009c7c:	b672      	cpsid	i
 8009c7e:	e7fe      	b.n	8009c7e <main+0x2f2>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 8009c80:	6829      	ldr	r1, [r5, #0]
 8009c82:	698a      	ldr	r2, [r1, #24]
 8009c84:	f042 0208 	orr.w	r2, r2, #8
 8009c88:	618a      	str	r2, [r1, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009c8a:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009c8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009c90:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009c92:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8009c96:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009c9a:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009c9c:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009c9e:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009ca0:	f003 fa22 	bl	800d0e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8009ca4:	b108      	cbz	r0, 8009caa <main+0x31e>
 8009ca6:	b672      	cpsid	i
 8009ca8:	e7fe      	b.n	8009ca8 <main+0x31c>
  htim1.Instance = TIM1;
 8009caa:	4c1c      	ldr	r4, [pc, #112]	; (8009d1c <main+0x390>)
  HAL_TIM_MspPostInit(&htim8);
 8009cac:	481c      	ldr	r0, [pc, #112]	; (8009d20 <main+0x394>)
 8009cae:	f000 f9f7 	bl	800a0a0 <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 8009cb2:	4b1c      	ldr	r3, [pc, #112]	; (8009d24 <main+0x398>)
 8009cb4:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 168-1;
 8009cb6:	23a7      	movs	r3, #167	; 0xa7
  htim1.Init.Period = 1000-1;
 8009cb8:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim1.Init.Prescaler = 168-1;
 8009cbc:	6063      	str	r3, [r4, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009cbe:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009cc0:	2300      	movs	r3, #0
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cc2:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009cc6:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8009cca:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009cce:	e9cd 3308 	strd	r3, r3, [sp, #32]
  htim1.Init.RepetitionCounter = 0;
 8009cd2:	e9c4 3304 	strd	r3, r3, [r4, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009cd6:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009cd8:	f002 fbea 	bl	800c4b0 <HAL_TIM_Base_Init>
 8009cdc:	b108      	cbz	r0, 8009ce2 <main+0x356>
 8009cde:	b672      	cpsid	i
 8009ce0:	e7fe      	b.n	8009ce0 <main+0x354>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009ce6:	a90f      	add	r1, sp, #60	; 0x3c
 8009ce8:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009cea:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009cec:	f003 f85e 	bl	800cdac <HAL_TIM_ConfigClockSource>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	b108      	cbz	r0, 8009cf8 <main+0x36c>
 8009cf4:	b672      	cpsid	i
 8009cf6:	e7fe      	b.n	8009cf6 <main+0x36a>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009cf8:	a908      	add	r1, sp, #32
 8009cfa:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009cfc:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009d00:	f003 f9ac 	bl	800d05c <HAL_TIMEx_MasterConfigSynchronization>
 8009d04:	b108      	cbz	r0, 8009d0a <main+0x37e>
 8009d06:	b672      	cpsid	i
 8009d08:	e7fe      	b.n	8009d08 <main+0x37c>
  printf("フラッシュ確認\r\n");
 8009d0a:	4807      	ldr	r0, [pc, #28]	; (8009d28 <main+0x39c>)
 8009d0c:	f004 fefa 	bl	800eb04 <puts>
  Simu();
 8009d10:	f7ff fc06 	bl	8009520 <Simu>
  printf("終了\r\n");
 8009d14:	4805      	ldr	r0, [pc, #20]	; (8009d2c <main+0x3a0>)
 8009d16:	f004 fef5 	bl	800eb04 <puts>
 8009d1a:	e7fe      	b.n	8009d1a <main+0x38e>
 8009d1c:	20001c7c 	.word	0x20001c7c
 8009d20:	20001a34 	.word	0x20001a34
 8009d24:	40010000 	.word	0x40010000
 8009d28:	08011bb4 	.word	0x08011bb4
 8009d2c:	08011bcc 	.word	0x08011bcc

08009d30 <Error_Handler>:
 8009d30:	b672      	cpsid	i
 8009d32:	e7fe      	b.n	8009d32 <Error_Handler+0x2>

08009d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009d34:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <HAL_MspInit+0x34>)
 8009d38:	2100      	movs	r1, #0
 8009d3a:	9100      	str	r1, [sp, #0]
 8009d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d42:	645a      	str	r2, [r3, #68]	; 0x44
 8009d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d46:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8009d4a:	9200      	str	r2, [sp, #0]
 8009d4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009d4e:	9101      	str	r1, [sp, #4]
 8009d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009d56:	641a      	str	r2, [r3, #64]	; 0x40
 8009d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009d62:	b002      	add	sp, #8
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	40023800 	.word	0x40023800

08009d6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8009d6e:	6803      	ldr	r3, [r0, #0]
 8009d70:	4a47      	ldr	r2, [pc, #284]	; (8009e90 <HAL_ADC_MspInit+0x124>)
{
 8009d72:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d74:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8009d76:	4293      	cmp	r3, r2
{
 8009d78:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d7a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8009d7e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8009d82:	9409      	str	r4, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8009d84:	d004      	beq.n	8009d90 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8009d86:	4a43      	ldr	r2, [pc, #268]	; (8009e94 <HAL_ADC_MspInit+0x128>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d04e      	beq.n	8009e2a <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8009d8c:	b00b      	add	sp, #44	; 0x2c
 8009d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009d90:	4b41      	ldr	r3, [pc, #260]	; (8009e98 <HAL_ADC_MspInit+0x12c>)
 8009d92:	9400      	str	r4, [sp, #0]
 8009d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8009d96:	4e41      	ldr	r6, [pc, #260]	; (8009e9c <HAL_ADC_MspInit+0x130>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d98:	4841      	ldr	r0, [pc, #260]	; (8009ea0 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d9e:	645a      	str	r2, [r3, #68]	; 0x44
 8009da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009da2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8009da6:	9200      	str	r2, [sp, #0]
 8009da8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009daa:	9401      	str	r4, [sp, #4]
 8009dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dae:	f042 0204 	orr.w	r2, r2, #4
 8009db2:	631a      	str	r2, [r3, #48]	; 0x30
 8009db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009db6:	f002 0204 	and.w	r2, r2, #4
 8009dba:	9201      	str	r2, [sp, #4]
 8009dbc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009dbe:	9402      	str	r4, [sp, #8]
 8009dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dc2:	f042 0202 	orr.w	r2, r2, #2
 8009dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8009dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dca:	f003 0302 	and.w	r3, r3, #2
 8009dce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009dd0:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8009dd2:	2311      	movs	r3, #17
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009dd4:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009dd6:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8009dd8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009dda:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ddc:	f001 fb1e 	bl	800b41c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009de0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009de2:	a905      	add	r1, sp, #20
 8009de4:	482f      	ldr	r0, [pc, #188]	; (8009ea4 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009de6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009de8:	e9cd 7406 	strd	r7, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009dec:	f001 fb16 	bl	800b41c <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009df0:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009df4:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc1.Instance = DMA2_Stream0;
 8009df8:	482b      	ldr	r0, [pc, #172]	; (8009ea8 <HAL_ADC_MspInit+0x13c>)
 8009dfa:	6030      	str	r0, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009dfc:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8009e00:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009e02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009e06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8009e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009e0e:	4630      	mov	r0, r6
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009e10:	6137      	str	r7, [r6, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009e12:	e9c6 1205 	strd	r1, r2, [r6, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8009e16:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8009e18:	f001 f90a 	bl	800b030 <HAL_DMA_Init>
 8009e1c:	b108      	cbz	r0, 8009e22 <HAL_ADC_MspInit+0xb6>
      Error_Handler();
 8009e1e:	f7ff ff87 	bl	8009d30 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8009e22:	63ae      	str	r6, [r5, #56]	; 0x38
 8009e24:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8009e26:	b00b      	add	sp, #44	; 0x2c
 8009e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8009e2a:	4b1b      	ldr	r3, [pc, #108]	; (8009e98 <HAL_ADC_MspInit+0x12c>)
 8009e2c:	9403      	str	r4, [sp, #12]
 8009e2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc2.Instance = DMA2_Stream2;
 8009e30:	4e1e      	ldr	r6, [pc, #120]	; (8009eac <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e32:	481b      	ldr	r0, [pc, #108]	; (8009ea0 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8009e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e38:	645a      	str	r2, [r3, #68]	; 0x44
 8009e3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e3c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8009e40:	9203      	str	r2, [sp, #12]
 8009e42:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e44:	9404      	str	r4, [sp, #16]
 8009e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e48:	f042 0204 	orr.w	r2, r2, #4
 8009e4c:	631a      	str	r2, [r3, #48]	; 0x30
 8009e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e50:	f003 0304 	and.w	r3, r3, #4
 8009e54:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8009e56:	2322      	movs	r3, #34	; 0x22
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e58:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8009e5a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009e5c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e5e:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009e60:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e62:	f001 fadb 	bl	800b41c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8009e66:	4a12      	ldr	r2, [pc, #72]	; (8009eb0 <HAL_ADC_MspInit+0x144>)
 8009e68:	6032      	str	r2, [r6, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8009e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8009e6e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8009e72:	6073      	str	r3, [r6, #4]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8009e74:	6130      	str	r0, [r6, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e76:	60b4      	str	r4, [r6, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e78:	60f4      	str	r4, [r6, #12]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009e7a:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009e82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8009e86:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	e7c1      	b.n	8009e12 <HAL_ADC_MspInit+0xa6>
 8009e8e:	bf00      	nop
 8009e90:	40012000 	.word	0x40012000
 8009e94:	40012100 	.word	0x40012100
 8009e98:	40023800 	.word	0x40023800
 8009e9c:	20001c1c 	.word	0x20001c1c
 8009ea0:	40020800 	.word	0x40020800
 8009ea4:	40020400 	.word	0x40020400
 8009ea8:	40026410 	.word	0x40026410
 8009eac:	20001cbc 	.word	0x20001cbc
 8009eb0:	40026440 	.word	0x40026440

08009eb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009eb4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI3)
 8009eb6:	6801      	ldr	r1, [r0, #0]
 8009eb8:	4a18      	ldr	r2, [pc, #96]	; (8009f1c <HAL_SPI_MspInit+0x68>)
{
 8009eba:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ebc:	2300      	movs	r3, #0
  if(hspi->Instance==SPI3)
 8009ebe:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ec0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8009ec4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009ec8:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 8009eca:	d001      	beq.n	8009ed0 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8009ecc:	b008      	add	sp, #32
 8009ece:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009ed0:	f502 32fe 	add.w	r2, r2, #130048	; 0x1fc00
 8009ed4:	9301      	str	r3, [sp, #4]
 8009ed6:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ed8:	4811      	ldr	r0, [pc, #68]	; (8009f20 <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009eda:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009ede:	6411      	str	r1, [r2, #64]	; 0x40
 8009ee0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8009ee2:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
 8009ee6:	9101      	str	r1, [sp, #4]
 8009ee8:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009eea:	9302      	str	r3, [sp, #8]
 8009eec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009eee:	f043 0304 	orr.w	r3, r3, #4
 8009ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8009ef4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009ef6:	f003 0304 	and.w	r3, r3, #4
 8009efa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009efc:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009efe:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f00:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8009f02:	f44f 55e0 	mov.w	r5, #7168	; 0x1c00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f06:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f08:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f0a:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009f0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f12:	f001 fa83 	bl	800b41c <HAL_GPIO_Init>
}
 8009f16:	b008      	add	sp, #32
 8009f18:	bd70      	pop	{r4, r5, r6, pc}
 8009f1a:	bf00      	nop
 8009f1c:	40003c00 	.word	0x40003c00
 8009f20:	40020800 	.word	0x40020800

08009f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009f24:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 8009f26:	6803      	ldr	r3, [r0, #0]
 8009f28:	4a2b      	ldr	r2, [pc, #172]	; (8009fd8 <HAL_TIM_Base_MspInit+0xb4>)
 8009f2a:	4293      	cmp	r3, r2
{
 8009f2c:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 8009f2e:	d02a      	beq.n	8009f86 <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8009f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f34:	d008      	beq.n	8009f48 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8009f36:	4a29      	ldr	r2, [pc, #164]	; (8009fdc <HAL_TIM_Base_MspInit+0xb8>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d015      	beq.n	8009f68 <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 8009f3c:	4a28      	ldr	r2, [pc, #160]	; (8009fe0 <HAL_TIM_Base_MspInit+0xbc>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d037      	beq.n	8009fb2 <HAL_TIM_Base_MspInit+0x8e>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8009f42:	b005      	add	sp, #20
 8009f44:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009f48:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	9201      	str	r2, [sp, #4]
 8009f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f52:	f042 0201 	orr.w	r2, r2, #1
 8009f56:	641a      	str	r2, [r3, #64]	; 0x40
 8009f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5a:	f003 0301 	and.w	r3, r3, #1
 8009f5e:	9301      	str	r3, [sp, #4]
 8009f60:	9b01      	ldr	r3, [sp, #4]
}
 8009f62:	b005      	add	sp, #20
 8009f64:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009f68:	4b1e      	ldr	r3, [pc, #120]	; (8009fe4 <HAL_TIM_Base_MspInit+0xc0>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	9202      	str	r2, [sp, #8]
 8009f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f70:	f042 0208 	orr.w	r2, r2, #8
 8009f74:	641a      	str	r2, [r3, #64]	; 0x40
 8009f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f78:	f003 0308 	and.w	r3, r3, #8
 8009f7c:	9302      	str	r3, [sp, #8]
 8009f7e:	9b02      	ldr	r3, [sp, #8]
}
 8009f80:	b005      	add	sp, #20
 8009f82:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009f86:	2200      	movs	r2, #0
 8009f88:	4b16      	ldr	r3, [pc, #88]	; (8009fe4 <HAL_TIM_Base_MspInit+0xc0>)
 8009f8a:	9200      	str	r2, [sp, #0]
 8009f8c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009f8e:	f041 0101 	orr.w	r1, r1, #1
 8009f92:	6459      	str	r1, [r3, #68]	; 0x44
 8009f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f96:	f003 0301 	and.w	r3, r3, #1
 8009f9a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8009f9c:	2019      	movs	r0, #25
 8009f9e:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009fa0:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8009fa2:	f000 ffe7 	bl	800af74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009fa6:	2019      	movs	r0, #25
}
 8009fa8:	b005      	add	sp, #20
 8009faa:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8009fae:	f001 b817 	b.w	800afe0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009fb2:	4b0c      	ldr	r3, [pc, #48]	; (8009fe4 <HAL_TIM_Base_MspInit+0xc0>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	9203      	str	r2, [sp, #12]
 8009fb8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009fba:	f041 0102 	orr.w	r1, r1, #2
 8009fbe:	6459      	str	r1, [r3, #68]	; 0x44
 8009fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8009fc8:	202c      	movs	r0, #44	; 0x2c
 8009fca:	2101      	movs	r1, #1
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009fcc:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8009fce:	f000 ffd1 	bl	800af74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8009fd2:	202c      	movs	r0, #44	; 0x2c
 8009fd4:	e7e8      	b.n	8009fa8 <HAL_TIM_Base_MspInit+0x84>
 8009fd6:	bf00      	nop
 8009fd8:	40010000 	.word	0x40010000
 8009fdc:	40000c00 	.word	0x40000c00
 8009fe0:	40010400 	.word	0x40010400
 8009fe4:	40023800 	.word	0x40023800

08009fe8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8009fe8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM3)
 8009fea:	6802      	ldr	r2, [r0, #0]
 8009fec:	4927      	ldr	r1, [pc, #156]	; (800a08c <HAL_TIM_Encoder_MspInit+0xa4>)
{
 8009fee:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ff0:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM3)
 8009ff2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ff4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009ff8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009ffc:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim_encoder->Instance==TIM3)
 8009ffe:	d024      	beq.n	800a04a <HAL_TIM_Encoder_MspInit+0x62>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM4)
 800a000:	4923      	ldr	r1, [pc, #140]	; (800a090 <HAL_TIM_Encoder_MspInit+0xa8>)
 800a002:	428a      	cmp	r2, r1
 800a004:	d001      	beq.n	800a00a <HAL_TIM_Encoder_MspInit+0x22>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800a006:	b00a      	add	sp, #40	; 0x28
 800a008:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a00a:	4a22      	ldr	r2, [pc, #136]	; (800a094 <HAL_TIM_Encoder_MspInit+0xac>)
 800a00c:	9303      	str	r3, [sp, #12]
 800a00e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a010:	4821      	ldr	r0, [pc, #132]	; (800a098 <HAL_TIM_Encoder_MspInit+0xb0>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a012:	f041 0104 	orr.w	r1, r1, #4
 800a016:	6411      	str	r1, [r2, #64]	; 0x40
 800a018:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a01a:	f001 0104 	and.w	r1, r1, #4
 800a01e:	9103      	str	r1, [sp, #12]
 800a020:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a022:	9304      	str	r3, [sp, #16]
 800a024:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a026:	f043 0302 	orr.w	r3, r3, #2
 800a02a:	6313      	str	r3, [r2, #48]	; 0x30
 800a02c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a02e:	f003 0302 	and.w	r3, r3, #2
 800a032:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a034:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a036:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a038:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a03a:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a03c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a03e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a042:	f001 f9eb 	bl	800b41c <HAL_GPIO_Init>
}
 800a046:	b00a      	add	sp, #40	; 0x28
 800a048:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a04a:	4a12      	ldr	r2, [pc, #72]	; (800a094 <HAL_TIM_Encoder_MspInit+0xac>)
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a050:	4812      	ldr	r0, [pc, #72]	; (800a09c <HAL_TIM_Encoder_MspInit+0xb4>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a052:	f041 0102 	orr.w	r1, r1, #2
 800a056:	6411      	str	r1, [r2, #64]	; 0x40
 800a058:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a05a:	f001 0102 	and.w	r1, r1, #2
 800a05e:	9101      	str	r1, [sp, #4]
 800a060:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a062:	9302      	str	r3, [sp, #8]
 800a064:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a066:	f043 0301 	orr.w	r3, r3, #1
 800a06a:	6313      	str	r3, [r2, #48]	; 0x30
 800a06c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a074:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a076:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a078:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a07a:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a07c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a07e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a082:	f001 f9cb 	bl	800b41c <HAL_GPIO_Init>
}
 800a086:	b00a      	add	sp, #40	; 0x28
 800a088:	bd10      	pop	{r4, pc}
 800a08a:	bf00      	nop
 800a08c:	40000400 	.word	0x40000400
 800a090:	40000800 	.word	0x40000800
 800a094:	40023800 	.word	0x40023800
 800a098:	40020400 	.word	0x40020400
 800a09c:	40020000 	.word	0x40020000

0800a0a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a0a0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM2)
 800a0a2:	6803      	ldr	r3, [r0, #0]
{
 800a0a4:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0a6:	2400      	movs	r4, #0
  if(htim->Instance==TIM2)
 800a0a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0ac:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800a0b0:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800a0b4:	9409      	str	r4, [sp, #36]	; 0x24
  if(htim->Instance==TIM2)
 800a0b6:	d007      	beq.n	800a0c8 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 800a0b8:	4a30      	ldr	r2, [pc, #192]	; (800a17c <HAL_TIM_MspPostInit+0xdc>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d049      	beq.n	800a152 <HAL_TIM_MspPostInit+0xb2>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM8)
 800a0be:	4a30      	ldr	r2, [pc, #192]	; (800a180 <HAL_TIM_MspPostInit+0xe0>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d01b      	beq.n	800a0fc <HAL_TIM_MspPostInit+0x5c>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800a0c4:	b00a      	add	sp, #40	; 0x28
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0c8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800a0cc:	9401      	str	r4, [sp, #4]
 800a0ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0d0:	482c      	ldr	r0, [pc, #176]	; (800a184 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0d2:	f042 0201 	orr.w	r2, r2, #1
 800a0d6:	631a      	str	r2, [r3, #48]	; 0x30
 800a0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0e0:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a0e2:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0e4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a0e6:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0e8:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0ea:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0ec:	e9cd 5405 	strd	r5, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a0f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0f4:	f001 f992 	bl	800b41c <HAL_GPIO_Init>
}
 800a0f8:	b00a      	add	sp, #40	; 0x28
 800a0fa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0fc:	4b22      	ldr	r3, [pc, #136]	; (800a188 <HAL_TIM_MspPostInit+0xe8>)
 800a0fe:	9403      	str	r4, [sp, #12]
 800a100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a102:	4820      	ldr	r0, [pc, #128]	; (800a184 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a104:	f042 0201 	orr.w	r2, r2, #1
 800a108:	631a      	str	r2, [r3, #48]	; 0x30
 800a10a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a10c:	f002 0201 	and.w	r2, r2, #1
 800a110:	9203      	str	r2, [sp, #12]
 800a112:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a114:	9404      	str	r4, [sp, #16]
 800a116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a118:	f042 0204 	orr.w	r2, r2, #4
 800a11c:	631a      	str	r2, [r3, #48]	; 0x30
 800a11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a120:	f003 0304 	and.w	r3, r3, #4
 800a124:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a126:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a128:	2320      	movs	r3, #32
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a12a:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a12c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a12e:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a130:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a132:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a136:	f001 f971 	bl	800b41c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a13a:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a13c:	a905      	add	r1, sp, #20
 800a13e:	4813      	ldr	r0, [pc, #76]	; (800a18c <HAL_TIM_MspPostInit+0xec>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a140:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a142:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a144:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a148:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a14a:	f001 f967 	bl	800b41c <HAL_GPIO_Init>
}
 800a14e:	b00a      	add	sp, #40	; 0x28
 800a150:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a152:	4b0d      	ldr	r3, [pc, #52]	; (800a188 <HAL_TIM_MspPostInit+0xe8>)
 800a154:	9402      	str	r4, [sp, #8]
 800a156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a158:	480a      	ldr	r0, [pc, #40]	; (800a184 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a15a:	f042 0201 	orr.w	r2, r2, #1
 800a15e:	631a      	str	r2, [r3, #48]	; 0x30
 800a160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a168:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a16a:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a16c:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a16e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a170:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a174:	f001 f952 	bl	800b41c <HAL_GPIO_Init>
}
 800a178:	b00a      	add	sp, #40	; 0x28
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	40000c00 	.word	0x40000c00
 800a180:	40010400 	.word	0x40010400
 800a184:	40020000 	.word	0x40020000
 800a188:	40023800 	.word	0x40023800
 800a18c:	40020800 	.word	0x40020800

0800a190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a190:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800a192:	6801      	ldr	r1, [r0, #0]
 800a194:	4a18      	ldr	r2, [pc, #96]	; (800a1f8 <HAL_UART_MspInit+0x68>)
{
 800a196:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a198:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 800a19a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a19c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800a1a0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a1a4:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800a1a6:	d001      	beq.n	800a1ac <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a1a8:	b008      	add	sp, #32
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800a1ac:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1b4:	4811      	ldr	r0, [pc, #68]	; (800a1fc <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800a1b6:	f041 0110 	orr.w	r1, r1, #16
 800a1ba:	6451      	str	r1, [r2, #68]	; 0x44
 800a1bc:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800a1be:	f001 0110 	and.w	r1, r1, #16
 800a1c2:	9101      	str	r1, [sp, #4]
 800a1c4:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1c6:	9302      	str	r3, [sp, #8]
 800a1c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a1ca:	f043 0301 	orr.w	r3, r3, #1
 800a1ce:	6313      	str	r3, [r2, #48]	; 0x30
 800a1d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1d8:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a1da:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1dc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a1de:	f44f 65c0 	mov.w	r5, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1e2:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1e4:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1e6:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a1ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1ee:	f001 f915 	bl	800b41c <HAL_GPIO_Init>
}
 800a1f2:	b008      	add	sp, #32
 800a1f4:	bd70      	pop	{r4, r5, r6, pc}
 800a1f6:	bf00      	nop
 800a1f8:	40011000 	.word	0x40011000
 800a1fc:	40020000 	.word	0x40020000

0800a200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a200:	e7fe      	b.n	800a200 <NMI_Handler>
 800a202:	bf00      	nop

0800a204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a204:	e7fe      	b.n	800a204 <HardFault_Handler>
 800a206:	bf00      	nop

0800a208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a208:	e7fe      	b.n	800a208 <MemManage_Handler>
 800a20a:	bf00      	nop

0800a20c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a20c:	e7fe      	b.n	800a20c <BusFault_Handler>
 800a20e:	bf00      	nop

0800a210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a210:	e7fe      	b.n	800a210 <UsageFault_Handler>
 800a212:	bf00      	nop

0800a214 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop

0800a218 <DebugMon_Handler>:
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop

0800a21c <PendSV_Handler>:
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop

0800a220 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a220:	f000 bbf8 	b.w	800aa14 <HAL_IncTick>

0800a224 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a224:	4801      	ldr	r0, [pc, #4]	; (800a22c <TIM1_UP_TIM10_IRQHandler+0x8>)
 800a226:	f002 be6f 	b.w	800cf08 <HAL_TIM_IRQHandler>
 800a22a:	bf00      	nop
 800a22c:	20001c7c 	.word	0x20001c7c

0800a230 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800a230:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a234:	f001 b9fa 	b.w	800b62c <HAL_GPIO_EXTI_IRQHandler>

0800a238 <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800a238:	4801      	ldr	r0, [pc, #4]	; (800a240 <TIM8_UP_TIM13_IRQHandler+0x8>)
 800a23a:	f002 be65 	b.w	800cf08 <HAL_TIM_IRQHandler>
 800a23e:	bf00      	nop
 800a240:	20001a34 	.word	0x20001a34

0800a244 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a244:	4801      	ldr	r0, [pc, #4]	; (800a24c <DMA2_Stream0_IRQHandler+0x8>)
 800a246:	f001 b813 	b.w	800b270 <HAL_DMA_IRQHandler>
 800a24a:	bf00      	nop
 800a24c:	20001c1c 	.word	0x20001c1c

0800a250 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800a250:	4801      	ldr	r0, [pc, #4]	; (800a258 <DMA2_Stream2_IRQHandler+0x8>)
 800a252:	f001 b80d 	b.w	800b270 <HAL_DMA_IRQHandler>
 800a256:	bf00      	nop
 800a258:	20001cbc 	.word	0x20001cbc

0800a25c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a25c:	4b05      	ldr	r3, [pc, #20]	; (800a274 <SystemInit+0x18>)
 800a25e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a262:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a266:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800a26a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a26e:	6099      	str	r1, [r3, #8]
#endif
}
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	e000ed00 	.word	0xe000ed00

0800a278 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a278:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a27a:	1e16      	subs	r6, r2, #0
 800a27c:	dd07      	ble.n	800a28e <_read+0x16>
 800a27e:	460c      	mov	r4, r1
 800a280:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800a282:	f7ff fb21 	bl	80098c8 <__io_getchar>
 800a286:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a28a:	42a5      	cmp	r5, r4
 800a28c:	d1f9      	bne.n	800a282 <_read+0xa>
	}

return len;
}
 800a28e:	4630      	mov	r0, r6
 800a290:	bd70      	pop	{r4, r5, r6, pc}
 800a292:	bf00      	nop

0800a294 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a294:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a296:	1e16      	subs	r6, r2, #0
 800a298:	dd07      	ble.n	800a2aa <_write+0x16>
 800a29a:	460c      	mov	r4, r1
 800a29c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800a29e:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a2a2:	f7ff faff 	bl	80098a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a2a6:	42ac      	cmp	r4, r5
 800a2a8:	d1f9      	bne.n	800a29e <_write+0xa>
	}
	return len;
}
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	bd70      	pop	{r4, r5, r6, pc}
 800a2ae:	bf00      	nop

0800a2b0 <_close>:

int _close(int file)
{
	return -1;
}
 800a2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop

0800a2b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800a2b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2bc:	604b      	str	r3, [r1, #4]
	return 0;
}
 800a2be:	2000      	movs	r0, #0
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop

0800a2c4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800a2c4:	2001      	movs	r0, #1
 800a2c6:	4770      	bx	lr

0800a2c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	4770      	bx	lr

0800a2cc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a2cc:	490c      	ldr	r1, [pc, #48]	; (800a300 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a2ce:	4a0d      	ldr	r2, [pc, #52]	; (800a304 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800a2d0:	680b      	ldr	r3, [r1, #0]
{
 800a2d2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a2d4:	4c0c      	ldr	r4, [pc, #48]	; (800a308 <_sbrk+0x3c>)
 800a2d6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800a2d8:	b12b      	cbz	r3, 800a2e6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a2da:	4418      	add	r0, r3
 800a2dc:	4290      	cmp	r0, r2
 800a2de:	d807      	bhi.n	800a2f0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800a2e0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800a2e6:	4b09      	ldr	r3, [pc, #36]	; (800a30c <_sbrk+0x40>)
 800a2e8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800a2ea:	4418      	add	r0, r3
 800a2ec:	4290      	cmp	r0, r2
 800a2ee:	d9f7      	bls.n	800a2e0 <_sbrk+0x14>
    errno = ENOMEM;
 800a2f0:	f003 f93e 	bl	800d570 <__errno>
 800a2f4:	230c      	movs	r3, #12
 800a2f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800a2f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	bd10      	pop	{r4, pc}
 800a300:	20000234 	.word	0x20000234
 800a304:	20020000 	.word	0x20020000
 800a308:	00000400 	.word	0x00000400
 800a30c:	20001d28 	.word	0x20001d28

0800a310 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800a310:	b508      	push	{r3, lr}
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800a312:	2203      	movs	r2, #3
 800a314:	4909      	ldr	r1, [pc, #36]	; (800a33c <ADCStart+0x2c>)
 800a316:	480a      	ldr	r0, [pc, #40]	; (800a340 <ADCStart+0x30>)
 800a318:	f000 fc52 	bl	800abc0 <HAL_ADC_Start_DMA>
 800a31c:	b950      	cbnz	r0, 800a334 <ADCStart+0x24>
	{
		Error_Handler();
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800a31e:	2202      	movs	r2, #2
 800a320:	4908      	ldr	r1, [pc, #32]	; (800a344 <ADCStart+0x34>)
 800a322:	4809      	ldr	r0, [pc, #36]	; (800a348 <ADCStart+0x38>)
 800a324:	f000 fc4c 	bl	800abc0 <HAL_ADC_Start_DMA>
 800a328:	b900      	cbnz	r0, 800a32c <ADCStart+0x1c>
	{
		Error_Handler();
	}

}
 800a32a:	bd08      	pop	{r3, pc}
 800a32c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 800a330:	f7ff bcfe 	b.w	8009d30 <Error_Handler>
		Error_Handler();
 800a334:	f7ff fcfc 	bl	8009d30 <Error_Handler>
 800a338:	e7f1      	b.n	800a31e <ADCStart+0xe>
 800a33a:	bf00      	nop
 800a33c:	200002b8 	.word	0x200002b8
 800a340:	20001b94 	.word	0x20001b94
 800a344:	200002c4 	.word	0x200002c4
 800a348:	20001ab4 	.word	0x20001ab4

0800a34c <ADCStop>:
void ADCStop()
{
 800a34c:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800a34e:	480e      	ldr	r0, [pc, #56]	; (800a388 <ADCStop+0x3c>)
 800a350:	f000 fcd8 	bl	800ad04 <HAL_ADC_Stop_DMA>
 800a354:	b970      	cbnz	r0, 800a374 <ADCStop+0x28>
	{
		printf("な\r\n");
		Error_Handler();
		printf("に\r\n");
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800a356:	480d      	ldr	r0, [pc, #52]	; (800a38c <ADCStop+0x40>)
 800a358:	f000 fcd4 	bl	800ad04 <HAL_ADC_Stop_DMA>
 800a35c:	b900      	cbnz	r0, 800a360 <ADCStop+0x14>
	{
		printf("ぬ\r\n");
		Error_Handler();
		printf("ね\r\n");
	}
}
 800a35e:	bd08      	pop	{r3, pc}
		printf("ぬ\r\n");
 800a360:	480b      	ldr	r0, [pc, #44]	; (800a390 <ADCStop+0x44>)
 800a362:	f004 fbcf 	bl	800eb04 <puts>
		Error_Handler();
 800a366:	f7ff fce3 	bl	8009d30 <Error_Handler>
		printf("ね\r\n");
 800a36a:	480a      	ldr	r0, [pc, #40]	; (800a394 <ADCStop+0x48>)
}
 800a36c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printf("ね\r\n");
 800a370:	f004 bbc8 	b.w	800eb04 <puts>
		printf("な\r\n");
 800a374:	4808      	ldr	r0, [pc, #32]	; (800a398 <ADCStop+0x4c>)
 800a376:	f004 fbc5 	bl	800eb04 <puts>
		Error_Handler();
 800a37a:	f7ff fcd9 	bl	8009d30 <Error_Handler>
		printf("に\r\n");
 800a37e:	4807      	ldr	r0, [pc, #28]	; (800a39c <ADCStop+0x50>)
 800a380:	f004 fbc0 	bl	800eb04 <puts>
 800a384:	e7e7      	b.n	800a356 <ADCStop+0xa>
 800a386:	bf00      	nop
 800a388:	20001b94 	.word	0x20001b94
 800a38c:	20001ab4 	.word	0x20001ab4
 800a390:	08011bfc 	.word	0x08011bfc
 800a394:	08011c04 	.word	0x08011c04
 800a398:	08011bec 	.word	0x08011bec
 800a39c:	08011bf4 	.word	0x08011bf4

0800a3a0 <FLASH_Write_HalfWord>:
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
	FLASH->KEYR =  0x45670123;
 800a3a0:	4b10      	ldr	r3, [pc, #64]	; (800a3e4 <FLASH_Write_HalfWord+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800a3a2:	4a11      	ldr	r2, [pc, #68]	; (800a3e8 <FLASH_Write_HalfWord+0x48>)
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
	HAL_FLASH_Lock();
}

void FLASH_Write_HalfWord(uint32_t address, uint16_t data)
{
 800a3a4:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800a3a6:	4c11      	ldr	r4, [pc, #68]	; (800a3ec <FLASH_Write_HalfWord+0x4c>)
 800a3a8:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800a3aa:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800a3ac:	68da      	ldr	r2, [r3, #12]
 800a3ae:	03d2      	lsls	r2, r2, #15
 800a3b0:	d4fc      	bmi.n	800a3ac <FLASH_Write_HalfWord+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a3b2:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800a3b4:	4a0b      	ldr	r2, [pc, #44]	; (800a3e4 <FLASH_Write_HalfWord+0x44>)
	FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a3b6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800a3ba:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800a3bc:	691c      	ldr	r4, [r3, #16]
 800a3be:	f044 0401 	orr.w	r4, r4, #1
 800a3c2:	611c      	str	r4, [r3, #16]

	*(__IO uint16_t*)address = data;
 800a3c4:	8001      	strh	r1, [r0, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800a3c6:	68d3      	ldr	r3, [r2, #12]
 800a3c8:	03db      	lsls	r3, r3, #15
 800a3ca:	d4fc      	bmi.n	800a3c6 <FLASH_Write_HalfWord+0x26>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800a3cc:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800a3ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800a3d2:	f023 0301 	bic.w	r3, r3, #1
 800a3d6:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800a3d8:	6913      	ldr	r3, [r2, #16]
 800a3da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3de:	6113      	str	r3, [r2, #16]
}
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	40023c00 	.word	0x40023c00
 800a3e8:	cdef89ab 	.word	0xcdef89ab
 800a3ec:	45670123 	.word	0x45670123

0800a3f0 <FLASH_Read_Word>:
	FLASH->KEYR =  0x45670123;
 800a3f0:	4b10      	ldr	r3, [pc, #64]	; (800a434 <FLASH_Read_Word+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800a3f2:	4a11      	ldr	r2, [pc, #68]	; (800a438 <FLASH_Read_Word+0x48>)
	FLASH->CR &= ~FLASH_CR_PG;

	FLASH_Lock();
}
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800a3f4:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800a3f6:	4c11      	ldr	r4, [pc, #68]	; (800a43c <FLASH_Read_Word+0x4c>)
 800a3f8:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800a3fa:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800a3fc:	68da      	ldr	r2, [r3, #12]
 800a3fe:	03d2      	lsls	r2, r2, #15
 800a400:	d4fc      	bmi.n	800a3fc <FLASH_Read_Word+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800a402:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800a404:	4a0b      	ldr	r2, [pc, #44]	; (800a434 <FLASH_Read_Word+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800a406:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800a40a:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800a40c:	691c      	ldr	r4, [r3, #16]
 800a40e:	f044 0401 	orr.w	r4, r4, #1
 800a412:	611c      	str	r4, [r3, #16]

	* data = *(__IO uint32_t*)address;
 800a414:	6803      	ldr	r3, [r0, #0]
 800a416:	600b      	str	r3, [r1, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800a418:	68d3      	ldr	r3, [r2, #12]
 800a41a:	03db      	lsls	r3, r3, #15
 800a41c:	d4fc      	bmi.n	800a418 <FLASH_Read_Word+0x28>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800a41e:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800a420:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800a424:	f023 0301 	bic.w	r3, r3, #1
 800a428:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800a42a:	6913      	ldr	r3, [r2, #16]
 800a42c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a430:	6113      	str	r3, [r2, #16]
}
 800a432:	4770      	bx	lr
 800a434:	40023c00 	.word	0x40023c00
 800a438:	cdef89ab 	.word	0xcdef89ab
 800a43c:	45670123 	.word	0x45670123

0800a440 <ReadIMU>:
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return val;
}
inline float ReadIMU(uint8_t a, uint8_t b) {
 800a440:	b570      	push	{r4, r5, r6, lr}
	ret2 = ret[1] | 0x80;
//	reg[0] = 0x37;
//	reg[1] = 0x38;
//
//	ret = reg[0] | 0x80;
	CS_RESET;
 800a442:	4c23      	ldr	r4, [pc, #140]	; (800a4d0 <ReadIMU+0x90>)
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800a444:	4d23      	ldr	r5, [pc, #140]	; (800a4d4 <ReadIMU+0x94>)
inline float ReadIMU(uint8_t a, uint8_t b) {
 800a446:	b082      	sub	sp, #8
	ret2 = ret[1] | 0x80;
 800a448:	f061 037f 	orn	r3, r1, #127	; 0x7f
	ret1 = ret[0] | 0x80;
 800a44c:	f060 067f 	orn	r6, r0, #127	; 0x7f
	CS_RESET;
 800a450:	2200      	movs	r2, #0
 800a452:	4620      	mov	r0, r4
 800a454:	2104      	movs	r1, #4
	ret2 = ret[1] | 0x80;
 800a456:	f88d 3005 	strb.w	r3, [sp, #5]
	ret1 = ret[0] | 0x80;
 800a45a:	f88d 6004 	strb.w	r6, [sp, #4]
	CS_RESET;
 800a45e:	f001 f8e1 	bl	800b624 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800a462:	a901      	add	r1, sp, #4
 800a464:	4628      	mov	r0, r5
 800a466:	2364      	movs	r3, #100	; 0x64
 800a468:	2201      	movs	r2, #1
 800a46a:	f001 fbfd 	bl	800bc68 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800a46e:	2364      	movs	r3, #100	; 0x64
 800a470:	f10d 0106 	add.w	r1, sp, #6
 800a474:	4628      	mov	r0, r5
 800a476:	2201      	movs	r2, #1
 800a478:	f001 fd3e 	bl	800bef8 <HAL_SPI_Receive>
	CS_SET;
 800a47c:	4620      	mov	r0, r4
 800a47e:	2201      	movs	r2, #1
 800a480:	2104      	movs	r1, #4
 800a482:	f001 f8cf 	bl	800b624 <HAL_GPIO_WritePin>

//	ret = reg[1] | 0x80;
	CS_RESET;
 800a486:	4620      	mov	r0, r4
 800a488:	2200      	movs	r2, #0
 800a48a:	2104      	movs	r1, #4
 800a48c:	f001 f8ca 	bl	800b624 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800a490:	f10d 0105 	add.w	r1, sp, #5
 800a494:	4628      	mov	r0, r5
 800a496:	2364      	movs	r3, #100	; 0x64
 800a498:	2201      	movs	r2, #1
 800a49a:	f001 fbe5 	bl	800bc68 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800a49e:	2364      	movs	r3, #100	; 0x64
 800a4a0:	f10d 0107 	add.w	r1, sp, #7
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f001 fd26 	bl	800bef8 <HAL_SPI_Receive>
	CS_SET;
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	2104      	movs	r1, #4
 800a4b2:	f001 f8b7 	bl	800b624 <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800a4b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a4ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a4be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	res = (float)law_data;
 800a4c2:	b21b      	sxth	r3, r3
 800a4c4:	ee00 3a10 	vmov	s0, r3
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return res;
}
 800a4c8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800a4cc:	b002      	add	sp, #8
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	40020c00 	.word	0x40020c00
 800a4d4:	20001b3c 	.word	0x20001b3c

0800a4d8 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800a4d8:	b508      	push	{r3, lr}
	//Switch
	switch(mode){
 800a4da:	2807      	cmp	r0, #7
 800a4dc:	d851      	bhi.n	800a582 <ChangeLED+0xaa>
 800a4de:	e8df f000 	tbb	[pc, r0]
 800a4e2:	2c18      	.short	0x2c18
 800a4e4:	463e362e 	.word	0x463e362e
 800a4e8:	044e      	.short	0x044e
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);

		break;
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a4f0:	4824      	ldr	r0, [pc, #144]	; (800a584 <ChangeLED+0xac>)
 800a4f2:	f001 f897 	bl	800b624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a4fc:	4821      	ldr	r0, [pc, #132]	; (800a584 <ChangeLED+0xac>)
 800a4fe:	f001 f891 	bl	800b624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a502:	2201      	movs	r2, #1
 800a504:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a508:	481f      	ldr	r0, [pc, #124]	; (800a588 <ChangeLED+0xb0>)

		break;
	default: break;

	}
}
 800a50a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a50e:	f001 b889 	b.w	800b624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a512:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a514:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a518:	481a      	ldr	r0, [pc, #104]	; (800a584 <ChangeLED+0xac>)
 800a51a:	f001 f883 	bl	800b624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a51e:	2200      	movs	r2, #0
 800a520:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a524:	4817      	ldr	r0, [pc, #92]	; (800a584 <ChangeLED+0xac>)
 800a526:	f001 f87d 	bl	800b624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a52a:	2200      	movs	r2, #0
 800a52c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a530:	4815      	ldr	r0, [pc, #84]	; (800a588 <ChangeLED+0xb0>)
}
 800a532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a536:	f001 b875 	b.w	800b624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a53a:	2201      	movs	r2, #1
 800a53c:	e7ea      	b.n	800a514 <ChangeLED+0x3c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a53e:	2200      	movs	r2, #0
 800a540:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a544:	480f      	ldr	r0, [pc, #60]	; (800a584 <ChangeLED+0xac>)
 800a546:	f001 f86d 	bl	800b624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a54a:	2201      	movs	r2, #1
 800a54c:	e7e8      	b.n	800a520 <ChangeLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a54e:	2201      	movs	r2, #1
 800a550:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a554:	480b      	ldr	r0, [pc, #44]	; (800a584 <ChangeLED+0xac>)
 800a556:	f001 f865 	bl	800b624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a55a:	2201      	movs	r2, #1
 800a55c:	e7e0      	b.n	800a520 <ChangeLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a55e:	2200      	movs	r2, #0
 800a560:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a564:	4807      	ldr	r0, [pc, #28]	; (800a584 <ChangeLED+0xac>)
 800a566:	f001 f85d 	bl	800b624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a56a:	2200      	movs	r2, #0
 800a56c:	e7c4      	b.n	800a4f8 <ChangeLED+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a56e:	2201      	movs	r2, #1
 800a570:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a574:	4803      	ldr	r0, [pc, #12]	; (800a584 <ChangeLED+0xac>)
 800a576:	f001 f855 	bl	800b624 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a57a:	2200      	movs	r2, #0
 800a57c:	e7bc      	b.n	800a4f8 <ChangeLED+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a57e:	2200      	movs	r2, #0
 800a580:	e7b4      	b.n	800a4ec <ChangeLED+0x14>
}
 800a582:	bd08      	pop	{r3, pc}
 800a584:	40020800 	.word	0x40020800
 800a588:	40020400 	.word	0x40020400
 800a58c:	00000000 	.word	0x00000000

0800a590 <Motor_Switch>:
  {
	  Error_Handler();
  }
#endif
}
inline void Motor_Switch(int left, int right){
 800a590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > 0 ){
 800a592:	1e05      	subs	r5, r0, #0
inline void Motor_Switch(int left, int right){
 800a594:	460c      	mov	r4, r1
	if (left > 0 ){
 800a596:	dc1a      	bgt.n	800a5ce <Motor_Switch+0x3e>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転

	}
	else  if (left < 0){
 800a598:	d142      	bne.n	800a620 <Motor_Switch+0x90>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
		left = -left;
	}
	if (right > 0){
 800a59a:	2c00      	cmp	r4, #0
 800a59c:	f04f 0600 	mov.w	r6, #0
 800a5a0:	f04f 0700 	mov.w	r7, #0
 800a5a4:	dc1f      	bgt.n	800a5e6 <Motor_Switch+0x56>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転

	}

	else if (right < 0){
 800a5a6:	d13e      	bne.n	800a626 <Motor_Switch+0x96>
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
	  	right = -right;
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800a5a8:	a323      	add	r3, pc, #140	; (adr r3, 800a638 <Motor_Switch+0xa8>)
 800a5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	4639      	mov	r1, r7
 800a5b2:	f7fe f9e9 	bl	8008988 <__aeabi_dcmpgt>
 800a5b6:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	bf18      	it	ne
 800a5be:	461d      	movne	r5, r3
	if(right > 4200*0.6) right = 4200*0.6;


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800a5c0:	4a1f      	ldr	r2, [pc, #124]	; (800a640 <Motor_Switch+0xb0>)
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800a5c2:	4b20      	ldr	r3, [pc, #128]	; (800a644 <Motor_Switch+0xb4>)
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800a5c4:	6812      	ldr	r2, [r2, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800a5c6:	681b      	ldr	r3, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800a5c8:	6394      	str	r4, [r2, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800a5ca:	641d      	str	r5, [r3, #64]	; 0x40
}
 800a5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800a5ce:	2201      	movs	r2, #1
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800a5d0:	2104      	movs	r1, #4
 800a5d2:	481d      	ldr	r0, [pc, #116]	; (800a648 <Motor_Switch+0xb8>)
 800a5d4:	f001 f826 	bl	800b624 <HAL_GPIO_WritePin>
 800a5d8:	4628      	mov	r0, r5
 800a5da:	f7fd fedb 	bl	8008394 <__aeabi_i2d>
	if (right > 0){
 800a5de:	2c00      	cmp	r4, #0
 800a5e0:	4606      	mov	r6, r0
 800a5e2:	460f      	mov	r7, r1
 800a5e4:	dddf      	ble.n	800a5a6 <Motor_Switch+0x16>
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	4817      	ldr	r0, [pc, #92]	; (800a648 <Motor_Switch+0xb8>)
 800a5ec:	f001 f81a 	bl	800b624 <HAL_GPIO_WritePin>
	if(left > 4200*0.6) left = 4200*0.6;
 800a5f0:	a311      	add	r3, pc, #68	; (adr r3, 800a638 <Motor_Switch+0xa8>)
 800a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	4639      	mov	r1, r7
 800a5fa:	f7fe f9c5 	bl	8008988 <__aeabi_dcmpgt>
 800a5fe:	f640 16d8 	movw	r6, #2520	; 0x9d8
 800a602:	2800      	cmp	r0, #0
 800a604:	bf18      	it	ne
 800a606:	4635      	movne	r5, r6
	if(right > 4200*0.6) right = 4200*0.6;
 800a608:	4620      	mov	r0, r4
 800a60a:	f7fd fec3 	bl	8008394 <__aeabi_i2d>
 800a60e:	a30a      	add	r3, pc, #40	; (adr r3, 800a638 <Motor_Switch+0xa8>)
 800a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a614:	f7fe f9b8 	bl	8008988 <__aeabi_dcmpgt>
 800a618:	2800      	cmp	r0, #0
 800a61a:	bf18      	it	ne
 800a61c:	4634      	movne	r4, r6
 800a61e:	e7cf      	b.n	800a5c0 <Motor_Switch+0x30>
		left = -left;
 800a620:	426d      	negs	r5, r5
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800a622:	2200      	movs	r2, #0
 800a624:	e7d4      	b.n	800a5d0 <Motor_Switch+0x40>
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800a626:	2201      	movs	r2, #1
 800a628:	4611      	mov	r1, r2
 800a62a:	4807      	ldr	r0, [pc, #28]	; (800a648 <Motor_Switch+0xb8>)
 800a62c:	f000 fffa 	bl	800b624 <HAL_GPIO_WritePin>
	  	right = -right;
 800a630:	4264      	negs	r4, r4
 800a632:	e7dd      	b.n	800a5f0 <Motor_Switch+0x60>
 800a634:	f3af 8000 	nop.w
 800a638:	00000000 	.word	0x00000000
 800a63c:	40a3b000 	.word	0x40a3b000
 800a640:	20000278 	.word	0x20000278
 800a644:	20000238 	.word	0x20000238
 800a648:	40020000 	.word	0x40020000

0800a64c <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800a64c:	b4f0      	push	{r4, r5, r6, r7}
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
	error = abs( last[receiver_num] - raw );
 800a64e:	4e1a      	ldr	r6, [pc, #104]	; (800a6b8 <GetWallDataAverage+0x6c>)
	last[receiver_num] = raw;
	integrate[receiver_num] += error;

	count[receiver_num]++;
 800a650:	4c1a      	ldr	r4, [pc, #104]	; (800a6bc <GetWallDataAverage+0x70>)
	error = abs( last[receiver_num] - raw );
 800a652:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
	integrate[receiver_num] += error;
 800a656:	4d1a      	ldr	r5, [pc, #104]	; (800a6c0 <GetWallDataAverage+0x74>)
	last[receiver_num] = raw;
 800a658:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800a65c:	1a5b      	subs	r3, r3, r1
	count[receiver_num]++;
 800a65e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
	integrate[receiver_num] += error;
 800a662:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800a666:	2b00      	cmp	r3, #0
 800a668:	bfb8      	it	lt
 800a66a:	425b      	neglt	r3, r3
	count[receiver_num]++;
 800a66c:	3101      	adds	r1, #1
	integrate[receiver_num] += error;
 800a66e:	443b      	add	r3, r7
	if(count[receiver_num] == average_of_n_times)
 800a670:	4281      	cmp	r1, r0
	integrate[receiver_num] += error;
 800a672:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
	count[receiver_num]++;
 800a676:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800a67a:	d006      	beq.n	800a68a <GetWallDataAverage+0x3e>
 800a67c:	4b11      	ldr	r3, [pc, #68]	; (800a6c4 <GetWallDataAverage+0x78>)
 800a67e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a682:	ed92 0a00 	vldr	s0, [r2]
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
		integrate[receiver_num] = 0;
		count[receiver_num] = 0;
	}
	return average[receiver_num];
}
 800a686:	bcf0      	pop	{r4, r5, r6, r7}
 800a688:	4770      	bx	lr
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800a68a:	ee07 3a90 	vmov	s15, r3
 800a68e:	ee07 1a10 	vmov	s14, r1
 800a692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a696:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a69a:	4b0a      	ldr	r3, [pc, #40]	; (800a6c4 <GetWallDataAverage+0x78>)
 800a69c:	ee87 0a87 	vdiv.f32	s0, s15, s14
		integrate[receiver_num] = 0;
 800a6a0:	2100      	movs	r1, #0
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800a6a2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		integrate[receiver_num] = 0;
 800a6a6:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
		count[receiver_num] = 0;
 800a6aa:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}
 800a6ae:	bcf0      	pop	{r4, r5, r6, r7}
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800a6b0:	ed83 0a00 	vstr	s0, [r3]
}
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	20000304 	.word	0x20000304
 800a6bc:	200002e4 	.word	0x200002e4
 800a6c0:	200002f4 	.word	0x200002f4
 800a6c4:	200002d4 	.word	0x200002d4

0800a6c8 <ADCToBatteryVoltage>:
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
	float battery_voltage = 0;
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800a6c8:	ee07 0a90 	vmov	s15, r0
 800a6cc:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a6d0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800a6d4:	ee20 0a20 	vmul.f32	s0, s0, s1
	return battery_voltage;
}
 800a6d8:	ee80 0a01 	vdiv.f32	s0, s0, s2
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop

0800a6e0 <IntegerPower>:
//-------------------------//

int IntegerPower(int integer, int exponential)
{
	int pattern_num = 1;
	for(int i=0; i < exponential ; i++)
 800a6e0:	2900      	cmp	r1, #0
 800a6e2:	dd08      	ble.n	800a6f6 <IntegerPower+0x16>
 800a6e4:	2300      	movs	r3, #0
	int pattern_num = 1;
 800a6e6:	2201      	movs	r2, #1
	for(int i=0; i < exponential ; i++)
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	4299      	cmp	r1, r3
	{
		pattern_num *= integer;
 800a6ec:	fb00 f202 	mul.w	r2, r0, r2
	for(int i=0; i < exponential ; i++)
 800a6f0:	d1fa      	bne.n	800a6e8 <IntegerPower+0x8>
	}
	return pattern_num;
}
 800a6f2:	4610      	mov	r0, r2
 800a6f4:	4770      	bx	lr
	int pattern_num = 1;
 800a6f6:	2201      	movs	r2, #1
}
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	4770      	bx	lr

0800a6fc <GetBatteryLevel>:

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
	float current_percentage = current_voltage / battery_max;
	float lowest_percentage =  battery_min / battery_max;
 800a6fc:	eec0 0a81 	vdiv.f32	s1, s1, s2

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;

	int pattern = 0;
	for(int i=0; i < level_num; i++)
 800a700:	2800      	cmp	r0, #0
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800a702:	ee07 0a10 	vmov	s14, r0
 800a706:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a70a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a70e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	float current_percentage = current_voltage / battery_max;
 800a712:	ee80 0a01 	vdiv.f32	s0, s0, s2
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800a716:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	for(int i=0; i < level_num; i++)
 800a71a:	dd14      	ble.n	800a746 <GetBatteryLevel+0x4a>
 800a71c:	2300      	movs	r3, #0
	int pattern = 0;
 800a71e:	461a      	mov	r2, r3
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800a720:	ee07 3a90 	vmov	s15, r3
 800a724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a728:	eef0 6a60 	vmov.f32	s13, s1
 800a72c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a730:	eeb4 0a66 	vcmp.f32	s0, s13
 800a734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a738:	bfa8      	it	ge
 800a73a:	461a      	movge	r2, r3
	for(int i=0; i < level_num; i++)
 800a73c:	3301      	adds	r3, #1
 800a73e:	4298      	cmp	r0, r3
 800a740:	d1ee      	bne.n	800a720 <GetBatteryLevel+0x24>
		{
			pattern = i;
		}
	}
	return pattern;
}
 800a742:	4610      	mov	r0, r2
 800a744:	4770      	bx	lr
	int pattern = 0;
 800a746:	2200      	movs	r2, #0
}
 800a748:	4610      	mov	r0, r2
 800a74a:	4770      	bx	lr

0800a74c <PIDControl>:
inline int PIDControl(int n, float target, float current)
{
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800a74c:	4b21      	ldr	r3, [pc, #132]	; (800a7d4 <PIDControl+0x88>)
{
 800a74e:	b510      	push	{r4, lr}
	if(Pid[n].flag == 0)
 800a750:	242c      	movs	r4, #44	; 0x2c
 800a752:	fb04 3400 	mla	r4, r4, r0, r3
 800a756:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a758:	b3a8      	cbz	r0, 800a7c6 <PIDControl+0x7a>
	else
	{
		Pid[n].target = target;
		Pid[n].current = current;

		Pid[n].e = Pid[n].target - Pid[n].current;
 800a75a:	ee70 6a60 	vsub.f32	s13, s0, s1
		Pid[n].ei += Pid[n].e * pid_T;
 800a75e:	ed9f 4a1e 	vldr	s8, [pc, #120]	; 800a7d8 <PIDControl+0x8c>
 800a762:	ed94 6a04 	vldr	s12, [r4, #16]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
		Pid[n].elast = Pid[n].e;
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800a766:	ed94 7a01 	vldr	s14, [r4, #4]
 800a76a:	ed94 5a00 	vldr	s10, [r4]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800a76e:	edd4 7a06 	vldr	s15, [r4, #24]
 800a772:	eddf 4a1a 	vldr	s9, [pc, #104]	; 800a7dc <PIDControl+0x90>
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800a776:	edd4 5a02 	vldr	s11, [r4, #8]
		Pid[n].e = Pid[n].target - Pid[n].current;
 800a77a:	edc4 6a03 	vstr	s13, [r4, #12]
		Pid[n].ei += Pid[n].e * pid_T;
 800a77e:	eea6 6a84 	vfma.f32	s12, s13, s8
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800a782:	ee76 7ae7 	vsub.f32	s15, s13, s15
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800a786:	ee26 7a07 	vmul.f32	s14, s12, s14
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800a78a:	ee67 7aa4 	vmul.f32	s15, s15, s9
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800a78e:	eea6 7a85 	vfma.f32	s14, s13, s10
		Pid[n].ei += Pid[n].e * pid_T;
 800a792:	ed84 6a04 	vstr	s12, [r4, #16]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800a796:	eea7 7aa5 	vfma.f32	s14, s15, s11
		Pid[n].elast = Pid[n].e;
 800a79a:	edc4 6a06 	vstr	s13, [r4, #24]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800a79e:	edc4 7a05 	vstr	s15, [r4, #20]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800a7a2:	ee17 0a10 	vmov	r0, s14
		Pid[n].target = target;
 800a7a6:	ed84 0a08 	vstr	s0, [r4, #32]
		Pid[n].current = current;
 800a7aa:	edc4 0a07 	vstr	s1, [r4, #28]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800a7ae:	f7fd fe03 	bl	80083b8 <__aeabi_f2d>
 800a7b2:	ec41 0b10 	vmov	d0, r0, r1
 800a7b6:	f002 fe91 	bl	800d4dc <round>
 800a7ba:	ec51 0b10 	vmov	r0, r1, d0
 800a7be:	f7fe f903 	bl	80089c8 <__aeabi_d2iz>
 800a7c2:	6260      	str	r0, [r4, #36]	; 0x24
		return Pid[n].out;
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 800a7c4:	bd10      	pop	{r4, pc}
		Pid[n].e = 0.0f;
 800a7c6:	2300      	movs	r3, #0
		Pid[n].out = 0;
 800a7c8:	6260      	str	r0, [r4, #36]	; 0x24
		Pid[n].e = 0.0f;
 800a7ca:	60e3      	str	r3, [r4, #12]
		Pid[n].ei = 0.0f;
 800a7cc:	6123      	str	r3, [r4, #16]
		Pid[n].ed = 0.0f;
 800a7ce:	6163      	str	r3, [r4, #20]
		Pid[n].elast = 0.0f;
 800a7d0:	61a3      	str	r3, [r4, #24]
}
 800a7d2:	bd10      	pop	{r4, pc}
 800a7d4:	20000314 	.word	0x20000314
 800a7d8:	3a83126f 	.word	0x3a83126f
 800a7dc:	4479ffff 	.word	0x4479ffff

0800a7e0 <HAL_GPIO_EXTI_Callback>:
#include <stdio.h>
#include <math.h>
//中間モジュール。
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_12)
 800a7e0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800a7e4:	d106      	bne.n	800a7f4 <HAL_GPIO_EXTI_Callback+0x14>
	{
	  gpio_callback_count++;
 800a7e6:	4a04      	ldr	r2, [pc, #16]	; (800a7f8 <HAL_GPIO_EXTI_Callback+0x18>)
 800a7e8:	6813      	ldr	r3, [r2, #0]
 800a7ea:	3301      	adds	r3, #1
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	bfc8      	it	gt
 800a7f0:	2300      	movgt	r3, #0
 800a7f2:	6013      	str	r3, [r2, #0]
	}
}
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	200004cc 	.word	0x200004cc

0800a7fc <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int8_t mode)
{
 800a7fc:	b538      	push	{r3, r4, r5, lr}
 800a7fe:	4605      	mov	r5, r0
 800a800:	2405      	movs	r4, #5
	for(int i=0; i < 5; i++)
	{
		ChangeLED(mode);
 800a802:	4628      	mov	r0, r5
 800a804:	f7ff fe68 	bl	800a4d8 <ChangeLED>
		HAL_Delay(100);
 800a808:	2064      	movs	r0, #100	; 0x64
 800a80a:	f000 f915 	bl	800aa38 <HAL_Delay>
		ChangeLED(0);
 800a80e:	2000      	movs	r0, #0
 800a810:	f7ff fe62 	bl	800a4d8 <ChangeLED>
		HAL_Delay(100);
 800a814:	2064      	movs	r0, #100	; 0x64
 800a816:	f000 f90f 	bl	800aa38 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800a81a:	3c01      	subs	r4, #1
 800a81c:	d1f1      	bne.n	800a802 <Signal+0x6>
	}
}
 800a81e:	bd38      	pop	{r3, r4, r5, pc}

0800a820 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800a820:	b510      	push	{r4, lr}

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800a822:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800a86c <BatteryCheck+0x4c>
 800a826:	eddf 0a12 	vldr	s1, [pc, #72]	; 800a870 <BatteryCheck+0x50>
{
 800a82a:	ed2d 8b02 	vpush	{d8}
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800a82e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800a832:	f7ff ff49 	bl	800a6c8 <ADCToBatteryVoltage>

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800a836:	2103      	movs	r1, #3
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800a838:	eeb0 8a40 	vmov.f32	s16, s0
	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800a83c:	2002      	movs	r0, #2
 800a83e:	f7ff ff4f 	bl	800a6e0 <IntegerPower>

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800a842:	eeb0 0a48 	vmov.f32	s0, s16
 800a846:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800a874 <BatteryCheck+0x54>
 800a84a:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800a878 <BatteryCheck+0x58>
 800a84e:	f7ff ff55 	bl	800a6fc <GetBatteryLevel>
 800a852:	4604      	mov	r4, r0

	printf("%d\r\n", battery_level);
 800a854:	4601      	mov	r1, r0
 800a856:	4809      	ldr	r0, [pc, #36]	; (800a87c <BatteryCheck+0x5c>)
 800a858:	f004 f8cc 	bl	800e9f4 <iprintf>
	Signal( battery_level );
}
 800a85c:	ecbd 8b02 	vpop	{d8}
	Signal( battery_level );
 800a860:	b260      	sxtb	r0, r4
}
 800a862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Signal( battery_level );
 800a866:	f7ff bfc9 	b.w	800a7fc <Signal>
 800a86a:	bf00      	nop
 800a86c:	45800000 	.word	0x45800000
 800a870:	40533333 	.word	0x40533333
 800a874:	41066666 	.word	0x41066666
 800a878:	40e66666 	.word	0x40e66666
 800a87c:	08011c10 	.word	0x08011c10

0800a880 <ModeSelect>:
	HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1);
	Signal( 7 );
}

void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800a880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a884:	4606      	mov	r6, r0
 800a886:	ed2d 8b04 	vpush	{d8-d9}
 800a88a:	460f      	mov	r7, r1
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ

	//エンコーダ開始。初期値セット込み
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800a88c:	4828      	ldr	r0, [pc, #160]	; (800a930 <ModeSelect+0xb0>)
	*pMode=min;

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	TIM3->CNT = INITIAL_PULSE;
	gpio_callback_count = 0;
 800a88e:	4c29      	ldr	r4, [pc, #164]	; (800a934 <ModeSelect+0xb4>)
	{
		//printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800a890:	ed9f 9a29 	vldr	s18, [pc, #164]	; 800a938 <ModeSelect+0xb8>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800a894:	eddf 8a29 	vldr	s17, [pc, #164]	; 800a93c <ModeSelect+0xbc>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800a898:	2100      	movs	r1, #0
{
 800a89a:	4690      	mov	r8, r2
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800a89c:	f002 f858 	bl	800c950 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 800a8a0:	2104      	movs	r1, #4
 800a8a2:	4823      	ldr	r0, [pc, #140]	; (800a930 <ModeSelect+0xb0>)
 800a8a4:	f002 f854 	bl	800c950 <HAL_TIM_Encoder_Start>
	TIM3->CNT = INITIAL_PULSE;
 800a8a8:	4a25      	ldr	r2, [pc, #148]	; (800a940 <ModeSelect+0xc0>)
	*pMode=min;
 800a8aa:	f888 6000 	strb.w	r6, [r8]
	TIM3->CNT = INITIAL_PULSE;
 800a8ae:	f247 552f 	movw	r5, #29999	; 0x752f
	gpio_callback_count = 0;
 800a8b2:	2300      	movs	r3, #0
	TIM3->CNT = INITIAL_PULSE;
 800a8b4:	6255      	str	r5, [r2, #36]	; 0x24
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800a8b6:	4691      	mov	r9, r2
	gpio_callback_count = 0;
 800a8b8:	6023      	str	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800a8ba:	b9eb      	cbnz	r3, 800a8f8 <ModeSelect+0x78>
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800a8bc:	ed99 8a09 	vldr	s16, [r9, #36]	; 0x24
		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800a8c0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800a8c4:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800a8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8cc:	db0c      	blt.n	800a8e8 <ModeSelect+0x68>
		  	  *pMode += 1;
 800a8ce:	f898 0000 	ldrb.w	r0, [r8]
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	b240      	sxtb	r0, r0
		  		  *pMode = min;
 800a8d6:	42b8      	cmp	r0, r7
 800a8d8:	bfc8      	it	gt
 800a8da:	4630      	movgt	r0, r6
 800a8dc:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800a8e0:	f7ff fdfa 	bl	800a4d8 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800a8e4:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800a8e8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f0:	d910      	bls.n	800a914 <ModeSelect+0x94>
 800a8f2:	6823      	ldr	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d0e1      	beq.n	800a8bc <ModeSelect+0x3c>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;
		  }
	}
	gpio_callback_count = 0;
 800a8f8:	2300      	movs	r3, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	480c      	ldr	r0, [pc, #48]	; (800a930 <ModeSelect+0xb0>)
	gpio_callback_count = 0;
 800a8fe:	6023      	str	r3, [r4, #0]
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800a900:	f002 f84a 	bl	800c998 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
}
 800a904:	ecbd 8b04 	vpop	{d8-d9}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800a908:	2104      	movs	r1, #4
 800a90a:	4809      	ldr	r0, [pc, #36]	; (800a930 <ModeSelect+0xb0>)
}
 800a90c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800a910:	f002 b842 	b.w	800c998 <HAL_TIM_Encoder_Stop>
		  	  *pMode -= 1;
 800a914:	f898 0000 	ldrb.w	r0, [r8]
 800a918:	3801      	subs	r0, #1
 800a91a:	b240      	sxtb	r0, r0
 800a91c:	42b0      	cmp	r0, r6
 800a91e:	bfb8      	it	lt
 800a920:	4638      	movlt	r0, r7
 800a922:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800a926:	f7ff fdd7 	bl	800a4d8 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800a92a:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
 800a92e:	e7e0      	b.n	800a8f2 <ModeSelect+0x72>
 800a930:	20001afc 	.word	0x20001afc
 800a934:	200004cc 	.word	0x200004cc
 800a938:	47352f00 	.word	0x47352f00
 800a93c:	4654bc00 	.word	0x4654bc00
 800a940:	40000400 	.word	0x40000400

0800a944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a97c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a948:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a94a:	e003      	b.n	800a954 <LoopCopyDataInit>

0800a94c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a94c:	4b0c      	ldr	r3, [pc, #48]	; (800a980 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a94e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a950:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a952:	3104      	adds	r1, #4

0800a954 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a954:	480b      	ldr	r0, [pc, #44]	; (800a984 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a956:	4b0c      	ldr	r3, [pc, #48]	; (800a988 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a958:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a95a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a95c:	d3f6      	bcc.n	800a94c <CopyDataInit>
  ldr  r2, =_sbss
 800a95e:	4a0b      	ldr	r2, [pc, #44]	; (800a98c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a960:	e002      	b.n	800a968 <LoopFillZerobss>

0800a962 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a962:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a964:	f842 3b04 	str.w	r3, [r2], #4

0800a968 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a968:	4b09      	ldr	r3, [pc, #36]	; (800a990 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a96a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a96c:	d3f9      	bcc.n	800a962 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a96e:	f7ff fc75 	bl	800a25c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a972:	f002 ff7d 	bl	800d870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a976:	f7ff f809 	bl	800998c <main>
  bx  lr    
 800a97a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a97c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a980:	08011f48 	.word	0x08011f48
  ldr  r0, =_sdata
 800a984:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a988:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 800a98c:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 800a990:	20001d24 	.word	0x20001d24

0800a994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a994:	e7fe      	b.n	800a994 <ADC_IRQHandler>
	...

0800a998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a998:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a99a:	4a0e      	ldr	r2, [pc, #56]	; (800a9d4 <HAL_InitTick+0x3c>)
 800a99c:	4b0e      	ldr	r3, [pc, #56]	; (800a9d8 <HAL_InitTick+0x40>)
 800a99e:	7812      	ldrb	r2, [r2, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
{
 800a9a2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a9a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a9a8:	fbb0 f0f2 	udiv	r0, r0, r2
 800a9ac:	fbb3 f0f0 	udiv	r0, r3, r0
 800a9b0:	f000 fb24 	bl	800affc <HAL_SYSTICK_Config>
 800a9b4:	b908      	cbnz	r0, 800a9ba <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a9b6:	2d0f      	cmp	r5, #15
 800a9b8:	d901      	bls.n	800a9be <HAL_InitTick+0x26>
    return HAL_ERROR;
 800a9ba:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800a9bc:	bd38      	pop	{r3, r4, r5, pc}
 800a9be:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c8:	f000 fad4 	bl	800af74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a9cc:	4b03      	ldr	r3, [pc, #12]	; (800a9dc <HAL_InitTick+0x44>)
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	601d      	str	r5, [r3, #0]
}
 800a9d2:	bd38      	pop	{r3, r4, r5, pc}
 800a9d4:	20000024 	.word	0x20000024
 800a9d8:	20000020 	.word	0x20000020
 800a9dc:	20000028 	.word	0x20000028

0800a9e0 <HAL_Init>:
{
 800a9e0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a9e2:	4b0b      	ldr	r3, [pc, #44]	; (800aa10 <HAL_Init+0x30>)
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a9f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9fa:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a9fc:	2003      	movs	r0, #3
 800a9fe:	f000 faa7 	bl	800af50 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800aa02:	2000      	movs	r0, #0
 800aa04:	f7ff ffc8 	bl	800a998 <HAL_InitTick>
  HAL_MspInit();
 800aa08:	f7ff f994 	bl	8009d34 <HAL_MspInit>
}
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	bd08      	pop	{r3, pc}
 800aa10:	40023c00 	.word	0x40023c00

0800aa14 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800aa14:	4a03      	ldr	r2, [pc, #12]	; (800aa24 <HAL_IncTick+0x10>)
 800aa16:	4b04      	ldr	r3, [pc, #16]	; (800aa28 <HAL_IncTick+0x14>)
 800aa18:	6811      	ldr	r1, [r2, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	440b      	add	r3, r1
 800aa1e:	6013      	str	r3, [r2, #0]
}
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	20001d1c 	.word	0x20001d1c
 800aa28:	20000024 	.word	0x20000024

0800aa2c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800aa2c:	4b01      	ldr	r3, [pc, #4]	; (800aa34 <HAL_GetTick+0x8>)
 800aa2e:	6818      	ldr	r0, [r3, #0]
}
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	20001d1c 	.word	0x20001d1c

0800aa38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800aa3c:	f7ff fff6 	bl	800aa2c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aa40:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800aa42:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800aa44:	d002      	beq.n	800aa4c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800aa46:	4b04      	ldr	r3, [pc, #16]	; (800aa58 <HAL_Delay+0x20>)
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800aa4c:	f7ff ffee 	bl	800aa2c <HAL_GetTick>
 800aa50:	1b40      	subs	r0, r0, r5
 800aa52:	42a0      	cmp	r0, r4
 800aa54:	d3fa      	bcc.n	800aa4c <HAL_Delay+0x14>
  {
  }
}
 800aa56:	bd38      	pop	{r3, r4, r5, pc}
 800aa58:	20000024 	.word	0x20000024

0800aa5c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	f000 8091 	beq.w	800ab84 <HAL_ADC_Init+0x128>
{
 800aa62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800aa64:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800aa66:	4604      	mov	r4, r0
 800aa68:	2d00      	cmp	r5, #0
 800aa6a:	f000 8081 	beq.w	800ab70 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800aa6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa70:	06db      	lsls	r3, r3, #27
 800aa72:	d504      	bpl.n	800aa7e <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800aa74:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800aa76:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800aa78:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800aa7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800aa7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800aa80:	494d      	ldr	r1, [pc, #308]	; (800abb8 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800aa82:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800aa84:	4d4d      	ldr	r5, [pc, #308]	; (800abbc <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 800aa86:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800aa8a:	f022 0202 	bic.w	r2, r2, #2
 800aa8e:	f042 0202 	orr.w	r2, r2, #2
 800aa92:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800aa94:	684a      	ldr	r2, [r1, #4]
 800aa96:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800aa9a:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800aa9c:	684a      	ldr	r2, [r1, #4]
 800aa9e:	6860      	ldr	r0, [r4, #4]
 800aaa0:	4302      	orrs	r2, r0
 800aaa2:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800aaa4:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800aaa6:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800aaa8:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800aaaa:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800aaac:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800aab0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800aab2:	685a      	ldr	r2, [r3, #4]
 800aab4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800aab8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800aaba:	6858      	ldr	r0, [r3, #4]
 800aabc:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800aac0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800aac2:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800aac4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800aac6:	4339      	orrs	r1, r7
 800aac8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800aaca:	6899      	ldr	r1, [r3, #8]
 800aacc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800aad0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800aad2:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800aad4:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800aad6:	ea42 0206 	orr.w	r2, r2, r6
 800aada:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800aadc:	d054      	beq.n	800ab88 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800aade:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800aae0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800aae2:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800aae6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800aae8:	689a      	ldr	r2, [r3, #8]
 800aaea:	4310      	orrs	r0, r2
 800aaec:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800aaee:	6899      	ldr	r1, [r3, #8]
 800aaf0:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800aaf4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800aaf6:	689a      	ldr	r2, [r3, #8]
 800aaf8:	432a      	orrs	r2, r5
 800aafa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800aafc:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800aafe:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ab00:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ab04:	f021 0102 	bic.w	r1, r1, #2
 800ab08:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ab0a:	689a      	ldr	r2, [r3, #8]
 800ab0c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800ab10:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ab12:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d140      	bne.n	800ab9a <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ab18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab1c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ab1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ab20:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ab22:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ab26:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ab28:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ab2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ab2e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ab30:	3d01      	subs	r5, #1
 800ab32:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 800ab36:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ab38:	6898      	ldr	r0, [r3, #8]
 800ab3a:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 800ab3e:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ab40:	6899      	ldr	r1, [r3, #8]
 800ab42:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 800ab46:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ab48:	6899      	ldr	r1, [r3, #8]
 800ab4a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800ab4e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ab50:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800ab52:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ab54:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800ab58:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800ab5a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800ab5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab5e:	f023 0303 	bic.w	r3, r3, #3
 800ab62:	f043 0301 	orr.w	r3, r3, #1
 800ab66:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800ab68:	2300      	movs	r3, #0
 800ab6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ab6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 800ab70:	f7ff f8fc 	bl	8009d6c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800ab74:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ab76:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800ab78:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ab7c:	06db      	lsls	r3, r3, #27
 800ab7e:	f53f af79 	bmi.w	800aa74 <HAL_ADC_Init+0x18>
 800ab82:	e77c      	b.n	800aa7e <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 800ab84:	2001      	movs	r0, #1
}
 800ab86:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ab88:	689a      	ldr	r2, [r3, #8]
 800ab8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ab8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ab90:	689a      	ldr	r2, [r3, #8]
 800ab92:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ab96:	609a      	str	r2, [r3, #8]
 800ab98:	e7b0      	b.n	800aafc <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ab9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ab9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800aba0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800aba8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800abaa:	685a      	ldr	r2, [r3, #4]
 800abac:	3901      	subs	r1, #1
 800abae:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800abb2:	605a      	str	r2, [r3, #4]
 800abb4:	e7b3      	b.n	800ab1e <HAL_ADC_Init+0xc2>
 800abb6:	bf00      	nop
 800abb8:	40012300 	.word	0x40012300
 800abbc:	0f000001 	.word	0x0f000001

0800abc0 <HAL_ADC_Start_DMA>:
{
 800abc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800abc2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800abc6:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 800abc8:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 800abca:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800abcc:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 800abce:	f000 8081 	beq.w	800acd4 <HAL_ADC_Start_DMA+0x114>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800abd2:	6805      	ldr	r5, [r0, #0]
 800abd4:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 800abd6:	2401      	movs	r4, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800abd8:	07df      	lsls	r7, r3, #31
  __HAL_LOCK(hadc);
 800abda:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800abde:	d414      	bmi.n	800ac0a <HAL_ADC_Start_DMA+0x4a>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800abe0:	4b40      	ldr	r3, [pc, #256]	; (800ace4 <HAL_ADC_Start_DMA+0x124>)
 800abe2:	4e41      	ldr	r6, [pc, #260]	; (800ace8 <HAL_ADC_Start_DMA+0x128>)
 800abe4:	681c      	ldr	r4, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 800abe6:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800abe8:	fba6 6404 	umull	r6, r4, r6, r4
 800abec:	0ca4      	lsrs	r4, r4, #18
    __HAL_ADC_ENABLE(hadc);
 800abee:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800abf2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    __HAL_ADC_ENABLE(hadc);
 800abf6:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800abf8:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800abfa:	9b01      	ldr	r3, [sp, #4]
 800abfc:	b12b      	cbz	r3, 800ac0a <HAL_ADC_Start_DMA+0x4a>
      counter--;
 800abfe:	9c01      	ldr	r4, [sp, #4]
 800ac00:	3c01      	subs	r4, #1
 800ac02:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800ac04:	9c01      	ldr	r4, [sp, #4]
 800ac06:	2c00      	cmp	r4, #0
 800ac08:	d1f9      	bne.n	800abfe <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800ac0a:	68ab      	ldr	r3, [r5, #8]
 800ac0c:	07de      	lsls	r6, r3, #31
 800ac0e:	d543      	bpl.n	800ac98 <HAL_ADC_Start_DMA+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 800ac10:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800ac12:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 800ac16:	f024 0401 	bic.w	r4, r4, #1
 800ac1a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800ac1e:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800ac20:	686b      	ldr	r3, [r5, #4]
 800ac22:	055c      	lsls	r4, r3, #21
 800ac24:	d505      	bpl.n	800ac32 <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800ac26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ac28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ac2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac30:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ac32:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ac34:	4e2d      	ldr	r6, [pc, #180]	; (800acec <HAL_ADC_Start_DMA+0x12c>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ac36:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800ac3a:	bf1c      	itt	ne
 800ac3c:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 800ac3e:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800ac42:	6443      	str	r3, [r0, #68]	; 0x44
 800ac44:	4604      	mov	r4, r0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ac46:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800ac48:	4613      	mov	r3, r2
    __HAL_UNLOCK(hadc);   
 800ac4a:	2700      	movs	r7, #0
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800ac4c:	4a28      	ldr	r2, [pc, #160]	; (800acf0 <HAL_ADC_Start_DMA+0x130>)
    __HAL_UNLOCK(hadc);   
 800ac4e:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ac52:	63c6      	str	r6, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800ac54:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ac56:	4e27      	ldr	r6, [pc, #156]	; (800acf4 <HAL_ADC_Start_DMA+0x134>)
 800ac58:	64c6      	str	r6, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800ac5a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800ac5e:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ac60:	686e      	ldr	r6, [r5, #4]
 800ac62:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
 800ac66:	606e      	str	r6, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800ac68:	68ae      	ldr	r6, [r5, #8]
 800ac6a:	f446 7680 	orr.w	r6, r6, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ac6e:	460a      	mov	r2, r1
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800ac70:	60ae      	str	r6, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ac72:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800ac76:	f000 fa75 	bl	800b164 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800ac7a:	4b1f      	ldr	r3, [pc, #124]	; (800acf8 <HAL_ADC_Start_DMA+0x138>)
 800ac7c:	685a      	ldr	r2, [r3, #4]
 800ac7e:	06d2      	lsls	r2, r2, #27
 800ac80:	d10d      	bne.n	800ac9e <HAL_ADC_Start_DMA+0xde>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800ac82:	6822      	ldr	r2, [r4, #0]
 800ac84:	491d      	ldr	r1, [pc, #116]	; (800acfc <HAL_ADC_Start_DMA+0x13c>)
 800ac86:	428a      	cmp	r2, r1
 800ac88:	d01b      	beq.n	800acc2 <HAL_ADC_Start_DMA+0x102>
 800ac8a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800ac8e:	428a      	cmp	r2, r1
 800ac90:	d023      	beq.n	800acda <HAL_ADC_Start_DMA+0x11a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800ac92:	491b      	ldr	r1, [pc, #108]	; (800ad00 <HAL_ADC_Start_DMA+0x140>)
 800ac94:	428a      	cmp	r2, r1
 800ac96:	d00f      	beq.n	800acb8 <HAL_ADC_Start_DMA+0xf8>
  return HAL_OK;
 800ac98:	2000      	movs	r0, #0
}
 800ac9a:	b003      	add	sp, #12
 800ac9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800ac9e:	6823      	ldr	r3, [r4, #0]
 800aca0:	4a16      	ldr	r2, [pc, #88]	; (800acfc <HAL_ADC_Start_DMA+0x13c>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d1f8      	bne.n	800ac98 <HAL_ADC_Start_DMA+0xd8>
 800aca6:	6898      	ldr	r0, [r3, #8]
 800aca8:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800acac:	d1f4      	bne.n	800ac98 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800acae:	689a      	ldr	r2, [r3, #8]
 800acb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800acb4:	609a      	str	r2, [r3, #8]
 800acb6:	e7f0      	b.n	800ac9a <HAL_ADC_Start_DMA+0xda>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	f003 031f 	and.w	r3, r3, #31
 800acbe:	2b0f      	cmp	r3, #15
 800acc0:	d8ea      	bhi.n	800ac98 <HAL_ADC_Start_DMA+0xd8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800acc2:	6890      	ldr	r0, [r2, #8]
 800acc4:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800acc8:	d1e6      	bne.n	800ac98 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800acca:	6893      	ldr	r3, [r2, #8]
 800accc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acd0:	6093      	str	r3, [r2, #8]
 800acd2:	e7e2      	b.n	800ac9a <HAL_ADC_Start_DMA+0xda>
  __HAL_LOCK(hadc);
 800acd4:	2002      	movs	r0, #2
}
 800acd6:	b003      	add	sp, #12
 800acd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	06db      	lsls	r3, r3, #27
 800acde:	d0f0      	beq.n	800acc2 <HAL_ADC_Start_DMA+0x102>
 800ace0:	e7da      	b.n	800ac98 <HAL_ADC_Start_DMA+0xd8>
 800ace2:	bf00      	nop
 800ace4:	20000020 	.word	0x20000020
 800ace8:	431bde83 	.word	0x431bde83
 800acec:	0800ad95 	.word	0x0800ad95
 800acf0:	0800ad6d 	.word	0x0800ad6d
 800acf4:	0800ad7d 	.word	0x0800ad7d
 800acf8:	40012300 	.word	0x40012300
 800acfc:	40012000 	.word	0x40012000
 800ad00:	40012200 	.word	0x40012200

0800ad04 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 800ad04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d029      	beq.n	800ad60 <HAL_ADC_Stop_DMA+0x5c>
  __HAL_ADC_DISABLE(hadc);
 800ad0c:	6803      	ldr	r3, [r0, #0]
 800ad0e:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800ad10:	2101      	movs	r1, #1
  __HAL_ADC_DISABLE(hadc);
 800ad12:	f022 0201 	bic.w	r2, r2, #1
{
 800ad16:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800ad18:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800ad1c:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800ad1e:	689a      	ldr	r2, [r3, #8]
 800ad20:	07d2      	lsls	r2, r2, #31
 800ad22:	4604      	mov	r4, r0
 800ad24:	d504      	bpl.n	800ad30 <HAL_ADC_Stop_DMA+0x2c>
  __HAL_UNLOCK(hadc);
 800ad26:	2300      	movs	r3, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ad28:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800ad2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ad2e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800ad30:	689a      	ldr	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800ad32:	6b80      	ldr	r0, [r0, #56]	; 0x38
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800ad34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad38:	609a      	str	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800ad3a:	f000 fa51 	bl	800b1e0 <HAL_DMA_Abort>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800ad3e:	6822      	ldr	r2, [r4, #0]
 800ad40:	6853      	ldr	r3, [r2, #4]
 800ad42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ad46:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800ad48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ad4e:	f023 0301 	bic.w	r3, r3, #1
 800ad52:	f043 0301 	orr.w	r3, r3, #1
 800ad56:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800ad58:	2300      	movs	r3, #0
 800ad5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ad5e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800ad60:	2002      	movs	r0, #2
}
 800ad62:	4770      	bx	lr

0800ad64 <HAL_ADC_ConvCpltCallback>:
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop

0800ad68 <HAL_ADC_ConvHalfCpltCallback>:
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop

0800ad6c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800ad6c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ad6e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800ad70:	f7ff fffa 	bl	800ad68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ad74:	bd08      	pop	{r3, pc}
 800ad76:	bf00      	nop

0800ad78 <HAL_ADC_ErrorCallback>:
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop

0800ad7c <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ad7c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800ad7e:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800ad80:	2340      	movs	r3, #64	; 0x40
 800ad82:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800ad84:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ad86:	f043 0304 	orr.w	r3, r3, #4
 800ad8a:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ad8c:	f7ff fff4 	bl	800ad78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ad90:	bd08      	pop	{r3, pc}
 800ad92:	bf00      	nop

0800ad94 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ad94:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800ad96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad98:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 800ad9c:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ad9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800ada0:	d123      	bne.n	800adea <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ada2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ada6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ada8:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800adaa:	688a      	ldr	r2, [r1, #8]
 800adac:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800adb0:	d117      	bne.n	800ade2 <ADC_DMAConvCplt+0x4e>
 800adb2:	7e1a      	ldrb	r2, [r3, #24]
 800adb4:	b9aa      	cbnz	r2, 800ade2 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800adb6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800adb8:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800adbc:	d002      	beq.n	800adc4 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800adbe:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800adc0:	0550      	lsls	r0, r2, #21
 800adc2:	d40e      	bmi.n	800ade2 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800adc4:	684a      	ldr	r2, [r1, #4]
 800adc6:	f022 0220 	bic.w	r2, r2, #32
 800adca:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800adcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800add2:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800add4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800add6:	04d1      	lsls	r1, r2, #19
 800add8:	d403      	bmi.n	800ade2 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800adda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800addc:	f042 0201 	orr.w	r2, r2, #1
 800ade0:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7ff ffbe 	bl	800ad64 <HAL_ADC_ConvCpltCallback>
}
 800ade8:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800adea:	06d2      	lsls	r2, r2, #27
 800adec:	d404      	bmi.n	800adf8 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800adee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800adf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800adf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adf6:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7ff ffbd 	bl	800ad78 <HAL_ADC_ErrorCallback>
}
 800adfe:	bd10      	pop	{r4, pc}

0800ae00 <HAL_ADC_ConfigChannel>:
{
 800ae00:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800ae02:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800ae06:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800ae08:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800ae0a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800ae0c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800ae0e:	f000 8095 	beq.w	800af3c <HAL_ADC_ConfigChannel+0x13c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ae12:	680d      	ldr	r5, [r1, #0]
 800ae14:	688a      	ldr	r2, [r1, #8]
 800ae16:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 800ae18:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ae1a:	2d09      	cmp	r5, #9
 800ae1c:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 800ae1e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ae22:	d829      	bhi.n	800ae78 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800ae24:	691c      	ldr	r4, [r3, #16]
 800ae26:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800ae2a:	f04f 0c07 	mov.w	ip, #7
 800ae2e:	fa0c fc06 	lsl.w	ip, ip, r6
 800ae32:	ea24 040c 	bic.w	r4, r4, ip
 800ae36:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800ae38:	691c      	ldr	r4, [r3, #16]
 800ae3a:	fa02 f606 	lsl.w	r6, r2, r6
 800ae3e:	4326      	orrs	r6, r4
 800ae40:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 800ae42:	684e      	ldr	r6, [r1, #4]
 800ae44:	2e06      	cmp	r6, #6
 800ae46:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800ae4a:	d82a      	bhi.n	800aea2 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ae4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ae4e:	3a05      	subs	r2, #5
 800ae50:	241f      	movs	r4, #31
 800ae52:	4094      	lsls	r4, r2
 800ae54:	ea21 0104 	bic.w	r1, r1, r4
 800ae58:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ae5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ae5c:	fa07 f202 	lsl.w	r2, r7, r2
 800ae60:	430a      	orrs	r2, r1
 800ae62:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ae64:	4a37      	ldr	r2, [pc, #220]	; (800af44 <HAL_ADC_ConfigChannel+0x144>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d02d      	beq.n	800aec6 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ae70:	4618      	mov	r0, r3
}
 800ae72:	b002      	add	sp, #8
 800ae74:	bcf0      	pop	{r4, r5, r6, r7}
 800ae76:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ae78:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800ae7c:	68dc      	ldr	r4, [r3, #12]
 800ae7e:	3e1e      	subs	r6, #30
 800ae80:	f04f 0c07 	mov.w	ip, #7
 800ae84:	fa0c fc06 	lsl.w	ip, ip, r6
 800ae88:	ea24 040c 	bic.w	r4, r4, ip
 800ae8c:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800ae8e:	68dc      	ldr	r4, [r3, #12]
 800ae90:	fa02 f606 	lsl.w	r6, r2, r6
 800ae94:	4326      	orrs	r6, r4
 800ae96:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 800ae98:	684e      	ldr	r6, [r1, #4]
 800ae9a:	2e06      	cmp	r6, #6
 800ae9c:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800aea0:	d9d4      	bls.n	800ae4c <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800aea2:	2e0c      	cmp	r6, #12
 800aea4:	d835      	bhi.n	800af12 <HAL_ADC_ConfigChannel+0x112>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800aea6:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 800aeaa:	211f      	movs	r1, #31
 800aeac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeae:	40a1      	lsls	r1, r4
 800aeb0:	ea22 0201 	bic.w	r2, r2, r1
 800aeb4:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800aeb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800aeb8:	fa07 f204 	lsl.w	r2, r7, r4
 800aebc:	430a      	orrs	r2, r1
 800aebe:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800aec0:	4a20      	ldr	r2, [pc, #128]	; (800af44 <HAL_ADC_ConfigChannel+0x144>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d1d1      	bne.n	800ae6a <HAL_ADC_ConfigChannel+0x6a>
 800aec6:	2d12      	cmp	r5, #18
 800aec8:	d031      	beq.n	800af2e <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800aeca:	f1a5 0310 	sub.w	r3, r5, #16
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d8cb      	bhi.n	800ae6a <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800aed2:	4a1d      	ldr	r2, [pc, #116]	; (800af48 <HAL_ADC_ConfigChannel+0x148>)
 800aed4:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800aed6:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800aed8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aedc:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800aede:	d1c4      	bne.n	800ae6a <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800aee0:	4b1a      	ldr	r3, [pc, #104]	; (800af4c <HAL_ADC_ConfigChannel+0x14c>)
 800aee2:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800aee6:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f202 3283 	addw	r2, r2, #899	; 0x383
 800aef0:	fba2 2303 	umull	r2, r3, r2, r3
 800aef4:	0c9b      	lsrs	r3, r3, #18
 800aef6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aefa:	005b      	lsls	r3, r3, #1
 800aefc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800aefe:	9b01      	ldr	r3, [sp, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d0b2      	beq.n	800ae6a <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800af04:	9b01      	ldr	r3, [sp, #4]
 800af06:	3b01      	subs	r3, #1
 800af08:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800af0a:	9b01      	ldr	r3, [sp, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1f9      	bne.n	800af04 <HAL_ADC_ConfigChannel+0x104>
 800af10:	e7ab      	b.n	800ae6a <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800af12:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800af16:	241f      	movs	r4, #31
 800af18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1a:	408c      	lsls	r4, r1
 800af1c:	ea22 0204 	bic.w	r2, r2, r4
 800af20:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800af22:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800af24:	fa07 f201 	lsl.w	r2, r7, r1
 800af28:	4322      	orrs	r2, r4
 800af2a:	62da      	str	r2, [r3, #44]	; 0x2c
 800af2c:	e79a      	b.n	800ae64 <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800af2e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800af32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800af36:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 800af3a:	e796      	b.n	800ae6a <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 800af3c:	2002      	movs	r0, #2
}
 800af3e:	b002      	add	sp, #8
 800af40:	bcf0      	pop	{r4, r5, r6, r7}
 800af42:	4770      	bx	lr
 800af44:	40012000 	.word	0x40012000
 800af48:	40012300 	.word	0x40012300
 800af4c:	20000020 	.word	0x20000020

0800af50 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800af50:	4a07      	ldr	r2, [pc, #28]	; (800af70 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800af52:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800af54:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800af58:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800af5a:	0200      	lsls	r0, r0, #8
 800af5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800af60:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800af64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800af68:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800af6a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	e000ed00 	.word	0xe000ed00

0800af74 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800af74:	4b18      	ldr	r3, [pc, #96]	; (800afd8 <HAL_NVIC_SetPriority+0x64>)
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800af7c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800af7e:	f1c3 0507 	rsb	r5, r3, #7
 800af82:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800af84:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800af88:	bf28      	it	cs
 800af8a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800af8c:	2c06      	cmp	r4, #6
 800af8e:	d919      	bls.n	800afc4 <HAL_NVIC_SetPriority+0x50>
 800af90:	3b03      	subs	r3, #3
 800af92:	f04f 34ff 	mov.w	r4, #4294967295
 800af96:	409c      	lsls	r4, r3
 800af98:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295
 800afa0:	40aa      	lsls	r2, r5
 800afa2:	ea21 0102 	bic.w	r1, r1, r2
 800afa6:	fa01 f203 	lsl.w	r2, r1, r3
 800afaa:	4322      	orrs	r2, r4
 800afac:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800afae:	2800      	cmp	r0, #0
 800afb0:	b2d2      	uxtb	r2, r2
 800afb2:	db0a      	blt.n	800afca <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afb4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800afb8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800afbc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800afc0:	bc30      	pop	{r4, r5}
 800afc2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800afc4:	2400      	movs	r4, #0
 800afc6:	4623      	mov	r3, r4
 800afc8:	e7e8      	b.n	800af9c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afca:	4b04      	ldr	r3, [pc, #16]	; (800afdc <HAL_NVIC_SetPriority+0x68>)
 800afcc:	f000 000f 	and.w	r0, r0, #15
 800afd0:	4403      	add	r3, r0
 800afd2:	761a      	strb	r2, [r3, #24]
 800afd4:	bc30      	pop	{r4, r5}
 800afd6:	4770      	bx	lr
 800afd8:	e000ed00 	.word	0xe000ed00
 800afdc:	e000ecfc 	.word	0xe000ecfc

0800afe0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800afe0:	2800      	cmp	r0, #0
 800afe2:	db07      	blt.n	800aff4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800afe4:	f000 011f 	and.w	r1, r0, #31
 800afe8:	2301      	movs	r3, #1
 800afea:	0940      	lsrs	r0, r0, #5
 800afec:	4a02      	ldr	r2, [pc, #8]	; (800aff8 <HAL_NVIC_EnableIRQ+0x18>)
 800afee:	408b      	lsls	r3, r1
 800aff0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	e000e100 	.word	0xe000e100

0800affc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800affc:	3801      	subs	r0, #1
 800affe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800b002:	d20e      	bcs.n	800b022 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b004:	4b08      	ldr	r3, [pc, #32]	; (800b028 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b006:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b008:	4c08      	ldr	r4, [pc, #32]	; (800b02c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b00a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b00c:	20f0      	movs	r0, #240	; 0xf0
 800b00e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b012:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b014:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b016:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b01a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800b01c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b020:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800b022:	2001      	movs	r0, #1
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	e000e010 	.word	0xe000e010
 800b02c:	e000ed00 	.word	0xe000ed00

0800b030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b032:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800b034:	f7ff fcfa 	bl	800aa2c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b038:	2c00      	cmp	r4, #0
 800b03a:	d054      	beq.n	800b0e6 <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b03c:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b03e:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800b040:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800b044:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 800b046:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 800b048:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 800b04c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800b050:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 800b052:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b054:	e005      	b.n	800b062 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b056:	f7ff fce9 	bl	800aa2c <HAL_GetTick>
 800b05a:	1b40      	subs	r0, r0, r5
 800b05c:	2805      	cmp	r0, #5
 800b05e:	d83b      	bhi.n	800b0d8 <HAL_DMA_Init+0xa8>
 800b060:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	07d1      	lsls	r1, r2, #31
 800b066:	d4f6      	bmi.n	800b056 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b068:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b06c:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b070:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b072:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 800b074:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b076:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b078:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b07c:	430a      	orrs	r2, r1
 800b07e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800b080:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b082:	4835      	ldr	r0, [pc, #212]	; (800b158 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b084:	4332      	orrs	r2, r6
 800b086:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800b088:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b08a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b08c:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b08e:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b090:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b094:	d029      	beq.n	800b0ea <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b096:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b098:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b09a:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b09e:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b0a0:	b2da      	uxtb	r2, r3
 800b0a2:	482e      	ldr	r0, [pc, #184]	; (800b15c <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 800b0a4:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b0a6:	3a10      	subs	r2, #16
 800b0a8:	fba0 1202 	umull	r1, r2, r0, r2
 800b0ac:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b0ae:	492c      	ldr	r1, [pc, #176]	; (800b160 <HAL_DMA_Init+0x130>)
 800b0b0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b0b4:	5c89      	ldrb	r1, [r1, r2]
 800b0b6:	65e1      	str	r1, [r4, #92]	; 0x5c
 800b0b8:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 800b0bc:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b0be:	bf88      	it	hi
 800b0c0:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b0c2:	223f      	movs	r2, #63	; 0x3f
 800b0c4:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 800b0c6:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 800b0cc:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b0ce:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b0d0:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800b0d2:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800b0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b0d8:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b0da:	2220      	movs	r2, #32
 800b0dc:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800b0de:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b0e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800b0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800b0e6:	2001      	movs	r0, #1
}
 800b0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b0ea:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 800b0ee:	4301      	orrs	r1, r0
 800b0f0:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 800b0f2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 800b0f4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800b0f6:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800b0f8:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b0fc:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 800b100:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b102:	2800      	cmp	r0, #0
 800b104:	d0cc      	beq.n	800b0a0 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b106:	b17e      	cbz	r6, 800b128 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b108:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800b10c:	d016      	beq.n	800b13c <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b10e:	2d02      	cmp	r5, #2
 800b110:	d903      	bls.n	800b11a <HAL_DMA_Init+0xea>
 800b112:	2d03      	cmp	r5, #3
 800b114:	d1c4      	bne.n	800b0a0 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b116:	01c2      	lsls	r2, r0, #7
 800b118:	d5c2      	bpl.n	800b0a0 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800b11a:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b11c:	2240      	movs	r2, #64	; 0x40
 800b11e:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 800b120:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 800b122:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800b126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 800b128:	2d01      	cmp	r5, #1
 800b12a:	d003      	beq.n	800b134 <HAL_DMA_Init+0x104>
 800b12c:	d3f3      	bcc.n	800b116 <HAL_DMA_Init+0xe6>
 800b12e:	2d02      	cmp	r5, #2
 800b130:	d1b6      	bne.n	800b0a0 <HAL_DMA_Init+0x70>
 800b132:	e7f0      	b.n	800b116 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b134:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800b138:	d1b2      	bne.n	800b0a0 <HAL_DMA_Init+0x70>
 800b13a:	e7ee      	b.n	800b11a <HAL_DMA_Init+0xea>
    switch (tmp)
 800b13c:	2d03      	cmp	r5, #3
 800b13e:	d8af      	bhi.n	800b0a0 <HAL_DMA_Init+0x70>
 800b140:	a201      	add	r2, pc, #4	; (adr r2, 800b148 <HAL_DMA_Init+0x118>)
 800b142:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800b146:	bf00      	nop
 800b148:	0800b11b 	.word	0x0800b11b
 800b14c:	0800b117 	.word	0x0800b117
 800b150:	0800b11b 	.word	0x0800b11b
 800b154:	0800b135 	.word	0x0800b135
 800b158:	f010803f 	.word	0xf010803f
 800b15c:	aaaaaaab 	.word	0xaaaaaaab
 800b160:	08011c18 	.word	0x08011c18

0800b164 <HAL_DMA_Start_IT>:
{
 800b164:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800b166:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800b16a:	2c01      	cmp	r4, #1
 800b16c:	d035      	beq.n	800b1da <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 800b16e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b172:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800b174:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800b176:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 800b178:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800b17c:	d127      	bne.n	800b1ce <HAL_DMA_Start_IT+0x6a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b17e:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800b180:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b182:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800b184:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b188:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b18a:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b18c:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b18e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b192:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b194:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800b196:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 800b198:	bf0a      	itet	eq
 800b19a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800b19c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800b19e:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b1a0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 800b1a2:	bf18      	it	ne
 800b1a4:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b1a6:	233f      	movs	r3, #63	; 0x3f
 800b1a8:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 800b1aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b1ac:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	f043 0316 	orr.w	r3, r3, #22
 800b1b4:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800b1b6:	b11a      	cbz	r2, 800b1c0 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	f043 0308 	orr.w	r3, r3, #8
 800b1be:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	f043 0301 	orr.w	r3, r3, #1
 800b1c6:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1c8:	2000      	movs	r0, #0
}
 800b1ca:	bcf0      	pop	{r4, r5, r6, r7}
 800b1cc:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 800b1d4:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800b1d6:	2002      	movs	r0, #2
}
 800b1d8:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800b1da:	2002      	movs	r0, #2
}
 800b1dc:	bcf0      	pop	{r4, r5, r6, r7}
 800b1de:	4770      	bx	lr

0800b1e0 <HAL_DMA_Abort>:
{
 800b1e0:	b570      	push	{r4, r5, r6, lr}
 800b1e2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b1e4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800b1e6:	f7ff fc21 	bl	800aa2c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b1ea:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d006      	beq.n	800b200 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b1f2:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800b1f4:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b1f6:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800b1f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800b1fc:	2001      	movs	r0, #1
}
 800b1fe:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b200:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b202:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	f022 0216 	bic.w	r2, r2, #22
 800b20a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b20c:	695a      	ldr	r2, [r3, #20]
 800b20e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b212:	4605      	mov	r5, r0
 800b214:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b216:	b331      	cbz	r1, 800b266 <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	f022 0208 	bic.w	r2, r2, #8
 800b21e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	f022 0201 	bic.w	r2, r2, #1
 800b226:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b228:	e005      	b.n	800b236 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b22a:	f7ff fbff 	bl	800aa2c <HAL_GetTick>
 800b22e:	1b40      	subs	r0, r0, r5
 800b230:	2805      	cmp	r0, #5
 800b232:	d80f      	bhi.n	800b254 <HAL_DMA_Abort+0x74>
 800b234:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f013 0301 	ands.w	r3, r3, #1
 800b23c:	d1f5      	bne.n	800b22a <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b23e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b240:	223f      	movs	r2, #63	; 0x3f
 800b242:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800b244:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b246:	60b2      	str	r2, [r6, #8]
  return HAL_OK;
 800b248:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 800b24a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800b24e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 800b252:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b254:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 800b256:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b258:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b25a:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800b25c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b260:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800b264:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b266:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800b268:	2a00      	cmp	r2, #0
 800b26a:	d1d5      	bne.n	800b218 <HAL_DMA_Abort+0x38>
 800b26c:	e7d8      	b.n	800b220 <HAL_DMA_Abort+0x40>
 800b26e:	bf00      	nop

0800b270 <HAL_DMA_IRQHandler>:
{
 800b270:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b272:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800b274:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b276:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 800b278:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b27a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800b27c:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b27e:	4965      	ldr	r1, [pc, #404]	; (800b414 <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b280:	2208      	movs	r2, #8
 800b282:	409a      	lsls	r2, r3
 800b284:	422a      	tst	r2, r5
{
 800b286:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800b288:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b28a:	d003      	beq.n	800b294 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b28c:	6801      	ldr	r1, [r0, #0]
 800b28e:	6808      	ldr	r0, [r1, #0]
 800b290:	0740      	lsls	r0, r0, #29
 800b292:	d459      	bmi.n	800b348 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b294:	2201      	movs	r2, #1
 800b296:	409a      	lsls	r2, r3
 800b298:	422a      	tst	r2, r5
 800b29a:	d003      	beq.n	800b2a4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b29c:	6821      	ldr	r1, [r4, #0]
 800b29e:	6949      	ldr	r1, [r1, #20]
 800b2a0:	0608      	lsls	r0, r1, #24
 800b2a2:	d474      	bmi.n	800b38e <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b2a4:	2204      	movs	r2, #4
 800b2a6:	409a      	lsls	r2, r3
 800b2a8:	422a      	tst	r2, r5
 800b2aa:	d003      	beq.n	800b2b4 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b2ac:	6821      	ldr	r1, [r4, #0]
 800b2ae:	6809      	ldr	r1, [r1, #0]
 800b2b0:	0789      	lsls	r1, r1, #30
 800b2b2:	d466      	bmi.n	800b382 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b2b4:	2210      	movs	r2, #16
 800b2b6:	409a      	lsls	r2, r3
 800b2b8:	422a      	tst	r2, r5
 800b2ba:	d003      	beq.n	800b2c4 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b2bc:	6821      	ldr	r1, [r4, #0]
 800b2be:	6808      	ldr	r0, [r1, #0]
 800b2c0:	0700      	lsls	r0, r0, #28
 800b2c2:	d44b      	bmi.n	800b35c <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	409a      	lsls	r2, r3
 800b2c8:	422a      	tst	r2, r5
 800b2ca:	d014      	beq.n	800b2f6 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b2cc:	6821      	ldr	r1, [r4, #0]
 800b2ce:	6808      	ldr	r0, [r1, #0]
 800b2d0:	06c0      	lsls	r0, r0, #27
 800b2d2:	d510      	bpl.n	800b2f6 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b2d4:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b2d6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800b2da:	2a05      	cmp	r2, #5
 800b2dc:	d063      	beq.n	800b3a6 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b2de:	680b      	ldr	r3, [r1, #0]
 800b2e0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b2e4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b2e6:	d07e      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b2e8:	0319      	lsls	r1, r3, #12
 800b2ea:	f140 8089 	bpl.w	800b400 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800b2ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b2f0:	b10b      	cbz	r3, 800b2f6 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b2f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b2f8:	b323      	cbz	r3, 800b344 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b2fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b2fc:	07da      	lsls	r2, r3, #31
 800b2fe:	d51a      	bpl.n	800b336 <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 800b300:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800b302:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800b304:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800b308:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b30a:	4943      	ldr	r1, [pc, #268]	; (800b418 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 800b30c:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800b310:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 800b314:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b316:	0ab6      	lsrs	r6, r6, #10
 800b318:	e002      	b.n	800b320 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b31a:	6813      	ldr	r3, [r2, #0]
 800b31c:	07db      	lsls	r3, r3, #31
 800b31e:	d504      	bpl.n	800b32a <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 800b320:	9b01      	ldr	r3, [sp, #4]
 800b322:	3301      	adds	r3, #1
 800b324:	42b3      	cmp	r3, r6
 800b326:	9301      	str	r3, [sp, #4]
 800b328:	d9f7      	bls.n	800b31a <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 800b32a:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 800b32c:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800b32e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800b332:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800b336:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b338:	b123      	cbz	r3, 800b344 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800b33a:	4620      	mov	r0, r4
}
 800b33c:	b003      	add	sp, #12
 800b33e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800b342:	4718      	bx	r3
}
 800b344:	b003      	add	sp, #12
 800b346:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b348:	6808      	ldr	r0, [r1, #0]
 800b34a:	f020 0004 	bic.w	r0, r0, #4
 800b34e:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b350:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b352:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b354:	f042 0201 	orr.w	r2, r2, #1
 800b358:	6562      	str	r2, [r4, #84]	; 0x54
 800b35a:	e79b      	b.n	800b294 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b35c:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b35e:	680a      	ldr	r2, [r1, #0]
 800b360:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b364:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b366:	d118      	bne.n	800b39a <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b368:	05d2      	lsls	r2, r2, #23
 800b36a:	d403      	bmi.n	800b374 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b36c:	680a      	ldr	r2, [r1, #0]
 800b36e:	f022 0208 	bic.w	r2, r2, #8
 800b372:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800b374:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b376:	2a00      	cmp	r2, #0
 800b378:	d0a4      	beq.n	800b2c4 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800b37a:	4620      	mov	r0, r4
 800b37c:	4790      	blx	r2
 800b37e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b380:	e7a0      	b.n	800b2c4 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b382:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b384:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b386:	f042 0204 	orr.w	r2, r2, #4
 800b38a:	6562      	str	r2, [r4, #84]	; 0x54
 800b38c:	e792      	b.n	800b2b4 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b38e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b390:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b392:	f042 0202 	orr.w	r2, r2, #2
 800b396:	6562      	str	r2, [r4, #84]	; 0x54
 800b398:	e784      	b.n	800b2a4 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b39a:	0311      	lsls	r1, r2, #12
 800b39c:	d5ea      	bpl.n	800b374 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b39e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800b3a0:	2a00      	cmp	r2, #0
 800b3a2:	d1ea      	bne.n	800b37a <HAL_DMA_IRQHandler+0x10a>
 800b3a4:	e78e      	b.n	800b2c4 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b3a6:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b3a8:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b3aa:	f022 0216 	bic.w	r2, r2, #22
 800b3ae:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b3b0:	694a      	ldr	r2, [r1, #20]
 800b3b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3b6:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b3b8:	b338      	cbz	r0, 800b40a <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b3ba:	680a      	ldr	r2, [r1, #0]
 800b3bc:	f022 0208 	bic.w	r2, r2, #8
 800b3c0:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b3c2:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800b3c4:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b3c6:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800b3ca:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 800b3cc:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b3ce:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800b3d0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800b3d4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800b3d8:	2900      	cmp	r1, #0
 800b3da:	d0b3      	beq.n	800b344 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 800b3dc:	4620      	mov	r0, r4
}
 800b3de:	b003      	add	sp, #12
 800b3e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800b3e4:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b3e6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800b3ea:	d180      	bne.n	800b2ee <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b3ec:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800b3ee:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b3f0:	f022 0210 	bic.w	r2, r2, #16
 800b3f4:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800b3f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800b3fa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800b3fe:	e776      	b.n	800b2ee <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 800b400:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b402:	2b00      	cmp	r3, #0
 800b404:	f47f af75 	bne.w	800b2f2 <HAL_DMA_IRQHandler+0x82>
 800b408:	e775      	b.n	800b2f6 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b40a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800b40c:	2a00      	cmp	r2, #0
 800b40e:	d1d4      	bne.n	800b3ba <HAL_DMA_IRQHandler+0x14a>
 800b410:	e7d7      	b.n	800b3c2 <HAL_DMA_IRQHandler+0x152>
 800b412:	bf00      	nop
 800b414:	20000020 	.word	0x20000020
 800b418:	1b4e81b5 	.word	0x1b4e81b5

0800b41c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b420:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b424:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 800b61c <HAL_GPIO_Init+0x200>
{
 800b428:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b42a:	2400      	movs	r4, #0
 800b42c:	e003      	b.n	800b436 <HAL_GPIO_Init+0x1a>
 800b42e:	3401      	adds	r4, #1
 800b430:	2c10      	cmp	r4, #16
 800b432:	f000 808c 	beq.w	800b54e <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 800b436:	2301      	movs	r3, #1
 800b438:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b43a:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d1f5      	bne.n	800b42e <HAL_GPIO_Init+0x12>
 800b442:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b446:	f026 0910 	bic.w	r9, r6, #16
 800b44a:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 800b44e:	2303      	movs	r3, #3
 800b450:	f109 37ff 	add.w	r7, r9, #4294967295
 800b454:	fa03 f30c 	lsl.w	r3, r3, ip
 800b458:	2f01      	cmp	r7, #1
 800b45a:	ea6f 0303 	mvn.w	r3, r3
 800b45e:	fa05 f50c 	lsl.w	r5, r5, ip
 800b462:	d977      	bls.n	800b554 <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 800b464:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b466:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b468:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800b46a:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 800b46c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b46e:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b472:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b474:	fa05 f30c 	lsl.w	r3, r5, ip
 800b478:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 800b47a:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b47c:	00f3      	lsls	r3, r6, #3
 800b47e:	d5d6      	bpl.n	800b42e <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b480:	4d5f      	ldr	r5, [pc, #380]	; (800b600 <HAL_GPIO_Init+0x1e4>)
 800b482:	2300      	movs	r3, #0
 800b484:	9301      	str	r3, [sp, #4]
 800b486:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b48c:	646b      	str	r3, [r5, #68]	; 0x44
 800b48e:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 800b490:	f024 0303 	bic.w	r3, r4, #3
 800b494:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800b498:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b49c:	9501      	str	r5, [sp, #4]
 800b49e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b4a2:	f004 0503 	and.w	r5, r4, #3
 800b4a6:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b4aa:	4d56      	ldr	r5, [pc, #344]	; (800b604 <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b4ac:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800b4ae:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b4b2:	270f      	movs	r7, #15
 800b4b4:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b4b8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b4ba:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b4be:	d01f      	beq.n	800b500 <HAL_GPIO_Init+0xe4>
 800b4c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b4c4:	42a8      	cmp	r0, r5
 800b4c6:	d076      	beq.n	800b5b6 <HAL_GPIO_Init+0x19a>
 800b4c8:	4d4f      	ldr	r5, [pc, #316]	; (800b608 <HAL_GPIO_Init+0x1ec>)
 800b4ca:	42a8      	cmp	r0, r5
 800b4cc:	d079      	beq.n	800b5c2 <HAL_GPIO_Init+0x1a6>
 800b4ce:	4d4f      	ldr	r5, [pc, #316]	; (800b60c <HAL_GPIO_Init+0x1f0>)
 800b4d0:	42a8      	cmp	r0, r5
 800b4d2:	d07c      	beq.n	800b5ce <HAL_GPIO_Init+0x1b2>
 800b4d4:	4d4e      	ldr	r5, [pc, #312]	; (800b610 <HAL_GPIO_Init+0x1f4>)
 800b4d6:	42a8      	cmp	r0, r5
 800b4d8:	d07f      	beq.n	800b5da <HAL_GPIO_Init+0x1be>
 800b4da:	4d4e      	ldr	r5, [pc, #312]	; (800b614 <HAL_GPIO_Init+0x1f8>)
 800b4dc:	42a8      	cmp	r0, r5
 800b4de:	f000 8082 	beq.w	800b5e6 <HAL_GPIO_Init+0x1ca>
 800b4e2:	4d4d      	ldr	r5, [pc, #308]	; (800b618 <HAL_GPIO_Init+0x1fc>)
 800b4e4:	42a8      	cmp	r0, r5
 800b4e6:	f000 8084 	beq.w	800b5f2 <HAL_GPIO_Init+0x1d6>
 800b4ea:	f8df c134 	ldr.w	ip, [pc, #308]	; 800b620 <HAL_GPIO_Init+0x204>
 800b4ee:	4560      	cmp	r0, ip
 800b4f0:	bf0c      	ite	eq
 800b4f2:	f04f 0c07 	moveq.w	ip, #7
 800b4f6:	f04f 0c08 	movne.w	ip, #8
 800b4fa:	fa0c f509 	lsl.w	r5, ip, r9
 800b4fe:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b500:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800b502:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 800b506:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b508:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 800b50a:	bf54      	ite	pl
 800b50c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800b50e:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 800b510:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800b514:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b518:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 800b51a:	bf54      	ite	pl
 800b51c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800b51e:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 800b520:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b524:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b528:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 800b52a:	bf54      	ite	pl
 800b52c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800b52e:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 800b530:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800b534:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b538:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b53a:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 800b53e:	bf54      	ite	pl
 800b540:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800b542:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b544:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 800b546:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b54a:	f47f af74 	bne.w	800b436 <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 800b54e:	b003      	add	sp, #12
 800b550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800b554:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b556:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b55a:	68cf      	ldr	r7, [r1, #12]
 800b55c:	fa07 f70c 	lsl.w	r7, r7, ip
 800b560:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800b564:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800b566:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b56a:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b56e:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b572:	40a7      	lsls	r7, r4
 800b574:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800b578:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800b57a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b57c:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b57e:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b580:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 800b584:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b586:	f47f af71 	bne.w	800b46c <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 800b58a:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800b58e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b592:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 800b596:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b59a:	00bf      	lsls	r7, r7, #2
 800b59c:	f04f 0b0f 	mov.w	fp, #15
 800b5a0:	fa0b fb07 	lsl.w	fp, fp, r7
 800b5a4:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b5a8:	690d      	ldr	r5, [r1, #16]
 800b5aa:	40bd      	lsls	r5, r7
 800b5ac:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 800b5b0:	f8c9 5020 	str.w	r5, [r9, #32]
 800b5b4:	e75a      	b.n	800b46c <HAL_GPIO_Init+0x50>
 800b5b6:	f04f 0c01 	mov.w	ip, #1
 800b5ba:	fa0c f509 	lsl.w	r5, ip, r9
 800b5be:	432f      	orrs	r7, r5
 800b5c0:	e79e      	b.n	800b500 <HAL_GPIO_Init+0xe4>
 800b5c2:	f04f 0c02 	mov.w	ip, #2
 800b5c6:	fa0c f509 	lsl.w	r5, ip, r9
 800b5ca:	432f      	orrs	r7, r5
 800b5cc:	e798      	b.n	800b500 <HAL_GPIO_Init+0xe4>
 800b5ce:	f04f 0c03 	mov.w	ip, #3
 800b5d2:	fa0c f509 	lsl.w	r5, ip, r9
 800b5d6:	432f      	orrs	r7, r5
 800b5d8:	e792      	b.n	800b500 <HAL_GPIO_Init+0xe4>
 800b5da:	f04f 0c04 	mov.w	ip, #4
 800b5de:	fa0c f509 	lsl.w	r5, ip, r9
 800b5e2:	432f      	orrs	r7, r5
 800b5e4:	e78c      	b.n	800b500 <HAL_GPIO_Init+0xe4>
 800b5e6:	f04f 0c05 	mov.w	ip, #5
 800b5ea:	fa0c f509 	lsl.w	r5, ip, r9
 800b5ee:	432f      	orrs	r7, r5
 800b5f0:	e786      	b.n	800b500 <HAL_GPIO_Init+0xe4>
 800b5f2:	f04f 0c06 	mov.w	ip, #6
 800b5f6:	fa0c f509 	lsl.w	r5, ip, r9
 800b5fa:	432f      	orrs	r7, r5
 800b5fc:	e780      	b.n	800b500 <HAL_GPIO_Init+0xe4>
 800b5fe:	bf00      	nop
 800b600:	40023800 	.word	0x40023800
 800b604:	40020000 	.word	0x40020000
 800b608:	40020800 	.word	0x40020800
 800b60c:	40020c00 	.word	0x40020c00
 800b610:	40021000 	.word	0x40021000
 800b614:	40021400 	.word	0x40021400
 800b618:	40021800 	.word	0x40021800
 800b61c:	40013c00 	.word	0x40013c00
 800b620:	40021c00 	.word	0x40021c00

0800b624 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b624:	b902      	cbnz	r2, 800b628 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b626:	0409      	lsls	r1, r1, #16
 800b628:	6181      	str	r1, [r0, #24]
  }
}
 800b62a:	4770      	bx	lr

0800b62c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b62c:	4a04      	ldr	r2, [pc, #16]	; (800b640 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800b62e:	6951      	ldr	r1, [r2, #20]
 800b630:	4201      	tst	r1, r0
 800b632:	d100      	bne.n	800b636 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800b634:	4770      	bx	lr
{
 800b636:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b638:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b63a:	f7ff f8d1 	bl	800a7e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800b63e:	bd08      	pop	{r3, pc}
 800b640:	40013c00 	.word	0x40013c00

0800b644 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b644:	2800      	cmp	r0, #0
 800b646:	f000 8132 	beq.w	800b8ae <HAL_RCC_OscConfig+0x26a>
{
 800b64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b64e:	6803      	ldr	r3, [r0, #0]
 800b650:	07dd      	lsls	r5, r3, #31
{
 800b652:	b082      	sub	sp, #8
 800b654:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b656:	d52f      	bpl.n	800b6b8 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b658:	49ac      	ldr	r1, [pc, #688]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
 800b65a:	688a      	ldr	r2, [r1, #8]
 800b65c:	f002 020c 	and.w	r2, r2, #12
 800b660:	2a04      	cmp	r2, #4
 800b662:	f000 80ea 	beq.w	800b83a <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b666:	688a      	ldr	r2, [r1, #8]
 800b668:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b66c:	2a08      	cmp	r2, #8
 800b66e:	f000 80e0 	beq.w	800b832 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b672:	6863      	ldr	r3, [r4, #4]
 800b674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b678:	f000 80e9 	beq.w	800b84e <HAL_RCC_OscConfig+0x20a>
 800b67c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b680:	f000 8178 	beq.w	800b974 <HAL_RCC_OscConfig+0x330>
 800b684:	4da1      	ldr	r5, [pc, #644]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
 800b686:	682a      	ldr	r2, [r5, #0]
 800b688:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b68c:	602a      	str	r2, [r5, #0]
 800b68e:	682a      	ldr	r2, [r5, #0]
 800b690:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b694:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b696:	2b00      	cmp	r3, #0
 800b698:	f040 80de 	bne.w	800b858 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b69c:	f7ff f9c6 	bl	800aa2c <HAL_GetTick>
 800b6a0:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b6a2:	e005      	b.n	800b6b0 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b6a4:	f7ff f9c2 	bl	800aa2c <HAL_GetTick>
 800b6a8:	1b80      	subs	r0, r0, r6
 800b6aa:	2864      	cmp	r0, #100	; 0x64
 800b6ac:	f200 80f2 	bhi.w	800b894 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	039b      	lsls	r3, r3, #14
 800b6b4:	d4f6      	bmi.n	800b6a4 <HAL_RCC_OscConfig+0x60>
 800b6b6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b6b8:	079f      	lsls	r7, r3, #30
 800b6ba:	d475      	bmi.n	800b7a8 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b6bc:	071a      	lsls	r2, r3, #28
 800b6be:	d515      	bpl.n	800b6ec <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b6c0:	6963      	ldr	r3, [r4, #20]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f000 80a5 	beq.w	800b812 <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b6c8:	4b91      	ldr	r3, [pc, #580]	; (800b910 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b6ca:	4d90      	ldr	r5, [pc, #576]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800b6d0:	f7ff f9ac 	bl	800aa2c <HAL_GetTick>
 800b6d4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b6d6:	e005      	b.n	800b6e4 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b6d8:	f7ff f9a8 	bl	800aa2c <HAL_GetTick>
 800b6dc:	1b80      	subs	r0, r0, r6
 800b6de:	2802      	cmp	r0, #2
 800b6e0:	f200 80d8 	bhi.w	800b894 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b6e4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b6e6:	079b      	lsls	r3, r3, #30
 800b6e8:	d5f6      	bpl.n	800b6d8 <HAL_RCC_OscConfig+0x94>
 800b6ea:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b6ec:	0758      	lsls	r0, r3, #29
 800b6ee:	d53b      	bpl.n	800b768 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b6f0:	4a86      	ldr	r2, [pc, #536]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
 800b6f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b6f4:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800b6f8:	f040 80db 	bne.w	800b8b2 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6fc:	9301      	str	r3, [sp, #4]
 800b6fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b704:	6413      	str	r3, [r2, #64]	; 0x40
 800b706:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b70c:	9301      	str	r3, [sp, #4]
 800b70e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800b710:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b712:	4d80      	ldr	r5, [pc, #512]	; (800b914 <HAL_RCC_OscConfig+0x2d0>)
 800b714:	682a      	ldr	r2, [r5, #0]
 800b716:	05d1      	lsls	r1, r2, #23
 800b718:	f140 80ac 	bpl.w	800b874 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b71c:	68a3      	ldr	r3, [r4, #8]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	f000 80c9 	beq.w	800b8b6 <HAL_RCC_OscConfig+0x272>
 800b724:	2b05      	cmp	r3, #5
 800b726:	f000 812f 	beq.w	800b988 <HAL_RCC_OscConfig+0x344>
 800b72a:	4d78      	ldr	r5, [pc, #480]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
 800b72c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800b72e:	f022 0201 	bic.w	r2, r2, #1
 800b732:	672a      	str	r2, [r5, #112]	; 0x70
 800b734:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800b736:	f022 0204 	bic.w	r2, r2, #4
 800b73a:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f040 80bf 	bne.w	800b8c0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b742:	f7ff f973 	bl	800aa2c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b746:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800b74a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b74c:	e006      	b.n	800b75c <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b74e:	f7ff f96d 	bl	800aa2c <HAL_GetTick>
 800b752:	eba0 0008 	sub.w	r0, r0, r8
 800b756:	42b8      	cmp	r0, r7
 800b758:	f200 809c 	bhi.w	800b894 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b75c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b75e:	0798      	lsls	r0, r3, #30
 800b760:	d4f5      	bmi.n	800b74e <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b762:	2e00      	cmp	r6, #0
 800b764:	f040 80dc 	bne.w	800b920 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b768:	69a0      	ldr	r0, [r4, #24]
 800b76a:	b1c8      	cbz	r0, 800b7a0 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b76c:	4d67      	ldr	r5, [pc, #412]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
 800b76e:	68aa      	ldr	r2, [r5, #8]
 800b770:	f002 020c 	and.w	r2, r2, #12
 800b774:	2a08      	cmp	r2, #8
 800b776:	f000 80d9 	beq.w	800b92c <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b77a:	4a67      	ldr	r2, [pc, #412]	; (800b918 <HAL_RCC_OscConfig+0x2d4>)
 800b77c:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b77e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800b780:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b782:	f000 810b 	beq.w	800b99c <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b786:	f7ff f951 	bl	800aa2c <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b78a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800b78c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b78e:	e004      	b.n	800b79a <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b790:	f7ff f94c 	bl	800aa2c <HAL_GetTick>
 800b794:	1b40      	subs	r0, r0, r5
 800b796:	2802      	cmp	r0, #2
 800b798:	d87c      	bhi.n	800b894 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	019b      	lsls	r3, r3, #6
 800b79e:	d4f7      	bmi.n	800b790 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800b7a0:	2000      	movs	r0, #0
}
 800b7a2:	b002      	add	sp, #8
 800b7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b7a8:	4a58      	ldr	r2, [pc, #352]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
 800b7aa:	6891      	ldr	r1, [r2, #8]
 800b7ac:	f011 0f0c 	tst.w	r1, #12
 800b7b0:	d024      	beq.n	800b7fc <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b7b2:	6891      	ldr	r1, [r2, #8]
 800b7b4:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b7b8:	2908      	cmp	r1, #8
 800b7ba:	d01c      	beq.n	800b7f6 <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b7bc:	68e3      	ldr	r3, [r4, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f000 8092 	beq.w	800b8e8 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 800b7c4:	4b55      	ldr	r3, [pc, #340]	; (800b91c <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7c6:	4d51      	ldr	r5, [pc, #324]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b7cc:	f7ff f92e 	bl	800aa2c <HAL_GetTick>
 800b7d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7d2:	e004      	b.n	800b7de <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b7d4:	f7ff f92a 	bl	800aa2c <HAL_GetTick>
 800b7d8:	1b80      	subs	r0, r0, r6
 800b7da:	2802      	cmp	r0, #2
 800b7dc:	d85a      	bhi.n	800b894 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7de:	682b      	ldr	r3, [r5, #0]
 800b7e0:	0798      	lsls	r0, r3, #30
 800b7e2:	d5f7      	bpl.n	800b7d4 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	6922      	ldr	r2, [r4, #16]
 800b7e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b7ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b7f0:	602b      	str	r3, [r5, #0]
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	e762      	b.n	800b6bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b7f6:	6852      	ldr	r2, [r2, #4]
 800b7f8:	0256      	lsls	r6, r2, #9
 800b7fa:	d4df      	bmi.n	800b7bc <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b7fc:	4a43      	ldr	r2, [pc, #268]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
 800b7fe:	6812      	ldr	r2, [r2, #0]
 800b800:	0795      	lsls	r5, r2, #30
 800b802:	d54b      	bpl.n	800b89c <HAL_RCC_OscConfig+0x258>
 800b804:	68e2      	ldr	r2, [r4, #12]
 800b806:	2a01      	cmp	r2, #1
 800b808:	d048      	beq.n	800b89c <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 800b80a:	2001      	movs	r0, #1
}
 800b80c:	b002      	add	sp, #8
 800b80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800b812:	4a3f      	ldr	r2, [pc, #252]	; (800b910 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b814:	4d3d      	ldr	r5, [pc, #244]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800b816:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800b818:	f7ff f908 	bl	800aa2c <HAL_GetTick>
 800b81c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b81e:	e004      	b.n	800b82a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b820:	f7ff f904 	bl	800aa2c <HAL_GetTick>
 800b824:	1b80      	subs	r0, r0, r6
 800b826:	2802      	cmp	r0, #2
 800b828:	d834      	bhi.n	800b894 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b82a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b82c:	079f      	lsls	r7, r3, #30
 800b82e:	d4f7      	bmi.n	800b820 <HAL_RCC_OscConfig+0x1dc>
 800b830:	e75b      	b.n	800b6ea <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b832:	684a      	ldr	r2, [r1, #4]
 800b834:	0250      	lsls	r0, r2, #9
 800b836:	f57f af1c 	bpl.w	800b672 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b83a:	4a34      	ldr	r2, [pc, #208]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
 800b83c:	6812      	ldr	r2, [r2, #0]
 800b83e:	0391      	lsls	r1, r2, #14
 800b840:	f57f af3a 	bpl.w	800b6b8 <HAL_RCC_OscConfig+0x74>
 800b844:	6862      	ldr	r2, [r4, #4]
 800b846:	2a00      	cmp	r2, #0
 800b848:	f47f af36 	bne.w	800b6b8 <HAL_RCC_OscConfig+0x74>
 800b84c:	e7dd      	b.n	800b80a <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b84e:	4a2f      	ldr	r2, [pc, #188]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
 800b850:	6813      	ldr	r3, [r2, #0]
 800b852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b856:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800b858:	f7ff f8e8 	bl	800aa2c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b85c:	4d2b      	ldr	r5, [pc, #172]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800b85e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b860:	e004      	b.n	800b86c <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b862:	f7ff f8e3 	bl	800aa2c <HAL_GetTick>
 800b866:	1b80      	subs	r0, r0, r6
 800b868:	2864      	cmp	r0, #100	; 0x64
 800b86a:	d813      	bhi.n	800b894 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b86c:	682b      	ldr	r3, [r5, #0]
 800b86e:	039a      	lsls	r2, r3, #14
 800b870:	d5f7      	bpl.n	800b862 <HAL_RCC_OscConfig+0x21e>
 800b872:	e720      	b.n	800b6b6 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b874:	682a      	ldr	r2, [r5, #0]
 800b876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b87a:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 800b87c:	f7ff f8d6 	bl	800aa2c <HAL_GetTick>
 800b880:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b882:	682b      	ldr	r3, [r5, #0]
 800b884:	05da      	lsls	r2, r3, #23
 800b886:	f53f af49 	bmi.w	800b71c <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b88a:	f7ff f8cf 	bl	800aa2c <HAL_GetTick>
 800b88e:	1bc0      	subs	r0, r0, r7
 800b890:	2802      	cmp	r0, #2
 800b892:	d9f6      	bls.n	800b882 <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 800b894:	2003      	movs	r0, #3
}
 800b896:	b002      	add	sp, #8
 800b898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b89c:	491b      	ldr	r1, [pc, #108]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
 800b89e:	6920      	ldr	r0, [r4, #16]
 800b8a0:	680a      	ldr	r2, [r1, #0]
 800b8a2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800b8a6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800b8aa:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b8ac:	e706      	b.n	800b6bc <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 800b8ae:	2001      	movs	r0, #1
}
 800b8b0:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800b8b2:	2600      	movs	r6, #0
 800b8b4:	e72d      	b.n	800b712 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b8b6:	4a15      	ldr	r2, [pc, #84]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
 800b8b8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b8ba:	f043 0301 	orr.w	r3, r3, #1
 800b8be:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800b8c0:	f7ff f8b4 	bl	800aa2c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8c4:	4d11      	ldr	r5, [pc, #68]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800b8c6:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b8c8:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8cc:	e005      	b.n	800b8da <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b8ce:	f7ff f8ad 	bl	800aa2c <HAL_GetTick>
 800b8d2:	eba0 0008 	sub.w	r0, r0, r8
 800b8d6:	42b8      	cmp	r0, r7
 800b8d8:	d8dc      	bhi.n	800b894 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b8dc:	079b      	lsls	r3, r3, #30
 800b8de:	d5f6      	bpl.n	800b8ce <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 800b8e0:	2e00      	cmp	r6, #0
 800b8e2:	f43f af41 	beq.w	800b768 <HAL_RCC_OscConfig+0x124>
 800b8e6:	e01b      	b.n	800b920 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 800b8e8:	4a0c      	ldr	r2, [pc, #48]	; (800b91c <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b8ea:	4d08      	ldr	r5, [pc, #32]	; (800b90c <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 800b8ec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800b8ee:	f7ff f89d 	bl	800aa2c <HAL_GetTick>
 800b8f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b8f4:	e004      	b.n	800b900 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b8f6:	f7ff f899 	bl	800aa2c <HAL_GetTick>
 800b8fa:	1b80      	subs	r0, r0, r6
 800b8fc:	2802      	cmp	r0, #2
 800b8fe:	d8c9      	bhi.n	800b894 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b900:	682b      	ldr	r3, [r5, #0]
 800b902:	0799      	lsls	r1, r3, #30
 800b904:	d4f7      	bmi.n	800b8f6 <HAL_RCC_OscConfig+0x2b2>
 800b906:	6823      	ldr	r3, [r4, #0]
 800b908:	e6d8      	b.n	800b6bc <HAL_RCC_OscConfig+0x78>
 800b90a:	bf00      	nop
 800b90c:	40023800 	.word	0x40023800
 800b910:	42470e80 	.word	0x42470e80
 800b914:	40007000 	.word	0x40007000
 800b918:	42470060 	.word	0x42470060
 800b91c:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 800b920:	4a35      	ldr	r2, [pc, #212]	; (800b9f8 <HAL_RCC_OscConfig+0x3b4>)
 800b922:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b928:	6413      	str	r3, [r2, #64]	; 0x40
 800b92a:	e71d      	b.n	800b768 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b92c:	2801      	cmp	r0, #1
 800b92e:	f43f af6d 	beq.w	800b80c <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 800b932:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b934:	69e2      	ldr	r2, [r4, #28]
 800b936:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800b93a:	4291      	cmp	r1, r2
 800b93c:	f47f af65 	bne.w	800b80a <HAL_RCC_OscConfig+0x1c6>
 800b940:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b942:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b946:	4291      	cmp	r1, r2
 800b948:	f47f af5f 	bne.w	800b80a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b94c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b950:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b952:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b954:	428a      	cmp	r2, r1
 800b956:	f47f af58 	bne.w	800b80a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b95a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b95c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b960:	4291      	cmp	r1, r2
 800b962:	f47f af52 	bne.w	800b80a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b966:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800b968:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 800b96c:	1a18      	subs	r0, r3, r0
 800b96e:	bf18      	it	ne
 800b970:	2001      	movne	r0, #1
 800b972:	e74b      	b.n	800b80c <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b974:	4b20      	ldr	r3, [pc, #128]	; (800b9f8 <HAL_RCC_OscConfig+0x3b4>)
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b97c:	601a      	str	r2, [r3, #0]
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b984:	601a      	str	r2, [r3, #0]
 800b986:	e767      	b.n	800b858 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b988:	4b1b      	ldr	r3, [pc, #108]	; (800b9f8 <HAL_RCC_OscConfig+0x3b4>)
 800b98a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b98c:	f042 0204 	orr.w	r2, r2, #4
 800b990:	671a      	str	r2, [r3, #112]	; 0x70
 800b992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b994:	f042 0201 	orr.w	r2, r2, #1
 800b998:	671a      	str	r2, [r3, #112]	; 0x70
 800b99a:	e791      	b.n	800b8c0 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 800b99c:	f7ff f846 	bl	800aa2c <HAL_GetTick>
 800b9a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9a2:	e005      	b.n	800b9b0 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9a4:	f7ff f842 	bl	800aa2c <HAL_GetTick>
 800b9a8:	1b80      	subs	r0, r0, r6
 800b9aa:	2802      	cmp	r0, #2
 800b9ac:	f63f af72 	bhi.w	800b894 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9b0:	682b      	ldr	r3, [r5, #0]
 800b9b2:	0199      	lsls	r1, r3, #6
 800b9b4:	d4f6      	bmi.n	800b9a4 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b9b6:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 800b9ba:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800b9be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9c0:	4c0d      	ldr	r4, [pc, #52]	; (800b9f8 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b9c2:	4333      	orrs	r3, r6
 800b9c4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800b9c8:	0852      	lsrs	r2, r2, #1
 800b9ca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b9ce:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800b9d0:	490a      	ldr	r1, [pc, #40]	; (800b9fc <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b9d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800b9d6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b9d8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800b9da:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 800b9dc:	f7ff f826 	bl	800aa2c <HAL_GetTick>
 800b9e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9e2:	e005      	b.n	800b9f0 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9e4:	f7ff f822 	bl	800aa2c <HAL_GetTick>
 800b9e8:	1b40      	subs	r0, r0, r5
 800b9ea:	2802      	cmp	r0, #2
 800b9ec:	f63f af52 	bhi.w	800b894 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9f0:	6823      	ldr	r3, [r4, #0]
 800b9f2:	019a      	lsls	r2, r3, #6
 800b9f4:	d5f6      	bpl.n	800b9e4 <HAL_RCC_OscConfig+0x3a0>
 800b9f6:	e6d3      	b.n	800b7a0 <HAL_RCC_OscConfig+0x15c>
 800b9f8:	40023800 	.word	0x40023800
 800b9fc:	42470060 	.word	0x42470060

0800ba00 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba00:	4917      	ldr	r1, [pc, #92]	; (800ba60 <HAL_RCC_GetSysClockFreq+0x60>)
{
 800ba02:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba04:	688b      	ldr	r3, [r1, #8]
 800ba06:	f003 030c 	and.w	r3, r3, #12
 800ba0a:	2b04      	cmp	r3, #4
 800ba0c:	d01b      	beq.n	800ba46 <HAL_RCC_GetSysClockFreq+0x46>
 800ba0e:	2b08      	cmp	r3, #8
 800ba10:	d117      	bne.n	800ba42 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ba12:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ba14:	684b      	ldr	r3, [r1, #4]
 800ba16:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ba1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ba1e:	d114      	bne.n	800ba4a <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba20:	6849      	ldr	r1, [r1, #4]
 800ba22:	4810      	ldr	r0, [pc, #64]	; (800ba64 <HAL_RCC_GetSysClockFreq+0x64>)
 800ba24:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ba28:	fba1 0100 	umull	r0, r1, r1, r0
 800ba2c:	f7fd f864 	bl	8008af8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ba30:	4b0b      	ldr	r3, [pc, #44]	; (800ba60 <HAL_RCC_GetSysClockFreq+0x60>)
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800ba38:	3301      	adds	r3, #1
 800ba3a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800ba3c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800ba40:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800ba42:	4808      	ldr	r0, [pc, #32]	; (800ba64 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800ba44:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800ba46:	4808      	ldr	r0, [pc, #32]	; (800ba68 <HAL_RCC_GetSysClockFreq+0x68>)
}
 800ba48:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba4a:	684b      	ldr	r3, [r1, #4]
 800ba4c:	4806      	ldr	r0, [pc, #24]	; (800ba68 <HAL_RCC_GetSysClockFreq+0x68>)
 800ba4e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800ba52:	fba3 0100 	umull	r0, r1, r3, r0
 800ba56:	2300      	movs	r3, #0
 800ba58:	f7fd f84e 	bl	8008af8 <__aeabi_uldivmod>
 800ba5c:	e7e8      	b.n	800ba30 <HAL_RCC_GetSysClockFreq+0x30>
 800ba5e:	bf00      	nop
 800ba60:	40023800 	.word	0x40023800
 800ba64:	00f42400 	.word	0x00f42400
 800ba68:	007a1200 	.word	0x007a1200

0800ba6c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800ba6c:	b160      	cbz	r0, 800ba88 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ba6e:	4a49      	ldr	r2, [pc, #292]	; (800bb94 <HAL_RCC_ClockConfig+0x128>)
 800ba70:	6813      	ldr	r3, [r2, #0]
 800ba72:	f003 030f 	and.w	r3, r3, #15
 800ba76:	428b      	cmp	r3, r1
 800ba78:	d208      	bcs.n	800ba8c <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba7a:	b2cb      	uxtb	r3, r1
 800ba7c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba7e:	6813      	ldr	r3, [r2, #0]
 800ba80:	f003 030f 	and.w	r3, r3, #15
 800ba84:	428b      	cmp	r3, r1
 800ba86:	d001      	beq.n	800ba8c <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 800ba88:	2001      	movs	r0, #1
}
 800ba8a:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba8c:	6803      	ldr	r3, [r0, #0]
{
 800ba8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba92:	079d      	lsls	r5, r3, #30
 800ba94:	d514      	bpl.n	800bac0 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba96:	075c      	lsls	r4, r3, #29
 800ba98:	d504      	bpl.n	800baa4 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ba9a:	4c3f      	ldr	r4, [pc, #252]	; (800bb98 <HAL_RCC_ClockConfig+0x12c>)
 800ba9c:	68a2      	ldr	r2, [r4, #8]
 800ba9e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800baa2:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800baa4:	071a      	lsls	r2, r3, #28
 800baa6:	d504      	bpl.n	800bab2 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800baa8:	4c3b      	ldr	r4, [pc, #236]	; (800bb98 <HAL_RCC_ClockConfig+0x12c>)
 800baaa:	68a2      	ldr	r2, [r4, #8]
 800baac:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800bab0:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bab2:	4c39      	ldr	r4, [pc, #228]	; (800bb98 <HAL_RCC_ClockConfig+0x12c>)
 800bab4:	6885      	ldr	r5, [r0, #8]
 800bab6:	68a2      	ldr	r2, [r4, #8]
 800bab8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800babc:	432a      	orrs	r2, r5
 800babe:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bac0:	07df      	lsls	r7, r3, #31
 800bac2:	4604      	mov	r4, r0
 800bac4:	460d      	mov	r5, r1
 800bac6:	d522      	bpl.n	800bb0e <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bac8:	6842      	ldr	r2, [r0, #4]
 800baca:	2a01      	cmp	r2, #1
 800bacc:	d057      	beq.n	800bb7e <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bace:	1e93      	subs	r3, r2, #2
 800bad0:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bad2:	4b31      	ldr	r3, [pc, #196]	; (800bb98 <HAL_RCC_ClockConfig+0x12c>)
 800bad4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bad6:	d959      	bls.n	800bb8c <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bad8:	0799      	lsls	r1, r3, #30
 800bada:	d525      	bpl.n	800bb28 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800badc:	4e2e      	ldr	r6, [pc, #184]	; (800bb98 <HAL_RCC_ClockConfig+0x12c>)
 800bade:	68b3      	ldr	r3, [r6, #8]
 800bae0:	f023 0303 	bic.w	r3, r3, #3
 800bae4:	4313      	orrs	r3, r2
 800bae6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800bae8:	f7fe ffa0 	bl	800aa2c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800baec:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800baf0:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800baf2:	e005      	b.n	800bb00 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800baf4:	f7fe ff9a 	bl	800aa2c <HAL_GetTick>
 800baf8:	eba0 0008 	sub.w	r0, r0, r8
 800bafc:	42b8      	cmp	r0, r7
 800bafe:	d843      	bhi.n	800bb88 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb00:	68b3      	ldr	r3, [r6, #8]
 800bb02:	6862      	ldr	r2, [r4, #4]
 800bb04:	f003 030c 	and.w	r3, r3, #12
 800bb08:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800bb0c:	d1f2      	bne.n	800baf4 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bb0e:	4a21      	ldr	r2, [pc, #132]	; (800bb94 <HAL_RCC_ClockConfig+0x128>)
 800bb10:	6813      	ldr	r3, [r2, #0]
 800bb12:	f003 030f 	and.w	r3, r3, #15
 800bb16:	42ab      	cmp	r3, r5
 800bb18:	d909      	bls.n	800bb2e <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb1a:	b2eb      	uxtb	r3, r5
 800bb1c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb1e:	6813      	ldr	r3, [r2, #0]
 800bb20:	f003 030f 	and.w	r3, r3, #15
 800bb24:	42ab      	cmp	r3, r5
 800bb26:	d002      	beq.n	800bb2e <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 800bb28:	2001      	movs	r0, #1
}
 800bb2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb2e:	6823      	ldr	r3, [r4, #0]
 800bb30:	075a      	lsls	r2, r3, #29
 800bb32:	d506      	bpl.n	800bb42 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bb34:	4918      	ldr	r1, [pc, #96]	; (800bb98 <HAL_RCC_ClockConfig+0x12c>)
 800bb36:	68e0      	ldr	r0, [r4, #12]
 800bb38:	688a      	ldr	r2, [r1, #8]
 800bb3a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800bb3e:	4302      	orrs	r2, r0
 800bb40:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb42:	071b      	lsls	r3, r3, #28
 800bb44:	d412      	bmi.n	800bb6c <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bb46:	f7ff ff5b 	bl	800ba00 <HAL_RCC_GetSysClockFreq>
 800bb4a:	4b13      	ldr	r3, [pc, #76]	; (800bb98 <HAL_RCC_ClockConfig+0x12c>)
 800bb4c:	4c13      	ldr	r4, [pc, #76]	; (800bb9c <HAL_RCC_ClockConfig+0x130>)
 800bb4e:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 800bb50:	4913      	ldr	r1, [pc, #76]	; (800bba0 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bb52:	4a14      	ldr	r2, [pc, #80]	; (800bba4 <HAL_RCC_ClockConfig+0x138>)
 800bb54:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bb58:	5ce3      	ldrb	r3, [r4, r3]
 800bb5a:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 800bb5e:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bb60:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800bb62:	f7fe ff19 	bl	800a998 <HAL_InitTick>
  return HAL_OK;
 800bb66:	2000      	movs	r0, #0
}
 800bb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bb6c:	4a0a      	ldr	r2, [pc, #40]	; (800bb98 <HAL_RCC_ClockConfig+0x12c>)
 800bb6e:	6921      	ldr	r1, [r4, #16]
 800bb70:	6893      	ldr	r3, [r2, #8]
 800bb72:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800bb76:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800bb7a:	6093      	str	r3, [r2, #8]
 800bb7c:	e7e3      	b.n	800bb46 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb7e:	4b06      	ldr	r3, [pc, #24]	; (800bb98 <HAL_RCC_ClockConfig+0x12c>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	039e      	lsls	r6, r3, #14
 800bb84:	d4aa      	bmi.n	800badc <HAL_RCC_ClockConfig+0x70>
 800bb86:	e7cf      	b.n	800bb28 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 800bb88:	2003      	movs	r0, #3
 800bb8a:	e7ed      	b.n	800bb68 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb8c:	0198      	lsls	r0, r3, #6
 800bb8e:	d4a5      	bmi.n	800badc <HAL_RCC_ClockConfig+0x70>
 800bb90:	e7ca      	b.n	800bb28 <HAL_RCC_ClockConfig+0xbc>
 800bb92:	bf00      	nop
 800bb94:	40023c00 	.word	0x40023c00
 800bb98:	40023800 	.word	0x40023800
 800bb9c:	08011bd4 	.word	0x08011bd4
 800bba0:	20000028 	.word	0x20000028
 800bba4:	20000020 	.word	0x20000020

0800bba8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bba8:	4b04      	ldr	r3, [pc, #16]	; (800bbbc <HAL_RCC_GetPCLK1Freq+0x14>)
 800bbaa:	4a05      	ldr	r2, [pc, #20]	; (800bbc0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800bbac:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800bbae:	4905      	ldr	r1, [pc, #20]	; (800bbc4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bbb0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800bbb4:	6808      	ldr	r0, [r1, #0]
 800bbb6:	5cd3      	ldrb	r3, [r2, r3]
}
 800bbb8:	40d8      	lsrs	r0, r3
 800bbba:	4770      	bx	lr
 800bbbc:	40023800 	.word	0x40023800
 800bbc0:	08011be4 	.word	0x08011be4
 800bbc4:	20000020 	.word	0x20000020

0800bbc8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bbc8:	4b04      	ldr	r3, [pc, #16]	; (800bbdc <HAL_RCC_GetPCLK2Freq+0x14>)
 800bbca:	4a05      	ldr	r2, [pc, #20]	; (800bbe0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800bbcc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800bbce:	4905      	ldr	r1, [pc, #20]	; (800bbe4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bbd0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800bbd4:	6808      	ldr	r0, [r1, #0]
 800bbd6:	5cd3      	ldrb	r3, [r2, r3]
}
 800bbd8:	40d8      	lsrs	r0, r3
 800bbda:	4770      	bx	lr
 800bbdc:	40023800 	.word	0x40023800
 800bbe0:	08011be4 	.word	0x08011be4
 800bbe4:	20000020 	.word	0x20000020

0800bbe8 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d03b      	beq.n	800bc64 <HAL_SPI_Init+0x7c>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bbec:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bbf0:	2300      	movs	r3, #0
{
 800bbf2:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 800bbf4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800bbf8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bbfa:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800bbfc:	b362      	cbz	r2, 800bc58 <HAL_SPI_Init+0x70>
 800bbfe:	4618      	mov	r0, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bc00:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bc04:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800bc08:	432b      	orrs	r3, r5
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	6962      	ldr	r2, [r4, #20]
 800bc0e:	69e5      	ldr	r5, [r4, #28]
 800bc10:	6a26      	ldr	r6, [r4, #32]
 800bc12:	430b      	orrs	r3, r1
 800bc14:	4313      	orrs	r3, r2
 800bc16:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800bc18:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bc1a:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 800bc1c:	2502      	movs	r5, #2
 800bc1e:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bc22:	4333      	orrs	r3, r6
 800bc24:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 800bc28:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bc2a:	432b      	orrs	r3, r5
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bc2c:	0c12      	lsrs	r2, r2, #16
 800bc2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bc30:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bc34:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bc36:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 800bc38:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 800bc3c:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bc3e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bc40:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc42:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc44:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800bc4a:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc4c:	61cb      	str	r3, [r1, #28]

  return HAL_OK;
 800bc4e:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc50:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bc52:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 800bc56:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800bc58:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800bc5c:	f7fe f92a 	bl	8009eb4 <HAL_SPI_MspInit>
 800bc60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800bc62:	e7cd      	b.n	800bc00 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800bc64:	2001      	movs	r0, #1
}
 800bc66:	4770      	bx	lr

0800bc68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bc6c:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800bc70:	2c01      	cmp	r4, #1
{
 800bc72:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800bc74:	f000 8088 	beq.w	800bd88 <HAL_SPI_Transmit+0x120>
 800bc78:	461d      	mov	r5, r3
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800bc80:	4604      	mov	r4, r0
 800bc82:	4616      	mov	r6, r2
 800bc84:	4688      	mov	r8, r1

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc86:	f7fe fed1 	bl	800aa2c <HAL_GetTick>
 800bc8a:	4607      	mov	r7, r0
  initial_TxXferCount = Size;

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc8c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800bc90:	b2c0      	uxtb	r0, r0
 800bc92:	2801      	cmp	r0, #1
 800bc94:	d009      	beq.n	800bcaa <HAL_SPI_Transmit+0x42>
  {
    errorcode = HAL_BUSY;
 800bc96:	2002      	movs	r0, #2
  {
    errorcode = HAL_ERROR;
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800bc98:	2201      	movs	r2, #1
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bc9a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800bc9c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bca0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
}
 800bca4:	b002      	add	sp, #8
 800bca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800bcaa:	f1b8 0f00 	cmp.w	r8, #0
 800bcae:	d0f3      	beq.n	800bc98 <HAL_SPI_Transmit+0x30>
 800bcb0:	2e00      	cmp	r6, #0
 800bcb2:	d0f1      	beq.n	800bc98 <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcb4:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bcb6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bcba:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bcbc:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcbe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bcc2:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bcc6:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bcc8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferSize  = 0U;
 800bcca:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800bccc:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800bcd0:	86e6      	strh	r6, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bcd2:	86a6      	strh	r6, [r4, #52]	; 0x34
  hspi->RxXferCount = 0U;
 800bcd4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800bcd6:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcd8:	d103      	bne.n	800bce2 <HAL_SPI_Transmit+0x7a>
    SPI_1LINE_TX(hspi);
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bce0:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	0652      	lsls	r2, r2, #25
 800bce6:	d553      	bpl.n	800bd90 <HAL_SPI_Transmit+0x128>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bce8:	68e2      	ldr	r2, [r4, #12]
 800bcea:	6861      	ldr	r1, [r4, #4]
 800bcec:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800bcf0:	d07e      	beq.n	800bdf0 <HAL_SPI_Transmit+0x188>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bcf2:	2900      	cmp	r1, #0
 800bcf4:	d168      	bne.n	800bdc8 <HAL_SPI_Transmit+0x160>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bcf6:	f898 2000 	ldrb.w	r2, [r8]
 800bcfa:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 800bcfc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bcfe:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800bd00:	3b01      	subs	r3, #1
 800bd02:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd04:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 800bd06:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd08:	6322      	str	r2, [r4, #48]	; 0x30
 800bd0a:	1c6b      	adds	r3, r5, #1
 800bd0c:	d145      	bne.n	800bd9a <HAL_SPI_Transmit+0x132>
    while (hspi->TxXferCount > 0U)
 800bd0e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	b18b      	cbz	r3, 800bd38 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	689a      	ldr	r2, [r3, #8]
 800bd18:	0796      	lsls	r6, r2, #30
 800bd1a:	d55f      	bpl.n	800bddc <HAL_SPI_Transmit+0x174>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bd1c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bd1e:	7812      	ldrb	r2, [r2, #0]
 800bd20:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800bd22:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd24:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800bd26:	3b01      	subs	r3, #1
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800bd2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd2e:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 800bd30:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd32:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d1ed      	bne.n	800bd14 <HAL_SPI_Transmit+0xac>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bd38:	4b6d      	ldr	r3, [pc, #436]	; (800bef0 <HAL_SPI_Transmit+0x288>)
 800bd3a:	496e      	ldr	r1, [pc, #440]	; (800bef4 <HAL_SPI_Transmit+0x28c>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd3e:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bd40:	fba1 1303 	umull	r1, r3, r1, r3
 800bd44:	0d5b      	lsrs	r3, r3, #21
 800bd46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bd4a:	fb01 f303 	mul.w	r3, r1, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd4e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bd52:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd54:	d107      	bne.n	800bd66 <HAL_SPI_Transmit+0xfe>
 800bd56:	e03a      	b.n	800bdce <HAL_SPI_Transmit+0x166>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800bd58:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bd5a:	6822      	ldr	r2, [r4, #0]
      count--;
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bd60:	6893      	ldr	r3, [r2, #8]
 800bd62:	061b      	lsls	r3, r3, #24
 800bd64:	d502      	bpl.n	800bd6c <HAL_SPI_Transmit+0x104>
      if (count == 0U)
 800bd66:	9b01      	ldr	r3, [sp, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1f5      	bne.n	800bd58 <HAL_SPI_Transmit+0xf0>
 800bd6c:	68a3      	ldr	r3, [r4, #8]
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bd6e:	b933      	cbnz	r3, 800bd7e <HAL_SPI_Transmit+0x116>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd70:	6822      	ldr	r2, [r4, #0]
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	68d3      	ldr	r3, [r2, #12]
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	6893      	ldr	r3, [r2, #8]
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800bd80:	3000      	adds	r0, #0
 800bd82:	bf18      	it	ne
 800bd84:	2001      	movne	r0, #1
error:
 800bd86:	e787      	b.n	800bc98 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 800bd88:	2002      	movs	r0, #2
}
 800bd8a:	b002      	add	sp, #8
 800bd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd96:	601a      	str	r2, [r3, #0]
 800bd98:	e7a6      	b.n	800bce8 <HAL_SPI_Transmit+0x80>
    while (hspi->TxXferCount > 0U)
 800bd9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0ca      	beq.n	800bd38 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bda2:	6823      	ldr	r3, [r4, #0]
 800bda4:	689a      	ldr	r2, [r3, #8]
 800bda6:	0792      	lsls	r2, r2, #30
 800bda8:	d51b      	bpl.n	800bde2 <HAL_SPI_Transmit+0x17a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bdaa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bdac:	7812      	ldrb	r2, [r2, #0]
 800bdae:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800bdb0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bdb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800bdba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bdbc:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 800bdbe:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bdc0:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1ed      	bne.n	800bda2 <HAL_SPI_Transmit+0x13a>
 800bdc6:	e7b7      	b.n	800bd38 <HAL_SPI_Transmit+0xd0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bdc8:	2e01      	cmp	r6, #1
 800bdca:	d19e      	bne.n	800bd0a <HAL_SPI_Transmit+0xa2>
 800bdcc:	e793      	b.n	800bcf6 <HAL_SPI_Transmit+0x8e>
 800bdce:	1c68      	adds	r0, r5, #1
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bdd0:	6822      	ldr	r2, [r4, #0]
 800bdd2:	d155      	bne.n	800be80 <HAL_SPI_Transmit+0x218>
 800bdd4:	6893      	ldr	r3, [r2, #8]
 800bdd6:	0619      	lsls	r1, r3, #24
 800bdd8:	d4fc      	bmi.n	800bdd4 <HAL_SPI_Transmit+0x16c>
 800bdda:	e7c7      	b.n	800bd6c <HAL_SPI_Transmit+0x104>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bddc:	f7fe fe26 	bl	800aa2c <HAL_GetTick>
 800bde0:	e795      	b.n	800bd0e <HAL_SPI_Transmit+0xa6>
 800bde2:	f7fe fe23 	bl	800aa2c <HAL_GetTick>
 800bde6:	1bc0      	subs	r0, r0, r7
 800bde8:	42a8      	cmp	r0, r5
 800bdea:	d3d6      	bcc.n	800bd9a <HAL_SPI_Transmit+0x132>
          errorcode = HAL_TIMEOUT;
 800bdec:	2003      	movs	r0, #3
 800bdee:	e753      	b.n	800bc98 <HAL_SPI_Transmit+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bdf0:	2900      	cmp	r1, #0
 800bdf2:	d03b      	beq.n	800be6c <HAL_SPI_Transmit+0x204>
 800bdf4:	2e01      	cmp	r6, #1
 800bdf6:	d039      	beq.n	800be6c <HAL_SPI_Transmit+0x204>
 800bdf8:	1c68      	adds	r0, r5, #1
 800bdfa:	d120      	bne.n	800be3e <HAL_SPI_Transmit+0x1d6>
    while (hspi->TxXferCount > 0U)
 800bdfc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	d099      	beq.n	800bd38 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800be04:	6823      	ldr	r3, [r4, #0]
 800be06:	689a      	ldr	r2, [r3, #8]
 800be08:	0791      	lsls	r1, r2, #30
 800be0a:	d510      	bpl.n	800be2e <HAL_SPI_Transmit+0x1c6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800be0e:	f832 1b02 	ldrh.w	r1, [r2], #2
 800be12:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800be14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be16:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800be18:	3b01      	subs	r3, #1
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800be1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800be20:	b29b      	uxth	r3, r3
 800be22:	2b00      	cmp	r3, #0
 800be24:	d088      	beq.n	800bd38 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800be26:	6823      	ldr	r3, [r4, #0]
 800be28:	689a      	ldr	r2, [r3, #8]
 800be2a:	0791      	lsls	r1, r2, #30
 800be2c:	d4ee      	bmi.n	800be0c <HAL_SPI_Transmit+0x1a4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be2e:	f7fe fdfd 	bl	800aa2c <HAL_GetTick>
 800be32:	e7e3      	b.n	800bdfc <HAL_SPI_Transmit+0x194>
 800be34:	f7fe fdfa 	bl	800aa2c <HAL_GetTick>
 800be38:	1bc0      	subs	r0, r0, r7
 800be3a:	42a8      	cmp	r0, r5
 800be3c:	d2d6      	bcs.n	800bdec <HAL_SPI_Transmit+0x184>
    while (hspi->TxXferCount > 0U)
 800be3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800be40:	b29b      	uxth	r3, r3
 800be42:	2b00      	cmp	r3, #0
 800be44:	f43f af78 	beq.w	800bd38 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800be48:	6823      	ldr	r3, [r4, #0]
 800be4a:	689a      	ldr	r2, [r3, #8]
 800be4c:	0796      	lsls	r6, r2, #30
 800be4e:	d5f1      	bpl.n	800be34 <HAL_SPI_Transmit+0x1cc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be50:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800be52:	f832 1b02 	ldrh.w	r1, [r2], #2
 800be56:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800be58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be5a:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800be5c:	3b01      	subs	r3, #1
 800be5e:	b29b      	uxth	r3, r3
 800be60:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800be62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800be64:	b29b      	uxth	r3, r3
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1ee      	bne.n	800be48 <HAL_SPI_Transmit+0x1e0>
 800be6a:	e765      	b.n	800bd38 <HAL_SPI_Transmit+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be6c:	4641      	mov	r1, r8
 800be6e:	f831 2b02 	ldrh.w	r2, [r1], #2
 800be72:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800be74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800be76:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800be78:	3b01      	subs	r3, #1
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800be7e:	e7bb      	b.n	800bdf8 <HAL_SPI_Transmit+0x190>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be80:	6893      	ldr	r3, [r2, #8]
 800be82:	061a      	lsls	r2, r3, #24
 800be84:	f57f af72 	bpl.w	800bd6c <HAL_SPI_Transmit+0x104>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800be88:	f7fe fdd0 	bl	800aa2c <HAL_GetTick>
 800be8c:	1bc0      	subs	r0, r0, r7
 800be8e:	4285      	cmp	r5, r0
 800be90:	d89d      	bhi.n	800bdce <HAL_SPI_Transmit+0x166>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be92:	e9d4 2000 	ldrd	r2, r0, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800be96:	6851      	ldr	r1, [r2, #4]
 800be98:	68a3      	ldr	r3, [r4, #8]
 800be9a:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be9e:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bea2:	6051      	str	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bea4:	d018      	beq.n	800bed8 <HAL_SPI_Transmit+0x270>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bea6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bea8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800beac:	d107      	bne.n	800bebe <HAL_SPI_Transmit+0x256>
          SPI_RESET_CRC(hspi);
 800beae:	6811      	ldr	r1, [r2, #0]
 800beb0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800beb4:	6011      	str	r1, [r2, #0]
 800beb6:	6811      	ldr	r1, [r2, #0]
 800beb8:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800bebc:	6011      	str	r1, [r2, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800bebe:	2201      	movs	r2, #1
 800bec0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bec4:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hspi);
 800bec6:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bec8:	f042 0220 	orr.w	r2, r2, #32
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800becc:	2120      	movs	r1, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bece:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hspi);
 800bed0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bed4:	6561      	str	r1, [r4, #84]	; 0x54
 800bed6:	e74a      	b.n	800bd6e <HAL_SPI_Transmit+0x106>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bedc:	d002      	beq.n	800bee4 <HAL_SPI_Transmit+0x27c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bee2:	d1e0      	bne.n	800bea6 <HAL_SPI_Transmit+0x23e>
          __HAL_SPI_DISABLE(hspi);
 800bee4:	6811      	ldr	r1, [r2, #0]
 800bee6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800beea:	6011      	str	r1, [r2, #0]
 800beec:	e7db      	b.n	800bea6 <HAL_SPI_Transmit+0x23e>
 800beee:	bf00      	nop
 800bef0:	20000020 	.word	0x20000020
 800bef4:	165e9f81 	.word	0x165e9f81

0800bef8 <HAL_SPI_Receive>:
{
 800bef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800befc:	6845      	ldr	r5, [r0, #4]
 800befe:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 800bf02:	4604      	mov	r4, r0
 800bf04:	b082      	sub	sp, #8
 800bf06:	460f      	mov	r7, r1
 800bf08:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800bf0c:	4690      	mov	r8, r2
 800bf0e:	461e      	mov	r6, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bf10:	d018      	beq.n	800bf44 <HAL_SPI_Receive+0x4c>
  __HAL_LOCK(hspi);
 800bf12:	2801      	cmp	r0, #1
 800bf14:	f000 80bd 	beq.w	800c092 <HAL_SPI_Receive+0x19a>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800bf1e:	f7fe fd85 	bl	800aa2c <HAL_GetTick>
 800bf22:	4605      	mov	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800bf24:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800bf28:	b2c0      	uxtb	r0, r0
 800bf2a:	2801      	cmp	r0, #1
 800bf2c:	f000 80b5 	beq.w	800c09a <HAL_SPI_Receive+0x1a2>
    errorcode = HAL_BUSY;
 800bf30:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800bf32:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800bf34:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800bf36:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bf3a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800bf3e:	b002      	add	sp, #8
 800bf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bf44:	68a3      	ldr	r3, [r4, #8]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d1e3      	bne.n	800bf12 <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bf4a:	2304      	movs	r3, #4
  __HAL_LOCK(hspi);
 800bf4c:	2801      	cmp	r0, #1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bf4e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_LOCK(hspi);
 800bf52:	f000 809e 	beq.w	800c092 <HAL_SPI_Receive+0x19a>
 800bf56:	2301      	movs	r3, #1
 800bf58:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800bf5c:	f7fe fd66 	bl	800aa2c <HAL_GetTick>
  tmp_state           = hspi->State;
 800bf60:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 800bf64:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 800bf66:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bf68:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800bf6a:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bf6c:	d007      	beq.n	800bf7e <HAL_SPI_Receive+0x86>
 800bf6e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800bf72:	d1dd      	bne.n	800bf30 <HAL_SPI_Receive+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bf74:	68a1      	ldr	r1, [r4, #8]
 800bf76:	2900      	cmp	r1, #0
 800bf78:	d1da      	bne.n	800bf30 <HAL_SPI_Receive+0x38>
 800bf7a:	2b04      	cmp	r3, #4
 800bf7c:	d1d8      	bne.n	800bf30 <HAL_SPI_Receive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bf7e:	2f00      	cmp	r7, #0
 800bf80:	f000 8135 	beq.w	800c1ee <HAL_SPI_Receive+0x2f6>
 800bf84:	f1b8 0f00 	cmp.w	r8, #0
 800bf88:	f000 8131 	beq.w	800c1ee <HAL_SPI_Receive+0x2f6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf8c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf90:	6821      	ldr	r1, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf92:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bf94:	bf1c      	itt	ne
 800bf96:	2305      	movne	r3, #5
 800bf98:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 800bfa0:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800bfa4:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfa8:	6808      	ldr	r0, [r1, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bfaa:	63a7      	str	r7, [r4, #56]	; 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfac:	0640      	lsls	r0, r0, #25
  hspi->RxXferSize  = Size;
 800bfae:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bfb2:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bfb4:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 800bfb8:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfbc:	d403      	bmi.n	800bfc6 <HAL_SPI_Receive+0xce>
    __HAL_SPI_ENABLE(hspi);
 800bfbe:	680b      	ldr	r3, [r1, #0]
 800bfc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfc4:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bfc6:	68e3      	ldr	r3, [r4, #12]
 800bfc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfcc:	f000 8154 	beq.w	800c278 <HAL_SPI_Receive+0x380>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfd0:	2a00      	cmp	r2, #0
 800bfd2:	f000 8147 	beq.w	800c264 <HAL_SPI_Receive+0x36c>
 800bfd6:	f1b8 0f01 	cmp.w	r8, #1
 800bfda:	f000 8143 	beq.w	800c264 <HAL_SPI_Receive+0x36c>
 800bfde:	1c70      	adds	r0, r6, #1
 800bfe0:	f040 81b2 	bne.w	800c348 <HAL_SPI_Receive+0x450>
        txallowed = 1U;
 800bfe4:	2501      	movs	r5, #1
 800bfe6:	e026      	b.n	800c036 <HAL_SPI_Receive+0x13e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	689a      	ldr	r2, [r3, #8]
 800bfec:	0791      	lsls	r1, r2, #30
 800bfee:	d50f      	bpl.n	800c010 <HAL_SPI_Receive+0x118>
 800bff0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800bff2:	b292      	uxth	r2, r2
 800bff4:	b162      	cbz	r2, 800c010 <HAL_SPI_Receive+0x118>
 800bff6:	b15d      	cbz	r5, 800c010 <HAL_SPI_Receive+0x118>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bff8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bffa:	7812      	ldrb	r2, [r2, #0]
 800bffc:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800bffe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800c000:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c002:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 800c004:	3a01      	subs	r2, #1
 800c006:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 800c008:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 800c00a:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800c00c:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 800c00e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c010:	689a      	ldr	r2, [r3, #8]
 800c012:	07d2      	lsls	r2, r2, #31
 800c014:	d50d      	bpl.n	800c032 <HAL_SPI_Receive+0x13a>
 800c016:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c018:	b292      	uxth	r2, r2
 800c01a:	b152      	cbz	r2, 800c032 <HAL_SPI_Receive+0x13a>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c01c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800c022:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800c024:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800c026:	3b01      	subs	r3, #1
 800c028:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 800c02a:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800c02c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800c02e:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 800c030:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c032:	f7fe fcfb 	bl	800aa2c <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c036:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c038:	b29b      	uxth	r3, r3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1d4      	bne.n	800bfe8 <HAL_SPI_Receive+0xf0>
 800c03e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c040:	b29b      	uxth	r3, r3
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1d0      	bne.n	800bfe8 <HAL_SPI_Receive+0xf0>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c046:	4b91      	ldr	r3, [pc, #580]	; (800c28c <HAL_SPI_Receive+0x394>)
 800c048:	4a91      	ldr	r2, [pc, #580]	; (800c290 <HAL_SPI_Receive+0x398>)
 800c04a:	681b      	ldr	r3, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c04c:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c04e:	fba2 2303 	umull	r2, r3, r2, r3
 800c052:	0d5b      	lsrs	r3, r3, #21
 800c054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c058:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c05c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c060:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c062:	d107      	bne.n	800c074 <HAL_SPI_Receive+0x17c>
 800c064:	e1a4      	b.n	800c3b0 <HAL_SPI_Receive+0x4b8>
      count--;
 800c066:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c068:	6822      	ldr	r2, [r4, #0]
      count--;
 800c06a:	3b01      	subs	r3, #1
 800c06c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c06e:	6893      	ldr	r3, [r2, #8]
 800c070:	0619      	lsls	r1, r3, #24
 800c072:	d502      	bpl.n	800c07a <HAL_SPI_Receive+0x182>
      if (count == 0U)
 800c074:	9b01      	ldr	r3, [sp, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d1f5      	bne.n	800c066 <HAL_SPI_Receive+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c07a:	68a0      	ldr	r0, [r4, #8]
 800c07c:	2800      	cmp	r0, #0
 800c07e:	f040 8154 	bne.w	800c32a <HAL_SPI_Receive+0x432>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	9000      	str	r0, [sp, #0]
 800c086:	68da      	ldr	r2, [r3, #12]
 800c088:	9200      	str	r2, [sp, #0]
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	9b00      	ldr	r3, [sp, #0]
 800c090:	e74f      	b.n	800bf32 <HAL_SPI_Receive+0x3a>
  __HAL_LOCK(hspi);
 800c092:	2002      	movs	r0, #2
}
 800c094:	b002      	add	sp, #8
 800c096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800c09a:	2f00      	cmp	r7, #0
 800c09c:	f43f af49 	beq.w	800bf32 <HAL_SPI_Receive+0x3a>
 800c0a0:	f1b8 0f00 	cmp.w	r8, #0
 800c0a4:	f43f af45 	beq.w	800bf32 <HAL_SPI_Receive+0x3a>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0a8:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c0aa:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c0ac:	2304      	movs	r3, #4
 800c0ae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0b2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c0b6:	f04f 0300 	mov.w	r3, #0
 800c0ba:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c0bc:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c0be:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 800c0c0:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c0c4:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c0c8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c0cc:	86e3      	strh	r3, [r4, #54]	; 0x36
 800c0ce:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0d0:	f000 8084 	beq.w	800c1dc <HAL_SPI_Receive+0x2e4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	0652      	lsls	r2, r2, #25
 800c0d8:	d403      	bmi.n	800c0e2 <HAL_SPI_Receive+0x1ea>
    __HAL_SPI_ENABLE(hspi);
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0e0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c0e2:	68e2      	ldr	r2, [r4, #12]
 800c0e4:	b9b2      	cbnz	r2, 800c114 <HAL_SPI_Receive+0x21c>
 800c0e6:	1c71      	adds	r1, r6, #1
 800c0e8:	d00b      	beq.n	800c102 <HAL_SPI_Receive+0x20a>
 800c0ea:	e069      	b.n	800c1c0 <HAL_SPI_Receive+0x2c8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c0ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c0ee:	7b1b      	ldrb	r3, [r3, #12]
 800c0f0:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800c0f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c0f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c0fa:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800c0fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c0fe:	63a2      	str	r2, [r4, #56]	; 0x38
 800c100:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 800c102:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c104:	b292      	uxth	r2, r2
 800c106:	b1d2      	cbz	r2, 800c13e <HAL_SPI_Receive+0x246>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c108:	689a      	ldr	r2, [r3, #8]
 800c10a:	07d2      	lsls	r2, r2, #31
 800c10c:	d4ee      	bmi.n	800c0ec <HAL_SPI_Receive+0x1f4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c10e:	f7fe fc8d 	bl	800aa2c <HAL_GetTick>
 800c112:	e7f5      	b.n	800c100 <HAL_SPI_Receive+0x208>
 800c114:	1c77      	adds	r7, r6, #1
 800c116:	d124      	bne.n	800c162 <HAL_SPI_Receive+0x26a>
    while (hspi->RxXferCount > 0U)
 800c118:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c11a:	b292      	uxth	r2, r2
 800c11c:	b17a      	cbz	r2, 800c13e <HAL_SPI_Receive+0x246>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c11e:	689a      	ldr	r2, [r3, #8]
 800c120:	07d0      	lsls	r0, r2, #31
 800c122:	d560      	bpl.n	800c1e6 <HAL_SPI_Receive+0x2ee>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c124:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c126:	68da      	ldr	r2, [r3, #12]
 800c128:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 800c12c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c12e:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800c130:	3a01      	subs	r2, #1
 800c132:	b292      	uxth	r2, r2
 800c134:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 800c136:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c138:	b292      	uxth	r2, r2
 800c13a:	2a00      	cmp	r2, #0
 800c13c:	d1ef      	bne.n	800c11e <HAL_SPI_Receive+0x226>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c13e:	6862      	ldr	r2, [r4, #4]
 800c140:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800c144:	d055      	beq.n	800c1f2 <HAL_SPI_Receive+0x2fa>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c146:	689a      	ldr	r2, [r3, #8]
 800c148:	07d2      	lsls	r2, r2, #31
 800c14a:	d4fc      	bmi.n	800c146 <HAL_SPI_Receive+0x24e>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c14c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800c14e:	3000      	adds	r0, #0
 800c150:	bf18      	it	ne
 800c152:	2001      	movne	r0, #1
error :
 800c154:	e6ed      	b.n	800bf32 <HAL_SPI_Receive+0x3a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c156:	f7fe fc69 	bl	800aa2c <HAL_GetTick>
 800c15a:	1b40      	subs	r0, r0, r5
 800c15c:	42b0      	cmp	r0, r6
 800c15e:	d23b      	bcs.n	800c1d8 <HAL_SPI_Receive+0x2e0>
 800c160:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 800c162:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c164:	b292      	uxth	r2, r2
 800c166:	b17a      	cbz	r2, 800c188 <HAL_SPI_Receive+0x290>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c168:	689a      	ldr	r2, [r3, #8]
 800c16a:	07d0      	lsls	r0, r2, #31
 800c16c:	d5f3      	bpl.n	800c156 <HAL_SPI_Receive+0x25e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c16e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c170:	68da      	ldr	r2, [r3, #12]
 800c172:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 800c176:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c178:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800c17a:	3a01      	subs	r2, #1
 800c17c:	b292      	uxth	r2, r2
 800c17e:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 800c180:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c182:	b292      	uxth	r2, r2
 800c184:	2a00      	cmp	r2, #0
 800c186:	d1ef      	bne.n	800c168 <HAL_SPI_Receive+0x270>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c188:	6862      	ldr	r2, [r4, #4]
 800c18a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800c18e:	d106      	bne.n	800c19e <HAL_SPI_Receive+0x2a6>
 800c190:	e02f      	b.n	800c1f2 <HAL_SPI_Receive+0x2fa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c192:	f7fe fc4b 	bl	800aa2c <HAL_GetTick>
 800c196:	1b40      	subs	r0, r0, r5
 800c198:	4286      	cmp	r6, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c19a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c19c:	d93f      	bls.n	800c21e <HAL_SPI_Receive+0x326>
 800c19e:	1c71      	adds	r1, r6, #1
 800c1a0:	d0d1      	beq.n	800c146 <HAL_SPI_Receive+0x24e>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	07db      	lsls	r3, r3, #31
 800c1a6:	d4f4      	bmi.n	800c192 <HAL_SPI_Receive+0x29a>
 800c1a8:	e7d0      	b.n	800c14c <HAL_SPI_Receive+0x254>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c1aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c1ac:	7b1b      	ldrb	r3, [r3, #12]
 800c1ae:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800c1b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1b8:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800c1ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1bc:	63a2      	str	r2, [r4, #56]	; 0x38
 800c1be:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 800c1c0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c1c2:	b292      	uxth	r2, r2
 800c1c4:	2a00      	cmp	r2, #0
 800c1c6:	d0df      	beq.n	800c188 <HAL_SPI_Receive+0x290>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c1c8:	689a      	ldr	r2, [r3, #8]
 800c1ca:	07d7      	lsls	r7, r2, #31
 800c1cc:	d4ed      	bmi.n	800c1aa <HAL_SPI_Receive+0x2b2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1ce:	f7fe fc2d 	bl	800aa2c <HAL_GetTick>
 800c1d2:	1b40      	subs	r0, r0, r5
 800c1d4:	42b0      	cmp	r0, r6
 800c1d6:	d3f2      	bcc.n	800c1be <HAL_SPI_Receive+0x2c6>
          errorcode = HAL_TIMEOUT;
 800c1d8:	2003      	movs	r0, #3
 800c1da:	e6aa      	b.n	800bf32 <HAL_SPI_Receive+0x3a>
    SPI_1LINE_RX(hspi);
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	e776      	b.n	800c0d4 <HAL_SPI_Receive+0x1dc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1e6:	f7fe fc21 	bl	800aa2c <HAL_GetTick>
 800c1ea:	6823      	ldr	r3, [r4, #0]
 800c1ec:	e794      	b.n	800c118 <HAL_SPI_Receive+0x220>
    errorcode = HAL_ERROR;
 800c1ee:	2001      	movs	r0, #1
 800c1f0:	e69f      	b.n	800bf32 <HAL_SPI_Receive+0x3a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1f2:	68a2      	ldr	r2, [r4, #8]
 800c1f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c1f8:	d02f      	beq.n	800c25a <HAL_SPI_Receive+0x362>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c1fa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c1fe:	d076      	beq.n	800c2ee <HAL_SPI_Receive+0x3f6>
 800c200:	1c71      	adds	r1, r6, #1
 800c202:	d103      	bne.n	800c20c <HAL_SPI_Receive+0x314>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c204:	689a      	ldr	r2, [r3, #8]
 800c206:	0612      	lsls	r2, r2, #24
 800c208:	d4fc      	bmi.n	800c204 <HAL_SPI_Receive+0x30c>
 800c20a:	e79f      	b.n	800c14c <HAL_SPI_Receive+0x254>
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	061b      	lsls	r3, r3, #24
 800c210:	d59c      	bpl.n	800c14c <HAL_SPI_Receive+0x254>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c212:	f7fe fc0b 	bl	800aa2c <HAL_GetTick>
 800c216:	1b40      	subs	r0, r0, r5
 800c218:	4286      	cmp	r6, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c21a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c21c:	d8f0      	bhi.n	800c200 <HAL_SPI_Receive+0x308>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c21e:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c220:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c222:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c226:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c22a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c22c:	d07f      	beq.n	800c32e <HAL_SPI_Receive+0x436>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c22e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c230:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800c234:	d107      	bne.n	800c246 <HAL_SPI_Receive+0x34e>
          SPI_RESET_CRC(hspi);
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c23c:	601a      	str	r2, [r3, #0]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c244:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800c246:	2301      	movs	r3, #1
 800c248:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c24c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c24e:	f043 0320 	orr.w	r3, r3, #32
 800c252:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c254:	2320      	movs	r3, #32
 800c256:	6563      	str	r3, [r4, #84]	; 0x54
 800c258:	e778      	b.n	800c14c <HAL_SPI_Receive+0x254>
    __HAL_SPI_DISABLE(hspi);
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c260:	601a      	str	r2, [r3, #0]
 800c262:	e7cd      	b.n	800c200 <HAL_SPI_Receive+0x308>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c264:	783b      	ldrb	r3, [r7, #0]
 800c266:	730b      	strb	r3, [r1, #12]
      hspi->TxXferCount--;
 800c268:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c26a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800c26c:	3b01      	subs	r3, #1
 800c26e:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c270:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 800c272:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c274:	6322      	str	r2, [r4, #48]	; 0x30
 800c276:	e6b2      	b.n	800bfde <HAL_SPI_Receive+0xe6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c278:	2a00      	cmp	r2, #0
 800c27a:	d04d      	beq.n	800c318 <HAL_SPI_Receive+0x420>
 800c27c:	f1b8 0f01 	cmp.w	r8, #1
 800c280:	d04a      	beq.n	800c318 <HAL_SPI_Receive+0x420>
 800c282:	1c77      	adds	r7, r6, #1
 800c284:	f040 80b5 	bne.w	800c3f2 <HAL_SPI_Receive+0x4fa>
        txallowed = 1U;
 800c288:	2501      	movs	r5, #1
 800c28a:	e027      	b.n	800c2dc <HAL_SPI_Receive+0x3e4>
 800c28c:	20000020 	.word	0x20000020
 800c290:	165e9f81 	.word	0x165e9f81
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	689a      	ldr	r2, [r3, #8]
 800c298:	0796      	lsls	r6, r2, #30
 800c29a:	d50d      	bpl.n	800c2b8 <HAL_SPI_Receive+0x3c0>
 800c29c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800c29e:	b292      	uxth	r2, r2
 800c2a0:	b152      	cbz	r2, 800c2b8 <HAL_SPI_Receive+0x3c0>
 800c2a2:	b14d      	cbz	r5, 800c2b8 <HAL_SPI_Receive+0x3c0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c2a6:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c2aa:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800c2ac:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2ae:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800c2b0:	3a01      	subs	r2, #1
 800c2b2:	b292      	uxth	r2, r2
 800c2b4:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 800c2b6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c2b8:	689a      	ldr	r2, [r3, #8]
 800c2ba:	07d0      	lsls	r0, r2, #31
 800c2bc:	d50c      	bpl.n	800c2d8 <HAL_SPI_Receive+0x3e0>
 800c2be:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c2c0:	b292      	uxth	r2, r2
 800c2c2:	b14a      	cbz	r2, 800c2d8 <HAL_SPI_Receive+0x3e0>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c2c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800c2cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c2ce:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800c2d6:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c2d8:	f7fe fba8 	bl	800aa2c <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c2dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1d7      	bne.n	800c294 <HAL_SPI_Receive+0x39c>
 800c2e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1d3      	bne.n	800c294 <HAL_SPI_Receive+0x39c>
 800c2ec:	e6ab      	b.n	800c046 <HAL_SPI_Receive+0x14e>
    __HAL_SPI_DISABLE(hspi);
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2f4:	601a      	str	r2, [r3, #0]
 800c2f6:	1c77      	adds	r7, r6, #1
 800c2f8:	d103      	bne.n	800c302 <HAL_SPI_Receive+0x40a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c2fa:	689a      	ldr	r2, [r3, #8]
 800c2fc:	07d5      	lsls	r5, r2, #31
 800c2fe:	d4fc      	bmi.n	800c2fa <HAL_SPI_Receive+0x402>
 800c300:	e724      	b.n	800c14c <HAL_SPI_Receive+0x254>
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	07d8      	lsls	r0, r3, #31
 800c306:	f57f af21 	bpl.w	800c14c <HAL_SPI_Receive+0x254>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c30a:	f7fe fb8f 	bl	800aa2c <HAL_GetTick>
 800c30e:	1b40      	subs	r0, r0, r5
 800c310:	4286      	cmp	r6, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c312:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c314:	d8ef      	bhi.n	800c2f6 <HAL_SPI_Receive+0x3fe>
 800c316:	e782      	b.n	800c21e <HAL_SPI_Receive+0x326>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c318:	f837 3b02 	ldrh.w	r3, [r7], #2
 800c31c:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 800c31e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c320:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800c322:	3b01      	subs	r3, #1
 800c324:	b29b      	uxth	r3, r3
 800c326:	86e3      	strh	r3, [r4, #54]	; 0x36
 800c328:	e7ab      	b.n	800c282 <HAL_SPI_Receive+0x38a>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c32a:	2000      	movs	r0, #0
 800c32c:	e601      	b.n	800bf32 <HAL_SPI_Receive+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c32e:	68a2      	ldr	r2, [r4, #8]
 800c330:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c334:	d003      	beq.n	800c33e <HAL_SPI_Receive+0x446>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c336:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c33a:	f47f af78 	bne.w	800c22e <HAL_SPI_Receive+0x336>
          __HAL_SPI_DISABLE(hspi);
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c344:	601a      	str	r2, [r3, #0]
 800c346:	e772      	b.n	800c22e <HAL_SPI_Receive+0x336>
        txallowed = 1U;
 800c348:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c34a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	b91b      	cbnz	r3, 800c358 <HAL_SPI_Receive+0x460>
 800c350:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c352:	b29b      	uxth	r3, r3
 800c354:	2b00      	cmp	r3, #0
 800c356:	d030      	beq.n	800c3ba <HAL_SPI_Receive+0x4c2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	689a      	ldr	r2, [r3, #8]
 800c35c:	0791      	lsls	r1, r2, #30
 800c35e:	d50f      	bpl.n	800c380 <HAL_SPI_Receive+0x488>
 800c360:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800c362:	b292      	uxth	r2, r2
 800c364:	b162      	cbz	r2, 800c380 <HAL_SPI_Receive+0x488>
 800c366:	b15f      	cbz	r7, 800c380 <HAL_SPI_Receive+0x488>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c368:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c36a:	7812      	ldrb	r2, [r2, #0]
 800c36c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800c36e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800c370:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c372:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 800c374:	3a01      	subs	r2, #1
 800c376:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 800c378:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 800c37a:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800c37c:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 800c37e:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c380:	689a      	ldr	r2, [r3, #8]
 800c382:	07d2      	lsls	r2, r2, #31
 800c384:	d50d      	bpl.n	800c3a2 <HAL_SPI_Receive+0x4aa>
 800c386:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c388:	b292      	uxth	r2, r2
 800c38a:	b152      	cbz	r2, 800c3a2 <HAL_SPI_Receive+0x4aa>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c38c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800c392:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800c394:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800c396:	3b01      	subs	r3, #1
 800c398:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 800c39a:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800c39c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800c39e:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 800c3a0:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c3a2:	f7fe fb43 	bl	800aa2c <HAL_GetTick>
 800c3a6:	1b40      	subs	r0, r0, r5
 800c3a8:	4286      	cmp	r6, r0
 800c3aa:	f67f af15 	bls.w	800c1d8 <HAL_SPI_Receive+0x2e0>
 800c3ae:	e7cc      	b.n	800c34a <HAL_SPI_Receive+0x452>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c3b0:	6822      	ldr	r2, [r4, #0]
 800c3b2:	6893      	ldr	r3, [r2, #8]
 800c3b4:	061d      	lsls	r5, r3, #24
 800c3b6:	d4fc      	bmi.n	800c3b2 <HAL_SPI_Receive+0x4ba>
 800c3b8:	e65f      	b.n	800c07a <HAL_SPI_Receive+0x182>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c3ba:	4b3b      	ldr	r3, [pc, #236]	; (800c4a8 <HAL_SPI_Receive+0x5b0>)
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3bc:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a3a      	ldr	r2, [pc, #232]	; (800c4ac <HAL_SPI_Receive+0x5b4>)
 800c3c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c3c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c3ca:	fb03 f302 	mul.w	r3, r3, r2
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3ce:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c3d2:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3d4:	f47f ae4e 	bne.w	800c074 <HAL_SPI_Receive+0x17c>
 800c3d8:	e004      	b.n	800c3e4 <HAL_SPI_Receive+0x4ec>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c3da:	f7fe fb27 	bl	800aa2c <HAL_GetTick>
 800c3de:	1b40      	subs	r0, r0, r5
 800c3e0:	4286      	cmp	r6, r0
 800c3e2:	d936      	bls.n	800c452 <HAL_SPI_Receive+0x55a>
 800c3e4:	1c77      	adds	r7, r6, #1
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c3e6:	6822      	ldr	r2, [r4, #0]
 800c3e8:	d0e3      	beq.n	800c3b2 <HAL_SPI_Receive+0x4ba>
 800c3ea:	6893      	ldr	r3, [r2, #8]
 800c3ec:	0618      	lsls	r0, r3, #24
 800c3ee:	d4f4      	bmi.n	800c3da <HAL_SPI_Receive+0x4e2>
 800c3f0:	e643      	b.n	800c07a <HAL_SPI_Receive+0x182>
        txallowed = 1U;
 800c3f2:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c3f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	b91b      	cbnz	r3, 800c402 <HAL_SPI_Receive+0x50a>
 800c3fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0db      	beq.n	800c3ba <HAL_SPI_Receive+0x4c2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	689a      	ldr	r2, [r3, #8]
 800c406:	0791      	lsls	r1, r2, #30
 800c408:	d50d      	bpl.n	800c426 <HAL_SPI_Receive+0x52e>
 800c40a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800c40c:	b292      	uxth	r2, r2
 800c40e:	b152      	cbz	r2, 800c426 <HAL_SPI_Receive+0x52e>
 800c410:	b14f      	cbz	r7, 800c426 <HAL_SPI_Receive+0x52e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c412:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c414:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c418:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800c41a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c41c:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800c41e:	3a01      	subs	r2, #1
 800c420:	b292      	uxth	r2, r2
 800c422:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 800c424:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c426:	689a      	ldr	r2, [r3, #8]
 800c428:	07d2      	lsls	r2, r2, #31
 800c42a:	d50c      	bpl.n	800c446 <HAL_SPI_Receive+0x54e>
 800c42c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c42e:	b292      	uxth	r2, r2
 800c430:	b14a      	cbz	r2, 800c446 <HAL_SPI_Receive+0x54e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c432:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800c43a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c43c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800c43e:	3b01      	subs	r3, #1
 800c440:	b29b      	uxth	r3, r3
 800c442:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800c444:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c446:	f7fe faf1 	bl	800aa2c <HAL_GetTick>
 800c44a:	1b40      	subs	r0, r0, r5
 800c44c:	4286      	cmp	r6, r0
 800c44e:	d8d1      	bhi.n	800c3f4 <HAL_SPI_Receive+0x4fc>
 800c450:	e6c2      	b.n	800c1d8 <HAL_SPI_Receive+0x2e0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c452:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c456:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c458:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c45c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c460:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c462:	d014      	beq.n	800c48e <HAL_SPI_Receive+0x596>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c464:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c466:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800c46a:	d107      	bne.n	800c47c <HAL_SPI_Receive+0x584>
          SPI_RESET_CRC(hspi);
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c47a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800c47c:	2001      	movs	r0, #1
 800c47e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c482:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c484:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c486:	4313      	orrs	r3, r2
 800c488:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c48a:	6562      	str	r2, [r4, #84]	; 0x54
 800c48c:	e551      	b.n	800bf32 <HAL_SPI_Receive+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c48e:	68a2      	ldr	r2, [r4, #8]
 800c490:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c494:	d002      	beq.n	800c49c <HAL_SPI_Receive+0x5a4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c496:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c49a:	d1e3      	bne.n	800c464 <HAL_SPI_Receive+0x56c>
          __HAL_SPI_DISABLE(hspi);
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4a2:	601a      	str	r2, [r3, #0]
 800c4a4:	e7de      	b.n	800c464 <HAL_SPI_Receive+0x56c>
 800c4a6:	bf00      	nop
 800c4a8:	20000020 	.word	0x20000020
 800c4ac:	016e3600 	.word	0x016e3600

0800c4b0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d05c      	beq.n	800c56e <HAL_TIM_Base_Init+0xbe>
{
 800c4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c4c0:	b3bb      	cbz	r3, 800c532 <HAL_TIM_Base_Init+0x82>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4c2:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4c4:	4e3a      	ldr	r6, [pc, #232]	; (800c5b0 <HAL_TIM_Base_Init+0x100>)
 800c4c6:	69a5      	ldr	r5, [r4, #24]
 800c4c8:	68e0      	ldr	r0, [r4, #12]
 800c4ca:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800c4cc:	2302      	movs	r3, #2
 800c4ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4d2:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800c4d4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4d6:	d04c      	beq.n	800c572 <HAL_TIM_Base_Init+0xc2>
 800c4d8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800c4dc:	d058      	beq.n	800c590 <HAL_TIM_Base_Init+0xe0>
 800c4de:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800c4e2:	42b2      	cmp	r2, r6
 800c4e4:	d02a      	beq.n	800c53c <HAL_TIM_Base_Init+0x8c>
 800c4e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c4ea:	42b2      	cmp	r2, r6
 800c4ec:	d026      	beq.n	800c53c <HAL_TIM_Base_Init+0x8c>
 800c4ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c4f2:	42b2      	cmp	r2, r6
 800c4f4:	d022      	beq.n	800c53c <HAL_TIM_Base_Init+0x8c>
 800c4f6:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800c4fa:	42b2      	cmp	r2, r6
 800c4fc:	d01e      	beq.n	800c53c <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4fe:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800c502:	42b2      	cmp	r2, r6
 800c504:	d013      	beq.n	800c52e <HAL_TIM_Base_Init+0x7e>
 800c506:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c50a:	42b2      	cmp	r2, r6
 800c50c:	d00f      	beq.n	800c52e <HAL_TIM_Base_Init+0x7e>
 800c50e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c512:	42b2      	cmp	r2, r6
 800c514:	d00b      	beq.n	800c52e <HAL_TIM_Base_Init+0x7e>
 800c516:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 800c51a:	42b2      	cmp	r2, r6
 800c51c:	d007      	beq.n	800c52e <HAL_TIM_Base_Init+0x7e>
 800c51e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c522:	42b2      	cmp	r2, r6
 800c524:	d003      	beq.n	800c52e <HAL_TIM_Base_Init+0x7e>
 800c526:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c52a:	42b2      	cmp	r2, r6
 800c52c:	d138      	bne.n	800c5a0 <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c52e:	6926      	ldr	r6, [r4, #16]
 800c530:	e033      	b.n	800c59a <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 800c532:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c536:	f7fd fcf5 	bl	8009f24 <HAL_TIM_Base_MspInit>
 800c53a:	e7c2      	b.n	800c4c2 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 800c53c:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c53e:	4f1d      	ldr	r7, [pc, #116]	; (800c5b4 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c544:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c546:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c54c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c54e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c552:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c554:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800c556:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c558:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c55a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c55c:	d101      	bne.n	800c562 <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c55e:	6963      	ldr	r3, [r4, #20]
 800c560:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c562:	2301      	movs	r3, #1
 800c564:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800c566:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800c568:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800c56e:	2001      	movs	r0, #1
}
 800c570:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800c572:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c574:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c57a:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800c57c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c580:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c586:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800c588:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c58a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c58c:	6291      	str	r1, [r2, #40]	; 0x28
 800c58e:	e7e6      	b.n	800c55e <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 800c590:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c592:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c598:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800c59a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c59e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5a4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800c5a6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5a8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c5aa:	6291      	str	r1, [r2, #40]	; 0x28
 800c5ac:	e7d9      	b.n	800c562 <HAL_TIM_Base_Init+0xb2>
 800c5ae:	bf00      	nop
 800c5b0:	40010000 	.word	0x40010000
 800c5b4:	40010400 	.word	0x40010400

0800c5b8 <HAL_TIM_OC_MspInit>:
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop

0800c5bc <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d05c      	beq.n	800c67a <HAL_TIM_OC_Init+0xbe>
{
 800c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800c5c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c5cc:	b3bb      	cbz	r3, 800c63e <HAL_TIM_OC_Init+0x82>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c5ce:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5d0:	4e3a      	ldr	r6, [pc, #232]	; (800c6bc <HAL_TIM_OC_Init+0x100>)
 800c5d2:	69a5      	ldr	r5, [r4, #24]
 800c5d4:	68e0      	ldr	r0, [r4, #12]
 800c5d6:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800c5d8:	2302      	movs	r3, #2
 800c5da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5de:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800c5e0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5e2:	d04c      	beq.n	800c67e <HAL_TIM_OC_Init+0xc2>
 800c5e4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800c5e8:	d058      	beq.n	800c69c <HAL_TIM_OC_Init+0xe0>
 800c5ea:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800c5ee:	42b2      	cmp	r2, r6
 800c5f0:	d02a      	beq.n	800c648 <HAL_TIM_OC_Init+0x8c>
 800c5f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c5f6:	42b2      	cmp	r2, r6
 800c5f8:	d026      	beq.n	800c648 <HAL_TIM_OC_Init+0x8c>
 800c5fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c5fe:	42b2      	cmp	r2, r6
 800c600:	d022      	beq.n	800c648 <HAL_TIM_OC_Init+0x8c>
 800c602:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800c606:	42b2      	cmp	r2, r6
 800c608:	d01e      	beq.n	800c648 <HAL_TIM_OC_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c60a:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800c60e:	42b2      	cmp	r2, r6
 800c610:	d013      	beq.n	800c63a <HAL_TIM_OC_Init+0x7e>
 800c612:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c616:	42b2      	cmp	r2, r6
 800c618:	d00f      	beq.n	800c63a <HAL_TIM_OC_Init+0x7e>
 800c61a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c61e:	42b2      	cmp	r2, r6
 800c620:	d00b      	beq.n	800c63a <HAL_TIM_OC_Init+0x7e>
 800c622:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 800c626:	42b2      	cmp	r2, r6
 800c628:	d007      	beq.n	800c63a <HAL_TIM_OC_Init+0x7e>
 800c62a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c62e:	42b2      	cmp	r2, r6
 800c630:	d003      	beq.n	800c63a <HAL_TIM_OC_Init+0x7e>
 800c632:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c636:	42b2      	cmp	r2, r6
 800c638:	d138      	bne.n	800c6ac <HAL_TIM_OC_Init+0xf0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c63a:	6926      	ldr	r6, [r4, #16]
 800c63c:	e033      	b.n	800c6a6 <HAL_TIM_OC_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 800c63e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800c642:	f7ff ffb9 	bl	800c5b8 <HAL_TIM_OC_MspInit>
 800c646:	e7c2      	b.n	800c5ce <HAL_TIM_OC_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 800c648:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c64a:	4f1d      	ldr	r7, [pc, #116]	; (800c6c0 <HAL_TIM_OC_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c64c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c650:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c652:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c658:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c65a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c65e:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c660:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800c662:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c664:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c666:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c668:	d101      	bne.n	800c66e <HAL_TIM_OC_Init+0xb2>
    TIMx->RCR = Structure->RepetitionCounter;
 800c66a:	6963      	ldr	r3, [r4, #20]
 800c66c:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c66e:	2301      	movs	r3, #1
 800c670:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800c672:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800c674:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800c67a:	2001      	movs	r0, #1
}
 800c67c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800c67e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c680:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c686:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800c688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c68c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c68e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c692:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800c694:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c696:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c698:	6291      	str	r1, [r2, #40]	; 0x28
 800c69a:	e7e6      	b.n	800c66a <HAL_TIM_OC_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 800c69c:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c69e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c6a4:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6aa:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6b0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800c6b2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6b4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c6b6:	6291      	str	r1, [r2, #40]	; 0x28
 800c6b8:	e7d9      	b.n	800c66e <HAL_TIM_OC_Init+0xb2>
 800c6ba:	bf00      	nop
 800c6bc:	40010000 	.word	0x40010000
 800c6c0:	40010400 	.word	0x40010400

0800c6c4 <HAL_TIM_PWM_MspInit>:
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop

0800c6c8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d05c      	beq.n	800c786 <HAL_TIM_PWM_Init+0xbe>
{
 800c6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800c6ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c6d8:	b3bb      	cbz	r3, 800c74a <HAL_TIM_PWM_Init+0x82>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6da:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6dc:	4e3a      	ldr	r6, [pc, #232]	; (800c7c8 <HAL_TIM_PWM_Init+0x100>)
 800c6de:	69a5      	ldr	r5, [r4, #24]
 800c6e0:	68e0      	ldr	r0, [r4, #12]
 800c6e2:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6ea:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800c6ec:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6ee:	d04c      	beq.n	800c78a <HAL_TIM_PWM_Init+0xc2>
 800c6f0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800c6f4:	d058      	beq.n	800c7a8 <HAL_TIM_PWM_Init+0xe0>
 800c6f6:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800c6fa:	42b2      	cmp	r2, r6
 800c6fc:	d02a      	beq.n	800c754 <HAL_TIM_PWM_Init+0x8c>
 800c6fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c702:	42b2      	cmp	r2, r6
 800c704:	d026      	beq.n	800c754 <HAL_TIM_PWM_Init+0x8c>
 800c706:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c70a:	42b2      	cmp	r2, r6
 800c70c:	d022      	beq.n	800c754 <HAL_TIM_PWM_Init+0x8c>
 800c70e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800c712:	42b2      	cmp	r2, r6
 800c714:	d01e      	beq.n	800c754 <HAL_TIM_PWM_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c716:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800c71a:	42b2      	cmp	r2, r6
 800c71c:	d013      	beq.n	800c746 <HAL_TIM_PWM_Init+0x7e>
 800c71e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c722:	42b2      	cmp	r2, r6
 800c724:	d00f      	beq.n	800c746 <HAL_TIM_PWM_Init+0x7e>
 800c726:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c72a:	42b2      	cmp	r2, r6
 800c72c:	d00b      	beq.n	800c746 <HAL_TIM_PWM_Init+0x7e>
 800c72e:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 800c732:	42b2      	cmp	r2, r6
 800c734:	d007      	beq.n	800c746 <HAL_TIM_PWM_Init+0x7e>
 800c736:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c73a:	42b2      	cmp	r2, r6
 800c73c:	d003      	beq.n	800c746 <HAL_TIM_PWM_Init+0x7e>
 800c73e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c742:	42b2      	cmp	r2, r6
 800c744:	d138      	bne.n	800c7b8 <HAL_TIM_PWM_Init+0xf0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c746:	6926      	ldr	r6, [r4, #16]
 800c748:	e033      	b.n	800c7b2 <HAL_TIM_PWM_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 800c74a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800c74e:	f7ff ffb9 	bl	800c6c4 <HAL_TIM_PWM_MspInit>
 800c752:	e7c2      	b.n	800c6da <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 800c754:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c756:	4f1d      	ldr	r7, [pc, #116]	; (800c7cc <HAL_TIM_PWM_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c75c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c75e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c764:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c76a:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c76c:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800c76e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c770:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c772:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c774:	d101      	bne.n	800c77a <HAL_TIM_PWM_Init+0xb2>
    TIMx->RCR = Structure->RepetitionCounter;
 800c776:	6963      	ldr	r3, [r4, #20]
 800c778:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c77a:	2301      	movs	r3, #1
 800c77c:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800c77e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800c780:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800c786:	2001      	movs	r0, #1
}
 800c788:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800c78a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c78c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c78e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c792:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800c794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c798:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c79a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c79e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800c7a0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7a2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c7a4:	6291      	str	r1, [r2, #40]	; 0x28
 800c7a6:	e7e6      	b.n	800c776 <HAL_TIM_PWM_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 800c7a8:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7aa:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c7b0:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7b6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7bc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800c7be:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7c0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c7c2:	6291      	str	r1, [r2, #40]	; 0x28
 800c7c4:	e7d9      	b.n	800c77a <HAL_TIM_PWM_Init+0xb2>
 800c7c6:	bf00      	nop
 800c7c8:	40010000 	.word	0x40010000
 800c7cc:	40010400 	.word	0x40010400

0800c7d0 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	f000 8096 	beq.w	800c902 <HAL_TIM_Encoder_Init+0x132>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c7d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800c7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800c7de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	460d      	mov	r5, r1
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d03f      	beq.n	800c86a <HAL_TIM_Encoder_Init+0x9a>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c7ea:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7ec:	4e56      	ldr	r6, [pc, #344]	; (800c948 <HAL_TIM_Encoder_Init+0x178>)
 800c7ee:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800c7f2:	68e0      	ldr	r0, [r4, #12]
 800c7f4:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c7fc:	689a      	ldr	r2, [r3, #8]
 800c7fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c802:	f022 0207 	bic.w	r2, r2, #7
 800c806:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c808:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 800c80a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c80c:	d07b      	beq.n	800c906 <HAL_TIM_Encoder_Init+0x136>
 800c80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c812:	f000 8088 	beq.w	800c926 <HAL_TIM_Encoder_Init+0x156>
 800c816:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800c81a:	42b3      	cmp	r3, r6
 800c81c:	d02a      	beq.n	800c874 <HAL_TIM_Encoder_Init+0xa4>
 800c81e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c822:	42b3      	cmp	r3, r6
 800c824:	d026      	beq.n	800c874 <HAL_TIM_Encoder_Init+0xa4>
 800c826:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c82a:	42b3      	cmp	r3, r6
 800c82c:	d022      	beq.n	800c874 <HAL_TIM_Encoder_Init+0xa4>
 800c82e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800c832:	42b3      	cmp	r3, r6
 800c834:	d01e      	beq.n	800c874 <HAL_TIM_Encoder_Init+0xa4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c836:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800c83a:	42b3      	cmp	r3, r6
 800c83c:	d013      	beq.n	800c866 <HAL_TIM_Encoder_Init+0x96>
 800c83e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c842:	42b3      	cmp	r3, r6
 800c844:	d00f      	beq.n	800c866 <HAL_TIM_Encoder_Init+0x96>
 800c846:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c84a:	42b3      	cmp	r3, r6
 800c84c:	d00b      	beq.n	800c866 <HAL_TIM_Encoder_Init+0x96>
 800c84e:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 800c852:	42b3      	cmp	r3, r6
 800c854:	d007      	beq.n	800c866 <HAL_TIM_Encoder_Init+0x96>
 800c856:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c85a:	42b3      	cmp	r3, r6
 800c85c:	d003      	beq.n	800c866 <HAL_TIM_Encoder_Init+0x96>
 800c85e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c862:	42b3      	cmp	r3, r6
 800c864:	d167      	bne.n	800c936 <HAL_TIM_Encoder_Init+0x166>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c866:	6926      	ldr	r6, [r4, #16]
 800c868:	e062      	b.n	800c930 <HAL_TIM_Encoder_Init+0x160>
    htim->Lock = HAL_UNLOCKED;
 800c86a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800c86e:	f7fd fbbb 	bl	8009fe8 <HAL_TIM_Encoder_MspInit>
 800c872:	e7ba      	b.n	800c7ea <HAL_TIM_Encoder_Init+0x1a>
    tmpcr1 |= Structure->CounterMode;
 800c874:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c876:	4f35      	ldr	r7, [pc, #212]	; (800c94c <HAL_TIM_Encoder_Init+0x17c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c878:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c87c:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c87e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c880:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c884:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c886:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c88a:	ea42 020c 	orr.w	r2, r2, ip
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c88e:	42bb      	cmp	r3, r7
  TIMx->CR1 = tmpcr1;
 800c890:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c892:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c894:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c896:	d101      	bne.n	800c89c <HAL_TIM_Encoder_Init+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 800c898:	6962      	ldr	r2, [r4, #20]
 800c89a:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c89c:	f04f 0c01 	mov.w	ip, #1
 800c8a0:	f8c3 c014 	str.w	ip, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 800c8a4:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800c8a6:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c8a8:	69af      	ldr	r7, [r5, #24]
 800c8aa:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c8ac:	692a      	ldr	r2, [r5, #16]
  tmpsmcr |= sConfig->EncoderMode;
 800c8ae:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c8b2:	f426 7840 	bic.w	r8, r6, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c8b6:	69ee      	ldr	r6, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c8b8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c8bc:	0112      	lsls	r2, r2, #4
 800c8be:	68ef      	ldr	r7, [r5, #12]
 800c8c0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 800c8c4:	433a      	orrs	r2, r7
 800c8c6:	6a2f      	ldr	r7, [r5, #32]
  tmpccer = htim->Instance->CCER;
 800c8c8:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c8ca:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c8ce:	ea41 0108 	orr.w	r1, r1, r8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c8d2:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c8d6:	696f      	ldr	r7, [r5, #20]
 800c8d8:	686d      	ldr	r5, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c8da:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
 800c8de:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c8e2:	f026 06aa 	bic.w	r6, r6, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c8e6:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800c8ea:	ea40 000e 	orr.w	r0, r0, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c8ee:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c8f0:	4335      	orrs	r5, r6
  htim->Instance->SMCR = tmpsmcr;
 800c8f2:	6098      	str	r0, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800c8f4:	619a      	str	r2, [r3, #24]
  return HAL_OK;
 800c8f6:	2000      	movs	r0, #0
  htim->Instance->CCER = tmpccer;
 800c8f8:	621d      	str	r5, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 800c8fa:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
}
 800c8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800c902:	2001      	movs	r0, #1
}
 800c904:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800c906:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c908:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c90a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c90e:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800c910:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c914:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c916:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c91a:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 800c91e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c920:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c922:	6299      	str	r1, [r3, #40]	; 0x28
 800c924:	e7b8      	b.n	800c898 <HAL_TIM_Encoder_Init+0xc8>
    tmpcr1 |= Structure->CounterMode;
 800c926:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c928:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c92a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c92e:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800c930:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c934:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c93a:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 800c93e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c940:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c942:	6299      	str	r1, [r3, #40]	; 0x28
 800c944:	e7aa      	b.n	800c89c <HAL_TIM_Encoder_Init+0xcc>
 800c946:	bf00      	nop
 800c948:	40010000 	.word	0x40010000
 800c94c:	40010400 	.word	0x40010400

0800c950 <HAL_TIM_Encoder_Start>:
{
 800c950:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 800c952:	b1c1      	cbz	r1, 800c986 <HAL_TIM_Encoder_Start+0x36>
 800c954:	2904      	cmp	r1, #4
 800c956:	d10d      	bne.n	800c974 <HAL_TIM_Encoder_Start+0x24>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c958:	6a1a      	ldr	r2, [r3, #32]
 800c95a:	f022 0210 	bic.w	r2, r2, #16
 800c95e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c960:	6a1a      	ldr	r2, [r3, #32]
 800c962:	f042 0210 	orr.w	r2, r2, #16
 800c966:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	f042 0201 	orr.w	r2, r2, #1
 800c96e:	601a      	str	r2, [r3, #0]
}
 800c970:	2000      	movs	r0, #0
 800c972:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 800c974:	6a1a      	ldr	r2, [r3, #32]
 800c976:	f022 0201 	bic.w	r2, r2, #1
 800c97a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c97c:	6a1a      	ldr	r2, [r3, #32]
 800c97e:	f042 0201 	orr.w	r2, r2, #1
 800c982:	621a      	str	r2, [r3, #32]
 800c984:	e7e8      	b.n	800c958 <HAL_TIM_Encoder_Start+0x8>
  TIMx->CCER &= ~tmp;
 800c986:	6a1a      	ldr	r2, [r3, #32]
 800c988:	f022 0201 	bic.w	r2, r2, #1
 800c98c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c98e:	6a1a      	ldr	r2, [r3, #32]
 800c990:	f042 0201 	orr.w	r2, r2, #1
 800c994:	621a      	str	r2, [r3, #32]
 800c996:	e7e7      	b.n	800c968 <HAL_TIM_Encoder_Start+0x18>

0800c998 <HAL_TIM_Encoder_Stop>:
{
 800c998:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 800c99a:	b1f1      	cbz	r1, 800c9da <HAL_TIM_Encoder_Stop+0x42>
 800c99c:	2904      	cmp	r1, #4
 800c99e:	d115      	bne.n	800c9cc <HAL_TIM_Encoder_Stop+0x34>
  TIMx->CCER &= ~tmp;
 800c9a0:	6a1a      	ldr	r2, [r3, #32]
 800c9a2:	f022 0210 	bic.w	r2, r2, #16
 800c9a6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9a8:	6a1a      	ldr	r2, [r3, #32]
 800c9aa:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 800c9ac:	6a19      	ldr	r1, [r3, #32]
 800c9ae:	f241 1211 	movw	r2, #4369	; 0x1111
 800c9b2:	4211      	tst	r1, r2
 800c9b4:	d108      	bne.n	800c9c8 <HAL_TIM_Encoder_Stop+0x30>
 800c9b6:	6a19      	ldr	r1, [r3, #32]
 800c9b8:	f240 4244 	movw	r2, #1092	; 0x444
 800c9bc:	4211      	tst	r1, r2
 800c9be:	d103      	bne.n	800c9c8 <HAL_TIM_Encoder_Stop+0x30>
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	f022 0201 	bic.w	r2, r2, #1
 800c9c6:	601a      	str	r2, [r3, #0]
}
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 800c9cc:	6a1a      	ldr	r2, [r3, #32]
 800c9ce:	f022 0201 	bic.w	r2, r2, #1
 800c9d2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9d4:	6a1a      	ldr	r2, [r3, #32]
 800c9d6:	621a      	str	r2, [r3, #32]
 800c9d8:	e7e2      	b.n	800c9a0 <HAL_TIM_Encoder_Stop+0x8>
  TIMx->CCER &= ~tmp;
 800c9da:	6a1a      	ldr	r2, [r3, #32]
 800c9dc:	f022 0201 	bic.w	r2, r2, #1
 800c9e0:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9e2:	6a1a      	ldr	r2, [r3, #32]
 800c9e4:	621a      	str	r2, [r3, #32]
 800c9e6:	e7e1      	b.n	800c9ac <HAL_TIM_Encoder_Stop+0x14>

0800c9e8 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800c9e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	f000 809a 	beq.w	800cb26 <HAL_TIM_OC_ConfigChannel+0x13e>
{
 800c9f2:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800c9f4:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800c9f6:	2401      	movs	r4, #1
 800c9f8:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c9fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800ca00:	2a0c      	cmp	r2, #12
 800ca02:	d829      	bhi.n	800ca58 <HAL_TIM_OC_ConfigChannel+0x70>
 800ca04:	e8df f002 	tbb	[pc, r2]
 800ca08:	28282807 	.word	0x28282807
 800ca0c:	28282851 	.word	0x28282851
 800ca10:	28282870 	.word	0x28282870
 800ca14:	31          	.byte	0x31
 800ca15:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ca16:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 800ca18:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca1c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800ca1e:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ca20:	4e5b      	ldr	r6, [pc, #364]	; (800cb90 <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca22:	f025 0501 	bic.w	r5, r5, #1
 800ca26:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800ca28:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800ca2a:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800ca2c:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800ca2e:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ca32:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ca36:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 800ca38:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 800ca3c:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ca40:	f000 8089 	beq.w	800cb56 <HAL_TIM_OC_ConfigChannel+0x16e>
 800ca44:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800ca48:	42b3      	cmp	r3, r6
 800ca4a:	f000 8084 	beq.w	800cb56 <HAL_TIM_OC_ConfigChannel+0x16e>
  TIMx->CCR1 = OC_Config->Pulse;
 800ca4e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800ca50:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ca52:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800ca54:	6359      	str	r1, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800ca56:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 800ca58:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ca60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800ca64:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800ca66:	4618      	mov	r0, r3
}
 800ca68:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca6a:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ca6c:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca70:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca72:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca74:	4e46      	ldr	r6, [pc, #280]	; (800cb90 <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca76:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800ca7a:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800ca7c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800ca7e:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800ca80:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800ca82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca86:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca8a:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ca8c:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca90:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca94:	d049      	beq.n	800cb2a <HAL_TIM_OC_ConfigChannel+0x142>
 800ca96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800ca9a:	42b3      	cmp	r3, r6
 800ca9c:	d045      	beq.n	800cb2a <HAL_TIM_OC_ConfigChannel+0x142>
  TIMx->CCR4 = OC_Config->Pulse;
 800ca9e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800caa0:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800caa2:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800caa4:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800caa6:	621a      	str	r2, [r3, #32]
 800caa8:	e7d6      	b.n	800ca58 <HAL_TIM_OC_ConfigChannel+0x70>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800caaa:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800caac:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800caae:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cab0:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cab2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800cb90 <HAL_TIM_OC_ConfigChannel+0x1a8>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cab6:	f025 0510 	bic.w	r5, r5, #16
 800caba:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800cabc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800cabe:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800cac0:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800cac2:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cac6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800caca:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cacc:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cad0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cad4:	d04c      	beq.n	800cb70 <HAL_TIM_OC_ConfigChannel+0x188>
 800cad6:	4f2f      	ldr	r7, [pc, #188]	; (800cb94 <HAL_TIM_OC_ConfigChannel+0x1ac>)
 800cad8:	42bb      	cmp	r3, r7
 800cada:	d049      	beq.n	800cb70 <HAL_TIM_OC_ConfigChannel+0x188>
  TIMx->CCR2 = OC_Config->Pulse;
 800cadc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800cade:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800cae0:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800cae2:	6399      	str	r1, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800cae4:	621a      	str	r2, [r3, #32]
 800cae6:	e7b7      	b.n	800ca58 <HAL_TIM_OC_ConfigChannel+0x70>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cae8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800caea:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800caec:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800caee:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800caf0:	f8df c09c 	ldr.w	ip, [pc, #156]	; 800cb90 <HAL_TIM_OC_ConfigChannel+0x1a8>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800caf4:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800caf8:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800cafa:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800cafc:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800cafe:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800cb00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cb04:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cb08:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cb0a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800cb0e:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cb12:	d010      	beq.n	800cb36 <HAL_TIM_OC_ConfigChannel+0x14e>
 800cb14:	4f1f      	ldr	r7, [pc, #124]	; (800cb94 <HAL_TIM_OC_ConfigChannel+0x1ac>)
 800cb16:	42bb      	cmp	r3, r7
 800cb18:	d00d      	beq.n	800cb36 <HAL_TIM_OC_ConfigChannel+0x14e>
  TIMx->CCR3 = OC_Config->Pulse;
 800cb1a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800cb1c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800cb1e:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800cb20:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800cb22:	621a      	str	r2, [r3, #32]
 800cb24:	e798      	b.n	800ca58 <HAL_TIM_OC_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 800cb26:	2002      	movs	r0, #2
}
 800cb28:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb2a:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb2c:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb30:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800cb34:	e7b3      	b.n	800ca9e <HAL_TIM_OC_ConfigChannel+0xb6>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cb36:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800cb38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cb3c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cb40:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cb44:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cb48:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 800cb4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cb50:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 800cb54:	e7e1      	b.n	800cb1a <HAL_TIM_OC_ConfigChannel+0x132>
    tmpccer |= OC_Config->OCNPolarity;
 800cb56:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb58:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800cb5c:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb5e:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb62:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb66:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb68:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb6c:	4335      	orrs	r5, r6
 800cb6e:	e76e      	b.n	800ca4e <HAL_TIM_OC_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cb70:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800cb72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cb76:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cb7a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cb7e:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cb82:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 800cb86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cb8a:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 800cb8e:	e7a5      	b.n	800cadc <HAL_TIM_OC_ConfigChannel+0xf4>
 800cb90:	40010000 	.word	0x40010000
 800cb94:	40010400 	.word	0x40010400

0800cb98 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800cb98:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	f000 80cc 	beq.w	800cd3a <HAL_TIM_PWM_ConfigChannel+0x1a2>
{
 800cba2:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800cba4:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800cba6:	2401      	movs	r4, #1
 800cba8:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800cbac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800cbb0:	2a0c      	cmp	r2, #12
 800cbb2:	d835      	bhi.n	800cc20 <HAL_TIM_PWM_ConfigChannel+0x88>
 800cbb4:	e8df f002 	tbb	[pc, r2]
 800cbb8:	34343407 	.word	0x34343407
 800cbbc:	3434346a 	.word	0x3434346a
 800cbc0:	34343496 	.word	0x34343496
 800cbc4:	3d          	.byte	0x3d
 800cbc5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cbc6:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 800cbc8:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbcc:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800cbce:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cbd0:	4e74      	ldr	r6, [pc, #464]	; (800cda4 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbd2:	f025 0501 	bic.w	r5, r5, #1
 800cbd6:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800cbd8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800cbda:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800cbdc:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800cbde:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cbe2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cbe6:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 800cbe8:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 800cbec:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cbf0:	f000 80bb 	beq.w	800cd6a <HAL_TIM_PWM_ConfigChannel+0x1d2>
 800cbf4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cbf8:	42b3      	cmp	r3, r6
 800cbfa:	f000 80b6 	beq.w	800cd6a <HAL_TIM_PWM_ConfigChannel+0x1d2>
  TIMx->CCR1 = OC_Config->Pulse;
 800cbfe:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800cc00:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800cc02:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800cc04:	635e      	str	r6, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800cc06:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cc08:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cc0a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cc0c:	f044 0408 	orr.w	r4, r4, #8
 800cc10:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cc12:	6999      	ldr	r1, [r3, #24]
 800cc14:	f021 0104 	bic.w	r1, r1, #4
 800cc18:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cc1a:	699a      	ldr	r2, [r3, #24]
 800cc1c:	432a      	orrs	r2, r5
 800cc1e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800cc20:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800cc22:	2201      	movs	r2, #1
 800cc24:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800cc28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800cc2c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800cc2e:	4618      	mov	r0, r3
}
 800cc30:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cc32:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cc34:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc38:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc3a:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc3c:	4e59      	ldr	r6, [pc, #356]	; (800cda4 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc3e:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800cc42:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800cc44:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800cc46:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800cc48:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800cc4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cc4e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc52:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cc54:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc58:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc5c:	d06f      	beq.n	800cd3e <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800cc5e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cc62:	42b3      	cmp	r3, r6
 800cc64:	d06b      	beq.n	800cd3e <HAL_TIM_PWM_ConfigChannel+0x1a6>
  TIMx->CCR4 = OC_Config->Pulse;
 800cc66:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800cc68:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800cc6a:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800cc6c:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800cc6e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cc70:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc72:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cc74:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800cc78:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cc7a:	69d9      	ldr	r1, [r3, #28]
 800cc7c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800cc80:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc82:	69da      	ldr	r2, [r3, #28]
 800cc84:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800cc88:	61da      	str	r2, [r3, #28]
      break;
 800cc8a:	e7c9      	b.n	800cc20 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cc8c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc8e:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc90:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc92:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc94:	f8df c10c 	ldr.w	ip, [pc, #268]	; 800cda4 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc98:	f025 0510 	bic.w	r5, r5, #16
 800cc9c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800cc9e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800cca0:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800cca2:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800cca4:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cca8:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ccac:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ccae:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccb2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ccb6:	d065      	beq.n	800cd84 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 800ccb8:	4f3b      	ldr	r7, [pc, #236]	; (800cda8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 800ccba:	42bb      	cmp	r3, r7
 800ccbc:	d062      	beq.n	800cd84 <HAL_TIM_PWM_ConfigChannel+0x1ec>
  TIMx->CCR2 = OC_Config->Pulse;
 800ccbe:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800ccc0:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ccc2:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800ccc4:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800ccc6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ccc8:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ccca:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cccc:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800ccd0:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ccd2:	6999      	ldr	r1, [r3, #24]
 800ccd4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800ccd8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ccda:	699a      	ldr	r2, [r3, #24]
 800ccdc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800cce0:	619a      	str	r2, [r3, #24]
      break;
 800cce2:	e79d      	b.n	800cc20 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cce4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cce6:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cce8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800ccea:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ccec:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800cda4 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ccf0:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800ccf4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800ccf6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800ccf8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800ccfa:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800ccfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd00:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd04:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd06:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800cd0a:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd0e:	d01c      	beq.n	800cd4a <HAL_TIM_PWM_ConfigChannel+0x1b2>
 800cd10:	4f25      	ldr	r7, [pc, #148]	; (800cda8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 800cd12:	42bb      	cmp	r3, r7
 800cd14:	d019      	beq.n	800cd4a <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 800cd16:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800cd18:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800cd1a:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800cd1c:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800cd1e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cd20:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cd22:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cd24:	f044 0408 	orr.w	r4, r4, #8
 800cd28:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cd2a:	69d9      	ldr	r1, [r3, #28]
 800cd2c:	f021 0104 	bic.w	r1, r1, #4
 800cd30:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cd32:	69da      	ldr	r2, [r3, #28]
 800cd34:	432a      	orrs	r2, r5
 800cd36:	61da      	str	r2, [r3, #28]
      break;
 800cd38:	e772      	b.n	800cc20 <HAL_TIM_PWM_ConfigChannel+0x88>
  __HAL_LOCK(htim);
 800cd3a:	2002      	movs	r0, #2
}
 800cd3c:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cd3e:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cd40:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cd44:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800cd48:	e78d      	b.n	800cc66 <HAL_TIM_PWM_ConfigChannel+0xce>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd4a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd50:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd54:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd58:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd5c:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd64:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 800cd68:	e7d5      	b.n	800cd16 <HAL_TIM_PWM_ConfigChannel+0x17e>
    tmpccer |= OC_Config->OCNPolarity;
 800cd6a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800cd6c:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800cd70:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd72:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cd76:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd7a:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd7c:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd80:	4335      	orrs	r5, r6
 800cd82:	e73c      	b.n	800cbfe <HAL_TIM_PWM_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cd84:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800cd86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cd8a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cd8e:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cd92:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cd96:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 800cd9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cd9e:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 800cda2:	e78c      	b.n	800ccbe <HAL_TIM_PWM_ConfigChannel+0x126>
 800cda4:	40010000 	.word	0x40010000
 800cda8:	40010400 	.word	0x40010400

0800cdac <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800cdac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d05a      	beq.n	800ce6a <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 800cdb4:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800cdb6:	6803      	ldr	r3, [r0, #0]
{
 800cdb8:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800cdba:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800cdbe:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800cdc0:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdc2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800cdc6:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 800cdca:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 800cdcc:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 800cdce:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 800cdd2:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800cdd4:	d074      	beq.n	800cec0 <HAL_TIM_ConfigClockSource+0x114>
 800cdd6:	d94a      	bls.n	800ce6e <HAL_TIM_ConfigClockSource+0xc2>
 800cdd8:	2c60      	cmp	r4, #96	; 0x60
 800cdda:	d02d      	beq.n	800ce38 <HAL_TIM_ConfigClockSource+0x8c>
 800cddc:	d956      	bls.n	800ce8c <HAL_TIM_ConfigClockSource+0xe0>
 800cdde:	2c70      	cmp	r4, #112	; 0x70
 800cde0:	d01a      	beq.n	800ce18 <HAL_TIM_ConfigClockSource+0x6c>
 800cde2:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800cde6:	d10e      	bne.n	800ce06 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cde8:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 800cdec:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800cdee:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cdf0:	432a      	orrs	r2, r5
 800cdf2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdf6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cdfa:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800cdfc:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cdfe:	689a      	ldr	r2, [r3, #8]
 800ce00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce04:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800ce06:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800ce08:	2201      	movs	r2, #1
 800ce0a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ce0e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800ce12:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800ce14:	4618      	mov	r0, r3
}
 800ce16:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce18:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 800ce1c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800ce1e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce20:	432a      	orrs	r2, r5
 800ce22:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce26:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce2a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800ce2c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800ce2e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce30:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800ce34:	609a      	str	r2, [r3, #8]
      break;
 800ce36:	e7e6      	b.n	800ce06 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce38:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce3a:	684d      	ldr	r5, [r1, #4]
 800ce3c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce3e:	f024 0410 	bic.w	r4, r4, #16
 800ce42:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce44:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800ce46:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce48:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce50:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce54:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800ce58:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce5a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800ce5c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce62:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800ce66:	609a      	str	r2, [r3, #8]
 800ce68:	e7cd      	b.n	800ce06 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800ce6a:	2002      	movs	r0, #2
}
 800ce6c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800ce6e:	2c10      	cmp	r4, #16
 800ce70:	d004      	beq.n	800ce7c <HAL_TIM_ConfigClockSource+0xd0>
 800ce72:	d93d      	bls.n	800cef0 <HAL_TIM_ConfigClockSource+0x144>
 800ce74:	2c20      	cmp	r4, #32
 800ce76:	d001      	beq.n	800ce7c <HAL_TIM_ConfigClockSource+0xd0>
 800ce78:	2c30      	cmp	r4, #48	; 0x30
 800ce7a:	d1c4      	bne.n	800ce06 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 800ce7c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce7e:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce86:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 800ce88:	609c      	str	r4, [r3, #8]
 800ce8a:	e7bc      	b.n	800ce06 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800ce8c:	2c50      	cmp	r4, #80	; 0x50
 800ce8e:	d1ba      	bne.n	800ce06 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 800ce90:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce92:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce94:	684c      	ldr	r4, [r1, #4]
 800ce96:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce98:	f026 0601 	bic.w	r6, r6, #1
 800ce9c:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce9e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cea0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cea4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cea8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800ceac:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800ceae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ceb0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800ceb2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ceb4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ceb8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800cebc:	609a      	str	r2, [r3, #8]
 800cebe:	e7a2      	b.n	800ce06 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 800cec0:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cec2:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cec4:	684c      	ldr	r4, [r1, #4]
 800cec6:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cec8:	f026 0601 	bic.w	r6, r6, #1
 800cecc:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cece:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ced0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ced4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ced8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800cedc:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800cede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cee0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800cee2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cee4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cee8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800ceec:	609a      	str	r2, [r3, #8]
 800ceee:	e78a      	b.n	800ce06 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800cef0:	2c00      	cmp	r4, #0
 800cef2:	d0c3      	beq.n	800ce7c <HAL_TIM_ConfigClockSource+0xd0>
 800cef4:	e787      	b.n	800ce06 <HAL_TIM_ConfigClockSource+0x5a>
 800cef6:	bf00      	nop

0800cef8 <HAL_TIM_OC_DelayElapsedCallback>:
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop

0800cefc <HAL_TIM_IC_CaptureCallback>:
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop

0800cf00 <HAL_TIM_PWM_PulseFinishedCallback>:
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop

0800cf04 <HAL_TIM_TriggerCallback>:
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop

0800cf08 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cf08:	6803      	ldr	r3, [r0, #0]
 800cf0a:	691a      	ldr	r2, [r3, #16]
 800cf0c:	0791      	lsls	r1, r2, #30
{
 800cf0e:	b510      	push	{r4, lr}
 800cf10:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cf12:	d502      	bpl.n	800cf1a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cf14:	68da      	ldr	r2, [r3, #12]
 800cf16:	0792      	lsls	r2, r2, #30
 800cf18:	d45f      	bmi.n	800cfda <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cf1a:	691a      	ldr	r2, [r3, #16]
 800cf1c:	0750      	lsls	r0, r2, #29
 800cf1e:	d502      	bpl.n	800cf26 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cf20:	68da      	ldr	r2, [r3, #12]
 800cf22:	0751      	lsls	r1, r2, #29
 800cf24:	d446      	bmi.n	800cfb4 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cf26:	691a      	ldr	r2, [r3, #16]
 800cf28:	0712      	lsls	r2, r2, #28
 800cf2a:	d502      	bpl.n	800cf32 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cf2c:	68da      	ldr	r2, [r3, #12]
 800cf2e:	0710      	lsls	r0, r2, #28
 800cf30:	d42e      	bmi.n	800cf90 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf32:	691a      	ldr	r2, [r3, #16]
 800cf34:	06d2      	lsls	r2, r2, #27
 800cf36:	d502      	bpl.n	800cf3e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cf38:	68da      	ldr	r2, [r3, #12]
 800cf3a:	06d0      	lsls	r0, r2, #27
 800cf3c:	d418      	bmi.n	800cf70 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cf3e:	691a      	ldr	r2, [r3, #16]
 800cf40:	07d1      	lsls	r1, r2, #31
 800cf42:	d502      	bpl.n	800cf4a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cf44:	68da      	ldr	r2, [r3, #12]
 800cf46:	07d2      	lsls	r2, r2, #31
 800cf48:	d45d      	bmi.n	800d006 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cf4a:	691a      	ldr	r2, [r3, #16]
 800cf4c:	0610      	lsls	r0, r2, #24
 800cf4e:	d502      	bpl.n	800cf56 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cf50:	68da      	ldr	r2, [r3, #12]
 800cf52:	0611      	lsls	r1, r2, #24
 800cf54:	d45f      	bmi.n	800d016 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cf56:	691a      	ldr	r2, [r3, #16]
 800cf58:	0652      	lsls	r2, r2, #25
 800cf5a:	d502      	bpl.n	800cf62 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cf5c:	68da      	ldr	r2, [r3, #12]
 800cf5e:	0650      	lsls	r0, r2, #25
 800cf60:	d461      	bmi.n	800d026 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cf62:	691a      	ldr	r2, [r3, #16]
 800cf64:	0691      	lsls	r1, r2, #26
 800cf66:	d502      	bpl.n	800cf6e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cf68:	68da      	ldr	r2, [r3, #12]
 800cf6a:	0692      	lsls	r2, r2, #26
 800cf6c:	d443      	bmi.n	800cff6 <HAL_TIM_IRQHandler+0xee>
}
 800cf6e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cf70:	f06f 0210 	mvn.w	r2, #16
 800cf74:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf76:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf78:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf7a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf7e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800cf80:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf82:	d064      	beq.n	800d04e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800cf84:	f7ff ffba 	bl	800cefc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf88:	2200      	movs	r2, #0
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	7722      	strb	r2, [r4, #28]
 800cf8e:	e7d6      	b.n	800cf3e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf90:	f06f 0208 	mvn.w	r2, #8
 800cf94:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf96:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf98:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf9a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf9c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800cf9e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cfa0:	d152      	bne.n	800d048 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfa2:	f7ff ffa9 	bl	800cef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f7ff ffaa 	bl	800cf00 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfac:	2200      	movs	r2, #0
 800cfae:	6823      	ldr	r3, [r4, #0]
 800cfb0:	7722      	strb	r2, [r4, #28]
 800cfb2:	e7be      	b.n	800cf32 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cfb4:	f06f 0204 	mvn.w	r2, #4
 800cfb8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cfba:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cfbc:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cfbe:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cfc2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800cfc4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cfc6:	d13c      	bne.n	800d042 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfc8:	f7ff ff96 	bl	800cef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f7ff ff97 	bl	800cf00 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	7722      	strb	r2, [r4, #28]
 800cfd8:	e7a5      	b.n	800cf26 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cfda:	f06f 0202 	mvn.w	r2, #2
 800cfde:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cfe0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cfe2:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cfe4:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cfe6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cfe8:	d025      	beq.n	800d036 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800cfea:	f7ff ff87 	bl	800cefc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfee:	2200      	movs	r2, #0
 800cff0:	6823      	ldr	r3, [r4, #0]
 800cff2:	7722      	strb	r2, [r4, #28]
 800cff4:	e791      	b.n	800cf1a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cff6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800cffa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cffc:	611a      	str	r2, [r3, #16]
}
 800cffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800d002:	f000 b89b 	b.w	800d13c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d006:	f06f 0201 	mvn.w	r2, #1
 800d00a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800d00c:	4620      	mov	r0, r4
 800d00e:	f7fc f975 	bl	80092fc <HAL_TIM_PeriodElapsedCallback>
 800d012:	6823      	ldr	r3, [r4, #0]
 800d014:	e799      	b.n	800cf4a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d016:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d01a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800d01c:	4620      	mov	r0, r4
 800d01e:	f000 f88f 	bl	800d140 <HAL_TIMEx_BreakCallback>
 800d022:	6823      	ldr	r3, [r4, #0]
 800d024:	e797      	b.n	800cf56 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d026:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d02a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800d02c:	4620      	mov	r0, r4
 800d02e:	f7ff ff69 	bl	800cf04 <HAL_TIM_TriggerCallback>
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	e795      	b.n	800cf62 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d036:	f7ff ff5f 	bl	800cef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d03a:	4620      	mov	r0, r4
 800d03c:	f7ff ff60 	bl	800cf00 <HAL_TIM_PWM_PulseFinishedCallback>
 800d040:	e7d5      	b.n	800cfee <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800d042:	f7ff ff5b 	bl	800cefc <HAL_TIM_IC_CaptureCallback>
 800d046:	e7c4      	b.n	800cfd2 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800d048:	f7ff ff58 	bl	800cefc <HAL_TIM_IC_CaptureCallback>
 800d04c:	e7ae      	b.n	800cfac <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d04e:	f7ff ff53 	bl	800cef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d052:	4620      	mov	r0, r4
 800d054:	f7ff ff54 	bl	800cf00 <HAL_TIM_PWM_PulseFinishedCallback>
 800d058:	e796      	b.n	800cf88 <HAL_TIM_IRQHandler+0x80>
 800d05a:	bf00      	nop

0800d05c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d05c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d060:	2b01      	cmp	r3, #1
 800d062:	d03a      	beq.n	800d0da <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d064:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d066:	2202      	movs	r2, #2
{
 800d068:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 800d06a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800d06e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d070:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d072:	4d1b      	ldr	r5, [pc, #108]	; (800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 800d074:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800d076:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d07a:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d07c:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 800d07e:	f04f 0601 	mov.w	r6, #1
 800d082:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 800d086:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d088:	d019      	beq.n	800d0be <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800d08a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d08e:	d016      	beq.n	800d0be <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800d090:	4a14      	ldr	r2, [pc, #80]	; (800d0e4 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d013      	beq.n	800d0be <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800d096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d00f      	beq.n	800d0be <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800d09e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d00b      	beq.n	800d0be <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800d0a6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d007      	beq.n	800d0be <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800d0ae:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d003      	beq.n	800d0be <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800d0b6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d104      	bne.n	800d0c8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0be:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d0c0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0c4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0c6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800d0c8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d0d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800d0d4:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800d0d6:	4618      	mov	r0, r3
}
 800d0d8:	4770      	bx	lr
  __HAL_LOCK(htim);
 800d0da:	2002      	movs	r0, #2
}
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	40010000 	.word	0x40010000
 800d0e4:	40000400 	.word	0x40000400

0800d0e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d021      	beq.n	800d134 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 800d0f0:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d0f2:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d0f6:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d0fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0fe:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d104:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d10a:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d10e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d114:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d11a:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d11c:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d11e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d120:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d124:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 800d126:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800d128:	6453      	str	r3, [r2, #68]	; 0x44

  return HAL_OK;
}
 800d12a:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 800d12c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 800d130:	4608      	mov	r0, r1
 800d132:	4770      	bx	lr
  __HAL_LOCK(htim);
 800d134:	2302      	movs	r3, #2
}
 800d136:	4618      	mov	r0, r3
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop

0800d13c <HAL_TIMEx_CommutCallback>:
 800d13c:	4770      	bx	lr
 800d13e:	bf00      	nop

0800d140 <HAL_TIMEx_BreakCallback>:
 800d140:	4770      	bx	lr
 800d142:	bf00      	nop

0800d144 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d144:	2800      	cmp	r0, #0
 800d146:	f000 8093 	beq.w	800d270 <HAL_UART_Init+0x12c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d14a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800d14e:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800d150:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d154:	4604      	mov	r4, r0
 800d156:	2b00      	cmp	r3, #0
 800d158:	f000 8085 	beq.w	800d266 <HAL_UART_Init+0x122>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d15c:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d15e:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800d160:	2224      	movs	r2, #36	; 0x24
 800d162:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800d166:	68d8      	ldr	r0, [r3, #12]
 800d168:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d16c:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800d170:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d172:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d174:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d176:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800d17a:	4329      	orrs	r1, r5
 800d17c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800d17e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d180:	6965      	ldr	r5, [r4, #20]
 800d182:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 800d184:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d188:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800d18a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d18e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800d190:	430a      	orrs	r2, r1
 800d192:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d194:	695a      	ldr	r2, [r3, #20]
 800d196:	69a1      	ldr	r1, [r4, #24]
 800d198:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d19c:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d19e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d1a2:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d1a4:	4a36      	ldr	r2, [pc, #216]	; (800d280 <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1a6:	d034      	beq.n	800d212 <HAL_UART_Init+0xce>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d063      	beq.n	800d274 <HAL_UART_Init+0x130>
 800d1ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d05f      	beq.n	800d274 <HAL_UART_Init+0x130>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d1b4:	f7fe fcf8 	bl	800bba8 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d1b8:	6863      	ldr	r3, [r4, #4]
 800d1ba:	4d32      	ldr	r5, [pc, #200]	; (800d284 <HAL_UART_Init+0x140>)
 800d1bc:	2219      	movs	r2, #25
 800d1be:	fba0 0102 	umull	r0, r1, r0, r2
 800d1c2:	009a      	lsls	r2, r3, #2
 800d1c4:	0f9b      	lsrs	r3, r3, #30
 800d1c6:	f7fb fc97 	bl	8008af8 <__aeabi_uldivmod>
 800d1ca:	fba5 2100 	umull	r2, r1, r5, r0
 800d1ce:	0949      	lsrs	r1, r1, #5
 800d1d0:	2264      	movs	r2, #100	; 0x64
 800d1d2:	fb02 0211 	mls	r2, r2, r1, r0
 800d1d6:	0112      	lsls	r2, r2, #4
 800d1d8:	3232      	adds	r2, #50	; 0x32
 800d1da:	6823      	ldr	r3, [r4, #0]
 800d1dc:	fba5 0202 	umull	r0, r2, r5, r2
 800d1e0:	0109      	lsls	r1, r1, #4
 800d1e2:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 800d1e6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d1e8:	691a      	ldr	r2, [r3, #16]
 800d1ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d1ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1f0:	695a      	ldr	r2, [r3, #20]
 800d1f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d1f6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800d1f8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1fa:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800d1fc:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800d1fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d202:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800d204:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d206:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d208:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d20c:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 800d210:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d212:	4293      	cmp	r3, r2
 800d214:	d031      	beq.n	800d27a <HAL_UART_Init+0x136>
 800d216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d02d      	beq.n	800d27a <HAL_UART_Init+0x136>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d21e:	f7fe fcc3 	bl	800bba8 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d222:	6862      	ldr	r2, [r4, #4]
 800d224:	2600      	movs	r6, #0
 800d226:	1892      	adds	r2, r2, r2
 800d228:	f04f 0119 	mov.w	r1, #25
 800d22c:	eb46 0306 	adc.w	r3, r6, r6
 800d230:	fba0 0101 	umull	r0, r1, r0, r1
 800d234:	f7fb fc60 	bl	8008af8 <__aeabi_uldivmod>
 800d238:	4e12      	ldr	r6, [pc, #72]	; (800d284 <HAL_UART_Init+0x140>)
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	fba6 2100 	umull	r2, r1, r6, r0
 800d240:	094d      	lsrs	r5, r1, #5
 800d242:	2264      	movs	r2, #100	; 0x64
 800d244:	fb02 0215 	mls	r2, r2, r5, r0
 800d248:	00d2      	lsls	r2, r2, #3
 800d24a:	3232      	adds	r2, #50	; 0x32
 800d24c:	fba6 1202 	umull	r1, r2, r6, r2
 800d250:	0952      	lsrs	r2, r2, #5
 800d252:	f002 0107 	and.w	r1, r2, #7
 800d256:	0052      	lsls	r2, r2, #1
 800d258:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800d25c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800d260:	440a      	add	r2, r1
 800d262:	609a      	str	r2, [r3, #8]
 800d264:	e7c0      	b.n	800d1e8 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 800d266:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800d26a:	f7fc ff91 	bl	800a190 <HAL_UART_MspInit>
 800d26e:	e775      	b.n	800d15c <HAL_UART_Init+0x18>
    return HAL_ERROR;
 800d270:	2001      	movs	r0, #1
}
 800d272:	4770      	bx	lr
      pclk = HAL_RCC_GetPCLK2Freq();
 800d274:	f7fe fca8 	bl	800bbc8 <HAL_RCC_GetPCLK2Freq>
 800d278:	e79e      	b.n	800d1b8 <HAL_UART_Init+0x74>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d27a:	f7fe fca5 	bl	800bbc8 <HAL_RCC_GetPCLK2Freq>
 800d27e:	e7d0      	b.n	800d222 <HAL_UART_Init+0xde>
 800d280:	40011000 	.word	0x40011000
 800d284:	51eb851f 	.word	0x51eb851f

0800d288 <HAL_UART_Transmit>:
{
 800d288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d28c:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800d28e:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800d292:	2920      	cmp	r1, #32
{
 800d294:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 800d296:	d132      	bne.n	800d2fe <HAL_UART_Transmit+0x76>
    if ((pData == NULL) || (Size == 0U))
 800d298:	2e00      	cmp	r6, #0
 800d29a:	d034      	beq.n	800d306 <HAL_UART_Transmit+0x7e>
 800d29c:	9201      	str	r2, [sp, #4]
 800d29e:	2a00      	cmp	r2, #0
 800d2a0:	d031      	beq.n	800d306 <HAL_UART_Transmit+0x7e>
 800d2a2:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 800d2a4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	d027      	beq.n	800d2fe <HAL_UART_Transmit+0x76>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2ae:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 800d2b2:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d2b4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2b6:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 800d2ba:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d2be:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800d2c2:	f7fd fbb3 	bl	800aa2c <HAL_GetTick>
    huart->TxXferSize = Size;
 800d2c6:	9a01      	ldr	r2, [sp, #4]
 800d2c8:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800d2ca:	84e2      	strh	r2, [r4, #38]	; 0x26
 800d2cc:	6822      	ldr	r2, [r4, #0]
    __HAL_UNLOCK(huart);
 800d2ce:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 800d2d2:	4605      	mov	r5, r0
    while (huart->TxXferCount > 0U)
 800d2d4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d03b      	beq.n	800d354 <HAL_UART_Transmit+0xcc>
      huart->TxXferCount--;
 800d2dc:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d2de:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 800d2e0:	3801      	subs	r0, #1
 800d2e2:	b280      	uxth	r0, r0
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d2e4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 800d2e8:	84e0      	strh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d2ea:	d01b      	beq.n	800d324 <HAL_UART_Transmit+0x9c>
 800d2ec:	1c78      	adds	r0, r7, #1
 800d2ee:	d13b      	bne.n	800d368 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2f0:	6810      	ldr	r0, [r2, #0]
 800d2f2:	0601      	lsls	r1, r0, #24
 800d2f4:	d5fc      	bpl.n	800d2f0 <HAL_UART_Transmit+0x68>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800d2f6:	7833      	ldrb	r3, [r6, #0]
 800d2f8:	6053      	str	r3, [r2, #4]
 800d2fa:	3601      	adds	r6, #1
 800d2fc:	e7ea      	b.n	800d2d4 <HAL_UART_Transmit+0x4c>
    return HAL_BUSY;
 800d2fe:	2002      	movs	r0, #2
}
 800d300:	b002      	add	sp, #8
 800d302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800d306:	2001      	movs	r0, #1
}
 800d308:	b002      	add	sp, #8
 800d30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d30e:	6813      	ldr	r3, [r2, #0]
 800d310:	061b      	lsls	r3, r3, #24
 800d312:	d40c      	bmi.n	800d32e <HAL_UART_Transmit+0xa6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d314:	2f00      	cmp	r7, #0
 800d316:	d031      	beq.n	800d37c <HAL_UART_Transmit+0xf4>
 800d318:	f7fd fb88 	bl	800aa2c <HAL_GetTick>
 800d31c:	1b40      	subs	r0, r0, r5
 800d31e:	4287      	cmp	r7, r0
 800d320:	6822      	ldr	r2, [r4, #0]
 800d322:	d32b      	bcc.n	800d37c <HAL_UART_Transmit+0xf4>
 800d324:	1c78      	adds	r0, r7, #1
 800d326:	d1f2      	bne.n	800d30e <HAL_UART_Transmit+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d328:	6810      	ldr	r0, [r2, #0]
 800d32a:	0601      	lsls	r1, r0, #24
 800d32c:	d5fc      	bpl.n	800d328 <HAL_UART_Transmit+0xa0>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800d32e:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800d330:	6921      	ldr	r1, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800d332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d336:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800d338:	2900      	cmp	r1, #0
 800d33a:	d1de      	bne.n	800d2fa <HAL_UART_Transmit+0x72>
          pData += 2U;
 800d33c:	3602      	adds	r6, #2
 800d33e:	e7c9      	b.n	800d2d4 <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d340:	6813      	ldr	r3, [r2, #0]
 800d342:	065b      	lsls	r3, r3, #25
 800d344:	d40b      	bmi.n	800d35e <HAL_UART_Transmit+0xd6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d346:	b1cf      	cbz	r7, 800d37c <HAL_UART_Transmit+0xf4>
 800d348:	f7fd fb70 	bl	800aa2c <HAL_GetTick>
 800d34c:	1b40      	subs	r0, r0, r5
 800d34e:	4287      	cmp	r7, r0
 800d350:	6822      	ldr	r2, [r4, #0]
 800d352:	d313      	bcc.n	800d37c <HAL_UART_Transmit+0xf4>
 800d354:	1c78      	adds	r0, r7, #1
 800d356:	d1f3      	bne.n	800d340 <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d358:	6813      	ldr	r3, [r2, #0]
 800d35a:	0659      	lsls	r1, r3, #25
 800d35c:	d5fc      	bpl.n	800d358 <HAL_UART_Transmit+0xd0>
    huart->gState = HAL_UART_STATE_READY;
 800d35e:	2320      	movs	r3, #32
 800d360:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800d364:	2000      	movs	r0, #0
 800d366:	e7cb      	b.n	800d300 <HAL_UART_Transmit+0x78>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d368:	6813      	ldr	r3, [r2, #0]
 800d36a:	061b      	lsls	r3, r3, #24
 800d36c:	d4c3      	bmi.n	800d2f6 <HAL_UART_Transmit+0x6e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d36e:	b12f      	cbz	r7, 800d37c <HAL_UART_Transmit+0xf4>
 800d370:	f7fd fb5c 	bl	800aa2c <HAL_GetTick>
 800d374:	1b40      	subs	r0, r0, r5
 800d376:	4287      	cmp	r7, r0
 800d378:	6822      	ldr	r2, [r4, #0]
 800d37a:	d2b7      	bcs.n	800d2ec <HAL_UART_Transmit+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d37c:	68d3      	ldr	r3, [r2, #12]
 800d37e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d382:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d384:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800d386:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d388:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 800d38c:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 800d38e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d390:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800d392:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 800d396:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 800d39a:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 800d39e:	b002      	add	sp, #8
 800d3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d3a4 <HAL_UART_Receive>:
{
 800d3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a8:	460e      	mov	r6, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 800d3aa:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
 800d3ae:	2920      	cmp	r1, #32
{
 800d3b0:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 800d3b2:	d136      	bne.n	800d422 <HAL_UART_Receive+0x7e>
    if ((pData == NULL) || (Size == 0U))
 800d3b4:	2e00      	cmp	r6, #0
 800d3b6:	d038      	beq.n	800d42a <HAL_UART_Receive+0x86>
 800d3b8:	9201      	str	r2, [sp, #4]
 800d3ba:	2a00      	cmp	r2, #0
 800d3bc:	d035      	beq.n	800d42a <HAL_UART_Receive+0x86>
 800d3be:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 800d3c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	d02b      	beq.n	800d422 <HAL_UART_Receive+0x7e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3ca:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 800d3ce:	2101      	movs	r1, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d3d0:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3d2:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 800d3d6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d3da:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 800d3de:	f7fd fb25 	bl	800aa2c <HAL_GetTick>
    huart->RxXferSize = Size;
 800d3e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 800d3e4:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 800d3e8:	4605      	mov	r5, r0
    huart->RxXferSize = Size;
 800d3ea:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800d3ec:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800d3ee:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800d3f0:	b280      	uxth	r0, r0
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d05b      	beq.n	800d4ae <HAL_UART_Receive+0x10a>
      huart->RxXferCount--;
 800d3f6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d3f8:	68a3      	ldr	r3, [r4, #8]
      huart->RxXferCount--;
 800d3fa:	3a01      	subs	r2, #1
 800d3fc:	b292      	uxth	r2, r2
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d3fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->RxXferCount--;
 800d402:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d404:	d01f      	beq.n	800d446 <HAL_UART_Receive+0xa2>
 800d406:	1c79      	adds	r1, r7, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d408:	6820      	ldr	r0, [r4, #0]
 800d40a:	d12a      	bne.n	800d462 <HAL_UART_Receive+0xbe>
 800d40c:	6802      	ldr	r2, [r0, #0]
 800d40e:	0692      	lsls	r2, r2, #26
 800d410:	d5fc      	bpl.n	800d40c <HAL_UART_Receive+0x68>
        if (huart->Init.Parity == UART_PARITY_NONE)
 800d412:	6923      	ldr	r3, [r4, #16]
 800d414:	1c72      	adds	r2, r6, #1
 800d416:	2b00      	cmp	r3, #0
 800d418:	d13f      	bne.n	800d49a <HAL_UART_Receive+0xf6>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d41a:	6843      	ldr	r3, [r0, #4]
 800d41c:	7033      	strb	r3, [r6, #0]
 800d41e:	4616      	mov	r6, r2
 800d420:	e7e5      	b.n	800d3ee <HAL_UART_Receive+0x4a>
    return HAL_BUSY;
 800d422:	2002      	movs	r0, #2
}
 800d424:	b002      	add	sp, #8
 800d426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800d42a:	2001      	movs	r0, #1
}
 800d42c:	b002      	add	sp, #8
 800d42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	0690      	lsls	r0, r2, #26
 800d436:	d40c      	bmi.n	800d452 <HAL_UART_Receive+0xae>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d438:	2f00      	cmp	r7, #0
 800d43a:	d03d      	beq.n	800d4b8 <HAL_UART_Receive+0x114>
 800d43c:	f7fd faf6 	bl	800aa2c <HAL_GetTick>
 800d440:	1b40      	subs	r0, r0, r5
 800d442:	4287      	cmp	r7, r0
 800d444:	d337      	bcc.n	800d4b6 <HAL_UART_Receive+0x112>
 800d446:	1c79      	adds	r1, r7, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d448:	6823      	ldr	r3, [r4, #0]
 800d44a:	d1f2      	bne.n	800d432 <HAL_UART_Receive+0x8e>
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	0692      	lsls	r2, r2, #26
 800d450:	d5fc      	bpl.n	800d44c <HAL_UART_Receive+0xa8>
        if (huart->Init.Parity == UART_PARITY_NONE)
 800d452:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d454:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800d456:	bb32      	cbnz	r2, 800d4a6 <HAL_UART_Receive+0x102>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d45c:	f826 3b02 	strh.w	r3, [r6], #2
 800d460:	e7c5      	b.n	800d3ee <HAL_UART_Receive+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d462:	6803      	ldr	r3, [r0, #0]
 800d464:	069b      	lsls	r3, r3, #26
 800d466:	d4d4      	bmi.n	800d412 <HAL_UART_Receive+0x6e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d468:	b12f      	cbz	r7, 800d476 <HAL_UART_Receive+0xd2>
 800d46a:	f7fd fadf 	bl	800aa2c <HAL_GetTick>
 800d46e:	1b40      	subs	r0, r0, r5
 800d470:	4287      	cmp	r7, r0
 800d472:	d2c8      	bcs.n	800d406 <HAL_UART_Receive+0x62>
 800d474:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d476:	68c3      	ldr	r3, [r0, #12]
 800d478:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d47c:	60c3      	str	r3, [r0, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d47e:	6943      	ldr	r3, [r0, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800d480:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d482:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 800d486:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d488:	6143      	str	r3, [r0, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800d48a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 800d48e:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800d490:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 800d494:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 800d498:	e7c4      	b.n	800d424 <HAL_UART_Receive+0x80>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d49a:	6843      	ldr	r3, [r0, #4]
 800d49c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4a0:	7033      	strb	r3, [r6, #0]
 800d4a2:	4616      	mov	r6, r2
 800d4a4:	e7a3      	b.n	800d3ee <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	f826 3b01 	strh.w	r3, [r6], #1
 800d4ac:	e79f      	b.n	800d3ee <HAL_UART_Receive+0x4a>
    huart->RxState = HAL_UART_STATE_READY;
 800d4ae:	2320      	movs	r3, #32
 800d4b0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 800d4b4:	e7b6      	b.n	800d424 <HAL_UART_Receive+0x80>
 800d4b6:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d4b8:	68da      	ldr	r2, [r3, #12]
 800d4ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d4be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4c0:	695a      	ldr	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800d4c2:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4c4:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 800d4c8:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4ca:	615a      	str	r2, [r3, #20]
          return HAL_TIMEOUT;
 800d4cc:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 800d4ce:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 800d4d2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 800d4d6:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 800d4da:	e7a3      	b.n	800d424 <HAL_UART_Receive+0x80>

0800d4dc <round>:
 800d4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4de:	ec57 6b10 	vmov	r6, r7, d0
 800d4e2:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800d4e6:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800d4ea:	2c13      	cmp	r4, #19
 800d4ec:	463b      	mov	r3, r7
 800d4ee:	463d      	mov	r5, r7
 800d4f0:	dc17      	bgt.n	800d522 <round+0x46>
 800d4f2:	2c00      	cmp	r4, #0
 800d4f4:	da09      	bge.n	800d50a <round+0x2e>
 800d4f6:	3401      	adds	r4, #1
 800d4f8:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800d4fc:	d103      	bne.n	800d506 <round+0x2a>
 800d4fe:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d502:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d506:	2100      	movs	r1, #0
 800d508:	e02c      	b.n	800d564 <round+0x88>
 800d50a:	4a18      	ldr	r2, [pc, #96]	; (800d56c <round+0x90>)
 800d50c:	4122      	asrs	r2, r4
 800d50e:	4217      	tst	r7, r2
 800d510:	d100      	bne.n	800d514 <round+0x38>
 800d512:	b19e      	cbz	r6, 800d53c <round+0x60>
 800d514:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d518:	4123      	asrs	r3, r4
 800d51a:	442b      	add	r3, r5
 800d51c:	ea23 0302 	bic.w	r3, r3, r2
 800d520:	e7f1      	b.n	800d506 <round+0x2a>
 800d522:	2c33      	cmp	r4, #51	; 0x33
 800d524:	dd0d      	ble.n	800d542 <round+0x66>
 800d526:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d52a:	d107      	bne.n	800d53c <round+0x60>
 800d52c:	4630      	mov	r0, r6
 800d52e:	4639      	mov	r1, r7
 800d530:	ee10 2a10 	vmov	r2, s0
 800d534:	f7fa fde2 	bl	80080fc <__adddf3>
 800d538:	4606      	mov	r6, r0
 800d53a:	460f      	mov	r7, r1
 800d53c:	ec47 6b10 	vmov	d0, r6, r7
 800d540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d542:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800d546:	f04f 30ff 	mov.w	r0, #4294967295
 800d54a:	40d0      	lsrs	r0, r2
 800d54c:	4206      	tst	r6, r0
 800d54e:	d0f5      	beq.n	800d53c <round+0x60>
 800d550:	2201      	movs	r2, #1
 800d552:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d556:	fa02 f404 	lsl.w	r4, r2, r4
 800d55a:	1931      	adds	r1, r6, r4
 800d55c:	bf28      	it	cs
 800d55e:	189b      	addcs	r3, r3, r2
 800d560:	ea21 0100 	bic.w	r1, r1, r0
 800d564:	461f      	mov	r7, r3
 800d566:	460e      	mov	r6, r1
 800d568:	e7e8      	b.n	800d53c <round+0x60>
 800d56a:	bf00      	nop
 800d56c:	000fffff 	.word	0x000fffff

0800d570 <__errno>:
 800d570:	4b01      	ldr	r3, [pc, #4]	; (800d578 <__errno+0x8>)
 800d572:	6818      	ldr	r0, [r3, #0]
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	2000002c 	.word	0x2000002c

0800d57c <__sflush_r>:
 800d57c:	898a      	ldrh	r2, [r1, #12]
 800d57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d582:	4605      	mov	r5, r0
 800d584:	0710      	lsls	r0, r2, #28
 800d586:	460c      	mov	r4, r1
 800d588:	d458      	bmi.n	800d63c <__sflush_r+0xc0>
 800d58a:	684b      	ldr	r3, [r1, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	dc05      	bgt.n	800d59c <__sflush_r+0x20>
 800d590:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d592:	2b00      	cmp	r3, #0
 800d594:	dc02      	bgt.n	800d59c <__sflush_r+0x20>
 800d596:	2000      	movs	r0, #0
 800d598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d59c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d59e:	2e00      	cmp	r6, #0
 800d5a0:	d0f9      	beq.n	800d596 <__sflush_r+0x1a>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5a8:	682f      	ldr	r7, [r5, #0]
 800d5aa:	6a21      	ldr	r1, [r4, #32]
 800d5ac:	602b      	str	r3, [r5, #0]
 800d5ae:	d032      	beq.n	800d616 <__sflush_r+0x9a>
 800d5b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5b2:	89a3      	ldrh	r3, [r4, #12]
 800d5b4:	075a      	lsls	r2, r3, #29
 800d5b6:	d505      	bpl.n	800d5c4 <__sflush_r+0x48>
 800d5b8:	6863      	ldr	r3, [r4, #4]
 800d5ba:	1ac0      	subs	r0, r0, r3
 800d5bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5be:	b10b      	cbz	r3, 800d5c4 <__sflush_r+0x48>
 800d5c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5c2:	1ac0      	subs	r0, r0, r3
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5ca:	6a21      	ldr	r1, [r4, #32]
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	47b0      	blx	r6
 800d5d0:	1c43      	adds	r3, r0, #1
 800d5d2:	89a3      	ldrh	r3, [r4, #12]
 800d5d4:	d106      	bne.n	800d5e4 <__sflush_r+0x68>
 800d5d6:	6829      	ldr	r1, [r5, #0]
 800d5d8:	291d      	cmp	r1, #29
 800d5da:	d848      	bhi.n	800d66e <__sflush_r+0xf2>
 800d5dc:	4a29      	ldr	r2, [pc, #164]	; (800d684 <__sflush_r+0x108>)
 800d5de:	40ca      	lsrs	r2, r1
 800d5e0:	07d6      	lsls	r6, r2, #31
 800d5e2:	d544      	bpl.n	800d66e <__sflush_r+0xf2>
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	6062      	str	r2, [r4, #4]
 800d5e8:	04d9      	lsls	r1, r3, #19
 800d5ea:	6922      	ldr	r2, [r4, #16]
 800d5ec:	6022      	str	r2, [r4, #0]
 800d5ee:	d504      	bpl.n	800d5fa <__sflush_r+0x7e>
 800d5f0:	1c42      	adds	r2, r0, #1
 800d5f2:	d101      	bne.n	800d5f8 <__sflush_r+0x7c>
 800d5f4:	682b      	ldr	r3, [r5, #0]
 800d5f6:	b903      	cbnz	r3, 800d5fa <__sflush_r+0x7e>
 800d5f8:	6560      	str	r0, [r4, #84]	; 0x54
 800d5fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5fc:	602f      	str	r7, [r5, #0]
 800d5fe:	2900      	cmp	r1, #0
 800d600:	d0c9      	beq.n	800d596 <__sflush_r+0x1a>
 800d602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d606:	4299      	cmp	r1, r3
 800d608:	d002      	beq.n	800d610 <__sflush_r+0x94>
 800d60a:	4628      	mov	r0, r5
 800d60c:	f000 f9cc 	bl	800d9a8 <_free_r>
 800d610:	2000      	movs	r0, #0
 800d612:	6360      	str	r0, [r4, #52]	; 0x34
 800d614:	e7c0      	b.n	800d598 <__sflush_r+0x1c>
 800d616:	2301      	movs	r3, #1
 800d618:	4628      	mov	r0, r5
 800d61a:	47b0      	blx	r6
 800d61c:	1c41      	adds	r1, r0, #1
 800d61e:	d1c8      	bne.n	800d5b2 <__sflush_r+0x36>
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d0c5      	beq.n	800d5b2 <__sflush_r+0x36>
 800d626:	2b1d      	cmp	r3, #29
 800d628:	d001      	beq.n	800d62e <__sflush_r+0xb2>
 800d62a:	2b16      	cmp	r3, #22
 800d62c:	d101      	bne.n	800d632 <__sflush_r+0xb6>
 800d62e:	602f      	str	r7, [r5, #0]
 800d630:	e7b1      	b.n	800d596 <__sflush_r+0x1a>
 800d632:	89a3      	ldrh	r3, [r4, #12]
 800d634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d638:	81a3      	strh	r3, [r4, #12]
 800d63a:	e7ad      	b.n	800d598 <__sflush_r+0x1c>
 800d63c:	690f      	ldr	r7, [r1, #16]
 800d63e:	2f00      	cmp	r7, #0
 800d640:	d0a9      	beq.n	800d596 <__sflush_r+0x1a>
 800d642:	0793      	lsls	r3, r2, #30
 800d644:	680e      	ldr	r6, [r1, #0]
 800d646:	bf08      	it	eq
 800d648:	694b      	ldreq	r3, [r1, #20]
 800d64a:	600f      	str	r7, [r1, #0]
 800d64c:	bf18      	it	ne
 800d64e:	2300      	movne	r3, #0
 800d650:	eba6 0807 	sub.w	r8, r6, r7
 800d654:	608b      	str	r3, [r1, #8]
 800d656:	f1b8 0f00 	cmp.w	r8, #0
 800d65a:	dd9c      	ble.n	800d596 <__sflush_r+0x1a>
 800d65c:	4643      	mov	r3, r8
 800d65e:	463a      	mov	r2, r7
 800d660:	6a21      	ldr	r1, [r4, #32]
 800d662:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d664:	4628      	mov	r0, r5
 800d666:	47b0      	blx	r6
 800d668:	2800      	cmp	r0, #0
 800d66a:	dc06      	bgt.n	800d67a <__sflush_r+0xfe>
 800d66c:	89a3      	ldrh	r3, [r4, #12]
 800d66e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d672:	81a3      	strh	r3, [r4, #12]
 800d674:	f04f 30ff 	mov.w	r0, #4294967295
 800d678:	e78e      	b.n	800d598 <__sflush_r+0x1c>
 800d67a:	4407      	add	r7, r0
 800d67c:	eba8 0800 	sub.w	r8, r8, r0
 800d680:	e7e9      	b.n	800d656 <__sflush_r+0xda>
 800d682:	bf00      	nop
 800d684:	20400001 	.word	0x20400001

0800d688 <_fflush_r>:
 800d688:	b538      	push	{r3, r4, r5, lr}
 800d68a:	690b      	ldr	r3, [r1, #16]
 800d68c:	4605      	mov	r5, r0
 800d68e:	460c      	mov	r4, r1
 800d690:	b1db      	cbz	r3, 800d6ca <_fflush_r+0x42>
 800d692:	b118      	cbz	r0, 800d69c <_fflush_r+0x14>
 800d694:	6983      	ldr	r3, [r0, #24]
 800d696:	b90b      	cbnz	r3, 800d69c <_fflush_r+0x14>
 800d698:	f000 f860 	bl	800d75c <__sinit>
 800d69c:	4b0c      	ldr	r3, [pc, #48]	; (800d6d0 <_fflush_r+0x48>)
 800d69e:	429c      	cmp	r4, r3
 800d6a0:	d109      	bne.n	800d6b6 <_fflush_r+0x2e>
 800d6a2:	686c      	ldr	r4, [r5, #4]
 800d6a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6a8:	b17b      	cbz	r3, 800d6ca <_fflush_r+0x42>
 800d6aa:	4621      	mov	r1, r4
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6b2:	f7ff bf63 	b.w	800d57c <__sflush_r>
 800d6b6:	4b07      	ldr	r3, [pc, #28]	; (800d6d4 <_fflush_r+0x4c>)
 800d6b8:	429c      	cmp	r4, r3
 800d6ba:	d101      	bne.n	800d6c0 <_fflush_r+0x38>
 800d6bc:	68ac      	ldr	r4, [r5, #8]
 800d6be:	e7f1      	b.n	800d6a4 <_fflush_r+0x1c>
 800d6c0:	4b05      	ldr	r3, [pc, #20]	; (800d6d8 <_fflush_r+0x50>)
 800d6c2:	429c      	cmp	r4, r3
 800d6c4:	bf08      	it	eq
 800d6c6:	68ec      	ldreq	r4, [r5, #12]
 800d6c8:	e7ec      	b.n	800d6a4 <_fflush_r+0x1c>
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	bd38      	pop	{r3, r4, r5, pc}
 800d6ce:	bf00      	nop
 800d6d0:	08011c40 	.word	0x08011c40
 800d6d4:	08011c60 	.word	0x08011c60
 800d6d8:	08011c20 	.word	0x08011c20

0800d6dc <std>:
 800d6dc:	2300      	movs	r3, #0
 800d6de:	b510      	push	{r4, lr}
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	e9c0 3300 	strd	r3, r3, [r0]
 800d6e6:	6083      	str	r3, [r0, #8]
 800d6e8:	8181      	strh	r1, [r0, #12]
 800d6ea:	6643      	str	r3, [r0, #100]	; 0x64
 800d6ec:	81c2      	strh	r2, [r0, #14]
 800d6ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d6f2:	6183      	str	r3, [r0, #24]
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	2208      	movs	r2, #8
 800d6f8:	305c      	adds	r0, #92	; 0x5c
 800d6fa:	f000 f94c 	bl	800d996 <memset>
 800d6fe:	4b05      	ldr	r3, [pc, #20]	; (800d714 <std+0x38>)
 800d700:	6263      	str	r3, [r4, #36]	; 0x24
 800d702:	4b05      	ldr	r3, [pc, #20]	; (800d718 <std+0x3c>)
 800d704:	62a3      	str	r3, [r4, #40]	; 0x28
 800d706:	4b05      	ldr	r3, [pc, #20]	; (800d71c <std+0x40>)
 800d708:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d70a:	4b05      	ldr	r3, [pc, #20]	; (800d720 <std+0x44>)
 800d70c:	6224      	str	r4, [r4, #32]
 800d70e:	6323      	str	r3, [r4, #48]	; 0x30
 800d710:	bd10      	pop	{r4, pc}
 800d712:	bf00      	nop
 800d714:	0800eb81 	.word	0x0800eb81
 800d718:	0800eba3 	.word	0x0800eba3
 800d71c:	0800ebdb 	.word	0x0800ebdb
 800d720:	0800ebff 	.word	0x0800ebff

0800d724 <_cleanup_r>:
 800d724:	4901      	ldr	r1, [pc, #4]	; (800d72c <_cleanup_r+0x8>)
 800d726:	f000 b885 	b.w	800d834 <_fwalk_reent>
 800d72a:	bf00      	nop
 800d72c:	0800d689 	.word	0x0800d689

0800d730 <__sfmoreglue>:
 800d730:	b570      	push	{r4, r5, r6, lr}
 800d732:	1e4a      	subs	r2, r1, #1
 800d734:	2568      	movs	r5, #104	; 0x68
 800d736:	4355      	muls	r5, r2
 800d738:	460e      	mov	r6, r1
 800d73a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d73e:	f000 f981 	bl	800da44 <_malloc_r>
 800d742:	4604      	mov	r4, r0
 800d744:	b140      	cbz	r0, 800d758 <__sfmoreglue+0x28>
 800d746:	2100      	movs	r1, #0
 800d748:	e9c0 1600 	strd	r1, r6, [r0]
 800d74c:	300c      	adds	r0, #12
 800d74e:	60a0      	str	r0, [r4, #8]
 800d750:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d754:	f000 f91f 	bl	800d996 <memset>
 800d758:	4620      	mov	r0, r4
 800d75a:	bd70      	pop	{r4, r5, r6, pc}

0800d75c <__sinit>:
 800d75c:	6983      	ldr	r3, [r0, #24]
 800d75e:	b510      	push	{r4, lr}
 800d760:	4604      	mov	r4, r0
 800d762:	bb33      	cbnz	r3, 800d7b2 <__sinit+0x56>
 800d764:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d768:	6503      	str	r3, [r0, #80]	; 0x50
 800d76a:	4b12      	ldr	r3, [pc, #72]	; (800d7b4 <__sinit+0x58>)
 800d76c:	4a12      	ldr	r2, [pc, #72]	; (800d7b8 <__sinit+0x5c>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	6282      	str	r2, [r0, #40]	; 0x28
 800d772:	4298      	cmp	r0, r3
 800d774:	bf04      	itt	eq
 800d776:	2301      	moveq	r3, #1
 800d778:	6183      	streq	r3, [r0, #24]
 800d77a:	f000 f81f 	bl	800d7bc <__sfp>
 800d77e:	6060      	str	r0, [r4, #4]
 800d780:	4620      	mov	r0, r4
 800d782:	f000 f81b 	bl	800d7bc <__sfp>
 800d786:	60a0      	str	r0, [r4, #8]
 800d788:	4620      	mov	r0, r4
 800d78a:	f000 f817 	bl	800d7bc <__sfp>
 800d78e:	2200      	movs	r2, #0
 800d790:	60e0      	str	r0, [r4, #12]
 800d792:	2104      	movs	r1, #4
 800d794:	6860      	ldr	r0, [r4, #4]
 800d796:	f7ff ffa1 	bl	800d6dc <std>
 800d79a:	2201      	movs	r2, #1
 800d79c:	2109      	movs	r1, #9
 800d79e:	68a0      	ldr	r0, [r4, #8]
 800d7a0:	f7ff ff9c 	bl	800d6dc <std>
 800d7a4:	2202      	movs	r2, #2
 800d7a6:	2112      	movs	r1, #18
 800d7a8:	68e0      	ldr	r0, [r4, #12]
 800d7aa:	f7ff ff97 	bl	800d6dc <std>
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	61a3      	str	r3, [r4, #24]
 800d7b2:	bd10      	pop	{r4, pc}
 800d7b4:	08011c80 	.word	0x08011c80
 800d7b8:	0800d725 	.word	0x0800d725

0800d7bc <__sfp>:
 800d7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7be:	4b1b      	ldr	r3, [pc, #108]	; (800d82c <__sfp+0x70>)
 800d7c0:	681e      	ldr	r6, [r3, #0]
 800d7c2:	69b3      	ldr	r3, [r6, #24]
 800d7c4:	4607      	mov	r7, r0
 800d7c6:	b913      	cbnz	r3, 800d7ce <__sfp+0x12>
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	f7ff ffc7 	bl	800d75c <__sinit>
 800d7ce:	3648      	adds	r6, #72	; 0x48
 800d7d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	d503      	bpl.n	800d7e0 <__sfp+0x24>
 800d7d8:	6833      	ldr	r3, [r6, #0]
 800d7da:	b133      	cbz	r3, 800d7ea <__sfp+0x2e>
 800d7dc:	6836      	ldr	r6, [r6, #0]
 800d7de:	e7f7      	b.n	800d7d0 <__sfp+0x14>
 800d7e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d7e4:	b16d      	cbz	r5, 800d802 <__sfp+0x46>
 800d7e6:	3468      	adds	r4, #104	; 0x68
 800d7e8:	e7f4      	b.n	800d7d4 <__sfp+0x18>
 800d7ea:	2104      	movs	r1, #4
 800d7ec:	4638      	mov	r0, r7
 800d7ee:	f7ff ff9f 	bl	800d730 <__sfmoreglue>
 800d7f2:	6030      	str	r0, [r6, #0]
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	d1f1      	bne.n	800d7dc <__sfp+0x20>
 800d7f8:	230c      	movs	r3, #12
 800d7fa:	603b      	str	r3, [r7, #0]
 800d7fc:	4604      	mov	r4, r0
 800d7fe:	4620      	mov	r0, r4
 800d800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d802:	4b0b      	ldr	r3, [pc, #44]	; (800d830 <__sfp+0x74>)
 800d804:	6665      	str	r5, [r4, #100]	; 0x64
 800d806:	e9c4 5500 	strd	r5, r5, [r4]
 800d80a:	60a5      	str	r5, [r4, #8]
 800d80c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d810:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d814:	2208      	movs	r2, #8
 800d816:	4629      	mov	r1, r5
 800d818:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d81c:	f000 f8bb 	bl	800d996 <memset>
 800d820:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d824:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d828:	e7e9      	b.n	800d7fe <__sfp+0x42>
 800d82a:	bf00      	nop
 800d82c:	08011c80 	.word	0x08011c80
 800d830:	ffff0001 	.word	0xffff0001

0800d834 <_fwalk_reent>:
 800d834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d838:	4680      	mov	r8, r0
 800d83a:	4689      	mov	r9, r1
 800d83c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d840:	2600      	movs	r6, #0
 800d842:	b914      	cbnz	r4, 800d84a <_fwalk_reent+0x16>
 800d844:	4630      	mov	r0, r6
 800d846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d84a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d84e:	3f01      	subs	r7, #1
 800d850:	d501      	bpl.n	800d856 <_fwalk_reent+0x22>
 800d852:	6824      	ldr	r4, [r4, #0]
 800d854:	e7f5      	b.n	800d842 <_fwalk_reent+0xe>
 800d856:	89ab      	ldrh	r3, [r5, #12]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d907      	bls.n	800d86c <_fwalk_reent+0x38>
 800d85c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d860:	3301      	adds	r3, #1
 800d862:	d003      	beq.n	800d86c <_fwalk_reent+0x38>
 800d864:	4629      	mov	r1, r5
 800d866:	4640      	mov	r0, r8
 800d868:	47c8      	blx	r9
 800d86a:	4306      	orrs	r6, r0
 800d86c:	3568      	adds	r5, #104	; 0x68
 800d86e:	e7ee      	b.n	800d84e <_fwalk_reent+0x1a>

0800d870 <__libc_init_array>:
 800d870:	b570      	push	{r4, r5, r6, lr}
 800d872:	4e0d      	ldr	r6, [pc, #52]	; (800d8a8 <__libc_init_array+0x38>)
 800d874:	4c0d      	ldr	r4, [pc, #52]	; (800d8ac <__libc_init_array+0x3c>)
 800d876:	1ba4      	subs	r4, r4, r6
 800d878:	10a4      	asrs	r4, r4, #2
 800d87a:	2500      	movs	r5, #0
 800d87c:	42a5      	cmp	r5, r4
 800d87e:	d109      	bne.n	800d894 <__libc_init_array+0x24>
 800d880:	4e0b      	ldr	r6, [pc, #44]	; (800d8b0 <__libc_init_array+0x40>)
 800d882:	4c0c      	ldr	r4, [pc, #48]	; (800d8b4 <__libc_init_array+0x44>)
 800d884:	f004 f92c 	bl	8011ae0 <_init>
 800d888:	1ba4      	subs	r4, r4, r6
 800d88a:	10a4      	asrs	r4, r4, #2
 800d88c:	2500      	movs	r5, #0
 800d88e:	42a5      	cmp	r5, r4
 800d890:	d105      	bne.n	800d89e <__libc_init_array+0x2e>
 800d892:	bd70      	pop	{r4, r5, r6, pc}
 800d894:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d898:	4798      	blx	r3
 800d89a:	3501      	adds	r5, #1
 800d89c:	e7ee      	b.n	800d87c <__libc_init_array+0xc>
 800d89e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8a2:	4798      	blx	r3
 800d8a4:	3501      	adds	r5, #1
 800d8a6:	e7f2      	b.n	800d88e <__libc_init_array+0x1e>
 800d8a8:	08011f40 	.word	0x08011f40
 800d8ac:	08011f40 	.word	0x08011f40
 800d8b0:	08011f40 	.word	0x08011f40
 800d8b4:	08011f44 	.word	0x08011f44

0800d8b8 <__swhatbuf_r>:
 800d8b8:	b570      	push	{r4, r5, r6, lr}
 800d8ba:	460e      	mov	r6, r1
 800d8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8c0:	2900      	cmp	r1, #0
 800d8c2:	b096      	sub	sp, #88	; 0x58
 800d8c4:	4614      	mov	r4, r2
 800d8c6:	461d      	mov	r5, r3
 800d8c8:	da07      	bge.n	800d8da <__swhatbuf_r+0x22>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	602b      	str	r3, [r5, #0]
 800d8ce:	89b3      	ldrh	r3, [r6, #12]
 800d8d0:	061a      	lsls	r2, r3, #24
 800d8d2:	d410      	bmi.n	800d8f6 <__swhatbuf_r+0x3e>
 800d8d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8d8:	e00e      	b.n	800d8f8 <__swhatbuf_r+0x40>
 800d8da:	466a      	mov	r2, sp
 800d8dc:	f002 ff68 	bl	80107b0 <_fstat_r>
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	dbf2      	blt.n	800d8ca <__swhatbuf_r+0x12>
 800d8e4:	9a01      	ldr	r2, [sp, #4]
 800d8e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d8ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d8ee:	425a      	negs	r2, r3
 800d8f0:	415a      	adcs	r2, r3
 800d8f2:	602a      	str	r2, [r5, #0]
 800d8f4:	e7ee      	b.n	800d8d4 <__swhatbuf_r+0x1c>
 800d8f6:	2340      	movs	r3, #64	; 0x40
 800d8f8:	2000      	movs	r0, #0
 800d8fa:	6023      	str	r3, [r4, #0]
 800d8fc:	b016      	add	sp, #88	; 0x58
 800d8fe:	bd70      	pop	{r4, r5, r6, pc}

0800d900 <__smakebuf_r>:
 800d900:	898b      	ldrh	r3, [r1, #12]
 800d902:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d904:	079d      	lsls	r5, r3, #30
 800d906:	4606      	mov	r6, r0
 800d908:	460c      	mov	r4, r1
 800d90a:	d507      	bpl.n	800d91c <__smakebuf_r+0x1c>
 800d90c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d910:	6023      	str	r3, [r4, #0]
 800d912:	6123      	str	r3, [r4, #16]
 800d914:	2301      	movs	r3, #1
 800d916:	6163      	str	r3, [r4, #20]
 800d918:	b002      	add	sp, #8
 800d91a:	bd70      	pop	{r4, r5, r6, pc}
 800d91c:	ab01      	add	r3, sp, #4
 800d91e:	466a      	mov	r2, sp
 800d920:	f7ff ffca 	bl	800d8b8 <__swhatbuf_r>
 800d924:	9900      	ldr	r1, [sp, #0]
 800d926:	4605      	mov	r5, r0
 800d928:	4630      	mov	r0, r6
 800d92a:	f000 f88b 	bl	800da44 <_malloc_r>
 800d92e:	b948      	cbnz	r0, 800d944 <__smakebuf_r+0x44>
 800d930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d934:	059a      	lsls	r2, r3, #22
 800d936:	d4ef      	bmi.n	800d918 <__smakebuf_r+0x18>
 800d938:	f023 0303 	bic.w	r3, r3, #3
 800d93c:	f043 0302 	orr.w	r3, r3, #2
 800d940:	81a3      	strh	r3, [r4, #12]
 800d942:	e7e3      	b.n	800d90c <__smakebuf_r+0xc>
 800d944:	4b0d      	ldr	r3, [pc, #52]	; (800d97c <__smakebuf_r+0x7c>)
 800d946:	62b3      	str	r3, [r6, #40]	; 0x28
 800d948:	89a3      	ldrh	r3, [r4, #12]
 800d94a:	6020      	str	r0, [r4, #0]
 800d94c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d950:	81a3      	strh	r3, [r4, #12]
 800d952:	9b00      	ldr	r3, [sp, #0]
 800d954:	6163      	str	r3, [r4, #20]
 800d956:	9b01      	ldr	r3, [sp, #4]
 800d958:	6120      	str	r0, [r4, #16]
 800d95a:	b15b      	cbz	r3, 800d974 <__smakebuf_r+0x74>
 800d95c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d960:	4630      	mov	r0, r6
 800d962:	f003 fa5d 	bl	8010e20 <_isatty_r>
 800d966:	b128      	cbz	r0, 800d974 <__smakebuf_r+0x74>
 800d968:	89a3      	ldrh	r3, [r4, #12]
 800d96a:	f023 0303 	bic.w	r3, r3, #3
 800d96e:	f043 0301 	orr.w	r3, r3, #1
 800d972:	81a3      	strh	r3, [r4, #12]
 800d974:	89a3      	ldrh	r3, [r4, #12]
 800d976:	431d      	orrs	r5, r3
 800d978:	81a5      	strh	r5, [r4, #12]
 800d97a:	e7cd      	b.n	800d918 <__smakebuf_r+0x18>
 800d97c:	0800d725 	.word	0x0800d725

0800d980 <memcpy>:
 800d980:	b510      	push	{r4, lr}
 800d982:	1e43      	subs	r3, r0, #1
 800d984:	440a      	add	r2, r1
 800d986:	4291      	cmp	r1, r2
 800d988:	d100      	bne.n	800d98c <memcpy+0xc>
 800d98a:	bd10      	pop	{r4, pc}
 800d98c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d990:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d994:	e7f7      	b.n	800d986 <memcpy+0x6>

0800d996 <memset>:
 800d996:	4402      	add	r2, r0
 800d998:	4603      	mov	r3, r0
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d100      	bne.n	800d9a0 <memset+0xa>
 800d99e:	4770      	bx	lr
 800d9a0:	f803 1b01 	strb.w	r1, [r3], #1
 800d9a4:	e7f9      	b.n	800d99a <memset+0x4>
	...

0800d9a8 <_free_r>:
 800d9a8:	b538      	push	{r3, r4, r5, lr}
 800d9aa:	4605      	mov	r5, r0
 800d9ac:	2900      	cmp	r1, #0
 800d9ae:	d045      	beq.n	800da3c <_free_r+0x94>
 800d9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9b4:	1f0c      	subs	r4, r1, #4
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	bfb8      	it	lt
 800d9ba:	18e4      	addlt	r4, r4, r3
 800d9bc:	f003 fa99 	bl	8010ef2 <__malloc_lock>
 800d9c0:	4a1f      	ldr	r2, [pc, #124]	; (800da40 <_free_r+0x98>)
 800d9c2:	6813      	ldr	r3, [r2, #0]
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	b933      	cbnz	r3, 800d9d6 <_free_r+0x2e>
 800d9c8:	6063      	str	r3, [r4, #4]
 800d9ca:	6014      	str	r4, [r2, #0]
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9d2:	f003 ba8f 	b.w	8010ef4 <__malloc_unlock>
 800d9d6:	42a3      	cmp	r3, r4
 800d9d8:	d90c      	bls.n	800d9f4 <_free_r+0x4c>
 800d9da:	6821      	ldr	r1, [r4, #0]
 800d9dc:	1862      	adds	r2, r4, r1
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	bf04      	itt	eq
 800d9e2:	681a      	ldreq	r2, [r3, #0]
 800d9e4:	685b      	ldreq	r3, [r3, #4]
 800d9e6:	6063      	str	r3, [r4, #4]
 800d9e8:	bf04      	itt	eq
 800d9ea:	1852      	addeq	r2, r2, r1
 800d9ec:	6022      	streq	r2, [r4, #0]
 800d9ee:	6004      	str	r4, [r0, #0]
 800d9f0:	e7ec      	b.n	800d9cc <_free_r+0x24>
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	685a      	ldr	r2, [r3, #4]
 800d9f6:	b10a      	cbz	r2, 800d9fc <_free_r+0x54>
 800d9f8:	42a2      	cmp	r2, r4
 800d9fa:	d9fa      	bls.n	800d9f2 <_free_r+0x4a>
 800d9fc:	6819      	ldr	r1, [r3, #0]
 800d9fe:	1858      	adds	r0, r3, r1
 800da00:	42a0      	cmp	r0, r4
 800da02:	d10b      	bne.n	800da1c <_free_r+0x74>
 800da04:	6820      	ldr	r0, [r4, #0]
 800da06:	4401      	add	r1, r0
 800da08:	1858      	adds	r0, r3, r1
 800da0a:	4282      	cmp	r2, r0
 800da0c:	6019      	str	r1, [r3, #0]
 800da0e:	d1dd      	bne.n	800d9cc <_free_r+0x24>
 800da10:	6810      	ldr	r0, [r2, #0]
 800da12:	6852      	ldr	r2, [r2, #4]
 800da14:	605a      	str	r2, [r3, #4]
 800da16:	4401      	add	r1, r0
 800da18:	6019      	str	r1, [r3, #0]
 800da1a:	e7d7      	b.n	800d9cc <_free_r+0x24>
 800da1c:	d902      	bls.n	800da24 <_free_r+0x7c>
 800da1e:	230c      	movs	r3, #12
 800da20:	602b      	str	r3, [r5, #0]
 800da22:	e7d3      	b.n	800d9cc <_free_r+0x24>
 800da24:	6820      	ldr	r0, [r4, #0]
 800da26:	1821      	adds	r1, r4, r0
 800da28:	428a      	cmp	r2, r1
 800da2a:	bf04      	itt	eq
 800da2c:	6811      	ldreq	r1, [r2, #0]
 800da2e:	6852      	ldreq	r2, [r2, #4]
 800da30:	6062      	str	r2, [r4, #4]
 800da32:	bf04      	itt	eq
 800da34:	1809      	addeq	r1, r1, r0
 800da36:	6021      	streq	r1, [r4, #0]
 800da38:	605c      	str	r4, [r3, #4]
 800da3a:	e7c7      	b.n	800d9cc <_free_r+0x24>
 800da3c:	bd38      	pop	{r3, r4, r5, pc}
 800da3e:	bf00      	nop
 800da40:	200004d0 	.word	0x200004d0

0800da44 <_malloc_r>:
 800da44:	b570      	push	{r4, r5, r6, lr}
 800da46:	1ccd      	adds	r5, r1, #3
 800da48:	f025 0503 	bic.w	r5, r5, #3
 800da4c:	3508      	adds	r5, #8
 800da4e:	2d0c      	cmp	r5, #12
 800da50:	bf38      	it	cc
 800da52:	250c      	movcc	r5, #12
 800da54:	2d00      	cmp	r5, #0
 800da56:	4606      	mov	r6, r0
 800da58:	db01      	blt.n	800da5e <_malloc_r+0x1a>
 800da5a:	42a9      	cmp	r1, r5
 800da5c:	d903      	bls.n	800da66 <_malloc_r+0x22>
 800da5e:	230c      	movs	r3, #12
 800da60:	6033      	str	r3, [r6, #0]
 800da62:	2000      	movs	r0, #0
 800da64:	bd70      	pop	{r4, r5, r6, pc}
 800da66:	f003 fa44 	bl	8010ef2 <__malloc_lock>
 800da6a:	4a21      	ldr	r2, [pc, #132]	; (800daf0 <_malloc_r+0xac>)
 800da6c:	6814      	ldr	r4, [r2, #0]
 800da6e:	4621      	mov	r1, r4
 800da70:	b991      	cbnz	r1, 800da98 <_malloc_r+0x54>
 800da72:	4c20      	ldr	r4, [pc, #128]	; (800daf4 <_malloc_r+0xb0>)
 800da74:	6823      	ldr	r3, [r4, #0]
 800da76:	b91b      	cbnz	r3, 800da80 <_malloc_r+0x3c>
 800da78:	4630      	mov	r0, r6
 800da7a:	f001 f84b 	bl	800eb14 <_sbrk_r>
 800da7e:	6020      	str	r0, [r4, #0]
 800da80:	4629      	mov	r1, r5
 800da82:	4630      	mov	r0, r6
 800da84:	f001 f846 	bl	800eb14 <_sbrk_r>
 800da88:	1c43      	adds	r3, r0, #1
 800da8a:	d124      	bne.n	800dad6 <_malloc_r+0x92>
 800da8c:	230c      	movs	r3, #12
 800da8e:	6033      	str	r3, [r6, #0]
 800da90:	4630      	mov	r0, r6
 800da92:	f003 fa2f 	bl	8010ef4 <__malloc_unlock>
 800da96:	e7e4      	b.n	800da62 <_malloc_r+0x1e>
 800da98:	680b      	ldr	r3, [r1, #0]
 800da9a:	1b5b      	subs	r3, r3, r5
 800da9c:	d418      	bmi.n	800dad0 <_malloc_r+0x8c>
 800da9e:	2b0b      	cmp	r3, #11
 800daa0:	d90f      	bls.n	800dac2 <_malloc_r+0x7e>
 800daa2:	600b      	str	r3, [r1, #0]
 800daa4:	50cd      	str	r5, [r1, r3]
 800daa6:	18cc      	adds	r4, r1, r3
 800daa8:	4630      	mov	r0, r6
 800daaa:	f003 fa23 	bl	8010ef4 <__malloc_unlock>
 800daae:	f104 000b 	add.w	r0, r4, #11
 800dab2:	1d23      	adds	r3, r4, #4
 800dab4:	f020 0007 	bic.w	r0, r0, #7
 800dab8:	1ac3      	subs	r3, r0, r3
 800daba:	d0d3      	beq.n	800da64 <_malloc_r+0x20>
 800dabc:	425a      	negs	r2, r3
 800dabe:	50e2      	str	r2, [r4, r3]
 800dac0:	e7d0      	b.n	800da64 <_malloc_r+0x20>
 800dac2:	428c      	cmp	r4, r1
 800dac4:	684b      	ldr	r3, [r1, #4]
 800dac6:	bf16      	itet	ne
 800dac8:	6063      	strne	r3, [r4, #4]
 800daca:	6013      	streq	r3, [r2, #0]
 800dacc:	460c      	movne	r4, r1
 800dace:	e7eb      	b.n	800daa8 <_malloc_r+0x64>
 800dad0:	460c      	mov	r4, r1
 800dad2:	6849      	ldr	r1, [r1, #4]
 800dad4:	e7cc      	b.n	800da70 <_malloc_r+0x2c>
 800dad6:	1cc4      	adds	r4, r0, #3
 800dad8:	f024 0403 	bic.w	r4, r4, #3
 800dadc:	42a0      	cmp	r0, r4
 800dade:	d005      	beq.n	800daec <_malloc_r+0xa8>
 800dae0:	1a21      	subs	r1, r4, r0
 800dae2:	4630      	mov	r0, r6
 800dae4:	f001 f816 	bl	800eb14 <_sbrk_r>
 800dae8:	3001      	adds	r0, #1
 800daea:	d0cf      	beq.n	800da8c <_malloc_r+0x48>
 800daec:	6025      	str	r5, [r4, #0]
 800daee:	e7db      	b.n	800daa8 <_malloc_r+0x64>
 800daf0:	200004d0 	.word	0x200004d0
 800daf4:	200004d4 	.word	0x200004d4

0800daf8 <__sfputc_r>:
 800daf8:	6893      	ldr	r3, [r2, #8]
 800dafa:	3b01      	subs	r3, #1
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	b410      	push	{r4}
 800db00:	6093      	str	r3, [r2, #8]
 800db02:	da08      	bge.n	800db16 <__sfputc_r+0x1e>
 800db04:	6994      	ldr	r4, [r2, #24]
 800db06:	42a3      	cmp	r3, r4
 800db08:	db01      	blt.n	800db0e <__sfputc_r+0x16>
 800db0a:	290a      	cmp	r1, #10
 800db0c:	d103      	bne.n	800db16 <__sfputc_r+0x1e>
 800db0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db12:	f001 bf27 	b.w	800f964 <__swbuf_r>
 800db16:	6813      	ldr	r3, [r2, #0]
 800db18:	1c58      	adds	r0, r3, #1
 800db1a:	6010      	str	r0, [r2, #0]
 800db1c:	7019      	strb	r1, [r3, #0]
 800db1e:	4608      	mov	r0, r1
 800db20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db24:	4770      	bx	lr

0800db26 <__sfputs_r>:
 800db26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db28:	4606      	mov	r6, r0
 800db2a:	460f      	mov	r7, r1
 800db2c:	4614      	mov	r4, r2
 800db2e:	18d5      	adds	r5, r2, r3
 800db30:	42ac      	cmp	r4, r5
 800db32:	d101      	bne.n	800db38 <__sfputs_r+0x12>
 800db34:	2000      	movs	r0, #0
 800db36:	e007      	b.n	800db48 <__sfputs_r+0x22>
 800db38:	463a      	mov	r2, r7
 800db3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db3e:	4630      	mov	r0, r6
 800db40:	f7ff ffda 	bl	800daf8 <__sfputc_r>
 800db44:	1c43      	adds	r3, r0, #1
 800db46:	d1f3      	bne.n	800db30 <__sfputs_r+0xa>
 800db48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800db4c <_vfiprintf_r>:
 800db4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db50:	460c      	mov	r4, r1
 800db52:	b09d      	sub	sp, #116	; 0x74
 800db54:	4617      	mov	r7, r2
 800db56:	461d      	mov	r5, r3
 800db58:	4606      	mov	r6, r0
 800db5a:	b118      	cbz	r0, 800db64 <_vfiprintf_r+0x18>
 800db5c:	6983      	ldr	r3, [r0, #24]
 800db5e:	b90b      	cbnz	r3, 800db64 <_vfiprintf_r+0x18>
 800db60:	f7ff fdfc 	bl	800d75c <__sinit>
 800db64:	4b7c      	ldr	r3, [pc, #496]	; (800dd58 <_vfiprintf_r+0x20c>)
 800db66:	429c      	cmp	r4, r3
 800db68:	d158      	bne.n	800dc1c <_vfiprintf_r+0xd0>
 800db6a:	6874      	ldr	r4, [r6, #4]
 800db6c:	89a3      	ldrh	r3, [r4, #12]
 800db6e:	0718      	lsls	r0, r3, #28
 800db70:	d55e      	bpl.n	800dc30 <_vfiprintf_r+0xe4>
 800db72:	6923      	ldr	r3, [r4, #16]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d05b      	beq.n	800dc30 <_vfiprintf_r+0xe4>
 800db78:	2300      	movs	r3, #0
 800db7a:	9309      	str	r3, [sp, #36]	; 0x24
 800db7c:	2320      	movs	r3, #32
 800db7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db82:	2330      	movs	r3, #48	; 0x30
 800db84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db88:	9503      	str	r5, [sp, #12]
 800db8a:	f04f 0b01 	mov.w	fp, #1
 800db8e:	46b8      	mov	r8, r7
 800db90:	4645      	mov	r5, r8
 800db92:	f815 3b01 	ldrb.w	r3, [r5], #1
 800db96:	b10b      	cbz	r3, 800db9c <_vfiprintf_r+0x50>
 800db98:	2b25      	cmp	r3, #37	; 0x25
 800db9a:	d154      	bne.n	800dc46 <_vfiprintf_r+0xfa>
 800db9c:	ebb8 0a07 	subs.w	sl, r8, r7
 800dba0:	d00b      	beq.n	800dbba <_vfiprintf_r+0x6e>
 800dba2:	4653      	mov	r3, sl
 800dba4:	463a      	mov	r2, r7
 800dba6:	4621      	mov	r1, r4
 800dba8:	4630      	mov	r0, r6
 800dbaa:	f7ff ffbc 	bl	800db26 <__sfputs_r>
 800dbae:	3001      	adds	r0, #1
 800dbb0:	f000 80c2 	beq.w	800dd38 <_vfiprintf_r+0x1ec>
 800dbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbb6:	4453      	add	r3, sl
 800dbb8:	9309      	str	r3, [sp, #36]	; 0x24
 800dbba:	f898 3000 	ldrb.w	r3, [r8]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f000 80ba 	beq.w	800dd38 <_vfiprintf_r+0x1ec>
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbce:	9304      	str	r3, [sp, #16]
 800dbd0:	9307      	str	r3, [sp, #28]
 800dbd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbd6:	931a      	str	r3, [sp, #104]	; 0x68
 800dbd8:	46a8      	mov	r8, r5
 800dbda:	2205      	movs	r2, #5
 800dbdc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800dbe0:	485e      	ldr	r0, [pc, #376]	; (800dd5c <_vfiprintf_r+0x210>)
 800dbe2:	f7fa fa35 	bl	8008050 <memchr>
 800dbe6:	9b04      	ldr	r3, [sp, #16]
 800dbe8:	bb78      	cbnz	r0, 800dc4a <_vfiprintf_r+0xfe>
 800dbea:	06d9      	lsls	r1, r3, #27
 800dbec:	bf44      	itt	mi
 800dbee:	2220      	movmi	r2, #32
 800dbf0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dbf4:	071a      	lsls	r2, r3, #28
 800dbf6:	bf44      	itt	mi
 800dbf8:	222b      	movmi	r2, #43	; 0x2b
 800dbfa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dbfe:	782a      	ldrb	r2, [r5, #0]
 800dc00:	2a2a      	cmp	r2, #42	; 0x2a
 800dc02:	d02a      	beq.n	800dc5a <_vfiprintf_r+0x10e>
 800dc04:	9a07      	ldr	r2, [sp, #28]
 800dc06:	46a8      	mov	r8, r5
 800dc08:	2000      	movs	r0, #0
 800dc0a:	250a      	movs	r5, #10
 800dc0c:	4641      	mov	r1, r8
 800dc0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc12:	3b30      	subs	r3, #48	; 0x30
 800dc14:	2b09      	cmp	r3, #9
 800dc16:	d969      	bls.n	800dcec <_vfiprintf_r+0x1a0>
 800dc18:	b360      	cbz	r0, 800dc74 <_vfiprintf_r+0x128>
 800dc1a:	e024      	b.n	800dc66 <_vfiprintf_r+0x11a>
 800dc1c:	4b50      	ldr	r3, [pc, #320]	; (800dd60 <_vfiprintf_r+0x214>)
 800dc1e:	429c      	cmp	r4, r3
 800dc20:	d101      	bne.n	800dc26 <_vfiprintf_r+0xda>
 800dc22:	68b4      	ldr	r4, [r6, #8]
 800dc24:	e7a2      	b.n	800db6c <_vfiprintf_r+0x20>
 800dc26:	4b4f      	ldr	r3, [pc, #316]	; (800dd64 <_vfiprintf_r+0x218>)
 800dc28:	429c      	cmp	r4, r3
 800dc2a:	bf08      	it	eq
 800dc2c:	68f4      	ldreq	r4, [r6, #12]
 800dc2e:	e79d      	b.n	800db6c <_vfiprintf_r+0x20>
 800dc30:	4621      	mov	r1, r4
 800dc32:	4630      	mov	r0, r6
 800dc34:	f001 fefa 	bl	800fa2c <__swsetup_r>
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	d09d      	beq.n	800db78 <_vfiprintf_r+0x2c>
 800dc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc40:	b01d      	add	sp, #116	; 0x74
 800dc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc46:	46a8      	mov	r8, r5
 800dc48:	e7a2      	b.n	800db90 <_vfiprintf_r+0x44>
 800dc4a:	4a44      	ldr	r2, [pc, #272]	; (800dd5c <_vfiprintf_r+0x210>)
 800dc4c:	1a80      	subs	r0, r0, r2
 800dc4e:	fa0b f000 	lsl.w	r0, fp, r0
 800dc52:	4318      	orrs	r0, r3
 800dc54:	9004      	str	r0, [sp, #16]
 800dc56:	4645      	mov	r5, r8
 800dc58:	e7be      	b.n	800dbd8 <_vfiprintf_r+0x8c>
 800dc5a:	9a03      	ldr	r2, [sp, #12]
 800dc5c:	1d11      	adds	r1, r2, #4
 800dc5e:	6812      	ldr	r2, [r2, #0]
 800dc60:	9103      	str	r1, [sp, #12]
 800dc62:	2a00      	cmp	r2, #0
 800dc64:	db01      	blt.n	800dc6a <_vfiprintf_r+0x11e>
 800dc66:	9207      	str	r2, [sp, #28]
 800dc68:	e004      	b.n	800dc74 <_vfiprintf_r+0x128>
 800dc6a:	4252      	negs	r2, r2
 800dc6c:	f043 0302 	orr.w	r3, r3, #2
 800dc70:	9207      	str	r2, [sp, #28]
 800dc72:	9304      	str	r3, [sp, #16]
 800dc74:	f898 3000 	ldrb.w	r3, [r8]
 800dc78:	2b2e      	cmp	r3, #46	; 0x2e
 800dc7a:	d10e      	bne.n	800dc9a <_vfiprintf_r+0x14e>
 800dc7c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dc80:	2b2a      	cmp	r3, #42	; 0x2a
 800dc82:	d138      	bne.n	800dcf6 <_vfiprintf_r+0x1aa>
 800dc84:	9b03      	ldr	r3, [sp, #12]
 800dc86:	1d1a      	adds	r2, r3, #4
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	9203      	str	r2, [sp, #12]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	bfb8      	it	lt
 800dc90:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc94:	f108 0802 	add.w	r8, r8, #2
 800dc98:	9305      	str	r3, [sp, #20]
 800dc9a:	4d33      	ldr	r5, [pc, #204]	; (800dd68 <_vfiprintf_r+0x21c>)
 800dc9c:	f898 1000 	ldrb.w	r1, [r8]
 800dca0:	2203      	movs	r2, #3
 800dca2:	4628      	mov	r0, r5
 800dca4:	f7fa f9d4 	bl	8008050 <memchr>
 800dca8:	b140      	cbz	r0, 800dcbc <_vfiprintf_r+0x170>
 800dcaa:	2340      	movs	r3, #64	; 0x40
 800dcac:	1b40      	subs	r0, r0, r5
 800dcae:	fa03 f000 	lsl.w	r0, r3, r0
 800dcb2:	9b04      	ldr	r3, [sp, #16]
 800dcb4:	4303      	orrs	r3, r0
 800dcb6:	f108 0801 	add.w	r8, r8, #1
 800dcba:	9304      	str	r3, [sp, #16]
 800dcbc:	f898 1000 	ldrb.w	r1, [r8]
 800dcc0:	482a      	ldr	r0, [pc, #168]	; (800dd6c <_vfiprintf_r+0x220>)
 800dcc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcc6:	2206      	movs	r2, #6
 800dcc8:	f108 0701 	add.w	r7, r8, #1
 800dccc:	f7fa f9c0 	bl	8008050 <memchr>
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	d037      	beq.n	800dd44 <_vfiprintf_r+0x1f8>
 800dcd4:	4b26      	ldr	r3, [pc, #152]	; (800dd70 <_vfiprintf_r+0x224>)
 800dcd6:	bb1b      	cbnz	r3, 800dd20 <_vfiprintf_r+0x1d4>
 800dcd8:	9b03      	ldr	r3, [sp, #12]
 800dcda:	3307      	adds	r3, #7
 800dcdc:	f023 0307 	bic.w	r3, r3, #7
 800dce0:	3308      	adds	r3, #8
 800dce2:	9303      	str	r3, [sp, #12]
 800dce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce6:	444b      	add	r3, r9
 800dce8:	9309      	str	r3, [sp, #36]	; 0x24
 800dcea:	e750      	b.n	800db8e <_vfiprintf_r+0x42>
 800dcec:	fb05 3202 	mla	r2, r5, r2, r3
 800dcf0:	2001      	movs	r0, #1
 800dcf2:	4688      	mov	r8, r1
 800dcf4:	e78a      	b.n	800dc0c <_vfiprintf_r+0xc0>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	f108 0801 	add.w	r8, r8, #1
 800dcfc:	9305      	str	r3, [sp, #20]
 800dcfe:	4619      	mov	r1, r3
 800dd00:	250a      	movs	r5, #10
 800dd02:	4640      	mov	r0, r8
 800dd04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd08:	3a30      	subs	r2, #48	; 0x30
 800dd0a:	2a09      	cmp	r2, #9
 800dd0c:	d903      	bls.n	800dd16 <_vfiprintf_r+0x1ca>
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d0c3      	beq.n	800dc9a <_vfiprintf_r+0x14e>
 800dd12:	9105      	str	r1, [sp, #20]
 800dd14:	e7c1      	b.n	800dc9a <_vfiprintf_r+0x14e>
 800dd16:	fb05 2101 	mla	r1, r5, r1, r2
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	4680      	mov	r8, r0
 800dd1e:	e7f0      	b.n	800dd02 <_vfiprintf_r+0x1b6>
 800dd20:	ab03      	add	r3, sp, #12
 800dd22:	9300      	str	r3, [sp, #0]
 800dd24:	4622      	mov	r2, r4
 800dd26:	4b13      	ldr	r3, [pc, #76]	; (800dd74 <_vfiprintf_r+0x228>)
 800dd28:	a904      	add	r1, sp, #16
 800dd2a:	4630      	mov	r0, r6
 800dd2c:	f000 f8b8 	bl	800dea0 <_printf_float>
 800dd30:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dd34:	4681      	mov	r9, r0
 800dd36:	d1d5      	bne.n	800dce4 <_vfiprintf_r+0x198>
 800dd38:	89a3      	ldrh	r3, [r4, #12]
 800dd3a:	065b      	lsls	r3, r3, #25
 800dd3c:	f53f af7e 	bmi.w	800dc3c <_vfiprintf_r+0xf0>
 800dd40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd42:	e77d      	b.n	800dc40 <_vfiprintf_r+0xf4>
 800dd44:	ab03      	add	r3, sp, #12
 800dd46:	9300      	str	r3, [sp, #0]
 800dd48:	4622      	mov	r2, r4
 800dd4a:	4b0a      	ldr	r3, [pc, #40]	; (800dd74 <_vfiprintf_r+0x228>)
 800dd4c:	a904      	add	r1, sp, #16
 800dd4e:	4630      	mov	r0, r6
 800dd50:	f000 fb5c 	bl	800e40c <_printf_i>
 800dd54:	e7ec      	b.n	800dd30 <_vfiprintf_r+0x1e4>
 800dd56:	bf00      	nop
 800dd58:	08011c40 	.word	0x08011c40
 800dd5c:	08011c84 	.word	0x08011c84
 800dd60:	08011c60 	.word	0x08011c60
 800dd64:	08011c20 	.word	0x08011c20
 800dd68:	08011c8a 	.word	0x08011c8a
 800dd6c:	08011c8e 	.word	0x08011c8e
 800dd70:	0800dea1 	.word	0x0800dea1
 800dd74:	0800db27 	.word	0x0800db27

0800dd78 <__cvt>:
 800dd78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd7c:	ec55 4b10 	vmov	r4, r5, d0
 800dd80:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800dd82:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dd86:	2d00      	cmp	r5, #0
 800dd88:	460e      	mov	r6, r1
 800dd8a:	4691      	mov	r9, r2
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	bfb8      	it	lt
 800dd90:	4622      	movlt	r2, r4
 800dd92:	462b      	mov	r3, r5
 800dd94:	f027 0720 	bic.w	r7, r7, #32
 800dd98:	bfbb      	ittet	lt
 800dd9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dd9e:	461d      	movlt	r5, r3
 800dda0:	2300      	movge	r3, #0
 800dda2:	232d      	movlt	r3, #45	; 0x2d
 800dda4:	bfb8      	it	lt
 800dda6:	4614      	movlt	r4, r2
 800dda8:	2f46      	cmp	r7, #70	; 0x46
 800ddaa:	700b      	strb	r3, [r1, #0]
 800ddac:	d004      	beq.n	800ddb8 <__cvt+0x40>
 800ddae:	2f45      	cmp	r7, #69	; 0x45
 800ddb0:	d100      	bne.n	800ddb4 <__cvt+0x3c>
 800ddb2:	3601      	adds	r6, #1
 800ddb4:	2102      	movs	r1, #2
 800ddb6:	e000      	b.n	800ddba <__cvt+0x42>
 800ddb8:	2103      	movs	r1, #3
 800ddba:	ab03      	add	r3, sp, #12
 800ddbc:	9301      	str	r3, [sp, #4]
 800ddbe:	ab02      	add	r3, sp, #8
 800ddc0:	9300      	str	r3, [sp, #0]
 800ddc2:	4632      	mov	r2, r6
 800ddc4:	4653      	mov	r3, sl
 800ddc6:	ec45 4b10 	vmov	d0, r4, r5
 800ddca:	f001 ff39 	bl	800fc40 <_dtoa_r>
 800ddce:	2f47      	cmp	r7, #71	; 0x47
 800ddd0:	4680      	mov	r8, r0
 800ddd2:	d102      	bne.n	800ddda <__cvt+0x62>
 800ddd4:	f019 0f01 	tst.w	r9, #1
 800ddd8:	d026      	beq.n	800de28 <__cvt+0xb0>
 800ddda:	2f46      	cmp	r7, #70	; 0x46
 800dddc:	eb08 0906 	add.w	r9, r8, r6
 800dde0:	d111      	bne.n	800de06 <__cvt+0x8e>
 800dde2:	f898 3000 	ldrb.w	r3, [r8]
 800dde6:	2b30      	cmp	r3, #48	; 0x30
 800dde8:	d10a      	bne.n	800de00 <__cvt+0x88>
 800ddea:	2200      	movs	r2, #0
 800ddec:	2300      	movs	r3, #0
 800ddee:	4620      	mov	r0, r4
 800ddf0:	4629      	mov	r1, r5
 800ddf2:	f7fa fda1 	bl	8008938 <__aeabi_dcmpeq>
 800ddf6:	b918      	cbnz	r0, 800de00 <__cvt+0x88>
 800ddf8:	f1c6 0601 	rsb	r6, r6, #1
 800ddfc:	f8ca 6000 	str.w	r6, [sl]
 800de00:	f8da 3000 	ldr.w	r3, [sl]
 800de04:	4499      	add	r9, r3
 800de06:	2200      	movs	r2, #0
 800de08:	2300      	movs	r3, #0
 800de0a:	4620      	mov	r0, r4
 800de0c:	4629      	mov	r1, r5
 800de0e:	f7fa fd93 	bl	8008938 <__aeabi_dcmpeq>
 800de12:	b938      	cbnz	r0, 800de24 <__cvt+0xac>
 800de14:	2230      	movs	r2, #48	; 0x30
 800de16:	9b03      	ldr	r3, [sp, #12]
 800de18:	454b      	cmp	r3, r9
 800de1a:	d205      	bcs.n	800de28 <__cvt+0xb0>
 800de1c:	1c59      	adds	r1, r3, #1
 800de1e:	9103      	str	r1, [sp, #12]
 800de20:	701a      	strb	r2, [r3, #0]
 800de22:	e7f8      	b.n	800de16 <__cvt+0x9e>
 800de24:	f8cd 900c 	str.w	r9, [sp, #12]
 800de28:	9b03      	ldr	r3, [sp, #12]
 800de2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de2c:	eba3 0308 	sub.w	r3, r3, r8
 800de30:	4640      	mov	r0, r8
 800de32:	6013      	str	r3, [r2, #0]
 800de34:	b004      	add	sp, #16
 800de36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800de3a <__exponent>:
 800de3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de3c:	2900      	cmp	r1, #0
 800de3e:	4604      	mov	r4, r0
 800de40:	bfba      	itte	lt
 800de42:	4249      	neglt	r1, r1
 800de44:	232d      	movlt	r3, #45	; 0x2d
 800de46:	232b      	movge	r3, #43	; 0x2b
 800de48:	2909      	cmp	r1, #9
 800de4a:	f804 2b02 	strb.w	r2, [r4], #2
 800de4e:	7043      	strb	r3, [r0, #1]
 800de50:	dd20      	ble.n	800de94 <__exponent+0x5a>
 800de52:	f10d 0307 	add.w	r3, sp, #7
 800de56:	461f      	mov	r7, r3
 800de58:	260a      	movs	r6, #10
 800de5a:	fb91 f5f6 	sdiv	r5, r1, r6
 800de5e:	fb06 1115 	mls	r1, r6, r5, r1
 800de62:	3130      	adds	r1, #48	; 0x30
 800de64:	2d09      	cmp	r5, #9
 800de66:	f803 1c01 	strb.w	r1, [r3, #-1]
 800de6a:	f103 32ff 	add.w	r2, r3, #4294967295
 800de6e:	4629      	mov	r1, r5
 800de70:	dc09      	bgt.n	800de86 <__exponent+0x4c>
 800de72:	3130      	adds	r1, #48	; 0x30
 800de74:	3b02      	subs	r3, #2
 800de76:	f802 1c01 	strb.w	r1, [r2, #-1]
 800de7a:	42bb      	cmp	r3, r7
 800de7c:	4622      	mov	r2, r4
 800de7e:	d304      	bcc.n	800de8a <__exponent+0x50>
 800de80:	1a10      	subs	r0, r2, r0
 800de82:	b003      	add	sp, #12
 800de84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de86:	4613      	mov	r3, r2
 800de88:	e7e7      	b.n	800de5a <__exponent+0x20>
 800de8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de8e:	f804 2b01 	strb.w	r2, [r4], #1
 800de92:	e7f2      	b.n	800de7a <__exponent+0x40>
 800de94:	2330      	movs	r3, #48	; 0x30
 800de96:	4419      	add	r1, r3
 800de98:	7083      	strb	r3, [r0, #2]
 800de9a:	1d02      	adds	r2, r0, #4
 800de9c:	70c1      	strb	r1, [r0, #3]
 800de9e:	e7ef      	b.n	800de80 <__exponent+0x46>

0800dea0 <_printf_float>:
 800dea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea4:	b08d      	sub	sp, #52	; 0x34
 800dea6:	460c      	mov	r4, r1
 800dea8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800deac:	4616      	mov	r6, r2
 800deae:	461f      	mov	r7, r3
 800deb0:	4605      	mov	r5, r0
 800deb2:	f002 ffcb 	bl	8010e4c <_localeconv_r>
 800deb6:	6803      	ldr	r3, [r0, #0]
 800deb8:	9304      	str	r3, [sp, #16]
 800deba:	4618      	mov	r0, r3
 800debc:	f7fa f8c0 	bl	8008040 <strlen>
 800dec0:	2300      	movs	r3, #0
 800dec2:	930a      	str	r3, [sp, #40]	; 0x28
 800dec4:	f8d8 3000 	ldr.w	r3, [r8]
 800dec8:	9005      	str	r0, [sp, #20]
 800deca:	3307      	adds	r3, #7
 800decc:	f023 0307 	bic.w	r3, r3, #7
 800ded0:	f103 0208 	add.w	r2, r3, #8
 800ded4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ded8:	f8d4 b000 	ldr.w	fp, [r4]
 800dedc:	f8c8 2000 	str.w	r2, [r8]
 800dee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dee8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800deec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800def0:	9307      	str	r3, [sp, #28]
 800def2:	f8cd 8018 	str.w	r8, [sp, #24]
 800def6:	f04f 32ff 	mov.w	r2, #4294967295
 800defa:	4ba7      	ldr	r3, [pc, #668]	; (800e198 <_printf_float+0x2f8>)
 800defc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df00:	f7fa fd4c 	bl	800899c <__aeabi_dcmpun>
 800df04:	bb70      	cbnz	r0, 800df64 <_printf_float+0xc4>
 800df06:	f04f 32ff 	mov.w	r2, #4294967295
 800df0a:	4ba3      	ldr	r3, [pc, #652]	; (800e198 <_printf_float+0x2f8>)
 800df0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df10:	f7fa fd26 	bl	8008960 <__aeabi_dcmple>
 800df14:	bb30      	cbnz	r0, 800df64 <_printf_float+0xc4>
 800df16:	2200      	movs	r2, #0
 800df18:	2300      	movs	r3, #0
 800df1a:	4640      	mov	r0, r8
 800df1c:	4649      	mov	r1, r9
 800df1e:	f7fa fd15 	bl	800894c <__aeabi_dcmplt>
 800df22:	b110      	cbz	r0, 800df2a <_printf_float+0x8a>
 800df24:	232d      	movs	r3, #45	; 0x2d
 800df26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df2a:	4a9c      	ldr	r2, [pc, #624]	; (800e19c <_printf_float+0x2fc>)
 800df2c:	4b9c      	ldr	r3, [pc, #624]	; (800e1a0 <_printf_float+0x300>)
 800df2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800df32:	bf8c      	ite	hi
 800df34:	4690      	movhi	r8, r2
 800df36:	4698      	movls	r8, r3
 800df38:	2303      	movs	r3, #3
 800df3a:	f02b 0204 	bic.w	r2, fp, #4
 800df3e:	6123      	str	r3, [r4, #16]
 800df40:	6022      	str	r2, [r4, #0]
 800df42:	f04f 0900 	mov.w	r9, #0
 800df46:	9700      	str	r7, [sp, #0]
 800df48:	4633      	mov	r3, r6
 800df4a:	aa0b      	add	r2, sp, #44	; 0x2c
 800df4c:	4621      	mov	r1, r4
 800df4e:	4628      	mov	r0, r5
 800df50:	f000 f9e6 	bl	800e320 <_printf_common>
 800df54:	3001      	adds	r0, #1
 800df56:	f040 808d 	bne.w	800e074 <_printf_float+0x1d4>
 800df5a:	f04f 30ff 	mov.w	r0, #4294967295
 800df5e:	b00d      	add	sp, #52	; 0x34
 800df60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df64:	4642      	mov	r2, r8
 800df66:	464b      	mov	r3, r9
 800df68:	4640      	mov	r0, r8
 800df6a:	4649      	mov	r1, r9
 800df6c:	f7fa fd16 	bl	800899c <__aeabi_dcmpun>
 800df70:	b110      	cbz	r0, 800df78 <_printf_float+0xd8>
 800df72:	4a8c      	ldr	r2, [pc, #560]	; (800e1a4 <_printf_float+0x304>)
 800df74:	4b8c      	ldr	r3, [pc, #560]	; (800e1a8 <_printf_float+0x308>)
 800df76:	e7da      	b.n	800df2e <_printf_float+0x8e>
 800df78:	6861      	ldr	r1, [r4, #4]
 800df7a:	1c4b      	adds	r3, r1, #1
 800df7c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800df80:	a80a      	add	r0, sp, #40	; 0x28
 800df82:	d13e      	bne.n	800e002 <_printf_float+0x162>
 800df84:	2306      	movs	r3, #6
 800df86:	6063      	str	r3, [r4, #4]
 800df88:	2300      	movs	r3, #0
 800df8a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800df8e:	ab09      	add	r3, sp, #36	; 0x24
 800df90:	9300      	str	r3, [sp, #0]
 800df92:	ec49 8b10 	vmov	d0, r8, r9
 800df96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800df9a:	6022      	str	r2, [r4, #0]
 800df9c:	f8cd a004 	str.w	sl, [sp, #4]
 800dfa0:	6861      	ldr	r1, [r4, #4]
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	f7ff fee8 	bl	800dd78 <__cvt>
 800dfa8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800dfac:	2b47      	cmp	r3, #71	; 0x47
 800dfae:	4680      	mov	r8, r0
 800dfb0:	d109      	bne.n	800dfc6 <_printf_float+0x126>
 800dfb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfb4:	1cd8      	adds	r0, r3, #3
 800dfb6:	db02      	blt.n	800dfbe <_printf_float+0x11e>
 800dfb8:	6862      	ldr	r2, [r4, #4]
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	dd47      	ble.n	800e04e <_printf_float+0x1ae>
 800dfbe:	f1aa 0a02 	sub.w	sl, sl, #2
 800dfc2:	fa5f fa8a 	uxtb.w	sl, sl
 800dfc6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800dfca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dfcc:	d824      	bhi.n	800e018 <_printf_float+0x178>
 800dfce:	3901      	subs	r1, #1
 800dfd0:	4652      	mov	r2, sl
 800dfd2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dfd6:	9109      	str	r1, [sp, #36]	; 0x24
 800dfd8:	f7ff ff2f 	bl	800de3a <__exponent>
 800dfdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfde:	1813      	adds	r3, r2, r0
 800dfe0:	2a01      	cmp	r2, #1
 800dfe2:	4681      	mov	r9, r0
 800dfe4:	6123      	str	r3, [r4, #16]
 800dfe6:	dc02      	bgt.n	800dfee <_printf_float+0x14e>
 800dfe8:	6822      	ldr	r2, [r4, #0]
 800dfea:	07d1      	lsls	r1, r2, #31
 800dfec:	d501      	bpl.n	800dff2 <_printf_float+0x152>
 800dfee:	3301      	adds	r3, #1
 800dff0:	6123      	str	r3, [r4, #16]
 800dff2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d0a5      	beq.n	800df46 <_printf_float+0xa6>
 800dffa:	232d      	movs	r3, #45	; 0x2d
 800dffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e000:	e7a1      	b.n	800df46 <_printf_float+0xa6>
 800e002:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e006:	f000 8177 	beq.w	800e2f8 <_printf_float+0x458>
 800e00a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e00e:	d1bb      	bne.n	800df88 <_printf_float+0xe8>
 800e010:	2900      	cmp	r1, #0
 800e012:	d1b9      	bne.n	800df88 <_printf_float+0xe8>
 800e014:	2301      	movs	r3, #1
 800e016:	e7b6      	b.n	800df86 <_printf_float+0xe6>
 800e018:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e01c:	d119      	bne.n	800e052 <_printf_float+0x1b2>
 800e01e:	2900      	cmp	r1, #0
 800e020:	6863      	ldr	r3, [r4, #4]
 800e022:	dd0c      	ble.n	800e03e <_printf_float+0x19e>
 800e024:	6121      	str	r1, [r4, #16]
 800e026:	b913      	cbnz	r3, 800e02e <_printf_float+0x18e>
 800e028:	6822      	ldr	r2, [r4, #0]
 800e02a:	07d2      	lsls	r2, r2, #31
 800e02c:	d502      	bpl.n	800e034 <_printf_float+0x194>
 800e02e:	3301      	adds	r3, #1
 800e030:	440b      	add	r3, r1
 800e032:	6123      	str	r3, [r4, #16]
 800e034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e036:	65a3      	str	r3, [r4, #88]	; 0x58
 800e038:	f04f 0900 	mov.w	r9, #0
 800e03c:	e7d9      	b.n	800dff2 <_printf_float+0x152>
 800e03e:	b913      	cbnz	r3, 800e046 <_printf_float+0x1a6>
 800e040:	6822      	ldr	r2, [r4, #0]
 800e042:	07d0      	lsls	r0, r2, #31
 800e044:	d501      	bpl.n	800e04a <_printf_float+0x1aa>
 800e046:	3302      	adds	r3, #2
 800e048:	e7f3      	b.n	800e032 <_printf_float+0x192>
 800e04a:	2301      	movs	r3, #1
 800e04c:	e7f1      	b.n	800e032 <_printf_float+0x192>
 800e04e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e052:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e056:	4293      	cmp	r3, r2
 800e058:	db05      	blt.n	800e066 <_printf_float+0x1c6>
 800e05a:	6822      	ldr	r2, [r4, #0]
 800e05c:	6123      	str	r3, [r4, #16]
 800e05e:	07d1      	lsls	r1, r2, #31
 800e060:	d5e8      	bpl.n	800e034 <_printf_float+0x194>
 800e062:	3301      	adds	r3, #1
 800e064:	e7e5      	b.n	800e032 <_printf_float+0x192>
 800e066:	2b00      	cmp	r3, #0
 800e068:	bfd4      	ite	le
 800e06a:	f1c3 0302 	rsble	r3, r3, #2
 800e06e:	2301      	movgt	r3, #1
 800e070:	4413      	add	r3, r2
 800e072:	e7de      	b.n	800e032 <_printf_float+0x192>
 800e074:	6823      	ldr	r3, [r4, #0]
 800e076:	055a      	lsls	r2, r3, #21
 800e078:	d407      	bmi.n	800e08a <_printf_float+0x1ea>
 800e07a:	6923      	ldr	r3, [r4, #16]
 800e07c:	4642      	mov	r2, r8
 800e07e:	4631      	mov	r1, r6
 800e080:	4628      	mov	r0, r5
 800e082:	47b8      	blx	r7
 800e084:	3001      	adds	r0, #1
 800e086:	d12b      	bne.n	800e0e0 <_printf_float+0x240>
 800e088:	e767      	b.n	800df5a <_printf_float+0xba>
 800e08a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e08e:	f240 80dc 	bls.w	800e24a <_printf_float+0x3aa>
 800e092:	2200      	movs	r2, #0
 800e094:	2300      	movs	r3, #0
 800e096:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e09a:	f7fa fc4d 	bl	8008938 <__aeabi_dcmpeq>
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	d033      	beq.n	800e10a <_printf_float+0x26a>
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	4a41      	ldr	r2, [pc, #260]	; (800e1ac <_printf_float+0x30c>)
 800e0a6:	4631      	mov	r1, r6
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	47b8      	blx	r7
 800e0ac:	3001      	adds	r0, #1
 800e0ae:	f43f af54 	beq.w	800df5a <_printf_float+0xba>
 800e0b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	db02      	blt.n	800e0c0 <_printf_float+0x220>
 800e0ba:	6823      	ldr	r3, [r4, #0]
 800e0bc:	07d8      	lsls	r0, r3, #31
 800e0be:	d50f      	bpl.n	800e0e0 <_printf_float+0x240>
 800e0c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0c4:	4631      	mov	r1, r6
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	47b8      	blx	r7
 800e0ca:	3001      	adds	r0, #1
 800e0cc:	f43f af45 	beq.w	800df5a <_printf_float+0xba>
 800e0d0:	f04f 0800 	mov.w	r8, #0
 800e0d4:	f104 091a 	add.w	r9, r4, #26
 800e0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0da:	3b01      	subs	r3, #1
 800e0dc:	4543      	cmp	r3, r8
 800e0de:	dc09      	bgt.n	800e0f4 <_printf_float+0x254>
 800e0e0:	6823      	ldr	r3, [r4, #0]
 800e0e2:	079b      	lsls	r3, r3, #30
 800e0e4:	f100 8103 	bmi.w	800e2ee <_printf_float+0x44e>
 800e0e8:	68e0      	ldr	r0, [r4, #12]
 800e0ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0ec:	4298      	cmp	r0, r3
 800e0ee:	bfb8      	it	lt
 800e0f0:	4618      	movlt	r0, r3
 800e0f2:	e734      	b.n	800df5e <_printf_float+0xbe>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	464a      	mov	r2, r9
 800e0f8:	4631      	mov	r1, r6
 800e0fa:	4628      	mov	r0, r5
 800e0fc:	47b8      	blx	r7
 800e0fe:	3001      	adds	r0, #1
 800e100:	f43f af2b 	beq.w	800df5a <_printf_float+0xba>
 800e104:	f108 0801 	add.w	r8, r8, #1
 800e108:	e7e6      	b.n	800e0d8 <_printf_float+0x238>
 800e10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	dc2b      	bgt.n	800e168 <_printf_float+0x2c8>
 800e110:	2301      	movs	r3, #1
 800e112:	4a26      	ldr	r2, [pc, #152]	; (800e1ac <_printf_float+0x30c>)
 800e114:	4631      	mov	r1, r6
 800e116:	4628      	mov	r0, r5
 800e118:	47b8      	blx	r7
 800e11a:	3001      	adds	r0, #1
 800e11c:	f43f af1d 	beq.w	800df5a <_printf_float+0xba>
 800e120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e122:	b923      	cbnz	r3, 800e12e <_printf_float+0x28e>
 800e124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e126:	b913      	cbnz	r3, 800e12e <_printf_float+0x28e>
 800e128:	6823      	ldr	r3, [r4, #0]
 800e12a:	07d9      	lsls	r1, r3, #31
 800e12c:	d5d8      	bpl.n	800e0e0 <_printf_float+0x240>
 800e12e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e132:	4631      	mov	r1, r6
 800e134:	4628      	mov	r0, r5
 800e136:	47b8      	blx	r7
 800e138:	3001      	adds	r0, #1
 800e13a:	f43f af0e 	beq.w	800df5a <_printf_float+0xba>
 800e13e:	f04f 0900 	mov.w	r9, #0
 800e142:	f104 0a1a 	add.w	sl, r4, #26
 800e146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e148:	425b      	negs	r3, r3
 800e14a:	454b      	cmp	r3, r9
 800e14c:	dc01      	bgt.n	800e152 <_printf_float+0x2b2>
 800e14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e150:	e794      	b.n	800e07c <_printf_float+0x1dc>
 800e152:	2301      	movs	r3, #1
 800e154:	4652      	mov	r2, sl
 800e156:	4631      	mov	r1, r6
 800e158:	4628      	mov	r0, r5
 800e15a:	47b8      	blx	r7
 800e15c:	3001      	adds	r0, #1
 800e15e:	f43f aefc 	beq.w	800df5a <_printf_float+0xba>
 800e162:	f109 0901 	add.w	r9, r9, #1
 800e166:	e7ee      	b.n	800e146 <_printf_float+0x2a6>
 800e168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e16a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e16c:	429a      	cmp	r2, r3
 800e16e:	bfa8      	it	ge
 800e170:	461a      	movge	r2, r3
 800e172:	2a00      	cmp	r2, #0
 800e174:	4691      	mov	r9, r2
 800e176:	dd07      	ble.n	800e188 <_printf_float+0x2e8>
 800e178:	4613      	mov	r3, r2
 800e17a:	4631      	mov	r1, r6
 800e17c:	4642      	mov	r2, r8
 800e17e:	4628      	mov	r0, r5
 800e180:	47b8      	blx	r7
 800e182:	3001      	adds	r0, #1
 800e184:	f43f aee9 	beq.w	800df5a <_printf_float+0xba>
 800e188:	f104 031a 	add.w	r3, r4, #26
 800e18c:	f04f 0b00 	mov.w	fp, #0
 800e190:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e194:	9306      	str	r3, [sp, #24]
 800e196:	e015      	b.n	800e1c4 <_printf_float+0x324>
 800e198:	7fefffff 	.word	0x7fefffff
 800e19c:	08011c99 	.word	0x08011c99
 800e1a0:	08011c95 	.word	0x08011c95
 800e1a4:	08011ca1 	.word	0x08011ca1
 800e1a8:	08011c9d 	.word	0x08011c9d
 800e1ac:	08011ca5 	.word	0x08011ca5
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	9a06      	ldr	r2, [sp, #24]
 800e1b4:	4631      	mov	r1, r6
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	47b8      	blx	r7
 800e1ba:	3001      	adds	r0, #1
 800e1bc:	f43f aecd 	beq.w	800df5a <_printf_float+0xba>
 800e1c0:	f10b 0b01 	add.w	fp, fp, #1
 800e1c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e1c8:	ebaa 0309 	sub.w	r3, sl, r9
 800e1cc:	455b      	cmp	r3, fp
 800e1ce:	dcef      	bgt.n	800e1b0 <_printf_float+0x310>
 800e1d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	44d0      	add	r8, sl
 800e1d8:	db15      	blt.n	800e206 <_printf_float+0x366>
 800e1da:	6823      	ldr	r3, [r4, #0]
 800e1dc:	07da      	lsls	r2, r3, #31
 800e1de:	d412      	bmi.n	800e206 <_printf_float+0x366>
 800e1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e1e4:	eba3 020a 	sub.w	r2, r3, sl
 800e1e8:	eba3 0a01 	sub.w	sl, r3, r1
 800e1ec:	4592      	cmp	sl, r2
 800e1ee:	bfa8      	it	ge
 800e1f0:	4692      	movge	sl, r2
 800e1f2:	f1ba 0f00 	cmp.w	sl, #0
 800e1f6:	dc0e      	bgt.n	800e216 <_printf_float+0x376>
 800e1f8:	f04f 0800 	mov.w	r8, #0
 800e1fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e200:	f104 091a 	add.w	r9, r4, #26
 800e204:	e019      	b.n	800e23a <_printf_float+0x39a>
 800e206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e20a:	4631      	mov	r1, r6
 800e20c:	4628      	mov	r0, r5
 800e20e:	47b8      	blx	r7
 800e210:	3001      	adds	r0, #1
 800e212:	d1e5      	bne.n	800e1e0 <_printf_float+0x340>
 800e214:	e6a1      	b.n	800df5a <_printf_float+0xba>
 800e216:	4653      	mov	r3, sl
 800e218:	4642      	mov	r2, r8
 800e21a:	4631      	mov	r1, r6
 800e21c:	4628      	mov	r0, r5
 800e21e:	47b8      	blx	r7
 800e220:	3001      	adds	r0, #1
 800e222:	d1e9      	bne.n	800e1f8 <_printf_float+0x358>
 800e224:	e699      	b.n	800df5a <_printf_float+0xba>
 800e226:	2301      	movs	r3, #1
 800e228:	464a      	mov	r2, r9
 800e22a:	4631      	mov	r1, r6
 800e22c:	4628      	mov	r0, r5
 800e22e:	47b8      	blx	r7
 800e230:	3001      	adds	r0, #1
 800e232:	f43f ae92 	beq.w	800df5a <_printf_float+0xba>
 800e236:	f108 0801 	add.w	r8, r8, #1
 800e23a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e23e:	1a9b      	subs	r3, r3, r2
 800e240:	eba3 030a 	sub.w	r3, r3, sl
 800e244:	4543      	cmp	r3, r8
 800e246:	dcee      	bgt.n	800e226 <_printf_float+0x386>
 800e248:	e74a      	b.n	800e0e0 <_printf_float+0x240>
 800e24a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e24c:	2a01      	cmp	r2, #1
 800e24e:	dc01      	bgt.n	800e254 <_printf_float+0x3b4>
 800e250:	07db      	lsls	r3, r3, #31
 800e252:	d53a      	bpl.n	800e2ca <_printf_float+0x42a>
 800e254:	2301      	movs	r3, #1
 800e256:	4642      	mov	r2, r8
 800e258:	4631      	mov	r1, r6
 800e25a:	4628      	mov	r0, r5
 800e25c:	47b8      	blx	r7
 800e25e:	3001      	adds	r0, #1
 800e260:	f43f ae7b 	beq.w	800df5a <_printf_float+0xba>
 800e264:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e268:	4631      	mov	r1, r6
 800e26a:	4628      	mov	r0, r5
 800e26c:	47b8      	blx	r7
 800e26e:	3001      	adds	r0, #1
 800e270:	f108 0801 	add.w	r8, r8, #1
 800e274:	f43f ae71 	beq.w	800df5a <_printf_float+0xba>
 800e278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e27a:	2200      	movs	r2, #0
 800e27c:	f103 3aff 	add.w	sl, r3, #4294967295
 800e280:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e284:	2300      	movs	r3, #0
 800e286:	f7fa fb57 	bl	8008938 <__aeabi_dcmpeq>
 800e28a:	b9c8      	cbnz	r0, 800e2c0 <_printf_float+0x420>
 800e28c:	4653      	mov	r3, sl
 800e28e:	4642      	mov	r2, r8
 800e290:	4631      	mov	r1, r6
 800e292:	4628      	mov	r0, r5
 800e294:	47b8      	blx	r7
 800e296:	3001      	adds	r0, #1
 800e298:	d10e      	bne.n	800e2b8 <_printf_float+0x418>
 800e29a:	e65e      	b.n	800df5a <_printf_float+0xba>
 800e29c:	2301      	movs	r3, #1
 800e29e:	4652      	mov	r2, sl
 800e2a0:	4631      	mov	r1, r6
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	47b8      	blx	r7
 800e2a6:	3001      	adds	r0, #1
 800e2a8:	f43f ae57 	beq.w	800df5a <_printf_float+0xba>
 800e2ac:	f108 0801 	add.w	r8, r8, #1
 800e2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2b2:	3b01      	subs	r3, #1
 800e2b4:	4543      	cmp	r3, r8
 800e2b6:	dcf1      	bgt.n	800e29c <_printf_float+0x3fc>
 800e2b8:	464b      	mov	r3, r9
 800e2ba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e2be:	e6de      	b.n	800e07e <_printf_float+0x1de>
 800e2c0:	f04f 0800 	mov.w	r8, #0
 800e2c4:	f104 0a1a 	add.w	sl, r4, #26
 800e2c8:	e7f2      	b.n	800e2b0 <_printf_float+0x410>
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	e7df      	b.n	800e28e <_printf_float+0x3ee>
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	464a      	mov	r2, r9
 800e2d2:	4631      	mov	r1, r6
 800e2d4:	4628      	mov	r0, r5
 800e2d6:	47b8      	blx	r7
 800e2d8:	3001      	adds	r0, #1
 800e2da:	f43f ae3e 	beq.w	800df5a <_printf_float+0xba>
 800e2de:	f108 0801 	add.w	r8, r8, #1
 800e2e2:	68e3      	ldr	r3, [r4, #12]
 800e2e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e2e6:	1a9b      	subs	r3, r3, r2
 800e2e8:	4543      	cmp	r3, r8
 800e2ea:	dcf0      	bgt.n	800e2ce <_printf_float+0x42e>
 800e2ec:	e6fc      	b.n	800e0e8 <_printf_float+0x248>
 800e2ee:	f04f 0800 	mov.w	r8, #0
 800e2f2:	f104 0919 	add.w	r9, r4, #25
 800e2f6:	e7f4      	b.n	800e2e2 <_printf_float+0x442>
 800e2f8:	2900      	cmp	r1, #0
 800e2fa:	f43f ae8b 	beq.w	800e014 <_printf_float+0x174>
 800e2fe:	2300      	movs	r3, #0
 800e300:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e304:	ab09      	add	r3, sp, #36	; 0x24
 800e306:	9300      	str	r3, [sp, #0]
 800e308:	ec49 8b10 	vmov	d0, r8, r9
 800e30c:	6022      	str	r2, [r4, #0]
 800e30e:	f8cd a004 	str.w	sl, [sp, #4]
 800e312:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e316:	4628      	mov	r0, r5
 800e318:	f7ff fd2e 	bl	800dd78 <__cvt>
 800e31c:	4680      	mov	r8, r0
 800e31e:	e648      	b.n	800dfb2 <_printf_float+0x112>

0800e320 <_printf_common>:
 800e320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e324:	4691      	mov	r9, r2
 800e326:	461f      	mov	r7, r3
 800e328:	688a      	ldr	r2, [r1, #8]
 800e32a:	690b      	ldr	r3, [r1, #16]
 800e32c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e330:	4293      	cmp	r3, r2
 800e332:	bfb8      	it	lt
 800e334:	4613      	movlt	r3, r2
 800e336:	f8c9 3000 	str.w	r3, [r9]
 800e33a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e33e:	4606      	mov	r6, r0
 800e340:	460c      	mov	r4, r1
 800e342:	b112      	cbz	r2, 800e34a <_printf_common+0x2a>
 800e344:	3301      	adds	r3, #1
 800e346:	f8c9 3000 	str.w	r3, [r9]
 800e34a:	6823      	ldr	r3, [r4, #0]
 800e34c:	0699      	lsls	r1, r3, #26
 800e34e:	bf42      	ittt	mi
 800e350:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e354:	3302      	addmi	r3, #2
 800e356:	f8c9 3000 	strmi.w	r3, [r9]
 800e35a:	6825      	ldr	r5, [r4, #0]
 800e35c:	f015 0506 	ands.w	r5, r5, #6
 800e360:	d107      	bne.n	800e372 <_printf_common+0x52>
 800e362:	f104 0a19 	add.w	sl, r4, #25
 800e366:	68e3      	ldr	r3, [r4, #12]
 800e368:	f8d9 2000 	ldr.w	r2, [r9]
 800e36c:	1a9b      	subs	r3, r3, r2
 800e36e:	42ab      	cmp	r3, r5
 800e370:	dc28      	bgt.n	800e3c4 <_printf_common+0xa4>
 800e372:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e376:	6822      	ldr	r2, [r4, #0]
 800e378:	3300      	adds	r3, #0
 800e37a:	bf18      	it	ne
 800e37c:	2301      	movne	r3, #1
 800e37e:	0692      	lsls	r2, r2, #26
 800e380:	d42d      	bmi.n	800e3de <_printf_common+0xbe>
 800e382:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e386:	4639      	mov	r1, r7
 800e388:	4630      	mov	r0, r6
 800e38a:	47c0      	blx	r8
 800e38c:	3001      	adds	r0, #1
 800e38e:	d020      	beq.n	800e3d2 <_printf_common+0xb2>
 800e390:	6823      	ldr	r3, [r4, #0]
 800e392:	68e5      	ldr	r5, [r4, #12]
 800e394:	f8d9 2000 	ldr.w	r2, [r9]
 800e398:	f003 0306 	and.w	r3, r3, #6
 800e39c:	2b04      	cmp	r3, #4
 800e39e:	bf08      	it	eq
 800e3a0:	1aad      	subeq	r5, r5, r2
 800e3a2:	68a3      	ldr	r3, [r4, #8]
 800e3a4:	6922      	ldr	r2, [r4, #16]
 800e3a6:	bf0c      	ite	eq
 800e3a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e3ac:	2500      	movne	r5, #0
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	bfc4      	itt	gt
 800e3b2:	1a9b      	subgt	r3, r3, r2
 800e3b4:	18ed      	addgt	r5, r5, r3
 800e3b6:	f04f 0900 	mov.w	r9, #0
 800e3ba:	341a      	adds	r4, #26
 800e3bc:	454d      	cmp	r5, r9
 800e3be:	d11a      	bne.n	800e3f6 <_printf_common+0xd6>
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	e008      	b.n	800e3d6 <_printf_common+0xb6>
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	4652      	mov	r2, sl
 800e3c8:	4639      	mov	r1, r7
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	47c0      	blx	r8
 800e3ce:	3001      	adds	r0, #1
 800e3d0:	d103      	bne.n	800e3da <_printf_common+0xba>
 800e3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3da:	3501      	adds	r5, #1
 800e3dc:	e7c3      	b.n	800e366 <_printf_common+0x46>
 800e3de:	18e1      	adds	r1, r4, r3
 800e3e0:	1c5a      	adds	r2, r3, #1
 800e3e2:	2030      	movs	r0, #48	; 0x30
 800e3e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e3e8:	4422      	add	r2, r4
 800e3ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e3ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e3f2:	3302      	adds	r3, #2
 800e3f4:	e7c5      	b.n	800e382 <_printf_common+0x62>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	4622      	mov	r2, r4
 800e3fa:	4639      	mov	r1, r7
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	47c0      	blx	r8
 800e400:	3001      	adds	r0, #1
 800e402:	d0e6      	beq.n	800e3d2 <_printf_common+0xb2>
 800e404:	f109 0901 	add.w	r9, r9, #1
 800e408:	e7d8      	b.n	800e3bc <_printf_common+0x9c>
	...

0800e40c <_printf_i>:
 800e40c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e410:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e414:	460c      	mov	r4, r1
 800e416:	7e09      	ldrb	r1, [r1, #24]
 800e418:	b085      	sub	sp, #20
 800e41a:	296e      	cmp	r1, #110	; 0x6e
 800e41c:	4617      	mov	r7, r2
 800e41e:	4606      	mov	r6, r0
 800e420:	4698      	mov	r8, r3
 800e422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e424:	f000 80b3 	beq.w	800e58e <_printf_i+0x182>
 800e428:	d822      	bhi.n	800e470 <_printf_i+0x64>
 800e42a:	2963      	cmp	r1, #99	; 0x63
 800e42c:	d036      	beq.n	800e49c <_printf_i+0x90>
 800e42e:	d80a      	bhi.n	800e446 <_printf_i+0x3a>
 800e430:	2900      	cmp	r1, #0
 800e432:	f000 80b9 	beq.w	800e5a8 <_printf_i+0x19c>
 800e436:	2958      	cmp	r1, #88	; 0x58
 800e438:	f000 8083 	beq.w	800e542 <_printf_i+0x136>
 800e43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e440:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e444:	e032      	b.n	800e4ac <_printf_i+0xa0>
 800e446:	2964      	cmp	r1, #100	; 0x64
 800e448:	d001      	beq.n	800e44e <_printf_i+0x42>
 800e44a:	2969      	cmp	r1, #105	; 0x69
 800e44c:	d1f6      	bne.n	800e43c <_printf_i+0x30>
 800e44e:	6820      	ldr	r0, [r4, #0]
 800e450:	6813      	ldr	r3, [r2, #0]
 800e452:	0605      	lsls	r5, r0, #24
 800e454:	f103 0104 	add.w	r1, r3, #4
 800e458:	d52a      	bpl.n	800e4b0 <_printf_i+0xa4>
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	6011      	str	r1, [r2, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	da03      	bge.n	800e46a <_printf_i+0x5e>
 800e462:	222d      	movs	r2, #45	; 0x2d
 800e464:	425b      	negs	r3, r3
 800e466:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e46a:	486f      	ldr	r0, [pc, #444]	; (800e628 <_printf_i+0x21c>)
 800e46c:	220a      	movs	r2, #10
 800e46e:	e039      	b.n	800e4e4 <_printf_i+0xd8>
 800e470:	2973      	cmp	r1, #115	; 0x73
 800e472:	f000 809d 	beq.w	800e5b0 <_printf_i+0x1a4>
 800e476:	d808      	bhi.n	800e48a <_printf_i+0x7e>
 800e478:	296f      	cmp	r1, #111	; 0x6f
 800e47a:	d020      	beq.n	800e4be <_printf_i+0xb2>
 800e47c:	2970      	cmp	r1, #112	; 0x70
 800e47e:	d1dd      	bne.n	800e43c <_printf_i+0x30>
 800e480:	6823      	ldr	r3, [r4, #0]
 800e482:	f043 0320 	orr.w	r3, r3, #32
 800e486:	6023      	str	r3, [r4, #0]
 800e488:	e003      	b.n	800e492 <_printf_i+0x86>
 800e48a:	2975      	cmp	r1, #117	; 0x75
 800e48c:	d017      	beq.n	800e4be <_printf_i+0xb2>
 800e48e:	2978      	cmp	r1, #120	; 0x78
 800e490:	d1d4      	bne.n	800e43c <_printf_i+0x30>
 800e492:	2378      	movs	r3, #120	; 0x78
 800e494:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e498:	4864      	ldr	r0, [pc, #400]	; (800e62c <_printf_i+0x220>)
 800e49a:	e055      	b.n	800e548 <_printf_i+0x13c>
 800e49c:	6813      	ldr	r3, [r2, #0]
 800e49e:	1d19      	adds	r1, r3, #4
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	6011      	str	r1, [r2, #0]
 800e4a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	e08c      	b.n	800e5ca <_printf_i+0x1be>
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	6011      	str	r1, [r2, #0]
 800e4b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e4b8:	bf18      	it	ne
 800e4ba:	b21b      	sxthne	r3, r3
 800e4bc:	e7cf      	b.n	800e45e <_printf_i+0x52>
 800e4be:	6813      	ldr	r3, [r2, #0]
 800e4c0:	6825      	ldr	r5, [r4, #0]
 800e4c2:	1d18      	adds	r0, r3, #4
 800e4c4:	6010      	str	r0, [r2, #0]
 800e4c6:	0628      	lsls	r0, r5, #24
 800e4c8:	d501      	bpl.n	800e4ce <_printf_i+0xc2>
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	e002      	b.n	800e4d4 <_printf_i+0xc8>
 800e4ce:	0668      	lsls	r0, r5, #25
 800e4d0:	d5fb      	bpl.n	800e4ca <_printf_i+0xbe>
 800e4d2:	881b      	ldrh	r3, [r3, #0]
 800e4d4:	4854      	ldr	r0, [pc, #336]	; (800e628 <_printf_i+0x21c>)
 800e4d6:	296f      	cmp	r1, #111	; 0x6f
 800e4d8:	bf14      	ite	ne
 800e4da:	220a      	movne	r2, #10
 800e4dc:	2208      	moveq	r2, #8
 800e4de:	2100      	movs	r1, #0
 800e4e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e4e4:	6865      	ldr	r5, [r4, #4]
 800e4e6:	60a5      	str	r5, [r4, #8]
 800e4e8:	2d00      	cmp	r5, #0
 800e4ea:	f2c0 8095 	blt.w	800e618 <_printf_i+0x20c>
 800e4ee:	6821      	ldr	r1, [r4, #0]
 800e4f0:	f021 0104 	bic.w	r1, r1, #4
 800e4f4:	6021      	str	r1, [r4, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d13d      	bne.n	800e576 <_printf_i+0x16a>
 800e4fa:	2d00      	cmp	r5, #0
 800e4fc:	f040 808e 	bne.w	800e61c <_printf_i+0x210>
 800e500:	4665      	mov	r5, ip
 800e502:	2a08      	cmp	r2, #8
 800e504:	d10b      	bne.n	800e51e <_printf_i+0x112>
 800e506:	6823      	ldr	r3, [r4, #0]
 800e508:	07db      	lsls	r3, r3, #31
 800e50a:	d508      	bpl.n	800e51e <_printf_i+0x112>
 800e50c:	6923      	ldr	r3, [r4, #16]
 800e50e:	6862      	ldr	r2, [r4, #4]
 800e510:	429a      	cmp	r2, r3
 800e512:	bfde      	ittt	le
 800e514:	2330      	movle	r3, #48	; 0x30
 800e516:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e51a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e51e:	ebac 0305 	sub.w	r3, ip, r5
 800e522:	6123      	str	r3, [r4, #16]
 800e524:	f8cd 8000 	str.w	r8, [sp]
 800e528:	463b      	mov	r3, r7
 800e52a:	aa03      	add	r2, sp, #12
 800e52c:	4621      	mov	r1, r4
 800e52e:	4630      	mov	r0, r6
 800e530:	f7ff fef6 	bl	800e320 <_printf_common>
 800e534:	3001      	adds	r0, #1
 800e536:	d14d      	bne.n	800e5d4 <_printf_i+0x1c8>
 800e538:	f04f 30ff 	mov.w	r0, #4294967295
 800e53c:	b005      	add	sp, #20
 800e53e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e542:	4839      	ldr	r0, [pc, #228]	; (800e628 <_printf_i+0x21c>)
 800e544:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e548:	6813      	ldr	r3, [r2, #0]
 800e54a:	6821      	ldr	r1, [r4, #0]
 800e54c:	1d1d      	adds	r5, r3, #4
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	6015      	str	r5, [r2, #0]
 800e552:	060a      	lsls	r2, r1, #24
 800e554:	d50b      	bpl.n	800e56e <_printf_i+0x162>
 800e556:	07ca      	lsls	r2, r1, #31
 800e558:	bf44      	itt	mi
 800e55a:	f041 0120 	orrmi.w	r1, r1, #32
 800e55e:	6021      	strmi	r1, [r4, #0]
 800e560:	b91b      	cbnz	r3, 800e56a <_printf_i+0x15e>
 800e562:	6822      	ldr	r2, [r4, #0]
 800e564:	f022 0220 	bic.w	r2, r2, #32
 800e568:	6022      	str	r2, [r4, #0]
 800e56a:	2210      	movs	r2, #16
 800e56c:	e7b7      	b.n	800e4de <_printf_i+0xd2>
 800e56e:	064d      	lsls	r5, r1, #25
 800e570:	bf48      	it	mi
 800e572:	b29b      	uxthmi	r3, r3
 800e574:	e7ef      	b.n	800e556 <_printf_i+0x14a>
 800e576:	4665      	mov	r5, ip
 800e578:	fbb3 f1f2 	udiv	r1, r3, r2
 800e57c:	fb02 3311 	mls	r3, r2, r1, r3
 800e580:	5cc3      	ldrb	r3, [r0, r3]
 800e582:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e586:	460b      	mov	r3, r1
 800e588:	2900      	cmp	r1, #0
 800e58a:	d1f5      	bne.n	800e578 <_printf_i+0x16c>
 800e58c:	e7b9      	b.n	800e502 <_printf_i+0xf6>
 800e58e:	6813      	ldr	r3, [r2, #0]
 800e590:	6825      	ldr	r5, [r4, #0]
 800e592:	6961      	ldr	r1, [r4, #20]
 800e594:	1d18      	adds	r0, r3, #4
 800e596:	6010      	str	r0, [r2, #0]
 800e598:	0628      	lsls	r0, r5, #24
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	d501      	bpl.n	800e5a2 <_printf_i+0x196>
 800e59e:	6019      	str	r1, [r3, #0]
 800e5a0:	e002      	b.n	800e5a8 <_printf_i+0x19c>
 800e5a2:	066a      	lsls	r2, r5, #25
 800e5a4:	d5fb      	bpl.n	800e59e <_printf_i+0x192>
 800e5a6:	8019      	strh	r1, [r3, #0]
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	6123      	str	r3, [r4, #16]
 800e5ac:	4665      	mov	r5, ip
 800e5ae:	e7b9      	b.n	800e524 <_printf_i+0x118>
 800e5b0:	6813      	ldr	r3, [r2, #0]
 800e5b2:	1d19      	adds	r1, r3, #4
 800e5b4:	6011      	str	r1, [r2, #0]
 800e5b6:	681d      	ldr	r5, [r3, #0]
 800e5b8:	6862      	ldr	r2, [r4, #4]
 800e5ba:	2100      	movs	r1, #0
 800e5bc:	4628      	mov	r0, r5
 800e5be:	f7f9 fd47 	bl	8008050 <memchr>
 800e5c2:	b108      	cbz	r0, 800e5c8 <_printf_i+0x1bc>
 800e5c4:	1b40      	subs	r0, r0, r5
 800e5c6:	6060      	str	r0, [r4, #4]
 800e5c8:	6863      	ldr	r3, [r4, #4]
 800e5ca:	6123      	str	r3, [r4, #16]
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5d2:	e7a7      	b.n	800e524 <_printf_i+0x118>
 800e5d4:	6923      	ldr	r3, [r4, #16]
 800e5d6:	462a      	mov	r2, r5
 800e5d8:	4639      	mov	r1, r7
 800e5da:	4630      	mov	r0, r6
 800e5dc:	47c0      	blx	r8
 800e5de:	3001      	adds	r0, #1
 800e5e0:	d0aa      	beq.n	800e538 <_printf_i+0x12c>
 800e5e2:	6823      	ldr	r3, [r4, #0]
 800e5e4:	079b      	lsls	r3, r3, #30
 800e5e6:	d413      	bmi.n	800e610 <_printf_i+0x204>
 800e5e8:	68e0      	ldr	r0, [r4, #12]
 800e5ea:	9b03      	ldr	r3, [sp, #12]
 800e5ec:	4298      	cmp	r0, r3
 800e5ee:	bfb8      	it	lt
 800e5f0:	4618      	movlt	r0, r3
 800e5f2:	e7a3      	b.n	800e53c <_printf_i+0x130>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	464a      	mov	r2, r9
 800e5f8:	4639      	mov	r1, r7
 800e5fa:	4630      	mov	r0, r6
 800e5fc:	47c0      	blx	r8
 800e5fe:	3001      	adds	r0, #1
 800e600:	d09a      	beq.n	800e538 <_printf_i+0x12c>
 800e602:	3501      	adds	r5, #1
 800e604:	68e3      	ldr	r3, [r4, #12]
 800e606:	9a03      	ldr	r2, [sp, #12]
 800e608:	1a9b      	subs	r3, r3, r2
 800e60a:	42ab      	cmp	r3, r5
 800e60c:	dcf2      	bgt.n	800e5f4 <_printf_i+0x1e8>
 800e60e:	e7eb      	b.n	800e5e8 <_printf_i+0x1dc>
 800e610:	2500      	movs	r5, #0
 800e612:	f104 0919 	add.w	r9, r4, #25
 800e616:	e7f5      	b.n	800e604 <_printf_i+0x1f8>
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d1ac      	bne.n	800e576 <_printf_i+0x16a>
 800e61c:	7803      	ldrb	r3, [r0, #0]
 800e61e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e622:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e626:	e76c      	b.n	800e502 <_printf_i+0xf6>
 800e628:	08011ca7 	.word	0x08011ca7
 800e62c:	08011cb8 	.word	0x08011cb8

0800e630 <_scanf_float>:
 800e630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e634:	469a      	mov	sl, r3
 800e636:	688b      	ldr	r3, [r1, #8]
 800e638:	4616      	mov	r6, r2
 800e63a:	1e5a      	subs	r2, r3, #1
 800e63c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e640:	b087      	sub	sp, #28
 800e642:	bf83      	ittte	hi
 800e644:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800e648:	189b      	addhi	r3, r3, r2
 800e64a:	9301      	strhi	r3, [sp, #4]
 800e64c:	2300      	movls	r3, #0
 800e64e:	bf86      	itte	hi
 800e650:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e654:	608b      	strhi	r3, [r1, #8]
 800e656:	9301      	strls	r3, [sp, #4]
 800e658:	680b      	ldr	r3, [r1, #0]
 800e65a:	4688      	mov	r8, r1
 800e65c:	f04f 0b00 	mov.w	fp, #0
 800e660:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e664:	f848 3b1c 	str.w	r3, [r8], #28
 800e668:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800e66c:	4607      	mov	r7, r0
 800e66e:	460c      	mov	r4, r1
 800e670:	4645      	mov	r5, r8
 800e672:	465a      	mov	r2, fp
 800e674:	46d9      	mov	r9, fp
 800e676:	f8cd b008 	str.w	fp, [sp, #8]
 800e67a:	68a1      	ldr	r1, [r4, #8]
 800e67c:	b181      	cbz	r1, 800e6a0 <_scanf_float+0x70>
 800e67e:	6833      	ldr	r3, [r6, #0]
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	2b49      	cmp	r3, #73	; 0x49
 800e684:	d071      	beq.n	800e76a <_scanf_float+0x13a>
 800e686:	d84d      	bhi.n	800e724 <_scanf_float+0xf4>
 800e688:	2b39      	cmp	r3, #57	; 0x39
 800e68a:	d840      	bhi.n	800e70e <_scanf_float+0xde>
 800e68c:	2b31      	cmp	r3, #49	; 0x31
 800e68e:	f080 8088 	bcs.w	800e7a2 <_scanf_float+0x172>
 800e692:	2b2d      	cmp	r3, #45	; 0x2d
 800e694:	f000 8090 	beq.w	800e7b8 <_scanf_float+0x188>
 800e698:	d815      	bhi.n	800e6c6 <_scanf_float+0x96>
 800e69a:	2b2b      	cmp	r3, #43	; 0x2b
 800e69c:	f000 808c 	beq.w	800e7b8 <_scanf_float+0x188>
 800e6a0:	f1b9 0f00 	cmp.w	r9, #0
 800e6a4:	d003      	beq.n	800e6ae <_scanf_float+0x7e>
 800e6a6:	6823      	ldr	r3, [r4, #0]
 800e6a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	3a01      	subs	r2, #1
 800e6b0:	2a01      	cmp	r2, #1
 800e6b2:	f200 80ea 	bhi.w	800e88a <_scanf_float+0x25a>
 800e6b6:	4545      	cmp	r5, r8
 800e6b8:	f200 80dc 	bhi.w	800e874 <_scanf_float+0x244>
 800e6bc:	2601      	movs	r6, #1
 800e6be:	4630      	mov	r0, r6
 800e6c0:	b007      	add	sp, #28
 800e6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6c6:	2b2e      	cmp	r3, #46	; 0x2e
 800e6c8:	f000 809f 	beq.w	800e80a <_scanf_float+0x1da>
 800e6cc:	2b30      	cmp	r3, #48	; 0x30
 800e6ce:	d1e7      	bne.n	800e6a0 <_scanf_float+0x70>
 800e6d0:	6820      	ldr	r0, [r4, #0]
 800e6d2:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e6d6:	d064      	beq.n	800e7a2 <_scanf_float+0x172>
 800e6d8:	9b01      	ldr	r3, [sp, #4]
 800e6da:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800e6de:	6020      	str	r0, [r4, #0]
 800e6e0:	f109 0901 	add.w	r9, r9, #1
 800e6e4:	b11b      	cbz	r3, 800e6ee <_scanf_float+0xbe>
 800e6e6:	3b01      	subs	r3, #1
 800e6e8:	3101      	adds	r1, #1
 800e6ea:	9301      	str	r3, [sp, #4]
 800e6ec:	60a1      	str	r1, [r4, #8]
 800e6ee:	68a3      	ldr	r3, [r4, #8]
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	60a3      	str	r3, [r4, #8]
 800e6f4:	6923      	ldr	r3, [r4, #16]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	6123      	str	r3, [r4, #16]
 800e6fa:	6873      	ldr	r3, [r6, #4]
 800e6fc:	3b01      	subs	r3, #1
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	6073      	str	r3, [r6, #4]
 800e702:	f340 80ac 	ble.w	800e85e <_scanf_float+0x22e>
 800e706:	6833      	ldr	r3, [r6, #0]
 800e708:	3301      	adds	r3, #1
 800e70a:	6033      	str	r3, [r6, #0]
 800e70c:	e7b5      	b.n	800e67a <_scanf_float+0x4a>
 800e70e:	2b45      	cmp	r3, #69	; 0x45
 800e710:	f000 8085 	beq.w	800e81e <_scanf_float+0x1ee>
 800e714:	2b46      	cmp	r3, #70	; 0x46
 800e716:	d06a      	beq.n	800e7ee <_scanf_float+0x1be>
 800e718:	2b41      	cmp	r3, #65	; 0x41
 800e71a:	d1c1      	bne.n	800e6a0 <_scanf_float+0x70>
 800e71c:	2a01      	cmp	r2, #1
 800e71e:	d1bf      	bne.n	800e6a0 <_scanf_float+0x70>
 800e720:	2202      	movs	r2, #2
 800e722:	e046      	b.n	800e7b2 <_scanf_float+0x182>
 800e724:	2b65      	cmp	r3, #101	; 0x65
 800e726:	d07a      	beq.n	800e81e <_scanf_float+0x1ee>
 800e728:	d818      	bhi.n	800e75c <_scanf_float+0x12c>
 800e72a:	2b54      	cmp	r3, #84	; 0x54
 800e72c:	d066      	beq.n	800e7fc <_scanf_float+0x1cc>
 800e72e:	d811      	bhi.n	800e754 <_scanf_float+0x124>
 800e730:	2b4e      	cmp	r3, #78	; 0x4e
 800e732:	d1b5      	bne.n	800e6a0 <_scanf_float+0x70>
 800e734:	2a00      	cmp	r2, #0
 800e736:	d146      	bne.n	800e7c6 <_scanf_float+0x196>
 800e738:	f1b9 0f00 	cmp.w	r9, #0
 800e73c:	d145      	bne.n	800e7ca <_scanf_float+0x19a>
 800e73e:	6821      	ldr	r1, [r4, #0]
 800e740:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e744:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e748:	d13f      	bne.n	800e7ca <_scanf_float+0x19a>
 800e74a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e74e:	6021      	str	r1, [r4, #0]
 800e750:	2201      	movs	r2, #1
 800e752:	e02e      	b.n	800e7b2 <_scanf_float+0x182>
 800e754:	2b59      	cmp	r3, #89	; 0x59
 800e756:	d01e      	beq.n	800e796 <_scanf_float+0x166>
 800e758:	2b61      	cmp	r3, #97	; 0x61
 800e75a:	e7de      	b.n	800e71a <_scanf_float+0xea>
 800e75c:	2b6e      	cmp	r3, #110	; 0x6e
 800e75e:	d0e9      	beq.n	800e734 <_scanf_float+0x104>
 800e760:	d815      	bhi.n	800e78e <_scanf_float+0x15e>
 800e762:	2b66      	cmp	r3, #102	; 0x66
 800e764:	d043      	beq.n	800e7ee <_scanf_float+0x1be>
 800e766:	2b69      	cmp	r3, #105	; 0x69
 800e768:	d19a      	bne.n	800e6a0 <_scanf_float+0x70>
 800e76a:	f1bb 0f00 	cmp.w	fp, #0
 800e76e:	d138      	bne.n	800e7e2 <_scanf_float+0x1b2>
 800e770:	f1b9 0f00 	cmp.w	r9, #0
 800e774:	d197      	bne.n	800e6a6 <_scanf_float+0x76>
 800e776:	6821      	ldr	r1, [r4, #0]
 800e778:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e77c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e780:	d195      	bne.n	800e6ae <_scanf_float+0x7e>
 800e782:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e786:	6021      	str	r1, [r4, #0]
 800e788:	f04f 0b01 	mov.w	fp, #1
 800e78c:	e011      	b.n	800e7b2 <_scanf_float+0x182>
 800e78e:	2b74      	cmp	r3, #116	; 0x74
 800e790:	d034      	beq.n	800e7fc <_scanf_float+0x1cc>
 800e792:	2b79      	cmp	r3, #121	; 0x79
 800e794:	d184      	bne.n	800e6a0 <_scanf_float+0x70>
 800e796:	f1bb 0f07 	cmp.w	fp, #7
 800e79a:	d181      	bne.n	800e6a0 <_scanf_float+0x70>
 800e79c:	f04f 0b08 	mov.w	fp, #8
 800e7a0:	e007      	b.n	800e7b2 <_scanf_float+0x182>
 800e7a2:	eb12 0f0b 	cmn.w	r2, fp
 800e7a6:	f47f af7b 	bne.w	800e6a0 <_scanf_float+0x70>
 800e7aa:	6821      	ldr	r1, [r4, #0]
 800e7ac:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800e7b0:	6021      	str	r1, [r4, #0]
 800e7b2:	702b      	strb	r3, [r5, #0]
 800e7b4:	3501      	adds	r5, #1
 800e7b6:	e79a      	b.n	800e6ee <_scanf_float+0xbe>
 800e7b8:	6821      	ldr	r1, [r4, #0]
 800e7ba:	0608      	lsls	r0, r1, #24
 800e7bc:	f57f af70 	bpl.w	800e6a0 <_scanf_float+0x70>
 800e7c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e7c4:	e7f4      	b.n	800e7b0 <_scanf_float+0x180>
 800e7c6:	2a02      	cmp	r2, #2
 800e7c8:	d047      	beq.n	800e85a <_scanf_float+0x22a>
 800e7ca:	f1bb 0f01 	cmp.w	fp, #1
 800e7ce:	d003      	beq.n	800e7d8 <_scanf_float+0x1a8>
 800e7d0:	f1bb 0f04 	cmp.w	fp, #4
 800e7d4:	f47f af64 	bne.w	800e6a0 <_scanf_float+0x70>
 800e7d8:	f10b 0b01 	add.w	fp, fp, #1
 800e7dc:	fa5f fb8b 	uxtb.w	fp, fp
 800e7e0:	e7e7      	b.n	800e7b2 <_scanf_float+0x182>
 800e7e2:	f1bb 0f03 	cmp.w	fp, #3
 800e7e6:	d0f7      	beq.n	800e7d8 <_scanf_float+0x1a8>
 800e7e8:	f1bb 0f05 	cmp.w	fp, #5
 800e7ec:	e7f2      	b.n	800e7d4 <_scanf_float+0x1a4>
 800e7ee:	f1bb 0f02 	cmp.w	fp, #2
 800e7f2:	f47f af55 	bne.w	800e6a0 <_scanf_float+0x70>
 800e7f6:	f04f 0b03 	mov.w	fp, #3
 800e7fa:	e7da      	b.n	800e7b2 <_scanf_float+0x182>
 800e7fc:	f1bb 0f06 	cmp.w	fp, #6
 800e800:	f47f af4e 	bne.w	800e6a0 <_scanf_float+0x70>
 800e804:	f04f 0b07 	mov.w	fp, #7
 800e808:	e7d3      	b.n	800e7b2 <_scanf_float+0x182>
 800e80a:	6821      	ldr	r1, [r4, #0]
 800e80c:	0588      	lsls	r0, r1, #22
 800e80e:	f57f af47 	bpl.w	800e6a0 <_scanf_float+0x70>
 800e812:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800e816:	6021      	str	r1, [r4, #0]
 800e818:	f8cd 9008 	str.w	r9, [sp, #8]
 800e81c:	e7c9      	b.n	800e7b2 <_scanf_float+0x182>
 800e81e:	6821      	ldr	r1, [r4, #0]
 800e820:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800e824:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e828:	d006      	beq.n	800e838 <_scanf_float+0x208>
 800e82a:	0548      	lsls	r0, r1, #21
 800e82c:	f57f af38 	bpl.w	800e6a0 <_scanf_float+0x70>
 800e830:	f1b9 0f00 	cmp.w	r9, #0
 800e834:	f43f af3b 	beq.w	800e6ae <_scanf_float+0x7e>
 800e838:	0588      	lsls	r0, r1, #22
 800e83a:	bf58      	it	pl
 800e83c:	9802      	ldrpl	r0, [sp, #8]
 800e83e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e842:	bf58      	it	pl
 800e844:	eba9 0000 	subpl.w	r0, r9, r0
 800e848:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800e84c:	bf58      	it	pl
 800e84e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800e852:	6021      	str	r1, [r4, #0]
 800e854:	f04f 0900 	mov.w	r9, #0
 800e858:	e7ab      	b.n	800e7b2 <_scanf_float+0x182>
 800e85a:	2203      	movs	r2, #3
 800e85c:	e7a9      	b.n	800e7b2 <_scanf_float+0x182>
 800e85e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e862:	9205      	str	r2, [sp, #20]
 800e864:	4631      	mov	r1, r6
 800e866:	4638      	mov	r0, r7
 800e868:	4798      	blx	r3
 800e86a:	9a05      	ldr	r2, [sp, #20]
 800e86c:	2800      	cmp	r0, #0
 800e86e:	f43f af04 	beq.w	800e67a <_scanf_float+0x4a>
 800e872:	e715      	b.n	800e6a0 <_scanf_float+0x70>
 800e874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e878:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e87c:	4632      	mov	r2, r6
 800e87e:	4638      	mov	r0, r7
 800e880:	4798      	blx	r3
 800e882:	6923      	ldr	r3, [r4, #16]
 800e884:	3b01      	subs	r3, #1
 800e886:	6123      	str	r3, [r4, #16]
 800e888:	e715      	b.n	800e6b6 <_scanf_float+0x86>
 800e88a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e88e:	2b06      	cmp	r3, #6
 800e890:	d80a      	bhi.n	800e8a8 <_scanf_float+0x278>
 800e892:	f1bb 0f02 	cmp.w	fp, #2
 800e896:	d968      	bls.n	800e96a <_scanf_float+0x33a>
 800e898:	f1ab 0b03 	sub.w	fp, fp, #3
 800e89c:	fa5f fb8b 	uxtb.w	fp, fp
 800e8a0:	eba5 0b0b 	sub.w	fp, r5, fp
 800e8a4:	455d      	cmp	r5, fp
 800e8a6:	d14b      	bne.n	800e940 <_scanf_float+0x310>
 800e8a8:	6823      	ldr	r3, [r4, #0]
 800e8aa:	05da      	lsls	r2, r3, #23
 800e8ac:	d51f      	bpl.n	800e8ee <_scanf_float+0x2be>
 800e8ae:	055b      	lsls	r3, r3, #21
 800e8b0:	d468      	bmi.n	800e984 <_scanf_float+0x354>
 800e8b2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e8b6:	6923      	ldr	r3, [r4, #16]
 800e8b8:	2965      	cmp	r1, #101	; 0x65
 800e8ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800e8be:	f105 3bff 	add.w	fp, r5, #4294967295
 800e8c2:	6123      	str	r3, [r4, #16]
 800e8c4:	d00d      	beq.n	800e8e2 <_scanf_float+0x2b2>
 800e8c6:	2945      	cmp	r1, #69	; 0x45
 800e8c8:	d00b      	beq.n	800e8e2 <_scanf_float+0x2b2>
 800e8ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8ce:	4632      	mov	r2, r6
 800e8d0:	4638      	mov	r0, r7
 800e8d2:	4798      	blx	r3
 800e8d4:	6923      	ldr	r3, [r4, #16]
 800e8d6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	f1a5 0b02 	sub.w	fp, r5, #2
 800e8e0:	6123      	str	r3, [r4, #16]
 800e8e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8e6:	4632      	mov	r2, r6
 800e8e8:	4638      	mov	r0, r7
 800e8ea:	4798      	blx	r3
 800e8ec:	465d      	mov	r5, fp
 800e8ee:	6826      	ldr	r6, [r4, #0]
 800e8f0:	f016 0610 	ands.w	r6, r6, #16
 800e8f4:	d17a      	bne.n	800e9ec <_scanf_float+0x3bc>
 800e8f6:	702e      	strb	r6, [r5, #0]
 800e8f8:	6823      	ldr	r3, [r4, #0]
 800e8fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e8fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e902:	d142      	bne.n	800e98a <_scanf_float+0x35a>
 800e904:	9b02      	ldr	r3, [sp, #8]
 800e906:	eba9 0303 	sub.w	r3, r9, r3
 800e90a:	425a      	negs	r2, r3
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d149      	bne.n	800e9a4 <_scanf_float+0x374>
 800e910:	2200      	movs	r2, #0
 800e912:	4641      	mov	r1, r8
 800e914:	4638      	mov	r0, r7
 800e916:	f000 ff87 	bl	800f828 <_strtod_r>
 800e91a:	6825      	ldr	r5, [r4, #0]
 800e91c:	f8da 3000 	ldr.w	r3, [sl]
 800e920:	f015 0f02 	tst.w	r5, #2
 800e924:	f103 0204 	add.w	r2, r3, #4
 800e928:	ec59 8b10 	vmov	r8, r9, d0
 800e92c:	f8ca 2000 	str.w	r2, [sl]
 800e930:	d043      	beq.n	800e9ba <_scanf_float+0x38a>
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	e9c3 8900 	strd	r8, r9, [r3]
 800e938:	68e3      	ldr	r3, [r4, #12]
 800e93a:	3301      	adds	r3, #1
 800e93c:	60e3      	str	r3, [r4, #12]
 800e93e:	e6be      	b.n	800e6be <_scanf_float+0x8e>
 800e940:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e944:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e948:	4632      	mov	r2, r6
 800e94a:	4638      	mov	r0, r7
 800e94c:	4798      	blx	r3
 800e94e:	6923      	ldr	r3, [r4, #16]
 800e950:	3b01      	subs	r3, #1
 800e952:	6123      	str	r3, [r4, #16]
 800e954:	e7a6      	b.n	800e8a4 <_scanf_float+0x274>
 800e956:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e95a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e95e:	4632      	mov	r2, r6
 800e960:	4638      	mov	r0, r7
 800e962:	4798      	blx	r3
 800e964:	6923      	ldr	r3, [r4, #16]
 800e966:	3b01      	subs	r3, #1
 800e968:	6123      	str	r3, [r4, #16]
 800e96a:	4545      	cmp	r5, r8
 800e96c:	d8f3      	bhi.n	800e956 <_scanf_float+0x326>
 800e96e:	e6a5      	b.n	800e6bc <_scanf_float+0x8c>
 800e970:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e974:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e978:	4632      	mov	r2, r6
 800e97a:	4638      	mov	r0, r7
 800e97c:	4798      	blx	r3
 800e97e:	6923      	ldr	r3, [r4, #16]
 800e980:	3b01      	subs	r3, #1
 800e982:	6123      	str	r3, [r4, #16]
 800e984:	4545      	cmp	r5, r8
 800e986:	d8f3      	bhi.n	800e970 <_scanf_float+0x340>
 800e988:	e698      	b.n	800e6bc <_scanf_float+0x8c>
 800e98a:	9b03      	ldr	r3, [sp, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d0bf      	beq.n	800e910 <_scanf_float+0x2e0>
 800e990:	9904      	ldr	r1, [sp, #16]
 800e992:	230a      	movs	r3, #10
 800e994:	4632      	mov	r2, r6
 800e996:	3101      	adds	r1, #1
 800e998:	4638      	mov	r0, r7
 800e99a:	f000 ffd1 	bl	800f940 <_strtol_r>
 800e99e:	9b03      	ldr	r3, [sp, #12]
 800e9a0:	9d04      	ldr	r5, [sp, #16]
 800e9a2:	1ac2      	subs	r2, r0, r3
 800e9a4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e9a8:	429d      	cmp	r5, r3
 800e9aa:	bf28      	it	cs
 800e9ac:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800e9b0:	490f      	ldr	r1, [pc, #60]	; (800e9f0 <_scanf_float+0x3c0>)
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	f000 f8c4 	bl	800eb40 <siprintf>
 800e9b8:	e7aa      	b.n	800e910 <_scanf_float+0x2e0>
 800e9ba:	f015 0504 	ands.w	r5, r5, #4
 800e9be:	d1b8      	bne.n	800e932 <_scanf_float+0x302>
 800e9c0:	681f      	ldr	r7, [r3, #0]
 800e9c2:	ee10 2a10 	vmov	r2, s0
 800e9c6:	464b      	mov	r3, r9
 800e9c8:	ee10 0a10 	vmov	r0, s0
 800e9cc:	4649      	mov	r1, r9
 800e9ce:	f7f9 ffe5 	bl	800899c <__aeabi_dcmpun>
 800e9d2:	b128      	cbz	r0, 800e9e0 <_scanf_float+0x3b0>
 800e9d4:	4628      	mov	r0, r5
 800e9d6:	f000 f8ad 	bl	800eb34 <nanf>
 800e9da:	ed87 0a00 	vstr	s0, [r7]
 800e9de:	e7ab      	b.n	800e938 <_scanf_float+0x308>
 800e9e0:	4640      	mov	r0, r8
 800e9e2:	4649      	mov	r1, r9
 800e9e4:	f7fa f838 	bl	8008a58 <__aeabi_d2f>
 800e9e8:	6038      	str	r0, [r7, #0]
 800e9ea:	e7a5      	b.n	800e938 <_scanf_float+0x308>
 800e9ec:	2600      	movs	r6, #0
 800e9ee:	e666      	b.n	800e6be <_scanf_float+0x8e>
 800e9f0:	08011cc9 	.word	0x08011cc9

0800e9f4 <iprintf>:
 800e9f4:	b40f      	push	{r0, r1, r2, r3}
 800e9f6:	4b0a      	ldr	r3, [pc, #40]	; (800ea20 <iprintf+0x2c>)
 800e9f8:	b513      	push	{r0, r1, r4, lr}
 800e9fa:	681c      	ldr	r4, [r3, #0]
 800e9fc:	b124      	cbz	r4, 800ea08 <iprintf+0x14>
 800e9fe:	69a3      	ldr	r3, [r4, #24]
 800ea00:	b913      	cbnz	r3, 800ea08 <iprintf+0x14>
 800ea02:	4620      	mov	r0, r4
 800ea04:	f7fe feaa 	bl	800d75c <__sinit>
 800ea08:	ab05      	add	r3, sp, #20
 800ea0a:	9a04      	ldr	r2, [sp, #16]
 800ea0c:	68a1      	ldr	r1, [r4, #8]
 800ea0e:	9301      	str	r3, [sp, #4]
 800ea10:	4620      	mov	r0, r4
 800ea12:	f7ff f89b 	bl	800db4c <_vfiprintf_r>
 800ea16:	b002      	add	sp, #8
 800ea18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea1c:	b004      	add	sp, #16
 800ea1e:	4770      	bx	lr
 800ea20:	2000002c 	.word	0x2000002c

0800ea24 <putchar>:
 800ea24:	b538      	push	{r3, r4, r5, lr}
 800ea26:	4b08      	ldr	r3, [pc, #32]	; (800ea48 <putchar+0x24>)
 800ea28:	681c      	ldr	r4, [r3, #0]
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	b124      	cbz	r4, 800ea38 <putchar+0x14>
 800ea2e:	69a3      	ldr	r3, [r4, #24]
 800ea30:	b913      	cbnz	r3, 800ea38 <putchar+0x14>
 800ea32:	4620      	mov	r0, r4
 800ea34:	f7fe fe92 	bl	800d75c <__sinit>
 800ea38:	68a2      	ldr	r2, [r4, #8]
 800ea3a:	4629      	mov	r1, r5
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea42:	f002 bfdd 	b.w	8011a00 <_putc_r>
 800ea46:	bf00      	nop
 800ea48:	2000002c 	.word	0x2000002c

0800ea4c <_puts_r>:
 800ea4c:	b570      	push	{r4, r5, r6, lr}
 800ea4e:	460e      	mov	r6, r1
 800ea50:	4605      	mov	r5, r0
 800ea52:	b118      	cbz	r0, 800ea5c <_puts_r+0x10>
 800ea54:	6983      	ldr	r3, [r0, #24]
 800ea56:	b90b      	cbnz	r3, 800ea5c <_puts_r+0x10>
 800ea58:	f7fe fe80 	bl	800d75c <__sinit>
 800ea5c:	69ab      	ldr	r3, [r5, #24]
 800ea5e:	68ac      	ldr	r4, [r5, #8]
 800ea60:	b913      	cbnz	r3, 800ea68 <_puts_r+0x1c>
 800ea62:	4628      	mov	r0, r5
 800ea64:	f7fe fe7a 	bl	800d75c <__sinit>
 800ea68:	4b23      	ldr	r3, [pc, #140]	; (800eaf8 <_puts_r+0xac>)
 800ea6a:	429c      	cmp	r4, r3
 800ea6c:	d117      	bne.n	800ea9e <_puts_r+0x52>
 800ea6e:	686c      	ldr	r4, [r5, #4]
 800ea70:	89a3      	ldrh	r3, [r4, #12]
 800ea72:	071b      	lsls	r3, r3, #28
 800ea74:	d51d      	bpl.n	800eab2 <_puts_r+0x66>
 800ea76:	6923      	ldr	r3, [r4, #16]
 800ea78:	b1db      	cbz	r3, 800eab2 <_puts_r+0x66>
 800ea7a:	3e01      	subs	r6, #1
 800ea7c:	68a3      	ldr	r3, [r4, #8]
 800ea7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ea82:	3b01      	subs	r3, #1
 800ea84:	60a3      	str	r3, [r4, #8]
 800ea86:	b9e9      	cbnz	r1, 800eac4 <_puts_r+0x78>
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	da2e      	bge.n	800eaea <_puts_r+0x9e>
 800ea8c:	4622      	mov	r2, r4
 800ea8e:	210a      	movs	r1, #10
 800ea90:	4628      	mov	r0, r5
 800ea92:	f000 ff67 	bl	800f964 <__swbuf_r>
 800ea96:	3001      	adds	r0, #1
 800ea98:	d011      	beq.n	800eabe <_puts_r+0x72>
 800ea9a:	200a      	movs	r0, #10
 800ea9c:	e011      	b.n	800eac2 <_puts_r+0x76>
 800ea9e:	4b17      	ldr	r3, [pc, #92]	; (800eafc <_puts_r+0xb0>)
 800eaa0:	429c      	cmp	r4, r3
 800eaa2:	d101      	bne.n	800eaa8 <_puts_r+0x5c>
 800eaa4:	68ac      	ldr	r4, [r5, #8]
 800eaa6:	e7e3      	b.n	800ea70 <_puts_r+0x24>
 800eaa8:	4b15      	ldr	r3, [pc, #84]	; (800eb00 <_puts_r+0xb4>)
 800eaaa:	429c      	cmp	r4, r3
 800eaac:	bf08      	it	eq
 800eaae:	68ec      	ldreq	r4, [r5, #12]
 800eab0:	e7de      	b.n	800ea70 <_puts_r+0x24>
 800eab2:	4621      	mov	r1, r4
 800eab4:	4628      	mov	r0, r5
 800eab6:	f000 ffb9 	bl	800fa2c <__swsetup_r>
 800eaba:	2800      	cmp	r0, #0
 800eabc:	d0dd      	beq.n	800ea7a <_puts_r+0x2e>
 800eabe:	f04f 30ff 	mov.w	r0, #4294967295
 800eac2:	bd70      	pop	{r4, r5, r6, pc}
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	da04      	bge.n	800ead2 <_puts_r+0x86>
 800eac8:	69a2      	ldr	r2, [r4, #24]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	dc06      	bgt.n	800eadc <_puts_r+0x90>
 800eace:	290a      	cmp	r1, #10
 800ead0:	d004      	beq.n	800eadc <_puts_r+0x90>
 800ead2:	6823      	ldr	r3, [r4, #0]
 800ead4:	1c5a      	adds	r2, r3, #1
 800ead6:	6022      	str	r2, [r4, #0]
 800ead8:	7019      	strb	r1, [r3, #0]
 800eada:	e7cf      	b.n	800ea7c <_puts_r+0x30>
 800eadc:	4622      	mov	r2, r4
 800eade:	4628      	mov	r0, r5
 800eae0:	f000 ff40 	bl	800f964 <__swbuf_r>
 800eae4:	3001      	adds	r0, #1
 800eae6:	d1c9      	bne.n	800ea7c <_puts_r+0x30>
 800eae8:	e7e9      	b.n	800eabe <_puts_r+0x72>
 800eaea:	6823      	ldr	r3, [r4, #0]
 800eaec:	200a      	movs	r0, #10
 800eaee:	1c5a      	adds	r2, r3, #1
 800eaf0:	6022      	str	r2, [r4, #0]
 800eaf2:	7018      	strb	r0, [r3, #0]
 800eaf4:	e7e5      	b.n	800eac2 <_puts_r+0x76>
 800eaf6:	bf00      	nop
 800eaf8:	08011c40 	.word	0x08011c40
 800eafc:	08011c60 	.word	0x08011c60
 800eb00:	08011c20 	.word	0x08011c20

0800eb04 <puts>:
 800eb04:	4b02      	ldr	r3, [pc, #8]	; (800eb10 <puts+0xc>)
 800eb06:	4601      	mov	r1, r0
 800eb08:	6818      	ldr	r0, [r3, #0]
 800eb0a:	f7ff bf9f 	b.w	800ea4c <_puts_r>
 800eb0e:	bf00      	nop
 800eb10:	2000002c 	.word	0x2000002c

0800eb14 <_sbrk_r>:
 800eb14:	b538      	push	{r3, r4, r5, lr}
 800eb16:	4c06      	ldr	r4, [pc, #24]	; (800eb30 <_sbrk_r+0x1c>)
 800eb18:	2300      	movs	r3, #0
 800eb1a:	4605      	mov	r5, r0
 800eb1c:	4608      	mov	r0, r1
 800eb1e:	6023      	str	r3, [r4, #0]
 800eb20:	f7fb fbd4 	bl	800a2cc <_sbrk>
 800eb24:	1c43      	adds	r3, r0, #1
 800eb26:	d102      	bne.n	800eb2e <_sbrk_r+0x1a>
 800eb28:	6823      	ldr	r3, [r4, #0]
 800eb2a:	b103      	cbz	r3, 800eb2e <_sbrk_r+0x1a>
 800eb2c:	602b      	str	r3, [r5, #0]
 800eb2e:	bd38      	pop	{r3, r4, r5, pc}
 800eb30:	20001d20 	.word	0x20001d20

0800eb34 <nanf>:
 800eb34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eb3c <nanf+0x8>
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	7fc00000 	.word	0x7fc00000

0800eb40 <siprintf>:
 800eb40:	b40e      	push	{r1, r2, r3}
 800eb42:	b500      	push	{lr}
 800eb44:	b09c      	sub	sp, #112	; 0x70
 800eb46:	ab1d      	add	r3, sp, #116	; 0x74
 800eb48:	9002      	str	r0, [sp, #8]
 800eb4a:	9006      	str	r0, [sp, #24]
 800eb4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb50:	4809      	ldr	r0, [pc, #36]	; (800eb78 <siprintf+0x38>)
 800eb52:	9107      	str	r1, [sp, #28]
 800eb54:	9104      	str	r1, [sp, #16]
 800eb56:	4909      	ldr	r1, [pc, #36]	; (800eb7c <siprintf+0x3c>)
 800eb58:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb5c:	9105      	str	r1, [sp, #20]
 800eb5e:	6800      	ldr	r0, [r0, #0]
 800eb60:	9301      	str	r3, [sp, #4]
 800eb62:	a902      	add	r1, sp, #8
 800eb64:	f002 fe54 	bl	8011810 <_svfiprintf_r>
 800eb68:	9b02      	ldr	r3, [sp, #8]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	701a      	strb	r2, [r3, #0]
 800eb6e:	b01c      	add	sp, #112	; 0x70
 800eb70:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb74:	b003      	add	sp, #12
 800eb76:	4770      	bx	lr
 800eb78:	2000002c 	.word	0x2000002c
 800eb7c:	ffff0208 	.word	0xffff0208

0800eb80 <__sread>:
 800eb80:	b510      	push	{r4, lr}
 800eb82:	460c      	mov	r4, r1
 800eb84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb88:	f002 ff70 	bl	8011a6c <_read_r>
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	bfab      	itete	ge
 800eb90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb92:	89a3      	ldrhlt	r3, [r4, #12]
 800eb94:	181b      	addge	r3, r3, r0
 800eb96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb9a:	bfac      	ite	ge
 800eb9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb9e:	81a3      	strhlt	r3, [r4, #12]
 800eba0:	bd10      	pop	{r4, pc}

0800eba2 <__swrite>:
 800eba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eba6:	461f      	mov	r7, r3
 800eba8:	898b      	ldrh	r3, [r1, #12]
 800ebaa:	05db      	lsls	r3, r3, #23
 800ebac:	4605      	mov	r5, r0
 800ebae:	460c      	mov	r4, r1
 800ebb0:	4616      	mov	r6, r2
 800ebb2:	d505      	bpl.n	800ebc0 <__swrite+0x1e>
 800ebb4:	2302      	movs	r3, #2
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebbc:	f002 f954 	bl	8010e68 <_lseek_r>
 800ebc0:	89a3      	ldrh	r3, [r4, #12]
 800ebc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebca:	81a3      	strh	r3, [r4, #12]
 800ebcc:	4632      	mov	r2, r6
 800ebce:	463b      	mov	r3, r7
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd6:	f000 bf17 	b.w	800fa08 <_write_r>

0800ebda <__sseek>:
 800ebda:	b510      	push	{r4, lr}
 800ebdc:	460c      	mov	r4, r1
 800ebde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebe2:	f002 f941 	bl	8010e68 <_lseek_r>
 800ebe6:	1c43      	adds	r3, r0, #1
 800ebe8:	89a3      	ldrh	r3, [r4, #12]
 800ebea:	bf15      	itete	ne
 800ebec:	6560      	strne	r0, [r4, #84]	; 0x54
 800ebee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebf6:	81a3      	strheq	r3, [r4, #12]
 800ebf8:	bf18      	it	ne
 800ebfa:	81a3      	strhne	r3, [r4, #12]
 800ebfc:	bd10      	pop	{r4, pc}

0800ebfe <__sclose>:
 800ebfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec02:	f000 bf81 	b.w	800fb08 <_close_r>

0800ec06 <sulp>:
 800ec06:	b570      	push	{r4, r5, r6, lr}
 800ec08:	4604      	mov	r4, r0
 800ec0a:	460d      	mov	r5, r1
 800ec0c:	ec45 4b10 	vmov	d0, r4, r5
 800ec10:	4616      	mov	r6, r2
 800ec12:	f002 fc3b 	bl	801148c <__ulp>
 800ec16:	ec51 0b10 	vmov	r0, r1, d0
 800ec1a:	b17e      	cbz	r6, 800ec3c <sulp+0x36>
 800ec1c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ec20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	dd09      	ble.n	800ec3c <sulp+0x36>
 800ec28:	051b      	lsls	r3, r3, #20
 800ec2a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ec2e:	2400      	movs	r4, #0
 800ec30:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ec34:	4622      	mov	r2, r4
 800ec36:	462b      	mov	r3, r5
 800ec38:	f7f9 fc16 	bl	8008468 <__aeabi_dmul>
 800ec3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ec40 <_strtod_l>:
 800ec40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec44:	461f      	mov	r7, r3
 800ec46:	b0a1      	sub	sp, #132	; 0x84
 800ec48:	2300      	movs	r3, #0
 800ec4a:	4681      	mov	r9, r0
 800ec4c:	4638      	mov	r0, r7
 800ec4e:	460e      	mov	r6, r1
 800ec50:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec52:	931c      	str	r3, [sp, #112]	; 0x70
 800ec54:	f002 f8f7 	bl	8010e46 <__localeconv_l>
 800ec58:	4680      	mov	r8, r0
 800ec5a:	6800      	ldr	r0, [r0, #0]
 800ec5c:	f7f9 f9f0 	bl	8008040 <strlen>
 800ec60:	f04f 0a00 	mov.w	sl, #0
 800ec64:	4604      	mov	r4, r0
 800ec66:	f04f 0b00 	mov.w	fp, #0
 800ec6a:	961b      	str	r6, [sp, #108]	; 0x6c
 800ec6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ec6e:	781a      	ldrb	r2, [r3, #0]
 800ec70:	2a0d      	cmp	r2, #13
 800ec72:	d832      	bhi.n	800ecda <_strtod_l+0x9a>
 800ec74:	2a09      	cmp	r2, #9
 800ec76:	d236      	bcs.n	800ece6 <_strtod_l+0xa6>
 800ec78:	2a00      	cmp	r2, #0
 800ec7a:	d03e      	beq.n	800ecfa <_strtod_l+0xba>
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	930d      	str	r3, [sp, #52]	; 0x34
 800ec80:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ec82:	782b      	ldrb	r3, [r5, #0]
 800ec84:	2b30      	cmp	r3, #48	; 0x30
 800ec86:	f040 80ac 	bne.w	800ede2 <_strtod_l+0x1a2>
 800ec8a:	786b      	ldrb	r3, [r5, #1]
 800ec8c:	2b58      	cmp	r3, #88	; 0x58
 800ec8e:	d001      	beq.n	800ec94 <_strtod_l+0x54>
 800ec90:	2b78      	cmp	r3, #120	; 0x78
 800ec92:	d167      	bne.n	800ed64 <_strtod_l+0x124>
 800ec94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec96:	9301      	str	r3, [sp, #4]
 800ec98:	ab1c      	add	r3, sp, #112	; 0x70
 800ec9a:	9300      	str	r3, [sp, #0]
 800ec9c:	9702      	str	r7, [sp, #8]
 800ec9e:	ab1d      	add	r3, sp, #116	; 0x74
 800eca0:	4a88      	ldr	r2, [pc, #544]	; (800eec4 <_strtod_l+0x284>)
 800eca2:	a91b      	add	r1, sp, #108	; 0x6c
 800eca4:	4648      	mov	r0, r9
 800eca6:	f001 fde4 	bl	8010872 <__gethex>
 800ecaa:	f010 0407 	ands.w	r4, r0, #7
 800ecae:	4606      	mov	r6, r0
 800ecb0:	d005      	beq.n	800ecbe <_strtod_l+0x7e>
 800ecb2:	2c06      	cmp	r4, #6
 800ecb4:	d12b      	bne.n	800ed0e <_strtod_l+0xce>
 800ecb6:	3501      	adds	r5, #1
 800ecb8:	2300      	movs	r3, #0
 800ecba:	951b      	str	r5, [sp, #108]	; 0x6c
 800ecbc:	930d      	str	r3, [sp, #52]	; 0x34
 800ecbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f040 859a 	bne.w	800f7fa <_strtod_l+0xbba>
 800ecc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecc8:	b1e3      	cbz	r3, 800ed04 <_strtod_l+0xc4>
 800ecca:	4652      	mov	r2, sl
 800eccc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ecd0:	ec43 2b10 	vmov	d0, r2, r3
 800ecd4:	b021      	add	sp, #132	; 0x84
 800ecd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecda:	2a2b      	cmp	r2, #43	; 0x2b
 800ecdc:	d015      	beq.n	800ed0a <_strtod_l+0xca>
 800ecde:	2a2d      	cmp	r2, #45	; 0x2d
 800ece0:	d004      	beq.n	800ecec <_strtod_l+0xac>
 800ece2:	2a20      	cmp	r2, #32
 800ece4:	d1ca      	bne.n	800ec7c <_strtod_l+0x3c>
 800ece6:	3301      	adds	r3, #1
 800ece8:	931b      	str	r3, [sp, #108]	; 0x6c
 800ecea:	e7bf      	b.n	800ec6c <_strtod_l+0x2c>
 800ecec:	2201      	movs	r2, #1
 800ecee:	920d      	str	r2, [sp, #52]	; 0x34
 800ecf0:	1c5a      	adds	r2, r3, #1
 800ecf2:	921b      	str	r2, [sp, #108]	; 0x6c
 800ecf4:	785b      	ldrb	r3, [r3, #1]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1c2      	bne.n	800ec80 <_strtod_l+0x40>
 800ecfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecfc:	961b      	str	r6, [sp, #108]	; 0x6c
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	f040 8579 	bne.w	800f7f6 <_strtod_l+0xbb6>
 800ed04:	4652      	mov	r2, sl
 800ed06:	465b      	mov	r3, fp
 800ed08:	e7e2      	b.n	800ecd0 <_strtod_l+0x90>
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	e7ef      	b.n	800ecee <_strtod_l+0xae>
 800ed0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ed10:	b13a      	cbz	r2, 800ed22 <_strtod_l+0xe2>
 800ed12:	2135      	movs	r1, #53	; 0x35
 800ed14:	a81e      	add	r0, sp, #120	; 0x78
 800ed16:	f002 fcb1 	bl	801167c <__copybits>
 800ed1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ed1c:	4648      	mov	r0, r9
 800ed1e:	f002 f91e 	bl	8010f5e <_Bfree>
 800ed22:	3c01      	subs	r4, #1
 800ed24:	2c04      	cmp	r4, #4
 800ed26:	d806      	bhi.n	800ed36 <_strtod_l+0xf6>
 800ed28:	e8df f004 	tbb	[pc, r4]
 800ed2c:	1714030a 	.word	0x1714030a
 800ed30:	0a          	.byte	0x0a
 800ed31:	00          	.byte	0x00
 800ed32:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800ed36:	0730      	lsls	r0, r6, #28
 800ed38:	d5c1      	bpl.n	800ecbe <_strtod_l+0x7e>
 800ed3a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ed3e:	e7be      	b.n	800ecbe <_strtod_l+0x7e>
 800ed40:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800ed44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ed46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ed4a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ed4e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ed52:	e7f0      	b.n	800ed36 <_strtod_l+0xf6>
 800ed54:	f8df b170 	ldr.w	fp, [pc, #368]	; 800eec8 <_strtod_l+0x288>
 800ed58:	e7ed      	b.n	800ed36 <_strtod_l+0xf6>
 800ed5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ed5e:	f04f 3aff 	mov.w	sl, #4294967295
 800ed62:	e7e8      	b.n	800ed36 <_strtod_l+0xf6>
 800ed64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed66:	1c5a      	adds	r2, r3, #1
 800ed68:	921b      	str	r2, [sp, #108]	; 0x6c
 800ed6a:	785b      	ldrb	r3, [r3, #1]
 800ed6c:	2b30      	cmp	r3, #48	; 0x30
 800ed6e:	d0f9      	beq.n	800ed64 <_strtod_l+0x124>
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d0a4      	beq.n	800ecbe <_strtod_l+0x7e>
 800ed74:	2301      	movs	r3, #1
 800ed76:	2500      	movs	r5, #0
 800ed78:	9306      	str	r3, [sp, #24]
 800ed7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed7c:	9308      	str	r3, [sp, #32]
 800ed7e:	9507      	str	r5, [sp, #28]
 800ed80:	9505      	str	r5, [sp, #20]
 800ed82:	220a      	movs	r2, #10
 800ed84:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ed86:	7807      	ldrb	r7, [r0, #0]
 800ed88:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ed8c:	b2d9      	uxtb	r1, r3
 800ed8e:	2909      	cmp	r1, #9
 800ed90:	d929      	bls.n	800ede6 <_strtod_l+0x1a6>
 800ed92:	4622      	mov	r2, r4
 800ed94:	f8d8 1000 	ldr.w	r1, [r8]
 800ed98:	f002 fe7a 	bl	8011a90 <strncmp>
 800ed9c:	2800      	cmp	r0, #0
 800ed9e:	d031      	beq.n	800ee04 <_strtod_l+0x1c4>
 800eda0:	2000      	movs	r0, #0
 800eda2:	9c05      	ldr	r4, [sp, #20]
 800eda4:	9004      	str	r0, [sp, #16]
 800eda6:	463b      	mov	r3, r7
 800eda8:	4602      	mov	r2, r0
 800edaa:	2b65      	cmp	r3, #101	; 0x65
 800edac:	d001      	beq.n	800edb2 <_strtod_l+0x172>
 800edae:	2b45      	cmp	r3, #69	; 0x45
 800edb0:	d114      	bne.n	800eddc <_strtod_l+0x19c>
 800edb2:	b924      	cbnz	r4, 800edbe <_strtod_l+0x17e>
 800edb4:	b910      	cbnz	r0, 800edbc <_strtod_l+0x17c>
 800edb6:	9b06      	ldr	r3, [sp, #24]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d09e      	beq.n	800ecfa <_strtod_l+0xba>
 800edbc:	2400      	movs	r4, #0
 800edbe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800edc0:	1c73      	adds	r3, r6, #1
 800edc2:	931b      	str	r3, [sp, #108]	; 0x6c
 800edc4:	7873      	ldrb	r3, [r6, #1]
 800edc6:	2b2b      	cmp	r3, #43	; 0x2b
 800edc8:	d078      	beq.n	800eebc <_strtod_l+0x27c>
 800edca:	2b2d      	cmp	r3, #45	; 0x2d
 800edcc:	d070      	beq.n	800eeb0 <_strtod_l+0x270>
 800edce:	f04f 0c00 	mov.w	ip, #0
 800edd2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800edd6:	2f09      	cmp	r7, #9
 800edd8:	d97c      	bls.n	800eed4 <_strtod_l+0x294>
 800edda:	961b      	str	r6, [sp, #108]	; 0x6c
 800eddc:	f04f 0e00 	mov.w	lr, #0
 800ede0:	e09a      	b.n	800ef18 <_strtod_l+0x2d8>
 800ede2:	2300      	movs	r3, #0
 800ede4:	e7c7      	b.n	800ed76 <_strtod_l+0x136>
 800ede6:	9905      	ldr	r1, [sp, #20]
 800ede8:	2908      	cmp	r1, #8
 800edea:	bfdd      	ittte	le
 800edec:	9907      	ldrle	r1, [sp, #28]
 800edee:	fb02 3301 	mlale	r3, r2, r1, r3
 800edf2:	9307      	strle	r3, [sp, #28]
 800edf4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800edf8:	9b05      	ldr	r3, [sp, #20]
 800edfa:	3001      	adds	r0, #1
 800edfc:	3301      	adds	r3, #1
 800edfe:	9305      	str	r3, [sp, #20]
 800ee00:	901b      	str	r0, [sp, #108]	; 0x6c
 800ee02:	e7bf      	b.n	800ed84 <_strtod_l+0x144>
 800ee04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee06:	191a      	adds	r2, r3, r4
 800ee08:	921b      	str	r2, [sp, #108]	; 0x6c
 800ee0a:	9a05      	ldr	r2, [sp, #20]
 800ee0c:	5d1b      	ldrb	r3, [r3, r4]
 800ee0e:	2a00      	cmp	r2, #0
 800ee10:	d037      	beq.n	800ee82 <_strtod_l+0x242>
 800ee12:	9c05      	ldr	r4, [sp, #20]
 800ee14:	4602      	mov	r2, r0
 800ee16:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ee1a:	2909      	cmp	r1, #9
 800ee1c:	d913      	bls.n	800ee46 <_strtod_l+0x206>
 800ee1e:	2101      	movs	r1, #1
 800ee20:	9104      	str	r1, [sp, #16]
 800ee22:	e7c2      	b.n	800edaa <_strtod_l+0x16a>
 800ee24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee26:	1c5a      	adds	r2, r3, #1
 800ee28:	921b      	str	r2, [sp, #108]	; 0x6c
 800ee2a:	785b      	ldrb	r3, [r3, #1]
 800ee2c:	3001      	adds	r0, #1
 800ee2e:	2b30      	cmp	r3, #48	; 0x30
 800ee30:	d0f8      	beq.n	800ee24 <_strtod_l+0x1e4>
 800ee32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ee36:	2a08      	cmp	r2, #8
 800ee38:	f200 84e4 	bhi.w	800f804 <_strtod_l+0xbc4>
 800ee3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ee3e:	9208      	str	r2, [sp, #32]
 800ee40:	4602      	mov	r2, r0
 800ee42:	2000      	movs	r0, #0
 800ee44:	4604      	mov	r4, r0
 800ee46:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800ee4a:	f100 0101 	add.w	r1, r0, #1
 800ee4e:	d012      	beq.n	800ee76 <_strtod_l+0x236>
 800ee50:	440a      	add	r2, r1
 800ee52:	eb00 0c04 	add.w	ip, r0, r4
 800ee56:	4621      	mov	r1, r4
 800ee58:	270a      	movs	r7, #10
 800ee5a:	458c      	cmp	ip, r1
 800ee5c:	d113      	bne.n	800ee86 <_strtod_l+0x246>
 800ee5e:	1821      	adds	r1, r4, r0
 800ee60:	2908      	cmp	r1, #8
 800ee62:	f104 0401 	add.w	r4, r4, #1
 800ee66:	4404      	add	r4, r0
 800ee68:	dc19      	bgt.n	800ee9e <_strtod_l+0x25e>
 800ee6a:	9b07      	ldr	r3, [sp, #28]
 800ee6c:	210a      	movs	r1, #10
 800ee6e:	fb01 e303 	mla	r3, r1, r3, lr
 800ee72:	9307      	str	r3, [sp, #28]
 800ee74:	2100      	movs	r1, #0
 800ee76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee78:	1c58      	adds	r0, r3, #1
 800ee7a:	901b      	str	r0, [sp, #108]	; 0x6c
 800ee7c:	785b      	ldrb	r3, [r3, #1]
 800ee7e:	4608      	mov	r0, r1
 800ee80:	e7c9      	b.n	800ee16 <_strtod_l+0x1d6>
 800ee82:	9805      	ldr	r0, [sp, #20]
 800ee84:	e7d3      	b.n	800ee2e <_strtod_l+0x1ee>
 800ee86:	2908      	cmp	r1, #8
 800ee88:	f101 0101 	add.w	r1, r1, #1
 800ee8c:	dc03      	bgt.n	800ee96 <_strtod_l+0x256>
 800ee8e:	9b07      	ldr	r3, [sp, #28]
 800ee90:	437b      	muls	r3, r7
 800ee92:	9307      	str	r3, [sp, #28]
 800ee94:	e7e1      	b.n	800ee5a <_strtod_l+0x21a>
 800ee96:	2910      	cmp	r1, #16
 800ee98:	bfd8      	it	le
 800ee9a:	437d      	mulle	r5, r7
 800ee9c:	e7dd      	b.n	800ee5a <_strtod_l+0x21a>
 800ee9e:	2c10      	cmp	r4, #16
 800eea0:	bfdc      	itt	le
 800eea2:	210a      	movle	r1, #10
 800eea4:	fb01 e505 	mlale	r5, r1, r5, lr
 800eea8:	e7e4      	b.n	800ee74 <_strtod_l+0x234>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	9304      	str	r3, [sp, #16]
 800eeae:	e781      	b.n	800edb4 <_strtod_l+0x174>
 800eeb0:	f04f 0c01 	mov.w	ip, #1
 800eeb4:	1cb3      	adds	r3, r6, #2
 800eeb6:	931b      	str	r3, [sp, #108]	; 0x6c
 800eeb8:	78b3      	ldrb	r3, [r6, #2]
 800eeba:	e78a      	b.n	800edd2 <_strtod_l+0x192>
 800eebc:	f04f 0c00 	mov.w	ip, #0
 800eec0:	e7f8      	b.n	800eeb4 <_strtod_l+0x274>
 800eec2:	bf00      	nop
 800eec4:	08011cd0 	.word	0x08011cd0
 800eec8:	7ff00000 	.word	0x7ff00000
 800eecc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eece:	1c5f      	adds	r7, r3, #1
 800eed0:	971b      	str	r7, [sp, #108]	; 0x6c
 800eed2:	785b      	ldrb	r3, [r3, #1]
 800eed4:	2b30      	cmp	r3, #48	; 0x30
 800eed6:	d0f9      	beq.n	800eecc <_strtod_l+0x28c>
 800eed8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800eedc:	2f08      	cmp	r7, #8
 800eede:	f63f af7d 	bhi.w	800eddc <_strtod_l+0x19c>
 800eee2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800eee6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eee8:	930a      	str	r3, [sp, #40]	; 0x28
 800eeea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eeec:	1c5f      	adds	r7, r3, #1
 800eeee:	971b      	str	r7, [sp, #108]	; 0x6c
 800eef0:	785b      	ldrb	r3, [r3, #1]
 800eef2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800eef6:	f1b8 0f09 	cmp.w	r8, #9
 800eefa:	d937      	bls.n	800ef6c <_strtod_l+0x32c>
 800eefc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eefe:	1a7f      	subs	r7, r7, r1
 800ef00:	2f08      	cmp	r7, #8
 800ef02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ef06:	dc37      	bgt.n	800ef78 <_strtod_l+0x338>
 800ef08:	45be      	cmp	lr, r7
 800ef0a:	bfa8      	it	ge
 800ef0c:	46be      	movge	lr, r7
 800ef0e:	f1bc 0f00 	cmp.w	ip, #0
 800ef12:	d001      	beq.n	800ef18 <_strtod_l+0x2d8>
 800ef14:	f1ce 0e00 	rsb	lr, lr, #0
 800ef18:	2c00      	cmp	r4, #0
 800ef1a:	d151      	bne.n	800efc0 <_strtod_l+0x380>
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	f47f aece 	bne.w	800ecbe <_strtod_l+0x7e>
 800ef22:	9a06      	ldr	r2, [sp, #24]
 800ef24:	2a00      	cmp	r2, #0
 800ef26:	f47f aeca 	bne.w	800ecbe <_strtod_l+0x7e>
 800ef2a:	9a04      	ldr	r2, [sp, #16]
 800ef2c:	2a00      	cmp	r2, #0
 800ef2e:	f47f aee4 	bne.w	800ecfa <_strtod_l+0xba>
 800ef32:	2b4e      	cmp	r3, #78	; 0x4e
 800ef34:	d027      	beq.n	800ef86 <_strtod_l+0x346>
 800ef36:	dc21      	bgt.n	800ef7c <_strtod_l+0x33c>
 800ef38:	2b49      	cmp	r3, #73	; 0x49
 800ef3a:	f47f aede 	bne.w	800ecfa <_strtod_l+0xba>
 800ef3e:	49a0      	ldr	r1, [pc, #640]	; (800f1c0 <_strtod_l+0x580>)
 800ef40:	a81b      	add	r0, sp, #108	; 0x6c
 800ef42:	f001 fec9 	bl	8010cd8 <__match>
 800ef46:	2800      	cmp	r0, #0
 800ef48:	f43f aed7 	beq.w	800ecfa <_strtod_l+0xba>
 800ef4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef4e:	499d      	ldr	r1, [pc, #628]	; (800f1c4 <_strtod_l+0x584>)
 800ef50:	3b01      	subs	r3, #1
 800ef52:	a81b      	add	r0, sp, #108	; 0x6c
 800ef54:	931b      	str	r3, [sp, #108]	; 0x6c
 800ef56:	f001 febf 	bl	8010cd8 <__match>
 800ef5a:	b910      	cbnz	r0, 800ef62 <_strtod_l+0x322>
 800ef5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef5e:	3301      	adds	r3, #1
 800ef60:	931b      	str	r3, [sp, #108]	; 0x6c
 800ef62:	f8df b274 	ldr.w	fp, [pc, #628]	; 800f1d8 <_strtod_l+0x598>
 800ef66:	f04f 0a00 	mov.w	sl, #0
 800ef6a:	e6a8      	b.n	800ecbe <_strtod_l+0x7e>
 800ef6c:	210a      	movs	r1, #10
 800ef6e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ef72:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ef76:	e7b8      	b.n	800eeea <_strtod_l+0x2aa>
 800ef78:	46be      	mov	lr, r7
 800ef7a:	e7c8      	b.n	800ef0e <_strtod_l+0x2ce>
 800ef7c:	2b69      	cmp	r3, #105	; 0x69
 800ef7e:	d0de      	beq.n	800ef3e <_strtod_l+0x2fe>
 800ef80:	2b6e      	cmp	r3, #110	; 0x6e
 800ef82:	f47f aeba 	bne.w	800ecfa <_strtod_l+0xba>
 800ef86:	4990      	ldr	r1, [pc, #576]	; (800f1c8 <_strtod_l+0x588>)
 800ef88:	a81b      	add	r0, sp, #108	; 0x6c
 800ef8a:	f001 fea5 	bl	8010cd8 <__match>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	f43f aeb3 	beq.w	800ecfa <_strtod_l+0xba>
 800ef94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	2b28      	cmp	r3, #40	; 0x28
 800ef9a:	d10e      	bne.n	800efba <_strtod_l+0x37a>
 800ef9c:	aa1e      	add	r2, sp, #120	; 0x78
 800ef9e:	498b      	ldr	r1, [pc, #556]	; (800f1cc <_strtod_l+0x58c>)
 800efa0:	a81b      	add	r0, sp, #108	; 0x6c
 800efa2:	f001 fead 	bl	8010d00 <__hexnan>
 800efa6:	2805      	cmp	r0, #5
 800efa8:	d107      	bne.n	800efba <_strtod_l+0x37a>
 800efaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800efac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800efb0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800efb4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800efb8:	e681      	b.n	800ecbe <_strtod_l+0x7e>
 800efba:	f8df b224 	ldr.w	fp, [pc, #548]	; 800f1e0 <_strtod_l+0x5a0>
 800efbe:	e7d2      	b.n	800ef66 <_strtod_l+0x326>
 800efc0:	ebae 0302 	sub.w	r3, lr, r2
 800efc4:	9306      	str	r3, [sp, #24]
 800efc6:	9b05      	ldr	r3, [sp, #20]
 800efc8:	9807      	ldr	r0, [sp, #28]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	bf08      	it	eq
 800efce:	4623      	moveq	r3, r4
 800efd0:	2c10      	cmp	r4, #16
 800efd2:	9305      	str	r3, [sp, #20]
 800efd4:	46a0      	mov	r8, r4
 800efd6:	bfa8      	it	ge
 800efd8:	f04f 0810 	movge.w	r8, #16
 800efdc:	f7f9 f9ca 	bl	8008374 <__aeabi_ui2d>
 800efe0:	2c09      	cmp	r4, #9
 800efe2:	4682      	mov	sl, r0
 800efe4:	468b      	mov	fp, r1
 800efe6:	dc13      	bgt.n	800f010 <_strtod_l+0x3d0>
 800efe8:	9b06      	ldr	r3, [sp, #24]
 800efea:	2b00      	cmp	r3, #0
 800efec:	f43f ae67 	beq.w	800ecbe <_strtod_l+0x7e>
 800eff0:	9b06      	ldr	r3, [sp, #24]
 800eff2:	dd7a      	ble.n	800f0ea <_strtod_l+0x4aa>
 800eff4:	2b16      	cmp	r3, #22
 800eff6:	dc61      	bgt.n	800f0bc <_strtod_l+0x47c>
 800eff8:	4a75      	ldr	r2, [pc, #468]	; (800f1d0 <_strtod_l+0x590>)
 800effa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800effe:	e9de 0100 	ldrd	r0, r1, [lr]
 800f002:	4652      	mov	r2, sl
 800f004:	465b      	mov	r3, fp
 800f006:	f7f9 fa2f 	bl	8008468 <__aeabi_dmul>
 800f00a:	4682      	mov	sl, r0
 800f00c:	468b      	mov	fp, r1
 800f00e:	e656      	b.n	800ecbe <_strtod_l+0x7e>
 800f010:	4b6f      	ldr	r3, [pc, #444]	; (800f1d0 <_strtod_l+0x590>)
 800f012:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f016:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f01a:	f7f9 fa25 	bl	8008468 <__aeabi_dmul>
 800f01e:	4606      	mov	r6, r0
 800f020:	4628      	mov	r0, r5
 800f022:	460f      	mov	r7, r1
 800f024:	f7f9 f9a6 	bl	8008374 <__aeabi_ui2d>
 800f028:	4602      	mov	r2, r0
 800f02a:	460b      	mov	r3, r1
 800f02c:	4630      	mov	r0, r6
 800f02e:	4639      	mov	r1, r7
 800f030:	f7f9 f864 	bl	80080fc <__adddf3>
 800f034:	2c0f      	cmp	r4, #15
 800f036:	4682      	mov	sl, r0
 800f038:	468b      	mov	fp, r1
 800f03a:	ddd5      	ble.n	800efe8 <_strtod_l+0x3a8>
 800f03c:	9b06      	ldr	r3, [sp, #24]
 800f03e:	eba4 0808 	sub.w	r8, r4, r8
 800f042:	4498      	add	r8, r3
 800f044:	f1b8 0f00 	cmp.w	r8, #0
 800f048:	f340 8096 	ble.w	800f178 <_strtod_l+0x538>
 800f04c:	f018 030f 	ands.w	r3, r8, #15
 800f050:	d00a      	beq.n	800f068 <_strtod_l+0x428>
 800f052:	495f      	ldr	r1, [pc, #380]	; (800f1d0 <_strtod_l+0x590>)
 800f054:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f058:	4652      	mov	r2, sl
 800f05a:	465b      	mov	r3, fp
 800f05c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f060:	f7f9 fa02 	bl	8008468 <__aeabi_dmul>
 800f064:	4682      	mov	sl, r0
 800f066:	468b      	mov	fp, r1
 800f068:	f038 080f 	bics.w	r8, r8, #15
 800f06c:	d073      	beq.n	800f156 <_strtod_l+0x516>
 800f06e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f072:	dd47      	ble.n	800f104 <_strtod_l+0x4c4>
 800f074:	2400      	movs	r4, #0
 800f076:	46a0      	mov	r8, r4
 800f078:	9407      	str	r4, [sp, #28]
 800f07a:	9405      	str	r4, [sp, #20]
 800f07c:	2322      	movs	r3, #34	; 0x22
 800f07e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800f1d8 <_strtod_l+0x598>
 800f082:	f8c9 3000 	str.w	r3, [r9]
 800f086:	f04f 0a00 	mov.w	sl, #0
 800f08a:	9b07      	ldr	r3, [sp, #28]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	f43f ae16 	beq.w	800ecbe <_strtod_l+0x7e>
 800f092:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f094:	4648      	mov	r0, r9
 800f096:	f001 ff62 	bl	8010f5e <_Bfree>
 800f09a:	9905      	ldr	r1, [sp, #20]
 800f09c:	4648      	mov	r0, r9
 800f09e:	f001 ff5e 	bl	8010f5e <_Bfree>
 800f0a2:	4641      	mov	r1, r8
 800f0a4:	4648      	mov	r0, r9
 800f0a6:	f001 ff5a 	bl	8010f5e <_Bfree>
 800f0aa:	9907      	ldr	r1, [sp, #28]
 800f0ac:	4648      	mov	r0, r9
 800f0ae:	f001 ff56 	bl	8010f5e <_Bfree>
 800f0b2:	4621      	mov	r1, r4
 800f0b4:	4648      	mov	r0, r9
 800f0b6:	f001 ff52 	bl	8010f5e <_Bfree>
 800f0ba:	e600      	b.n	800ecbe <_strtod_l+0x7e>
 800f0bc:	9a06      	ldr	r2, [sp, #24]
 800f0be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	dbba      	blt.n	800f03c <_strtod_l+0x3fc>
 800f0c6:	4d42      	ldr	r5, [pc, #264]	; (800f1d0 <_strtod_l+0x590>)
 800f0c8:	f1c4 040f 	rsb	r4, r4, #15
 800f0cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f0d0:	4652      	mov	r2, sl
 800f0d2:	465b      	mov	r3, fp
 800f0d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0d8:	f7f9 f9c6 	bl	8008468 <__aeabi_dmul>
 800f0dc:	9b06      	ldr	r3, [sp, #24]
 800f0de:	1b1c      	subs	r4, r3, r4
 800f0e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f0e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f0e8:	e78d      	b.n	800f006 <_strtod_l+0x3c6>
 800f0ea:	f113 0f16 	cmn.w	r3, #22
 800f0ee:	dba5      	blt.n	800f03c <_strtod_l+0x3fc>
 800f0f0:	4a37      	ldr	r2, [pc, #220]	; (800f1d0 <_strtod_l+0x590>)
 800f0f2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800f0f6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f0fa:	4650      	mov	r0, sl
 800f0fc:	4659      	mov	r1, fp
 800f0fe:	f7f9 fadd 	bl	80086bc <__aeabi_ddiv>
 800f102:	e782      	b.n	800f00a <_strtod_l+0x3ca>
 800f104:	2300      	movs	r3, #0
 800f106:	4e33      	ldr	r6, [pc, #204]	; (800f1d4 <_strtod_l+0x594>)
 800f108:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f10c:	4650      	mov	r0, sl
 800f10e:	4659      	mov	r1, fp
 800f110:	461d      	mov	r5, r3
 800f112:	f1b8 0f01 	cmp.w	r8, #1
 800f116:	dc21      	bgt.n	800f15c <_strtod_l+0x51c>
 800f118:	b10b      	cbz	r3, 800f11e <_strtod_l+0x4de>
 800f11a:	4682      	mov	sl, r0
 800f11c:	468b      	mov	fp, r1
 800f11e:	4b2d      	ldr	r3, [pc, #180]	; (800f1d4 <_strtod_l+0x594>)
 800f120:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f124:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f128:	4652      	mov	r2, sl
 800f12a:	465b      	mov	r3, fp
 800f12c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f130:	f7f9 f99a 	bl	8008468 <__aeabi_dmul>
 800f134:	4b28      	ldr	r3, [pc, #160]	; (800f1d8 <_strtod_l+0x598>)
 800f136:	460a      	mov	r2, r1
 800f138:	400b      	ands	r3, r1
 800f13a:	4928      	ldr	r1, [pc, #160]	; (800f1dc <_strtod_l+0x59c>)
 800f13c:	428b      	cmp	r3, r1
 800f13e:	4682      	mov	sl, r0
 800f140:	d898      	bhi.n	800f074 <_strtod_l+0x434>
 800f142:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f146:	428b      	cmp	r3, r1
 800f148:	bf86      	itte	hi
 800f14a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f1e4 <_strtod_l+0x5a4>
 800f14e:	f04f 3aff 	movhi.w	sl, #4294967295
 800f152:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f156:	2300      	movs	r3, #0
 800f158:	9304      	str	r3, [sp, #16]
 800f15a:	e077      	b.n	800f24c <_strtod_l+0x60c>
 800f15c:	f018 0f01 	tst.w	r8, #1
 800f160:	d006      	beq.n	800f170 <_strtod_l+0x530>
 800f162:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800f166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16a:	f7f9 f97d 	bl	8008468 <__aeabi_dmul>
 800f16e:	2301      	movs	r3, #1
 800f170:	3501      	adds	r5, #1
 800f172:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f176:	e7cc      	b.n	800f112 <_strtod_l+0x4d2>
 800f178:	d0ed      	beq.n	800f156 <_strtod_l+0x516>
 800f17a:	f1c8 0800 	rsb	r8, r8, #0
 800f17e:	f018 020f 	ands.w	r2, r8, #15
 800f182:	d00a      	beq.n	800f19a <_strtod_l+0x55a>
 800f184:	4b12      	ldr	r3, [pc, #72]	; (800f1d0 <_strtod_l+0x590>)
 800f186:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f18a:	4650      	mov	r0, sl
 800f18c:	4659      	mov	r1, fp
 800f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f192:	f7f9 fa93 	bl	80086bc <__aeabi_ddiv>
 800f196:	4682      	mov	sl, r0
 800f198:	468b      	mov	fp, r1
 800f19a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f19e:	d0da      	beq.n	800f156 <_strtod_l+0x516>
 800f1a0:	f1b8 0f1f 	cmp.w	r8, #31
 800f1a4:	dd20      	ble.n	800f1e8 <_strtod_l+0x5a8>
 800f1a6:	2400      	movs	r4, #0
 800f1a8:	46a0      	mov	r8, r4
 800f1aa:	9407      	str	r4, [sp, #28]
 800f1ac:	9405      	str	r4, [sp, #20]
 800f1ae:	2322      	movs	r3, #34	; 0x22
 800f1b0:	f04f 0a00 	mov.w	sl, #0
 800f1b4:	f04f 0b00 	mov.w	fp, #0
 800f1b8:	f8c9 3000 	str.w	r3, [r9]
 800f1bc:	e765      	b.n	800f08a <_strtod_l+0x44a>
 800f1be:	bf00      	nop
 800f1c0:	08011c9a 	.word	0x08011c9a
 800f1c4:	08011d23 	.word	0x08011d23
 800f1c8:	08011ca2 	.word	0x08011ca2
 800f1cc:	08011ce4 	.word	0x08011ce4
 800f1d0:	08011d60 	.word	0x08011d60
 800f1d4:	08011d38 	.word	0x08011d38
 800f1d8:	7ff00000 	.word	0x7ff00000
 800f1dc:	7ca00000 	.word	0x7ca00000
 800f1e0:	fff80000 	.word	0xfff80000
 800f1e4:	7fefffff 	.word	0x7fefffff
 800f1e8:	f018 0310 	ands.w	r3, r8, #16
 800f1ec:	bf18      	it	ne
 800f1ee:	236a      	movne	r3, #106	; 0x6a
 800f1f0:	4da0      	ldr	r5, [pc, #640]	; (800f474 <_strtod_l+0x834>)
 800f1f2:	9304      	str	r3, [sp, #16]
 800f1f4:	4650      	mov	r0, sl
 800f1f6:	4659      	mov	r1, fp
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	f1b8 0f00 	cmp.w	r8, #0
 800f1fe:	f300 810a 	bgt.w	800f416 <_strtod_l+0x7d6>
 800f202:	b10b      	cbz	r3, 800f208 <_strtod_l+0x5c8>
 800f204:	4682      	mov	sl, r0
 800f206:	468b      	mov	fp, r1
 800f208:	9b04      	ldr	r3, [sp, #16]
 800f20a:	b1bb      	cbz	r3, 800f23c <_strtod_l+0x5fc>
 800f20c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f210:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f214:	2b00      	cmp	r3, #0
 800f216:	4659      	mov	r1, fp
 800f218:	dd10      	ble.n	800f23c <_strtod_l+0x5fc>
 800f21a:	2b1f      	cmp	r3, #31
 800f21c:	f340 8107 	ble.w	800f42e <_strtod_l+0x7ee>
 800f220:	2b34      	cmp	r3, #52	; 0x34
 800f222:	bfde      	ittt	le
 800f224:	3b20      	suble	r3, #32
 800f226:	f04f 32ff 	movle.w	r2, #4294967295
 800f22a:	fa02 f303 	lslle.w	r3, r2, r3
 800f22e:	f04f 0a00 	mov.w	sl, #0
 800f232:	bfcc      	ite	gt
 800f234:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f238:	ea03 0b01 	andle.w	fp, r3, r1
 800f23c:	2200      	movs	r2, #0
 800f23e:	2300      	movs	r3, #0
 800f240:	4650      	mov	r0, sl
 800f242:	4659      	mov	r1, fp
 800f244:	f7f9 fb78 	bl	8008938 <__aeabi_dcmpeq>
 800f248:	2800      	cmp	r0, #0
 800f24a:	d1ac      	bne.n	800f1a6 <_strtod_l+0x566>
 800f24c:	9b07      	ldr	r3, [sp, #28]
 800f24e:	9300      	str	r3, [sp, #0]
 800f250:	9a05      	ldr	r2, [sp, #20]
 800f252:	9908      	ldr	r1, [sp, #32]
 800f254:	4623      	mov	r3, r4
 800f256:	4648      	mov	r0, r9
 800f258:	f001 fed3 	bl	8011002 <__s2b>
 800f25c:	9007      	str	r0, [sp, #28]
 800f25e:	2800      	cmp	r0, #0
 800f260:	f43f af08 	beq.w	800f074 <_strtod_l+0x434>
 800f264:	9a06      	ldr	r2, [sp, #24]
 800f266:	9b06      	ldr	r3, [sp, #24]
 800f268:	2a00      	cmp	r2, #0
 800f26a:	f1c3 0300 	rsb	r3, r3, #0
 800f26e:	bfa8      	it	ge
 800f270:	2300      	movge	r3, #0
 800f272:	930e      	str	r3, [sp, #56]	; 0x38
 800f274:	2400      	movs	r4, #0
 800f276:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f27a:	9316      	str	r3, [sp, #88]	; 0x58
 800f27c:	46a0      	mov	r8, r4
 800f27e:	9b07      	ldr	r3, [sp, #28]
 800f280:	4648      	mov	r0, r9
 800f282:	6859      	ldr	r1, [r3, #4]
 800f284:	f001 fe37 	bl	8010ef6 <_Balloc>
 800f288:	9005      	str	r0, [sp, #20]
 800f28a:	2800      	cmp	r0, #0
 800f28c:	f43f aef6 	beq.w	800f07c <_strtod_l+0x43c>
 800f290:	9b07      	ldr	r3, [sp, #28]
 800f292:	691a      	ldr	r2, [r3, #16]
 800f294:	3202      	adds	r2, #2
 800f296:	f103 010c 	add.w	r1, r3, #12
 800f29a:	0092      	lsls	r2, r2, #2
 800f29c:	300c      	adds	r0, #12
 800f29e:	f7fe fb6f 	bl	800d980 <memcpy>
 800f2a2:	aa1e      	add	r2, sp, #120	; 0x78
 800f2a4:	a91d      	add	r1, sp, #116	; 0x74
 800f2a6:	ec4b ab10 	vmov	d0, sl, fp
 800f2aa:	4648      	mov	r0, r9
 800f2ac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800f2b0:	f002 f962 	bl	8011578 <__d2b>
 800f2b4:	901c      	str	r0, [sp, #112]	; 0x70
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	f43f aee0 	beq.w	800f07c <_strtod_l+0x43c>
 800f2bc:	2101      	movs	r1, #1
 800f2be:	4648      	mov	r0, r9
 800f2c0:	f001 ff2b 	bl	801111a <__i2b>
 800f2c4:	4680      	mov	r8, r0
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	f43f aed8 	beq.w	800f07c <_strtod_l+0x43c>
 800f2cc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f2ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f2d0:	2e00      	cmp	r6, #0
 800f2d2:	bfab      	itete	ge
 800f2d4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f2d6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800f2d8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800f2da:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800f2dc:	bfac      	ite	ge
 800f2de:	18f7      	addge	r7, r6, r3
 800f2e0:	1b9d      	sublt	r5, r3, r6
 800f2e2:	9b04      	ldr	r3, [sp, #16]
 800f2e4:	1af6      	subs	r6, r6, r3
 800f2e6:	4416      	add	r6, r2
 800f2e8:	4b63      	ldr	r3, [pc, #396]	; (800f478 <_strtod_l+0x838>)
 800f2ea:	3e01      	subs	r6, #1
 800f2ec:	429e      	cmp	r6, r3
 800f2ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f2f2:	f280 80af 	bge.w	800f454 <_strtod_l+0x814>
 800f2f6:	1b9b      	subs	r3, r3, r6
 800f2f8:	2b1f      	cmp	r3, #31
 800f2fa:	eba2 0203 	sub.w	r2, r2, r3
 800f2fe:	f04f 0101 	mov.w	r1, #1
 800f302:	f300 809b 	bgt.w	800f43c <_strtod_l+0x7fc>
 800f306:	fa01 f303 	lsl.w	r3, r1, r3
 800f30a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f30c:	2300      	movs	r3, #0
 800f30e:	930a      	str	r3, [sp, #40]	; 0x28
 800f310:	18be      	adds	r6, r7, r2
 800f312:	9b04      	ldr	r3, [sp, #16]
 800f314:	42b7      	cmp	r7, r6
 800f316:	4415      	add	r5, r2
 800f318:	441d      	add	r5, r3
 800f31a:	463b      	mov	r3, r7
 800f31c:	bfa8      	it	ge
 800f31e:	4633      	movge	r3, r6
 800f320:	42ab      	cmp	r3, r5
 800f322:	bfa8      	it	ge
 800f324:	462b      	movge	r3, r5
 800f326:	2b00      	cmp	r3, #0
 800f328:	bfc2      	ittt	gt
 800f32a:	1af6      	subgt	r6, r6, r3
 800f32c:	1aed      	subgt	r5, r5, r3
 800f32e:	1aff      	subgt	r7, r7, r3
 800f330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f332:	b1bb      	cbz	r3, 800f364 <_strtod_l+0x724>
 800f334:	4641      	mov	r1, r8
 800f336:	461a      	mov	r2, r3
 800f338:	4648      	mov	r0, r9
 800f33a:	f001 ff8d 	bl	8011258 <__pow5mult>
 800f33e:	4680      	mov	r8, r0
 800f340:	2800      	cmp	r0, #0
 800f342:	f43f ae9b 	beq.w	800f07c <_strtod_l+0x43c>
 800f346:	4601      	mov	r1, r0
 800f348:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f34a:	4648      	mov	r0, r9
 800f34c:	f001 feee 	bl	801112c <__multiply>
 800f350:	900c      	str	r0, [sp, #48]	; 0x30
 800f352:	2800      	cmp	r0, #0
 800f354:	f43f ae92 	beq.w	800f07c <_strtod_l+0x43c>
 800f358:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f35a:	4648      	mov	r0, r9
 800f35c:	f001 fdff 	bl	8010f5e <_Bfree>
 800f360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f362:	931c      	str	r3, [sp, #112]	; 0x70
 800f364:	2e00      	cmp	r6, #0
 800f366:	dc7a      	bgt.n	800f45e <_strtod_l+0x81e>
 800f368:	9b06      	ldr	r3, [sp, #24]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	dd08      	ble.n	800f380 <_strtod_l+0x740>
 800f36e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f370:	9905      	ldr	r1, [sp, #20]
 800f372:	4648      	mov	r0, r9
 800f374:	f001 ff70 	bl	8011258 <__pow5mult>
 800f378:	9005      	str	r0, [sp, #20]
 800f37a:	2800      	cmp	r0, #0
 800f37c:	f43f ae7e 	beq.w	800f07c <_strtod_l+0x43c>
 800f380:	2d00      	cmp	r5, #0
 800f382:	dd08      	ble.n	800f396 <_strtod_l+0x756>
 800f384:	462a      	mov	r2, r5
 800f386:	9905      	ldr	r1, [sp, #20]
 800f388:	4648      	mov	r0, r9
 800f38a:	f001 ffb3 	bl	80112f4 <__lshift>
 800f38e:	9005      	str	r0, [sp, #20]
 800f390:	2800      	cmp	r0, #0
 800f392:	f43f ae73 	beq.w	800f07c <_strtod_l+0x43c>
 800f396:	2f00      	cmp	r7, #0
 800f398:	dd08      	ble.n	800f3ac <_strtod_l+0x76c>
 800f39a:	4641      	mov	r1, r8
 800f39c:	463a      	mov	r2, r7
 800f39e:	4648      	mov	r0, r9
 800f3a0:	f001 ffa8 	bl	80112f4 <__lshift>
 800f3a4:	4680      	mov	r8, r0
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	f43f ae68 	beq.w	800f07c <_strtod_l+0x43c>
 800f3ac:	9a05      	ldr	r2, [sp, #20]
 800f3ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f3b0:	4648      	mov	r0, r9
 800f3b2:	f002 f80d 	bl	80113d0 <__mdiff>
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	f43f ae5f 	beq.w	800f07c <_strtod_l+0x43c>
 800f3be:	68c3      	ldr	r3, [r0, #12]
 800f3c0:	930c      	str	r3, [sp, #48]	; 0x30
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	60c3      	str	r3, [r0, #12]
 800f3c6:	4641      	mov	r1, r8
 800f3c8:	f001 ffe8 	bl	801139c <__mcmp>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	da55      	bge.n	800f47c <_strtod_l+0x83c>
 800f3d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3d2:	b9e3      	cbnz	r3, 800f40e <_strtod_l+0x7ce>
 800f3d4:	f1ba 0f00 	cmp.w	sl, #0
 800f3d8:	d119      	bne.n	800f40e <_strtod_l+0x7ce>
 800f3da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f3de:	b9b3      	cbnz	r3, 800f40e <_strtod_l+0x7ce>
 800f3e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f3e4:	0d1b      	lsrs	r3, r3, #20
 800f3e6:	051b      	lsls	r3, r3, #20
 800f3e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f3ec:	d90f      	bls.n	800f40e <_strtod_l+0x7ce>
 800f3ee:	6963      	ldr	r3, [r4, #20]
 800f3f0:	b913      	cbnz	r3, 800f3f8 <_strtod_l+0x7b8>
 800f3f2:	6923      	ldr	r3, [r4, #16]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	dd0a      	ble.n	800f40e <_strtod_l+0x7ce>
 800f3f8:	4621      	mov	r1, r4
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	4648      	mov	r0, r9
 800f3fe:	f001 ff79 	bl	80112f4 <__lshift>
 800f402:	4641      	mov	r1, r8
 800f404:	4604      	mov	r4, r0
 800f406:	f001 ffc9 	bl	801139c <__mcmp>
 800f40a:	2800      	cmp	r0, #0
 800f40c:	dc67      	bgt.n	800f4de <_strtod_l+0x89e>
 800f40e:	9b04      	ldr	r3, [sp, #16]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d171      	bne.n	800f4f8 <_strtod_l+0x8b8>
 800f414:	e63d      	b.n	800f092 <_strtod_l+0x452>
 800f416:	f018 0f01 	tst.w	r8, #1
 800f41a:	d004      	beq.n	800f426 <_strtod_l+0x7e6>
 800f41c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f420:	f7f9 f822 	bl	8008468 <__aeabi_dmul>
 800f424:	2301      	movs	r3, #1
 800f426:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f42a:	3508      	adds	r5, #8
 800f42c:	e6e5      	b.n	800f1fa <_strtod_l+0x5ba>
 800f42e:	f04f 32ff 	mov.w	r2, #4294967295
 800f432:	fa02 f303 	lsl.w	r3, r2, r3
 800f436:	ea03 0a0a 	and.w	sl, r3, sl
 800f43a:	e6ff      	b.n	800f23c <_strtod_l+0x5fc>
 800f43c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f440:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f444:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f448:	36e2      	adds	r6, #226	; 0xe2
 800f44a:	fa01 f306 	lsl.w	r3, r1, r6
 800f44e:	930a      	str	r3, [sp, #40]	; 0x28
 800f450:	910f      	str	r1, [sp, #60]	; 0x3c
 800f452:	e75d      	b.n	800f310 <_strtod_l+0x6d0>
 800f454:	2300      	movs	r3, #0
 800f456:	930a      	str	r3, [sp, #40]	; 0x28
 800f458:	2301      	movs	r3, #1
 800f45a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f45c:	e758      	b.n	800f310 <_strtod_l+0x6d0>
 800f45e:	4632      	mov	r2, r6
 800f460:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f462:	4648      	mov	r0, r9
 800f464:	f001 ff46 	bl	80112f4 <__lshift>
 800f468:	901c      	str	r0, [sp, #112]	; 0x70
 800f46a:	2800      	cmp	r0, #0
 800f46c:	f47f af7c 	bne.w	800f368 <_strtod_l+0x728>
 800f470:	e604      	b.n	800f07c <_strtod_l+0x43c>
 800f472:	bf00      	nop
 800f474:	08011cf8 	.word	0x08011cf8
 800f478:	fffffc02 	.word	0xfffffc02
 800f47c:	465d      	mov	r5, fp
 800f47e:	f040 8086 	bne.w	800f58e <_strtod_l+0x94e>
 800f482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f488:	b32a      	cbz	r2, 800f4d6 <_strtod_l+0x896>
 800f48a:	4aaf      	ldr	r2, [pc, #700]	; (800f748 <_strtod_l+0xb08>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d153      	bne.n	800f538 <_strtod_l+0x8f8>
 800f490:	9b04      	ldr	r3, [sp, #16]
 800f492:	4650      	mov	r0, sl
 800f494:	b1d3      	cbz	r3, 800f4cc <_strtod_l+0x88c>
 800f496:	4aad      	ldr	r2, [pc, #692]	; (800f74c <_strtod_l+0xb0c>)
 800f498:	402a      	ands	r2, r5
 800f49a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f49e:	f04f 31ff 	mov.w	r1, #4294967295
 800f4a2:	d816      	bhi.n	800f4d2 <_strtod_l+0x892>
 800f4a4:	0d12      	lsrs	r2, r2, #20
 800f4a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f4aa:	fa01 f303 	lsl.w	r3, r1, r3
 800f4ae:	4298      	cmp	r0, r3
 800f4b0:	d142      	bne.n	800f538 <_strtod_l+0x8f8>
 800f4b2:	4ba7      	ldr	r3, [pc, #668]	; (800f750 <_strtod_l+0xb10>)
 800f4b4:	429d      	cmp	r5, r3
 800f4b6:	d102      	bne.n	800f4be <_strtod_l+0x87e>
 800f4b8:	3001      	adds	r0, #1
 800f4ba:	f43f addf 	beq.w	800f07c <_strtod_l+0x43c>
 800f4be:	4ba3      	ldr	r3, [pc, #652]	; (800f74c <_strtod_l+0xb0c>)
 800f4c0:	402b      	ands	r3, r5
 800f4c2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f4c6:	f04f 0a00 	mov.w	sl, #0
 800f4ca:	e7a0      	b.n	800f40e <_strtod_l+0x7ce>
 800f4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f4d0:	e7ed      	b.n	800f4ae <_strtod_l+0x86e>
 800f4d2:	460b      	mov	r3, r1
 800f4d4:	e7eb      	b.n	800f4ae <_strtod_l+0x86e>
 800f4d6:	bb7b      	cbnz	r3, 800f538 <_strtod_l+0x8f8>
 800f4d8:	f1ba 0f00 	cmp.w	sl, #0
 800f4dc:	d12c      	bne.n	800f538 <_strtod_l+0x8f8>
 800f4de:	9904      	ldr	r1, [sp, #16]
 800f4e0:	4a9a      	ldr	r2, [pc, #616]	; (800f74c <_strtod_l+0xb0c>)
 800f4e2:	465b      	mov	r3, fp
 800f4e4:	b1f1      	cbz	r1, 800f524 <_strtod_l+0x8e4>
 800f4e6:	ea02 010b 	and.w	r1, r2, fp
 800f4ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f4ee:	dc19      	bgt.n	800f524 <_strtod_l+0x8e4>
 800f4f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f4f4:	f77f ae5b 	ble.w	800f1ae <_strtod_l+0x56e>
 800f4f8:	4a96      	ldr	r2, [pc, #600]	; (800f754 <_strtod_l+0xb14>)
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800f500:	4650      	mov	r0, sl
 800f502:	4659      	mov	r1, fp
 800f504:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f508:	f7f8 ffae 	bl	8008468 <__aeabi_dmul>
 800f50c:	4682      	mov	sl, r0
 800f50e:	468b      	mov	fp, r1
 800f510:	2900      	cmp	r1, #0
 800f512:	f47f adbe 	bne.w	800f092 <_strtod_l+0x452>
 800f516:	2800      	cmp	r0, #0
 800f518:	f47f adbb 	bne.w	800f092 <_strtod_l+0x452>
 800f51c:	2322      	movs	r3, #34	; 0x22
 800f51e:	f8c9 3000 	str.w	r3, [r9]
 800f522:	e5b6      	b.n	800f092 <_strtod_l+0x452>
 800f524:	4013      	ands	r3, r2
 800f526:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f52a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f52e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f532:	f04f 3aff 	mov.w	sl, #4294967295
 800f536:	e76a      	b.n	800f40e <_strtod_l+0x7ce>
 800f538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f53a:	b193      	cbz	r3, 800f562 <_strtod_l+0x922>
 800f53c:	422b      	tst	r3, r5
 800f53e:	f43f af66 	beq.w	800f40e <_strtod_l+0x7ce>
 800f542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f544:	9a04      	ldr	r2, [sp, #16]
 800f546:	4650      	mov	r0, sl
 800f548:	4659      	mov	r1, fp
 800f54a:	b173      	cbz	r3, 800f56a <_strtod_l+0x92a>
 800f54c:	f7ff fb5b 	bl	800ec06 <sulp>
 800f550:	4602      	mov	r2, r0
 800f552:	460b      	mov	r3, r1
 800f554:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f558:	f7f8 fdd0 	bl	80080fc <__adddf3>
 800f55c:	4682      	mov	sl, r0
 800f55e:	468b      	mov	fp, r1
 800f560:	e755      	b.n	800f40e <_strtod_l+0x7ce>
 800f562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f564:	ea13 0f0a 	tst.w	r3, sl
 800f568:	e7e9      	b.n	800f53e <_strtod_l+0x8fe>
 800f56a:	f7ff fb4c 	bl	800ec06 <sulp>
 800f56e:	4602      	mov	r2, r0
 800f570:	460b      	mov	r3, r1
 800f572:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f576:	f7f8 fdbf 	bl	80080f8 <__aeabi_dsub>
 800f57a:	2200      	movs	r2, #0
 800f57c:	2300      	movs	r3, #0
 800f57e:	4682      	mov	sl, r0
 800f580:	468b      	mov	fp, r1
 800f582:	f7f9 f9d9 	bl	8008938 <__aeabi_dcmpeq>
 800f586:	2800      	cmp	r0, #0
 800f588:	f47f ae11 	bne.w	800f1ae <_strtod_l+0x56e>
 800f58c:	e73f      	b.n	800f40e <_strtod_l+0x7ce>
 800f58e:	4641      	mov	r1, r8
 800f590:	4620      	mov	r0, r4
 800f592:	f002 f840 	bl	8011616 <__ratio>
 800f596:	ec57 6b10 	vmov	r6, r7, d0
 800f59a:	2200      	movs	r2, #0
 800f59c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f5a0:	ee10 0a10 	vmov	r0, s0
 800f5a4:	4639      	mov	r1, r7
 800f5a6:	f7f9 f9db 	bl	8008960 <__aeabi_dcmple>
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	d077      	beq.n	800f69e <_strtod_l+0xa5e>
 800f5ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d04a      	beq.n	800f64a <_strtod_l+0xa0a>
 800f5b4:	4b68      	ldr	r3, [pc, #416]	; (800f758 <_strtod_l+0xb18>)
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f5bc:	4f66      	ldr	r7, [pc, #408]	; (800f758 <_strtod_l+0xb18>)
 800f5be:	2600      	movs	r6, #0
 800f5c0:	4b62      	ldr	r3, [pc, #392]	; (800f74c <_strtod_l+0xb0c>)
 800f5c2:	402b      	ands	r3, r5
 800f5c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f5c8:	4b64      	ldr	r3, [pc, #400]	; (800f75c <_strtod_l+0xb1c>)
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	f040 80ce 	bne.w	800f76c <_strtod_l+0xb2c>
 800f5d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f5d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5d8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800f5dc:	ec4b ab10 	vmov	d0, sl, fp
 800f5e0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800f5e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f5e8:	f001 ff50 	bl	801148c <__ulp>
 800f5ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5f0:	ec53 2b10 	vmov	r2, r3, d0
 800f5f4:	f7f8 ff38 	bl	8008468 <__aeabi_dmul>
 800f5f8:	4652      	mov	r2, sl
 800f5fa:	465b      	mov	r3, fp
 800f5fc:	f7f8 fd7e 	bl	80080fc <__adddf3>
 800f600:	460b      	mov	r3, r1
 800f602:	4952      	ldr	r1, [pc, #328]	; (800f74c <_strtod_l+0xb0c>)
 800f604:	4a56      	ldr	r2, [pc, #344]	; (800f760 <_strtod_l+0xb20>)
 800f606:	4019      	ands	r1, r3
 800f608:	4291      	cmp	r1, r2
 800f60a:	4682      	mov	sl, r0
 800f60c:	d95b      	bls.n	800f6c6 <_strtod_l+0xa86>
 800f60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f610:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f614:	4293      	cmp	r3, r2
 800f616:	d103      	bne.n	800f620 <_strtod_l+0x9e0>
 800f618:	9b08      	ldr	r3, [sp, #32]
 800f61a:	3301      	adds	r3, #1
 800f61c:	f43f ad2e 	beq.w	800f07c <_strtod_l+0x43c>
 800f620:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800f750 <_strtod_l+0xb10>
 800f624:	f04f 3aff 	mov.w	sl, #4294967295
 800f628:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f62a:	4648      	mov	r0, r9
 800f62c:	f001 fc97 	bl	8010f5e <_Bfree>
 800f630:	9905      	ldr	r1, [sp, #20]
 800f632:	4648      	mov	r0, r9
 800f634:	f001 fc93 	bl	8010f5e <_Bfree>
 800f638:	4641      	mov	r1, r8
 800f63a:	4648      	mov	r0, r9
 800f63c:	f001 fc8f 	bl	8010f5e <_Bfree>
 800f640:	4621      	mov	r1, r4
 800f642:	4648      	mov	r0, r9
 800f644:	f001 fc8b 	bl	8010f5e <_Bfree>
 800f648:	e619      	b.n	800f27e <_strtod_l+0x63e>
 800f64a:	f1ba 0f00 	cmp.w	sl, #0
 800f64e:	d11a      	bne.n	800f686 <_strtod_l+0xa46>
 800f650:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f654:	b9eb      	cbnz	r3, 800f692 <_strtod_l+0xa52>
 800f656:	2200      	movs	r2, #0
 800f658:	4b3f      	ldr	r3, [pc, #252]	; (800f758 <_strtod_l+0xb18>)
 800f65a:	4630      	mov	r0, r6
 800f65c:	4639      	mov	r1, r7
 800f65e:	f7f9 f975 	bl	800894c <__aeabi_dcmplt>
 800f662:	b9c8      	cbnz	r0, 800f698 <_strtod_l+0xa58>
 800f664:	4630      	mov	r0, r6
 800f666:	4639      	mov	r1, r7
 800f668:	2200      	movs	r2, #0
 800f66a:	4b3e      	ldr	r3, [pc, #248]	; (800f764 <_strtod_l+0xb24>)
 800f66c:	f7f8 fefc 	bl	8008468 <__aeabi_dmul>
 800f670:	4606      	mov	r6, r0
 800f672:	460f      	mov	r7, r1
 800f674:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f678:	9618      	str	r6, [sp, #96]	; 0x60
 800f67a:	9319      	str	r3, [sp, #100]	; 0x64
 800f67c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800f680:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f684:	e79c      	b.n	800f5c0 <_strtod_l+0x980>
 800f686:	f1ba 0f01 	cmp.w	sl, #1
 800f68a:	d102      	bne.n	800f692 <_strtod_l+0xa52>
 800f68c:	2d00      	cmp	r5, #0
 800f68e:	f43f ad8e 	beq.w	800f1ae <_strtod_l+0x56e>
 800f692:	2200      	movs	r2, #0
 800f694:	4b34      	ldr	r3, [pc, #208]	; (800f768 <_strtod_l+0xb28>)
 800f696:	e78f      	b.n	800f5b8 <_strtod_l+0x978>
 800f698:	2600      	movs	r6, #0
 800f69a:	4f32      	ldr	r7, [pc, #200]	; (800f764 <_strtod_l+0xb24>)
 800f69c:	e7ea      	b.n	800f674 <_strtod_l+0xa34>
 800f69e:	4b31      	ldr	r3, [pc, #196]	; (800f764 <_strtod_l+0xb24>)
 800f6a0:	4630      	mov	r0, r6
 800f6a2:	4639      	mov	r1, r7
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	f7f8 fedf 	bl	8008468 <__aeabi_dmul>
 800f6aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6ac:	4606      	mov	r6, r0
 800f6ae:	460f      	mov	r7, r1
 800f6b0:	b933      	cbnz	r3, 800f6c0 <_strtod_l+0xa80>
 800f6b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6b6:	9010      	str	r0, [sp, #64]	; 0x40
 800f6b8:	9311      	str	r3, [sp, #68]	; 0x44
 800f6ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f6be:	e7df      	b.n	800f680 <_strtod_l+0xa40>
 800f6c0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f6c4:	e7f9      	b.n	800f6ba <_strtod_l+0xa7a>
 800f6c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f6ca:	9b04      	ldr	r3, [sp, #16]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d1ab      	bne.n	800f628 <_strtod_l+0x9e8>
 800f6d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f6d4:	0d1b      	lsrs	r3, r3, #20
 800f6d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f6d8:	051b      	lsls	r3, r3, #20
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	465d      	mov	r5, fp
 800f6de:	d1a3      	bne.n	800f628 <_strtod_l+0x9e8>
 800f6e0:	4639      	mov	r1, r7
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	f7f9 f970 	bl	80089c8 <__aeabi_d2iz>
 800f6e8:	f7f8 fe54 	bl	8008394 <__aeabi_i2d>
 800f6ec:	460b      	mov	r3, r1
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	4639      	mov	r1, r7
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	f7f8 fd00 	bl	80080f8 <__aeabi_dsub>
 800f6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6fa:	4606      	mov	r6, r0
 800f6fc:	460f      	mov	r7, r1
 800f6fe:	b933      	cbnz	r3, 800f70e <_strtod_l+0xace>
 800f700:	f1ba 0f00 	cmp.w	sl, #0
 800f704:	d103      	bne.n	800f70e <_strtod_l+0xace>
 800f706:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800f70a:	2d00      	cmp	r5, #0
 800f70c:	d06d      	beq.n	800f7ea <_strtod_l+0xbaa>
 800f70e:	a30a      	add	r3, pc, #40	; (adr r3, 800f738 <_strtod_l+0xaf8>)
 800f710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f714:	4630      	mov	r0, r6
 800f716:	4639      	mov	r1, r7
 800f718:	f7f9 f918 	bl	800894c <__aeabi_dcmplt>
 800f71c:	2800      	cmp	r0, #0
 800f71e:	f47f acb8 	bne.w	800f092 <_strtod_l+0x452>
 800f722:	a307      	add	r3, pc, #28	; (adr r3, 800f740 <_strtod_l+0xb00>)
 800f724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f728:	4630      	mov	r0, r6
 800f72a:	4639      	mov	r1, r7
 800f72c:	f7f9 f92c 	bl	8008988 <__aeabi_dcmpgt>
 800f730:	2800      	cmp	r0, #0
 800f732:	f43f af79 	beq.w	800f628 <_strtod_l+0x9e8>
 800f736:	e4ac      	b.n	800f092 <_strtod_l+0x452>
 800f738:	94a03595 	.word	0x94a03595
 800f73c:	3fdfffff 	.word	0x3fdfffff
 800f740:	35afe535 	.word	0x35afe535
 800f744:	3fe00000 	.word	0x3fe00000
 800f748:	000fffff 	.word	0x000fffff
 800f74c:	7ff00000 	.word	0x7ff00000
 800f750:	7fefffff 	.word	0x7fefffff
 800f754:	39500000 	.word	0x39500000
 800f758:	3ff00000 	.word	0x3ff00000
 800f75c:	7fe00000 	.word	0x7fe00000
 800f760:	7c9fffff 	.word	0x7c9fffff
 800f764:	3fe00000 	.word	0x3fe00000
 800f768:	bff00000 	.word	0xbff00000
 800f76c:	9b04      	ldr	r3, [sp, #16]
 800f76e:	b333      	cbz	r3, 800f7be <_strtod_l+0xb7e>
 800f770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f772:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f776:	d822      	bhi.n	800f7be <_strtod_l+0xb7e>
 800f778:	a327      	add	r3, pc, #156	; (adr r3, 800f818 <_strtod_l+0xbd8>)
 800f77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77e:	4630      	mov	r0, r6
 800f780:	4639      	mov	r1, r7
 800f782:	f7f9 f8ed 	bl	8008960 <__aeabi_dcmple>
 800f786:	b1a0      	cbz	r0, 800f7b2 <_strtod_l+0xb72>
 800f788:	4639      	mov	r1, r7
 800f78a:	4630      	mov	r0, r6
 800f78c:	f7f9 f944 	bl	8008a18 <__aeabi_d2uiz>
 800f790:	2800      	cmp	r0, #0
 800f792:	bf08      	it	eq
 800f794:	2001      	moveq	r0, #1
 800f796:	f7f8 fded 	bl	8008374 <__aeabi_ui2d>
 800f79a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f79c:	4606      	mov	r6, r0
 800f79e:	460f      	mov	r7, r1
 800f7a0:	bb03      	cbnz	r3, 800f7e4 <_strtod_l+0xba4>
 800f7a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f7a6:	9012      	str	r0, [sp, #72]	; 0x48
 800f7a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800f7aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f7ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f7b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f7b6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f7ba:	1a9b      	subs	r3, r3, r2
 800f7bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7be:	ed9d 0b08 	vldr	d0, [sp, #32]
 800f7c2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f7c6:	f001 fe61 	bl	801148c <__ulp>
 800f7ca:	4650      	mov	r0, sl
 800f7cc:	ec53 2b10 	vmov	r2, r3, d0
 800f7d0:	4659      	mov	r1, fp
 800f7d2:	f7f8 fe49 	bl	8008468 <__aeabi_dmul>
 800f7d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f7da:	f7f8 fc8f 	bl	80080fc <__adddf3>
 800f7de:	4682      	mov	sl, r0
 800f7e0:	468b      	mov	fp, r1
 800f7e2:	e772      	b.n	800f6ca <_strtod_l+0xa8a>
 800f7e4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800f7e8:	e7df      	b.n	800f7aa <_strtod_l+0xb6a>
 800f7ea:	a30d      	add	r3, pc, #52	; (adr r3, 800f820 <_strtod_l+0xbe0>)
 800f7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f0:	f7f9 f8ac 	bl	800894c <__aeabi_dcmplt>
 800f7f4:	e79c      	b.n	800f730 <_strtod_l+0xaf0>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	930d      	str	r3, [sp, #52]	; 0x34
 800f7fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f7fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f7fe:	6013      	str	r3, [r2, #0]
 800f800:	f7ff ba61 	b.w	800ecc6 <_strtod_l+0x86>
 800f804:	2b65      	cmp	r3, #101	; 0x65
 800f806:	f04f 0200 	mov.w	r2, #0
 800f80a:	f43f ab4e 	beq.w	800eeaa <_strtod_l+0x26a>
 800f80e:	2101      	movs	r1, #1
 800f810:	4614      	mov	r4, r2
 800f812:	9104      	str	r1, [sp, #16]
 800f814:	f7ff bacb 	b.w	800edae <_strtod_l+0x16e>
 800f818:	ffc00000 	.word	0xffc00000
 800f81c:	41dfffff 	.word	0x41dfffff
 800f820:	94a03595 	.word	0x94a03595
 800f824:	3fcfffff 	.word	0x3fcfffff

0800f828 <_strtod_r>:
 800f828:	4b05      	ldr	r3, [pc, #20]	; (800f840 <_strtod_r+0x18>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	b410      	push	{r4}
 800f82e:	6a1b      	ldr	r3, [r3, #32]
 800f830:	4c04      	ldr	r4, [pc, #16]	; (800f844 <_strtod_r+0x1c>)
 800f832:	2b00      	cmp	r3, #0
 800f834:	bf08      	it	eq
 800f836:	4623      	moveq	r3, r4
 800f838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f83c:	f7ff ba00 	b.w	800ec40 <_strtod_l>
 800f840:	2000002c 	.word	0x2000002c
 800f844:	20000090 	.word	0x20000090

0800f848 <_strtol_l.isra.0>:
 800f848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f84c:	4680      	mov	r8, r0
 800f84e:	4689      	mov	r9, r1
 800f850:	4692      	mov	sl, r2
 800f852:	461e      	mov	r6, r3
 800f854:	460f      	mov	r7, r1
 800f856:	463d      	mov	r5, r7
 800f858:	9808      	ldr	r0, [sp, #32]
 800f85a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f85e:	f001 faef 	bl	8010e40 <__locale_ctype_ptr_l>
 800f862:	4420      	add	r0, r4
 800f864:	7843      	ldrb	r3, [r0, #1]
 800f866:	f013 0308 	ands.w	r3, r3, #8
 800f86a:	d132      	bne.n	800f8d2 <_strtol_l.isra.0+0x8a>
 800f86c:	2c2d      	cmp	r4, #45	; 0x2d
 800f86e:	d132      	bne.n	800f8d6 <_strtol_l.isra.0+0x8e>
 800f870:	787c      	ldrb	r4, [r7, #1]
 800f872:	1cbd      	adds	r5, r7, #2
 800f874:	2201      	movs	r2, #1
 800f876:	2e00      	cmp	r6, #0
 800f878:	d05d      	beq.n	800f936 <_strtol_l.isra.0+0xee>
 800f87a:	2e10      	cmp	r6, #16
 800f87c:	d109      	bne.n	800f892 <_strtol_l.isra.0+0x4a>
 800f87e:	2c30      	cmp	r4, #48	; 0x30
 800f880:	d107      	bne.n	800f892 <_strtol_l.isra.0+0x4a>
 800f882:	782b      	ldrb	r3, [r5, #0]
 800f884:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f888:	2b58      	cmp	r3, #88	; 0x58
 800f88a:	d14f      	bne.n	800f92c <_strtol_l.isra.0+0xe4>
 800f88c:	786c      	ldrb	r4, [r5, #1]
 800f88e:	2610      	movs	r6, #16
 800f890:	3502      	adds	r5, #2
 800f892:	2a00      	cmp	r2, #0
 800f894:	bf14      	ite	ne
 800f896:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f89a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f89e:	2700      	movs	r7, #0
 800f8a0:	fbb1 fcf6 	udiv	ip, r1, r6
 800f8a4:	4638      	mov	r0, r7
 800f8a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800f8aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f8ae:	2b09      	cmp	r3, #9
 800f8b0:	d817      	bhi.n	800f8e2 <_strtol_l.isra.0+0x9a>
 800f8b2:	461c      	mov	r4, r3
 800f8b4:	42a6      	cmp	r6, r4
 800f8b6:	dd23      	ble.n	800f900 <_strtol_l.isra.0+0xb8>
 800f8b8:	1c7b      	adds	r3, r7, #1
 800f8ba:	d007      	beq.n	800f8cc <_strtol_l.isra.0+0x84>
 800f8bc:	4584      	cmp	ip, r0
 800f8be:	d31c      	bcc.n	800f8fa <_strtol_l.isra.0+0xb2>
 800f8c0:	d101      	bne.n	800f8c6 <_strtol_l.isra.0+0x7e>
 800f8c2:	45a6      	cmp	lr, r4
 800f8c4:	db19      	blt.n	800f8fa <_strtol_l.isra.0+0xb2>
 800f8c6:	fb00 4006 	mla	r0, r0, r6, r4
 800f8ca:	2701      	movs	r7, #1
 800f8cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8d0:	e7eb      	b.n	800f8aa <_strtol_l.isra.0+0x62>
 800f8d2:	462f      	mov	r7, r5
 800f8d4:	e7bf      	b.n	800f856 <_strtol_l.isra.0+0xe>
 800f8d6:	2c2b      	cmp	r4, #43	; 0x2b
 800f8d8:	bf04      	itt	eq
 800f8da:	1cbd      	addeq	r5, r7, #2
 800f8dc:	787c      	ldrbeq	r4, [r7, #1]
 800f8de:	461a      	mov	r2, r3
 800f8e0:	e7c9      	b.n	800f876 <_strtol_l.isra.0+0x2e>
 800f8e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f8e6:	2b19      	cmp	r3, #25
 800f8e8:	d801      	bhi.n	800f8ee <_strtol_l.isra.0+0xa6>
 800f8ea:	3c37      	subs	r4, #55	; 0x37
 800f8ec:	e7e2      	b.n	800f8b4 <_strtol_l.isra.0+0x6c>
 800f8ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f8f2:	2b19      	cmp	r3, #25
 800f8f4:	d804      	bhi.n	800f900 <_strtol_l.isra.0+0xb8>
 800f8f6:	3c57      	subs	r4, #87	; 0x57
 800f8f8:	e7dc      	b.n	800f8b4 <_strtol_l.isra.0+0x6c>
 800f8fa:	f04f 37ff 	mov.w	r7, #4294967295
 800f8fe:	e7e5      	b.n	800f8cc <_strtol_l.isra.0+0x84>
 800f900:	1c7b      	adds	r3, r7, #1
 800f902:	d108      	bne.n	800f916 <_strtol_l.isra.0+0xce>
 800f904:	2322      	movs	r3, #34	; 0x22
 800f906:	f8c8 3000 	str.w	r3, [r8]
 800f90a:	4608      	mov	r0, r1
 800f90c:	f1ba 0f00 	cmp.w	sl, #0
 800f910:	d107      	bne.n	800f922 <_strtol_l.isra.0+0xda>
 800f912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f916:	b102      	cbz	r2, 800f91a <_strtol_l.isra.0+0xd2>
 800f918:	4240      	negs	r0, r0
 800f91a:	f1ba 0f00 	cmp.w	sl, #0
 800f91e:	d0f8      	beq.n	800f912 <_strtol_l.isra.0+0xca>
 800f920:	b10f      	cbz	r7, 800f926 <_strtol_l.isra.0+0xde>
 800f922:	f105 39ff 	add.w	r9, r5, #4294967295
 800f926:	f8ca 9000 	str.w	r9, [sl]
 800f92a:	e7f2      	b.n	800f912 <_strtol_l.isra.0+0xca>
 800f92c:	2430      	movs	r4, #48	; 0x30
 800f92e:	2e00      	cmp	r6, #0
 800f930:	d1af      	bne.n	800f892 <_strtol_l.isra.0+0x4a>
 800f932:	2608      	movs	r6, #8
 800f934:	e7ad      	b.n	800f892 <_strtol_l.isra.0+0x4a>
 800f936:	2c30      	cmp	r4, #48	; 0x30
 800f938:	d0a3      	beq.n	800f882 <_strtol_l.isra.0+0x3a>
 800f93a:	260a      	movs	r6, #10
 800f93c:	e7a9      	b.n	800f892 <_strtol_l.isra.0+0x4a>
	...

0800f940 <_strtol_r>:
 800f940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f942:	4c06      	ldr	r4, [pc, #24]	; (800f95c <_strtol_r+0x1c>)
 800f944:	4d06      	ldr	r5, [pc, #24]	; (800f960 <_strtol_r+0x20>)
 800f946:	6824      	ldr	r4, [r4, #0]
 800f948:	6a24      	ldr	r4, [r4, #32]
 800f94a:	2c00      	cmp	r4, #0
 800f94c:	bf08      	it	eq
 800f94e:	462c      	moveq	r4, r5
 800f950:	9400      	str	r4, [sp, #0]
 800f952:	f7ff ff79 	bl	800f848 <_strtol_l.isra.0>
 800f956:	b003      	add	sp, #12
 800f958:	bd30      	pop	{r4, r5, pc}
 800f95a:	bf00      	nop
 800f95c:	2000002c 	.word	0x2000002c
 800f960:	20000090 	.word	0x20000090

0800f964 <__swbuf_r>:
 800f964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f966:	460e      	mov	r6, r1
 800f968:	4614      	mov	r4, r2
 800f96a:	4605      	mov	r5, r0
 800f96c:	b118      	cbz	r0, 800f976 <__swbuf_r+0x12>
 800f96e:	6983      	ldr	r3, [r0, #24]
 800f970:	b90b      	cbnz	r3, 800f976 <__swbuf_r+0x12>
 800f972:	f7fd fef3 	bl	800d75c <__sinit>
 800f976:	4b21      	ldr	r3, [pc, #132]	; (800f9fc <__swbuf_r+0x98>)
 800f978:	429c      	cmp	r4, r3
 800f97a:	d12a      	bne.n	800f9d2 <__swbuf_r+0x6e>
 800f97c:	686c      	ldr	r4, [r5, #4]
 800f97e:	69a3      	ldr	r3, [r4, #24]
 800f980:	60a3      	str	r3, [r4, #8]
 800f982:	89a3      	ldrh	r3, [r4, #12]
 800f984:	071a      	lsls	r2, r3, #28
 800f986:	d52e      	bpl.n	800f9e6 <__swbuf_r+0x82>
 800f988:	6923      	ldr	r3, [r4, #16]
 800f98a:	b363      	cbz	r3, 800f9e6 <__swbuf_r+0x82>
 800f98c:	6923      	ldr	r3, [r4, #16]
 800f98e:	6820      	ldr	r0, [r4, #0]
 800f990:	1ac0      	subs	r0, r0, r3
 800f992:	6963      	ldr	r3, [r4, #20]
 800f994:	b2f6      	uxtb	r6, r6
 800f996:	4283      	cmp	r3, r0
 800f998:	4637      	mov	r7, r6
 800f99a:	dc04      	bgt.n	800f9a6 <__swbuf_r+0x42>
 800f99c:	4621      	mov	r1, r4
 800f99e:	4628      	mov	r0, r5
 800f9a0:	f7fd fe72 	bl	800d688 <_fflush_r>
 800f9a4:	bb28      	cbnz	r0, 800f9f2 <__swbuf_r+0x8e>
 800f9a6:	68a3      	ldr	r3, [r4, #8]
 800f9a8:	3b01      	subs	r3, #1
 800f9aa:	60a3      	str	r3, [r4, #8]
 800f9ac:	6823      	ldr	r3, [r4, #0]
 800f9ae:	1c5a      	adds	r2, r3, #1
 800f9b0:	6022      	str	r2, [r4, #0]
 800f9b2:	701e      	strb	r6, [r3, #0]
 800f9b4:	6963      	ldr	r3, [r4, #20]
 800f9b6:	3001      	adds	r0, #1
 800f9b8:	4283      	cmp	r3, r0
 800f9ba:	d004      	beq.n	800f9c6 <__swbuf_r+0x62>
 800f9bc:	89a3      	ldrh	r3, [r4, #12]
 800f9be:	07db      	lsls	r3, r3, #31
 800f9c0:	d519      	bpl.n	800f9f6 <__swbuf_r+0x92>
 800f9c2:	2e0a      	cmp	r6, #10
 800f9c4:	d117      	bne.n	800f9f6 <__swbuf_r+0x92>
 800f9c6:	4621      	mov	r1, r4
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	f7fd fe5d 	bl	800d688 <_fflush_r>
 800f9ce:	b190      	cbz	r0, 800f9f6 <__swbuf_r+0x92>
 800f9d0:	e00f      	b.n	800f9f2 <__swbuf_r+0x8e>
 800f9d2:	4b0b      	ldr	r3, [pc, #44]	; (800fa00 <__swbuf_r+0x9c>)
 800f9d4:	429c      	cmp	r4, r3
 800f9d6:	d101      	bne.n	800f9dc <__swbuf_r+0x78>
 800f9d8:	68ac      	ldr	r4, [r5, #8]
 800f9da:	e7d0      	b.n	800f97e <__swbuf_r+0x1a>
 800f9dc:	4b09      	ldr	r3, [pc, #36]	; (800fa04 <__swbuf_r+0xa0>)
 800f9de:	429c      	cmp	r4, r3
 800f9e0:	bf08      	it	eq
 800f9e2:	68ec      	ldreq	r4, [r5, #12]
 800f9e4:	e7cb      	b.n	800f97e <__swbuf_r+0x1a>
 800f9e6:	4621      	mov	r1, r4
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	f000 f81f 	bl	800fa2c <__swsetup_r>
 800f9ee:	2800      	cmp	r0, #0
 800f9f0:	d0cc      	beq.n	800f98c <__swbuf_r+0x28>
 800f9f2:	f04f 37ff 	mov.w	r7, #4294967295
 800f9f6:	4638      	mov	r0, r7
 800f9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	08011c40 	.word	0x08011c40
 800fa00:	08011c60 	.word	0x08011c60
 800fa04:	08011c20 	.word	0x08011c20

0800fa08 <_write_r>:
 800fa08:	b538      	push	{r3, r4, r5, lr}
 800fa0a:	4c07      	ldr	r4, [pc, #28]	; (800fa28 <_write_r+0x20>)
 800fa0c:	4605      	mov	r5, r0
 800fa0e:	4608      	mov	r0, r1
 800fa10:	4611      	mov	r1, r2
 800fa12:	2200      	movs	r2, #0
 800fa14:	6022      	str	r2, [r4, #0]
 800fa16:	461a      	mov	r2, r3
 800fa18:	f7fa fc3c 	bl	800a294 <_write>
 800fa1c:	1c43      	adds	r3, r0, #1
 800fa1e:	d102      	bne.n	800fa26 <_write_r+0x1e>
 800fa20:	6823      	ldr	r3, [r4, #0]
 800fa22:	b103      	cbz	r3, 800fa26 <_write_r+0x1e>
 800fa24:	602b      	str	r3, [r5, #0]
 800fa26:	bd38      	pop	{r3, r4, r5, pc}
 800fa28:	20001d20 	.word	0x20001d20

0800fa2c <__swsetup_r>:
 800fa2c:	4b32      	ldr	r3, [pc, #200]	; (800faf8 <__swsetup_r+0xcc>)
 800fa2e:	b570      	push	{r4, r5, r6, lr}
 800fa30:	681d      	ldr	r5, [r3, #0]
 800fa32:	4606      	mov	r6, r0
 800fa34:	460c      	mov	r4, r1
 800fa36:	b125      	cbz	r5, 800fa42 <__swsetup_r+0x16>
 800fa38:	69ab      	ldr	r3, [r5, #24]
 800fa3a:	b913      	cbnz	r3, 800fa42 <__swsetup_r+0x16>
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	f7fd fe8d 	bl	800d75c <__sinit>
 800fa42:	4b2e      	ldr	r3, [pc, #184]	; (800fafc <__swsetup_r+0xd0>)
 800fa44:	429c      	cmp	r4, r3
 800fa46:	d10f      	bne.n	800fa68 <__swsetup_r+0x3c>
 800fa48:	686c      	ldr	r4, [r5, #4]
 800fa4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa4e:	b29a      	uxth	r2, r3
 800fa50:	0715      	lsls	r5, r2, #28
 800fa52:	d42c      	bmi.n	800faae <__swsetup_r+0x82>
 800fa54:	06d0      	lsls	r0, r2, #27
 800fa56:	d411      	bmi.n	800fa7c <__swsetup_r+0x50>
 800fa58:	2209      	movs	r2, #9
 800fa5a:	6032      	str	r2, [r6, #0]
 800fa5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa60:	81a3      	strh	r3, [r4, #12]
 800fa62:	f04f 30ff 	mov.w	r0, #4294967295
 800fa66:	e03e      	b.n	800fae6 <__swsetup_r+0xba>
 800fa68:	4b25      	ldr	r3, [pc, #148]	; (800fb00 <__swsetup_r+0xd4>)
 800fa6a:	429c      	cmp	r4, r3
 800fa6c:	d101      	bne.n	800fa72 <__swsetup_r+0x46>
 800fa6e:	68ac      	ldr	r4, [r5, #8]
 800fa70:	e7eb      	b.n	800fa4a <__swsetup_r+0x1e>
 800fa72:	4b24      	ldr	r3, [pc, #144]	; (800fb04 <__swsetup_r+0xd8>)
 800fa74:	429c      	cmp	r4, r3
 800fa76:	bf08      	it	eq
 800fa78:	68ec      	ldreq	r4, [r5, #12]
 800fa7a:	e7e6      	b.n	800fa4a <__swsetup_r+0x1e>
 800fa7c:	0751      	lsls	r1, r2, #29
 800fa7e:	d512      	bpl.n	800faa6 <__swsetup_r+0x7a>
 800fa80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa82:	b141      	cbz	r1, 800fa96 <__swsetup_r+0x6a>
 800fa84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa88:	4299      	cmp	r1, r3
 800fa8a:	d002      	beq.n	800fa92 <__swsetup_r+0x66>
 800fa8c:	4630      	mov	r0, r6
 800fa8e:	f7fd ff8b 	bl	800d9a8 <_free_r>
 800fa92:	2300      	movs	r3, #0
 800fa94:	6363      	str	r3, [r4, #52]	; 0x34
 800fa96:	89a3      	ldrh	r3, [r4, #12]
 800fa98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa9c:	81a3      	strh	r3, [r4, #12]
 800fa9e:	2300      	movs	r3, #0
 800faa0:	6063      	str	r3, [r4, #4]
 800faa2:	6923      	ldr	r3, [r4, #16]
 800faa4:	6023      	str	r3, [r4, #0]
 800faa6:	89a3      	ldrh	r3, [r4, #12]
 800faa8:	f043 0308 	orr.w	r3, r3, #8
 800faac:	81a3      	strh	r3, [r4, #12]
 800faae:	6923      	ldr	r3, [r4, #16]
 800fab0:	b94b      	cbnz	r3, 800fac6 <__swsetup_r+0x9a>
 800fab2:	89a3      	ldrh	r3, [r4, #12]
 800fab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fabc:	d003      	beq.n	800fac6 <__swsetup_r+0x9a>
 800fabe:	4621      	mov	r1, r4
 800fac0:	4630      	mov	r0, r6
 800fac2:	f7fd ff1d 	bl	800d900 <__smakebuf_r>
 800fac6:	89a2      	ldrh	r2, [r4, #12]
 800fac8:	f012 0301 	ands.w	r3, r2, #1
 800facc:	d00c      	beq.n	800fae8 <__swsetup_r+0xbc>
 800face:	2300      	movs	r3, #0
 800fad0:	60a3      	str	r3, [r4, #8]
 800fad2:	6963      	ldr	r3, [r4, #20]
 800fad4:	425b      	negs	r3, r3
 800fad6:	61a3      	str	r3, [r4, #24]
 800fad8:	6923      	ldr	r3, [r4, #16]
 800fada:	b953      	cbnz	r3, 800faf2 <__swsetup_r+0xc6>
 800fadc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fae0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800fae4:	d1ba      	bne.n	800fa5c <__swsetup_r+0x30>
 800fae6:	bd70      	pop	{r4, r5, r6, pc}
 800fae8:	0792      	lsls	r2, r2, #30
 800faea:	bf58      	it	pl
 800faec:	6963      	ldrpl	r3, [r4, #20]
 800faee:	60a3      	str	r3, [r4, #8]
 800faf0:	e7f2      	b.n	800fad8 <__swsetup_r+0xac>
 800faf2:	2000      	movs	r0, #0
 800faf4:	e7f7      	b.n	800fae6 <__swsetup_r+0xba>
 800faf6:	bf00      	nop
 800faf8:	2000002c 	.word	0x2000002c
 800fafc:	08011c40 	.word	0x08011c40
 800fb00:	08011c60 	.word	0x08011c60
 800fb04:	08011c20 	.word	0x08011c20

0800fb08 <_close_r>:
 800fb08:	b538      	push	{r3, r4, r5, lr}
 800fb0a:	4c06      	ldr	r4, [pc, #24]	; (800fb24 <_close_r+0x1c>)
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	4605      	mov	r5, r0
 800fb10:	4608      	mov	r0, r1
 800fb12:	6023      	str	r3, [r4, #0]
 800fb14:	f7fa fbcc 	bl	800a2b0 <_close>
 800fb18:	1c43      	adds	r3, r0, #1
 800fb1a:	d102      	bne.n	800fb22 <_close_r+0x1a>
 800fb1c:	6823      	ldr	r3, [r4, #0]
 800fb1e:	b103      	cbz	r3, 800fb22 <_close_r+0x1a>
 800fb20:	602b      	str	r3, [r5, #0]
 800fb22:	bd38      	pop	{r3, r4, r5, pc}
 800fb24:	20001d20 	.word	0x20001d20

0800fb28 <quorem>:
 800fb28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb2c:	6903      	ldr	r3, [r0, #16]
 800fb2e:	690c      	ldr	r4, [r1, #16]
 800fb30:	42a3      	cmp	r3, r4
 800fb32:	4680      	mov	r8, r0
 800fb34:	f2c0 8082 	blt.w	800fc3c <quorem+0x114>
 800fb38:	3c01      	subs	r4, #1
 800fb3a:	f101 0714 	add.w	r7, r1, #20
 800fb3e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800fb42:	f100 0614 	add.w	r6, r0, #20
 800fb46:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800fb4a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800fb4e:	eb06 030c 	add.w	r3, r6, ip
 800fb52:	3501      	adds	r5, #1
 800fb54:	eb07 090c 	add.w	r9, r7, ip
 800fb58:	9301      	str	r3, [sp, #4]
 800fb5a:	fbb0 f5f5 	udiv	r5, r0, r5
 800fb5e:	b395      	cbz	r5, 800fbc6 <quorem+0x9e>
 800fb60:	f04f 0a00 	mov.w	sl, #0
 800fb64:	4638      	mov	r0, r7
 800fb66:	46b6      	mov	lr, r6
 800fb68:	46d3      	mov	fp, sl
 800fb6a:	f850 2b04 	ldr.w	r2, [r0], #4
 800fb6e:	b293      	uxth	r3, r2
 800fb70:	fb05 a303 	mla	r3, r5, r3, sl
 800fb74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	ebab 0303 	sub.w	r3, fp, r3
 800fb7e:	0c12      	lsrs	r2, r2, #16
 800fb80:	f8de b000 	ldr.w	fp, [lr]
 800fb84:	fb05 a202 	mla	r2, r5, r2, sl
 800fb88:	fa13 f38b 	uxtah	r3, r3, fp
 800fb8c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800fb90:	fa1f fb82 	uxth.w	fp, r2
 800fb94:	f8de 2000 	ldr.w	r2, [lr]
 800fb98:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800fb9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fba0:	b29b      	uxth	r3, r3
 800fba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fba6:	4581      	cmp	r9, r0
 800fba8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800fbac:	f84e 3b04 	str.w	r3, [lr], #4
 800fbb0:	d2db      	bcs.n	800fb6a <quorem+0x42>
 800fbb2:	f856 300c 	ldr.w	r3, [r6, ip]
 800fbb6:	b933      	cbnz	r3, 800fbc6 <quorem+0x9e>
 800fbb8:	9b01      	ldr	r3, [sp, #4]
 800fbba:	3b04      	subs	r3, #4
 800fbbc:	429e      	cmp	r6, r3
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	d330      	bcc.n	800fc24 <quorem+0xfc>
 800fbc2:	f8c8 4010 	str.w	r4, [r8, #16]
 800fbc6:	4640      	mov	r0, r8
 800fbc8:	f001 fbe8 	bl	801139c <__mcmp>
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	db25      	blt.n	800fc1c <quorem+0xf4>
 800fbd0:	3501      	adds	r5, #1
 800fbd2:	4630      	mov	r0, r6
 800fbd4:	f04f 0c00 	mov.w	ip, #0
 800fbd8:	f857 2b04 	ldr.w	r2, [r7], #4
 800fbdc:	f8d0 e000 	ldr.w	lr, [r0]
 800fbe0:	b293      	uxth	r3, r2
 800fbe2:	ebac 0303 	sub.w	r3, ip, r3
 800fbe6:	0c12      	lsrs	r2, r2, #16
 800fbe8:	fa13 f38e 	uxtah	r3, r3, lr
 800fbec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fbf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fbf4:	b29b      	uxth	r3, r3
 800fbf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbfa:	45b9      	cmp	r9, r7
 800fbfc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fc00:	f840 3b04 	str.w	r3, [r0], #4
 800fc04:	d2e8      	bcs.n	800fbd8 <quorem+0xb0>
 800fc06:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800fc0a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fc0e:	b92a      	cbnz	r2, 800fc1c <quorem+0xf4>
 800fc10:	3b04      	subs	r3, #4
 800fc12:	429e      	cmp	r6, r3
 800fc14:	461a      	mov	r2, r3
 800fc16:	d30b      	bcc.n	800fc30 <quorem+0x108>
 800fc18:	f8c8 4010 	str.w	r4, [r8, #16]
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	b003      	add	sp, #12
 800fc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc24:	6812      	ldr	r2, [r2, #0]
 800fc26:	3b04      	subs	r3, #4
 800fc28:	2a00      	cmp	r2, #0
 800fc2a:	d1ca      	bne.n	800fbc2 <quorem+0x9a>
 800fc2c:	3c01      	subs	r4, #1
 800fc2e:	e7c5      	b.n	800fbbc <quorem+0x94>
 800fc30:	6812      	ldr	r2, [r2, #0]
 800fc32:	3b04      	subs	r3, #4
 800fc34:	2a00      	cmp	r2, #0
 800fc36:	d1ef      	bne.n	800fc18 <quorem+0xf0>
 800fc38:	3c01      	subs	r4, #1
 800fc3a:	e7ea      	b.n	800fc12 <quorem+0xea>
 800fc3c:	2000      	movs	r0, #0
 800fc3e:	e7ee      	b.n	800fc1e <quorem+0xf6>

0800fc40 <_dtoa_r>:
 800fc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc44:	ec57 6b10 	vmov	r6, r7, d0
 800fc48:	b097      	sub	sp, #92	; 0x5c
 800fc4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fc4c:	9106      	str	r1, [sp, #24]
 800fc4e:	4604      	mov	r4, r0
 800fc50:	920b      	str	r2, [sp, #44]	; 0x2c
 800fc52:	9312      	str	r3, [sp, #72]	; 0x48
 800fc54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fc58:	e9cd 6700 	strd	r6, r7, [sp]
 800fc5c:	b93d      	cbnz	r5, 800fc6e <_dtoa_r+0x2e>
 800fc5e:	2010      	movs	r0, #16
 800fc60:	f001 f914 	bl	8010e8c <malloc>
 800fc64:	6260      	str	r0, [r4, #36]	; 0x24
 800fc66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fc6a:	6005      	str	r5, [r0, #0]
 800fc6c:	60c5      	str	r5, [r0, #12]
 800fc6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc70:	6819      	ldr	r1, [r3, #0]
 800fc72:	b151      	cbz	r1, 800fc8a <_dtoa_r+0x4a>
 800fc74:	685a      	ldr	r2, [r3, #4]
 800fc76:	604a      	str	r2, [r1, #4]
 800fc78:	2301      	movs	r3, #1
 800fc7a:	4093      	lsls	r3, r2
 800fc7c:	608b      	str	r3, [r1, #8]
 800fc7e:	4620      	mov	r0, r4
 800fc80:	f001 f96d 	bl	8010f5e <_Bfree>
 800fc84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc86:	2200      	movs	r2, #0
 800fc88:	601a      	str	r2, [r3, #0]
 800fc8a:	1e3b      	subs	r3, r7, #0
 800fc8c:	bfbb      	ittet	lt
 800fc8e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fc92:	9301      	strlt	r3, [sp, #4]
 800fc94:	2300      	movge	r3, #0
 800fc96:	2201      	movlt	r2, #1
 800fc98:	bfac      	ite	ge
 800fc9a:	f8c8 3000 	strge.w	r3, [r8]
 800fc9e:	f8c8 2000 	strlt.w	r2, [r8]
 800fca2:	4baf      	ldr	r3, [pc, #700]	; (800ff60 <_dtoa_r+0x320>)
 800fca4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fca8:	ea33 0308 	bics.w	r3, r3, r8
 800fcac:	d114      	bne.n	800fcd8 <_dtoa_r+0x98>
 800fcae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fcb0:	f242 730f 	movw	r3, #9999	; 0x270f
 800fcb4:	6013      	str	r3, [r2, #0]
 800fcb6:	9b00      	ldr	r3, [sp, #0]
 800fcb8:	b923      	cbnz	r3, 800fcc4 <_dtoa_r+0x84>
 800fcba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	f000 8542 	beq.w	8010748 <_dtoa_r+0xb08>
 800fcc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcc6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ff74 <_dtoa_r+0x334>
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	f000 8544 	beq.w	8010758 <_dtoa_r+0xb18>
 800fcd0:	f10b 0303 	add.w	r3, fp, #3
 800fcd4:	f000 bd3e 	b.w	8010754 <_dtoa_r+0xb14>
 800fcd8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	2300      	movs	r3, #0
 800fce0:	4630      	mov	r0, r6
 800fce2:	4639      	mov	r1, r7
 800fce4:	f7f8 fe28 	bl	8008938 <__aeabi_dcmpeq>
 800fce8:	4681      	mov	r9, r0
 800fcea:	b168      	cbz	r0, 800fd08 <_dtoa_r+0xc8>
 800fcec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fcee:	2301      	movs	r3, #1
 800fcf0:	6013      	str	r3, [r2, #0]
 800fcf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	f000 8524 	beq.w	8010742 <_dtoa_r+0xb02>
 800fcfa:	4b9a      	ldr	r3, [pc, #616]	; (800ff64 <_dtoa_r+0x324>)
 800fcfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fcfe:	f103 3bff 	add.w	fp, r3, #4294967295
 800fd02:	6013      	str	r3, [r2, #0]
 800fd04:	f000 bd28 	b.w	8010758 <_dtoa_r+0xb18>
 800fd08:	aa14      	add	r2, sp, #80	; 0x50
 800fd0a:	a915      	add	r1, sp, #84	; 0x54
 800fd0c:	ec47 6b10 	vmov	d0, r6, r7
 800fd10:	4620      	mov	r0, r4
 800fd12:	f001 fc31 	bl	8011578 <__d2b>
 800fd16:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fd1a:	9004      	str	r0, [sp, #16]
 800fd1c:	2d00      	cmp	r5, #0
 800fd1e:	d07c      	beq.n	800fe1a <_dtoa_r+0x1da>
 800fd20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fd24:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800fd28:	46b2      	mov	sl, r6
 800fd2a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800fd2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fd32:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800fd36:	2200      	movs	r2, #0
 800fd38:	4b8b      	ldr	r3, [pc, #556]	; (800ff68 <_dtoa_r+0x328>)
 800fd3a:	4650      	mov	r0, sl
 800fd3c:	4659      	mov	r1, fp
 800fd3e:	f7f8 f9db 	bl	80080f8 <__aeabi_dsub>
 800fd42:	a381      	add	r3, pc, #516	; (adr r3, 800ff48 <_dtoa_r+0x308>)
 800fd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd48:	f7f8 fb8e 	bl	8008468 <__aeabi_dmul>
 800fd4c:	a380      	add	r3, pc, #512	; (adr r3, 800ff50 <_dtoa_r+0x310>)
 800fd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd52:	f7f8 f9d3 	bl	80080fc <__adddf3>
 800fd56:	4606      	mov	r6, r0
 800fd58:	4628      	mov	r0, r5
 800fd5a:	460f      	mov	r7, r1
 800fd5c:	f7f8 fb1a 	bl	8008394 <__aeabi_i2d>
 800fd60:	a37d      	add	r3, pc, #500	; (adr r3, 800ff58 <_dtoa_r+0x318>)
 800fd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd66:	f7f8 fb7f 	bl	8008468 <__aeabi_dmul>
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	4630      	mov	r0, r6
 800fd70:	4639      	mov	r1, r7
 800fd72:	f7f8 f9c3 	bl	80080fc <__adddf3>
 800fd76:	4606      	mov	r6, r0
 800fd78:	460f      	mov	r7, r1
 800fd7a:	f7f8 fe25 	bl	80089c8 <__aeabi_d2iz>
 800fd7e:	2200      	movs	r2, #0
 800fd80:	4682      	mov	sl, r0
 800fd82:	2300      	movs	r3, #0
 800fd84:	4630      	mov	r0, r6
 800fd86:	4639      	mov	r1, r7
 800fd88:	f7f8 fde0 	bl	800894c <__aeabi_dcmplt>
 800fd8c:	b148      	cbz	r0, 800fda2 <_dtoa_r+0x162>
 800fd8e:	4650      	mov	r0, sl
 800fd90:	f7f8 fb00 	bl	8008394 <__aeabi_i2d>
 800fd94:	4632      	mov	r2, r6
 800fd96:	463b      	mov	r3, r7
 800fd98:	f7f8 fdce 	bl	8008938 <__aeabi_dcmpeq>
 800fd9c:	b908      	cbnz	r0, 800fda2 <_dtoa_r+0x162>
 800fd9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fda2:	f1ba 0f16 	cmp.w	sl, #22
 800fda6:	d859      	bhi.n	800fe5c <_dtoa_r+0x21c>
 800fda8:	4970      	ldr	r1, [pc, #448]	; (800ff6c <_dtoa_r+0x32c>)
 800fdaa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fdae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fdb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdb6:	f7f8 fde7 	bl	8008988 <__aeabi_dcmpgt>
 800fdba:	2800      	cmp	r0, #0
 800fdbc:	d050      	beq.n	800fe60 <_dtoa_r+0x220>
 800fdbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800fdc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fdc8:	1b5d      	subs	r5, r3, r5
 800fdca:	f1b5 0801 	subs.w	r8, r5, #1
 800fdce:	bf49      	itett	mi
 800fdd0:	f1c5 0301 	rsbmi	r3, r5, #1
 800fdd4:	2300      	movpl	r3, #0
 800fdd6:	9305      	strmi	r3, [sp, #20]
 800fdd8:	f04f 0800 	movmi.w	r8, #0
 800fddc:	bf58      	it	pl
 800fdde:	9305      	strpl	r3, [sp, #20]
 800fde0:	f1ba 0f00 	cmp.w	sl, #0
 800fde4:	db3e      	blt.n	800fe64 <_dtoa_r+0x224>
 800fde6:	2300      	movs	r3, #0
 800fde8:	44d0      	add	r8, sl
 800fdea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800fdee:	9307      	str	r3, [sp, #28]
 800fdf0:	9b06      	ldr	r3, [sp, #24]
 800fdf2:	2b09      	cmp	r3, #9
 800fdf4:	f200 8090 	bhi.w	800ff18 <_dtoa_r+0x2d8>
 800fdf8:	2b05      	cmp	r3, #5
 800fdfa:	bfc4      	itt	gt
 800fdfc:	3b04      	subgt	r3, #4
 800fdfe:	9306      	strgt	r3, [sp, #24]
 800fe00:	9b06      	ldr	r3, [sp, #24]
 800fe02:	f1a3 0302 	sub.w	r3, r3, #2
 800fe06:	bfcc      	ite	gt
 800fe08:	2500      	movgt	r5, #0
 800fe0a:	2501      	movle	r5, #1
 800fe0c:	2b03      	cmp	r3, #3
 800fe0e:	f200 808f 	bhi.w	800ff30 <_dtoa_r+0x2f0>
 800fe12:	e8df f003 	tbb	[pc, r3]
 800fe16:	7f7d      	.short	0x7f7d
 800fe18:	7131      	.short	0x7131
 800fe1a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800fe1e:	441d      	add	r5, r3
 800fe20:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800fe24:	2820      	cmp	r0, #32
 800fe26:	dd13      	ble.n	800fe50 <_dtoa_r+0x210>
 800fe28:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800fe2c:	9b00      	ldr	r3, [sp, #0]
 800fe2e:	fa08 f800 	lsl.w	r8, r8, r0
 800fe32:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800fe36:	fa23 f000 	lsr.w	r0, r3, r0
 800fe3a:	ea48 0000 	orr.w	r0, r8, r0
 800fe3e:	f7f8 fa99 	bl	8008374 <__aeabi_ui2d>
 800fe42:	2301      	movs	r3, #1
 800fe44:	4682      	mov	sl, r0
 800fe46:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800fe4a:	3d01      	subs	r5, #1
 800fe4c:	9313      	str	r3, [sp, #76]	; 0x4c
 800fe4e:	e772      	b.n	800fd36 <_dtoa_r+0xf6>
 800fe50:	9b00      	ldr	r3, [sp, #0]
 800fe52:	f1c0 0020 	rsb	r0, r0, #32
 800fe56:	fa03 f000 	lsl.w	r0, r3, r0
 800fe5a:	e7f0      	b.n	800fe3e <_dtoa_r+0x1fe>
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	e7b1      	b.n	800fdc4 <_dtoa_r+0x184>
 800fe60:	900f      	str	r0, [sp, #60]	; 0x3c
 800fe62:	e7b0      	b.n	800fdc6 <_dtoa_r+0x186>
 800fe64:	9b05      	ldr	r3, [sp, #20]
 800fe66:	eba3 030a 	sub.w	r3, r3, sl
 800fe6a:	9305      	str	r3, [sp, #20]
 800fe6c:	f1ca 0300 	rsb	r3, sl, #0
 800fe70:	9307      	str	r3, [sp, #28]
 800fe72:	2300      	movs	r3, #0
 800fe74:	930e      	str	r3, [sp, #56]	; 0x38
 800fe76:	e7bb      	b.n	800fdf0 <_dtoa_r+0x1b0>
 800fe78:	2301      	movs	r3, #1
 800fe7a:	930a      	str	r3, [sp, #40]	; 0x28
 800fe7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	dd59      	ble.n	800ff36 <_dtoa_r+0x2f6>
 800fe82:	9302      	str	r3, [sp, #8]
 800fe84:	4699      	mov	r9, r3
 800fe86:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fe88:	2200      	movs	r2, #0
 800fe8a:	6072      	str	r2, [r6, #4]
 800fe8c:	2204      	movs	r2, #4
 800fe8e:	f102 0014 	add.w	r0, r2, #20
 800fe92:	4298      	cmp	r0, r3
 800fe94:	6871      	ldr	r1, [r6, #4]
 800fe96:	d953      	bls.n	800ff40 <_dtoa_r+0x300>
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f001 f82c 	bl	8010ef6 <_Balloc>
 800fe9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fea0:	6030      	str	r0, [r6, #0]
 800fea2:	f1b9 0f0e 	cmp.w	r9, #14
 800fea6:	f8d3 b000 	ldr.w	fp, [r3]
 800feaa:	f200 80e6 	bhi.w	801007a <_dtoa_r+0x43a>
 800feae:	2d00      	cmp	r5, #0
 800feb0:	f000 80e3 	beq.w	801007a <_dtoa_r+0x43a>
 800feb4:	ed9d 7b00 	vldr	d7, [sp]
 800feb8:	f1ba 0f00 	cmp.w	sl, #0
 800febc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800fec0:	dd74      	ble.n	800ffac <_dtoa_r+0x36c>
 800fec2:	4a2a      	ldr	r2, [pc, #168]	; (800ff6c <_dtoa_r+0x32c>)
 800fec4:	f00a 030f 	and.w	r3, sl, #15
 800fec8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fecc:	ed93 7b00 	vldr	d7, [r3]
 800fed0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800fed4:	06f0      	lsls	r0, r6, #27
 800fed6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800feda:	d565      	bpl.n	800ffa8 <_dtoa_r+0x368>
 800fedc:	4b24      	ldr	r3, [pc, #144]	; (800ff70 <_dtoa_r+0x330>)
 800fede:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fee2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fee6:	f7f8 fbe9 	bl	80086bc <__aeabi_ddiv>
 800feea:	e9cd 0100 	strd	r0, r1, [sp]
 800feee:	f006 060f 	and.w	r6, r6, #15
 800fef2:	2503      	movs	r5, #3
 800fef4:	4f1e      	ldr	r7, [pc, #120]	; (800ff70 <_dtoa_r+0x330>)
 800fef6:	e04c      	b.n	800ff92 <_dtoa_r+0x352>
 800fef8:	2301      	movs	r3, #1
 800fefa:	930a      	str	r3, [sp, #40]	; 0x28
 800fefc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fefe:	4453      	add	r3, sl
 800ff00:	f103 0901 	add.w	r9, r3, #1
 800ff04:	9302      	str	r3, [sp, #8]
 800ff06:	464b      	mov	r3, r9
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	bfb8      	it	lt
 800ff0c:	2301      	movlt	r3, #1
 800ff0e:	e7ba      	b.n	800fe86 <_dtoa_r+0x246>
 800ff10:	2300      	movs	r3, #0
 800ff12:	e7b2      	b.n	800fe7a <_dtoa_r+0x23a>
 800ff14:	2300      	movs	r3, #0
 800ff16:	e7f0      	b.n	800fefa <_dtoa_r+0x2ba>
 800ff18:	2501      	movs	r5, #1
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	9306      	str	r3, [sp, #24]
 800ff1e:	950a      	str	r5, [sp, #40]	; 0x28
 800ff20:	f04f 33ff 	mov.w	r3, #4294967295
 800ff24:	9302      	str	r3, [sp, #8]
 800ff26:	4699      	mov	r9, r3
 800ff28:	2200      	movs	r2, #0
 800ff2a:	2312      	movs	r3, #18
 800ff2c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ff2e:	e7aa      	b.n	800fe86 <_dtoa_r+0x246>
 800ff30:	2301      	movs	r3, #1
 800ff32:	930a      	str	r3, [sp, #40]	; 0x28
 800ff34:	e7f4      	b.n	800ff20 <_dtoa_r+0x2e0>
 800ff36:	2301      	movs	r3, #1
 800ff38:	9302      	str	r3, [sp, #8]
 800ff3a:	4699      	mov	r9, r3
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	e7f5      	b.n	800ff2c <_dtoa_r+0x2ec>
 800ff40:	3101      	adds	r1, #1
 800ff42:	6071      	str	r1, [r6, #4]
 800ff44:	0052      	lsls	r2, r2, #1
 800ff46:	e7a2      	b.n	800fe8e <_dtoa_r+0x24e>
 800ff48:	636f4361 	.word	0x636f4361
 800ff4c:	3fd287a7 	.word	0x3fd287a7
 800ff50:	8b60c8b3 	.word	0x8b60c8b3
 800ff54:	3fc68a28 	.word	0x3fc68a28
 800ff58:	509f79fb 	.word	0x509f79fb
 800ff5c:	3fd34413 	.word	0x3fd34413
 800ff60:	7ff00000 	.word	0x7ff00000
 800ff64:	08011ca6 	.word	0x08011ca6
 800ff68:	3ff80000 	.word	0x3ff80000
 800ff6c:	08011d60 	.word	0x08011d60
 800ff70:	08011d38 	.word	0x08011d38
 800ff74:	08011d29 	.word	0x08011d29
 800ff78:	07f1      	lsls	r1, r6, #31
 800ff7a:	d508      	bpl.n	800ff8e <_dtoa_r+0x34e>
 800ff7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ff80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff84:	f7f8 fa70 	bl	8008468 <__aeabi_dmul>
 800ff88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ff8c:	3501      	adds	r5, #1
 800ff8e:	1076      	asrs	r6, r6, #1
 800ff90:	3708      	adds	r7, #8
 800ff92:	2e00      	cmp	r6, #0
 800ff94:	d1f0      	bne.n	800ff78 <_dtoa_r+0x338>
 800ff96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ff9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff9e:	f7f8 fb8d 	bl	80086bc <__aeabi_ddiv>
 800ffa2:	e9cd 0100 	strd	r0, r1, [sp]
 800ffa6:	e01a      	b.n	800ffde <_dtoa_r+0x39e>
 800ffa8:	2502      	movs	r5, #2
 800ffaa:	e7a3      	b.n	800fef4 <_dtoa_r+0x2b4>
 800ffac:	f000 80a0 	beq.w	80100f0 <_dtoa_r+0x4b0>
 800ffb0:	f1ca 0600 	rsb	r6, sl, #0
 800ffb4:	4b9f      	ldr	r3, [pc, #636]	; (8010234 <_dtoa_r+0x5f4>)
 800ffb6:	4fa0      	ldr	r7, [pc, #640]	; (8010238 <_dtoa_r+0x5f8>)
 800ffb8:	f006 020f 	and.w	r2, r6, #15
 800ffbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ffc8:	f7f8 fa4e 	bl	8008468 <__aeabi_dmul>
 800ffcc:	e9cd 0100 	strd	r0, r1, [sp]
 800ffd0:	1136      	asrs	r6, r6, #4
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	2502      	movs	r5, #2
 800ffd6:	2e00      	cmp	r6, #0
 800ffd8:	d17f      	bne.n	80100da <_dtoa_r+0x49a>
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d1e1      	bne.n	800ffa2 <_dtoa_r+0x362>
 800ffde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	f000 8087 	beq.w	80100f4 <_dtoa_r+0x4b4>
 800ffe6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ffea:	2200      	movs	r2, #0
 800ffec:	4b93      	ldr	r3, [pc, #588]	; (801023c <_dtoa_r+0x5fc>)
 800ffee:	4630      	mov	r0, r6
 800fff0:	4639      	mov	r1, r7
 800fff2:	f7f8 fcab 	bl	800894c <__aeabi_dcmplt>
 800fff6:	2800      	cmp	r0, #0
 800fff8:	d07c      	beq.n	80100f4 <_dtoa_r+0x4b4>
 800fffa:	f1b9 0f00 	cmp.w	r9, #0
 800fffe:	d079      	beq.n	80100f4 <_dtoa_r+0x4b4>
 8010000:	9b02      	ldr	r3, [sp, #8]
 8010002:	2b00      	cmp	r3, #0
 8010004:	dd35      	ble.n	8010072 <_dtoa_r+0x432>
 8010006:	f10a 33ff 	add.w	r3, sl, #4294967295
 801000a:	9308      	str	r3, [sp, #32]
 801000c:	4639      	mov	r1, r7
 801000e:	2200      	movs	r2, #0
 8010010:	4b8b      	ldr	r3, [pc, #556]	; (8010240 <_dtoa_r+0x600>)
 8010012:	4630      	mov	r0, r6
 8010014:	f7f8 fa28 	bl	8008468 <__aeabi_dmul>
 8010018:	e9cd 0100 	strd	r0, r1, [sp]
 801001c:	9f02      	ldr	r7, [sp, #8]
 801001e:	3501      	adds	r5, #1
 8010020:	4628      	mov	r0, r5
 8010022:	f7f8 f9b7 	bl	8008394 <__aeabi_i2d>
 8010026:	e9dd 2300 	ldrd	r2, r3, [sp]
 801002a:	f7f8 fa1d 	bl	8008468 <__aeabi_dmul>
 801002e:	2200      	movs	r2, #0
 8010030:	4b84      	ldr	r3, [pc, #528]	; (8010244 <_dtoa_r+0x604>)
 8010032:	f7f8 f863 	bl	80080fc <__adddf3>
 8010036:	4605      	mov	r5, r0
 8010038:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801003c:	2f00      	cmp	r7, #0
 801003e:	d15d      	bne.n	80100fc <_dtoa_r+0x4bc>
 8010040:	2200      	movs	r2, #0
 8010042:	4b81      	ldr	r3, [pc, #516]	; (8010248 <_dtoa_r+0x608>)
 8010044:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010048:	f7f8 f856 	bl	80080f8 <__aeabi_dsub>
 801004c:	462a      	mov	r2, r5
 801004e:	4633      	mov	r3, r6
 8010050:	e9cd 0100 	strd	r0, r1, [sp]
 8010054:	f7f8 fc98 	bl	8008988 <__aeabi_dcmpgt>
 8010058:	2800      	cmp	r0, #0
 801005a:	f040 8288 	bne.w	801056e <_dtoa_r+0x92e>
 801005e:	462a      	mov	r2, r5
 8010060:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010064:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010068:	f7f8 fc70 	bl	800894c <__aeabi_dcmplt>
 801006c:	2800      	cmp	r0, #0
 801006e:	f040 827c 	bne.w	801056a <_dtoa_r+0x92a>
 8010072:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010076:	e9cd 2300 	strd	r2, r3, [sp]
 801007a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801007c:	2b00      	cmp	r3, #0
 801007e:	f2c0 8150 	blt.w	8010322 <_dtoa_r+0x6e2>
 8010082:	f1ba 0f0e 	cmp.w	sl, #14
 8010086:	f300 814c 	bgt.w	8010322 <_dtoa_r+0x6e2>
 801008a:	4b6a      	ldr	r3, [pc, #424]	; (8010234 <_dtoa_r+0x5f4>)
 801008c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010090:	ed93 7b00 	vldr	d7, [r3]
 8010094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010096:	2b00      	cmp	r3, #0
 8010098:	ed8d 7b02 	vstr	d7, [sp, #8]
 801009c:	f280 80d8 	bge.w	8010250 <_dtoa_r+0x610>
 80100a0:	f1b9 0f00 	cmp.w	r9, #0
 80100a4:	f300 80d4 	bgt.w	8010250 <_dtoa_r+0x610>
 80100a8:	f040 825e 	bne.w	8010568 <_dtoa_r+0x928>
 80100ac:	2200      	movs	r2, #0
 80100ae:	4b66      	ldr	r3, [pc, #408]	; (8010248 <_dtoa_r+0x608>)
 80100b0:	ec51 0b17 	vmov	r0, r1, d7
 80100b4:	f7f8 f9d8 	bl	8008468 <__aeabi_dmul>
 80100b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100bc:	f7f8 fc5a 	bl	8008974 <__aeabi_dcmpge>
 80100c0:	464f      	mov	r7, r9
 80100c2:	464e      	mov	r6, r9
 80100c4:	2800      	cmp	r0, #0
 80100c6:	f040 8234 	bne.w	8010532 <_dtoa_r+0x8f2>
 80100ca:	2331      	movs	r3, #49	; 0x31
 80100cc:	f10b 0501 	add.w	r5, fp, #1
 80100d0:	f88b 3000 	strb.w	r3, [fp]
 80100d4:	f10a 0a01 	add.w	sl, sl, #1
 80100d8:	e22f      	b.n	801053a <_dtoa_r+0x8fa>
 80100da:	07f2      	lsls	r2, r6, #31
 80100dc:	d505      	bpl.n	80100ea <_dtoa_r+0x4aa>
 80100de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100e2:	f7f8 f9c1 	bl	8008468 <__aeabi_dmul>
 80100e6:	3501      	adds	r5, #1
 80100e8:	2301      	movs	r3, #1
 80100ea:	1076      	asrs	r6, r6, #1
 80100ec:	3708      	adds	r7, #8
 80100ee:	e772      	b.n	800ffd6 <_dtoa_r+0x396>
 80100f0:	2502      	movs	r5, #2
 80100f2:	e774      	b.n	800ffde <_dtoa_r+0x39e>
 80100f4:	f8cd a020 	str.w	sl, [sp, #32]
 80100f8:	464f      	mov	r7, r9
 80100fa:	e791      	b.n	8010020 <_dtoa_r+0x3e0>
 80100fc:	4b4d      	ldr	r3, [pc, #308]	; (8010234 <_dtoa_r+0x5f4>)
 80100fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010102:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010108:	2b00      	cmp	r3, #0
 801010a:	d047      	beq.n	801019c <_dtoa_r+0x55c>
 801010c:	4602      	mov	r2, r0
 801010e:	460b      	mov	r3, r1
 8010110:	2000      	movs	r0, #0
 8010112:	494e      	ldr	r1, [pc, #312]	; (801024c <_dtoa_r+0x60c>)
 8010114:	f7f8 fad2 	bl	80086bc <__aeabi_ddiv>
 8010118:	462a      	mov	r2, r5
 801011a:	4633      	mov	r3, r6
 801011c:	f7f7 ffec 	bl	80080f8 <__aeabi_dsub>
 8010120:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010124:	465d      	mov	r5, fp
 8010126:	e9dd 0100 	ldrd	r0, r1, [sp]
 801012a:	f7f8 fc4d 	bl	80089c8 <__aeabi_d2iz>
 801012e:	4606      	mov	r6, r0
 8010130:	f7f8 f930 	bl	8008394 <__aeabi_i2d>
 8010134:	4602      	mov	r2, r0
 8010136:	460b      	mov	r3, r1
 8010138:	e9dd 0100 	ldrd	r0, r1, [sp]
 801013c:	f7f7 ffdc 	bl	80080f8 <__aeabi_dsub>
 8010140:	3630      	adds	r6, #48	; 0x30
 8010142:	f805 6b01 	strb.w	r6, [r5], #1
 8010146:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801014a:	e9cd 0100 	strd	r0, r1, [sp]
 801014e:	f7f8 fbfd 	bl	800894c <__aeabi_dcmplt>
 8010152:	2800      	cmp	r0, #0
 8010154:	d163      	bne.n	801021e <_dtoa_r+0x5de>
 8010156:	e9dd 2300 	ldrd	r2, r3, [sp]
 801015a:	2000      	movs	r0, #0
 801015c:	4937      	ldr	r1, [pc, #220]	; (801023c <_dtoa_r+0x5fc>)
 801015e:	f7f7 ffcb 	bl	80080f8 <__aeabi_dsub>
 8010162:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010166:	f7f8 fbf1 	bl	800894c <__aeabi_dcmplt>
 801016a:	2800      	cmp	r0, #0
 801016c:	f040 80b7 	bne.w	80102de <_dtoa_r+0x69e>
 8010170:	eba5 030b 	sub.w	r3, r5, fp
 8010174:	429f      	cmp	r7, r3
 8010176:	f77f af7c 	ble.w	8010072 <_dtoa_r+0x432>
 801017a:	2200      	movs	r2, #0
 801017c:	4b30      	ldr	r3, [pc, #192]	; (8010240 <_dtoa_r+0x600>)
 801017e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010182:	f7f8 f971 	bl	8008468 <__aeabi_dmul>
 8010186:	2200      	movs	r2, #0
 8010188:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801018c:	4b2c      	ldr	r3, [pc, #176]	; (8010240 <_dtoa_r+0x600>)
 801018e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010192:	f7f8 f969 	bl	8008468 <__aeabi_dmul>
 8010196:	e9cd 0100 	strd	r0, r1, [sp]
 801019a:	e7c4      	b.n	8010126 <_dtoa_r+0x4e6>
 801019c:	462a      	mov	r2, r5
 801019e:	4633      	mov	r3, r6
 80101a0:	f7f8 f962 	bl	8008468 <__aeabi_dmul>
 80101a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80101a8:	eb0b 0507 	add.w	r5, fp, r7
 80101ac:	465e      	mov	r6, fp
 80101ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101b2:	f7f8 fc09 	bl	80089c8 <__aeabi_d2iz>
 80101b6:	4607      	mov	r7, r0
 80101b8:	f7f8 f8ec 	bl	8008394 <__aeabi_i2d>
 80101bc:	3730      	adds	r7, #48	; 0x30
 80101be:	4602      	mov	r2, r0
 80101c0:	460b      	mov	r3, r1
 80101c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101c6:	f7f7 ff97 	bl	80080f8 <__aeabi_dsub>
 80101ca:	f806 7b01 	strb.w	r7, [r6], #1
 80101ce:	42ae      	cmp	r6, r5
 80101d0:	e9cd 0100 	strd	r0, r1, [sp]
 80101d4:	f04f 0200 	mov.w	r2, #0
 80101d8:	d126      	bne.n	8010228 <_dtoa_r+0x5e8>
 80101da:	4b1c      	ldr	r3, [pc, #112]	; (801024c <_dtoa_r+0x60c>)
 80101dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80101e0:	f7f7 ff8c 	bl	80080fc <__adddf3>
 80101e4:	4602      	mov	r2, r0
 80101e6:	460b      	mov	r3, r1
 80101e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101ec:	f7f8 fbcc 	bl	8008988 <__aeabi_dcmpgt>
 80101f0:	2800      	cmp	r0, #0
 80101f2:	d174      	bne.n	80102de <_dtoa_r+0x69e>
 80101f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80101f8:	2000      	movs	r0, #0
 80101fa:	4914      	ldr	r1, [pc, #80]	; (801024c <_dtoa_r+0x60c>)
 80101fc:	f7f7 ff7c 	bl	80080f8 <__aeabi_dsub>
 8010200:	4602      	mov	r2, r0
 8010202:	460b      	mov	r3, r1
 8010204:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010208:	f7f8 fba0 	bl	800894c <__aeabi_dcmplt>
 801020c:	2800      	cmp	r0, #0
 801020e:	f43f af30 	beq.w	8010072 <_dtoa_r+0x432>
 8010212:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010216:	2b30      	cmp	r3, #48	; 0x30
 8010218:	f105 32ff 	add.w	r2, r5, #4294967295
 801021c:	d002      	beq.n	8010224 <_dtoa_r+0x5e4>
 801021e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010222:	e04a      	b.n	80102ba <_dtoa_r+0x67a>
 8010224:	4615      	mov	r5, r2
 8010226:	e7f4      	b.n	8010212 <_dtoa_r+0x5d2>
 8010228:	4b05      	ldr	r3, [pc, #20]	; (8010240 <_dtoa_r+0x600>)
 801022a:	f7f8 f91d 	bl	8008468 <__aeabi_dmul>
 801022e:	e9cd 0100 	strd	r0, r1, [sp]
 8010232:	e7bc      	b.n	80101ae <_dtoa_r+0x56e>
 8010234:	08011d60 	.word	0x08011d60
 8010238:	08011d38 	.word	0x08011d38
 801023c:	3ff00000 	.word	0x3ff00000
 8010240:	40240000 	.word	0x40240000
 8010244:	401c0000 	.word	0x401c0000
 8010248:	40140000 	.word	0x40140000
 801024c:	3fe00000 	.word	0x3fe00000
 8010250:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010254:	465d      	mov	r5, fp
 8010256:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801025a:	4630      	mov	r0, r6
 801025c:	4639      	mov	r1, r7
 801025e:	f7f8 fa2d 	bl	80086bc <__aeabi_ddiv>
 8010262:	f7f8 fbb1 	bl	80089c8 <__aeabi_d2iz>
 8010266:	4680      	mov	r8, r0
 8010268:	f7f8 f894 	bl	8008394 <__aeabi_i2d>
 801026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010270:	f7f8 f8fa 	bl	8008468 <__aeabi_dmul>
 8010274:	4602      	mov	r2, r0
 8010276:	460b      	mov	r3, r1
 8010278:	4630      	mov	r0, r6
 801027a:	4639      	mov	r1, r7
 801027c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010280:	f7f7 ff3a 	bl	80080f8 <__aeabi_dsub>
 8010284:	f805 6b01 	strb.w	r6, [r5], #1
 8010288:	eba5 060b 	sub.w	r6, r5, fp
 801028c:	45b1      	cmp	r9, r6
 801028e:	4602      	mov	r2, r0
 8010290:	460b      	mov	r3, r1
 8010292:	d139      	bne.n	8010308 <_dtoa_r+0x6c8>
 8010294:	f7f7 ff32 	bl	80080fc <__adddf3>
 8010298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801029c:	4606      	mov	r6, r0
 801029e:	460f      	mov	r7, r1
 80102a0:	f7f8 fb72 	bl	8008988 <__aeabi_dcmpgt>
 80102a4:	b9c8      	cbnz	r0, 80102da <_dtoa_r+0x69a>
 80102a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102aa:	4630      	mov	r0, r6
 80102ac:	4639      	mov	r1, r7
 80102ae:	f7f8 fb43 	bl	8008938 <__aeabi_dcmpeq>
 80102b2:	b110      	cbz	r0, 80102ba <_dtoa_r+0x67a>
 80102b4:	f018 0f01 	tst.w	r8, #1
 80102b8:	d10f      	bne.n	80102da <_dtoa_r+0x69a>
 80102ba:	9904      	ldr	r1, [sp, #16]
 80102bc:	4620      	mov	r0, r4
 80102be:	f000 fe4e 	bl	8010f5e <_Bfree>
 80102c2:	2300      	movs	r3, #0
 80102c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80102c6:	702b      	strb	r3, [r5, #0]
 80102c8:	f10a 0301 	add.w	r3, sl, #1
 80102cc:	6013      	str	r3, [r2, #0]
 80102ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	f000 8241 	beq.w	8010758 <_dtoa_r+0xb18>
 80102d6:	601d      	str	r5, [r3, #0]
 80102d8:	e23e      	b.n	8010758 <_dtoa_r+0xb18>
 80102da:	f8cd a020 	str.w	sl, [sp, #32]
 80102de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80102e2:	2a39      	cmp	r2, #57	; 0x39
 80102e4:	f105 33ff 	add.w	r3, r5, #4294967295
 80102e8:	d108      	bne.n	80102fc <_dtoa_r+0x6bc>
 80102ea:	459b      	cmp	fp, r3
 80102ec:	d10a      	bne.n	8010304 <_dtoa_r+0x6c4>
 80102ee:	9b08      	ldr	r3, [sp, #32]
 80102f0:	3301      	adds	r3, #1
 80102f2:	9308      	str	r3, [sp, #32]
 80102f4:	2330      	movs	r3, #48	; 0x30
 80102f6:	f88b 3000 	strb.w	r3, [fp]
 80102fa:	465b      	mov	r3, fp
 80102fc:	781a      	ldrb	r2, [r3, #0]
 80102fe:	3201      	adds	r2, #1
 8010300:	701a      	strb	r2, [r3, #0]
 8010302:	e78c      	b.n	801021e <_dtoa_r+0x5de>
 8010304:	461d      	mov	r5, r3
 8010306:	e7ea      	b.n	80102de <_dtoa_r+0x69e>
 8010308:	2200      	movs	r2, #0
 801030a:	4b9b      	ldr	r3, [pc, #620]	; (8010578 <_dtoa_r+0x938>)
 801030c:	f7f8 f8ac 	bl	8008468 <__aeabi_dmul>
 8010310:	2200      	movs	r2, #0
 8010312:	2300      	movs	r3, #0
 8010314:	4606      	mov	r6, r0
 8010316:	460f      	mov	r7, r1
 8010318:	f7f8 fb0e 	bl	8008938 <__aeabi_dcmpeq>
 801031c:	2800      	cmp	r0, #0
 801031e:	d09a      	beq.n	8010256 <_dtoa_r+0x616>
 8010320:	e7cb      	b.n	80102ba <_dtoa_r+0x67a>
 8010322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010324:	2a00      	cmp	r2, #0
 8010326:	f000 808b 	beq.w	8010440 <_dtoa_r+0x800>
 801032a:	9a06      	ldr	r2, [sp, #24]
 801032c:	2a01      	cmp	r2, #1
 801032e:	dc6e      	bgt.n	801040e <_dtoa_r+0x7ce>
 8010330:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010332:	2a00      	cmp	r2, #0
 8010334:	d067      	beq.n	8010406 <_dtoa_r+0x7c6>
 8010336:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801033a:	9f07      	ldr	r7, [sp, #28]
 801033c:	9d05      	ldr	r5, [sp, #20]
 801033e:	9a05      	ldr	r2, [sp, #20]
 8010340:	2101      	movs	r1, #1
 8010342:	441a      	add	r2, r3
 8010344:	4620      	mov	r0, r4
 8010346:	9205      	str	r2, [sp, #20]
 8010348:	4498      	add	r8, r3
 801034a:	f000 fee6 	bl	801111a <__i2b>
 801034e:	4606      	mov	r6, r0
 8010350:	2d00      	cmp	r5, #0
 8010352:	dd0c      	ble.n	801036e <_dtoa_r+0x72e>
 8010354:	f1b8 0f00 	cmp.w	r8, #0
 8010358:	dd09      	ble.n	801036e <_dtoa_r+0x72e>
 801035a:	4545      	cmp	r5, r8
 801035c:	9a05      	ldr	r2, [sp, #20]
 801035e:	462b      	mov	r3, r5
 8010360:	bfa8      	it	ge
 8010362:	4643      	movge	r3, r8
 8010364:	1ad2      	subs	r2, r2, r3
 8010366:	9205      	str	r2, [sp, #20]
 8010368:	1aed      	subs	r5, r5, r3
 801036a:	eba8 0803 	sub.w	r8, r8, r3
 801036e:	9b07      	ldr	r3, [sp, #28]
 8010370:	b1eb      	cbz	r3, 80103ae <_dtoa_r+0x76e>
 8010372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010374:	2b00      	cmp	r3, #0
 8010376:	d067      	beq.n	8010448 <_dtoa_r+0x808>
 8010378:	b18f      	cbz	r7, 801039e <_dtoa_r+0x75e>
 801037a:	4631      	mov	r1, r6
 801037c:	463a      	mov	r2, r7
 801037e:	4620      	mov	r0, r4
 8010380:	f000 ff6a 	bl	8011258 <__pow5mult>
 8010384:	9a04      	ldr	r2, [sp, #16]
 8010386:	4601      	mov	r1, r0
 8010388:	4606      	mov	r6, r0
 801038a:	4620      	mov	r0, r4
 801038c:	f000 fece 	bl	801112c <__multiply>
 8010390:	9904      	ldr	r1, [sp, #16]
 8010392:	9008      	str	r0, [sp, #32]
 8010394:	4620      	mov	r0, r4
 8010396:	f000 fde2 	bl	8010f5e <_Bfree>
 801039a:	9b08      	ldr	r3, [sp, #32]
 801039c:	9304      	str	r3, [sp, #16]
 801039e:	9b07      	ldr	r3, [sp, #28]
 80103a0:	1bda      	subs	r2, r3, r7
 80103a2:	d004      	beq.n	80103ae <_dtoa_r+0x76e>
 80103a4:	9904      	ldr	r1, [sp, #16]
 80103a6:	4620      	mov	r0, r4
 80103a8:	f000 ff56 	bl	8011258 <__pow5mult>
 80103ac:	9004      	str	r0, [sp, #16]
 80103ae:	2101      	movs	r1, #1
 80103b0:	4620      	mov	r0, r4
 80103b2:	f000 feb2 	bl	801111a <__i2b>
 80103b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103b8:	4607      	mov	r7, r0
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	f000 81d0 	beq.w	8010760 <_dtoa_r+0xb20>
 80103c0:	461a      	mov	r2, r3
 80103c2:	4601      	mov	r1, r0
 80103c4:	4620      	mov	r0, r4
 80103c6:	f000 ff47 	bl	8011258 <__pow5mult>
 80103ca:	9b06      	ldr	r3, [sp, #24]
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	4607      	mov	r7, r0
 80103d0:	dc40      	bgt.n	8010454 <_dtoa_r+0x814>
 80103d2:	9b00      	ldr	r3, [sp, #0]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d139      	bne.n	801044c <_dtoa_r+0x80c>
 80103d8:	9b01      	ldr	r3, [sp, #4]
 80103da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d136      	bne.n	8010450 <_dtoa_r+0x810>
 80103e2:	9b01      	ldr	r3, [sp, #4]
 80103e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80103e8:	0d1b      	lsrs	r3, r3, #20
 80103ea:	051b      	lsls	r3, r3, #20
 80103ec:	b12b      	cbz	r3, 80103fa <_dtoa_r+0x7ba>
 80103ee:	9b05      	ldr	r3, [sp, #20]
 80103f0:	3301      	adds	r3, #1
 80103f2:	9305      	str	r3, [sp, #20]
 80103f4:	f108 0801 	add.w	r8, r8, #1
 80103f8:	2301      	movs	r3, #1
 80103fa:	9307      	str	r3, [sp, #28]
 80103fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d12a      	bne.n	8010458 <_dtoa_r+0x818>
 8010402:	2001      	movs	r0, #1
 8010404:	e030      	b.n	8010468 <_dtoa_r+0x828>
 8010406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010408:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801040c:	e795      	b.n	801033a <_dtoa_r+0x6fa>
 801040e:	9b07      	ldr	r3, [sp, #28]
 8010410:	f109 37ff 	add.w	r7, r9, #4294967295
 8010414:	42bb      	cmp	r3, r7
 8010416:	bfbf      	itttt	lt
 8010418:	9b07      	ldrlt	r3, [sp, #28]
 801041a:	9707      	strlt	r7, [sp, #28]
 801041c:	1afa      	sublt	r2, r7, r3
 801041e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010420:	bfbb      	ittet	lt
 8010422:	189b      	addlt	r3, r3, r2
 8010424:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010426:	1bdf      	subge	r7, r3, r7
 8010428:	2700      	movlt	r7, #0
 801042a:	f1b9 0f00 	cmp.w	r9, #0
 801042e:	bfb5      	itete	lt
 8010430:	9b05      	ldrlt	r3, [sp, #20]
 8010432:	9d05      	ldrge	r5, [sp, #20]
 8010434:	eba3 0509 	sublt.w	r5, r3, r9
 8010438:	464b      	movge	r3, r9
 801043a:	bfb8      	it	lt
 801043c:	2300      	movlt	r3, #0
 801043e:	e77e      	b.n	801033e <_dtoa_r+0x6fe>
 8010440:	9f07      	ldr	r7, [sp, #28]
 8010442:	9d05      	ldr	r5, [sp, #20]
 8010444:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010446:	e783      	b.n	8010350 <_dtoa_r+0x710>
 8010448:	9a07      	ldr	r2, [sp, #28]
 801044a:	e7ab      	b.n	80103a4 <_dtoa_r+0x764>
 801044c:	2300      	movs	r3, #0
 801044e:	e7d4      	b.n	80103fa <_dtoa_r+0x7ba>
 8010450:	9b00      	ldr	r3, [sp, #0]
 8010452:	e7d2      	b.n	80103fa <_dtoa_r+0x7ba>
 8010454:	2300      	movs	r3, #0
 8010456:	9307      	str	r3, [sp, #28]
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801045e:	6918      	ldr	r0, [r3, #16]
 8010460:	f000 fe0d 	bl	801107e <__hi0bits>
 8010464:	f1c0 0020 	rsb	r0, r0, #32
 8010468:	4440      	add	r0, r8
 801046a:	f010 001f 	ands.w	r0, r0, #31
 801046e:	d047      	beq.n	8010500 <_dtoa_r+0x8c0>
 8010470:	f1c0 0320 	rsb	r3, r0, #32
 8010474:	2b04      	cmp	r3, #4
 8010476:	dd3b      	ble.n	80104f0 <_dtoa_r+0x8b0>
 8010478:	9b05      	ldr	r3, [sp, #20]
 801047a:	f1c0 001c 	rsb	r0, r0, #28
 801047e:	4403      	add	r3, r0
 8010480:	9305      	str	r3, [sp, #20]
 8010482:	4405      	add	r5, r0
 8010484:	4480      	add	r8, r0
 8010486:	9b05      	ldr	r3, [sp, #20]
 8010488:	2b00      	cmp	r3, #0
 801048a:	dd05      	ble.n	8010498 <_dtoa_r+0x858>
 801048c:	461a      	mov	r2, r3
 801048e:	9904      	ldr	r1, [sp, #16]
 8010490:	4620      	mov	r0, r4
 8010492:	f000 ff2f 	bl	80112f4 <__lshift>
 8010496:	9004      	str	r0, [sp, #16]
 8010498:	f1b8 0f00 	cmp.w	r8, #0
 801049c:	dd05      	ble.n	80104aa <_dtoa_r+0x86a>
 801049e:	4639      	mov	r1, r7
 80104a0:	4642      	mov	r2, r8
 80104a2:	4620      	mov	r0, r4
 80104a4:	f000 ff26 	bl	80112f4 <__lshift>
 80104a8:	4607      	mov	r7, r0
 80104aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104ac:	b353      	cbz	r3, 8010504 <_dtoa_r+0x8c4>
 80104ae:	4639      	mov	r1, r7
 80104b0:	9804      	ldr	r0, [sp, #16]
 80104b2:	f000 ff73 	bl	801139c <__mcmp>
 80104b6:	2800      	cmp	r0, #0
 80104b8:	da24      	bge.n	8010504 <_dtoa_r+0x8c4>
 80104ba:	2300      	movs	r3, #0
 80104bc:	220a      	movs	r2, #10
 80104be:	9904      	ldr	r1, [sp, #16]
 80104c0:	4620      	mov	r0, r4
 80104c2:	f000 fd63 	bl	8010f8c <__multadd>
 80104c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104c8:	9004      	str	r0, [sp, #16]
 80104ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	f000 814d 	beq.w	801076e <_dtoa_r+0xb2e>
 80104d4:	2300      	movs	r3, #0
 80104d6:	4631      	mov	r1, r6
 80104d8:	220a      	movs	r2, #10
 80104da:	4620      	mov	r0, r4
 80104dc:	f000 fd56 	bl	8010f8c <__multadd>
 80104e0:	9b02      	ldr	r3, [sp, #8]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	4606      	mov	r6, r0
 80104e6:	dc4f      	bgt.n	8010588 <_dtoa_r+0x948>
 80104e8:	9b06      	ldr	r3, [sp, #24]
 80104ea:	2b02      	cmp	r3, #2
 80104ec:	dd4c      	ble.n	8010588 <_dtoa_r+0x948>
 80104ee:	e011      	b.n	8010514 <_dtoa_r+0x8d4>
 80104f0:	d0c9      	beq.n	8010486 <_dtoa_r+0x846>
 80104f2:	9a05      	ldr	r2, [sp, #20]
 80104f4:	331c      	adds	r3, #28
 80104f6:	441a      	add	r2, r3
 80104f8:	9205      	str	r2, [sp, #20]
 80104fa:	441d      	add	r5, r3
 80104fc:	4498      	add	r8, r3
 80104fe:	e7c2      	b.n	8010486 <_dtoa_r+0x846>
 8010500:	4603      	mov	r3, r0
 8010502:	e7f6      	b.n	80104f2 <_dtoa_r+0x8b2>
 8010504:	f1b9 0f00 	cmp.w	r9, #0
 8010508:	dc38      	bgt.n	801057c <_dtoa_r+0x93c>
 801050a:	9b06      	ldr	r3, [sp, #24]
 801050c:	2b02      	cmp	r3, #2
 801050e:	dd35      	ble.n	801057c <_dtoa_r+0x93c>
 8010510:	f8cd 9008 	str.w	r9, [sp, #8]
 8010514:	9b02      	ldr	r3, [sp, #8]
 8010516:	b963      	cbnz	r3, 8010532 <_dtoa_r+0x8f2>
 8010518:	4639      	mov	r1, r7
 801051a:	2205      	movs	r2, #5
 801051c:	4620      	mov	r0, r4
 801051e:	f000 fd35 	bl	8010f8c <__multadd>
 8010522:	4601      	mov	r1, r0
 8010524:	4607      	mov	r7, r0
 8010526:	9804      	ldr	r0, [sp, #16]
 8010528:	f000 ff38 	bl	801139c <__mcmp>
 801052c:	2800      	cmp	r0, #0
 801052e:	f73f adcc 	bgt.w	80100ca <_dtoa_r+0x48a>
 8010532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010534:	465d      	mov	r5, fp
 8010536:	ea6f 0a03 	mvn.w	sl, r3
 801053a:	f04f 0900 	mov.w	r9, #0
 801053e:	4639      	mov	r1, r7
 8010540:	4620      	mov	r0, r4
 8010542:	f000 fd0c 	bl	8010f5e <_Bfree>
 8010546:	2e00      	cmp	r6, #0
 8010548:	f43f aeb7 	beq.w	80102ba <_dtoa_r+0x67a>
 801054c:	f1b9 0f00 	cmp.w	r9, #0
 8010550:	d005      	beq.n	801055e <_dtoa_r+0x91e>
 8010552:	45b1      	cmp	r9, r6
 8010554:	d003      	beq.n	801055e <_dtoa_r+0x91e>
 8010556:	4649      	mov	r1, r9
 8010558:	4620      	mov	r0, r4
 801055a:	f000 fd00 	bl	8010f5e <_Bfree>
 801055e:	4631      	mov	r1, r6
 8010560:	4620      	mov	r0, r4
 8010562:	f000 fcfc 	bl	8010f5e <_Bfree>
 8010566:	e6a8      	b.n	80102ba <_dtoa_r+0x67a>
 8010568:	2700      	movs	r7, #0
 801056a:	463e      	mov	r6, r7
 801056c:	e7e1      	b.n	8010532 <_dtoa_r+0x8f2>
 801056e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010572:	463e      	mov	r6, r7
 8010574:	e5a9      	b.n	80100ca <_dtoa_r+0x48a>
 8010576:	bf00      	nop
 8010578:	40240000 	.word	0x40240000
 801057c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801057e:	f8cd 9008 	str.w	r9, [sp, #8]
 8010582:	2b00      	cmp	r3, #0
 8010584:	f000 80fa 	beq.w	801077c <_dtoa_r+0xb3c>
 8010588:	2d00      	cmp	r5, #0
 801058a:	dd05      	ble.n	8010598 <_dtoa_r+0x958>
 801058c:	4631      	mov	r1, r6
 801058e:	462a      	mov	r2, r5
 8010590:	4620      	mov	r0, r4
 8010592:	f000 feaf 	bl	80112f4 <__lshift>
 8010596:	4606      	mov	r6, r0
 8010598:	9b07      	ldr	r3, [sp, #28]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d04c      	beq.n	8010638 <_dtoa_r+0x9f8>
 801059e:	6871      	ldr	r1, [r6, #4]
 80105a0:	4620      	mov	r0, r4
 80105a2:	f000 fca8 	bl	8010ef6 <_Balloc>
 80105a6:	6932      	ldr	r2, [r6, #16]
 80105a8:	3202      	adds	r2, #2
 80105aa:	4605      	mov	r5, r0
 80105ac:	0092      	lsls	r2, r2, #2
 80105ae:	f106 010c 	add.w	r1, r6, #12
 80105b2:	300c      	adds	r0, #12
 80105b4:	f7fd f9e4 	bl	800d980 <memcpy>
 80105b8:	2201      	movs	r2, #1
 80105ba:	4629      	mov	r1, r5
 80105bc:	4620      	mov	r0, r4
 80105be:	f000 fe99 	bl	80112f4 <__lshift>
 80105c2:	9b00      	ldr	r3, [sp, #0]
 80105c4:	f8cd b014 	str.w	fp, [sp, #20]
 80105c8:	f003 0301 	and.w	r3, r3, #1
 80105cc:	46b1      	mov	r9, r6
 80105ce:	9307      	str	r3, [sp, #28]
 80105d0:	4606      	mov	r6, r0
 80105d2:	4639      	mov	r1, r7
 80105d4:	9804      	ldr	r0, [sp, #16]
 80105d6:	f7ff faa7 	bl	800fb28 <quorem>
 80105da:	4649      	mov	r1, r9
 80105dc:	4605      	mov	r5, r0
 80105de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80105e2:	9804      	ldr	r0, [sp, #16]
 80105e4:	f000 feda 	bl	801139c <__mcmp>
 80105e8:	4632      	mov	r2, r6
 80105ea:	9000      	str	r0, [sp, #0]
 80105ec:	4639      	mov	r1, r7
 80105ee:	4620      	mov	r0, r4
 80105f0:	f000 feee 	bl	80113d0 <__mdiff>
 80105f4:	68c3      	ldr	r3, [r0, #12]
 80105f6:	4602      	mov	r2, r0
 80105f8:	bb03      	cbnz	r3, 801063c <_dtoa_r+0x9fc>
 80105fa:	4601      	mov	r1, r0
 80105fc:	9008      	str	r0, [sp, #32]
 80105fe:	9804      	ldr	r0, [sp, #16]
 8010600:	f000 fecc 	bl	801139c <__mcmp>
 8010604:	9a08      	ldr	r2, [sp, #32]
 8010606:	4603      	mov	r3, r0
 8010608:	4611      	mov	r1, r2
 801060a:	4620      	mov	r0, r4
 801060c:	9308      	str	r3, [sp, #32]
 801060e:	f000 fca6 	bl	8010f5e <_Bfree>
 8010612:	9b08      	ldr	r3, [sp, #32]
 8010614:	b9a3      	cbnz	r3, 8010640 <_dtoa_r+0xa00>
 8010616:	9a06      	ldr	r2, [sp, #24]
 8010618:	b992      	cbnz	r2, 8010640 <_dtoa_r+0xa00>
 801061a:	9a07      	ldr	r2, [sp, #28]
 801061c:	b982      	cbnz	r2, 8010640 <_dtoa_r+0xa00>
 801061e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010622:	d029      	beq.n	8010678 <_dtoa_r+0xa38>
 8010624:	9b00      	ldr	r3, [sp, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	dd01      	ble.n	801062e <_dtoa_r+0x9ee>
 801062a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801062e:	9b05      	ldr	r3, [sp, #20]
 8010630:	1c5d      	adds	r5, r3, #1
 8010632:	f883 8000 	strb.w	r8, [r3]
 8010636:	e782      	b.n	801053e <_dtoa_r+0x8fe>
 8010638:	4630      	mov	r0, r6
 801063a:	e7c2      	b.n	80105c2 <_dtoa_r+0x982>
 801063c:	2301      	movs	r3, #1
 801063e:	e7e3      	b.n	8010608 <_dtoa_r+0x9c8>
 8010640:	9a00      	ldr	r2, [sp, #0]
 8010642:	2a00      	cmp	r2, #0
 8010644:	db04      	blt.n	8010650 <_dtoa_r+0xa10>
 8010646:	d125      	bne.n	8010694 <_dtoa_r+0xa54>
 8010648:	9a06      	ldr	r2, [sp, #24]
 801064a:	bb1a      	cbnz	r2, 8010694 <_dtoa_r+0xa54>
 801064c:	9a07      	ldr	r2, [sp, #28]
 801064e:	bb0a      	cbnz	r2, 8010694 <_dtoa_r+0xa54>
 8010650:	2b00      	cmp	r3, #0
 8010652:	ddec      	ble.n	801062e <_dtoa_r+0x9ee>
 8010654:	2201      	movs	r2, #1
 8010656:	9904      	ldr	r1, [sp, #16]
 8010658:	4620      	mov	r0, r4
 801065a:	f000 fe4b 	bl	80112f4 <__lshift>
 801065e:	4639      	mov	r1, r7
 8010660:	9004      	str	r0, [sp, #16]
 8010662:	f000 fe9b 	bl	801139c <__mcmp>
 8010666:	2800      	cmp	r0, #0
 8010668:	dc03      	bgt.n	8010672 <_dtoa_r+0xa32>
 801066a:	d1e0      	bne.n	801062e <_dtoa_r+0x9ee>
 801066c:	f018 0f01 	tst.w	r8, #1
 8010670:	d0dd      	beq.n	801062e <_dtoa_r+0x9ee>
 8010672:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010676:	d1d8      	bne.n	801062a <_dtoa_r+0x9ea>
 8010678:	9b05      	ldr	r3, [sp, #20]
 801067a:	9a05      	ldr	r2, [sp, #20]
 801067c:	1c5d      	adds	r5, r3, #1
 801067e:	2339      	movs	r3, #57	; 0x39
 8010680:	7013      	strb	r3, [r2, #0]
 8010682:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010686:	2b39      	cmp	r3, #57	; 0x39
 8010688:	f105 32ff 	add.w	r2, r5, #4294967295
 801068c:	d04f      	beq.n	801072e <_dtoa_r+0xaee>
 801068e:	3301      	adds	r3, #1
 8010690:	7013      	strb	r3, [r2, #0]
 8010692:	e754      	b.n	801053e <_dtoa_r+0x8fe>
 8010694:	9a05      	ldr	r2, [sp, #20]
 8010696:	2b00      	cmp	r3, #0
 8010698:	f102 0501 	add.w	r5, r2, #1
 801069c:	dd06      	ble.n	80106ac <_dtoa_r+0xa6c>
 801069e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80106a2:	d0e9      	beq.n	8010678 <_dtoa_r+0xa38>
 80106a4:	f108 0801 	add.w	r8, r8, #1
 80106a8:	9b05      	ldr	r3, [sp, #20]
 80106aa:	e7c2      	b.n	8010632 <_dtoa_r+0x9f2>
 80106ac:	9a02      	ldr	r2, [sp, #8]
 80106ae:	f805 8c01 	strb.w	r8, [r5, #-1]
 80106b2:	eba5 030b 	sub.w	r3, r5, fp
 80106b6:	4293      	cmp	r3, r2
 80106b8:	d021      	beq.n	80106fe <_dtoa_r+0xabe>
 80106ba:	2300      	movs	r3, #0
 80106bc:	220a      	movs	r2, #10
 80106be:	9904      	ldr	r1, [sp, #16]
 80106c0:	4620      	mov	r0, r4
 80106c2:	f000 fc63 	bl	8010f8c <__multadd>
 80106c6:	45b1      	cmp	r9, r6
 80106c8:	9004      	str	r0, [sp, #16]
 80106ca:	f04f 0300 	mov.w	r3, #0
 80106ce:	f04f 020a 	mov.w	r2, #10
 80106d2:	4649      	mov	r1, r9
 80106d4:	4620      	mov	r0, r4
 80106d6:	d105      	bne.n	80106e4 <_dtoa_r+0xaa4>
 80106d8:	f000 fc58 	bl	8010f8c <__multadd>
 80106dc:	4681      	mov	r9, r0
 80106de:	4606      	mov	r6, r0
 80106e0:	9505      	str	r5, [sp, #20]
 80106e2:	e776      	b.n	80105d2 <_dtoa_r+0x992>
 80106e4:	f000 fc52 	bl	8010f8c <__multadd>
 80106e8:	4631      	mov	r1, r6
 80106ea:	4681      	mov	r9, r0
 80106ec:	2300      	movs	r3, #0
 80106ee:	220a      	movs	r2, #10
 80106f0:	4620      	mov	r0, r4
 80106f2:	f000 fc4b 	bl	8010f8c <__multadd>
 80106f6:	4606      	mov	r6, r0
 80106f8:	e7f2      	b.n	80106e0 <_dtoa_r+0xaa0>
 80106fa:	f04f 0900 	mov.w	r9, #0
 80106fe:	2201      	movs	r2, #1
 8010700:	9904      	ldr	r1, [sp, #16]
 8010702:	4620      	mov	r0, r4
 8010704:	f000 fdf6 	bl	80112f4 <__lshift>
 8010708:	4639      	mov	r1, r7
 801070a:	9004      	str	r0, [sp, #16]
 801070c:	f000 fe46 	bl	801139c <__mcmp>
 8010710:	2800      	cmp	r0, #0
 8010712:	dcb6      	bgt.n	8010682 <_dtoa_r+0xa42>
 8010714:	d102      	bne.n	801071c <_dtoa_r+0xadc>
 8010716:	f018 0f01 	tst.w	r8, #1
 801071a:	d1b2      	bne.n	8010682 <_dtoa_r+0xa42>
 801071c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010720:	2b30      	cmp	r3, #48	; 0x30
 8010722:	f105 32ff 	add.w	r2, r5, #4294967295
 8010726:	f47f af0a 	bne.w	801053e <_dtoa_r+0x8fe>
 801072a:	4615      	mov	r5, r2
 801072c:	e7f6      	b.n	801071c <_dtoa_r+0xadc>
 801072e:	4593      	cmp	fp, r2
 8010730:	d105      	bne.n	801073e <_dtoa_r+0xafe>
 8010732:	2331      	movs	r3, #49	; 0x31
 8010734:	f10a 0a01 	add.w	sl, sl, #1
 8010738:	f88b 3000 	strb.w	r3, [fp]
 801073c:	e6ff      	b.n	801053e <_dtoa_r+0x8fe>
 801073e:	4615      	mov	r5, r2
 8010740:	e79f      	b.n	8010682 <_dtoa_r+0xa42>
 8010742:	f8df b064 	ldr.w	fp, [pc, #100]	; 80107a8 <_dtoa_r+0xb68>
 8010746:	e007      	b.n	8010758 <_dtoa_r+0xb18>
 8010748:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801074a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80107ac <_dtoa_r+0xb6c>
 801074e:	b11b      	cbz	r3, 8010758 <_dtoa_r+0xb18>
 8010750:	f10b 0308 	add.w	r3, fp, #8
 8010754:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010756:	6013      	str	r3, [r2, #0]
 8010758:	4658      	mov	r0, fp
 801075a:	b017      	add	sp, #92	; 0x5c
 801075c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010760:	9b06      	ldr	r3, [sp, #24]
 8010762:	2b01      	cmp	r3, #1
 8010764:	f77f ae35 	ble.w	80103d2 <_dtoa_r+0x792>
 8010768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801076a:	9307      	str	r3, [sp, #28]
 801076c:	e649      	b.n	8010402 <_dtoa_r+0x7c2>
 801076e:	9b02      	ldr	r3, [sp, #8]
 8010770:	2b00      	cmp	r3, #0
 8010772:	dc03      	bgt.n	801077c <_dtoa_r+0xb3c>
 8010774:	9b06      	ldr	r3, [sp, #24]
 8010776:	2b02      	cmp	r3, #2
 8010778:	f73f aecc 	bgt.w	8010514 <_dtoa_r+0x8d4>
 801077c:	465d      	mov	r5, fp
 801077e:	4639      	mov	r1, r7
 8010780:	9804      	ldr	r0, [sp, #16]
 8010782:	f7ff f9d1 	bl	800fb28 <quorem>
 8010786:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801078a:	f805 8b01 	strb.w	r8, [r5], #1
 801078e:	9a02      	ldr	r2, [sp, #8]
 8010790:	eba5 030b 	sub.w	r3, r5, fp
 8010794:	429a      	cmp	r2, r3
 8010796:	ddb0      	ble.n	80106fa <_dtoa_r+0xaba>
 8010798:	2300      	movs	r3, #0
 801079a:	220a      	movs	r2, #10
 801079c:	9904      	ldr	r1, [sp, #16]
 801079e:	4620      	mov	r0, r4
 80107a0:	f000 fbf4 	bl	8010f8c <__multadd>
 80107a4:	9004      	str	r0, [sp, #16]
 80107a6:	e7ea      	b.n	801077e <_dtoa_r+0xb3e>
 80107a8:	08011ca5 	.word	0x08011ca5
 80107ac:	08011d20 	.word	0x08011d20

080107b0 <_fstat_r>:
 80107b0:	b538      	push	{r3, r4, r5, lr}
 80107b2:	4c07      	ldr	r4, [pc, #28]	; (80107d0 <_fstat_r+0x20>)
 80107b4:	2300      	movs	r3, #0
 80107b6:	4605      	mov	r5, r0
 80107b8:	4608      	mov	r0, r1
 80107ba:	4611      	mov	r1, r2
 80107bc:	6023      	str	r3, [r4, #0]
 80107be:	f7f9 fd7b 	bl	800a2b8 <_fstat>
 80107c2:	1c43      	adds	r3, r0, #1
 80107c4:	d102      	bne.n	80107cc <_fstat_r+0x1c>
 80107c6:	6823      	ldr	r3, [r4, #0]
 80107c8:	b103      	cbz	r3, 80107cc <_fstat_r+0x1c>
 80107ca:	602b      	str	r3, [r5, #0]
 80107cc:	bd38      	pop	{r3, r4, r5, pc}
 80107ce:	bf00      	nop
 80107d0:	20001d20 	.word	0x20001d20

080107d4 <rshift>:
 80107d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107d6:	6906      	ldr	r6, [r0, #16]
 80107d8:	114b      	asrs	r3, r1, #5
 80107da:	429e      	cmp	r6, r3
 80107dc:	f100 0414 	add.w	r4, r0, #20
 80107e0:	dd30      	ble.n	8010844 <rshift+0x70>
 80107e2:	f011 011f 	ands.w	r1, r1, #31
 80107e6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80107ea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80107ee:	d108      	bne.n	8010802 <rshift+0x2e>
 80107f0:	4621      	mov	r1, r4
 80107f2:	42b2      	cmp	r2, r6
 80107f4:	460b      	mov	r3, r1
 80107f6:	d211      	bcs.n	801081c <rshift+0x48>
 80107f8:	f852 3b04 	ldr.w	r3, [r2], #4
 80107fc:	f841 3b04 	str.w	r3, [r1], #4
 8010800:	e7f7      	b.n	80107f2 <rshift+0x1e>
 8010802:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8010806:	f1c1 0c20 	rsb	ip, r1, #32
 801080a:	40cd      	lsrs	r5, r1
 801080c:	3204      	adds	r2, #4
 801080e:	4623      	mov	r3, r4
 8010810:	42b2      	cmp	r2, r6
 8010812:	4617      	mov	r7, r2
 8010814:	d30c      	bcc.n	8010830 <rshift+0x5c>
 8010816:	601d      	str	r5, [r3, #0]
 8010818:	b105      	cbz	r5, 801081c <rshift+0x48>
 801081a:	3304      	adds	r3, #4
 801081c:	1b1a      	subs	r2, r3, r4
 801081e:	42a3      	cmp	r3, r4
 8010820:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010824:	bf08      	it	eq
 8010826:	2300      	moveq	r3, #0
 8010828:	6102      	str	r2, [r0, #16]
 801082a:	bf08      	it	eq
 801082c:	6143      	streq	r3, [r0, #20]
 801082e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010830:	683f      	ldr	r7, [r7, #0]
 8010832:	fa07 f70c 	lsl.w	r7, r7, ip
 8010836:	433d      	orrs	r5, r7
 8010838:	f843 5b04 	str.w	r5, [r3], #4
 801083c:	f852 5b04 	ldr.w	r5, [r2], #4
 8010840:	40cd      	lsrs	r5, r1
 8010842:	e7e5      	b.n	8010810 <rshift+0x3c>
 8010844:	4623      	mov	r3, r4
 8010846:	e7e9      	b.n	801081c <rshift+0x48>

08010848 <__hexdig_fun>:
 8010848:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801084c:	2b09      	cmp	r3, #9
 801084e:	d802      	bhi.n	8010856 <__hexdig_fun+0xe>
 8010850:	3820      	subs	r0, #32
 8010852:	b2c0      	uxtb	r0, r0
 8010854:	4770      	bx	lr
 8010856:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801085a:	2b05      	cmp	r3, #5
 801085c:	d801      	bhi.n	8010862 <__hexdig_fun+0x1a>
 801085e:	3847      	subs	r0, #71	; 0x47
 8010860:	e7f7      	b.n	8010852 <__hexdig_fun+0xa>
 8010862:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010866:	2b05      	cmp	r3, #5
 8010868:	d801      	bhi.n	801086e <__hexdig_fun+0x26>
 801086a:	3827      	subs	r0, #39	; 0x27
 801086c:	e7f1      	b.n	8010852 <__hexdig_fun+0xa>
 801086e:	2000      	movs	r0, #0
 8010870:	4770      	bx	lr

08010872 <__gethex>:
 8010872:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010876:	b08b      	sub	sp, #44	; 0x2c
 8010878:	468a      	mov	sl, r1
 801087a:	9002      	str	r0, [sp, #8]
 801087c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801087e:	9306      	str	r3, [sp, #24]
 8010880:	4690      	mov	r8, r2
 8010882:	f000 fae0 	bl	8010e46 <__localeconv_l>
 8010886:	6803      	ldr	r3, [r0, #0]
 8010888:	9303      	str	r3, [sp, #12]
 801088a:	4618      	mov	r0, r3
 801088c:	f7f7 fbd8 	bl	8008040 <strlen>
 8010890:	9b03      	ldr	r3, [sp, #12]
 8010892:	9001      	str	r0, [sp, #4]
 8010894:	4403      	add	r3, r0
 8010896:	f04f 0b00 	mov.w	fp, #0
 801089a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801089e:	9307      	str	r3, [sp, #28]
 80108a0:	f8da 3000 	ldr.w	r3, [sl]
 80108a4:	3302      	adds	r3, #2
 80108a6:	461f      	mov	r7, r3
 80108a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80108ac:	2830      	cmp	r0, #48	; 0x30
 80108ae:	d06c      	beq.n	801098a <__gethex+0x118>
 80108b0:	f7ff ffca 	bl	8010848 <__hexdig_fun>
 80108b4:	4604      	mov	r4, r0
 80108b6:	2800      	cmp	r0, #0
 80108b8:	d16a      	bne.n	8010990 <__gethex+0x11e>
 80108ba:	9a01      	ldr	r2, [sp, #4]
 80108bc:	9903      	ldr	r1, [sp, #12]
 80108be:	4638      	mov	r0, r7
 80108c0:	f001 f8e6 	bl	8011a90 <strncmp>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	d166      	bne.n	8010996 <__gethex+0x124>
 80108c8:	9b01      	ldr	r3, [sp, #4]
 80108ca:	5cf8      	ldrb	r0, [r7, r3]
 80108cc:	18fe      	adds	r6, r7, r3
 80108ce:	f7ff ffbb 	bl	8010848 <__hexdig_fun>
 80108d2:	2800      	cmp	r0, #0
 80108d4:	d062      	beq.n	801099c <__gethex+0x12a>
 80108d6:	4633      	mov	r3, r6
 80108d8:	7818      	ldrb	r0, [r3, #0]
 80108da:	2830      	cmp	r0, #48	; 0x30
 80108dc:	461f      	mov	r7, r3
 80108de:	f103 0301 	add.w	r3, r3, #1
 80108e2:	d0f9      	beq.n	80108d8 <__gethex+0x66>
 80108e4:	f7ff ffb0 	bl	8010848 <__hexdig_fun>
 80108e8:	fab0 f580 	clz	r5, r0
 80108ec:	096d      	lsrs	r5, r5, #5
 80108ee:	4634      	mov	r4, r6
 80108f0:	f04f 0b01 	mov.w	fp, #1
 80108f4:	463a      	mov	r2, r7
 80108f6:	4616      	mov	r6, r2
 80108f8:	3201      	adds	r2, #1
 80108fa:	7830      	ldrb	r0, [r6, #0]
 80108fc:	f7ff ffa4 	bl	8010848 <__hexdig_fun>
 8010900:	2800      	cmp	r0, #0
 8010902:	d1f8      	bne.n	80108f6 <__gethex+0x84>
 8010904:	9a01      	ldr	r2, [sp, #4]
 8010906:	9903      	ldr	r1, [sp, #12]
 8010908:	4630      	mov	r0, r6
 801090a:	f001 f8c1 	bl	8011a90 <strncmp>
 801090e:	b950      	cbnz	r0, 8010926 <__gethex+0xb4>
 8010910:	b954      	cbnz	r4, 8010928 <__gethex+0xb6>
 8010912:	9b01      	ldr	r3, [sp, #4]
 8010914:	18f4      	adds	r4, r6, r3
 8010916:	4622      	mov	r2, r4
 8010918:	4616      	mov	r6, r2
 801091a:	3201      	adds	r2, #1
 801091c:	7830      	ldrb	r0, [r6, #0]
 801091e:	f7ff ff93 	bl	8010848 <__hexdig_fun>
 8010922:	2800      	cmp	r0, #0
 8010924:	d1f8      	bne.n	8010918 <__gethex+0xa6>
 8010926:	b10c      	cbz	r4, 801092c <__gethex+0xba>
 8010928:	1ba4      	subs	r4, r4, r6
 801092a:	00a4      	lsls	r4, r4, #2
 801092c:	7833      	ldrb	r3, [r6, #0]
 801092e:	2b50      	cmp	r3, #80	; 0x50
 8010930:	d001      	beq.n	8010936 <__gethex+0xc4>
 8010932:	2b70      	cmp	r3, #112	; 0x70
 8010934:	d140      	bne.n	80109b8 <__gethex+0x146>
 8010936:	7873      	ldrb	r3, [r6, #1]
 8010938:	2b2b      	cmp	r3, #43	; 0x2b
 801093a:	d031      	beq.n	80109a0 <__gethex+0x12e>
 801093c:	2b2d      	cmp	r3, #45	; 0x2d
 801093e:	d033      	beq.n	80109a8 <__gethex+0x136>
 8010940:	1c71      	adds	r1, r6, #1
 8010942:	f04f 0900 	mov.w	r9, #0
 8010946:	7808      	ldrb	r0, [r1, #0]
 8010948:	f7ff ff7e 	bl	8010848 <__hexdig_fun>
 801094c:	1e43      	subs	r3, r0, #1
 801094e:	b2db      	uxtb	r3, r3
 8010950:	2b18      	cmp	r3, #24
 8010952:	d831      	bhi.n	80109b8 <__gethex+0x146>
 8010954:	f1a0 0210 	sub.w	r2, r0, #16
 8010958:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801095c:	f7ff ff74 	bl	8010848 <__hexdig_fun>
 8010960:	1e43      	subs	r3, r0, #1
 8010962:	b2db      	uxtb	r3, r3
 8010964:	2b18      	cmp	r3, #24
 8010966:	d922      	bls.n	80109ae <__gethex+0x13c>
 8010968:	f1b9 0f00 	cmp.w	r9, #0
 801096c:	d000      	beq.n	8010970 <__gethex+0xfe>
 801096e:	4252      	negs	r2, r2
 8010970:	4414      	add	r4, r2
 8010972:	f8ca 1000 	str.w	r1, [sl]
 8010976:	b30d      	cbz	r5, 80109bc <__gethex+0x14a>
 8010978:	f1bb 0f00 	cmp.w	fp, #0
 801097c:	bf0c      	ite	eq
 801097e:	2706      	moveq	r7, #6
 8010980:	2700      	movne	r7, #0
 8010982:	4638      	mov	r0, r7
 8010984:	b00b      	add	sp, #44	; 0x2c
 8010986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801098a:	f10b 0b01 	add.w	fp, fp, #1
 801098e:	e78a      	b.n	80108a6 <__gethex+0x34>
 8010990:	2500      	movs	r5, #0
 8010992:	462c      	mov	r4, r5
 8010994:	e7ae      	b.n	80108f4 <__gethex+0x82>
 8010996:	463e      	mov	r6, r7
 8010998:	2501      	movs	r5, #1
 801099a:	e7c7      	b.n	801092c <__gethex+0xba>
 801099c:	4604      	mov	r4, r0
 801099e:	e7fb      	b.n	8010998 <__gethex+0x126>
 80109a0:	f04f 0900 	mov.w	r9, #0
 80109a4:	1cb1      	adds	r1, r6, #2
 80109a6:	e7ce      	b.n	8010946 <__gethex+0xd4>
 80109a8:	f04f 0901 	mov.w	r9, #1
 80109ac:	e7fa      	b.n	80109a4 <__gethex+0x132>
 80109ae:	230a      	movs	r3, #10
 80109b0:	fb03 0202 	mla	r2, r3, r2, r0
 80109b4:	3a10      	subs	r2, #16
 80109b6:	e7cf      	b.n	8010958 <__gethex+0xe6>
 80109b8:	4631      	mov	r1, r6
 80109ba:	e7da      	b.n	8010972 <__gethex+0x100>
 80109bc:	1bf3      	subs	r3, r6, r7
 80109be:	3b01      	subs	r3, #1
 80109c0:	4629      	mov	r1, r5
 80109c2:	2b07      	cmp	r3, #7
 80109c4:	dc49      	bgt.n	8010a5a <__gethex+0x1e8>
 80109c6:	9802      	ldr	r0, [sp, #8]
 80109c8:	f000 fa95 	bl	8010ef6 <_Balloc>
 80109cc:	9b01      	ldr	r3, [sp, #4]
 80109ce:	f100 0914 	add.w	r9, r0, #20
 80109d2:	f04f 0b00 	mov.w	fp, #0
 80109d6:	f1c3 0301 	rsb	r3, r3, #1
 80109da:	4605      	mov	r5, r0
 80109dc:	f8cd 9010 	str.w	r9, [sp, #16]
 80109e0:	46da      	mov	sl, fp
 80109e2:	9308      	str	r3, [sp, #32]
 80109e4:	42b7      	cmp	r7, r6
 80109e6:	d33b      	bcc.n	8010a60 <__gethex+0x1ee>
 80109e8:	9804      	ldr	r0, [sp, #16]
 80109ea:	f840 ab04 	str.w	sl, [r0], #4
 80109ee:	eba0 0009 	sub.w	r0, r0, r9
 80109f2:	1080      	asrs	r0, r0, #2
 80109f4:	6128      	str	r0, [r5, #16]
 80109f6:	0147      	lsls	r7, r0, #5
 80109f8:	4650      	mov	r0, sl
 80109fa:	f000 fb40 	bl	801107e <__hi0bits>
 80109fe:	f8d8 6000 	ldr.w	r6, [r8]
 8010a02:	1a3f      	subs	r7, r7, r0
 8010a04:	42b7      	cmp	r7, r6
 8010a06:	dd64      	ble.n	8010ad2 <__gethex+0x260>
 8010a08:	1bbf      	subs	r7, r7, r6
 8010a0a:	4639      	mov	r1, r7
 8010a0c:	4628      	mov	r0, r5
 8010a0e:	f000 fe4f 	bl	80116b0 <__any_on>
 8010a12:	4682      	mov	sl, r0
 8010a14:	b178      	cbz	r0, 8010a36 <__gethex+0x1c4>
 8010a16:	1e7b      	subs	r3, r7, #1
 8010a18:	1159      	asrs	r1, r3, #5
 8010a1a:	f003 021f 	and.w	r2, r3, #31
 8010a1e:	f04f 0a01 	mov.w	sl, #1
 8010a22:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010a26:	fa0a f202 	lsl.w	r2, sl, r2
 8010a2a:	420a      	tst	r2, r1
 8010a2c:	d003      	beq.n	8010a36 <__gethex+0x1c4>
 8010a2e:	4553      	cmp	r3, sl
 8010a30:	dc46      	bgt.n	8010ac0 <__gethex+0x24e>
 8010a32:	f04f 0a02 	mov.w	sl, #2
 8010a36:	4639      	mov	r1, r7
 8010a38:	4628      	mov	r0, r5
 8010a3a:	f7ff fecb 	bl	80107d4 <rshift>
 8010a3e:	443c      	add	r4, r7
 8010a40:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a44:	42a3      	cmp	r3, r4
 8010a46:	da52      	bge.n	8010aee <__gethex+0x27c>
 8010a48:	4629      	mov	r1, r5
 8010a4a:	9802      	ldr	r0, [sp, #8]
 8010a4c:	f000 fa87 	bl	8010f5e <_Bfree>
 8010a50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010a52:	2300      	movs	r3, #0
 8010a54:	6013      	str	r3, [r2, #0]
 8010a56:	27a3      	movs	r7, #163	; 0xa3
 8010a58:	e793      	b.n	8010982 <__gethex+0x110>
 8010a5a:	3101      	adds	r1, #1
 8010a5c:	105b      	asrs	r3, r3, #1
 8010a5e:	e7b0      	b.n	80109c2 <__gethex+0x150>
 8010a60:	1e73      	subs	r3, r6, #1
 8010a62:	9305      	str	r3, [sp, #20]
 8010a64:	9a07      	ldr	r2, [sp, #28]
 8010a66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	d018      	beq.n	8010aa0 <__gethex+0x22e>
 8010a6e:	f1bb 0f20 	cmp.w	fp, #32
 8010a72:	d107      	bne.n	8010a84 <__gethex+0x212>
 8010a74:	9b04      	ldr	r3, [sp, #16]
 8010a76:	f8c3 a000 	str.w	sl, [r3]
 8010a7a:	3304      	adds	r3, #4
 8010a7c:	f04f 0a00 	mov.w	sl, #0
 8010a80:	9304      	str	r3, [sp, #16]
 8010a82:	46d3      	mov	fp, sl
 8010a84:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010a88:	f7ff fede 	bl	8010848 <__hexdig_fun>
 8010a8c:	f000 000f 	and.w	r0, r0, #15
 8010a90:	fa00 f00b 	lsl.w	r0, r0, fp
 8010a94:	ea4a 0a00 	orr.w	sl, sl, r0
 8010a98:	f10b 0b04 	add.w	fp, fp, #4
 8010a9c:	9b05      	ldr	r3, [sp, #20]
 8010a9e:	e00d      	b.n	8010abc <__gethex+0x24a>
 8010aa0:	9b05      	ldr	r3, [sp, #20]
 8010aa2:	9a08      	ldr	r2, [sp, #32]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	42bb      	cmp	r3, r7
 8010aa8:	d3e1      	bcc.n	8010a6e <__gethex+0x1fc>
 8010aaa:	4618      	mov	r0, r3
 8010aac:	9a01      	ldr	r2, [sp, #4]
 8010aae:	9903      	ldr	r1, [sp, #12]
 8010ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ab2:	f000 ffed 	bl	8011a90 <strncmp>
 8010ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	d1d8      	bne.n	8010a6e <__gethex+0x1fc>
 8010abc:	461e      	mov	r6, r3
 8010abe:	e791      	b.n	80109e4 <__gethex+0x172>
 8010ac0:	1eb9      	subs	r1, r7, #2
 8010ac2:	4628      	mov	r0, r5
 8010ac4:	f000 fdf4 	bl	80116b0 <__any_on>
 8010ac8:	2800      	cmp	r0, #0
 8010aca:	d0b2      	beq.n	8010a32 <__gethex+0x1c0>
 8010acc:	f04f 0a03 	mov.w	sl, #3
 8010ad0:	e7b1      	b.n	8010a36 <__gethex+0x1c4>
 8010ad2:	da09      	bge.n	8010ae8 <__gethex+0x276>
 8010ad4:	1bf7      	subs	r7, r6, r7
 8010ad6:	4629      	mov	r1, r5
 8010ad8:	463a      	mov	r2, r7
 8010ada:	9802      	ldr	r0, [sp, #8]
 8010adc:	f000 fc0a 	bl	80112f4 <__lshift>
 8010ae0:	1be4      	subs	r4, r4, r7
 8010ae2:	4605      	mov	r5, r0
 8010ae4:	f100 0914 	add.w	r9, r0, #20
 8010ae8:	f04f 0a00 	mov.w	sl, #0
 8010aec:	e7a8      	b.n	8010a40 <__gethex+0x1ce>
 8010aee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010af2:	42a0      	cmp	r0, r4
 8010af4:	dd6a      	ble.n	8010bcc <__gethex+0x35a>
 8010af6:	1b04      	subs	r4, r0, r4
 8010af8:	42a6      	cmp	r6, r4
 8010afa:	dc2e      	bgt.n	8010b5a <__gethex+0x2e8>
 8010afc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b00:	2b02      	cmp	r3, #2
 8010b02:	d022      	beq.n	8010b4a <__gethex+0x2d8>
 8010b04:	2b03      	cmp	r3, #3
 8010b06:	d024      	beq.n	8010b52 <__gethex+0x2e0>
 8010b08:	2b01      	cmp	r3, #1
 8010b0a:	d115      	bne.n	8010b38 <__gethex+0x2c6>
 8010b0c:	42a6      	cmp	r6, r4
 8010b0e:	d113      	bne.n	8010b38 <__gethex+0x2c6>
 8010b10:	2e01      	cmp	r6, #1
 8010b12:	dc0b      	bgt.n	8010b2c <__gethex+0x2ba>
 8010b14:	9a06      	ldr	r2, [sp, #24]
 8010b16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010b1a:	6013      	str	r3, [r2, #0]
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	612b      	str	r3, [r5, #16]
 8010b20:	f8c9 3000 	str.w	r3, [r9]
 8010b24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b26:	2762      	movs	r7, #98	; 0x62
 8010b28:	601d      	str	r5, [r3, #0]
 8010b2a:	e72a      	b.n	8010982 <__gethex+0x110>
 8010b2c:	1e71      	subs	r1, r6, #1
 8010b2e:	4628      	mov	r0, r5
 8010b30:	f000 fdbe 	bl	80116b0 <__any_on>
 8010b34:	2800      	cmp	r0, #0
 8010b36:	d1ed      	bne.n	8010b14 <__gethex+0x2a2>
 8010b38:	4629      	mov	r1, r5
 8010b3a:	9802      	ldr	r0, [sp, #8]
 8010b3c:	f000 fa0f 	bl	8010f5e <_Bfree>
 8010b40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010b42:	2300      	movs	r3, #0
 8010b44:	6013      	str	r3, [r2, #0]
 8010b46:	2750      	movs	r7, #80	; 0x50
 8010b48:	e71b      	b.n	8010982 <__gethex+0x110>
 8010b4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d0e1      	beq.n	8010b14 <__gethex+0x2a2>
 8010b50:	e7f2      	b.n	8010b38 <__gethex+0x2c6>
 8010b52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d1dd      	bne.n	8010b14 <__gethex+0x2a2>
 8010b58:	e7ee      	b.n	8010b38 <__gethex+0x2c6>
 8010b5a:	1e67      	subs	r7, r4, #1
 8010b5c:	f1ba 0f00 	cmp.w	sl, #0
 8010b60:	d131      	bne.n	8010bc6 <__gethex+0x354>
 8010b62:	b127      	cbz	r7, 8010b6e <__gethex+0x2fc>
 8010b64:	4639      	mov	r1, r7
 8010b66:	4628      	mov	r0, r5
 8010b68:	f000 fda2 	bl	80116b0 <__any_on>
 8010b6c:	4682      	mov	sl, r0
 8010b6e:	117a      	asrs	r2, r7, #5
 8010b70:	2301      	movs	r3, #1
 8010b72:	f007 071f 	and.w	r7, r7, #31
 8010b76:	fa03 f707 	lsl.w	r7, r3, r7
 8010b7a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010b7e:	4621      	mov	r1, r4
 8010b80:	421f      	tst	r7, r3
 8010b82:	4628      	mov	r0, r5
 8010b84:	bf18      	it	ne
 8010b86:	f04a 0a02 	orrne.w	sl, sl, #2
 8010b8a:	1b36      	subs	r6, r6, r4
 8010b8c:	f7ff fe22 	bl	80107d4 <rshift>
 8010b90:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010b94:	2702      	movs	r7, #2
 8010b96:	f1ba 0f00 	cmp.w	sl, #0
 8010b9a:	d048      	beq.n	8010c2e <__gethex+0x3bc>
 8010b9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ba0:	2b02      	cmp	r3, #2
 8010ba2:	d015      	beq.n	8010bd0 <__gethex+0x35e>
 8010ba4:	2b03      	cmp	r3, #3
 8010ba6:	d017      	beq.n	8010bd8 <__gethex+0x366>
 8010ba8:	2b01      	cmp	r3, #1
 8010baa:	d109      	bne.n	8010bc0 <__gethex+0x34e>
 8010bac:	f01a 0f02 	tst.w	sl, #2
 8010bb0:	d006      	beq.n	8010bc0 <__gethex+0x34e>
 8010bb2:	f8d9 3000 	ldr.w	r3, [r9]
 8010bb6:	ea4a 0a03 	orr.w	sl, sl, r3
 8010bba:	f01a 0f01 	tst.w	sl, #1
 8010bbe:	d10e      	bne.n	8010bde <__gethex+0x36c>
 8010bc0:	f047 0710 	orr.w	r7, r7, #16
 8010bc4:	e033      	b.n	8010c2e <__gethex+0x3bc>
 8010bc6:	f04f 0a01 	mov.w	sl, #1
 8010bca:	e7d0      	b.n	8010b6e <__gethex+0x2fc>
 8010bcc:	2701      	movs	r7, #1
 8010bce:	e7e2      	b.n	8010b96 <__gethex+0x324>
 8010bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010bd2:	f1c3 0301 	rsb	r3, r3, #1
 8010bd6:	9315      	str	r3, [sp, #84]	; 0x54
 8010bd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d0f0      	beq.n	8010bc0 <__gethex+0x34e>
 8010bde:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8010be2:	f105 0314 	add.w	r3, r5, #20
 8010be6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8010bea:	eb03 010a 	add.w	r1, r3, sl
 8010bee:	f04f 0c00 	mov.w	ip, #0
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bf8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010bfc:	d01c      	beq.n	8010c38 <__gethex+0x3c6>
 8010bfe:	3201      	adds	r2, #1
 8010c00:	6002      	str	r2, [r0, #0]
 8010c02:	2f02      	cmp	r7, #2
 8010c04:	f105 0314 	add.w	r3, r5, #20
 8010c08:	d138      	bne.n	8010c7c <__gethex+0x40a>
 8010c0a:	f8d8 2000 	ldr.w	r2, [r8]
 8010c0e:	3a01      	subs	r2, #1
 8010c10:	42b2      	cmp	r2, r6
 8010c12:	d10a      	bne.n	8010c2a <__gethex+0x3b8>
 8010c14:	1171      	asrs	r1, r6, #5
 8010c16:	2201      	movs	r2, #1
 8010c18:	f006 061f 	and.w	r6, r6, #31
 8010c1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c20:	fa02 f606 	lsl.w	r6, r2, r6
 8010c24:	421e      	tst	r6, r3
 8010c26:	bf18      	it	ne
 8010c28:	4617      	movne	r7, r2
 8010c2a:	f047 0720 	orr.w	r7, r7, #32
 8010c2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010c30:	601d      	str	r5, [r3, #0]
 8010c32:	9b06      	ldr	r3, [sp, #24]
 8010c34:	601c      	str	r4, [r3, #0]
 8010c36:	e6a4      	b.n	8010982 <__gethex+0x110>
 8010c38:	4299      	cmp	r1, r3
 8010c3a:	f843 cc04 	str.w	ip, [r3, #-4]
 8010c3e:	d8d8      	bhi.n	8010bf2 <__gethex+0x380>
 8010c40:	68ab      	ldr	r3, [r5, #8]
 8010c42:	4599      	cmp	r9, r3
 8010c44:	db12      	blt.n	8010c6c <__gethex+0x3fa>
 8010c46:	6869      	ldr	r1, [r5, #4]
 8010c48:	9802      	ldr	r0, [sp, #8]
 8010c4a:	3101      	adds	r1, #1
 8010c4c:	f000 f953 	bl	8010ef6 <_Balloc>
 8010c50:	692a      	ldr	r2, [r5, #16]
 8010c52:	3202      	adds	r2, #2
 8010c54:	f105 010c 	add.w	r1, r5, #12
 8010c58:	4683      	mov	fp, r0
 8010c5a:	0092      	lsls	r2, r2, #2
 8010c5c:	300c      	adds	r0, #12
 8010c5e:	f7fc fe8f 	bl	800d980 <memcpy>
 8010c62:	4629      	mov	r1, r5
 8010c64:	9802      	ldr	r0, [sp, #8]
 8010c66:	f000 f97a 	bl	8010f5e <_Bfree>
 8010c6a:	465d      	mov	r5, fp
 8010c6c:	692b      	ldr	r3, [r5, #16]
 8010c6e:	1c5a      	adds	r2, r3, #1
 8010c70:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010c74:	612a      	str	r2, [r5, #16]
 8010c76:	2201      	movs	r2, #1
 8010c78:	615a      	str	r2, [r3, #20]
 8010c7a:	e7c2      	b.n	8010c02 <__gethex+0x390>
 8010c7c:	692a      	ldr	r2, [r5, #16]
 8010c7e:	454a      	cmp	r2, r9
 8010c80:	dd0b      	ble.n	8010c9a <__gethex+0x428>
 8010c82:	2101      	movs	r1, #1
 8010c84:	4628      	mov	r0, r5
 8010c86:	f7ff fda5 	bl	80107d4 <rshift>
 8010c8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c8e:	3401      	adds	r4, #1
 8010c90:	42a3      	cmp	r3, r4
 8010c92:	f6ff aed9 	blt.w	8010a48 <__gethex+0x1d6>
 8010c96:	2701      	movs	r7, #1
 8010c98:	e7c7      	b.n	8010c2a <__gethex+0x3b8>
 8010c9a:	f016 061f 	ands.w	r6, r6, #31
 8010c9e:	d0fa      	beq.n	8010c96 <__gethex+0x424>
 8010ca0:	449a      	add	sl, r3
 8010ca2:	f1c6 0620 	rsb	r6, r6, #32
 8010ca6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010caa:	f000 f9e8 	bl	801107e <__hi0bits>
 8010cae:	42b0      	cmp	r0, r6
 8010cb0:	dbe7      	blt.n	8010c82 <__gethex+0x410>
 8010cb2:	e7f0      	b.n	8010c96 <__gethex+0x424>

08010cb4 <L_shift>:
 8010cb4:	f1c2 0208 	rsb	r2, r2, #8
 8010cb8:	0092      	lsls	r2, r2, #2
 8010cba:	b570      	push	{r4, r5, r6, lr}
 8010cbc:	f1c2 0620 	rsb	r6, r2, #32
 8010cc0:	6843      	ldr	r3, [r0, #4]
 8010cc2:	6804      	ldr	r4, [r0, #0]
 8010cc4:	fa03 f506 	lsl.w	r5, r3, r6
 8010cc8:	432c      	orrs	r4, r5
 8010cca:	40d3      	lsrs	r3, r2
 8010ccc:	6004      	str	r4, [r0, #0]
 8010cce:	f840 3f04 	str.w	r3, [r0, #4]!
 8010cd2:	4288      	cmp	r0, r1
 8010cd4:	d3f4      	bcc.n	8010cc0 <L_shift+0xc>
 8010cd6:	bd70      	pop	{r4, r5, r6, pc}

08010cd8 <__match>:
 8010cd8:	b530      	push	{r4, r5, lr}
 8010cda:	6803      	ldr	r3, [r0, #0]
 8010cdc:	3301      	adds	r3, #1
 8010cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ce2:	b914      	cbnz	r4, 8010cea <__match+0x12>
 8010ce4:	6003      	str	r3, [r0, #0]
 8010ce6:	2001      	movs	r0, #1
 8010ce8:	bd30      	pop	{r4, r5, pc}
 8010cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010cf2:	2d19      	cmp	r5, #25
 8010cf4:	bf98      	it	ls
 8010cf6:	3220      	addls	r2, #32
 8010cf8:	42a2      	cmp	r2, r4
 8010cfa:	d0f0      	beq.n	8010cde <__match+0x6>
 8010cfc:	2000      	movs	r0, #0
 8010cfe:	e7f3      	b.n	8010ce8 <__match+0x10>

08010d00 <__hexnan>:
 8010d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d04:	680b      	ldr	r3, [r1, #0]
 8010d06:	6801      	ldr	r1, [r0, #0]
 8010d08:	115f      	asrs	r7, r3, #5
 8010d0a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8010d0e:	f013 031f 	ands.w	r3, r3, #31
 8010d12:	b087      	sub	sp, #28
 8010d14:	bf18      	it	ne
 8010d16:	3704      	addne	r7, #4
 8010d18:	2500      	movs	r5, #0
 8010d1a:	1f3e      	subs	r6, r7, #4
 8010d1c:	4682      	mov	sl, r0
 8010d1e:	4690      	mov	r8, r2
 8010d20:	9301      	str	r3, [sp, #4]
 8010d22:	f847 5c04 	str.w	r5, [r7, #-4]
 8010d26:	46b1      	mov	r9, r6
 8010d28:	4634      	mov	r4, r6
 8010d2a:	9502      	str	r5, [sp, #8]
 8010d2c:	46ab      	mov	fp, r5
 8010d2e:	784a      	ldrb	r2, [r1, #1]
 8010d30:	1c4b      	adds	r3, r1, #1
 8010d32:	9303      	str	r3, [sp, #12]
 8010d34:	b342      	cbz	r2, 8010d88 <__hexnan+0x88>
 8010d36:	4610      	mov	r0, r2
 8010d38:	9105      	str	r1, [sp, #20]
 8010d3a:	9204      	str	r2, [sp, #16]
 8010d3c:	f7ff fd84 	bl	8010848 <__hexdig_fun>
 8010d40:	2800      	cmp	r0, #0
 8010d42:	d143      	bne.n	8010dcc <__hexnan+0xcc>
 8010d44:	9a04      	ldr	r2, [sp, #16]
 8010d46:	9905      	ldr	r1, [sp, #20]
 8010d48:	2a20      	cmp	r2, #32
 8010d4a:	d818      	bhi.n	8010d7e <__hexnan+0x7e>
 8010d4c:	9b02      	ldr	r3, [sp, #8]
 8010d4e:	459b      	cmp	fp, r3
 8010d50:	dd13      	ble.n	8010d7a <__hexnan+0x7a>
 8010d52:	454c      	cmp	r4, r9
 8010d54:	d206      	bcs.n	8010d64 <__hexnan+0x64>
 8010d56:	2d07      	cmp	r5, #7
 8010d58:	dc04      	bgt.n	8010d64 <__hexnan+0x64>
 8010d5a:	462a      	mov	r2, r5
 8010d5c:	4649      	mov	r1, r9
 8010d5e:	4620      	mov	r0, r4
 8010d60:	f7ff ffa8 	bl	8010cb4 <L_shift>
 8010d64:	4544      	cmp	r4, r8
 8010d66:	d944      	bls.n	8010df2 <__hexnan+0xf2>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	f1a4 0904 	sub.w	r9, r4, #4
 8010d6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d72:	f8cd b008 	str.w	fp, [sp, #8]
 8010d76:	464c      	mov	r4, r9
 8010d78:	461d      	mov	r5, r3
 8010d7a:	9903      	ldr	r1, [sp, #12]
 8010d7c:	e7d7      	b.n	8010d2e <__hexnan+0x2e>
 8010d7e:	2a29      	cmp	r2, #41	; 0x29
 8010d80:	d14a      	bne.n	8010e18 <__hexnan+0x118>
 8010d82:	3102      	adds	r1, #2
 8010d84:	f8ca 1000 	str.w	r1, [sl]
 8010d88:	f1bb 0f00 	cmp.w	fp, #0
 8010d8c:	d044      	beq.n	8010e18 <__hexnan+0x118>
 8010d8e:	454c      	cmp	r4, r9
 8010d90:	d206      	bcs.n	8010da0 <__hexnan+0xa0>
 8010d92:	2d07      	cmp	r5, #7
 8010d94:	dc04      	bgt.n	8010da0 <__hexnan+0xa0>
 8010d96:	462a      	mov	r2, r5
 8010d98:	4649      	mov	r1, r9
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	f7ff ff8a 	bl	8010cb4 <L_shift>
 8010da0:	4544      	cmp	r4, r8
 8010da2:	d928      	bls.n	8010df6 <__hexnan+0xf6>
 8010da4:	4643      	mov	r3, r8
 8010da6:	f854 2b04 	ldr.w	r2, [r4], #4
 8010daa:	f843 2b04 	str.w	r2, [r3], #4
 8010dae:	42a6      	cmp	r6, r4
 8010db0:	d2f9      	bcs.n	8010da6 <__hexnan+0xa6>
 8010db2:	2200      	movs	r2, #0
 8010db4:	f843 2b04 	str.w	r2, [r3], #4
 8010db8:	429e      	cmp	r6, r3
 8010dba:	d2fb      	bcs.n	8010db4 <__hexnan+0xb4>
 8010dbc:	6833      	ldr	r3, [r6, #0]
 8010dbe:	b91b      	cbnz	r3, 8010dc8 <__hexnan+0xc8>
 8010dc0:	4546      	cmp	r6, r8
 8010dc2:	d127      	bne.n	8010e14 <__hexnan+0x114>
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	6033      	str	r3, [r6, #0]
 8010dc8:	2005      	movs	r0, #5
 8010dca:	e026      	b.n	8010e1a <__hexnan+0x11a>
 8010dcc:	3501      	adds	r5, #1
 8010dce:	2d08      	cmp	r5, #8
 8010dd0:	f10b 0b01 	add.w	fp, fp, #1
 8010dd4:	dd06      	ble.n	8010de4 <__hexnan+0xe4>
 8010dd6:	4544      	cmp	r4, r8
 8010dd8:	d9cf      	bls.n	8010d7a <__hexnan+0x7a>
 8010dda:	2300      	movs	r3, #0
 8010ddc:	f844 3c04 	str.w	r3, [r4, #-4]
 8010de0:	2501      	movs	r5, #1
 8010de2:	3c04      	subs	r4, #4
 8010de4:	6822      	ldr	r2, [r4, #0]
 8010de6:	f000 000f 	and.w	r0, r0, #15
 8010dea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010dee:	6020      	str	r0, [r4, #0]
 8010df0:	e7c3      	b.n	8010d7a <__hexnan+0x7a>
 8010df2:	2508      	movs	r5, #8
 8010df4:	e7c1      	b.n	8010d7a <__hexnan+0x7a>
 8010df6:	9b01      	ldr	r3, [sp, #4]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d0df      	beq.n	8010dbc <__hexnan+0xbc>
 8010dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8010e00:	f1c3 0320 	rsb	r3, r3, #32
 8010e04:	fa22 f303 	lsr.w	r3, r2, r3
 8010e08:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010e0c:	401a      	ands	r2, r3
 8010e0e:	f847 2c04 	str.w	r2, [r7, #-4]
 8010e12:	e7d3      	b.n	8010dbc <__hexnan+0xbc>
 8010e14:	3e04      	subs	r6, #4
 8010e16:	e7d1      	b.n	8010dbc <__hexnan+0xbc>
 8010e18:	2004      	movs	r0, #4
 8010e1a:	b007      	add	sp, #28
 8010e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e20 <_isatty_r>:
 8010e20:	b538      	push	{r3, r4, r5, lr}
 8010e22:	4c06      	ldr	r4, [pc, #24]	; (8010e3c <_isatty_r+0x1c>)
 8010e24:	2300      	movs	r3, #0
 8010e26:	4605      	mov	r5, r0
 8010e28:	4608      	mov	r0, r1
 8010e2a:	6023      	str	r3, [r4, #0]
 8010e2c:	f7f9 fa4a 	bl	800a2c4 <_isatty>
 8010e30:	1c43      	adds	r3, r0, #1
 8010e32:	d102      	bne.n	8010e3a <_isatty_r+0x1a>
 8010e34:	6823      	ldr	r3, [r4, #0]
 8010e36:	b103      	cbz	r3, 8010e3a <_isatty_r+0x1a>
 8010e38:	602b      	str	r3, [r5, #0]
 8010e3a:	bd38      	pop	{r3, r4, r5, pc}
 8010e3c:	20001d20 	.word	0x20001d20

08010e40 <__locale_ctype_ptr_l>:
 8010e40:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010e44:	4770      	bx	lr

08010e46 <__localeconv_l>:
 8010e46:	30f0      	adds	r0, #240	; 0xf0
 8010e48:	4770      	bx	lr
	...

08010e4c <_localeconv_r>:
 8010e4c:	4b04      	ldr	r3, [pc, #16]	; (8010e60 <_localeconv_r+0x14>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	6a18      	ldr	r0, [r3, #32]
 8010e52:	4b04      	ldr	r3, [pc, #16]	; (8010e64 <_localeconv_r+0x18>)
 8010e54:	2800      	cmp	r0, #0
 8010e56:	bf08      	it	eq
 8010e58:	4618      	moveq	r0, r3
 8010e5a:	30f0      	adds	r0, #240	; 0xf0
 8010e5c:	4770      	bx	lr
 8010e5e:	bf00      	nop
 8010e60:	2000002c 	.word	0x2000002c
 8010e64:	20000090 	.word	0x20000090

08010e68 <_lseek_r>:
 8010e68:	b538      	push	{r3, r4, r5, lr}
 8010e6a:	4c07      	ldr	r4, [pc, #28]	; (8010e88 <_lseek_r+0x20>)
 8010e6c:	4605      	mov	r5, r0
 8010e6e:	4608      	mov	r0, r1
 8010e70:	4611      	mov	r1, r2
 8010e72:	2200      	movs	r2, #0
 8010e74:	6022      	str	r2, [r4, #0]
 8010e76:	461a      	mov	r2, r3
 8010e78:	f7f9 fa26 	bl	800a2c8 <_lseek>
 8010e7c:	1c43      	adds	r3, r0, #1
 8010e7e:	d102      	bne.n	8010e86 <_lseek_r+0x1e>
 8010e80:	6823      	ldr	r3, [r4, #0]
 8010e82:	b103      	cbz	r3, 8010e86 <_lseek_r+0x1e>
 8010e84:	602b      	str	r3, [r5, #0]
 8010e86:	bd38      	pop	{r3, r4, r5, pc}
 8010e88:	20001d20 	.word	0x20001d20

08010e8c <malloc>:
 8010e8c:	4b02      	ldr	r3, [pc, #8]	; (8010e98 <malloc+0xc>)
 8010e8e:	4601      	mov	r1, r0
 8010e90:	6818      	ldr	r0, [r3, #0]
 8010e92:	f7fc bdd7 	b.w	800da44 <_malloc_r>
 8010e96:	bf00      	nop
 8010e98:	2000002c 	.word	0x2000002c

08010e9c <__ascii_mbtowc>:
 8010e9c:	b082      	sub	sp, #8
 8010e9e:	b901      	cbnz	r1, 8010ea2 <__ascii_mbtowc+0x6>
 8010ea0:	a901      	add	r1, sp, #4
 8010ea2:	b142      	cbz	r2, 8010eb6 <__ascii_mbtowc+0x1a>
 8010ea4:	b14b      	cbz	r3, 8010eba <__ascii_mbtowc+0x1e>
 8010ea6:	7813      	ldrb	r3, [r2, #0]
 8010ea8:	600b      	str	r3, [r1, #0]
 8010eaa:	7812      	ldrb	r2, [r2, #0]
 8010eac:	1c10      	adds	r0, r2, #0
 8010eae:	bf18      	it	ne
 8010eb0:	2001      	movne	r0, #1
 8010eb2:	b002      	add	sp, #8
 8010eb4:	4770      	bx	lr
 8010eb6:	4610      	mov	r0, r2
 8010eb8:	e7fb      	b.n	8010eb2 <__ascii_mbtowc+0x16>
 8010eba:	f06f 0001 	mvn.w	r0, #1
 8010ebe:	e7f8      	b.n	8010eb2 <__ascii_mbtowc+0x16>

08010ec0 <memmove>:
 8010ec0:	4288      	cmp	r0, r1
 8010ec2:	b510      	push	{r4, lr}
 8010ec4:	eb01 0302 	add.w	r3, r1, r2
 8010ec8:	d807      	bhi.n	8010eda <memmove+0x1a>
 8010eca:	1e42      	subs	r2, r0, #1
 8010ecc:	4299      	cmp	r1, r3
 8010ece:	d00a      	beq.n	8010ee6 <memmove+0x26>
 8010ed0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ed4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010ed8:	e7f8      	b.n	8010ecc <memmove+0xc>
 8010eda:	4283      	cmp	r3, r0
 8010edc:	d9f5      	bls.n	8010eca <memmove+0xa>
 8010ede:	1881      	adds	r1, r0, r2
 8010ee0:	1ad2      	subs	r2, r2, r3
 8010ee2:	42d3      	cmn	r3, r2
 8010ee4:	d100      	bne.n	8010ee8 <memmove+0x28>
 8010ee6:	bd10      	pop	{r4, pc}
 8010ee8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010eec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010ef0:	e7f7      	b.n	8010ee2 <memmove+0x22>

08010ef2 <__malloc_lock>:
 8010ef2:	4770      	bx	lr

08010ef4 <__malloc_unlock>:
 8010ef4:	4770      	bx	lr

08010ef6 <_Balloc>:
 8010ef6:	b570      	push	{r4, r5, r6, lr}
 8010ef8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010efa:	4604      	mov	r4, r0
 8010efc:	460e      	mov	r6, r1
 8010efe:	b93d      	cbnz	r5, 8010f10 <_Balloc+0x1a>
 8010f00:	2010      	movs	r0, #16
 8010f02:	f7ff ffc3 	bl	8010e8c <malloc>
 8010f06:	6260      	str	r0, [r4, #36]	; 0x24
 8010f08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010f0c:	6005      	str	r5, [r0, #0]
 8010f0e:	60c5      	str	r5, [r0, #12]
 8010f10:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010f12:	68eb      	ldr	r3, [r5, #12]
 8010f14:	b183      	cbz	r3, 8010f38 <_Balloc+0x42>
 8010f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f18:	68db      	ldr	r3, [r3, #12]
 8010f1a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010f1e:	b9b8      	cbnz	r0, 8010f50 <_Balloc+0x5a>
 8010f20:	2101      	movs	r1, #1
 8010f22:	fa01 f506 	lsl.w	r5, r1, r6
 8010f26:	1d6a      	adds	r2, r5, #5
 8010f28:	0092      	lsls	r2, r2, #2
 8010f2a:	4620      	mov	r0, r4
 8010f2c:	f000 fbe1 	bl	80116f2 <_calloc_r>
 8010f30:	b160      	cbz	r0, 8010f4c <_Balloc+0x56>
 8010f32:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010f36:	e00e      	b.n	8010f56 <_Balloc+0x60>
 8010f38:	2221      	movs	r2, #33	; 0x21
 8010f3a:	2104      	movs	r1, #4
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	f000 fbd8 	bl	80116f2 <_calloc_r>
 8010f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f44:	60e8      	str	r0, [r5, #12]
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d1e4      	bne.n	8010f16 <_Balloc+0x20>
 8010f4c:	2000      	movs	r0, #0
 8010f4e:	bd70      	pop	{r4, r5, r6, pc}
 8010f50:	6802      	ldr	r2, [r0, #0]
 8010f52:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010f56:	2300      	movs	r3, #0
 8010f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010f5c:	e7f7      	b.n	8010f4e <_Balloc+0x58>

08010f5e <_Bfree>:
 8010f5e:	b570      	push	{r4, r5, r6, lr}
 8010f60:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010f62:	4606      	mov	r6, r0
 8010f64:	460d      	mov	r5, r1
 8010f66:	b93c      	cbnz	r4, 8010f78 <_Bfree+0x1a>
 8010f68:	2010      	movs	r0, #16
 8010f6a:	f7ff ff8f 	bl	8010e8c <malloc>
 8010f6e:	6270      	str	r0, [r6, #36]	; 0x24
 8010f70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010f74:	6004      	str	r4, [r0, #0]
 8010f76:	60c4      	str	r4, [r0, #12]
 8010f78:	b13d      	cbz	r5, 8010f8a <_Bfree+0x2c>
 8010f7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010f7c:	686a      	ldr	r2, [r5, #4]
 8010f7e:	68db      	ldr	r3, [r3, #12]
 8010f80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010f84:	6029      	str	r1, [r5, #0]
 8010f86:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010f8a:	bd70      	pop	{r4, r5, r6, pc}

08010f8c <__multadd>:
 8010f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f90:	690d      	ldr	r5, [r1, #16]
 8010f92:	461f      	mov	r7, r3
 8010f94:	4606      	mov	r6, r0
 8010f96:	460c      	mov	r4, r1
 8010f98:	f101 0c14 	add.w	ip, r1, #20
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	f8dc 0000 	ldr.w	r0, [ip]
 8010fa2:	b281      	uxth	r1, r0
 8010fa4:	fb02 7101 	mla	r1, r2, r1, r7
 8010fa8:	0c0f      	lsrs	r7, r1, #16
 8010faa:	0c00      	lsrs	r0, r0, #16
 8010fac:	fb02 7000 	mla	r0, r2, r0, r7
 8010fb0:	b289      	uxth	r1, r1
 8010fb2:	3301      	adds	r3, #1
 8010fb4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010fb8:	429d      	cmp	r5, r3
 8010fba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010fbe:	f84c 1b04 	str.w	r1, [ip], #4
 8010fc2:	dcec      	bgt.n	8010f9e <__multadd+0x12>
 8010fc4:	b1d7      	cbz	r7, 8010ffc <__multadd+0x70>
 8010fc6:	68a3      	ldr	r3, [r4, #8]
 8010fc8:	42ab      	cmp	r3, r5
 8010fca:	dc12      	bgt.n	8010ff2 <__multadd+0x66>
 8010fcc:	6861      	ldr	r1, [r4, #4]
 8010fce:	4630      	mov	r0, r6
 8010fd0:	3101      	adds	r1, #1
 8010fd2:	f7ff ff90 	bl	8010ef6 <_Balloc>
 8010fd6:	6922      	ldr	r2, [r4, #16]
 8010fd8:	3202      	adds	r2, #2
 8010fda:	f104 010c 	add.w	r1, r4, #12
 8010fde:	4680      	mov	r8, r0
 8010fe0:	0092      	lsls	r2, r2, #2
 8010fe2:	300c      	adds	r0, #12
 8010fe4:	f7fc fccc 	bl	800d980 <memcpy>
 8010fe8:	4621      	mov	r1, r4
 8010fea:	4630      	mov	r0, r6
 8010fec:	f7ff ffb7 	bl	8010f5e <_Bfree>
 8010ff0:	4644      	mov	r4, r8
 8010ff2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010ff6:	3501      	adds	r5, #1
 8010ff8:	615f      	str	r7, [r3, #20]
 8010ffa:	6125      	str	r5, [r4, #16]
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011002 <__s2b>:
 8011002:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011006:	460c      	mov	r4, r1
 8011008:	4615      	mov	r5, r2
 801100a:	461f      	mov	r7, r3
 801100c:	2209      	movs	r2, #9
 801100e:	3308      	adds	r3, #8
 8011010:	4606      	mov	r6, r0
 8011012:	fb93 f3f2 	sdiv	r3, r3, r2
 8011016:	2100      	movs	r1, #0
 8011018:	2201      	movs	r2, #1
 801101a:	429a      	cmp	r2, r3
 801101c:	db20      	blt.n	8011060 <__s2b+0x5e>
 801101e:	4630      	mov	r0, r6
 8011020:	f7ff ff69 	bl	8010ef6 <_Balloc>
 8011024:	9b08      	ldr	r3, [sp, #32]
 8011026:	6143      	str	r3, [r0, #20]
 8011028:	2d09      	cmp	r5, #9
 801102a:	f04f 0301 	mov.w	r3, #1
 801102e:	6103      	str	r3, [r0, #16]
 8011030:	dd19      	ble.n	8011066 <__s2b+0x64>
 8011032:	f104 0809 	add.w	r8, r4, #9
 8011036:	46c1      	mov	r9, r8
 8011038:	442c      	add	r4, r5
 801103a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801103e:	4601      	mov	r1, r0
 8011040:	3b30      	subs	r3, #48	; 0x30
 8011042:	220a      	movs	r2, #10
 8011044:	4630      	mov	r0, r6
 8011046:	f7ff ffa1 	bl	8010f8c <__multadd>
 801104a:	45a1      	cmp	r9, r4
 801104c:	d1f5      	bne.n	801103a <__s2b+0x38>
 801104e:	eb08 0405 	add.w	r4, r8, r5
 8011052:	3c08      	subs	r4, #8
 8011054:	1b2d      	subs	r5, r5, r4
 8011056:	1963      	adds	r3, r4, r5
 8011058:	42bb      	cmp	r3, r7
 801105a:	db07      	blt.n	801106c <__s2b+0x6a>
 801105c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011060:	0052      	lsls	r2, r2, #1
 8011062:	3101      	adds	r1, #1
 8011064:	e7d9      	b.n	801101a <__s2b+0x18>
 8011066:	340a      	adds	r4, #10
 8011068:	2509      	movs	r5, #9
 801106a:	e7f3      	b.n	8011054 <__s2b+0x52>
 801106c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011070:	4601      	mov	r1, r0
 8011072:	3b30      	subs	r3, #48	; 0x30
 8011074:	220a      	movs	r2, #10
 8011076:	4630      	mov	r0, r6
 8011078:	f7ff ff88 	bl	8010f8c <__multadd>
 801107c:	e7eb      	b.n	8011056 <__s2b+0x54>

0801107e <__hi0bits>:
 801107e:	0c02      	lsrs	r2, r0, #16
 8011080:	0412      	lsls	r2, r2, #16
 8011082:	4603      	mov	r3, r0
 8011084:	b9b2      	cbnz	r2, 80110b4 <__hi0bits+0x36>
 8011086:	0403      	lsls	r3, r0, #16
 8011088:	2010      	movs	r0, #16
 801108a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801108e:	bf04      	itt	eq
 8011090:	021b      	lsleq	r3, r3, #8
 8011092:	3008      	addeq	r0, #8
 8011094:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011098:	bf04      	itt	eq
 801109a:	011b      	lsleq	r3, r3, #4
 801109c:	3004      	addeq	r0, #4
 801109e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80110a2:	bf04      	itt	eq
 80110a4:	009b      	lsleq	r3, r3, #2
 80110a6:	3002      	addeq	r0, #2
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	db06      	blt.n	80110ba <__hi0bits+0x3c>
 80110ac:	005b      	lsls	r3, r3, #1
 80110ae:	d503      	bpl.n	80110b8 <__hi0bits+0x3a>
 80110b0:	3001      	adds	r0, #1
 80110b2:	4770      	bx	lr
 80110b4:	2000      	movs	r0, #0
 80110b6:	e7e8      	b.n	801108a <__hi0bits+0xc>
 80110b8:	2020      	movs	r0, #32
 80110ba:	4770      	bx	lr

080110bc <__lo0bits>:
 80110bc:	6803      	ldr	r3, [r0, #0]
 80110be:	f013 0207 	ands.w	r2, r3, #7
 80110c2:	4601      	mov	r1, r0
 80110c4:	d00b      	beq.n	80110de <__lo0bits+0x22>
 80110c6:	07da      	lsls	r2, r3, #31
 80110c8:	d423      	bmi.n	8011112 <__lo0bits+0x56>
 80110ca:	0798      	lsls	r0, r3, #30
 80110cc:	bf49      	itett	mi
 80110ce:	085b      	lsrmi	r3, r3, #1
 80110d0:	089b      	lsrpl	r3, r3, #2
 80110d2:	2001      	movmi	r0, #1
 80110d4:	600b      	strmi	r3, [r1, #0]
 80110d6:	bf5c      	itt	pl
 80110d8:	600b      	strpl	r3, [r1, #0]
 80110da:	2002      	movpl	r0, #2
 80110dc:	4770      	bx	lr
 80110de:	b298      	uxth	r0, r3
 80110e0:	b9a8      	cbnz	r0, 801110e <__lo0bits+0x52>
 80110e2:	0c1b      	lsrs	r3, r3, #16
 80110e4:	2010      	movs	r0, #16
 80110e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80110ea:	bf04      	itt	eq
 80110ec:	0a1b      	lsreq	r3, r3, #8
 80110ee:	3008      	addeq	r0, #8
 80110f0:	071a      	lsls	r2, r3, #28
 80110f2:	bf04      	itt	eq
 80110f4:	091b      	lsreq	r3, r3, #4
 80110f6:	3004      	addeq	r0, #4
 80110f8:	079a      	lsls	r2, r3, #30
 80110fa:	bf04      	itt	eq
 80110fc:	089b      	lsreq	r3, r3, #2
 80110fe:	3002      	addeq	r0, #2
 8011100:	07da      	lsls	r2, r3, #31
 8011102:	d402      	bmi.n	801110a <__lo0bits+0x4e>
 8011104:	085b      	lsrs	r3, r3, #1
 8011106:	d006      	beq.n	8011116 <__lo0bits+0x5a>
 8011108:	3001      	adds	r0, #1
 801110a:	600b      	str	r3, [r1, #0]
 801110c:	4770      	bx	lr
 801110e:	4610      	mov	r0, r2
 8011110:	e7e9      	b.n	80110e6 <__lo0bits+0x2a>
 8011112:	2000      	movs	r0, #0
 8011114:	4770      	bx	lr
 8011116:	2020      	movs	r0, #32
 8011118:	4770      	bx	lr

0801111a <__i2b>:
 801111a:	b510      	push	{r4, lr}
 801111c:	460c      	mov	r4, r1
 801111e:	2101      	movs	r1, #1
 8011120:	f7ff fee9 	bl	8010ef6 <_Balloc>
 8011124:	2201      	movs	r2, #1
 8011126:	6144      	str	r4, [r0, #20]
 8011128:	6102      	str	r2, [r0, #16]
 801112a:	bd10      	pop	{r4, pc}

0801112c <__multiply>:
 801112c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011130:	4614      	mov	r4, r2
 8011132:	690a      	ldr	r2, [r1, #16]
 8011134:	6923      	ldr	r3, [r4, #16]
 8011136:	429a      	cmp	r2, r3
 8011138:	bfb8      	it	lt
 801113a:	460b      	movlt	r3, r1
 801113c:	4688      	mov	r8, r1
 801113e:	bfbc      	itt	lt
 8011140:	46a0      	movlt	r8, r4
 8011142:	461c      	movlt	r4, r3
 8011144:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011148:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801114c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011150:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011154:	eb07 0609 	add.w	r6, r7, r9
 8011158:	42b3      	cmp	r3, r6
 801115a:	bfb8      	it	lt
 801115c:	3101      	addlt	r1, #1
 801115e:	f7ff feca 	bl	8010ef6 <_Balloc>
 8011162:	f100 0514 	add.w	r5, r0, #20
 8011166:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801116a:	462b      	mov	r3, r5
 801116c:	2200      	movs	r2, #0
 801116e:	4573      	cmp	r3, lr
 8011170:	d316      	bcc.n	80111a0 <__multiply+0x74>
 8011172:	f104 0214 	add.w	r2, r4, #20
 8011176:	f108 0114 	add.w	r1, r8, #20
 801117a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801117e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011182:	9300      	str	r3, [sp, #0]
 8011184:	9b00      	ldr	r3, [sp, #0]
 8011186:	9201      	str	r2, [sp, #4]
 8011188:	4293      	cmp	r3, r2
 801118a:	d80c      	bhi.n	80111a6 <__multiply+0x7a>
 801118c:	2e00      	cmp	r6, #0
 801118e:	dd03      	ble.n	8011198 <__multiply+0x6c>
 8011190:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011194:	2b00      	cmp	r3, #0
 8011196:	d05d      	beq.n	8011254 <__multiply+0x128>
 8011198:	6106      	str	r6, [r0, #16]
 801119a:	b003      	add	sp, #12
 801119c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a0:	f843 2b04 	str.w	r2, [r3], #4
 80111a4:	e7e3      	b.n	801116e <__multiply+0x42>
 80111a6:	f8b2 b000 	ldrh.w	fp, [r2]
 80111aa:	f1bb 0f00 	cmp.w	fp, #0
 80111ae:	d023      	beq.n	80111f8 <__multiply+0xcc>
 80111b0:	4689      	mov	r9, r1
 80111b2:	46ac      	mov	ip, r5
 80111b4:	f04f 0800 	mov.w	r8, #0
 80111b8:	f859 4b04 	ldr.w	r4, [r9], #4
 80111bc:	f8dc a000 	ldr.w	sl, [ip]
 80111c0:	b2a3      	uxth	r3, r4
 80111c2:	fa1f fa8a 	uxth.w	sl, sl
 80111c6:	fb0b a303 	mla	r3, fp, r3, sl
 80111ca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80111ce:	f8dc 4000 	ldr.w	r4, [ip]
 80111d2:	4443      	add	r3, r8
 80111d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80111d8:	fb0b 840a 	mla	r4, fp, sl, r8
 80111dc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80111e0:	46e2      	mov	sl, ip
 80111e2:	b29b      	uxth	r3, r3
 80111e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80111e8:	454f      	cmp	r7, r9
 80111ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80111ee:	f84a 3b04 	str.w	r3, [sl], #4
 80111f2:	d82b      	bhi.n	801124c <__multiply+0x120>
 80111f4:	f8cc 8004 	str.w	r8, [ip, #4]
 80111f8:	9b01      	ldr	r3, [sp, #4]
 80111fa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80111fe:	3204      	adds	r2, #4
 8011200:	f1ba 0f00 	cmp.w	sl, #0
 8011204:	d020      	beq.n	8011248 <__multiply+0x11c>
 8011206:	682b      	ldr	r3, [r5, #0]
 8011208:	4689      	mov	r9, r1
 801120a:	46a8      	mov	r8, r5
 801120c:	f04f 0b00 	mov.w	fp, #0
 8011210:	f8b9 c000 	ldrh.w	ip, [r9]
 8011214:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011218:	fb0a 440c 	mla	r4, sl, ip, r4
 801121c:	445c      	add	r4, fp
 801121e:	46c4      	mov	ip, r8
 8011220:	b29b      	uxth	r3, r3
 8011222:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011226:	f84c 3b04 	str.w	r3, [ip], #4
 801122a:	f859 3b04 	ldr.w	r3, [r9], #4
 801122e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011232:	0c1b      	lsrs	r3, r3, #16
 8011234:	fb0a b303 	mla	r3, sl, r3, fp
 8011238:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801123c:	454f      	cmp	r7, r9
 801123e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011242:	d805      	bhi.n	8011250 <__multiply+0x124>
 8011244:	f8c8 3004 	str.w	r3, [r8, #4]
 8011248:	3504      	adds	r5, #4
 801124a:	e79b      	b.n	8011184 <__multiply+0x58>
 801124c:	46d4      	mov	ip, sl
 801124e:	e7b3      	b.n	80111b8 <__multiply+0x8c>
 8011250:	46e0      	mov	r8, ip
 8011252:	e7dd      	b.n	8011210 <__multiply+0xe4>
 8011254:	3e01      	subs	r6, #1
 8011256:	e799      	b.n	801118c <__multiply+0x60>

08011258 <__pow5mult>:
 8011258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801125c:	4615      	mov	r5, r2
 801125e:	f012 0203 	ands.w	r2, r2, #3
 8011262:	4606      	mov	r6, r0
 8011264:	460f      	mov	r7, r1
 8011266:	d007      	beq.n	8011278 <__pow5mult+0x20>
 8011268:	3a01      	subs	r2, #1
 801126a:	4c21      	ldr	r4, [pc, #132]	; (80112f0 <__pow5mult+0x98>)
 801126c:	2300      	movs	r3, #0
 801126e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011272:	f7ff fe8b 	bl	8010f8c <__multadd>
 8011276:	4607      	mov	r7, r0
 8011278:	10ad      	asrs	r5, r5, #2
 801127a:	d035      	beq.n	80112e8 <__pow5mult+0x90>
 801127c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801127e:	b93c      	cbnz	r4, 8011290 <__pow5mult+0x38>
 8011280:	2010      	movs	r0, #16
 8011282:	f7ff fe03 	bl	8010e8c <malloc>
 8011286:	6270      	str	r0, [r6, #36]	; 0x24
 8011288:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801128c:	6004      	str	r4, [r0, #0]
 801128e:	60c4      	str	r4, [r0, #12]
 8011290:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011294:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011298:	b94c      	cbnz	r4, 80112ae <__pow5mult+0x56>
 801129a:	f240 2171 	movw	r1, #625	; 0x271
 801129e:	4630      	mov	r0, r6
 80112a0:	f7ff ff3b 	bl	801111a <__i2b>
 80112a4:	2300      	movs	r3, #0
 80112a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80112aa:	4604      	mov	r4, r0
 80112ac:	6003      	str	r3, [r0, #0]
 80112ae:	f04f 0800 	mov.w	r8, #0
 80112b2:	07eb      	lsls	r3, r5, #31
 80112b4:	d50a      	bpl.n	80112cc <__pow5mult+0x74>
 80112b6:	4639      	mov	r1, r7
 80112b8:	4622      	mov	r2, r4
 80112ba:	4630      	mov	r0, r6
 80112bc:	f7ff ff36 	bl	801112c <__multiply>
 80112c0:	4639      	mov	r1, r7
 80112c2:	4681      	mov	r9, r0
 80112c4:	4630      	mov	r0, r6
 80112c6:	f7ff fe4a 	bl	8010f5e <_Bfree>
 80112ca:	464f      	mov	r7, r9
 80112cc:	106d      	asrs	r5, r5, #1
 80112ce:	d00b      	beq.n	80112e8 <__pow5mult+0x90>
 80112d0:	6820      	ldr	r0, [r4, #0]
 80112d2:	b938      	cbnz	r0, 80112e4 <__pow5mult+0x8c>
 80112d4:	4622      	mov	r2, r4
 80112d6:	4621      	mov	r1, r4
 80112d8:	4630      	mov	r0, r6
 80112da:	f7ff ff27 	bl	801112c <__multiply>
 80112de:	6020      	str	r0, [r4, #0]
 80112e0:	f8c0 8000 	str.w	r8, [r0]
 80112e4:	4604      	mov	r4, r0
 80112e6:	e7e4      	b.n	80112b2 <__pow5mult+0x5a>
 80112e8:	4638      	mov	r0, r7
 80112ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112ee:	bf00      	nop
 80112f0:	08011e28 	.word	0x08011e28

080112f4 <__lshift>:
 80112f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112f8:	460c      	mov	r4, r1
 80112fa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80112fe:	6923      	ldr	r3, [r4, #16]
 8011300:	6849      	ldr	r1, [r1, #4]
 8011302:	eb0a 0903 	add.w	r9, sl, r3
 8011306:	68a3      	ldr	r3, [r4, #8]
 8011308:	4607      	mov	r7, r0
 801130a:	4616      	mov	r6, r2
 801130c:	f109 0501 	add.w	r5, r9, #1
 8011310:	42ab      	cmp	r3, r5
 8011312:	db32      	blt.n	801137a <__lshift+0x86>
 8011314:	4638      	mov	r0, r7
 8011316:	f7ff fdee 	bl	8010ef6 <_Balloc>
 801131a:	2300      	movs	r3, #0
 801131c:	4680      	mov	r8, r0
 801131e:	f100 0114 	add.w	r1, r0, #20
 8011322:	461a      	mov	r2, r3
 8011324:	4553      	cmp	r3, sl
 8011326:	db2b      	blt.n	8011380 <__lshift+0x8c>
 8011328:	6920      	ldr	r0, [r4, #16]
 801132a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801132e:	f104 0314 	add.w	r3, r4, #20
 8011332:	f016 021f 	ands.w	r2, r6, #31
 8011336:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801133a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801133e:	d025      	beq.n	801138c <__lshift+0x98>
 8011340:	f1c2 0e20 	rsb	lr, r2, #32
 8011344:	2000      	movs	r0, #0
 8011346:	681e      	ldr	r6, [r3, #0]
 8011348:	468a      	mov	sl, r1
 801134a:	4096      	lsls	r6, r2
 801134c:	4330      	orrs	r0, r6
 801134e:	f84a 0b04 	str.w	r0, [sl], #4
 8011352:	f853 0b04 	ldr.w	r0, [r3], #4
 8011356:	459c      	cmp	ip, r3
 8011358:	fa20 f00e 	lsr.w	r0, r0, lr
 801135c:	d814      	bhi.n	8011388 <__lshift+0x94>
 801135e:	6048      	str	r0, [r1, #4]
 8011360:	b108      	cbz	r0, 8011366 <__lshift+0x72>
 8011362:	f109 0502 	add.w	r5, r9, #2
 8011366:	3d01      	subs	r5, #1
 8011368:	4638      	mov	r0, r7
 801136a:	f8c8 5010 	str.w	r5, [r8, #16]
 801136e:	4621      	mov	r1, r4
 8011370:	f7ff fdf5 	bl	8010f5e <_Bfree>
 8011374:	4640      	mov	r0, r8
 8011376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801137a:	3101      	adds	r1, #1
 801137c:	005b      	lsls	r3, r3, #1
 801137e:	e7c7      	b.n	8011310 <__lshift+0x1c>
 8011380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011384:	3301      	adds	r3, #1
 8011386:	e7cd      	b.n	8011324 <__lshift+0x30>
 8011388:	4651      	mov	r1, sl
 801138a:	e7dc      	b.n	8011346 <__lshift+0x52>
 801138c:	3904      	subs	r1, #4
 801138e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011392:	f841 2f04 	str.w	r2, [r1, #4]!
 8011396:	459c      	cmp	ip, r3
 8011398:	d8f9      	bhi.n	801138e <__lshift+0x9a>
 801139a:	e7e4      	b.n	8011366 <__lshift+0x72>

0801139c <__mcmp>:
 801139c:	6903      	ldr	r3, [r0, #16]
 801139e:	690a      	ldr	r2, [r1, #16]
 80113a0:	1a9b      	subs	r3, r3, r2
 80113a2:	b530      	push	{r4, r5, lr}
 80113a4:	d10c      	bne.n	80113c0 <__mcmp+0x24>
 80113a6:	0092      	lsls	r2, r2, #2
 80113a8:	3014      	adds	r0, #20
 80113aa:	3114      	adds	r1, #20
 80113ac:	1884      	adds	r4, r0, r2
 80113ae:	4411      	add	r1, r2
 80113b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80113b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80113b8:	4295      	cmp	r5, r2
 80113ba:	d003      	beq.n	80113c4 <__mcmp+0x28>
 80113bc:	d305      	bcc.n	80113ca <__mcmp+0x2e>
 80113be:	2301      	movs	r3, #1
 80113c0:	4618      	mov	r0, r3
 80113c2:	bd30      	pop	{r4, r5, pc}
 80113c4:	42a0      	cmp	r0, r4
 80113c6:	d3f3      	bcc.n	80113b0 <__mcmp+0x14>
 80113c8:	e7fa      	b.n	80113c0 <__mcmp+0x24>
 80113ca:	f04f 33ff 	mov.w	r3, #4294967295
 80113ce:	e7f7      	b.n	80113c0 <__mcmp+0x24>

080113d0 <__mdiff>:
 80113d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113d4:	460d      	mov	r5, r1
 80113d6:	4607      	mov	r7, r0
 80113d8:	4611      	mov	r1, r2
 80113da:	4628      	mov	r0, r5
 80113dc:	4614      	mov	r4, r2
 80113de:	f7ff ffdd 	bl	801139c <__mcmp>
 80113e2:	1e06      	subs	r6, r0, #0
 80113e4:	d108      	bne.n	80113f8 <__mdiff+0x28>
 80113e6:	4631      	mov	r1, r6
 80113e8:	4638      	mov	r0, r7
 80113ea:	f7ff fd84 	bl	8010ef6 <_Balloc>
 80113ee:	2301      	movs	r3, #1
 80113f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80113f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113f8:	bfa4      	itt	ge
 80113fa:	4623      	movge	r3, r4
 80113fc:	462c      	movge	r4, r5
 80113fe:	4638      	mov	r0, r7
 8011400:	6861      	ldr	r1, [r4, #4]
 8011402:	bfa6      	itte	ge
 8011404:	461d      	movge	r5, r3
 8011406:	2600      	movge	r6, #0
 8011408:	2601      	movlt	r6, #1
 801140a:	f7ff fd74 	bl	8010ef6 <_Balloc>
 801140e:	692b      	ldr	r3, [r5, #16]
 8011410:	60c6      	str	r6, [r0, #12]
 8011412:	6926      	ldr	r6, [r4, #16]
 8011414:	f105 0914 	add.w	r9, r5, #20
 8011418:	f104 0214 	add.w	r2, r4, #20
 801141c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011420:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011424:	f100 0514 	add.w	r5, r0, #20
 8011428:	f04f 0e00 	mov.w	lr, #0
 801142c:	f852 ab04 	ldr.w	sl, [r2], #4
 8011430:	f859 4b04 	ldr.w	r4, [r9], #4
 8011434:	fa1e f18a 	uxtah	r1, lr, sl
 8011438:	b2a3      	uxth	r3, r4
 801143a:	1ac9      	subs	r1, r1, r3
 801143c:	0c23      	lsrs	r3, r4, #16
 801143e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011442:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011446:	b289      	uxth	r1, r1
 8011448:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801144c:	45c8      	cmp	r8, r9
 801144e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011452:	4694      	mov	ip, r2
 8011454:	f845 3b04 	str.w	r3, [r5], #4
 8011458:	d8e8      	bhi.n	801142c <__mdiff+0x5c>
 801145a:	45bc      	cmp	ip, r7
 801145c:	d304      	bcc.n	8011468 <__mdiff+0x98>
 801145e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011462:	b183      	cbz	r3, 8011486 <__mdiff+0xb6>
 8011464:	6106      	str	r6, [r0, #16]
 8011466:	e7c5      	b.n	80113f4 <__mdiff+0x24>
 8011468:	f85c 1b04 	ldr.w	r1, [ip], #4
 801146c:	fa1e f381 	uxtah	r3, lr, r1
 8011470:	141a      	asrs	r2, r3, #16
 8011472:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011476:	b29b      	uxth	r3, r3
 8011478:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801147c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011480:	f845 3b04 	str.w	r3, [r5], #4
 8011484:	e7e9      	b.n	801145a <__mdiff+0x8a>
 8011486:	3e01      	subs	r6, #1
 8011488:	e7e9      	b.n	801145e <__mdiff+0x8e>
	...

0801148c <__ulp>:
 801148c:	4b12      	ldr	r3, [pc, #72]	; (80114d8 <__ulp+0x4c>)
 801148e:	ee10 2a90 	vmov	r2, s1
 8011492:	401a      	ands	r2, r3
 8011494:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011498:	2b00      	cmp	r3, #0
 801149a:	dd04      	ble.n	80114a6 <__ulp+0x1a>
 801149c:	2000      	movs	r0, #0
 801149e:	4619      	mov	r1, r3
 80114a0:	ec41 0b10 	vmov	d0, r0, r1
 80114a4:	4770      	bx	lr
 80114a6:	425b      	negs	r3, r3
 80114a8:	151b      	asrs	r3, r3, #20
 80114aa:	2b13      	cmp	r3, #19
 80114ac:	f04f 0000 	mov.w	r0, #0
 80114b0:	f04f 0100 	mov.w	r1, #0
 80114b4:	dc04      	bgt.n	80114c0 <__ulp+0x34>
 80114b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80114ba:	fa42 f103 	asr.w	r1, r2, r3
 80114be:	e7ef      	b.n	80114a0 <__ulp+0x14>
 80114c0:	3b14      	subs	r3, #20
 80114c2:	2b1e      	cmp	r3, #30
 80114c4:	f04f 0201 	mov.w	r2, #1
 80114c8:	bfda      	itte	le
 80114ca:	f1c3 031f 	rsble	r3, r3, #31
 80114ce:	fa02 f303 	lslle.w	r3, r2, r3
 80114d2:	4613      	movgt	r3, r2
 80114d4:	4618      	mov	r0, r3
 80114d6:	e7e3      	b.n	80114a0 <__ulp+0x14>
 80114d8:	7ff00000 	.word	0x7ff00000

080114dc <__b2d>:
 80114dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114de:	6905      	ldr	r5, [r0, #16]
 80114e0:	f100 0714 	add.w	r7, r0, #20
 80114e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80114e8:	1f2e      	subs	r6, r5, #4
 80114ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80114ee:	4620      	mov	r0, r4
 80114f0:	f7ff fdc5 	bl	801107e <__hi0bits>
 80114f4:	f1c0 0320 	rsb	r3, r0, #32
 80114f8:	280a      	cmp	r0, #10
 80114fa:	600b      	str	r3, [r1, #0]
 80114fc:	f8df c074 	ldr.w	ip, [pc, #116]	; 8011574 <__b2d+0x98>
 8011500:	dc14      	bgt.n	801152c <__b2d+0x50>
 8011502:	f1c0 0e0b 	rsb	lr, r0, #11
 8011506:	fa24 f10e 	lsr.w	r1, r4, lr
 801150a:	42b7      	cmp	r7, r6
 801150c:	ea41 030c 	orr.w	r3, r1, ip
 8011510:	bf34      	ite	cc
 8011512:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011516:	2100      	movcs	r1, #0
 8011518:	3015      	adds	r0, #21
 801151a:	fa04 f000 	lsl.w	r0, r4, r0
 801151e:	fa21 f10e 	lsr.w	r1, r1, lr
 8011522:	ea40 0201 	orr.w	r2, r0, r1
 8011526:	ec43 2b10 	vmov	d0, r2, r3
 801152a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801152c:	42b7      	cmp	r7, r6
 801152e:	bf3a      	itte	cc
 8011530:	f1a5 0608 	subcc.w	r6, r5, #8
 8011534:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011538:	2100      	movcs	r1, #0
 801153a:	380b      	subs	r0, #11
 801153c:	d015      	beq.n	801156a <__b2d+0x8e>
 801153e:	4084      	lsls	r4, r0
 8011540:	f1c0 0520 	rsb	r5, r0, #32
 8011544:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8011548:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801154c:	42be      	cmp	r6, r7
 801154e:	fa21 fc05 	lsr.w	ip, r1, r5
 8011552:	ea44 030c 	orr.w	r3, r4, ip
 8011556:	bf8c      	ite	hi
 8011558:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801155c:	2400      	movls	r4, #0
 801155e:	fa01 f000 	lsl.w	r0, r1, r0
 8011562:	40ec      	lsrs	r4, r5
 8011564:	ea40 0204 	orr.w	r2, r0, r4
 8011568:	e7dd      	b.n	8011526 <__b2d+0x4a>
 801156a:	ea44 030c 	orr.w	r3, r4, ip
 801156e:	460a      	mov	r2, r1
 8011570:	e7d9      	b.n	8011526 <__b2d+0x4a>
 8011572:	bf00      	nop
 8011574:	3ff00000 	.word	0x3ff00000

08011578 <__d2b>:
 8011578:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801157c:	460e      	mov	r6, r1
 801157e:	2101      	movs	r1, #1
 8011580:	ec59 8b10 	vmov	r8, r9, d0
 8011584:	4615      	mov	r5, r2
 8011586:	f7ff fcb6 	bl	8010ef6 <_Balloc>
 801158a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801158e:	4607      	mov	r7, r0
 8011590:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011594:	bb34      	cbnz	r4, 80115e4 <__d2b+0x6c>
 8011596:	9301      	str	r3, [sp, #4]
 8011598:	f1b8 0300 	subs.w	r3, r8, #0
 801159c:	d027      	beq.n	80115ee <__d2b+0x76>
 801159e:	a802      	add	r0, sp, #8
 80115a0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80115a4:	f7ff fd8a 	bl	80110bc <__lo0bits>
 80115a8:	9900      	ldr	r1, [sp, #0]
 80115aa:	b1f0      	cbz	r0, 80115ea <__d2b+0x72>
 80115ac:	9a01      	ldr	r2, [sp, #4]
 80115ae:	f1c0 0320 	rsb	r3, r0, #32
 80115b2:	fa02 f303 	lsl.w	r3, r2, r3
 80115b6:	430b      	orrs	r3, r1
 80115b8:	40c2      	lsrs	r2, r0
 80115ba:	617b      	str	r3, [r7, #20]
 80115bc:	9201      	str	r2, [sp, #4]
 80115be:	9b01      	ldr	r3, [sp, #4]
 80115c0:	61bb      	str	r3, [r7, #24]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	bf14      	ite	ne
 80115c6:	2102      	movne	r1, #2
 80115c8:	2101      	moveq	r1, #1
 80115ca:	6139      	str	r1, [r7, #16]
 80115cc:	b1c4      	cbz	r4, 8011600 <__d2b+0x88>
 80115ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80115d2:	4404      	add	r4, r0
 80115d4:	6034      	str	r4, [r6, #0]
 80115d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80115da:	6028      	str	r0, [r5, #0]
 80115dc:	4638      	mov	r0, r7
 80115de:	b003      	add	sp, #12
 80115e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80115e8:	e7d5      	b.n	8011596 <__d2b+0x1e>
 80115ea:	6179      	str	r1, [r7, #20]
 80115ec:	e7e7      	b.n	80115be <__d2b+0x46>
 80115ee:	a801      	add	r0, sp, #4
 80115f0:	f7ff fd64 	bl	80110bc <__lo0bits>
 80115f4:	9b01      	ldr	r3, [sp, #4]
 80115f6:	617b      	str	r3, [r7, #20]
 80115f8:	2101      	movs	r1, #1
 80115fa:	6139      	str	r1, [r7, #16]
 80115fc:	3020      	adds	r0, #32
 80115fe:	e7e5      	b.n	80115cc <__d2b+0x54>
 8011600:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011604:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011608:	6030      	str	r0, [r6, #0]
 801160a:	6918      	ldr	r0, [r3, #16]
 801160c:	f7ff fd37 	bl	801107e <__hi0bits>
 8011610:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011614:	e7e1      	b.n	80115da <__d2b+0x62>

08011616 <__ratio>:
 8011616:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801161a:	4688      	mov	r8, r1
 801161c:	4669      	mov	r1, sp
 801161e:	4681      	mov	r9, r0
 8011620:	f7ff ff5c 	bl	80114dc <__b2d>
 8011624:	a901      	add	r1, sp, #4
 8011626:	4640      	mov	r0, r8
 8011628:	ec57 6b10 	vmov	r6, r7, d0
 801162c:	f7ff ff56 	bl	80114dc <__b2d>
 8011630:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011634:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011638:	eba3 0c02 	sub.w	ip, r3, r2
 801163c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011640:	1a9b      	subs	r3, r3, r2
 8011642:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011646:	ec5b ab10 	vmov	sl, fp, d0
 801164a:	2b00      	cmp	r3, #0
 801164c:	bfce      	itee	gt
 801164e:	463a      	movgt	r2, r7
 8011650:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011654:	465a      	movle	r2, fp
 8011656:	4659      	mov	r1, fp
 8011658:	463d      	mov	r5, r7
 801165a:	bfd4      	ite	le
 801165c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8011660:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8011664:	4630      	mov	r0, r6
 8011666:	ee10 2a10 	vmov	r2, s0
 801166a:	460b      	mov	r3, r1
 801166c:	4629      	mov	r1, r5
 801166e:	f7f7 f825 	bl	80086bc <__aeabi_ddiv>
 8011672:	ec41 0b10 	vmov	d0, r0, r1
 8011676:	b003      	add	sp, #12
 8011678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801167c <__copybits>:
 801167c:	3901      	subs	r1, #1
 801167e:	b510      	push	{r4, lr}
 8011680:	1149      	asrs	r1, r1, #5
 8011682:	6914      	ldr	r4, [r2, #16]
 8011684:	3101      	adds	r1, #1
 8011686:	f102 0314 	add.w	r3, r2, #20
 801168a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801168e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011692:	42a3      	cmp	r3, r4
 8011694:	4602      	mov	r2, r0
 8011696:	d303      	bcc.n	80116a0 <__copybits+0x24>
 8011698:	2300      	movs	r3, #0
 801169a:	428a      	cmp	r2, r1
 801169c:	d305      	bcc.n	80116aa <__copybits+0x2e>
 801169e:	bd10      	pop	{r4, pc}
 80116a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80116a4:	f840 2b04 	str.w	r2, [r0], #4
 80116a8:	e7f3      	b.n	8011692 <__copybits+0x16>
 80116aa:	f842 3b04 	str.w	r3, [r2], #4
 80116ae:	e7f4      	b.n	801169a <__copybits+0x1e>

080116b0 <__any_on>:
 80116b0:	f100 0214 	add.w	r2, r0, #20
 80116b4:	6900      	ldr	r0, [r0, #16]
 80116b6:	114b      	asrs	r3, r1, #5
 80116b8:	4298      	cmp	r0, r3
 80116ba:	b510      	push	{r4, lr}
 80116bc:	db11      	blt.n	80116e2 <__any_on+0x32>
 80116be:	dd0a      	ble.n	80116d6 <__any_on+0x26>
 80116c0:	f011 011f 	ands.w	r1, r1, #31
 80116c4:	d007      	beq.n	80116d6 <__any_on+0x26>
 80116c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80116ca:	fa24 f001 	lsr.w	r0, r4, r1
 80116ce:	fa00 f101 	lsl.w	r1, r0, r1
 80116d2:	428c      	cmp	r4, r1
 80116d4:	d10b      	bne.n	80116ee <__any_on+0x3e>
 80116d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80116da:	4293      	cmp	r3, r2
 80116dc:	d803      	bhi.n	80116e6 <__any_on+0x36>
 80116de:	2000      	movs	r0, #0
 80116e0:	bd10      	pop	{r4, pc}
 80116e2:	4603      	mov	r3, r0
 80116e4:	e7f7      	b.n	80116d6 <__any_on+0x26>
 80116e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80116ea:	2900      	cmp	r1, #0
 80116ec:	d0f5      	beq.n	80116da <__any_on+0x2a>
 80116ee:	2001      	movs	r0, #1
 80116f0:	e7f6      	b.n	80116e0 <__any_on+0x30>

080116f2 <_calloc_r>:
 80116f2:	b538      	push	{r3, r4, r5, lr}
 80116f4:	fb02 f401 	mul.w	r4, r2, r1
 80116f8:	4621      	mov	r1, r4
 80116fa:	f7fc f9a3 	bl	800da44 <_malloc_r>
 80116fe:	4605      	mov	r5, r0
 8011700:	b118      	cbz	r0, 801170a <_calloc_r+0x18>
 8011702:	4622      	mov	r2, r4
 8011704:	2100      	movs	r1, #0
 8011706:	f7fc f946 	bl	800d996 <memset>
 801170a:	4628      	mov	r0, r5
 801170c:	bd38      	pop	{r3, r4, r5, pc}

0801170e <_realloc_r>:
 801170e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011710:	4607      	mov	r7, r0
 8011712:	4614      	mov	r4, r2
 8011714:	460e      	mov	r6, r1
 8011716:	b921      	cbnz	r1, 8011722 <_realloc_r+0x14>
 8011718:	4611      	mov	r1, r2
 801171a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801171e:	f7fc b991 	b.w	800da44 <_malloc_r>
 8011722:	b922      	cbnz	r2, 801172e <_realloc_r+0x20>
 8011724:	f7fc f940 	bl	800d9a8 <_free_r>
 8011728:	4625      	mov	r5, r4
 801172a:	4628      	mov	r0, r5
 801172c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801172e:	f000 f9ce 	bl	8011ace <_malloc_usable_size_r>
 8011732:	42a0      	cmp	r0, r4
 8011734:	d20f      	bcs.n	8011756 <_realloc_r+0x48>
 8011736:	4621      	mov	r1, r4
 8011738:	4638      	mov	r0, r7
 801173a:	f7fc f983 	bl	800da44 <_malloc_r>
 801173e:	4605      	mov	r5, r0
 8011740:	2800      	cmp	r0, #0
 8011742:	d0f2      	beq.n	801172a <_realloc_r+0x1c>
 8011744:	4631      	mov	r1, r6
 8011746:	4622      	mov	r2, r4
 8011748:	f7fc f91a 	bl	800d980 <memcpy>
 801174c:	4631      	mov	r1, r6
 801174e:	4638      	mov	r0, r7
 8011750:	f7fc f92a 	bl	800d9a8 <_free_r>
 8011754:	e7e9      	b.n	801172a <_realloc_r+0x1c>
 8011756:	4635      	mov	r5, r6
 8011758:	e7e7      	b.n	801172a <_realloc_r+0x1c>

0801175a <__ssputs_r>:
 801175a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801175e:	688e      	ldr	r6, [r1, #8]
 8011760:	429e      	cmp	r6, r3
 8011762:	4682      	mov	sl, r0
 8011764:	460c      	mov	r4, r1
 8011766:	4690      	mov	r8, r2
 8011768:	4699      	mov	r9, r3
 801176a:	d837      	bhi.n	80117dc <__ssputs_r+0x82>
 801176c:	898a      	ldrh	r2, [r1, #12]
 801176e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011772:	d031      	beq.n	80117d8 <__ssputs_r+0x7e>
 8011774:	6825      	ldr	r5, [r4, #0]
 8011776:	6909      	ldr	r1, [r1, #16]
 8011778:	1a6f      	subs	r7, r5, r1
 801177a:	6965      	ldr	r5, [r4, #20]
 801177c:	2302      	movs	r3, #2
 801177e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011782:	fb95 f5f3 	sdiv	r5, r5, r3
 8011786:	f109 0301 	add.w	r3, r9, #1
 801178a:	443b      	add	r3, r7
 801178c:	429d      	cmp	r5, r3
 801178e:	bf38      	it	cc
 8011790:	461d      	movcc	r5, r3
 8011792:	0553      	lsls	r3, r2, #21
 8011794:	d530      	bpl.n	80117f8 <__ssputs_r+0x9e>
 8011796:	4629      	mov	r1, r5
 8011798:	f7fc f954 	bl	800da44 <_malloc_r>
 801179c:	4606      	mov	r6, r0
 801179e:	b950      	cbnz	r0, 80117b6 <__ssputs_r+0x5c>
 80117a0:	230c      	movs	r3, #12
 80117a2:	f8ca 3000 	str.w	r3, [sl]
 80117a6:	89a3      	ldrh	r3, [r4, #12]
 80117a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117ac:	81a3      	strh	r3, [r4, #12]
 80117ae:	f04f 30ff 	mov.w	r0, #4294967295
 80117b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117b6:	463a      	mov	r2, r7
 80117b8:	6921      	ldr	r1, [r4, #16]
 80117ba:	f7fc f8e1 	bl	800d980 <memcpy>
 80117be:	89a3      	ldrh	r3, [r4, #12]
 80117c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80117c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117c8:	81a3      	strh	r3, [r4, #12]
 80117ca:	6126      	str	r6, [r4, #16]
 80117cc:	6165      	str	r5, [r4, #20]
 80117ce:	443e      	add	r6, r7
 80117d0:	1bed      	subs	r5, r5, r7
 80117d2:	6026      	str	r6, [r4, #0]
 80117d4:	60a5      	str	r5, [r4, #8]
 80117d6:	464e      	mov	r6, r9
 80117d8:	454e      	cmp	r6, r9
 80117da:	d900      	bls.n	80117de <__ssputs_r+0x84>
 80117dc:	464e      	mov	r6, r9
 80117de:	4632      	mov	r2, r6
 80117e0:	4641      	mov	r1, r8
 80117e2:	6820      	ldr	r0, [r4, #0]
 80117e4:	f7ff fb6c 	bl	8010ec0 <memmove>
 80117e8:	68a3      	ldr	r3, [r4, #8]
 80117ea:	1b9b      	subs	r3, r3, r6
 80117ec:	60a3      	str	r3, [r4, #8]
 80117ee:	6823      	ldr	r3, [r4, #0]
 80117f0:	441e      	add	r6, r3
 80117f2:	6026      	str	r6, [r4, #0]
 80117f4:	2000      	movs	r0, #0
 80117f6:	e7dc      	b.n	80117b2 <__ssputs_r+0x58>
 80117f8:	462a      	mov	r2, r5
 80117fa:	f7ff ff88 	bl	801170e <_realloc_r>
 80117fe:	4606      	mov	r6, r0
 8011800:	2800      	cmp	r0, #0
 8011802:	d1e2      	bne.n	80117ca <__ssputs_r+0x70>
 8011804:	6921      	ldr	r1, [r4, #16]
 8011806:	4650      	mov	r0, sl
 8011808:	f7fc f8ce 	bl	800d9a8 <_free_r>
 801180c:	e7c8      	b.n	80117a0 <__ssputs_r+0x46>
	...

08011810 <_svfiprintf_r>:
 8011810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011814:	461d      	mov	r5, r3
 8011816:	898b      	ldrh	r3, [r1, #12]
 8011818:	061f      	lsls	r7, r3, #24
 801181a:	b09d      	sub	sp, #116	; 0x74
 801181c:	4680      	mov	r8, r0
 801181e:	460c      	mov	r4, r1
 8011820:	4616      	mov	r6, r2
 8011822:	d50f      	bpl.n	8011844 <_svfiprintf_r+0x34>
 8011824:	690b      	ldr	r3, [r1, #16]
 8011826:	b96b      	cbnz	r3, 8011844 <_svfiprintf_r+0x34>
 8011828:	2140      	movs	r1, #64	; 0x40
 801182a:	f7fc f90b 	bl	800da44 <_malloc_r>
 801182e:	6020      	str	r0, [r4, #0]
 8011830:	6120      	str	r0, [r4, #16]
 8011832:	b928      	cbnz	r0, 8011840 <_svfiprintf_r+0x30>
 8011834:	230c      	movs	r3, #12
 8011836:	f8c8 3000 	str.w	r3, [r8]
 801183a:	f04f 30ff 	mov.w	r0, #4294967295
 801183e:	e0c8      	b.n	80119d2 <_svfiprintf_r+0x1c2>
 8011840:	2340      	movs	r3, #64	; 0x40
 8011842:	6163      	str	r3, [r4, #20]
 8011844:	2300      	movs	r3, #0
 8011846:	9309      	str	r3, [sp, #36]	; 0x24
 8011848:	2320      	movs	r3, #32
 801184a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801184e:	2330      	movs	r3, #48	; 0x30
 8011850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011854:	9503      	str	r5, [sp, #12]
 8011856:	f04f 0b01 	mov.w	fp, #1
 801185a:	4637      	mov	r7, r6
 801185c:	463d      	mov	r5, r7
 801185e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011862:	b10b      	cbz	r3, 8011868 <_svfiprintf_r+0x58>
 8011864:	2b25      	cmp	r3, #37	; 0x25
 8011866:	d13e      	bne.n	80118e6 <_svfiprintf_r+0xd6>
 8011868:	ebb7 0a06 	subs.w	sl, r7, r6
 801186c:	d00b      	beq.n	8011886 <_svfiprintf_r+0x76>
 801186e:	4653      	mov	r3, sl
 8011870:	4632      	mov	r2, r6
 8011872:	4621      	mov	r1, r4
 8011874:	4640      	mov	r0, r8
 8011876:	f7ff ff70 	bl	801175a <__ssputs_r>
 801187a:	3001      	adds	r0, #1
 801187c:	f000 80a4 	beq.w	80119c8 <_svfiprintf_r+0x1b8>
 8011880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011882:	4453      	add	r3, sl
 8011884:	9309      	str	r3, [sp, #36]	; 0x24
 8011886:	783b      	ldrb	r3, [r7, #0]
 8011888:	2b00      	cmp	r3, #0
 801188a:	f000 809d 	beq.w	80119c8 <_svfiprintf_r+0x1b8>
 801188e:	2300      	movs	r3, #0
 8011890:	f04f 32ff 	mov.w	r2, #4294967295
 8011894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011898:	9304      	str	r3, [sp, #16]
 801189a:	9307      	str	r3, [sp, #28]
 801189c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80118a0:	931a      	str	r3, [sp, #104]	; 0x68
 80118a2:	462f      	mov	r7, r5
 80118a4:	2205      	movs	r2, #5
 80118a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80118aa:	4850      	ldr	r0, [pc, #320]	; (80119ec <_svfiprintf_r+0x1dc>)
 80118ac:	f7f6 fbd0 	bl	8008050 <memchr>
 80118b0:	9b04      	ldr	r3, [sp, #16]
 80118b2:	b9d0      	cbnz	r0, 80118ea <_svfiprintf_r+0xda>
 80118b4:	06d9      	lsls	r1, r3, #27
 80118b6:	bf44      	itt	mi
 80118b8:	2220      	movmi	r2, #32
 80118ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80118be:	071a      	lsls	r2, r3, #28
 80118c0:	bf44      	itt	mi
 80118c2:	222b      	movmi	r2, #43	; 0x2b
 80118c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80118c8:	782a      	ldrb	r2, [r5, #0]
 80118ca:	2a2a      	cmp	r2, #42	; 0x2a
 80118cc:	d015      	beq.n	80118fa <_svfiprintf_r+0xea>
 80118ce:	9a07      	ldr	r2, [sp, #28]
 80118d0:	462f      	mov	r7, r5
 80118d2:	2000      	movs	r0, #0
 80118d4:	250a      	movs	r5, #10
 80118d6:	4639      	mov	r1, r7
 80118d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118dc:	3b30      	subs	r3, #48	; 0x30
 80118de:	2b09      	cmp	r3, #9
 80118e0:	d94d      	bls.n	801197e <_svfiprintf_r+0x16e>
 80118e2:	b1b8      	cbz	r0, 8011914 <_svfiprintf_r+0x104>
 80118e4:	e00f      	b.n	8011906 <_svfiprintf_r+0xf6>
 80118e6:	462f      	mov	r7, r5
 80118e8:	e7b8      	b.n	801185c <_svfiprintf_r+0x4c>
 80118ea:	4a40      	ldr	r2, [pc, #256]	; (80119ec <_svfiprintf_r+0x1dc>)
 80118ec:	1a80      	subs	r0, r0, r2
 80118ee:	fa0b f000 	lsl.w	r0, fp, r0
 80118f2:	4318      	orrs	r0, r3
 80118f4:	9004      	str	r0, [sp, #16]
 80118f6:	463d      	mov	r5, r7
 80118f8:	e7d3      	b.n	80118a2 <_svfiprintf_r+0x92>
 80118fa:	9a03      	ldr	r2, [sp, #12]
 80118fc:	1d11      	adds	r1, r2, #4
 80118fe:	6812      	ldr	r2, [r2, #0]
 8011900:	9103      	str	r1, [sp, #12]
 8011902:	2a00      	cmp	r2, #0
 8011904:	db01      	blt.n	801190a <_svfiprintf_r+0xfa>
 8011906:	9207      	str	r2, [sp, #28]
 8011908:	e004      	b.n	8011914 <_svfiprintf_r+0x104>
 801190a:	4252      	negs	r2, r2
 801190c:	f043 0302 	orr.w	r3, r3, #2
 8011910:	9207      	str	r2, [sp, #28]
 8011912:	9304      	str	r3, [sp, #16]
 8011914:	783b      	ldrb	r3, [r7, #0]
 8011916:	2b2e      	cmp	r3, #46	; 0x2e
 8011918:	d10c      	bne.n	8011934 <_svfiprintf_r+0x124>
 801191a:	787b      	ldrb	r3, [r7, #1]
 801191c:	2b2a      	cmp	r3, #42	; 0x2a
 801191e:	d133      	bne.n	8011988 <_svfiprintf_r+0x178>
 8011920:	9b03      	ldr	r3, [sp, #12]
 8011922:	1d1a      	adds	r2, r3, #4
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	9203      	str	r2, [sp, #12]
 8011928:	2b00      	cmp	r3, #0
 801192a:	bfb8      	it	lt
 801192c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011930:	3702      	adds	r7, #2
 8011932:	9305      	str	r3, [sp, #20]
 8011934:	4d2e      	ldr	r5, [pc, #184]	; (80119f0 <_svfiprintf_r+0x1e0>)
 8011936:	7839      	ldrb	r1, [r7, #0]
 8011938:	2203      	movs	r2, #3
 801193a:	4628      	mov	r0, r5
 801193c:	f7f6 fb88 	bl	8008050 <memchr>
 8011940:	b138      	cbz	r0, 8011952 <_svfiprintf_r+0x142>
 8011942:	2340      	movs	r3, #64	; 0x40
 8011944:	1b40      	subs	r0, r0, r5
 8011946:	fa03 f000 	lsl.w	r0, r3, r0
 801194a:	9b04      	ldr	r3, [sp, #16]
 801194c:	4303      	orrs	r3, r0
 801194e:	3701      	adds	r7, #1
 8011950:	9304      	str	r3, [sp, #16]
 8011952:	7839      	ldrb	r1, [r7, #0]
 8011954:	4827      	ldr	r0, [pc, #156]	; (80119f4 <_svfiprintf_r+0x1e4>)
 8011956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801195a:	2206      	movs	r2, #6
 801195c:	1c7e      	adds	r6, r7, #1
 801195e:	f7f6 fb77 	bl	8008050 <memchr>
 8011962:	2800      	cmp	r0, #0
 8011964:	d038      	beq.n	80119d8 <_svfiprintf_r+0x1c8>
 8011966:	4b24      	ldr	r3, [pc, #144]	; (80119f8 <_svfiprintf_r+0x1e8>)
 8011968:	bb13      	cbnz	r3, 80119b0 <_svfiprintf_r+0x1a0>
 801196a:	9b03      	ldr	r3, [sp, #12]
 801196c:	3307      	adds	r3, #7
 801196e:	f023 0307 	bic.w	r3, r3, #7
 8011972:	3308      	adds	r3, #8
 8011974:	9303      	str	r3, [sp, #12]
 8011976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011978:	444b      	add	r3, r9
 801197a:	9309      	str	r3, [sp, #36]	; 0x24
 801197c:	e76d      	b.n	801185a <_svfiprintf_r+0x4a>
 801197e:	fb05 3202 	mla	r2, r5, r2, r3
 8011982:	2001      	movs	r0, #1
 8011984:	460f      	mov	r7, r1
 8011986:	e7a6      	b.n	80118d6 <_svfiprintf_r+0xc6>
 8011988:	2300      	movs	r3, #0
 801198a:	3701      	adds	r7, #1
 801198c:	9305      	str	r3, [sp, #20]
 801198e:	4619      	mov	r1, r3
 8011990:	250a      	movs	r5, #10
 8011992:	4638      	mov	r0, r7
 8011994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011998:	3a30      	subs	r2, #48	; 0x30
 801199a:	2a09      	cmp	r2, #9
 801199c:	d903      	bls.n	80119a6 <_svfiprintf_r+0x196>
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d0c8      	beq.n	8011934 <_svfiprintf_r+0x124>
 80119a2:	9105      	str	r1, [sp, #20]
 80119a4:	e7c6      	b.n	8011934 <_svfiprintf_r+0x124>
 80119a6:	fb05 2101 	mla	r1, r5, r1, r2
 80119aa:	2301      	movs	r3, #1
 80119ac:	4607      	mov	r7, r0
 80119ae:	e7f0      	b.n	8011992 <_svfiprintf_r+0x182>
 80119b0:	ab03      	add	r3, sp, #12
 80119b2:	9300      	str	r3, [sp, #0]
 80119b4:	4622      	mov	r2, r4
 80119b6:	4b11      	ldr	r3, [pc, #68]	; (80119fc <_svfiprintf_r+0x1ec>)
 80119b8:	a904      	add	r1, sp, #16
 80119ba:	4640      	mov	r0, r8
 80119bc:	f7fc fa70 	bl	800dea0 <_printf_float>
 80119c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80119c4:	4681      	mov	r9, r0
 80119c6:	d1d6      	bne.n	8011976 <_svfiprintf_r+0x166>
 80119c8:	89a3      	ldrh	r3, [r4, #12]
 80119ca:	065b      	lsls	r3, r3, #25
 80119cc:	f53f af35 	bmi.w	801183a <_svfiprintf_r+0x2a>
 80119d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119d2:	b01d      	add	sp, #116	; 0x74
 80119d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d8:	ab03      	add	r3, sp, #12
 80119da:	9300      	str	r3, [sp, #0]
 80119dc:	4622      	mov	r2, r4
 80119de:	4b07      	ldr	r3, [pc, #28]	; (80119fc <_svfiprintf_r+0x1ec>)
 80119e0:	a904      	add	r1, sp, #16
 80119e2:	4640      	mov	r0, r8
 80119e4:	f7fc fd12 	bl	800e40c <_printf_i>
 80119e8:	e7ea      	b.n	80119c0 <_svfiprintf_r+0x1b0>
 80119ea:	bf00      	nop
 80119ec:	08011c84 	.word	0x08011c84
 80119f0:	08011c8a 	.word	0x08011c8a
 80119f4:	08011c8e 	.word	0x08011c8e
 80119f8:	0800dea1 	.word	0x0800dea1
 80119fc:	0801175b 	.word	0x0801175b

08011a00 <_putc_r>:
 8011a00:	b570      	push	{r4, r5, r6, lr}
 8011a02:	460d      	mov	r5, r1
 8011a04:	4614      	mov	r4, r2
 8011a06:	4606      	mov	r6, r0
 8011a08:	b118      	cbz	r0, 8011a12 <_putc_r+0x12>
 8011a0a:	6983      	ldr	r3, [r0, #24]
 8011a0c:	b90b      	cbnz	r3, 8011a12 <_putc_r+0x12>
 8011a0e:	f7fb fea5 	bl	800d75c <__sinit>
 8011a12:	4b13      	ldr	r3, [pc, #76]	; (8011a60 <_putc_r+0x60>)
 8011a14:	429c      	cmp	r4, r3
 8011a16:	d112      	bne.n	8011a3e <_putc_r+0x3e>
 8011a18:	6874      	ldr	r4, [r6, #4]
 8011a1a:	68a3      	ldr	r3, [r4, #8]
 8011a1c:	3b01      	subs	r3, #1
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	60a3      	str	r3, [r4, #8]
 8011a22:	da16      	bge.n	8011a52 <_putc_r+0x52>
 8011a24:	69a2      	ldr	r2, [r4, #24]
 8011a26:	4293      	cmp	r3, r2
 8011a28:	db02      	blt.n	8011a30 <_putc_r+0x30>
 8011a2a:	b2eb      	uxtb	r3, r5
 8011a2c:	2b0a      	cmp	r3, #10
 8011a2e:	d110      	bne.n	8011a52 <_putc_r+0x52>
 8011a30:	4622      	mov	r2, r4
 8011a32:	4629      	mov	r1, r5
 8011a34:	4630      	mov	r0, r6
 8011a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a3a:	f7fd bf93 	b.w	800f964 <__swbuf_r>
 8011a3e:	4b09      	ldr	r3, [pc, #36]	; (8011a64 <_putc_r+0x64>)
 8011a40:	429c      	cmp	r4, r3
 8011a42:	d101      	bne.n	8011a48 <_putc_r+0x48>
 8011a44:	68b4      	ldr	r4, [r6, #8]
 8011a46:	e7e8      	b.n	8011a1a <_putc_r+0x1a>
 8011a48:	4b07      	ldr	r3, [pc, #28]	; (8011a68 <_putc_r+0x68>)
 8011a4a:	429c      	cmp	r4, r3
 8011a4c:	bf08      	it	eq
 8011a4e:	68f4      	ldreq	r4, [r6, #12]
 8011a50:	e7e3      	b.n	8011a1a <_putc_r+0x1a>
 8011a52:	6823      	ldr	r3, [r4, #0]
 8011a54:	1c5a      	adds	r2, r3, #1
 8011a56:	6022      	str	r2, [r4, #0]
 8011a58:	701d      	strb	r5, [r3, #0]
 8011a5a:	b2e8      	uxtb	r0, r5
 8011a5c:	bd70      	pop	{r4, r5, r6, pc}
 8011a5e:	bf00      	nop
 8011a60:	08011c40 	.word	0x08011c40
 8011a64:	08011c60 	.word	0x08011c60
 8011a68:	08011c20 	.word	0x08011c20

08011a6c <_read_r>:
 8011a6c:	b538      	push	{r3, r4, r5, lr}
 8011a6e:	4c07      	ldr	r4, [pc, #28]	; (8011a8c <_read_r+0x20>)
 8011a70:	4605      	mov	r5, r0
 8011a72:	4608      	mov	r0, r1
 8011a74:	4611      	mov	r1, r2
 8011a76:	2200      	movs	r2, #0
 8011a78:	6022      	str	r2, [r4, #0]
 8011a7a:	461a      	mov	r2, r3
 8011a7c:	f7f8 fbfc 	bl	800a278 <_read>
 8011a80:	1c43      	adds	r3, r0, #1
 8011a82:	d102      	bne.n	8011a8a <_read_r+0x1e>
 8011a84:	6823      	ldr	r3, [r4, #0]
 8011a86:	b103      	cbz	r3, 8011a8a <_read_r+0x1e>
 8011a88:	602b      	str	r3, [r5, #0]
 8011a8a:	bd38      	pop	{r3, r4, r5, pc}
 8011a8c:	20001d20 	.word	0x20001d20

08011a90 <strncmp>:
 8011a90:	b510      	push	{r4, lr}
 8011a92:	b16a      	cbz	r2, 8011ab0 <strncmp+0x20>
 8011a94:	3901      	subs	r1, #1
 8011a96:	1884      	adds	r4, r0, r2
 8011a98:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011a9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011aa0:	4293      	cmp	r3, r2
 8011aa2:	d103      	bne.n	8011aac <strncmp+0x1c>
 8011aa4:	42a0      	cmp	r0, r4
 8011aa6:	d001      	beq.n	8011aac <strncmp+0x1c>
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d1f5      	bne.n	8011a98 <strncmp+0x8>
 8011aac:	1a98      	subs	r0, r3, r2
 8011aae:	bd10      	pop	{r4, pc}
 8011ab0:	4610      	mov	r0, r2
 8011ab2:	e7fc      	b.n	8011aae <strncmp+0x1e>

08011ab4 <__ascii_wctomb>:
 8011ab4:	b149      	cbz	r1, 8011aca <__ascii_wctomb+0x16>
 8011ab6:	2aff      	cmp	r2, #255	; 0xff
 8011ab8:	bf85      	ittet	hi
 8011aba:	238a      	movhi	r3, #138	; 0x8a
 8011abc:	6003      	strhi	r3, [r0, #0]
 8011abe:	700a      	strbls	r2, [r1, #0]
 8011ac0:	f04f 30ff 	movhi.w	r0, #4294967295
 8011ac4:	bf98      	it	ls
 8011ac6:	2001      	movls	r0, #1
 8011ac8:	4770      	bx	lr
 8011aca:	4608      	mov	r0, r1
 8011acc:	4770      	bx	lr

08011ace <_malloc_usable_size_r>:
 8011ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ad2:	1f18      	subs	r0, r3, #4
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	bfbc      	itt	lt
 8011ad8:	580b      	ldrlt	r3, [r1, r0]
 8011ada:	18c0      	addlt	r0, r0, r3
 8011adc:	4770      	bx	lr
	...

08011ae0 <_init>:
 8011ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ae2:	bf00      	nop
 8011ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ae6:	bc08      	pop	{r3}
 8011ae8:	469e      	mov	lr, r3
 8011aea:	4770      	bx	lr

08011aec <_fini>:
 8011aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aee:	bf00      	nop
 8011af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011af2:	bc08      	pop	{r3}
 8011af4:	469e      	mov	lr, r3
 8011af6:	4770      	bx	lr
