
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0001411c  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000008f0  0801c120  0801c120  0002c120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0801ca10  0801ca10  000301fc  2**0
                  CONTENTS
  6 .ARM          00000008  0801ca10  0801ca10  0002ca10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0801ca18  0801ca18  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0801ca18  0801ca18  0002ca18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0801ca1c  0801ca1c  0002ca1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001fc  20000000  0801ca20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000e8c  200001fc  0801cc1c  000301fc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20001088  0801cc1c  00031088  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000294fe  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00005642  00000000  00000000  0005972a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000018b0  00000000  00000000  0005ed70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001640  00000000  00000000  00060620  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00027c8c  00000000  00000000  00061c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001913a  00000000  00000000  000898ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000caa5b  00000000  00000000  000a2a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0016d481  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007a34  00000000  00000000  0016d4fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001fc 	.word	0x200001fc
 800801c:	00000000 	.word	0x00000000
 8008020:	0801c104 	.word	0x0801c104

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000200 	.word	0x20000200
 800803c:	0801c104 	.word	0x0801c104

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <InitPosition>:
//
//
//
//}
void InitPosition()
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
	Pos.X = 0;
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <InitPosition+0x34>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	701a      	strb	r2, [r3, #0]
	Pos.Y = 0;
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <InitPosition+0x34>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	705a      	strb	r2, [r3, #1]
	Pos.Car = north;
 8008e08:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <InitPosition+0x34>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	715a      	strb	r2, [r3, #5]
	Pos.Dir = front;
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <InitPosition+0x34>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	711a      	strb	r2, [r3, #4]
	Pos.Act = Wait;
 8008e14:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <InitPosition+0x34>)
 8008e16:	2204      	movs	r2, #4
 8008e18:	719a      	strb	r2, [r3, #6]
	Pos.WallSaf = wall_warn;//どっちにするか
 8008e1a:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <InitPosition+0x34>)
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	71da      	strb	r2, [r3, #7]

}
 8008e20:	bf00      	nop
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	20000000 	.word	0x20000000

08008e30 <WallWarn>:
void WallSafe()
{
	Pos.WallSaf = wall_safe;
}
void WallWarn()
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_warn;
 8008e34:	4b03      	ldr	r3, [pc, #12]	; (8008e44 <WallWarn+0x14>)
 8008e36:	2201      	movs	r2, #1
 8008e38:	71da      	strb	r2, [r3, #7]
}
 8008e3a:	bf00      	nop
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	20000000 	.word	0x20000000

08008e48 <WaitStopAndReset>:
//	KeepCounter[LEFT] = INITIAL_PULSE;
//	KeepCounter[RIGHT] = INITIAL_PULSE;
//}

void WaitStopAndReset()
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	af00      	add	r7, sp, #0
//	ControlWall();//ベイブレード対策
	do
	{

		//壁制御の更新
		TargetVelocity[BODY] = 0;
 8008e4c:	4b14      	ldr	r3, [pc, #80]	; (8008ea0 <WaitStopAndReset+0x58>)
 8008e4e:	f04f 0200 	mov.w	r2, #0
 8008e52:	609a      	str	r2, [r3, #8]
		Acceleration = 0;
 8008e54:	4b13      	ldr	r3, [pc, #76]	; (8008ea4 <WaitStopAndReset+0x5c>)
 8008e56:	f04f 0200 	mov.w	r2, #0
 8008e5a:	601a      	str	r2, [r3, #0]
		//PIDChangeFlag( D_, 0);
		TargetAngularV = 0;
 8008e5c:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <WaitStopAndReset+0x60>)
 8008e5e:	f04f 0200 	mov.w	r2, #0
 8008e62:	601a      	str	r2, [r3, #0]
		AngularAcceleration = 0;
 8008e64:	4b11      	ldr	r3, [pc, #68]	; (8008eac <WaitStopAndReset+0x64>)
 8008e66:	f04f 0200 	mov.w	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]
		//AngularV = 0;
		if(CurrentVelocity[LEFT] > 500)
 8008e6c:	4b10      	ldr	r3, [pc, #64]	; (8008eb0 <WaitStopAndReset+0x68>)
 8008e6e:	edd3 7a00 	vldr	s15, [r3]
 8008e72:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008eb4 <WaitStopAndReset+0x6c>
 8008e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e7e:	dd02      	ble.n	8008e86 <WaitStopAndReset+0x3e>
			printf("回転停止中\r\n");
 8008e80:	480d      	ldr	r0, [pc, #52]	; (8008eb8 <WaitStopAndReset+0x70>)
 8008e82:	f00f fe73 	bl	8018b6c <puts>

	}while(CurrentVelocity[BODY] != 0);
 8008e86:	4b0a      	ldr	r3, [pc, #40]	; (8008eb0 <WaitStopAndReset+0x68>)
 8008e88:	edd3 7a02 	vldr	s15, [r3, #8]
 8008e8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e94:	d1da      	bne.n	8008e4c <WaitStopAndReset+0x4>
	HAL_Delay(100);
 8008e96:	2064      	movs	r0, #100	; 0x64
 8008e98:	f009 f8ae 	bl	8011ff8 <HAL_Delay>
}
 8008e9c:	bf00      	nop
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20000ad0 	.word	0x20000ad0
 8008ea4:	2000022c 	.word	0x2000022c
 8008ea8:	20000ae0 	.word	0x20000ae0
 8008eac:	20000230 	.word	0x20000230
 8008eb0:	20000b10 	.word	0x20000b10
 8008eb4:	43fa0000 	.word	0x43fa0000
 8008eb8:	0801c120 	.word	0x0801c120
 8008ebc:	00000000 	.word	0x00000000

08008ec0 <Rotate>:
	//向いた方角を変える
	ChangeCardinal();
	//printf("回転終了\r\n");
}
void Rotate(float deg, float ang_v)
{
 8008ec0:	b590      	push	{r4, r7, lr}
 8008ec2:	b08d      	sub	sp, #52	; 0x34
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	ed87 0a01 	vstr	s0, [r7, #4]
 8008eca:	edc7 0a00 	vstr	s1, [r7]
//	Pos.Act = rotate;
//	WallWarn();
//	ControlWall(); //壁の読み間違いによる制御方式選択ミスで角加速から抜け出せないか、角度がリセットされている。
	TargetAngularV = 0;
 8008ece:	4bce      	ldr	r3, [pc, #824]	; (8009208 <Rotate+0x348>)
 8008ed0:	f04f 0200 	mov.w	r2, #0
 8008ed4:	601a      	str	r2, [r3, #0]
	//加速度が一定。角速度が増加。角速度を積分して角度。角速度の式を作り、角速度を積分して角度を求める等式を立てる。
	//Angle = インテグラル(ang_v(t))dt
	//v = v0+at	|	t=v/a	||		ang_v = ang_v0 + ang_accel *t		||	t = ang_v/ang_accel
	//x=0.5*v*v/a	|	a = 0.5*v*v*/x		||		θ=ang_v0*t+0.5*ang_v^2/ang_accel	||	ang_accel =
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)
	float accel_deg = deg*30/90;
 8008ed6:	edd7 7a01 	vldr	s15, [r7, #4]
 8008eda:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8008ede:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008ee2:	eddf 6aca 	vldr	s13, [pc, #808]	; 800920c <Rotate+0x34c>
 8008ee6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008eea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float const_deg = deg*30/90;
 8008eee:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ef2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8008ef6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008efa:	eddf 6ac4 	vldr	s13, [pc, #784]	; 800920c <Rotate+0x34c>
 8008efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f02:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float decel_deg = deg*30/90;
 8008f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f0a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8008f0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008f12:	eddf 6abe 	vldr	s13, [pc, #760]	; 800920c <Rotate+0x34c>
 8008f16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f1a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float angular_acceleration[3] = {
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f1e:	edd7 7a00 	vldr	s15, [r7]
 8008f22:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8009210 <Rotate+0x350>
 8008f26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008f2a:	edd7 7a00 	vldr	s15, [r7]
 8008f2e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008f32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008f36:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float angular_acceleration[3] = {
 8008f3e:	edc7 7a05 	vstr	s15, [r7, #20]
 8008f42:	f04f 0300 	mov.w	r3, #0
 8008f46:	61bb      	str	r3, [r7, #24]
			0,
			64*T1*ang_v*ang_v / (2*decel_deg)
 8008f48:	edd7 7a00 	vldr	s15, [r7]
 8008f4c:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8009210 <Rotate+0x350>
 8008f50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008f54:	edd7 7a00 	vldr	s15, [r7]
 8008f58:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008f5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f60:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float angular_acceleration[3] = {
 8008f68:	edc7 7a07 	vstr	s15, [r7, #28]
	};
	float move_angle[3] = {
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f6e:	f7ff fa23 	bl	80083b8 <__aeabi_f2d>
 8008f72:	a3a1      	add	r3, pc, #644	; (adr r3, 80091f8 <Rotate+0x338>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f7ff fa76 	bl	8008468 <__aeabi_dmul>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	460c      	mov	r4, r1
 8008f80:	4618      	mov	r0, r3
 8008f82:	4621      	mov	r1, r4
 8008f84:	f04f 0200 	mov.w	r2, #0
 8008f88:	4ba2      	ldr	r3, [pc, #648]	; (8009214 <Rotate+0x354>)
 8008f8a:	f7ff fb97 	bl	80086bc <__aeabi_ddiv>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	460c      	mov	r4, r1
 8008f92:	4618      	mov	r0, r3
 8008f94:	4621      	mov	r1, r4
 8008f96:	f7ff fd5f 	bl	8008a58 <__aeabi_d2f>
 8008f9a:	4603      	mov	r3, r0
	float move_angle[3] = {
 8008f9c:	60bb      	str	r3, [r7, #8]
			const_deg * M_PI/ 180,
 8008f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fa0:	f7ff fa0a 	bl	80083b8 <__aeabi_f2d>
 8008fa4:	a394      	add	r3, pc, #592	; (adr r3, 80091f8 <Rotate+0x338>)
 8008fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008faa:	f7ff fa5d 	bl	8008468 <__aeabi_dmul>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	f04f 0200 	mov.w	r2, #0
 8008fba:	4b96      	ldr	r3, [pc, #600]	; (8009214 <Rotate+0x354>)
 8008fbc:	f7ff fb7e 	bl	80086bc <__aeabi_ddiv>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	f7ff fd46 	bl	8008a58 <__aeabi_d2f>
 8008fcc:	4603      	mov	r3, r0
	float move_angle[3] = {
 8008fce:	60fb      	str	r3, [r7, #12]
			decel_deg * M_PI/ 180,
 8008fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fd2:	f7ff f9f1 	bl	80083b8 <__aeabi_f2d>
 8008fd6:	a388      	add	r3, pc, #544	; (adr r3, 80091f8 <Rotate+0x338>)
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f7ff fa44 	bl	8008468 <__aeabi_dmul>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	f04f 0200 	mov.w	r2, #0
 8008fec:	4b89      	ldr	r3, [pc, #548]	; (8009214 <Rotate+0x354>)
 8008fee:	f7ff fb65 	bl	80086bc <__aeabi_ddiv>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	f7ff fd2d 	bl	8008a58 <__aeabi_d2f>
 8008ffe:	4603      	mov	r3, r0
	float move_angle[3] = {
 8009000:	613b      	str	r3, [r7, #16]
		}

	}
#endif

	if( ang_v > 0)	//右回転
 8009002:	edd7 7a00 	vldr	s15, [r7]
 8009006:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800900a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800900e:	dd57      	ble.n	80090c0 <Rotate+0x200>
	{
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009010:	ed97 7a02 	vldr	s14, [r7, #8]
 8009014:	4b80      	ldr	r3, [pc, #512]	; (8009218 <Rotate+0x358>)
 8009016:	edd3 7a00 	vldr	s15, [r3]
 800901a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800901e:	4b7e      	ldr	r3, [pc, #504]	; (8009218 <Rotate+0x358>)
 8009020:	edc3 7a00 	vstr	s15, [r3]

		//ここのwhileが抜けないことがある
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009024:	e002      	b.n	800902c <Rotate+0x16c>
		{
			AngularAcceleration = angular_acceleration[0]; //ここまで
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	4a7c      	ldr	r2, [pc, #496]	; (800921c <Rotate+0x35c>)
 800902a:	6013      	str	r3, [r2, #0]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800902c:	4b7a      	ldr	r3, [pc, #488]	; (8009218 <Rotate+0x358>)
 800902e:	ed93 7a00 	vldr	s14, [r3]
 8009032:	4b7b      	ldr	r3, [pc, #492]	; (8009220 <Rotate+0x360>)
 8009034:	edd3 7a00 	vldr	s15, [r3]
 8009038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800903c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009040:	dcf1      	bgt.n	8009026 <Rotate+0x166>
		}
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009042:	ed97 7a03 	vldr	s14, [r7, #12]
 8009046:	4b74      	ldr	r3, [pc, #464]	; (8009218 <Rotate+0x358>)
 8009048:	edd3 7a00 	vldr	s15, [r3]
 800904c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009050:	4b71      	ldr	r3, [pc, #452]	; (8009218 <Rotate+0x358>)
 8009052:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle > Angle)
 8009056:	e002      	b.n	800905e <Rotate+0x19e>
		{
			AngularAcceleration = angular_acceleration[1];//0
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	4a70      	ldr	r2, [pc, #448]	; (800921c <Rotate+0x35c>)
 800905c:	6013      	str	r3, [r2, #0]
		while(TargetAngle > Angle)
 800905e:	4b6e      	ldr	r3, [pc, #440]	; (8009218 <Rotate+0x358>)
 8009060:	ed93 7a00 	vldr	s14, [r3]
 8009064:	4b6e      	ldr	r3, [pc, #440]	; (8009220 <Rotate+0x360>)
 8009066:	edd3 7a00 	vldr	s15, [r3]
 800906a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800906e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009072:	dcf1      	bgt.n	8009058 <Rotate+0x198>
		}
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009074:	ed97 7a04 	vldr	s14, [r7, #16]
 8009078:	4b67      	ldr	r3, [pc, #412]	; (8009218 <Rotate+0x358>)
 800907a:	edd3 7a00 	vldr	s15, [r3]
 800907e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009082:	4b65      	ldr	r3, [pc, #404]	; (8009218 <Rotate+0x358>)
 8009084:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle > Angle)
 8009088:	e00e      	b.n	80090a8 <Rotate+0x1e8>
		{
			 AngularAcceleration = -angular_acceleration[2];
 800908a:	edd7 7a07 	vldr	s15, [r7, #28]
 800908e:	eef1 7a67 	vneg.f32	s15, s15
 8009092:	4b62      	ldr	r3, [pc, #392]	; (800921c <Rotate+0x35c>)
 8009094:	edc3 7a00 	vstr	s15, [r3]
			 if( AngularV <= 0)
 8009098:	4b62      	ldr	r3, [pc, #392]	; (8009224 <Rotate+0x364>)
 800909a:	edd3 7a00 	vldr	s15, [r3]
 800909e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a6:	d96a      	bls.n	800917e <Rotate+0x2be>
		while(TargetAngle > Angle)
 80090a8:	4b5b      	ldr	r3, [pc, #364]	; (8009218 <Rotate+0x358>)
 80090aa:	ed93 7a00 	vldr	s14, [r3]
 80090ae:	4b5c      	ldr	r3, [pc, #368]	; (8009220 <Rotate+0x360>)
 80090b0:	edd3 7a00 	vldr	s15, [r3]
 80090b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090bc:	dce5      	bgt.n	800908a <Rotate+0x1ca>
 80090be:	e061      	b.n	8009184 <Rotate+0x2c4>
				 break;
			 }
		}

	}
	else if( ang_v < 0)
 80090c0:	edd7 7a00 	vldr	s15, [r7]
 80090c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090cc:	d55a      	bpl.n	8009184 <Rotate+0x2c4>
	{
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090ce:	4b52      	ldr	r3, [pc, #328]	; (8009218 <Rotate+0x358>)
 80090d0:	ed93 7a00 	vldr	s14, [r3]
 80090d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80090d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090dc:	4b4e      	ldr	r3, [pc, #312]	; (8009218 <Rotate+0x358>)
 80090de:	edc3 7a00 	vstr	s15, [r3]

		//ここのwhileが抜けないことがある
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 80090e2:	e006      	b.n	80090f2 <Rotate+0x232>
		{
			AngularAcceleration = -angular_acceleration[0]; //ここまで
 80090e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80090e8:	eef1 7a67 	vneg.f32	s15, s15
 80090ec:	4b4b      	ldr	r3, [pc, #300]	; (800921c <Rotate+0x35c>)
 80090ee:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 80090f2:	4b49      	ldr	r3, [pc, #292]	; (8009218 <Rotate+0x358>)
 80090f4:	ed93 7a00 	vldr	s14, [r3]
 80090f8:	4b49      	ldr	r3, [pc, #292]	; (8009220 <Rotate+0x360>)
 80090fa:	edd3 7a00 	vldr	s15, [r3]
 80090fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009106:	d4ed      	bmi.n	80090e4 <Rotate+0x224>
		}
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009108:	4b43      	ldr	r3, [pc, #268]	; (8009218 <Rotate+0x358>)
 800910a:	ed93 7a00 	vldr	s14, [r3]
 800910e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009116:	4b40      	ldr	r3, [pc, #256]	; (8009218 <Rotate+0x358>)
 8009118:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle < Angle)
 800911c:	e002      	b.n	8009124 <Rotate+0x264>
		{
			AngularAcceleration = angular_acceleration[1];//0
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	4a3e      	ldr	r2, [pc, #248]	; (800921c <Rotate+0x35c>)
 8009122:	6013      	str	r3, [r2, #0]
		while(TargetAngle < Angle)
 8009124:	4b3c      	ldr	r3, [pc, #240]	; (8009218 <Rotate+0x358>)
 8009126:	ed93 7a00 	vldr	s14, [r3]
 800912a:	4b3d      	ldr	r3, [pc, #244]	; (8009220 <Rotate+0x360>)
 800912c:	edd3 7a00 	vldr	s15, [r3]
 8009130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009138:	d4f1      	bmi.n	800911e <Rotate+0x25e>
		}
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800913a:	4b37      	ldr	r3, [pc, #220]	; (8009218 <Rotate+0x358>)
 800913c:	ed93 7a00 	vldr	s14, [r3]
 8009140:	edd7 7a04 	vldr	s15, [r7, #16]
 8009144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009148:	4b33      	ldr	r3, [pc, #204]	; (8009218 <Rotate+0x358>)
 800914a:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle < Angle)
 800914e:	e00a      	b.n	8009166 <Rotate+0x2a6>
		{
			 AngularAcceleration = angular_acceleration[2];
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	4a32      	ldr	r2, [pc, #200]	; (800921c <Rotate+0x35c>)
 8009154:	6013      	str	r3, [r2, #0]
			 if( AngularV >= 0)
 8009156:	4b33      	ldr	r3, [pc, #204]	; (8009224 <Rotate+0x364>)
 8009158:	edd3 7a00 	vldr	s15, [r3]
 800915c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009164:	da0d      	bge.n	8009182 <Rotate+0x2c2>
		while(TargetAngle < Angle)
 8009166:	4b2c      	ldr	r3, [pc, #176]	; (8009218 <Rotate+0x358>)
 8009168:	ed93 7a00 	vldr	s14, [r3]
 800916c:	4b2c      	ldr	r3, [pc, #176]	; (8009220 <Rotate+0x360>)
 800916e:	edd3 7a00 	vldr	s15, [r3]
 8009172:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800917a:	d4e9      	bmi.n	8009150 <Rotate+0x290>
 800917c:	e002      	b.n	8009184 <Rotate+0x2c4>
				 break;
 800917e:	bf00      	nop
 8009180:	e000      	b.n	8009184 <Rotate+0x2c4>
			 {
			 		break;
 8009182:	bf00      	nop
			 }
		}

	}
	AngularAcceleration = 0;
 8009184:	4b25      	ldr	r3, [pc, #148]	; (800921c <Rotate+0x35c>)
 8009186:	f04f 0200 	mov.w	r2, #0
 800918a:	601a      	str	r2, [r3, #0]
	//TargetAngularV = 0;
	//printf("加速後の角速度 : %f\r\n",AngularV);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",AngularAcceleration);

	WaitStopAndReset();
 800918c:	f7ff fe5c 	bl	8008e48 <WaitStopAndReset>
//	ControlWall();
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009190:	edd7 7a01 	vldr	s15, [r7, #4]
 8009194:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8009228 <Rotate+0x368>
 8009198:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800919c:	ee16 0a90 	vmov	r0, s13
 80091a0:	f7ff f90a 	bl	80083b8 <__aeabi_f2d>
 80091a4:	a316      	add	r3, pc, #88	; (adr r3, 8009200 <Rotate+0x340>)
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	f7ff f95d 	bl	8008468 <__aeabi_dmul>
 80091ae:	4603      	mov	r3, r0
 80091b0:	460c      	mov	r4, r1
 80091b2:	4618      	mov	r0, r3
 80091b4:	4621      	mov	r1, r4
 80091b6:	f7ff fc07 	bl	80089c8 <__aeabi_d2iz>
 80091ba:	4603      	mov	r3, r0
 80091bc:	623b      	str	r3, [r7, #32]
	if(ang_v < 0)
 80091be:	edd7 7a00 	vldr	s15, [r7]
 80091c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ca:	d531      	bpl.n	8009230 <Rotate+0x370>
	{
		KeepPulse[LEFT] -= target_pulse/2;
 80091cc:	4b17      	ldr	r3, [pc, #92]	; (800922c <Rotate+0x36c>)
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	0fd9      	lsrs	r1, r3, #31
 80091d4:	440b      	add	r3, r1
 80091d6:	105b      	asrs	r3, r3, #1
 80091d8:	425b      	negs	r3, r3
 80091da:	4413      	add	r3, r2
 80091dc:	4a13      	ldr	r2, [pc, #76]	; (800922c <Rotate+0x36c>)
 80091de:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 80091e0:	4b12      	ldr	r3, [pc, #72]	; (800922c <Rotate+0x36c>)
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	0fd9      	lsrs	r1, r3, #31
 80091e8:	440b      	add	r3, r1
 80091ea:	105b      	asrs	r3, r3, #1
 80091ec:	4413      	add	r3, r2
 80091ee:	4a0f      	ldr	r2, [pc, #60]	; (800922c <Rotate+0x36c>)
 80091f0:	6053      	str	r3, [r2, #4]
 80091f2:	e037      	b.n	8009264 <Rotate+0x3a4>
 80091f4:	f3af 8000 	nop.w
 80091f8:	54442d18 	.word	0x54442d18
 80091fc:	400921fb 	.word	0x400921fb
 8009200:	cb326649 	.word	0xcb326649
 8009204:	40fa15d6 	.word	0x40fa15d6
 8009208:	20000ae0 	.word	0x20000ae0
 800920c:	42b40000 	.word	0x42b40000
 8009210:	3d83126f 	.word	0x3d83126f
 8009214:	40668000 	.word	0x40668000
 8009218:	20000afc 	.word	0x20000afc
 800921c:	20000230 	.word	0x20000230
 8009220:	20000228 	.word	0x20000228
 8009224:	20000224 	.word	0x20000224
 8009228:	43b40000 	.word	0x43b40000
 800922c:	20000b38 	.word	0x20000b38
	}
	else 	if(ang_v > 0)
 8009230:	edd7 7a00 	vldr	s15, [r7]
 8009234:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800923c:	dd12      	ble.n	8009264 <Rotate+0x3a4>
	{
		KeepPulse[LEFT] += target_pulse/2;
 800923e:	4b0d      	ldr	r3, [pc, #52]	; (8009274 <Rotate+0x3b4>)
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	6a3b      	ldr	r3, [r7, #32]
 8009244:	0fd9      	lsrs	r1, r3, #31
 8009246:	440b      	add	r3, r1
 8009248:	105b      	asrs	r3, r3, #1
 800924a:	4413      	add	r3, r2
 800924c:	4a09      	ldr	r2, [pc, #36]	; (8009274 <Rotate+0x3b4>)
 800924e:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 8009250:	4b08      	ldr	r3, [pc, #32]	; (8009274 <Rotate+0x3b4>)
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	6a3b      	ldr	r3, [r7, #32]
 8009256:	0fd9      	lsrs	r1, r3, #31
 8009258:	440b      	add	r3, r1
 800925a:	105b      	asrs	r3, r3, #1
 800925c:	425b      	negs	r3, r3
 800925e:	4413      	add	r3, r2
 8009260:	4a04      	ldr	r2, [pc, #16]	; (8009274 <Rotate+0x3b4>)
 8009262:	6053      	str	r3, [r2, #4]
	}
	KeepPulse[BODY] = KeepPulse[BODY];
 8009264:	4b03      	ldr	r3, [pc, #12]	; (8009274 <Rotate+0x3b4>)
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	4a02      	ldr	r2, [pc, #8]	; (8009274 <Rotate+0x3b4>)
 800926a:	6093      	str	r3, [r2, #8]

	//向いた方角を変える
//	ChangeCardinal();
	//printf("回転終了\r\n");
}
 800926c:	bf00      	nop
 800926e:	3734      	adds	r7, #52	; 0x34
 8009270:	46bd      	mov	sp, r7
 8009272:	bd90      	pop	{r4, r7, pc}
 8009274:	20000b38 	.word	0x20000b38

08009278 <getFrontWall>:
{

}

int getFrontWall()
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0

	switch(Pos.Car)//方角に合わせて、
 800927c:	4b30      	ldr	r3, [pc, #192]	; (8009340 <getFrontWall+0xc8>)
 800927e:	795b      	ldrb	r3, [r3, #5]
 8009280:	2b06      	cmp	r3, #6
 8009282:	d855      	bhi.n	8009330 <getFrontWall+0xb8>
 8009284:	a201      	add	r2, pc, #4	; (adr r2, 800928c <getFrontWall+0x14>)
 8009286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928a:	bf00      	nop
 800928c:	080092a9 	.word	0x080092a9
 8009290:	08009331 	.word	0x08009331
 8009294:	080092cb 	.word	0x080092cb
 8009298:	08009331 	.word	0x08009331
 800929c:	080092ed 	.word	0x080092ed
 80092a0:	08009331 	.word	0x08009331
 80092a4:	0800930f 	.word	0x0800930f
	{

	case north:

	return Wall[Pos.X][Pos.Y].north;
 80092a8:	4b25      	ldr	r3, [pc, #148]	; (8009340 <getFrontWall+0xc8>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	4619      	mov	r1, r3
 80092ae:	4b24      	ldr	r3, [pc, #144]	; (8009340 <getFrontWall+0xc8>)
 80092b0:	785b      	ldrb	r3, [r3, #1]
 80092b2:	4618      	mov	r0, r3
 80092b4:	4a23      	ldr	r2, [pc, #140]	; (8009344 <getFrontWall+0xcc>)
 80092b6:	460b      	mov	r3, r1
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	440b      	add	r3, r1
 80092bc:	4403      	add	r3, r0
 80092be:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80092c2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	e034      	b.n	8009334 <getFrontWall+0xbc>

	break;

	case east:

	return Wall[Pos.X][Pos.Y].east;
 80092ca:	4b1d      	ldr	r3, [pc, #116]	; (8009340 <getFrontWall+0xc8>)
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	4619      	mov	r1, r3
 80092d0:	4b1b      	ldr	r3, [pc, #108]	; (8009340 <getFrontWall+0xc8>)
 80092d2:	785b      	ldrb	r3, [r3, #1]
 80092d4:	4618      	mov	r0, r3
 80092d6:	4a1b      	ldr	r2, [pc, #108]	; (8009344 <getFrontWall+0xcc>)
 80092d8:	460b      	mov	r3, r1
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	440b      	add	r3, r1
 80092de:	4403      	add	r3, r0
 80092e0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80092e4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	e023      	b.n	8009334 <getFrontWall+0xbc>

	break;

	case south:

	return Wall[Pos.X][Pos.Y].south;
 80092ec:	4b14      	ldr	r3, [pc, #80]	; (8009340 <getFrontWall+0xc8>)
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	4619      	mov	r1, r3
 80092f2:	4b13      	ldr	r3, [pc, #76]	; (8009340 <getFrontWall+0xc8>)
 80092f4:	785b      	ldrb	r3, [r3, #1]
 80092f6:	4618      	mov	r0, r3
 80092f8:	4a12      	ldr	r2, [pc, #72]	; (8009344 <getFrontWall+0xcc>)
 80092fa:	460b      	mov	r3, r1
 80092fc:	00db      	lsls	r3, r3, #3
 80092fe:	440b      	add	r3, r1
 8009300:	4403      	add	r3, r0
 8009302:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009306:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800930a:	b2db      	uxtb	r3, r3
 800930c:	e012      	b.n	8009334 <getFrontWall+0xbc>

	break;

	case west:

	return Wall[Pos.X][Pos.Y].west;
 800930e:	4b0c      	ldr	r3, [pc, #48]	; (8009340 <getFrontWall+0xc8>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	4619      	mov	r1, r3
 8009314:	4b0a      	ldr	r3, [pc, #40]	; (8009340 <getFrontWall+0xc8>)
 8009316:	785b      	ldrb	r3, [r3, #1]
 8009318:	4618      	mov	r0, r3
 800931a:	4a0a      	ldr	r2, [pc, #40]	; (8009344 <getFrontWall+0xcc>)
 800931c:	460b      	mov	r3, r1
 800931e:	00db      	lsls	r3, r3, #3
 8009320:	440b      	add	r3, r1
 8009322:	4403      	add	r3, r0
 8009324:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009328:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800932c:	b2db      	uxtb	r3, r3
 800932e:	e001      	b.n	8009334 <getFrontWall+0xbc>

	break;

	default:
		return 999;
 8009330:	f240 33e7 	movw	r3, #999	; 0x3e7
	break;

	}

}
 8009334:	4618      	mov	r0, r3
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	20000000 	.word	0x20000000
 8009344:	20000ccc 	.word	0x20000ccc

08009348 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009348:	b5b0      	push	{r4, r5, r7, lr}
 800934a:	b08a      	sub	sp, #40	; 0x28
 800934c:	af00      	add	r7, sp, #0
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 800934e:	4ba8      	ldr	r3, [pc, #672]	; (80095f0 <SlalomRight+0x2a8>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = Sla.Pre;         //スラローム前距離
 8009354:	4ba7      	ldr	r3, [pc, #668]	; (80095f4 <SlalomRight+0x2ac>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	623b      	str	r3, [r7, #32]
	float fol = Sla.Fol;         //スラローム後距離
 800935a:	4ba6      	ldr	r3, [pc, #664]	; (80095f4 <SlalomRight+0x2ac>)
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	61fb      	str	r3, [r7, #28]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 8009360:	4ba4      	ldr	r3, [pc, #656]	; (80095f4 <SlalomRight+0x2ac>)
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	61bb      	str	r3, [r7, #24]
	//float alalpha_turn = Sla.Alalpha;
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009366:	4ba3      	ldr	r3, [pc, #652]	; (80095f4 <SlalomRight+0x2ac>)
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff f824 	bl	80083b8 <__aeabi_f2d>
 8009370:	a39b      	add	r3, pc, #620	; (adr r3, 80095e0 <SlalomRight+0x298>)
 8009372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009376:	f7ff f877 	bl	8008468 <__aeabi_dmul>
 800937a:	4603      	mov	r3, r0
 800937c:	460c      	mov	r4, r1
 800937e:	4618      	mov	r0, r3
 8009380:	4621      	mov	r1, r4
 8009382:	f04f 0200 	mov.w	r2, #0
 8009386:	4b9c      	ldr	r3, [pc, #624]	; (80095f8 <SlalomRight+0x2b0>)
 8009388:	f7ff f998 	bl	80086bc <__aeabi_ddiv>
 800938c:	4603      	mov	r3, r0
 800938e:	460c      	mov	r4, r1
 8009390:	4618      	mov	r0, r3
 8009392:	4621      	mov	r1, r4
 8009394:	f7ff fb60 	bl	8008a58 <__aeabi_d2f>
 8009398:	4603      	mov	r3, r0
 800939a:	617b      	str	r3, [r7, #20]
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 800939c:	4b95      	ldr	r3, [pc, #596]	; (80095f4 <SlalomRight+0x2ac>)
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7ff f809 	bl	80083b8 <__aeabi_f2d>
 80093a6:	a38e      	add	r3, pc, #568	; (adr r3, 80095e0 <SlalomRight+0x298>)
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	f7ff f85c 	bl	8008468 <__aeabi_dmul>
 80093b0:	4603      	mov	r3, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	4618      	mov	r0, r3
 80093b6:	4621      	mov	r1, r4
 80093b8:	f04f 0200 	mov.w	r2, #0
 80093bc:	4b8e      	ldr	r3, [pc, #568]	; (80095f8 <SlalomRight+0x2b0>)
 80093be:	f7ff f97d 	bl	80086bc <__aeabi_ddiv>
 80093c2:	4603      	mov	r3, r0
 80093c4:	460c      	mov	r4, r1
 80093c6:	4618      	mov	r0, r3
 80093c8:	4621      	mov	r1, r4
 80093ca:	f7ff fb45 	bl	8008a58 <__aeabi_d2f>
 80093ce:	4603      	mov	r3, r0
 80093d0:	613b      	str	r3, [r7, #16]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 80093d2:	4b88      	ldr	r3, [pc, #544]	; (80095f4 <SlalomRight+0x2ac>)
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fe ffee 	bl	80083b8 <__aeabi_f2d>
 80093dc:	a380      	add	r3, pc, #512	; (adr r3, 80095e0 <SlalomRight+0x298>)
 80093de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e2:	f7ff f841 	bl	8008468 <__aeabi_dmul>
 80093e6:	4603      	mov	r3, r0
 80093e8:	460c      	mov	r4, r1
 80093ea:	4618      	mov	r0, r3
 80093ec:	4621      	mov	r1, r4
 80093ee:	f04f 0200 	mov.w	r2, #0
 80093f2:	4b81      	ldr	r3, [pc, #516]	; (80095f8 <SlalomRight+0x2b0>)
 80093f4:	f7ff f962 	bl	80086bc <__aeabi_ddiv>
 80093f8:	4603      	mov	r3, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	4618      	mov	r0, r3
 80093fe:	4621      	mov	r1, r4
 8009400:	f7ff fb2a 	bl	8008a58 <__aeabi_d2f>
 8009404:	4603      	mov	r3, r0
 8009406:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
 8009408:	4b7c      	ldr	r3, [pc, #496]	; (80095fc <SlalomRight+0x2b4>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	60bb      	str	r3, [r7, #8]
	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 800940e:	4b7c      	ldr	r3, [pc, #496]	; (8009600 <SlalomRight+0x2b8>)
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	4b7b      	ldr	r3, [pc, #492]	; (8009600 <SlalomRight+0x2b8>)
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	4413      	add	r3, r2
 8009418:	607b      	str	r3, [r7, #4]
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 800941a:	f7ff ff2d 	bl	8009278 <getFrontWall>
 800941e:	4603      	mov	r3, r0
 8009420:	2b01      	cmp	r3, #1
 8009422:	d133      	bne.n	800948c <SlalomRight+0x144>
	{
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009424:	e00e      	b.n	8009444 <SlalomRight+0xfc>
		{
			TargetAngularV = 0;
 8009426:	4b77      	ldr	r3, [pc, #476]	; (8009604 <SlalomRight+0x2bc>)
 8009428:	f04f 0200 	mov.w	r2, #0
 800942c:	601a      	str	r2, [r3, #0]
			AngularLeapsity = 0;
 800942e:	4b76      	ldr	r3, [pc, #472]	; (8009608 <SlalomRight+0x2c0>)
 8009430:	f04f 0200 	mov.w	r2, #0
 8009434:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009436:	4b75      	ldr	r3, [pc, #468]	; (800960c <SlalomRight+0x2c4>)
 8009438:	f04f 0200 	mov.w	r2, #0
 800943c:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 800943e:	4a74      	ldr	r2, [pc, #464]	; (8009610 <SlalomRight+0x2c8>)
 8009440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009442:	6093      	str	r3, [r2, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009444:	4b73      	ldr	r3, [pc, #460]	; (8009614 <SlalomRight+0x2cc>)
 8009446:	edd3 7a00 	vldr	s15, [r3]
 800944a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009618 <SlalomRight+0x2d0>
 800944e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009456:	d4e6      	bmi.n	8009426 <SlalomRight+0xde>
 8009458:	4b6e      	ldr	r3, [pc, #440]	; (8009614 <SlalomRight+0x2cc>)
 800945a:	edd3 7a03 	vldr	s15, [r3, #12]
 800945e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800961c <SlalomRight+0x2d4>
 8009462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800946a:	d4dc      	bmi.n	8009426 <SlalomRight+0xde>
 800946c:	e03b      	b.n	80094e6 <SlalomRight+0x19e>
	else//なければ
	{
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 800946e:	4b65      	ldr	r3, [pc, #404]	; (8009604 <SlalomRight+0x2bc>)
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	601a      	str	r2, [r3, #0]
				AngularLeapsity = 0;
 8009476:	4b64      	ldr	r3, [pc, #400]	; (8009608 <SlalomRight+0x2c0>)
 8009478:	f04f 0200 	mov.w	r2, #0
 800947c:	601a      	str	r2, [r3, #0]
				AngularAcceleration = 0;
 800947e:	4b63      	ldr	r3, [pc, #396]	; (800960c <SlalomRight+0x2c4>)
 8009480:	f04f 0200 	mov.w	r2, #0
 8009484:	601a      	str	r2, [r3, #0]
				TargetVelocity[BODY] = v_turn;
 8009486:	4a62      	ldr	r2, [pc, #392]	; (8009610 <SlalomRight+0x2c8>)
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	6093      	str	r3, [r2, #8]
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7fe ff81 	bl	8008394 <__aeabi_i2d>
 8009492:	4604      	mov	r4, r0
 8009494:	460d      	mov	r5, r1
 8009496:	edd7 7a08 	vldr	s15, [r7, #32]
 800949a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800949e:	ee17 0a90 	vmov	r0, s15
 80094a2:	f7fe ff89 	bl	80083b8 <__aeabi_f2d>
 80094a6:	a350      	add	r3, pc, #320	; (adr r3, 80095e8 <SlalomRight+0x2a0>)
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	f7ff f906 	bl	80086bc <__aeabi_ddiv>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	4620      	mov	r0, r4
 80094b6:	4629      	mov	r1, r5
 80094b8:	f7fe fe20 	bl	80080fc <__adddf3>
 80094bc:	4603      	mov	r3, r0
 80094be:	460c      	mov	r4, r1
 80094c0:	4625      	mov	r5, r4
 80094c2:	461c      	mov	r4, r3
 80094c4:	4b4e      	ldr	r3, [pc, #312]	; (8009600 <SlalomRight+0x2b8>)
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	4b4d      	ldr	r3, [pc, #308]	; (8009600 <SlalomRight+0x2b8>)
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	4413      	add	r3, r2
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fe ff60 	bl	8008394 <__aeabi_i2d>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4620      	mov	r0, r4
 80094da:	4629      	mov	r1, r5
 80094dc:	f7ff fa54 	bl	8008988 <__aeabi_dcmpgt>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1c3      	bne.n	800946e <SlalomRight+0x126>

				////printf("直進1\r\n");
		}
	}
	now_angv = AngularV;
 80094e6:	4b45      	ldr	r3, [pc, #276]	; (80095fc <SlalomRight+0x2b4>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	60bb      	str	r3, [r7, #8]

	float start_angle = Angle;
 80094ec:	4b4c      	ldr	r3, [pc, #304]	; (8009620 <SlalomRight+0x2d8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	603b      	str	r3, [r7, #0]

	while(start_angle + ang1 > Angle)
 80094f2:	e005      	b.n	8009500 <SlalomRight+0x1b8>

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
		//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 80094f4:	4a45      	ldr	r2, [pc, #276]	; (800960c <SlalomRight+0x2c4>)
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 80094fa:	4a45      	ldr	r2, [pc, #276]	; (8009610 <SlalomRight+0x2c8>)
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	6093      	str	r3, [r2, #8]
	while(start_angle + ang1 > Angle)
 8009500:	ed97 7a00 	vldr	s14, [r7]
 8009504:	edd7 7a05 	vldr	s15, [r7, #20]
 8009508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800950c:	4b44      	ldr	r3, [pc, #272]	; (8009620 <SlalomRight+0x2d8>)
 800950e:	edd3 7a00 	vldr	s15, [r3]
 8009512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951a:	dceb      	bgt.n	80094f4 <SlalomRight+0x1ac>
			}
#endif

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 800951c:	4b3b      	ldr	r3, [pc, #236]	; (800960c <SlalomRight+0x2c4>)
 800951e:	f04f 0200 	mov.w	r2, #0
 8009522:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009524:	4b38      	ldr	r3, [pc, #224]	; (8009608 <SlalomRight+0x2c0>)
 8009526:	f04f 0200 	mov.w	r2, #0
 800952a:	601a      	str	r2, [r3, #0]
	now_angv = AngularV;
 800952c:	4b33      	ldr	r3, [pc, #204]	; (80095fc <SlalomRight+0x2b4>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60bb      	str	r3, [r7, #8]
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 8009532:	e006      	b.n	8009542 <SlalomRight+0x1fa>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009534:	4b33      	ldr	r3, [pc, #204]	; (8009604 <SlalomRight+0x2bc>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a32      	ldr	r2, [pc, #200]	; (8009604 <SlalomRight+0x2bc>)
 800953a:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 800953c:	4a34      	ldr	r2, [pc, #208]	; (8009610 <SlalomRight+0x2c8>)
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	6093      	str	r3, [r2, #8]
	while(start_angle + ang2 > Angle)
 8009542:	ed97 7a00 	vldr	s14, [r7]
 8009546:	edd7 7a04 	vldr	s15, [r7, #16]
 800954a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800954e:	4b34      	ldr	r3, [pc, #208]	; (8009620 <SlalomRight+0x2d8>)
 8009550:	edd3 7a00 	vldr	s15, [r3]
 8009554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800955c:	dcea      	bgt.n	8009534 <SlalomRight+0x1ec>

			}
#endif
	}

	now_angv = AngularV;
 800955e:	4b27      	ldr	r3, [pc, #156]	; (80095fc <SlalomRight+0x2b4>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	60bb      	str	r3, [r7, #8]
	while( start_angle + ang3 > Angle)
 8009564:	e016      	b.n	8009594 <SlalomRight+0x24c>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 8009566:	edd7 7a06 	vldr	s15, [r7, #24]
 800956a:	eef1 7a67 	vneg.f32	s15, s15
 800956e:	4b27      	ldr	r3, [pc, #156]	; (800960c <SlalomRight+0x2c4>)
 8009570:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV < 0)
 8009574:	4b23      	ldr	r3, [pc, #140]	; (8009604 <SlalomRight+0x2bc>)
 8009576:	edd3 7a00 	vldr	s15, [r3]
 800957a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800957e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009582:	d504      	bpl.n	800958e <SlalomRight+0x246>
			{
				TargetAngularV = 0;
 8009584:	4b1f      	ldr	r3, [pc, #124]	; (8009604 <SlalomRight+0x2bc>)
 8009586:	f04f 0200 	mov.w	r2, #0
 800958a:	601a      	str	r2, [r3, #0]
				break;
 800958c:	e010      	b.n	80095b0 <SlalomRight+0x268>
			}
			TargetVelocity[BODY] = v_turn;
 800958e:	4a20      	ldr	r2, [pc, #128]	; (8009610 <SlalomRight+0x2c8>)
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	6093      	str	r3, [r2, #8]
	while( start_angle + ang3 > Angle)
 8009594:	ed97 7a00 	vldr	s14, [r7]
 8009598:	edd7 7a03 	vldr	s15, [r7, #12]
 800959c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095a0:	4b1f      	ldr	r3, [pc, #124]	; (8009620 <SlalomRight+0x2d8>)
 80095a2:	edd3 7a00 	vldr	s15, [r3]
 80095a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ae:	dcda      	bgt.n	8009566 <SlalomRight+0x21e>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 80095b0:	4b16      	ldr	r3, [pc, #88]	; (800960c <SlalomRight+0x2c4>)
 80095b2:	f04f 0200 	mov.w	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 80095b8:	4b13      	ldr	r3, [pc, #76]	; (8009608 <SlalomRight+0x2c0>)
 80095ba:	f04f 0200 	mov.w	r2, #0
 80095be:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 80095c0:	4b10      	ldr	r3, [pc, #64]	; (8009604 <SlalomRight+0x2bc>)
 80095c2:	f04f 0200 	mov.w	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 80095c8:	4b16      	ldr	r3, [pc, #88]	; (8009624 <SlalomRight+0x2dc>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a16      	ldr	r2, [pc, #88]	; (8009628 <SlalomRight+0x2e0>)
 80095ce:	6013      	str	r3, [r2, #0]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 80095d0:	4b0b      	ldr	r3, [pc, #44]	; (8009600 <SlalomRight+0x2b8>)
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <SlalomRight+0x2b8>)
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	4413      	add	r3, r2
 80095da:	607b      	str	r3, [r7, #4]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 80095dc:	e03b      	b.n	8009656 <SlalomRight+0x30e>
 80095de:	bf00      	nop
 80095e0:	54442d18 	.word	0x54442d18
 80095e4:	400921fb 	.word	0x400921fb
 80095e8:	23ca2666 	.word	0x23ca2666
 80095ec:	3f509268 	.word	0x3f509268
 80095f0:	20000bf8 	.word	0x20000bf8
 80095f4:	20000b1c 	.word	0x20000b1c
 80095f8:	40668000 	.word	0x40668000
 80095fc:	20000224 	.word	0x20000224
 8009600:	20000b04 	.word	0x20000b04
 8009604:	20000ae0 	.word	0x20000ae0
 8009608:	20000234 	.word	0x20000234
 800960c:	20000230 	.word	0x20000230
 8009610:	20000ad0 	.word	0x20000ad0
 8009614:	20000b44 	.word	0x20000b44
 8009618:	43480000 	.word	0x43480000
 800961c:	437a0000 	.word	0x437a0000
 8009620:	20000228 	.word	0x20000228
 8009624:	20000d70 	.word	0x20000d70
 8009628:	20000d74 	.word	0x20000d74
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 800962c:	4b32      	ldr	r3, [pc, #200]	; (80096f8 <SlalomRight+0x3b0>)
 800962e:	f04f 0200 	mov.w	r2, #0
 8009632:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009634:	4a31      	ldr	r2, [pc, #196]	; (80096fc <SlalomRight+0x3b4>)
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");

			//後半の直線に入ったら計算する。
			if(Calc == 0)
 800963a:	4b31      	ldr	r3, [pc, #196]	; (8009700 <SlalomRight+0x3b8>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d109      	bne.n	8009656 <SlalomRight+0x30e>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009642:	f001 fb7f 	bl	800ad44 <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009646:	2201      	movs	r2, #1
 8009648:	2107      	movs	r1, #7
 800964a:	2007      	movs	r0, #7
 800964c:	f001 fd0a 	bl	800b064 <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 8009650:	4b2b      	ldr	r3, [pc, #172]	; (8009700 <SlalomRight+0x3b8>)
 8009652:	2201      	movs	r2, #1
 8009654:	601a      	str	r2, [r3, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7fe fe9c 	bl	8008394 <__aeabi_i2d>
 800965c:	4604      	mov	r4, r0
 800965e:	460d      	mov	r5, r1
 8009660:	edd7 7a07 	vldr	s15, [r7, #28]
 8009664:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009668:	ee17 0a90 	vmov	r0, s15
 800966c:	f7fe fea4 	bl	80083b8 <__aeabi_f2d>
 8009670:	a31d      	add	r3, pc, #116	; (adr r3, 80096e8 <SlalomRight+0x3a0>)
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	f7ff f821 	bl	80086bc <__aeabi_ddiv>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	4620      	mov	r0, r4
 8009680:	4629      	mov	r1, r5
 8009682:	f7fe fd3b 	bl	80080fc <__adddf3>
 8009686:	4603      	mov	r3, r0
 8009688:	460c      	mov	r4, r1
 800968a:	4625      	mov	r5, r4
 800968c:	461c      	mov	r4, r3
 800968e:	4b1d      	ldr	r3, [pc, #116]	; (8009704 <SlalomRight+0x3bc>)
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	4b1c      	ldr	r3, [pc, #112]	; (8009704 <SlalomRight+0x3bc>)
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	4413      	add	r3, r2
 8009698:	4618      	mov	r0, r3
 800969a:	f7fe fe7b 	bl	8008394 <__aeabi_i2d>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4620      	mov	r0, r4
 80096a4:	4629      	mov	r1, r5
 80096a6:	f7ff f96f 	bl	8008988 <__aeabi_dcmpgt>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1bd      	bne.n	800962c <SlalomRight+0x2e4>
			}
	}
	TargetAngle += 90*M_PI/180;
 80096b0:	4b15      	ldr	r3, [pc, #84]	; (8009708 <SlalomRight+0x3c0>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fe fe7f 	bl	80083b8 <__aeabi_f2d>
 80096ba:	a30d      	add	r3, pc, #52	; (adr r3, 80096f0 <SlalomRight+0x3a8>)
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	f7fe fd1c 	bl	80080fc <__adddf3>
 80096c4:	4603      	mov	r3, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	4618      	mov	r0, r3
 80096ca:	4621      	mov	r1, r4
 80096cc:	f7ff f9c4 	bl	8008a58 <__aeabi_d2f>
 80096d0:	4602      	mov	r2, r0
 80096d2:	4b0d      	ldr	r3, [pc, #52]	; (8009708 <SlalomRight+0x3c0>)
 80096d4:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 80096d6:	4b0b      	ldr	r3, [pc, #44]	; (8009704 <SlalomRight+0x3bc>)
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	4a0c      	ldr	r2, [pc, #48]	; (800970c <SlalomRight+0x3c4>)
 80096dc:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 80096de:	bf00      	nop
 80096e0:	3728      	adds	r7, #40	; 0x28
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bdb0      	pop	{r4, r5, r7, pc}
 80096e6:	bf00      	nop
 80096e8:	23ca2666 	.word	0x23ca2666
 80096ec:	3f509268 	.word	0x3f509268
 80096f0:	54442d18 	.word	0x54442d18
 80096f4:	3ff921fb 	.word	0x3ff921fb
 80096f8:	20000ae0 	.word	0x20000ae0
 80096fc:	20000ad0 	.word	0x20000ad0
 8009700:	20000d74 	.word	0x20000d74
 8009704:	20000b04 	.word	0x20000b04
 8009708:	20000afc 	.word	0x20000afc
 800970c:	20000b38 	.word	0x20000b38

08009710 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009710:	b5b0      	push	{r4, r5, r7, lr}
 8009712:	b08a      	sub	sp, #40	; 0x28
 8009714:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 8009716:	4ba4      	ldr	r3, [pc, #656]	; (80099a8 <SlalomLeft+0x298>)
 8009718:	2202      	movs	r2, #2
 800971a:	719a      	strb	r2, [r3, #6]
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 800971c:	4ba3      	ldr	r3, [pc, #652]	; (80099ac <SlalomLeft+0x29c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = Sla.Pre;         //スラローム前距離
 8009722:	4ba3      	ldr	r3, [pc, #652]	; (80099b0 <SlalomLeft+0x2a0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	623b      	str	r3, [r7, #32]
	float fol = Sla.Fol;         //スラローム後距離
 8009728:	4ba1      	ldr	r3, [pc, #644]	; (80099b0 <SlalomLeft+0x2a0>)
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	61fb      	str	r3, [r7, #28]
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 800972e:	4ba0      	ldr	r3, [pc, #640]	; (80099b0 <SlalomLeft+0x2a0>)
 8009730:	edd3 7a02 	vldr	s15, [r3, #8]
 8009734:	eef1 7a67 	vneg.f32	s15, s15
 8009738:	edc7 7a06 	vstr	s15, [r7, #24]
	//float alalpha_turn = -Sla.Alalpha;
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 800973c:	4b9c      	ldr	r3, [pc, #624]	; (80099b0 <SlalomLeft+0x2a0>)
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe fe39 	bl	80083b8 <__aeabi_f2d>
 8009746:	a394      	add	r3, pc, #592	; (adr r3, 8009998 <SlalomLeft+0x288>)
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	f7fe fe8c 	bl	8008468 <__aeabi_dmul>
 8009750:	4603      	mov	r3, r0
 8009752:	460c      	mov	r4, r1
 8009754:	4618      	mov	r0, r3
 8009756:	4621      	mov	r1, r4
 8009758:	f04f 0200 	mov.w	r2, #0
 800975c:	4b95      	ldr	r3, [pc, #596]	; (80099b4 <SlalomLeft+0x2a4>)
 800975e:	f7fe ffad 	bl	80086bc <__aeabi_ddiv>
 8009762:	4603      	mov	r3, r0
 8009764:	460c      	mov	r4, r1
 8009766:	4618      	mov	r0, r3
 8009768:	4621      	mov	r1, r4
 800976a:	f7ff f975 	bl	8008a58 <__aeabi_d2f>
 800976e:	4603      	mov	r3, r0
 8009770:	617b      	str	r3, [r7, #20]
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 8009772:	4b8f      	ldr	r3, [pc, #572]	; (80099b0 <SlalomLeft+0x2a0>)
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fe1e 	bl	80083b8 <__aeabi_f2d>
 800977c:	a386      	add	r3, pc, #536	; (adr r3, 8009998 <SlalomLeft+0x288>)
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	f7fe fe71 	bl	8008468 <__aeabi_dmul>
 8009786:	4603      	mov	r3, r0
 8009788:	460c      	mov	r4, r1
 800978a:	4618      	mov	r0, r3
 800978c:	4621      	mov	r1, r4
 800978e:	f04f 0200 	mov.w	r2, #0
 8009792:	4b88      	ldr	r3, [pc, #544]	; (80099b4 <SlalomLeft+0x2a4>)
 8009794:	f7fe ff92 	bl	80086bc <__aeabi_ddiv>
 8009798:	4603      	mov	r3, r0
 800979a:	460c      	mov	r4, r1
 800979c:	4618      	mov	r0, r3
 800979e:	4621      	mov	r1, r4
 80097a0:	f7ff f95a 	bl	8008a58 <__aeabi_d2f>
 80097a4:	4603      	mov	r3, r0
 80097a6:	613b      	str	r3, [r7, #16]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 80097a8:	4b81      	ldr	r3, [pc, #516]	; (80099b0 <SlalomLeft+0x2a0>)
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fe fe03 	bl	80083b8 <__aeabi_f2d>
 80097b2:	a379      	add	r3, pc, #484	; (adr r3, 8009998 <SlalomLeft+0x288>)
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	f7fe fe56 	bl	8008468 <__aeabi_dmul>
 80097bc:	4603      	mov	r3, r0
 80097be:	460c      	mov	r4, r1
 80097c0:	4618      	mov	r0, r3
 80097c2:	4621      	mov	r1, r4
 80097c4:	f04f 0200 	mov.w	r2, #0
 80097c8:	4b7a      	ldr	r3, [pc, #488]	; (80099b4 <SlalomLeft+0x2a4>)
 80097ca:	f7fe ff77 	bl	80086bc <__aeabi_ddiv>
 80097ce:	4603      	mov	r3, r0
 80097d0:	460c      	mov	r4, r1
 80097d2:	4618      	mov	r0, r3
 80097d4:	4621      	mov	r1, r4
 80097d6:	f7ff f93f 	bl	8008a58 <__aeabi_d2f>
 80097da:	4603      	mov	r3, r0
 80097dc:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80097de:	4b76      	ldr	r3, [pc, #472]	; (80099b8 <SlalomLeft+0x2a8>)
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	4b75      	ldr	r3, [pc, #468]	; (80099b8 <SlalomLeft+0x2a8>)
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	4413      	add	r3, r2
 80097e8:	60bb      	str	r3, [r7, #8]
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 80097ea:	f7ff fd45 	bl	8009278 <getFrontWall>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d12f      	bne.n	8009854 <SlalomLeft+0x144>
	{
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80097f4:	e00e      	b.n	8009814 <SlalomLeft+0x104>
		{
			TargetAngularV = 0;
 80097f6:	4b71      	ldr	r3, [pc, #452]	; (80099bc <SlalomLeft+0x2ac>)
 80097f8:	f04f 0200 	mov.w	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]
			AngularLeapsity = 0;
 80097fe:	4b70      	ldr	r3, [pc, #448]	; (80099c0 <SlalomLeft+0x2b0>)
 8009800:	f04f 0200 	mov.w	r2, #0
 8009804:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009806:	4b6f      	ldr	r3, [pc, #444]	; (80099c4 <SlalomLeft+0x2b4>)
 8009808:	f04f 0200 	mov.w	r2, #0
 800980c:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 800980e:	4a6e      	ldr	r2, [pc, #440]	; (80099c8 <SlalomLeft+0x2b8>)
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	6093      	str	r3, [r2, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009814:	4b6d      	ldr	r3, [pc, #436]	; (80099cc <SlalomLeft+0x2bc>)
 8009816:	edd3 7a00 	vldr	s15, [r3]
 800981a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80099d0 <SlalomLeft+0x2c0>
 800981e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009826:	d4e6      	bmi.n	80097f6 <SlalomLeft+0xe6>
 8009828:	4b68      	ldr	r3, [pc, #416]	; (80099cc <SlalomLeft+0x2bc>)
 800982a:	edd3 7a03 	vldr	s15, [r3, #12]
 800982e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80099d4 <SlalomLeft+0x2c4>
 8009832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800983a:	d4dc      	bmi.n	80097f6 <SlalomLeft+0xe6>
 800983c:	e037      	b.n	80098ae <SlalomLeft+0x19e>
	else//なければ
	{
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 800983e:	4b5f      	ldr	r3, [pc, #380]	; (80099bc <SlalomLeft+0x2ac>)
 8009840:	f04f 0200 	mov.w	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
				AngularAcceleration = 0;
 8009846:	4b5f      	ldr	r3, [pc, #380]	; (80099c4 <SlalomLeft+0x2b4>)
 8009848:	f04f 0200 	mov.w	r2, #0
 800984c:	601a      	str	r2, [r3, #0]
				TargetVelocity[BODY] = v_turn;
 800984e:	4a5e      	ldr	r2, [pc, #376]	; (80099c8 <SlalomLeft+0x2b8>)
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	6093      	str	r3, [r2, #8]
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009854:	68b8      	ldr	r0, [r7, #8]
 8009856:	f7fe fd9d 	bl	8008394 <__aeabi_i2d>
 800985a:	4604      	mov	r4, r0
 800985c:	460d      	mov	r5, r1
 800985e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009862:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009866:	ee17 0a90 	vmov	r0, s15
 800986a:	f7fe fda5 	bl	80083b8 <__aeabi_f2d>
 800986e:	a34c      	add	r3, pc, #304	; (adr r3, 80099a0 <SlalomLeft+0x290>)
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	f7fe ff22 	bl	80086bc <__aeabi_ddiv>
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	4620      	mov	r0, r4
 800987e:	4629      	mov	r1, r5
 8009880:	f7fe fc3c 	bl	80080fc <__adddf3>
 8009884:	4603      	mov	r3, r0
 8009886:	460c      	mov	r4, r1
 8009888:	4625      	mov	r5, r4
 800988a:	461c      	mov	r4, r3
 800988c:	4b4a      	ldr	r3, [pc, #296]	; (80099b8 <SlalomLeft+0x2a8>)
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	4b49      	ldr	r3, [pc, #292]	; (80099b8 <SlalomLeft+0x2a8>)
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	4413      	add	r3, r2
 8009896:	4618      	mov	r0, r3
 8009898:	f7fe fd7c 	bl	8008394 <__aeabi_i2d>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	4620      	mov	r0, r4
 80098a2:	4629      	mov	r1, r5
 80098a4:	f7ff f870 	bl	8008988 <__aeabi_dcmpgt>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1c7      	bne.n	800983e <SlalomLeft+0x12e>
				////printf("直進1\r\n");
		}
	}


	float start_angle = Angle;
 80098ae:	4b4a      	ldr	r3, [pc, #296]	; (80099d8 <SlalomLeft+0x2c8>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	607b      	str	r3, [r7, #4]
	while(start_angle - ang1 < Angle)
 80098b4:	e005      	b.n	80098c2 <SlalomLeft+0x1b2>

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 80098b6:	4a43      	ldr	r2, [pc, #268]	; (80099c4 <SlalomLeft+0x2b4>)
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 80098bc:	4a42      	ldr	r2, [pc, #264]	; (80099c8 <SlalomLeft+0x2b8>)
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	6093      	str	r3, [r2, #8]
	while(start_angle - ang1 < Angle)
 80098c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80098c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80098ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80098ce:	4b42      	ldr	r3, [pc, #264]	; (80099d8 <SlalomLeft+0x2c8>)
 80098d0:	edd3 7a00 	vldr	s15, [r3]
 80098d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098dc:	d4eb      	bmi.n	80098b6 <SlalomLeft+0x1a6>

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 80098de:	4b39      	ldr	r3, [pc, #228]	; (80099c4 <SlalomLeft+0x2b4>)
 80098e0:	f04f 0200 	mov.w	r2, #0
 80098e4:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 80098e6:	4b36      	ldr	r3, [pc, #216]	; (80099c0 <SlalomLeft+0x2b0>)
 80098e8:	f04f 0200 	mov.w	r2, #0
 80098ec:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle - ang2 < Angle)
 80098ee:	e006      	b.n	80098fe <SlalomLeft+0x1ee>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 80098f0:	4b32      	ldr	r3, [pc, #200]	; (80099bc <SlalomLeft+0x2ac>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a31      	ldr	r2, [pc, #196]	; (80099bc <SlalomLeft+0x2ac>)
 80098f6:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 80098f8:	4a33      	ldr	r2, [pc, #204]	; (80099c8 <SlalomLeft+0x2b8>)
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	6093      	str	r3, [r2, #8]
	while(start_angle - ang2 < Angle)
 80098fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8009902:	edd7 7a04 	vldr	s15, [r7, #16]
 8009906:	ee37 7a67 	vsub.f32	s14, s14, s15
 800990a:	4b33      	ldr	r3, [pc, #204]	; (80099d8 <SlalomLeft+0x2c8>)
 800990c:	edd3 7a00 	vldr	s15, [r3]
 8009910:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009918:	d4ea      	bmi.n	80098f0 <SlalomLeft+0x1e0>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < Angle)
 800991a:	e016      	b.n	800994a <SlalomLeft+0x23a>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 800991c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009920:	eef1 7a67 	vneg.f32	s15, s15
 8009924:	4b27      	ldr	r3, [pc, #156]	; (80099c4 <SlalomLeft+0x2b4>)
 8009926:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV > 0)
 800992a:	4b24      	ldr	r3, [pc, #144]	; (80099bc <SlalomLeft+0x2ac>)
 800992c:	edd3 7a00 	vldr	s15, [r3]
 8009930:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009938:	dd04      	ble.n	8009944 <SlalomLeft+0x234>
			{
				TargetAngularV = 0;
 800993a:	4b20      	ldr	r3, [pc, #128]	; (80099bc <SlalomLeft+0x2ac>)
 800993c:	f04f 0200 	mov.w	r2, #0
 8009940:	601a      	str	r2, [r3, #0]
				break;
 8009942:	e010      	b.n	8009966 <SlalomLeft+0x256>
			}
			TargetVelocity[BODY] = v_turn;
 8009944:	4a20      	ldr	r2, [pc, #128]	; (80099c8 <SlalomLeft+0x2b8>)
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	6093      	str	r3, [r2, #8]
	while( start_angle - ang3 < Angle)
 800994a:	ed97 7a01 	vldr	s14, [r7, #4]
 800994e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009952:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009956:	4b20      	ldr	r3, [pc, #128]	; (80099d8 <SlalomLeft+0x2c8>)
 8009958:	edd3 7a00 	vldr	s15, [r3]
 800995c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009964:	d4da      	bmi.n	800991c <SlalomLeft+0x20c>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009966:	4b17      	ldr	r3, [pc, #92]	; (80099c4 <SlalomLeft+0x2b4>)
 8009968:	f04f 0200 	mov.w	r2, #0
 800996c:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 800996e:	4b14      	ldr	r3, [pc, #80]	; (80099c0 <SlalomLeft+0x2b0>)
 8009970:	f04f 0200 	mov.w	r2, #0
 8009974:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009976:	4b11      	ldr	r3, [pc, #68]	; (80099bc <SlalomLeft+0x2ac>)
 8009978:	f04f 0200 	mov.w	r2, #0
 800997c:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 800997e:	4b17      	ldr	r3, [pc, #92]	; (80099dc <SlalomLeft+0x2cc>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a17      	ldr	r2, [pc, #92]	; (80099e0 <SlalomLeft+0x2d0>)
 8009984:	6013      	str	r3, [r2, #0]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009986:	4b0c      	ldr	r3, [pc, #48]	; (80099b8 <SlalomLeft+0x2a8>)
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	4b0b      	ldr	r3, [pc, #44]	; (80099b8 <SlalomLeft+0x2a8>)
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	4413      	add	r3, r2
 8009990:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009992:	e03c      	b.n	8009a0e <SlalomLeft+0x2fe>
 8009994:	f3af 8000 	nop.w
 8009998:	54442d18 	.word	0x54442d18
 800999c:	400921fb 	.word	0x400921fb
 80099a0:	23ca2666 	.word	0x23ca2666
 80099a4:	3f509268 	.word	0x3f509268
 80099a8:	20000000 	.word	0x20000000
 80099ac:	20000bf8 	.word	0x20000bf8
 80099b0:	20000b1c 	.word	0x20000b1c
 80099b4:	40668000 	.word	0x40668000
 80099b8:	20000b04 	.word	0x20000b04
 80099bc:	20000ae0 	.word	0x20000ae0
 80099c0:	20000234 	.word	0x20000234
 80099c4:	20000230 	.word	0x20000230
 80099c8:	20000ad0 	.word	0x20000ad0
 80099cc:	20000b44 	.word	0x20000b44
 80099d0:	43480000 	.word	0x43480000
 80099d4:	437a0000 	.word	0x437a0000
 80099d8:	20000228 	.word	0x20000228
 80099dc:	20000d70 	.word	0x20000d70
 80099e0:	20000d74 	.word	0x20000d74
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 80099e4:	4b32      	ldr	r3, [pc, #200]	; (8009ab0 <SlalomLeft+0x3a0>)
 80099e6:	f04f 0200 	mov.w	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 80099ec:	4a31      	ldr	r2, [pc, #196]	; (8009ab4 <SlalomLeft+0x3a4>)
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");
			if(Calc == 0)
 80099f2:	4b31      	ldr	r3, [pc, #196]	; (8009ab8 <SlalomLeft+0x3a8>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d109      	bne.n	8009a0e <SlalomLeft+0x2fe>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 80099fa:	f001 f9a3 	bl	800ad44 <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 80099fe:	2201      	movs	r2, #1
 8009a00:	2107      	movs	r1, #7
 8009a02:	2007      	movs	r0, #7
 8009a04:	f001 fb2e 	bl	800b064 <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 8009a08:	4b2b      	ldr	r3, [pc, #172]	; (8009ab8 <SlalomLeft+0x3a8>)
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	601a      	str	r2, [r3, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009a0e:	68b8      	ldr	r0, [r7, #8]
 8009a10:	f7fe fcc0 	bl	8008394 <__aeabi_i2d>
 8009a14:	4604      	mov	r4, r0
 8009a16:	460d      	mov	r5, r1
 8009a18:	edd7 7a07 	vldr	s15, [r7, #28]
 8009a1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009a20:	ee17 0a90 	vmov	r0, s15
 8009a24:	f7fe fcc8 	bl	80083b8 <__aeabi_f2d>
 8009a28:	a31d      	add	r3, pc, #116	; (adr r3, 8009aa0 <SlalomLeft+0x390>)
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	f7fe fe45 	bl	80086bc <__aeabi_ddiv>
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	4620      	mov	r0, r4
 8009a38:	4629      	mov	r1, r5
 8009a3a:	f7fe fb5f 	bl	80080fc <__adddf3>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	460c      	mov	r4, r1
 8009a42:	4625      	mov	r5, r4
 8009a44:	461c      	mov	r4, r3
 8009a46:	4b1d      	ldr	r3, [pc, #116]	; (8009abc <SlalomLeft+0x3ac>)
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	4b1c      	ldr	r3, [pc, #112]	; (8009abc <SlalomLeft+0x3ac>)
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	4413      	add	r3, r2
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fe fc9f 	bl	8008394 <__aeabi_i2d>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	f7fe ff93 	bl	8008988 <__aeabi_dcmpgt>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1bd      	bne.n	80099e4 <SlalomLeft+0x2d4>
			}
	}
	TargetAngle += -90*M_PI/180;
 8009a68:	4b15      	ldr	r3, [pc, #84]	; (8009ac0 <SlalomLeft+0x3b0>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fe fca3 	bl	80083b8 <__aeabi_f2d>
 8009a72:	a30d      	add	r3, pc, #52	; (adr r3, 8009aa8 <SlalomLeft+0x398>)
 8009a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a78:	f7fe fb3e 	bl	80080f8 <__aeabi_dsub>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	460c      	mov	r4, r1
 8009a80:	4618      	mov	r0, r3
 8009a82:	4621      	mov	r1, r4
 8009a84:	f7fe ffe8 	bl	8008a58 <__aeabi_d2f>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	; (8009ac0 <SlalomLeft+0x3b0>)
 8009a8c:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009a8e:	4b0b      	ldr	r3, [pc, #44]	; (8009abc <SlalomLeft+0x3ac>)
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	4a0c      	ldr	r2, [pc, #48]	; (8009ac4 <SlalomLeft+0x3b4>)
 8009a94:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009a96:	bf00      	nop
 8009a98:	3728      	adds	r7, #40	; 0x28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	23ca2666 	.word	0x23ca2666
 8009aa4:	3f509268 	.word	0x3f509268
 8009aa8:	54442d18 	.word	0x54442d18
 8009aac:	3ff921fb 	.word	0x3ff921fb
 8009ab0:	20000ae0 	.word	0x20000ae0
 8009ab4:	20000ad0 	.word	0x20000ad0
 8009ab8:	20000d74 	.word	0x20000d74
 8009abc:	20000b04 	.word	0x20000b04
 8009ac0:	20000afc 	.word	0x20000afc
 8009ac4:	20000b38 	.word	0x20000b38

08009ac8 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
 8009ac8:	b5b0      	push	{r4, r5, r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	ed87 0a01 	vstr	s0, [r7, #4]
 8009ad2:	edc7 0a00 	vstr	s1, [r7]
//	Pos.Act = accel;
//	ControlWall();
	TargetAngularV = 0;
 8009ad6:	4b6c      	ldr	r3, [pc, #432]	; (8009c88 <Accel+0x1c0>)
 8009ad8:	f04f 0200 	mov.w	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
	float additional_speed=0;
 8009ade:	f04f 0300 	mov.w	r3, #0
 8009ae2:	613b      	str	r3, [r7, #16]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 8009ae4:	4b69      	ldr	r3, [pc, #420]	; (8009c8c <Accel+0x1c4>)
 8009ae6:	edd3 7a02 	vldr	s15, [r3, #8]
 8009aea:	ed97 7a00 	vldr	s14, [r7]
 8009aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009af2:	edc7 7a04 	vstr	s15, [r7, #16]
	//printf("%f,%f,%f\r\n",additional_speed,explore_speed,CurrentVelocity[BODY]);
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulse[BODY];
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009af6:	edd7 7a04 	vldr	s15, [r7, #16]
 8009afa:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8009c90 <Accel+0x1c8>
 8009afe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009b02:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b06:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009b0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b0e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b16:	4b5f      	ldr	r3, [pc, #380]	; (8009c94 <Accel+0x1cc>)
 8009b18:	edc3 7a00 	vstr	s15, [r3]
//	WallWarn();
	//printf("%d, %d\r\n",VelocityLeftOut,VelocityRightOut);
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009b1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009b24:	ee17 0a90 	vmov	r0, s15
 8009b28:	f7fe fc46 	bl	80083b8 <__aeabi_f2d>
 8009b2c:	a352      	add	r3, pc, #328	; (adr r3, 8009c78 <Accel+0x1b0>)
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	f7fe fdc3 	bl	80086bc <__aeabi_ddiv>
 8009b36:	4603      	mov	r3, r0
 8009b38:	460c      	mov	r4, r1
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	f7fe ff43 	bl	80089c8 <__aeabi_d2iz>
 8009b42:	4603      	mov	r3, r0
 8009b44:	60fb      	str	r3, [r7, #12]
	//printf("target_pulse : %d",target_pulse);
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで

	_Bool wall_cut = false;
 8009b46:	2300      	movs	r3, #0
 8009b48:	75fb      	strb	r3, [r7, #23]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009b4a:	e066      	b.n	8009c1a <Accel+0x152>
	{
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009b4c:	4b52      	ldr	r3, [pc, #328]	; (8009c98 <Accel+0x1d0>)
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fe fc1f 	bl	8008394 <__aeabi_i2d>
 8009b56:	4604      	mov	r4, r0
 8009b58:	460d      	mov	r5, r1
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f7fe fc1a 	bl	8008394 <__aeabi_i2d>
 8009b60:	a347      	add	r3, pc, #284	; (adr r3, 8009c80 <Accel+0x1b8>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f7fe fc7f 	bl	8008468 <__aeabi_dmul>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4620      	mov	r0, r4
 8009b70:	4629      	mov	r1, r5
 8009b72:	f7fe fac3 	bl	80080fc <__adddf3>
 8009b76:	4603      	mov	r3, r0
 8009b78:	460c      	mov	r4, r1
 8009b7a:	4625      	mov	r5, r4
 8009b7c:	461c      	mov	r4, r3
 8009b7e:	4b47      	ldr	r3, [pc, #284]	; (8009c9c <Accel+0x1d4>)
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fe fc06 	bl	8008394 <__aeabi_i2d>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	4629      	mov	r1, r5
 8009b90:	f7fe fedc 	bl	800894c <__aeabi_dcmplt>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d008      	beq.n	8009bac <Accel+0xe4>
 8009b9a:	4b41      	ldr	r3, [pc, #260]	; (8009ca0 <Accel+0x1d8>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d104      	bne.n	8009bac <Accel+0xe4>
		{
//			wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
//			//計算して
//			make_map(Pos.TargetX, Pos.TargetY, 0x01);
			updateRealSearch();
 8009ba2:	f006 fc11 	bl	80103c8 <updateRealSearch>
			//UpdateWalkMap();
			//次のアクションを渡すのは別のところで。
			Calc = 1;
 8009ba6:	4b3e      	ldr	r3, [pc, #248]	; (8009ca0 <Accel+0x1d8>)
 8009ba8:	2201      	movs	r2, #1
 8009baa:	601a      	str	r2, [r3, #0]
		}
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
 8009bae:	f083 0301 	eor.w	r3, r3, #1
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d030      	beq.n	8009c1a <Accel+0x152>
 8009bb8:	4b3a      	ldr	r3, [pc, #232]	; (8009ca4 <Accel+0x1dc>)
 8009bba:	edd3 7a02 	vldr	s15, [r3, #8]
 8009bbe:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8009ca8 <Accel+0x1e0>
 8009bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bca:	d40a      	bmi.n	8009be2 <Accel+0x11a>
 8009bcc:	4b35      	ldr	r3, [pc, #212]	; (8009ca4 <Accel+0x1dc>)
 8009bce:	edd3 7a01 	vldr	s15, [r3, #4]
 8009bd2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8009ca8 <Accel+0x1e0>
 8009bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bde:	d400      	bmi.n	8009be2 <Accel+0x11a>
 8009be0:	e01b      	b.n	8009c1a <Accel+0x152>
		{
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8009be2:	4b2d      	ldr	r3, [pc, #180]	; (8009c98 <Accel+0x1d0>)
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	ee07 3a90 	vmov	s15, r3
 8009bf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bf8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8009cac <Accel+0x1e4>
 8009bfc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c08:	ee17 2a90 	vmov	r2, s15
 8009c0c:	4b23      	ldr	r3, [pc, #140]	; (8009c9c <Accel+0x1d4>)
 8009c0e:	609a      	str	r2, [r3, #8]
			//target_pulse = TotalPulse[BODY] -KeepPulse[BODY] + Wall_Cut_Val;
			wall_cut = true;
 8009c10:	2301      	movs	r3, #1
 8009c12:	75fb      	strb	r3, [r7, #23]
			ChangeLED(3);
 8009c14:	2003      	movs	r0, #3
 8009c16:	f007 f913 	bl	8010e40 <ChangeLED>
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009c1a:	4b1f      	ldr	r3, [pc, #124]	; (8009c98 <Accel+0x1d0>)
 8009c1c:	689a      	ldr	r2, [r3, #8]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	441a      	add	r2, r3
 8009c22:	4b1e      	ldr	r3, [pc, #120]	; (8009c9c <Accel+0x1d4>)
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	dc90      	bgt.n	8009b4c <Accel+0x84>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 8009c2a:	4b1a      	ldr	r3, [pc, #104]	; (8009c94 <Accel+0x1cc>)
 8009c2c:	f04f 0200 	mov.w	r2, #0
 8009c30:	601a      	str	r2, [r3, #0]
	//壁読んで、
	wall_cut = false;
 8009c32:	2300      	movs	r3, #0
 8009c34:	75fb      	strb	r3, [r7, #23]
	ChangeLED(0);
 8009c36:	2000      	movs	r0, #0
 8009c38:	f007 f902 	bl	8010e40 <ChangeLED>
	KeepPulse[BODY] += target_pulse;
 8009c3c:	4b16      	ldr	r3, [pc, #88]	; (8009c98 <Accel+0x1d0>)
 8009c3e:	689a      	ldr	r2, [r3, #8]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4413      	add	r3, r2
 8009c44:	4a14      	ldr	r2, [pc, #80]	; (8009c98 <Accel+0x1d0>)
 8009c46:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 8009c48:	4b13      	ldr	r3, [pc, #76]	; (8009c98 <Accel+0x1d0>)
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	0fd9      	lsrs	r1, r3, #31
 8009c50:	440b      	add	r3, r1
 8009c52:	105b      	asrs	r3, r3, #1
 8009c54:	4413      	add	r3, r2
 8009c56:	4a10      	ldr	r2, [pc, #64]	; (8009c98 <Accel+0x1d0>)
 8009c58:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <Accel+0x1d0>)
 8009c5c:	685a      	ldr	r2, [r3, #4]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	0fd9      	lsrs	r1, r3, #31
 8009c62:	440b      	add	r3, r1
 8009c64:	105b      	asrs	r3, r3, #1
 8009c66:	4413      	add	r3, r2
 8009c68:	4a0b      	ldr	r2, [pc, #44]	; (8009c98 <Accel+0x1d0>)
 8009c6a:	6053      	str	r3, [r2, #4]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 8009c6c:	bf00      	nop
 8009c6e:	3718      	adds	r7, #24
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bdb0      	pop	{r4, r5, r7, pc}
 8009c74:	f3af 8000 	nop.w
 8009c78:	23ca2666 	.word	0x23ca2666
 8009c7c:	3f509268 	.word	0x3f509268
 8009c80:	9999999a 	.word	0x9999999a
 8009c84:	3fe99999 	.word	0x3fe99999
 8009c88:	20000ae0 	.word	0x20000ae0
 8009c8c:	20000b10 	.word	0x20000b10
 8009c90:	3a83126f 	.word	0x3a83126f
 8009c94:	2000022c 	.word	0x2000022c
 8009c98:	20000b38 	.word	0x20000b38
 8009c9c:	20000b04 	.word	0x20000b04
 8009ca0:	20000d74 	.word	0x20000d74
 8009ca4:	20000b44 	.word	0x20000b44
 8009ca8:	42480000 	.word	0x42480000
 8009cac:	4792c122 	.word	0x4792c122

08009cb0 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 8009cb0:	b5b0      	push	{r4, r5, r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8009cba:	edc7 0a00 	vstr	s1, [r7]
//	Pos.Act = decel;
	float down_speed=0;
 8009cbe:	f04f 0300 	mov.w	r3, #0
 8009cc2:	60fb      	str	r3, [r7, #12]
	down_speed = CurrentVelocity[BODY] - end_speed;
 8009cc4:	4b5a      	ldr	r3, [pc, #360]	; (8009e30 <Decel+0x180>)
 8009cc6:	ed93 7a02 	vldr	s14, [r3, #8]
 8009cca:	edd7 7a00 	vldr	s15, [r7]
 8009cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cd2:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009cd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8009cda:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8009e34 <Decel+0x184>
 8009cde:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009ce2:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ce6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009cea:	edd7 7a01 	vldr	s15, [r7, #4]
 8009cee:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cf6:	eef1 7a67 	vneg.f32	s15, s15
 8009cfa:	4b4f      	ldr	r3, [pc, #316]	; (8009e38 <Decel+0x188>)
 8009cfc:	edc3 7a00 	vstr	s15, [r3]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
//	WallSafe();
//	ControlWall();
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009d00:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009d08:	ee17 0a90 	vmov	r0, s15
 8009d0c:	f7fe fb54 	bl	80083b8 <__aeabi_f2d>
 8009d10:	a343      	add	r3, pc, #268	; (adr r3, 8009e20 <Decel+0x170>)
 8009d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d16:	f7fe fcd1 	bl	80086bc <__aeabi_ddiv>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	4618      	mov	r0, r3
 8009d20:	4621      	mov	r1, r4
 8009d22:	f7fe fe51 	bl	80089c8 <__aeabi_d2iz>
 8009d26:	4603      	mov	r3, r0
 8009d28:	60bb      	str	r3, [r7, #8]
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009d2a:	e044      	b.n	8009db6 <Decel+0x106>
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocity[BODY] <= 0)
 8009d2c:	4b43      	ldr	r3, [pc, #268]	; (8009e3c <Decel+0x18c>)
 8009d2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009d32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3a:	d810      	bhi.n	8009d5e <Decel+0xae>
		{
			TargetVelocity[BODY] = 0;
 8009d3c:	4b3f      	ldr	r3, [pc, #252]	; (8009e3c <Decel+0x18c>)
 8009d3e:	f04f 0200 	mov.w	r2, #0
 8009d42:	609a      	str	r2, [r3, #8]
			Acceleration = 0;
 8009d44:	4b3c      	ldr	r3, [pc, #240]	; (8009e38 <Decel+0x188>)
 8009d46:	f04f 0200 	mov.w	r2, #0
 8009d4a:	601a      	str	r2, [r3, #0]
			TargetAngularV = 0;
 8009d4c:	4b3c      	ldr	r3, [pc, #240]	; (8009e40 <Decel+0x190>)
 8009d4e:	f04f 0200 	mov.w	r2, #0
 8009d52:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009d54:	4b3b      	ldr	r3, [pc, #236]	; (8009e44 <Decel+0x194>)
 8009d56:	f04f 0200 	mov.w	r2, #0
 8009d5a:	601a      	str	r2, [r3, #0]
			break;
 8009d5c:	e042      	b.n	8009de4 <Decel+0x134>
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 8009d5e:	4b3a      	ldr	r3, [pc, #232]	; (8009e48 <Decel+0x198>)
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe fb16 	bl	8008394 <__aeabi_i2d>
 8009d68:	4604      	mov	r4, r0
 8009d6a:	460d      	mov	r5, r1
 8009d6c:	68b8      	ldr	r0, [r7, #8]
 8009d6e:	f7fe fb11 	bl	8008394 <__aeabi_i2d>
 8009d72:	a32d      	add	r3, pc, #180	; (adr r3, 8009e28 <Decel+0x178>)
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	f7fe fb76 	bl	8008468 <__aeabi_dmul>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4620      	mov	r0, r4
 8009d82:	4629      	mov	r1, r5
 8009d84:	f7fe f9ba 	bl	80080fc <__adddf3>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	4625      	mov	r5, r4
 8009d8e:	461c      	mov	r4, r3
 8009d90:	4b2e      	ldr	r3, [pc, #184]	; (8009e4c <Decel+0x19c>)
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe fafd 	bl	8008394 <__aeabi_i2d>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4620      	mov	r0, r4
 8009da0:	4629      	mov	r1, r5
 8009da2:	f7fe fdd3 	bl	800894c <__aeabi_dcmplt>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d100      	bne.n	8009dae <Decel+0xfe>
 8009dac:	e003      	b.n	8009db6 <Decel+0x106>
//			WallWarn();
//			//ControlWall();
//			PIDChangeFlag(L_WALL_PID, 0);
//			PIDChangeFlag(R_WALL_PID, 0);
//			PIDChangeFlag(D_WALL_PID, 0);
			PIDChangeFlag( A_VELO_PID , 1);
 8009dae:	2101      	movs	r1, #1
 8009db0:	2000      	movs	r0, #0
 8009db2:	f007 fddd 	bl	8011970 <PIDChangeFlag>
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009db6:	4b26      	ldr	r3, [pc, #152]	; (8009e50 <Decel+0x1a0>)
 8009db8:	ed93 7a03 	vldr	s14, [r3, #12]
 8009dbc:	4b24      	ldr	r3, [pc, #144]	; (8009e50 <Decel+0x1a0>)
 8009dbe:	edd3 7a00 	vldr	s15, [r3]
 8009dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dc6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8009e54 <Decel+0x1a4>
 8009dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd2:	d507      	bpl.n	8009de4 <Decel+0x134>
 8009dd4:	4b1c      	ldr	r3, [pc, #112]	; (8009e48 <Decel+0x198>)
 8009dd6:	689a      	ldr	r2, [r3, #8]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	441a      	add	r2, r3
 8009ddc:	4b1b      	ldr	r3, [pc, #108]	; (8009e4c <Decel+0x19c>)
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	dca3      	bgt.n	8009d2c <Decel+0x7c>

		}


	}
	WaitStopAndReset();
 8009de4:	f7ff f830 	bl	8008e48 <WaitStopAndReset>
	KeepPulse[BODY] += target_pulse;
 8009de8:	4b17      	ldr	r3, [pc, #92]	; (8009e48 <Decel+0x198>)
 8009dea:	689a      	ldr	r2, [r3, #8]
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	4413      	add	r3, r2
 8009df0:	4a15      	ldr	r2, [pc, #84]	; (8009e48 <Decel+0x198>)
 8009df2:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 8009df4:	4b14      	ldr	r3, [pc, #80]	; (8009e48 <Decel+0x198>)
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	0fd9      	lsrs	r1, r3, #31
 8009dfc:	440b      	add	r3, r1
 8009dfe:	105b      	asrs	r3, r3, #1
 8009e00:	4413      	add	r3, r2
 8009e02:	4a11      	ldr	r2, [pc, #68]	; (8009e48 <Decel+0x198>)
 8009e04:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 8009e06:	4b10      	ldr	r3, [pc, #64]	; (8009e48 <Decel+0x198>)
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	0fd9      	lsrs	r1, r3, #31
 8009e0e:	440b      	add	r3, r1
 8009e10:	105b      	asrs	r3, r3, #1
 8009e12:	4413      	add	r3, r2
 8009e14:	4a0c      	ldr	r2, [pc, #48]	; (8009e48 <Decel+0x198>)
 8009e16:	6053      	str	r3, [r2, #4]


}
 8009e18:	bf00      	nop
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8009e20:	23ca2666 	.word	0x23ca2666
 8009e24:	3f509268 	.word	0x3f509268
 8009e28:	cccccccd 	.word	0xcccccccd
 8009e2c:	3fe4cccc 	.word	0x3fe4cccc
 8009e30:	20000b10 	.word	0x20000b10
 8009e34:	3a83126f 	.word	0x3a83126f
 8009e38:	2000022c 	.word	0x2000022c
 8009e3c:	20000ad0 	.word	0x20000ad0
 8009e40:	20000ae0 	.word	0x20000ae0
 8009e44:	20000230 	.word	0x20000230
 8009e48:	20000b38 	.word	0x20000b38
 8009e4c:	20000b04 	.word	0x20000b04
 8009e50:	20000b44 	.word	0x20000b44
 8009e54:	456d8000 	.word	0x456d8000

08009e58 <GoStraight>:
	Pid[wall_ctrl].flag = 0;
	TargetAngularV = 0;
	return 45;
}
void GoStraight(float move_distance,  float explore_speed, float accel)
{
 8009e58:	b5b0      	push	{r4, r5, r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8009e62:	edc7 0a02 	vstr	s1, [r7, #8]
 8009e66:	ed87 1a01 	vstr	s2, [r7, #4]
	//explore_speed += accel;

	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	//int keep_pulse = TotalPulse[BODY];
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009e6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009e72:	ee17 0a90 	vmov	r0, s15
 8009e76:	f7fe fa9f 	bl	80083b8 <__aeabi_f2d>
 8009e7a:	a388      	add	r3, pc, #544	; (adr r3, 800a09c <GoStraight+0x244>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	f7fe fc1c 	bl	80086bc <__aeabi_ddiv>
 8009e84:	4603      	mov	r3, r0
 8009e86:	460c      	mov	r4, r1
 8009e88:	4618      	mov	r0, r3
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	f7fe fd9c 	bl	80089c8 <__aeabi_d2iz>
 8009e90:	4603      	mov	r3, r0
 8009e92:	613b      	str	r3, [r7, #16]

	if(accel != 0) //加速するとき
 8009e94:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea0:	d020      	beq.n	8009ee4 <GoStraight+0x8c>
	{
		//移動後は今の方角が維持される、
		WallWarn();
 8009ea2:	f7fe ffc5 	bl	8008e30 <WallWarn>
//		ControlWall();
		Accel( move_distance/2 , explore_speed+accel);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009ea6:	edd7 7a03 	vldr	s15, [r7, #12]
 8009eaa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009eae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009eb2:	ed97 7a02 	vldr	s14, [r7, #8]
 8009eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8009eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ebe:	eef0 0a67 	vmov.f32	s1, s15
 8009ec2:	eeb0 0a66 	vmov.f32	s0, s13
 8009ec6:	f7ff fdff 	bl	8009ac8 <Accel>
		while( ( KeepPulse[BODY] + (target_pulse/2)) > ( TotalPulse[BODY]) )
 8009eca:	bf00      	nop
 8009ecc:	4b6c      	ldr	r3, [pc, #432]	; (800a080 <GoStraight+0x228>)
 8009ece:	689a      	ldr	r2, [r3, #8]
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	0fd9      	lsrs	r1, r3, #31
 8009ed4:	440b      	add	r3, r1
 8009ed6:	105b      	asrs	r3, r3, #1
 8009ed8:	441a      	add	r2, r3
 8009eda:	4b6a      	ldr	r3, [pc, #424]	; (800a084 <GoStraight+0x22c>)
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	dcf4      	bgt.n	8009ecc <GoStraight+0x74>
 8009ee2:	e09f      	b.n	800a024 <GoStraight+0x1cc>
	{
//		Pos.Act = straight;
//		WallSafe();
//		ControlWall();
//		Calc = SearchOrFast;
		_Bool wall_cut=false;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	75fb      	strb	r3, [r7, #23]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009ee8:	e091      	b.n	800a00e <GoStraight+0x1b6>
		{
			//最初の45mmで加速をストップ
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 8009eea:	4b65      	ldr	r3, [pc, #404]	; (800a080 <GoStraight+0x228>)
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe fa50 	bl	8008394 <__aeabi_i2d>
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	460d      	mov	r5, r1
 8009ef8:	6938      	ldr	r0, [r7, #16]
 8009efa:	f7fe fa4b 	bl	8008394 <__aeabi_i2d>
 8009efe:	a35c      	add	r3, pc, #368	; (adr r3, 800a070 <GoStraight+0x218>)
 8009f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f04:	f7fe fab0 	bl	8008468 <__aeabi_dmul>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	4629      	mov	r1, r5
 8009f10:	f7fe f8f4 	bl	80080fc <__adddf3>
 8009f14:	4603      	mov	r3, r0
 8009f16:	460c      	mov	r4, r1
 8009f18:	4625      	mov	r5, r4
 8009f1a:	461c      	mov	r4, r3
 8009f1c:	4b59      	ldr	r3, [pc, #356]	; (800a084 <GoStraight+0x22c>)
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fe fa37 	bl	8008394 <__aeabi_i2d>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	f7fe fd0d 	bl	800894c <__aeabi_dcmplt>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d003      	beq.n	8009f40 <GoStraight+0xe8>
			{
//				WallWarn();
//				PIDChangeFlag(L_WALL_PID, 0);
//				PIDChangeFlag(R_WALL_PID, 0);
//				PIDChangeFlag(D_WALL_PID, 0);
				PIDChangeFlag( A_VELO_PID , 1);
 8009f38:	2101      	movs	r1, #1
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	f007 fd18 	bl	8011970 <PIDChangeFlag>
				//右か左の壁のセンサ値を見て、閾値を下回ったら、TotalPulseかKeepPulseを補正する
			}

			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009f40:	4b4f      	ldr	r3, [pc, #316]	; (800a080 <GoStraight+0x228>)
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fe fa25 	bl	8008394 <__aeabi_i2d>
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	460d      	mov	r5, r1
 8009f4e:	6938      	ldr	r0, [r7, #16]
 8009f50:	f7fe fa20 	bl	8008394 <__aeabi_i2d>
 8009f54:	a348      	add	r3, pc, #288	; (adr r3, 800a078 <GoStraight+0x220>)
 8009f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5a:	f7fe fa85 	bl	8008468 <__aeabi_dmul>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4620      	mov	r0, r4
 8009f64:	4629      	mov	r1, r5
 8009f66:	f7fe f8c9 	bl	80080fc <__adddf3>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	4625      	mov	r5, r4
 8009f70:	461c      	mov	r4, r3
 8009f72:	4b44      	ldr	r3, [pc, #272]	; (800a084 <GoStraight+0x22c>)
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe fa0c 	bl	8008394 <__aeabi_i2d>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	4620      	mov	r0, r4
 8009f82:	4629      	mov	r1, r5
 8009f84:	f7fe fce2 	bl	800894c <__aeabi_dcmplt>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d008      	beq.n	8009fa0 <GoStraight+0x148>
 8009f8e:	4b3e      	ldr	r3, [pc, #248]	; (800a088 <GoStraight+0x230>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d104      	bne.n	8009fa0 <GoStraight+0x148>
			{
//				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
//				//計算して
//				make_map(Pos.TargetX, Pos.TargetY, 0x01);
				updateRealSearch();
 8009f96:	f006 fa17 	bl	80103c8 <updateRealSearch>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 8009f9a:	4b3b      	ldr	r3, [pc, #236]	; (800a088 <GoStraight+0x230>)
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	601a      	str	r2, [r3, #0]
			}
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
 8009fa2:	f083 0301 	eor.w	r3, r3, #1
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d030      	beq.n	800a00e <GoStraight+0x1b6>
 8009fac:	4b37      	ldr	r3, [pc, #220]	; (800a08c <GoStraight+0x234>)
 8009fae:	edd3 7a02 	vldr	s15, [r3, #8]
 8009fb2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800a090 <GoStraight+0x238>
 8009fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fbe:	d40a      	bmi.n	8009fd6 <GoStraight+0x17e>
 8009fc0:	4b32      	ldr	r3, [pc, #200]	; (800a08c <GoStraight+0x234>)
 8009fc2:	edd3 7a01 	vldr	s15, [r3, #4]
 8009fc6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a090 <GoStraight+0x238>
 8009fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fd2:	d400      	bmi.n	8009fd6 <GoStraight+0x17e>
 8009fd4:	e01b      	b.n	800a00e <GoStraight+0x1b6>
			{//
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8009fd6:	4b2a      	ldr	r3, [pc, #168]	; (800a080 <GoStraight+0x228>)
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	ee07 3a90 	vmov	s15, r3
 8009fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	ee07 3a90 	vmov	s15, r3
 8009fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fec:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a094 <GoStraight+0x23c>
 8009ff0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ffc:	ee17 2a90 	vmov	r2, s15
 800a000:	4b20      	ldr	r3, [pc, #128]	; (800a084 <GoStraight+0x22c>)
 800a002:	609a      	str	r2, [r3, #8]
				//target_pulse = TotalPulse[BODY] -KeepPulse[BODY] + Wall_Cut_Val;
				wall_cut = true;
 800a004:	2301      	movs	r3, #1
 800a006:	75fb      	strb	r3, [r7, #23]
				ChangeLED(3);
 800a008:	2003      	movs	r0, #3
 800a00a:	f006 ff19 	bl	8010e40 <ChangeLED>
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800a00e:	4b1c      	ldr	r3, [pc, #112]	; (800a080 <GoStraight+0x228>)
 800a010:	689a      	ldr	r2, [r3, #8]
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	441a      	add	r2, r3
 800a016:	4b1b      	ldr	r3, [pc, #108]	; (800a084 <GoStraight+0x22c>)
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	f73f af65 	bgt.w	8009eea <GoStraight+0x92>
	//		if( ( keep_pulse + (target_pulse/2) )  <= ( TotalPulse[BODY]) )	//移動量に応じて処理を変える。
	//		{
	//			Acceleration = 0;
	//		}
		}
		wall_cut = false;
 800a020:	2300      	movs	r3, #0
 800a022:	75fb      	strb	r3, [r7, #23]

	}
	ChangeLED(0);
 800a024:	2000      	movs	r0, #0
 800a026:	f006 ff0b 	bl	8010e40 <ChangeLED>
	//余分に加速した場合、あとの減速で速度を落としきれないことになっていたので、減速時にその時の速度を使うようにした。
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
//	int target_pulse = (int)(2*(move_distance/2)/MM_PER_PULSE);
//	int keep_pulse = TotalPulse[BODY];
	//WallWarn();
	Acceleration = 0;
 800a02a:	4b1b      	ldr	r3, [pc, #108]	; (800a098 <GoStraight+0x240>)
 800a02c:	f04f 0200 	mov.w	r2, #0
 800a030:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += target_pulse;
 800a032:	4b13      	ldr	r3, [pc, #76]	; (800a080 <GoStraight+0x228>)
 800a034:	689a      	ldr	r2, [r3, #8]
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	4413      	add	r3, r2
 800a03a:	4a11      	ldr	r2, [pc, #68]	; (800a080 <GoStraight+0x228>)
 800a03c:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a03e:	4b10      	ldr	r3, [pc, #64]	; (800a080 <GoStraight+0x228>)
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	0fd9      	lsrs	r1, r3, #31
 800a046:	440b      	add	r3, r1
 800a048:	105b      	asrs	r3, r3, #1
 800a04a:	4413      	add	r3, r2
 800a04c:	4a0c      	ldr	r2, [pc, #48]	; (800a080 <GoStraight+0x228>)
 800a04e:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a050:	4b0b      	ldr	r3, [pc, #44]	; (800a080 <GoStraight+0x228>)
 800a052:	685a      	ldr	r2, [r3, #4]
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	0fd9      	lsrs	r1, r3, #31
 800a058:	440b      	add	r3, r1
 800a05a:	105b      	asrs	r3, r3, #1
 800a05c:	4413      	add	r3, r2
 800a05e:	4a08      	ldr	r2, [pc, #32]	; (800a080 <GoStraight+0x228>)
 800a060:	6053      	str	r3, [r2, #4]

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 800a062:	bf00      	nop
 800a064:	3718      	adds	r7, #24
 800a066:	46bd      	mov	sp, r7
 800a068:	bdb0      	pop	{r4, r5, r7, pc}
 800a06a:	bf00      	nop
 800a06c:	f3af 8000 	nop.w
 800a070:	9999999a 	.word	0x9999999a
 800a074:	3fd99999 	.word	0x3fd99999
 800a078:	9999999a 	.word	0x9999999a
 800a07c:	3fe99999 	.word	0x3fe99999
 800a080:	20000b38 	.word	0x20000b38
 800a084:	20000b04 	.word	0x20000b04
 800a088:	20000d74 	.word	0x20000d74
 800a08c:	20000b44 	.word	0x20000b44
 800a090:	42480000 	.word	0x42480000
 800a094:	4792c122 	.word	0x4792c122
 800a098:	2000022c 	.word	0x2000022c
 800a09c:	23ca2666 	.word	0x23ca2666
 800a0a0:	3f509268 	.word	0x3f509268

0800a0a4 <TurnRight>:
void TurnRight(char mode)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	71fb      	strb	r3, [r7, #7]
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800a0ae:	79fb      	ldrb	r3, [r7, #7]
 800a0b0:	2b53      	cmp	r3, #83	; 0x53
 800a0b2:	d027      	beq.n	800a104 <TurnRight+0x60>
 800a0b4:	2b54      	cmp	r3, #84	; 0x54
 800a0b6:	d000      	beq.n	800a0ba <TurnRight+0x16>
	case 'S':
		//スラローム
		SlalomRight();
		break;
	default :
		break;
 800a0b8:	e027      	b.n	800a10a <TurnRight+0x66>
		Decel(45, 0);
 800a0ba:	eddf 0a16 	vldr	s1, [pc, #88]	; 800a114 <TurnRight+0x70>
 800a0be:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800a118 <TurnRight+0x74>
 800a0c2:	f7ff fdf5 	bl	8009cb0 <Decel>
		EmitterOFF();
 800a0c6:	f006 fead 	bl	8010e24 <EmitterOFF>
		PIDChangeFlag(A_VELO_PID, 0);
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	f007 fc4f 	bl	8011970 <PIDChangeFlag>
		Rotate( 90 , 2*M_PI);//1.5
 800a0d2:	eddf 0a12 	vldr	s1, [pc, #72]	; 800a11c <TurnRight+0x78>
 800a0d6:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800a120 <TurnRight+0x7c>
 800a0da:	f7fe fef1 	bl	8008ec0 <Rotate>
		EmitterON();
 800a0de:	f006 fe93 	bl	8010e08 <EmitterON>
		HAL_Delay(100);
 800a0e2:	2064      	movs	r0, #100	; 0x64
 800a0e4:	f007 ff88 	bl	8011ff8 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	f007 fc40 	bl	8011970 <PIDChangeFlag>
		Accel(45, ExploreVelocity);
 800a0f0:	4b0c      	ldr	r3, [pc, #48]	; (800a124 <TurnRight+0x80>)
 800a0f2:	edd3 7a00 	vldr	s15, [r3]
 800a0f6:	eef0 0a67 	vmov.f32	s1, s15
 800a0fa:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800a118 <TurnRight+0x74>
 800a0fe:	f7ff fce3 	bl	8009ac8 <Accel>
		break;
 800a102:	e002      	b.n	800a10a <TurnRight+0x66>
		SlalomRight();
 800a104:	f7ff f920 	bl	8009348 <SlalomRight>
		break;
 800a108:	bf00      	nop
	}


}
 800a10a:	bf00      	nop
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	00000000 	.word	0x00000000
 800a118:	42340000 	.word	0x42340000
 800a11c:	40c90fdb 	.word	0x40c90fdb
 800a120:	42b40000 	.word	0x42b40000
 800a124:	20000bf8 	.word	0x20000bf8

0800a128 <TurnLeft>:
void TurnLeft(char mode)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	71fb      	strb	r3, [r7, #7]
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800a132:	79fb      	ldrb	r3, [r7, #7]
 800a134:	2b53      	cmp	r3, #83	; 0x53
 800a136:	d02a      	beq.n	800a18e <TurnLeft+0x66>
 800a138:	2b54      	cmp	r3, #84	; 0x54
 800a13a:	d000      	beq.n	800a13e <TurnLeft+0x16>
	case 'S':
		//スラローム
		SlalomLeft();
		break;
	default :
		break;
 800a13c:	e02a      	b.n	800a194 <TurnLeft+0x6c>
		Decel(45, 0);
 800a13e:	eddf 0a17 	vldr	s1, [pc, #92]	; 800a19c <TurnLeft+0x74>
 800a142:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800a1a0 <TurnLeft+0x78>
 800a146:	f7ff fdb3 	bl	8009cb0 <Decel>
		EmitterOFF();
 800a14a:	f006 fe6b 	bl	8010e24 <EmitterOFF>
		PIDChangeFlag(A_VELO_PID, 0);
 800a14e:	2100      	movs	r1, #0
 800a150:	2000      	movs	r0, #0
 800a152:	f007 fc0d 	bl	8011970 <PIDChangeFlag>
		Rotate( 90 , -2*M_PI);//-1.5
 800a156:	eddf 0a13 	vldr	s1, [pc, #76]	; 800a1a4 <TurnLeft+0x7c>
 800a15a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a1a8 <TurnLeft+0x80>
 800a15e:	f7fe feaf 	bl	8008ec0 <Rotate>
		EmitterON();
 800a162:	f006 fe51 	bl	8010e08 <EmitterON>
		HAL_Delay(100);
 800a166:	2064      	movs	r0, #100	; 0x64
 800a168:	f007 ff46 	bl	8011ff8 <HAL_Delay>
		HAL_Delay(100);
 800a16c:	2064      	movs	r0, #100	; 0x64
 800a16e:	f007 ff43 	bl	8011ff8 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800a172:	2101      	movs	r1, #1
 800a174:	2000      	movs	r0, #0
 800a176:	f007 fbfb 	bl	8011970 <PIDChangeFlag>
		Accel(45, ExploreVelocity);
 800a17a:	4b0c      	ldr	r3, [pc, #48]	; (800a1ac <TurnLeft+0x84>)
 800a17c:	edd3 7a00 	vldr	s15, [r3]
 800a180:	eef0 0a67 	vmov.f32	s1, s15
 800a184:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800a1a0 <TurnLeft+0x78>
 800a188:	f7ff fc9e 	bl	8009ac8 <Accel>
		break;
 800a18c:	e002      	b.n	800a194 <TurnLeft+0x6c>
		SlalomLeft();
 800a18e:	f7ff fabf 	bl	8009710 <SlalomLeft>
		break;
 800a192:	bf00      	nop
	}

}
 800a194:	bf00      	nop
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	00000000 	.word	0x00000000
 800a1a0:	42340000 	.word	0x42340000
 800a1a4:	c0c90fdb 	.word	0xc0c90fdb
 800a1a8:	42b40000 	.word	0x42b40000
 800a1ac:	20000bf8 	.word	0x20000bf8

0800a1b0 <GoBack>:
void GoBack()
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	af00      	add	r7, sp, #0
	//減速して
	Decel(45, 0);
 800a1b4:	eddf 0a18 	vldr	s1, [pc, #96]	; 800a218 <GoBack+0x68>
 800a1b8:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a21c <GoBack+0x6c>
 800a1bc:	f7ff fd78 	bl	8009cb0 <Decel>

	Rotate(180, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
	EmitterON();

#else
	Pos.Dir = right;
 800a1c0:	4b17      	ldr	r3, [pc, #92]	; (800a220 <GoBack+0x70>)
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	711a      	strb	r2, [r3, #4]
	PIDChangeFlag(A_VELO_PID, 0);
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	f007 fbd1 	bl	8011970 <PIDChangeFlag>
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800a1ce:	eddf 0a15 	vldr	s1, [pc, #84]	; 800a224 <GoBack+0x74>
 800a1d2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800a228 <GoBack+0x78>
 800a1d6:	f7fe fe73 	bl	8008ec0 <Rotate>
	//acc = AjustCenter();
	Pos.Dir = right;
 800a1da:	4b11      	ldr	r3, [pc, #68]	; (800a220 <GoBack+0x70>)
 800a1dc:	2201      	movs	r2, #1
 800a1de:	711a      	strb	r2, [r3, #4]
	Rotate(90, 2*M_PI);
 800a1e0:	eddf 0a10 	vldr	s1, [pc, #64]	; 800a224 <GoBack+0x74>
 800a1e4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a228 <GoBack+0x78>
 800a1e8:	f7fe fe6a 	bl	8008ec0 <Rotate>
	PIDChangeFlag(A_VELO_PID, 1);
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	f007 fbbe 	bl	8011970 <PIDChangeFlag>
	Pos.Dir = back;
 800a1f4:	4b0a      	ldr	r3, [pc, #40]	; (800a220 <GoBack+0x70>)
 800a1f6:	2203      	movs	r2, #3
 800a1f8:	711a      	strb	r2, [r3, #4]
#endif

	//acc = AjustCenter();
//	/Angle = TargetAngle;

	HAL_Delay(200);
 800a1fa:	20c8      	movs	r0, #200	; 0xc8
 800a1fc:	f007 fefc 	bl	8011ff8 <HAL_Delay>

	Accel(45, ExploreVelocity);
 800a200:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <GoBack+0x7c>)
 800a202:	edd3 7a00 	vldr	s15, [r3]
 800a206:	eef0 0a67 	vmov.f32	s1, s15
 800a20a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800a21c <GoBack+0x6c>
 800a20e:	f7ff fc5b 	bl	8009ac8 <Accel>
	//ここまでで目標走行距離を完了する

}
 800a212:	bf00      	nop
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	00000000 	.word	0x00000000
 800a21c:	42340000 	.word	0x42340000
 800a220:	20000000 	.word	0x20000000
 800a224:	40c90fdb 	.word	0x40c90fdb
 800a228:	42b40000 	.word	0x42b40000
 800a22c:	20000bf8 	.word	0x20000bf8

0800a230 <changeDirection>:

void changeDirection()
{
 800a230:	b480      	push	{r7}
 800a232:	af00      	add	r7, sp, #0
	//停止状態から、次の座標がわかっているときに使う
	//次に向かうべき座標と今の座標から、向くべき方向に回転する（停止状態からの挙動）
		//差はxyが±どちらかに1違うだけ

	if(Pos.X + 1 == Pos.NextX)
 800a234:	4b17      	ldr	r3, [pc, #92]	; (800a294 <changeDirection+0x64>)
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	3301      	adds	r3, #1
 800a23a:	4a16      	ldr	r2, [pc, #88]	; (800a294 <changeDirection+0x64>)
 800a23c:	7a12      	ldrb	r2, [r2, #8]
 800a23e:	4293      	cmp	r3, r2
 800a240:	d103      	bne.n	800a24a <changeDirection+0x1a>
	{
		Pos.NextCar = east;
 800a242:	4b14      	ldr	r3, [pc, #80]	; (800a294 <changeDirection+0x64>)
 800a244:	2202      	movs	r2, #2
 800a246:	72da      	strb	r2, [r3, #11]
	else if(Pos.Y - 1 == Pos.NextY)
	{
		Pos.NextCar = south;
	}

}
 800a248:	e01f      	b.n	800a28a <changeDirection+0x5a>
	else if(Pos.X - 1 == Pos.NextX)
 800a24a:	4b12      	ldr	r3, [pc, #72]	; (800a294 <changeDirection+0x64>)
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	3b01      	subs	r3, #1
 800a250:	4a10      	ldr	r2, [pc, #64]	; (800a294 <changeDirection+0x64>)
 800a252:	7a12      	ldrb	r2, [r2, #8]
 800a254:	4293      	cmp	r3, r2
 800a256:	d103      	bne.n	800a260 <changeDirection+0x30>
		Pos.NextCar = west;
 800a258:	4b0e      	ldr	r3, [pc, #56]	; (800a294 <changeDirection+0x64>)
 800a25a:	2206      	movs	r2, #6
 800a25c:	72da      	strb	r2, [r3, #11]
}
 800a25e:	e014      	b.n	800a28a <changeDirection+0x5a>
	else if(Pos.Y + 1 == Pos.NextY)
 800a260:	4b0c      	ldr	r3, [pc, #48]	; (800a294 <changeDirection+0x64>)
 800a262:	785b      	ldrb	r3, [r3, #1]
 800a264:	3301      	adds	r3, #1
 800a266:	4a0b      	ldr	r2, [pc, #44]	; (800a294 <changeDirection+0x64>)
 800a268:	7a52      	ldrb	r2, [r2, #9]
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d103      	bne.n	800a276 <changeDirection+0x46>
		Pos.NextCar = north;
 800a26e:	4b09      	ldr	r3, [pc, #36]	; (800a294 <changeDirection+0x64>)
 800a270:	2200      	movs	r2, #0
 800a272:	72da      	strb	r2, [r3, #11]
}
 800a274:	e009      	b.n	800a28a <changeDirection+0x5a>
	else if(Pos.Y - 1 == Pos.NextY)
 800a276:	4b07      	ldr	r3, [pc, #28]	; (800a294 <changeDirection+0x64>)
 800a278:	785b      	ldrb	r3, [r3, #1]
 800a27a:	3b01      	subs	r3, #1
 800a27c:	4a05      	ldr	r2, [pc, #20]	; (800a294 <changeDirection+0x64>)
 800a27e:	7a52      	ldrb	r2, [r2, #9]
 800a280:	4293      	cmp	r3, r2
 800a282:	d102      	bne.n	800a28a <changeDirection+0x5a>
		Pos.NextCar = south;
 800a284:	4b03      	ldr	r3, [pc, #12]	; (800a294 <changeDirection+0x64>)
 800a286:	2204      	movs	r2, #4
 800a288:	72da      	strb	r2, [r3, #11]
}
 800a28a:	bf00      	nop
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	20000000 	.word	0x20000000

0800a298 <Aim>:
void Aim()
{	//次の座標の方向を向く
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0

	//次の座標と現在の座標から向くべき方角を取得
	changeDirection();
 800a29e:	f7ff ffc7 	bl	800a230 <changeDirection>

	//次に向くべき方角と今の方角のギャップを埋める旋回をする
	int now = Pos.Car % 4;
 800a2a2:	4b27      	ldr	r3, [pc, #156]	; (800a340 <Aim+0xa8>)
 800a2a4:	795b      	ldrb	r3, [r3, #5]
 800a2a6:	f003 0303 	and.w	r3, r3, #3
 800a2aa:	607b      	str	r3, [r7, #4]
	int next = Pos.NextCar % 4;
 800a2ac:	4b24      	ldr	r3, [pc, #144]	; (800a340 <Aim+0xa8>)
 800a2ae:	7adb      	ldrb	r3, [r3, #11]
 800a2b0:	f003 0303 	and.w	r3, r3, #3
 800a2b4:	603b      	str	r3, [r7, #0]

	//差が正なら右回転
	switch(next-now)
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	3302      	adds	r3, #2
 800a2be:	2b04      	cmp	r3, #4
 800a2c0:	d834      	bhi.n	800a32c <Aim+0x94>
 800a2c2:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <Aim+0x30>)
 800a2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c8:	0800a319 	.word	0x0800a319
 800a2cc:	0800a2f1 	.word	0x0800a2f1
 800a2d0:	0800a32d 	.word	0x0800a32d
 800a2d4:	0800a2dd 	.word	0x0800a2dd
 800a2d8:	0800a305 	.word	0x0800a305
	{
	case 0:
		break;
	case 1:
		Pos.Dir = right;
 800a2dc:	4b18      	ldr	r3, [pc, #96]	; (800a340 <Aim+0xa8>)
 800a2de:	2201      	movs	r2, #1
 800a2e0:	711a      	strb	r2, [r3, #4]
		Rotate( 90 , 2*M_PI);
 800a2e2:	eddf 0a18 	vldr	s1, [pc, #96]	; 800a344 <Aim+0xac>
 800a2e6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a348 <Aim+0xb0>
 800a2ea:	f7fe fde9 	bl	8008ec0 <Rotate>
		break;
 800a2ee:	e01e      	b.n	800a32e <Aim+0x96>
	case -1:
		Pos.Dir = left;
 800a2f0:	4b13      	ldr	r3, [pc, #76]	; (800a340 <Aim+0xa8>)
 800a2f2:	2205      	movs	r2, #5
 800a2f4:	711a      	strb	r2, [r3, #4]
		Rotate( 90 , -2*M_PI);
 800a2f6:	eddf 0a15 	vldr	s1, [pc, #84]	; 800a34c <Aim+0xb4>
 800a2fa:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a348 <Aim+0xb0>
 800a2fe:	f7fe fddf 	bl	8008ec0 <Rotate>
		break;
 800a302:	e014      	b.n	800a32e <Aim+0x96>
	case 2:
		Pos.Dir = back;
 800a304:	4b0e      	ldr	r3, [pc, #56]	; (800a340 <Aim+0xa8>)
 800a306:	2203      	movs	r2, #3
 800a308:	711a      	strb	r2, [r3, #4]
		Rotate( 180 , 2*M_PI);
 800a30a:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800a344 <Aim+0xac>
 800a30e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a350 <Aim+0xb8>
 800a312:	f7fe fdd5 	bl	8008ec0 <Rotate>
		break;
 800a316:	e00a      	b.n	800a32e <Aim+0x96>
	case -2:
		Pos.Dir = back;
 800a318:	4b09      	ldr	r3, [pc, #36]	; (800a340 <Aim+0xa8>)
 800a31a:	2203      	movs	r2, #3
 800a31c:	711a      	strb	r2, [r3, #4]
		Rotate( 180 , -2*M_PI);
 800a31e:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800a34c <Aim+0xb4>
 800a322:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800a350 <Aim+0xb8>
 800a326:	f7fe fdcb 	bl	8008ec0 <Rotate>
		break;
 800a32a:	e000      	b.n	800a32e <Aim+0x96>
	default:
		break;
 800a32c:	bf00      	nop
	}
	Pos.Car = Pos.NextCar;
 800a32e:	4b04      	ldr	r3, [pc, #16]	; (800a340 <Aim+0xa8>)
 800a330:	7ada      	ldrb	r2, [r3, #11]
 800a332:	4b03      	ldr	r3, [pc, #12]	; (800a340 <Aim+0xa8>)
 800a334:	715a      	strb	r2, [r3, #5]
}
 800a336:	bf00      	nop
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20000000 	.word	0x20000000
 800a344:	40c90fdb 	.word	0x40c90fdb
 800a348:	42b40000 	.word	0x42b40000
 800a34c:	c0c90fdb 	.word	0xc0c90fdb
 800a350:	43340000 	.word	0x43340000

0800a354 <SelectAction>:
//{
//
//}
//進行方向決定の処理をどうするかで書き方が変わる。フラグを使うとか。
 void SelectAction(char turn_mode)	//前後左右であらわす
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	71fb      	strb	r3, [r7, #7]
	//現在の座標から次の座標に行くまでの処理を一つのアクションとする
	switch(Pos.Dir%4) //条件を増やす場合は割る数字に注意
 800a35e:	4b1d      	ldr	r3, [pc, #116]	; (800a3d4 <SelectAction+0x80>)
 800a360:	791b      	ldrb	r3, [r3, #4]
 800a362:	f003 0303 	and.w	r3, r3, #3
 800a366:	2b05      	cmp	r3, #5
 800a368:	d82e      	bhi.n	800a3c8 <SelectAction+0x74>
 800a36a:	a201      	add	r2, pc, #4	; (adr r2, 800a370 <SelectAction+0x1c>)
 800a36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a370:	0800a389 	.word	0x0800a389
 800a374:	0800a3af 	.word	0x0800a3af
 800a378:	0800a3c9 	.word	0x0800a3c9
 800a37c:	0800a3c3 	.word	0x0800a3c3
 800a380:	0800a3c9 	.word	0x0800a3c9
 800a384:	0800a3b9 	.word	0x0800a3b9
	{
	//直進
	case front:
		//直進flagオン
		//PIDChangeFlag( A_VELO_PID, 1);
		AddVelocity = 0;
 800a388:	4b13      	ldr	r3, [pc, #76]	; (800a3d8 <SelectAction+0x84>)
 800a38a:	f04f 0200 	mov.w	r2, #0
 800a38e:	601a      	str	r2, [r3, #0]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800a390:	4b12      	ldr	r3, [pc, #72]	; (800a3dc <SelectAction+0x88>)
 800a392:	edd3 7a00 	vldr	s15, [r3]
 800a396:	4b10      	ldr	r3, [pc, #64]	; (800a3d8 <SelectAction+0x84>)
 800a398:	ed93 7a00 	vldr	s14, [r3]
 800a39c:	eeb0 1a47 	vmov.f32	s2, s14
 800a3a0:	eef0 0a67 	vmov.f32	s1, s15
 800a3a4:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a3e0 <SelectAction+0x8c>
 800a3a8:	f7ff fd56 	bl	8009e58 <GoStraight>

		break;
 800a3ac:	e00d      	b.n	800a3ca <SelectAction+0x76>
	//右方向
	case right:	//左右の違いは目標値がそれぞれ入れ替わるだけだから、上手く書けば一つの関数でできる
		//スラロームターンと減速プラスターンetc
		TurnRight(turn_mode);
 800a3ae:	79fb      	ldrb	r3, [r7, #7]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7ff fe77 	bl	800a0a4 <TurnRight>
		break;
 800a3b6:	e008      	b.n	800a3ca <SelectAction+0x76>
	//左方向
	case left:
		TurnLeft(turn_mode);
 800a3b8:	79fb      	ldrb	r3, [r7, #7]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7ff feb4 	bl	800a128 <TurnLeft>
		break;
 800a3c0:	e003      	b.n	800a3ca <SelectAction+0x76>
	case back:
		GoBack();	//Uターン
 800a3c2:	f7ff fef5 	bl	800a1b0 <GoBack>
		break;
 800a3c6:	e000      	b.n	800a3ca <SelectAction+0x76>


	default :
		break;
 800a3c8:	bf00      	nop

	}
}
 800a3ca:	bf00      	nop
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	20000000 	.word	0x20000000
 800a3d8:	20000adc 	.word	0x20000adc
 800a3dc:	20000bf8 	.word	0x20000bf8
 800a3e0:	42b40000 	.word	0x42b40000
 800a3e4:	00000000 	.word	0x00000000

0800a3e8 <Explore_IT>:
	//4つめが終わる前に0.5msが過ぎる説。
}


void Explore_IT()
{
 800a3e8:	b5b0      	push	{r4, r5, r7, lr}
 800a3ea:	b086      	sub	sp, #24
 800a3ec:	af00      	add	r7, sp, #0

//*-----------------*/

	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a3ee:	4bb6      	ldr	r3, [pc, #728]	; (800a6c8 <Explore_IT+0x2e0>)
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800a3f6:	332f      	adds	r3, #47	; 0x2f
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	4bb4      	ldr	r3, [pc, #720]	; (800a6cc <Explore_IT+0x2e4>)
 800a3fc:	601a      	str	r2, [r3, #0]
	TIM3->CNT = INITIAL_PULSE;
 800a3fe:	4bb2      	ldr	r3, [pc, #712]	; (800a6c8 <Explore_IT+0x2e0>)
 800a400:	f247 522f 	movw	r2, #29999	; 0x752f
 800a404:	625a      	str	r2, [r3, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a406:	4bb2      	ldr	r3, [pc, #712]	; (800a6d0 <Explore_IT+0x2e8>)
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800a40e:	332f      	adds	r3, #47	; 0x2f
 800a410:	461a      	mov	r2, r3
 800a412:	4bae      	ldr	r3, [pc, #696]	; (800a6cc <Explore_IT+0x2e4>)
 800a414:	605a      	str	r2, [r3, #4]
	TIM4->CNT = INITIAL_PULSE;
 800a416:	4bae      	ldr	r3, [pc, #696]	; (800a6d0 <Explore_IT+0x2e8>)
 800a418:	f247 522f 	movw	r2, #29999	; 0x752f
 800a41c:	625a      	str	r2, [r3, #36]	; 0x24

	//速度 mm/s
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a41e:	4bab      	ldr	r3, [pc, #684]	; (800a6cc <Explore_IT+0x2e4>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	ee07 3a90 	vmov	s15, r3
 800a426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a42a:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 800a6d4 <Explore_IT+0x2ec>
 800a42e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a432:	4ba9      	ldr	r3, [pc, #676]	; (800a6d8 <Explore_IT+0x2f0>)
 800a434:	edc3 7a00 	vstr	s15, [r3]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a438:	4ba4      	ldr	r3, [pc, #656]	; (800a6cc <Explore_IT+0x2e4>)
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	ee07 3a90 	vmov	s15, r3
 800a440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a444:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800a6d4 <Explore_IT+0x2ec>
 800a448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a44c:	4ba2      	ldr	r3, [pc, #648]	; (800a6d8 <Explore_IT+0x2f0>)
 800a44e:	edc3 7a01 	vstr	s15, [r3, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a452:	4ba1      	ldr	r3, [pc, #644]	; (800a6d8 <Explore_IT+0x2f0>)
 800a454:	ed93 7a00 	vldr	s14, [r3]
 800a458:	4b9f      	ldr	r3, [pc, #636]	; (800a6d8 <Explore_IT+0x2f0>)
 800a45a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a45e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a462:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a46a:	4b9b      	ldr	r3, [pc, #620]	; (800a6d8 <Explore_IT+0x2f0>)
 800a46c:	edc3 7a02 	vstr	s15, [r3, #8]
//	}


	//移動量 mm/msを積算

	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a470:	4b9a      	ldr	r3, [pc, #616]	; (800a6dc <Explore_IT+0x2f4>)
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	4b95      	ldr	r3, [pc, #596]	; (800a6cc <Explore_IT+0x2e4>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4413      	add	r3, r2
 800a47a:	4a98      	ldr	r2, [pc, #608]	; (800a6dc <Explore_IT+0x2f4>)
 800a47c:	6013      	str	r3, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a47e:	4b97      	ldr	r3, [pc, #604]	; (800a6dc <Explore_IT+0x2f4>)
 800a480:	685a      	ldr	r2, [r3, #4]
 800a482:	4b92      	ldr	r3, [pc, #584]	; (800a6cc <Explore_IT+0x2e4>)
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	4413      	add	r3, r2
 800a488:	4a94      	ldr	r2, [pc, #592]	; (800a6dc <Explore_IT+0x2f4>)
 800a48a:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a48c:	4b93      	ldr	r3, [pc, #588]	; (800a6dc <Explore_IT+0x2f4>)
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	4b92      	ldr	r3, [pc, #584]	; (800a6dc <Explore_IT+0x2f4>)
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	4413      	add	r3, r2
 800a496:	4a91      	ldr	r2, [pc, #580]	; (800a6dc <Explore_IT+0x2f4>)
 800a498:	6093      	str	r3, [r2, #8]
#if 1
	//static float angle=0;
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
 800a49a:	2138      	movs	r1, #56	; 0x38
 800a49c:	2037      	movs	r0, #55	; 0x37
 800a49e:	f006 fb69 	bl	8010b74 <ReadIMU>
 800a4a2:	eef0 7a40 	vmov.f32	s15, s0
 800a4a6:	4b8e      	ldr	r3, [pc, #568]	; (800a6e0 <Explore_IT+0x2f8>)
 800a4a8:	edc3 7a00 	vstr	s15, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a4ac:	4b8c      	ldr	r3, [pc, #560]	; (800a6e0 <Explore_IT+0x2f8>)
 800a4ae:	ed93 7a00 	vldr	s14, [r3]
 800a4b2:	4b8c      	ldr	r3, [pc, #560]	; (800a6e4 <Explore_IT+0x2fc>)
 800a4b4:	edd3 7a00 	vldr	s15, [r3]
 800a4b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4bc:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800a6e8 <Explore_IT+0x300>
 800a4c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a4c4:	edc7 7a05 	vstr	s15, [r7, #20]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a4c8:	6978      	ldr	r0, [r7, #20]
 800a4ca:	f7fd ff75 	bl	80083b8 <__aeabi_f2d>
 800a4ce:	a378      	add	r3, pc, #480	; (adr r3, 800a6b0 <Explore_IT+0x2c8>)
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	f7fd ffc8 	bl	8008468 <__aeabi_dmul>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	460c      	mov	r4, r1
 800a4dc:	4625      	mov	r5, r4
 800a4de:	461c      	mov	r4, r3
 800a4e0:	4b82      	ldr	r3, [pc, #520]	; (800a6ec <Explore_IT+0x304>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fd ff67 	bl	80083b8 <__aeabi_f2d>
 800a4ea:	a373      	add	r3, pc, #460	; (adr r3, 800a6b8 <Explore_IT+0x2d0>)
 800a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f0:	f7fd ffba 	bl	8008468 <__aeabi_dmul>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	f7fd fdfe 	bl	80080fc <__adddf3>
 800a500:	4603      	mov	r3, r0
 800a502:	460c      	mov	r4, r1
 800a504:	4618      	mov	r0, r3
 800a506:	4621      	mov	r1, r4
 800a508:	f7fe faa6 	bl	8008a58 <__aeabi_d2f>
 800a50c:	4603      	mov	r3, r0
 800a50e:	ee07 3a90 	vmov	s15, r3
 800a512:	eef1 7a67 	vneg.f32	s15, s15
 800a516:	4b76      	ldr	r3, [pc, #472]	; (800a6f0 <Explore_IT+0x308>)
 800a518:	edc3 7a00 	vstr	s15, [r3]
    zg_last = zg_law;
 800a51c:	4a73      	ldr	r2, [pc, #460]	; (800a6ec <Explore_IT+0x304>)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	6013      	str	r3, [r2, #0]
	Angle += AngularV * T1;
 800a522:	4b73      	ldr	r3, [pc, #460]	; (800a6f0 <Explore_IT+0x308>)
 800a524:	edd3 7a00 	vldr	s15, [r3]
 800a528:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800a6f4 <Explore_IT+0x30c>
 800a52c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a530:	4b71      	ldr	r3, [pc, #452]	; (800a6f8 <Explore_IT+0x310>)
 800a532:	edd3 7a00 	vldr	s15, [r3]
 800a536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a53a:	4b6f      	ldr	r3, [pc, #444]	; (800a6f8 <Explore_IT+0x310>)
 800a53c:	edc3 7a00 	vstr	s15, [r3]
	AngularV = ( CurrentVelocity[LEFT] - CurrentVelocity[RIGHT] ) *convert_to_angularv;
	Angle += AngularV * T1;

#endif

	int wall_d =0,wall_l =0,wall_r =0,wall_f=0;
 800a540:	2300      	movs	r3, #0
 800a542:	613b      	str	r3, [r7, #16]
 800a544:	2300      	movs	r3, #0
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	2300      	movs	r3, #0
 800a54a:	60bb      	str	r3, [r7, #8]
 800a54c:	2300      	movs	r3, #0
 800a54e:	607b      	str	r3, [r7, #4]
		int ang_out=0;
 800a550:	2300      	movs	r3, #0
 800a552:	603b      	str	r3, [r7, #0]

		if( Pos.Dir == front || Pos.Act == compensate || Pos.Act == rotate)
 800a554:	4b69      	ldr	r3, [pc, #420]	; (800a6fc <Explore_IT+0x314>)
 800a556:	791b      	ldrb	r3, [r3, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d008      	beq.n	800a56e <Explore_IT+0x186>
 800a55c:	4b67      	ldr	r3, [pc, #412]	; (800a6fc <Explore_IT+0x314>)
 800a55e:	799b      	ldrb	r3, [r3, #6]
 800a560:	2b06      	cmp	r3, #6
 800a562:	d004      	beq.n	800a56e <Explore_IT+0x186>
 800a564:	4b65      	ldr	r3, [pc, #404]	; (800a6fc <Explore_IT+0x314>)
 800a566:	799b      	ldrb	r3, [r3, #6]
 800a568:	2b03      	cmp	r3, #3
 800a56a:	f040 8117 	bne.w	800a79c <Explore_IT+0x3b4>
		{
			if( Pid[A_VELO_PID].flag == 1 )
 800a56e:	4b64      	ldr	r3, [pc, #400]	; (800a700 <Explore_IT+0x318>)
 800a570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a572:	2b01      	cmp	r3, #1
 800a574:	d116      	bne.n	800a5a4 <Explore_IT+0x1bc>
			{
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a576:	4b63      	ldr	r3, [pc, #396]	; (800a704 <Explore_IT+0x31c>)
 800a578:	edd3 7a00 	vldr	s15, [r3]
 800a57c:	4b5e      	ldr	r3, [pc, #376]	; (800a6f8 <Explore_IT+0x310>)
 800a57e:	ed93 7a00 	vldr	s14, [r3]
 800a582:	eef0 0a47 	vmov.f32	s1, s14
 800a586:	eeb0 0a67 	vmov.f32	s0, s15
 800a58a:	2000      	movs	r0, #0
 800a58c:	f007 fa44 	bl	8011a18 <PIDControl>
 800a590:	6038      	str	r0, [r7, #0]
				TargetAngularV = (float)ang_out;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	ee07 3a90 	vmov	s15, r3
 800a598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a59c:	4b5a      	ldr	r3, [pc, #360]	; (800a708 <Explore_IT+0x320>)
 800a59e:	edc3 7a00 	vstr	s15, [r3]
 800a5a2:	e0fb      	b.n	800a79c <Explore_IT+0x3b4>
			}
			else if( Pid[D_WALL_PID].flag == 1 )
 800a5a4:	4b56      	ldr	r3, [pc, #344]	; (800a700 <Explore_IT+0x318>)
 800a5a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d12a      	bne.n	800a602 <Explore_IT+0x21a>
			{
				wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800a5ac:	4b57      	ldr	r3, [pc, #348]	; (800a70c <Explore_IT+0x324>)
 800a5ae:	edd3 6a02 	vldr	s13, [r3, #8]
 800a5b2:	4b56      	ldr	r3, [pc, #344]	; (800a70c <Explore_IT+0x324>)
 800a5b4:	ed93 7a01 	vldr	s14, [r3, #4]
 800a5b8:	4b55      	ldr	r3, [pc, #340]	; (800a710 <Explore_IT+0x328>)
 800a5ba:	edd3 7a00 	vldr	s15, [r3]
 800a5be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5c2:	eef0 0a67 	vmov.f32	s1, s15
 800a5c6:	eeb0 0a66 	vmov.f32	s0, s13
 800a5ca:	2001      	movs	r0, #1
 800a5cc:	f007 fa24 	bl	8011a18 <PIDControl>
 800a5d0:	6138      	str	r0, [r7, #16]
				TargetAngularV = (float)wall_d*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	ee07 3a90 	vmov	s15, r3
 800a5d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5dc:	ee17 0a90 	vmov	r0, s15
 800a5e0:	f7fd feea 	bl	80083b8 <__aeabi_f2d>
 800a5e4:	a336      	add	r3, pc, #216	; (adr r3, 800a6c0 <Explore_IT+0x2d8>)
 800a5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ea:	f7fd ff3d 	bl	8008468 <__aeabi_dmul>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	4621      	mov	r1, r4
 800a5f6:	f7fe fa2f 	bl	8008a58 <__aeabi_d2f>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	4b42      	ldr	r3, [pc, #264]	; (800a708 <Explore_IT+0x320>)
 800a5fe:	601a      	str	r2, [r3, #0]
 800a600:	e0cc      	b.n	800a79c <Explore_IT+0x3b4>
			}
			else if( Pid[L_WALL_PID].flag == 1 )
 800a602:	4b3f      	ldr	r3, [pc, #252]	; (800a700 <Explore_IT+0x318>)
 800a604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d125      	bne.n	800a658 <Explore_IT+0x270>
			{
				wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
 800a60c:	4b3f      	ldr	r3, [pc, #252]	; (800a70c <Explore_IT+0x324>)
 800a60e:	edd3 7a02 	vldr	s15, [r3, #8]
 800a612:	4b40      	ldr	r3, [pc, #256]	; (800a714 <Explore_IT+0x32c>)
 800a614:	ed93 7a02 	vldr	s14, [r3, #8]
 800a618:	eef0 0a47 	vmov.f32	s1, s14
 800a61c:	eeb0 0a67 	vmov.f32	s0, s15
 800a620:	2002      	movs	r0, #2
 800a622:	f007 f9f9 	bl	8011a18 <PIDControl>
 800a626:	60f8      	str	r0, [r7, #12]
				TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	ee07 3a90 	vmov	s15, r3
 800a62e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a632:	ee17 0a90 	vmov	r0, s15
 800a636:	f7fd febf 	bl	80083b8 <__aeabi_f2d>
 800a63a:	a321      	add	r3, pc, #132	; (adr r3, 800a6c0 <Explore_IT+0x2d8>)
 800a63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a640:	f7fd ff12 	bl	8008468 <__aeabi_dmul>
 800a644:	4603      	mov	r3, r0
 800a646:	460c      	mov	r4, r1
 800a648:	4618      	mov	r0, r3
 800a64a:	4621      	mov	r1, r4
 800a64c:	f7fe fa04 	bl	8008a58 <__aeabi_d2f>
 800a650:	4602      	mov	r2, r0
 800a652:	4b2d      	ldr	r3, [pc, #180]	; (800a708 <Explore_IT+0x320>)
 800a654:	601a      	str	r2, [r3, #0]
 800a656:	e0a1      	b.n	800a79c <Explore_IT+0x3b4>

			}
			else if( Pid[R_WALL_PID].flag == 1 )
 800a658:	4b29      	ldr	r3, [pc, #164]	; (800a700 <Explore_IT+0x318>)
 800a65a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d15a      	bne.n	800a718 <Explore_IT+0x330>
			{
				wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800a662:	4b2c      	ldr	r3, [pc, #176]	; (800a714 <Explore_IT+0x32c>)
 800a664:	edd3 7a01 	vldr	s15, [r3, #4]
 800a668:	4b28      	ldr	r3, [pc, #160]	; (800a70c <Explore_IT+0x324>)
 800a66a:	ed93 7a01 	vldr	s14, [r3, #4]
 800a66e:	eef0 0a47 	vmov.f32	s1, s14
 800a672:	eeb0 0a67 	vmov.f32	s0, s15
 800a676:	2003      	movs	r0, #3
 800a678:	f007 f9ce 	bl	8011a18 <PIDControl>
 800a67c:	60b8      	str	r0, [r7, #8]
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	ee07 3a90 	vmov	s15, r3
 800a684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a688:	ee17 0a90 	vmov	r0, s15
 800a68c:	f7fd fe94 	bl	80083b8 <__aeabi_f2d>
 800a690:	a30b      	add	r3, pc, #44	; (adr r3, 800a6c0 <Explore_IT+0x2d8>)
 800a692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a696:	f7fd fee7 	bl	8008468 <__aeabi_dmul>
 800a69a:	4603      	mov	r3, r0
 800a69c:	460c      	mov	r4, r1
 800a69e:	4618      	mov	r0, r3
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	f7fe f9d9 	bl	8008a58 <__aeabi_d2f>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	4b17      	ldr	r3, [pc, #92]	; (800a708 <Explore_IT+0x320>)
 800a6aa:	601a      	str	r2, [r3, #0]
 800a6ac:	e076      	b.n	800a79c <Explore_IT+0x3b4>
 800a6ae:	bf00      	nop
 800a6b0:	47ae147b 	.word	0x47ae147b
 800a6b4:	3f847ae1 	.word	0x3f847ae1
 800a6b8:	7ae147ae 	.word	0x7ae147ae
 800a6bc:	3fefae14 	.word	0x3fefae14
 800a6c0:	d2f1a9fc 	.word	0xd2f1a9fc
 800a6c4:	3f50624d 	.word	0x3f50624d
 800a6c8:	40000400 	.word	0x40000400
 800a6cc:	20000cc0 	.word	0x20000cc0
 800a6d0:	40000800 	.word	0x40000800
 800a6d4:	3f8177cd 	.word	0x3f8177cd
 800a6d8:	20000b10 	.word	0x20000b10
 800a6dc:	20000b04 	.word	0x20000b04
 800a6e0:	200002d4 	.word	0x200002d4
 800a6e4:	200002d0 	.word	0x200002d0
 800a6e8:	3a8b7d78 	.word	0x3a8b7d78
 800a6ec:	2000021c 	.word	0x2000021c
 800a6f0:	20000224 	.word	0x20000224
 800a6f4:	3a83126f 	.word	0x3a83126f
 800a6f8:	20000228 	.word	0x20000228
 800a6fc:	20000000 	.word	0x20000000
 800a700:	20000318 	.word	0x20000318
 800a704:	20000afc 	.word	0x20000afc
 800a708:	20000ae0 	.word	0x20000ae0
 800a70c:	20000b44 	.word	0x20000b44
 800a710:	20000af4 	.word	0x20000af4
 800a714:	20000c04 	.word	0x20000c04
			}
			else if( Pid[F_WALL_PID].flag == 1)
 800a718:	4b55      	ldr	r3, [pc, #340]	; (800a870 <Explore_IT+0x488>)
 800a71a:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d13c      	bne.n	800a79c <Explore_IT+0x3b4>
			{
				wall_f = PIDControl( F_WALL_PID,   4000, (	(Photo[FR]+Photo[FL])));
 800a722:	4b54      	ldr	r3, [pc, #336]	; (800a874 <Explore_IT+0x48c>)
 800a724:	ed93 7a03 	vldr	s14, [r3, #12]
 800a728:	4b52      	ldr	r3, [pc, #328]	; (800a874 <Explore_IT+0x48c>)
 800a72a:	edd3 7a00 	vldr	s15, [r3]
 800a72e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a732:	eef0 0a67 	vmov.f32	s1, s15
 800a736:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800a878 <Explore_IT+0x490>
 800a73a:	2008      	movs	r0, #8
 800a73c:	f007 f96c 	bl	8011a18 <PIDControl>
 800a740:	6078      	str	r0, [r7, #4]
				TargetVelocity[BODY] = (float)wall_f*0.001;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	ee07 3a90 	vmov	s15, r3
 800a748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a74c:	ee17 0a90 	vmov	r0, s15
 800a750:	f7fd fe32 	bl	80083b8 <__aeabi_f2d>
 800a754:	a344      	add	r3, pc, #272	; (adr r3, 800a868 <Explore_IT+0x480>)
 800a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75a:	f7fd fe85 	bl	8008468 <__aeabi_dmul>
 800a75e:	4603      	mov	r3, r0
 800a760:	460c      	mov	r4, r1
 800a762:	4618      	mov	r0, r3
 800a764:	4621      	mov	r1, r4
 800a766:	f7fe f977 	bl	8008a58 <__aeabi_d2f>
 800a76a:	4602      	mov	r2, r0
 800a76c:	4b43      	ldr	r3, [pc, #268]	; (800a87c <Explore_IT+0x494>)
 800a76e:	609a      	str	r2, [r3, #8]
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a770:	4b43      	ldr	r3, [pc, #268]	; (800a880 <Explore_IT+0x498>)
 800a772:	edd3 7a00 	vldr	s15, [r3]
 800a776:	4b43      	ldr	r3, [pc, #268]	; (800a884 <Explore_IT+0x49c>)
 800a778:	ed93 7a00 	vldr	s14, [r3]
 800a77c:	eef0 0a47 	vmov.f32	s1, s14
 800a780:	eeb0 0a67 	vmov.f32	s0, s15
 800a784:	2000      	movs	r0, #0
 800a786:	f007 f947 	bl	8011a18 <PIDControl>
 800a78a:	6038      	str	r0, [r7, #0]
				TargetAngularV = (float)ang_out;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	ee07 3a90 	vmov	s15, r3
 800a792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a796:	4b3c      	ldr	r3, [pc, #240]	; (800a888 <Explore_IT+0x4a0>)
 800a798:	edc3 7a00 	vstr	s15, [r3]

				//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
			}
		}

	TargetVelocity[BODY] += Acceleration;
 800a79c:	4b37      	ldr	r3, [pc, #220]	; (800a87c <Explore_IT+0x494>)
 800a79e:	ed93 7a02 	vldr	s14, [r3, #8]
 800a7a2:	4b3a      	ldr	r3, [pc, #232]	; (800a88c <Explore_IT+0x4a4>)
 800a7a4:	edd3 7a00 	vldr	s15, [r3]
 800a7a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7ac:	4b33      	ldr	r3, [pc, #204]	; (800a87c <Explore_IT+0x494>)
 800a7ae:	edc3 7a02 	vstr	s15, [r3, #8]
	//AngularAcceleration += AngularLeapsity;
	TargetAngularV += AngularAcceleration;
 800a7b2:	4b35      	ldr	r3, [pc, #212]	; (800a888 <Explore_IT+0x4a0>)
 800a7b4:	ed93 7a00 	vldr	s14, [r3]
 800a7b8:	4b35      	ldr	r3, [pc, #212]	; (800a890 <Explore_IT+0x4a8>)
 800a7ba:	edd3 7a00 	vldr	s15, [r3]
 800a7be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7c2:	4b31      	ldr	r3, [pc, #196]	; (800a888 <Explore_IT+0x4a0>)
 800a7c4:	edc3 7a00 	vstr	s15, [r3]
	//TargetAngularV += AngularAcceleration;
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a7c8:	4b2c      	ldr	r3, [pc, #176]	; (800a87c <Explore_IT+0x494>)
 800a7ca:	ed93 7a02 	vldr	s14, [r3, #8]
 800a7ce:	4b2e      	ldr	r3, [pc, #184]	; (800a888 <Explore_IT+0x4a0>)
 800a7d0:	edd3 7a00 	vldr	s15, [r3]
 800a7d4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800a894 <Explore_IT+0x4ac>
 800a7d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a7dc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a7e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a7e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7e8:	4b24      	ldr	r3, [pc, #144]	; (800a87c <Explore_IT+0x494>)
 800a7ea:	edc3 7a01 	vstr	s15, [r3, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a7ee:	4b26      	ldr	r3, [pc, #152]	; (800a888 <Explore_IT+0x4a0>)
 800a7f0:	edd3 7a00 	vldr	s15, [r3]
 800a7f4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800a894 <Explore_IT+0x4ac>
 800a7f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a7fc:	4b1f      	ldr	r3, [pc, #124]	; (800a87c <Explore_IT+0x494>)
 800a7fe:	edd3 7a01 	vldr	s15, [r3, #4]
 800a802:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a806:	4b1d      	ldr	r3, [pc, #116]	; (800a87c <Explore_IT+0x494>)
 800a808:	edc3 7a00 	vstr	s15, [r3]

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a80c:	4b1b      	ldr	r3, [pc, #108]	; (800a87c <Explore_IT+0x494>)
 800a80e:	edd3 7a00 	vldr	s15, [r3]
 800a812:	4b21      	ldr	r3, [pc, #132]	; (800a898 <Explore_IT+0x4b0>)
 800a814:	ed93 7a00 	vldr	s14, [r3]
 800a818:	eef0 0a47 	vmov.f32	s1, s14
 800a81c:	eeb0 0a67 	vmov.f32	s0, s15
 800a820:	2004      	movs	r0, #4
 800a822:	f007 f8f9 	bl	8011a18 <PIDControl>
 800a826:	4602      	mov	r2, r0
 800a828:	4b1c      	ldr	r3, [pc, #112]	; (800a89c <Explore_IT+0x4b4>)
 800a82a:	601a      	str	r2, [r3, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a82c:	4b13      	ldr	r3, [pc, #76]	; (800a87c <Explore_IT+0x494>)
 800a82e:	edd3 7a01 	vldr	s15, [r3, #4]
 800a832:	4b19      	ldr	r3, [pc, #100]	; (800a898 <Explore_IT+0x4b0>)
 800a834:	ed93 7a01 	vldr	s14, [r3, #4]
 800a838:	eef0 0a47 	vmov.f32	s1, s14
 800a83c:	eeb0 0a67 	vmov.f32	s0, s15
 800a840:	2005      	movs	r0, #5
 800a842:	f007 f8e9 	bl	8011a18 <PIDControl>
 800a846:	4602      	mov	r2, r0
 800a848:	4b15      	ldr	r3, [pc, #84]	; (800a8a0 <Explore_IT+0x4b8>)
 800a84a:	601a      	str	r2, [r3, #0]

	//モータに出力
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a84c:	4b13      	ldr	r3, [pc, #76]	; (800a89c <Explore_IT+0x4b4>)
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	4b13      	ldr	r3, [pc, #76]	; (800a8a0 <Explore_IT+0x4b8>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4619      	mov	r1, r3
 800a856:	4610      	mov	r0, r2
 800a858:	f006 fbe6 	bl	8011028 <Motor_Switch>

}
 800a85c:	bf00      	nop
 800a85e:	3718      	adds	r7, #24
 800a860:	46bd      	mov	sp, r7
 800a862:	bdb0      	pop	{r4, r5, r7, pc}
 800a864:	f3af 8000 	nop.w
 800a868:	d2f1a9fc 	.word	0xd2f1a9fc
 800a86c:	3f50624d 	.word	0x3f50624d
 800a870:	20000318 	.word	0x20000318
 800a874:	20000b44 	.word	0x20000b44
 800a878:	457a0000 	.word	0x457a0000
 800a87c:	20000ad0 	.word	0x20000ad0
 800a880:	20000afc 	.word	0x20000afc
 800a884:	20000228 	.word	0x20000228
 800a888:	20000ae0 	.word	0x20000ae0
 800a88c:	2000022c 	.word	0x2000022c
 800a890:	20000230 	.word	0x20000230
 800a894:	4209999a 	.word	0x4209999a
 800a898:	20000b10 	.word	0x20000b10
 800a89c:	20000bfc 	.word	0x20000bfc
 800a8a0:	20000c18 	.word	0x20000c18
 800a8a4:	00000000 	.word	0x00000000

0800a8a8 <WritingFree_IT>:
void WritingFree_IT()
{
 800a8a8:	b5b0      	push	{r4, r5, r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a8ae:	4b90      	ldr	r3, [pc, #576]	; (800aaf0 <WritingFree_IT+0x248>)
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b2:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800a8b6:	332f      	adds	r3, #47	; 0x2f
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	4b8e      	ldr	r3, [pc, #568]	; (800aaf4 <WritingFree_IT+0x24c>)
 800a8bc:	601a      	str	r2, [r3, #0]
	TIM3->CNT = INITIAL_PULSE;
 800a8be:	4b8c      	ldr	r3, [pc, #560]	; (800aaf0 <WritingFree_IT+0x248>)
 800a8c0:	f247 522f 	movw	r2, #29999	; 0x752f
 800a8c4:	625a      	str	r2, [r3, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a8c6:	4b8c      	ldr	r3, [pc, #560]	; (800aaf8 <WritingFree_IT+0x250>)
 800a8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ca:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800a8ce:	332f      	adds	r3, #47	; 0x2f
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4b88      	ldr	r3, [pc, #544]	; (800aaf4 <WritingFree_IT+0x24c>)
 800a8d4:	605a      	str	r2, [r3, #4]
	TIM4->CNT = INITIAL_PULSE;
 800a8d6:	4b88      	ldr	r3, [pc, #544]	; (800aaf8 <WritingFree_IT+0x250>)
 800a8d8:	f247 522f 	movw	r2, #29999	; 0x752f
 800a8dc:	625a      	str	r2, [r3, #36]	; 0x24

	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a8de:	4b85      	ldr	r3, [pc, #532]	; (800aaf4 <WritingFree_IT+0x24c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8ea:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800aafc <WritingFree_IT+0x254>
 800a8ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a8f2:	4b83      	ldr	r3, [pc, #524]	; (800ab00 <WritingFree_IT+0x258>)
 800a8f4:	edc3 7a00 	vstr	s15, [r3]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a8f8:	4b7e      	ldr	r3, [pc, #504]	; (800aaf4 <WritingFree_IT+0x24c>)
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	ee07 3a90 	vmov	s15, r3
 800a900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a904:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800aafc <WritingFree_IT+0x254>
 800a908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a90c:	4b7c      	ldr	r3, [pc, #496]	; (800ab00 <WritingFree_IT+0x258>)
 800a90e:	edc3 7a01 	vstr	s15, [r3, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a912:	4b7b      	ldr	r3, [pc, #492]	; (800ab00 <WritingFree_IT+0x258>)
 800a914:	ed93 7a00 	vldr	s14, [r3]
 800a918:	4b79      	ldr	r3, [pc, #484]	; (800ab00 <WritingFree_IT+0x258>)
 800a91a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a91e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a922:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a92a:	4b75      	ldr	r3, [pc, #468]	; (800ab00 <WritingFree_IT+0x258>)
 800a92c:	edc3 7a02 	vstr	s15, [r3, #8]
//			velodebug_flag = 0;
//		}
//
//	}
	//移動量 mm/msを積算
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a930:	4b74      	ldr	r3, [pc, #464]	; (800ab04 <WritingFree_IT+0x25c>)
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	4b6f      	ldr	r3, [pc, #444]	; (800aaf4 <WritingFree_IT+0x24c>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4413      	add	r3, r2
 800a93a:	4a72      	ldr	r2, [pc, #456]	; (800ab04 <WritingFree_IT+0x25c>)
 800a93c:	6013      	str	r3, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a93e:	4b71      	ldr	r3, [pc, #452]	; (800ab04 <WritingFree_IT+0x25c>)
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	4b6c      	ldr	r3, [pc, #432]	; (800aaf4 <WritingFree_IT+0x24c>)
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	4413      	add	r3, r2
 800a948:	4a6e      	ldr	r2, [pc, #440]	; (800ab04 <WritingFree_IT+0x25c>)
 800a94a:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a94c:	4b6d      	ldr	r3, [pc, #436]	; (800ab04 <WritingFree_IT+0x25c>)
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	4b6c      	ldr	r3, [pc, #432]	; (800ab04 <WritingFree_IT+0x25c>)
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	4413      	add	r3, r2
 800a956:	4a6b      	ldr	r2, [pc, #428]	; (800ab04 <WritingFree_IT+0x25c>)
 800a958:	6093      	str	r3, [r2, #8]
#if 1

	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
 800a95a:	2138      	movs	r1, #56	; 0x38
 800a95c:	2037      	movs	r0, #55	; 0x37
 800a95e:	f006 f909 	bl	8010b74 <ReadIMU>
 800a962:	eef0 7a40 	vmov.f32	s15, s0
 800a966:	4b68      	ldr	r3, [pc, #416]	; (800ab08 <WritingFree_IT+0x260>)
 800a968:	edc3 7a00 	vstr	s15, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a96c:	4b66      	ldr	r3, [pc, #408]	; (800ab08 <WritingFree_IT+0x260>)
 800a96e:	ed93 7a00 	vldr	s14, [r3]
 800a972:	4b66      	ldr	r3, [pc, #408]	; (800ab0c <WritingFree_IT+0x264>)
 800a974:	edd3 7a00 	vldr	s15, [r3]
 800a978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a97c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800ab10 <WritingFree_IT+0x268>
 800a980:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a984:	edc7 7a01 	vstr	s15, [r7, #4]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f7fd fd15 	bl	80083b8 <__aeabi_f2d>
 800a98e:	a354      	add	r3, pc, #336	; (adr r3, 800aae0 <WritingFree_IT+0x238>)
 800a990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a994:	f7fd fd68 	bl	8008468 <__aeabi_dmul>
 800a998:	4603      	mov	r3, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	4625      	mov	r5, r4
 800a99e:	461c      	mov	r4, r3
 800a9a0:	4b5c      	ldr	r3, [pc, #368]	; (800ab14 <WritingFree_IT+0x26c>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7fd fd07 	bl	80083b8 <__aeabi_f2d>
 800a9aa:	a34f      	add	r3, pc, #316	; (adr r3, 800aae8 <WritingFree_IT+0x240>)
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	f7fd fd5a 	bl	8008468 <__aeabi_dmul>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	f7fd fb9e 	bl	80080fc <__adddf3>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	f7fe f846 	bl	8008a58 <__aeabi_d2f>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	ee07 3a90 	vmov	s15, r3
 800a9d2:	eef1 7a67 	vneg.f32	s15, s15
 800a9d6:	4b50      	ldr	r3, [pc, #320]	; (800ab18 <WritingFree_IT+0x270>)
 800a9d8:	edc3 7a00 	vstr	s15, [r3]
    zg_last = zg_law;
 800a9dc:	4a4d      	ldr	r2, [pc, #308]	; (800ab14 <WritingFree_IT+0x26c>)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6013      	str	r3, [r2, #0]
	Angle += AngularV * T1;
 800a9e2:	4b4d      	ldr	r3, [pc, #308]	; (800ab18 <WritingFree_IT+0x270>)
 800a9e4:	edd3 7a00 	vldr	s15, [r3]
 800a9e8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800ab1c <WritingFree_IT+0x274>
 800a9ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a9f0:	4b4b      	ldr	r3, [pc, #300]	; (800ab20 <WritingFree_IT+0x278>)
 800a9f2:	edd3 7a00 	vldr	s15, [r3]
 800a9f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9fa:	4b49      	ldr	r3, [pc, #292]	; (800ab20 <WritingFree_IT+0x278>)
 800a9fc:	edc3 7a00 	vstr	s15, [r3]
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
			}
		}
#endif

	AngularAcceleration += AngularLeapsity;
 800aa00:	4b48      	ldr	r3, [pc, #288]	; (800ab24 <WritingFree_IT+0x27c>)
 800aa02:	ed93 7a00 	vldr	s14, [r3]
 800aa06:	4b48      	ldr	r3, [pc, #288]	; (800ab28 <WritingFree_IT+0x280>)
 800aa08:	edd3 7a00 	vldr	s15, [r3]
 800aa0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa10:	4b44      	ldr	r3, [pc, #272]	; (800ab24 <WritingFree_IT+0x27c>)
 800aa12:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[BODY] += Acceleration;
 800aa16:	4b45      	ldr	r3, [pc, #276]	; (800ab2c <WritingFree_IT+0x284>)
 800aa18:	ed93 7a02 	vldr	s14, [r3, #8]
 800aa1c:	4b44      	ldr	r3, [pc, #272]	; (800ab30 <WritingFree_IT+0x288>)
 800aa1e:	edd3 7a00 	vldr	s15, [r3]
 800aa22:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa26:	4b41      	ldr	r3, [pc, #260]	; (800ab2c <WritingFree_IT+0x284>)
 800aa28:	edc3 7a02 	vstr	s15, [r3, #8]
	TargetAngularV += AngularAcceleration;
 800aa2c:	4b41      	ldr	r3, [pc, #260]	; (800ab34 <WritingFree_IT+0x28c>)
 800aa2e:	ed93 7a00 	vldr	s14, [r3]
 800aa32:	4b3c      	ldr	r3, [pc, #240]	; (800ab24 <WritingFree_IT+0x27c>)
 800aa34:	edd3 7a00 	vldr	s15, [r3]
 800aa38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa3c:	4b3d      	ldr	r3, [pc, #244]	; (800ab34 <WritingFree_IT+0x28c>)
 800aa3e:	edc3 7a00 	vstr	s15, [r3]

	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800aa42:	4b3a      	ldr	r3, [pc, #232]	; (800ab2c <WritingFree_IT+0x284>)
 800aa44:	ed93 7a02 	vldr	s14, [r3, #8]
 800aa48:	4b3a      	ldr	r3, [pc, #232]	; (800ab34 <WritingFree_IT+0x28c>)
 800aa4a:	edd3 7a00 	vldr	s15, [r3]
 800aa4e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800ab38 <WritingFree_IT+0x290>
 800aa52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aa56:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800aa5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aa5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa62:	4b32      	ldr	r3, [pc, #200]	; (800ab2c <WritingFree_IT+0x284>)
 800aa64:	edc3 7a01 	vstr	s15, [r3, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800aa68:	4b32      	ldr	r3, [pc, #200]	; (800ab34 <WritingFree_IT+0x28c>)
 800aa6a:	edd3 7a00 	vldr	s15, [r3]
 800aa6e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ab38 <WritingFree_IT+0x290>
 800aa72:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aa76:	4b2d      	ldr	r3, [pc, #180]	; (800ab2c <WritingFree_IT+0x284>)
 800aa78:	edd3 7a01 	vldr	s15, [r3, #4]
 800aa7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa80:	4b2a      	ldr	r3, [pc, #168]	; (800ab2c <WritingFree_IT+0x284>)
 800aa82:	edc3 7a00 	vstr	s15, [r3]

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800aa86:	4b29      	ldr	r3, [pc, #164]	; (800ab2c <WritingFree_IT+0x284>)
 800aa88:	edd3 7a00 	vldr	s15, [r3]
 800aa8c:	4b1c      	ldr	r3, [pc, #112]	; (800ab00 <WritingFree_IT+0x258>)
 800aa8e:	ed93 7a00 	vldr	s14, [r3]
 800aa92:	eef0 0a47 	vmov.f32	s1, s14
 800aa96:	eeb0 0a67 	vmov.f32	s0, s15
 800aa9a:	2004      	movs	r0, #4
 800aa9c:	f006 ffbc 	bl	8011a18 <PIDControl>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	4b26      	ldr	r3, [pc, #152]	; (800ab3c <WritingFree_IT+0x294>)
 800aaa4:	601a      	str	r2, [r3, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800aaa6:	4b21      	ldr	r3, [pc, #132]	; (800ab2c <WritingFree_IT+0x284>)
 800aaa8:	edd3 7a01 	vldr	s15, [r3, #4]
 800aaac:	4b14      	ldr	r3, [pc, #80]	; (800ab00 <WritingFree_IT+0x258>)
 800aaae:	ed93 7a01 	vldr	s14, [r3, #4]
 800aab2:	eef0 0a47 	vmov.f32	s1, s14
 800aab6:	eeb0 0a67 	vmov.f32	s0, s15
 800aaba:	2005      	movs	r0, #5
 800aabc:	f006 ffac 	bl	8011a18 <PIDControl>
 800aac0:	4602      	mov	r2, r0
 800aac2:	4b1f      	ldr	r3, [pc, #124]	; (800ab40 <WritingFree_IT+0x298>)
 800aac4:	601a      	str	r2, [r3, #0]

	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800aac6:	4b1d      	ldr	r3, [pc, #116]	; (800ab3c <WritingFree_IT+0x294>)
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	4b1d      	ldr	r3, [pc, #116]	; (800ab40 <WritingFree_IT+0x298>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4619      	mov	r1, r3
 800aad0:	4610      	mov	r0, r2
 800aad2:	f006 faa9 	bl	8011028 <Motor_Switch>


}
 800aad6:	bf00      	nop
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bdb0      	pop	{r4, r5, r7, pc}
 800aade:	bf00      	nop
 800aae0:	47ae147b 	.word	0x47ae147b
 800aae4:	3f847ae1 	.word	0x3f847ae1
 800aae8:	7ae147ae 	.word	0x7ae147ae
 800aaec:	3fefae14 	.word	0x3fefae14
 800aaf0:	40000400 	.word	0x40000400
 800aaf4:	20000cc0 	.word	0x20000cc0
 800aaf8:	40000800 	.word	0x40000800
 800aafc:	3f8177cd 	.word	0x3f8177cd
 800ab00:	20000b10 	.word	0x20000b10
 800ab04:	20000b04 	.word	0x20000b04
 800ab08:	200002d4 	.word	0x200002d4
 800ab0c:	200002d0 	.word	0x200002d0
 800ab10:	3a8b7d78 	.word	0x3a8b7d78
 800ab14:	20000220 	.word	0x20000220
 800ab18:	20000224 	.word	0x20000224
 800ab1c:	3a83126f 	.word	0x3a83126f
 800ab20:	20000228 	.word	0x20000228
 800ab24:	20000230 	.word	0x20000230
 800ab28:	20000234 	.word	0x20000234
 800ab2c:	20000ad0 	.word	0x20000ad0
 800ab30:	2000022c 	.word	0x2000022c
 800ab34:	20000ae0 	.word	0x20000ae0
 800ab38:	4209999a 	.word	0x4209999a
 800ab3c:	20000bfc 	.word	0x20000bfc
 800ab40:	20000c18 	.word	0x20000c18

0800ab44 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a26      	ldr	r2, [pc, #152]	; (800abe8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d10e      	bne.n	800ab72 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		switch(IT_mode){
 800ab54:	4b25      	ldr	r3, [pc, #148]	; (800abec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b06      	cmp	r3, #6
 800ab5a:	d004      	beq.n	800ab66 <HAL_TIM_PeriodElapsedCallback+0x22>
 800ab5c:	2b07      	cmp	r3, #7
 800ab5e:	d005      	beq.n	800ab6c <HAL_TIM_PeriodElapsedCallback+0x28>
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d008      	beq.n	800ab76 <HAL_TIM_PeriodElapsedCallback+0x32>
			break;
		case 2:

			break;
		default :
			break;
 800ab64:	e008      	b.n	800ab78 <HAL_TIM_PeriodElapsedCallback+0x34>
			Explore_IT();
 800ab66:	f7ff fc3f 	bl	800a3e8 <Explore_IT>
			break;
 800ab6a:	e005      	b.n	800ab78 <HAL_TIM_PeriodElapsedCallback+0x34>
			WritingFree_IT();
 800ab6c:	f7ff fe9c 	bl	800a8a8 <WritingFree_IT>
			break;
 800ab70:	e002      	b.n	800ab78 <HAL_TIM_PeriodElapsedCallback+0x34>
		}
	}
 800ab72:	bf00      	nop
 800ab74:	e000      	b.n	800ab78 <HAL_TIM_PeriodElapsedCallback+0x34>
			break;
 800ab76:	bf00      	nop

	if( htim == &htim8)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a1d      	ldr	r2, [pc, #116]	; (800abf0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d12f      	bne.n	800abe0 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		//timer8 += t;

		//壁センサデータの更新
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800ab80:	4b1c      	ldr	r3, [pc, #112]	; (800abf4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2200      	movs	r2, #0
 800ab86:	4619      	mov	r1, r3
 800ab88:	200a      	movs	r0, #10
 800ab8a:	f006 fabd 	bl	8011108 <GetWallDataAverage>
 800ab8e:	eef0 7a40 	vmov.f32	s15, s0
 800ab92:	4b19      	ldr	r3, [pc, #100]	; (800abf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800ab94:	edc3 7a00 	vstr	s15, [r3]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800ab98:	4b16      	ldr	r3, [pc, #88]	; (800abf4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	4619      	mov	r1, r3
 800aba0:	200a      	movs	r0, #10
 800aba2:	f006 fab1 	bl	8011108 <GetWallDataAverage>
 800aba6:	eef0 7a40 	vmov.f32	s15, s0
 800abaa:	4b13      	ldr	r3, [pc, #76]	; (800abf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800abac:	edc3 7a01 	vstr	s15, [r3, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800abb0:	4b12      	ldr	r3, [pc, #72]	; (800abfc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2202      	movs	r2, #2
 800abb6:	4619      	mov	r1, r3
 800abb8:	200a      	movs	r0, #10
 800abba:	f006 faa5 	bl	8011108 <GetWallDataAverage>
 800abbe:	eef0 7a40 	vmov.f32	s15, s0
 800abc2:	4b0d      	ldr	r3, [pc, #52]	; (800abf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800abc4:	edc3 7a02 	vstr	s15, [r3, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800abc8:	4b0c      	ldr	r3, [pc, #48]	; (800abfc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	2203      	movs	r2, #3
 800abce:	4619      	mov	r1, r3
 800abd0:	200a      	movs	r0, #10
 800abd2:	f006 fa99 	bl	8011108 <GetWallDataAverage>
 800abd6:	eef0 7a40 	vmov.f32	s15, s0
 800abda:	4b07      	ldr	r3, [pc, #28]	; (800abf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800abdc:	edc3 7a03 	vstr	s15, [r3, #12]
	}
}
 800abe0:	bf00      	nop
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	20000fc0 	.word	0x20000fc0
 800abec:	20000ac4 	.word	0x20000ac4
 800abf0:	20000d78 	.word	0x20000d78
 800abf4:	200002bc 	.word	0x200002bc
 800abf8:	20000b44 	.word	0x20000b44
 800abfc:	200002c8 	.word	0x200002c8

0800ac00 <wall_init>:
				FLASH_Write_Word(address+12, Wall[i][j].west);
				address += 16;
			}
	}
}
void wall_init(){
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800ac06:	2300      	movs	r3, #0
 800ac08:	60fb      	str	r3, [r7, #12]
 800ac0a:	e043      	b.n	800ac94 <wall_init+0x94>
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	60bb      	str	r3, [r7, #8]
 800ac10:	e03a      	b.n	800ac88 <wall_init+0x88>
				Wall[i][j].north = UNKNOWN;
 800ac12:	494b      	ldr	r1, [pc, #300]	; (800ad40 <wall_init+0x140>)
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4613      	mov	r3, r2
 800ac18:	00db      	lsls	r3, r3, #3
 800ac1a:	4413      	add	r3, r2
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	441a      	add	r2, r3
 800ac20:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800ac24:	2002      	movs	r0, #2
 800ac26:	f360 0301 	bfi	r3, r0, #0, #2
 800ac2a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = UNKNOWN;
 800ac2e:	4944      	ldr	r1, [pc, #272]	; (800ad40 <wall_init+0x140>)
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	4613      	mov	r3, r2
 800ac34:	00db      	lsls	r3, r3, #3
 800ac36:	4413      	add	r3, r2
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	441a      	add	r2, r3
 800ac3c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800ac40:	2002      	movs	r0, #2
 800ac42:	f360 0383 	bfi	r3, r0, #2, #2
 800ac46:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = UNKNOWN;
 800ac4a:	493d      	ldr	r1, [pc, #244]	; (800ad40 <wall_init+0x140>)
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	00db      	lsls	r3, r3, #3
 800ac52:	4413      	add	r3, r2
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	441a      	add	r2, r3
 800ac58:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800ac5c:	2002      	movs	r0, #2
 800ac5e:	f360 1305 	bfi	r3, r0, #4, #2
 800ac62:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = UNKNOWN;
 800ac66:	4936      	ldr	r1, [pc, #216]	; (800ad40 <wall_init+0x140>)
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	00db      	lsls	r3, r3, #3
 800ac6e:	4413      	add	r3, r2
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	441a      	add	r2, r3
 800ac74:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800ac78:	2002      	movs	r0, #2
 800ac7a:	f360 1387 	bfi	r3, r0, #6, #2
 800ac7e:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	3301      	adds	r3, #1
 800ac86:	60bb      	str	r3, [r7, #8]
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	2b08      	cmp	r3, #8
 800ac8c:	ddc1      	ble.n	800ac12 <wall_init+0x12>
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	3301      	adds	r3, #1
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2b08      	cmp	r3, #8
 800ac98:	ddb8      	ble.n	800ac0c <wall_init+0xc>

			}
	}

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	607b      	str	r3, [r7, #4]
 800ac9e:	e030      	b.n	800ad02 <wall_init+0x102>
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800aca0:	4927      	ldr	r1, [pc, #156]	; (800ad40 <wall_init+0x140>)
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	4613      	mov	r3, r2
 800aca6:	00db      	lsls	r3, r3, #3
 800aca8:	4413      	add	r3, r2
 800acaa:	005b      	lsls	r3, r3, #1
 800acac:	440b      	add	r3, r1
 800acae:	f103 0210 	add.w	r2, r3, #16
 800acb2:	7813      	ldrb	r3, [r2, #0]
 800acb4:	2101      	movs	r1, #1
 800acb6:	f361 0301 	bfi	r3, r1, #0, #2
 800acba:	7013      	strb	r3, [r2, #0]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800acbc:	4920      	ldr	r1, [pc, #128]	; (800ad40 <wall_init+0x140>)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800acc4:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800acc8:	2001      	movs	r0, #1
 800acca:	f360 0383 	bfi	r3, r0, #2, #2
 800acce:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		Wall[n][0].south = WALL;
 800acd2:	491b      	ldr	r1, [pc, #108]	; (800ad40 <wall_init+0x140>)
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	4613      	mov	r3, r2
 800acd8:	00db      	lsls	r3, r3, #3
 800acda:	4413      	add	r3, r2
 800acdc:	005b      	lsls	r3, r3, #1
 800acde:	18ca      	adds	r2, r1, r3
 800ace0:	7813      	ldrb	r3, [r2, #0]
 800ace2:	2101      	movs	r1, #1
 800ace4:	f361 1305 	bfi	r3, r1, #4, #2
 800ace8:	7013      	strb	r3, [r2, #0]
		Wall[0][n].west = WALL;
 800acea:	4915      	ldr	r1, [pc, #84]	; (800ad40 <wall_init+0x140>)
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800acf2:	2001      	movs	r0, #1
 800acf4:	f360 1387 	bfi	r3, r0, #6, #2
 800acf8:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3301      	adds	r3, #1
 800ad00:	607b      	str	r3, [r7, #4]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b08      	cmp	r3, #8
 800ad06:	ddcb      	ble.n	800aca0 <wall_init+0xa0>
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
 800ad08:	4a0d      	ldr	r2, [pc, #52]	; (800ad40 <wall_init+0x140>)
 800ad0a:	7813      	ldrb	r3, [r2, #0]
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	f361 0383 	bfi	r3, r1, #2, #2
 800ad12:	7013      	strb	r3, [r2, #0]
	Wall[0][0].north = NOWALL;
 800ad14:	4a0a      	ldr	r2, [pc, #40]	; (800ad40 <wall_init+0x140>)
 800ad16:	7813      	ldrb	r3, [r2, #0]
 800ad18:	f36f 0301 	bfc	r3, #0, #2
 800ad1c:	7013      	strb	r3, [r2, #0]
	Wall[1][0].west = WALL;
 800ad1e:	4a08      	ldr	r2, [pc, #32]	; (800ad40 <wall_init+0x140>)
 800ad20:	7c93      	ldrb	r3, [r2, #18]
 800ad22:	2101      	movs	r1, #1
 800ad24:	f361 1387 	bfi	r3, r1, #6, #2
 800ad28:	7493      	strb	r3, [r2, #18]
	Wall[0][1].south = NOWALL;
 800ad2a:	4a05      	ldr	r2, [pc, #20]	; (800ad40 <wall_init+0x140>)
 800ad2c:	7893      	ldrb	r3, [r2, #2]
 800ad2e:	f36f 1305 	bfc	r3, #4, #2
 800ad32:	7093      	strb	r3, [r2, #2]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800ad34:	bf00      	nop
 800ad36:	3714      	adds	r7, #20
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	20000ccc 	.word	0x20000ccc

0800ad44 <wall_set>:
	FLASH_Write_Word(address+8, Wall[x][y].south);
	FLASH_Write_Word(address+12, Wall[x][y].west);

}
//壁の更新xyグローバル
void wall_set(){
 800ad44:	b490      	push	{r4, r7}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	//壁センサ値を読んで、各方角の壁の有無を判定
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ad4a:	4b96      	ldr	r3, [pc, #600]	; (800afa4 <wall_set+0x260>)
 800ad4c:	ed93 7a00 	vldr	s14, [r3]
 800ad50:	4b94      	ldr	r3, [pc, #592]	; (800afa4 <wall_set+0x260>)
 800ad52:	edd3 7a03 	vldr	s15, [r3, #12]
 800ad56:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad5a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ad5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ad62:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800afa8 <wall_set+0x264>
 800ad66:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad6e:	bfcc      	ite	gt
 800ad70:	2301      	movgt	r3, #1
 800ad72:	2300      	movle	r3, #0
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	4b8d      	ldr	r3, [pc, #564]	; (800afac <wall_set+0x268>)
 800ad78:	7adb      	ldrb	r3, [r3, #11]
 800ad7a:	f107 0108 	add.w	r1, r7, #8
 800ad7e:	440b      	add	r3, r1
 800ad80:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800ad84:	4b87      	ldr	r3, [pc, #540]	; (800afa4 <wall_set+0x260>)
 800ad86:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad8a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800afb0 <wall_set+0x26c>
 800ad8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad96:	bfcc      	ite	gt
 800ad98:	2301      	movgt	r3, #1
 800ad9a:	2300      	movle	r3, #0
 800ad9c:	b2d9      	uxtb	r1, r3
 800ad9e:	4b83      	ldr	r3, [pc, #524]	; (800afac <wall_set+0x268>)
 800ada0:	7adb      	ldrb	r3, [r3, #11]
 800ada2:	3301      	adds	r3, #1
 800ada4:	425a      	negs	r2, r3
 800ada6:	f003 0303 	and.w	r3, r3, #3
 800adaa:	f002 0203 	and.w	r2, r2, #3
 800adae:	bf58      	it	pl
 800adb0:	4253      	negpl	r3, r2
 800adb2:	460a      	mov	r2, r1
 800adb4:	f107 0108 	add.w	r1, r7, #8
 800adb8:	440b      	add	r3, r1
 800adba:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800adbe:	4b7b      	ldr	r3, [pc, #492]	; (800afac <wall_set+0x268>)
 800adc0:	7adb      	ldrb	r3, [r3, #11]
 800adc2:	3302      	adds	r3, #2
 800adc4:	425a      	negs	r2, r3
 800adc6:	f003 0303 	and.w	r3, r3, #3
 800adca:	f002 0203 	and.w	r2, r2, #3
 800adce:	bf58      	it	pl
 800add0:	4253      	negpl	r3, r2
 800add2:	f107 0208 	add.w	r2, r7, #8
 800add6:	4413      	add	r3, r2
 800add8:	2200      	movs	r2, #0
 800adda:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800adde:	4b71      	ldr	r3, [pc, #452]	; (800afa4 <wall_set+0x260>)
 800ade0:	edd3 7a02 	vldr	s15, [r3, #8]
 800ade4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800afb4 <wall_set+0x270>
 800ade8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf0:	bfcc      	ite	gt
 800adf2:	2301      	movgt	r3, #1
 800adf4:	2300      	movle	r3, #0
 800adf6:	b2d9      	uxtb	r1, r3
 800adf8:	4b6c      	ldr	r3, [pc, #432]	; (800afac <wall_set+0x268>)
 800adfa:	7adb      	ldrb	r3, [r3, #11]
 800adfc:	3303      	adds	r3, #3
 800adfe:	425a      	negs	r2, r3
 800ae00:	f003 0303 	and.w	r3, r3, #3
 800ae04:	f002 0203 	and.w	r2, r2, #3
 800ae08:	bf58      	it	pl
 800ae0a:	4253      	negpl	r3, r2
 800ae0c:	460a      	mov	r2, r1
 800ae0e:	f107 0108 	add.w	r1, r7, #8
 800ae12:	440b      	add	r3, r1
 800ae14:	f803 2c04 	strb.w	r2, [r3, #-4]

	  //各方角の壁に壁の有無を代入
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800ae18:	7939      	ldrb	r1, [r7, #4]
 800ae1a:	4b64      	ldr	r3, [pc, #400]	; (800afac <wall_set+0x268>)
 800ae1c:	7a1b      	ldrb	r3, [r3, #8]
 800ae1e:	461a      	mov	r2, r3
 800ae20:	4b62      	ldr	r3, [pc, #392]	; (800afac <wall_set+0x268>)
 800ae22:	7a5b      	ldrb	r3, [r3, #9]
 800ae24:	461c      	mov	r4, r3
 800ae26:	460b      	mov	r3, r1
 800ae28:	f003 0303 	and.w	r3, r3, #3
 800ae2c:	b2d8      	uxtb	r0, r3
 800ae2e:	4962      	ldr	r1, [pc, #392]	; (800afb8 <wall_set+0x274>)
 800ae30:	4613      	mov	r3, r2
 800ae32:	00db      	lsls	r3, r3, #3
 800ae34:	4413      	add	r3, r2
 800ae36:	191a      	adds	r2, r3, r4
 800ae38:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800ae3c:	f360 0301 	bfi	r3, r0, #0, #2
 800ae40:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
 800ae44:	7979      	ldrb	r1, [r7, #5]
 800ae46:	4b59      	ldr	r3, [pc, #356]	; (800afac <wall_set+0x268>)
 800ae48:	7a1b      	ldrb	r3, [r3, #8]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	4b57      	ldr	r3, [pc, #348]	; (800afac <wall_set+0x268>)
 800ae4e:	7a5b      	ldrb	r3, [r3, #9]
 800ae50:	461c      	mov	r4, r3
 800ae52:	460b      	mov	r3, r1
 800ae54:	f003 0303 	and.w	r3, r3, #3
 800ae58:	b2d8      	uxtb	r0, r3
 800ae5a:	4957      	ldr	r1, [pc, #348]	; (800afb8 <wall_set+0x274>)
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	00db      	lsls	r3, r3, #3
 800ae60:	4413      	add	r3, r2
 800ae62:	191a      	adds	r2, r3, r4
 800ae64:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800ae68:	f360 0383 	bfi	r3, r0, #2, #2
 800ae6c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
 800ae70:	79b9      	ldrb	r1, [r7, #6]
 800ae72:	4b4e      	ldr	r3, [pc, #312]	; (800afac <wall_set+0x268>)
 800ae74:	7a1b      	ldrb	r3, [r3, #8]
 800ae76:	461a      	mov	r2, r3
 800ae78:	4b4c      	ldr	r3, [pc, #304]	; (800afac <wall_set+0x268>)
 800ae7a:	7a5b      	ldrb	r3, [r3, #9]
 800ae7c:	461c      	mov	r4, r3
 800ae7e:	460b      	mov	r3, r1
 800ae80:	f003 0303 	and.w	r3, r3, #3
 800ae84:	b2d8      	uxtb	r0, r3
 800ae86:	494c      	ldr	r1, [pc, #304]	; (800afb8 <wall_set+0x274>)
 800ae88:	4613      	mov	r3, r2
 800ae8a:	00db      	lsls	r3, r3, #3
 800ae8c:	4413      	add	r3, r2
 800ae8e:	191a      	adds	r2, r3, r4
 800ae90:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800ae94:	f360 1305 	bfi	r3, r0, #4, #2
 800ae98:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
 800ae9c:	79f9      	ldrb	r1, [r7, #7]
 800ae9e:	4b43      	ldr	r3, [pc, #268]	; (800afac <wall_set+0x268>)
 800aea0:	7a1b      	ldrb	r3, [r3, #8]
 800aea2:	461a      	mov	r2, r3
 800aea4:	4b41      	ldr	r3, [pc, #260]	; (800afac <wall_set+0x268>)
 800aea6:	7a5b      	ldrb	r3, [r3, #9]
 800aea8:	461c      	mov	r4, r3
 800aeaa:	460b      	mov	r3, r1
 800aeac:	f003 0303 	and.w	r3, r3, #3
 800aeb0:	b2d8      	uxtb	r0, r3
 800aeb2:	4941      	ldr	r1, [pc, #260]	; (800afb8 <wall_set+0x274>)
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	00db      	lsls	r3, r3, #3
 800aeb8:	4413      	add	r3, r2
 800aeba:	191a      	adds	r2, r3, r4
 800aebc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800aec0:	f360 1387 	bfi	r3, r0, #6, #2
 800aec4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  //端の座標でなければ反対の壁も記入
	  //uint32_t address;
	  if(Pos.NextY < (NUMBER_OF_SQUARES-1) )
 800aec8:	4b38      	ldr	r3, [pc, #224]	; (800afac <wall_set+0x268>)
 800aeca:	7a5b      	ldrb	r3, [r3, #9]
 800aecc:	2b07      	cmp	r3, #7
 800aece:	d815      	bhi.n	800aefc <wall_set+0x1b8>
	  {
		  Wall[Pos.NextX][Pos.NextY+1].south = wall_dir[0];//北端でなければ
 800aed0:	7939      	ldrb	r1, [r7, #4]
 800aed2:	4b36      	ldr	r3, [pc, #216]	; (800afac <wall_set+0x268>)
 800aed4:	7a1b      	ldrb	r3, [r3, #8]
 800aed6:	461c      	mov	r4, r3
 800aed8:	4b34      	ldr	r3, [pc, #208]	; (800afac <wall_set+0x268>)
 800aeda:	7a5b      	ldrb	r3, [r3, #9]
 800aedc:	1c5a      	adds	r2, r3, #1
 800aede:	460b      	mov	r3, r1
 800aee0:	f003 0303 	and.w	r3, r3, #3
 800aee4:	b2d8      	uxtb	r0, r3
 800aee6:	4934      	ldr	r1, [pc, #208]	; (800afb8 <wall_set+0x274>)
 800aee8:	4623      	mov	r3, r4
 800aeea:	00db      	lsls	r3, r3, #3
 800aeec:	4423      	add	r3, r4
 800aeee:	441a      	add	r2, r3
 800aef0:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800aef4:	f360 1305 	bfi	r3, r0, #4, #2
 800aef8:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  //address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY+1)*16*(NUMBER_OF_SQUARES) );
		  //FLASH_Write_Word(address+8, Wall[Pos.NextX][Pos.NextY+1].south);
	  }
	  if(Pos.NextX < (NUMBER_OF_SQUARES-1) )
 800aefc:	4b2b      	ldr	r3, [pc, #172]	; (800afac <wall_set+0x268>)
 800aefe:	7a1b      	ldrb	r3, [r3, #8]
 800af00:	2b07      	cmp	r3, #7
 800af02:	d815      	bhi.n	800af30 <wall_set+0x1ec>
	  {
		  Wall[Pos.NextX+1][Pos.NextY].west = wall_dir[1];//東端でなければ
 800af04:	7979      	ldrb	r1, [r7, #5]
 800af06:	4b29      	ldr	r3, [pc, #164]	; (800afac <wall_set+0x268>)
 800af08:	7a1b      	ldrb	r3, [r3, #8]
 800af0a:	1c5a      	adds	r2, r3, #1
 800af0c:	4b27      	ldr	r3, [pc, #156]	; (800afac <wall_set+0x268>)
 800af0e:	7a5b      	ldrb	r3, [r3, #9]
 800af10:	461c      	mov	r4, r3
 800af12:	460b      	mov	r3, r1
 800af14:	f003 0303 	and.w	r3, r3, #3
 800af18:	b2d8      	uxtb	r0, r3
 800af1a:	4927      	ldr	r1, [pc, #156]	; (800afb8 <wall_set+0x274>)
 800af1c:	4613      	mov	r3, r2
 800af1e:	00db      	lsls	r3, r3, #3
 800af20:	4413      	add	r3, r2
 800af22:	191a      	adds	r2, r3, r4
 800af24:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800af28:	f360 1387 	bfi	r3, r0, #6, #2
 800af2c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( (Pos.NextX+1)*16) + ( (Pos.NextY)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+12, Wall[Pos.NextX+1][Pos.NextY].west);
	  }
	  if(Pos.NextY > 0 )
 800af30:	4b1e      	ldr	r3, [pc, #120]	; (800afac <wall_set+0x268>)
 800af32:	7a5b      	ldrb	r3, [r3, #9]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d015      	beq.n	800af64 <wall_set+0x220>
	  {
		  Wall[Pos.NextX][Pos.NextY-1].north = wall_dir[2];//南端でなければ
 800af38:	79b9      	ldrb	r1, [r7, #6]
 800af3a:	4b1c      	ldr	r3, [pc, #112]	; (800afac <wall_set+0x268>)
 800af3c:	7a1b      	ldrb	r3, [r3, #8]
 800af3e:	461c      	mov	r4, r3
 800af40:	4b1a      	ldr	r3, [pc, #104]	; (800afac <wall_set+0x268>)
 800af42:	7a5b      	ldrb	r3, [r3, #9]
 800af44:	1e5a      	subs	r2, r3, #1
 800af46:	460b      	mov	r3, r1
 800af48:	f003 0303 	and.w	r3, r3, #3
 800af4c:	b2d8      	uxtb	r0, r3
 800af4e:	491a      	ldr	r1, [pc, #104]	; (800afb8 <wall_set+0x274>)
 800af50:	4623      	mov	r3, r4
 800af52:	00db      	lsls	r3, r3, #3
 800af54:	4423      	add	r3, r4
 800af56:	441a      	add	r2, r3
 800af58:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800af5c:	f360 0301 	bfi	r3, r0, #0, #2
 800af60:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY-1)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+0, Wall[Pos.NextX][Pos.NextY-1].north);
	  }
	  if(Pos.NextX > 0 )
 800af64:	4b11      	ldr	r3, [pc, #68]	; (800afac <wall_set+0x268>)
 800af66:	7a1b      	ldrb	r3, [r3, #8]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d015      	beq.n	800af98 <wall_set+0x254>
	  {
		  Wall[Pos.NextX-1][Pos.NextY].east = wall_dir[3];//西端でなければ
 800af6c:	79f9      	ldrb	r1, [r7, #7]
 800af6e:	4b0f      	ldr	r3, [pc, #60]	; (800afac <wall_set+0x268>)
 800af70:	7a1b      	ldrb	r3, [r3, #8]
 800af72:	1e5a      	subs	r2, r3, #1
 800af74:	4b0d      	ldr	r3, [pc, #52]	; (800afac <wall_set+0x268>)
 800af76:	7a5b      	ldrb	r3, [r3, #9]
 800af78:	461c      	mov	r4, r3
 800af7a:	460b      	mov	r3, r1
 800af7c:	f003 0303 	and.w	r3, r3, #3
 800af80:	b2d8      	uxtb	r0, r3
 800af82:	490d      	ldr	r1, [pc, #52]	; (800afb8 <wall_set+0x274>)
 800af84:	4613      	mov	r3, r2
 800af86:	00db      	lsls	r3, r3, #3
 800af88:	4413      	add	r3, r2
 800af8a:	191a      	adds	r2, r3, r4
 800af8c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800af90:	f360 0383 	bfi	r3, r0, #2, #2
 800af94:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]


	  //一旦flashお休み。
	  //flashに書き込む
//	  wall_store_running(Pos.X,Pos.Y);
}
 800af98:	bf00      	nop
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bc90      	pop	{r4, r7}
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	20000b44 	.word	0x20000b44
 800afa8:	42340000 	.word	0x42340000
 800afac:	20000000 	.word	0x20000000
 800afb0:	42b40000 	.word	0x42b40000
 800afb4:	42c80000 	.word	0x42c80000
 800afb8:	20000ccc 	.word	0x20000ccc

0800afbc <init_map>:

void init_map(uint8_t goal_x, uint8_t goal_y)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b087      	sub	sp, #28
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	460a      	mov	r2, r1
 800afc6:	71fb      	strb	r3, [r7, #7]
 800afc8:	4613      	mov	r3, r2
 800afca:	71bb      	strb	r3, [r7, #6]
//迷路の歩数Mapを初期化する。全体を0xff、引数の座標x,yは0で初期化する

	int i,j;

	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800afcc:	2300      	movs	r3, #0
 800afce:	617b      	str	r3, [r7, #20]
 800afd0:	e015      	b.n	800affe <init_map+0x42>
	{
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800afd2:	2300      	movs	r3, #0
 800afd4:	613b      	str	r3, [r7, #16]
 800afd6:	e00c      	b.n	800aff2 <init_map+0x36>
		{
			walk_map[i][j] = 255;	//すべて255で埋める
 800afd8:	4920      	ldr	r1, [pc, #128]	; (800b05c <init_map+0xa0>)
 800afda:	697a      	ldr	r2, [r7, #20]
 800afdc:	4613      	mov	r3, r2
 800afde:	00db      	lsls	r3, r3, #3
 800afe0:	4413      	add	r3, r2
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	4413      	add	r3, r2
 800afe6:	22ff      	movs	r2, #255	; 0xff
 800afe8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	3301      	adds	r3, #1
 800aff0:	613b      	str	r3, [r7, #16]
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	2b08      	cmp	r3, #8
 800aff6:	ddef      	ble.n	800afd8 <init_map+0x1c>
	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	3301      	adds	r3, #1
 800affc:	617b      	str	r3, [r7, #20]
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	2b08      	cmp	r3, #8
 800b002:	dde6      	ble.n	800afd2 <init_map+0x16>
		}
	}
	uint8_t n[2] =
	{
			goal_x + goal_edge_num,
 800b004:	4b16      	ldr	r3, [pc, #88]	; (800b060 <init_map+0xa4>)
 800b006:	781a      	ldrb	r2, [r3, #0]
 800b008:	79fb      	ldrb	r3, [r7, #7]
 800b00a:	4413      	add	r3, r2
 800b00c:	b2db      	uxtb	r3, r3
	uint8_t n[2] =
 800b00e:	733b      	strb	r3, [r7, #12]
			goal_y + goal_edge_num
 800b010:	4b13      	ldr	r3, [pc, #76]	; (800b060 <init_map+0xa4>)
 800b012:	781a      	ldrb	r2, [r3, #0]
 800b014:	79bb      	ldrb	r3, [r7, #6]
 800b016:	4413      	add	r3, r2
 800b018:	b2db      	uxtb	r3, r3
	uint8_t n[2] =
 800b01a:	737b      	strb	r3, [r7, #13]
	};
	for(; goal_x < n[0]; goal_x++)
 800b01c:	e013      	b.n	800b046 <init_map+0x8a>
	{
		for(; goal_y < n[1]; goal_y++)
		{
			walk_map[goal_x][goal_y] = 0;
 800b01e:	79fa      	ldrb	r2, [r7, #7]
 800b020:	79b9      	ldrb	r1, [r7, #6]
 800b022:	480e      	ldr	r0, [pc, #56]	; (800b05c <init_map+0xa0>)
 800b024:	4613      	mov	r3, r2
 800b026:	00db      	lsls	r3, r3, #3
 800b028:	4413      	add	r3, r2
 800b02a:	440b      	add	r3, r1
 800b02c:	2200      	movs	r2, #0
 800b02e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for(; goal_y < n[1]; goal_y++)
 800b032:	79bb      	ldrb	r3, [r7, #6]
 800b034:	3301      	adds	r3, #1
 800b036:	71bb      	strb	r3, [r7, #6]
 800b038:	7b7b      	ldrb	r3, [r7, #13]
 800b03a:	79ba      	ldrb	r2, [r7, #6]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d3ee      	bcc.n	800b01e <init_map+0x62>
	for(; goal_x < n[0]; goal_x++)
 800b040:	79fb      	ldrb	r3, [r7, #7]
 800b042:	3301      	adds	r3, #1
 800b044:	71fb      	strb	r3, [r7, #7]
 800b046:	7b3b      	ldrb	r3, [r7, #12]
 800b048:	79fa      	ldrb	r2, [r7, #7]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d3f4      	bcc.n	800b038 <init_map+0x7c>
		}
	}
	//set_walk_val_goal(x, y,2);			//ゴール座標の歩数を０に設定
}
 800b04e:	bf00      	nop
 800b050:	371c      	adds	r7, #28
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	20000b54 	.word	0x20000b54
 800b060:	20000b00 	.word	0x20000b00

0800b064 <make_map>:


void make_map(uint8_t x, uint8_t y, int mask)	//歩数マップを作成する
{
 800b064:	b590      	push	{r4, r7, lr}
 800b066:	b087      	sub	sp, #28
 800b068:	af00      	add	r7, sp, #0
 800b06a:	4603      	mov	r3, r0
 800b06c:	603a      	str	r2, [r7, #0]
 800b06e:	71fb      	strb	r3, [r7, #7]
 800b070:	460b      	mov	r3, r1
 800b072:	71bb      	strb	r3, [r7, #6]
//maskの値(MASK_SEARCH or MASK_SECOND)によって、
//探索用の歩数Mapを作るか、最短走行の歩数Mapを作るかが切り替わる
	int i,j;
	_Bool change_flag;			//Map作成終了を見極めるためのフラグ

	init_map(x,y);				//Mapを初期化する
 800b074:	79ba      	ldrb	r2, [r7, #6]
 800b076:	79fb      	ldrb	r3, [r7, #7]
 800b078:	4611      	mov	r1, r2
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff ff9e 	bl	800afbc <init_map>

	do //(6,9)(7,10)に対して、7,11がおかしい。
	{
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800b084:	2300      	movs	r3, #0
 800b086:	617b      	str	r3, [r7, #20]
 800b088:	e0fa      	b.n	800b280 <make_map+0x21c>
		{
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800b08a:	2300      	movs	r3, #0
 800b08c:	613b      	str	r3, [r7, #16]
 800b08e:	e0f0      	b.n	800b272 <make_map+0x20e>
			{
				if(walk_map[i][j] == 255)		//255の場合は次へ
 800b090:	4981      	ldr	r1, [pc, #516]	; (800b298 <make_map+0x234>)
 800b092:	697a      	ldr	r2, [r7, #20]
 800b094:	4613      	mov	r3, r2
 800b096:	00db      	lsls	r3, r3, #3
 800b098:	4413      	add	r3, r2
 800b09a:	693a      	ldr	r2, [r7, #16]
 800b09c:	4413      	add	r3, r2
 800b09e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b0a2:	2bff      	cmp	r3, #255	; 0xff
 800b0a4:	f000 80e1 	beq.w	800b26a <make_map+0x206>
				{
					continue;
				}
				//探索のときは
				//最短のときは、未探索壁の経路は重みを更新しない
				if(j < NUMBER_OF_SQUARES-1)					//範囲チェック
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	2b07      	cmp	r3, #7
 800b0ac:	dc34      	bgt.n	800b118 <make_map+0xb4>
				{
					if( (Wall[i][j].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b0ae:	497b      	ldr	r1, [pc, #492]	; (800b29c <make_map+0x238>)
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	00db      	lsls	r3, r3, #3
 800b0b6:	4413      	add	r3, r2
 800b0b8:	693a      	ldr	r2, [r7, #16]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b0c0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d123      	bne.n	800b118 <make_map+0xb4>
					{
						if(walk_map[i][j+1] == 255)			//まだ値が入っていなければ
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	1c59      	adds	r1, r3, #1
 800b0d4:	4870      	ldr	r0, [pc, #448]	; (800b298 <make_map+0x234>)
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	4613      	mov	r3, r2
 800b0da:	00db      	lsls	r3, r3, #3
 800b0dc:	4413      	add	r3, r2
 800b0de:	440b      	add	r3, r1
 800b0e0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800b0e4:	2bff      	cmp	r3, #255	; 0xff
 800b0e6:	d117      	bne.n	800b118 <make_map+0xb4>
						{
							walk_map[i][j+1] = walk_map[i][j] + 1;	//値を代入
 800b0e8:	496b      	ldr	r1, [pc, #428]	; (800b298 <make_map+0x234>)
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	00db      	lsls	r3, r3, #3
 800b0f0:	4413      	add	r3, r2
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	1c51      	adds	r1, r2, #1
 800b0fe:	3301      	adds	r3, #1
 800b100:	b29c      	uxth	r4, r3
 800b102:	4865      	ldr	r0, [pc, #404]	; (800b298 <make_map+0x234>)
 800b104:	697a      	ldr	r2, [r7, #20]
 800b106:	4613      	mov	r3, r2
 800b108:	00db      	lsls	r3, r3, #3
 800b10a:	4413      	add	r3, r2
 800b10c:	440b      	add	r3, r1
 800b10e:	4622      	mov	r2, r4
 800b110:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b114:	2301      	movs	r3, #1
 800b116:	73fb      	strb	r3, [r7, #15]
						}
					}
				}

				if(i < NUMBER_OF_SQUARES-1)					//範囲チェック
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	2b07      	cmp	r3, #7
 800b11c:	dc34      	bgt.n	800b188 <make_map+0x124>
				{
					if( (Wall[i][j].east & mask) == NOWALL)		//壁がなければ
 800b11e:	495f      	ldr	r1, [pc, #380]	; (800b29c <make_map+0x238>)
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	4613      	mov	r3, r2
 800b124:	00db      	lsls	r3, r3, #3
 800b126:	4413      	add	r3, r2
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	4413      	add	r3, r2
 800b12c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b130:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b134:	b2db      	uxtb	r3, r3
 800b136:	461a      	mov	r2, r3
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	4013      	ands	r3, r2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d123      	bne.n	800b188 <make_map+0x124>
					{
						if(walk_map[i+1][j] == 255)			//値が入っていなければ
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	1c5a      	adds	r2, r3, #1
 800b144:	4954      	ldr	r1, [pc, #336]	; (800b298 <make_map+0x234>)
 800b146:	4613      	mov	r3, r2
 800b148:	00db      	lsls	r3, r3, #3
 800b14a:	4413      	add	r3, r2
 800b14c:	693a      	ldr	r2, [r7, #16]
 800b14e:	4413      	add	r3, r2
 800b150:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b154:	2bff      	cmp	r3, #255	; 0xff
 800b156:	d117      	bne.n	800b188 <make_map+0x124>
						{
							walk_map[i+1][j] = walk_map[i][j] + 1;	//値を代入
 800b158:	494f      	ldr	r1, [pc, #316]	; (800b298 <make_map+0x234>)
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	4613      	mov	r3, r2
 800b15e:	00db      	lsls	r3, r3, #3
 800b160:	4413      	add	r3, r2
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	4413      	add	r3, r2
 800b166:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	3201      	adds	r2, #1
 800b16e:	3301      	adds	r3, #1
 800b170:	b298      	uxth	r0, r3
 800b172:	4949      	ldr	r1, [pc, #292]	; (800b298 <make_map+0x234>)
 800b174:	4613      	mov	r3, r2
 800b176:	00db      	lsls	r3, r3, #3
 800b178:	4413      	add	r3, r2
 800b17a:	693a      	ldr	r2, [r7, #16]
 800b17c:	4413      	add	r3, r2
 800b17e:	4602      	mov	r2, r0
 800b180:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b184:	2301      	movs	r3, #1
 800b186:	73fb      	strb	r3, [r7, #15]
						}
					}
				}

				if(j > 0)						//範囲チェック
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	dd34      	ble.n	800b1f8 <make_map+0x194>
				{
					if( (Wall[i][j].south & mask) == NOWALL)	//壁がなければ
 800b18e:	4943      	ldr	r1, [pc, #268]	; (800b29c <make_map+0x238>)
 800b190:	697a      	ldr	r2, [r7, #20]
 800b192:	4613      	mov	r3, r2
 800b194:	00db      	lsls	r3, r3, #3
 800b196:	4413      	add	r3, r2
 800b198:	693a      	ldr	r2, [r7, #16]
 800b19a:	4413      	add	r3, r2
 800b19c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b1a0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	4013      	ands	r3, r2
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d123      	bne.n	800b1f8 <make_map+0x194>
					{
						if(walk_map[i][j-1] == 255)			//値が入っていなければ
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	1e59      	subs	r1, r3, #1
 800b1b4:	4838      	ldr	r0, [pc, #224]	; (800b298 <make_map+0x234>)
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	00db      	lsls	r3, r3, #3
 800b1bc:	4413      	add	r3, r2
 800b1be:	440b      	add	r3, r1
 800b1c0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800b1c4:	2bff      	cmp	r3, #255	; 0xff
 800b1c6:	d117      	bne.n	800b1f8 <make_map+0x194>
						{
							walk_map[i][j-1] = walk_map[i][j] + 1;	//値を代入
 800b1c8:	4933      	ldr	r1, [pc, #204]	; (800b298 <make_map+0x234>)
 800b1ca:	697a      	ldr	r2, [r7, #20]
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	00db      	lsls	r3, r3, #3
 800b1d0:	4413      	add	r3, r2
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b1da:	693a      	ldr	r2, [r7, #16]
 800b1dc:	1e51      	subs	r1, r2, #1
 800b1de:	3301      	adds	r3, #1
 800b1e0:	b29c      	uxth	r4, r3
 800b1e2:	482d      	ldr	r0, [pc, #180]	; (800b298 <make_map+0x234>)
 800b1e4:	697a      	ldr	r2, [r7, #20]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	00db      	lsls	r3, r3, #3
 800b1ea:	4413      	add	r3, r2
 800b1ec:	440b      	add	r3, r1
 800b1ee:	4622      	mov	r2, r4
 800b1f0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	73fb      	strb	r3, [r7, #15]
						}
					}
				}

				if(i > 0)						//範囲チェック
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	dd36      	ble.n	800b26c <make_map+0x208>
				{
					if( (Wall[i][j].west & mask) == NOWALL)		//壁がなければ
 800b1fe:	4927      	ldr	r1, [pc, #156]	; (800b29c <make_map+0x238>)
 800b200:	697a      	ldr	r2, [r7, #20]
 800b202:	4613      	mov	r3, r2
 800b204:	00db      	lsls	r3, r3, #3
 800b206:	4413      	add	r3, r2
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	4413      	add	r3, r2
 800b20c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b210:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b214:	b2db      	uxtb	r3, r3
 800b216:	461a      	mov	r2, r3
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	4013      	ands	r3, r2
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d125      	bne.n	800b26c <make_map+0x208>
					{
						if(walk_map[i-1][j] == 255)			//値が入っていなければ
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	1e5a      	subs	r2, r3, #1
 800b224:	491c      	ldr	r1, [pc, #112]	; (800b298 <make_map+0x234>)
 800b226:	4613      	mov	r3, r2
 800b228:	00db      	lsls	r3, r3, #3
 800b22a:	4413      	add	r3, r2
 800b22c:	693a      	ldr	r2, [r7, #16]
 800b22e:	4413      	add	r3, r2
 800b230:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b234:	2bff      	cmp	r3, #255	; 0xff
 800b236:	d119      	bne.n	800b26c <make_map+0x208>
						{
							walk_map[i-1][j] = walk_map[i][j] + 1;	//値を代入
 800b238:	4917      	ldr	r1, [pc, #92]	; (800b298 <make_map+0x234>)
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	4613      	mov	r3, r2
 800b23e:	00db      	lsls	r3, r3, #3
 800b240:	4413      	add	r3, r2
 800b242:	693a      	ldr	r2, [r7, #16]
 800b244:	4413      	add	r3, r2
 800b246:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	3a01      	subs	r2, #1
 800b24e:	3301      	adds	r3, #1
 800b250:	b298      	uxth	r0, r3
 800b252:	4911      	ldr	r1, [pc, #68]	; (800b298 <make_map+0x234>)
 800b254:	4613      	mov	r3, r2
 800b256:	00db      	lsls	r3, r3, #3
 800b258:	4413      	add	r3, r2
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	4413      	add	r3, r2
 800b25e:	4602      	mov	r2, r0
 800b260:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b264:	2301      	movs	r3, #1
 800b266:	73fb      	strb	r3, [r7, #15]
 800b268:	e000      	b.n	800b26c <make_map+0x208>
					continue;
 800b26a:	bf00      	nop
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	3301      	adds	r3, #1
 800b270:	613b      	str	r3, [r7, #16]
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	2b08      	cmp	r3, #8
 800b276:	f77f af0b 	ble.w	800b090 <make_map+0x2c>
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	3301      	adds	r3, #1
 800b27e:	617b      	str	r3, [r7, #20]
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2b08      	cmp	r3, #8
 800b284:	f77f af01 	ble.w	800b08a <make_map+0x26>

			}

		}

	}while(change_flag == true);	//全体を作り終わるまで待つ
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f47f aef8 	bne.w	800b080 <make_map+0x1c>

}
 800b290:	bf00      	nop
 800b292:	371c      	adds	r7, #28
 800b294:	46bd      	mov	sp, r7
 800b296:	bd90      	pop	{r4, r7, pc}
 800b298:	20000b54 	.word	0x20000b54
 800b29c:	20000ccc 	.word	0x20000ccc

0800b2a0 <flash_copy_to_ram>:
//	    }//シリアル通信で受け取ってテキストファイルに流してほしい
//	    //またあとで
//}
//
void flash_copy_to_ram()
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b088      	sub	sp, #32
 800b2a4:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800b2a6:	4b42      	ldr	r3, [pc, #264]	; (800b3b0 <flash_copy_to_ram+0x110>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	61fb      	str	r3, [r7, #28]

	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	61bb      	str	r3, [r7, #24]
 800b2b0:	e077      	b.n	800b3a2 <flash_copy_to_ram+0x102>
	{
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	617b      	str	r3, [r7, #20]
 800b2b6:	e06e      	b.n	800b396 <flash_copy_to_ram+0xf6>
			{
				uint32_t wall_data[4]={0};
 800b2b8:	1d3b      	adds	r3, r7, #4
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	601a      	str	r2, [r3, #0]
 800b2be:	605a      	str	r2, [r3, #4]
 800b2c0:	609a      	str	r2, [r3, #8]
 800b2c2:	60da      	str	r2, [r3, #12]
				FLASH_Read_Word(address+0, &wall_data[0]);
 800b2c4:	1d3b      	adds	r3, r7, #4
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	69f8      	ldr	r0, [r7, #28]
 800b2ca:	f005 fb7f 	bl	80109cc <FLASH_Read_Word>
				FLASH_Read_Word(address+4, &wall_data[1]);
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	1d1a      	adds	r2, r3, #4
 800b2d2:	1d3b      	adds	r3, r7, #4
 800b2d4:	3304      	adds	r3, #4
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	4610      	mov	r0, r2
 800b2da:	f005 fb77 	bl	80109cc <FLASH_Read_Word>
				FLASH_Read_Word(address+8, &wall_data[2]);
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	f103 0208 	add.w	r2, r3, #8
 800b2e4:	1d3b      	adds	r3, r7, #4
 800b2e6:	3308      	adds	r3, #8
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	f005 fb6e 	bl	80109cc <FLASH_Read_Word>
				FLASH_Read_Word(address+12, &wall_data[3]);
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	f103 020c 	add.w	r2, r3, #12
 800b2f6:	1d3b      	adds	r3, r7, #4
 800b2f8:	330c      	adds	r3, #12
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	4610      	mov	r0, r2
 800b2fe:	f005 fb65 	bl	80109cc <FLASH_Read_Word>
				Wall[i][j].north = wall_data[0];
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f003 0303 	and.w	r3, r3, #3
 800b308:	b2d8      	uxtb	r0, r3
 800b30a:	492a      	ldr	r1, [pc, #168]	; (800b3b4 <flash_copy_to_ram+0x114>)
 800b30c:	697a      	ldr	r2, [r7, #20]
 800b30e:	4613      	mov	r3, r2
 800b310:	00db      	lsls	r3, r3, #3
 800b312:	4413      	add	r3, r2
 800b314:	69ba      	ldr	r2, [r7, #24]
 800b316:	441a      	add	r2, r3
 800b318:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b31c:	f360 0301 	bfi	r3, r0, #0, #2
 800b320:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = wall_data[1];
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	f003 0303 	and.w	r3, r3, #3
 800b32a:	b2d8      	uxtb	r0, r3
 800b32c:	4921      	ldr	r1, [pc, #132]	; (800b3b4 <flash_copy_to_ram+0x114>)
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	4613      	mov	r3, r2
 800b332:	00db      	lsls	r3, r3, #3
 800b334:	4413      	add	r3, r2
 800b336:	69ba      	ldr	r2, [r7, #24]
 800b338:	441a      	add	r2, r3
 800b33a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b33e:	f360 0383 	bfi	r3, r0, #2, #2
 800b342:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = wall_data[2];
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f003 0303 	and.w	r3, r3, #3
 800b34c:	b2d8      	uxtb	r0, r3
 800b34e:	4919      	ldr	r1, [pc, #100]	; (800b3b4 <flash_copy_to_ram+0x114>)
 800b350:	697a      	ldr	r2, [r7, #20]
 800b352:	4613      	mov	r3, r2
 800b354:	00db      	lsls	r3, r3, #3
 800b356:	4413      	add	r3, r2
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	441a      	add	r2, r3
 800b35c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b360:	f360 1305 	bfi	r3, r0, #4, #2
 800b364:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = wall_data[3];
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	f003 0303 	and.w	r3, r3, #3
 800b36e:	b2d8      	uxtb	r0, r3
 800b370:	4910      	ldr	r1, [pc, #64]	; (800b3b4 <flash_copy_to_ram+0x114>)
 800b372:	697a      	ldr	r2, [r7, #20]
 800b374:	4613      	mov	r3, r2
 800b376:	00db      	lsls	r3, r3, #3
 800b378:	4413      	add	r3, r2
 800b37a:	69ba      	ldr	r2, [r7, #24]
 800b37c:	441a      	add	r2, r3
 800b37e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b382:	f360 1387 	bfi	r3, r0, #6, #2
 800b386:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				address += 16;
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	3310      	adds	r3, #16
 800b38e:	61fb      	str	r3, [r7, #28]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	3301      	adds	r3, #1
 800b394:	617b      	str	r3, [r7, #20]
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	2b08      	cmp	r3, #8
 800b39a:	dd8d      	ble.n	800b2b8 <flash_copy_to_ram+0x18>
	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	61bb      	str	r3, [r7, #24]
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	2b08      	cmp	r3, #8
 800b3a6:	dd84      	ble.n	800b2b2 <flash_copy_to_ram+0x12>
			}
	}

}
 800b3a8:	bf00      	nop
 800b3aa:	3720      	adds	r7, #32
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	0801c6d0 	.word	0x0801c6d0
 800b3b4:	20000ccc 	.word	0x20000ccc

0800b3b8 <judgeRawNodeGoal>:
        return true;
    }
}
//xyがゴールエリアでかつ重みが0かどうか判定 || 表示用
_Bool judgeRawNodeGoal(maze_node *maze, uint8_t x, uint8_t y)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	70fb      	strb	r3, [r7, #3]
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	70bb      	strb	r3, [r7, #2]
    //重みが0かどうか
    if(maze->RawNode[x][y].weight == 0)
 800b3c8:	78f9      	ldrb	r1, [r7, #3]
 800b3ca:	78bb      	ldrb	r3, [r7, #2]
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	0052      	lsls	r2, r2, #1
 800b3d2:	441a      	add	r2, r3
 800b3d4:	0053      	lsls	r3, r2, #1
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	460b      	mov	r3, r1
 800b3da:	011b      	lsls	r3, r3, #4
 800b3dc:	1a5b      	subs	r3, r3, r1
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	4403      	add	r3, r0
 800b3e4:	881b      	ldrh	r3, [r3, #0]
 800b3e6:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d11d      	bne.n	800b42c <judgeRawNodeGoal+0x74>
    {
        //ゴールノードであるかどうか:マクロ作った
        
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800b3f0:	78fb      	ldrb	r3, [r7, #3]
 800b3f2:	2b06      	cmp	r3, #6
 800b3f4:	d908      	bls.n	800b408 <judgeRawNodeGoal+0x50>
 800b3f6:	78fb      	ldrb	r3, [r7, #3]
 800b3f8:	2b08      	cmp	r3, #8
 800b3fa:	d805      	bhi.n	800b408 <judgeRawNodeGoal+0x50>
 800b3fc:	78bb      	ldrb	r3, [r7, #2]
 800b3fe:	2b06      	cmp	r3, #6
 800b400:	d902      	bls.n	800b408 <judgeRawNodeGoal+0x50>
 800b402:	78bb      	ldrb	r3, [r7, #2]
 800b404:	2b08      	cmp	r3, #8
 800b406:	d90d      	bls.n	800b424 <judgeRawNodeGoal+0x6c>
 800b408:	78fb      	ldrb	r3, [r7, #3]
 800b40a:	2b06      	cmp	r3, #6
 800b40c:	d90c      	bls.n	800b428 <judgeRawNodeGoal+0x70>
 800b40e:	78fb      	ldrb	r3, [r7, #3]
 800b410:	2b08      	cmp	r3, #8
 800b412:	d809      	bhi.n	800b428 <judgeRawNodeGoal+0x70>
 800b414:	78bb      	ldrb	r3, [r7, #2]
 800b416:	3b01      	subs	r3, #1
 800b418:	2b06      	cmp	r3, #6
 800b41a:	dd05      	ble.n	800b428 <judgeRawNodeGoal+0x70>
 800b41c:	78bb      	ldrb	r3, [r7, #2]
 800b41e:	3b01      	subs	r3, #1
 800b420:	2b08      	cmp	r3, #8
 800b422:	dc01      	bgt.n	800b428 <judgeRawNodeGoal+0x70>
            return true;
 800b424:	2301      	movs	r3, #1
 800b426:	e002      	b.n	800b42e <judgeRawNodeGoal+0x76>
        
        return false;
 800b428:	2300      	movs	r3, #0
 800b42a:	e000      	b.n	800b42e <judgeRawNodeGoal+0x76>
    }
    else
    {
        return false;
 800b42c:	2300      	movs	r3, #0
    }
}
 800b42e:	4618      	mov	r0, r3
 800b430:	370c      	adds	r7, #12
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <judgeColumnNodeGoal>:
_Bool judgeColumnNodeGoal(maze_node *maze, uint8_t x, uint8_t y)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b083      	sub	sp, #12
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	460b      	mov	r3, r1
 800b444:	70fb      	strb	r3, [r7, #3]
 800b446:	4613      	mov	r3, r2
 800b448:	70bb      	strb	r3, [r7, #2]
    //重みが0かどうか
    if(maze->ColumnNode[x][y].weight == 0)
 800b44a:	78f8      	ldrb	r0, [r7, #3]
 800b44c:	78ba      	ldrb	r2, [r7, #2]
 800b44e:	6879      	ldr	r1, [r7, #4]
 800b450:	4613      	mov	r3, r2
 800b452:	005b      	lsls	r3, r3, #1
 800b454:	4413      	add	r3, r2
 800b456:	005b      	lsls	r3, r3, #1
 800b458:	2236      	movs	r2, #54	; 0x36
 800b45a:	fb02 f200 	mul.w	r2, r2, r0
 800b45e:	4413      	add	r3, r2
 800b460:	440b      	add	r3, r1
 800b462:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800b466:	889b      	ldrh	r3, [r3, #4]
 800b468:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d11d      	bne.n	800b4ae <judgeColumnNodeGoal+0x74>
    {
        //ゴールノードであるかどうか:マクロ作った
        
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800b472:	78fb      	ldrb	r3, [r7, #3]
 800b474:	2b06      	cmp	r3, #6
 800b476:	d908      	bls.n	800b48a <judgeColumnNodeGoal+0x50>
 800b478:	78fb      	ldrb	r3, [r7, #3]
 800b47a:	2b08      	cmp	r3, #8
 800b47c:	d805      	bhi.n	800b48a <judgeColumnNodeGoal+0x50>
 800b47e:	78bb      	ldrb	r3, [r7, #2]
 800b480:	2b06      	cmp	r3, #6
 800b482:	d902      	bls.n	800b48a <judgeColumnNodeGoal+0x50>
 800b484:	78bb      	ldrb	r3, [r7, #2]
 800b486:	2b08      	cmp	r3, #8
 800b488:	d90d      	bls.n	800b4a6 <judgeColumnNodeGoal+0x6c>
 800b48a:	78fb      	ldrb	r3, [r7, #3]
 800b48c:	3b01      	subs	r3, #1
 800b48e:	2b06      	cmp	r3, #6
 800b490:	dd0b      	ble.n	800b4aa <judgeColumnNodeGoal+0x70>
 800b492:	78fb      	ldrb	r3, [r7, #3]
 800b494:	3b01      	subs	r3, #1
 800b496:	2b08      	cmp	r3, #8
 800b498:	dc07      	bgt.n	800b4aa <judgeColumnNodeGoal+0x70>
 800b49a:	78bb      	ldrb	r3, [r7, #2]
 800b49c:	2b06      	cmp	r3, #6
 800b49e:	d904      	bls.n	800b4aa <judgeColumnNodeGoal+0x70>
 800b4a0:	78bb      	ldrb	r3, [r7, #2]
 800b4a2:	2b08      	cmp	r3, #8
 800b4a4:	d801      	bhi.n	800b4aa <judgeColumnNodeGoal+0x70>
            return true;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e002      	b.n	800b4b0 <judgeColumnNodeGoal+0x76>
        
        return false;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	e000      	b.n	800b4b0 <judgeColumnNodeGoal+0x76>
    }
    else
    {
        return false;
 800b4ae:	2300      	movs	r3, #0
    }
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <printAllWeight>:
        printf("[北 東 南 西] = [%u %u %u %u]\r\n", route[k].wall.north, route[k].wall.east, route[k].wall.south, route[k].wall.west);
        printf("\r\n");
    }
}
void printAllWeight(maze_node *maze, position *pos)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b086      	sub	sp, #24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
    //全出力を3桁にそろえればよさそう
    //重みが0かつゴールエリア内の座標なら赤色で出力 31;1m
    //行から表示して、
    //列を表示
    //交互に
    printf("全ノードの重み\r\n");
 800b4c6:	4874      	ldr	r0, [pc, #464]	; (800b698 <printAllWeight+0x1dc>)
 800b4c8:	f00d fb50 	bl	8018b6c <puts>

    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800b4cc:	2309      	movs	r3, #9
 800b4ce:	617b      	str	r3, [r7, #20]
 800b4d0:	e0b5      	b.n	800b63e <printAllWeight+0x182>
    {
        //行
        printf("  +  ");
 800b4d2:	4872      	ldr	r0, [pc, #456]	; (800b69c <printAllWeight+0x1e0>)
 800b4d4:	f00d fac2 	bl	8018a5c <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800b4d8:	2300      	movs	r3, #0
 800b4da:	613b      	str	r3, [r7, #16]
 800b4dc:	e04c      	b.n	800b578 <printAllWeight+0xbc>
        {
            if(judgeRawNodeGoal(maze, x,y) == true || ((pos->x == x) && (pos->y == y)))//辿った経路を赤で表示
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	b2d2      	uxtb	r2, r2
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff ff65 	bl	800b3b8 <judgeRawNodeGoal>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10b      	bne.n	800b50c <printAllWeight+0x50>
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d11c      	bne.n	800b53a <printAllWeight+0x7e>
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	785b      	ldrb	r3, [r3, #1]
 800b504:	461a      	mov	r2, r3
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	4293      	cmp	r3, r2
 800b50a:	d116      	bne.n	800b53a <printAllWeight+0x7e>
            {
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	6939      	ldr	r1, [r7, #16]
 800b512:	461a      	mov	r2, r3
 800b514:	0052      	lsls	r2, r2, #1
 800b516:	441a      	add	r2, r3
 800b518:	0053      	lsls	r3, r2, #1
 800b51a:	461a      	mov	r2, r3
 800b51c:	460b      	mov	r3, r1
 800b51e:	011b      	lsls	r3, r3, #4
 800b520:	1a5b      	subs	r3, r3, r1
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4413      	add	r3, r2
 800b526:	4403      	add	r3, r0
 800b528:	881b      	ldrh	r3, [r3, #0]
 800b52a:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800b52e:	b29b      	uxth	r3, r3
 800b530:	4619      	mov	r1, r3
 800b532:	485b      	ldr	r0, [pc, #364]	; (800b6a0 <printAllWeight+0x1e4>)
 800b534:	f00d fa92 	bl	8018a5c <iprintf>
 800b538:	e015      	b.n	800b566 <printAllWeight+0xaa>
            }
            else
            {
                printf(" %3x ",maze->RawNode[x][y].weight);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	6939      	ldr	r1, [r7, #16]
 800b540:	461a      	mov	r2, r3
 800b542:	0052      	lsls	r2, r2, #1
 800b544:	441a      	add	r2, r3
 800b546:	0053      	lsls	r3, r2, #1
 800b548:	461a      	mov	r2, r3
 800b54a:	460b      	mov	r3, r1
 800b54c:	011b      	lsls	r3, r3, #4
 800b54e:	1a5b      	subs	r3, r3, r1
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4413      	add	r3, r2
 800b554:	4403      	add	r3, r0
 800b556:	881b      	ldrh	r3, [r3, #0]
 800b558:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	4619      	mov	r1, r3
 800b560:	4850      	ldr	r0, [pc, #320]	; (800b6a4 <printAllWeight+0x1e8>)
 800b562:	f00d fa7b 	bl	8018a5c <iprintf>
            }
            if(x < NUMBER_OF_SQUARES_X-1)
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	2b07      	cmp	r3, #7
 800b56a:	dc02      	bgt.n	800b572 <printAllWeight+0xb6>
                 printf("  +  ");
 800b56c:	484b      	ldr	r0, [pc, #300]	; (800b69c <printAllWeight+0x1e0>)
 800b56e:	f00d fa75 	bl	8018a5c <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	3301      	adds	r3, #1
 800b576:	613b      	str	r3, [r7, #16]
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	2b08      	cmp	r3, #8
 800b57c:	ddaf      	ble.n	800b4de <printAllWeight+0x22>
        }
        printf("\r\n");
 800b57e:	484a      	ldr	r0, [pc, #296]	; (800b6a8 <printAllWeight+0x1ec>)
 800b580:	f00d faf4 	bl	8018b6c <puts>
                
        //列
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800b584:	2300      	movs	r3, #0
 800b586:	60fb      	str	r3, [r7, #12]
 800b588:	e050      	b.n	800b62c <printAllWeight+0x170>
        {
            if(judgeColumnNodeGoal(maze, x,y-1) == true || ((pos->x == x) && (pos->y == y)))
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	b2d9      	uxtb	r1, r3
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	b2db      	uxtb	r3, r3
 800b592:	3b01      	subs	r3, #1
 800b594:	b2db      	uxtb	r3, r3
 800b596:	461a      	mov	r2, r3
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f7ff ff4e 	bl	800b43a <judgeColumnNodeGoal>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10b      	bne.n	800b5bc <printAllWeight+0x100>
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d11d      	bne.n	800b5ec <printAllWeight+0x130>
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	785b      	ldrb	r3, [r3, #1]
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d117      	bne.n	800b5ec <printAllWeight+0x130>
            {
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->ColumnNode[x][y-1].weight);
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	1e5a      	subs	r2, r3, #1
 800b5c0:	6879      	ldr	r1, [r7, #4]
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	005b      	lsls	r3, r3, #1
 800b5c8:	4413      	add	r3, r2
 800b5ca:	005b      	lsls	r3, r3, #1
 800b5cc:	2236      	movs	r2, #54	; 0x36
 800b5ce:	fb02 f200 	mul.w	r2, r2, r0
 800b5d2:	4413      	add	r3, r2
 800b5d4:	440b      	add	r3, r1
 800b5d6:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800b5da:	889b      	ldrh	r3, [r3, #4]
 800b5dc:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	482e      	ldr	r0, [pc, #184]	; (800b6a0 <printAllWeight+0x1e4>)
 800b5e6:	f00d fa39 	bl	8018a5c <iprintf>
 800b5ea:	e016      	b.n	800b61a <printAllWeight+0x15e>
            }
            else
            {
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	1e5a      	subs	r2, r3, #1
 800b5f0:	6879      	ldr	r1, [r7, #4]
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	005b      	lsls	r3, r3, #1
 800b5f8:	4413      	add	r3, r2
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	2236      	movs	r2, #54	; 0x36
 800b5fe:	fb02 f200 	mul.w	r2, r2, r0
 800b602:	4413      	add	r3, r2
 800b604:	440b      	add	r3, r1
 800b606:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800b60a:	889b      	ldrh	r3, [r3, #4]
 800b60c:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800b610:	b29b      	uxth	r3, r3
 800b612:	4619      	mov	r1, r3
 800b614:	4823      	ldr	r0, [pc, #140]	; (800b6a4 <printAllWeight+0x1e8>)
 800b616:	f00d fa21 	bl	8018a5c <iprintf>
            }
            if(x < NUMBER_OF_SQUARES_X)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2b08      	cmp	r3, #8
 800b61e:	dc02      	bgt.n	800b626 <printAllWeight+0x16a>
                printf("     ");
 800b620:	4822      	ldr	r0, [pc, #136]	; (800b6ac <printAllWeight+0x1f0>)
 800b622:	f00d fa1b 	bl	8018a5c <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	3301      	adds	r3, #1
 800b62a:	60fb      	str	r3, [r7, #12]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2b09      	cmp	r3, #9
 800b630:	ddab      	ble.n	800b58a <printAllWeight+0xce>
        }
        printf("\r\n");
 800b632:	481d      	ldr	r0, [pc, #116]	; (800b6a8 <printAllWeight+0x1ec>)
 800b634:	f00d fa9a 	bl	8018b6c <puts>
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	3b01      	subs	r3, #1
 800b63c:	617b      	str	r3, [r7, #20]
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	2b00      	cmp	r3, #0
 800b642:	f73f af46 	bgt.w	800b4d2 <printAllWeight+0x16>
    }
    //y が0のときの行だけ表示
    printf("  +  ");
 800b646:	4815      	ldr	r0, [pc, #84]	; (800b69c <printAllWeight+0x1e0>)
 800b648:	f00d fa08 	bl	8018a5c <iprintf>
    for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800b64c:	2300      	movs	r3, #0
 800b64e:	60bb      	str	r3, [r7, #8]
 800b650:	e017      	b.n	800b682 <printAllWeight+0x1c6>
    {
        printf(" %3x ",maze->RawNode[x][0].weight);
 800b652:	6879      	ldr	r1, [r7, #4]
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	4613      	mov	r3, r2
 800b658:	011b      	lsls	r3, r3, #4
 800b65a:	1a9b      	subs	r3, r3, r2
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	440b      	add	r3, r1
 800b660:	881b      	ldrh	r3, [r3, #0]
 800b662:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800b666:	b29b      	uxth	r3, r3
 800b668:	4619      	mov	r1, r3
 800b66a:	480e      	ldr	r0, [pc, #56]	; (800b6a4 <printAllWeight+0x1e8>)
 800b66c:	f00d f9f6 	bl	8018a5c <iprintf>
        if(x < NUMBER_OF_SQUARES_X-1)
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	2b07      	cmp	r3, #7
 800b674:	dc02      	bgt.n	800b67c <printAllWeight+0x1c0>
                printf("  +  ");
 800b676:	4809      	ldr	r0, [pc, #36]	; (800b69c <printAllWeight+0x1e0>)
 800b678:	f00d f9f0 	bl	8018a5c <iprintf>
    for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	3301      	adds	r3, #1
 800b680:	60bb      	str	r3, [r7, #8]
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	2b08      	cmp	r3, #8
 800b686:	dde4      	ble.n	800b652 <printAllWeight+0x196>
    }
    printf("\r\n");
 800b688:	4807      	ldr	r0, [pc, #28]	; (800b6a8 <printAllWeight+0x1ec>)
 800b68a:	f00d fa6f 	bl	8018b6c <puts>
    
    
}
 800b68e:	bf00      	nop
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	0801c1bc 	.word	0x0801c1bc
 800b69c:	0801c1d4 	.word	0x0801c1d4
 800b6a0:	0801c1dc 	.word	0x0801c1dc
 800b6a4:	0801c1f0 	.word	0x0801c1f0
 800b6a8:	0801c1b8 	.word	0x0801c1b8
 800b6ac:	0801c1f8 	.word	0x0801c1f8

0800b6b0 <initWeight>:
            maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].draw == true) ? MAX_WEIGHT : 0;     //西
        }
    }
}
void initWeight(maze_node *maze)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
    //     for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
    //     {
    //         maze->ColumnNode[i][j].weight = MAX_WEIGHT;
    //     }
    // }
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	617b      	str	r3, [r7, #20]
 800b6bc:	e01f      	b.n	800b6fe <initWeight+0x4e>
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800b6be:	2300      	movs	r3, #0
 800b6c0:	613b      	str	r3, [r7, #16]
 800b6c2:	e016      	b.n	800b6f2 <initWeight+0x42>
        {
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	6979      	ldr	r1, [r7, #20]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	0052      	lsls	r2, r2, #1
 800b6ce:	441a      	add	r2, r3
 800b6d0:	0053      	lsls	r3, r2, #1
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	011b      	lsls	r3, r3, #4
 800b6d8:	1a5b      	subs	r3, r3, r1
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4413      	add	r3, r2
 800b6de:	18c2      	adds	r2, r0, r3
 800b6e0:	8813      	ldrh	r3, [r2, #0]
 800b6e2:	f640 71ff 	movw	r1, #4095	; 0xfff
 800b6e6:	f361 038d 	bfi	r3, r1, #2, #12
 800b6ea:	8013      	strh	r3, [r2, #0]
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	613b      	str	r3, [r7, #16]
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	2b09      	cmp	r3, #9
 800b6f6:	dde5      	ble.n	800b6c4 <initWeight+0x14>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	617b      	str	r3, [r7, #20]
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2b08      	cmp	r3, #8
 800b702:	dddc      	ble.n	800b6be <initWeight+0xe>
        }
    }
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800b704:	2300      	movs	r3, #0
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	e01f      	b.n	800b74a <initWeight+0x9a>
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b70a:	2300      	movs	r3, #0
 800b70c:	60bb      	str	r3, [r7, #8]
 800b70e:	e016      	b.n	800b73e <initWeight+0x8e>
        {
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800b710:	6879      	ldr	r1, [r7, #4]
 800b712:	68ba      	ldr	r2, [r7, #8]
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	4613      	mov	r3, r2
 800b718:	005b      	lsls	r3, r3, #1
 800b71a:	4413      	add	r3, r2
 800b71c:	005b      	lsls	r3, r3, #1
 800b71e:	2236      	movs	r2, #54	; 0x36
 800b720:	fb02 f200 	mul.w	r2, r2, r0
 800b724:	4413      	add	r3, r2
 800b726:	440b      	add	r3, r1
 800b728:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800b72c:	8893      	ldrh	r3, [r2, #4]
 800b72e:	f640 71ff 	movw	r1, #4095	; 0xfff
 800b732:	f361 038d 	bfi	r3, r1, #2, #12
 800b736:	8093      	strh	r3, [r2, #4]
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	3301      	adds	r3, #1
 800b73c:	60bb      	str	r3, [r7, #8]
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	2b08      	cmp	r3, #8
 800b742:	dde5      	ble.n	800b710 <initWeight+0x60>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	3301      	adds	r3, #1
 800b748:	60fb      	str	r3, [r7, #12]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2b09      	cmp	r3, #9
 800b74e:	dddc      	ble.n	800b70a <initWeight+0x5a>
        }
    }
}
 800b750:	bf00      	nop
 800b752:	371c      	adds	r7, #28
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <initMaze>:
void initMaze(maze_node *maze) //重みは別で初期化
{
 800b75c:	b490      	push	{r4, r7}
 800b75e:	b088      	sub	sp, #32
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
    //まず未探索状態にする
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b764:	2300      	movs	r3, #0
 800b766:	61fb      	str	r3, [r7, #28]
 800b768:	e066      	b.n	800b838 <initMaze+0xdc>
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800b76a:	2301      	movs	r3, #1
 800b76c:	61bb      	str	r3, [r7, #24]
 800b76e:	e05d      	b.n	800b82c <initMaze+0xd0>
        {
            maze->RawNode[i][j].existence = UNKNOWN;
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	69f9      	ldr	r1, [r7, #28]
 800b776:	461a      	mov	r2, r3
 800b778:	0052      	lsls	r2, r2, #1
 800b77a:	441a      	add	r2, r3
 800b77c:	0053      	lsls	r3, r2, #1
 800b77e:	461a      	mov	r2, r3
 800b780:	460b      	mov	r3, r1
 800b782:	011b      	lsls	r3, r3, #4
 800b784:	1a5b      	subs	r3, r3, r1
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4413      	add	r3, r2
 800b78a:	18c2      	adds	r2, r0, r3
 800b78c:	7813      	ldrb	r3, [r2, #0]
 800b78e:	2102      	movs	r1, #2
 800b790:	f361 0301 	bfi	r3, r1, #0, #2
 800b794:	7013      	strb	r3, [r2, #0]
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	69f9      	ldr	r1, [r7, #28]
 800b79c:	461a      	mov	r2, r3
 800b79e:	0052      	lsls	r2, r2, #1
 800b7a0:	441a      	add	r2, r3
 800b7a2:	0053      	lsls	r3, r2, #1
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	011b      	lsls	r3, r3, #4
 800b7aa:	1a5b      	subs	r3, r3, r1
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4413      	add	r3, r2
 800b7b0:	4403      	add	r3, r0
 800b7b2:	3302      	adds	r3, #2
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	701a      	strb	r2, [r3, #0]
            maze->RawNode[i][j].rc = 0;
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	69f9      	ldr	r1, [r7, #28]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	0052      	lsls	r2, r2, #1
 800b7c2:	441a      	add	r2, r3
 800b7c4:	0053      	lsls	r3, r2, #1
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	011b      	lsls	r3, r3, #4
 800b7cc:	1a5b      	subs	r3, r3, r1
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	4413      	add	r3, r2
 800b7d2:	4403      	add	r3, r0
 800b7d4:	3303      	adds	r3, #3
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	701a      	strb	r2, [r3, #0]
            maze->RawNode[i][j].pos.x = i;
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	b2dc      	uxtb	r4, r3
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	69f9      	ldr	r1, [r7, #28]
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	0052      	lsls	r2, r2, #1
 800b7e8:	441a      	add	r2, r3
 800b7ea:	0053      	lsls	r3, r2, #1
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	011b      	lsls	r3, r3, #4
 800b7f2:	1a5b      	subs	r3, r3, r1
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4413      	add	r3, r2
 800b7f8:	4403      	add	r3, r0
 800b7fa:	3304      	adds	r3, #4
 800b7fc:	4622      	mov	r2, r4
 800b7fe:	701a      	strb	r2, [r3, #0]
            maze->RawNode[i][j].pos.y = j;
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	b2dc      	uxtb	r4, r3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	69f9      	ldr	r1, [r7, #28]
 800b80a:	461a      	mov	r2, r3
 800b80c:	0052      	lsls	r2, r2, #1
 800b80e:	441a      	add	r2, r3
 800b810:	0053      	lsls	r3, r2, #1
 800b812:	461a      	mov	r2, r3
 800b814:	460b      	mov	r3, r1
 800b816:	011b      	lsls	r3, r3, #4
 800b818:	1a5b      	subs	r3, r3, r1
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	4413      	add	r3, r2
 800b81e:	4403      	add	r3, r0
 800b820:	3305      	adds	r3, #5
 800b822:	4622      	mov	r2, r4
 800b824:	701a      	strb	r2, [r3, #0]
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	3301      	adds	r3, #1
 800b82a:	61bb      	str	r3, [r7, #24]
 800b82c:	69bb      	ldr	r3, [r7, #24]
 800b82e:	2b08      	cmp	r3, #8
 800b830:	dd9e      	ble.n	800b770 <initMaze+0x14>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	3301      	adds	r3, #1
 800b836:	61fb      	str	r3, [r7, #28]
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	2b08      	cmp	r3, #8
 800b83c:	dd95      	ble.n	800b76a <initMaze+0xe>
        }
    }
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800b83e:	2301      	movs	r3, #1
 800b840:	617b      	str	r3, [r7, #20]
 800b842:	e062      	b.n	800b90a <initMaze+0x1ae>
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b844:	2300      	movs	r3, #0
 800b846:	613b      	str	r3, [r7, #16]
 800b848:	e059      	b.n	800b8fe <initMaze+0x1a2>
        {
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800b84a:	6879      	ldr	r1, [r7, #4]
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	6978      	ldr	r0, [r7, #20]
 800b850:	4613      	mov	r3, r2
 800b852:	005b      	lsls	r3, r3, #1
 800b854:	4413      	add	r3, r2
 800b856:	005b      	lsls	r3, r3, #1
 800b858:	2236      	movs	r2, #54	; 0x36
 800b85a:	fb02 f200 	mul.w	r2, r2, r0
 800b85e:	4413      	add	r3, r2
 800b860:	440b      	add	r3, r1
 800b862:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800b866:	7913      	ldrb	r3, [r2, #4]
 800b868:	2102      	movs	r1, #2
 800b86a:	f361 0301 	bfi	r3, r1, #0, #2
 800b86e:	7113      	strb	r3, [r2, #4]
            maze->ColumnNode[i][j].draw = false;
 800b870:	6879      	ldr	r1, [r7, #4]
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	6978      	ldr	r0, [r7, #20]
 800b876:	4613      	mov	r3, r2
 800b878:	005b      	lsls	r3, r3, #1
 800b87a:	4413      	add	r3, r2
 800b87c:	005b      	lsls	r3, r3, #1
 800b87e:	2236      	movs	r2, #54	; 0x36
 800b880:	fb02 f200 	mul.w	r2, r2, r0
 800b884:	4413      	add	r3, r2
 800b886:	440b      	add	r3, r1
 800b888:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800b88c:	2200      	movs	r2, #0
 800b88e:	701a      	strb	r2, [r3, #0]
            maze->ColumnNode[i][j].rc = 1;
 800b890:	6879      	ldr	r1, [r7, #4]
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	6978      	ldr	r0, [r7, #20]
 800b896:	4613      	mov	r3, r2
 800b898:	005b      	lsls	r3, r3, #1
 800b89a:	4413      	add	r3, r2
 800b89c:	005b      	lsls	r3, r3, #1
 800b89e:	2236      	movs	r2, #54	; 0x36
 800b8a0:	fb02 f200 	mul.w	r2, r2, r0
 800b8a4:	4413      	add	r3, r2
 800b8a6:	440b      	add	r3, r1
 800b8a8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	701a      	strb	r2, [r3, #0]
            maze->ColumnNode[i][j].pos.x = i;
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	b2dc      	uxtb	r4, r3
 800b8b4:	6879      	ldr	r1, [r7, #4]
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	6978      	ldr	r0, [r7, #20]
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	005b      	lsls	r3, r3, #1
 800b8be:	4413      	add	r3, r2
 800b8c0:	005b      	lsls	r3, r3, #1
 800b8c2:	2236      	movs	r2, #54	; 0x36
 800b8c4:	fb02 f200 	mul.w	r2, r2, r0
 800b8c8:	4413      	add	r3, r2
 800b8ca:	440b      	add	r3, r1
 800b8cc:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800b8d0:	4622      	mov	r2, r4
 800b8d2:	701a      	strb	r2, [r3, #0]
            maze->ColumnNode[i][j].pos.y = j;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	b2dc      	uxtb	r4, r3
 800b8d8:	6879      	ldr	r1, [r7, #4]
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	6978      	ldr	r0, [r7, #20]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	4413      	add	r3, r2
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	2236      	movs	r2, #54	; 0x36
 800b8e8:	fb02 f200 	mul.w	r2, r2, r0
 800b8ec:	4413      	add	r3, r2
 800b8ee:	440b      	add	r3, r1
 800b8f0:	f203 2321 	addw	r3, r3, #545	; 0x221
 800b8f4:	4622      	mov	r2, r4
 800b8f6:	701a      	strb	r2, [r3, #0]
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	613b      	str	r3, [r7, #16]
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	2b08      	cmp	r3, #8
 800b902:	dda2      	ble.n	800b84a <initMaze+0xee>
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	3301      	adds	r3, #1
 800b908:	617b      	str	r3, [r7, #20]
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b08      	cmp	r3, #8
 800b90e:	dd99      	ble.n	800b844 <initMaze+0xe8>
        }
    }
    
    // 壁の有無を初期化
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b910:	2300      	movs	r3, #0
 800b912:	60fb      	str	r3, [r7, #12]
 800b914:	e070      	b.n	800b9f8 <initMaze+0x29c>
    {
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800b916:	6879      	ldr	r1, [r7, #4]
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	4613      	mov	r3, r2
 800b91c:	011b      	lsls	r3, r3, #4
 800b91e:	1a9b      	subs	r3, r3, r2
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	18ca      	adds	r2, r1, r3
 800b924:	7813      	ldrb	r3, [r2, #0]
 800b926:	2101      	movs	r1, #1
 800b928:	f361 0301 	bfi	r3, r1, #0, #2
 800b92c:	7013      	strb	r3, [r2, #0]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1
 800b92e:	6879      	ldr	r1, [r7, #4]
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	4613      	mov	r3, r2
 800b934:	011b      	lsls	r3, r3, #4
 800b936:	1a9b      	subs	r3, r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	440b      	add	r3, r1
 800b93c:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800b940:	7813      	ldrb	r3, [r2, #0]
 800b942:	2101      	movs	r1, #1
 800b944:	f361 0301 	bfi	r3, r1, #0, #2
 800b948:	7013      	strb	r3, [r2, #0]

        maze->RawNode[i][0].draw = true;                        
 800b94a:	6879      	ldr	r1, [r7, #4]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	4613      	mov	r3, r2
 800b950:	011b      	lsls	r3, r3, #4
 800b952:	1a9b      	subs	r3, r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	440b      	add	r3, r1
 800b958:	3302      	adds	r3, #2
 800b95a:	2201      	movs	r2, #1
 800b95c:	701a      	strb	r2, [r3, #0]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;
 800b95e:	6879      	ldr	r1, [r7, #4]
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	4613      	mov	r3, r2
 800b964:	011b      	lsls	r3, r3, #4
 800b966:	1a9b      	subs	r3, r3, r2
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	440b      	add	r3, r1
 800b96c:	3338      	adds	r3, #56	; 0x38
 800b96e:	2201      	movs	r2, #1
 800b970:	701a      	strb	r2, [r3, #0]

        maze->RawNode[i][0].rc = 0;
 800b972:	6879      	ldr	r1, [r7, #4]
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	4613      	mov	r3, r2
 800b978:	011b      	lsls	r3, r3, #4
 800b97a:	1a9b      	subs	r3, r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	440b      	add	r3, r1
 800b980:	3303      	adds	r3, #3
 800b982:	2200      	movs	r2, #0
 800b984:	701a      	strb	r2, [r3, #0]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;
 800b986:	6879      	ldr	r1, [r7, #4]
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	4613      	mov	r3, r2
 800b98c:	011b      	lsls	r3, r3, #4
 800b98e:	1a9b      	subs	r3, r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	440b      	add	r3, r1
 800b994:	3339      	adds	r3, #57	; 0x39
 800b996:	2200      	movs	r2, #0
 800b998:	701a      	strb	r2, [r3, #0]

        maze->RawNode[i][0].pos.x = i;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	b2d8      	uxtb	r0, r3
 800b99e:	6879      	ldr	r1, [r7, #4]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	011b      	lsls	r3, r3, #4
 800b9a6:	1a9b      	subs	r3, r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	440b      	add	r3, r1
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	701a      	strb	r2, [r3, #0]
        maze->RawNode[i][0].pos.y = NUMBER_OF_SQUARES_Y;
 800b9b2:	6879      	ldr	r1, [r7, #4]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	011b      	lsls	r3, r3, #4
 800b9ba:	1a9b      	subs	r3, r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	440b      	add	r3, r1
 800b9c0:	3305      	adds	r3, #5
 800b9c2:	2209      	movs	r2, #9
 800b9c4:	701a      	strb	r2, [r3, #0]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	b2d8      	uxtb	r0, r3
 800b9ca:	6879      	ldr	r1, [r7, #4]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	011b      	lsls	r3, r3, #4
 800b9d2:	1a9b      	subs	r3, r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	440b      	add	r3, r1
 800b9d8:	333a      	adds	r3, #58	; 0x3a
 800b9da:	4602      	mov	r2, r0
 800b9dc:	701a      	strb	r2, [r3, #0]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.y = NUMBER_OF_SQUARES_Y;
 800b9de:	6879      	ldr	r1, [r7, #4]
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	011b      	lsls	r3, r3, #4
 800b9e6:	1a9b      	subs	r3, r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	440b      	add	r3, r1
 800b9ec:	333b      	adds	r3, #59	; 0x3b
 800b9ee:	2209      	movs	r2, #9
 800b9f0:	701a      	strb	r2, [r3, #0]
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	60fb      	str	r3, [r7, #12]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2b08      	cmp	r3, #8
 800b9fc:	dd8b      	ble.n	800b916 <initMaze+0x1ba>
    }
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b9fe:	2300      	movs	r3, #0
 800ba00:	60bb      	str	r3, [r7, #8]
 800ba02:	e07a      	b.n	800bafa <initMaze+0x39e>
    {
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800ba04:	6879      	ldr	r1, [r7, #4]
 800ba06:	68ba      	ldr	r2, [r7, #8]
 800ba08:	4613      	mov	r3, r2
 800ba0a:	005b      	lsls	r3, r3, #1
 800ba0c:	4413      	add	r3, r2
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	440b      	add	r3, r1
 800ba12:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800ba16:	7913      	ldrb	r3, [r2, #4]
 800ba18:	2101      	movs	r1, #1
 800ba1a:	f361 0301 	bfi	r3, r1, #0, #2
 800ba1e:	7113      	strb	r3, [r2, #4]
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].existence = WALL;  //東壁すべて1
 800ba20:	6879      	ldr	r1, [r7, #4]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	4613      	mov	r3, r2
 800ba26:	005b      	lsls	r3, r3, #1
 800ba28:	4413      	add	r3, r2
 800ba2a:	005b      	lsls	r3, r3, #1
 800ba2c:	440b      	add	r3, r1
 800ba2e:	f203 32fe 	addw	r2, r3, #1022	; 0x3fe
 800ba32:	7913      	ldrb	r3, [r2, #4]
 800ba34:	2101      	movs	r1, #1
 800ba36:	f361 0301 	bfi	r3, r1, #0, #2
 800ba3a:	7113      	strb	r3, [r2, #4]

        maze->ColumnNode[0][j].draw = true;                    
 800ba3c:	6879      	ldr	r1, [r7, #4]
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	4613      	mov	r3, r2
 800ba42:	005b      	lsls	r3, r3, #1
 800ba44:	4413      	add	r3, r2
 800ba46:	005b      	lsls	r3, r3, #1
 800ba48:	440b      	add	r3, r1
 800ba4a:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800ba4e:	2201      	movs	r2, #1
 800ba50:	701a      	strb	r2, [r3, #0]
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;
 800ba52:	6879      	ldr	r1, [r7, #4]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	4613      	mov	r3, r2
 800ba58:	005b      	lsls	r3, r3, #1
 800ba5a:	4413      	add	r3, r2
 800ba5c:	005b      	lsls	r3, r3, #1
 800ba5e:	440b      	add	r3, r1
 800ba60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ba64:	2201      	movs	r2, #1
 800ba66:	701a      	strb	r2, [r3, #0]

        maze->ColumnNode[0][j].rc = 1;
 800ba68:	6879      	ldr	r1, [r7, #4]
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	005b      	lsls	r3, r3, #1
 800ba70:	4413      	add	r3, r2
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	440b      	add	r3, r1
 800ba76:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	701a      	strb	r2, [r3, #0]
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;
 800ba7e:	6879      	ldr	r1, [r7, #4]
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	4613      	mov	r3, r2
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	4413      	add	r3, r2
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	440b      	add	r3, r1
 800ba8c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800ba90:	2201      	movs	r2, #1
 800ba92:	701a      	strb	r2, [r3, #0]

        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
 800ba94:	6879      	ldr	r1, [r7, #4]
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	4613      	mov	r3, r2
 800ba9a:	005b      	lsls	r3, r3, #1
 800ba9c:	4413      	add	r3, r2
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	440b      	add	r3, r1
 800baa2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800baa6:	2209      	movs	r2, #9
 800baa8:	701a      	strb	r2, [r3, #0]
        maze->ColumnNode[0][j].pos.y = j;
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	b2d8      	uxtb	r0, r3
 800baae:	6879      	ldr	r1, [r7, #4]
 800bab0:	68ba      	ldr	r2, [r7, #8]
 800bab2:	4613      	mov	r3, r2
 800bab4:	005b      	lsls	r3, r3, #1
 800bab6:	4413      	add	r3, r2
 800bab8:	005b      	lsls	r3, r3, #1
 800baba:	440b      	add	r3, r1
 800babc:	f203 2321 	addw	r3, r3, #545	; 0x221
 800bac0:	4602      	mov	r2, r0
 800bac2:	701a      	strb	r2, [r3, #0]
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
 800bac4:	6879      	ldr	r1, [r7, #4]
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	4613      	mov	r3, r2
 800baca:	005b      	lsls	r3, r3, #1
 800bacc:	4413      	add	r3, r2
 800bace:	005b      	lsls	r3, r3, #1
 800bad0:	440b      	add	r3, r1
 800bad2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bad6:	2209      	movs	r2, #9
 800bad8:	701a      	strb	r2, [r3, #0]
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.y = j;
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	b2d8      	uxtb	r0, r3
 800bade:	6879      	ldr	r1, [r7, #4]
 800bae0:	68ba      	ldr	r2, [r7, #8]
 800bae2:	4613      	mov	r3, r2
 800bae4:	005b      	lsls	r3, r3, #1
 800bae6:	4413      	add	r3, r2
 800bae8:	005b      	lsls	r3, r3, #1
 800baea:	440b      	add	r3, r1
 800baec:	f203 4307 	addw	r3, r3, #1031	; 0x407
 800baf0:	4602      	mov	r2, r0
 800baf2:	701a      	strb	r2, [r3, #0]
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	3301      	adds	r3, #1
 800baf8:	60bb      	str	r3, [r7, #8]
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	2b08      	cmp	r3, #8
 800bafe:	dd81      	ble.n	800ba04 <initMaze+0x2a8>
    }
    maze->ColumnNode[1][0].existence = WALL;    //東1
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	f892 3252 	ldrb.w	r3, [r2, #594]	; 0x252
 800bb06:	2101      	movs	r1, #1
 800bb08:	f361 0301 	bfi	r3, r1, #0, #2
 800bb0c:	f882 3252 	strb.w	r3, [r2, #594]	; 0x252
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	7993      	ldrb	r3, [r2, #6]
 800bb14:	f36f 0301 	bfc	r3, #0, #2
 800bb18:	7193      	strb	r3, [r2, #6]

    maze->ColumnNode[1][0].draw = true;    //東1
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
    maze->RawNode[0][1].draw = false;     //北0
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	721a      	strb	r2, [r3, #8]
}
 800bb28:	bf00      	nop
 800bb2a:	3720      	adds	r7, #32
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bc90      	pop	{r4, r7}
 800bb30:	4770      	bx	lr
	...

0800bb34 <printAllNode>:
    printf("行ノード %d, %d : 壁 %u, 重み %u, draw %u\r\n", x,y, mn->RawNode[x][y].existence,mn->RawNode[x][y].weight,mn->RawNode[x][y].draw);
    printf("列ノード %d, %d : 壁 %u, 重み %u, draw %u\r\n", x,y, mn->ColumnNode[x][y].existence,mn->ColumnNode[x][y].weight,mn->ColumnNode[x][y].draw);
}
//ノードの壁の有無はそのまま描画用データになる。外堀だけprintfしない
void printAllNode(maze_node *mn)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
    printf("全ノード\r\n");
 800bb3c:	482a      	ldr	r0, [pc, #168]	; (800bbe8 <printAllNode+0xb4>)
 800bb3e:	f00d f815 	bl	8018b6c <puts>
    //MATLABで保存するときと同じパターンで出力する
    //Raw
    //Column
    //Rawを1列出力し、改行せずColumnの1列出力。
    //行を増やして同じ処理
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800bb42:	2300      	movs	r3, #0
 800bb44:	617b      	str	r3, [r7, #20]
 800bb46:	e045      	b.n	800bbd4 <printAllNode+0xa0>
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800bb48:	2301      	movs	r3, #1
 800bb4a:	613b      	str	r3, [r7, #16]
 800bb4c:	e016      	b.n	800bb7c <printAllNode+0x48>
        {
            printf("%u,",mn->RawNode[i][j].draw);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	6979      	ldr	r1, [r7, #20]
 800bb54:	461a      	mov	r2, r3
 800bb56:	0052      	lsls	r2, r2, #1
 800bb58:	441a      	add	r2, r3
 800bb5a:	0053      	lsls	r3, r2, #1
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	460b      	mov	r3, r1
 800bb60:	011b      	lsls	r3, r3, #4
 800bb62:	1a5b      	subs	r3, r3, r1
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4413      	add	r3, r2
 800bb68:	4403      	add	r3, r0
 800bb6a:	3302      	adds	r3, #2
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	4619      	mov	r1, r3
 800bb70:	481e      	ldr	r0, [pc, #120]	; (800bbec <printAllNode+0xb8>)
 800bb72:	f00c ff73 	bl	8018a5c <iprintf>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	613b      	str	r3, [r7, #16]
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	2b09      	cmp	r3, #9
 800bb80:	dde5      	ble.n	800bb4e <printAllNode+0x1a>
        }
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800bb82:	2300      	movs	r3, #0
 800bb84:	60fb      	str	r3, [r7, #12]
 800bb86:	e01c      	b.n	800bbc2 <printAllNode+0x8e>
        {
            printf("%u",mn->ColumnNode[i+1][j].draw);
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	1c58      	adds	r0, r3, #1
 800bb8c:	6879      	ldr	r1, [r7, #4]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	4613      	mov	r3, r2
 800bb92:	005b      	lsls	r3, r3, #1
 800bb94:	4413      	add	r3, r2
 800bb96:	005b      	lsls	r3, r3, #1
 800bb98:	2236      	movs	r2, #54	; 0x36
 800bb9a:	fb02 f200 	mul.w	r2, r2, r0
 800bb9e:	4413      	add	r3, r2
 800bba0:	440b      	add	r3, r1
 800bba2:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	4811      	ldr	r0, [pc, #68]	; (800bbf0 <printAllNode+0xbc>)
 800bbac:	f00c ff56 	bl	8018a5c <iprintf>
            if(j < NUMBER_OF_SQUARES_Y-1)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2b07      	cmp	r3, #7
 800bbb4:	dc02      	bgt.n	800bbbc <printAllNode+0x88>
                printf(",");
 800bbb6:	202c      	movs	r0, #44	; 0x2c
 800bbb8:	f00c ff68 	bl	8018a8c <putchar>
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	60fb      	str	r3, [r7, #12]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2b08      	cmp	r3, #8
 800bbc6:	dddf      	ble.n	800bb88 <printAllNode+0x54>
        }
        printf("\r\n");
 800bbc8:	480a      	ldr	r0, [pc, #40]	; (800bbf4 <printAllNode+0xc0>)
 800bbca:	f00c ffcf 	bl	8018b6c <puts>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	617b      	str	r3, [r7, #20]
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	2b08      	cmp	r3, #8
 800bbd8:	ddb6      	ble.n	800bb48 <printAllNode+0x14>
    }
    printf("\r\n");
 800bbda:	4806      	ldr	r0, [pc, #24]	; (800bbf4 <printAllNode+0xc0>)
 800bbdc:	f00c ffc6 	bl	8018b6c <puts>
}
 800bbe0:	bf00      	nop
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	0801c268 	.word	0x0801c268
 800bbec:	0801c278 	.word	0x0801c278
 800bbf0:	0801c27c 	.word	0x0801c27c
 800bbf4:	0801c1b8 	.word	0x0801c1b8

0800bbf8 <convertNodeTo16Value>:
    fclose(fp);
    return true;

}
static uint8_t convertNodeTo16Value(maze_node *maze, int x, int y)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b087      	sub	sp, #28
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
    //xy座標を入力
    //各マスの16進数を出力。
    uint8_t val=0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	75fb      	strb	r3, [r7, #23]
    val += 1 * maze->RawNode[x][y+1].draw;      //北
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	68b9      	ldr	r1, [r7, #8]
 800bc10:	461a      	mov	r2, r3
 800bc12:	0052      	lsls	r2, r2, #1
 800bc14:	441a      	add	r2, r3
 800bc16:	0053      	lsls	r3, r2, #1
 800bc18:	461a      	mov	r2, r3
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	011b      	lsls	r3, r3, #4
 800bc1e:	1a5b      	subs	r3, r3, r1
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	4413      	add	r3, r2
 800bc24:	4403      	add	r3, r0
 800bc26:	3302      	adds	r3, #2
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	7dfb      	ldrb	r3, [r7, #23]
 800bc2e:	4413      	add	r3, r2
 800bc30:	75fb      	strb	r3, [r7, #23]
    val += 2 * maze->ColumnNode[x+1][y].draw;   //東
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	1c58      	adds	r0, r3, #1
 800bc36:	68f9      	ldr	r1, [r7, #12]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	005b      	lsls	r3, r3, #1
 800bc3e:	4413      	add	r3, r2
 800bc40:	005b      	lsls	r3, r3, #1
 800bc42:	2236      	movs	r2, #54	; 0x36
 800bc44:	fb02 f200 	mul.w	r2, r2, r0
 800bc48:	4413      	add	r3, r2
 800bc4a:	440b      	add	r3, r1
 800bc4c:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	005b      	lsls	r3, r3, #1
 800bc54:	b2da      	uxtb	r2, r3
 800bc56:	7dfb      	ldrb	r3, [r7, #23]
 800bc58:	4413      	add	r3, r2
 800bc5a:	75fb      	strb	r3, [r7, #23]
    val += 4 * maze->RawNode[x][y].draw;        //南
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68b9      	ldr	r1, [r7, #8]
 800bc62:	461a      	mov	r2, r3
 800bc64:	0052      	lsls	r2, r2, #1
 800bc66:	441a      	add	r2, r3
 800bc68:	0053      	lsls	r3, r2, #1
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	011b      	lsls	r3, r3, #4
 800bc70:	1a5b      	subs	r3, r3, r1
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	4403      	add	r3, r0
 800bc78:	3302      	adds	r3, #2
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	7dfb      	ldrb	r3, [r7, #23]
 800bc82:	4413      	add	r3, r2
 800bc84:	75fb      	strb	r3, [r7, #23]
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800bc86:	68f9      	ldr	r1, [r7, #12]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	68b8      	ldr	r0, [r7, #8]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	4413      	add	r3, r2
 800bc92:	005b      	lsls	r3, r3, #1
 800bc94:	2236      	movs	r2, #54	; 0x36
 800bc96:	fb02 f200 	mul.w	r2, r2, r0
 800bc9a:	4413      	add	r3, r2
 800bc9c:	440b      	add	r3, r1
 800bc9e:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	00db      	lsls	r3, r3, #3
 800bca6:	b2da      	uxtb	r2, r3
 800bca8:	7dfb      	ldrb	r3, [r7, #23]
 800bcaa:	4413      	add	r3, r2
 800bcac:	75fb      	strb	r3, [r7, #23]
    return val;
 800bcae:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	371c      	adds	r7, #28
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <printMatrix16ValueFromNode>:

//機体からTeraTermで出力するための関数
void printMatrix16ValueFromNode(maze_node *maze)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
    printf("機体からTeraTermへの出力用\r\n");
 800bcc4:	4817      	ldr	r0, [pc, #92]	; (800bd24 <printMatrix16ValueFromNode+0x68>)
 800bcc6:	f00c ff51 	bl	8018b6c <puts>
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800bcca:	2308      	movs	r3, #8
 800bccc:	60fb      	str	r3, [r7, #12]
 800bcce:	e01e      	b.n	800bd0e <printMatrix16ValueFromNode+0x52>
    {
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	60bb      	str	r3, [r7, #8]
 800bcd4:	e012      	b.n	800bcfc <printMatrix16ValueFromNode+0x40>
        {
            printf("%u",convertNodeTo16Value(maze, i,j));
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	68b9      	ldr	r1, [r7, #8]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f7ff ff8c 	bl	800bbf8 <convertNodeTo16Value>
 800bce0:	4603      	mov	r3, r0
 800bce2:	4619      	mov	r1, r3
 800bce4:	4810      	ldr	r0, [pc, #64]	; (800bd28 <printMatrix16ValueFromNode+0x6c>)
 800bce6:	f00c feb9 	bl	8018a5c <iprintf>
            if(i < NUMBER_OF_SQUARES_X-1)
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	2b07      	cmp	r3, #7
 800bcee:	dc02      	bgt.n	800bcf6 <printMatrix16ValueFromNode+0x3a>
                printf(",");
 800bcf0:	202c      	movs	r0, #44	; 0x2c
 800bcf2:	f00c fecb 	bl	8018a8c <putchar>
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	60bb      	str	r3, [r7, #8]
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	2b08      	cmp	r3, #8
 800bd00:	dde9      	ble.n	800bcd6 <printMatrix16ValueFromNode+0x1a>
        }
        printf("\r\n");
 800bd02:	480a      	ldr	r0, [pc, #40]	; (800bd2c <printMatrix16ValueFromNode+0x70>)
 800bd04:	f00c ff32 	bl	8018b6c <puts>
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	60fb      	str	r3, [r7, #12]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	dadd      	bge.n	800bcd0 <printMatrix16ValueFromNode+0x14>
    }
    printf("\r\n");
 800bd14:	4805      	ldr	r0, [pc, #20]	; (800bd2c <printMatrix16ValueFromNode+0x70>)
 800bd16:	f00c ff29 	bl	8018b6c <puts>

}
 800bd1a:	bf00      	nop
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	0801c2c4 	.word	0x0801c2c4
 800bd28:	0801c27c 	.word	0x0801c27c
 800bd2c:	0801c1b8 	.word	0x0801c1b8

0800bd30 <updateNodeThree>:


//壁があれば重みはデフォルト値を代入する
//壁がなければそのままにしておく 前左右の情報の方角に合わせた変換は別のところで
void updateNodeThree(maze_node *maze, state *st, uint8_t x, uint8_t y)
{
 800bd30:	b490      	push	{r4, r7}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	4611      	mov	r1, r2
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	460b      	mov	r3, r1
 800bd40:	71fb      	strb	r3, [r7, #7]
 800bd42:	4613      	mov	r3, r2
 800bd44:	71bb      	strb	r3, [r7, #6]
    //壁の有無の更新。既知の壁には上書きしない。重みの更新は？既知かどうかは重複するから書かない
        //重みは？壁があればMAX値、なければそのまま   
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800bd46:	79f9      	ldrb	r1, [r7, #7]
 800bd48:	79bb      	ldrb	r3, [r7, #6]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	461a      	mov	r2, r3
 800bd50:	0052      	lsls	r2, r2, #1
 800bd52:	441a      	add	r2, r3
 800bd54:	0053      	lsls	r3, r2, #1
 800bd56:	461a      	mov	r2, r3
 800bd58:	460b      	mov	r3, r1
 800bd5a:	011b      	lsls	r3, r3, #4
 800bd5c:	1a5b      	subs	r3, r3, r1
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	4413      	add	r3, r2
 800bd62:	4403      	add	r3, r0
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	d105      	bne.n	800bd7c <updateNodeThree+0x4c>
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	791b      	ldrb	r3, [r3, #4]
 800bd74:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bd78:	b2d9      	uxtb	r1, r3
 800bd7a:	e012      	b.n	800bda2 <updateNodeThree+0x72>
 800bd7c:	79f9      	ldrb	r1, [r7, #7]
 800bd7e:	79bb      	ldrb	r3, [r7, #6]
 800bd80:	3301      	adds	r3, #1
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	461a      	mov	r2, r3
 800bd86:	0052      	lsls	r2, r2, #1
 800bd88:	441a      	add	r2, r3
 800bd8a:	0053      	lsls	r3, r2, #1
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	460b      	mov	r3, r1
 800bd90:	011b      	lsls	r3, r3, #4
 800bd92:	1a5b      	subs	r3, r3, r1
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	4403      	add	r3, r0
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bda0:	b2d9      	uxtb	r1, r3
 800bda2:	79f8      	ldrb	r0, [r7, #7]
 800bda4:	79bb      	ldrb	r3, [r7, #6]
 800bda6:	3301      	adds	r3, #1
 800bda8:	68fc      	ldr	r4, [r7, #12]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	0052      	lsls	r2, r2, #1
 800bdae:	441a      	add	r2, r3
 800bdb0:	0053      	lsls	r3, r2, #1
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	011b      	lsls	r3, r3, #4
 800bdb8:	1a1b      	subs	r3, r3, r0
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	4413      	add	r3, r2
 800bdbe:	18e2      	adds	r2, r4, r3
 800bdc0:	7813      	ldrb	r3, [r2, #0]
 800bdc2:	f361 0301 	bfi	r3, r1, #0, #2
 800bdc6:	7013      	strb	r3, [r2, #0]
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800bdc8:	79fb      	ldrb	r3, [r7, #7]
 800bdca:	1c58      	adds	r0, r3, #1
 800bdcc:	79ba      	ldrb	r2, [r7, #6]
 800bdce:	68f9      	ldr	r1, [r7, #12]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	005b      	lsls	r3, r3, #1
 800bdd4:	4413      	add	r3, r2
 800bdd6:	005b      	lsls	r3, r3, #1
 800bdd8:	2236      	movs	r2, #54	; 0x36
 800bdda:	fb02 f200 	mul.w	r2, r2, r0
 800bdde:	4413      	add	r3, r2
 800bde0:	440b      	add	r3, r1
 800bde2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800bde6:	791b      	ldrb	r3, [r3, #4]
 800bde8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	d105      	bne.n	800bdfe <updateNodeThree+0xce>
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	791b      	ldrb	r3, [r3, #4]
 800bdf6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800bdfa:	b2d9      	uxtb	r1, r3
 800bdfc:	e012      	b.n	800be24 <updateNodeThree+0xf4>
 800bdfe:	79fb      	ldrb	r3, [r7, #7]
 800be00:	1c58      	adds	r0, r3, #1
 800be02:	79ba      	ldrb	r2, [r7, #6]
 800be04:	68f9      	ldr	r1, [r7, #12]
 800be06:	4613      	mov	r3, r2
 800be08:	005b      	lsls	r3, r3, #1
 800be0a:	4413      	add	r3, r2
 800be0c:	005b      	lsls	r3, r3, #1
 800be0e:	2236      	movs	r2, #54	; 0x36
 800be10:	fb02 f200 	mul.w	r2, r2, r0
 800be14:	4413      	add	r3, r2
 800be16:	440b      	add	r3, r1
 800be18:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800be1c:	791b      	ldrb	r3, [r3, #4]
 800be1e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800be22:	b2d9      	uxtb	r1, r3
 800be24:	79fb      	ldrb	r3, [r7, #7]
 800be26:	1c5c      	adds	r4, r3, #1
 800be28:	79ba      	ldrb	r2, [r7, #6]
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	4613      	mov	r3, r2
 800be2e:	005b      	lsls	r3, r3, #1
 800be30:	4413      	add	r3, r2
 800be32:	005b      	lsls	r3, r3, #1
 800be34:	2236      	movs	r2, #54	; 0x36
 800be36:	fb02 f204 	mul.w	r2, r2, r4
 800be3a:	4413      	add	r3, r2
 800be3c:	4403      	add	r3, r0
 800be3e:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800be42:	7913      	ldrb	r3, [r2, #4]
 800be44:	f361 0301 	bfi	r3, r1, #0, #2
 800be48:	7113      	strb	r3, [r2, #4]
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800be4a:	79f9      	ldrb	r1, [r7, #7]
 800be4c:	79bb      	ldrb	r3, [r7, #6]
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	461a      	mov	r2, r3
 800be52:	0052      	lsls	r2, r2, #1
 800be54:	441a      	add	r2, r3
 800be56:	0053      	lsls	r3, r2, #1
 800be58:	461a      	mov	r2, r3
 800be5a:	460b      	mov	r3, r1
 800be5c:	011b      	lsls	r3, r3, #4
 800be5e:	1a5b      	subs	r3, r3, r1
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	4413      	add	r3, r2
 800be64:	4403      	add	r3, r0
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d105      	bne.n	800be7e <updateNodeThree+0x14e>
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	791b      	ldrb	r3, [r3, #4]
 800be76:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800be7a:	b2d9      	uxtb	r1, r3
 800be7c:	e011      	b.n	800bea2 <updateNodeThree+0x172>
 800be7e:	79f9      	ldrb	r1, [r7, #7]
 800be80:	79bb      	ldrb	r3, [r7, #6]
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	461a      	mov	r2, r3
 800be86:	0052      	lsls	r2, r2, #1
 800be88:	441a      	add	r2, r3
 800be8a:	0053      	lsls	r3, r2, #1
 800be8c:	461a      	mov	r2, r3
 800be8e:	460b      	mov	r3, r1
 800be90:	011b      	lsls	r3, r3, #4
 800be92:	1a5b      	subs	r3, r3, r1
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	4403      	add	r3, r0
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bea0:	b2d9      	uxtb	r1, r3
 800bea2:	79f8      	ldrb	r0, [r7, #7]
 800bea4:	79bb      	ldrb	r3, [r7, #6]
 800bea6:	68fc      	ldr	r4, [r7, #12]
 800bea8:	461a      	mov	r2, r3
 800beaa:	0052      	lsls	r2, r2, #1
 800beac:	441a      	add	r2, r3
 800beae:	0053      	lsls	r3, r2, #1
 800beb0:	461a      	mov	r2, r3
 800beb2:	4603      	mov	r3, r0
 800beb4:	011b      	lsls	r3, r3, #4
 800beb6:	1a1b      	subs	r3, r3, r0
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	4413      	add	r3, r2
 800bebc:	18e2      	adds	r2, r4, r3
 800bebe:	7813      	ldrb	r3, [r2, #0]
 800bec0:	f361 0301 	bfi	r3, r1, #0, #2
 800bec4:	7013      	strb	r3, [r2, #0]
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800bec6:	79f8      	ldrb	r0, [r7, #7]
 800bec8:	79ba      	ldrb	r2, [r7, #6]
 800beca:	68f9      	ldr	r1, [r7, #12]
 800becc:	4613      	mov	r3, r2
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	4413      	add	r3, r2
 800bed2:	005b      	lsls	r3, r3, #1
 800bed4:	2236      	movs	r2, #54	; 0x36
 800bed6:	fb02 f200 	mul.w	r2, r2, r0
 800beda:	4413      	add	r3, r2
 800bedc:	440b      	add	r3, r1
 800bede:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800bee2:	791b      	ldrb	r3, [r3, #4]
 800bee4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	2b02      	cmp	r3, #2
 800beec:	d105      	bne.n	800befa <updateNodeThree+0x1ca>
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	791b      	ldrb	r3, [r3, #4]
 800bef2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bef6:	b2d9      	uxtb	r1, r3
 800bef8:	e011      	b.n	800bf1e <updateNodeThree+0x1ee>
 800befa:	79f8      	ldrb	r0, [r7, #7]
 800befc:	79ba      	ldrb	r2, [r7, #6]
 800befe:	68f9      	ldr	r1, [r7, #12]
 800bf00:	4613      	mov	r3, r2
 800bf02:	005b      	lsls	r3, r3, #1
 800bf04:	4413      	add	r3, r2
 800bf06:	005b      	lsls	r3, r3, #1
 800bf08:	2236      	movs	r2, #54	; 0x36
 800bf0a:	fb02 f200 	mul.w	r2, r2, r0
 800bf0e:	4413      	add	r3, r2
 800bf10:	440b      	add	r3, r1
 800bf12:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800bf16:	791b      	ldrb	r3, [r3, #4]
 800bf18:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bf1c:	b2d9      	uxtb	r1, r3
 800bf1e:	79fc      	ldrb	r4, [r7, #7]
 800bf20:	79ba      	ldrb	r2, [r7, #6]
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	4613      	mov	r3, r2
 800bf26:	005b      	lsls	r3, r3, #1
 800bf28:	4413      	add	r3, r2
 800bf2a:	005b      	lsls	r3, r3, #1
 800bf2c:	2236      	movs	r2, #54	; 0x36
 800bf2e:	fb02 f204 	mul.w	r2, r2, r4
 800bf32:	4413      	add	r3, r2
 800bf34:	4403      	add	r3, r0
 800bf36:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800bf3a:	7913      	ldrb	r3, [r2, #4]
 800bf3c:	f361 0301 	bfi	r3, r1, #0, #2
 800bf40:	7113      	strb	r3, [r2, #4]
    // maze->RawNode[x][y+1].flag = true;      //北
    // maze->ColumnNode[x+1][y].flag = true;   //東
    // maze->RawNode[x][y].flag = true;        //南
    // maze->ColumnNode[x][y].flag = true;     //西

    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800bf42:	79f9      	ldrb	r1, [r7, #7]
 800bf44:	79bb      	ldrb	r3, [r7, #6]
 800bf46:	3301      	adds	r3, #1
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	0052      	lsls	r2, r2, #1
 800bf4e:	441a      	add	r2, r3
 800bf50:	0053      	lsls	r3, r2, #1
 800bf52:	461a      	mov	r2, r3
 800bf54:	460b      	mov	r3, r1
 800bf56:	011b      	lsls	r3, r3, #4
 800bf58:	1a5b      	subs	r3, r3, r1
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	4403      	add	r3, r0
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	79f9      	ldrb	r1, [r7, #7]
 800bf6a:	79bb      	ldrb	r3, [r7, #6]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	2a01      	cmp	r2, #1
 800bf70:	bf0c      	ite	eq
 800bf72:	2201      	moveq	r2, #1
 800bf74:	2200      	movne	r2, #0
 800bf76:	b2d4      	uxtb	r4, r2
 800bf78:	68f8      	ldr	r0, [r7, #12]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	0052      	lsls	r2, r2, #1
 800bf7e:	441a      	add	r2, r3
 800bf80:	0053      	lsls	r3, r2, #1
 800bf82:	461a      	mov	r2, r3
 800bf84:	460b      	mov	r3, r1
 800bf86:	011b      	lsls	r3, r3, #4
 800bf88:	1a5b      	subs	r3, r3, r1
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	4413      	add	r3, r2
 800bf8e:	4403      	add	r3, r0
 800bf90:	3302      	adds	r3, #2
 800bf92:	4622      	mov	r2, r4
 800bf94:	701a      	strb	r2, [r3, #0]
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800bf96:	79fb      	ldrb	r3, [r7, #7]
 800bf98:	1c58      	adds	r0, r3, #1
 800bf9a:	79ba      	ldrb	r2, [r7, #6]
 800bf9c:	68f9      	ldr	r1, [r7, #12]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	4413      	add	r3, r2
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	2236      	movs	r2, #54	; 0x36
 800bfa8:	fb02 f200 	mul.w	r2, r2, r0
 800bfac:	4413      	add	r3, r2
 800bfae:	440b      	add	r3, r1
 800bfb0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800bfb4:	791b      	ldrb	r3, [r3, #4]
 800bfb6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	79fa      	ldrb	r2, [r7, #7]
 800bfbe:	1c50      	adds	r0, r2, #1
 800bfc0:	79ba      	ldrb	r2, [r7, #6]
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	bf0c      	ite	eq
 800bfc6:	2301      	moveq	r3, #1
 800bfc8:	2300      	movne	r3, #0
 800bfca:	b2dc      	uxtb	r4, r3
 800bfcc:	68f9      	ldr	r1, [r7, #12]
 800bfce:	4613      	mov	r3, r2
 800bfd0:	005b      	lsls	r3, r3, #1
 800bfd2:	4413      	add	r3, r2
 800bfd4:	005b      	lsls	r3, r3, #1
 800bfd6:	2236      	movs	r2, #54	; 0x36
 800bfd8:	fb02 f200 	mul.w	r2, r2, r0
 800bfdc:	4413      	add	r3, r2
 800bfde:	440b      	add	r3, r1
 800bfe0:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800bfe4:	4622      	mov	r2, r4
 800bfe6:	701a      	strb	r2, [r3, #0]
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800bfe8:	79f9      	ldrb	r1, [r7, #7]
 800bfea:	79bb      	ldrb	r3, [r7, #6]
 800bfec:	68f8      	ldr	r0, [r7, #12]
 800bfee:	461a      	mov	r2, r3
 800bff0:	0052      	lsls	r2, r2, #1
 800bff2:	441a      	add	r2, r3
 800bff4:	0053      	lsls	r3, r2, #1
 800bff6:	461a      	mov	r2, r3
 800bff8:	460b      	mov	r3, r1
 800bffa:	011b      	lsls	r3, r3, #4
 800bffc:	1a5b      	subs	r3, r3, r1
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4413      	add	r3, r2
 800c002:	4403      	add	r3, r0
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	79f9      	ldrb	r1, [r7, #7]
 800c00e:	79bb      	ldrb	r3, [r7, #6]
 800c010:	2a01      	cmp	r2, #1
 800c012:	bf0c      	ite	eq
 800c014:	2201      	moveq	r2, #1
 800c016:	2200      	movne	r2, #0
 800c018:	b2d4      	uxtb	r4, r2
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	461a      	mov	r2, r3
 800c01e:	0052      	lsls	r2, r2, #1
 800c020:	441a      	add	r2, r3
 800c022:	0053      	lsls	r3, r2, #1
 800c024:	461a      	mov	r2, r3
 800c026:	460b      	mov	r3, r1
 800c028:	011b      	lsls	r3, r3, #4
 800c02a:	1a5b      	subs	r3, r3, r1
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	4413      	add	r3, r2
 800c030:	4403      	add	r3, r0
 800c032:	3302      	adds	r3, #2
 800c034:	4622      	mov	r2, r4
 800c036:	701a      	strb	r2, [r3, #0]
    maze->ColumnNode[x][y].draw = (maze->ColumnNode[x][y].existence == WALL) ? true : false;        //西
 800c038:	79f8      	ldrb	r0, [r7, #7]
 800c03a:	79ba      	ldrb	r2, [r7, #6]
 800c03c:	68f9      	ldr	r1, [r7, #12]
 800c03e:	4613      	mov	r3, r2
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	4413      	add	r3, r2
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	2236      	movs	r2, #54	; 0x36
 800c048:	fb02 f200 	mul.w	r2, r2, r0
 800c04c:	4413      	add	r3, r2
 800c04e:	440b      	add	r3, r1
 800c050:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c054:	791b      	ldrb	r3, [r3, #4]
 800c056:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	79f8      	ldrb	r0, [r7, #7]
 800c05e:	79ba      	ldrb	r2, [r7, #6]
 800c060:	2b01      	cmp	r3, #1
 800c062:	bf0c      	ite	eq
 800c064:	2301      	moveq	r3, #1
 800c066:	2300      	movne	r3, #0
 800c068:	b2dc      	uxtb	r4, r3
 800c06a:	68f9      	ldr	r1, [r7, #12]
 800c06c:	4613      	mov	r3, r2
 800c06e:	005b      	lsls	r3, r3, #1
 800c070:	4413      	add	r3, r2
 800c072:	005b      	lsls	r3, r3, #1
 800c074:	2236      	movs	r2, #54	; 0x36
 800c076:	fb02 f200 	mul.w	r2, r2, r0
 800c07a:	4413      	add	r3, r2
 800c07c:	440b      	add	r3, r1
 800c07e:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800c082:	4622      	mov	r2, r4
 800c084:	701a      	strb	r2, [r3, #0]
    //重みは毎回リセットして計算しなおすのでここでは要らない
    // maze->RawNode[x][y+1].weight = (maze->RawNode[x][y+1].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y+1].weight;             //北
    // maze->ColumnNode[x+1][y].weight = (maze->ColumnNode[x+1][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x+1][y].weight;    //東
    // maze->RawNode[x][y].weight = (maze->RawNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y].weight;                   //南
    // maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x][y].weight;          //西
}
 800c086:	bf00      	nop
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bc90      	pop	{r4, r7}
 800c08e:	4770      	bx	lr

0800c090 <initTargetAreaWeight>:
//             maze->ColumnNode[x+i][y+j].weight = 0;      //西
//         }
//     }
// }
void initTargetAreaWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size_x, uint8_t target_size_y)
{
 800c090:	b490      	push	{r4, r7}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	4608      	mov	r0, r1
 800c09a:	4611      	mov	r1, r2
 800c09c:	461a      	mov	r2, r3
 800c09e:	4603      	mov	r3, r0
 800c0a0:	70fb      	strb	r3, [r7, #3]
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	70bb      	strb	r3, [r7, #2]
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	707b      	strb	r3, [r7, #1]
    //ゴールエリアの外堀と中のノードは全て0、壁があればMAX。
    for(int i=0; i < target_size_x; i++)
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	60fb      	str	r3, [r7, #12]
 800c0ae:	e0cf      	b.n	800c250 <initTargetAreaWeight+0x1c0>
    {
        for(int j=0; j < target_size_y; j++)
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	60bb      	str	r3, [r7, #8]
 800c0b4:	e0c4      	b.n	800c240 <initTargetAreaWeight+0x1b0>
            // maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;       //北
            // maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0; //東
            // maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;           //南
            // maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;     //西

            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].draw == true) ? MAX_WEIGHT : 0;       //北
 800c0b6:	78fa      	ldrb	r2, [r7, #3]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	18d1      	adds	r1, r2, r3
 800c0bc:	78bb      	ldrb	r3, [r7, #2]
 800c0be:	1c5a      	adds	r2, r3, #1
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	0052      	lsls	r2, r2, #1
 800c0ca:	441a      	add	r2, r3
 800c0cc:	0053      	lsls	r3, r2, #1
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	011b      	lsls	r3, r3, #4
 800c0d4:	1a5b      	subs	r3, r3, r1
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	4413      	add	r3, r2
 800c0da:	4403      	add	r3, r0
 800c0dc:	3302      	adds	r3, #2
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d002      	beq.n	800c0ea <initTargetAreaWeight+0x5a>
 800c0e4:	f640 70ff 	movw	r0, #4095	; 0xfff
 800c0e8:	e000      	b.n	800c0ec <initTargetAreaWeight+0x5c>
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	78fa      	ldrb	r2, [r7, #3]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	18d1      	adds	r1, r2, r3
 800c0f2:	78bb      	ldrb	r3, [r7, #2]
 800c0f4:	1c5a      	adds	r2, r3, #1
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	687c      	ldr	r4, [r7, #4]
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	0052      	lsls	r2, r2, #1
 800c100:	441a      	add	r2, r3
 800c102:	0053      	lsls	r3, r2, #1
 800c104:	461a      	mov	r2, r3
 800c106:	460b      	mov	r3, r1
 800c108:	011b      	lsls	r3, r3, #4
 800c10a:	1a5b      	subs	r3, r3, r1
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	4413      	add	r3, r2
 800c110:	18e2      	adds	r2, r4, r3
 800c112:	8813      	ldrh	r3, [r2, #0]
 800c114:	f360 038d 	bfi	r3, r0, #2, #12
 800c118:	8013      	strh	r3, [r2, #0]
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].draw == true) ? MAX_WEIGHT : 0; //東
 800c11a:	78fb      	ldrb	r3, [r7, #3]
 800c11c:	1c5a      	adds	r2, r3, #1
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	18d0      	adds	r0, r2, r3
 800c122:	78ba      	ldrb	r2, [r7, #2]
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	441a      	add	r2, r3
 800c128:	6879      	ldr	r1, [r7, #4]
 800c12a:	4613      	mov	r3, r2
 800c12c:	005b      	lsls	r3, r3, #1
 800c12e:	4413      	add	r3, r2
 800c130:	005b      	lsls	r3, r3, #1
 800c132:	2236      	movs	r2, #54	; 0x36
 800c134:	fb02 f200 	mul.w	r2, r2, r0
 800c138:	4413      	add	r3, r2
 800c13a:	440b      	add	r3, r1
 800c13c:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d002      	beq.n	800c14c <initTargetAreaWeight+0xbc>
 800c146:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c14a:	e000      	b.n	800c14e <initTargetAreaWeight+0xbe>
 800c14c:	2100      	movs	r1, #0
 800c14e:	78fb      	ldrb	r3, [r7, #3]
 800c150:	1c5a      	adds	r2, r3, #1
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	18d4      	adds	r4, r2, r3
 800c156:	78ba      	ldrb	r2, [r7, #2]
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	441a      	add	r2, r3
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	4613      	mov	r3, r2
 800c160:	005b      	lsls	r3, r3, #1
 800c162:	4413      	add	r3, r2
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	2236      	movs	r2, #54	; 0x36
 800c168:	fb02 f204 	mul.w	r2, r2, r4
 800c16c:	4413      	add	r3, r2
 800c16e:	4403      	add	r3, r0
 800c170:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800c174:	8893      	ldrh	r3, [r2, #4]
 800c176:	f361 038d 	bfi	r3, r1, #2, #12
 800c17a:	8093      	strh	r3, [r2, #4]
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;           //南
 800c17c:	78fa      	ldrb	r2, [r7, #3]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	18d1      	adds	r1, r2, r3
 800c182:	78ba      	ldrb	r2, [r7, #2]
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	4413      	add	r3, r2
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	461a      	mov	r2, r3
 800c18c:	0052      	lsls	r2, r2, #1
 800c18e:	441a      	add	r2, r3
 800c190:	0053      	lsls	r3, r2, #1
 800c192:	461a      	mov	r2, r3
 800c194:	460b      	mov	r3, r1
 800c196:	011b      	lsls	r3, r3, #4
 800c198:	1a5b      	subs	r3, r3, r1
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	4403      	add	r3, r0
 800c1a0:	3302      	adds	r3, #2
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d002      	beq.n	800c1ae <initTargetAreaWeight+0x11e>
 800c1a8:	f640 70ff 	movw	r0, #4095	; 0xfff
 800c1ac:	e000      	b.n	800c1b0 <initTargetAreaWeight+0x120>
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	78fa      	ldrb	r2, [r7, #3]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	18d1      	adds	r1, r2, r3
 800c1b6:	78ba      	ldrb	r2, [r7, #2]
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	687c      	ldr	r4, [r7, #4]
 800c1be:	461a      	mov	r2, r3
 800c1c0:	0052      	lsls	r2, r2, #1
 800c1c2:	441a      	add	r2, r3
 800c1c4:	0053      	lsls	r3, r2, #1
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	011b      	lsls	r3, r3, #4
 800c1cc:	1a5b      	subs	r3, r3, r1
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	18e2      	adds	r2, r4, r3
 800c1d4:	8813      	ldrh	r3, [r2, #0]
 800c1d6:	f360 038d 	bfi	r3, r0, #2, #12
 800c1da:	8013      	strh	r3, [r2, #0]
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;     //西
 800c1dc:	78fa      	ldrb	r2, [r7, #3]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	18d0      	adds	r0, r2, r3
 800c1e2:	78ba      	ldrb	r2, [r7, #2]
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	441a      	add	r2, r3
 800c1e8:	6879      	ldr	r1, [r7, #4]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	005b      	lsls	r3, r3, #1
 800c1ee:	4413      	add	r3, r2
 800c1f0:	005b      	lsls	r3, r3, #1
 800c1f2:	2236      	movs	r2, #54	; 0x36
 800c1f4:	fb02 f200 	mul.w	r2, r2, r0
 800c1f8:	4413      	add	r3, r2
 800c1fa:	440b      	add	r3, r1
 800c1fc:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d002      	beq.n	800c20c <initTargetAreaWeight+0x17c>
 800c206:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c20a:	e000      	b.n	800c20e <initTargetAreaWeight+0x17e>
 800c20c:	2100      	movs	r1, #0
 800c20e:	78fa      	ldrb	r2, [r7, #3]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	18d4      	adds	r4, r2, r3
 800c214:	78ba      	ldrb	r2, [r7, #2]
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	441a      	add	r2, r3
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	4613      	mov	r3, r2
 800c21e:	005b      	lsls	r3, r3, #1
 800c220:	4413      	add	r3, r2
 800c222:	005b      	lsls	r3, r3, #1
 800c224:	2236      	movs	r2, #54	; 0x36
 800c226:	fb02 f204 	mul.w	r2, r2, r4
 800c22a:	4413      	add	r3, r2
 800c22c:	4403      	add	r3, r0
 800c22e:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800c232:	8893      	ldrh	r3, [r2, #4]
 800c234:	f361 038d 	bfi	r3, r1, #2, #12
 800c238:	8093      	strh	r3, [r2, #4]
        for(int j=0; j < target_size_y; j++)
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	3301      	adds	r3, #1
 800c23e:	60bb      	str	r3, [r7, #8]
 800c240:	7e3b      	ldrb	r3, [r7, #24]
 800c242:	68ba      	ldr	r2, [r7, #8]
 800c244:	429a      	cmp	r2, r3
 800c246:	f6ff af36 	blt.w	800c0b6 <initTargetAreaWeight+0x26>
    for(int i=0; i < target_size_x; i++)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	3301      	adds	r3, #1
 800c24e:	60fb      	str	r3, [r7, #12]
 800c250:	787b      	ldrb	r3, [r7, #1]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	429a      	cmp	r2, r3
 800c256:	f6ff af2b 	blt.w	800c0b0 <initTargetAreaWeight+0x20>
        }
    }
}
 800c25a:	bf00      	nop
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bc90      	pop	{r4, r7}
 800c262:	4770      	bx	lr

0800c264 <updateAllNodeWeight>:
    // setTargetWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size);
//ゴールノードを0に初期化
    // setGoalWeight(maze);
    
void updateAllNodeWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t area_size_x, uint8_t area_size_y, int mask)
{
 800c264:	b590      	push	{r4, r7, lr}
 800c266:	b089      	sub	sp, #36	; 0x24
 800c268:	af02      	add	r7, sp, #8
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	4608      	mov	r0, r1
 800c26e:	4611      	mov	r1, r2
 800c270:	461a      	mov	r2, r3
 800c272:	4603      	mov	r3, r0
 800c274:	70fb      	strb	r3, [r7, #3]
 800c276:	460b      	mov	r3, r1
 800c278:	70bb      	strb	r3, [r7, #2]
 800c27a:	4613      	mov	r3, r2
 800c27c:	707b      	strb	r3, [r7, #1]
    //新しい区画に入ったときに、更新

    initWeight(maze);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7ff fa16 	bl	800b6b0 <initWeight>
    
    initTargetAreaWeight(maze, x,y, area_size_x,area_size_y);
 800c284:	7878      	ldrb	r0, [r7, #1]
 800c286:	78ba      	ldrb	r2, [r7, #2]
 800c288:	78f9      	ldrb	r1, [r7, #3]
 800c28a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	4603      	mov	r3, r0
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f7ff fefc 	bl	800c090 <initTargetAreaWeight>
    //6個参照して
    int i,j;
	_Bool change_flag;
	do //(6,9)(7,10)に対して、7,11がおかしい。
	{
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800c298:	2300      	movs	r3, #0
 800c29a:	73fb      	strb	r3, [r7, #15]
        //行と列でわけて、一周
        //行から
		for(i = 0; i < NUMBER_OF_SQUARES_X; i++)			//迷路の大きさ分ループ(x座標)
 800c29c:	2300      	movs	r3, #0
 800c29e:	617b      	str	r3, [r7, #20]
 800c2a0:	e258      	b.n	800c754 <updateAllNodeWeight+0x4f0>
		{
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	613b      	str	r3, [r7, #16]
 800c2a6:	e24e      	b.n	800c746 <updateAllNodeWeight+0x4e2>
			{
                //1ノードずつ見る.そこから加算対象が最大6個
                //端を見ないので、一番上の列からスタート j=N; j >= 0, xを1からN-1まで
                //次に行 j=N-1から1まで xを0からN-1まで
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//255の場合は次へ
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	6979      	ldr	r1, [r7, #20]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	0052      	lsls	r2, r2, #1
 800c2b2:	441a      	add	r2, r3
 800c2b4:	0053      	lsls	r3, r2, #1
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	1a5b      	subs	r3, r3, r1
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	4403      	add	r3, r0
 800c2c4:	881b      	ldrh	r3, [r3, #0]
 800c2c6:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	f640 72ff 	movw	r2, #4095	; 0xfff
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	f000 8234 	beq.w	800c73e <updateAllNodeWeight+0x4da>
				{
					continue;
				}
				// printf("continueはクリア. Raw[%d][%d]\r\n",i,j);
                //北側ノード
				if(j < NUMBER_OF_SQUARES_Y-1)   //範囲チェック. 座標のxyではなく、ノードのxy
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	2b07      	cmp	r3, #7
 800c2da:	dc5a      	bgt.n	800c392 <updateAllNodeWeight+0x12e>
				{
					if( (maze->RawNode[i][j+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	6979      	ldr	r1, [r7, #20]
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	0052      	lsls	r2, r2, #1
 800c2e8:	441a      	add	r2, r3
 800c2ea:	0053      	lsls	r3, r2, #1
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	011b      	lsls	r3, r3, #4
 800c2f2:	1a5b      	subs	r3, r3, r1
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	4413      	add	r3, r2
 800c2f8:	4403      	add	r3, r0
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c300:	b2db      	uxtb	r3, r3
 800c302:	461a      	mov	r2, r3
 800c304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c306:	4013      	ands	r3, r2
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d142      	bne.n	800c392 <updateAllNodeWeight+0x12e>
					{
						if(maze->RawNode[i][j+1].weight == MAX_WEIGHT)			//まだ値が入っていなければ
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	3301      	adds	r3, #1
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	6979      	ldr	r1, [r7, #20]
 800c314:	461a      	mov	r2, r3
 800c316:	0052      	lsls	r2, r2, #1
 800c318:	441a      	add	r2, r3
 800c31a:	0053      	lsls	r3, r2, #1
 800c31c:	461a      	mov	r2, r3
 800c31e:	460b      	mov	r3, r1
 800c320:	011b      	lsls	r3, r3, #4
 800c322:	1a5b      	subs	r3, r3, r1
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	4403      	add	r3, r0
 800c32a:	881b      	ldrh	r3, [r3, #0]
 800c32c:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c330:	b29b      	uxth	r3, r3
 800c332:	f640 72ff 	movw	r2, #4095	; 0xfff
 800c336:	4293      	cmp	r3, r2
 800c338:	d12b      	bne.n	800c392 <updateAllNodeWeight+0x12e>
						{
							maze->RawNode[i][j+1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	6979      	ldr	r1, [r7, #20]
 800c340:	461a      	mov	r2, r3
 800c342:	0052      	lsls	r2, r2, #1
 800c344:	441a      	add	r2, r3
 800c346:	0053      	lsls	r3, r2, #1
 800c348:	461a      	mov	r2, r3
 800c34a:	460b      	mov	r3, r1
 800c34c:	011b      	lsls	r3, r3, #4
 800c34e:	1a5b      	subs	r3, r3, r1
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	4413      	add	r3, r2
 800c354:	4403      	add	r3, r0
 800c356:	881b      	ldrh	r3, [r3, #0]
 800c358:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	3307      	adds	r3, #7
 800c360:	b29a      	uxth	r2, r3
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	3301      	adds	r3, #1
 800c366:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800c36a:	b290      	uxth	r0, r2
 800c36c:	687c      	ldr	r4, [r7, #4]
 800c36e:	6979      	ldr	r1, [r7, #20]
 800c370:	461a      	mov	r2, r3
 800c372:	0052      	lsls	r2, r2, #1
 800c374:	441a      	add	r2, r3
 800c376:	0053      	lsls	r3, r2, #1
 800c378:	461a      	mov	r2, r3
 800c37a:	460b      	mov	r3, r1
 800c37c:	011b      	lsls	r3, r3, #4
 800c37e:	1a5b      	subs	r3, r3, r1
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4413      	add	r3, r2
 800c384:	18e2      	adds	r2, r4, r3
 800c386:	8813      	ldrh	r3, [r2, #0]
 800c388:	f360 038d 	bfi	r3, r0, #2, #12
 800c38c:	8013      	strh	r3, [r2, #0]
							change_flag = true;		//値が更新されたことを示す
 800c38e:	2301      	movs	r3, #1
 800c390:	73fb      	strb	r3, [r7, #15]
                            // printf("北 : x:%u, y:%u, w:%x\r\n",i,j+1,maze->RawNode[i][j].weight+ WEIGHT_STRAIGHT);
						}
					}
                }
                //南側ノード
				if(j > 1)						//範囲チェック.ミスってた
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	2b01      	cmp	r3, #1
 800c396:	dd5a      	ble.n	800c44e <updateAllNodeWeight+0x1ea>
				{
					if( (maze->RawNode[i][j-1].existence & mask) == NOWALL)	//壁がなければ
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	3b01      	subs	r3, #1
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	6979      	ldr	r1, [r7, #20]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	0052      	lsls	r2, r2, #1
 800c3a4:	441a      	add	r2, r3
 800c3a6:	0053      	lsls	r3, r2, #1
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	011b      	lsls	r3, r3, #4
 800c3ae:	1a5b      	subs	r3, r3, r1
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	4413      	add	r3, r2
 800c3b4:	4403      	add	r3, r0
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	461a      	mov	r2, r3
 800c3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d142      	bne.n	800c44e <updateAllNodeWeight+0x1ea>
					{
						if(maze->RawNode[i][j-1].weight == MAX_WEIGHT)			//値が入っていなければ
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	6979      	ldr	r1, [r7, #20]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	0052      	lsls	r2, r2, #1
 800c3d4:	441a      	add	r2, r3
 800c3d6:	0053      	lsls	r3, r2, #1
 800c3d8:	461a      	mov	r2, r3
 800c3da:	460b      	mov	r3, r1
 800c3dc:	011b      	lsls	r3, r3, #4
 800c3de:	1a5b      	subs	r3, r3, r1
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4413      	add	r3, r2
 800c3e4:	4403      	add	r3, r0
 800c3e6:	881b      	ldrh	r3, [r3, #0]
 800c3e8:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	f640 72ff 	movw	r2, #4095	; 0xfff
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d12b      	bne.n	800c44e <updateAllNodeWeight+0x1ea>
						{
							maze->RawNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	6979      	ldr	r1, [r7, #20]
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	0052      	lsls	r2, r2, #1
 800c400:	441a      	add	r2, r3
 800c402:	0053      	lsls	r3, r2, #1
 800c404:	461a      	mov	r2, r3
 800c406:	460b      	mov	r3, r1
 800c408:	011b      	lsls	r3, r3, #4
 800c40a:	1a5b      	subs	r3, r3, r1
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	4413      	add	r3, r2
 800c410:	4403      	add	r3, r0
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c418:	b29b      	uxth	r3, r3
 800c41a:	3307      	adds	r3, #7
 800c41c:	b29a      	uxth	r2, r3
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	3b01      	subs	r3, #1
 800c422:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800c426:	b290      	uxth	r0, r2
 800c428:	687c      	ldr	r4, [r7, #4]
 800c42a:	6979      	ldr	r1, [r7, #20]
 800c42c:	461a      	mov	r2, r3
 800c42e:	0052      	lsls	r2, r2, #1
 800c430:	441a      	add	r2, r3
 800c432:	0053      	lsls	r3, r2, #1
 800c434:	461a      	mov	r2, r3
 800c436:	460b      	mov	r3, r1
 800c438:	011b      	lsls	r3, r3, #4
 800c43a:	1a5b      	subs	r3, r3, r1
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4413      	add	r3, r2
 800c440:	18e2      	adds	r2, r4, r3
 800c442:	8813      	ldrh	r3, [r2, #0]
 800c444:	f360 038d 	bfi	r3, r0, #2, #12
 800c448:	8013      	strh	r3, [r2, #0]
							change_flag = true;		//値が更新されたことを示す
 800c44a:	2301      	movs	r3, #1
 800c44c:	73fb      	strb	r3, [r7, #15]
                            // printf("南 : x:%u, y:%u, w:%x\r\n",i,j-1,maze->RawNode[i][j].weight+ WEIGHT_STRAIGHT);
						}
					}
				}
                //東側に斜めが2方向
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	2b07      	cmp	r3, #7
 800c452:	f300 80bb 	bgt.w	800c5cc <updateAllNodeWeight+0x368>
				{
                    //y方向の制限は？
                    //北東
					if( (maze->ColumnNode[i+1][j].existence & mask) == NOWALL)		//壁がなければ
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	1c58      	adds	r0, r3, #1
 800c45a:	6879      	ldr	r1, [r7, #4]
 800c45c:	693a      	ldr	r2, [r7, #16]
 800c45e:	4613      	mov	r3, r2
 800c460:	005b      	lsls	r3, r3, #1
 800c462:	4413      	add	r3, r2
 800c464:	005b      	lsls	r3, r3, #1
 800c466:	2236      	movs	r2, #54	; 0x36
 800c468:	fb02 f200 	mul.w	r2, r2, r0
 800c46c:	4413      	add	r3, r2
 800c46e:	440b      	add	r3, r1
 800c470:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c474:	791b      	ldrb	r3, [r3, #4]
 800c476:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	461a      	mov	r2, r3
 800c47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c480:	4013      	ands	r3, r2
 800c482:	2b00      	cmp	r3, #0
 800c484:	d143      	bne.n	800c50e <updateAllNodeWeight+0x2aa>
					{
						if(maze->ColumnNode[i+1][j].weight == MAX_WEIGHT)			//更新されていなければ
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	1c58      	adds	r0, r3, #1
 800c48a:	6879      	ldr	r1, [r7, #4]
 800c48c:	693a      	ldr	r2, [r7, #16]
 800c48e:	4613      	mov	r3, r2
 800c490:	005b      	lsls	r3, r3, #1
 800c492:	4413      	add	r3, r2
 800c494:	005b      	lsls	r3, r3, #1
 800c496:	2236      	movs	r2, #54	; 0x36
 800c498:	fb02 f200 	mul.w	r2, r2, r0
 800c49c:	4413      	add	r3, r2
 800c49e:	440b      	add	r3, r1
 800c4a0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c4a4:	889b      	ldrh	r3, [r3, #4]
 800c4a6:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	f640 72ff 	movw	r2, #4095	; 0xfff
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d12c      	bne.n	800c50e <updateAllNodeWeight+0x2aa>
						{
							maze->ColumnNode[i+1][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	6979      	ldr	r1, [r7, #20]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	0052      	lsls	r2, r2, #1
 800c4be:	441a      	add	r2, r3
 800c4c0:	0053      	lsls	r3, r2, #1
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	011b      	lsls	r3, r3, #4
 800c4c8:	1a5b      	subs	r3, r3, r1
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	4413      	add	r3, r2
 800c4ce:	4403      	add	r3, r0
 800c4d0:	881b      	ldrh	r3, [r3, #0]
 800c4d2:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	3305      	adds	r3, #5
 800c4da:	b29a      	uxth	r2, r3
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	1c5c      	adds	r4, r3, #1
 800c4e0:	4613      	mov	r3, r2
 800c4e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4e6:	b299      	uxth	r1, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	693a      	ldr	r2, [r7, #16]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	005b      	lsls	r3, r3, #1
 800c4f0:	4413      	add	r3, r2
 800c4f2:	005b      	lsls	r3, r3, #1
 800c4f4:	2236      	movs	r2, #54	; 0x36
 800c4f6:	fb02 f204 	mul.w	r2, r2, r4
 800c4fa:	4413      	add	r3, r2
 800c4fc:	4403      	add	r3, r0
 800c4fe:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800c502:	8893      	ldrh	r3, [r2, #4]
 800c504:	f361 038d 	bfi	r3, r1, #2, #12
 800c508:	8093      	strh	r3, [r2, #4]
							change_flag = true;		//値が更新されたことを示す
 800c50a:	2301      	movs	r3, #1
 800c50c:	73fb      	strb	r3, [r7, #15]
						}
					}
                	
                    //南東
                    if( (maze->ColumnNode[i+1][j-1].existence & mask) == NOWALL)		//壁がなければ
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	1c58      	adds	r0, r3, #1
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	1e5a      	subs	r2, r3, #1
 800c516:	6879      	ldr	r1, [r7, #4]
 800c518:	4613      	mov	r3, r2
 800c51a:	005b      	lsls	r3, r3, #1
 800c51c:	4413      	add	r3, r2
 800c51e:	005b      	lsls	r3, r3, #1
 800c520:	2236      	movs	r2, #54	; 0x36
 800c522:	fb02 f200 	mul.w	r2, r2, r0
 800c526:	4413      	add	r3, r2
 800c528:	440b      	add	r3, r1
 800c52a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c52e:	791b      	ldrb	r3, [r3, #4]
 800c530:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c534:	b2db      	uxtb	r3, r3
 800c536:	461a      	mov	r2, r3
 800c538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53a:	4013      	ands	r3, r2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d145      	bne.n	800c5cc <updateAllNodeWeight+0x368>
					{
						if(maze->ColumnNode[i+1][j-1].weight == MAX_WEIGHT)			//更新されていなければ
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	1c58      	adds	r0, r3, #1
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	1e5a      	subs	r2, r3, #1
 800c548:	6879      	ldr	r1, [r7, #4]
 800c54a:	4613      	mov	r3, r2
 800c54c:	005b      	lsls	r3, r3, #1
 800c54e:	4413      	add	r3, r2
 800c550:	005b      	lsls	r3, r3, #1
 800c552:	2236      	movs	r2, #54	; 0x36
 800c554:	fb02 f200 	mul.w	r2, r2, r0
 800c558:	4413      	add	r3, r2
 800c55a:	440b      	add	r3, r1
 800c55c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c560:	889b      	ldrh	r3, [r3, #4]
 800c562:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c566:	b29b      	uxth	r3, r3
 800c568:	f640 72ff 	movw	r2, #4095	; 0xfff
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d12d      	bne.n	800c5cc <updateAllNodeWeight+0x368>
						{
							maze->ColumnNode[i+1][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	6979      	ldr	r1, [r7, #20]
 800c576:	461a      	mov	r2, r3
 800c578:	0052      	lsls	r2, r2, #1
 800c57a:	441a      	add	r2, r3
 800c57c:	0053      	lsls	r3, r2, #1
 800c57e:	461a      	mov	r2, r3
 800c580:	460b      	mov	r3, r1
 800c582:	011b      	lsls	r3, r3, #4
 800c584:	1a5b      	subs	r3, r3, r1
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4413      	add	r3, r2
 800c58a:	4403      	add	r3, r0
 800c58c:	881b      	ldrh	r3, [r3, #0]
 800c58e:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c592:	b29b      	uxth	r3, r3
 800c594:	3305      	adds	r3, #5
 800c596:	b299      	uxth	r1, r3
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	1c5c      	adds	r4, r3, #1
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	1e5a      	subs	r2, r3, #1
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5a6:	b299      	uxth	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	005b      	lsls	r3, r3, #1
 800c5ae:	4413      	add	r3, r2
 800c5b0:	005b      	lsls	r3, r3, #1
 800c5b2:	2236      	movs	r2, #54	; 0x36
 800c5b4:	fb02 f204 	mul.w	r2, r2, r4
 800c5b8:	4413      	add	r3, r2
 800c5ba:	4403      	add	r3, r0
 800c5bc:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800c5c0:	8893      	ldrh	r3, [r2, #4]
 800c5c2:	f361 038d 	bfi	r3, r1, #2, #12
 800c5c6:	8093      	strh	r3, [r2, #4]
							change_flag = true;		//値が更新されたことを示す
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	73fb      	strb	r3, [r7, #15]
						}
					}
				}

                //西側に斜めが2方向
				if(i > 0)						//範囲チェック
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f340 80b6 	ble.w	800c740 <updateAllNodeWeight+0x4dc>
				{
                    //北西
					if( (maze->ColumnNode[i][j].existence & mask) == NOWALL)		//壁がなければ
 800c5d4:	6879      	ldr	r1, [r7, #4]
 800c5d6:	693a      	ldr	r2, [r7, #16]
 800c5d8:	6978      	ldr	r0, [r7, #20]
 800c5da:	4613      	mov	r3, r2
 800c5dc:	005b      	lsls	r3, r3, #1
 800c5de:	4413      	add	r3, r2
 800c5e0:	005b      	lsls	r3, r3, #1
 800c5e2:	2236      	movs	r2, #54	; 0x36
 800c5e4:	fb02 f200 	mul.w	r2, r2, r0
 800c5e8:	4413      	add	r3, r2
 800c5ea:	440b      	add	r3, r1
 800c5ec:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c5f0:	791b      	ldrb	r3, [r3, #4]
 800c5f2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fc:	4013      	ands	r3, r2
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d140      	bne.n	800c684 <updateAllNodeWeight+0x420>
					{
						if(maze->ColumnNode[i][j].weight == MAX_WEIGHT)			//値が入っていなければ
 800c602:	6879      	ldr	r1, [r7, #4]
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	6978      	ldr	r0, [r7, #20]
 800c608:	4613      	mov	r3, r2
 800c60a:	005b      	lsls	r3, r3, #1
 800c60c:	4413      	add	r3, r2
 800c60e:	005b      	lsls	r3, r3, #1
 800c610:	2236      	movs	r2, #54	; 0x36
 800c612:	fb02 f200 	mul.w	r2, r2, r0
 800c616:	4413      	add	r3, r2
 800c618:	440b      	add	r3, r1
 800c61a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c61e:	889b      	ldrh	r3, [r3, #4]
 800c620:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c624:	b29b      	uxth	r3, r3
 800c626:	f640 72ff 	movw	r2, #4095	; 0xfff
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d12a      	bne.n	800c684 <updateAllNodeWeight+0x420>
						{
							maze->ColumnNode[i][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	6979      	ldr	r1, [r7, #20]
 800c634:	461a      	mov	r2, r3
 800c636:	0052      	lsls	r2, r2, #1
 800c638:	441a      	add	r2, r3
 800c63a:	0053      	lsls	r3, r2, #1
 800c63c:	461a      	mov	r2, r3
 800c63e:	460b      	mov	r3, r1
 800c640:	011b      	lsls	r3, r3, #4
 800c642:	1a5b      	subs	r3, r3, r1
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4413      	add	r3, r2
 800c648:	4403      	add	r3, r0
 800c64a:	881b      	ldrh	r3, [r3, #0]
 800c64c:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c650:	b29b      	uxth	r3, r3
 800c652:	3305      	adds	r3, #5
 800c654:	b29b      	uxth	r3, r3
 800c656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c65a:	b299      	uxth	r1, r3
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	693a      	ldr	r2, [r7, #16]
 800c660:	697c      	ldr	r4, [r7, #20]
 800c662:	4613      	mov	r3, r2
 800c664:	005b      	lsls	r3, r3, #1
 800c666:	4413      	add	r3, r2
 800c668:	005b      	lsls	r3, r3, #1
 800c66a:	2236      	movs	r2, #54	; 0x36
 800c66c:	fb02 f204 	mul.w	r2, r2, r4
 800c670:	4413      	add	r3, r2
 800c672:	4403      	add	r3, r0
 800c674:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800c678:	8893      	ldrh	r3, [r2, #4]
 800c67a:	f361 038d 	bfi	r3, r1, #2, #12
 800c67e:	8093      	strh	r3, [r2, #4]
							change_flag = true;		//値が更新されたことを示す
 800c680:	2301      	movs	r3, #1
 800c682:	73fb      	strb	r3, [r7, #15]
						}
					}
                    //南西
    				if( (maze->ColumnNode[i][j-1].existence & mask) == NOWALL)		//壁がなければ
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	1e5a      	subs	r2, r3, #1
 800c688:	6879      	ldr	r1, [r7, #4]
 800c68a:	6978      	ldr	r0, [r7, #20]
 800c68c:	4613      	mov	r3, r2
 800c68e:	005b      	lsls	r3, r3, #1
 800c690:	4413      	add	r3, r2
 800c692:	005b      	lsls	r3, r3, #1
 800c694:	2236      	movs	r2, #54	; 0x36
 800c696:	fb02 f200 	mul.w	r2, r2, r0
 800c69a:	4413      	add	r3, r2
 800c69c:	440b      	add	r3, r1
 800c69e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c6a2:	791b      	ldrb	r3, [r3, #4]
 800c6a4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d145      	bne.n	800c740 <updateAllNodeWeight+0x4dc>
					{
						if(maze->ColumnNode[i][j-1].weight == MAX_WEIGHT)			//値が入っていなければ
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	1e5a      	subs	r2, r3, #1
 800c6b8:	6879      	ldr	r1, [r7, #4]
 800c6ba:	6978      	ldr	r0, [r7, #20]
 800c6bc:	4613      	mov	r3, r2
 800c6be:	005b      	lsls	r3, r3, #1
 800c6c0:	4413      	add	r3, r2
 800c6c2:	005b      	lsls	r3, r3, #1
 800c6c4:	2236      	movs	r2, #54	; 0x36
 800c6c6:	fb02 f200 	mul.w	r2, r2, r0
 800c6ca:	4413      	add	r3, r2
 800c6cc:	440b      	add	r3, r1
 800c6ce:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c6d2:	889b      	ldrh	r3, [r3, #4]
 800c6d4:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	f640 72ff 	movw	r2, #4095	; 0xfff
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d12e      	bne.n	800c740 <updateAllNodeWeight+0x4dc>
						{
							maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	6979      	ldr	r1, [r7, #20]
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	0052      	lsls	r2, r2, #1
 800c6ec:	441a      	add	r2, r3
 800c6ee:	0053      	lsls	r3, r2, #1
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	011b      	lsls	r3, r3, #4
 800c6f6:	1a5b      	subs	r3, r3, r1
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	4413      	add	r3, r2
 800c6fc:	4403      	add	r3, r0
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c704:	b29b      	uxth	r3, r3
 800c706:	3305      	adds	r3, #5
 800c708:	b299      	uxth	r1, r3
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	1e5a      	subs	r2, r3, #1
 800c70e:	460b      	mov	r3, r1
 800c710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c714:	b299      	uxth	r1, r3
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	697c      	ldr	r4, [r7, #20]
 800c71a:	4613      	mov	r3, r2
 800c71c:	005b      	lsls	r3, r3, #1
 800c71e:	4413      	add	r3, r2
 800c720:	005b      	lsls	r3, r3, #1
 800c722:	2236      	movs	r2, #54	; 0x36
 800c724:	fb02 f204 	mul.w	r2, r2, r4
 800c728:	4413      	add	r3, r2
 800c72a:	4403      	add	r3, r0
 800c72c:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800c730:	8893      	ldrh	r3, [r2, #4]
 800c732:	f361 038d 	bfi	r3, r1, #2, #12
 800c736:	8093      	strh	r3, [r2, #4]
							change_flag = true;		//値が更新されたことを示す
 800c738:	2301      	movs	r3, #1
 800c73a:	73fb      	strb	r3, [r7, #15]
 800c73c:	e000      	b.n	800c740 <updateAllNodeWeight+0x4dc>
					continue;
 800c73e:	bf00      	nop
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	3301      	adds	r3, #1
 800c744:	613b      	str	r3, [r7, #16]
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	2b08      	cmp	r3, #8
 800c74a:	f77f adad 	ble.w	800c2a8 <updateAllNodeWeight+0x44>
		for(i = 0; i < NUMBER_OF_SQUARES_X; i++)			//迷路の大きさ分ループ(x座標)
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	3301      	adds	r3, #1
 800c752:	617b      	str	r3, [r7, #20]
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	2b08      	cmp	r3, #8
 800c758:	f77f ada3 	ble.w	800c2a2 <updateAllNodeWeight+0x3e>
					}
				}
			}
		}
        //列
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
 800c75c:	2301      	movs	r3, #1
 800c75e:	617b      	str	r3, [r7, #20]
 800c760:	e258      	b.n	800cc14 <updateAllNodeWeight+0x9b0>
		{
			for(j = 0; j < NUMBER_OF_SQUARES_Y; j++)		
 800c762:	2300      	movs	r3, #0
 800c764:	613b      	str	r3, [r7, #16]
 800c766:	e24e      	b.n	800cc06 <updateAllNodeWeight+0x9a2>
			{
                if(maze->ColumnNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800c768:	6879      	ldr	r1, [r7, #4]
 800c76a:	693a      	ldr	r2, [r7, #16]
 800c76c:	6978      	ldr	r0, [r7, #20]
 800c76e:	4613      	mov	r3, r2
 800c770:	005b      	lsls	r3, r3, #1
 800c772:	4413      	add	r3, r2
 800c774:	005b      	lsls	r3, r3, #1
 800c776:	2236      	movs	r2, #54	; 0x36
 800c778:	fb02 f200 	mul.w	r2, r2, r0
 800c77c:	4413      	add	r3, r2
 800c77e:	440b      	add	r3, r1
 800c780:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c784:	889b      	ldrh	r3, [r3, #4]
 800c786:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	f640 72ff 	movw	r2, #4095	; 0xfff
 800c790:	4293      	cmp	r3, r2
 800c792:	f000 8234 	beq.w	800cbfe <updateAllNodeWeight+0x99a>
					continue;
				}
                // printf("continueはクリア. Column[%d][%d]\r\n",i,j);
				
                //東側ノード
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	2b07      	cmp	r3, #7
 800c79a:	dc5b      	bgt.n	800c854 <updateAllNodeWeight+0x5f0>
				{
                    // printf("列東%d,mask: %d, result: %d\r\n",maze->ColumnNode[i+1][j].existence, mask,((maze->ColumnNode[i+1][j].existence) & mask));
					if( (maze->ColumnNode[i+1][j].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	1c58      	adds	r0, r3, #1
 800c7a0:	6879      	ldr	r1, [r7, #4]
 800c7a2:	693a      	ldr	r2, [r7, #16]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	005b      	lsls	r3, r3, #1
 800c7a8:	4413      	add	r3, r2
 800c7aa:	005b      	lsls	r3, r3, #1
 800c7ac:	2236      	movs	r2, #54	; 0x36
 800c7ae:	fb02 f200 	mul.w	r2, r2, r0
 800c7b2:	4413      	add	r3, r2
 800c7b4:	440b      	add	r3, r1
 800c7b6:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c7ba:	791b      	ldrb	r3, [r3, #4]
 800c7bc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c6:	4013      	ands	r3, r2
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d143      	bne.n	800c854 <updateAllNodeWeight+0x5f0>
					{
                        // printf("列東%u\r\n",i+1);
						if(maze->ColumnNode[i+1][j].weight == MAX_WEIGHT)			//まだ値が入っていなければ
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	1c58      	adds	r0, r3, #1
 800c7d0:	6879      	ldr	r1, [r7, #4]
 800c7d2:	693a      	ldr	r2, [r7, #16]
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	005b      	lsls	r3, r3, #1
 800c7d8:	4413      	add	r3, r2
 800c7da:	005b      	lsls	r3, r3, #1
 800c7dc:	2236      	movs	r2, #54	; 0x36
 800c7de:	fb02 f200 	mul.w	r2, r2, r0
 800c7e2:	4413      	add	r3, r2
 800c7e4:	440b      	add	r3, r1
 800c7e6:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c7ea:	889b      	ldrh	r3, [r3, #4]
 800c7ec:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	f640 72ff 	movw	r2, #4095	; 0xfff
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d12c      	bne.n	800c854 <updateAllNodeWeight+0x5f0>
						{
							maze->ColumnNode[i+1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800c7fa:	6879      	ldr	r1, [r7, #4]
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	6978      	ldr	r0, [r7, #20]
 800c800:	4613      	mov	r3, r2
 800c802:	005b      	lsls	r3, r3, #1
 800c804:	4413      	add	r3, r2
 800c806:	005b      	lsls	r3, r3, #1
 800c808:	2236      	movs	r2, #54	; 0x36
 800c80a:	fb02 f200 	mul.w	r2, r2, r0
 800c80e:	4413      	add	r3, r2
 800c810:	440b      	add	r3, r1
 800c812:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c816:	889b      	ldrh	r3, [r3, #4]
 800c818:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	3307      	adds	r3, #7
 800c820:	b29a      	uxth	r2, r3
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	1c5c      	adds	r4, r3, #1
 800c826:	4613      	mov	r3, r2
 800c828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c82c:	b299      	uxth	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	693a      	ldr	r2, [r7, #16]
 800c832:	4613      	mov	r3, r2
 800c834:	005b      	lsls	r3, r3, #1
 800c836:	4413      	add	r3, r2
 800c838:	005b      	lsls	r3, r3, #1
 800c83a:	2236      	movs	r2, #54	; 0x36
 800c83c:	fb02 f204 	mul.w	r2, r2, r4
 800c840:	4413      	add	r3, r2
 800c842:	4403      	add	r3, r0
 800c844:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800c848:	8893      	ldrh	r3, [r2, #4]
 800c84a:	f361 038d 	bfi	r3, r1, #2, #12
 800c84e:	8093      	strh	r3, [r2, #4]
							change_flag = true;		//値が更新されたことを示す
 800c850:	2301      	movs	r3, #1
 800c852:	73fb      	strb	r3, [r7, #15]
						}
					}
                }
                //西側ノード
				if(i > 1)						//範囲チェック
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	2b01      	cmp	r3, #1
 800c858:	dd5b      	ble.n	800c912 <updateAllNodeWeight+0x6ae>
				{
					if( (maze->ColumnNode[i-1][j].existence & mask) == NOWALL)	//壁がなければ
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	1e58      	subs	r0, r3, #1
 800c85e:	6879      	ldr	r1, [r7, #4]
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	4613      	mov	r3, r2
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	4413      	add	r3, r2
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	2236      	movs	r2, #54	; 0x36
 800c86c:	fb02 f200 	mul.w	r2, r2, r0
 800c870:	4413      	add	r3, r2
 800c872:	440b      	add	r3, r1
 800c874:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c878:	791b      	ldrb	r3, [r3, #4]
 800c87a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	461a      	mov	r2, r3
 800c882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c884:	4013      	ands	r3, r2
 800c886:	2b00      	cmp	r3, #0
 800c888:	d143      	bne.n	800c912 <updateAllNodeWeight+0x6ae>
					{
                        // printf("列西%u\r\n",i-1);
						if(maze->ColumnNode[i-1][j].weight == MAX_WEIGHT)			//値が入っていなければ
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	1e58      	subs	r0, r3, #1
 800c88e:	6879      	ldr	r1, [r7, #4]
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	4613      	mov	r3, r2
 800c894:	005b      	lsls	r3, r3, #1
 800c896:	4413      	add	r3, r2
 800c898:	005b      	lsls	r3, r3, #1
 800c89a:	2236      	movs	r2, #54	; 0x36
 800c89c:	fb02 f200 	mul.w	r2, r2, r0
 800c8a0:	4413      	add	r3, r2
 800c8a2:	440b      	add	r3, r1
 800c8a4:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c8a8:	889b      	ldrh	r3, [r3, #4]
 800c8aa:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	f640 72ff 	movw	r2, #4095	; 0xfff
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d12c      	bne.n	800c912 <updateAllNodeWeight+0x6ae>
						{
							maze->ColumnNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800c8b8:	6879      	ldr	r1, [r7, #4]
 800c8ba:	693a      	ldr	r2, [r7, #16]
 800c8bc:	6978      	ldr	r0, [r7, #20]
 800c8be:	4613      	mov	r3, r2
 800c8c0:	005b      	lsls	r3, r3, #1
 800c8c2:	4413      	add	r3, r2
 800c8c4:	005b      	lsls	r3, r3, #1
 800c8c6:	2236      	movs	r2, #54	; 0x36
 800c8c8:	fb02 f200 	mul.w	r2, r2, r0
 800c8cc:	4413      	add	r3, r2
 800c8ce:	440b      	add	r3, r1
 800c8d0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c8d4:	889b      	ldrh	r3, [r3, #4]
 800c8d6:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	3307      	adds	r3, #7
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	1e5c      	subs	r4, r3, #1
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8ea:	b299      	uxth	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	693a      	ldr	r2, [r7, #16]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	4413      	add	r3, r2
 800c8f6:	005b      	lsls	r3, r3, #1
 800c8f8:	2236      	movs	r2, #54	; 0x36
 800c8fa:	fb02 f204 	mul.w	r2, r2, r4
 800c8fe:	4413      	add	r3, r2
 800c900:	4403      	add	r3, r0
 800c902:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800c906:	8893      	ldrh	r3, [r2, #4]
 800c908:	f361 038d 	bfi	r3, r1, #2, #12
 800c90c:	8093      	strh	r3, [r2, #4]
							change_flag = true;		//値が更新されたことを示す
 800c90e:	2301      	movs	r3, #1
 800c910:	73fb      	strb	r3, [r7, #15]
						}
					}
				}
                //北側に斜めが2方向
				if(j < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	2b07      	cmp	r3, #7
 800c916:	f300 80b9 	bgt.w	800ca8c <updateAllNodeWeight+0x828>
				{
                    //北東
					if( (maze->RawNode[i][j+1].existence & mask) == NOWALL)		//壁がなければ
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	3301      	adds	r3, #1
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	6979      	ldr	r1, [r7, #20]
 800c922:	461a      	mov	r2, r3
 800c924:	0052      	lsls	r2, r2, #1
 800c926:	441a      	add	r2, r3
 800c928:	0053      	lsls	r3, r2, #1
 800c92a:	461a      	mov	r2, r3
 800c92c:	460b      	mov	r3, r1
 800c92e:	011b      	lsls	r3, r3, #4
 800c930:	1a5b      	subs	r3, r3, r1
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	4413      	add	r3, r2
 800c936:	4403      	add	r3, r0
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	461a      	mov	r2, r3
 800c942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c944:	4013      	ands	r3, r2
 800c946:	2b00      	cmp	r3, #0
 800c948:	d142      	bne.n	800c9d0 <updateAllNodeWeight+0x76c>
					{
                        //printf("列北東%u\r\n",j+1);
						if(maze->RawNode[i][j+1].weight == MAX_WEIGHT)			//更新されていなければ
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	3301      	adds	r3, #1
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	6979      	ldr	r1, [r7, #20]
 800c952:	461a      	mov	r2, r3
 800c954:	0052      	lsls	r2, r2, #1
 800c956:	441a      	add	r2, r3
 800c958:	0053      	lsls	r3, r2, #1
 800c95a:	461a      	mov	r2, r3
 800c95c:	460b      	mov	r3, r1
 800c95e:	011b      	lsls	r3, r3, #4
 800c960:	1a5b      	subs	r3, r3, r1
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	4413      	add	r3, r2
 800c966:	4403      	add	r3, r0
 800c968:	881b      	ldrh	r3, [r3, #0]
 800c96a:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c96e:	b29b      	uxth	r3, r3
 800c970:	f640 72ff 	movw	r2, #4095	; 0xfff
 800c974:	4293      	cmp	r3, r2
 800c976:	d12b      	bne.n	800c9d0 <updateAllNodeWeight+0x76c>
						{
							maze->RawNode[i][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800c978:	6879      	ldr	r1, [r7, #4]
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	6978      	ldr	r0, [r7, #20]
 800c97e:	4613      	mov	r3, r2
 800c980:	005b      	lsls	r3, r3, #1
 800c982:	4413      	add	r3, r2
 800c984:	005b      	lsls	r3, r3, #1
 800c986:	2236      	movs	r2, #54	; 0x36
 800c988:	fb02 f200 	mul.w	r2, r2, r0
 800c98c:	4413      	add	r3, r2
 800c98e:	440b      	add	r3, r1
 800c990:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800c994:	889b      	ldrh	r3, [r3, #4]
 800c996:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	3305      	adds	r3, #5
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800c9a8:	b290      	uxth	r0, r2
 800c9aa:	687c      	ldr	r4, [r7, #4]
 800c9ac:	6979      	ldr	r1, [r7, #20]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	0052      	lsls	r2, r2, #1
 800c9b2:	441a      	add	r2, r3
 800c9b4:	0053      	lsls	r3, r2, #1
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	011b      	lsls	r3, r3, #4
 800c9bc:	1a5b      	subs	r3, r3, r1
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	4413      	add	r3, r2
 800c9c2:	18e2      	adds	r2, r4, r3
 800c9c4:	8813      	ldrh	r3, [r2, #0]
 800c9c6:	f360 038d 	bfi	r3, r0, #2, #12
 800c9ca:	8013      	strh	r3, [r2, #0]
							change_flag = true;		//値が更新されたことを示す
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	73fb      	strb	r3, [r7, #15]
						}
					}
                	
                    //北西
                    if( (maze->RawNode[i-1][j+1].existence & mask) == NOWALL)		//壁がなければ
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	1e59      	subs	r1, r3, #1
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	461a      	mov	r2, r3
 800c9dc:	0052      	lsls	r2, r2, #1
 800c9de:	441a      	add	r2, r3
 800c9e0:	0053      	lsls	r3, r2, #1
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	011b      	lsls	r3, r3, #4
 800c9e8:	1a5b      	subs	r3, r3, r1
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	4413      	add	r3, r2
 800c9ee:	4403      	add	r3, r0
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fc:	4013      	ands	r3, r2
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d144      	bne.n	800ca8c <updateAllNodeWeight+0x828>
					{
                        // printf("列北西%u\r\n",maze->RawNode[i-1][j+1].existence);
						if(maze->RawNode[i-1][j+1].weight == MAX_WEIGHT)			//更新されていなければ
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	1e59      	subs	r1, r3, #1
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	0052      	lsls	r2, r2, #1
 800ca10:	441a      	add	r2, r3
 800ca12:	0053      	lsls	r3, r2, #1
 800ca14:	461a      	mov	r2, r3
 800ca16:	460b      	mov	r3, r1
 800ca18:	011b      	lsls	r3, r3, #4
 800ca1a:	1a5b      	subs	r3, r3, r1
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	4403      	add	r3, r0
 800ca22:	881b      	ldrh	r3, [r3, #0]
 800ca24:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d12c      	bne.n	800ca8c <updateAllNodeWeight+0x828>
						{
							maze->RawNode[i-1][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ca32:	6879      	ldr	r1, [r7, #4]
 800ca34:	693a      	ldr	r2, [r7, #16]
 800ca36:	6978      	ldr	r0, [r7, #20]
 800ca38:	4613      	mov	r3, r2
 800ca3a:	005b      	lsls	r3, r3, #1
 800ca3c:	4413      	add	r3, r2
 800ca3e:	005b      	lsls	r3, r3, #1
 800ca40:	2236      	movs	r2, #54	; 0x36
 800ca42:	fb02 f200 	mul.w	r2, r2, r0
 800ca46:	4413      	add	r3, r2
 800ca48:	440b      	add	r3, r1
 800ca4a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800ca4e:	889b      	ldrh	r3, [r3, #4]
 800ca50:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	3305      	adds	r3, #5
 800ca58:	b29a      	uxth	r2, r3
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	1e59      	subs	r1, r3, #1
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	3301      	adds	r3, #1
 800ca62:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800ca66:	b290      	uxth	r0, r2
 800ca68:	687c      	ldr	r4, [r7, #4]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	0052      	lsls	r2, r2, #1
 800ca6e:	441a      	add	r2, r3
 800ca70:	0053      	lsls	r3, r2, #1
 800ca72:	461a      	mov	r2, r3
 800ca74:	460b      	mov	r3, r1
 800ca76:	011b      	lsls	r3, r3, #4
 800ca78:	1a5b      	subs	r3, r3, r1
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	4413      	add	r3, r2
 800ca7e:	18e2      	adds	r2, r4, r3
 800ca80:	8813      	ldrh	r3, [r2, #0]
 800ca82:	f360 038d 	bfi	r3, r0, #2, #12
 800ca86:	8013      	strh	r3, [r2, #0]
							change_flag = true;		//値が更新されたことを示す
 800ca88:	2301      	movs	r3, #1
 800ca8a:	73fb      	strb	r3, [r7, #15]
						}
					}
				}

                //南側に斜めが2方向
				if(j > 0)						//範囲チェック
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	f340 80b6 	ble.w	800cc00 <updateAllNodeWeight+0x99c>
				{
                    //南東
					if( (maze->RawNode[i][j].existence & mask) == NOWALL)		//壁がなければ
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	6979      	ldr	r1, [r7, #20]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	0052      	lsls	r2, r2, #1
 800ca9e:	441a      	add	r2, r3
 800caa0:	0053      	lsls	r3, r2, #1
 800caa2:	461a      	mov	r2, r3
 800caa4:	460b      	mov	r3, r1
 800caa6:	011b      	lsls	r3, r3, #4
 800caa8:	1a5b      	subs	r3, r3, r1
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	4413      	add	r3, r2
 800caae:	4403      	add	r3, r0
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	461a      	mov	r2, r3
 800caba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabc:	4013      	ands	r3, r2
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d140      	bne.n	800cb44 <updateAllNodeWeight+0x8e0>
					{
                        // printf("列南東%u\r\n",maze->RawNode[i][j].existence);
						if(maze->RawNode[i][j].weight == MAX_WEIGHT)			//値が入っていなければ
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	6979      	ldr	r1, [r7, #20]
 800cac8:	461a      	mov	r2, r3
 800caca:	0052      	lsls	r2, r2, #1
 800cacc:	441a      	add	r2, r3
 800cace:	0053      	lsls	r3, r2, #1
 800cad0:	461a      	mov	r2, r3
 800cad2:	460b      	mov	r3, r1
 800cad4:	011b      	lsls	r3, r3, #4
 800cad6:	1a5b      	subs	r3, r3, r1
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	4413      	add	r3, r2
 800cadc:	4403      	add	r3, r0
 800cade:	881b      	ldrh	r3, [r3, #0]
 800cae0:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	f640 72ff 	movw	r2, #4095	; 0xfff
 800caea:	4293      	cmp	r3, r2
 800caec:	d12a      	bne.n	800cb44 <updateAllNodeWeight+0x8e0>
						{
							maze->RawNode[i][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800caee:	6879      	ldr	r1, [r7, #4]
 800caf0:	693a      	ldr	r2, [r7, #16]
 800caf2:	6978      	ldr	r0, [r7, #20]
 800caf4:	4613      	mov	r3, r2
 800caf6:	005b      	lsls	r3, r3, #1
 800caf8:	4413      	add	r3, r2
 800cafa:	005b      	lsls	r3, r3, #1
 800cafc:	2236      	movs	r2, #54	; 0x36
 800cafe:	fb02 f200 	mul.w	r2, r2, r0
 800cb02:	4413      	add	r3, r2
 800cb04:	440b      	add	r3, r1
 800cb06:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800cb0a:	889b      	ldrh	r3, [r3, #4]
 800cb0c:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	3305      	adds	r3, #5
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb1a:	b298      	uxth	r0, r3
 800cb1c:	687c      	ldr	r4, [r7, #4]
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	6979      	ldr	r1, [r7, #20]
 800cb22:	461a      	mov	r2, r3
 800cb24:	0052      	lsls	r2, r2, #1
 800cb26:	441a      	add	r2, r3
 800cb28:	0053      	lsls	r3, r2, #1
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	011b      	lsls	r3, r3, #4
 800cb30:	1a5b      	subs	r3, r3, r1
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	4413      	add	r3, r2
 800cb36:	18e2      	adds	r2, r4, r3
 800cb38:	8813      	ldrh	r3, [r2, #0]
 800cb3a:	f360 038d 	bfi	r3, r0, #2, #12
 800cb3e:	8013      	strh	r3, [r2, #0]
							change_flag = true;		//値が更新されたことを示す
 800cb40:	2301      	movs	r3, #1
 800cb42:	73fb      	strb	r3, [r7, #15]
						}
					}
                    //南西
    				if( (maze->RawNode[i-1][j].existence & mask) == NOWALL)		//壁がなければ
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	1e59      	subs	r1, r3, #1
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	0052      	lsls	r2, r2, #1
 800cb50:	441a      	add	r2, r3
 800cb52:	0053      	lsls	r3, r2, #1
 800cb54:	461a      	mov	r2, r3
 800cb56:	460b      	mov	r3, r1
 800cb58:	011b      	lsls	r3, r3, #4
 800cb5a:	1a5b      	subs	r3, r3, r1
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	4413      	add	r3, r2
 800cb60:	4403      	add	r3, r0
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6e:	4013      	ands	r3, r2
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d145      	bne.n	800cc00 <updateAllNodeWeight+0x99c>
					{
                        //printf("列南西%u\r\n",maze->RawNode[i-1][j].existence);
						if(maze->RawNode[i-1][j].weight == MAX_WEIGHT)			//値が入っていなければ
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	1e59      	subs	r1, r3, #1
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	0052      	lsls	r2, r2, #1
 800cb80:	441a      	add	r2, r3
 800cb82:	0053      	lsls	r3, r2, #1
 800cb84:	461a      	mov	r2, r3
 800cb86:	460b      	mov	r3, r1
 800cb88:	011b      	lsls	r3, r3, #4
 800cb8a:	1a5b      	subs	r3, r3, r1
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	4413      	add	r3, r2
 800cb90:	4403      	add	r3, r0
 800cb92:	881b      	ldrh	r3, [r3, #0]
 800cb94:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d12e      	bne.n	800cc00 <updateAllNodeWeight+0x99c>
						{
							maze->RawNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800cba2:	6879      	ldr	r1, [r7, #4]
 800cba4:	693a      	ldr	r2, [r7, #16]
 800cba6:	6978      	ldr	r0, [r7, #20]
 800cba8:	4613      	mov	r3, r2
 800cbaa:	005b      	lsls	r3, r3, #1
 800cbac:	4413      	add	r3, r2
 800cbae:	005b      	lsls	r3, r3, #1
 800cbb0:	2236      	movs	r2, #54	; 0x36
 800cbb2:	fb02 f200 	mul.w	r2, r2, r0
 800cbb6:	4413      	add	r3, r2
 800cbb8:	440b      	add	r3, r1
 800cbba:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800cbbe:	889b      	ldrh	r3, [r3, #4]
 800cbc0:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	3305      	adds	r3, #5
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	1e59      	subs	r1, r3, #1
 800cbce:	4613      	mov	r3, r2
 800cbd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbd4:	b298      	uxth	r0, r3
 800cbd6:	687c      	ldr	r4, [r7, #4]
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	0052      	lsls	r2, r2, #1
 800cbde:	441a      	add	r2, r3
 800cbe0:	0053      	lsls	r3, r2, #1
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	011b      	lsls	r3, r3, #4
 800cbe8:	1a5b      	subs	r3, r3, r1
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	4413      	add	r3, r2
 800cbee:	18e2      	adds	r2, r4, r3
 800cbf0:	8813      	ldrh	r3, [r2, #0]
 800cbf2:	f360 038d 	bfi	r3, r0, #2, #12
 800cbf6:	8013      	strh	r3, [r2, #0]
							change_flag = true;		//値が更新されたことを示す
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	73fb      	strb	r3, [r7, #15]
 800cbfc:	e000      	b.n	800cc00 <updateAllNodeWeight+0x99c>
					continue;
 800cbfe:	bf00      	nop
			for(j = 0; j < NUMBER_OF_SQUARES_Y; j++)		
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	3301      	adds	r3, #1
 800cc04:	613b      	str	r3, [r7, #16]
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	2b08      	cmp	r3, #8
 800cc0a:	f77f adad 	ble.w	800c768 <updateAllNodeWeight+0x504>
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	3301      	adds	r3, #1
 800cc12:	617b      	str	r3, [r7, #20]
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	2b08      	cmp	r3, #8
 800cc18:	f77f ada3 	ble.w	800c762 <updateAllNodeWeight+0x4fe>
				}
            }
        }
        //printf("重みの更新\r\n");//一回しか呼ばれていない

	}while(change_flag == true);	//全体を作り終わるまで待つ
 800cc1c:	7bfb      	ldrb	r3, [r7, #15]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	f47f ab3a 	bne.w	800c298 <updateAllNodeWeight+0x34>
}
 800cc24:	bf00      	nop
 800cc26:	371c      	adds	r7, #28
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd90      	pop	{r4, r7, pc}

0800cc2c <getNextNode>:
}

//ノード情報から、行けるノードを比較する
// 比較しながらアドレスを更新してしまうので注意:
node *getNextNode(maze_node *maze, cardinal car, node *now_node, int mask)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	607a      	str	r2, [r7, #4]
 800cc36:	603b      	str	r3, [r7, #0]
 800cc38:	460b      	mov	r3, r1
 800cc3a:	72fb      	strb	r3, [r7, #11]
    
    //現ノードの情報から見るべきノードを選び、比較する
    //現在ノードの情報を使って周囲ノードを比較し、一番重みが低いノードを自分のノード情報とする（アドレス）
    //printf("次のノードを取得\r\n");
    node *next_node;
    uint16_t compare_weight=0;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	827b      	strh	r3, [r7, #18]
    compare_weight = now_node->weight;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	881b      	ldrh	r3, [r3, #0]
 800cc44:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	827b      	strh	r3, [r7, #18]

    _Bool flag=false;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	747b      	strb	r3, [r7, #17]
    //printf("マイノードが01のどちらか:%d\r\n",now_node->rc);
    if(now_node->rc == 0)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	78db      	ldrb	r3, [r3, #3]
 800cc54:	f083 0301 	eor.w	r3, r3, #1
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 8284 	beq.w	800d168 <getNextNode+0x53c>
    {
        printf("行ノードから");
 800cc60:	48be      	ldr	r0, [pc, #760]	; (800cf5c <getNextNode+0x330>)
 800cc62:	f00b fefb 	bl	8018a5c <iprintf>
        //条件がおかしい？printしている全ノードの重みと、アドレスを入れたはずのマイノードの重みが違う
        
        //行にいるとき
        //北側ノード
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	795b      	ldrb	r3, [r3, #5]
 800cc6a:	2b07      	cmp	r3, #7
 800cc6c:	d863      	bhi.n	800cd36 <getNextNode+0x10a>
        {
            //printf("%u\r\n",now_node->pos.y);
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	791b      	ldrb	r3, [r3, #4]
 800cc72:	4618      	mov	r0, r3
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	795b      	ldrb	r3, [r3, #5]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	68f9      	ldr	r1, [r7, #12]
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	0052      	lsls	r2, r2, #1
 800cc80:	441a      	add	r2, r3
 800cc82:	0053      	lsls	r3, r2, #1
 800cc84:	461a      	mov	r2, r3
 800cc86:	4603      	mov	r3, r0
 800cc88:	011b      	lsls	r3, r3, #4
 800cc8a:	1a1b      	subs	r3, r3, r0
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	4413      	add	r3, r2
 800cc90:	440b      	add	r3, r1
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	4013      	ands	r3, r2
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d148      	bne.n	800cd36 <getNextNode+0x10a>
            {
                // printf("%d\r\n", maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence);//壁があることになってた..
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	791b      	ldrb	r3, [r3, #4]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	795b      	ldrb	r3, [r3, #5]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	68f9      	ldr	r1, [r7, #12]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	0052      	lsls	r2, r2, #1
 800ccb6:	441a      	add	r2, r3
 800ccb8:	0053      	lsls	r3, r2, #1
 800ccba:	461a      	mov	r2, r3
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	011b      	lsls	r3, r3, #4
 800ccc0:	1a1b      	subs	r3, r3, r0
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	4413      	add	r3, r2
 800ccc6:	440b      	add	r3, r1
 800ccc8:	881b      	ldrh	r3, [r3, #0]
 800ccca:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	8a7b      	ldrh	r3, [r7, #18]
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d92e      	bls.n	800cd36 <getNextNode+0x10a>
                {
                    printf("北へ\r\n");
 800ccd8:	48a1      	ldr	r0, [pc, #644]	; (800cf60 <getNextNode+0x334>)
 800ccda:	f00b ff47 	bl	8018b6c <puts>
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	791b      	ldrb	r3, [r3, #4]
 800cce2:	4618      	mov	r0, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	795b      	ldrb	r3, [r3, #5]
 800cce8:	3301      	adds	r3, #1
 800ccea:	68f9      	ldr	r1, [r7, #12]
 800ccec:	461a      	mov	r2, r3
 800ccee:	0052      	lsls	r2, r2, #1
 800ccf0:	441a      	add	r2, r3
 800ccf2:	0053      	lsls	r3, r2, #1
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	011b      	lsls	r3, r3, #4
 800ccfa:	1a1b      	subs	r3, r3, r0
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	4413      	add	r3, r2
 800cd00:	440b      	add	r3, r1
 800cd02:	881b      	ldrh	r3, [r3, #0]
 800cd04:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	827b      	strh	r3, [r7, #18]
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	791b      	ldrb	r3, [r3, #4]
 800cd10:	4619      	mov	r1, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	795b      	ldrb	r3, [r3, #5]
 800cd16:	3301      	adds	r3, #1
 800cd18:	461a      	mov	r2, r3
 800cd1a:	0052      	lsls	r2, r2, #1
 800cd1c:	441a      	add	r2, r3
 800cd1e:	0053      	lsls	r3, r2, #1
 800cd20:	461a      	mov	r2, r3
 800cd22:	460b      	mov	r3, r1
 800cd24:	011b      	lsls	r3, r3, #4
 800cd26:	1a5b      	subs	r3, r3, r1
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	4413      	add	r3, r2
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	4413      	add	r3, r2
 800cd30:	617b      	str	r3, [r7, #20]
                    flag = true;
 800cd32:	2301      	movs	r3, #1
 800cd34:	747b      	strb	r3, [r7, #17]
                }
            }
        }
        //南へ側ノード
        if(now_node->pos.y > 1)						//範囲チェック
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	795b      	ldrb	r3, [r3, #5]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d963      	bls.n	800ce06 <getNextNode+0x1da>
        {
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)	//壁がなければ
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	791b      	ldrb	r3, [r3, #4]
 800cd42:	4618      	mov	r0, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	795b      	ldrb	r3, [r3, #5]
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	68f9      	ldr	r1, [r7, #12]
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	0052      	lsls	r2, r2, #1
 800cd50:	441a      	add	r2, r3
 800cd52:	0053      	lsls	r3, r2, #1
 800cd54:	461a      	mov	r2, r3
 800cd56:	4603      	mov	r3, r0
 800cd58:	011b      	lsls	r3, r3, #4
 800cd5a:	1a1b      	subs	r3, r3, r0
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	4413      	add	r3, r2
 800cd60:	440b      	add	r3, r1
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	4013      	ands	r3, r2
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d148      	bne.n	800ce06 <getNextNode+0x1da>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	791b      	ldrb	r3, [r3, #4]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	795b      	ldrb	r3, [r3, #5]
 800cd7e:	3b01      	subs	r3, #1
 800cd80:	68f9      	ldr	r1, [r7, #12]
 800cd82:	461a      	mov	r2, r3
 800cd84:	0052      	lsls	r2, r2, #1
 800cd86:	441a      	add	r2, r3
 800cd88:	0053      	lsls	r3, r2, #1
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	011b      	lsls	r3, r3, #4
 800cd90:	1a1b      	subs	r3, r3, r0
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	4413      	add	r3, r2
 800cd96:	440b      	add	r3, r1
 800cd98:	881b      	ldrh	r3, [r3, #0]
 800cd9a:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	461a      	mov	r2, r3
 800cda2:	8a7b      	ldrh	r3, [r7, #18]
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d92e      	bls.n	800ce06 <getNextNode+0x1da>
                {
                    printf("南へ\r\n");
 800cda8:	486e      	ldr	r0, [pc, #440]	; (800cf64 <getNextNode+0x338>)
 800cdaa:	f00b fedf 	bl	8018b6c <puts>
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	791b      	ldrb	r3, [r3, #4]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	795b      	ldrb	r3, [r3, #5]
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	68f9      	ldr	r1, [r7, #12]
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	0052      	lsls	r2, r2, #1
 800cdc0:	441a      	add	r2, r3
 800cdc2:	0053      	lsls	r3, r2, #1
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	011b      	lsls	r3, r3, #4
 800cdca:	1a1b      	subs	r3, r3, r0
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	4413      	add	r3, r2
 800cdd0:	440b      	add	r3, r1
 800cdd2:	881b      	ldrh	r3, [r3, #0]
 800cdd4:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	827b      	strh	r3, [r7, #18]
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	791b      	ldrb	r3, [r3, #4]
 800cde0:	4619      	mov	r1, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	795b      	ldrb	r3, [r3, #5]
 800cde6:	3b01      	subs	r3, #1
 800cde8:	461a      	mov	r2, r3
 800cdea:	0052      	lsls	r2, r2, #1
 800cdec:	441a      	add	r2, r3
 800cdee:	0053      	lsls	r3, r2, #1
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	011b      	lsls	r3, r3, #4
 800cdf6:	1a5b      	subs	r3, r3, r1
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	4413      	add	r3, r2
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	4413      	add	r3, r2
 800ce00:	617b      	str	r3, [r7, #20]
                    flag = true;
 800ce02:	2301      	movs	r3, #1
 800ce04:	747b      	strb	r3, [r7, #17]
                }
            }
        }
        //東へ側に斜めが2方向
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	791b      	ldrb	r3, [r3, #4]
 800ce0a:	2b07      	cmp	r3, #7
 800ce0c:	f200 80d6 	bhi.w	800cfbc <getNextNode+0x390>
        {
            //北東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	791b      	ldrb	r3, [r3, #4]
 800ce14:	1c59      	adds	r1, r3, #1
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	795b      	ldrb	r3, [r3, #5]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	68fa      	ldr	r2, [r7, #12]
 800ce1e:	4603      	mov	r3, r0
 800ce20:	005b      	lsls	r3, r3, #1
 800ce22:	4403      	add	r3, r0
 800ce24:	005b      	lsls	r3, r3, #1
 800ce26:	2036      	movs	r0, #54	; 0x36
 800ce28:	fb00 f101 	mul.w	r1, r0, r1
 800ce2c:	440b      	add	r3, r1
 800ce2e:	4413      	add	r3, r2
 800ce30:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800ce34:	791b      	ldrb	r3, [r3, #4]
 800ce36:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	4013      	ands	r3, r2
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d149      	bne.n	800ceda <getNextNode+0x2ae>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	791b      	ldrb	r3, [r3, #4]
 800ce4a:	1c59      	adds	r1, r3, #1
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	795b      	ldrb	r3, [r3, #5]
 800ce50:	4618      	mov	r0, r3
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	4603      	mov	r3, r0
 800ce56:	005b      	lsls	r3, r3, #1
 800ce58:	4403      	add	r3, r0
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	2036      	movs	r0, #54	; 0x36
 800ce5e:	fb00 f101 	mul.w	r1, r0, r1
 800ce62:	440b      	add	r3, r1
 800ce64:	4413      	add	r3, r2
 800ce66:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800ce6a:	889b      	ldrh	r3, [r3, #4]
 800ce6c:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	461a      	mov	r2, r3
 800ce74:	8a7b      	ldrh	r3, [r7, #18]
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d92f      	bls.n	800ceda <getNextNode+0x2ae>
                {
                    printf("北東へ\r\n");
 800ce7a:	483b      	ldr	r0, [pc, #236]	; (800cf68 <getNextNode+0x33c>)
 800ce7c:	f00b fe76 	bl	8018b6c <puts>
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	791b      	ldrb	r3, [r3, #4]
 800ce84:	1c59      	adds	r1, r3, #1
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	795b      	ldrb	r3, [r3, #5]
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	68fa      	ldr	r2, [r7, #12]
 800ce8e:	4603      	mov	r3, r0
 800ce90:	005b      	lsls	r3, r3, #1
 800ce92:	4403      	add	r3, r0
 800ce94:	005b      	lsls	r3, r3, #1
 800ce96:	2036      	movs	r0, #54	; 0x36
 800ce98:	fb00 f101 	mul.w	r1, r0, r1
 800ce9c:	440b      	add	r3, r1
 800ce9e:	4413      	add	r3, r2
 800cea0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800cea4:	889b      	ldrh	r3, [r3, #4]
 800cea6:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	827b      	strh	r3, [r7, #18]
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	791b      	ldrb	r3, [r3, #4]
 800ceb2:	1c5a      	adds	r2, r3, #1
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	795b      	ldrb	r3, [r3, #5]
 800ceb8:	4619      	mov	r1, r3
 800ceba:	460b      	mov	r3, r1
 800cebc:	005b      	lsls	r3, r3, #1
 800cebe:	440b      	add	r3, r1
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	2136      	movs	r1, #54	; 0x36
 800cec4:	fb01 f202 	mul.w	r2, r1, r2
 800cec8:	4413      	add	r3, r2
 800ceca:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	4413      	add	r3, r2
 800ced2:	3304      	adds	r3, #4
 800ced4:	617b      	str	r3, [r7, #20]
                    flag = true;
 800ced6:	2301      	movs	r3, #1
 800ced8:	747b      	strb	r3, [r7, #17]
                }
            }
            
            //南へ東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	791b      	ldrb	r3, [r3, #4]
 800cede:	1c58      	adds	r0, r3, #1
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	795b      	ldrb	r3, [r3, #5]
 800cee4:	1e5a      	subs	r2, r3, #1
 800cee6:	68f9      	ldr	r1, [r7, #12]
 800cee8:	4613      	mov	r3, r2
 800ceea:	005b      	lsls	r3, r3, #1
 800ceec:	4413      	add	r3, r2
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	2236      	movs	r2, #54	; 0x36
 800cef2:	fb02 f200 	mul.w	r2, r2, r0
 800cef6:	4413      	add	r3, r2
 800cef8:	440b      	add	r3, r1
 800cefa:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800cefe:	791b      	ldrb	r3, [r3, #4]
 800cf00:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	461a      	mov	r2, r3
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	4013      	ands	r3, r2
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d155      	bne.n	800cfbc <getNextNode+0x390>
            {  
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	791b      	ldrb	r3, [r3, #4]
 800cf14:	1c58      	adds	r0, r3, #1
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	795b      	ldrb	r3, [r3, #5]
 800cf1a:	1e5a      	subs	r2, r3, #1
 800cf1c:	68f9      	ldr	r1, [r7, #12]
 800cf1e:	4613      	mov	r3, r2
 800cf20:	005b      	lsls	r3, r3, #1
 800cf22:	4413      	add	r3, r2
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	2236      	movs	r2, #54	; 0x36
 800cf28:	fb02 f200 	mul.w	r2, r2, r0
 800cf2c:	4413      	add	r3, r2
 800cf2e:	440b      	add	r3, r1
 800cf30:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800cf34:	889b      	ldrh	r3, [r3, #4]
 800cf36:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	8a7b      	ldrh	r3, [r7, #18]
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d93b      	bls.n	800cfbc <getNextNode+0x390>
                {
                    printf("南東へ\r\n");
 800cf44:	4809      	ldr	r0, [pc, #36]	; (800cf6c <getNextNode+0x340>)
 800cf46:	f00b fe11 	bl	8018b6c <puts>
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	791b      	ldrb	r3, [r3, #4]
 800cf4e:	1c58      	adds	r0, r3, #1
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	795b      	ldrb	r3, [r3, #5]
 800cf54:	1e5a      	subs	r2, r3, #1
 800cf56:	68f9      	ldr	r1, [r7, #12]
 800cf58:	e00a      	b.n	800cf70 <getNextNode+0x344>
 800cf5a:	bf00      	nop
 800cf5c:	0801c2ec 	.word	0x0801c2ec
 800cf60:	0801c300 	.word	0x0801c300
 800cf64:	0801c308 	.word	0x0801c308
 800cf68:	0801c310 	.word	0x0801c310
 800cf6c:	0801c31c 	.word	0x0801c31c
 800cf70:	4613      	mov	r3, r2
 800cf72:	005b      	lsls	r3, r3, #1
 800cf74:	4413      	add	r3, r2
 800cf76:	005b      	lsls	r3, r3, #1
 800cf78:	2236      	movs	r2, #54	; 0x36
 800cf7a:	fb02 f200 	mul.w	r2, r2, r0
 800cf7e:	4413      	add	r3, r2
 800cf80:	440b      	add	r3, r1
 800cf82:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800cf86:	889b      	ldrh	r3, [r3, #4]
 800cf88:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	827b      	strh	r3, [r7, #18]
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	791b      	ldrb	r3, [r3, #4]
 800cf94:	1c59      	adds	r1, r3, #1
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	795b      	ldrb	r3, [r3, #5]
 800cf9a:	1e5a      	subs	r2, r3, #1
 800cf9c:	4613      	mov	r3, r2
 800cf9e:	005b      	lsls	r3, r3, #1
 800cfa0:	4413      	add	r3, r2
 800cfa2:	005b      	lsls	r3, r3, #1
 800cfa4:	2236      	movs	r2, #54	; 0x36
 800cfa6:	fb02 f201 	mul.w	r2, r2, r1
 800cfaa:	4413      	add	r3, r2
 800cfac:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	3304      	adds	r3, #4
 800cfb6:	617b      	str	r3, [r7, #20]
                    flag = true;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	747b      	strb	r3, [r7, #17]
                }
            }
        }

        //西へ側に斜めが2方向
        if(now_node->pos.x > 0)						//範囲チェック
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	791b      	ldrb	r3, [r3, #4]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f000 8348 	beq.w	800d656 <getNextNode+0xa2a>
        {
            //北西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	791b      	ldrb	r3, [r3, #4]
 800cfca:	4618      	mov	r0, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	795b      	ldrb	r3, [r3, #5]
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	005b      	lsls	r3, r3, #1
 800cfd8:	440b      	add	r3, r1
 800cfda:	005b      	lsls	r3, r3, #1
 800cfdc:	2136      	movs	r1, #54	; 0x36
 800cfde:	fb01 f100 	mul.w	r1, r1, r0
 800cfe2:	440b      	add	r3, r1
 800cfe4:	4413      	add	r3, r2
 800cfe6:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800cfea:	791b      	ldrb	r3, [r3, #4]
 800cfec:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	461a      	mov	r2, r3
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	4013      	ands	r3, r2
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d149      	bne.n	800d090 <getNextNode+0x464>
            {
                //重みを比較して更新
               
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	791b      	ldrb	r3, [r3, #4]
 800d000:	4618      	mov	r0, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	795b      	ldrb	r3, [r3, #5]
 800d006:	4619      	mov	r1, r3
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	460b      	mov	r3, r1
 800d00c:	005b      	lsls	r3, r3, #1
 800d00e:	440b      	add	r3, r1
 800d010:	005b      	lsls	r3, r3, #1
 800d012:	2136      	movs	r1, #54	; 0x36
 800d014:	fb01 f100 	mul.w	r1, r1, r0
 800d018:	440b      	add	r3, r1
 800d01a:	4413      	add	r3, r2
 800d01c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d020:	889b      	ldrh	r3, [r3, #4]
 800d022:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d026:	b29b      	uxth	r3, r3
 800d028:	461a      	mov	r2, r3
 800d02a:	8a7b      	ldrh	r3, [r7, #18]
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d92f      	bls.n	800d090 <getNextNode+0x464>
                {
                    printf("北西へ\r\n");
 800d030:	484b      	ldr	r0, [pc, #300]	; (800d160 <getNextNode+0x534>)
 800d032:	f00b fd9b 	bl	8018b6c <puts>
                    compare_weight = maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	791b      	ldrb	r3, [r3, #4]
 800d03a:	4618      	mov	r0, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	795b      	ldrb	r3, [r3, #5]
 800d040:	4619      	mov	r1, r3
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	460b      	mov	r3, r1
 800d046:	005b      	lsls	r3, r3, #1
 800d048:	440b      	add	r3, r1
 800d04a:	005b      	lsls	r3, r3, #1
 800d04c:	2136      	movs	r1, #54	; 0x36
 800d04e:	fb01 f100 	mul.w	r1, r1, r0
 800d052:	440b      	add	r3, r1
 800d054:	4413      	add	r3, r2
 800d056:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d05a:	889b      	ldrh	r3, [r3, #4]
 800d05c:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d060:	b29b      	uxth	r3, r3
 800d062:	827b      	strh	r3, [r7, #18]
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	791b      	ldrb	r3, [r3, #4]
 800d068:	4619      	mov	r1, r3
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	795b      	ldrb	r3, [r3, #5]
 800d06e:	461a      	mov	r2, r3
 800d070:	4613      	mov	r3, r2
 800d072:	005b      	lsls	r3, r3, #1
 800d074:	4413      	add	r3, r2
 800d076:	005b      	lsls	r3, r3, #1
 800d078:	2236      	movs	r2, #54	; 0x36
 800d07a:	fb02 f201 	mul.w	r2, r2, r1
 800d07e:	4413      	add	r3, r2
 800d080:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	4413      	add	r3, r2
 800d088:	3304      	adds	r3, #4
 800d08a:	617b      	str	r3, [r7, #20]
                    flag = true;
 800d08c:	2301      	movs	r3, #1
 800d08e:	747b      	strb	r3, [r7, #17]
                }
            }
            //南へ西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	791b      	ldrb	r3, [r3, #4]
 800d094:	4618      	mov	r0, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	795b      	ldrb	r3, [r3, #5]
 800d09a:	1e5a      	subs	r2, r3, #1
 800d09c:	68f9      	ldr	r1, [r7, #12]
 800d09e:	4613      	mov	r3, r2
 800d0a0:	005b      	lsls	r3, r3, #1
 800d0a2:	4413      	add	r3, r2
 800d0a4:	005b      	lsls	r3, r3, #1
 800d0a6:	2236      	movs	r2, #54	; 0x36
 800d0a8:	fb02 f200 	mul.w	r2, r2, r0
 800d0ac:	4413      	add	r3, r2
 800d0ae:	440b      	add	r3, r1
 800d0b0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d0b4:	791b      	ldrb	r3, [r3, #4]
 800d0b6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	461a      	mov	r2, r3
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	4013      	ands	r3, r2
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f040 82c7 	bne.w	800d656 <getNextNode+0xa2a>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	791b      	ldrb	r3, [r3, #4]
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	795b      	ldrb	r3, [r3, #5]
 800d0d2:	1e5a      	subs	r2, r3, #1
 800d0d4:	68f9      	ldr	r1, [r7, #12]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	005b      	lsls	r3, r3, #1
 800d0da:	4413      	add	r3, r2
 800d0dc:	005b      	lsls	r3, r3, #1
 800d0de:	2236      	movs	r2, #54	; 0x36
 800d0e0:	fb02 f200 	mul.w	r2, r2, r0
 800d0e4:	4413      	add	r3, r2
 800d0e6:	440b      	add	r3, r1
 800d0e8:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d0ec:	889b      	ldrh	r3, [r3, #4]
 800d0ee:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	8a7b      	ldrh	r3, [r7, #18]
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	f240 82ac 	bls.w	800d656 <getNextNode+0xa2a>
                {
                    printf("南西へ\r\n");
 800d0fe:	4819      	ldr	r0, [pc, #100]	; (800d164 <getNextNode+0x538>)
 800d100:	f00b fd34 	bl	8018b6c <puts>
                    compare_weight = maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	791b      	ldrb	r3, [r3, #4]
 800d108:	4618      	mov	r0, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	795b      	ldrb	r3, [r3, #5]
 800d10e:	1e5a      	subs	r2, r3, #1
 800d110:	68f9      	ldr	r1, [r7, #12]
 800d112:	4613      	mov	r3, r2
 800d114:	005b      	lsls	r3, r3, #1
 800d116:	4413      	add	r3, r2
 800d118:	005b      	lsls	r3, r3, #1
 800d11a:	2236      	movs	r2, #54	; 0x36
 800d11c:	fb02 f200 	mul.w	r2, r2, r0
 800d120:	4413      	add	r3, r2
 800d122:	440b      	add	r3, r1
 800d124:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d128:	889b      	ldrh	r3, [r3, #4]
 800d12a:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d12e:	b29b      	uxth	r3, r3
 800d130:	827b      	strh	r3, [r7, #18]
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y-1]);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	791b      	ldrb	r3, [r3, #4]
 800d136:	4619      	mov	r1, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	795b      	ldrb	r3, [r3, #5]
 800d13c:	1e5a      	subs	r2, r3, #1
 800d13e:	4613      	mov	r3, r2
 800d140:	005b      	lsls	r3, r3, #1
 800d142:	4413      	add	r3, r2
 800d144:	005b      	lsls	r3, r3, #1
 800d146:	2236      	movs	r2, #54	; 0x36
 800d148:	fb02 f201 	mul.w	r2, r2, r1
 800d14c:	4413      	add	r3, r2
 800d14e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	4413      	add	r3, r2
 800d156:	3304      	adds	r3, #4
 800d158:	617b      	str	r3, [r7, #20]
                    //このノードあやしい
                    flag = true;
 800d15a:	2301      	movs	r3, #1
 800d15c:	747b      	strb	r3, [r7, #17]
 800d15e:	e27a      	b.n	800d656 <getNextNode+0xa2a>
 800d160:	0801c328 	.word	0x0801c328
 800d164:	0801c334 	.word	0x0801c334
                }
            }
        }
        //6つのうち最小ノードを選ぶ
    }
    else if(now_node->rc == 1)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	78db      	ldrb	r3, [r3, #3]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f000 8272 	beq.w	800d656 <getNextNode+0xa2a>
    {
        //printf("列にいる\r\n");
        //列にいるとき
        printf("列ノードから");
 800d172:	48be      	ldr	r0, [pc, #760]	; (800d46c <getNextNode+0x840>)
 800d174:	f00b fc72 	bl	8018a5c <iprintf>
        //東へ側ノード
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	791b      	ldrb	r3, [r3, #4]
 800d17c:	2b07      	cmp	r3, #7
 800d17e:	d864      	bhi.n	800d24a <getNextNode+0x61e>
        {
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	791b      	ldrb	r3, [r3, #4]
 800d184:	1c59      	adds	r1, r3, #1
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	795b      	ldrb	r3, [r3, #5]
 800d18a:	4618      	mov	r0, r3
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	4603      	mov	r3, r0
 800d190:	005b      	lsls	r3, r3, #1
 800d192:	4403      	add	r3, r0
 800d194:	005b      	lsls	r3, r3, #1
 800d196:	2036      	movs	r0, #54	; 0x36
 800d198:	fb00 f101 	mul.w	r1, r0, r1
 800d19c:	440b      	add	r3, r1
 800d19e:	4413      	add	r3, r2
 800d1a0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d1a4:	791b      	ldrb	r3, [r3, #4]
 800d1a6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	4013      	ands	r3, r2
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d149      	bne.n	800d24a <getNextNode+0x61e>
            {
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	791b      	ldrb	r3, [r3, #4]
 800d1ba:	1c59      	adds	r1, r3, #1
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	795b      	ldrb	r3, [r3, #5]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	68fa      	ldr	r2, [r7, #12]
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	4403      	add	r3, r0
 800d1ca:	005b      	lsls	r3, r3, #1
 800d1cc:	2036      	movs	r0, #54	; 0x36
 800d1ce:	fb00 f101 	mul.w	r1, r0, r1
 800d1d2:	440b      	add	r3, r1
 800d1d4:	4413      	add	r3, r2
 800d1d6:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d1da:	889b      	ldrh	r3, [r3, #4]
 800d1dc:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	8a7b      	ldrh	r3, [r7, #18]
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d92f      	bls.n	800d24a <getNextNode+0x61e>
                {
                    printf("東へ\r\n");
 800d1ea:	48a1      	ldr	r0, [pc, #644]	; (800d470 <getNextNode+0x844>)
 800d1ec:	f00b fcbe 	bl	8018b6c <puts>
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	791b      	ldrb	r3, [r3, #4]
 800d1f4:	1c59      	adds	r1, r3, #1
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	795b      	ldrb	r3, [r3, #5]
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	68fa      	ldr	r2, [r7, #12]
 800d1fe:	4603      	mov	r3, r0
 800d200:	005b      	lsls	r3, r3, #1
 800d202:	4403      	add	r3, r0
 800d204:	005b      	lsls	r3, r3, #1
 800d206:	2036      	movs	r0, #54	; 0x36
 800d208:	fb00 f101 	mul.w	r1, r0, r1
 800d20c:	440b      	add	r3, r1
 800d20e:	4413      	add	r3, r2
 800d210:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d214:	889b      	ldrh	r3, [r3, #4]
 800d216:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	827b      	strh	r3, [r7, #18]
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	791b      	ldrb	r3, [r3, #4]
 800d222:	1c5a      	adds	r2, r3, #1
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	795b      	ldrb	r3, [r3, #5]
 800d228:	4619      	mov	r1, r3
 800d22a:	460b      	mov	r3, r1
 800d22c:	005b      	lsls	r3, r3, #1
 800d22e:	440b      	add	r3, r1
 800d230:	005b      	lsls	r3, r3, #1
 800d232:	2136      	movs	r1, #54	; 0x36
 800d234:	fb01 f202 	mul.w	r2, r1, r2
 800d238:	4413      	add	r3, r2
 800d23a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d23e:	68fa      	ldr	r2, [r7, #12]
 800d240:	4413      	add	r3, r2
 800d242:	3304      	adds	r3, #4
 800d244:	617b      	str	r3, [r7, #20]
                    flag = true;
 800d246:	2301      	movs	r3, #1
 800d248:	747b      	strb	r3, [r7, #17]
                }
            }
        }
        //西へ側ノード
        if(now_node->pos.x > 1)						//範囲チェック
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	791b      	ldrb	r3, [r3, #4]
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d964      	bls.n	800d31c <getNextNode+0x6f0>
        {
            if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	791b      	ldrb	r3, [r3, #4]
 800d256:	1e59      	subs	r1, r3, #1
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	795b      	ldrb	r3, [r3, #5]
 800d25c:	4618      	mov	r0, r3
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	4603      	mov	r3, r0
 800d262:	005b      	lsls	r3, r3, #1
 800d264:	4403      	add	r3, r0
 800d266:	005b      	lsls	r3, r3, #1
 800d268:	2036      	movs	r0, #54	; 0x36
 800d26a:	fb00 f101 	mul.w	r1, r0, r1
 800d26e:	440b      	add	r3, r1
 800d270:	4413      	add	r3, r2
 800d272:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d276:	791b      	ldrb	r3, [r3, #4]
 800d278:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	461a      	mov	r2, r3
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	4013      	ands	r3, r2
 800d284:	2b00      	cmp	r3, #0
 800d286:	d149      	bne.n	800d31c <getNextNode+0x6f0>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	791b      	ldrb	r3, [r3, #4]
 800d28c:	1e59      	subs	r1, r3, #1
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	795b      	ldrb	r3, [r3, #5]
 800d292:	4618      	mov	r0, r3
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	4603      	mov	r3, r0
 800d298:	005b      	lsls	r3, r3, #1
 800d29a:	4403      	add	r3, r0
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	2036      	movs	r0, #54	; 0x36
 800d2a0:	fb00 f101 	mul.w	r1, r0, r1
 800d2a4:	440b      	add	r3, r1
 800d2a6:	4413      	add	r3, r2
 800d2a8:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d2ac:	889b      	ldrh	r3, [r3, #4]
 800d2ae:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	8a7b      	ldrh	r3, [r7, #18]
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d92f      	bls.n	800d31c <getNextNode+0x6f0>
                {
                    printf("西へ\r\n");
 800d2bc:	486d      	ldr	r0, [pc, #436]	; (800d474 <getNextNode+0x848>)
 800d2be:	f00b fc55 	bl	8018b6c <puts>
                    compare_weight = maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	791b      	ldrb	r3, [r3, #4]
 800d2c6:	1e59      	subs	r1, r3, #1
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	795b      	ldrb	r3, [r3, #5]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	005b      	lsls	r3, r3, #1
 800d2d4:	4403      	add	r3, r0
 800d2d6:	005b      	lsls	r3, r3, #1
 800d2d8:	2036      	movs	r0, #54	; 0x36
 800d2da:	fb00 f101 	mul.w	r1, r0, r1
 800d2de:	440b      	add	r3, r1
 800d2e0:	4413      	add	r3, r2
 800d2e2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d2e6:	889b      	ldrh	r3, [r3, #4]
 800d2e8:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	827b      	strh	r3, [r7, #18]
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	791b      	ldrb	r3, [r3, #4]
 800d2f4:	1e5a      	subs	r2, r3, #1
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	795b      	ldrb	r3, [r3, #5]
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	460b      	mov	r3, r1
 800d2fe:	005b      	lsls	r3, r3, #1
 800d300:	440b      	add	r3, r1
 800d302:	005b      	lsls	r3, r3, #1
 800d304:	2136      	movs	r1, #54	; 0x36
 800d306:	fb01 f202 	mul.w	r2, r1, r2
 800d30a:	4413      	add	r3, r2
 800d30c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800d310:	68fa      	ldr	r2, [r7, #12]
 800d312:	4413      	add	r3, r2
 800d314:	3304      	adds	r3, #4
 800d316:	617b      	str	r3, [r7, #20]
                    flag = true;
 800d318:	2301      	movs	r3, #1
 800d31a:	747b      	strb	r3, [r7, #17]
                }
            }
        }
        //北側に斜めが2方向
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	795b      	ldrb	r3, [r3, #5]
 800d320:	2b07      	cmp	r3, #7
 800d322:	f200 80d3 	bhi.w	800d4cc <getNextNode+0x8a0>
        {
            //北東へ
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	791b      	ldrb	r3, [r3, #4]
 800d32a:	4618      	mov	r0, r3
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	795b      	ldrb	r3, [r3, #5]
 800d330:	3301      	adds	r3, #1
 800d332:	68f9      	ldr	r1, [r7, #12]
 800d334:	461a      	mov	r2, r3
 800d336:	0052      	lsls	r2, r2, #1
 800d338:	441a      	add	r2, r3
 800d33a:	0053      	lsls	r3, r2, #1
 800d33c:	461a      	mov	r2, r3
 800d33e:	4603      	mov	r3, r0
 800d340:	011b      	lsls	r3, r3, #4
 800d342:	1a1b      	subs	r3, r3, r0
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	4413      	add	r3, r2
 800d348:	440b      	add	r3, r1
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d350:	b2db      	uxtb	r3, r3
 800d352:	461a      	mov	r2, r3
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	4013      	ands	r3, r2
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d148      	bne.n	800d3ee <getNextNode+0x7c2>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	791b      	ldrb	r3, [r3, #4]
 800d360:	4618      	mov	r0, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	795b      	ldrb	r3, [r3, #5]
 800d366:	3301      	adds	r3, #1
 800d368:	68f9      	ldr	r1, [r7, #12]
 800d36a:	461a      	mov	r2, r3
 800d36c:	0052      	lsls	r2, r2, #1
 800d36e:	441a      	add	r2, r3
 800d370:	0053      	lsls	r3, r2, #1
 800d372:	461a      	mov	r2, r3
 800d374:	4603      	mov	r3, r0
 800d376:	011b      	lsls	r3, r3, #4
 800d378:	1a1b      	subs	r3, r3, r0
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4413      	add	r3, r2
 800d37e:	440b      	add	r3, r1
 800d380:	881b      	ldrh	r3, [r3, #0]
 800d382:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d386:	b29b      	uxth	r3, r3
 800d388:	461a      	mov	r2, r3
 800d38a:	8a7b      	ldrh	r3, [r7, #18]
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d92e      	bls.n	800d3ee <getNextNode+0x7c2>
                {
                    printf("北東へ\r\n");
 800d390:	4839      	ldr	r0, [pc, #228]	; (800d478 <getNextNode+0x84c>)
 800d392:	f00b fbeb 	bl	8018b6c <puts>
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	791b      	ldrb	r3, [r3, #4]
 800d39a:	4618      	mov	r0, r3
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	795b      	ldrb	r3, [r3, #5]
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	68f9      	ldr	r1, [r7, #12]
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	0052      	lsls	r2, r2, #1
 800d3a8:	441a      	add	r2, r3
 800d3aa:	0053      	lsls	r3, r2, #1
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	011b      	lsls	r3, r3, #4
 800d3b2:	1a1b      	subs	r3, r3, r0
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	4413      	add	r3, r2
 800d3b8:	440b      	add	r3, r1
 800d3ba:	881b      	ldrh	r3, [r3, #0]
 800d3bc:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	827b      	strh	r3, [r7, #18]
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	791b      	ldrb	r3, [r3, #4]
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	795b      	ldrb	r3, [r3, #5]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	0052      	lsls	r2, r2, #1
 800d3d4:	441a      	add	r2, r3
 800d3d6:	0053      	lsls	r3, r2, #1
 800d3d8:	461a      	mov	r2, r3
 800d3da:	460b      	mov	r3, r1
 800d3dc:	011b      	lsls	r3, r3, #4
 800d3de:	1a5b      	subs	r3, r3, r1
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	4413      	add	r3, r2
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	4413      	add	r3, r2
 800d3e8:	617b      	str	r3, [r7, #20]
                    flag = true;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	747b      	strb	r3, [r7, #17]
                }
            }
            
            //北西へ
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	791b      	ldrb	r3, [r3, #4]
 800d3f2:	1e59      	subs	r1, r3, #1
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	795b      	ldrb	r3, [r3, #5]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	0052      	lsls	r2, r2, #1
 800d400:	441a      	add	r2, r3
 800d402:	0053      	lsls	r3, r2, #1
 800d404:	461a      	mov	r2, r3
 800d406:	460b      	mov	r3, r1
 800d408:	011b      	lsls	r3, r3, #4
 800d40a:	1a5b      	subs	r3, r3, r1
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	4413      	add	r3, r2
 800d410:	4403      	add	r3, r0
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	461a      	mov	r2, r3
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	4013      	ands	r3, r2
 800d420:	2b00      	cmp	r3, #0
 800d422:	d153      	bne.n	800d4cc <getNextNode+0x8a0>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	791b      	ldrb	r3, [r3, #4]
 800d428:	1e59      	subs	r1, r3, #1
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	795b      	ldrb	r3, [r3, #5]
 800d42e:	3301      	adds	r3, #1
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	461a      	mov	r2, r3
 800d434:	0052      	lsls	r2, r2, #1
 800d436:	441a      	add	r2, r3
 800d438:	0053      	lsls	r3, r2, #1
 800d43a:	461a      	mov	r2, r3
 800d43c:	460b      	mov	r3, r1
 800d43e:	011b      	lsls	r3, r3, #4
 800d440:	1a5b      	subs	r3, r3, r1
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4413      	add	r3, r2
 800d446:	4403      	add	r3, r0
 800d448:	881b      	ldrh	r3, [r3, #0]
 800d44a:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d44e:	b29b      	uxth	r3, r3
 800d450:	461a      	mov	r2, r3
 800d452:	8a7b      	ldrh	r3, [r7, #18]
 800d454:	4293      	cmp	r3, r2
 800d456:	d939      	bls.n	800d4cc <getNextNode+0x8a0>
                {
                    printf("北西へ\r\n");
 800d458:	4808      	ldr	r0, [pc, #32]	; (800d47c <getNextNode+0x850>)
 800d45a:	f00b fb87 	bl	8018b6c <puts>
                    compare_weight = maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	791b      	ldrb	r3, [r3, #4]
 800d462:	1e59      	subs	r1, r3, #1
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	795b      	ldrb	r3, [r3, #5]
 800d468:	3301      	adds	r3, #1
 800d46a:	e009      	b.n	800d480 <getNextNode+0x854>
 800d46c:	0801c340 	.word	0x0801c340
 800d470:	0801c354 	.word	0x0801c354
 800d474:	0801c35c 	.word	0x0801c35c
 800d478:	0801c310 	.word	0x0801c310
 800d47c:	0801c328 	.word	0x0801c328
 800d480:	68f8      	ldr	r0, [r7, #12]
 800d482:	461a      	mov	r2, r3
 800d484:	0052      	lsls	r2, r2, #1
 800d486:	441a      	add	r2, r3
 800d488:	0053      	lsls	r3, r2, #1
 800d48a:	461a      	mov	r2, r3
 800d48c:	460b      	mov	r3, r1
 800d48e:	011b      	lsls	r3, r3, #4
 800d490:	1a5b      	subs	r3, r3, r1
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	4413      	add	r3, r2
 800d496:	4403      	add	r3, r0
 800d498:	881b      	ldrh	r3, [r3, #0]
 800d49a:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	827b      	strh	r3, [r7, #18]
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y+1]);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	791b      	ldrb	r3, [r3, #4]
 800d4a6:	1e59      	subs	r1, r3, #1
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	795b      	ldrb	r3, [r3, #5]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	0052      	lsls	r2, r2, #1
 800d4b2:	441a      	add	r2, r3
 800d4b4:	0053      	lsls	r3, r2, #1
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	011b      	lsls	r3, r3, #4
 800d4bc:	1a5b      	subs	r3, r3, r1
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	4413      	add	r3, r2
 800d4c2:	68fa      	ldr	r2, [r7, #12]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	617b      	str	r3, [r7, #20]
                    flag = true;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	747b      	strb	r3, [r7, #17]
                }
            }
        }

        //南へ側に斜めが2方向
        if(now_node->pos.y > 0)						//範囲チェック
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	795b      	ldrb	r3, [r3, #5]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f000 80c0 	beq.w	800d656 <getNextNode+0xa2a>
        {
            //南へ東へ
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	791b      	ldrb	r3, [r3, #4]
 800d4da:	4618      	mov	r0, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	795b      	ldrb	r3, [r3, #5]
 800d4e0:	68f9      	ldr	r1, [r7, #12]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	0052      	lsls	r2, r2, #1
 800d4e6:	441a      	add	r2, r3
 800d4e8:	0053      	lsls	r3, r2, #1
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	011b      	lsls	r3, r3, #4
 800d4f0:	1a1b      	subs	r3, r3, r0
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	4413      	add	r3, r2
 800d4f6:	440b      	add	r3, r1
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	461a      	mov	r2, r3
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	4013      	ands	r3, r2
 800d506:	2b00      	cmp	r3, #0
 800d508:	d145      	bne.n	800d596 <getNextNode+0x96a>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	791b      	ldrb	r3, [r3, #4]
 800d50e:	4618      	mov	r0, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	795b      	ldrb	r3, [r3, #5]
 800d514:	68f9      	ldr	r1, [r7, #12]
 800d516:	461a      	mov	r2, r3
 800d518:	0052      	lsls	r2, r2, #1
 800d51a:	441a      	add	r2, r3
 800d51c:	0053      	lsls	r3, r2, #1
 800d51e:	461a      	mov	r2, r3
 800d520:	4603      	mov	r3, r0
 800d522:	011b      	lsls	r3, r3, #4
 800d524:	1a1b      	subs	r3, r3, r0
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	4413      	add	r3, r2
 800d52a:	440b      	add	r3, r1
 800d52c:	881b      	ldrh	r3, [r3, #0]
 800d52e:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d532:	b29b      	uxth	r3, r3
 800d534:	461a      	mov	r2, r3
 800d536:	8a7b      	ldrh	r3, [r7, #18]
 800d538:	4293      	cmp	r3, r2
 800d53a:	d92c      	bls.n	800d596 <getNextNode+0x96a>
                {
                    printf("南東へ\r\n");
 800d53c:	4852      	ldr	r0, [pc, #328]	; (800d688 <getNextNode+0xa5c>)
 800d53e:	f00b fb15 	bl	8018b6c <puts>
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y].weight;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	791b      	ldrb	r3, [r3, #4]
 800d546:	4618      	mov	r0, r3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	795b      	ldrb	r3, [r3, #5]
 800d54c:	68f9      	ldr	r1, [r7, #12]
 800d54e:	461a      	mov	r2, r3
 800d550:	0052      	lsls	r2, r2, #1
 800d552:	441a      	add	r2, r3
 800d554:	0053      	lsls	r3, r2, #1
 800d556:	461a      	mov	r2, r3
 800d558:	4603      	mov	r3, r0
 800d55a:	011b      	lsls	r3, r3, #4
 800d55c:	1a1b      	subs	r3, r3, r0
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	4413      	add	r3, r2
 800d562:	440b      	add	r3, r1
 800d564:	881b      	ldrh	r3, [r3, #0]
 800d566:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	827b      	strh	r3, [r7, #18]
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y]);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	791b      	ldrb	r3, [r3, #4]
 800d572:	4619      	mov	r1, r3
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	795b      	ldrb	r3, [r3, #5]
 800d578:	461a      	mov	r2, r3
 800d57a:	0052      	lsls	r2, r2, #1
 800d57c:	441a      	add	r2, r3
 800d57e:	0053      	lsls	r3, r2, #1
 800d580:	461a      	mov	r2, r3
 800d582:	460b      	mov	r3, r1
 800d584:	011b      	lsls	r3, r3, #4
 800d586:	1a5b      	subs	r3, r3, r1
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	4413      	add	r3, r2
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	4413      	add	r3, r2
 800d590:	617b      	str	r3, [r7, #20]
                    flag = true;
 800d592:	2301      	movs	r3, #1
 800d594:	747b      	strb	r3, [r7, #17]
                }
            }
            //南へ西へ
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	791b      	ldrb	r3, [r3, #4]
 800d59a:	1e59      	subs	r1, r3, #1
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	795b      	ldrb	r3, [r3, #5]
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	0052      	lsls	r2, r2, #1
 800d5a6:	441a      	add	r2, r3
 800d5a8:	0053      	lsls	r3, r2, #1
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	011b      	lsls	r3, r3, #4
 800d5b0:	1a5b      	subs	r3, r3, r1
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	4413      	add	r3, r2
 800d5b6:	4403      	add	r3, r0
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	4013      	ands	r3, r2
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d145      	bne.n	800d656 <getNextNode+0xa2a>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	791b      	ldrb	r3, [r3, #4]
 800d5ce:	1e59      	subs	r1, r3, #1
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	795b      	ldrb	r3, [r3, #5]
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	0052      	lsls	r2, r2, #1
 800d5da:	441a      	add	r2, r3
 800d5dc:	0053      	lsls	r3, r2, #1
 800d5de:	461a      	mov	r2, r3
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	011b      	lsls	r3, r3, #4
 800d5e4:	1a5b      	subs	r3, r3, r1
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	4413      	add	r3, r2
 800d5ea:	4403      	add	r3, r0
 800d5ec:	881b      	ldrh	r3, [r3, #0]
 800d5ee:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	8a7b      	ldrh	r3, [r7, #18]
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d92c      	bls.n	800d656 <getNextNode+0xa2a>
                {
                    printf("南西へ\r\n");
 800d5fc:	4823      	ldr	r0, [pc, #140]	; (800d68c <getNextNode+0xa60>)
 800d5fe:	f00b fab5 	bl	8018b6c <puts>
                    compare_weight = maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	791b      	ldrb	r3, [r3, #4]
 800d606:	1e59      	subs	r1, r3, #1
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	795b      	ldrb	r3, [r3, #5]
 800d60c:	68f8      	ldr	r0, [r7, #12]
 800d60e:	461a      	mov	r2, r3
 800d610:	0052      	lsls	r2, r2, #1
 800d612:	441a      	add	r2, r3
 800d614:	0053      	lsls	r3, r2, #1
 800d616:	461a      	mov	r2, r3
 800d618:	460b      	mov	r3, r1
 800d61a:	011b      	lsls	r3, r3, #4
 800d61c:	1a5b      	subs	r3, r3, r1
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	4413      	add	r3, r2
 800d622:	4403      	add	r3, r0
 800d624:	881b      	ldrh	r3, [r3, #0]
 800d626:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	827b      	strh	r3, [r7, #18]
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y]);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	791b      	ldrb	r3, [r3, #4]
 800d632:	1e59      	subs	r1, r3, #1
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	795b      	ldrb	r3, [r3, #5]
 800d638:	461a      	mov	r2, r3
 800d63a:	0052      	lsls	r2, r2, #1
 800d63c:	441a      	add	r2, r3
 800d63e:	0053      	lsls	r3, r2, #1
 800d640:	461a      	mov	r2, r3
 800d642:	460b      	mov	r3, r1
 800d644:	011b      	lsls	r3, r3, #4
 800d646:	1a5b      	subs	r3, r3, r1
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	4413      	add	r3, r2
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	4413      	add	r3, r2
 800d650:	617b      	str	r3, [r7, #20]
                    flag = true;
 800d652:	2301      	movs	r3, #1
 800d654:	747b      	strb	r3, [r7, #17]
            }
        }
    }
    //next_node = now_node;
    //printf("ノード更新無し\r\n\r\n");
    if(flag == true)
 800d656:	7c7b      	ldrb	r3, [r7, #17]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d005      	beq.n	800d668 <getNextNode+0xa3c>
    {
        printf("ノード更新有り:%p\r\n", next_node);
 800d65c:	6979      	ldr	r1, [r7, #20]
 800d65e:	480c      	ldr	r0, [pc, #48]	; (800d690 <getNextNode+0xa64>)
 800d660:	f00b f9fc 	bl	8018a5c <iprintf>
        return next_node; 
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	e00a      	b.n	800d67e <getNextNode+0xa52>
    }
    if(flag == false)
 800d668:	7c7b      	ldrb	r3, [r7, #17]
 800d66a:	f083 0301 	eor.w	r3, r3, #1
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	2b00      	cmp	r3, #0
 800d672:	d004      	beq.n	800d67e <getNextNode+0xa52>
    {
        printf("ノード更新無し\r\n\r\n");
 800d674:	4807      	ldr	r0, [pc, #28]	; (800d694 <getNextNode+0xa68>)
 800d676:	f00b fa79 	bl	8018b6c <puts>
        return now_node;//万が一更新されなかったら、今いるノードが目標ノードなので、停止するはず。
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	e7ff      	b.n	800d67e <getNextNode+0xa52>
    }
        
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3718      	adds	r7, #24
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	0801c31c 	.word	0x0801c31c
 800d68c:	0801c334 	.word	0x0801c334
 800d690:	0801c364 	.word	0x0801c364
 800d694:	0801c380 	.word	0x0801c380

0800d698 <getNextState>:
//自分の状態から次の状態を得る
state *getNextState(state *now_state, state *next_state, node *next_node)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b086      	sub	sp, #24
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
    //state *next_state;
    //差分を見て、次の状態を定義
    //状態の種類に応じて後で追加:探索時と最短時、既知区間走行でうまく変える
    //ノードと方角と座標を使って、次の方角と座標を得る
    
    uint8_t now_x = now_state->node->pos.x;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	791b      	ldrb	r3, [r3, #4]
 800d6aa:	75fb      	strb	r3, [r7, #23]
    uint8_t now_y = now_state->node->pos.y;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	795b      	ldrb	r3, [r3, #5]
 800d6b2:	75bb      	strb	r3, [r7, #22]
    uint8_t next_x = next_node->pos.x; 
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	791b      	ldrb	r3, [r3, #4]
 800d6b8:	757b      	strb	r3, [r7, #21]
    uint8_t next_y = next_node->pos.y;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	795b      	ldrb	r3, [r3, #5]
 800d6be:	753b      	strb	r3, [r7, #20]
    
    switch(now_state->car)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	789b      	ldrb	r3, [r3, #2]
 800d6c4:	2b06      	cmp	r3, #6
 800d6c6:	f200 829e 	bhi.w	800dc06 <getNextState+0x56e>
 800d6ca:	a201      	add	r2, pc, #4	; (adr r2, 800d6d0 <getNextState+0x38>)
 800d6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d0:	0800d6ed 	.word	0x0800d6ed
 800d6d4:	0800dc07 	.word	0x0800dc07
 800d6d8:	0800d835 	.word	0x0800d835
 800d6dc:	0800dc07 	.word	0x0800dc07
 800d6e0:	0800d97d 	.word	0x0800d97d
 800d6e4:	0800dc07 	.word	0x0800dc07
 800d6e8:	0800dac5 	.word	0x0800dac5
    {
        case north://行から、列に行くのか行に行くのかで、差分の取り方を変える
            if(next_node->rc == 0)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	78db      	ldrb	r3, [r3, #3]
 800d6f0:	f083 0301 	eor.w	r3, r3, #1
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d02d      	beq.n	800d756 <getNextState+0xbe>
                //行から行
                //直進かUターンのどちらか。とりあえず1方向
                //隣接するノードしか見ていない
                //直進
                //北向きから北向き
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800d6fa:	7dfa      	ldrb	r2, [r7, #23]
 800d6fc:	7d7b      	ldrb	r3, [r7, #21]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d112      	bne.n	800d728 <getNextState+0x90>
 800d702:	7dbb      	ldrb	r3, [r7, #22]
 800d704:	1c5a      	adds	r2, r3, #1
 800d706:	7d3b      	ldrb	r3, [r7, #20]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d10d      	bne.n	800d728 <getNextState+0x90>
                {
                    next_state->car = north;
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	2200      	movs	r2, #0
 800d710:	709a      	strb	r2, [r3, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	785b      	ldrb	r3, [r3, #1]
 800d716:	3301      	adds	r3, #1
 800d718:	b2da      	uxtb	r2, r3
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	705a      	strb	r2, [r3, #1]
                    next_state->dir = front;
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	2200      	movs	r2, #0
 800d722:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	e27b      	b.n	800dc20 <getNextState+0x588>
                }
                //後ろ
                //北向きから南向き
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800d728:	7dfa      	ldrb	r2, [r7, #23]
 800d72a:	7d7b      	ldrb	r3, [r7, #21]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d112      	bne.n	800d756 <getNextState+0xbe>
 800d730:	7dbb      	ldrb	r3, [r7, #22]
 800d732:	1e5a      	subs	r2, r3, #1
 800d734:	7d3b      	ldrb	r3, [r7, #20]
 800d736:	429a      	cmp	r2, r3
 800d738:	d10d      	bne.n	800d756 <getNextState+0xbe>
                {
                    next_state->car = south;
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	2204      	movs	r2, #4
 800d73e:	709a      	strb	r2, [r3, #2]
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	785b      	ldrb	r3, [r3, #1]
 800d744:	3b02      	subs	r3, #2
 800d746:	b2da      	uxtb	r2, r3
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	705a      	strb	r2, [r3, #1]
                    next_state->dir = back;
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	2203      	movs	r2, #3
 800d750:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	e264      	b.n	800dc20 <getNextState+0x588>
                }
                
            }


            if(next_node->rc == 1)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	78db      	ldrb	r3, [r3, #3]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	f000 8255 	beq.w	800dc0a <getNextState+0x572>
            {
                //行から列.左右のどちらか判断.あとで後ろも候補にあげる
                //右旋回
                //北向きから北東
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800d760:	7dfb      	ldrb	r3, [r7, #23]
 800d762:	1c5a      	adds	r2, r3, #1
 800d764:	7d7b      	ldrb	r3, [r7, #21]
 800d766:	429a      	cmp	r2, r3
 800d768:	d111      	bne.n	800d78e <getNextState+0xf6>
 800d76a:	7dba      	ldrb	r2, [r7, #22]
 800d76c:	7d3b      	ldrb	r3, [r7, #20]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d10d      	bne.n	800d78e <getNextState+0xf6>
                {
                    next_state->car = east;
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	2202      	movs	r2, #2
 800d776:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	3301      	adds	r3, #1
 800d77e:	b2da      	uxtb	r2, r3
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	701a      	strb	r2, [r3, #0]
                    next_state->dir = right;
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	2201      	movs	r2, #1
 800d788:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	e248      	b.n	800dc20 <getNextState+0x588>
                }

                //左旋回
                //北向きから北西
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800d78e:	7dfa      	ldrb	r2, [r7, #23]
 800d790:	7d7b      	ldrb	r3, [r7, #21]
 800d792:	429a      	cmp	r2, r3
 800d794:	d111      	bne.n	800d7ba <getNextState+0x122>
 800d796:	7dba      	ldrb	r2, [r7, #22]
 800d798:	7d3b      	ldrb	r3, [r7, #20]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d10d      	bne.n	800d7ba <getNextState+0x122>
                {
                    next_state->car = west;
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	2206      	movs	r2, #6
 800d7a2:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	3b01      	subs	r3, #1
 800d7aa:	b2da      	uxtb	r2, r3
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	701a      	strb	r2, [r3, #0]
                    next_state->dir = left;
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	2205      	movs	r2, #5
 800d7b4:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	e232      	b.n	800dc20 <getNextState+0x588>
                }

                //Uターンして右旋回
                //北向きから南西
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800d7ba:	7dfa      	ldrb	r2, [r7, #23]
 800d7bc:	7d7b      	ldrb	r3, [r7, #21]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d118      	bne.n	800d7f4 <getNextState+0x15c>
 800d7c2:	7dbb      	ldrb	r3, [r7, #22]
 800d7c4:	1e5a      	subs	r2, r3, #1
 800d7c6:	7d3b      	ldrb	r3, [r7, #20]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d113      	bne.n	800d7f4 <getNextState+0x15c>
                {
                    next_state->car = west;
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	2206      	movs	r2, #6
 800d7d0:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	b2da      	uxtb	r2, r3
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	701a      	strb	r2, [r3, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	785b      	ldrb	r3, [r3, #1]
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	b2da      	uxtb	r2, r3
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	705a      	strb	r2, [r3, #1]
                    next_state->dir = backright;
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	2202      	movs	r2, #2
 800d7ee:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	e215      	b.n	800dc20 <getNextState+0x588>
                }
                //Uターンして左旋回
                //北向きから南東
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800d7f4:	7dfb      	ldrb	r3, [r7, #23]
 800d7f6:	1c5a      	adds	r2, r3, #1
 800d7f8:	7d7b      	ldrb	r3, [r7, #21]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	f040 8205 	bne.w	800dc0a <getNextState+0x572>
 800d800:	7dbb      	ldrb	r3, [r7, #22]
 800d802:	1e5a      	subs	r2, r3, #1
 800d804:	7d3b      	ldrb	r3, [r7, #20]
 800d806:	429a      	cmp	r2, r3
 800d808:	f040 81ff 	bne.w	800dc0a <getNextState+0x572>
                {
                    next_state->car = east;
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	2202      	movs	r2, #2
 800d810:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	3301      	adds	r3, #1
 800d818:	b2da      	uxtb	r2, r3
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	701a      	strb	r2, [r3, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	785b      	ldrb	r3, [r3, #1]
 800d822:	3b01      	subs	r3, #1
 800d824:	b2da      	uxtb	r2, r3
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	705a      	strb	r2, [r3, #1]
                    next_state->dir = backleft;
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	2204      	movs	r2, #4
 800d82e:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	e1f5      	b.n	800dc20 <getNextState+0x588>
                }
            }
            break;

        case east:
            if(next_node->rc == 1)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	78db      	ldrb	r3, [r3, #3]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d02d      	beq.n	800d898 <getNextState+0x200>
                //列から列
                //直進かUターンのどちらか。とりあえず1方向
                //隣接するノードしか見ていない
                //直進
                //東向きから東向き
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800d83c:	7dfb      	ldrb	r3, [r7, #23]
 800d83e:	1c5a      	adds	r2, r3, #1
 800d840:	7d7b      	ldrb	r3, [r7, #21]
 800d842:	429a      	cmp	r2, r3
 800d844:	d111      	bne.n	800d86a <getNextState+0x1d2>
 800d846:	7dba      	ldrb	r2, [r7, #22]
 800d848:	7d3b      	ldrb	r3, [r7, #20]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d10d      	bne.n	800d86a <getNextState+0x1d2>
                {
                    next_state->car = east;
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	2202      	movs	r2, #2
 800d852:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	3301      	adds	r3, #1
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	701a      	strb	r2, [r3, #0]
                    next_state->dir = front;
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	2200      	movs	r2, #0
 800d864:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	e1da      	b.n	800dc20 <getNextState+0x588>
                }
                //後ろ
                //東向きから西向き
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800d86a:	7dfb      	ldrb	r3, [r7, #23]
 800d86c:	1e5a      	subs	r2, r3, #1
 800d86e:	7d7b      	ldrb	r3, [r7, #21]
 800d870:	429a      	cmp	r2, r3
 800d872:	d111      	bne.n	800d898 <getNextState+0x200>
 800d874:	7dba      	ldrb	r2, [r7, #22]
 800d876:	7d3b      	ldrb	r3, [r7, #20]
 800d878:	429a      	cmp	r2, r3
 800d87a:	d10d      	bne.n	800d898 <getNextState+0x200>
                {
                    next_state->car = west;
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	2206      	movs	r2, #6
 800d880:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	3b02      	subs	r3, #2
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	701a      	strb	r2, [r3, #0]
                    next_state->dir = back;
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	2203      	movs	r2, #3
 800d892:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	e1c3      	b.n	800dc20 <getNextState+0x588>
                }
                
            }


            if(next_node->rc == 0)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	78db      	ldrb	r3, [r3, #3]
 800d89c:	f083 0301 	eor.w	r3, r3, #1
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	f000 81b3 	beq.w	800dc0e <getNextState+0x576>
            {
                //列から行.左右のどちらか判断.あとで後ろも候補にあげる
                //右旋回
                //東向きから南東
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800d8a8:	7dfa      	ldrb	r2, [r7, #23]
 800d8aa:	7d7b      	ldrb	r3, [r7, #21]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d111      	bne.n	800d8d4 <getNextState+0x23c>
 800d8b0:	7dba      	ldrb	r2, [r7, #22]
 800d8b2:	7d3b      	ldrb	r3, [r7, #20]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d10d      	bne.n	800d8d4 <getNextState+0x23c>
                {
                    next_state->car = south;
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	2204      	movs	r2, #4
 800d8bc:	709a      	strb	r2, [r3, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	785b      	ldrb	r3, [r3, #1]
 800d8c2:	3b01      	subs	r3, #1
 800d8c4:	b2da      	uxtb	r2, r3
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	705a      	strb	r2, [r3, #1]
                    next_state->dir = right;
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	e1a5      	b.n	800dc20 <getNextState+0x588>
                }

                //左旋回
                //東向きから北東
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800d8d4:	7dfa      	ldrb	r2, [r7, #23]
 800d8d6:	7d7b      	ldrb	r3, [r7, #21]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d112      	bne.n	800d902 <getNextState+0x26a>
 800d8dc:	7dbb      	ldrb	r3, [r7, #22]
 800d8de:	1c5a      	adds	r2, r3, #1
 800d8e0:	7d3b      	ldrb	r3, [r7, #20]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d10d      	bne.n	800d902 <getNextState+0x26a>
                {
                    next_state->car = north;
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	709a      	strb	r2, [r3, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	785b      	ldrb	r3, [r3, #1]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	705a      	strb	r2, [r3, #1]
                    next_state->dir = left;
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	2205      	movs	r2, #5
 800d8fc:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	e18e      	b.n	800dc20 <getNextState+0x588>
                }
                //Uターンして右旋回
                //東向きから北西
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800d902:	7dfb      	ldrb	r3, [r7, #23]
 800d904:	1e5a      	subs	r2, r3, #1
 800d906:	7d7b      	ldrb	r3, [r7, #21]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d118      	bne.n	800d93e <getNextState+0x2a6>
 800d90c:	7dbb      	ldrb	r3, [r7, #22]
 800d90e:	1c5a      	adds	r2, r3, #1
 800d910:	7d3b      	ldrb	r3, [r7, #20]
 800d912:	429a      	cmp	r2, r3
 800d914:	d113      	bne.n	800d93e <getNextState+0x2a6>
                {
                    next_state->car = north;
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	2200      	movs	r2, #0
 800d91a:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	3b01      	subs	r3, #1
 800d922:	b2da      	uxtb	r2, r3
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	701a      	strb	r2, [r3, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	785b      	ldrb	r3, [r3, #1]
 800d92c:	3301      	adds	r3, #1
 800d92e:	b2da      	uxtb	r2, r3
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	705a      	strb	r2, [r3, #1]
                    next_state->dir = backright;
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	2202      	movs	r2, #2
 800d938:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	e170      	b.n	800dc20 <getNextState+0x588>
                }

                //Uターンして左旋回
                //東向きから南西
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800d93e:	7dfb      	ldrb	r3, [r7, #23]
 800d940:	1e5a      	subs	r2, r3, #1
 800d942:	7d7b      	ldrb	r3, [r7, #21]
 800d944:	429a      	cmp	r2, r3
 800d946:	f040 8162 	bne.w	800dc0e <getNextState+0x576>
 800d94a:	7dba      	ldrb	r2, [r7, #22]
 800d94c:	7d3b      	ldrb	r3, [r7, #20]
 800d94e:	429a      	cmp	r2, r3
 800d950:	f040 815d 	bne.w	800dc0e <getNextState+0x576>
                {
                    next_state->car = south;
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	2204      	movs	r2, #4
 800d958:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	3b01      	subs	r3, #1
 800d960:	b2da      	uxtb	r2, r3
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	701a      	strb	r2, [r3, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	785b      	ldrb	r3, [r3, #1]
 800d96a:	3b01      	subs	r3, #1
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	705a      	strb	r2, [r3, #1]
                    next_state->dir = backleft;
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	2204      	movs	r2, #4
 800d976:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	e151      	b.n	800dc20 <getNextState+0x588>
                }
            }
            break;
        case south:
            if(next_node->rc == 0)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	78db      	ldrb	r3, [r3, #3]
 800d980:	f083 0301 	eor.w	r3, r3, #1
 800d984:	b2db      	uxtb	r3, r3
 800d986:	2b00      	cmp	r3, #0
 800d988:	d02d      	beq.n	800d9e6 <getNextState+0x34e>
                //行から行
                //直進かUターンのどちらか。とりあえず1方向
                //隣接するノードしか見ていない
                //直進
                //南向きから南
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800d98a:	7dfa      	ldrb	r2, [r7, #23]
 800d98c:	7d7b      	ldrb	r3, [r7, #21]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d112      	bne.n	800d9b8 <getNextState+0x320>
 800d992:	7dbb      	ldrb	r3, [r7, #22]
 800d994:	1e5a      	subs	r2, r3, #1
 800d996:	7d3b      	ldrb	r3, [r7, #20]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d10d      	bne.n	800d9b8 <getNextState+0x320>
                {
                    next_state->car = south;
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	2204      	movs	r2, #4
 800d9a0:	709a      	strb	r2, [r3, #2]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	785b      	ldrb	r3, [r3, #1]
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	b2da      	uxtb	r2, r3
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	705a      	strb	r2, [r3, #1]
                    next_state->dir = front;
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	e133      	b.n	800dc20 <getNextState+0x588>
                }
                //Uターン
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800d9b8:	7dfa      	ldrb	r2, [r7, #23]
 800d9ba:	7d7b      	ldrb	r3, [r7, #21]
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d112      	bne.n	800d9e6 <getNextState+0x34e>
 800d9c0:	7dbb      	ldrb	r3, [r7, #22]
 800d9c2:	1c5a      	adds	r2, r3, #1
 800d9c4:	7d3b      	ldrb	r3, [r7, #20]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d10d      	bne.n	800d9e6 <getNextState+0x34e>
                {
                    next_state->car = north;
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	709a      	strb	r2, [r3, #2]
                    next_state->pos.y = now_state->pos.y + 2;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	785b      	ldrb	r3, [r3, #1]
 800d9d4:	3302      	adds	r3, #2
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	705a      	strb	r2, [r3, #1]
                    next_state->dir = back;
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	2203      	movs	r2, #3
 800d9e0:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	e11c      	b.n	800dc20 <getNextState+0x588>
                }
                
            }

            if(next_node->rc == 1)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	78db      	ldrb	r3, [r3, #3]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	f000 8111 	beq.w	800dc12 <getNextState+0x57a>
            {
                //行から列.左右のどちらか判断.あとで後ろも候補にあげる
                //右旋回
                //南向きから南西
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800d9f0:	7dfa      	ldrb	r2, [r7, #23]
 800d9f2:	7d7b      	ldrb	r3, [r7, #21]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d112      	bne.n	800da1e <getNextState+0x386>
 800d9f8:	7dbb      	ldrb	r3, [r7, #22]
 800d9fa:	1e5a      	subs	r2, r3, #1
 800d9fc:	7d3b      	ldrb	r3, [r7, #20]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d10d      	bne.n	800da1e <getNextState+0x386>
                {
                    next_state->car = west;
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	2206      	movs	r2, #6
 800da06:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	3b01      	subs	r3, #1
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	701a      	strb	r2, [r3, #0]
                    next_state->dir = right;
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	2201      	movs	r2, #1
 800da18:	70da      	strb	r2, [r3, #3]
                    //printf("南向きから南西:%u, %u\r\n",next_state->pos.y, now_state->pos.x);
                    return next_state;
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	e100      	b.n	800dc20 <getNextState+0x588>
                }
                //左旋回
                //南向きから南東
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800da1e:	7dfb      	ldrb	r3, [r7, #23]
 800da20:	1c5a      	adds	r2, r3, #1
 800da22:	7d7b      	ldrb	r3, [r7, #21]
 800da24:	429a      	cmp	r2, r3
 800da26:	d112      	bne.n	800da4e <getNextState+0x3b6>
 800da28:	7dbb      	ldrb	r3, [r7, #22]
 800da2a:	1e5a      	subs	r2, r3, #1
 800da2c:	7d3b      	ldrb	r3, [r7, #20]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d10d      	bne.n	800da4e <getNextState+0x3b6>
                {
                    next_state->car = east;
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	2202      	movs	r2, #2
 800da36:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	3301      	adds	r3, #1
 800da3e:	b2da      	uxtb	r2, r3
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	701a      	strb	r2, [r3, #0]
                    next_state->dir = left;
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	2205      	movs	r2, #5
 800da48:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	e0e8      	b.n	800dc20 <getNextState+0x588>
                }
                
                //Uターンして直進して右旋回
                //南向きから北東
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800da4e:	7dfb      	ldrb	r3, [r7, #23]
 800da50:	1c5a      	adds	r2, r3, #1
 800da52:	7d7b      	ldrb	r3, [r7, #21]
 800da54:	429a      	cmp	r2, r3
 800da56:	d117      	bne.n	800da88 <getNextState+0x3f0>
 800da58:	7dba      	ldrb	r2, [r7, #22]
 800da5a:	7d3b      	ldrb	r3, [r7, #20]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d113      	bne.n	800da88 <getNextState+0x3f0>
                {
                    next_state->car = east;
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	2202      	movs	r2, #2
 800da64:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	3301      	adds	r3, #1
 800da6c:	b2da      	uxtb	r2, r3
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	701a      	strb	r2, [r3, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	785b      	ldrb	r3, [r3, #1]
 800da76:	3301      	adds	r3, #1
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	705a      	strb	r2, [r3, #1]
                    next_state->dir = backright;
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	2202      	movs	r2, #2
 800da82:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	e0cb      	b.n	800dc20 <getNextState+0x588>
                }
                //Uターンして直進して左旋回
                //南向きから北西
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800da88:	7dfa      	ldrb	r2, [r7, #23]
 800da8a:	7d7b      	ldrb	r3, [r7, #21]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	f040 80c0 	bne.w	800dc12 <getNextState+0x57a>
 800da92:	7dba      	ldrb	r2, [r7, #22]
 800da94:	7d3b      	ldrb	r3, [r7, #20]
 800da96:	429a      	cmp	r2, r3
 800da98:	f040 80bb 	bne.w	800dc12 <getNextState+0x57a>
                {
                    next_state->car = west;
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	2206      	movs	r2, #6
 800daa0:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	3b01      	subs	r3, #1
 800daa8:	b2da      	uxtb	r2, r3
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	701a      	strb	r2, [r3, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	785b      	ldrb	r3, [r3, #1]
 800dab2:	3301      	adds	r3, #1
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	705a      	strb	r2, [r3, #1]
                    next_state->dir = backleft;
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	2204      	movs	r2, #4
 800dabe:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	e0ad      	b.n	800dc20 <getNextState+0x588>
                }
            }
            break;
        case west:
            if(next_node->rc == 1)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	78db      	ldrb	r3, [r3, #3]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d02d      	beq.n	800db28 <getNextState+0x490>
                //列から列
                //直進かUターンのどちらか。とりあえず1方向
                //隣接するノードしか見ていない
                //直進
                //西向きから西向き
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800dacc:	7dfb      	ldrb	r3, [r7, #23]
 800dace:	1e5a      	subs	r2, r3, #1
 800dad0:	7d7b      	ldrb	r3, [r7, #21]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d111      	bne.n	800dafa <getNextState+0x462>
 800dad6:	7dba      	ldrb	r2, [r7, #22]
 800dad8:	7d3b      	ldrb	r3, [r7, #20]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d10d      	bne.n	800dafa <getNextState+0x462>
                {
                    next_state->car = west;
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	2206      	movs	r2, #6
 800dae2:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	3b01      	subs	r3, #1
 800daea:	b2da      	uxtb	r2, r3
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	701a      	strb	r2, [r3, #0]
                    next_state->dir = front;
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	2200      	movs	r2, #0
 800daf4:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	e092      	b.n	800dc20 <getNextState+0x588>
                }
                //Uターンして直進
                //西向きから東向き
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800dafa:	7dfb      	ldrb	r3, [r7, #23]
 800dafc:	1c5a      	adds	r2, r3, #1
 800dafe:	7d7b      	ldrb	r3, [r7, #21]
 800db00:	429a      	cmp	r2, r3
 800db02:	d111      	bne.n	800db28 <getNextState+0x490>
 800db04:	7dba      	ldrb	r2, [r7, #22]
 800db06:	7d3b      	ldrb	r3, [r7, #20]
 800db08:	429a      	cmp	r2, r3
 800db0a:	d10d      	bne.n	800db28 <getNextState+0x490>
                {
                    next_state->car = east;
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	2202      	movs	r2, #2
 800db10:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x + 2;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	3302      	adds	r3, #2
 800db18:	b2da      	uxtb	r2, r3
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	701a      	strb	r2, [r3, #0]
                    next_state->dir = back;
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	2203      	movs	r2, #3
 800db22:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	e07b      	b.n	800dc20 <getNextState+0x588>
                }
                
            }


            if(next_node->rc == 0)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	78db      	ldrb	r3, [r3, #3]
 800db2c:	f083 0301 	eor.w	r3, r3, #1
 800db30:	b2db      	uxtb	r3, r3
 800db32:	2b00      	cmp	r3, #0
 800db34:	d06f      	beq.n	800dc16 <getNextState+0x57e>
            {
                //列から行.左右のどちらか判断.あとで後ろも候補にあげる
                //右旋回
                //西向きから北西
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800db36:	7dfb      	ldrb	r3, [r7, #23]
 800db38:	1e5a      	subs	r2, r3, #1
 800db3a:	7d7b      	ldrb	r3, [r7, #21]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d112      	bne.n	800db66 <getNextState+0x4ce>
 800db40:	7dbb      	ldrb	r3, [r7, #22]
 800db42:	1c5a      	adds	r2, r3, #1
 800db44:	7d3b      	ldrb	r3, [r7, #20]
 800db46:	429a      	cmp	r2, r3
 800db48:	d10d      	bne.n	800db66 <getNextState+0x4ce>
                {
                    next_state->car = north;
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	2200      	movs	r2, #0
 800db4e:	709a      	strb	r2, [r3, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	785b      	ldrb	r3, [r3, #1]
 800db54:	3301      	adds	r3, #1
 800db56:	b2da      	uxtb	r2, r3
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	705a      	strb	r2, [r3, #1]
                    next_state->dir = right;
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	2201      	movs	r2, #1
 800db60:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	e05c      	b.n	800dc20 <getNextState+0x588>
                }

                //左旋回
                //西向きから南西
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800db66:	7dfb      	ldrb	r3, [r7, #23]
 800db68:	1e5a      	subs	r2, r3, #1
 800db6a:	7d7b      	ldrb	r3, [r7, #21]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d111      	bne.n	800db94 <getNextState+0x4fc>
 800db70:	7dba      	ldrb	r2, [r7, #22]
 800db72:	7d3b      	ldrb	r3, [r7, #20]
 800db74:	429a      	cmp	r2, r3
 800db76:	d10d      	bne.n	800db94 <getNextState+0x4fc>
                {
                    next_state->car = south;
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	2204      	movs	r2, #4
 800db7c:	709a      	strb	r2, [r3, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	785b      	ldrb	r3, [r3, #1]
 800db82:	3b01      	subs	r3, #1
 800db84:	b2da      	uxtb	r2, r3
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	705a      	strb	r2, [r3, #1]
                    next_state->dir = left;
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	2205      	movs	r2, #5
 800db8e:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	e045      	b.n	800dc20 <getNextState+0x588>
                }
                
                //Uターンして右旋回
                //西向きから南東
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800db94:	7dfa      	ldrb	r2, [r7, #23]
 800db96:	7d7b      	ldrb	r3, [r7, #21]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d117      	bne.n	800dbcc <getNextState+0x534>
 800db9c:	7dba      	ldrb	r2, [r7, #22]
 800db9e:	7d3b      	ldrb	r3, [r7, #20]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d113      	bne.n	800dbcc <getNextState+0x534>
                {
                    next_state->car = south;
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	2204      	movs	r2, #4
 800dba8:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	701a      	strb	r2, [r3, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	785b      	ldrb	r3, [r3, #1]
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	705a      	strb	r2, [r3, #1]
                    next_state->dir = backright;
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	2202      	movs	r2, #2
 800dbc6:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	e029      	b.n	800dc20 <getNextState+0x588>
                }
                //Uターンして左旋回
                //西向きから北東
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800dbcc:	7dfa      	ldrb	r2, [r7, #23]
 800dbce:	7d7b      	ldrb	r3, [r7, #21]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d120      	bne.n	800dc16 <getNextState+0x57e>
 800dbd4:	7dbb      	ldrb	r3, [r7, #22]
 800dbd6:	1c5a      	adds	r2, r3, #1
 800dbd8:	7d3b      	ldrb	r3, [r7, #20]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d11b      	bne.n	800dc16 <getNextState+0x57e>
                {
                    next_state->car = north;
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	709a      	strb	r2, [r3, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	701a      	strb	r2, [r3, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	785b      	ldrb	r3, [r3, #1]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	705a      	strb	r2, [r3, #1]
                    next_state->dir = backleft;
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	2204      	movs	r2, #4
 800dc00:	70da      	strb	r2, [r3, #3]
                    return next_state;
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	e00c      	b.n	800dc20 <getNextState+0x588>
                }
            }
            break;
        default:
            break;
 800dc06:	bf00      	nop
 800dc08:	e006      	b.n	800dc18 <getNextState+0x580>
            break;
 800dc0a:	bf00      	nop
 800dc0c:	e004      	b.n	800dc18 <getNextState+0x580>
            break;
 800dc0e:	bf00      	nop
 800dc10:	e002      	b.n	800dc18 <getNextState+0x580>
            break;
 800dc12:	bf00      	nop
 800dc14:	e000      	b.n	800dc18 <getNextState+0x580>
            break;
 800dc16:	bf00      	nop
    }
    printf("エラー in function 'getNextState'.\r\n");
 800dc18:	4803      	ldr	r0, [pc, #12]	; (800dc28 <getNextState+0x590>)
 800dc1a:	f00a ffa7 	bl	8018b6c <puts>
    return next_state; //ここまで来てしまったらエラー
 800dc1e:	68bb      	ldr	r3, [r7, #8]
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3718      	adds	r7, #24
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	0801c39c 	.word	0x0801c39c

0800dc2c <setPosition>:
        printf("方角ミス\r\n");
        break;
    }
}
void setPosition(position *pos,uint8_t x, uint8_t y)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	460b      	mov	r3, r1
 800dc36:	70fb      	strb	r3, [r7, #3]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	70bb      	strb	r3, [r7, #2]
    pos->x = x;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	78fa      	ldrb	r2, [r7, #3]
 800dc40:	701a      	strb	r2, [r3, #0]
    pos->y = y;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	78ba      	ldrb	r2, [r7, #2]
 800dc46:	705a      	strb	r2, [r3, #1]
}
 800dc48:	bf00      	nop
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <setGoal>:
// void setTargetPosition()
// {

// }
void setGoal(profile *prof, uint8_t x, uint8_t y)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	70fb      	strb	r3, [r7, #3]
 800dc60:	4613      	mov	r3, r2
 800dc62:	70bb      	strb	r3, [r7, #2]
    //左下の座標と、ゴールサイズから、右上を求める
    setPosition( &(prof->goal_lesser) , x, y );
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	78ba      	ldrb	r2, [r7, #2]
 800dc68:	78f9      	ldrb	r1, [r7, #3]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7ff ffde 	bl	800dc2c <setPosition>
    setPosition( &(prof->goal_larger), x + GOAL_SIZE_X-1, y + GOAL_SIZE_Y-1 );
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	1c98      	adds	r0, r3, #2
 800dc74:	78fb      	ldrb	r3, [r7, #3]
 800dc76:	3301      	adds	r3, #1
 800dc78:	b2d9      	uxtb	r1, r3
 800dc7a:	78bb      	ldrb	r3, [r7, #2]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	461a      	mov	r2, r3
 800dc82:	f7ff ffd3 	bl	800dc2c <setPosition>
}
 800dc86:	bf00      	nop
 800dc88:	3708      	adds	r7, #8
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}

0800dc8e <setCardinal>:
void setCardinal(state *st, cardinal car)
{
 800dc8e:	b480      	push	{r7}
 800dc90:	b083      	sub	sp, #12
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
 800dc96:	460b      	mov	r3, r1
 800dc98:	70fb      	strb	r3, [r7, #3]
    st->car = car;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	78fa      	ldrb	r2, [r7, #3]
 800dc9e:	709a      	strb	r2, [r3, #2]
}
 800dca0:	bf00      	nop
 800dca2:	370c      	adds	r7, #12
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr

0800dcac <setWallExistence>:

//斜め方角で壁情報どうするか.壁情報では斜め使わない.向きだけ
void setWallExistence(wall_existence *existence, wall_state *state)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
    //単体で書き込めるモジュールは逆に面倒
    //自分の方角に合わせて書き込み先を変えるのは別のところで。
    existence->north = state[0];
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	f003 0303 	and.w	r3, r3, #3
 800dcbe:	b2d9      	uxtb	r1, r3
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	7813      	ldrb	r3, [r2, #0]
 800dcc4:	f361 0301 	bfi	r3, r1, #0, #2
 800dcc8:	7013      	strb	r3, [r2, #0]
    existence->east = state[1];
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	3301      	adds	r3, #1
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	f003 0303 	and.w	r3, r3, #3
 800dcd4:	b2d9      	uxtb	r1, r3
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	7813      	ldrb	r3, [r2, #0]
 800dcda:	f361 0383 	bfi	r3, r1, #2, #2
 800dcde:	7013      	strb	r3, [r2, #0]
    existence->south = state[2];
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	3302      	adds	r3, #2
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	f003 0303 	and.w	r3, r3, #3
 800dcea:	b2d9      	uxtb	r1, r3
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	7813      	ldrb	r3, [r2, #0]
 800dcf0:	f361 1305 	bfi	r3, r1, #4, #2
 800dcf4:	7013      	strb	r3, [r2, #0]
    existence->west = state[3];
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	3303      	adds	r3, #3
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	f003 0303 	and.w	r3, r3, #3
 800dd00:	b2d9      	uxtb	r1, r3
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	7813      	ldrb	r3, [r2, #0]
 800dd06:	f361 1387 	bfi	r3, r1, #6, #2
 800dd0a:	7013      	strb	r3, [r2, #0]
}
 800dd0c:	bf00      	nop
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr

0800dd18 <initProfile>:
        // log_st[n].wall.west = WALL;
    }
    printf("い\r\n");
}
void initProfile(profile *prof, maze_node *maze)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
    setGoal(prof, GOAL_X, GOAL_Y);
 800dd22:	2207      	movs	r2, #7
 800dd24:	2107      	movs	r1, #7
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7ff ff94 	bl	800dc54 <setGoal>

    setPosition(&(prof->now.pos), 0, 0);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	3308      	adds	r3, #8
 800dd30:	2200      	movs	r2, #0
 800dd32:	2100      	movs	r1, #0
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7ff ff79 	bl	800dc2c <setPosition>
    setCardinal(&(prof->now), north);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	3308      	adds	r3, #8
 800dd3e:	2100      	movs	r1, #0
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7ff ffa4 	bl	800dc8e <setCardinal>

    setPosition(&(prof->next.pos), 0, 1);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	3314      	adds	r3, #20
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	2100      	movs	r1, #0
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7ff ff6c 	bl	800dc2c <setPosition>
    setCardinal(&(prof->next), north);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	3314      	adds	r3, #20
 800dd58:	2100      	movs	r1, #0
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7ff ff97 	bl	800dc8e <setCardinal>

    //壁のセット
    wall_state w_st[4]={
 800dd60:	4b10      	ldr	r3, [pc, #64]	; (800dda4 <initProfile+0x8c>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	60fb      	str	r3, [r7, #12]
        NOWALL,
        WALL,
        WALL,
        WALL
    },
    next[4]={
 800dd66:	4b10      	ldr	r3, [pc, #64]	; (800dda8 <initProfile+0x90>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	60bb      	str	r3, [r7, #8]
        UNKNOWN,
        UNKNOWN,
        NOWALL,
        WALL
    };
    setWallExistence(&(prof->now.wall), &w_st[0]);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	330c      	adds	r3, #12
 800dd70:	f107 020c 	add.w	r2, r7, #12
 800dd74:	4611      	mov	r1, r2
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7ff ff98 	bl	800dcac <setWallExistence>
    setWallExistence(&(prof->next.wall), &next[0]);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	3318      	adds	r3, #24
 800dd80:	f107 0208 	add.w	r2, r7, #8
 800dd84:	4611      	mov	r1, r2
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7ff ff90 	bl	800dcac <setWallExistence>

    prof->now.node = &(maze->RawNode[0][0]);
 800dd8c:	683a      	ldr	r2, [r7, #0]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	611a      	str	r2, [r3, #16]
    prof->next.node = &(maze->RawNode[0][1]);
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	1d9a      	adds	r2, r3, #6
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	61da      	str	r2, [r3, #28]
    // prof->now.node->rc = 0;
    // prof->now.node->pos.x = 0;
    // prof->now.node->pos.y = 0;
}
 800dd9a:	bf00      	nop
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	0801c3e4 	.word	0x0801c3e4
 800dda8:	0801c3e8 	.word	0x0801c3e8

0800ddac <shiftState>:
void shiftState(profile *prof)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
    prof->now.car = prof->next.car;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	7d9a      	ldrb	r2, [r3, #22]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	729a      	strb	r2, [r3, #10]
    prof->now.pos.x = prof->next.pos.x;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	7d1a      	ldrb	r2, [r3, #20]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	721a      	strb	r2, [r3, #8]
    prof->now.pos.y = prof->next.pos.y;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	7d5a      	ldrb	r2, [r3, #21]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	725a      	strb	r2, [r3, #9]
    prof->now.node = prof->next.node;//ポインタ渡し
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	69da      	ldr	r2, [r3, #28]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	611a      	str	r2, [r3, #16]
}
 800ddd4:	bf00      	nop
 800ddd6:	370c      	adds	r7, #12
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <InitExplore>:

	//ハード処理

}
void InitExplore()
{
 800dde0:	b590      	push	{r4, r7, lr}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800dde6:	2100      	movs	r1, #0
 800dde8:	2004      	movs	r0, #4
 800ddea:	f003 fdc1 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800ddee:	2100      	movs	r1, #0
 800ddf0:	2005      	movs	r0, #5
 800ddf2:	f003 fdbd 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	2002      	movs	r0, #2
 800ddfa:	f003 fdb9 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800ddfe:	2100      	movs	r1, #0
 800de00:	2003      	movs	r0, #3
 800de02:	f003 fdb5 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800de06:	2100      	movs	r1, #0
 800de08:	2001      	movs	r0, #1
 800de0a:	f003 fdb1 	bl	8011970 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800de0e:	2100      	movs	r1, #0
 800de10:	2000      	movs	r0, #0
 800de12:	f003 fdad 	bl	8011970 <PIDChangeFlag>


	Load_Gain();
 800de16:	f003 faef 	bl	80113f8 <Load_Gain>
	uint8_t imu_check;
	imu_check = IMU_init();
 800de1a:	f002 ff39 	bl	8010c90 <IMU_init>
 800de1e:	4603      	mov	r3, r0
 800de20:	71fb      	strb	r3, [r7, #7]
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800de22:	79fb      	ldrb	r3, [r7, #7]
 800de24:	4619      	mov	r1, r3
 800de26:	4840      	ldr	r0, [pc, #256]	; (800df28 <InitExplore+0x148>)
 800de28:	f00a fe18 	bl	8018a5c <iprintf>
#if 1 //IMUから値が来なくなる現象の対策
	imu_check =IMU_init();
 800de2c:	f002 ff30 	bl	8010c90 <IMU_init>
 800de30:	4603      	mov	r3, r0
 800de32:	71fb      	strb	r3, [r7, #7]
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800de34:	79fb      	ldrb	r3, [r7, #7]
 800de36:	4619      	mov	r1, r3
 800de38:	483b      	ldr	r0, [pc, #236]	; (800df28 <InitExplore+0x148>)
 800de3a:	f00a fe0f 	bl	8018a5c <iprintf>
#endif
	HAL_Delay(100);
 800de3e:	2064      	movs	r0, #100	; 0x64
 800de40:	f004 f8da 	bl	8011ff8 <HAL_Delay>

	ZGyro = ReadIMU(0x37, 0x38);
 800de44:	2138      	movs	r1, #56	; 0x38
 800de46:	2037      	movs	r0, #55	; 0x37
 800de48:	f002 fe94 	bl	8010b74 <ReadIMU>
 800de4c:	eef0 7a40 	vmov.f32	s15, s0
 800de50:	4b36      	ldr	r3, [pc, #216]	; (800df2c <InitExplore+0x14c>)
 800de52:	edc3 7a00 	vstr	s15, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800de56:	4b35      	ldr	r3, [pc, #212]	; (800df2c <InitExplore+0x14c>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fa faac 	bl	80083b8 <__aeabi_f2d>
 800de60:	4603      	mov	r3, r0
 800de62:	460c      	mov	r4, r1
 800de64:	461a      	mov	r2, r3
 800de66:	4623      	mov	r3, r4
 800de68:	4831      	ldr	r0, [pc, #196]	; (800df30 <InitExplore+0x150>)
 800de6a:	f00a fdf7 	bl	8018a5c <iprintf>
//	  }

  }
#endif
	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800de6e:	f003 f8a5 	bl	8010fbc <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800de72:	f002 ffb9 	bl	8010de8 <EncoderStart>
	EmitterON();
 800de76:	f002 ffc7 	bl	8010e08 <EmitterON>
	ADCStart();
 800de7a:	f002 fd27 	bl	80108cc <ADCStart>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800de7e:	f247 512f 	movw	r1, #29999	; 0x752f
 800de82:	482c      	ldr	r0, [pc, #176]	; (800df34 <InitExplore+0x154>)
 800de84:	f003 f932 	bl	80110ec <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800de88:	f247 512f 	movw	r1, #29999	; 0x752f
 800de8c:	482a      	ldr	r0, [pc, #168]	; (800df38 <InitExplore+0x158>)
 800de8e:	f003 f92d 	bl	80110ec <InitPulse>
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800de92:	482a      	ldr	r0, [pc, #168]	; (800df3c <InitExplore+0x15c>)
 800de94:	f006 ff97 	bl	8014dc6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800de98:	4829      	ldr	r0, [pc, #164]	; (800df40 <InitExplore+0x160>)
 800de9a:	f006 ff94 	bl	8014dc6 <HAL_TIM_Base_Start_IT>
		printf("生値%f, 角速度%f ang/s, %f rad/s\r\n",ZGyro,ZGyro/16.4f, AngularV);
	}

#endif

	TargetVelocity[BODY] = 0;
 800de9e:	4b29      	ldr	r3, [pc, #164]	; (800df44 <InitExplore+0x164>)
 800dea0:	f04f 0200 	mov.w	r2, #0
 800dea4:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800dea6:	4b28      	ldr	r3, [pc, #160]	; (800df48 <InitExplore+0x168>)
 800dea8:	f04f 0200 	mov.w	r2, #0
 800deac:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800deae:	4b27      	ldr	r3, [pc, #156]	; (800df4c <InitExplore+0x16c>)
 800deb0:	f04f 0200 	mov.w	r2, #0
 800deb4:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800deb6:	4b26      	ldr	r3, [pc, #152]	; (800df50 <InitExplore+0x170>)
 800deb8:	f04f 0200 	mov.w	r2, #0
 800debc:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800debe:	4b25      	ldr	r3, [pc, #148]	; (800df54 <InitExplore+0x174>)
 800dec0:	2200      	movs	r2, #0
 800dec2:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800dec4:	4b23      	ldr	r3, [pc, #140]	; (800df54 <InitExplore+0x174>)
 800dec6:	2200      	movs	r2, #0
 800dec8:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800deca:	4b22      	ldr	r3, [pc, #136]	; (800df54 <InitExplore+0x174>)
 800decc:	2200      	movs	r2, #0
 800dece:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800ded0:	f002 ff08 	bl	8010ce4 <IMU_Calib>
	TargetPhoto[SR] = Photo[SR];
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
#else


	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800ded4:	4b20      	ldr	r3, [pc, #128]	; (800df58 <InitExplore+0x178>)
 800ded6:	689b      	ldr	r3, [r3, #8]
 800ded8:	4a20      	ldr	r2, [pc, #128]	; (800df5c <InitExplore+0x17c>)
 800deda:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800dedc:	4b1e      	ldr	r3, [pc, #120]	; (800df58 <InitExplore+0x178>)
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	4a1e      	ldr	r2, [pc, #120]	; (800df5c <InitExplore+0x17c>)
 800dee2:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800dee4:	4b1d      	ldr	r3, [pc, #116]	; (800df5c <InitExplore+0x17c>)
 800dee6:	ed93 7a02 	vldr	s14, [r3, #8]
 800deea:	4b1c      	ldr	r3, [pc, #112]	; (800df5c <InitExplore+0x17c>)
 800deec:	edd3 7a01 	vldr	s15, [r3, #4]
 800def0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800def4:	4b1a      	ldr	r3, [pc, #104]	; (800df60 <InitExplore+0x180>)
 800def6:	edc3 7a00 	vstr	s15, [r3]

#endif
	PIDReset(L_VELO_PID);
 800defa:	2004      	movs	r0, #4
 800defc:	f003 fd4e 	bl	801199c <PIDReset>
	PIDReset(R_VELO_PID);
 800df00:	2005      	movs	r0, #5
 800df02:	f003 fd4b 	bl	801199c <PIDReset>

	PIDReset(A_VELO_PID);
 800df06:	2000      	movs	r0, #0
 800df08:	f003 fd48 	bl	801199c <PIDReset>
	PIDReset(L_WALL_PID);
 800df0c:	2002      	movs	r0, #2
 800df0e:	f003 fd45 	bl	801199c <PIDReset>
	PIDReset(R_WALL_PID);
 800df12:	2003      	movs	r0, #3
 800df14:	f003 fd42 	bl	801199c <PIDReset>
	PIDReset(D_WALL_PID);
 800df18:	2001      	movs	r0, #1
 800df1a:	f003 fd3f 	bl	801199c <PIDReset>

#endif
}
 800df1e:	bf00      	nop
 800df20:	370c      	adds	r7, #12
 800df22:	46bd      	mov	sp, r7
 800df24:	bd90      	pop	{r4, r7, pc}
 800df26:	bf00      	nop
 800df28:	0801c47c 	.word	0x0801c47c
 800df2c:	200002d4 	.word	0x200002d4
 800df30:	0801c498 	.word	0x0801c498
 800df34:	40000424 	.word	0x40000424
 800df38:	40000824 	.word	0x40000824
 800df3c:	20000fc0 	.word	0x20000fc0
 800df40:	20000d78 	.word	0x20000d78
 800df44:	20000ad0 	.word	0x20000ad0
 800df48:	20000ae0 	.word	0x20000ae0
 800df4c:	2000022c 	.word	0x2000022c
 800df50:	20000230 	.word	0x20000230
 800df54:	20000b04 	.word	0x20000b04
 800df58:	20000b44 	.word	0x20000b44
 800df5c:	20000c04 	.word	0x20000c04
 800df60:	20000af4 	.word	0x20000af4

0800df64 <InitFastest>:

void InitFastest()
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
	Motor_PWM_Start();
 800df6a:	f003 f827 	bl	8010fbc <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800df6e:	f002 ff3b 	bl	8010de8 <EncoderStart>
	EmitterON();
 800df72:	f002 ff49 	bl	8010e08 <EmitterON>
	ADCStart();
 800df76:	f002 fca9 	bl	80108cc <ADCStart>

	uint8_t imu_check;
	imu_check =IMU_init();
 800df7a:	f002 fe89 	bl	8010c90 <IMU_init>
 800df7e:	4603      	mov	r3, r0
 800df80:	71fb      	strb	r3, [r7, #7]

	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800df82:	79fb      	ldrb	r3, [r7, #7]
 800df84:	4619      	mov	r1, r3
 800df86:	4838      	ldr	r0, [pc, #224]	; (800e068 <InitFastest+0x104>)
 800df88:	f00a fd68 	bl	8018a5c <iprintf>
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800df8c:	2100      	movs	r1, #0
 800df8e:	2004      	movs	r0, #4
 800df90:	f003 fcee 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800df94:	2100      	movs	r1, #0
 800df96:	2005      	movs	r0, #5
 800df98:	f003 fcea 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800df9c:	2100      	movs	r1, #0
 800df9e:	2002      	movs	r0, #2
 800dfa0:	f003 fce6 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	2003      	movs	r0, #3
 800dfa8:	f003 fce2 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800dfac:	2100      	movs	r1, #0
 800dfae:	2001      	movs	r0, #1
 800dfb0:	f003 fcde 	bl	8011970 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800dfb4:	2100      	movs	r1, #0
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	f003 fcda 	bl	8011970 <PIDChangeFlag>


	Load_Gain();
 800dfbc:	f003 fa1c 	bl	80113f8 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800dfc0:	f247 512f 	movw	r1, #29999	; 0x752f
 800dfc4:	4829      	ldr	r0, [pc, #164]	; (800e06c <InitFastest+0x108>)
 800dfc6:	f003 f891 	bl	80110ec <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800dfca:	f247 512f 	movw	r1, #29999	; 0x752f
 800dfce:	4828      	ldr	r0, [pc, #160]	; (800e070 <InitFastest+0x10c>)
 800dfd0:	f003 f88c 	bl	80110ec <InitPulse>
//	  }

  }
#endif
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800dfd4:	4827      	ldr	r0, [pc, #156]	; (800e074 <InitFastest+0x110>)
 800dfd6:	f006 fef6 	bl	8014dc6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800dfda:	4827      	ldr	r0, [pc, #156]	; (800e078 <InitFastest+0x114>)
 800dfdc:	f006 fef3 	bl	8014dc6 <HAL_TIM_Base_Start_IT>


	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
 800dfe0:	4b26      	ldr	r3, [pc, #152]	; (800e07c <InitFastest+0x118>)
 800dfe2:	f04f 0200 	mov.w	r2, #0
 800dfe6:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800dfe8:	4b25      	ldr	r3, [pc, #148]	; (800e080 <InitFastest+0x11c>)
 800dfea:	f04f 0200 	mov.w	r2, #0
 800dfee:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800dff0:	4b24      	ldr	r3, [pc, #144]	; (800e084 <InitFastest+0x120>)
 800dff2:	f04f 0200 	mov.w	r2, #0
 800dff6:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800dff8:	4b23      	ldr	r3, [pc, #140]	; (800e088 <InitFastest+0x124>)
 800dffa:	f04f 0200 	mov.w	r2, #0
 800dffe:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800e000:	4b22      	ldr	r3, [pc, #136]	; (800e08c <InitFastest+0x128>)
 800e002:	2200      	movs	r2, #0
 800e004:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800e006:	4b21      	ldr	r3, [pc, #132]	; (800e08c <InitFastest+0x128>)
 800e008:	2200      	movs	r2, #0
 800e00a:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800e00c:	4b1f      	ldr	r3, [pc, #124]	; (800e08c <InitFastest+0x128>)
 800e00e:	2200      	movs	r2, #0
 800e010:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800e012:	f002 fe67 	bl	8010ce4 <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800e016:	4b1e      	ldr	r3, [pc, #120]	; (800e090 <InitFastest+0x12c>)
 800e018:	689b      	ldr	r3, [r3, #8]
 800e01a:	4a1e      	ldr	r2, [pc, #120]	; (800e094 <InitFastest+0x130>)
 800e01c:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];
 800e01e:	4b1c      	ldr	r3, [pc, #112]	; (800e090 <InitFastest+0x12c>)
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	4a1c      	ldr	r2, [pc, #112]	; (800e094 <InitFastest+0x130>)
 800e024:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800e026:	4b1b      	ldr	r3, [pc, #108]	; (800e094 <InitFastest+0x130>)
 800e028:	ed93 7a02 	vldr	s14, [r3, #8]
 800e02c:	4b19      	ldr	r3, [pc, #100]	; (800e094 <InitFastest+0x130>)
 800e02e:	edd3 7a01 	vldr	s15, [r3, #4]
 800e032:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e036:	4b18      	ldr	r3, [pc, #96]	; (800e098 <InitFastest+0x134>)
 800e038:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO_PID);
 800e03c:	2004      	movs	r0, #4
 800e03e:	f003 fcad 	bl	801199c <PIDReset>
	PIDReset(R_VELO_PID);
 800e042:	2005      	movs	r0, #5
 800e044:	f003 fcaa 	bl	801199c <PIDReset>
	PIDReset(A_VELO_PID);
 800e048:	2000      	movs	r0, #0
 800e04a:	f003 fca7 	bl	801199c <PIDReset>
	PIDReset(L_WALL_PID);
 800e04e:	2002      	movs	r0, #2
 800e050:	f003 fca4 	bl	801199c <PIDReset>
	PIDReset(R_WALL_PID);
 800e054:	2003      	movs	r0, #3
 800e056:	f003 fca1 	bl	801199c <PIDReset>
	PIDReset(D_WALL_PID);
 800e05a:	2001      	movs	r0, #1
 800e05c:	f003 fc9e 	bl	801199c <PIDReset>


}
 800e060:	bf00      	nop
 800e062:	3708      	adds	r7, #8
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	0801c47c 	.word	0x0801c47c
 800e06c:	40000424 	.word	0x40000424
 800e070:	40000824 	.word	0x40000824
 800e074:	20000fc0 	.word	0x20000fc0
 800e078:	20000d78 	.word	0x20000d78
 800e07c:	20000ad0 	.word	0x20000ad0
 800e080:	20000ae0 	.word	0x20000ae0
 800e084:	2000022c 	.word	0x2000022c
 800e088:	20000230 	.word	0x20000230
 800e08c:	20000b04 	.word	0x20000b04
 800e090:	20000b44 	.word	0x20000b44
 800e094:	20000c04 	.word	0x20000c04
 800e098:	20000af4 	.word	0x20000af4

0800e09c <Debug>:
void Debug()
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
//	while(1)
//	{
//
//	}
#if 1
	InitExplore();
 800e0a2:	f7ff fe9d 	bl	800dde0 <InitExplore>
	InitPosition();
 800e0a6:	f7fa fea7 	bl	8008df8 <InitPosition>
	wall_init();
 800e0aa:	f7fc fda9 	bl	800ac00 <wall_init>

	TotalPulse[RIGHT] = 0;
 800e0ae:	4b37      	ldr	r3, [pc, #220]	; (800e18c <Debug+0xf0>)
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800e0b4:	4b35      	ldr	r3, [pc, #212]	; (800e18c <Debug+0xf0>)
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800e0ba:	4b34      	ldr	r3, [pc, #208]	; (800e18c <Debug+0xf0>)
 800e0bc:	2200      	movs	r2, #0
 800e0be:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800e0c0:	2101      	movs	r1, #1
 800e0c2:	2004      	movs	r0, #4
 800e0c4:	f003 fc54 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800e0c8:	2101      	movs	r1, #1
 800e0ca:	2005      	movs	r0, #5
 800e0cc:	f003 fc50 	bl	8011970 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800e0d0:	4b2e      	ldr	r3, [pc, #184]	; (800e18c <Debug+0xf0>)
 800e0d2:	6899      	ldr	r1, [r3, #8]
 800e0d4:	4b2d      	ldr	r3, [pc, #180]	; (800e18c <Debug+0xf0>)
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	4b2c      	ldr	r3, [pc, #176]	; (800e18c <Debug+0xf0>)
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	482c      	ldr	r0, [pc, #176]	; (800e190 <Debug+0xf4>)
 800e0de:	f00a fcbd 	bl	8018a5c <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	2001      	movs	r0, #1
 800e0e6:	f003 fc43 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	2002      	movs	r0, #2
 800e0ee:	f003 fc3f 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800e0f2:	2100      	movs	r1, #0
 800e0f4:	2003      	movs	r0, #3
 800e0f6:	f003 fc3b 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800e0fa:	2101      	movs	r1, #1
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	f003 fc37 	bl	8011970 <PIDChangeFlag>
	ExploreVelocity=0;
 800e102:	4b24      	ldr	r3, [pc, #144]	; (800e194 <Debug+0xf8>)
 800e104:	f04f 0200 	mov.w	r2, #0
 800e108:	601a      	str	r2, [r3, #0]
	ChangeLED(3);
 800e10a:	2003      	movs	r0, #3
 800e10c:	f002 fe98 	bl	8010e40 <ChangeLED>
	//HAL_Delay(500);

	//IT_mode = WRITINGFREE;
	IT_mode = EXPLORE;
 800e110:	4b21      	ldr	r3, [pc, #132]	; (800e198 <Debug+0xfc>)
 800e112:	2206      	movs	r2, #6
 800e114:	601a      	str	r2, [r3, #0]
		printf("%f, %f, %f, %f\r\n", Photo[FL], Photo[FR], Photo[FL] - Photo[FR],Photo[FL] + Photo[FR] );
	}
	PIDChangeFlag(F_WALL_PID, 0);
#endif
#if 1 //直進テスト
	ExploreVelocity = 135;
 800e116:	4b1f      	ldr	r3, [pc, #124]	; (800e194 <Debug+0xf8>)
 800e118:	4a20      	ldr	r2, [pc, #128]	; (800e19c <Debug+0x100>)
 800e11a:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800e11c:	4b20      	ldr	r3, [pc, #128]	; (800e1a0 <Debug+0x104>)
 800e11e:	2200      	movs	r2, #0
 800e120:	711a      	strb	r2, [r3, #4]
	Accel(61.75,ExploreVelocity);
 800e122:	4b1c      	ldr	r3, [pc, #112]	; (800e194 <Debug+0xf8>)
 800e124:	edd3 7a00 	vldr	s15, [r3]
 800e128:	eef0 0a67 	vmov.f32	s1, s15
 800e12c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800e1a4 <Debug+0x108>
 800e130:	f7fb fcca 	bl	8009ac8 <Accel>
	for(int i=0; i < 1; i++)
 800e134:	2300      	movs	r3, #0
 800e136:	607b      	str	r3, [r7, #4]
 800e138:	e015      	b.n	800e166 <Debug+0xca>
	{
		Pos.Dir = front;
 800e13a:	4b19      	ldr	r3, [pc, #100]	; (800e1a0 <Debug+0x104>)
 800e13c:	2200      	movs	r2, #0
 800e13e:	711a      	strb	r2, [r3, #4]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800e140:	4b14      	ldr	r3, [pc, #80]	; (800e194 <Debug+0xf8>)
 800e142:	edd3 7a00 	vldr	s15, [r3]
 800e146:	4b18      	ldr	r3, [pc, #96]	; (800e1a8 <Debug+0x10c>)
 800e148:	ed93 7a00 	vldr	s14, [r3]
 800e14c:	eeb0 1a47 	vmov.f32	s2, s14
 800e150:	eef0 0a67 	vmov.f32	s1, s15
 800e154:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800e1ac <Debug+0x110>
 800e158:	f7fb fe7e 	bl	8009e58 <GoStraight>
		//Pos.Dir = right;
		SlalomRight();
 800e15c:	f7fb f8f4 	bl	8009348 <SlalomRight>
	for(int i=0; i < 1; i++)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	3301      	adds	r3, #1
 800e164:	607b      	str	r3, [r7, #4]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	dde6      	ble.n	800e13a <Debug+0x9e>

	}
	Pos.Dir = front;
 800e16c:	4b0c      	ldr	r3, [pc, #48]	; (800e1a0 <Debug+0x104>)
 800e16e:	2200      	movs	r2, #0
 800e170:	711a      	strb	r2, [r3, #4]
	//Decel(45,0);
	TargetVelocity[BODY] = 0;
 800e172:	4b0f      	ldr	r3, [pc, #60]	; (800e1b0 <Debug+0x114>)
 800e174:	f04f 0200 	mov.w	r2, #0
 800e178:	609a      	str	r2, [r3, #8]
	HAL_Delay(1000);
 800e17a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e17e:	f003 ff3b 	bl	8011ff8 <HAL_Delay>
	while(1)
	{
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
 800e182:	bf00      	nop
 800e184:	3708      	adds	r7, #8
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	20000b04 	.word	0x20000b04
 800e190:	0801c4a4 	.word	0x0801c4a4
 800e194:	20000bf8 	.word	0x20000bf8
 800e198:	20000ac4 	.word	0x20000ac4
 800e19c:	43070000 	.word	0x43070000
 800e1a0:	20000000 	.word	0x20000000
 800e1a4:	42770000 	.word	0x42770000
 800e1a8:	20000adc 	.word	0x20000adc
 800e1ac:	42b40000 	.word	0x42b40000
 800e1b0:	20000ad0 	.word	0x20000ad0

0800e1b4 <ParameterSetting>:
void ParameterSetting()
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	af00      	add	r7, sp, #0
	Load_Gain();
 800e1b8:	f003 f91e 	bl	80113f8 <Load_Gain>
	Change_Gain();
 800e1bc:	f003 f9d8 	bl	8011570 <Change_Gain>

}
 800e1c0:	bf00      	nop
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <GainTestRWall>:
	{
		TargetVelocity[BODY] = 300;
	}
}
void GainTestRWall()
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800e1c8:	4b18      	ldr	r3, [pc, #96]	; (800e22c <GainTestRWall+0x68>)
 800e1ca:	2206      	movs	r2, #6
 800e1cc:	601a      	str	r2, [r3, #0]
	InitExplore();
 800e1ce:	f7ff fe07 	bl	800dde0 <InitExplore>
	InitPosition();
 800e1d2:	f7fa fe11 	bl	8008df8 <InitPosition>
	wall_init();
 800e1d6:	f7fc fd13 	bl	800ac00 <wall_init>
	TotalPulse[RIGHT] = 0;
 800e1da:	4b15      	ldr	r3, [pc, #84]	; (800e230 <GainTestRWall+0x6c>)
 800e1dc:	2200      	movs	r2, #0
 800e1de:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800e1e0:	4b13      	ldr	r3, [pc, #76]	; (800e230 <GainTestRWall+0x6c>)
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800e1e6:	4b12      	ldr	r3, [pc, #72]	; (800e230 <GainTestRWall+0x6c>)
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800e1ec:	2101      	movs	r1, #1
 800e1ee:	2004      	movs	r0, #4
 800e1f0:	f003 fbbe 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800e1f4:	2101      	movs	r1, #1
 800e1f6:	2005      	movs	r0, #5
 800e1f8:	f003 fbba 	bl	8011970 <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	2001      	movs	r0, #1
 800e200:	f003 fbb6 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800e204:	2100      	movs	r1, #0
 800e206:	2002      	movs	r0, #2
 800e208:	f003 fbb2 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800e20c:	2101      	movs	r1, #1
 800e20e:	2003      	movs	r0, #3
 800e210:	f003 fbae 	bl	8011970 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800e214:	4b07      	ldr	r3, [pc, #28]	; (800e234 <GainTestRWall+0x70>)
 800e216:	f04f 0200 	mov.w	r2, #0
 800e21a:	601a      	str	r2, [r3, #0]
	ChangeLED(1);
 800e21c:	2001      	movs	r0, #1
 800e21e:	f002 fe0f 	bl	8010e40 <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800e222:	4b05      	ldr	r3, [pc, #20]	; (800e238 <GainTestRWall+0x74>)
 800e224:	f04f 0200 	mov.w	r2, #0
 800e228:	609a      	str	r2, [r3, #8]
 800e22a:	e7fa      	b.n	800e222 <GainTestRWall+0x5e>
 800e22c:	20000ac4 	.word	0x20000ac4
 800e230:	20000b04 	.word	0x20000b04
 800e234:	20000bf8 	.word	0x20000bf8
 800e238:	20000ad0 	.word	0x20000ad0

0800e23c <GainTestDWall>:

	}
}
void GainTestDWall()
{
 800e23c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e240:	b086      	sub	sp, #24
 800e242:	af06      	add	r7, sp, #24
	IT_mode = EXPLORE;
 800e244:	4b2c      	ldr	r3, [pc, #176]	; (800e2f8 <GainTestDWall+0xbc>)
 800e246:	2206      	movs	r2, #6
 800e248:	601a      	str	r2, [r3, #0]
	InitExplore();
 800e24a:	f7ff fdc9 	bl	800dde0 <InitExplore>
	InitPosition();
 800e24e:	f7fa fdd3 	bl	8008df8 <InitPosition>
	wall_init();
 800e252:	f7fc fcd5 	bl	800ac00 <wall_init>
	TotalPulse[RIGHT] = 0;
 800e256:	4b29      	ldr	r3, [pc, #164]	; (800e2fc <GainTestDWall+0xc0>)
 800e258:	2200      	movs	r2, #0
 800e25a:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800e25c:	4b27      	ldr	r3, [pc, #156]	; (800e2fc <GainTestDWall+0xc0>)
 800e25e:	2200      	movs	r2, #0
 800e260:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800e262:	4b26      	ldr	r3, [pc, #152]	; (800e2fc <GainTestDWall+0xc0>)
 800e264:	2200      	movs	r2, #0
 800e266:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800e268:	2101      	movs	r1, #1
 800e26a:	2004      	movs	r0, #4
 800e26c:	f003 fb80 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800e270:	2101      	movs	r1, #1
 800e272:	2005      	movs	r0, #5
 800e274:	f003 fb7c 	bl	8011970 <PIDChangeFlag>
	//PIDChangeFlagStraight(D_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 1);
 800e278:	2101      	movs	r1, #1
 800e27a:	2001      	movs	r0, #1
 800e27c:	f003 fb78 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800e280:	2100      	movs	r1, #0
 800e282:	2002      	movs	r0, #2
 800e284:	f003 fb74 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800e288:	2100      	movs	r1, #0
 800e28a:	2003      	movs	r0, #3
 800e28c:	f003 fb70 	bl	8011970 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800e290:	4b1b      	ldr	r3, [pc, #108]	; (800e300 <GainTestDWall+0xc4>)
 800e292:	f04f 0200 	mov.w	r2, #0
 800e296:	601a      	str	r2, [r3, #0]
	ChangeLED(2);
 800e298:	2002      	movs	r0, #2
 800e29a:	f002 fdd1 	bl	8010e40 <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800e29e:	4b19      	ldr	r3, [pc, #100]	; (800e304 <GainTestDWall+0xc8>)
 800e2a0:	f04f 0200 	mov.w	r2, #0
 800e2a4:	609a      	str	r2, [r3, #8]
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800e2a6:	4b18      	ldr	r3, [pc, #96]	; (800e308 <GainTestDWall+0xcc>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7fa f884 	bl	80083b8 <__aeabi_f2d>
 800e2b0:	4682      	mov	sl, r0
 800e2b2:	468b      	mov	fp, r1
 800e2b4:	4b14      	ldr	r3, [pc, #80]	; (800e308 <GainTestDWall+0xcc>)
 800e2b6:	68db      	ldr	r3, [r3, #12]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fa f87d 	bl	80083b8 <__aeabi_f2d>
 800e2be:	4604      	mov	r4, r0
 800e2c0:	460d      	mov	r5, r1
 800e2c2:	4b11      	ldr	r3, [pc, #68]	; (800e308 <GainTestDWall+0xcc>)
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7fa f876 	bl	80083b8 <__aeabi_f2d>
 800e2cc:	4680      	mov	r8, r0
 800e2ce:	4689      	mov	r9, r1
 800e2d0:	4b0d      	ldr	r3, [pc, #52]	; (800e308 <GainTestDWall+0xcc>)
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7fa f86f 	bl	80083b8 <__aeabi_f2d>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	460b      	mov	r3, r1
 800e2de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e2e2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e2e6:	e9cd 4500 	strd	r4, r5, [sp]
 800e2ea:	4652      	mov	r2, sl
 800e2ec:	465b      	mov	r3, fp
 800e2ee:	4807      	ldr	r0, [pc, #28]	; (800e30c <GainTestDWall+0xd0>)
 800e2f0:	f00a fbb4 	bl	8018a5c <iprintf>
		TargetVelocity[BODY] = 0;
 800e2f4:	e7d3      	b.n	800e29e <GainTestDWall+0x62>
 800e2f6:	bf00      	nop
 800e2f8:	20000ac4 	.word	0x20000ac4
 800e2fc:	20000b04 	.word	0x20000b04
 800e300:	20000bf8 	.word	0x20000bf8
 800e304:	20000ad0 	.word	0x20000ad0
 800e308:	20000b44 	.word	0x20000b44
 800e30c:	0801c4d8 	.word	0x0801c4d8

0800e310 <GainTestAVelo>:
	}
}

void GainTestAVelo()
{
 800e310:	b580      	push	{r7, lr}
 800e312:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800e314:	4b1a      	ldr	r3, [pc, #104]	; (800e380 <GainTestAVelo+0x70>)
 800e316:	2206      	movs	r2, #6
 800e318:	601a      	str	r2, [r3, #0]
	InitExplore();
 800e31a:	f7ff fd61 	bl	800dde0 <InitExplore>
	InitPosition();
 800e31e:	f7fa fd6b 	bl	8008df8 <InitPosition>
	wall_init();
 800e322:	f7fc fc6d 	bl	800ac00 <wall_init>
	TotalPulse[RIGHT] = 0;
 800e326:	4b17      	ldr	r3, [pc, #92]	; (800e384 <GainTestAVelo+0x74>)
 800e328:	2200      	movs	r2, #0
 800e32a:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800e32c:	4b15      	ldr	r3, [pc, #84]	; (800e384 <GainTestAVelo+0x74>)
 800e32e:	2200      	movs	r2, #0
 800e330:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800e332:	4b14      	ldr	r3, [pc, #80]	; (800e384 <GainTestAVelo+0x74>)
 800e334:	2200      	movs	r2, #0
 800e336:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800e338:	2101      	movs	r1, #1
 800e33a:	2004      	movs	r0, #4
 800e33c:	f003 fb18 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800e340:	2101      	movs	r1, #1
 800e342:	2005      	movs	r0, #5
 800e344:	f003 fb14 	bl	8011970 <PIDChangeFlag>
	//PIDChangeFlagStraight(A_VELO_PID);
	PIDChangeFlag(A_VELO_PID, 1);
 800e348:	2101      	movs	r1, #1
 800e34a:	2000      	movs	r0, #0
 800e34c:	f003 fb10 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800e350:	2100      	movs	r1, #0
 800e352:	2001      	movs	r0, #1
 800e354:	f003 fb0c 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800e358:	2100      	movs	r1, #0
 800e35a:	2002      	movs	r0, #2
 800e35c:	f003 fb08 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800e360:	2100      	movs	r1, #0
 800e362:	2003      	movs	r0, #3
 800e364:	f003 fb04 	bl	8011970 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800e368:	4b07      	ldr	r3, [pc, #28]	; (800e388 <GainTestAVelo+0x78>)
 800e36a:	f04f 0200 	mov.w	r2, #0
 800e36e:	601a      	str	r2, [r3, #0]
	ChangeLED(5);
 800e370:	2005      	movs	r0, #5
 800e372:	f002 fd65 	bl	8010e40 <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800e376:	4b05      	ldr	r3, [pc, #20]	; (800e38c <GainTestAVelo+0x7c>)
 800e378:	f04f 0200 	mov.w	r2, #0
 800e37c:	609a      	str	r2, [r3, #8]
 800e37e:	e7fa      	b.n	800e376 <GainTestAVelo+0x66>
 800e380:	20000ac4 	.word	0x20000ac4
 800e384:	20000b04 	.word	0x20000b04
 800e388:	20000bf8 	.word	0x20000bf8
 800e38c:	20000ad0 	.word	0x20000ad0

0800e390 <WritingFree>:
		//printf("%f, %f\r\n", AngularV, Angle);

	}
}
void WritingFree()
{
 800e390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e394:	b08a      	sub	sp, #40	; 0x28
 800e396:	af08      	add	r7, sp, #32
	IT_mode = WRITINGFREE;
 800e398:	4b3d      	ldr	r3, [pc, #244]	; (800e490 <WritingFree+0x100>)
 800e39a:	2207      	movs	r2, #7
 800e39c:	601a      	str	r2, [r3, #0]

	InitExplore();
 800e39e:	f7ff fd1f 	bl	800dde0 <InitExplore>

	printf("3\r\n");
 800e3a2:	483c      	ldr	r0, [pc, #240]	; (800e494 <WritingFree+0x104>)
 800e3a4:	f00a fbe2 	bl	8018b6c <puts>

	InitPosition();
 800e3a8:	f7fa fd26 	bl	8008df8 <InitPosition>

	wall_init();
 800e3ac:	f7fc fc28 	bl	800ac00 <wall_init>
	printf("4\r\n");
 800e3b0:	4839      	ldr	r0, [pc, #228]	; (800e498 <WritingFree+0x108>)
 800e3b2:	f00a fbdb 	bl	8018b6c <puts>

	TotalPulse[RIGHT] = 0;
 800e3b6:	4b39      	ldr	r3, [pc, #228]	; (800e49c <WritingFree+0x10c>)
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800e3bc:	4b37      	ldr	r3, [pc, #220]	; (800e49c <WritingFree+0x10c>)
 800e3be:	2200      	movs	r2, #0
 800e3c0:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800e3c2:	4b36      	ldr	r3, [pc, #216]	; (800e49c <WritingFree+0x10c>)
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800e3c8:	2101      	movs	r1, #1
 800e3ca:	2004      	movs	r0, #4
 800e3cc:	f003 fad0 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800e3d0:	2101      	movs	r1, #1
 800e3d2:	2005      	movs	r0, #5
 800e3d4:	f003 facc 	bl	8011970 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800e3d8:	2100      	movs	r1, #0
 800e3da:	2001      	movs	r0, #1
 800e3dc:	f003 fac8 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800e3e0:	2100      	movs	r1, #0
 800e3e2:	2002      	movs	r0, #2
 800e3e4:	f003 fac4 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800e3e8:	2100      	movs	r1, #0
 800e3ea:	2003      	movs	r0, #3
 800e3ec:	f003 fac0 	bl	8011970 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800e3f0:	4b2b      	ldr	r3, [pc, #172]	; (800e4a0 <WritingFree+0x110>)
 800e3f2:	f04f 0200 	mov.w	r2, #0
 800e3f6:	601a      	str	r2, [r3, #0]
	ChangeLED(7);
 800e3f8:	2007      	movs	r0, #7
 800e3fa:	f002 fd21 	bl	8010e40 <ChangeLED>


#else

	//目標座標だけ
	Aim();
 800e3fe:	f7fb ff4b 	bl	800a298 <Aim>
	//shiftPos();
	while(1)
	{
//		ExploreVelocity=300;
//		GoStraight(9000, ExploreVelocity, 0);
		TargetVelocity[BODY] = 0;
 800e402:	4b28      	ldr	r3, [pc, #160]	; (800e4a4 <WritingFree+0x114>)
 800e404:	f04f 0200 	mov.w	r2, #0
 800e408:	609a      	str	r2, [r3, #8]


		printf("%f, %f, %f, %f, %f\r\n",ZGyro, Photo[FL],Photo[FR],Photo[FL]+Photo[FR],(Photo[FL]+Photo[FR])/2);//壁センサ前のチェック。
 800e40a:	4b27      	ldr	r3, [pc, #156]	; (800e4a8 <WritingFree+0x118>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4618      	mov	r0, r3
 800e410:	f7f9 ffd2 	bl	80083b8 <__aeabi_f2d>
 800e414:	e9c7 0100 	strd	r0, r1, [r7]
 800e418:	4b24      	ldr	r3, [pc, #144]	; (800e4ac <WritingFree+0x11c>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7f9 ffcb 	bl	80083b8 <__aeabi_f2d>
 800e422:	4604      	mov	r4, r0
 800e424:	460d      	mov	r5, r1
 800e426:	4b21      	ldr	r3, [pc, #132]	; (800e4ac <WritingFree+0x11c>)
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7f9 ffc4 	bl	80083b8 <__aeabi_f2d>
 800e430:	4680      	mov	r8, r0
 800e432:	4689      	mov	r9, r1
 800e434:	4b1d      	ldr	r3, [pc, #116]	; (800e4ac <WritingFree+0x11c>)
 800e436:	ed93 7a00 	vldr	s14, [r3]
 800e43a:	4b1c      	ldr	r3, [pc, #112]	; (800e4ac <WritingFree+0x11c>)
 800e43c:	edd3 7a03 	vldr	s15, [r3, #12]
 800e440:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e444:	ee17 0a90 	vmov	r0, s15
 800e448:	f7f9 ffb6 	bl	80083b8 <__aeabi_f2d>
 800e44c:	4682      	mov	sl, r0
 800e44e:	468b      	mov	fp, r1
 800e450:	4b16      	ldr	r3, [pc, #88]	; (800e4ac <WritingFree+0x11c>)
 800e452:	ed93 7a00 	vldr	s14, [r3]
 800e456:	4b15      	ldr	r3, [pc, #84]	; (800e4ac <WritingFree+0x11c>)
 800e458:	edd3 7a03 	vldr	s15, [r3, #12]
 800e45c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e460:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e464:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e468:	ee16 0a90 	vmov	r0, s13
 800e46c:	f7f9 ffa4 	bl	80083b8 <__aeabi_f2d>
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e478:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800e47c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e480:	e9cd 4500 	strd	r4, r5, [sp]
 800e484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e488:	4809      	ldr	r0, [pc, #36]	; (800e4b0 <WritingFree+0x120>)
 800e48a:	f00a fae7 	bl	8018a5c <iprintf>
		TargetVelocity[BODY] = 0;
 800e48e:	e7b8      	b.n	800e402 <WritingFree+0x72>
 800e490:	20000ac4 	.word	0x20000ac4
 800e494:	0801c508 	.word	0x0801c508
 800e498:	0801c50c 	.word	0x0801c50c
 800e49c:	20000b04 	.word	0x20000b04
 800e4a0:	20000bf8 	.word	0x20000bf8
 800e4a4:	20000ad0 	.word	0x20000ad0
 800e4a8:	200002d4 	.word	0x200002d4
 800e4ac:	20000b44 	.word	0x20000b44
 800e4b0:	0801c510 	.word	0x0801c510

0800e4b4 <FastestRun>:
	}
	//探索の場合は迷路とステータスの準備
}

void FastestRun()
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af02      	add	r7, sp, #8
	IT_mode = EXPLORE;
 800e4ba:	4b9b      	ldr	r3, [pc, #620]	; (800e728 <FastestRun+0x274>)
 800e4bc:	2206      	movs	r2, #6
 800e4be:	601a      	str	r2, [r3, #0]
	//IT_mode = WRITINGFREE;
	//諸々の初期化
	HAL_Delay(100);
 800e4c0:	2064      	movs	r0, #100	; 0x64
 800e4c2:	f003 fd99 	bl	8011ff8 <HAL_Delay>
	int8_t mode=1;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	71bb      	strb	r3, [r7, #6]
	  ModeSelect( 1, 2, &mode);
 800e4ca:	1dbb      	adds	r3, r7, #6
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	2102      	movs	r1, #2
 800e4d0:	2001      	movs	r0, #1
 800e4d2:	f003 fc67 	bl	8011da4 <ModeSelect>
	  Signal( mode );
 800e4d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f003 fbea 	bl	8011cb4 <Signal>

		HAL_Delay(100);
 800e4e0:	2064      	movs	r0, #100	; 0x64
 800e4e2:	f003 fd89 	bl	8011ff8 <HAL_Delay>
		  int8_t mode2=1;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	717b      	strb	r3, [r7, #5]
		  ModeSelect( 1, 4, &mode2);
 800e4ea:	1d7b      	adds	r3, r7, #5
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	2104      	movs	r1, #4
 800e4f0:	2001      	movs	r0, #1
 800e4f2:	f003 fc57 	bl	8011da4 <ModeSelect>
		  Signal( mode2 );
 800e4f6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f003 fbda 	bl	8011cb4 <Signal>

		  PhotoSwitch();
 800e500:	f003 fc2e 	bl	8011d60 <PhotoSwitch>
	InitFastest();
 800e504:	f7ff fd2e 	bl	800df64 <InitFastest>
	InitPosition();
 800e508:	f7fa fc76 	bl	8008df8 <InitPosition>


	wall_init();
 800e50c:	f7fc fb78 	bl	800ac00 <wall_init>

	TotalPulse[RIGHT] = 0;
 800e510:	4b86      	ldr	r3, [pc, #536]	; (800e72c <FastestRun+0x278>)
 800e512:	2200      	movs	r2, #0
 800e514:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800e516:	4b85      	ldr	r3, [pc, #532]	; (800e72c <FastestRun+0x278>)
 800e518:	2200      	movs	r2, #0
 800e51a:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800e51c:	4b83      	ldr	r3, [pc, #524]	; (800e72c <FastestRun+0x278>)
 800e51e:	2200      	movs	r2, #0
 800e520:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800e522:	2101      	movs	r1, #1
 800e524:	2004      	movs	r0, #4
 800e526:	f003 fa23 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800e52a:	2101      	movs	r1, #1
 800e52c:	2005      	movs	r0, #5
 800e52e:	f003 fa1f 	bl	8011970 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800e532:	4b7e      	ldr	r3, [pc, #504]	; (800e72c <FastestRun+0x278>)
 800e534:	6899      	ldr	r1, [r3, #8]
 800e536:	4b7d      	ldr	r3, [pc, #500]	; (800e72c <FastestRun+0x278>)
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	4b7c      	ldr	r3, [pc, #496]	; (800e72c <FastestRun+0x278>)
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	487c      	ldr	r0, [pc, #496]	; (800e730 <FastestRun+0x27c>)
 800e540:	f00a fa8c 	bl	8018a5c <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800e544:	2100      	movs	r1, #0
 800e546:	2001      	movs	r0, #1
 800e548:	f003 fa12 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800e54c:	2100      	movs	r1, #0
 800e54e:	2002      	movs	r0, #2
 800e550:	f003 fa0e 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800e554:	2100      	movs	r1, #0
 800e556:	2003      	movs	r0, #3
 800e558:	f003 fa0a 	bl	8011970 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode;
	if(mode == 1)
 800e55c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e560:	2b01      	cmp	r3, #1
 800e562:	d105      	bne.n	800e570 <FastestRun+0xbc>
	{
		ExploreVelocity = 400;
 800e564:	4b73      	ldr	r3, [pc, #460]	; (800e734 <FastestRun+0x280>)
 800e566:	4a74      	ldr	r2, [pc, #464]	; (800e738 <FastestRun+0x284>)
 800e568:	601a      	str	r2, [r3, #0]
		turn_mode = 'T';
 800e56a:	2354      	movs	r3, #84	; 0x54
 800e56c:	71fb      	strb	r3, [r7, #7]
 800e56e:	e005      	b.n	800e57c <FastestRun+0xc8>
	}
	else if(mode == 2)
 800e570:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e574:	2b02      	cmp	r3, #2
 800e576:	d101      	bne.n	800e57c <FastestRun+0xc8>
	{
		turn_mode = 'S';
 800e578:	2353      	movs	r3, #83	; 0x53
 800e57a:	71fb      	strb	r3, [r7, #7]
	}

	switch(mode2)
 800e57c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800e580:	3b01      	subs	r3, #1
 800e582:	2b03      	cmp	r3, #3
 800e584:	d863      	bhi.n	800e64e <FastestRun+0x19a>
 800e586:	a201      	add	r2, pc, #4	; (adr r2, 800e58c <FastestRun+0xd8>)
 800e588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e58c:	0800e59d 	.word	0x0800e59d
 800e590:	0800e5c9 	.word	0x0800e5c9
 800e594:	0800e5f5 	.word	0x0800e5f5
 800e598:	0800e623 	.word	0x0800e623
	{
	case 1:
		ExploreVelocity=90;
 800e59c:	4b65      	ldr	r3, [pc, #404]	; (800e734 <FastestRun+0x280>)
 800e59e:	4a67      	ldr	r2, [pc, #412]	; (800e73c <FastestRun+0x288>)
 800e5a0:	601a      	str	r2, [r3, #0]
		//未
		Sla.Pre = 7;//9;
 800e5a2:	4b67      	ldr	r3, [pc, #412]	; (800e740 <FastestRun+0x28c>)
 800e5a4:	4a67      	ldr	r2, [pc, #412]	; (800e744 <FastestRun+0x290>)
 800e5a6:	601a      	str	r2, [r3, #0]
		Sla.Fol = 11;//13;
 800e5a8:	4b65      	ldr	r3, [pc, #404]	; (800e740 <FastestRun+0x28c>)
 800e5aa:	4a67      	ldr	r2, [pc, #412]	; (800e748 <FastestRun+0x294>)
 800e5ac:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.014;
 800e5ae:	4b64      	ldr	r3, [pc, #400]	; (800e740 <FastestRun+0x28c>)
 800e5b0:	4a66      	ldr	r2, [pc, #408]	; (800e74c <FastestRun+0x298>)
 800e5b2:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800e5b4:	4b62      	ldr	r3, [pc, #392]	; (800e740 <FastestRun+0x28c>)
 800e5b6:	4a66      	ldr	r2, [pc, #408]	; (800e750 <FastestRun+0x29c>)
 800e5b8:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800e5ba:	4b61      	ldr	r3, [pc, #388]	; (800e740 <FastestRun+0x28c>)
 800e5bc:	4a65      	ldr	r2, [pc, #404]	; (800e754 <FastestRun+0x2a0>)
 800e5be:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800e5c0:	4b5f      	ldr	r3, [pc, #380]	; (800e740 <FastestRun+0x28c>)
 800e5c2:	4a5e      	ldr	r2, [pc, #376]	; (800e73c <FastestRun+0x288>)
 800e5c4:	619a      	str	r2, [r3, #24]
		break;
 800e5c6:	e042      	b.n	800e64e <FastestRun+0x19a>
	case 2:
		//完
		ExploreVelocity=135;
 800e5c8:	4b5a      	ldr	r3, [pc, #360]	; (800e734 <FastestRun+0x280>)
 800e5ca:	4a63      	ldr	r2, [pc, #396]	; (800e758 <FastestRun+0x2a4>)
 800e5cc:	601a      	str	r2, [r3, #0]
		Sla.Pre = 5;
 800e5ce:	4b5c      	ldr	r3, [pc, #368]	; (800e740 <FastestRun+0x28c>)
 800e5d0:	4a62      	ldr	r2, [pc, #392]	; (800e75c <FastestRun+0x2a8>)
 800e5d2:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800e5d4:	4b5a      	ldr	r3, [pc, #360]	; (800e740 <FastestRun+0x28c>)
 800e5d6:	4a61      	ldr	r2, [pc, #388]	; (800e75c <FastestRun+0x2a8>)
 800e5d8:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.0273;
 800e5da:	4b59      	ldr	r3, [pc, #356]	; (800e740 <FastestRun+0x28c>)
 800e5dc:	4a60      	ldr	r2, [pc, #384]	; (800e760 <FastestRun+0x2ac>)
 800e5de:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800e5e0:	4b57      	ldr	r3, [pc, #348]	; (800e740 <FastestRun+0x28c>)
 800e5e2:	4a5b      	ldr	r2, [pc, #364]	; (800e750 <FastestRun+0x29c>)
 800e5e4:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800e5e6:	4b56      	ldr	r3, [pc, #344]	; (800e740 <FastestRun+0x28c>)
 800e5e8:	4a5a      	ldr	r2, [pc, #360]	; (800e754 <FastestRun+0x2a0>)
 800e5ea:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800e5ec:	4b54      	ldr	r3, [pc, #336]	; (800e740 <FastestRun+0x28c>)
 800e5ee:	4a53      	ldr	r2, [pc, #332]	; (800e73c <FastestRun+0x288>)
 800e5f0:	619a      	str	r2, [r3, #24]
		break;
 800e5f2:	e02c      	b.n	800e64e <FastestRun+0x19a>
//		Sla.Fol = 10;
//		Sla.Alpha = 0.04478;
//		Sla.Theta1 = 30;
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;
		ExploreVelocity=180;
 800e5f4:	4b4f      	ldr	r3, [pc, #316]	; (800e734 <FastestRun+0x280>)
 800e5f6:	4a5b      	ldr	r2, [pc, #364]	; (800e764 <FastestRun+0x2b0>)
 800e5f8:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800e5fa:	4b51      	ldr	r3, [pc, #324]	; (800e740 <FastestRun+0x28c>)
 800e5fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e600:	601a      	str	r2, [r3, #0]
		Sla.Fol = 3.5;
 800e602:	4b4f      	ldr	r3, [pc, #316]	; (800e740 <FastestRun+0x28c>)
 800e604:	4a58      	ldr	r2, [pc, #352]	; (800e768 <FastestRun+0x2b4>)
 800e606:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.04;
 800e608:	4b4d      	ldr	r3, [pc, #308]	; (800e740 <FastestRun+0x28c>)
 800e60a:	4a58      	ldr	r2, [pc, #352]	; (800e76c <FastestRun+0x2b8>)
 800e60c:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800e60e:	4b4c      	ldr	r3, [pc, #304]	; (800e740 <FastestRun+0x28c>)
 800e610:	4a4f      	ldr	r2, [pc, #316]	; (800e750 <FastestRun+0x29c>)
 800e612:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800e614:	4b4a      	ldr	r3, [pc, #296]	; (800e740 <FastestRun+0x28c>)
 800e616:	4a4f      	ldr	r2, [pc, #316]	; (800e754 <FastestRun+0x2a0>)
 800e618:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800e61a:	4b49      	ldr	r3, [pc, #292]	; (800e740 <FastestRun+0x28c>)
 800e61c:	4a47      	ldr	r2, [pc, #284]	; (800e73c <FastestRun+0x288>)
 800e61e:	619a      	str	r2, [r3, #24]
		break;
 800e620:	e015      	b.n	800e64e <FastestRun+0x19a>
	case 4:
		ExploreVelocity=300;
 800e622:	4b44      	ldr	r3, [pc, #272]	; (800e734 <FastestRun+0x280>)
 800e624:	4a52      	ldr	r2, [pc, #328]	; (800e770 <FastestRun+0x2bc>)
 800e626:	601a      	str	r2, [r3, #0]
		Sla.Pre = 3;
 800e628:	4b45      	ldr	r3, [pc, #276]	; (800e740 <FastestRun+0x28c>)
 800e62a:	4a52      	ldr	r2, [pc, #328]	; (800e774 <FastestRun+0x2c0>)
 800e62c:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800e62e:	4b44      	ldr	r3, [pc, #272]	; (800e740 <FastestRun+0x28c>)
 800e630:	4a4a      	ldr	r2, [pc, #296]	; (800e75c <FastestRun+0x2a8>)
 800e632:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.117;
 800e634:	4b42      	ldr	r3, [pc, #264]	; (800e740 <FastestRun+0x28c>)
 800e636:	4a50      	ldr	r2, [pc, #320]	; (800e778 <FastestRun+0x2c4>)
 800e638:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800e63a:	4b41      	ldr	r3, [pc, #260]	; (800e740 <FastestRun+0x28c>)
 800e63c:	4a44      	ldr	r2, [pc, #272]	; (800e750 <FastestRun+0x29c>)
 800e63e:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800e640:	4b3f      	ldr	r3, [pc, #252]	; (800e740 <FastestRun+0x28c>)
 800e642:	4a44      	ldr	r2, [pc, #272]	; (800e754 <FastestRun+0x2a0>)
 800e644:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800e646:	4b3e      	ldr	r3, [pc, #248]	; (800e740 <FastestRun+0x28c>)
 800e648:	4a3c      	ldr	r2, [pc, #240]	; (800e73c <FastestRun+0x288>)
 800e64a:	619a      	str	r2, [r3, #24]
		break;
 800e64c:	bf00      	nop

	}

	ChangeLED(4);
 800e64e:	2004      	movs	r0, #4
 800e650:	f002 fbf6 	bl	8010e40 <ChangeLED>

	//マップデータの取得。flashから壁データを取得。
	flash_copy_to_ram();
 800e654:	f7fc fe24 	bl	800b2a0 <flash_copy_to_ram>

	SearchOrFast = 1;
 800e658:	4b48      	ldr	r3, [pc, #288]	; (800e77c <FastestRun+0x2c8>)
 800e65a:	2201      	movs	r2, #1
 800e65c:	601a      	str	r2, [r3, #0]
	//走る
	goal_edge_num = two;
 800e65e:	4b48      	ldr	r3, [pc, #288]	; (800e780 <FastestRun+0x2cc>)
 800e660:	2202      	movs	r2, #2
 800e662:	701a      	strb	r2, [r3, #0]
//			HAL_Delay(300);
//			break;
//	}
	//shiftPos();

	TargetVelocity[BODY] = 0;
 800e664:	4b47      	ldr	r3, [pc, #284]	; (800e784 <FastestRun+0x2d0>)
 800e666:	f04f 0200 	mov.w	r2, #0
 800e66a:	609a      	str	r2, [r3, #8]
	Acceleration = 0;
 800e66c:	4b46      	ldr	r3, [pc, #280]	; (800e788 <FastestRun+0x2d4>)
 800e66e:	f04f 0200 	mov.w	r2, #0
 800e672:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 800e674:	4b45      	ldr	r3, [pc, #276]	; (800e78c <FastestRun+0x2d8>)
 800e676:	f04f 0200 	mov.w	r2, #0
 800e67a:	601a      	str	r2, [r3, #0]
	PIDReset(L_VELO_PID);
 800e67c:	2004      	movs	r0, #4
 800e67e:	f003 f98d 	bl	801199c <PIDReset>
	PIDReset(R_VELO_PID);
 800e682:	2005      	movs	r0, #5
 800e684:	f003 f98a 	bl	801199c <PIDReset>
	PIDReset(A_VELO_PID);
 800e688:	2000      	movs	r0, #0
 800e68a:	f003 f987 	bl	801199c <PIDReset>
	PIDReset(L_WALL_PID);
 800e68e:	2002      	movs	r0, #2
 800e690:	f003 f984 	bl	801199c <PIDReset>
	PIDReset(R_WALL_PID);
 800e694:	2003      	movs	r0, #3
 800e696:	f003 f981 	bl	801199c <PIDReset>
	HAL_Delay(200);
 800e69a:	20c8      	movs	r0, #200	; 0xc8
 800e69c:	f003 fcac 	bl	8011ff8 <HAL_Delay>
	//加速
	Pos.Dir = front;
 800e6a0:	4b3b      	ldr	r3, [pc, #236]	; (800e790 <FastestRun+0x2dc>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	711a      	strb	r2, [r3, #4]
	switch(Pos.Car%4)
 800e6a6:	4b3a      	ldr	r3, [pc, #232]	; (800e790 <FastestRun+0x2dc>)
 800e6a8:	795b      	ldrb	r3, [r3, #5]
 800e6aa:	f003 0303 	and.w	r3, r3, #3
 800e6ae:	2b06      	cmp	r3, #6
 800e6b0:	d87e      	bhi.n	800e7b0 <FastestRun+0x2fc>
 800e6b2:	a201      	add	r2, pc, #4	; (adr r2, 800e6b8 <FastestRun+0x204>)
 800e6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b8:	0800e6d5 	.word	0x0800e6d5
 800e6bc:	0800e7b1 	.word	0x0800e7b1
 800e6c0:	0800e6f1 	.word	0x0800e6f1
 800e6c4:	0800e7b1 	.word	0x0800e7b1
 800e6c8:	0800e70d 	.word	0x0800e70d
 800e6cc:	0800e7b1 	.word	0x0800e7b1
 800e6d0:	0800e795 	.word	0x0800e795
	{
	case north:
		Pos.NextX = Pos.X;
 800e6d4:	4b2e      	ldr	r3, [pc, #184]	; (800e790 <FastestRun+0x2dc>)
 800e6d6:	781a      	ldrb	r2, [r3, #0]
 800e6d8:	4b2d      	ldr	r3, [pc, #180]	; (800e790 <FastestRun+0x2dc>)
 800e6da:	721a      	strb	r2, [r3, #8]
		Pos.NextY = Pos.Y + 1;
 800e6dc:	4b2c      	ldr	r3, [pc, #176]	; (800e790 <FastestRun+0x2dc>)
 800e6de:	785b      	ldrb	r3, [r3, #1]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	4b2a      	ldr	r3, [pc, #168]	; (800e790 <FastestRun+0x2dc>)
 800e6e6:	725a      	strb	r2, [r3, #9]
		Pos.NextCar = north;
 800e6e8:	4b29      	ldr	r3, [pc, #164]	; (800e790 <FastestRun+0x2dc>)
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	72da      	strb	r2, [r3, #11]
		break;
 800e6ee:	e05f      	b.n	800e7b0 <FastestRun+0x2fc>
	case east:
		Pos.NextX = Pos.X + 1;
 800e6f0:	4b27      	ldr	r3, [pc, #156]	; (800e790 <FastestRun+0x2dc>)
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	b2da      	uxtb	r2, r3
 800e6f8:	4b25      	ldr	r3, [pc, #148]	; (800e790 <FastestRun+0x2dc>)
 800e6fa:	721a      	strb	r2, [r3, #8]
		Pos.NextY = Pos.Y;
 800e6fc:	4b24      	ldr	r3, [pc, #144]	; (800e790 <FastestRun+0x2dc>)
 800e6fe:	785a      	ldrb	r2, [r3, #1]
 800e700:	4b23      	ldr	r3, [pc, #140]	; (800e790 <FastestRun+0x2dc>)
 800e702:	725a      	strb	r2, [r3, #9]
		Pos.NextCar = east;
 800e704:	4b22      	ldr	r3, [pc, #136]	; (800e790 <FastestRun+0x2dc>)
 800e706:	2202      	movs	r2, #2
 800e708:	72da      	strb	r2, [r3, #11]
		break;
 800e70a:	e051      	b.n	800e7b0 <FastestRun+0x2fc>
	case south:
		Pos.NextX = Pos.X;
 800e70c:	4b20      	ldr	r3, [pc, #128]	; (800e790 <FastestRun+0x2dc>)
 800e70e:	781a      	ldrb	r2, [r3, #0]
 800e710:	4b1f      	ldr	r3, [pc, #124]	; (800e790 <FastestRun+0x2dc>)
 800e712:	721a      	strb	r2, [r3, #8]
		Pos.NextY = Pos.Y - 1;
 800e714:	4b1e      	ldr	r3, [pc, #120]	; (800e790 <FastestRun+0x2dc>)
 800e716:	785b      	ldrb	r3, [r3, #1]
 800e718:	3b01      	subs	r3, #1
 800e71a:	b2da      	uxtb	r2, r3
 800e71c:	4b1c      	ldr	r3, [pc, #112]	; (800e790 <FastestRun+0x2dc>)
 800e71e:	725a      	strb	r2, [r3, #9]
		Pos.NextCar = south;
 800e720:	4b1b      	ldr	r3, [pc, #108]	; (800e790 <FastestRun+0x2dc>)
 800e722:	2204      	movs	r2, #4
 800e724:	72da      	strb	r2, [r3, #11]
		break;
 800e726:	e043      	b.n	800e7b0 <FastestRun+0x2fc>
 800e728:	20000ac4 	.word	0x20000ac4
 800e72c:	20000b04 	.word	0x20000b04
 800e730:	0801c4a4 	.word	0x0801c4a4
 800e734:	20000bf8 	.word	0x20000bf8
 800e738:	43c80000 	.word	0x43c80000
 800e73c:	42b40000 	.word	0x42b40000
 800e740:	20000b1c 	.word	0x20000b1c
 800e744:	40e00000 	.word	0x40e00000
 800e748:	41300000 	.word	0x41300000
 800e74c:	3c656042 	.word	0x3c656042
 800e750:	41f00000 	.word	0x41f00000
 800e754:	42700000 	.word	0x42700000
 800e758:	43070000 	.word	0x43070000
 800e75c:	40a00000 	.word	0x40a00000
 800e760:	3cdfa440 	.word	0x3cdfa440
 800e764:	43340000 	.word	0x43340000
 800e768:	40600000 	.word	0x40600000
 800e76c:	3d23d70a 	.word	0x3d23d70a
 800e770:	43960000 	.word	0x43960000
 800e774:	40400000 	.word	0x40400000
 800e778:	3def9db2 	.word	0x3def9db2
 800e77c:	20000d70 	.word	0x20000d70
 800e780:	20000b00 	.word	0x20000b00
 800e784:	20000ad0 	.word	0x20000ad0
 800e788:	2000022c 	.word	0x2000022c
 800e78c:	20000ae0 	.word	0x20000ae0
 800e790:	20000000 	.word	0x20000000
	case west:
		Pos.NextX = Pos.X - 1;
 800e794:	4b19      	ldr	r3, [pc, #100]	; (800e7fc <FastestRun+0x348>)
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	3b01      	subs	r3, #1
 800e79a:	b2da      	uxtb	r2, r3
 800e79c:	4b17      	ldr	r3, [pc, #92]	; (800e7fc <FastestRun+0x348>)
 800e79e:	721a      	strb	r2, [r3, #8]
		Pos.NextY = Pos.Y;
 800e7a0:	4b16      	ldr	r3, [pc, #88]	; (800e7fc <FastestRun+0x348>)
 800e7a2:	785a      	ldrb	r2, [r3, #1]
 800e7a4:	4b15      	ldr	r3, [pc, #84]	; (800e7fc <FastestRun+0x348>)
 800e7a6:	725a      	strb	r2, [r3, #9]
		Pos.NextCar = west;
 800e7a8:	4b14      	ldr	r3, [pc, #80]	; (800e7fc <FastestRun+0x348>)
 800e7aa:	2206      	movs	r2, #6
 800e7ac:	72da      	strb	r2, [r3, #11]
		break;
 800e7ae:	bf00      	nop
	}
	Accel(61.5, ExploreVelocity);
 800e7b0:	4b13      	ldr	r3, [pc, #76]	; (800e800 <FastestRun+0x34c>)
 800e7b2:	edd3 7a00 	vldr	s15, [r3]
 800e7b6:	eef0 0a67 	vmov.f32	s1, s15
 800e7ba:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800e804 <FastestRun+0x350>
 800e7be:	f7fb f983 	bl	8009ac8 <Accel>
	shiftPos();
 800e7c2:	f000 f977 	bl	800eab4 <shiftPos>
	fast_run( X_GOAL_LESSER, Y_GOAL_LESSER,X_GOAL_LARGER,Y_GOAL_LARGER, turn_mode,0x03);
 800e7c6:	2303      	movs	r3, #3
 800e7c8:	9301      	str	r3, [sp, #4]
 800e7ca:	79fb      	ldrb	r3, [r7, #7]
 800e7cc:	9300      	str	r3, [sp, #0]
 800e7ce:	2308      	movs	r3, #8
 800e7d0:	2208      	movs	r2, #8
 800e7d2:	2107      	movs	r1, #7
 800e7d4:	2007      	movs	r0, #7
 800e7d6:	f000 fba7 	bl	800ef28 <fast_run>

	//ゴールしたら減速して、停止。
	Decel(45,0);
 800e7da:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800e808 <FastestRun+0x354>
 800e7de:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800e80c <FastestRun+0x358>
 800e7e2:	f7fb fa65 	bl	8009cb0 <Decel>
	//終了合図
	Signal(7);
 800e7e6:	2007      	movs	r0, #7
 800e7e8:	f003 fa64 	bl	8011cb4 <Signal>

	while(1)
	{
		HAL_Delay(10*1000);
 800e7ec:	f242 7010 	movw	r0, #10000	; 0x2710
 800e7f0:	f003 fc02 	bl	8011ff8 <HAL_Delay>
		printf("ログ出力\r\n");
 800e7f4:	4806      	ldr	r0, [pc, #24]	; (800e810 <FastestRun+0x35c>)
 800e7f6:	f00a f9b9 	bl	8018b6c <puts>
		HAL_Delay(10*1000);
 800e7fa:	e7f7      	b.n	800e7ec <FastestRun+0x338>
 800e7fc:	20000000 	.word	0x20000000
 800e800:	20000bf8 	.word	0x20000bf8
 800e804:	42760000 	.word	0x42760000
 800e808:	00000000 	.word	0x00000000
 800e80c:	42340000 	.word	0x42340000
 800e810:	0801c528 	.word	0x0801c528

0800e814 <Explore>:
	}
}
void Explore()
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b0d4      	sub	sp, #336	; 0x150
 800e818:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800e81a:	4b8c      	ldr	r3, [pc, #560]	; (800ea4c <Explore+0x238>)
 800e81c:	2206      	movs	r2, #6
 800e81e:	601a      	str	r2, [r3, #0]
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800e820:	2064      	movs	r0, #100	; 0x64
 800e822:	f003 fbe9 	bl	8011ff8 <HAL_Delay>
	int8_t mode=1;
 800e826:	2301      	movs	r3, #1
 800e828:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
	ModeSelect( 1, 2, &mode);
 800e82c:	f507 73a7 	add.w	r3, r7, #334	; 0x14e
 800e830:	461a      	mov	r2, r3
 800e832:	2102      	movs	r1, #2
 800e834:	2001      	movs	r0, #1
 800e836:	f003 fab5 	bl	8011da4 <ModeSelect>
	Signal( mode );
 800e83a:	f997 314e 	ldrsb.w	r3, [r7, #334]	; 0x14e
 800e83e:	4618      	mov	r0, r3
 800e840:	f003 fa38 	bl	8011cb4 <Signal>
	HAL_Delay(100);
 800e844:	2064      	movs	r0, #100	; 0x64
 800e846:	f003 fbd7 	bl	8011ff8 <HAL_Delay>

	int8_t mode2=1;
 800e84a:	2301      	movs	r3, #1
 800e84c:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
	ModeSelect( 1, 4, &mode2);
 800e850:	f207 134d 	addw	r3, r7, #333	; 0x14d
 800e854:	461a      	mov	r2, r3
 800e856:	2104      	movs	r1, #4
 800e858:	2001      	movs	r0, #1
 800e85a:	f003 faa3 	bl	8011da4 <ModeSelect>
	Signal( mode2 );
 800e85e:	f997 314d 	ldrsb.w	r3, [r7, #333]	; 0x14d
 800e862:	4618      	mov	r0, r3
 800e864:	f003 fa26 	bl	8011cb4 <Signal>
	PhotoSwitch();
 800e868:	f003 fa7a 	bl	8011d60 <PhotoSwitch>
	InitExplore();
 800e86c:	f7ff fab8 	bl	800dde0 <InitExplore>
	InitPosition();
 800e870:	f7fa fac2 	bl	8008df8 <InitPosition>
	wall_init();
 800e874:	f7fc f9c4 	bl	800ac00 <wall_init>

	TotalPulse[RIGHT] = 0;
 800e878:	4b75      	ldr	r3, [pc, #468]	; (800ea50 <Explore+0x23c>)
 800e87a:	2200      	movs	r2, #0
 800e87c:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800e87e:	4b74      	ldr	r3, [pc, #464]	; (800ea50 <Explore+0x23c>)
 800e880:	2200      	movs	r2, #0
 800e882:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800e884:	4b72      	ldr	r3, [pc, #456]	; (800ea50 <Explore+0x23c>)
 800e886:	2200      	movs	r2, #0
 800e888:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800e88a:	2101      	movs	r1, #1
 800e88c:	2004      	movs	r0, #4
 800e88e:	f003 f86f 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800e892:	2101      	movs	r1, #1
 800e894:	2005      	movs	r0, #5
 800e896:	f003 f86b 	bl	8011970 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800e89a:	2100      	movs	r1, #0
 800e89c:	2001      	movs	r0, #1
 800e89e:	f003 f867 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	2002      	movs	r0, #2
 800e8a6:	f003 f863 	bl	8011970 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800e8aa:	2100      	movs	r1, #0
 800e8ac:	2003      	movs	r0, #3
 800e8ae:	f003 f85f 	bl	8011970 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	ChangeLED(2);
 800e8b2:	2002      	movs	r0, #2
 800e8b4:	f002 fac4 	bl	8010e40 <ChangeLED>

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode;
	if(mode == 1)
 800e8b8:	f997 314e 	ldrsb.w	r3, [r7, #334]	; 0x14e
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d106      	bne.n	800e8ce <Explore+0xba>
	{
		turn_mode = 'T';
 800e8c0:	2354      	movs	r3, #84	; 0x54
 800e8c2:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
		ExploreVelocity=300;
 800e8c6:	4b63      	ldr	r3, [pc, #396]	; (800ea54 <Explore+0x240>)
 800e8c8:	4a63      	ldr	r2, [pc, #396]	; (800ea58 <Explore+0x244>)
 800e8ca:	601a      	str	r2, [r3, #0]
 800e8cc:	e006      	b.n	800e8dc <Explore+0xc8>
	}
	else if(mode == 2)
 800e8ce:	f997 314e 	ldrsb.w	r3, [r7, #334]	; 0x14e
 800e8d2:	2b02      	cmp	r3, #2
 800e8d4:	d102      	bne.n	800e8dc <Explore+0xc8>
	{
		turn_mode = 'S';
 800e8d6:	2353      	movs	r3, #83	; 0x53
 800e8d8:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	}

	switch(mode2)
 800e8dc:	f997 314d 	ldrsb.w	r3, [r7, #333]	; 0x14d
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	2b03      	cmp	r3, #3
 800e8e4:	d865      	bhi.n	800e9b2 <Explore+0x19e>
 800e8e6:	a201      	add	r2, pc, #4	; (adr r2, 800e8ec <Explore+0xd8>)
 800e8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ec:	0800e8fd 	.word	0x0800e8fd
 800e8f0:	0800e929 	.word	0x0800e929
 800e8f4:	0800e957 	.word	0x0800e957
 800e8f8:	0800e987 	.word	0x0800e987
	{
	case 1:
		ExploreVelocity=90;
 800e8fc:	4b55      	ldr	r3, [pc, #340]	; (800ea54 <Explore+0x240>)
 800e8fe:	4a57      	ldr	r2, [pc, #348]	; (800ea5c <Explore+0x248>)
 800e900:	601a      	str	r2, [r3, #0]
		//未
		Sla.Pre = 9;
 800e902:	4b57      	ldr	r3, [pc, #348]	; (800ea60 <Explore+0x24c>)
 800e904:	4a57      	ldr	r2, [pc, #348]	; (800ea64 <Explore+0x250>)
 800e906:	601a      	str	r2, [r3, #0]
		Sla.Fol = 20;
 800e908:	4b55      	ldr	r3, [pc, #340]	; (800ea60 <Explore+0x24c>)
 800e90a:	4a57      	ldr	r2, [pc, #348]	; (800ea68 <Explore+0x254>)
 800e90c:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.014;
 800e90e:	4b54      	ldr	r3, [pc, #336]	; (800ea60 <Explore+0x24c>)
 800e910:	4a56      	ldr	r2, [pc, #344]	; (800ea6c <Explore+0x258>)
 800e912:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800e914:	4b52      	ldr	r3, [pc, #328]	; (800ea60 <Explore+0x24c>)
 800e916:	4a56      	ldr	r2, [pc, #344]	; (800ea70 <Explore+0x25c>)
 800e918:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800e91a:	4b51      	ldr	r3, [pc, #324]	; (800ea60 <Explore+0x24c>)
 800e91c:	4a55      	ldr	r2, [pc, #340]	; (800ea74 <Explore+0x260>)
 800e91e:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800e920:	4b4f      	ldr	r3, [pc, #316]	; (800ea60 <Explore+0x24c>)
 800e922:	4a4e      	ldr	r2, [pc, #312]	; (800ea5c <Explore+0x248>)
 800e924:	619a      	str	r2, [r3, #24]
//		Sla.Fol = 12;
//		Sla.Alalpha = 0.0007;
//		Sla.Theta1 = 30;
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;
		break;
 800e926:	e044      	b.n	800e9b2 <Explore+0x19e>
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;



		ExploreVelocity=180;
 800e928:	4b4a      	ldr	r3, [pc, #296]	; (800ea54 <Explore+0x240>)
 800e92a:	4a53      	ldr	r2, [pc, #332]	; (800ea78 <Explore+0x264>)
 800e92c:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800e92e:	4b4c      	ldr	r3, [pc, #304]	; (800ea60 <Explore+0x24c>)
 800e930:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e934:	601a      	str	r2, [r3, #0]
		Sla.Fol = 16.5;
 800e936:	4b4a      	ldr	r3, [pc, #296]	; (800ea60 <Explore+0x24c>)
 800e938:	4a50      	ldr	r2, [pc, #320]	; (800ea7c <Explore+0x268>)
 800e93a:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.043;
 800e93c:	4b48      	ldr	r3, [pc, #288]	; (800ea60 <Explore+0x24c>)
 800e93e:	4a50      	ldr	r2, [pc, #320]	; (800ea80 <Explore+0x26c>)
 800e940:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800e942:	4b47      	ldr	r3, [pc, #284]	; (800ea60 <Explore+0x24c>)
 800e944:	4a4a      	ldr	r2, [pc, #296]	; (800ea70 <Explore+0x25c>)
 800e946:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800e948:	4b45      	ldr	r3, [pc, #276]	; (800ea60 <Explore+0x24c>)
 800e94a:	4a4a      	ldr	r2, [pc, #296]	; (800ea74 <Explore+0x260>)
 800e94c:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800e94e:	4b44      	ldr	r3, [pc, #272]	; (800ea60 <Explore+0x24c>)
 800e950:	4a42      	ldr	r2, [pc, #264]	; (800ea5c <Explore+0x248>)
 800e952:	619a      	str	r2, [r3, #24]
		break;
 800e954:	e02d      	b.n	800e9b2 <Explore+0x19e>
	case 3:
		ExploreVelocity=240;
 800e956:	4b3f      	ldr	r3, [pc, #252]	; (800ea54 <Explore+0x240>)
 800e958:	4a4a      	ldr	r2, [pc, #296]	; (800ea84 <Explore+0x270>)
 800e95a:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800e95c:	4b40      	ldr	r3, [pc, #256]	; (800ea60 <Explore+0x24c>)
 800e95e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e962:	601a      	str	r2, [r3, #0]
		Sla.Fol = 16;
 800e964:	4b3e      	ldr	r3, [pc, #248]	; (800ea60 <Explore+0x24c>)
 800e966:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800e96a:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.078;
 800e96c:	4b3c      	ldr	r3, [pc, #240]	; (800ea60 <Explore+0x24c>)
 800e96e:	4a46      	ldr	r2, [pc, #280]	; (800ea88 <Explore+0x274>)
 800e970:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800e972:	4b3b      	ldr	r3, [pc, #236]	; (800ea60 <Explore+0x24c>)
 800e974:	4a3e      	ldr	r2, [pc, #248]	; (800ea70 <Explore+0x25c>)
 800e976:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800e978:	4b39      	ldr	r3, [pc, #228]	; (800ea60 <Explore+0x24c>)
 800e97a:	4a3e      	ldr	r2, [pc, #248]	; (800ea74 <Explore+0x260>)
 800e97c:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800e97e:	4b38      	ldr	r3, [pc, #224]	; (800ea60 <Explore+0x24c>)
 800e980:	4a36      	ldr	r2, [pc, #216]	; (800ea5c <Explore+0x248>)
 800e982:	619a      	str	r2, [r3, #24]
		break;
 800e984:	e015      	b.n	800e9b2 <Explore+0x19e>
	case 4:
		ExploreVelocity=300;
 800e986:	4b33      	ldr	r3, [pc, #204]	; (800ea54 <Explore+0x240>)
 800e988:	4a33      	ldr	r2, [pc, #204]	; (800ea58 <Explore+0x244>)
 800e98a:	601a      	str	r2, [r3, #0]
		Sla.Pre = 3;
 800e98c:	4b34      	ldr	r3, [pc, #208]	; (800ea60 <Explore+0x24c>)
 800e98e:	4a3f      	ldr	r2, [pc, #252]	; (800ea8c <Explore+0x278>)
 800e990:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800e992:	4b33      	ldr	r3, [pc, #204]	; (800ea60 <Explore+0x24c>)
 800e994:	4a3e      	ldr	r2, [pc, #248]	; (800ea90 <Explore+0x27c>)
 800e996:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.117;
 800e998:	4b31      	ldr	r3, [pc, #196]	; (800ea60 <Explore+0x24c>)
 800e99a:	4a3e      	ldr	r2, [pc, #248]	; (800ea94 <Explore+0x280>)
 800e99c:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800e99e:	4b30      	ldr	r3, [pc, #192]	; (800ea60 <Explore+0x24c>)
 800e9a0:	4a33      	ldr	r2, [pc, #204]	; (800ea70 <Explore+0x25c>)
 800e9a2:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800e9a4:	4b2e      	ldr	r3, [pc, #184]	; (800ea60 <Explore+0x24c>)
 800e9a6:	4a33      	ldr	r2, [pc, #204]	; (800ea74 <Explore+0x260>)
 800e9a8:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800e9aa:	4b2d      	ldr	r3, [pc, #180]	; (800ea60 <Explore+0x24c>)
 800e9ac:	4a2b      	ldr	r2, [pc, #172]	; (800ea5c <Explore+0x248>)
 800e9ae:	619a      	str	r2, [r3, #24]
		//		//未

		break;
 800e9b0:	bf00      	nop

	}
//	Pos.TargetX = X_GOAL_LESSER;
//	Pos.TargetY = Y_GOAL_LESSER;
//	goal_edge_num = two;
	SearchOrFast = 0;
 800e9b2:	4b39      	ldr	r3, [pc, #228]	; (800ea98 <Explore+0x284>)
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	601a      	str	r2, [r3, #0]
//	Pos.Dir = front;
//	Pos.Car = north;
//	Pos.NextX = Pos.X;
//	Pos.NextY = Pos.Y + 1;
//	Pos.NextCar = north;
	initSearchData(&my_map, &my_mouse);
 800e9b8:	4938      	ldr	r1, [pc, #224]	; (800ea9c <Explore+0x288>)
 800e9ba:	4839      	ldr	r0, [pc, #228]	; (800eaa0 <Explore+0x28c>)
 800e9bc:	f001 fcde 	bl	801037c <initSearchData>
	dbc = 1;
 800e9c0:	4b38      	ldr	r3, [pc, #224]	; (800eaa4 <Explore+0x290>)
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	601a      	str	r2, [r3, #0]
	Accel(61.5, ExploreVelocity);
 800e9c6:	4b23      	ldr	r3, [pc, #140]	; (800ea54 <Explore+0x240>)
 800e9c8:	edd3 7a00 	vldr	s15, [r3]
 800e9cc:	eef0 0a67 	vmov.f32	s1, s15
 800e9d0:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800eaa8 <Explore+0x294>
 800e9d4:	f7fb f878 	bl	8009ac8 <Accel>
//	{
//		ChangeLED(7);
//		TargetVelocity[BODY] = 0;
//	}

	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800e9d8:	e006      	b.n	800e9e8 <Explore+0x1d4>

//		//ChangeLED(Pos.Car);
//		KyushinJudge();
//		SelectAction(turn_mode);
//		shiftPos();
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800e9da:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 800e9de:	461a      	mov	r2, r3
 800e9e0:	492e      	ldr	r1, [pc, #184]	; (800ea9c <Explore+0x288>)
 800e9e2:	482f      	ldr	r0, [pc, #188]	; (800eaa0 <Explore+0x28c>)
 800e9e4:	f001 fe32 	bl	801064c <getNextDirection>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800e9e8:	4b2c      	ldr	r3, [pc, #176]	; (800ea9c <Explore+0x288>)
 800e9ea:	781a      	ldrb	r2, [r3, #0]
 800e9ec:	4b2b      	ldr	r3, [pc, #172]	; (800ea9c <Explore+0x288>)
 800e9ee:	7a1b      	ldrb	r3, [r3, #8]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d8f2      	bhi.n	800e9da <Explore+0x1c6>
 800e9f4:	4b29      	ldr	r3, [pc, #164]	; (800ea9c <Explore+0x288>)
 800e9f6:	7a1a      	ldrb	r2, [r3, #8]
 800e9f8:	4b28      	ldr	r3, [pc, #160]	; (800ea9c <Explore+0x288>)
 800e9fa:	789b      	ldrb	r3, [r3, #2]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d8ec      	bhi.n	800e9da <Explore+0x1c6>
 800ea00:	4b26      	ldr	r3, [pc, #152]	; (800ea9c <Explore+0x288>)
 800ea02:	785a      	ldrb	r2, [r3, #1]
 800ea04:	4b25      	ldr	r3, [pc, #148]	; (800ea9c <Explore+0x288>)
 800ea06:	7a5b      	ldrb	r3, [r3, #9]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d8e6      	bhi.n	800e9da <Explore+0x1c6>
 800ea0c:	4b23      	ldr	r3, [pc, #140]	; (800ea9c <Explore+0x288>)
 800ea0e:	7a5a      	ldrb	r2, [r3, #9]
 800ea10:	4b22      	ldr	r3, [pc, #136]	; (800ea9c <Explore+0x288>)
 800ea12:	78db      	ldrb	r3, [r3, #3]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d8e0      	bhi.n	800e9da <Explore+0x1c6>
	}
//	while(1)
//	{
//		TargetVelocity[BODY] = 0;
//	}
	Decel(45, 0);
 800ea18:	eddf 0a24 	vldr	s1, [pc, #144]	; 800eaac <Explore+0x298>
 800ea1c:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800eab0 <Explore+0x29c>
 800ea20:	f7fb f946 	bl	8009cb0 <Decel>
	shiftState(&my_mouse);
 800ea24:	481d      	ldr	r0, [pc, #116]	; (800ea9c <Explore+0x288>)
 800ea26:	f7ff f9c1 	bl	800ddac <shiftState>
//	//flashのクリア。
//	Flash_clear_sector1();
//	//マップ書き込み
//	flash_store_init();
	//完了の合図
	Signal(7);
 800ea2a:	2007      	movs	r0, #7
 800ea2c:	f003 f942 	bl	8011cb4 <Signal>

while(1)
{
	//迷路データの出力
	printAllNode(&my_map);
 800ea30:	481b      	ldr	r0, [pc, #108]	; (800eaa0 <Explore+0x28c>)
 800ea32:	f7fd f87f 	bl	800bb34 <printAllNode>
	printMatrix16ValueFromNode(&my_map);
 800ea36:	481a      	ldr	r0, [pc, #104]	; (800eaa0 <Explore+0x28c>)
 800ea38:	f7fd f940 	bl	800bcbc <printMatrix16ValueFromNode>
	printAllWeight(&my_map, &(my_mouse.now.node->pos) );
 800ea3c:	4b17      	ldr	r3, [pc, #92]	; (800ea9c <Explore+0x288>)
 800ea3e:	691b      	ldr	r3, [r3, #16]
 800ea40:	3304      	adds	r3, #4
 800ea42:	4619      	mov	r1, r3
 800ea44:	4816      	ldr	r0, [pc, #88]	; (800eaa0 <Explore+0x28c>)
 800ea46:	f7fc fd39 	bl	800b4bc <printAllWeight>
	printAllNode(&my_map);
 800ea4a:	e7f1      	b.n	800ea30 <Explore+0x21c>
 800ea4c:	20000ac4 	.word	0x20000ac4
 800ea50:	20000b04 	.word	0x20000b04
 800ea54:	20000bf8 	.word	0x20000bf8
 800ea58:	43960000 	.word	0x43960000
 800ea5c:	42b40000 	.word	0x42b40000
 800ea60:	20000b1c 	.word	0x20000b1c
 800ea64:	41100000 	.word	0x41100000
 800ea68:	41a00000 	.word	0x41a00000
 800ea6c:	3c656042 	.word	0x3c656042
 800ea70:	41f00000 	.word	0x41f00000
 800ea74:	42700000 	.word	0x42700000
 800ea78:	43340000 	.word	0x43340000
 800ea7c:	41840000 	.word	0x41840000
 800ea80:	3d3020c5 	.word	0x3d3020c5
 800ea84:	43700000 	.word	0x43700000
 800ea88:	3d9fbe77 	.word	0x3d9fbe77
 800ea8c:	40400000 	.word	0x40400000
 800ea90:	40a00000 	.word	0x40a00000
 800ea94:	3def9db2 	.word	0x3def9db2
 800ea98:	20000d70 	.word	0x20000d70
 800ea9c:	200004dc 	.word	0x200004dc
 800eaa0:	20000688 	.word	0x20000688
 800eaa4:	20000218 	.word	0x20000218
 800eaa8:	42760000 	.word	0x42760000
 800eaac:	00000000 	.word	0x00000000
 800eab0:	42340000 	.word	0x42340000

0800eab4 <shiftPos>:
#include "PID_Control.h"
#include "Action.h"
int Calc;
int SearchOrFast;
void shiftPos()
{
 800eab4:	b480      	push	{r7}
 800eab6:	af00      	add	r7, sp, #0
	Pos.Car = Pos.NextCar;
 800eab8:	4b08      	ldr	r3, [pc, #32]	; (800eadc <shiftPos+0x28>)
 800eaba:	7ada      	ldrb	r2, [r3, #11]
 800eabc:	4b07      	ldr	r3, [pc, #28]	; (800eadc <shiftPos+0x28>)
 800eabe:	715a      	strb	r2, [r3, #5]
	Pos.X = Pos.NextX;
 800eac0:	4b06      	ldr	r3, [pc, #24]	; (800eadc <shiftPos+0x28>)
 800eac2:	7a1a      	ldrb	r2, [r3, #8]
 800eac4:	4b05      	ldr	r3, [pc, #20]	; (800eadc <shiftPos+0x28>)
 800eac6:	701a      	strb	r2, [r3, #0]
	Pos.Y = Pos.NextY;
 800eac8:	4b04      	ldr	r3, [pc, #16]	; (800eadc <shiftPos+0x28>)
 800eaca:	7a5a      	ldrb	r2, [r3, #9]
 800eacc:	4b03      	ldr	r3, [pc, #12]	; (800eadc <shiftPos+0x28>)
 800eace:	705a      	strb	r2, [r3, #1]
}
 800ead0:	bf00      	nop
 800ead2:	46bd      	mov	sp, r7
 800ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop
 800eadc:	20000000 	.word	0x20000000

0800eae0 <is_unknown>:
    	  default:
    		  break;
    	  }//swtich end
}
_Bool is_unknown(int x, int y)	//指定された区画が未探索か否かを判断する関数 未探索:true　探索済:false
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
	//座標x,yが未探索区間か否かを調べる

	if((Wall[x][y].north == UNKNOWN) || (Wall[x][y].east == UNKNOWN) || (Wall[x][y].south == UNKNOWN) || (Wall[x][y].west == UNKNOWN))
 800eaea:	4920      	ldr	r1, [pc, #128]	; (800eb6c <is_unknown+0x8c>)
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	4613      	mov	r3, r2
 800eaf0:	00db      	lsls	r3, r3, #3
 800eaf2:	4413      	add	r3, r2
 800eaf4:	683a      	ldr	r2, [r7, #0]
 800eaf6:	4413      	add	r3, r2
 800eaf8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800eafc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	2b02      	cmp	r3, #2
 800eb04:	d029      	beq.n	800eb5a <is_unknown+0x7a>
 800eb06:	4919      	ldr	r1, [pc, #100]	; (800eb6c <is_unknown+0x8c>)
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	4613      	mov	r3, r2
 800eb0c:	00db      	lsls	r3, r3, #3
 800eb0e:	4413      	add	r3, r2
 800eb10:	683a      	ldr	r2, [r7, #0]
 800eb12:	4413      	add	r3, r2
 800eb14:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800eb18:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	2b02      	cmp	r3, #2
 800eb20:	d01b      	beq.n	800eb5a <is_unknown+0x7a>
 800eb22:	4912      	ldr	r1, [pc, #72]	; (800eb6c <is_unknown+0x8c>)
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	4613      	mov	r3, r2
 800eb28:	00db      	lsls	r3, r3, #3
 800eb2a:	4413      	add	r3, r2
 800eb2c:	683a      	ldr	r2, [r7, #0]
 800eb2e:	4413      	add	r3, r2
 800eb30:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800eb34:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	2b02      	cmp	r3, #2
 800eb3c:	d00d      	beq.n	800eb5a <is_unknown+0x7a>
 800eb3e:	490b      	ldr	r1, [pc, #44]	; (800eb6c <is_unknown+0x8c>)
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	4613      	mov	r3, r2
 800eb44:	00db      	lsls	r3, r3, #3
 800eb46:	4413      	add	r3, r2
 800eb48:	683a      	ldr	r2, [r7, #0]
 800eb4a:	4413      	add	r3, r2
 800eb4c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800eb50:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800eb54:	b2db      	uxtb	r3, r3
 800eb56:	2b02      	cmp	r3, #2
 800eb58:	d101      	bne.n	800eb5e <is_unknown+0x7e>
	{			//どこかの壁情報が不明のままであれば
		return true;	//未探索
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	e000      	b.n	800eb60 <is_unknown+0x80>
	}
	else
	{
		return false;	//探索済
 800eb5e:	2300      	movs	r3, #0
	}
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	370c      	adds	r7, #12
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr
 800eb6c:	20000ccc 	.word	0x20000ccc

0800eb70 <get_priority>:
int get_priority(int x, int y, cardinal car)	//そのマスの情報から、優先度を算出する
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b086      	sub	sp, #24
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	60b9      	str	r1, [r7, #8]
 800eb7a:	4613      	mov	r3, r2
 800eb7c:	71fb      	strb	r3, [r7, #7]
	//それに加え、自分の向きと、行きたい方向から、
	//前(2)横(1)後(0)の優先度を付加する。

	int priority;	//優先度を記録する変数

	priority = 0;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	617b      	str	r3, [r7, #20]

	if(Pos.Car == car)				//行きたい方向が現在の進行方向と同じ場合
 800eb82:	4b15      	ldr	r3, [pc, #84]	; (800ebd8 <get_priority+0x68>)
 800eb84:	795b      	ldrb	r3, [r3, #5]
 800eb86:	79fa      	ldrb	r2, [r7, #7]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d102      	bne.n	800eb92 <get_priority+0x22>
	{
		priority = 2;
 800eb8c:	2302      	movs	r3, #2
 800eb8e:	617b      	str	r3, [r7, #20]
 800eb90:	e012      	b.n	800ebb8 <get_priority+0x48>
	}
	else if( ((4+Pos.Car-car)%4) == 2)		//行きたい方向が現在の進行方向と逆の場合
 800eb92:	4b11      	ldr	r3, [pc, #68]	; (800ebd8 <get_priority+0x68>)
 800eb94:	795b      	ldrb	r3, [r3, #5]
 800eb96:	1d1a      	adds	r2, r3, #4
 800eb98:	79fb      	ldrb	r3, [r7, #7]
 800eb9a:	1ad3      	subs	r3, r2, r3
 800eb9c:	425a      	negs	r2, r3
 800eb9e:	f003 0303 	and.w	r3, r3, #3
 800eba2:	f002 0203 	and.w	r2, r2, #3
 800eba6:	bf58      	it	pl
 800eba8:	4253      	negpl	r3, r2
 800ebaa:	2b02      	cmp	r3, #2
 800ebac:	d102      	bne.n	800ebb4 <get_priority+0x44>
	{
		priority = 0;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	617b      	str	r3, [r7, #20]
 800ebb2:	e001      	b.n	800ebb8 <get_priority+0x48>
	}
	else						//それ以外(左右どちらか)の場合
	{
		priority = 1;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	617b      	str	r3, [r7, #20]
	}


	if(is_unknown(x,y) == true)
 800ebb8:	68b9      	ldr	r1, [r7, #8]
 800ebba:	68f8      	ldr	r0, [r7, #12]
 800ebbc:	f7ff ff90 	bl	800eae0 <is_unknown>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d002      	beq.n	800ebcc <get_priority+0x5c>
	{
		priority += 4;				//未探索の場合優先度をさらに付加
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	3304      	adds	r3, #4
 800ebca:	617b      	str	r3, [r7, #20]
	}

	return priority;				//優先度を返す
 800ebcc:	697b      	ldr	r3, [r7, #20]

}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3718      	adds	r7, #24
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	20000000 	.word	0x20000000

0800ebdc <get_nextdir>:
int get_nextdir(int x, int y, int mask)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b088      	sub	sp, #32
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	607a      	str	r2, [r7, #4]
	//ゴール座標x,yに向かう場合、今どちらに行くべきかを判断する。
	//探索、最短の切り替えのためのmaskを指定、dirは方角を示す
	int little,priority,tmp_priority;		//最小の値を探すために使用する変数


	make_map(x,y,mask);				//歩数Map生成
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	b2db      	uxtb	r3, r3
 800ebec:	68ba      	ldr	r2, [r7, #8]
 800ebee:	b2d1      	uxtb	r1, r2
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7fc fa36 	bl	800b064 <make_map>
	little = 255;					//最小歩数を255歩(mapがunsigned char型なので)に設定
 800ebf8:	23ff      	movs	r3, #255	; 0xff
 800ebfa:	61fb      	str	r3, [r7, #28]

	priority = 0;					//優先度の初期値は0
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	61bb      	str	r3, [r7, #24]

		//maskの意味はstatic_parameter.hを参照
	if( (Wall[Pos.X][Pos.Y].north & mask) == NOWALL)			//北に壁がなければ
 800ec00:	4b80      	ldr	r3, [pc, #512]	; (800ee04 <get_nextdir+0x228>)
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	4619      	mov	r1, r3
 800ec06:	4b7f      	ldr	r3, [pc, #508]	; (800ee04 <get_nextdir+0x228>)
 800ec08:	785b      	ldrb	r3, [r3, #1]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	4a7e      	ldr	r2, [pc, #504]	; (800ee08 <get_nextdir+0x22c>)
 800ec0e:	460b      	mov	r3, r1
 800ec10:	00db      	lsls	r3, r3, #3
 800ec12:	440b      	add	r3, r1
 800ec14:	4403      	add	r3, r0
 800ec16:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ec1a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	461a      	mov	r2, r3
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	4013      	ands	r3, r2
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d149      	bne.n	800ecbe <get_nextdir+0xe2>
	{
		tmp_priority = get_priority(Pos.X, Pos.Y + 1, north);	//優先度を算出
 800ec2a:	4b76      	ldr	r3, [pc, #472]	; (800ee04 <get_nextdir+0x228>)
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	4b74      	ldr	r3, [pc, #464]	; (800ee04 <get_nextdir+0x228>)
 800ec32:	785b      	ldrb	r3, [r3, #1]
 800ec34:	3301      	adds	r3, #1
 800ec36:	2200      	movs	r2, #0
 800ec38:	4619      	mov	r1, r3
 800ec3a:	f7ff ff99 	bl	800eb70 <get_priority>
 800ec3e:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X][Pos.Y+1] < little)				//一番歩数が小さい方向を見つける
 800ec40:	4b70      	ldr	r3, [pc, #448]	; (800ee04 <get_nextdir+0x228>)
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	4618      	mov	r0, r3
 800ec46:	4b6f      	ldr	r3, [pc, #444]	; (800ee04 <get_nextdir+0x228>)
 800ec48:	785b      	ldrb	r3, [r3, #1]
 800ec4a:	1c5a      	adds	r2, r3, #1
 800ec4c:	496f      	ldr	r1, [pc, #444]	; (800ee0c <get_nextdir+0x230>)
 800ec4e:	4603      	mov	r3, r0
 800ec50:	00db      	lsls	r3, r3, #3
 800ec52:	4403      	add	r3, r0
 800ec54:	4413      	add	r3, r2
 800ec56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	dd13      	ble.n	800ec8a <get_nextdir+0xae>
		{
			little = walk_map[Pos.X][Pos.Y+1];			//ひとまず北が歩数が小さい事にする
 800ec62:	4b68      	ldr	r3, [pc, #416]	; (800ee04 <get_nextdir+0x228>)
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	4618      	mov	r0, r3
 800ec68:	4b66      	ldr	r3, [pc, #408]	; (800ee04 <get_nextdir+0x228>)
 800ec6a:	785b      	ldrb	r3, [r3, #1]
 800ec6c:	1c5a      	adds	r2, r3, #1
 800ec6e:	4967      	ldr	r1, [pc, #412]	; (800ee0c <get_nextdir+0x230>)
 800ec70:	4603      	mov	r3, r0
 800ec72:	00db      	lsls	r3, r3, #3
 800ec74:	4403      	add	r3, r0
 800ec76:	4413      	add	r3, r2
 800ec78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ec7c:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = north;						//方向を保存
 800ec7e:	4b61      	ldr	r3, [pc, #388]	; (800ee04 <get_nextdir+0x228>)
 800ec80:	2200      	movs	r2, #0
 800ec82:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	61bb      	str	r3, [r7, #24]
 800ec88:	e019      	b.n	800ecbe <get_nextdir+0xe2>
		}
		else if(walk_map[Pos.X][Pos.Y+1] == little)			//歩数が同じ場合は優先度から判断する
 800ec8a:	4b5e      	ldr	r3, [pc, #376]	; (800ee04 <get_nextdir+0x228>)
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	4618      	mov	r0, r3
 800ec90:	4b5c      	ldr	r3, [pc, #368]	; (800ee04 <get_nextdir+0x228>)
 800ec92:	785b      	ldrb	r3, [r3, #1]
 800ec94:	1c5a      	adds	r2, r3, #1
 800ec96:	495d      	ldr	r1, [pc, #372]	; (800ee0c <get_nextdir+0x230>)
 800ec98:	4603      	mov	r3, r0
 800ec9a:	00db      	lsls	r3, r3, #3
 800ec9c:	4403      	add	r3, r0
 800ec9e:	4413      	add	r3, r2
 800eca0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eca4:	461a      	mov	r2, r3
 800eca6:	69fb      	ldr	r3, [r7, #28]
 800eca8:	4293      	cmp	r3, r2
 800ecaa:	d108      	bne.n	800ecbe <get_nextdir+0xe2>
		{
			if(priority < tmp_priority )				//優先度を評価
 800ecac:	69ba      	ldr	r2, [r7, #24]
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	da04      	bge.n	800ecbe <get_nextdir+0xe2>
			{
				Pos.NextCar = north;					//方向を更新
 800ecb4:	4b53      	ldr	r3, [pc, #332]	; (800ee04 <get_nextdir+0x228>)
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	72da      	strb	r2, [r3, #11]
				priority = tmp_priority;			//優先度を保存
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].east & mask) == NOWALL)			//東に壁がなければ
 800ecbe:	4b51      	ldr	r3, [pc, #324]	; (800ee04 <get_nextdir+0x228>)
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	4b4f      	ldr	r3, [pc, #316]	; (800ee04 <get_nextdir+0x228>)
 800ecc6:	785b      	ldrb	r3, [r3, #1]
 800ecc8:	4618      	mov	r0, r3
 800ecca:	4a4f      	ldr	r2, [pc, #316]	; (800ee08 <get_nextdir+0x22c>)
 800eccc:	460b      	mov	r3, r1
 800ecce:	00db      	lsls	r3, r3, #3
 800ecd0:	440b      	add	r3, r1
 800ecd2:	4403      	add	r3, r0
 800ecd4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ecd8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	461a      	mov	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	4013      	ands	r3, r2
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d148      	bne.n	800ed7a <get_nextdir+0x19e>
	{
		tmp_priority = get_priority(Pos.X + 1, Pos.Y, east);	//優先度を算出
 800ece8:	4b46      	ldr	r3, [pc, #280]	; (800ee04 <get_nextdir+0x228>)
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	1c58      	adds	r0, r3, #1
 800ecee:	4b45      	ldr	r3, [pc, #276]	; (800ee04 <get_nextdir+0x228>)
 800ecf0:	785b      	ldrb	r3, [r3, #1]
 800ecf2:	2202      	movs	r2, #2
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	f7ff ff3b 	bl	800eb70 <get_priority>
 800ecfa:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X + 1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800ecfc:	4b41      	ldr	r3, [pc, #260]	; (800ee04 <get_nextdir+0x228>)
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	1c5a      	adds	r2, r3, #1
 800ed02:	4b40      	ldr	r3, [pc, #256]	; (800ee04 <get_nextdir+0x228>)
 800ed04:	785b      	ldrb	r3, [r3, #1]
 800ed06:	4618      	mov	r0, r3
 800ed08:	4940      	ldr	r1, [pc, #256]	; (800ee0c <get_nextdir+0x230>)
 800ed0a:	4613      	mov	r3, r2
 800ed0c:	00db      	lsls	r3, r3, #3
 800ed0e:	4413      	add	r3, r2
 800ed10:	4403      	add	r3, r0
 800ed12:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ed16:	461a      	mov	r2, r3
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	dd13      	ble.n	800ed46 <get_nextdir+0x16a>
		{
			little = walk_map[Pos.X+1][Pos.Y];			//ひとまず東が歩数が小さい事にする
 800ed1e:	4b39      	ldr	r3, [pc, #228]	; (800ee04 <get_nextdir+0x228>)
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	1c5a      	adds	r2, r3, #1
 800ed24:	4b37      	ldr	r3, [pc, #220]	; (800ee04 <get_nextdir+0x228>)
 800ed26:	785b      	ldrb	r3, [r3, #1]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	4938      	ldr	r1, [pc, #224]	; (800ee0c <get_nextdir+0x230>)
 800ed2c:	4613      	mov	r3, r2
 800ed2e:	00db      	lsls	r3, r3, #3
 800ed30:	4413      	add	r3, r2
 800ed32:	4403      	add	r3, r0
 800ed34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ed38:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = east;						//方向を保存
 800ed3a:	4b32      	ldr	r3, [pc, #200]	; (800ee04 <get_nextdir+0x228>)
 800ed3c:	2202      	movs	r2, #2
 800ed3e:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	61bb      	str	r3, [r7, #24]
 800ed44:	e019      	b.n	800ed7a <get_nextdir+0x19e>
		}
		else if(walk_map[Pos.X + 1][Pos.Y] == little)			//歩数が同じ場合、優先度から判断
 800ed46:	4b2f      	ldr	r3, [pc, #188]	; (800ee04 <get_nextdir+0x228>)
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	1c5a      	adds	r2, r3, #1
 800ed4c:	4b2d      	ldr	r3, [pc, #180]	; (800ee04 <get_nextdir+0x228>)
 800ed4e:	785b      	ldrb	r3, [r3, #1]
 800ed50:	4618      	mov	r0, r3
 800ed52:	492e      	ldr	r1, [pc, #184]	; (800ee0c <get_nextdir+0x230>)
 800ed54:	4613      	mov	r3, r2
 800ed56:	00db      	lsls	r3, r3, #3
 800ed58:	4413      	add	r3, r2
 800ed5a:	4403      	add	r3, r0
 800ed5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ed60:	461a      	mov	r2, r3
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d108      	bne.n	800ed7a <get_nextdir+0x19e>
		{
			if(priority < tmp_priority)				//優先度を評価
 800ed68:	69ba      	ldr	r2, [r7, #24]
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	da04      	bge.n	800ed7a <get_nextdir+0x19e>
			{
				Pos.NextCar = east;					//方向を保存
 800ed70:	4b24      	ldr	r3, [pc, #144]	; (800ee04 <get_nextdir+0x228>)
 800ed72:	2202      	movs	r2, #2
 800ed74:	72da      	strb	r2, [r3, #11]
				priority = tmp_priority;			//優先度を保存
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].south & mask) == NOWALL)			//南に壁がなければ
 800ed7a:	4b22      	ldr	r3, [pc, #136]	; (800ee04 <get_nextdir+0x228>)
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	4619      	mov	r1, r3
 800ed80:	4b20      	ldr	r3, [pc, #128]	; (800ee04 <get_nextdir+0x228>)
 800ed82:	785b      	ldrb	r3, [r3, #1]
 800ed84:	4618      	mov	r0, r3
 800ed86:	4a20      	ldr	r2, [pc, #128]	; (800ee08 <get_nextdir+0x22c>)
 800ed88:	460b      	mov	r3, r1
 800ed8a:	00db      	lsls	r3, r3, #3
 800ed8c:	440b      	add	r3, r1
 800ed8e:	4403      	add	r3, r0
 800ed90:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ed94:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	4013      	ands	r3, r2
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d14f      	bne.n	800ee44 <get_nextdir+0x268>
	{
		tmp_priority = get_priority(Pos.X, Pos.Y - 1, south);	//優先度を算出
 800eda4:	4b17      	ldr	r3, [pc, #92]	; (800ee04 <get_nextdir+0x228>)
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	4618      	mov	r0, r3
 800edaa:	4b16      	ldr	r3, [pc, #88]	; (800ee04 <get_nextdir+0x228>)
 800edac:	785b      	ldrb	r3, [r3, #1]
 800edae:	3b01      	subs	r3, #1
 800edb0:	2204      	movs	r2, #4
 800edb2:	4619      	mov	r1, r3
 800edb4:	f7ff fedc 	bl	800eb70 <get_priority>
 800edb8:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X][Pos.Y - 1] < little)				//一番歩数が小さい方向を見つける
 800edba:	4b12      	ldr	r3, [pc, #72]	; (800ee04 <get_nextdir+0x228>)
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	4618      	mov	r0, r3
 800edc0:	4b10      	ldr	r3, [pc, #64]	; (800ee04 <get_nextdir+0x228>)
 800edc2:	785b      	ldrb	r3, [r3, #1]
 800edc4:	1e5a      	subs	r2, r3, #1
 800edc6:	4911      	ldr	r1, [pc, #68]	; (800ee0c <get_nextdir+0x230>)
 800edc8:	4603      	mov	r3, r0
 800edca:	00db      	lsls	r3, r3, #3
 800edcc:	4403      	add	r3, r0
 800edce:	4413      	add	r3, r2
 800edd0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800edd4:	461a      	mov	r2, r3
 800edd6:	69fb      	ldr	r3, [r7, #28]
 800edd8:	4293      	cmp	r3, r2
 800edda:	dd19      	ble.n	800ee10 <get_nextdir+0x234>
		{
			little = walk_map[Pos.X][Pos.Y-1];			//ひとまず南が歩数が小さい事にする
 800eddc:	4b09      	ldr	r3, [pc, #36]	; (800ee04 <get_nextdir+0x228>)
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	4618      	mov	r0, r3
 800ede2:	4b08      	ldr	r3, [pc, #32]	; (800ee04 <get_nextdir+0x228>)
 800ede4:	785b      	ldrb	r3, [r3, #1]
 800ede6:	1e5a      	subs	r2, r3, #1
 800ede8:	4908      	ldr	r1, [pc, #32]	; (800ee0c <get_nextdir+0x230>)
 800edea:	4603      	mov	r3, r0
 800edec:	00db      	lsls	r3, r3, #3
 800edee:	4403      	add	r3, r0
 800edf0:	4413      	add	r3, r2
 800edf2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800edf6:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = south;						//方向を保存
 800edf8:	4b02      	ldr	r3, [pc, #8]	; (800ee04 <get_nextdir+0x228>)
 800edfa:	2204      	movs	r2, #4
 800edfc:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	61bb      	str	r3, [r7, #24]
 800ee02:	e01f      	b.n	800ee44 <get_nextdir+0x268>
 800ee04:	20000000 	.word	0x20000000
 800ee08:	20000ccc 	.word	0x20000ccc
 800ee0c:	20000b54 	.word	0x20000b54
		}
		else if(walk_map[Pos.X][Pos.Y - 1] == little)			//歩数が同じ場合、優先度で評価
 800ee10:	4b42      	ldr	r3, [pc, #264]	; (800ef1c <get_nextdir+0x340>)
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	4618      	mov	r0, r3
 800ee16:	4b41      	ldr	r3, [pc, #260]	; (800ef1c <get_nextdir+0x340>)
 800ee18:	785b      	ldrb	r3, [r3, #1]
 800ee1a:	1e5a      	subs	r2, r3, #1
 800ee1c:	4940      	ldr	r1, [pc, #256]	; (800ef20 <get_nextdir+0x344>)
 800ee1e:	4603      	mov	r3, r0
 800ee20:	00db      	lsls	r3, r3, #3
 800ee22:	4403      	add	r3, r0
 800ee24:	4413      	add	r3, r2
 800ee26:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d108      	bne.n	800ee44 <get_nextdir+0x268>
		{
			if(priority < tmp_priority)				//優先度を評価
 800ee32:	69ba      	ldr	r2, [r7, #24]
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	da04      	bge.n	800ee44 <get_nextdir+0x268>
			{
				Pos.NextCar = south;					//方向を保存
 800ee3a:	4b38      	ldr	r3, [pc, #224]	; (800ef1c <get_nextdir+0x340>)
 800ee3c:	2204      	movs	r2, #4
 800ee3e:	72da      	strb	r2, [r3, #11]
				priority = tmp_priority;			//優先度を保存
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].west & mask) == NOWALL)			//西に壁がなければ
 800ee44:	4b35      	ldr	r3, [pc, #212]	; (800ef1c <get_nextdir+0x340>)
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	4619      	mov	r1, r3
 800ee4a:	4b34      	ldr	r3, [pc, #208]	; (800ef1c <get_nextdir+0x340>)
 800ee4c:	785b      	ldrb	r3, [r3, #1]
 800ee4e:	4618      	mov	r0, r3
 800ee50:	4a34      	ldr	r2, [pc, #208]	; (800ef24 <get_nextdir+0x348>)
 800ee52:	460b      	mov	r3, r1
 800ee54:	00db      	lsls	r3, r3, #3
 800ee56:	440b      	add	r3, r1
 800ee58:	4403      	add	r3, r0
 800ee5a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ee5e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	461a      	mov	r2, r3
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	4013      	ands	r3, r2
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d144      	bne.n	800eef8 <get_nextdir+0x31c>
	{
		tmp_priority = get_priority(Pos.X - 1, Pos.Y, west);	//優先度を算出
 800ee6e:	4b2b      	ldr	r3, [pc, #172]	; (800ef1c <get_nextdir+0x340>)
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	1e58      	subs	r0, r3, #1
 800ee74:	4b29      	ldr	r3, [pc, #164]	; (800ef1c <get_nextdir+0x340>)
 800ee76:	785b      	ldrb	r3, [r3, #1]
 800ee78:	2206      	movs	r2, #6
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	f7ff fe78 	bl	800eb70 <get_priority>
 800ee80:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X-1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800ee82:	4b26      	ldr	r3, [pc, #152]	; (800ef1c <get_nextdir+0x340>)
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	1e5a      	subs	r2, r3, #1
 800ee88:	4b24      	ldr	r3, [pc, #144]	; (800ef1c <get_nextdir+0x340>)
 800ee8a:	785b      	ldrb	r3, [r3, #1]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	4924      	ldr	r1, [pc, #144]	; (800ef20 <get_nextdir+0x344>)
 800ee90:	4613      	mov	r3, r2
 800ee92:	00db      	lsls	r3, r3, #3
 800ee94:	4413      	add	r3, r2
 800ee96:	4403      	add	r3, r0
 800ee98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	69fb      	ldr	r3, [r7, #28]
 800eea0:	4293      	cmp	r3, r2
 800eea2:	dd13      	ble.n	800eecc <get_nextdir+0x2f0>
		{
			little = walk_map[Pos.X-1][Pos.Y];			//西が歩数が小さい
 800eea4:	4b1d      	ldr	r3, [pc, #116]	; (800ef1c <get_nextdir+0x340>)
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	1e5a      	subs	r2, r3, #1
 800eeaa:	4b1c      	ldr	r3, [pc, #112]	; (800ef1c <get_nextdir+0x340>)
 800eeac:	785b      	ldrb	r3, [r3, #1]
 800eeae:	4618      	mov	r0, r3
 800eeb0:	491b      	ldr	r1, [pc, #108]	; (800ef20 <get_nextdir+0x344>)
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	00db      	lsls	r3, r3, #3
 800eeb6:	4413      	add	r3, r2
 800eeb8:	4403      	add	r3, r0
 800eeba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eebe:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = west;						//方向を保存
 800eec0:	4b16      	ldr	r3, [pc, #88]	; (800ef1c <get_nextdir+0x340>)
 800eec2:	2206      	movs	r2, #6
 800eec4:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	61bb      	str	r3, [r7, #24]
 800eeca:	e015      	b.n	800eef8 <get_nextdir+0x31c>
		}
		else if(walk_map[Pos.X - 1][Pos.Y] == little)			//歩数が同じ場合、優先度で評価
 800eecc:	4b13      	ldr	r3, [pc, #76]	; (800ef1c <get_nextdir+0x340>)
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	1e5a      	subs	r2, r3, #1
 800eed2:	4b12      	ldr	r3, [pc, #72]	; (800ef1c <get_nextdir+0x340>)
 800eed4:	785b      	ldrb	r3, [r3, #1]
 800eed6:	4618      	mov	r0, r3
 800eed8:	4911      	ldr	r1, [pc, #68]	; (800ef20 <get_nextdir+0x344>)
 800eeda:	4613      	mov	r3, r2
 800eedc:	00db      	lsls	r3, r3, #3
 800eede:	4413      	add	r3, r2
 800eee0:	4403      	add	r3, r0
 800eee2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eee6:	461a      	mov	r2, r3
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d104      	bne.n	800eef8 <get_nextdir+0x31c>
		{
			Pos.NextCar = west;						//方向を保存
 800eeee:	4b0b      	ldr	r3, [pc, #44]	; (800ef1c <get_nextdir+0x340>)
 800eef0:	2206      	movs	r2, #6
 800eef2:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	61bb      	str	r3, [r7, #24]
		}
	}


	return ( (int)( ( 4 + Pos.NextCar - Pos.Car) % 4 ) );			//どっちに向かうべきかを返す。
 800eef8:	4b08      	ldr	r3, [pc, #32]	; (800ef1c <get_nextdir+0x340>)
 800eefa:	7adb      	ldrb	r3, [r3, #11]
 800eefc:	3304      	adds	r3, #4
 800eefe:	4a07      	ldr	r2, [pc, #28]	; (800ef1c <get_nextdir+0x340>)
 800ef00:	7952      	ldrb	r2, [r2, #5]
 800ef02:	1a9b      	subs	r3, r3, r2
 800ef04:	425a      	negs	r2, r3
 800ef06:	f003 0303 	and.w	r3, r3, #3
 800ef0a:	f002 0203 	and.w	r2, r2, #3
 800ef0e:	bf58      	it	pl
 800ef10:	4253      	negpl	r3, r2
										//演算の意味はmytyedef.h内のenum宣言から。

}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3720      	adds	r7, #32
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	20000000 	.word	0x20000000
 800ef20:	20000b54 	.word	0x20000b54
 800ef24:	20000ccc 	.word	0x20000ccc

0800ef28 <fast_run>:
void fast_run(int x, int y,int x2, int y2, char turn_mode, int mask)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	607a      	str	r2, [r7, #4]
 800ef34:	603b      	str	r3, [r7, #0]
//			Pos.X--;	//西を向いたときはX座標を減らす
//			break;
//
//	}

	while( !((x <= Pos.X && Pos.X <= x2) && (y <= Pos.Y && Pos.Y <= y2)) ){			//ゴールするまで繰り返す
 800ef36:	e059      	b.n	800efec <fast_run+0xc4>
		Pos.Dir = get_nextdir(x,y,mask);//新しい区画に入ったところで、次の方向を求める。方向と方角がわかる。
 800ef38:	69fa      	ldr	r2, [r7, #28]
 800ef3a:	68b9      	ldr	r1, [r7, #8]
 800ef3c:	68f8      	ldr	r0, [r7, #12]
 800ef3e:	f7ff fe4d 	bl	800ebdc <get_nextdir>
 800ef42:	4603      	mov	r3, r0
 800ef44:	b2da      	uxtb	r2, r3
 800ef46:	4b37      	ldr	r3, [pc, #220]	; (800f024 <fast_run+0xfc>)
 800ef48:	711a      	strb	r2, [r3, #4]
		//向いた方向によって自分の座標を更新する
		//printf("%d,%d\r\n",Pos.X,Pos.Y);
		switch(Pos.NextCar)//
 800ef4a:	4b36      	ldr	r3, [pc, #216]	; (800f024 <fast_run+0xfc>)
 800ef4c:	7adb      	ldrb	r3, [r3, #11]
 800ef4e:	2b06      	cmp	r3, #6
 800ef50:	d83c      	bhi.n	800efcc <fast_run+0xa4>
 800ef52:	a201      	add	r2, pc, #4	; (adr r2, 800ef58 <fast_run+0x30>)
 800ef54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef58:	0800ef75 	.word	0x0800ef75
 800ef5c:	0800efcd 	.word	0x0800efcd
 800ef60:	0800ef8b 	.word	0x0800ef8b
 800ef64:	0800efcd 	.word	0x0800efcd
 800ef68:	0800efa1 	.word	0x0800efa1
 800ef6c:	0800efcd 	.word	0x0800efcd
 800ef70:	0800efb7 	.word	0x0800efb7
		{
			case north:
				Pos.NextX = Pos.X;
 800ef74:	4b2b      	ldr	r3, [pc, #172]	; (800f024 <fast_run+0xfc>)
 800ef76:	781a      	ldrb	r2, [r3, #0]
 800ef78:	4b2a      	ldr	r3, [pc, #168]	; (800f024 <fast_run+0xfc>)
 800ef7a:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y + 1;	//北を向いた時はY座標を増やす
 800ef7c:	4b29      	ldr	r3, [pc, #164]	; (800f024 <fast_run+0xfc>)
 800ef7e:	785b      	ldrb	r3, [r3, #1]
 800ef80:	3301      	adds	r3, #1
 800ef82:	b2da      	uxtb	r2, r3
 800ef84:	4b27      	ldr	r3, [pc, #156]	; (800f024 <fast_run+0xfc>)
 800ef86:	725a      	strb	r2, [r3, #9]
				break;
 800ef88:	e020      	b.n	800efcc <fast_run+0xa4>

			case east:
				Pos.NextX = Pos.X + 1;	//東を向いた時はX座標を増やす
 800ef8a:	4b26      	ldr	r3, [pc, #152]	; (800f024 <fast_run+0xfc>)
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	3301      	adds	r3, #1
 800ef90:	b2da      	uxtb	r2, r3
 800ef92:	4b24      	ldr	r3, [pc, #144]	; (800f024 <fast_run+0xfc>)
 800ef94:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y;
 800ef96:	4b23      	ldr	r3, [pc, #140]	; (800f024 <fast_run+0xfc>)
 800ef98:	785a      	ldrb	r2, [r3, #1]
 800ef9a:	4b22      	ldr	r3, [pc, #136]	; (800f024 <fast_run+0xfc>)
 800ef9c:	725a      	strb	r2, [r3, #9]
				break;
 800ef9e:	e015      	b.n	800efcc <fast_run+0xa4>

			case south:
				Pos.NextX = Pos.X;
 800efa0:	4b20      	ldr	r3, [pc, #128]	; (800f024 <fast_run+0xfc>)
 800efa2:	781a      	ldrb	r2, [r3, #0]
 800efa4:	4b1f      	ldr	r3, [pc, #124]	; (800f024 <fast_run+0xfc>)
 800efa6:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y - 1;	//南を向いた時はY座標を減らす
 800efa8:	4b1e      	ldr	r3, [pc, #120]	; (800f024 <fast_run+0xfc>)
 800efaa:	785b      	ldrb	r3, [r3, #1]
 800efac:	3b01      	subs	r3, #1
 800efae:	b2da      	uxtb	r2, r3
 800efb0:	4b1c      	ldr	r3, [pc, #112]	; (800f024 <fast_run+0xfc>)
 800efb2:	725a      	strb	r2, [r3, #9]
				break;
 800efb4:	e00a      	b.n	800efcc <fast_run+0xa4>

			case west:
				Pos.NextX = Pos.X - 1;	//西を向いたときはX座標を減らす
 800efb6:	4b1b      	ldr	r3, [pc, #108]	; (800f024 <fast_run+0xfc>)
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	3b01      	subs	r3, #1
 800efbc:	b2da      	uxtb	r2, r3
 800efbe:	4b19      	ldr	r3, [pc, #100]	; (800f024 <fast_run+0xfc>)
 800efc0:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y;
 800efc2:	4b18      	ldr	r3, [pc, #96]	; (800f024 <fast_run+0xfc>)
 800efc4:	785a      	ldrb	r2, [r3, #1]
 800efc6:	4b17      	ldr	r3, [pc, #92]	; (800f024 <fast_run+0xfc>)
 800efc8:	725a      	strb	r2, [r3, #9]
				break;
 800efca:	bf00      	nop

		}
		SelectAction(turn_mode);
 800efcc:	7e3b      	ldrb	r3, [r7, #24]
 800efce:	4618      	mov	r0, r3
 800efd0:	f7fb f9c0 	bl	800a354 <SelectAction>
	 	Pos.X = Pos.NextX;
 800efd4:	4b13      	ldr	r3, [pc, #76]	; (800f024 <fast_run+0xfc>)
 800efd6:	7a1a      	ldrb	r2, [r3, #8]
 800efd8:	4b12      	ldr	r3, [pc, #72]	; (800f024 <fast_run+0xfc>)
 800efda:	701a      	strb	r2, [r3, #0]
	    Pos.Y = Pos.NextY;
 800efdc:	4b11      	ldr	r3, [pc, #68]	; (800f024 <fast_run+0xfc>)
 800efde:	7a5a      	ldrb	r2, [r3, #9]
 800efe0:	4b10      	ldr	r3, [pc, #64]	; (800f024 <fast_run+0xfc>)
 800efe2:	705a      	strb	r2, [r3, #1]
		Pos.Car = Pos.NextCar;	//自分の向きを修正
 800efe4:	4b0f      	ldr	r3, [pc, #60]	; (800f024 <fast_run+0xfc>)
 800efe6:	7ada      	ldrb	r2, [r3, #11]
 800efe8:	4b0e      	ldr	r3, [pc, #56]	; (800f024 <fast_run+0xfc>)
 800efea:	715a      	strb	r2, [r3, #5]
	while( !((x <= Pos.X && Pos.X <= x2) && (y <= Pos.Y && Pos.Y <= y2)) ){			//ゴールするまで繰り返す
 800efec:	4b0d      	ldr	r3, [pc, #52]	; (800f024 <fast_run+0xfc>)
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	461a      	mov	r2, r3
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	4293      	cmp	r3, r2
 800eff6:	dc9f      	bgt.n	800ef38 <fast_run+0x10>
 800eff8:	4b0a      	ldr	r3, [pc, #40]	; (800f024 <fast_run+0xfc>)
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	461a      	mov	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	4293      	cmp	r3, r2
 800f002:	db99      	blt.n	800ef38 <fast_run+0x10>
 800f004:	4b07      	ldr	r3, [pc, #28]	; (800f024 <fast_run+0xfc>)
 800f006:	785b      	ldrb	r3, [r3, #1]
 800f008:	461a      	mov	r2, r3
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	4293      	cmp	r3, r2
 800f00e:	dc93      	bgt.n	800ef38 <fast_run+0x10>
 800f010:	4b04      	ldr	r3, [pc, #16]	; (800f024 <fast_run+0xfc>)
 800f012:	785b      	ldrb	r3, [r3, #1]
 800f014:	461a      	mov	r2, r3
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	4293      	cmp	r3, r2
 800f01a:	db8d      	blt.n	800ef38 <fast_run+0x10>
//		Pos.Car = Pos.NextCar;	//自分の向きを修正
//
//
	}
//	straight(SECTION*straight_count,FAST_ACCEL,FAST_SPEED,0.0);
}
 800f01c:	bf00      	nop
 800f01e:	3710      	adds	r7, #16
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	20000000 	.word	0x20000000

0800f028 <__io_putchar>:
	#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#define GETCHAR_PROTOTYPE int f getc(FILE* f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800f030:	1d39      	adds	r1, r7, #4
 800f032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f036:	2201      	movs	r2, #1
 800f038:	4803      	ldr	r0, [pc, #12]	; (800f048 <__io_putchar+0x20>)
 800f03a:	f007 fa7f 	bl	801653c <HAL_UART_Transmit>
	return ch;
 800f03e:	687b      	ldr	r3, [r7, #4]
}
 800f040:	4618      	mov	r0, r3
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}
 800f048:	20000f20 	.word	0x20000f20

0800f04c <__io_getchar>:
int __io_getchar(void) {
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
HAL_StatusTypeDef Status = HAL_BUSY;
 800f052:	2302      	movs	r3, #2
 800f054:	71fb      	strb	r3, [r7, #7]
uint8_t Data;

while(Status != HAL_OK)
 800f056:	e007      	b.n	800f068 <__io_getchar+0x1c>
{
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800f058:	1db9      	adds	r1, r7, #6
 800f05a:	230a      	movs	r3, #10
 800f05c:	2201      	movs	r2, #1
 800f05e:	4806      	ldr	r0, [pc, #24]	; (800f078 <__io_getchar+0x2c>)
 800f060:	f007 fb05 	bl	801666e <HAL_UART_Receive>
 800f064:	4603      	mov	r3, r0
 800f066:	71fb      	strb	r3, [r7, #7]
while(Status != HAL_OK)
 800f068:	79fb      	ldrb	r3, [r7, #7]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d1f4      	bne.n	800f058 <__io_getchar+0xc>
//{
//	return 0;
//	break;
//}
}
return(Data);
 800f06e:	79bb      	ldrb	r3, [r7, #6]
}
 800f070:	4618      	mov	r0, r3
 800f072:	3708      	adds	r7, #8
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}
 800f078:	20000f20 	.word	0x20000f20

0800f07c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800f082:	f002 ff47 	bl	8011f14 <HAL_Init>

  /* USER CODE BEGIN Init */

  //バッ�?リチェ�?ク
  MX_GPIO_Init();
 800f086:	f000 fcfd 	bl	800fa84 <MX_GPIO_Init>
  MX_DMA_Init();
 800f08a:	f000 fcd3 	bl	800fa34 <MX_DMA_Init>
  MX_ADC1_Init();
 800f08e:	f000 f917 	bl	800f2c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800f092:	f000 f983 	bl	800f39c <MX_ADC2_Init>

  ADCStart();
 800f096:	f001 fc19 	bl	80108cc <ADCStart>
  BatteryCheck( (int)adc1[2] );
 800f09a:	4b4f      	ldr	r3, [pc, #316]	; (800f1d8 <main+0x15c>)
 800f09c:	689b      	ldr	r3, [r3, #8]
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f002 fe28 	bl	8011cf4 <BatteryCheck>
  ADCStop();
 800f0a4:	f001 fc32 	bl	801090c <ADCStop>

  //モード選�? //スイ�?チが押されるまでエンコー�?の処�?を受け付け�?
  MX_TIM3_Init();
 800f0a8:	f000 fad4 	bl	800f654 <MX_TIM3_Init>

  int8_t startup_mode;
  ModeSelect(0, 7, &startup_mode);
 800f0ac:	1dfb      	adds	r3, r7, #7
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	2107      	movs	r1, #7
 800f0b2:	2000      	movs	r0, #0
 800f0b4:	f002 fe76 	bl	8011da4 <ModeSelect>
  Signal( startup_mode );
 800f0b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f002 fdf9 	bl	8011cb4 <Signal>
  //MAX45mAでモード選択できる

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800f0c2:	f000 f893 	bl	800f1ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800f0c6:	f000 fcdd 	bl	800fa84 <MX_GPIO_Init>
  MX_DMA_Init();
 800f0ca:	f000 fcb3 	bl	800fa34 <MX_DMA_Init>
  MX_ADC1_Init();
 800f0ce:	f000 f8f7 	bl	800f2c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800f0d2:	f000 f963 	bl	800f39c <MX_ADC2_Init>
  MX_TIM3_Init();
 800f0d6:	f000 fabd 	bl	800f654 <MX_TIM3_Init>
  MX_TIM2_Init();
 800f0da:	f000 fa45 	bl	800f568 <MX_TIM2_Init>
  MX_SPI3_Init();
 800f0de:	f000 f9bd 	bl	800f45c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800f0e2:	f000 fc7d 	bl	800f9e0 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800f0e6:	f000 fb5d 	bl	800f7a4 <MX_TIM5_Init>
  MX_TIM4_Init();
 800f0ea:	f000 fb07 	bl	800f6fc <MX_TIM4_Init>
  MX_TIM8_Init();
 800f0ee:	f000 fbcf 	bl	800f890 <MX_TIM8_Init>
  MX_TIM1_Init();
 800f0f2:	f000 f9e9 	bl	800f4c8 <MX_TIM1_Init>

  }

#endif

  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);//1200,0);//2430,0);//7.3,1215,0);//40kHzの//14.6, 2430,0);//(20khzのと??��?��?);//1200,0.0);//2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);////D0.0036 //I2430くら 36.6*0.6=18+3.96
 800f0f6:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800f1dc <main+0x160>
 800f0fa:	eddf 0a39 	vldr	s1, [pc, #228]	; 800f1e0 <main+0x164>
 800f0fe:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800f1e4 <main+0x168>
 800f102:	2004      	movs	r0, #4
 800f104:	f002 fc08 	bl	8011918 <PIDSetGain>
  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);// 1200,0);//2430,0);//7.3,1215,0);//14.6, 2430,0);//1200,0.0);//, 2430,0);//17.5//2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);//I150,
 800f108:	ed9f 1a34 	vldr	s2, [pc, #208]	; 800f1dc <main+0x160>
 800f10c:	eddf 0a34 	vldr	s1, [pc, #208]	; 800f1e0 <main+0x164>
 800f110:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800f1e4 <main+0x168>
 800f114:	2005      	movs	r0, #5
 800f116:	f002 fbff 	bl	8011918 <PIDSetGain>
  //PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
  PIDSetGain(A_VELO_PID, 12,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800f11a:	ed9f 1a33 	vldr	s2, [pc, #204]	; 800f1e8 <main+0x16c>
 800f11e:	eddf 0a32 	vldr	s1, [pc, #200]	; 800f1e8 <main+0x16c>
 800f122:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800f126:	2000      	movs	r0, #0
 800f128:	f002 fbf6 	bl	8011918 <PIDSetGain>
  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800f12c:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 800f1e8 <main+0x16c>
 800f130:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800f1e8 <main+0x16c>
 800f134:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800f1e4 <main+0x168>
 800f138:	2008      	movs	r0, #8
 800f13a:	f002 fbed 	bl	8011918 <PIDSetGain>
  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800f13e:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800f1e8 <main+0x16c>
 800f142:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800f146:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800f14a:	2001      	movs	r0, #1
 800f14c:	f002 fbe4 	bl	8011918 <PIDSetGain>
  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800f150:	ed9f 1a25 	vldr	s2, [pc, #148]	; 800f1e8 <main+0x16c>
 800f154:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800f158:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800f15c:	2002      	movs	r0, #2
 800f15e:	f002 fbdb 	bl	8011918 <PIDSetGain>
  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800f162:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800f1e8 <main+0x16c>
 800f166:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800f16a:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800f16e:	2003      	movs	r0, #3
 800f170:	f002 fbd2 	bl	8011918 <PIDSetGain>

  while (1)
  {
	  switch( startup_mode )
 800f174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f178:	2b07      	cmp	r3, #7
 800f17a:	d82b      	bhi.n	800f1d4 <main+0x158>
 800f17c:	a201      	add	r2, pc, #4	; (adr r2, 800f184 <main+0x108>)
 800f17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f182:	bf00      	nop
 800f184:	0800f1a5 	.word	0x0800f1a5
 800f188:	0800f1ab 	.word	0x0800f1ab
 800f18c:	0800f1b1 	.word	0x0800f1b1
 800f190:	0800f1b7 	.word	0x0800f1b7
 800f194:	0800f1bd 	.word	0x0800f1bd
 800f198:	0800f1c3 	.word	0x0800f1c3
 800f19c:	0800f1c9 	.word	0x0800f1c9
 800f1a0:	0800f1cf 	.word	0x0800f1cf
	  {
	  case PARAMETERSETTING:

		  ParameterSetting();
 800f1a4:	f7ff f806 	bl	800e1b4 <ParameterSetting>
		//wall_flash_print();
		  break;
 800f1a8:	e015      	b.n	800f1d6 <main+0x15a>
	  case 1:
		  GainTestRWall();
 800f1aa:	f7ff f80b 	bl	800e1c4 <GainTestRWall>
		  break;
 800f1ae:	e012      	b.n	800f1d6 <main+0x15a>
	  case GAINTEST:
		  GainTestDWall();
 800f1b0:	f7ff f844 	bl	800e23c <GainTestDWall>
		  break;
 800f1b4:	e00f      	b.n	800f1d6 <main+0x15a>
	  case DEBUGGER:
		  Debug();
 800f1b6:	f7fe ff71 	bl	800e09c <Debug>
		  break;
 800f1ba:	e00c      	b.n	800f1d6 <main+0x15a>
	  case FASTEST_RUN:
		  //GainTestLWall();
		  FastestRun();
 800f1bc:	f7ff f97a 	bl	800e4b4 <FastestRun>
		  break;
 800f1c0:	e009      	b.n	800f1d6 <main+0x15a>
	  case 5:
		  GainTestAVelo();
 800f1c2:	f7ff f8a5 	bl	800e310 <GainTestAVelo>
		  break;
 800f1c6:	e006      	b.n	800f1d6 <main+0x15a>
	  case EXPLORE:
		  Explore();
 800f1c8:	f7ff fb24 	bl	800e814 <Explore>
		  break;
 800f1cc:	e003      	b.n	800f1d6 <main+0x15a>
	  case WRITINGFREE:
		  WritingFree();
 800f1ce:	f7ff f8df 	bl	800e390 <WritingFree>
		  break;
 800f1d2:	e000      	b.n	800f1d6 <main+0x15a>
	  default :
		  break;
 800f1d4:	bf00      	nop
	  switch( startup_mode )
 800f1d6:	e7cd      	b.n	800f174 <main+0xf8>
 800f1d8:	200002bc 	.word	0x200002bc
 800f1dc:	3a83126f 	.word	0x3a83126f
 800f1e0:	452f0000 	.word	0x452f0000
 800f1e4:	4169999a 	.word	0x4169999a
 800f1e8:	00000000 	.word	0x00000000

0800f1ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b094      	sub	sp, #80	; 0x50
 800f1f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f1f2:	f107 0320 	add.w	r3, r7, #32
 800f1f6:	2230      	movs	r2, #48	; 0x30
 800f1f8:	2100      	movs	r1, #0
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f008 f92f 	bl	801745e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f200:	f107 030c 	add.w	r3, r7, #12
 800f204:	2200      	movs	r2, #0
 800f206:	601a      	str	r2, [r3, #0]
 800f208:	605a      	str	r2, [r3, #4]
 800f20a:	609a      	str	r2, [r3, #8]
 800f20c:	60da      	str	r2, [r3, #12]
 800f20e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800f210:	2300      	movs	r3, #0
 800f212:	60bb      	str	r3, [r7, #8]
 800f214:	4b28      	ldr	r3, [pc, #160]	; (800f2b8 <SystemClock_Config+0xcc>)
 800f216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f218:	4a27      	ldr	r2, [pc, #156]	; (800f2b8 <SystemClock_Config+0xcc>)
 800f21a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f21e:	6413      	str	r3, [r2, #64]	; 0x40
 800f220:	4b25      	ldr	r3, [pc, #148]	; (800f2b8 <SystemClock_Config+0xcc>)
 800f222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f228:	60bb      	str	r3, [r7, #8]
 800f22a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f22c:	2300      	movs	r3, #0
 800f22e:	607b      	str	r3, [r7, #4]
 800f230:	4b22      	ldr	r3, [pc, #136]	; (800f2bc <SystemClock_Config+0xd0>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4a21      	ldr	r2, [pc, #132]	; (800f2bc <SystemClock_Config+0xd0>)
 800f236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f23a:	6013      	str	r3, [r2, #0]
 800f23c:	4b1f      	ldr	r3, [pc, #124]	; (800f2bc <SystemClock_Config+0xd0>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f244:	607b      	str	r3, [r7, #4]
 800f246:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f248:	2301      	movs	r3, #1
 800f24a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f24c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f250:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f252:	2302      	movs	r3, #2
 800f254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f256:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f25a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800f25c:	2304      	movs	r3, #4
 800f25e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800f260:	23a8      	movs	r3, #168	; 0xa8
 800f262:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f264:	2302      	movs	r3, #2
 800f266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800f268:	2304      	movs	r3, #4
 800f26a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f26c:	f107 0320 	add.w	r3, r7, #32
 800f270:	4618      	mov	r0, r3
 800f272:	f004 fbc7 	bl	8013a04 <HAL_RCC_OscConfig>
 800f276:	4603      	mov	r3, r0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d001      	beq.n	800f280 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800f27c:	f000 fcc8 	bl	800fc10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f280:	230f      	movs	r3, #15
 800f282:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f284:	2302      	movs	r3, #2
 800f286:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f288:	2300      	movs	r3, #0
 800f28a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f28c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f290:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f296:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800f298:	f107 030c 	add.w	r3, r7, #12
 800f29c:	2105      	movs	r1, #5
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f004 fe20 	bl	8013ee4 <HAL_RCC_ClockConfig>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d001      	beq.n	800f2ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800f2aa:	f000 fcb1 	bl	800fc10 <Error_Handler>
  }
}
 800f2ae:	bf00      	nop
 800f2b0:	3750      	adds	r7, #80	; 0x50
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	40023800 	.word	0x40023800
 800f2bc:	40007000 	.word	0x40007000

0800f2c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800f2c6:	463b      	mov	r3, r7
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	601a      	str	r2, [r3, #0]
 800f2cc:	605a      	str	r2, [r3, #4]
 800f2ce:	609a      	str	r2, [r3, #8]
 800f2d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800f2d2:	4b2f      	ldr	r3, [pc, #188]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f2d4:	4a2f      	ldr	r2, [pc, #188]	; (800f394 <MX_ADC1_Init+0xd4>)
 800f2d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f2d8:	4b2d      	ldr	r3, [pc, #180]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f2da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f2de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800f2e0:	4b2b      	ldr	r3, [pc, #172]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800f2e6:	4b2a      	ldr	r3, [pc, #168]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800f2ec:	4b28      	ldr	r3, [pc, #160]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800f2f2:	4b27      	ldr	r3, [pc, #156]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f2fa:	4b25      	ldr	r3, [pc, #148]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f300:	4b23      	ldr	r3, [pc, #140]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f302:	4a25      	ldr	r2, [pc, #148]	; (800f398 <MX_ADC1_Init+0xd8>)
 800f304:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f306:	4b22      	ldr	r3, [pc, #136]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f308:	2200      	movs	r2, #0
 800f30a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800f30c:	4b20      	ldr	r3, [pc, #128]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f30e:	2203      	movs	r2, #3
 800f310:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800f312:	4b1f      	ldr	r3, [pc, #124]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f314:	2201      	movs	r2, #1
 800f316:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f31a:	4b1d      	ldr	r3, [pc, #116]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f31c:	2201      	movs	r2, #1
 800f31e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800f320:	481b      	ldr	r0, [pc, #108]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f322:	f002 fe8b 	bl	801203c <HAL_ADC_Init>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d001      	beq.n	800f330 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800f32c:	f000 fc70 	bl	800fc10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800f330:	230a      	movs	r3, #10
 800f332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f334:	2301      	movs	r3, #1
 800f336:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800f338:	2303      	movs	r3, #3
 800f33a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f33c:	463b      	mov	r3, r7
 800f33e:	4619      	mov	r1, r3
 800f340:	4813      	ldr	r0, [pc, #76]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f342:	f003 f819 	bl	8012378 <HAL_ADC_ConfigChannel>
 800f346:	4603      	mov	r3, r0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d001      	beq.n	800f350 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800f34c:	f000 fc60 	bl	800fc10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800f350:	230e      	movs	r3, #14
 800f352:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800f354:	2302      	movs	r3, #2
 800f356:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f358:	463b      	mov	r3, r7
 800f35a:	4619      	mov	r1, r3
 800f35c:	480c      	ldr	r0, [pc, #48]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f35e:	f003 f80b 	bl	8012378 <HAL_ADC_ConfigChannel>
 800f362:	4603      	mov	r3, r0
 800f364:	2b00      	cmp	r3, #0
 800f366:	d001      	beq.n	800f36c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800f368:	f000 fc52 	bl	800fc10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800f36c:	2309      	movs	r3, #9
 800f36e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800f370:	2303      	movs	r3, #3
 800f372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f374:	463b      	mov	r3, r7
 800f376:	4619      	mov	r1, r3
 800f378:	4805      	ldr	r0, [pc, #20]	; (800f390 <MX_ADC1_Init+0xd0>)
 800f37a:	f002 fffd 	bl	8012378 <HAL_ADC_ConfigChannel>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b00      	cmp	r3, #0
 800f382:	d001      	beq.n	800f388 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800f384:	f000 fc44 	bl	800fc10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800f388:	bf00      	nop
 800f38a:	3710      	adds	r7, #16
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	20000ed8 	.word	0x20000ed8
 800f394:	40012000 	.word	0x40012000
 800f398:	0f000001 	.word	0x0f000001

0800f39c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800f3a2:	463b      	mov	r3, r7
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	601a      	str	r2, [r3, #0]
 800f3a8:	605a      	str	r2, [r3, #4]
 800f3aa:	609a      	str	r2, [r3, #8]
 800f3ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800f3ae:	4b28      	ldr	r3, [pc, #160]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f3b0:	4a28      	ldr	r2, [pc, #160]	; (800f454 <MX_ADC2_Init+0xb8>)
 800f3b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f3b4:	4b26      	ldr	r3, [pc, #152]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f3b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f3ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800f3bc:	4b24      	ldr	r3, [pc, #144]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f3be:	2200      	movs	r2, #0
 800f3c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800f3c2:	4b23      	ldr	r3, [pc, #140]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800f3c8:	4b21      	ldr	r3, [pc, #132]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800f3ce:	4b20      	ldr	r3, [pc, #128]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f3d6:	4b1e      	ldr	r3, [pc, #120]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f3d8:	2200      	movs	r2, #0
 800f3da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f3dc:	4b1c      	ldr	r3, [pc, #112]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f3de:	4a1e      	ldr	r2, [pc, #120]	; (800f458 <MX_ADC2_Init+0xbc>)
 800f3e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f3e2:	4b1b      	ldr	r3, [pc, #108]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800f3e8:	4b19      	ldr	r3, [pc, #100]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f3ea:	2202      	movs	r2, #2
 800f3ec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800f3ee:	4b18      	ldr	r3, [pc, #96]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f3f6:	4b16      	ldr	r3, [pc, #88]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f3f8:	2201      	movs	r2, #1
 800f3fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800f3fc:	4814      	ldr	r0, [pc, #80]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f3fe:	f002 fe1d 	bl	801203c <HAL_ADC_Init>
 800f402:	4603      	mov	r3, r0
 800f404:	2b00      	cmp	r3, #0
 800f406:	d001      	beq.n	800f40c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800f408:	f000 fc02 	bl	800fc10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800f40c:	230b      	movs	r3, #11
 800f40e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f410:	2301      	movs	r3, #1
 800f412:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800f414:	2303      	movs	r3, #3
 800f416:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f418:	463b      	mov	r3, r7
 800f41a:	4619      	mov	r1, r3
 800f41c:	480c      	ldr	r0, [pc, #48]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f41e:	f002 ffab 	bl	8012378 <HAL_ADC_ConfigChannel>
 800f422:	4603      	mov	r3, r0
 800f424:	2b00      	cmp	r3, #0
 800f426:	d001      	beq.n	800f42c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800f428:	f000 fbf2 	bl	800fc10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800f42c:	230f      	movs	r3, #15
 800f42e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800f430:	2302      	movs	r3, #2
 800f432:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f434:	463b      	mov	r3, r7
 800f436:	4619      	mov	r1, r3
 800f438:	4805      	ldr	r0, [pc, #20]	; (800f450 <MX_ADC2_Init+0xb4>)
 800f43a:	f002 ff9d 	bl	8012378 <HAL_ADC_ConfigChannel>
 800f43e:	4603      	mov	r3, r0
 800f440:	2b00      	cmp	r3, #0
 800f442:	d001      	beq.n	800f448 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800f444:	f000 fbe4 	bl	800fc10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800f448:	bf00      	nop
 800f44a:	3710      	adds	r7, #16
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}
 800f450:	20000df8 	.word	0x20000df8
 800f454:	40012100 	.word	0x40012100
 800f458:	0f000001 	.word	0x0f000001

0800f45c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800f460:	4b17      	ldr	r3, [pc, #92]	; (800f4c0 <MX_SPI3_Init+0x64>)
 800f462:	4a18      	ldr	r2, [pc, #96]	; (800f4c4 <MX_SPI3_Init+0x68>)
 800f464:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800f466:	4b16      	ldr	r3, [pc, #88]	; (800f4c0 <MX_SPI3_Init+0x64>)
 800f468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f46c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800f46e:	4b14      	ldr	r3, [pc, #80]	; (800f4c0 <MX_SPI3_Init+0x64>)
 800f470:	2200      	movs	r2, #0
 800f472:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800f474:	4b12      	ldr	r3, [pc, #72]	; (800f4c0 <MX_SPI3_Init+0x64>)
 800f476:	2200      	movs	r2, #0
 800f478:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800f47a:	4b11      	ldr	r3, [pc, #68]	; (800f4c0 <MX_SPI3_Init+0x64>)
 800f47c:	2202      	movs	r2, #2
 800f47e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800f480:	4b0f      	ldr	r3, [pc, #60]	; (800f4c0 <MX_SPI3_Init+0x64>)
 800f482:	2201      	movs	r2, #1
 800f484:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800f486:	4b0e      	ldr	r3, [pc, #56]	; (800f4c0 <MX_SPI3_Init+0x64>)
 800f488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f48c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800f48e:	4b0c      	ldr	r3, [pc, #48]	; (800f4c0 <MX_SPI3_Init+0x64>)
 800f490:	2228      	movs	r2, #40	; 0x28
 800f492:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f494:	4b0a      	ldr	r3, [pc, #40]	; (800f4c0 <MX_SPI3_Init+0x64>)
 800f496:	2200      	movs	r2, #0
 800f498:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800f49a:	4b09      	ldr	r3, [pc, #36]	; (800f4c0 <MX_SPI3_Init+0x64>)
 800f49c:	2200      	movs	r2, #0
 800f49e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f4a0:	4b07      	ldr	r3, [pc, #28]	; (800f4c0 <MX_SPI3_Init+0x64>)
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800f4a6:	4b06      	ldr	r3, [pc, #24]	; (800f4c0 <MX_SPI3_Init+0x64>)
 800f4a8:	220a      	movs	r2, #10
 800f4aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800f4ac:	4804      	ldr	r0, [pc, #16]	; (800f4c0 <MX_SPI3_Init+0x64>)
 800f4ae:	f004 ff0b 	bl	80142c8 <HAL_SPI_Init>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d001      	beq.n	800f4bc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800f4b8:	f000 fbaa 	bl	800fc10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800f4bc:	bf00      	nop
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	20000e80 	.word	0x20000e80
 800f4c4:	40003c00 	.word	0x40003c00

0800f4c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b086      	sub	sp, #24
 800f4cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f4ce:	f107 0308 	add.w	r3, r7, #8
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	601a      	str	r2, [r3, #0]
 800f4d6:	605a      	str	r2, [r3, #4]
 800f4d8:	609a      	str	r2, [r3, #8]
 800f4da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f4dc:	463b      	mov	r3, r7
 800f4de:	2200      	movs	r2, #0
 800f4e0:	601a      	str	r2, [r3, #0]
 800f4e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800f4e4:	4b1e      	ldr	r3, [pc, #120]	; (800f560 <MX_TIM1_Init+0x98>)
 800f4e6:	4a1f      	ldr	r2, [pc, #124]	; (800f564 <MX_TIM1_Init+0x9c>)
 800f4e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800f4ea:	4b1d      	ldr	r3, [pc, #116]	; (800f560 <MX_TIM1_Init+0x98>)
 800f4ec:	22a7      	movs	r2, #167	; 0xa7
 800f4ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f4f0:	4b1b      	ldr	r3, [pc, #108]	; (800f560 <MX_TIM1_Init+0x98>)
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800f4f6:	4b1a      	ldr	r3, [pc, #104]	; (800f560 <MX_TIM1_Init+0x98>)
 800f4f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f4fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f4fe:	4b18      	ldr	r3, [pc, #96]	; (800f560 <MX_TIM1_Init+0x98>)
 800f500:	2200      	movs	r2, #0
 800f502:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800f504:	4b16      	ldr	r3, [pc, #88]	; (800f560 <MX_TIM1_Init+0x98>)
 800f506:	2200      	movs	r2, #0
 800f508:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f50a:	4b15      	ldr	r3, [pc, #84]	; (800f560 <MX_TIM1_Init+0x98>)
 800f50c:	2200      	movs	r2, #0
 800f50e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800f510:	4813      	ldr	r0, [pc, #76]	; (800f560 <MX_TIM1_Init+0x98>)
 800f512:	f005 fc2d 	bl	8014d70 <HAL_TIM_Base_Init>
 800f516:	4603      	mov	r3, r0
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d001      	beq.n	800f520 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800f51c:	f000 fb78 	bl	800fc10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f524:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800f526:	f107 0308 	add.w	r3, r7, #8
 800f52a:	4619      	mov	r1, r3
 800f52c:	480c      	ldr	r0, [pc, #48]	; (800f560 <MX_TIM1_Init+0x98>)
 800f52e:	f006 f9f7 	bl	8015920 <HAL_TIM_ConfigClockSource>
 800f532:	4603      	mov	r3, r0
 800f534:	2b00      	cmp	r3, #0
 800f536:	d001      	beq.n	800f53c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800f538:	f000 fb6a 	bl	800fc10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f53c:	2300      	movs	r3, #0
 800f53e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f540:	2300      	movs	r3, #0
 800f542:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800f544:	463b      	mov	r3, r7
 800f546:	4619      	mov	r1, r3
 800f548:	4805      	ldr	r0, [pc, #20]	; (800f560 <MX_TIM1_Init+0x98>)
 800f54a:	f006 fea3 	bl	8016294 <HAL_TIMEx_MasterConfigSynchronization>
 800f54e:	4603      	mov	r3, r0
 800f550:	2b00      	cmp	r3, #0
 800f552:	d001      	beq.n	800f558 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800f554:	f000 fb5c 	bl	800fc10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800f558:	bf00      	nop
 800f55a:	3718      	adds	r7, #24
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	20000fc0 	.word	0x20000fc0
 800f564:	40010000 	.word	0x40010000

0800f568 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b08e      	sub	sp, #56	; 0x38
 800f56c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f56e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f572:	2200      	movs	r2, #0
 800f574:	601a      	str	r2, [r3, #0]
 800f576:	605a      	str	r2, [r3, #4]
 800f578:	609a      	str	r2, [r3, #8]
 800f57a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f57c:	f107 0320 	add.w	r3, r7, #32
 800f580:	2200      	movs	r2, #0
 800f582:	601a      	str	r2, [r3, #0]
 800f584:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f586:	1d3b      	adds	r3, r7, #4
 800f588:	2200      	movs	r2, #0
 800f58a:	601a      	str	r2, [r3, #0]
 800f58c:	605a      	str	r2, [r3, #4]
 800f58e:	609a      	str	r2, [r3, #8]
 800f590:	60da      	str	r2, [r3, #12]
 800f592:	611a      	str	r2, [r3, #16]
 800f594:	615a      	str	r2, [r3, #20]
 800f596:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800f598:	4b2d      	ldr	r3, [pc, #180]	; (800f650 <MX_TIM2_Init+0xe8>)
 800f59a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f59e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800f5a0:	4b2b      	ldr	r3, [pc, #172]	; (800f650 <MX_TIM2_Init+0xe8>)
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f5a6:	4b2a      	ldr	r3, [pc, #168]	; (800f650 <MX_TIM2_Init+0xe8>)
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800f5ac:	4b28      	ldr	r3, [pc, #160]	; (800f650 <MX_TIM2_Init+0xe8>)
 800f5ae:	f241 0267 	movw	r2, #4199	; 0x1067
 800f5b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f5b4:	4b26      	ldr	r3, [pc, #152]	; (800f650 <MX_TIM2_Init+0xe8>)
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f5ba:	4b25      	ldr	r3, [pc, #148]	; (800f650 <MX_TIM2_Init+0xe8>)
 800f5bc:	2200      	movs	r2, #0
 800f5be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800f5c0:	4823      	ldr	r0, [pc, #140]	; (800f650 <MX_TIM2_Init+0xe8>)
 800f5c2:	f005 fbd5 	bl	8014d70 <HAL_TIM_Base_Init>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d001      	beq.n	800f5d0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800f5cc:	f000 fb20 	bl	800fc10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f5d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f5d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800f5d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5da:	4619      	mov	r1, r3
 800f5dc:	481c      	ldr	r0, [pc, #112]	; (800f650 <MX_TIM2_Init+0xe8>)
 800f5de:	f006 f99f 	bl	8015920 <HAL_TIM_ConfigClockSource>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d001      	beq.n	800f5ec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800f5e8:	f000 fb12 	bl	800fc10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800f5ec:	4818      	ldr	r0, [pc, #96]	; (800f650 <MX_TIM2_Init+0xe8>)
 800f5ee:	f005 fd8d 	bl	801510c <HAL_TIM_PWM_Init>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d001      	beq.n	800f5fc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800f5f8:	f000 fb0a 	bl	800fc10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f600:	2300      	movs	r3, #0
 800f602:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800f604:	f107 0320 	add.w	r3, r7, #32
 800f608:	4619      	mov	r1, r3
 800f60a:	4811      	ldr	r0, [pc, #68]	; (800f650 <MX_TIM2_Init+0xe8>)
 800f60c:	f006 fe42 	bl	8016294 <HAL_TIMEx_MasterConfigSynchronization>
 800f610:	4603      	mov	r3, r0
 800f612:	2b00      	cmp	r3, #0
 800f614:	d001      	beq.n	800f61a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800f616:	f000 fafb 	bl	800fc10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f61a:	2360      	movs	r3, #96	; 0x60
 800f61c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f61e:	2300      	movs	r3, #0
 800f620:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f622:	2300      	movs	r3, #0
 800f624:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f626:	2300      	movs	r3, #0
 800f628:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f62a:	1d3b      	adds	r3, r7, #4
 800f62c:	220c      	movs	r2, #12
 800f62e:	4619      	mov	r1, r3
 800f630:	4807      	ldr	r0, [pc, #28]	; (800f650 <MX_TIM2_Init+0xe8>)
 800f632:	f006 f8af 	bl	8015794 <HAL_TIM_PWM_ConfigChannel>
 800f636:	4603      	mov	r3, r0
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d001      	beq.n	800f640 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800f63c:	f000 fae8 	bl	800fc10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800f640:	4803      	ldr	r0, [pc, #12]	; (800f650 <MX_TIM2_Init+0xe8>)
 800f642:	f000 fd3f 	bl	80100c4 <HAL_TIM_MspPostInit>

}
 800f646:	bf00      	nop
 800f648:	3738      	adds	r7, #56	; 0x38
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	2000023c 	.word	0x2000023c

0800f654 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b08c      	sub	sp, #48	; 0x30
 800f658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800f65a:	f107 030c 	add.w	r3, r7, #12
 800f65e:	2224      	movs	r2, #36	; 0x24
 800f660:	2100      	movs	r1, #0
 800f662:	4618      	mov	r0, r3
 800f664:	f007 fefb 	bl	801745e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f668:	1d3b      	adds	r3, r7, #4
 800f66a:	2200      	movs	r2, #0
 800f66c:	601a      	str	r2, [r3, #0]
 800f66e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800f670:	4b20      	ldr	r3, [pc, #128]	; (800f6f4 <MX_TIM3_Init+0xa0>)
 800f672:	4a21      	ldr	r2, [pc, #132]	; (800f6f8 <MX_TIM3_Init+0xa4>)
 800f674:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800f676:	4b1f      	ldr	r3, [pc, #124]	; (800f6f4 <MX_TIM3_Init+0xa0>)
 800f678:	2200      	movs	r2, #0
 800f67a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f67c:	4b1d      	ldr	r3, [pc, #116]	; (800f6f4 <MX_TIM3_Init+0xa0>)
 800f67e:	2200      	movs	r2, #0
 800f680:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800f682:	4b1c      	ldr	r3, [pc, #112]	; (800f6f4 <MX_TIM3_Init+0xa0>)
 800f684:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800f688:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f68a:	4b1a      	ldr	r3, [pc, #104]	; (800f6f4 <MX_TIM3_Init+0xa0>)
 800f68c:	2200      	movs	r2, #0
 800f68e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f690:	4b18      	ldr	r3, [pc, #96]	; (800f6f4 <MX_TIM3_Init+0xa0>)
 800f692:	2200      	movs	r2, #0
 800f694:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800f696:	2303      	movs	r3, #3
 800f698:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800f69a:	2300      	movs	r3, #0
 800f69c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800f6ba:	f107 030c 	add.w	r3, r7, #12
 800f6be:	4619      	mov	r1, r3
 800f6c0:	480c      	ldr	r0, [pc, #48]	; (800f6f4 <MX_TIM3_Init+0xa0>)
 800f6c2:	f005 fdef 	bl	80152a4 <HAL_TIM_Encoder_Init>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d001      	beq.n	800f6d0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800f6cc:	f000 faa0 	bl	800fc10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800f6d8:	1d3b      	adds	r3, r7, #4
 800f6da:	4619      	mov	r1, r3
 800f6dc:	4805      	ldr	r0, [pc, #20]	; (800f6f4 <MX_TIM3_Init+0xa0>)
 800f6de:	f006 fdd9 	bl	8016294 <HAL_TIMEx_MasterConfigSynchronization>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d001      	beq.n	800f6ec <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800f6e8:	f000 fa92 	bl	800fc10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800f6ec:	bf00      	nop
 800f6ee:	3730      	adds	r7, #48	; 0x30
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}
 800f6f4:	20000e40 	.word	0x20000e40
 800f6f8:	40000400 	.word	0x40000400

0800f6fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b08c      	sub	sp, #48	; 0x30
 800f700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800f702:	f107 030c 	add.w	r3, r7, #12
 800f706:	2224      	movs	r2, #36	; 0x24
 800f708:	2100      	movs	r1, #0
 800f70a:	4618      	mov	r0, r3
 800f70c:	f007 fea7 	bl	801745e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f710:	1d3b      	adds	r3, r7, #4
 800f712:	2200      	movs	r2, #0
 800f714:	601a      	str	r2, [r3, #0]
 800f716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800f718:	4b20      	ldr	r3, [pc, #128]	; (800f79c <MX_TIM4_Init+0xa0>)
 800f71a:	4a21      	ldr	r2, [pc, #132]	; (800f7a0 <MX_TIM4_Init+0xa4>)
 800f71c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800f71e:	4b1f      	ldr	r3, [pc, #124]	; (800f79c <MX_TIM4_Init+0xa0>)
 800f720:	2200      	movs	r2, #0
 800f722:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f724:	4b1d      	ldr	r3, [pc, #116]	; (800f79c <MX_TIM4_Init+0xa0>)
 800f726:	2200      	movs	r2, #0
 800f728:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800f72a:	4b1c      	ldr	r3, [pc, #112]	; (800f79c <MX_TIM4_Init+0xa0>)
 800f72c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800f730:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f732:	4b1a      	ldr	r3, [pc, #104]	; (800f79c <MX_TIM4_Init+0xa0>)
 800f734:	2200      	movs	r2, #0
 800f736:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f738:	4b18      	ldr	r3, [pc, #96]	; (800f79c <MX_TIM4_Init+0xa0>)
 800f73a:	2200      	movs	r2, #0
 800f73c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800f73e:	2303      	movs	r3, #3
 800f740:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800f742:	2300      	movs	r3, #0
 800f744:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800f746:	2301      	movs	r3, #1
 800f748:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800f74a:	2300      	movs	r3, #0
 800f74c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800f74e:	2300      	movs	r3, #0
 800f750:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800f752:	2300      	movs	r3, #0
 800f754:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800f756:	2301      	movs	r3, #1
 800f758:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800f75a:	2300      	movs	r3, #0
 800f75c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800f75e:	2300      	movs	r3, #0
 800f760:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800f762:	f107 030c 	add.w	r3, r7, #12
 800f766:	4619      	mov	r1, r3
 800f768:	480c      	ldr	r0, [pc, #48]	; (800f79c <MX_TIM4_Init+0xa0>)
 800f76a:	f005 fd9b 	bl	80152a4 <HAL_TIM_Encoder_Init>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d001      	beq.n	800f778 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800f774:	f000 fa4c 	bl	800fc10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f778:	2300      	movs	r3, #0
 800f77a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f77c:	2300      	movs	r3, #0
 800f77e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800f780:	1d3b      	adds	r3, r7, #4
 800f782:	4619      	mov	r1, r3
 800f784:	4805      	ldr	r0, [pc, #20]	; (800f79c <MX_TIM4_Init+0xa0>)
 800f786:	f006 fd85 	bl	8016294 <HAL_TIMEx_MasterConfigSynchronization>
 800f78a:	4603      	mov	r3, r0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d001      	beq.n	800f794 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800f790:	f000 fa3e 	bl	800fc10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800f794:	bf00      	nop
 800f796:	3730      	adds	r7, #48	; 0x30
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	20000db8 	.word	0x20000db8
 800f7a0:	40000800 	.word	0x40000800

0800f7a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b08e      	sub	sp, #56	; 0x38
 800f7a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f7aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	601a      	str	r2, [r3, #0]
 800f7b2:	605a      	str	r2, [r3, #4]
 800f7b4:	609a      	str	r2, [r3, #8]
 800f7b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f7b8:	f107 0320 	add.w	r3, r7, #32
 800f7bc:	2200      	movs	r2, #0
 800f7be:	601a      	str	r2, [r3, #0]
 800f7c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f7c2:	1d3b      	adds	r3, r7, #4
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	601a      	str	r2, [r3, #0]
 800f7c8:	605a      	str	r2, [r3, #4]
 800f7ca:	609a      	str	r2, [r3, #8]
 800f7cc:	60da      	str	r2, [r3, #12]
 800f7ce:	611a      	str	r2, [r3, #16]
 800f7d0:	615a      	str	r2, [r3, #20]
 800f7d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800f7d4:	4b2c      	ldr	r3, [pc, #176]	; (800f888 <MX_TIM5_Init+0xe4>)
 800f7d6:	4a2d      	ldr	r2, [pc, #180]	; (800f88c <MX_TIM5_Init+0xe8>)
 800f7d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800f7da:	4b2b      	ldr	r3, [pc, #172]	; (800f888 <MX_TIM5_Init+0xe4>)
 800f7dc:	2200      	movs	r2, #0
 800f7de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f7e0:	4b29      	ldr	r3, [pc, #164]	; (800f888 <MX_TIM5_Init+0xe4>)
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800f7e6:	4b28      	ldr	r3, [pc, #160]	; (800f888 <MX_TIM5_Init+0xe4>)
 800f7e8:	f241 0267 	movw	r2, #4199	; 0x1067
 800f7ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f7ee:	4b26      	ldr	r3, [pc, #152]	; (800f888 <MX_TIM5_Init+0xe4>)
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f7f4:	4b24      	ldr	r3, [pc, #144]	; (800f888 <MX_TIM5_Init+0xe4>)
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800f7fa:	4823      	ldr	r0, [pc, #140]	; (800f888 <MX_TIM5_Init+0xe4>)
 800f7fc:	f005 fab8 	bl	8014d70 <HAL_TIM_Base_Init>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d001      	beq.n	800f80a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800f806:	f000 fa03 	bl	800fc10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f80a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f80e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800f810:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f814:	4619      	mov	r1, r3
 800f816:	481c      	ldr	r0, [pc, #112]	; (800f888 <MX_TIM5_Init+0xe4>)
 800f818:	f006 f882 	bl	8015920 <HAL_TIM_ConfigClockSource>
 800f81c:	4603      	mov	r3, r0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d001      	beq.n	800f826 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800f822:	f000 f9f5 	bl	800fc10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800f826:	4818      	ldr	r0, [pc, #96]	; (800f888 <MX_TIM5_Init+0xe4>)
 800f828:	f005 fc70 	bl	801510c <HAL_TIM_PWM_Init>
 800f82c:	4603      	mov	r3, r0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d001      	beq.n	800f836 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800f832:	f000 f9ed 	bl	800fc10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f836:	2300      	movs	r3, #0
 800f838:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f83a:	2300      	movs	r3, #0
 800f83c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800f83e:	f107 0320 	add.w	r3, r7, #32
 800f842:	4619      	mov	r1, r3
 800f844:	4810      	ldr	r0, [pc, #64]	; (800f888 <MX_TIM5_Init+0xe4>)
 800f846:	f006 fd25 	bl	8016294 <HAL_TIMEx_MasterConfigSynchronization>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d001      	beq.n	800f854 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800f850:	f000 f9de 	bl	800fc10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f854:	2360      	movs	r3, #96	; 0x60
 800f856:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f858:	2300      	movs	r3, #0
 800f85a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f85c:	2300      	movs	r3, #0
 800f85e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f860:	2300      	movs	r3, #0
 800f862:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f864:	1d3b      	adds	r3, r7, #4
 800f866:	2204      	movs	r2, #4
 800f868:	4619      	mov	r1, r3
 800f86a:	4807      	ldr	r0, [pc, #28]	; (800f888 <MX_TIM5_Init+0xe4>)
 800f86c:	f005 ff92 	bl	8015794 <HAL_TIM_PWM_ConfigChannel>
 800f870:	4603      	mov	r3, r0
 800f872:	2b00      	cmp	r3, #0
 800f874:	d001      	beq.n	800f87a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800f876:	f000 f9cb 	bl	800fc10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800f87a:	4803      	ldr	r0, [pc, #12]	; (800f888 <MX_TIM5_Init+0xe4>)
 800f87c:	f000 fc22 	bl	80100c4 <HAL_TIM_MspPostInit>

}
 800f880:	bf00      	nop
 800f882:	3738      	adds	r7, #56	; 0x38
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}
 800f888:	2000027c 	.word	0x2000027c
 800f88c:	40000c00 	.word	0x40000c00

0800f890 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b096      	sub	sp, #88	; 0x58
 800f894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f896:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f89a:	2200      	movs	r2, #0
 800f89c:	601a      	str	r2, [r3, #0]
 800f89e:	605a      	str	r2, [r3, #4]
 800f8a0:	609a      	str	r2, [r3, #8]
 800f8a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f8a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	601a      	str	r2, [r3, #0]
 800f8ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f8ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	601a      	str	r2, [r3, #0]
 800f8b6:	605a      	str	r2, [r3, #4]
 800f8b8:	609a      	str	r2, [r3, #8]
 800f8ba:	60da      	str	r2, [r3, #12]
 800f8bc:	611a      	str	r2, [r3, #16]
 800f8be:	615a      	str	r2, [r3, #20]
 800f8c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f8c2:	1d3b      	adds	r3, r7, #4
 800f8c4:	2220      	movs	r2, #32
 800f8c6:	2100      	movs	r1, #0
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f007 fdc8 	bl	801745e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800f8ce:	4b42      	ldr	r3, [pc, #264]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f8d0:	4a42      	ldr	r2, [pc, #264]	; (800f9dc <MX_TIM8_Init+0x14c>)
 800f8d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800f8d4:	4b40      	ldr	r3, [pc, #256]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f8d6:	22a7      	movs	r2, #167	; 0xa7
 800f8d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f8da:	4b3f      	ldr	r3, [pc, #252]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f8dc:	2200      	movs	r2, #0
 800f8de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800f8e0:	4b3d      	ldr	r3, [pc, #244]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f8e2:	2231      	movs	r2, #49	; 0x31
 800f8e4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f8e6:	4b3c      	ldr	r3, [pc, #240]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800f8ec:	4b3a      	ldr	r3, [pc, #232]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800f8f2:	4b39      	ldr	r3, [pc, #228]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f8f4:	2280      	movs	r2, #128	; 0x80
 800f8f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800f8f8:	4837      	ldr	r0, [pc, #220]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f8fa:	f005 fa39 	bl	8014d70 <HAL_TIM_Base_Init>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d001      	beq.n	800f908 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800f904:	f000 f984 	bl	800fc10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f90c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800f90e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f912:	4619      	mov	r1, r3
 800f914:	4830      	ldr	r0, [pc, #192]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f916:	f006 f803 	bl	8015920 <HAL_TIM_ConfigClockSource>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d001      	beq.n	800f924 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800f920:	f000 f976 	bl	800fc10 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800f924:	482c      	ldr	r0, [pc, #176]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f926:	f005 fa9d 	bl	8014e64 <HAL_TIM_OC_Init>
 800f92a:	4603      	mov	r3, r0
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d001      	beq.n	800f934 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800f930:	f000 f96e 	bl	800fc10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f934:	2300      	movs	r3, #0
 800f936:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f938:	2300      	movs	r3, #0
 800f93a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800f93c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f940:	4619      	mov	r1, r3
 800f942:	4825      	ldr	r0, [pc, #148]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f944:	f006 fca6 	bl	8016294 <HAL_TIMEx_MasterConfigSynchronization>
 800f948:	4603      	mov	r3, r0
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d001      	beq.n	800f952 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800f94e:	f000 f95f 	bl	800fc10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800f952:	2330      	movs	r3, #48	; 0x30
 800f954:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800f956:	2318      	movs	r3, #24
 800f958:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f95a:	2300      	movs	r3, #0
 800f95c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f95e:	2300      	movs	r3, #0
 800f960:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f962:	2300      	movs	r3, #0
 800f964:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f966:	2300      	movs	r3, #0
 800f968:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f96a:	2300      	movs	r3, #0
 800f96c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f96e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f972:	2200      	movs	r2, #0
 800f974:	4619      	mov	r1, r3
 800f976:	4818      	ldr	r0, [pc, #96]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f978:	f005 feac 	bl	80156d4 <HAL_TIM_OC_ConfigChannel>
 800f97c:	4603      	mov	r3, r0
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d001      	beq.n	800f986 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800f982:	f000 f945 	bl	800fc10 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800f986:	4b14      	ldr	r3, [pc, #80]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	699a      	ldr	r2, [r3, #24]
 800f98c:	4b12      	ldr	r3, [pc, #72]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f042 0208 	orr.w	r2, r2, #8
 800f994:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f996:	2300      	movs	r3, #0
 800f998:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f99a:	2300      	movs	r3, #0
 800f99c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f9aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f9ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800f9b4:	1d3b      	adds	r3, r7, #4
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	4807      	ldr	r0, [pc, #28]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f9ba:	f006 fce7 	bl	801638c <HAL_TIMEx_ConfigBreakDeadTime>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d001      	beq.n	800f9c8 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800f9c4:	f000 f924 	bl	800fc10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800f9c8:	4803      	ldr	r0, [pc, #12]	; (800f9d8 <MX_TIM8_Init+0x148>)
 800f9ca:	f000 fb7b 	bl	80100c4 <HAL_TIM_MspPostInit>

}
 800f9ce:	bf00      	nop
 800f9d0:	3758      	adds	r7, #88	; 0x58
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	20000d78 	.word	0x20000d78
 800f9dc:	40010400 	.word	0x40010400

0800f9e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800f9e4:	4b11      	ldr	r3, [pc, #68]	; (800fa2c <MX_USART1_UART_Init+0x4c>)
 800f9e6:	4a12      	ldr	r2, [pc, #72]	; (800fa30 <MX_USART1_UART_Init+0x50>)
 800f9e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800f9ea:	4b10      	ldr	r3, [pc, #64]	; (800fa2c <MX_USART1_UART_Init+0x4c>)
 800f9ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800f9f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800f9f2:	4b0e      	ldr	r3, [pc, #56]	; (800fa2c <MX_USART1_UART_Init+0x4c>)
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800f9f8:	4b0c      	ldr	r3, [pc, #48]	; (800fa2c <MX_USART1_UART_Init+0x4c>)
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800f9fe:	4b0b      	ldr	r3, [pc, #44]	; (800fa2c <MX_USART1_UART_Init+0x4c>)
 800fa00:	2200      	movs	r2, #0
 800fa02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800fa04:	4b09      	ldr	r3, [pc, #36]	; (800fa2c <MX_USART1_UART_Init+0x4c>)
 800fa06:	220c      	movs	r2, #12
 800fa08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fa0a:	4b08      	ldr	r3, [pc, #32]	; (800fa2c <MX_USART1_UART_Init+0x4c>)
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800fa10:	4b06      	ldr	r3, [pc, #24]	; (800fa2c <MX_USART1_UART_Init+0x4c>)
 800fa12:	2200      	movs	r2, #0
 800fa14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800fa16:	4805      	ldr	r0, [pc, #20]	; (800fa2c <MX_USART1_UART_Init+0x4c>)
 800fa18:	f006 fd43 	bl	80164a2 <HAL_UART_Init>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d001      	beq.n	800fa26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800fa22:	f000 f8f5 	bl	800fc10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800fa26:	bf00      	nop
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	20000f20 	.word	0x20000f20
 800fa30:	40011000 	.word	0x40011000

0800fa34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	607b      	str	r3, [r7, #4]
 800fa3e:	4b10      	ldr	r3, [pc, #64]	; (800fa80 <MX_DMA_Init+0x4c>)
 800fa40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa42:	4a0f      	ldr	r2, [pc, #60]	; (800fa80 <MX_DMA_Init+0x4c>)
 800fa44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fa48:	6313      	str	r3, [r2, #48]	; 0x30
 800fa4a:	4b0d      	ldr	r3, [pc, #52]	; (800fa80 <MX_DMA_Init+0x4c>)
 800fa4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fa52:	607b      	str	r3, [r7, #4]
 800fa54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800fa56:	2200      	movs	r2, #0
 800fa58:	2100      	movs	r1, #0
 800fa5a:	2038      	movs	r0, #56	; 0x38
 800fa5c:	f003 f807 	bl	8012a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800fa60:	2038      	movs	r0, #56	; 0x38
 800fa62:	f003 f820 	bl	8012aa6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800fa66:	2200      	movs	r2, #0
 800fa68:	2100      	movs	r1, #0
 800fa6a:	203a      	movs	r0, #58	; 0x3a
 800fa6c:	f002 ffff 	bl	8012a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800fa70:	203a      	movs	r0, #58	; 0x3a
 800fa72:	f003 f818 	bl	8012aa6 <HAL_NVIC_EnableIRQ>

}
 800fa76:	bf00      	nop
 800fa78:	3708      	adds	r7, #8
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	40023800 	.word	0x40023800

0800fa84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b08a      	sub	sp, #40	; 0x28
 800fa88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa8a:	f107 0314 	add.w	r3, r7, #20
 800fa8e:	2200      	movs	r2, #0
 800fa90:	601a      	str	r2, [r3, #0]
 800fa92:	605a      	str	r2, [r3, #4]
 800fa94:	609a      	str	r2, [r3, #8]
 800fa96:	60da      	str	r2, [r3, #12]
 800fa98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	613b      	str	r3, [r7, #16]
 800fa9e:	4b56      	ldr	r3, [pc, #344]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800faa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faa2:	4a55      	ldr	r2, [pc, #340]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800faa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faa8:	6313      	str	r3, [r2, #48]	; 0x30
 800faaa:	4b53      	ldr	r3, [pc, #332]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800faac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fab2:	613b      	str	r3, [r7, #16]
 800fab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800fab6:	2300      	movs	r3, #0
 800fab8:	60fb      	str	r3, [r7, #12]
 800faba:	4b4f      	ldr	r3, [pc, #316]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800fabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fabe:	4a4e      	ldr	r2, [pc, #312]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800fac0:	f043 0304 	orr.w	r3, r3, #4
 800fac4:	6313      	str	r3, [r2, #48]	; 0x30
 800fac6:	4b4c      	ldr	r3, [pc, #304]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800fac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faca:	f003 0304 	and.w	r3, r3, #4
 800face:	60fb      	str	r3, [r7, #12]
 800fad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fad2:	2300      	movs	r3, #0
 800fad4:	60bb      	str	r3, [r7, #8]
 800fad6:	4b48      	ldr	r3, [pc, #288]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800fad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fada:	4a47      	ldr	r2, [pc, #284]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800fadc:	f043 0301 	orr.w	r3, r3, #1
 800fae0:	6313      	str	r3, [r2, #48]	; 0x30
 800fae2:	4b45      	ldr	r3, [pc, #276]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800fae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fae6:	f003 0301 	and.w	r3, r3, #1
 800faea:	60bb      	str	r3, [r7, #8]
 800faec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800faee:	2300      	movs	r3, #0
 800faf0:	607b      	str	r3, [r7, #4]
 800faf2:	4b41      	ldr	r3, [pc, #260]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800faf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faf6:	4a40      	ldr	r2, [pc, #256]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800faf8:	f043 0302 	orr.w	r3, r3, #2
 800fafc:	6313      	str	r3, [r2, #48]	; 0x30
 800fafe:	4b3e      	ldr	r3, [pc, #248]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800fb00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb02:	f003 0302 	and.w	r3, r3, #2
 800fb06:	607b      	str	r3, [r7, #4]
 800fb08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	603b      	str	r3, [r7, #0]
 800fb0e:	4b3a      	ldr	r3, [pc, #232]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800fb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb12:	4a39      	ldr	r2, [pc, #228]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800fb14:	f043 0308 	orr.w	r3, r3, #8
 800fb18:	6313      	str	r3, [r2, #48]	; 0x30
 800fb1a:	4b37      	ldr	r3, [pc, #220]	; (800fbf8 <MX_GPIO_Init+0x174>)
 800fb1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb1e:	f003 0308 	and.w	r3, r3, #8
 800fb22:	603b      	str	r3, [r7, #0]
 800fb24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800fb26:	2200      	movs	r2, #0
 800fb28:	2105      	movs	r1, #5
 800fb2a:	4834      	ldr	r0, [pc, #208]	; (800fbfc <MX_GPIO_Init+0x178>)
 800fb2c:	f003 ff38 	bl	80139a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800fb30:	2200      	movs	r2, #0
 800fb32:	f44f 7140 	mov.w	r1, #768	; 0x300
 800fb36:	4832      	ldr	r0, [pc, #200]	; (800fc00 <MX_GPIO_Init+0x17c>)
 800fb38:	f003 ff32 	bl	80139a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	2104      	movs	r1, #4
 800fb40:	4830      	ldr	r0, [pc, #192]	; (800fc04 <MX_GPIO_Init+0x180>)
 800fb42:	f003 ff2d 	bl	80139a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800fb46:	2200      	movs	r2, #0
 800fb48:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fb4c:	482e      	ldr	r0, [pc, #184]	; (800fc08 <MX_GPIO_Init+0x184>)
 800fb4e:	f003 ff27 	bl	80139a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800fb52:	2305      	movs	r3, #5
 800fb54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fb56:	2301      	movs	r3, #1
 800fb58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fb62:	f107 0314 	add.w	r3, r7, #20
 800fb66:	4619      	mov	r1, r3
 800fb68:	4824      	ldr	r0, [pc, #144]	; (800fbfc <MX_GPIO_Init+0x178>)
 800fb6a:	f003 fd7f 	bl	801366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800fb6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800fb74:	4b25      	ldr	r3, [pc, #148]	; (800fc0c <MX_GPIO_Init+0x188>)
 800fb76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fb7c:	f107 0314 	add.w	r3, r7, #20
 800fb80:	4619      	mov	r1, r3
 800fb82:	4821      	ldr	r0, [pc, #132]	; (800fc08 <MX_GPIO_Init+0x184>)
 800fb84:	f003 fd72 	bl	801366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800fb88:	f44f 7340 	mov.w	r3, #768	; 0x300
 800fb8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb92:	2300      	movs	r3, #0
 800fb94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fb96:	2300      	movs	r3, #0
 800fb98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fb9a:	f107 0314 	add.w	r3, r7, #20
 800fb9e:	4619      	mov	r1, r3
 800fba0:	4817      	ldr	r0, [pc, #92]	; (800fc00 <MX_GPIO_Init+0x17c>)
 800fba2:	f003 fd63 	bl	801366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800fba6:	2304      	movs	r3, #4
 800fba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fbaa:	2301      	movs	r3, #1
 800fbac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fbb6:	f107 0314 	add.w	r3, r7, #20
 800fbba:	4619      	mov	r1, r3
 800fbbc:	4811      	ldr	r0, [pc, #68]	; (800fc04 <MX_GPIO_Init+0x180>)
 800fbbe:	f003 fd55 	bl	801366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800fbc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fbc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fbc8:	2301      	movs	r3, #1
 800fbca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fbd4:	f107 0314 	add.w	r3, r7, #20
 800fbd8:	4619      	mov	r1, r3
 800fbda:	480b      	ldr	r0, [pc, #44]	; (800fc08 <MX_GPIO_Init+0x184>)
 800fbdc:	f003 fd46 	bl	801366c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	2100      	movs	r1, #0
 800fbe4:	2028      	movs	r0, #40	; 0x28
 800fbe6:	f002 ff42 	bl	8012a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800fbea:	2028      	movs	r0, #40	; 0x28
 800fbec:	f002 ff5b 	bl	8012aa6 <HAL_NVIC_EnableIRQ>

}
 800fbf0:	bf00      	nop
 800fbf2:	3728      	adds	r7, #40	; 0x28
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	40023800 	.word	0x40023800
 800fbfc:	40020000 	.word	0x40020000
 800fc00:	40020800 	.word	0x40020800
 800fc04:	40020c00 	.word	0x40020c00
 800fc08:	40020400 	.word	0x40020400
 800fc0c:	10110000 	.word	0x10110000

0800fc10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800fc10:	b480      	push	{r7}
 800fc12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800fc14:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800fc16:	e7fe      	b.n	800fc16 <Error_Handler+0x6>

0800fc18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b083      	sub	sp, #12
 800fc1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fc1e:	2300      	movs	r3, #0
 800fc20:	607b      	str	r3, [r7, #4]
 800fc22:	4b10      	ldr	r3, [pc, #64]	; (800fc64 <HAL_MspInit+0x4c>)
 800fc24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc26:	4a0f      	ldr	r2, [pc, #60]	; (800fc64 <HAL_MspInit+0x4c>)
 800fc28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fc2c:	6453      	str	r3, [r2, #68]	; 0x44
 800fc2e:	4b0d      	ldr	r3, [pc, #52]	; (800fc64 <HAL_MspInit+0x4c>)
 800fc30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fc36:	607b      	str	r3, [r7, #4]
 800fc38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	603b      	str	r3, [r7, #0]
 800fc3e:	4b09      	ldr	r3, [pc, #36]	; (800fc64 <HAL_MspInit+0x4c>)
 800fc40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc42:	4a08      	ldr	r2, [pc, #32]	; (800fc64 <HAL_MspInit+0x4c>)
 800fc44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc48:	6413      	str	r3, [r2, #64]	; 0x40
 800fc4a:	4b06      	ldr	r3, [pc, #24]	; (800fc64 <HAL_MspInit+0x4c>)
 800fc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc52:	603b      	str	r3, [r7, #0]
 800fc54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800fc56:	bf00      	nop
 800fc58:	370c      	adds	r7, #12
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr
 800fc62:	bf00      	nop
 800fc64:	40023800 	.word	0x40023800

0800fc68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b08c      	sub	sp, #48	; 0x30
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc70:	f107 031c 	add.w	r3, r7, #28
 800fc74:	2200      	movs	r2, #0
 800fc76:	601a      	str	r2, [r3, #0]
 800fc78:	605a      	str	r2, [r3, #4]
 800fc7a:	609a      	str	r2, [r3, #8]
 800fc7c:	60da      	str	r2, [r3, #12]
 800fc7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	4a6b      	ldr	r2, [pc, #428]	; (800fe34 <HAL_ADC_MspInit+0x1cc>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d172      	bne.n	800fd70 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	61bb      	str	r3, [r7, #24]
 800fc8e:	4b6a      	ldr	r3, [pc, #424]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fc90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc92:	4a69      	ldr	r2, [pc, #420]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fc94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc98:	6453      	str	r3, [r2, #68]	; 0x44
 800fc9a:	4b67      	ldr	r3, [pc, #412]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fc9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fca2:	61bb      	str	r3, [r7, #24]
 800fca4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fca6:	2300      	movs	r3, #0
 800fca8:	617b      	str	r3, [r7, #20]
 800fcaa:	4b63      	ldr	r3, [pc, #396]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fcac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcae:	4a62      	ldr	r2, [pc, #392]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fcb0:	f043 0304 	orr.w	r3, r3, #4
 800fcb4:	6313      	str	r3, [r2, #48]	; 0x30
 800fcb6:	4b60      	ldr	r3, [pc, #384]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fcb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcba:	f003 0304 	and.w	r3, r3, #4
 800fcbe:	617b      	str	r3, [r7, #20]
 800fcc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	613b      	str	r3, [r7, #16]
 800fcc6:	4b5c      	ldr	r3, [pc, #368]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fcc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcca:	4a5b      	ldr	r2, [pc, #364]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fccc:	f043 0302 	orr.w	r3, r3, #2
 800fcd0:	6313      	str	r3, [r2, #48]	; 0x30
 800fcd2:	4b59      	ldr	r3, [pc, #356]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fcd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcd6:	f003 0302 	and.w	r3, r3, #2
 800fcda:	613b      	str	r3, [r7, #16]
 800fcdc:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800fcde:	2311      	movs	r3, #17
 800fce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fce2:	2303      	movs	r3, #3
 800fce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fce6:	2300      	movs	r3, #0
 800fce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fcea:	f107 031c 	add.w	r3, r7, #28
 800fcee:	4619      	mov	r1, r3
 800fcf0:	4852      	ldr	r0, [pc, #328]	; (800fe3c <HAL_ADC_MspInit+0x1d4>)
 800fcf2:	f003 fcbb 	bl	801366c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800fcf6:	2302      	movs	r3, #2
 800fcf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fcfa:	2303      	movs	r3, #3
 800fcfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fd02:	f107 031c 	add.w	r3, r7, #28
 800fd06:	4619      	mov	r1, r3
 800fd08:	484d      	ldr	r0, [pc, #308]	; (800fe40 <HAL_ADC_MspInit+0x1d8>)
 800fd0a:	f003 fcaf 	bl	801366c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800fd0e:	4b4d      	ldr	r3, [pc, #308]	; (800fe44 <HAL_ADC_MspInit+0x1dc>)
 800fd10:	4a4d      	ldr	r2, [pc, #308]	; (800fe48 <HAL_ADC_MspInit+0x1e0>)
 800fd12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800fd14:	4b4b      	ldr	r3, [pc, #300]	; (800fe44 <HAL_ADC_MspInit+0x1dc>)
 800fd16:	2200      	movs	r2, #0
 800fd18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fd1a:	4b4a      	ldr	r3, [pc, #296]	; (800fe44 <HAL_ADC_MspInit+0x1dc>)
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800fd20:	4b48      	ldr	r3, [pc, #288]	; (800fe44 <HAL_ADC_MspInit+0x1dc>)
 800fd22:	2200      	movs	r2, #0
 800fd24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800fd26:	4b47      	ldr	r3, [pc, #284]	; (800fe44 <HAL_ADC_MspInit+0x1dc>)
 800fd28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fd2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800fd2e:	4b45      	ldr	r3, [pc, #276]	; (800fe44 <HAL_ADC_MspInit+0x1dc>)
 800fd30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fd34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800fd36:	4b43      	ldr	r3, [pc, #268]	; (800fe44 <HAL_ADC_MspInit+0x1dc>)
 800fd38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800fd3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800fd3e:	4b41      	ldr	r3, [pc, #260]	; (800fe44 <HAL_ADC_MspInit+0x1dc>)
 800fd40:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fd44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800fd46:	4b3f      	ldr	r3, [pc, #252]	; (800fe44 <HAL_ADC_MspInit+0x1dc>)
 800fd48:	2200      	movs	r2, #0
 800fd4a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fd4c:	4b3d      	ldr	r3, [pc, #244]	; (800fe44 <HAL_ADC_MspInit+0x1dc>)
 800fd4e:	2200      	movs	r2, #0
 800fd50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800fd52:	483c      	ldr	r0, [pc, #240]	; (800fe44 <HAL_ADC_MspInit+0x1dc>)
 800fd54:	f002 fec2 	bl	8012adc <HAL_DMA_Init>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d001      	beq.n	800fd62 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800fd5e:	f7ff ff57 	bl	800fc10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	4a37      	ldr	r2, [pc, #220]	; (800fe44 <HAL_ADC_MspInit+0x1dc>)
 800fd66:	639a      	str	r2, [r3, #56]	; 0x38
 800fd68:	4a36      	ldr	r2, [pc, #216]	; (800fe44 <HAL_ADC_MspInit+0x1dc>)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800fd6e:	e05d      	b.n	800fe2c <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	4a35      	ldr	r2, [pc, #212]	; (800fe4c <HAL_ADC_MspInit+0x1e4>)
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d158      	bne.n	800fe2c <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	60fb      	str	r3, [r7, #12]
 800fd7e:	4b2e      	ldr	r3, [pc, #184]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fd80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd82:	4a2d      	ldr	r2, [pc, #180]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fd84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fd88:	6453      	str	r3, [r2, #68]	; 0x44
 800fd8a:	4b2b      	ldr	r3, [pc, #172]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fd8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fd92:	60fb      	str	r3, [r7, #12]
 800fd94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fd96:	2300      	movs	r3, #0
 800fd98:	60bb      	str	r3, [r7, #8]
 800fd9a:	4b27      	ldr	r3, [pc, #156]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fd9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd9e:	4a26      	ldr	r2, [pc, #152]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fda0:	f043 0304 	orr.w	r3, r3, #4
 800fda4:	6313      	str	r3, [r2, #48]	; 0x30
 800fda6:	4b24      	ldr	r3, [pc, #144]	; (800fe38 <HAL_ADC_MspInit+0x1d0>)
 800fda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdaa:	f003 0304 	and.w	r3, r3, #4
 800fdae:	60bb      	str	r3, [r7, #8]
 800fdb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800fdb2:	2322      	movs	r3, #34	; 0x22
 800fdb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fdb6:	2303      	movs	r3, #3
 800fdb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fdbe:	f107 031c 	add.w	r3, r7, #28
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	481d      	ldr	r0, [pc, #116]	; (800fe3c <HAL_ADC_MspInit+0x1d4>)
 800fdc6:	f003 fc51 	bl	801366c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800fdca:	4b21      	ldr	r3, [pc, #132]	; (800fe50 <HAL_ADC_MspInit+0x1e8>)
 800fdcc:	4a21      	ldr	r2, [pc, #132]	; (800fe54 <HAL_ADC_MspInit+0x1ec>)
 800fdce:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800fdd0:	4b1f      	ldr	r3, [pc, #124]	; (800fe50 <HAL_ADC_MspInit+0x1e8>)
 800fdd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800fdd6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fdd8:	4b1d      	ldr	r3, [pc, #116]	; (800fe50 <HAL_ADC_MspInit+0x1e8>)
 800fdda:	2200      	movs	r2, #0
 800fddc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800fdde:	4b1c      	ldr	r3, [pc, #112]	; (800fe50 <HAL_ADC_MspInit+0x1e8>)
 800fde0:	2200      	movs	r2, #0
 800fde2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800fde4:	4b1a      	ldr	r3, [pc, #104]	; (800fe50 <HAL_ADC_MspInit+0x1e8>)
 800fde6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fdea:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800fdec:	4b18      	ldr	r3, [pc, #96]	; (800fe50 <HAL_ADC_MspInit+0x1e8>)
 800fdee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fdf2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800fdf4:	4b16      	ldr	r3, [pc, #88]	; (800fe50 <HAL_ADC_MspInit+0x1e8>)
 800fdf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800fdfa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800fdfc:	4b14      	ldr	r3, [pc, #80]	; (800fe50 <HAL_ADC_MspInit+0x1e8>)
 800fdfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fe02:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800fe04:	4b12      	ldr	r3, [pc, #72]	; (800fe50 <HAL_ADC_MspInit+0x1e8>)
 800fe06:	2200      	movs	r2, #0
 800fe08:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fe0a:	4b11      	ldr	r3, [pc, #68]	; (800fe50 <HAL_ADC_MspInit+0x1e8>)
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800fe10:	480f      	ldr	r0, [pc, #60]	; (800fe50 <HAL_ADC_MspInit+0x1e8>)
 800fe12:	f002 fe63 	bl	8012adc <HAL_DMA_Init>
 800fe16:	4603      	mov	r3, r0
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d001      	beq.n	800fe20 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800fe1c:	f7ff fef8 	bl	800fc10 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	4a0b      	ldr	r2, [pc, #44]	; (800fe50 <HAL_ADC_MspInit+0x1e8>)
 800fe24:	639a      	str	r2, [r3, #56]	; 0x38
 800fe26:	4a0a      	ldr	r2, [pc, #40]	; (800fe50 <HAL_ADC_MspInit+0x1e8>)
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800fe2c:	bf00      	nop
 800fe2e:	3730      	adds	r7, #48	; 0x30
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	40012000 	.word	0x40012000
 800fe38:	40023800 	.word	0x40023800
 800fe3c:	40020800 	.word	0x40020800
 800fe40:	40020400 	.word	0x40020400
 800fe44:	20000f60 	.word	0x20000f60
 800fe48:	40026410 	.word	0x40026410
 800fe4c:	40012100 	.word	0x40012100
 800fe50:	20001000 	.word	0x20001000
 800fe54:	40026440 	.word	0x40026440

0800fe58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b08a      	sub	sp, #40	; 0x28
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe60:	f107 0314 	add.w	r3, r7, #20
 800fe64:	2200      	movs	r2, #0
 800fe66:	601a      	str	r2, [r3, #0]
 800fe68:	605a      	str	r2, [r3, #4]
 800fe6a:	609a      	str	r2, [r3, #8]
 800fe6c:	60da      	str	r2, [r3, #12]
 800fe6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	4a19      	ldr	r2, [pc, #100]	; (800fedc <HAL_SPI_MspInit+0x84>)
 800fe76:	4293      	cmp	r3, r2
 800fe78:	d12c      	bne.n	800fed4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	613b      	str	r3, [r7, #16]
 800fe7e:	4b18      	ldr	r3, [pc, #96]	; (800fee0 <HAL_SPI_MspInit+0x88>)
 800fe80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe82:	4a17      	ldr	r2, [pc, #92]	; (800fee0 <HAL_SPI_MspInit+0x88>)
 800fe84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe88:	6413      	str	r3, [r2, #64]	; 0x40
 800fe8a:	4b15      	ldr	r3, [pc, #84]	; (800fee0 <HAL_SPI_MspInit+0x88>)
 800fe8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fe92:	613b      	str	r3, [r7, #16]
 800fe94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fe96:	2300      	movs	r3, #0
 800fe98:	60fb      	str	r3, [r7, #12]
 800fe9a:	4b11      	ldr	r3, [pc, #68]	; (800fee0 <HAL_SPI_MspInit+0x88>)
 800fe9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe9e:	4a10      	ldr	r2, [pc, #64]	; (800fee0 <HAL_SPI_MspInit+0x88>)
 800fea0:	f043 0304 	orr.w	r3, r3, #4
 800fea4:	6313      	str	r3, [r2, #48]	; 0x30
 800fea6:	4b0e      	ldr	r3, [pc, #56]	; (800fee0 <HAL_SPI_MspInit+0x88>)
 800fea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feaa:	f003 0304 	and.w	r3, r3, #4
 800feae:	60fb      	str	r3, [r7, #12]
 800feb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800feb2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800feb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800feb8:	2302      	movs	r3, #2
 800feba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800febc:	2300      	movs	r3, #0
 800febe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fec0:	2303      	movs	r3, #3
 800fec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800fec4:	2306      	movs	r3, #6
 800fec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fec8:	f107 0314 	add.w	r3, r7, #20
 800fecc:	4619      	mov	r1, r3
 800fece:	4805      	ldr	r0, [pc, #20]	; (800fee4 <HAL_SPI_MspInit+0x8c>)
 800fed0:	f003 fbcc 	bl	801366c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800fed4:	bf00      	nop
 800fed6:	3728      	adds	r7, #40	; 0x28
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	40003c00 	.word	0x40003c00
 800fee0:	40023800 	.word	0x40023800
 800fee4:	40020800 	.word	0x40020800

0800fee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b086      	sub	sp, #24
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	4a30      	ldr	r2, [pc, #192]	; (800ffb8 <HAL_TIM_Base_MspInit+0xd0>)
 800fef6:	4293      	cmp	r3, r2
 800fef8:	d116      	bne.n	800ff28 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800fefa:	2300      	movs	r3, #0
 800fefc:	617b      	str	r3, [r7, #20]
 800fefe:	4b2f      	ldr	r3, [pc, #188]	; (800ffbc <HAL_TIM_Base_MspInit+0xd4>)
 800ff00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff02:	4a2e      	ldr	r2, [pc, #184]	; (800ffbc <HAL_TIM_Base_MspInit+0xd4>)
 800ff04:	f043 0301 	orr.w	r3, r3, #1
 800ff08:	6453      	str	r3, [r2, #68]	; 0x44
 800ff0a:	4b2c      	ldr	r3, [pc, #176]	; (800ffbc <HAL_TIM_Base_MspInit+0xd4>)
 800ff0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff0e:	f003 0301 	and.w	r3, r3, #1
 800ff12:	617b      	str	r3, [r7, #20]
 800ff14:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800ff16:	2200      	movs	r2, #0
 800ff18:	2100      	movs	r1, #0
 800ff1a:	2019      	movs	r0, #25
 800ff1c:	f002 fda7 	bl	8012a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800ff20:	2019      	movs	r0, #25
 800ff22:	f002 fdc0 	bl	8012aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800ff26:	e042      	b.n	800ffae <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff30:	d10e      	bne.n	800ff50 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ff32:	2300      	movs	r3, #0
 800ff34:	613b      	str	r3, [r7, #16]
 800ff36:	4b21      	ldr	r3, [pc, #132]	; (800ffbc <HAL_TIM_Base_MspInit+0xd4>)
 800ff38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff3a:	4a20      	ldr	r2, [pc, #128]	; (800ffbc <HAL_TIM_Base_MspInit+0xd4>)
 800ff3c:	f043 0301 	orr.w	r3, r3, #1
 800ff40:	6413      	str	r3, [r2, #64]	; 0x40
 800ff42:	4b1e      	ldr	r3, [pc, #120]	; (800ffbc <HAL_TIM_Base_MspInit+0xd4>)
 800ff44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff46:	f003 0301 	and.w	r3, r3, #1
 800ff4a:	613b      	str	r3, [r7, #16]
 800ff4c:	693b      	ldr	r3, [r7, #16]
}
 800ff4e:	e02e      	b.n	800ffae <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4a1a      	ldr	r2, [pc, #104]	; (800ffc0 <HAL_TIM_Base_MspInit+0xd8>)
 800ff56:	4293      	cmp	r3, r2
 800ff58:	d10e      	bne.n	800ff78 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	60fb      	str	r3, [r7, #12]
 800ff5e:	4b17      	ldr	r3, [pc, #92]	; (800ffbc <HAL_TIM_Base_MspInit+0xd4>)
 800ff60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff62:	4a16      	ldr	r2, [pc, #88]	; (800ffbc <HAL_TIM_Base_MspInit+0xd4>)
 800ff64:	f043 0308 	orr.w	r3, r3, #8
 800ff68:	6413      	str	r3, [r2, #64]	; 0x40
 800ff6a:	4b14      	ldr	r3, [pc, #80]	; (800ffbc <HAL_TIM_Base_MspInit+0xd4>)
 800ff6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff6e:	f003 0308 	and.w	r3, r3, #8
 800ff72:	60fb      	str	r3, [r7, #12]
 800ff74:	68fb      	ldr	r3, [r7, #12]
}
 800ff76:	e01a      	b.n	800ffae <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	4a11      	ldr	r2, [pc, #68]	; (800ffc4 <HAL_TIM_Base_MspInit+0xdc>)
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	d115      	bne.n	800ffae <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800ff82:	2300      	movs	r3, #0
 800ff84:	60bb      	str	r3, [r7, #8]
 800ff86:	4b0d      	ldr	r3, [pc, #52]	; (800ffbc <HAL_TIM_Base_MspInit+0xd4>)
 800ff88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff8a:	4a0c      	ldr	r2, [pc, #48]	; (800ffbc <HAL_TIM_Base_MspInit+0xd4>)
 800ff8c:	f043 0302 	orr.w	r3, r3, #2
 800ff90:	6453      	str	r3, [r2, #68]	; 0x44
 800ff92:	4b0a      	ldr	r3, [pc, #40]	; (800ffbc <HAL_TIM_Base_MspInit+0xd4>)
 800ff94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff96:	f003 0302 	and.w	r3, r3, #2
 800ff9a:	60bb      	str	r3, [r7, #8]
 800ff9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	2101      	movs	r1, #1
 800ffa2:	202c      	movs	r0, #44	; 0x2c
 800ffa4:	f002 fd63 	bl	8012a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800ffa8:	202c      	movs	r0, #44	; 0x2c
 800ffaa:	f002 fd7c 	bl	8012aa6 <HAL_NVIC_EnableIRQ>
}
 800ffae:	bf00      	nop
 800ffb0:	3718      	adds	r7, #24
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	40010000 	.word	0x40010000
 800ffbc:	40023800 	.word	0x40023800
 800ffc0:	40000c00 	.word	0x40000c00
 800ffc4:	40010400 	.word	0x40010400

0800ffc8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b08c      	sub	sp, #48	; 0x30
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ffd0:	f107 031c 	add.w	r3, r7, #28
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	601a      	str	r2, [r3, #0]
 800ffd8:	605a      	str	r2, [r3, #4]
 800ffda:	609a      	str	r2, [r3, #8]
 800ffdc:	60da      	str	r2, [r3, #12]
 800ffde:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	4a32      	ldr	r2, [pc, #200]	; (80100b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d12c      	bne.n	8010044 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ffea:	2300      	movs	r3, #0
 800ffec:	61bb      	str	r3, [r7, #24]
 800ffee:	4b31      	ldr	r3, [pc, #196]	; (80100b4 <HAL_TIM_Encoder_MspInit+0xec>)
 800fff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fff2:	4a30      	ldr	r2, [pc, #192]	; (80100b4 <HAL_TIM_Encoder_MspInit+0xec>)
 800fff4:	f043 0302 	orr.w	r3, r3, #2
 800fff8:	6413      	str	r3, [r2, #64]	; 0x40
 800fffa:	4b2e      	ldr	r3, [pc, #184]	; (80100b4 <HAL_TIM_Encoder_MspInit+0xec>)
 800fffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fffe:	f003 0302 	and.w	r3, r3, #2
 8010002:	61bb      	str	r3, [r7, #24]
 8010004:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010006:	2300      	movs	r3, #0
 8010008:	617b      	str	r3, [r7, #20]
 801000a:	4b2a      	ldr	r3, [pc, #168]	; (80100b4 <HAL_TIM_Encoder_MspInit+0xec>)
 801000c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801000e:	4a29      	ldr	r2, [pc, #164]	; (80100b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010010:	f043 0301 	orr.w	r3, r3, #1
 8010014:	6313      	str	r3, [r2, #48]	; 0x30
 8010016:	4b27      	ldr	r3, [pc, #156]	; (80100b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801001a:	f003 0301 	and.w	r3, r3, #1
 801001e:	617b      	str	r3, [r7, #20]
 8010020:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010022:	23c0      	movs	r3, #192	; 0xc0
 8010024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010026:	2302      	movs	r3, #2
 8010028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801002a:	2300      	movs	r3, #0
 801002c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801002e:	2300      	movs	r3, #0
 8010030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8010032:	2302      	movs	r3, #2
 8010034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010036:	f107 031c 	add.w	r3, r7, #28
 801003a:	4619      	mov	r1, r3
 801003c:	481e      	ldr	r0, [pc, #120]	; (80100b8 <HAL_TIM_Encoder_MspInit+0xf0>)
 801003e:	f003 fb15 	bl	801366c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8010042:	e030      	b.n	80100a6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4a1c      	ldr	r2, [pc, #112]	; (80100bc <HAL_TIM_Encoder_MspInit+0xf4>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d12b      	bne.n	80100a6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 801004e:	2300      	movs	r3, #0
 8010050:	613b      	str	r3, [r7, #16]
 8010052:	4b18      	ldr	r3, [pc, #96]	; (80100b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010056:	4a17      	ldr	r2, [pc, #92]	; (80100b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010058:	f043 0304 	orr.w	r3, r3, #4
 801005c:	6413      	str	r3, [r2, #64]	; 0x40
 801005e:	4b15      	ldr	r3, [pc, #84]	; (80100b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010062:	f003 0304 	and.w	r3, r3, #4
 8010066:	613b      	str	r3, [r7, #16]
 8010068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801006a:	2300      	movs	r3, #0
 801006c:	60fb      	str	r3, [r7, #12]
 801006e:	4b11      	ldr	r3, [pc, #68]	; (80100b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010072:	4a10      	ldr	r2, [pc, #64]	; (80100b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010074:	f043 0302 	orr.w	r3, r3, #2
 8010078:	6313      	str	r3, [r2, #48]	; 0x30
 801007a:	4b0e      	ldr	r3, [pc, #56]	; (80100b4 <HAL_TIM_Encoder_MspInit+0xec>)
 801007c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801007e:	f003 0302 	and.w	r3, r3, #2
 8010082:	60fb      	str	r3, [r7, #12]
 8010084:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010086:	23c0      	movs	r3, #192	; 0xc0
 8010088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801008a:	2302      	movs	r3, #2
 801008c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801008e:	2300      	movs	r3, #0
 8010090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010092:	2300      	movs	r3, #0
 8010094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8010096:	2302      	movs	r3, #2
 8010098:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801009a:	f107 031c 	add.w	r3, r7, #28
 801009e:	4619      	mov	r1, r3
 80100a0:	4807      	ldr	r0, [pc, #28]	; (80100c0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80100a2:	f003 fae3 	bl	801366c <HAL_GPIO_Init>
}
 80100a6:	bf00      	nop
 80100a8:	3730      	adds	r7, #48	; 0x30
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	40000400 	.word	0x40000400
 80100b4:	40023800 	.word	0x40023800
 80100b8:	40020000 	.word	0x40020000
 80100bc:	40000800 	.word	0x40000800
 80100c0:	40020400 	.word	0x40020400

080100c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b08c      	sub	sp, #48	; 0x30
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80100cc:	f107 031c 	add.w	r3, r7, #28
 80100d0:	2200      	movs	r2, #0
 80100d2:	601a      	str	r2, [r3, #0]
 80100d4:	605a      	str	r2, [r3, #4]
 80100d6:	609a      	str	r2, [r3, #8]
 80100d8:	60da      	str	r2, [r3, #12]
 80100da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100e4:	d11e      	bne.n	8010124 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80100e6:	2300      	movs	r3, #0
 80100e8:	61bb      	str	r3, [r7, #24]
 80100ea:	4b43      	ldr	r3, [pc, #268]	; (80101f8 <HAL_TIM_MspPostInit+0x134>)
 80100ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ee:	4a42      	ldr	r2, [pc, #264]	; (80101f8 <HAL_TIM_MspPostInit+0x134>)
 80100f0:	f043 0301 	orr.w	r3, r3, #1
 80100f4:	6313      	str	r3, [r2, #48]	; 0x30
 80100f6:	4b40      	ldr	r3, [pc, #256]	; (80101f8 <HAL_TIM_MspPostInit+0x134>)
 80100f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100fa:	f003 0301 	and.w	r3, r3, #1
 80100fe:	61bb      	str	r3, [r7, #24]
 8010100:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8010102:	2308      	movs	r3, #8
 8010104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010106:	2302      	movs	r3, #2
 8010108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801010a:	2300      	movs	r3, #0
 801010c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801010e:	2303      	movs	r3, #3
 8010110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8010112:	2301      	movs	r3, #1
 8010114:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010116:	f107 031c 	add.w	r3, r7, #28
 801011a:	4619      	mov	r1, r3
 801011c:	4837      	ldr	r0, [pc, #220]	; (80101fc <HAL_TIM_MspPostInit+0x138>)
 801011e:	f003 faa5 	bl	801366c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8010122:	e064      	b.n	80101ee <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	4a35      	ldr	r2, [pc, #212]	; (8010200 <HAL_TIM_MspPostInit+0x13c>)
 801012a:	4293      	cmp	r3, r2
 801012c:	d11e      	bne.n	801016c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801012e:	2300      	movs	r3, #0
 8010130:	617b      	str	r3, [r7, #20]
 8010132:	4b31      	ldr	r3, [pc, #196]	; (80101f8 <HAL_TIM_MspPostInit+0x134>)
 8010134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010136:	4a30      	ldr	r2, [pc, #192]	; (80101f8 <HAL_TIM_MspPostInit+0x134>)
 8010138:	f043 0301 	orr.w	r3, r3, #1
 801013c:	6313      	str	r3, [r2, #48]	; 0x30
 801013e:	4b2e      	ldr	r3, [pc, #184]	; (80101f8 <HAL_TIM_MspPostInit+0x134>)
 8010140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010142:	f003 0301 	and.w	r3, r3, #1
 8010146:	617b      	str	r3, [r7, #20]
 8010148:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801014a:	2302      	movs	r3, #2
 801014c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801014e:	2302      	movs	r3, #2
 8010150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010152:	2300      	movs	r3, #0
 8010154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010156:	2300      	movs	r3, #0
 8010158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801015a:	2302      	movs	r3, #2
 801015c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801015e:	f107 031c 	add.w	r3, r7, #28
 8010162:	4619      	mov	r1, r3
 8010164:	4825      	ldr	r0, [pc, #148]	; (80101fc <HAL_TIM_MspPostInit+0x138>)
 8010166:	f003 fa81 	bl	801366c <HAL_GPIO_Init>
}
 801016a:	e040      	b.n	80101ee <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4a24      	ldr	r2, [pc, #144]	; (8010204 <HAL_TIM_MspPostInit+0x140>)
 8010172:	4293      	cmp	r3, r2
 8010174:	d13b      	bne.n	80101ee <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010176:	2300      	movs	r3, #0
 8010178:	613b      	str	r3, [r7, #16]
 801017a:	4b1f      	ldr	r3, [pc, #124]	; (80101f8 <HAL_TIM_MspPostInit+0x134>)
 801017c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801017e:	4a1e      	ldr	r2, [pc, #120]	; (80101f8 <HAL_TIM_MspPostInit+0x134>)
 8010180:	f043 0301 	orr.w	r3, r3, #1
 8010184:	6313      	str	r3, [r2, #48]	; 0x30
 8010186:	4b1c      	ldr	r3, [pc, #112]	; (80101f8 <HAL_TIM_MspPostInit+0x134>)
 8010188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801018a:	f003 0301 	and.w	r3, r3, #1
 801018e:	613b      	str	r3, [r7, #16]
 8010190:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010192:	2300      	movs	r3, #0
 8010194:	60fb      	str	r3, [r7, #12]
 8010196:	4b18      	ldr	r3, [pc, #96]	; (80101f8 <HAL_TIM_MspPostInit+0x134>)
 8010198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801019a:	4a17      	ldr	r2, [pc, #92]	; (80101f8 <HAL_TIM_MspPostInit+0x134>)
 801019c:	f043 0304 	orr.w	r3, r3, #4
 80101a0:	6313      	str	r3, [r2, #48]	; 0x30
 80101a2:	4b15      	ldr	r3, [pc, #84]	; (80101f8 <HAL_TIM_MspPostInit+0x134>)
 80101a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101a6:	f003 0304 	and.w	r3, r3, #4
 80101aa:	60fb      	str	r3, [r7, #12]
 80101ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80101ae:	2320      	movs	r3, #32
 80101b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101b2:	2302      	movs	r3, #2
 80101b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101b6:	2300      	movs	r3, #0
 80101b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80101ba:	2300      	movs	r3, #0
 80101bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80101be:	2303      	movs	r3, #3
 80101c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101c2:	f107 031c 	add.w	r3, r7, #28
 80101c6:	4619      	mov	r1, r3
 80101c8:	480c      	ldr	r0, [pc, #48]	; (80101fc <HAL_TIM_MspPostInit+0x138>)
 80101ca:	f003 fa4f 	bl	801366c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80101ce:	2340      	movs	r3, #64	; 0x40
 80101d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101d2:	2302      	movs	r3, #2
 80101d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101d6:	2300      	movs	r3, #0
 80101d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80101da:	2300      	movs	r3, #0
 80101dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80101de:	2303      	movs	r3, #3
 80101e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80101e2:	f107 031c 	add.w	r3, r7, #28
 80101e6:	4619      	mov	r1, r3
 80101e8:	4807      	ldr	r0, [pc, #28]	; (8010208 <HAL_TIM_MspPostInit+0x144>)
 80101ea:	f003 fa3f 	bl	801366c <HAL_GPIO_Init>
}
 80101ee:	bf00      	nop
 80101f0:	3730      	adds	r7, #48	; 0x30
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
 80101f6:	bf00      	nop
 80101f8:	40023800 	.word	0x40023800
 80101fc:	40020000 	.word	0x40020000
 8010200:	40000c00 	.word	0x40000c00
 8010204:	40010400 	.word	0x40010400
 8010208:	40020800 	.word	0x40020800

0801020c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b08a      	sub	sp, #40	; 0x28
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010214:	f107 0314 	add.w	r3, r7, #20
 8010218:	2200      	movs	r2, #0
 801021a:	601a      	str	r2, [r3, #0]
 801021c:	605a      	str	r2, [r3, #4]
 801021e:	609a      	str	r2, [r3, #8]
 8010220:	60da      	str	r2, [r3, #12]
 8010222:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	4a19      	ldr	r2, [pc, #100]	; (8010290 <HAL_UART_MspInit+0x84>)
 801022a:	4293      	cmp	r3, r2
 801022c:	d12c      	bne.n	8010288 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801022e:	2300      	movs	r3, #0
 8010230:	613b      	str	r3, [r7, #16]
 8010232:	4b18      	ldr	r3, [pc, #96]	; (8010294 <HAL_UART_MspInit+0x88>)
 8010234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010236:	4a17      	ldr	r2, [pc, #92]	; (8010294 <HAL_UART_MspInit+0x88>)
 8010238:	f043 0310 	orr.w	r3, r3, #16
 801023c:	6453      	str	r3, [r2, #68]	; 0x44
 801023e:	4b15      	ldr	r3, [pc, #84]	; (8010294 <HAL_UART_MspInit+0x88>)
 8010240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010242:	f003 0310 	and.w	r3, r3, #16
 8010246:	613b      	str	r3, [r7, #16]
 8010248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801024a:	2300      	movs	r3, #0
 801024c:	60fb      	str	r3, [r7, #12]
 801024e:	4b11      	ldr	r3, [pc, #68]	; (8010294 <HAL_UART_MspInit+0x88>)
 8010250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010252:	4a10      	ldr	r2, [pc, #64]	; (8010294 <HAL_UART_MspInit+0x88>)
 8010254:	f043 0301 	orr.w	r3, r3, #1
 8010258:	6313      	str	r3, [r2, #48]	; 0x30
 801025a:	4b0e      	ldr	r3, [pc, #56]	; (8010294 <HAL_UART_MspInit+0x88>)
 801025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801025e:	f003 0301 	and.w	r3, r3, #1
 8010262:	60fb      	str	r3, [r7, #12]
 8010264:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8010266:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801026a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801026c:	2302      	movs	r3, #2
 801026e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010270:	2300      	movs	r3, #0
 8010272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010274:	2303      	movs	r3, #3
 8010276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010278:	2307      	movs	r3, #7
 801027a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801027c:	f107 0314 	add.w	r3, r7, #20
 8010280:	4619      	mov	r1, r3
 8010282:	4805      	ldr	r0, [pc, #20]	; (8010298 <HAL_UART_MspInit+0x8c>)
 8010284:	f003 f9f2 	bl	801366c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8010288:	bf00      	nop
 801028a:	3728      	adds	r7, #40	; 0x28
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	40011000 	.word	0x40011000
 8010294:	40023800 	.word	0x40023800
 8010298:	40020000 	.word	0x40020000

0801029c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801029c:	b480      	push	{r7}
 801029e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80102a0:	e7fe      	b.n	80102a0 <NMI_Handler+0x4>

080102a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80102a2:	b480      	push	{r7}
 80102a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80102a6:	e7fe      	b.n	80102a6 <HardFault_Handler+0x4>

080102a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80102a8:	b480      	push	{r7}
 80102aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80102ac:	e7fe      	b.n	80102ac <MemManage_Handler+0x4>

080102ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80102ae:	b480      	push	{r7}
 80102b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80102b2:	e7fe      	b.n	80102b2 <BusFault_Handler+0x4>

080102b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80102b4:	b480      	push	{r7}
 80102b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80102b8:	e7fe      	b.n	80102b8 <UsageFault_Handler+0x4>

080102ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80102ba:	b480      	push	{r7}
 80102bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80102be:	bf00      	nop
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr

080102c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80102c8:	b480      	push	{r7}
 80102ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80102cc:	bf00      	nop
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr

080102d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80102d6:	b480      	push	{r7}
 80102d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80102da:	bf00      	nop
 80102dc:	46bd      	mov	sp, r7
 80102de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e2:	4770      	bx	lr

080102e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80102e8:	f001 fe66 	bl	8011fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80102ec:	bf00      	nop
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80102f4:	4802      	ldr	r0, [pc, #8]	; (8010300 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80102f6:	f005 f8e5 	bl	80154c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80102fa:	bf00      	nop
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	20000fc0 	.word	0x20000fc0

08010304 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8010308:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801030c:	f003 fb62 	bl	80139d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8010310:	bf00      	nop
 8010312:	bd80      	pop	{r7, pc}

08010314 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8010318:	4802      	ldr	r0, [pc, #8]	; (8010324 <TIM8_UP_TIM13_IRQHandler+0x10>)
 801031a:	f005 f8d3 	bl	80154c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 801031e:	bf00      	nop
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	20000d78 	.word	0x20000d78

08010328 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 801032c:	4802      	ldr	r0, [pc, #8]	; (8010338 <DMA2_Stream0_IRQHandler+0x10>)
 801032e:	f002 fd4b 	bl	8012dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8010332:	bf00      	nop
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	20000f60 	.word	0x20000f60

0801033c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8010340:	4802      	ldr	r0, [pc, #8]	; (801034c <DMA2_Stream2_IRQHandler+0x10>)
 8010342:	f002 fd41 	bl	8012dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8010346:	bf00      	nop
 8010348:	bd80      	pop	{r7, pc}
 801034a:	bf00      	nop
 801034c:	20001000 	.word	0x20001000

08010350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010350:	b480      	push	{r7}
 8010352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010354:	4b08      	ldr	r3, [pc, #32]	; (8010378 <SystemInit+0x28>)
 8010356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801035a:	4a07      	ldr	r2, [pc, #28]	; (8010378 <SystemInit+0x28>)
 801035c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010364:	4b04      	ldr	r3, [pc, #16]	; (8010378 <SystemInit+0x28>)
 8010366:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801036a:	609a      	str	r2, [r3, #8]
#endif
}
 801036c:	bf00      	nop
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr
 8010376:	bf00      	nop
 8010378:	e000ed00 	.word	0xe000ed00

0801037c <initSearchData>:
#include "MicroMouse.h"
#include "Action.h"
#include "Search.h"

void initSearchData(maze_node *my_maze, profile *Mouse)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af02      	add	r7, sp, #8
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6039      	str	r1, [r7, #0]
    initMaze(my_maze);
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f7fb f9e8 	bl	800b75c <initMaze>
    initWeight(my_maze);
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f7fb f98f 	bl	800b6b0 <initWeight>

    //状態の初期化
    initProfile(Mouse, my_maze);
 8010392:	6879      	ldr	r1, [r7, #4]
 8010394:	6838      	ldr	r0, [r7, #0]
 8010396:	f7fd fcbf 	bl	800dd18 <initProfile>
    Mouse->now.node = &(my_maze->RawNode[0][0]);
 801039a:	687a      	ldr	r2, [r7, #4]
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	611a      	str	r2, [r3, #16]
    Mouse->next.node = &(my_maze->RawNode[0][1]);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	1d9a      	adds	r2, r3, #6
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	61da      	str	r2, [r3, #28]

    //スタート座標にいる状態で、現在の重みを更新
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	7819      	ldrb	r1, [r3, #0]
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	785a      	ldrb	r2, [r3, #1]
 80103b0:	2301      	movs	r3, #1
 80103b2:	9301      	str	r3, [sp, #4]
 80103b4:	2302      	movs	r3, #2
 80103b6:	9300      	str	r3, [sp, #0]
 80103b8:	2302      	movs	r3, #2
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f7fb ff52 	bl	800c264 <updateAllNodeWeight>
}
 80103c0:	bf00      	nop
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <updateRealSearch>:
void updateRealSearch()
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af02      	add	r7, sp, #8
	//壁情報は
	wall_state wall_dir[4]={0};
 80103ce:	2300      	movs	r3, #0
 80103d0:	607b      	str	r3, [r7, #4]
	//wall_state wall_st[4]={0};

	//壁センサ値を読んで、各方角の壁の有無を判定
		//区画進入直前なので、更新予定の方角と座標がNextに入っているはず
		//前後左右の値として入れる
	shiftState(&my_mouse);
 80103d2:	4897      	ldr	r0, [pc, #604]	; (8010630 <updateRealSearch+0x268>)
 80103d4:	f7fd fcea 	bl	800ddac <shiftState>

    switch (my_mouse.now.car)
 80103d8:	4b95      	ldr	r3, [pc, #596]	; (8010630 <updateRealSearch+0x268>)
 80103da:	7a9b      	ldrb	r3, [r3, #10]
 80103dc:	2b06      	cmp	r3, #6
 80103de:	f200 80e9 	bhi.w	80105b4 <updateRealSearch+0x1ec>
 80103e2:	a201      	add	r2, pc, #4	; (adr r2, 80103e8 <updateRealSearch+0x20>)
 80103e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103e8:	08010405 	.word	0x08010405
 80103ec:	080105b5 	.word	0x080105b5
 80103f0:	08010471 	.word	0x08010471
 80103f4:	080105b5 	.word	0x080105b5
 80103f8:	080104dd 	.word	0x080104dd
 80103fc:	080105b5 	.word	0x080105b5
 8010400:	08010549 	.word	0x08010549
    {
    case north:
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 8010404:	4b8b      	ldr	r3, [pc, #556]	; (8010634 <updateRealSearch+0x26c>)
 8010406:	ed93 7a00 	vldr	s14, [r3]
 801040a:	4b8a      	ldr	r3, [pc, #552]	; (8010634 <updateRealSearch+0x26c>)
 801040c:	edd3 7a03 	vldr	s15, [r3, #12]
 8010410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010414:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801041c:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8010638 <updateRealSearch+0x270>
 8010420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010428:	bfcc      	ite	gt
 801042a:	2301      	movgt	r3, #1
 801042c:	2300      	movle	r3, #0
 801042e:	b2db      	uxtb	r3, r3
 8010430:	713b      	strb	r3, [r7, #4]
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 8010432:	4b80      	ldr	r3, [pc, #512]	; (8010634 <updateRealSearch+0x26c>)
 8010434:	edd3 7a01 	vldr	s15, [r3, #4]
 8010438:	ed9f 7a80 	vldr	s14, [pc, #512]	; 801063c <updateRealSearch+0x274>
 801043c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010444:	bfcc      	ite	gt
 8010446:	2301      	movgt	r3, #1
 8010448:	2300      	movle	r3, #0
 801044a:	b2db      	uxtb	r3, r3
 801044c:	717b      	strb	r3, [r7, #5]
    	wall_dir[2] = NOWALL;
 801044e:	2300      	movs	r3, #0
 8010450:	71bb      	strb	r3, [r7, #6]
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 8010452:	4b78      	ldr	r3, [pc, #480]	; (8010634 <updateRealSearch+0x26c>)
 8010454:	edd3 7a02 	vldr	s15, [r3, #8]
 8010458:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8010640 <updateRealSearch+0x278>
 801045c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010464:	bfcc      	ite	gt
 8010466:	2301      	movgt	r3, #1
 8010468:	2300      	movle	r3, #0
 801046a:	b2db      	uxtb	r3, r3
 801046c:	71fb      	strb	r3, [r7, #7]
        break;
 801046e:	e0a2      	b.n	80105b6 <updateRealSearch+0x1ee>
    case east:
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 8010470:	4b70      	ldr	r3, [pc, #448]	; (8010634 <updateRealSearch+0x26c>)
 8010472:	ed93 7a00 	vldr	s14, [r3]
 8010476:	4b6f      	ldr	r3, [pc, #444]	; (8010634 <updateRealSearch+0x26c>)
 8010478:	edd3 7a03 	vldr	s15, [r3, #12]
 801047c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010480:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010488:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8010638 <updateRealSearch+0x270>
 801048c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010494:	bfcc      	ite	gt
 8010496:	2301      	movgt	r3, #1
 8010498:	2300      	movle	r3, #0
 801049a:	b2db      	uxtb	r3, r3
 801049c:	717b      	strb	r3, [r7, #5]
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 801049e:	4b65      	ldr	r3, [pc, #404]	; (8010634 <updateRealSearch+0x26c>)
 80104a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80104a4:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801063c <updateRealSearch+0x274>
 80104a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80104ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b0:	bfcc      	ite	gt
 80104b2:	2301      	movgt	r3, #1
 80104b4:	2300      	movle	r3, #0
 80104b6:	b2db      	uxtb	r3, r3
 80104b8:	71bb      	strb	r3, [r7, #6]
    	wall_dir[3] = NOWALL;
 80104ba:	2300      	movs	r3, #0
 80104bc:	71fb      	strb	r3, [r7, #7]
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 80104be:	4b5d      	ldr	r3, [pc, #372]	; (8010634 <updateRealSearch+0x26c>)
 80104c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80104c4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8010640 <updateRealSearch+0x278>
 80104c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80104cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d0:	bfcc      	ite	gt
 80104d2:	2301      	movgt	r3, #1
 80104d4:	2300      	movle	r3, #0
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	713b      	strb	r3, [r7, #4]
        break;
 80104da:	e06c      	b.n	80105b6 <updateRealSearch+0x1ee>
    case south:
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 80104dc:	4b55      	ldr	r3, [pc, #340]	; (8010634 <updateRealSearch+0x26c>)
 80104de:	ed93 7a00 	vldr	s14, [r3]
 80104e2:	4b54      	ldr	r3, [pc, #336]	; (8010634 <updateRealSearch+0x26c>)
 80104e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80104e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80104ec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80104f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80104f4:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8010638 <updateRealSearch+0x270>
 80104f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80104fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010500:	bfcc      	ite	gt
 8010502:	2301      	movgt	r3, #1
 8010504:	2300      	movle	r3, #0
 8010506:	b2db      	uxtb	r3, r3
 8010508:	71bb      	strb	r3, [r7, #6]
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 801050a:	4b4a      	ldr	r3, [pc, #296]	; (8010634 <updateRealSearch+0x26c>)
 801050c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010510:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801063c <updateRealSearch+0x274>
 8010514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801051c:	bfcc      	ite	gt
 801051e:	2301      	movgt	r3, #1
 8010520:	2300      	movle	r3, #0
 8010522:	b2db      	uxtb	r3, r3
 8010524:	71fb      	strb	r3, [r7, #7]
    	wall_dir[0] = NOWALL;
 8010526:	2300      	movs	r3, #0
 8010528:	713b      	strb	r3, [r7, #4]
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 801052a:	4b42      	ldr	r3, [pc, #264]	; (8010634 <updateRealSearch+0x26c>)
 801052c:	edd3 7a02 	vldr	s15, [r3, #8]
 8010530:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8010640 <updateRealSearch+0x278>
 8010534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801053c:	bfcc      	ite	gt
 801053e:	2301      	movgt	r3, #1
 8010540:	2300      	movle	r3, #0
 8010542:	b2db      	uxtb	r3, r3
 8010544:	717b      	strb	r3, [r7, #5]
        break;
 8010546:	e036      	b.n	80105b6 <updateRealSearch+0x1ee>
    case west:
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 8010548:	4b3a      	ldr	r3, [pc, #232]	; (8010634 <updateRealSearch+0x26c>)
 801054a:	ed93 7a00 	vldr	s14, [r3]
 801054e:	4b39      	ldr	r3, [pc, #228]	; (8010634 <updateRealSearch+0x26c>)
 8010550:	edd3 7a03 	vldr	s15, [r3, #12]
 8010554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010558:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801055c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010560:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8010638 <updateRealSearch+0x270>
 8010564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801056c:	bfcc      	ite	gt
 801056e:	2301      	movgt	r3, #1
 8010570:	2300      	movle	r3, #0
 8010572:	b2db      	uxtb	r3, r3
 8010574:	71fb      	strb	r3, [r7, #7]
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 8010576:	4b2f      	ldr	r3, [pc, #188]	; (8010634 <updateRealSearch+0x26c>)
 8010578:	edd3 7a01 	vldr	s15, [r3, #4]
 801057c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801063c <updateRealSearch+0x274>
 8010580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010588:	bfcc      	ite	gt
 801058a:	2301      	movgt	r3, #1
 801058c:	2300      	movle	r3, #0
 801058e:	b2db      	uxtb	r3, r3
 8010590:	713b      	strb	r3, [r7, #4]
    	wall_dir[1] = NOWALL;
 8010592:	2300      	movs	r3, #0
 8010594:	717b      	strb	r3, [r7, #5]
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 8010596:	4b27      	ldr	r3, [pc, #156]	; (8010634 <updateRealSearch+0x26c>)
 8010598:	edd3 7a02 	vldr	s15, [r3, #8]
 801059c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8010640 <updateRealSearch+0x278>
 80105a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80105a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105a8:	bfcc      	ite	gt
 80105aa:	2301      	movgt	r3, #1
 80105ac:	2300      	movle	r3, #0
 80105ae:	b2db      	uxtb	r3, r3
 80105b0:	71bb      	strb	r3, [r7, #6]
        break;
 80105b2:	e000      	b.n	80105b6 <updateRealSearch+0x1ee>
    default:
        //万が一斜めの方角を向いているときに呼び出してしまったら、
        break;
 80105b4:	bf00      	nop
//	Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
//	Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
//	Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
//	Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
    //アクションが終わるときがノードの上にいる状態なので、状態シフト済みとする（この関数はアクション中に呼び出される想定）
    my_mouse.now.wall.north = wall_dir[0];
 80105b6:	793b      	ldrb	r3, [r7, #4]
 80105b8:	f003 0303 	and.w	r3, r3, #3
 80105bc:	b2d9      	uxtb	r1, r3
 80105be:	4a1c      	ldr	r2, [pc, #112]	; (8010630 <updateRealSearch+0x268>)
 80105c0:	7b13      	ldrb	r3, [r2, #12]
 80105c2:	f361 0301 	bfi	r3, r1, #0, #2
 80105c6:	7313      	strb	r3, [r2, #12]
    my_mouse.now.wall.east = wall_dir[1];
 80105c8:	797b      	ldrb	r3, [r7, #5]
 80105ca:	f003 0303 	and.w	r3, r3, #3
 80105ce:	b2d9      	uxtb	r1, r3
 80105d0:	4a17      	ldr	r2, [pc, #92]	; (8010630 <updateRealSearch+0x268>)
 80105d2:	7b13      	ldrb	r3, [r2, #12]
 80105d4:	f361 0383 	bfi	r3, r1, #2, #2
 80105d8:	7313      	strb	r3, [r2, #12]
    my_mouse.now.wall.south = wall_dir[2];
 80105da:	79bb      	ldrb	r3, [r7, #6]
 80105dc:	f003 0303 	and.w	r3, r3, #3
 80105e0:	b2d9      	uxtb	r1, r3
 80105e2:	4a13      	ldr	r2, [pc, #76]	; (8010630 <updateRealSearch+0x268>)
 80105e4:	7b13      	ldrb	r3, [r2, #12]
 80105e6:	f361 1305 	bfi	r3, r1, #4, #2
 80105ea:	7313      	strb	r3, [r2, #12]
    my_mouse.now.wall.west = wall_dir[3];
 80105ec:	79fb      	ldrb	r3, [r7, #7]
 80105ee:	f003 0303 	and.w	r3, r3, #3
 80105f2:	b2d9      	uxtb	r1, r3
 80105f4:	4a0e      	ldr	r2, [pc, #56]	; (8010630 <updateRealSearch+0x268>)
 80105f6:	7b13      	ldrb	r3, [r2, #12]
 80105f8:	f361 1387 	bfi	r3, r1, #6, #2
 80105fc:	7313      	strb	r3, [r2, #12]
	//getWallNow(&(my_mouse->now), &wall[0]);

	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 80105fe:	4b0c      	ldr	r3, [pc, #48]	; (8010630 <updateRealSearch+0x268>)
 8010600:	7a1a      	ldrb	r2, [r3, #8]
 8010602:	4b0b      	ldr	r3, [pc, #44]	; (8010630 <updateRealSearch+0x268>)
 8010604:	7a5b      	ldrb	r3, [r3, #9]
 8010606:	490f      	ldr	r1, [pc, #60]	; (8010644 <updateRealSearch+0x27c>)
 8010608:	480f      	ldr	r0, [pc, #60]	; (8010648 <updateRealSearch+0x280>)
 801060a:	f7fb fb91 	bl	800bd30 <updateNodeThree>
	updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 801060e:	4b08      	ldr	r3, [pc, #32]	; (8010630 <updateRealSearch+0x268>)
 8010610:	7819      	ldrb	r1, [r3, #0]
 8010612:	4b07      	ldr	r3, [pc, #28]	; (8010630 <updateRealSearch+0x268>)
 8010614:	785a      	ldrb	r2, [r3, #1]
 8010616:	2301      	movs	r3, #1
 8010618:	9301      	str	r3, [sp, #4]
 801061a:	2302      	movs	r3, #2
 801061c:	9300      	str	r3, [sp, #0]
 801061e:	2302      	movs	r3, #2
 8010620:	4809      	ldr	r0, [pc, #36]	; (8010648 <updateRealSearch+0x280>)
 8010622:	f7fb fe1f 	bl	800c264 <updateAllNodeWeight>
}
 8010626:	bf00      	nop
 8010628:	3708      	adds	r7, #8
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}
 801062e:	bf00      	nop
 8010630:	200004dc 	.word	0x200004dc
 8010634:	20000b44 	.word	0x20000b44
 8010638:	42340000 	.word	0x42340000
 801063c:	42b40000 	.word	0x42b40000
 8010640:	42c80000 	.word	0x42c80000
 8010644:	200004e4 	.word	0x200004e4
 8010648:	20000688 	.word	0x20000688

0801064c <getNextDirection>:
//↑と↓は新ノードに来た時の処理なので、アクションの区切りをずらせばよさそう。
//現情報と次情報から次の進行方向を得る処理
void getNextDirection(maze_node *my_maze, profile *Mouse, char turn_mode)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b084      	sub	sp, #16
 8010650:	af00      	add	r7, sp, #0
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	4613      	mov	r3, r2
 8010658:	71fb      	strb	r3, [r7, #7]
	//メインでノード選択
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	7a99      	ldrb	r1, [r3, #10]
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	691a      	ldr	r2, [r3, #16]
 8010662:	2301      	movs	r3, #1
 8010664:	68f8      	ldr	r0, [r7, #12]
 8010666:	f7fc fae1 	bl	800cc2c <getNextNode>
 801066a:	4602      	mov	r2, r0
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	61da      	str	r2, [r3, #28]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	f103 0008 	add.w	r0, r3, #8
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	f103 0114 	add.w	r1, r3, #20
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	69db      	ldr	r3, [r3, #28]
 8010680:	461a      	mov	r2, r3
 8010682:	f7fd f809 	bl	800d698 <getNextState>

	//既知区間加速このswitch文中で書くかも
		//コマンドキューのときはここでコマンドを発行してキューに渡す
	AddVelocity = 0;
 8010686:	4b3a      	ldr	r3, [pc, #232]	; (8010770 <getNextDirection+0x124>)
 8010688:	f04f 0200 	mov.w	r2, #0
 801068c:	601a      	str	r2, [r3, #0]
	//2つのアクションを組み合わせたときに壁とマップの更新が入ってしまわないようにする
	switch(Mouse->next.dir)
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	7ddb      	ldrb	r3, [r3, #23]
 8010692:	2b05      	cmp	r3, #5
 8010694:	d867      	bhi.n	8010766 <getNextDirection+0x11a>
 8010696:	a201      	add	r2, pc, #4	; (adr r2, 801069c <getNextDirection+0x50>)
 8010698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801069c:	080106b5 	.word	0x080106b5
 80106a0:	080106db 	.word	0x080106db
 80106a4:	080106ed 	.word	0x080106ed
 80106a8:	08010709 	.word	0x08010709
 80106ac:	08010739 	.word	0x08010739
 80106b0:	08010755 	.word	0x08010755
	{
	case front:
		//ただ直進
		Calc = SearchOrFast;
 80106b4:	4b2f      	ldr	r3, [pc, #188]	; (8010774 <getNextDirection+0x128>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4a2f      	ldr	r2, [pc, #188]	; (8010778 <getNextDirection+0x12c>)
 80106ba:	6013      	str	r3, [r2, #0]
		GoStraight(90, ExploreVelocity , AddVelocity);
 80106bc:	4b2f      	ldr	r3, [pc, #188]	; (801077c <getNextDirection+0x130>)
 80106be:	edd3 7a00 	vldr	s15, [r3]
 80106c2:	4b2b      	ldr	r3, [pc, #172]	; (8010770 <getNextDirection+0x124>)
 80106c4:	ed93 7a00 	vldr	s14, [r3]
 80106c8:	eeb0 1a47 	vmov.f32	s2, s14
 80106cc:	eef0 0a67 	vmov.f32	s1, s15
 80106d0:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8010780 <getNextDirection+0x134>
 80106d4:	f7f9 fbc0 	bl	8009e58 <GoStraight>
		break;
 80106d8:	e045      	b.n	8010766 <getNextDirection+0x11a>
	case right:
		//右旋回
		Calc = SearchOrFast;
 80106da:	4b26      	ldr	r3, [pc, #152]	; (8010774 <getNextDirection+0x128>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	4a26      	ldr	r2, [pc, #152]	; (8010778 <getNextDirection+0x12c>)
 80106e0:	6013      	str	r3, [r2, #0]
		TurnRight(turn_mode);
 80106e2:	79fb      	ldrb	r3, [r7, #7]
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7f9 fcdd 	bl	800a0a4 <TurnRight>
		break;
 80106ea:	e03c      	b.n	8010766 <getNextDirection+0x11a>
	case backright:
		//Uターンして右旋回
		//壁の更新の処理を呼ばない
//		SearchOrFast = 1;
		Calc = 1;//マップ更新したくないときは1を代入。
 80106ec:	4b22      	ldr	r3, [pc, #136]	; (8010778 <getNextDirection+0x12c>)
 80106ee:	2201      	movs	r2, #1
 80106f0:	601a      	str	r2, [r3, #0]
		GoBack();
 80106f2:	f7f9 fd5d 	bl	800a1b0 <GoBack>
		Calc = SearchOrFast;
 80106f6:	4b1f      	ldr	r3, [pc, #124]	; (8010774 <getNextDirection+0x128>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	4a1f      	ldr	r2, [pc, #124]	; (8010778 <getNextDirection+0x12c>)
 80106fc:	6013      	str	r3, [r2, #0]
		TurnRight(turn_mode);
 80106fe:	79fb      	ldrb	r3, [r7, #7]
 8010700:	4618      	mov	r0, r3
 8010702:	f7f9 fccf 	bl	800a0a4 <TurnRight>


		break;
 8010706:	e02e      	b.n	8010766 <getNextDirection+0x11a>
	case back:
		//Uターンして直進.加速できる
		Calc = 1;//マップ更新したくないときは1を代入。
 8010708:	4b1b      	ldr	r3, [pc, #108]	; (8010778 <getNextDirection+0x12c>)
 801070a:	2201      	movs	r2, #1
 801070c:	601a      	str	r2, [r3, #0]
		GoBack();
 801070e:	f7f9 fd4f 	bl	800a1b0 <GoBack>
		Calc = SearchOrFast;
 8010712:	4b18      	ldr	r3, [pc, #96]	; (8010774 <getNextDirection+0x128>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	4a18      	ldr	r2, [pc, #96]	; (8010778 <getNextDirection+0x12c>)
 8010718:	6013      	str	r3, [r2, #0]
		GoStraight(90, ExploreVelocity , AddVelocity);
 801071a:	4b18      	ldr	r3, [pc, #96]	; (801077c <getNextDirection+0x130>)
 801071c:	edd3 7a00 	vldr	s15, [r3]
 8010720:	4b13      	ldr	r3, [pc, #76]	; (8010770 <getNextDirection+0x124>)
 8010722:	ed93 7a00 	vldr	s14, [r3]
 8010726:	eeb0 1a47 	vmov.f32	s2, s14
 801072a:	eef0 0a67 	vmov.f32	s1, s15
 801072e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8010780 <getNextDirection+0x134>
 8010732:	f7f9 fb91 	bl	8009e58 <GoStraight>
		break;
 8010736:	e016      	b.n	8010766 <getNextDirection+0x11a>
	case backleft:
		//Uターンして左旋回
		Calc = 1;//マップ更新したくないときは1を代入。
 8010738:	4b0f      	ldr	r3, [pc, #60]	; (8010778 <getNextDirection+0x12c>)
 801073a:	2201      	movs	r2, #1
 801073c:	601a      	str	r2, [r3, #0]
		GoBack();
 801073e:	f7f9 fd37 	bl	800a1b0 <GoBack>
		Calc = SearchOrFast;
 8010742:	4b0c      	ldr	r3, [pc, #48]	; (8010774 <getNextDirection+0x128>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	4a0c      	ldr	r2, [pc, #48]	; (8010778 <getNextDirection+0x12c>)
 8010748:	6013      	str	r3, [r2, #0]
		TurnLeft(turn_mode);
 801074a:	79fb      	ldrb	r3, [r7, #7]
 801074c:	4618      	mov	r0, r3
 801074e:	f7f9 fceb 	bl	800a128 <TurnLeft>
		break;
 8010752:	e008      	b.n	8010766 <getNextDirection+0x11a>
	case left:
		//左旋回
		Calc = SearchOrFast;
 8010754:	4b07      	ldr	r3, [pc, #28]	; (8010774 <getNextDirection+0x128>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	4a07      	ldr	r2, [pc, #28]	; (8010778 <getNextDirection+0x12c>)
 801075a:	6013      	str	r3, [r2, #0]
		TurnLeft(turn_mode);
 801075c:	79fb      	ldrb	r3, [r7, #7]
 801075e:	4618      	mov	r0, r3
 8010760:	f7f9 fce2 	bl	800a128 <TurnLeft>
		break;
 8010764:	bf00      	nop
	}

}
 8010766:	bf00      	nop
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	20000adc 	.word	0x20000adc
 8010774:	20000d70 	.word	0x20000d70
 8010778:	20000d74 	.word	0x20000d74
 801077c:	20000bf8 	.word	0x20000bf8
 8010780:	42b40000 	.word	0x42b40000

08010784 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b086      	sub	sp, #24
 8010788:	af00      	add	r7, sp, #0
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010790:	2300      	movs	r3, #0
 8010792:	617b      	str	r3, [r7, #20]
 8010794:	e00a      	b.n	80107ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010796:	f7fe fc59 	bl	800f04c <__io_getchar>
 801079a:	4601      	mov	r1, r0
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	1c5a      	adds	r2, r3, #1
 80107a0:	60ba      	str	r2, [r7, #8]
 80107a2:	b2ca      	uxtb	r2, r1
 80107a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	3301      	adds	r3, #1
 80107aa:	617b      	str	r3, [r7, #20]
 80107ac:	697a      	ldr	r2, [r7, #20]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	dbf0      	blt.n	8010796 <_read+0x12>
	}

return len;
 80107b4:	687b      	ldr	r3, [r7, #4]
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3718      	adds	r7, #24
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}

080107be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80107be:	b580      	push	{r7, lr}
 80107c0:	b086      	sub	sp, #24
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	60f8      	str	r0, [r7, #12]
 80107c6:	60b9      	str	r1, [r7, #8]
 80107c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80107ca:	2300      	movs	r3, #0
 80107cc:	617b      	str	r3, [r7, #20]
 80107ce:	e009      	b.n	80107e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	1c5a      	adds	r2, r3, #1
 80107d4:	60ba      	str	r2, [r7, #8]
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fe fc25 	bl	800f028 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	3301      	adds	r3, #1
 80107e2:	617b      	str	r3, [r7, #20]
 80107e4:	697a      	ldr	r2, [r7, #20]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	dbf1      	blt.n	80107d0 <_write+0x12>
	}
	return len;
 80107ec:	687b      	ldr	r3, [r7, #4]
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3718      	adds	r7, #24
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}

080107f6 <_close>:

int _close(int file)
{
 80107f6:	b480      	push	{r7}
 80107f8:	b083      	sub	sp, #12
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
	return -1;
 80107fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010802:	4618      	mov	r0, r3
 8010804:	370c      	adds	r7, #12
 8010806:	46bd      	mov	sp, r7
 8010808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080c:	4770      	bx	lr

0801080e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801080e:	b480      	push	{r7}
 8010810:	b083      	sub	sp, #12
 8010812:	af00      	add	r7, sp, #0
 8010814:	6078      	str	r0, [r7, #4]
 8010816:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801081e:	605a      	str	r2, [r3, #4]
	return 0;
 8010820:	2300      	movs	r3, #0
}
 8010822:	4618      	mov	r0, r3
 8010824:	370c      	adds	r7, #12
 8010826:	46bd      	mov	sp, r7
 8010828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082c:	4770      	bx	lr

0801082e <_isatty>:

int _isatty(int file)
{
 801082e:	b480      	push	{r7}
 8010830:	b083      	sub	sp, #12
 8010832:	af00      	add	r7, sp, #0
 8010834:	6078      	str	r0, [r7, #4]
	return 1;
 8010836:	2301      	movs	r3, #1
}
 8010838:	4618      	mov	r0, r3
 801083a:	370c      	adds	r7, #12
 801083c:	46bd      	mov	sp, r7
 801083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010842:	4770      	bx	lr

08010844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010844:	b480      	push	{r7}
 8010846:	b085      	sub	sp, #20
 8010848:	af00      	add	r7, sp, #0
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	60b9      	str	r1, [r7, #8]
 801084e:	607a      	str	r2, [r7, #4]
	return 0;
 8010850:	2300      	movs	r3, #0
}
 8010852:	4618      	mov	r0, r3
 8010854:	3714      	adds	r7, #20
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
	...

08010860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b086      	sub	sp, #24
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010868:	4a14      	ldr	r2, [pc, #80]	; (80108bc <_sbrk+0x5c>)
 801086a:	4b15      	ldr	r3, [pc, #84]	; (80108c0 <_sbrk+0x60>)
 801086c:	1ad3      	subs	r3, r2, r3
 801086e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010874:	4b13      	ldr	r3, [pc, #76]	; (80108c4 <_sbrk+0x64>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d102      	bne.n	8010882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801087c:	4b11      	ldr	r3, [pc, #68]	; (80108c4 <_sbrk+0x64>)
 801087e:	4a12      	ldr	r2, [pc, #72]	; (80108c8 <_sbrk+0x68>)
 8010880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010882:	4b10      	ldr	r3, [pc, #64]	; (80108c4 <_sbrk+0x64>)
 8010884:	681a      	ldr	r2, [r3, #0]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	4413      	add	r3, r2
 801088a:	693a      	ldr	r2, [r7, #16]
 801088c:	429a      	cmp	r2, r3
 801088e:	d207      	bcs.n	80108a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010890:	f006 fba4 	bl	8016fdc <__errno>
 8010894:	4602      	mov	r2, r0
 8010896:	230c      	movs	r3, #12
 8010898:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 801089a:	f04f 33ff 	mov.w	r3, #4294967295
 801089e:	e009      	b.n	80108b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80108a0:	4b08      	ldr	r3, [pc, #32]	; (80108c4 <_sbrk+0x64>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80108a6:	4b07      	ldr	r3, [pc, #28]	; (80108c4 <_sbrk+0x64>)
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	4413      	add	r3, r2
 80108ae:	4a05      	ldr	r2, [pc, #20]	; (80108c4 <_sbrk+0x64>)
 80108b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80108b2:	68fb      	ldr	r3, [r7, #12]
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3718      	adds	r7, #24
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}
 80108bc:	20020000 	.word	0x20020000
 80108c0:	00000400 	.word	0x00000400
 80108c4:	20000238 	.word	0x20000238
 80108c8:	20001088 	.word	0x20001088

080108cc <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 80108cc:	b580      	push	{r7, lr}
 80108ce:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 80108d0:	2203      	movs	r2, #3
 80108d2:	490a      	ldr	r1, [pc, #40]	; (80108fc <ADCStart+0x30>)
 80108d4:	480a      	ldr	r0, [pc, #40]	; (8010900 <ADCStart+0x34>)
 80108d6:	f001 fbf5 	bl	80120c4 <HAL_ADC_Start_DMA>
 80108da:	4603      	mov	r3, r0
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d001      	beq.n	80108e4 <ADCStart+0x18>
	{
		Error_Handler();
 80108e0:	f7ff f996 	bl	800fc10 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 80108e4:	2202      	movs	r2, #2
 80108e6:	4907      	ldr	r1, [pc, #28]	; (8010904 <ADCStart+0x38>)
 80108e8:	4807      	ldr	r0, [pc, #28]	; (8010908 <ADCStart+0x3c>)
 80108ea:	f001 fbeb 	bl	80120c4 <HAL_ADC_Start_DMA>
 80108ee:	4603      	mov	r3, r0
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d001      	beq.n	80108f8 <ADCStart+0x2c>
	{
		Error_Handler();
 80108f4:	f7ff f98c 	bl	800fc10 <Error_Handler>
	}

}
 80108f8:	bf00      	nop
 80108fa:	bd80      	pop	{r7, pc}
 80108fc:	200002bc 	.word	0x200002bc
 8010900:	20000ed8 	.word	0x20000ed8
 8010904:	200002c8 	.word	0x200002c8
 8010908:	20000df8 	.word	0x20000df8

0801090c <ADCStop>:
void ADCStop()
{
 801090c:	b580      	push	{r7, lr}
 801090e:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8010910:	480e      	ldr	r0, [pc, #56]	; (801094c <ADCStop+0x40>)
 8010912:	f001 fcc9 	bl	80122a8 <HAL_ADC_Stop_DMA>
 8010916:	4603      	mov	r3, r0
 8010918:	2b00      	cmp	r3, #0
 801091a:	d007      	beq.n	801092c <ADCStop+0x20>
	{
		printf("な\r\n");
 801091c:	480c      	ldr	r0, [pc, #48]	; (8010950 <ADCStop+0x44>)
 801091e:	f008 f925 	bl	8018b6c <puts>
		Error_Handler();
 8010922:	f7ff f975 	bl	800fc10 <Error_Handler>
		printf("に\r\n");
 8010926:	480b      	ldr	r0, [pc, #44]	; (8010954 <ADCStop+0x48>)
 8010928:	f008 f920 	bl	8018b6c <puts>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 801092c:	480a      	ldr	r0, [pc, #40]	; (8010958 <ADCStop+0x4c>)
 801092e:	f001 fcbb 	bl	80122a8 <HAL_ADC_Stop_DMA>
 8010932:	4603      	mov	r3, r0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d007      	beq.n	8010948 <ADCStop+0x3c>
	{
		printf("ぬ\r\n");
 8010938:	4808      	ldr	r0, [pc, #32]	; (801095c <ADCStop+0x50>)
 801093a:	f008 f917 	bl	8018b6c <puts>
		Error_Handler();
 801093e:	f7ff f967 	bl	800fc10 <Error_Handler>
		printf("ね\r\n");
 8010942:	4807      	ldr	r0, [pc, #28]	; (8010960 <ADCStop+0x54>)
 8010944:	f008 f912 	bl	8018b6c <puts>
	}
}
 8010948:	bf00      	nop
 801094a:	bd80      	pop	{r7, pc}
 801094c:	20000ed8 	.word	0x20000ed8
 8010950:	0801c538 	.word	0x0801c538
 8010954:	0801c540 	.word	0x0801c540
 8010958:	20000df8 	.word	0x20000df8
 801095c:	0801c548 	.word	0x0801c548
 8010960:	0801c550 	.word	0x0801c550

08010964 <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 8010964:	b480      	push	{r7}
 8010966:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 8010968:	4b05      	ldr	r3, [pc, #20]	; (8010980 <FLASH_Unlock+0x1c>)
 801096a:	4a06      	ldr	r2, [pc, #24]	; (8010984 <FLASH_Unlock+0x20>)
 801096c:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 801096e:	4b04      	ldr	r3, [pc, #16]	; (8010980 <FLASH_Unlock+0x1c>)
 8010970:	4a05      	ldr	r2, [pc, #20]	; (8010988 <FLASH_Unlock+0x24>)
 8010972:	605a      	str	r2, [r3, #4]
}
 8010974:	bf00      	nop
 8010976:	46bd      	mov	sp, r7
 8010978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097c:	4770      	bx	lr
 801097e:	bf00      	nop
 8010980:	40023c00 	.word	0x40023c00
 8010984:	45670123 	.word	0x45670123
 8010988:	cdef89ab 	.word	0xcdef89ab

0801098c <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 801098c:	b480      	push	{r7}
 801098e:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8010990:	4b05      	ldr	r3, [pc, #20]	; (80109a8 <FLASH_Lock+0x1c>)
 8010992:	691b      	ldr	r3, [r3, #16]
 8010994:	4a04      	ldr	r2, [pc, #16]	; (80109a8 <FLASH_Lock+0x1c>)
 8010996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801099a:	6113      	str	r3, [r2, #16]

}
 801099c:	bf00      	nop
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr
 80109a6:	bf00      	nop
 80109a8:	40023c00 	.word	0x40023c00

080109ac <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 80109ac:	b480      	push	{r7}
 80109ae:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 80109b0:	bf00      	nop
 80109b2:	4b05      	ldr	r3, [pc, #20]	; (80109c8 <FLASH_WaitBusy+0x1c>)
 80109b4:	68db      	ldr	r3, [r3, #12]
 80109b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d1f9      	bne.n	80109b2 <FLASH_WaitBusy+0x6>
}
 80109be:	bf00      	nop
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr
 80109c8:	40023c00 	.word	0x40023c00

080109cc <FLASH_Read_Word>:
	FLASH->CR &= ~FLASH_CR_PG;

	FLASH_Lock();
}
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 80109d6:	f7ff ffc5 	bl	8010964 <FLASH_Unlock>

	FLASH_WaitBusy();
 80109da:	f7ff ffe7 	bl	80109ac <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 80109de:	4b0f      	ldr	r3, [pc, #60]	; (8010a1c <FLASH_Read_Word+0x50>)
 80109e0:	691b      	ldr	r3, [r3, #16]
 80109e2:	4a0e      	ldr	r2, [pc, #56]	; (8010a1c <FLASH_Read_Word+0x50>)
 80109e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80109e8:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 80109ea:	4b0c      	ldr	r3, [pc, #48]	; (8010a1c <FLASH_Read_Word+0x50>)
 80109ec:	691b      	ldr	r3, [r3, #16]
 80109ee:	4a0b      	ldr	r2, [pc, #44]	; (8010a1c <FLASH_Read_Word+0x50>)
 80109f0:	f043 0301 	orr.w	r3, r3, #1
 80109f4:	6113      	str	r3, [r2, #16]

	* data = *(__IO uint32_t*)address;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681a      	ldr	r2, [r3, #0]
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 80109fe:	f7ff ffd5 	bl	80109ac <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 8010a02:	4b06      	ldr	r3, [pc, #24]	; (8010a1c <FLASH_Read_Word+0x50>)
 8010a04:	691b      	ldr	r3, [r3, #16]
 8010a06:	4a05      	ldr	r2, [pc, #20]	; (8010a1c <FLASH_Read_Word+0x50>)
 8010a08:	f023 0301 	bic.w	r3, r3, #1
 8010a0c:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 8010a0e:	f7ff ffbd 	bl	801098c <FLASH_Lock>
}
 8010a12:	bf00      	nop
 8010a14:	3708      	adds	r7, #8
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	40023c00 	.word	0x40023c00

08010a20 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 8010a2c:	f7ff ff9a 	bl	8010964 <FLASH_Unlock>

	FLASH_WaitBusy();
 8010a30:	f7ff ffbc 	bl	80109ac <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 8010a34:	4b0e      	ldr	r3, [pc, #56]	; (8010a70 <FLASH_Write_Word_F+0x50>)
 8010a36:	691b      	ldr	r3, [r3, #16]
 8010a38:	4a0d      	ldr	r2, [pc, #52]	; (8010a70 <FLASH_Write_Word_F+0x50>)
 8010a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010a3e:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 8010a40:	4b0b      	ldr	r3, [pc, #44]	; (8010a70 <FLASH_Write_Word_F+0x50>)
 8010a42:	691b      	ldr	r3, [r3, #16]
 8010a44:	4a0a      	ldr	r2, [pc, #40]	; (8010a70 <FLASH_Write_Word_F+0x50>)
 8010a46:	f043 0301 	orr.w	r3, r3, #1
 8010a4a:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	683a      	ldr	r2, [r7, #0]
 8010a50:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 8010a52:	f7ff ffab 	bl	80109ac <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 8010a56:	4b06      	ldr	r3, [pc, #24]	; (8010a70 <FLASH_Write_Word_F+0x50>)
 8010a58:	691b      	ldr	r3, [r3, #16]
 8010a5a:	4a05      	ldr	r2, [pc, #20]	; (8010a70 <FLASH_Write_Word_F+0x50>)
 8010a5c:	f023 0301 	bic.w	r3, r3, #1
 8010a60:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 8010a62:	f7ff ff93 	bl	801098c <FLASH_Lock>
}
 8010a66:	bf00      	nop
 8010a68:	3708      	adds	r7, #8
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	40023c00 	.word	0x40023c00

08010a74 <FLASH_Read_Word_F>:
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 8010a7e:	f7ff ff71 	bl	8010964 <FLASH_Unlock>

	FLASH_WaitBusy();
 8010a82:	f7ff ff93 	bl	80109ac <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 8010a86:	4b0f      	ldr	r3, [pc, #60]	; (8010ac4 <FLASH_Read_Word_F+0x50>)
 8010a88:	691b      	ldr	r3, [r3, #16]
 8010a8a:	4a0e      	ldr	r2, [pc, #56]	; (8010ac4 <FLASH_Read_Word_F+0x50>)
 8010a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010a90:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 8010a92:	4b0c      	ldr	r3, [pc, #48]	; (8010ac4 <FLASH_Read_Word_F+0x50>)
 8010a94:	691b      	ldr	r3, [r3, #16]
 8010a96:	4a0b      	ldr	r2, [pc, #44]	; (8010ac4 <FLASH_Read_Word_F+0x50>)
 8010a98:	f043 0301 	orr.w	r3, r3, #1
 8010a9c:	6113      	str	r3, [r2, #16]

	* data = *(__IO float*)address;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681a      	ldr	r2, [r3, #0]
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 8010aa6:	f7ff ff81 	bl	80109ac <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 8010aaa:	4b06      	ldr	r3, [pc, #24]	; (8010ac4 <FLASH_Read_Word_F+0x50>)
 8010aac:	691b      	ldr	r3, [r3, #16]
 8010aae:	4a05      	ldr	r2, [pc, #20]	; (8010ac4 <FLASH_Read_Word_F+0x50>)
 8010ab0:	f023 0301 	bic.w	r3, r3, #1
 8010ab4:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 8010ab6:	f7ff ff69 	bl	801098c <FLASH_Lock>
}
 8010aba:	bf00      	nop
 8010abc:	3708      	adds	r7, #8
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	40023c00 	.word	0x40023c00

08010ac8 <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b088      	sub	sp, #32
 8010acc:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8010ace:	f002 fbe3 	bl	8013298 <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 8010ad6:	2309      	movs	r3, #9
 8010ad8:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8010ada:	2302      	movs	r3, #2
 8010adc:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 8010ade:	2301      	movs	r3, #1
 8010ae0:	617b      	str	r3, [r7, #20]

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 8010ae2:	1d3a      	adds	r2, r7, #4
 8010ae4:	f107 0308 	add.w	r3, r7, #8
 8010ae8:	4611      	mov	r1, r2
 8010aea:	4618      	mov	r0, r3
 8010aec:	f002 fc9c 	bl	8013428 <HAL_FLASHEx_Erase>
 8010af0:	4603      	mov	r3, r0
 8010af2:	77fb      	strb	r3, [r7, #31]

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 8010af4:	f002 fbf2 	bl	80132dc <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 8010af8:	7ffb      	ldrb	r3, [r7, #31]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d105      	bne.n	8010b0a <Flash_clear_sector9+0x42>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b04:	d101      	bne.n	8010b0a <Flash_clear_sector9+0x42>
 8010b06:	2301      	movs	r3, #1
 8010b08:	e000      	b.n	8010b0c <Flash_clear_sector9+0x44>
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	f003 0301 	and.w	r3, r3, #1
 8010b10:	b2db      	uxtb	r3, r3
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3720      	adds	r7, #32
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
	...

08010b1c <read_byte>:
//		Error_Handler();
//		printf("エラー2\r\n");
//	}
//	printf("ok\r\n");
//}
inline uint8_t read_byte( uint8_t reg ) {
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b084      	sub	sp, #16
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	4603      	mov	r3, r0
 8010b24:	71fb      	strb	r3, [r7, #7]

	uint8_t ret,val;

	ret = reg | 0x80;
 8010b26:	79fb      	ldrb	r3, [r7, #7]
 8010b28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010b2c:	b2db      	uxtb	r3, r3
 8010b2e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8010b30:	2200      	movs	r2, #0
 8010b32:	2104      	movs	r1, #4
 8010b34:	480d      	ldr	r0, [pc, #52]	; (8010b6c <read_byte+0x50>)
 8010b36:	f002 ff33 	bl	80139a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8010b3a:	f107 010f 	add.w	r1, r7, #15
 8010b3e:	2364      	movs	r3, #100	; 0x64
 8010b40:	2201      	movs	r2, #1
 8010b42:	480b      	ldr	r0, [pc, #44]	; (8010b70 <read_byte+0x54>)
 8010b44:	f003 fc24 	bl	8014390 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 8010b48:	f107 010e 	add.w	r1, r7, #14
 8010b4c:	2364      	movs	r3, #100	; 0x64
 8010b4e:	2201      	movs	r2, #1
 8010b50:	4807      	ldr	r0, [pc, #28]	; (8010b70 <read_byte+0x54>)
 8010b52:	f003 fd51 	bl	80145f8 <HAL_SPI_Receive>
	CS_SET;
 8010b56:	2201      	movs	r2, #1
 8010b58:	2104      	movs	r1, #4
 8010b5a:	4804      	ldr	r0, [pc, #16]	; (8010b6c <read_byte+0x50>)
 8010b5c:	f002 ff20 	bl	80139a0 <HAL_GPIO_WritePin>
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return val;
 8010b60:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3710      	adds	r7, #16
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	40020c00 	.word	0x40020c00
 8010b70:	20000e80 	.word	0x20000e80

08010b74 <ReadIMU>:
inline float ReadIMU(uint8_t a, uint8_t b) {
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b086      	sub	sp, #24
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	460a      	mov	r2, r1
 8010b7e:	71fb      	strb	r3, [r7, #7]
 8010b80:	4613      	mov	r3, r2
 8010b82:	71bb      	strb	r3, [r7, #6]

	uint8_t ret1, ret2,val1,val2;
	uint8_t ret[2] = {
 8010b84:	79fb      	ldrb	r3, [r7, #7]
 8010b86:	723b      	strb	r3, [r7, #8]
 8010b88:	79bb      	ldrb	r3, [r7, #6]
 8010b8a:	727b      	strb	r3, [r7, #9]
			a,//0x37,
			b//0x38,
	};
	int16_t law_data;
	float res;
	ret1 = ret[0] | 0x80;
 8010b8c:	7a3b      	ldrb	r3, [r7, #8]
 8010b8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010b92:	b2db      	uxtb	r3, r3
 8010b94:	73fb      	strb	r3, [r7, #15]
	ret2 = ret[1] | 0x80;
 8010b96:	7a7b      	ldrb	r3, [r7, #9]
 8010b98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010b9c:	b2db      	uxtb	r3, r3
 8010b9e:	73bb      	strb	r3, [r7, #14]
//	reg[0] = 0x37;
//	reg[1] = 0x38;
//
//	ret = reg[0] | 0x80;
	CS_RESET;
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	2104      	movs	r1, #4
 8010ba4:	4822      	ldr	r0, [pc, #136]	; (8010c30 <ReadIMU+0xbc>)
 8010ba6:	f002 fefb 	bl	80139a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 8010baa:	f107 010f 	add.w	r1, r7, #15
 8010bae:	2364      	movs	r3, #100	; 0x64
 8010bb0:	2201      	movs	r2, #1
 8010bb2:	4820      	ldr	r0, [pc, #128]	; (8010c34 <ReadIMU+0xc0>)
 8010bb4:	f003 fbec 	bl	8014390 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 8010bb8:	f107 010d 	add.w	r1, r7, #13
 8010bbc:	2364      	movs	r3, #100	; 0x64
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	481c      	ldr	r0, [pc, #112]	; (8010c34 <ReadIMU+0xc0>)
 8010bc2:	f003 fd19 	bl	80145f8 <HAL_SPI_Receive>
	CS_SET;
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	2104      	movs	r1, #4
 8010bca:	4819      	ldr	r0, [pc, #100]	; (8010c30 <ReadIMU+0xbc>)
 8010bcc:	f002 fee8 	bl	80139a0 <HAL_GPIO_WritePin>

//	ret = reg[1] | 0x80;
	CS_RESET;
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	2104      	movs	r1, #4
 8010bd4:	4816      	ldr	r0, [pc, #88]	; (8010c30 <ReadIMU+0xbc>)
 8010bd6:	f002 fee3 	bl	80139a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 8010bda:	f107 010e 	add.w	r1, r7, #14
 8010bde:	2364      	movs	r3, #100	; 0x64
 8010be0:	2201      	movs	r2, #1
 8010be2:	4814      	ldr	r0, [pc, #80]	; (8010c34 <ReadIMU+0xc0>)
 8010be4:	f003 fbd4 	bl	8014390 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 8010be8:	f107 010c 	add.w	r1, r7, #12
 8010bec:	2364      	movs	r3, #100	; 0x64
 8010bee:	2201      	movs	r2, #1
 8010bf0:	4810      	ldr	r0, [pc, #64]	; (8010c34 <ReadIMU+0xc0>)
 8010bf2:	f003 fd01 	bl	80145f8 <HAL_SPI_Receive>
	CS_SET;
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	2104      	movs	r1, #4
 8010bfa:	480d      	ldr	r0, [pc, #52]	; (8010c30 <ReadIMU+0xbc>)
 8010bfc:	f002 fed0 	bl	80139a0 <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 8010c00:	7b7b      	ldrb	r3, [r7, #13]
 8010c02:	021b      	lsls	r3, r3, #8
 8010c04:	b21a      	sxth	r2, r3
 8010c06:	7b3b      	ldrb	r3, [r7, #12]
 8010c08:	b21b      	sxth	r3, r3
 8010c0a:	4313      	orrs	r3, r2
 8010c0c:	82fb      	strh	r3, [r7, #22]
	res = (float)law_data;
 8010c0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010c12:	ee07 3a90 	vmov	s15, r3
 8010c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c1a:	edc7 7a04 	vstr	s15, [r7, #16]
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return res;
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	ee07 3a90 	vmov	s15, r3
}
 8010c24:	eeb0 0a67 	vmov.f32	s0, s15
 8010c28:	3718      	adds	r7, #24
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}
 8010c2e:	bf00      	nop
 8010c30:	40020c00 	.word	0x40020c00
 8010c34:	20000e80 	.word	0x20000e80

08010c38 <write_byte>:
void write_byte( uint8_t reg, uint8_t val )  {
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	4603      	mov	r3, r0
 8010c40:	460a      	mov	r2, r1
 8010c42:	71fb      	strb	r3, [r7, #7]
 8010c44:	4613      	mov	r3, r2
 8010c46:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8010c48:	79fb      	ldrb	r3, [r7, #7]
 8010c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c4e:	b2db      	uxtb	r3, r3
 8010c50:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8010c52:	2200      	movs	r2, #0
 8010c54:	2104      	movs	r1, #4
 8010c56:	480c      	ldr	r0, [pc, #48]	; (8010c88 <write_byte+0x50>)
 8010c58:	f002 fea2 	bl	80139a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8010c5c:	f107 010f 	add.w	r1, r7, #15
 8010c60:	2364      	movs	r3, #100	; 0x64
 8010c62:	2201      	movs	r2, #1
 8010c64:	4809      	ldr	r0, [pc, #36]	; (8010c8c <write_byte+0x54>)
 8010c66:	f003 fb93 	bl	8014390 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 8010c6a:	1db9      	adds	r1, r7, #6
 8010c6c:	2364      	movs	r3, #100	; 0x64
 8010c6e:	2201      	movs	r2, #1
 8010c70:	4806      	ldr	r0, [pc, #24]	; (8010c8c <write_byte+0x54>)
 8010c72:	f003 fb8d 	bl	8014390 <HAL_SPI_Transmit>
	CS_SET;
 8010c76:	2201      	movs	r2, #1
 8010c78:	2104      	movs	r1, #4
 8010c7a:	4803      	ldr	r0, [pc, #12]	; (8010c88 <write_byte+0x50>)
 8010c7c:	f002 fe90 	bl	80139a0 <HAL_GPIO_WritePin>
}
 8010c80:	bf00      	nop
 8010c82:	3710      	adds	r7, #16
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}
 8010c88:	40020c00 	.word	0x40020c00
 8010c8c:	20000e80 	.word	0x20000e80

08010c90 <IMU_init>:

uint8_t IMU_init() {
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b082      	sub	sp, #8
 8010c94:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8010c96:	2000      	movs	r0, #0
 8010c98:	f7ff ff40 	bl	8010b1c <read_byte>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 8010ca0:	79bb      	ldrb	r3, [r7, #6]
 8010ca2:	2be0      	cmp	r3, #224	; 0xe0
 8010ca4:	d119      	bne.n	8010cda <IMU_init+0x4a>
		ret = 1;
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8010caa:	2101      	movs	r1, #1
 8010cac:	2006      	movs	r0, #6
 8010cae:	f7ff ffc3 	bl	8010c38 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8010cb2:	2110      	movs	r1, #16
 8010cb4:	2003      	movs	r0, #3
 8010cb6:	f7ff ffbf 	bl	8010c38 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8010cba:	2120      	movs	r1, #32
 8010cbc:	207f      	movs	r0, #127	; 0x7f
 8010cbe:	f7ff ffbb 	bl	8010c38 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 8010cc2:	2117      	movs	r1, #23
 8010cc4:	2001      	movs	r0, #1
 8010cc6:	f7ff ffb7 	bl	8010c38 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000

		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 8010cca:	2117      	movs	r1, #23
 8010ccc:	2014      	movs	r0, #20
 8010cce:	f7ff ffb3 	bl	8010c38 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16

		write_byte(0x7F,0x00);	//USER_BANK0
 8010cd2:	2100      	movs	r1, #0
 8010cd4:	207f      	movs	r0, #127	; 0x7f
 8010cd6:	f7ff ffaf 	bl	8010c38 <write_byte>
	}
	return ret;
 8010cda:	79fb      	ldrb	r3, [r7, #7]
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <IMU_Calib>:
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
}

void IMU_Calib(){
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	f5ad 5dfa 	sub.w	sp, sp, #8000	; 0x1f40
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0


	HAL_Delay(100);
 8010cee:	2064      	movs	r0, #100	; 0x64
 8010cf0:	f001 f982 	bl	8011ff8 <HAL_Delay>

	int num = 2000;
 8010cf4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010cf8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8010cfc:	f102 0204 	add.w	r2, r2, #4
 8010d00:	6013      	str	r3, [r2, #0]
	float zg_vals[2000]={0.0f};
 8010d02:	f107 0310 	add.w	r3, r7, #16
 8010d06:	3b0c      	subs	r3, #12
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8010d0e:	461a      	mov	r2, r3
 8010d10:	2100      	movs	r1, #0
 8010d12:	f006 fba4 	bl	801745e <memset>
	float sum=0;
 8010d16:	f04f 0300 	mov.w	r3, #0
 8010d1a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8010d1e:	f102 020c 	add.w	r2, r2, #12
 8010d22:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < num; i++){
 8010d24:	2300      	movs	r3, #0
 8010d26:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8010d2a:	f102 0208 	add.w	r2, r2, #8
 8010d2e:	6013      	str	r3, [r2, #0]
 8010d30:	e034      	b.n	8010d9c <IMU_Calib+0xb8>
		zg_vals[i] = ZGyro;
 8010d32:	4b2a      	ldr	r3, [pc, #168]	; (8010ddc <IMU_Calib+0xf8>)
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	f107 0310 	add.w	r3, r7, #16
 8010d3a:	3b0c      	subs	r3, #12
 8010d3c:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 8010d40:	f101 0108 	add.w	r1, r1, #8
 8010d44:	6809      	ldr	r1, [r1, #0]
 8010d46:	0089      	lsls	r1, r1, #2
 8010d48:	440b      	add	r3, r1
 8010d4a:	601a      	str	r2, [r3, #0]
		sum += zg_vals[i];
 8010d4c:	f107 0310 	add.w	r3, r7, #16
 8010d50:	3b0c      	subs	r3, #12
 8010d52:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8010d56:	f102 0208 	add.w	r2, r2, #8
 8010d5a:	6812      	ldr	r2, [r2, #0]
 8010d5c:	0092      	lsls	r2, r2, #2
 8010d5e:	4413      	add	r3, r2
 8010d60:	edd3 7a00 	vldr	s15, [r3]
 8010d64:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8010d68:	f103 030c 	add.w	r3, r3, #12
 8010d6c:	ed93 7a00 	vldr	s14, [r3]
 8010d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d74:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8010d78:	f103 030c 	add.w	r3, r3, #12
 8010d7c:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8010d80:	2002      	movs	r0, #2
 8010d82:	f001 f939 	bl	8011ff8 <HAL_Delay>
	for(int i = 0; i < num; i++){
 8010d86:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8010d8a:	f103 0308 	add.w	r3, r3, #8
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	3301      	adds	r3, #1
 8010d92:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8010d96:	f102 0208 	add.w	r2, r2, #8
 8010d9a:	6013      	str	r3, [r2, #0]
 8010d9c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8010da0:	f103 0308 	add.w	r3, r3, #8
 8010da4:	681a      	ldr	r2, [r3, #0]
 8010da6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8010daa:	f103 0304 	add.w	r3, r3, #4
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	dbbe      	blt.n	8010d32 <IMU_Calib+0x4e>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / 2000.0f;
 8010db4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8010db8:	f103 030c 	add.w	r3, r3, #12
 8010dbc:	ed93 7a00 	vldr	s14, [r3]
 8010dc0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8010de0 <IMU_Calib+0xfc>
 8010dc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010dc8:	4b06      	ldr	r3, [pc, #24]	; (8010de4 <IMU_Calib+0x100>)
 8010dca:	edc3 7a00 	vstr	s15, [r3]
}
 8010dce:	bf00      	nop
 8010dd0:	f507 57fa 	add.w	r7, r7, #8000	; 0x1f40
 8010dd4:	3710      	adds	r7, #16
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	200002d4 	.word	0x200002d4
 8010de0:	44fa0000 	.word	0x44fa0000
 8010de4:	200002d0 	.word	0x200002d0

08010de8 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8010dec:	213c      	movs	r1, #60	; 0x3c
 8010dee:	4804      	ldr	r0, [pc, #16]	; (8010e00 <EncoderStart+0x18>)
 8010df0:	f004 faea 	bl	80153c8 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8010df4:	213c      	movs	r1, #60	; 0x3c
 8010df6:	4803      	ldr	r0, [pc, #12]	; (8010e04 <EncoderStart+0x1c>)
 8010df8:	f004 fae6 	bl	80153c8 <HAL_TIM_Encoder_Start>
}
 8010dfc:	bf00      	nop
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	20000e40 	.word	0x20000e40
 8010e04:	20000db8 	.word	0x20000db8

08010e08 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 8010e0c:	2100      	movs	r1, #0
 8010e0e:	4804      	ldr	r0, [pc, #16]	; (8010e20 <EmitterON+0x18>)
 8010e10:	f004 f85e 	bl	8014ed0 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 8010e14:	2100      	movs	r1, #0
 8010e16:	4802      	ldr	r0, [pc, #8]	; (8010e20 <EmitterON+0x18>)
 8010e18:	f005 f971 	bl	80160fe <HAL_TIMEx_OCN_Start_IT>

}
 8010e1c:	bf00      	nop
 8010e1e:	bd80      	pop	{r7, pc}
 8010e20:	20000d78 	.word	0x20000d78

08010e24 <EmitterOFF>:
void EmitterOFF()
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 8010e28:	2100      	movs	r1, #0
 8010e2a:	4804      	ldr	r0, [pc, #16]	; (8010e3c <EmitterOFF+0x18>)
 8010e2c:	f004 f8d4 	bl	8014fd8 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 8010e30:	2100      	movs	r1, #0
 8010e32:	4802      	ldr	r0, [pc, #8]	; (8010e3c <EmitterOFF+0x18>)
 8010e34:	f005 f9b8 	bl	80161a8 <HAL_TIMEx_OCN_Stop_IT>

}
 8010e38:	bf00      	nop
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	20000d78 	.word	0x20000d78

08010e40 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2b07      	cmp	r3, #7
 8010e4c:	f200 80ac 	bhi.w	8010fa8 <ChangeLED+0x168>
 8010e50:	a201      	add	r2, pc, #4	; (adr r2, 8010e58 <ChangeLED+0x18>)
 8010e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e56:	bf00      	nop
 8010e58:	08010e79 	.word	0x08010e79
 8010e5c:	08010e9f 	.word	0x08010e9f
 8010e60:	08010ec5 	.word	0x08010ec5
 8010e64:	08010eeb 	.word	0x08010eeb
 8010e68:	08010f11 	.word	0x08010f11
 8010e6c:	08010f37 	.word	0x08010f37
 8010e70:	08010f5d 	.word	0x08010f5d
 8010e74:	08010f83 	.word	0x08010f83
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8010e78:	2200      	movs	r2, #0
 8010e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010e7e:	484d      	ldr	r0, [pc, #308]	; (8010fb4 <ChangeLED+0x174>)
 8010e80:	f002 fd8e 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8010e84:	2200      	movs	r2, #0
 8010e86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010e8a:	484a      	ldr	r0, [pc, #296]	; (8010fb4 <ChangeLED+0x174>)
 8010e8c:	f002 fd88 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010e90:	2200      	movs	r2, #0
 8010e92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010e96:	4848      	ldr	r0, [pc, #288]	; (8010fb8 <ChangeLED+0x178>)
 8010e98:	f002 fd82 	bl	80139a0 <HAL_GPIO_WritePin>
		break;
 8010e9c:	e085      	b.n	8010faa <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010ea4:	4843      	ldr	r0, [pc, #268]	; (8010fb4 <ChangeLED+0x174>)
 8010ea6:	f002 fd7b 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8010eaa:	2200      	movs	r2, #0
 8010eac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010eb0:	4840      	ldr	r0, [pc, #256]	; (8010fb4 <ChangeLED+0x174>)
 8010eb2:	f002 fd75 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010ebc:	483e      	ldr	r0, [pc, #248]	; (8010fb8 <ChangeLED+0x178>)
 8010ebe:	f002 fd6f 	bl	80139a0 <HAL_GPIO_WritePin>
		break;
 8010ec2:	e072      	b.n	8010faa <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010eca:	483a      	ldr	r0, [pc, #232]	; (8010fb4 <ChangeLED+0x174>)
 8010ecc:	f002 fd68 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8010ed0:	2201      	movs	r2, #1
 8010ed2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010ed6:	4837      	ldr	r0, [pc, #220]	; (8010fb4 <ChangeLED+0x174>)
 8010ed8:	f002 fd62 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010edc:	2200      	movs	r2, #0
 8010ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010ee2:	4835      	ldr	r0, [pc, #212]	; (8010fb8 <ChangeLED+0x178>)
 8010ee4:	f002 fd5c 	bl	80139a0 <HAL_GPIO_WritePin>

		break;
 8010ee8:	e05f      	b.n	8010faa <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8010eea:	2201      	movs	r2, #1
 8010eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010ef0:	4830      	ldr	r0, [pc, #192]	; (8010fb4 <ChangeLED+0x174>)
 8010ef2:	f002 fd55 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010efc:	482d      	ldr	r0, [pc, #180]	; (8010fb4 <ChangeLED+0x174>)
 8010efe:	f002 fd4f 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010f02:	2200      	movs	r2, #0
 8010f04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010f08:	482b      	ldr	r0, [pc, #172]	; (8010fb8 <ChangeLED+0x178>)
 8010f0a:	f002 fd49 	bl	80139a0 <HAL_GPIO_WritePin>
		break;
 8010f0e:	e04c      	b.n	8010faa <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8010f10:	2200      	movs	r2, #0
 8010f12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010f16:	4827      	ldr	r0, [pc, #156]	; (8010fb4 <ChangeLED+0x174>)
 8010f18:	f002 fd42 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010f22:	4824      	ldr	r0, [pc, #144]	; (8010fb4 <ChangeLED+0x174>)
 8010f24:	f002 fd3c 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8010f28:	2201      	movs	r2, #1
 8010f2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010f2e:	4822      	ldr	r0, [pc, #136]	; (8010fb8 <ChangeLED+0x178>)
 8010f30:	f002 fd36 	bl	80139a0 <HAL_GPIO_WritePin>
		break;
 8010f34:	e039      	b.n	8010faa <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8010f36:	2201      	movs	r2, #1
 8010f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010f3c:	481d      	ldr	r0, [pc, #116]	; (8010fb4 <ChangeLED+0x174>)
 8010f3e:	f002 fd2f 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8010f42:	2200      	movs	r2, #0
 8010f44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010f48:	481a      	ldr	r0, [pc, #104]	; (8010fb4 <ChangeLED+0x174>)
 8010f4a:	f002 fd29 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8010f4e:	2201      	movs	r2, #1
 8010f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010f54:	4818      	ldr	r0, [pc, #96]	; (8010fb8 <ChangeLED+0x178>)
 8010f56:	f002 fd23 	bl	80139a0 <HAL_GPIO_WritePin>
		break;
 8010f5a:	e026      	b.n	8010faa <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010f62:	4814      	ldr	r0, [pc, #80]	; (8010fb4 <ChangeLED+0x174>)
 8010f64:	f002 fd1c 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8010f68:	2201      	movs	r2, #1
 8010f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010f6e:	4811      	ldr	r0, [pc, #68]	; (8010fb4 <ChangeLED+0x174>)
 8010f70:	f002 fd16 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8010f74:	2201      	movs	r2, #1
 8010f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010f7a:	480f      	ldr	r0, [pc, #60]	; (8010fb8 <ChangeLED+0x178>)
 8010f7c:	f002 fd10 	bl	80139a0 <HAL_GPIO_WritePin>

		break;
 8010f80:	e013      	b.n	8010faa <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8010f82:	2201      	movs	r2, #1
 8010f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010f88:	480a      	ldr	r0, [pc, #40]	; (8010fb4 <ChangeLED+0x174>)
 8010f8a:	f002 fd09 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8010f8e:	2201      	movs	r2, #1
 8010f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010f94:	4807      	ldr	r0, [pc, #28]	; (8010fb4 <ChangeLED+0x174>)
 8010f96:	f002 fd03 	bl	80139a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010fa0:	4805      	ldr	r0, [pc, #20]	; (8010fb8 <ChangeLED+0x178>)
 8010fa2:	f002 fcfd 	bl	80139a0 <HAL_GPIO_WritePin>

		break;
 8010fa6:	e000      	b.n	8010faa <ChangeLED+0x16a>
	default: break;
 8010fa8:	bf00      	nop

	}
}
 8010faa:	bf00      	nop
 8010fac:	3708      	adds	r7, #8
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
 8010fb2:	bf00      	nop
 8010fb4:	40020800 	.word	0x40020800
 8010fb8:	40020400 	.word	0x40020400

08010fbc <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 8010fc0:	210c      	movs	r1, #12
 8010fc2:	4809      	ldr	r0, [pc, #36]	; (8010fe8 <Motor_PWM_Start+0x2c>)
 8010fc4:	f004 f8d8 	bl	8015178 <HAL_TIM_PWM_Start>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d001      	beq.n	8010fd2 <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 8010fce:	f7fe fe1f 	bl	800fc10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 8010fd2:	2104      	movs	r1, #4
 8010fd4:	4805      	ldr	r0, [pc, #20]	; (8010fec <Motor_PWM_Start+0x30>)
 8010fd6:	f004 f8cf 	bl	8015178 <HAL_TIM_PWM_Start>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d001      	beq.n	8010fe4 <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 8010fe0:	f7fe fe16 	bl	800fc10 <Error_Handler>
  }
#endif
}
 8010fe4:	bf00      	nop
 8010fe6:	bd80      	pop	{r7, pc}
 8010fe8:	2000023c 	.word	0x2000023c
 8010fec:	2000027c 	.word	0x2000027c

08010ff0 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 8010ff4:	210c      	movs	r1, #12
 8010ff6:	4809      	ldr	r0, [pc, #36]	; (801101c <Motor_PWM_Stop+0x2c>)
 8010ff8:	f004 f8fc 	bl	80151f4 <HAL_TIM_PWM_Stop>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d001      	beq.n	8011006 <Motor_PWM_Stop+0x16>
  {
	  Error_Handler();
 8011002:	f7fe fe05 	bl	800fc10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 8011006:	2104      	movs	r1, #4
 8011008:	4805      	ldr	r0, [pc, #20]	; (8011020 <Motor_PWM_Stop+0x30>)
 801100a:	f004 f8f3 	bl	80151f4 <HAL_TIM_PWM_Stop>
 801100e:	4603      	mov	r3, r0
 8011010:	2b00      	cmp	r3, #0
 8011012:	d001      	beq.n	8011018 <Motor_PWM_Stop+0x28>
  {
	  Error_Handler();
 8011014:	f7fe fdfc 	bl	800fc10 <Error_Handler>
  }
#endif
}
 8011018:	bf00      	nop
 801101a:	bd80      	pop	{r7, pc}
 801101c:	2000023c 	.word	0x2000023c
 8011020:	2000027c 	.word	0x2000027c
 8011024:	00000000 	.word	0x00000000

08011028 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2b00      	cmp	r3, #0
 8011036:	dd05      	ble.n	8011044 <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 8011038:	2201      	movs	r2, #1
 801103a:	2104      	movs	r1, #4
 801103c:	4828      	ldr	r0, [pc, #160]	; (80110e0 <Motor_Switch+0xb8>)
 801103e:	f002 fcaf 	bl	80139a0 <HAL_GPIO_WritePin>
 8011042:	e00a      	b.n	801105a <Motor_Switch+0x32>

	}
	else  if (left < 0){
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2b00      	cmp	r3, #0
 8011048:	da07      	bge.n	801105a <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 801104a:	2200      	movs	r2, #0
 801104c:	2104      	movs	r1, #4
 801104e:	4824      	ldr	r0, [pc, #144]	; (80110e0 <Motor_Switch+0xb8>)
 8011050:	f002 fca6 	bl	80139a0 <HAL_GPIO_WritePin>
		left = -left;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	425b      	negs	r3, r3
 8011058:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	2b00      	cmp	r3, #0
 801105e:	dd05      	ble.n	801106c <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 8011060:	2200      	movs	r2, #0
 8011062:	2101      	movs	r1, #1
 8011064:	481e      	ldr	r0, [pc, #120]	; (80110e0 <Motor_Switch+0xb8>)
 8011066:	f002 fc9b 	bl	80139a0 <HAL_GPIO_WritePin>
 801106a:	e00a      	b.n	8011082 <Motor_Switch+0x5a>

	}

	else if (right < 0){
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	2b00      	cmp	r3, #0
 8011070:	da07      	bge.n	8011082 <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 8011072:	2201      	movs	r2, #1
 8011074:	2101      	movs	r1, #1
 8011076:	481a      	ldr	r0, [pc, #104]	; (80110e0 <Motor_Switch+0xb8>)
 8011078:	f002 fc92 	bl	80139a0 <HAL_GPIO_WritePin>
	  	right = -right;
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	425b      	negs	r3, r3
 8011080:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f7f7 f986 	bl	8008394 <__aeabi_i2d>
 8011088:	a313      	add	r3, pc, #76	; (adr r3, 80110d8 <Motor_Switch+0xb0>)
 801108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108e:	f7f7 fc7b 	bl	8008988 <__aeabi_dcmpgt>
 8011092:	4603      	mov	r3, r0
 8011094:	2b00      	cmp	r3, #0
 8011096:	d002      	beq.n	801109e <Motor_Switch+0x76>
 8011098:	f640 13d8 	movw	r3, #2520	; 0x9d8
 801109c:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 801109e:	6838      	ldr	r0, [r7, #0]
 80110a0:	f7f7 f978 	bl	8008394 <__aeabi_i2d>
 80110a4:	a30c      	add	r3, pc, #48	; (adr r3, 80110d8 <Motor_Switch+0xb0>)
 80110a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110aa:	f7f7 fc6d 	bl	8008988 <__aeabi_dcmpgt>
 80110ae:	4603      	mov	r3, r0
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d002      	beq.n	80110ba <Motor_Switch+0x92>
 80110b4:	f640 13d8 	movw	r3, #2520	; 0x9d8
 80110b8:	603b      	str	r3, [r7, #0]


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 80110ba:	4b0a      	ldr	r3, [pc, #40]	; (80110e4 <Motor_Switch+0xbc>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	683a      	ldr	r2, [r7, #0]
 80110c0:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 80110c2:	4b09      	ldr	r3, [pc, #36]	; (80110e8 <Motor_Switch+0xc0>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	687a      	ldr	r2, [r7, #4]
 80110c8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80110ca:	bf00      	nop
 80110cc:	3708      	adds	r7, #8
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	f3af 8000 	nop.w
 80110d8:	00000000 	.word	0x00000000
 80110dc:	40a3b000 	.word	0x40a3b000
 80110e0:	40020000 	.word	0x40020000
 80110e4:	2000027c 	.word	0x2000027c
 80110e8:	2000023c 	.word	0x2000023c

080110ec <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 80110ec:	b480      	push	{r7}
 80110ee:	b083      	sub	sp, #12
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	683a      	ldr	r2, [r7, #0]
 80110fa:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 80110fc:	bf00      	nop
 80110fe:	370c      	adds	r7, #12
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr

08011108 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 8011108:	b480      	push	{r7}
 801110a:	b087      	sub	sp, #28
 801110c:	af00      	add	r7, sp, #0
 801110e:	60f8      	str	r0, [r7, #12]
 8011110:	60b9      	str	r1, [r7, #8]
 8011112:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 8011118:	4a2c      	ldr	r2, [pc, #176]	; (80111cc <GetWallDataAverage+0xc4>)
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	1ad3      	subs	r3, r2, r3
 8011124:	2b00      	cmp	r3, #0
 8011126:	bfb8      	it	lt
 8011128:	425b      	neglt	r3, r3
 801112a:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 801112c:	4927      	ldr	r1, [pc, #156]	; (80111cc <GetWallDataAverage+0xc4>)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	697a      	ldr	r2, [r7, #20]
 8011132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 8011136:	4a26      	ldr	r2, [pc, #152]	; (80111d0 <GetWallDataAverage+0xc8>)
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	441a      	add	r2, r3
 8011142:	4923      	ldr	r1, [pc, #140]	; (80111d0 <GetWallDataAverage+0xc8>)
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 801114a:	4a22      	ldr	r2, [pc, #136]	; (80111d4 <GetWallDataAverage+0xcc>)
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011152:	1c5a      	adds	r2, r3, #1
 8011154:	491f      	ldr	r1, [pc, #124]	; (80111d4 <GetWallDataAverage+0xcc>)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 801115c:	4a1d      	ldr	r2, [pc, #116]	; (80111d4 <GetWallDataAverage+0xcc>)
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011164:	68fa      	ldr	r2, [r7, #12]
 8011166:	429a      	cmp	r2, r3
 8011168:	d121      	bne.n	80111ae <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 801116a:	4a19      	ldr	r2, [pc, #100]	; (80111d0 <GetWallDataAverage+0xc8>)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011172:	ee07 3a90 	vmov	s15, r3
 8011176:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801117a:	4a16      	ldr	r2, [pc, #88]	; (80111d4 <GetWallDataAverage+0xcc>)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011182:	ee07 3a90 	vmov	s15, r3
 8011186:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801118a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801118e:	4a12      	ldr	r2, [pc, #72]	; (80111d8 <GetWallDataAverage+0xd0>)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	009b      	lsls	r3, r3, #2
 8011194:	4413      	add	r3, r2
 8011196:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 801119a:	4a0d      	ldr	r2, [pc, #52]	; (80111d0 <GetWallDataAverage+0xc8>)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2100      	movs	r1, #0
 80111a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 80111a4:	4a0b      	ldr	r2, [pc, #44]	; (80111d4 <GetWallDataAverage+0xcc>)
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2100      	movs	r1, #0
 80111aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 80111ae:	4a0a      	ldr	r2, [pc, #40]	; (80111d8 <GetWallDataAverage+0xd0>)
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	009b      	lsls	r3, r3, #2
 80111b4:	4413      	add	r3, r2
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	ee07 3a90 	vmov	s15, r3
}
 80111bc:	eeb0 0a67 	vmov.f32	s0, s15
 80111c0:	371c      	adds	r7, #28
 80111c2:	46bd      	mov	sp, r7
 80111c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c8:	4770      	bx	lr
 80111ca:	bf00      	nop
 80111cc:	200002d8 	.word	0x200002d8
 80111d0:	200002e8 	.word	0x200002e8
 80111d4:	200002f8 	.word	0x200002f8
 80111d8:	20000308 	.word	0x20000308

080111dc <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 80111dc:	b480      	push	{r7}
 80111de:	b087      	sub	sp, #28
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	60f8      	str	r0, [r7, #12]
 80111e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80111e8:	edc7 0a01 	vstr	s1, [r7, #4]
 80111ec:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 80111f0:	f04f 0300 	mov.w	r3, #0
 80111f4:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	ee07 3a90 	vmov	s15, r3
 80111fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011200:	edd7 7a02 	vldr	s15, [r7, #8]
 8011204:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011208:	edd7 7a01 	vldr	s15, [r7, #4]
 801120c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8011210:	ed97 7a00 	vldr	s14, [r7]
 8011214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011218:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	ee07 3a90 	vmov	s15, r3
}
 8011222:	eeb0 0a67 	vmov.f32	s0, s15
 8011226:	371c      	adds	r7, #28
 8011228:	46bd      	mov	sp, r7
 801122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122e:	4770      	bx	lr

08011230 <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 8011230:	b480      	push	{r7}
 8011232:	b085      	sub	sp, #20
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 801123a:	2301      	movs	r3, #1
 801123c:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 801123e:	2300      	movs	r3, #0
 8011240:	60bb      	str	r3, [r7, #8]
 8011242:	e007      	b.n	8011254 <IntegerPower+0x24>
	{
		pattern_num *= integer;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	687a      	ldr	r2, [r7, #4]
 8011248:	fb02 f303 	mul.w	r3, r2, r3
 801124c:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	3301      	adds	r3, #1
 8011252:	60bb      	str	r3, [r7, #8]
 8011254:	68ba      	ldr	r2, [r7, #8]
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	429a      	cmp	r2, r3
 801125a:	dbf3      	blt.n	8011244 <IntegerPower+0x14>
	}
	return pattern_num;
 801125c:	68fb      	ldr	r3, [r7, #12]
}
 801125e:	4618      	mov	r0, r3
 8011260:	3714      	adds	r7, #20
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr

0801126a <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 801126a:	b480      	push	{r7}
 801126c:	b08b      	sub	sp, #44	; 0x2c
 801126e:	af00      	add	r7, sp, #0
 8011270:	ed87 0a03 	vstr	s0, [r7, #12]
 8011274:	edc7 0a02 	vstr	s1, [r7, #8]
 8011278:	ed87 1a01 	vstr	s2, [r7, #4]
 801127c:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 801127e:	edd7 6a03 	vldr	s13, [r7, #12]
 8011282:	ed97 7a01 	vldr	s14, [r7, #4]
 8011286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801128a:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 801128e:	edd7 6a02 	vldr	s13, [r7, #8]
 8011292:	ed97 7a01 	vldr	s14, [r7, #4]
 8011296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801129a:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 801129e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80112a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	ee07 3a90 	vmov	s15, r3
 80112b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80112b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112b8:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 80112bc:	2300      	movs	r3, #0
 80112be:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 80112c0:	2300      	movs	r3, #0
 80112c2:	623b      	str	r3, [r7, #32]
 80112c4:	e018      	b.n	80112f8 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 80112c6:	6a3b      	ldr	r3, [r7, #32]
 80112c8:	ee07 3a90 	vmov	s15, r3
 80112cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80112d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80112d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80112d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80112dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80112e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ec:	db01      	blt.n	80112f2 <GetBatteryLevel+0x88>
		{
			pattern = i;
 80112ee:	6a3b      	ldr	r3, [r7, #32]
 80112f0:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 80112f2:	6a3b      	ldr	r3, [r7, #32]
 80112f4:	3301      	adds	r3, #1
 80112f6:	623b      	str	r3, [r7, #32]
 80112f8:	6a3a      	ldr	r2, [r7, #32]
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	429a      	cmp	r2, r3
 80112fe:	dbe2      	blt.n	80112c6 <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 8011300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011302:	4618      	mov	r0, r3
 8011304:	372c      	adds	r7, #44	; 0x2c
 8011306:	46bd      	mov	sp, r7
 8011308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130c:	4770      	bx	lr
	...

08011310 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 8011310:	b580      	push	{r7, lr}
 8011312:	af00      	add	r7, sp, #0
	  setbuf(stdout,NULL);
 8011314:	4b07      	ldr	r3, [pc, #28]	; (8011334 <Buffering+0x24>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	689b      	ldr	r3, [r3, #8]
 801131a:	2100      	movs	r1, #0
 801131c:	4618      	mov	r0, r3
 801131e:	f007 fd1d 	bl	8018d5c <setbuf>
	  setbuf(stdin,NULL);
 8011322:	4b04      	ldr	r3, [pc, #16]	; (8011334 <Buffering+0x24>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	2100      	movs	r1, #0
 801132a:	4618      	mov	r0, r3
 801132c:	f007 fd16 	bl	8018d5c <setbuf>
}
 8011330:	bf00      	nop
 8011332:	bd80      	pop	{r7, pc}
 8011334:	2000002c 	.word	0x2000002c

08011338 <Copy_Gain>:
void Copy_Gain()
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b092      	sub	sp, #72	; 0x48
 801133c:	af00      	add	r7, sp, #0
	//コピーしなくても、単品で書き込める。
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
 801133e:	4b2c      	ldr	r3, [pc, #176]	; (80113f0 <Copy_Gain+0xb8>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	647b      	str	r3, [r7, #68]	; 0x44
	float data[16]={0};
 8011344:	463b      	mov	r3, r7
 8011346:	2240      	movs	r2, #64	; 0x40
 8011348:	2100      	movs	r1, #0
 801134a:	4618      	mov	r0, r3
 801134c:	f006 f887 	bl	801745e <memset>
	data[0] = Pid[L_VELO_PID].KP;
 8011350:	4b28      	ldr	r3, [pc, #160]	; (80113f4 <Copy_Gain+0xbc>)
 8011352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011356:	603b      	str	r3, [r7, #0]
	data[1] = Pid[L_VELO_PID].KI;
 8011358:	4b26      	ldr	r3, [pc, #152]	; (80113f4 <Copy_Gain+0xbc>)
 801135a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801135e:	607b      	str	r3, [r7, #4]
	data[2] = Pid[L_VELO_PID].KD;
 8011360:	4b24      	ldr	r3, [pc, #144]	; (80113f4 <Copy_Gain+0xbc>)
 8011362:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011366:	60bb      	str	r3, [r7, #8]

	data[3] = Pid[A_VELO_PID].KP;
 8011368:	4b22      	ldr	r3, [pc, #136]	; (80113f4 <Copy_Gain+0xbc>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	60fb      	str	r3, [r7, #12]
	data[4] = Pid[A_VELO_PID].KI;
 801136e:	4b21      	ldr	r3, [pc, #132]	; (80113f4 <Copy_Gain+0xbc>)
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	613b      	str	r3, [r7, #16]
	data[5] = Pid[A_VELO_PID].KD;
 8011374:	4b1f      	ldr	r3, [pc, #124]	; (80113f4 <Copy_Gain+0xbc>)
 8011376:	689b      	ldr	r3, [r3, #8]
 8011378:	617b      	str	r3, [r7, #20]

	data[6] = Pid[L_WALL_PID].KP;
 801137a:	4b1e      	ldr	r3, [pc, #120]	; (80113f4 <Copy_Gain+0xbc>)
 801137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801137e:	61bb      	str	r3, [r7, #24]
	data[7] = Pid[L_WALL_PID].KI;
 8011380:	4b1c      	ldr	r3, [pc, #112]	; (80113f4 <Copy_Gain+0xbc>)
 8011382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011384:	61fb      	str	r3, [r7, #28]
	data[8] = Pid[L_WALL_PID].KD;
 8011386:	4b1b      	ldr	r3, [pc, #108]	; (80113f4 <Copy_Gain+0xbc>)
 8011388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801138a:	623b      	str	r3, [r7, #32]

	data[9] = Pid[R_WALL_PID].KP;
 801138c:	4b19      	ldr	r3, [pc, #100]	; (80113f4 <Copy_Gain+0xbc>)
 801138e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011392:	627b      	str	r3, [r7, #36]	; 0x24
	data[10] = Pid[R_WALL_PID].KI;
 8011394:	4b17      	ldr	r3, [pc, #92]	; (80113f4 <Copy_Gain+0xbc>)
 8011396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801139a:	62bb      	str	r3, [r7, #40]	; 0x28
	data[11] = Pid[R_WALL_PID].KD;
 801139c:	4b15      	ldr	r3, [pc, #84]	; (80113f4 <Copy_Gain+0xbc>)
 801139e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113a2:	62fb      	str	r3, [r7, #44]	; 0x2c

	data[12] = Pid[D_WALL_PID].KP;
 80113a4:	4b13      	ldr	r3, [pc, #76]	; (80113f4 <Copy_Gain+0xbc>)
 80113a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113a8:	633b      	str	r3, [r7, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 80113aa:	4b12      	ldr	r3, [pc, #72]	; (80113f4 <Copy_Gain+0xbc>)
 80113ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113ae:	637b      	str	r3, [r7, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 80113b0:	4b10      	ldr	r3, [pc, #64]	; (80113f4 <Copy_Gain+0xbc>)
 80113b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113b4:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int i=0; i < 15; i++)
 80113b6:	2300      	movs	r3, #0
 80113b8:	643b      	str	r3, [r7, #64]	; 0x40
 80113ba:	e012      	b.n	80113e2 <Copy_Gain+0xaa>
	{

		FLASH_Write_Word_F( address, data[i]);
 80113bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113be:	009b      	lsls	r3, r3, #2
 80113c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80113c4:	4413      	add	r3, r2
 80113c6:	3b48      	subs	r3, #72	; 0x48
 80113c8:	edd3 7a00 	vldr	s15, [r3]
 80113cc:	eeb0 0a67 	vmov.f32	s0, s15
 80113d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80113d2:	f7ff fb25 	bl	8010a20 <FLASH_Write_Word_F>
		address += 0x04;
 80113d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113d8:	3304      	adds	r3, #4
 80113da:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i < 15; i++)
 80113dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113de:	3301      	adds	r3, #1
 80113e0:	643b      	str	r3, [r7, #64]	; 0x40
 80113e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113e4:	2b0e      	cmp	r3, #14
 80113e6:	dde9      	ble.n	80113bc <Copy_Gain+0x84>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 80113e8:	bf00      	nop
 80113ea:	3748      	adds	r7, #72	; 0x48
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}
 80113f0:	0801c6d4 	.word	0x0801c6d4
 80113f4:	20000318 	.word	0x20000318

080113f8 <Load_Gain>:
void Load_Gain()
{
 80113f8:	b590      	push	{r4, r7, lr}
 80113fa:	b095      	sub	sp, #84	; 0x54
 80113fc:	af00      	add	r7, sp, #0
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 80113fe:	4b59      	ldr	r3, [pc, #356]	; (8011564 <Load_Gain+0x16c>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	64fb      	str	r3, [r7, #76]	; 0x4c
	float data[16]={0};//1個多く要素を作る。
 8011404:	463b      	mov	r3, r7
 8011406:	2240      	movs	r2, #64	; 0x40
 8011408:	2100      	movs	r1, #0
 801140a:	4618      	mov	r0, r3
 801140c:	f006 f827 	bl	801745e <memset>

	//チェック
	int judge;
	uint8_t j=0;
 8011410:	2300      	movs	r3, #0
 8011412:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 8011416:	2300      	movs	r3, #0
 8011418:	647b      	str	r3, [r7, #68]	; 0x44
 801141a:	e038      	b.n	801148e <Load_Gain+0x96>
	{
		FLASH_Read_Word_F( address, &data[i]);//かこれ
 801141c:	463a      	mov	r2, r7
 801141e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011420:	009b      	lsls	r3, r3, #2
 8011422:	4413      	add	r3, r2
 8011424:	4619      	mov	r1, r3
 8011426:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011428:	f7ff fb24 	bl	8010a74 <FLASH_Read_Word_F>
		address += 0x04;
 801142c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801142e:	3304      	adds	r3, #4
 8011430:	64fb      	str	r3, [r7, #76]	; 0x4c
		printf("%d, %f\r\n",i,data[i]);
 8011432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011434:	009b      	lsls	r3, r3, #2
 8011436:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801143a:	4413      	add	r3, r2
 801143c:	3b50      	subs	r3, #80	; 0x50
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	4618      	mov	r0, r3
 8011442:	f7f6 ffb9 	bl	80083b8 <__aeabi_f2d>
 8011446:	4603      	mov	r3, r0
 8011448:	460c      	mov	r4, r1
 801144a:	461a      	mov	r2, r3
 801144c:	4623      	mov	r3, r4
 801144e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011450:	4845      	ldr	r0, [pc, #276]	; (8011568 <Load_Gain+0x170>)
 8011452:	f007 fb03 	bl	8018a5c <iprintf>
		//work_ram[]がデフォ値なら、そのまま
		judge = isnanf(data[i]);
 8011456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011458:	009b      	lsls	r3, r3, #2
 801145a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801145e:	4413      	add	r3, r2
 8011460:	3b50      	subs	r3, #80	; 0x50
 8011462:	edd3 7a00 	vldr	s15, [r3]
 8011466:	eef4 7a67 	vcmp.f32	s15, s15
 801146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801146e:	bf6c      	ite	vs
 8011470:	2301      	movvs	r3, #1
 8011472:	2300      	movvc	r3, #0
 8011474:	b2db      	uxtb	r3, r3
 8011476:	643b      	str	r3, [r7, #64]	; 0x40
		if(judge != 0)
 8011478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801147a:	2b00      	cmp	r3, #0
 801147c:	d004      	beq.n	8011488 <Load_Gain+0x90>
		{
			j++;
 801147e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011482:	3301      	adds	r3, #1
 8011484:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 8011488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801148a:	3301      	adds	r3, #1
 801148c:	647b      	str	r3, [r7, #68]	; 0x44
 801148e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011490:	2b0e      	cmp	r3, #14
 8011492:	ddc3      	ble.n	801141c <Load_Gain+0x24>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 8011494:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011498:	4619      	mov	r1, r3
 801149a:	4834      	ldr	r0, [pc, #208]	; (801156c <Load_Gain+0x174>)
 801149c:	f007 fade 	bl	8018a5c <iprintf>
		if(j == 15)//全てnan0であれば
 80114a0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80114a4:	2b0f      	cmp	r3, #15
 80114a6:	d059      	beq.n	801155c <Load_Gain+0x164>
//			Pid[A_VELO_PID].KD = data[5];
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 80114a8:	edd7 7a00 	vldr	s15, [r7]
 80114ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80114b0:	edd7 6a02 	vldr	s13, [r7, #8]
 80114b4:	eeb0 1a66 	vmov.f32	s2, s13
 80114b8:	eef0 0a47 	vmov.f32	s1, s14
 80114bc:	eeb0 0a67 	vmov.f32	s0, s15
 80114c0:	2004      	movs	r0, #4
 80114c2:	f000 fa29 	bl	8011918 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 80114c6:	edd7 7a00 	vldr	s15, [r7]
 80114ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80114ce:	edd7 6a02 	vldr	s13, [r7, #8]
 80114d2:	eeb0 1a66 	vmov.f32	s2, s13
 80114d6:	eef0 0a47 	vmov.f32	s1, s14
 80114da:	eeb0 0a67 	vmov.f32	s0, s15
 80114de:	2005      	movs	r0, #5
 80114e0:	f000 fa1a 	bl	8011918 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 80114e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80114e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80114ec:	edd7 6a05 	vldr	s13, [r7, #20]
 80114f0:	eeb0 1a66 	vmov.f32	s2, s13
 80114f4:	eef0 0a47 	vmov.f32	s1, s14
 80114f8:	eeb0 0a67 	vmov.f32	s0, s15
 80114fc:	2000      	movs	r0, #0
 80114fe:	f000 fa0b 	bl	8011918 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 8011502:	edd7 7a06 	vldr	s15, [r7, #24]
 8011506:	ed97 7a07 	vldr	s14, [r7, #28]
 801150a:	edd7 6a08 	vldr	s13, [r7, #32]
 801150e:	eeb0 1a66 	vmov.f32	s2, s13
 8011512:	eef0 0a47 	vmov.f32	s1, s14
 8011516:	eeb0 0a67 	vmov.f32	s0, s15
 801151a:	2002      	movs	r0, #2
 801151c:	f000 f9fc 	bl	8011918 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 8011520:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011524:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011528:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 801152c:	eeb0 1a66 	vmov.f32	s2, s13
 8011530:	eef0 0a47 	vmov.f32	s1, s14
 8011534:	eeb0 0a67 	vmov.f32	s0, s15
 8011538:	2003      	movs	r0, #3
 801153a:	f000 f9ed 	bl	8011918 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 801153e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8011542:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8011546:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 801154a:	eeb0 1a66 	vmov.f32	s2, s13
 801154e:	eef0 0a47 	vmov.f32	s1, s14
 8011552:	eeb0 0a67 	vmov.f32	s0, s15
 8011556:	2001      	movs	r0, #1
 8011558:	f000 f9de 	bl	8011918 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 801155c:	bf00      	nop
 801155e:	3754      	adds	r7, #84	; 0x54
 8011560:	46bd      	mov	sp, r7
 8011562:	bd90      	pop	{r4, r7, pc}
 8011564:	0801c6d4 	.word	0x0801c6d4
 8011568:	0801c558 	.word	0x0801c558
 801156c:	0801c564 	.word	0x0801c564

08011570 <Change_Gain>:
void Change_Gain()
{
 8011570:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8011574:	b086      	sub	sp, #24
 8011576:	af04      	add	r7, sp, #16
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 8011578:	48af      	ldr	r0, [pc, #700]	; (8011838 <Change_Gain+0x2c8>)
 801157a:	f003 fc48 	bl	8014e0e <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 801157e:	48af      	ldr	r0, [pc, #700]	; (801183c <Change_Gain+0x2cc>)
 8011580:	f003 fc45 	bl	8014e0e <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 8011584:	f7ff fd34 	bl	8010ff0 <Motor_PWM_Stop>
	EmitterOFF();
 8011588:	f7ff fc4c 	bl	8010e24 <EmitterOFF>
//	ADCStart();
//	printf("start\r\n");
	//ADCStop();//ここ
	HAL_Delay(200);
 801158c:	20c8      	movs	r0, #200	; 0xc8
 801158e:	f000 fd33 	bl	8011ff8 <HAL_Delay>

	//ゲイン調整する
	char change_mode='0';
 8011592:	2330      	movs	r3, #48	; 0x30
 8011594:	71fb      	strb	r3, [r7, #7]
	char pid = '0';
 8011596:	2330      	movs	r3, #48	; 0x30
 8011598:	71bb      	strb	r3, [r7, #6]
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 801159a:	48a9      	ldr	r0, [pc, #676]	; (8011840 <Change_Gain+0x2d0>)
 801159c:	f007 fae6 	bl	8018b6c <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 80115a0:	4ba8      	ldr	r3, [pc, #672]	; (8011844 <Change_Gain+0x2d4>)
 80115a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7f6 ff06 	bl	80083b8 <__aeabi_f2d>
 80115ac:	4680      	mov	r8, r0
 80115ae:	4689      	mov	r9, r1
 80115b0:	4ba4      	ldr	r3, [pc, #656]	; (8011844 <Change_Gain+0x2d4>)
 80115b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7f6 fefe 	bl	80083b8 <__aeabi_f2d>
 80115bc:	4604      	mov	r4, r0
 80115be:	460d      	mov	r5, r1
 80115c0:	4ba0      	ldr	r3, [pc, #640]	; (8011844 <Change_Gain+0x2d4>)
 80115c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7f6 fef6 	bl	80083b8 <__aeabi_f2d>
 80115cc:	4602      	mov	r2, r0
 80115ce:	460b      	mov	r3, r1
 80115d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80115d4:	e9cd 4500 	strd	r4, r5, [sp]
 80115d8:	4642      	mov	r2, r8
 80115da:	464b      	mov	r3, r9
 80115dc:	489a      	ldr	r0, [pc, #616]	; (8011848 <Change_Gain+0x2d8>)
 80115de:	f007 fa3d 	bl	8018a5c <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 80115e2:	4b98      	ldr	r3, [pc, #608]	; (8011844 <Change_Gain+0x2d4>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7f6 fee6 	bl	80083b8 <__aeabi_f2d>
 80115ec:	4680      	mov	r8, r0
 80115ee:	4689      	mov	r9, r1
 80115f0:	4b94      	ldr	r3, [pc, #592]	; (8011844 <Change_Gain+0x2d4>)
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7f6 fedf 	bl	80083b8 <__aeabi_f2d>
 80115fa:	4604      	mov	r4, r0
 80115fc:	460d      	mov	r5, r1
 80115fe:	4b91      	ldr	r3, [pc, #580]	; (8011844 <Change_Gain+0x2d4>)
 8011600:	689b      	ldr	r3, [r3, #8]
 8011602:	4618      	mov	r0, r3
 8011604:	f7f6 fed8 	bl	80083b8 <__aeabi_f2d>
 8011608:	4602      	mov	r2, r0
 801160a:	460b      	mov	r3, r1
 801160c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011610:	e9cd 4500 	strd	r4, r5, [sp]
 8011614:	4642      	mov	r2, r8
 8011616:	464b      	mov	r3, r9
 8011618:	488c      	ldr	r0, [pc, #560]	; (801184c <Change_Gain+0x2dc>)
 801161a:	f007 fa1f 	bl	8018a5c <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 801161e:	4b89      	ldr	r3, [pc, #548]	; (8011844 <Change_Gain+0x2d4>)
 8011620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011622:	4618      	mov	r0, r3
 8011624:	f7f6 fec8 	bl	80083b8 <__aeabi_f2d>
 8011628:	4680      	mov	r8, r0
 801162a:	4689      	mov	r9, r1
 801162c:	4b85      	ldr	r3, [pc, #532]	; (8011844 <Change_Gain+0x2d4>)
 801162e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011630:	4618      	mov	r0, r3
 8011632:	f7f6 fec1 	bl	80083b8 <__aeabi_f2d>
 8011636:	4604      	mov	r4, r0
 8011638:	460d      	mov	r5, r1
 801163a:	4b82      	ldr	r3, [pc, #520]	; (8011844 <Change_Gain+0x2d4>)
 801163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801163e:	4618      	mov	r0, r3
 8011640:	f7f6 feba 	bl	80083b8 <__aeabi_f2d>
 8011644:	4602      	mov	r2, r0
 8011646:	460b      	mov	r3, r1
 8011648:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801164c:	e9cd 4500 	strd	r4, r5, [sp]
 8011650:	4642      	mov	r2, r8
 8011652:	464b      	mov	r3, r9
 8011654:	487e      	ldr	r0, [pc, #504]	; (8011850 <Change_Gain+0x2e0>)
 8011656:	f007 fa01 	bl	8018a5c <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 801165a:	4b7a      	ldr	r3, [pc, #488]	; (8011844 <Change_Gain+0x2d4>)
 801165c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011660:	4618      	mov	r0, r3
 8011662:	f7f6 fea9 	bl	80083b8 <__aeabi_f2d>
 8011666:	4680      	mov	r8, r0
 8011668:	4689      	mov	r9, r1
 801166a:	4b76      	ldr	r3, [pc, #472]	; (8011844 <Change_Gain+0x2d4>)
 801166c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011670:	4618      	mov	r0, r3
 8011672:	f7f6 fea1 	bl	80083b8 <__aeabi_f2d>
 8011676:	4604      	mov	r4, r0
 8011678:	460d      	mov	r5, r1
 801167a:	4b72      	ldr	r3, [pc, #456]	; (8011844 <Change_Gain+0x2d4>)
 801167c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011680:	4618      	mov	r0, r3
 8011682:	f7f6 fe99 	bl	80083b8 <__aeabi_f2d>
 8011686:	4602      	mov	r2, r0
 8011688:	460b      	mov	r3, r1
 801168a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801168e:	e9cd 4500 	strd	r4, r5, [sp]
 8011692:	4642      	mov	r2, r8
 8011694:	464b      	mov	r3, r9
 8011696:	486f      	ldr	r0, [pc, #444]	; (8011854 <Change_Gain+0x2e4>)
 8011698:	f007 f9e0 	bl	8018a5c <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 801169c:	4b69      	ldr	r3, [pc, #420]	; (8011844 <Change_Gain+0x2d4>)
 801169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7f6 fe89 	bl	80083b8 <__aeabi_f2d>
 80116a6:	4680      	mov	r8, r0
 80116a8:	4689      	mov	r9, r1
 80116aa:	4b66      	ldr	r3, [pc, #408]	; (8011844 <Change_Gain+0x2d4>)
 80116ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7f6 fe82 	bl	80083b8 <__aeabi_f2d>
 80116b4:	4604      	mov	r4, r0
 80116b6:	460d      	mov	r5, r1
 80116b8:	4b62      	ldr	r3, [pc, #392]	; (8011844 <Change_Gain+0x2d4>)
 80116ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116bc:	4618      	mov	r0, r3
 80116be:	f7f6 fe7b 	bl	80083b8 <__aeabi_f2d>
 80116c2:	4602      	mov	r2, r0
 80116c4:	460b      	mov	r3, r1
 80116c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80116ca:	e9cd 4500 	strd	r4, r5, [sp]
 80116ce:	4642      	mov	r2, r8
 80116d0:	464b      	mov	r3, r9
 80116d2:	4861      	ldr	r0, [pc, #388]	; (8011858 <Change_Gain+0x2e8>)
 80116d4:	f007 f9c2 	bl	8018a5c <iprintf>

		Buffering();
 80116d8:	f7ff fe1a 	bl	8011310 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 80116dc:	485f      	ldr	r0, [pc, #380]	; (801185c <Change_Gain+0x2ec>)
 80116de:	f007 f9bd 	bl	8018a5c <iprintf>
 80116e2:	1dfb      	adds	r3, r7, #7
 80116e4:	4619      	mov	r1, r3
 80116e6:	485e      	ldr	r0, [pc, #376]	; (8011860 <Change_Gain+0x2f0>)
 80116e8:	f007 faee 	bl	8018cc8 <iscanf>
		if(change_mode == '0')
 80116ec:	79fb      	ldrb	r3, [r7, #7]
 80116ee:	2b30      	cmp	r3, #48	; 0x30
 80116f0:	f000 80f4 	beq.w	80118dc <Change_Gain+0x36c>
			break;
		}
		else
		{

			Buffering();
 80116f4:	f7ff fe0c 	bl	8011310 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 80116f8:	485a      	ldr	r0, [pc, #360]	; (8011864 <Change_Gain+0x2f4>)
 80116fa:	f007 f9af 	bl	8018a5c <iprintf>
 80116fe:	1dbb      	adds	r3, r7, #6
 8011700:	4619      	mov	r1, r3
 8011702:	4857      	ldr	r0, [pc, #348]	; (8011860 <Change_Gain+0x2f0>)
 8011704:	f007 fae0 	bl	8018cc8 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 8011708:	79fb      	ldrb	r3, [r7, #7]
 801170a:	4619      	mov	r1, r3
 801170c:	79bb      	ldrb	r3, [r7, #6]
 801170e:	461a      	mov	r2, r3
 8011710:	4855      	ldr	r0, [pc, #340]	; (8011868 <Change_Gain+0x2f8>)
 8011712:	f007 f9a3 	bl	8018a5c <iprintf>

			Buffering();
 8011716:	f7ff fdfb 	bl	8011310 <Buffering>
			printf("\r\n値を入力 : ");
 801171a:	4854      	ldr	r0, [pc, #336]	; (801186c <Change_Gain+0x2fc>)
 801171c:	f007 f99e 	bl	8018a5c <iprintf>

			switch(change_mode)
 8011720:	79fb      	ldrb	r3, [r7, #7]
 8011722:	3b31      	subs	r3, #49	; 0x31
 8011724:	2b04      	cmp	r3, #4
 8011726:	f200 80c1 	bhi.w	80118ac <Change_Gain+0x33c>
 801172a:	a201      	add	r2, pc, #4	; (adr r2, 8011730 <Change_Gain+0x1c0>)
 801172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011730:	08011745 	.word	0x08011745
 8011734:	08011777 	.word	0x08011777
 8011738:	080117a9 	.word	0x080117a9
 801173c:	080117d9 	.word	0x080117d9
 8011740:	08011809 	.word	0x08011809
			{
			case '1'://並進速度制御ゲイン
				//printf("p , i or d ?");scanf("%c",pid);

				if(pid == 'p')
 8011744:	79bb      	ldrb	r3, [r7, #6]
 8011746:	2b70      	cmp	r3, #112	; 0x70
 8011748:	d104      	bne.n	8011754 <Change_Gain+0x1e4>
				{
					scanf("%f",&Pid[L_VELO_PID].KP);
 801174a:	4949      	ldr	r1, [pc, #292]	; (8011870 <Change_Gain+0x300>)
 801174c:	4849      	ldr	r0, [pc, #292]	; (8011874 <Change_Gain+0x304>)
 801174e:	f007 fabb 	bl	8018cc8 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_VELO_PID].KD);
				}
				break;
 8011752:	e0af      	b.n	80118b4 <Change_Gain+0x344>
				else if(pid == 'i')
 8011754:	79bb      	ldrb	r3, [r7, #6]
 8011756:	2b69      	cmp	r3, #105	; 0x69
 8011758:	d104      	bne.n	8011764 <Change_Gain+0x1f4>
					scanf("%f",&Pid[L_VELO_PID].KI);
 801175a:	4947      	ldr	r1, [pc, #284]	; (8011878 <Change_Gain+0x308>)
 801175c:	4845      	ldr	r0, [pc, #276]	; (8011874 <Change_Gain+0x304>)
 801175e:	f007 fab3 	bl	8018cc8 <iscanf>
				break;
 8011762:	e0a7      	b.n	80118b4 <Change_Gain+0x344>
				else if(pid == 'd')
 8011764:	79bb      	ldrb	r3, [r7, #6]
 8011766:	2b64      	cmp	r3, #100	; 0x64
 8011768:	f040 80a4 	bne.w	80118b4 <Change_Gain+0x344>
					scanf("%f",&Pid[L_VELO_PID].KD);
 801176c:	4943      	ldr	r1, [pc, #268]	; (801187c <Change_Gain+0x30c>)
 801176e:	4841      	ldr	r0, [pc, #260]	; (8011874 <Change_Gain+0x304>)
 8011770:	f007 faaa 	bl	8018cc8 <iscanf>
				break;
 8011774:	e09e      	b.n	80118b4 <Change_Gain+0x344>

			case '2'://回転角速度制御ゲイン
				if(pid == 'p')
 8011776:	79bb      	ldrb	r3, [r7, #6]
 8011778:	2b70      	cmp	r3, #112	; 0x70
 801177a:	d104      	bne.n	8011786 <Change_Gain+0x216>
				{
					scanf("%f",&Pid[A_VELO_PID].KP);
 801177c:	4931      	ldr	r1, [pc, #196]	; (8011844 <Change_Gain+0x2d4>)
 801177e:	483d      	ldr	r0, [pc, #244]	; (8011874 <Change_Gain+0x304>)
 8011780:	f007 faa2 	bl	8018cc8 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[A_VELO_PID].KD);
				}
				break;
 8011784:	e098      	b.n	80118b8 <Change_Gain+0x348>
				else if(pid == 'i')
 8011786:	79bb      	ldrb	r3, [r7, #6]
 8011788:	2b69      	cmp	r3, #105	; 0x69
 801178a:	d104      	bne.n	8011796 <Change_Gain+0x226>
					scanf("%f",&Pid[A_VELO_PID].KI);
 801178c:	493c      	ldr	r1, [pc, #240]	; (8011880 <Change_Gain+0x310>)
 801178e:	4839      	ldr	r0, [pc, #228]	; (8011874 <Change_Gain+0x304>)
 8011790:	f007 fa9a 	bl	8018cc8 <iscanf>
				break;
 8011794:	e090      	b.n	80118b8 <Change_Gain+0x348>
				else if(pid == 'd')
 8011796:	79bb      	ldrb	r3, [r7, #6]
 8011798:	2b64      	cmp	r3, #100	; 0x64
 801179a:	f040 808d 	bne.w	80118b8 <Change_Gain+0x348>
					scanf("%f",&Pid[A_VELO_PID].KD);
 801179e:	4939      	ldr	r1, [pc, #228]	; (8011884 <Change_Gain+0x314>)
 80117a0:	4834      	ldr	r0, [pc, #208]	; (8011874 <Change_Gain+0x304>)
 80117a2:	f007 fa91 	bl	8018cc8 <iscanf>
				break;
 80117a6:	e087      	b.n	80118b8 <Change_Gain+0x348>

			case '3'://壁制御ゲイン
				if(pid == 'p')
 80117a8:	79bb      	ldrb	r3, [r7, #6]
 80117aa:	2b70      	cmp	r3, #112	; 0x70
 80117ac:	d104      	bne.n	80117b8 <Change_Gain+0x248>
				{
					scanf("%f",&Pid[L_WALL_PID].KP);
 80117ae:	4936      	ldr	r1, [pc, #216]	; (8011888 <Change_Gain+0x318>)
 80117b0:	4830      	ldr	r0, [pc, #192]	; (8011874 <Change_Gain+0x304>)
 80117b2:	f007 fa89 	bl	8018cc8 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_WALL_PID].KD);
				}
				break;
 80117b6:	e081      	b.n	80118bc <Change_Gain+0x34c>
				else if(pid == 'i')
 80117b8:	79bb      	ldrb	r3, [r7, #6]
 80117ba:	2b69      	cmp	r3, #105	; 0x69
 80117bc:	d104      	bne.n	80117c8 <Change_Gain+0x258>
					scanf("%f",&Pid[L_WALL_PID].KI);
 80117be:	4933      	ldr	r1, [pc, #204]	; (801188c <Change_Gain+0x31c>)
 80117c0:	482c      	ldr	r0, [pc, #176]	; (8011874 <Change_Gain+0x304>)
 80117c2:	f007 fa81 	bl	8018cc8 <iscanf>
				break;
 80117c6:	e079      	b.n	80118bc <Change_Gain+0x34c>
				else if(pid == 'd')
 80117c8:	79bb      	ldrb	r3, [r7, #6]
 80117ca:	2b64      	cmp	r3, #100	; 0x64
 80117cc:	d176      	bne.n	80118bc <Change_Gain+0x34c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 80117ce:	4930      	ldr	r1, [pc, #192]	; (8011890 <Change_Gain+0x320>)
 80117d0:	4828      	ldr	r0, [pc, #160]	; (8011874 <Change_Gain+0x304>)
 80117d2:	f007 fa79 	bl	8018cc8 <iscanf>
				break;
 80117d6:	e071      	b.n	80118bc <Change_Gain+0x34c>
			case '4'://壁制御ゲイン
				if(pid == 'p')
 80117d8:	79bb      	ldrb	r3, [r7, #6]
 80117da:	2b70      	cmp	r3, #112	; 0x70
 80117dc:	d104      	bne.n	80117e8 <Change_Gain+0x278>
				{
					scanf("%f",&Pid[R_WALL_PID].KP);
 80117de:	492d      	ldr	r1, [pc, #180]	; (8011894 <Change_Gain+0x324>)
 80117e0:	4824      	ldr	r0, [pc, #144]	; (8011874 <Change_Gain+0x304>)
 80117e2:	f007 fa71 	bl	8018cc8 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
 80117e6:	e06b      	b.n	80118c0 <Change_Gain+0x350>
				else if(pid == 'i')
 80117e8:	79bb      	ldrb	r3, [r7, #6]
 80117ea:	2b69      	cmp	r3, #105	; 0x69
 80117ec:	d104      	bne.n	80117f8 <Change_Gain+0x288>
					scanf("%f",&Pid[R_WALL_PID].KI);
 80117ee:	492a      	ldr	r1, [pc, #168]	; (8011898 <Change_Gain+0x328>)
 80117f0:	4820      	ldr	r0, [pc, #128]	; (8011874 <Change_Gain+0x304>)
 80117f2:	f007 fa69 	bl	8018cc8 <iscanf>
				break;
 80117f6:	e063      	b.n	80118c0 <Change_Gain+0x350>
				else if(pid == 'd')
 80117f8:	79bb      	ldrb	r3, [r7, #6]
 80117fa:	2b64      	cmp	r3, #100	; 0x64
 80117fc:	d160      	bne.n	80118c0 <Change_Gain+0x350>
					scanf("%f",&Pid[R_WALL_PID].KD);
 80117fe:	4927      	ldr	r1, [pc, #156]	; (801189c <Change_Gain+0x32c>)
 8011800:	481c      	ldr	r0, [pc, #112]	; (8011874 <Change_Gain+0x304>)
 8011802:	f007 fa61 	bl	8018cc8 <iscanf>
				break;
 8011806:	e05b      	b.n	80118c0 <Change_Gain+0x350>
			case '5'://壁制御ゲイン
				if(pid == 'p')
 8011808:	79bb      	ldrb	r3, [r7, #6]
 801180a:	2b70      	cmp	r3, #112	; 0x70
 801180c:	d104      	bne.n	8011818 <Change_Gain+0x2a8>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
 801180e:	4924      	ldr	r1, [pc, #144]	; (80118a0 <Change_Gain+0x330>)
 8011810:	4818      	ldr	r0, [pc, #96]	; (8011874 <Change_Gain+0x304>)
 8011812:	f007 fa59 	bl	8018cc8 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[D_WALL_PID].KD);
				}
				break;
 8011816:	e055      	b.n	80118c4 <Change_Gain+0x354>
				else if(pid == 'i')
 8011818:	79bb      	ldrb	r3, [r7, #6]
 801181a:	2b69      	cmp	r3, #105	; 0x69
 801181c:	d104      	bne.n	8011828 <Change_Gain+0x2b8>
					scanf("%f",&Pid[D_WALL_PID].KI);
 801181e:	4921      	ldr	r1, [pc, #132]	; (80118a4 <Change_Gain+0x334>)
 8011820:	4814      	ldr	r0, [pc, #80]	; (8011874 <Change_Gain+0x304>)
 8011822:	f007 fa51 	bl	8018cc8 <iscanf>
				break;
 8011826:	e04d      	b.n	80118c4 <Change_Gain+0x354>
				else if(pid == 'd')
 8011828:	79bb      	ldrb	r3, [r7, #6]
 801182a:	2b64      	cmp	r3, #100	; 0x64
 801182c:	d14a      	bne.n	80118c4 <Change_Gain+0x354>
					scanf("%f",&Pid[D_WALL_PID].KD);
 801182e:	491e      	ldr	r1, [pc, #120]	; (80118a8 <Change_Gain+0x338>)
 8011830:	4810      	ldr	r0, [pc, #64]	; (8011874 <Change_Gain+0x304>)
 8011832:	f007 fa49 	bl	8018cc8 <iscanf>
				break;
 8011836:	e045      	b.n	80118c4 <Change_Gain+0x354>
 8011838:	20000fc0 	.word	0x20000fc0
 801183c:	20000d78 	.word	0x20000d78
 8011840:	0801c56c 	.word	0x0801c56c
 8011844:	20000318 	.word	0x20000318
 8011848:	0801c584 	.word	0x0801c584
 801184c:	0801c5a4 	.word	0x0801c5a4
 8011850:	0801c5c0 	.word	0x0801c5c0
 8011854:	0801c5dc 	.word	0x0801c5dc
 8011858:	0801c5f8 	.word	0x0801c5f8
 801185c:	0801c614 	.word	0x0801c614
 8011860:	0801c62c 	.word	0x0801c62c
 8011864:	0801c630 	.word	0x0801c630
 8011868:	0801c644 	.word	0x0801c644
 801186c:	0801c668 	.word	0x0801c668
 8011870:	200003c8 	.word	0x200003c8
 8011874:	0801c67c 	.word	0x0801c67c
 8011878:	200003cc 	.word	0x200003cc
 801187c:	200003d0 	.word	0x200003d0
 8011880:	2000031c 	.word	0x2000031c
 8011884:	20000320 	.word	0x20000320
 8011888:	20000370 	.word	0x20000370
 801188c:	20000374 	.word	0x20000374
 8011890:	20000378 	.word	0x20000378
 8011894:	2000039c 	.word	0x2000039c
 8011898:	200003a0 	.word	0x200003a0
 801189c:	200003a4 	.word	0x200003a4
 80118a0:	20000344 	.word	0x20000344
 80118a4:	20000348 	.word	0x20000348
 80118a8:	2000034c 	.word	0x2000034c
			default :
				printf("該当しません\r\n");
 80118ac:	4816      	ldr	r0, [pc, #88]	; (8011908 <Change_Gain+0x398>)
 80118ae:	f007 f95d 	bl	8018b6c <puts>
				break;
 80118b2:	e008      	b.n	80118c6 <Change_Gain+0x356>
				break;
 80118b4:	bf00      	nop
 80118b6:	e006      	b.n	80118c6 <Change_Gain+0x356>
				break;
 80118b8:	bf00      	nop
 80118ba:	e004      	b.n	80118c6 <Change_Gain+0x356>
				break;
 80118bc:	bf00      	nop
 80118be:	e002      	b.n	80118c6 <Change_Gain+0x356>
				break;
 80118c0:	bf00      	nop
 80118c2:	e000      	b.n	80118c6 <Change_Gain+0x356>
				break;
 80118c4:	bf00      	nop
			}
			Buffering();
 80118c6:	f7ff fd23 	bl	8011310 <Buffering>
			scanf("%c",&nl);
 80118ca:	1d7b      	adds	r3, r7, #5
 80118cc:	4619      	mov	r1, r3
 80118ce:	480f      	ldr	r0, [pc, #60]	; (801190c <Change_Gain+0x39c>)
 80118d0:	f007 f9fa 	bl	8018cc8 <iscanf>
			printf("\r\n");
 80118d4:	480e      	ldr	r0, [pc, #56]	; (8011910 <Change_Gain+0x3a0>)
 80118d6:	f007 f949 	bl	8018b6c <puts>
		printf("現在のPIDゲイン\r\n");
 80118da:	e65e      	b.n	801159a <Change_Gain+0x2a>
			break;
 80118dc:	bf00      	nop
		}

	}
	printf("\r\n完了\r\n");
 80118de:	480d      	ldr	r0, [pc, #52]	; (8011914 <Change_Gain+0x3a4>)
 80118e0:	f007 f944 	bl	8018b6c <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 80118e4:	f7ff f8f0 	bl	8010ac8 <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 80118e8:	f7ff fd26 	bl	8011338 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 80118ec:	2007      	movs	r0, #7
 80118ee:	f7ff faa7 	bl	8010e40 <ChangeLED>
	HAL_Delay(200);
 80118f2:	20c8      	movs	r0, #200	; 0xc8
 80118f4:	f000 fb80 	bl	8011ff8 <HAL_Delay>
	ChangeLED(0);
 80118f8:	2000      	movs	r0, #0
 80118fa:	f7ff faa1 	bl	8010e40 <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 80118fe:	bf00      	nop
 8011900:	3708      	adds	r7, #8
 8011902:	46bd      	mov	sp, r7
 8011904:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8011908:	0801c680 	.word	0x0801c680
 801190c:	0801c62c 	.word	0x0801c62c
 8011910:	0801c694 	.word	0x0801c694
 8011914:	0801c698 	.word	0x0801c698

08011918 <PIDSetGain>:
//		elast[i] = 0;
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 8011918:	b480      	push	{r7}
 801191a:	b085      	sub	sp, #20
 801191c:	af00      	add	r7, sp, #0
 801191e:	60f8      	str	r0, [r7, #12]
 8011920:	ed87 0a02 	vstr	s0, [r7, #8]
 8011924:	edc7 0a01 	vstr	s1, [r7, #4]
 8011928:	ed87 1a00 	vstr	s2, [r7]
	Pid[n].KP = kp;
 801192c:	4a0f      	ldr	r2, [pc, #60]	; (801196c <PIDSetGain+0x54>)
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	212c      	movs	r1, #44	; 0x2c
 8011932:	fb01 f303 	mul.w	r3, r1, r3
 8011936:	4413      	add	r3, r2
 8011938:	68ba      	ldr	r2, [r7, #8]
 801193a:	601a      	str	r2, [r3, #0]
	Pid[n].KI = ki;
 801193c:	4a0b      	ldr	r2, [pc, #44]	; (801196c <PIDSetGain+0x54>)
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	212c      	movs	r1, #44	; 0x2c
 8011942:	fb01 f303 	mul.w	r3, r1, r3
 8011946:	4413      	add	r3, r2
 8011948:	3304      	adds	r3, #4
 801194a:	687a      	ldr	r2, [r7, #4]
 801194c:	601a      	str	r2, [r3, #0]
	Pid[n].KD = kd;
 801194e:	4a07      	ldr	r2, [pc, #28]	; (801196c <PIDSetGain+0x54>)
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	212c      	movs	r1, #44	; 0x2c
 8011954:	fb01 f303 	mul.w	r3, r1, r3
 8011958:	4413      	add	r3, r2
 801195a:	3308      	adds	r3, #8
 801195c:	683a      	ldr	r2, [r7, #0]
 801195e:	601a      	str	r2, [r3, #0]

}
 8011960:	bf00      	nop
 8011962:	3714      	adds	r7, #20
 8011964:	46bd      	mov	sp, r7
 8011966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196a:	4770      	bx	lr
 801196c:	20000318 	.word	0x20000318

08011970 <PIDChangeFlag>:
//	ei[n] = 0;
//	elast[n] = 0;
//}

void PIDChangeFlag(int n, int on_or_off)
{
 8011970:	b480      	push	{r7}
 8011972:	b083      	sub	sp, #12
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	6039      	str	r1, [r7, #0]
	Pid[n].flag = on_or_off;
 801197a:	4a07      	ldr	r2, [pc, #28]	; (8011998 <PIDChangeFlag+0x28>)
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	212c      	movs	r1, #44	; 0x2c
 8011980:	fb01 f303 	mul.w	r3, r1, r3
 8011984:	4413      	add	r3, r2
 8011986:	3328      	adds	r3, #40	; 0x28
 8011988:	683a      	ldr	r2, [r7, #0]
 801198a:	601a      	str	r2, [r3, #0]
}
 801198c:	bf00      	nop
 801198e:	370c      	adds	r7, #12
 8011990:	46bd      	mov	sp, r7
 8011992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011996:	4770      	bx	lr
 8011998:	20000318 	.word	0x20000318

0801199c <PIDReset>:
int PIDGetFlag(int n)
{
	return Pid[n].flag;
}
void PIDReset(int n)
{
 801199c:	b480      	push	{r7}
 801199e:	b083      	sub	sp, #12
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 80119a4:	4a1b      	ldr	r2, [pc, #108]	; (8011a14 <PIDReset+0x78>)
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	212c      	movs	r1, #44	; 0x2c
 80119aa:	fb01 f303 	mul.w	r3, r1, r3
 80119ae:	4413      	add	r3, r2
 80119b0:	330c      	adds	r3, #12
 80119b2:	f04f 0200 	mov.w	r2, #0
 80119b6:	601a      	str	r2, [r3, #0]
	Pid[n].ei = 0;
 80119b8:	4a16      	ldr	r2, [pc, #88]	; (8011a14 <PIDReset+0x78>)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	212c      	movs	r1, #44	; 0x2c
 80119be:	fb01 f303 	mul.w	r3, r1, r3
 80119c2:	4413      	add	r3, r2
 80119c4:	3310      	adds	r3, #16
 80119c6:	f04f 0200 	mov.w	r2, #0
 80119ca:	601a      	str	r2, [r3, #0]
	Pid[n].ed = 0;
 80119cc:	4a11      	ldr	r2, [pc, #68]	; (8011a14 <PIDReset+0x78>)
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	212c      	movs	r1, #44	; 0x2c
 80119d2:	fb01 f303 	mul.w	r3, r1, r3
 80119d6:	4413      	add	r3, r2
 80119d8:	3314      	adds	r3, #20
 80119da:	f04f 0200 	mov.w	r2, #0
 80119de:	601a      	str	r2, [r3, #0]
	Pid[n].elast = 0;
 80119e0:	4a0c      	ldr	r2, [pc, #48]	; (8011a14 <PIDReset+0x78>)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	212c      	movs	r1, #44	; 0x2c
 80119e6:	fb01 f303 	mul.w	r3, r1, r3
 80119ea:	4413      	add	r3, r2
 80119ec:	3318      	adds	r3, #24
 80119ee:	f04f 0200 	mov.w	r2, #0
 80119f2:	601a      	str	r2, [r3, #0]
	Pid[n].out = 0;
 80119f4:	4a07      	ldr	r2, [pc, #28]	; (8011a14 <PIDReset+0x78>)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	212c      	movs	r1, #44	; 0x2c
 80119fa:	fb01 f303 	mul.w	r3, r1, r3
 80119fe:	4413      	add	r3, r2
 8011a00:	3324      	adds	r3, #36	; 0x24
 8011a02:	2200      	movs	r2, #0
 8011a04:	601a      	str	r2, [r3, #0]
}
 8011a06:	bf00      	nop
 8011a08:	370c      	adds	r7, #12
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a10:	4770      	bx	lr
 8011a12:	bf00      	nop
 8011a14:	20000318 	.word	0x20000318

08011a18 <PIDControl>:
//{
//	Pid[n].target = target;
//	Pid[n].current = current;
//}
inline int PIDControl(int n, float target, float current)
{
 8011a18:	b590      	push	{r4, r7, lr}
 8011a1a:	b085      	sub	sp, #20
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	60f8      	str	r0, [r7, #12]
 8011a20:	ed87 0a02 	vstr	s0, [r7, #8]
 8011a24:	edc7 0a01 	vstr	s1, [r7, #4]
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 8011a28:	4a90      	ldr	r2, [pc, #576]	; (8011c6c <PIDControl+0x254>)
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	212c      	movs	r1, #44	; 0x2c
 8011a2e:	fb01 f303 	mul.w	r3, r1, r3
 8011a32:	4413      	add	r3, r2
 8011a34:	3328      	adds	r3, #40	; 0x28
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d132      	bne.n	8011aa2 <PIDControl+0x8a>
	{
		Pid[n].e = 0.0f;
 8011a3c:	4a8b      	ldr	r2, [pc, #556]	; (8011c6c <PIDControl+0x254>)
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	212c      	movs	r1, #44	; 0x2c
 8011a42:	fb01 f303 	mul.w	r3, r1, r3
 8011a46:	4413      	add	r3, r2
 8011a48:	330c      	adds	r3, #12
 8011a4a:	f04f 0200 	mov.w	r2, #0
 8011a4e:	601a      	str	r2, [r3, #0]
		Pid[n].ei = 0.0f;
 8011a50:	4a86      	ldr	r2, [pc, #536]	; (8011c6c <PIDControl+0x254>)
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	212c      	movs	r1, #44	; 0x2c
 8011a56:	fb01 f303 	mul.w	r3, r1, r3
 8011a5a:	4413      	add	r3, r2
 8011a5c:	3310      	adds	r3, #16
 8011a5e:	f04f 0200 	mov.w	r2, #0
 8011a62:	601a      	str	r2, [r3, #0]
		Pid[n].ed = 0.0f;
 8011a64:	4a81      	ldr	r2, [pc, #516]	; (8011c6c <PIDControl+0x254>)
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	212c      	movs	r1, #44	; 0x2c
 8011a6a:	fb01 f303 	mul.w	r3, r1, r3
 8011a6e:	4413      	add	r3, r2
 8011a70:	3314      	adds	r3, #20
 8011a72:	f04f 0200 	mov.w	r2, #0
 8011a76:	601a      	str	r2, [r3, #0]
		Pid[n].elast = 0.0f;
 8011a78:	4a7c      	ldr	r2, [pc, #496]	; (8011c6c <PIDControl+0x254>)
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	212c      	movs	r1, #44	; 0x2c
 8011a7e:	fb01 f303 	mul.w	r3, r1, r3
 8011a82:	4413      	add	r3, r2
 8011a84:	3318      	adds	r3, #24
 8011a86:	f04f 0200 	mov.w	r2, #0
 8011a8a:	601a      	str	r2, [r3, #0]
		Pid[n].out = 0;
 8011a8c:	4a77      	ldr	r2, [pc, #476]	; (8011c6c <PIDControl+0x254>)
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	212c      	movs	r1, #44	; 0x2c
 8011a92:	fb01 f303 	mul.w	r3, r1, r3
 8011a96:	4413      	add	r3, r2
 8011a98:	3324      	adds	r3, #36	; 0x24
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	601a      	str	r2, [r3, #0]
		return 0;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	e0df      	b.n	8011c62 <PIDControl+0x24a>
		//PIDReset(n);
	}
	else
	{
		Pid[n].target = target;
 8011aa2:	4a72      	ldr	r2, [pc, #456]	; (8011c6c <PIDControl+0x254>)
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	212c      	movs	r1, #44	; 0x2c
 8011aa8:	fb01 f303 	mul.w	r3, r1, r3
 8011aac:	4413      	add	r3, r2
 8011aae:	3320      	adds	r3, #32
 8011ab0:	68ba      	ldr	r2, [r7, #8]
 8011ab2:	601a      	str	r2, [r3, #0]
		Pid[n].current = current;
 8011ab4:	4a6d      	ldr	r2, [pc, #436]	; (8011c6c <PIDControl+0x254>)
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	212c      	movs	r1, #44	; 0x2c
 8011aba:	fb01 f303 	mul.w	r3, r1, r3
 8011abe:	4413      	add	r3, r2
 8011ac0:	331c      	adds	r3, #28
 8011ac2:	687a      	ldr	r2, [r7, #4]
 8011ac4:	601a      	str	r2, [r3, #0]

		Pid[n].e = Pid[n].target - Pid[n].current;
 8011ac6:	4a69      	ldr	r2, [pc, #420]	; (8011c6c <PIDControl+0x254>)
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	212c      	movs	r1, #44	; 0x2c
 8011acc:	fb01 f303 	mul.w	r3, r1, r3
 8011ad0:	4413      	add	r3, r2
 8011ad2:	3320      	adds	r3, #32
 8011ad4:	ed93 7a00 	vldr	s14, [r3]
 8011ad8:	4a64      	ldr	r2, [pc, #400]	; (8011c6c <PIDControl+0x254>)
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	212c      	movs	r1, #44	; 0x2c
 8011ade:	fb01 f303 	mul.w	r3, r1, r3
 8011ae2:	4413      	add	r3, r2
 8011ae4:	331c      	adds	r3, #28
 8011ae6:	edd3 7a00 	vldr	s15, [r3]
 8011aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011aee:	4a5f      	ldr	r2, [pc, #380]	; (8011c6c <PIDControl+0x254>)
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	212c      	movs	r1, #44	; 0x2c
 8011af4:	fb01 f303 	mul.w	r3, r1, r3
 8011af8:	4413      	add	r3, r2
 8011afa:	330c      	adds	r3, #12
 8011afc:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ei += Pid[n].e * pid_T;
 8011b00:	4a5a      	ldr	r2, [pc, #360]	; (8011c6c <PIDControl+0x254>)
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	212c      	movs	r1, #44	; 0x2c
 8011b06:	fb01 f303 	mul.w	r3, r1, r3
 8011b0a:	4413      	add	r3, r2
 8011b0c:	3310      	adds	r3, #16
 8011b0e:	ed93 7a00 	vldr	s14, [r3]
 8011b12:	4a56      	ldr	r2, [pc, #344]	; (8011c6c <PIDControl+0x254>)
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	212c      	movs	r1, #44	; 0x2c
 8011b18:	fb01 f303 	mul.w	r3, r1, r3
 8011b1c:	4413      	add	r3, r2
 8011b1e:	330c      	adds	r3, #12
 8011b20:	edd3 7a00 	vldr	s15, [r3]
 8011b24:	eddf 6a52 	vldr	s13, [pc, #328]	; 8011c70 <PIDControl+0x258>
 8011b28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b30:	4a4e      	ldr	r2, [pc, #312]	; (8011c6c <PIDControl+0x254>)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	212c      	movs	r1, #44	; 0x2c
 8011b36:	fb01 f303 	mul.w	r3, r1, r3
 8011b3a:	4413      	add	r3, r2
 8011b3c:	3310      	adds	r3, #16
 8011b3e:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 8011b42:	4a4a      	ldr	r2, [pc, #296]	; (8011c6c <PIDControl+0x254>)
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	212c      	movs	r1, #44	; 0x2c
 8011b48:	fb01 f303 	mul.w	r3, r1, r3
 8011b4c:	4413      	add	r3, r2
 8011b4e:	330c      	adds	r3, #12
 8011b50:	ed93 7a00 	vldr	s14, [r3]
 8011b54:	4a45      	ldr	r2, [pc, #276]	; (8011c6c <PIDControl+0x254>)
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	212c      	movs	r1, #44	; 0x2c
 8011b5a:	fb01 f303 	mul.w	r3, r1, r3
 8011b5e:	4413      	add	r3, r2
 8011b60:	3318      	adds	r3, #24
 8011b62:	edd3 7a00 	vldr	s15, [r3]
 8011b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b6a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8011c74 <PIDControl+0x25c>
 8011b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b72:	4a3e      	ldr	r2, [pc, #248]	; (8011c6c <PIDControl+0x254>)
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	212c      	movs	r1, #44	; 0x2c
 8011b78:	fb01 f303 	mul.w	r3, r1, r3
 8011b7c:	4413      	add	r3, r2
 8011b7e:	3314      	adds	r3, #20
 8011b80:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].elast = Pid[n].e;
 8011b84:	4a39      	ldr	r2, [pc, #228]	; (8011c6c <PIDControl+0x254>)
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	212c      	movs	r1, #44	; 0x2c
 8011b8a:	fb01 f303 	mul.w	r3, r1, r3
 8011b8e:	4413      	add	r3, r2
 8011b90:	330c      	adds	r3, #12
 8011b92:	681a      	ldr	r2, [r3, #0]
 8011b94:	4935      	ldr	r1, [pc, #212]	; (8011c6c <PIDControl+0x254>)
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	202c      	movs	r0, #44	; 0x2c
 8011b9a:	fb00 f303 	mul.w	r3, r0, r3
 8011b9e:	440b      	add	r3, r1
 8011ba0:	3318      	adds	r3, #24
 8011ba2:	601a      	str	r2, [r3, #0]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 8011ba4:	4a31      	ldr	r2, [pc, #196]	; (8011c6c <PIDControl+0x254>)
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	212c      	movs	r1, #44	; 0x2c
 8011baa:	fb01 f303 	mul.w	r3, r1, r3
 8011bae:	4413      	add	r3, r2
 8011bb0:	ed93 7a00 	vldr	s14, [r3]
 8011bb4:	4a2d      	ldr	r2, [pc, #180]	; (8011c6c <PIDControl+0x254>)
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	212c      	movs	r1, #44	; 0x2c
 8011bba:	fb01 f303 	mul.w	r3, r1, r3
 8011bbe:	4413      	add	r3, r2
 8011bc0:	330c      	adds	r3, #12
 8011bc2:	edd3 7a00 	vldr	s15, [r3]
 8011bc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011bca:	4a28      	ldr	r2, [pc, #160]	; (8011c6c <PIDControl+0x254>)
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	212c      	movs	r1, #44	; 0x2c
 8011bd0:	fb01 f303 	mul.w	r3, r1, r3
 8011bd4:	4413      	add	r3, r2
 8011bd6:	3304      	adds	r3, #4
 8011bd8:	edd3 6a00 	vldr	s13, [r3]
 8011bdc:	4a23      	ldr	r2, [pc, #140]	; (8011c6c <PIDControl+0x254>)
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	212c      	movs	r1, #44	; 0x2c
 8011be2:	fb01 f303 	mul.w	r3, r1, r3
 8011be6:	4413      	add	r3, r2
 8011be8:	3310      	adds	r3, #16
 8011bea:	edd3 7a00 	vldr	s15, [r3]
 8011bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011bf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011bf6:	4a1d      	ldr	r2, [pc, #116]	; (8011c6c <PIDControl+0x254>)
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	212c      	movs	r1, #44	; 0x2c
 8011bfc:	fb01 f303 	mul.w	r3, r1, r3
 8011c00:	4413      	add	r3, r2
 8011c02:	3308      	adds	r3, #8
 8011c04:	edd3 6a00 	vldr	s13, [r3]
 8011c08:	4a18      	ldr	r2, [pc, #96]	; (8011c6c <PIDControl+0x254>)
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	212c      	movs	r1, #44	; 0x2c
 8011c0e:	fb01 f303 	mul.w	r3, r1, r3
 8011c12:	4413      	add	r3, r2
 8011c14:	3314      	adds	r3, #20
 8011c16:	edd3 7a00 	vldr	s15, [r3]
 8011c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c22:	ee17 0a90 	vmov	r0, s15
 8011c26:	f7f6 fbc7 	bl	80083b8 <__aeabi_f2d>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	460c      	mov	r4, r1
 8011c2e:	ec44 3b10 	vmov	d0, r3, r4
 8011c32:	f005 f989 	bl	8016f48 <round>
 8011c36:	ec54 3b10 	vmov	r3, r4, d0
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	4621      	mov	r1, r4
 8011c3e:	f7f6 fec3 	bl	80089c8 <__aeabi_d2iz>
 8011c42:	4a0a      	ldr	r2, [pc, #40]	; (8011c6c <PIDControl+0x254>)
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	212c      	movs	r1, #44	; 0x2c
 8011c48:	fb01 f303 	mul.w	r3, r1, r3
 8011c4c:	4413      	add	r3, r2
 8011c4e:	3324      	adds	r3, #36	; 0x24
 8011c50:	6018      	str	r0, [r3, #0]
		return Pid[n].out;
 8011c52:	4a06      	ldr	r2, [pc, #24]	; (8011c6c <PIDControl+0x254>)
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	212c      	movs	r1, #44	; 0x2c
 8011c58:	fb01 f303 	mul.w	r3, r1, r3
 8011c5c:	4413      	add	r3, r2
 8011c5e:	3324      	adds	r3, #36	; 0x24
 8011c60:	681b      	ldr	r3, [r3, #0]
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3714      	adds	r7, #20
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd90      	pop	{r4, r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	20000318 	.word	0x20000318
 8011c70:	3a83126f 	.word	0x3a83126f
 8011c74:	4479ffff 	.word	0x4479ffff

08011c78 <HAL_GPIO_EXTI_Callback>:

#include <stdio.h>
#include <math.h>
//中間モジュール。
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8011c78:	b480      	push	{r7}
 8011c7a:	b083      	sub	sp, #12
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	4603      	mov	r3, r0
 8011c80:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12)
 8011c82:	88fb      	ldrh	r3, [r7, #6]
 8011c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c88:	d10b      	bne.n	8011ca2 <HAL_GPIO_EXTI_Callback+0x2a>
	{
	  gpio_callback_count++;
 8011c8a:	4b09      	ldr	r3, [pc, #36]	; (8011cb0 <HAL_GPIO_EXTI_Callback+0x38>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	3301      	adds	r3, #1
 8011c90:	4a07      	ldr	r2, [pc, #28]	; (8011cb0 <HAL_GPIO_EXTI_Callback+0x38>)
 8011c92:	6013      	str	r3, [r2, #0]
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 8011c94:	4b06      	ldr	r3, [pc, #24]	; (8011cb0 <HAL_GPIO_EXTI_Callback+0x38>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	2b01      	cmp	r3, #1
 8011c9a:	dd02      	ble.n	8011ca2 <HAL_GPIO_EXTI_Callback+0x2a>
 8011c9c:	4b04      	ldr	r3, [pc, #16]	; (8011cb0 <HAL_GPIO_EXTI_Callback+0x38>)
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	601a      	str	r2, [r3, #0]
	}
}
 8011ca2:	bf00      	nop
 8011ca4:	370c      	adds	r7, #12
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cac:	4770      	bx	lr
 8011cae:	bf00      	nop
 8011cb0:	200004d0 	.word	0x200004d0

08011cb4 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int8_t mode)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b084      	sub	sp, #16
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	4603      	mov	r3, r0
 8011cbc:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i < 5; i++)
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	60fb      	str	r3, [r7, #12]
 8011cc2:	e010      	b.n	8011ce6 <Signal+0x32>
	{
		ChangeLED(mode);
 8011cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7ff f8b9 	bl	8010e40 <ChangeLED>
		HAL_Delay(100);
 8011cce:	2064      	movs	r0, #100	; 0x64
 8011cd0:	f000 f992 	bl	8011ff8 <HAL_Delay>
		ChangeLED(0);
 8011cd4:	2000      	movs	r0, #0
 8011cd6:	f7ff f8b3 	bl	8010e40 <ChangeLED>
		HAL_Delay(100);
 8011cda:	2064      	movs	r0, #100	; 0x64
 8011cdc:	f000 f98c 	bl	8011ff8 <HAL_Delay>
	for(int i=0; i < 5; i++)
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	60fb      	str	r3, [r7, #12]
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	2b04      	cmp	r3, #4
 8011cea:	ddeb      	ble.n	8011cc4 <Signal+0x10>
	}
}
 8011cec:	bf00      	nop
 8011cee:	3710      	adds	r7, #16
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b086      	sub	sp, #24
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 8011cfc:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8011d4c <BatteryCheck+0x58>
 8011d00:	eddf 0a13 	vldr	s1, [pc, #76]	; 8011d50 <BatteryCheck+0x5c>
 8011d04:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f7ff fa67 	bl	80111dc <ADCToBatteryVoltage>
 8011d0e:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 8011d12:	2103      	movs	r1, #3
 8011d14:	2002      	movs	r0, #2
 8011d16:	f7ff fa8b 	bl	8011230 <IntegerPower>
 8011d1a:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 8011d1c:	6938      	ldr	r0, [r7, #16]
 8011d1e:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8011d54 <BatteryCheck+0x60>
 8011d22:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8011d58 <BatteryCheck+0x64>
 8011d26:	ed97 0a05 	vldr	s0, [r7, #20]
 8011d2a:	f7ff fa9e 	bl	801126a <GetBatteryLevel>
 8011d2e:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 8011d30:	68f9      	ldr	r1, [r7, #12]
 8011d32:	480a      	ldr	r0, [pc, #40]	; (8011d5c <BatteryCheck+0x68>)
 8011d34:	f006 fe92 	bl	8018a5c <iprintf>
	Signal( battery_level );
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	b25b      	sxtb	r3, r3
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7ff ffb9 	bl	8011cb4 <Signal>
}
 8011d42:	bf00      	nop
 8011d44:	3718      	adds	r7, #24
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop
 8011d4c:	45800000 	.word	0x45800000
 8011d50:	40533333 	.word	0x40533333
 8011d54:	41066666 	.word	0x41066666
 8011d58:	40e66666 	.word	0x40e66666
 8011d5c:	0801c6a4 	.word	0x0801c6a4

08011d60 <PhotoSwitch>:

//ここ書いたら大事な処理を書き始められる
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。
void PhotoSwitch()
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2);
 8011d64:	2202      	movs	r2, #2
 8011d66:	490c      	ldr	r1, [pc, #48]	; (8011d98 <PhotoSwitch+0x38>)
 8011d68:	480c      	ldr	r0, [pc, #48]	; (8011d9c <PhotoSwitch+0x3c>)
 8011d6a:	f000 f9ab 	bl	80120c4 <HAL_ADC_Start_DMA>
	//tim8のduty比を下げて電流消費を削減
	HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1);
 8011d6e:	2100      	movs	r1, #0
 8011d70:	480b      	ldr	r0, [pc, #44]	; (8011da0 <PhotoSwitch+0x40>)
 8011d72:	f004 f9c4 	bl	80160fe <HAL_TIMEx_OCN_Start_IT>

	while(adc2[1] < 200)
 8011d76:	bf00      	nop
 8011d78:	4b07      	ldr	r3, [pc, #28]	; (8011d98 <PhotoSwitch+0x38>)
 8011d7a:	685b      	ldr	r3, [r3, #4]
 8011d7c:	2bc7      	cmp	r3, #199	; 0xc7
 8011d7e:	d9fb      	bls.n	8011d78 <PhotoSwitch+0x18>
	{

	}
	HAL_ADC_Stop_DMA(&hadc2);
 8011d80:	4806      	ldr	r0, [pc, #24]	; (8011d9c <PhotoSwitch+0x3c>)
 8011d82:	f000 fa91 	bl	80122a8 <HAL_ADC_Stop_DMA>
	HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1);
 8011d86:	2100      	movs	r1, #0
 8011d88:	4805      	ldr	r0, [pc, #20]	; (8011da0 <PhotoSwitch+0x40>)
 8011d8a:	f004 fa0d 	bl	80161a8 <HAL_TIMEx_OCN_Stop_IT>
	Signal( 7 );
 8011d8e:	2007      	movs	r0, #7
 8011d90:	f7ff ff90 	bl	8011cb4 <Signal>
}
 8011d94:	bf00      	nop
 8011d96:	bd80      	pop	{r7, pc}
 8011d98:	200002c8 	.word	0x200002c8
 8011d9c:	20000df8 	.word	0x20000df8
 8011da0:	20000d78 	.word	0x20000d78

08011da4 <ModeSelect>:

void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b084      	sub	sp, #16
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	4603      	mov	r3, r0
 8011dac:	603a      	str	r2, [r7, #0]
 8011dae:	71fb      	strb	r3, [r7, #7]
 8011db0:	460b      	mov	r3, r1
 8011db2:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ

	//エンコーダ開始。初期値セット込み
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 8011db4:	2100      	movs	r1, #0
 8011db6:	483d      	ldr	r0, [pc, #244]	; (8011eac <ModeSelect+0x108>)
 8011db8:	f003 fb06 	bl	80153c8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 8011dbc:	2104      	movs	r1, #4
 8011dbe:	483b      	ldr	r0, [pc, #236]	; (8011eac <ModeSelect+0x108>)
 8011dc0:	f003 fb02 	bl	80153c8 <HAL_TIM_Encoder_Start>
	//while中で選択
	*pMode=min;
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	79fa      	ldrb	r2, [r7, #7]
 8011dc8:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	TIM3->CNT = INITIAL_PULSE;
 8011dca:	4b39      	ldr	r3, [pc, #228]	; (8011eb0 <ModeSelect+0x10c>)
 8011dcc:	f247 522f 	movw	r2, #29999	; 0x752f
 8011dd0:	625a      	str	r2, [r3, #36]	; 0x24
	gpio_callback_count = 0;
 8011dd2:	4b38      	ldr	r3, [pc, #224]	; (8011eb4 <ModeSelect+0x110>)
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	601a      	str	r2, [r3, #0]
	int ENC3_LEFT;
	while(gpio_callback_count == 0/**/) //前向きの
 8011dd8:	e055      	b.n	8011e86 <ModeSelect+0xe2>
	{
		//printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 8011dda:	4b35      	ldr	r3, [pc, #212]	; (8011eb0 <ModeSelect+0x10c>)
 8011ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dde:	60fb      	str	r3, [r7, #12]

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	ee07 3a90 	vmov	s15, r3
 8011de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011dea:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011eb8 <ModeSelect+0x114>
 8011dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011df6:	db1c      	blt.n	8011e32 <ModeSelect+0x8e>
		  {
		  	  *pMode += 1;
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	f993 3000 	ldrsb.w	r3, [r3]
 8011dfe:	b2db      	uxtb	r3, r3
 8011e00:	3301      	adds	r3, #1
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	b25a      	sxtb	r2, r3
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	f993 3000 	ldrsb.w	r3, [r3]
 8011e10:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	da02      	bge.n	8011e1e <ModeSelect+0x7a>
		  	  {
		  		  *pMode = min;
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	79fa      	ldrb	r2, [r7, #7]
 8011e1c:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	f993 3000 	ldrsb.w	r3, [r3]
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7ff f80b 	bl	8010e40 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 8011e2a:	4b21      	ldr	r3, [pc, #132]	; (8011eb0 <ModeSelect+0x10c>)
 8011e2c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011e30:	625a      	str	r2, [r3, #36]	; 0x24

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	ee07 3a90 	vmov	s15, r3
 8011e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e3c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8011ebc <ModeSelect+0x118>
 8011e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e48:	d900      	bls.n	8011e4c <ModeSelect+0xa8>
 8011e4a:	e01c      	b.n	8011e86 <ModeSelect+0xe2>
		  {
		  	  *pMode -= 1;
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	f993 3000 	ldrsb.w	r3, [r3]
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	3b01      	subs	r3, #1
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	b25a      	sxtb	r2, r3
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	f993 3000 	ldrsb.w	r3, [r3]
 8011e64:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	dd02      	ble.n	8011e72 <ModeSelect+0xce>
		  	  {
		  	  		  *pMode = max;
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	79ba      	ldrb	r2, [r7, #6]
 8011e70:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	f993 3000 	ldrsb.w	r3, [r3]
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7fe ffe1 	bl	8010e40 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 8011e7e:	4b0c      	ldr	r3, [pc, #48]	; (8011eb0 <ModeSelect+0x10c>)
 8011e80:	f247 522f 	movw	r2, #29999	; 0x752f
 8011e84:	625a      	str	r2, [r3, #36]	; 0x24
	while(gpio_callback_count == 0/**/) //前向きの
 8011e86:	4b0b      	ldr	r3, [pc, #44]	; (8011eb4 <ModeSelect+0x110>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d0a5      	beq.n	8011dda <ModeSelect+0x36>
		  }
	}
	gpio_callback_count = 0;
 8011e8e:	4b09      	ldr	r3, [pc, #36]	; (8011eb4 <ModeSelect+0x110>)
 8011e90:	2200      	movs	r2, #0
 8011e92:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 8011e94:	2100      	movs	r1, #0
 8011e96:	4805      	ldr	r0, [pc, #20]	; (8011eac <ModeSelect+0x108>)
 8011e98:	f003 facd 	bl	8015436 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 8011e9c:	2104      	movs	r1, #4
 8011e9e:	4803      	ldr	r0, [pc, #12]	; (8011eac <ModeSelect+0x108>)
 8011ea0:	f003 fac9 	bl	8015436 <HAL_TIM_Encoder_Stop>
}
 8011ea4:	bf00      	nop
 8011ea6:	3710      	adds	r7, #16
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	20000e40 	.word	0x20000e40
 8011eb0:	40000400 	.word	0x40000400
 8011eb4:	200004d0 	.word	0x200004d0
 8011eb8:	47352f00 	.word	0x47352f00
 8011ebc:	4654bc00 	.word	0x4654bc00

08011ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8011ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011ef8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011ec4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011ec6:	e003      	b.n	8011ed0 <LoopCopyDataInit>

08011ec8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011ec8:	4b0c      	ldr	r3, [pc, #48]	; (8011efc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011eca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011ecc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011ece:	3104      	adds	r1, #4

08011ed0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011ed0:	480b      	ldr	r0, [pc, #44]	; (8011f00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011ed2:	4b0c      	ldr	r3, [pc, #48]	; (8011f04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011ed4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011ed6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011ed8:	d3f6      	bcc.n	8011ec8 <CopyDataInit>
  ldr  r2, =_sbss
 8011eda:	4a0b      	ldr	r2, [pc, #44]	; (8011f08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011edc:	e002      	b.n	8011ee4 <LoopFillZerobss>

08011ede <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011ede:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011ee0:	f842 3b04 	str.w	r3, [r2], #4

08011ee4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011ee4:	4b09      	ldr	r3, [pc, #36]	; (8011f0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011ee6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011ee8:	d3f9      	bcc.n	8011ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011eea:	f7fe fa31 	bl	8010350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011eee:	f005 fa23 	bl	8017338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011ef2:	f7fd f8c3 	bl	800f07c <main>
  bx  lr    
 8011ef6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8011ef8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8011efc:	0801ca20 	.word	0x0801ca20
  ldr  r0, =_sdata
 8011f00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8011f04:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8011f08:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8011f0c:	20001088 	.word	0x20001088

08011f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011f10:	e7fe      	b.n	8011f10 <ADC_IRQHandler>
	...

08011f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011f18:	4b0e      	ldr	r3, [pc, #56]	; (8011f54 <HAL_Init+0x40>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	4a0d      	ldr	r2, [pc, #52]	; (8011f54 <HAL_Init+0x40>)
 8011f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8011f24:	4b0b      	ldr	r3, [pc, #44]	; (8011f54 <HAL_Init+0x40>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	4a0a      	ldr	r2, [pc, #40]	; (8011f54 <HAL_Init+0x40>)
 8011f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011f30:	4b08      	ldr	r3, [pc, #32]	; (8011f54 <HAL_Init+0x40>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	4a07      	ldr	r2, [pc, #28]	; (8011f54 <HAL_Init+0x40>)
 8011f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011f3c:	2003      	movs	r0, #3
 8011f3e:	f000 fd8b 	bl	8012a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011f42:	2000      	movs	r0, #0
 8011f44:	f000 f808 	bl	8011f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011f48:	f7fd fe66 	bl	800fc18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011f4c:	2300      	movs	r3, #0
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	40023c00 	.word	0x40023c00

08011f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011f60:	4b12      	ldr	r3, [pc, #72]	; (8011fac <HAL_InitTick+0x54>)
 8011f62:	681a      	ldr	r2, [r3, #0]
 8011f64:	4b12      	ldr	r3, [pc, #72]	; (8011fb0 <HAL_InitTick+0x58>)
 8011f66:	781b      	ldrb	r3, [r3, #0]
 8011f68:	4619      	mov	r1, r3
 8011f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f76:	4618      	mov	r0, r3
 8011f78:	f000 fda3 	bl	8012ac2 <HAL_SYSTICK_Config>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d001      	beq.n	8011f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8011f82:	2301      	movs	r3, #1
 8011f84:	e00e      	b.n	8011fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2b0f      	cmp	r3, #15
 8011f8a:	d80a      	bhi.n	8011fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	6879      	ldr	r1, [r7, #4]
 8011f90:	f04f 30ff 	mov.w	r0, #4294967295
 8011f94:	f000 fd6b 	bl	8012a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8011f98:	4a06      	ldr	r2, [pc, #24]	; (8011fb4 <HAL_InitTick+0x5c>)
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	e000      	b.n	8011fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8011fa2:	2301      	movs	r3, #1
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3708      	adds	r7, #8
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}
 8011fac:	20000020 	.word	0x20000020
 8011fb0:	20000028 	.word	0x20000028
 8011fb4:	20000024 	.word	0x20000024

08011fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011fb8:	b480      	push	{r7}
 8011fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011fbc:	4b06      	ldr	r3, [pc, #24]	; (8011fd8 <HAL_IncTick+0x20>)
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	461a      	mov	r2, r3
 8011fc2:	4b06      	ldr	r3, [pc, #24]	; (8011fdc <HAL_IncTick+0x24>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	4a04      	ldr	r2, [pc, #16]	; (8011fdc <HAL_IncTick+0x24>)
 8011fca:	6013      	str	r3, [r2, #0]
}
 8011fcc:	bf00      	nop
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr
 8011fd6:	bf00      	nop
 8011fd8:	20000028 	.word	0x20000028
 8011fdc:	20001060 	.word	0x20001060

08011fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8011fe4:	4b03      	ldr	r3, [pc, #12]	; (8011ff4 <HAL_GetTick+0x14>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	46bd      	mov	sp, r7
 8011fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff0:	4770      	bx	lr
 8011ff2:	bf00      	nop
 8011ff4:	20001060 	.word	0x20001060

08011ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b084      	sub	sp, #16
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012000:	f7ff ffee 	bl	8011fe0 <HAL_GetTick>
 8012004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012010:	d005      	beq.n	801201e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8012012:	4b09      	ldr	r3, [pc, #36]	; (8012038 <HAL_Delay+0x40>)
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	461a      	mov	r2, r3
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	4413      	add	r3, r2
 801201c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801201e:	bf00      	nop
 8012020:	f7ff ffde 	bl	8011fe0 <HAL_GetTick>
 8012024:	4602      	mov	r2, r0
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	1ad3      	subs	r3, r2, r3
 801202a:	68fa      	ldr	r2, [r7, #12]
 801202c:	429a      	cmp	r2, r3
 801202e:	d8f7      	bhi.n	8012020 <HAL_Delay+0x28>
  {
  }
}
 8012030:	bf00      	nop
 8012032:	3710      	adds	r7, #16
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}
 8012038:	20000028 	.word	0x20000028

0801203c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b084      	sub	sp, #16
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012044:	2300      	movs	r3, #0
 8012046:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d101      	bne.n	8012052 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801204e:	2301      	movs	r3, #1
 8012050:	e033      	b.n	80120ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012056:	2b00      	cmp	r3, #0
 8012058:	d109      	bne.n	801206e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801205a:	6878      	ldr	r0, [r7, #4]
 801205c:	f7fd fe04 	bl	800fc68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2200      	movs	r2, #0
 8012064:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2200      	movs	r2, #0
 801206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012072:	f003 0310 	and.w	r3, r3, #16
 8012076:	2b00      	cmp	r3, #0
 8012078:	d118      	bne.n	80120ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801207e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8012082:	f023 0302 	bic.w	r3, r3, #2
 8012086:	f043 0202 	orr.w	r2, r3, #2
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801208e:	6878      	ldr	r0, [r7, #4]
 8012090:	f000 fa94 	bl	80125bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2200      	movs	r2, #0
 8012098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801209e:	f023 0303 	bic.w	r3, r3, #3
 80120a2:	f043 0201 	orr.w	r2, r3, #1
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	641a      	str	r2, [r3, #64]	; 0x40
 80120aa:	e001      	b.n	80120b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80120ac:	2301      	movs	r3, #1
 80120ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2200      	movs	r2, #0
 80120b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80120b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3710      	adds	r7, #16
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
	...

080120c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b086      	sub	sp, #24
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80120d0:	2300      	movs	r3, #0
 80120d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80120da:	2b01      	cmp	r3, #1
 80120dc:	d101      	bne.n	80120e2 <HAL_ADC_Start_DMA+0x1e>
 80120de:	2302      	movs	r3, #2
 80120e0:	e0cc      	b.n	801227c <HAL_ADC_Start_DMA+0x1b8>
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	2201      	movs	r2, #1
 80120e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	689b      	ldr	r3, [r3, #8]
 80120f0:	f003 0301 	and.w	r3, r3, #1
 80120f4:	2b01      	cmp	r3, #1
 80120f6:	d018      	beq.n	801212a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	689a      	ldr	r2, [r3, #8]
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	f042 0201 	orr.w	r2, r2, #1
 8012106:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8012108:	4b5e      	ldr	r3, [pc, #376]	; (8012284 <HAL_ADC_Start_DMA+0x1c0>)
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	4a5e      	ldr	r2, [pc, #376]	; (8012288 <HAL_ADC_Start_DMA+0x1c4>)
 801210e:	fba2 2303 	umull	r2, r3, r2, r3
 8012112:	0c9a      	lsrs	r2, r3, #18
 8012114:	4613      	mov	r3, r2
 8012116:	005b      	lsls	r3, r3, #1
 8012118:	4413      	add	r3, r2
 801211a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801211c:	e002      	b.n	8012124 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	3b01      	subs	r3, #1
 8012122:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8012124:	693b      	ldr	r3, [r7, #16]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d1f9      	bne.n	801211e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	689b      	ldr	r3, [r3, #8]
 8012130:	f003 0301 	and.w	r3, r3, #1
 8012134:	2b01      	cmp	r3, #1
 8012136:	f040 80a0 	bne.w	801227a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801213e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8012142:	f023 0301 	bic.w	r3, r3, #1
 8012146:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	685b      	ldr	r3, [r3, #4]
 8012154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012158:	2b00      	cmp	r3, #0
 801215a:	d007      	beq.n	801216c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012160:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8012164:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012178:	d106      	bne.n	8012188 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801217e:	f023 0206 	bic.w	r2, r3, #6
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	645a      	str	r2, [r3, #68]	; 0x44
 8012186:	e002      	b.n	801218e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	2200      	movs	r2, #0
 801218c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	2200      	movs	r2, #0
 8012192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8012196:	4b3d      	ldr	r3, [pc, #244]	; (801228c <HAL_ADC_Start_DMA+0x1c8>)
 8012198:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801219e:	4a3c      	ldr	r2, [pc, #240]	; (8012290 <HAL_ADC_Start_DMA+0x1cc>)
 80121a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121a6:	4a3b      	ldr	r2, [pc, #236]	; (8012294 <HAL_ADC_Start_DMA+0x1d0>)
 80121a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121ae:	4a3a      	ldr	r2, [pc, #232]	; (8012298 <HAL_ADC_Start_DMA+0x1d4>)
 80121b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80121ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	685a      	ldr	r2, [r3, #4]
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80121ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	689a      	ldr	r2, [r3, #8]
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80121da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	334c      	adds	r3, #76	; 0x4c
 80121e6:	4619      	mov	r1, r3
 80121e8:	68ba      	ldr	r2, [r7, #8]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	f000 fd24 	bl	8012c38 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80121f0:	697b      	ldr	r3, [r7, #20]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	f003 031f 	and.w	r3, r3, #31
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d12a      	bne.n	8012252 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	4a26      	ldr	r2, [pc, #152]	; (801229c <HAL_ADC_Start_DMA+0x1d8>)
 8012202:	4293      	cmp	r3, r2
 8012204:	d015      	beq.n	8012232 <HAL_ADC_Start_DMA+0x16e>
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	4a25      	ldr	r2, [pc, #148]	; (80122a0 <HAL_ADC_Start_DMA+0x1dc>)
 801220c:	4293      	cmp	r3, r2
 801220e:	d105      	bne.n	801221c <HAL_ADC_Start_DMA+0x158>
 8012210:	4b1e      	ldr	r3, [pc, #120]	; (801228c <HAL_ADC_Start_DMA+0x1c8>)
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	f003 031f 	and.w	r3, r3, #31
 8012218:	2b00      	cmp	r3, #0
 801221a:	d00a      	beq.n	8012232 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	4a20      	ldr	r2, [pc, #128]	; (80122a4 <HAL_ADC_Start_DMA+0x1e0>)
 8012222:	4293      	cmp	r3, r2
 8012224:	d129      	bne.n	801227a <HAL_ADC_Start_DMA+0x1b6>
 8012226:	4b19      	ldr	r3, [pc, #100]	; (801228c <HAL_ADC_Start_DMA+0x1c8>)
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	f003 031f 	and.w	r3, r3, #31
 801222e:	2b0f      	cmp	r3, #15
 8012230:	d823      	bhi.n	801227a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	689b      	ldr	r3, [r3, #8]
 8012238:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801223c:	2b00      	cmp	r3, #0
 801223e:	d11c      	bne.n	801227a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	689a      	ldr	r2, [r3, #8]
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801224e:	609a      	str	r2, [r3, #8]
 8012250:	e013      	b.n	801227a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	4a11      	ldr	r2, [pc, #68]	; (801229c <HAL_ADC_Start_DMA+0x1d8>)
 8012258:	4293      	cmp	r3, r2
 801225a:	d10e      	bne.n	801227a <HAL_ADC_Start_DMA+0x1b6>
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	689b      	ldr	r3, [r3, #8]
 8012262:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012266:	2b00      	cmp	r3, #0
 8012268:	d107      	bne.n	801227a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	689a      	ldr	r2, [r3, #8]
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8012278:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 801227a:	2300      	movs	r3, #0
}
 801227c:	4618      	mov	r0, r3
 801227e:	3718      	adds	r7, #24
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}
 8012284:	20000020 	.word	0x20000020
 8012288:	431bde83 	.word	0x431bde83
 801228c:	40012300 	.word	0x40012300
 8012290:	080127b5 	.word	0x080127b5
 8012294:	0801286f 	.word	0x0801286f
 8012298:	0801288b 	.word	0x0801288b
 801229c:	40012000 	.word	0x40012000
 80122a0:	40012100 	.word	0x40012100
 80122a4:	40012200 	.word	0x40012200

080122a8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b084      	sub	sp, #16
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80122b0:	2300      	movs	r3, #0
 80122b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80122ba:	2b01      	cmp	r3, #1
 80122bc:	d101      	bne.n	80122c2 <HAL_ADC_Stop_DMA+0x1a>
 80122be:	2302      	movs	r3, #2
 80122c0:	e038      	b.n	8012334 <HAL_ADC_Stop_DMA+0x8c>
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	2201      	movs	r2, #1
 80122c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	689a      	ldr	r2, [r3, #8]
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	f022 0201 	bic.w	r2, r2, #1
 80122d8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	689b      	ldr	r3, [r3, #8]
 80122e0:	f003 0301 	and.w	r3, r3, #1
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d120      	bne.n	801232a <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	689a      	ldr	r2, [r3, #8]
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80122f6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122fc:	4618      	mov	r0, r3
 80122fe:	f000 fcf3 	bl	8012ce8 <HAL_DMA_Abort>
 8012302:	4603      	mov	r3, r0
 8012304:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	685a      	ldr	r2, [r3, #4]
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8012314:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801231a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801231e:	f023 0301 	bic.w	r3, r3, #1
 8012322:	f043 0201 	orr.w	r2, r3, #1
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2200      	movs	r2, #0
 801232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8012332:	7bfb      	ldrb	r3, [r7, #15]
}
 8012334:	4618      	mov	r0, r3
 8012336:	3710      	adds	r7, #16
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801233c:	b480      	push	{r7}
 801233e:	b083      	sub	sp, #12
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8012344:	bf00      	nop
 8012346:	370c      	adds	r7, #12
 8012348:	46bd      	mov	sp, r7
 801234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234e:	4770      	bx	lr

08012350 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8012350:	b480      	push	{r7}
 8012352:	b083      	sub	sp, #12
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8012358:	bf00      	nop
 801235a:	370c      	adds	r7, #12
 801235c:	46bd      	mov	sp, r7
 801235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012362:	4770      	bx	lr

08012364 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8012364:	b480      	push	{r7}
 8012366:	b083      	sub	sp, #12
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 801236c:	bf00      	nop
 801236e:	370c      	adds	r7, #12
 8012370:	46bd      	mov	sp, r7
 8012372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012376:	4770      	bx	lr

08012378 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8012378:	b480      	push	{r7}
 801237a:	b085      	sub	sp, #20
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8012382:	2300      	movs	r3, #0
 8012384:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801238c:	2b01      	cmp	r3, #1
 801238e:	d101      	bne.n	8012394 <HAL_ADC_ConfigChannel+0x1c>
 8012390:	2302      	movs	r3, #2
 8012392:	e105      	b.n	80125a0 <HAL_ADC_ConfigChannel+0x228>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2201      	movs	r2, #1
 8012398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	2b09      	cmp	r3, #9
 80123a2:	d925      	bls.n	80123f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	68d9      	ldr	r1, [r3, #12]
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	461a      	mov	r2, r3
 80123b2:	4613      	mov	r3, r2
 80123b4:	005b      	lsls	r3, r3, #1
 80123b6:	4413      	add	r3, r2
 80123b8:	3b1e      	subs	r3, #30
 80123ba:	2207      	movs	r2, #7
 80123bc:	fa02 f303 	lsl.w	r3, r2, r3
 80123c0:	43da      	mvns	r2, r3
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	400a      	ands	r2, r1
 80123c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	68d9      	ldr	r1, [r3, #12]
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	689a      	ldr	r2, [r3, #8]
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	b29b      	uxth	r3, r3
 80123da:	4618      	mov	r0, r3
 80123dc:	4603      	mov	r3, r0
 80123de:	005b      	lsls	r3, r3, #1
 80123e0:	4403      	add	r3, r0
 80123e2:	3b1e      	subs	r3, #30
 80123e4:	409a      	lsls	r2, r3
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	430a      	orrs	r2, r1
 80123ec:	60da      	str	r2, [r3, #12]
 80123ee:	e022      	b.n	8012436 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	6919      	ldr	r1, [r3, #16]
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	461a      	mov	r2, r3
 80123fe:	4613      	mov	r3, r2
 8012400:	005b      	lsls	r3, r3, #1
 8012402:	4413      	add	r3, r2
 8012404:	2207      	movs	r2, #7
 8012406:	fa02 f303 	lsl.w	r3, r2, r3
 801240a:	43da      	mvns	r2, r3
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	400a      	ands	r2, r1
 8012412:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	6919      	ldr	r1, [r3, #16]
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	689a      	ldr	r2, [r3, #8]
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	b29b      	uxth	r3, r3
 8012424:	4618      	mov	r0, r3
 8012426:	4603      	mov	r3, r0
 8012428:	005b      	lsls	r3, r3, #1
 801242a:	4403      	add	r3, r0
 801242c:	409a      	lsls	r2, r3
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	430a      	orrs	r2, r1
 8012434:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8012436:	683b      	ldr	r3, [r7, #0]
 8012438:	685b      	ldr	r3, [r3, #4]
 801243a:	2b06      	cmp	r3, #6
 801243c:	d824      	bhi.n	8012488 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	685a      	ldr	r2, [r3, #4]
 8012448:	4613      	mov	r3, r2
 801244a:	009b      	lsls	r3, r3, #2
 801244c:	4413      	add	r3, r2
 801244e:	3b05      	subs	r3, #5
 8012450:	221f      	movs	r2, #31
 8012452:	fa02 f303 	lsl.w	r3, r2, r3
 8012456:	43da      	mvns	r2, r3
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	400a      	ands	r2, r1
 801245e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	b29b      	uxth	r3, r3
 801246c:	4618      	mov	r0, r3
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	685a      	ldr	r2, [r3, #4]
 8012472:	4613      	mov	r3, r2
 8012474:	009b      	lsls	r3, r3, #2
 8012476:	4413      	add	r3, r2
 8012478:	3b05      	subs	r3, #5
 801247a:	fa00 f203 	lsl.w	r2, r0, r3
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	430a      	orrs	r2, r1
 8012484:	635a      	str	r2, [r3, #52]	; 0x34
 8012486:	e04c      	b.n	8012522 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	685b      	ldr	r3, [r3, #4]
 801248c:	2b0c      	cmp	r3, #12
 801248e:	d824      	bhi.n	80124da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	685a      	ldr	r2, [r3, #4]
 801249a:	4613      	mov	r3, r2
 801249c:	009b      	lsls	r3, r3, #2
 801249e:	4413      	add	r3, r2
 80124a0:	3b23      	subs	r3, #35	; 0x23
 80124a2:	221f      	movs	r2, #31
 80124a4:	fa02 f303 	lsl.w	r3, r2, r3
 80124a8:	43da      	mvns	r2, r3
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	400a      	ands	r2, r1
 80124b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	b29b      	uxth	r3, r3
 80124be:	4618      	mov	r0, r3
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	685a      	ldr	r2, [r3, #4]
 80124c4:	4613      	mov	r3, r2
 80124c6:	009b      	lsls	r3, r3, #2
 80124c8:	4413      	add	r3, r2
 80124ca:	3b23      	subs	r3, #35	; 0x23
 80124cc:	fa00 f203 	lsl.w	r2, r0, r3
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	430a      	orrs	r2, r1
 80124d6:	631a      	str	r2, [r3, #48]	; 0x30
 80124d8:	e023      	b.n	8012522 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	685a      	ldr	r2, [r3, #4]
 80124e4:	4613      	mov	r3, r2
 80124e6:	009b      	lsls	r3, r3, #2
 80124e8:	4413      	add	r3, r2
 80124ea:	3b41      	subs	r3, #65	; 0x41
 80124ec:	221f      	movs	r2, #31
 80124ee:	fa02 f303 	lsl.w	r3, r2, r3
 80124f2:	43da      	mvns	r2, r3
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	400a      	ands	r2, r1
 80124fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	b29b      	uxth	r3, r3
 8012508:	4618      	mov	r0, r3
 801250a:	683b      	ldr	r3, [r7, #0]
 801250c:	685a      	ldr	r2, [r3, #4]
 801250e:	4613      	mov	r3, r2
 8012510:	009b      	lsls	r3, r3, #2
 8012512:	4413      	add	r3, r2
 8012514:	3b41      	subs	r3, #65	; 0x41
 8012516:	fa00 f203 	lsl.w	r2, r0, r3
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	430a      	orrs	r2, r1
 8012520:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8012522:	4b22      	ldr	r3, [pc, #136]	; (80125ac <HAL_ADC_ConfigChannel+0x234>)
 8012524:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4a21      	ldr	r2, [pc, #132]	; (80125b0 <HAL_ADC_ConfigChannel+0x238>)
 801252c:	4293      	cmp	r3, r2
 801252e:	d109      	bne.n	8012544 <HAL_ADC_ConfigChannel+0x1cc>
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	2b12      	cmp	r3, #18
 8012536:	d105      	bne.n	8012544 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	685b      	ldr	r3, [r3, #4]
 801253c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	4a19      	ldr	r2, [pc, #100]	; (80125b0 <HAL_ADC_ConfigChannel+0x238>)
 801254a:	4293      	cmp	r3, r2
 801254c:	d123      	bne.n	8012596 <HAL_ADC_ConfigChannel+0x21e>
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	2b10      	cmp	r3, #16
 8012554:	d003      	beq.n	801255e <HAL_ADC_ConfigChannel+0x1e6>
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	2b11      	cmp	r3, #17
 801255c:	d11b      	bne.n	8012596 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	685b      	ldr	r3, [r3, #4]
 8012562:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	2b10      	cmp	r3, #16
 8012570:	d111      	bne.n	8012596 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8012572:	4b10      	ldr	r3, [pc, #64]	; (80125b4 <HAL_ADC_ConfigChannel+0x23c>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	4a10      	ldr	r2, [pc, #64]	; (80125b8 <HAL_ADC_ConfigChannel+0x240>)
 8012578:	fba2 2303 	umull	r2, r3, r2, r3
 801257c:	0c9a      	lsrs	r2, r3, #18
 801257e:	4613      	mov	r3, r2
 8012580:	009b      	lsls	r3, r3, #2
 8012582:	4413      	add	r3, r2
 8012584:	005b      	lsls	r3, r3, #1
 8012586:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8012588:	e002      	b.n	8012590 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	3b01      	subs	r3, #1
 801258e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d1f9      	bne.n	801258a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2200      	movs	r2, #0
 801259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801259e:	2300      	movs	r3, #0
}
 80125a0:	4618      	mov	r0, r3
 80125a2:	3714      	adds	r7, #20
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr
 80125ac:	40012300 	.word	0x40012300
 80125b0:	40012000 	.word	0x40012000
 80125b4:	20000020 	.word	0x20000020
 80125b8:	431bde83 	.word	0x431bde83

080125bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80125bc:	b480      	push	{r7}
 80125be:	b085      	sub	sp, #20
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80125c4:	4b79      	ldr	r3, [pc, #484]	; (80127ac <ADC_Init+0x1f0>)
 80125c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	685b      	ldr	r3, [r3, #4]
 80125cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	685a      	ldr	r2, [r3, #4]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	685b      	ldr	r3, [r3, #4]
 80125dc:	431a      	orrs	r2, r3
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	685a      	ldr	r2, [r3, #4]
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80125f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	6859      	ldr	r1, [r3, #4]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	691b      	ldr	r3, [r3, #16]
 80125fc:	021a      	lsls	r2, r3, #8
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	430a      	orrs	r2, r1
 8012604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	685a      	ldr	r2, [r3, #4]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8012614:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	6859      	ldr	r1, [r3, #4]
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	689a      	ldr	r2, [r3, #8]
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	430a      	orrs	r2, r1
 8012626:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	689a      	ldr	r2, [r3, #8]
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	6899      	ldr	r1, [r3, #8]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	68da      	ldr	r2, [r3, #12]
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	430a      	orrs	r2, r1
 8012648:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801264e:	4a58      	ldr	r2, [pc, #352]	; (80127b0 <ADC_Init+0x1f4>)
 8012650:	4293      	cmp	r3, r2
 8012652:	d022      	beq.n	801269a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	689a      	ldr	r2, [r3, #8]
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8012662:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	6899      	ldr	r1, [r3, #8]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	430a      	orrs	r2, r1
 8012674:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	689a      	ldr	r2, [r3, #8]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8012684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	6899      	ldr	r1, [r3, #8]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	430a      	orrs	r2, r1
 8012696:	609a      	str	r2, [r3, #8]
 8012698:	e00f      	b.n	80126ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	689a      	ldr	r2, [r3, #8]
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80126a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	689a      	ldr	r2, [r3, #8]
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80126b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	689a      	ldr	r2, [r3, #8]
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	f022 0202 	bic.w	r2, r2, #2
 80126c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	6899      	ldr	r1, [r3, #8]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	7e1b      	ldrb	r3, [r3, #24]
 80126d4:	005a      	lsls	r2, r3, #1
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	430a      	orrs	r2, r1
 80126dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d01b      	beq.n	8012720 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	685a      	ldr	r2, [r3, #4]
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80126f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	685a      	ldr	r2, [r3, #4]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8012706:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	6859      	ldr	r1, [r3, #4]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012712:	3b01      	subs	r3, #1
 8012714:	035a      	lsls	r2, r3, #13
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	430a      	orrs	r2, r1
 801271c:	605a      	str	r2, [r3, #4]
 801271e:	e007      	b.n	8012730 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	685a      	ldr	r2, [r3, #4]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801272e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801273e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	69db      	ldr	r3, [r3, #28]
 801274a:	3b01      	subs	r3, #1
 801274c:	051a      	lsls	r2, r3, #20
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	430a      	orrs	r2, r1
 8012754:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	689a      	ldr	r2, [r3, #8]
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	6899      	ldr	r1, [r3, #8]
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012772:	025a      	lsls	r2, r3, #9
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	430a      	orrs	r2, r1
 801277a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	689a      	ldr	r2, [r3, #8]
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801278a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	6899      	ldr	r1, [r3, #8]
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	695b      	ldr	r3, [r3, #20]
 8012796:	029a      	lsls	r2, r3, #10
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	430a      	orrs	r2, r1
 801279e:	609a      	str	r2, [r3, #8]
}
 80127a0:	bf00      	nop
 80127a2:	3714      	adds	r7, #20
 80127a4:	46bd      	mov	sp, r7
 80127a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127aa:	4770      	bx	lr
 80127ac:	40012300 	.word	0x40012300
 80127b0:	0f000001 	.word	0x0f000001

080127b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d13c      	bne.n	8012848 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	689b      	ldr	r3, [r3, #8]
 80127e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d12b      	bne.n	8012840 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d127      	bne.n	8012840 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d006      	beq.n	801280c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	689b      	ldr	r3, [r3, #8]
 8012804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8012808:	2b00      	cmp	r3, #0
 801280a:	d119      	bne.n	8012840 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	685a      	ldr	r2, [r3, #4]
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	f022 0220 	bic.w	r2, r2, #32
 801281a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801282c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012830:	2b00      	cmp	r3, #0
 8012832:	d105      	bne.n	8012840 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012838:	f043 0201 	orr.w	r2, r3, #1
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8012840:	68f8      	ldr	r0, [r7, #12]
 8012842:	f7ff fd7b 	bl	801233c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8012846:	e00e      	b.n	8012866 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801284c:	f003 0310 	and.w	r3, r3, #16
 8012850:	2b00      	cmp	r3, #0
 8012852:	d003      	beq.n	801285c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8012854:	68f8      	ldr	r0, [r7, #12]
 8012856:	f7ff fd85 	bl	8012364 <HAL_ADC_ErrorCallback>
}
 801285a:	e004      	b.n	8012866 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	4798      	blx	r3
}
 8012866:	bf00      	nop
 8012868:	3710      	adds	r7, #16
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}

0801286e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801286e:	b580      	push	{r7, lr}
 8012870:	b084      	sub	sp, #16
 8012872:	af00      	add	r7, sp, #0
 8012874:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801287a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801287c:	68f8      	ldr	r0, [r7, #12]
 801287e:	f7ff fd67 	bl	8012350 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8012882:	bf00      	nop
 8012884:	3710      	adds	r7, #16
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}

0801288a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801288a:	b580      	push	{r7, lr}
 801288c:	b084      	sub	sp, #16
 801288e:	af00      	add	r7, sp, #0
 8012890:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012896:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	2240      	movs	r2, #64	; 0x40
 801289c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128a2:	f043 0204 	orr.w	r2, r3, #4
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80128aa:	68f8      	ldr	r0, [r7, #12]
 80128ac:	f7ff fd5a 	bl	8012364 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80128b0:	bf00      	nop
 80128b2:	3710      	adds	r7, #16
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}

080128b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80128b8:	b480      	push	{r7}
 80128ba:	b085      	sub	sp, #20
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f003 0307 	and.w	r3, r3, #7
 80128c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80128c8:	4b0c      	ldr	r3, [pc, #48]	; (80128fc <__NVIC_SetPriorityGrouping+0x44>)
 80128ca:	68db      	ldr	r3, [r3, #12]
 80128cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80128ce:	68ba      	ldr	r2, [r7, #8]
 80128d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80128d4:	4013      	ands	r3, r2
 80128d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80128e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80128e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80128e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80128ea:	4a04      	ldr	r2, [pc, #16]	; (80128fc <__NVIC_SetPriorityGrouping+0x44>)
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	60d3      	str	r3, [r2, #12]
}
 80128f0:	bf00      	nop
 80128f2:	3714      	adds	r7, #20
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr
 80128fc:	e000ed00 	.word	0xe000ed00

08012900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012900:	b480      	push	{r7}
 8012902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012904:	4b04      	ldr	r3, [pc, #16]	; (8012918 <__NVIC_GetPriorityGrouping+0x18>)
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	0a1b      	lsrs	r3, r3, #8
 801290a:	f003 0307 	and.w	r3, r3, #7
}
 801290e:	4618      	mov	r0, r3
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr
 8012918:	e000ed00 	.word	0xe000ed00

0801291c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
 8012922:	4603      	mov	r3, r0
 8012924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801292a:	2b00      	cmp	r3, #0
 801292c:	db0b      	blt.n	8012946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801292e:	79fb      	ldrb	r3, [r7, #7]
 8012930:	f003 021f 	and.w	r2, r3, #31
 8012934:	4907      	ldr	r1, [pc, #28]	; (8012954 <__NVIC_EnableIRQ+0x38>)
 8012936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801293a:	095b      	lsrs	r3, r3, #5
 801293c:	2001      	movs	r0, #1
 801293e:	fa00 f202 	lsl.w	r2, r0, r2
 8012942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8012946:	bf00      	nop
 8012948:	370c      	adds	r7, #12
 801294a:	46bd      	mov	sp, r7
 801294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012950:	4770      	bx	lr
 8012952:	bf00      	nop
 8012954:	e000e100 	.word	0xe000e100

08012958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012958:	b480      	push	{r7}
 801295a:	b083      	sub	sp, #12
 801295c:	af00      	add	r7, sp, #0
 801295e:	4603      	mov	r3, r0
 8012960:	6039      	str	r1, [r7, #0]
 8012962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012968:	2b00      	cmp	r3, #0
 801296a:	db0a      	blt.n	8012982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	b2da      	uxtb	r2, r3
 8012970:	490c      	ldr	r1, [pc, #48]	; (80129a4 <__NVIC_SetPriority+0x4c>)
 8012972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012976:	0112      	lsls	r2, r2, #4
 8012978:	b2d2      	uxtb	r2, r2
 801297a:	440b      	add	r3, r1
 801297c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012980:	e00a      	b.n	8012998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	b2da      	uxtb	r2, r3
 8012986:	4908      	ldr	r1, [pc, #32]	; (80129a8 <__NVIC_SetPriority+0x50>)
 8012988:	79fb      	ldrb	r3, [r7, #7]
 801298a:	f003 030f 	and.w	r3, r3, #15
 801298e:	3b04      	subs	r3, #4
 8012990:	0112      	lsls	r2, r2, #4
 8012992:	b2d2      	uxtb	r2, r2
 8012994:	440b      	add	r3, r1
 8012996:	761a      	strb	r2, [r3, #24]
}
 8012998:	bf00      	nop
 801299a:	370c      	adds	r7, #12
 801299c:	46bd      	mov	sp, r7
 801299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a2:	4770      	bx	lr
 80129a4:	e000e100 	.word	0xe000e100
 80129a8:	e000ed00 	.word	0xe000ed00

080129ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80129ac:	b480      	push	{r7}
 80129ae:	b089      	sub	sp, #36	; 0x24
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	60f8      	str	r0, [r7, #12]
 80129b4:	60b9      	str	r1, [r7, #8]
 80129b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	f003 0307 	and.w	r3, r3, #7
 80129be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80129c0:	69fb      	ldr	r3, [r7, #28]
 80129c2:	f1c3 0307 	rsb	r3, r3, #7
 80129c6:	2b04      	cmp	r3, #4
 80129c8:	bf28      	it	cs
 80129ca:	2304      	movcs	r3, #4
 80129cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80129ce:	69fb      	ldr	r3, [r7, #28]
 80129d0:	3304      	adds	r3, #4
 80129d2:	2b06      	cmp	r3, #6
 80129d4:	d902      	bls.n	80129dc <NVIC_EncodePriority+0x30>
 80129d6:	69fb      	ldr	r3, [r7, #28]
 80129d8:	3b03      	subs	r3, #3
 80129da:	e000      	b.n	80129de <NVIC_EncodePriority+0x32>
 80129dc:	2300      	movs	r3, #0
 80129de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80129e0:	f04f 32ff 	mov.w	r2, #4294967295
 80129e4:	69bb      	ldr	r3, [r7, #24]
 80129e6:	fa02 f303 	lsl.w	r3, r2, r3
 80129ea:	43da      	mvns	r2, r3
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	401a      	ands	r2, r3
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80129f4:	f04f 31ff 	mov.w	r1, #4294967295
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	fa01 f303 	lsl.w	r3, r1, r3
 80129fe:	43d9      	mvns	r1, r3
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012a04:	4313      	orrs	r3, r2
         );
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3724      	adds	r7, #36	; 0x24
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a10:	4770      	bx	lr
	...

08012a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	3b01      	subs	r3, #1
 8012a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012a24:	d301      	bcc.n	8012a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012a26:	2301      	movs	r3, #1
 8012a28:	e00f      	b.n	8012a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012a2a:	4a0a      	ldr	r2, [pc, #40]	; (8012a54 <SysTick_Config+0x40>)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8012a32:	210f      	movs	r1, #15
 8012a34:	f04f 30ff 	mov.w	r0, #4294967295
 8012a38:	f7ff ff8e 	bl	8012958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012a3c:	4b05      	ldr	r3, [pc, #20]	; (8012a54 <SysTick_Config+0x40>)
 8012a3e:	2200      	movs	r2, #0
 8012a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012a42:	4b04      	ldr	r3, [pc, #16]	; (8012a54 <SysTick_Config+0x40>)
 8012a44:	2207      	movs	r2, #7
 8012a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012a48:	2300      	movs	r3, #0
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	3708      	adds	r7, #8
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}
 8012a52:	bf00      	nop
 8012a54:	e000e010 	.word	0xe000e010

08012a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f7ff ff29 	bl	80128b8 <__NVIC_SetPriorityGrouping>
}
 8012a66:	bf00      	nop
 8012a68:	3708      	adds	r7, #8
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}

08012a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012a6e:	b580      	push	{r7, lr}
 8012a70:	b086      	sub	sp, #24
 8012a72:	af00      	add	r7, sp, #0
 8012a74:	4603      	mov	r3, r0
 8012a76:	60b9      	str	r1, [r7, #8]
 8012a78:	607a      	str	r2, [r7, #4]
 8012a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8012a80:	f7ff ff3e 	bl	8012900 <__NVIC_GetPriorityGrouping>
 8012a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012a86:	687a      	ldr	r2, [r7, #4]
 8012a88:	68b9      	ldr	r1, [r7, #8]
 8012a8a:	6978      	ldr	r0, [r7, #20]
 8012a8c:	f7ff ff8e 	bl	80129ac <NVIC_EncodePriority>
 8012a90:	4602      	mov	r2, r0
 8012a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a96:	4611      	mov	r1, r2
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7ff ff5d 	bl	8012958 <__NVIC_SetPriority>
}
 8012a9e:	bf00      	nop
 8012aa0:	3718      	adds	r7, #24
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}

08012aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012aa6:	b580      	push	{r7, lr}
 8012aa8:	b082      	sub	sp, #8
 8012aaa:	af00      	add	r7, sp, #0
 8012aac:	4603      	mov	r3, r0
 8012aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f7ff ff31 	bl	801291c <__NVIC_EnableIRQ>
}
 8012aba:	bf00      	nop
 8012abc:	3708      	adds	r7, #8
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}

08012ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012ac2:	b580      	push	{r7, lr}
 8012ac4:	b082      	sub	sp, #8
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f7ff ffa2 	bl	8012a14 <SysTick_Config>
 8012ad0:	4603      	mov	r3, r0
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3708      	adds	r7, #8
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
	...

08012adc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b086      	sub	sp, #24
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8012ae8:	f7ff fa7a 	bl	8011fe0 <HAL_GetTick>
 8012aec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d101      	bne.n	8012af8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8012af4:	2301      	movs	r3, #1
 8012af6:	e099      	b.n	8012c2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2200      	movs	r2, #0
 8012afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2202      	movs	r2, #2
 8012b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	681a      	ldr	r2, [r3, #0]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	f022 0201 	bic.w	r2, r2, #1
 8012b16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012b18:	e00f      	b.n	8012b3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8012b1a:	f7ff fa61 	bl	8011fe0 <HAL_GetTick>
 8012b1e:	4602      	mov	r2, r0
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	1ad3      	subs	r3, r2, r3
 8012b24:	2b05      	cmp	r3, #5
 8012b26:	d908      	bls.n	8012b3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2220      	movs	r2, #32
 8012b2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2203      	movs	r2, #3
 8012b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8012b36:	2303      	movs	r3, #3
 8012b38:	e078      	b.n	8012c2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	f003 0301 	and.w	r3, r3, #1
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d1e8      	bne.n	8012b1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8012b50:	697a      	ldr	r2, [r7, #20]
 8012b52:	4b38      	ldr	r3, [pc, #224]	; (8012c34 <HAL_DMA_Init+0x158>)
 8012b54:	4013      	ands	r3, r2
 8012b56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	685a      	ldr	r2, [r3, #4]
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	689b      	ldr	r3, [r3, #8]
 8012b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	691b      	ldr	r3, [r3, #16]
 8012b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	699b      	ldr	r3, [r3, #24]
 8012b78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6a1b      	ldr	r3, [r3, #32]
 8012b84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012b86:	697a      	ldr	r2, [r7, #20]
 8012b88:	4313      	orrs	r3, r2
 8012b8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b90:	2b04      	cmp	r3, #4
 8012b92:	d107      	bne.n	8012ba4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b9c:	4313      	orrs	r3, r2
 8012b9e:	697a      	ldr	r2, [r7, #20]
 8012ba0:	4313      	orrs	r3, r2
 8012ba2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	697a      	ldr	r2, [r7, #20]
 8012baa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	695b      	ldr	r3, [r3, #20]
 8012bb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	f023 0307 	bic.w	r3, r3, #7
 8012bba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bc0:	697a      	ldr	r2, [r7, #20]
 8012bc2:	4313      	orrs	r3, r2
 8012bc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bca:	2b04      	cmp	r3, #4
 8012bcc:	d117      	bne.n	8012bfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bd2:	697a      	ldr	r2, [r7, #20]
 8012bd4:	4313      	orrs	r3, r2
 8012bd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d00e      	beq.n	8012bfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	f000 fadf 	bl	80131a4 <DMA_CheckFifoParam>
 8012be6:	4603      	mov	r3, r0
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d008      	beq.n	8012bfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2240      	movs	r2, #64	; 0x40
 8012bf0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8012bfa:	2301      	movs	r3, #1
 8012bfc:	e016      	b.n	8012c2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	697a      	ldr	r2, [r7, #20]
 8012c04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f000 fa96 	bl	8013138 <DMA_CalcBaseAndBitshift>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012c14:	223f      	movs	r2, #63	; 0x3f
 8012c16:	409a      	lsls	r2, r3
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2200      	movs	r2, #0
 8012c20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2201      	movs	r2, #1
 8012c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8012c2a:	2300      	movs	r3, #0
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3718      	adds	r7, #24
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}
 8012c34:	f010803f 	.word	0xf010803f

08012c38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b086      	sub	sp, #24
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	60f8      	str	r0, [r7, #12]
 8012c40:	60b9      	str	r1, [r7, #8]
 8012c42:	607a      	str	r2, [r7, #4]
 8012c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012c46:	2300      	movs	r3, #0
 8012c48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012c56:	2b01      	cmp	r3, #1
 8012c58:	d101      	bne.n	8012c5e <HAL_DMA_Start_IT+0x26>
 8012c5a:	2302      	movs	r3, #2
 8012c5c:	e040      	b.n	8012ce0 <HAL_DMA_Start_IT+0xa8>
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	2201      	movs	r2, #1
 8012c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012c6c:	b2db      	uxtb	r3, r3
 8012c6e:	2b01      	cmp	r3, #1
 8012c70:	d12f      	bne.n	8012cd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	2202      	movs	r2, #2
 8012c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	687a      	ldr	r2, [r7, #4]
 8012c84:	68b9      	ldr	r1, [r7, #8]
 8012c86:	68f8      	ldr	r0, [r7, #12]
 8012c88:	f000 fa28 	bl	80130dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012c90:	223f      	movs	r2, #63	; 0x3f
 8012c92:	409a      	lsls	r2, r3
 8012c94:	693b      	ldr	r3, [r7, #16]
 8012c96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	681a      	ldr	r2, [r3, #0]
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	f042 0216 	orr.w	r2, r2, #22
 8012ca6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d007      	beq.n	8012cc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	f042 0208 	orr.w	r2, r2, #8
 8012cbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	681a      	ldr	r2, [r3, #0]
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	f042 0201 	orr.w	r2, r2, #1
 8012cce:	601a      	str	r2, [r3, #0]
 8012cd0:	e005      	b.n	8012cde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8012cda:	2302      	movs	r3, #2
 8012cdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8012cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3718      	adds	r7, #24
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}

08012ce8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b084      	sub	sp, #16
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cf4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8012cf6:	f7ff f973 	bl	8011fe0 <HAL_GetTick>
 8012cfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012d02:	b2db      	uxtb	r3, r3
 8012d04:	2b02      	cmp	r3, #2
 8012d06:	d008      	beq.n	8012d1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2280      	movs	r2, #128	; 0x80
 8012d0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	2200      	movs	r2, #0
 8012d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8012d16:	2301      	movs	r3, #1
 8012d18:	e052      	b.n	8012dc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	681a      	ldr	r2, [r3, #0]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	f022 0216 	bic.w	r2, r2, #22
 8012d28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	695a      	ldr	r2, [r3, #20]
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012d38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d103      	bne.n	8012d4a <HAL_DMA_Abort+0x62>
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d007      	beq.n	8012d5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	681a      	ldr	r2, [r3, #0]
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	f022 0208 	bic.w	r2, r2, #8
 8012d58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	681a      	ldr	r2, [r3, #0]
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	f022 0201 	bic.w	r2, r2, #1
 8012d68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012d6a:	e013      	b.n	8012d94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8012d6c:	f7ff f938 	bl	8011fe0 <HAL_GetTick>
 8012d70:	4602      	mov	r2, r0
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	1ad3      	subs	r3, r2, r3
 8012d76:	2b05      	cmp	r3, #5
 8012d78:	d90c      	bls.n	8012d94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2220      	movs	r2, #32
 8012d7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2200      	movs	r2, #0
 8012d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2203      	movs	r2, #3
 8012d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8012d90:	2303      	movs	r3, #3
 8012d92:	e015      	b.n	8012dc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	f003 0301 	and.w	r3, r3, #1
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d1e4      	bne.n	8012d6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012da6:	223f      	movs	r2, #63	; 0x3f
 8012da8:	409a      	lsls	r2, r3
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2200      	movs	r2, #0
 8012db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	2201      	movs	r2, #1
 8012dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8012dbe:	2300      	movs	r3, #0
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3710      	adds	r7, #16
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}

08012dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b086      	sub	sp, #24
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8012dd4:	4b92      	ldr	r3, [pc, #584]	; (8013020 <HAL_DMA_IRQHandler+0x258>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	4a92      	ldr	r2, [pc, #584]	; (8013024 <HAL_DMA_IRQHandler+0x25c>)
 8012dda:	fba2 2303 	umull	r2, r3, r2, r3
 8012dde:	0a9b      	lsrs	r3, r3, #10
 8012de0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012de6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012df2:	2208      	movs	r2, #8
 8012df4:	409a      	lsls	r2, r3
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	4013      	ands	r3, r2
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d01a      	beq.n	8012e34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	f003 0304 	and.w	r3, r3, #4
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d013      	beq.n	8012e34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	681a      	ldr	r2, [r3, #0]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	f022 0204 	bic.w	r2, r2, #4
 8012e1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e20:	2208      	movs	r2, #8
 8012e22:	409a      	lsls	r2, r3
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e2c:	f043 0201 	orr.w	r2, r3, #1
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e38:	2201      	movs	r2, #1
 8012e3a:	409a      	lsls	r2, r3
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	4013      	ands	r3, r2
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d012      	beq.n	8012e6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	695b      	ldr	r3, [r3, #20]
 8012e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d00b      	beq.n	8012e6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e56:	2201      	movs	r2, #1
 8012e58:	409a      	lsls	r2, r3
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e62:	f043 0202 	orr.w	r2, r3, #2
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e6e:	2204      	movs	r2, #4
 8012e70:	409a      	lsls	r2, r3
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	4013      	ands	r3, r2
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d012      	beq.n	8012ea0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	f003 0302 	and.w	r3, r3, #2
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d00b      	beq.n	8012ea0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e8c:	2204      	movs	r2, #4
 8012e8e:	409a      	lsls	r2, r3
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e98:	f043 0204 	orr.w	r2, r3, #4
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012ea4:	2210      	movs	r2, #16
 8012ea6:	409a      	lsls	r2, r3
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	4013      	ands	r3, r2
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d043      	beq.n	8012f38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	f003 0308 	and.w	r3, r3, #8
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d03c      	beq.n	8012f38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012ec2:	2210      	movs	r2, #16
 8012ec4:	409a      	lsls	r2, r3
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d018      	beq.n	8012f0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d108      	bne.n	8012ef8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d024      	beq.n	8012f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	4798      	blx	r3
 8012ef6:	e01f      	b.n	8012f38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d01b      	beq.n	8012f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	4798      	blx	r3
 8012f08:	e016      	b.n	8012f38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d107      	bne.n	8012f28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	681a      	ldr	r2, [r3, #0]
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	f022 0208 	bic.w	r2, r2, #8
 8012f26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d003      	beq.n	8012f38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f3c:	2220      	movs	r2, #32
 8012f3e:	409a      	lsls	r2, r3
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	4013      	ands	r3, r2
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	f000 808e 	beq.w	8013066 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	f003 0310 	and.w	r3, r3, #16
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	f000 8086 	beq.w	8013066 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f5e:	2220      	movs	r2, #32
 8012f60:	409a      	lsls	r2, r3
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012f6c:	b2db      	uxtb	r3, r3
 8012f6e:	2b05      	cmp	r3, #5
 8012f70:	d136      	bne.n	8012fe0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	681a      	ldr	r2, [r3, #0]
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	f022 0216 	bic.w	r2, r2, #22
 8012f80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	695a      	ldr	r2, [r3, #20]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012f90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d103      	bne.n	8012fa2 <HAL_DMA_IRQHandler+0x1da>
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d007      	beq.n	8012fb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	681a      	ldr	r2, [r3, #0]
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	f022 0208 	bic.w	r2, r2, #8
 8012fb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012fb6:	223f      	movs	r2, #63	; 0x3f
 8012fb8:	409a      	lsls	r2, r3
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2201      	movs	r2, #1
 8012fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d07d      	beq.n	80130d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012fda:	6878      	ldr	r0, [r7, #4]
 8012fdc:	4798      	blx	r3
        }
        return;
 8012fde:	e078      	b.n	80130d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d01c      	beq.n	8013028 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d108      	bne.n	801300e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013000:	2b00      	cmp	r3, #0
 8013002:	d030      	beq.n	8013066 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	4798      	blx	r3
 801300c:	e02b      	b.n	8013066 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013012:	2b00      	cmp	r3, #0
 8013014:	d027      	beq.n	8013066 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801301a:	6878      	ldr	r0, [r7, #4]
 801301c:	4798      	blx	r3
 801301e:	e022      	b.n	8013066 <HAL_DMA_IRQHandler+0x29e>
 8013020:	20000020 	.word	0x20000020
 8013024:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013032:	2b00      	cmp	r3, #0
 8013034:	d10f      	bne.n	8013056 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	f022 0210 	bic.w	r2, r2, #16
 8013044:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2200      	movs	r2, #0
 801304a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	2201      	movs	r2, #1
 8013052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801305a:	2b00      	cmp	r3, #0
 801305c:	d003      	beq.n	8013066 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801306a:	2b00      	cmp	r3, #0
 801306c:	d032      	beq.n	80130d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013072:	f003 0301 	and.w	r3, r3, #1
 8013076:	2b00      	cmp	r3, #0
 8013078:	d022      	beq.n	80130c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2205      	movs	r2, #5
 801307e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	681a      	ldr	r2, [r3, #0]
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	f022 0201 	bic.w	r2, r2, #1
 8013090:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	3301      	adds	r3, #1
 8013096:	60bb      	str	r3, [r7, #8]
 8013098:	697a      	ldr	r2, [r7, #20]
 801309a:	429a      	cmp	r2, r3
 801309c:	d307      	bcc.n	80130ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	f003 0301 	and.w	r3, r3, #1
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d1f2      	bne.n	8013092 <HAL_DMA_IRQHandler+0x2ca>
 80130ac:	e000      	b.n	80130b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80130ae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2200      	movs	r2, #0
 80130b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2201      	movs	r2, #1
 80130bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d005      	beq.n	80130d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	4798      	blx	r3
 80130d0:	e000      	b.n	80130d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80130d2:	bf00      	nop
    }
  }
}
 80130d4:	3718      	adds	r7, #24
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}
 80130da:	bf00      	nop

080130dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80130dc:	b480      	push	{r7}
 80130de:	b085      	sub	sp, #20
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	60f8      	str	r0, [r7, #12]
 80130e4:	60b9      	str	r1, [r7, #8]
 80130e6:	607a      	str	r2, [r7, #4]
 80130e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	681a      	ldr	r2, [r3, #0]
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80130f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	683a      	ldr	r2, [r7, #0]
 8013100:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	689b      	ldr	r3, [r3, #8]
 8013106:	2b40      	cmp	r3, #64	; 0x40
 8013108:	d108      	bne.n	801311c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	687a      	ldr	r2, [r7, #4]
 8013110:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	68ba      	ldr	r2, [r7, #8]
 8013118:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801311a:	e007      	b.n	801312c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	68ba      	ldr	r2, [r7, #8]
 8013122:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	687a      	ldr	r2, [r7, #4]
 801312a:	60da      	str	r2, [r3, #12]
}
 801312c:	bf00      	nop
 801312e:	3714      	adds	r7, #20
 8013130:	46bd      	mov	sp, r7
 8013132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013136:	4770      	bx	lr

08013138 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8013138:	b480      	push	{r7}
 801313a:	b085      	sub	sp, #20
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	b2db      	uxtb	r3, r3
 8013146:	3b10      	subs	r3, #16
 8013148:	4a14      	ldr	r2, [pc, #80]	; (801319c <DMA_CalcBaseAndBitshift+0x64>)
 801314a:	fba2 2303 	umull	r2, r3, r2, r3
 801314e:	091b      	lsrs	r3, r3, #4
 8013150:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8013152:	4a13      	ldr	r2, [pc, #76]	; (80131a0 <DMA_CalcBaseAndBitshift+0x68>)
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	4413      	add	r3, r2
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	461a      	mov	r2, r3
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	2b03      	cmp	r3, #3
 8013164:	d909      	bls.n	801317a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801316e:	f023 0303 	bic.w	r3, r3, #3
 8013172:	1d1a      	adds	r2, r3, #4
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	659a      	str	r2, [r3, #88]	; 0x58
 8013178:	e007      	b.n	801318a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8013182:	f023 0303 	bic.w	r3, r3, #3
 8013186:	687a      	ldr	r2, [r7, #4]
 8013188:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801318e:	4618      	mov	r0, r3
 8013190:	3714      	adds	r7, #20
 8013192:	46bd      	mov	sp, r7
 8013194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013198:	4770      	bx	lr
 801319a:	bf00      	nop
 801319c:	aaaaaaab 	.word	0xaaaaaaab
 80131a0:	0801c6d8 	.word	0x0801c6d8

080131a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80131a4:	b480      	push	{r7}
 80131a6:	b085      	sub	sp, #20
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80131ac:	2300      	movs	r3, #0
 80131ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	699b      	ldr	r3, [r3, #24]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d11f      	bne.n	80131fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	2b03      	cmp	r3, #3
 80131c2:	d855      	bhi.n	8013270 <DMA_CheckFifoParam+0xcc>
 80131c4:	a201      	add	r2, pc, #4	; (adr r2, 80131cc <DMA_CheckFifoParam+0x28>)
 80131c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131ca:	bf00      	nop
 80131cc:	080131dd 	.word	0x080131dd
 80131d0:	080131ef 	.word	0x080131ef
 80131d4:	080131dd 	.word	0x080131dd
 80131d8:	08013271 	.word	0x08013271
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d045      	beq.n	8013274 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80131e8:	2301      	movs	r3, #1
 80131ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80131ec:	e042      	b.n	8013274 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80131f6:	d13f      	bne.n	8013278 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80131f8:	2301      	movs	r3, #1
 80131fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80131fc:	e03c      	b.n	8013278 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	699b      	ldr	r3, [r3, #24]
 8013202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013206:	d121      	bne.n	801324c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	2b03      	cmp	r3, #3
 801320c:	d836      	bhi.n	801327c <DMA_CheckFifoParam+0xd8>
 801320e:	a201      	add	r2, pc, #4	; (adr r2, 8013214 <DMA_CheckFifoParam+0x70>)
 8013210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013214:	08013225 	.word	0x08013225
 8013218:	0801322b 	.word	0x0801322b
 801321c:	08013225 	.word	0x08013225
 8013220:	0801323d 	.word	0x0801323d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8013224:	2301      	movs	r3, #1
 8013226:	73fb      	strb	r3, [r7, #15]
      break;
 8013228:	e02f      	b.n	801328a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801322e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013232:	2b00      	cmp	r3, #0
 8013234:	d024      	beq.n	8013280 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8013236:	2301      	movs	r3, #1
 8013238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801323a:	e021      	b.n	8013280 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013240:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8013244:	d11e      	bne.n	8013284 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8013246:	2301      	movs	r3, #1
 8013248:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801324a:	e01b      	b.n	8013284 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	2b02      	cmp	r3, #2
 8013250:	d902      	bls.n	8013258 <DMA_CheckFifoParam+0xb4>
 8013252:	2b03      	cmp	r3, #3
 8013254:	d003      	beq.n	801325e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8013256:	e018      	b.n	801328a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8013258:	2301      	movs	r3, #1
 801325a:	73fb      	strb	r3, [r7, #15]
      break;
 801325c:	e015      	b.n	801328a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013266:	2b00      	cmp	r3, #0
 8013268:	d00e      	beq.n	8013288 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 801326a:	2301      	movs	r3, #1
 801326c:	73fb      	strb	r3, [r7, #15]
      break;
 801326e:	e00b      	b.n	8013288 <DMA_CheckFifoParam+0xe4>
      break;
 8013270:	bf00      	nop
 8013272:	e00a      	b.n	801328a <DMA_CheckFifoParam+0xe6>
      break;
 8013274:	bf00      	nop
 8013276:	e008      	b.n	801328a <DMA_CheckFifoParam+0xe6>
      break;
 8013278:	bf00      	nop
 801327a:	e006      	b.n	801328a <DMA_CheckFifoParam+0xe6>
      break;
 801327c:	bf00      	nop
 801327e:	e004      	b.n	801328a <DMA_CheckFifoParam+0xe6>
      break;
 8013280:	bf00      	nop
 8013282:	e002      	b.n	801328a <DMA_CheckFifoParam+0xe6>
      break;   
 8013284:	bf00      	nop
 8013286:	e000      	b.n	801328a <DMA_CheckFifoParam+0xe6>
      break;
 8013288:	bf00      	nop
    }
  } 
  
  return status; 
 801328a:	7bfb      	ldrb	r3, [r7, #15]
}
 801328c:	4618      	mov	r0, r3
 801328e:	3714      	adds	r7, #20
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr

08013298 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801329e:	2300      	movs	r3, #0
 80132a0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80132a2:	4b0b      	ldr	r3, [pc, #44]	; (80132d0 <HAL_FLASH_Unlock+0x38>)
 80132a4:	691b      	ldr	r3, [r3, #16]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	da0b      	bge.n	80132c2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80132aa:	4b09      	ldr	r3, [pc, #36]	; (80132d0 <HAL_FLASH_Unlock+0x38>)
 80132ac:	4a09      	ldr	r2, [pc, #36]	; (80132d4 <HAL_FLASH_Unlock+0x3c>)
 80132ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80132b0:	4b07      	ldr	r3, [pc, #28]	; (80132d0 <HAL_FLASH_Unlock+0x38>)
 80132b2:	4a09      	ldr	r2, [pc, #36]	; (80132d8 <HAL_FLASH_Unlock+0x40>)
 80132b4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80132b6:	4b06      	ldr	r3, [pc, #24]	; (80132d0 <HAL_FLASH_Unlock+0x38>)
 80132b8:	691b      	ldr	r3, [r3, #16]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	da01      	bge.n	80132c2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80132be:	2301      	movs	r3, #1
 80132c0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80132c2:	79fb      	ldrb	r3, [r7, #7]
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	370c      	adds	r7, #12
 80132c8:	46bd      	mov	sp, r7
 80132ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ce:	4770      	bx	lr
 80132d0:	40023c00 	.word	0x40023c00
 80132d4:	45670123 	.word	0x45670123
 80132d8:	cdef89ab 	.word	0xcdef89ab

080132dc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80132dc:	b480      	push	{r7}
 80132de:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80132e0:	4b05      	ldr	r3, [pc, #20]	; (80132f8 <HAL_FLASH_Lock+0x1c>)
 80132e2:	691b      	ldr	r3, [r3, #16]
 80132e4:	4a04      	ldr	r2, [pc, #16]	; (80132f8 <HAL_FLASH_Lock+0x1c>)
 80132e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80132ea:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80132ec:	2300      	movs	r3, #0
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	46bd      	mov	sp, r7
 80132f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f6:	4770      	bx	lr
 80132f8:	40023c00 	.word	0x40023c00

080132fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b084      	sub	sp, #16
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8013304:	2300      	movs	r3, #0
 8013306:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8013308:	4b1a      	ldr	r3, [pc, #104]	; (8013374 <FLASH_WaitForLastOperation+0x78>)
 801330a:	2200      	movs	r2, #0
 801330c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801330e:	f7fe fe67 	bl	8011fe0 <HAL_GetTick>
 8013312:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8013314:	e010      	b.n	8013338 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801331c:	d00c      	beq.n	8013338 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d007      	beq.n	8013334 <FLASH_WaitForLastOperation+0x38>
 8013324:	f7fe fe5c 	bl	8011fe0 <HAL_GetTick>
 8013328:	4602      	mov	r2, r0
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	1ad3      	subs	r3, r2, r3
 801332e:	687a      	ldr	r2, [r7, #4]
 8013330:	429a      	cmp	r2, r3
 8013332:	d201      	bcs.n	8013338 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8013334:	2303      	movs	r3, #3
 8013336:	e019      	b.n	801336c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8013338:	4b0f      	ldr	r3, [pc, #60]	; (8013378 <FLASH_WaitForLastOperation+0x7c>)
 801333a:	68db      	ldr	r3, [r3, #12]
 801333c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013340:	2b00      	cmp	r3, #0
 8013342:	d1e8      	bne.n	8013316 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8013344:	4b0c      	ldr	r3, [pc, #48]	; (8013378 <FLASH_WaitForLastOperation+0x7c>)
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	f003 0301 	and.w	r3, r3, #1
 801334c:	2b00      	cmp	r3, #0
 801334e:	d002      	beq.n	8013356 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8013350:	4b09      	ldr	r3, [pc, #36]	; (8013378 <FLASH_WaitForLastOperation+0x7c>)
 8013352:	2201      	movs	r2, #1
 8013354:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8013356:	4b08      	ldr	r3, [pc, #32]	; (8013378 <FLASH_WaitForLastOperation+0x7c>)
 8013358:	68db      	ldr	r3, [r3, #12]
 801335a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 801335e:	2b00      	cmp	r3, #0
 8013360:	d003      	beq.n	801336a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8013362:	f000 f80b 	bl	801337c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8013366:	2301      	movs	r3, #1
 8013368:	e000      	b.n	801336c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 801336a:	2300      	movs	r3, #0
  
}  
 801336c:	4618      	mov	r0, r3
 801336e:	3710      	adds	r7, #16
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	20001064 	.word	0x20001064
 8013378:	40023c00 	.word	0x40023c00

0801337c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 801337c:	b480      	push	{r7}
 801337e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8013380:	4b27      	ldr	r3, [pc, #156]	; (8013420 <FLASH_SetErrorCode+0xa4>)
 8013382:	68db      	ldr	r3, [r3, #12]
 8013384:	f003 0310 	and.w	r3, r3, #16
 8013388:	2b00      	cmp	r3, #0
 801338a:	d008      	beq.n	801339e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801338c:	4b25      	ldr	r3, [pc, #148]	; (8013424 <FLASH_SetErrorCode+0xa8>)
 801338e:	69db      	ldr	r3, [r3, #28]
 8013390:	f043 0310 	orr.w	r3, r3, #16
 8013394:	4a23      	ldr	r2, [pc, #140]	; (8013424 <FLASH_SetErrorCode+0xa8>)
 8013396:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8013398:	4b21      	ldr	r3, [pc, #132]	; (8013420 <FLASH_SetErrorCode+0xa4>)
 801339a:	2210      	movs	r2, #16
 801339c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 801339e:	4b20      	ldr	r3, [pc, #128]	; (8013420 <FLASH_SetErrorCode+0xa4>)
 80133a0:	68db      	ldr	r3, [r3, #12]
 80133a2:	f003 0320 	and.w	r3, r3, #32
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d008      	beq.n	80133bc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80133aa:	4b1e      	ldr	r3, [pc, #120]	; (8013424 <FLASH_SetErrorCode+0xa8>)
 80133ac:	69db      	ldr	r3, [r3, #28]
 80133ae:	f043 0308 	orr.w	r3, r3, #8
 80133b2:	4a1c      	ldr	r2, [pc, #112]	; (8013424 <FLASH_SetErrorCode+0xa8>)
 80133b4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80133b6:	4b1a      	ldr	r3, [pc, #104]	; (8013420 <FLASH_SetErrorCode+0xa4>)
 80133b8:	2220      	movs	r2, #32
 80133ba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80133bc:	4b18      	ldr	r3, [pc, #96]	; (8013420 <FLASH_SetErrorCode+0xa4>)
 80133be:	68db      	ldr	r3, [r3, #12]
 80133c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d008      	beq.n	80133da <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80133c8:	4b16      	ldr	r3, [pc, #88]	; (8013424 <FLASH_SetErrorCode+0xa8>)
 80133ca:	69db      	ldr	r3, [r3, #28]
 80133cc:	f043 0304 	orr.w	r3, r3, #4
 80133d0:	4a14      	ldr	r2, [pc, #80]	; (8013424 <FLASH_SetErrorCode+0xa8>)
 80133d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80133d4:	4b12      	ldr	r3, [pc, #72]	; (8013420 <FLASH_SetErrorCode+0xa4>)
 80133d6:	2240      	movs	r2, #64	; 0x40
 80133d8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80133da:	4b11      	ldr	r3, [pc, #68]	; (8013420 <FLASH_SetErrorCode+0xa4>)
 80133dc:	68db      	ldr	r3, [r3, #12]
 80133de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d008      	beq.n	80133f8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80133e6:	4b0f      	ldr	r3, [pc, #60]	; (8013424 <FLASH_SetErrorCode+0xa8>)
 80133e8:	69db      	ldr	r3, [r3, #28]
 80133ea:	f043 0302 	orr.w	r3, r3, #2
 80133ee:	4a0d      	ldr	r2, [pc, #52]	; (8013424 <FLASH_SetErrorCode+0xa8>)
 80133f0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80133f2:	4b0b      	ldr	r3, [pc, #44]	; (8013420 <FLASH_SetErrorCode+0xa4>)
 80133f4:	2280      	movs	r2, #128	; 0x80
 80133f6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80133f8:	4b09      	ldr	r3, [pc, #36]	; (8013420 <FLASH_SetErrorCode+0xa4>)
 80133fa:	68db      	ldr	r3, [r3, #12]
 80133fc:	f003 0302 	and.w	r3, r3, #2
 8013400:	2b00      	cmp	r3, #0
 8013402:	d008      	beq.n	8013416 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8013404:	4b07      	ldr	r3, [pc, #28]	; (8013424 <FLASH_SetErrorCode+0xa8>)
 8013406:	69db      	ldr	r3, [r3, #28]
 8013408:	f043 0320 	orr.w	r3, r3, #32
 801340c:	4a05      	ldr	r2, [pc, #20]	; (8013424 <FLASH_SetErrorCode+0xa8>)
 801340e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8013410:	4b03      	ldr	r3, [pc, #12]	; (8013420 <FLASH_SetErrorCode+0xa4>)
 8013412:	2202      	movs	r2, #2
 8013414:	60da      	str	r2, [r3, #12]
  }
}
 8013416:	bf00      	nop
 8013418:	46bd      	mov	sp, r7
 801341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341e:	4770      	bx	lr
 8013420:	40023c00 	.word	0x40023c00
 8013424:	20001064 	.word	0x20001064

08013428 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b084      	sub	sp, #16
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013432:	2301      	movs	r3, #1
 8013434:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8013436:	2300      	movs	r3, #0
 8013438:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801343a:	4b31      	ldr	r3, [pc, #196]	; (8013500 <HAL_FLASHEx_Erase+0xd8>)
 801343c:	7e1b      	ldrb	r3, [r3, #24]
 801343e:	2b01      	cmp	r3, #1
 8013440:	d101      	bne.n	8013446 <HAL_FLASHEx_Erase+0x1e>
 8013442:	2302      	movs	r3, #2
 8013444:	e058      	b.n	80134f8 <HAL_FLASHEx_Erase+0xd0>
 8013446:	4b2e      	ldr	r3, [pc, #184]	; (8013500 <HAL_FLASHEx_Erase+0xd8>)
 8013448:	2201      	movs	r2, #1
 801344a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801344c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013450:	f7ff ff54 	bl	80132fc <FLASH_WaitForLastOperation>
 8013454:	4603      	mov	r3, r0
 8013456:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8013458:	7bfb      	ldrb	r3, [r7, #15]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d148      	bne.n	80134f0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	f04f 32ff 	mov.w	r2, #4294967295
 8013464:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	2b01      	cmp	r3, #1
 801346c:	d115      	bne.n	801349a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	691b      	ldr	r3, [r3, #16]
 8013472:	b2da      	uxtb	r2, r3
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	685b      	ldr	r3, [r3, #4]
 8013478:	4619      	mov	r1, r3
 801347a:	4610      	mov	r0, r2
 801347c:	f000 f844 	bl	8013508 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013480:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013484:	f7ff ff3a 	bl	80132fc <FLASH_WaitForLastOperation>
 8013488:	4603      	mov	r3, r0
 801348a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 801348c:	4b1d      	ldr	r3, [pc, #116]	; (8013504 <HAL_FLASHEx_Erase+0xdc>)
 801348e:	691b      	ldr	r3, [r3, #16]
 8013490:	4a1c      	ldr	r2, [pc, #112]	; (8013504 <HAL_FLASHEx_Erase+0xdc>)
 8013492:	f023 0304 	bic.w	r3, r3, #4
 8013496:	6113      	str	r3, [r2, #16]
 8013498:	e028      	b.n	80134ec <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	689b      	ldr	r3, [r3, #8]
 801349e:	60bb      	str	r3, [r7, #8]
 80134a0:	e01c      	b.n	80134dc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	691b      	ldr	r3, [r3, #16]
 80134a6:	b2db      	uxtb	r3, r3
 80134a8:	4619      	mov	r1, r3
 80134aa:	68b8      	ldr	r0, [r7, #8]
 80134ac:	f000 f850 	bl	8013550 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80134b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80134b4:	f7ff ff22 	bl	80132fc <FLASH_WaitForLastOperation>
 80134b8:	4603      	mov	r3, r0
 80134ba:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80134bc:	4b11      	ldr	r3, [pc, #68]	; (8013504 <HAL_FLASHEx_Erase+0xdc>)
 80134be:	691b      	ldr	r3, [r3, #16]
 80134c0:	4a10      	ldr	r2, [pc, #64]	; (8013504 <HAL_FLASHEx_Erase+0xdc>)
 80134c2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80134c6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80134c8:	7bfb      	ldrb	r3, [r7, #15]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d003      	beq.n	80134d6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	68ba      	ldr	r2, [r7, #8]
 80134d2:	601a      	str	r2, [r3, #0]
          break;
 80134d4:	e00a      	b.n	80134ec <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	3301      	adds	r3, #1
 80134da:	60bb      	str	r3, [r7, #8]
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	68da      	ldr	r2, [r3, #12]
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	689b      	ldr	r3, [r3, #8]
 80134e4:	4413      	add	r3, r2
 80134e6:	68ba      	ldr	r2, [r7, #8]
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d3da      	bcc.n	80134a2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80134ec:	f000 f878 	bl	80135e0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80134f0:	4b03      	ldr	r3, [pc, #12]	; (8013500 <HAL_FLASHEx_Erase+0xd8>)
 80134f2:	2200      	movs	r2, #0
 80134f4:	761a      	strb	r2, [r3, #24]

  return status;
 80134f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80134f8:	4618      	mov	r0, r3
 80134fa:	3710      	adds	r7, #16
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}
 8013500:	20001064 	.word	0x20001064
 8013504:	40023c00 	.word	0x40023c00

08013508 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8013508:	b480      	push	{r7}
 801350a:	b083      	sub	sp, #12
 801350c:	af00      	add	r7, sp, #0
 801350e:	4603      	mov	r3, r0
 8013510:	6039      	str	r1, [r7, #0]
 8013512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013514:	4b0d      	ldr	r3, [pc, #52]	; (801354c <FLASH_MassErase+0x44>)
 8013516:	691b      	ldr	r3, [r3, #16]
 8013518:	4a0c      	ldr	r2, [pc, #48]	; (801354c <FLASH_MassErase+0x44>)
 801351a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801351e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8013520:	4b0a      	ldr	r3, [pc, #40]	; (801354c <FLASH_MassErase+0x44>)
 8013522:	691b      	ldr	r3, [r3, #16]
 8013524:	4a09      	ldr	r2, [pc, #36]	; (801354c <FLASH_MassErase+0x44>)
 8013526:	f043 0304 	orr.w	r3, r3, #4
 801352a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 801352c:	4b07      	ldr	r3, [pc, #28]	; (801354c <FLASH_MassErase+0x44>)
 801352e:	691a      	ldr	r2, [r3, #16]
 8013530:	79fb      	ldrb	r3, [r7, #7]
 8013532:	021b      	lsls	r3, r3, #8
 8013534:	4313      	orrs	r3, r2
 8013536:	4a05      	ldr	r2, [pc, #20]	; (801354c <FLASH_MassErase+0x44>)
 8013538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801353c:	6113      	str	r3, [r2, #16]
}
 801353e:	bf00      	nop
 8013540:	370c      	adds	r7, #12
 8013542:	46bd      	mov	sp, r7
 8013544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013548:	4770      	bx	lr
 801354a:	bf00      	nop
 801354c:	40023c00 	.word	0x40023c00

08013550 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8013550:	b480      	push	{r7}
 8013552:	b085      	sub	sp, #20
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
 8013558:	460b      	mov	r3, r1
 801355a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 801355c:	2300      	movs	r3, #0
 801355e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8013560:	78fb      	ldrb	r3, [r7, #3]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d102      	bne.n	801356c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8013566:	2300      	movs	r3, #0
 8013568:	60fb      	str	r3, [r7, #12]
 801356a:	e010      	b.n	801358e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 801356c:	78fb      	ldrb	r3, [r7, #3]
 801356e:	2b01      	cmp	r3, #1
 8013570:	d103      	bne.n	801357a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8013572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013576:	60fb      	str	r3, [r7, #12]
 8013578:	e009      	b.n	801358e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 801357a:	78fb      	ldrb	r3, [r7, #3]
 801357c:	2b02      	cmp	r3, #2
 801357e:	d103      	bne.n	8013588 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8013580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013584:	60fb      	str	r3, [r7, #12]
 8013586:	e002      	b.n	801358e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8013588:	f44f 7340 	mov.w	r3, #768	; 0x300
 801358c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801358e:	4b13      	ldr	r3, [pc, #76]	; (80135dc <FLASH_Erase_Sector+0x8c>)
 8013590:	691b      	ldr	r3, [r3, #16]
 8013592:	4a12      	ldr	r2, [pc, #72]	; (80135dc <FLASH_Erase_Sector+0x8c>)
 8013594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013598:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 801359a:	4b10      	ldr	r3, [pc, #64]	; (80135dc <FLASH_Erase_Sector+0x8c>)
 801359c:	691a      	ldr	r2, [r3, #16]
 801359e:	490f      	ldr	r1, [pc, #60]	; (80135dc <FLASH_Erase_Sector+0x8c>)
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	4313      	orrs	r3, r2
 80135a4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80135a6:	4b0d      	ldr	r3, [pc, #52]	; (80135dc <FLASH_Erase_Sector+0x8c>)
 80135a8:	691b      	ldr	r3, [r3, #16]
 80135aa:	4a0c      	ldr	r2, [pc, #48]	; (80135dc <FLASH_Erase_Sector+0x8c>)
 80135ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80135b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80135b2:	4b0a      	ldr	r3, [pc, #40]	; (80135dc <FLASH_Erase_Sector+0x8c>)
 80135b4:	691a      	ldr	r2, [r3, #16]
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	00db      	lsls	r3, r3, #3
 80135ba:	4313      	orrs	r3, r2
 80135bc:	4a07      	ldr	r2, [pc, #28]	; (80135dc <FLASH_Erase_Sector+0x8c>)
 80135be:	f043 0302 	orr.w	r3, r3, #2
 80135c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80135c4:	4b05      	ldr	r3, [pc, #20]	; (80135dc <FLASH_Erase_Sector+0x8c>)
 80135c6:	691b      	ldr	r3, [r3, #16]
 80135c8:	4a04      	ldr	r2, [pc, #16]	; (80135dc <FLASH_Erase_Sector+0x8c>)
 80135ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80135ce:	6113      	str	r3, [r2, #16]
}
 80135d0:	bf00      	nop
 80135d2:	3714      	adds	r7, #20
 80135d4:	46bd      	mov	sp, r7
 80135d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135da:	4770      	bx	lr
 80135dc:	40023c00 	.word	0x40023c00

080135e0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80135e0:	b480      	push	{r7}
 80135e2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80135e4:	4b20      	ldr	r3, [pc, #128]	; (8013668 <FLASH_FlushCaches+0x88>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d017      	beq.n	8013620 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80135f0:	4b1d      	ldr	r3, [pc, #116]	; (8013668 <FLASH_FlushCaches+0x88>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	4a1c      	ldr	r2, [pc, #112]	; (8013668 <FLASH_FlushCaches+0x88>)
 80135f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80135fa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80135fc:	4b1a      	ldr	r3, [pc, #104]	; (8013668 <FLASH_FlushCaches+0x88>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	4a19      	ldr	r2, [pc, #100]	; (8013668 <FLASH_FlushCaches+0x88>)
 8013602:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013606:	6013      	str	r3, [r2, #0]
 8013608:	4b17      	ldr	r3, [pc, #92]	; (8013668 <FLASH_FlushCaches+0x88>)
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	4a16      	ldr	r2, [pc, #88]	; (8013668 <FLASH_FlushCaches+0x88>)
 801360e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013612:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8013614:	4b14      	ldr	r3, [pc, #80]	; (8013668 <FLASH_FlushCaches+0x88>)
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	4a13      	ldr	r2, [pc, #76]	; (8013668 <FLASH_FlushCaches+0x88>)
 801361a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801361e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8013620:	4b11      	ldr	r3, [pc, #68]	; (8013668 <FLASH_FlushCaches+0x88>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013628:	2b00      	cmp	r3, #0
 801362a:	d017      	beq.n	801365c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 801362c:	4b0e      	ldr	r3, [pc, #56]	; (8013668 <FLASH_FlushCaches+0x88>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	4a0d      	ldr	r2, [pc, #52]	; (8013668 <FLASH_FlushCaches+0x88>)
 8013632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013636:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8013638:	4b0b      	ldr	r3, [pc, #44]	; (8013668 <FLASH_FlushCaches+0x88>)
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	4a0a      	ldr	r2, [pc, #40]	; (8013668 <FLASH_FlushCaches+0x88>)
 801363e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013642:	6013      	str	r3, [r2, #0]
 8013644:	4b08      	ldr	r3, [pc, #32]	; (8013668 <FLASH_FlushCaches+0x88>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	4a07      	ldr	r2, [pc, #28]	; (8013668 <FLASH_FlushCaches+0x88>)
 801364a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801364e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8013650:	4b05      	ldr	r3, [pc, #20]	; (8013668 <FLASH_FlushCaches+0x88>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	4a04      	ldr	r2, [pc, #16]	; (8013668 <FLASH_FlushCaches+0x88>)
 8013656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801365a:	6013      	str	r3, [r2, #0]
  }
}
 801365c:	bf00      	nop
 801365e:	46bd      	mov	sp, r7
 8013660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013664:	4770      	bx	lr
 8013666:	bf00      	nop
 8013668:	40023c00 	.word	0x40023c00

0801366c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801366c:	b480      	push	{r7}
 801366e:	b089      	sub	sp, #36	; 0x24
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8013676:	2300      	movs	r3, #0
 8013678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801367a:	2300      	movs	r3, #0
 801367c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801367e:	2300      	movs	r3, #0
 8013680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013682:	2300      	movs	r3, #0
 8013684:	61fb      	str	r3, [r7, #28]
 8013686:	e16b      	b.n	8013960 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8013688:	2201      	movs	r2, #1
 801368a:	69fb      	ldr	r3, [r7, #28]
 801368c:	fa02 f303 	lsl.w	r3, r2, r3
 8013690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	697a      	ldr	r2, [r7, #20]
 8013698:	4013      	ands	r3, r2
 801369a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801369c:	693a      	ldr	r2, [r7, #16]
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	f040 815a 	bne.w	801395a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	685b      	ldr	r3, [r3, #4]
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d00b      	beq.n	80136c6 <HAL_GPIO_Init+0x5a>
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	685b      	ldr	r3, [r3, #4]
 80136b2:	2b02      	cmp	r3, #2
 80136b4:	d007      	beq.n	80136c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80136ba:	2b11      	cmp	r3, #17
 80136bc:	d003      	beq.n	80136c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	2b12      	cmp	r3, #18
 80136c4:	d130      	bne.n	8013728 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	689b      	ldr	r3, [r3, #8]
 80136ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80136cc:	69fb      	ldr	r3, [r7, #28]
 80136ce:	005b      	lsls	r3, r3, #1
 80136d0:	2203      	movs	r2, #3
 80136d2:	fa02 f303 	lsl.w	r3, r2, r3
 80136d6:	43db      	mvns	r3, r3
 80136d8:	69ba      	ldr	r2, [r7, #24]
 80136da:	4013      	ands	r3, r2
 80136dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	68da      	ldr	r2, [r3, #12]
 80136e2:	69fb      	ldr	r3, [r7, #28]
 80136e4:	005b      	lsls	r3, r3, #1
 80136e6:	fa02 f303 	lsl.w	r3, r2, r3
 80136ea:	69ba      	ldr	r2, [r7, #24]
 80136ec:	4313      	orrs	r3, r2
 80136ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	69ba      	ldr	r2, [r7, #24]
 80136f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80136fc:	2201      	movs	r2, #1
 80136fe:	69fb      	ldr	r3, [r7, #28]
 8013700:	fa02 f303 	lsl.w	r3, r2, r3
 8013704:	43db      	mvns	r3, r3
 8013706:	69ba      	ldr	r2, [r7, #24]
 8013708:	4013      	ands	r3, r2
 801370a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	091b      	lsrs	r3, r3, #4
 8013712:	f003 0201 	and.w	r2, r3, #1
 8013716:	69fb      	ldr	r3, [r7, #28]
 8013718:	fa02 f303 	lsl.w	r3, r2, r3
 801371c:	69ba      	ldr	r2, [r7, #24]
 801371e:	4313      	orrs	r3, r2
 8013720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	69ba      	ldr	r2, [r7, #24]
 8013726:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	68db      	ldr	r3, [r3, #12]
 801372c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801372e:	69fb      	ldr	r3, [r7, #28]
 8013730:	005b      	lsls	r3, r3, #1
 8013732:	2203      	movs	r2, #3
 8013734:	fa02 f303 	lsl.w	r3, r2, r3
 8013738:	43db      	mvns	r3, r3
 801373a:	69ba      	ldr	r2, [r7, #24]
 801373c:	4013      	ands	r3, r2
 801373e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	689a      	ldr	r2, [r3, #8]
 8013744:	69fb      	ldr	r3, [r7, #28]
 8013746:	005b      	lsls	r3, r3, #1
 8013748:	fa02 f303 	lsl.w	r3, r2, r3
 801374c:	69ba      	ldr	r2, [r7, #24]
 801374e:	4313      	orrs	r3, r2
 8013750:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	69ba      	ldr	r2, [r7, #24]
 8013756:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	685b      	ldr	r3, [r3, #4]
 801375c:	2b02      	cmp	r3, #2
 801375e:	d003      	beq.n	8013768 <HAL_GPIO_Init+0xfc>
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	2b12      	cmp	r3, #18
 8013766:	d123      	bne.n	80137b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	08da      	lsrs	r2, r3, #3
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	3208      	adds	r2, #8
 8013770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8013776:	69fb      	ldr	r3, [r7, #28]
 8013778:	f003 0307 	and.w	r3, r3, #7
 801377c:	009b      	lsls	r3, r3, #2
 801377e:	220f      	movs	r2, #15
 8013780:	fa02 f303 	lsl.w	r3, r2, r3
 8013784:	43db      	mvns	r3, r3
 8013786:	69ba      	ldr	r2, [r7, #24]
 8013788:	4013      	ands	r3, r2
 801378a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	691a      	ldr	r2, [r3, #16]
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	f003 0307 	and.w	r3, r3, #7
 8013796:	009b      	lsls	r3, r3, #2
 8013798:	fa02 f303 	lsl.w	r3, r2, r3
 801379c:	69ba      	ldr	r2, [r7, #24]
 801379e:	4313      	orrs	r3, r2
 80137a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80137a2:	69fb      	ldr	r3, [r7, #28]
 80137a4:	08da      	lsrs	r2, r3, #3
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	3208      	adds	r2, #8
 80137aa:	69b9      	ldr	r1, [r7, #24]
 80137ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80137b6:	69fb      	ldr	r3, [r7, #28]
 80137b8:	005b      	lsls	r3, r3, #1
 80137ba:	2203      	movs	r2, #3
 80137bc:	fa02 f303 	lsl.w	r3, r2, r3
 80137c0:	43db      	mvns	r3, r3
 80137c2:	69ba      	ldr	r2, [r7, #24]
 80137c4:	4013      	ands	r3, r2
 80137c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	685b      	ldr	r3, [r3, #4]
 80137cc:	f003 0203 	and.w	r2, r3, #3
 80137d0:	69fb      	ldr	r3, [r7, #28]
 80137d2:	005b      	lsls	r3, r3, #1
 80137d4:	fa02 f303 	lsl.w	r3, r2, r3
 80137d8:	69ba      	ldr	r2, [r7, #24]
 80137da:	4313      	orrs	r3, r2
 80137dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	69ba      	ldr	r2, [r7, #24]
 80137e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	685b      	ldr	r3, [r3, #4]
 80137e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	f000 80b4 	beq.w	801395a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80137f2:	2300      	movs	r3, #0
 80137f4:	60fb      	str	r3, [r7, #12]
 80137f6:	4b5f      	ldr	r3, [pc, #380]	; (8013974 <HAL_GPIO_Init+0x308>)
 80137f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137fa:	4a5e      	ldr	r2, [pc, #376]	; (8013974 <HAL_GPIO_Init+0x308>)
 80137fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013800:	6453      	str	r3, [r2, #68]	; 0x44
 8013802:	4b5c      	ldr	r3, [pc, #368]	; (8013974 <HAL_GPIO_Init+0x308>)
 8013804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801380a:	60fb      	str	r3, [r7, #12]
 801380c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801380e:	4a5a      	ldr	r2, [pc, #360]	; (8013978 <HAL_GPIO_Init+0x30c>)
 8013810:	69fb      	ldr	r3, [r7, #28]
 8013812:	089b      	lsrs	r3, r3, #2
 8013814:	3302      	adds	r3, #2
 8013816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801381a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801381c:	69fb      	ldr	r3, [r7, #28]
 801381e:	f003 0303 	and.w	r3, r3, #3
 8013822:	009b      	lsls	r3, r3, #2
 8013824:	220f      	movs	r2, #15
 8013826:	fa02 f303 	lsl.w	r3, r2, r3
 801382a:	43db      	mvns	r3, r3
 801382c:	69ba      	ldr	r2, [r7, #24]
 801382e:	4013      	ands	r3, r2
 8013830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4a51      	ldr	r2, [pc, #324]	; (801397c <HAL_GPIO_Init+0x310>)
 8013836:	4293      	cmp	r3, r2
 8013838:	d02b      	beq.n	8013892 <HAL_GPIO_Init+0x226>
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4a50      	ldr	r2, [pc, #320]	; (8013980 <HAL_GPIO_Init+0x314>)
 801383e:	4293      	cmp	r3, r2
 8013840:	d025      	beq.n	801388e <HAL_GPIO_Init+0x222>
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	4a4f      	ldr	r2, [pc, #316]	; (8013984 <HAL_GPIO_Init+0x318>)
 8013846:	4293      	cmp	r3, r2
 8013848:	d01f      	beq.n	801388a <HAL_GPIO_Init+0x21e>
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	4a4e      	ldr	r2, [pc, #312]	; (8013988 <HAL_GPIO_Init+0x31c>)
 801384e:	4293      	cmp	r3, r2
 8013850:	d019      	beq.n	8013886 <HAL_GPIO_Init+0x21a>
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	4a4d      	ldr	r2, [pc, #308]	; (801398c <HAL_GPIO_Init+0x320>)
 8013856:	4293      	cmp	r3, r2
 8013858:	d013      	beq.n	8013882 <HAL_GPIO_Init+0x216>
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	4a4c      	ldr	r2, [pc, #304]	; (8013990 <HAL_GPIO_Init+0x324>)
 801385e:	4293      	cmp	r3, r2
 8013860:	d00d      	beq.n	801387e <HAL_GPIO_Init+0x212>
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	4a4b      	ldr	r2, [pc, #300]	; (8013994 <HAL_GPIO_Init+0x328>)
 8013866:	4293      	cmp	r3, r2
 8013868:	d007      	beq.n	801387a <HAL_GPIO_Init+0x20e>
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	4a4a      	ldr	r2, [pc, #296]	; (8013998 <HAL_GPIO_Init+0x32c>)
 801386e:	4293      	cmp	r3, r2
 8013870:	d101      	bne.n	8013876 <HAL_GPIO_Init+0x20a>
 8013872:	2307      	movs	r3, #7
 8013874:	e00e      	b.n	8013894 <HAL_GPIO_Init+0x228>
 8013876:	2308      	movs	r3, #8
 8013878:	e00c      	b.n	8013894 <HAL_GPIO_Init+0x228>
 801387a:	2306      	movs	r3, #6
 801387c:	e00a      	b.n	8013894 <HAL_GPIO_Init+0x228>
 801387e:	2305      	movs	r3, #5
 8013880:	e008      	b.n	8013894 <HAL_GPIO_Init+0x228>
 8013882:	2304      	movs	r3, #4
 8013884:	e006      	b.n	8013894 <HAL_GPIO_Init+0x228>
 8013886:	2303      	movs	r3, #3
 8013888:	e004      	b.n	8013894 <HAL_GPIO_Init+0x228>
 801388a:	2302      	movs	r3, #2
 801388c:	e002      	b.n	8013894 <HAL_GPIO_Init+0x228>
 801388e:	2301      	movs	r3, #1
 8013890:	e000      	b.n	8013894 <HAL_GPIO_Init+0x228>
 8013892:	2300      	movs	r3, #0
 8013894:	69fa      	ldr	r2, [r7, #28]
 8013896:	f002 0203 	and.w	r2, r2, #3
 801389a:	0092      	lsls	r2, r2, #2
 801389c:	4093      	lsls	r3, r2
 801389e:	69ba      	ldr	r2, [r7, #24]
 80138a0:	4313      	orrs	r3, r2
 80138a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80138a4:	4934      	ldr	r1, [pc, #208]	; (8013978 <HAL_GPIO_Init+0x30c>)
 80138a6:	69fb      	ldr	r3, [r7, #28]
 80138a8:	089b      	lsrs	r3, r3, #2
 80138aa:	3302      	adds	r3, #2
 80138ac:	69ba      	ldr	r2, [r7, #24]
 80138ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80138b2:	4b3a      	ldr	r3, [pc, #232]	; (801399c <HAL_GPIO_Init+0x330>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80138b8:	693b      	ldr	r3, [r7, #16]
 80138ba:	43db      	mvns	r3, r3
 80138bc:	69ba      	ldr	r2, [r7, #24]
 80138be:	4013      	ands	r3, r2
 80138c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	685b      	ldr	r3, [r3, #4]
 80138c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d003      	beq.n	80138d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80138ce:	69ba      	ldr	r2, [r7, #24]
 80138d0:	693b      	ldr	r3, [r7, #16]
 80138d2:	4313      	orrs	r3, r2
 80138d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80138d6:	4a31      	ldr	r2, [pc, #196]	; (801399c <HAL_GPIO_Init+0x330>)
 80138d8:	69bb      	ldr	r3, [r7, #24]
 80138da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80138dc:	4b2f      	ldr	r3, [pc, #188]	; (801399c <HAL_GPIO_Init+0x330>)
 80138de:	685b      	ldr	r3, [r3, #4]
 80138e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	43db      	mvns	r3, r3
 80138e6:	69ba      	ldr	r2, [r7, #24]
 80138e8:	4013      	ands	r3, r2
 80138ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	685b      	ldr	r3, [r3, #4]
 80138f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d003      	beq.n	8013900 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80138f8:	69ba      	ldr	r2, [r7, #24]
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	4313      	orrs	r3, r2
 80138fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8013900:	4a26      	ldr	r2, [pc, #152]	; (801399c <HAL_GPIO_Init+0x330>)
 8013902:	69bb      	ldr	r3, [r7, #24]
 8013904:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8013906:	4b25      	ldr	r3, [pc, #148]	; (801399c <HAL_GPIO_Init+0x330>)
 8013908:	689b      	ldr	r3, [r3, #8]
 801390a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801390c:	693b      	ldr	r3, [r7, #16]
 801390e:	43db      	mvns	r3, r3
 8013910:	69ba      	ldr	r2, [r7, #24]
 8013912:	4013      	ands	r3, r2
 8013914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	685b      	ldr	r3, [r3, #4]
 801391a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801391e:	2b00      	cmp	r3, #0
 8013920:	d003      	beq.n	801392a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8013922:	69ba      	ldr	r2, [r7, #24]
 8013924:	693b      	ldr	r3, [r7, #16]
 8013926:	4313      	orrs	r3, r2
 8013928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801392a:	4a1c      	ldr	r2, [pc, #112]	; (801399c <HAL_GPIO_Init+0x330>)
 801392c:	69bb      	ldr	r3, [r7, #24]
 801392e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8013930:	4b1a      	ldr	r3, [pc, #104]	; (801399c <HAL_GPIO_Init+0x330>)
 8013932:	68db      	ldr	r3, [r3, #12]
 8013934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013936:	693b      	ldr	r3, [r7, #16]
 8013938:	43db      	mvns	r3, r3
 801393a:	69ba      	ldr	r2, [r7, #24]
 801393c:	4013      	ands	r3, r2
 801393e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	685b      	ldr	r3, [r3, #4]
 8013944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013948:	2b00      	cmp	r3, #0
 801394a:	d003      	beq.n	8013954 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 801394c:	69ba      	ldr	r2, [r7, #24]
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	4313      	orrs	r3, r2
 8013952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8013954:	4a11      	ldr	r2, [pc, #68]	; (801399c <HAL_GPIO_Init+0x330>)
 8013956:	69bb      	ldr	r3, [r7, #24]
 8013958:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801395a:	69fb      	ldr	r3, [r7, #28]
 801395c:	3301      	adds	r3, #1
 801395e:	61fb      	str	r3, [r7, #28]
 8013960:	69fb      	ldr	r3, [r7, #28]
 8013962:	2b0f      	cmp	r3, #15
 8013964:	f67f ae90 	bls.w	8013688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8013968:	bf00      	nop
 801396a:	3724      	adds	r7, #36	; 0x24
 801396c:	46bd      	mov	sp, r7
 801396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013972:	4770      	bx	lr
 8013974:	40023800 	.word	0x40023800
 8013978:	40013800 	.word	0x40013800
 801397c:	40020000 	.word	0x40020000
 8013980:	40020400 	.word	0x40020400
 8013984:	40020800 	.word	0x40020800
 8013988:	40020c00 	.word	0x40020c00
 801398c:	40021000 	.word	0x40021000
 8013990:	40021400 	.word	0x40021400
 8013994:	40021800 	.word	0x40021800
 8013998:	40021c00 	.word	0x40021c00
 801399c:	40013c00 	.word	0x40013c00

080139a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80139a0:	b480      	push	{r7}
 80139a2:	b083      	sub	sp, #12
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
 80139a8:	460b      	mov	r3, r1
 80139aa:	807b      	strh	r3, [r7, #2]
 80139ac:	4613      	mov	r3, r2
 80139ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80139b0:	787b      	ldrb	r3, [r7, #1]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d003      	beq.n	80139be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80139b6:	887a      	ldrh	r2, [r7, #2]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80139bc:	e003      	b.n	80139c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80139be:	887b      	ldrh	r3, [r7, #2]
 80139c0:	041a      	lsls	r2, r3, #16
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	619a      	str	r2, [r3, #24]
}
 80139c6:	bf00      	nop
 80139c8:	370c      	adds	r7, #12
 80139ca:	46bd      	mov	sp, r7
 80139cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d0:	4770      	bx	lr
	...

080139d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b082      	sub	sp, #8
 80139d8:	af00      	add	r7, sp, #0
 80139da:	4603      	mov	r3, r0
 80139dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80139de:	4b08      	ldr	r3, [pc, #32]	; (8013a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80139e0:	695a      	ldr	r2, [r3, #20]
 80139e2:	88fb      	ldrh	r3, [r7, #6]
 80139e4:	4013      	ands	r3, r2
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d006      	beq.n	80139f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80139ea:	4a05      	ldr	r2, [pc, #20]	; (8013a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80139ec:	88fb      	ldrh	r3, [r7, #6]
 80139ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80139f0:	88fb      	ldrh	r3, [r7, #6]
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7fe f940 	bl	8011c78 <HAL_GPIO_EXTI_Callback>
  }
}
 80139f8:	bf00      	nop
 80139fa:	3708      	adds	r7, #8
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}
 8013a00:	40013c00 	.word	0x40013c00

08013a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b086      	sub	sp, #24
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d101      	bne.n	8013a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013a12:	2301      	movs	r3, #1
 8013a14:	e25b      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	f003 0301 	and.w	r3, r3, #1
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d075      	beq.n	8013b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013a22:	4ba3      	ldr	r3, [pc, #652]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013a24:	689b      	ldr	r3, [r3, #8]
 8013a26:	f003 030c 	and.w	r3, r3, #12
 8013a2a:	2b04      	cmp	r3, #4
 8013a2c:	d00c      	beq.n	8013a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013a2e:	4ba0      	ldr	r3, [pc, #640]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013a30:	689b      	ldr	r3, [r3, #8]
 8013a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013a36:	2b08      	cmp	r3, #8
 8013a38:	d112      	bne.n	8013a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013a3a:	4b9d      	ldr	r3, [pc, #628]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013a46:	d10b      	bne.n	8013a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013a48:	4b99      	ldr	r3, [pc, #612]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d05b      	beq.n	8013b0c <HAL_RCC_OscConfig+0x108>
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d157      	bne.n	8013b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013a5c:	2301      	movs	r3, #1
 8013a5e:	e236      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a68:	d106      	bne.n	8013a78 <HAL_RCC_OscConfig+0x74>
 8013a6a:	4b91      	ldr	r3, [pc, #580]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	4a90      	ldr	r2, [pc, #576]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013a74:	6013      	str	r3, [r2, #0]
 8013a76:	e01d      	b.n	8013ab4 <HAL_RCC_OscConfig+0xb0>
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013a80:	d10c      	bne.n	8013a9c <HAL_RCC_OscConfig+0x98>
 8013a82:	4b8b      	ldr	r3, [pc, #556]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	4a8a      	ldr	r2, [pc, #552]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013a8c:	6013      	str	r3, [r2, #0]
 8013a8e:	4b88      	ldr	r3, [pc, #544]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	4a87      	ldr	r2, [pc, #540]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013a98:	6013      	str	r3, [r2, #0]
 8013a9a:	e00b      	b.n	8013ab4 <HAL_RCC_OscConfig+0xb0>
 8013a9c:	4b84      	ldr	r3, [pc, #528]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	4a83      	ldr	r2, [pc, #524]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013aa6:	6013      	str	r3, [r2, #0]
 8013aa8:	4b81      	ldr	r3, [pc, #516]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	4a80      	ldr	r2, [pc, #512]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	685b      	ldr	r3, [r3, #4]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d013      	beq.n	8013ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013abc:	f7fe fa90 	bl	8011fe0 <HAL_GetTick>
 8013ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013ac2:	e008      	b.n	8013ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013ac4:	f7fe fa8c 	bl	8011fe0 <HAL_GetTick>
 8013ac8:	4602      	mov	r2, r0
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	1ad3      	subs	r3, r2, r3
 8013ace:	2b64      	cmp	r3, #100	; 0x64
 8013ad0:	d901      	bls.n	8013ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8013ad2:	2303      	movs	r3, #3
 8013ad4:	e1fb      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013ad6:	4b76      	ldr	r3, [pc, #472]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d0f0      	beq.n	8013ac4 <HAL_RCC_OscConfig+0xc0>
 8013ae2:	e014      	b.n	8013b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013ae4:	f7fe fa7c 	bl	8011fe0 <HAL_GetTick>
 8013ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013aea:	e008      	b.n	8013afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013aec:	f7fe fa78 	bl	8011fe0 <HAL_GetTick>
 8013af0:	4602      	mov	r2, r0
 8013af2:	693b      	ldr	r3, [r7, #16]
 8013af4:	1ad3      	subs	r3, r2, r3
 8013af6:	2b64      	cmp	r3, #100	; 0x64
 8013af8:	d901      	bls.n	8013afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013afa:	2303      	movs	r3, #3
 8013afc:	e1e7      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013afe:	4b6c      	ldr	r3, [pc, #432]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d1f0      	bne.n	8013aec <HAL_RCC_OscConfig+0xe8>
 8013b0a:	e000      	b.n	8013b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	f003 0302 	and.w	r3, r3, #2
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d063      	beq.n	8013be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013b1a:	4b65      	ldr	r3, [pc, #404]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013b1c:	689b      	ldr	r3, [r3, #8]
 8013b1e:	f003 030c 	and.w	r3, r3, #12
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d00b      	beq.n	8013b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013b26:	4b62      	ldr	r3, [pc, #392]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013b28:	689b      	ldr	r3, [r3, #8]
 8013b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013b2e:	2b08      	cmp	r3, #8
 8013b30:	d11c      	bne.n	8013b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013b32:	4b5f      	ldr	r3, [pc, #380]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d116      	bne.n	8013b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013b3e:	4b5c      	ldr	r3, [pc, #368]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	f003 0302 	and.w	r3, r3, #2
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d005      	beq.n	8013b56 <HAL_RCC_OscConfig+0x152>
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	68db      	ldr	r3, [r3, #12]
 8013b4e:	2b01      	cmp	r3, #1
 8013b50:	d001      	beq.n	8013b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8013b52:	2301      	movs	r3, #1
 8013b54:	e1bb      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013b56:	4b56      	ldr	r3, [pc, #344]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	691b      	ldr	r3, [r3, #16]
 8013b62:	00db      	lsls	r3, r3, #3
 8013b64:	4952      	ldr	r1, [pc, #328]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013b66:	4313      	orrs	r3, r2
 8013b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013b6a:	e03a      	b.n	8013be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	68db      	ldr	r3, [r3, #12]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d020      	beq.n	8013bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013b74:	4b4f      	ldr	r3, [pc, #316]	; (8013cb4 <HAL_RCC_OscConfig+0x2b0>)
 8013b76:	2201      	movs	r2, #1
 8013b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013b7a:	f7fe fa31 	bl	8011fe0 <HAL_GetTick>
 8013b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013b80:	e008      	b.n	8013b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013b82:	f7fe fa2d 	bl	8011fe0 <HAL_GetTick>
 8013b86:	4602      	mov	r2, r0
 8013b88:	693b      	ldr	r3, [r7, #16]
 8013b8a:	1ad3      	subs	r3, r2, r3
 8013b8c:	2b02      	cmp	r3, #2
 8013b8e:	d901      	bls.n	8013b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013b90:	2303      	movs	r3, #3
 8013b92:	e19c      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013b94:	4b46      	ldr	r3, [pc, #280]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	f003 0302 	and.w	r3, r3, #2
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d0f0      	beq.n	8013b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013ba0:	4b43      	ldr	r3, [pc, #268]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	691b      	ldr	r3, [r3, #16]
 8013bac:	00db      	lsls	r3, r3, #3
 8013bae:	4940      	ldr	r1, [pc, #256]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013bb0:	4313      	orrs	r3, r2
 8013bb2:	600b      	str	r3, [r1, #0]
 8013bb4:	e015      	b.n	8013be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013bb6:	4b3f      	ldr	r3, [pc, #252]	; (8013cb4 <HAL_RCC_OscConfig+0x2b0>)
 8013bb8:	2200      	movs	r2, #0
 8013bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013bbc:	f7fe fa10 	bl	8011fe0 <HAL_GetTick>
 8013bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013bc2:	e008      	b.n	8013bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013bc4:	f7fe fa0c 	bl	8011fe0 <HAL_GetTick>
 8013bc8:	4602      	mov	r2, r0
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	1ad3      	subs	r3, r2, r3
 8013bce:	2b02      	cmp	r3, #2
 8013bd0:	d901      	bls.n	8013bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8013bd2:	2303      	movs	r3, #3
 8013bd4:	e17b      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013bd6:	4b36      	ldr	r3, [pc, #216]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	f003 0302 	and.w	r3, r3, #2
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d1f0      	bne.n	8013bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	f003 0308 	and.w	r3, r3, #8
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d030      	beq.n	8013c50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	695b      	ldr	r3, [r3, #20]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d016      	beq.n	8013c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013bf6:	4b30      	ldr	r3, [pc, #192]	; (8013cb8 <HAL_RCC_OscConfig+0x2b4>)
 8013bf8:	2201      	movs	r2, #1
 8013bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013bfc:	f7fe f9f0 	bl	8011fe0 <HAL_GetTick>
 8013c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013c02:	e008      	b.n	8013c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013c04:	f7fe f9ec 	bl	8011fe0 <HAL_GetTick>
 8013c08:	4602      	mov	r2, r0
 8013c0a:	693b      	ldr	r3, [r7, #16]
 8013c0c:	1ad3      	subs	r3, r2, r3
 8013c0e:	2b02      	cmp	r3, #2
 8013c10:	d901      	bls.n	8013c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8013c12:	2303      	movs	r3, #3
 8013c14:	e15b      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013c16:	4b26      	ldr	r3, [pc, #152]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c1a:	f003 0302 	and.w	r3, r3, #2
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d0f0      	beq.n	8013c04 <HAL_RCC_OscConfig+0x200>
 8013c22:	e015      	b.n	8013c50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013c24:	4b24      	ldr	r3, [pc, #144]	; (8013cb8 <HAL_RCC_OscConfig+0x2b4>)
 8013c26:	2200      	movs	r2, #0
 8013c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013c2a:	f7fe f9d9 	bl	8011fe0 <HAL_GetTick>
 8013c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013c30:	e008      	b.n	8013c44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013c32:	f7fe f9d5 	bl	8011fe0 <HAL_GetTick>
 8013c36:	4602      	mov	r2, r0
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	1ad3      	subs	r3, r2, r3
 8013c3c:	2b02      	cmp	r3, #2
 8013c3e:	d901      	bls.n	8013c44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8013c40:	2303      	movs	r3, #3
 8013c42:	e144      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013c44:	4b1a      	ldr	r3, [pc, #104]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c48:	f003 0302 	and.w	r3, r3, #2
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d1f0      	bne.n	8013c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	f003 0304 	and.w	r3, r3, #4
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	f000 80a0 	beq.w	8013d9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013c62:	4b13      	ldr	r3, [pc, #76]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d10f      	bne.n	8013c8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013c6e:	2300      	movs	r3, #0
 8013c70:	60bb      	str	r3, [r7, #8]
 8013c72:	4b0f      	ldr	r3, [pc, #60]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c76:	4a0e      	ldr	r2, [pc, #56]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8013c7e:	4b0c      	ldr	r3, [pc, #48]	; (8013cb0 <HAL_RCC_OscConfig+0x2ac>)
 8013c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013c86:	60bb      	str	r3, [r7, #8]
 8013c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013c8e:	4b0b      	ldr	r3, [pc, #44]	; (8013cbc <HAL_RCC_OscConfig+0x2b8>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d121      	bne.n	8013cde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013c9a:	4b08      	ldr	r3, [pc, #32]	; (8013cbc <HAL_RCC_OscConfig+0x2b8>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	4a07      	ldr	r2, [pc, #28]	; (8013cbc <HAL_RCC_OscConfig+0x2b8>)
 8013ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013ca6:	f7fe f99b 	bl	8011fe0 <HAL_GetTick>
 8013caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013cac:	e011      	b.n	8013cd2 <HAL_RCC_OscConfig+0x2ce>
 8013cae:	bf00      	nop
 8013cb0:	40023800 	.word	0x40023800
 8013cb4:	42470000 	.word	0x42470000
 8013cb8:	42470e80 	.word	0x42470e80
 8013cbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013cc0:	f7fe f98e 	bl	8011fe0 <HAL_GetTick>
 8013cc4:	4602      	mov	r2, r0
 8013cc6:	693b      	ldr	r3, [r7, #16]
 8013cc8:	1ad3      	subs	r3, r2, r3
 8013cca:	2b02      	cmp	r3, #2
 8013ccc:	d901      	bls.n	8013cd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8013cce:	2303      	movs	r3, #3
 8013cd0:	e0fd      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013cd2:	4b81      	ldr	r3, [pc, #516]	; (8013ed8 <HAL_RCC_OscConfig+0x4d4>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d0f0      	beq.n	8013cc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	689b      	ldr	r3, [r3, #8]
 8013ce2:	2b01      	cmp	r3, #1
 8013ce4:	d106      	bne.n	8013cf4 <HAL_RCC_OscConfig+0x2f0>
 8013ce6:	4b7d      	ldr	r3, [pc, #500]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cea:	4a7c      	ldr	r2, [pc, #496]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013cec:	f043 0301 	orr.w	r3, r3, #1
 8013cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8013cf2:	e01c      	b.n	8013d2e <HAL_RCC_OscConfig+0x32a>
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	689b      	ldr	r3, [r3, #8]
 8013cf8:	2b05      	cmp	r3, #5
 8013cfa:	d10c      	bne.n	8013d16 <HAL_RCC_OscConfig+0x312>
 8013cfc:	4b77      	ldr	r3, [pc, #476]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d00:	4a76      	ldr	r2, [pc, #472]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013d02:	f043 0304 	orr.w	r3, r3, #4
 8013d06:	6713      	str	r3, [r2, #112]	; 0x70
 8013d08:	4b74      	ldr	r3, [pc, #464]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d0c:	4a73      	ldr	r2, [pc, #460]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013d0e:	f043 0301 	orr.w	r3, r3, #1
 8013d12:	6713      	str	r3, [r2, #112]	; 0x70
 8013d14:	e00b      	b.n	8013d2e <HAL_RCC_OscConfig+0x32a>
 8013d16:	4b71      	ldr	r3, [pc, #452]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d1a:	4a70      	ldr	r2, [pc, #448]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013d1c:	f023 0301 	bic.w	r3, r3, #1
 8013d20:	6713      	str	r3, [r2, #112]	; 0x70
 8013d22:	4b6e      	ldr	r3, [pc, #440]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d26:	4a6d      	ldr	r2, [pc, #436]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013d28:	f023 0304 	bic.w	r3, r3, #4
 8013d2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	689b      	ldr	r3, [r3, #8]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d015      	beq.n	8013d62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013d36:	f7fe f953 	bl	8011fe0 <HAL_GetTick>
 8013d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013d3c:	e00a      	b.n	8013d54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013d3e:	f7fe f94f 	bl	8011fe0 <HAL_GetTick>
 8013d42:	4602      	mov	r2, r0
 8013d44:	693b      	ldr	r3, [r7, #16]
 8013d46:	1ad3      	subs	r3, r2, r3
 8013d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d4c:	4293      	cmp	r3, r2
 8013d4e:	d901      	bls.n	8013d54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8013d50:	2303      	movs	r3, #3
 8013d52:	e0bc      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013d54:	4b61      	ldr	r3, [pc, #388]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d58:	f003 0302 	and.w	r3, r3, #2
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d0ee      	beq.n	8013d3e <HAL_RCC_OscConfig+0x33a>
 8013d60:	e014      	b.n	8013d8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013d62:	f7fe f93d 	bl	8011fe0 <HAL_GetTick>
 8013d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013d68:	e00a      	b.n	8013d80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013d6a:	f7fe f939 	bl	8011fe0 <HAL_GetTick>
 8013d6e:	4602      	mov	r2, r0
 8013d70:	693b      	ldr	r3, [r7, #16]
 8013d72:	1ad3      	subs	r3, r2, r3
 8013d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d78:	4293      	cmp	r3, r2
 8013d7a:	d901      	bls.n	8013d80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8013d7c:	2303      	movs	r3, #3
 8013d7e:	e0a6      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013d80:	4b56      	ldr	r3, [pc, #344]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d84:	f003 0302 	and.w	r3, r3, #2
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d1ee      	bne.n	8013d6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013d8c:	7dfb      	ldrb	r3, [r7, #23]
 8013d8e:	2b01      	cmp	r3, #1
 8013d90:	d105      	bne.n	8013d9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013d92:	4b52      	ldr	r3, [pc, #328]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d96:	4a51      	ldr	r2, [pc, #324]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013d9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	699b      	ldr	r3, [r3, #24]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	f000 8092 	beq.w	8013ecc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013da8:	4b4c      	ldr	r3, [pc, #304]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013daa:	689b      	ldr	r3, [r3, #8]
 8013dac:	f003 030c 	and.w	r3, r3, #12
 8013db0:	2b08      	cmp	r3, #8
 8013db2:	d05c      	beq.n	8013e6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	699b      	ldr	r3, [r3, #24]
 8013db8:	2b02      	cmp	r3, #2
 8013dba:	d141      	bne.n	8013e40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013dbc:	4b48      	ldr	r3, [pc, #288]	; (8013ee0 <HAL_RCC_OscConfig+0x4dc>)
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013dc2:	f7fe f90d 	bl	8011fe0 <HAL_GetTick>
 8013dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013dc8:	e008      	b.n	8013ddc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013dca:	f7fe f909 	bl	8011fe0 <HAL_GetTick>
 8013dce:	4602      	mov	r2, r0
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	1ad3      	subs	r3, r2, r3
 8013dd4:	2b02      	cmp	r3, #2
 8013dd6:	d901      	bls.n	8013ddc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8013dd8:	2303      	movs	r3, #3
 8013dda:	e078      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013ddc:	4b3f      	ldr	r3, [pc, #252]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d1f0      	bne.n	8013dca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	69da      	ldr	r2, [r3, #28]
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	6a1b      	ldr	r3, [r3, #32]
 8013df0:	431a      	orrs	r2, r3
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013df6:	019b      	lsls	r3, r3, #6
 8013df8:	431a      	orrs	r2, r3
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dfe:	085b      	lsrs	r3, r3, #1
 8013e00:	3b01      	subs	r3, #1
 8013e02:	041b      	lsls	r3, r3, #16
 8013e04:	431a      	orrs	r2, r3
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e0a:	061b      	lsls	r3, r3, #24
 8013e0c:	4933      	ldr	r1, [pc, #204]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013e0e:	4313      	orrs	r3, r2
 8013e10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013e12:	4b33      	ldr	r3, [pc, #204]	; (8013ee0 <HAL_RCC_OscConfig+0x4dc>)
 8013e14:	2201      	movs	r2, #1
 8013e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013e18:	f7fe f8e2 	bl	8011fe0 <HAL_GetTick>
 8013e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013e1e:	e008      	b.n	8013e32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013e20:	f7fe f8de 	bl	8011fe0 <HAL_GetTick>
 8013e24:	4602      	mov	r2, r0
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	1ad3      	subs	r3, r2, r3
 8013e2a:	2b02      	cmp	r3, #2
 8013e2c:	d901      	bls.n	8013e32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8013e2e:	2303      	movs	r3, #3
 8013e30:	e04d      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013e32:	4b2a      	ldr	r3, [pc, #168]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d0f0      	beq.n	8013e20 <HAL_RCC_OscConfig+0x41c>
 8013e3e:	e045      	b.n	8013ecc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013e40:	4b27      	ldr	r3, [pc, #156]	; (8013ee0 <HAL_RCC_OscConfig+0x4dc>)
 8013e42:	2200      	movs	r2, #0
 8013e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013e46:	f7fe f8cb 	bl	8011fe0 <HAL_GetTick>
 8013e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013e4c:	e008      	b.n	8013e60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013e4e:	f7fe f8c7 	bl	8011fe0 <HAL_GetTick>
 8013e52:	4602      	mov	r2, r0
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	1ad3      	subs	r3, r2, r3
 8013e58:	2b02      	cmp	r3, #2
 8013e5a:	d901      	bls.n	8013e60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8013e5c:	2303      	movs	r3, #3
 8013e5e:	e036      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013e60:	4b1e      	ldr	r3, [pc, #120]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d1f0      	bne.n	8013e4e <HAL_RCC_OscConfig+0x44a>
 8013e6c:	e02e      	b.n	8013ecc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	699b      	ldr	r3, [r3, #24]
 8013e72:	2b01      	cmp	r3, #1
 8013e74:	d101      	bne.n	8013e7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8013e76:	2301      	movs	r3, #1
 8013e78:	e029      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013e7a:	4b18      	ldr	r3, [pc, #96]	; (8013edc <HAL_RCC_OscConfig+0x4d8>)
 8013e7c:	685b      	ldr	r3, [r3, #4]
 8013e7e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	69db      	ldr	r3, [r3, #28]
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	d11c      	bne.n	8013ec8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d115      	bne.n	8013ec8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8013e9c:	68fa      	ldr	r2, [r7, #12]
 8013e9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013ea2:	4013      	ands	r3, r2
 8013ea4:	687a      	ldr	r2, [r7, #4]
 8013ea6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013ea8:	4293      	cmp	r3, r2
 8013eaa:	d10d      	bne.n	8013ec8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d106      	bne.n	8013ec8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	d001      	beq.n	8013ecc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8013ec8:	2301      	movs	r3, #1
 8013eca:	e000      	b.n	8013ece <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8013ecc:	2300      	movs	r3, #0
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3718      	adds	r7, #24
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	40007000 	.word	0x40007000
 8013edc:	40023800 	.word	0x40023800
 8013ee0:	42470060 	.word	0x42470060

08013ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
 8013eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d101      	bne.n	8013ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	e0cc      	b.n	8014092 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013ef8:	4b68      	ldr	r3, [pc, #416]	; (801409c <HAL_RCC_ClockConfig+0x1b8>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	f003 030f 	and.w	r3, r3, #15
 8013f00:	683a      	ldr	r2, [r7, #0]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d90c      	bls.n	8013f20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013f06:	4b65      	ldr	r3, [pc, #404]	; (801409c <HAL_RCC_ClockConfig+0x1b8>)
 8013f08:	683a      	ldr	r2, [r7, #0]
 8013f0a:	b2d2      	uxtb	r2, r2
 8013f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013f0e:	4b63      	ldr	r3, [pc, #396]	; (801409c <HAL_RCC_ClockConfig+0x1b8>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	f003 030f 	and.w	r3, r3, #15
 8013f16:	683a      	ldr	r2, [r7, #0]
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	d001      	beq.n	8013f20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	e0b8      	b.n	8014092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	f003 0302 	and.w	r3, r3, #2
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d020      	beq.n	8013f6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	f003 0304 	and.w	r3, r3, #4
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d005      	beq.n	8013f44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013f38:	4b59      	ldr	r3, [pc, #356]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8013f3a:	689b      	ldr	r3, [r3, #8]
 8013f3c:	4a58      	ldr	r2, [pc, #352]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8013f3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8013f42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	f003 0308 	and.w	r3, r3, #8
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d005      	beq.n	8013f5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013f50:	4b53      	ldr	r3, [pc, #332]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8013f52:	689b      	ldr	r3, [r3, #8]
 8013f54:	4a52      	ldr	r2, [pc, #328]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8013f56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013f5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013f5c:	4b50      	ldr	r3, [pc, #320]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	689b      	ldr	r3, [r3, #8]
 8013f68:	494d      	ldr	r1, [pc, #308]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8013f6a:	4313      	orrs	r3, r2
 8013f6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	f003 0301 	and.w	r3, r3, #1
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d044      	beq.n	8014004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	2b01      	cmp	r3, #1
 8013f80:	d107      	bne.n	8013f92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013f82:	4b47      	ldr	r3, [pc, #284]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d119      	bne.n	8013fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013f8e:	2301      	movs	r3, #1
 8013f90:	e07f      	b.n	8014092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	685b      	ldr	r3, [r3, #4]
 8013f96:	2b02      	cmp	r3, #2
 8013f98:	d003      	beq.n	8013fa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013f9e:	2b03      	cmp	r3, #3
 8013fa0:	d107      	bne.n	8013fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013fa2:	4b3f      	ldr	r3, [pc, #252]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d109      	bne.n	8013fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013fae:	2301      	movs	r3, #1
 8013fb0:	e06f      	b.n	8014092 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013fb2:	4b3b      	ldr	r3, [pc, #236]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	f003 0302 	and.w	r3, r3, #2
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d101      	bne.n	8013fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013fbe:	2301      	movs	r3, #1
 8013fc0:	e067      	b.n	8014092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013fc2:	4b37      	ldr	r3, [pc, #220]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8013fc4:	689b      	ldr	r3, [r3, #8]
 8013fc6:	f023 0203 	bic.w	r2, r3, #3
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	685b      	ldr	r3, [r3, #4]
 8013fce:	4934      	ldr	r1, [pc, #208]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8013fd0:	4313      	orrs	r3, r2
 8013fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013fd4:	f7fe f804 	bl	8011fe0 <HAL_GetTick>
 8013fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013fda:	e00a      	b.n	8013ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013fdc:	f7fe f800 	bl	8011fe0 <HAL_GetTick>
 8013fe0:	4602      	mov	r2, r0
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	1ad3      	subs	r3, r2, r3
 8013fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8013fea:	4293      	cmp	r3, r2
 8013fec:	d901      	bls.n	8013ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013fee:	2303      	movs	r3, #3
 8013ff0:	e04f      	b.n	8014092 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013ff2:	4b2b      	ldr	r3, [pc, #172]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8013ff4:	689b      	ldr	r3, [r3, #8]
 8013ff6:	f003 020c 	and.w	r2, r3, #12
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	685b      	ldr	r3, [r3, #4]
 8013ffe:	009b      	lsls	r3, r3, #2
 8014000:	429a      	cmp	r2, r3
 8014002:	d1eb      	bne.n	8013fdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014004:	4b25      	ldr	r3, [pc, #148]	; (801409c <HAL_RCC_ClockConfig+0x1b8>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	f003 030f 	and.w	r3, r3, #15
 801400c:	683a      	ldr	r2, [r7, #0]
 801400e:	429a      	cmp	r2, r3
 8014010:	d20c      	bcs.n	801402c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014012:	4b22      	ldr	r3, [pc, #136]	; (801409c <HAL_RCC_ClockConfig+0x1b8>)
 8014014:	683a      	ldr	r2, [r7, #0]
 8014016:	b2d2      	uxtb	r2, r2
 8014018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801401a:	4b20      	ldr	r3, [pc, #128]	; (801409c <HAL_RCC_ClockConfig+0x1b8>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	f003 030f 	and.w	r3, r3, #15
 8014022:	683a      	ldr	r2, [r7, #0]
 8014024:	429a      	cmp	r2, r3
 8014026:	d001      	beq.n	801402c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8014028:	2301      	movs	r3, #1
 801402a:	e032      	b.n	8014092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	f003 0304 	and.w	r3, r3, #4
 8014034:	2b00      	cmp	r3, #0
 8014036:	d008      	beq.n	801404a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014038:	4b19      	ldr	r3, [pc, #100]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 801403a:	689b      	ldr	r3, [r3, #8]
 801403c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	68db      	ldr	r3, [r3, #12]
 8014044:	4916      	ldr	r1, [pc, #88]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8014046:	4313      	orrs	r3, r2
 8014048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	f003 0308 	and.w	r3, r3, #8
 8014052:	2b00      	cmp	r3, #0
 8014054:	d009      	beq.n	801406a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014056:	4b12      	ldr	r3, [pc, #72]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8014058:	689b      	ldr	r3, [r3, #8]
 801405a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	691b      	ldr	r3, [r3, #16]
 8014062:	00db      	lsls	r3, r3, #3
 8014064:	490e      	ldr	r1, [pc, #56]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8014066:	4313      	orrs	r3, r2
 8014068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801406a:	f000 f821 	bl	80140b0 <HAL_RCC_GetSysClockFreq>
 801406e:	4601      	mov	r1, r0
 8014070:	4b0b      	ldr	r3, [pc, #44]	; (80140a0 <HAL_RCC_ClockConfig+0x1bc>)
 8014072:	689b      	ldr	r3, [r3, #8]
 8014074:	091b      	lsrs	r3, r3, #4
 8014076:	f003 030f 	and.w	r3, r3, #15
 801407a:	4a0a      	ldr	r2, [pc, #40]	; (80140a4 <HAL_RCC_ClockConfig+0x1c0>)
 801407c:	5cd3      	ldrb	r3, [r2, r3]
 801407e:	fa21 f303 	lsr.w	r3, r1, r3
 8014082:	4a09      	ldr	r2, [pc, #36]	; (80140a8 <HAL_RCC_ClockConfig+0x1c4>)
 8014084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8014086:	4b09      	ldr	r3, [pc, #36]	; (80140ac <HAL_RCC_ClockConfig+0x1c8>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	4618      	mov	r0, r3
 801408c:	f7fd ff64 	bl	8011f58 <HAL_InitTick>

  return HAL_OK;
 8014090:	2300      	movs	r3, #0
}
 8014092:	4618      	mov	r0, r3
 8014094:	3710      	adds	r7, #16
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}
 801409a:	bf00      	nop
 801409c:	40023c00 	.word	0x40023c00
 80140a0:	40023800 	.word	0x40023800
 80140a4:	0801c6b8 	.word	0x0801c6b8
 80140a8:	20000020 	.word	0x20000020
 80140ac:	20000024 	.word	0x20000024

080140b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80140b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140b2:	b085      	sub	sp, #20
 80140b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80140b6:	2300      	movs	r3, #0
 80140b8:	607b      	str	r3, [r7, #4]
 80140ba:	2300      	movs	r3, #0
 80140bc:	60fb      	str	r3, [r7, #12]
 80140be:	2300      	movs	r3, #0
 80140c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80140c2:	2300      	movs	r3, #0
 80140c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80140c6:	4b63      	ldr	r3, [pc, #396]	; (8014254 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80140c8:	689b      	ldr	r3, [r3, #8]
 80140ca:	f003 030c 	and.w	r3, r3, #12
 80140ce:	2b04      	cmp	r3, #4
 80140d0:	d007      	beq.n	80140e2 <HAL_RCC_GetSysClockFreq+0x32>
 80140d2:	2b08      	cmp	r3, #8
 80140d4:	d008      	beq.n	80140e8 <HAL_RCC_GetSysClockFreq+0x38>
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	f040 80b4 	bne.w	8014244 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80140dc:	4b5e      	ldr	r3, [pc, #376]	; (8014258 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80140de:	60bb      	str	r3, [r7, #8]
       break;
 80140e0:	e0b3      	b.n	801424a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80140e2:	4b5e      	ldr	r3, [pc, #376]	; (801425c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80140e4:	60bb      	str	r3, [r7, #8]
      break;
 80140e6:	e0b0      	b.n	801424a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80140e8:	4b5a      	ldr	r3, [pc, #360]	; (8014254 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80140ea:	685b      	ldr	r3, [r3, #4]
 80140ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80140f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80140f2:	4b58      	ldr	r3, [pc, #352]	; (8014254 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80140f4:	685b      	ldr	r3, [r3, #4]
 80140f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d04a      	beq.n	8014194 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80140fe:	4b55      	ldr	r3, [pc, #340]	; (8014254 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8014100:	685b      	ldr	r3, [r3, #4]
 8014102:	099b      	lsrs	r3, r3, #6
 8014104:	f04f 0400 	mov.w	r4, #0
 8014108:	f240 11ff 	movw	r1, #511	; 0x1ff
 801410c:	f04f 0200 	mov.w	r2, #0
 8014110:	ea03 0501 	and.w	r5, r3, r1
 8014114:	ea04 0602 	and.w	r6, r4, r2
 8014118:	4629      	mov	r1, r5
 801411a:	4632      	mov	r2, r6
 801411c:	f04f 0300 	mov.w	r3, #0
 8014120:	f04f 0400 	mov.w	r4, #0
 8014124:	0154      	lsls	r4, r2, #5
 8014126:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801412a:	014b      	lsls	r3, r1, #5
 801412c:	4619      	mov	r1, r3
 801412e:	4622      	mov	r2, r4
 8014130:	1b49      	subs	r1, r1, r5
 8014132:	eb62 0206 	sbc.w	r2, r2, r6
 8014136:	f04f 0300 	mov.w	r3, #0
 801413a:	f04f 0400 	mov.w	r4, #0
 801413e:	0194      	lsls	r4, r2, #6
 8014140:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8014144:	018b      	lsls	r3, r1, #6
 8014146:	1a5b      	subs	r3, r3, r1
 8014148:	eb64 0402 	sbc.w	r4, r4, r2
 801414c:	f04f 0100 	mov.w	r1, #0
 8014150:	f04f 0200 	mov.w	r2, #0
 8014154:	00e2      	lsls	r2, r4, #3
 8014156:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801415a:	00d9      	lsls	r1, r3, #3
 801415c:	460b      	mov	r3, r1
 801415e:	4614      	mov	r4, r2
 8014160:	195b      	adds	r3, r3, r5
 8014162:	eb44 0406 	adc.w	r4, r4, r6
 8014166:	f04f 0100 	mov.w	r1, #0
 801416a:	f04f 0200 	mov.w	r2, #0
 801416e:	0262      	lsls	r2, r4, #9
 8014170:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8014174:	0259      	lsls	r1, r3, #9
 8014176:	460b      	mov	r3, r1
 8014178:	4614      	mov	r4, r2
 801417a:	4618      	mov	r0, r3
 801417c:	4621      	mov	r1, r4
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	f04f 0400 	mov.w	r4, #0
 8014184:	461a      	mov	r2, r3
 8014186:	4623      	mov	r3, r4
 8014188:	f7f4 fcb6 	bl	8008af8 <__aeabi_uldivmod>
 801418c:	4603      	mov	r3, r0
 801418e:	460c      	mov	r4, r1
 8014190:	60fb      	str	r3, [r7, #12]
 8014192:	e049      	b.n	8014228 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014194:	4b2f      	ldr	r3, [pc, #188]	; (8014254 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8014196:	685b      	ldr	r3, [r3, #4]
 8014198:	099b      	lsrs	r3, r3, #6
 801419a:	f04f 0400 	mov.w	r4, #0
 801419e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80141a2:	f04f 0200 	mov.w	r2, #0
 80141a6:	ea03 0501 	and.w	r5, r3, r1
 80141aa:	ea04 0602 	and.w	r6, r4, r2
 80141ae:	4629      	mov	r1, r5
 80141b0:	4632      	mov	r2, r6
 80141b2:	f04f 0300 	mov.w	r3, #0
 80141b6:	f04f 0400 	mov.w	r4, #0
 80141ba:	0154      	lsls	r4, r2, #5
 80141bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80141c0:	014b      	lsls	r3, r1, #5
 80141c2:	4619      	mov	r1, r3
 80141c4:	4622      	mov	r2, r4
 80141c6:	1b49      	subs	r1, r1, r5
 80141c8:	eb62 0206 	sbc.w	r2, r2, r6
 80141cc:	f04f 0300 	mov.w	r3, #0
 80141d0:	f04f 0400 	mov.w	r4, #0
 80141d4:	0194      	lsls	r4, r2, #6
 80141d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80141da:	018b      	lsls	r3, r1, #6
 80141dc:	1a5b      	subs	r3, r3, r1
 80141de:	eb64 0402 	sbc.w	r4, r4, r2
 80141e2:	f04f 0100 	mov.w	r1, #0
 80141e6:	f04f 0200 	mov.w	r2, #0
 80141ea:	00e2      	lsls	r2, r4, #3
 80141ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80141f0:	00d9      	lsls	r1, r3, #3
 80141f2:	460b      	mov	r3, r1
 80141f4:	4614      	mov	r4, r2
 80141f6:	195b      	adds	r3, r3, r5
 80141f8:	eb44 0406 	adc.w	r4, r4, r6
 80141fc:	f04f 0100 	mov.w	r1, #0
 8014200:	f04f 0200 	mov.w	r2, #0
 8014204:	02a2      	lsls	r2, r4, #10
 8014206:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801420a:	0299      	lsls	r1, r3, #10
 801420c:	460b      	mov	r3, r1
 801420e:	4614      	mov	r4, r2
 8014210:	4618      	mov	r0, r3
 8014212:	4621      	mov	r1, r4
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f04f 0400 	mov.w	r4, #0
 801421a:	461a      	mov	r2, r3
 801421c:	4623      	mov	r3, r4
 801421e:	f7f4 fc6b 	bl	8008af8 <__aeabi_uldivmod>
 8014222:	4603      	mov	r3, r0
 8014224:	460c      	mov	r4, r1
 8014226:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8014228:	4b0a      	ldr	r3, [pc, #40]	; (8014254 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	0c1b      	lsrs	r3, r3, #16
 801422e:	f003 0303 	and.w	r3, r3, #3
 8014232:	3301      	adds	r3, #1
 8014234:	005b      	lsls	r3, r3, #1
 8014236:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8014238:	68fa      	ldr	r2, [r7, #12]
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014240:	60bb      	str	r3, [r7, #8]
      break;
 8014242:	e002      	b.n	801424a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8014244:	4b04      	ldr	r3, [pc, #16]	; (8014258 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8014246:	60bb      	str	r3, [r7, #8]
      break;
 8014248:	bf00      	nop
    }
  }
  return sysclockfreq;
 801424a:	68bb      	ldr	r3, [r7, #8]
}
 801424c:	4618      	mov	r0, r3
 801424e:	3714      	adds	r7, #20
 8014250:	46bd      	mov	sp, r7
 8014252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014254:	40023800 	.word	0x40023800
 8014258:	00f42400 	.word	0x00f42400
 801425c:	007a1200 	.word	0x007a1200

08014260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014260:	b480      	push	{r7}
 8014262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014264:	4b03      	ldr	r3, [pc, #12]	; (8014274 <HAL_RCC_GetHCLKFreq+0x14>)
 8014266:	681b      	ldr	r3, [r3, #0]
}
 8014268:	4618      	mov	r0, r3
 801426a:	46bd      	mov	sp, r7
 801426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014270:	4770      	bx	lr
 8014272:	bf00      	nop
 8014274:	20000020 	.word	0x20000020

08014278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801427c:	f7ff fff0 	bl	8014260 <HAL_RCC_GetHCLKFreq>
 8014280:	4601      	mov	r1, r0
 8014282:	4b05      	ldr	r3, [pc, #20]	; (8014298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8014284:	689b      	ldr	r3, [r3, #8]
 8014286:	0a9b      	lsrs	r3, r3, #10
 8014288:	f003 0307 	and.w	r3, r3, #7
 801428c:	4a03      	ldr	r2, [pc, #12]	; (801429c <HAL_RCC_GetPCLK1Freq+0x24>)
 801428e:	5cd3      	ldrb	r3, [r2, r3]
 8014290:	fa21 f303 	lsr.w	r3, r1, r3
}
 8014294:	4618      	mov	r0, r3
 8014296:	bd80      	pop	{r7, pc}
 8014298:	40023800 	.word	0x40023800
 801429c:	0801c6c8 	.word	0x0801c6c8

080142a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80142a4:	f7ff ffdc 	bl	8014260 <HAL_RCC_GetHCLKFreq>
 80142a8:	4601      	mov	r1, r0
 80142aa:	4b05      	ldr	r3, [pc, #20]	; (80142c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80142ac:	689b      	ldr	r3, [r3, #8]
 80142ae:	0b5b      	lsrs	r3, r3, #13
 80142b0:	f003 0307 	and.w	r3, r3, #7
 80142b4:	4a03      	ldr	r2, [pc, #12]	; (80142c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80142b6:	5cd3      	ldrb	r3, [r2, r3]
 80142b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80142bc:	4618      	mov	r0, r3
 80142be:	bd80      	pop	{r7, pc}
 80142c0:	40023800 	.word	0x40023800
 80142c4:	0801c6c8 	.word	0x0801c6c8

080142c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b082      	sub	sp, #8
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d101      	bne.n	80142da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80142d6:	2301      	movs	r3, #1
 80142d8:	e056      	b.n	8014388 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	2200      	movs	r2, #0
 80142de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80142e6:	b2db      	uxtb	r3, r3
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d106      	bne.n	80142fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2200      	movs	r2, #0
 80142f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f7fb fdaf 	bl	800fe58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2202      	movs	r2, #2
 80142fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	681a      	ldr	r2, [r3, #0]
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014310:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	685a      	ldr	r2, [r3, #4]
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	689b      	ldr	r3, [r3, #8]
 801431a:	431a      	orrs	r2, r3
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	68db      	ldr	r3, [r3, #12]
 8014320:	431a      	orrs	r2, r3
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	691b      	ldr	r3, [r3, #16]
 8014326:	431a      	orrs	r2, r3
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	695b      	ldr	r3, [r3, #20]
 801432c:	431a      	orrs	r2, r3
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	699b      	ldr	r3, [r3, #24]
 8014332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014336:	431a      	orrs	r2, r3
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	69db      	ldr	r3, [r3, #28]
 801433c:	431a      	orrs	r2, r3
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	6a1b      	ldr	r3, [r3, #32]
 8014342:	ea42 0103 	orr.w	r1, r2, r3
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	430a      	orrs	r2, r1
 8014350:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	699b      	ldr	r3, [r3, #24]
 8014356:	0c1b      	lsrs	r3, r3, #16
 8014358:	f003 0104 	and.w	r1, r3, #4
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	430a      	orrs	r2, r1
 8014366:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	69da      	ldr	r2, [r3, #28]
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014376:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2200      	movs	r2, #0
 801437c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2201      	movs	r2, #1
 8014382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8014386:	2300      	movs	r3, #0
}
 8014388:	4618      	mov	r0, r3
 801438a:	3708      	adds	r7, #8
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}

08014390 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b088      	sub	sp, #32
 8014394:	af00      	add	r7, sp, #0
 8014396:	60f8      	str	r0, [r7, #12]
 8014398:	60b9      	str	r1, [r7, #8]
 801439a:	603b      	str	r3, [r7, #0]
 801439c:	4613      	mov	r3, r2
 801439e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80143a0:	2300      	movs	r3, #0
 80143a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80143aa:	2b01      	cmp	r3, #1
 80143ac:	d101      	bne.n	80143b2 <HAL_SPI_Transmit+0x22>
 80143ae:	2302      	movs	r3, #2
 80143b0:	e11e      	b.n	80145f0 <HAL_SPI_Transmit+0x260>
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	2201      	movs	r2, #1
 80143b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80143ba:	f7fd fe11 	bl	8011fe0 <HAL_GetTick>
 80143be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80143c0:	88fb      	ldrh	r3, [r7, #6]
 80143c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80143ca:	b2db      	uxtb	r3, r3
 80143cc:	2b01      	cmp	r3, #1
 80143ce:	d002      	beq.n	80143d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80143d0:	2302      	movs	r3, #2
 80143d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80143d4:	e103      	b.n	80145de <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d002      	beq.n	80143e2 <HAL_SPI_Transmit+0x52>
 80143dc:	88fb      	ldrh	r3, [r7, #6]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d102      	bne.n	80143e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80143e2:	2301      	movs	r3, #1
 80143e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80143e6:	e0fa      	b.n	80145de <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	2203      	movs	r2, #3
 80143ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	2200      	movs	r2, #0
 80143f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	68ba      	ldr	r2, [r7, #8]
 80143fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	88fa      	ldrh	r2, [r7, #6]
 8014400:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	88fa      	ldrh	r2, [r7, #6]
 8014406:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	2200      	movs	r2, #0
 801440c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	2200      	movs	r2, #0
 8014412:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	2200      	movs	r2, #0
 8014418:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	2200      	movs	r2, #0
 801441e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	2200      	movs	r2, #0
 8014424:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	689b      	ldr	r3, [r3, #8]
 801442a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801442e:	d107      	bne.n	8014440 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	681a      	ldr	r2, [r3, #0]
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801443e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801444a:	2b40      	cmp	r3, #64	; 0x40
 801444c:	d007      	beq.n	801445e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	681a      	ldr	r2, [r3, #0]
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801445c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	68db      	ldr	r3, [r3, #12]
 8014462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014466:	d14b      	bne.n	8014500 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	685b      	ldr	r3, [r3, #4]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d002      	beq.n	8014476 <HAL_SPI_Transmit+0xe6>
 8014470:	8afb      	ldrh	r3, [r7, #22]
 8014472:	2b01      	cmp	r3, #1
 8014474:	d13e      	bne.n	80144f4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801447a:	881a      	ldrh	r2, [r3, #0]
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014486:	1c9a      	adds	r2, r3, #2
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014490:	b29b      	uxth	r3, r3
 8014492:	3b01      	subs	r3, #1
 8014494:	b29a      	uxth	r2, r3
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801449a:	e02b      	b.n	80144f4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	689b      	ldr	r3, [r3, #8]
 80144a2:	f003 0302 	and.w	r3, r3, #2
 80144a6:	2b02      	cmp	r3, #2
 80144a8:	d112      	bne.n	80144d0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144ae:	881a      	ldrh	r2, [r3, #0]
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144ba:	1c9a      	adds	r2, r3, #2
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	3b01      	subs	r3, #1
 80144c8:	b29a      	uxth	r2, r3
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80144ce:	e011      	b.n	80144f4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80144d0:	f7fd fd86 	bl	8011fe0 <HAL_GetTick>
 80144d4:	4602      	mov	r2, r0
 80144d6:	69bb      	ldr	r3, [r7, #24]
 80144d8:	1ad3      	subs	r3, r2, r3
 80144da:	683a      	ldr	r2, [r7, #0]
 80144dc:	429a      	cmp	r2, r3
 80144de:	d803      	bhi.n	80144e8 <HAL_SPI_Transmit+0x158>
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144e6:	d102      	bne.n	80144ee <HAL_SPI_Transmit+0x15e>
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d102      	bne.n	80144f4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80144ee:	2303      	movs	r3, #3
 80144f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80144f2:	e074      	b.n	80145de <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80144f8:	b29b      	uxth	r3, r3
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d1ce      	bne.n	801449c <HAL_SPI_Transmit+0x10c>
 80144fe:	e04c      	b.n	801459a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	685b      	ldr	r3, [r3, #4]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d002      	beq.n	801450e <HAL_SPI_Transmit+0x17e>
 8014508:	8afb      	ldrh	r3, [r7, #22]
 801450a:	2b01      	cmp	r3, #1
 801450c:	d140      	bne.n	8014590 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	330c      	adds	r3, #12
 8014518:	7812      	ldrb	r2, [r2, #0]
 801451a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014520:	1c5a      	adds	r2, r3, #1
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801452a:	b29b      	uxth	r3, r3
 801452c:	3b01      	subs	r3, #1
 801452e:	b29a      	uxth	r2, r3
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8014534:	e02c      	b.n	8014590 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	689b      	ldr	r3, [r3, #8]
 801453c:	f003 0302 	and.w	r3, r3, #2
 8014540:	2b02      	cmp	r3, #2
 8014542:	d113      	bne.n	801456c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	330c      	adds	r3, #12
 801454e:	7812      	ldrb	r2, [r2, #0]
 8014550:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014556:	1c5a      	adds	r2, r3, #1
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014560:	b29b      	uxth	r3, r3
 8014562:	3b01      	subs	r3, #1
 8014564:	b29a      	uxth	r2, r3
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	86da      	strh	r2, [r3, #54]	; 0x36
 801456a:	e011      	b.n	8014590 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801456c:	f7fd fd38 	bl	8011fe0 <HAL_GetTick>
 8014570:	4602      	mov	r2, r0
 8014572:	69bb      	ldr	r3, [r7, #24]
 8014574:	1ad3      	subs	r3, r2, r3
 8014576:	683a      	ldr	r2, [r7, #0]
 8014578:	429a      	cmp	r2, r3
 801457a:	d803      	bhi.n	8014584 <HAL_SPI_Transmit+0x1f4>
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014582:	d102      	bne.n	801458a <HAL_SPI_Transmit+0x1fa>
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d102      	bne.n	8014590 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 801458a:	2303      	movs	r3, #3
 801458c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801458e:	e026      	b.n	80145de <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014594:	b29b      	uxth	r3, r3
 8014596:	2b00      	cmp	r3, #0
 8014598:	d1cd      	bne.n	8014536 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801459a:	69ba      	ldr	r2, [r7, #24]
 801459c:	6839      	ldr	r1, [r7, #0]
 801459e:	68f8      	ldr	r0, [r7, #12]
 80145a0:	f000 fba4 	bl	8014cec <SPI_EndRxTxTransaction>
 80145a4:	4603      	mov	r3, r0
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d002      	beq.n	80145b0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	2220      	movs	r2, #32
 80145ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	689b      	ldr	r3, [r3, #8]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d10a      	bne.n	80145ce <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80145b8:	2300      	movs	r3, #0
 80145ba:	613b      	str	r3, [r7, #16]
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	68db      	ldr	r3, [r3, #12]
 80145c2:	613b      	str	r3, [r7, #16]
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	689b      	ldr	r3, [r3, #8]
 80145ca:	613b      	str	r3, [r7, #16]
 80145cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d002      	beq.n	80145dc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80145d6:	2301      	movs	r3, #1
 80145d8:	77fb      	strb	r3, [r7, #31]
 80145da:	e000      	b.n	80145de <HAL_SPI_Transmit+0x24e>
  }

error:
 80145dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	2201      	movs	r2, #1
 80145e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	2200      	movs	r2, #0
 80145ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80145ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3720      	adds	r7, #32
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}

080145f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b088      	sub	sp, #32
 80145fc:	af02      	add	r7, sp, #8
 80145fe:	60f8      	str	r0, [r7, #12]
 8014600:	60b9      	str	r1, [r7, #8]
 8014602:	603b      	str	r3, [r7, #0]
 8014604:	4613      	mov	r3, r2
 8014606:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014608:	2300      	movs	r3, #0
 801460a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	685b      	ldr	r3, [r3, #4]
 8014610:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014614:	d112      	bne.n	801463c <HAL_SPI_Receive+0x44>
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	689b      	ldr	r3, [r3, #8]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d10e      	bne.n	801463c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	2204      	movs	r2, #4
 8014622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8014626:	88fa      	ldrh	r2, [r7, #6]
 8014628:	683b      	ldr	r3, [r7, #0]
 801462a:	9300      	str	r3, [sp, #0]
 801462c:	4613      	mov	r3, r2
 801462e:	68ba      	ldr	r2, [r7, #8]
 8014630:	68b9      	ldr	r1, [r7, #8]
 8014632:	68f8      	ldr	r0, [r7, #12]
 8014634:	f000 f8e9 	bl	801480a <HAL_SPI_TransmitReceive>
 8014638:	4603      	mov	r3, r0
 801463a:	e0e2      	b.n	8014802 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014642:	2b01      	cmp	r3, #1
 8014644:	d101      	bne.n	801464a <HAL_SPI_Receive+0x52>
 8014646:	2302      	movs	r3, #2
 8014648:	e0db      	b.n	8014802 <HAL_SPI_Receive+0x20a>
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	2201      	movs	r2, #1
 801464e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014652:	f7fd fcc5 	bl	8011fe0 <HAL_GetTick>
 8014656:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801465e:	b2db      	uxtb	r3, r3
 8014660:	2b01      	cmp	r3, #1
 8014662:	d002      	beq.n	801466a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8014664:	2302      	movs	r3, #2
 8014666:	75fb      	strb	r3, [r7, #23]
    goto error;
 8014668:	e0c2      	b.n	80147f0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 801466a:	68bb      	ldr	r3, [r7, #8]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d002      	beq.n	8014676 <HAL_SPI_Receive+0x7e>
 8014670:	88fb      	ldrh	r3, [r7, #6]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d102      	bne.n	801467c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8014676:	2301      	movs	r3, #1
 8014678:	75fb      	strb	r3, [r7, #23]
    goto error;
 801467a:	e0b9      	b.n	80147f0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	2204      	movs	r2, #4
 8014680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	2200      	movs	r2, #0
 8014688:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	68ba      	ldr	r2, [r7, #8]
 801468e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	88fa      	ldrh	r2, [r7, #6]
 8014694:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	88fa      	ldrh	r2, [r7, #6]
 801469a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	2200      	movs	r2, #0
 80146a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	2200      	movs	r2, #0
 80146a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	2200      	movs	r2, #0
 80146ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	2200      	movs	r2, #0
 80146b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	2200      	movs	r2, #0
 80146b8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	689b      	ldr	r3, [r3, #8]
 80146be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80146c2:	d107      	bne.n	80146d4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	681a      	ldr	r2, [r3, #0]
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80146d2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146de:	2b40      	cmp	r3, #64	; 0x40
 80146e0:	d007      	beq.n	80146f2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	681a      	ldr	r2, [r3, #0]
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80146f0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	68db      	ldr	r3, [r3, #12]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d162      	bne.n	80147c0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80146fa:	e02e      	b.n	801475a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	689b      	ldr	r3, [r3, #8]
 8014702:	f003 0301 	and.w	r3, r3, #1
 8014706:	2b01      	cmp	r3, #1
 8014708:	d115      	bne.n	8014736 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	f103 020c 	add.w	r2, r3, #12
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014716:	7812      	ldrb	r2, [r2, #0]
 8014718:	b2d2      	uxtb	r2, r2
 801471a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014720:	1c5a      	adds	r2, r3, #1
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801472a:	b29b      	uxth	r3, r3
 801472c:	3b01      	subs	r3, #1
 801472e:	b29a      	uxth	r2, r3
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014734:	e011      	b.n	801475a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014736:	f7fd fc53 	bl	8011fe0 <HAL_GetTick>
 801473a:	4602      	mov	r2, r0
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	1ad3      	subs	r3, r2, r3
 8014740:	683a      	ldr	r2, [r7, #0]
 8014742:	429a      	cmp	r2, r3
 8014744:	d803      	bhi.n	801474e <HAL_SPI_Receive+0x156>
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	f1b3 3fff 	cmp.w	r3, #4294967295
 801474c:	d102      	bne.n	8014754 <HAL_SPI_Receive+0x15c>
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d102      	bne.n	801475a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8014754:	2303      	movs	r3, #3
 8014756:	75fb      	strb	r3, [r7, #23]
          goto error;
 8014758:	e04a      	b.n	80147f0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801475e:	b29b      	uxth	r3, r3
 8014760:	2b00      	cmp	r3, #0
 8014762:	d1cb      	bne.n	80146fc <HAL_SPI_Receive+0x104>
 8014764:	e031      	b.n	80147ca <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	689b      	ldr	r3, [r3, #8]
 801476c:	f003 0301 	and.w	r3, r3, #1
 8014770:	2b01      	cmp	r3, #1
 8014772:	d113      	bne.n	801479c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	68da      	ldr	r2, [r3, #12]
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801477e:	b292      	uxth	r2, r2
 8014780:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014786:	1c9a      	adds	r2, r3, #2
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014790:	b29b      	uxth	r3, r3
 8014792:	3b01      	subs	r3, #1
 8014794:	b29a      	uxth	r2, r3
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	87da      	strh	r2, [r3, #62]	; 0x3e
 801479a:	e011      	b.n	80147c0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801479c:	f7fd fc20 	bl	8011fe0 <HAL_GetTick>
 80147a0:	4602      	mov	r2, r0
 80147a2:	693b      	ldr	r3, [r7, #16]
 80147a4:	1ad3      	subs	r3, r2, r3
 80147a6:	683a      	ldr	r2, [r7, #0]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d803      	bhi.n	80147b4 <HAL_SPI_Receive+0x1bc>
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147b2:	d102      	bne.n	80147ba <HAL_SPI_Receive+0x1c2>
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d102      	bne.n	80147c0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80147ba:	2303      	movs	r3, #3
 80147bc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80147be:	e017      	b.n	80147f0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80147c4:	b29b      	uxth	r3, r3
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d1cd      	bne.n	8014766 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80147ca:	693a      	ldr	r2, [r7, #16]
 80147cc:	6839      	ldr	r1, [r7, #0]
 80147ce:	68f8      	ldr	r0, [r7, #12]
 80147d0:	f000 fa27 	bl	8014c22 <SPI_EndRxTransaction>
 80147d4:	4603      	mov	r3, r0
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d002      	beq.n	80147e0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	2220      	movs	r2, #32
 80147de:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d002      	beq.n	80147ee <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80147e8:	2301      	movs	r3, #1
 80147ea:	75fb      	strb	r3, [r7, #23]
 80147ec:	e000      	b.n	80147f0 <HAL_SPI_Receive+0x1f8>
  }

error :
 80147ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	2201      	movs	r2, #1
 80147f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	2200      	movs	r2, #0
 80147fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8014800:	7dfb      	ldrb	r3, [r7, #23]
}
 8014802:	4618      	mov	r0, r3
 8014804:	3718      	adds	r7, #24
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}

0801480a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801480a:	b580      	push	{r7, lr}
 801480c:	b08c      	sub	sp, #48	; 0x30
 801480e:	af00      	add	r7, sp, #0
 8014810:	60f8      	str	r0, [r7, #12]
 8014812:	60b9      	str	r1, [r7, #8]
 8014814:	607a      	str	r2, [r7, #4]
 8014816:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8014818:	2301      	movs	r3, #1
 801481a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801481c:	2300      	movs	r3, #0
 801481e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014828:	2b01      	cmp	r3, #1
 801482a:	d101      	bne.n	8014830 <HAL_SPI_TransmitReceive+0x26>
 801482c:	2302      	movs	r3, #2
 801482e:	e18a      	b.n	8014b46 <HAL_SPI_TransmitReceive+0x33c>
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	2201      	movs	r2, #1
 8014834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014838:	f7fd fbd2 	bl	8011fe0 <HAL_GetTick>
 801483c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	685b      	ldr	r3, [r3, #4]
 801484c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801484e:	887b      	ldrh	r3, [r7, #2]
 8014850:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8014852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014856:	2b01      	cmp	r3, #1
 8014858:	d00f      	beq.n	801487a <HAL_SPI_TransmitReceive+0x70>
 801485a:	69fb      	ldr	r3, [r7, #28]
 801485c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014860:	d107      	bne.n	8014872 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	689b      	ldr	r3, [r3, #8]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d103      	bne.n	8014872 <HAL_SPI_TransmitReceive+0x68>
 801486a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801486e:	2b04      	cmp	r3, #4
 8014870:	d003      	beq.n	801487a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8014872:	2302      	movs	r3, #2
 8014874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8014878:	e15b      	b.n	8014b32 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801487a:	68bb      	ldr	r3, [r7, #8]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d005      	beq.n	801488c <HAL_SPI_TransmitReceive+0x82>
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d002      	beq.n	801488c <HAL_SPI_TransmitReceive+0x82>
 8014886:	887b      	ldrh	r3, [r7, #2]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d103      	bne.n	8014894 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801488c:	2301      	movs	r3, #1
 801488e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8014892:	e14e      	b.n	8014b32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801489a:	b2db      	uxtb	r3, r3
 801489c:	2b04      	cmp	r3, #4
 801489e:	d003      	beq.n	80148a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	2205      	movs	r2, #5
 80148a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	2200      	movs	r2, #0
 80148ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	687a      	ldr	r2, [r7, #4]
 80148b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	887a      	ldrh	r2, [r7, #2]
 80148b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	887a      	ldrh	r2, [r7, #2]
 80148be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	68ba      	ldr	r2, [r7, #8]
 80148c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	887a      	ldrh	r2, [r7, #2]
 80148ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	887a      	ldrh	r2, [r7, #2]
 80148d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	2200      	movs	r2, #0
 80148d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	2200      	movs	r2, #0
 80148dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148e8:	2b40      	cmp	r3, #64	; 0x40
 80148ea:	d007      	beq.n	80148fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	681a      	ldr	r2, [r3, #0]
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80148fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	68db      	ldr	r3, [r3, #12]
 8014900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014904:	d178      	bne.n	80149f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	685b      	ldr	r3, [r3, #4]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d002      	beq.n	8014914 <HAL_SPI_TransmitReceive+0x10a>
 801490e:	8b7b      	ldrh	r3, [r7, #26]
 8014910:	2b01      	cmp	r3, #1
 8014912:	d166      	bne.n	80149e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014918:	881a      	ldrh	r2, [r3, #0]
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014924:	1c9a      	adds	r2, r3, #2
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801492e:	b29b      	uxth	r3, r3
 8014930:	3b01      	subs	r3, #1
 8014932:	b29a      	uxth	r2, r3
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014938:	e053      	b.n	80149e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	689b      	ldr	r3, [r3, #8]
 8014940:	f003 0302 	and.w	r3, r3, #2
 8014944:	2b02      	cmp	r3, #2
 8014946:	d11b      	bne.n	8014980 <HAL_SPI_TransmitReceive+0x176>
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801494c:	b29b      	uxth	r3, r3
 801494e:	2b00      	cmp	r3, #0
 8014950:	d016      	beq.n	8014980 <HAL_SPI_TransmitReceive+0x176>
 8014952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014954:	2b01      	cmp	r3, #1
 8014956:	d113      	bne.n	8014980 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801495c:	881a      	ldrh	r2, [r3, #0]
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014968:	1c9a      	adds	r2, r3, #2
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014972:	b29b      	uxth	r3, r3
 8014974:	3b01      	subs	r3, #1
 8014976:	b29a      	uxth	r2, r3
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801497c:	2300      	movs	r3, #0
 801497e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	689b      	ldr	r3, [r3, #8]
 8014986:	f003 0301 	and.w	r3, r3, #1
 801498a:	2b01      	cmp	r3, #1
 801498c:	d119      	bne.n	80149c2 <HAL_SPI_TransmitReceive+0x1b8>
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014992:	b29b      	uxth	r3, r3
 8014994:	2b00      	cmp	r3, #0
 8014996:	d014      	beq.n	80149c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	68da      	ldr	r2, [r3, #12]
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149a2:	b292      	uxth	r2, r2
 80149a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149aa:	1c9a      	adds	r2, r3, #2
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80149b4:	b29b      	uxth	r3, r3
 80149b6:	3b01      	subs	r3, #1
 80149b8:	b29a      	uxth	r2, r3
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80149be:	2301      	movs	r3, #1
 80149c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80149c2:	f7fd fb0d 	bl	8011fe0 <HAL_GetTick>
 80149c6:	4602      	mov	r2, r0
 80149c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ca:	1ad3      	subs	r3, r2, r3
 80149cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d807      	bhi.n	80149e2 <HAL_SPI_TransmitReceive+0x1d8>
 80149d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149d8:	d003      	beq.n	80149e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80149da:	2303      	movs	r3, #3
 80149dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80149e0:	e0a7      	b.n	8014b32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80149e6:	b29b      	uxth	r3, r3
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d1a6      	bne.n	801493a <HAL_SPI_TransmitReceive+0x130>
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80149f0:	b29b      	uxth	r3, r3
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d1a1      	bne.n	801493a <HAL_SPI_TransmitReceive+0x130>
 80149f6:	e07c      	b.n	8014af2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	685b      	ldr	r3, [r3, #4]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d002      	beq.n	8014a06 <HAL_SPI_TransmitReceive+0x1fc>
 8014a00:	8b7b      	ldrh	r3, [r7, #26]
 8014a02:	2b01      	cmp	r3, #1
 8014a04:	d16b      	bne.n	8014ade <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	330c      	adds	r3, #12
 8014a10:	7812      	ldrb	r2, [r2, #0]
 8014a12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a18:	1c5a      	adds	r2, r3, #1
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a22:	b29b      	uxth	r3, r3
 8014a24:	3b01      	subs	r3, #1
 8014a26:	b29a      	uxth	r2, r3
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014a2c:	e057      	b.n	8014ade <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	689b      	ldr	r3, [r3, #8]
 8014a34:	f003 0302 	and.w	r3, r3, #2
 8014a38:	2b02      	cmp	r3, #2
 8014a3a:	d11c      	bne.n	8014a76 <HAL_SPI_TransmitReceive+0x26c>
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a40:	b29b      	uxth	r3, r3
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d017      	beq.n	8014a76 <HAL_SPI_TransmitReceive+0x26c>
 8014a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	d114      	bne.n	8014a76 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	330c      	adds	r3, #12
 8014a56:	7812      	ldrb	r2, [r2, #0]
 8014a58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a5e:	1c5a      	adds	r2, r3, #1
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	3b01      	subs	r3, #1
 8014a6c:	b29a      	uxth	r2, r3
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014a72:	2300      	movs	r3, #0
 8014a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	689b      	ldr	r3, [r3, #8]
 8014a7c:	f003 0301 	and.w	r3, r3, #1
 8014a80:	2b01      	cmp	r3, #1
 8014a82:	d119      	bne.n	8014ab8 <HAL_SPI_TransmitReceive+0x2ae>
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014a88:	b29b      	uxth	r3, r3
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d014      	beq.n	8014ab8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	68da      	ldr	r2, [r3, #12]
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a98:	b2d2      	uxtb	r2, r2
 8014a9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014aa0:	1c5a      	adds	r2, r3, #1
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014aaa:	b29b      	uxth	r3, r3
 8014aac:	3b01      	subs	r3, #1
 8014aae:	b29a      	uxth	r2, r3
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014ab4:	2301      	movs	r3, #1
 8014ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014ab8:	f7fd fa92 	bl	8011fe0 <HAL_GetTick>
 8014abc:	4602      	mov	r2, r0
 8014abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ac0:	1ad3      	subs	r3, r2, r3
 8014ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	d803      	bhi.n	8014ad0 <HAL_SPI_TransmitReceive+0x2c6>
 8014ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ace:	d102      	bne.n	8014ad6 <HAL_SPI_TransmitReceive+0x2cc>
 8014ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d103      	bne.n	8014ade <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8014ad6:	2303      	movs	r3, #3
 8014ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8014adc:	e029      	b.n	8014b32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014ae2:	b29b      	uxth	r3, r3
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d1a2      	bne.n	8014a2e <HAL_SPI_TransmitReceive+0x224>
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014aec:	b29b      	uxth	r3, r3
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d19d      	bne.n	8014a2e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014af4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014af6:	68f8      	ldr	r0, [r7, #12]
 8014af8:	f000 f8f8 	bl	8014cec <SPI_EndRxTxTransaction>
 8014afc:	4603      	mov	r3, r0
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d006      	beq.n	8014b10 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8014b02:	2301      	movs	r3, #1
 8014b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	2220      	movs	r2, #32
 8014b0c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8014b0e:	e010      	b.n	8014b32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	689b      	ldr	r3, [r3, #8]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d10b      	bne.n	8014b30 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014b18:	2300      	movs	r3, #0
 8014b1a:	617b      	str	r3, [r7, #20]
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	68db      	ldr	r3, [r3, #12]
 8014b22:	617b      	str	r3, [r7, #20]
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	689b      	ldr	r3, [r3, #8]
 8014b2a:	617b      	str	r3, [r7, #20]
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	e000      	b.n	8014b32 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8014b30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	2201      	movs	r2, #1
 8014b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8014b42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3730      	adds	r7, #48	; 0x30
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bd80      	pop	{r7, pc}

08014b4e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014b4e:	b580      	push	{r7, lr}
 8014b50:	b084      	sub	sp, #16
 8014b52:	af00      	add	r7, sp, #0
 8014b54:	60f8      	str	r0, [r7, #12]
 8014b56:	60b9      	str	r1, [r7, #8]
 8014b58:	603b      	str	r3, [r7, #0]
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014b5e:	e04c      	b.n	8014bfa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b66:	d048      	beq.n	8014bfa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8014b68:	f7fd fa3a 	bl	8011fe0 <HAL_GetTick>
 8014b6c:	4602      	mov	r2, r0
 8014b6e:	69bb      	ldr	r3, [r7, #24]
 8014b70:	1ad3      	subs	r3, r2, r3
 8014b72:	683a      	ldr	r2, [r7, #0]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	d902      	bls.n	8014b7e <SPI_WaitFlagStateUntilTimeout+0x30>
 8014b78:	683b      	ldr	r3, [r7, #0]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d13d      	bne.n	8014bfa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	685a      	ldr	r2, [r3, #4]
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014b8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014b96:	d111      	bne.n	8014bbc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	689b      	ldr	r3, [r3, #8]
 8014b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ba0:	d004      	beq.n	8014bac <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	689b      	ldr	r3, [r3, #8]
 8014ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014baa:	d107      	bne.n	8014bbc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	681a      	ldr	r2, [r3, #0]
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014bba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014bc4:	d10f      	bne.n	8014be6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	681a      	ldr	r2, [r3, #0]
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014bd4:	601a      	str	r2, [r3, #0]
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	681a      	ldr	r2, [r3, #0]
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014be4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	2201      	movs	r2, #1
 8014bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8014bf6:	2303      	movs	r3, #3
 8014bf8:	e00f      	b.n	8014c1a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	689a      	ldr	r2, [r3, #8]
 8014c00:	68bb      	ldr	r3, [r7, #8]
 8014c02:	4013      	ands	r3, r2
 8014c04:	68ba      	ldr	r2, [r7, #8]
 8014c06:	429a      	cmp	r2, r3
 8014c08:	bf0c      	ite	eq
 8014c0a:	2301      	moveq	r3, #1
 8014c0c:	2300      	movne	r3, #0
 8014c0e:	b2db      	uxtb	r3, r3
 8014c10:	461a      	mov	r2, r3
 8014c12:	79fb      	ldrb	r3, [r7, #7]
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d1a3      	bne.n	8014b60 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8014c18:	2300      	movs	r3, #0
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3710      	adds	r7, #16
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}

08014c22 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8014c22:	b580      	push	{r7, lr}
 8014c24:	b086      	sub	sp, #24
 8014c26:	af02      	add	r7, sp, #8
 8014c28:	60f8      	str	r0, [r7, #12]
 8014c2a:	60b9      	str	r1, [r7, #8]
 8014c2c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	685b      	ldr	r3, [r3, #4]
 8014c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014c36:	d111      	bne.n	8014c5c <SPI_EndRxTransaction+0x3a>
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	689b      	ldr	r3, [r3, #8]
 8014c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014c40:	d004      	beq.n	8014c4c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	689b      	ldr	r3, [r3, #8]
 8014c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014c4a:	d107      	bne.n	8014c5c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	681a      	ldr	r2, [r3, #0]
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014c5a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	685b      	ldr	r3, [r3, #4]
 8014c60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014c64:	d12a      	bne.n	8014cbc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	689b      	ldr	r3, [r3, #8]
 8014c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014c6e:	d012      	beq.n	8014c96 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	9300      	str	r3, [sp, #0]
 8014c74:	68bb      	ldr	r3, [r7, #8]
 8014c76:	2200      	movs	r2, #0
 8014c78:	2180      	movs	r1, #128	; 0x80
 8014c7a:	68f8      	ldr	r0, [r7, #12]
 8014c7c:	f7ff ff67 	bl	8014b4e <SPI_WaitFlagStateUntilTimeout>
 8014c80:	4603      	mov	r3, r0
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d02d      	beq.n	8014ce2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c8a:	f043 0220 	orr.w	r2, r3, #32
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014c92:	2303      	movs	r3, #3
 8014c94:	e026      	b.n	8014ce4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	9300      	str	r3, [sp, #0]
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	2101      	movs	r1, #1
 8014ca0:	68f8      	ldr	r0, [r7, #12]
 8014ca2:	f7ff ff54 	bl	8014b4e <SPI_WaitFlagStateUntilTimeout>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d01a      	beq.n	8014ce2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cb0:	f043 0220 	orr.w	r2, r3, #32
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014cb8:	2303      	movs	r3, #3
 8014cba:	e013      	b.n	8014ce4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	9300      	str	r3, [sp, #0]
 8014cc0:	68bb      	ldr	r3, [r7, #8]
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	2101      	movs	r1, #1
 8014cc6:	68f8      	ldr	r0, [r7, #12]
 8014cc8:	f7ff ff41 	bl	8014b4e <SPI_WaitFlagStateUntilTimeout>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d007      	beq.n	8014ce2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cd6:	f043 0220 	orr.w	r2, r3, #32
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014cde:	2303      	movs	r3, #3
 8014ce0:	e000      	b.n	8014ce4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8014ce2:	2300      	movs	r3, #0
}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	3710      	adds	r7, #16
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	bd80      	pop	{r7, pc}

08014cec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b088      	sub	sp, #32
 8014cf0:	af02      	add	r7, sp, #8
 8014cf2:	60f8      	str	r0, [r7, #12]
 8014cf4:	60b9      	str	r1, [r7, #8]
 8014cf6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8014cf8:	4b1b      	ldr	r3, [pc, #108]	; (8014d68 <SPI_EndRxTxTransaction+0x7c>)
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	4a1b      	ldr	r2, [pc, #108]	; (8014d6c <SPI_EndRxTxTransaction+0x80>)
 8014cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8014d02:	0d5b      	lsrs	r3, r3, #21
 8014d04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014d08:	fb02 f303 	mul.w	r3, r2, r3
 8014d0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	685b      	ldr	r3, [r3, #4]
 8014d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014d16:	d112      	bne.n	8014d3e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	9300      	str	r3, [sp, #0]
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	2200      	movs	r2, #0
 8014d20:	2180      	movs	r1, #128	; 0x80
 8014d22:	68f8      	ldr	r0, [r7, #12]
 8014d24:	f7ff ff13 	bl	8014b4e <SPI_WaitFlagStateUntilTimeout>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d016      	beq.n	8014d5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d32:	f043 0220 	orr.w	r2, r3, #32
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014d3a:	2303      	movs	r3, #3
 8014d3c:	e00f      	b.n	8014d5e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8014d3e:	697b      	ldr	r3, [r7, #20]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d00a      	beq.n	8014d5a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8014d44:	697b      	ldr	r3, [r7, #20]
 8014d46:	3b01      	subs	r3, #1
 8014d48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	689b      	ldr	r3, [r3, #8]
 8014d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014d54:	2b80      	cmp	r3, #128	; 0x80
 8014d56:	d0f2      	beq.n	8014d3e <SPI_EndRxTxTransaction+0x52>
 8014d58:	e000      	b.n	8014d5c <SPI_EndRxTxTransaction+0x70>
        break;
 8014d5a:	bf00      	nop
  }

  return HAL_OK;
 8014d5c:	2300      	movs	r3, #0
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3718      	adds	r7, #24
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}
 8014d66:	bf00      	nop
 8014d68:	20000020 	.word	0x20000020
 8014d6c:	165e9f81 	.word	0x165e9f81

08014d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b082      	sub	sp, #8
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d101      	bne.n	8014d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014d7e:	2301      	movs	r3, #1
 8014d80:	e01d      	b.n	8014dbe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014d88:	b2db      	uxtb	r3, r3
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d106      	bne.n	8014d9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	2200      	movs	r2, #0
 8014d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f7fb f8a6 	bl	800fee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2202      	movs	r2, #2
 8014da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	681a      	ldr	r2, [r3, #0]
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	3304      	adds	r3, #4
 8014dac:	4619      	mov	r1, r3
 8014dae:	4610      	mov	r0, r2
 8014db0:	f000 fe96 	bl	8015ae0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	2201      	movs	r2, #1
 8014db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014dbc:	2300      	movs	r3, #0
}
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	3708      	adds	r7, #8
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}

08014dc6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014dc6:	b480      	push	{r7}
 8014dc8:	b085      	sub	sp, #20
 8014dca:	af00      	add	r7, sp, #0
 8014dcc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	68da      	ldr	r2, [r3, #12]
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	f042 0201 	orr.w	r2, r2, #1
 8014ddc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	689b      	ldr	r3, [r3, #8]
 8014de4:	f003 0307 	and.w	r3, r3, #7
 8014de8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	2b06      	cmp	r3, #6
 8014dee:	d007      	beq.n	8014e00 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	681a      	ldr	r2, [r3, #0]
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	f042 0201 	orr.w	r2, r2, #1
 8014dfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014e00:	2300      	movs	r3, #0
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	3714      	adds	r7, #20
 8014e06:	46bd      	mov	sp, r7
 8014e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0c:	4770      	bx	lr

08014e0e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8014e0e:	b480      	push	{r7}
 8014e10:	b083      	sub	sp, #12
 8014e12:	af00      	add	r7, sp, #0
 8014e14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	68da      	ldr	r2, [r3, #12]
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	f022 0201 	bic.w	r2, r2, #1
 8014e24:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	6a1a      	ldr	r2, [r3, #32]
 8014e2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8014e30:	4013      	ands	r3, r2
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d10f      	bne.n	8014e56 <HAL_TIM_Base_Stop_IT+0x48>
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	6a1a      	ldr	r2, [r3, #32]
 8014e3c:	f240 4344 	movw	r3, #1092	; 0x444
 8014e40:	4013      	ands	r3, r2
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d107      	bne.n	8014e56 <HAL_TIM_Base_Stop_IT+0x48>
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	681a      	ldr	r2, [r3, #0]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	f022 0201 	bic.w	r2, r2, #1
 8014e54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8014e56:	2300      	movs	r3, #0
}
 8014e58:	4618      	mov	r0, r3
 8014e5a:	370c      	adds	r7, #12
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e62:	4770      	bx	lr

08014e64 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b082      	sub	sp, #8
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d101      	bne.n	8014e76 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8014e72:	2301      	movs	r3, #1
 8014e74:	e01d      	b.n	8014eb2 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014e7c:	b2db      	uxtb	r3, r3
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d106      	bne.n	8014e90 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2200      	movs	r2, #0
 8014e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	f000 f815 	bl	8014eba <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2202      	movs	r2, #2
 8014e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	681a      	ldr	r2, [r3, #0]
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	3304      	adds	r3, #4
 8014ea0:	4619      	mov	r1, r3
 8014ea2:	4610      	mov	r0, r2
 8014ea4:	f000 fe1c 	bl	8015ae0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	2201      	movs	r2, #1
 8014eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014eb0:	2300      	movs	r3, #0
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	3708      	adds	r7, #8
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}

08014eba <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8014eba:	b480      	push	{r7}
 8014ebc:	b083      	sub	sp, #12
 8014ebe:	af00      	add	r7, sp, #0
 8014ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8014ec2:	bf00      	nop
 8014ec4:	370c      	adds	r7, #12
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ecc:	4770      	bx	lr
	...

08014ed0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b084      	sub	sp, #16
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	2b0c      	cmp	r3, #12
 8014ede:	d841      	bhi.n	8014f64 <HAL_TIM_OC_Start_IT+0x94>
 8014ee0:	a201      	add	r2, pc, #4	; (adr r2, 8014ee8 <HAL_TIM_OC_Start_IT+0x18>)
 8014ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ee6:	bf00      	nop
 8014ee8:	08014f1d 	.word	0x08014f1d
 8014eec:	08014f65 	.word	0x08014f65
 8014ef0:	08014f65 	.word	0x08014f65
 8014ef4:	08014f65 	.word	0x08014f65
 8014ef8:	08014f2f 	.word	0x08014f2f
 8014efc:	08014f65 	.word	0x08014f65
 8014f00:	08014f65 	.word	0x08014f65
 8014f04:	08014f65 	.word	0x08014f65
 8014f08:	08014f41 	.word	0x08014f41
 8014f0c:	08014f65 	.word	0x08014f65
 8014f10:	08014f65 	.word	0x08014f65
 8014f14:	08014f65 	.word	0x08014f65
 8014f18:	08014f53 	.word	0x08014f53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	68da      	ldr	r2, [r3, #12]
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	f042 0202 	orr.w	r2, r2, #2
 8014f2a:	60da      	str	r2, [r3, #12]
      break;
 8014f2c:	e01b      	b.n	8014f66 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	68da      	ldr	r2, [r3, #12]
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	f042 0204 	orr.w	r2, r2, #4
 8014f3c:	60da      	str	r2, [r3, #12]
      break;
 8014f3e:	e012      	b.n	8014f66 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	68da      	ldr	r2, [r3, #12]
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	f042 0208 	orr.w	r2, r2, #8
 8014f4e:	60da      	str	r2, [r3, #12]
      break;
 8014f50:	e009      	b.n	8014f66 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	68da      	ldr	r2, [r3, #12]
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	f042 0210 	orr.w	r2, r2, #16
 8014f60:	60da      	str	r2, [r3, #12]
      break;
 8014f62:	e000      	b.n	8014f66 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8014f64:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	2201      	movs	r2, #1
 8014f6c:	6839      	ldr	r1, [r7, #0]
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f001 f8a0 	bl	80160b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	4a15      	ldr	r2, [pc, #84]	; (8014fd0 <HAL_TIM_OC_Start_IT+0x100>)
 8014f7a:	4293      	cmp	r3, r2
 8014f7c:	d004      	beq.n	8014f88 <HAL_TIM_OC_Start_IT+0xb8>
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	4a14      	ldr	r2, [pc, #80]	; (8014fd4 <HAL_TIM_OC_Start_IT+0x104>)
 8014f84:	4293      	cmp	r3, r2
 8014f86:	d101      	bne.n	8014f8c <HAL_TIM_OC_Start_IT+0xbc>
 8014f88:	2301      	movs	r3, #1
 8014f8a:	e000      	b.n	8014f8e <HAL_TIM_OC_Start_IT+0xbe>
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d007      	beq.n	8014fa2 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014fa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	689b      	ldr	r3, [r3, #8]
 8014fa8:	f003 0307 	and.w	r3, r3, #7
 8014fac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	2b06      	cmp	r3, #6
 8014fb2:	d007      	beq.n	8014fc4 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	681a      	ldr	r2, [r3, #0]
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	f042 0201 	orr.w	r2, r2, #1
 8014fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014fc4:	2300      	movs	r3, #0
}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	3710      	adds	r7, #16
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bd80      	pop	{r7, pc}
 8014fce:	bf00      	nop
 8014fd0:	40010000 	.word	0x40010000
 8014fd4:	40010400 	.word	0x40010400

08014fd8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b082      	sub	sp, #8
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
 8014fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	2b0c      	cmp	r3, #12
 8014fe6:	d841      	bhi.n	801506c <HAL_TIM_OC_Stop_IT+0x94>
 8014fe8:	a201      	add	r2, pc, #4	; (adr r2, 8014ff0 <HAL_TIM_OC_Stop_IT+0x18>)
 8014fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fee:	bf00      	nop
 8014ff0:	08015025 	.word	0x08015025
 8014ff4:	0801506d 	.word	0x0801506d
 8014ff8:	0801506d 	.word	0x0801506d
 8014ffc:	0801506d 	.word	0x0801506d
 8015000:	08015037 	.word	0x08015037
 8015004:	0801506d 	.word	0x0801506d
 8015008:	0801506d 	.word	0x0801506d
 801500c:	0801506d 	.word	0x0801506d
 8015010:	08015049 	.word	0x08015049
 8015014:	0801506d 	.word	0x0801506d
 8015018:	0801506d 	.word	0x0801506d
 801501c:	0801506d 	.word	0x0801506d
 8015020:	0801505b 	.word	0x0801505b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	68da      	ldr	r2, [r3, #12]
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	f022 0202 	bic.w	r2, r2, #2
 8015032:	60da      	str	r2, [r3, #12]
      break;
 8015034:	e01b      	b.n	801506e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	68da      	ldr	r2, [r3, #12]
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	f022 0204 	bic.w	r2, r2, #4
 8015044:	60da      	str	r2, [r3, #12]
      break;
 8015046:	e012      	b.n	801506e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	68da      	ldr	r2, [r3, #12]
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	f022 0208 	bic.w	r2, r2, #8
 8015056:	60da      	str	r2, [r3, #12]
      break;
 8015058:	e009      	b.n	801506e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	68da      	ldr	r2, [r3, #12]
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	f022 0210 	bic.w	r2, r2, #16
 8015068:	60da      	str	r2, [r3, #12]
      break;
 801506a:	e000      	b.n	801506e <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 801506c:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	2200      	movs	r2, #0
 8015074:	6839      	ldr	r1, [r7, #0]
 8015076:	4618      	mov	r0, r3
 8015078:	f001 f81c 	bl	80160b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	4a20      	ldr	r2, [pc, #128]	; (8015104 <HAL_TIM_OC_Stop_IT+0x12c>)
 8015082:	4293      	cmp	r3, r2
 8015084:	d004      	beq.n	8015090 <HAL_TIM_OC_Stop_IT+0xb8>
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	4a1f      	ldr	r2, [pc, #124]	; (8015108 <HAL_TIM_OC_Stop_IT+0x130>)
 801508c:	4293      	cmp	r3, r2
 801508e:	d101      	bne.n	8015094 <HAL_TIM_OC_Stop_IT+0xbc>
 8015090:	2301      	movs	r3, #1
 8015092:	e000      	b.n	8015096 <HAL_TIM_OC_Stop_IT+0xbe>
 8015094:	2300      	movs	r3, #0
 8015096:	2b00      	cmp	r3, #0
 8015098:	d017      	beq.n	80150ca <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	6a1a      	ldr	r2, [r3, #32]
 80150a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80150a4:	4013      	ands	r3, r2
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d10f      	bne.n	80150ca <HAL_TIM_OC_Stop_IT+0xf2>
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	6a1a      	ldr	r2, [r3, #32]
 80150b0:	f240 4344 	movw	r3, #1092	; 0x444
 80150b4:	4013      	ands	r3, r2
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d107      	bne.n	80150ca <HAL_TIM_OC_Stop_IT+0xf2>
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80150c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	6a1a      	ldr	r2, [r3, #32]
 80150d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80150d4:	4013      	ands	r3, r2
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d10f      	bne.n	80150fa <HAL_TIM_OC_Stop_IT+0x122>
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	6a1a      	ldr	r2, [r3, #32]
 80150e0:	f240 4344 	movw	r3, #1092	; 0x444
 80150e4:	4013      	ands	r3, r2
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d107      	bne.n	80150fa <HAL_TIM_OC_Stop_IT+0x122>
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	681a      	ldr	r2, [r3, #0]
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	f022 0201 	bic.w	r2, r2, #1
 80150f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80150fa:	2300      	movs	r3, #0
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	3708      	adds	r7, #8
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}
 8015104:	40010000 	.word	0x40010000
 8015108:	40010400 	.word	0x40010400

0801510c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b082      	sub	sp, #8
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d101      	bne.n	801511e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801511a:	2301      	movs	r3, #1
 801511c:	e01d      	b.n	801515a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015124:	b2db      	uxtb	r3, r3
 8015126:	2b00      	cmp	r3, #0
 8015128:	d106      	bne.n	8015138 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	2200      	movs	r2, #0
 801512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f000 f815 	bl	8015162 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2202      	movs	r2, #2
 801513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	681a      	ldr	r2, [r3, #0]
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	3304      	adds	r3, #4
 8015148:	4619      	mov	r1, r3
 801514a:	4610      	mov	r0, r2
 801514c:	f000 fcc8 	bl	8015ae0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2201      	movs	r2, #1
 8015154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015158:	2300      	movs	r3, #0
}
 801515a:	4618      	mov	r0, r3
 801515c:	3708      	adds	r7, #8
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}

08015162 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8015162:	b480      	push	{r7}
 8015164:	b083      	sub	sp, #12
 8015166:	af00      	add	r7, sp, #0
 8015168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801516a:	bf00      	nop
 801516c:	370c      	adds	r7, #12
 801516e:	46bd      	mov	sp, r7
 8015170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015174:	4770      	bx	lr
	...

08015178 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b084      	sub	sp, #16
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
 8015180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	2201      	movs	r2, #1
 8015188:	6839      	ldr	r1, [r7, #0]
 801518a:	4618      	mov	r0, r3
 801518c:	f000 ff92 	bl	80160b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	4a15      	ldr	r2, [pc, #84]	; (80151ec <HAL_TIM_PWM_Start+0x74>)
 8015196:	4293      	cmp	r3, r2
 8015198:	d004      	beq.n	80151a4 <HAL_TIM_PWM_Start+0x2c>
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	4a14      	ldr	r2, [pc, #80]	; (80151f0 <HAL_TIM_PWM_Start+0x78>)
 80151a0:	4293      	cmp	r3, r2
 80151a2:	d101      	bne.n	80151a8 <HAL_TIM_PWM_Start+0x30>
 80151a4:	2301      	movs	r3, #1
 80151a6:	e000      	b.n	80151aa <HAL_TIM_PWM_Start+0x32>
 80151a8:	2300      	movs	r3, #0
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d007      	beq.n	80151be <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80151bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	689b      	ldr	r3, [r3, #8]
 80151c4:	f003 0307 	and.w	r3, r3, #7
 80151c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	2b06      	cmp	r3, #6
 80151ce:	d007      	beq.n	80151e0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	681a      	ldr	r2, [r3, #0]
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	f042 0201 	orr.w	r2, r2, #1
 80151de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80151e0:	2300      	movs	r3, #0
}
 80151e2:	4618      	mov	r0, r3
 80151e4:	3710      	adds	r7, #16
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}
 80151ea:	bf00      	nop
 80151ec:	40010000 	.word	0x40010000
 80151f0:	40010400 	.word	0x40010400

080151f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b082      	sub	sp, #8
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
 80151fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	2200      	movs	r2, #0
 8015204:	6839      	ldr	r1, [r7, #0]
 8015206:	4618      	mov	r0, r3
 8015208:	f000 ff54 	bl	80160b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	4a22      	ldr	r2, [pc, #136]	; (801529c <HAL_TIM_PWM_Stop+0xa8>)
 8015212:	4293      	cmp	r3, r2
 8015214:	d004      	beq.n	8015220 <HAL_TIM_PWM_Stop+0x2c>
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	4a21      	ldr	r2, [pc, #132]	; (80152a0 <HAL_TIM_PWM_Stop+0xac>)
 801521c:	4293      	cmp	r3, r2
 801521e:	d101      	bne.n	8015224 <HAL_TIM_PWM_Stop+0x30>
 8015220:	2301      	movs	r3, #1
 8015222:	e000      	b.n	8015226 <HAL_TIM_PWM_Stop+0x32>
 8015224:	2300      	movs	r3, #0
 8015226:	2b00      	cmp	r3, #0
 8015228:	d017      	beq.n	801525a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	6a1a      	ldr	r2, [r3, #32]
 8015230:	f241 1311 	movw	r3, #4369	; 0x1111
 8015234:	4013      	ands	r3, r2
 8015236:	2b00      	cmp	r3, #0
 8015238:	d10f      	bne.n	801525a <HAL_TIM_PWM_Stop+0x66>
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	6a1a      	ldr	r2, [r3, #32]
 8015240:	f240 4344 	movw	r3, #1092	; 0x444
 8015244:	4013      	ands	r3, r2
 8015246:	2b00      	cmp	r3, #0
 8015248:	d107      	bne.n	801525a <HAL_TIM_PWM_Stop+0x66>
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015258:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	6a1a      	ldr	r2, [r3, #32]
 8015260:	f241 1311 	movw	r3, #4369	; 0x1111
 8015264:	4013      	ands	r3, r2
 8015266:	2b00      	cmp	r3, #0
 8015268:	d10f      	bne.n	801528a <HAL_TIM_PWM_Stop+0x96>
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	6a1a      	ldr	r2, [r3, #32]
 8015270:	f240 4344 	movw	r3, #1092	; 0x444
 8015274:	4013      	ands	r3, r2
 8015276:	2b00      	cmp	r3, #0
 8015278:	d107      	bne.n	801528a <HAL_TIM_PWM_Stop+0x96>
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	681a      	ldr	r2, [r3, #0]
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	f022 0201 	bic.w	r2, r2, #1
 8015288:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	2201      	movs	r2, #1
 801528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8015292:	2300      	movs	r3, #0
}
 8015294:	4618      	mov	r0, r3
 8015296:	3708      	adds	r7, #8
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}
 801529c:	40010000 	.word	0x40010000
 80152a0:	40010400 	.word	0x40010400

080152a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b086      	sub	sp, #24
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
 80152ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d101      	bne.n	80152b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80152b4:	2301      	movs	r3, #1
 80152b6:	e083      	b.n	80153c0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80152be:	b2db      	uxtb	r3, r3
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d106      	bne.n	80152d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2200      	movs	r2, #0
 80152c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80152cc:	6878      	ldr	r0, [r7, #4]
 80152ce:	f7fa fe7b 	bl	800ffc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2202      	movs	r2, #2
 80152d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	689b      	ldr	r3, [r3, #8]
 80152e0:	687a      	ldr	r2, [r7, #4]
 80152e2:	6812      	ldr	r2, [r2, #0]
 80152e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80152e8:	f023 0307 	bic.w	r3, r3, #7
 80152ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	681a      	ldr	r2, [r3, #0]
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	3304      	adds	r3, #4
 80152f6:	4619      	mov	r1, r3
 80152f8:	4610      	mov	r0, r2
 80152fa:	f000 fbf1 	bl	8015ae0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	689b      	ldr	r3, [r3, #8]
 8015304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	699b      	ldr	r3, [r3, #24]
 801530c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	6a1b      	ldr	r3, [r3, #32]
 8015314:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8015316:	683b      	ldr	r3, [r7, #0]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	697a      	ldr	r2, [r7, #20]
 801531c:	4313      	orrs	r3, r2
 801531e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015326:	f023 0303 	bic.w	r3, r3, #3
 801532a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801532c:	683b      	ldr	r3, [r7, #0]
 801532e:	689a      	ldr	r2, [r3, #8]
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	699b      	ldr	r3, [r3, #24]
 8015334:	021b      	lsls	r3, r3, #8
 8015336:	4313      	orrs	r3, r2
 8015338:	693a      	ldr	r2, [r7, #16]
 801533a:	4313      	orrs	r3, r2
 801533c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801533e:	693b      	ldr	r3, [r7, #16]
 8015340:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8015344:	f023 030c 	bic.w	r3, r3, #12
 8015348:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801534a:	693b      	ldr	r3, [r7, #16]
 801534c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015350:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015354:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	68da      	ldr	r2, [r3, #12]
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	69db      	ldr	r3, [r3, #28]
 801535e:	021b      	lsls	r3, r3, #8
 8015360:	4313      	orrs	r3, r2
 8015362:	693a      	ldr	r2, [r7, #16]
 8015364:	4313      	orrs	r3, r2
 8015366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	691b      	ldr	r3, [r3, #16]
 801536c:	011a      	lsls	r2, r3, #4
 801536e:	683b      	ldr	r3, [r7, #0]
 8015370:	6a1b      	ldr	r3, [r3, #32]
 8015372:	031b      	lsls	r3, r3, #12
 8015374:	4313      	orrs	r3, r2
 8015376:	693a      	ldr	r2, [r7, #16]
 8015378:	4313      	orrs	r3, r2
 801537a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8015382:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801538a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801538c:	683b      	ldr	r3, [r7, #0]
 801538e:	685a      	ldr	r2, [r3, #4]
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	695b      	ldr	r3, [r3, #20]
 8015394:	011b      	lsls	r3, r3, #4
 8015396:	4313      	orrs	r3, r2
 8015398:	68fa      	ldr	r2, [r7, #12]
 801539a:	4313      	orrs	r3, r2
 801539c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	697a      	ldr	r2, [r7, #20]
 80153a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	693a      	ldr	r2, [r7, #16]
 80153ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	68fa      	ldr	r2, [r7, #12]
 80153b4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2201      	movs	r2, #1
 80153ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80153be:	2300      	movs	r3, #0
}
 80153c0:	4618      	mov	r0, r3
 80153c2:	3718      	adds	r7, #24
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}

080153c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b082      	sub	sp, #8
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	6078      	str	r0, [r7, #4]
 80153d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d002      	beq.n	80153de <HAL_TIM_Encoder_Start+0x16>
 80153d8:	2b04      	cmp	r3, #4
 80153da:	d008      	beq.n	80153ee <HAL_TIM_Encoder_Start+0x26>
 80153dc:	e00f      	b.n	80153fe <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	2201      	movs	r2, #1
 80153e4:	2100      	movs	r1, #0
 80153e6:	4618      	mov	r0, r3
 80153e8:	f000 fe64 	bl	80160b4 <TIM_CCxChannelCmd>
      break;
 80153ec:	e016      	b.n	801541c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	2201      	movs	r2, #1
 80153f4:	2104      	movs	r1, #4
 80153f6:	4618      	mov	r0, r3
 80153f8:	f000 fe5c 	bl	80160b4 <TIM_CCxChannelCmd>
      break;
 80153fc:	e00e      	b.n	801541c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	2201      	movs	r2, #1
 8015404:	2100      	movs	r1, #0
 8015406:	4618      	mov	r0, r3
 8015408:	f000 fe54 	bl	80160b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	2201      	movs	r2, #1
 8015412:	2104      	movs	r1, #4
 8015414:	4618      	mov	r0, r3
 8015416:	f000 fe4d 	bl	80160b4 <TIM_CCxChannelCmd>
      break;
 801541a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	681a      	ldr	r2, [r3, #0]
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	f042 0201 	orr.w	r2, r2, #1
 801542a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801542c:	2300      	movs	r3, #0
}
 801542e:	4618      	mov	r0, r3
 8015430:	3708      	adds	r7, #8
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}

08015436 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015436:	b580      	push	{r7, lr}
 8015438:	b082      	sub	sp, #8
 801543a:	af00      	add	r7, sp, #0
 801543c:	6078      	str	r0, [r7, #4]
 801543e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8015440:	683b      	ldr	r3, [r7, #0]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d002      	beq.n	801544c <HAL_TIM_Encoder_Stop+0x16>
 8015446:	2b04      	cmp	r3, #4
 8015448:	d008      	beq.n	801545c <HAL_TIM_Encoder_Stop+0x26>
 801544a:	e00f      	b.n	801546c <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	2200      	movs	r2, #0
 8015452:	2100      	movs	r1, #0
 8015454:	4618      	mov	r0, r3
 8015456:	f000 fe2d 	bl	80160b4 <TIM_CCxChannelCmd>
      break;
 801545a:	e016      	b.n	801548a <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	2200      	movs	r2, #0
 8015462:	2104      	movs	r1, #4
 8015464:	4618      	mov	r0, r3
 8015466:	f000 fe25 	bl	80160b4 <TIM_CCxChannelCmd>
      break;
 801546a:	e00e      	b.n	801548a <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	2200      	movs	r2, #0
 8015472:	2100      	movs	r1, #0
 8015474:	4618      	mov	r0, r3
 8015476:	f000 fe1d 	bl	80160b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	2200      	movs	r2, #0
 8015480:	2104      	movs	r1, #4
 8015482:	4618      	mov	r0, r3
 8015484:	f000 fe16 	bl	80160b4 <TIM_CCxChannelCmd>
      break;
 8015488:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	6a1a      	ldr	r2, [r3, #32]
 8015490:	f241 1311 	movw	r3, #4369	; 0x1111
 8015494:	4013      	ands	r3, r2
 8015496:	2b00      	cmp	r3, #0
 8015498:	d10f      	bne.n	80154ba <HAL_TIM_Encoder_Stop+0x84>
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	6a1a      	ldr	r2, [r3, #32]
 80154a0:	f240 4344 	movw	r3, #1092	; 0x444
 80154a4:	4013      	ands	r3, r2
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d107      	bne.n	80154ba <HAL_TIM_Encoder_Stop+0x84>
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	681a      	ldr	r2, [r3, #0]
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	f022 0201 	bic.w	r2, r2, #1
 80154b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80154ba:	2300      	movs	r3, #0
}
 80154bc:	4618      	mov	r0, r3
 80154be:	3708      	adds	r7, #8
 80154c0:	46bd      	mov	sp, r7
 80154c2:	bd80      	pop	{r7, pc}

080154c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b082      	sub	sp, #8
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	691b      	ldr	r3, [r3, #16]
 80154d2:	f003 0302 	and.w	r3, r3, #2
 80154d6:	2b02      	cmp	r3, #2
 80154d8:	d122      	bne.n	8015520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	68db      	ldr	r3, [r3, #12]
 80154e0:	f003 0302 	and.w	r3, r3, #2
 80154e4:	2b02      	cmp	r3, #2
 80154e6:	d11b      	bne.n	8015520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	f06f 0202 	mvn.w	r2, #2
 80154f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	2201      	movs	r2, #1
 80154f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	699b      	ldr	r3, [r3, #24]
 80154fe:	f003 0303 	and.w	r3, r3, #3
 8015502:	2b00      	cmp	r3, #0
 8015504:	d003      	beq.n	801550e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015506:	6878      	ldr	r0, [r7, #4]
 8015508:	f000 facb 	bl	8015aa2 <HAL_TIM_IC_CaptureCallback>
 801550c:	e005      	b.n	801551a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801550e:	6878      	ldr	r0, [r7, #4]
 8015510:	f000 fabd 	bl	8015a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015514:	6878      	ldr	r0, [r7, #4]
 8015516:	f000 face 	bl	8015ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	2200      	movs	r2, #0
 801551e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	691b      	ldr	r3, [r3, #16]
 8015526:	f003 0304 	and.w	r3, r3, #4
 801552a:	2b04      	cmp	r3, #4
 801552c:	d122      	bne.n	8015574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	68db      	ldr	r3, [r3, #12]
 8015534:	f003 0304 	and.w	r3, r3, #4
 8015538:	2b04      	cmp	r3, #4
 801553a:	d11b      	bne.n	8015574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	f06f 0204 	mvn.w	r2, #4
 8015544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2202      	movs	r2, #2
 801554a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	699b      	ldr	r3, [r3, #24]
 8015552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015556:	2b00      	cmp	r3, #0
 8015558:	d003      	beq.n	8015562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f000 faa1 	bl	8015aa2 <HAL_TIM_IC_CaptureCallback>
 8015560:	e005      	b.n	801556e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015562:	6878      	ldr	r0, [r7, #4]
 8015564:	f000 fa93 	bl	8015a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f000 faa4 	bl	8015ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	2200      	movs	r2, #0
 8015572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	691b      	ldr	r3, [r3, #16]
 801557a:	f003 0308 	and.w	r3, r3, #8
 801557e:	2b08      	cmp	r3, #8
 8015580:	d122      	bne.n	80155c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	68db      	ldr	r3, [r3, #12]
 8015588:	f003 0308 	and.w	r3, r3, #8
 801558c:	2b08      	cmp	r3, #8
 801558e:	d11b      	bne.n	80155c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	f06f 0208 	mvn.w	r2, #8
 8015598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2204      	movs	r2, #4
 801559e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	69db      	ldr	r3, [r3, #28]
 80155a6:	f003 0303 	and.w	r3, r3, #3
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d003      	beq.n	80155b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80155ae:	6878      	ldr	r0, [r7, #4]
 80155b0:	f000 fa77 	bl	8015aa2 <HAL_TIM_IC_CaptureCallback>
 80155b4:	e005      	b.n	80155c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80155b6:	6878      	ldr	r0, [r7, #4]
 80155b8:	f000 fa69 	bl	8015a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80155bc:	6878      	ldr	r0, [r7, #4]
 80155be:	f000 fa7a 	bl	8015ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	2200      	movs	r2, #0
 80155c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	691b      	ldr	r3, [r3, #16]
 80155ce:	f003 0310 	and.w	r3, r3, #16
 80155d2:	2b10      	cmp	r3, #16
 80155d4:	d122      	bne.n	801561c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	68db      	ldr	r3, [r3, #12]
 80155dc:	f003 0310 	and.w	r3, r3, #16
 80155e0:	2b10      	cmp	r3, #16
 80155e2:	d11b      	bne.n	801561c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	f06f 0210 	mvn.w	r2, #16
 80155ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	2208      	movs	r2, #8
 80155f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	69db      	ldr	r3, [r3, #28]
 80155fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d003      	beq.n	801560a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015602:	6878      	ldr	r0, [r7, #4]
 8015604:	f000 fa4d 	bl	8015aa2 <HAL_TIM_IC_CaptureCallback>
 8015608:	e005      	b.n	8015616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f000 fa3f 	bl	8015a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f000 fa50 	bl	8015ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	2200      	movs	r2, #0
 801561a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	691b      	ldr	r3, [r3, #16]
 8015622:	f003 0301 	and.w	r3, r3, #1
 8015626:	2b01      	cmp	r3, #1
 8015628:	d10e      	bne.n	8015648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	68db      	ldr	r3, [r3, #12]
 8015630:	f003 0301 	and.w	r3, r3, #1
 8015634:	2b01      	cmp	r3, #1
 8015636:	d107      	bne.n	8015648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	f06f 0201 	mvn.w	r2, #1
 8015640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015642:	6878      	ldr	r0, [r7, #4]
 8015644:	f7f5 fa7e 	bl	800ab44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	691b      	ldr	r3, [r3, #16]
 801564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015652:	2b80      	cmp	r3, #128	; 0x80
 8015654:	d10e      	bne.n	8015674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	68db      	ldr	r3, [r3, #12]
 801565c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015660:	2b80      	cmp	r3, #128	; 0x80
 8015662:	d107      	bne.n	8015674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801566c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801566e:	6878      	ldr	r0, [r7, #4]
 8015670:	f000 fee8 	bl	8016444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	691b      	ldr	r3, [r3, #16]
 801567a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801567e:	2b40      	cmp	r3, #64	; 0x40
 8015680:	d10e      	bne.n	80156a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	68db      	ldr	r3, [r3, #12]
 8015688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801568c:	2b40      	cmp	r3, #64	; 0x40
 801568e:	d107      	bne.n	80156a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f000 fa15 	bl	8015aca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	691b      	ldr	r3, [r3, #16]
 80156a6:	f003 0320 	and.w	r3, r3, #32
 80156aa:	2b20      	cmp	r3, #32
 80156ac:	d10e      	bne.n	80156cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	68db      	ldr	r3, [r3, #12]
 80156b4:	f003 0320 	and.w	r3, r3, #32
 80156b8:	2b20      	cmp	r3, #32
 80156ba:	d107      	bne.n	80156cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	f06f 0220 	mvn.w	r2, #32
 80156c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80156c6:	6878      	ldr	r0, [r7, #4]
 80156c8:	f000 feb2 	bl	8016430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80156cc:	bf00      	nop
 80156ce:	3708      	adds	r7, #8
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}

080156d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b084      	sub	sp, #16
 80156d8:	af00      	add	r7, sp, #0
 80156da:	60f8      	str	r0, [r7, #12]
 80156dc:	60b9      	str	r1, [r7, #8]
 80156de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80156e6:	2b01      	cmp	r3, #1
 80156e8:	d101      	bne.n	80156ee <HAL_TIM_OC_ConfigChannel+0x1a>
 80156ea:	2302      	movs	r3, #2
 80156ec:	e04e      	b.n	801578c <HAL_TIM_OC_ConfigChannel+0xb8>
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	2201      	movs	r2, #1
 80156f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	2202      	movs	r2, #2
 80156fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2b0c      	cmp	r3, #12
 8015702:	d839      	bhi.n	8015778 <HAL_TIM_OC_ConfigChannel+0xa4>
 8015704:	a201      	add	r2, pc, #4	; (adr r2, 801570c <HAL_TIM_OC_ConfigChannel+0x38>)
 8015706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801570a:	bf00      	nop
 801570c:	08015741 	.word	0x08015741
 8015710:	08015779 	.word	0x08015779
 8015714:	08015779 	.word	0x08015779
 8015718:	08015779 	.word	0x08015779
 801571c:	0801574f 	.word	0x0801574f
 8015720:	08015779 	.word	0x08015779
 8015724:	08015779 	.word	0x08015779
 8015728:	08015779 	.word	0x08015779
 801572c:	0801575d 	.word	0x0801575d
 8015730:	08015779 	.word	0x08015779
 8015734:	08015779 	.word	0x08015779
 8015738:	08015779 	.word	0x08015779
 801573c:	0801576b 	.word	0x0801576b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	68b9      	ldr	r1, [r7, #8]
 8015746:	4618      	mov	r0, r3
 8015748:	f000 fa6a 	bl	8015c20 <TIM_OC1_SetConfig>
      break;
 801574c:	e015      	b.n	801577a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	68b9      	ldr	r1, [r7, #8]
 8015754:	4618      	mov	r0, r3
 8015756:	f000 fad3 	bl	8015d00 <TIM_OC2_SetConfig>
      break;
 801575a:	e00e      	b.n	801577a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	68b9      	ldr	r1, [r7, #8]
 8015762:	4618      	mov	r0, r3
 8015764:	f000 fb42 	bl	8015dec <TIM_OC3_SetConfig>
      break;
 8015768:	e007      	b.n	801577a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	68b9      	ldr	r1, [r7, #8]
 8015770:	4618      	mov	r0, r3
 8015772:	f000 fbaf 	bl	8015ed4 <TIM_OC4_SetConfig>
      break;
 8015776:	e000      	b.n	801577a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8015778:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	2201      	movs	r2, #1
 801577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	2200      	movs	r2, #0
 8015786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801578a:	2300      	movs	r3, #0
}
 801578c:	4618      	mov	r0, r3
 801578e:	3710      	adds	r7, #16
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}

08015794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b084      	sub	sp, #16
 8015798:	af00      	add	r7, sp, #0
 801579a:	60f8      	str	r0, [r7, #12]
 801579c:	60b9      	str	r1, [r7, #8]
 801579e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80157a6:	2b01      	cmp	r3, #1
 80157a8:	d101      	bne.n	80157ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80157aa:	2302      	movs	r3, #2
 80157ac:	e0b4      	b.n	8015918 <HAL_TIM_PWM_ConfigChannel+0x184>
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	2201      	movs	r2, #1
 80157b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	2202      	movs	r2, #2
 80157ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	2b0c      	cmp	r3, #12
 80157c2:	f200 809f 	bhi.w	8015904 <HAL_TIM_PWM_ConfigChannel+0x170>
 80157c6:	a201      	add	r2, pc, #4	; (adr r2, 80157cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80157c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157cc:	08015801 	.word	0x08015801
 80157d0:	08015905 	.word	0x08015905
 80157d4:	08015905 	.word	0x08015905
 80157d8:	08015905 	.word	0x08015905
 80157dc:	08015841 	.word	0x08015841
 80157e0:	08015905 	.word	0x08015905
 80157e4:	08015905 	.word	0x08015905
 80157e8:	08015905 	.word	0x08015905
 80157ec:	08015883 	.word	0x08015883
 80157f0:	08015905 	.word	0x08015905
 80157f4:	08015905 	.word	0x08015905
 80157f8:	08015905 	.word	0x08015905
 80157fc:	080158c3 	.word	0x080158c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	68b9      	ldr	r1, [r7, #8]
 8015806:	4618      	mov	r0, r3
 8015808:	f000 fa0a 	bl	8015c20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	699a      	ldr	r2, [r3, #24]
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	f042 0208 	orr.w	r2, r2, #8
 801581a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	699a      	ldr	r2, [r3, #24]
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	f022 0204 	bic.w	r2, r2, #4
 801582a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	6999      	ldr	r1, [r3, #24]
 8015832:	68bb      	ldr	r3, [r7, #8]
 8015834:	691a      	ldr	r2, [r3, #16]
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	430a      	orrs	r2, r1
 801583c:	619a      	str	r2, [r3, #24]
      break;
 801583e:	e062      	b.n	8015906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	68b9      	ldr	r1, [r7, #8]
 8015846:	4618      	mov	r0, r3
 8015848:	f000 fa5a 	bl	8015d00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	699a      	ldr	r2, [r3, #24]
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801585a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	699a      	ldr	r2, [r3, #24]
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801586a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	6999      	ldr	r1, [r3, #24]
 8015872:	68bb      	ldr	r3, [r7, #8]
 8015874:	691b      	ldr	r3, [r3, #16]
 8015876:	021a      	lsls	r2, r3, #8
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	430a      	orrs	r2, r1
 801587e:	619a      	str	r2, [r3, #24]
      break;
 8015880:	e041      	b.n	8015906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	68b9      	ldr	r1, [r7, #8]
 8015888:	4618      	mov	r0, r3
 801588a:	f000 faaf 	bl	8015dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	69da      	ldr	r2, [r3, #28]
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	f042 0208 	orr.w	r2, r2, #8
 801589c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	69da      	ldr	r2, [r3, #28]
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	f022 0204 	bic.w	r2, r2, #4
 80158ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	69d9      	ldr	r1, [r3, #28]
 80158b4:	68bb      	ldr	r3, [r7, #8]
 80158b6:	691a      	ldr	r2, [r3, #16]
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	430a      	orrs	r2, r1
 80158be:	61da      	str	r2, [r3, #28]
      break;
 80158c0:	e021      	b.n	8015906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	68b9      	ldr	r1, [r7, #8]
 80158c8:	4618      	mov	r0, r3
 80158ca:	f000 fb03 	bl	8015ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	69da      	ldr	r2, [r3, #28]
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80158dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	69da      	ldr	r2, [r3, #28]
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80158ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	69d9      	ldr	r1, [r3, #28]
 80158f4:	68bb      	ldr	r3, [r7, #8]
 80158f6:	691b      	ldr	r3, [r3, #16]
 80158f8:	021a      	lsls	r2, r3, #8
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	430a      	orrs	r2, r1
 8015900:	61da      	str	r2, [r3, #28]
      break;
 8015902:	e000      	b.n	8015906 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8015904:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	2201      	movs	r2, #1
 801590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2200      	movs	r2, #0
 8015912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015916:	2300      	movs	r3, #0
}
 8015918:	4618      	mov	r0, r3
 801591a:	3710      	adds	r7, #16
 801591c:	46bd      	mov	sp, r7
 801591e:	bd80      	pop	{r7, pc}

08015920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8015920:	b580      	push	{r7, lr}
 8015922:	b084      	sub	sp, #16
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
 8015928:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015930:	2b01      	cmp	r3, #1
 8015932:	d101      	bne.n	8015938 <HAL_TIM_ConfigClockSource+0x18>
 8015934:	2302      	movs	r3, #2
 8015936:	e0a6      	b.n	8015a86 <HAL_TIM_ConfigClockSource+0x166>
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	2201      	movs	r2, #1
 801593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2202      	movs	r2, #2
 8015944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	689b      	ldr	r3, [r3, #8]
 801594e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8015956:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801595e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	68fa      	ldr	r2, [r7, #12]
 8015966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	2b40      	cmp	r3, #64	; 0x40
 801596e:	d067      	beq.n	8015a40 <HAL_TIM_ConfigClockSource+0x120>
 8015970:	2b40      	cmp	r3, #64	; 0x40
 8015972:	d80b      	bhi.n	801598c <HAL_TIM_ConfigClockSource+0x6c>
 8015974:	2b10      	cmp	r3, #16
 8015976:	d073      	beq.n	8015a60 <HAL_TIM_ConfigClockSource+0x140>
 8015978:	2b10      	cmp	r3, #16
 801597a:	d802      	bhi.n	8015982 <HAL_TIM_ConfigClockSource+0x62>
 801597c:	2b00      	cmp	r3, #0
 801597e:	d06f      	beq.n	8015a60 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8015980:	e078      	b.n	8015a74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8015982:	2b20      	cmp	r3, #32
 8015984:	d06c      	beq.n	8015a60 <HAL_TIM_ConfigClockSource+0x140>
 8015986:	2b30      	cmp	r3, #48	; 0x30
 8015988:	d06a      	beq.n	8015a60 <HAL_TIM_ConfigClockSource+0x140>
      break;
 801598a:	e073      	b.n	8015a74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801598c:	2b70      	cmp	r3, #112	; 0x70
 801598e:	d00d      	beq.n	80159ac <HAL_TIM_ConfigClockSource+0x8c>
 8015990:	2b70      	cmp	r3, #112	; 0x70
 8015992:	d804      	bhi.n	801599e <HAL_TIM_ConfigClockSource+0x7e>
 8015994:	2b50      	cmp	r3, #80	; 0x50
 8015996:	d033      	beq.n	8015a00 <HAL_TIM_ConfigClockSource+0xe0>
 8015998:	2b60      	cmp	r3, #96	; 0x60
 801599a:	d041      	beq.n	8015a20 <HAL_TIM_ConfigClockSource+0x100>
      break;
 801599c:	e06a      	b.n	8015a74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801599e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80159a2:	d066      	beq.n	8015a72 <HAL_TIM_ConfigClockSource+0x152>
 80159a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80159a8:	d017      	beq.n	80159da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80159aa:	e063      	b.n	8015a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	6818      	ldr	r0, [r3, #0]
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	6899      	ldr	r1, [r3, #8]
 80159b4:	683b      	ldr	r3, [r7, #0]
 80159b6:	685a      	ldr	r2, [r3, #4]
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	68db      	ldr	r3, [r3, #12]
 80159bc:	f000 fb5a 	bl	8016074 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	689b      	ldr	r3, [r3, #8]
 80159c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80159ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	68fa      	ldr	r2, [r7, #12]
 80159d6:	609a      	str	r2, [r3, #8]
      break;
 80159d8:	e04c      	b.n	8015a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	6818      	ldr	r0, [r3, #0]
 80159de:	683b      	ldr	r3, [r7, #0]
 80159e0:	6899      	ldr	r1, [r3, #8]
 80159e2:	683b      	ldr	r3, [r7, #0]
 80159e4:	685a      	ldr	r2, [r3, #4]
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	68db      	ldr	r3, [r3, #12]
 80159ea:	f000 fb43 	bl	8016074 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	689a      	ldr	r2, [r3, #8]
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80159fc:	609a      	str	r2, [r3, #8]
      break;
 80159fe:	e039      	b.n	8015a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	6818      	ldr	r0, [r3, #0]
 8015a04:	683b      	ldr	r3, [r7, #0]
 8015a06:	6859      	ldr	r1, [r3, #4]
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	68db      	ldr	r3, [r3, #12]
 8015a0c:	461a      	mov	r2, r3
 8015a0e:	f000 fab7 	bl	8015f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	2150      	movs	r1, #80	; 0x50
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f000 fb10 	bl	801603e <TIM_ITRx_SetConfig>
      break;
 8015a1e:	e029      	b.n	8015a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	6818      	ldr	r0, [r3, #0]
 8015a24:	683b      	ldr	r3, [r7, #0]
 8015a26:	6859      	ldr	r1, [r3, #4]
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	68db      	ldr	r3, [r3, #12]
 8015a2c:	461a      	mov	r2, r3
 8015a2e:	f000 fad6 	bl	8015fde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	2160      	movs	r1, #96	; 0x60
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f000 fb00 	bl	801603e <TIM_ITRx_SetConfig>
      break;
 8015a3e:	e019      	b.n	8015a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6818      	ldr	r0, [r3, #0]
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	6859      	ldr	r1, [r3, #4]
 8015a48:	683b      	ldr	r3, [r7, #0]
 8015a4a:	68db      	ldr	r3, [r3, #12]
 8015a4c:	461a      	mov	r2, r3
 8015a4e:	f000 fa97 	bl	8015f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	2140      	movs	r1, #64	; 0x40
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f000 faf0 	bl	801603e <TIM_ITRx_SetConfig>
      break;
 8015a5e:	e009      	b.n	8015a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681a      	ldr	r2, [r3, #0]
 8015a64:	683b      	ldr	r3, [r7, #0]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	4619      	mov	r1, r3
 8015a6a:	4610      	mov	r0, r2
 8015a6c:	f000 fae7 	bl	801603e <TIM_ITRx_SetConfig>
      break;
 8015a70:	e000      	b.n	8015a74 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8015a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	2201      	movs	r2, #1
 8015a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	2200      	movs	r2, #0
 8015a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015a84:	2300      	movs	r3, #0
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	3710      	adds	r7, #16
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}

08015a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015a8e:	b480      	push	{r7}
 8015a90:	b083      	sub	sp, #12
 8015a92:	af00      	add	r7, sp, #0
 8015a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015a96:	bf00      	nop
 8015a98:	370c      	adds	r7, #12
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa0:	4770      	bx	lr

08015aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015aa2:	b480      	push	{r7}
 8015aa4:	b083      	sub	sp, #12
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015aaa:	bf00      	nop
 8015aac:	370c      	adds	r7, #12
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab4:	4770      	bx	lr

08015ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015ab6:	b480      	push	{r7}
 8015ab8:	b083      	sub	sp, #12
 8015aba:	af00      	add	r7, sp, #0
 8015abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015abe:	bf00      	nop
 8015ac0:	370c      	adds	r7, #12
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac8:	4770      	bx	lr

08015aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015aca:	b480      	push	{r7}
 8015acc:	b083      	sub	sp, #12
 8015ace:	af00      	add	r7, sp, #0
 8015ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015ad2:	bf00      	nop
 8015ad4:	370c      	adds	r7, #12
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015adc:	4770      	bx	lr
	...

08015ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015ae0:	b480      	push	{r7}
 8015ae2:	b085      	sub	sp, #20
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
 8015ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	4a40      	ldr	r2, [pc, #256]	; (8015bf4 <TIM_Base_SetConfig+0x114>)
 8015af4:	4293      	cmp	r3, r2
 8015af6:	d013      	beq.n	8015b20 <TIM_Base_SetConfig+0x40>
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015afe:	d00f      	beq.n	8015b20 <TIM_Base_SetConfig+0x40>
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	4a3d      	ldr	r2, [pc, #244]	; (8015bf8 <TIM_Base_SetConfig+0x118>)
 8015b04:	4293      	cmp	r3, r2
 8015b06:	d00b      	beq.n	8015b20 <TIM_Base_SetConfig+0x40>
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	4a3c      	ldr	r2, [pc, #240]	; (8015bfc <TIM_Base_SetConfig+0x11c>)
 8015b0c:	4293      	cmp	r3, r2
 8015b0e:	d007      	beq.n	8015b20 <TIM_Base_SetConfig+0x40>
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	4a3b      	ldr	r2, [pc, #236]	; (8015c00 <TIM_Base_SetConfig+0x120>)
 8015b14:	4293      	cmp	r3, r2
 8015b16:	d003      	beq.n	8015b20 <TIM_Base_SetConfig+0x40>
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	4a3a      	ldr	r2, [pc, #232]	; (8015c04 <TIM_Base_SetConfig+0x124>)
 8015b1c:	4293      	cmp	r3, r2
 8015b1e:	d108      	bne.n	8015b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	685b      	ldr	r3, [r3, #4]
 8015b2c:	68fa      	ldr	r2, [r7, #12]
 8015b2e:	4313      	orrs	r3, r2
 8015b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	4a2f      	ldr	r2, [pc, #188]	; (8015bf4 <TIM_Base_SetConfig+0x114>)
 8015b36:	4293      	cmp	r3, r2
 8015b38:	d02b      	beq.n	8015b92 <TIM_Base_SetConfig+0xb2>
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015b40:	d027      	beq.n	8015b92 <TIM_Base_SetConfig+0xb2>
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	4a2c      	ldr	r2, [pc, #176]	; (8015bf8 <TIM_Base_SetConfig+0x118>)
 8015b46:	4293      	cmp	r3, r2
 8015b48:	d023      	beq.n	8015b92 <TIM_Base_SetConfig+0xb2>
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	4a2b      	ldr	r2, [pc, #172]	; (8015bfc <TIM_Base_SetConfig+0x11c>)
 8015b4e:	4293      	cmp	r3, r2
 8015b50:	d01f      	beq.n	8015b92 <TIM_Base_SetConfig+0xb2>
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	4a2a      	ldr	r2, [pc, #168]	; (8015c00 <TIM_Base_SetConfig+0x120>)
 8015b56:	4293      	cmp	r3, r2
 8015b58:	d01b      	beq.n	8015b92 <TIM_Base_SetConfig+0xb2>
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	4a29      	ldr	r2, [pc, #164]	; (8015c04 <TIM_Base_SetConfig+0x124>)
 8015b5e:	4293      	cmp	r3, r2
 8015b60:	d017      	beq.n	8015b92 <TIM_Base_SetConfig+0xb2>
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	4a28      	ldr	r2, [pc, #160]	; (8015c08 <TIM_Base_SetConfig+0x128>)
 8015b66:	4293      	cmp	r3, r2
 8015b68:	d013      	beq.n	8015b92 <TIM_Base_SetConfig+0xb2>
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	4a27      	ldr	r2, [pc, #156]	; (8015c0c <TIM_Base_SetConfig+0x12c>)
 8015b6e:	4293      	cmp	r3, r2
 8015b70:	d00f      	beq.n	8015b92 <TIM_Base_SetConfig+0xb2>
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	4a26      	ldr	r2, [pc, #152]	; (8015c10 <TIM_Base_SetConfig+0x130>)
 8015b76:	4293      	cmp	r3, r2
 8015b78:	d00b      	beq.n	8015b92 <TIM_Base_SetConfig+0xb2>
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	4a25      	ldr	r2, [pc, #148]	; (8015c14 <TIM_Base_SetConfig+0x134>)
 8015b7e:	4293      	cmp	r3, r2
 8015b80:	d007      	beq.n	8015b92 <TIM_Base_SetConfig+0xb2>
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	4a24      	ldr	r2, [pc, #144]	; (8015c18 <TIM_Base_SetConfig+0x138>)
 8015b86:	4293      	cmp	r3, r2
 8015b88:	d003      	beq.n	8015b92 <TIM_Base_SetConfig+0xb2>
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	4a23      	ldr	r2, [pc, #140]	; (8015c1c <TIM_Base_SetConfig+0x13c>)
 8015b8e:	4293      	cmp	r3, r2
 8015b90:	d108      	bne.n	8015ba4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	68db      	ldr	r3, [r3, #12]
 8015b9e:	68fa      	ldr	r2, [r7, #12]
 8015ba0:	4313      	orrs	r3, r2
 8015ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	695b      	ldr	r3, [r3, #20]
 8015bae:	4313      	orrs	r3, r2
 8015bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	68fa      	ldr	r2, [r7, #12]
 8015bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015bb8:	683b      	ldr	r3, [r7, #0]
 8015bba:	689a      	ldr	r2, [r3, #8]
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015bc0:	683b      	ldr	r3, [r7, #0]
 8015bc2:	681a      	ldr	r2, [r3, #0]
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	4a0a      	ldr	r2, [pc, #40]	; (8015bf4 <TIM_Base_SetConfig+0x114>)
 8015bcc:	4293      	cmp	r3, r2
 8015bce:	d003      	beq.n	8015bd8 <TIM_Base_SetConfig+0xf8>
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	4a0c      	ldr	r2, [pc, #48]	; (8015c04 <TIM_Base_SetConfig+0x124>)
 8015bd4:	4293      	cmp	r3, r2
 8015bd6:	d103      	bne.n	8015be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	691a      	ldr	r2, [r3, #16]
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2201      	movs	r2, #1
 8015be4:	615a      	str	r2, [r3, #20]
}
 8015be6:	bf00      	nop
 8015be8:	3714      	adds	r7, #20
 8015bea:	46bd      	mov	sp, r7
 8015bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf0:	4770      	bx	lr
 8015bf2:	bf00      	nop
 8015bf4:	40010000 	.word	0x40010000
 8015bf8:	40000400 	.word	0x40000400
 8015bfc:	40000800 	.word	0x40000800
 8015c00:	40000c00 	.word	0x40000c00
 8015c04:	40010400 	.word	0x40010400
 8015c08:	40014000 	.word	0x40014000
 8015c0c:	40014400 	.word	0x40014400
 8015c10:	40014800 	.word	0x40014800
 8015c14:	40001800 	.word	0x40001800
 8015c18:	40001c00 	.word	0x40001c00
 8015c1c:	40002000 	.word	0x40002000

08015c20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015c20:	b480      	push	{r7}
 8015c22:	b087      	sub	sp, #28
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
 8015c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	6a1b      	ldr	r3, [r3, #32]
 8015c2e:	f023 0201 	bic.w	r2, r3, #1
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	6a1b      	ldr	r3, [r3, #32]
 8015c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	685b      	ldr	r3, [r3, #4]
 8015c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	699b      	ldr	r3, [r3, #24]
 8015c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	f023 0303 	bic.w	r3, r3, #3
 8015c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015c58:	683b      	ldr	r3, [r7, #0]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	68fa      	ldr	r2, [r7, #12]
 8015c5e:	4313      	orrs	r3, r2
 8015c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8015c62:	697b      	ldr	r3, [r7, #20]
 8015c64:	f023 0302 	bic.w	r3, r3, #2
 8015c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015c6a:	683b      	ldr	r3, [r7, #0]
 8015c6c:	689b      	ldr	r3, [r3, #8]
 8015c6e:	697a      	ldr	r2, [r7, #20]
 8015c70:	4313      	orrs	r3, r2
 8015c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	4a20      	ldr	r2, [pc, #128]	; (8015cf8 <TIM_OC1_SetConfig+0xd8>)
 8015c78:	4293      	cmp	r3, r2
 8015c7a:	d003      	beq.n	8015c84 <TIM_OC1_SetConfig+0x64>
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	4a1f      	ldr	r2, [pc, #124]	; (8015cfc <TIM_OC1_SetConfig+0xdc>)
 8015c80:	4293      	cmp	r3, r2
 8015c82:	d10c      	bne.n	8015c9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8015c84:	697b      	ldr	r3, [r7, #20]
 8015c86:	f023 0308 	bic.w	r3, r3, #8
 8015c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8015c8c:	683b      	ldr	r3, [r7, #0]
 8015c8e:	68db      	ldr	r3, [r3, #12]
 8015c90:	697a      	ldr	r2, [r7, #20]
 8015c92:	4313      	orrs	r3, r2
 8015c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8015c96:	697b      	ldr	r3, [r7, #20]
 8015c98:	f023 0304 	bic.w	r3, r3, #4
 8015c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	4a15      	ldr	r2, [pc, #84]	; (8015cf8 <TIM_OC1_SetConfig+0xd8>)
 8015ca2:	4293      	cmp	r3, r2
 8015ca4:	d003      	beq.n	8015cae <TIM_OC1_SetConfig+0x8e>
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	4a14      	ldr	r2, [pc, #80]	; (8015cfc <TIM_OC1_SetConfig+0xdc>)
 8015caa:	4293      	cmp	r3, r2
 8015cac:	d111      	bne.n	8015cd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8015cae:	693b      	ldr	r3, [r7, #16]
 8015cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8015cb6:	693b      	ldr	r3, [r7, #16]
 8015cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8015cbe:	683b      	ldr	r3, [r7, #0]
 8015cc0:	695b      	ldr	r3, [r3, #20]
 8015cc2:	693a      	ldr	r2, [r7, #16]
 8015cc4:	4313      	orrs	r3, r2
 8015cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015cc8:	683b      	ldr	r3, [r7, #0]
 8015cca:	699b      	ldr	r3, [r3, #24]
 8015ccc:	693a      	ldr	r2, [r7, #16]
 8015cce:	4313      	orrs	r3, r2
 8015cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	693a      	ldr	r2, [r7, #16]
 8015cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	68fa      	ldr	r2, [r7, #12]
 8015cdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	685a      	ldr	r2, [r3, #4]
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	697a      	ldr	r2, [r7, #20]
 8015cea:	621a      	str	r2, [r3, #32]
}
 8015cec:	bf00      	nop
 8015cee:	371c      	adds	r7, #28
 8015cf0:	46bd      	mov	sp, r7
 8015cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf6:	4770      	bx	lr
 8015cf8:	40010000 	.word	0x40010000
 8015cfc:	40010400 	.word	0x40010400

08015d00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015d00:	b480      	push	{r7}
 8015d02:	b087      	sub	sp, #28
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	6a1b      	ldr	r3, [r3, #32]
 8015d0e:	f023 0210 	bic.w	r2, r3, #16
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	6a1b      	ldr	r3, [r3, #32]
 8015d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	685b      	ldr	r3, [r3, #4]
 8015d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	699b      	ldr	r3, [r3, #24]
 8015d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015d38:	683b      	ldr	r3, [r7, #0]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	021b      	lsls	r3, r3, #8
 8015d3e:	68fa      	ldr	r2, [r7, #12]
 8015d40:	4313      	orrs	r3, r2
 8015d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015d44:	697b      	ldr	r3, [r7, #20]
 8015d46:	f023 0320 	bic.w	r3, r3, #32
 8015d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015d4c:	683b      	ldr	r3, [r7, #0]
 8015d4e:	689b      	ldr	r3, [r3, #8]
 8015d50:	011b      	lsls	r3, r3, #4
 8015d52:	697a      	ldr	r2, [r7, #20]
 8015d54:	4313      	orrs	r3, r2
 8015d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	4a22      	ldr	r2, [pc, #136]	; (8015de4 <TIM_OC2_SetConfig+0xe4>)
 8015d5c:	4293      	cmp	r3, r2
 8015d5e:	d003      	beq.n	8015d68 <TIM_OC2_SetConfig+0x68>
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	4a21      	ldr	r2, [pc, #132]	; (8015de8 <TIM_OC2_SetConfig+0xe8>)
 8015d64:	4293      	cmp	r3, r2
 8015d66:	d10d      	bne.n	8015d84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8015d68:	697b      	ldr	r3, [r7, #20]
 8015d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8015d70:	683b      	ldr	r3, [r7, #0]
 8015d72:	68db      	ldr	r3, [r3, #12]
 8015d74:	011b      	lsls	r3, r3, #4
 8015d76:	697a      	ldr	r2, [r7, #20]
 8015d78:	4313      	orrs	r3, r2
 8015d7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8015d7c:	697b      	ldr	r3, [r7, #20]
 8015d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015d82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	4a17      	ldr	r2, [pc, #92]	; (8015de4 <TIM_OC2_SetConfig+0xe4>)
 8015d88:	4293      	cmp	r3, r2
 8015d8a:	d003      	beq.n	8015d94 <TIM_OC2_SetConfig+0x94>
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	4a16      	ldr	r2, [pc, #88]	; (8015de8 <TIM_OC2_SetConfig+0xe8>)
 8015d90:	4293      	cmp	r3, r2
 8015d92:	d113      	bne.n	8015dbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8015d94:	693b      	ldr	r3, [r7, #16]
 8015d96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015d9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8015d9c:	693b      	ldr	r3, [r7, #16]
 8015d9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015da2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8015da4:	683b      	ldr	r3, [r7, #0]
 8015da6:	695b      	ldr	r3, [r3, #20]
 8015da8:	009b      	lsls	r3, r3, #2
 8015daa:	693a      	ldr	r2, [r7, #16]
 8015dac:	4313      	orrs	r3, r2
 8015dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8015db0:	683b      	ldr	r3, [r7, #0]
 8015db2:	699b      	ldr	r3, [r3, #24]
 8015db4:	009b      	lsls	r3, r3, #2
 8015db6:	693a      	ldr	r2, [r7, #16]
 8015db8:	4313      	orrs	r3, r2
 8015dba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	693a      	ldr	r2, [r7, #16]
 8015dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	68fa      	ldr	r2, [r7, #12]
 8015dc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	685a      	ldr	r2, [r3, #4]
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	697a      	ldr	r2, [r7, #20]
 8015dd4:	621a      	str	r2, [r3, #32]
}
 8015dd6:	bf00      	nop
 8015dd8:	371c      	adds	r7, #28
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de0:	4770      	bx	lr
 8015de2:	bf00      	nop
 8015de4:	40010000 	.word	0x40010000
 8015de8:	40010400 	.word	0x40010400

08015dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015dec:	b480      	push	{r7}
 8015dee:	b087      	sub	sp, #28
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
 8015df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6a1b      	ldr	r3, [r3, #32]
 8015dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	6a1b      	ldr	r3, [r3, #32]
 8015e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	685b      	ldr	r3, [r3, #4]
 8015e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	69db      	ldr	r3, [r3, #28]
 8015e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	f023 0303 	bic.w	r3, r3, #3
 8015e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015e24:	683b      	ldr	r3, [r7, #0]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	68fa      	ldr	r2, [r7, #12]
 8015e2a:	4313      	orrs	r3, r2
 8015e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8015e2e:	697b      	ldr	r3, [r7, #20]
 8015e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015e36:	683b      	ldr	r3, [r7, #0]
 8015e38:	689b      	ldr	r3, [r3, #8]
 8015e3a:	021b      	lsls	r3, r3, #8
 8015e3c:	697a      	ldr	r2, [r7, #20]
 8015e3e:	4313      	orrs	r3, r2
 8015e40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	4a21      	ldr	r2, [pc, #132]	; (8015ecc <TIM_OC3_SetConfig+0xe0>)
 8015e46:	4293      	cmp	r3, r2
 8015e48:	d003      	beq.n	8015e52 <TIM_OC3_SetConfig+0x66>
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	4a20      	ldr	r2, [pc, #128]	; (8015ed0 <TIM_OC3_SetConfig+0xe4>)
 8015e4e:	4293      	cmp	r3, r2
 8015e50:	d10d      	bne.n	8015e6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8015e52:	697b      	ldr	r3, [r7, #20]
 8015e54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015e58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8015e5a:	683b      	ldr	r3, [r7, #0]
 8015e5c:	68db      	ldr	r3, [r3, #12]
 8015e5e:	021b      	lsls	r3, r3, #8
 8015e60:	697a      	ldr	r2, [r7, #20]
 8015e62:	4313      	orrs	r3, r2
 8015e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8015e66:	697b      	ldr	r3, [r7, #20]
 8015e68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	4a16      	ldr	r2, [pc, #88]	; (8015ecc <TIM_OC3_SetConfig+0xe0>)
 8015e72:	4293      	cmp	r3, r2
 8015e74:	d003      	beq.n	8015e7e <TIM_OC3_SetConfig+0x92>
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	4a15      	ldr	r2, [pc, #84]	; (8015ed0 <TIM_OC3_SetConfig+0xe4>)
 8015e7a:	4293      	cmp	r3, r2
 8015e7c:	d113      	bne.n	8015ea6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8015e7e:	693b      	ldr	r3, [r7, #16]
 8015e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015e86:	693b      	ldr	r3, [r7, #16]
 8015e88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8015e8e:	683b      	ldr	r3, [r7, #0]
 8015e90:	695b      	ldr	r3, [r3, #20]
 8015e92:	011b      	lsls	r3, r3, #4
 8015e94:	693a      	ldr	r2, [r7, #16]
 8015e96:	4313      	orrs	r3, r2
 8015e98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	699b      	ldr	r3, [r3, #24]
 8015e9e:	011b      	lsls	r3, r3, #4
 8015ea0:	693a      	ldr	r2, [r7, #16]
 8015ea2:	4313      	orrs	r3, r2
 8015ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	693a      	ldr	r2, [r7, #16]
 8015eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	68fa      	ldr	r2, [r7, #12]
 8015eb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	685a      	ldr	r2, [r3, #4]
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	697a      	ldr	r2, [r7, #20]
 8015ebe:	621a      	str	r2, [r3, #32]
}
 8015ec0:	bf00      	nop
 8015ec2:	371c      	adds	r7, #28
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eca:	4770      	bx	lr
 8015ecc:	40010000 	.word	0x40010000
 8015ed0:	40010400 	.word	0x40010400

08015ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015ed4:	b480      	push	{r7}
 8015ed6:	b087      	sub	sp, #28
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
 8015edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	6a1b      	ldr	r3, [r3, #32]
 8015ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	6a1b      	ldr	r3, [r3, #32]
 8015eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	685b      	ldr	r3, [r3, #4]
 8015ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	69db      	ldr	r3, [r3, #28]
 8015efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	021b      	lsls	r3, r3, #8
 8015f12:	68fa      	ldr	r2, [r7, #12]
 8015f14:	4313      	orrs	r3, r2
 8015f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015f20:	683b      	ldr	r3, [r7, #0]
 8015f22:	689b      	ldr	r3, [r3, #8]
 8015f24:	031b      	lsls	r3, r3, #12
 8015f26:	693a      	ldr	r2, [r7, #16]
 8015f28:	4313      	orrs	r3, r2
 8015f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	4a12      	ldr	r2, [pc, #72]	; (8015f78 <TIM_OC4_SetConfig+0xa4>)
 8015f30:	4293      	cmp	r3, r2
 8015f32:	d003      	beq.n	8015f3c <TIM_OC4_SetConfig+0x68>
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	4a11      	ldr	r2, [pc, #68]	; (8015f7c <TIM_OC4_SetConfig+0xa8>)
 8015f38:	4293      	cmp	r3, r2
 8015f3a:	d109      	bne.n	8015f50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8015f3c:	697b      	ldr	r3, [r7, #20]
 8015f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015f42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8015f44:	683b      	ldr	r3, [r7, #0]
 8015f46:	695b      	ldr	r3, [r3, #20]
 8015f48:	019b      	lsls	r3, r3, #6
 8015f4a:	697a      	ldr	r2, [r7, #20]
 8015f4c:	4313      	orrs	r3, r2
 8015f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	697a      	ldr	r2, [r7, #20]
 8015f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	68fa      	ldr	r2, [r7, #12]
 8015f5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015f5c:	683b      	ldr	r3, [r7, #0]
 8015f5e:	685a      	ldr	r2, [r3, #4]
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	693a      	ldr	r2, [r7, #16]
 8015f68:	621a      	str	r2, [r3, #32]
}
 8015f6a:	bf00      	nop
 8015f6c:	371c      	adds	r7, #28
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f74:	4770      	bx	lr
 8015f76:	bf00      	nop
 8015f78:	40010000 	.word	0x40010000
 8015f7c:	40010400 	.word	0x40010400

08015f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015f80:	b480      	push	{r7}
 8015f82:	b087      	sub	sp, #28
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	60f8      	str	r0, [r7, #12]
 8015f88:	60b9      	str	r1, [r7, #8]
 8015f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	6a1b      	ldr	r3, [r3, #32]
 8015f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	6a1b      	ldr	r3, [r3, #32]
 8015f96:	f023 0201 	bic.w	r2, r3, #1
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	699b      	ldr	r3, [r3, #24]
 8015fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015fa4:	693b      	ldr	r3, [r7, #16]
 8015fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	011b      	lsls	r3, r3, #4
 8015fb0:	693a      	ldr	r2, [r7, #16]
 8015fb2:	4313      	orrs	r3, r2
 8015fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015fb6:	697b      	ldr	r3, [r7, #20]
 8015fb8:	f023 030a 	bic.w	r3, r3, #10
 8015fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015fbe:	697a      	ldr	r2, [r7, #20]
 8015fc0:	68bb      	ldr	r3, [r7, #8]
 8015fc2:	4313      	orrs	r3, r2
 8015fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	693a      	ldr	r2, [r7, #16]
 8015fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	697a      	ldr	r2, [r7, #20]
 8015fd0:	621a      	str	r2, [r3, #32]
}
 8015fd2:	bf00      	nop
 8015fd4:	371c      	adds	r7, #28
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fdc:	4770      	bx	lr

08015fde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015fde:	b480      	push	{r7}
 8015fe0:	b087      	sub	sp, #28
 8015fe2:	af00      	add	r7, sp, #0
 8015fe4:	60f8      	str	r0, [r7, #12]
 8015fe6:	60b9      	str	r1, [r7, #8]
 8015fe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	6a1b      	ldr	r3, [r3, #32]
 8015fee:	f023 0210 	bic.w	r2, r3, #16
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	699b      	ldr	r3, [r3, #24]
 8015ffa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	6a1b      	ldr	r3, [r3, #32]
 8016000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8016002:	697b      	ldr	r3, [r7, #20]
 8016004:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8016008:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	031b      	lsls	r3, r3, #12
 801600e:	697a      	ldr	r2, [r7, #20]
 8016010:	4313      	orrs	r3, r2
 8016012:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016014:	693b      	ldr	r3, [r7, #16]
 8016016:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801601a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	011b      	lsls	r3, r3, #4
 8016020:	693a      	ldr	r2, [r7, #16]
 8016022:	4313      	orrs	r3, r2
 8016024:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	697a      	ldr	r2, [r7, #20]
 801602a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	693a      	ldr	r2, [r7, #16]
 8016030:	621a      	str	r2, [r3, #32]
}
 8016032:	bf00      	nop
 8016034:	371c      	adds	r7, #28
 8016036:	46bd      	mov	sp, r7
 8016038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603c:	4770      	bx	lr

0801603e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801603e:	b480      	push	{r7}
 8016040:	b085      	sub	sp, #20
 8016042:	af00      	add	r7, sp, #0
 8016044:	6078      	str	r0, [r7, #4]
 8016046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	689b      	ldr	r3, [r3, #8]
 801604c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8016056:	683a      	ldr	r2, [r7, #0]
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	4313      	orrs	r3, r2
 801605c:	f043 0307 	orr.w	r3, r3, #7
 8016060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	68fa      	ldr	r2, [r7, #12]
 8016066:	609a      	str	r2, [r3, #8]
}
 8016068:	bf00      	nop
 801606a:	3714      	adds	r7, #20
 801606c:	46bd      	mov	sp, r7
 801606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016072:	4770      	bx	lr

08016074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8016074:	b480      	push	{r7}
 8016076:	b087      	sub	sp, #28
 8016078:	af00      	add	r7, sp, #0
 801607a:	60f8      	str	r0, [r7, #12]
 801607c:	60b9      	str	r1, [r7, #8]
 801607e:	607a      	str	r2, [r7, #4]
 8016080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	689b      	ldr	r3, [r3, #8]
 8016086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016088:	697b      	ldr	r3, [r7, #20]
 801608a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801608e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8016090:	683b      	ldr	r3, [r7, #0]
 8016092:	021a      	lsls	r2, r3, #8
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	431a      	orrs	r2, r3
 8016098:	68bb      	ldr	r3, [r7, #8]
 801609a:	4313      	orrs	r3, r2
 801609c:	697a      	ldr	r2, [r7, #20]
 801609e:	4313      	orrs	r3, r2
 80160a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	697a      	ldr	r2, [r7, #20]
 80160a6:	609a      	str	r2, [r3, #8]
}
 80160a8:	bf00      	nop
 80160aa:	371c      	adds	r7, #28
 80160ac:	46bd      	mov	sp, r7
 80160ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b2:	4770      	bx	lr

080160b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80160b4:	b480      	push	{r7}
 80160b6:	b087      	sub	sp, #28
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	60f8      	str	r0, [r7, #12]
 80160bc:	60b9      	str	r1, [r7, #8]
 80160be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80160c0:	68bb      	ldr	r3, [r7, #8]
 80160c2:	f003 031f 	and.w	r3, r3, #31
 80160c6:	2201      	movs	r2, #1
 80160c8:	fa02 f303 	lsl.w	r3, r2, r3
 80160cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	6a1a      	ldr	r2, [r3, #32]
 80160d2:	697b      	ldr	r3, [r7, #20]
 80160d4:	43db      	mvns	r3, r3
 80160d6:	401a      	ands	r2, r3
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	6a1a      	ldr	r2, [r3, #32]
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	f003 031f 	and.w	r3, r3, #31
 80160e6:	6879      	ldr	r1, [r7, #4]
 80160e8:	fa01 f303 	lsl.w	r3, r1, r3
 80160ec:	431a      	orrs	r2, r3
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	621a      	str	r2, [r3, #32]
}
 80160f2:	bf00      	nop
 80160f4:	371c      	adds	r7, #28
 80160f6:	46bd      	mov	sp, r7
 80160f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160fc:	4770      	bx	lr

080160fe <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80160fe:	b580      	push	{r7, lr}
 8016100:	b084      	sub	sp, #16
 8016102:	af00      	add	r7, sp, #0
 8016104:	6078      	str	r0, [r7, #4]
 8016106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	2b04      	cmp	r3, #4
 801610c:	d00d      	beq.n	801612a <HAL_TIMEx_OCN_Start_IT+0x2c>
 801610e:	2b08      	cmp	r3, #8
 8016110:	d014      	beq.n	801613c <HAL_TIMEx_OCN_Start_IT+0x3e>
 8016112:	2b00      	cmp	r3, #0
 8016114:	d000      	beq.n	8016118 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8016116:	e01a      	b.n	801614e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	68da      	ldr	r2, [r3, #12]
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	f042 0202 	orr.w	r2, r2, #2
 8016126:	60da      	str	r2, [r3, #12]
      break;
 8016128:	e011      	b.n	801614e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	68da      	ldr	r2, [r3, #12]
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	f042 0204 	orr.w	r2, r2, #4
 8016138:	60da      	str	r2, [r3, #12]
      break;
 801613a:	e008      	b.n	801614e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	68da      	ldr	r2, [r3, #12]
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	f042 0208 	orr.w	r2, r2, #8
 801614a:	60da      	str	r2, [r3, #12]
      break;
 801614c:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	68da      	ldr	r2, [r3, #12]
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801615c:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	2204      	movs	r2, #4
 8016164:	6839      	ldr	r1, [r7, #0]
 8016166:	4618      	mov	r0, r3
 8016168:	f000 f976 	bl	8016458 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801617a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	689b      	ldr	r3, [r3, #8]
 8016182:	f003 0307 	and.w	r3, r3, #7
 8016186:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	2b06      	cmp	r3, #6
 801618c:	d007      	beq.n	801619e <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	681a      	ldr	r2, [r3, #0]
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	f042 0201 	orr.w	r2, r2, #1
 801619c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801619e:	2300      	movs	r3, #0
}
 80161a0:	4618      	mov	r0, r3
 80161a2:	3710      	adds	r7, #16
 80161a4:	46bd      	mov	sp, r7
 80161a6:	bd80      	pop	{r7, pc}

080161a8 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b084      	sub	sp, #16
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
 80161b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	2b04      	cmp	r3, #4
 80161b6:	d00d      	beq.n	80161d4 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 80161b8:	2b08      	cmp	r3, #8
 80161ba:	d014      	beq.n	80161e6 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d000      	beq.n	80161c2 <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80161c0:	e01a      	b.n	80161f8 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	68da      	ldr	r2, [r3, #12]
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	f022 0202 	bic.w	r2, r2, #2
 80161d0:	60da      	str	r2, [r3, #12]
      break;
 80161d2:	e011      	b.n	80161f8 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	68da      	ldr	r2, [r3, #12]
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	f022 0204 	bic.w	r2, r2, #4
 80161e2:	60da      	str	r2, [r3, #12]
      break;
 80161e4:	e008      	b.n	80161f8 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	68da      	ldr	r2, [r3, #12]
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	f022 0208 	bic.w	r2, r2, #8
 80161f4:	60da      	str	r2, [r3, #12]
      break;
 80161f6:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	2200      	movs	r2, #0
 80161fe:	6839      	ldr	r1, [r7, #0]
 8016200:	4618      	mov	r0, r3
 8016202:	f000 f929 	bl	8016458 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	6a1b      	ldr	r3, [r3, #32]
 801620c:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 801620e:	68fa      	ldr	r2, [r7, #12]
 8016210:	f240 4344 	movw	r3, #1092	; 0x444
 8016214:	4013      	ands	r3, r2
 8016216:	2b00      	cmp	r3, #0
 8016218:	d107      	bne.n	801622a <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	68da      	ldr	r2, [r3, #12]
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016228:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	6a1a      	ldr	r2, [r3, #32]
 8016230:	f241 1311 	movw	r3, #4369	; 0x1111
 8016234:	4013      	ands	r3, r2
 8016236:	2b00      	cmp	r3, #0
 8016238:	d10f      	bne.n	801625a <HAL_TIMEx_OCN_Stop_IT+0xb2>
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	6a1a      	ldr	r2, [r3, #32]
 8016240:	f240 4344 	movw	r3, #1092	; 0x444
 8016244:	4013      	ands	r3, r2
 8016246:	2b00      	cmp	r3, #0
 8016248:	d107      	bne.n	801625a <HAL_TIMEx_OCN_Stop_IT+0xb2>
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016258:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	6a1a      	ldr	r2, [r3, #32]
 8016260:	f241 1311 	movw	r3, #4369	; 0x1111
 8016264:	4013      	ands	r3, r2
 8016266:	2b00      	cmp	r3, #0
 8016268:	d10f      	bne.n	801628a <HAL_TIMEx_OCN_Stop_IT+0xe2>
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	6a1a      	ldr	r2, [r3, #32]
 8016270:	f240 4344 	movw	r3, #1092	; 0x444
 8016274:	4013      	ands	r3, r2
 8016276:	2b00      	cmp	r3, #0
 8016278:	d107      	bne.n	801628a <HAL_TIMEx_OCN_Stop_IT+0xe2>
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	681a      	ldr	r2, [r3, #0]
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	f022 0201 	bic.w	r2, r2, #1
 8016288:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801628a:	2300      	movs	r3, #0
}
 801628c:	4618      	mov	r0, r3
 801628e:	3710      	adds	r7, #16
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}

08016294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016294:	b480      	push	{r7}
 8016296:	b085      	sub	sp, #20
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
 801629c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80162a4:	2b01      	cmp	r3, #1
 80162a6:	d101      	bne.n	80162ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80162a8:	2302      	movs	r3, #2
 80162aa:	e05a      	b.n	8016362 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2201      	movs	r2, #1
 80162b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2202      	movs	r2, #2
 80162b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	685b      	ldr	r3, [r3, #4]
 80162c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	689b      	ldr	r3, [r3, #8]
 80162ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80162d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80162d4:	683b      	ldr	r3, [r7, #0]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	68fa      	ldr	r2, [r7, #12]
 80162da:	4313      	orrs	r3, r2
 80162dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	68fa      	ldr	r2, [r7, #12]
 80162e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	4a21      	ldr	r2, [pc, #132]	; (8016370 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80162ec:	4293      	cmp	r3, r2
 80162ee:	d022      	beq.n	8016336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80162f8:	d01d      	beq.n	8016336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	4a1d      	ldr	r2, [pc, #116]	; (8016374 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8016300:	4293      	cmp	r3, r2
 8016302:	d018      	beq.n	8016336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	4a1b      	ldr	r2, [pc, #108]	; (8016378 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801630a:	4293      	cmp	r3, r2
 801630c:	d013      	beq.n	8016336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	4a1a      	ldr	r2, [pc, #104]	; (801637c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8016314:	4293      	cmp	r3, r2
 8016316:	d00e      	beq.n	8016336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	4a18      	ldr	r2, [pc, #96]	; (8016380 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801631e:	4293      	cmp	r3, r2
 8016320:	d009      	beq.n	8016336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	4a17      	ldr	r2, [pc, #92]	; (8016384 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8016328:	4293      	cmp	r3, r2
 801632a:	d004      	beq.n	8016336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	4a15      	ldr	r2, [pc, #84]	; (8016388 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8016332:	4293      	cmp	r3, r2
 8016334:	d10c      	bne.n	8016350 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016336:	68bb      	ldr	r3, [r7, #8]
 8016338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801633c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801633e:	683b      	ldr	r3, [r7, #0]
 8016340:	685b      	ldr	r3, [r3, #4]
 8016342:	68ba      	ldr	r2, [r7, #8]
 8016344:	4313      	orrs	r3, r2
 8016346:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	68ba      	ldr	r2, [r7, #8]
 801634e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	2201      	movs	r2, #1
 8016354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	2200      	movs	r2, #0
 801635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016360:	2300      	movs	r3, #0
}
 8016362:	4618      	mov	r0, r3
 8016364:	3714      	adds	r7, #20
 8016366:	46bd      	mov	sp, r7
 8016368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636c:	4770      	bx	lr
 801636e:	bf00      	nop
 8016370:	40010000 	.word	0x40010000
 8016374:	40000400 	.word	0x40000400
 8016378:	40000800 	.word	0x40000800
 801637c:	40000c00 	.word	0x40000c00
 8016380:	40010400 	.word	0x40010400
 8016384:	40014000 	.word	0x40014000
 8016388:	40001800 	.word	0x40001800

0801638c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801638c:	b480      	push	{r7}
 801638e:	b085      	sub	sp, #20
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
 8016394:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8016396:	2300      	movs	r3, #0
 8016398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80163a0:	2b01      	cmp	r3, #1
 80163a2:	d101      	bne.n	80163a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80163a4:	2302      	movs	r3, #2
 80163a6:	e03d      	b.n	8016424 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2201      	movs	r2, #1
 80163ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80163b6:	683b      	ldr	r3, [r7, #0]
 80163b8:	68db      	ldr	r3, [r3, #12]
 80163ba:	4313      	orrs	r3, r2
 80163bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80163c4:	683b      	ldr	r3, [r7, #0]
 80163c6:	689b      	ldr	r3, [r3, #8]
 80163c8:	4313      	orrs	r3, r2
 80163ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80163d2:	683b      	ldr	r3, [r7, #0]
 80163d4:	685b      	ldr	r3, [r3, #4]
 80163d6:	4313      	orrs	r3, r2
 80163d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80163e0:	683b      	ldr	r3, [r7, #0]
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	4313      	orrs	r3, r2
 80163e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	691b      	ldr	r3, [r3, #16]
 80163f2:	4313      	orrs	r3, r2
 80163f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80163fc:	683b      	ldr	r3, [r7, #0]
 80163fe:	695b      	ldr	r3, [r3, #20]
 8016400:	4313      	orrs	r3, r2
 8016402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801640a:	683b      	ldr	r3, [r7, #0]
 801640c:	69db      	ldr	r3, [r3, #28]
 801640e:	4313      	orrs	r3, r2
 8016410:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	68fa      	ldr	r2, [r7, #12]
 8016418:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	2200      	movs	r2, #0
 801641e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016422:	2300      	movs	r3, #0
}
 8016424:	4618      	mov	r0, r3
 8016426:	3714      	adds	r7, #20
 8016428:	46bd      	mov	sp, r7
 801642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642e:	4770      	bx	lr

08016430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8016430:	b480      	push	{r7}
 8016432:	b083      	sub	sp, #12
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8016438:	bf00      	nop
 801643a:	370c      	adds	r7, #12
 801643c:	46bd      	mov	sp, r7
 801643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016442:	4770      	bx	lr

08016444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8016444:	b480      	push	{r7}
 8016446:	b083      	sub	sp, #12
 8016448:	af00      	add	r7, sp, #0
 801644a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801644c:	bf00      	nop
 801644e:	370c      	adds	r7, #12
 8016450:	46bd      	mov	sp, r7
 8016452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016456:	4770      	bx	lr

08016458 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8016458:	b480      	push	{r7}
 801645a:	b087      	sub	sp, #28
 801645c:	af00      	add	r7, sp, #0
 801645e:	60f8      	str	r0, [r7, #12]
 8016460:	60b9      	str	r1, [r7, #8]
 8016462:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016464:	68bb      	ldr	r3, [r7, #8]
 8016466:	f003 031f 	and.w	r3, r3, #31
 801646a:	2204      	movs	r2, #4
 801646c:	fa02 f303 	lsl.w	r3, r2, r3
 8016470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	6a1a      	ldr	r2, [r3, #32]
 8016476:	697b      	ldr	r3, [r7, #20]
 8016478:	43db      	mvns	r3, r3
 801647a:	401a      	ands	r2, r3
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	6a1a      	ldr	r2, [r3, #32]
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	f003 031f 	and.w	r3, r3, #31
 801648a:	6879      	ldr	r1, [r7, #4]
 801648c:	fa01 f303 	lsl.w	r3, r1, r3
 8016490:	431a      	orrs	r2, r3
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	621a      	str	r2, [r3, #32]
}
 8016496:	bf00      	nop
 8016498:	371c      	adds	r7, #28
 801649a:	46bd      	mov	sp, r7
 801649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a0:	4770      	bx	lr

080164a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80164a2:	b580      	push	{r7, lr}
 80164a4:	b082      	sub	sp, #8
 80164a6:	af00      	add	r7, sp, #0
 80164a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d101      	bne.n	80164b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80164b0:	2301      	movs	r3, #1
 80164b2:	e03f      	b.n	8016534 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80164ba:	b2db      	uxtb	r3, r3
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d106      	bne.n	80164ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	2200      	movs	r2, #0
 80164c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80164c8:	6878      	ldr	r0, [r7, #4]
 80164ca:	f7f9 fe9f 	bl	801020c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	2224      	movs	r2, #36	; 0x24
 80164d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	68da      	ldr	r2, [r3, #12]
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80164e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80164e6:	6878      	ldr	r0, [r7, #4]
 80164e8:	f000 f9b2 	bl	8016850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	691a      	ldr	r2, [r3, #16]
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80164fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	695a      	ldr	r2, [r3, #20]
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801650a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	68da      	ldr	r2, [r3, #12]
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801651a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	2200      	movs	r2, #0
 8016520:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	2220      	movs	r2, #32
 8016526:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	2220      	movs	r2, #32
 801652e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8016532:	2300      	movs	r3, #0
}
 8016534:	4618      	mov	r0, r3
 8016536:	3708      	adds	r7, #8
 8016538:	46bd      	mov	sp, r7
 801653a:	bd80      	pop	{r7, pc}

0801653c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b088      	sub	sp, #32
 8016540:	af02      	add	r7, sp, #8
 8016542:	60f8      	str	r0, [r7, #12]
 8016544:	60b9      	str	r1, [r7, #8]
 8016546:	603b      	str	r3, [r7, #0]
 8016548:	4613      	mov	r3, r2
 801654a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801654c:	2300      	movs	r3, #0
 801654e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016556:	b2db      	uxtb	r3, r3
 8016558:	2b20      	cmp	r3, #32
 801655a:	f040 8083 	bne.w	8016664 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801655e:	68bb      	ldr	r3, [r7, #8]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d002      	beq.n	801656a <HAL_UART_Transmit+0x2e>
 8016564:	88fb      	ldrh	r3, [r7, #6]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d101      	bne.n	801656e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801656a:	2301      	movs	r3, #1
 801656c:	e07b      	b.n	8016666 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016574:	2b01      	cmp	r3, #1
 8016576:	d101      	bne.n	801657c <HAL_UART_Transmit+0x40>
 8016578:	2302      	movs	r3, #2
 801657a:	e074      	b.n	8016666 <HAL_UART_Transmit+0x12a>
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	2201      	movs	r2, #1
 8016580:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	2200      	movs	r2, #0
 8016588:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	2221      	movs	r2, #33	; 0x21
 801658e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8016592:	f7fb fd25 	bl	8011fe0 <HAL_GetTick>
 8016596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	88fa      	ldrh	r2, [r7, #6]
 801659c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	88fa      	ldrh	r2, [r7, #6]
 80165a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	2200      	movs	r2, #0
 80165a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80165ac:	e042      	b.n	8016634 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80165b2:	b29b      	uxth	r3, r3
 80165b4:	3b01      	subs	r3, #1
 80165b6:	b29a      	uxth	r2, r3
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	689b      	ldr	r3, [r3, #8]
 80165c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80165c4:	d122      	bne.n	801660c <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	9300      	str	r3, [sp, #0]
 80165ca:	697b      	ldr	r3, [r7, #20]
 80165cc:	2200      	movs	r2, #0
 80165ce:	2180      	movs	r1, #128	; 0x80
 80165d0:	68f8      	ldr	r0, [r7, #12]
 80165d2:	f000 f8f2 	bl	80167ba <UART_WaitOnFlagUntilTimeout>
 80165d6:	4603      	mov	r3, r0
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d001      	beq.n	80165e0 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80165dc:	2303      	movs	r3, #3
 80165de:	e042      	b.n	8016666 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80165e0:	68bb      	ldr	r3, [r7, #8]
 80165e2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80165e4:	693b      	ldr	r3, [r7, #16]
 80165e6:	881b      	ldrh	r3, [r3, #0]
 80165e8:	461a      	mov	r2, r3
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80165f2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	691b      	ldr	r3, [r3, #16]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d103      	bne.n	8016604 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	3302      	adds	r3, #2
 8016600:	60bb      	str	r3, [r7, #8]
 8016602:	e017      	b.n	8016634 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	3301      	adds	r3, #1
 8016608:	60bb      	str	r3, [r7, #8]
 801660a:	e013      	b.n	8016634 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801660c:	683b      	ldr	r3, [r7, #0]
 801660e:	9300      	str	r3, [sp, #0]
 8016610:	697b      	ldr	r3, [r7, #20]
 8016612:	2200      	movs	r2, #0
 8016614:	2180      	movs	r1, #128	; 0x80
 8016616:	68f8      	ldr	r0, [r7, #12]
 8016618:	f000 f8cf 	bl	80167ba <UART_WaitOnFlagUntilTimeout>
 801661c:	4603      	mov	r3, r0
 801661e:	2b00      	cmp	r3, #0
 8016620:	d001      	beq.n	8016626 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8016622:	2303      	movs	r3, #3
 8016624:	e01f      	b.n	8016666 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8016626:	68bb      	ldr	r3, [r7, #8]
 8016628:	1c5a      	adds	r2, r3, #1
 801662a:	60ba      	str	r2, [r7, #8]
 801662c:	781a      	ldrb	r2, [r3, #0]
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016638:	b29b      	uxth	r3, r3
 801663a:	2b00      	cmp	r3, #0
 801663c:	d1b7      	bne.n	80165ae <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801663e:	683b      	ldr	r3, [r7, #0]
 8016640:	9300      	str	r3, [sp, #0]
 8016642:	697b      	ldr	r3, [r7, #20]
 8016644:	2200      	movs	r2, #0
 8016646:	2140      	movs	r1, #64	; 0x40
 8016648:	68f8      	ldr	r0, [r7, #12]
 801664a:	f000 f8b6 	bl	80167ba <UART_WaitOnFlagUntilTimeout>
 801664e:	4603      	mov	r3, r0
 8016650:	2b00      	cmp	r3, #0
 8016652:	d001      	beq.n	8016658 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8016654:	2303      	movs	r3, #3
 8016656:	e006      	b.n	8016666 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	2220      	movs	r2, #32
 801665c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8016660:	2300      	movs	r3, #0
 8016662:	e000      	b.n	8016666 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8016664:	2302      	movs	r3, #2
  }
}
 8016666:	4618      	mov	r0, r3
 8016668:	3718      	adds	r7, #24
 801666a:	46bd      	mov	sp, r7
 801666c:	bd80      	pop	{r7, pc}

0801666e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801666e:	b580      	push	{r7, lr}
 8016670:	b088      	sub	sp, #32
 8016672:	af02      	add	r7, sp, #8
 8016674:	60f8      	str	r0, [r7, #12]
 8016676:	60b9      	str	r1, [r7, #8]
 8016678:	603b      	str	r3, [r7, #0]
 801667a:	4613      	mov	r3, r2
 801667c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801667e:	2300      	movs	r3, #0
 8016680:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016688:	b2db      	uxtb	r3, r3
 801668a:	2b20      	cmp	r3, #32
 801668c:	f040 8090 	bne.w	80167b0 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8016690:	68bb      	ldr	r3, [r7, #8]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d002      	beq.n	801669c <HAL_UART_Receive+0x2e>
 8016696:	88fb      	ldrh	r3, [r7, #6]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d101      	bne.n	80166a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 801669c:	2301      	movs	r3, #1
 801669e:	e088      	b.n	80167b2 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80166a6:	2b01      	cmp	r3, #1
 80166a8:	d101      	bne.n	80166ae <HAL_UART_Receive+0x40>
 80166aa:	2302      	movs	r3, #2
 80166ac:	e081      	b.n	80167b2 <HAL_UART_Receive+0x144>
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	2201      	movs	r2, #1
 80166b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	2200      	movs	r2, #0
 80166ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	2222      	movs	r2, #34	; 0x22
 80166c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80166c4:	f7fb fc8c 	bl	8011fe0 <HAL_GetTick>
 80166c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	88fa      	ldrh	r2, [r7, #6]
 80166ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	88fa      	ldrh	r2, [r7, #6]
 80166d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	2200      	movs	r2, #0
 80166da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80166de:	e05c      	b.n	801679a <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80166e4:	b29b      	uxth	r3, r3
 80166e6:	3b01      	subs	r3, #1
 80166e8:	b29a      	uxth	r2, r3
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	689b      	ldr	r3, [r3, #8]
 80166f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80166f6:	d12b      	bne.n	8016750 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80166f8:	683b      	ldr	r3, [r7, #0]
 80166fa:	9300      	str	r3, [sp, #0]
 80166fc:	697b      	ldr	r3, [r7, #20]
 80166fe:	2200      	movs	r2, #0
 8016700:	2120      	movs	r1, #32
 8016702:	68f8      	ldr	r0, [r7, #12]
 8016704:	f000 f859 	bl	80167ba <UART_WaitOnFlagUntilTimeout>
 8016708:	4603      	mov	r3, r0
 801670a:	2b00      	cmp	r3, #0
 801670c:	d001      	beq.n	8016712 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 801670e:	2303      	movs	r3, #3
 8016710:	e04f      	b.n	80167b2 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8016712:	68bb      	ldr	r3, [r7, #8]
 8016714:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	691b      	ldr	r3, [r3, #16]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d10c      	bne.n	8016738 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	685b      	ldr	r3, [r3, #4]
 8016724:	b29b      	uxth	r3, r3
 8016726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801672a:	b29a      	uxth	r2, r3
 801672c:	693b      	ldr	r3, [r7, #16]
 801672e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8016730:	68bb      	ldr	r3, [r7, #8]
 8016732:	3302      	adds	r3, #2
 8016734:	60bb      	str	r3, [r7, #8]
 8016736:	e030      	b.n	801679a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	685b      	ldr	r3, [r3, #4]
 801673e:	b29b      	uxth	r3, r3
 8016740:	b2db      	uxtb	r3, r3
 8016742:	b29a      	uxth	r2, r3
 8016744:	693b      	ldr	r3, [r7, #16]
 8016746:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8016748:	68bb      	ldr	r3, [r7, #8]
 801674a:	3301      	adds	r3, #1
 801674c:	60bb      	str	r3, [r7, #8]
 801674e:	e024      	b.n	801679a <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8016750:	683b      	ldr	r3, [r7, #0]
 8016752:	9300      	str	r3, [sp, #0]
 8016754:	697b      	ldr	r3, [r7, #20]
 8016756:	2200      	movs	r2, #0
 8016758:	2120      	movs	r1, #32
 801675a:	68f8      	ldr	r0, [r7, #12]
 801675c:	f000 f82d 	bl	80167ba <UART_WaitOnFlagUntilTimeout>
 8016760:	4603      	mov	r3, r0
 8016762:	2b00      	cmp	r3, #0
 8016764:	d001      	beq.n	801676a <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8016766:	2303      	movs	r3, #3
 8016768:	e023      	b.n	80167b2 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	691b      	ldr	r3, [r3, #16]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d108      	bne.n	8016784 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	6859      	ldr	r1, [r3, #4]
 8016778:	68bb      	ldr	r3, [r7, #8]
 801677a:	1c5a      	adds	r2, r3, #1
 801677c:	60ba      	str	r2, [r7, #8]
 801677e:	b2ca      	uxtb	r2, r1
 8016780:	701a      	strb	r2, [r3, #0]
 8016782:	e00a      	b.n	801679a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	685b      	ldr	r3, [r3, #4]
 801678a:	b2da      	uxtb	r2, r3
 801678c:	68bb      	ldr	r3, [r7, #8]
 801678e:	1c59      	adds	r1, r3, #1
 8016790:	60b9      	str	r1, [r7, #8]
 8016792:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8016796:	b2d2      	uxtb	r2, r2
 8016798:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801679e:	b29b      	uxth	r3, r3
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d19d      	bne.n	80166e0 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	2220      	movs	r2, #32
 80167a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80167ac:	2300      	movs	r3, #0
 80167ae:	e000      	b.n	80167b2 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80167b0:	2302      	movs	r3, #2
  }
}
 80167b2:	4618      	mov	r0, r3
 80167b4:	3718      	adds	r7, #24
 80167b6:	46bd      	mov	sp, r7
 80167b8:	bd80      	pop	{r7, pc}

080167ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80167ba:	b580      	push	{r7, lr}
 80167bc:	b084      	sub	sp, #16
 80167be:	af00      	add	r7, sp, #0
 80167c0:	60f8      	str	r0, [r7, #12]
 80167c2:	60b9      	str	r1, [r7, #8]
 80167c4:	603b      	str	r3, [r7, #0]
 80167c6:	4613      	mov	r3, r2
 80167c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80167ca:	e02c      	b.n	8016826 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80167cc:	69bb      	ldr	r3, [r7, #24]
 80167ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167d2:	d028      	beq.n	8016826 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80167d4:	69bb      	ldr	r3, [r7, #24]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d007      	beq.n	80167ea <UART_WaitOnFlagUntilTimeout+0x30>
 80167da:	f7fb fc01 	bl	8011fe0 <HAL_GetTick>
 80167de:	4602      	mov	r2, r0
 80167e0:	683b      	ldr	r3, [r7, #0]
 80167e2:	1ad3      	subs	r3, r2, r3
 80167e4:	69ba      	ldr	r2, [r7, #24]
 80167e6:	429a      	cmp	r2, r3
 80167e8:	d21d      	bcs.n	8016826 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	68da      	ldr	r2, [r3, #12]
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80167f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	695a      	ldr	r2, [r3, #20]
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	f022 0201 	bic.w	r2, r2, #1
 8016808:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	2220      	movs	r2, #32
 801680e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	2220      	movs	r2, #32
 8016816:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	2200      	movs	r2, #0
 801681e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8016822:	2303      	movs	r3, #3
 8016824:	e00f      	b.n	8016846 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	681a      	ldr	r2, [r3, #0]
 801682c:	68bb      	ldr	r3, [r7, #8]
 801682e:	4013      	ands	r3, r2
 8016830:	68ba      	ldr	r2, [r7, #8]
 8016832:	429a      	cmp	r2, r3
 8016834:	bf0c      	ite	eq
 8016836:	2301      	moveq	r3, #1
 8016838:	2300      	movne	r3, #0
 801683a:	b2db      	uxtb	r3, r3
 801683c:	461a      	mov	r2, r3
 801683e:	79fb      	ldrb	r3, [r7, #7]
 8016840:	429a      	cmp	r2, r3
 8016842:	d0c3      	beq.n	80167cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8016844:	2300      	movs	r3, #0
}
 8016846:	4618      	mov	r0, r3
 8016848:	3710      	adds	r7, #16
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}
	...

08016850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016854:	b085      	sub	sp, #20
 8016856:	af00      	add	r7, sp, #0
 8016858:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	691b      	ldr	r3, [r3, #16]
 8016860:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	68da      	ldr	r2, [r3, #12]
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	430a      	orrs	r2, r1
 801686e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	689a      	ldr	r2, [r3, #8]
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	691b      	ldr	r3, [r3, #16]
 8016878:	431a      	orrs	r2, r3
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	695b      	ldr	r3, [r3, #20]
 801687e:	431a      	orrs	r2, r3
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	69db      	ldr	r3, [r3, #28]
 8016884:	4313      	orrs	r3, r2
 8016886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	68db      	ldr	r3, [r3, #12]
 801688e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8016892:	f023 030c 	bic.w	r3, r3, #12
 8016896:	687a      	ldr	r2, [r7, #4]
 8016898:	6812      	ldr	r2, [r2, #0]
 801689a:	68f9      	ldr	r1, [r7, #12]
 801689c:	430b      	orrs	r3, r1
 801689e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	695b      	ldr	r3, [r3, #20]
 80168a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	699a      	ldr	r2, [r3, #24]
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	430a      	orrs	r2, r1
 80168b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	69db      	ldr	r3, [r3, #28]
 80168ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80168be:	f040 818b 	bne.w	8016bd8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	4ac1      	ldr	r2, [pc, #772]	; (8016bcc <UART_SetConfig+0x37c>)
 80168c8:	4293      	cmp	r3, r2
 80168ca:	d005      	beq.n	80168d8 <UART_SetConfig+0x88>
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	4abf      	ldr	r2, [pc, #764]	; (8016bd0 <UART_SetConfig+0x380>)
 80168d2:	4293      	cmp	r3, r2
 80168d4:	f040 80bd 	bne.w	8016a52 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80168d8:	f7fd fce2 	bl	80142a0 <HAL_RCC_GetPCLK2Freq>
 80168dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80168de:	68bb      	ldr	r3, [r7, #8]
 80168e0:	461d      	mov	r5, r3
 80168e2:	f04f 0600 	mov.w	r6, #0
 80168e6:	46a8      	mov	r8, r5
 80168e8:	46b1      	mov	r9, r6
 80168ea:	eb18 0308 	adds.w	r3, r8, r8
 80168ee:	eb49 0409 	adc.w	r4, r9, r9
 80168f2:	4698      	mov	r8, r3
 80168f4:	46a1      	mov	r9, r4
 80168f6:	eb18 0805 	adds.w	r8, r8, r5
 80168fa:	eb49 0906 	adc.w	r9, r9, r6
 80168fe:	f04f 0100 	mov.w	r1, #0
 8016902:	f04f 0200 	mov.w	r2, #0
 8016906:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801690a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801690e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8016912:	4688      	mov	r8, r1
 8016914:	4691      	mov	r9, r2
 8016916:	eb18 0005 	adds.w	r0, r8, r5
 801691a:	eb49 0106 	adc.w	r1, r9, r6
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	685b      	ldr	r3, [r3, #4]
 8016922:	461d      	mov	r5, r3
 8016924:	f04f 0600 	mov.w	r6, #0
 8016928:	196b      	adds	r3, r5, r5
 801692a:	eb46 0406 	adc.w	r4, r6, r6
 801692e:	461a      	mov	r2, r3
 8016930:	4623      	mov	r3, r4
 8016932:	f7f2 f8e1 	bl	8008af8 <__aeabi_uldivmod>
 8016936:	4603      	mov	r3, r0
 8016938:	460c      	mov	r4, r1
 801693a:	461a      	mov	r2, r3
 801693c:	4ba5      	ldr	r3, [pc, #660]	; (8016bd4 <UART_SetConfig+0x384>)
 801693e:	fba3 2302 	umull	r2, r3, r3, r2
 8016942:	095b      	lsrs	r3, r3, #5
 8016944:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8016948:	68bb      	ldr	r3, [r7, #8]
 801694a:	461d      	mov	r5, r3
 801694c:	f04f 0600 	mov.w	r6, #0
 8016950:	46a9      	mov	r9, r5
 8016952:	46b2      	mov	sl, r6
 8016954:	eb19 0309 	adds.w	r3, r9, r9
 8016958:	eb4a 040a 	adc.w	r4, sl, sl
 801695c:	4699      	mov	r9, r3
 801695e:	46a2      	mov	sl, r4
 8016960:	eb19 0905 	adds.w	r9, r9, r5
 8016964:	eb4a 0a06 	adc.w	sl, sl, r6
 8016968:	f04f 0100 	mov.w	r1, #0
 801696c:	f04f 0200 	mov.w	r2, #0
 8016970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8016974:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8016978:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801697c:	4689      	mov	r9, r1
 801697e:	4692      	mov	sl, r2
 8016980:	eb19 0005 	adds.w	r0, r9, r5
 8016984:	eb4a 0106 	adc.w	r1, sl, r6
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	685b      	ldr	r3, [r3, #4]
 801698c:	461d      	mov	r5, r3
 801698e:	f04f 0600 	mov.w	r6, #0
 8016992:	196b      	adds	r3, r5, r5
 8016994:	eb46 0406 	adc.w	r4, r6, r6
 8016998:	461a      	mov	r2, r3
 801699a:	4623      	mov	r3, r4
 801699c:	f7f2 f8ac 	bl	8008af8 <__aeabi_uldivmod>
 80169a0:	4603      	mov	r3, r0
 80169a2:	460c      	mov	r4, r1
 80169a4:	461a      	mov	r2, r3
 80169a6:	4b8b      	ldr	r3, [pc, #556]	; (8016bd4 <UART_SetConfig+0x384>)
 80169a8:	fba3 1302 	umull	r1, r3, r3, r2
 80169ac:	095b      	lsrs	r3, r3, #5
 80169ae:	2164      	movs	r1, #100	; 0x64
 80169b0:	fb01 f303 	mul.w	r3, r1, r3
 80169b4:	1ad3      	subs	r3, r2, r3
 80169b6:	00db      	lsls	r3, r3, #3
 80169b8:	3332      	adds	r3, #50	; 0x32
 80169ba:	4a86      	ldr	r2, [pc, #536]	; (8016bd4 <UART_SetConfig+0x384>)
 80169bc:	fba2 2303 	umull	r2, r3, r2, r3
 80169c0:	095b      	lsrs	r3, r3, #5
 80169c2:	005b      	lsls	r3, r3, #1
 80169c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80169c8:	4498      	add	r8, r3
 80169ca:	68bb      	ldr	r3, [r7, #8]
 80169cc:	461d      	mov	r5, r3
 80169ce:	f04f 0600 	mov.w	r6, #0
 80169d2:	46a9      	mov	r9, r5
 80169d4:	46b2      	mov	sl, r6
 80169d6:	eb19 0309 	adds.w	r3, r9, r9
 80169da:	eb4a 040a 	adc.w	r4, sl, sl
 80169de:	4699      	mov	r9, r3
 80169e0:	46a2      	mov	sl, r4
 80169e2:	eb19 0905 	adds.w	r9, r9, r5
 80169e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80169ea:	f04f 0100 	mov.w	r1, #0
 80169ee:	f04f 0200 	mov.w	r2, #0
 80169f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80169f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80169fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80169fe:	4689      	mov	r9, r1
 8016a00:	4692      	mov	sl, r2
 8016a02:	eb19 0005 	adds.w	r0, r9, r5
 8016a06:	eb4a 0106 	adc.w	r1, sl, r6
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	685b      	ldr	r3, [r3, #4]
 8016a0e:	461d      	mov	r5, r3
 8016a10:	f04f 0600 	mov.w	r6, #0
 8016a14:	196b      	adds	r3, r5, r5
 8016a16:	eb46 0406 	adc.w	r4, r6, r6
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	4623      	mov	r3, r4
 8016a1e:	f7f2 f86b 	bl	8008af8 <__aeabi_uldivmod>
 8016a22:	4603      	mov	r3, r0
 8016a24:	460c      	mov	r4, r1
 8016a26:	461a      	mov	r2, r3
 8016a28:	4b6a      	ldr	r3, [pc, #424]	; (8016bd4 <UART_SetConfig+0x384>)
 8016a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8016a2e:	095b      	lsrs	r3, r3, #5
 8016a30:	2164      	movs	r1, #100	; 0x64
 8016a32:	fb01 f303 	mul.w	r3, r1, r3
 8016a36:	1ad3      	subs	r3, r2, r3
 8016a38:	00db      	lsls	r3, r3, #3
 8016a3a:	3332      	adds	r3, #50	; 0x32
 8016a3c:	4a65      	ldr	r2, [pc, #404]	; (8016bd4 <UART_SetConfig+0x384>)
 8016a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8016a42:	095b      	lsrs	r3, r3, #5
 8016a44:	f003 0207 	and.w	r2, r3, #7
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	4442      	add	r2, r8
 8016a4e:	609a      	str	r2, [r3, #8]
 8016a50:	e26f      	b.n	8016f32 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8016a52:	f7fd fc11 	bl	8014278 <HAL_RCC_GetPCLK1Freq>
 8016a56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8016a58:	68bb      	ldr	r3, [r7, #8]
 8016a5a:	461d      	mov	r5, r3
 8016a5c:	f04f 0600 	mov.w	r6, #0
 8016a60:	46a8      	mov	r8, r5
 8016a62:	46b1      	mov	r9, r6
 8016a64:	eb18 0308 	adds.w	r3, r8, r8
 8016a68:	eb49 0409 	adc.w	r4, r9, r9
 8016a6c:	4698      	mov	r8, r3
 8016a6e:	46a1      	mov	r9, r4
 8016a70:	eb18 0805 	adds.w	r8, r8, r5
 8016a74:	eb49 0906 	adc.w	r9, r9, r6
 8016a78:	f04f 0100 	mov.w	r1, #0
 8016a7c:	f04f 0200 	mov.w	r2, #0
 8016a80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8016a84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8016a88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8016a8c:	4688      	mov	r8, r1
 8016a8e:	4691      	mov	r9, r2
 8016a90:	eb18 0005 	adds.w	r0, r8, r5
 8016a94:	eb49 0106 	adc.w	r1, r9, r6
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	685b      	ldr	r3, [r3, #4]
 8016a9c:	461d      	mov	r5, r3
 8016a9e:	f04f 0600 	mov.w	r6, #0
 8016aa2:	196b      	adds	r3, r5, r5
 8016aa4:	eb46 0406 	adc.w	r4, r6, r6
 8016aa8:	461a      	mov	r2, r3
 8016aaa:	4623      	mov	r3, r4
 8016aac:	f7f2 f824 	bl	8008af8 <__aeabi_uldivmod>
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	460c      	mov	r4, r1
 8016ab4:	461a      	mov	r2, r3
 8016ab6:	4b47      	ldr	r3, [pc, #284]	; (8016bd4 <UART_SetConfig+0x384>)
 8016ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8016abc:	095b      	lsrs	r3, r3, #5
 8016abe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8016ac2:	68bb      	ldr	r3, [r7, #8]
 8016ac4:	461d      	mov	r5, r3
 8016ac6:	f04f 0600 	mov.w	r6, #0
 8016aca:	46a9      	mov	r9, r5
 8016acc:	46b2      	mov	sl, r6
 8016ace:	eb19 0309 	adds.w	r3, r9, r9
 8016ad2:	eb4a 040a 	adc.w	r4, sl, sl
 8016ad6:	4699      	mov	r9, r3
 8016ad8:	46a2      	mov	sl, r4
 8016ada:	eb19 0905 	adds.w	r9, r9, r5
 8016ade:	eb4a 0a06 	adc.w	sl, sl, r6
 8016ae2:	f04f 0100 	mov.w	r1, #0
 8016ae6:	f04f 0200 	mov.w	r2, #0
 8016aea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8016aee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8016af2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8016af6:	4689      	mov	r9, r1
 8016af8:	4692      	mov	sl, r2
 8016afa:	eb19 0005 	adds.w	r0, r9, r5
 8016afe:	eb4a 0106 	adc.w	r1, sl, r6
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	685b      	ldr	r3, [r3, #4]
 8016b06:	461d      	mov	r5, r3
 8016b08:	f04f 0600 	mov.w	r6, #0
 8016b0c:	196b      	adds	r3, r5, r5
 8016b0e:	eb46 0406 	adc.w	r4, r6, r6
 8016b12:	461a      	mov	r2, r3
 8016b14:	4623      	mov	r3, r4
 8016b16:	f7f1 ffef 	bl	8008af8 <__aeabi_uldivmod>
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	460c      	mov	r4, r1
 8016b1e:	461a      	mov	r2, r3
 8016b20:	4b2c      	ldr	r3, [pc, #176]	; (8016bd4 <UART_SetConfig+0x384>)
 8016b22:	fba3 1302 	umull	r1, r3, r3, r2
 8016b26:	095b      	lsrs	r3, r3, #5
 8016b28:	2164      	movs	r1, #100	; 0x64
 8016b2a:	fb01 f303 	mul.w	r3, r1, r3
 8016b2e:	1ad3      	subs	r3, r2, r3
 8016b30:	00db      	lsls	r3, r3, #3
 8016b32:	3332      	adds	r3, #50	; 0x32
 8016b34:	4a27      	ldr	r2, [pc, #156]	; (8016bd4 <UART_SetConfig+0x384>)
 8016b36:	fba2 2303 	umull	r2, r3, r2, r3
 8016b3a:	095b      	lsrs	r3, r3, #5
 8016b3c:	005b      	lsls	r3, r3, #1
 8016b3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8016b42:	4498      	add	r8, r3
 8016b44:	68bb      	ldr	r3, [r7, #8]
 8016b46:	461d      	mov	r5, r3
 8016b48:	f04f 0600 	mov.w	r6, #0
 8016b4c:	46a9      	mov	r9, r5
 8016b4e:	46b2      	mov	sl, r6
 8016b50:	eb19 0309 	adds.w	r3, r9, r9
 8016b54:	eb4a 040a 	adc.w	r4, sl, sl
 8016b58:	4699      	mov	r9, r3
 8016b5a:	46a2      	mov	sl, r4
 8016b5c:	eb19 0905 	adds.w	r9, r9, r5
 8016b60:	eb4a 0a06 	adc.w	sl, sl, r6
 8016b64:	f04f 0100 	mov.w	r1, #0
 8016b68:	f04f 0200 	mov.w	r2, #0
 8016b6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8016b70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8016b74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8016b78:	4689      	mov	r9, r1
 8016b7a:	4692      	mov	sl, r2
 8016b7c:	eb19 0005 	adds.w	r0, r9, r5
 8016b80:	eb4a 0106 	adc.w	r1, sl, r6
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	685b      	ldr	r3, [r3, #4]
 8016b88:	461d      	mov	r5, r3
 8016b8a:	f04f 0600 	mov.w	r6, #0
 8016b8e:	196b      	adds	r3, r5, r5
 8016b90:	eb46 0406 	adc.w	r4, r6, r6
 8016b94:	461a      	mov	r2, r3
 8016b96:	4623      	mov	r3, r4
 8016b98:	f7f1 ffae 	bl	8008af8 <__aeabi_uldivmod>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	460c      	mov	r4, r1
 8016ba0:	461a      	mov	r2, r3
 8016ba2:	4b0c      	ldr	r3, [pc, #48]	; (8016bd4 <UART_SetConfig+0x384>)
 8016ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8016ba8:	095b      	lsrs	r3, r3, #5
 8016baa:	2164      	movs	r1, #100	; 0x64
 8016bac:	fb01 f303 	mul.w	r3, r1, r3
 8016bb0:	1ad3      	subs	r3, r2, r3
 8016bb2:	00db      	lsls	r3, r3, #3
 8016bb4:	3332      	adds	r3, #50	; 0x32
 8016bb6:	4a07      	ldr	r2, [pc, #28]	; (8016bd4 <UART_SetConfig+0x384>)
 8016bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8016bbc:	095b      	lsrs	r3, r3, #5
 8016bbe:	f003 0207 	and.w	r2, r3, #7
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	4442      	add	r2, r8
 8016bc8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8016bca:	e1b2      	b.n	8016f32 <UART_SetConfig+0x6e2>
 8016bcc:	40011000 	.word	0x40011000
 8016bd0:	40011400 	.word	0x40011400
 8016bd4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	4ad7      	ldr	r2, [pc, #860]	; (8016f3c <UART_SetConfig+0x6ec>)
 8016bde:	4293      	cmp	r3, r2
 8016be0:	d005      	beq.n	8016bee <UART_SetConfig+0x39e>
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	4ad6      	ldr	r2, [pc, #856]	; (8016f40 <UART_SetConfig+0x6f0>)
 8016be8:	4293      	cmp	r3, r2
 8016bea:	f040 80d1 	bne.w	8016d90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8016bee:	f7fd fb57 	bl	80142a0 <HAL_RCC_GetPCLK2Freq>
 8016bf2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8016bf4:	68bb      	ldr	r3, [r7, #8]
 8016bf6:	469a      	mov	sl, r3
 8016bf8:	f04f 0b00 	mov.w	fp, #0
 8016bfc:	46d0      	mov	r8, sl
 8016bfe:	46d9      	mov	r9, fp
 8016c00:	eb18 0308 	adds.w	r3, r8, r8
 8016c04:	eb49 0409 	adc.w	r4, r9, r9
 8016c08:	4698      	mov	r8, r3
 8016c0a:	46a1      	mov	r9, r4
 8016c0c:	eb18 080a 	adds.w	r8, r8, sl
 8016c10:	eb49 090b 	adc.w	r9, r9, fp
 8016c14:	f04f 0100 	mov.w	r1, #0
 8016c18:	f04f 0200 	mov.w	r2, #0
 8016c1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8016c20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8016c24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8016c28:	4688      	mov	r8, r1
 8016c2a:	4691      	mov	r9, r2
 8016c2c:	eb1a 0508 	adds.w	r5, sl, r8
 8016c30:	eb4b 0609 	adc.w	r6, fp, r9
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	685b      	ldr	r3, [r3, #4]
 8016c38:	4619      	mov	r1, r3
 8016c3a:	f04f 0200 	mov.w	r2, #0
 8016c3e:	f04f 0300 	mov.w	r3, #0
 8016c42:	f04f 0400 	mov.w	r4, #0
 8016c46:	0094      	lsls	r4, r2, #2
 8016c48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8016c4c:	008b      	lsls	r3, r1, #2
 8016c4e:	461a      	mov	r2, r3
 8016c50:	4623      	mov	r3, r4
 8016c52:	4628      	mov	r0, r5
 8016c54:	4631      	mov	r1, r6
 8016c56:	f7f1 ff4f 	bl	8008af8 <__aeabi_uldivmod>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	460c      	mov	r4, r1
 8016c5e:	461a      	mov	r2, r3
 8016c60:	4bb8      	ldr	r3, [pc, #736]	; (8016f44 <UART_SetConfig+0x6f4>)
 8016c62:	fba3 2302 	umull	r2, r3, r3, r2
 8016c66:	095b      	lsrs	r3, r3, #5
 8016c68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	469b      	mov	fp, r3
 8016c70:	f04f 0c00 	mov.w	ip, #0
 8016c74:	46d9      	mov	r9, fp
 8016c76:	46e2      	mov	sl, ip
 8016c78:	eb19 0309 	adds.w	r3, r9, r9
 8016c7c:	eb4a 040a 	adc.w	r4, sl, sl
 8016c80:	4699      	mov	r9, r3
 8016c82:	46a2      	mov	sl, r4
 8016c84:	eb19 090b 	adds.w	r9, r9, fp
 8016c88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8016c8c:	f04f 0100 	mov.w	r1, #0
 8016c90:	f04f 0200 	mov.w	r2, #0
 8016c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8016c98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8016c9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8016ca0:	4689      	mov	r9, r1
 8016ca2:	4692      	mov	sl, r2
 8016ca4:	eb1b 0509 	adds.w	r5, fp, r9
 8016ca8:	eb4c 060a 	adc.w	r6, ip, sl
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	685b      	ldr	r3, [r3, #4]
 8016cb0:	4619      	mov	r1, r3
 8016cb2:	f04f 0200 	mov.w	r2, #0
 8016cb6:	f04f 0300 	mov.w	r3, #0
 8016cba:	f04f 0400 	mov.w	r4, #0
 8016cbe:	0094      	lsls	r4, r2, #2
 8016cc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8016cc4:	008b      	lsls	r3, r1, #2
 8016cc6:	461a      	mov	r2, r3
 8016cc8:	4623      	mov	r3, r4
 8016cca:	4628      	mov	r0, r5
 8016ccc:	4631      	mov	r1, r6
 8016cce:	f7f1 ff13 	bl	8008af8 <__aeabi_uldivmod>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	460c      	mov	r4, r1
 8016cd6:	461a      	mov	r2, r3
 8016cd8:	4b9a      	ldr	r3, [pc, #616]	; (8016f44 <UART_SetConfig+0x6f4>)
 8016cda:	fba3 1302 	umull	r1, r3, r3, r2
 8016cde:	095b      	lsrs	r3, r3, #5
 8016ce0:	2164      	movs	r1, #100	; 0x64
 8016ce2:	fb01 f303 	mul.w	r3, r1, r3
 8016ce6:	1ad3      	subs	r3, r2, r3
 8016ce8:	011b      	lsls	r3, r3, #4
 8016cea:	3332      	adds	r3, #50	; 0x32
 8016cec:	4a95      	ldr	r2, [pc, #596]	; (8016f44 <UART_SetConfig+0x6f4>)
 8016cee:	fba2 2303 	umull	r2, r3, r2, r3
 8016cf2:	095b      	lsrs	r3, r3, #5
 8016cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016cf8:	4498      	add	r8, r3
 8016cfa:	68bb      	ldr	r3, [r7, #8]
 8016cfc:	469b      	mov	fp, r3
 8016cfe:	f04f 0c00 	mov.w	ip, #0
 8016d02:	46d9      	mov	r9, fp
 8016d04:	46e2      	mov	sl, ip
 8016d06:	eb19 0309 	adds.w	r3, r9, r9
 8016d0a:	eb4a 040a 	adc.w	r4, sl, sl
 8016d0e:	4699      	mov	r9, r3
 8016d10:	46a2      	mov	sl, r4
 8016d12:	eb19 090b 	adds.w	r9, r9, fp
 8016d16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8016d1a:	f04f 0100 	mov.w	r1, #0
 8016d1e:	f04f 0200 	mov.w	r2, #0
 8016d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8016d26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8016d2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8016d2e:	4689      	mov	r9, r1
 8016d30:	4692      	mov	sl, r2
 8016d32:	eb1b 0509 	adds.w	r5, fp, r9
 8016d36:	eb4c 060a 	adc.w	r6, ip, sl
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	685b      	ldr	r3, [r3, #4]
 8016d3e:	4619      	mov	r1, r3
 8016d40:	f04f 0200 	mov.w	r2, #0
 8016d44:	f04f 0300 	mov.w	r3, #0
 8016d48:	f04f 0400 	mov.w	r4, #0
 8016d4c:	0094      	lsls	r4, r2, #2
 8016d4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8016d52:	008b      	lsls	r3, r1, #2
 8016d54:	461a      	mov	r2, r3
 8016d56:	4623      	mov	r3, r4
 8016d58:	4628      	mov	r0, r5
 8016d5a:	4631      	mov	r1, r6
 8016d5c:	f7f1 fecc 	bl	8008af8 <__aeabi_uldivmod>
 8016d60:	4603      	mov	r3, r0
 8016d62:	460c      	mov	r4, r1
 8016d64:	461a      	mov	r2, r3
 8016d66:	4b77      	ldr	r3, [pc, #476]	; (8016f44 <UART_SetConfig+0x6f4>)
 8016d68:	fba3 1302 	umull	r1, r3, r3, r2
 8016d6c:	095b      	lsrs	r3, r3, #5
 8016d6e:	2164      	movs	r1, #100	; 0x64
 8016d70:	fb01 f303 	mul.w	r3, r1, r3
 8016d74:	1ad3      	subs	r3, r2, r3
 8016d76:	011b      	lsls	r3, r3, #4
 8016d78:	3332      	adds	r3, #50	; 0x32
 8016d7a:	4a72      	ldr	r2, [pc, #456]	; (8016f44 <UART_SetConfig+0x6f4>)
 8016d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8016d80:	095b      	lsrs	r3, r3, #5
 8016d82:	f003 020f 	and.w	r2, r3, #15
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	4442      	add	r2, r8
 8016d8c:	609a      	str	r2, [r3, #8]
 8016d8e:	e0d0      	b.n	8016f32 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8016d90:	f7fd fa72 	bl	8014278 <HAL_RCC_GetPCLK1Freq>
 8016d94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8016d96:	68bb      	ldr	r3, [r7, #8]
 8016d98:	469a      	mov	sl, r3
 8016d9a:	f04f 0b00 	mov.w	fp, #0
 8016d9e:	46d0      	mov	r8, sl
 8016da0:	46d9      	mov	r9, fp
 8016da2:	eb18 0308 	adds.w	r3, r8, r8
 8016da6:	eb49 0409 	adc.w	r4, r9, r9
 8016daa:	4698      	mov	r8, r3
 8016dac:	46a1      	mov	r9, r4
 8016dae:	eb18 080a 	adds.w	r8, r8, sl
 8016db2:	eb49 090b 	adc.w	r9, r9, fp
 8016db6:	f04f 0100 	mov.w	r1, #0
 8016dba:	f04f 0200 	mov.w	r2, #0
 8016dbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8016dc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8016dc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8016dca:	4688      	mov	r8, r1
 8016dcc:	4691      	mov	r9, r2
 8016dce:	eb1a 0508 	adds.w	r5, sl, r8
 8016dd2:	eb4b 0609 	adc.w	r6, fp, r9
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	685b      	ldr	r3, [r3, #4]
 8016dda:	4619      	mov	r1, r3
 8016ddc:	f04f 0200 	mov.w	r2, #0
 8016de0:	f04f 0300 	mov.w	r3, #0
 8016de4:	f04f 0400 	mov.w	r4, #0
 8016de8:	0094      	lsls	r4, r2, #2
 8016dea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8016dee:	008b      	lsls	r3, r1, #2
 8016df0:	461a      	mov	r2, r3
 8016df2:	4623      	mov	r3, r4
 8016df4:	4628      	mov	r0, r5
 8016df6:	4631      	mov	r1, r6
 8016df8:	f7f1 fe7e 	bl	8008af8 <__aeabi_uldivmod>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	460c      	mov	r4, r1
 8016e00:	461a      	mov	r2, r3
 8016e02:	4b50      	ldr	r3, [pc, #320]	; (8016f44 <UART_SetConfig+0x6f4>)
 8016e04:	fba3 2302 	umull	r2, r3, r3, r2
 8016e08:	095b      	lsrs	r3, r3, #5
 8016e0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	469b      	mov	fp, r3
 8016e12:	f04f 0c00 	mov.w	ip, #0
 8016e16:	46d9      	mov	r9, fp
 8016e18:	46e2      	mov	sl, ip
 8016e1a:	eb19 0309 	adds.w	r3, r9, r9
 8016e1e:	eb4a 040a 	adc.w	r4, sl, sl
 8016e22:	4699      	mov	r9, r3
 8016e24:	46a2      	mov	sl, r4
 8016e26:	eb19 090b 	adds.w	r9, r9, fp
 8016e2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8016e2e:	f04f 0100 	mov.w	r1, #0
 8016e32:	f04f 0200 	mov.w	r2, #0
 8016e36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8016e3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8016e3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8016e42:	4689      	mov	r9, r1
 8016e44:	4692      	mov	sl, r2
 8016e46:	eb1b 0509 	adds.w	r5, fp, r9
 8016e4a:	eb4c 060a 	adc.w	r6, ip, sl
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	685b      	ldr	r3, [r3, #4]
 8016e52:	4619      	mov	r1, r3
 8016e54:	f04f 0200 	mov.w	r2, #0
 8016e58:	f04f 0300 	mov.w	r3, #0
 8016e5c:	f04f 0400 	mov.w	r4, #0
 8016e60:	0094      	lsls	r4, r2, #2
 8016e62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8016e66:	008b      	lsls	r3, r1, #2
 8016e68:	461a      	mov	r2, r3
 8016e6a:	4623      	mov	r3, r4
 8016e6c:	4628      	mov	r0, r5
 8016e6e:	4631      	mov	r1, r6
 8016e70:	f7f1 fe42 	bl	8008af8 <__aeabi_uldivmod>
 8016e74:	4603      	mov	r3, r0
 8016e76:	460c      	mov	r4, r1
 8016e78:	461a      	mov	r2, r3
 8016e7a:	4b32      	ldr	r3, [pc, #200]	; (8016f44 <UART_SetConfig+0x6f4>)
 8016e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8016e80:	095b      	lsrs	r3, r3, #5
 8016e82:	2164      	movs	r1, #100	; 0x64
 8016e84:	fb01 f303 	mul.w	r3, r1, r3
 8016e88:	1ad3      	subs	r3, r2, r3
 8016e8a:	011b      	lsls	r3, r3, #4
 8016e8c:	3332      	adds	r3, #50	; 0x32
 8016e8e:	4a2d      	ldr	r2, [pc, #180]	; (8016f44 <UART_SetConfig+0x6f4>)
 8016e90:	fba2 2303 	umull	r2, r3, r2, r3
 8016e94:	095b      	lsrs	r3, r3, #5
 8016e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016e9a:	4498      	add	r8, r3
 8016e9c:	68bb      	ldr	r3, [r7, #8]
 8016e9e:	469b      	mov	fp, r3
 8016ea0:	f04f 0c00 	mov.w	ip, #0
 8016ea4:	46d9      	mov	r9, fp
 8016ea6:	46e2      	mov	sl, ip
 8016ea8:	eb19 0309 	adds.w	r3, r9, r9
 8016eac:	eb4a 040a 	adc.w	r4, sl, sl
 8016eb0:	4699      	mov	r9, r3
 8016eb2:	46a2      	mov	sl, r4
 8016eb4:	eb19 090b 	adds.w	r9, r9, fp
 8016eb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8016ebc:	f04f 0100 	mov.w	r1, #0
 8016ec0:	f04f 0200 	mov.w	r2, #0
 8016ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8016ec8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8016ecc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8016ed0:	4689      	mov	r9, r1
 8016ed2:	4692      	mov	sl, r2
 8016ed4:	eb1b 0509 	adds.w	r5, fp, r9
 8016ed8:	eb4c 060a 	adc.w	r6, ip, sl
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	685b      	ldr	r3, [r3, #4]
 8016ee0:	4619      	mov	r1, r3
 8016ee2:	f04f 0200 	mov.w	r2, #0
 8016ee6:	f04f 0300 	mov.w	r3, #0
 8016eea:	f04f 0400 	mov.w	r4, #0
 8016eee:	0094      	lsls	r4, r2, #2
 8016ef0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8016ef4:	008b      	lsls	r3, r1, #2
 8016ef6:	461a      	mov	r2, r3
 8016ef8:	4623      	mov	r3, r4
 8016efa:	4628      	mov	r0, r5
 8016efc:	4631      	mov	r1, r6
 8016efe:	f7f1 fdfb 	bl	8008af8 <__aeabi_uldivmod>
 8016f02:	4603      	mov	r3, r0
 8016f04:	460c      	mov	r4, r1
 8016f06:	461a      	mov	r2, r3
 8016f08:	4b0e      	ldr	r3, [pc, #56]	; (8016f44 <UART_SetConfig+0x6f4>)
 8016f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8016f0e:	095b      	lsrs	r3, r3, #5
 8016f10:	2164      	movs	r1, #100	; 0x64
 8016f12:	fb01 f303 	mul.w	r3, r1, r3
 8016f16:	1ad3      	subs	r3, r2, r3
 8016f18:	011b      	lsls	r3, r3, #4
 8016f1a:	3332      	adds	r3, #50	; 0x32
 8016f1c:	4a09      	ldr	r2, [pc, #36]	; (8016f44 <UART_SetConfig+0x6f4>)
 8016f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8016f22:	095b      	lsrs	r3, r3, #5
 8016f24:	f003 020f 	and.w	r2, r3, #15
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	4442      	add	r2, r8
 8016f2e:	609a      	str	r2, [r3, #8]
}
 8016f30:	e7ff      	b.n	8016f32 <UART_SetConfig+0x6e2>
 8016f32:	bf00      	nop
 8016f34:	3714      	adds	r7, #20
 8016f36:	46bd      	mov	sp, r7
 8016f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f3c:	40011000 	.word	0x40011000
 8016f40:	40011400 	.word	0x40011400
 8016f44:	51eb851f 	.word	0x51eb851f

08016f48 <round>:
 8016f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f4a:	ec57 6b10 	vmov	r6, r7, d0
 8016f4e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8016f52:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8016f56:	2c13      	cmp	r4, #19
 8016f58:	463b      	mov	r3, r7
 8016f5a:	463d      	mov	r5, r7
 8016f5c:	dc17      	bgt.n	8016f8e <round+0x46>
 8016f5e:	2c00      	cmp	r4, #0
 8016f60:	da09      	bge.n	8016f76 <round+0x2e>
 8016f62:	3401      	adds	r4, #1
 8016f64:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8016f68:	d103      	bne.n	8016f72 <round+0x2a>
 8016f6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016f6e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016f72:	2100      	movs	r1, #0
 8016f74:	e02c      	b.n	8016fd0 <round+0x88>
 8016f76:	4a18      	ldr	r2, [pc, #96]	; (8016fd8 <round+0x90>)
 8016f78:	4122      	asrs	r2, r4
 8016f7a:	4217      	tst	r7, r2
 8016f7c:	d100      	bne.n	8016f80 <round+0x38>
 8016f7e:	b19e      	cbz	r6, 8016fa8 <round+0x60>
 8016f80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016f84:	4123      	asrs	r3, r4
 8016f86:	442b      	add	r3, r5
 8016f88:	ea23 0302 	bic.w	r3, r3, r2
 8016f8c:	e7f1      	b.n	8016f72 <round+0x2a>
 8016f8e:	2c33      	cmp	r4, #51	; 0x33
 8016f90:	dd0d      	ble.n	8016fae <round+0x66>
 8016f92:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8016f96:	d107      	bne.n	8016fa8 <round+0x60>
 8016f98:	4630      	mov	r0, r6
 8016f9a:	4639      	mov	r1, r7
 8016f9c:	ee10 2a10 	vmov	r2, s0
 8016fa0:	f7f1 f8ac 	bl	80080fc <__adddf3>
 8016fa4:	4606      	mov	r6, r0
 8016fa6:	460f      	mov	r7, r1
 8016fa8:	ec47 6b10 	vmov	d0, r6, r7
 8016fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fae:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8016fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8016fb6:	40d0      	lsrs	r0, r2
 8016fb8:	4206      	tst	r6, r0
 8016fba:	d0f5      	beq.n	8016fa8 <round+0x60>
 8016fbc:	2201      	movs	r2, #1
 8016fbe:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8016fc2:	fa02 f404 	lsl.w	r4, r2, r4
 8016fc6:	1931      	adds	r1, r6, r4
 8016fc8:	bf28      	it	cs
 8016fca:	189b      	addcs	r3, r3, r2
 8016fcc:	ea21 0100 	bic.w	r1, r1, r0
 8016fd0:	461f      	mov	r7, r3
 8016fd2:	460e      	mov	r6, r1
 8016fd4:	e7e8      	b.n	8016fa8 <round+0x60>
 8016fd6:	bf00      	nop
 8016fd8:	000fffff 	.word	0x000fffff

08016fdc <__errno>:
 8016fdc:	4b01      	ldr	r3, [pc, #4]	; (8016fe4 <__errno+0x8>)
 8016fde:	6818      	ldr	r0, [r3, #0]
 8016fe0:	4770      	bx	lr
 8016fe2:	bf00      	nop
 8016fe4:	2000002c 	.word	0x2000002c

08016fe8 <__sflush_r>:
 8016fe8:	898a      	ldrh	r2, [r1, #12]
 8016fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fee:	4605      	mov	r5, r0
 8016ff0:	0710      	lsls	r0, r2, #28
 8016ff2:	460c      	mov	r4, r1
 8016ff4:	d458      	bmi.n	80170a8 <__sflush_r+0xc0>
 8016ff6:	684b      	ldr	r3, [r1, #4]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	dc05      	bgt.n	8017008 <__sflush_r+0x20>
 8016ffc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	dc02      	bgt.n	8017008 <__sflush_r+0x20>
 8017002:	2000      	movs	r0, #0
 8017004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801700a:	2e00      	cmp	r6, #0
 801700c:	d0f9      	beq.n	8017002 <__sflush_r+0x1a>
 801700e:	2300      	movs	r3, #0
 8017010:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017014:	682f      	ldr	r7, [r5, #0]
 8017016:	6a21      	ldr	r1, [r4, #32]
 8017018:	602b      	str	r3, [r5, #0]
 801701a:	d032      	beq.n	8017082 <__sflush_r+0x9a>
 801701c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801701e:	89a3      	ldrh	r3, [r4, #12]
 8017020:	075a      	lsls	r2, r3, #29
 8017022:	d505      	bpl.n	8017030 <__sflush_r+0x48>
 8017024:	6863      	ldr	r3, [r4, #4]
 8017026:	1ac0      	subs	r0, r0, r3
 8017028:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801702a:	b10b      	cbz	r3, 8017030 <__sflush_r+0x48>
 801702c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801702e:	1ac0      	subs	r0, r0, r3
 8017030:	2300      	movs	r3, #0
 8017032:	4602      	mov	r2, r0
 8017034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017036:	6a21      	ldr	r1, [r4, #32]
 8017038:	4628      	mov	r0, r5
 801703a:	47b0      	blx	r6
 801703c:	1c43      	adds	r3, r0, #1
 801703e:	89a3      	ldrh	r3, [r4, #12]
 8017040:	d106      	bne.n	8017050 <__sflush_r+0x68>
 8017042:	6829      	ldr	r1, [r5, #0]
 8017044:	291d      	cmp	r1, #29
 8017046:	d848      	bhi.n	80170da <__sflush_r+0xf2>
 8017048:	4a29      	ldr	r2, [pc, #164]	; (80170f0 <__sflush_r+0x108>)
 801704a:	40ca      	lsrs	r2, r1
 801704c:	07d6      	lsls	r6, r2, #31
 801704e:	d544      	bpl.n	80170da <__sflush_r+0xf2>
 8017050:	2200      	movs	r2, #0
 8017052:	6062      	str	r2, [r4, #4]
 8017054:	04d9      	lsls	r1, r3, #19
 8017056:	6922      	ldr	r2, [r4, #16]
 8017058:	6022      	str	r2, [r4, #0]
 801705a:	d504      	bpl.n	8017066 <__sflush_r+0x7e>
 801705c:	1c42      	adds	r2, r0, #1
 801705e:	d101      	bne.n	8017064 <__sflush_r+0x7c>
 8017060:	682b      	ldr	r3, [r5, #0]
 8017062:	b903      	cbnz	r3, 8017066 <__sflush_r+0x7e>
 8017064:	6560      	str	r0, [r4, #84]	; 0x54
 8017066:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017068:	602f      	str	r7, [r5, #0]
 801706a:	2900      	cmp	r1, #0
 801706c:	d0c9      	beq.n	8017002 <__sflush_r+0x1a>
 801706e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017072:	4299      	cmp	r1, r3
 8017074:	d002      	beq.n	801707c <__sflush_r+0x94>
 8017076:	4628      	mov	r0, r5
 8017078:	f000 f9fa 	bl	8017470 <_free_r>
 801707c:	2000      	movs	r0, #0
 801707e:	6360      	str	r0, [r4, #52]	; 0x34
 8017080:	e7c0      	b.n	8017004 <__sflush_r+0x1c>
 8017082:	2301      	movs	r3, #1
 8017084:	4628      	mov	r0, r5
 8017086:	47b0      	blx	r6
 8017088:	1c41      	adds	r1, r0, #1
 801708a:	d1c8      	bne.n	801701e <__sflush_r+0x36>
 801708c:	682b      	ldr	r3, [r5, #0]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d0c5      	beq.n	801701e <__sflush_r+0x36>
 8017092:	2b1d      	cmp	r3, #29
 8017094:	d001      	beq.n	801709a <__sflush_r+0xb2>
 8017096:	2b16      	cmp	r3, #22
 8017098:	d101      	bne.n	801709e <__sflush_r+0xb6>
 801709a:	602f      	str	r7, [r5, #0]
 801709c:	e7b1      	b.n	8017002 <__sflush_r+0x1a>
 801709e:	89a3      	ldrh	r3, [r4, #12]
 80170a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170a4:	81a3      	strh	r3, [r4, #12]
 80170a6:	e7ad      	b.n	8017004 <__sflush_r+0x1c>
 80170a8:	690f      	ldr	r7, [r1, #16]
 80170aa:	2f00      	cmp	r7, #0
 80170ac:	d0a9      	beq.n	8017002 <__sflush_r+0x1a>
 80170ae:	0793      	lsls	r3, r2, #30
 80170b0:	680e      	ldr	r6, [r1, #0]
 80170b2:	bf08      	it	eq
 80170b4:	694b      	ldreq	r3, [r1, #20]
 80170b6:	600f      	str	r7, [r1, #0]
 80170b8:	bf18      	it	ne
 80170ba:	2300      	movne	r3, #0
 80170bc:	eba6 0807 	sub.w	r8, r6, r7
 80170c0:	608b      	str	r3, [r1, #8]
 80170c2:	f1b8 0f00 	cmp.w	r8, #0
 80170c6:	dd9c      	ble.n	8017002 <__sflush_r+0x1a>
 80170c8:	4643      	mov	r3, r8
 80170ca:	463a      	mov	r2, r7
 80170cc:	6a21      	ldr	r1, [r4, #32]
 80170ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80170d0:	4628      	mov	r0, r5
 80170d2:	47b0      	blx	r6
 80170d4:	2800      	cmp	r0, #0
 80170d6:	dc06      	bgt.n	80170e6 <__sflush_r+0xfe>
 80170d8:	89a3      	ldrh	r3, [r4, #12]
 80170da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170de:	81a3      	strh	r3, [r4, #12]
 80170e0:	f04f 30ff 	mov.w	r0, #4294967295
 80170e4:	e78e      	b.n	8017004 <__sflush_r+0x1c>
 80170e6:	4407      	add	r7, r0
 80170e8:	eba8 0800 	sub.w	r8, r8, r0
 80170ec:	e7e9      	b.n	80170c2 <__sflush_r+0xda>
 80170ee:	bf00      	nop
 80170f0:	20400001 	.word	0x20400001

080170f4 <_fflush_r>:
 80170f4:	b538      	push	{r3, r4, r5, lr}
 80170f6:	690b      	ldr	r3, [r1, #16]
 80170f8:	4605      	mov	r5, r0
 80170fa:	460c      	mov	r4, r1
 80170fc:	b1db      	cbz	r3, 8017136 <_fflush_r+0x42>
 80170fe:	b118      	cbz	r0, 8017108 <_fflush_r+0x14>
 8017100:	6983      	ldr	r3, [r0, #24]
 8017102:	b90b      	cbnz	r3, 8017108 <_fflush_r+0x14>
 8017104:	f000 f872 	bl	80171ec <__sinit>
 8017108:	4b0c      	ldr	r3, [pc, #48]	; (801713c <_fflush_r+0x48>)
 801710a:	429c      	cmp	r4, r3
 801710c:	d109      	bne.n	8017122 <_fflush_r+0x2e>
 801710e:	686c      	ldr	r4, [r5, #4]
 8017110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017114:	b17b      	cbz	r3, 8017136 <_fflush_r+0x42>
 8017116:	4621      	mov	r1, r4
 8017118:	4628      	mov	r0, r5
 801711a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801711e:	f7ff bf63 	b.w	8016fe8 <__sflush_r>
 8017122:	4b07      	ldr	r3, [pc, #28]	; (8017140 <_fflush_r+0x4c>)
 8017124:	429c      	cmp	r4, r3
 8017126:	d101      	bne.n	801712c <_fflush_r+0x38>
 8017128:	68ac      	ldr	r4, [r5, #8]
 801712a:	e7f1      	b.n	8017110 <_fflush_r+0x1c>
 801712c:	4b05      	ldr	r3, [pc, #20]	; (8017144 <_fflush_r+0x50>)
 801712e:	429c      	cmp	r4, r3
 8017130:	bf08      	it	eq
 8017132:	68ec      	ldreq	r4, [r5, #12]
 8017134:	e7ec      	b.n	8017110 <_fflush_r+0x1c>
 8017136:	2000      	movs	r0, #0
 8017138:	bd38      	pop	{r3, r4, r5, pc}
 801713a:	bf00      	nop
 801713c:	0801c700 	.word	0x0801c700
 8017140:	0801c720 	.word	0x0801c720
 8017144:	0801c6e0 	.word	0x0801c6e0

08017148 <fflush>:
 8017148:	4601      	mov	r1, r0
 801714a:	b920      	cbnz	r0, 8017156 <fflush+0xe>
 801714c:	4b04      	ldr	r3, [pc, #16]	; (8017160 <fflush+0x18>)
 801714e:	4905      	ldr	r1, [pc, #20]	; (8017164 <fflush+0x1c>)
 8017150:	6818      	ldr	r0, [r3, #0]
 8017152:	f000 b8d3 	b.w	80172fc <_fwalk_reent>
 8017156:	4b04      	ldr	r3, [pc, #16]	; (8017168 <fflush+0x20>)
 8017158:	6818      	ldr	r0, [r3, #0]
 801715a:	f7ff bfcb 	b.w	80170f4 <_fflush_r>
 801715e:	bf00      	nop
 8017160:	0801c740 	.word	0x0801c740
 8017164:	080170f5 	.word	0x080170f5
 8017168:	2000002c 	.word	0x2000002c

0801716c <std>:
 801716c:	2300      	movs	r3, #0
 801716e:	b510      	push	{r4, lr}
 8017170:	4604      	mov	r4, r0
 8017172:	e9c0 3300 	strd	r3, r3, [r0]
 8017176:	6083      	str	r3, [r0, #8]
 8017178:	8181      	strh	r1, [r0, #12]
 801717a:	6643      	str	r3, [r0, #100]	; 0x64
 801717c:	81c2      	strh	r2, [r0, #14]
 801717e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017182:	6183      	str	r3, [r0, #24]
 8017184:	4619      	mov	r1, r3
 8017186:	2208      	movs	r2, #8
 8017188:	305c      	adds	r0, #92	; 0x5c
 801718a:	f000 f968 	bl	801745e <memset>
 801718e:	4b05      	ldr	r3, [pc, #20]	; (80171a4 <std+0x38>)
 8017190:	6263      	str	r3, [r4, #36]	; 0x24
 8017192:	4b05      	ldr	r3, [pc, #20]	; (80171a8 <std+0x3c>)
 8017194:	62a3      	str	r3, [r4, #40]	; 0x28
 8017196:	4b05      	ldr	r3, [pc, #20]	; (80171ac <std+0x40>)
 8017198:	62e3      	str	r3, [r4, #44]	; 0x2c
 801719a:	4b05      	ldr	r3, [pc, #20]	; (80171b0 <std+0x44>)
 801719c:	6224      	str	r4, [r4, #32]
 801719e:	6323      	str	r3, [r4, #48]	; 0x30
 80171a0:	bd10      	pop	{r4, pc}
 80171a2:	bf00      	nop
 80171a4:	08018f15 	.word	0x08018f15
 80171a8:	08018f37 	.word	0x08018f37
 80171ac:	08018f6f 	.word	0x08018f6f
 80171b0:	08018f93 	.word	0x08018f93

080171b4 <_cleanup_r>:
 80171b4:	4901      	ldr	r1, [pc, #4]	; (80171bc <_cleanup_r+0x8>)
 80171b6:	f000 b8a1 	b.w	80172fc <_fwalk_reent>
 80171ba:	bf00      	nop
 80171bc:	080170f5 	.word	0x080170f5

080171c0 <__sfmoreglue>:
 80171c0:	b570      	push	{r4, r5, r6, lr}
 80171c2:	1e4a      	subs	r2, r1, #1
 80171c4:	2568      	movs	r5, #104	; 0x68
 80171c6:	4355      	muls	r5, r2
 80171c8:	460e      	mov	r6, r1
 80171ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80171ce:	f000 f99d 	bl	801750c <_malloc_r>
 80171d2:	4604      	mov	r4, r0
 80171d4:	b140      	cbz	r0, 80171e8 <__sfmoreglue+0x28>
 80171d6:	2100      	movs	r1, #0
 80171d8:	e9c0 1600 	strd	r1, r6, [r0]
 80171dc:	300c      	adds	r0, #12
 80171de:	60a0      	str	r0, [r4, #8]
 80171e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80171e4:	f000 f93b 	bl	801745e <memset>
 80171e8:	4620      	mov	r0, r4
 80171ea:	bd70      	pop	{r4, r5, r6, pc}

080171ec <__sinit>:
 80171ec:	6983      	ldr	r3, [r0, #24]
 80171ee:	b510      	push	{r4, lr}
 80171f0:	4604      	mov	r4, r0
 80171f2:	bb33      	cbnz	r3, 8017242 <__sinit+0x56>
 80171f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80171f8:	6503      	str	r3, [r0, #80]	; 0x50
 80171fa:	4b12      	ldr	r3, [pc, #72]	; (8017244 <__sinit+0x58>)
 80171fc:	4a12      	ldr	r2, [pc, #72]	; (8017248 <__sinit+0x5c>)
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	6282      	str	r2, [r0, #40]	; 0x28
 8017202:	4298      	cmp	r0, r3
 8017204:	bf04      	itt	eq
 8017206:	2301      	moveq	r3, #1
 8017208:	6183      	streq	r3, [r0, #24]
 801720a:	f000 f81f 	bl	801724c <__sfp>
 801720e:	6060      	str	r0, [r4, #4]
 8017210:	4620      	mov	r0, r4
 8017212:	f000 f81b 	bl	801724c <__sfp>
 8017216:	60a0      	str	r0, [r4, #8]
 8017218:	4620      	mov	r0, r4
 801721a:	f000 f817 	bl	801724c <__sfp>
 801721e:	2200      	movs	r2, #0
 8017220:	60e0      	str	r0, [r4, #12]
 8017222:	2104      	movs	r1, #4
 8017224:	6860      	ldr	r0, [r4, #4]
 8017226:	f7ff ffa1 	bl	801716c <std>
 801722a:	2201      	movs	r2, #1
 801722c:	2109      	movs	r1, #9
 801722e:	68a0      	ldr	r0, [r4, #8]
 8017230:	f7ff ff9c 	bl	801716c <std>
 8017234:	2202      	movs	r2, #2
 8017236:	2112      	movs	r1, #18
 8017238:	68e0      	ldr	r0, [r4, #12]
 801723a:	f7ff ff97 	bl	801716c <std>
 801723e:	2301      	movs	r3, #1
 8017240:	61a3      	str	r3, [r4, #24]
 8017242:	bd10      	pop	{r4, pc}
 8017244:	0801c740 	.word	0x0801c740
 8017248:	080171b5 	.word	0x080171b5

0801724c <__sfp>:
 801724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801724e:	4b1b      	ldr	r3, [pc, #108]	; (80172bc <__sfp+0x70>)
 8017250:	681e      	ldr	r6, [r3, #0]
 8017252:	69b3      	ldr	r3, [r6, #24]
 8017254:	4607      	mov	r7, r0
 8017256:	b913      	cbnz	r3, 801725e <__sfp+0x12>
 8017258:	4630      	mov	r0, r6
 801725a:	f7ff ffc7 	bl	80171ec <__sinit>
 801725e:	3648      	adds	r6, #72	; 0x48
 8017260:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017264:	3b01      	subs	r3, #1
 8017266:	d503      	bpl.n	8017270 <__sfp+0x24>
 8017268:	6833      	ldr	r3, [r6, #0]
 801726a:	b133      	cbz	r3, 801727a <__sfp+0x2e>
 801726c:	6836      	ldr	r6, [r6, #0]
 801726e:	e7f7      	b.n	8017260 <__sfp+0x14>
 8017270:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017274:	b16d      	cbz	r5, 8017292 <__sfp+0x46>
 8017276:	3468      	adds	r4, #104	; 0x68
 8017278:	e7f4      	b.n	8017264 <__sfp+0x18>
 801727a:	2104      	movs	r1, #4
 801727c:	4638      	mov	r0, r7
 801727e:	f7ff ff9f 	bl	80171c0 <__sfmoreglue>
 8017282:	6030      	str	r0, [r6, #0]
 8017284:	2800      	cmp	r0, #0
 8017286:	d1f1      	bne.n	801726c <__sfp+0x20>
 8017288:	230c      	movs	r3, #12
 801728a:	603b      	str	r3, [r7, #0]
 801728c:	4604      	mov	r4, r0
 801728e:	4620      	mov	r0, r4
 8017290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017292:	4b0b      	ldr	r3, [pc, #44]	; (80172c0 <__sfp+0x74>)
 8017294:	6665      	str	r5, [r4, #100]	; 0x64
 8017296:	e9c4 5500 	strd	r5, r5, [r4]
 801729a:	60a5      	str	r5, [r4, #8]
 801729c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80172a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80172a4:	2208      	movs	r2, #8
 80172a6:	4629      	mov	r1, r5
 80172a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80172ac:	f000 f8d7 	bl	801745e <memset>
 80172b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80172b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80172b8:	e7e9      	b.n	801728e <__sfp+0x42>
 80172ba:	bf00      	nop
 80172bc:	0801c740 	.word	0x0801c740
 80172c0:	ffff0001 	.word	0xffff0001

080172c4 <_fwalk>:
 80172c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172c8:	4688      	mov	r8, r1
 80172ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80172ce:	2600      	movs	r6, #0
 80172d0:	b914      	cbnz	r4, 80172d8 <_fwalk+0x14>
 80172d2:	4630      	mov	r0, r6
 80172d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172d8:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80172dc:	3f01      	subs	r7, #1
 80172de:	d501      	bpl.n	80172e4 <_fwalk+0x20>
 80172e0:	6824      	ldr	r4, [r4, #0]
 80172e2:	e7f5      	b.n	80172d0 <_fwalk+0xc>
 80172e4:	89ab      	ldrh	r3, [r5, #12]
 80172e6:	2b01      	cmp	r3, #1
 80172e8:	d906      	bls.n	80172f8 <_fwalk+0x34>
 80172ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80172ee:	3301      	adds	r3, #1
 80172f0:	d002      	beq.n	80172f8 <_fwalk+0x34>
 80172f2:	4628      	mov	r0, r5
 80172f4:	47c0      	blx	r8
 80172f6:	4306      	orrs	r6, r0
 80172f8:	3568      	adds	r5, #104	; 0x68
 80172fa:	e7ef      	b.n	80172dc <_fwalk+0x18>

080172fc <_fwalk_reent>:
 80172fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017300:	4680      	mov	r8, r0
 8017302:	4689      	mov	r9, r1
 8017304:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017308:	2600      	movs	r6, #0
 801730a:	b914      	cbnz	r4, 8017312 <_fwalk_reent+0x16>
 801730c:	4630      	mov	r0, r6
 801730e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017312:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017316:	3f01      	subs	r7, #1
 8017318:	d501      	bpl.n	801731e <_fwalk_reent+0x22>
 801731a:	6824      	ldr	r4, [r4, #0]
 801731c:	e7f5      	b.n	801730a <_fwalk_reent+0xe>
 801731e:	89ab      	ldrh	r3, [r5, #12]
 8017320:	2b01      	cmp	r3, #1
 8017322:	d907      	bls.n	8017334 <_fwalk_reent+0x38>
 8017324:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017328:	3301      	adds	r3, #1
 801732a:	d003      	beq.n	8017334 <_fwalk_reent+0x38>
 801732c:	4629      	mov	r1, r5
 801732e:	4640      	mov	r0, r8
 8017330:	47c8      	blx	r9
 8017332:	4306      	orrs	r6, r0
 8017334:	3568      	adds	r5, #104	; 0x68
 8017336:	e7ee      	b.n	8017316 <_fwalk_reent+0x1a>

08017338 <__libc_init_array>:
 8017338:	b570      	push	{r4, r5, r6, lr}
 801733a:	4e0d      	ldr	r6, [pc, #52]	; (8017370 <__libc_init_array+0x38>)
 801733c:	4c0d      	ldr	r4, [pc, #52]	; (8017374 <__libc_init_array+0x3c>)
 801733e:	1ba4      	subs	r4, r4, r6
 8017340:	10a4      	asrs	r4, r4, #2
 8017342:	2500      	movs	r5, #0
 8017344:	42a5      	cmp	r5, r4
 8017346:	d109      	bne.n	801735c <__libc_init_array+0x24>
 8017348:	4e0b      	ldr	r6, [pc, #44]	; (8017378 <__libc_init_array+0x40>)
 801734a:	4c0c      	ldr	r4, [pc, #48]	; (801737c <__libc_init_array+0x44>)
 801734c:	f004 feda 	bl	801c104 <_init>
 8017350:	1ba4      	subs	r4, r4, r6
 8017352:	10a4      	asrs	r4, r4, #2
 8017354:	2500      	movs	r5, #0
 8017356:	42a5      	cmp	r5, r4
 8017358:	d105      	bne.n	8017366 <__libc_init_array+0x2e>
 801735a:	bd70      	pop	{r4, r5, r6, pc}
 801735c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017360:	4798      	blx	r3
 8017362:	3501      	adds	r5, #1
 8017364:	e7ee      	b.n	8017344 <__libc_init_array+0xc>
 8017366:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801736a:	4798      	blx	r3
 801736c:	3501      	adds	r5, #1
 801736e:	e7f2      	b.n	8017356 <__libc_init_array+0x1e>
 8017370:	0801ca18 	.word	0x0801ca18
 8017374:	0801ca18 	.word	0x0801ca18
 8017378:	0801ca18 	.word	0x0801ca18
 801737c:	0801ca1c 	.word	0x0801ca1c

08017380 <__swhatbuf_r>:
 8017380:	b570      	push	{r4, r5, r6, lr}
 8017382:	460e      	mov	r6, r1
 8017384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017388:	2900      	cmp	r1, #0
 801738a:	b096      	sub	sp, #88	; 0x58
 801738c:	4614      	mov	r4, r2
 801738e:	461d      	mov	r5, r3
 8017390:	da07      	bge.n	80173a2 <__swhatbuf_r+0x22>
 8017392:	2300      	movs	r3, #0
 8017394:	602b      	str	r3, [r5, #0]
 8017396:	89b3      	ldrh	r3, [r6, #12]
 8017398:	061a      	lsls	r2, r3, #24
 801739a:	d410      	bmi.n	80173be <__swhatbuf_r+0x3e>
 801739c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80173a0:	e00e      	b.n	80173c0 <__swhatbuf_r+0x40>
 80173a2:	466a      	mov	r2, sp
 80173a4:	f003 fd08 	bl	801adb8 <_fstat_r>
 80173a8:	2800      	cmp	r0, #0
 80173aa:	dbf2      	blt.n	8017392 <__swhatbuf_r+0x12>
 80173ac:	9a01      	ldr	r2, [sp, #4]
 80173ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80173b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80173b6:	425a      	negs	r2, r3
 80173b8:	415a      	adcs	r2, r3
 80173ba:	602a      	str	r2, [r5, #0]
 80173bc:	e7ee      	b.n	801739c <__swhatbuf_r+0x1c>
 80173be:	2340      	movs	r3, #64	; 0x40
 80173c0:	2000      	movs	r0, #0
 80173c2:	6023      	str	r3, [r4, #0]
 80173c4:	b016      	add	sp, #88	; 0x58
 80173c6:	bd70      	pop	{r4, r5, r6, pc}

080173c8 <__smakebuf_r>:
 80173c8:	898b      	ldrh	r3, [r1, #12]
 80173ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80173cc:	079d      	lsls	r5, r3, #30
 80173ce:	4606      	mov	r6, r0
 80173d0:	460c      	mov	r4, r1
 80173d2:	d507      	bpl.n	80173e4 <__smakebuf_r+0x1c>
 80173d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80173d8:	6023      	str	r3, [r4, #0]
 80173da:	6123      	str	r3, [r4, #16]
 80173dc:	2301      	movs	r3, #1
 80173de:	6163      	str	r3, [r4, #20]
 80173e0:	b002      	add	sp, #8
 80173e2:	bd70      	pop	{r4, r5, r6, pc}
 80173e4:	ab01      	add	r3, sp, #4
 80173e6:	466a      	mov	r2, sp
 80173e8:	f7ff ffca 	bl	8017380 <__swhatbuf_r>
 80173ec:	9900      	ldr	r1, [sp, #0]
 80173ee:	4605      	mov	r5, r0
 80173f0:	4630      	mov	r0, r6
 80173f2:	f000 f88b 	bl	801750c <_malloc_r>
 80173f6:	b948      	cbnz	r0, 801740c <__smakebuf_r+0x44>
 80173f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173fc:	059a      	lsls	r2, r3, #22
 80173fe:	d4ef      	bmi.n	80173e0 <__smakebuf_r+0x18>
 8017400:	f023 0303 	bic.w	r3, r3, #3
 8017404:	f043 0302 	orr.w	r3, r3, #2
 8017408:	81a3      	strh	r3, [r4, #12]
 801740a:	e7e3      	b.n	80173d4 <__smakebuf_r+0xc>
 801740c:	4b0d      	ldr	r3, [pc, #52]	; (8017444 <__smakebuf_r+0x7c>)
 801740e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017410:	89a3      	ldrh	r3, [r4, #12]
 8017412:	6020      	str	r0, [r4, #0]
 8017414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017418:	81a3      	strh	r3, [r4, #12]
 801741a:	9b00      	ldr	r3, [sp, #0]
 801741c:	6163      	str	r3, [r4, #20]
 801741e:	9b01      	ldr	r3, [sp, #4]
 8017420:	6120      	str	r0, [r4, #16]
 8017422:	b15b      	cbz	r3, 801743c <__smakebuf_r+0x74>
 8017424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017428:	4630      	mov	r0, r6
 801742a:	f003 fffd 	bl	801b428 <_isatty_r>
 801742e:	b128      	cbz	r0, 801743c <__smakebuf_r+0x74>
 8017430:	89a3      	ldrh	r3, [r4, #12]
 8017432:	f023 0303 	bic.w	r3, r3, #3
 8017436:	f043 0301 	orr.w	r3, r3, #1
 801743a:	81a3      	strh	r3, [r4, #12]
 801743c:	89a3      	ldrh	r3, [r4, #12]
 801743e:	431d      	orrs	r5, r3
 8017440:	81a5      	strh	r5, [r4, #12]
 8017442:	e7cd      	b.n	80173e0 <__smakebuf_r+0x18>
 8017444:	080171b5 	.word	0x080171b5

08017448 <memcpy>:
 8017448:	b510      	push	{r4, lr}
 801744a:	1e43      	subs	r3, r0, #1
 801744c:	440a      	add	r2, r1
 801744e:	4291      	cmp	r1, r2
 8017450:	d100      	bne.n	8017454 <memcpy+0xc>
 8017452:	bd10      	pop	{r4, pc}
 8017454:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017458:	f803 4f01 	strb.w	r4, [r3, #1]!
 801745c:	e7f7      	b.n	801744e <memcpy+0x6>

0801745e <memset>:
 801745e:	4402      	add	r2, r0
 8017460:	4603      	mov	r3, r0
 8017462:	4293      	cmp	r3, r2
 8017464:	d100      	bne.n	8017468 <memset+0xa>
 8017466:	4770      	bx	lr
 8017468:	f803 1b01 	strb.w	r1, [r3], #1
 801746c:	e7f9      	b.n	8017462 <memset+0x4>
	...

08017470 <_free_r>:
 8017470:	b538      	push	{r3, r4, r5, lr}
 8017472:	4605      	mov	r5, r0
 8017474:	2900      	cmp	r1, #0
 8017476:	d045      	beq.n	8017504 <_free_r+0x94>
 8017478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801747c:	1f0c      	subs	r4, r1, #4
 801747e:	2b00      	cmp	r3, #0
 8017480:	bfb8      	it	lt
 8017482:	18e4      	addlt	r4, r4, r3
 8017484:	f004 f847 	bl	801b516 <__malloc_lock>
 8017488:	4a1f      	ldr	r2, [pc, #124]	; (8017508 <_free_r+0x98>)
 801748a:	6813      	ldr	r3, [r2, #0]
 801748c:	4610      	mov	r0, r2
 801748e:	b933      	cbnz	r3, 801749e <_free_r+0x2e>
 8017490:	6063      	str	r3, [r4, #4]
 8017492:	6014      	str	r4, [r2, #0]
 8017494:	4628      	mov	r0, r5
 8017496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801749a:	f004 b83d 	b.w	801b518 <__malloc_unlock>
 801749e:	42a3      	cmp	r3, r4
 80174a0:	d90c      	bls.n	80174bc <_free_r+0x4c>
 80174a2:	6821      	ldr	r1, [r4, #0]
 80174a4:	1862      	adds	r2, r4, r1
 80174a6:	4293      	cmp	r3, r2
 80174a8:	bf04      	itt	eq
 80174aa:	681a      	ldreq	r2, [r3, #0]
 80174ac:	685b      	ldreq	r3, [r3, #4]
 80174ae:	6063      	str	r3, [r4, #4]
 80174b0:	bf04      	itt	eq
 80174b2:	1852      	addeq	r2, r2, r1
 80174b4:	6022      	streq	r2, [r4, #0]
 80174b6:	6004      	str	r4, [r0, #0]
 80174b8:	e7ec      	b.n	8017494 <_free_r+0x24>
 80174ba:	4613      	mov	r3, r2
 80174bc:	685a      	ldr	r2, [r3, #4]
 80174be:	b10a      	cbz	r2, 80174c4 <_free_r+0x54>
 80174c0:	42a2      	cmp	r2, r4
 80174c2:	d9fa      	bls.n	80174ba <_free_r+0x4a>
 80174c4:	6819      	ldr	r1, [r3, #0]
 80174c6:	1858      	adds	r0, r3, r1
 80174c8:	42a0      	cmp	r0, r4
 80174ca:	d10b      	bne.n	80174e4 <_free_r+0x74>
 80174cc:	6820      	ldr	r0, [r4, #0]
 80174ce:	4401      	add	r1, r0
 80174d0:	1858      	adds	r0, r3, r1
 80174d2:	4282      	cmp	r2, r0
 80174d4:	6019      	str	r1, [r3, #0]
 80174d6:	d1dd      	bne.n	8017494 <_free_r+0x24>
 80174d8:	6810      	ldr	r0, [r2, #0]
 80174da:	6852      	ldr	r2, [r2, #4]
 80174dc:	605a      	str	r2, [r3, #4]
 80174de:	4401      	add	r1, r0
 80174e0:	6019      	str	r1, [r3, #0]
 80174e2:	e7d7      	b.n	8017494 <_free_r+0x24>
 80174e4:	d902      	bls.n	80174ec <_free_r+0x7c>
 80174e6:	230c      	movs	r3, #12
 80174e8:	602b      	str	r3, [r5, #0]
 80174ea:	e7d3      	b.n	8017494 <_free_r+0x24>
 80174ec:	6820      	ldr	r0, [r4, #0]
 80174ee:	1821      	adds	r1, r4, r0
 80174f0:	428a      	cmp	r2, r1
 80174f2:	bf04      	itt	eq
 80174f4:	6811      	ldreq	r1, [r2, #0]
 80174f6:	6852      	ldreq	r2, [r2, #4]
 80174f8:	6062      	str	r2, [r4, #4]
 80174fa:	bf04      	itt	eq
 80174fc:	1809      	addeq	r1, r1, r0
 80174fe:	6021      	streq	r1, [r4, #0]
 8017500:	605c      	str	r4, [r3, #4]
 8017502:	e7c7      	b.n	8017494 <_free_r+0x24>
 8017504:	bd38      	pop	{r3, r4, r5, pc}
 8017506:	bf00      	nop
 8017508:	200004d4 	.word	0x200004d4

0801750c <_malloc_r>:
 801750c:	b570      	push	{r4, r5, r6, lr}
 801750e:	1ccd      	adds	r5, r1, #3
 8017510:	f025 0503 	bic.w	r5, r5, #3
 8017514:	3508      	adds	r5, #8
 8017516:	2d0c      	cmp	r5, #12
 8017518:	bf38      	it	cc
 801751a:	250c      	movcc	r5, #12
 801751c:	2d00      	cmp	r5, #0
 801751e:	4606      	mov	r6, r0
 8017520:	db01      	blt.n	8017526 <_malloc_r+0x1a>
 8017522:	42a9      	cmp	r1, r5
 8017524:	d903      	bls.n	801752e <_malloc_r+0x22>
 8017526:	230c      	movs	r3, #12
 8017528:	6033      	str	r3, [r6, #0]
 801752a:	2000      	movs	r0, #0
 801752c:	bd70      	pop	{r4, r5, r6, pc}
 801752e:	f003 fff2 	bl	801b516 <__malloc_lock>
 8017532:	4a21      	ldr	r2, [pc, #132]	; (80175b8 <_malloc_r+0xac>)
 8017534:	6814      	ldr	r4, [r2, #0]
 8017536:	4621      	mov	r1, r4
 8017538:	b991      	cbnz	r1, 8017560 <_malloc_r+0x54>
 801753a:	4c20      	ldr	r4, [pc, #128]	; (80175bc <_malloc_r+0xb0>)
 801753c:	6823      	ldr	r3, [r4, #0]
 801753e:	b91b      	cbnz	r3, 8017548 <_malloc_r+0x3c>
 8017540:	4630      	mov	r0, r6
 8017542:	f001 fbb1 	bl	8018ca8 <_sbrk_r>
 8017546:	6020      	str	r0, [r4, #0]
 8017548:	4629      	mov	r1, r5
 801754a:	4630      	mov	r0, r6
 801754c:	f001 fbac 	bl	8018ca8 <_sbrk_r>
 8017550:	1c43      	adds	r3, r0, #1
 8017552:	d124      	bne.n	801759e <_malloc_r+0x92>
 8017554:	230c      	movs	r3, #12
 8017556:	6033      	str	r3, [r6, #0]
 8017558:	4630      	mov	r0, r6
 801755a:	f003 ffdd 	bl	801b518 <__malloc_unlock>
 801755e:	e7e4      	b.n	801752a <_malloc_r+0x1e>
 8017560:	680b      	ldr	r3, [r1, #0]
 8017562:	1b5b      	subs	r3, r3, r5
 8017564:	d418      	bmi.n	8017598 <_malloc_r+0x8c>
 8017566:	2b0b      	cmp	r3, #11
 8017568:	d90f      	bls.n	801758a <_malloc_r+0x7e>
 801756a:	600b      	str	r3, [r1, #0]
 801756c:	50cd      	str	r5, [r1, r3]
 801756e:	18cc      	adds	r4, r1, r3
 8017570:	4630      	mov	r0, r6
 8017572:	f003 ffd1 	bl	801b518 <__malloc_unlock>
 8017576:	f104 000b 	add.w	r0, r4, #11
 801757a:	1d23      	adds	r3, r4, #4
 801757c:	f020 0007 	bic.w	r0, r0, #7
 8017580:	1ac3      	subs	r3, r0, r3
 8017582:	d0d3      	beq.n	801752c <_malloc_r+0x20>
 8017584:	425a      	negs	r2, r3
 8017586:	50e2      	str	r2, [r4, r3]
 8017588:	e7d0      	b.n	801752c <_malloc_r+0x20>
 801758a:	428c      	cmp	r4, r1
 801758c:	684b      	ldr	r3, [r1, #4]
 801758e:	bf16      	itet	ne
 8017590:	6063      	strne	r3, [r4, #4]
 8017592:	6013      	streq	r3, [r2, #0]
 8017594:	460c      	movne	r4, r1
 8017596:	e7eb      	b.n	8017570 <_malloc_r+0x64>
 8017598:	460c      	mov	r4, r1
 801759a:	6849      	ldr	r1, [r1, #4]
 801759c:	e7cc      	b.n	8017538 <_malloc_r+0x2c>
 801759e:	1cc4      	adds	r4, r0, #3
 80175a0:	f024 0403 	bic.w	r4, r4, #3
 80175a4:	42a0      	cmp	r0, r4
 80175a6:	d005      	beq.n	80175b4 <_malloc_r+0xa8>
 80175a8:	1a21      	subs	r1, r4, r0
 80175aa:	4630      	mov	r0, r6
 80175ac:	f001 fb7c 	bl	8018ca8 <_sbrk_r>
 80175b0:	3001      	adds	r0, #1
 80175b2:	d0cf      	beq.n	8017554 <_malloc_r+0x48>
 80175b4:	6025      	str	r5, [r4, #0]
 80175b6:	e7db      	b.n	8017570 <_malloc_r+0x64>
 80175b8:	200004d4 	.word	0x200004d4
 80175bc:	200004d8 	.word	0x200004d8

080175c0 <__sfputc_r>:
 80175c0:	6893      	ldr	r3, [r2, #8]
 80175c2:	3b01      	subs	r3, #1
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	b410      	push	{r4}
 80175c8:	6093      	str	r3, [r2, #8]
 80175ca:	da08      	bge.n	80175de <__sfputc_r+0x1e>
 80175cc:	6994      	ldr	r4, [r2, #24]
 80175ce:	42a3      	cmp	r3, r4
 80175d0:	db01      	blt.n	80175d6 <__sfputc_r+0x16>
 80175d2:	290a      	cmp	r1, #10
 80175d4:	d103      	bne.n	80175de <__sfputc_r+0x1e>
 80175d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175da:	f002 bcc7 	b.w	8019f6c <__swbuf_r>
 80175de:	6813      	ldr	r3, [r2, #0]
 80175e0:	1c58      	adds	r0, r3, #1
 80175e2:	6010      	str	r0, [r2, #0]
 80175e4:	7019      	strb	r1, [r3, #0]
 80175e6:	4608      	mov	r0, r1
 80175e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175ec:	4770      	bx	lr

080175ee <__sfputs_r>:
 80175ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175f0:	4606      	mov	r6, r0
 80175f2:	460f      	mov	r7, r1
 80175f4:	4614      	mov	r4, r2
 80175f6:	18d5      	adds	r5, r2, r3
 80175f8:	42ac      	cmp	r4, r5
 80175fa:	d101      	bne.n	8017600 <__sfputs_r+0x12>
 80175fc:	2000      	movs	r0, #0
 80175fe:	e007      	b.n	8017610 <__sfputs_r+0x22>
 8017600:	463a      	mov	r2, r7
 8017602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017606:	4630      	mov	r0, r6
 8017608:	f7ff ffda 	bl	80175c0 <__sfputc_r>
 801760c:	1c43      	adds	r3, r0, #1
 801760e:	d1f3      	bne.n	80175f8 <__sfputs_r+0xa>
 8017610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017614 <_vfiprintf_r>:
 8017614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017618:	460c      	mov	r4, r1
 801761a:	b09d      	sub	sp, #116	; 0x74
 801761c:	4617      	mov	r7, r2
 801761e:	461d      	mov	r5, r3
 8017620:	4606      	mov	r6, r0
 8017622:	b118      	cbz	r0, 801762c <_vfiprintf_r+0x18>
 8017624:	6983      	ldr	r3, [r0, #24]
 8017626:	b90b      	cbnz	r3, 801762c <_vfiprintf_r+0x18>
 8017628:	f7ff fde0 	bl	80171ec <__sinit>
 801762c:	4b7c      	ldr	r3, [pc, #496]	; (8017820 <_vfiprintf_r+0x20c>)
 801762e:	429c      	cmp	r4, r3
 8017630:	d158      	bne.n	80176e4 <_vfiprintf_r+0xd0>
 8017632:	6874      	ldr	r4, [r6, #4]
 8017634:	89a3      	ldrh	r3, [r4, #12]
 8017636:	0718      	lsls	r0, r3, #28
 8017638:	d55e      	bpl.n	80176f8 <_vfiprintf_r+0xe4>
 801763a:	6923      	ldr	r3, [r4, #16]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d05b      	beq.n	80176f8 <_vfiprintf_r+0xe4>
 8017640:	2300      	movs	r3, #0
 8017642:	9309      	str	r3, [sp, #36]	; 0x24
 8017644:	2320      	movs	r3, #32
 8017646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801764a:	2330      	movs	r3, #48	; 0x30
 801764c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017650:	9503      	str	r5, [sp, #12]
 8017652:	f04f 0b01 	mov.w	fp, #1
 8017656:	46b8      	mov	r8, r7
 8017658:	4645      	mov	r5, r8
 801765a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801765e:	b10b      	cbz	r3, 8017664 <_vfiprintf_r+0x50>
 8017660:	2b25      	cmp	r3, #37	; 0x25
 8017662:	d154      	bne.n	801770e <_vfiprintf_r+0xfa>
 8017664:	ebb8 0a07 	subs.w	sl, r8, r7
 8017668:	d00b      	beq.n	8017682 <_vfiprintf_r+0x6e>
 801766a:	4653      	mov	r3, sl
 801766c:	463a      	mov	r2, r7
 801766e:	4621      	mov	r1, r4
 8017670:	4630      	mov	r0, r6
 8017672:	f7ff ffbc 	bl	80175ee <__sfputs_r>
 8017676:	3001      	adds	r0, #1
 8017678:	f000 80c2 	beq.w	8017800 <_vfiprintf_r+0x1ec>
 801767c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801767e:	4453      	add	r3, sl
 8017680:	9309      	str	r3, [sp, #36]	; 0x24
 8017682:	f898 3000 	ldrb.w	r3, [r8]
 8017686:	2b00      	cmp	r3, #0
 8017688:	f000 80ba 	beq.w	8017800 <_vfiprintf_r+0x1ec>
 801768c:	2300      	movs	r3, #0
 801768e:	f04f 32ff 	mov.w	r2, #4294967295
 8017692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017696:	9304      	str	r3, [sp, #16]
 8017698:	9307      	str	r3, [sp, #28]
 801769a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801769e:	931a      	str	r3, [sp, #104]	; 0x68
 80176a0:	46a8      	mov	r8, r5
 80176a2:	2205      	movs	r2, #5
 80176a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80176a8:	485e      	ldr	r0, [pc, #376]	; (8017824 <_vfiprintf_r+0x210>)
 80176aa:	f7f0 fcd1 	bl	8008050 <memchr>
 80176ae:	9b04      	ldr	r3, [sp, #16]
 80176b0:	bb78      	cbnz	r0, 8017712 <_vfiprintf_r+0xfe>
 80176b2:	06d9      	lsls	r1, r3, #27
 80176b4:	bf44      	itt	mi
 80176b6:	2220      	movmi	r2, #32
 80176b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80176bc:	071a      	lsls	r2, r3, #28
 80176be:	bf44      	itt	mi
 80176c0:	222b      	movmi	r2, #43	; 0x2b
 80176c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80176c6:	782a      	ldrb	r2, [r5, #0]
 80176c8:	2a2a      	cmp	r2, #42	; 0x2a
 80176ca:	d02a      	beq.n	8017722 <_vfiprintf_r+0x10e>
 80176cc:	9a07      	ldr	r2, [sp, #28]
 80176ce:	46a8      	mov	r8, r5
 80176d0:	2000      	movs	r0, #0
 80176d2:	250a      	movs	r5, #10
 80176d4:	4641      	mov	r1, r8
 80176d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176da:	3b30      	subs	r3, #48	; 0x30
 80176dc:	2b09      	cmp	r3, #9
 80176de:	d969      	bls.n	80177b4 <_vfiprintf_r+0x1a0>
 80176e0:	b360      	cbz	r0, 801773c <_vfiprintf_r+0x128>
 80176e2:	e024      	b.n	801772e <_vfiprintf_r+0x11a>
 80176e4:	4b50      	ldr	r3, [pc, #320]	; (8017828 <_vfiprintf_r+0x214>)
 80176e6:	429c      	cmp	r4, r3
 80176e8:	d101      	bne.n	80176ee <_vfiprintf_r+0xda>
 80176ea:	68b4      	ldr	r4, [r6, #8]
 80176ec:	e7a2      	b.n	8017634 <_vfiprintf_r+0x20>
 80176ee:	4b4f      	ldr	r3, [pc, #316]	; (801782c <_vfiprintf_r+0x218>)
 80176f0:	429c      	cmp	r4, r3
 80176f2:	bf08      	it	eq
 80176f4:	68f4      	ldreq	r4, [r6, #12]
 80176f6:	e79d      	b.n	8017634 <_vfiprintf_r+0x20>
 80176f8:	4621      	mov	r1, r4
 80176fa:	4630      	mov	r0, r6
 80176fc:	f002 fc9a 	bl	801a034 <__swsetup_r>
 8017700:	2800      	cmp	r0, #0
 8017702:	d09d      	beq.n	8017640 <_vfiprintf_r+0x2c>
 8017704:	f04f 30ff 	mov.w	r0, #4294967295
 8017708:	b01d      	add	sp, #116	; 0x74
 801770a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801770e:	46a8      	mov	r8, r5
 8017710:	e7a2      	b.n	8017658 <_vfiprintf_r+0x44>
 8017712:	4a44      	ldr	r2, [pc, #272]	; (8017824 <_vfiprintf_r+0x210>)
 8017714:	1a80      	subs	r0, r0, r2
 8017716:	fa0b f000 	lsl.w	r0, fp, r0
 801771a:	4318      	orrs	r0, r3
 801771c:	9004      	str	r0, [sp, #16]
 801771e:	4645      	mov	r5, r8
 8017720:	e7be      	b.n	80176a0 <_vfiprintf_r+0x8c>
 8017722:	9a03      	ldr	r2, [sp, #12]
 8017724:	1d11      	adds	r1, r2, #4
 8017726:	6812      	ldr	r2, [r2, #0]
 8017728:	9103      	str	r1, [sp, #12]
 801772a:	2a00      	cmp	r2, #0
 801772c:	db01      	blt.n	8017732 <_vfiprintf_r+0x11e>
 801772e:	9207      	str	r2, [sp, #28]
 8017730:	e004      	b.n	801773c <_vfiprintf_r+0x128>
 8017732:	4252      	negs	r2, r2
 8017734:	f043 0302 	orr.w	r3, r3, #2
 8017738:	9207      	str	r2, [sp, #28]
 801773a:	9304      	str	r3, [sp, #16]
 801773c:	f898 3000 	ldrb.w	r3, [r8]
 8017740:	2b2e      	cmp	r3, #46	; 0x2e
 8017742:	d10e      	bne.n	8017762 <_vfiprintf_r+0x14e>
 8017744:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017748:	2b2a      	cmp	r3, #42	; 0x2a
 801774a:	d138      	bne.n	80177be <_vfiprintf_r+0x1aa>
 801774c:	9b03      	ldr	r3, [sp, #12]
 801774e:	1d1a      	adds	r2, r3, #4
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	9203      	str	r2, [sp, #12]
 8017754:	2b00      	cmp	r3, #0
 8017756:	bfb8      	it	lt
 8017758:	f04f 33ff 	movlt.w	r3, #4294967295
 801775c:	f108 0802 	add.w	r8, r8, #2
 8017760:	9305      	str	r3, [sp, #20]
 8017762:	4d33      	ldr	r5, [pc, #204]	; (8017830 <_vfiprintf_r+0x21c>)
 8017764:	f898 1000 	ldrb.w	r1, [r8]
 8017768:	2203      	movs	r2, #3
 801776a:	4628      	mov	r0, r5
 801776c:	f7f0 fc70 	bl	8008050 <memchr>
 8017770:	b140      	cbz	r0, 8017784 <_vfiprintf_r+0x170>
 8017772:	2340      	movs	r3, #64	; 0x40
 8017774:	1b40      	subs	r0, r0, r5
 8017776:	fa03 f000 	lsl.w	r0, r3, r0
 801777a:	9b04      	ldr	r3, [sp, #16]
 801777c:	4303      	orrs	r3, r0
 801777e:	f108 0801 	add.w	r8, r8, #1
 8017782:	9304      	str	r3, [sp, #16]
 8017784:	f898 1000 	ldrb.w	r1, [r8]
 8017788:	482a      	ldr	r0, [pc, #168]	; (8017834 <_vfiprintf_r+0x220>)
 801778a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801778e:	2206      	movs	r2, #6
 8017790:	f108 0701 	add.w	r7, r8, #1
 8017794:	f7f0 fc5c 	bl	8008050 <memchr>
 8017798:	2800      	cmp	r0, #0
 801779a:	d037      	beq.n	801780c <_vfiprintf_r+0x1f8>
 801779c:	4b26      	ldr	r3, [pc, #152]	; (8017838 <_vfiprintf_r+0x224>)
 801779e:	bb1b      	cbnz	r3, 80177e8 <_vfiprintf_r+0x1d4>
 80177a0:	9b03      	ldr	r3, [sp, #12]
 80177a2:	3307      	adds	r3, #7
 80177a4:	f023 0307 	bic.w	r3, r3, #7
 80177a8:	3308      	adds	r3, #8
 80177aa:	9303      	str	r3, [sp, #12]
 80177ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177ae:	444b      	add	r3, r9
 80177b0:	9309      	str	r3, [sp, #36]	; 0x24
 80177b2:	e750      	b.n	8017656 <_vfiprintf_r+0x42>
 80177b4:	fb05 3202 	mla	r2, r5, r2, r3
 80177b8:	2001      	movs	r0, #1
 80177ba:	4688      	mov	r8, r1
 80177bc:	e78a      	b.n	80176d4 <_vfiprintf_r+0xc0>
 80177be:	2300      	movs	r3, #0
 80177c0:	f108 0801 	add.w	r8, r8, #1
 80177c4:	9305      	str	r3, [sp, #20]
 80177c6:	4619      	mov	r1, r3
 80177c8:	250a      	movs	r5, #10
 80177ca:	4640      	mov	r0, r8
 80177cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177d0:	3a30      	subs	r2, #48	; 0x30
 80177d2:	2a09      	cmp	r2, #9
 80177d4:	d903      	bls.n	80177de <_vfiprintf_r+0x1ca>
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d0c3      	beq.n	8017762 <_vfiprintf_r+0x14e>
 80177da:	9105      	str	r1, [sp, #20]
 80177dc:	e7c1      	b.n	8017762 <_vfiprintf_r+0x14e>
 80177de:	fb05 2101 	mla	r1, r5, r1, r2
 80177e2:	2301      	movs	r3, #1
 80177e4:	4680      	mov	r8, r0
 80177e6:	e7f0      	b.n	80177ca <_vfiprintf_r+0x1b6>
 80177e8:	ab03      	add	r3, sp, #12
 80177ea:	9300      	str	r3, [sp, #0]
 80177ec:	4622      	mov	r2, r4
 80177ee:	4b13      	ldr	r3, [pc, #76]	; (801783c <_vfiprintf_r+0x228>)
 80177f0:	a904      	add	r1, sp, #16
 80177f2:	4630      	mov	r0, r6
 80177f4:	f000 f8b8 	bl	8017968 <_printf_float>
 80177f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80177fc:	4681      	mov	r9, r0
 80177fe:	d1d5      	bne.n	80177ac <_vfiprintf_r+0x198>
 8017800:	89a3      	ldrh	r3, [r4, #12]
 8017802:	065b      	lsls	r3, r3, #25
 8017804:	f53f af7e 	bmi.w	8017704 <_vfiprintf_r+0xf0>
 8017808:	9809      	ldr	r0, [sp, #36]	; 0x24
 801780a:	e77d      	b.n	8017708 <_vfiprintf_r+0xf4>
 801780c:	ab03      	add	r3, sp, #12
 801780e:	9300      	str	r3, [sp, #0]
 8017810:	4622      	mov	r2, r4
 8017812:	4b0a      	ldr	r3, [pc, #40]	; (801783c <_vfiprintf_r+0x228>)
 8017814:	a904      	add	r1, sp, #16
 8017816:	4630      	mov	r0, r6
 8017818:	f000 fb5c 	bl	8017ed4 <_printf_i>
 801781c:	e7ec      	b.n	80177f8 <_vfiprintf_r+0x1e4>
 801781e:	bf00      	nop
 8017820:	0801c700 	.word	0x0801c700
 8017824:	0801c744 	.word	0x0801c744
 8017828:	0801c720 	.word	0x0801c720
 801782c:	0801c6e0 	.word	0x0801c6e0
 8017830:	0801c74a 	.word	0x0801c74a
 8017834:	0801c74e 	.word	0x0801c74e
 8017838:	08017969 	.word	0x08017969
 801783c:	080175ef 	.word	0x080175ef

08017840 <__cvt>:
 8017840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017844:	ec55 4b10 	vmov	r4, r5, d0
 8017848:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801784a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801784e:	2d00      	cmp	r5, #0
 8017850:	460e      	mov	r6, r1
 8017852:	4691      	mov	r9, r2
 8017854:	4619      	mov	r1, r3
 8017856:	bfb8      	it	lt
 8017858:	4622      	movlt	r2, r4
 801785a:	462b      	mov	r3, r5
 801785c:	f027 0720 	bic.w	r7, r7, #32
 8017860:	bfbb      	ittet	lt
 8017862:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017866:	461d      	movlt	r5, r3
 8017868:	2300      	movge	r3, #0
 801786a:	232d      	movlt	r3, #45	; 0x2d
 801786c:	bfb8      	it	lt
 801786e:	4614      	movlt	r4, r2
 8017870:	2f46      	cmp	r7, #70	; 0x46
 8017872:	700b      	strb	r3, [r1, #0]
 8017874:	d004      	beq.n	8017880 <__cvt+0x40>
 8017876:	2f45      	cmp	r7, #69	; 0x45
 8017878:	d100      	bne.n	801787c <__cvt+0x3c>
 801787a:	3601      	adds	r6, #1
 801787c:	2102      	movs	r1, #2
 801787e:	e000      	b.n	8017882 <__cvt+0x42>
 8017880:	2103      	movs	r1, #3
 8017882:	ab03      	add	r3, sp, #12
 8017884:	9301      	str	r3, [sp, #4]
 8017886:	ab02      	add	r3, sp, #8
 8017888:	9300      	str	r3, [sp, #0]
 801788a:	4632      	mov	r2, r6
 801788c:	4653      	mov	r3, sl
 801788e:	ec45 4b10 	vmov	d0, r4, r5
 8017892:	f002 fcd9 	bl	801a248 <_dtoa_r>
 8017896:	2f47      	cmp	r7, #71	; 0x47
 8017898:	4680      	mov	r8, r0
 801789a:	d102      	bne.n	80178a2 <__cvt+0x62>
 801789c:	f019 0f01 	tst.w	r9, #1
 80178a0:	d026      	beq.n	80178f0 <__cvt+0xb0>
 80178a2:	2f46      	cmp	r7, #70	; 0x46
 80178a4:	eb08 0906 	add.w	r9, r8, r6
 80178a8:	d111      	bne.n	80178ce <__cvt+0x8e>
 80178aa:	f898 3000 	ldrb.w	r3, [r8]
 80178ae:	2b30      	cmp	r3, #48	; 0x30
 80178b0:	d10a      	bne.n	80178c8 <__cvt+0x88>
 80178b2:	2200      	movs	r2, #0
 80178b4:	2300      	movs	r3, #0
 80178b6:	4620      	mov	r0, r4
 80178b8:	4629      	mov	r1, r5
 80178ba:	f7f1 f83d 	bl	8008938 <__aeabi_dcmpeq>
 80178be:	b918      	cbnz	r0, 80178c8 <__cvt+0x88>
 80178c0:	f1c6 0601 	rsb	r6, r6, #1
 80178c4:	f8ca 6000 	str.w	r6, [sl]
 80178c8:	f8da 3000 	ldr.w	r3, [sl]
 80178cc:	4499      	add	r9, r3
 80178ce:	2200      	movs	r2, #0
 80178d0:	2300      	movs	r3, #0
 80178d2:	4620      	mov	r0, r4
 80178d4:	4629      	mov	r1, r5
 80178d6:	f7f1 f82f 	bl	8008938 <__aeabi_dcmpeq>
 80178da:	b938      	cbnz	r0, 80178ec <__cvt+0xac>
 80178dc:	2230      	movs	r2, #48	; 0x30
 80178de:	9b03      	ldr	r3, [sp, #12]
 80178e0:	454b      	cmp	r3, r9
 80178e2:	d205      	bcs.n	80178f0 <__cvt+0xb0>
 80178e4:	1c59      	adds	r1, r3, #1
 80178e6:	9103      	str	r1, [sp, #12]
 80178e8:	701a      	strb	r2, [r3, #0]
 80178ea:	e7f8      	b.n	80178de <__cvt+0x9e>
 80178ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80178f0:	9b03      	ldr	r3, [sp, #12]
 80178f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80178f4:	eba3 0308 	sub.w	r3, r3, r8
 80178f8:	4640      	mov	r0, r8
 80178fa:	6013      	str	r3, [r2, #0]
 80178fc:	b004      	add	sp, #16
 80178fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017902 <__exponent>:
 8017902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017904:	2900      	cmp	r1, #0
 8017906:	4604      	mov	r4, r0
 8017908:	bfba      	itte	lt
 801790a:	4249      	neglt	r1, r1
 801790c:	232d      	movlt	r3, #45	; 0x2d
 801790e:	232b      	movge	r3, #43	; 0x2b
 8017910:	2909      	cmp	r1, #9
 8017912:	f804 2b02 	strb.w	r2, [r4], #2
 8017916:	7043      	strb	r3, [r0, #1]
 8017918:	dd20      	ble.n	801795c <__exponent+0x5a>
 801791a:	f10d 0307 	add.w	r3, sp, #7
 801791e:	461f      	mov	r7, r3
 8017920:	260a      	movs	r6, #10
 8017922:	fb91 f5f6 	sdiv	r5, r1, r6
 8017926:	fb06 1115 	mls	r1, r6, r5, r1
 801792a:	3130      	adds	r1, #48	; 0x30
 801792c:	2d09      	cmp	r5, #9
 801792e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8017932:	f103 32ff 	add.w	r2, r3, #4294967295
 8017936:	4629      	mov	r1, r5
 8017938:	dc09      	bgt.n	801794e <__exponent+0x4c>
 801793a:	3130      	adds	r1, #48	; 0x30
 801793c:	3b02      	subs	r3, #2
 801793e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8017942:	42bb      	cmp	r3, r7
 8017944:	4622      	mov	r2, r4
 8017946:	d304      	bcc.n	8017952 <__exponent+0x50>
 8017948:	1a10      	subs	r0, r2, r0
 801794a:	b003      	add	sp, #12
 801794c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801794e:	4613      	mov	r3, r2
 8017950:	e7e7      	b.n	8017922 <__exponent+0x20>
 8017952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017956:	f804 2b01 	strb.w	r2, [r4], #1
 801795a:	e7f2      	b.n	8017942 <__exponent+0x40>
 801795c:	2330      	movs	r3, #48	; 0x30
 801795e:	4419      	add	r1, r3
 8017960:	7083      	strb	r3, [r0, #2]
 8017962:	1d02      	adds	r2, r0, #4
 8017964:	70c1      	strb	r1, [r0, #3]
 8017966:	e7ef      	b.n	8017948 <__exponent+0x46>

08017968 <_printf_float>:
 8017968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801796c:	b08d      	sub	sp, #52	; 0x34
 801796e:	460c      	mov	r4, r1
 8017970:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8017974:	4616      	mov	r6, r2
 8017976:	461f      	mov	r7, r3
 8017978:	4605      	mov	r5, r0
 801797a:	f003 fd79 	bl	801b470 <_localeconv_r>
 801797e:	6803      	ldr	r3, [r0, #0]
 8017980:	9304      	str	r3, [sp, #16]
 8017982:	4618      	mov	r0, r3
 8017984:	f7f0 fb5c 	bl	8008040 <strlen>
 8017988:	2300      	movs	r3, #0
 801798a:	930a      	str	r3, [sp, #40]	; 0x28
 801798c:	f8d8 3000 	ldr.w	r3, [r8]
 8017990:	9005      	str	r0, [sp, #20]
 8017992:	3307      	adds	r3, #7
 8017994:	f023 0307 	bic.w	r3, r3, #7
 8017998:	f103 0208 	add.w	r2, r3, #8
 801799c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80179a0:	f8d4 b000 	ldr.w	fp, [r4]
 80179a4:	f8c8 2000 	str.w	r2, [r8]
 80179a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80179b0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80179b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80179b8:	9307      	str	r3, [sp, #28]
 80179ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80179be:	f04f 32ff 	mov.w	r2, #4294967295
 80179c2:	4ba7      	ldr	r3, [pc, #668]	; (8017c60 <_printf_float+0x2f8>)
 80179c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80179c8:	f7f0 ffe8 	bl	800899c <__aeabi_dcmpun>
 80179cc:	bb70      	cbnz	r0, 8017a2c <_printf_float+0xc4>
 80179ce:	f04f 32ff 	mov.w	r2, #4294967295
 80179d2:	4ba3      	ldr	r3, [pc, #652]	; (8017c60 <_printf_float+0x2f8>)
 80179d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80179d8:	f7f0 ffc2 	bl	8008960 <__aeabi_dcmple>
 80179dc:	bb30      	cbnz	r0, 8017a2c <_printf_float+0xc4>
 80179de:	2200      	movs	r2, #0
 80179e0:	2300      	movs	r3, #0
 80179e2:	4640      	mov	r0, r8
 80179e4:	4649      	mov	r1, r9
 80179e6:	f7f0 ffb1 	bl	800894c <__aeabi_dcmplt>
 80179ea:	b110      	cbz	r0, 80179f2 <_printf_float+0x8a>
 80179ec:	232d      	movs	r3, #45	; 0x2d
 80179ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80179f2:	4a9c      	ldr	r2, [pc, #624]	; (8017c64 <_printf_float+0x2fc>)
 80179f4:	4b9c      	ldr	r3, [pc, #624]	; (8017c68 <_printf_float+0x300>)
 80179f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80179fa:	bf8c      	ite	hi
 80179fc:	4690      	movhi	r8, r2
 80179fe:	4698      	movls	r8, r3
 8017a00:	2303      	movs	r3, #3
 8017a02:	f02b 0204 	bic.w	r2, fp, #4
 8017a06:	6123      	str	r3, [r4, #16]
 8017a08:	6022      	str	r2, [r4, #0]
 8017a0a:	f04f 0900 	mov.w	r9, #0
 8017a0e:	9700      	str	r7, [sp, #0]
 8017a10:	4633      	mov	r3, r6
 8017a12:	aa0b      	add	r2, sp, #44	; 0x2c
 8017a14:	4621      	mov	r1, r4
 8017a16:	4628      	mov	r0, r5
 8017a18:	f000 f9e6 	bl	8017de8 <_printf_common>
 8017a1c:	3001      	adds	r0, #1
 8017a1e:	f040 808d 	bne.w	8017b3c <_printf_float+0x1d4>
 8017a22:	f04f 30ff 	mov.w	r0, #4294967295
 8017a26:	b00d      	add	sp, #52	; 0x34
 8017a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a2c:	4642      	mov	r2, r8
 8017a2e:	464b      	mov	r3, r9
 8017a30:	4640      	mov	r0, r8
 8017a32:	4649      	mov	r1, r9
 8017a34:	f7f0 ffb2 	bl	800899c <__aeabi_dcmpun>
 8017a38:	b110      	cbz	r0, 8017a40 <_printf_float+0xd8>
 8017a3a:	4a8c      	ldr	r2, [pc, #560]	; (8017c6c <_printf_float+0x304>)
 8017a3c:	4b8c      	ldr	r3, [pc, #560]	; (8017c70 <_printf_float+0x308>)
 8017a3e:	e7da      	b.n	80179f6 <_printf_float+0x8e>
 8017a40:	6861      	ldr	r1, [r4, #4]
 8017a42:	1c4b      	adds	r3, r1, #1
 8017a44:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8017a48:	a80a      	add	r0, sp, #40	; 0x28
 8017a4a:	d13e      	bne.n	8017aca <_printf_float+0x162>
 8017a4c:	2306      	movs	r3, #6
 8017a4e:	6063      	str	r3, [r4, #4]
 8017a50:	2300      	movs	r3, #0
 8017a52:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8017a56:	ab09      	add	r3, sp, #36	; 0x24
 8017a58:	9300      	str	r3, [sp, #0]
 8017a5a:	ec49 8b10 	vmov	d0, r8, r9
 8017a5e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017a62:	6022      	str	r2, [r4, #0]
 8017a64:	f8cd a004 	str.w	sl, [sp, #4]
 8017a68:	6861      	ldr	r1, [r4, #4]
 8017a6a:	4628      	mov	r0, r5
 8017a6c:	f7ff fee8 	bl	8017840 <__cvt>
 8017a70:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8017a74:	2b47      	cmp	r3, #71	; 0x47
 8017a76:	4680      	mov	r8, r0
 8017a78:	d109      	bne.n	8017a8e <_printf_float+0x126>
 8017a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a7c:	1cd8      	adds	r0, r3, #3
 8017a7e:	db02      	blt.n	8017a86 <_printf_float+0x11e>
 8017a80:	6862      	ldr	r2, [r4, #4]
 8017a82:	4293      	cmp	r3, r2
 8017a84:	dd47      	ble.n	8017b16 <_printf_float+0x1ae>
 8017a86:	f1aa 0a02 	sub.w	sl, sl, #2
 8017a8a:	fa5f fa8a 	uxtb.w	sl, sl
 8017a8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8017a92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017a94:	d824      	bhi.n	8017ae0 <_printf_float+0x178>
 8017a96:	3901      	subs	r1, #1
 8017a98:	4652      	mov	r2, sl
 8017a9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017a9e:	9109      	str	r1, [sp, #36]	; 0x24
 8017aa0:	f7ff ff2f 	bl	8017902 <__exponent>
 8017aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017aa6:	1813      	adds	r3, r2, r0
 8017aa8:	2a01      	cmp	r2, #1
 8017aaa:	4681      	mov	r9, r0
 8017aac:	6123      	str	r3, [r4, #16]
 8017aae:	dc02      	bgt.n	8017ab6 <_printf_float+0x14e>
 8017ab0:	6822      	ldr	r2, [r4, #0]
 8017ab2:	07d1      	lsls	r1, r2, #31
 8017ab4:	d501      	bpl.n	8017aba <_printf_float+0x152>
 8017ab6:	3301      	adds	r3, #1
 8017ab8:	6123      	str	r3, [r4, #16]
 8017aba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d0a5      	beq.n	8017a0e <_printf_float+0xa6>
 8017ac2:	232d      	movs	r3, #45	; 0x2d
 8017ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ac8:	e7a1      	b.n	8017a0e <_printf_float+0xa6>
 8017aca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8017ace:	f000 8177 	beq.w	8017dc0 <_printf_float+0x458>
 8017ad2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8017ad6:	d1bb      	bne.n	8017a50 <_printf_float+0xe8>
 8017ad8:	2900      	cmp	r1, #0
 8017ada:	d1b9      	bne.n	8017a50 <_printf_float+0xe8>
 8017adc:	2301      	movs	r3, #1
 8017ade:	e7b6      	b.n	8017a4e <_printf_float+0xe6>
 8017ae0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8017ae4:	d119      	bne.n	8017b1a <_printf_float+0x1b2>
 8017ae6:	2900      	cmp	r1, #0
 8017ae8:	6863      	ldr	r3, [r4, #4]
 8017aea:	dd0c      	ble.n	8017b06 <_printf_float+0x19e>
 8017aec:	6121      	str	r1, [r4, #16]
 8017aee:	b913      	cbnz	r3, 8017af6 <_printf_float+0x18e>
 8017af0:	6822      	ldr	r2, [r4, #0]
 8017af2:	07d2      	lsls	r2, r2, #31
 8017af4:	d502      	bpl.n	8017afc <_printf_float+0x194>
 8017af6:	3301      	adds	r3, #1
 8017af8:	440b      	add	r3, r1
 8017afa:	6123      	str	r3, [r4, #16]
 8017afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017afe:	65a3      	str	r3, [r4, #88]	; 0x58
 8017b00:	f04f 0900 	mov.w	r9, #0
 8017b04:	e7d9      	b.n	8017aba <_printf_float+0x152>
 8017b06:	b913      	cbnz	r3, 8017b0e <_printf_float+0x1a6>
 8017b08:	6822      	ldr	r2, [r4, #0]
 8017b0a:	07d0      	lsls	r0, r2, #31
 8017b0c:	d501      	bpl.n	8017b12 <_printf_float+0x1aa>
 8017b0e:	3302      	adds	r3, #2
 8017b10:	e7f3      	b.n	8017afa <_printf_float+0x192>
 8017b12:	2301      	movs	r3, #1
 8017b14:	e7f1      	b.n	8017afa <_printf_float+0x192>
 8017b16:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8017b1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017b1e:	4293      	cmp	r3, r2
 8017b20:	db05      	blt.n	8017b2e <_printf_float+0x1c6>
 8017b22:	6822      	ldr	r2, [r4, #0]
 8017b24:	6123      	str	r3, [r4, #16]
 8017b26:	07d1      	lsls	r1, r2, #31
 8017b28:	d5e8      	bpl.n	8017afc <_printf_float+0x194>
 8017b2a:	3301      	adds	r3, #1
 8017b2c:	e7e5      	b.n	8017afa <_printf_float+0x192>
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	bfd4      	ite	le
 8017b32:	f1c3 0302 	rsble	r3, r3, #2
 8017b36:	2301      	movgt	r3, #1
 8017b38:	4413      	add	r3, r2
 8017b3a:	e7de      	b.n	8017afa <_printf_float+0x192>
 8017b3c:	6823      	ldr	r3, [r4, #0]
 8017b3e:	055a      	lsls	r2, r3, #21
 8017b40:	d407      	bmi.n	8017b52 <_printf_float+0x1ea>
 8017b42:	6923      	ldr	r3, [r4, #16]
 8017b44:	4642      	mov	r2, r8
 8017b46:	4631      	mov	r1, r6
 8017b48:	4628      	mov	r0, r5
 8017b4a:	47b8      	blx	r7
 8017b4c:	3001      	adds	r0, #1
 8017b4e:	d12b      	bne.n	8017ba8 <_printf_float+0x240>
 8017b50:	e767      	b.n	8017a22 <_printf_float+0xba>
 8017b52:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8017b56:	f240 80dc 	bls.w	8017d12 <_printf_float+0x3aa>
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017b62:	f7f0 fee9 	bl	8008938 <__aeabi_dcmpeq>
 8017b66:	2800      	cmp	r0, #0
 8017b68:	d033      	beq.n	8017bd2 <_printf_float+0x26a>
 8017b6a:	2301      	movs	r3, #1
 8017b6c:	4a41      	ldr	r2, [pc, #260]	; (8017c74 <_printf_float+0x30c>)
 8017b6e:	4631      	mov	r1, r6
 8017b70:	4628      	mov	r0, r5
 8017b72:	47b8      	blx	r7
 8017b74:	3001      	adds	r0, #1
 8017b76:	f43f af54 	beq.w	8017a22 <_printf_float+0xba>
 8017b7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017b7e:	429a      	cmp	r2, r3
 8017b80:	db02      	blt.n	8017b88 <_printf_float+0x220>
 8017b82:	6823      	ldr	r3, [r4, #0]
 8017b84:	07d8      	lsls	r0, r3, #31
 8017b86:	d50f      	bpl.n	8017ba8 <_printf_float+0x240>
 8017b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017b8c:	4631      	mov	r1, r6
 8017b8e:	4628      	mov	r0, r5
 8017b90:	47b8      	blx	r7
 8017b92:	3001      	adds	r0, #1
 8017b94:	f43f af45 	beq.w	8017a22 <_printf_float+0xba>
 8017b98:	f04f 0800 	mov.w	r8, #0
 8017b9c:	f104 091a 	add.w	r9, r4, #26
 8017ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ba2:	3b01      	subs	r3, #1
 8017ba4:	4543      	cmp	r3, r8
 8017ba6:	dc09      	bgt.n	8017bbc <_printf_float+0x254>
 8017ba8:	6823      	ldr	r3, [r4, #0]
 8017baa:	079b      	lsls	r3, r3, #30
 8017bac:	f100 8103 	bmi.w	8017db6 <_printf_float+0x44e>
 8017bb0:	68e0      	ldr	r0, [r4, #12]
 8017bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bb4:	4298      	cmp	r0, r3
 8017bb6:	bfb8      	it	lt
 8017bb8:	4618      	movlt	r0, r3
 8017bba:	e734      	b.n	8017a26 <_printf_float+0xbe>
 8017bbc:	2301      	movs	r3, #1
 8017bbe:	464a      	mov	r2, r9
 8017bc0:	4631      	mov	r1, r6
 8017bc2:	4628      	mov	r0, r5
 8017bc4:	47b8      	blx	r7
 8017bc6:	3001      	adds	r0, #1
 8017bc8:	f43f af2b 	beq.w	8017a22 <_printf_float+0xba>
 8017bcc:	f108 0801 	add.w	r8, r8, #1
 8017bd0:	e7e6      	b.n	8017ba0 <_printf_float+0x238>
 8017bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	dc2b      	bgt.n	8017c30 <_printf_float+0x2c8>
 8017bd8:	2301      	movs	r3, #1
 8017bda:	4a26      	ldr	r2, [pc, #152]	; (8017c74 <_printf_float+0x30c>)
 8017bdc:	4631      	mov	r1, r6
 8017bde:	4628      	mov	r0, r5
 8017be0:	47b8      	blx	r7
 8017be2:	3001      	adds	r0, #1
 8017be4:	f43f af1d 	beq.w	8017a22 <_printf_float+0xba>
 8017be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bea:	b923      	cbnz	r3, 8017bf6 <_printf_float+0x28e>
 8017bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bee:	b913      	cbnz	r3, 8017bf6 <_printf_float+0x28e>
 8017bf0:	6823      	ldr	r3, [r4, #0]
 8017bf2:	07d9      	lsls	r1, r3, #31
 8017bf4:	d5d8      	bpl.n	8017ba8 <_printf_float+0x240>
 8017bf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017bfa:	4631      	mov	r1, r6
 8017bfc:	4628      	mov	r0, r5
 8017bfe:	47b8      	blx	r7
 8017c00:	3001      	adds	r0, #1
 8017c02:	f43f af0e 	beq.w	8017a22 <_printf_float+0xba>
 8017c06:	f04f 0900 	mov.w	r9, #0
 8017c0a:	f104 0a1a 	add.w	sl, r4, #26
 8017c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c10:	425b      	negs	r3, r3
 8017c12:	454b      	cmp	r3, r9
 8017c14:	dc01      	bgt.n	8017c1a <_printf_float+0x2b2>
 8017c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c18:	e794      	b.n	8017b44 <_printf_float+0x1dc>
 8017c1a:	2301      	movs	r3, #1
 8017c1c:	4652      	mov	r2, sl
 8017c1e:	4631      	mov	r1, r6
 8017c20:	4628      	mov	r0, r5
 8017c22:	47b8      	blx	r7
 8017c24:	3001      	adds	r0, #1
 8017c26:	f43f aefc 	beq.w	8017a22 <_printf_float+0xba>
 8017c2a:	f109 0901 	add.w	r9, r9, #1
 8017c2e:	e7ee      	b.n	8017c0e <_printf_float+0x2a6>
 8017c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017c34:	429a      	cmp	r2, r3
 8017c36:	bfa8      	it	ge
 8017c38:	461a      	movge	r2, r3
 8017c3a:	2a00      	cmp	r2, #0
 8017c3c:	4691      	mov	r9, r2
 8017c3e:	dd07      	ble.n	8017c50 <_printf_float+0x2e8>
 8017c40:	4613      	mov	r3, r2
 8017c42:	4631      	mov	r1, r6
 8017c44:	4642      	mov	r2, r8
 8017c46:	4628      	mov	r0, r5
 8017c48:	47b8      	blx	r7
 8017c4a:	3001      	adds	r0, #1
 8017c4c:	f43f aee9 	beq.w	8017a22 <_printf_float+0xba>
 8017c50:	f104 031a 	add.w	r3, r4, #26
 8017c54:	f04f 0b00 	mov.w	fp, #0
 8017c58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017c5c:	9306      	str	r3, [sp, #24]
 8017c5e:	e015      	b.n	8017c8c <_printf_float+0x324>
 8017c60:	7fefffff 	.word	0x7fefffff
 8017c64:	0801c759 	.word	0x0801c759
 8017c68:	0801c755 	.word	0x0801c755
 8017c6c:	0801c761 	.word	0x0801c761
 8017c70:	0801c75d 	.word	0x0801c75d
 8017c74:	0801c7a2 	.word	0x0801c7a2
 8017c78:	2301      	movs	r3, #1
 8017c7a:	9a06      	ldr	r2, [sp, #24]
 8017c7c:	4631      	mov	r1, r6
 8017c7e:	4628      	mov	r0, r5
 8017c80:	47b8      	blx	r7
 8017c82:	3001      	adds	r0, #1
 8017c84:	f43f aecd 	beq.w	8017a22 <_printf_float+0xba>
 8017c88:	f10b 0b01 	add.w	fp, fp, #1
 8017c8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8017c90:	ebaa 0309 	sub.w	r3, sl, r9
 8017c94:	455b      	cmp	r3, fp
 8017c96:	dcef      	bgt.n	8017c78 <_printf_float+0x310>
 8017c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017c9c:	429a      	cmp	r2, r3
 8017c9e:	44d0      	add	r8, sl
 8017ca0:	db15      	blt.n	8017cce <_printf_float+0x366>
 8017ca2:	6823      	ldr	r3, [r4, #0]
 8017ca4:	07da      	lsls	r2, r3, #31
 8017ca6:	d412      	bmi.n	8017cce <_printf_float+0x366>
 8017ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017caa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017cac:	eba3 020a 	sub.w	r2, r3, sl
 8017cb0:	eba3 0a01 	sub.w	sl, r3, r1
 8017cb4:	4592      	cmp	sl, r2
 8017cb6:	bfa8      	it	ge
 8017cb8:	4692      	movge	sl, r2
 8017cba:	f1ba 0f00 	cmp.w	sl, #0
 8017cbe:	dc0e      	bgt.n	8017cde <_printf_float+0x376>
 8017cc0:	f04f 0800 	mov.w	r8, #0
 8017cc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017cc8:	f104 091a 	add.w	r9, r4, #26
 8017ccc:	e019      	b.n	8017d02 <_printf_float+0x39a>
 8017cce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017cd2:	4631      	mov	r1, r6
 8017cd4:	4628      	mov	r0, r5
 8017cd6:	47b8      	blx	r7
 8017cd8:	3001      	adds	r0, #1
 8017cda:	d1e5      	bne.n	8017ca8 <_printf_float+0x340>
 8017cdc:	e6a1      	b.n	8017a22 <_printf_float+0xba>
 8017cde:	4653      	mov	r3, sl
 8017ce0:	4642      	mov	r2, r8
 8017ce2:	4631      	mov	r1, r6
 8017ce4:	4628      	mov	r0, r5
 8017ce6:	47b8      	blx	r7
 8017ce8:	3001      	adds	r0, #1
 8017cea:	d1e9      	bne.n	8017cc0 <_printf_float+0x358>
 8017cec:	e699      	b.n	8017a22 <_printf_float+0xba>
 8017cee:	2301      	movs	r3, #1
 8017cf0:	464a      	mov	r2, r9
 8017cf2:	4631      	mov	r1, r6
 8017cf4:	4628      	mov	r0, r5
 8017cf6:	47b8      	blx	r7
 8017cf8:	3001      	adds	r0, #1
 8017cfa:	f43f ae92 	beq.w	8017a22 <_printf_float+0xba>
 8017cfe:	f108 0801 	add.w	r8, r8, #1
 8017d02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017d06:	1a9b      	subs	r3, r3, r2
 8017d08:	eba3 030a 	sub.w	r3, r3, sl
 8017d0c:	4543      	cmp	r3, r8
 8017d0e:	dcee      	bgt.n	8017cee <_printf_float+0x386>
 8017d10:	e74a      	b.n	8017ba8 <_printf_float+0x240>
 8017d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d14:	2a01      	cmp	r2, #1
 8017d16:	dc01      	bgt.n	8017d1c <_printf_float+0x3b4>
 8017d18:	07db      	lsls	r3, r3, #31
 8017d1a:	d53a      	bpl.n	8017d92 <_printf_float+0x42a>
 8017d1c:	2301      	movs	r3, #1
 8017d1e:	4642      	mov	r2, r8
 8017d20:	4631      	mov	r1, r6
 8017d22:	4628      	mov	r0, r5
 8017d24:	47b8      	blx	r7
 8017d26:	3001      	adds	r0, #1
 8017d28:	f43f ae7b 	beq.w	8017a22 <_printf_float+0xba>
 8017d2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017d30:	4631      	mov	r1, r6
 8017d32:	4628      	mov	r0, r5
 8017d34:	47b8      	blx	r7
 8017d36:	3001      	adds	r0, #1
 8017d38:	f108 0801 	add.w	r8, r8, #1
 8017d3c:	f43f ae71 	beq.w	8017a22 <_printf_float+0xba>
 8017d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d42:	2200      	movs	r2, #0
 8017d44:	f103 3aff 	add.w	sl, r3, #4294967295
 8017d48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	f7f0 fdf3 	bl	8008938 <__aeabi_dcmpeq>
 8017d52:	b9c8      	cbnz	r0, 8017d88 <_printf_float+0x420>
 8017d54:	4653      	mov	r3, sl
 8017d56:	4642      	mov	r2, r8
 8017d58:	4631      	mov	r1, r6
 8017d5a:	4628      	mov	r0, r5
 8017d5c:	47b8      	blx	r7
 8017d5e:	3001      	adds	r0, #1
 8017d60:	d10e      	bne.n	8017d80 <_printf_float+0x418>
 8017d62:	e65e      	b.n	8017a22 <_printf_float+0xba>
 8017d64:	2301      	movs	r3, #1
 8017d66:	4652      	mov	r2, sl
 8017d68:	4631      	mov	r1, r6
 8017d6a:	4628      	mov	r0, r5
 8017d6c:	47b8      	blx	r7
 8017d6e:	3001      	adds	r0, #1
 8017d70:	f43f ae57 	beq.w	8017a22 <_printf_float+0xba>
 8017d74:	f108 0801 	add.w	r8, r8, #1
 8017d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d7a:	3b01      	subs	r3, #1
 8017d7c:	4543      	cmp	r3, r8
 8017d7e:	dcf1      	bgt.n	8017d64 <_printf_float+0x3fc>
 8017d80:	464b      	mov	r3, r9
 8017d82:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017d86:	e6de      	b.n	8017b46 <_printf_float+0x1de>
 8017d88:	f04f 0800 	mov.w	r8, #0
 8017d8c:	f104 0a1a 	add.w	sl, r4, #26
 8017d90:	e7f2      	b.n	8017d78 <_printf_float+0x410>
 8017d92:	2301      	movs	r3, #1
 8017d94:	e7df      	b.n	8017d56 <_printf_float+0x3ee>
 8017d96:	2301      	movs	r3, #1
 8017d98:	464a      	mov	r2, r9
 8017d9a:	4631      	mov	r1, r6
 8017d9c:	4628      	mov	r0, r5
 8017d9e:	47b8      	blx	r7
 8017da0:	3001      	adds	r0, #1
 8017da2:	f43f ae3e 	beq.w	8017a22 <_printf_float+0xba>
 8017da6:	f108 0801 	add.w	r8, r8, #1
 8017daa:	68e3      	ldr	r3, [r4, #12]
 8017dac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017dae:	1a9b      	subs	r3, r3, r2
 8017db0:	4543      	cmp	r3, r8
 8017db2:	dcf0      	bgt.n	8017d96 <_printf_float+0x42e>
 8017db4:	e6fc      	b.n	8017bb0 <_printf_float+0x248>
 8017db6:	f04f 0800 	mov.w	r8, #0
 8017dba:	f104 0919 	add.w	r9, r4, #25
 8017dbe:	e7f4      	b.n	8017daa <_printf_float+0x442>
 8017dc0:	2900      	cmp	r1, #0
 8017dc2:	f43f ae8b 	beq.w	8017adc <_printf_float+0x174>
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8017dcc:	ab09      	add	r3, sp, #36	; 0x24
 8017dce:	9300      	str	r3, [sp, #0]
 8017dd0:	ec49 8b10 	vmov	d0, r8, r9
 8017dd4:	6022      	str	r2, [r4, #0]
 8017dd6:	f8cd a004 	str.w	sl, [sp, #4]
 8017dda:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017dde:	4628      	mov	r0, r5
 8017de0:	f7ff fd2e 	bl	8017840 <__cvt>
 8017de4:	4680      	mov	r8, r0
 8017de6:	e648      	b.n	8017a7a <_printf_float+0x112>

08017de8 <_printf_common>:
 8017de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dec:	4691      	mov	r9, r2
 8017dee:	461f      	mov	r7, r3
 8017df0:	688a      	ldr	r2, [r1, #8]
 8017df2:	690b      	ldr	r3, [r1, #16]
 8017df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017df8:	4293      	cmp	r3, r2
 8017dfa:	bfb8      	it	lt
 8017dfc:	4613      	movlt	r3, r2
 8017dfe:	f8c9 3000 	str.w	r3, [r9]
 8017e02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017e06:	4606      	mov	r6, r0
 8017e08:	460c      	mov	r4, r1
 8017e0a:	b112      	cbz	r2, 8017e12 <_printf_common+0x2a>
 8017e0c:	3301      	adds	r3, #1
 8017e0e:	f8c9 3000 	str.w	r3, [r9]
 8017e12:	6823      	ldr	r3, [r4, #0]
 8017e14:	0699      	lsls	r1, r3, #26
 8017e16:	bf42      	ittt	mi
 8017e18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017e1c:	3302      	addmi	r3, #2
 8017e1e:	f8c9 3000 	strmi.w	r3, [r9]
 8017e22:	6825      	ldr	r5, [r4, #0]
 8017e24:	f015 0506 	ands.w	r5, r5, #6
 8017e28:	d107      	bne.n	8017e3a <_printf_common+0x52>
 8017e2a:	f104 0a19 	add.w	sl, r4, #25
 8017e2e:	68e3      	ldr	r3, [r4, #12]
 8017e30:	f8d9 2000 	ldr.w	r2, [r9]
 8017e34:	1a9b      	subs	r3, r3, r2
 8017e36:	42ab      	cmp	r3, r5
 8017e38:	dc28      	bgt.n	8017e8c <_printf_common+0xa4>
 8017e3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017e3e:	6822      	ldr	r2, [r4, #0]
 8017e40:	3300      	adds	r3, #0
 8017e42:	bf18      	it	ne
 8017e44:	2301      	movne	r3, #1
 8017e46:	0692      	lsls	r2, r2, #26
 8017e48:	d42d      	bmi.n	8017ea6 <_printf_common+0xbe>
 8017e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017e4e:	4639      	mov	r1, r7
 8017e50:	4630      	mov	r0, r6
 8017e52:	47c0      	blx	r8
 8017e54:	3001      	adds	r0, #1
 8017e56:	d020      	beq.n	8017e9a <_printf_common+0xb2>
 8017e58:	6823      	ldr	r3, [r4, #0]
 8017e5a:	68e5      	ldr	r5, [r4, #12]
 8017e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8017e60:	f003 0306 	and.w	r3, r3, #6
 8017e64:	2b04      	cmp	r3, #4
 8017e66:	bf08      	it	eq
 8017e68:	1aad      	subeq	r5, r5, r2
 8017e6a:	68a3      	ldr	r3, [r4, #8]
 8017e6c:	6922      	ldr	r2, [r4, #16]
 8017e6e:	bf0c      	ite	eq
 8017e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017e74:	2500      	movne	r5, #0
 8017e76:	4293      	cmp	r3, r2
 8017e78:	bfc4      	itt	gt
 8017e7a:	1a9b      	subgt	r3, r3, r2
 8017e7c:	18ed      	addgt	r5, r5, r3
 8017e7e:	f04f 0900 	mov.w	r9, #0
 8017e82:	341a      	adds	r4, #26
 8017e84:	454d      	cmp	r5, r9
 8017e86:	d11a      	bne.n	8017ebe <_printf_common+0xd6>
 8017e88:	2000      	movs	r0, #0
 8017e8a:	e008      	b.n	8017e9e <_printf_common+0xb6>
 8017e8c:	2301      	movs	r3, #1
 8017e8e:	4652      	mov	r2, sl
 8017e90:	4639      	mov	r1, r7
 8017e92:	4630      	mov	r0, r6
 8017e94:	47c0      	blx	r8
 8017e96:	3001      	adds	r0, #1
 8017e98:	d103      	bne.n	8017ea2 <_printf_common+0xba>
 8017e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8017e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ea2:	3501      	adds	r5, #1
 8017ea4:	e7c3      	b.n	8017e2e <_printf_common+0x46>
 8017ea6:	18e1      	adds	r1, r4, r3
 8017ea8:	1c5a      	adds	r2, r3, #1
 8017eaa:	2030      	movs	r0, #48	; 0x30
 8017eac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017eb0:	4422      	add	r2, r4
 8017eb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017eb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017eba:	3302      	adds	r3, #2
 8017ebc:	e7c5      	b.n	8017e4a <_printf_common+0x62>
 8017ebe:	2301      	movs	r3, #1
 8017ec0:	4622      	mov	r2, r4
 8017ec2:	4639      	mov	r1, r7
 8017ec4:	4630      	mov	r0, r6
 8017ec6:	47c0      	blx	r8
 8017ec8:	3001      	adds	r0, #1
 8017eca:	d0e6      	beq.n	8017e9a <_printf_common+0xb2>
 8017ecc:	f109 0901 	add.w	r9, r9, #1
 8017ed0:	e7d8      	b.n	8017e84 <_printf_common+0x9c>
	...

08017ed4 <_printf_i>:
 8017ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ed8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017edc:	460c      	mov	r4, r1
 8017ede:	7e09      	ldrb	r1, [r1, #24]
 8017ee0:	b085      	sub	sp, #20
 8017ee2:	296e      	cmp	r1, #110	; 0x6e
 8017ee4:	4617      	mov	r7, r2
 8017ee6:	4606      	mov	r6, r0
 8017ee8:	4698      	mov	r8, r3
 8017eea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017eec:	f000 80b3 	beq.w	8018056 <_printf_i+0x182>
 8017ef0:	d822      	bhi.n	8017f38 <_printf_i+0x64>
 8017ef2:	2963      	cmp	r1, #99	; 0x63
 8017ef4:	d036      	beq.n	8017f64 <_printf_i+0x90>
 8017ef6:	d80a      	bhi.n	8017f0e <_printf_i+0x3a>
 8017ef8:	2900      	cmp	r1, #0
 8017efa:	f000 80b9 	beq.w	8018070 <_printf_i+0x19c>
 8017efe:	2958      	cmp	r1, #88	; 0x58
 8017f00:	f000 8083 	beq.w	801800a <_printf_i+0x136>
 8017f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017f0c:	e032      	b.n	8017f74 <_printf_i+0xa0>
 8017f0e:	2964      	cmp	r1, #100	; 0x64
 8017f10:	d001      	beq.n	8017f16 <_printf_i+0x42>
 8017f12:	2969      	cmp	r1, #105	; 0x69
 8017f14:	d1f6      	bne.n	8017f04 <_printf_i+0x30>
 8017f16:	6820      	ldr	r0, [r4, #0]
 8017f18:	6813      	ldr	r3, [r2, #0]
 8017f1a:	0605      	lsls	r5, r0, #24
 8017f1c:	f103 0104 	add.w	r1, r3, #4
 8017f20:	d52a      	bpl.n	8017f78 <_printf_i+0xa4>
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	6011      	str	r1, [r2, #0]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	da03      	bge.n	8017f32 <_printf_i+0x5e>
 8017f2a:	222d      	movs	r2, #45	; 0x2d
 8017f2c:	425b      	negs	r3, r3
 8017f2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017f32:	486f      	ldr	r0, [pc, #444]	; (80180f0 <_printf_i+0x21c>)
 8017f34:	220a      	movs	r2, #10
 8017f36:	e039      	b.n	8017fac <_printf_i+0xd8>
 8017f38:	2973      	cmp	r1, #115	; 0x73
 8017f3a:	f000 809d 	beq.w	8018078 <_printf_i+0x1a4>
 8017f3e:	d808      	bhi.n	8017f52 <_printf_i+0x7e>
 8017f40:	296f      	cmp	r1, #111	; 0x6f
 8017f42:	d020      	beq.n	8017f86 <_printf_i+0xb2>
 8017f44:	2970      	cmp	r1, #112	; 0x70
 8017f46:	d1dd      	bne.n	8017f04 <_printf_i+0x30>
 8017f48:	6823      	ldr	r3, [r4, #0]
 8017f4a:	f043 0320 	orr.w	r3, r3, #32
 8017f4e:	6023      	str	r3, [r4, #0]
 8017f50:	e003      	b.n	8017f5a <_printf_i+0x86>
 8017f52:	2975      	cmp	r1, #117	; 0x75
 8017f54:	d017      	beq.n	8017f86 <_printf_i+0xb2>
 8017f56:	2978      	cmp	r1, #120	; 0x78
 8017f58:	d1d4      	bne.n	8017f04 <_printf_i+0x30>
 8017f5a:	2378      	movs	r3, #120	; 0x78
 8017f5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017f60:	4864      	ldr	r0, [pc, #400]	; (80180f4 <_printf_i+0x220>)
 8017f62:	e055      	b.n	8018010 <_printf_i+0x13c>
 8017f64:	6813      	ldr	r3, [r2, #0]
 8017f66:	1d19      	adds	r1, r3, #4
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	6011      	str	r1, [r2, #0]
 8017f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017f74:	2301      	movs	r3, #1
 8017f76:	e08c      	b.n	8018092 <_printf_i+0x1be>
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	6011      	str	r1, [r2, #0]
 8017f7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017f80:	bf18      	it	ne
 8017f82:	b21b      	sxthne	r3, r3
 8017f84:	e7cf      	b.n	8017f26 <_printf_i+0x52>
 8017f86:	6813      	ldr	r3, [r2, #0]
 8017f88:	6825      	ldr	r5, [r4, #0]
 8017f8a:	1d18      	adds	r0, r3, #4
 8017f8c:	6010      	str	r0, [r2, #0]
 8017f8e:	0628      	lsls	r0, r5, #24
 8017f90:	d501      	bpl.n	8017f96 <_printf_i+0xc2>
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	e002      	b.n	8017f9c <_printf_i+0xc8>
 8017f96:	0668      	lsls	r0, r5, #25
 8017f98:	d5fb      	bpl.n	8017f92 <_printf_i+0xbe>
 8017f9a:	881b      	ldrh	r3, [r3, #0]
 8017f9c:	4854      	ldr	r0, [pc, #336]	; (80180f0 <_printf_i+0x21c>)
 8017f9e:	296f      	cmp	r1, #111	; 0x6f
 8017fa0:	bf14      	ite	ne
 8017fa2:	220a      	movne	r2, #10
 8017fa4:	2208      	moveq	r2, #8
 8017fa6:	2100      	movs	r1, #0
 8017fa8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017fac:	6865      	ldr	r5, [r4, #4]
 8017fae:	60a5      	str	r5, [r4, #8]
 8017fb0:	2d00      	cmp	r5, #0
 8017fb2:	f2c0 8095 	blt.w	80180e0 <_printf_i+0x20c>
 8017fb6:	6821      	ldr	r1, [r4, #0]
 8017fb8:	f021 0104 	bic.w	r1, r1, #4
 8017fbc:	6021      	str	r1, [r4, #0]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d13d      	bne.n	801803e <_printf_i+0x16a>
 8017fc2:	2d00      	cmp	r5, #0
 8017fc4:	f040 808e 	bne.w	80180e4 <_printf_i+0x210>
 8017fc8:	4665      	mov	r5, ip
 8017fca:	2a08      	cmp	r2, #8
 8017fcc:	d10b      	bne.n	8017fe6 <_printf_i+0x112>
 8017fce:	6823      	ldr	r3, [r4, #0]
 8017fd0:	07db      	lsls	r3, r3, #31
 8017fd2:	d508      	bpl.n	8017fe6 <_printf_i+0x112>
 8017fd4:	6923      	ldr	r3, [r4, #16]
 8017fd6:	6862      	ldr	r2, [r4, #4]
 8017fd8:	429a      	cmp	r2, r3
 8017fda:	bfde      	ittt	le
 8017fdc:	2330      	movle	r3, #48	; 0x30
 8017fde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017fe2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017fe6:	ebac 0305 	sub.w	r3, ip, r5
 8017fea:	6123      	str	r3, [r4, #16]
 8017fec:	f8cd 8000 	str.w	r8, [sp]
 8017ff0:	463b      	mov	r3, r7
 8017ff2:	aa03      	add	r2, sp, #12
 8017ff4:	4621      	mov	r1, r4
 8017ff6:	4630      	mov	r0, r6
 8017ff8:	f7ff fef6 	bl	8017de8 <_printf_common>
 8017ffc:	3001      	adds	r0, #1
 8017ffe:	d14d      	bne.n	801809c <_printf_i+0x1c8>
 8018000:	f04f 30ff 	mov.w	r0, #4294967295
 8018004:	b005      	add	sp, #20
 8018006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801800a:	4839      	ldr	r0, [pc, #228]	; (80180f0 <_printf_i+0x21c>)
 801800c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018010:	6813      	ldr	r3, [r2, #0]
 8018012:	6821      	ldr	r1, [r4, #0]
 8018014:	1d1d      	adds	r5, r3, #4
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	6015      	str	r5, [r2, #0]
 801801a:	060a      	lsls	r2, r1, #24
 801801c:	d50b      	bpl.n	8018036 <_printf_i+0x162>
 801801e:	07ca      	lsls	r2, r1, #31
 8018020:	bf44      	itt	mi
 8018022:	f041 0120 	orrmi.w	r1, r1, #32
 8018026:	6021      	strmi	r1, [r4, #0]
 8018028:	b91b      	cbnz	r3, 8018032 <_printf_i+0x15e>
 801802a:	6822      	ldr	r2, [r4, #0]
 801802c:	f022 0220 	bic.w	r2, r2, #32
 8018030:	6022      	str	r2, [r4, #0]
 8018032:	2210      	movs	r2, #16
 8018034:	e7b7      	b.n	8017fa6 <_printf_i+0xd2>
 8018036:	064d      	lsls	r5, r1, #25
 8018038:	bf48      	it	mi
 801803a:	b29b      	uxthmi	r3, r3
 801803c:	e7ef      	b.n	801801e <_printf_i+0x14a>
 801803e:	4665      	mov	r5, ip
 8018040:	fbb3 f1f2 	udiv	r1, r3, r2
 8018044:	fb02 3311 	mls	r3, r2, r1, r3
 8018048:	5cc3      	ldrb	r3, [r0, r3]
 801804a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801804e:	460b      	mov	r3, r1
 8018050:	2900      	cmp	r1, #0
 8018052:	d1f5      	bne.n	8018040 <_printf_i+0x16c>
 8018054:	e7b9      	b.n	8017fca <_printf_i+0xf6>
 8018056:	6813      	ldr	r3, [r2, #0]
 8018058:	6825      	ldr	r5, [r4, #0]
 801805a:	6961      	ldr	r1, [r4, #20]
 801805c:	1d18      	adds	r0, r3, #4
 801805e:	6010      	str	r0, [r2, #0]
 8018060:	0628      	lsls	r0, r5, #24
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	d501      	bpl.n	801806a <_printf_i+0x196>
 8018066:	6019      	str	r1, [r3, #0]
 8018068:	e002      	b.n	8018070 <_printf_i+0x19c>
 801806a:	066a      	lsls	r2, r5, #25
 801806c:	d5fb      	bpl.n	8018066 <_printf_i+0x192>
 801806e:	8019      	strh	r1, [r3, #0]
 8018070:	2300      	movs	r3, #0
 8018072:	6123      	str	r3, [r4, #16]
 8018074:	4665      	mov	r5, ip
 8018076:	e7b9      	b.n	8017fec <_printf_i+0x118>
 8018078:	6813      	ldr	r3, [r2, #0]
 801807a:	1d19      	adds	r1, r3, #4
 801807c:	6011      	str	r1, [r2, #0]
 801807e:	681d      	ldr	r5, [r3, #0]
 8018080:	6862      	ldr	r2, [r4, #4]
 8018082:	2100      	movs	r1, #0
 8018084:	4628      	mov	r0, r5
 8018086:	f7ef ffe3 	bl	8008050 <memchr>
 801808a:	b108      	cbz	r0, 8018090 <_printf_i+0x1bc>
 801808c:	1b40      	subs	r0, r0, r5
 801808e:	6060      	str	r0, [r4, #4]
 8018090:	6863      	ldr	r3, [r4, #4]
 8018092:	6123      	str	r3, [r4, #16]
 8018094:	2300      	movs	r3, #0
 8018096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801809a:	e7a7      	b.n	8017fec <_printf_i+0x118>
 801809c:	6923      	ldr	r3, [r4, #16]
 801809e:	462a      	mov	r2, r5
 80180a0:	4639      	mov	r1, r7
 80180a2:	4630      	mov	r0, r6
 80180a4:	47c0      	blx	r8
 80180a6:	3001      	adds	r0, #1
 80180a8:	d0aa      	beq.n	8018000 <_printf_i+0x12c>
 80180aa:	6823      	ldr	r3, [r4, #0]
 80180ac:	079b      	lsls	r3, r3, #30
 80180ae:	d413      	bmi.n	80180d8 <_printf_i+0x204>
 80180b0:	68e0      	ldr	r0, [r4, #12]
 80180b2:	9b03      	ldr	r3, [sp, #12]
 80180b4:	4298      	cmp	r0, r3
 80180b6:	bfb8      	it	lt
 80180b8:	4618      	movlt	r0, r3
 80180ba:	e7a3      	b.n	8018004 <_printf_i+0x130>
 80180bc:	2301      	movs	r3, #1
 80180be:	464a      	mov	r2, r9
 80180c0:	4639      	mov	r1, r7
 80180c2:	4630      	mov	r0, r6
 80180c4:	47c0      	blx	r8
 80180c6:	3001      	adds	r0, #1
 80180c8:	d09a      	beq.n	8018000 <_printf_i+0x12c>
 80180ca:	3501      	adds	r5, #1
 80180cc:	68e3      	ldr	r3, [r4, #12]
 80180ce:	9a03      	ldr	r2, [sp, #12]
 80180d0:	1a9b      	subs	r3, r3, r2
 80180d2:	42ab      	cmp	r3, r5
 80180d4:	dcf2      	bgt.n	80180bc <_printf_i+0x1e8>
 80180d6:	e7eb      	b.n	80180b0 <_printf_i+0x1dc>
 80180d8:	2500      	movs	r5, #0
 80180da:	f104 0919 	add.w	r9, r4, #25
 80180de:	e7f5      	b.n	80180cc <_printf_i+0x1f8>
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d1ac      	bne.n	801803e <_printf_i+0x16a>
 80180e4:	7803      	ldrb	r3, [r0, #0]
 80180e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80180ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80180ee:	e76c      	b.n	8017fca <_printf_i+0xf6>
 80180f0:	0801c765 	.word	0x0801c765
 80180f4:	0801c776 	.word	0x0801c776

080180f8 <__svfiscanf_r>:
 80180f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180fc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018100:	460c      	mov	r4, r1
 8018102:	2100      	movs	r1, #0
 8018104:	9144      	str	r1, [sp, #272]	; 0x110
 8018106:	9145      	str	r1, [sp, #276]	; 0x114
 8018108:	499f      	ldr	r1, [pc, #636]	; (8018388 <__svfiscanf_r+0x290>)
 801810a:	91a0      	str	r1, [sp, #640]	; 0x280
 801810c:	f10d 0804 	add.w	r8, sp, #4
 8018110:	499e      	ldr	r1, [pc, #632]	; (801838c <__svfiscanf_r+0x294>)
 8018112:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018390 <__svfiscanf_r+0x298>
 8018116:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801811a:	4606      	mov	r6, r0
 801811c:	4692      	mov	sl, r2
 801811e:	91a1      	str	r1, [sp, #644]	; 0x284
 8018120:	9300      	str	r3, [sp, #0]
 8018122:	270a      	movs	r7, #10
 8018124:	f89a 3000 	ldrb.w	r3, [sl]
 8018128:	2b00      	cmp	r3, #0
 801812a:	f000 812a 	beq.w	8018382 <__svfiscanf_r+0x28a>
 801812e:	4655      	mov	r5, sl
 8018130:	f003 f98e 	bl	801b450 <__locale_ctype_ptr>
 8018134:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018138:	4458      	add	r0, fp
 801813a:	7843      	ldrb	r3, [r0, #1]
 801813c:	f013 0308 	ands.w	r3, r3, #8
 8018140:	d01c      	beq.n	801817c <__svfiscanf_r+0x84>
 8018142:	6863      	ldr	r3, [r4, #4]
 8018144:	2b00      	cmp	r3, #0
 8018146:	dd12      	ble.n	801816e <__svfiscanf_r+0x76>
 8018148:	f003 f982 	bl	801b450 <__locale_ctype_ptr>
 801814c:	6823      	ldr	r3, [r4, #0]
 801814e:	781a      	ldrb	r2, [r3, #0]
 8018150:	4410      	add	r0, r2
 8018152:	7842      	ldrb	r2, [r0, #1]
 8018154:	0712      	lsls	r2, r2, #28
 8018156:	d401      	bmi.n	801815c <__svfiscanf_r+0x64>
 8018158:	46aa      	mov	sl, r5
 801815a:	e7e3      	b.n	8018124 <__svfiscanf_r+0x2c>
 801815c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801815e:	3201      	adds	r2, #1
 8018160:	9245      	str	r2, [sp, #276]	; 0x114
 8018162:	6862      	ldr	r2, [r4, #4]
 8018164:	3301      	adds	r3, #1
 8018166:	3a01      	subs	r2, #1
 8018168:	6062      	str	r2, [r4, #4]
 801816a:	6023      	str	r3, [r4, #0]
 801816c:	e7e9      	b.n	8018142 <__svfiscanf_r+0x4a>
 801816e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018170:	4621      	mov	r1, r4
 8018172:	4630      	mov	r0, r6
 8018174:	4798      	blx	r3
 8018176:	2800      	cmp	r0, #0
 8018178:	d0e6      	beq.n	8018148 <__svfiscanf_r+0x50>
 801817a:	e7ed      	b.n	8018158 <__svfiscanf_r+0x60>
 801817c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018180:	f040 8082 	bne.w	8018288 <__svfiscanf_r+0x190>
 8018184:	9343      	str	r3, [sp, #268]	; 0x10c
 8018186:	9341      	str	r3, [sp, #260]	; 0x104
 8018188:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801818c:	2b2a      	cmp	r3, #42	; 0x2a
 801818e:	d103      	bne.n	8018198 <__svfiscanf_r+0xa0>
 8018190:	2310      	movs	r3, #16
 8018192:	9341      	str	r3, [sp, #260]	; 0x104
 8018194:	f10a 0502 	add.w	r5, sl, #2
 8018198:	46aa      	mov	sl, r5
 801819a:	f815 1b01 	ldrb.w	r1, [r5], #1
 801819e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80181a2:	2a09      	cmp	r2, #9
 80181a4:	d922      	bls.n	80181ec <__svfiscanf_r+0xf4>
 80181a6:	2203      	movs	r2, #3
 80181a8:	4879      	ldr	r0, [pc, #484]	; (8018390 <__svfiscanf_r+0x298>)
 80181aa:	f7ef ff51 	bl	8008050 <memchr>
 80181ae:	b138      	cbz	r0, 80181c0 <__svfiscanf_r+0xc8>
 80181b0:	eba0 0309 	sub.w	r3, r0, r9
 80181b4:	2001      	movs	r0, #1
 80181b6:	4098      	lsls	r0, r3
 80181b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80181ba:	4318      	orrs	r0, r3
 80181bc:	9041      	str	r0, [sp, #260]	; 0x104
 80181be:	46aa      	mov	sl, r5
 80181c0:	f89a 3000 	ldrb.w	r3, [sl]
 80181c4:	2b67      	cmp	r3, #103	; 0x67
 80181c6:	f10a 0501 	add.w	r5, sl, #1
 80181ca:	d82b      	bhi.n	8018224 <__svfiscanf_r+0x12c>
 80181cc:	2b65      	cmp	r3, #101	; 0x65
 80181ce:	f080 809f 	bcs.w	8018310 <__svfiscanf_r+0x218>
 80181d2:	2b47      	cmp	r3, #71	; 0x47
 80181d4:	d810      	bhi.n	80181f8 <__svfiscanf_r+0x100>
 80181d6:	2b45      	cmp	r3, #69	; 0x45
 80181d8:	f080 809a 	bcs.w	8018310 <__svfiscanf_r+0x218>
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d06c      	beq.n	80182ba <__svfiscanf_r+0x1c2>
 80181e0:	2b25      	cmp	r3, #37	; 0x25
 80181e2:	d051      	beq.n	8018288 <__svfiscanf_r+0x190>
 80181e4:	2303      	movs	r3, #3
 80181e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80181e8:	9742      	str	r7, [sp, #264]	; 0x108
 80181ea:	e027      	b.n	801823c <__svfiscanf_r+0x144>
 80181ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80181ee:	fb07 1303 	mla	r3, r7, r3, r1
 80181f2:	3b30      	subs	r3, #48	; 0x30
 80181f4:	9343      	str	r3, [sp, #268]	; 0x10c
 80181f6:	e7cf      	b.n	8018198 <__svfiscanf_r+0xa0>
 80181f8:	2b5b      	cmp	r3, #91	; 0x5b
 80181fa:	d06a      	beq.n	80182d2 <__svfiscanf_r+0x1da>
 80181fc:	d80c      	bhi.n	8018218 <__svfiscanf_r+0x120>
 80181fe:	2b58      	cmp	r3, #88	; 0x58
 8018200:	d1f0      	bne.n	80181e4 <__svfiscanf_r+0xec>
 8018202:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018208:	9241      	str	r2, [sp, #260]	; 0x104
 801820a:	2210      	movs	r2, #16
 801820c:	9242      	str	r2, [sp, #264]	; 0x108
 801820e:	2b6e      	cmp	r3, #110	; 0x6e
 8018210:	bf8c      	ite	hi
 8018212:	2304      	movhi	r3, #4
 8018214:	2303      	movls	r3, #3
 8018216:	e010      	b.n	801823a <__svfiscanf_r+0x142>
 8018218:	2b63      	cmp	r3, #99	; 0x63
 801821a:	d065      	beq.n	80182e8 <__svfiscanf_r+0x1f0>
 801821c:	2b64      	cmp	r3, #100	; 0x64
 801821e:	d1e1      	bne.n	80181e4 <__svfiscanf_r+0xec>
 8018220:	9742      	str	r7, [sp, #264]	; 0x108
 8018222:	e7f4      	b.n	801820e <__svfiscanf_r+0x116>
 8018224:	2b70      	cmp	r3, #112	; 0x70
 8018226:	d04b      	beq.n	80182c0 <__svfiscanf_r+0x1c8>
 8018228:	d826      	bhi.n	8018278 <__svfiscanf_r+0x180>
 801822a:	2b6e      	cmp	r3, #110	; 0x6e
 801822c:	d062      	beq.n	80182f4 <__svfiscanf_r+0x1fc>
 801822e:	d84c      	bhi.n	80182ca <__svfiscanf_r+0x1d2>
 8018230:	2b69      	cmp	r3, #105	; 0x69
 8018232:	d1d7      	bne.n	80181e4 <__svfiscanf_r+0xec>
 8018234:	2300      	movs	r3, #0
 8018236:	9342      	str	r3, [sp, #264]	; 0x108
 8018238:	2303      	movs	r3, #3
 801823a:	9347      	str	r3, [sp, #284]	; 0x11c
 801823c:	6863      	ldr	r3, [r4, #4]
 801823e:	2b00      	cmp	r3, #0
 8018240:	dd68      	ble.n	8018314 <__svfiscanf_r+0x21c>
 8018242:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018244:	0659      	lsls	r1, r3, #25
 8018246:	d407      	bmi.n	8018258 <__svfiscanf_r+0x160>
 8018248:	f003 f902 	bl	801b450 <__locale_ctype_ptr>
 801824c:	6823      	ldr	r3, [r4, #0]
 801824e:	781a      	ldrb	r2, [r3, #0]
 8018250:	4410      	add	r0, r2
 8018252:	7842      	ldrb	r2, [r0, #1]
 8018254:	0712      	lsls	r2, r2, #28
 8018256:	d464      	bmi.n	8018322 <__svfiscanf_r+0x22a>
 8018258:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801825a:	2b02      	cmp	r3, #2
 801825c:	dc73      	bgt.n	8018346 <__svfiscanf_r+0x24e>
 801825e:	466b      	mov	r3, sp
 8018260:	4622      	mov	r2, r4
 8018262:	a941      	add	r1, sp, #260	; 0x104
 8018264:	4630      	mov	r0, r6
 8018266:	f000 faa1 	bl	80187ac <_scanf_chars>
 801826a:	2801      	cmp	r0, #1
 801826c:	f000 8089 	beq.w	8018382 <__svfiscanf_r+0x28a>
 8018270:	2802      	cmp	r0, #2
 8018272:	f47f af71 	bne.w	8018158 <__svfiscanf_r+0x60>
 8018276:	e01d      	b.n	80182b4 <__svfiscanf_r+0x1bc>
 8018278:	2b75      	cmp	r3, #117	; 0x75
 801827a:	d0d1      	beq.n	8018220 <__svfiscanf_r+0x128>
 801827c:	2b78      	cmp	r3, #120	; 0x78
 801827e:	d0c0      	beq.n	8018202 <__svfiscanf_r+0x10a>
 8018280:	2b73      	cmp	r3, #115	; 0x73
 8018282:	d1af      	bne.n	80181e4 <__svfiscanf_r+0xec>
 8018284:	2302      	movs	r3, #2
 8018286:	e7d8      	b.n	801823a <__svfiscanf_r+0x142>
 8018288:	6863      	ldr	r3, [r4, #4]
 801828a:	2b00      	cmp	r3, #0
 801828c:	dd0c      	ble.n	80182a8 <__svfiscanf_r+0x1b0>
 801828e:	6823      	ldr	r3, [r4, #0]
 8018290:	781a      	ldrb	r2, [r3, #0]
 8018292:	455a      	cmp	r2, fp
 8018294:	d175      	bne.n	8018382 <__svfiscanf_r+0x28a>
 8018296:	3301      	adds	r3, #1
 8018298:	6862      	ldr	r2, [r4, #4]
 801829a:	6023      	str	r3, [r4, #0]
 801829c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801829e:	3a01      	subs	r2, #1
 80182a0:	3301      	adds	r3, #1
 80182a2:	6062      	str	r2, [r4, #4]
 80182a4:	9345      	str	r3, [sp, #276]	; 0x114
 80182a6:	e757      	b.n	8018158 <__svfiscanf_r+0x60>
 80182a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80182aa:	4621      	mov	r1, r4
 80182ac:	4630      	mov	r0, r6
 80182ae:	4798      	blx	r3
 80182b0:	2800      	cmp	r0, #0
 80182b2:	d0ec      	beq.n	801828e <__svfiscanf_r+0x196>
 80182b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80182b6:	2800      	cmp	r0, #0
 80182b8:	d159      	bne.n	801836e <__svfiscanf_r+0x276>
 80182ba:	f04f 30ff 	mov.w	r0, #4294967295
 80182be:	e05c      	b.n	801837a <__svfiscanf_r+0x282>
 80182c0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80182c2:	f042 0220 	orr.w	r2, r2, #32
 80182c6:	9241      	str	r2, [sp, #260]	; 0x104
 80182c8:	e79b      	b.n	8018202 <__svfiscanf_r+0x10a>
 80182ca:	2308      	movs	r3, #8
 80182cc:	9342      	str	r3, [sp, #264]	; 0x108
 80182ce:	2304      	movs	r3, #4
 80182d0:	e7b3      	b.n	801823a <__svfiscanf_r+0x142>
 80182d2:	4629      	mov	r1, r5
 80182d4:	4640      	mov	r0, r8
 80182d6:	f000 fd0f 	bl	8018cf8 <__sccl>
 80182da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80182dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182e0:	9341      	str	r3, [sp, #260]	; 0x104
 80182e2:	4605      	mov	r5, r0
 80182e4:	2301      	movs	r3, #1
 80182e6:	e7a8      	b.n	801823a <__svfiscanf_r+0x142>
 80182e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80182ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182ee:	9341      	str	r3, [sp, #260]	; 0x104
 80182f0:	2300      	movs	r3, #0
 80182f2:	e7a2      	b.n	801823a <__svfiscanf_r+0x142>
 80182f4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80182f6:	06c3      	lsls	r3, r0, #27
 80182f8:	f53f af2e 	bmi.w	8018158 <__svfiscanf_r+0x60>
 80182fc:	9b00      	ldr	r3, [sp, #0]
 80182fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018300:	1d19      	adds	r1, r3, #4
 8018302:	9100      	str	r1, [sp, #0]
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	07c0      	lsls	r0, r0, #31
 8018308:	bf4c      	ite	mi
 801830a:	801a      	strhmi	r2, [r3, #0]
 801830c:	601a      	strpl	r2, [r3, #0]
 801830e:	e723      	b.n	8018158 <__svfiscanf_r+0x60>
 8018310:	2305      	movs	r3, #5
 8018312:	e792      	b.n	801823a <__svfiscanf_r+0x142>
 8018314:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018316:	4621      	mov	r1, r4
 8018318:	4630      	mov	r0, r6
 801831a:	4798      	blx	r3
 801831c:	2800      	cmp	r0, #0
 801831e:	d090      	beq.n	8018242 <__svfiscanf_r+0x14a>
 8018320:	e7c8      	b.n	80182b4 <__svfiscanf_r+0x1bc>
 8018322:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018324:	3201      	adds	r2, #1
 8018326:	9245      	str	r2, [sp, #276]	; 0x114
 8018328:	6862      	ldr	r2, [r4, #4]
 801832a:	3a01      	subs	r2, #1
 801832c:	2a00      	cmp	r2, #0
 801832e:	6062      	str	r2, [r4, #4]
 8018330:	dd02      	ble.n	8018338 <__svfiscanf_r+0x240>
 8018332:	3301      	adds	r3, #1
 8018334:	6023      	str	r3, [r4, #0]
 8018336:	e787      	b.n	8018248 <__svfiscanf_r+0x150>
 8018338:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801833a:	4621      	mov	r1, r4
 801833c:	4630      	mov	r0, r6
 801833e:	4798      	blx	r3
 8018340:	2800      	cmp	r0, #0
 8018342:	d081      	beq.n	8018248 <__svfiscanf_r+0x150>
 8018344:	e7b6      	b.n	80182b4 <__svfiscanf_r+0x1bc>
 8018346:	2b04      	cmp	r3, #4
 8018348:	dc06      	bgt.n	8018358 <__svfiscanf_r+0x260>
 801834a:	466b      	mov	r3, sp
 801834c:	4622      	mov	r2, r4
 801834e:	a941      	add	r1, sp, #260	; 0x104
 8018350:	4630      	mov	r0, r6
 8018352:	f000 fa8f 	bl	8018874 <_scanf_i>
 8018356:	e788      	b.n	801826a <__svfiscanf_r+0x172>
 8018358:	4b0e      	ldr	r3, [pc, #56]	; (8018394 <__svfiscanf_r+0x29c>)
 801835a:	2b00      	cmp	r3, #0
 801835c:	f43f aefc 	beq.w	8018158 <__svfiscanf_r+0x60>
 8018360:	466b      	mov	r3, sp
 8018362:	4622      	mov	r2, r4
 8018364:	a941      	add	r1, sp, #260	; 0x104
 8018366:	4630      	mov	r0, r6
 8018368:	f000 f83e 	bl	80183e8 <_scanf_float>
 801836c:	e77d      	b.n	801826a <__svfiscanf_r+0x172>
 801836e:	89a3      	ldrh	r3, [r4, #12]
 8018370:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018374:	bf18      	it	ne
 8018376:	f04f 30ff 	movne.w	r0, #4294967295
 801837a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801837e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018382:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018384:	e7f9      	b.n	801837a <__svfiscanf_r+0x282>
 8018386:	bf00      	nop
 8018388:	08019e89 	.word	0x08019e89
 801838c:	08018b91 	.word	0x08018b91
 8018390:	0801c74a 	.word	0x0801c74a
 8018394:	080183e9 	.word	0x080183e9

08018398 <_vfiscanf_r>:
 8018398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801839c:	460c      	mov	r4, r1
 801839e:	4616      	mov	r6, r2
 80183a0:	461f      	mov	r7, r3
 80183a2:	4605      	mov	r5, r0
 80183a4:	b118      	cbz	r0, 80183ae <_vfiscanf_r+0x16>
 80183a6:	6983      	ldr	r3, [r0, #24]
 80183a8:	b90b      	cbnz	r3, 80183ae <_vfiscanf_r+0x16>
 80183aa:	f7fe ff1f 	bl	80171ec <__sinit>
 80183ae:	4b0b      	ldr	r3, [pc, #44]	; (80183dc <_vfiscanf_r+0x44>)
 80183b0:	429c      	cmp	r4, r3
 80183b2:	d108      	bne.n	80183c6 <_vfiscanf_r+0x2e>
 80183b4:	686c      	ldr	r4, [r5, #4]
 80183b6:	463b      	mov	r3, r7
 80183b8:	4632      	mov	r2, r6
 80183ba:	4621      	mov	r1, r4
 80183bc:	4628      	mov	r0, r5
 80183be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183c2:	f7ff be99 	b.w	80180f8 <__svfiscanf_r>
 80183c6:	4b06      	ldr	r3, [pc, #24]	; (80183e0 <_vfiscanf_r+0x48>)
 80183c8:	429c      	cmp	r4, r3
 80183ca:	d101      	bne.n	80183d0 <_vfiscanf_r+0x38>
 80183cc:	68ac      	ldr	r4, [r5, #8]
 80183ce:	e7f2      	b.n	80183b6 <_vfiscanf_r+0x1e>
 80183d0:	4b04      	ldr	r3, [pc, #16]	; (80183e4 <_vfiscanf_r+0x4c>)
 80183d2:	429c      	cmp	r4, r3
 80183d4:	bf08      	it	eq
 80183d6:	68ec      	ldreq	r4, [r5, #12]
 80183d8:	e7ed      	b.n	80183b6 <_vfiscanf_r+0x1e>
 80183da:	bf00      	nop
 80183dc:	0801c700 	.word	0x0801c700
 80183e0:	0801c720 	.word	0x0801c720
 80183e4:	0801c6e0 	.word	0x0801c6e0

080183e8 <_scanf_float>:
 80183e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183ec:	469a      	mov	sl, r3
 80183ee:	688b      	ldr	r3, [r1, #8]
 80183f0:	4616      	mov	r6, r2
 80183f2:	1e5a      	subs	r2, r3, #1
 80183f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80183f8:	b087      	sub	sp, #28
 80183fa:	bf83      	ittte	hi
 80183fc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8018400:	189b      	addhi	r3, r3, r2
 8018402:	9301      	strhi	r3, [sp, #4]
 8018404:	2300      	movls	r3, #0
 8018406:	bf86      	itte	hi
 8018408:	f240 135d 	movwhi	r3, #349	; 0x15d
 801840c:	608b      	strhi	r3, [r1, #8]
 801840e:	9301      	strls	r3, [sp, #4]
 8018410:	680b      	ldr	r3, [r1, #0]
 8018412:	4688      	mov	r8, r1
 8018414:	f04f 0b00 	mov.w	fp, #0
 8018418:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801841c:	f848 3b1c 	str.w	r3, [r8], #28
 8018420:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8018424:	4607      	mov	r7, r0
 8018426:	460c      	mov	r4, r1
 8018428:	4645      	mov	r5, r8
 801842a:	465a      	mov	r2, fp
 801842c:	46d9      	mov	r9, fp
 801842e:	f8cd b008 	str.w	fp, [sp, #8]
 8018432:	68a1      	ldr	r1, [r4, #8]
 8018434:	b181      	cbz	r1, 8018458 <_scanf_float+0x70>
 8018436:	6833      	ldr	r3, [r6, #0]
 8018438:	781b      	ldrb	r3, [r3, #0]
 801843a:	2b49      	cmp	r3, #73	; 0x49
 801843c:	d071      	beq.n	8018522 <_scanf_float+0x13a>
 801843e:	d84d      	bhi.n	80184dc <_scanf_float+0xf4>
 8018440:	2b39      	cmp	r3, #57	; 0x39
 8018442:	d840      	bhi.n	80184c6 <_scanf_float+0xde>
 8018444:	2b31      	cmp	r3, #49	; 0x31
 8018446:	f080 8088 	bcs.w	801855a <_scanf_float+0x172>
 801844a:	2b2d      	cmp	r3, #45	; 0x2d
 801844c:	f000 8090 	beq.w	8018570 <_scanf_float+0x188>
 8018450:	d815      	bhi.n	801847e <_scanf_float+0x96>
 8018452:	2b2b      	cmp	r3, #43	; 0x2b
 8018454:	f000 808c 	beq.w	8018570 <_scanf_float+0x188>
 8018458:	f1b9 0f00 	cmp.w	r9, #0
 801845c:	d003      	beq.n	8018466 <_scanf_float+0x7e>
 801845e:	6823      	ldr	r3, [r4, #0]
 8018460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018464:	6023      	str	r3, [r4, #0]
 8018466:	3a01      	subs	r2, #1
 8018468:	2a01      	cmp	r2, #1
 801846a:	f200 80ea 	bhi.w	8018642 <_scanf_float+0x25a>
 801846e:	4545      	cmp	r5, r8
 8018470:	f200 80dc 	bhi.w	801862c <_scanf_float+0x244>
 8018474:	2601      	movs	r6, #1
 8018476:	4630      	mov	r0, r6
 8018478:	b007      	add	sp, #28
 801847a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801847e:	2b2e      	cmp	r3, #46	; 0x2e
 8018480:	f000 809f 	beq.w	80185c2 <_scanf_float+0x1da>
 8018484:	2b30      	cmp	r3, #48	; 0x30
 8018486:	d1e7      	bne.n	8018458 <_scanf_float+0x70>
 8018488:	6820      	ldr	r0, [r4, #0]
 801848a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801848e:	d064      	beq.n	801855a <_scanf_float+0x172>
 8018490:	9b01      	ldr	r3, [sp, #4]
 8018492:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8018496:	6020      	str	r0, [r4, #0]
 8018498:	f109 0901 	add.w	r9, r9, #1
 801849c:	b11b      	cbz	r3, 80184a6 <_scanf_float+0xbe>
 801849e:	3b01      	subs	r3, #1
 80184a0:	3101      	adds	r1, #1
 80184a2:	9301      	str	r3, [sp, #4]
 80184a4:	60a1      	str	r1, [r4, #8]
 80184a6:	68a3      	ldr	r3, [r4, #8]
 80184a8:	3b01      	subs	r3, #1
 80184aa:	60a3      	str	r3, [r4, #8]
 80184ac:	6923      	ldr	r3, [r4, #16]
 80184ae:	3301      	adds	r3, #1
 80184b0:	6123      	str	r3, [r4, #16]
 80184b2:	6873      	ldr	r3, [r6, #4]
 80184b4:	3b01      	subs	r3, #1
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	6073      	str	r3, [r6, #4]
 80184ba:	f340 80ac 	ble.w	8018616 <_scanf_float+0x22e>
 80184be:	6833      	ldr	r3, [r6, #0]
 80184c0:	3301      	adds	r3, #1
 80184c2:	6033      	str	r3, [r6, #0]
 80184c4:	e7b5      	b.n	8018432 <_scanf_float+0x4a>
 80184c6:	2b45      	cmp	r3, #69	; 0x45
 80184c8:	f000 8085 	beq.w	80185d6 <_scanf_float+0x1ee>
 80184cc:	2b46      	cmp	r3, #70	; 0x46
 80184ce:	d06a      	beq.n	80185a6 <_scanf_float+0x1be>
 80184d0:	2b41      	cmp	r3, #65	; 0x41
 80184d2:	d1c1      	bne.n	8018458 <_scanf_float+0x70>
 80184d4:	2a01      	cmp	r2, #1
 80184d6:	d1bf      	bne.n	8018458 <_scanf_float+0x70>
 80184d8:	2202      	movs	r2, #2
 80184da:	e046      	b.n	801856a <_scanf_float+0x182>
 80184dc:	2b65      	cmp	r3, #101	; 0x65
 80184de:	d07a      	beq.n	80185d6 <_scanf_float+0x1ee>
 80184e0:	d818      	bhi.n	8018514 <_scanf_float+0x12c>
 80184e2:	2b54      	cmp	r3, #84	; 0x54
 80184e4:	d066      	beq.n	80185b4 <_scanf_float+0x1cc>
 80184e6:	d811      	bhi.n	801850c <_scanf_float+0x124>
 80184e8:	2b4e      	cmp	r3, #78	; 0x4e
 80184ea:	d1b5      	bne.n	8018458 <_scanf_float+0x70>
 80184ec:	2a00      	cmp	r2, #0
 80184ee:	d146      	bne.n	801857e <_scanf_float+0x196>
 80184f0:	f1b9 0f00 	cmp.w	r9, #0
 80184f4:	d145      	bne.n	8018582 <_scanf_float+0x19a>
 80184f6:	6821      	ldr	r1, [r4, #0]
 80184f8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80184fc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8018500:	d13f      	bne.n	8018582 <_scanf_float+0x19a>
 8018502:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8018506:	6021      	str	r1, [r4, #0]
 8018508:	2201      	movs	r2, #1
 801850a:	e02e      	b.n	801856a <_scanf_float+0x182>
 801850c:	2b59      	cmp	r3, #89	; 0x59
 801850e:	d01e      	beq.n	801854e <_scanf_float+0x166>
 8018510:	2b61      	cmp	r3, #97	; 0x61
 8018512:	e7de      	b.n	80184d2 <_scanf_float+0xea>
 8018514:	2b6e      	cmp	r3, #110	; 0x6e
 8018516:	d0e9      	beq.n	80184ec <_scanf_float+0x104>
 8018518:	d815      	bhi.n	8018546 <_scanf_float+0x15e>
 801851a:	2b66      	cmp	r3, #102	; 0x66
 801851c:	d043      	beq.n	80185a6 <_scanf_float+0x1be>
 801851e:	2b69      	cmp	r3, #105	; 0x69
 8018520:	d19a      	bne.n	8018458 <_scanf_float+0x70>
 8018522:	f1bb 0f00 	cmp.w	fp, #0
 8018526:	d138      	bne.n	801859a <_scanf_float+0x1b2>
 8018528:	f1b9 0f00 	cmp.w	r9, #0
 801852c:	d197      	bne.n	801845e <_scanf_float+0x76>
 801852e:	6821      	ldr	r1, [r4, #0]
 8018530:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8018534:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8018538:	d195      	bne.n	8018466 <_scanf_float+0x7e>
 801853a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801853e:	6021      	str	r1, [r4, #0]
 8018540:	f04f 0b01 	mov.w	fp, #1
 8018544:	e011      	b.n	801856a <_scanf_float+0x182>
 8018546:	2b74      	cmp	r3, #116	; 0x74
 8018548:	d034      	beq.n	80185b4 <_scanf_float+0x1cc>
 801854a:	2b79      	cmp	r3, #121	; 0x79
 801854c:	d184      	bne.n	8018458 <_scanf_float+0x70>
 801854e:	f1bb 0f07 	cmp.w	fp, #7
 8018552:	d181      	bne.n	8018458 <_scanf_float+0x70>
 8018554:	f04f 0b08 	mov.w	fp, #8
 8018558:	e007      	b.n	801856a <_scanf_float+0x182>
 801855a:	eb12 0f0b 	cmn.w	r2, fp
 801855e:	f47f af7b 	bne.w	8018458 <_scanf_float+0x70>
 8018562:	6821      	ldr	r1, [r4, #0]
 8018564:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8018568:	6021      	str	r1, [r4, #0]
 801856a:	702b      	strb	r3, [r5, #0]
 801856c:	3501      	adds	r5, #1
 801856e:	e79a      	b.n	80184a6 <_scanf_float+0xbe>
 8018570:	6821      	ldr	r1, [r4, #0]
 8018572:	0608      	lsls	r0, r1, #24
 8018574:	f57f af70 	bpl.w	8018458 <_scanf_float+0x70>
 8018578:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801857c:	e7f4      	b.n	8018568 <_scanf_float+0x180>
 801857e:	2a02      	cmp	r2, #2
 8018580:	d047      	beq.n	8018612 <_scanf_float+0x22a>
 8018582:	f1bb 0f01 	cmp.w	fp, #1
 8018586:	d003      	beq.n	8018590 <_scanf_float+0x1a8>
 8018588:	f1bb 0f04 	cmp.w	fp, #4
 801858c:	f47f af64 	bne.w	8018458 <_scanf_float+0x70>
 8018590:	f10b 0b01 	add.w	fp, fp, #1
 8018594:	fa5f fb8b 	uxtb.w	fp, fp
 8018598:	e7e7      	b.n	801856a <_scanf_float+0x182>
 801859a:	f1bb 0f03 	cmp.w	fp, #3
 801859e:	d0f7      	beq.n	8018590 <_scanf_float+0x1a8>
 80185a0:	f1bb 0f05 	cmp.w	fp, #5
 80185a4:	e7f2      	b.n	801858c <_scanf_float+0x1a4>
 80185a6:	f1bb 0f02 	cmp.w	fp, #2
 80185aa:	f47f af55 	bne.w	8018458 <_scanf_float+0x70>
 80185ae:	f04f 0b03 	mov.w	fp, #3
 80185b2:	e7da      	b.n	801856a <_scanf_float+0x182>
 80185b4:	f1bb 0f06 	cmp.w	fp, #6
 80185b8:	f47f af4e 	bne.w	8018458 <_scanf_float+0x70>
 80185bc:	f04f 0b07 	mov.w	fp, #7
 80185c0:	e7d3      	b.n	801856a <_scanf_float+0x182>
 80185c2:	6821      	ldr	r1, [r4, #0]
 80185c4:	0588      	lsls	r0, r1, #22
 80185c6:	f57f af47 	bpl.w	8018458 <_scanf_float+0x70>
 80185ca:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80185ce:	6021      	str	r1, [r4, #0]
 80185d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80185d4:	e7c9      	b.n	801856a <_scanf_float+0x182>
 80185d6:	6821      	ldr	r1, [r4, #0]
 80185d8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80185dc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80185e0:	d006      	beq.n	80185f0 <_scanf_float+0x208>
 80185e2:	0548      	lsls	r0, r1, #21
 80185e4:	f57f af38 	bpl.w	8018458 <_scanf_float+0x70>
 80185e8:	f1b9 0f00 	cmp.w	r9, #0
 80185ec:	f43f af3b 	beq.w	8018466 <_scanf_float+0x7e>
 80185f0:	0588      	lsls	r0, r1, #22
 80185f2:	bf58      	it	pl
 80185f4:	9802      	ldrpl	r0, [sp, #8]
 80185f6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80185fa:	bf58      	it	pl
 80185fc:	eba9 0000 	subpl.w	r0, r9, r0
 8018600:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8018604:	bf58      	it	pl
 8018606:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801860a:	6021      	str	r1, [r4, #0]
 801860c:	f04f 0900 	mov.w	r9, #0
 8018610:	e7ab      	b.n	801856a <_scanf_float+0x182>
 8018612:	2203      	movs	r2, #3
 8018614:	e7a9      	b.n	801856a <_scanf_float+0x182>
 8018616:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801861a:	9205      	str	r2, [sp, #20]
 801861c:	4631      	mov	r1, r6
 801861e:	4638      	mov	r0, r7
 8018620:	4798      	blx	r3
 8018622:	9a05      	ldr	r2, [sp, #20]
 8018624:	2800      	cmp	r0, #0
 8018626:	f43f af04 	beq.w	8018432 <_scanf_float+0x4a>
 801862a:	e715      	b.n	8018458 <_scanf_float+0x70>
 801862c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018630:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8018634:	4632      	mov	r2, r6
 8018636:	4638      	mov	r0, r7
 8018638:	4798      	blx	r3
 801863a:	6923      	ldr	r3, [r4, #16]
 801863c:	3b01      	subs	r3, #1
 801863e:	6123      	str	r3, [r4, #16]
 8018640:	e715      	b.n	801846e <_scanf_float+0x86>
 8018642:	f10b 33ff 	add.w	r3, fp, #4294967295
 8018646:	2b06      	cmp	r3, #6
 8018648:	d80a      	bhi.n	8018660 <_scanf_float+0x278>
 801864a:	f1bb 0f02 	cmp.w	fp, #2
 801864e:	d968      	bls.n	8018722 <_scanf_float+0x33a>
 8018650:	f1ab 0b03 	sub.w	fp, fp, #3
 8018654:	fa5f fb8b 	uxtb.w	fp, fp
 8018658:	eba5 0b0b 	sub.w	fp, r5, fp
 801865c:	455d      	cmp	r5, fp
 801865e:	d14b      	bne.n	80186f8 <_scanf_float+0x310>
 8018660:	6823      	ldr	r3, [r4, #0]
 8018662:	05da      	lsls	r2, r3, #23
 8018664:	d51f      	bpl.n	80186a6 <_scanf_float+0x2be>
 8018666:	055b      	lsls	r3, r3, #21
 8018668:	d468      	bmi.n	801873c <_scanf_float+0x354>
 801866a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801866e:	6923      	ldr	r3, [r4, #16]
 8018670:	2965      	cmp	r1, #101	; 0x65
 8018672:	f103 33ff 	add.w	r3, r3, #4294967295
 8018676:	f105 3bff 	add.w	fp, r5, #4294967295
 801867a:	6123      	str	r3, [r4, #16]
 801867c:	d00d      	beq.n	801869a <_scanf_float+0x2b2>
 801867e:	2945      	cmp	r1, #69	; 0x45
 8018680:	d00b      	beq.n	801869a <_scanf_float+0x2b2>
 8018682:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018686:	4632      	mov	r2, r6
 8018688:	4638      	mov	r0, r7
 801868a:	4798      	blx	r3
 801868c:	6923      	ldr	r3, [r4, #16]
 801868e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8018692:	3b01      	subs	r3, #1
 8018694:	f1a5 0b02 	sub.w	fp, r5, #2
 8018698:	6123      	str	r3, [r4, #16]
 801869a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801869e:	4632      	mov	r2, r6
 80186a0:	4638      	mov	r0, r7
 80186a2:	4798      	blx	r3
 80186a4:	465d      	mov	r5, fp
 80186a6:	6826      	ldr	r6, [r4, #0]
 80186a8:	f016 0610 	ands.w	r6, r6, #16
 80186ac:	d17a      	bne.n	80187a4 <_scanf_float+0x3bc>
 80186ae:	702e      	strb	r6, [r5, #0]
 80186b0:	6823      	ldr	r3, [r4, #0]
 80186b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80186b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80186ba:	d142      	bne.n	8018742 <_scanf_float+0x35a>
 80186bc:	9b02      	ldr	r3, [sp, #8]
 80186be:	eba9 0303 	sub.w	r3, r9, r3
 80186c2:	425a      	negs	r2, r3
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d149      	bne.n	801875c <_scanf_float+0x374>
 80186c8:	2200      	movs	r2, #0
 80186ca:	4641      	mov	r1, r8
 80186cc:	4638      	mov	r0, r7
 80186ce:	f001 fa77 	bl	8019bc0 <_strtod_r>
 80186d2:	6825      	ldr	r5, [r4, #0]
 80186d4:	f8da 3000 	ldr.w	r3, [sl]
 80186d8:	f015 0f02 	tst.w	r5, #2
 80186dc:	f103 0204 	add.w	r2, r3, #4
 80186e0:	ec59 8b10 	vmov	r8, r9, d0
 80186e4:	f8ca 2000 	str.w	r2, [sl]
 80186e8:	d043      	beq.n	8018772 <_scanf_float+0x38a>
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	e9c3 8900 	strd	r8, r9, [r3]
 80186f0:	68e3      	ldr	r3, [r4, #12]
 80186f2:	3301      	adds	r3, #1
 80186f4:	60e3      	str	r3, [r4, #12]
 80186f6:	e6be      	b.n	8018476 <_scanf_float+0x8e>
 80186f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80186fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8018700:	4632      	mov	r2, r6
 8018702:	4638      	mov	r0, r7
 8018704:	4798      	blx	r3
 8018706:	6923      	ldr	r3, [r4, #16]
 8018708:	3b01      	subs	r3, #1
 801870a:	6123      	str	r3, [r4, #16]
 801870c:	e7a6      	b.n	801865c <_scanf_float+0x274>
 801870e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018712:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8018716:	4632      	mov	r2, r6
 8018718:	4638      	mov	r0, r7
 801871a:	4798      	blx	r3
 801871c:	6923      	ldr	r3, [r4, #16]
 801871e:	3b01      	subs	r3, #1
 8018720:	6123      	str	r3, [r4, #16]
 8018722:	4545      	cmp	r5, r8
 8018724:	d8f3      	bhi.n	801870e <_scanf_float+0x326>
 8018726:	e6a5      	b.n	8018474 <_scanf_float+0x8c>
 8018728:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801872c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8018730:	4632      	mov	r2, r6
 8018732:	4638      	mov	r0, r7
 8018734:	4798      	blx	r3
 8018736:	6923      	ldr	r3, [r4, #16]
 8018738:	3b01      	subs	r3, #1
 801873a:	6123      	str	r3, [r4, #16]
 801873c:	4545      	cmp	r5, r8
 801873e:	d8f3      	bhi.n	8018728 <_scanf_float+0x340>
 8018740:	e698      	b.n	8018474 <_scanf_float+0x8c>
 8018742:	9b03      	ldr	r3, [sp, #12]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d0bf      	beq.n	80186c8 <_scanf_float+0x2e0>
 8018748:	9904      	ldr	r1, [sp, #16]
 801874a:	230a      	movs	r3, #10
 801874c:	4632      	mov	r2, r6
 801874e:	3101      	adds	r1, #1
 8018750:	4638      	mov	r0, r7
 8018752:	f001 fac1 	bl	8019cd8 <_strtol_r>
 8018756:	9b03      	ldr	r3, [sp, #12]
 8018758:	9d04      	ldr	r5, [sp, #16]
 801875a:	1ac2      	subs	r2, r0, r3
 801875c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8018760:	429d      	cmp	r5, r3
 8018762:	bf28      	it	cs
 8018764:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8018768:	490f      	ldr	r1, [pc, #60]	; (80187a8 <_scanf_float+0x3c0>)
 801876a:	4628      	mov	r0, r5
 801876c:	f000 fbb2 	bl	8018ed4 <siprintf>
 8018770:	e7aa      	b.n	80186c8 <_scanf_float+0x2e0>
 8018772:	f015 0504 	ands.w	r5, r5, #4
 8018776:	d1b8      	bne.n	80186ea <_scanf_float+0x302>
 8018778:	681f      	ldr	r7, [r3, #0]
 801877a:	ee10 2a10 	vmov	r2, s0
 801877e:	464b      	mov	r3, r9
 8018780:	ee10 0a10 	vmov	r0, s0
 8018784:	4649      	mov	r1, r9
 8018786:	f7f0 f909 	bl	800899c <__aeabi_dcmpun>
 801878a:	b128      	cbz	r0, 8018798 <_scanf_float+0x3b0>
 801878c:	4628      	mov	r0, r5
 801878e:	f000 fb9b 	bl	8018ec8 <nanf>
 8018792:	ed87 0a00 	vstr	s0, [r7]
 8018796:	e7ab      	b.n	80186f0 <_scanf_float+0x308>
 8018798:	4640      	mov	r0, r8
 801879a:	4649      	mov	r1, r9
 801879c:	f7f0 f95c 	bl	8008a58 <__aeabi_d2f>
 80187a0:	6038      	str	r0, [r7, #0]
 80187a2:	e7a5      	b.n	80186f0 <_scanf_float+0x308>
 80187a4:	2600      	movs	r6, #0
 80187a6:	e666      	b.n	8018476 <_scanf_float+0x8e>
 80187a8:	0801c787 	.word	0x0801c787

080187ac <_scanf_chars>:
 80187ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187b0:	4615      	mov	r5, r2
 80187b2:	688a      	ldr	r2, [r1, #8]
 80187b4:	4680      	mov	r8, r0
 80187b6:	460c      	mov	r4, r1
 80187b8:	b932      	cbnz	r2, 80187c8 <_scanf_chars+0x1c>
 80187ba:	698a      	ldr	r2, [r1, #24]
 80187bc:	2a00      	cmp	r2, #0
 80187be:	bf14      	ite	ne
 80187c0:	f04f 32ff 	movne.w	r2, #4294967295
 80187c4:	2201      	moveq	r2, #1
 80187c6:	608a      	str	r2, [r1, #8]
 80187c8:	6822      	ldr	r2, [r4, #0]
 80187ca:	06d1      	lsls	r1, r2, #27
 80187cc:	bf5f      	itttt	pl
 80187ce:	681a      	ldrpl	r2, [r3, #0]
 80187d0:	1d11      	addpl	r1, r2, #4
 80187d2:	6019      	strpl	r1, [r3, #0]
 80187d4:	6817      	ldrpl	r7, [r2, #0]
 80187d6:	2600      	movs	r6, #0
 80187d8:	69a3      	ldr	r3, [r4, #24]
 80187da:	b1db      	cbz	r3, 8018814 <_scanf_chars+0x68>
 80187dc:	2b01      	cmp	r3, #1
 80187de:	d107      	bne.n	80187f0 <_scanf_chars+0x44>
 80187e0:	682b      	ldr	r3, [r5, #0]
 80187e2:	6962      	ldr	r2, [r4, #20]
 80187e4:	781b      	ldrb	r3, [r3, #0]
 80187e6:	5cd3      	ldrb	r3, [r2, r3]
 80187e8:	b9a3      	cbnz	r3, 8018814 <_scanf_chars+0x68>
 80187ea:	2e00      	cmp	r6, #0
 80187ec:	d132      	bne.n	8018854 <_scanf_chars+0xa8>
 80187ee:	e006      	b.n	80187fe <_scanf_chars+0x52>
 80187f0:	2b02      	cmp	r3, #2
 80187f2:	d007      	beq.n	8018804 <_scanf_chars+0x58>
 80187f4:	2e00      	cmp	r6, #0
 80187f6:	d12d      	bne.n	8018854 <_scanf_chars+0xa8>
 80187f8:	69a3      	ldr	r3, [r4, #24]
 80187fa:	2b01      	cmp	r3, #1
 80187fc:	d12a      	bne.n	8018854 <_scanf_chars+0xa8>
 80187fe:	2001      	movs	r0, #1
 8018800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018804:	f002 fe24 	bl	801b450 <__locale_ctype_ptr>
 8018808:	682b      	ldr	r3, [r5, #0]
 801880a:	781b      	ldrb	r3, [r3, #0]
 801880c:	4418      	add	r0, r3
 801880e:	7843      	ldrb	r3, [r0, #1]
 8018810:	071b      	lsls	r3, r3, #28
 8018812:	d4ef      	bmi.n	80187f4 <_scanf_chars+0x48>
 8018814:	6823      	ldr	r3, [r4, #0]
 8018816:	06da      	lsls	r2, r3, #27
 8018818:	bf5e      	ittt	pl
 801881a:	682b      	ldrpl	r3, [r5, #0]
 801881c:	781b      	ldrbpl	r3, [r3, #0]
 801881e:	703b      	strbpl	r3, [r7, #0]
 8018820:	682a      	ldr	r2, [r5, #0]
 8018822:	686b      	ldr	r3, [r5, #4]
 8018824:	f102 0201 	add.w	r2, r2, #1
 8018828:	602a      	str	r2, [r5, #0]
 801882a:	68a2      	ldr	r2, [r4, #8]
 801882c:	f103 33ff 	add.w	r3, r3, #4294967295
 8018830:	f102 32ff 	add.w	r2, r2, #4294967295
 8018834:	606b      	str	r3, [r5, #4]
 8018836:	f106 0601 	add.w	r6, r6, #1
 801883a:	bf58      	it	pl
 801883c:	3701      	addpl	r7, #1
 801883e:	60a2      	str	r2, [r4, #8]
 8018840:	b142      	cbz	r2, 8018854 <_scanf_chars+0xa8>
 8018842:	2b00      	cmp	r3, #0
 8018844:	dcc8      	bgt.n	80187d8 <_scanf_chars+0x2c>
 8018846:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801884a:	4629      	mov	r1, r5
 801884c:	4640      	mov	r0, r8
 801884e:	4798      	blx	r3
 8018850:	2800      	cmp	r0, #0
 8018852:	d0c1      	beq.n	80187d8 <_scanf_chars+0x2c>
 8018854:	6823      	ldr	r3, [r4, #0]
 8018856:	f013 0310 	ands.w	r3, r3, #16
 801885a:	d105      	bne.n	8018868 <_scanf_chars+0xbc>
 801885c:	68e2      	ldr	r2, [r4, #12]
 801885e:	3201      	adds	r2, #1
 8018860:	60e2      	str	r2, [r4, #12]
 8018862:	69a2      	ldr	r2, [r4, #24]
 8018864:	b102      	cbz	r2, 8018868 <_scanf_chars+0xbc>
 8018866:	703b      	strb	r3, [r7, #0]
 8018868:	6923      	ldr	r3, [r4, #16]
 801886a:	441e      	add	r6, r3
 801886c:	6126      	str	r6, [r4, #16]
 801886e:	2000      	movs	r0, #0
 8018870:	e7c6      	b.n	8018800 <_scanf_chars+0x54>
	...

08018874 <_scanf_i>:
 8018874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018878:	469a      	mov	sl, r3
 801887a:	4b74      	ldr	r3, [pc, #464]	; (8018a4c <_scanf_i+0x1d8>)
 801887c:	460c      	mov	r4, r1
 801887e:	4683      	mov	fp, r0
 8018880:	4616      	mov	r6, r2
 8018882:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018886:	b087      	sub	sp, #28
 8018888:	ab03      	add	r3, sp, #12
 801888a:	68a7      	ldr	r7, [r4, #8]
 801888c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018890:	4b6f      	ldr	r3, [pc, #444]	; (8018a50 <_scanf_i+0x1dc>)
 8018892:	69a1      	ldr	r1, [r4, #24]
 8018894:	4a6f      	ldr	r2, [pc, #444]	; (8018a54 <_scanf_i+0x1e0>)
 8018896:	2903      	cmp	r1, #3
 8018898:	bf08      	it	eq
 801889a:	461a      	moveq	r2, r3
 801889c:	1e7b      	subs	r3, r7, #1
 801889e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80188a2:	bf84      	itt	hi
 80188a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80188a8:	60a3      	strhi	r3, [r4, #8]
 80188aa:	6823      	ldr	r3, [r4, #0]
 80188ac:	9200      	str	r2, [sp, #0]
 80188ae:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80188b2:	bf88      	it	hi
 80188b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80188b8:	f104 091c 	add.w	r9, r4, #28
 80188bc:	6023      	str	r3, [r4, #0]
 80188be:	bf8c      	ite	hi
 80188c0:	197f      	addhi	r7, r7, r5
 80188c2:	2700      	movls	r7, #0
 80188c4:	464b      	mov	r3, r9
 80188c6:	f04f 0800 	mov.w	r8, #0
 80188ca:	9301      	str	r3, [sp, #4]
 80188cc:	6831      	ldr	r1, [r6, #0]
 80188ce:	ab03      	add	r3, sp, #12
 80188d0:	2202      	movs	r2, #2
 80188d2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80188d6:	7809      	ldrb	r1, [r1, #0]
 80188d8:	f7ef fbba 	bl	8008050 <memchr>
 80188dc:	9b01      	ldr	r3, [sp, #4]
 80188de:	b330      	cbz	r0, 801892e <_scanf_i+0xba>
 80188e0:	f1b8 0f01 	cmp.w	r8, #1
 80188e4:	d15a      	bne.n	801899c <_scanf_i+0x128>
 80188e6:	6862      	ldr	r2, [r4, #4]
 80188e8:	b92a      	cbnz	r2, 80188f6 <_scanf_i+0x82>
 80188ea:	6822      	ldr	r2, [r4, #0]
 80188ec:	2108      	movs	r1, #8
 80188ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80188f2:	6061      	str	r1, [r4, #4]
 80188f4:	6022      	str	r2, [r4, #0]
 80188f6:	6822      	ldr	r2, [r4, #0]
 80188f8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80188fc:	6022      	str	r2, [r4, #0]
 80188fe:	68a2      	ldr	r2, [r4, #8]
 8018900:	1e51      	subs	r1, r2, #1
 8018902:	60a1      	str	r1, [r4, #8]
 8018904:	b19a      	cbz	r2, 801892e <_scanf_i+0xba>
 8018906:	6832      	ldr	r2, [r6, #0]
 8018908:	1c51      	adds	r1, r2, #1
 801890a:	6031      	str	r1, [r6, #0]
 801890c:	7812      	ldrb	r2, [r2, #0]
 801890e:	701a      	strb	r2, [r3, #0]
 8018910:	1c5d      	adds	r5, r3, #1
 8018912:	6873      	ldr	r3, [r6, #4]
 8018914:	3b01      	subs	r3, #1
 8018916:	2b00      	cmp	r3, #0
 8018918:	6073      	str	r3, [r6, #4]
 801891a:	dc07      	bgt.n	801892c <_scanf_i+0xb8>
 801891c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018920:	4631      	mov	r1, r6
 8018922:	4658      	mov	r0, fp
 8018924:	4798      	blx	r3
 8018926:	2800      	cmp	r0, #0
 8018928:	f040 8086 	bne.w	8018a38 <_scanf_i+0x1c4>
 801892c:	462b      	mov	r3, r5
 801892e:	f108 0801 	add.w	r8, r8, #1
 8018932:	f1b8 0f03 	cmp.w	r8, #3
 8018936:	d1c8      	bne.n	80188ca <_scanf_i+0x56>
 8018938:	6862      	ldr	r2, [r4, #4]
 801893a:	b90a      	cbnz	r2, 8018940 <_scanf_i+0xcc>
 801893c:	220a      	movs	r2, #10
 801893e:	6062      	str	r2, [r4, #4]
 8018940:	6862      	ldr	r2, [r4, #4]
 8018942:	4945      	ldr	r1, [pc, #276]	; (8018a58 <_scanf_i+0x1e4>)
 8018944:	6960      	ldr	r0, [r4, #20]
 8018946:	9301      	str	r3, [sp, #4]
 8018948:	1a89      	subs	r1, r1, r2
 801894a:	f000 f9d5 	bl	8018cf8 <__sccl>
 801894e:	9b01      	ldr	r3, [sp, #4]
 8018950:	f04f 0800 	mov.w	r8, #0
 8018954:	461d      	mov	r5, r3
 8018956:	68a3      	ldr	r3, [r4, #8]
 8018958:	6822      	ldr	r2, [r4, #0]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d03a      	beq.n	80189d4 <_scanf_i+0x160>
 801895e:	6831      	ldr	r1, [r6, #0]
 8018960:	6960      	ldr	r0, [r4, #20]
 8018962:	f891 c000 	ldrb.w	ip, [r1]
 8018966:	f810 000c 	ldrb.w	r0, [r0, ip]
 801896a:	2800      	cmp	r0, #0
 801896c:	d032      	beq.n	80189d4 <_scanf_i+0x160>
 801896e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018972:	d121      	bne.n	80189b8 <_scanf_i+0x144>
 8018974:	0510      	lsls	r0, r2, #20
 8018976:	d51f      	bpl.n	80189b8 <_scanf_i+0x144>
 8018978:	f108 0801 	add.w	r8, r8, #1
 801897c:	b117      	cbz	r7, 8018984 <_scanf_i+0x110>
 801897e:	3301      	adds	r3, #1
 8018980:	3f01      	subs	r7, #1
 8018982:	60a3      	str	r3, [r4, #8]
 8018984:	6873      	ldr	r3, [r6, #4]
 8018986:	3b01      	subs	r3, #1
 8018988:	2b00      	cmp	r3, #0
 801898a:	6073      	str	r3, [r6, #4]
 801898c:	dd1b      	ble.n	80189c6 <_scanf_i+0x152>
 801898e:	6833      	ldr	r3, [r6, #0]
 8018990:	3301      	adds	r3, #1
 8018992:	6033      	str	r3, [r6, #0]
 8018994:	68a3      	ldr	r3, [r4, #8]
 8018996:	3b01      	subs	r3, #1
 8018998:	60a3      	str	r3, [r4, #8]
 801899a:	e7dc      	b.n	8018956 <_scanf_i+0xe2>
 801899c:	f1b8 0f02 	cmp.w	r8, #2
 80189a0:	d1ad      	bne.n	80188fe <_scanf_i+0x8a>
 80189a2:	6822      	ldr	r2, [r4, #0]
 80189a4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80189a8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80189ac:	d1bf      	bne.n	801892e <_scanf_i+0xba>
 80189ae:	2110      	movs	r1, #16
 80189b0:	6061      	str	r1, [r4, #4]
 80189b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80189b6:	e7a1      	b.n	80188fc <_scanf_i+0x88>
 80189b8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80189bc:	6022      	str	r2, [r4, #0]
 80189be:	780b      	ldrb	r3, [r1, #0]
 80189c0:	702b      	strb	r3, [r5, #0]
 80189c2:	3501      	adds	r5, #1
 80189c4:	e7de      	b.n	8018984 <_scanf_i+0x110>
 80189c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80189ca:	4631      	mov	r1, r6
 80189cc:	4658      	mov	r0, fp
 80189ce:	4798      	blx	r3
 80189d0:	2800      	cmp	r0, #0
 80189d2:	d0df      	beq.n	8018994 <_scanf_i+0x120>
 80189d4:	6823      	ldr	r3, [r4, #0]
 80189d6:	05d9      	lsls	r1, r3, #23
 80189d8:	d50c      	bpl.n	80189f4 <_scanf_i+0x180>
 80189da:	454d      	cmp	r5, r9
 80189dc:	d908      	bls.n	80189f0 <_scanf_i+0x17c>
 80189de:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80189e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80189e6:	4632      	mov	r2, r6
 80189e8:	4658      	mov	r0, fp
 80189ea:	4798      	blx	r3
 80189ec:	1e6f      	subs	r7, r5, #1
 80189ee:	463d      	mov	r5, r7
 80189f0:	454d      	cmp	r5, r9
 80189f2:	d029      	beq.n	8018a48 <_scanf_i+0x1d4>
 80189f4:	6822      	ldr	r2, [r4, #0]
 80189f6:	f012 0210 	ands.w	r2, r2, #16
 80189fa:	d113      	bne.n	8018a24 <_scanf_i+0x1b0>
 80189fc:	702a      	strb	r2, [r5, #0]
 80189fe:	6863      	ldr	r3, [r4, #4]
 8018a00:	9e00      	ldr	r6, [sp, #0]
 8018a02:	4649      	mov	r1, r9
 8018a04:	4658      	mov	r0, fp
 8018a06:	47b0      	blx	r6
 8018a08:	f8da 3000 	ldr.w	r3, [sl]
 8018a0c:	6821      	ldr	r1, [r4, #0]
 8018a0e:	1d1a      	adds	r2, r3, #4
 8018a10:	f8ca 2000 	str.w	r2, [sl]
 8018a14:	f011 0f20 	tst.w	r1, #32
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	d010      	beq.n	8018a3e <_scanf_i+0x1ca>
 8018a1c:	6018      	str	r0, [r3, #0]
 8018a1e:	68e3      	ldr	r3, [r4, #12]
 8018a20:	3301      	adds	r3, #1
 8018a22:	60e3      	str	r3, [r4, #12]
 8018a24:	eba5 0509 	sub.w	r5, r5, r9
 8018a28:	44a8      	add	r8, r5
 8018a2a:	6925      	ldr	r5, [r4, #16]
 8018a2c:	4445      	add	r5, r8
 8018a2e:	6125      	str	r5, [r4, #16]
 8018a30:	2000      	movs	r0, #0
 8018a32:	b007      	add	sp, #28
 8018a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a38:	f04f 0800 	mov.w	r8, #0
 8018a3c:	e7ca      	b.n	80189d4 <_scanf_i+0x160>
 8018a3e:	07ca      	lsls	r2, r1, #31
 8018a40:	bf4c      	ite	mi
 8018a42:	8018      	strhmi	r0, [r3, #0]
 8018a44:	6018      	strpl	r0, [r3, #0]
 8018a46:	e7ea      	b.n	8018a1e <_scanf_i+0x1aa>
 8018a48:	2001      	movs	r0, #1
 8018a4a:	e7f2      	b.n	8018a32 <_scanf_i+0x1be>
 8018a4c:	0801c6ac 	.word	0x0801c6ac
 8018a50:	08019cd9 	.word	0x08019cd9
 8018a54:	08019df1 	.word	0x08019df1
 8018a58:	0801c79c 	.word	0x0801c79c

08018a5c <iprintf>:
 8018a5c:	b40f      	push	{r0, r1, r2, r3}
 8018a5e:	4b0a      	ldr	r3, [pc, #40]	; (8018a88 <iprintf+0x2c>)
 8018a60:	b513      	push	{r0, r1, r4, lr}
 8018a62:	681c      	ldr	r4, [r3, #0]
 8018a64:	b124      	cbz	r4, 8018a70 <iprintf+0x14>
 8018a66:	69a3      	ldr	r3, [r4, #24]
 8018a68:	b913      	cbnz	r3, 8018a70 <iprintf+0x14>
 8018a6a:	4620      	mov	r0, r4
 8018a6c:	f7fe fbbe 	bl	80171ec <__sinit>
 8018a70:	ab05      	add	r3, sp, #20
 8018a72:	9a04      	ldr	r2, [sp, #16]
 8018a74:	68a1      	ldr	r1, [r4, #8]
 8018a76:	9301      	str	r3, [sp, #4]
 8018a78:	4620      	mov	r0, r4
 8018a7a:	f7fe fdcb 	bl	8017614 <_vfiprintf_r>
 8018a7e:	b002      	add	sp, #8
 8018a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a84:	b004      	add	sp, #16
 8018a86:	4770      	bx	lr
 8018a88:	2000002c 	.word	0x2000002c

08018a8c <putchar>:
 8018a8c:	b538      	push	{r3, r4, r5, lr}
 8018a8e:	4b08      	ldr	r3, [pc, #32]	; (8018ab0 <putchar+0x24>)
 8018a90:	681c      	ldr	r4, [r3, #0]
 8018a92:	4605      	mov	r5, r0
 8018a94:	b124      	cbz	r4, 8018aa0 <putchar+0x14>
 8018a96:	69a3      	ldr	r3, [r4, #24]
 8018a98:	b913      	cbnz	r3, 8018aa0 <putchar+0x14>
 8018a9a:	4620      	mov	r0, r4
 8018a9c:	f7fe fba6 	bl	80171ec <__sinit>
 8018aa0:	68a2      	ldr	r2, [r4, #8]
 8018aa2:	4629      	mov	r1, r5
 8018aa4:	4620      	mov	r0, r4
 8018aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018aaa:	f003 babb 	b.w	801c024 <_putc_r>
 8018aae:	bf00      	nop
 8018ab0:	2000002c 	.word	0x2000002c

08018ab4 <_puts_r>:
 8018ab4:	b570      	push	{r4, r5, r6, lr}
 8018ab6:	460e      	mov	r6, r1
 8018ab8:	4605      	mov	r5, r0
 8018aba:	b118      	cbz	r0, 8018ac4 <_puts_r+0x10>
 8018abc:	6983      	ldr	r3, [r0, #24]
 8018abe:	b90b      	cbnz	r3, 8018ac4 <_puts_r+0x10>
 8018ac0:	f7fe fb94 	bl	80171ec <__sinit>
 8018ac4:	69ab      	ldr	r3, [r5, #24]
 8018ac6:	68ac      	ldr	r4, [r5, #8]
 8018ac8:	b913      	cbnz	r3, 8018ad0 <_puts_r+0x1c>
 8018aca:	4628      	mov	r0, r5
 8018acc:	f7fe fb8e 	bl	80171ec <__sinit>
 8018ad0:	4b23      	ldr	r3, [pc, #140]	; (8018b60 <_puts_r+0xac>)
 8018ad2:	429c      	cmp	r4, r3
 8018ad4:	d117      	bne.n	8018b06 <_puts_r+0x52>
 8018ad6:	686c      	ldr	r4, [r5, #4]
 8018ad8:	89a3      	ldrh	r3, [r4, #12]
 8018ada:	071b      	lsls	r3, r3, #28
 8018adc:	d51d      	bpl.n	8018b1a <_puts_r+0x66>
 8018ade:	6923      	ldr	r3, [r4, #16]
 8018ae0:	b1db      	cbz	r3, 8018b1a <_puts_r+0x66>
 8018ae2:	3e01      	subs	r6, #1
 8018ae4:	68a3      	ldr	r3, [r4, #8]
 8018ae6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018aea:	3b01      	subs	r3, #1
 8018aec:	60a3      	str	r3, [r4, #8]
 8018aee:	b9e9      	cbnz	r1, 8018b2c <_puts_r+0x78>
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	da2e      	bge.n	8018b52 <_puts_r+0x9e>
 8018af4:	4622      	mov	r2, r4
 8018af6:	210a      	movs	r1, #10
 8018af8:	4628      	mov	r0, r5
 8018afa:	f001 fa37 	bl	8019f6c <__swbuf_r>
 8018afe:	3001      	adds	r0, #1
 8018b00:	d011      	beq.n	8018b26 <_puts_r+0x72>
 8018b02:	200a      	movs	r0, #10
 8018b04:	e011      	b.n	8018b2a <_puts_r+0x76>
 8018b06:	4b17      	ldr	r3, [pc, #92]	; (8018b64 <_puts_r+0xb0>)
 8018b08:	429c      	cmp	r4, r3
 8018b0a:	d101      	bne.n	8018b10 <_puts_r+0x5c>
 8018b0c:	68ac      	ldr	r4, [r5, #8]
 8018b0e:	e7e3      	b.n	8018ad8 <_puts_r+0x24>
 8018b10:	4b15      	ldr	r3, [pc, #84]	; (8018b68 <_puts_r+0xb4>)
 8018b12:	429c      	cmp	r4, r3
 8018b14:	bf08      	it	eq
 8018b16:	68ec      	ldreq	r4, [r5, #12]
 8018b18:	e7de      	b.n	8018ad8 <_puts_r+0x24>
 8018b1a:	4621      	mov	r1, r4
 8018b1c:	4628      	mov	r0, r5
 8018b1e:	f001 fa89 	bl	801a034 <__swsetup_r>
 8018b22:	2800      	cmp	r0, #0
 8018b24:	d0dd      	beq.n	8018ae2 <_puts_r+0x2e>
 8018b26:	f04f 30ff 	mov.w	r0, #4294967295
 8018b2a:	bd70      	pop	{r4, r5, r6, pc}
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	da04      	bge.n	8018b3a <_puts_r+0x86>
 8018b30:	69a2      	ldr	r2, [r4, #24]
 8018b32:	429a      	cmp	r2, r3
 8018b34:	dc06      	bgt.n	8018b44 <_puts_r+0x90>
 8018b36:	290a      	cmp	r1, #10
 8018b38:	d004      	beq.n	8018b44 <_puts_r+0x90>
 8018b3a:	6823      	ldr	r3, [r4, #0]
 8018b3c:	1c5a      	adds	r2, r3, #1
 8018b3e:	6022      	str	r2, [r4, #0]
 8018b40:	7019      	strb	r1, [r3, #0]
 8018b42:	e7cf      	b.n	8018ae4 <_puts_r+0x30>
 8018b44:	4622      	mov	r2, r4
 8018b46:	4628      	mov	r0, r5
 8018b48:	f001 fa10 	bl	8019f6c <__swbuf_r>
 8018b4c:	3001      	adds	r0, #1
 8018b4e:	d1c9      	bne.n	8018ae4 <_puts_r+0x30>
 8018b50:	e7e9      	b.n	8018b26 <_puts_r+0x72>
 8018b52:	6823      	ldr	r3, [r4, #0]
 8018b54:	200a      	movs	r0, #10
 8018b56:	1c5a      	adds	r2, r3, #1
 8018b58:	6022      	str	r2, [r4, #0]
 8018b5a:	7018      	strb	r0, [r3, #0]
 8018b5c:	e7e5      	b.n	8018b2a <_puts_r+0x76>
 8018b5e:	bf00      	nop
 8018b60:	0801c700 	.word	0x0801c700
 8018b64:	0801c720 	.word	0x0801c720
 8018b68:	0801c6e0 	.word	0x0801c6e0

08018b6c <puts>:
 8018b6c:	4b02      	ldr	r3, [pc, #8]	; (8018b78 <puts+0xc>)
 8018b6e:	4601      	mov	r1, r0
 8018b70:	6818      	ldr	r0, [r3, #0]
 8018b72:	f7ff bf9f 	b.w	8018ab4 <_puts_r>
 8018b76:	bf00      	nop
 8018b78:	2000002c 	.word	0x2000002c

08018b7c <lflush>:
 8018b7c:	8983      	ldrh	r3, [r0, #12]
 8018b7e:	f003 0309 	and.w	r3, r3, #9
 8018b82:	2b09      	cmp	r3, #9
 8018b84:	d101      	bne.n	8018b8a <lflush+0xe>
 8018b86:	f7fe badf 	b.w	8017148 <fflush>
 8018b8a:	2000      	movs	r0, #0
 8018b8c:	4770      	bx	lr
	...

08018b90 <__srefill_r>:
 8018b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b92:	460c      	mov	r4, r1
 8018b94:	4605      	mov	r5, r0
 8018b96:	b118      	cbz	r0, 8018ba0 <__srefill_r+0x10>
 8018b98:	6983      	ldr	r3, [r0, #24]
 8018b9a:	b90b      	cbnz	r3, 8018ba0 <__srefill_r+0x10>
 8018b9c:	f7fe fb26 	bl	80171ec <__sinit>
 8018ba0:	4b3c      	ldr	r3, [pc, #240]	; (8018c94 <__srefill_r+0x104>)
 8018ba2:	429c      	cmp	r4, r3
 8018ba4:	d10a      	bne.n	8018bbc <__srefill_r+0x2c>
 8018ba6:	686c      	ldr	r4, [r5, #4]
 8018ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018bac:	2300      	movs	r3, #0
 8018bae:	6063      	str	r3, [r4, #4]
 8018bb0:	b293      	uxth	r3, r2
 8018bb2:	069e      	lsls	r6, r3, #26
 8018bb4:	d50c      	bpl.n	8018bd0 <__srefill_r+0x40>
 8018bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8018bba:	e067      	b.n	8018c8c <__srefill_r+0xfc>
 8018bbc:	4b36      	ldr	r3, [pc, #216]	; (8018c98 <__srefill_r+0x108>)
 8018bbe:	429c      	cmp	r4, r3
 8018bc0:	d101      	bne.n	8018bc6 <__srefill_r+0x36>
 8018bc2:	68ac      	ldr	r4, [r5, #8]
 8018bc4:	e7f0      	b.n	8018ba8 <__srefill_r+0x18>
 8018bc6:	4b35      	ldr	r3, [pc, #212]	; (8018c9c <__srefill_r+0x10c>)
 8018bc8:	429c      	cmp	r4, r3
 8018bca:	bf08      	it	eq
 8018bcc:	68ec      	ldreq	r4, [r5, #12]
 8018bce:	e7eb      	b.n	8018ba8 <__srefill_r+0x18>
 8018bd0:	0758      	lsls	r0, r3, #29
 8018bd2:	d449      	bmi.n	8018c68 <__srefill_r+0xd8>
 8018bd4:	06d9      	lsls	r1, r3, #27
 8018bd6:	d405      	bmi.n	8018be4 <__srefill_r+0x54>
 8018bd8:	2309      	movs	r3, #9
 8018bda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018bde:	602b      	str	r3, [r5, #0]
 8018be0:	81a2      	strh	r2, [r4, #12]
 8018be2:	e7e8      	b.n	8018bb6 <__srefill_r+0x26>
 8018be4:	071a      	lsls	r2, r3, #28
 8018be6:	d50b      	bpl.n	8018c00 <__srefill_r+0x70>
 8018be8:	4621      	mov	r1, r4
 8018bea:	4628      	mov	r0, r5
 8018bec:	f7fe fa82 	bl	80170f4 <_fflush_r>
 8018bf0:	2800      	cmp	r0, #0
 8018bf2:	d1e0      	bne.n	8018bb6 <__srefill_r+0x26>
 8018bf4:	89a3      	ldrh	r3, [r4, #12]
 8018bf6:	60a0      	str	r0, [r4, #8]
 8018bf8:	f023 0308 	bic.w	r3, r3, #8
 8018bfc:	81a3      	strh	r3, [r4, #12]
 8018bfe:	61a0      	str	r0, [r4, #24]
 8018c00:	89a3      	ldrh	r3, [r4, #12]
 8018c02:	f043 0304 	orr.w	r3, r3, #4
 8018c06:	81a3      	strh	r3, [r4, #12]
 8018c08:	6923      	ldr	r3, [r4, #16]
 8018c0a:	b91b      	cbnz	r3, 8018c14 <__srefill_r+0x84>
 8018c0c:	4621      	mov	r1, r4
 8018c0e:	4628      	mov	r0, r5
 8018c10:	f7fe fbda 	bl	80173c8 <__smakebuf_r>
 8018c14:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8018c18:	b2be      	uxth	r6, r7
 8018c1a:	07b3      	lsls	r3, r6, #30
 8018c1c:	d00f      	beq.n	8018c3e <__srefill_r+0xae>
 8018c1e:	2301      	movs	r3, #1
 8018c20:	81a3      	strh	r3, [r4, #12]
 8018c22:	4b1f      	ldr	r3, [pc, #124]	; (8018ca0 <__srefill_r+0x110>)
 8018c24:	491f      	ldr	r1, [pc, #124]	; (8018ca4 <__srefill_r+0x114>)
 8018c26:	6818      	ldr	r0, [r3, #0]
 8018c28:	f006 0609 	and.w	r6, r6, #9
 8018c2c:	f7fe fb4a 	bl	80172c4 <_fwalk>
 8018c30:	2e09      	cmp	r6, #9
 8018c32:	81a7      	strh	r7, [r4, #12]
 8018c34:	d103      	bne.n	8018c3e <__srefill_r+0xae>
 8018c36:	4621      	mov	r1, r4
 8018c38:	4628      	mov	r0, r5
 8018c3a:	f7fe f9d5 	bl	8016fe8 <__sflush_r>
 8018c3e:	6922      	ldr	r2, [r4, #16]
 8018c40:	6022      	str	r2, [r4, #0]
 8018c42:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018c44:	6963      	ldr	r3, [r4, #20]
 8018c46:	6a21      	ldr	r1, [r4, #32]
 8018c48:	4628      	mov	r0, r5
 8018c4a:	47b0      	blx	r6
 8018c4c:	2800      	cmp	r0, #0
 8018c4e:	6060      	str	r0, [r4, #4]
 8018c50:	dc1d      	bgt.n	8018c8e <__srefill_r+0xfe>
 8018c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c56:	bf17      	itett	ne
 8018c58:	2200      	movne	r2, #0
 8018c5a:	f043 0320 	orreq.w	r3, r3, #32
 8018c5e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8018c62:	6062      	strne	r2, [r4, #4]
 8018c64:	81a3      	strh	r3, [r4, #12]
 8018c66:	e7a6      	b.n	8018bb6 <__srefill_r+0x26>
 8018c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c6a:	2900      	cmp	r1, #0
 8018c6c:	d0cc      	beq.n	8018c08 <__srefill_r+0x78>
 8018c6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c72:	4299      	cmp	r1, r3
 8018c74:	d002      	beq.n	8018c7c <__srefill_r+0xec>
 8018c76:	4628      	mov	r0, r5
 8018c78:	f7fe fbfa 	bl	8017470 <_free_r>
 8018c7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018c7e:	6063      	str	r3, [r4, #4]
 8018c80:	2000      	movs	r0, #0
 8018c82:	6360      	str	r0, [r4, #52]	; 0x34
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d0bf      	beq.n	8018c08 <__srefill_r+0x78>
 8018c88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018c8a:	6023      	str	r3, [r4, #0]
 8018c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c8e:	2000      	movs	r0, #0
 8018c90:	e7fc      	b.n	8018c8c <__srefill_r+0xfc>
 8018c92:	bf00      	nop
 8018c94:	0801c700 	.word	0x0801c700
 8018c98:	0801c720 	.word	0x0801c720
 8018c9c:	0801c6e0 	.word	0x0801c6e0
 8018ca0:	0801c740 	.word	0x0801c740
 8018ca4:	08018b7d 	.word	0x08018b7d

08018ca8 <_sbrk_r>:
 8018ca8:	b538      	push	{r3, r4, r5, lr}
 8018caa:	4c06      	ldr	r4, [pc, #24]	; (8018cc4 <_sbrk_r+0x1c>)
 8018cac:	2300      	movs	r3, #0
 8018cae:	4605      	mov	r5, r0
 8018cb0:	4608      	mov	r0, r1
 8018cb2:	6023      	str	r3, [r4, #0]
 8018cb4:	f7f7 fdd4 	bl	8010860 <_sbrk>
 8018cb8:	1c43      	adds	r3, r0, #1
 8018cba:	d102      	bne.n	8018cc2 <_sbrk_r+0x1a>
 8018cbc:	6823      	ldr	r3, [r4, #0]
 8018cbe:	b103      	cbz	r3, 8018cc2 <_sbrk_r+0x1a>
 8018cc0:	602b      	str	r3, [r5, #0]
 8018cc2:	bd38      	pop	{r3, r4, r5, pc}
 8018cc4:	20001084 	.word	0x20001084

08018cc8 <iscanf>:
 8018cc8:	b40f      	push	{r0, r1, r2, r3}
 8018cca:	4b0a      	ldr	r3, [pc, #40]	; (8018cf4 <iscanf+0x2c>)
 8018ccc:	b513      	push	{r0, r1, r4, lr}
 8018cce:	681c      	ldr	r4, [r3, #0]
 8018cd0:	b124      	cbz	r4, 8018cdc <iscanf+0x14>
 8018cd2:	69a3      	ldr	r3, [r4, #24]
 8018cd4:	b913      	cbnz	r3, 8018cdc <iscanf+0x14>
 8018cd6:	4620      	mov	r0, r4
 8018cd8:	f7fe fa88 	bl	80171ec <__sinit>
 8018cdc:	ab05      	add	r3, sp, #20
 8018cde:	9a04      	ldr	r2, [sp, #16]
 8018ce0:	6861      	ldr	r1, [r4, #4]
 8018ce2:	9301      	str	r3, [sp, #4]
 8018ce4:	4620      	mov	r0, r4
 8018ce6:	f7ff fb57 	bl	8018398 <_vfiscanf_r>
 8018cea:	b002      	add	sp, #8
 8018cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018cf0:	b004      	add	sp, #16
 8018cf2:	4770      	bx	lr
 8018cf4:	2000002c 	.word	0x2000002c

08018cf8 <__sccl>:
 8018cf8:	b570      	push	{r4, r5, r6, lr}
 8018cfa:	780b      	ldrb	r3, [r1, #0]
 8018cfc:	2b5e      	cmp	r3, #94	; 0x5e
 8018cfe:	bf13      	iteet	ne
 8018d00:	1c4a      	addne	r2, r1, #1
 8018d02:	1c8a      	addeq	r2, r1, #2
 8018d04:	784b      	ldrbeq	r3, [r1, #1]
 8018d06:	2100      	movne	r1, #0
 8018d08:	bf08      	it	eq
 8018d0a:	2101      	moveq	r1, #1
 8018d0c:	1e44      	subs	r4, r0, #1
 8018d0e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8018d12:	f804 1f01 	strb.w	r1, [r4, #1]!
 8018d16:	42ac      	cmp	r4, r5
 8018d18:	d1fb      	bne.n	8018d12 <__sccl+0x1a>
 8018d1a:	b913      	cbnz	r3, 8018d22 <__sccl+0x2a>
 8018d1c:	3a01      	subs	r2, #1
 8018d1e:	4610      	mov	r0, r2
 8018d20:	bd70      	pop	{r4, r5, r6, pc}
 8018d22:	f081 0401 	eor.w	r4, r1, #1
 8018d26:	54c4      	strb	r4, [r0, r3]
 8018d28:	1c51      	adds	r1, r2, #1
 8018d2a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8018d2e:	2d2d      	cmp	r5, #45	; 0x2d
 8018d30:	f101 36ff 	add.w	r6, r1, #4294967295
 8018d34:	460a      	mov	r2, r1
 8018d36:	d006      	beq.n	8018d46 <__sccl+0x4e>
 8018d38:	2d5d      	cmp	r5, #93	; 0x5d
 8018d3a:	d0f0      	beq.n	8018d1e <__sccl+0x26>
 8018d3c:	b90d      	cbnz	r5, 8018d42 <__sccl+0x4a>
 8018d3e:	4632      	mov	r2, r6
 8018d40:	e7ed      	b.n	8018d1e <__sccl+0x26>
 8018d42:	462b      	mov	r3, r5
 8018d44:	e7ef      	b.n	8018d26 <__sccl+0x2e>
 8018d46:	780e      	ldrb	r6, [r1, #0]
 8018d48:	2e5d      	cmp	r6, #93	; 0x5d
 8018d4a:	d0fa      	beq.n	8018d42 <__sccl+0x4a>
 8018d4c:	42b3      	cmp	r3, r6
 8018d4e:	dcf8      	bgt.n	8018d42 <__sccl+0x4a>
 8018d50:	3301      	adds	r3, #1
 8018d52:	429e      	cmp	r6, r3
 8018d54:	54c4      	strb	r4, [r0, r3]
 8018d56:	dcfb      	bgt.n	8018d50 <__sccl+0x58>
 8018d58:	3102      	adds	r1, #2
 8018d5a:	e7e6      	b.n	8018d2a <__sccl+0x32>

08018d5c <setbuf>:
 8018d5c:	2900      	cmp	r1, #0
 8018d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018d62:	bf0c      	ite	eq
 8018d64:	2202      	moveq	r2, #2
 8018d66:	2200      	movne	r2, #0
 8018d68:	f000 b800 	b.w	8018d6c <setvbuf>

08018d6c <setvbuf>:
 8018d6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018d70:	461d      	mov	r5, r3
 8018d72:	4b51      	ldr	r3, [pc, #324]	; (8018eb8 <setvbuf+0x14c>)
 8018d74:	681e      	ldr	r6, [r3, #0]
 8018d76:	4604      	mov	r4, r0
 8018d78:	460f      	mov	r7, r1
 8018d7a:	4690      	mov	r8, r2
 8018d7c:	b126      	cbz	r6, 8018d88 <setvbuf+0x1c>
 8018d7e:	69b3      	ldr	r3, [r6, #24]
 8018d80:	b913      	cbnz	r3, 8018d88 <setvbuf+0x1c>
 8018d82:	4630      	mov	r0, r6
 8018d84:	f7fe fa32 	bl	80171ec <__sinit>
 8018d88:	4b4c      	ldr	r3, [pc, #304]	; (8018ebc <setvbuf+0x150>)
 8018d8a:	429c      	cmp	r4, r3
 8018d8c:	d152      	bne.n	8018e34 <setvbuf+0xc8>
 8018d8e:	6874      	ldr	r4, [r6, #4]
 8018d90:	f1b8 0f02 	cmp.w	r8, #2
 8018d94:	d006      	beq.n	8018da4 <setvbuf+0x38>
 8018d96:	f1b8 0f01 	cmp.w	r8, #1
 8018d9a:	f200 8089 	bhi.w	8018eb0 <setvbuf+0x144>
 8018d9e:	2d00      	cmp	r5, #0
 8018da0:	f2c0 8086 	blt.w	8018eb0 <setvbuf+0x144>
 8018da4:	4621      	mov	r1, r4
 8018da6:	4630      	mov	r0, r6
 8018da8:	f7fe f9a4 	bl	80170f4 <_fflush_r>
 8018dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018dae:	b141      	cbz	r1, 8018dc2 <setvbuf+0x56>
 8018db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018db4:	4299      	cmp	r1, r3
 8018db6:	d002      	beq.n	8018dbe <setvbuf+0x52>
 8018db8:	4630      	mov	r0, r6
 8018dba:	f7fe fb59 	bl	8017470 <_free_r>
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	61a3      	str	r3, [r4, #24]
 8018dc6:	6063      	str	r3, [r4, #4]
 8018dc8:	89a3      	ldrh	r3, [r4, #12]
 8018dca:	061b      	lsls	r3, r3, #24
 8018dcc:	d503      	bpl.n	8018dd6 <setvbuf+0x6a>
 8018dce:	6921      	ldr	r1, [r4, #16]
 8018dd0:	4630      	mov	r0, r6
 8018dd2:	f7fe fb4d 	bl	8017470 <_free_r>
 8018dd6:	89a3      	ldrh	r3, [r4, #12]
 8018dd8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8018ddc:	f023 0303 	bic.w	r3, r3, #3
 8018de0:	f1b8 0f02 	cmp.w	r8, #2
 8018de4:	81a3      	strh	r3, [r4, #12]
 8018de6:	d05d      	beq.n	8018ea4 <setvbuf+0x138>
 8018de8:	ab01      	add	r3, sp, #4
 8018dea:	466a      	mov	r2, sp
 8018dec:	4621      	mov	r1, r4
 8018dee:	4630      	mov	r0, r6
 8018df0:	f7fe fac6 	bl	8017380 <__swhatbuf_r>
 8018df4:	89a3      	ldrh	r3, [r4, #12]
 8018df6:	4318      	orrs	r0, r3
 8018df8:	81a0      	strh	r0, [r4, #12]
 8018dfa:	bb2d      	cbnz	r5, 8018e48 <setvbuf+0xdc>
 8018dfc:	9d00      	ldr	r5, [sp, #0]
 8018dfe:	4628      	mov	r0, r5
 8018e00:	f002 fb56 	bl	801b4b0 <malloc>
 8018e04:	4607      	mov	r7, r0
 8018e06:	2800      	cmp	r0, #0
 8018e08:	d14e      	bne.n	8018ea8 <setvbuf+0x13c>
 8018e0a:	f8dd 9000 	ldr.w	r9, [sp]
 8018e0e:	45a9      	cmp	r9, r5
 8018e10:	d13c      	bne.n	8018e8c <setvbuf+0x120>
 8018e12:	f04f 30ff 	mov.w	r0, #4294967295
 8018e16:	89a3      	ldrh	r3, [r4, #12]
 8018e18:	f043 0302 	orr.w	r3, r3, #2
 8018e1c:	81a3      	strh	r3, [r4, #12]
 8018e1e:	2300      	movs	r3, #0
 8018e20:	60a3      	str	r3, [r4, #8]
 8018e22:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018e26:	6023      	str	r3, [r4, #0]
 8018e28:	6123      	str	r3, [r4, #16]
 8018e2a:	2301      	movs	r3, #1
 8018e2c:	6163      	str	r3, [r4, #20]
 8018e2e:	b003      	add	sp, #12
 8018e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e34:	4b22      	ldr	r3, [pc, #136]	; (8018ec0 <setvbuf+0x154>)
 8018e36:	429c      	cmp	r4, r3
 8018e38:	d101      	bne.n	8018e3e <setvbuf+0xd2>
 8018e3a:	68b4      	ldr	r4, [r6, #8]
 8018e3c:	e7a8      	b.n	8018d90 <setvbuf+0x24>
 8018e3e:	4b21      	ldr	r3, [pc, #132]	; (8018ec4 <setvbuf+0x158>)
 8018e40:	429c      	cmp	r4, r3
 8018e42:	bf08      	it	eq
 8018e44:	68f4      	ldreq	r4, [r6, #12]
 8018e46:	e7a3      	b.n	8018d90 <setvbuf+0x24>
 8018e48:	2f00      	cmp	r7, #0
 8018e4a:	d0d8      	beq.n	8018dfe <setvbuf+0x92>
 8018e4c:	69b3      	ldr	r3, [r6, #24]
 8018e4e:	b913      	cbnz	r3, 8018e56 <setvbuf+0xea>
 8018e50:	4630      	mov	r0, r6
 8018e52:	f7fe f9cb 	bl	80171ec <__sinit>
 8018e56:	f1b8 0f01 	cmp.w	r8, #1
 8018e5a:	bf08      	it	eq
 8018e5c:	89a3      	ldrheq	r3, [r4, #12]
 8018e5e:	6027      	str	r7, [r4, #0]
 8018e60:	bf04      	itt	eq
 8018e62:	f043 0301 	orreq.w	r3, r3, #1
 8018e66:	81a3      	strheq	r3, [r4, #12]
 8018e68:	89a3      	ldrh	r3, [r4, #12]
 8018e6a:	f013 0008 	ands.w	r0, r3, #8
 8018e6e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8018e72:	d01b      	beq.n	8018eac <setvbuf+0x140>
 8018e74:	f013 0001 	ands.w	r0, r3, #1
 8018e78:	bf18      	it	ne
 8018e7a:	426d      	negne	r5, r5
 8018e7c:	f04f 0300 	mov.w	r3, #0
 8018e80:	bf1d      	ittte	ne
 8018e82:	60a3      	strne	r3, [r4, #8]
 8018e84:	61a5      	strne	r5, [r4, #24]
 8018e86:	4618      	movne	r0, r3
 8018e88:	60a5      	streq	r5, [r4, #8]
 8018e8a:	e7d0      	b.n	8018e2e <setvbuf+0xc2>
 8018e8c:	4648      	mov	r0, r9
 8018e8e:	f002 fb0f 	bl	801b4b0 <malloc>
 8018e92:	4607      	mov	r7, r0
 8018e94:	2800      	cmp	r0, #0
 8018e96:	d0bc      	beq.n	8018e12 <setvbuf+0xa6>
 8018e98:	89a3      	ldrh	r3, [r4, #12]
 8018e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018e9e:	81a3      	strh	r3, [r4, #12]
 8018ea0:	464d      	mov	r5, r9
 8018ea2:	e7d3      	b.n	8018e4c <setvbuf+0xe0>
 8018ea4:	2000      	movs	r0, #0
 8018ea6:	e7b6      	b.n	8018e16 <setvbuf+0xaa>
 8018ea8:	46a9      	mov	r9, r5
 8018eaa:	e7f5      	b.n	8018e98 <setvbuf+0x12c>
 8018eac:	60a0      	str	r0, [r4, #8]
 8018eae:	e7be      	b.n	8018e2e <setvbuf+0xc2>
 8018eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8018eb4:	e7bb      	b.n	8018e2e <setvbuf+0xc2>
 8018eb6:	bf00      	nop
 8018eb8:	2000002c 	.word	0x2000002c
 8018ebc:	0801c700 	.word	0x0801c700
 8018ec0:	0801c720 	.word	0x0801c720
 8018ec4:	0801c6e0 	.word	0x0801c6e0

08018ec8 <nanf>:
 8018ec8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018ed0 <nanf+0x8>
 8018ecc:	4770      	bx	lr
 8018ece:	bf00      	nop
 8018ed0:	7fc00000 	.word	0x7fc00000

08018ed4 <siprintf>:
 8018ed4:	b40e      	push	{r1, r2, r3}
 8018ed6:	b500      	push	{lr}
 8018ed8:	b09c      	sub	sp, #112	; 0x70
 8018eda:	ab1d      	add	r3, sp, #116	; 0x74
 8018edc:	9002      	str	r0, [sp, #8]
 8018ede:	9006      	str	r0, [sp, #24]
 8018ee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018ee4:	4809      	ldr	r0, [pc, #36]	; (8018f0c <siprintf+0x38>)
 8018ee6:	9107      	str	r1, [sp, #28]
 8018ee8:	9104      	str	r1, [sp, #16]
 8018eea:	4909      	ldr	r1, [pc, #36]	; (8018f10 <siprintf+0x3c>)
 8018eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ef0:	9105      	str	r1, [sp, #20]
 8018ef2:	6800      	ldr	r0, [r0, #0]
 8018ef4:	9301      	str	r3, [sp, #4]
 8018ef6:	a902      	add	r1, sp, #8
 8018ef8:	f002 ff9c 	bl	801be34 <_svfiprintf_r>
 8018efc:	9b02      	ldr	r3, [sp, #8]
 8018efe:	2200      	movs	r2, #0
 8018f00:	701a      	strb	r2, [r3, #0]
 8018f02:	b01c      	add	sp, #112	; 0x70
 8018f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8018f08:	b003      	add	sp, #12
 8018f0a:	4770      	bx	lr
 8018f0c:	2000002c 	.word	0x2000002c
 8018f10:	ffff0208 	.word	0xffff0208

08018f14 <__sread>:
 8018f14:	b510      	push	{r4, lr}
 8018f16:	460c      	mov	r4, r1
 8018f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f1c:	f003 f8b8 	bl	801c090 <_read_r>
 8018f20:	2800      	cmp	r0, #0
 8018f22:	bfab      	itete	ge
 8018f24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018f26:	89a3      	ldrhlt	r3, [r4, #12]
 8018f28:	181b      	addge	r3, r3, r0
 8018f2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018f2e:	bfac      	ite	ge
 8018f30:	6563      	strge	r3, [r4, #84]	; 0x54
 8018f32:	81a3      	strhlt	r3, [r4, #12]
 8018f34:	bd10      	pop	{r4, pc}

08018f36 <__swrite>:
 8018f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f3a:	461f      	mov	r7, r3
 8018f3c:	898b      	ldrh	r3, [r1, #12]
 8018f3e:	05db      	lsls	r3, r3, #23
 8018f40:	4605      	mov	r5, r0
 8018f42:	460c      	mov	r4, r1
 8018f44:	4616      	mov	r6, r2
 8018f46:	d505      	bpl.n	8018f54 <__swrite+0x1e>
 8018f48:	2302      	movs	r3, #2
 8018f4a:	2200      	movs	r2, #0
 8018f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f50:	f002 fa9c 	bl	801b48c <_lseek_r>
 8018f54:	89a3      	ldrh	r3, [r4, #12]
 8018f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018f5e:	81a3      	strh	r3, [r4, #12]
 8018f60:	4632      	mov	r2, r6
 8018f62:	463b      	mov	r3, r7
 8018f64:	4628      	mov	r0, r5
 8018f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f6a:	f001 b851 	b.w	801a010 <_write_r>

08018f6e <__sseek>:
 8018f6e:	b510      	push	{r4, lr}
 8018f70:	460c      	mov	r4, r1
 8018f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f76:	f002 fa89 	bl	801b48c <_lseek_r>
 8018f7a:	1c43      	adds	r3, r0, #1
 8018f7c:	89a3      	ldrh	r3, [r4, #12]
 8018f7e:	bf15      	itete	ne
 8018f80:	6560      	strne	r0, [r4, #84]	; 0x54
 8018f82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018f86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018f8a:	81a3      	strheq	r3, [r4, #12]
 8018f8c:	bf18      	it	ne
 8018f8e:	81a3      	strhne	r3, [r4, #12]
 8018f90:	bd10      	pop	{r4, pc}

08018f92 <__sclose>:
 8018f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f96:	f001 b8bb 	b.w	801a110 <_close_r>

08018f9a <sulp>:
 8018f9a:	b570      	push	{r4, r5, r6, lr}
 8018f9c:	4604      	mov	r4, r0
 8018f9e:	460d      	mov	r5, r1
 8018fa0:	ec45 4b10 	vmov	d0, r4, r5
 8018fa4:	4616      	mov	r6, r2
 8018fa6:	f002 fd83 	bl	801bab0 <__ulp>
 8018faa:	ec51 0b10 	vmov	r0, r1, d0
 8018fae:	b17e      	cbz	r6, 8018fd0 <sulp+0x36>
 8018fb0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018fb4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	dd09      	ble.n	8018fd0 <sulp+0x36>
 8018fbc:	051b      	lsls	r3, r3, #20
 8018fbe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8018fc2:	2400      	movs	r4, #0
 8018fc4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8018fc8:	4622      	mov	r2, r4
 8018fca:	462b      	mov	r3, r5
 8018fcc:	f7ef fa4c 	bl	8008468 <__aeabi_dmul>
 8018fd0:	bd70      	pop	{r4, r5, r6, pc}
 8018fd2:	0000      	movs	r0, r0
 8018fd4:	0000      	movs	r0, r0
	...

08018fd8 <_strtod_l>:
 8018fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fdc:	461f      	mov	r7, r3
 8018fde:	b0a1      	sub	sp, #132	; 0x84
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	4681      	mov	r9, r0
 8018fe4:	4638      	mov	r0, r7
 8018fe6:	460e      	mov	r6, r1
 8018fe8:	9217      	str	r2, [sp, #92]	; 0x5c
 8018fea:	931c      	str	r3, [sp, #112]	; 0x70
 8018fec:	f002 fa3e 	bl	801b46c <__localeconv_l>
 8018ff0:	4680      	mov	r8, r0
 8018ff2:	6800      	ldr	r0, [r0, #0]
 8018ff4:	f7ef f824 	bl	8008040 <strlen>
 8018ff8:	f04f 0a00 	mov.w	sl, #0
 8018ffc:	4604      	mov	r4, r0
 8018ffe:	f04f 0b00 	mov.w	fp, #0
 8019002:	961b      	str	r6, [sp, #108]	; 0x6c
 8019004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019006:	781a      	ldrb	r2, [r3, #0]
 8019008:	2a0d      	cmp	r2, #13
 801900a:	d832      	bhi.n	8019072 <_strtod_l+0x9a>
 801900c:	2a09      	cmp	r2, #9
 801900e:	d236      	bcs.n	801907e <_strtod_l+0xa6>
 8019010:	2a00      	cmp	r2, #0
 8019012:	d03e      	beq.n	8019092 <_strtod_l+0xba>
 8019014:	2300      	movs	r3, #0
 8019016:	930d      	str	r3, [sp, #52]	; 0x34
 8019018:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801901a:	782b      	ldrb	r3, [r5, #0]
 801901c:	2b30      	cmp	r3, #48	; 0x30
 801901e:	f040 80ac 	bne.w	801917a <_strtod_l+0x1a2>
 8019022:	786b      	ldrb	r3, [r5, #1]
 8019024:	2b58      	cmp	r3, #88	; 0x58
 8019026:	d001      	beq.n	801902c <_strtod_l+0x54>
 8019028:	2b78      	cmp	r3, #120	; 0x78
 801902a:	d167      	bne.n	80190fc <_strtod_l+0x124>
 801902c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801902e:	9301      	str	r3, [sp, #4]
 8019030:	ab1c      	add	r3, sp, #112	; 0x70
 8019032:	9300      	str	r3, [sp, #0]
 8019034:	9702      	str	r7, [sp, #8]
 8019036:	ab1d      	add	r3, sp, #116	; 0x74
 8019038:	4a88      	ldr	r2, [pc, #544]	; (801925c <_strtod_l+0x284>)
 801903a:	a91b      	add	r1, sp, #108	; 0x6c
 801903c:	4648      	mov	r0, r9
 801903e:	f001 ff1c 	bl	801ae7a <__gethex>
 8019042:	f010 0407 	ands.w	r4, r0, #7
 8019046:	4606      	mov	r6, r0
 8019048:	d005      	beq.n	8019056 <_strtod_l+0x7e>
 801904a:	2c06      	cmp	r4, #6
 801904c:	d12b      	bne.n	80190a6 <_strtod_l+0xce>
 801904e:	3501      	adds	r5, #1
 8019050:	2300      	movs	r3, #0
 8019052:	951b      	str	r5, [sp, #108]	; 0x6c
 8019054:	930d      	str	r3, [sp, #52]	; 0x34
 8019056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019058:	2b00      	cmp	r3, #0
 801905a:	f040 859a 	bne.w	8019b92 <_strtod_l+0xbba>
 801905e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019060:	b1e3      	cbz	r3, 801909c <_strtod_l+0xc4>
 8019062:	4652      	mov	r2, sl
 8019064:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8019068:	ec43 2b10 	vmov	d0, r2, r3
 801906c:	b021      	add	sp, #132	; 0x84
 801906e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019072:	2a2b      	cmp	r2, #43	; 0x2b
 8019074:	d015      	beq.n	80190a2 <_strtod_l+0xca>
 8019076:	2a2d      	cmp	r2, #45	; 0x2d
 8019078:	d004      	beq.n	8019084 <_strtod_l+0xac>
 801907a:	2a20      	cmp	r2, #32
 801907c:	d1ca      	bne.n	8019014 <_strtod_l+0x3c>
 801907e:	3301      	adds	r3, #1
 8019080:	931b      	str	r3, [sp, #108]	; 0x6c
 8019082:	e7bf      	b.n	8019004 <_strtod_l+0x2c>
 8019084:	2201      	movs	r2, #1
 8019086:	920d      	str	r2, [sp, #52]	; 0x34
 8019088:	1c5a      	adds	r2, r3, #1
 801908a:	921b      	str	r2, [sp, #108]	; 0x6c
 801908c:	785b      	ldrb	r3, [r3, #1]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d1c2      	bne.n	8019018 <_strtod_l+0x40>
 8019092:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019094:	961b      	str	r6, [sp, #108]	; 0x6c
 8019096:	2b00      	cmp	r3, #0
 8019098:	f040 8579 	bne.w	8019b8e <_strtod_l+0xbb6>
 801909c:	4652      	mov	r2, sl
 801909e:	465b      	mov	r3, fp
 80190a0:	e7e2      	b.n	8019068 <_strtod_l+0x90>
 80190a2:	2200      	movs	r2, #0
 80190a4:	e7ef      	b.n	8019086 <_strtod_l+0xae>
 80190a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80190a8:	b13a      	cbz	r2, 80190ba <_strtod_l+0xe2>
 80190aa:	2135      	movs	r1, #53	; 0x35
 80190ac:	a81e      	add	r0, sp, #120	; 0x78
 80190ae:	f002 fdf7 	bl	801bca0 <__copybits>
 80190b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80190b4:	4648      	mov	r0, r9
 80190b6:	f002 fa64 	bl	801b582 <_Bfree>
 80190ba:	3c01      	subs	r4, #1
 80190bc:	2c04      	cmp	r4, #4
 80190be:	d806      	bhi.n	80190ce <_strtod_l+0xf6>
 80190c0:	e8df f004 	tbb	[pc, r4]
 80190c4:	1714030a 	.word	0x1714030a
 80190c8:	0a          	.byte	0x0a
 80190c9:	00          	.byte	0x00
 80190ca:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80190ce:	0730      	lsls	r0, r6, #28
 80190d0:	d5c1      	bpl.n	8019056 <_strtod_l+0x7e>
 80190d2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80190d6:	e7be      	b.n	8019056 <_strtod_l+0x7e>
 80190d8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80190dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80190de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80190e2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80190e6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80190ea:	e7f0      	b.n	80190ce <_strtod_l+0xf6>
 80190ec:	f8df b170 	ldr.w	fp, [pc, #368]	; 8019260 <_strtod_l+0x288>
 80190f0:	e7ed      	b.n	80190ce <_strtod_l+0xf6>
 80190f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80190f6:	f04f 3aff 	mov.w	sl, #4294967295
 80190fa:	e7e8      	b.n	80190ce <_strtod_l+0xf6>
 80190fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80190fe:	1c5a      	adds	r2, r3, #1
 8019100:	921b      	str	r2, [sp, #108]	; 0x6c
 8019102:	785b      	ldrb	r3, [r3, #1]
 8019104:	2b30      	cmp	r3, #48	; 0x30
 8019106:	d0f9      	beq.n	80190fc <_strtod_l+0x124>
 8019108:	2b00      	cmp	r3, #0
 801910a:	d0a4      	beq.n	8019056 <_strtod_l+0x7e>
 801910c:	2301      	movs	r3, #1
 801910e:	2500      	movs	r5, #0
 8019110:	9306      	str	r3, [sp, #24]
 8019112:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019114:	9308      	str	r3, [sp, #32]
 8019116:	9507      	str	r5, [sp, #28]
 8019118:	9505      	str	r5, [sp, #20]
 801911a:	220a      	movs	r2, #10
 801911c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801911e:	7807      	ldrb	r7, [r0, #0]
 8019120:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8019124:	b2d9      	uxtb	r1, r3
 8019126:	2909      	cmp	r1, #9
 8019128:	d929      	bls.n	801917e <_strtod_l+0x1a6>
 801912a:	4622      	mov	r2, r4
 801912c:	f8d8 1000 	ldr.w	r1, [r8]
 8019130:	f002 ffc0 	bl	801c0b4 <strncmp>
 8019134:	2800      	cmp	r0, #0
 8019136:	d031      	beq.n	801919c <_strtod_l+0x1c4>
 8019138:	2000      	movs	r0, #0
 801913a:	9c05      	ldr	r4, [sp, #20]
 801913c:	9004      	str	r0, [sp, #16]
 801913e:	463b      	mov	r3, r7
 8019140:	4602      	mov	r2, r0
 8019142:	2b65      	cmp	r3, #101	; 0x65
 8019144:	d001      	beq.n	801914a <_strtod_l+0x172>
 8019146:	2b45      	cmp	r3, #69	; 0x45
 8019148:	d114      	bne.n	8019174 <_strtod_l+0x19c>
 801914a:	b924      	cbnz	r4, 8019156 <_strtod_l+0x17e>
 801914c:	b910      	cbnz	r0, 8019154 <_strtod_l+0x17c>
 801914e:	9b06      	ldr	r3, [sp, #24]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d09e      	beq.n	8019092 <_strtod_l+0xba>
 8019154:	2400      	movs	r4, #0
 8019156:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8019158:	1c73      	adds	r3, r6, #1
 801915a:	931b      	str	r3, [sp, #108]	; 0x6c
 801915c:	7873      	ldrb	r3, [r6, #1]
 801915e:	2b2b      	cmp	r3, #43	; 0x2b
 8019160:	d078      	beq.n	8019254 <_strtod_l+0x27c>
 8019162:	2b2d      	cmp	r3, #45	; 0x2d
 8019164:	d070      	beq.n	8019248 <_strtod_l+0x270>
 8019166:	f04f 0c00 	mov.w	ip, #0
 801916a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801916e:	2f09      	cmp	r7, #9
 8019170:	d97c      	bls.n	801926c <_strtod_l+0x294>
 8019172:	961b      	str	r6, [sp, #108]	; 0x6c
 8019174:	f04f 0e00 	mov.w	lr, #0
 8019178:	e09a      	b.n	80192b0 <_strtod_l+0x2d8>
 801917a:	2300      	movs	r3, #0
 801917c:	e7c7      	b.n	801910e <_strtod_l+0x136>
 801917e:	9905      	ldr	r1, [sp, #20]
 8019180:	2908      	cmp	r1, #8
 8019182:	bfdd      	ittte	le
 8019184:	9907      	ldrle	r1, [sp, #28]
 8019186:	fb02 3301 	mlale	r3, r2, r1, r3
 801918a:	9307      	strle	r3, [sp, #28]
 801918c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8019190:	9b05      	ldr	r3, [sp, #20]
 8019192:	3001      	adds	r0, #1
 8019194:	3301      	adds	r3, #1
 8019196:	9305      	str	r3, [sp, #20]
 8019198:	901b      	str	r0, [sp, #108]	; 0x6c
 801919a:	e7bf      	b.n	801911c <_strtod_l+0x144>
 801919c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801919e:	191a      	adds	r2, r3, r4
 80191a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80191a2:	9a05      	ldr	r2, [sp, #20]
 80191a4:	5d1b      	ldrb	r3, [r3, r4]
 80191a6:	2a00      	cmp	r2, #0
 80191a8:	d037      	beq.n	801921a <_strtod_l+0x242>
 80191aa:	9c05      	ldr	r4, [sp, #20]
 80191ac:	4602      	mov	r2, r0
 80191ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80191b2:	2909      	cmp	r1, #9
 80191b4:	d913      	bls.n	80191de <_strtod_l+0x206>
 80191b6:	2101      	movs	r1, #1
 80191b8:	9104      	str	r1, [sp, #16]
 80191ba:	e7c2      	b.n	8019142 <_strtod_l+0x16a>
 80191bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80191be:	1c5a      	adds	r2, r3, #1
 80191c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80191c2:	785b      	ldrb	r3, [r3, #1]
 80191c4:	3001      	adds	r0, #1
 80191c6:	2b30      	cmp	r3, #48	; 0x30
 80191c8:	d0f8      	beq.n	80191bc <_strtod_l+0x1e4>
 80191ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80191ce:	2a08      	cmp	r2, #8
 80191d0:	f200 84e4 	bhi.w	8019b9c <_strtod_l+0xbc4>
 80191d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80191d6:	9208      	str	r2, [sp, #32]
 80191d8:	4602      	mov	r2, r0
 80191da:	2000      	movs	r0, #0
 80191dc:	4604      	mov	r4, r0
 80191de:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80191e2:	f100 0101 	add.w	r1, r0, #1
 80191e6:	d012      	beq.n	801920e <_strtod_l+0x236>
 80191e8:	440a      	add	r2, r1
 80191ea:	eb00 0c04 	add.w	ip, r0, r4
 80191ee:	4621      	mov	r1, r4
 80191f0:	270a      	movs	r7, #10
 80191f2:	458c      	cmp	ip, r1
 80191f4:	d113      	bne.n	801921e <_strtod_l+0x246>
 80191f6:	1821      	adds	r1, r4, r0
 80191f8:	2908      	cmp	r1, #8
 80191fa:	f104 0401 	add.w	r4, r4, #1
 80191fe:	4404      	add	r4, r0
 8019200:	dc19      	bgt.n	8019236 <_strtod_l+0x25e>
 8019202:	9b07      	ldr	r3, [sp, #28]
 8019204:	210a      	movs	r1, #10
 8019206:	fb01 e303 	mla	r3, r1, r3, lr
 801920a:	9307      	str	r3, [sp, #28]
 801920c:	2100      	movs	r1, #0
 801920e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019210:	1c58      	adds	r0, r3, #1
 8019212:	901b      	str	r0, [sp, #108]	; 0x6c
 8019214:	785b      	ldrb	r3, [r3, #1]
 8019216:	4608      	mov	r0, r1
 8019218:	e7c9      	b.n	80191ae <_strtod_l+0x1d6>
 801921a:	9805      	ldr	r0, [sp, #20]
 801921c:	e7d3      	b.n	80191c6 <_strtod_l+0x1ee>
 801921e:	2908      	cmp	r1, #8
 8019220:	f101 0101 	add.w	r1, r1, #1
 8019224:	dc03      	bgt.n	801922e <_strtod_l+0x256>
 8019226:	9b07      	ldr	r3, [sp, #28]
 8019228:	437b      	muls	r3, r7
 801922a:	9307      	str	r3, [sp, #28]
 801922c:	e7e1      	b.n	80191f2 <_strtod_l+0x21a>
 801922e:	2910      	cmp	r1, #16
 8019230:	bfd8      	it	le
 8019232:	437d      	mulle	r5, r7
 8019234:	e7dd      	b.n	80191f2 <_strtod_l+0x21a>
 8019236:	2c10      	cmp	r4, #16
 8019238:	bfdc      	itt	le
 801923a:	210a      	movle	r1, #10
 801923c:	fb01 e505 	mlale	r5, r1, r5, lr
 8019240:	e7e4      	b.n	801920c <_strtod_l+0x234>
 8019242:	2301      	movs	r3, #1
 8019244:	9304      	str	r3, [sp, #16]
 8019246:	e781      	b.n	801914c <_strtod_l+0x174>
 8019248:	f04f 0c01 	mov.w	ip, #1
 801924c:	1cb3      	adds	r3, r6, #2
 801924e:	931b      	str	r3, [sp, #108]	; 0x6c
 8019250:	78b3      	ldrb	r3, [r6, #2]
 8019252:	e78a      	b.n	801916a <_strtod_l+0x192>
 8019254:	f04f 0c00 	mov.w	ip, #0
 8019258:	e7f8      	b.n	801924c <_strtod_l+0x274>
 801925a:	bf00      	nop
 801925c:	0801c7a8 	.word	0x0801c7a8
 8019260:	7ff00000 	.word	0x7ff00000
 8019264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019266:	1c5f      	adds	r7, r3, #1
 8019268:	971b      	str	r7, [sp, #108]	; 0x6c
 801926a:	785b      	ldrb	r3, [r3, #1]
 801926c:	2b30      	cmp	r3, #48	; 0x30
 801926e:	d0f9      	beq.n	8019264 <_strtod_l+0x28c>
 8019270:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8019274:	2f08      	cmp	r7, #8
 8019276:	f63f af7d 	bhi.w	8019174 <_strtod_l+0x19c>
 801927a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801927e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019280:	930a      	str	r3, [sp, #40]	; 0x28
 8019282:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019284:	1c5f      	adds	r7, r3, #1
 8019286:	971b      	str	r7, [sp, #108]	; 0x6c
 8019288:	785b      	ldrb	r3, [r3, #1]
 801928a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801928e:	f1b8 0f09 	cmp.w	r8, #9
 8019292:	d937      	bls.n	8019304 <_strtod_l+0x32c>
 8019294:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019296:	1a7f      	subs	r7, r7, r1
 8019298:	2f08      	cmp	r7, #8
 801929a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801929e:	dc37      	bgt.n	8019310 <_strtod_l+0x338>
 80192a0:	45be      	cmp	lr, r7
 80192a2:	bfa8      	it	ge
 80192a4:	46be      	movge	lr, r7
 80192a6:	f1bc 0f00 	cmp.w	ip, #0
 80192aa:	d001      	beq.n	80192b0 <_strtod_l+0x2d8>
 80192ac:	f1ce 0e00 	rsb	lr, lr, #0
 80192b0:	2c00      	cmp	r4, #0
 80192b2:	d151      	bne.n	8019358 <_strtod_l+0x380>
 80192b4:	2800      	cmp	r0, #0
 80192b6:	f47f aece 	bne.w	8019056 <_strtod_l+0x7e>
 80192ba:	9a06      	ldr	r2, [sp, #24]
 80192bc:	2a00      	cmp	r2, #0
 80192be:	f47f aeca 	bne.w	8019056 <_strtod_l+0x7e>
 80192c2:	9a04      	ldr	r2, [sp, #16]
 80192c4:	2a00      	cmp	r2, #0
 80192c6:	f47f aee4 	bne.w	8019092 <_strtod_l+0xba>
 80192ca:	2b4e      	cmp	r3, #78	; 0x4e
 80192cc:	d027      	beq.n	801931e <_strtod_l+0x346>
 80192ce:	dc21      	bgt.n	8019314 <_strtod_l+0x33c>
 80192d0:	2b49      	cmp	r3, #73	; 0x49
 80192d2:	f47f aede 	bne.w	8019092 <_strtod_l+0xba>
 80192d6:	49a0      	ldr	r1, [pc, #640]	; (8019558 <_strtod_l+0x580>)
 80192d8:	a81b      	add	r0, sp, #108	; 0x6c
 80192da:	f002 f801 	bl	801b2e0 <__match>
 80192de:	2800      	cmp	r0, #0
 80192e0:	f43f aed7 	beq.w	8019092 <_strtod_l+0xba>
 80192e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80192e6:	499d      	ldr	r1, [pc, #628]	; (801955c <_strtod_l+0x584>)
 80192e8:	3b01      	subs	r3, #1
 80192ea:	a81b      	add	r0, sp, #108	; 0x6c
 80192ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80192ee:	f001 fff7 	bl	801b2e0 <__match>
 80192f2:	b910      	cbnz	r0, 80192fa <_strtod_l+0x322>
 80192f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80192f6:	3301      	adds	r3, #1
 80192f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80192fa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8019570 <_strtod_l+0x598>
 80192fe:	f04f 0a00 	mov.w	sl, #0
 8019302:	e6a8      	b.n	8019056 <_strtod_l+0x7e>
 8019304:	210a      	movs	r1, #10
 8019306:	fb01 3e0e 	mla	lr, r1, lr, r3
 801930a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801930e:	e7b8      	b.n	8019282 <_strtod_l+0x2aa>
 8019310:	46be      	mov	lr, r7
 8019312:	e7c8      	b.n	80192a6 <_strtod_l+0x2ce>
 8019314:	2b69      	cmp	r3, #105	; 0x69
 8019316:	d0de      	beq.n	80192d6 <_strtod_l+0x2fe>
 8019318:	2b6e      	cmp	r3, #110	; 0x6e
 801931a:	f47f aeba 	bne.w	8019092 <_strtod_l+0xba>
 801931e:	4990      	ldr	r1, [pc, #576]	; (8019560 <_strtod_l+0x588>)
 8019320:	a81b      	add	r0, sp, #108	; 0x6c
 8019322:	f001 ffdd 	bl	801b2e0 <__match>
 8019326:	2800      	cmp	r0, #0
 8019328:	f43f aeb3 	beq.w	8019092 <_strtod_l+0xba>
 801932c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801932e:	781b      	ldrb	r3, [r3, #0]
 8019330:	2b28      	cmp	r3, #40	; 0x28
 8019332:	d10e      	bne.n	8019352 <_strtod_l+0x37a>
 8019334:	aa1e      	add	r2, sp, #120	; 0x78
 8019336:	498b      	ldr	r1, [pc, #556]	; (8019564 <_strtod_l+0x58c>)
 8019338:	a81b      	add	r0, sp, #108	; 0x6c
 801933a:	f001 ffe5 	bl	801b308 <__hexnan>
 801933e:	2805      	cmp	r0, #5
 8019340:	d107      	bne.n	8019352 <_strtod_l+0x37a>
 8019342:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019344:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8019348:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801934c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8019350:	e681      	b.n	8019056 <_strtod_l+0x7e>
 8019352:	f8df b224 	ldr.w	fp, [pc, #548]	; 8019578 <_strtod_l+0x5a0>
 8019356:	e7d2      	b.n	80192fe <_strtod_l+0x326>
 8019358:	ebae 0302 	sub.w	r3, lr, r2
 801935c:	9306      	str	r3, [sp, #24]
 801935e:	9b05      	ldr	r3, [sp, #20]
 8019360:	9807      	ldr	r0, [sp, #28]
 8019362:	2b00      	cmp	r3, #0
 8019364:	bf08      	it	eq
 8019366:	4623      	moveq	r3, r4
 8019368:	2c10      	cmp	r4, #16
 801936a:	9305      	str	r3, [sp, #20]
 801936c:	46a0      	mov	r8, r4
 801936e:	bfa8      	it	ge
 8019370:	f04f 0810 	movge.w	r8, #16
 8019374:	f7ee fffe 	bl	8008374 <__aeabi_ui2d>
 8019378:	2c09      	cmp	r4, #9
 801937a:	4682      	mov	sl, r0
 801937c:	468b      	mov	fp, r1
 801937e:	dc13      	bgt.n	80193a8 <_strtod_l+0x3d0>
 8019380:	9b06      	ldr	r3, [sp, #24]
 8019382:	2b00      	cmp	r3, #0
 8019384:	f43f ae67 	beq.w	8019056 <_strtod_l+0x7e>
 8019388:	9b06      	ldr	r3, [sp, #24]
 801938a:	dd7a      	ble.n	8019482 <_strtod_l+0x4aa>
 801938c:	2b16      	cmp	r3, #22
 801938e:	dc61      	bgt.n	8019454 <_strtod_l+0x47c>
 8019390:	4a75      	ldr	r2, [pc, #468]	; (8019568 <_strtod_l+0x590>)
 8019392:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8019396:	e9de 0100 	ldrd	r0, r1, [lr]
 801939a:	4652      	mov	r2, sl
 801939c:	465b      	mov	r3, fp
 801939e:	f7ef f863 	bl	8008468 <__aeabi_dmul>
 80193a2:	4682      	mov	sl, r0
 80193a4:	468b      	mov	fp, r1
 80193a6:	e656      	b.n	8019056 <_strtod_l+0x7e>
 80193a8:	4b6f      	ldr	r3, [pc, #444]	; (8019568 <_strtod_l+0x590>)
 80193aa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80193ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80193b2:	f7ef f859 	bl	8008468 <__aeabi_dmul>
 80193b6:	4606      	mov	r6, r0
 80193b8:	4628      	mov	r0, r5
 80193ba:	460f      	mov	r7, r1
 80193bc:	f7ee ffda 	bl	8008374 <__aeabi_ui2d>
 80193c0:	4602      	mov	r2, r0
 80193c2:	460b      	mov	r3, r1
 80193c4:	4630      	mov	r0, r6
 80193c6:	4639      	mov	r1, r7
 80193c8:	f7ee fe98 	bl	80080fc <__adddf3>
 80193cc:	2c0f      	cmp	r4, #15
 80193ce:	4682      	mov	sl, r0
 80193d0:	468b      	mov	fp, r1
 80193d2:	ddd5      	ble.n	8019380 <_strtod_l+0x3a8>
 80193d4:	9b06      	ldr	r3, [sp, #24]
 80193d6:	eba4 0808 	sub.w	r8, r4, r8
 80193da:	4498      	add	r8, r3
 80193dc:	f1b8 0f00 	cmp.w	r8, #0
 80193e0:	f340 8096 	ble.w	8019510 <_strtod_l+0x538>
 80193e4:	f018 030f 	ands.w	r3, r8, #15
 80193e8:	d00a      	beq.n	8019400 <_strtod_l+0x428>
 80193ea:	495f      	ldr	r1, [pc, #380]	; (8019568 <_strtod_l+0x590>)
 80193ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80193f0:	4652      	mov	r2, sl
 80193f2:	465b      	mov	r3, fp
 80193f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80193f8:	f7ef f836 	bl	8008468 <__aeabi_dmul>
 80193fc:	4682      	mov	sl, r0
 80193fe:	468b      	mov	fp, r1
 8019400:	f038 080f 	bics.w	r8, r8, #15
 8019404:	d073      	beq.n	80194ee <_strtod_l+0x516>
 8019406:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801940a:	dd47      	ble.n	801949c <_strtod_l+0x4c4>
 801940c:	2400      	movs	r4, #0
 801940e:	46a0      	mov	r8, r4
 8019410:	9407      	str	r4, [sp, #28]
 8019412:	9405      	str	r4, [sp, #20]
 8019414:	2322      	movs	r3, #34	; 0x22
 8019416:	f8df b158 	ldr.w	fp, [pc, #344]	; 8019570 <_strtod_l+0x598>
 801941a:	f8c9 3000 	str.w	r3, [r9]
 801941e:	f04f 0a00 	mov.w	sl, #0
 8019422:	9b07      	ldr	r3, [sp, #28]
 8019424:	2b00      	cmp	r3, #0
 8019426:	f43f ae16 	beq.w	8019056 <_strtod_l+0x7e>
 801942a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801942c:	4648      	mov	r0, r9
 801942e:	f002 f8a8 	bl	801b582 <_Bfree>
 8019432:	9905      	ldr	r1, [sp, #20]
 8019434:	4648      	mov	r0, r9
 8019436:	f002 f8a4 	bl	801b582 <_Bfree>
 801943a:	4641      	mov	r1, r8
 801943c:	4648      	mov	r0, r9
 801943e:	f002 f8a0 	bl	801b582 <_Bfree>
 8019442:	9907      	ldr	r1, [sp, #28]
 8019444:	4648      	mov	r0, r9
 8019446:	f002 f89c 	bl	801b582 <_Bfree>
 801944a:	4621      	mov	r1, r4
 801944c:	4648      	mov	r0, r9
 801944e:	f002 f898 	bl	801b582 <_Bfree>
 8019452:	e600      	b.n	8019056 <_strtod_l+0x7e>
 8019454:	9a06      	ldr	r2, [sp, #24]
 8019456:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801945a:	4293      	cmp	r3, r2
 801945c:	dbba      	blt.n	80193d4 <_strtod_l+0x3fc>
 801945e:	4d42      	ldr	r5, [pc, #264]	; (8019568 <_strtod_l+0x590>)
 8019460:	f1c4 040f 	rsb	r4, r4, #15
 8019464:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8019468:	4652      	mov	r2, sl
 801946a:	465b      	mov	r3, fp
 801946c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019470:	f7ee fffa 	bl	8008468 <__aeabi_dmul>
 8019474:	9b06      	ldr	r3, [sp, #24]
 8019476:	1b1c      	subs	r4, r3, r4
 8019478:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801947c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019480:	e78d      	b.n	801939e <_strtod_l+0x3c6>
 8019482:	f113 0f16 	cmn.w	r3, #22
 8019486:	dba5      	blt.n	80193d4 <_strtod_l+0x3fc>
 8019488:	4a37      	ldr	r2, [pc, #220]	; (8019568 <_strtod_l+0x590>)
 801948a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801948e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8019492:	4650      	mov	r0, sl
 8019494:	4659      	mov	r1, fp
 8019496:	f7ef f911 	bl	80086bc <__aeabi_ddiv>
 801949a:	e782      	b.n	80193a2 <_strtod_l+0x3ca>
 801949c:	2300      	movs	r3, #0
 801949e:	4e33      	ldr	r6, [pc, #204]	; (801956c <_strtod_l+0x594>)
 80194a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80194a4:	4650      	mov	r0, sl
 80194a6:	4659      	mov	r1, fp
 80194a8:	461d      	mov	r5, r3
 80194aa:	f1b8 0f01 	cmp.w	r8, #1
 80194ae:	dc21      	bgt.n	80194f4 <_strtod_l+0x51c>
 80194b0:	b10b      	cbz	r3, 80194b6 <_strtod_l+0x4de>
 80194b2:	4682      	mov	sl, r0
 80194b4:	468b      	mov	fp, r1
 80194b6:	4b2d      	ldr	r3, [pc, #180]	; (801956c <_strtod_l+0x594>)
 80194b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80194bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80194c0:	4652      	mov	r2, sl
 80194c2:	465b      	mov	r3, fp
 80194c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80194c8:	f7ee ffce 	bl	8008468 <__aeabi_dmul>
 80194cc:	4b28      	ldr	r3, [pc, #160]	; (8019570 <_strtod_l+0x598>)
 80194ce:	460a      	mov	r2, r1
 80194d0:	400b      	ands	r3, r1
 80194d2:	4928      	ldr	r1, [pc, #160]	; (8019574 <_strtod_l+0x59c>)
 80194d4:	428b      	cmp	r3, r1
 80194d6:	4682      	mov	sl, r0
 80194d8:	d898      	bhi.n	801940c <_strtod_l+0x434>
 80194da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80194de:	428b      	cmp	r3, r1
 80194e0:	bf86      	itte	hi
 80194e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801957c <_strtod_l+0x5a4>
 80194e6:	f04f 3aff 	movhi.w	sl, #4294967295
 80194ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80194ee:	2300      	movs	r3, #0
 80194f0:	9304      	str	r3, [sp, #16]
 80194f2:	e077      	b.n	80195e4 <_strtod_l+0x60c>
 80194f4:	f018 0f01 	tst.w	r8, #1
 80194f8:	d006      	beq.n	8019508 <_strtod_l+0x530>
 80194fa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80194fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019502:	f7ee ffb1 	bl	8008468 <__aeabi_dmul>
 8019506:	2301      	movs	r3, #1
 8019508:	3501      	adds	r5, #1
 801950a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801950e:	e7cc      	b.n	80194aa <_strtod_l+0x4d2>
 8019510:	d0ed      	beq.n	80194ee <_strtod_l+0x516>
 8019512:	f1c8 0800 	rsb	r8, r8, #0
 8019516:	f018 020f 	ands.w	r2, r8, #15
 801951a:	d00a      	beq.n	8019532 <_strtod_l+0x55a>
 801951c:	4b12      	ldr	r3, [pc, #72]	; (8019568 <_strtod_l+0x590>)
 801951e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019522:	4650      	mov	r0, sl
 8019524:	4659      	mov	r1, fp
 8019526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801952a:	f7ef f8c7 	bl	80086bc <__aeabi_ddiv>
 801952e:	4682      	mov	sl, r0
 8019530:	468b      	mov	fp, r1
 8019532:	ea5f 1828 	movs.w	r8, r8, asr #4
 8019536:	d0da      	beq.n	80194ee <_strtod_l+0x516>
 8019538:	f1b8 0f1f 	cmp.w	r8, #31
 801953c:	dd20      	ble.n	8019580 <_strtod_l+0x5a8>
 801953e:	2400      	movs	r4, #0
 8019540:	46a0      	mov	r8, r4
 8019542:	9407      	str	r4, [sp, #28]
 8019544:	9405      	str	r4, [sp, #20]
 8019546:	2322      	movs	r3, #34	; 0x22
 8019548:	f04f 0a00 	mov.w	sl, #0
 801954c:	f04f 0b00 	mov.w	fp, #0
 8019550:	f8c9 3000 	str.w	r3, [r9]
 8019554:	e765      	b.n	8019422 <_strtod_l+0x44a>
 8019556:	bf00      	nop
 8019558:	0801c75a 	.word	0x0801c75a
 801955c:	0801c7fb 	.word	0x0801c7fb
 8019560:	0801c762 	.word	0x0801c762
 8019564:	0801c7bc 	.word	0x0801c7bc
 8019568:	0801c838 	.word	0x0801c838
 801956c:	0801c810 	.word	0x0801c810
 8019570:	7ff00000 	.word	0x7ff00000
 8019574:	7ca00000 	.word	0x7ca00000
 8019578:	fff80000 	.word	0xfff80000
 801957c:	7fefffff 	.word	0x7fefffff
 8019580:	f018 0310 	ands.w	r3, r8, #16
 8019584:	bf18      	it	ne
 8019586:	236a      	movne	r3, #106	; 0x6a
 8019588:	4da0      	ldr	r5, [pc, #640]	; (801980c <_strtod_l+0x834>)
 801958a:	9304      	str	r3, [sp, #16]
 801958c:	4650      	mov	r0, sl
 801958e:	4659      	mov	r1, fp
 8019590:	2300      	movs	r3, #0
 8019592:	f1b8 0f00 	cmp.w	r8, #0
 8019596:	f300 810a 	bgt.w	80197ae <_strtod_l+0x7d6>
 801959a:	b10b      	cbz	r3, 80195a0 <_strtod_l+0x5c8>
 801959c:	4682      	mov	sl, r0
 801959e:	468b      	mov	fp, r1
 80195a0:	9b04      	ldr	r3, [sp, #16]
 80195a2:	b1bb      	cbz	r3, 80195d4 <_strtod_l+0x5fc>
 80195a4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80195a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	4659      	mov	r1, fp
 80195b0:	dd10      	ble.n	80195d4 <_strtod_l+0x5fc>
 80195b2:	2b1f      	cmp	r3, #31
 80195b4:	f340 8107 	ble.w	80197c6 <_strtod_l+0x7ee>
 80195b8:	2b34      	cmp	r3, #52	; 0x34
 80195ba:	bfde      	ittt	le
 80195bc:	3b20      	suble	r3, #32
 80195be:	f04f 32ff 	movle.w	r2, #4294967295
 80195c2:	fa02 f303 	lslle.w	r3, r2, r3
 80195c6:	f04f 0a00 	mov.w	sl, #0
 80195ca:	bfcc      	ite	gt
 80195cc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80195d0:	ea03 0b01 	andle.w	fp, r3, r1
 80195d4:	2200      	movs	r2, #0
 80195d6:	2300      	movs	r3, #0
 80195d8:	4650      	mov	r0, sl
 80195da:	4659      	mov	r1, fp
 80195dc:	f7ef f9ac 	bl	8008938 <__aeabi_dcmpeq>
 80195e0:	2800      	cmp	r0, #0
 80195e2:	d1ac      	bne.n	801953e <_strtod_l+0x566>
 80195e4:	9b07      	ldr	r3, [sp, #28]
 80195e6:	9300      	str	r3, [sp, #0]
 80195e8:	9a05      	ldr	r2, [sp, #20]
 80195ea:	9908      	ldr	r1, [sp, #32]
 80195ec:	4623      	mov	r3, r4
 80195ee:	4648      	mov	r0, r9
 80195f0:	f002 f819 	bl	801b626 <__s2b>
 80195f4:	9007      	str	r0, [sp, #28]
 80195f6:	2800      	cmp	r0, #0
 80195f8:	f43f af08 	beq.w	801940c <_strtod_l+0x434>
 80195fc:	9a06      	ldr	r2, [sp, #24]
 80195fe:	9b06      	ldr	r3, [sp, #24]
 8019600:	2a00      	cmp	r2, #0
 8019602:	f1c3 0300 	rsb	r3, r3, #0
 8019606:	bfa8      	it	ge
 8019608:	2300      	movge	r3, #0
 801960a:	930e      	str	r3, [sp, #56]	; 0x38
 801960c:	2400      	movs	r4, #0
 801960e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019612:	9316      	str	r3, [sp, #88]	; 0x58
 8019614:	46a0      	mov	r8, r4
 8019616:	9b07      	ldr	r3, [sp, #28]
 8019618:	4648      	mov	r0, r9
 801961a:	6859      	ldr	r1, [r3, #4]
 801961c:	f001 ff7d 	bl	801b51a <_Balloc>
 8019620:	9005      	str	r0, [sp, #20]
 8019622:	2800      	cmp	r0, #0
 8019624:	f43f aef6 	beq.w	8019414 <_strtod_l+0x43c>
 8019628:	9b07      	ldr	r3, [sp, #28]
 801962a:	691a      	ldr	r2, [r3, #16]
 801962c:	3202      	adds	r2, #2
 801962e:	f103 010c 	add.w	r1, r3, #12
 8019632:	0092      	lsls	r2, r2, #2
 8019634:	300c      	adds	r0, #12
 8019636:	f7fd ff07 	bl	8017448 <memcpy>
 801963a:	aa1e      	add	r2, sp, #120	; 0x78
 801963c:	a91d      	add	r1, sp, #116	; 0x74
 801963e:	ec4b ab10 	vmov	d0, sl, fp
 8019642:	4648      	mov	r0, r9
 8019644:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8019648:	f002 faa8 	bl	801bb9c <__d2b>
 801964c:	901c      	str	r0, [sp, #112]	; 0x70
 801964e:	2800      	cmp	r0, #0
 8019650:	f43f aee0 	beq.w	8019414 <_strtod_l+0x43c>
 8019654:	2101      	movs	r1, #1
 8019656:	4648      	mov	r0, r9
 8019658:	f002 f871 	bl	801b73e <__i2b>
 801965c:	4680      	mov	r8, r0
 801965e:	2800      	cmp	r0, #0
 8019660:	f43f aed8 	beq.w	8019414 <_strtod_l+0x43c>
 8019664:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8019666:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019668:	2e00      	cmp	r6, #0
 801966a:	bfab      	itete	ge
 801966c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801966e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8019670:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8019672:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8019674:	bfac      	ite	ge
 8019676:	18f7      	addge	r7, r6, r3
 8019678:	1b9d      	sublt	r5, r3, r6
 801967a:	9b04      	ldr	r3, [sp, #16]
 801967c:	1af6      	subs	r6, r6, r3
 801967e:	4416      	add	r6, r2
 8019680:	4b63      	ldr	r3, [pc, #396]	; (8019810 <_strtod_l+0x838>)
 8019682:	3e01      	subs	r6, #1
 8019684:	429e      	cmp	r6, r3
 8019686:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801968a:	f280 80af 	bge.w	80197ec <_strtod_l+0x814>
 801968e:	1b9b      	subs	r3, r3, r6
 8019690:	2b1f      	cmp	r3, #31
 8019692:	eba2 0203 	sub.w	r2, r2, r3
 8019696:	f04f 0101 	mov.w	r1, #1
 801969a:	f300 809b 	bgt.w	80197d4 <_strtod_l+0x7fc>
 801969e:	fa01 f303 	lsl.w	r3, r1, r3
 80196a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80196a4:	2300      	movs	r3, #0
 80196a6:	930a      	str	r3, [sp, #40]	; 0x28
 80196a8:	18be      	adds	r6, r7, r2
 80196aa:	9b04      	ldr	r3, [sp, #16]
 80196ac:	42b7      	cmp	r7, r6
 80196ae:	4415      	add	r5, r2
 80196b0:	441d      	add	r5, r3
 80196b2:	463b      	mov	r3, r7
 80196b4:	bfa8      	it	ge
 80196b6:	4633      	movge	r3, r6
 80196b8:	42ab      	cmp	r3, r5
 80196ba:	bfa8      	it	ge
 80196bc:	462b      	movge	r3, r5
 80196be:	2b00      	cmp	r3, #0
 80196c0:	bfc2      	ittt	gt
 80196c2:	1af6      	subgt	r6, r6, r3
 80196c4:	1aed      	subgt	r5, r5, r3
 80196c6:	1aff      	subgt	r7, r7, r3
 80196c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196ca:	b1bb      	cbz	r3, 80196fc <_strtod_l+0x724>
 80196cc:	4641      	mov	r1, r8
 80196ce:	461a      	mov	r2, r3
 80196d0:	4648      	mov	r0, r9
 80196d2:	f002 f8d3 	bl	801b87c <__pow5mult>
 80196d6:	4680      	mov	r8, r0
 80196d8:	2800      	cmp	r0, #0
 80196da:	f43f ae9b 	beq.w	8019414 <_strtod_l+0x43c>
 80196de:	4601      	mov	r1, r0
 80196e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80196e2:	4648      	mov	r0, r9
 80196e4:	f002 f834 	bl	801b750 <__multiply>
 80196e8:	900c      	str	r0, [sp, #48]	; 0x30
 80196ea:	2800      	cmp	r0, #0
 80196ec:	f43f ae92 	beq.w	8019414 <_strtod_l+0x43c>
 80196f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80196f2:	4648      	mov	r0, r9
 80196f4:	f001 ff45 	bl	801b582 <_Bfree>
 80196f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80196fa:	931c      	str	r3, [sp, #112]	; 0x70
 80196fc:	2e00      	cmp	r6, #0
 80196fe:	dc7a      	bgt.n	80197f6 <_strtod_l+0x81e>
 8019700:	9b06      	ldr	r3, [sp, #24]
 8019702:	2b00      	cmp	r3, #0
 8019704:	dd08      	ble.n	8019718 <_strtod_l+0x740>
 8019706:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019708:	9905      	ldr	r1, [sp, #20]
 801970a:	4648      	mov	r0, r9
 801970c:	f002 f8b6 	bl	801b87c <__pow5mult>
 8019710:	9005      	str	r0, [sp, #20]
 8019712:	2800      	cmp	r0, #0
 8019714:	f43f ae7e 	beq.w	8019414 <_strtod_l+0x43c>
 8019718:	2d00      	cmp	r5, #0
 801971a:	dd08      	ble.n	801972e <_strtod_l+0x756>
 801971c:	462a      	mov	r2, r5
 801971e:	9905      	ldr	r1, [sp, #20]
 8019720:	4648      	mov	r0, r9
 8019722:	f002 f8f9 	bl	801b918 <__lshift>
 8019726:	9005      	str	r0, [sp, #20]
 8019728:	2800      	cmp	r0, #0
 801972a:	f43f ae73 	beq.w	8019414 <_strtod_l+0x43c>
 801972e:	2f00      	cmp	r7, #0
 8019730:	dd08      	ble.n	8019744 <_strtod_l+0x76c>
 8019732:	4641      	mov	r1, r8
 8019734:	463a      	mov	r2, r7
 8019736:	4648      	mov	r0, r9
 8019738:	f002 f8ee 	bl	801b918 <__lshift>
 801973c:	4680      	mov	r8, r0
 801973e:	2800      	cmp	r0, #0
 8019740:	f43f ae68 	beq.w	8019414 <_strtod_l+0x43c>
 8019744:	9a05      	ldr	r2, [sp, #20]
 8019746:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019748:	4648      	mov	r0, r9
 801974a:	f002 f953 	bl	801b9f4 <__mdiff>
 801974e:	4604      	mov	r4, r0
 8019750:	2800      	cmp	r0, #0
 8019752:	f43f ae5f 	beq.w	8019414 <_strtod_l+0x43c>
 8019756:	68c3      	ldr	r3, [r0, #12]
 8019758:	930c      	str	r3, [sp, #48]	; 0x30
 801975a:	2300      	movs	r3, #0
 801975c:	60c3      	str	r3, [r0, #12]
 801975e:	4641      	mov	r1, r8
 8019760:	f002 f92e 	bl	801b9c0 <__mcmp>
 8019764:	2800      	cmp	r0, #0
 8019766:	da55      	bge.n	8019814 <_strtod_l+0x83c>
 8019768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801976a:	b9e3      	cbnz	r3, 80197a6 <_strtod_l+0x7ce>
 801976c:	f1ba 0f00 	cmp.w	sl, #0
 8019770:	d119      	bne.n	80197a6 <_strtod_l+0x7ce>
 8019772:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019776:	b9b3      	cbnz	r3, 80197a6 <_strtod_l+0x7ce>
 8019778:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801977c:	0d1b      	lsrs	r3, r3, #20
 801977e:	051b      	lsls	r3, r3, #20
 8019780:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019784:	d90f      	bls.n	80197a6 <_strtod_l+0x7ce>
 8019786:	6963      	ldr	r3, [r4, #20]
 8019788:	b913      	cbnz	r3, 8019790 <_strtod_l+0x7b8>
 801978a:	6923      	ldr	r3, [r4, #16]
 801978c:	2b01      	cmp	r3, #1
 801978e:	dd0a      	ble.n	80197a6 <_strtod_l+0x7ce>
 8019790:	4621      	mov	r1, r4
 8019792:	2201      	movs	r2, #1
 8019794:	4648      	mov	r0, r9
 8019796:	f002 f8bf 	bl	801b918 <__lshift>
 801979a:	4641      	mov	r1, r8
 801979c:	4604      	mov	r4, r0
 801979e:	f002 f90f 	bl	801b9c0 <__mcmp>
 80197a2:	2800      	cmp	r0, #0
 80197a4:	dc67      	bgt.n	8019876 <_strtod_l+0x89e>
 80197a6:	9b04      	ldr	r3, [sp, #16]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d171      	bne.n	8019890 <_strtod_l+0x8b8>
 80197ac:	e63d      	b.n	801942a <_strtod_l+0x452>
 80197ae:	f018 0f01 	tst.w	r8, #1
 80197b2:	d004      	beq.n	80197be <_strtod_l+0x7e6>
 80197b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80197b8:	f7ee fe56 	bl	8008468 <__aeabi_dmul>
 80197bc:	2301      	movs	r3, #1
 80197be:	ea4f 0868 	mov.w	r8, r8, asr #1
 80197c2:	3508      	adds	r5, #8
 80197c4:	e6e5      	b.n	8019592 <_strtod_l+0x5ba>
 80197c6:	f04f 32ff 	mov.w	r2, #4294967295
 80197ca:	fa02 f303 	lsl.w	r3, r2, r3
 80197ce:	ea03 0a0a 	and.w	sl, r3, sl
 80197d2:	e6ff      	b.n	80195d4 <_strtod_l+0x5fc>
 80197d4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80197d8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80197dc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80197e0:	36e2      	adds	r6, #226	; 0xe2
 80197e2:	fa01 f306 	lsl.w	r3, r1, r6
 80197e6:	930a      	str	r3, [sp, #40]	; 0x28
 80197e8:	910f      	str	r1, [sp, #60]	; 0x3c
 80197ea:	e75d      	b.n	80196a8 <_strtod_l+0x6d0>
 80197ec:	2300      	movs	r3, #0
 80197ee:	930a      	str	r3, [sp, #40]	; 0x28
 80197f0:	2301      	movs	r3, #1
 80197f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80197f4:	e758      	b.n	80196a8 <_strtod_l+0x6d0>
 80197f6:	4632      	mov	r2, r6
 80197f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80197fa:	4648      	mov	r0, r9
 80197fc:	f002 f88c 	bl	801b918 <__lshift>
 8019800:	901c      	str	r0, [sp, #112]	; 0x70
 8019802:	2800      	cmp	r0, #0
 8019804:	f47f af7c 	bne.w	8019700 <_strtod_l+0x728>
 8019808:	e604      	b.n	8019414 <_strtod_l+0x43c>
 801980a:	bf00      	nop
 801980c:	0801c7d0 	.word	0x0801c7d0
 8019810:	fffffc02 	.word	0xfffffc02
 8019814:	465d      	mov	r5, fp
 8019816:	f040 8086 	bne.w	8019926 <_strtod_l+0x94e>
 801981a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801981c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019820:	b32a      	cbz	r2, 801986e <_strtod_l+0x896>
 8019822:	4aaf      	ldr	r2, [pc, #700]	; (8019ae0 <_strtod_l+0xb08>)
 8019824:	4293      	cmp	r3, r2
 8019826:	d153      	bne.n	80198d0 <_strtod_l+0x8f8>
 8019828:	9b04      	ldr	r3, [sp, #16]
 801982a:	4650      	mov	r0, sl
 801982c:	b1d3      	cbz	r3, 8019864 <_strtod_l+0x88c>
 801982e:	4aad      	ldr	r2, [pc, #692]	; (8019ae4 <_strtod_l+0xb0c>)
 8019830:	402a      	ands	r2, r5
 8019832:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8019836:	f04f 31ff 	mov.w	r1, #4294967295
 801983a:	d816      	bhi.n	801986a <_strtod_l+0x892>
 801983c:	0d12      	lsrs	r2, r2, #20
 801983e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8019842:	fa01 f303 	lsl.w	r3, r1, r3
 8019846:	4298      	cmp	r0, r3
 8019848:	d142      	bne.n	80198d0 <_strtod_l+0x8f8>
 801984a:	4ba7      	ldr	r3, [pc, #668]	; (8019ae8 <_strtod_l+0xb10>)
 801984c:	429d      	cmp	r5, r3
 801984e:	d102      	bne.n	8019856 <_strtod_l+0x87e>
 8019850:	3001      	adds	r0, #1
 8019852:	f43f addf 	beq.w	8019414 <_strtod_l+0x43c>
 8019856:	4ba3      	ldr	r3, [pc, #652]	; (8019ae4 <_strtod_l+0xb0c>)
 8019858:	402b      	ands	r3, r5
 801985a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801985e:	f04f 0a00 	mov.w	sl, #0
 8019862:	e7a0      	b.n	80197a6 <_strtod_l+0x7ce>
 8019864:	f04f 33ff 	mov.w	r3, #4294967295
 8019868:	e7ed      	b.n	8019846 <_strtod_l+0x86e>
 801986a:	460b      	mov	r3, r1
 801986c:	e7eb      	b.n	8019846 <_strtod_l+0x86e>
 801986e:	bb7b      	cbnz	r3, 80198d0 <_strtod_l+0x8f8>
 8019870:	f1ba 0f00 	cmp.w	sl, #0
 8019874:	d12c      	bne.n	80198d0 <_strtod_l+0x8f8>
 8019876:	9904      	ldr	r1, [sp, #16]
 8019878:	4a9a      	ldr	r2, [pc, #616]	; (8019ae4 <_strtod_l+0xb0c>)
 801987a:	465b      	mov	r3, fp
 801987c:	b1f1      	cbz	r1, 80198bc <_strtod_l+0x8e4>
 801987e:	ea02 010b 	and.w	r1, r2, fp
 8019882:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019886:	dc19      	bgt.n	80198bc <_strtod_l+0x8e4>
 8019888:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801988c:	f77f ae5b 	ble.w	8019546 <_strtod_l+0x56e>
 8019890:	4a96      	ldr	r2, [pc, #600]	; (8019aec <_strtod_l+0xb14>)
 8019892:	2300      	movs	r3, #0
 8019894:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8019898:	4650      	mov	r0, sl
 801989a:	4659      	mov	r1, fp
 801989c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80198a0:	f7ee fde2 	bl	8008468 <__aeabi_dmul>
 80198a4:	4682      	mov	sl, r0
 80198a6:	468b      	mov	fp, r1
 80198a8:	2900      	cmp	r1, #0
 80198aa:	f47f adbe 	bne.w	801942a <_strtod_l+0x452>
 80198ae:	2800      	cmp	r0, #0
 80198b0:	f47f adbb 	bne.w	801942a <_strtod_l+0x452>
 80198b4:	2322      	movs	r3, #34	; 0x22
 80198b6:	f8c9 3000 	str.w	r3, [r9]
 80198ba:	e5b6      	b.n	801942a <_strtod_l+0x452>
 80198bc:	4013      	ands	r3, r2
 80198be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80198c2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80198c6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80198ca:	f04f 3aff 	mov.w	sl, #4294967295
 80198ce:	e76a      	b.n	80197a6 <_strtod_l+0x7ce>
 80198d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80198d2:	b193      	cbz	r3, 80198fa <_strtod_l+0x922>
 80198d4:	422b      	tst	r3, r5
 80198d6:	f43f af66 	beq.w	80197a6 <_strtod_l+0x7ce>
 80198da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80198dc:	9a04      	ldr	r2, [sp, #16]
 80198de:	4650      	mov	r0, sl
 80198e0:	4659      	mov	r1, fp
 80198e2:	b173      	cbz	r3, 8019902 <_strtod_l+0x92a>
 80198e4:	f7ff fb59 	bl	8018f9a <sulp>
 80198e8:	4602      	mov	r2, r0
 80198ea:	460b      	mov	r3, r1
 80198ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80198f0:	f7ee fc04 	bl	80080fc <__adddf3>
 80198f4:	4682      	mov	sl, r0
 80198f6:	468b      	mov	fp, r1
 80198f8:	e755      	b.n	80197a6 <_strtod_l+0x7ce>
 80198fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80198fc:	ea13 0f0a 	tst.w	r3, sl
 8019900:	e7e9      	b.n	80198d6 <_strtod_l+0x8fe>
 8019902:	f7ff fb4a 	bl	8018f9a <sulp>
 8019906:	4602      	mov	r2, r0
 8019908:	460b      	mov	r3, r1
 801990a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801990e:	f7ee fbf3 	bl	80080f8 <__aeabi_dsub>
 8019912:	2200      	movs	r2, #0
 8019914:	2300      	movs	r3, #0
 8019916:	4682      	mov	sl, r0
 8019918:	468b      	mov	fp, r1
 801991a:	f7ef f80d 	bl	8008938 <__aeabi_dcmpeq>
 801991e:	2800      	cmp	r0, #0
 8019920:	f47f ae11 	bne.w	8019546 <_strtod_l+0x56e>
 8019924:	e73f      	b.n	80197a6 <_strtod_l+0x7ce>
 8019926:	4641      	mov	r1, r8
 8019928:	4620      	mov	r0, r4
 801992a:	f002 f986 	bl	801bc3a <__ratio>
 801992e:	ec57 6b10 	vmov	r6, r7, d0
 8019932:	2200      	movs	r2, #0
 8019934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019938:	ee10 0a10 	vmov	r0, s0
 801993c:	4639      	mov	r1, r7
 801993e:	f7ef f80f 	bl	8008960 <__aeabi_dcmple>
 8019942:	2800      	cmp	r0, #0
 8019944:	d077      	beq.n	8019a36 <_strtod_l+0xa5e>
 8019946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019948:	2b00      	cmp	r3, #0
 801994a:	d04a      	beq.n	80199e2 <_strtod_l+0xa0a>
 801994c:	4b68      	ldr	r3, [pc, #416]	; (8019af0 <_strtod_l+0xb18>)
 801994e:	2200      	movs	r2, #0
 8019950:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8019954:	4f66      	ldr	r7, [pc, #408]	; (8019af0 <_strtod_l+0xb18>)
 8019956:	2600      	movs	r6, #0
 8019958:	4b62      	ldr	r3, [pc, #392]	; (8019ae4 <_strtod_l+0xb0c>)
 801995a:	402b      	ands	r3, r5
 801995c:	930f      	str	r3, [sp, #60]	; 0x3c
 801995e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019960:	4b64      	ldr	r3, [pc, #400]	; (8019af4 <_strtod_l+0xb1c>)
 8019962:	429a      	cmp	r2, r3
 8019964:	f040 80ce 	bne.w	8019b04 <_strtod_l+0xb2c>
 8019968:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801996c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019970:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8019974:	ec4b ab10 	vmov	d0, sl, fp
 8019978:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801997c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019980:	f002 f896 	bl	801bab0 <__ulp>
 8019984:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019988:	ec53 2b10 	vmov	r2, r3, d0
 801998c:	f7ee fd6c 	bl	8008468 <__aeabi_dmul>
 8019990:	4652      	mov	r2, sl
 8019992:	465b      	mov	r3, fp
 8019994:	f7ee fbb2 	bl	80080fc <__adddf3>
 8019998:	460b      	mov	r3, r1
 801999a:	4952      	ldr	r1, [pc, #328]	; (8019ae4 <_strtod_l+0xb0c>)
 801999c:	4a56      	ldr	r2, [pc, #344]	; (8019af8 <_strtod_l+0xb20>)
 801999e:	4019      	ands	r1, r3
 80199a0:	4291      	cmp	r1, r2
 80199a2:	4682      	mov	sl, r0
 80199a4:	d95b      	bls.n	8019a5e <_strtod_l+0xa86>
 80199a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199a8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80199ac:	4293      	cmp	r3, r2
 80199ae:	d103      	bne.n	80199b8 <_strtod_l+0x9e0>
 80199b0:	9b08      	ldr	r3, [sp, #32]
 80199b2:	3301      	adds	r3, #1
 80199b4:	f43f ad2e 	beq.w	8019414 <_strtod_l+0x43c>
 80199b8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8019ae8 <_strtod_l+0xb10>
 80199bc:	f04f 3aff 	mov.w	sl, #4294967295
 80199c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80199c2:	4648      	mov	r0, r9
 80199c4:	f001 fddd 	bl	801b582 <_Bfree>
 80199c8:	9905      	ldr	r1, [sp, #20]
 80199ca:	4648      	mov	r0, r9
 80199cc:	f001 fdd9 	bl	801b582 <_Bfree>
 80199d0:	4641      	mov	r1, r8
 80199d2:	4648      	mov	r0, r9
 80199d4:	f001 fdd5 	bl	801b582 <_Bfree>
 80199d8:	4621      	mov	r1, r4
 80199da:	4648      	mov	r0, r9
 80199dc:	f001 fdd1 	bl	801b582 <_Bfree>
 80199e0:	e619      	b.n	8019616 <_strtod_l+0x63e>
 80199e2:	f1ba 0f00 	cmp.w	sl, #0
 80199e6:	d11a      	bne.n	8019a1e <_strtod_l+0xa46>
 80199e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80199ec:	b9eb      	cbnz	r3, 8019a2a <_strtod_l+0xa52>
 80199ee:	2200      	movs	r2, #0
 80199f0:	4b3f      	ldr	r3, [pc, #252]	; (8019af0 <_strtod_l+0xb18>)
 80199f2:	4630      	mov	r0, r6
 80199f4:	4639      	mov	r1, r7
 80199f6:	f7ee ffa9 	bl	800894c <__aeabi_dcmplt>
 80199fa:	b9c8      	cbnz	r0, 8019a30 <_strtod_l+0xa58>
 80199fc:	4630      	mov	r0, r6
 80199fe:	4639      	mov	r1, r7
 8019a00:	2200      	movs	r2, #0
 8019a02:	4b3e      	ldr	r3, [pc, #248]	; (8019afc <_strtod_l+0xb24>)
 8019a04:	f7ee fd30 	bl	8008468 <__aeabi_dmul>
 8019a08:	4606      	mov	r6, r0
 8019a0a:	460f      	mov	r7, r1
 8019a0c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8019a10:	9618      	str	r6, [sp, #96]	; 0x60
 8019a12:	9319      	str	r3, [sp, #100]	; 0x64
 8019a14:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8019a18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8019a1c:	e79c      	b.n	8019958 <_strtod_l+0x980>
 8019a1e:	f1ba 0f01 	cmp.w	sl, #1
 8019a22:	d102      	bne.n	8019a2a <_strtod_l+0xa52>
 8019a24:	2d00      	cmp	r5, #0
 8019a26:	f43f ad8e 	beq.w	8019546 <_strtod_l+0x56e>
 8019a2a:	2200      	movs	r2, #0
 8019a2c:	4b34      	ldr	r3, [pc, #208]	; (8019b00 <_strtod_l+0xb28>)
 8019a2e:	e78f      	b.n	8019950 <_strtod_l+0x978>
 8019a30:	2600      	movs	r6, #0
 8019a32:	4f32      	ldr	r7, [pc, #200]	; (8019afc <_strtod_l+0xb24>)
 8019a34:	e7ea      	b.n	8019a0c <_strtod_l+0xa34>
 8019a36:	4b31      	ldr	r3, [pc, #196]	; (8019afc <_strtod_l+0xb24>)
 8019a38:	4630      	mov	r0, r6
 8019a3a:	4639      	mov	r1, r7
 8019a3c:	2200      	movs	r2, #0
 8019a3e:	f7ee fd13 	bl	8008468 <__aeabi_dmul>
 8019a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a44:	4606      	mov	r6, r0
 8019a46:	460f      	mov	r7, r1
 8019a48:	b933      	cbnz	r3, 8019a58 <_strtod_l+0xa80>
 8019a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019a4e:	9010      	str	r0, [sp, #64]	; 0x40
 8019a50:	9311      	str	r3, [sp, #68]	; 0x44
 8019a52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019a56:	e7df      	b.n	8019a18 <_strtod_l+0xa40>
 8019a58:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8019a5c:	e7f9      	b.n	8019a52 <_strtod_l+0xa7a>
 8019a5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8019a62:	9b04      	ldr	r3, [sp, #16]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d1ab      	bne.n	80199c0 <_strtod_l+0x9e8>
 8019a68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019a6c:	0d1b      	lsrs	r3, r3, #20
 8019a6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019a70:	051b      	lsls	r3, r3, #20
 8019a72:	429a      	cmp	r2, r3
 8019a74:	465d      	mov	r5, fp
 8019a76:	d1a3      	bne.n	80199c0 <_strtod_l+0x9e8>
 8019a78:	4639      	mov	r1, r7
 8019a7a:	4630      	mov	r0, r6
 8019a7c:	f7ee ffa4 	bl	80089c8 <__aeabi_d2iz>
 8019a80:	f7ee fc88 	bl	8008394 <__aeabi_i2d>
 8019a84:	460b      	mov	r3, r1
 8019a86:	4602      	mov	r2, r0
 8019a88:	4639      	mov	r1, r7
 8019a8a:	4630      	mov	r0, r6
 8019a8c:	f7ee fb34 	bl	80080f8 <__aeabi_dsub>
 8019a90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a92:	4606      	mov	r6, r0
 8019a94:	460f      	mov	r7, r1
 8019a96:	b933      	cbnz	r3, 8019aa6 <_strtod_l+0xace>
 8019a98:	f1ba 0f00 	cmp.w	sl, #0
 8019a9c:	d103      	bne.n	8019aa6 <_strtod_l+0xace>
 8019a9e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8019aa2:	2d00      	cmp	r5, #0
 8019aa4:	d06d      	beq.n	8019b82 <_strtod_l+0xbaa>
 8019aa6:	a30a      	add	r3, pc, #40	; (adr r3, 8019ad0 <_strtod_l+0xaf8>)
 8019aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aac:	4630      	mov	r0, r6
 8019aae:	4639      	mov	r1, r7
 8019ab0:	f7ee ff4c 	bl	800894c <__aeabi_dcmplt>
 8019ab4:	2800      	cmp	r0, #0
 8019ab6:	f47f acb8 	bne.w	801942a <_strtod_l+0x452>
 8019aba:	a307      	add	r3, pc, #28	; (adr r3, 8019ad8 <_strtod_l+0xb00>)
 8019abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ac0:	4630      	mov	r0, r6
 8019ac2:	4639      	mov	r1, r7
 8019ac4:	f7ee ff60 	bl	8008988 <__aeabi_dcmpgt>
 8019ac8:	2800      	cmp	r0, #0
 8019aca:	f43f af79 	beq.w	80199c0 <_strtod_l+0x9e8>
 8019ace:	e4ac      	b.n	801942a <_strtod_l+0x452>
 8019ad0:	94a03595 	.word	0x94a03595
 8019ad4:	3fdfffff 	.word	0x3fdfffff
 8019ad8:	35afe535 	.word	0x35afe535
 8019adc:	3fe00000 	.word	0x3fe00000
 8019ae0:	000fffff 	.word	0x000fffff
 8019ae4:	7ff00000 	.word	0x7ff00000
 8019ae8:	7fefffff 	.word	0x7fefffff
 8019aec:	39500000 	.word	0x39500000
 8019af0:	3ff00000 	.word	0x3ff00000
 8019af4:	7fe00000 	.word	0x7fe00000
 8019af8:	7c9fffff 	.word	0x7c9fffff
 8019afc:	3fe00000 	.word	0x3fe00000
 8019b00:	bff00000 	.word	0xbff00000
 8019b04:	9b04      	ldr	r3, [sp, #16]
 8019b06:	b333      	cbz	r3, 8019b56 <_strtod_l+0xb7e>
 8019b08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b0a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019b0e:	d822      	bhi.n	8019b56 <_strtod_l+0xb7e>
 8019b10:	a327      	add	r3, pc, #156	; (adr r3, 8019bb0 <_strtod_l+0xbd8>)
 8019b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b16:	4630      	mov	r0, r6
 8019b18:	4639      	mov	r1, r7
 8019b1a:	f7ee ff21 	bl	8008960 <__aeabi_dcmple>
 8019b1e:	b1a0      	cbz	r0, 8019b4a <_strtod_l+0xb72>
 8019b20:	4639      	mov	r1, r7
 8019b22:	4630      	mov	r0, r6
 8019b24:	f7ee ff78 	bl	8008a18 <__aeabi_d2uiz>
 8019b28:	2800      	cmp	r0, #0
 8019b2a:	bf08      	it	eq
 8019b2c:	2001      	moveq	r0, #1
 8019b2e:	f7ee fc21 	bl	8008374 <__aeabi_ui2d>
 8019b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b34:	4606      	mov	r6, r0
 8019b36:	460f      	mov	r7, r1
 8019b38:	bb03      	cbnz	r3, 8019b7c <_strtod_l+0xba4>
 8019b3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019b3e:	9012      	str	r0, [sp, #72]	; 0x48
 8019b40:	9313      	str	r3, [sp, #76]	; 0x4c
 8019b42:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8019b46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8019b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019b4e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8019b52:	1a9b      	subs	r3, r3, r2
 8019b54:	930b      	str	r3, [sp, #44]	; 0x2c
 8019b56:	ed9d 0b08 	vldr	d0, [sp, #32]
 8019b5a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8019b5e:	f001 ffa7 	bl	801bab0 <__ulp>
 8019b62:	4650      	mov	r0, sl
 8019b64:	ec53 2b10 	vmov	r2, r3, d0
 8019b68:	4659      	mov	r1, fp
 8019b6a:	f7ee fc7d 	bl	8008468 <__aeabi_dmul>
 8019b6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019b72:	f7ee fac3 	bl	80080fc <__adddf3>
 8019b76:	4682      	mov	sl, r0
 8019b78:	468b      	mov	fp, r1
 8019b7a:	e772      	b.n	8019a62 <_strtod_l+0xa8a>
 8019b7c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8019b80:	e7df      	b.n	8019b42 <_strtod_l+0xb6a>
 8019b82:	a30d      	add	r3, pc, #52	; (adr r3, 8019bb8 <_strtod_l+0xbe0>)
 8019b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b88:	f7ee fee0 	bl	800894c <__aeabi_dcmplt>
 8019b8c:	e79c      	b.n	8019ac8 <_strtod_l+0xaf0>
 8019b8e:	2300      	movs	r3, #0
 8019b90:	930d      	str	r3, [sp, #52]	; 0x34
 8019b92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019b94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019b96:	6013      	str	r3, [r2, #0]
 8019b98:	f7ff ba61 	b.w	801905e <_strtod_l+0x86>
 8019b9c:	2b65      	cmp	r3, #101	; 0x65
 8019b9e:	f04f 0200 	mov.w	r2, #0
 8019ba2:	f43f ab4e 	beq.w	8019242 <_strtod_l+0x26a>
 8019ba6:	2101      	movs	r1, #1
 8019ba8:	4614      	mov	r4, r2
 8019baa:	9104      	str	r1, [sp, #16]
 8019bac:	f7ff bacb 	b.w	8019146 <_strtod_l+0x16e>
 8019bb0:	ffc00000 	.word	0xffc00000
 8019bb4:	41dfffff 	.word	0x41dfffff
 8019bb8:	94a03595 	.word	0x94a03595
 8019bbc:	3fcfffff 	.word	0x3fcfffff

08019bc0 <_strtod_r>:
 8019bc0:	4b05      	ldr	r3, [pc, #20]	; (8019bd8 <_strtod_r+0x18>)
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	b410      	push	{r4}
 8019bc6:	6a1b      	ldr	r3, [r3, #32]
 8019bc8:	4c04      	ldr	r4, [pc, #16]	; (8019bdc <_strtod_r+0x1c>)
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	bf08      	it	eq
 8019bce:	4623      	moveq	r3, r4
 8019bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019bd4:	f7ff ba00 	b.w	8018fd8 <_strtod_l>
 8019bd8:	2000002c 	.word	0x2000002c
 8019bdc:	20000090 	.word	0x20000090

08019be0 <_strtol_l.isra.0>:
 8019be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019be4:	4680      	mov	r8, r0
 8019be6:	4689      	mov	r9, r1
 8019be8:	4692      	mov	sl, r2
 8019bea:	461e      	mov	r6, r3
 8019bec:	460f      	mov	r7, r1
 8019bee:	463d      	mov	r5, r7
 8019bf0:	9808      	ldr	r0, [sp, #32]
 8019bf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019bf6:	f001 fc27 	bl	801b448 <__locale_ctype_ptr_l>
 8019bfa:	4420      	add	r0, r4
 8019bfc:	7843      	ldrb	r3, [r0, #1]
 8019bfe:	f013 0308 	ands.w	r3, r3, #8
 8019c02:	d132      	bne.n	8019c6a <_strtol_l.isra.0+0x8a>
 8019c04:	2c2d      	cmp	r4, #45	; 0x2d
 8019c06:	d132      	bne.n	8019c6e <_strtol_l.isra.0+0x8e>
 8019c08:	787c      	ldrb	r4, [r7, #1]
 8019c0a:	1cbd      	adds	r5, r7, #2
 8019c0c:	2201      	movs	r2, #1
 8019c0e:	2e00      	cmp	r6, #0
 8019c10:	d05d      	beq.n	8019cce <_strtol_l.isra.0+0xee>
 8019c12:	2e10      	cmp	r6, #16
 8019c14:	d109      	bne.n	8019c2a <_strtol_l.isra.0+0x4a>
 8019c16:	2c30      	cmp	r4, #48	; 0x30
 8019c18:	d107      	bne.n	8019c2a <_strtol_l.isra.0+0x4a>
 8019c1a:	782b      	ldrb	r3, [r5, #0]
 8019c1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019c20:	2b58      	cmp	r3, #88	; 0x58
 8019c22:	d14f      	bne.n	8019cc4 <_strtol_l.isra.0+0xe4>
 8019c24:	786c      	ldrb	r4, [r5, #1]
 8019c26:	2610      	movs	r6, #16
 8019c28:	3502      	adds	r5, #2
 8019c2a:	2a00      	cmp	r2, #0
 8019c2c:	bf14      	ite	ne
 8019c2e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8019c32:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8019c36:	2700      	movs	r7, #0
 8019c38:	fbb1 fcf6 	udiv	ip, r1, r6
 8019c3c:	4638      	mov	r0, r7
 8019c3e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8019c42:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8019c46:	2b09      	cmp	r3, #9
 8019c48:	d817      	bhi.n	8019c7a <_strtol_l.isra.0+0x9a>
 8019c4a:	461c      	mov	r4, r3
 8019c4c:	42a6      	cmp	r6, r4
 8019c4e:	dd23      	ble.n	8019c98 <_strtol_l.isra.0+0xb8>
 8019c50:	1c7b      	adds	r3, r7, #1
 8019c52:	d007      	beq.n	8019c64 <_strtol_l.isra.0+0x84>
 8019c54:	4584      	cmp	ip, r0
 8019c56:	d31c      	bcc.n	8019c92 <_strtol_l.isra.0+0xb2>
 8019c58:	d101      	bne.n	8019c5e <_strtol_l.isra.0+0x7e>
 8019c5a:	45a6      	cmp	lr, r4
 8019c5c:	db19      	blt.n	8019c92 <_strtol_l.isra.0+0xb2>
 8019c5e:	fb00 4006 	mla	r0, r0, r6, r4
 8019c62:	2701      	movs	r7, #1
 8019c64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019c68:	e7eb      	b.n	8019c42 <_strtol_l.isra.0+0x62>
 8019c6a:	462f      	mov	r7, r5
 8019c6c:	e7bf      	b.n	8019bee <_strtol_l.isra.0+0xe>
 8019c6e:	2c2b      	cmp	r4, #43	; 0x2b
 8019c70:	bf04      	itt	eq
 8019c72:	1cbd      	addeq	r5, r7, #2
 8019c74:	787c      	ldrbeq	r4, [r7, #1]
 8019c76:	461a      	mov	r2, r3
 8019c78:	e7c9      	b.n	8019c0e <_strtol_l.isra.0+0x2e>
 8019c7a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8019c7e:	2b19      	cmp	r3, #25
 8019c80:	d801      	bhi.n	8019c86 <_strtol_l.isra.0+0xa6>
 8019c82:	3c37      	subs	r4, #55	; 0x37
 8019c84:	e7e2      	b.n	8019c4c <_strtol_l.isra.0+0x6c>
 8019c86:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8019c8a:	2b19      	cmp	r3, #25
 8019c8c:	d804      	bhi.n	8019c98 <_strtol_l.isra.0+0xb8>
 8019c8e:	3c57      	subs	r4, #87	; 0x57
 8019c90:	e7dc      	b.n	8019c4c <_strtol_l.isra.0+0x6c>
 8019c92:	f04f 37ff 	mov.w	r7, #4294967295
 8019c96:	e7e5      	b.n	8019c64 <_strtol_l.isra.0+0x84>
 8019c98:	1c7b      	adds	r3, r7, #1
 8019c9a:	d108      	bne.n	8019cae <_strtol_l.isra.0+0xce>
 8019c9c:	2322      	movs	r3, #34	; 0x22
 8019c9e:	f8c8 3000 	str.w	r3, [r8]
 8019ca2:	4608      	mov	r0, r1
 8019ca4:	f1ba 0f00 	cmp.w	sl, #0
 8019ca8:	d107      	bne.n	8019cba <_strtol_l.isra.0+0xda>
 8019caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cae:	b102      	cbz	r2, 8019cb2 <_strtol_l.isra.0+0xd2>
 8019cb0:	4240      	negs	r0, r0
 8019cb2:	f1ba 0f00 	cmp.w	sl, #0
 8019cb6:	d0f8      	beq.n	8019caa <_strtol_l.isra.0+0xca>
 8019cb8:	b10f      	cbz	r7, 8019cbe <_strtol_l.isra.0+0xde>
 8019cba:	f105 39ff 	add.w	r9, r5, #4294967295
 8019cbe:	f8ca 9000 	str.w	r9, [sl]
 8019cc2:	e7f2      	b.n	8019caa <_strtol_l.isra.0+0xca>
 8019cc4:	2430      	movs	r4, #48	; 0x30
 8019cc6:	2e00      	cmp	r6, #0
 8019cc8:	d1af      	bne.n	8019c2a <_strtol_l.isra.0+0x4a>
 8019cca:	2608      	movs	r6, #8
 8019ccc:	e7ad      	b.n	8019c2a <_strtol_l.isra.0+0x4a>
 8019cce:	2c30      	cmp	r4, #48	; 0x30
 8019cd0:	d0a3      	beq.n	8019c1a <_strtol_l.isra.0+0x3a>
 8019cd2:	260a      	movs	r6, #10
 8019cd4:	e7a9      	b.n	8019c2a <_strtol_l.isra.0+0x4a>
	...

08019cd8 <_strtol_r>:
 8019cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019cda:	4c06      	ldr	r4, [pc, #24]	; (8019cf4 <_strtol_r+0x1c>)
 8019cdc:	4d06      	ldr	r5, [pc, #24]	; (8019cf8 <_strtol_r+0x20>)
 8019cde:	6824      	ldr	r4, [r4, #0]
 8019ce0:	6a24      	ldr	r4, [r4, #32]
 8019ce2:	2c00      	cmp	r4, #0
 8019ce4:	bf08      	it	eq
 8019ce6:	462c      	moveq	r4, r5
 8019ce8:	9400      	str	r4, [sp, #0]
 8019cea:	f7ff ff79 	bl	8019be0 <_strtol_l.isra.0>
 8019cee:	b003      	add	sp, #12
 8019cf0:	bd30      	pop	{r4, r5, pc}
 8019cf2:	bf00      	nop
 8019cf4:	2000002c 	.word	0x2000002c
 8019cf8:	20000090 	.word	0x20000090

08019cfc <_strtoul_l.isra.0>:
 8019cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d00:	4680      	mov	r8, r0
 8019d02:	4689      	mov	r9, r1
 8019d04:	4692      	mov	sl, r2
 8019d06:	461e      	mov	r6, r3
 8019d08:	460f      	mov	r7, r1
 8019d0a:	463d      	mov	r5, r7
 8019d0c:	9808      	ldr	r0, [sp, #32]
 8019d0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019d12:	f001 fb99 	bl	801b448 <__locale_ctype_ptr_l>
 8019d16:	4420      	add	r0, r4
 8019d18:	7843      	ldrb	r3, [r0, #1]
 8019d1a:	f013 0308 	ands.w	r3, r3, #8
 8019d1e:	d130      	bne.n	8019d82 <_strtoul_l.isra.0+0x86>
 8019d20:	2c2d      	cmp	r4, #45	; 0x2d
 8019d22:	d130      	bne.n	8019d86 <_strtoul_l.isra.0+0x8a>
 8019d24:	787c      	ldrb	r4, [r7, #1]
 8019d26:	1cbd      	adds	r5, r7, #2
 8019d28:	2101      	movs	r1, #1
 8019d2a:	2e00      	cmp	r6, #0
 8019d2c:	d05c      	beq.n	8019de8 <_strtoul_l.isra.0+0xec>
 8019d2e:	2e10      	cmp	r6, #16
 8019d30:	d109      	bne.n	8019d46 <_strtoul_l.isra.0+0x4a>
 8019d32:	2c30      	cmp	r4, #48	; 0x30
 8019d34:	d107      	bne.n	8019d46 <_strtoul_l.isra.0+0x4a>
 8019d36:	782b      	ldrb	r3, [r5, #0]
 8019d38:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019d3c:	2b58      	cmp	r3, #88	; 0x58
 8019d3e:	d14e      	bne.n	8019dde <_strtoul_l.isra.0+0xe2>
 8019d40:	786c      	ldrb	r4, [r5, #1]
 8019d42:	2610      	movs	r6, #16
 8019d44:	3502      	adds	r5, #2
 8019d46:	f04f 32ff 	mov.w	r2, #4294967295
 8019d4a:	2300      	movs	r3, #0
 8019d4c:	fbb2 f2f6 	udiv	r2, r2, r6
 8019d50:	fb06 fc02 	mul.w	ip, r6, r2
 8019d54:	ea6f 0c0c 	mvn.w	ip, ip
 8019d58:	4618      	mov	r0, r3
 8019d5a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019d5e:	2f09      	cmp	r7, #9
 8019d60:	d817      	bhi.n	8019d92 <_strtoul_l.isra.0+0x96>
 8019d62:	463c      	mov	r4, r7
 8019d64:	42a6      	cmp	r6, r4
 8019d66:	dd23      	ble.n	8019db0 <_strtoul_l.isra.0+0xb4>
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	db1e      	blt.n	8019daa <_strtoul_l.isra.0+0xae>
 8019d6c:	4282      	cmp	r2, r0
 8019d6e:	d31c      	bcc.n	8019daa <_strtoul_l.isra.0+0xae>
 8019d70:	d101      	bne.n	8019d76 <_strtoul_l.isra.0+0x7a>
 8019d72:	45a4      	cmp	ip, r4
 8019d74:	db19      	blt.n	8019daa <_strtoul_l.isra.0+0xae>
 8019d76:	fb00 4006 	mla	r0, r0, r6, r4
 8019d7a:	2301      	movs	r3, #1
 8019d7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019d80:	e7eb      	b.n	8019d5a <_strtoul_l.isra.0+0x5e>
 8019d82:	462f      	mov	r7, r5
 8019d84:	e7c1      	b.n	8019d0a <_strtoul_l.isra.0+0xe>
 8019d86:	2c2b      	cmp	r4, #43	; 0x2b
 8019d88:	bf04      	itt	eq
 8019d8a:	1cbd      	addeq	r5, r7, #2
 8019d8c:	787c      	ldrbeq	r4, [r7, #1]
 8019d8e:	4619      	mov	r1, r3
 8019d90:	e7cb      	b.n	8019d2a <_strtoul_l.isra.0+0x2e>
 8019d92:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019d96:	2f19      	cmp	r7, #25
 8019d98:	d801      	bhi.n	8019d9e <_strtoul_l.isra.0+0xa2>
 8019d9a:	3c37      	subs	r4, #55	; 0x37
 8019d9c:	e7e2      	b.n	8019d64 <_strtoul_l.isra.0+0x68>
 8019d9e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019da2:	2f19      	cmp	r7, #25
 8019da4:	d804      	bhi.n	8019db0 <_strtoul_l.isra.0+0xb4>
 8019da6:	3c57      	subs	r4, #87	; 0x57
 8019da8:	e7dc      	b.n	8019d64 <_strtoul_l.isra.0+0x68>
 8019daa:	f04f 33ff 	mov.w	r3, #4294967295
 8019dae:	e7e5      	b.n	8019d7c <_strtoul_l.isra.0+0x80>
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	da09      	bge.n	8019dc8 <_strtoul_l.isra.0+0xcc>
 8019db4:	2322      	movs	r3, #34	; 0x22
 8019db6:	f8c8 3000 	str.w	r3, [r8]
 8019dba:	f04f 30ff 	mov.w	r0, #4294967295
 8019dbe:	f1ba 0f00 	cmp.w	sl, #0
 8019dc2:	d107      	bne.n	8019dd4 <_strtoul_l.isra.0+0xd8>
 8019dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019dc8:	b101      	cbz	r1, 8019dcc <_strtoul_l.isra.0+0xd0>
 8019dca:	4240      	negs	r0, r0
 8019dcc:	f1ba 0f00 	cmp.w	sl, #0
 8019dd0:	d0f8      	beq.n	8019dc4 <_strtoul_l.isra.0+0xc8>
 8019dd2:	b10b      	cbz	r3, 8019dd8 <_strtoul_l.isra.0+0xdc>
 8019dd4:	f105 39ff 	add.w	r9, r5, #4294967295
 8019dd8:	f8ca 9000 	str.w	r9, [sl]
 8019ddc:	e7f2      	b.n	8019dc4 <_strtoul_l.isra.0+0xc8>
 8019dde:	2430      	movs	r4, #48	; 0x30
 8019de0:	2e00      	cmp	r6, #0
 8019de2:	d1b0      	bne.n	8019d46 <_strtoul_l.isra.0+0x4a>
 8019de4:	2608      	movs	r6, #8
 8019de6:	e7ae      	b.n	8019d46 <_strtoul_l.isra.0+0x4a>
 8019de8:	2c30      	cmp	r4, #48	; 0x30
 8019dea:	d0a4      	beq.n	8019d36 <_strtoul_l.isra.0+0x3a>
 8019dec:	260a      	movs	r6, #10
 8019dee:	e7aa      	b.n	8019d46 <_strtoul_l.isra.0+0x4a>

08019df0 <_strtoul_r>:
 8019df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019df2:	4c06      	ldr	r4, [pc, #24]	; (8019e0c <_strtoul_r+0x1c>)
 8019df4:	4d06      	ldr	r5, [pc, #24]	; (8019e10 <_strtoul_r+0x20>)
 8019df6:	6824      	ldr	r4, [r4, #0]
 8019df8:	6a24      	ldr	r4, [r4, #32]
 8019dfa:	2c00      	cmp	r4, #0
 8019dfc:	bf08      	it	eq
 8019dfe:	462c      	moveq	r4, r5
 8019e00:	9400      	str	r4, [sp, #0]
 8019e02:	f7ff ff7b 	bl	8019cfc <_strtoul_l.isra.0>
 8019e06:	b003      	add	sp, #12
 8019e08:	bd30      	pop	{r4, r5, pc}
 8019e0a:	bf00      	nop
 8019e0c:	2000002c 	.word	0x2000002c
 8019e10:	20000090 	.word	0x20000090

08019e14 <__submore>:
 8019e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e18:	460c      	mov	r4, r1
 8019e1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019e1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019e20:	4299      	cmp	r1, r3
 8019e22:	d11d      	bne.n	8019e60 <__submore+0x4c>
 8019e24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019e28:	f7fd fb70 	bl	801750c <_malloc_r>
 8019e2c:	b918      	cbnz	r0, 8019e36 <__submore+0x22>
 8019e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8019e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019e3a:	63a3      	str	r3, [r4, #56]	; 0x38
 8019e3c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019e40:	6360      	str	r0, [r4, #52]	; 0x34
 8019e42:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019e46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019e4a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019e4e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019e52:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019e56:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019e5a:	6020      	str	r0, [r4, #0]
 8019e5c:	2000      	movs	r0, #0
 8019e5e:	e7e8      	b.n	8019e32 <__submore+0x1e>
 8019e60:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019e62:	0077      	lsls	r7, r6, #1
 8019e64:	463a      	mov	r2, r7
 8019e66:	f001 ff64 	bl	801bd32 <_realloc_r>
 8019e6a:	4605      	mov	r5, r0
 8019e6c:	2800      	cmp	r0, #0
 8019e6e:	d0de      	beq.n	8019e2e <__submore+0x1a>
 8019e70:	eb00 0806 	add.w	r8, r0, r6
 8019e74:	4601      	mov	r1, r0
 8019e76:	4632      	mov	r2, r6
 8019e78:	4640      	mov	r0, r8
 8019e7a:	f7fd fae5 	bl	8017448 <memcpy>
 8019e7e:	f8c4 8000 	str.w	r8, [r4]
 8019e82:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019e86:	e7e9      	b.n	8019e5c <__submore+0x48>

08019e88 <_ungetc_r>:
 8019e88:	1c4b      	adds	r3, r1, #1
 8019e8a:	b570      	push	{r4, r5, r6, lr}
 8019e8c:	4606      	mov	r6, r0
 8019e8e:	460d      	mov	r5, r1
 8019e90:	4614      	mov	r4, r2
 8019e92:	d103      	bne.n	8019e9c <_ungetc_r+0x14>
 8019e94:	f04f 35ff 	mov.w	r5, #4294967295
 8019e98:	4628      	mov	r0, r5
 8019e9a:	bd70      	pop	{r4, r5, r6, pc}
 8019e9c:	b118      	cbz	r0, 8019ea6 <_ungetc_r+0x1e>
 8019e9e:	6983      	ldr	r3, [r0, #24]
 8019ea0:	b90b      	cbnz	r3, 8019ea6 <_ungetc_r+0x1e>
 8019ea2:	f7fd f9a3 	bl	80171ec <__sinit>
 8019ea6:	4b2e      	ldr	r3, [pc, #184]	; (8019f60 <_ungetc_r+0xd8>)
 8019ea8:	429c      	cmp	r4, r3
 8019eaa:	d12c      	bne.n	8019f06 <_ungetc_r+0x7e>
 8019eac:	6874      	ldr	r4, [r6, #4]
 8019eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019eb2:	f023 0320 	bic.w	r3, r3, #32
 8019eb6:	81a3      	strh	r3, [r4, #12]
 8019eb8:	b29b      	uxth	r3, r3
 8019eba:	0759      	lsls	r1, r3, #29
 8019ebc:	d413      	bmi.n	8019ee6 <_ungetc_r+0x5e>
 8019ebe:	06da      	lsls	r2, r3, #27
 8019ec0:	d5e8      	bpl.n	8019e94 <_ungetc_r+0xc>
 8019ec2:	071b      	lsls	r3, r3, #28
 8019ec4:	d50b      	bpl.n	8019ede <_ungetc_r+0x56>
 8019ec6:	4621      	mov	r1, r4
 8019ec8:	4630      	mov	r0, r6
 8019eca:	f7fd f913 	bl	80170f4 <_fflush_r>
 8019ece:	2800      	cmp	r0, #0
 8019ed0:	d1e0      	bne.n	8019e94 <_ungetc_r+0xc>
 8019ed2:	89a3      	ldrh	r3, [r4, #12]
 8019ed4:	60a0      	str	r0, [r4, #8]
 8019ed6:	f023 0308 	bic.w	r3, r3, #8
 8019eda:	81a3      	strh	r3, [r4, #12]
 8019edc:	61a0      	str	r0, [r4, #24]
 8019ede:	89a3      	ldrh	r3, [r4, #12]
 8019ee0:	f043 0304 	orr.w	r3, r3, #4
 8019ee4:	81a3      	strh	r3, [r4, #12]
 8019ee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019ee8:	6862      	ldr	r2, [r4, #4]
 8019eea:	b2ed      	uxtb	r5, r5
 8019eec:	b1e3      	cbz	r3, 8019f28 <_ungetc_r+0xa0>
 8019eee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019ef0:	4293      	cmp	r3, r2
 8019ef2:	dd12      	ble.n	8019f1a <_ungetc_r+0x92>
 8019ef4:	6823      	ldr	r3, [r4, #0]
 8019ef6:	1e5a      	subs	r2, r3, #1
 8019ef8:	6022      	str	r2, [r4, #0]
 8019efa:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019efe:	6863      	ldr	r3, [r4, #4]
 8019f00:	3301      	adds	r3, #1
 8019f02:	6063      	str	r3, [r4, #4]
 8019f04:	e7c8      	b.n	8019e98 <_ungetc_r+0x10>
 8019f06:	4b17      	ldr	r3, [pc, #92]	; (8019f64 <_ungetc_r+0xdc>)
 8019f08:	429c      	cmp	r4, r3
 8019f0a:	d101      	bne.n	8019f10 <_ungetc_r+0x88>
 8019f0c:	68b4      	ldr	r4, [r6, #8]
 8019f0e:	e7ce      	b.n	8019eae <_ungetc_r+0x26>
 8019f10:	4b15      	ldr	r3, [pc, #84]	; (8019f68 <_ungetc_r+0xe0>)
 8019f12:	429c      	cmp	r4, r3
 8019f14:	bf08      	it	eq
 8019f16:	68f4      	ldreq	r4, [r6, #12]
 8019f18:	e7c9      	b.n	8019eae <_ungetc_r+0x26>
 8019f1a:	4621      	mov	r1, r4
 8019f1c:	4630      	mov	r0, r6
 8019f1e:	f7ff ff79 	bl	8019e14 <__submore>
 8019f22:	2800      	cmp	r0, #0
 8019f24:	d0e6      	beq.n	8019ef4 <_ungetc_r+0x6c>
 8019f26:	e7b5      	b.n	8019e94 <_ungetc_r+0xc>
 8019f28:	6921      	ldr	r1, [r4, #16]
 8019f2a:	6823      	ldr	r3, [r4, #0]
 8019f2c:	b151      	cbz	r1, 8019f44 <_ungetc_r+0xbc>
 8019f2e:	4299      	cmp	r1, r3
 8019f30:	d208      	bcs.n	8019f44 <_ungetc_r+0xbc>
 8019f32:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019f36:	42a9      	cmp	r1, r5
 8019f38:	d104      	bne.n	8019f44 <_ungetc_r+0xbc>
 8019f3a:	3b01      	subs	r3, #1
 8019f3c:	3201      	adds	r2, #1
 8019f3e:	6023      	str	r3, [r4, #0]
 8019f40:	6062      	str	r2, [r4, #4]
 8019f42:	e7a9      	b.n	8019e98 <_ungetc_r+0x10>
 8019f44:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f4c:	6363      	str	r3, [r4, #52]	; 0x34
 8019f4e:	2303      	movs	r3, #3
 8019f50:	63a3      	str	r3, [r4, #56]	; 0x38
 8019f52:	4623      	mov	r3, r4
 8019f54:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019f58:	6023      	str	r3, [r4, #0]
 8019f5a:	2301      	movs	r3, #1
 8019f5c:	e7d1      	b.n	8019f02 <_ungetc_r+0x7a>
 8019f5e:	bf00      	nop
 8019f60:	0801c700 	.word	0x0801c700
 8019f64:	0801c720 	.word	0x0801c720
 8019f68:	0801c6e0 	.word	0x0801c6e0

08019f6c <__swbuf_r>:
 8019f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f6e:	460e      	mov	r6, r1
 8019f70:	4614      	mov	r4, r2
 8019f72:	4605      	mov	r5, r0
 8019f74:	b118      	cbz	r0, 8019f7e <__swbuf_r+0x12>
 8019f76:	6983      	ldr	r3, [r0, #24]
 8019f78:	b90b      	cbnz	r3, 8019f7e <__swbuf_r+0x12>
 8019f7a:	f7fd f937 	bl	80171ec <__sinit>
 8019f7e:	4b21      	ldr	r3, [pc, #132]	; (801a004 <__swbuf_r+0x98>)
 8019f80:	429c      	cmp	r4, r3
 8019f82:	d12a      	bne.n	8019fda <__swbuf_r+0x6e>
 8019f84:	686c      	ldr	r4, [r5, #4]
 8019f86:	69a3      	ldr	r3, [r4, #24]
 8019f88:	60a3      	str	r3, [r4, #8]
 8019f8a:	89a3      	ldrh	r3, [r4, #12]
 8019f8c:	071a      	lsls	r2, r3, #28
 8019f8e:	d52e      	bpl.n	8019fee <__swbuf_r+0x82>
 8019f90:	6923      	ldr	r3, [r4, #16]
 8019f92:	b363      	cbz	r3, 8019fee <__swbuf_r+0x82>
 8019f94:	6923      	ldr	r3, [r4, #16]
 8019f96:	6820      	ldr	r0, [r4, #0]
 8019f98:	1ac0      	subs	r0, r0, r3
 8019f9a:	6963      	ldr	r3, [r4, #20]
 8019f9c:	b2f6      	uxtb	r6, r6
 8019f9e:	4283      	cmp	r3, r0
 8019fa0:	4637      	mov	r7, r6
 8019fa2:	dc04      	bgt.n	8019fae <__swbuf_r+0x42>
 8019fa4:	4621      	mov	r1, r4
 8019fa6:	4628      	mov	r0, r5
 8019fa8:	f7fd f8a4 	bl	80170f4 <_fflush_r>
 8019fac:	bb28      	cbnz	r0, 8019ffa <__swbuf_r+0x8e>
 8019fae:	68a3      	ldr	r3, [r4, #8]
 8019fb0:	3b01      	subs	r3, #1
 8019fb2:	60a3      	str	r3, [r4, #8]
 8019fb4:	6823      	ldr	r3, [r4, #0]
 8019fb6:	1c5a      	adds	r2, r3, #1
 8019fb8:	6022      	str	r2, [r4, #0]
 8019fba:	701e      	strb	r6, [r3, #0]
 8019fbc:	6963      	ldr	r3, [r4, #20]
 8019fbe:	3001      	adds	r0, #1
 8019fc0:	4283      	cmp	r3, r0
 8019fc2:	d004      	beq.n	8019fce <__swbuf_r+0x62>
 8019fc4:	89a3      	ldrh	r3, [r4, #12]
 8019fc6:	07db      	lsls	r3, r3, #31
 8019fc8:	d519      	bpl.n	8019ffe <__swbuf_r+0x92>
 8019fca:	2e0a      	cmp	r6, #10
 8019fcc:	d117      	bne.n	8019ffe <__swbuf_r+0x92>
 8019fce:	4621      	mov	r1, r4
 8019fd0:	4628      	mov	r0, r5
 8019fd2:	f7fd f88f 	bl	80170f4 <_fflush_r>
 8019fd6:	b190      	cbz	r0, 8019ffe <__swbuf_r+0x92>
 8019fd8:	e00f      	b.n	8019ffa <__swbuf_r+0x8e>
 8019fda:	4b0b      	ldr	r3, [pc, #44]	; (801a008 <__swbuf_r+0x9c>)
 8019fdc:	429c      	cmp	r4, r3
 8019fde:	d101      	bne.n	8019fe4 <__swbuf_r+0x78>
 8019fe0:	68ac      	ldr	r4, [r5, #8]
 8019fe2:	e7d0      	b.n	8019f86 <__swbuf_r+0x1a>
 8019fe4:	4b09      	ldr	r3, [pc, #36]	; (801a00c <__swbuf_r+0xa0>)
 8019fe6:	429c      	cmp	r4, r3
 8019fe8:	bf08      	it	eq
 8019fea:	68ec      	ldreq	r4, [r5, #12]
 8019fec:	e7cb      	b.n	8019f86 <__swbuf_r+0x1a>
 8019fee:	4621      	mov	r1, r4
 8019ff0:	4628      	mov	r0, r5
 8019ff2:	f000 f81f 	bl	801a034 <__swsetup_r>
 8019ff6:	2800      	cmp	r0, #0
 8019ff8:	d0cc      	beq.n	8019f94 <__swbuf_r+0x28>
 8019ffa:	f04f 37ff 	mov.w	r7, #4294967295
 8019ffe:	4638      	mov	r0, r7
 801a000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a002:	bf00      	nop
 801a004:	0801c700 	.word	0x0801c700
 801a008:	0801c720 	.word	0x0801c720
 801a00c:	0801c6e0 	.word	0x0801c6e0

0801a010 <_write_r>:
 801a010:	b538      	push	{r3, r4, r5, lr}
 801a012:	4c07      	ldr	r4, [pc, #28]	; (801a030 <_write_r+0x20>)
 801a014:	4605      	mov	r5, r0
 801a016:	4608      	mov	r0, r1
 801a018:	4611      	mov	r1, r2
 801a01a:	2200      	movs	r2, #0
 801a01c:	6022      	str	r2, [r4, #0]
 801a01e:	461a      	mov	r2, r3
 801a020:	f7f6 fbcd 	bl	80107be <_write>
 801a024:	1c43      	adds	r3, r0, #1
 801a026:	d102      	bne.n	801a02e <_write_r+0x1e>
 801a028:	6823      	ldr	r3, [r4, #0]
 801a02a:	b103      	cbz	r3, 801a02e <_write_r+0x1e>
 801a02c:	602b      	str	r3, [r5, #0]
 801a02e:	bd38      	pop	{r3, r4, r5, pc}
 801a030:	20001084 	.word	0x20001084

0801a034 <__swsetup_r>:
 801a034:	4b32      	ldr	r3, [pc, #200]	; (801a100 <__swsetup_r+0xcc>)
 801a036:	b570      	push	{r4, r5, r6, lr}
 801a038:	681d      	ldr	r5, [r3, #0]
 801a03a:	4606      	mov	r6, r0
 801a03c:	460c      	mov	r4, r1
 801a03e:	b125      	cbz	r5, 801a04a <__swsetup_r+0x16>
 801a040:	69ab      	ldr	r3, [r5, #24]
 801a042:	b913      	cbnz	r3, 801a04a <__swsetup_r+0x16>
 801a044:	4628      	mov	r0, r5
 801a046:	f7fd f8d1 	bl	80171ec <__sinit>
 801a04a:	4b2e      	ldr	r3, [pc, #184]	; (801a104 <__swsetup_r+0xd0>)
 801a04c:	429c      	cmp	r4, r3
 801a04e:	d10f      	bne.n	801a070 <__swsetup_r+0x3c>
 801a050:	686c      	ldr	r4, [r5, #4]
 801a052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a056:	b29a      	uxth	r2, r3
 801a058:	0715      	lsls	r5, r2, #28
 801a05a:	d42c      	bmi.n	801a0b6 <__swsetup_r+0x82>
 801a05c:	06d0      	lsls	r0, r2, #27
 801a05e:	d411      	bmi.n	801a084 <__swsetup_r+0x50>
 801a060:	2209      	movs	r2, #9
 801a062:	6032      	str	r2, [r6, #0]
 801a064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a068:	81a3      	strh	r3, [r4, #12]
 801a06a:	f04f 30ff 	mov.w	r0, #4294967295
 801a06e:	e03e      	b.n	801a0ee <__swsetup_r+0xba>
 801a070:	4b25      	ldr	r3, [pc, #148]	; (801a108 <__swsetup_r+0xd4>)
 801a072:	429c      	cmp	r4, r3
 801a074:	d101      	bne.n	801a07a <__swsetup_r+0x46>
 801a076:	68ac      	ldr	r4, [r5, #8]
 801a078:	e7eb      	b.n	801a052 <__swsetup_r+0x1e>
 801a07a:	4b24      	ldr	r3, [pc, #144]	; (801a10c <__swsetup_r+0xd8>)
 801a07c:	429c      	cmp	r4, r3
 801a07e:	bf08      	it	eq
 801a080:	68ec      	ldreq	r4, [r5, #12]
 801a082:	e7e6      	b.n	801a052 <__swsetup_r+0x1e>
 801a084:	0751      	lsls	r1, r2, #29
 801a086:	d512      	bpl.n	801a0ae <__swsetup_r+0x7a>
 801a088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a08a:	b141      	cbz	r1, 801a09e <__swsetup_r+0x6a>
 801a08c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a090:	4299      	cmp	r1, r3
 801a092:	d002      	beq.n	801a09a <__swsetup_r+0x66>
 801a094:	4630      	mov	r0, r6
 801a096:	f7fd f9eb 	bl	8017470 <_free_r>
 801a09a:	2300      	movs	r3, #0
 801a09c:	6363      	str	r3, [r4, #52]	; 0x34
 801a09e:	89a3      	ldrh	r3, [r4, #12]
 801a0a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a0a4:	81a3      	strh	r3, [r4, #12]
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	6063      	str	r3, [r4, #4]
 801a0aa:	6923      	ldr	r3, [r4, #16]
 801a0ac:	6023      	str	r3, [r4, #0]
 801a0ae:	89a3      	ldrh	r3, [r4, #12]
 801a0b0:	f043 0308 	orr.w	r3, r3, #8
 801a0b4:	81a3      	strh	r3, [r4, #12]
 801a0b6:	6923      	ldr	r3, [r4, #16]
 801a0b8:	b94b      	cbnz	r3, 801a0ce <__swsetup_r+0x9a>
 801a0ba:	89a3      	ldrh	r3, [r4, #12]
 801a0bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a0c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a0c4:	d003      	beq.n	801a0ce <__swsetup_r+0x9a>
 801a0c6:	4621      	mov	r1, r4
 801a0c8:	4630      	mov	r0, r6
 801a0ca:	f7fd f97d 	bl	80173c8 <__smakebuf_r>
 801a0ce:	89a2      	ldrh	r2, [r4, #12]
 801a0d0:	f012 0301 	ands.w	r3, r2, #1
 801a0d4:	d00c      	beq.n	801a0f0 <__swsetup_r+0xbc>
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	60a3      	str	r3, [r4, #8]
 801a0da:	6963      	ldr	r3, [r4, #20]
 801a0dc:	425b      	negs	r3, r3
 801a0de:	61a3      	str	r3, [r4, #24]
 801a0e0:	6923      	ldr	r3, [r4, #16]
 801a0e2:	b953      	cbnz	r3, 801a0fa <__swsetup_r+0xc6>
 801a0e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801a0ec:	d1ba      	bne.n	801a064 <__swsetup_r+0x30>
 801a0ee:	bd70      	pop	{r4, r5, r6, pc}
 801a0f0:	0792      	lsls	r2, r2, #30
 801a0f2:	bf58      	it	pl
 801a0f4:	6963      	ldrpl	r3, [r4, #20]
 801a0f6:	60a3      	str	r3, [r4, #8]
 801a0f8:	e7f2      	b.n	801a0e0 <__swsetup_r+0xac>
 801a0fa:	2000      	movs	r0, #0
 801a0fc:	e7f7      	b.n	801a0ee <__swsetup_r+0xba>
 801a0fe:	bf00      	nop
 801a100:	2000002c 	.word	0x2000002c
 801a104:	0801c700 	.word	0x0801c700
 801a108:	0801c720 	.word	0x0801c720
 801a10c:	0801c6e0 	.word	0x0801c6e0

0801a110 <_close_r>:
 801a110:	b538      	push	{r3, r4, r5, lr}
 801a112:	4c06      	ldr	r4, [pc, #24]	; (801a12c <_close_r+0x1c>)
 801a114:	2300      	movs	r3, #0
 801a116:	4605      	mov	r5, r0
 801a118:	4608      	mov	r0, r1
 801a11a:	6023      	str	r3, [r4, #0]
 801a11c:	f7f6 fb6b 	bl	80107f6 <_close>
 801a120:	1c43      	adds	r3, r0, #1
 801a122:	d102      	bne.n	801a12a <_close_r+0x1a>
 801a124:	6823      	ldr	r3, [r4, #0]
 801a126:	b103      	cbz	r3, 801a12a <_close_r+0x1a>
 801a128:	602b      	str	r3, [r5, #0]
 801a12a:	bd38      	pop	{r3, r4, r5, pc}
 801a12c:	20001084 	.word	0x20001084

0801a130 <quorem>:
 801a130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a134:	6903      	ldr	r3, [r0, #16]
 801a136:	690c      	ldr	r4, [r1, #16]
 801a138:	42a3      	cmp	r3, r4
 801a13a:	4680      	mov	r8, r0
 801a13c:	f2c0 8082 	blt.w	801a244 <quorem+0x114>
 801a140:	3c01      	subs	r4, #1
 801a142:	f101 0714 	add.w	r7, r1, #20
 801a146:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801a14a:	f100 0614 	add.w	r6, r0, #20
 801a14e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801a152:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801a156:	eb06 030c 	add.w	r3, r6, ip
 801a15a:	3501      	adds	r5, #1
 801a15c:	eb07 090c 	add.w	r9, r7, ip
 801a160:	9301      	str	r3, [sp, #4]
 801a162:	fbb0 f5f5 	udiv	r5, r0, r5
 801a166:	b395      	cbz	r5, 801a1ce <quorem+0x9e>
 801a168:	f04f 0a00 	mov.w	sl, #0
 801a16c:	4638      	mov	r0, r7
 801a16e:	46b6      	mov	lr, r6
 801a170:	46d3      	mov	fp, sl
 801a172:	f850 2b04 	ldr.w	r2, [r0], #4
 801a176:	b293      	uxth	r3, r2
 801a178:	fb05 a303 	mla	r3, r5, r3, sl
 801a17c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a180:	b29b      	uxth	r3, r3
 801a182:	ebab 0303 	sub.w	r3, fp, r3
 801a186:	0c12      	lsrs	r2, r2, #16
 801a188:	f8de b000 	ldr.w	fp, [lr]
 801a18c:	fb05 a202 	mla	r2, r5, r2, sl
 801a190:	fa13 f38b 	uxtah	r3, r3, fp
 801a194:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801a198:	fa1f fb82 	uxth.w	fp, r2
 801a19c:	f8de 2000 	ldr.w	r2, [lr]
 801a1a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801a1a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a1a8:	b29b      	uxth	r3, r3
 801a1aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a1ae:	4581      	cmp	r9, r0
 801a1b0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801a1b4:	f84e 3b04 	str.w	r3, [lr], #4
 801a1b8:	d2db      	bcs.n	801a172 <quorem+0x42>
 801a1ba:	f856 300c 	ldr.w	r3, [r6, ip]
 801a1be:	b933      	cbnz	r3, 801a1ce <quorem+0x9e>
 801a1c0:	9b01      	ldr	r3, [sp, #4]
 801a1c2:	3b04      	subs	r3, #4
 801a1c4:	429e      	cmp	r6, r3
 801a1c6:	461a      	mov	r2, r3
 801a1c8:	d330      	bcc.n	801a22c <quorem+0xfc>
 801a1ca:	f8c8 4010 	str.w	r4, [r8, #16]
 801a1ce:	4640      	mov	r0, r8
 801a1d0:	f001 fbf6 	bl	801b9c0 <__mcmp>
 801a1d4:	2800      	cmp	r0, #0
 801a1d6:	db25      	blt.n	801a224 <quorem+0xf4>
 801a1d8:	3501      	adds	r5, #1
 801a1da:	4630      	mov	r0, r6
 801a1dc:	f04f 0c00 	mov.w	ip, #0
 801a1e0:	f857 2b04 	ldr.w	r2, [r7], #4
 801a1e4:	f8d0 e000 	ldr.w	lr, [r0]
 801a1e8:	b293      	uxth	r3, r2
 801a1ea:	ebac 0303 	sub.w	r3, ip, r3
 801a1ee:	0c12      	lsrs	r2, r2, #16
 801a1f0:	fa13 f38e 	uxtah	r3, r3, lr
 801a1f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a1f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a1fc:	b29b      	uxth	r3, r3
 801a1fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a202:	45b9      	cmp	r9, r7
 801a204:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a208:	f840 3b04 	str.w	r3, [r0], #4
 801a20c:	d2e8      	bcs.n	801a1e0 <quorem+0xb0>
 801a20e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801a212:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801a216:	b92a      	cbnz	r2, 801a224 <quorem+0xf4>
 801a218:	3b04      	subs	r3, #4
 801a21a:	429e      	cmp	r6, r3
 801a21c:	461a      	mov	r2, r3
 801a21e:	d30b      	bcc.n	801a238 <quorem+0x108>
 801a220:	f8c8 4010 	str.w	r4, [r8, #16]
 801a224:	4628      	mov	r0, r5
 801a226:	b003      	add	sp, #12
 801a228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a22c:	6812      	ldr	r2, [r2, #0]
 801a22e:	3b04      	subs	r3, #4
 801a230:	2a00      	cmp	r2, #0
 801a232:	d1ca      	bne.n	801a1ca <quorem+0x9a>
 801a234:	3c01      	subs	r4, #1
 801a236:	e7c5      	b.n	801a1c4 <quorem+0x94>
 801a238:	6812      	ldr	r2, [r2, #0]
 801a23a:	3b04      	subs	r3, #4
 801a23c:	2a00      	cmp	r2, #0
 801a23e:	d1ef      	bne.n	801a220 <quorem+0xf0>
 801a240:	3c01      	subs	r4, #1
 801a242:	e7ea      	b.n	801a21a <quorem+0xea>
 801a244:	2000      	movs	r0, #0
 801a246:	e7ee      	b.n	801a226 <quorem+0xf6>

0801a248 <_dtoa_r>:
 801a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a24c:	ec57 6b10 	vmov	r6, r7, d0
 801a250:	b097      	sub	sp, #92	; 0x5c
 801a252:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a254:	9106      	str	r1, [sp, #24]
 801a256:	4604      	mov	r4, r0
 801a258:	920b      	str	r2, [sp, #44]	; 0x2c
 801a25a:	9312      	str	r3, [sp, #72]	; 0x48
 801a25c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a260:	e9cd 6700 	strd	r6, r7, [sp]
 801a264:	b93d      	cbnz	r5, 801a276 <_dtoa_r+0x2e>
 801a266:	2010      	movs	r0, #16
 801a268:	f001 f922 	bl	801b4b0 <malloc>
 801a26c:	6260      	str	r0, [r4, #36]	; 0x24
 801a26e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a272:	6005      	str	r5, [r0, #0]
 801a274:	60c5      	str	r5, [r0, #12]
 801a276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a278:	6819      	ldr	r1, [r3, #0]
 801a27a:	b151      	cbz	r1, 801a292 <_dtoa_r+0x4a>
 801a27c:	685a      	ldr	r2, [r3, #4]
 801a27e:	604a      	str	r2, [r1, #4]
 801a280:	2301      	movs	r3, #1
 801a282:	4093      	lsls	r3, r2
 801a284:	608b      	str	r3, [r1, #8]
 801a286:	4620      	mov	r0, r4
 801a288:	f001 f97b 	bl	801b582 <_Bfree>
 801a28c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a28e:	2200      	movs	r2, #0
 801a290:	601a      	str	r2, [r3, #0]
 801a292:	1e3b      	subs	r3, r7, #0
 801a294:	bfbb      	ittet	lt
 801a296:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a29a:	9301      	strlt	r3, [sp, #4]
 801a29c:	2300      	movge	r3, #0
 801a29e:	2201      	movlt	r2, #1
 801a2a0:	bfac      	ite	ge
 801a2a2:	f8c8 3000 	strge.w	r3, [r8]
 801a2a6:	f8c8 2000 	strlt.w	r2, [r8]
 801a2aa:	4baf      	ldr	r3, [pc, #700]	; (801a568 <_dtoa_r+0x320>)
 801a2ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a2b0:	ea33 0308 	bics.w	r3, r3, r8
 801a2b4:	d114      	bne.n	801a2e0 <_dtoa_r+0x98>
 801a2b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a2b8:	f242 730f 	movw	r3, #9999	; 0x270f
 801a2bc:	6013      	str	r3, [r2, #0]
 801a2be:	9b00      	ldr	r3, [sp, #0]
 801a2c0:	b923      	cbnz	r3, 801a2cc <_dtoa_r+0x84>
 801a2c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801a2c6:	2800      	cmp	r0, #0
 801a2c8:	f000 8542 	beq.w	801ad50 <_dtoa_r+0xb08>
 801a2cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a2ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801a57c <_dtoa_r+0x334>
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	f000 8544 	beq.w	801ad60 <_dtoa_r+0xb18>
 801a2d8:	f10b 0303 	add.w	r3, fp, #3
 801a2dc:	f000 bd3e 	b.w	801ad5c <_dtoa_r+0xb14>
 801a2e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a2e4:	2200      	movs	r2, #0
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	4630      	mov	r0, r6
 801a2ea:	4639      	mov	r1, r7
 801a2ec:	f7ee fb24 	bl	8008938 <__aeabi_dcmpeq>
 801a2f0:	4681      	mov	r9, r0
 801a2f2:	b168      	cbz	r0, 801a310 <_dtoa_r+0xc8>
 801a2f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a2f6:	2301      	movs	r3, #1
 801a2f8:	6013      	str	r3, [r2, #0]
 801a2fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	f000 8524 	beq.w	801ad4a <_dtoa_r+0xb02>
 801a302:	4b9a      	ldr	r3, [pc, #616]	; (801a56c <_dtoa_r+0x324>)
 801a304:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a306:	f103 3bff 	add.w	fp, r3, #4294967295
 801a30a:	6013      	str	r3, [r2, #0]
 801a30c:	f000 bd28 	b.w	801ad60 <_dtoa_r+0xb18>
 801a310:	aa14      	add	r2, sp, #80	; 0x50
 801a312:	a915      	add	r1, sp, #84	; 0x54
 801a314:	ec47 6b10 	vmov	d0, r6, r7
 801a318:	4620      	mov	r0, r4
 801a31a:	f001 fc3f 	bl	801bb9c <__d2b>
 801a31e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801a322:	9004      	str	r0, [sp, #16]
 801a324:	2d00      	cmp	r5, #0
 801a326:	d07c      	beq.n	801a422 <_dtoa_r+0x1da>
 801a328:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a32c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801a330:	46b2      	mov	sl, r6
 801a332:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801a336:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a33a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801a33e:	2200      	movs	r2, #0
 801a340:	4b8b      	ldr	r3, [pc, #556]	; (801a570 <_dtoa_r+0x328>)
 801a342:	4650      	mov	r0, sl
 801a344:	4659      	mov	r1, fp
 801a346:	f7ed fed7 	bl	80080f8 <__aeabi_dsub>
 801a34a:	a381      	add	r3, pc, #516	; (adr r3, 801a550 <_dtoa_r+0x308>)
 801a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a350:	f7ee f88a 	bl	8008468 <__aeabi_dmul>
 801a354:	a380      	add	r3, pc, #512	; (adr r3, 801a558 <_dtoa_r+0x310>)
 801a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a35a:	f7ed fecf 	bl	80080fc <__adddf3>
 801a35e:	4606      	mov	r6, r0
 801a360:	4628      	mov	r0, r5
 801a362:	460f      	mov	r7, r1
 801a364:	f7ee f816 	bl	8008394 <__aeabi_i2d>
 801a368:	a37d      	add	r3, pc, #500	; (adr r3, 801a560 <_dtoa_r+0x318>)
 801a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a36e:	f7ee f87b 	bl	8008468 <__aeabi_dmul>
 801a372:	4602      	mov	r2, r0
 801a374:	460b      	mov	r3, r1
 801a376:	4630      	mov	r0, r6
 801a378:	4639      	mov	r1, r7
 801a37a:	f7ed febf 	bl	80080fc <__adddf3>
 801a37e:	4606      	mov	r6, r0
 801a380:	460f      	mov	r7, r1
 801a382:	f7ee fb21 	bl	80089c8 <__aeabi_d2iz>
 801a386:	2200      	movs	r2, #0
 801a388:	4682      	mov	sl, r0
 801a38a:	2300      	movs	r3, #0
 801a38c:	4630      	mov	r0, r6
 801a38e:	4639      	mov	r1, r7
 801a390:	f7ee fadc 	bl	800894c <__aeabi_dcmplt>
 801a394:	b148      	cbz	r0, 801a3aa <_dtoa_r+0x162>
 801a396:	4650      	mov	r0, sl
 801a398:	f7ed fffc 	bl	8008394 <__aeabi_i2d>
 801a39c:	4632      	mov	r2, r6
 801a39e:	463b      	mov	r3, r7
 801a3a0:	f7ee faca 	bl	8008938 <__aeabi_dcmpeq>
 801a3a4:	b908      	cbnz	r0, 801a3aa <_dtoa_r+0x162>
 801a3a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a3aa:	f1ba 0f16 	cmp.w	sl, #22
 801a3ae:	d859      	bhi.n	801a464 <_dtoa_r+0x21c>
 801a3b0:	4970      	ldr	r1, [pc, #448]	; (801a574 <_dtoa_r+0x32c>)
 801a3b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801a3b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a3ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a3be:	f7ee fae3 	bl	8008988 <__aeabi_dcmpgt>
 801a3c2:	2800      	cmp	r0, #0
 801a3c4:	d050      	beq.n	801a468 <_dtoa_r+0x220>
 801a3c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	930f      	str	r3, [sp, #60]	; 0x3c
 801a3ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a3d0:	1b5d      	subs	r5, r3, r5
 801a3d2:	f1b5 0801 	subs.w	r8, r5, #1
 801a3d6:	bf49      	itett	mi
 801a3d8:	f1c5 0301 	rsbmi	r3, r5, #1
 801a3dc:	2300      	movpl	r3, #0
 801a3de:	9305      	strmi	r3, [sp, #20]
 801a3e0:	f04f 0800 	movmi.w	r8, #0
 801a3e4:	bf58      	it	pl
 801a3e6:	9305      	strpl	r3, [sp, #20]
 801a3e8:	f1ba 0f00 	cmp.w	sl, #0
 801a3ec:	db3e      	blt.n	801a46c <_dtoa_r+0x224>
 801a3ee:	2300      	movs	r3, #0
 801a3f0:	44d0      	add	r8, sl
 801a3f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801a3f6:	9307      	str	r3, [sp, #28]
 801a3f8:	9b06      	ldr	r3, [sp, #24]
 801a3fa:	2b09      	cmp	r3, #9
 801a3fc:	f200 8090 	bhi.w	801a520 <_dtoa_r+0x2d8>
 801a400:	2b05      	cmp	r3, #5
 801a402:	bfc4      	itt	gt
 801a404:	3b04      	subgt	r3, #4
 801a406:	9306      	strgt	r3, [sp, #24]
 801a408:	9b06      	ldr	r3, [sp, #24]
 801a40a:	f1a3 0302 	sub.w	r3, r3, #2
 801a40e:	bfcc      	ite	gt
 801a410:	2500      	movgt	r5, #0
 801a412:	2501      	movle	r5, #1
 801a414:	2b03      	cmp	r3, #3
 801a416:	f200 808f 	bhi.w	801a538 <_dtoa_r+0x2f0>
 801a41a:	e8df f003 	tbb	[pc, r3]
 801a41e:	7f7d      	.short	0x7f7d
 801a420:	7131      	.short	0x7131
 801a422:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801a426:	441d      	add	r5, r3
 801a428:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801a42c:	2820      	cmp	r0, #32
 801a42e:	dd13      	ble.n	801a458 <_dtoa_r+0x210>
 801a430:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801a434:	9b00      	ldr	r3, [sp, #0]
 801a436:	fa08 f800 	lsl.w	r8, r8, r0
 801a43a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801a43e:	fa23 f000 	lsr.w	r0, r3, r0
 801a442:	ea48 0000 	orr.w	r0, r8, r0
 801a446:	f7ed ff95 	bl	8008374 <__aeabi_ui2d>
 801a44a:	2301      	movs	r3, #1
 801a44c:	4682      	mov	sl, r0
 801a44e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801a452:	3d01      	subs	r5, #1
 801a454:	9313      	str	r3, [sp, #76]	; 0x4c
 801a456:	e772      	b.n	801a33e <_dtoa_r+0xf6>
 801a458:	9b00      	ldr	r3, [sp, #0]
 801a45a:	f1c0 0020 	rsb	r0, r0, #32
 801a45e:	fa03 f000 	lsl.w	r0, r3, r0
 801a462:	e7f0      	b.n	801a446 <_dtoa_r+0x1fe>
 801a464:	2301      	movs	r3, #1
 801a466:	e7b1      	b.n	801a3cc <_dtoa_r+0x184>
 801a468:	900f      	str	r0, [sp, #60]	; 0x3c
 801a46a:	e7b0      	b.n	801a3ce <_dtoa_r+0x186>
 801a46c:	9b05      	ldr	r3, [sp, #20]
 801a46e:	eba3 030a 	sub.w	r3, r3, sl
 801a472:	9305      	str	r3, [sp, #20]
 801a474:	f1ca 0300 	rsb	r3, sl, #0
 801a478:	9307      	str	r3, [sp, #28]
 801a47a:	2300      	movs	r3, #0
 801a47c:	930e      	str	r3, [sp, #56]	; 0x38
 801a47e:	e7bb      	b.n	801a3f8 <_dtoa_r+0x1b0>
 801a480:	2301      	movs	r3, #1
 801a482:	930a      	str	r3, [sp, #40]	; 0x28
 801a484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a486:	2b00      	cmp	r3, #0
 801a488:	dd59      	ble.n	801a53e <_dtoa_r+0x2f6>
 801a48a:	9302      	str	r3, [sp, #8]
 801a48c:	4699      	mov	r9, r3
 801a48e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a490:	2200      	movs	r2, #0
 801a492:	6072      	str	r2, [r6, #4]
 801a494:	2204      	movs	r2, #4
 801a496:	f102 0014 	add.w	r0, r2, #20
 801a49a:	4298      	cmp	r0, r3
 801a49c:	6871      	ldr	r1, [r6, #4]
 801a49e:	d953      	bls.n	801a548 <_dtoa_r+0x300>
 801a4a0:	4620      	mov	r0, r4
 801a4a2:	f001 f83a 	bl	801b51a <_Balloc>
 801a4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a4a8:	6030      	str	r0, [r6, #0]
 801a4aa:	f1b9 0f0e 	cmp.w	r9, #14
 801a4ae:	f8d3 b000 	ldr.w	fp, [r3]
 801a4b2:	f200 80e6 	bhi.w	801a682 <_dtoa_r+0x43a>
 801a4b6:	2d00      	cmp	r5, #0
 801a4b8:	f000 80e3 	beq.w	801a682 <_dtoa_r+0x43a>
 801a4bc:	ed9d 7b00 	vldr	d7, [sp]
 801a4c0:	f1ba 0f00 	cmp.w	sl, #0
 801a4c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801a4c8:	dd74      	ble.n	801a5b4 <_dtoa_r+0x36c>
 801a4ca:	4a2a      	ldr	r2, [pc, #168]	; (801a574 <_dtoa_r+0x32c>)
 801a4cc:	f00a 030f 	and.w	r3, sl, #15
 801a4d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a4d4:	ed93 7b00 	vldr	d7, [r3]
 801a4d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 801a4dc:	06f0      	lsls	r0, r6, #27
 801a4de:	ed8d 7b08 	vstr	d7, [sp, #32]
 801a4e2:	d565      	bpl.n	801a5b0 <_dtoa_r+0x368>
 801a4e4:	4b24      	ldr	r3, [pc, #144]	; (801a578 <_dtoa_r+0x330>)
 801a4e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a4ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a4ee:	f7ee f8e5 	bl	80086bc <__aeabi_ddiv>
 801a4f2:	e9cd 0100 	strd	r0, r1, [sp]
 801a4f6:	f006 060f 	and.w	r6, r6, #15
 801a4fa:	2503      	movs	r5, #3
 801a4fc:	4f1e      	ldr	r7, [pc, #120]	; (801a578 <_dtoa_r+0x330>)
 801a4fe:	e04c      	b.n	801a59a <_dtoa_r+0x352>
 801a500:	2301      	movs	r3, #1
 801a502:	930a      	str	r3, [sp, #40]	; 0x28
 801a504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a506:	4453      	add	r3, sl
 801a508:	f103 0901 	add.w	r9, r3, #1
 801a50c:	9302      	str	r3, [sp, #8]
 801a50e:	464b      	mov	r3, r9
 801a510:	2b01      	cmp	r3, #1
 801a512:	bfb8      	it	lt
 801a514:	2301      	movlt	r3, #1
 801a516:	e7ba      	b.n	801a48e <_dtoa_r+0x246>
 801a518:	2300      	movs	r3, #0
 801a51a:	e7b2      	b.n	801a482 <_dtoa_r+0x23a>
 801a51c:	2300      	movs	r3, #0
 801a51e:	e7f0      	b.n	801a502 <_dtoa_r+0x2ba>
 801a520:	2501      	movs	r5, #1
 801a522:	2300      	movs	r3, #0
 801a524:	9306      	str	r3, [sp, #24]
 801a526:	950a      	str	r5, [sp, #40]	; 0x28
 801a528:	f04f 33ff 	mov.w	r3, #4294967295
 801a52c:	9302      	str	r3, [sp, #8]
 801a52e:	4699      	mov	r9, r3
 801a530:	2200      	movs	r2, #0
 801a532:	2312      	movs	r3, #18
 801a534:	920b      	str	r2, [sp, #44]	; 0x2c
 801a536:	e7aa      	b.n	801a48e <_dtoa_r+0x246>
 801a538:	2301      	movs	r3, #1
 801a53a:	930a      	str	r3, [sp, #40]	; 0x28
 801a53c:	e7f4      	b.n	801a528 <_dtoa_r+0x2e0>
 801a53e:	2301      	movs	r3, #1
 801a540:	9302      	str	r3, [sp, #8]
 801a542:	4699      	mov	r9, r3
 801a544:	461a      	mov	r2, r3
 801a546:	e7f5      	b.n	801a534 <_dtoa_r+0x2ec>
 801a548:	3101      	adds	r1, #1
 801a54a:	6071      	str	r1, [r6, #4]
 801a54c:	0052      	lsls	r2, r2, #1
 801a54e:	e7a2      	b.n	801a496 <_dtoa_r+0x24e>
 801a550:	636f4361 	.word	0x636f4361
 801a554:	3fd287a7 	.word	0x3fd287a7
 801a558:	8b60c8b3 	.word	0x8b60c8b3
 801a55c:	3fc68a28 	.word	0x3fc68a28
 801a560:	509f79fb 	.word	0x509f79fb
 801a564:	3fd34413 	.word	0x3fd34413
 801a568:	7ff00000 	.word	0x7ff00000
 801a56c:	0801c7a3 	.word	0x0801c7a3
 801a570:	3ff80000 	.word	0x3ff80000
 801a574:	0801c838 	.word	0x0801c838
 801a578:	0801c810 	.word	0x0801c810
 801a57c:	0801c801 	.word	0x0801c801
 801a580:	07f1      	lsls	r1, r6, #31
 801a582:	d508      	bpl.n	801a596 <_dtoa_r+0x34e>
 801a584:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a588:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a58c:	f7ed ff6c 	bl	8008468 <__aeabi_dmul>
 801a590:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a594:	3501      	adds	r5, #1
 801a596:	1076      	asrs	r6, r6, #1
 801a598:	3708      	adds	r7, #8
 801a59a:	2e00      	cmp	r6, #0
 801a59c:	d1f0      	bne.n	801a580 <_dtoa_r+0x338>
 801a59e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a5a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a5a6:	f7ee f889 	bl	80086bc <__aeabi_ddiv>
 801a5aa:	e9cd 0100 	strd	r0, r1, [sp]
 801a5ae:	e01a      	b.n	801a5e6 <_dtoa_r+0x39e>
 801a5b0:	2502      	movs	r5, #2
 801a5b2:	e7a3      	b.n	801a4fc <_dtoa_r+0x2b4>
 801a5b4:	f000 80a0 	beq.w	801a6f8 <_dtoa_r+0x4b0>
 801a5b8:	f1ca 0600 	rsb	r6, sl, #0
 801a5bc:	4b9f      	ldr	r3, [pc, #636]	; (801a83c <_dtoa_r+0x5f4>)
 801a5be:	4fa0      	ldr	r7, [pc, #640]	; (801a840 <_dtoa_r+0x5f8>)
 801a5c0:	f006 020f 	and.w	r2, r6, #15
 801a5c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a5d0:	f7ed ff4a 	bl	8008468 <__aeabi_dmul>
 801a5d4:	e9cd 0100 	strd	r0, r1, [sp]
 801a5d8:	1136      	asrs	r6, r6, #4
 801a5da:	2300      	movs	r3, #0
 801a5dc:	2502      	movs	r5, #2
 801a5de:	2e00      	cmp	r6, #0
 801a5e0:	d17f      	bne.n	801a6e2 <_dtoa_r+0x49a>
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d1e1      	bne.n	801a5aa <_dtoa_r+0x362>
 801a5e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	f000 8087 	beq.w	801a6fc <_dtoa_r+0x4b4>
 801a5ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	4b93      	ldr	r3, [pc, #588]	; (801a844 <_dtoa_r+0x5fc>)
 801a5f6:	4630      	mov	r0, r6
 801a5f8:	4639      	mov	r1, r7
 801a5fa:	f7ee f9a7 	bl	800894c <__aeabi_dcmplt>
 801a5fe:	2800      	cmp	r0, #0
 801a600:	d07c      	beq.n	801a6fc <_dtoa_r+0x4b4>
 801a602:	f1b9 0f00 	cmp.w	r9, #0
 801a606:	d079      	beq.n	801a6fc <_dtoa_r+0x4b4>
 801a608:	9b02      	ldr	r3, [sp, #8]
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	dd35      	ble.n	801a67a <_dtoa_r+0x432>
 801a60e:	f10a 33ff 	add.w	r3, sl, #4294967295
 801a612:	9308      	str	r3, [sp, #32]
 801a614:	4639      	mov	r1, r7
 801a616:	2200      	movs	r2, #0
 801a618:	4b8b      	ldr	r3, [pc, #556]	; (801a848 <_dtoa_r+0x600>)
 801a61a:	4630      	mov	r0, r6
 801a61c:	f7ed ff24 	bl	8008468 <__aeabi_dmul>
 801a620:	e9cd 0100 	strd	r0, r1, [sp]
 801a624:	9f02      	ldr	r7, [sp, #8]
 801a626:	3501      	adds	r5, #1
 801a628:	4628      	mov	r0, r5
 801a62a:	f7ed feb3 	bl	8008394 <__aeabi_i2d>
 801a62e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a632:	f7ed ff19 	bl	8008468 <__aeabi_dmul>
 801a636:	2200      	movs	r2, #0
 801a638:	4b84      	ldr	r3, [pc, #528]	; (801a84c <_dtoa_r+0x604>)
 801a63a:	f7ed fd5f 	bl	80080fc <__adddf3>
 801a63e:	4605      	mov	r5, r0
 801a640:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801a644:	2f00      	cmp	r7, #0
 801a646:	d15d      	bne.n	801a704 <_dtoa_r+0x4bc>
 801a648:	2200      	movs	r2, #0
 801a64a:	4b81      	ldr	r3, [pc, #516]	; (801a850 <_dtoa_r+0x608>)
 801a64c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a650:	f7ed fd52 	bl	80080f8 <__aeabi_dsub>
 801a654:	462a      	mov	r2, r5
 801a656:	4633      	mov	r3, r6
 801a658:	e9cd 0100 	strd	r0, r1, [sp]
 801a65c:	f7ee f994 	bl	8008988 <__aeabi_dcmpgt>
 801a660:	2800      	cmp	r0, #0
 801a662:	f040 8288 	bne.w	801ab76 <_dtoa_r+0x92e>
 801a666:	462a      	mov	r2, r5
 801a668:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801a66c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a670:	f7ee f96c 	bl	800894c <__aeabi_dcmplt>
 801a674:	2800      	cmp	r0, #0
 801a676:	f040 827c 	bne.w	801ab72 <_dtoa_r+0x92a>
 801a67a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801a67e:	e9cd 2300 	strd	r2, r3, [sp]
 801a682:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a684:	2b00      	cmp	r3, #0
 801a686:	f2c0 8150 	blt.w	801a92a <_dtoa_r+0x6e2>
 801a68a:	f1ba 0f0e 	cmp.w	sl, #14
 801a68e:	f300 814c 	bgt.w	801a92a <_dtoa_r+0x6e2>
 801a692:	4b6a      	ldr	r3, [pc, #424]	; (801a83c <_dtoa_r+0x5f4>)
 801a694:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a698:	ed93 7b00 	vldr	d7, [r3]
 801a69c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a6a4:	f280 80d8 	bge.w	801a858 <_dtoa_r+0x610>
 801a6a8:	f1b9 0f00 	cmp.w	r9, #0
 801a6ac:	f300 80d4 	bgt.w	801a858 <_dtoa_r+0x610>
 801a6b0:	f040 825e 	bne.w	801ab70 <_dtoa_r+0x928>
 801a6b4:	2200      	movs	r2, #0
 801a6b6:	4b66      	ldr	r3, [pc, #408]	; (801a850 <_dtoa_r+0x608>)
 801a6b8:	ec51 0b17 	vmov	r0, r1, d7
 801a6bc:	f7ed fed4 	bl	8008468 <__aeabi_dmul>
 801a6c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a6c4:	f7ee f956 	bl	8008974 <__aeabi_dcmpge>
 801a6c8:	464f      	mov	r7, r9
 801a6ca:	464e      	mov	r6, r9
 801a6cc:	2800      	cmp	r0, #0
 801a6ce:	f040 8234 	bne.w	801ab3a <_dtoa_r+0x8f2>
 801a6d2:	2331      	movs	r3, #49	; 0x31
 801a6d4:	f10b 0501 	add.w	r5, fp, #1
 801a6d8:	f88b 3000 	strb.w	r3, [fp]
 801a6dc:	f10a 0a01 	add.w	sl, sl, #1
 801a6e0:	e22f      	b.n	801ab42 <_dtoa_r+0x8fa>
 801a6e2:	07f2      	lsls	r2, r6, #31
 801a6e4:	d505      	bpl.n	801a6f2 <_dtoa_r+0x4aa>
 801a6e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a6ea:	f7ed febd 	bl	8008468 <__aeabi_dmul>
 801a6ee:	3501      	adds	r5, #1
 801a6f0:	2301      	movs	r3, #1
 801a6f2:	1076      	asrs	r6, r6, #1
 801a6f4:	3708      	adds	r7, #8
 801a6f6:	e772      	b.n	801a5de <_dtoa_r+0x396>
 801a6f8:	2502      	movs	r5, #2
 801a6fa:	e774      	b.n	801a5e6 <_dtoa_r+0x39e>
 801a6fc:	f8cd a020 	str.w	sl, [sp, #32]
 801a700:	464f      	mov	r7, r9
 801a702:	e791      	b.n	801a628 <_dtoa_r+0x3e0>
 801a704:	4b4d      	ldr	r3, [pc, #308]	; (801a83c <_dtoa_r+0x5f4>)
 801a706:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a70a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801a70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a710:	2b00      	cmp	r3, #0
 801a712:	d047      	beq.n	801a7a4 <_dtoa_r+0x55c>
 801a714:	4602      	mov	r2, r0
 801a716:	460b      	mov	r3, r1
 801a718:	2000      	movs	r0, #0
 801a71a:	494e      	ldr	r1, [pc, #312]	; (801a854 <_dtoa_r+0x60c>)
 801a71c:	f7ed ffce 	bl	80086bc <__aeabi_ddiv>
 801a720:	462a      	mov	r2, r5
 801a722:	4633      	mov	r3, r6
 801a724:	f7ed fce8 	bl	80080f8 <__aeabi_dsub>
 801a728:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a72c:	465d      	mov	r5, fp
 801a72e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a732:	f7ee f949 	bl	80089c8 <__aeabi_d2iz>
 801a736:	4606      	mov	r6, r0
 801a738:	f7ed fe2c 	bl	8008394 <__aeabi_i2d>
 801a73c:	4602      	mov	r2, r0
 801a73e:	460b      	mov	r3, r1
 801a740:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a744:	f7ed fcd8 	bl	80080f8 <__aeabi_dsub>
 801a748:	3630      	adds	r6, #48	; 0x30
 801a74a:	f805 6b01 	strb.w	r6, [r5], #1
 801a74e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801a752:	e9cd 0100 	strd	r0, r1, [sp]
 801a756:	f7ee f8f9 	bl	800894c <__aeabi_dcmplt>
 801a75a:	2800      	cmp	r0, #0
 801a75c:	d163      	bne.n	801a826 <_dtoa_r+0x5de>
 801a75e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a762:	2000      	movs	r0, #0
 801a764:	4937      	ldr	r1, [pc, #220]	; (801a844 <_dtoa_r+0x5fc>)
 801a766:	f7ed fcc7 	bl	80080f8 <__aeabi_dsub>
 801a76a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801a76e:	f7ee f8ed 	bl	800894c <__aeabi_dcmplt>
 801a772:	2800      	cmp	r0, #0
 801a774:	f040 80b7 	bne.w	801a8e6 <_dtoa_r+0x69e>
 801a778:	eba5 030b 	sub.w	r3, r5, fp
 801a77c:	429f      	cmp	r7, r3
 801a77e:	f77f af7c 	ble.w	801a67a <_dtoa_r+0x432>
 801a782:	2200      	movs	r2, #0
 801a784:	4b30      	ldr	r3, [pc, #192]	; (801a848 <_dtoa_r+0x600>)
 801a786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a78a:	f7ed fe6d 	bl	8008468 <__aeabi_dmul>
 801a78e:	2200      	movs	r2, #0
 801a790:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a794:	4b2c      	ldr	r3, [pc, #176]	; (801a848 <_dtoa_r+0x600>)
 801a796:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a79a:	f7ed fe65 	bl	8008468 <__aeabi_dmul>
 801a79e:	e9cd 0100 	strd	r0, r1, [sp]
 801a7a2:	e7c4      	b.n	801a72e <_dtoa_r+0x4e6>
 801a7a4:	462a      	mov	r2, r5
 801a7a6:	4633      	mov	r3, r6
 801a7a8:	f7ed fe5e 	bl	8008468 <__aeabi_dmul>
 801a7ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a7b0:	eb0b 0507 	add.w	r5, fp, r7
 801a7b4:	465e      	mov	r6, fp
 801a7b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a7ba:	f7ee f905 	bl	80089c8 <__aeabi_d2iz>
 801a7be:	4607      	mov	r7, r0
 801a7c0:	f7ed fde8 	bl	8008394 <__aeabi_i2d>
 801a7c4:	3730      	adds	r7, #48	; 0x30
 801a7c6:	4602      	mov	r2, r0
 801a7c8:	460b      	mov	r3, r1
 801a7ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a7ce:	f7ed fc93 	bl	80080f8 <__aeabi_dsub>
 801a7d2:	f806 7b01 	strb.w	r7, [r6], #1
 801a7d6:	42ae      	cmp	r6, r5
 801a7d8:	e9cd 0100 	strd	r0, r1, [sp]
 801a7dc:	f04f 0200 	mov.w	r2, #0
 801a7e0:	d126      	bne.n	801a830 <_dtoa_r+0x5e8>
 801a7e2:	4b1c      	ldr	r3, [pc, #112]	; (801a854 <_dtoa_r+0x60c>)
 801a7e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a7e8:	f7ed fc88 	bl	80080fc <__adddf3>
 801a7ec:	4602      	mov	r2, r0
 801a7ee:	460b      	mov	r3, r1
 801a7f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a7f4:	f7ee f8c8 	bl	8008988 <__aeabi_dcmpgt>
 801a7f8:	2800      	cmp	r0, #0
 801a7fa:	d174      	bne.n	801a8e6 <_dtoa_r+0x69e>
 801a7fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801a800:	2000      	movs	r0, #0
 801a802:	4914      	ldr	r1, [pc, #80]	; (801a854 <_dtoa_r+0x60c>)
 801a804:	f7ed fc78 	bl	80080f8 <__aeabi_dsub>
 801a808:	4602      	mov	r2, r0
 801a80a:	460b      	mov	r3, r1
 801a80c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a810:	f7ee f89c 	bl	800894c <__aeabi_dcmplt>
 801a814:	2800      	cmp	r0, #0
 801a816:	f43f af30 	beq.w	801a67a <_dtoa_r+0x432>
 801a81a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a81e:	2b30      	cmp	r3, #48	; 0x30
 801a820:	f105 32ff 	add.w	r2, r5, #4294967295
 801a824:	d002      	beq.n	801a82c <_dtoa_r+0x5e4>
 801a826:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a82a:	e04a      	b.n	801a8c2 <_dtoa_r+0x67a>
 801a82c:	4615      	mov	r5, r2
 801a82e:	e7f4      	b.n	801a81a <_dtoa_r+0x5d2>
 801a830:	4b05      	ldr	r3, [pc, #20]	; (801a848 <_dtoa_r+0x600>)
 801a832:	f7ed fe19 	bl	8008468 <__aeabi_dmul>
 801a836:	e9cd 0100 	strd	r0, r1, [sp]
 801a83a:	e7bc      	b.n	801a7b6 <_dtoa_r+0x56e>
 801a83c:	0801c838 	.word	0x0801c838
 801a840:	0801c810 	.word	0x0801c810
 801a844:	3ff00000 	.word	0x3ff00000
 801a848:	40240000 	.word	0x40240000
 801a84c:	401c0000 	.word	0x401c0000
 801a850:	40140000 	.word	0x40140000
 801a854:	3fe00000 	.word	0x3fe00000
 801a858:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a85c:	465d      	mov	r5, fp
 801a85e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a862:	4630      	mov	r0, r6
 801a864:	4639      	mov	r1, r7
 801a866:	f7ed ff29 	bl	80086bc <__aeabi_ddiv>
 801a86a:	f7ee f8ad 	bl	80089c8 <__aeabi_d2iz>
 801a86e:	4680      	mov	r8, r0
 801a870:	f7ed fd90 	bl	8008394 <__aeabi_i2d>
 801a874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a878:	f7ed fdf6 	bl	8008468 <__aeabi_dmul>
 801a87c:	4602      	mov	r2, r0
 801a87e:	460b      	mov	r3, r1
 801a880:	4630      	mov	r0, r6
 801a882:	4639      	mov	r1, r7
 801a884:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801a888:	f7ed fc36 	bl	80080f8 <__aeabi_dsub>
 801a88c:	f805 6b01 	strb.w	r6, [r5], #1
 801a890:	eba5 060b 	sub.w	r6, r5, fp
 801a894:	45b1      	cmp	r9, r6
 801a896:	4602      	mov	r2, r0
 801a898:	460b      	mov	r3, r1
 801a89a:	d139      	bne.n	801a910 <_dtoa_r+0x6c8>
 801a89c:	f7ed fc2e 	bl	80080fc <__adddf3>
 801a8a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a8a4:	4606      	mov	r6, r0
 801a8a6:	460f      	mov	r7, r1
 801a8a8:	f7ee f86e 	bl	8008988 <__aeabi_dcmpgt>
 801a8ac:	b9c8      	cbnz	r0, 801a8e2 <_dtoa_r+0x69a>
 801a8ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a8b2:	4630      	mov	r0, r6
 801a8b4:	4639      	mov	r1, r7
 801a8b6:	f7ee f83f 	bl	8008938 <__aeabi_dcmpeq>
 801a8ba:	b110      	cbz	r0, 801a8c2 <_dtoa_r+0x67a>
 801a8bc:	f018 0f01 	tst.w	r8, #1
 801a8c0:	d10f      	bne.n	801a8e2 <_dtoa_r+0x69a>
 801a8c2:	9904      	ldr	r1, [sp, #16]
 801a8c4:	4620      	mov	r0, r4
 801a8c6:	f000 fe5c 	bl	801b582 <_Bfree>
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a8ce:	702b      	strb	r3, [r5, #0]
 801a8d0:	f10a 0301 	add.w	r3, sl, #1
 801a8d4:	6013      	str	r3, [r2, #0]
 801a8d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	f000 8241 	beq.w	801ad60 <_dtoa_r+0xb18>
 801a8de:	601d      	str	r5, [r3, #0]
 801a8e0:	e23e      	b.n	801ad60 <_dtoa_r+0xb18>
 801a8e2:	f8cd a020 	str.w	sl, [sp, #32]
 801a8e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801a8ea:	2a39      	cmp	r2, #57	; 0x39
 801a8ec:	f105 33ff 	add.w	r3, r5, #4294967295
 801a8f0:	d108      	bne.n	801a904 <_dtoa_r+0x6bc>
 801a8f2:	459b      	cmp	fp, r3
 801a8f4:	d10a      	bne.n	801a90c <_dtoa_r+0x6c4>
 801a8f6:	9b08      	ldr	r3, [sp, #32]
 801a8f8:	3301      	adds	r3, #1
 801a8fa:	9308      	str	r3, [sp, #32]
 801a8fc:	2330      	movs	r3, #48	; 0x30
 801a8fe:	f88b 3000 	strb.w	r3, [fp]
 801a902:	465b      	mov	r3, fp
 801a904:	781a      	ldrb	r2, [r3, #0]
 801a906:	3201      	adds	r2, #1
 801a908:	701a      	strb	r2, [r3, #0]
 801a90a:	e78c      	b.n	801a826 <_dtoa_r+0x5de>
 801a90c:	461d      	mov	r5, r3
 801a90e:	e7ea      	b.n	801a8e6 <_dtoa_r+0x69e>
 801a910:	2200      	movs	r2, #0
 801a912:	4b9b      	ldr	r3, [pc, #620]	; (801ab80 <_dtoa_r+0x938>)
 801a914:	f7ed fda8 	bl	8008468 <__aeabi_dmul>
 801a918:	2200      	movs	r2, #0
 801a91a:	2300      	movs	r3, #0
 801a91c:	4606      	mov	r6, r0
 801a91e:	460f      	mov	r7, r1
 801a920:	f7ee f80a 	bl	8008938 <__aeabi_dcmpeq>
 801a924:	2800      	cmp	r0, #0
 801a926:	d09a      	beq.n	801a85e <_dtoa_r+0x616>
 801a928:	e7cb      	b.n	801a8c2 <_dtoa_r+0x67a>
 801a92a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a92c:	2a00      	cmp	r2, #0
 801a92e:	f000 808b 	beq.w	801aa48 <_dtoa_r+0x800>
 801a932:	9a06      	ldr	r2, [sp, #24]
 801a934:	2a01      	cmp	r2, #1
 801a936:	dc6e      	bgt.n	801aa16 <_dtoa_r+0x7ce>
 801a938:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a93a:	2a00      	cmp	r2, #0
 801a93c:	d067      	beq.n	801aa0e <_dtoa_r+0x7c6>
 801a93e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801a942:	9f07      	ldr	r7, [sp, #28]
 801a944:	9d05      	ldr	r5, [sp, #20]
 801a946:	9a05      	ldr	r2, [sp, #20]
 801a948:	2101      	movs	r1, #1
 801a94a:	441a      	add	r2, r3
 801a94c:	4620      	mov	r0, r4
 801a94e:	9205      	str	r2, [sp, #20]
 801a950:	4498      	add	r8, r3
 801a952:	f000 fef4 	bl	801b73e <__i2b>
 801a956:	4606      	mov	r6, r0
 801a958:	2d00      	cmp	r5, #0
 801a95a:	dd0c      	ble.n	801a976 <_dtoa_r+0x72e>
 801a95c:	f1b8 0f00 	cmp.w	r8, #0
 801a960:	dd09      	ble.n	801a976 <_dtoa_r+0x72e>
 801a962:	4545      	cmp	r5, r8
 801a964:	9a05      	ldr	r2, [sp, #20]
 801a966:	462b      	mov	r3, r5
 801a968:	bfa8      	it	ge
 801a96a:	4643      	movge	r3, r8
 801a96c:	1ad2      	subs	r2, r2, r3
 801a96e:	9205      	str	r2, [sp, #20]
 801a970:	1aed      	subs	r5, r5, r3
 801a972:	eba8 0803 	sub.w	r8, r8, r3
 801a976:	9b07      	ldr	r3, [sp, #28]
 801a978:	b1eb      	cbz	r3, 801a9b6 <_dtoa_r+0x76e>
 801a97a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d067      	beq.n	801aa50 <_dtoa_r+0x808>
 801a980:	b18f      	cbz	r7, 801a9a6 <_dtoa_r+0x75e>
 801a982:	4631      	mov	r1, r6
 801a984:	463a      	mov	r2, r7
 801a986:	4620      	mov	r0, r4
 801a988:	f000 ff78 	bl	801b87c <__pow5mult>
 801a98c:	9a04      	ldr	r2, [sp, #16]
 801a98e:	4601      	mov	r1, r0
 801a990:	4606      	mov	r6, r0
 801a992:	4620      	mov	r0, r4
 801a994:	f000 fedc 	bl	801b750 <__multiply>
 801a998:	9904      	ldr	r1, [sp, #16]
 801a99a:	9008      	str	r0, [sp, #32]
 801a99c:	4620      	mov	r0, r4
 801a99e:	f000 fdf0 	bl	801b582 <_Bfree>
 801a9a2:	9b08      	ldr	r3, [sp, #32]
 801a9a4:	9304      	str	r3, [sp, #16]
 801a9a6:	9b07      	ldr	r3, [sp, #28]
 801a9a8:	1bda      	subs	r2, r3, r7
 801a9aa:	d004      	beq.n	801a9b6 <_dtoa_r+0x76e>
 801a9ac:	9904      	ldr	r1, [sp, #16]
 801a9ae:	4620      	mov	r0, r4
 801a9b0:	f000 ff64 	bl	801b87c <__pow5mult>
 801a9b4:	9004      	str	r0, [sp, #16]
 801a9b6:	2101      	movs	r1, #1
 801a9b8:	4620      	mov	r0, r4
 801a9ba:	f000 fec0 	bl	801b73e <__i2b>
 801a9be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a9c0:	4607      	mov	r7, r0
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	f000 81d0 	beq.w	801ad68 <_dtoa_r+0xb20>
 801a9c8:	461a      	mov	r2, r3
 801a9ca:	4601      	mov	r1, r0
 801a9cc:	4620      	mov	r0, r4
 801a9ce:	f000 ff55 	bl	801b87c <__pow5mult>
 801a9d2:	9b06      	ldr	r3, [sp, #24]
 801a9d4:	2b01      	cmp	r3, #1
 801a9d6:	4607      	mov	r7, r0
 801a9d8:	dc40      	bgt.n	801aa5c <_dtoa_r+0x814>
 801a9da:	9b00      	ldr	r3, [sp, #0]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d139      	bne.n	801aa54 <_dtoa_r+0x80c>
 801a9e0:	9b01      	ldr	r3, [sp, #4]
 801a9e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d136      	bne.n	801aa58 <_dtoa_r+0x810>
 801a9ea:	9b01      	ldr	r3, [sp, #4]
 801a9ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a9f0:	0d1b      	lsrs	r3, r3, #20
 801a9f2:	051b      	lsls	r3, r3, #20
 801a9f4:	b12b      	cbz	r3, 801aa02 <_dtoa_r+0x7ba>
 801a9f6:	9b05      	ldr	r3, [sp, #20]
 801a9f8:	3301      	adds	r3, #1
 801a9fa:	9305      	str	r3, [sp, #20]
 801a9fc:	f108 0801 	add.w	r8, r8, #1
 801aa00:	2301      	movs	r3, #1
 801aa02:	9307      	str	r3, [sp, #28]
 801aa04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d12a      	bne.n	801aa60 <_dtoa_r+0x818>
 801aa0a:	2001      	movs	r0, #1
 801aa0c:	e030      	b.n	801aa70 <_dtoa_r+0x828>
 801aa0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801aa10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801aa14:	e795      	b.n	801a942 <_dtoa_r+0x6fa>
 801aa16:	9b07      	ldr	r3, [sp, #28]
 801aa18:	f109 37ff 	add.w	r7, r9, #4294967295
 801aa1c:	42bb      	cmp	r3, r7
 801aa1e:	bfbf      	itttt	lt
 801aa20:	9b07      	ldrlt	r3, [sp, #28]
 801aa22:	9707      	strlt	r7, [sp, #28]
 801aa24:	1afa      	sublt	r2, r7, r3
 801aa26:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801aa28:	bfbb      	ittet	lt
 801aa2a:	189b      	addlt	r3, r3, r2
 801aa2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801aa2e:	1bdf      	subge	r7, r3, r7
 801aa30:	2700      	movlt	r7, #0
 801aa32:	f1b9 0f00 	cmp.w	r9, #0
 801aa36:	bfb5      	itete	lt
 801aa38:	9b05      	ldrlt	r3, [sp, #20]
 801aa3a:	9d05      	ldrge	r5, [sp, #20]
 801aa3c:	eba3 0509 	sublt.w	r5, r3, r9
 801aa40:	464b      	movge	r3, r9
 801aa42:	bfb8      	it	lt
 801aa44:	2300      	movlt	r3, #0
 801aa46:	e77e      	b.n	801a946 <_dtoa_r+0x6fe>
 801aa48:	9f07      	ldr	r7, [sp, #28]
 801aa4a:	9d05      	ldr	r5, [sp, #20]
 801aa4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801aa4e:	e783      	b.n	801a958 <_dtoa_r+0x710>
 801aa50:	9a07      	ldr	r2, [sp, #28]
 801aa52:	e7ab      	b.n	801a9ac <_dtoa_r+0x764>
 801aa54:	2300      	movs	r3, #0
 801aa56:	e7d4      	b.n	801aa02 <_dtoa_r+0x7ba>
 801aa58:	9b00      	ldr	r3, [sp, #0]
 801aa5a:	e7d2      	b.n	801aa02 <_dtoa_r+0x7ba>
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	9307      	str	r3, [sp, #28]
 801aa60:	693b      	ldr	r3, [r7, #16]
 801aa62:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801aa66:	6918      	ldr	r0, [r3, #16]
 801aa68:	f000 fe1b 	bl	801b6a2 <__hi0bits>
 801aa6c:	f1c0 0020 	rsb	r0, r0, #32
 801aa70:	4440      	add	r0, r8
 801aa72:	f010 001f 	ands.w	r0, r0, #31
 801aa76:	d047      	beq.n	801ab08 <_dtoa_r+0x8c0>
 801aa78:	f1c0 0320 	rsb	r3, r0, #32
 801aa7c:	2b04      	cmp	r3, #4
 801aa7e:	dd3b      	ble.n	801aaf8 <_dtoa_r+0x8b0>
 801aa80:	9b05      	ldr	r3, [sp, #20]
 801aa82:	f1c0 001c 	rsb	r0, r0, #28
 801aa86:	4403      	add	r3, r0
 801aa88:	9305      	str	r3, [sp, #20]
 801aa8a:	4405      	add	r5, r0
 801aa8c:	4480      	add	r8, r0
 801aa8e:	9b05      	ldr	r3, [sp, #20]
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	dd05      	ble.n	801aaa0 <_dtoa_r+0x858>
 801aa94:	461a      	mov	r2, r3
 801aa96:	9904      	ldr	r1, [sp, #16]
 801aa98:	4620      	mov	r0, r4
 801aa9a:	f000 ff3d 	bl	801b918 <__lshift>
 801aa9e:	9004      	str	r0, [sp, #16]
 801aaa0:	f1b8 0f00 	cmp.w	r8, #0
 801aaa4:	dd05      	ble.n	801aab2 <_dtoa_r+0x86a>
 801aaa6:	4639      	mov	r1, r7
 801aaa8:	4642      	mov	r2, r8
 801aaaa:	4620      	mov	r0, r4
 801aaac:	f000 ff34 	bl	801b918 <__lshift>
 801aab0:	4607      	mov	r7, r0
 801aab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aab4:	b353      	cbz	r3, 801ab0c <_dtoa_r+0x8c4>
 801aab6:	4639      	mov	r1, r7
 801aab8:	9804      	ldr	r0, [sp, #16]
 801aaba:	f000 ff81 	bl	801b9c0 <__mcmp>
 801aabe:	2800      	cmp	r0, #0
 801aac0:	da24      	bge.n	801ab0c <_dtoa_r+0x8c4>
 801aac2:	2300      	movs	r3, #0
 801aac4:	220a      	movs	r2, #10
 801aac6:	9904      	ldr	r1, [sp, #16]
 801aac8:	4620      	mov	r0, r4
 801aaca:	f000 fd71 	bl	801b5b0 <__multadd>
 801aace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aad0:	9004      	str	r0, [sp, #16]
 801aad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	f000 814d 	beq.w	801ad76 <_dtoa_r+0xb2e>
 801aadc:	2300      	movs	r3, #0
 801aade:	4631      	mov	r1, r6
 801aae0:	220a      	movs	r2, #10
 801aae2:	4620      	mov	r0, r4
 801aae4:	f000 fd64 	bl	801b5b0 <__multadd>
 801aae8:	9b02      	ldr	r3, [sp, #8]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	4606      	mov	r6, r0
 801aaee:	dc4f      	bgt.n	801ab90 <_dtoa_r+0x948>
 801aaf0:	9b06      	ldr	r3, [sp, #24]
 801aaf2:	2b02      	cmp	r3, #2
 801aaf4:	dd4c      	ble.n	801ab90 <_dtoa_r+0x948>
 801aaf6:	e011      	b.n	801ab1c <_dtoa_r+0x8d4>
 801aaf8:	d0c9      	beq.n	801aa8e <_dtoa_r+0x846>
 801aafa:	9a05      	ldr	r2, [sp, #20]
 801aafc:	331c      	adds	r3, #28
 801aafe:	441a      	add	r2, r3
 801ab00:	9205      	str	r2, [sp, #20]
 801ab02:	441d      	add	r5, r3
 801ab04:	4498      	add	r8, r3
 801ab06:	e7c2      	b.n	801aa8e <_dtoa_r+0x846>
 801ab08:	4603      	mov	r3, r0
 801ab0a:	e7f6      	b.n	801aafa <_dtoa_r+0x8b2>
 801ab0c:	f1b9 0f00 	cmp.w	r9, #0
 801ab10:	dc38      	bgt.n	801ab84 <_dtoa_r+0x93c>
 801ab12:	9b06      	ldr	r3, [sp, #24]
 801ab14:	2b02      	cmp	r3, #2
 801ab16:	dd35      	ble.n	801ab84 <_dtoa_r+0x93c>
 801ab18:	f8cd 9008 	str.w	r9, [sp, #8]
 801ab1c:	9b02      	ldr	r3, [sp, #8]
 801ab1e:	b963      	cbnz	r3, 801ab3a <_dtoa_r+0x8f2>
 801ab20:	4639      	mov	r1, r7
 801ab22:	2205      	movs	r2, #5
 801ab24:	4620      	mov	r0, r4
 801ab26:	f000 fd43 	bl	801b5b0 <__multadd>
 801ab2a:	4601      	mov	r1, r0
 801ab2c:	4607      	mov	r7, r0
 801ab2e:	9804      	ldr	r0, [sp, #16]
 801ab30:	f000 ff46 	bl	801b9c0 <__mcmp>
 801ab34:	2800      	cmp	r0, #0
 801ab36:	f73f adcc 	bgt.w	801a6d2 <_dtoa_r+0x48a>
 801ab3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab3c:	465d      	mov	r5, fp
 801ab3e:	ea6f 0a03 	mvn.w	sl, r3
 801ab42:	f04f 0900 	mov.w	r9, #0
 801ab46:	4639      	mov	r1, r7
 801ab48:	4620      	mov	r0, r4
 801ab4a:	f000 fd1a 	bl	801b582 <_Bfree>
 801ab4e:	2e00      	cmp	r6, #0
 801ab50:	f43f aeb7 	beq.w	801a8c2 <_dtoa_r+0x67a>
 801ab54:	f1b9 0f00 	cmp.w	r9, #0
 801ab58:	d005      	beq.n	801ab66 <_dtoa_r+0x91e>
 801ab5a:	45b1      	cmp	r9, r6
 801ab5c:	d003      	beq.n	801ab66 <_dtoa_r+0x91e>
 801ab5e:	4649      	mov	r1, r9
 801ab60:	4620      	mov	r0, r4
 801ab62:	f000 fd0e 	bl	801b582 <_Bfree>
 801ab66:	4631      	mov	r1, r6
 801ab68:	4620      	mov	r0, r4
 801ab6a:	f000 fd0a 	bl	801b582 <_Bfree>
 801ab6e:	e6a8      	b.n	801a8c2 <_dtoa_r+0x67a>
 801ab70:	2700      	movs	r7, #0
 801ab72:	463e      	mov	r6, r7
 801ab74:	e7e1      	b.n	801ab3a <_dtoa_r+0x8f2>
 801ab76:	f8dd a020 	ldr.w	sl, [sp, #32]
 801ab7a:	463e      	mov	r6, r7
 801ab7c:	e5a9      	b.n	801a6d2 <_dtoa_r+0x48a>
 801ab7e:	bf00      	nop
 801ab80:	40240000 	.word	0x40240000
 801ab84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab86:	f8cd 9008 	str.w	r9, [sp, #8]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	f000 80fa 	beq.w	801ad84 <_dtoa_r+0xb3c>
 801ab90:	2d00      	cmp	r5, #0
 801ab92:	dd05      	ble.n	801aba0 <_dtoa_r+0x958>
 801ab94:	4631      	mov	r1, r6
 801ab96:	462a      	mov	r2, r5
 801ab98:	4620      	mov	r0, r4
 801ab9a:	f000 febd 	bl	801b918 <__lshift>
 801ab9e:	4606      	mov	r6, r0
 801aba0:	9b07      	ldr	r3, [sp, #28]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d04c      	beq.n	801ac40 <_dtoa_r+0x9f8>
 801aba6:	6871      	ldr	r1, [r6, #4]
 801aba8:	4620      	mov	r0, r4
 801abaa:	f000 fcb6 	bl	801b51a <_Balloc>
 801abae:	6932      	ldr	r2, [r6, #16]
 801abb0:	3202      	adds	r2, #2
 801abb2:	4605      	mov	r5, r0
 801abb4:	0092      	lsls	r2, r2, #2
 801abb6:	f106 010c 	add.w	r1, r6, #12
 801abba:	300c      	adds	r0, #12
 801abbc:	f7fc fc44 	bl	8017448 <memcpy>
 801abc0:	2201      	movs	r2, #1
 801abc2:	4629      	mov	r1, r5
 801abc4:	4620      	mov	r0, r4
 801abc6:	f000 fea7 	bl	801b918 <__lshift>
 801abca:	9b00      	ldr	r3, [sp, #0]
 801abcc:	f8cd b014 	str.w	fp, [sp, #20]
 801abd0:	f003 0301 	and.w	r3, r3, #1
 801abd4:	46b1      	mov	r9, r6
 801abd6:	9307      	str	r3, [sp, #28]
 801abd8:	4606      	mov	r6, r0
 801abda:	4639      	mov	r1, r7
 801abdc:	9804      	ldr	r0, [sp, #16]
 801abde:	f7ff faa7 	bl	801a130 <quorem>
 801abe2:	4649      	mov	r1, r9
 801abe4:	4605      	mov	r5, r0
 801abe6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801abea:	9804      	ldr	r0, [sp, #16]
 801abec:	f000 fee8 	bl	801b9c0 <__mcmp>
 801abf0:	4632      	mov	r2, r6
 801abf2:	9000      	str	r0, [sp, #0]
 801abf4:	4639      	mov	r1, r7
 801abf6:	4620      	mov	r0, r4
 801abf8:	f000 fefc 	bl	801b9f4 <__mdiff>
 801abfc:	68c3      	ldr	r3, [r0, #12]
 801abfe:	4602      	mov	r2, r0
 801ac00:	bb03      	cbnz	r3, 801ac44 <_dtoa_r+0x9fc>
 801ac02:	4601      	mov	r1, r0
 801ac04:	9008      	str	r0, [sp, #32]
 801ac06:	9804      	ldr	r0, [sp, #16]
 801ac08:	f000 feda 	bl	801b9c0 <__mcmp>
 801ac0c:	9a08      	ldr	r2, [sp, #32]
 801ac0e:	4603      	mov	r3, r0
 801ac10:	4611      	mov	r1, r2
 801ac12:	4620      	mov	r0, r4
 801ac14:	9308      	str	r3, [sp, #32]
 801ac16:	f000 fcb4 	bl	801b582 <_Bfree>
 801ac1a:	9b08      	ldr	r3, [sp, #32]
 801ac1c:	b9a3      	cbnz	r3, 801ac48 <_dtoa_r+0xa00>
 801ac1e:	9a06      	ldr	r2, [sp, #24]
 801ac20:	b992      	cbnz	r2, 801ac48 <_dtoa_r+0xa00>
 801ac22:	9a07      	ldr	r2, [sp, #28]
 801ac24:	b982      	cbnz	r2, 801ac48 <_dtoa_r+0xa00>
 801ac26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801ac2a:	d029      	beq.n	801ac80 <_dtoa_r+0xa38>
 801ac2c:	9b00      	ldr	r3, [sp, #0]
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	dd01      	ble.n	801ac36 <_dtoa_r+0x9ee>
 801ac32:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801ac36:	9b05      	ldr	r3, [sp, #20]
 801ac38:	1c5d      	adds	r5, r3, #1
 801ac3a:	f883 8000 	strb.w	r8, [r3]
 801ac3e:	e782      	b.n	801ab46 <_dtoa_r+0x8fe>
 801ac40:	4630      	mov	r0, r6
 801ac42:	e7c2      	b.n	801abca <_dtoa_r+0x982>
 801ac44:	2301      	movs	r3, #1
 801ac46:	e7e3      	b.n	801ac10 <_dtoa_r+0x9c8>
 801ac48:	9a00      	ldr	r2, [sp, #0]
 801ac4a:	2a00      	cmp	r2, #0
 801ac4c:	db04      	blt.n	801ac58 <_dtoa_r+0xa10>
 801ac4e:	d125      	bne.n	801ac9c <_dtoa_r+0xa54>
 801ac50:	9a06      	ldr	r2, [sp, #24]
 801ac52:	bb1a      	cbnz	r2, 801ac9c <_dtoa_r+0xa54>
 801ac54:	9a07      	ldr	r2, [sp, #28]
 801ac56:	bb0a      	cbnz	r2, 801ac9c <_dtoa_r+0xa54>
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	ddec      	ble.n	801ac36 <_dtoa_r+0x9ee>
 801ac5c:	2201      	movs	r2, #1
 801ac5e:	9904      	ldr	r1, [sp, #16]
 801ac60:	4620      	mov	r0, r4
 801ac62:	f000 fe59 	bl	801b918 <__lshift>
 801ac66:	4639      	mov	r1, r7
 801ac68:	9004      	str	r0, [sp, #16]
 801ac6a:	f000 fea9 	bl	801b9c0 <__mcmp>
 801ac6e:	2800      	cmp	r0, #0
 801ac70:	dc03      	bgt.n	801ac7a <_dtoa_r+0xa32>
 801ac72:	d1e0      	bne.n	801ac36 <_dtoa_r+0x9ee>
 801ac74:	f018 0f01 	tst.w	r8, #1
 801ac78:	d0dd      	beq.n	801ac36 <_dtoa_r+0x9ee>
 801ac7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801ac7e:	d1d8      	bne.n	801ac32 <_dtoa_r+0x9ea>
 801ac80:	9b05      	ldr	r3, [sp, #20]
 801ac82:	9a05      	ldr	r2, [sp, #20]
 801ac84:	1c5d      	adds	r5, r3, #1
 801ac86:	2339      	movs	r3, #57	; 0x39
 801ac88:	7013      	strb	r3, [r2, #0]
 801ac8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ac8e:	2b39      	cmp	r3, #57	; 0x39
 801ac90:	f105 32ff 	add.w	r2, r5, #4294967295
 801ac94:	d04f      	beq.n	801ad36 <_dtoa_r+0xaee>
 801ac96:	3301      	adds	r3, #1
 801ac98:	7013      	strb	r3, [r2, #0]
 801ac9a:	e754      	b.n	801ab46 <_dtoa_r+0x8fe>
 801ac9c:	9a05      	ldr	r2, [sp, #20]
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	f102 0501 	add.w	r5, r2, #1
 801aca4:	dd06      	ble.n	801acb4 <_dtoa_r+0xa6c>
 801aca6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801acaa:	d0e9      	beq.n	801ac80 <_dtoa_r+0xa38>
 801acac:	f108 0801 	add.w	r8, r8, #1
 801acb0:	9b05      	ldr	r3, [sp, #20]
 801acb2:	e7c2      	b.n	801ac3a <_dtoa_r+0x9f2>
 801acb4:	9a02      	ldr	r2, [sp, #8]
 801acb6:	f805 8c01 	strb.w	r8, [r5, #-1]
 801acba:	eba5 030b 	sub.w	r3, r5, fp
 801acbe:	4293      	cmp	r3, r2
 801acc0:	d021      	beq.n	801ad06 <_dtoa_r+0xabe>
 801acc2:	2300      	movs	r3, #0
 801acc4:	220a      	movs	r2, #10
 801acc6:	9904      	ldr	r1, [sp, #16]
 801acc8:	4620      	mov	r0, r4
 801acca:	f000 fc71 	bl	801b5b0 <__multadd>
 801acce:	45b1      	cmp	r9, r6
 801acd0:	9004      	str	r0, [sp, #16]
 801acd2:	f04f 0300 	mov.w	r3, #0
 801acd6:	f04f 020a 	mov.w	r2, #10
 801acda:	4649      	mov	r1, r9
 801acdc:	4620      	mov	r0, r4
 801acde:	d105      	bne.n	801acec <_dtoa_r+0xaa4>
 801ace0:	f000 fc66 	bl	801b5b0 <__multadd>
 801ace4:	4681      	mov	r9, r0
 801ace6:	4606      	mov	r6, r0
 801ace8:	9505      	str	r5, [sp, #20]
 801acea:	e776      	b.n	801abda <_dtoa_r+0x992>
 801acec:	f000 fc60 	bl	801b5b0 <__multadd>
 801acf0:	4631      	mov	r1, r6
 801acf2:	4681      	mov	r9, r0
 801acf4:	2300      	movs	r3, #0
 801acf6:	220a      	movs	r2, #10
 801acf8:	4620      	mov	r0, r4
 801acfa:	f000 fc59 	bl	801b5b0 <__multadd>
 801acfe:	4606      	mov	r6, r0
 801ad00:	e7f2      	b.n	801ace8 <_dtoa_r+0xaa0>
 801ad02:	f04f 0900 	mov.w	r9, #0
 801ad06:	2201      	movs	r2, #1
 801ad08:	9904      	ldr	r1, [sp, #16]
 801ad0a:	4620      	mov	r0, r4
 801ad0c:	f000 fe04 	bl	801b918 <__lshift>
 801ad10:	4639      	mov	r1, r7
 801ad12:	9004      	str	r0, [sp, #16]
 801ad14:	f000 fe54 	bl	801b9c0 <__mcmp>
 801ad18:	2800      	cmp	r0, #0
 801ad1a:	dcb6      	bgt.n	801ac8a <_dtoa_r+0xa42>
 801ad1c:	d102      	bne.n	801ad24 <_dtoa_r+0xadc>
 801ad1e:	f018 0f01 	tst.w	r8, #1
 801ad22:	d1b2      	bne.n	801ac8a <_dtoa_r+0xa42>
 801ad24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ad28:	2b30      	cmp	r3, #48	; 0x30
 801ad2a:	f105 32ff 	add.w	r2, r5, #4294967295
 801ad2e:	f47f af0a 	bne.w	801ab46 <_dtoa_r+0x8fe>
 801ad32:	4615      	mov	r5, r2
 801ad34:	e7f6      	b.n	801ad24 <_dtoa_r+0xadc>
 801ad36:	4593      	cmp	fp, r2
 801ad38:	d105      	bne.n	801ad46 <_dtoa_r+0xafe>
 801ad3a:	2331      	movs	r3, #49	; 0x31
 801ad3c:	f10a 0a01 	add.w	sl, sl, #1
 801ad40:	f88b 3000 	strb.w	r3, [fp]
 801ad44:	e6ff      	b.n	801ab46 <_dtoa_r+0x8fe>
 801ad46:	4615      	mov	r5, r2
 801ad48:	e79f      	b.n	801ac8a <_dtoa_r+0xa42>
 801ad4a:	f8df b064 	ldr.w	fp, [pc, #100]	; 801adb0 <_dtoa_r+0xb68>
 801ad4e:	e007      	b.n	801ad60 <_dtoa_r+0xb18>
 801ad50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ad52:	f8df b060 	ldr.w	fp, [pc, #96]	; 801adb4 <_dtoa_r+0xb6c>
 801ad56:	b11b      	cbz	r3, 801ad60 <_dtoa_r+0xb18>
 801ad58:	f10b 0308 	add.w	r3, fp, #8
 801ad5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ad5e:	6013      	str	r3, [r2, #0]
 801ad60:	4658      	mov	r0, fp
 801ad62:	b017      	add	sp, #92	; 0x5c
 801ad64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad68:	9b06      	ldr	r3, [sp, #24]
 801ad6a:	2b01      	cmp	r3, #1
 801ad6c:	f77f ae35 	ble.w	801a9da <_dtoa_r+0x792>
 801ad70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad72:	9307      	str	r3, [sp, #28]
 801ad74:	e649      	b.n	801aa0a <_dtoa_r+0x7c2>
 801ad76:	9b02      	ldr	r3, [sp, #8]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	dc03      	bgt.n	801ad84 <_dtoa_r+0xb3c>
 801ad7c:	9b06      	ldr	r3, [sp, #24]
 801ad7e:	2b02      	cmp	r3, #2
 801ad80:	f73f aecc 	bgt.w	801ab1c <_dtoa_r+0x8d4>
 801ad84:	465d      	mov	r5, fp
 801ad86:	4639      	mov	r1, r7
 801ad88:	9804      	ldr	r0, [sp, #16]
 801ad8a:	f7ff f9d1 	bl	801a130 <quorem>
 801ad8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801ad92:	f805 8b01 	strb.w	r8, [r5], #1
 801ad96:	9a02      	ldr	r2, [sp, #8]
 801ad98:	eba5 030b 	sub.w	r3, r5, fp
 801ad9c:	429a      	cmp	r2, r3
 801ad9e:	ddb0      	ble.n	801ad02 <_dtoa_r+0xaba>
 801ada0:	2300      	movs	r3, #0
 801ada2:	220a      	movs	r2, #10
 801ada4:	9904      	ldr	r1, [sp, #16]
 801ada6:	4620      	mov	r0, r4
 801ada8:	f000 fc02 	bl	801b5b0 <__multadd>
 801adac:	9004      	str	r0, [sp, #16]
 801adae:	e7ea      	b.n	801ad86 <_dtoa_r+0xb3e>
 801adb0:	0801c7a2 	.word	0x0801c7a2
 801adb4:	0801c7f8 	.word	0x0801c7f8

0801adb8 <_fstat_r>:
 801adb8:	b538      	push	{r3, r4, r5, lr}
 801adba:	4c07      	ldr	r4, [pc, #28]	; (801add8 <_fstat_r+0x20>)
 801adbc:	2300      	movs	r3, #0
 801adbe:	4605      	mov	r5, r0
 801adc0:	4608      	mov	r0, r1
 801adc2:	4611      	mov	r1, r2
 801adc4:	6023      	str	r3, [r4, #0]
 801adc6:	f7f5 fd22 	bl	801080e <_fstat>
 801adca:	1c43      	adds	r3, r0, #1
 801adcc:	d102      	bne.n	801add4 <_fstat_r+0x1c>
 801adce:	6823      	ldr	r3, [r4, #0]
 801add0:	b103      	cbz	r3, 801add4 <_fstat_r+0x1c>
 801add2:	602b      	str	r3, [r5, #0]
 801add4:	bd38      	pop	{r3, r4, r5, pc}
 801add6:	bf00      	nop
 801add8:	20001084 	.word	0x20001084

0801addc <rshift>:
 801addc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801adde:	6906      	ldr	r6, [r0, #16]
 801ade0:	114b      	asrs	r3, r1, #5
 801ade2:	429e      	cmp	r6, r3
 801ade4:	f100 0414 	add.w	r4, r0, #20
 801ade8:	dd30      	ble.n	801ae4c <rshift+0x70>
 801adea:	f011 011f 	ands.w	r1, r1, #31
 801adee:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801adf2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801adf6:	d108      	bne.n	801ae0a <rshift+0x2e>
 801adf8:	4621      	mov	r1, r4
 801adfa:	42b2      	cmp	r2, r6
 801adfc:	460b      	mov	r3, r1
 801adfe:	d211      	bcs.n	801ae24 <rshift+0x48>
 801ae00:	f852 3b04 	ldr.w	r3, [r2], #4
 801ae04:	f841 3b04 	str.w	r3, [r1], #4
 801ae08:	e7f7      	b.n	801adfa <rshift+0x1e>
 801ae0a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801ae0e:	f1c1 0c20 	rsb	ip, r1, #32
 801ae12:	40cd      	lsrs	r5, r1
 801ae14:	3204      	adds	r2, #4
 801ae16:	4623      	mov	r3, r4
 801ae18:	42b2      	cmp	r2, r6
 801ae1a:	4617      	mov	r7, r2
 801ae1c:	d30c      	bcc.n	801ae38 <rshift+0x5c>
 801ae1e:	601d      	str	r5, [r3, #0]
 801ae20:	b105      	cbz	r5, 801ae24 <rshift+0x48>
 801ae22:	3304      	adds	r3, #4
 801ae24:	1b1a      	subs	r2, r3, r4
 801ae26:	42a3      	cmp	r3, r4
 801ae28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ae2c:	bf08      	it	eq
 801ae2e:	2300      	moveq	r3, #0
 801ae30:	6102      	str	r2, [r0, #16]
 801ae32:	bf08      	it	eq
 801ae34:	6143      	streq	r3, [r0, #20]
 801ae36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae38:	683f      	ldr	r7, [r7, #0]
 801ae3a:	fa07 f70c 	lsl.w	r7, r7, ip
 801ae3e:	433d      	orrs	r5, r7
 801ae40:	f843 5b04 	str.w	r5, [r3], #4
 801ae44:	f852 5b04 	ldr.w	r5, [r2], #4
 801ae48:	40cd      	lsrs	r5, r1
 801ae4a:	e7e5      	b.n	801ae18 <rshift+0x3c>
 801ae4c:	4623      	mov	r3, r4
 801ae4e:	e7e9      	b.n	801ae24 <rshift+0x48>

0801ae50 <__hexdig_fun>:
 801ae50:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ae54:	2b09      	cmp	r3, #9
 801ae56:	d802      	bhi.n	801ae5e <__hexdig_fun+0xe>
 801ae58:	3820      	subs	r0, #32
 801ae5a:	b2c0      	uxtb	r0, r0
 801ae5c:	4770      	bx	lr
 801ae5e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801ae62:	2b05      	cmp	r3, #5
 801ae64:	d801      	bhi.n	801ae6a <__hexdig_fun+0x1a>
 801ae66:	3847      	subs	r0, #71	; 0x47
 801ae68:	e7f7      	b.n	801ae5a <__hexdig_fun+0xa>
 801ae6a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801ae6e:	2b05      	cmp	r3, #5
 801ae70:	d801      	bhi.n	801ae76 <__hexdig_fun+0x26>
 801ae72:	3827      	subs	r0, #39	; 0x27
 801ae74:	e7f1      	b.n	801ae5a <__hexdig_fun+0xa>
 801ae76:	2000      	movs	r0, #0
 801ae78:	4770      	bx	lr

0801ae7a <__gethex>:
 801ae7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae7e:	b08b      	sub	sp, #44	; 0x2c
 801ae80:	468a      	mov	sl, r1
 801ae82:	9002      	str	r0, [sp, #8]
 801ae84:	9816      	ldr	r0, [sp, #88]	; 0x58
 801ae86:	9306      	str	r3, [sp, #24]
 801ae88:	4690      	mov	r8, r2
 801ae8a:	f000 faef 	bl	801b46c <__localeconv_l>
 801ae8e:	6803      	ldr	r3, [r0, #0]
 801ae90:	9303      	str	r3, [sp, #12]
 801ae92:	4618      	mov	r0, r3
 801ae94:	f7ed f8d4 	bl	8008040 <strlen>
 801ae98:	9b03      	ldr	r3, [sp, #12]
 801ae9a:	9001      	str	r0, [sp, #4]
 801ae9c:	4403      	add	r3, r0
 801ae9e:	f04f 0b00 	mov.w	fp, #0
 801aea2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801aea6:	9307      	str	r3, [sp, #28]
 801aea8:	f8da 3000 	ldr.w	r3, [sl]
 801aeac:	3302      	adds	r3, #2
 801aeae:	461f      	mov	r7, r3
 801aeb0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801aeb4:	2830      	cmp	r0, #48	; 0x30
 801aeb6:	d06c      	beq.n	801af92 <__gethex+0x118>
 801aeb8:	f7ff ffca 	bl	801ae50 <__hexdig_fun>
 801aebc:	4604      	mov	r4, r0
 801aebe:	2800      	cmp	r0, #0
 801aec0:	d16a      	bne.n	801af98 <__gethex+0x11e>
 801aec2:	9a01      	ldr	r2, [sp, #4]
 801aec4:	9903      	ldr	r1, [sp, #12]
 801aec6:	4638      	mov	r0, r7
 801aec8:	f001 f8f4 	bl	801c0b4 <strncmp>
 801aecc:	2800      	cmp	r0, #0
 801aece:	d166      	bne.n	801af9e <__gethex+0x124>
 801aed0:	9b01      	ldr	r3, [sp, #4]
 801aed2:	5cf8      	ldrb	r0, [r7, r3]
 801aed4:	18fe      	adds	r6, r7, r3
 801aed6:	f7ff ffbb 	bl	801ae50 <__hexdig_fun>
 801aeda:	2800      	cmp	r0, #0
 801aedc:	d062      	beq.n	801afa4 <__gethex+0x12a>
 801aede:	4633      	mov	r3, r6
 801aee0:	7818      	ldrb	r0, [r3, #0]
 801aee2:	2830      	cmp	r0, #48	; 0x30
 801aee4:	461f      	mov	r7, r3
 801aee6:	f103 0301 	add.w	r3, r3, #1
 801aeea:	d0f9      	beq.n	801aee0 <__gethex+0x66>
 801aeec:	f7ff ffb0 	bl	801ae50 <__hexdig_fun>
 801aef0:	fab0 f580 	clz	r5, r0
 801aef4:	096d      	lsrs	r5, r5, #5
 801aef6:	4634      	mov	r4, r6
 801aef8:	f04f 0b01 	mov.w	fp, #1
 801aefc:	463a      	mov	r2, r7
 801aefe:	4616      	mov	r6, r2
 801af00:	3201      	adds	r2, #1
 801af02:	7830      	ldrb	r0, [r6, #0]
 801af04:	f7ff ffa4 	bl	801ae50 <__hexdig_fun>
 801af08:	2800      	cmp	r0, #0
 801af0a:	d1f8      	bne.n	801aefe <__gethex+0x84>
 801af0c:	9a01      	ldr	r2, [sp, #4]
 801af0e:	9903      	ldr	r1, [sp, #12]
 801af10:	4630      	mov	r0, r6
 801af12:	f001 f8cf 	bl	801c0b4 <strncmp>
 801af16:	b950      	cbnz	r0, 801af2e <__gethex+0xb4>
 801af18:	b954      	cbnz	r4, 801af30 <__gethex+0xb6>
 801af1a:	9b01      	ldr	r3, [sp, #4]
 801af1c:	18f4      	adds	r4, r6, r3
 801af1e:	4622      	mov	r2, r4
 801af20:	4616      	mov	r6, r2
 801af22:	3201      	adds	r2, #1
 801af24:	7830      	ldrb	r0, [r6, #0]
 801af26:	f7ff ff93 	bl	801ae50 <__hexdig_fun>
 801af2a:	2800      	cmp	r0, #0
 801af2c:	d1f8      	bne.n	801af20 <__gethex+0xa6>
 801af2e:	b10c      	cbz	r4, 801af34 <__gethex+0xba>
 801af30:	1ba4      	subs	r4, r4, r6
 801af32:	00a4      	lsls	r4, r4, #2
 801af34:	7833      	ldrb	r3, [r6, #0]
 801af36:	2b50      	cmp	r3, #80	; 0x50
 801af38:	d001      	beq.n	801af3e <__gethex+0xc4>
 801af3a:	2b70      	cmp	r3, #112	; 0x70
 801af3c:	d140      	bne.n	801afc0 <__gethex+0x146>
 801af3e:	7873      	ldrb	r3, [r6, #1]
 801af40:	2b2b      	cmp	r3, #43	; 0x2b
 801af42:	d031      	beq.n	801afa8 <__gethex+0x12e>
 801af44:	2b2d      	cmp	r3, #45	; 0x2d
 801af46:	d033      	beq.n	801afb0 <__gethex+0x136>
 801af48:	1c71      	adds	r1, r6, #1
 801af4a:	f04f 0900 	mov.w	r9, #0
 801af4e:	7808      	ldrb	r0, [r1, #0]
 801af50:	f7ff ff7e 	bl	801ae50 <__hexdig_fun>
 801af54:	1e43      	subs	r3, r0, #1
 801af56:	b2db      	uxtb	r3, r3
 801af58:	2b18      	cmp	r3, #24
 801af5a:	d831      	bhi.n	801afc0 <__gethex+0x146>
 801af5c:	f1a0 0210 	sub.w	r2, r0, #16
 801af60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801af64:	f7ff ff74 	bl	801ae50 <__hexdig_fun>
 801af68:	1e43      	subs	r3, r0, #1
 801af6a:	b2db      	uxtb	r3, r3
 801af6c:	2b18      	cmp	r3, #24
 801af6e:	d922      	bls.n	801afb6 <__gethex+0x13c>
 801af70:	f1b9 0f00 	cmp.w	r9, #0
 801af74:	d000      	beq.n	801af78 <__gethex+0xfe>
 801af76:	4252      	negs	r2, r2
 801af78:	4414      	add	r4, r2
 801af7a:	f8ca 1000 	str.w	r1, [sl]
 801af7e:	b30d      	cbz	r5, 801afc4 <__gethex+0x14a>
 801af80:	f1bb 0f00 	cmp.w	fp, #0
 801af84:	bf0c      	ite	eq
 801af86:	2706      	moveq	r7, #6
 801af88:	2700      	movne	r7, #0
 801af8a:	4638      	mov	r0, r7
 801af8c:	b00b      	add	sp, #44	; 0x2c
 801af8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af92:	f10b 0b01 	add.w	fp, fp, #1
 801af96:	e78a      	b.n	801aeae <__gethex+0x34>
 801af98:	2500      	movs	r5, #0
 801af9a:	462c      	mov	r4, r5
 801af9c:	e7ae      	b.n	801aefc <__gethex+0x82>
 801af9e:	463e      	mov	r6, r7
 801afa0:	2501      	movs	r5, #1
 801afa2:	e7c7      	b.n	801af34 <__gethex+0xba>
 801afa4:	4604      	mov	r4, r0
 801afa6:	e7fb      	b.n	801afa0 <__gethex+0x126>
 801afa8:	f04f 0900 	mov.w	r9, #0
 801afac:	1cb1      	adds	r1, r6, #2
 801afae:	e7ce      	b.n	801af4e <__gethex+0xd4>
 801afb0:	f04f 0901 	mov.w	r9, #1
 801afb4:	e7fa      	b.n	801afac <__gethex+0x132>
 801afb6:	230a      	movs	r3, #10
 801afb8:	fb03 0202 	mla	r2, r3, r2, r0
 801afbc:	3a10      	subs	r2, #16
 801afbe:	e7cf      	b.n	801af60 <__gethex+0xe6>
 801afc0:	4631      	mov	r1, r6
 801afc2:	e7da      	b.n	801af7a <__gethex+0x100>
 801afc4:	1bf3      	subs	r3, r6, r7
 801afc6:	3b01      	subs	r3, #1
 801afc8:	4629      	mov	r1, r5
 801afca:	2b07      	cmp	r3, #7
 801afcc:	dc49      	bgt.n	801b062 <__gethex+0x1e8>
 801afce:	9802      	ldr	r0, [sp, #8]
 801afd0:	f000 faa3 	bl	801b51a <_Balloc>
 801afd4:	9b01      	ldr	r3, [sp, #4]
 801afd6:	f100 0914 	add.w	r9, r0, #20
 801afda:	f04f 0b00 	mov.w	fp, #0
 801afde:	f1c3 0301 	rsb	r3, r3, #1
 801afe2:	4605      	mov	r5, r0
 801afe4:	f8cd 9010 	str.w	r9, [sp, #16]
 801afe8:	46da      	mov	sl, fp
 801afea:	9308      	str	r3, [sp, #32]
 801afec:	42b7      	cmp	r7, r6
 801afee:	d33b      	bcc.n	801b068 <__gethex+0x1ee>
 801aff0:	9804      	ldr	r0, [sp, #16]
 801aff2:	f840 ab04 	str.w	sl, [r0], #4
 801aff6:	eba0 0009 	sub.w	r0, r0, r9
 801affa:	1080      	asrs	r0, r0, #2
 801affc:	6128      	str	r0, [r5, #16]
 801affe:	0147      	lsls	r7, r0, #5
 801b000:	4650      	mov	r0, sl
 801b002:	f000 fb4e 	bl	801b6a2 <__hi0bits>
 801b006:	f8d8 6000 	ldr.w	r6, [r8]
 801b00a:	1a3f      	subs	r7, r7, r0
 801b00c:	42b7      	cmp	r7, r6
 801b00e:	dd64      	ble.n	801b0da <__gethex+0x260>
 801b010:	1bbf      	subs	r7, r7, r6
 801b012:	4639      	mov	r1, r7
 801b014:	4628      	mov	r0, r5
 801b016:	f000 fe5d 	bl	801bcd4 <__any_on>
 801b01a:	4682      	mov	sl, r0
 801b01c:	b178      	cbz	r0, 801b03e <__gethex+0x1c4>
 801b01e:	1e7b      	subs	r3, r7, #1
 801b020:	1159      	asrs	r1, r3, #5
 801b022:	f003 021f 	and.w	r2, r3, #31
 801b026:	f04f 0a01 	mov.w	sl, #1
 801b02a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801b02e:	fa0a f202 	lsl.w	r2, sl, r2
 801b032:	420a      	tst	r2, r1
 801b034:	d003      	beq.n	801b03e <__gethex+0x1c4>
 801b036:	4553      	cmp	r3, sl
 801b038:	dc46      	bgt.n	801b0c8 <__gethex+0x24e>
 801b03a:	f04f 0a02 	mov.w	sl, #2
 801b03e:	4639      	mov	r1, r7
 801b040:	4628      	mov	r0, r5
 801b042:	f7ff fecb 	bl	801addc <rshift>
 801b046:	443c      	add	r4, r7
 801b048:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b04c:	42a3      	cmp	r3, r4
 801b04e:	da52      	bge.n	801b0f6 <__gethex+0x27c>
 801b050:	4629      	mov	r1, r5
 801b052:	9802      	ldr	r0, [sp, #8]
 801b054:	f000 fa95 	bl	801b582 <_Bfree>
 801b058:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b05a:	2300      	movs	r3, #0
 801b05c:	6013      	str	r3, [r2, #0]
 801b05e:	27a3      	movs	r7, #163	; 0xa3
 801b060:	e793      	b.n	801af8a <__gethex+0x110>
 801b062:	3101      	adds	r1, #1
 801b064:	105b      	asrs	r3, r3, #1
 801b066:	e7b0      	b.n	801afca <__gethex+0x150>
 801b068:	1e73      	subs	r3, r6, #1
 801b06a:	9305      	str	r3, [sp, #20]
 801b06c:	9a07      	ldr	r2, [sp, #28]
 801b06e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b072:	4293      	cmp	r3, r2
 801b074:	d018      	beq.n	801b0a8 <__gethex+0x22e>
 801b076:	f1bb 0f20 	cmp.w	fp, #32
 801b07a:	d107      	bne.n	801b08c <__gethex+0x212>
 801b07c:	9b04      	ldr	r3, [sp, #16]
 801b07e:	f8c3 a000 	str.w	sl, [r3]
 801b082:	3304      	adds	r3, #4
 801b084:	f04f 0a00 	mov.w	sl, #0
 801b088:	9304      	str	r3, [sp, #16]
 801b08a:	46d3      	mov	fp, sl
 801b08c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801b090:	f7ff fede 	bl	801ae50 <__hexdig_fun>
 801b094:	f000 000f 	and.w	r0, r0, #15
 801b098:	fa00 f00b 	lsl.w	r0, r0, fp
 801b09c:	ea4a 0a00 	orr.w	sl, sl, r0
 801b0a0:	f10b 0b04 	add.w	fp, fp, #4
 801b0a4:	9b05      	ldr	r3, [sp, #20]
 801b0a6:	e00d      	b.n	801b0c4 <__gethex+0x24a>
 801b0a8:	9b05      	ldr	r3, [sp, #20]
 801b0aa:	9a08      	ldr	r2, [sp, #32]
 801b0ac:	4413      	add	r3, r2
 801b0ae:	42bb      	cmp	r3, r7
 801b0b0:	d3e1      	bcc.n	801b076 <__gethex+0x1fc>
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	9a01      	ldr	r2, [sp, #4]
 801b0b6:	9903      	ldr	r1, [sp, #12]
 801b0b8:	9309      	str	r3, [sp, #36]	; 0x24
 801b0ba:	f000 fffb 	bl	801c0b4 <strncmp>
 801b0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0c0:	2800      	cmp	r0, #0
 801b0c2:	d1d8      	bne.n	801b076 <__gethex+0x1fc>
 801b0c4:	461e      	mov	r6, r3
 801b0c6:	e791      	b.n	801afec <__gethex+0x172>
 801b0c8:	1eb9      	subs	r1, r7, #2
 801b0ca:	4628      	mov	r0, r5
 801b0cc:	f000 fe02 	bl	801bcd4 <__any_on>
 801b0d0:	2800      	cmp	r0, #0
 801b0d2:	d0b2      	beq.n	801b03a <__gethex+0x1c0>
 801b0d4:	f04f 0a03 	mov.w	sl, #3
 801b0d8:	e7b1      	b.n	801b03e <__gethex+0x1c4>
 801b0da:	da09      	bge.n	801b0f0 <__gethex+0x276>
 801b0dc:	1bf7      	subs	r7, r6, r7
 801b0de:	4629      	mov	r1, r5
 801b0e0:	463a      	mov	r2, r7
 801b0e2:	9802      	ldr	r0, [sp, #8]
 801b0e4:	f000 fc18 	bl	801b918 <__lshift>
 801b0e8:	1be4      	subs	r4, r4, r7
 801b0ea:	4605      	mov	r5, r0
 801b0ec:	f100 0914 	add.w	r9, r0, #20
 801b0f0:	f04f 0a00 	mov.w	sl, #0
 801b0f4:	e7a8      	b.n	801b048 <__gethex+0x1ce>
 801b0f6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b0fa:	42a0      	cmp	r0, r4
 801b0fc:	dd6a      	ble.n	801b1d4 <__gethex+0x35a>
 801b0fe:	1b04      	subs	r4, r0, r4
 801b100:	42a6      	cmp	r6, r4
 801b102:	dc2e      	bgt.n	801b162 <__gethex+0x2e8>
 801b104:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b108:	2b02      	cmp	r3, #2
 801b10a:	d022      	beq.n	801b152 <__gethex+0x2d8>
 801b10c:	2b03      	cmp	r3, #3
 801b10e:	d024      	beq.n	801b15a <__gethex+0x2e0>
 801b110:	2b01      	cmp	r3, #1
 801b112:	d115      	bne.n	801b140 <__gethex+0x2c6>
 801b114:	42a6      	cmp	r6, r4
 801b116:	d113      	bne.n	801b140 <__gethex+0x2c6>
 801b118:	2e01      	cmp	r6, #1
 801b11a:	dc0b      	bgt.n	801b134 <__gethex+0x2ba>
 801b11c:	9a06      	ldr	r2, [sp, #24]
 801b11e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b122:	6013      	str	r3, [r2, #0]
 801b124:	2301      	movs	r3, #1
 801b126:	612b      	str	r3, [r5, #16]
 801b128:	f8c9 3000 	str.w	r3, [r9]
 801b12c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b12e:	2762      	movs	r7, #98	; 0x62
 801b130:	601d      	str	r5, [r3, #0]
 801b132:	e72a      	b.n	801af8a <__gethex+0x110>
 801b134:	1e71      	subs	r1, r6, #1
 801b136:	4628      	mov	r0, r5
 801b138:	f000 fdcc 	bl	801bcd4 <__any_on>
 801b13c:	2800      	cmp	r0, #0
 801b13e:	d1ed      	bne.n	801b11c <__gethex+0x2a2>
 801b140:	4629      	mov	r1, r5
 801b142:	9802      	ldr	r0, [sp, #8]
 801b144:	f000 fa1d 	bl	801b582 <_Bfree>
 801b148:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b14a:	2300      	movs	r3, #0
 801b14c:	6013      	str	r3, [r2, #0]
 801b14e:	2750      	movs	r7, #80	; 0x50
 801b150:	e71b      	b.n	801af8a <__gethex+0x110>
 801b152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b154:	2b00      	cmp	r3, #0
 801b156:	d0e1      	beq.n	801b11c <__gethex+0x2a2>
 801b158:	e7f2      	b.n	801b140 <__gethex+0x2c6>
 801b15a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d1dd      	bne.n	801b11c <__gethex+0x2a2>
 801b160:	e7ee      	b.n	801b140 <__gethex+0x2c6>
 801b162:	1e67      	subs	r7, r4, #1
 801b164:	f1ba 0f00 	cmp.w	sl, #0
 801b168:	d131      	bne.n	801b1ce <__gethex+0x354>
 801b16a:	b127      	cbz	r7, 801b176 <__gethex+0x2fc>
 801b16c:	4639      	mov	r1, r7
 801b16e:	4628      	mov	r0, r5
 801b170:	f000 fdb0 	bl	801bcd4 <__any_on>
 801b174:	4682      	mov	sl, r0
 801b176:	117a      	asrs	r2, r7, #5
 801b178:	2301      	movs	r3, #1
 801b17a:	f007 071f 	and.w	r7, r7, #31
 801b17e:	fa03 f707 	lsl.w	r7, r3, r7
 801b182:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801b186:	4621      	mov	r1, r4
 801b188:	421f      	tst	r7, r3
 801b18a:	4628      	mov	r0, r5
 801b18c:	bf18      	it	ne
 801b18e:	f04a 0a02 	orrne.w	sl, sl, #2
 801b192:	1b36      	subs	r6, r6, r4
 801b194:	f7ff fe22 	bl	801addc <rshift>
 801b198:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801b19c:	2702      	movs	r7, #2
 801b19e:	f1ba 0f00 	cmp.w	sl, #0
 801b1a2:	d048      	beq.n	801b236 <__gethex+0x3bc>
 801b1a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b1a8:	2b02      	cmp	r3, #2
 801b1aa:	d015      	beq.n	801b1d8 <__gethex+0x35e>
 801b1ac:	2b03      	cmp	r3, #3
 801b1ae:	d017      	beq.n	801b1e0 <__gethex+0x366>
 801b1b0:	2b01      	cmp	r3, #1
 801b1b2:	d109      	bne.n	801b1c8 <__gethex+0x34e>
 801b1b4:	f01a 0f02 	tst.w	sl, #2
 801b1b8:	d006      	beq.n	801b1c8 <__gethex+0x34e>
 801b1ba:	f8d9 3000 	ldr.w	r3, [r9]
 801b1be:	ea4a 0a03 	orr.w	sl, sl, r3
 801b1c2:	f01a 0f01 	tst.w	sl, #1
 801b1c6:	d10e      	bne.n	801b1e6 <__gethex+0x36c>
 801b1c8:	f047 0710 	orr.w	r7, r7, #16
 801b1cc:	e033      	b.n	801b236 <__gethex+0x3bc>
 801b1ce:	f04f 0a01 	mov.w	sl, #1
 801b1d2:	e7d0      	b.n	801b176 <__gethex+0x2fc>
 801b1d4:	2701      	movs	r7, #1
 801b1d6:	e7e2      	b.n	801b19e <__gethex+0x324>
 801b1d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b1da:	f1c3 0301 	rsb	r3, r3, #1
 801b1de:	9315      	str	r3, [sp, #84]	; 0x54
 801b1e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d0f0      	beq.n	801b1c8 <__gethex+0x34e>
 801b1e6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801b1ea:	f105 0314 	add.w	r3, r5, #20
 801b1ee:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801b1f2:	eb03 010a 	add.w	r1, r3, sl
 801b1f6:	f04f 0c00 	mov.w	ip, #0
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	f853 2b04 	ldr.w	r2, [r3], #4
 801b200:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b204:	d01c      	beq.n	801b240 <__gethex+0x3c6>
 801b206:	3201      	adds	r2, #1
 801b208:	6002      	str	r2, [r0, #0]
 801b20a:	2f02      	cmp	r7, #2
 801b20c:	f105 0314 	add.w	r3, r5, #20
 801b210:	d138      	bne.n	801b284 <__gethex+0x40a>
 801b212:	f8d8 2000 	ldr.w	r2, [r8]
 801b216:	3a01      	subs	r2, #1
 801b218:	42b2      	cmp	r2, r6
 801b21a:	d10a      	bne.n	801b232 <__gethex+0x3b8>
 801b21c:	1171      	asrs	r1, r6, #5
 801b21e:	2201      	movs	r2, #1
 801b220:	f006 061f 	and.w	r6, r6, #31
 801b224:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b228:	fa02 f606 	lsl.w	r6, r2, r6
 801b22c:	421e      	tst	r6, r3
 801b22e:	bf18      	it	ne
 801b230:	4617      	movne	r7, r2
 801b232:	f047 0720 	orr.w	r7, r7, #32
 801b236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b238:	601d      	str	r5, [r3, #0]
 801b23a:	9b06      	ldr	r3, [sp, #24]
 801b23c:	601c      	str	r4, [r3, #0]
 801b23e:	e6a4      	b.n	801af8a <__gethex+0x110>
 801b240:	4299      	cmp	r1, r3
 801b242:	f843 cc04 	str.w	ip, [r3, #-4]
 801b246:	d8d8      	bhi.n	801b1fa <__gethex+0x380>
 801b248:	68ab      	ldr	r3, [r5, #8]
 801b24a:	4599      	cmp	r9, r3
 801b24c:	db12      	blt.n	801b274 <__gethex+0x3fa>
 801b24e:	6869      	ldr	r1, [r5, #4]
 801b250:	9802      	ldr	r0, [sp, #8]
 801b252:	3101      	adds	r1, #1
 801b254:	f000 f961 	bl	801b51a <_Balloc>
 801b258:	692a      	ldr	r2, [r5, #16]
 801b25a:	3202      	adds	r2, #2
 801b25c:	f105 010c 	add.w	r1, r5, #12
 801b260:	4683      	mov	fp, r0
 801b262:	0092      	lsls	r2, r2, #2
 801b264:	300c      	adds	r0, #12
 801b266:	f7fc f8ef 	bl	8017448 <memcpy>
 801b26a:	4629      	mov	r1, r5
 801b26c:	9802      	ldr	r0, [sp, #8]
 801b26e:	f000 f988 	bl	801b582 <_Bfree>
 801b272:	465d      	mov	r5, fp
 801b274:	692b      	ldr	r3, [r5, #16]
 801b276:	1c5a      	adds	r2, r3, #1
 801b278:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801b27c:	612a      	str	r2, [r5, #16]
 801b27e:	2201      	movs	r2, #1
 801b280:	615a      	str	r2, [r3, #20]
 801b282:	e7c2      	b.n	801b20a <__gethex+0x390>
 801b284:	692a      	ldr	r2, [r5, #16]
 801b286:	454a      	cmp	r2, r9
 801b288:	dd0b      	ble.n	801b2a2 <__gethex+0x428>
 801b28a:	2101      	movs	r1, #1
 801b28c:	4628      	mov	r0, r5
 801b28e:	f7ff fda5 	bl	801addc <rshift>
 801b292:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b296:	3401      	adds	r4, #1
 801b298:	42a3      	cmp	r3, r4
 801b29a:	f6ff aed9 	blt.w	801b050 <__gethex+0x1d6>
 801b29e:	2701      	movs	r7, #1
 801b2a0:	e7c7      	b.n	801b232 <__gethex+0x3b8>
 801b2a2:	f016 061f 	ands.w	r6, r6, #31
 801b2a6:	d0fa      	beq.n	801b29e <__gethex+0x424>
 801b2a8:	449a      	add	sl, r3
 801b2aa:	f1c6 0620 	rsb	r6, r6, #32
 801b2ae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801b2b2:	f000 f9f6 	bl	801b6a2 <__hi0bits>
 801b2b6:	42b0      	cmp	r0, r6
 801b2b8:	dbe7      	blt.n	801b28a <__gethex+0x410>
 801b2ba:	e7f0      	b.n	801b29e <__gethex+0x424>

0801b2bc <L_shift>:
 801b2bc:	f1c2 0208 	rsb	r2, r2, #8
 801b2c0:	0092      	lsls	r2, r2, #2
 801b2c2:	b570      	push	{r4, r5, r6, lr}
 801b2c4:	f1c2 0620 	rsb	r6, r2, #32
 801b2c8:	6843      	ldr	r3, [r0, #4]
 801b2ca:	6804      	ldr	r4, [r0, #0]
 801b2cc:	fa03 f506 	lsl.w	r5, r3, r6
 801b2d0:	432c      	orrs	r4, r5
 801b2d2:	40d3      	lsrs	r3, r2
 801b2d4:	6004      	str	r4, [r0, #0]
 801b2d6:	f840 3f04 	str.w	r3, [r0, #4]!
 801b2da:	4288      	cmp	r0, r1
 801b2dc:	d3f4      	bcc.n	801b2c8 <L_shift+0xc>
 801b2de:	bd70      	pop	{r4, r5, r6, pc}

0801b2e0 <__match>:
 801b2e0:	b530      	push	{r4, r5, lr}
 801b2e2:	6803      	ldr	r3, [r0, #0]
 801b2e4:	3301      	adds	r3, #1
 801b2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b2ea:	b914      	cbnz	r4, 801b2f2 <__match+0x12>
 801b2ec:	6003      	str	r3, [r0, #0]
 801b2ee:	2001      	movs	r0, #1
 801b2f0:	bd30      	pop	{r4, r5, pc}
 801b2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b2f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801b2fa:	2d19      	cmp	r5, #25
 801b2fc:	bf98      	it	ls
 801b2fe:	3220      	addls	r2, #32
 801b300:	42a2      	cmp	r2, r4
 801b302:	d0f0      	beq.n	801b2e6 <__match+0x6>
 801b304:	2000      	movs	r0, #0
 801b306:	e7f3      	b.n	801b2f0 <__match+0x10>

0801b308 <__hexnan>:
 801b308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b30c:	680b      	ldr	r3, [r1, #0]
 801b30e:	6801      	ldr	r1, [r0, #0]
 801b310:	115f      	asrs	r7, r3, #5
 801b312:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801b316:	f013 031f 	ands.w	r3, r3, #31
 801b31a:	b087      	sub	sp, #28
 801b31c:	bf18      	it	ne
 801b31e:	3704      	addne	r7, #4
 801b320:	2500      	movs	r5, #0
 801b322:	1f3e      	subs	r6, r7, #4
 801b324:	4682      	mov	sl, r0
 801b326:	4690      	mov	r8, r2
 801b328:	9301      	str	r3, [sp, #4]
 801b32a:	f847 5c04 	str.w	r5, [r7, #-4]
 801b32e:	46b1      	mov	r9, r6
 801b330:	4634      	mov	r4, r6
 801b332:	9502      	str	r5, [sp, #8]
 801b334:	46ab      	mov	fp, r5
 801b336:	784a      	ldrb	r2, [r1, #1]
 801b338:	1c4b      	adds	r3, r1, #1
 801b33a:	9303      	str	r3, [sp, #12]
 801b33c:	b342      	cbz	r2, 801b390 <__hexnan+0x88>
 801b33e:	4610      	mov	r0, r2
 801b340:	9105      	str	r1, [sp, #20]
 801b342:	9204      	str	r2, [sp, #16]
 801b344:	f7ff fd84 	bl	801ae50 <__hexdig_fun>
 801b348:	2800      	cmp	r0, #0
 801b34a:	d143      	bne.n	801b3d4 <__hexnan+0xcc>
 801b34c:	9a04      	ldr	r2, [sp, #16]
 801b34e:	9905      	ldr	r1, [sp, #20]
 801b350:	2a20      	cmp	r2, #32
 801b352:	d818      	bhi.n	801b386 <__hexnan+0x7e>
 801b354:	9b02      	ldr	r3, [sp, #8]
 801b356:	459b      	cmp	fp, r3
 801b358:	dd13      	ble.n	801b382 <__hexnan+0x7a>
 801b35a:	454c      	cmp	r4, r9
 801b35c:	d206      	bcs.n	801b36c <__hexnan+0x64>
 801b35e:	2d07      	cmp	r5, #7
 801b360:	dc04      	bgt.n	801b36c <__hexnan+0x64>
 801b362:	462a      	mov	r2, r5
 801b364:	4649      	mov	r1, r9
 801b366:	4620      	mov	r0, r4
 801b368:	f7ff ffa8 	bl	801b2bc <L_shift>
 801b36c:	4544      	cmp	r4, r8
 801b36e:	d944      	bls.n	801b3fa <__hexnan+0xf2>
 801b370:	2300      	movs	r3, #0
 801b372:	f1a4 0904 	sub.w	r9, r4, #4
 801b376:	f844 3c04 	str.w	r3, [r4, #-4]
 801b37a:	f8cd b008 	str.w	fp, [sp, #8]
 801b37e:	464c      	mov	r4, r9
 801b380:	461d      	mov	r5, r3
 801b382:	9903      	ldr	r1, [sp, #12]
 801b384:	e7d7      	b.n	801b336 <__hexnan+0x2e>
 801b386:	2a29      	cmp	r2, #41	; 0x29
 801b388:	d14a      	bne.n	801b420 <__hexnan+0x118>
 801b38a:	3102      	adds	r1, #2
 801b38c:	f8ca 1000 	str.w	r1, [sl]
 801b390:	f1bb 0f00 	cmp.w	fp, #0
 801b394:	d044      	beq.n	801b420 <__hexnan+0x118>
 801b396:	454c      	cmp	r4, r9
 801b398:	d206      	bcs.n	801b3a8 <__hexnan+0xa0>
 801b39a:	2d07      	cmp	r5, #7
 801b39c:	dc04      	bgt.n	801b3a8 <__hexnan+0xa0>
 801b39e:	462a      	mov	r2, r5
 801b3a0:	4649      	mov	r1, r9
 801b3a2:	4620      	mov	r0, r4
 801b3a4:	f7ff ff8a 	bl	801b2bc <L_shift>
 801b3a8:	4544      	cmp	r4, r8
 801b3aa:	d928      	bls.n	801b3fe <__hexnan+0xf6>
 801b3ac:	4643      	mov	r3, r8
 801b3ae:	f854 2b04 	ldr.w	r2, [r4], #4
 801b3b2:	f843 2b04 	str.w	r2, [r3], #4
 801b3b6:	42a6      	cmp	r6, r4
 801b3b8:	d2f9      	bcs.n	801b3ae <__hexnan+0xa6>
 801b3ba:	2200      	movs	r2, #0
 801b3bc:	f843 2b04 	str.w	r2, [r3], #4
 801b3c0:	429e      	cmp	r6, r3
 801b3c2:	d2fb      	bcs.n	801b3bc <__hexnan+0xb4>
 801b3c4:	6833      	ldr	r3, [r6, #0]
 801b3c6:	b91b      	cbnz	r3, 801b3d0 <__hexnan+0xc8>
 801b3c8:	4546      	cmp	r6, r8
 801b3ca:	d127      	bne.n	801b41c <__hexnan+0x114>
 801b3cc:	2301      	movs	r3, #1
 801b3ce:	6033      	str	r3, [r6, #0]
 801b3d0:	2005      	movs	r0, #5
 801b3d2:	e026      	b.n	801b422 <__hexnan+0x11a>
 801b3d4:	3501      	adds	r5, #1
 801b3d6:	2d08      	cmp	r5, #8
 801b3d8:	f10b 0b01 	add.w	fp, fp, #1
 801b3dc:	dd06      	ble.n	801b3ec <__hexnan+0xe4>
 801b3de:	4544      	cmp	r4, r8
 801b3e0:	d9cf      	bls.n	801b382 <__hexnan+0x7a>
 801b3e2:	2300      	movs	r3, #0
 801b3e4:	f844 3c04 	str.w	r3, [r4, #-4]
 801b3e8:	2501      	movs	r5, #1
 801b3ea:	3c04      	subs	r4, #4
 801b3ec:	6822      	ldr	r2, [r4, #0]
 801b3ee:	f000 000f 	and.w	r0, r0, #15
 801b3f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801b3f6:	6020      	str	r0, [r4, #0]
 801b3f8:	e7c3      	b.n	801b382 <__hexnan+0x7a>
 801b3fa:	2508      	movs	r5, #8
 801b3fc:	e7c1      	b.n	801b382 <__hexnan+0x7a>
 801b3fe:	9b01      	ldr	r3, [sp, #4]
 801b400:	2b00      	cmp	r3, #0
 801b402:	d0df      	beq.n	801b3c4 <__hexnan+0xbc>
 801b404:	f04f 32ff 	mov.w	r2, #4294967295
 801b408:	f1c3 0320 	rsb	r3, r3, #32
 801b40c:	fa22 f303 	lsr.w	r3, r2, r3
 801b410:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801b414:	401a      	ands	r2, r3
 801b416:	f847 2c04 	str.w	r2, [r7, #-4]
 801b41a:	e7d3      	b.n	801b3c4 <__hexnan+0xbc>
 801b41c:	3e04      	subs	r6, #4
 801b41e:	e7d1      	b.n	801b3c4 <__hexnan+0xbc>
 801b420:	2004      	movs	r0, #4
 801b422:	b007      	add	sp, #28
 801b424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b428 <_isatty_r>:
 801b428:	b538      	push	{r3, r4, r5, lr}
 801b42a:	4c06      	ldr	r4, [pc, #24]	; (801b444 <_isatty_r+0x1c>)
 801b42c:	2300      	movs	r3, #0
 801b42e:	4605      	mov	r5, r0
 801b430:	4608      	mov	r0, r1
 801b432:	6023      	str	r3, [r4, #0]
 801b434:	f7f5 f9fb 	bl	801082e <_isatty>
 801b438:	1c43      	adds	r3, r0, #1
 801b43a:	d102      	bne.n	801b442 <_isatty_r+0x1a>
 801b43c:	6823      	ldr	r3, [r4, #0]
 801b43e:	b103      	cbz	r3, 801b442 <_isatty_r+0x1a>
 801b440:	602b      	str	r3, [r5, #0]
 801b442:	bd38      	pop	{r3, r4, r5, pc}
 801b444:	20001084 	.word	0x20001084

0801b448 <__locale_ctype_ptr_l>:
 801b448:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801b44c:	4770      	bx	lr
	...

0801b450 <__locale_ctype_ptr>:
 801b450:	4b04      	ldr	r3, [pc, #16]	; (801b464 <__locale_ctype_ptr+0x14>)
 801b452:	4a05      	ldr	r2, [pc, #20]	; (801b468 <__locale_ctype_ptr+0x18>)
 801b454:	681b      	ldr	r3, [r3, #0]
 801b456:	6a1b      	ldr	r3, [r3, #32]
 801b458:	2b00      	cmp	r3, #0
 801b45a:	bf08      	it	eq
 801b45c:	4613      	moveq	r3, r2
 801b45e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801b462:	4770      	bx	lr
 801b464:	2000002c 	.word	0x2000002c
 801b468:	20000090 	.word	0x20000090

0801b46c <__localeconv_l>:
 801b46c:	30f0      	adds	r0, #240	; 0xf0
 801b46e:	4770      	bx	lr

0801b470 <_localeconv_r>:
 801b470:	4b04      	ldr	r3, [pc, #16]	; (801b484 <_localeconv_r+0x14>)
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	6a18      	ldr	r0, [r3, #32]
 801b476:	4b04      	ldr	r3, [pc, #16]	; (801b488 <_localeconv_r+0x18>)
 801b478:	2800      	cmp	r0, #0
 801b47a:	bf08      	it	eq
 801b47c:	4618      	moveq	r0, r3
 801b47e:	30f0      	adds	r0, #240	; 0xf0
 801b480:	4770      	bx	lr
 801b482:	bf00      	nop
 801b484:	2000002c 	.word	0x2000002c
 801b488:	20000090 	.word	0x20000090

0801b48c <_lseek_r>:
 801b48c:	b538      	push	{r3, r4, r5, lr}
 801b48e:	4c07      	ldr	r4, [pc, #28]	; (801b4ac <_lseek_r+0x20>)
 801b490:	4605      	mov	r5, r0
 801b492:	4608      	mov	r0, r1
 801b494:	4611      	mov	r1, r2
 801b496:	2200      	movs	r2, #0
 801b498:	6022      	str	r2, [r4, #0]
 801b49a:	461a      	mov	r2, r3
 801b49c:	f7f5 f9d2 	bl	8010844 <_lseek>
 801b4a0:	1c43      	adds	r3, r0, #1
 801b4a2:	d102      	bne.n	801b4aa <_lseek_r+0x1e>
 801b4a4:	6823      	ldr	r3, [r4, #0]
 801b4a6:	b103      	cbz	r3, 801b4aa <_lseek_r+0x1e>
 801b4a8:	602b      	str	r3, [r5, #0]
 801b4aa:	bd38      	pop	{r3, r4, r5, pc}
 801b4ac:	20001084 	.word	0x20001084

0801b4b0 <malloc>:
 801b4b0:	4b02      	ldr	r3, [pc, #8]	; (801b4bc <malloc+0xc>)
 801b4b2:	4601      	mov	r1, r0
 801b4b4:	6818      	ldr	r0, [r3, #0]
 801b4b6:	f7fc b829 	b.w	801750c <_malloc_r>
 801b4ba:	bf00      	nop
 801b4bc:	2000002c 	.word	0x2000002c

0801b4c0 <__ascii_mbtowc>:
 801b4c0:	b082      	sub	sp, #8
 801b4c2:	b901      	cbnz	r1, 801b4c6 <__ascii_mbtowc+0x6>
 801b4c4:	a901      	add	r1, sp, #4
 801b4c6:	b142      	cbz	r2, 801b4da <__ascii_mbtowc+0x1a>
 801b4c8:	b14b      	cbz	r3, 801b4de <__ascii_mbtowc+0x1e>
 801b4ca:	7813      	ldrb	r3, [r2, #0]
 801b4cc:	600b      	str	r3, [r1, #0]
 801b4ce:	7812      	ldrb	r2, [r2, #0]
 801b4d0:	1c10      	adds	r0, r2, #0
 801b4d2:	bf18      	it	ne
 801b4d4:	2001      	movne	r0, #1
 801b4d6:	b002      	add	sp, #8
 801b4d8:	4770      	bx	lr
 801b4da:	4610      	mov	r0, r2
 801b4dc:	e7fb      	b.n	801b4d6 <__ascii_mbtowc+0x16>
 801b4de:	f06f 0001 	mvn.w	r0, #1
 801b4e2:	e7f8      	b.n	801b4d6 <__ascii_mbtowc+0x16>

0801b4e4 <memmove>:
 801b4e4:	4288      	cmp	r0, r1
 801b4e6:	b510      	push	{r4, lr}
 801b4e8:	eb01 0302 	add.w	r3, r1, r2
 801b4ec:	d807      	bhi.n	801b4fe <memmove+0x1a>
 801b4ee:	1e42      	subs	r2, r0, #1
 801b4f0:	4299      	cmp	r1, r3
 801b4f2:	d00a      	beq.n	801b50a <memmove+0x26>
 801b4f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b4f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 801b4fc:	e7f8      	b.n	801b4f0 <memmove+0xc>
 801b4fe:	4283      	cmp	r3, r0
 801b500:	d9f5      	bls.n	801b4ee <memmove+0xa>
 801b502:	1881      	adds	r1, r0, r2
 801b504:	1ad2      	subs	r2, r2, r3
 801b506:	42d3      	cmn	r3, r2
 801b508:	d100      	bne.n	801b50c <memmove+0x28>
 801b50a:	bd10      	pop	{r4, pc}
 801b50c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b510:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801b514:	e7f7      	b.n	801b506 <memmove+0x22>

0801b516 <__malloc_lock>:
 801b516:	4770      	bx	lr

0801b518 <__malloc_unlock>:
 801b518:	4770      	bx	lr

0801b51a <_Balloc>:
 801b51a:	b570      	push	{r4, r5, r6, lr}
 801b51c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b51e:	4604      	mov	r4, r0
 801b520:	460e      	mov	r6, r1
 801b522:	b93d      	cbnz	r5, 801b534 <_Balloc+0x1a>
 801b524:	2010      	movs	r0, #16
 801b526:	f7ff ffc3 	bl	801b4b0 <malloc>
 801b52a:	6260      	str	r0, [r4, #36]	; 0x24
 801b52c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b530:	6005      	str	r5, [r0, #0]
 801b532:	60c5      	str	r5, [r0, #12]
 801b534:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801b536:	68eb      	ldr	r3, [r5, #12]
 801b538:	b183      	cbz	r3, 801b55c <_Balloc+0x42>
 801b53a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b53c:	68db      	ldr	r3, [r3, #12]
 801b53e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801b542:	b9b8      	cbnz	r0, 801b574 <_Balloc+0x5a>
 801b544:	2101      	movs	r1, #1
 801b546:	fa01 f506 	lsl.w	r5, r1, r6
 801b54a:	1d6a      	adds	r2, r5, #5
 801b54c:	0092      	lsls	r2, r2, #2
 801b54e:	4620      	mov	r0, r4
 801b550:	f000 fbe1 	bl	801bd16 <_calloc_r>
 801b554:	b160      	cbz	r0, 801b570 <_Balloc+0x56>
 801b556:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801b55a:	e00e      	b.n	801b57a <_Balloc+0x60>
 801b55c:	2221      	movs	r2, #33	; 0x21
 801b55e:	2104      	movs	r1, #4
 801b560:	4620      	mov	r0, r4
 801b562:	f000 fbd8 	bl	801bd16 <_calloc_r>
 801b566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b568:	60e8      	str	r0, [r5, #12]
 801b56a:	68db      	ldr	r3, [r3, #12]
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	d1e4      	bne.n	801b53a <_Balloc+0x20>
 801b570:	2000      	movs	r0, #0
 801b572:	bd70      	pop	{r4, r5, r6, pc}
 801b574:	6802      	ldr	r2, [r0, #0]
 801b576:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801b57a:	2300      	movs	r3, #0
 801b57c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b580:	e7f7      	b.n	801b572 <_Balloc+0x58>

0801b582 <_Bfree>:
 801b582:	b570      	push	{r4, r5, r6, lr}
 801b584:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801b586:	4606      	mov	r6, r0
 801b588:	460d      	mov	r5, r1
 801b58a:	b93c      	cbnz	r4, 801b59c <_Bfree+0x1a>
 801b58c:	2010      	movs	r0, #16
 801b58e:	f7ff ff8f 	bl	801b4b0 <malloc>
 801b592:	6270      	str	r0, [r6, #36]	; 0x24
 801b594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b598:	6004      	str	r4, [r0, #0]
 801b59a:	60c4      	str	r4, [r0, #12]
 801b59c:	b13d      	cbz	r5, 801b5ae <_Bfree+0x2c>
 801b59e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801b5a0:	686a      	ldr	r2, [r5, #4]
 801b5a2:	68db      	ldr	r3, [r3, #12]
 801b5a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b5a8:	6029      	str	r1, [r5, #0]
 801b5aa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801b5ae:	bd70      	pop	{r4, r5, r6, pc}

0801b5b0 <__multadd>:
 801b5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5b4:	690d      	ldr	r5, [r1, #16]
 801b5b6:	461f      	mov	r7, r3
 801b5b8:	4606      	mov	r6, r0
 801b5ba:	460c      	mov	r4, r1
 801b5bc:	f101 0c14 	add.w	ip, r1, #20
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	f8dc 0000 	ldr.w	r0, [ip]
 801b5c6:	b281      	uxth	r1, r0
 801b5c8:	fb02 7101 	mla	r1, r2, r1, r7
 801b5cc:	0c0f      	lsrs	r7, r1, #16
 801b5ce:	0c00      	lsrs	r0, r0, #16
 801b5d0:	fb02 7000 	mla	r0, r2, r0, r7
 801b5d4:	b289      	uxth	r1, r1
 801b5d6:	3301      	adds	r3, #1
 801b5d8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801b5dc:	429d      	cmp	r5, r3
 801b5de:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801b5e2:	f84c 1b04 	str.w	r1, [ip], #4
 801b5e6:	dcec      	bgt.n	801b5c2 <__multadd+0x12>
 801b5e8:	b1d7      	cbz	r7, 801b620 <__multadd+0x70>
 801b5ea:	68a3      	ldr	r3, [r4, #8]
 801b5ec:	42ab      	cmp	r3, r5
 801b5ee:	dc12      	bgt.n	801b616 <__multadd+0x66>
 801b5f0:	6861      	ldr	r1, [r4, #4]
 801b5f2:	4630      	mov	r0, r6
 801b5f4:	3101      	adds	r1, #1
 801b5f6:	f7ff ff90 	bl	801b51a <_Balloc>
 801b5fa:	6922      	ldr	r2, [r4, #16]
 801b5fc:	3202      	adds	r2, #2
 801b5fe:	f104 010c 	add.w	r1, r4, #12
 801b602:	4680      	mov	r8, r0
 801b604:	0092      	lsls	r2, r2, #2
 801b606:	300c      	adds	r0, #12
 801b608:	f7fb ff1e 	bl	8017448 <memcpy>
 801b60c:	4621      	mov	r1, r4
 801b60e:	4630      	mov	r0, r6
 801b610:	f7ff ffb7 	bl	801b582 <_Bfree>
 801b614:	4644      	mov	r4, r8
 801b616:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b61a:	3501      	adds	r5, #1
 801b61c:	615f      	str	r7, [r3, #20]
 801b61e:	6125      	str	r5, [r4, #16]
 801b620:	4620      	mov	r0, r4
 801b622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b626 <__s2b>:
 801b626:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b62a:	460c      	mov	r4, r1
 801b62c:	4615      	mov	r5, r2
 801b62e:	461f      	mov	r7, r3
 801b630:	2209      	movs	r2, #9
 801b632:	3308      	adds	r3, #8
 801b634:	4606      	mov	r6, r0
 801b636:	fb93 f3f2 	sdiv	r3, r3, r2
 801b63a:	2100      	movs	r1, #0
 801b63c:	2201      	movs	r2, #1
 801b63e:	429a      	cmp	r2, r3
 801b640:	db20      	blt.n	801b684 <__s2b+0x5e>
 801b642:	4630      	mov	r0, r6
 801b644:	f7ff ff69 	bl	801b51a <_Balloc>
 801b648:	9b08      	ldr	r3, [sp, #32]
 801b64a:	6143      	str	r3, [r0, #20]
 801b64c:	2d09      	cmp	r5, #9
 801b64e:	f04f 0301 	mov.w	r3, #1
 801b652:	6103      	str	r3, [r0, #16]
 801b654:	dd19      	ble.n	801b68a <__s2b+0x64>
 801b656:	f104 0809 	add.w	r8, r4, #9
 801b65a:	46c1      	mov	r9, r8
 801b65c:	442c      	add	r4, r5
 801b65e:	f819 3b01 	ldrb.w	r3, [r9], #1
 801b662:	4601      	mov	r1, r0
 801b664:	3b30      	subs	r3, #48	; 0x30
 801b666:	220a      	movs	r2, #10
 801b668:	4630      	mov	r0, r6
 801b66a:	f7ff ffa1 	bl	801b5b0 <__multadd>
 801b66e:	45a1      	cmp	r9, r4
 801b670:	d1f5      	bne.n	801b65e <__s2b+0x38>
 801b672:	eb08 0405 	add.w	r4, r8, r5
 801b676:	3c08      	subs	r4, #8
 801b678:	1b2d      	subs	r5, r5, r4
 801b67a:	1963      	adds	r3, r4, r5
 801b67c:	42bb      	cmp	r3, r7
 801b67e:	db07      	blt.n	801b690 <__s2b+0x6a>
 801b680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b684:	0052      	lsls	r2, r2, #1
 801b686:	3101      	adds	r1, #1
 801b688:	e7d9      	b.n	801b63e <__s2b+0x18>
 801b68a:	340a      	adds	r4, #10
 801b68c:	2509      	movs	r5, #9
 801b68e:	e7f3      	b.n	801b678 <__s2b+0x52>
 801b690:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b694:	4601      	mov	r1, r0
 801b696:	3b30      	subs	r3, #48	; 0x30
 801b698:	220a      	movs	r2, #10
 801b69a:	4630      	mov	r0, r6
 801b69c:	f7ff ff88 	bl	801b5b0 <__multadd>
 801b6a0:	e7eb      	b.n	801b67a <__s2b+0x54>

0801b6a2 <__hi0bits>:
 801b6a2:	0c02      	lsrs	r2, r0, #16
 801b6a4:	0412      	lsls	r2, r2, #16
 801b6a6:	4603      	mov	r3, r0
 801b6a8:	b9b2      	cbnz	r2, 801b6d8 <__hi0bits+0x36>
 801b6aa:	0403      	lsls	r3, r0, #16
 801b6ac:	2010      	movs	r0, #16
 801b6ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b6b2:	bf04      	itt	eq
 801b6b4:	021b      	lsleq	r3, r3, #8
 801b6b6:	3008      	addeq	r0, #8
 801b6b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b6bc:	bf04      	itt	eq
 801b6be:	011b      	lsleq	r3, r3, #4
 801b6c0:	3004      	addeq	r0, #4
 801b6c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b6c6:	bf04      	itt	eq
 801b6c8:	009b      	lsleq	r3, r3, #2
 801b6ca:	3002      	addeq	r0, #2
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	db06      	blt.n	801b6de <__hi0bits+0x3c>
 801b6d0:	005b      	lsls	r3, r3, #1
 801b6d2:	d503      	bpl.n	801b6dc <__hi0bits+0x3a>
 801b6d4:	3001      	adds	r0, #1
 801b6d6:	4770      	bx	lr
 801b6d8:	2000      	movs	r0, #0
 801b6da:	e7e8      	b.n	801b6ae <__hi0bits+0xc>
 801b6dc:	2020      	movs	r0, #32
 801b6de:	4770      	bx	lr

0801b6e0 <__lo0bits>:
 801b6e0:	6803      	ldr	r3, [r0, #0]
 801b6e2:	f013 0207 	ands.w	r2, r3, #7
 801b6e6:	4601      	mov	r1, r0
 801b6e8:	d00b      	beq.n	801b702 <__lo0bits+0x22>
 801b6ea:	07da      	lsls	r2, r3, #31
 801b6ec:	d423      	bmi.n	801b736 <__lo0bits+0x56>
 801b6ee:	0798      	lsls	r0, r3, #30
 801b6f0:	bf49      	itett	mi
 801b6f2:	085b      	lsrmi	r3, r3, #1
 801b6f4:	089b      	lsrpl	r3, r3, #2
 801b6f6:	2001      	movmi	r0, #1
 801b6f8:	600b      	strmi	r3, [r1, #0]
 801b6fa:	bf5c      	itt	pl
 801b6fc:	600b      	strpl	r3, [r1, #0]
 801b6fe:	2002      	movpl	r0, #2
 801b700:	4770      	bx	lr
 801b702:	b298      	uxth	r0, r3
 801b704:	b9a8      	cbnz	r0, 801b732 <__lo0bits+0x52>
 801b706:	0c1b      	lsrs	r3, r3, #16
 801b708:	2010      	movs	r0, #16
 801b70a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801b70e:	bf04      	itt	eq
 801b710:	0a1b      	lsreq	r3, r3, #8
 801b712:	3008      	addeq	r0, #8
 801b714:	071a      	lsls	r2, r3, #28
 801b716:	bf04      	itt	eq
 801b718:	091b      	lsreq	r3, r3, #4
 801b71a:	3004      	addeq	r0, #4
 801b71c:	079a      	lsls	r2, r3, #30
 801b71e:	bf04      	itt	eq
 801b720:	089b      	lsreq	r3, r3, #2
 801b722:	3002      	addeq	r0, #2
 801b724:	07da      	lsls	r2, r3, #31
 801b726:	d402      	bmi.n	801b72e <__lo0bits+0x4e>
 801b728:	085b      	lsrs	r3, r3, #1
 801b72a:	d006      	beq.n	801b73a <__lo0bits+0x5a>
 801b72c:	3001      	adds	r0, #1
 801b72e:	600b      	str	r3, [r1, #0]
 801b730:	4770      	bx	lr
 801b732:	4610      	mov	r0, r2
 801b734:	e7e9      	b.n	801b70a <__lo0bits+0x2a>
 801b736:	2000      	movs	r0, #0
 801b738:	4770      	bx	lr
 801b73a:	2020      	movs	r0, #32
 801b73c:	4770      	bx	lr

0801b73e <__i2b>:
 801b73e:	b510      	push	{r4, lr}
 801b740:	460c      	mov	r4, r1
 801b742:	2101      	movs	r1, #1
 801b744:	f7ff fee9 	bl	801b51a <_Balloc>
 801b748:	2201      	movs	r2, #1
 801b74a:	6144      	str	r4, [r0, #20]
 801b74c:	6102      	str	r2, [r0, #16]
 801b74e:	bd10      	pop	{r4, pc}

0801b750 <__multiply>:
 801b750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b754:	4614      	mov	r4, r2
 801b756:	690a      	ldr	r2, [r1, #16]
 801b758:	6923      	ldr	r3, [r4, #16]
 801b75a:	429a      	cmp	r2, r3
 801b75c:	bfb8      	it	lt
 801b75e:	460b      	movlt	r3, r1
 801b760:	4688      	mov	r8, r1
 801b762:	bfbc      	itt	lt
 801b764:	46a0      	movlt	r8, r4
 801b766:	461c      	movlt	r4, r3
 801b768:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b76c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801b770:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b774:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b778:	eb07 0609 	add.w	r6, r7, r9
 801b77c:	42b3      	cmp	r3, r6
 801b77e:	bfb8      	it	lt
 801b780:	3101      	addlt	r1, #1
 801b782:	f7ff feca 	bl	801b51a <_Balloc>
 801b786:	f100 0514 	add.w	r5, r0, #20
 801b78a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801b78e:	462b      	mov	r3, r5
 801b790:	2200      	movs	r2, #0
 801b792:	4573      	cmp	r3, lr
 801b794:	d316      	bcc.n	801b7c4 <__multiply+0x74>
 801b796:	f104 0214 	add.w	r2, r4, #20
 801b79a:	f108 0114 	add.w	r1, r8, #20
 801b79e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801b7a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801b7a6:	9300      	str	r3, [sp, #0]
 801b7a8:	9b00      	ldr	r3, [sp, #0]
 801b7aa:	9201      	str	r2, [sp, #4]
 801b7ac:	4293      	cmp	r3, r2
 801b7ae:	d80c      	bhi.n	801b7ca <__multiply+0x7a>
 801b7b0:	2e00      	cmp	r6, #0
 801b7b2:	dd03      	ble.n	801b7bc <__multiply+0x6c>
 801b7b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d05d      	beq.n	801b878 <__multiply+0x128>
 801b7bc:	6106      	str	r6, [r0, #16]
 801b7be:	b003      	add	sp, #12
 801b7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7c4:	f843 2b04 	str.w	r2, [r3], #4
 801b7c8:	e7e3      	b.n	801b792 <__multiply+0x42>
 801b7ca:	f8b2 b000 	ldrh.w	fp, [r2]
 801b7ce:	f1bb 0f00 	cmp.w	fp, #0
 801b7d2:	d023      	beq.n	801b81c <__multiply+0xcc>
 801b7d4:	4689      	mov	r9, r1
 801b7d6:	46ac      	mov	ip, r5
 801b7d8:	f04f 0800 	mov.w	r8, #0
 801b7dc:	f859 4b04 	ldr.w	r4, [r9], #4
 801b7e0:	f8dc a000 	ldr.w	sl, [ip]
 801b7e4:	b2a3      	uxth	r3, r4
 801b7e6:	fa1f fa8a 	uxth.w	sl, sl
 801b7ea:	fb0b a303 	mla	r3, fp, r3, sl
 801b7ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801b7f2:	f8dc 4000 	ldr.w	r4, [ip]
 801b7f6:	4443      	add	r3, r8
 801b7f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801b7fc:	fb0b 840a 	mla	r4, fp, sl, r8
 801b800:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801b804:	46e2      	mov	sl, ip
 801b806:	b29b      	uxth	r3, r3
 801b808:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801b80c:	454f      	cmp	r7, r9
 801b80e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801b812:	f84a 3b04 	str.w	r3, [sl], #4
 801b816:	d82b      	bhi.n	801b870 <__multiply+0x120>
 801b818:	f8cc 8004 	str.w	r8, [ip, #4]
 801b81c:	9b01      	ldr	r3, [sp, #4]
 801b81e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801b822:	3204      	adds	r2, #4
 801b824:	f1ba 0f00 	cmp.w	sl, #0
 801b828:	d020      	beq.n	801b86c <__multiply+0x11c>
 801b82a:	682b      	ldr	r3, [r5, #0]
 801b82c:	4689      	mov	r9, r1
 801b82e:	46a8      	mov	r8, r5
 801b830:	f04f 0b00 	mov.w	fp, #0
 801b834:	f8b9 c000 	ldrh.w	ip, [r9]
 801b838:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801b83c:	fb0a 440c 	mla	r4, sl, ip, r4
 801b840:	445c      	add	r4, fp
 801b842:	46c4      	mov	ip, r8
 801b844:	b29b      	uxth	r3, r3
 801b846:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801b84a:	f84c 3b04 	str.w	r3, [ip], #4
 801b84e:	f859 3b04 	ldr.w	r3, [r9], #4
 801b852:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801b856:	0c1b      	lsrs	r3, r3, #16
 801b858:	fb0a b303 	mla	r3, sl, r3, fp
 801b85c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801b860:	454f      	cmp	r7, r9
 801b862:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801b866:	d805      	bhi.n	801b874 <__multiply+0x124>
 801b868:	f8c8 3004 	str.w	r3, [r8, #4]
 801b86c:	3504      	adds	r5, #4
 801b86e:	e79b      	b.n	801b7a8 <__multiply+0x58>
 801b870:	46d4      	mov	ip, sl
 801b872:	e7b3      	b.n	801b7dc <__multiply+0x8c>
 801b874:	46e0      	mov	r8, ip
 801b876:	e7dd      	b.n	801b834 <__multiply+0xe4>
 801b878:	3e01      	subs	r6, #1
 801b87a:	e799      	b.n	801b7b0 <__multiply+0x60>

0801b87c <__pow5mult>:
 801b87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b880:	4615      	mov	r5, r2
 801b882:	f012 0203 	ands.w	r2, r2, #3
 801b886:	4606      	mov	r6, r0
 801b888:	460f      	mov	r7, r1
 801b88a:	d007      	beq.n	801b89c <__pow5mult+0x20>
 801b88c:	3a01      	subs	r2, #1
 801b88e:	4c21      	ldr	r4, [pc, #132]	; (801b914 <__pow5mult+0x98>)
 801b890:	2300      	movs	r3, #0
 801b892:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b896:	f7ff fe8b 	bl	801b5b0 <__multadd>
 801b89a:	4607      	mov	r7, r0
 801b89c:	10ad      	asrs	r5, r5, #2
 801b89e:	d035      	beq.n	801b90c <__pow5mult+0x90>
 801b8a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b8a2:	b93c      	cbnz	r4, 801b8b4 <__pow5mult+0x38>
 801b8a4:	2010      	movs	r0, #16
 801b8a6:	f7ff fe03 	bl	801b4b0 <malloc>
 801b8aa:	6270      	str	r0, [r6, #36]	; 0x24
 801b8ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b8b0:	6004      	str	r4, [r0, #0]
 801b8b2:	60c4      	str	r4, [r0, #12]
 801b8b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b8b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b8bc:	b94c      	cbnz	r4, 801b8d2 <__pow5mult+0x56>
 801b8be:	f240 2171 	movw	r1, #625	; 0x271
 801b8c2:	4630      	mov	r0, r6
 801b8c4:	f7ff ff3b 	bl	801b73e <__i2b>
 801b8c8:	2300      	movs	r3, #0
 801b8ca:	f8c8 0008 	str.w	r0, [r8, #8]
 801b8ce:	4604      	mov	r4, r0
 801b8d0:	6003      	str	r3, [r0, #0]
 801b8d2:	f04f 0800 	mov.w	r8, #0
 801b8d6:	07eb      	lsls	r3, r5, #31
 801b8d8:	d50a      	bpl.n	801b8f0 <__pow5mult+0x74>
 801b8da:	4639      	mov	r1, r7
 801b8dc:	4622      	mov	r2, r4
 801b8de:	4630      	mov	r0, r6
 801b8e0:	f7ff ff36 	bl	801b750 <__multiply>
 801b8e4:	4639      	mov	r1, r7
 801b8e6:	4681      	mov	r9, r0
 801b8e8:	4630      	mov	r0, r6
 801b8ea:	f7ff fe4a 	bl	801b582 <_Bfree>
 801b8ee:	464f      	mov	r7, r9
 801b8f0:	106d      	asrs	r5, r5, #1
 801b8f2:	d00b      	beq.n	801b90c <__pow5mult+0x90>
 801b8f4:	6820      	ldr	r0, [r4, #0]
 801b8f6:	b938      	cbnz	r0, 801b908 <__pow5mult+0x8c>
 801b8f8:	4622      	mov	r2, r4
 801b8fa:	4621      	mov	r1, r4
 801b8fc:	4630      	mov	r0, r6
 801b8fe:	f7ff ff27 	bl	801b750 <__multiply>
 801b902:	6020      	str	r0, [r4, #0]
 801b904:	f8c0 8000 	str.w	r8, [r0]
 801b908:	4604      	mov	r4, r0
 801b90a:	e7e4      	b.n	801b8d6 <__pow5mult+0x5a>
 801b90c:	4638      	mov	r0, r7
 801b90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b912:	bf00      	nop
 801b914:	0801c900 	.word	0x0801c900

0801b918 <__lshift>:
 801b918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b91c:	460c      	mov	r4, r1
 801b91e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b922:	6923      	ldr	r3, [r4, #16]
 801b924:	6849      	ldr	r1, [r1, #4]
 801b926:	eb0a 0903 	add.w	r9, sl, r3
 801b92a:	68a3      	ldr	r3, [r4, #8]
 801b92c:	4607      	mov	r7, r0
 801b92e:	4616      	mov	r6, r2
 801b930:	f109 0501 	add.w	r5, r9, #1
 801b934:	42ab      	cmp	r3, r5
 801b936:	db32      	blt.n	801b99e <__lshift+0x86>
 801b938:	4638      	mov	r0, r7
 801b93a:	f7ff fdee 	bl	801b51a <_Balloc>
 801b93e:	2300      	movs	r3, #0
 801b940:	4680      	mov	r8, r0
 801b942:	f100 0114 	add.w	r1, r0, #20
 801b946:	461a      	mov	r2, r3
 801b948:	4553      	cmp	r3, sl
 801b94a:	db2b      	blt.n	801b9a4 <__lshift+0x8c>
 801b94c:	6920      	ldr	r0, [r4, #16]
 801b94e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b952:	f104 0314 	add.w	r3, r4, #20
 801b956:	f016 021f 	ands.w	r2, r6, #31
 801b95a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b95e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b962:	d025      	beq.n	801b9b0 <__lshift+0x98>
 801b964:	f1c2 0e20 	rsb	lr, r2, #32
 801b968:	2000      	movs	r0, #0
 801b96a:	681e      	ldr	r6, [r3, #0]
 801b96c:	468a      	mov	sl, r1
 801b96e:	4096      	lsls	r6, r2
 801b970:	4330      	orrs	r0, r6
 801b972:	f84a 0b04 	str.w	r0, [sl], #4
 801b976:	f853 0b04 	ldr.w	r0, [r3], #4
 801b97a:	459c      	cmp	ip, r3
 801b97c:	fa20 f00e 	lsr.w	r0, r0, lr
 801b980:	d814      	bhi.n	801b9ac <__lshift+0x94>
 801b982:	6048      	str	r0, [r1, #4]
 801b984:	b108      	cbz	r0, 801b98a <__lshift+0x72>
 801b986:	f109 0502 	add.w	r5, r9, #2
 801b98a:	3d01      	subs	r5, #1
 801b98c:	4638      	mov	r0, r7
 801b98e:	f8c8 5010 	str.w	r5, [r8, #16]
 801b992:	4621      	mov	r1, r4
 801b994:	f7ff fdf5 	bl	801b582 <_Bfree>
 801b998:	4640      	mov	r0, r8
 801b99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b99e:	3101      	adds	r1, #1
 801b9a0:	005b      	lsls	r3, r3, #1
 801b9a2:	e7c7      	b.n	801b934 <__lshift+0x1c>
 801b9a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801b9a8:	3301      	adds	r3, #1
 801b9aa:	e7cd      	b.n	801b948 <__lshift+0x30>
 801b9ac:	4651      	mov	r1, sl
 801b9ae:	e7dc      	b.n	801b96a <__lshift+0x52>
 801b9b0:	3904      	subs	r1, #4
 801b9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b9b6:	f841 2f04 	str.w	r2, [r1, #4]!
 801b9ba:	459c      	cmp	ip, r3
 801b9bc:	d8f9      	bhi.n	801b9b2 <__lshift+0x9a>
 801b9be:	e7e4      	b.n	801b98a <__lshift+0x72>

0801b9c0 <__mcmp>:
 801b9c0:	6903      	ldr	r3, [r0, #16]
 801b9c2:	690a      	ldr	r2, [r1, #16]
 801b9c4:	1a9b      	subs	r3, r3, r2
 801b9c6:	b530      	push	{r4, r5, lr}
 801b9c8:	d10c      	bne.n	801b9e4 <__mcmp+0x24>
 801b9ca:	0092      	lsls	r2, r2, #2
 801b9cc:	3014      	adds	r0, #20
 801b9ce:	3114      	adds	r1, #20
 801b9d0:	1884      	adds	r4, r0, r2
 801b9d2:	4411      	add	r1, r2
 801b9d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b9d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b9dc:	4295      	cmp	r5, r2
 801b9de:	d003      	beq.n	801b9e8 <__mcmp+0x28>
 801b9e0:	d305      	bcc.n	801b9ee <__mcmp+0x2e>
 801b9e2:	2301      	movs	r3, #1
 801b9e4:	4618      	mov	r0, r3
 801b9e6:	bd30      	pop	{r4, r5, pc}
 801b9e8:	42a0      	cmp	r0, r4
 801b9ea:	d3f3      	bcc.n	801b9d4 <__mcmp+0x14>
 801b9ec:	e7fa      	b.n	801b9e4 <__mcmp+0x24>
 801b9ee:	f04f 33ff 	mov.w	r3, #4294967295
 801b9f2:	e7f7      	b.n	801b9e4 <__mcmp+0x24>

0801b9f4 <__mdiff>:
 801b9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9f8:	460d      	mov	r5, r1
 801b9fa:	4607      	mov	r7, r0
 801b9fc:	4611      	mov	r1, r2
 801b9fe:	4628      	mov	r0, r5
 801ba00:	4614      	mov	r4, r2
 801ba02:	f7ff ffdd 	bl	801b9c0 <__mcmp>
 801ba06:	1e06      	subs	r6, r0, #0
 801ba08:	d108      	bne.n	801ba1c <__mdiff+0x28>
 801ba0a:	4631      	mov	r1, r6
 801ba0c:	4638      	mov	r0, r7
 801ba0e:	f7ff fd84 	bl	801b51a <_Balloc>
 801ba12:	2301      	movs	r3, #1
 801ba14:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801ba18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba1c:	bfa4      	itt	ge
 801ba1e:	4623      	movge	r3, r4
 801ba20:	462c      	movge	r4, r5
 801ba22:	4638      	mov	r0, r7
 801ba24:	6861      	ldr	r1, [r4, #4]
 801ba26:	bfa6      	itte	ge
 801ba28:	461d      	movge	r5, r3
 801ba2a:	2600      	movge	r6, #0
 801ba2c:	2601      	movlt	r6, #1
 801ba2e:	f7ff fd74 	bl	801b51a <_Balloc>
 801ba32:	692b      	ldr	r3, [r5, #16]
 801ba34:	60c6      	str	r6, [r0, #12]
 801ba36:	6926      	ldr	r6, [r4, #16]
 801ba38:	f105 0914 	add.w	r9, r5, #20
 801ba3c:	f104 0214 	add.w	r2, r4, #20
 801ba40:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801ba44:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801ba48:	f100 0514 	add.w	r5, r0, #20
 801ba4c:	f04f 0e00 	mov.w	lr, #0
 801ba50:	f852 ab04 	ldr.w	sl, [r2], #4
 801ba54:	f859 4b04 	ldr.w	r4, [r9], #4
 801ba58:	fa1e f18a 	uxtah	r1, lr, sl
 801ba5c:	b2a3      	uxth	r3, r4
 801ba5e:	1ac9      	subs	r1, r1, r3
 801ba60:	0c23      	lsrs	r3, r4, #16
 801ba62:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801ba66:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801ba6a:	b289      	uxth	r1, r1
 801ba6c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801ba70:	45c8      	cmp	r8, r9
 801ba72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801ba76:	4694      	mov	ip, r2
 801ba78:	f845 3b04 	str.w	r3, [r5], #4
 801ba7c:	d8e8      	bhi.n	801ba50 <__mdiff+0x5c>
 801ba7e:	45bc      	cmp	ip, r7
 801ba80:	d304      	bcc.n	801ba8c <__mdiff+0x98>
 801ba82:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801ba86:	b183      	cbz	r3, 801baaa <__mdiff+0xb6>
 801ba88:	6106      	str	r6, [r0, #16]
 801ba8a:	e7c5      	b.n	801ba18 <__mdiff+0x24>
 801ba8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801ba90:	fa1e f381 	uxtah	r3, lr, r1
 801ba94:	141a      	asrs	r2, r3, #16
 801ba96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ba9a:	b29b      	uxth	r3, r3
 801ba9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801baa0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801baa4:	f845 3b04 	str.w	r3, [r5], #4
 801baa8:	e7e9      	b.n	801ba7e <__mdiff+0x8a>
 801baaa:	3e01      	subs	r6, #1
 801baac:	e7e9      	b.n	801ba82 <__mdiff+0x8e>
	...

0801bab0 <__ulp>:
 801bab0:	4b12      	ldr	r3, [pc, #72]	; (801bafc <__ulp+0x4c>)
 801bab2:	ee10 2a90 	vmov	r2, s1
 801bab6:	401a      	ands	r2, r3
 801bab8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801babc:	2b00      	cmp	r3, #0
 801babe:	dd04      	ble.n	801baca <__ulp+0x1a>
 801bac0:	2000      	movs	r0, #0
 801bac2:	4619      	mov	r1, r3
 801bac4:	ec41 0b10 	vmov	d0, r0, r1
 801bac8:	4770      	bx	lr
 801baca:	425b      	negs	r3, r3
 801bacc:	151b      	asrs	r3, r3, #20
 801bace:	2b13      	cmp	r3, #19
 801bad0:	f04f 0000 	mov.w	r0, #0
 801bad4:	f04f 0100 	mov.w	r1, #0
 801bad8:	dc04      	bgt.n	801bae4 <__ulp+0x34>
 801bada:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801bade:	fa42 f103 	asr.w	r1, r2, r3
 801bae2:	e7ef      	b.n	801bac4 <__ulp+0x14>
 801bae4:	3b14      	subs	r3, #20
 801bae6:	2b1e      	cmp	r3, #30
 801bae8:	f04f 0201 	mov.w	r2, #1
 801baec:	bfda      	itte	le
 801baee:	f1c3 031f 	rsble	r3, r3, #31
 801baf2:	fa02 f303 	lslle.w	r3, r2, r3
 801baf6:	4613      	movgt	r3, r2
 801baf8:	4618      	mov	r0, r3
 801bafa:	e7e3      	b.n	801bac4 <__ulp+0x14>
 801bafc:	7ff00000 	.word	0x7ff00000

0801bb00 <__b2d>:
 801bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb02:	6905      	ldr	r5, [r0, #16]
 801bb04:	f100 0714 	add.w	r7, r0, #20
 801bb08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801bb0c:	1f2e      	subs	r6, r5, #4
 801bb0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801bb12:	4620      	mov	r0, r4
 801bb14:	f7ff fdc5 	bl	801b6a2 <__hi0bits>
 801bb18:	f1c0 0320 	rsb	r3, r0, #32
 801bb1c:	280a      	cmp	r0, #10
 801bb1e:	600b      	str	r3, [r1, #0]
 801bb20:	f8df c074 	ldr.w	ip, [pc, #116]	; 801bb98 <__b2d+0x98>
 801bb24:	dc14      	bgt.n	801bb50 <__b2d+0x50>
 801bb26:	f1c0 0e0b 	rsb	lr, r0, #11
 801bb2a:	fa24 f10e 	lsr.w	r1, r4, lr
 801bb2e:	42b7      	cmp	r7, r6
 801bb30:	ea41 030c 	orr.w	r3, r1, ip
 801bb34:	bf34      	ite	cc
 801bb36:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801bb3a:	2100      	movcs	r1, #0
 801bb3c:	3015      	adds	r0, #21
 801bb3e:	fa04 f000 	lsl.w	r0, r4, r0
 801bb42:	fa21 f10e 	lsr.w	r1, r1, lr
 801bb46:	ea40 0201 	orr.w	r2, r0, r1
 801bb4a:	ec43 2b10 	vmov	d0, r2, r3
 801bb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb50:	42b7      	cmp	r7, r6
 801bb52:	bf3a      	itte	cc
 801bb54:	f1a5 0608 	subcc.w	r6, r5, #8
 801bb58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801bb5c:	2100      	movcs	r1, #0
 801bb5e:	380b      	subs	r0, #11
 801bb60:	d015      	beq.n	801bb8e <__b2d+0x8e>
 801bb62:	4084      	lsls	r4, r0
 801bb64:	f1c0 0520 	rsb	r5, r0, #32
 801bb68:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801bb6c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801bb70:	42be      	cmp	r6, r7
 801bb72:	fa21 fc05 	lsr.w	ip, r1, r5
 801bb76:	ea44 030c 	orr.w	r3, r4, ip
 801bb7a:	bf8c      	ite	hi
 801bb7c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801bb80:	2400      	movls	r4, #0
 801bb82:	fa01 f000 	lsl.w	r0, r1, r0
 801bb86:	40ec      	lsrs	r4, r5
 801bb88:	ea40 0204 	orr.w	r2, r0, r4
 801bb8c:	e7dd      	b.n	801bb4a <__b2d+0x4a>
 801bb8e:	ea44 030c 	orr.w	r3, r4, ip
 801bb92:	460a      	mov	r2, r1
 801bb94:	e7d9      	b.n	801bb4a <__b2d+0x4a>
 801bb96:	bf00      	nop
 801bb98:	3ff00000 	.word	0x3ff00000

0801bb9c <__d2b>:
 801bb9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bba0:	460e      	mov	r6, r1
 801bba2:	2101      	movs	r1, #1
 801bba4:	ec59 8b10 	vmov	r8, r9, d0
 801bba8:	4615      	mov	r5, r2
 801bbaa:	f7ff fcb6 	bl	801b51a <_Balloc>
 801bbae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801bbb2:	4607      	mov	r7, r0
 801bbb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bbb8:	bb34      	cbnz	r4, 801bc08 <__d2b+0x6c>
 801bbba:	9301      	str	r3, [sp, #4]
 801bbbc:	f1b8 0300 	subs.w	r3, r8, #0
 801bbc0:	d027      	beq.n	801bc12 <__d2b+0x76>
 801bbc2:	a802      	add	r0, sp, #8
 801bbc4:	f840 3d08 	str.w	r3, [r0, #-8]!
 801bbc8:	f7ff fd8a 	bl	801b6e0 <__lo0bits>
 801bbcc:	9900      	ldr	r1, [sp, #0]
 801bbce:	b1f0      	cbz	r0, 801bc0e <__d2b+0x72>
 801bbd0:	9a01      	ldr	r2, [sp, #4]
 801bbd2:	f1c0 0320 	rsb	r3, r0, #32
 801bbd6:	fa02 f303 	lsl.w	r3, r2, r3
 801bbda:	430b      	orrs	r3, r1
 801bbdc:	40c2      	lsrs	r2, r0
 801bbde:	617b      	str	r3, [r7, #20]
 801bbe0:	9201      	str	r2, [sp, #4]
 801bbe2:	9b01      	ldr	r3, [sp, #4]
 801bbe4:	61bb      	str	r3, [r7, #24]
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	bf14      	ite	ne
 801bbea:	2102      	movne	r1, #2
 801bbec:	2101      	moveq	r1, #1
 801bbee:	6139      	str	r1, [r7, #16]
 801bbf0:	b1c4      	cbz	r4, 801bc24 <__d2b+0x88>
 801bbf2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801bbf6:	4404      	add	r4, r0
 801bbf8:	6034      	str	r4, [r6, #0]
 801bbfa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801bbfe:	6028      	str	r0, [r5, #0]
 801bc00:	4638      	mov	r0, r7
 801bc02:	b003      	add	sp, #12
 801bc04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bc0c:	e7d5      	b.n	801bbba <__d2b+0x1e>
 801bc0e:	6179      	str	r1, [r7, #20]
 801bc10:	e7e7      	b.n	801bbe2 <__d2b+0x46>
 801bc12:	a801      	add	r0, sp, #4
 801bc14:	f7ff fd64 	bl	801b6e0 <__lo0bits>
 801bc18:	9b01      	ldr	r3, [sp, #4]
 801bc1a:	617b      	str	r3, [r7, #20]
 801bc1c:	2101      	movs	r1, #1
 801bc1e:	6139      	str	r1, [r7, #16]
 801bc20:	3020      	adds	r0, #32
 801bc22:	e7e5      	b.n	801bbf0 <__d2b+0x54>
 801bc24:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801bc28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801bc2c:	6030      	str	r0, [r6, #0]
 801bc2e:	6918      	ldr	r0, [r3, #16]
 801bc30:	f7ff fd37 	bl	801b6a2 <__hi0bits>
 801bc34:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801bc38:	e7e1      	b.n	801bbfe <__d2b+0x62>

0801bc3a <__ratio>:
 801bc3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc3e:	4688      	mov	r8, r1
 801bc40:	4669      	mov	r1, sp
 801bc42:	4681      	mov	r9, r0
 801bc44:	f7ff ff5c 	bl	801bb00 <__b2d>
 801bc48:	a901      	add	r1, sp, #4
 801bc4a:	4640      	mov	r0, r8
 801bc4c:	ec57 6b10 	vmov	r6, r7, d0
 801bc50:	f7ff ff56 	bl	801bb00 <__b2d>
 801bc54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bc58:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801bc5c:	eba3 0c02 	sub.w	ip, r3, r2
 801bc60:	e9dd 3200 	ldrd	r3, r2, [sp]
 801bc64:	1a9b      	subs	r3, r3, r2
 801bc66:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801bc6a:	ec5b ab10 	vmov	sl, fp, d0
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	bfce      	itee	gt
 801bc72:	463a      	movgt	r2, r7
 801bc74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801bc78:	465a      	movle	r2, fp
 801bc7a:	4659      	mov	r1, fp
 801bc7c:	463d      	mov	r5, r7
 801bc7e:	bfd4      	ite	le
 801bc80:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801bc84:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801bc88:	4630      	mov	r0, r6
 801bc8a:	ee10 2a10 	vmov	r2, s0
 801bc8e:	460b      	mov	r3, r1
 801bc90:	4629      	mov	r1, r5
 801bc92:	f7ec fd13 	bl	80086bc <__aeabi_ddiv>
 801bc96:	ec41 0b10 	vmov	d0, r0, r1
 801bc9a:	b003      	add	sp, #12
 801bc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bca0 <__copybits>:
 801bca0:	3901      	subs	r1, #1
 801bca2:	b510      	push	{r4, lr}
 801bca4:	1149      	asrs	r1, r1, #5
 801bca6:	6914      	ldr	r4, [r2, #16]
 801bca8:	3101      	adds	r1, #1
 801bcaa:	f102 0314 	add.w	r3, r2, #20
 801bcae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bcb2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801bcb6:	42a3      	cmp	r3, r4
 801bcb8:	4602      	mov	r2, r0
 801bcba:	d303      	bcc.n	801bcc4 <__copybits+0x24>
 801bcbc:	2300      	movs	r3, #0
 801bcbe:	428a      	cmp	r2, r1
 801bcc0:	d305      	bcc.n	801bcce <__copybits+0x2e>
 801bcc2:	bd10      	pop	{r4, pc}
 801bcc4:	f853 2b04 	ldr.w	r2, [r3], #4
 801bcc8:	f840 2b04 	str.w	r2, [r0], #4
 801bccc:	e7f3      	b.n	801bcb6 <__copybits+0x16>
 801bcce:	f842 3b04 	str.w	r3, [r2], #4
 801bcd2:	e7f4      	b.n	801bcbe <__copybits+0x1e>

0801bcd4 <__any_on>:
 801bcd4:	f100 0214 	add.w	r2, r0, #20
 801bcd8:	6900      	ldr	r0, [r0, #16]
 801bcda:	114b      	asrs	r3, r1, #5
 801bcdc:	4298      	cmp	r0, r3
 801bcde:	b510      	push	{r4, lr}
 801bce0:	db11      	blt.n	801bd06 <__any_on+0x32>
 801bce2:	dd0a      	ble.n	801bcfa <__any_on+0x26>
 801bce4:	f011 011f 	ands.w	r1, r1, #31
 801bce8:	d007      	beq.n	801bcfa <__any_on+0x26>
 801bcea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bcee:	fa24 f001 	lsr.w	r0, r4, r1
 801bcf2:	fa00 f101 	lsl.w	r1, r0, r1
 801bcf6:	428c      	cmp	r4, r1
 801bcf8:	d10b      	bne.n	801bd12 <__any_on+0x3e>
 801bcfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bcfe:	4293      	cmp	r3, r2
 801bd00:	d803      	bhi.n	801bd0a <__any_on+0x36>
 801bd02:	2000      	movs	r0, #0
 801bd04:	bd10      	pop	{r4, pc}
 801bd06:	4603      	mov	r3, r0
 801bd08:	e7f7      	b.n	801bcfa <__any_on+0x26>
 801bd0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bd0e:	2900      	cmp	r1, #0
 801bd10:	d0f5      	beq.n	801bcfe <__any_on+0x2a>
 801bd12:	2001      	movs	r0, #1
 801bd14:	e7f6      	b.n	801bd04 <__any_on+0x30>

0801bd16 <_calloc_r>:
 801bd16:	b538      	push	{r3, r4, r5, lr}
 801bd18:	fb02 f401 	mul.w	r4, r2, r1
 801bd1c:	4621      	mov	r1, r4
 801bd1e:	f7fb fbf5 	bl	801750c <_malloc_r>
 801bd22:	4605      	mov	r5, r0
 801bd24:	b118      	cbz	r0, 801bd2e <_calloc_r+0x18>
 801bd26:	4622      	mov	r2, r4
 801bd28:	2100      	movs	r1, #0
 801bd2a:	f7fb fb98 	bl	801745e <memset>
 801bd2e:	4628      	mov	r0, r5
 801bd30:	bd38      	pop	{r3, r4, r5, pc}

0801bd32 <_realloc_r>:
 801bd32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd34:	4607      	mov	r7, r0
 801bd36:	4614      	mov	r4, r2
 801bd38:	460e      	mov	r6, r1
 801bd3a:	b921      	cbnz	r1, 801bd46 <_realloc_r+0x14>
 801bd3c:	4611      	mov	r1, r2
 801bd3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bd42:	f7fb bbe3 	b.w	801750c <_malloc_r>
 801bd46:	b922      	cbnz	r2, 801bd52 <_realloc_r+0x20>
 801bd48:	f7fb fb92 	bl	8017470 <_free_r>
 801bd4c:	4625      	mov	r5, r4
 801bd4e:	4628      	mov	r0, r5
 801bd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd52:	f000 f9ce 	bl	801c0f2 <_malloc_usable_size_r>
 801bd56:	42a0      	cmp	r0, r4
 801bd58:	d20f      	bcs.n	801bd7a <_realloc_r+0x48>
 801bd5a:	4621      	mov	r1, r4
 801bd5c:	4638      	mov	r0, r7
 801bd5e:	f7fb fbd5 	bl	801750c <_malloc_r>
 801bd62:	4605      	mov	r5, r0
 801bd64:	2800      	cmp	r0, #0
 801bd66:	d0f2      	beq.n	801bd4e <_realloc_r+0x1c>
 801bd68:	4631      	mov	r1, r6
 801bd6a:	4622      	mov	r2, r4
 801bd6c:	f7fb fb6c 	bl	8017448 <memcpy>
 801bd70:	4631      	mov	r1, r6
 801bd72:	4638      	mov	r0, r7
 801bd74:	f7fb fb7c 	bl	8017470 <_free_r>
 801bd78:	e7e9      	b.n	801bd4e <_realloc_r+0x1c>
 801bd7a:	4635      	mov	r5, r6
 801bd7c:	e7e7      	b.n	801bd4e <_realloc_r+0x1c>

0801bd7e <__ssputs_r>:
 801bd7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd82:	688e      	ldr	r6, [r1, #8]
 801bd84:	429e      	cmp	r6, r3
 801bd86:	4682      	mov	sl, r0
 801bd88:	460c      	mov	r4, r1
 801bd8a:	4690      	mov	r8, r2
 801bd8c:	4699      	mov	r9, r3
 801bd8e:	d837      	bhi.n	801be00 <__ssputs_r+0x82>
 801bd90:	898a      	ldrh	r2, [r1, #12]
 801bd92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bd96:	d031      	beq.n	801bdfc <__ssputs_r+0x7e>
 801bd98:	6825      	ldr	r5, [r4, #0]
 801bd9a:	6909      	ldr	r1, [r1, #16]
 801bd9c:	1a6f      	subs	r7, r5, r1
 801bd9e:	6965      	ldr	r5, [r4, #20]
 801bda0:	2302      	movs	r3, #2
 801bda2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bda6:	fb95 f5f3 	sdiv	r5, r5, r3
 801bdaa:	f109 0301 	add.w	r3, r9, #1
 801bdae:	443b      	add	r3, r7
 801bdb0:	429d      	cmp	r5, r3
 801bdb2:	bf38      	it	cc
 801bdb4:	461d      	movcc	r5, r3
 801bdb6:	0553      	lsls	r3, r2, #21
 801bdb8:	d530      	bpl.n	801be1c <__ssputs_r+0x9e>
 801bdba:	4629      	mov	r1, r5
 801bdbc:	f7fb fba6 	bl	801750c <_malloc_r>
 801bdc0:	4606      	mov	r6, r0
 801bdc2:	b950      	cbnz	r0, 801bdda <__ssputs_r+0x5c>
 801bdc4:	230c      	movs	r3, #12
 801bdc6:	f8ca 3000 	str.w	r3, [sl]
 801bdca:	89a3      	ldrh	r3, [r4, #12]
 801bdcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bdd0:	81a3      	strh	r3, [r4, #12]
 801bdd2:	f04f 30ff 	mov.w	r0, #4294967295
 801bdd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdda:	463a      	mov	r2, r7
 801bddc:	6921      	ldr	r1, [r4, #16]
 801bdde:	f7fb fb33 	bl	8017448 <memcpy>
 801bde2:	89a3      	ldrh	r3, [r4, #12]
 801bde4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bdec:	81a3      	strh	r3, [r4, #12]
 801bdee:	6126      	str	r6, [r4, #16]
 801bdf0:	6165      	str	r5, [r4, #20]
 801bdf2:	443e      	add	r6, r7
 801bdf4:	1bed      	subs	r5, r5, r7
 801bdf6:	6026      	str	r6, [r4, #0]
 801bdf8:	60a5      	str	r5, [r4, #8]
 801bdfa:	464e      	mov	r6, r9
 801bdfc:	454e      	cmp	r6, r9
 801bdfe:	d900      	bls.n	801be02 <__ssputs_r+0x84>
 801be00:	464e      	mov	r6, r9
 801be02:	4632      	mov	r2, r6
 801be04:	4641      	mov	r1, r8
 801be06:	6820      	ldr	r0, [r4, #0]
 801be08:	f7ff fb6c 	bl	801b4e4 <memmove>
 801be0c:	68a3      	ldr	r3, [r4, #8]
 801be0e:	1b9b      	subs	r3, r3, r6
 801be10:	60a3      	str	r3, [r4, #8]
 801be12:	6823      	ldr	r3, [r4, #0]
 801be14:	441e      	add	r6, r3
 801be16:	6026      	str	r6, [r4, #0]
 801be18:	2000      	movs	r0, #0
 801be1a:	e7dc      	b.n	801bdd6 <__ssputs_r+0x58>
 801be1c:	462a      	mov	r2, r5
 801be1e:	f7ff ff88 	bl	801bd32 <_realloc_r>
 801be22:	4606      	mov	r6, r0
 801be24:	2800      	cmp	r0, #0
 801be26:	d1e2      	bne.n	801bdee <__ssputs_r+0x70>
 801be28:	6921      	ldr	r1, [r4, #16]
 801be2a:	4650      	mov	r0, sl
 801be2c:	f7fb fb20 	bl	8017470 <_free_r>
 801be30:	e7c8      	b.n	801bdc4 <__ssputs_r+0x46>
	...

0801be34 <_svfiprintf_r>:
 801be34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be38:	461d      	mov	r5, r3
 801be3a:	898b      	ldrh	r3, [r1, #12]
 801be3c:	061f      	lsls	r7, r3, #24
 801be3e:	b09d      	sub	sp, #116	; 0x74
 801be40:	4680      	mov	r8, r0
 801be42:	460c      	mov	r4, r1
 801be44:	4616      	mov	r6, r2
 801be46:	d50f      	bpl.n	801be68 <_svfiprintf_r+0x34>
 801be48:	690b      	ldr	r3, [r1, #16]
 801be4a:	b96b      	cbnz	r3, 801be68 <_svfiprintf_r+0x34>
 801be4c:	2140      	movs	r1, #64	; 0x40
 801be4e:	f7fb fb5d 	bl	801750c <_malloc_r>
 801be52:	6020      	str	r0, [r4, #0]
 801be54:	6120      	str	r0, [r4, #16]
 801be56:	b928      	cbnz	r0, 801be64 <_svfiprintf_r+0x30>
 801be58:	230c      	movs	r3, #12
 801be5a:	f8c8 3000 	str.w	r3, [r8]
 801be5e:	f04f 30ff 	mov.w	r0, #4294967295
 801be62:	e0c8      	b.n	801bff6 <_svfiprintf_r+0x1c2>
 801be64:	2340      	movs	r3, #64	; 0x40
 801be66:	6163      	str	r3, [r4, #20]
 801be68:	2300      	movs	r3, #0
 801be6a:	9309      	str	r3, [sp, #36]	; 0x24
 801be6c:	2320      	movs	r3, #32
 801be6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801be72:	2330      	movs	r3, #48	; 0x30
 801be74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801be78:	9503      	str	r5, [sp, #12]
 801be7a:	f04f 0b01 	mov.w	fp, #1
 801be7e:	4637      	mov	r7, r6
 801be80:	463d      	mov	r5, r7
 801be82:	f815 3b01 	ldrb.w	r3, [r5], #1
 801be86:	b10b      	cbz	r3, 801be8c <_svfiprintf_r+0x58>
 801be88:	2b25      	cmp	r3, #37	; 0x25
 801be8a:	d13e      	bne.n	801bf0a <_svfiprintf_r+0xd6>
 801be8c:	ebb7 0a06 	subs.w	sl, r7, r6
 801be90:	d00b      	beq.n	801beaa <_svfiprintf_r+0x76>
 801be92:	4653      	mov	r3, sl
 801be94:	4632      	mov	r2, r6
 801be96:	4621      	mov	r1, r4
 801be98:	4640      	mov	r0, r8
 801be9a:	f7ff ff70 	bl	801bd7e <__ssputs_r>
 801be9e:	3001      	adds	r0, #1
 801bea0:	f000 80a4 	beq.w	801bfec <_svfiprintf_r+0x1b8>
 801bea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bea6:	4453      	add	r3, sl
 801bea8:	9309      	str	r3, [sp, #36]	; 0x24
 801beaa:	783b      	ldrb	r3, [r7, #0]
 801beac:	2b00      	cmp	r3, #0
 801beae:	f000 809d 	beq.w	801bfec <_svfiprintf_r+0x1b8>
 801beb2:	2300      	movs	r3, #0
 801beb4:	f04f 32ff 	mov.w	r2, #4294967295
 801beb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bebc:	9304      	str	r3, [sp, #16]
 801bebe:	9307      	str	r3, [sp, #28]
 801bec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bec4:	931a      	str	r3, [sp, #104]	; 0x68
 801bec6:	462f      	mov	r7, r5
 801bec8:	2205      	movs	r2, #5
 801beca:	f817 1b01 	ldrb.w	r1, [r7], #1
 801bece:	4850      	ldr	r0, [pc, #320]	; (801c010 <_svfiprintf_r+0x1dc>)
 801bed0:	f7ec f8be 	bl	8008050 <memchr>
 801bed4:	9b04      	ldr	r3, [sp, #16]
 801bed6:	b9d0      	cbnz	r0, 801bf0e <_svfiprintf_r+0xda>
 801bed8:	06d9      	lsls	r1, r3, #27
 801beda:	bf44      	itt	mi
 801bedc:	2220      	movmi	r2, #32
 801bede:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801bee2:	071a      	lsls	r2, r3, #28
 801bee4:	bf44      	itt	mi
 801bee6:	222b      	movmi	r2, #43	; 0x2b
 801bee8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801beec:	782a      	ldrb	r2, [r5, #0]
 801beee:	2a2a      	cmp	r2, #42	; 0x2a
 801bef0:	d015      	beq.n	801bf1e <_svfiprintf_r+0xea>
 801bef2:	9a07      	ldr	r2, [sp, #28]
 801bef4:	462f      	mov	r7, r5
 801bef6:	2000      	movs	r0, #0
 801bef8:	250a      	movs	r5, #10
 801befa:	4639      	mov	r1, r7
 801befc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bf00:	3b30      	subs	r3, #48	; 0x30
 801bf02:	2b09      	cmp	r3, #9
 801bf04:	d94d      	bls.n	801bfa2 <_svfiprintf_r+0x16e>
 801bf06:	b1b8      	cbz	r0, 801bf38 <_svfiprintf_r+0x104>
 801bf08:	e00f      	b.n	801bf2a <_svfiprintf_r+0xf6>
 801bf0a:	462f      	mov	r7, r5
 801bf0c:	e7b8      	b.n	801be80 <_svfiprintf_r+0x4c>
 801bf0e:	4a40      	ldr	r2, [pc, #256]	; (801c010 <_svfiprintf_r+0x1dc>)
 801bf10:	1a80      	subs	r0, r0, r2
 801bf12:	fa0b f000 	lsl.w	r0, fp, r0
 801bf16:	4318      	orrs	r0, r3
 801bf18:	9004      	str	r0, [sp, #16]
 801bf1a:	463d      	mov	r5, r7
 801bf1c:	e7d3      	b.n	801bec6 <_svfiprintf_r+0x92>
 801bf1e:	9a03      	ldr	r2, [sp, #12]
 801bf20:	1d11      	adds	r1, r2, #4
 801bf22:	6812      	ldr	r2, [r2, #0]
 801bf24:	9103      	str	r1, [sp, #12]
 801bf26:	2a00      	cmp	r2, #0
 801bf28:	db01      	blt.n	801bf2e <_svfiprintf_r+0xfa>
 801bf2a:	9207      	str	r2, [sp, #28]
 801bf2c:	e004      	b.n	801bf38 <_svfiprintf_r+0x104>
 801bf2e:	4252      	negs	r2, r2
 801bf30:	f043 0302 	orr.w	r3, r3, #2
 801bf34:	9207      	str	r2, [sp, #28]
 801bf36:	9304      	str	r3, [sp, #16]
 801bf38:	783b      	ldrb	r3, [r7, #0]
 801bf3a:	2b2e      	cmp	r3, #46	; 0x2e
 801bf3c:	d10c      	bne.n	801bf58 <_svfiprintf_r+0x124>
 801bf3e:	787b      	ldrb	r3, [r7, #1]
 801bf40:	2b2a      	cmp	r3, #42	; 0x2a
 801bf42:	d133      	bne.n	801bfac <_svfiprintf_r+0x178>
 801bf44:	9b03      	ldr	r3, [sp, #12]
 801bf46:	1d1a      	adds	r2, r3, #4
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	9203      	str	r2, [sp, #12]
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	bfb8      	it	lt
 801bf50:	f04f 33ff 	movlt.w	r3, #4294967295
 801bf54:	3702      	adds	r7, #2
 801bf56:	9305      	str	r3, [sp, #20]
 801bf58:	4d2e      	ldr	r5, [pc, #184]	; (801c014 <_svfiprintf_r+0x1e0>)
 801bf5a:	7839      	ldrb	r1, [r7, #0]
 801bf5c:	2203      	movs	r2, #3
 801bf5e:	4628      	mov	r0, r5
 801bf60:	f7ec f876 	bl	8008050 <memchr>
 801bf64:	b138      	cbz	r0, 801bf76 <_svfiprintf_r+0x142>
 801bf66:	2340      	movs	r3, #64	; 0x40
 801bf68:	1b40      	subs	r0, r0, r5
 801bf6a:	fa03 f000 	lsl.w	r0, r3, r0
 801bf6e:	9b04      	ldr	r3, [sp, #16]
 801bf70:	4303      	orrs	r3, r0
 801bf72:	3701      	adds	r7, #1
 801bf74:	9304      	str	r3, [sp, #16]
 801bf76:	7839      	ldrb	r1, [r7, #0]
 801bf78:	4827      	ldr	r0, [pc, #156]	; (801c018 <_svfiprintf_r+0x1e4>)
 801bf7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bf7e:	2206      	movs	r2, #6
 801bf80:	1c7e      	adds	r6, r7, #1
 801bf82:	f7ec f865 	bl	8008050 <memchr>
 801bf86:	2800      	cmp	r0, #0
 801bf88:	d038      	beq.n	801bffc <_svfiprintf_r+0x1c8>
 801bf8a:	4b24      	ldr	r3, [pc, #144]	; (801c01c <_svfiprintf_r+0x1e8>)
 801bf8c:	bb13      	cbnz	r3, 801bfd4 <_svfiprintf_r+0x1a0>
 801bf8e:	9b03      	ldr	r3, [sp, #12]
 801bf90:	3307      	adds	r3, #7
 801bf92:	f023 0307 	bic.w	r3, r3, #7
 801bf96:	3308      	adds	r3, #8
 801bf98:	9303      	str	r3, [sp, #12]
 801bf9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf9c:	444b      	add	r3, r9
 801bf9e:	9309      	str	r3, [sp, #36]	; 0x24
 801bfa0:	e76d      	b.n	801be7e <_svfiprintf_r+0x4a>
 801bfa2:	fb05 3202 	mla	r2, r5, r2, r3
 801bfa6:	2001      	movs	r0, #1
 801bfa8:	460f      	mov	r7, r1
 801bfaa:	e7a6      	b.n	801befa <_svfiprintf_r+0xc6>
 801bfac:	2300      	movs	r3, #0
 801bfae:	3701      	adds	r7, #1
 801bfb0:	9305      	str	r3, [sp, #20]
 801bfb2:	4619      	mov	r1, r3
 801bfb4:	250a      	movs	r5, #10
 801bfb6:	4638      	mov	r0, r7
 801bfb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bfbc:	3a30      	subs	r2, #48	; 0x30
 801bfbe:	2a09      	cmp	r2, #9
 801bfc0:	d903      	bls.n	801bfca <_svfiprintf_r+0x196>
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d0c8      	beq.n	801bf58 <_svfiprintf_r+0x124>
 801bfc6:	9105      	str	r1, [sp, #20]
 801bfc8:	e7c6      	b.n	801bf58 <_svfiprintf_r+0x124>
 801bfca:	fb05 2101 	mla	r1, r5, r1, r2
 801bfce:	2301      	movs	r3, #1
 801bfd0:	4607      	mov	r7, r0
 801bfd2:	e7f0      	b.n	801bfb6 <_svfiprintf_r+0x182>
 801bfd4:	ab03      	add	r3, sp, #12
 801bfd6:	9300      	str	r3, [sp, #0]
 801bfd8:	4622      	mov	r2, r4
 801bfda:	4b11      	ldr	r3, [pc, #68]	; (801c020 <_svfiprintf_r+0x1ec>)
 801bfdc:	a904      	add	r1, sp, #16
 801bfde:	4640      	mov	r0, r8
 801bfe0:	f7fb fcc2 	bl	8017968 <_printf_float>
 801bfe4:	f1b0 3fff 	cmp.w	r0, #4294967295
 801bfe8:	4681      	mov	r9, r0
 801bfea:	d1d6      	bne.n	801bf9a <_svfiprintf_r+0x166>
 801bfec:	89a3      	ldrh	r3, [r4, #12]
 801bfee:	065b      	lsls	r3, r3, #25
 801bff0:	f53f af35 	bmi.w	801be5e <_svfiprintf_r+0x2a>
 801bff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bff6:	b01d      	add	sp, #116	; 0x74
 801bff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bffc:	ab03      	add	r3, sp, #12
 801bffe:	9300      	str	r3, [sp, #0]
 801c000:	4622      	mov	r2, r4
 801c002:	4b07      	ldr	r3, [pc, #28]	; (801c020 <_svfiprintf_r+0x1ec>)
 801c004:	a904      	add	r1, sp, #16
 801c006:	4640      	mov	r0, r8
 801c008:	f7fb ff64 	bl	8017ed4 <_printf_i>
 801c00c:	e7ea      	b.n	801bfe4 <_svfiprintf_r+0x1b0>
 801c00e:	bf00      	nop
 801c010:	0801c744 	.word	0x0801c744
 801c014:	0801c74a 	.word	0x0801c74a
 801c018:	0801c74e 	.word	0x0801c74e
 801c01c:	08017969 	.word	0x08017969
 801c020:	0801bd7f 	.word	0x0801bd7f

0801c024 <_putc_r>:
 801c024:	b570      	push	{r4, r5, r6, lr}
 801c026:	460d      	mov	r5, r1
 801c028:	4614      	mov	r4, r2
 801c02a:	4606      	mov	r6, r0
 801c02c:	b118      	cbz	r0, 801c036 <_putc_r+0x12>
 801c02e:	6983      	ldr	r3, [r0, #24]
 801c030:	b90b      	cbnz	r3, 801c036 <_putc_r+0x12>
 801c032:	f7fb f8db 	bl	80171ec <__sinit>
 801c036:	4b13      	ldr	r3, [pc, #76]	; (801c084 <_putc_r+0x60>)
 801c038:	429c      	cmp	r4, r3
 801c03a:	d112      	bne.n	801c062 <_putc_r+0x3e>
 801c03c:	6874      	ldr	r4, [r6, #4]
 801c03e:	68a3      	ldr	r3, [r4, #8]
 801c040:	3b01      	subs	r3, #1
 801c042:	2b00      	cmp	r3, #0
 801c044:	60a3      	str	r3, [r4, #8]
 801c046:	da16      	bge.n	801c076 <_putc_r+0x52>
 801c048:	69a2      	ldr	r2, [r4, #24]
 801c04a:	4293      	cmp	r3, r2
 801c04c:	db02      	blt.n	801c054 <_putc_r+0x30>
 801c04e:	b2eb      	uxtb	r3, r5
 801c050:	2b0a      	cmp	r3, #10
 801c052:	d110      	bne.n	801c076 <_putc_r+0x52>
 801c054:	4622      	mov	r2, r4
 801c056:	4629      	mov	r1, r5
 801c058:	4630      	mov	r0, r6
 801c05a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c05e:	f7fd bf85 	b.w	8019f6c <__swbuf_r>
 801c062:	4b09      	ldr	r3, [pc, #36]	; (801c088 <_putc_r+0x64>)
 801c064:	429c      	cmp	r4, r3
 801c066:	d101      	bne.n	801c06c <_putc_r+0x48>
 801c068:	68b4      	ldr	r4, [r6, #8]
 801c06a:	e7e8      	b.n	801c03e <_putc_r+0x1a>
 801c06c:	4b07      	ldr	r3, [pc, #28]	; (801c08c <_putc_r+0x68>)
 801c06e:	429c      	cmp	r4, r3
 801c070:	bf08      	it	eq
 801c072:	68f4      	ldreq	r4, [r6, #12]
 801c074:	e7e3      	b.n	801c03e <_putc_r+0x1a>
 801c076:	6823      	ldr	r3, [r4, #0]
 801c078:	1c5a      	adds	r2, r3, #1
 801c07a:	6022      	str	r2, [r4, #0]
 801c07c:	701d      	strb	r5, [r3, #0]
 801c07e:	b2e8      	uxtb	r0, r5
 801c080:	bd70      	pop	{r4, r5, r6, pc}
 801c082:	bf00      	nop
 801c084:	0801c700 	.word	0x0801c700
 801c088:	0801c720 	.word	0x0801c720
 801c08c:	0801c6e0 	.word	0x0801c6e0

0801c090 <_read_r>:
 801c090:	b538      	push	{r3, r4, r5, lr}
 801c092:	4c07      	ldr	r4, [pc, #28]	; (801c0b0 <_read_r+0x20>)
 801c094:	4605      	mov	r5, r0
 801c096:	4608      	mov	r0, r1
 801c098:	4611      	mov	r1, r2
 801c09a:	2200      	movs	r2, #0
 801c09c:	6022      	str	r2, [r4, #0]
 801c09e:	461a      	mov	r2, r3
 801c0a0:	f7f4 fb70 	bl	8010784 <_read>
 801c0a4:	1c43      	adds	r3, r0, #1
 801c0a6:	d102      	bne.n	801c0ae <_read_r+0x1e>
 801c0a8:	6823      	ldr	r3, [r4, #0]
 801c0aa:	b103      	cbz	r3, 801c0ae <_read_r+0x1e>
 801c0ac:	602b      	str	r3, [r5, #0]
 801c0ae:	bd38      	pop	{r3, r4, r5, pc}
 801c0b0:	20001084 	.word	0x20001084

0801c0b4 <strncmp>:
 801c0b4:	b510      	push	{r4, lr}
 801c0b6:	b16a      	cbz	r2, 801c0d4 <strncmp+0x20>
 801c0b8:	3901      	subs	r1, #1
 801c0ba:	1884      	adds	r4, r0, r2
 801c0bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c0c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c0c4:	4293      	cmp	r3, r2
 801c0c6:	d103      	bne.n	801c0d0 <strncmp+0x1c>
 801c0c8:	42a0      	cmp	r0, r4
 801c0ca:	d001      	beq.n	801c0d0 <strncmp+0x1c>
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d1f5      	bne.n	801c0bc <strncmp+0x8>
 801c0d0:	1a98      	subs	r0, r3, r2
 801c0d2:	bd10      	pop	{r4, pc}
 801c0d4:	4610      	mov	r0, r2
 801c0d6:	e7fc      	b.n	801c0d2 <strncmp+0x1e>

0801c0d8 <__ascii_wctomb>:
 801c0d8:	b149      	cbz	r1, 801c0ee <__ascii_wctomb+0x16>
 801c0da:	2aff      	cmp	r2, #255	; 0xff
 801c0dc:	bf85      	ittet	hi
 801c0de:	238a      	movhi	r3, #138	; 0x8a
 801c0e0:	6003      	strhi	r3, [r0, #0]
 801c0e2:	700a      	strbls	r2, [r1, #0]
 801c0e4:	f04f 30ff 	movhi.w	r0, #4294967295
 801c0e8:	bf98      	it	ls
 801c0ea:	2001      	movls	r0, #1
 801c0ec:	4770      	bx	lr
 801c0ee:	4608      	mov	r0, r1
 801c0f0:	4770      	bx	lr

0801c0f2 <_malloc_usable_size_r>:
 801c0f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c0f6:	1f18      	subs	r0, r3, #4
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	bfbc      	itt	lt
 801c0fc:	580b      	ldrlt	r3, [r1, r0]
 801c0fe:	18c0      	addlt	r0, r0, r3
 801c100:	4770      	bx	lr
	...

0801c104 <_init>:
 801c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c106:	bf00      	nop
 801c108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c10a:	bc08      	pop	{r3}
 801c10c:	469e      	mov	lr, r3
 801c10e:	4770      	bx	lr

0801c110 <_fini>:
 801c110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c112:	bf00      	nop
 801c114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c116:	bc08      	pop	{r3}
 801c118:	469e      	mov	lr, r3
 801c11a:	4770      	bx	lr
